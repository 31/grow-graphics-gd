// Code generated by the generate package DO NOT EDIT
package gd

import "github.com/readykit/gd/gdnative"

type Side int64

const (
	SideLeft Side = 0
	SideTop Side = 1
	SideRight Side = 2
	SideBottom Side = 3
)

type Corner int64

const (
	CornerTopLeft Corner = 0
	CornerTopRight Corner = 1
	CornerBottomRight Corner = 2
	CornerBottomLeft Corner = 3
)

type Orientation int64

const (
	Vertical Orientation = 1
	Horizontal Orientation = 0
)

type ClockDirection int64

const (
	Clockwise ClockDirection = 0
	Counterclockwise ClockDirection = 1
)

type HorizontalAlignment int64

const (
	HorizontalAlignmentLeft HorizontalAlignment = 0
	HorizontalAlignmentCenter HorizontalAlignment = 1
	HorizontalAlignmentRight HorizontalAlignment = 2
	HorizontalAlignmentFill HorizontalAlignment = 3
)

type VerticalAlignment int64

const (
	VerticalAlignmentTop VerticalAlignment = 0
	VerticalAlignmentCenter VerticalAlignment = 1
	VerticalAlignmentBottom VerticalAlignment = 2
	VerticalAlignmentFill VerticalAlignment = 3
)

type InlineAlignment int64

const (
	InlineAlignmentTopTo InlineAlignment = 0
	InlineAlignmentCenterTo InlineAlignment = 1
	InlineAlignmentBottomTo InlineAlignment = 2
	InlineAlignmentToTop InlineAlignment = 0
	InlineAlignmentToCenter InlineAlignment = 4
	InlineAlignmentToBaseline InlineAlignment = 8
	InlineAlignmentToBottom InlineAlignment = 12
	InlineAlignmentTop InlineAlignment = 0
	InlineAlignmentCenter InlineAlignment = 5
	InlineAlignmentBottom InlineAlignment = 14
	InlineAlignmentImageMask InlineAlignment = 3
	InlineAlignmentTextMask InlineAlignment = 12
)

type Key int64

const (
	KeyNone Key = 0
	KeySpecial Key = 16777216
	KeyEscape Key = 16777217
	KeyTab Key = 16777218
	KeyBacktab Key = 16777219
	KeyBackspace Key = 16777220
	KeyEnter Key = 16777221
	KeyKpEnter Key = 16777222
	KeyInsert Key = 16777223
	KeyDelete Key = 16777224
	KeyPause Key = 16777225
	KeyPrint Key = 16777226
	KeySysreq Key = 16777227
	KeyClear Key = 16777228
	KeyHome Key = 16777229
	KeyEnd Key = 16777230
	KeyLeft Key = 16777231
	KeyUp Key = 16777232
	KeyRight Key = 16777233
	KeyDown Key = 16777234
	KeyPageup Key = 16777235
	KeyPagedown Key = 16777236
	KeyShift Key = 16777237
	KeyCtrl Key = 16777238
	KeyMeta Key = 16777239
	KeyAlt Key = 16777240
	KeyCapslock Key = 16777241
	KeyNumlock Key = 16777242
	KeyScrolllock Key = 16777243
	KeyF1 Key = 16777244
	KeyF2 Key = 16777245
	KeyF3 Key = 16777246
	KeyF4 Key = 16777247
	KeyF5 Key = 16777248
	KeyF6 Key = 16777249
	KeyF7 Key = 16777250
	KeyF8 Key = 16777251
	KeyF9 Key = 16777252
	KeyF10 Key = 16777253
	KeyF11 Key = 16777254
	KeyF12 Key = 16777255
	KeyF13 Key = 16777256
	KeyF14 Key = 16777257
	KeyF15 Key = 16777258
	KeyF16 Key = 16777259
	KeyF17 Key = 16777260
	KeyF18 Key = 16777261
	KeyF19 Key = 16777262
	KeyF20 Key = 16777263
	KeyF21 Key = 16777264
	KeyF22 Key = 16777265
	KeyF23 Key = 16777266
	KeyF24 Key = 16777267
	KeyF25 Key = 16777268
	KeyF26 Key = 16777269
	KeyF27 Key = 16777270
	KeyF28 Key = 16777271
	KeyF29 Key = 16777272
	KeyF30 Key = 16777273
	KeyF31 Key = 16777274
	KeyF32 Key = 16777275
	KeyF33 Key = 16777276
	KeyF34 Key = 16777277
	KeyF35 Key = 16777278
	KeyKpMultiply Key = 16777345
	KeyKpDivide Key = 16777346
	KeyKpSubtract Key = 16777347
	KeyKpPeriod Key = 16777348
	KeyKpAdd Key = 16777349
	KeyKp0 Key = 16777350
	KeyKp1 Key = 16777351
	KeyKp2 Key = 16777352
	KeyKp3 Key = 16777353
	KeyKp4 Key = 16777354
	KeyKp5 Key = 16777355
	KeyKp6 Key = 16777356
	KeyKp7 Key = 16777357
	KeyKp8 Key = 16777358
	KeyKp9 Key = 16777359
	KeySuperL Key = 16777280
	KeySuperR Key = 16777281
	KeyMenu Key = 16777282
	KeyHyperL Key = 16777283
	KeyHyperR Key = 16777284
	KeyHelp Key = 16777285
	KeyDirectionL Key = 16777286
	KeyDirectionR Key = 16777287
	KeyBack Key = 16777288
	KeyForward Key = 16777289
	KeyStop Key = 16777290
	KeyRefresh Key = 16777291
	KeyVolumedown Key = 16777292
	KeyVolumemute Key = 16777293
	KeyVolumeup Key = 16777294
	KeyBassboost Key = 16777295
	KeyBassup Key = 16777296
	KeyBassdown Key = 16777297
	KeyTrebleup Key = 16777298
	KeyTrebledown Key = 16777299
	KeyMediaplay Key = 16777300
	KeyMediastop Key = 16777301
	KeyMediaprevious Key = 16777302
	KeyMedianext Key = 16777303
	KeyMediarecord Key = 16777304
	KeyHomepage Key = 16777305
	KeyFavorites Key = 16777306
	KeySearch Key = 16777307
	KeyStandby Key = 16777308
	KeyOpenurl Key = 16777309
	KeyLaunchmail Key = 16777310
	KeyLaunchmedia Key = 16777311
	KeyLaunch0 Key = 16777312
	KeyLaunch1 Key = 16777313
	KeyLaunch2 Key = 16777314
	KeyLaunch3 Key = 16777315
	KeyLaunch4 Key = 16777316
	KeyLaunch5 Key = 16777317
	KeyLaunch6 Key = 16777318
	KeyLaunch7 Key = 16777319
	KeyLaunch8 Key = 16777320
	KeyLaunch9 Key = 16777321
	KeyLauncha Key = 16777322
	KeyLaunchb Key = 16777323
	KeyLaunchc Key = 16777324
	KeyLaunchd Key = 16777325
	KeyLaunche Key = 16777326
	KeyLaunchf Key = 16777327
	KeyUnknown Key = 33554431
	KeySpace Key = 32
	KeyExclam Key = 33
	KeyQuotedbl Key = 34
	KeyNumbersign Key = 35
	KeyDollar Key = 36
	KeyPercent Key = 37
	KeyAmpersand Key = 38
	KeyApostrophe Key = 39
	KeyParenleft Key = 40
	KeyParenright Key = 41
	KeyAsterisk Key = 42
	KeyPlus Key = 43
	KeyComma Key = 44
	KeyMinus Key = 45
	KeyPeriod Key = 46
	KeySlash Key = 47
	Key0 Key = 48
	Key1 Key = 49
	Key2 Key = 50
	Key3 Key = 51
	Key4 Key = 52
	Key5 Key = 53
	Key6 Key = 54
	Key7 Key = 55
	Key8 Key = 56
	Key9 Key = 57
	KeyColon Key = 58
	KeySemicolon Key = 59
	KeyLess Key = 60
	KeyEqual Key = 61
	KeyGreater Key = 62
	KeyQuestion Key = 63
	KeyAt Key = 64
	KeyA Key = 65
	KeyB Key = 66
	KeyC Key = 67
	KeyD Key = 68
	KeyE Key = 69
	KeyF Key = 70
	KeyG Key = 71
	KeyH Key = 72
	KeyI Key = 73
	KeyJ Key = 74
	KeyK Key = 75
	KeyL Key = 76
	KeyM Key = 77
	KeyN Key = 78
	KeyO Key = 79
	KeyP Key = 80
	KeyQ Key = 81
	KeyR Key = 82
	KeyS Key = 83
	KeyT Key = 84
	KeyU Key = 85
	KeyV Key = 86
	KeyW Key = 87
	KeyX Key = 88
	KeyY Key = 89
	KeyZ Key = 90
	KeyBracketleft Key = 91
	KeyBackslash Key = 92
	KeyBracketright Key = 93
	KeyAsciicircum Key = 94
	KeyUnderscore Key = 95
	KeyQuoteleft Key = 96
	KeyBraceleft Key = 123
	KeyBar Key = 124
	KeyBraceright Key = 125
	KeyAsciitilde Key = 126
	KeyNobreakspace Key = 160
	KeyExclamdown Key = 161
	KeyCent Key = 162
	KeySterling Key = 163
	KeyCurrency Key = 164
	KeyYen Key = 165
	KeyBrokenbar Key = 166
	KeySection Key = 167
	KeyDiaeresis Key = 168
	KeyCopyright Key = 169
	KeyOrdfeminine Key = 170
	KeyGuillemotleft Key = 171
	KeyNotsign Key = 172
	KeyHyphen Key = 173
	KeyRegistered Key = 174
	KeyMacron Key = 175
	KeyDegree Key = 176
	KeyPlusminus Key = 177
	KeyTwosuperior Key = 178
	KeyThreesuperior Key = 179
	KeyAcute Key = 180
	KeyMu Key = 181
	KeyParagraph Key = 182
	KeyPeriodcentered Key = 183
	KeyCedilla Key = 184
	KeyOnesuperior Key = 185
	KeyMasculine Key = 186
	KeyGuillemotright Key = 187
	KeyOnequarter Key = 188
	KeyOnehalf Key = 189
	KeyThreequarters Key = 190
	KeyQuestiondown Key = 191
	KeyAgrave Key = 192
	KeyAacute Key = 193
	KeyAcircumflex Key = 194
	KeyAtilde Key = 195
	KeyAdiaeresis Key = 196
	KeyAring Key = 197
	KeyAe Key = 198
	KeyCcedilla Key = 199
	KeyEgrave Key = 200
	KeyEacute Key = 201
	KeyEcircumflex Key = 202
	KeyEdiaeresis Key = 203
	KeyIgrave Key = 204
	KeyIacute Key = 205
	KeyIcircumflex Key = 206
	KeyIdiaeresis Key = 207
	KeyEth Key = 208
	KeyNtilde Key = 209
	KeyOgrave Key = 210
	KeyOacute Key = 211
	KeyOcircumflex Key = 212
	KeyOtilde Key = 213
	KeyOdiaeresis Key = 214
	KeyMultiply Key = 215
	KeyOoblique Key = 216
	KeyUgrave Key = 217
	KeyUacute Key = 218
	KeyUcircumflex Key = 219
	KeyUdiaeresis Key = 220
	KeyYacute Key = 221
	KeyThorn Key = 222
	KeySsharp Key = 223
	KeyDivision Key = 247
	KeyYdiaeresis Key = 255
)

type KeyModifierMask int64

const (
	KeyCodeMask KeyModifierMask = 33554431
	KeyModifierMaskDefault KeyModifierMask = 2130706432
	KeyMaskShift KeyModifierMask = 33554432
	KeyMaskAlt KeyModifierMask = 67108864
	KeyMaskMeta KeyModifierMask = 134217728
	KeyMaskCtrl KeyModifierMask = 268435456
	KeyMaskCmd KeyModifierMask = 268435456
	KeyMaskKpad KeyModifierMask = 536870912
	KeyMaskGroupSwitch KeyModifierMask = 1073741824
)

type MouseButton int64

const (
	MouseButtonNone MouseButton = 0
	MouseButtonLeft MouseButton = 1
	MouseButtonRight MouseButton = 2
	MouseButtonMiddle MouseButton = 3
	MouseButtonWheelUp MouseButton = 4
	MouseButtonWheelDown MouseButton = 5
	MouseButtonWheelLeft MouseButton = 6
	MouseButtonWheelRight MouseButton = 7
	MouseButtonXbutton1 MouseButton = 8
	MouseButtonXbutton2 MouseButton = 9
	MouseButtonMaskLeft MouseButton = 1
	MouseButtonMaskRight MouseButton = 2
	MouseButtonMaskMiddle MouseButton = 4
	MouseButtonMaskXbutton1 MouseButton = 128
	MouseButtonMaskXbutton2 MouseButton = 256
)

type JoyButton int64

const (
	JoyButtonInvalid JoyButton = -1
	JoyButtonA JoyButton = 0
	JoyButtonB JoyButton = 1
	JoyButtonX JoyButton = 2
	JoyButtonY JoyButton = 3
	JoyButtonBack JoyButton = 4
	JoyButtonGuide JoyButton = 5
	JoyButtonStart JoyButton = 6
	JoyButtonLeftStick JoyButton = 7
	JoyButtonRightStick JoyButton = 8
	JoyButtonLeftShoulder JoyButton = 9
	JoyButtonRightShoulder JoyButton = 10
	JoyButtonDpadUp JoyButton = 11
	JoyButtonDpadDown JoyButton = 12
	JoyButtonDpadLeft JoyButton = 13
	JoyButtonDpadRight JoyButton = 14
	JoyButtonMisc1 JoyButton = 15
	JoyButtonPaddle1 JoyButton = 16
	JoyButtonPaddle2 JoyButton = 17
	JoyButtonPaddle3 JoyButton = 18
	JoyButtonPaddle4 JoyButton = 19
	JoyButtonTouchpad JoyButton = 20
	JoyButtonSdlMax JoyButton = 21
	JoyButtonMax JoyButton = 128
)

type JoyAxis int64

const (
	JoyAxisInvalid JoyAxis = -1
	JoyAxisLeftX JoyAxis = 0
	JoyAxisLeftY JoyAxis = 1
	JoyAxisRightX JoyAxis = 2
	JoyAxisRightY JoyAxis = 3
	JoyAxisTriggerLeft JoyAxis = 4
	JoyAxisTriggerRight JoyAxis = 5
	JoyAxisSdlMax JoyAxis = 6
	JoyAxisMax JoyAxis = 10
)

type MIDIMessage int64

const (
	MidiMessageNone MIDIMessage = 0
	MidiMessageNoteOff MIDIMessage = 8
	MidiMessageNoteOn MIDIMessage = 9
	MidiMessageAftertouch MIDIMessage = 10
	MidiMessageControlChange MIDIMessage = 11
	MidiMessageProgramChange MIDIMessage = 12
	MidiMessageChannelPressure MIDIMessage = 13
	MidiMessagePitchBend MIDIMessage = 14
	MidiMessageSystemExclusive MIDIMessage = 240
	MidiMessageQuarterFrame MIDIMessage = 241
	MidiMessageSongPositionPointer MIDIMessage = 242
	MidiMessageSongSelect MIDIMessage = 243
	MidiMessageTuneRequest MIDIMessage = 246
	MidiMessageTimingClock MIDIMessage = 248
	MidiMessageStart MIDIMessage = 250
	MidiMessageContinue MIDIMessage = 251
	MidiMessageStop MIDIMessage = 252
	MidiMessageActiveSensing MIDIMessage = 254
	MidiMessageSystemReset MIDIMessage = 255
)

type Error int64

const (
	Ok Error = 0
	Failed Error = 1
	ErrUnavailable Error = 2
	ErrUnconfigured Error = 3
	ErrUnauthorized Error = 4
	ErrParameterRangeError Error = 5
	ErrOutOfMemory Error = 6
	ErrFileNotFound Error = 7
	ErrFileBadDrive Error = 8
	ErrFileBadPath Error = 9
	ErrFileNoPermission Error = 10
	ErrFileAlreadyInUse Error = 11
	ErrFileCantOpen Error = 12
	ErrFileCantWrite Error = 13
	ErrFileCantRead Error = 14
	ErrFileUnrecognized Error = 15
	ErrFileCorrupt Error = 16
	ErrFileMissingDependencies Error = 17
	ErrFileEof Error = 18
	ErrCantOpen Error = 19
	ErrCantCreate Error = 20
	ErrQueryFailed Error = 21
	ErrAlreadyInUse Error = 22
	ErrLocked Error = 23
	ErrTimeout Error = 24
	ErrCantConnect Error = 25
	ErrCantResolve Error = 26
	ErrConnectionError Error = 27
	ErrCantAcquireResource Error = 28
	ErrCantFork Error = 29
	ErrInvalidData Error = 30
	ErrInvalidParameter Error = 31
	ErrAlreadyExists Error = 32
	ErrDoesNotExist Error = 33
	ErrDatabaseCantRead Error = 34
	ErrDatabaseCantWrite Error = 35
	ErrCompilationFailed Error = 36
	ErrMethodNotFound Error = 37
	ErrLinkFailed Error = 38
	ErrScriptFailed Error = 39
	ErrCyclicLink Error = 40
	ErrInvalidDeclaration Error = 41
	ErrDuplicateSymbol Error = 42
	ErrParseError Error = 43
	ErrBusy Error = 44
	ErrSkip Error = 45
	ErrHelp Error = 46
	ErrBug Error = 47
	ErrPrinterOnFire Error = 48
)

type PropertyHint int64

const (
	PropertyHintNone PropertyHint = 0
	PropertyHintRange PropertyHint = 1
	PropertyHintEnum PropertyHint = 2
	PropertyHintEnumSuggestion PropertyHint = 3
	PropertyHintExpEasing PropertyHint = 4
	PropertyHintLink PropertyHint = 5
	PropertyHintFlags PropertyHint = 6
	PropertyHintLayers2dRender PropertyHint = 7
	PropertyHintLayers2dPhysics PropertyHint = 8
	PropertyHintLayers2dNavigation PropertyHint = 9
	PropertyHintLayers3dRender PropertyHint = 10
	PropertyHintLayers3dPhysics PropertyHint = 11
	PropertyHintLayers3dNavigation PropertyHint = 12
	PropertyHintFile PropertyHint = 13
	PropertyHintDir PropertyHint = 14
	PropertyHintGlobalFile PropertyHint = 15
	PropertyHintGlobalDir PropertyHint = 16
	PropertyHintResourceType PropertyHint = 17
	PropertyHintMultilineText PropertyHint = 18
	PropertyHintExpression PropertyHint = 19
	PropertyHintPlaceholderText PropertyHint = 20
	PropertyHintColorNoAlpha PropertyHint = 21
	PropertyHintImageCompressLossy PropertyHint = 22
	PropertyHintImageCompressLossless PropertyHint = 23
	PropertyHintObjectId PropertyHint = 24
	PropertyHintTypeString PropertyHint = 25
	PropertyHintNodePathToEditedNode PropertyHint = 26
	PropertyHintMethodOfVariantType PropertyHint = 27
	PropertyHintMethodOfBaseType PropertyHint = 28
	PropertyHintMethodOfInstance PropertyHint = 29
	PropertyHintMethodOfScript PropertyHint = 30
	PropertyHintPropertyOfVariantType PropertyHint = 31
	PropertyHintPropertyOfBaseType PropertyHint = 32
	PropertyHintPropertyOfInstance PropertyHint = 33
	PropertyHintPropertyOfScript PropertyHint = 34
	PropertyHintObjectTooBig PropertyHint = 35
	PropertyHintNodePathValidTypes PropertyHint = 36
	PropertyHintSaveFile PropertyHint = 37
	PropertyHintGlobalSaveFile PropertyHint = 38
	PropertyHintIntIsObjectid PropertyHint = 39
	PropertyHintIntIsPointer PropertyHint = 41
	PropertyHintArrayType PropertyHint = 40
	PropertyHintLocaleId PropertyHint = 42
	PropertyHintLocalizableString PropertyHint = 43
	PropertyHintNodeType PropertyHint = 44
	PropertyHintMax PropertyHint = 45
)

type PropertyUsageFlags int64

const (
	PropertyUsageNone PropertyUsageFlags = 0
	PropertyUsageStorage PropertyUsageFlags = 2
	PropertyUsageEditor PropertyUsageFlags = 4
	PropertyUsageCheckable PropertyUsageFlags = 8
	PropertyUsageChecked PropertyUsageFlags = 16
	PropertyUsageInternationalized PropertyUsageFlags = 32
	PropertyUsageGroup PropertyUsageFlags = 64
	PropertyUsageCategory PropertyUsageFlags = 128
	PropertyUsageSubgroup PropertyUsageFlags = 256
	PropertyUsageClassIsBitfield PropertyUsageFlags = 512
	PropertyUsageNoInstanceState PropertyUsageFlags = 1024
	PropertyUsageRestartIfChanged PropertyUsageFlags = 2048
	PropertyUsageScriptVariable PropertyUsageFlags = 4096
	PropertyUsageStoreIfNull PropertyUsageFlags = 8192
	PropertyUsageAnimateAsTrigger PropertyUsageFlags = 16384
	PropertyUsageUpdateAllIfModified PropertyUsageFlags = 32768
	PropertyUsageScriptDefaultValue PropertyUsageFlags = 65536
	PropertyUsageClassIsEnum PropertyUsageFlags = 131072
	PropertyUsageNilIsVariant PropertyUsageFlags = 262144
	PropertyUsageInternal PropertyUsageFlags = 524288
	PropertyUsageDoNotShareOnDuplicate PropertyUsageFlags = 1048576
	PropertyUsageHighEndGfx PropertyUsageFlags = 2097152
	PropertyUsageNodePathFromSceneRoot PropertyUsageFlags = 4194304
	PropertyUsageResourceNotPersistent PropertyUsageFlags = 8388608
	PropertyUsageKeyingIncrements PropertyUsageFlags = 16777216
	PropertyUsageDeferredSetResource PropertyUsageFlags = 33554432
	PropertyUsageEditorInstantiateObject PropertyUsageFlags = 67108864
	PropertyUsageEditorBasicSetting PropertyUsageFlags = 134217728
	PropertyUsageArray PropertyUsageFlags = 536870912
	PropertyUsageDefault PropertyUsageFlags = 6
	PropertyUsageDefaultIntl PropertyUsageFlags = 38
	PropertyUsageNoEditor PropertyUsageFlags = 2
)

type MethodFlags int64

const (
	MethodFlagNormal MethodFlags = 1
	MethodFlagEditor MethodFlags = 2
	MethodFlagConst MethodFlags = 4
	MethodFlagVirtual MethodFlags = 8
	MethodFlagVararg MethodFlags = 16
	MethodFlagStatic MethodFlags = 32
	MethodFlagObjectCore MethodFlags = 64
	MethodFlagsDefault MethodFlags = 1
)

type VariantType int64

const (
	TypeNil VariantType = 0
	TypeBool VariantType = 1
	TypeInt VariantType = 2
	TypeFloat VariantType = 3
	TypeString VariantType = 4
	TypeVector2 VariantType = 5
	TypeVector2i VariantType = 6
	TypeRect2 VariantType = 7
	TypeRect2i VariantType = 8
	TypeVector3 VariantType = 9
	TypeVector3i VariantType = 10
	TypeTransform2d VariantType = 11
	TypeVector4 VariantType = 12
	TypeVector4i VariantType = 13
	TypePlane VariantType = 14
	TypeQuaternion VariantType = 15
	TypeAabb VariantType = 16
	TypeBasis VariantType = 17
	TypeTransform3d VariantType = 18
	TypeProjection VariantType = 19
	TypeColor VariantType = 20
	TypeStringName VariantType = 21
	TypeNodePath VariantType = 22
	TypeRid VariantType = 23
	TypeObject VariantType = 24
	TypeCallable VariantType = 25
	TypeSignal VariantType = 26
	TypeDictionary VariantType = 27
	TypeArray VariantType = 28
	TypePackedByteArray VariantType = 29
	TypePackedInt32Array VariantType = 30
	TypePackedInt64Array VariantType = 31
	TypePackedFloat32Array VariantType = 32
	TypePackedFloat64Array VariantType = 33
	TypePackedStringArray VariantType = 34
	TypePackedVector2Array VariantType = 35
	TypePackedVector3Array VariantType = 36
	TypePackedColorArray VariantType = 37
	TypeMax VariantType = 38
)

type VariantOperator int64

const (
	OpEqual VariantOperator = 0
	OpNotEqual VariantOperator = 1
	OpLess VariantOperator = 2
	OpLessEqual VariantOperator = 3
	OpGreater VariantOperator = 4
	OpGreaterEqual VariantOperator = 5
	OpAdd VariantOperator = 6
	OpSubtract VariantOperator = 7
	OpMultiply VariantOperator = 8
	OpDivide VariantOperator = 9
	OpNegate VariantOperator = 10
	OpPositive VariantOperator = 11
	OpModule VariantOperator = 12
	OpPower VariantOperator = 13
	OpShiftLeft VariantOperator = 14
	OpShiftRight VariantOperator = 15
	OpBitAnd VariantOperator = 16
	OpBitOr VariantOperator = 17
	OpBitXor VariantOperator = 18
	OpBitNegate VariantOperator = 19
	OpAnd VariantOperator = 20
	OpOr VariantOperator = 21
	OpXor VariantOperator = 22
	OpNot VariantOperator = 23
	OpIn VariantOperator = 24
	OpMax VariantOperator = 25
)

type Vector2Axis int64

const (
	Vector2AxisX Vector2Axis = 0
	Vector2AxisY Vector2Axis = 1
)

type Vector2iAxis int64

const (
	Vector2iAxisX Vector2iAxis = 0
	Vector2iAxisY Vector2iAxis = 1
)

type Vector3Axis int64

const (
	Vector3AxisX Vector3Axis = 0
	Vector3AxisY Vector3Axis = 1
	Vector3AxisZ Vector3Axis = 2
)

type Vector3iAxis int64

const (
	Vector3iAxisX Vector3iAxis = 0
	Vector3iAxisY Vector3iAxis = 1
	Vector3iAxisZ Vector3iAxis = 2
)

type Vector4Axis int64

const (
	Vector4AxisX Vector4Axis = 0
	Vector4AxisY Vector4Axis = 1
	Vector4AxisZ Vector4Axis = 2
	Vector4AxisW Vector4Axis = 3
)

type Vector4iAxis int64

const (
	Vector4iAxisX Vector4iAxis = 0
	Vector4iAxisY Vector4iAxis = 1
	Vector4iAxisZ Vector4iAxis = 2
	Vector4iAxisW Vector4iAxis = 3
)

type BasisEulerOrder int64

const (
	BasisEulerOrderXyz BasisEulerOrder = 0
	BasisEulerOrderXzy BasisEulerOrder = 1
	BasisEulerOrderYxz BasisEulerOrder = 2
	BasisEulerOrderYzx BasisEulerOrder = 3
	BasisEulerOrderZxy BasisEulerOrder = 4
	BasisEulerOrderZyx BasisEulerOrder = 5
)

type ProjectionPlanes int64

const (
	ProjectionPlaneNear ProjectionPlanes = 0
	ProjectionPlaneFar ProjectionPlanes = 1
	ProjectionPlaneLeft ProjectionPlanes = 2
	ProjectionPlaneTop ProjectionPlanes = 3
	ProjectionPlaneRight ProjectionPlanes = 4
	ProjectionPlaneBottom ProjectionPlanes = 5
)

type AESContext gdnative.Object

var methodAESContext [4]gdnative.Method

type AESContextMode int64

const (
	AESContextModeEcbEncrypt AESContextMode = 0
	AESContextModeEcbDecrypt AESContextMode = 1
	AESContextModeCbcEncrypt AESContextMode = 2
	AESContextModeCbcDecrypt AESContextMode = 3
	AESContextModeMax AESContextMode = 4
)
func (gdClass AESContext) Start(mode AESContextMode, key []byte, iv []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAESContext[0], mode, key, iv) }
func (gdClass AESContext) Update(src []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAESContext[1], src) }
func (gdClass AESContext) GetIvState() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAESContext[2]) }
func (gdClass AESContext) Finish()  { gdnative.Call(gdnative.Object(gdClass), methodAESContext[3]) }

type AStar2D gdnative.Object

var methodAStar2D [25]gdnative.Method
func (gdClass AStar2D) EstimateCostImplementation(from_id int64, to_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar2D[0], from_id, to_id) }
func (gdClass AStar2D) ComputeCostImplementation(from_id int64, to_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar2D[1], from_id, to_id) }
func (gdClass AStar2D) GetAvailablePointId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[2]) }
func (gdClass AStar2D) AddPoint(id int64, position Vector2, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[3], id, position, weight_scale) }
func (gdClass AStar2D) GetPointPosition(id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAStar2D[4], id) }
func (gdClass AStar2D) SetPointPosition(id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[5], id, position) }
func (gdClass AStar2D) GetPointWeightScale(id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar2D[6], id) }
func (gdClass AStar2D) SetPointWeightScale(id int64, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[7], id, weight_scale) }
func (gdClass AStar2D) RemovePoint(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[8], id) }
func (gdClass AStar2D) HasPoint(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[9], id) }
func (gdClass AStar2D) GetPointConnections(id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar2D[10], id) }
func (gdClass AStar2D) GetPointIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAStar2D[11]) }
func (gdClass AStar2D) SetPointDisabled(id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[12], id, disabled) }
func (gdClass AStar2D) IsPointDisabled(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[13], id) }
func (gdClass AStar2D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[14], id, to_id, bidirectional) }
func (gdClass AStar2D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[15], id, to_id, bidirectional) }
func (gdClass AStar2D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[16], id, to_id, bidirectional) }
func (gdClass AStar2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[17]) }
func (gdClass AStar2D) GetPointCapacity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[18]) }
func (gdClass AStar2D) ReserveSpace(num_nodes int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[19], num_nodes) }
func (gdClass AStar2D) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[20]) }
func (gdClass AStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[21], to_position, include_disabled) }
func (gdClass AStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAStar2D[22], to_position) }
func (gdClass AStar2D) GetPointPath(from_id int64, to_id int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodAStar2D[23], from_id, to_id) }
func (gdClass AStar2D) GetIdPath(from_id int64, to_id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar2D[24], from_id, to_id) }

type AStar3D gdnative.Object

var methodAStar3D [25]gdnative.Method
func (gdClass AStar3D) EstimateCostImplementation(from_id int64, to_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar3D[0], from_id, to_id) }
func (gdClass AStar3D) ComputeCostImplementation(from_id int64, to_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar3D[1], from_id, to_id) }
func (gdClass AStar3D) GetAvailablePointId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[2]) }
func (gdClass AStar3D) AddPoint(id int64, position Vector3, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[3], id, position, weight_scale) }
func (gdClass AStar3D) GetPointPosition(id int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodAStar3D[4], id) }
func (gdClass AStar3D) SetPointPosition(id int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[5], id, position) }
func (gdClass AStar3D) GetPointWeightScale(id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar3D[6], id) }
func (gdClass AStar3D) SetPointWeightScale(id int64, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[7], id, weight_scale) }
func (gdClass AStar3D) RemovePoint(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[8], id) }
func (gdClass AStar3D) HasPoint(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[9], id) }
func (gdClass AStar3D) GetPointConnections(id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar3D[10], id) }
func (gdClass AStar3D) GetPointIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAStar3D[11]) }
func (gdClass AStar3D) SetPointDisabled(id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[12], id, disabled) }
func (gdClass AStar3D) IsPointDisabled(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[13], id) }
func (gdClass AStar3D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[14], id, to_id, bidirectional) }
func (gdClass AStar3D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[15], id, to_id, bidirectional) }
func (gdClass AStar3D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[16], id, to_id, bidirectional) }
func (gdClass AStar3D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[17]) }
func (gdClass AStar3D) GetPointCapacity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[18]) }
func (gdClass AStar3D) ReserveSpace(num_nodes int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[19], num_nodes) }
func (gdClass AStar3D) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[20]) }
func (gdClass AStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[21], to_position, include_disabled) }
func (gdClass AStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodAStar3D[22], to_position) }
func (gdClass AStar3D) GetPointPath(from_id int64, to_id int64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodAStar3D[23], from_id, to_id) }
func (gdClass AStar3D) GetIdPath(from_id int64, to_id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar3D[24], from_id, to_id) }

type AcceptDialog gdnative.Object

var methodAcceptDialog [16]gdnative.Method
func (gdClass AcceptDialog) GetOkButton() Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[0]) }
func (gdClass AcceptDialog) GetLabel() Label { return gdnative.Return[Label](gdnative.Object(gdClass), methodAcceptDialog[1]) }
func (gdClass AcceptDialog) SetHideOnOk(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[2], enabled) }
func (gdClass AcceptDialog) GetHideOnOk() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[3]) }
func (gdClass AcceptDialog) SetCloseOnEscape(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[4], enabled) }
func (gdClass AcceptDialog) GetCloseOnEscape() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[5]) }
func (gdClass AcceptDialog) AddButton(text string, right bool, action string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[6], text, right, action) }
func (gdClass AcceptDialog) AddCancelButton(name string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[7], name) }
func (gdClass AcceptDialog) RemoveButton(button Control)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[8], button) }
func (gdClass AcceptDialog) RegisterTextEnter(line_edit Control)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[9], line_edit) }
func (gdClass AcceptDialog) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[10], text) }
func (gdClass AcceptDialog) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAcceptDialog[11]) }
func (gdClass AcceptDialog) SetAutowrap(autowrap bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[12], autowrap) }
func (gdClass AcceptDialog) HasAutowrap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[13]) }
func (gdClass AcceptDialog) SetOkButtonText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[14], text) }
func (gdClass AcceptDialog) GetOkButtonText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAcceptDialog[15]) }

type AnimatableBody2D gdnative.Object

var methodAnimatableBody2D [2]gdnative.Method
func (gdClass AnimatableBody2D) SetSyncToPhysics(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatableBody2D[0], enable) }
func (gdClass AnimatableBody2D) IsSyncToPhysicsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatableBody2D[1]) }

type AnimatableBody3D gdnative.Object

var methodAnimatableBody3D [2]gdnative.Method
func (gdClass AnimatableBody3D) SetSyncToPhysics(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatableBody3D[0], enable) }
func (gdClass AnimatableBody3D) IsSyncToPhysicsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatableBody3D[1]) }

type AnimatedSprite2D gdnative.Object

var methodAnimatedSprite2D [20]gdnative.Method
func (gdClass AnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[0], sprite_frames) }
func (gdClass AnimatedSprite2D) GetSpriteFrames() SpriteFrames { return gdnative.Return[SpriteFrames](gdnative.Object(gdClass), methodAnimatedSprite2D[1]) }
func (gdClass AnimatedSprite2D) SetAnimation(animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[2], animation) }
func (gdClass AnimatedSprite2D) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimatedSprite2D[3]) }
func (gdClass AnimatedSprite2D) SetPlaying(playing bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[4], playing) }
func (gdClass AnimatedSprite2D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[5]) }
func (gdClass AnimatedSprite2D) Play(anim string, backwards bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[6], anim, backwards) }
func (gdClass AnimatedSprite2D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[7]) }
func (gdClass AnimatedSprite2D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[8], centered) }
func (gdClass AnimatedSprite2D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[9]) }
func (gdClass AnimatedSprite2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[10], offset) }
func (gdClass AnimatedSprite2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimatedSprite2D[11]) }
func (gdClass AnimatedSprite2D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[12], flip_h) }
func (gdClass AnimatedSprite2D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[13]) }
func (gdClass AnimatedSprite2D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[14], flip_v) }
func (gdClass AnimatedSprite2D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[15]) }
func (gdClass AnimatedSprite2D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[16], frame) }
func (gdClass AnimatedSprite2D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedSprite2D[17]) }
func (gdClass AnimatedSprite2D) SetSpeedScale(speed_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[18], speed_scale) }
func (gdClass AnimatedSprite2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedSprite2D[19]) }

type AnimatedSprite3D gdnative.Object

var methodAnimatedSprite3D [9]gdnative.Method
func (gdClass AnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[0], sprite_frames) }
func (gdClass AnimatedSprite3D) GetSpriteFrames() SpriteFrames { return gdnative.Return[SpriteFrames](gdnative.Object(gdClass), methodAnimatedSprite3D[1]) }
func (gdClass AnimatedSprite3D) SetAnimation(animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[2], animation) }
func (gdClass AnimatedSprite3D) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimatedSprite3D[3]) }
func (gdClass AnimatedSprite3D) Play(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[4], anim) }
func (gdClass AnimatedSprite3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[5]) }
func (gdClass AnimatedSprite3D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite3D[6]) }
func (gdClass AnimatedSprite3D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[7], frame) }
func (gdClass AnimatedSprite3D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedSprite3D[8]) }

type AnimatedTexture gdnative.Object

var methodAnimatedTexture [14]gdnative.Method
func (gdClass AnimatedTexture) SetFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[0], frames) }
func (gdClass AnimatedTexture) GetFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedTexture[1]) }
func (gdClass AnimatedTexture) SetCurrentFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[2], frame) }
func (gdClass AnimatedTexture) GetCurrentFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedTexture[3]) }
func (gdClass AnimatedTexture) SetPause(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[4], pause) }
func (gdClass AnimatedTexture) GetPause() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedTexture[5]) }
func (gdClass AnimatedTexture) SetOneshot(oneshot bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[6], oneshot) }
func (gdClass AnimatedTexture) GetOneshot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedTexture[7]) }
func (gdClass AnimatedTexture) SetFps(fps float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[8], fps) }
func (gdClass AnimatedTexture) GetFps() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedTexture[9]) }
func (gdClass AnimatedTexture) SetFrameTexture(frame int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[10], frame, texture) }
func (gdClass AnimatedTexture) GetFrameTexture(frame int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodAnimatedTexture[11], frame) }
func (gdClass AnimatedTexture) SetFrameDelay(frame int64, delay float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[12], frame, delay) }
func (gdClass AnimatedTexture) GetFrameDelay(frame int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedTexture[13], frame) }

type Animation gdnative.Object

var methodAnimation [71]gdnative.Method

type AnimationTrackType int64

const (
	AnimationTypeValue AnimationTrackType = 0
	AnimationTypePosition3d AnimationTrackType = 1
	AnimationTypeRotation3d AnimationTrackType = 2
	AnimationTypeScale3d AnimationTrackType = 3
	AnimationTypeBlendShape AnimationTrackType = 4
	AnimationTypeMethod AnimationTrackType = 5
	AnimationTypeBezier AnimationTrackType = 6
	AnimationTypeAudio AnimationTrackType = 7
	AnimationTypeAnimation AnimationTrackType = 8
)

type AnimationInterpolationType int64

const (
	AnimationInterpolationNearest AnimationInterpolationType = 0
	AnimationInterpolationLinear AnimationInterpolationType = 1
	AnimationInterpolationCubic AnimationInterpolationType = 2
)

type AnimationUpdateMode int64

const (
	AnimationUpdateContinuous AnimationUpdateMode = 0
	AnimationUpdateDiscrete AnimationUpdateMode = 1
	AnimationUpdateTrigger AnimationUpdateMode = 2
	AnimationUpdateCapture AnimationUpdateMode = 3
)

type AnimationLoopMode int64

const (
	AnimationLoopNone AnimationLoopMode = 0
	AnimationLoopLinear AnimationLoopMode = 1
	AnimationLoopPingpong AnimationLoopMode = 2
)

type AnimationHandleMode int64

const (
	AnimationHandleModeFree AnimationHandleMode = 0
	AnimationHandleModeBalanced AnimationHandleMode = 1
)
func (gdClass Animation) AddTrack(atype AnimationTrackType, at_position int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[0], atype, at_position) }
func (gdClass Animation) RemoveTrack(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[1], track_idx) }
func (gdClass Animation) GetTrackCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[2]) }
func (gdClass Animation) TrackGetType(track_idx int64) AnimationTrackType { return gdnative.Return[AnimationTrackType](gdnative.Object(gdClass), methodAnimation[3], track_idx) }
func (gdClass Animation) TrackGetPath(track_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimation[4], track_idx) }
func (gdClass Animation) TrackSetPath(track_idx int64, path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[5], track_idx, path) }
func (gdClass Animation) FindTrack(path NodePath, atype AnimationTrackType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[6], path, atype) }
func (gdClass Animation) TrackMoveUp(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[7], track_idx) }
func (gdClass Animation) TrackMoveDown(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[8], track_idx) }
func (gdClass Animation) TrackMoveTo(track_idx int64, to_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[9], track_idx, to_idx) }
func (gdClass Animation) TrackSwap(track_idx int64, with_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[10], track_idx, with_idx) }
func (gdClass Animation) TrackSetImported(track_idx int64, imported bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[11], track_idx, imported) }
func (gdClass Animation) TrackIsImported(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[12], track_idx) }
func (gdClass Animation) TrackSetEnabled(track_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[13], track_idx, enabled) }
func (gdClass Animation) TrackIsEnabled(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[14], track_idx) }
func (gdClass Animation) PositionTrackInsertKey(track_idx int64, time float64, position Vector3) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[15], track_idx, time, position) }
func (gdClass Animation) RotationTrackInsertKey(track_idx int64, time float64, rotation Quaternion) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[16], track_idx, time, rotation) }
func (gdClass Animation) ScaleTrackInsertKey(track_idx int64, time float64, scale Vector3) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[17], track_idx, time, scale) }
func (gdClass Animation) BlendShapeTrackInsertKey(track_idx int64, time float64, amount float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[18], track_idx, time, amount) }
func (gdClass Animation) TrackInsertKey(track_idx int64, time float64, key any, transition float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[19], track_idx, time, key, transition) }
func (gdClass Animation) TrackRemoveKey(track_idx int64, key_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[20], track_idx, key_idx) }
func (gdClass Animation) TrackRemoveKeyAtTime(track_idx int64, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[21], track_idx, time) }
func (gdClass Animation) TrackSetKeyValue(track_idx int64, key int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[22], track_idx, key, value) }
func (gdClass Animation) TrackSetKeyTransition(track_idx int64, key_idx int64, transition float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[23], track_idx, key_idx, transition) }
func (gdClass Animation) TrackSetKeyTime(track_idx int64, key_idx int64, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[24], track_idx, key_idx, time) }
func (gdClass Animation) TrackGetKeyTransition(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[25], track_idx, key_idx) }
func (gdClass Animation) TrackGetKeyCount(track_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[26], track_idx) }
func (gdClass Animation) TrackGetKeyValue(track_idx int64, key_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimation[27], track_idx, key_idx) }
func (gdClass Animation) TrackGetKeyTime(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[28], track_idx, key_idx) }
func (gdClass Animation) TrackFindKey(track_idx int64, time float64, exact bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[29], track_idx, time, exact) }
func (gdClass Animation) TrackSetInterpolationType(track_idx int64, interpolation AnimationInterpolationType)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[30], track_idx, interpolation) }
func (gdClass Animation) TrackGetInterpolationType(track_idx int64) AnimationInterpolationType { return gdnative.Return[AnimationInterpolationType](gdnative.Object(gdClass), methodAnimation[31], track_idx) }
func (gdClass Animation) TrackSetInterpolationLoopWrap(track_idx int64, interpolation bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[32], track_idx, interpolation) }
func (gdClass Animation) TrackGetInterpolationLoopWrap(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[33], track_idx) }
func (gdClass Animation) TrackIsCompressed(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[34], track_idx) }
func (gdClass Animation) ValueTrackSetUpdateMode(track_idx int64, mode AnimationUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[35], track_idx, mode) }
func (gdClass Animation) ValueTrackGetUpdateMode(track_idx int64) AnimationUpdateMode { return gdnative.Return[AnimationUpdateMode](gdnative.Object(gdClass), methodAnimation[36], track_idx) }
func (gdClass Animation) ValueTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodAnimation[37], track_idx, time_sec, delta) }
func (gdClass Animation) ValueTrackInterpolate(track_idx int64, time_sec float64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimation[38], track_idx, time_sec) }
func (gdClass Animation) MethodTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodAnimation[39], track_idx, time_sec, delta) }
func (gdClass Animation) MethodTrackGetName(track_idx int64, key_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimation[40], track_idx, key_idx) }
func (gdClass Animation) MethodTrackGetParams(track_idx int64, key_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimation[41], track_idx, key_idx) }
func (gdClass Animation) BezierTrackInsertKey(track_idx int64, time float64, value float64, in_handle Vector2, out_handle Vector2, handle_mode AnimationHandleMode) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[42], track_idx, time, value, in_handle, out_handle, handle_mode) }
func (gdClass Animation) BezierTrackSetKeyValue(track_idx int64, key_idx int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[43], track_idx, key_idx, value) }
func (gdClass Animation) BezierTrackSetKeyInHandle(track_idx int64, key_idx int64, in_handle Vector2, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[44], track_idx, key_idx, in_handle, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackSetKeyOutHandle(track_idx int64, key_idx int64, out_handle Vector2, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[45], track_idx, key_idx, out_handle, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackGetKeyValue(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[46], track_idx, key_idx) }
func (gdClass Animation) BezierTrackGetKeyInHandle(track_idx int64, key_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimation[47], track_idx, key_idx) }
func (gdClass Animation) BezierTrackGetKeyOutHandle(track_idx int64, key_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimation[48], track_idx, key_idx) }
func (gdClass Animation) BezierTrackInterpolate(track_idx int64, time float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[49], track_idx, time) }
func (gdClass Animation) AudioTrackInsertKey(track_idx int64, time float64, stream Resource, start_offset float64, end_offset float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[50], track_idx, time, stream, start_offset, end_offset) }
func (gdClass Animation) AudioTrackSetKeyStream(track_idx int64, key_idx int64, stream Resource)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[51], track_idx, key_idx, stream) }
func (gdClass Animation) AudioTrackSetKeyStartOffset(track_idx int64, key_idx int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[52], track_idx, key_idx, offset) }
func (gdClass Animation) AudioTrackSetKeyEndOffset(track_idx int64, key_idx int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[53], track_idx, key_idx, offset) }
func (gdClass Animation) AudioTrackGetKeyStream(track_idx int64, key_idx int64) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodAnimation[54], track_idx, key_idx) }
func (gdClass Animation) AudioTrackGetKeyStartOffset(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[55], track_idx, key_idx) }
func (gdClass Animation) AudioTrackGetKeyEndOffset(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[56], track_idx, key_idx) }
func (gdClass Animation) BezierTrackSetKeyHandleMode(track_idx int64, key_idx int64, key_handle_mode AnimationHandleMode, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[57], track_idx, key_idx, key_handle_mode, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackGetKeyHandleMode(track_idx int64, key_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[58], track_idx, key_idx) }
func (gdClass Animation) AnimationTrackInsertKey(track_idx int64, time float64, animation string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[59], track_idx, time, animation) }
func (gdClass Animation) AnimationTrackSetKeyAnimation(track_idx int64, key_idx int64, animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[60], track_idx, key_idx, animation) }
func (gdClass Animation) AnimationTrackGetKeyAnimation(track_idx int64, key_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimation[61], track_idx, key_idx) }
func (gdClass Animation) SetLength(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[62], time_sec) }
func (gdClass Animation) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[63]) }
func (gdClass Animation) SetLoopMode(loop_mode AnimationLoopMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[64], loop_mode) }
func (gdClass Animation) GetLoopMode() AnimationLoopMode { return gdnative.Return[AnimationLoopMode](gdnative.Object(gdClass), methodAnimation[65]) }
func (gdClass Animation) SetStep(size_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[66], size_sec) }
func (gdClass Animation) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[67]) }
func (gdClass Animation) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[68]) }
func (gdClass Animation) CopyTrack(track_idx int64, to_animation Animation)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[69], track_idx, to_animation) }
func (gdClass Animation) Compress(page_size int64, fps int64, split_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[70], page_size, fps, split_tolerance) }

type AnimationLibrary gdnative.Object

var methodAnimationLibrary [6]gdnative.Method
func (gdClass AnimationLibrary) AddAnimation(name string, animation Animation) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAnimationLibrary[0], name, animation) }
func (gdClass AnimationLibrary) RemoveAnimation(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationLibrary[1], name) }
func (gdClass AnimationLibrary) RenameAnimation(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationLibrary[2], name, newname) }
func (gdClass AnimationLibrary) HasAnimation(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationLibrary[3], name) }
func (gdClass AnimationLibrary) GetAnimation(name string) Animation { return gdnative.Return[Animation](gdnative.Object(gdClass), methodAnimationLibrary[4], name) }
func (gdClass AnimationLibrary) GetAnimationList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimationLibrary[5]) }

type AnimationNode gdnative.Object

var methodAnimationNode [20]gdnative.Method

type AnimationNodeFilterAction int64

const (
	AnimationNodeFilterIgnore AnimationNodeFilterAction = 0
	AnimationNodeFilterPass AnimationNodeFilterAction = 1
	AnimationNodeFilterStop AnimationNodeFilterAction = 2
	AnimationNodeFilterBlend AnimationNodeFilterAction = 3
)
func (gdClass AnimationNode) GetChildNodesImplementation() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodAnimationNode[0]) }
func (gdClass AnimationNode) GetParameterListImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimationNode[1]) }
func (gdClass AnimationNode) GetChildByNameImplementation(name string) AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationNode[2], name) }
func (gdClass AnimationNode) GetParameterDefaultValueImplementation(parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimationNode[3], parameter) }
func (gdClass AnimationNode) ProcessImplementation(time float64, seek bool, seek_root bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNode[4], time, seek, seek_root) }
func (gdClass AnimationNode) GetCaptionImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNode[5]) }
func (gdClass AnimationNode) HasFilterImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNode[6]) }
func (gdClass AnimationNode) GetInputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNode[7]) }
func (gdClass AnimationNode) GetInputName(input int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNode[8], input) }
func (gdClass AnimationNode) AddInput(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[9], name) }
func (gdClass AnimationNode) RemoveInput(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[10], index) }
func (gdClass AnimationNode) SetFilterPath(path NodePath, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[11], path, enable) }
func (gdClass AnimationNode) IsPathFiltered(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNode[12], path) }
func (gdClass AnimationNode) SetFilterEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[13], enable) }
func (gdClass AnimationNode) IsFilterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNode[14]) }
func (gdClass AnimationNode) BlendAnimation(animation string, time float64, delta float64, seeked bool, seek_root bool, blend float64, pingponged int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[15], animation, time, delta, seeked, seek_root, blend, pingponged) }
func (gdClass AnimationNode) BlendNode(name string, node AnimationNode, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNode[16], name, node, time, seek, seek_root, blend, filter, sync) }
func (gdClass AnimationNode) BlendInput(input_index int64, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNode[17], input_index, time, seek, seek_root, blend, filter, sync) }
func (gdClass AnimationNode) SetParameter(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[18], name, value) }
func (gdClass AnimationNode) GetParameter(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimationNode[19], name) }

type AnimationNodeAdd2 gdnative.Object

var methodAnimationNodeAdd2 [0]gdnative.Method

type AnimationNodeAdd3 gdnative.Object

var methodAnimationNodeAdd3 [0]gdnative.Method

type AnimationNodeAnimation gdnative.Object

var methodAnimationNodeAnimation [4]gdnative.Method

type AnimationNodeAnimationPlayMode int64

const (
	AnimationNodeAnimationPlayModeForward AnimationNodeAnimationPlayMode = 0
	AnimationNodeAnimationPlayModeBackward AnimationNodeAnimationPlayMode = 1
)
func (gdClass AnimationNodeAnimation) SetAnimation(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeAnimation[0], name) }
func (gdClass AnimationNodeAnimation) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeAnimation[1]) }
func (gdClass AnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeAnimation[2], mode) }
func (gdClass AnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode { return gdnative.Return[AnimationNodeAnimationPlayMode](gdnative.Object(gdClass), methodAnimationNodeAnimation[3]) }

type AnimationNodeBlend2 gdnative.Object

var methodAnimationNodeBlend2 [0]gdnative.Method

type AnimationNodeBlend3 gdnative.Object

var methodAnimationNodeBlend3 [0]gdnative.Method

type AnimationNodeBlendSpace1D gdnative.Object

var methodAnimationNodeBlendSpace1D [17]gdnative.Method
func (gdClass AnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos float64, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[0], node, pos, at_index) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointPosition(point int64, pos float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[1], point, pos) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointPosition(point int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[2], point) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointNode(point int64, node AnimationRootNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[3], point, node) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointNode(point int64) AnimationRootNode { return gdnative.Return[AnimationRootNode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[4], point) }
func (gdClass AnimationNodeBlendSpace1D) RemoveBlendPoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[5], point) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[6]) }
func (gdClass AnimationNodeBlendSpace1D) SetMinSpace(min_space float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[7], min_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMinSpace() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[8]) }
func (gdClass AnimationNodeBlendSpace1D) SetMaxSpace(max_space float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[9], max_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMaxSpace() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[10]) }
func (gdClass AnimationNodeBlendSpace1D) SetSnap(snap float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[11], snap) }
func (gdClass AnimationNodeBlendSpace1D) GetSnap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[12]) }
func (gdClass AnimationNodeBlendSpace1D) SetValueLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[13], text) }
func (gdClass AnimationNodeBlendSpace1D) GetValueLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[14]) }
func (gdClass AnimationNodeBlendSpace1D) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[15], enable) }
func (gdClass AnimationNodeBlendSpace1D) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[16]) }

type AnimationNodeBlendSpace2D gdnative.Object

var methodAnimationNodeBlendSpace2D [27]gdnative.Method

type AnimationNodeBlendSpace2DBlendMode int64

const (
	AnimationNodeBlendSpace2DBlendModeInterpolated AnimationNodeBlendSpace2DBlendMode = 0
	AnimationNodeBlendSpace2DBlendModeDiscrete AnimationNodeBlendSpace2DBlendMode = 1
	AnimationNodeBlendSpace2DBlendModeDiscreteCarry AnimationNodeBlendSpace2DBlendMode = 2
)
func (gdClass AnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[0], node, pos, at_index) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointPosition(point int64, pos Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[1], point, pos) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointPosition(point int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[2], point) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointNode(point int64, node AnimationRootNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[3], point, node) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointNode(point int64) AnimationRootNode { return gdnative.Return[AnimationRootNode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[4], point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveBlendPoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[5], point) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[6]) }
func (gdClass AnimationNodeBlendSpace2D) AddTriangle(x int64, y int64, z int64, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[7], x, y, z, at_index) }
func (gdClass AnimationNodeBlendSpace2D) GetTrianglePoint(triangle int64, point int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[8], triangle, point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveTriangle(triangle int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[9], triangle) }
func (gdClass AnimationNodeBlendSpace2D) GetTriangleCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[10]) }
func (gdClass AnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[11], min_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMinSpace() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[12]) }
func (gdClass AnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[13], max_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMaxSpace() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[14]) }
func (gdClass AnimationNodeBlendSpace2D) SetSnap(snap Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[15], snap) }
func (gdClass AnimationNodeBlendSpace2D) GetSnap() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[16]) }
func (gdClass AnimationNodeBlendSpace2D) SetXLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[17], text) }
func (gdClass AnimationNodeBlendSpace2D) GetXLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[18]) }
func (gdClass AnimationNodeBlendSpace2D) SetYLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[19], text) }
func (gdClass AnimationNodeBlendSpace2D) GetYLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[20]) }
func (gdClass AnimationNodeBlendSpace2D) SetAutoTriangles(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[21], enable) }
func (gdClass AnimationNodeBlendSpace2D) GetAutoTriangles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[22]) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[23], mode) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode { return gdnative.Return[AnimationNodeBlendSpace2DBlendMode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[24]) }
func (gdClass AnimationNodeBlendSpace2D) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[25], enable) }
func (gdClass AnimationNodeBlendSpace2D) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[26]) }

type AnimationNodeBlendTree gdnative.Object

var methodAnimationNodeBlendTree [11]gdnative.Method
func (gdClass AnimationNodeBlendTree) AddNode(name string, node AnimationNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[0], name, node, position) }
func (gdClass AnimationNodeBlendTree) GetNode(name string) AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationNodeBlendTree[1], name) }
func (gdClass AnimationNodeBlendTree) RemoveNode(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[2], name) }
func (gdClass AnimationNodeBlendTree) RenameNode(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[3], name, new_name) }
func (gdClass AnimationNodeBlendTree) HasNode(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendTree[4], name) }
func (gdClass AnimationNodeBlendTree) ConnectNode(input_node string, input_index int64, output_node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[5], input_node, input_index, output_node) }
func (gdClass AnimationNodeBlendTree) DisconnectNode(input_node string, input_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[6], input_node, input_index) }
func (gdClass AnimationNodeBlendTree) SetNodePosition(name string, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[7], name, position) }
func (gdClass AnimationNodeBlendTree) GetNodePosition(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendTree[8], name) }
func (gdClass AnimationNodeBlendTree) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[9], offset) }
func (gdClass AnimationNodeBlendTree) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendTree[10]) }

type AnimationNodeOneShot gdnative.Object

var methodAnimationNodeOneShot [12]gdnative.Method

type AnimationNodeOneShotMixMode int64

const (
	AnimationNodeOneShotMixModeBlend AnimationNodeOneShotMixMode = 0
	AnimationNodeOneShotMixModeAdd AnimationNodeOneShotMixMode = 1
)
func (gdClass AnimationNodeOneShot) SetFadeinTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[0], time) }
func (gdClass AnimationNodeOneShot) GetFadeinTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[1]) }
func (gdClass AnimationNodeOneShot) SetFadeoutTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[2], time) }
func (gdClass AnimationNodeOneShot) GetFadeoutTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[3]) }
func (gdClass AnimationNodeOneShot) SetAutorestart(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[4], enable) }
func (gdClass AnimationNodeOneShot) HasAutorestart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeOneShot[5]) }
func (gdClass AnimationNodeOneShot) SetAutorestartDelay(enable float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[6], enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[7]) }
func (gdClass AnimationNodeOneShot) SetAutorestartRandomDelay(enable float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[8], enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartRandomDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[9]) }
func (gdClass AnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[10], mode) }
func (gdClass AnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode { return gdnative.Return[AnimationNodeOneShotMixMode](gdnative.Object(gdClass), methodAnimationNodeOneShot[11]) }

type AnimationNodeOutput gdnative.Object

var methodAnimationNodeOutput [0]gdnative.Method

type AnimationNodeStateMachine gdnative.Object

var methodAnimationNodeStateMachine [19]gdnative.Method
func (gdClass AnimationNodeStateMachine) AddNode(name string, node AnimationNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[0], name, node, position) }
func (gdClass AnimationNodeStateMachine) ReplaceNode(name string, node AnimationNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[1], name, node) }
func (gdClass AnimationNodeStateMachine) GetNode(name string) AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationNodeStateMachine[2], name) }
func (gdClass AnimationNodeStateMachine) RemoveNode(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[3], name) }
func (gdClass AnimationNodeStateMachine) RenameNode(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[4], name, new_name) }
func (gdClass AnimationNodeStateMachine) HasNode(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachine[5], name) }
func (gdClass AnimationNodeStateMachine) GetNodeName(node AnimationNode) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[6], node) }
func (gdClass AnimationNodeStateMachine) SetNodePosition(name string, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[7], name, position) }
func (gdClass AnimationNodeStateMachine) GetNodePosition(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeStateMachine[8], name) }
func (gdClass AnimationNodeStateMachine) HasTransition(from string, to string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachine[9], from, to) }
func (gdClass AnimationNodeStateMachine) AddTransition(from string, to string, transition AnimationNodeStateMachineTransition)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[10], from, to, transition) }
func (gdClass AnimationNodeStateMachine) GetTransition(idx int64) AnimationNodeStateMachineTransition { return gdnative.Return[AnimationNodeStateMachineTransition](gdnative.Object(gdClass), methodAnimationNodeStateMachine[11], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionFrom(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[12], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionTo(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[13], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeStateMachine[14]) }
func (gdClass AnimationNodeStateMachine) RemoveTransitionByIndex(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[15], idx) }
func (gdClass AnimationNodeStateMachine) RemoveTransition(from string, to string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[16], from, to) }
func (gdClass AnimationNodeStateMachine) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[17], offset) }
func (gdClass AnimationNodeStateMachine) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeStateMachine[18]) }

type AnimationNodeStateMachinePlayback gdnative.Object

var methodAnimationNodeStateMachinePlayback [8]gdnative.Method
func (gdClass AnimationNodeStateMachinePlayback) Travel(to_node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[0], to_node) }
func (gdClass AnimationNodeStateMachinePlayback) Start(node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[1], node) }
func (gdClass AnimationNodeStateMachinePlayback) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[2]) }
func (gdClass AnimationNodeStateMachinePlayback) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[3]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentNode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[4]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentPlayPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[5]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[6]) }
func (gdClass AnimationNodeStateMachinePlayback) GetTravelPath() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[7]) }

type AnimationNodeStateMachineTransition gdnative.Object

var methodAnimationNodeStateMachineTransition [16]gdnative.Method

type AnimationNodeStateMachineTransitionSwitchMode int64

const (
	AnimationNodeStateMachineTransitionSwitchModeImmediate AnimationNodeStateMachineTransitionSwitchMode = 0
	AnimationNodeStateMachineTransitionSwitchModeSync AnimationNodeStateMachineTransitionSwitchMode = 1
	AnimationNodeStateMachineTransitionSwitchModeAtEnd AnimationNodeStateMachineTransitionSwitchMode = 2
)
func (gdClass AnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[0], mode) }
func (gdClass AnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode { return gdnative.Return[AnimationNodeStateMachineTransitionSwitchMode](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[1]) }
func (gdClass AnimationNodeStateMachineTransition) SetAutoAdvance(auto_advance bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[2], auto_advance) }
func (gdClass AnimationNodeStateMachineTransition) HasAutoAdvance() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[3]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceCondition(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[4], name) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceCondition() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[5]) }
func (gdClass AnimationNodeStateMachineTransition) SetXfadeTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[6], secs) }
func (gdClass AnimationNodeStateMachineTransition) GetXfadeTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[7]) }
func (gdClass AnimationNodeStateMachineTransition) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[8], disabled) }
func (gdClass AnimationNodeStateMachineTransition) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[9]) }
func (gdClass AnimationNodeStateMachineTransition) SetPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[10], priority) }
func (gdClass AnimationNodeStateMachineTransition) GetPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[11]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpression(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[12], text) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpression() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[13]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpressionBaseNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[14], path) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpressionBaseNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[15]) }

type AnimationNodeSync gdnative.Object

var methodAnimationNodeSync [2]gdnative.Method
func (gdClass AnimationNodeSync) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeSync[0], enable) }
func (gdClass AnimationNodeSync) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeSync[1]) }

type AnimationNodeTimeScale gdnative.Object

var methodAnimationNodeTimeScale [0]gdnative.Method

type AnimationNodeTimeSeek gdnative.Object

var methodAnimationNodeTimeSeek [0]gdnative.Method

type AnimationNodeTransition gdnative.Object

var methodAnimationNodeTransition [10]gdnative.Method
func (gdClass AnimationNodeTransition) SetEnabledInputs(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[0], amount) }
func (gdClass AnimationNodeTransition) GetEnabledInputs() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeTransition[1]) }
func (gdClass AnimationNodeTransition) SetInputAsAutoAdvance(input int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[2], input, enable) }
func (gdClass AnimationNodeTransition) IsInputSetAsAutoAdvance(input int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeTransition[3], input) }
func (gdClass AnimationNodeTransition) SetInputCaption(input int64, caption string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[4], input, caption) }
func (gdClass AnimationNodeTransition) GetInputCaption(input int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeTransition[5], input) }
func (gdClass AnimationNodeTransition) SetCrossFadeTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[6], time) }
func (gdClass AnimationNodeTransition) GetCrossFadeTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeTransition[7]) }
func (gdClass AnimationNodeTransition) SetFromStart(from_start bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[8], from_start) }
func (gdClass AnimationNodeTransition) IsFromStart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeTransition[9]) }

type AnimationPlayer gdnative.Object

var methodAnimationPlayer [50]gdnative.Method

type AnimationPlayerAnimationProcessCallback int64

const (
	AnimationPlayerAnimationProcessPhysics AnimationPlayerAnimationProcessCallback = 0
	AnimationPlayerAnimationProcessIdle AnimationPlayerAnimationProcessCallback = 1
	AnimationPlayerAnimationProcessManual AnimationPlayerAnimationProcessCallback = 2
)

type AnimationPlayerAnimationMethodCallMode int64

const (
	AnimationPlayerAnimationMethodCallDeferred AnimationPlayerAnimationMethodCallMode = 0
	AnimationPlayerAnimationMethodCallImmediate AnimationPlayerAnimationMethodCallMode = 1
)
func (gdClass AnimationPlayer) AddAnimationLibrary(name string, library AnimationLibrary) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAnimationPlayer[0], name, library) }
func (gdClass AnimationPlayer) RemoveAnimationLibrary(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[1], name) }
func (gdClass AnimationPlayer) RenameAnimationLibrary(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[2], name, newname) }
func (gdClass AnimationPlayer) HasAnimationLibrary(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[3], name) }
func (gdClass AnimationPlayer) GetAnimationLibrary(name string) AnimationLibrary { return gdnative.Return[AnimationLibrary](gdnative.Object(gdClass), methodAnimationPlayer[4], name) }
func (gdClass AnimationPlayer) GetAnimationLibraryList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimationPlayer[5]) }
func (gdClass AnimationPlayer) HasAnimation(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[6], name) }
func (gdClass AnimationPlayer) GetAnimation(name string) Animation { return gdnative.Return[Animation](gdnative.Object(gdClass), methodAnimationPlayer[7], name) }
func (gdClass AnimationPlayer) GetAnimationList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationPlayer[8]) }
func (gdClass AnimationPlayer) AnimationSetNext(anim_from string, anim_to string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[9], anim_from, anim_to) }
func (gdClass AnimationPlayer) AnimationGetNext(anim_from string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[10], anim_from) }
func (gdClass AnimationPlayer) SetBlendTime(anim_from string, anim_to string, sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[11], anim_from, anim_to, sec) }
func (gdClass AnimationPlayer) GetBlendTime(anim_from string, anim_to string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[12], anim_from, anim_to) }
func (gdClass AnimationPlayer) SetDefaultBlendTime(sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[13], sec) }
func (gdClass AnimationPlayer) GetDefaultBlendTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[14]) }
func (gdClass AnimationPlayer) Play(name string, custom_blend float64, custom_speed float64, from_end bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[15], name, custom_blend, custom_speed, from_end) }
func (gdClass AnimationPlayer) PlayBackwards(name string, custom_blend float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[16], name, custom_blend) }
func (gdClass AnimationPlayer) Stop(reset bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[17], reset) }
func (gdClass AnimationPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[18]) }
func (gdClass AnimationPlayer) SetCurrentAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[19], anim) }
func (gdClass AnimationPlayer) GetCurrentAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[20]) }
func (gdClass AnimationPlayer) SetAssignedAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[21], anim) }
func (gdClass AnimationPlayer) GetAssignedAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[22]) }
func (gdClass AnimationPlayer) Queue(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[23], name) }
func (gdClass AnimationPlayer) GetQueue() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationPlayer[24]) }
func (gdClass AnimationPlayer) ClearQueue()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[25]) }
func (gdClass AnimationPlayer) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[26], active) }
func (gdClass AnimationPlayer) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[27]) }
func (gdClass AnimationPlayer) SetSpeedScale(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[28], speed) }
func (gdClass AnimationPlayer) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[29]) }
func (gdClass AnimationPlayer) GetPlayingSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[30]) }
func (gdClass AnimationPlayer) SetAutoplay(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[31], name) }
func (gdClass AnimationPlayer) GetAutoplay() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[32]) }
func (gdClass AnimationPlayer) SetResetOnSaveEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[33], enabled) }
func (gdClass AnimationPlayer) IsResetOnSaveEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[34]) }
func (gdClass AnimationPlayer) SetRoot(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[35], path) }
func (gdClass AnimationPlayer) GetRoot() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationPlayer[36]) }
func (gdClass AnimationPlayer) FindAnimation(animation Animation) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[37], animation) }
func (gdClass AnimationPlayer) FindAnimationLibrary(animation Animation) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[38], animation) }
func (gdClass AnimationPlayer) ClearCaches()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[39]) }
func (gdClass AnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[40], mode) }
func (gdClass AnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback { return gdnative.Return[AnimationPlayerAnimationProcessCallback](gdnative.Object(gdClass), methodAnimationPlayer[41]) }
func (gdClass AnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[42], mode) }
func (gdClass AnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode { return gdnative.Return[AnimationPlayerAnimationMethodCallMode](gdnative.Object(gdClass), methodAnimationPlayer[43]) }
func (gdClass AnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[44], enabled) }
func (gdClass AnimationPlayer) IsMovieQuitOnFinishEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[45]) }
func (gdClass AnimationPlayer) GetCurrentAnimationPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[46]) }
func (gdClass AnimationPlayer) GetCurrentAnimationLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[47]) }
func (gdClass AnimationPlayer) Seek(seconds float64, update bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[48], seconds, update) }
func (gdClass AnimationPlayer) Advance(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[49], delta) }

type AnimationRootNode gdnative.Object

var methodAnimationRootNode [0]gdnative.Method

type AnimationTrackEditPlugin gdnative.Object

var methodAnimationTrackEditPlugin [0]gdnative.Method

type AnimationTree gdnative.Object

var methodAnimationTree [15]gdnative.Method

type AnimationTreeAnimationProcessCallback int64

const (
	AnimationTreeAnimationProcessPhysics AnimationTreeAnimationProcessCallback = 0
	AnimationTreeAnimationProcessIdle AnimationTreeAnimationProcessCallback = 1
	AnimationTreeAnimationProcessManual AnimationTreeAnimationProcessCallback = 2
)
func (gdClass AnimationTree) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[0], active) }
func (gdClass AnimationTree) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationTree[1]) }
func (gdClass AnimationTree) SetTreeRoot(root AnimationNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[2], root) }
func (gdClass AnimationTree) GetTreeRoot() AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationTree[3]) }
func (gdClass AnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[4], mode) }
func (gdClass AnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback { return gdnative.Return[AnimationTreeAnimationProcessCallback](gdnative.Object(gdClass), methodAnimationTree[5]) }
func (gdClass AnimationTree) SetAnimationPlayer(root NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[6], root) }
func (gdClass AnimationTree) GetAnimationPlayer() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[7]) }
func (gdClass AnimationTree) SetAdvanceExpressionBaseNode(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[8], node) }
func (gdClass AnimationTree) GetAdvanceExpressionBaseNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[9]) }
func (gdClass AnimationTree) SetRootMotionTrack(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[10], path) }
func (gdClass AnimationTree) GetRootMotionTrack() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[11]) }
func (gdClass AnimationTree) GetRootMotionTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodAnimationTree[12]) }
func (gdClass AnimationTree) RenameParameter(old_name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[13], old_name, new_name) }
func (gdClass AnimationTree) Advance(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[14], delta) }

type Area2D gdnative.Object

var methodArea2D [34]gdnative.Method

type Area2DSpaceOverride int64

const (
	Area2DSpaceOverrideDisabled Area2DSpaceOverride = 0
	Area2DSpaceOverrideCombine Area2DSpaceOverride = 1
	Area2DSpaceOverrideCombineReplace Area2DSpaceOverride = 2
	Area2DSpaceOverrideReplace Area2DSpaceOverride = 3
	Area2DSpaceOverrideReplaceCombine Area2DSpaceOverride = 4
)
func (gdClass Area2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[0], space_override_mode) }
func (gdClass Area2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[1]) }
func (gdClass Area2D) SetGravityIsPoint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[2], enable) }
func (gdClass Area2D) IsGravityAPoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[3]) }
func (gdClass Area2D) SetGravityPointDistanceScale(distance_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[4], distance_scale) }
func (gdClass Area2D) GetGravityPointDistanceScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[5]) }
func (gdClass Area2D) SetGravityPointCenter(center Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[6], center) }
func (gdClass Area2D) GetGravityPointCenter() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodArea2D[7]) }
func (gdClass Area2D) SetGravityDirection(direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[8], direction) }
func (gdClass Area2D) GetGravityDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodArea2D[9]) }
func (gdClass Area2D) SetGravity(gravity float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[10], gravity) }
func (gdClass Area2D) GetGravity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[11]) }
func (gdClass Area2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[12], space_override_mode) }
func (gdClass Area2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[13]) }
func (gdClass Area2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[14], space_override_mode) }
func (gdClass Area2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[15]) }
func (gdClass Area2D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[16], linear_damp) }
func (gdClass Area2D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[17]) }
func (gdClass Area2D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[18], angular_damp) }
func (gdClass Area2D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[19]) }
func (gdClass Area2D) SetPriority(priority float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[20], priority) }
func (gdClass Area2D) GetPriority() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[21]) }
func (gdClass Area2D) SetMonitoring(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[22], enable) }
func (gdClass Area2D) IsMonitoring() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[23]) }
func (gdClass Area2D) SetMonitorable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[24], enable) }
func (gdClass Area2D) IsMonitorable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[25]) }
func (gdClass Area2D) GetOverlappingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea2D[26]) }
func (gdClass Area2D) GetOverlappingAreas() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea2D[27]) }
func (gdClass Area2D) OverlapsBody(body Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[28], body) }
func (gdClass Area2D) OverlapsArea(area Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[29], area) }
func (gdClass Area2D) SetAudioBusName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[30], name) }
func (gdClass Area2D) GetAudioBusName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea2D[31]) }
func (gdClass Area2D) SetAudioBusOverride(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[32], enable) }
func (gdClass Area2D) IsOverridingAudioBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[33]) }

type Area3D gdnative.Object

var methodArea3D [48]gdnative.Method

type Area3DSpaceOverride int64

const (
	Area3DSpaceOverrideDisabled Area3DSpaceOverride = 0
	Area3DSpaceOverrideCombine Area3DSpaceOverride = 1
	Area3DSpaceOverrideCombineReplace Area3DSpaceOverride = 2
	Area3DSpaceOverrideReplace Area3DSpaceOverride = 3
	Area3DSpaceOverrideReplaceCombine Area3DSpaceOverride = 4
)
func (gdClass Area3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[0], space_override_mode) }
func (gdClass Area3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[1]) }
func (gdClass Area3D) SetGravityIsPoint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[2], enable) }
func (gdClass Area3D) IsGravityAPoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[3]) }
func (gdClass Area3D) SetGravityPointDistanceScale(distance_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[4], distance_scale) }
func (gdClass Area3D) GetGravityPointDistanceScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[5]) }
func (gdClass Area3D) SetGravityPointCenter(center Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[6], center) }
func (gdClass Area3D) GetGravityPointCenter() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodArea3D[7]) }
func (gdClass Area3D) SetGravityDirection(direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[8], direction) }
func (gdClass Area3D) GetGravityDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodArea3D[9]) }
func (gdClass Area3D) SetGravity(gravity float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[10], gravity) }
func (gdClass Area3D) GetGravity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[11]) }
func (gdClass Area3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[12], space_override_mode) }
func (gdClass Area3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[13]) }
func (gdClass Area3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[14], space_override_mode) }
func (gdClass Area3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[15]) }
func (gdClass Area3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[16], angular_damp) }
func (gdClass Area3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[17]) }
func (gdClass Area3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[18], linear_damp) }
func (gdClass Area3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[19]) }
func (gdClass Area3D) SetPriority(priority float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[20], priority) }
func (gdClass Area3D) GetPriority() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[21]) }
func (gdClass Area3D) SetWindForceMagnitude(wind_force_magnitude float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[22], wind_force_magnitude) }
func (gdClass Area3D) GetWindForceMagnitude() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[23]) }
func (gdClass Area3D) SetWindAttenuationFactor(wind_attenuation_factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[24], wind_attenuation_factor) }
func (gdClass Area3D) GetWindAttenuationFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[25]) }
func (gdClass Area3D) SetWindSourcePath(wind_source_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[26], wind_source_path) }
func (gdClass Area3D) GetWindSourcePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodArea3D[27]) }
func (gdClass Area3D) SetMonitorable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[28], enable) }
func (gdClass Area3D) IsMonitorable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[29]) }
func (gdClass Area3D) SetMonitoring(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[30], enable) }
func (gdClass Area3D) IsMonitoring() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[31]) }
func (gdClass Area3D) GetOverlappingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea3D[32]) }
func (gdClass Area3D) GetOverlappingAreas() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea3D[33]) }
func (gdClass Area3D) OverlapsBody(body Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[34], body) }
func (gdClass Area3D) OverlapsArea(area Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[35], area) }
func (gdClass Area3D) SetAudioBusOverride(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[36], enable) }
func (gdClass Area3D) IsOverridingAudioBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[37]) }
func (gdClass Area3D) SetAudioBusName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[38], name) }
func (gdClass Area3D) GetAudioBusName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea3D[39]) }
func (gdClass Area3D) SetUseReverbBus(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[40], enable) }
func (gdClass Area3D) IsUsingReverbBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[41]) }
func (gdClass Area3D) SetReverbBus(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[42], name) }
func (gdClass Area3D) GetReverbBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea3D[43]) }
func (gdClass Area3D) SetReverbAmount(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[44], amount) }
func (gdClass Area3D) GetReverbAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[45]) }
func (gdClass Area3D) SetReverbUniformity(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[46], amount) }
func (gdClass Area3D) GetReverbUniformity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[47]) }

type ArrayMesh gdnative.Object

var methodArrayMesh [25]gdnative.Method
func (gdClass ArrayMesh) AddBlendShape(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[0], name) }
func (gdClass ArrayMesh) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[1]) }
func (gdClass ArrayMesh) GetBlendShapeName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodArrayMesh[2], index) }
func (gdClass ArrayMesh) SetBlendShapeName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[3], index, name) }
func (gdClass ArrayMesh) ClearBlendShapes()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[4]) }
func (gdClass ArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[5], mode) }
func (gdClass ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode { return gdnative.Return[MeshBlendShapeMode](gdnative.Object(gdClass), methodArrayMesh[6]) }
func (gdClass ArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[7], primitive, arrays, blend_shapes, lods, compress_flags) }
func (gdClass ArrayMesh) ClearSurfaces()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[8]) }
func (gdClass ArrayMesh) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[9], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[10], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[11], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceGetArrayLen(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[12], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetArrayIndexLen(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[13], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetFormat(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[14], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetPrimitiveType(surf_idx int64) MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodArrayMesh[15], surf_idx) }
func (gdClass ArrayMesh) SurfaceFindByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[16], name) }
func (gdClass ArrayMesh) SurfaceSetName(surf_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[17], surf_idx, name) }
func (gdClass ArrayMesh) SurfaceGetName(surf_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodArrayMesh[18], surf_idx) }
func (gdClass ArrayMesh) RegenNormalMaps()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[19]) }
func (gdClass ArrayMesh) LightmapUnwrap(transform Transform3D, texel_size float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodArrayMesh[20], transform, texel_size) }
func (gdClass ArrayMesh) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[21], aabb) }
func (gdClass ArrayMesh) GetCustomAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodArrayMesh[22]) }
func (gdClass ArrayMesh) SetShadowMesh(mesh ArrayMesh)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[23], mesh) }
func (gdClass ArrayMesh) GetShadowMesh() ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodArrayMesh[24]) }

type ArrayOccluder3D gdnative.Object

var methodArrayOccluder3D [3]gdnative.Method
func (gdClass ArrayOccluder3D) SetArrays(vertices []Vector3, indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[0], vertices, indices) }
func (gdClass ArrayOccluder3D) SetVertices(vertices []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[1], vertices) }
func (gdClass ArrayOccluder3D) SetIndices(indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[2], indices) }

type AspectRatioContainer gdnative.Object

var methodAspectRatioContainer [8]gdnative.Method

type AspectRatioContainerStretchMode int64

const (
	AspectRatioContainerStretchWidthControlsHeight AspectRatioContainerStretchMode = 0
	AspectRatioContainerStretchHeightControlsWidth AspectRatioContainerStretchMode = 1
	AspectRatioContainerStretchFit AspectRatioContainerStretchMode = 2
	AspectRatioContainerStretchCover AspectRatioContainerStretchMode = 3
)

type AspectRatioContainerAlignmentMode int64

const (
	AspectRatioContainerAlignmentBegin AspectRatioContainerAlignmentMode = 0
	AspectRatioContainerAlignmentCenter AspectRatioContainerAlignmentMode = 1
	AspectRatioContainerAlignmentEnd AspectRatioContainerAlignmentMode = 2
)
func (gdClass AspectRatioContainer) SetRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[0], ratio) }
func (gdClass AspectRatioContainer) GetRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAspectRatioContainer[1]) }
func (gdClass AspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[2], stretch_mode) }
func (gdClass AspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode { return gdnative.Return[AspectRatioContainerStretchMode](gdnative.Object(gdClass), methodAspectRatioContainer[3]) }
func (gdClass AspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[4], alignment_horizontal) }
func (gdClass AspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode { return gdnative.Return[AspectRatioContainerAlignmentMode](gdnative.Object(gdClass), methodAspectRatioContainer[5]) }
func (gdClass AspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[6], alignment_vertical) }
func (gdClass AspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode { return gdnative.Return[AspectRatioContainerAlignmentMode](gdnative.Object(gdClass), methodAspectRatioContainer[7]) }

type AtlasTexture gdnative.Object

var methodAtlasTexture [8]gdnative.Method
func (gdClass AtlasTexture) SetAtlas(atlas Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[0], atlas) }
func (gdClass AtlasTexture) GetAtlas() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodAtlasTexture[1]) }
func (gdClass AtlasTexture) SetRegion(region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[2], region) }
func (gdClass AtlasTexture) GetRegion() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodAtlasTexture[3]) }
func (gdClass AtlasTexture) SetMargin(margin Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[4], margin) }
func (gdClass AtlasTexture) GetMargin() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodAtlasTexture[5]) }
func (gdClass AtlasTexture) SetFilterClip(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[6], enable) }
func (gdClass AtlasTexture) HasFilterClip() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAtlasTexture[7]) }

type AudioBusLayout gdnative.Object

var methodAudioBusLayout [0]gdnative.Method

type AudioEffect gdnative.Object

var methodAudioEffect [1]gdnative.Method
func (gdClass AudioEffect) InstantiateImplementation() AudioEffectInstance { return gdnative.Return[AudioEffectInstance](gdnative.Object(gdClass), methodAudioEffect[0]) }

type AudioEffectAmplify gdnative.Object

var methodAudioEffectAmplify [2]gdnative.Method
func (gdClass AudioEffectAmplify) SetVolumeDb(volume float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectAmplify[0], volume) }
func (gdClass AudioEffectAmplify) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectAmplify[1]) }

type AudioEffectBandLimitFilter gdnative.Object

var methodAudioEffectBandLimitFilter [0]gdnative.Method

type AudioEffectBandPassFilter gdnative.Object

var methodAudioEffectBandPassFilter [0]gdnative.Method

type AudioEffectCapture gdnative.Object

var methodAudioEffectCapture [9]gdnative.Method
func (gdClass AudioEffectCapture) CanGetBuffer(frames int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectCapture[0], frames) }
func (gdClass AudioEffectCapture) GetBuffer(frames int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodAudioEffectCapture[1], frames) }
func (gdClass AudioEffectCapture) ClearBuffer()  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCapture[2]) }
func (gdClass AudioEffectCapture) SetBufferLength(buffer_length_seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCapture[3], buffer_length_seconds) }
func (gdClass AudioEffectCapture) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCapture[4]) }
func (gdClass AudioEffectCapture) GetFramesAvailable() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[5]) }
func (gdClass AudioEffectCapture) GetDiscardedFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[6]) }
func (gdClass AudioEffectCapture) GetBufferLengthFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[7]) }
func (gdClass AudioEffectCapture) GetPushedFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[8]) }

type AudioEffectChorus gdnative.Object

var methodAudioEffectChorus [18]gdnative.Method
func (gdClass AudioEffectChorus) SetVoiceCount(voices int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[0], voices) }
func (gdClass AudioEffectChorus) GetVoiceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectChorus[1]) }
func (gdClass AudioEffectChorus) SetVoiceDelayMs(voice_idx int64, delay_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[2], voice_idx, delay_ms) }
func (gdClass AudioEffectChorus) GetVoiceDelayMs(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[3], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceRateHz(voice_idx int64, rate_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[4], voice_idx, rate_hz) }
func (gdClass AudioEffectChorus) GetVoiceRateHz(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[5], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceDepthMs(voice_idx int64, depth_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[6], voice_idx, depth_ms) }
func (gdClass AudioEffectChorus) GetVoiceDepthMs(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[7], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceLevelDb(voice_idx int64, level_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[8], voice_idx, level_db) }
func (gdClass AudioEffectChorus) GetVoiceLevelDb(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[9], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceCutoffHz(voice_idx int64, cutoff_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[10], voice_idx, cutoff_hz) }
func (gdClass AudioEffectChorus) GetVoiceCutoffHz(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[11], voice_idx) }
func (gdClass AudioEffectChorus) SetVoicePan(voice_idx int64, pan float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[12], voice_idx, pan) }
func (gdClass AudioEffectChorus) GetVoicePan(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[13], voice_idx) }
func (gdClass AudioEffectChorus) SetWet(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[14], amount) }
func (gdClass AudioEffectChorus) GetWet() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[15]) }
func (gdClass AudioEffectChorus) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[16], amount) }
func (gdClass AudioEffectChorus) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[17]) }

type AudioEffectCompressor gdnative.Object

var methodAudioEffectCompressor [14]gdnative.Method
func (gdClass AudioEffectCompressor) SetThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[0], threshold) }
func (gdClass AudioEffectCompressor) GetThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[1]) }
func (gdClass AudioEffectCompressor) SetRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[2], ratio) }
func (gdClass AudioEffectCompressor) GetRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[3]) }
func (gdClass AudioEffectCompressor) SetGain(gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[4], gain) }
func (gdClass AudioEffectCompressor) GetGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[5]) }
func (gdClass AudioEffectCompressor) SetAttackUs(attack_us float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[6], attack_us) }
func (gdClass AudioEffectCompressor) GetAttackUs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[7]) }
func (gdClass AudioEffectCompressor) SetReleaseMs(release_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[8], release_ms) }
func (gdClass AudioEffectCompressor) GetReleaseMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[9]) }
func (gdClass AudioEffectCompressor) SetMix(mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[10], mix) }
func (gdClass AudioEffectCompressor) GetMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[11]) }
func (gdClass AudioEffectCompressor) SetSidechain(sidechain string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[12], sidechain) }
func (gdClass AudioEffectCompressor) GetSidechain() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioEffectCompressor[13]) }

type AudioEffectDelay gdnative.Object

var methodAudioEffectDelay [26]gdnative.Method
func (gdClass AudioEffectDelay) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[0], amount) }
func (gdClass AudioEffectDelay) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[1]) }
func (gdClass AudioEffectDelay) SetTap1Active(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[2], amount) }
func (gdClass AudioEffectDelay) IsTap1Active() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[3]) }
func (gdClass AudioEffectDelay) SetTap1DelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[4], amount) }
func (gdClass AudioEffectDelay) GetTap1DelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[5]) }
func (gdClass AudioEffectDelay) SetTap1LevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[6], amount) }
func (gdClass AudioEffectDelay) GetTap1LevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[7]) }
func (gdClass AudioEffectDelay) SetTap1Pan(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[8], amount) }
func (gdClass AudioEffectDelay) GetTap1Pan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[9]) }
func (gdClass AudioEffectDelay) SetTap2Active(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[10], amount) }
func (gdClass AudioEffectDelay) IsTap2Active() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[11]) }
func (gdClass AudioEffectDelay) SetTap2DelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[12], amount) }
func (gdClass AudioEffectDelay) GetTap2DelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[13]) }
func (gdClass AudioEffectDelay) SetTap2LevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[14], amount) }
func (gdClass AudioEffectDelay) GetTap2LevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[15]) }
func (gdClass AudioEffectDelay) SetTap2Pan(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[16], amount) }
func (gdClass AudioEffectDelay) GetTap2Pan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[17]) }
func (gdClass AudioEffectDelay) SetFeedbackActive(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[18], amount) }
func (gdClass AudioEffectDelay) IsFeedbackActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[19]) }
func (gdClass AudioEffectDelay) SetFeedbackDelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[20], amount) }
func (gdClass AudioEffectDelay) GetFeedbackDelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[21]) }
func (gdClass AudioEffectDelay) SetFeedbackLevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[22], amount) }
func (gdClass AudioEffectDelay) GetFeedbackLevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[23]) }
func (gdClass AudioEffectDelay) SetFeedbackLowpass(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[24], amount) }
func (gdClass AudioEffectDelay) GetFeedbackLowpass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[25]) }

type AudioEffectDistortion gdnative.Object

var methodAudioEffectDistortion [10]gdnative.Method

type AudioEffectDistortionMode int64

const (
	AudioEffectDistortionModeClip AudioEffectDistortionMode = 0
	AudioEffectDistortionModeAtan AudioEffectDistortionMode = 1
	AudioEffectDistortionModeLofi AudioEffectDistortionMode = 2
	AudioEffectDistortionModeOverdrive AudioEffectDistortionMode = 3
	AudioEffectDistortionModeWaveshape AudioEffectDistortionMode = 4
)
func (gdClass AudioEffectDistortion) SetMode(mode AudioEffectDistortionMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[0], mode) }
func (gdClass AudioEffectDistortion) GetMode() AudioEffectDistortionMode { return gdnative.Return[AudioEffectDistortionMode](gdnative.Object(gdClass), methodAudioEffectDistortion[1]) }
func (gdClass AudioEffectDistortion) SetPreGain(pre_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[2], pre_gain) }
func (gdClass AudioEffectDistortion) GetPreGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[3]) }
func (gdClass AudioEffectDistortion) SetKeepHfHz(keep_hf_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[4], keep_hf_hz) }
func (gdClass AudioEffectDistortion) GetKeepHfHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[5]) }
func (gdClass AudioEffectDistortion) SetDrive(drive float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[6], drive) }
func (gdClass AudioEffectDistortion) GetDrive() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[7]) }
func (gdClass AudioEffectDistortion) SetPostGain(post_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[8], post_gain) }
func (gdClass AudioEffectDistortion) GetPostGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[9]) }

type AudioEffectEQ gdnative.Object

var methodAudioEffectEQ [3]gdnative.Method
func (gdClass AudioEffectEQ) SetBandGainDb(band_idx int64, volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectEQ[0], band_idx, volume_db) }
func (gdClass AudioEffectEQ) GetBandGainDb(band_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectEQ[1], band_idx) }
func (gdClass AudioEffectEQ) GetBandCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectEQ[2]) }

type AudioEffectEQ10 gdnative.Object

var methodAudioEffectEQ10 [0]gdnative.Method

type AudioEffectEQ21 gdnative.Object

var methodAudioEffectEQ21 [0]gdnative.Method

type AudioEffectEQ6 gdnative.Object

var methodAudioEffectEQ6 [0]gdnative.Method

type AudioEffectFilter gdnative.Object

var methodAudioEffectFilter [8]gdnative.Method

type AudioEffectFilterFilterDB int64

const (
	AudioEffectFilterFilter6db AudioEffectFilterFilterDB = 0
	AudioEffectFilterFilter12db AudioEffectFilterFilterDB = 1
	AudioEffectFilterFilter18db AudioEffectFilterFilterDB = 2
	AudioEffectFilterFilter24db AudioEffectFilterFilterDB = 3
)
func (gdClass AudioEffectFilter) SetCutoff(freq float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[0], freq) }
func (gdClass AudioEffectFilter) GetCutoff() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[1]) }
func (gdClass AudioEffectFilter) SetResonance(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[2], amount) }
func (gdClass AudioEffectFilter) GetResonance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[3]) }
func (gdClass AudioEffectFilter) SetGain(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[4], amount) }
func (gdClass AudioEffectFilter) GetGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[5]) }
func (gdClass AudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[6], amount) }
func (gdClass AudioEffectFilter) GetDb() AudioEffectFilterFilterDB { return gdnative.Return[AudioEffectFilterFilterDB](gdnative.Object(gdClass), methodAudioEffectFilter[7]) }

type AudioEffectHighPassFilter gdnative.Object

var methodAudioEffectHighPassFilter [0]gdnative.Method

type AudioEffectHighShelfFilter gdnative.Object

var methodAudioEffectHighShelfFilter [0]gdnative.Method

type AudioEffectInstance gdnative.Object

var methodAudioEffectInstance [2]gdnative.Method
func (gdClass AudioEffectInstance) ProcessImplementation(src_buffer []byte, dst_buffer *AudioFrame, frame_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectInstance[0], src_buffer, dst_buffer, frame_count) }
func (gdClass AudioEffectInstance) ProcessSilenceImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectInstance[1]) }

type AudioEffectLimiter gdnative.Object

var methodAudioEffectLimiter [8]gdnative.Method
func (gdClass AudioEffectLimiter) SetCeilingDb(ceiling float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[0], ceiling) }
func (gdClass AudioEffectLimiter) GetCeilingDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[1]) }
func (gdClass AudioEffectLimiter) SetThresholdDb(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[2], threshold) }
func (gdClass AudioEffectLimiter) GetThresholdDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[3]) }
func (gdClass AudioEffectLimiter) SetSoftClipDb(soft_clip float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[4], soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[5]) }
func (gdClass AudioEffectLimiter) SetSoftClipRatio(soft_clip float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[6], soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[7]) }

type AudioEffectLowPassFilter gdnative.Object

var methodAudioEffectLowPassFilter [0]gdnative.Method

type AudioEffectLowShelfFilter gdnative.Object

var methodAudioEffectLowShelfFilter [0]gdnative.Method

type AudioEffectNotchFilter gdnative.Object

var methodAudioEffectNotchFilter [0]gdnative.Method

type AudioEffectPanner gdnative.Object

var methodAudioEffectPanner [2]gdnative.Method
func (gdClass AudioEffectPanner) SetPan(cpanume float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPanner[0], cpanume) }
func (gdClass AudioEffectPanner) GetPan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPanner[1]) }

type AudioEffectPhaser gdnative.Object

var methodAudioEffectPhaser [10]gdnative.Method
func (gdClass AudioEffectPhaser) SetRangeMinHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[0], hz) }
func (gdClass AudioEffectPhaser) GetRangeMinHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[1]) }
func (gdClass AudioEffectPhaser) SetRangeMaxHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[2], hz) }
func (gdClass AudioEffectPhaser) GetRangeMaxHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[3]) }
func (gdClass AudioEffectPhaser) SetRateHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[4], hz) }
func (gdClass AudioEffectPhaser) GetRateHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[5]) }
func (gdClass AudioEffectPhaser) SetFeedback(fbk float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[6], fbk) }
func (gdClass AudioEffectPhaser) GetFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[7]) }
func (gdClass AudioEffectPhaser) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[8], depth) }
func (gdClass AudioEffectPhaser) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[9]) }

type AudioEffectPitchShift gdnative.Object

var methodAudioEffectPitchShift [6]gdnative.Method

type AudioEffectPitchShiftFFTSize int64

const (
	AudioEffectPitchShiftFftSize256 AudioEffectPitchShiftFFTSize = 0
	AudioEffectPitchShiftFftSize512 AudioEffectPitchShiftFFTSize = 1
	AudioEffectPitchShiftFftSize1024 AudioEffectPitchShiftFFTSize = 2
	AudioEffectPitchShiftFftSize2048 AudioEffectPitchShiftFFTSize = 3
	AudioEffectPitchShiftFftSize4096 AudioEffectPitchShiftFFTSize = 4
	AudioEffectPitchShiftFftSizeMax AudioEffectPitchShiftFFTSize = 5
)
func (gdClass AudioEffectPitchShift) SetPitchScale(rate float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[0], rate) }
func (gdClass AudioEffectPitchShift) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPitchShift[1]) }
func (gdClass AudioEffectPitchShift) SetOversampling(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[2], amount) }
func (gdClass AudioEffectPitchShift) GetOversampling() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectPitchShift[3]) }
func (gdClass AudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[4], size) }
func (gdClass AudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize { return gdnative.Return[AudioEffectPitchShiftFFTSize](gdnative.Object(gdClass), methodAudioEffectPitchShift[5]) }

type AudioEffectRecord gdnative.Object

var methodAudioEffectRecord [5]gdnative.Method
func (gdClass AudioEffectRecord) SetRecordingActive(record bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectRecord[0], record) }
func (gdClass AudioEffectRecord) IsRecordingActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectRecord[1]) }
func (gdClass AudioEffectRecord) SetFormat(format AudioStreamWAVFormat)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectRecord[2], format) }
func (gdClass AudioEffectRecord) GetFormat() AudioStreamWAVFormat { return gdnative.Return[AudioStreamWAVFormat](gdnative.Object(gdClass), methodAudioEffectRecord[3]) }
func (gdClass AudioEffectRecord) GetRecording() AudioStreamWAV { return gdnative.Return[AudioStreamWAV](gdnative.Object(gdClass), methodAudioEffectRecord[4]) }

type AudioEffectReverb gdnative.Object

var methodAudioEffectReverb [16]gdnative.Method
func (gdClass AudioEffectReverb) SetPredelayMsec(msec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[0], msec) }
func (gdClass AudioEffectReverb) GetPredelayMsec() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[1]) }
func (gdClass AudioEffectReverb) SetPredelayFeedback(feedback float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[2], feedback) }
func (gdClass AudioEffectReverb) GetPredelayFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[3]) }
func (gdClass AudioEffectReverb) SetRoomSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[4], size) }
func (gdClass AudioEffectReverb) GetRoomSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[5]) }
func (gdClass AudioEffectReverb) SetDamping(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[6], amount) }
func (gdClass AudioEffectReverb) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[7]) }
func (gdClass AudioEffectReverb) SetSpread(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[8], amount) }
func (gdClass AudioEffectReverb) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[9]) }
func (gdClass AudioEffectReverb) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[10], amount) }
func (gdClass AudioEffectReverb) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[11]) }
func (gdClass AudioEffectReverb) SetWet(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[12], amount) }
func (gdClass AudioEffectReverb) GetWet() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[13]) }
func (gdClass AudioEffectReverb) SetHpf(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[14], amount) }
func (gdClass AudioEffectReverb) GetHpf() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[15]) }

type AudioEffectSpectrumAnalyzer gdnative.Object

var methodAudioEffectSpectrumAnalyzer [6]gdnative.Method

type AudioEffectSpectrumAnalyzerFFTSize int64

const (
	AudioEffectSpectrumAnalyzerFftSize256 AudioEffectSpectrumAnalyzerFFTSize = 0
	AudioEffectSpectrumAnalyzerFftSize512 AudioEffectSpectrumAnalyzerFFTSize = 1
	AudioEffectSpectrumAnalyzerFftSize1024 AudioEffectSpectrumAnalyzerFFTSize = 2
	AudioEffectSpectrumAnalyzerFftSize2048 AudioEffectSpectrumAnalyzerFFTSize = 3
	AudioEffectSpectrumAnalyzerFftSize4096 AudioEffectSpectrumAnalyzerFFTSize = 4
	AudioEffectSpectrumAnalyzerFftSizeMax AudioEffectSpectrumAnalyzerFFTSize = 5
)
func (gdClass AudioEffectSpectrumAnalyzer) SetBufferLength(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[0], seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[1]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetTapBackPos(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[2], seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetTapBackPos() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[3]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[4], size) }
func (gdClass AudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize { return gdnative.Return[AudioEffectSpectrumAnalyzerFFTSize](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[5]) }

type AudioEffectSpectrumAnalyzerInstance gdnative.Object

var methodAudioEffectSpectrumAnalyzerInstance [1]gdnative.Method

type AudioEffectSpectrumAnalyzerInstanceMagnitudeMode int64

const (
	AudioEffectSpectrumAnalyzerInstanceMagnitudeAverage AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 0
	AudioEffectSpectrumAnalyzerInstanceMagnitudeMax AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 1
)
func (gdClass AudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz float64, to_hz float64, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzerInstance[0], from_hz, to_hz, mode) }

type AudioEffectStereoEnhance gdnative.Object

var methodAudioEffectStereoEnhance [6]gdnative.Method
func (gdClass AudioEffectStereoEnhance) SetPanPullout(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[0], amount) }
func (gdClass AudioEffectStereoEnhance) GetPanPullout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[1]) }
func (gdClass AudioEffectStereoEnhance) SetTimePullout(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[2], amount) }
func (gdClass AudioEffectStereoEnhance) GetTimePullout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[3]) }
func (gdClass AudioEffectStereoEnhance) SetSurround(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[4], amount) }
func (gdClass AudioEffectStereoEnhance) GetSurround() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[5]) }

type AudioListener2D gdnative.Object

var methodAudioListener2D [3]gdnative.Method
func (gdClass AudioListener2D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener2D[0]) }
func (gdClass AudioListener2D) ClearCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener2D[1]) }
func (gdClass AudioListener2D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioListener2D[2]) }

type AudioListener3D gdnative.Object

var methodAudioListener3D [4]gdnative.Method
func (gdClass AudioListener3D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener3D[0]) }
func (gdClass AudioListener3D) ClearCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener3D[1]) }
func (gdClass AudioListener3D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioListener3D[2]) }
func (gdClass AudioListener3D) GetListenerTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodAudioListener3D[3]) }

type AudioServer gdnative.Object

var methodAudioServer [47]gdnative.Method

type AudioServerSpeakerMode int64

const (
	AudioServerSpeakerModeStereo AudioServerSpeakerMode = 0
	AudioServerSpeakerSurround31 AudioServerSpeakerMode = 1
	AudioServerSpeakerSurround51 AudioServerSpeakerMode = 2
	AudioServerSpeakerSurround71 AudioServerSpeakerMode = 3
)
func (gdClass AudioServer) SetBusCount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[0], amount) }
func (gdClass AudioServer) GetBusCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[1]) }
func (gdClass AudioServer) RemoveBus(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[2], index) }
func (gdClass AudioServer) AddBus(at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[3], at_position) }
func (gdClass AudioServer) MoveBus(index int64, to_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[4], index, to_index) }
func (gdClass AudioServer) SetBusName(bus_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[5], bus_idx, name) }
func (gdClass AudioServer) GetBusName(bus_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[6], bus_idx) }
func (gdClass AudioServer) GetBusIndex(bus_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[7], bus_name) }
func (gdClass AudioServer) GetBusChannels(bus_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[8], bus_idx) }
func (gdClass AudioServer) SetBusVolumeDb(bus_idx int64, volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[9], bus_idx, volume_db) }
func (gdClass AudioServer) GetBusVolumeDb(bus_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[10], bus_idx) }
func (gdClass AudioServer) SetBusSend(bus_idx int64, send string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[11], bus_idx, send) }
func (gdClass AudioServer) GetBusSend(bus_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[12], bus_idx) }
func (gdClass AudioServer) SetBusSolo(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[13], bus_idx, enable) }
func (gdClass AudioServer) IsBusSolo(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[14], bus_idx) }
func (gdClass AudioServer) SetBusMute(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[15], bus_idx, enable) }
func (gdClass AudioServer) IsBusMute(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[16], bus_idx) }
func (gdClass AudioServer) SetBusBypassEffects(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[17], bus_idx, enable) }
func (gdClass AudioServer) IsBusBypassingEffects(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[18], bus_idx) }
func (gdClass AudioServer) AddBusEffect(bus_idx int64, effect AudioEffect, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[19], bus_idx, effect, at_position) }
func (gdClass AudioServer) RemoveBusEffect(bus_idx int64, effect_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[20], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusEffectCount(bus_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[21], bus_idx) }
func (gdClass AudioServer) GetBusEffect(bus_idx int64, effect_idx int64) AudioEffect { return gdnative.Return[AudioEffect](gdnative.Object(gdClass), methodAudioServer[22], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusEffectInstance(bus_idx int64, effect_idx int64, channel int64) AudioEffectInstance { return gdnative.Return[AudioEffectInstance](gdnative.Object(gdClass), methodAudioServer[23], bus_idx, effect_idx, channel) }
func (gdClass AudioServer) SwapBusEffects(bus_idx int64, effect_idx int64, by_effect_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[24], bus_idx, effect_idx, by_effect_idx) }
func (gdClass AudioServer) SetBusEffectEnabled(bus_idx int64, effect_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[25], bus_idx, effect_idx, enabled) }
func (gdClass AudioServer) IsBusEffectEnabled(bus_idx int64, effect_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[26], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusPeakVolumeLeftDb(bus_idx int64, channel int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[27], bus_idx, channel) }
func (gdClass AudioServer) GetBusPeakVolumeRightDb(bus_idx int64, channel int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[28], bus_idx, channel) }
func (gdClass AudioServer) SetPlaybackSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[29], scale) }
func (gdClass AudioServer) GetPlaybackSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[30]) }
func (gdClass AudioServer) Lock()  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[31]) }
func (gdClass AudioServer) Unlock()  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[32]) }
func (gdClass AudioServer) GetSpeakerMode() AudioServerSpeakerMode { return gdnative.Return[AudioServerSpeakerMode](gdnative.Object(gdClass), methodAudioServer[33]) }
func (gdClass AudioServer) GetMixRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[34]) }
func (gdClass AudioServer) GetDeviceList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAudioServer[35]) }
func (gdClass AudioServer) GetDevice() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[36]) }
func (gdClass AudioServer) SetDevice(device string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[37], device) }
func (gdClass AudioServer) GetTimeToNextMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[38]) }
func (gdClass AudioServer) GetTimeSinceLastMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[39]) }
func (gdClass AudioServer) GetOutputLatency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[40]) }
func (gdClass AudioServer) CaptureGetDeviceList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAudioServer[41]) }
func (gdClass AudioServer) CaptureGetDevice() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[42]) }
func (gdClass AudioServer) CaptureSetDevice(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[43], name) }
func (gdClass AudioServer) SetBusLayout(bus_layout AudioBusLayout)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[44], bus_layout) }
func (gdClass AudioServer) GenerateBusLayout() AudioBusLayout { return gdnative.Return[AudioBusLayout](gdnative.Object(gdClass), methodAudioServer[45]) }
func (gdClass AudioServer) SetEnableTaggingUsedAudioStreams(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[46], enable) }

type AudioStream gdnative.Object

var methodAudioStream [9]gdnative.Method
func (gdClass AudioStream) InstantiatePlaybackImplementation() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStream[0]) }
func (gdClass AudioStream) GetStreamNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStream[1]) }
func (gdClass AudioStream) GetLengthImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStream[2]) }
func (gdClass AudioStream) IsMonophonicImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStream[3]) }
func (gdClass AudioStream) GetBpmImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStream[4]) }
func (gdClass AudioStream) GetBeatCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStream[5]) }
func (gdClass AudioStream) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStream[6]) }
func (gdClass AudioStream) IsMonophonic() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStream[7]) }
func (gdClass AudioStream) InstantiatePlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStream[8]) }

type AudioStreamGenerator gdnative.Object

var methodAudioStreamGenerator [4]gdnative.Method
func (gdClass AudioStreamGenerator) SetMixRate(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGenerator[0], hz) }
func (gdClass AudioStreamGenerator) GetMixRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamGenerator[1]) }
func (gdClass AudioStreamGenerator) SetBufferLength(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGenerator[2], seconds) }
func (gdClass AudioStreamGenerator) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamGenerator[3]) }

type AudioStreamGeneratorPlayback gdnative.Object

var methodAudioStreamGeneratorPlayback [6]gdnative.Method
func (gdClass AudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[0], frame) }
func (gdClass AudioStreamGeneratorPlayback) CanPushBuffer(amount int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[1], amount) }
func (gdClass AudioStreamGeneratorPlayback) PushBuffer(frames []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[2], frames) }
func (gdClass AudioStreamGeneratorPlayback) GetFramesAvailable() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[3]) }
func (gdClass AudioStreamGeneratorPlayback) GetSkips() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[4]) }
func (gdClass AudioStreamGeneratorPlayback) ClearBuffer()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[5]) }

type AudioStreamMP3 gdnative.Object

var methodAudioStreamMP3 [12]gdnative.Method
func (gdClass AudioStreamMP3) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[0], data) }
func (gdClass AudioStreamMP3) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAudioStreamMP3[1]) }
func (gdClass AudioStreamMP3) SetLoop(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[2], enable) }
func (gdClass AudioStreamMP3) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamMP3[3]) }
func (gdClass AudioStreamMP3) SetLoopOffset(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[4], seconds) }
func (gdClass AudioStreamMP3) GetLoopOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamMP3[5]) }
func (gdClass AudioStreamMP3) SetBpm(bpm float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[6], bpm) }
func (gdClass AudioStreamMP3) GetBpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamMP3[7]) }
func (gdClass AudioStreamMP3) SetBeatCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[8], count) }
func (gdClass AudioStreamMP3) GetBeatCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamMP3[9]) }
func (gdClass AudioStreamMP3) SetBarBeats(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[10], count) }
func (gdClass AudioStreamMP3) GetBarBeats() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamMP3[11]) }

type AudioStreamMicrophone gdnative.Object

var methodAudioStreamMicrophone [0]gdnative.Method

type AudioStreamOggVorbis gdnative.Object

var methodAudioStreamOggVorbis [12]gdnative.Method
func (gdClass AudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[0], packet_sequence) }
func (gdClass AudioStreamOggVorbis) GetPacketSequence() OggPacketSequence { return gdnative.Return[OggPacketSequence](gdnative.Object(gdClass), methodAudioStreamOggVorbis[1]) }
func (gdClass AudioStreamOggVorbis) SetLoop(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[2], enable) }
func (gdClass AudioStreamOggVorbis) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamOggVorbis[3]) }
func (gdClass AudioStreamOggVorbis) SetLoopOffset(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[4], seconds) }
func (gdClass AudioStreamOggVorbis) GetLoopOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[5]) }
func (gdClass AudioStreamOggVorbis) SetBpm(bpm float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[6], bpm) }
func (gdClass AudioStreamOggVorbis) GetBpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[7]) }
func (gdClass AudioStreamOggVorbis) SetBeatCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[8], count) }
func (gdClass AudioStreamOggVorbis) GetBeatCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[9]) }
func (gdClass AudioStreamOggVorbis) SetBarBeats(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[10], count) }
func (gdClass AudioStreamOggVorbis) GetBarBeats() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[11]) }

type AudioStreamPlayback gdnative.Object

var methodAudioStreamPlayback [8]gdnative.Method
func (gdClass AudioStreamPlayback) StartImplementation(from_pos float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayback[0], from_pos) }
func (gdClass AudioStreamPlayback) StopImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayback[1]) }
func (gdClass AudioStreamPlayback) IsPlayingImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayback[2]) }
func (gdClass AudioStreamPlayback) GetLoopCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayback[3]) }
func (gdClass AudioStreamPlayback) GetPlaybackPositionImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayback[4]) }
func (gdClass AudioStreamPlayback) SeekImplementation(position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayback[5], position) }
func (gdClass AudioStreamPlayback) MixImplementation(buffer *AudioFrame, rate_scale float64, frames int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayback[6], buffer, rate_scale, frames) }
func (gdClass AudioStreamPlayback) TagUsedStreamsImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayback[7]) }

type AudioStreamPlaybackOggVorbis gdnative.Object

var methodAudioStreamPlaybackOggVorbis [0]gdnative.Method

type AudioStreamPlaybackResampled gdnative.Object

var methodAudioStreamPlaybackResampled [3]gdnative.Method
func (gdClass AudioStreamPlaybackResampled) MixResampledImplementation(dst_buffer *AudioFrame, frame_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlaybackResampled[0], dst_buffer, frame_count) }
func (gdClass AudioStreamPlaybackResampled) GetStreamSamplingRateImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlaybackResampled[1]) }
func (gdClass AudioStreamPlaybackResampled) BeginResample()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlaybackResampled[2]) }

type AudioStreamPlayer gdnative.Object

var methodAudioStreamPlayer [22]gdnative.Method

type AudioStreamPlayerMixTarget int64

const (
	AudioStreamPlayerMixTargetStereo AudioStreamPlayerMixTarget = 0
	AudioStreamPlayerMixTargetSurround AudioStreamPlayerMixTarget = 1
	AudioStreamPlayerMixTargetCenter AudioStreamPlayerMixTarget = 2
)
func (gdClass AudioStreamPlayer) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[0], stream) }
func (gdClass AudioStreamPlayer) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer[1]) }
func (gdClass AudioStreamPlayer) SetVolumeDb(volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[2], volume_db) }
func (gdClass AudioStreamPlayer) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[3]) }
func (gdClass AudioStreamPlayer) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[4], pitch_scale) }
func (gdClass AudioStreamPlayer) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[5]) }
func (gdClass AudioStreamPlayer) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[6], from_position) }
func (gdClass AudioStreamPlayer) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[7], to_position) }
func (gdClass AudioStreamPlayer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[8]) }
func (gdClass AudioStreamPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[9]) }
func (gdClass AudioStreamPlayer) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[10]) }
func (gdClass AudioStreamPlayer) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[11], bus) }
func (gdClass AudioStreamPlayer) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer[12]) }
func (gdClass AudioStreamPlayer) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[13], enable) }
func (gdClass AudioStreamPlayer) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[14]) }
func (gdClass AudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[15], mix_target) }
func (gdClass AudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget { return gdnative.Return[AudioStreamPlayerMixTarget](gdnative.Object(gdClass), methodAudioStreamPlayer[16]) }
func (gdClass AudioStreamPlayer) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[17], pause) }
func (gdClass AudioStreamPlayer) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[18]) }
func (gdClass AudioStreamPlayer) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[19], max_polyphony) }
func (gdClass AudioStreamPlayer) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer[20]) }
func (gdClass AudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer[21]) }

type AudioStreamPlayer2D gdnative.Object

var methodAudioStreamPlayer2D [28]gdnative.Method
func (gdClass AudioStreamPlayer2D) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[0], stream) }
func (gdClass AudioStreamPlayer2D) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer2D[1]) }
func (gdClass AudioStreamPlayer2D) SetVolumeDb(volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[2], volume_db) }
func (gdClass AudioStreamPlayer2D) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[3]) }
func (gdClass AudioStreamPlayer2D) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[4], pitch_scale) }
func (gdClass AudioStreamPlayer2D) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[5]) }
func (gdClass AudioStreamPlayer2D) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[6], from_position) }
func (gdClass AudioStreamPlayer2D) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[7], to_position) }
func (gdClass AudioStreamPlayer2D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[8]) }
func (gdClass AudioStreamPlayer2D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[9]) }
func (gdClass AudioStreamPlayer2D) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[10]) }
func (gdClass AudioStreamPlayer2D) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[11], bus) }
func (gdClass AudioStreamPlayer2D) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer2D[12]) }
func (gdClass AudioStreamPlayer2D) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[13], enable) }
func (gdClass AudioStreamPlayer2D) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[14]) }
func (gdClass AudioStreamPlayer2D) SetMaxDistance(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[15], pixels) }
func (gdClass AudioStreamPlayer2D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[16]) }
func (gdClass AudioStreamPlayer2D) SetAttenuation(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[17], curve) }
func (gdClass AudioStreamPlayer2D) GetAttenuation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[18]) }
func (gdClass AudioStreamPlayer2D) SetAreaMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[19], mask) }
func (gdClass AudioStreamPlayer2D) GetAreaMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[20]) }
func (gdClass AudioStreamPlayer2D) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[21], pause) }
func (gdClass AudioStreamPlayer2D) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[22]) }
func (gdClass AudioStreamPlayer2D) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[23], max_polyphony) }
func (gdClass AudioStreamPlayer2D) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[24]) }
func (gdClass AudioStreamPlayer2D) SetPanningStrength(panning_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[25], panning_strength) }
func (gdClass AudioStreamPlayer2D) GetPanningStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[26]) }
func (gdClass AudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer2D[27]) }

type AudioStreamPlayer3D gdnative.Object

var methodAudioStreamPlayer3D [44]gdnative.Method

type AudioStreamPlayer3DAttenuationModel int64

const (
	AudioStreamPlayer3DAttenuationInverseDistance AudioStreamPlayer3DAttenuationModel = 0
	AudioStreamPlayer3DAttenuationInverseSquareDistance AudioStreamPlayer3DAttenuationModel = 1
	AudioStreamPlayer3DAttenuationLogarithmic AudioStreamPlayer3DAttenuationModel = 2
	AudioStreamPlayer3DAttenuationDisabled AudioStreamPlayer3DAttenuationModel = 3
)

type AudioStreamPlayer3DDopplerTracking int64

const (
	AudioStreamPlayer3DDopplerTrackingDisabled AudioStreamPlayer3DDopplerTracking = 0
	AudioStreamPlayer3DDopplerTrackingIdleStep AudioStreamPlayer3DDopplerTracking = 1
	AudioStreamPlayer3DDopplerTrackingPhysicsStep AudioStreamPlayer3DDopplerTracking = 2
)
func (gdClass AudioStreamPlayer3D) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[0], stream) }
func (gdClass AudioStreamPlayer3D) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer3D[1]) }
func (gdClass AudioStreamPlayer3D) SetUnitDb(unit_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[2], unit_db) }
func (gdClass AudioStreamPlayer3D) GetUnitDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[3]) }
func (gdClass AudioStreamPlayer3D) SetUnitSize(unit_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[4], unit_size) }
func (gdClass AudioStreamPlayer3D) GetUnitSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[5]) }
func (gdClass AudioStreamPlayer3D) SetMaxDb(max_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[6], max_db) }
func (gdClass AudioStreamPlayer3D) GetMaxDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[7]) }
func (gdClass AudioStreamPlayer3D) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[8], pitch_scale) }
func (gdClass AudioStreamPlayer3D) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[9]) }
func (gdClass AudioStreamPlayer3D) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[10], from_position) }
func (gdClass AudioStreamPlayer3D) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[11], to_position) }
func (gdClass AudioStreamPlayer3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[12]) }
func (gdClass AudioStreamPlayer3D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[13]) }
func (gdClass AudioStreamPlayer3D) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[14]) }
func (gdClass AudioStreamPlayer3D) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[15], bus) }
func (gdClass AudioStreamPlayer3D) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer3D[16]) }
func (gdClass AudioStreamPlayer3D) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[17], enable) }
func (gdClass AudioStreamPlayer3D) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[18]) }
func (gdClass AudioStreamPlayer3D) SetMaxDistance(metres float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[19], metres) }
func (gdClass AudioStreamPlayer3D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[20]) }
func (gdClass AudioStreamPlayer3D) SetAreaMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[21], mask) }
func (gdClass AudioStreamPlayer3D) GetAreaMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[22]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngle(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[23], degrees) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[24]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[25], enabled) }
func (gdClass AudioStreamPlayer3D) IsEmissionAngleEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[26]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[27], db) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[28]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[29], degrees) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterCutoffHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[30]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[31], db) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[32]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[33], model) }
func (gdClass AudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel { return gdnative.Return[AudioStreamPlayer3DAttenuationModel](gdnative.Object(gdClass), methodAudioStreamPlayer3D[34]) }
func (gdClass AudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[35], mode) }
func (gdClass AudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking { return gdnative.Return[AudioStreamPlayer3DDopplerTracking](gdnative.Object(gdClass), methodAudioStreamPlayer3D[36]) }
func (gdClass AudioStreamPlayer3D) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[37], pause) }
func (gdClass AudioStreamPlayer3D) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[38]) }
func (gdClass AudioStreamPlayer3D) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[39], max_polyphony) }
func (gdClass AudioStreamPlayer3D) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[40]) }
func (gdClass AudioStreamPlayer3D) SetPanningStrength(panning_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[41], panning_strength) }
func (gdClass AudioStreamPlayer3D) GetPanningStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[42]) }
func (gdClass AudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer3D[43]) }

type AudioStreamRandomizer gdnative.Object

var methodAudioStreamRandomizer [15]gdnative.Method

type AudioStreamRandomizerPlaybackMode int64

const (
	AudioStreamRandomizerPlaybackRandomNoRepeats AudioStreamRandomizerPlaybackMode = 0
	AudioStreamRandomizerPlaybackRandom AudioStreamRandomizerPlaybackMode = 1
	AudioStreamRandomizerPlaybackSequential AudioStreamRandomizerPlaybackMode = 2
)
func (gdClass AudioStreamRandomizer) AddStream(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[0], index) }
func (gdClass AudioStreamRandomizer) MoveStream(index_from int64, index_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[1], index_from, index_to) }
func (gdClass AudioStreamRandomizer) RemoveStream(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[2], index) }
func (gdClass AudioStreamRandomizer) SetStream(index int64, stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[3], index, stream) }
func (gdClass AudioStreamRandomizer) GetStream(index int64) AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamRandomizer[4], index) }
func (gdClass AudioStreamRandomizer) SetStreamProbabilityWeight(index int64, weight float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[5], index, weight) }
func (gdClass AudioStreamRandomizer) GetStreamProbabilityWeight(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[6], index) }
func (gdClass AudioStreamRandomizer) SetStreamsCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[7], count) }
func (gdClass AudioStreamRandomizer) GetStreamsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamRandomizer[8]) }
func (gdClass AudioStreamRandomizer) SetRandomPitch(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[9], scale) }
func (gdClass AudioStreamRandomizer) GetRandomPitch() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[10]) }
func (gdClass AudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[11], db_offset) }
func (gdClass AudioStreamRandomizer) GetRandomVolumeOffsetDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[12]) }
func (gdClass AudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[13], mode) }
func (gdClass AudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode { return gdnative.Return[AudioStreamRandomizerPlaybackMode](gdnative.Object(gdClass), methodAudioStreamRandomizer[14]) }

type AudioStreamWAV gdnative.Object

var methodAudioStreamWAV [15]gdnative.Method

type AudioStreamWAVFormat int64

const (
	AudioStreamWAVFormat8Bits AudioStreamWAVFormat = 0
	AudioStreamWAVFormat16Bits AudioStreamWAVFormat = 1
	AudioStreamWAVFormatImaAdpcm AudioStreamWAVFormat = 2
)

type AudioStreamWAVLoopMode int64

const (
	AudioStreamWAVLoopDisabled AudioStreamWAVLoopMode = 0
	AudioStreamWAVLoopForward AudioStreamWAVLoopMode = 1
	AudioStreamWAVLoopPingpong AudioStreamWAVLoopMode = 2
	AudioStreamWAVLoopBackward AudioStreamWAVLoopMode = 3
)
func (gdClass AudioStreamWAV) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[0], data) }
func (gdClass AudioStreamWAV) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAudioStreamWAV[1]) }
func (gdClass AudioStreamWAV) SetFormat(format AudioStreamWAVFormat)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[2], format) }
func (gdClass AudioStreamWAV) GetFormat() AudioStreamWAVFormat { return gdnative.Return[AudioStreamWAVFormat](gdnative.Object(gdClass), methodAudioStreamWAV[3]) }
func (gdClass AudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[4], loop_mode) }
func (gdClass AudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode { return gdnative.Return[AudioStreamWAVLoopMode](gdnative.Object(gdClass), methodAudioStreamWAV[5]) }
func (gdClass AudioStreamWAV) SetLoopBegin(loop_begin int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[6], loop_begin) }
func (gdClass AudioStreamWAV) GetLoopBegin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[7]) }
func (gdClass AudioStreamWAV) SetLoopEnd(loop_end int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[8], loop_end) }
func (gdClass AudioStreamWAV) GetLoopEnd() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[9]) }
func (gdClass AudioStreamWAV) SetMixRate(mix_rate int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[10], mix_rate) }
func (gdClass AudioStreamWAV) GetMixRate() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[11]) }
func (gdClass AudioStreamWAV) SetStereo(stereo bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[12], stereo) }
func (gdClass AudioStreamWAV) IsStereo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamWAV[13]) }
func (gdClass AudioStreamWAV) SaveToWav(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAudioStreamWAV[14], path) }

type BackBufferCopy gdnative.Object

var methodBackBufferCopy [4]gdnative.Method

type BackBufferCopyCopyMode int64

const (
	BackBufferCopyCopyModeDisabled BackBufferCopyCopyMode = 0
	BackBufferCopyCopyModeRect BackBufferCopyCopyMode = 1
	BackBufferCopyCopyModeViewport BackBufferCopyCopyMode = 2
)
func (gdClass BackBufferCopy) SetRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodBackBufferCopy[0], rect) }
func (gdClass BackBufferCopy) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodBackBufferCopy[1]) }
func (gdClass BackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode)  { gdnative.Call(gdnative.Object(gdClass), methodBackBufferCopy[2], copy_mode) }
func (gdClass BackBufferCopy) GetCopyMode() BackBufferCopyCopyMode { return gdnative.Return[BackBufferCopyCopyMode](gdnative.Object(gdClass), methodBackBufferCopy[3]) }

type BaseButton gdnative.Object

var methodBaseButton [25]gdnative.Method

type BaseButtonDrawMode int64

const (
	BaseButtonDrawNormal BaseButtonDrawMode = 0
	BaseButtonDrawPressed BaseButtonDrawMode = 1
	BaseButtonDrawHover BaseButtonDrawMode = 2
	BaseButtonDrawDisabled BaseButtonDrawMode = 3
	BaseButtonDrawHoverPressed BaseButtonDrawMode = 4
)

type BaseButtonActionMode int64

const (
	BaseButtonActionModeButtonPress BaseButtonActionMode = 0
	BaseButtonActionModeButtonRelease BaseButtonActionMode = 1
)
func (gdClass BaseButton) PressedImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[0]) }
func (gdClass BaseButton) ToggledImplementation(button_pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[1], button_pressed) }
func (gdClass BaseButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[2], pressed) }
func (gdClass BaseButton) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[3]) }
func (gdClass BaseButton) SetPressedNoSignal(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[4], pressed) }
func (gdClass BaseButton) IsHovered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[5]) }
func (gdClass BaseButton) SetToggleMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[6], enabled) }
func (gdClass BaseButton) IsToggleMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[7]) }
func (gdClass BaseButton) SetShortcutInTooltip(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[8], enabled) }
func (gdClass BaseButton) IsShortcutInTooltipEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[9]) }
func (gdClass BaseButton) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[10], disabled) }
func (gdClass BaseButton) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[11]) }
func (gdClass BaseButton) SetActionMode(mode BaseButtonActionMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[12], mode) }
func (gdClass BaseButton) GetActionMode() BaseButtonActionMode { return gdnative.Return[BaseButtonActionMode](gdnative.Object(gdClass), methodBaseButton[13]) }
func (gdClass BaseButton) SetButtonMask(mask MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[14], mask) }
func (gdClass BaseButton) GetButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodBaseButton[15]) }
func (gdClass BaseButton) GetDrawMode() BaseButtonDrawMode { return gdnative.Return[BaseButtonDrawMode](gdnative.Object(gdClass), methodBaseButton[16]) }
func (gdClass BaseButton) SetKeepPressedOutside(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[17], enabled) }
func (gdClass BaseButton) IsKeepPressedOutside() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[18]) }
func (gdClass BaseButton) SetShortcut(shortcut Shortcut)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[19], shortcut) }
func (gdClass BaseButton) GetShortcut() Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodBaseButton[20]) }
func (gdClass BaseButton) SetButtonGroup(button_group ButtonGroup)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[21], button_group) }
func (gdClass BaseButton) GetButtonGroup() ButtonGroup { return gdnative.Return[ButtonGroup](gdnative.Object(gdClass), methodBaseButton[22]) }
func (gdClass BaseButton) SetShortcutContext(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[23], node) }
func (gdClass BaseButton) GetShortcutContext() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodBaseButton[24]) }

type BaseMaterial3D gdnative.Object

var methodBaseMaterial3D [134]gdnative.Method

type BaseMaterial3DTextureParam int64

const (
	BaseMaterial3DTextureAlbedo BaseMaterial3DTextureParam = 0
	BaseMaterial3DTextureMetallic BaseMaterial3DTextureParam = 1
	BaseMaterial3DTextureRoughness BaseMaterial3DTextureParam = 2
	BaseMaterial3DTextureEmission BaseMaterial3DTextureParam = 3
	BaseMaterial3DTextureNormal BaseMaterial3DTextureParam = 4
	BaseMaterial3DTextureRim BaseMaterial3DTextureParam = 5
	BaseMaterial3DTextureClearcoat BaseMaterial3DTextureParam = 6
	BaseMaterial3DTextureFlowmap BaseMaterial3DTextureParam = 7
	BaseMaterial3DTextureAmbientOcclusion BaseMaterial3DTextureParam = 8
	BaseMaterial3DTextureHeightmap BaseMaterial3DTextureParam = 9
	BaseMaterial3DTextureSubsurfaceScattering BaseMaterial3DTextureParam = 10
	BaseMaterial3DTextureSubsurfaceTransmittance BaseMaterial3DTextureParam = 11
	BaseMaterial3DTextureBacklight BaseMaterial3DTextureParam = 12
	BaseMaterial3DTextureRefraction BaseMaterial3DTextureParam = 13
	BaseMaterial3DTextureDetailMask BaseMaterial3DTextureParam = 14
	BaseMaterial3DTextureDetailAlbedo BaseMaterial3DTextureParam = 15
	BaseMaterial3DTextureDetailNormal BaseMaterial3DTextureParam = 16
	BaseMaterial3DTextureOrm BaseMaterial3DTextureParam = 17
	BaseMaterial3DTextureMax BaseMaterial3DTextureParam = 18
)

type BaseMaterial3DTextureFilter int64

const (
	BaseMaterial3DTextureFilterNearest BaseMaterial3DTextureFilter = 0
	BaseMaterial3DTextureFilterLinear BaseMaterial3DTextureFilter = 1
	BaseMaterial3DTextureFilterNearestWithMipmaps BaseMaterial3DTextureFilter = 2
	BaseMaterial3DTextureFilterLinearWithMipmaps BaseMaterial3DTextureFilter = 3
	BaseMaterial3DTextureFilterNearestWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 4
	BaseMaterial3DTextureFilterLinearWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 5
	BaseMaterial3DTextureFilterMax BaseMaterial3DTextureFilter = 6
)

type BaseMaterial3DDetailUV int64

const (
	BaseMaterial3DDetailUv1 BaseMaterial3DDetailUV = 0
	BaseMaterial3DDetailUv2 BaseMaterial3DDetailUV = 1
)

type BaseMaterial3DTransparency int64

const (
	BaseMaterial3DTransparencyDisabled BaseMaterial3DTransparency = 0
	BaseMaterial3DTransparencyAlpha BaseMaterial3DTransparency = 1
	BaseMaterial3DTransparencyAlphaScissor BaseMaterial3DTransparency = 2
	BaseMaterial3DTransparencyAlphaHash BaseMaterial3DTransparency = 3
	BaseMaterial3DTransparencyAlphaDepthPrePass BaseMaterial3DTransparency = 4
	BaseMaterial3DTransparencyMax BaseMaterial3DTransparency = 5
)

type BaseMaterial3DShadingMode int64

const (
	BaseMaterial3DShadingModeUnshaded BaseMaterial3DShadingMode = 0
	BaseMaterial3DShadingModePerPixel BaseMaterial3DShadingMode = 1
	BaseMaterial3DShadingModePerVertex BaseMaterial3DShadingMode = 2
	BaseMaterial3DShadingModeMax BaseMaterial3DShadingMode = 3
)

type BaseMaterial3DFeature int64

const (
	BaseMaterial3DFeatureEmission BaseMaterial3DFeature = 0
	BaseMaterial3DFeatureNormalMapping BaseMaterial3DFeature = 1
	BaseMaterial3DFeatureRim BaseMaterial3DFeature = 2
	BaseMaterial3DFeatureClearcoat BaseMaterial3DFeature = 3
	BaseMaterial3DFeatureAnisotropy BaseMaterial3DFeature = 4
	BaseMaterial3DFeatureAmbientOcclusion BaseMaterial3DFeature = 5
	BaseMaterial3DFeatureHeightMapping BaseMaterial3DFeature = 6
	BaseMaterial3DFeatureSubsurfaceScattering BaseMaterial3DFeature = 7
	BaseMaterial3DFeatureSubsurfaceTransmittance BaseMaterial3DFeature = 8
	BaseMaterial3DFeatureBacklight BaseMaterial3DFeature = 9
	BaseMaterial3DFeatureRefraction BaseMaterial3DFeature = 10
	BaseMaterial3DFeatureDetail BaseMaterial3DFeature = 11
	BaseMaterial3DFeatureMax BaseMaterial3DFeature = 12
)

type BaseMaterial3DBlendMode int64

const (
	BaseMaterial3DBlendModeMix BaseMaterial3DBlendMode = 0
	BaseMaterial3DBlendModeAdd BaseMaterial3DBlendMode = 1
	BaseMaterial3DBlendModeSub BaseMaterial3DBlendMode = 2
	BaseMaterial3DBlendModeMul BaseMaterial3DBlendMode = 3
)

type BaseMaterial3DAlphaAntiAliasing int64

const (
	BaseMaterial3DAlphaAntialiasingOff BaseMaterial3DAlphaAntiAliasing = 0
	BaseMaterial3DAlphaAntialiasingAlphaToCoverage BaseMaterial3DAlphaAntiAliasing = 1
	BaseMaterial3DAlphaAntialiasingAlphaToCoverageAndToOne BaseMaterial3DAlphaAntiAliasing = 2
)

type BaseMaterial3DDepthDrawMode int64

const (
	BaseMaterial3DDepthDrawOpaqueOnly BaseMaterial3DDepthDrawMode = 0
	BaseMaterial3DDepthDrawAlways BaseMaterial3DDepthDrawMode = 1
	BaseMaterial3DDepthDrawDisabled BaseMaterial3DDepthDrawMode = 2
)

type BaseMaterial3DCullMode int64

const (
	BaseMaterial3DCullBack BaseMaterial3DCullMode = 0
	BaseMaterial3DCullFront BaseMaterial3DCullMode = 1
	BaseMaterial3DCullDisabled BaseMaterial3DCullMode = 2
)

type BaseMaterial3DFlags int64

const (
	BaseMaterial3DFlagDisableDepthTest BaseMaterial3DFlags = 0
	BaseMaterial3DFlagAlbedoFromVertexColor BaseMaterial3DFlags = 1
	BaseMaterial3DFlagSrgbVertexColor BaseMaterial3DFlags = 2
	BaseMaterial3DFlagUsePointSize BaseMaterial3DFlags = 3
	BaseMaterial3DFlagFixedSize BaseMaterial3DFlags = 4
	BaseMaterial3DFlagBillboardKeepScale BaseMaterial3DFlags = 5
	BaseMaterial3DFlagUv1UseTriplanar BaseMaterial3DFlags = 6
	BaseMaterial3DFlagUv2UseTriplanar BaseMaterial3DFlags = 7
	BaseMaterial3DFlagUv1UseWorldTriplanar BaseMaterial3DFlags = 8
	BaseMaterial3DFlagUv2UseWorldTriplanar BaseMaterial3DFlags = 9
	BaseMaterial3DFlagAoOnUv2 BaseMaterial3DFlags = 10
	BaseMaterial3DFlagEmissionOnUv2 BaseMaterial3DFlags = 11
	BaseMaterial3DFlagAlbedoTextureForceSrgb BaseMaterial3DFlags = 12
	BaseMaterial3DFlagDontReceiveShadows BaseMaterial3DFlags = 13
	BaseMaterial3DFlagDisableAmbientLight BaseMaterial3DFlags = 14
	BaseMaterial3DFlagUseShadowToOpacity BaseMaterial3DFlags = 15
	BaseMaterial3DFlagUseTextureRepeat BaseMaterial3DFlags = 16
	BaseMaterial3DFlagInvertHeightmap BaseMaterial3DFlags = 17
	BaseMaterial3DFlagSubsurfaceModeSkin BaseMaterial3DFlags = 18
	BaseMaterial3DFlagParticleTrailsMode BaseMaterial3DFlags = 19
	BaseMaterial3DFlagAlbedoTextureMsdf BaseMaterial3DFlags = 20
	BaseMaterial3DFlagMax BaseMaterial3DFlags = 21
)

type BaseMaterial3DDiffuseMode int64

const (
	BaseMaterial3DDiffuseBurley BaseMaterial3DDiffuseMode = 0
	BaseMaterial3DDiffuseLambert BaseMaterial3DDiffuseMode = 1
	BaseMaterial3DDiffuseLambertWrap BaseMaterial3DDiffuseMode = 2
	BaseMaterial3DDiffuseToon BaseMaterial3DDiffuseMode = 3
)

type BaseMaterial3DSpecularMode int64

const (
	BaseMaterial3DSpecularSchlickGgx BaseMaterial3DSpecularMode = 0
	BaseMaterial3DSpecularToon BaseMaterial3DSpecularMode = 1
	BaseMaterial3DSpecularDisabled BaseMaterial3DSpecularMode = 2
)

type BaseMaterial3DBillboardMode int64

const (
	BaseMaterial3DBillboardDisabled BaseMaterial3DBillboardMode = 0
	BaseMaterial3DBillboardEnabled BaseMaterial3DBillboardMode = 1
	BaseMaterial3DBillboardFixedY BaseMaterial3DBillboardMode = 2
	BaseMaterial3DBillboardParticles BaseMaterial3DBillboardMode = 3
)

type BaseMaterial3DTextureChannel int64

const (
	BaseMaterial3DTextureChannelRed BaseMaterial3DTextureChannel = 0
	BaseMaterial3DTextureChannelGreen BaseMaterial3DTextureChannel = 1
	BaseMaterial3DTextureChannelBlue BaseMaterial3DTextureChannel = 2
	BaseMaterial3DTextureChannelAlpha BaseMaterial3DTextureChannel = 3
	BaseMaterial3DTextureChannelGrayscale BaseMaterial3DTextureChannel = 4
)

type BaseMaterial3DEmissionOperator int64

const (
	BaseMaterial3DEmissionOpAdd BaseMaterial3DEmissionOperator = 0
	BaseMaterial3DEmissionOpMultiply BaseMaterial3DEmissionOperator = 1
)

type BaseMaterial3DDistanceFadeMode int64

const (
	BaseMaterial3DDistanceFadeDisabled BaseMaterial3DDistanceFadeMode = 0
	BaseMaterial3DDistanceFadePixelAlpha BaseMaterial3DDistanceFadeMode = 1
	BaseMaterial3DDistanceFadePixelDither BaseMaterial3DDistanceFadeMode = 2
	BaseMaterial3DDistanceFadeObjectDither BaseMaterial3DDistanceFadeMode = 3
)
func (gdClass BaseMaterial3D) SetAlbedo(albedo Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[0], albedo) }
func (gdClass BaseMaterial3D) GetAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[1]) }
func (gdClass BaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[2], transparency) }
func (gdClass BaseMaterial3D) GetTransparency() BaseMaterial3DTransparency { return gdnative.Return[BaseMaterial3DTransparency](gdnative.Object(gdClass), methodBaseMaterial3D[3]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[4], alpha_aa) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing { return gdnative.Return[BaseMaterial3DAlphaAntiAliasing](gdnative.Object(gdClass), methodBaseMaterial3D[5]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasingEdge(edge float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[6], edge) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasingEdge() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[7]) }
func (gdClass BaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[8], shading_mode) }
func (gdClass BaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode { return gdnative.Return[BaseMaterial3DShadingMode](gdnative.Object(gdClass), methodBaseMaterial3D[9]) }
func (gdClass BaseMaterial3D) SetSpecular(specular float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[10], specular) }
func (gdClass BaseMaterial3D) GetSpecular() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[11]) }
func (gdClass BaseMaterial3D) SetMetallic(metallic float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[12], metallic) }
func (gdClass BaseMaterial3D) GetMetallic() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[13]) }
func (gdClass BaseMaterial3D) SetRoughness(roughness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[14], roughness) }
func (gdClass BaseMaterial3D) GetRoughness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[15]) }
func (gdClass BaseMaterial3D) SetEmission(emission Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[16], emission) }
func (gdClass BaseMaterial3D) GetEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[17]) }
func (gdClass BaseMaterial3D) SetEmissionEnergy(emission_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[18], emission_energy) }
func (gdClass BaseMaterial3D) GetEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[19]) }
func (gdClass BaseMaterial3D) SetNormalScale(normal_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[20], normal_scale) }
func (gdClass BaseMaterial3D) GetNormalScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[21]) }
func (gdClass BaseMaterial3D) SetRim(rim float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[22], rim) }
func (gdClass BaseMaterial3D) GetRim() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[23]) }
func (gdClass BaseMaterial3D) SetRimTint(rim_tint float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[24], rim_tint) }
func (gdClass BaseMaterial3D) GetRimTint() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[25]) }
func (gdClass BaseMaterial3D) SetClearcoat(clearcoat float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[26], clearcoat) }
func (gdClass BaseMaterial3D) GetClearcoat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[27]) }
func (gdClass BaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[28], clearcoat_roughness) }
func (gdClass BaseMaterial3D) GetClearcoatRoughness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[29]) }
func (gdClass BaseMaterial3D) SetAnisotropy(anisotropy float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[30], anisotropy) }
func (gdClass BaseMaterial3D) GetAnisotropy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[31]) }
func (gdClass BaseMaterial3D) SetHeightmapScale(heightmap_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[32], heightmap_scale) }
func (gdClass BaseMaterial3D) GetHeightmapScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[33]) }
func (gdClass BaseMaterial3D) SetSubsurfaceScatteringStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[34], strength) }
func (gdClass BaseMaterial3D) GetSubsurfaceScatteringStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[35]) }
func (gdClass BaseMaterial3D) SetTransmittanceColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[36], color) }
func (gdClass BaseMaterial3D) GetTransmittanceColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[37]) }
func (gdClass BaseMaterial3D) SetTransmittanceDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[38], depth) }
func (gdClass BaseMaterial3D) GetTransmittanceDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[39]) }
func (gdClass BaseMaterial3D) SetTransmittanceBoost(boost float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[40], boost) }
func (gdClass BaseMaterial3D) GetTransmittanceBoost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[41]) }
func (gdClass BaseMaterial3D) SetBacklight(backlight Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[42], backlight) }
func (gdClass BaseMaterial3D) GetBacklight() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[43]) }
func (gdClass BaseMaterial3D) SetRefraction(refraction float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[44], refraction) }
func (gdClass BaseMaterial3D) GetRefraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[45]) }
func (gdClass BaseMaterial3D) SetPointSize(point_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[46], point_size) }
func (gdClass BaseMaterial3D) GetPointSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[47]) }
func (gdClass BaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[48], detail_uv) }
func (gdClass BaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV { return gdnative.Return[BaseMaterial3DDetailUV](gdnative.Object(gdClass), methodBaseMaterial3D[49]) }
func (gdClass BaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[50], blend_mode) }
func (gdClass BaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode { return gdnative.Return[BaseMaterial3DBlendMode](gdnative.Object(gdClass), methodBaseMaterial3D[51]) }
func (gdClass BaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[52], depth_draw_mode) }
func (gdClass BaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode { return gdnative.Return[BaseMaterial3DDepthDrawMode](gdnative.Object(gdClass), methodBaseMaterial3D[53]) }
func (gdClass BaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[54], cull_mode) }
func (gdClass BaseMaterial3D) GetCullMode() BaseMaterial3DCullMode { return gdnative.Return[BaseMaterial3DCullMode](gdnative.Object(gdClass), methodBaseMaterial3D[55]) }
func (gdClass BaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[56], diffuse_mode) }
func (gdClass BaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode { return gdnative.Return[BaseMaterial3DDiffuseMode](gdnative.Object(gdClass), methodBaseMaterial3D[57]) }
func (gdClass BaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[58], specular_mode) }
func (gdClass BaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode { return gdnative.Return[BaseMaterial3DSpecularMode](gdnative.Object(gdClass), methodBaseMaterial3D[59]) }
func (gdClass BaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[60], flag, enable) }
func (gdClass BaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[61], flag) }
func (gdClass BaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[62], mode) }
func (gdClass BaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodBaseMaterial3D[63]) }
func (gdClass BaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[64], feature, enable) }
func (gdClass BaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[65], feature) }
func (gdClass BaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[66], param, texture) }
func (gdClass BaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodBaseMaterial3D[67], param) }
func (gdClass BaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[68], detail_blend_mode) }
func (gdClass BaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode { return gdnative.Return[BaseMaterial3DBlendMode](gdnative.Object(gdClass), methodBaseMaterial3D[69]) }
func (gdClass BaseMaterial3D) SetUv1Scale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[70], scale) }
func (gdClass BaseMaterial3D) GetUv1Scale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[71]) }
func (gdClass BaseMaterial3D) SetUv1Offset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[72], offset) }
func (gdClass BaseMaterial3D) GetUv1Offset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[73]) }
func (gdClass BaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[74], sharpness) }
func (gdClass BaseMaterial3D) GetUv1TriplanarBlendSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[75]) }
func (gdClass BaseMaterial3D) SetUv2Scale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[76], scale) }
func (gdClass BaseMaterial3D) GetUv2Scale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[77]) }
func (gdClass BaseMaterial3D) SetUv2Offset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[78], offset) }
func (gdClass BaseMaterial3D) GetUv2Offset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[79]) }
func (gdClass BaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[80], sharpness) }
func (gdClass BaseMaterial3D) GetUv2TriplanarBlendSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[81]) }
func (gdClass BaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[82], mode) }
func (gdClass BaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodBaseMaterial3D[83]) }
func (gdClass BaseMaterial3D) SetParticlesAnimHFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[84], frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimHFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[85]) }
func (gdClass BaseMaterial3D) SetParticlesAnimVFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[86], frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimVFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[87]) }
func (gdClass BaseMaterial3D) SetParticlesAnimLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[88], loop) }
func (gdClass BaseMaterial3D) GetParticlesAnimLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[89]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallax(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[90], enable) }
func (gdClass BaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[91]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[92], layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMinLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[93]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[94], layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[95]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[96], flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[97]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[98], flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[99]) }
func (gdClass BaseMaterial3D) SetGrow(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[100], amount) }
func (gdClass BaseMaterial3D) GetGrow() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[101]) }
func (gdClass BaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[102], operator) }
func (gdClass BaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator { return gdnative.Return[BaseMaterial3DEmissionOperator](gdnative.Object(gdClass), methodBaseMaterial3D[103]) }
func (gdClass BaseMaterial3D) SetAoLightAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[104], amount) }
func (gdClass BaseMaterial3D) GetAoLightAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[105]) }
func (gdClass BaseMaterial3D) SetAlphaScissorThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[106], threshold) }
func (gdClass BaseMaterial3D) GetAlphaScissorThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[107]) }
func (gdClass BaseMaterial3D) SetAlphaHashScale(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[108], threshold) }
func (gdClass BaseMaterial3D) GetAlphaHashScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[109]) }
func (gdClass BaseMaterial3D) SetGrowEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[110], enable) }
func (gdClass BaseMaterial3D) IsGrowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[111]) }
func (gdClass BaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[112], channel) }
func (gdClass BaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[113]) }
func (gdClass BaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[114], channel) }
func (gdClass BaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[115]) }
func (gdClass BaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[116], channel) }
func (gdClass BaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[117]) }
func (gdClass BaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[118], channel) }
func (gdClass BaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[119]) }
func (gdClass BaseMaterial3D) SetProximityFade(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[120], enabled) }
func (gdClass BaseMaterial3D) IsProximityFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[121]) }
func (gdClass BaseMaterial3D) SetProximityFadeDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[122], distance) }
func (gdClass BaseMaterial3D) GetProximityFadeDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[123]) }
func (gdClass BaseMaterial3D) SetMsdfPixelRange(arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[124], arange) }
func (gdClass BaseMaterial3D) GetMsdfPixelRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[125]) }
func (gdClass BaseMaterial3D) SetMsdfOutlineSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[126], size) }
func (gdClass BaseMaterial3D) GetMsdfOutlineSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[127]) }
func (gdClass BaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[128], mode) }
func (gdClass BaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode { return gdnative.Return[BaseMaterial3DDistanceFadeMode](gdnative.Object(gdClass), methodBaseMaterial3D[129]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMaxDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[130], distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[131]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMinDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[132], distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMinDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[133]) }

type BitMap gdnative.Object

var methodBitMap [11]gdnative.Method
func (gdClass BitMap) Create(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[0], size) }
func (gdClass BitMap) CreateFromImageAlpha(image Image, threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[1], image, threshold) }
func (gdClass BitMap) SetBit(position Vector2, bit bool)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[2], position, bit) }
func (gdClass BitMap) GetBit(position Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBitMap[3], position) }
func (gdClass BitMap) SetBitRect(rect Rect2, bit bool)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[4], rect, bit) }
func (gdClass BitMap) GetTrueBitCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBitMap[5]) }
func (gdClass BitMap) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodBitMap[6]) }
func (gdClass BitMap) Resize(new_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[7], new_size) }
func (gdClass BitMap) GrowMask(pixels int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[8], pixels, rect) }
func (gdClass BitMap) ConvertToImage() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodBitMap[9]) }
func (gdClass BitMap) OpaqueToPolygons(rect Rect2, epsilon float64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodBitMap[10], rect, epsilon) }

type Bone2D gdnative.Object

var methodBone2D [13]gdnative.Method
func (gdClass Bone2D) SetRest(rest Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[0], rest) }
func (gdClass Bone2D) GetRest() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodBone2D[1]) }
func (gdClass Bone2D) ApplyRest()  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[2]) }
func (gdClass Bone2D) GetSkeletonRest() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodBone2D[3]) }
func (gdClass Bone2D) GetIndexInSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBone2D[4]) }
func (gdClass Bone2D) SetDefaultLength(default_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[5], default_length) }
func (gdClass Bone2D) GetDefaultLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[6]) }
func (gdClass Bone2D) SetAutocalculateLengthAndAngle(auto_calculate bool)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[7], auto_calculate) }
func (gdClass Bone2D) GetAutocalculateLengthAndAngle() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBone2D[8]) }
func (gdClass Bone2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[9], length) }
func (gdClass Bone2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[10]) }
func (gdClass Bone2D) SetBoneAngle(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[11], angle) }
func (gdClass Bone2D) GetBoneAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[12]) }

type BoneAttachment3D gdnative.Object

var methodBoneAttachment3D [13]gdnative.Method
func (gdClass BoneAttachment3D) SetBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[0], bone_name) }
func (gdClass BoneAttachment3D) GetBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneAttachment3D[1]) }
func (gdClass BoneAttachment3D) SetBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[2], bone_idx) }
func (gdClass BoneAttachment3D) GetBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoneAttachment3D[3]) }
func (gdClass BoneAttachment3D) OnBonePoseUpdate(bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[4], bone_index) }
func (gdClass BoneAttachment3D) SetOverridePose(override_pose bool)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[5], override_pose) }
func (gdClass BoneAttachment3D) GetOverridePose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBoneAttachment3D[6]) }
func (gdClass BoneAttachment3D) SetOverrideMode(override_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[7], override_mode) }
func (gdClass BoneAttachment3D) GetOverrideMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoneAttachment3D[8]) }
func (gdClass BoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[9], use_external_skeleton) }
func (gdClass BoneAttachment3D) GetUseExternalSkeleton() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBoneAttachment3D[10]) }
func (gdClass BoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[11], external_skeleton) }
func (gdClass BoneAttachment3D) GetExternalSkeleton() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodBoneAttachment3D[12]) }

type BoneMap gdnative.Object

var methodBoneMap [5]gdnative.Method
func (gdClass BoneMap) GetProfile() SkeletonProfile { return gdnative.Return[SkeletonProfile](gdnative.Object(gdClass), methodBoneMap[0]) }
func (gdClass BoneMap) SetProfile(profile SkeletonProfile)  { gdnative.Call(gdnative.Object(gdClass), methodBoneMap[1], profile) }
func (gdClass BoneMap) GetSkeletonBoneName(profile_bone_name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneMap[2], profile_bone_name) }
func (gdClass BoneMap) SetSkeletonBoneName(profile_bone_name string, skeleton_bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodBoneMap[3], profile_bone_name, skeleton_bone_name) }
func (gdClass BoneMap) FindProfileBoneName(skeleton_bone_name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneMap[4], skeleton_bone_name) }

type BoxContainer gdnative.Object

var methodBoxContainer [3]gdnative.Method

type BoxContainerAlignmentMode int64

const (
	BoxContainerAlignmentBegin BoxContainerAlignmentMode = 0
	BoxContainerAlignmentCenter BoxContainerAlignmentMode = 1
	BoxContainerAlignmentEnd BoxContainerAlignmentMode = 2
)
func (gdClass BoxContainer) AddSpacer(begin bool) Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodBoxContainer[0], begin) }
func (gdClass BoxContainer) GetAlignment() BoxContainerAlignmentMode { return gdnative.Return[BoxContainerAlignmentMode](gdnative.Object(gdClass), methodBoxContainer[1]) }
func (gdClass BoxContainer) SetAlignment(alignment BoxContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodBoxContainer[2], alignment) }

type BoxMesh gdnative.Object

var methodBoxMesh [8]gdnative.Method
func (gdClass BoxMesh) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[0], size) }
func (gdClass BoxMesh) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxMesh[1]) }
func (gdClass BoxMesh) SetSubdivideWidth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[2], subdivide) }
func (gdClass BoxMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[3]) }
func (gdClass BoxMesh) SetSubdivideHeight(divisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[4], divisions) }
func (gdClass BoxMesh) GetSubdivideHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[5]) }
func (gdClass BoxMesh) SetSubdivideDepth(divisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[6], divisions) }
func (gdClass BoxMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[7]) }

type BoxOccluder3D gdnative.Object

var methodBoxOccluder3D [2]gdnative.Method
func (gdClass BoxOccluder3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxOccluder3D[0], size) }
func (gdClass BoxOccluder3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxOccluder3D[1]) }

type BoxShape3D gdnative.Object

var methodBoxShape3D [2]gdnative.Method
func (gdClass BoxShape3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxShape3D[0], size) }
func (gdClass BoxShape3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxShape3D[1]) }

type Button gdnative.Object

var methodButton [20]gdnative.Method
func (gdClass Button) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodButton[0], text) }
func (gdClass Button) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodButton[1]) }
func (gdClass Button) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodButton[2], overrun_behavior) }
func (gdClass Button) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodButton[3]) }
func (gdClass Button) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodButton[4], direction) }
func (gdClass Button) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodButton[5]) }
func (gdClass Button) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodButton[6], language) }
func (gdClass Button) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodButton[7]) }
func (gdClass Button) SetButtonIcon(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodButton[8], texture) }
func (gdClass Button) GetButtonIcon() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodButton[9]) }
func (gdClass Button) SetFlat(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[10], enabled) }
func (gdClass Button) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[11]) }
func (gdClass Button) SetClipText(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[12], enabled) }
func (gdClass Button) GetClipText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[13]) }
func (gdClass Button) SetTextAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodButton[14], alignment) }
func (gdClass Button) GetTextAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodButton[15]) }
func (gdClass Button) SetIconAlignment(icon_alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodButton[16], icon_alignment) }
func (gdClass Button) GetIconAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodButton[17]) }
func (gdClass Button) SetExpandIcon(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[18], enabled) }
func (gdClass Button) IsExpandIcon() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[19]) }

type ButtonGroup gdnative.Object

var methodButtonGroup [2]gdnative.Method
func (gdClass ButtonGroup) GetPressedButton() BaseButton { return gdnative.Return[BaseButton](gdnative.Object(gdClass), methodButtonGroup[0]) }
func (gdClass ButtonGroup) GetButtons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodButtonGroup[1]) }

type CPUParticles2D gdnative.Object

var methodCPUParticles2D [68]gdnative.Method

type CPUParticles2DDrawOrder int64

const (
	CPUParticles2DDrawOrderIndex CPUParticles2DDrawOrder = 0
	CPUParticles2DDrawOrderLifetime CPUParticles2DDrawOrder = 1
)

type CPUParticles2DParameter int64

const (
	CPUParticles2DParamInitialLinearVelocity CPUParticles2DParameter = 0
	CPUParticles2DParamAngularVelocity CPUParticles2DParameter = 1
	CPUParticles2DParamOrbitVelocity CPUParticles2DParameter = 2
	CPUParticles2DParamLinearAccel CPUParticles2DParameter = 3
	CPUParticles2DParamRadialAccel CPUParticles2DParameter = 4
	CPUParticles2DParamTangentialAccel CPUParticles2DParameter = 5
	CPUParticles2DParamDamping CPUParticles2DParameter = 6
	CPUParticles2DParamAngle CPUParticles2DParameter = 7
	CPUParticles2DParamScale CPUParticles2DParameter = 8
	CPUParticles2DParamHueVariation CPUParticles2DParameter = 9
	CPUParticles2DParamAnimSpeed CPUParticles2DParameter = 10
	CPUParticles2DParamAnimOffset CPUParticles2DParameter = 11
	CPUParticles2DParamMax CPUParticles2DParameter = 12
)

type CPUParticles2DParticleFlags int64

const (
	CPUParticles2DParticleFlagAlignYToVelocity CPUParticles2DParticleFlags = 0
	CPUParticles2DParticleFlagRotateY CPUParticles2DParticleFlags = 1
	CPUParticles2DParticleFlagDisableZ CPUParticles2DParticleFlags = 2
	CPUParticles2DParticleFlagMax CPUParticles2DParticleFlags = 3
)

type CPUParticles2DEmissionShape int64

const (
	CPUParticles2DEmissionShapePoint CPUParticles2DEmissionShape = 0
	CPUParticles2DEmissionShapeSphere CPUParticles2DEmissionShape = 1
	CPUParticles2DEmissionShapeSphereSurface CPUParticles2DEmissionShape = 2
	CPUParticles2DEmissionShapeRectangle CPUParticles2DEmissionShape = 3
	CPUParticles2DEmissionShapePoints CPUParticles2DEmissionShape = 4
	CPUParticles2DEmissionShapeDirectedPoints CPUParticles2DEmissionShape = 5
	CPUParticles2DEmissionShapeMax CPUParticles2DEmissionShape = 6
)
func (gdClass CPUParticles2D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[0], emitting) }
func (gdClass CPUParticles2D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[1], amount) }
func (gdClass CPUParticles2D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[2], secs) }
func (gdClass CPUParticles2D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[3], enable) }
func (gdClass CPUParticles2D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[4], secs) }
func (gdClass CPUParticles2D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[5], ratio) }
func (gdClass CPUParticles2D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[6], ratio) }
func (gdClass CPUParticles2D) SetLifetimeRandomness(random float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[7], random) }
func (gdClass CPUParticles2D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[8], enable) }
func (gdClass CPUParticles2D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[9], fps) }
func (gdClass CPUParticles2D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[10], enable) }
func (gdClass CPUParticles2D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[11], scale) }
func (gdClass CPUParticles2D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[12]) }
func (gdClass CPUParticles2D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles2D[13]) }
func (gdClass CPUParticles2D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[14]) }
func (gdClass CPUParticles2D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[15]) }
func (gdClass CPUParticles2D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[16]) }
func (gdClass CPUParticles2D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[17]) }
func (gdClass CPUParticles2D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[18]) }
func (gdClass CPUParticles2D) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[19]) }
func (gdClass CPUParticles2D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[20]) }
func (gdClass CPUParticles2D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles2D[21]) }
func (gdClass CPUParticles2D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[22]) }
func (gdClass CPUParticles2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[23]) }
func (gdClass CPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[24], order) }
func (gdClass CPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder { return gdnative.Return[CPUParticles2DDrawOrder](gdnative.Object(gdClass), methodCPUParticles2D[25]) }
func (gdClass CPUParticles2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[26], texture) }
func (gdClass CPUParticles2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCPUParticles2D[27]) }
func (gdClass CPUParticles2D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[28]) }
func (gdClass CPUParticles2D) SetDirection(direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[29], direction) }
func (gdClass CPUParticles2D) GetDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[30]) }
func (gdClass CPUParticles2D) SetSpread(spread float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[31], spread) }
func (gdClass CPUParticles2D) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[32]) }
func (gdClass CPUParticles2D) SetParamMin(param CPUParticles2DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[33], param, value) }
func (gdClass CPUParticles2D) GetParamMin(param CPUParticles2DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[34], param) }
func (gdClass CPUParticles2D) SetParamMax(param CPUParticles2DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[35], param, value) }
func (gdClass CPUParticles2D) GetParamMax(param CPUParticles2DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[36], param) }
func (gdClass CPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[37], param, curve) }
func (gdClass CPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[38], param) }
func (gdClass CPUParticles2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[39], color) }
func (gdClass CPUParticles2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCPUParticles2D[40]) }
func (gdClass CPUParticles2D) SetColorRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[41], ramp) }
func (gdClass CPUParticles2D) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles2D[42]) }
func (gdClass CPUParticles2D) SetColorInitialRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[43], ramp) }
func (gdClass CPUParticles2D) GetColorInitialRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles2D[44]) }
func (gdClass CPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[45], particle_flag, enable) }
func (gdClass CPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[46], particle_flag) }
func (gdClass CPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[47], shape) }
func (gdClass CPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape { return gdnative.Return[CPUParticles2DEmissionShape](gdnative.Object(gdClass), methodCPUParticles2D[48]) }
func (gdClass CPUParticles2D) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[49], radius) }
func (gdClass CPUParticles2D) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[50]) }
func (gdClass CPUParticles2D) SetEmissionRectExtents(extents Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[51], extents) }
func (gdClass CPUParticles2D) GetEmissionRectExtents() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[52]) }
func (gdClass CPUParticles2D) SetEmissionPoints(array []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[53], array) }
func (gdClass CPUParticles2D) GetEmissionPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCPUParticles2D[54]) }
func (gdClass CPUParticles2D) SetEmissionNormals(array []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[55], array) }
func (gdClass CPUParticles2D) GetEmissionNormals() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCPUParticles2D[56]) }
func (gdClass CPUParticles2D) SetEmissionColors(array []Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[57], array) }
func (gdClass CPUParticles2D) GetEmissionColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodCPUParticles2D[58]) }
func (gdClass CPUParticles2D) GetGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[59]) }
func (gdClass CPUParticles2D) SetGravity(accel_vec Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[60], accel_vec) }
func (gdClass CPUParticles2D) GetSplitScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[61]) }
func (gdClass CPUParticles2D) SetSplitScale(split_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[62], split_scale) }
func (gdClass CPUParticles2D) GetScaleCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[63]) }
func (gdClass CPUParticles2D) SetScaleCurveX(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[64], scale_curve) }
func (gdClass CPUParticles2D) GetScaleCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[65]) }
func (gdClass CPUParticles2D) SetScaleCurveY(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[66], scale_curve) }
func (gdClass CPUParticles2D) ConvertFromParticles(particles Node)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[67], particles) }

type CPUParticles3D gdnative.Object

var methodCPUParticles3D [80]gdnative.Method

type CPUParticles3DDrawOrder int64

const (
	CPUParticles3DDrawOrderIndex CPUParticles3DDrawOrder = 0
	CPUParticles3DDrawOrderLifetime CPUParticles3DDrawOrder = 1
	CPUParticles3DDrawOrderViewDepth CPUParticles3DDrawOrder = 2
)

type CPUParticles3DParameter int64

const (
	CPUParticles3DParamInitialLinearVelocity CPUParticles3DParameter = 0
	CPUParticles3DParamAngularVelocity CPUParticles3DParameter = 1
	CPUParticles3DParamOrbitVelocity CPUParticles3DParameter = 2
	CPUParticles3DParamLinearAccel CPUParticles3DParameter = 3
	CPUParticles3DParamRadialAccel CPUParticles3DParameter = 4
	CPUParticles3DParamTangentialAccel CPUParticles3DParameter = 5
	CPUParticles3DParamDamping CPUParticles3DParameter = 6
	CPUParticles3DParamAngle CPUParticles3DParameter = 7
	CPUParticles3DParamScale CPUParticles3DParameter = 8
	CPUParticles3DParamHueVariation CPUParticles3DParameter = 9
	CPUParticles3DParamAnimSpeed CPUParticles3DParameter = 10
	CPUParticles3DParamAnimOffset CPUParticles3DParameter = 11
	CPUParticles3DParamMax CPUParticles3DParameter = 12
)

type CPUParticles3DParticleFlags int64

const (
	CPUParticles3DParticleFlagAlignYToVelocity CPUParticles3DParticleFlags = 0
	CPUParticles3DParticleFlagRotateY CPUParticles3DParticleFlags = 1
	CPUParticles3DParticleFlagDisableZ CPUParticles3DParticleFlags = 2
	CPUParticles3DParticleFlagMax CPUParticles3DParticleFlags = 3
)

type CPUParticles3DEmissionShape int64

const (
	CPUParticles3DEmissionShapePoint CPUParticles3DEmissionShape = 0
	CPUParticles3DEmissionShapeSphere CPUParticles3DEmissionShape = 1
	CPUParticles3DEmissionShapeSphereSurface CPUParticles3DEmissionShape = 2
	CPUParticles3DEmissionShapeBox CPUParticles3DEmissionShape = 3
	CPUParticles3DEmissionShapePoints CPUParticles3DEmissionShape = 4
	CPUParticles3DEmissionShapeDirectedPoints CPUParticles3DEmissionShape = 5
	CPUParticles3DEmissionShapeRing CPUParticles3DEmissionShape = 6
	CPUParticles3DEmissionShapeMax CPUParticles3DEmissionShape = 7
)
func (gdClass CPUParticles3D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[0], emitting) }
func (gdClass CPUParticles3D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[1], amount) }
func (gdClass CPUParticles3D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[2], secs) }
func (gdClass CPUParticles3D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[3], enable) }
func (gdClass CPUParticles3D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[4], secs) }
func (gdClass CPUParticles3D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[5], ratio) }
func (gdClass CPUParticles3D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[6], ratio) }
func (gdClass CPUParticles3D) SetLifetimeRandomness(random float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[7], random) }
func (gdClass CPUParticles3D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[8], enable) }
func (gdClass CPUParticles3D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[9], fps) }
func (gdClass CPUParticles3D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[10], enable) }
func (gdClass CPUParticles3D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[11], scale) }
func (gdClass CPUParticles3D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[12]) }
func (gdClass CPUParticles3D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles3D[13]) }
func (gdClass CPUParticles3D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[14]) }
func (gdClass CPUParticles3D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[15]) }
func (gdClass CPUParticles3D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[16]) }
func (gdClass CPUParticles3D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[17]) }
func (gdClass CPUParticles3D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[18]) }
func (gdClass CPUParticles3D) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[19]) }
func (gdClass CPUParticles3D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[20]) }
func (gdClass CPUParticles3D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles3D[21]) }
func (gdClass CPUParticles3D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[22]) }
func (gdClass CPUParticles3D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[23]) }
func (gdClass CPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[24], order) }
func (gdClass CPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder { return gdnative.Return[CPUParticles3DDrawOrder](gdnative.Object(gdClass), methodCPUParticles3D[25]) }
func (gdClass CPUParticles3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[26], mesh) }
func (gdClass CPUParticles3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodCPUParticles3D[27]) }
func (gdClass CPUParticles3D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[28]) }
func (gdClass CPUParticles3D) SetDirection(direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[29], direction) }
func (gdClass CPUParticles3D) GetDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[30]) }
func (gdClass CPUParticles3D) SetSpread(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[31], degrees) }
func (gdClass CPUParticles3D) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[32]) }
func (gdClass CPUParticles3D) SetFlatness(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[33], amount) }
func (gdClass CPUParticles3D) GetFlatness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[34]) }
func (gdClass CPUParticles3D) SetParamMin(param CPUParticles3DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[35], param, value) }
func (gdClass CPUParticles3D) GetParamMin(param CPUParticles3DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[36], param) }
func (gdClass CPUParticles3D) SetParamMax(param CPUParticles3DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[37], param, value) }
func (gdClass CPUParticles3D) GetParamMax(param CPUParticles3DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[38], param) }
func (gdClass CPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[39], param, curve) }
func (gdClass CPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[40], param) }
func (gdClass CPUParticles3D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[41], color) }
func (gdClass CPUParticles3D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCPUParticles3D[42]) }
func (gdClass CPUParticles3D) SetColorRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[43], ramp) }
func (gdClass CPUParticles3D) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles3D[44]) }
func (gdClass CPUParticles3D) SetColorInitialRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[45], ramp) }
func (gdClass CPUParticles3D) GetColorInitialRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles3D[46]) }
func (gdClass CPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[47], particle_flag, enable) }
func (gdClass CPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[48], particle_flag) }
func (gdClass CPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[49], shape) }
func (gdClass CPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape { return gdnative.Return[CPUParticles3DEmissionShape](gdnative.Object(gdClass), methodCPUParticles3D[50]) }
func (gdClass CPUParticles3D) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[51], radius) }
func (gdClass CPUParticles3D) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[52]) }
func (gdClass CPUParticles3D) SetEmissionBoxExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[53], extents) }
func (gdClass CPUParticles3D) GetEmissionBoxExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[54]) }
func (gdClass CPUParticles3D) SetEmissionPoints(array []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[55], array) }
func (gdClass CPUParticles3D) GetEmissionPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCPUParticles3D[56]) }
func (gdClass CPUParticles3D) SetEmissionNormals(array []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[57], array) }
func (gdClass CPUParticles3D) GetEmissionNormals() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCPUParticles3D[58]) }
func (gdClass CPUParticles3D) SetEmissionColors(array []Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[59], array) }
func (gdClass CPUParticles3D) GetEmissionColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodCPUParticles3D[60]) }
func (gdClass CPUParticles3D) SetEmissionRingAxis(axis Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[61], axis) }
func (gdClass CPUParticles3D) GetEmissionRingAxis() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[62]) }
func (gdClass CPUParticles3D) SetEmissionRingHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[63], height) }
func (gdClass CPUParticles3D) GetEmissionRingHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[64]) }
func (gdClass CPUParticles3D) SetEmissionRingRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[65], radius) }
func (gdClass CPUParticles3D) GetEmissionRingRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[66]) }
func (gdClass CPUParticles3D) SetEmissionRingInnerRadius(inner_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[67], inner_radius) }
func (gdClass CPUParticles3D) GetEmissionRingInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[68]) }
func (gdClass CPUParticles3D) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[69]) }
func (gdClass CPUParticles3D) SetGravity(accel_vec Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[70], accel_vec) }
func (gdClass CPUParticles3D) GetSplitScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[71]) }
func (gdClass CPUParticles3D) SetSplitScale(split_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[72], split_scale) }
func (gdClass CPUParticles3D) GetScaleCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[73]) }
func (gdClass CPUParticles3D) SetScaleCurveX(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[74], scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[75]) }
func (gdClass CPUParticles3D) SetScaleCurveY(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[76], scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveZ() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[77]) }
func (gdClass CPUParticles3D) SetScaleCurveZ(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[78], scale_curve) }
func (gdClass CPUParticles3D) ConvertFromParticles(particles Node)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[79], particles) }

type CSGBox3D gdnative.Object

var methodCSGBox3D [4]gdnative.Method
func (gdClass CSGBox3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCSGBox3D[0], size) }
func (gdClass CSGBox3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCSGBox3D[1]) }
func (gdClass CSGBox3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGBox3D[2], material) }
func (gdClass CSGBox3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGBox3D[3]) }

type CSGCombiner3D gdnative.Object

var methodCSGCombiner3D [0]gdnative.Method

type CSGCylinder3D gdnative.Object

var methodCSGCylinder3D [12]gdnative.Method
func (gdClass CSGCylinder3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[0], radius) }
func (gdClass CSGCylinder3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGCylinder3D[1]) }
func (gdClass CSGCylinder3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[2], height) }
func (gdClass CSGCylinder3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGCylinder3D[3]) }
func (gdClass CSGCylinder3D) SetSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[4], sides) }
func (gdClass CSGCylinder3D) GetSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGCylinder3D[5]) }
func (gdClass CSGCylinder3D) SetCone(cone bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[6], cone) }
func (gdClass CSGCylinder3D) IsCone() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGCylinder3D[7]) }
func (gdClass CSGCylinder3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[8], material) }
func (gdClass CSGCylinder3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGCylinder3D[9]) }
func (gdClass CSGCylinder3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[10], smooth_faces) }
func (gdClass CSGCylinder3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGCylinder3D[11]) }

type CSGMesh3D gdnative.Object

var methodCSGMesh3D [4]gdnative.Method
func (gdClass CSGMesh3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodCSGMesh3D[0], mesh) }
func (gdClass CSGMesh3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodCSGMesh3D[1]) }
func (gdClass CSGMesh3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGMesh3D[2], material) }
func (gdClass CSGMesh3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGMesh3D[3]) }

type CSGPolygon3D gdnative.Object

var methodCSGPolygon3D [32]gdnative.Method

type CSGPolygon3DMode int64

const (
	CSGPolygon3DModeDepth CSGPolygon3DMode = 0
	CSGPolygon3DModeSpin CSGPolygon3DMode = 1
	CSGPolygon3DModePath CSGPolygon3DMode = 2
)

type CSGPolygon3DPathRotation int64

const (
	CSGPolygon3DPathRotationPolygon CSGPolygon3DPathRotation = 0
	CSGPolygon3DPathRotationPath CSGPolygon3DPathRotation = 1
	CSGPolygon3DPathRotationPathFollow CSGPolygon3DPathRotation = 2
)

type CSGPolygon3DPathIntervalType int64

const (
	CSGPolygon3DPathIntervalDistance CSGPolygon3DPathIntervalType = 0
	CSGPolygon3DPathIntervalSubdivide CSGPolygon3DPathIntervalType = 1
)
func (gdClass CSGPolygon3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[0], polygon) }
func (gdClass CSGPolygon3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCSGPolygon3D[1]) }
func (gdClass CSGPolygon3D) SetMode(mode CSGPolygon3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[2], mode) }
func (gdClass CSGPolygon3D) GetMode() CSGPolygon3DMode { return gdnative.Return[CSGPolygon3DMode](gdnative.Object(gdClass), methodCSGPolygon3D[3]) }
func (gdClass CSGPolygon3D) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[4], depth) }
func (gdClass CSGPolygon3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[5]) }
func (gdClass CSGPolygon3D) SetSpinDegrees(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[6], degrees) }
func (gdClass CSGPolygon3D) GetSpinDegrees() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[7]) }
func (gdClass CSGPolygon3D) SetSpinSides(spin_sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[8], spin_sides) }
func (gdClass CSGPolygon3D) GetSpinSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGPolygon3D[9]) }
func (gdClass CSGPolygon3D) SetPathNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[10], path) }
func (gdClass CSGPolygon3D) GetPathNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodCSGPolygon3D[11]) }
func (gdClass CSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[12], interval_type) }
func (gdClass CSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType { return gdnative.Return[CSGPolygon3DPathIntervalType](gdnative.Object(gdClass), methodCSGPolygon3D[13]) }
func (gdClass CSGPolygon3D) SetPathInterval(interval float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[14], interval) }
func (gdClass CSGPolygon3D) GetPathInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[15]) }
func (gdClass CSGPolygon3D) SetPathSimplifyAngle(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[16], degrees) }
func (gdClass CSGPolygon3D) GetPathSimplifyAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[17]) }
func (gdClass CSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[18], path_rotation) }
func (gdClass CSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation { return gdnative.Return[CSGPolygon3DPathRotation](gdnative.Object(gdClass), methodCSGPolygon3D[19]) }
func (gdClass CSGPolygon3D) SetPathLocal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[20], enable) }
func (gdClass CSGPolygon3D) IsPathLocal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[21]) }
func (gdClass CSGPolygon3D) SetPathContinuousU(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[22], enable) }
func (gdClass CSGPolygon3D) IsPathContinuousU() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[23]) }
func (gdClass CSGPolygon3D) SetPathUDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[24], distance) }
func (gdClass CSGPolygon3D) GetPathUDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[25]) }
func (gdClass CSGPolygon3D) SetPathJoined(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[26], enable) }
func (gdClass CSGPolygon3D) IsPathJoined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[27]) }
func (gdClass CSGPolygon3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[28], material) }
func (gdClass CSGPolygon3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGPolygon3D[29]) }
func (gdClass CSGPolygon3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[30], smooth_faces) }
func (gdClass CSGPolygon3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[31]) }

type CSGPrimitive3D gdnative.Object

var methodCSGPrimitive3D [2]gdnative.Method
func (gdClass CSGPrimitive3D) SetFlipFaces(flip_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPrimitive3D[0], flip_faces) }
func (gdClass CSGPrimitive3D) GetFlipFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPrimitive3D[1]) }

type CSGShape3D gdnative.Object

var methodCSGShape3D [18]gdnative.Method

type CSGShape3DOperation int64

const (
	CSGShape3DOperationUnion CSGShape3DOperation = 0
	CSGShape3DOperationIntersection CSGShape3DOperation = 1
	CSGShape3DOperationSubtraction CSGShape3DOperation = 2
)
func (gdClass CSGShape3D) IsRootShape() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[0]) }
func (gdClass CSGShape3D) SetOperation(operation CSGShape3DOperation)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[1], operation) }
func (gdClass CSGShape3D) GetOperation() CSGShape3DOperation { return gdnative.Return[CSGShape3DOperation](gdnative.Object(gdClass), methodCSGShape3D[2]) }
func (gdClass CSGShape3D) SetSnap(snap float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[3], snap) }
func (gdClass CSGShape3D) GetSnap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGShape3D[4]) }
func (gdClass CSGShape3D) SetUseCollision(operation bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[5], operation) }
func (gdClass CSGShape3D) IsUsingCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[6]) }
func (gdClass CSGShape3D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[7], layer) }
func (gdClass CSGShape3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGShape3D[8]) }
func (gdClass CSGShape3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[9], mask) }
func (gdClass CSGShape3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGShape3D[10]) }
func (gdClass CSGShape3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[11], layer_number, value) }
func (gdClass CSGShape3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[12], layer_number) }
func (gdClass CSGShape3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[13], layer_number, value) }
func (gdClass CSGShape3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[14], layer_number) }
func (gdClass CSGShape3D) SetCalculateTangents(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[15], enabled) }
func (gdClass CSGShape3D) IsCalculatingTangents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[16]) }
func (gdClass CSGShape3D) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCSGShape3D[17]) }

type CSGSphere3D gdnative.Object

var methodCSGSphere3D [10]gdnative.Method
func (gdClass CSGSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[0], radius) }
func (gdClass CSGSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGSphere3D[1]) }
func (gdClass CSGSphere3D) SetRadialSegments(radial_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[2], radial_segments) }
func (gdClass CSGSphere3D) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGSphere3D[3]) }
func (gdClass CSGSphere3D) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[4], rings) }
func (gdClass CSGSphere3D) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGSphere3D[5]) }
func (gdClass CSGSphere3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[6], smooth_faces) }
func (gdClass CSGSphere3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGSphere3D[7]) }
func (gdClass CSGSphere3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[8], material) }
func (gdClass CSGSphere3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGSphere3D[9]) }

type CSGTorus3D gdnative.Object

var methodCSGTorus3D [12]gdnative.Method
func (gdClass CSGTorus3D) SetInnerRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[0], radius) }
func (gdClass CSGTorus3D) GetInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGTorus3D[1]) }
func (gdClass CSGTorus3D) SetOuterRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[2], radius) }
func (gdClass CSGTorus3D) GetOuterRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGTorus3D[3]) }
func (gdClass CSGTorus3D) SetSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[4], sides) }
func (gdClass CSGTorus3D) GetSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGTorus3D[5]) }
func (gdClass CSGTorus3D) SetRingSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[6], sides) }
func (gdClass CSGTorus3D) GetRingSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGTorus3D[7]) }
func (gdClass CSGTorus3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[8], material) }
func (gdClass CSGTorus3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGTorus3D[9]) }
func (gdClass CSGTorus3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[10], smooth_faces) }
func (gdClass CSGTorus3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGTorus3D[11]) }

type CallbackTweener gdnative.Object

var methodCallbackTweener [1]gdnative.Method
func (gdClass CallbackTweener) SetDelay(delay float64) CallbackTweener { return gdnative.Return[CallbackTweener](gdnative.Object(gdClass), methodCallbackTweener[0], delay) }

type Camera2D gdnative.Object

var methodCamera2D [43]gdnative.Method

type Camera2DAnchorMode int64

const (
	Camera2DAnchorModeFixedTopLeft Camera2DAnchorMode = 0
	Camera2DAnchorModeDragCenter Camera2DAnchorMode = 1
)

type Camera2DCamera2DProcessCallback int64

const (
	Camera2DCamera2dProcessPhysics Camera2DCamera2DProcessCallback = 0
	Camera2DCamera2dProcessIdle Camera2DCamera2DProcessCallback = 1
)
func (gdClass Camera2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[0], offset) }
func (gdClass Camera2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[1]) }
func (gdClass Camera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[2], anchor_mode) }
func (gdClass Camera2D) GetAnchorMode() Camera2DAnchorMode { return gdnative.Return[Camera2DAnchorMode](gdnative.Object(gdClass), methodCamera2D[3]) }
func (gdClass Camera2D) SetRotating(rotating bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[4], rotating) }
func (gdClass Camera2D) IsRotating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[5]) }
func (gdClass Camera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[6], mode) }
func (gdClass Camera2D) GetProcessCallback() Camera2DCamera2DProcessCallback { return gdnative.Return[Camera2DCamera2DProcessCallback](gdnative.Object(gdClass), methodCamera2D[7]) }
func (gdClass Camera2D) SetCurrent(current bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[8], current) }
func (gdClass Camera2D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[9]) }
func (gdClass Camera2D) SetLimit(margin Side, limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[10], margin, limit) }
func (gdClass Camera2D) GetLimit(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCamera2D[11], margin) }
func (gdClass Camera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[12], limit_smoothing_enabled) }
func (gdClass Camera2D) IsLimitSmoothingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[13]) }
func (gdClass Camera2D) SetDragVerticalEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[14], enabled) }
func (gdClass Camera2D) IsDragVerticalEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[15]) }
func (gdClass Camera2D) SetDragHorizontalEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[16], enabled) }
func (gdClass Camera2D) IsDragHorizontalEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[17]) }
func (gdClass Camera2D) SetDragVerticalOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[18], offset) }
func (gdClass Camera2D) GetDragVerticalOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[19]) }
func (gdClass Camera2D) SetDragHorizontalOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[20], offset) }
func (gdClass Camera2D) GetDragHorizontalOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[21]) }
func (gdClass Camera2D) SetDragMargin(margin Side, drag_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[22], margin, drag_margin) }
func (gdClass Camera2D) GetDragMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[23], margin) }
func (gdClass Camera2D) GetCameraPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[24]) }
func (gdClass Camera2D) GetCameraScreenCenter() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[25]) }
func (gdClass Camera2D) SetZoom(zoom Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[26], zoom) }
func (gdClass Camera2D) GetZoom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[27]) }
func (gdClass Camera2D) SetCustomViewport(viewport Node)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[28], viewport) }
func (gdClass Camera2D) GetCustomViewport() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodCamera2D[29]) }
func (gdClass Camera2D) SetFollowSmoothing(follow_smoothing float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[30], follow_smoothing) }
func (gdClass Camera2D) GetFollowSmoothing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[31]) }
func (gdClass Camera2D) SetEnableFollowSmoothing(follow_smoothing bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[32], follow_smoothing) }
func (gdClass Camera2D) IsFollowSmoothingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[33]) }
func (gdClass Camera2D) ForceUpdateScroll()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[34]) }
func (gdClass Camera2D) ResetSmoothing()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[35]) }
func (gdClass Camera2D) Align()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[36]) }
func (gdClass Camera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[37], screen_drawing_enabled) }
func (gdClass Camera2D) IsScreenDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[38]) }
func (gdClass Camera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[39], limit_drawing_enabled) }
func (gdClass Camera2D) IsLimitDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[40]) }
func (gdClass Camera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[41], margin_drawing_enabled) }
func (gdClass Camera2D) IsMarginDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[42]) }

type Camera3D gdnative.Object

var methodCamera3D [46]gdnative.Method

type Camera3DProjectionType int64

const (
	Camera3DProjectionPerspective Camera3DProjectionType = 0
	Camera3DProjectionOrthogonal Camera3DProjectionType = 1
	Camera3DProjectionFrustum Camera3DProjectionType = 2
)

type Camera3DKeepAspect int64

const (
	Camera3DKeepWidth Camera3DKeepAspect = 0
	Camera3DKeepHeight Camera3DKeepAspect = 1
)

type Camera3DDopplerTracking int64

const (
	Camera3DDopplerTrackingDisabled Camera3DDopplerTracking = 0
	Camera3DDopplerTrackingIdleStep Camera3DDopplerTracking = 1
	Camera3DDopplerTrackingPhysicsStep Camera3DDopplerTracking = 2
)
func (gdClass Camera3D) ProjectRayNormal(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[0], screen_point) }
func (gdClass Camera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[1], screen_point) }
func (gdClass Camera3D) ProjectRayOrigin(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[2], screen_point) }
func (gdClass Camera3D) UnprojectPosition(world_point Vector3) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera3D[3], world_point) }
func (gdClass Camera3D) IsPositionBehind(world_point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[4], world_point) }
func (gdClass Camera3D) ProjectPosition(screen_point Vector2, z_depth float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[5], screen_point, z_depth) }
func (gdClass Camera3D) SetPerspective(fov float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[6], fov, z_near, z_far) }
func (gdClass Camera3D) SetOrthogonal(size float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[7], size, z_near, z_far) }
func (gdClass Camera3D) SetFrustum(size float64, offset Vector2, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[8], size, offset, z_near, z_far) }
func (gdClass Camera3D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[9]) }
func (gdClass Camera3D) ClearCurrent(enable_next bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[10], enable_next) }
func (gdClass Camera3D) SetCurrent(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[11], enabled) }
func (gdClass Camera3D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[12]) }
func (gdClass Camera3D) GetCameraTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodCamera3D[13]) }
func (gdClass Camera3D) GetFov() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[14]) }
func (gdClass Camera3D) GetFrustumOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera3D[15]) }
func (gdClass Camera3D) GetSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[16]) }
func (gdClass Camera3D) GetFar() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[17]) }
func (gdClass Camera3D) GetNear() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[18]) }
func (gdClass Camera3D) SetFov(fov float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[19], fov) }
func (gdClass Camera3D) SetFrustumOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[20], offset) }
func (gdClass Camera3D) SetSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[21], size) }
func (gdClass Camera3D) SetFar(far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[22], far) }
func (gdClass Camera3D) SetNear(near float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[23], near) }
func (gdClass Camera3D) GetProjection() Camera3DProjectionType { return gdnative.Return[Camera3DProjectionType](gdnative.Object(gdClass), methodCamera3D[24]) }
func (gdClass Camera3D) SetProjection(mode Camera3DProjectionType)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[25], mode) }
func (gdClass Camera3D) SetHOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[26], offset) }
func (gdClass Camera3D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[27]) }
func (gdClass Camera3D) SetVOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[28], offset) }
func (gdClass Camera3D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[29]) }
func (gdClass Camera3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[30], mask) }
func (gdClass Camera3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCamera3D[31]) }
func (gdClass Camera3D) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[32], env) }
func (gdClass Camera3D) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodCamera3D[33]) }
func (gdClass Camera3D) SetEffects(env CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[34], env) }
func (gdClass Camera3D) GetEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodCamera3D[35]) }
func (gdClass Camera3D) SetKeepAspectMode(mode Camera3DKeepAspect)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[36], mode) }
func (gdClass Camera3D) GetKeepAspectMode() Camera3DKeepAspect { return gdnative.Return[Camera3DKeepAspect](gdnative.Object(gdClass), methodCamera3D[37]) }
func (gdClass Camera3D) SetDopplerTracking(mode Camera3DDopplerTracking)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[38], mode) }
func (gdClass Camera3D) GetDopplerTracking() Camera3DDopplerTracking { return gdnative.Return[Camera3DDopplerTracking](gdnative.Object(gdClass), methodCamera3D[39]) }
func (gdClass Camera3D) GetFrustum() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCamera3D[40]) }
func (gdClass Camera3D) IsPositionInFrustum(world_point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[41], world_point) }
func (gdClass Camera3D) GetCameraRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCamera3D[42]) }
func (gdClass Camera3D) GetPyramidShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCamera3D[43]) }
func (gdClass Camera3D) SetCullMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[44], layer_number, value) }
func (gdClass Camera3D) GetCullMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[45], layer_number) }

type CameraEffects gdnative.Object

var methodCameraEffects [18]gdnative.Method
func (gdClass CameraEffects) SetDofBlurFarEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[0], enabled) }
func (gdClass CameraEffects) IsDofBlurFarEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[1]) }
func (gdClass CameraEffects) SetDofBlurFarDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[2], distance) }
func (gdClass CameraEffects) GetDofBlurFarDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[3]) }
func (gdClass CameraEffects) SetDofBlurFarTransition(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[4], distance) }
func (gdClass CameraEffects) GetDofBlurFarTransition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[5]) }
func (gdClass CameraEffects) SetDofBlurNearEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[6], enabled) }
func (gdClass CameraEffects) IsDofBlurNearEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[7]) }
func (gdClass CameraEffects) SetDofBlurNearDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[8], distance) }
func (gdClass CameraEffects) GetDofBlurNearDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[9]) }
func (gdClass CameraEffects) SetDofBlurNearTransition(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[10], distance) }
func (gdClass CameraEffects) GetDofBlurNearTransition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[11]) }
func (gdClass CameraEffects) SetDofBlurAmount(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[12], amount) }
func (gdClass CameraEffects) GetDofBlurAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[13]) }
func (gdClass CameraEffects) SetOverrideExposureEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[14], enabled) }
func (gdClass CameraEffects) IsOverrideExposureEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[15]) }
func (gdClass CameraEffects) SetOverrideExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[16], exposure) }
func (gdClass CameraEffects) GetOverrideExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[17]) }

type CameraFeed gdnative.Object

var methodCameraFeed [8]gdnative.Method

type CameraFeedFeedDataType int64

const (
	CameraFeedFeedNoimage CameraFeedFeedDataType = 0
	CameraFeedFeedRgb CameraFeedFeedDataType = 1
	CameraFeedFeedYcbcr CameraFeedFeedDataType = 2
	CameraFeedFeedYcbcrSep CameraFeedFeedDataType = 3
)

type CameraFeedFeedPosition int64

const (
	CameraFeedFeedUnspecified CameraFeedFeedPosition = 0
	CameraFeedFeedFront CameraFeedFeedPosition = 1
	CameraFeedFeedBack CameraFeedFeedPosition = 2
)
func (gdClass CameraFeed) GetId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraFeed[0]) }
func (gdClass CameraFeed) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraFeed[1]) }
func (gdClass CameraFeed) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraFeed[2], active) }
func (gdClass CameraFeed) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCameraFeed[3]) }
func (gdClass CameraFeed) GetPosition() CameraFeedFeedPosition { return gdnative.Return[CameraFeedFeedPosition](gdnative.Object(gdClass), methodCameraFeed[4]) }
func (gdClass CameraFeed) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCameraFeed[5]) }
func (gdClass CameraFeed) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCameraFeed[6], transform) }
func (gdClass CameraFeed) GetDatatype() CameraFeedFeedDataType { return gdnative.Return[CameraFeedFeedDataType](gdnative.Object(gdClass), methodCameraFeed[7]) }

type CameraServer gdnative.Object

var methodCameraServer [5]gdnative.Method

type CameraServerFeedImage int64

const (
	CameraServerFeedRgbaImage CameraServerFeedImage = 0
	CameraServerFeedYcbcrImage CameraServerFeedImage = 0
	CameraServerFeedYImage CameraServerFeedImage = 0
	CameraServerFeedCbcrImage CameraServerFeedImage = 1
)
func (gdClass CameraServer) GetFeed(index int64) CameraFeed { return gdnative.Return[CameraFeed](gdnative.Object(gdClass), methodCameraServer[0], index) }
func (gdClass CameraServer) GetFeedCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraServer[1]) }
func (gdClass CameraServer) Feeds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCameraServer[2]) }
func (gdClass CameraServer) AddFeed(feed CameraFeed)  { gdnative.Call(gdnative.Object(gdClass), methodCameraServer[3], feed) }
func (gdClass CameraServer) RemoveFeed(feed CameraFeed)  { gdnative.Call(gdnative.Object(gdClass), methodCameraServer[4], feed) }

type CameraTexture gdnative.Object

var methodCameraTexture [6]gdnative.Method
func (gdClass CameraTexture) SetCameraFeedId(feed_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[0], feed_id) }
func (gdClass CameraTexture) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraTexture[1]) }
func (gdClass CameraTexture) SetWhichFeed(which_feed CameraServerFeedImage)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[2], which_feed) }
func (gdClass CameraTexture) GetWhichFeed() CameraServerFeedImage { return gdnative.Return[CameraServerFeedImage](gdnative.Object(gdClass), methodCameraTexture[3]) }
func (gdClass CameraTexture) SetCameraActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[4], active) }
func (gdClass CameraTexture) GetCameraActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraTexture[5]) }

type CanvasGroup gdnative.Object

var methodCanvasGroup [6]gdnative.Method
func (gdClass CanvasGroup) SetFitMargin(fit_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[0], fit_margin) }
func (gdClass CanvasGroup) GetFitMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasGroup[1]) }
func (gdClass CanvasGroup) SetClearMargin(clear_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[2], clear_margin) }
func (gdClass CanvasGroup) GetClearMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasGroup[3]) }
func (gdClass CanvasGroup) SetUseMipmaps(use_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[4], use_mipmaps) }
func (gdClass CanvasGroup) IsUsingMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasGroup[5]) }

type CanvasItem gdnative.Object

var methodCanvasItem [75]gdnative.Method

type CanvasItemTextureFilter int64

const (
	CanvasItemTextureFilterParentNode CanvasItemTextureFilter = 0
	CanvasItemTextureFilterNearest CanvasItemTextureFilter = 1
	CanvasItemTextureFilterLinear CanvasItemTextureFilter = 2
	CanvasItemTextureFilterNearestWithMipmaps CanvasItemTextureFilter = 3
	CanvasItemTextureFilterLinearWithMipmaps CanvasItemTextureFilter = 4
	CanvasItemTextureFilterNearestWithMipmapsAnisotropic CanvasItemTextureFilter = 5
	CanvasItemTextureFilterLinearWithMipmapsAnisotropic CanvasItemTextureFilter = 6
	CanvasItemTextureFilterMax CanvasItemTextureFilter = 7
)

type CanvasItemTextureRepeat int64

const (
	CanvasItemTextureRepeatParentNode CanvasItemTextureRepeat = 0
	CanvasItemTextureRepeatDisabled CanvasItemTextureRepeat = 1
	CanvasItemTextureRepeatEnabled CanvasItemTextureRepeat = 2
	CanvasItemTextureRepeatMirror CanvasItemTextureRepeat = 3
	CanvasItemTextureRepeatMax CanvasItemTextureRepeat = 4
)
func (gdClass CanvasItem) DrawImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[0]) }
func (gdClass CanvasItem) GetCanvasItem() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasItem[1]) }
func (gdClass CanvasItem) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[2], visible) }
func (gdClass CanvasItem) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[3]) }
func (gdClass CanvasItem) IsVisibleInTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[4]) }
func (gdClass CanvasItem) Show()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[5]) }
func (gdClass CanvasItem) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[6]) }
func (gdClass CanvasItem) Update()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[7]) }
func (gdClass CanvasItem) SetAsTopLevel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[8], enable) }
func (gdClass CanvasItem) IsSetAsTopLevel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[9]) }
func (gdClass CanvasItem) SetLightMask(light_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[10], light_mask) }
func (gdClass CanvasItem) GetLightMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItem[11]) }
func (gdClass CanvasItem) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[12], modulate) }
func (gdClass CanvasItem) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasItem[13]) }
func (gdClass CanvasItem) SetSelfModulate(self_modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[14], self_modulate) }
func (gdClass CanvasItem) GetSelfModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasItem[15]) }
func (gdClass CanvasItem) SetDrawBehindParent(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[16], enable) }
func (gdClass CanvasItem) IsDrawBehindParentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[17]) }
func (gdClass CanvasItem) DrawLine(from Vector2, to Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[18], from, to, color, width, antialiased) }
func (gdClass CanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width float64, dash float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[19], from, to, color, width, dash) }
func (gdClass CanvasItem) DrawPolyline(points []Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[20], points, color, width, antialiased) }
func (gdClass CanvasItem) DrawPolylineColors(points []Vector2, colors []Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[21], points, colors, width, antialiased) }
func (gdClass CanvasItem) DrawArc(center Vector2, radius float64, start_angle float64, end_angle float64, point_count int64, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[22], center, radius, start_angle, end_angle, point_count, color, width, antialiased) }
func (gdClass CanvasItem) DrawMultiline(points []Vector2, color Color, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[23], points, color, width) }
func (gdClass CanvasItem) DrawMultilineColors(points []Vector2, colors []Color, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[24], points, colors, width) }
func (gdClass CanvasItem) DrawRect(rect Rect2, color Color, filled bool, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[25], rect, color, filled, width) }
func (gdClass CanvasItem) DrawCircle(position Vector2, radius float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[26], position, radius, color) }
func (gdClass CanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[27], texture, position, modulate) }
func (gdClass CanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[28], texture, rect, tile, modulate, transpose) }
func (gdClass CanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[29], texture, rect, src_rect, modulate, transpose, clip_uv) }
func (gdClass CanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline float64, pixel_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[30], texture, rect, src_rect, modulate, outline, pixel_range) }
func (gdClass CanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[31], style_box, rect) }
func (gdClass CanvasItem) DrawPrimitive(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[32], points, colors, uvs, texture, width) }
func (gdClass CanvasItem) DrawPolygon(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[33], points, colors, uvs, texture) }
func (gdClass CanvasItem) DrawColoredPolygon(points []Vector2, color Color, uvs []Vector2, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[34], points, color, uvs, texture) }
func (gdClass CanvasItem) DrawString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[35], font, pos, text, alignment, width, font_size, modulate, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawMultilineString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[36], font, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[37], font, pos, text, alignment, width, font_size, size, modulate, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[38], font, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawChar(font Font, pos Vector2, char string, font_size int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[39], font, pos, char, font_size, modulate) }
func (gdClass CanvasItem) DrawCharOutline(font Font, pos Vector2, char string, font_size int64, size int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[40], font, pos, char, font_size, size, modulate) }
func (gdClass CanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[41], mesh, texture, transform, modulate) }
func (gdClass CanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[42], multimesh, texture) }
func (gdClass CanvasItem) DrawSetTransform(position Vector2, rotation float64, scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[43], position, rotation, scale) }
func (gdClass CanvasItem) DrawSetTransformMatrix(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[44], xform) }
func (gdClass CanvasItem) DrawAnimationSlice(animation_length float64, slice_begin float64, slice_end float64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[45], animation_length, slice_begin, slice_end, offset) }
func (gdClass CanvasItem) DrawEndAnimation()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[46]) }
func (gdClass CanvasItem) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[47]) }
func (gdClass CanvasItem) GetGlobalTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[48]) }
func (gdClass CanvasItem) GetGlobalTransformWithCanvas() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[49]) }
func (gdClass CanvasItem) GetViewportTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[50]) }
func (gdClass CanvasItem) GetViewportRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodCanvasItem[51]) }
func (gdClass CanvasItem) GetCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[52]) }
func (gdClass CanvasItem) GetScreenTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[53]) }
func (gdClass CanvasItem) GetLocalMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[54]) }
func (gdClass CanvasItem) GetGlobalMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[55]) }
func (gdClass CanvasItem) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasItem[56]) }
func (gdClass CanvasItem) GetWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodCanvasItem[57]) }
func (gdClass CanvasItem) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[58], material) }
func (gdClass CanvasItem) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCanvasItem[59]) }
func (gdClass CanvasItem) SetUseParentMaterial(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[60], enable) }
func (gdClass CanvasItem) GetUseParentMaterial() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[61]) }
func (gdClass CanvasItem) SetNotifyLocalTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[62], enable) }
func (gdClass CanvasItem) IsLocalTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[63]) }
func (gdClass CanvasItem) SetNotifyTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[64], enable) }
func (gdClass CanvasItem) IsTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[65]) }
func (gdClass CanvasItem) ForceUpdateTransform()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[66]) }
func (gdClass CanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[67], screen_point) }
func (gdClass CanvasItem) MakeInputLocal(event InputEvent) InputEvent { return gdnative.Return[InputEvent](gdnative.Object(gdClass), methodCanvasItem[68], event) }
func (gdClass CanvasItem) SetTextureFilter(mode CanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[69], mode) }
func (gdClass CanvasItem) GetTextureFilter() CanvasItemTextureFilter { return gdnative.Return[CanvasItemTextureFilter](gdnative.Object(gdClass), methodCanvasItem[70]) }
func (gdClass CanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[71], mode) }
func (gdClass CanvasItem) GetTextureRepeat() CanvasItemTextureRepeat { return gdnative.Return[CanvasItemTextureRepeat](gdnative.Object(gdClass), methodCanvasItem[72]) }
func (gdClass CanvasItem) SetClipChildren(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[73], enable) }
func (gdClass CanvasItem) IsClippingChildren() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[74]) }

type CanvasItemMaterial gdnative.Object

var methodCanvasItemMaterial [12]gdnative.Method

type CanvasItemMaterialBlendMode int64

const (
	CanvasItemMaterialBlendModeMix CanvasItemMaterialBlendMode = 0
	CanvasItemMaterialBlendModeAdd CanvasItemMaterialBlendMode = 1
	CanvasItemMaterialBlendModeSub CanvasItemMaterialBlendMode = 2
	CanvasItemMaterialBlendModeMul CanvasItemMaterialBlendMode = 3
	CanvasItemMaterialBlendModePremultAlpha CanvasItemMaterialBlendMode = 4
)

type CanvasItemMaterialLightMode int64

const (
	CanvasItemMaterialLightModeNormal CanvasItemMaterialLightMode = 0
	CanvasItemMaterialLightModeUnshaded CanvasItemMaterialLightMode = 1
	CanvasItemMaterialLightModeLightOnly CanvasItemMaterialLightMode = 2
)
func (gdClass CanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[0], blend_mode) }
func (gdClass CanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode { return gdnative.Return[CanvasItemMaterialBlendMode](gdnative.Object(gdClass), methodCanvasItemMaterial[1]) }
func (gdClass CanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[2], light_mode) }
func (gdClass CanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode { return gdnative.Return[CanvasItemMaterialLightMode](gdnative.Object(gdClass), methodCanvasItemMaterial[3]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimation(particles_anim bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[4], particles_anim) }
func (gdClass CanvasItemMaterial) GetParticlesAnimation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItemMaterial[5]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimHFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[6], frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimHFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItemMaterial[7]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimVFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[8], frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimVFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItemMaterial[9]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[10], loop) }
func (gdClass CanvasItemMaterial) GetParticlesAnimLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItemMaterial[11]) }

type CanvasLayer gdnative.Object

var methodCanvasLayer [21]gdnative.Method
func (gdClass CanvasLayer) SetLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[0], layer) }
func (gdClass CanvasLayer) GetLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasLayer[1]) }
func (gdClass CanvasLayer) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[2], visible) }
func (gdClass CanvasLayer) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasLayer[3]) }
func (gdClass CanvasLayer) Show()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[4]) }
func (gdClass CanvasLayer) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[5]) }
func (gdClass CanvasLayer) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[6], transform) }
func (gdClass CanvasLayer) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasLayer[7]) }
func (gdClass CanvasLayer) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[8], offset) }
func (gdClass CanvasLayer) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasLayer[9]) }
func (gdClass CanvasLayer) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[10], radians) }
func (gdClass CanvasLayer) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasLayer[11]) }
func (gdClass CanvasLayer) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[12], scale) }
func (gdClass CanvasLayer) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasLayer[13]) }
func (gdClass CanvasLayer) SetFollowViewport(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[14], enable) }
func (gdClass CanvasLayer) IsFollowingViewport() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasLayer[15]) }
func (gdClass CanvasLayer) SetFollowViewportScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[16], scale) }
func (gdClass CanvasLayer) GetFollowViewportScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasLayer[17]) }
func (gdClass CanvasLayer) SetCustomViewport(viewport Node)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[18], viewport) }
func (gdClass CanvasLayer) GetCustomViewport() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodCanvasLayer[19]) }
func (gdClass CanvasLayer) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasLayer[20]) }

type CanvasModulate gdnative.Object

var methodCanvasModulate [2]gdnative.Method
func (gdClass CanvasModulate) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasModulate[0], color) }
func (gdClass CanvasModulate) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasModulate[1]) }

type CanvasTexture gdnative.Object

var methodCanvasTexture [14]gdnative.Method
func (gdClass CanvasTexture) SetDiffuseTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[0], texture) }
func (gdClass CanvasTexture) GetDiffuseTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[1]) }
func (gdClass CanvasTexture) SetNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[2], texture) }
func (gdClass CanvasTexture) GetNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[3]) }
func (gdClass CanvasTexture) SetSpecularTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[4], texture) }
func (gdClass CanvasTexture) GetSpecularTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[5]) }
func (gdClass CanvasTexture) SetSpecularColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[6], color) }
func (gdClass CanvasTexture) GetSpecularColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasTexture[7]) }
func (gdClass CanvasTexture) SetSpecularShininess(shininess float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[8], shininess) }
func (gdClass CanvasTexture) GetSpecularShininess() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasTexture[9]) }
func (gdClass CanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[10], filter) }
func (gdClass CanvasTexture) GetTextureFilter() CanvasItemTextureFilter { return gdnative.Return[CanvasItemTextureFilter](gdnative.Object(gdClass), methodCanvasTexture[11]) }
func (gdClass CanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[12], repeat) }
func (gdClass CanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat { return gdnative.Return[CanvasItemTextureRepeat](gdnative.Object(gdClass), methodCanvasTexture[13]) }

type CapsuleMesh gdnative.Object

var methodCapsuleMesh [8]gdnative.Method
func (gdClass CapsuleMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[0], radius) }
func (gdClass CapsuleMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleMesh[1]) }
func (gdClass CapsuleMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[2], height) }
func (gdClass CapsuleMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleMesh[3]) }
func (gdClass CapsuleMesh) SetRadialSegments(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[4], segments) }
func (gdClass CapsuleMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCapsuleMesh[5]) }
func (gdClass CapsuleMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[6], rings) }
func (gdClass CapsuleMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCapsuleMesh[7]) }

type CapsuleShape2D gdnative.Object

var methodCapsuleShape2D [4]gdnative.Method
func (gdClass CapsuleShape2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape2D[0], radius) }
func (gdClass CapsuleShape2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape2D[1]) }
func (gdClass CapsuleShape2D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape2D[2], height) }
func (gdClass CapsuleShape2D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape2D[3]) }

type CapsuleShape3D gdnative.Object

var methodCapsuleShape3D [4]gdnative.Method
func (gdClass CapsuleShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape3D[0], radius) }
func (gdClass CapsuleShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape3D[1]) }
func (gdClass CapsuleShape3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape3D[2], height) }
func (gdClass CapsuleShape3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape3D[3]) }

type CenterContainer gdnative.Object

var methodCenterContainer [2]gdnative.Method
func (gdClass CenterContainer) SetUseTopLeft(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCenterContainer[0], enable) }
func (gdClass CenterContainer) IsUsingTopLeft() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCenterContainer[1]) }

type CharFXTransform gdnative.Object

var methodCharFXTransform [22]gdnative.Method
func (gdClass CharFXTransform) GetRange() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodCharFXTransform[0]) }
func (gdClass CharFXTransform) SetRange(arange Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[1], arange) }
func (gdClass CharFXTransform) GetElapsedTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharFXTransform[2]) }
func (gdClass CharFXTransform) SetElapsedTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[3], time) }
func (gdClass CharFXTransform) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharFXTransform[4]) }
func (gdClass CharFXTransform) SetVisibility(visibility bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[5], visibility) }
func (gdClass CharFXTransform) IsOutline() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharFXTransform[6]) }
func (gdClass CharFXTransform) SetOutline(outline bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[7], outline) }
func (gdClass CharFXTransform) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharFXTransform[8]) }
func (gdClass CharFXTransform) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[9], offset) }
func (gdClass CharFXTransform) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCharFXTransform[10]) }
func (gdClass CharFXTransform) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[11], color) }
func (gdClass CharFXTransform) GetEnvironment() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCharFXTransform[12]) }
func (gdClass CharFXTransform) SetEnvironment(environment Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[13], environment) }
func (gdClass CharFXTransform) GetGlyphIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[14]) }
func (gdClass CharFXTransform) SetGlyphIndex(glyph_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[15], glyph_index) }
func (gdClass CharFXTransform) GetGlyphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[16]) }
func (gdClass CharFXTransform) SetGlyphCount(glyph_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[17], glyph_count) }
func (gdClass CharFXTransform) GetGlyphFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[18]) }
func (gdClass CharFXTransform) SetGlyphFlags(glyph_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[19], glyph_flags) }
func (gdClass CharFXTransform) GetFont() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCharFXTransform[20]) }
func (gdClass CharFXTransform) SetFont(font RID)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[21], font) }

type CharacterBody2D gdnative.Object

var methodCharacterBody2D [47]gdnative.Method

type CharacterBody2DMotionMode int64

const (
	CharacterBody2DMotionModeGrounded CharacterBody2DMotionMode = 0
	CharacterBody2DMotionModeFloating CharacterBody2DMotionMode = 1
)

type CharacterBody2DMovingPlatformApplyVelocityOnLeave int64

const (
	CharacterBody2DPlatformVelOnLeaveAlways CharacterBody2DMovingPlatformApplyVelocityOnLeave = 0
	CharacterBody2DPlatformVelOnLeaveUpwardOnly CharacterBody2DMovingPlatformApplyVelocityOnLeave = 1
	CharacterBody2DPlatformVelOnLeaveNever CharacterBody2DMovingPlatformApplyVelocityOnLeave = 2
)
func (gdClass CharacterBody2D) MoveAndSlide() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[0]) }
func (gdClass CharacterBody2D) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[1], velocity) }
func (gdClass CharacterBody2D) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[2]) }
func (gdClass CharacterBody2D) SetSafeMargin(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[3], pixels) }
func (gdClass CharacterBody2D) GetSafeMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[4]) }
func (gdClass CharacterBody2D) IsFloorStopOnSlopeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[5]) }
func (gdClass CharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[6], enabled) }
func (gdClass CharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[7], enabled) }
func (gdClass CharacterBody2D) IsFloorConstantSpeedEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[8]) }
func (gdClass CharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[9], enabled) }
func (gdClass CharacterBody2D) IsFloorBlockOnWallEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[10]) }
func (gdClass CharacterBody2D) SetSlideOnCeilingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[11], enabled) }
func (gdClass CharacterBody2D) IsSlideOnCeilingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[12]) }
func (gdClass CharacterBody2D) SetMovingPlatformFloorLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[13], exclude_layer) }
func (gdClass CharacterBody2D) GetMovingPlatformFloorLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[14]) }
func (gdClass CharacterBody2D) SetMovingPlatformWallLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[15], exclude_layer) }
func (gdClass CharacterBody2D) GetMovingPlatformWallLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[16]) }
func (gdClass CharacterBody2D) GetMaxSlides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[17]) }
func (gdClass CharacterBody2D) SetMaxSlides(max_slides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[18], max_slides) }
func (gdClass CharacterBody2D) GetFloorMaxAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[19]) }
func (gdClass CharacterBody2D) SetFloorMaxAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[20], radians) }
func (gdClass CharacterBody2D) GetFloorSnapLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[21]) }
func (gdClass CharacterBody2D) SetFloorSnapLength(floor_snap_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[22], floor_snap_length) }
func (gdClass CharacterBody2D) GetWallMinSlideAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[23]) }
func (gdClass CharacterBody2D) SetWallMinSlideAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[24], radians) }
func (gdClass CharacterBody2D) GetUpDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[25]) }
func (gdClass CharacterBody2D) SetUpDirection(up_direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[26], up_direction) }
func (gdClass CharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[27], mode) }
func (gdClass CharacterBody2D) GetMotionMode() CharacterBody2DMotionMode { return gdnative.Return[CharacterBody2DMotionMode](gdnative.Object(gdClass), methodCharacterBody2D[28]) }
func (gdClass CharacterBody2D) SetMovingPlatformApplyVelocityOnLeave(on_leave_apply_velocity CharacterBody2DMovingPlatformApplyVelocityOnLeave)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[29], on_leave_apply_velocity) }
func (gdClass CharacterBody2D) GetMovingPlatformApplyVelocityOnLeave() CharacterBody2DMovingPlatformApplyVelocityOnLeave { return gdnative.Return[CharacterBody2DMovingPlatformApplyVelocityOnLeave](gdnative.Object(gdClass), methodCharacterBody2D[30]) }
func (gdClass CharacterBody2D) IsOnFloor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[31]) }
func (gdClass CharacterBody2D) IsOnFloorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[32]) }
func (gdClass CharacterBody2D) IsOnCeiling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[33]) }
func (gdClass CharacterBody2D) IsOnCeilingOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[34]) }
func (gdClass CharacterBody2D) IsOnWall() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[35]) }
func (gdClass CharacterBody2D) IsOnWallOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[36]) }
func (gdClass CharacterBody2D) GetFloorNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[37]) }
func (gdClass CharacterBody2D) GetWallNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[38]) }
func (gdClass CharacterBody2D) GetLastMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[39]) }
func (gdClass CharacterBody2D) GetPositionDelta() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[40]) }
func (gdClass CharacterBody2D) GetRealVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[41]) }
func (gdClass CharacterBody2D) GetFloorAngle(up_direction Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[42], up_direction) }
func (gdClass CharacterBody2D) GetPlatformVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[43]) }
func (gdClass CharacterBody2D) GetSlideCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[44]) }
func (gdClass CharacterBody2D) GetSlideCollision(slide_idx int64) KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodCharacterBody2D[45], slide_idx) }
func (gdClass CharacterBody2D) GetLastSlideCollision() KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodCharacterBody2D[46]) }

type CharacterBody3D gdnative.Object

var methodCharacterBody3D [47]gdnative.Method

type CharacterBody3DMotionMode int64

const (
	CharacterBody3DMotionModeGrounded CharacterBody3DMotionMode = 0
	CharacterBody3DMotionModeFloating CharacterBody3DMotionMode = 1
)

type CharacterBody3DMovingPlatformApplyVelocityOnLeave int64

const (
	CharacterBody3DPlatformVelOnLeaveAlways CharacterBody3DMovingPlatformApplyVelocityOnLeave = 0
	CharacterBody3DPlatformVelOnLeaveUpwardOnly CharacterBody3DMovingPlatformApplyVelocityOnLeave = 1
	CharacterBody3DPlatformVelOnLeaveNever CharacterBody3DMovingPlatformApplyVelocityOnLeave = 2
)
func (gdClass CharacterBody3D) MoveAndSlide() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[0]) }
func (gdClass CharacterBody3D) SetVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[1], velocity) }
func (gdClass CharacterBody3D) GetVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[2]) }
func (gdClass CharacterBody3D) SetSafeMargin(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[3], pixels) }
func (gdClass CharacterBody3D) GetSafeMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[4]) }
func (gdClass CharacterBody3D) IsFloorStopOnSlopeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[5]) }
func (gdClass CharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[6], enabled) }
func (gdClass CharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[7], enabled) }
func (gdClass CharacterBody3D) IsFloorConstantSpeedEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[8]) }
func (gdClass CharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[9], enabled) }
func (gdClass CharacterBody3D) IsFloorBlockOnWallEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[10]) }
func (gdClass CharacterBody3D) SetSlideOnCeilingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[11], enabled) }
func (gdClass CharacterBody3D) IsSlideOnCeilingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[12]) }
func (gdClass CharacterBody3D) SetMovingPlatformFloorLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[13], exclude_layer) }
func (gdClass CharacterBody3D) GetMovingPlatformFloorLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[14]) }
func (gdClass CharacterBody3D) SetMovingPlatformWallLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[15], exclude_layer) }
func (gdClass CharacterBody3D) GetMovingPlatformWallLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[16]) }
func (gdClass CharacterBody3D) GetMaxSlides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[17]) }
func (gdClass CharacterBody3D) SetMaxSlides(max_slides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[18], max_slides) }
func (gdClass CharacterBody3D) GetFloorMaxAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[19]) }
func (gdClass CharacterBody3D) SetFloorMaxAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[20], radians) }
func (gdClass CharacterBody3D) GetFloorSnapLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[21]) }
func (gdClass CharacterBody3D) SetFloorSnapLength(floor_snap_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[22], floor_snap_length) }
func (gdClass CharacterBody3D) GetWallMinSlideAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[23]) }
func (gdClass CharacterBody3D) SetWallMinSlideAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[24], radians) }
func (gdClass CharacterBody3D) GetUpDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[25]) }
func (gdClass CharacterBody3D) SetUpDirection(up_direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[26], up_direction) }
func (gdClass CharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[27], mode) }
func (gdClass CharacterBody3D) GetMotionMode() CharacterBody3DMotionMode { return gdnative.Return[CharacterBody3DMotionMode](gdnative.Object(gdClass), methodCharacterBody3D[28]) }
func (gdClass CharacterBody3D) SetMovingPlatformApplyVelocityOnLeave(on_leave_apply_velocity CharacterBody3DMovingPlatformApplyVelocityOnLeave)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[29], on_leave_apply_velocity) }
func (gdClass CharacterBody3D) GetMovingPlatformApplyVelocityOnLeave() CharacterBody3DMovingPlatformApplyVelocityOnLeave { return gdnative.Return[CharacterBody3DMovingPlatformApplyVelocityOnLeave](gdnative.Object(gdClass), methodCharacterBody3D[30]) }
func (gdClass CharacterBody3D) IsOnFloor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[31]) }
func (gdClass CharacterBody3D) IsOnFloorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[32]) }
func (gdClass CharacterBody3D) IsOnCeiling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[33]) }
func (gdClass CharacterBody3D) IsOnCeilingOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[34]) }
func (gdClass CharacterBody3D) IsOnWall() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[35]) }
func (gdClass CharacterBody3D) IsOnWallOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[36]) }
func (gdClass CharacterBody3D) GetFloorNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[37]) }
func (gdClass CharacterBody3D) GetWallNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[38]) }
func (gdClass CharacterBody3D) GetLastMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[39]) }
func (gdClass CharacterBody3D) GetPositionDelta() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[40]) }
func (gdClass CharacterBody3D) GetRealVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[41]) }
func (gdClass CharacterBody3D) GetFloorAngle(up_direction Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[42], up_direction) }
func (gdClass CharacterBody3D) GetPlatformVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[43]) }
func (gdClass CharacterBody3D) GetSlideCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[44]) }
func (gdClass CharacterBody3D) GetSlideCollision(slide_idx int64) KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodCharacterBody3D[45], slide_idx) }
func (gdClass CharacterBody3D) GetLastSlideCollision() KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodCharacterBody3D[46]) }

type CheckBox gdnative.Object

var methodCheckBox [0]gdnative.Method

type CheckButton gdnative.Object

var methodCheckButton [0]gdnative.Method

type CircleShape2D gdnative.Object

var methodCircleShape2D [2]gdnative.Method
func (gdClass CircleShape2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCircleShape2D[0], radius) }
func (gdClass CircleShape2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCircleShape2D[1]) }

type ClassDB gdnative.Object

var methodClassDB [23]gdnative.Method
func (gdClass ClassDB) GetClassList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[0]) }
func (gdClass ClassDB) GetInheritersFromClass(class string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[1], class) }
func (gdClass ClassDB) GetParentClass(class string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodClassDB[2], class) }
func (gdClass ClassDB) ClassExists(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[3], class) }
func (gdClass ClassDB) IsParentClass(class string, inherits string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[4], class, inherits) }
func (gdClass ClassDB) CanInstantiate(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[5], class) }
func (gdClass ClassDB) Instantiate(class string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodClassDB[6], class) }
func (gdClass ClassDB) ClassHasSignal(class string, signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[7], class, signal) }
func (gdClass ClassDB) ClassGetSignal(class string, signal string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodClassDB[8], class, signal) }
func (gdClass ClassDB) ClassGetSignalList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[9], class, no_inheritance) }
func (gdClass ClassDB) ClassGetPropertyList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[10], class, no_inheritance) }
func (gdClass ClassDB) ClassGetProperty(object Object, property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodClassDB[11], object, property) }
func (gdClass ClassDB) ClassSetProperty(object Object, property string, value any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodClassDB[12], object, property, value) }
func (gdClass ClassDB) ClassHasMethod(class string, method string, no_inheritance bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[13], class, method, no_inheritance) }
func (gdClass ClassDB) ClassGetMethodList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[14], class, no_inheritance) }
func (gdClass ClassDB) ClassGetIntegerConstantList(class string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[15], class, no_inheritance) }
func (gdClass ClassDB) ClassHasIntegerConstant(class string, name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[16], class, name) }
func (gdClass ClassDB) ClassGetIntegerConstant(class string, name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodClassDB[17], class, name) }
func (gdClass ClassDB) ClassHasEnum(class string, name string, no_inheritance bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[18], class, name, no_inheritance) }
func (gdClass ClassDB) ClassGetEnumList(class string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[19], class, no_inheritance) }
func (gdClass ClassDB) ClassGetEnumConstants(class string, enum string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[20], class, enum, no_inheritance) }
func (gdClass ClassDB) ClassGetIntegerConstantEnum(class string, name string, no_inheritance bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodClassDB[21], class, name, no_inheritance) }
func (gdClass ClassDB) IsClassEnabled(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[22], class) }

type CodeEdit gdnative.Object

var methodCodeEdit [99]gdnative.Method

type CodeEditCodeCompletionKind int64

const (
	CodeEditKindClass CodeEditCodeCompletionKind = 0
	CodeEditKindFunction CodeEditCodeCompletionKind = 1
	CodeEditKindSignal CodeEditCodeCompletionKind = 2
	CodeEditKindVariable CodeEditCodeCompletionKind = 3
	CodeEditKindMember CodeEditCodeCompletionKind = 4
	CodeEditKindEnum CodeEditCodeCompletionKind = 5
	CodeEditKindConstant CodeEditCodeCompletionKind = 6
	CodeEditKindNodePath CodeEditCodeCompletionKind = 7
	CodeEditKindFilePath CodeEditCodeCompletionKind = 8
	CodeEditKindPlainText CodeEditCodeCompletionKind = 9
)
func (gdClass CodeEdit) ConfirmCodeCompletionImplementation(replace bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[0], replace) }
func (gdClass CodeEdit) RequestCodeCompletionImplementation(force bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[1], force) }
func (gdClass CodeEdit) FilterCodeCompletionCandidatesImplementation(candidates Array) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[2], candidates) }
func (gdClass CodeEdit) SetIndentSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[3], size) }
func (gdClass CodeEdit) GetIndentSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[4]) }
func (gdClass CodeEdit) SetIndentUsingSpaces(use_spaces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[5], use_spaces) }
func (gdClass CodeEdit) IsIndentUsingSpaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[6]) }
func (gdClass CodeEdit) SetAutoIndentEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[7], enable) }
func (gdClass CodeEdit) IsAutoIndentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[8]) }
func (gdClass CodeEdit) SetAutoIndentPrefixes(prefixes Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[9], prefixes) }
func (gdClass CodeEdit) GetAutoIndentPrefixes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[10]) }
func (gdClass CodeEdit) DoIndent()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[11]) }
func (gdClass CodeEdit) DoUnindent()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[12]) }
func (gdClass CodeEdit) IndentLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[13]) }
func (gdClass CodeEdit) UnindentLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[14]) }
func (gdClass CodeEdit) SetAutoBraceCompletionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[15], enable) }
func (gdClass CodeEdit) IsAutoBraceCompletionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[16]) }
func (gdClass CodeEdit) SetHighlightMatchingBracesEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[17], enable) }
func (gdClass CodeEdit) IsHighlightMatchingBracesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[18]) }
func (gdClass CodeEdit) AddAutoBraceCompletionPair(start_key string, end_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[19], start_key, end_key) }
func (gdClass CodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[20], pairs) }
func (gdClass CodeEdit) GetAutoBraceCompletionPairs() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeEdit[21]) }
func (gdClass CodeEdit) HasAutoBraceCompletionOpenKey(open_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[22], open_key) }
func (gdClass CodeEdit) HasAutoBraceCompletionCloseKey(close_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[23], close_key) }
func (gdClass CodeEdit) GetAutoBraceCompletionCloseKey(open_key string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[24], open_key) }
func (gdClass CodeEdit) SetDrawBreakpointsGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[25], enable) }
func (gdClass CodeEdit) IsDrawingBreakpointsGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[26]) }
func (gdClass CodeEdit) SetDrawBookmarksGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[27], enable) }
func (gdClass CodeEdit) IsDrawingBookmarksGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[28]) }
func (gdClass CodeEdit) SetDrawExecutingLinesGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[29], enable) }
func (gdClass CodeEdit) IsDrawingExecutingLinesGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[30]) }
func (gdClass CodeEdit) SetLineAsBreakpoint(line int64, breakpointed bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[31], line, breakpointed) }
func (gdClass CodeEdit) IsLineBreakpointed(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[32], line) }
func (gdClass CodeEdit) ClearBreakpointedLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[33]) }
func (gdClass CodeEdit) GetBreakpointedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[34]) }
func (gdClass CodeEdit) SetLineAsBookmarked(line int64, bookmarked bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[35], line, bookmarked) }
func (gdClass CodeEdit) IsLineBookmarked(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[36], line) }
func (gdClass CodeEdit) ClearBookmarkedLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[37]) }
func (gdClass CodeEdit) GetBookmarkedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[38]) }
func (gdClass CodeEdit) SetLineAsExecuting(line int64, executing bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[39], line, executing) }
func (gdClass CodeEdit) IsLineExecuting(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[40], line) }
func (gdClass CodeEdit) ClearExecutingLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[41]) }
func (gdClass CodeEdit) GetExecutingLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[42]) }
func (gdClass CodeEdit) SetDrawLineNumbers(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[43], enable) }
func (gdClass CodeEdit) IsDrawLineNumbersEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[44]) }
func (gdClass CodeEdit) SetLineNumbersZeroPadded(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[45], enable) }
func (gdClass CodeEdit) IsLineNumbersZeroPadded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[46]) }
func (gdClass CodeEdit) SetDrawFoldGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[47], enable) }
func (gdClass CodeEdit) IsDrawingFoldGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[48]) }
func (gdClass CodeEdit) SetLineFoldingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[49], enabled) }
func (gdClass CodeEdit) IsLineFoldingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[50]) }
func (gdClass CodeEdit) CanFoldLine(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[51], line) }
func (gdClass CodeEdit) FoldLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[52], line) }
func (gdClass CodeEdit) UnfoldLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[53], line) }
func (gdClass CodeEdit) FoldAllLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[54]) }
func (gdClass CodeEdit) UnfoldAllLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[55]) }
func (gdClass CodeEdit) ToggleFoldableLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[56], line) }
func (gdClass CodeEdit) IsLineFolded(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[57], line) }
func (gdClass CodeEdit) GetFoldedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[58]) }
func (gdClass CodeEdit) AddStringDelimiter(start_key string, end_key string, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[59], start_key, end_key, line_only) }
func (gdClass CodeEdit) RemoveStringDelimiter(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[60], start_key) }
func (gdClass CodeEdit) HasStringDelimiter(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[61], start_key) }
func (gdClass CodeEdit) SetStringDelimiters(string_delimiters Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[62], string_delimiters) }
func (gdClass CodeEdit) ClearStringDelimiters()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[63]) }
func (gdClass CodeEdit) GetStringDelimiters() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[64]) }
func (gdClass CodeEdit) IsInString(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[65], line, column) }
func (gdClass CodeEdit) AddCommentDelimiter(start_key string, end_key string, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[66], start_key, end_key, line_only) }
func (gdClass CodeEdit) RemoveCommentDelimiter(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[67], start_key) }
func (gdClass CodeEdit) HasCommentDelimiter(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[68], start_key) }
func (gdClass CodeEdit) SetCommentDelimiters(comment_delimiters Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[69], comment_delimiters) }
func (gdClass CodeEdit) ClearCommentDelimiters()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[70]) }
func (gdClass CodeEdit) GetCommentDelimiters() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[71]) }
func (gdClass CodeEdit) IsInComment(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[72], line, column) }
func (gdClass CodeEdit) GetDelimiterStartKey(delimiter_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[73], delimiter_index) }
func (gdClass CodeEdit) GetDelimiterEndKey(delimiter_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[74], delimiter_index) }
func (gdClass CodeEdit) GetDelimiterStartPosition(line int64, column int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCodeEdit[75], line, column) }
func (gdClass CodeEdit) GetDelimiterEndPosition(line int64, column int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCodeEdit[76], line, column) }
func (gdClass CodeEdit) SetCodeHint(code_hint string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[77], code_hint) }
func (gdClass CodeEdit) SetCodeHintDrawBelow(draw_below bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[78], draw_below) }
func (gdClass CodeEdit) GetTextForCodeCompletion() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[79]) }
func (gdClass CodeEdit) RequestCodeCompletion(force bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[80], force) }
func (gdClass CodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text string, insert_text string, text_color Color, icon Resource, value any)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[81], atype, display_text, insert_text, text_color, icon, value) }
func (gdClass CodeEdit) UpdateCodeCompletionOptions(force bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[82], force) }
func (gdClass CodeEdit) GetCodeCompletionOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[83]) }
func (gdClass CodeEdit) GetCodeCompletionOption(index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeEdit[84], index) }
func (gdClass CodeEdit) GetCodeCompletionSelectedIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[85]) }
func (gdClass CodeEdit) SetCodeCompletionSelectedIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[86], index) }
func (gdClass CodeEdit) ConfirmCodeCompletion(replace bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[87], replace) }
func (gdClass CodeEdit) CancelCodeCompletion()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[88]) }
func (gdClass CodeEdit) SetCodeCompletionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[89], enable) }
func (gdClass CodeEdit) IsCodeCompletionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[90]) }
func (gdClass CodeEdit) SetCodeCompletionPrefixes(prefixes Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[91], prefixes) }
func (gdClass CodeEdit) GetCodeComletionPrefixes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[92]) }
func (gdClass CodeEdit) SetLineLengthGuidelines(guideline_columns Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[93], guideline_columns) }
func (gdClass CodeEdit) GetLineLengthGuidelines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[94]) }
func (gdClass CodeEdit) SetSymbolLookupOnClickEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[95], enable) }
func (gdClass CodeEdit) IsSymbolLookupOnClickEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[96]) }
func (gdClass CodeEdit) GetTextForSymbolLookup() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[97]) }
func (gdClass CodeEdit) SetSymbolLookupWordAsValid(valid bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[98], valid) }

type CodeHighlighter gdnative.Object

var methodCodeHighlighter [28]gdnative.Method
func (gdClass CodeHighlighter) AddKeywordColor(keyword string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[0], keyword, color) }
func (gdClass CodeHighlighter) RemoveKeywordColor(keyword string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[1], keyword) }
func (gdClass CodeHighlighter) HasKeywordColor(keyword string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[2], keyword) }
func (gdClass CodeHighlighter) GetKeywordColor(keyword string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[3], keyword) }
func (gdClass CodeHighlighter) SetKeywordColors(keywords Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[4], keywords) }
func (gdClass CodeHighlighter) ClearKeywordColors()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[5]) }
func (gdClass CodeHighlighter) GetKeywordColors() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[6]) }
func (gdClass CodeHighlighter) AddMemberKeywordColor(member_keyword string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[7], member_keyword, color) }
func (gdClass CodeHighlighter) RemoveMemberKeywordColor(member_keyword string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[8], member_keyword) }
func (gdClass CodeHighlighter) HasMemberKeywordColor(member_keyword string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[9], member_keyword) }
func (gdClass CodeHighlighter) GetMemberKeywordColor(member_keyword string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[10], member_keyword) }
func (gdClass CodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[11], member_keyword) }
func (gdClass CodeHighlighter) ClearMemberKeywordColors()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[12]) }
func (gdClass CodeHighlighter) GetMemberKeywordColors() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[13]) }
func (gdClass CodeHighlighter) AddColorRegion(start_key string, end_key string, color Color, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[14], start_key, end_key, color, line_only) }
func (gdClass CodeHighlighter) RemoveColorRegion(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[15], start_key) }
func (gdClass CodeHighlighter) HasColorRegion(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[16], start_key) }
func (gdClass CodeHighlighter) SetColorRegions(color_regions Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[17], color_regions) }
func (gdClass CodeHighlighter) ClearColorRegions()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[18]) }
func (gdClass CodeHighlighter) GetColorRegions() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[19]) }
func (gdClass CodeHighlighter) SetFunctionColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[20], color) }
func (gdClass CodeHighlighter) GetFunctionColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[21]) }
func (gdClass CodeHighlighter) SetNumberColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[22], color) }
func (gdClass CodeHighlighter) GetNumberColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[23]) }
func (gdClass CodeHighlighter) SetSymbolColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[24], color) }
func (gdClass CodeHighlighter) GetSymbolColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[25]) }
func (gdClass CodeHighlighter) SetMemberVariableColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[26], color) }
func (gdClass CodeHighlighter) GetMemberVariableColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[27]) }

type CollisionObject2D gdnative.Object

var methodCollisionObject2D [33]gdnative.Method

type CollisionObject2DDisableMode int64

const (
	CollisionObject2DDisableModeRemove CollisionObject2DDisableMode = 0
	CollisionObject2DDisableModeMakeStatic CollisionObject2DDisableMode = 1
	CollisionObject2DDisableModeKeepActive CollisionObject2DDisableMode = 2
)
func (gdClass CollisionObject2D) InputEventImplementation(viewport Viewport, event InputEvent, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[0], viewport, event, shape_idx) }
func (gdClass CollisionObject2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCollisionObject2D[1]) }
func (gdClass CollisionObject2D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[2], layer) }
func (gdClass CollisionObject2D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[3]) }
func (gdClass CollisionObject2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[4], mask) }
func (gdClass CollisionObject2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[5]) }
func (gdClass CollisionObject2D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[6], layer_number, value) }
func (gdClass CollisionObject2D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[7], layer_number) }
func (gdClass CollisionObject2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[8], layer_number, value) }
func (gdClass CollisionObject2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[9], layer_number) }
func (gdClass CollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[10], mode) }
func (gdClass CollisionObject2D) GetDisableMode() CollisionObject2DDisableMode { return gdnative.Return[CollisionObject2DDisableMode](gdnative.Object(gdClass), methodCollisionObject2D[11]) }
func (gdClass CollisionObject2D) SetPickable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[12], enabled) }
func (gdClass CollisionObject2D) IsPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[13]) }
func (gdClass CollisionObject2D) CreateShapeOwner(owner Object) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[14], owner) }
func (gdClass CollisionObject2D) RemoveShapeOwner(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[15], owner_id) }
func (gdClass CollisionObject2D) GetShapeOwners() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCollisionObject2D[16]) }
func (gdClass CollisionObject2D) ShapeOwnerSetTransform(owner_id int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[17], owner_id, transform) }
func (gdClass CollisionObject2D) ShapeOwnerGetTransform(owner_id int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCollisionObject2D[18], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetOwner(owner_id int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodCollisionObject2D[19], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[20], owner_id, disabled) }
func (gdClass CollisionObject2D) IsShapeOwnerDisabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[21], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[22], owner_id, enable) }
func (gdClass CollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[23], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id int64, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[24], owner_id, margin) }
func (gdClass CollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionObject2D[25], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerAddShape(owner_id int64, shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[26], owner_id, shape) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[27], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodCollisionObject2D[28], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[29], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[30], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerClearShapes(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[31], owner_id) }
func (gdClass CollisionObject2D) ShapeFindOwner(shape_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[32], shape_index) }

type CollisionObject3D gdnative.Object

var methodCollisionObject3D [31]gdnative.Method

type CollisionObject3DDisableMode int64

const (
	CollisionObject3DDisableModeRemove CollisionObject3DDisableMode = 0
	CollisionObject3DDisableModeMakeStatic CollisionObject3DDisableMode = 1
	CollisionObject3DDisableModeKeepActive CollisionObject3DDisableMode = 2
)
func (gdClass CollisionObject3D) InputEventImplementation(camera Camera3D, event InputEvent, position Vector3, normal Vector3, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[0], camera, event, position, normal, shape_idx) }
func (gdClass CollisionObject3D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[1], layer) }
func (gdClass CollisionObject3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[2]) }
func (gdClass CollisionObject3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[3], mask) }
func (gdClass CollisionObject3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[4]) }
func (gdClass CollisionObject3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[5], layer_number, value) }
func (gdClass CollisionObject3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[6], layer_number) }
func (gdClass CollisionObject3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[7], layer_number, value) }
func (gdClass CollisionObject3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[8], layer_number) }
func (gdClass CollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[9], mode) }
func (gdClass CollisionObject3D) GetDisableMode() CollisionObject3DDisableMode { return gdnative.Return[CollisionObject3DDisableMode](gdnative.Object(gdClass), methodCollisionObject3D[10]) }
func (gdClass CollisionObject3D) SetRayPickable(ray_pickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[11], ray_pickable) }
func (gdClass CollisionObject3D) IsRayPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[12]) }
func (gdClass CollisionObject3D) SetCaptureInputOnDrag(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[13], enable) }
func (gdClass CollisionObject3D) GetCaptureInputOnDrag() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[14]) }
func (gdClass CollisionObject3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCollisionObject3D[15]) }
func (gdClass CollisionObject3D) CreateShapeOwner(owner Object) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[16], owner) }
func (gdClass CollisionObject3D) RemoveShapeOwner(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[17], owner_id) }
func (gdClass CollisionObject3D) GetShapeOwners() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCollisionObject3D[18]) }
func (gdClass CollisionObject3D) ShapeOwnerSetTransform(owner_id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[19], owner_id, transform) }
func (gdClass CollisionObject3D) ShapeOwnerGetTransform(owner_id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodCollisionObject3D[20], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetOwner(owner_id int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodCollisionObject3D[21], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[22], owner_id, disabled) }
func (gdClass CollisionObject3D) IsShapeOwnerDisabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[23], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerAddShape(owner_id int64, shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[24], owner_id, shape) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[25], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodCollisionObject3D[26], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[27], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[28], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerClearShapes(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[29], owner_id) }
func (gdClass CollisionObject3D) ShapeFindOwner(shape_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[30], shape_index) }

type CollisionPolygon2D gdnative.Object

var methodCollisionPolygon2D [10]gdnative.Method

type CollisionPolygon2DBuildMode int64

const (
	CollisionPolygon2DBuildSolids CollisionPolygon2DBuildMode = 0
	CollisionPolygon2DBuildSegments CollisionPolygon2DBuildMode = 1
)
func (gdClass CollisionPolygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[0], polygon) }
func (gdClass CollisionPolygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCollisionPolygon2D[1]) }
func (gdClass CollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[2], build_mode) }
func (gdClass CollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode { return gdnative.Return[CollisionPolygon2DBuildMode](gdnative.Object(gdClass), methodCollisionPolygon2D[3]) }
func (gdClass CollisionPolygon2D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[4], disabled) }
func (gdClass CollisionPolygon2D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon2D[5]) }
func (gdClass CollisionPolygon2D) SetOneWayCollision(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[6], enabled) }
func (gdClass CollisionPolygon2D) IsOneWayCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon2D[7]) }
func (gdClass CollisionPolygon2D) SetOneWayCollisionMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[8], margin) }
func (gdClass CollisionPolygon2D) GetOneWayCollisionMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon2D[9]) }

type CollisionPolygon3D gdnative.Object

var methodCollisionPolygon3D [8]gdnative.Method
func (gdClass CollisionPolygon3D) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[0], depth) }
func (gdClass CollisionPolygon3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon3D[1]) }
func (gdClass CollisionPolygon3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[2], polygon) }
func (gdClass CollisionPolygon3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCollisionPolygon3D[3]) }
func (gdClass CollisionPolygon3D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[4], disabled) }
func (gdClass CollisionPolygon3D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon3D[5]) }
func (gdClass CollisionPolygon3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[6], margin) }
func (gdClass CollisionPolygon3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon3D[7]) }

type CollisionShape2D gdnative.Object

var methodCollisionShape2D [8]gdnative.Method
func (gdClass CollisionShape2D) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[0], shape) }
func (gdClass CollisionShape2D) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodCollisionShape2D[1]) }
func (gdClass CollisionShape2D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[2], disabled) }
func (gdClass CollisionShape2D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape2D[3]) }
func (gdClass CollisionShape2D) SetOneWayCollision(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[4], enabled) }
func (gdClass CollisionShape2D) IsOneWayCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape2D[5]) }
func (gdClass CollisionShape2D) SetOneWayCollisionMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[6], margin) }
func (gdClass CollisionShape2D) GetOneWayCollisionMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionShape2D[7]) }

type CollisionShape3D gdnative.Object

var methodCollisionShape3D [6]gdnative.Method
func (gdClass CollisionShape3D) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[0], resource) }
func (gdClass CollisionShape3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[1], shape) }
func (gdClass CollisionShape3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodCollisionShape3D[2]) }
func (gdClass CollisionShape3D) SetDisabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[3], enable) }
func (gdClass CollisionShape3D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape3D[4]) }
func (gdClass CollisionShape3D) MakeConvexFromSiblings()  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[5]) }

type ColorPicker gdnative.Object

var methodColorPicker [17]gdnative.Method

type ColorPickerColorModeType int64

const (
	ColorPickerModeRgb ColorPickerColorModeType = 0
	ColorPickerModeHsv ColorPickerColorModeType = 1
	ColorPickerModeRaw ColorPickerColorModeType = 2
	ColorPickerModeOkhsl ColorPickerColorModeType = 3
)

type ColorPickerPickerShapeType int64

const (
	ColorPickerShapeHsvRectangle ColorPickerPickerShapeType = 0
	ColorPickerShapeHsvWheel ColorPickerPickerShapeType = 1
	ColorPickerShapeVhsCircle ColorPickerPickerShapeType = 2
	ColorPickerShapeOkhslCircle ColorPickerPickerShapeType = 3
)
func (gdClass ColorPicker) SetPickColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[0], color) }
func (gdClass ColorPicker) GetPickColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorPicker[1]) }
func (gdClass ColorPicker) SetDeferredMode(mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[2], mode) }
func (gdClass ColorPicker) IsDeferredMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[3]) }
func (gdClass ColorPicker) SetColorMode(color_mode ColorPickerColorModeType)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[4], color_mode) }
func (gdClass ColorPicker) GetColorMode() ColorPickerColorModeType { return gdnative.Return[ColorPickerColorModeType](gdnative.Object(gdClass), methodColorPicker[5]) }
func (gdClass ColorPicker) SetEditAlpha(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[6], show) }
func (gdClass ColorPicker) IsEditingAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[7]) }
func (gdClass ColorPicker) SetPresetsEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[8], enabled) }
func (gdClass ColorPicker) ArePresetsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[9]) }
func (gdClass ColorPicker) SetPresetsVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[10], visible) }
func (gdClass ColorPicker) ArePresetsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[11]) }
func (gdClass ColorPicker) AddPreset(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[12], color) }
func (gdClass ColorPicker) ErasePreset(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[13], color) }
func (gdClass ColorPicker) GetPresets() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodColorPicker[14]) }
func (gdClass ColorPicker) SetPickerShape(shape ColorPickerPickerShapeType)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[15], shape) }
func (gdClass ColorPicker) GetPickerShape() ColorPickerPickerShapeType { return gdnative.Return[ColorPickerPickerShapeType](gdnative.Object(gdClass), methodColorPicker[16]) }

type ColorPickerButton gdnative.Object

var methodColorPickerButton [6]gdnative.Method
func (gdClass ColorPickerButton) SetPickColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPickerButton[0], color) }
func (gdClass ColorPickerButton) GetPickColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorPickerButton[1]) }
func (gdClass ColorPickerButton) GetPicker() ColorPicker { return gdnative.Return[ColorPicker](gdnative.Object(gdClass), methodColorPickerButton[2]) }
func (gdClass ColorPickerButton) GetPopup() PopupPanel { return gdnative.Return[PopupPanel](gdnative.Object(gdClass), methodColorPickerButton[3]) }
func (gdClass ColorPickerButton) SetEditAlpha(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPickerButton[4], show) }
func (gdClass ColorPickerButton) IsEditingAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPickerButton[5]) }

type ColorRect gdnative.Object

var methodColorRect [2]gdnative.Method
func (gdClass ColorRect) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorRect[0], color) }
func (gdClass ColorRect) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorRect[1]) }

type CompressedCubemap gdnative.Object

var methodCompressedCubemap [0]gdnative.Method

type CompressedCubemapArray gdnative.Object

var methodCompressedCubemapArray [0]gdnative.Method

type CompressedTexture2D gdnative.Object

var methodCompressedTexture2D [2]gdnative.Method
func (gdClass CompressedTexture2D) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTexture2D[0], path) }
func (gdClass CompressedTexture2D) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTexture2D[1]) }

type CompressedTexture2DArray gdnative.Object

var methodCompressedTexture2DArray [0]gdnative.Method

type CompressedTexture3D gdnative.Object

var methodCompressedTexture3D [2]gdnative.Method
func (gdClass CompressedTexture3D) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTexture3D[0], path) }
func (gdClass CompressedTexture3D) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTexture3D[1]) }

type CompressedTextureLayered gdnative.Object

var methodCompressedTextureLayered [2]gdnative.Method
func (gdClass CompressedTextureLayered) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTextureLayered[0], path) }
func (gdClass CompressedTextureLayered) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTextureLayered[1]) }

type ConcavePolygonShape2D gdnative.Object

var methodConcavePolygonShape2D [2]gdnative.Method
func (gdClass ConcavePolygonShape2D) SetSegments(segments []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape2D[0], segments) }
func (gdClass ConcavePolygonShape2D) GetSegments() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodConcavePolygonShape2D[1]) }

type ConcavePolygonShape3D gdnative.Object

var methodConcavePolygonShape3D [4]gdnative.Method
func (gdClass ConcavePolygonShape3D) SetFaces(faces []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape3D[0], faces) }
func (gdClass ConcavePolygonShape3D) GetFaces() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodConcavePolygonShape3D[1]) }
func (gdClass ConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape3D[2], enabled) }
func (gdClass ConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConcavePolygonShape3D[3]) }

type ConeTwistJoint3D gdnative.Object

var methodConeTwistJoint3D [2]gdnative.Method

type ConeTwistJoint3DParam int64

const (
	ConeTwistJoint3DParamSwingSpan ConeTwistJoint3DParam = 0
	ConeTwistJoint3DParamTwistSpan ConeTwistJoint3DParam = 1
	ConeTwistJoint3DParamBias ConeTwistJoint3DParam = 2
	ConeTwistJoint3DParamSoftness ConeTwistJoint3DParam = 3
	ConeTwistJoint3DParamRelaxation ConeTwistJoint3DParam = 4
	ConeTwistJoint3DParamMax ConeTwistJoint3DParam = 5
)
func (gdClass ConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodConeTwistJoint3D[0], param, value) }
func (gdClass ConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodConeTwistJoint3D[1], param) }

type ConfigFile gdnative.Object

var methodConfigFile [16]gdnative.Method
func (gdClass ConfigFile) SetValue(section string, key string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[0], section, key, value) }
func (gdClass ConfigFile) GetValue(section string, key string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodConfigFile[1], section, key, def) }
func (gdClass ConfigFile) HasSection(section string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConfigFile[2], section) }
func (gdClass ConfigFile) HasSectionKey(section string, key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConfigFile[3], section, key) }
func (gdClass ConfigFile) GetSections() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodConfigFile[4]) }
func (gdClass ConfigFile) GetSectionKeys(section string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodConfigFile[5], section) }
func (gdClass ConfigFile) EraseSection(section string)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[6], section) }
func (gdClass ConfigFile) EraseSectionKey(section string, key string)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[7], section, key) }
func (gdClass ConfigFile) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[8], path) }
func (gdClass ConfigFile) Parse(data string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[9], data) }
func (gdClass ConfigFile) Save(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[10], path) }
func (gdClass ConfigFile) LoadEncrypted(path string, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[11], path, key) }
func (gdClass ConfigFile) LoadEncryptedPass(path string, password string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[12], path, password) }
func (gdClass ConfigFile) SaveEncrypted(path string, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[13], path, key) }
func (gdClass ConfigFile) SaveEncryptedPass(path string, password string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[14], path, password) }
func (gdClass ConfigFile) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[15]) }

type ConfirmationDialog gdnative.Object

var methodConfirmationDialog [3]gdnative.Method
func (gdClass ConfirmationDialog) GetCancelButton() Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodConfirmationDialog[0]) }
func (gdClass ConfirmationDialog) SetCancelButtonText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodConfirmationDialog[1], text) }
func (gdClass ConfirmationDialog) GetCancelButtonText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodConfirmationDialog[2]) }

type Container gdnative.Object

var methodContainer [4]gdnative.Method
func (gdClass Container) GetAllowedSizeFlagsHorizontalImplementation() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodContainer[0]) }
func (gdClass Container) GetAllowedSizeFlagsVerticalImplementation() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodContainer[1]) }
func (gdClass Container) QueueSort()  { gdnative.Call(gdnative.Object(gdClass), methodContainer[2]) }
func (gdClass Container) FitChildInRect(child Control, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodContainer[3], child, rect) }

type Control gdnative.Object

var methodControl [128]gdnative.Method

type ControlFocusMode int64

const (
	ControlFocusNone ControlFocusMode = 0
	ControlFocusClick ControlFocusMode = 1
	ControlFocusAll ControlFocusMode = 2
)

type ControlCursorShape int64

const (
	ControlCursorArrow ControlCursorShape = 0
	ControlCursorIbeam ControlCursorShape = 1
	ControlCursorPointingHand ControlCursorShape = 2
	ControlCursorCross ControlCursorShape = 3
	ControlCursorWait ControlCursorShape = 4
	ControlCursorBusy ControlCursorShape = 5
	ControlCursorDrag ControlCursorShape = 6
	ControlCursorCanDrop ControlCursorShape = 7
	ControlCursorForbidden ControlCursorShape = 8
	ControlCursorVsize ControlCursorShape = 9
	ControlCursorHsize ControlCursorShape = 10
	ControlCursorBdiagsize ControlCursorShape = 11
	ControlCursorFdiagsize ControlCursorShape = 12
	ControlCursorMove ControlCursorShape = 13
	ControlCursorVsplit ControlCursorShape = 14
	ControlCursorHsplit ControlCursorShape = 15
	ControlCursorHelp ControlCursorShape = 16
)

type ControlLayoutPreset int64

const (
	ControlPresetTopLeft ControlLayoutPreset = 0
	ControlPresetTopRight ControlLayoutPreset = 1
	ControlPresetBottomLeft ControlLayoutPreset = 2
	ControlPresetBottomRight ControlLayoutPreset = 3
	ControlPresetCenterLeft ControlLayoutPreset = 4
	ControlPresetCenterTop ControlLayoutPreset = 5
	ControlPresetCenterRight ControlLayoutPreset = 6
	ControlPresetCenterBottom ControlLayoutPreset = 7
	ControlPresetCenter ControlLayoutPreset = 8
	ControlPresetLeftWide ControlLayoutPreset = 9
	ControlPresetTopWide ControlLayoutPreset = 10
	ControlPresetRightWide ControlLayoutPreset = 11
	ControlPresetBottomWide ControlLayoutPreset = 12
	ControlPresetVcenterWide ControlLayoutPreset = 13
	ControlPresetHcenterWide ControlLayoutPreset = 14
	ControlPresetFullRect ControlLayoutPreset = 15
)

type ControlLayoutPresetMode int64

const (
	ControlPresetModeMinsize ControlLayoutPresetMode = 0
	ControlPresetModeKeepWidth ControlLayoutPresetMode = 1
	ControlPresetModeKeepHeight ControlLayoutPresetMode = 2
	ControlPresetModeKeepSize ControlLayoutPresetMode = 3
)

type ControlSizeFlags int64

const (
	ControlSizeShrinkBegin ControlSizeFlags = 0
	ControlSizeFill ControlSizeFlags = 1
	ControlSizeExpand ControlSizeFlags = 2
	ControlSizeExpandFill ControlSizeFlags = 3
	ControlSizeShrinkCenter ControlSizeFlags = 4
	ControlSizeShrinkEnd ControlSizeFlags = 8
)

type ControlMouseFilter int64

const (
	ControlMouseFilterStop ControlMouseFilter = 0
	ControlMouseFilterPass ControlMouseFilter = 1
	ControlMouseFilterIgnore ControlMouseFilter = 2
)

type ControlGrowDirection int64

const (
	ControlGrowDirectionBegin ControlGrowDirection = 0
	ControlGrowDirectionEnd ControlGrowDirection = 1
	ControlGrowDirectionBoth ControlGrowDirection = 2
)

type ControlAnchor int64

const (
	ControlAnchorBegin ControlAnchor = 0
	ControlAnchorEnd ControlAnchor = 1
)

type ControlLayoutDirection int64

const (
	ControlLayoutDirectionInherited ControlLayoutDirection = 0
	ControlLayoutDirectionLocale ControlLayoutDirection = 1
	ControlLayoutDirectionLtr ControlLayoutDirection = 2
	ControlLayoutDirectionRtl ControlLayoutDirection = 3
)

type ControlTextDirection int64

const (
	ControlTextDirectionInherited ControlTextDirection = 3
	ControlTextDirectionAuto ControlTextDirection = 0
	ControlTextDirectionLtr ControlTextDirection = 1
	ControlTextDirectionRtl ControlTextDirection = 2
)
func (gdClass Control) HasPointImplementation(position Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[0], position) }
func (gdClass Control) StructuredTextParserImplementation(args Array, text string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodControl[1], args, text) }
func (gdClass Control) GetMinimumSizeImplementation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[2]) }
func (gdClass Control) GetDragDataImplementation(at_position Vector2) any { return gdnative.Return[any](gdnative.Object(gdClass), methodControl[3], at_position) }
func (gdClass Control) CanDropDataImplementation(at_position Vector2, data any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[4], at_position, data) }
func (gdClass Control) DropDataImplementation(at_position Vector2, data any)  { gdnative.Call(gdnative.Object(gdClass), methodControl[5], at_position, data) }
func (gdClass Control) MakeCustomTooltipImplementation(for_text string) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodControl[6], for_text) }
func (gdClass Control) GuiInputImplementation(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodControl[7], event) }
func (gdClass Control) AcceptEvent()  { gdnative.Call(gdnative.Object(gdClass), methodControl[8]) }
func (gdClass Control) GetMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[9]) }
func (gdClass Control) GetCombinedMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[10]) }
func (gdClass Control) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[11], preset, keep_offsets) }
func (gdClass Control) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[12], preset, resize_mode, margin) }
func (gdClass Control) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[13], preset, resize_mode, margin) }
func (gdClass Control) SetAnchor(side Side, anchor float64, keep_offset bool, push_opposite_anchor bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[14], side, anchor, keep_offset, push_opposite_anchor) }
func (gdClass Control) GetAnchor(side Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[15], side) }
func (gdClass Control) SetOffset(side Side, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[16], side, offset) }
func (gdClass Control) GetOffset(offset Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[17], offset) }
func (gdClass Control) SetAnchorAndOffset(side Side, anchor float64, offset float64, push_opposite_anchor bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[18], side, anchor, offset, push_opposite_anchor) }
func (gdClass Control) SetBegin(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[19], position) }
func (gdClass Control) SetEnd(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[20], position) }
func (gdClass Control) SetPosition(position Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[21], position, keep_offsets) }
func (gdClass Control) SetSize(size Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[22], size, keep_offsets) }
func (gdClass Control) ResetSize()  { gdnative.Call(gdnative.Object(gdClass), methodControl[23]) }
func (gdClass Control) SetCustomMinimumSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[24], size) }
func (gdClass Control) SetGlobalPosition(position Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[25], position, keep_offsets) }
func (gdClass Control) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[26], radians) }
func (gdClass Control) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[27], scale) }
func (gdClass Control) SetPivotOffset(pivot_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[28], pivot_offset) }
func (gdClass Control) GetBegin() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[29]) }
func (gdClass Control) GetEnd() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[30]) }
func (gdClass Control) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[31]) }
func (gdClass Control) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[32]) }
func (gdClass Control) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[33]) }
func (gdClass Control) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[34]) }
func (gdClass Control) GetPivotOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[35]) }
func (gdClass Control) GetCustomMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[36]) }
func (gdClass Control) GetParentAreaSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[37]) }
func (gdClass Control) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[38]) }
func (gdClass Control) GetScreenPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[39]) }
func (gdClass Control) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodControl[40]) }
func (gdClass Control) GetGlobalRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodControl[41]) }
func (gdClass Control) SetFocusMode(mode ControlFocusMode)  { gdnative.Call(gdnative.Object(gdClass), methodControl[42], mode) }
func (gdClass Control) GetFocusMode() ControlFocusMode { return gdnative.Return[ControlFocusMode](gdnative.Object(gdClass), methodControl[43]) }
func (gdClass Control) HasFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[44]) }
func (gdClass Control) GrabFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[45]) }
func (gdClass Control) ReleaseFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[46]) }
func (gdClass Control) FindPrevValidFocus() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[47]) }
func (gdClass Control) FindNextValidFocus() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[48]) }
func (gdClass Control) SetHSizeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[49], flags) }
func (gdClass Control) GetHSizeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[50]) }
func (gdClass Control) SetStretchRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[51], ratio) }
func (gdClass Control) GetStretchRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[52]) }
func (gdClass Control) SetVSizeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[53], flags) }
func (gdClass Control) GetVSizeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[54]) }
func (gdClass Control) SetTheme(theme Theme)  { gdnative.Call(gdnative.Object(gdClass), methodControl[55], theme) }
func (gdClass Control) GetTheme() Theme { return gdnative.Return[Theme](gdnative.Object(gdClass), methodControl[56]) }
func (gdClass Control) SetThemeTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[57], theme_type) }
func (gdClass Control) GetThemeTypeVariation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodControl[58]) }
func (gdClass Control) BeginBulkThemeOverride()  { gdnative.Call(gdnative.Object(gdClass), methodControl[59]) }
func (gdClass Control) EndBulkThemeOverride()  { gdnative.Call(gdnative.Object(gdClass), methodControl[60]) }
func (gdClass Control) AddThemeIconOverride(name string, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodControl[61], name, texture) }
func (gdClass Control) AddThemeStyleboxOverride(name string, stylebox StyleBox)  { gdnative.Call(gdnative.Object(gdClass), methodControl[62], name, stylebox) }
func (gdClass Control) AddThemeFontOverride(name string, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodControl[63], name, font) }
func (gdClass Control) AddThemeFontSizeOverride(name string, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[64], name, font_size) }
func (gdClass Control) AddThemeColorOverride(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodControl[65], name, color) }
func (gdClass Control) AddThemeConstantOverride(name string, constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[66], name, constant) }
func (gdClass Control) RemoveThemeIconOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[67], name) }
func (gdClass Control) RemoveThemeStyleboxOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[68], name) }
func (gdClass Control) RemoveThemeFontOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[69], name) }
func (gdClass Control) RemoveThemeFontSizeOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[70], name) }
func (gdClass Control) RemoveThemeColorOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[71], name) }
func (gdClass Control) RemoveThemeConstantOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[72], name) }
func (gdClass Control) GetThemeIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodControl[73], name, theme_type) }
func (gdClass Control) GetThemeStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodControl[74], name, theme_type) }
func (gdClass Control) GetThemeFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodControl[75], name, theme_type) }
func (gdClass Control) GetThemeFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[76], name, theme_type) }
func (gdClass Control) GetThemeColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodControl[77], name, theme_type) }
func (gdClass Control) GetThemeConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[78], name, theme_type) }
func (gdClass Control) HasThemeIconOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[79], name) }
func (gdClass Control) HasThemeStyleboxOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[80], name) }
func (gdClass Control) HasThemeFontOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[81], name) }
func (gdClass Control) HasThemeFontSizeOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[82], name) }
func (gdClass Control) HasThemeColorOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[83], name) }
func (gdClass Control) HasThemeConstantOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[84], name) }
func (gdClass Control) HasThemeIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[85], name, theme_type) }
func (gdClass Control) HasThemeStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[86], name, theme_type) }
func (gdClass Control) HasThemeFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[87], name, theme_type) }
func (gdClass Control) HasThemeFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[88], name, theme_type) }
func (gdClass Control) HasThemeColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[89], name, theme_type) }
func (gdClass Control) HasThemeConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[90], name, theme_type) }
func (gdClass Control) GetThemeDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[91]) }
func (gdClass Control) GetThemeDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodControl[92]) }
func (gdClass Control) GetThemeDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[93]) }
func (gdClass Control) GetParentControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[94]) }
func (gdClass Control) SetHGrowDirection(direction ControlGrowDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[95], direction) }
func (gdClass Control) GetHGrowDirection() ControlGrowDirection { return gdnative.Return[ControlGrowDirection](gdnative.Object(gdClass), methodControl[96]) }
func (gdClass Control) SetVGrowDirection(direction ControlGrowDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[97], direction) }
func (gdClass Control) GetVGrowDirection() ControlGrowDirection { return gdnative.Return[ControlGrowDirection](gdnative.Object(gdClass), methodControl[98]) }
func (gdClass Control) SetTooltip(tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[99], tooltip) }
func (gdClass Control) GetTooltip(at_position Vector2) string { return gdnative.Return[string](gdnative.Object(gdClass), methodControl[100], at_position) }
func (gdClass Control) SetDefaultCursorShape(shape ControlCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodControl[101], shape) }
func (gdClass Control) GetDefaultCursorShape() ControlCursorShape { return gdnative.Return[ControlCursorShape](gdnative.Object(gdClass), methodControl[102]) }
func (gdClass Control) GetCursorShape(position Vector2) ControlCursorShape { return gdnative.Return[ControlCursorShape](gdnative.Object(gdClass), methodControl[103], position) }
func (gdClass Control) SetFocusNeighbor(side Side, neighbor NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[104], side, neighbor) }
func (gdClass Control) GetFocusNeighbor(side Side) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[105], side) }
func (gdClass Control) SetFocusNext(next NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[106], next) }
func (gdClass Control) GetFocusNext() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[107]) }
func (gdClass Control) SetFocusPrevious(previous NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[108], previous) }
func (gdClass Control) GetFocusPrevious() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[109]) }
func (gdClass Control) ForceDrag(data any, preview Control)  { gdnative.Call(gdnative.Object(gdClass), methodControl[110], data, preview) }
func (gdClass Control) SetMouseFilter(filter ControlMouseFilter)  { gdnative.Call(gdnative.Object(gdClass), methodControl[111], filter) }
func (gdClass Control) GetMouseFilter() ControlMouseFilter { return gdnative.Return[ControlMouseFilter](gdnative.Object(gdClass), methodControl[112]) }
func (gdClass Control) SetForcePassScrollEvents(force_pass_scroll_events bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[113], force_pass_scroll_events) }
func (gdClass Control) IsForcePassScrollEvents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[114]) }
func (gdClass Control) SetClipContents(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[115], enable) }
func (gdClass Control) IsClippingContents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[116]) }
func (gdClass Control) GrabClickFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[117]) }
func (gdClass Control) SetDragForwarding(target Object)  { gdnative.Call(gdnative.Object(gdClass), methodControl[118], target) }
func (gdClass Control) SetDragPreview(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodControl[119], control) }
func (gdClass Control) IsDragSuccessful() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[120]) }
func (gdClass Control) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[121], position) }
func (gdClass Control) UpdateMinimumSize()  { gdnative.Call(gdnative.Object(gdClass), methodControl[122]) }
func (gdClass Control) SetLayoutDirection(direction ControlLayoutDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[123], direction) }
func (gdClass Control) GetLayoutDirection() ControlLayoutDirection { return gdnative.Return[ControlLayoutDirection](gdnative.Object(gdClass), methodControl[124]) }
func (gdClass Control) IsLayoutRtl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[125]) }
func (gdClass Control) SetAutoTranslate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[126], enable) }
func (gdClass Control) IsAutoTranslating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[127]) }

type ConvexPolygonShape2D gdnative.Object

var methodConvexPolygonShape2D [3]gdnative.Method
func (gdClass ConvexPolygonShape2D) SetPointCloud(point_cloud []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape2D[0], point_cloud) }
func (gdClass ConvexPolygonShape2D) SetPoints(points []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape2D[1], points) }
func (gdClass ConvexPolygonShape2D) GetPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodConvexPolygonShape2D[2]) }

type ConvexPolygonShape3D gdnative.Object

var methodConvexPolygonShape3D [2]gdnative.Method
func (gdClass ConvexPolygonShape3D) SetPoints(points []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape3D[0], points) }
func (gdClass ConvexPolygonShape3D) GetPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodConvexPolygonShape3D[1]) }

type Crypto gdnative.Object

var methodCrypto [9]gdnative.Method
func (gdClass Crypto) GenerateRandomBytes(size int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[0], size) }
func (gdClass Crypto) GenerateRsa(size int64) CryptoKey { return gdnative.Return[CryptoKey](gdnative.Object(gdClass), methodCrypto[1], size) }
func (gdClass Crypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name string, not_before string, not_after string) X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodCrypto[2], key, issuer_name, not_before, not_after) }
func (gdClass Crypto) Sign(hash_type HashingContextHashType, hash []byte, key CryptoKey) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[3], hash_type, hash, key) }
func (gdClass Crypto) Verify(hash_type HashingContextHashType, hash []byte, signature []byte, key CryptoKey) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCrypto[4], hash_type, hash, signature, key) }
func (gdClass Crypto) Encrypt(key CryptoKey, plaintext []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[5], key, plaintext) }
func (gdClass Crypto) Decrypt(key CryptoKey, ciphertext []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[6], key, ciphertext) }
func (gdClass Crypto) HmacDigest(hash_type HashingContextHashType, key []byte, msg []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[7], hash_type, key, msg) }
func (gdClass Crypto) ConstantTimeCompare(trusted []byte, received []byte) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCrypto[8], trusted, received) }

type CryptoKey gdnative.Object

var methodCryptoKey [5]gdnative.Method
func (gdClass CryptoKey) Save(path string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[0], path, public_only) }
func (gdClass CryptoKey) Load(path string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[1], path, public_only) }
func (gdClass CryptoKey) IsPublicOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCryptoKey[2]) }
func (gdClass CryptoKey) SaveToString(public_only bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCryptoKey[3], public_only) }
func (gdClass CryptoKey) LoadFromString(string_key string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[4], string_key, public_only) }

type Cubemap gdnative.Object

var methodCubemap [0]gdnative.Method

type CubemapArray gdnative.Object

var methodCubemapArray [0]gdnative.Method

type Curve gdnative.Object

var methodCurve [26]gdnative.Method

type CurveTangentMode int64

const (
	CurveTangentFree CurveTangentMode = 0
	CurveTangentLinear CurveTangentMode = 1
	CurveTangentModeCount CurveTangentMode = 2
)
func (gdClass Curve) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[0]) }
func (gdClass Curve) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[1], count) }
func (gdClass Curve) AddPoint(position Vector2, left_tangent float64, right_tangent float64, left_mode CurveTangentMode, right_mode CurveTangentMode) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[2], position, left_tangent, right_tangent, left_mode, right_mode) }
func (gdClass Curve) RemovePoint(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[3], index) }
func (gdClass Curve) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[4]) }
func (gdClass Curve) GetPointPosition(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve[5], index) }
func (gdClass Curve) SetPointValue(index int64, y float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[6], index, y) }
func (gdClass Curve) SetPointOffset(index int64, offset float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[7], index, offset) }
func (gdClass Curve) Interpolate(offset float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[8], offset) }
func (gdClass Curve) InterpolateBaked(offset float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[9], offset) }
func (gdClass Curve) GetPointLeftTangent(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[10], index) }
func (gdClass Curve) GetPointRightTangent(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[11], index) }
func (gdClass Curve) GetPointLeftMode(index int64) CurveTangentMode { return gdnative.Return[CurveTangentMode](gdnative.Object(gdClass), methodCurve[12], index) }
func (gdClass Curve) GetPointRightMode(index int64) CurveTangentMode { return gdnative.Return[CurveTangentMode](gdnative.Object(gdClass), methodCurve[13], index) }
func (gdClass Curve) SetPointLeftTangent(index int64, tangent float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[14], index, tangent) }
func (gdClass Curve) SetPointRightTangent(index int64, tangent float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[15], index, tangent) }
func (gdClass Curve) SetPointLeftMode(index int64, mode CurveTangentMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[16], index, mode) }
func (gdClass Curve) SetPointRightMode(index int64, mode CurveTangentMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[17], index, mode) }
func (gdClass Curve) GetMinValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[18]) }
func (gdClass Curve) SetMinValue(min float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[19], min) }
func (gdClass Curve) GetMaxValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[20]) }
func (gdClass Curve) SetMaxValue(max float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[21], max) }
func (gdClass Curve) CleanDupes()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[22]) }
func (gdClass Curve) Bake()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[23]) }
func (gdClass Curve) GetBakeResolution() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[24]) }
func (gdClass Curve) SetBakeResolution(resolution int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[25], resolution) }

type Curve2D gdnative.Object

var methodCurve2D [21]gdnative.Method
func (gdClass Curve2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve2D[0]) }
func (gdClass Curve2D) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[1], count) }
func (gdClass Curve2D) AddPoint(position Vector2, in Vector2, out Vector2, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[2], position, in, out, at_position) }
func (gdClass Curve2D) SetPointPosition(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[3], idx, position) }
func (gdClass Curve2D) GetPointPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[4], idx) }
func (gdClass Curve2D) SetPointIn(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[5], idx, position) }
func (gdClass Curve2D) GetPointIn(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[6], idx) }
func (gdClass Curve2D) SetPointOut(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[7], idx, position) }
func (gdClass Curve2D) GetPointOut(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[8], idx) }
func (gdClass Curve2D) RemovePoint(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[9], idx) }
func (gdClass Curve2D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[10]) }
func (gdClass Curve2D) Interpolate(idx int64, t float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[11], idx, t) }
func (gdClass Curve2D) Interpolatef(fofs float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[12], fofs) }
func (gdClass Curve2D) SetBakeInterval(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[13], distance) }
func (gdClass Curve2D) GetBakeInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[14]) }
func (gdClass Curve2D) GetBakedLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[15]) }
func (gdClass Curve2D) InterpolateBaked(offset float64, cubic bool) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[16], offset, cubic) }
func (gdClass Curve2D) GetBakedPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCurve2D[17]) }
func (gdClass Curve2D) GetClosestPoint(to_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[18], to_point) }
func (gdClass Curve2D) GetClosestOffset(to_point Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[19], to_point) }
func (gdClass Curve2D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCurve2D[20], max_stages, tolerance_degrees) }

type Curve3D gdnative.Object

var methodCurve3D [28]gdnative.Method
func (gdClass Curve3D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve3D[0]) }
func (gdClass Curve3D) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[1], count) }
func (gdClass Curve3D) AddPoint(position Vector3, in Vector3, out Vector3, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[2], position, in, out, at_position) }
func (gdClass Curve3D) SetPointPosition(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[3], idx, position) }
func (gdClass Curve3D) GetPointPosition(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[4], idx) }
func (gdClass Curve3D) SetPointTilt(idx int64, tilt float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[5], idx, tilt) }
func (gdClass Curve3D) GetPointTilt(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[6], idx) }
func (gdClass Curve3D) SetPointIn(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[7], idx, position) }
func (gdClass Curve3D) GetPointIn(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[8], idx) }
func (gdClass Curve3D) SetPointOut(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[9], idx, position) }
func (gdClass Curve3D) GetPointOut(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[10], idx) }
func (gdClass Curve3D) RemovePoint(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[11], idx) }
func (gdClass Curve3D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[12]) }
func (gdClass Curve3D) Interpolate(idx int64, t float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[13], idx, t) }
func (gdClass Curve3D) Interpolatef(fofs float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[14], fofs) }
func (gdClass Curve3D) SetBakeInterval(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[15], distance) }
func (gdClass Curve3D) GetBakeInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[16]) }
func (gdClass Curve3D) SetUpVectorEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[17], enable) }
func (gdClass Curve3D) IsUpVectorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCurve3D[18]) }
func (gdClass Curve3D) GetBakedLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[19]) }
func (gdClass Curve3D) InterpolateBaked(offset float64, cubic bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[20], offset, cubic) }
func (gdClass Curve3D) InterpolateBakedUpVector(offset float64, apply_tilt bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[21], offset, apply_tilt) }
func (gdClass Curve3D) GetBakedPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[22]) }
func (gdClass Curve3D) GetBakedTilts() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodCurve3D[23]) }
func (gdClass Curve3D) GetBakedUpVectors() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[24]) }
func (gdClass Curve3D) GetClosestPoint(to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[25], to_point) }
func (gdClass Curve3D) GetClosestOffset(to_point Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[26], to_point) }
func (gdClass Curve3D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[27], max_stages, tolerance_degrees) }

type CurveTexture gdnative.Object

var methodCurveTexture [5]gdnative.Method

type CurveTextureTextureMode int64

const (
	CurveTextureTextureModeRgb CurveTextureTextureMode = 0
	CurveTextureTextureModeRed CurveTextureTextureMode = 1
)
func (gdClass CurveTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[0], width) }
func (gdClass CurveTexture) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[1], curve) }
func (gdClass CurveTexture) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveTexture[2]) }
func (gdClass CurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[3], texture_mode) }
func (gdClass CurveTexture) GetTextureMode() CurveTextureTextureMode { return gdnative.Return[CurveTextureTextureMode](gdnative.Object(gdClass), methodCurveTexture[4]) }

type CurveXYZTexture gdnative.Object

var methodCurveXYZTexture [7]gdnative.Method
func (gdClass CurveXYZTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[0], width) }
func (gdClass CurveXYZTexture) SetCurveX(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[1], curve) }
func (gdClass CurveXYZTexture) GetCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[2]) }
func (gdClass CurveXYZTexture) SetCurveY(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[3], curve) }
func (gdClass CurveXYZTexture) GetCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[4]) }
func (gdClass CurveXYZTexture) SetCurveZ(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[5], curve) }
func (gdClass CurveXYZTexture) GetCurveZ() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[6]) }

type CylinderMesh gdnative.Object

var methodCylinderMesh [14]gdnative.Method
func (gdClass CylinderMesh) SetTopRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[0], radius) }
func (gdClass CylinderMesh) GetTopRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[1]) }
func (gdClass CylinderMesh) SetBottomRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[2], radius) }
func (gdClass CylinderMesh) GetBottomRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[3]) }
func (gdClass CylinderMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[4], height) }
func (gdClass CylinderMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[5]) }
func (gdClass CylinderMesh) SetRadialSegments(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[6], segments) }
func (gdClass CylinderMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCylinderMesh[7]) }
func (gdClass CylinderMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[8], rings) }
func (gdClass CylinderMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCylinderMesh[9]) }
func (gdClass CylinderMesh) SetCapTop(cap_top bool)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[10], cap_top) }
func (gdClass CylinderMesh) IsCapTop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCylinderMesh[11]) }
func (gdClass CylinderMesh) SetCapBottom(cap_bottom bool)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[12], cap_bottom) }
func (gdClass CylinderMesh) IsCapBottom() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCylinderMesh[13]) }

type CylinderShape3D gdnative.Object

var methodCylinderShape3D [4]gdnative.Method
func (gdClass CylinderShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderShape3D[0], radius) }
func (gdClass CylinderShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderShape3D[1]) }
func (gdClass CylinderShape3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderShape3D[2], height) }
func (gdClass CylinderShape3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderShape3D[3]) }

type DTLSServer gdnative.Object

var methodDTLSServer [2]gdnative.Method
func (gdClass DTLSServer) Setup(key CryptoKey, certificate X509Certificate, chain X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDTLSServer[0], key, certificate, chain) }
func (gdClass DTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS { return gdnative.Return[PacketPeerDTLS](gdnative.Object(gdClass), methodDTLSServer[1], udp_peer) }

type DampedSpringJoint2D gdnative.Object

var methodDampedSpringJoint2D [8]gdnative.Method
func (gdClass DampedSpringJoint2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[0], length) }
func (gdClass DampedSpringJoint2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[1]) }
func (gdClass DampedSpringJoint2D) SetRestLength(rest_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[2], rest_length) }
func (gdClass DampedSpringJoint2D) GetRestLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[3]) }
func (gdClass DampedSpringJoint2D) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[4], stiffness) }
func (gdClass DampedSpringJoint2D) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[5]) }
func (gdClass DampedSpringJoint2D) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[6], damping) }
func (gdClass DampedSpringJoint2D) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[7]) }

type Decal gdnative.Object

var methodDecal [24]gdnative.Method

type DecalDecalTexture int64

const (
	DecalTextureAlbedo DecalDecalTexture = 0
	DecalTextureNormal DecalDecalTexture = 1
	DecalTextureOrm DecalDecalTexture = 2
	DecalTextureEmission DecalDecalTexture = 3
	DecalTextureMax DecalDecalTexture = 4
)
func (gdClass Decal) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[0], extents) }
func (gdClass Decal) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodDecal[1]) }
func (gdClass Decal) SetTexture(atype DecalDecalTexture, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[2], atype, texture) }
func (gdClass Decal) GetTexture(atype DecalDecalTexture) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodDecal[3], atype) }
func (gdClass Decal) SetEmissionEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[4], energy) }
func (gdClass Decal) GetEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[5]) }
func (gdClass Decal) SetAlbedoMix(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[6], energy) }
func (gdClass Decal) GetAlbedoMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[7]) }
func (gdClass Decal) SetModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[8], color) }
func (gdClass Decal) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodDecal[9]) }
func (gdClass Decal) SetUpperFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[10], fade) }
func (gdClass Decal) GetUpperFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[11]) }
func (gdClass Decal) SetLowerFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[12], fade) }
func (gdClass Decal) GetLowerFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[13]) }
func (gdClass Decal) SetNormalFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[14], fade) }
func (gdClass Decal) GetNormalFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[15]) }
func (gdClass Decal) SetEnableDistanceFade(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[16], enable) }
func (gdClass Decal) IsDistanceFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDecal[17]) }
func (gdClass Decal) SetDistanceFadeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[18], distance) }
func (gdClass Decal) GetDistanceFadeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[19]) }
func (gdClass Decal) SetDistanceFadeLength(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[20], distance) }
func (gdClass Decal) GetDistanceFadeLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[21]) }
func (gdClass Decal) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[22], mask) }
func (gdClass Decal) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDecal[23]) }

type DirectionalLight2D gdnative.Object

var methodDirectionalLight2D [2]gdnative.Method
func (gdClass DirectionalLight2D) SetMaxDistance(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight2D[0], pixels) }
func (gdClass DirectionalLight2D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDirectionalLight2D[1]) }

type DirectionalLight3D gdnative.Object

var methodDirectionalLight3D [6]gdnative.Method

type DirectionalLight3DShadowMode int64

const (
	DirectionalLight3DShadowOrthogonal DirectionalLight3DShadowMode = 0
	DirectionalLight3DShadowParallel2Splits DirectionalLight3DShadowMode = 1
	DirectionalLight3DShadowParallel4Splits DirectionalLight3DShadowMode = 2
)

type DirectionalLight3DSkyMode int64

const (
	DirectionalLight3DSkyModeLightAndSky DirectionalLight3DSkyMode = 0
	DirectionalLight3DSkyModeLightOnly DirectionalLight3DSkyMode = 1
	DirectionalLight3DSkyModeSkyOnly DirectionalLight3DSkyMode = 2
)
func (gdClass DirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[0], mode) }
func (gdClass DirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode { return gdnative.Return[DirectionalLight3DShadowMode](gdnative.Object(gdClass), methodDirectionalLight3D[1]) }
func (gdClass DirectionalLight3D) SetBlendSplits(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[2], enabled) }
func (gdClass DirectionalLight3D) IsBlendSplitsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectionalLight3D[3]) }
func (gdClass DirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[4], mode) }
func (gdClass DirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode { return gdnative.Return[DirectionalLight3DSkyMode](gdnative.Object(gdClass), methodDirectionalLight3D[5]) }

type Directory gdnative.Object

var methodDirectory [24]gdnative.Method
func (gdClass Directory) Open(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[0], path) }
func (gdClass Directory) ListDirBegin() error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[1]) }
func (gdClass Directory) GetNext() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[2]) }
func (gdClass Directory) CurrentIsDir() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[3]) }
func (gdClass Directory) ListDirEnd()  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[4]) }
func (gdClass Directory) GetFiles() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDirectory[5]) }
func (gdClass Directory) GetDirectories() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDirectory[6]) }
func (gdClass Directory) GetDriveCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[7]) }
func (gdClass Directory) GetDrive(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[8], idx) }
func (gdClass Directory) GetCurrentDrive() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[9]) }
func (gdClass Directory) ChangeDir(todir string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[10], todir) }
func (gdClass Directory) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[11]) }
func (gdClass Directory) MakeDir(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[12], path) }
func (gdClass Directory) MakeDirRecursive(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[13], path) }
func (gdClass Directory) FileExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[14], path) }
func (gdClass Directory) DirExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[15], path) }
func (gdClass Directory) GetSpaceLeft() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[16]) }
func (gdClass Directory) Copy(from string, to string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[17], from, to) }
func (gdClass Directory) Rename(from string, to string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[18], from, to) }
func (gdClass Directory) Remove(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[19], path) }
func (gdClass Directory) SetIncludeNavigational(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[20], enable) }
func (gdClass Directory) GetIncludeNavigational() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[21]) }
func (gdClass Directory) SetIncludeHidden(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[22], enable) }
func (gdClass Directory) GetIncludeHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[23]) }

type DisplayServer gdnative.Object

var methodDisplayServer [142]gdnative.Method

type DisplayServerFeature int64

const (
	DisplayServerFeatureGlobalMenu DisplayServerFeature = 0
	DisplayServerFeatureSubwindows DisplayServerFeature = 1
	DisplayServerFeatureTouchscreen DisplayServerFeature = 2
	DisplayServerFeatureMouse DisplayServerFeature = 3
	DisplayServerFeatureMouseWarp DisplayServerFeature = 4
	DisplayServerFeatureClipboard DisplayServerFeature = 5
	DisplayServerFeatureVirtualKeyboard DisplayServerFeature = 6
	DisplayServerFeatureCursorShape DisplayServerFeature = 7
	DisplayServerFeatureCustomCursorShape DisplayServerFeature = 8
	DisplayServerFeatureNativeDialog DisplayServerFeature = 9
	DisplayServerFeatureIme DisplayServerFeature = 10
	DisplayServerFeatureWindowTransparency DisplayServerFeature = 11
	DisplayServerFeatureHidpi DisplayServerFeature = 12
	DisplayServerFeatureIcon DisplayServerFeature = 13
	DisplayServerFeatureNativeIcon DisplayServerFeature = 14
	DisplayServerFeatureOrientation DisplayServerFeature = 15
	DisplayServerFeatureSwapBuffers DisplayServerFeature = 16
	DisplayServerFeatureClipboardPrimary DisplayServerFeature = 18
	DisplayServerFeatureTextToSpeech DisplayServerFeature = 19
)

type DisplayServerMouseMode int64

const (
	DisplayServerMouseModeVisible DisplayServerMouseMode = 0
	DisplayServerMouseModeHidden DisplayServerMouseMode = 1
	DisplayServerMouseModeCaptured DisplayServerMouseMode = 2
	DisplayServerMouseModeConfined DisplayServerMouseMode = 3
	DisplayServerMouseModeConfinedHidden DisplayServerMouseMode = 4
)

type DisplayServerScreenOrientation int64

const (
	DisplayServerScreenLandscape DisplayServerScreenOrientation = 0
	DisplayServerScreenPortrait DisplayServerScreenOrientation = 1
	DisplayServerScreenReverseLandscape DisplayServerScreenOrientation = 2
	DisplayServerScreenReversePortrait DisplayServerScreenOrientation = 3
	DisplayServerScreenSensorLandscape DisplayServerScreenOrientation = 4
	DisplayServerScreenSensorPortrait DisplayServerScreenOrientation = 5
	DisplayServerScreenSensor DisplayServerScreenOrientation = 6
)

type DisplayServerVirtualKeyboardType int64

const (
	DisplayServerKeyboardTypeDefault DisplayServerVirtualKeyboardType = 0
	DisplayServerKeyboardTypeMultiline DisplayServerVirtualKeyboardType = 1
	DisplayServerKeyboardTypeNumber DisplayServerVirtualKeyboardType = 2
	DisplayServerKeyboardTypeNumberDecimal DisplayServerVirtualKeyboardType = 3
	DisplayServerKeyboardTypePhone DisplayServerVirtualKeyboardType = 4
	DisplayServerKeyboardTypeEmailAddress DisplayServerVirtualKeyboardType = 5
	DisplayServerKeyboardTypePassword DisplayServerVirtualKeyboardType = 6
	DisplayServerKeyboardTypeUrl DisplayServerVirtualKeyboardType = 7
)

type DisplayServerCursorShape int64

const (
	DisplayServerCursorArrow DisplayServerCursorShape = 0
	DisplayServerCursorIbeam DisplayServerCursorShape = 1
	DisplayServerCursorPointingHand DisplayServerCursorShape = 2
	DisplayServerCursorCross DisplayServerCursorShape = 3
	DisplayServerCursorWait DisplayServerCursorShape = 4
	DisplayServerCursorBusy DisplayServerCursorShape = 5
	DisplayServerCursorDrag DisplayServerCursorShape = 6
	DisplayServerCursorCanDrop DisplayServerCursorShape = 7
	DisplayServerCursorForbidden DisplayServerCursorShape = 8
	DisplayServerCursorVsize DisplayServerCursorShape = 9
	DisplayServerCursorHsize DisplayServerCursorShape = 10
	DisplayServerCursorBdiagsize DisplayServerCursorShape = 11
	DisplayServerCursorFdiagsize DisplayServerCursorShape = 12
	DisplayServerCursorMove DisplayServerCursorShape = 13
	DisplayServerCursorVsplit DisplayServerCursorShape = 14
	DisplayServerCursorHsplit DisplayServerCursorShape = 15
	DisplayServerCursorHelp DisplayServerCursorShape = 16
	DisplayServerCursorMax DisplayServerCursorShape = 17
)

type DisplayServerWindowMode int64

const (
	DisplayServerWindowModeWindowed DisplayServerWindowMode = 0
	DisplayServerWindowModeMinimized DisplayServerWindowMode = 1
	DisplayServerWindowModeMaximized DisplayServerWindowMode = 2
	DisplayServerWindowModeFullscreen DisplayServerWindowMode = 3
	DisplayServerWindowModeExclusiveFullscreen DisplayServerWindowMode = 4
)

type DisplayServerWindowFlags int64

const (
	DisplayServerWindowFlagResizeDisabled DisplayServerWindowFlags = 0
	DisplayServerWindowFlagBorderless DisplayServerWindowFlags = 1
	DisplayServerWindowFlagAlwaysOnTop DisplayServerWindowFlags = 2
	DisplayServerWindowFlagTransparent DisplayServerWindowFlags = 3
	DisplayServerWindowFlagNoFocus DisplayServerWindowFlags = 4
	DisplayServerWindowFlagPopup DisplayServerWindowFlags = 5
	DisplayServerWindowFlagMax DisplayServerWindowFlags = 6
)

type DisplayServerWindowEvent int64

const (
	DisplayServerWindowEventMouseEnter DisplayServerWindowEvent = 0
	DisplayServerWindowEventMouseExit DisplayServerWindowEvent = 1
	DisplayServerWindowEventFocusIn DisplayServerWindowEvent = 2
	DisplayServerWindowEventFocusOut DisplayServerWindowEvent = 3
	DisplayServerWindowEventCloseRequest DisplayServerWindowEvent = 4
	DisplayServerWindowEventGoBackRequest DisplayServerWindowEvent = 5
	DisplayServerWindowEventDpiChange DisplayServerWindowEvent = 6
)

type DisplayServerVSyncMode int64

const (
	DisplayServerVsyncDisabled DisplayServerVSyncMode = 0
	DisplayServerVsyncEnabled DisplayServerVSyncMode = 1
	DisplayServerVsyncAdaptive DisplayServerVSyncMode = 2
	DisplayServerVsyncMailbox DisplayServerVSyncMode = 3
)

type DisplayServerHandleType int64

const (
	DisplayServerDisplayHandle DisplayServerHandleType = 0
	DisplayServerWindowHandle DisplayServerHandleType = 1
	DisplayServerWindowView DisplayServerHandleType = 2
)

type DisplayServerTTSUtteranceEvent int64

const (
	DisplayServerTtsUtteranceStarted DisplayServerTTSUtteranceEvent = 0
	DisplayServerTtsUtteranceEnded DisplayServerTTSUtteranceEvent = 1
	DisplayServerTtsUtteranceCanceled DisplayServerTTSUtteranceEvent = 2
	DisplayServerTtsUtteranceBoundary DisplayServerTTSUtteranceEvent = 3
)
func (gdClass DisplayServer) HasFeature(feature DisplayServerFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[0], feature) }
func (gdClass DisplayServer) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[1]) }
func (gdClass DisplayServer) GlobalMenuAddItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[2], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[3], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[4], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[5], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddRadioCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[6], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconRadioCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[7], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddMultistateItem(menu_root string, labe string, max_states int64, default_state int64, callback Callable, tag any, accelerator Key, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[8], menu_root, labe, max_states, default_state, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddSubmenuItem(menu_root string, label string, submenu string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[9], menu_root, label, submenu, index) }
func (gdClass DisplayServer) GlobalMenuAddSeparator(menu_root string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[10], menu_root, index) }
func (gdClass DisplayServer) GlobalMenuGetItemIndexFromText(menu_root string, text string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[11], menu_root, text) }
func (gdClass DisplayServer) GlobalMenuGetItemIndexFromTag(menu_root string, tag any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[12], menu_root, tag) }
func (gdClass DisplayServer) GlobalMenuIsItemChecked(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[13], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemCheckable(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[14], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemRadioCheckable(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[15], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemCallback(menu_root string, idx int64) Callable { return gdnative.Return[Callable](gdnative.Object(gdClass), methodDisplayServer[16], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemTag(menu_root string, idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodDisplayServer[17], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemText(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[18], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemSubmenu(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[19], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemAccelerator(menu_root string, idx int64) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodDisplayServer[20], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemDisabled(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[21], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemTooltip(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[22], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemState(menu_root string, idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[23], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemMaxStates(menu_root string, idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[24], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemIcon(menu_root string, idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodDisplayServer[25], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuSetItemChecked(menu_root string, idx int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[26], menu_root, idx, checked) }
func (gdClass DisplayServer) GlobalMenuSetItemCheckable(menu_root string, idx int64, checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[27], menu_root, idx, checkable) }
func (gdClass DisplayServer) GlobalMenuSetItemRadioCheckable(menu_root string, idx int64, checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[28], menu_root, idx, checkable) }
func (gdClass DisplayServer) GlobalMenuSetItemCallback(menu_root string, idx int64, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[29], menu_root, idx, callback) }
func (gdClass DisplayServer) GlobalMenuSetItemTag(menu_root string, idx int64, tag any)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[30], menu_root, idx, tag) }
func (gdClass DisplayServer) GlobalMenuSetItemText(menu_root string, idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[31], menu_root, idx, text) }
func (gdClass DisplayServer) GlobalMenuSetItemSubmenu(menu_root string, idx int64, submenu string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[32], menu_root, idx, submenu) }
func (gdClass DisplayServer) GlobalMenuSetItemAccelerator(menu_root string, idx int64, keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[33], menu_root, idx, keycode) }
func (gdClass DisplayServer) GlobalMenuSetItemDisabled(menu_root string, idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[34], menu_root, idx, disabled) }
func (gdClass DisplayServer) GlobalMenuSetItemTooltip(menu_root string, idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[35], menu_root, idx, tooltip) }
func (gdClass DisplayServer) GlobalMenuSetItemState(menu_root string, idx int64, state int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[36], menu_root, idx, state) }
func (gdClass DisplayServer) GlobalMenuSetItemMaxStates(menu_root string, idx int64, max_states int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[37], menu_root, idx, max_states) }
func (gdClass DisplayServer) GlobalMenuSetItemIcon(menu_root string, idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[38], menu_root, idx, icon) }
func (gdClass DisplayServer) GlobalMenuRemoveItem(menu_root string, idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[39], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuClear(menu_root string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[40], menu_root) }
func (gdClass DisplayServer) TtsIsSpeaking() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[41]) }
func (gdClass DisplayServer) TtsIsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[42]) }
func (gdClass DisplayServer) TtsGetVoices() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodDisplayServer[43]) }
func (gdClass DisplayServer) TtsGetVoicesForLanguage(language string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDisplayServer[44], language) }
func (gdClass DisplayServer) TtsSpeak(text string, voice string, volume int64, pitch float64, rate float64, utterance_id int64, interrupt bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[45], text, voice, volume, pitch, rate, utterance_id, interrupt) }
func (gdClass DisplayServer) TtsPause()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[46]) }
func (gdClass DisplayServer) TtsResume()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[47]) }
func (gdClass DisplayServer) TtsStop()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[48]) }
func (gdClass DisplayServer) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[49], event, callable) }
func (gdClass DisplayServer) MouseSetMode(mouse_mode DisplayServerMouseMode)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[50], mouse_mode) }
func (gdClass DisplayServer) MouseGetMode() DisplayServerMouseMode { return gdnative.Return[DisplayServerMouseMode](gdnative.Object(gdClass), methodDisplayServer[51]) }
func (gdClass DisplayServer) WarpMouse(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[52], position) }
func (gdClass DisplayServer) MouseGetPosition() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[53]) }
func (gdClass DisplayServer) MouseGetButtonState() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodDisplayServer[54]) }
func (gdClass DisplayServer) ClipboardSet(clipboard string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[55], clipboard) }
func (gdClass DisplayServer) ClipboardGet() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[56]) }
func (gdClass DisplayServer) ClipboardHas() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[57]) }
func (gdClass DisplayServer) ClipboardSetPrimary(clipboard_primary string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[58], clipboard_primary) }
func (gdClass DisplayServer) ClipboardGetPrimary() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[59]) }
func (gdClass DisplayServer) GetDisplayCutouts() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodDisplayServer[60]) }
func (gdClass DisplayServer) GetDisplaySafeArea() Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[61]) }
func (gdClass DisplayServer) GetScreenCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[62]) }
func (gdClass DisplayServer) ScreenGetPosition(screen int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[63], screen) }
func (gdClass DisplayServer) ScreenGetSize(screen int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[64], screen) }
func (gdClass DisplayServer) ScreenGetUsableRect(screen int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[65], screen) }
func (gdClass DisplayServer) ScreenGetDpi(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[66], screen) }
func (gdClass DisplayServer) ScreenGetScale(screen int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[67], screen) }
func (gdClass DisplayServer) ScreenIsTouchscreen(screen int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[68], screen) }
func (gdClass DisplayServer) ScreenGetMaxScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[69]) }
func (gdClass DisplayServer) ScreenGetRefreshRate(screen int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[70], screen) }
func (gdClass DisplayServer) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[71], orientation, screen) }
func (gdClass DisplayServer) ScreenGetOrientation(screen int64) DisplayServerScreenOrientation { return gdnative.Return[DisplayServerScreenOrientation](gdnative.Object(gdClass), methodDisplayServer[72], screen) }
func (gdClass DisplayServer) ScreenSetKeepOn(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[73], enable) }
func (gdClass DisplayServer) ScreenIsKeptOn() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[74]) }
func (gdClass DisplayServer) GetWindowList() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodDisplayServer[75]) }
func (gdClass DisplayServer) GetWindowAtScreenPosition(position Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[76], position) }
func (gdClass DisplayServer) CreateSubWindow(mode DisplayServerWindowMode, vsync_mode DisplayServerVSyncMode, flags int64, rect Rect2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[77], mode, vsync_mode, flags, rect) }
func (gdClass DisplayServer) DeleteSubWindow(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[78], window_id) }
func (gdClass DisplayServer) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[79], handle_type, window_id) }
func (gdClass DisplayServer) WindowGetActivePopup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[80]) }
func (gdClass DisplayServer) WindowSetPopupSafeRect(window int64, rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[81], window, rect) }
func (gdClass DisplayServer) WindowGetPopupSafeRect(window int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[82], window) }
func (gdClass DisplayServer) WindowSetTitle(title string, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[83], title, window_id) }
func (gdClass DisplayServer) WindowSetMousePassthrough(region []Vector2, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[84], region, window_id) }
func (gdClass DisplayServer) WindowGetCurrentScreen(window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[85], window_id) }
func (gdClass DisplayServer) WindowSetCurrentScreen(screen int64, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[86], screen, window_id) }
func (gdClass DisplayServer) WindowGetPosition(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[87], window_id) }
func (gdClass DisplayServer) WindowSetPosition(position Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[88], position, window_id) }
func (gdClass DisplayServer) WindowGetSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[89], window_id) }
func (gdClass DisplayServer) WindowSetSize(size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[90], size, window_id) }
func (gdClass DisplayServer) WindowSetRectChangedCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[91], callback, window_id) }
func (gdClass DisplayServer) WindowSetWindowEventCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[92], callback, window_id) }
func (gdClass DisplayServer) WindowSetInputEventCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[93], callback, window_id) }
func (gdClass DisplayServer) WindowSetInputTextCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[94], callback, window_id) }
func (gdClass DisplayServer) WindowSetDropFilesCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[95], callback, window_id) }
func (gdClass DisplayServer) WindowAttachInstanceId(instance_id int64, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[96], instance_id, window_id) }
func (gdClass DisplayServer) WindowGetAttachedInstanceId(window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[97], window_id) }
func (gdClass DisplayServer) WindowGetMaxSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[98], window_id) }
func (gdClass DisplayServer) WindowSetMaxSize(max_size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[99], max_size, window_id) }
func (gdClass DisplayServer) WindowGetMinSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[100], window_id) }
func (gdClass DisplayServer) WindowSetMinSize(min_size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[101], min_size, window_id) }
func (gdClass DisplayServer) WindowGetRealSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[102], window_id) }
func (gdClass DisplayServer) WindowGetMode(window_id int64) DisplayServerWindowMode { return gdnative.Return[DisplayServerWindowMode](gdnative.Object(gdClass), methodDisplayServer[103], window_id) }
func (gdClass DisplayServer) WindowSetMode(mode DisplayServerWindowMode, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[104], mode, window_id) }
func (gdClass DisplayServer) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[105], flag, enabled, window_id) }
func (gdClass DisplayServer) WindowGetFlag(flag DisplayServerWindowFlags, window_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[106], flag, window_id) }
func (gdClass DisplayServer) WindowRequestAttention(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[107], window_id) }
func (gdClass DisplayServer) WindowMoveToForeground(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[108], window_id) }
func (gdClass DisplayServer) WindowCanDraw(window_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[109], window_id) }
func (gdClass DisplayServer) WindowSetTransient(window_id int64, parent_window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[110], window_id, parent_window_id) }
func (gdClass DisplayServer) WindowSetExclusive(window_id int64, exclusive bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[111], window_id, exclusive) }
func (gdClass DisplayServer) WindowSetImeActive(active bool, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[112], active, window_id) }
func (gdClass DisplayServer) WindowSetImePosition(position Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[113], position, window_id) }
func (gdClass DisplayServer) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[114], vsync_mode, window_id) }
func (gdClass DisplayServer) WindowGetVsyncMode(window_id int64) DisplayServerVSyncMode { return gdnative.Return[DisplayServerVSyncMode](gdnative.Object(gdClass), methodDisplayServer[115], window_id) }
func (gdClass DisplayServer) ImeGetSelection() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[116]) }
func (gdClass DisplayServer) ImeGetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[117]) }
func (gdClass DisplayServer) VirtualKeyboardShow(existing_text string, position Rect2, atype DisplayServerVirtualKeyboardType, max_length int64, cursor_start int64, cursor_end int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[118], existing_text, position, atype, max_length, cursor_start, cursor_end) }
func (gdClass DisplayServer) VirtualKeyboardHide()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[119]) }
func (gdClass DisplayServer) VirtualKeyboardGetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[120]) }
func (gdClass DisplayServer) CursorSetShape(shape DisplayServerCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[121], shape) }
func (gdClass DisplayServer) CursorGetShape() DisplayServerCursorShape { return gdnative.Return[DisplayServerCursorShape](gdnative.Object(gdClass), methodDisplayServer[122]) }
func (gdClass DisplayServer) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[123], cursor, shape, hotspot) }
func (gdClass DisplayServer) GetSwapCancelOk() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[124]) }
func (gdClass DisplayServer) EnableForStealingFocus(process_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[125], process_id) }
func (gdClass DisplayServer) DialogShow(title string, description string, buttons []string, callback Callable) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDisplayServer[126], title, description, buttons, callback) }
func (gdClass DisplayServer) DialogInputText(title string, description string, existing_text string, callback Callable) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDisplayServer[127], title, description, existing_text, callback) }
func (gdClass DisplayServer) KeyboardGetLayoutCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[128]) }
func (gdClass DisplayServer) KeyboardGetCurrentLayout() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[129]) }
func (gdClass DisplayServer) KeyboardSetCurrentLayout(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[130], index) }
func (gdClass DisplayServer) KeyboardGetLayoutLanguage(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[131], index) }
func (gdClass DisplayServer) KeyboardGetLayoutName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[132], index) }
func (gdClass DisplayServer) KeyboardGetKeycodeFromPhysical(keycode Key) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodDisplayServer[133], keycode) }
func (gdClass DisplayServer) ProcessEvents()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[134]) }
func (gdClass DisplayServer) ForceProcessAndDropEvents()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[135]) }
func (gdClass DisplayServer) SetNativeIcon(filename string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[136], filename) }
func (gdClass DisplayServer) SetIcon(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[137], image) }
func (gdClass DisplayServer) TabletGetDriverCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[138]) }
func (gdClass DisplayServer) TabletGetDriverName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[139], idx) }
func (gdClass DisplayServer) TabletGetCurrentDriver() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[140]) }
func (gdClass DisplayServer) TabletSetCurrentDriver(name string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[141], name) }

type ENetConnection gdnative.Object

var methodENetConnection [17]gdnative.Method

type ENetConnectionCompressionMode int64

const (
	ENetConnectionCompressNone ENetConnectionCompressionMode = 0
	ENetConnectionCompressRangeCoder ENetConnectionCompressionMode = 1
	ENetConnectionCompressFastlz ENetConnectionCompressionMode = 2
	ENetConnectionCompressZlib ENetConnectionCompressionMode = 3
	ENetConnectionCompressZstd ENetConnectionCompressionMode = 4
)

type ENetConnectionEventType int64

const (
	ENetConnectionEventError ENetConnectionEventType = -1
	ENetConnectionEventNone ENetConnectionEventType = 0
	ENetConnectionEventConnect ENetConnectionEventType = 1
	ENetConnectionEventDisconnect ENetConnectionEventType = 2
	ENetConnectionEventReceive ENetConnectionEventType = 3
)

type ENetConnectionHostStatistic int64

const (
	ENetConnectionHostTotalSentData ENetConnectionHostStatistic = 0
	ENetConnectionHostTotalSentPackets ENetConnectionHostStatistic = 1
	ENetConnectionHostTotalReceivedData ENetConnectionHostStatistic = 2
	ENetConnectionHostTotalReceivedPackets ENetConnectionHostStatistic = 3
)
func (gdClass ENetConnection) CreateHostBound(bind_address string, bind_port int64, max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[0], bind_address, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) CreateHost(max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[1], max_peers, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) Destroy()  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[2]) }
func (gdClass ENetConnection) ConnectToHost(address string, port int64, channels int64, data int64) ENetPacketPeer { return gdnative.Return[ENetPacketPeer](gdnative.Object(gdClass), methodENetConnection[3], address, port, channels, data) }
func (gdClass ENetConnection) Service(timeout int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodENetConnection[4], timeout) }
func (gdClass ENetConnection) Flush()  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[5]) }
func (gdClass ENetConnection) BandwidthLimit(in_bandwidth int64, out_bandwidth int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[6], in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) ChannelLimit(limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[7], limit) }
func (gdClass ENetConnection) Broadcast(channel int64, packet []byte, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[8], channel, packet, flags) }
func (gdClass ENetConnection) Compress(mode ENetConnectionCompressionMode)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[9], mode) }
func (gdClass ENetConnection) DtlsServerSetup(key CryptoKey, certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[10], key, certificate) }
func (gdClass ENetConnection) DtlsClientSetup(certificate X509Certificate, hostname string, verify bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[11], certificate, hostname, verify) }
func (gdClass ENetConnection) RefuseNewConnections(refuse bool)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[12], refuse) }
func (gdClass ENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodENetConnection[13], statistic) }
func (gdClass ENetConnection) GetMaxChannels() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetConnection[14]) }
func (gdClass ENetConnection) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetConnection[15]) }
func (gdClass ENetConnection) GetPeers() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodENetConnection[16]) }

type ENetMultiplayerPeer gdnative.Object

var methodENetMultiplayerPeer [10]gdnative.Method
func (gdClass ENetMultiplayerPeer) CreateServer(port int64, max_clients int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[0], port, max_clients, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetMultiplayerPeer) CreateClient(address string, port int64, channel_count int64, in_bandwidth int64, out_bandwidth int64, local_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[1], address, port, channel_count, in_bandwidth, out_bandwidth, local_port) }
func (gdClass ENetMultiplayerPeer) CreateMesh(unique_id int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[2], unique_id) }
func (gdClass ENetMultiplayerPeer) AddMeshPeer(peer_id int64, host ENetConnection) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[3], peer_id, host) }
func (gdClass ENetMultiplayerPeer) CloseConnection(wait_usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[4], wait_usec) }
func (gdClass ENetMultiplayerPeer) SetBindIp(ip string)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[5], ip) }
func (gdClass ENetMultiplayerPeer) SetServerRelayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[6], enabled) }
func (gdClass ENetMultiplayerPeer) IsServerRelayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodENetMultiplayerPeer[7]) }
func (gdClass ENetMultiplayerPeer) GetHost() ENetConnection { return gdnative.Return[ENetConnection](gdnative.Object(gdClass), methodENetMultiplayerPeer[8]) }
func (gdClass ENetMultiplayerPeer) GetPeer(id int64) ENetPacketPeer { return gdnative.Return[ENetPacketPeer](gdnative.Object(gdClass), methodENetMultiplayerPeer[9], id) }

type ENetPacketPeer gdnative.Object

var methodENetPacketPeer [13]gdnative.Method

type ENetPacketPeerPeerState int64

const (
	ENetPacketPeerStateDisconnected ENetPacketPeerPeerState = 0
	ENetPacketPeerStateConnecting ENetPacketPeerPeerState = 1
	ENetPacketPeerStateAcknowledgingConnect ENetPacketPeerPeerState = 2
	ENetPacketPeerStateConnectionPending ENetPacketPeerPeerState = 3
	ENetPacketPeerStateConnectionSucceeded ENetPacketPeerPeerState = 4
	ENetPacketPeerStateConnected ENetPacketPeerPeerState = 5
	ENetPacketPeerStateDisconnectLater ENetPacketPeerPeerState = 6
	ENetPacketPeerStateDisconnecting ENetPacketPeerPeerState = 7
	ENetPacketPeerStateAcknowledgingDisconnect ENetPacketPeerPeerState = 8
	ENetPacketPeerStateZombie ENetPacketPeerPeerState = 9
)

type ENetPacketPeerPeerStatistic int64

const (
	ENetPacketPeerPeerPacketLoss ENetPacketPeerPeerStatistic = 0
	ENetPacketPeerPeerPacketLossVariance ENetPacketPeerPeerStatistic = 1
	ENetPacketPeerPeerPacketLossEpoch ENetPacketPeerPeerStatistic = 2
	ENetPacketPeerPeerRoundTripTime ENetPacketPeerPeerStatistic = 3
	ENetPacketPeerPeerRoundTripTimeVariance ENetPacketPeerPeerStatistic = 4
	ENetPacketPeerPeerLastRoundTripTime ENetPacketPeerPeerStatistic = 5
	ENetPacketPeerPeerLastRoundTripTimeVariance ENetPacketPeerPeerStatistic = 6
	ENetPacketPeerPeerPacketThrottle ENetPacketPeerPeerStatistic = 7
	ENetPacketPeerPeerPacketThrottleLimit ENetPacketPeerPeerStatistic = 8
	ENetPacketPeerPeerPacketThrottleCounter ENetPacketPeerPeerStatistic = 9
	ENetPacketPeerPeerPacketThrottleEpoch ENetPacketPeerPeerStatistic = 10
	ENetPacketPeerPeerPacketThrottleAcceleration ENetPacketPeerPeerStatistic = 11
	ENetPacketPeerPeerPacketThrottleDeceleration ENetPacketPeerPeerStatistic = 12
	ENetPacketPeerPeerPacketThrottleInterval ENetPacketPeerPeerStatistic = 13
)
func (gdClass ENetPacketPeer) PeerDisconnect(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[0], data) }
func (gdClass ENetPacketPeer) PeerDisconnectLater(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[1], data) }
func (gdClass ENetPacketPeer) PeerDisconnectNow(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[2], data) }
func (gdClass ENetPacketPeer) Ping()  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[3]) }
func (gdClass ENetPacketPeer) PingInterval(ping_interval int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[4], ping_interval) }
func (gdClass ENetPacketPeer) Reset()  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[5]) }
func (gdClass ENetPacketPeer) Send(channel int64, packet []byte, flags int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetPacketPeer[6], channel, packet, flags) }
func (gdClass ENetPacketPeer) ThrottleConfigure(interval int64, acceleration int64, deceleration int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[7], interval, acceleration, deceleration) }
func (gdClass ENetPacketPeer) SetTimeout(timeout int64, timeout_min int64, timeout_max int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[8], timeout, timeout_min, timeout_max) }
func (gdClass ENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodENetPacketPeer[9], statistic) }
func (gdClass ENetPacketPeer) GetState() ENetPacketPeerPeerState { return gdnative.Return[ENetPacketPeerPeerState](gdnative.Object(gdClass), methodENetPacketPeer[10]) }
func (gdClass ENetPacketPeer) GetChannels() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetPacketPeer[11]) }
func (gdClass ENetPacketPeer) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodENetPacketPeer[12]) }

type EditorCommandPalette gdnative.Object

var methodEditorCommandPalette [2]gdnative.Method
func (gdClass EditorCommandPalette) AddCommand(command_name string, key_name string, binded_callable Callable, shortcut_text string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorCommandPalette[0], command_name, key_name, binded_callable, shortcut_text) }
func (gdClass EditorCommandPalette) RemoveCommand(key_name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorCommandPalette[1], key_name) }

type EditorDebuggerPlugin gdnative.Object

var methodEditorDebuggerPlugin [7]gdnative.Method
func (gdClass EditorDebuggerPlugin) SendMessage(message string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[0], message, data) }
func (gdClass EditorDebuggerPlugin) RegisterMessageCapture(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[1], name, callable) }
func (gdClass EditorDebuggerPlugin) UnregisterMessageCapture(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[2], name) }
func (gdClass EditorDebuggerPlugin) HasCapture(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[3], name) }
func (gdClass EditorDebuggerPlugin) IsBreaked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[4]) }
func (gdClass EditorDebuggerPlugin) IsDebuggable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[5]) }
func (gdClass EditorDebuggerPlugin) IsSessionActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[6]) }

type EditorExportPlugin gdnative.Object

var methodEditorExportPlugin [14]gdnative.Method
func (gdClass EditorExportPlugin) ExportFileImplementation(path string, atype string, features []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[0], path, atype, features) }
func (gdClass EditorExportPlugin) ExportBeginImplementation(features []string, is_debug bool, path string, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[1], features, is_debug, path, flags) }
func (gdClass EditorExportPlugin) ExportEndImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[2]) }
func (gdClass EditorExportPlugin) AddSharedObject(path string, tags []string, target string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[3], path, tags, target) }
func (gdClass EditorExportPlugin) AddIosProjectStaticLib(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[4], path) }
func (gdClass EditorExportPlugin) AddFile(path string, file []byte, remap bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[5], path, file, remap) }
func (gdClass EditorExportPlugin) AddIosFramework(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[6], path) }
func (gdClass EditorExportPlugin) AddIosEmbeddedFramework(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[7], path) }
func (gdClass EditorExportPlugin) AddIosPlistContent(plist_content string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[8], plist_content) }
func (gdClass EditorExportPlugin) AddIosLinkerFlags(flags string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[9], flags) }
func (gdClass EditorExportPlugin) AddIosBundleFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[10], path) }
func (gdClass EditorExportPlugin) AddIosCppCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[11], code) }
func (gdClass EditorExportPlugin) AddMacosPluginFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[12], path) }
func (gdClass EditorExportPlugin) Skip()  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[13]) }

type EditorFeatureProfile gdnative.Object

var methodEditorFeatureProfile [11]gdnative.Method

type EditorFeatureProfileFeature int64

const (
	EditorFeatureProfileFeature3d EditorFeatureProfileFeature = 0
	EditorFeatureProfileFeatureScript EditorFeatureProfileFeature = 1
	EditorFeatureProfileFeatureAssetLib EditorFeatureProfileFeature = 2
	EditorFeatureProfileFeatureSceneTree EditorFeatureProfileFeature = 3
	EditorFeatureProfileFeatureNodeDock EditorFeatureProfileFeature = 4
	EditorFeatureProfileFeatureFilesystemDock EditorFeatureProfileFeature = 5
	EditorFeatureProfileFeatureImportDock EditorFeatureProfileFeature = 6
	EditorFeatureProfileFeatureMax EditorFeatureProfileFeature = 7
)
func (gdClass EditorFeatureProfile) SetDisableClass(class_name string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[0], class_name, disable) }
func (gdClass EditorFeatureProfile) IsClassDisabled(class_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[1], class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassEditor(class_name string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[2], class_name, disable) }
func (gdClass EditorFeatureProfile) IsClassEditorDisabled(class_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[3], class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassProperty(class_name string, property string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[4], class_name, property, disable) }
func (gdClass EditorFeatureProfile) IsClassPropertyDisabled(class_name string, property string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[5], class_name, property) }
func (gdClass EditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[6], feature, disable) }
func (gdClass EditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[7], feature) }
func (gdClass EditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFeatureProfile[8], feature) }
func (gdClass EditorFeatureProfile) SaveToFile(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorFeatureProfile[9], path) }
func (gdClass EditorFeatureProfile) LoadFromFile(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorFeatureProfile[10], path) }

type EditorFileDialog gdnative.Object

var methodEditorFileDialog [20]gdnative.Method

type EditorFileDialogFileMode int64

const (
	EditorFileDialogFileModeOpenFile EditorFileDialogFileMode = 0
	EditorFileDialogFileModeOpenFiles EditorFileDialogFileMode = 1
	EditorFileDialogFileModeOpenDir EditorFileDialogFileMode = 2
	EditorFileDialogFileModeOpenAny EditorFileDialogFileMode = 3
	EditorFileDialogFileModeSaveFile EditorFileDialogFileMode = 4
)

type EditorFileDialogAccess int64

const (
	EditorFileDialogAccessResources EditorFileDialogAccess = 0
	EditorFileDialogAccessUserdata EditorFileDialogAccess = 1
	EditorFileDialogAccessFilesystem EditorFileDialogAccess = 2
)

type EditorFileDialogDisplayMode int64

const (
	EditorFileDialogDisplayThumbnails EditorFileDialogDisplayMode = 0
	EditorFileDialogDisplayList EditorFileDialogDisplayMode = 1
)
func (gdClass EditorFileDialog) ClearFilters()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[0]) }
func (gdClass EditorFileDialog) AddFilter(filter string, description string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[1], filter, description) }
func (gdClass EditorFileDialog) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[2]) }
func (gdClass EditorFileDialog) GetCurrentFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[3]) }
func (gdClass EditorFileDialog) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[4]) }
func (gdClass EditorFileDialog) SetCurrentDir(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[5], dir) }
func (gdClass EditorFileDialog) SetCurrentFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[6], file) }
func (gdClass EditorFileDialog) SetCurrentPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[7], path) }
func (gdClass EditorFileDialog) SetFileMode(mode EditorFileDialogFileMode)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[8], mode) }
func (gdClass EditorFileDialog) GetFileMode() EditorFileDialogFileMode { return gdnative.Return[EditorFileDialogFileMode](gdnative.Object(gdClass), methodEditorFileDialog[9]) }
func (gdClass EditorFileDialog) GetVbox() VBoxContainer { return gdnative.Return[VBoxContainer](gdnative.Object(gdClass), methodEditorFileDialog[10]) }
func (gdClass EditorFileDialog) SetAccess(access EditorFileDialogAccess)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[11], access) }
func (gdClass EditorFileDialog) GetAccess() EditorFileDialogAccess { return gdnative.Return[EditorFileDialogAccess](gdnative.Object(gdClass), methodEditorFileDialog[12]) }
func (gdClass EditorFileDialog) SetShowHiddenFiles(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[13], show) }
func (gdClass EditorFileDialog) IsShowingHiddenFiles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileDialog[14]) }
func (gdClass EditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[15], mode) }
func (gdClass EditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode { return gdnative.Return[EditorFileDialogDisplayMode](gdnative.Object(gdClass), methodEditorFileDialog[16]) }
func (gdClass EditorFileDialog) SetDisableOverwriteWarning(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[17], disable) }
func (gdClass EditorFileDialog) IsOverwriteWarningDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileDialog[18]) }
func (gdClass EditorFileDialog) Invalidate()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[19]) }

type EditorFileSystem gdnative.Object

var methodEditorFileSystem [10]gdnative.Method
func (gdClass EditorFileSystem) GetFilesystem() EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystem[0]) }
func (gdClass EditorFileSystem) IsScanning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystem[1]) }
func (gdClass EditorFileSystem) GetScanningProgress() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEditorFileSystem[2]) }
func (gdClass EditorFileSystem) Scan()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[3]) }
func (gdClass EditorFileSystem) ScanSources()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[4]) }
func (gdClass EditorFileSystem) UpdateFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[5], path) }
func (gdClass EditorFileSystem) GetFilesystemPath(path string) EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystem[6], path) }
func (gdClass EditorFileSystem) GetFileType(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystem[7], path) }
func (gdClass EditorFileSystem) UpdateScriptClasses()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[8]) }
func (gdClass EditorFileSystem) ReimportFiles(files []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[9], files) }

type EditorFileSystemDirectory gdnative.Object

var methodEditorFileSystemDirectory [14]gdnative.Method
func (gdClass EditorFileSystemDirectory) GetSubdirCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[0]) }
func (gdClass EditorFileSystemDirectory) GetSubdir(idx int64) EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystemDirectory[1], idx) }
func (gdClass EditorFileSystemDirectory) GetFileCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[2]) }
func (gdClass EditorFileSystemDirectory) GetFile(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[3], idx) }
func (gdClass EditorFileSystemDirectory) GetFilePath(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[4], idx) }
func (gdClass EditorFileSystemDirectory) GetFileType(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[5], idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[6], idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassExtends(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[7], idx) }
func (gdClass EditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystemDirectory[8], idx) }
func (gdClass EditorFileSystemDirectory) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[9]) }
func (gdClass EditorFileSystemDirectory) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[10]) }
func (gdClass EditorFileSystemDirectory) GetParent() EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystemDirectory[11]) }
func (gdClass EditorFileSystemDirectory) FindFileIndex(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[12], name) }
func (gdClass EditorFileSystemDirectory) FindDirIndex(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[13], name) }

type EditorFileSystemImportFormatSupportQuery gdnative.Object

var methodEditorFileSystemImportFormatSupportQuery [3]gdnative.Method
func (gdClass EditorFileSystemImportFormatSupportQuery) IsActiveImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystemImportFormatSupportQuery[0]) }
func (gdClass EditorFileSystemImportFormatSupportQuery) GetFileExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorFileSystemImportFormatSupportQuery[1]) }
func (gdClass EditorFileSystemImportFormatSupportQuery) QueryImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystemImportFormatSupportQuery[2]) }

type EditorImportPlugin gdnative.Object

var methodEditorImportPlugin [12]gdnative.Method
func (gdClass EditorImportPlugin) GetImporterNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorImportPlugin[0]) }
func (gdClass EditorImportPlugin) GetVisibleNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorImportPlugin[1]) }
func (gdClass EditorImportPlugin) GetPresetCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorImportPlugin[2]) }
func (gdClass EditorImportPlugin) GetPresetNameImplementation(preset_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorImportPlugin[3], preset_index) }
func (gdClass EditorImportPlugin) GetRecognizedExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorImportPlugin[4]) }
func (gdClass EditorImportPlugin) GetImportOptionsImplementation(path string, preset_index int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorImportPlugin[5], path, preset_index) }
func (gdClass EditorImportPlugin) GetSaveExtensionImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorImportPlugin[6]) }
func (gdClass EditorImportPlugin) GetResourceTypeImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorImportPlugin[7]) }
func (gdClass EditorImportPlugin) GetPriorityImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEditorImportPlugin[8]) }
func (gdClass EditorImportPlugin) GetImportOrderImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorImportPlugin[9]) }
func (gdClass EditorImportPlugin) GetOptionVisibilityImplementation(path string, option_name string, options Dictionary) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorImportPlugin[10], path, option_name, options) }
func (gdClass EditorImportPlugin) ImportImplementation(source_file string, save_path string, options Dictionary, platform_variants Array, gen_files Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorImportPlugin[11], source_file, save_path, options, platform_variants, gen_files) }

type EditorInspector gdnative.Object

var methodEditorInspector [0]gdnative.Method

type EditorInspectorPlugin gdnative.Object

var methodEditorInspectorPlugin [9]gdnative.Method
func (gdClass EditorInspectorPlugin) CanHandleImplementation(object any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInspectorPlugin[0], object) }
func (gdClass EditorInspectorPlugin) ParseBeginImplementation(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[1], object) }
func (gdClass EditorInspectorPlugin) ParseCategoryImplementation(object Object, category string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[2], object, category) }
func (gdClass EditorInspectorPlugin) ParseGroupImplementation(object Object, group string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[3], object, group) }
func (gdClass EditorInspectorPlugin) ParsePropertyImplementation(object Object, atype int64, name string, hint_type int64, hint_string string, usage_flags int64, wide bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInspectorPlugin[4], object, atype, name, hint_type, hint_string, usage_flags, wide) }
func (gdClass EditorInspectorPlugin) ParseEndImplementation(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[5], object) }
func (gdClass EditorInspectorPlugin) AddCustomControl(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[6], control) }
func (gdClass EditorInspectorPlugin) AddPropertyEditor(property string, editor Control, add_to_end bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[7], property, editor, add_to_end) }
func (gdClass EditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label string, properties []string, editor Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[8], label, properties, editor) }

type EditorInterface gdnative.Object

var methodEditorInterface [37]gdnative.Method
func (gdClass EditorInterface) InspectObject(object Object, for_property string, inspector_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[0], object, for_property, inspector_only) }
func (gdClass EditorInterface) GetSelection() EditorSelection { return gdnative.Return[EditorSelection](gdnative.Object(gdClass), methodEditorInterface[1]) }
func (gdClass EditorInterface) GetEditorSettings() EditorSettings { return gdnative.Return[EditorSettings](gdnative.Object(gdClass), methodEditorInterface[2]) }
func (gdClass EditorInterface) GetScriptEditor() ScriptEditor { return gdnative.Return[ScriptEditor](gdnative.Object(gdClass), methodEditorInterface[3]) }
func (gdClass EditorInterface) GetBaseControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodEditorInterface[4]) }
func (gdClass EditorInterface) GetEditorScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEditorInterface[5]) }
func (gdClass EditorInterface) EditResource(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[6], resource) }
func (gdClass EditorInterface) EditNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[7], node) }
func (gdClass EditorInterface) EditScript(script Script, line int64, column int64, grab_focus bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[8], script, line, column, grab_focus) }
func (gdClass EditorInterface) OpenSceneFromPath(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[9], scene_filepath) }
func (gdClass EditorInterface) ReloadSceneFromPath(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[10], scene_filepath) }
func (gdClass EditorInterface) PlayMainScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[11]) }
func (gdClass EditorInterface) PlayCurrentScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[12]) }
func (gdClass EditorInterface) PlayCustomScene(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[13], scene_filepath) }
func (gdClass EditorInterface) StopPlayingScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[14]) }
func (gdClass EditorInterface) IsPlayingScene() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[15]) }
func (gdClass EditorInterface) GetPlayingScene() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[16]) }
func (gdClass EditorInterface) GetOpenScenes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorInterface[17]) }
func (gdClass EditorInterface) GetEditedSceneRoot() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorInterface[18]) }
func (gdClass EditorInterface) GetResourcePreviewer() EditorResourcePreview { return gdnative.Return[EditorResourcePreview](gdnative.Object(gdClass), methodEditorInterface[19]) }
func (gdClass EditorInterface) GetResourceFilesystem() EditorFileSystem { return gdnative.Return[EditorFileSystem](gdnative.Object(gdClass), methodEditorInterface[20]) }
func (gdClass EditorInterface) GetEditorMainControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodEditorInterface[21]) }
func (gdClass EditorInterface) MakeMeshPreviews(meshes Array, preview_size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorInterface[22], meshes, preview_size) }
func (gdClass EditorInterface) SelectFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[23], file) }
func (gdClass EditorInterface) GetSelectedPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[24]) }
func (gdClass EditorInterface) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[25]) }
func (gdClass EditorInterface) GetFileSystemDock() FileSystemDock { return gdnative.Return[FileSystemDock](gdnative.Object(gdClass), methodEditorInterface[26]) }
func (gdClass EditorInterface) GetEditorPaths() EditorPaths { return gdnative.Return[EditorPaths](gdnative.Object(gdClass), methodEditorInterface[27]) }
func (gdClass EditorInterface) GetCommandPalette() EditorCommandPalette { return gdnative.Return[EditorCommandPalette](gdnative.Object(gdClass), methodEditorInterface[28]) }
func (gdClass EditorInterface) SetPluginEnabled(plugin string, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[29], plugin, enabled) }
func (gdClass EditorInterface) IsPluginEnabled(plugin string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[30], plugin) }
func (gdClass EditorInterface) GetInspector() EditorInspector { return gdnative.Return[EditorInspector](gdnative.Object(gdClass), methodEditorInterface[31]) }
func (gdClass EditorInterface) SaveScene() error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorInterface[32]) }
func (gdClass EditorInterface) SaveSceneAs(path string, with_preview bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[33], path, with_preview) }
func (gdClass EditorInterface) SetMainScreenEditor(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[34], name) }
func (gdClass EditorInterface) SetDistractionFreeMode(enter bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[35], enter) }
func (gdClass EditorInterface) IsDistractionFreeModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[36]) }

type EditorNode3DGizmo gdnative.Object

var methodEditorNode3DGizmo [24]gdnative.Method
func (gdClass EditorNode3DGizmo) RedrawImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[0]) }
func (gdClass EditorNode3DGizmo) GetHandleNameImplementation(id int64, secondary bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorNode3DGizmo[1], id, secondary) }
func (gdClass EditorNode3DGizmo) IsHandleHighlightedImplementation(id int64, secondary bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmo[2], id, secondary) }
func (gdClass EditorNode3DGizmo) GetHandleValueImplementation(id int64, secondary bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorNode3DGizmo[3], id, secondary) }
func (gdClass EditorNode3DGizmo) SetHandleImplementation(id int64, secondary bool, camera Camera3D, point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[4], id, secondary, camera, point) }
func (gdClass EditorNode3DGizmo) CommitHandleImplementation(id int64, secondary bool, restore any, cancel bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[5], id, secondary, restore, cancel) }
func (gdClass EditorNode3DGizmo) SubgizmosIntersectRayImplementation(camera Camera3D, point Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorNode3DGizmo[6], camera, point) }
func (gdClass EditorNode3DGizmo) SubgizmosIntersectFrustumImplementation(camera Camera3D, frustum Array) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodEditorNode3DGizmo[7], camera, frustum) }
func (gdClass EditorNode3DGizmo) SetSubgizmoTransformImplementation(id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[8], id, transform) }
func (gdClass EditorNode3DGizmo) GetSubgizmoTransformImplementation(id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodEditorNode3DGizmo[9], id) }
func (gdClass EditorNode3DGizmo) CommitSubgizmosImplementation(ids []int32, restores Array, cancel bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[10], ids, restores, cancel) }
func (gdClass EditorNode3DGizmo) AddLines(lines []Vector3, material Material, billboard bool, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[11], lines, material, billboard, modulate) }
func (gdClass EditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[12], mesh, material, transform, skeleton) }
func (gdClass EditorNode3DGizmo) AddCollisionSegments(segments []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[13], segments) }
func (gdClass EditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[14], triangles) }
func (gdClass EditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale float64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[15], material, default_scale, modulate) }
func (gdClass EditorNode3DGizmo) AddHandles(handles []Vector3, material Material, ids []int32, billboard bool, secondary bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[16], handles, material, ids, billboard, secondary) }
func (gdClass EditorNode3DGizmo) SetSpatialNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[17], node) }
func (gdClass EditorNode3DGizmo) GetSpatialNode() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodEditorNode3DGizmo[18]) }
func (gdClass EditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin { return gdnative.Return[EditorNode3DGizmoPlugin](gdnative.Object(gdClass), methodEditorNode3DGizmo[19]) }
func (gdClass EditorNode3DGizmo) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[20]) }
func (gdClass EditorNode3DGizmo) SetHidden(hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[21], hidden) }
func (gdClass EditorNode3DGizmo) IsSubgizmoSelected(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmo[22], id) }
func (gdClass EditorNode3DGizmo) GetSubgizmoSelection() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodEditorNode3DGizmo[23]) }

type EditorNode3DGizmoPlugin gdnative.Object

var methodEditorNode3DGizmoPlugin [22]gdnative.Method
func (gdClass EditorNode3DGizmoPlugin) HasGizmoImplementation(for_node_3d Node3D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[0], for_node_3d) }
func (gdClass EditorNode3DGizmoPlugin) CreateGizmoImplementation(for_node_3d Node3D) EditorNode3DGizmo { return gdnative.Return[EditorNode3DGizmo](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[1], for_node_3d) }
func (gdClass EditorNode3DGizmoPlugin) GetGizmoNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[2]) }
func (gdClass EditorNode3DGizmoPlugin) GetPriorityImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[3]) }
func (gdClass EditorNode3DGizmoPlugin) CanBeHiddenImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[4]) }
func (gdClass EditorNode3DGizmoPlugin) IsSelectableWhenHiddenImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[5]) }
func (gdClass EditorNode3DGizmoPlugin) RedrawImplementation(gizmo EditorNode3DGizmo)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[6], gizmo) }
func (gdClass EditorNode3DGizmoPlugin) GetHandleNameImplementation(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[7], gizmo, handle_id, secondary) }
func (gdClass EditorNode3DGizmoPlugin) IsHandleHighlightedImplementation(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[8], gizmo, handle_id, secondary) }
func (gdClass EditorNode3DGizmoPlugin) GetHandleValueImplementation(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[9], gizmo, handle_id, secondary) }
func (gdClass EditorNode3DGizmoPlugin) SetHandleImplementation(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, camera Camera3D, screen_pos Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[10], gizmo, handle_id, secondary, camera, screen_pos) }
func (gdClass EditorNode3DGizmoPlugin) CommitHandleImplementation(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, restore any, cancel bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[11], gizmo, handle_id, secondary, restore, cancel) }
func (gdClass EditorNode3DGizmoPlugin) SubgizmosIntersectRayImplementation(gizmo EditorNode3DGizmo, camera Camera3D, screen_pos Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[12], gizmo, camera, screen_pos) }
func (gdClass EditorNode3DGizmoPlugin) SubgizmosIntersectFrustumImplementation(gizmo EditorNode3DGizmo, camera Camera3D, frustum_planes Array) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[13], gizmo, camera, frustum_planes) }
func (gdClass EditorNode3DGizmoPlugin) GetSubgizmoTransformImplementation(gizmo EditorNode3DGizmo, subgizmo_id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[14], gizmo, subgizmo_id) }
func (gdClass EditorNode3DGizmoPlugin) SetSubgizmoTransformImplementation(gizmo EditorNode3DGizmo, subgizmo_id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[15], gizmo, subgizmo_id, transform) }
func (gdClass EditorNode3DGizmoPlugin) CommitSubgizmosImplementation(gizmo EditorNode3DGizmo, ids []int32, restores Array, cancel bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[16], gizmo, ids, restores, cancel) }
func (gdClass EditorNode3DGizmoPlugin) CreateMaterial(name string, color Color, billboard bool, on_top bool, use_vertex_color bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[17], name, color, billboard, on_top, use_vertex_color) }
func (gdClass EditorNode3DGizmoPlugin) CreateIconMaterial(name string, texture Texture2D, on_top bool, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[18], name, texture, on_top, color) }
func (gdClass EditorNode3DGizmoPlugin) CreateHandleMaterial(name string, billboard bool, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[19], name, billboard, texture) }
func (gdClass EditorNode3DGizmoPlugin) AddMaterial(name string, material StandardMaterial3D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[20], name, material) }
func (gdClass EditorNode3DGizmoPlugin) GetMaterial(name string, gizmo EditorNode3DGizmo) StandardMaterial3D { return gdnative.Return[StandardMaterial3D](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[21], name, gizmo) }

type EditorPaths gdnative.Object

var methodEditorPaths [6]gdnative.Method
func (gdClass EditorPaths) GetDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[0]) }
func (gdClass EditorPaths) GetConfigDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[1]) }
func (gdClass EditorPaths) GetCacheDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[2]) }
func (gdClass EditorPaths) IsSelfContained() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPaths[3]) }
func (gdClass EditorPaths) GetSelfContainedFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[4]) }
func (gdClass EditorPaths) GetProjectSettingsDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[5]) }

type EditorPlugin gdnative.Object

var methodEditorPlugin [64]gdnative.Method

type EditorPluginCustomControlContainer int64

const (
	EditorPluginContainerToolbar EditorPluginCustomControlContainer = 0
	EditorPluginContainerSpatialEditorMenu EditorPluginCustomControlContainer = 1
	EditorPluginContainerSpatialEditorSideLeft EditorPluginCustomControlContainer = 2
	EditorPluginContainerSpatialEditorSideRight EditorPluginCustomControlContainer = 3
	EditorPluginContainerSpatialEditorBottom EditorPluginCustomControlContainer = 4
	EditorPluginContainerCanvasEditorMenu EditorPluginCustomControlContainer = 5
	EditorPluginContainerCanvasEditorSideLeft EditorPluginCustomControlContainer = 6
	EditorPluginContainerCanvasEditorSideRight EditorPluginCustomControlContainer = 7
	EditorPluginContainerCanvasEditorBottom EditorPluginCustomControlContainer = 8
	EditorPluginContainerPropertyEditorBottom EditorPluginCustomControlContainer = 9
	EditorPluginContainerProjectSettingTabLeft EditorPluginCustomControlContainer = 10
	EditorPluginContainerProjectSettingTabRight EditorPluginCustomControlContainer = 11
)

type EditorPluginDockSlot int64

const (
	EditorPluginDockSlotLeftUl EditorPluginDockSlot = 0
	EditorPluginDockSlotLeftBl EditorPluginDockSlot = 1
	EditorPluginDockSlotLeftUr EditorPluginDockSlot = 2
	EditorPluginDockSlotLeftBr EditorPluginDockSlot = 3
	EditorPluginDockSlotRightUl EditorPluginDockSlot = 4
	EditorPluginDockSlotRightBl EditorPluginDockSlot = 5
	EditorPluginDockSlotRightUr EditorPluginDockSlot = 6
	EditorPluginDockSlotRightBr EditorPluginDockSlot = 7
	EditorPluginDockSlotMax EditorPluginDockSlot = 8
)
func (gdClass EditorPlugin) ForwardCanvasGuiInputImplementation(event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPlugin[0], event) }
func (gdClass EditorPlugin) ForwardCanvasDrawOverViewportImplementation(viewport_control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[1], viewport_control) }
func (gdClass EditorPlugin) ForwardCanvasForceDrawOverViewportImplementation(viewport_control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[2], viewport_control) }
func (gdClass EditorPlugin) Forward3dGuiInputImplementation(viewport_camera Camera3D, event InputEvent) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorPlugin[3], viewport_camera, event) }
func (gdClass EditorPlugin) Forward3dDrawOverViewportImplementation(viewport_control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[4], viewport_control) }
func (gdClass EditorPlugin) Forward3dForceDrawOverViewportImplementation(viewport_control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[5], viewport_control) }
func (gdClass EditorPlugin) GetPluginNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPlugin[6]) }
func (gdClass EditorPlugin) GetPluginIconImplementation() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodEditorPlugin[7]) }
func (gdClass EditorPlugin) HasMainScreenImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPlugin[8]) }
func (gdClass EditorPlugin) MakeVisibleImplementation(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[9], visible) }
func (gdClass EditorPlugin) EditImplementation(object any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[10], object) }
func (gdClass EditorPlugin) HandlesImplementation(object any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPlugin[11], object) }
func (gdClass EditorPlugin) GetStateImplementation() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEditorPlugin[12]) }
func (gdClass EditorPlugin) SetStateImplementation(state Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[13], state) }
func (gdClass EditorPlugin) ClearImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[14]) }
func (gdClass EditorPlugin) SaveExternalDataImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[15]) }
func (gdClass EditorPlugin) ApplyChangesImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[16]) }
func (gdClass EditorPlugin) GetBreakpointsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorPlugin[17]) }
func (gdClass EditorPlugin) SetWindowLayoutImplementation(configuration ConfigFile)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[18], configuration) }
func (gdClass EditorPlugin) GetWindowLayoutImplementation(configuration ConfigFile)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[19], configuration) }
func (gdClass EditorPlugin) BuildImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPlugin[20]) }
func (gdClass EditorPlugin) EnablePluginImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[21]) }
func (gdClass EditorPlugin) DisablePluginImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[22]) }
func (gdClass EditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[23], container, control) }
func (gdClass EditorPlugin) AddControlToBottomPanel(control Control, title string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodEditorPlugin[24], control, title) }
func (gdClass EditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[25], slot, control) }
func (gdClass EditorPlugin) RemoveControlFromDocks(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[26], control) }
func (gdClass EditorPlugin) RemoveControlFromBottomPanel(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[27], control) }
func (gdClass EditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[28], container, control) }
func (gdClass EditorPlugin) AddToolMenuItem(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[29], name, callable) }
func (gdClass EditorPlugin) AddToolSubmenuItem(name string, submenu PopupMenu)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[30], name, submenu) }
func (gdClass EditorPlugin) RemoveToolMenuItem(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[31], name) }
func (gdClass EditorPlugin) GetExportAsMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodEditorPlugin[32]) }
func (gdClass EditorPlugin) AddCustomType(atype string, base string, script Script, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[33], atype, base, script, icon) }
func (gdClass EditorPlugin) RemoveCustomType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[34], atype) }
func (gdClass EditorPlugin) AddAutoloadSingleton(name string, path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[35], name, path) }
func (gdClass EditorPlugin) RemoveAutoloadSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[36], name) }
func (gdClass EditorPlugin) UpdateOverlays() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorPlugin[37]) }
func (gdClass EditorPlugin) MakeBottomPanelItemVisible(item Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[38], item) }
func (gdClass EditorPlugin) HideBottomPanel()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[39]) }
func (gdClass EditorPlugin) GetUndoRedo() UndoRedo { return gdnative.Return[UndoRedo](gdnative.Object(gdClass), methodEditorPlugin[40]) }
func (gdClass EditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[41], callable) }
func (gdClass EditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[42], callable) }
func (gdClass EditorPlugin) QueueSaveLayout()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[43]) }
func (gdClass EditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[44], parser) }
func (gdClass EditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[45], parser) }
func (gdClass EditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[46], importer, first_priority) }
func (gdClass EditorPlugin) RemoveImportPlugin(importer EditorImportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[47], importer) }
func (gdClass EditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[48], scene_format_importer, first_priority) }
func (gdClass EditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[49], scene_format_importer) }
func (gdClass EditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[50], scene_import_plugin, first_priority) }
func (gdClass EditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[51], scene_import_plugin) }
func (gdClass EditorPlugin) AddExportPlugin(plugin EditorExportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[52], plugin) }
func (gdClass EditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[53], plugin) }
func (gdClass EditorPlugin) AddSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[54], plugin) }
func (gdClass EditorPlugin) RemoveSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[55], plugin) }
func (gdClass EditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[56], plugin) }
func (gdClass EditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[57], plugin) }
func (gdClass EditorPlugin) SetInputEventForwardingAlwaysEnabled()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[58]) }
func (gdClass EditorPlugin) SetForceDrawOverForwardingEnabled()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[59]) }
func (gdClass EditorPlugin) GetEditorInterface() EditorInterface { return gdnative.Return[EditorInterface](gdnative.Object(gdClass), methodEditorPlugin[60]) }
func (gdClass EditorPlugin) GetScriptCreateDialog() ScriptCreateDialog { return gdnative.Return[ScriptCreateDialog](gdnative.Object(gdClass), methodEditorPlugin[61]) }
func (gdClass EditorPlugin) AddDebuggerPlugin(script Script)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[62], script) }
func (gdClass EditorPlugin) RemoveDebuggerPlugin(script Script)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[63], script) }

type EditorProperty gdnative.Object

var methodEditorProperty [22]gdnative.Method
func (gdClass EditorProperty) UpdatePropertyImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[0]) }
func (gdClass EditorProperty) SetLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[1], text) }
func (gdClass EditorProperty) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[2]) }
func (gdClass EditorProperty) SetReadOnly(read_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[3], read_only) }
func (gdClass EditorProperty) IsReadOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[4]) }
func (gdClass EditorProperty) SetCheckable(checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[5], checkable) }
func (gdClass EditorProperty) IsCheckable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[6]) }
func (gdClass EditorProperty) SetChecked(checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[7], checked) }
func (gdClass EditorProperty) IsChecked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[8]) }
func (gdClass EditorProperty) SetDrawWarning(draw_warning bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[9], draw_warning) }
func (gdClass EditorProperty) IsDrawWarning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[10]) }
func (gdClass EditorProperty) SetKeying(keying bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[11], keying) }
func (gdClass EditorProperty) IsKeying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[12]) }
func (gdClass EditorProperty) SetDeletable(deletable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[13], deletable) }
func (gdClass EditorProperty) IsDeletable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[14]) }
func (gdClass EditorProperty) GetEditedProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[15]) }
func (gdClass EditorProperty) GetEditedObject() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEditorProperty[16]) }
func (gdClass EditorProperty) GetTooltipText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[17]) }
func (gdClass EditorProperty) UpdateProperty()  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[18]) }
func (gdClass EditorProperty) AddFocusable(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[19], control) }
func (gdClass EditorProperty) SetBottomEditor(editor Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[20], editor) }
func (gdClass EditorProperty) EmitChanged(property string, value any, field string, changing bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[21], property, value, field, changing) }

type EditorResourceConversionPlugin gdnative.Object

var methodEditorResourceConversionPlugin [3]gdnative.Method
func (gdClass EditorResourceConversionPlugin) ConvertsToImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorResourceConversionPlugin[0]) }
func (gdClass EditorResourceConversionPlugin) HandlesImplementation(resource Resource) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourceConversionPlugin[1], resource) }
func (gdClass EditorResourceConversionPlugin) ConvertImplementation(resource Resource) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodEditorResourceConversionPlugin[2], resource) }

type EditorResourcePicker gdnative.Object

var methodEditorResourcePicker [12]gdnative.Method
func (gdClass EditorResourcePicker) SetCreateOptionsImplementation(menu_node Object)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[0], menu_node) }
func (gdClass EditorResourcePicker) HandleMenuSelectedImplementation(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePicker[1], id) }
func (gdClass EditorResourcePicker) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[2], base_type) }
func (gdClass EditorResourcePicker) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorResourcePicker[3]) }
func (gdClass EditorResourcePicker) GetAllowedTypes() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorResourcePicker[4]) }
func (gdClass EditorResourcePicker) SetEditedResource(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[5], resource) }
func (gdClass EditorResourcePicker) GetEditedResource() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodEditorResourcePicker[6]) }
func (gdClass EditorResourcePicker) SetToggleMode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[7], enable) }
func (gdClass EditorResourcePicker) IsToggleMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePicker[8]) }
func (gdClass EditorResourcePicker) SetTogglePressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[9], pressed) }
func (gdClass EditorResourcePicker) SetEditable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[10], enable) }
func (gdClass EditorResourcePicker) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePicker[11]) }

type EditorResourcePreview gdnative.Object

var methodEditorResourcePreview [5]gdnative.Method
func (gdClass EditorResourcePreview) QueueResourcePreview(path string, receiver Object, receiver_func string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[0], path, receiver, receiver_func, userdata) }
func (gdClass EditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[1], resource, receiver, receiver_func, userdata) }
func (gdClass EditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[2], generator) }
func (gdClass EditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[3], generator) }
func (gdClass EditorResourcePreview) CheckForInvalidation(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[4], path) }

type EditorResourcePreviewGenerator gdnative.Object

var methodEditorResourcePreviewGenerator [5]gdnative.Method
func (gdClass EditorResourcePreviewGenerator) HandlesImplementation(atype string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePreviewGenerator[0], atype) }
func (gdClass EditorResourcePreviewGenerator) GenerateImplementation(resource Resource, size Vector2i) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodEditorResourcePreviewGenerator[1], resource, size) }
func (gdClass EditorResourcePreviewGenerator) GenerateFromPathImplementation(path string, size Vector2i) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodEditorResourcePreviewGenerator[2], path, size) }
func (gdClass EditorResourcePreviewGenerator) GenerateSmallPreviewAutomaticallyImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePreviewGenerator[3]) }
func (gdClass EditorResourcePreviewGenerator) CanGenerateSmallPreviewImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePreviewGenerator[4]) }

type EditorSceneFormatImporter gdnative.Object

var methodEditorSceneFormatImporter [5]gdnative.Method
func (gdClass EditorSceneFormatImporter) GetImportFlagsImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorSceneFormatImporter[0]) }
func (gdClass EditorSceneFormatImporter) GetExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorSceneFormatImporter[1]) }
func (gdClass EditorSceneFormatImporter) ImportSceneImplementation(path string, flags int64, options Dictionary, bake_fps int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEditorSceneFormatImporter[2], path, flags, options, bake_fps) }
func (gdClass EditorSceneFormatImporter) GetImportOptionsImplementation(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSceneFormatImporter[3], path) }
func (gdClass EditorSceneFormatImporter) GetOptionVisibilityImplementation(path string, for_animation bool, option string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSceneFormatImporter[4], path, for_animation, option) }

type EditorSceneFormatImporterBlend gdnative.Object

var methodEditorSceneFormatImporterBlend [0]gdnative.Method

type EditorSceneFormatImporterFBX gdnative.Object

var methodEditorSceneFormatImporterFBX [0]gdnative.Method

type EditorSceneFormatImporterGLTF gdnative.Object

var methodEditorSceneFormatImporterGLTF [0]gdnative.Method

type EditorScenePostImport gdnative.Object

var methodEditorScenePostImport [2]gdnative.Method
func (gdClass EditorScenePostImport) PostImportImplementation(scene Node) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEditorScenePostImport[0], scene) }
func (gdClass EditorScenePostImport) GetSourceFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorScenePostImport[1]) }

type EditorScenePostImportPlugin gdnative.Object

var methodEditorScenePostImportPlugin [11]gdnative.Method

type EditorScenePostImportPluginInternalImportCategory int64

const (
	EditorScenePostImportPluginInternalImportCategoryNode EditorScenePostImportPluginInternalImportCategory = 0
	EditorScenePostImportPluginInternalImportCategoryMesh3dNode EditorScenePostImportPluginInternalImportCategory = 1
	EditorScenePostImportPluginInternalImportCategoryMesh EditorScenePostImportPluginInternalImportCategory = 2
	EditorScenePostImportPluginInternalImportCategoryMaterial EditorScenePostImportPluginInternalImportCategory = 3
	EditorScenePostImportPluginInternalImportCategoryAnimation EditorScenePostImportPluginInternalImportCategory = 4
	EditorScenePostImportPluginInternalImportCategoryAnimationNode EditorScenePostImportPluginInternalImportCategory = 5
	EditorScenePostImportPluginInternalImportCategorySkeleton3dNode EditorScenePostImportPluginInternalImportCategory = 6
	EditorScenePostImportPluginInternalImportCategoryMax EditorScenePostImportPluginInternalImportCategory = 7
)
func (gdClass EditorScenePostImportPlugin) GetInternalImportOptionsImplementation(category int64)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[0], category) }
func (gdClass EditorScenePostImportPlugin) GetInternalOptionVisibilityImplementation(category int64, for_animation bool, option string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorScenePostImportPlugin[1], category, for_animation, option) }
func (gdClass EditorScenePostImportPlugin) GetInternalOptionUpdateViewRequiredImplementation(category int64, option string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorScenePostImportPlugin[2], category, option) }
func (gdClass EditorScenePostImportPlugin) InternalProcessImplementation(category int64, base_node Node, node Node, resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[3], category, base_node, node, resource) }
func (gdClass EditorScenePostImportPlugin) GetImportOptionsImplementation(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[4], path) }
func (gdClass EditorScenePostImportPlugin) GetOptionVisibilityImplementation(path string, for_animation bool, option string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorScenePostImportPlugin[5], path, for_animation, option) }
func (gdClass EditorScenePostImportPlugin) PreProcessImplementation(scene Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[6], scene) }
func (gdClass EditorScenePostImportPlugin) PostProcessImplementation(scene Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[7], scene) }
func (gdClass EditorScenePostImportPlugin) GetOptionValue(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorScenePostImportPlugin[8], name) }
func (gdClass EditorScenePostImportPlugin) AddImportOption(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[9], name, value) }
func (gdClass EditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name string, default_value any, hint PropertyHint, hint_string string, usage_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[10], atype, name, default_value, hint, hint_string, usage_flags) }

type EditorScript gdnative.Object

var methodEditorScript [4]gdnative.Method
func (gdClass EditorScript) RunImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodEditorScript[0]) }
func (gdClass EditorScript) AddRootNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScript[1], node) }
func (gdClass EditorScript) GetScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorScript[2]) }
func (gdClass EditorScript) GetEditorInterface() EditorInterface { return gdnative.Return[EditorInterface](gdnative.Object(gdClass), methodEditorScript[3]) }

type EditorScriptPicker gdnative.Object

var methodEditorScriptPicker [2]gdnative.Method
func (gdClass EditorScriptPicker) SetScriptOwner(owner_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScriptPicker[0], owner_node) }
func (gdClass EditorScriptPicker) GetScriptOwner() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorScriptPicker[1]) }

type EditorSelection gdnative.Object

var methodEditorSelection [5]gdnative.Method
func (gdClass EditorSelection) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[0]) }
func (gdClass EditorSelection) AddNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[1], node) }
func (gdClass EditorSelection) RemoveNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[2], node) }
func (gdClass EditorSelection) GetSelectedNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSelection[3]) }
func (gdClass EditorSelection) GetTransformableSelectedNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSelection[4]) }

type EditorSettings gdnative.Object

var methodEditorSettings [18]gdnative.Method
func (gdClass EditorSettings) HasSetting(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSettings[0], name) }
func (gdClass EditorSettings) SetSetting(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[1], name, value) }
func (gdClass EditorSettings) GetSetting(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSettings[2], name) }
func (gdClass EditorSettings) Erase(property string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[3], property) }
func (gdClass EditorSettings) SetInitialValue(name string, value any, update_current bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[4], name, value, update_current) }
func (gdClass EditorSettings) PropertyCanRevert(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSettings[5], name) }
func (gdClass EditorSettings) PropertyGetRevert(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSettings[6], name) }
func (gdClass EditorSettings) AddPropertyInfo(info Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[7], info) }
func (gdClass EditorSettings) SetProjectMetadata(section string, key string, data any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[8], section, key, data) }
func (gdClass EditorSettings) GetProjectMetadata(section string, key string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSettings[9], section, key, def) }
func (gdClass EditorSettings) SetFavorites(dirs []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[10], dirs) }
func (gdClass EditorSettings) GetFavorites() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorSettings[11]) }
func (gdClass EditorSettings) SetRecentDirs(dirs []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[12], dirs) }
func (gdClass EditorSettings) GetRecentDirs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorSettings[13]) }
func (gdClass EditorSettings) SetBuiltinActionOverride(name string, actions_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[14], name, actions_list) }
func (gdClass EditorSettings) CheckChangedSettingsInGroup(setting_prefix string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSettings[15], setting_prefix) }
func (gdClass EditorSettings) GetChangedSettings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSettings[16]) }
func (gdClass EditorSettings) MarkSettingChanged(setting string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[17], setting) }

type EditorSpinSlider gdnative.Object

var methodEditorSpinSlider [10]gdnative.Method
func (gdClass EditorSpinSlider) SetLabel(label string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[0], label) }
func (gdClass EditorSpinSlider) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorSpinSlider[1]) }
func (gdClass EditorSpinSlider) SetSuffix(suffix string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[2], suffix) }
func (gdClass EditorSpinSlider) GetSuffix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorSpinSlider[3]) }
func (gdClass EditorSpinSlider) SetReadOnly(read_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[4], read_only) }
func (gdClass EditorSpinSlider) IsReadOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[5]) }
func (gdClass EditorSpinSlider) SetFlat(flat bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[6], flat) }
func (gdClass EditorSpinSlider) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[7]) }
func (gdClass EditorSpinSlider) SetHideSlider(hide_slider bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[8], hide_slider) }
func (gdClass EditorSpinSlider) IsHidingSlider() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[9]) }

type EditorSyntaxHighlighter gdnative.Object

var methodEditorSyntaxHighlighter [2]gdnative.Method
func (gdClass EditorSyntaxHighlighter) GetNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorSyntaxHighlighter[0]) }
func (gdClass EditorSyntaxHighlighter) GetSupportedLanguagesImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSyntaxHighlighter[1]) }

type EditorTranslationParserPlugin gdnative.Object

var methodEditorTranslationParserPlugin [2]gdnative.Method
func (gdClass EditorTranslationParserPlugin) ParseFileImplementation(path string, msgids Array, msgids_context_plural Array)  { gdnative.Call(gdnative.Object(gdClass), methodEditorTranslationParserPlugin[0], path, msgids, msgids_context_plural) }
func (gdClass EditorTranslationParserPlugin) GetRecognizedExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorTranslationParserPlugin[1]) }

type EditorVCSInterface gdnative.Object

var methodEditorVCSInterface [11]gdnative.Method
func (gdClass EditorVCSInterface) IsAddonReady() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[0]) }
func (gdClass EditorVCSInterface) Initialize(project_root_path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[1], project_root_path) }
func (gdClass EditorVCSInterface) IsVcsInitialized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[2]) }
func (gdClass EditorVCSInterface) GetModifiedFilesData() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEditorVCSInterface[3]) }
func (gdClass EditorVCSInterface) StageFile(file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[4], file_path) }
func (gdClass EditorVCSInterface) UnstageFile(file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[5], file_path) }
func (gdClass EditorVCSInterface) Commit(msg string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[6], msg) }
func (gdClass EditorVCSInterface) GetFileDiff(file_path string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorVCSInterface[7], file_path) }
func (gdClass EditorVCSInterface) ShutDown() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[8]) }
func (gdClass EditorVCSInterface) GetProjectName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorVCSInterface[9]) }
func (gdClass EditorVCSInterface) GetVcsName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorVCSInterface[10]) }

type EncodedObjectAsID gdnative.Object

var methodEncodedObjectAsID [2]gdnative.Method
func (gdClass EncodedObjectAsID) SetObjectId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodEncodedObjectAsID[0], id) }
func (gdClass EncodedObjectAsID) GetObjectId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEncodedObjectAsID[1]) }

type Engine gdnative.Object

var methodEngine [34]gdnative.Method
func (gdClass Engine) SetPhysicsTicksPerSecond(physics_ticks_per_second int64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[0], physics_ticks_per_second) }
func (gdClass Engine) GetPhysicsTicksPerSecond() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[1]) }
func (gdClass Engine) SetPhysicsJitterFix(physics_jitter_fix float64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[2], physics_jitter_fix) }
func (gdClass Engine) GetPhysicsJitterFix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[3]) }
func (gdClass Engine) GetPhysicsInterpolationFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[4]) }
func (gdClass Engine) SetTargetFps(target_fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[5], target_fps) }
func (gdClass Engine) GetTargetFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[6]) }
func (gdClass Engine) SetTimeScale(time_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[7], time_scale) }
func (gdClass Engine) GetTimeScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[8]) }
func (gdClass Engine) GetFramesDrawn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[9]) }
func (gdClass Engine) GetFramesPerSecond() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[10]) }
func (gdClass Engine) GetPhysicsFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[11]) }
func (gdClass Engine) GetProcessFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[12]) }
func (gdClass Engine) GetMainLoop() MainLoop { return gdnative.Return[MainLoop](gdnative.Object(gdClass), methodEngine[13]) }
func (gdClass Engine) GetVersionInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[14]) }
func (gdClass Engine) GetAuthorInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[15]) }
func (gdClass Engine) GetCopyrightInfo() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEngine[16]) }
func (gdClass Engine) GetDonorInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[17]) }
func (gdClass Engine) GetLicenseInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[18]) }
func (gdClass Engine) GetLicenseText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[19]) }
func (gdClass Engine) GetArchitectureName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[20]) }
func (gdClass Engine) IsInPhysicsFrame() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[21]) }
func (gdClass Engine) HasSingleton(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[22], name) }
func (gdClass Engine) GetSingleton(name string) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEngine[23], name) }
func (gdClass Engine) RegisterSingleton(name string, instance Object)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[24], name, instance) }
func (gdClass Engine) UnregisterSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[25], name) }
func (gdClass Engine) GetSingletonList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEngine[26]) }
func (gdClass Engine) RegisterScriptLanguage(language ScriptLanguage)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[27], language) }
func (gdClass Engine) GetScriptLanguageCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[28]) }
func (gdClass Engine) GetScriptLanguage(index int64) ScriptLanguage { return gdnative.Return[ScriptLanguage](gdnative.Object(gdClass), methodEngine[29], index) }
func (gdClass Engine) IsEditorHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[30]) }
func (gdClass Engine) GetWriteMoviePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[31]) }
func (gdClass Engine) SetPrintErrorMessages(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[32], enabled) }
func (gdClass Engine) IsPrintingErrorMessages() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[33]) }

type EngineDebugger gdnative.Object

var methodEngineDebugger [11]gdnative.Method
func (gdClass EngineDebugger) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[0]) }
func (gdClass EngineDebugger) RegisterProfiler(name string, profiler EngineProfiler)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[1], name, profiler) }
func (gdClass EngineDebugger) UnregisterProfiler(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[2], name) }
func (gdClass EngineDebugger) IsProfiling(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[3], name) }
func (gdClass EngineDebugger) HasProfiler(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[4], name) }
func (gdClass EngineDebugger) ProfilerAddFrameData(name string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[5], name, data) }
func (gdClass EngineDebugger) ProfilerEnable(name string, enable bool, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[6], name, enable, arguments) }
func (gdClass EngineDebugger) RegisterMessageCapture(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[7], name, callable) }
func (gdClass EngineDebugger) UnregisterMessageCapture(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[8], name) }
func (gdClass EngineDebugger) HasCapture(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[9], name) }
func (gdClass EngineDebugger) SendMessage(message string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[10], message, data) }

type EngineProfiler gdnative.Object

var methodEngineProfiler [3]gdnative.Method
func (gdClass EngineProfiler) ToggleImplementation(enable bool, options Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineProfiler[0], enable, options) }
func (gdClass EngineProfiler) AddFrameImplementation(data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineProfiler[1], data) }
func (gdClass EngineProfiler) TickImplementation(frame_time float64, process_time float64, physics_time float64, physics_frame_time float64)  { gdnative.Call(gdnative.Object(gdClass), methodEngineProfiler[2], frame_time, process_time, physics_time, physics_frame_time) }

type Environment gdnative.Object

var methodEnvironment [180]gdnative.Method

type EnvironmentBGMode int64

const (
	EnvironmentBgClearColor EnvironmentBGMode = 0
	EnvironmentBgColor EnvironmentBGMode = 1
	EnvironmentBgSky EnvironmentBGMode = 2
	EnvironmentBgCanvas EnvironmentBGMode = 3
	EnvironmentBgKeep EnvironmentBGMode = 4
	EnvironmentBgCameraFeed EnvironmentBGMode = 5
	EnvironmentBgMax EnvironmentBGMode = 6
)

type EnvironmentAmbientSource int64

const (
	EnvironmentAmbientSourceBg EnvironmentAmbientSource = 0
	EnvironmentAmbientSourceDisabled EnvironmentAmbientSource = 1
	EnvironmentAmbientSourceColor EnvironmentAmbientSource = 2
	EnvironmentAmbientSourceSky EnvironmentAmbientSource = 3
)

type EnvironmentReflectionSource int64

const (
	EnvironmentReflectionSourceBg EnvironmentReflectionSource = 0
	EnvironmentReflectionSourceDisabled EnvironmentReflectionSource = 1
	EnvironmentReflectionSourceSky EnvironmentReflectionSource = 2
)

type EnvironmentToneMapper int64

const (
	EnvironmentToneMapperLinear EnvironmentToneMapper = 0
	EnvironmentToneMapperReinhardt EnvironmentToneMapper = 1
	EnvironmentToneMapperFilmic EnvironmentToneMapper = 2
	EnvironmentToneMapperAces EnvironmentToneMapper = 3
)

type EnvironmentGlowBlendMode int64

const (
	EnvironmentGlowBlendModeAdditive EnvironmentGlowBlendMode = 0
	EnvironmentGlowBlendModeScreen EnvironmentGlowBlendMode = 1
	EnvironmentGlowBlendModeSoftlight EnvironmentGlowBlendMode = 2
	EnvironmentGlowBlendModeReplace EnvironmentGlowBlendMode = 3
	EnvironmentGlowBlendModeMix EnvironmentGlowBlendMode = 4
)

type EnvironmentSDFGIYScale int64

const (
	EnvironmentSdfgiYScale50Percent EnvironmentSDFGIYScale = 0
	EnvironmentSdfgiYScale75Percent EnvironmentSDFGIYScale = 1
	EnvironmentSdfgiYScale100Percent EnvironmentSDFGIYScale = 2
)
func (gdClass Environment) SetBackground(mode EnvironmentBGMode)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[0], mode) }
func (gdClass Environment) GetBackground() EnvironmentBGMode { return gdnative.Return[EnvironmentBGMode](gdnative.Object(gdClass), methodEnvironment[1]) }
func (gdClass Environment) SetSky(sky Sky)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[2], sky) }
func (gdClass Environment) GetSky() Sky { return gdnative.Return[Sky](gdnative.Object(gdClass), methodEnvironment[3]) }
func (gdClass Environment) SetSkyCustomFov(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[4], scale) }
func (gdClass Environment) GetSkyCustomFov() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[5]) }
func (gdClass Environment) SetSkyRotation(euler_radians Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[6], euler_radians) }
func (gdClass Environment) GetSkyRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodEnvironment[7]) }
func (gdClass Environment) SetBgColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[8], color) }
func (gdClass Environment) GetBgColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[9]) }
func (gdClass Environment) SetBgEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[10], energy) }
func (gdClass Environment) GetBgEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[11]) }
func (gdClass Environment) SetCanvasMaxLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[12], layer) }
func (gdClass Environment) GetCanvasMaxLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[13]) }
func (gdClass Environment) SetCameraFeedId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[14], id) }
func (gdClass Environment) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[15]) }
func (gdClass Environment) SetAmbientLightColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[16], color) }
func (gdClass Environment) GetAmbientLightColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[17]) }
func (gdClass Environment) SetAmbientSource(source EnvironmentAmbientSource)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[18], source) }
func (gdClass Environment) GetAmbientSource() EnvironmentAmbientSource { return gdnative.Return[EnvironmentAmbientSource](gdnative.Object(gdClass), methodEnvironment[19]) }
func (gdClass Environment) SetAmbientLightEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[20], energy) }
func (gdClass Environment) GetAmbientLightEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[21]) }
func (gdClass Environment) SetAmbientLightSkyContribution(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[22], ratio) }
func (gdClass Environment) GetAmbientLightSkyContribution() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[23]) }
func (gdClass Environment) SetReflectionSource(source EnvironmentReflectionSource)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[24], source) }
func (gdClass Environment) GetReflectionSource() EnvironmentReflectionSource { return gdnative.Return[EnvironmentReflectionSource](gdnative.Object(gdClass), methodEnvironment[25]) }
func (gdClass Environment) SetTonemapper(mode EnvironmentToneMapper)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[26], mode) }
func (gdClass Environment) GetTonemapper() EnvironmentToneMapper { return gdnative.Return[EnvironmentToneMapper](gdnative.Object(gdClass), methodEnvironment[27]) }
func (gdClass Environment) SetTonemapExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[28], exposure) }
func (gdClass Environment) GetTonemapExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[29]) }
func (gdClass Environment) SetTonemapWhite(white float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[30], white) }
func (gdClass Environment) GetTonemapWhite() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[31]) }
func (gdClass Environment) SetTonemapAutoExposureEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[32], enabled) }
func (gdClass Environment) IsTonemapAutoExposureEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[33]) }
func (gdClass Environment) SetTonemapAutoExposureMax(exposure_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[34], exposure_max) }
func (gdClass Environment) GetTonemapAutoExposureMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[35]) }
func (gdClass Environment) SetTonemapAutoExposureMin(exposure_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[36], exposure_min) }
func (gdClass Environment) GetTonemapAutoExposureMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[37]) }
func (gdClass Environment) SetTonemapAutoExposureSpeed(exposure_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[38], exposure_speed) }
func (gdClass Environment) GetTonemapAutoExposureSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[39]) }
func (gdClass Environment) SetTonemapAutoExposureGrey(exposure_grey float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[40], exposure_grey) }
func (gdClass Environment) GetTonemapAutoExposureGrey() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[41]) }
func (gdClass Environment) SetSsrEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[42], enabled) }
func (gdClass Environment) IsSsrEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[43]) }
func (gdClass Environment) SetSsrMaxSteps(max_steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[44], max_steps) }
func (gdClass Environment) GetSsrMaxSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[45]) }
func (gdClass Environment) SetSsrFadeIn(fade_in float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[46], fade_in) }
func (gdClass Environment) GetSsrFadeIn() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[47]) }
func (gdClass Environment) SetSsrFadeOut(fade_out float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[48], fade_out) }
func (gdClass Environment) GetSsrFadeOut() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[49]) }
func (gdClass Environment) SetSsrDepthTolerance(depth_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[50], depth_tolerance) }
func (gdClass Environment) GetSsrDepthTolerance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[51]) }
func (gdClass Environment) SetSsaoEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[52], enabled) }
func (gdClass Environment) IsSsaoEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[53]) }
func (gdClass Environment) SetSsaoRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[54], radius) }
func (gdClass Environment) GetSsaoRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[55]) }
func (gdClass Environment) SetSsaoIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[56], intensity) }
func (gdClass Environment) GetSsaoIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[57]) }
func (gdClass Environment) SetSsaoPower(power float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[58], power) }
func (gdClass Environment) GetSsaoPower() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[59]) }
func (gdClass Environment) SetSsaoDetail(detail float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[60], detail) }
func (gdClass Environment) GetSsaoDetail() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[61]) }
func (gdClass Environment) SetSsaoHorizon(horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[62], horizon) }
func (gdClass Environment) GetSsaoHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[63]) }
func (gdClass Environment) SetSsaoSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[64], sharpness) }
func (gdClass Environment) GetSsaoSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[65]) }
func (gdClass Environment) SetSsaoDirectLightAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[66], amount) }
func (gdClass Environment) GetSsaoDirectLightAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[67]) }
func (gdClass Environment) SetSsaoAoChannelAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[68], amount) }
func (gdClass Environment) GetSsaoAoChannelAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[69]) }
func (gdClass Environment) SetSsilEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[70], enabled) }
func (gdClass Environment) IsSsilEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[71]) }
func (gdClass Environment) SetSsilRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[72], radius) }
func (gdClass Environment) GetSsilRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[73]) }
func (gdClass Environment) SetSsilIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[74], intensity) }
func (gdClass Environment) GetSsilIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[75]) }
func (gdClass Environment) SetSsilSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[76], sharpness) }
func (gdClass Environment) GetSsilSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[77]) }
func (gdClass Environment) SetSsilNormalRejection(normal_rejection float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[78], normal_rejection) }
func (gdClass Environment) GetSsilNormalRejection() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[79]) }
func (gdClass Environment) SetSdfgiEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[80], enabled) }
func (gdClass Environment) IsSdfgiEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[81]) }
func (gdClass Environment) SetSdfgiCascades(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[82], amount) }
func (gdClass Environment) GetSdfgiCascades() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[83]) }
func (gdClass Environment) SetSdfgiMinCellSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[84], size) }
func (gdClass Environment) GetSdfgiMinCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[85]) }
func (gdClass Environment) SetSdfgiMaxDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[86], distance) }
func (gdClass Environment) GetSdfgiMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[87]) }
func (gdClass Environment) SetSdfgiCascade0Distance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[88], distance) }
func (gdClass Environment) GetSdfgiCascade0Distance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[89]) }
func (gdClass Environment) SetSdfgiYScale(scale EnvironmentSDFGIYScale)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[90], scale) }
func (gdClass Environment) GetSdfgiYScale() EnvironmentSDFGIYScale { return gdnative.Return[EnvironmentSDFGIYScale](gdnative.Object(gdClass), methodEnvironment[91]) }
func (gdClass Environment) SetSdfgiUseOcclusion(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[92], enable) }
func (gdClass Environment) IsSdfgiUsingOcclusion() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[93]) }
func (gdClass Environment) SetSdfgiBounceFeedback(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[94], amount) }
func (gdClass Environment) GetSdfgiBounceFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[95]) }
func (gdClass Environment) SetSdfgiReadSkyLight(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[96], enable) }
func (gdClass Environment) IsSdfgiReadingSkyLight() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[97]) }
func (gdClass Environment) SetSdfgiEnergy(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[98], amount) }
func (gdClass Environment) GetSdfgiEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[99]) }
func (gdClass Environment) SetSdfgiNormalBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[100], bias) }
func (gdClass Environment) GetSdfgiNormalBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[101]) }
func (gdClass Environment) SetSdfgiProbeBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[102], bias) }
func (gdClass Environment) GetSdfgiProbeBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[103]) }
func (gdClass Environment) SetGlowEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[104], enabled) }
func (gdClass Environment) IsGlowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[105]) }
func (gdClass Environment) SetGlowLevel(idx int64, intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[106], idx, intensity) }
func (gdClass Environment) GetGlowLevel(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[107], idx) }
func (gdClass Environment) SetGlowNormalized(normalize bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[108], normalize) }
func (gdClass Environment) IsGlowNormalized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[109]) }
func (gdClass Environment) SetGlowIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[110], intensity) }
func (gdClass Environment) GetGlowIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[111]) }
func (gdClass Environment) SetGlowStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[112], strength) }
func (gdClass Environment) GetGlowStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[113]) }
func (gdClass Environment) SetGlowMix(mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[114], mix) }
func (gdClass Environment) GetGlowMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[115]) }
func (gdClass Environment) SetGlowBloom(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[116], amount) }
func (gdClass Environment) GetGlowBloom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[117]) }
func (gdClass Environment) SetGlowBlendMode(mode EnvironmentGlowBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[118], mode) }
func (gdClass Environment) GetGlowBlendMode() EnvironmentGlowBlendMode { return gdnative.Return[EnvironmentGlowBlendMode](gdnative.Object(gdClass), methodEnvironment[119]) }
func (gdClass Environment) SetGlowHdrBleedThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[120], threshold) }
func (gdClass Environment) GetGlowHdrBleedThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[121]) }
func (gdClass Environment) SetGlowHdrBleedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[122], scale) }
func (gdClass Environment) GetGlowHdrBleedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[123]) }
func (gdClass Environment) SetGlowHdrLuminanceCap(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[124], amount) }
func (gdClass Environment) GetGlowHdrLuminanceCap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[125]) }
func (gdClass Environment) SetGlowMapStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[126], strength) }
func (gdClass Environment) GetGlowMapStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[127]) }
func (gdClass Environment) SetGlowMap(mode Texture)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[128], mode) }
func (gdClass Environment) GetGlowMap() Texture { return gdnative.Return[Texture](gdnative.Object(gdClass), methodEnvironment[129]) }
func (gdClass Environment) SetFogEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[130], enabled) }
func (gdClass Environment) IsFogEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[131]) }
func (gdClass Environment) SetFogLightColor(light_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[132], light_color) }
func (gdClass Environment) GetFogLightColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[133]) }
func (gdClass Environment) SetFogLightEnergy(light_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[134], light_energy) }
func (gdClass Environment) GetFogLightEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[135]) }
func (gdClass Environment) SetFogSunScatter(sun_scatter float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[136], sun_scatter) }
func (gdClass Environment) GetFogSunScatter() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[137]) }
func (gdClass Environment) SetFogDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[138], density) }
func (gdClass Environment) GetFogDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[139]) }
func (gdClass Environment) SetFogHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[140], height) }
func (gdClass Environment) GetFogHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[141]) }
func (gdClass Environment) SetFogHeightDensity(height_density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[142], height_density) }
func (gdClass Environment) GetFogHeightDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[143]) }
func (gdClass Environment) SetFogAerialPerspective(aerial_perspective float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[144], aerial_perspective) }
func (gdClass Environment) GetFogAerialPerspective() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[145]) }
func (gdClass Environment) SetVolumetricFogEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[146], enabled) }
func (gdClass Environment) IsVolumetricFogEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[147]) }
func (gdClass Environment) SetVolumetricFogEmission(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[148], color) }
func (gdClass Environment) GetVolumetricFogEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[149]) }
func (gdClass Environment) SetVolumetricFogAlbedo(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[150], color) }
func (gdClass Environment) GetVolumetricFogAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[151]) }
func (gdClass Environment) SetVolumetricFogDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[152], density) }
func (gdClass Environment) GetVolumetricFogDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[153]) }
func (gdClass Environment) SetVolumetricFogEmissionEnergy(begin float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[154], begin) }
func (gdClass Environment) GetVolumetricFogEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[155]) }
func (gdClass Environment) SetVolumetricFogAnisotropy(anisotropy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[156], anisotropy) }
func (gdClass Environment) GetVolumetricFogAnisotropy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[157]) }
func (gdClass Environment) SetVolumetricFogLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[158], length) }
func (gdClass Environment) GetVolumetricFogLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[159]) }
func (gdClass Environment) SetVolumetricFogDetailSpread(detail_spread float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[160], detail_spread) }
func (gdClass Environment) GetVolumetricFogDetailSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[161]) }
func (gdClass Environment) SetVolumetricFogGiInject(gi_inject float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[162], gi_inject) }
func (gdClass Environment) GetVolumetricFogGiInject() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[163]) }
func (gdClass Environment) SetVolumetricFogAmbientInject(enabled float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[164], enabled) }
func (gdClass Environment) GetVolumetricFogAmbientInject() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[165]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[166], enabled) }
func (gdClass Environment) IsVolumetricFogTemporalReprojectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[167]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[168], temporal_reprojection_amount) }
func (gdClass Environment) GetVolumetricFogTemporalReprojectionAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[169]) }
func (gdClass Environment) SetAdjustmentEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[170], enabled) }
func (gdClass Environment) IsAdjustmentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[171]) }
func (gdClass Environment) SetAdjustmentBrightness(brightness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[172], brightness) }
func (gdClass Environment) GetAdjustmentBrightness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[173]) }
func (gdClass Environment) SetAdjustmentContrast(contrast float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[174], contrast) }
func (gdClass Environment) GetAdjustmentContrast() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[175]) }
func (gdClass Environment) SetAdjustmentSaturation(saturation float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[176], saturation) }
func (gdClass Environment) GetAdjustmentSaturation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[177]) }
func (gdClass Environment) SetAdjustmentColorCorrection(color_correction Texture)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[178], color_correction) }
func (gdClass Environment) GetAdjustmentColorCorrection() Texture { return gdnative.Return[Texture](gdnative.Object(gdClass), methodEnvironment[179]) }

type Expression gdnative.Object

var methodExpression [4]gdnative.Method
func (gdClass Expression) Parse(expression string, input_names []string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodExpression[0], expression, input_names) }
func (gdClass Expression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodExpression[1], inputs, base_instance, show_error, const_calls_only) }
func (gdClass Expression) HasExecuteFailed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodExpression[2]) }
func (gdClass Expression) GetErrorText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodExpression[3]) }

type FastNoiseLite gdnative.Object

var methodFastNoiseLite [42]gdnative.Method

type FastNoiseLiteNoiseType int64

const (
	FastNoiseLiteTypeValue FastNoiseLiteNoiseType = 5
	FastNoiseLiteTypeValueCubic FastNoiseLiteNoiseType = 4
	FastNoiseLiteTypePerlin FastNoiseLiteNoiseType = 3
	FastNoiseLiteTypeCellular FastNoiseLiteNoiseType = 2
	FastNoiseLiteTypeSimplex FastNoiseLiteNoiseType = 0
	FastNoiseLiteTypeSimplexSmooth FastNoiseLiteNoiseType = 1
)

type FastNoiseLiteFractalType int64

const (
	FastNoiseLiteFractalNone FastNoiseLiteFractalType = 0
	FastNoiseLiteFractalFbm FastNoiseLiteFractalType = 1
	FastNoiseLiteFractalRidged FastNoiseLiteFractalType = 2
	FastNoiseLiteFractalPingPong FastNoiseLiteFractalType = 3
)

type FastNoiseLiteCellularDistanceFunction int64

const (
	FastNoiseLiteDistanceEuclidean FastNoiseLiteCellularDistanceFunction = 0
	FastNoiseLiteDistanceEuclideanSquared FastNoiseLiteCellularDistanceFunction = 1
	FastNoiseLiteDistanceManhattan FastNoiseLiteCellularDistanceFunction = 2
	FastNoiseLiteDistanceHybrid FastNoiseLiteCellularDistanceFunction = 3
)

type FastNoiseLiteCellularReturnType int64

const (
	FastNoiseLiteReturnCellValue FastNoiseLiteCellularReturnType = 0
	FastNoiseLiteReturnDistance FastNoiseLiteCellularReturnType = 1
	FastNoiseLiteReturnDistance2 FastNoiseLiteCellularReturnType = 2
	FastNoiseLiteReturnDistance2Add FastNoiseLiteCellularReturnType = 3
	FastNoiseLiteReturnDistance2Sub FastNoiseLiteCellularReturnType = 4
	FastNoiseLiteReturnDistance2Mul FastNoiseLiteCellularReturnType = 5
	FastNoiseLiteReturnDistance2Div FastNoiseLiteCellularReturnType = 6
)

type FastNoiseLiteDomainWarpType int64

const (
	FastNoiseLiteDomainWarpSimplex FastNoiseLiteDomainWarpType = 0
	FastNoiseLiteDomainWarpSimplexReduced FastNoiseLiteDomainWarpType = 1
	FastNoiseLiteDomainWarpBasicGrid FastNoiseLiteDomainWarpType = 2
)

type FastNoiseLiteDomainWarpFractalType int64

const (
	FastNoiseLiteDomainWarpFractalNone FastNoiseLiteDomainWarpFractalType = 0
	FastNoiseLiteDomainWarpFractalProgressive FastNoiseLiteDomainWarpFractalType = 1
	FastNoiseLiteDomainWarpFractalIndependent FastNoiseLiteDomainWarpFractalType = 2
)
func (gdClass FastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[0], atype) }
func (gdClass FastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType { return gdnative.Return[FastNoiseLiteNoiseType](gdnative.Object(gdClass), methodFastNoiseLite[1]) }
func (gdClass FastNoiseLite) SetSeed(seed int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[2], seed) }
func (gdClass FastNoiseLite) GetSeed() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[3]) }
func (gdClass FastNoiseLite) SetFrequency(freq float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[4], freq) }
func (gdClass FastNoiseLite) GetFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[5]) }
func (gdClass FastNoiseLite) SetOffset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[6], offset) }
func (gdClass FastNoiseLite) GetOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodFastNoiseLite[7]) }
func (gdClass FastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[8], atype) }
func (gdClass FastNoiseLite) GetFractalType() FastNoiseLiteFractalType { return gdnative.Return[FastNoiseLiteFractalType](gdnative.Object(gdClass), methodFastNoiseLite[9]) }
func (gdClass FastNoiseLite) SetFractalOctaves(octave_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[10], octave_count) }
func (gdClass FastNoiseLite) GetFractalOctaves() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[11]) }
func (gdClass FastNoiseLite) SetFractalLacunarity(lacunarity float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[12], lacunarity) }
func (gdClass FastNoiseLite) GetFractalLacunarity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[13]) }
func (gdClass FastNoiseLite) SetFractalGain(gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[14], gain) }
func (gdClass FastNoiseLite) GetFractalGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[15]) }
func (gdClass FastNoiseLite) SetFractalWeightedStrength(weighted_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[16], weighted_strength) }
func (gdClass FastNoiseLite) GetFractalWeightedStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[17]) }
func (gdClass FastNoiseLite) SetFractalPingPongStrength(ping_pong_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[18], ping_pong_strength) }
func (gdClass FastNoiseLite) GetFractalPingPongStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[19]) }
func (gdClass FastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[20], fn) }
func (gdClass FastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction { return gdnative.Return[FastNoiseLiteCellularDistanceFunction](gdnative.Object(gdClass), methodFastNoiseLite[21]) }
func (gdClass FastNoiseLite) SetCellularJitter(jitter float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[22], jitter) }
func (gdClass FastNoiseLite) GetCellularJitter() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[23]) }
func (gdClass FastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[24], ret) }
func (gdClass FastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType { return gdnative.Return[FastNoiseLiteCellularReturnType](gdnative.Object(gdClass), methodFastNoiseLite[25]) }
func (gdClass FastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[26], domain_warp_enabled) }
func (gdClass FastNoiseLite) IsDomainWarpEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFastNoiseLite[27]) }
func (gdClass FastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[28], domain_warp_type) }
func (gdClass FastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType { return gdnative.Return[FastNoiseLiteDomainWarpType](gdnative.Object(gdClass), methodFastNoiseLite[29]) }
func (gdClass FastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[30], domain_warp_amplitude) }
func (gdClass FastNoiseLite) GetDomainWarpAmplitude() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[31]) }
func (gdClass FastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[32], domain_warp_frequency) }
func (gdClass FastNoiseLite) GetDomainWarpFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[33]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[34], domain_warp_fractal_type) }
func (gdClass FastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType { return gdnative.Return[FastNoiseLiteDomainWarpFractalType](gdnative.Object(gdClass), methodFastNoiseLite[35]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[36], domain_warp_octave_count) }
func (gdClass FastNoiseLite) GetDomainWarpFractalOctaves() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[37]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[38], domain_warp_lacunarity) }
func (gdClass FastNoiseLite) GetDomainWarpFractalLacunarity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[39]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[40], domain_warp_gain) }
func (gdClass FastNoiseLite) GetDomainWarpFractalGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[41]) }

type File gdnative.Object

var methodFile [47]gdnative.Method

type FileModeFlags int64

const (
	FileRead FileModeFlags = 1
	FileWrite FileModeFlags = 2
	FileReadWrite FileModeFlags = 3
	FileWriteRead FileModeFlags = 7
)

type FileCompressionMode int64

const (
	FileCompressionFastlz FileCompressionMode = 0
	FileCompressionDeflate FileCompressionMode = 1
	FileCompressionZstd FileCompressionMode = 2
	FileCompressionGzip FileCompressionMode = 3
)
func (gdClass File) OpenEncrypted(path string, mode_flags FileModeFlags, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[0], path, mode_flags, key) }
func (gdClass File) OpenEncryptedWithPass(path string, mode_flags FileModeFlags, pass string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[1], path, mode_flags, pass) }
func (gdClass File) OpenCompressed(path string, mode_flags FileModeFlags, compression_mode FileCompressionMode) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[2], path, mode_flags, compression_mode) }
func (gdClass File) Open(path string, flags FileModeFlags) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[3], path, flags) }
func (gdClass File) Flush()  { gdnative.Call(gdnative.Object(gdClass), methodFile[4]) }
func (gdClass File) Close()  { gdnative.Call(gdnative.Object(gdClass), methodFile[5]) }
func (gdClass File) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[6]) }
func (gdClass File) GetPathAbsolute() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[7]) }
func (gdClass File) IsOpen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[8]) }
func (gdClass File) Seek(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[9], position) }
func (gdClass File) SeekEnd(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[10], position) }
func (gdClass File) GetPosition() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[11]) }
func (gdClass File) GetLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[12]) }
func (gdClass File) EofReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[13]) }
func (gdClass File) Get8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[14]) }
func (gdClass File) Get16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[15]) }
func (gdClass File) Get32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[16]) }
func (gdClass File) Get64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[17]) }
func (gdClass File) GetFloat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[18]) }
func (gdClass File) GetDouble() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[19]) }
func (gdClass File) GetReal() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[20]) }
func (gdClass File) GetBuffer(length int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodFile[21], length) }
func (gdClass File) GetLine() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[22]) }
func (gdClass File) GetCsvLine(delim string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFile[23], delim) }
func (gdClass File) GetAsText(skip_cr bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[24], skip_cr) }
func (gdClass File) GetMd5(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[25], path) }
func (gdClass File) GetSha256(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[26], path) }
func (gdClass File) IsBigEndian() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[27]) }
func (gdClass File) SetBigEndian(big_endian bool)  { gdnative.Call(gdnative.Object(gdClass), methodFile[28], big_endian) }
func (gdClass File) GetError() error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[29]) }
func (gdClass File) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodFile[30], allow_objects) }
func (gdClass File) Store8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[31], value) }
func (gdClass File) Store16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[32], value) }
func (gdClass File) Store32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[33], value) }
func (gdClass File) Store64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[34], value) }
func (gdClass File) StoreFloat(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[35], value) }
func (gdClass File) StoreDouble(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[36], value) }
func (gdClass File) StoreReal(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[37], value) }
func (gdClass File) StoreBuffer(buffer []byte)  { gdnative.Call(gdnative.Object(gdClass), methodFile[38], buffer) }
func (gdClass File) StoreLine(line string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[39], line) }
func (gdClass File) StoreCsvLine(values []string, delim string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[40], values, delim) }
func (gdClass File) StoreString(s string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[41], s) }
func (gdClass File) StoreVar(value any, full_objects bool)  { gdnative.Call(gdnative.Object(gdClass), methodFile[42], value, full_objects) }
func (gdClass File) StorePascalString(s string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[43], s) }
func (gdClass File) GetPascalString() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[44]) }
func (gdClass File) FileExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[45], path) }
func (gdClass File) GetModifiedTime(file string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[46], file) }

type FileDialog gdnative.Object

var methodFileDialog [24]gdnative.Method

type FileDialogFileMode int64

const (
	FileDialogFileModeOpenFile FileDialogFileMode = 0
	FileDialogFileModeOpenFiles FileDialogFileMode = 1
	FileDialogFileModeOpenDir FileDialogFileMode = 2
	FileDialogFileModeOpenAny FileDialogFileMode = 3
	FileDialogFileModeSaveFile FileDialogFileMode = 4
)

type FileDialogAccess int64

const (
	FileDialogAccessResources FileDialogAccess = 0
	FileDialogAccessUserdata FileDialogAccess = 1
	FileDialogAccessFilesystem FileDialogAccess = 2
)
func (gdClass FileDialog) ClearFilters()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[0]) }
func (gdClass FileDialog) AddFilter(filter string, description string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[1], filter, description) }
func (gdClass FileDialog) SetFilters(filters []string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[2], filters) }
func (gdClass FileDialog) GetFilters() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFileDialog[3]) }
func (gdClass FileDialog) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[4]) }
func (gdClass FileDialog) GetCurrentFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[5]) }
func (gdClass FileDialog) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[6]) }
func (gdClass FileDialog) SetCurrentDir(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[7], dir) }
func (gdClass FileDialog) SetCurrentFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[8], file) }
func (gdClass FileDialog) SetCurrentPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[9], path) }
func (gdClass FileDialog) SetModeOverridesTitle(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[10], override) }
func (gdClass FileDialog) IsModeOverridingTitle() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFileDialog[11]) }
func (gdClass FileDialog) SetFileMode(mode FileDialogFileMode)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[12], mode) }
func (gdClass FileDialog) GetFileMode() FileDialogFileMode { return gdnative.Return[FileDialogFileMode](gdnative.Object(gdClass), methodFileDialog[13]) }
func (gdClass FileDialog) GetVbox() VBoxContainer { return gdnative.Return[VBoxContainer](gdnative.Object(gdClass), methodFileDialog[14]) }
func (gdClass FileDialog) GetLineEdit() LineEdit { return gdnative.Return[LineEdit](gdnative.Object(gdClass), methodFileDialog[15]) }
func (gdClass FileDialog) SetAccess(access FileDialogAccess)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[16], access) }
func (gdClass FileDialog) GetAccess() FileDialogAccess { return gdnative.Return[FileDialogAccess](gdnative.Object(gdClass), methodFileDialog[17]) }
func (gdClass FileDialog) SetRootSubfolder(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[18], dir) }
func (gdClass FileDialog) GetRootSubfolder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[19]) }
func (gdClass FileDialog) SetShowHiddenFiles(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[20], show) }
func (gdClass FileDialog) IsShowingHiddenFiles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFileDialog[21]) }
func (gdClass FileDialog) DeselectAll()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[22]) }
func (gdClass FileDialog) Invalidate()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[23]) }

type FileSystemDock gdnative.Object

var methodFileSystemDock [1]gdnative.Method
func (gdClass FileSystemDock) NavigateToPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodFileSystemDock[0], path) }

type FlowContainer gdnative.Object

var methodFlowContainer [1]gdnative.Method
func (gdClass FlowContainer) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFlowContainer[0]) }

type FogMaterial gdnative.Object

var methodFogMaterial [12]gdnative.Method
func (gdClass FogMaterial) SetDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[0], density) }
func (gdClass FogMaterial) GetDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[1]) }
func (gdClass FogMaterial) SetAlbedo(albedo Color)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[2], albedo) }
func (gdClass FogMaterial) GetAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodFogMaterial[3]) }
func (gdClass FogMaterial) SetEmission(emission Color)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[4], emission) }
func (gdClass FogMaterial) GetEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodFogMaterial[5]) }
func (gdClass FogMaterial) SetHeightFalloff(height_falloff float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[6], height_falloff) }
func (gdClass FogMaterial) GetHeightFalloff() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[7]) }
func (gdClass FogMaterial) SetEdgeFade(edge_fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[8], edge_fade) }
func (gdClass FogMaterial) GetEdgeFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[9]) }
func (gdClass FogMaterial) SetDensityTexture(density_texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[10], density_texture) }
func (gdClass FogMaterial) GetDensityTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodFogMaterial[11]) }

type FogVolume gdnative.Object

var methodFogVolume [6]gdnative.Method
func (gdClass FogVolume) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[0], extents) }
func (gdClass FogVolume) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodFogVolume[1]) }
func (gdClass FogVolume) SetShape(shape RenderingServerFogVolumeShape)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[2], shape) }
func (gdClass FogVolume) GetShape() RenderingServerFogVolumeShape { return gdnative.Return[RenderingServerFogVolumeShape](gdnative.Object(gdClass), methodFogVolume[3]) }
func (gdClass FogVolume) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[4], material) }
func (gdClass FogVolume) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodFogVolume[5]) }

type Font gdnative.Object

var methodFont [31]gdnative.Method
func (gdClass Font) SetFallbacks(fallbacks Array)  { gdnative.Call(gdnative.Object(gdClass), methodFont[0], fallbacks) }
func (gdClass Font) GetFallbacks() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFont[1]) }
func (gdClass Font) FindVariation(variation_coordinates Dictionary, face_index int64, strength float64, transform Transform2D) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodFont[2], variation_coordinates, face_index, strength, transform) }
func (gdClass Font) GetRids() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFont[3]) }
func (gdClass Font) GetHeight(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[4], font_size) }
func (gdClass Font) GetAscent(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[5], font_size) }
func (gdClass Font) GetDescent(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[6], font_size) }
func (gdClass Font) GetUnderlinePosition(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[7], font_size) }
func (gdClass Font) GetUnderlineThickness(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[8], font_size) }
func (gdClass Font) GetFontName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[9]) }
func (gdClass Font) GetFontStyleName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[10]) }
func (gdClass Font) GetFontStyle() TextServerFontStyle { return gdnative.Return[TextServerFontStyle](gdnative.Object(gdClass), methodFont[11]) }
func (gdClass Font) GetSpacing(spacing TextServerSpacingType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFont[12], spacing) }
func (gdClass Font) GetOpentypeFeatures() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[13]) }
func (gdClass Font) SetCacheCapacity(single_line int64, multi_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodFont[14], single_line, multi_line) }
func (gdClass Font) GetStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[15], text, alignment, width, font_size, jst_flags, direction, orientation) }
func (gdClass Font) GetMultilineStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[16], text, alignment, width, font_size, max_lines, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) DrawString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[17], canvas_item, pos, text, alignment, width, font_size, modulate, jst_flags, direction, orientation) }
func (gdClass Font) DrawMultilineString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[18], canvas_item, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) DrawStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[19], canvas_item, pos, text, alignment, width, font_size, size, modulate, jst_flags, direction, orientation) }
func (gdClass Font) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[20], canvas_item, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) GetCharSize(char int64, font_size int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[21], char, font_size) }
func (gdClass Font) DrawChar(canvas_item RID, pos Vector2, char int64, font_size int64, modulate Color) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[22], canvas_item, pos, char, font_size, modulate) }
func (gdClass Font) DrawCharOutline(canvas_item RID, pos Vector2, char int64, font_size int64, size int64, modulate Color) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[23], canvas_item, pos, char, font_size, size, modulate) }
func (gdClass Font) HasChar(char int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[24], char) }
func (gdClass Font) GetSupportedChars() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[25]) }
func (gdClass Font) IsLanguageSupported(language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[26], language) }
func (gdClass Font) IsScriptSupported(script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[27], script) }
func (gdClass Font) GetSupportedFeatureList() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[28]) }
func (gdClass Font) GetSupportedVariationList() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[29]) }
func (gdClass Font) GetFaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFont[30]) }

type FontFile gdnative.Object

var methodFontFile [89]gdnative.Method
func (gdClass FontFile) LoadBitmapFont(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFontFile[0], path) }
func (gdClass FontFile) LoadDynamicFont(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFontFile[1], path) }
func (gdClass FontFile) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[2], data) }
func (gdClass FontFile) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodFontFile[3]) }
func (gdClass FontFile) SetFontName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[4], name) }
func (gdClass FontFile) SetFontStyleName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[5], name) }
func (gdClass FontFile) SetFontStyle(style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[6], style) }
func (gdClass FontFile) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[7], antialiased) }
func (gdClass FontFile) IsAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[8]) }
func (gdClass FontFile) SetGenerateMipmaps(generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[9], generate_mipmaps) }
func (gdClass FontFile) GetGenerateMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[10]) }
func (gdClass FontFile) SetMultichannelSignedDistanceField(msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[11], msdf) }
func (gdClass FontFile) IsMultichannelSignedDistanceField() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[12]) }
func (gdClass FontFile) SetMsdfPixelRange(msdf_pixel_range int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[13], msdf_pixel_range) }
func (gdClass FontFile) GetMsdfPixelRange() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[14]) }
func (gdClass FontFile) SetMsdfSize(msdf_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[15], msdf_size) }
func (gdClass FontFile) GetMsdfSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[16]) }
func (gdClass FontFile) SetFixedSize(fixed_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[17], fixed_size) }
func (gdClass FontFile) GetFixedSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[18]) }
func (gdClass FontFile) SetForceAutohinter(force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[19], force_autohinter) }
func (gdClass FontFile) IsForceAutohinter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[20]) }
func (gdClass FontFile) SetHinting(hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[21], hinting) }
func (gdClass FontFile) GetHinting() TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodFontFile[22]) }
func (gdClass FontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[23], subpixel_positioning) }
func (gdClass FontFile) GetSubpixelPositioning() TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodFontFile[24]) }
func (gdClass FontFile) SetOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[25], oversampling) }
func (gdClass FontFile) GetOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[26]) }
func (gdClass FontFile) GetCacheCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[27]) }
func (gdClass FontFile) ClearCache()  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[28]) }
func (gdClass FontFile) RemoveCache(cache_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[29], cache_index) }
func (gdClass FontFile) GetSizeCacheList(cache_index int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[30], cache_index) }
func (gdClass FontFile) ClearSizeCache(cache_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[31], cache_index) }
func (gdClass FontFile) RemoveSizeCache(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[32], cache_index, size) }
func (gdClass FontFile) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[33], cache_index, variation_coordinates) }
func (gdClass FontFile) GetVariationCoordinates(cache_index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontFile[34], cache_index) }
func (gdClass FontFile) SetEmbolden(cache_index int64, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[35], cache_index, strength) }
func (gdClass FontFile) GetEmbolden(cache_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[36], cache_index) }
func (gdClass FontFile) SetTransform(cache_index int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[37], cache_index, transform) }
func (gdClass FontFile) GetTransform(cache_index int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodFontFile[38], cache_index) }
func (gdClass FontFile) SetFaceIndex(cache_index int64, face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[39], cache_index, face_index) }
func (gdClass FontFile) GetFaceIndex(cache_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[40], cache_index) }
func (gdClass FontFile) SetCacheAscent(cache_index int64, size int64, ascent float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[41], cache_index, size, ascent) }
func (gdClass FontFile) GetCacheAscent(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[42], cache_index, size) }
func (gdClass FontFile) SetCacheDescent(cache_index int64, size int64, descent float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[43], cache_index, size, descent) }
func (gdClass FontFile) GetCacheDescent(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[44], cache_index, size) }
func (gdClass FontFile) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[45], cache_index, size, underline_position) }
func (gdClass FontFile) GetCacheUnderlinePosition(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[46], cache_index, size) }
func (gdClass FontFile) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[47], cache_index, size, underline_thickness) }
func (gdClass FontFile) GetCacheUnderlineThickness(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[48], cache_index, size) }
func (gdClass FontFile) SetCacheScale(cache_index int64, size int64, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[49], cache_index, size, scale) }
func (gdClass FontFile) GetCacheScale(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[50], cache_index, size) }
func (gdClass FontFile) GetTextureCount(cache_index int64, size Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[51], cache_index, size) }
func (gdClass FontFile) ClearTextures(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[52], cache_index, size) }
func (gdClass FontFile) RemoveTexture(cache_index int64, size Vector2i, texture_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[53], cache_index, size, texture_index) }
func (gdClass FontFile) SetTextureImage(cache_index int64, size Vector2i, texture_index int64, image Image)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[54], cache_index, size, texture_index, image) }
func (gdClass FontFile) GetTextureImage(cache_index int64, size Vector2i, texture_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodFontFile[55], cache_index, size, texture_index) }
func (gdClass FontFile) SetTextureOffsets(cache_index int64, size Vector2i, texture_index int64, offset []int32)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[56], cache_index, size, texture_index, offset) }
func (gdClass FontFile) GetTextureOffsets(cache_index int64, size Vector2i, texture_index int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodFontFile[57], cache_index, size, texture_index) }
func (gdClass FontFile) GetGlyphList(cache_index int64, size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[58], cache_index, size) }
func (gdClass FontFile) ClearGlyphs(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[59], cache_index, size) }
func (gdClass FontFile) RemoveGlyph(cache_index int64, size Vector2i, glyph int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[60], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[61], cache_index, size, glyph, advance) }
func (gdClass FontFile) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[62], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphOffset(cache_index int64, size Vector2i, glyph int64, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[63], cache_index, size, glyph, offset) }
func (gdClass FontFile) GetGlyphOffset(cache_index int64, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[64], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphSize(cache_index int64, size Vector2i, glyph int64, gl_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[65], cache_index, size, glyph, gl_size) }
func (gdClass FontFile) GetGlyphSize(cache_index int64, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[66], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphUvRect(cache_index int64, size Vector2i, glyph int64, uv_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[67], cache_index, size, glyph, uv_rect) }
func (gdClass FontFile) GetGlyphUvRect(cache_index int64, size Vector2i, glyph int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodFontFile[68], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64, texture_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[69], cache_index, size, glyph, texture_idx) }
func (gdClass FontFile) GetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[70], cache_index, size, glyph) }
func (gdClass FontFile) GetKerningList(cache_index int64, size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[71], cache_index, size) }
func (gdClass FontFile) ClearKerningMap(cache_index int64, size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[72], cache_index, size) }
func (gdClass FontFile) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[73], cache_index, size, glyph_pair) }
func (gdClass FontFile) SetKerning(cache_index int64, size int64, glyph_pair Vector2i, kerning Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[74], cache_index, size, glyph_pair, kerning) }
func (gdClass FontFile) GetKerning(cache_index int64, size int64, glyph_pair Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[75], cache_index, size, glyph_pair) }
func (gdClass FontFile) RenderRange(cache_index int64, size Vector2i, start int64, end int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[76], cache_index, size, start, end) }
func (gdClass FontFile) RenderGlyph(cache_index int64, size Vector2i, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[77], cache_index, size, index) }
func (gdClass FontFile) SetLanguageSupportOverride(language string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[78], language, supported) }
func (gdClass FontFile) GetLanguageSupportOverride(language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[79], language) }
func (gdClass FontFile) RemoveLanguageSupportOverride(language string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[80], language) }
func (gdClass FontFile) GetLanguageSupportOverrides() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFontFile[81]) }
func (gdClass FontFile) SetScriptSupportOverride(script string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[82], script, supported) }
func (gdClass FontFile) GetScriptSupportOverride(script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[83], script) }
func (gdClass FontFile) RemoveScriptSupportOverride(script string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[84], script) }
func (gdClass FontFile) GetScriptSupportOverrides() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFontFile[85]) }
func (gdClass FontFile) SetOpentypeFeatureOverrides(overrides Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[86], overrides) }
func (gdClass FontFile) GetOpentypeFeatureOverrides() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontFile[87]) }
func (gdClass FontFile) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[88], size, char, variation_selector) }

type FontVariation gdnative.Object

var methodFontVariation [12]gdnative.Method
func (gdClass FontVariation) SetBaseFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[0], font) }
func (gdClass FontVariation) GetBaseFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodFontVariation[1]) }
func (gdClass FontVariation) SetVariationOpentype(coords Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[2], coords) }
func (gdClass FontVariation) GetVariationOpentype() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontVariation[3]) }
func (gdClass FontVariation) SetVariationEmbolden(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[4], strength) }
func (gdClass FontVariation) GetVariationEmbolden() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontVariation[5]) }
func (gdClass FontVariation) SetVariationFaceIndex(face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[6], face_index) }
func (gdClass FontVariation) GetVariationFaceIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontVariation[7]) }
func (gdClass FontVariation) SetVariationTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[8], transform) }
func (gdClass FontVariation) GetVariationTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodFontVariation[9]) }
func (gdClass FontVariation) SetOpentypeFeatures(features Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[10], features) }
func (gdClass FontVariation) SetSpacing(spacing TextServerSpacingType, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[11], spacing, value) }

type GDScript gdnative.Object

var methodGDScript [2]gdnative.Method
func (gdClass GDScript) New() any { return gdnative.Return[any](gdnative.Object(gdClass), methodGDScript[0]) }
func (gdClass GDScript) GetAsByteCode() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGDScript[1]) }

type GDScriptEditorTranslationParserPlugin gdnative.Object

var methodGDScriptEditorTranslationParserPlugin [0]gdnative.Method

type GDScriptNativeClass gdnative.Object

var methodGDScriptNativeClass [1]gdnative.Method
func (gdClass GDScriptNativeClass) New() any { return gdnative.Return[any](gdnative.Object(gdClass), methodGDScriptNativeClass[0]) }

type GLTFAccessor gdnative.Object

var methodGLTFAccessor [28]gdnative.Method
func (gdClass GLTFAccessor) GetBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[0]) }
func (gdClass GLTFAccessor) SetBufferView(buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[1], buffer_view) }
func (gdClass GLTFAccessor) GetByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[2]) }
func (gdClass GLTFAccessor) SetByteOffset(byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[3], byte_offset) }
func (gdClass GLTFAccessor) GetComponentType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[4]) }
func (gdClass GLTFAccessor) SetComponentType(component_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[5], component_type) }
func (gdClass GLTFAccessor) GetNormalized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFAccessor[6]) }
func (gdClass GLTFAccessor) SetNormalized(normalized bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[7], normalized) }
func (gdClass GLTFAccessor) GetCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[8]) }
func (gdClass GLTFAccessor) SetCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[9], count) }
func (gdClass GLTFAccessor) GetType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[10]) }
func (gdClass GLTFAccessor) SetType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[11], atype) }
func (gdClass GLTFAccessor) GetMin() []float64 { return gdnative.Return[[]float64](gdnative.Object(gdClass), methodGLTFAccessor[12]) }
func (gdClass GLTFAccessor) SetMin(min []float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[13], min) }
func (gdClass GLTFAccessor) GetMax() []float64 { return gdnative.Return[[]float64](gdnative.Object(gdClass), methodGLTFAccessor[14]) }
func (gdClass GLTFAccessor) SetMax(max []float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[15], max) }
func (gdClass GLTFAccessor) GetSparseCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[16]) }
func (gdClass GLTFAccessor) SetSparseCount(sparse_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[17], sparse_count) }
func (gdClass GLTFAccessor) GetSparseIndicesBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[18]) }
func (gdClass GLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[19], sparse_indices_buffer_view) }
func (gdClass GLTFAccessor) GetSparseIndicesByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[20]) }
func (gdClass GLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[21], sparse_indices_byte_offset) }
func (gdClass GLTFAccessor) GetSparseIndicesComponentType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[22]) }
func (gdClass GLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[23], sparse_indices_component_type) }
func (gdClass GLTFAccessor) GetSparseValuesBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[24]) }
func (gdClass GLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[25], sparse_values_buffer_view) }
func (gdClass GLTFAccessor) GetSparseValuesByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[26]) }
func (gdClass GLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[27], sparse_values_byte_offset) }

type GLTFAnimation gdnative.Object

var methodGLTFAnimation [2]gdnative.Method
func (gdClass GLTFAnimation) GetLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFAnimation[0]) }
func (gdClass GLTFAnimation) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAnimation[1], loop) }

type GLTFBufferView gdnative.Object

var methodGLTFBufferView [10]gdnative.Method
func (gdClass GLTFBufferView) GetBuffer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[0]) }
func (gdClass GLTFBufferView) SetBuffer(buffer int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[1], buffer) }
func (gdClass GLTFBufferView) GetByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[2]) }
func (gdClass GLTFBufferView) SetByteOffset(byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[3], byte_offset) }
func (gdClass GLTFBufferView) GetByteLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[4]) }
func (gdClass GLTFBufferView) SetByteLength(byte_length int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[5], byte_length) }
func (gdClass GLTFBufferView) GetByteStride() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[6]) }
func (gdClass GLTFBufferView) SetByteStride(byte_stride int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[7], byte_stride) }
func (gdClass GLTFBufferView) GetIndices() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFBufferView[8]) }
func (gdClass GLTFBufferView) SetIndices(indices bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[9], indices) }

type GLTFCamera gdnative.Object

var methodGLTFCamera [8]gdnative.Method
func (gdClass GLTFCamera) GetPerspective() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFCamera[0]) }
func (gdClass GLTFCamera) SetPerspective(perspective bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[1], perspective) }
func (gdClass GLTFCamera) GetFovSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[2]) }
func (gdClass GLTFCamera) SetFovSize(fov_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[3], fov_size) }
func (gdClass GLTFCamera) GetDepthFar() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[4]) }
func (gdClass GLTFCamera) SetDepthFar(zdepth_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[5], zdepth_far) }
func (gdClass GLTFCamera) GetDepthNear() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[6]) }
func (gdClass GLTFCamera) SetDepthNear(zdepth_near float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[7], zdepth_near) }

type GLTFDocument gdnative.Object

var methodGLTFDocument [8]gdnative.Method
func (gdClass GLTFDocument) AppendFromFile(path string, state GLTFState, flags int64, bake_fps int64, base_path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[0], path, state, flags, bake_fps, base_path) }
func (gdClass GLTFDocument) AppendFromBuffer(bytes []byte, base_path string, state GLTFState, flags int64, bake_fps int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[1], bytes, base_path, state, flags, bake_fps) }
func (gdClass GLTFDocument) AppendFromScene(node Node, state GLTFState, flags int64, bake_fps int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[2], node, state, flags, bake_fps) }
func (gdClass GLTFDocument) GenerateScene(state GLTFState, bake_fps int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodGLTFDocument[3], state, bake_fps) }
func (gdClass GLTFDocument) GenerateBuffer(state GLTFState) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGLTFDocument[4], state) }
func (gdClass GLTFDocument) WriteToFilesystem(state GLTFState, path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[5], state, path) }
func (gdClass GLTFDocument) SetExtensions(extensions Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFDocument[6], extensions) }
func (gdClass GLTFDocument) GetExtensions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFDocument[7]) }

type GLTFDocumentExtension gdnative.Object

var methodGLTFDocumentExtension [7]gdnative.Method
func (gdClass GLTFDocumentExtension) ImportPreflightImplementation(state GLTFState) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[0], state) }
func (gdClass GLTFDocumentExtension) ImportPostParseImplementation(state GLTFState) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[1], state) }
func (gdClass GLTFDocumentExtension) ImportNodeImplementation(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[2], state, gltf_node, json, node) }
func (gdClass GLTFDocumentExtension) ImportPostImplementation(state GLTFState, root Node) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[3], state, root) }
func (gdClass GLTFDocumentExtension) ExportPreflightImplementation(root Node) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[4], root) }
func (gdClass GLTFDocumentExtension) ExportNodeImplementation(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[5], state, gltf_node, json, node) }
func (gdClass GLTFDocumentExtension) ExportPostImplementation(state GLTFState) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFDocumentExtension[6], state) }

type GLTFDocumentExtensionConvertImporterMesh gdnative.Object

var methodGLTFDocumentExtensionConvertImporterMesh [0]gdnative.Method

type GLTFLight gdnative.Object

var methodGLTFLight [12]gdnative.Method
func (gdClass GLTFLight) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFLight[0]) }
func (gdClass GLTFLight) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[1], color) }
func (gdClass GLTFLight) GetIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[2]) }
func (gdClass GLTFLight) SetIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[3], intensity) }
func (gdClass GLTFLight) GetLightType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFLight[4]) }
func (gdClass GLTFLight) SetLightType(light_type string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[5], light_type) }
func (gdClass GLTFLight) GetRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[6]) }
func (gdClass GLTFLight) SetRange(arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[7], arange) }
func (gdClass GLTFLight) GetInnerConeAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[8]) }
func (gdClass GLTFLight) SetInnerConeAngle(inner_cone_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[9], inner_cone_angle) }
func (gdClass GLTFLight) GetOuterConeAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[10]) }
func (gdClass GLTFLight) SetOuterConeAngle(outer_cone_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[11], outer_cone_angle) }

type GLTFMesh gdnative.Object

var methodGLTFMesh [6]gdnative.Method
func (gdClass GLTFMesh) GetMesh() ImporterMesh { return gdnative.Return[ImporterMesh](gdnative.Object(gdClass), methodGLTFMesh[0]) }
func (gdClass GLTFMesh) SetMesh(mesh ImporterMesh)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[1], mesh) }
func (gdClass GLTFMesh) GetBlendWeights() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodGLTFMesh[2]) }
func (gdClass GLTFMesh) SetBlendWeights(blend_weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[3], blend_weights) }
func (gdClass GLTFMesh) GetInstanceMaterials() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFMesh[4]) }
func (gdClass GLTFMesh) SetInstanceMaterials(instance_materials Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[5], instance_materials) }

type GLTFNode gdnative.Object

var methodGLTFNode [26]gdnative.Method
func (gdClass GLTFNode) GetParent() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[0]) }
func (gdClass GLTFNode) SetParent(parent int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[1], parent) }
func (gdClass GLTFNode) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[2]) }
func (gdClass GLTFNode) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[3], height) }
func (gdClass GLTFNode) GetXform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodGLTFNode[4]) }
func (gdClass GLTFNode) SetXform(xform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[5], xform) }
func (gdClass GLTFNode) GetMesh() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[6]) }
func (gdClass GLTFNode) SetMesh(mesh int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[7], mesh) }
func (gdClass GLTFNode) GetCamera() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[8]) }
func (gdClass GLTFNode) SetCamera(camera int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[9], camera) }
func (gdClass GLTFNode) GetSkin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[10]) }
func (gdClass GLTFNode) SetSkin(skin int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[11], skin) }
func (gdClass GLTFNode) GetSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[12]) }
func (gdClass GLTFNode) SetSkeleton(skeleton int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[13], skeleton) }
func (gdClass GLTFNode) GetJoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFNode[14]) }
func (gdClass GLTFNode) SetJoint(joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[15], joint) }
func (gdClass GLTFNode) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGLTFNode[16]) }
func (gdClass GLTFNode) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[17], position) }
func (gdClass GLTFNode) GetRotation() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodGLTFNode[18]) }
func (gdClass GLTFNode) SetRotation(rotation Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[19], rotation) }
func (gdClass GLTFNode) GetScale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGLTFNode[20]) }
func (gdClass GLTFNode) SetScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[21], scale) }
func (gdClass GLTFNode) GetChildren() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFNode[22]) }
func (gdClass GLTFNode) SetChildren(children []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[23], children) }
func (gdClass GLTFNode) GetLight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[24]) }
func (gdClass GLTFNode) SetLight(light int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[25], light) }

type GLTFSkeleton gdnative.Object

var methodGLTFSkeleton [11]gdnative.Method
func (gdClass GLTFSkeleton) GetJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkeleton[0]) }
func (gdClass GLTFSkeleton) SetJoints(joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[1], joints) }
func (gdClass GLTFSkeleton) GetRoots() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkeleton[2]) }
func (gdClass GLTFSkeleton) SetRoots(roots []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[3], roots) }
func (gdClass GLTFSkeleton) GetGodotSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodGLTFSkeleton[4]) }
func (gdClass GLTFSkeleton) GetUniqueNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFSkeleton[5]) }
func (gdClass GLTFSkeleton) SetUniqueNames(unique_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[6], unique_names) }
func (gdClass GLTFSkeleton) GetGodotBoneNode() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkeleton[7]) }
func (gdClass GLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[8], godot_bone_node) }
func (gdClass GLTFSkeleton) GetBoneAttachmentCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkeleton[9]) }
func (gdClass GLTFSkeleton) GetBoneAttachment(idx int64) BoneAttachment3D { return gdnative.Return[BoneAttachment3D](gdnative.Object(gdClass), methodGLTFSkeleton[10], idx) }

type GLTFSkin gdnative.Object

var methodGLTFSkin [20]gdnative.Method
func (gdClass GLTFSkin) GetSkinRoot() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkin[0]) }
func (gdClass GLTFSkin) SetSkinRoot(skin_root int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[1], skin_root) }
func (gdClass GLTFSkin) GetJointsOriginal() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[2]) }
func (gdClass GLTFSkin) SetJointsOriginal(joints_original []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[3], joints_original) }
func (gdClass GLTFSkin) GetInverseBinds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFSkin[4]) }
func (gdClass GLTFSkin) SetInverseBinds(inverse_binds Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[5], inverse_binds) }
func (gdClass GLTFSkin) GetJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[6]) }
func (gdClass GLTFSkin) SetJoints(joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[7], joints) }
func (gdClass GLTFSkin) GetNonJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[8]) }
func (gdClass GLTFSkin) SetNonJoints(non_joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[9], non_joints) }
func (gdClass GLTFSkin) GetRoots() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[10]) }
func (gdClass GLTFSkin) SetRoots(roots []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[11], roots) }
func (gdClass GLTFSkin) GetSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkin[12]) }
func (gdClass GLTFSkin) SetSkeleton(skeleton int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[13], skeleton) }
func (gdClass GLTFSkin) GetJointIToBoneI() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkin[14]) }
func (gdClass GLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[15], joint_i_to_bone_i) }
func (gdClass GLTFSkin) GetJointIToName() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkin[16]) }
func (gdClass GLTFSkin) SetJointIToName(joint_i_to_name Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[17], joint_i_to_name) }
func (gdClass GLTFSkin) GetGodotSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodGLTFSkin[18]) }
func (gdClass GLTFSkin) SetGodotSkin(godot_skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[19], godot_skin) }

type GLTFSpecGloss gdnative.Object

var methodGLTFSpecGloss [10]gdnative.Method
func (gdClass GLTFSpecGloss) GetDiffuseImg() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodGLTFSpecGloss[0]) }
func (gdClass GLTFSpecGloss) SetDiffuseImg(diffuse_img Image)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[1], diffuse_img) }
func (gdClass GLTFSpecGloss) GetDiffuseFactor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFSpecGloss[2]) }
func (gdClass GLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[3], diffuse_factor) }
func (gdClass GLTFSpecGloss) GetGlossFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFSpecGloss[4]) }
func (gdClass GLTFSpecGloss) SetGlossFactor(gloss_factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[5], gloss_factor) }
func (gdClass GLTFSpecGloss) GetSpecularFactor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFSpecGloss[6]) }
func (gdClass GLTFSpecGloss) SetSpecularFactor(specular_factor Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[7], specular_factor) }
func (gdClass GLTFSpecGloss) GetSpecGlossImg() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodGLTFSpecGloss[8]) }
func (gdClass GLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[9], spec_gloss_img) }

type GLTFState gdnative.Object

var methodGLTFState [53]gdnative.Method
func (gdClass GLTFState) GetJson() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFState[0]) }
func (gdClass GLTFState) SetJson(json Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[1], json) }
func (gdClass GLTFState) GetMajorVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[2]) }
func (gdClass GLTFState) SetMajorVersion(major_version int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[3], major_version) }
func (gdClass GLTFState) GetMinorVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[4]) }
func (gdClass GLTFState) SetMinorVersion(minor_version int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[5], minor_version) }
func (gdClass GLTFState) GetGlbData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGLTFState[6]) }
func (gdClass GLTFState) SetGlbData(glb_data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[7], glb_data) }
func (gdClass GLTFState) GetUseNamedSkinBinds() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFState[8]) }
func (gdClass GLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[9], use_named_skin_binds) }
func (gdClass GLTFState) GetNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[10]) }
func (gdClass GLTFState) SetNodes(nodes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[11], nodes) }
func (gdClass GLTFState) GetBuffers() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[12]) }
func (gdClass GLTFState) SetBuffers(buffers Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[13], buffers) }
func (gdClass GLTFState) GetBufferViews() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[14]) }
func (gdClass GLTFState) SetBufferViews(buffer_views Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[15], buffer_views) }
func (gdClass GLTFState) GetAccessors() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[16]) }
func (gdClass GLTFState) SetAccessors(accessors Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[17], accessors) }
func (gdClass GLTFState) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[18]) }
func (gdClass GLTFState) SetMeshes(meshes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[19], meshes) }
func (gdClass GLTFState) GetAnimationPlayersCount(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[20], idx) }
func (gdClass GLTFState) GetAnimationPlayer(idx int64) AnimationPlayer { return gdnative.Return[AnimationPlayer](gdnative.Object(gdClass), methodGLTFState[21], idx) }
func (gdClass GLTFState) GetMaterials() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[22]) }
func (gdClass GLTFState) SetMaterials(materials Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[23], materials) }
func (gdClass GLTFState) GetSceneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFState[24]) }
func (gdClass GLTFState) SetSceneName(scene_name string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[25], scene_name) }
func (gdClass GLTFState) GetBasePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFState[26]) }
func (gdClass GLTFState) SetBasePath(base_path string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[27], base_path) }
func (gdClass GLTFState) GetRootNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[28]) }
func (gdClass GLTFState) SetRootNodes(root_nodes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[29], root_nodes) }
func (gdClass GLTFState) GetTextures() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[30]) }
func (gdClass GLTFState) SetTextures(textures Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[31], textures) }
func (gdClass GLTFState) GetImages() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[32]) }
func (gdClass GLTFState) SetImages(images Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[33], images) }
func (gdClass GLTFState) GetSkins() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[34]) }
func (gdClass GLTFState) SetSkins(skins Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[35], skins) }
func (gdClass GLTFState) GetCameras() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[36]) }
func (gdClass GLTFState) SetCameras(cameras Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[37], cameras) }
func (gdClass GLTFState) GetLights() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[38]) }
func (gdClass GLTFState) SetLights(lights Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[39], lights) }
func (gdClass GLTFState) GetUniqueNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[40]) }
func (gdClass GLTFState) SetUniqueNames(unique_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[41], unique_names) }
func (gdClass GLTFState) GetUniqueAnimationNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[42]) }
func (gdClass GLTFState) SetUniqueAnimationNames(unique_animation_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[43], unique_animation_names) }
func (gdClass GLTFState) GetSkeletons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[44]) }
func (gdClass GLTFState) SetSkeletons(skeletons Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[45], skeletons) }
func (gdClass GLTFState) GetSkeletonToNode() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFState[46]) }
func (gdClass GLTFState) SetSkeletonToNode(skeleton_to_node Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[47], skeleton_to_node) }
func (gdClass GLTFState) GetCreateAnimations() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFState[48]) }
func (gdClass GLTFState) SetCreateAnimations(create_animations bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[49], create_animations) }
func (gdClass GLTFState) GetAnimations() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[50]) }
func (gdClass GLTFState) SetAnimations(animations Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[51], animations) }
func (gdClass GLTFState) GetSceneNode(idx int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodGLTFState[52], idx) }

type GLTFTexture gdnative.Object

var methodGLTFTexture [2]gdnative.Method
func (gdClass GLTFTexture) GetSrcImage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFTexture[0]) }
func (gdClass GLTFTexture) SetSrcImage(src_image int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFTexture[1], src_image) }

type GPUParticles2D gdnative.Object

var methodGPUParticles2D [47]gdnative.Method

type GPUParticles2DDrawOrder int64

const (
	GPUParticles2DDrawOrderIndex GPUParticles2DDrawOrder = 0
	GPUParticles2DDrawOrderLifetime GPUParticles2DDrawOrder = 1
	GPUParticles2DDrawOrderReverseLifetime GPUParticles2DDrawOrder = 2
)

type GPUParticles2DEmitFlags int64

const (
	GPUParticles2DEmitFlagPosition GPUParticles2DEmitFlags = 1
	GPUParticles2DEmitFlagRotationScale GPUParticles2DEmitFlags = 2
	GPUParticles2DEmitFlagVelocity GPUParticles2DEmitFlags = 4
	GPUParticles2DEmitFlagColor GPUParticles2DEmitFlags = 8
	GPUParticles2DEmitFlagCustom GPUParticles2DEmitFlags = 16
)
func (gdClass GPUParticles2D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[0], emitting) }
func (gdClass GPUParticles2D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[1], amount) }
func (gdClass GPUParticles2D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[2], secs) }
func (gdClass GPUParticles2D) SetOneShot(secs bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[3], secs) }
func (gdClass GPUParticles2D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[4], secs) }
func (gdClass GPUParticles2D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[5], ratio) }
func (gdClass GPUParticles2D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[6], ratio) }
func (gdClass GPUParticles2D) SetVisibilityRect(visibility_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[7], visibility_rect) }
func (gdClass GPUParticles2D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[8], enable) }
func (gdClass GPUParticles2D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[9], fps) }
func (gdClass GPUParticles2D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[10], enable) }
func (gdClass GPUParticles2D) SetInterpolate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[11], enable) }
func (gdClass GPUParticles2D) SetProcessMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[12], material) }
func (gdClass GPUParticles2D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[13], scale) }
func (gdClass GPUParticles2D) SetCollisionBaseSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[14], size) }
func (gdClass GPUParticles2D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[15]) }
func (gdClass GPUParticles2D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[16]) }
func (gdClass GPUParticles2D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[17]) }
func (gdClass GPUParticles2D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[18]) }
func (gdClass GPUParticles2D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[19]) }
func (gdClass GPUParticles2D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[20]) }
func (gdClass GPUParticles2D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[21]) }
func (gdClass GPUParticles2D) GetVisibilityRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodGPUParticles2D[22]) }
func (gdClass GPUParticles2D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[23]) }
func (gdClass GPUParticles2D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[24]) }
func (gdClass GPUParticles2D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[25]) }
func (gdClass GPUParticles2D) GetInterpolate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[26]) }
func (gdClass GPUParticles2D) GetProcessMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGPUParticles2D[27]) }
func (gdClass GPUParticles2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[28]) }
func (gdClass GPUParticles2D) GetCollisionBaseSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[29]) }
func (gdClass GPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[30], order) }
func (gdClass GPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder { return gdnative.Return[GPUParticles2DDrawOrder](gdnative.Object(gdClass), methodGPUParticles2D[31]) }
func (gdClass GPUParticles2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[32], texture) }
func (gdClass GPUParticles2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodGPUParticles2D[33]) }
func (gdClass GPUParticles2D) CaptureRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodGPUParticles2D[34]) }
func (gdClass GPUParticles2D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[35]) }
func (gdClass GPUParticles2D) SetSubEmitter(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[36], path) }
func (gdClass GPUParticles2D) GetSubEmitter() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodGPUParticles2D[37]) }
func (gdClass GPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[38], xform, velocity, color, custom, flags) }
func (gdClass GPUParticles2D) SetTrailEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[39], enabled) }
func (gdClass GPUParticles2D) SetTrailLength(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[40], secs) }
func (gdClass GPUParticles2D) IsTrailEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[41]) }
func (gdClass GPUParticles2D) GetTrailLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[42]) }
func (gdClass GPUParticles2D) SetTrailSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[43], sections) }
func (gdClass GPUParticles2D) GetTrailSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[44]) }
func (gdClass GPUParticles2D) SetTrailSectionSubdivisions(subdivisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[45], subdivisions) }
func (gdClass GPUParticles2D) GetTrailSectionSubdivisions() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[46]) }

type GPUParticles3D gdnative.Object

var methodGPUParticles3D [49]gdnative.Method

type GPUParticles3DDrawOrder int64

const (
	GPUParticles3DDrawOrderIndex GPUParticles3DDrawOrder = 0
	GPUParticles3DDrawOrderLifetime GPUParticles3DDrawOrder = 1
	GPUParticles3DDrawOrderReverseLifetime GPUParticles3DDrawOrder = 2
	GPUParticles3DDrawOrderViewDepth GPUParticles3DDrawOrder = 3
)

type GPUParticles3DEmitFlags int64

const (
	GPUParticles3DEmitFlagPosition GPUParticles3DEmitFlags = 1
	GPUParticles3DEmitFlagRotationScale GPUParticles3DEmitFlags = 2
	GPUParticles3DEmitFlagVelocity GPUParticles3DEmitFlags = 4
	GPUParticles3DEmitFlagColor GPUParticles3DEmitFlags = 8
	GPUParticles3DEmitFlagCustom GPUParticles3DEmitFlags = 16
)

type GPUParticles3DTransformAlign int64

const (
	GPUParticles3DTransformAlignDisabled GPUParticles3DTransformAlign = 0
	GPUParticles3DTransformAlignZBillboard GPUParticles3DTransformAlign = 1
	GPUParticles3DTransformAlignYToVelocity GPUParticles3DTransformAlign = 2
	GPUParticles3DTransformAlignZBillboardYToVelocity GPUParticles3DTransformAlign = 3
)
func (gdClass GPUParticles3D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[0], emitting) }
func (gdClass GPUParticles3D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[1], amount) }
func (gdClass GPUParticles3D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[2], secs) }
func (gdClass GPUParticles3D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[3], enable) }
func (gdClass GPUParticles3D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[4], secs) }
func (gdClass GPUParticles3D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[5], ratio) }
func (gdClass GPUParticles3D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[6], ratio) }
func (gdClass GPUParticles3D) SetVisibilityAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[7], aabb) }
func (gdClass GPUParticles3D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[8], enable) }
func (gdClass GPUParticles3D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[9], fps) }
func (gdClass GPUParticles3D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[10], enable) }
func (gdClass GPUParticles3D) SetInterpolate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[11], enable) }
func (gdClass GPUParticles3D) SetProcessMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[12], material) }
func (gdClass GPUParticles3D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[13], scale) }
func (gdClass GPUParticles3D) SetCollisionBaseSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[14], size) }
func (gdClass GPUParticles3D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[15]) }
func (gdClass GPUParticles3D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[16]) }
func (gdClass GPUParticles3D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[17]) }
func (gdClass GPUParticles3D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[18]) }
func (gdClass GPUParticles3D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[19]) }
func (gdClass GPUParticles3D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[20]) }
func (gdClass GPUParticles3D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[21]) }
func (gdClass GPUParticles3D) GetVisibilityAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodGPUParticles3D[22]) }
func (gdClass GPUParticles3D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[23]) }
func (gdClass GPUParticles3D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[24]) }
func (gdClass GPUParticles3D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[25]) }
func (gdClass GPUParticles3D) GetInterpolate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[26]) }
func (gdClass GPUParticles3D) GetProcessMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGPUParticles3D[27]) }
func (gdClass GPUParticles3D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[28]) }
func (gdClass GPUParticles3D) GetCollisionBaseSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[29]) }
func (gdClass GPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[30], order) }
func (gdClass GPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder { return gdnative.Return[GPUParticles3DDrawOrder](gdnative.Object(gdClass), methodGPUParticles3D[31]) }
func (gdClass GPUParticles3D) SetDrawPasses(passes int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[32], passes) }
func (gdClass GPUParticles3D) SetDrawPassMesh(pass int64, mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[33], pass, mesh) }
func (gdClass GPUParticles3D) GetDrawPasses() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[34]) }
func (gdClass GPUParticles3D) GetDrawPassMesh(pass int64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodGPUParticles3D[35], pass) }
func (gdClass GPUParticles3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[36], skin) }
func (gdClass GPUParticles3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodGPUParticles3D[37]) }
func (gdClass GPUParticles3D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[38]) }
func (gdClass GPUParticles3D) CaptureAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodGPUParticles3D[39]) }
func (gdClass GPUParticles3D) SetSubEmitter(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[40], path) }
func (gdClass GPUParticles3D) GetSubEmitter() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodGPUParticles3D[41]) }
func (gdClass GPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[42], xform, velocity, color, custom, flags) }
func (gdClass GPUParticles3D) SetTrailEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[43], enabled) }
func (gdClass GPUParticles3D) SetTrailLength(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[44], secs) }
func (gdClass GPUParticles3D) IsTrailEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[45]) }
func (gdClass GPUParticles3D) GetTrailLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[46]) }
func (gdClass GPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[47], align) }
func (gdClass GPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign { return gdnative.Return[GPUParticles3DTransformAlign](gdnative.Object(gdClass), methodGPUParticles3D[48]) }

type GPUParticlesAttractor3D gdnative.Object

var methodGPUParticlesAttractor3D [8]gdnative.Method
func (gdClass GPUParticlesAttractor3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[0], mask) }
func (gdClass GPUParticlesAttractor3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[1]) }
func (gdClass GPUParticlesAttractor3D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[2], strength) }
func (gdClass GPUParticlesAttractor3D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[3]) }
func (gdClass GPUParticlesAttractor3D) SetAttenuation(attenuation float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[4], attenuation) }
func (gdClass GPUParticlesAttractor3D) GetAttenuation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[5]) }
func (gdClass GPUParticlesAttractor3D) SetDirectionality(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[6], amount) }
func (gdClass GPUParticlesAttractor3D) GetDirectionality() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[7]) }

type GPUParticlesAttractorBox3D gdnative.Object

var methodGPUParticlesAttractorBox3D [2]gdnative.Method
func (gdClass GPUParticlesAttractorBox3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorBox3D[0], extents) }
func (gdClass GPUParticlesAttractorBox3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesAttractorBox3D[1]) }

type GPUParticlesAttractorSphere3D gdnative.Object

var methodGPUParticlesAttractorSphere3D [2]gdnative.Method
func (gdClass GPUParticlesAttractorSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorSphere3D[0], radius) }
func (gdClass GPUParticlesAttractorSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractorSphere3D[1]) }

type GPUParticlesAttractorVectorField3D gdnative.Object

var methodGPUParticlesAttractorVectorField3D [4]gdnative.Method
func (gdClass GPUParticlesAttractorVectorField3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[0], extents) }
func (gdClass GPUParticlesAttractorVectorField3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[1]) }
func (gdClass GPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[2], texture) }
func (gdClass GPUParticlesAttractorVectorField3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[3]) }

type GPUParticlesCollision3D gdnative.Object

var methodGPUParticlesCollision3D [2]gdnative.Method
func (gdClass GPUParticlesCollision3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollision3D[0], mask) }
func (gdClass GPUParticlesCollision3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesCollision3D[1]) }

type GPUParticlesCollisionBox3D gdnative.Object

var methodGPUParticlesCollisionBox3D [2]gdnative.Method
func (gdClass GPUParticlesCollisionBox3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionBox3D[0], extents) }
func (gdClass GPUParticlesCollisionBox3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionBox3D[1]) }

type GPUParticlesCollisionHeightField3D gdnative.Object

var methodGPUParticlesCollisionHeightField3D [8]gdnative.Method

type GPUParticlesCollisionHeightField3DResolution int64

const (
	GPUParticlesCollisionHeightField3DResolution256 GPUParticlesCollisionHeightField3DResolution = 0
	GPUParticlesCollisionHeightField3DResolution512 GPUParticlesCollisionHeightField3DResolution = 1
	GPUParticlesCollisionHeightField3DResolution1024 GPUParticlesCollisionHeightField3DResolution = 2
	GPUParticlesCollisionHeightField3DResolution2048 GPUParticlesCollisionHeightField3DResolution = 3
	GPUParticlesCollisionHeightField3DResolution4096 GPUParticlesCollisionHeightField3DResolution = 4
	GPUParticlesCollisionHeightField3DResolution8192 GPUParticlesCollisionHeightField3DResolution = 5
	GPUParticlesCollisionHeightField3DResolutionMax GPUParticlesCollisionHeightField3DResolution = 6
)

type GPUParticlesCollisionHeightField3DUpdateMode int64

const (
	GPUParticlesCollisionHeightField3DUpdateModeWhenMoved GPUParticlesCollisionHeightField3DUpdateMode = 0
	GPUParticlesCollisionHeightField3DUpdateModeAlways GPUParticlesCollisionHeightField3DUpdateMode = 1
)
func (gdClass GPUParticlesCollisionHeightField3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[0], extents) }
func (gdClass GPUParticlesCollisionHeightField3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[1]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[2], resolution) }
func (gdClass GPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution { return gdnative.Return[GPUParticlesCollisionHeightField3DResolution](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[3]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[4], update_mode) }
func (gdClass GPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode { return gdnative.Return[GPUParticlesCollisionHeightField3DUpdateMode](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[5]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[6], enabled) }
func (gdClass GPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[7]) }

type GPUParticlesCollisionSDF3D gdnative.Object

var methodGPUParticlesCollisionSDF3D [12]gdnative.Method

type GPUParticlesCollisionSDF3DResolution int64

const (
	GPUParticlesCollisionSDF3DResolution16 GPUParticlesCollisionSDF3DResolution = 0
	GPUParticlesCollisionSDF3DResolution32 GPUParticlesCollisionSDF3DResolution = 1
	GPUParticlesCollisionSDF3DResolution64 GPUParticlesCollisionSDF3DResolution = 2
	GPUParticlesCollisionSDF3DResolution128 GPUParticlesCollisionSDF3DResolution = 3
	GPUParticlesCollisionSDF3DResolution256 GPUParticlesCollisionSDF3DResolution = 4
	GPUParticlesCollisionSDF3DResolution512 GPUParticlesCollisionSDF3DResolution = 5
	GPUParticlesCollisionSDF3DResolutionMax GPUParticlesCollisionSDF3DResolution = 6
)
func (gdClass GPUParticlesCollisionSDF3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[0], extents) }
func (gdClass GPUParticlesCollisionSDF3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[1]) }
func (gdClass GPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[2], resolution) }
func (gdClass GPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution { return gdnative.Return[GPUParticlesCollisionSDF3DResolution](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[3]) }
func (gdClass GPUParticlesCollisionSDF3D) SetTexture(texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[4], texture) }
func (gdClass GPUParticlesCollisionSDF3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[5]) }
func (gdClass GPUParticlesCollisionSDF3D) SetThickness(thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[6], thickness) }
func (gdClass GPUParticlesCollisionSDF3D) GetThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[7]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[8], mask) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[9]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[10], layer_number, value) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[11], layer_number) }

type GPUParticlesCollisionSphere3D gdnative.Object

var methodGPUParticlesCollisionSphere3D [2]gdnative.Method
func (gdClass GPUParticlesCollisionSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSphere3D[0], radius) }
func (gdClass GPUParticlesCollisionSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesCollisionSphere3D[1]) }

type Generic6DOFJoint3D gdnative.Object

var methodGeneric6DOFJoint3D [12]gdnative.Method

type Generic6DOFJoint3DParam int64

const (
	Generic6DOFJoint3DParamLinearLowerLimit Generic6DOFJoint3DParam = 0
	Generic6DOFJoint3DParamLinearUpperLimit Generic6DOFJoint3DParam = 1
	Generic6DOFJoint3DParamLinearLimitSoftness Generic6DOFJoint3DParam = 2
	Generic6DOFJoint3DParamLinearRestitution Generic6DOFJoint3DParam = 3
	Generic6DOFJoint3DParamLinearDamping Generic6DOFJoint3DParam = 4
	Generic6DOFJoint3DParamLinearMotorTargetVelocity Generic6DOFJoint3DParam = 5
	Generic6DOFJoint3DParamLinearMotorForceLimit Generic6DOFJoint3DParam = 6
	Generic6DOFJoint3DParamLinearSpringStiffness Generic6DOFJoint3DParam = 7
	Generic6DOFJoint3DParamLinearSpringDamping Generic6DOFJoint3DParam = 8
	Generic6DOFJoint3DParamLinearSpringEquilibriumPoint Generic6DOFJoint3DParam = 9
	Generic6DOFJoint3DParamAngularLowerLimit Generic6DOFJoint3DParam = 10
	Generic6DOFJoint3DParamAngularUpperLimit Generic6DOFJoint3DParam = 11
	Generic6DOFJoint3DParamAngularLimitSoftness Generic6DOFJoint3DParam = 12
	Generic6DOFJoint3DParamAngularDamping Generic6DOFJoint3DParam = 13
	Generic6DOFJoint3DParamAngularRestitution Generic6DOFJoint3DParam = 14
	Generic6DOFJoint3DParamAngularForceLimit Generic6DOFJoint3DParam = 15
	Generic6DOFJoint3DParamAngularErp Generic6DOFJoint3DParam = 16
	Generic6DOFJoint3DParamAngularMotorTargetVelocity Generic6DOFJoint3DParam = 17
	Generic6DOFJoint3DParamAngularMotorForceLimit Generic6DOFJoint3DParam = 18
	Generic6DOFJoint3DParamAngularSpringStiffness Generic6DOFJoint3DParam = 19
	Generic6DOFJoint3DParamAngularSpringDamping Generic6DOFJoint3DParam = 20
	Generic6DOFJoint3DParamAngularSpringEquilibriumPoint Generic6DOFJoint3DParam = 21
	Generic6DOFJoint3DParamMax Generic6DOFJoint3DParam = 22
)

type Generic6DOFJoint3DFlag int64

const (
	Generic6DOFJoint3DFlagEnableLinearLimit Generic6DOFJoint3DFlag = 0
	Generic6DOFJoint3DFlagEnableAngularLimit Generic6DOFJoint3DFlag = 1
	Generic6DOFJoint3DFlagEnableLinearSpring Generic6DOFJoint3DFlag = 3
	Generic6DOFJoint3DFlagEnableAngularSpring Generic6DOFJoint3DFlag = 2
	Generic6DOFJoint3DFlagEnableMotor Generic6DOFJoint3DFlag = 4
	Generic6DOFJoint3DFlagEnableLinearMotor Generic6DOFJoint3DFlag = 5
	Generic6DOFJoint3DFlagMax Generic6DOFJoint3DFlag = 6
)
func (gdClass Generic6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[0], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[1], param) }
func (gdClass Generic6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[2], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[3], param) }
func (gdClass Generic6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[4], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[5], param) }
func (gdClass Generic6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[6], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[7], flag) }
func (gdClass Generic6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[8], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[9], flag) }
func (gdClass Generic6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[10], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[11], flag) }

type Geometry2D gdnative.Object

var methodGeometry2D [22]gdnative.Method

type Geometry2DPolyBooleanOperation int64

const (
	Geometry2DOperationUnion Geometry2DPolyBooleanOperation = 0
	Geometry2DOperationDifference Geometry2DPolyBooleanOperation = 1
	Geometry2DOperationIntersection Geometry2DPolyBooleanOperation = 2
	Geometry2DOperationXor Geometry2DPolyBooleanOperation = 3
)

type Geometry2DPolyJoinType int64

const (
	Geometry2DJoinSquare Geometry2DPolyJoinType = 0
	Geometry2DJoinRound Geometry2DPolyJoinType = 1
	Geometry2DJoinMiter Geometry2DPolyJoinType = 2
)

type Geometry2DPolyEndType int64

const (
	Geometry2DEndPolygon Geometry2DPolyEndType = 0
	Geometry2DEndJoined Geometry2DPolyEndType = 1
	Geometry2DEndButt Geometry2DPolyEndType = 2
	Geometry2DEndSquare Geometry2DPolyEndType = 3
	Geometry2DEndRound Geometry2DPolyEndType = 4
)
func (gdClass Geometry2D) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[0], point, circle_position, circle_radius) }
func (gdClass Geometry2D) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometry2D[1], segment_from, segment_to, circle_position, circle_radius) }
func (gdClass Geometry2D) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry2D[2], from_a, to_a, from_b, to_b) }
func (gdClass Geometry2D) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry2D[3], from_a, dir_a, from_b, dir_b) }
func (gdClass Geometry2D) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGeometry2D[4], p1, q1, p2, q2) }
func (gdClass Geometry2D) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGeometry2D[5], point, s1, s2) }
func (gdClass Geometry2D) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGeometry2D[6], point, s1, s2) }
func (gdClass Geometry2D) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[7], point, a, b, c) }
func (gdClass Geometry2D) IsPolygonClockwise(polygon []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[8], polygon) }
func (gdClass Geometry2D) IsPointInPolygon(point Vector2, polygon []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[9], point, polygon) }
func (gdClass Geometry2D) TriangulatePolygon(polygon []Vector2) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGeometry2D[10], polygon) }
func (gdClass Geometry2D) TriangulateDelaunay(points []Vector2) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGeometry2D[11], points) }
func (gdClass Geometry2D) ConvexHull(points []Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGeometry2D[12], points) }
func (gdClass Geometry2D) MergePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[13], polygon_a, polygon_b) }
func (gdClass Geometry2D) ClipPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[14], polygon_a, polygon_b) }
func (gdClass Geometry2D) IntersectPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[15], polygon_a, polygon_b) }
func (gdClass Geometry2D) ExcludePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[16], polygon_a, polygon_b) }
func (gdClass Geometry2D) ClipPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[17], polyline, polygon) }
func (gdClass Geometry2D) IntersectPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[18], polyline, polygon) }
func (gdClass Geometry2D) OffsetPolygon(polygon []Vector2, delta float64, join_type Geometry2DPolyJoinType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[19], polygon, delta, join_type) }
func (gdClass Geometry2D) OffsetPolyline(polyline []Vector2, delta float64, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[20], polyline, delta, join_type, end_type) }
func (gdClass Geometry2D) MakeAtlas(sizes []Vector2) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGeometry2D[21], sizes) }

type Geometry3D gdnative.Object

var methodGeometry3D [12]gdnative.Method
func (gdClass Geometry3D) BuildBoxPlanes(extents Vector3) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[0], extents) }
func (gdClass Geometry3D) BuildCylinderPlanes(radius float64, height float64, sides int64, axis Vector3Axis) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[1], radius, height, sides, axis) }
func (gdClass Geometry3D) BuildCapsulePlanes(radius float64, height float64, sides int64, lats int64, axis Vector3Axis) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[2], radius, height, sides, lats, axis) }
func (gdClass Geometry3D) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[3], p1, p2, q1, q2) }
func (gdClass Geometry3D) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGeometry3D[4], point, s1, s2) }
func (gdClass Geometry3D) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGeometry3D[5], point, s1, s2) }
func (gdClass Geometry3D) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry3D[6], from, dir, a, b, c) }
func (gdClass Geometry3D) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry3D[7], from, to, a, b, c) }
func (gdClass Geometry3D) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[8], from, to, sphere_position, sphere_radius) }
func (gdClass Geometry3D) SegmentIntersectsCylinder(from Vector3, to Vector3, height float64, radius float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[9], from, to, height, radius) }
func (gdClass Geometry3D) SegmentIntersectsConvex(from Vector3, to Vector3, planes Array) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[10], from, to, planes) }
func (gdClass Geometry3D) ClipPolygon(points []Vector3, plane Plane) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[11], points, plane) }

type GeometryInstance3D gdnative.Object

var methodGeometryInstance3D [31]gdnative.Method

type GeometryInstance3DShadowCastingSetting int64

const (
	GeometryInstance3DShadowCastingSettingOff GeometryInstance3DShadowCastingSetting = 0
	GeometryInstance3DShadowCastingSettingOn GeometryInstance3DShadowCastingSetting = 1
	GeometryInstance3DShadowCastingSettingDoubleSided GeometryInstance3DShadowCastingSetting = 2
	GeometryInstance3DShadowCastingSettingShadowsOnly GeometryInstance3DShadowCastingSetting = 3
)

type GeometryInstance3DGIMode int64

const (
	GeometryInstance3DGiModeDisabled GeometryInstance3DGIMode = 0
	GeometryInstance3DGiModeStatic GeometryInstance3DGIMode = 1
	GeometryInstance3DGiModeDynamic GeometryInstance3DGIMode = 2
)

type GeometryInstance3DLightmapScale int64

const (
	GeometryInstance3DLightmapScale1x GeometryInstance3DLightmapScale = 0
	GeometryInstance3DLightmapScale2x GeometryInstance3DLightmapScale = 1
	GeometryInstance3DLightmapScale4x GeometryInstance3DLightmapScale = 2
	GeometryInstance3DLightmapScale8x GeometryInstance3DLightmapScale = 3
	GeometryInstance3DLightmapScaleMax GeometryInstance3DLightmapScale = 4
)

type GeometryInstance3DVisibilityRangeFadeMode int64

const (
	GeometryInstance3DVisibilityRangeFadeDisabled GeometryInstance3DVisibilityRangeFadeMode = 0
	GeometryInstance3DVisibilityRangeFadeSelf GeometryInstance3DVisibilityRangeFadeMode = 1
	GeometryInstance3DVisibilityRangeFadeDependencies GeometryInstance3DVisibilityRangeFadeMode = 2
)
func (gdClass GeometryInstance3D) SetMaterialOverride(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[0], material) }
func (gdClass GeometryInstance3D) GetMaterialOverride() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGeometryInstance3D[1]) }
func (gdClass GeometryInstance3D) SetMaterialOverlay(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[2], material) }
func (gdClass GeometryInstance3D) GetMaterialOverlay() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGeometryInstance3D[3]) }
func (gdClass GeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[4], shadow_casting_setting) }
func (gdClass GeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting { return gdnative.Return[GeometryInstance3DShadowCastingSetting](gdnative.Object(gdClass), methodGeometryInstance3D[5]) }
func (gdClass GeometryInstance3D) SetLodBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[6], bias) }
func (gdClass GeometryInstance3D) GetLodBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[7]) }
func (gdClass GeometryInstance3D) SetTransparency(transparency float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[8], transparency) }
func (gdClass GeometryInstance3D) GetTransparency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[9]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEndMargin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[10], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEndMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[11]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEnd(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[12], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEnd() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[13]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBeginMargin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[14], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBeginMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[15]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[16], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[17]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[18], mode) }
func (gdClass GeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode { return gdnative.Return[GeometryInstance3DVisibilityRangeFadeMode](gdnative.Object(gdClass), methodGeometryInstance3D[19]) }
func (gdClass GeometryInstance3D) SetInstanceShaderUniform(uniform string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[20], uniform, value) }
func (gdClass GeometryInstance3D) GetInstanceShaderUniform(uniform string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometryInstance3D[21], uniform) }
func (gdClass GeometryInstance3D) SetExtraCullMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[22], margin) }
func (gdClass GeometryInstance3D) GetExtraCullMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[23]) }
func (gdClass GeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[24], scale) }
func (gdClass GeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale { return gdnative.Return[GeometryInstance3DLightmapScale](gdnative.Object(gdClass), methodGeometryInstance3D[25]) }
func (gdClass GeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[26], mode) }
func (gdClass GeometryInstance3D) GetGiMode() GeometryInstance3DGIMode { return gdnative.Return[GeometryInstance3DGIMode](gdnative.Object(gdClass), methodGeometryInstance3D[27]) }
func (gdClass GeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[28], ignore_culling) }
func (gdClass GeometryInstance3D) IsIgnoringOcclusionCulling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometryInstance3D[29]) }
func (gdClass GeometryInstance3D) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[30], aabb) }

type GodotPhysicsServer2D gdnative.Object

var methodGodotPhysicsServer2D [0]gdnative.Method

type GodotPhysicsServer3D gdnative.Object

var methodGodotPhysicsServer3D [0]gdnative.Method

type Gradient gdnative.Object

var methodGradient [15]gdnative.Method

type GradientInterpolationMode int64

const (
	GradientGradientInterpolateLinear GradientInterpolationMode = 0
	GradientGradientInterpolateConstant GradientInterpolationMode = 1
	GradientGradientInterpolateCubic GradientInterpolationMode = 2
)
func (gdClass Gradient) AddPoint(offset float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[0], offset, color) }
func (gdClass Gradient) RemovePoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[1], point) }
func (gdClass Gradient) SetOffset(point int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[2], point, offset) }
func (gdClass Gradient) GetOffset(point int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGradient[3], point) }
func (gdClass Gradient) Reverse()  { gdnative.Call(gdnative.Object(gdClass), methodGradient[4]) }
func (gdClass Gradient) SetColor(point int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[5], point, color) }
func (gdClass Gradient) GetColor(point int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGradient[6], point) }
func (gdClass Gradient) Interpolate(offset float64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGradient[7], offset) }
func (gdClass Gradient) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGradient[8]) }
func (gdClass Gradient) SetOffsets(offsets []float32)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[9], offsets) }
func (gdClass Gradient) GetOffsets() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodGradient[10]) }
func (gdClass Gradient) SetColors(colors []Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[11], colors) }
func (gdClass Gradient) GetColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodGradient[12]) }
func (gdClass Gradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[13], interpolation_mode) }
func (gdClass Gradient) GetInterpolationMode() GradientInterpolationMode { return gdnative.Return[GradientInterpolationMode](gdnative.Object(gdClass), methodGradient[14]) }

type GradientTexture1D gdnative.Object

var methodGradientTexture1D [5]gdnative.Method
func (gdClass GradientTexture1D) SetGradient(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[0], gradient) }
func (gdClass GradientTexture1D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodGradientTexture1D[1]) }
func (gdClass GradientTexture1D) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[2], width) }
func (gdClass GradientTexture1D) SetUseHdr(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[3], enabled) }
func (gdClass GradientTexture1D) IsUsingHdr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGradientTexture1D[4]) }

type GradientTexture2D gdnative.Object

var methodGradientTexture2D [14]gdnative.Method

type GradientTexture2DFill int64

const (
	GradientTexture2DFillLinear GradientTexture2DFill = 0
	GradientTexture2DFillRadial GradientTexture2DFill = 1
)

type GradientTexture2DRepeat int64

const (
	GradientTexture2DRepeatNone GradientTexture2DRepeat = 0
	GradientTexture2DRepeatDefault GradientTexture2DRepeat = 1
	GradientTexture2DRepeatMirror GradientTexture2DRepeat = 2
)
func (gdClass GradientTexture2D) SetGradient(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[0], gradient) }
func (gdClass GradientTexture2D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodGradientTexture2D[1]) }
func (gdClass GradientTexture2D) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[2], width) }
func (gdClass GradientTexture2D) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[3], height) }
func (gdClass GradientTexture2D) SetUseHdr(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[4], enabled) }
func (gdClass GradientTexture2D) IsUsingHdr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGradientTexture2D[5]) }
func (gdClass GradientTexture2D) SetFill(fill GradientTexture2DFill)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[6], fill) }
func (gdClass GradientTexture2D) GetFill() GradientTexture2DFill { return gdnative.Return[GradientTexture2DFill](gdnative.Object(gdClass), methodGradientTexture2D[7]) }
func (gdClass GradientTexture2D) SetFillFrom(fill_from Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[8], fill_from) }
func (gdClass GradientTexture2D) GetFillFrom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGradientTexture2D[9]) }
func (gdClass GradientTexture2D) SetFillTo(fill_to Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[10], fill_to) }
func (gdClass GradientTexture2D) GetFillTo() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGradientTexture2D[11]) }
func (gdClass GradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[12], repeat) }
func (gdClass GradientTexture2D) GetRepeat() GradientTexture2DRepeat { return gdnative.Return[GradientTexture2DRepeat](gdnative.Object(gdClass), methodGradientTexture2D[13]) }

type GraphEdit gdnative.Object

var methodGraphEdit [54]gdnative.Method

type GraphEditPanningScheme int64

const (
	GraphEditScrollZooms GraphEditPanningScheme = 0
	GraphEditScrollPans GraphEditPanningScheme = 1
)
func (gdClass GraphEdit) IsInInputHotzoneImplementation(graph_node Object, slot_index int64, mouse_position Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[0], graph_node, slot_index, mouse_position) }
func (gdClass GraphEdit) IsInOutputHotzoneImplementation(graph_node Object, slot_index int64, mouse_position Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[1], graph_node, slot_index, mouse_position) }
func (gdClass GraphEdit) GetConnectionLineImplementation(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGraphEdit[2], from, to) }
func (gdClass GraphEdit) IsNodeHoverValidImplementation(from string, from_slot int64, to string, to_slot int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[3], from, from_slot, to, to_slot) }
func (gdClass GraphEdit) ConnectNode(from string, from_port int64, to string, to_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGraphEdit[4], from, from_port, to, to_port) }
func (gdClass GraphEdit) IsNodeConnected(from string, from_port int64, to string, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[5], from, from_port, to, to_port) }
func (gdClass GraphEdit) DisconnectNode(from string, from_port int64, to string, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[6], from, from_port, to, to_port) }
func (gdClass GraphEdit) SetConnectionActivity(from string, from_port int64, to string, to_port int64, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[7], from, from_port, to, to_port, amount) }
func (gdClass GraphEdit) GetConnectionList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGraphEdit[8]) }
func (gdClass GraphEdit) ClearConnections()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[9]) }
func (gdClass GraphEdit) ForceConnectionDragEnd()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[10]) }
func (gdClass GraphEdit) GetScrollOfs() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphEdit[11]) }
func (gdClass GraphEdit) SetScrollOfs(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[12], offset) }
func (gdClass GraphEdit) AddValidRightDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[13], atype) }
func (gdClass GraphEdit) RemoveValidRightDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[14], atype) }
func (gdClass GraphEdit) AddValidLeftDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[15], atype) }
func (gdClass GraphEdit) RemoveValidLeftDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[16], atype) }
func (gdClass GraphEdit) AddValidConnectionType(from_type int64, to_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[17], from_type, to_type) }
func (gdClass GraphEdit) RemoveValidConnectionType(from_type int64, to_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[18], from_type, to_type) }
func (gdClass GraphEdit) IsValidConnectionType(from_type int64, to_type int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[19], from_type, to_type) }
func (gdClass GraphEdit) GetConnectionLine(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGraphEdit[20], from, to) }
func (gdClass GraphEdit) SetPanningScheme(scheme GraphEditPanningScheme)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[21], scheme) }
func (gdClass GraphEdit) GetPanningScheme() GraphEditPanningScheme { return gdnative.Return[GraphEditPanningScheme](gdnative.Object(gdClass), methodGraphEdit[22]) }
func (gdClass GraphEdit) SetZoom(zoom float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[23], zoom) }
func (gdClass GraphEdit) GetZoom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[24]) }
func (gdClass GraphEdit) SetZoomMin(zoom_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[25], zoom_min) }
func (gdClass GraphEdit) GetZoomMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[26]) }
func (gdClass GraphEdit) SetZoomMax(zoom_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[27], zoom_max) }
func (gdClass GraphEdit) GetZoomMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[28]) }
func (gdClass GraphEdit) SetZoomStep(zoom_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[29], zoom_step) }
func (gdClass GraphEdit) GetZoomStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[30]) }
func (gdClass GraphEdit) SetShowZoomLabel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[31], enable) }
func (gdClass GraphEdit) IsShowingZoomLabel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[32]) }
func (gdClass GraphEdit) SetSnap(pixels int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[33], pixels) }
func (gdClass GraphEdit) GetSnap() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphEdit[34]) }
func (gdClass GraphEdit) SetUseSnap(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[35], enable) }
func (gdClass GraphEdit) IsUsingSnap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[36]) }
func (gdClass GraphEdit) SetConnectionLinesCurvature(curvature float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[37], curvature) }
func (gdClass GraphEdit) GetConnectionLinesCurvature() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[38]) }
func (gdClass GraphEdit) SetConnectionLinesThickness(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[39], pixels) }
func (gdClass GraphEdit) GetConnectionLinesThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[40]) }
func (gdClass GraphEdit) SetConnectionLinesAntialiased(pixels bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[41], pixels) }
func (gdClass GraphEdit) IsConnectionLinesAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[42]) }
func (gdClass GraphEdit) SetMinimapSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[43], size) }
func (gdClass GraphEdit) GetMinimapSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphEdit[44]) }
func (gdClass GraphEdit) SetMinimapOpacity(opacity float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[45], opacity) }
func (gdClass GraphEdit) GetMinimapOpacity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[46]) }
func (gdClass GraphEdit) SetMinimapEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[47], enable) }
func (gdClass GraphEdit) IsMinimapEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[48]) }
func (gdClass GraphEdit) SetRightDisconnects(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[49], enable) }
func (gdClass GraphEdit) IsRightDisconnectsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[50]) }
func (gdClass GraphEdit) GetZoomHbox() HBoxContainer { return gdnative.Return[HBoxContainer](gdnative.Object(gdClass), methodGraphEdit[51]) }
func (gdClass GraphEdit) ArrangeNodes()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[52]) }
func (gdClass GraphEdit) SetSelected(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[53], node) }

type GraphNode gdnative.Object

var methodGraphNode [45]gdnative.Method

type GraphNodeOverlay int64

const (
	GraphNodeOverlayDisabled GraphNodeOverlay = 0
	GraphNodeOverlayBreakpoint GraphNodeOverlay = 1
	GraphNodeOverlayPosition GraphNodeOverlay = 2
)
func (gdClass GraphNode) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[0], title) }
func (gdClass GraphNode) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGraphNode[1]) }
func (gdClass GraphNode) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[2], direction) }
func (gdClass GraphNode) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodGraphNode[3]) }
func (gdClass GraphNode) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[4], language) }
func (gdClass GraphNode) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGraphNode[5]) }
func (gdClass GraphNode) SetSlot(idx int64, enable_left bool, type_left int64, color_left Color, enable_right bool, type_right int64, color_right Color, custom_left Texture2D, custom_right Texture2D, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[6], idx, enable_left, type_left, color_left, enable_right, type_right, color_right, custom_left, custom_right, enable) }
func (gdClass GraphNode) ClearSlot(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[7], idx) }
func (gdClass GraphNode) ClearAllSlots()  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[8]) }
func (gdClass GraphNode) IsSlotEnabledLeft(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[9], idx) }
func (gdClass GraphNode) SetSlotEnabledLeft(idx int64, enable_left bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[10], idx, enable_left) }
func (gdClass GraphNode) SetSlotTypeLeft(idx int64, type_left int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[11], idx, type_left) }
func (gdClass GraphNode) GetSlotTypeLeft(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[12], idx) }
func (gdClass GraphNode) SetSlotColorLeft(idx int64, color_left Color)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[13], idx, color_left) }
func (gdClass GraphNode) GetSlotColorLeft(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[14], idx) }
func (gdClass GraphNode) IsSlotEnabledRight(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[15], idx) }
func (gdClass GraphNode) SetSlotEnabledRight(idx int64, enable_right bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[16], idx, enable_right) }
func (gdClass GraphNode) SetSlotTypeRight(idx int64, type_right int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[17], idx, type_right) }
func (gdClass GraphNode) GetSlotTypeRight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[18], idx) }
func (gdClass GraphNode) SetSlotColorRight(idx int64, color_right Color)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[19], idx, color_right) }
func (gdClass GraphNode) GetSlotColorRight(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[20], idx) }
func (gdClass GraphNode) IsSlotDrawStylebox(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[21], idx) }
func (gdClass GraphNode) SetSlotDrawStylebox(idx int64, draw_stylebox bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[22], idx, draw_stylebox) }
func (gdClass GraphNode) SetPositionOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[23], offset) }
func (gdClass GraphNode) GetPositionOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[24]) }
func (gdClass GraphNode) SetComment(comment bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[25], comment) }
func (gdClass GraphNode) IsComment() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[26]) }
func (gdClass GraphNode) SetResizable(resizable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[27], resizable) }
func (gdClass GraphNode) IsResizable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[28]) }
func (gdClass GraphNode) SetSelected(selected bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[29], selected) }
func (gdClass GraphNode) IsSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[30]) }
func (gdClass GraphNode) GetConnectionInputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[31]) }
func (gdClass GraphNode) GetConnectionInputHeight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[32], idx) }
func (gdClass GraphNode) GetConnectionInputPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[33], idx) }
func (gdClass GraphNode) GetConnectionInputType(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[34], idx) }
func (gdClass GraphNode) GetConnectionInputColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[35], idx) }
func (gdClass GraphNode) GetConnectionOutputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[36]) }
func (gdClass GraphNode) GetConnectionOutputHeight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[37], idx) }
func (gdClass GraphNode) GetConnectionOutputPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[38], idx) }
func (gdClass GraphNode) GetConnectionOutputType(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[39], idx) }
func (gdClass GraphNode) GetConnectionOutputColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[40], idx) }
func (gdClass GraphNode) SetShowCloseButton(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[41], show) }
func (gdClass GraphNode) IsCloseButtonVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[42]) }
func (gdClass GraphNode) SetOverlay(overlay GraphNodeOverlay)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[43], overlay) }
func (gdClass GraphNode) GetOverlay() GraphNodeOverlay { return gdnative.Return[GraphNodeOverlay](gdnative.Object(gdClass), methodGraphNode[44]) }

type GridContainer gdnative.Object

var methodGridContainer [2]gdnative.Method
func (gdClass GridContainer) SetColumns(columns int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridContainer[0], columns) }
func (gdClass GridContainer) GetColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridContainer[1]) }

type GridMap gdnative.Object

var methodGridMap [44]gdnative.Method
func (gdClass GridMap) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[0], layer) }
func (gdClass GridMap) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[1]) }
func (gdClass GridMap) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[2], mask) }
func (gdClass GridMap) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[3]) }
func (gdClass GridMap) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[4], layer_number, value) }
func (gdClass GridMap) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[5], layer_number) }
func (gdClass GridMap) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[6], layer_number, value) }
func (gdClass GridMap) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[7], layer_number) }
func (gdClass GridMap) SetPhysicsMaterial(material PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[8], material) }
func (gdClass GridMap) GetPhysicsMaterial() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodGridMap[9]) }
func (gdClass GridMap) SetBakeNavigation(bake_navigation bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[10], bake_navigation) }
func (gdClass GridMap) IsBakingNavigation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[11]) }
func (gdClass GridMap) SetNavigationLayers(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[12], layers) }
func (gdClass GridMap) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[13]) }
func (gdClass GridMap) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[14], layer_number, value) }
func (gdClass GridMap) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[15], layer_number) }
func (gdClass GridMap) SetMeshLibrary(mesh_library MeshLibrary)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[16], mesh_library) }
func (gdClass GridMap) GetMeshLibrary() MeshLibrary { return gdnative.Return[MeshLibrary](gdnative.Object(gdClass), methodGridMap[17]) }
func (gdClass GridMap) SetCellSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[18], size) }
func (gdClass GridMap) GetCellSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGridMap[19]) }
func (gdClass GridMap) SetCellScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[20], scale) }
func (gdClass GridMap) GetCellScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGridMap[21]) }
func (gdClass GridMap) SetOctantSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[22], size) }
func (gdClass GridMap) GetOctantSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[23]) }
func (gdClass GridMap) SetCellItem(position Vector3i, item int64, orientation int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[24], position, item, orientation) }
func (gdClass GridMap) GetCellItem(position Vector3i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[25], position) }
func (gdClass GridMap) GetCellItemOrientation(position Vector3i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[26], position) }
func (gdClass GridMap) WorldToMap(world_position Vector3) Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodGridMap[27], world_position) }
func (gdClass GridMap) MapToWorld(map_position Vector3i) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGridMap[28], map_position) }
func (gdClass GridMap) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[29], resource) }
func (gdClass GridMap) SetCenterX(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[30], enable) }
func (gdClass GridMap) GetCenterX() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[31]) }
func (gdClass GridMap) SetCenterY(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[32], enable) }
func (gdClass GridMap) GetCenterY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[33]) }
func (gdClass GridMap) SetCenterZ(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[34], enable) }
func (gdClass GridMap) GetCenterZ() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[35]) }
func (gdClass GridMap) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[36]) }
func (gdClass GridMap) GetUsedCells() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[37]) }
func (gdClass GridMap) GetUsedCellsByItem(item int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[38], item) }
func (gdClass GridMap) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[39]) }
func (gdClass GridMap) GetBakeMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[40]) }
func (gdClass GridMap) GetBakeMeshInstance(idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodGridMap[41], idx) }
func (gdClass GridMap) ClearBakedMeshes()  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[42]) }
func (gdClass GridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[43], gen_lightmap_uv, lightmap_uv_texel_size) }

type GrooveJoint2D gdnative.Object

var methodGrooveJoint2D [4]gdnative.Method
func (gdClass GrooveJoint2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodGrooveJoint2D[0], length) }
func (gdClass GrooveJoint2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGrooveJoint2D[1]) }
func (gdClass GrooveJoint2D) SetInitialOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodGrooveJoint2D[2], offset) }
func (gdClass GrooveJoint2D) GetInitialOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGrooveJoint2D[3]) }

type HBoxContainer gdnative.Object

var methodHBoxContainer [0]gdnative.Method

type HFlowContainer gdnative.Object

var methodHFlowContainer [0]gdnative.Method

type HMACContext gdnative.Object

var methodHMACContext [3]gdnative.Method
func (gdClass HMACContext) Start(hash_type HashingContextHashType, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHMACContext[0], hash_type, key) }
func (gdClass HMACContext) Update(data []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHMACContext[1], data) }
func (gdClass HMACContext) Finish() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHMACContext[2]) }

type HScrollBar gdnative.Object

var methodHScrollBar [0]gdnative.Method

type HSeparator gdnative.Object

var methodHSeparator [0]gdnative.Method

type HSlider gdnative.Object

var methodHSlider [0]gdnative.Method

type HSplitContainer gdnative.Object

var methodHSplitContainer [0]gdnative.Method

type HTTPClient gdnative.Object

var methodHTTPClient [22]gdnative.Method

type HTTPClientMethod int64

const (
	HTTPClientMethodGet HTTPClientMethod = 0
	HTTPClientMethodHead HTTPClientMethod = 1
	HTTPClientMethodPost HTTPClientMethod = 2
	HTTPClientMethodPut HTTPClientMethod = 3
	HTTPClientMethodDelete HTTPClientMethod = 4
	HTTPClientMethodOptions HTTPClientMethod = 5
	HTTPClientMethodTrace HTTPClientMethod = 6
	HTTPClientMethodConnect HTTPClientMethod = 7
	HTTPClientMethodPatch HTTPClientMethod = 8
	HTTPClientMethodMax HTTPClientMethod = 9
)

type HTTPClientStatus int64

const (
	HTTPClientStatusDisconnected HTTPClientStatus = 0
	HTTPClientStatusResolving HTTPClientStatus = 1
	HTTPClientStatusCantResolve HTTPClientStatus = 2
	HTTPClientStatusConnecting HTTPClientStatus = 3
	HTTPClientStatusCantConnect HTTPClientStatus = 4
	HTTPClientStatusConnected HTTPClientStatus = 5
	HTTPClientStatusRequesting HTTPClientStatus = 6
	HTTPClientStatusBody HTTPClientStatus = 7
	HTTPClientStatusConnectionError HTTPClientStatus = 8
	HTTPClientStatusSslHandshakeError HTTPClientStatus = 9
)

type HTTPClientResponseCode int64

const (
	HTTPClientResponseContinue HTTPClientResponseCode = 100
	HTTPClientResponseSwitchingProtocols HTTPClientResponseCode = 101
	HTTPClientResponseProcessing HTTPClientResponseCode = 102
	HTTPClientResponseOk HTTPClientResponseCode = 200
	HTTPClientResponseCreated HTTPClientResponseCode = 201
	HTTPClientResponseAccepted HTTPClientResponseCode = 202
	HTTPClientResponseNonAuthoritativeInformation HTTPClientResponseCode = 203
	HTTPClientResponseNoContent HTTPClientResponseCode = 204
	HTTPClientResponseResetContent HTTPClientResponseCode = 205
	HTTPClientResponsePartialContent HTTPClientResponseCode = 206
	HTTPClientResponseMultiStatus HTTPClientResponseCode = 207
	HTTPClientResponseAlreadyReported HTTPClientResponseCode = 208
	HTTPClientResponseImUsed HTTPClientResponseCode = 226
	HTTPClientResponseMultipleChoices HTTPClientResponseCode = 300
	HTTPClientResponseMovedPermanently HTTPClientResponseCode = 301
	HTTPClientResponseFound HTTPClientResponseCode = 302
	HTTPClientResponseSeeOther HTTPClientResponseCode = 303
	HTTPClientResponseNotModified HTTPClientResponseCode = 304
	HTTPClientResponseUseProxy HTTPClientResponseCode = 305
	HTTPClientResponseSwitchProxy HTTPClientResponseCode = 306
	HTTPClientResponseTemporaryRedirect HTTPClientResponseCode = 307
	HTTPClientResponsePermanentRedirect HTTPClientResponseCode = 308
	HTTPClientResponseBadRequest HTTPClientResponseCode = 400
	HTTPClientResponseUnauthorized HTTPClientResponseCode = 401
	HTTPClientResponsePaymentRequired HTTPClientResponseCode = 402
	HTTPClientResponseForbidden HTTPClientResponseCode = 403
	HTTPClientResponseNotFound HTTPClientResponseCode = 404
	HTTPClientResponseMethodNotAllowed HTTPClientResponseCode = 405
	HTTPClientResponseNotAcceptable HTTPClientResponseCode = 406
	HTTPClientResponseProxyAuthenticationRequired HTTPClientResponseCode = 407
	HTTPClientResponseRequestTimeout HTTPClientResponseCode = 408
	HTTPClientResponseConflict HTTPClientResponseCode = 409
	HTTPClientResponseGone HTTPClientResponseCode = 410
	HTTPClientResponseLengthRequired HTTPClientResponseCode = 411
	HTTPClientResponsePreconditionFailed HTTPClientResponseCode = 412
	HTTPClientResponseRequestEntityTooLarge HTTPClientResponseCode = 413
	HTTPClientResponseRequestUriTooLong HTTPClientResponseCode = 414
	HTTPClientResponseUnsupportedMediaType HTTPClientResponseCode = 415
	HTTPClientResponseRequestedRangeNotSatisfiable HTTPClientResponseCode = 416
	HTTPClientResponseExpectationFailed HTTPClientResponseCode = 417
	HTTPClientResponseImATeapot HTTPClientResponseCode = 418
	HTTPClientResponseMisdirectedRequest HTTPClientResponseCode = 421
	HTTPClientResponseUnprocessableEntity HTTPClientResponseCode = 422
	HTTPClientResponseLocked HTTPClientResponseCode = 423
	HTTPClientResponseFailedDependency HTTPClientResponseCode = 424
	HTTPClientResponseUpgradeRequired HTTPClientResponseCode = 426
	HTTPClientResponsePreconditionRequired HTTPClientResponseCode = 428
	HTTPClientResponseTooManyRequests HTTPClientResponseCode = 429
	HTTPClientResponseRequestHeaderFieldsTooLarge HTTPClientResponseCode = 431
	HTTPClientResponseUnavailableForLegalReasons HTTPClientResponseCode = 451
	HTTPClientResponseInternalServerError HTTPClientResponseCode = 500
	HTTPClientResponseNotImplemented HTTPClientResponseCode = 501
	HTTPClientResponseBadGateway HTTPClientResponseCode = 502
	HTTPClientResponseServiceUnavailable HTTPClientResponseCode = 503
	HTTPClientResponseGatewayTimeout HTTPClientResponseCode = 504
	HTTPClientResponseHttpVersionNotSupported HTTPClientResponseCode = 505
	HTTPClientResponseVariantAlsoNegotiates HTTPClientResponseCode = 506
	HTTPClientResponseInsufficientStorage HTTPClientResponseCode = 507
	HTTPClientResponseLoopDetected HTTPClientResponseCode = 508
	HTTPClientResponseNotExtended HTTPClientResponseCode = 510
	HTTPClientResponseNetworkAuthRequired HTTPClientResponseCode = 511
)
func (gdClass HTTPClient) ConnectToHost(host string, port int64, use_ssl bool, verify_host bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[0], host, port, use_ssl, verify_host) }
func (gdClass HTTPClient) SetConnection(connection StreamPeer)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[1], connection) }
func (gdClass HTTPClient) GetConnection() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodHTTPClient[2]) }
func (gdClass HTTPClient) RequestRaw(method HTTPClientMethod, url string, headers []string, body []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[3], method, url, headers, body) }
func (gdClass HTTPClient) Request(method HTTPClientMethod, url string, headers []string, body string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[4], method, url, headers, body) }
func (gdClass HTTPClient) Close()  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[5]) }
func (gdClass HTTPClient) HasResponse() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[6]) }
func (gdClass HTTPClient) IsResponseChunked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[7]) }
func (gdClass HTTPClient) GetResponseCode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[8]) }
func (gdClass HTTPClient) GetResponseHeaders() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodHTTPClient[9]) }
func (gdClass HTTPClient) GetResponseHeadersAsDictionary() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodHTTPClient[10]) }
func (gdClass HTTPClient) GetResponseBodyLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[11]) }
func (gdClass HTTPClient) ReadResponseBodyChunk() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHTTPClient[12]) }
func (gdClass HTTPClient) SetReadChunkSize(bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[13], bytes) }
func (gdClass HTTPClient) GetReadChunkSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[14]) }
func (gdClass HTTPClient) SetBlockingMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[15], enabled) }
func (gdClass HTTPClient) IsBlockingModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[16]) }
func (gdClass HTTPClient) GetStatus() HTTPClientStatus { return gdnative.Return[HTTPClientStatus](gdnative.Object(gdClass), methodHTTPClient[17]) }
func (gdClass HTTPClient) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[18]) }
func (gdClass HTTPClient) SetHttpProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[19], host, port) }
func (gdClass HTTPClient) SetHttpsProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[20], host, port) }
func (gdClass HTTPClient) QueryStringFromDict(fields Dictionary) string { return gdnative.Return[string](gdnative.Object(gdClass), methodHTTPClient[21], fields) }

type HTTPRequest gdnative.Object

var methodHTTPRequest [22]gdnative.Method

type HTTPRequestResult int64

const (
	HTTPRequestResultSuccess HTTPRequestResult = 0
	HTTPRequestResultChunkedBodySizeMismatch HTTPRequestResult = 1
	HTTPRequestResultCantConnect HTTPRequestResult = 2
	HTTPRequestResultCantResolve HTTPRequestResult = 3
	HTTPRequestResultConnectionError HTTPRequestResult = 4
	HTTPRequestResultSslHandshakeError HTTPRequestResult = 5
	HTTPRequestResultNoResponse HTTPRequestResult = 6
	HTTPRequestResultBodySizeLimitExceeded HTTPRequestResult = 7
	HTTPRequestResultBodyDecompressFailed HTTPRequestResult = 8
	HTTPRequestResultRequestFailed HTTPRequestResult = 9
	HTTPRequestResultDownloadFileCantOpen HTTPRequestResult = 10
	HTTPRequestResultDownloadFileWriteError HTTPRequestResult = 11
	HTTPRequestResultRedirectLimitReached HTTPRequestResult = 12
	HTTPRequestResultTimeout HTTPRequestResult = 13
)
func (gdClass HTTPRequest) Request(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPRequest[0], url, custom_headers, ssl_validate_domain, method, request_data) }
func (gdClass HTTPRequest) RequestRaw(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data_raw []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPRequest[1], url, custom_headers, ssl_validate_domain, method, request_data_raw) }
func (gdClass HTTPRequest) CancelRequest()  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[2]) }
func (gdClass HTTPRequest) GetHttpClientStatus() HTTPClientStatus { return gdnative.Return[HTTPClientStatus](gdnative.Object(gdClass), methodHTTPRequest[3]) }
func (gdClass HTTPRequest) SetUseThreads(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[4], enable) }
func (gdClass HTTPRequest) IsUsingThreads() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPRequest[5]) }
func (gdClass HTTPRequest) SetAcceptGzip(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[6], enable) }
func (gdClass HTTPRequest) IsAcceptingGzip() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPRequest[7]) }
func (gdClass HTTPRequest) SetBodySizeLimit(bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[8], bytes) }
func (gdClass HTTPRequest) GetBodySizeLimit() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[9]) }
func (gdClass HTTPRequest) SetMaxRedirects(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[10], amount) }
func (gdClass HTTPRequest) GetMaxRedirects() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[11]) }
func (gdClass HTTPRequest) SetDownloadFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[12], path) }
func (gdClass HTTPRequest) GetDownloadFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodHTTPRequest[13]) }
func (gdClass HTTPRequest) GetDownloadedBytes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[14]) }
func (gdClass HTTPRequest) GetBodySize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[15]) }
func (gdClass HTTPRequest) SetTimeout(timeout float64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[16], timeout) }
func (gdClass HTTPRequest) GetTimeout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodHTTPRequest[17]) }
func (gdClass HTTPRequest) SetDownloadChunkSize(chunk_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[18], chunk_size) }
func (gdClass HTTPRequest) GetDownloadChunkSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[19]) }
func (gdClass HTTPRequest) SetHttpProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[20], host, port) }
func (gdClass HTTPRequest) SetHttpsProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[21], host, port) }

type HashingContext gdnative.Object

var methodHashingContext [3]gdnative.Method

type HashingContextHashType int64

const (
	HashingContextHashMd5 HashingContextHashType = 0
	HashingContextHashSha1 HashingContextHashType = 1
	HashingContextHashSha256 HashingContextHashType = 2
)
func (gdClass HashingContext) Start(atype HashingContextHashType) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHashingContext[0], atype) }
func (gdClass HashingContext) Update(chunk []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHashingContext[1], chunk) }
func (gdClass HashingContext) Finish() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHashingContext[2]) }

type HeightMapShape3D gdnative.Object

var methodHeightMapShape3D [6]gdnative.Method
func (gdClass HeightMapShape3D) SetMapWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[0], width) }
func (gdClass HeightMapShape3D) GetMapWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHeightMapShape3D[1]) }
func (gdClass HeightMapShape3D) SetMapDepth(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[2], height) }
func (gdClass HeightMapShape3D) GetMapDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHeightMapShape3D[3]) }
func (gdClass HeightMapShape3D) SetMapData(data []float32)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[4], data) }
func (gdClass HeightMapShape3D) GetMapData() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodHeightMapShape3D[5]) }

type HingeJoint3D gdnative.Object

var methodHingeJoint3D [4]gdnative.Method

type HingeJoint3DParam int64

const (
	HingeJoint3DParamBias HingeJoint3DParam = 0
	HingeJoint3DParamLimitUpper HingeJoint3DParam = 1
	HingeJoint3DParamLimitLower HingeJoint3DParam = 2
	HingeJoint3DParamLimitBias HingeJoint3DParam = 3
	HingeJoint3DParamLimitSoftness HingeJoint3DParam = 4
	HingeJoint3DParamLimitRelaxation HingeJoint3DParam = 5
	HingeJoint3DParamMotorTargetVelocity HingeJoint3DParam = 6
	HingeJoint3DParamMotorMaxImpulse HingeJoint3DParam = 7
	HingeJoint3DParamMax HingeJoint3DParam = 8
)

type HingeJoint3DFlag int64

const (
	HingeJoint3DFlagUseLimit HingeJoint3DFlag = 0
	HingeJoint3DFlagEnableMotor HingeJoint3DFlag = 1
	HingeJoint3DFlagMax HingeJoint3DFlag = 2
)
func (gdClass HingeJoint3D) SetParam(param HingeJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodHingeJoint3D[0], param, value) }
func (gdClass HingeJoint3D) GetParam(param HingeJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodHingeJoint3D[1], param) }
func (gdClass HingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodHingeJoint3D[2], flag, enabled) }
func (gdClass HingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHingeJoint3D[3], flag) }

type IP gdnative.Object

var methodIP [10]gdnative.Method

type IPResolverStatus int64

const (
	IPResolverStatusNone IPResolverStatus = 0
	IPResolverStatusWaiting IPResolverStatus = 1
	IPResolverStatusDone IPResolverStatus = 2
	IPResolverStatusError IPResolverStatus = 3
)

type IPType int64

const (
	IPTypeNone IPType = 0
	IPTypeIpv4 IPType = 1
	IPTypeIpv6 IPType = 2
	IPTypeAny IPType = 3
)
func (gdClass IP) ResolveHostname(host string, ip_type IPType) string { return gdnative.Return[string](gdnative.Object(gdClass), methodIP[0], host, ip_type) }
func (gdClass IP) ResolveHostnameAddresses(host string, ip_type IPType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[1], host, ip_type) }
func (gdClass IP) ResolveHostnameQueueItem(host string, ip_type IPType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodIP[2], host, ip_type) }
func (gdClass IP) GetResolveItemStatus(id int64) IPResolverStatus { return gdnative.Return[IPResolverStatus](gdnative.Object(gdClass), methodIP[3], id) }
func (gdClass IP) GetResolveItemAddress(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodIP[4], id) }
func (gdClass IP) GetResolveItemAddresses(id int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[5], id) }
func (gdClass IP) EraseResolveItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodIP[6], id) }
func (gdClass IP) GetLocalAddresses() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[7]) }
func (gdClass IP) GetLocalInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[8]) }
func (gdClass IP) ClearCache(hostname string)  { gdnative.Call(gdnative.Object(gdClass), methodIP[9], hostname) }

type IPUnix gdnative.Object

var methodIPUnix [0]gdnative.Method

type Image gdnative.Object

var methodImage [64]gdnative.Method

type ImageFormat int64

const (
	ImageFormatL8 ImageFormat = 0
	ImageFormatLa8 ImageFormat = 1
	ImageFormatR8 ImageFormat = 2
	ImageFormatRg8 ImageFormat = 3
	ImageFormatRgb8 ImageFormat = 4
	ImageFormatRgba8 ImageFormat = 5
	ImageFormatRgba4444 ImageFormat = 6
	ImageFormatRgb565 ImageFormat = 7
	ImageFormatRf ImageFormat = 8
	ImageFormatRgf ImageFormat = 9
	ImageFormatRgbf ImageFormat = 10
	ImageFormatRgbaf ImageFormat = 11
	ImageFormatRh ImageFormat = 12
	ImageFormatRgh ImageFormat = 13
	ImageFormatRgbh ImageFormat = 14
	ImageFormatRgbah ImageFormat = 15
	ImageFormatRgbe9995 ImageFormat = 16
	ImageFormatDxt1 ImageFormat = 17
	ImageFormatDxt3 ImageFormat = 18
	ImageFormatDxt5 ImageFormat = 19
	ImageFormatRgtcR ImageFormat = 20
	ImageFormatRgtcRg ImageFormat = 21
	ImageFormatBptcRgba ImageFormat = 22
	ImageFormatBptcRgbf ImageFormat = 23
	ImageFormatBptcRgbfu ImageFormat = 24
	ImageFormatEtc ImageFormat = 25
	ImageFormatEtc2R11 ImageFormat = 26
	ImageFormatEtc2R11s ImageFormat = 27
	ImageFormatEtc2Rg11 ImageFormat = 28
	ImageFormatEtc2Rg11s ImageFormat = 29
	ImageFormatEtc2Rgb8 ImageFormat = 30
	ImageFormatEtc2Rgba8 ImageFormat = 31
	ImageFormatEtc2Rgb8a1 ImageFormat = 32
	ImageFormatEtc2RaAsRg ImageFormat = 33
	ImageFormatDxt5RaAsRg ImageFormat = 34
	ImageFormatMax ImageFormat = 35
)

type ImageInterpolation int64

const (
	ImageInterpolateNearest ImageInterpolation = 0
	ImageInterpolateBilinear ImageInterpolation = 1
	ImageInterpolateCubic ImageInterpolation = 2
	ImageInterpolateTrilinear ImageInterpolation = 3
	ImageInterpolateLanczos ImageInterpolation = 4
)

type ImageAlphaMode int64

const (
	ImageAlphaNone ImageAlphaMode = 0
	ImageAlphaBit ImageAlphaMode = 1
	ImageAlphaBlend ImageAlphaMode = 2
)

type ImageCompressMode int64

const (
	ImageCompressS3tc ImageCompressMode = 0
	ImageCompressEtc ImageCompressMode = 1
	ImageCompressEtc2 ImageCompressMode = 2
	ImageCompressBptc ImageCompressMode = 3
)

type ImageUsedChannels int64

const (
	ImageUsedChannelsL ImageUsedChannels = 0
	ImageUsedChannelsLa ImageUsedChannels = 1
	ImageUsedChannelsR ImageUsedChannels = 2
	ImageUsedChannelsRg ImageUsedChannels = 3
	ImageUsedChannelsRgb ImageUsedChannels = 4
	ImageUsedChannelsRgba ImageUsedChannels = 5
)

type ImageCompressSource int64

const (
	ImageCompressSourceGeneric ImageCompressSource = 0
	ImageCompressSourceSrgb ImageCompressSource = 1
	ImageCompressSourceNormal ImageCompressSource = 2
)
func (gdClass Image) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[0]) }
func (gdClass Image) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[1]) }
func (gdClass Image) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodImage[2]) }
func (gdClass Image) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[3]) }
func (gdClass Image) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodImage[4]) }
func (gdClass Image) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[5]) }
func (gdClass Image) Convert(format ImageFormat)  { gdnative.Call(gdnative.Object(gdClass), methodImage[6], format) }
func (gdClass Image) GetMipmapOffset(mipmap int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[7], mipmap) }
func (gdClass Image) ResizeToPo2(square bool, interpolation ImageInterpolation)  { gdnative.Call(gdnative.Object(gdClass), methodImage[8], square, interpolation) }
func (gdClass Image) Resize(width int64, height int64, interpolation ImageInterpolation)  { gdnative.Call(gdnative.Object(gdClass), methodImage[9], width, height, interpolation) }
func (gdClass Image) ShrinkX2()  { gdnative.Call(gdnative.Object(gdClass), methodImage[10]) }
func (gdClass Image) Crop(width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[11], width, height) }
func (gdClass Image) FlipX()  { gdnative.Call(gdnative.Object(gdClass), methodImage[12]) }
func (gdClass Image) FlipY()  { gdnative.Call(gdnative.Object(gdClass), methodImage[13]) }
func (gdClass Image) GenerateMipmaps(renormalize bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[14], renormalize) }
func (gdClass Image) ClearMipmaps()  { gdnative.Call(gdnative.Object(gdClass), methodImage[15]) }
func (gdClass Image) Create(width int64, height int64, use_mipmaps bool, format ImageFormat)  { gdnative.Call(gdnative.Object(gdClass), methodImage[16], width, height, use_mipmaps, format) }
func (gdClass Image) CreateFromData(width int64, height int64, use_mipmaps bool, format ImageFormat, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodImage[17], width, height, use_mipmaps, format, data) }
func (gdClass Image) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[18]) }
func (gdClass Image) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[19], path) }
func (gdClass Image) LoadFromFile(path string) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[20], path) }
func (gdClass Image) SavePng(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[21], path) }
func (gdClass Image) SavePngToBuffer() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[22]) }
func (gdClass Image) SaveJpg(path string, quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[23], path, quality) }
func (gdClass Image) SaveJpgToBuffer(quality float64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[24], quality) }
func (gdClass Image) SaveExr(path string, grayscale bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[25], path, grayscale) }
func (gdClass Image) SaveExrToBuffer(grayscale bool) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[26], grayscale) }
func (gdClass Image) SaveWebp(path string, lossy bool, quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[27], path, lossy, quality) }
func (gdClass Image) SaveWebpToBuffer(lossy bool, quality float64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[28], lossy, quality) }
func (gdClass Image) DetectAlpha() ImageAlphaMode { return gdnative.Return[ImageAlphaMode](gdnative.Object(gdClass), methodImage[29]) }
func (gdClass Image) IsInvisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[30]) }
func (gdClass Image) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels { return gdnative.Return[ImageUsedChannels](gdnative.Object(gdClass), methodImage[31], source) }
func (gdClass Image) Compress(mode ImageCompressMode, source ImageCompressSource, lossy_quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[32], mode, source, lossy_quality) }
func (gdClass Image) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, lossy_quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[33], mode, channels, lossy_quality) }
func (gdClass Image) Decompress() error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[34]) }
func (gdClass Image) IsCompressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[35]) }
func (gdClass Image) Rotate90(direction ClockDirection)  { gdnative.Call(gdnative.Object(gdClass), methodImage[36], direction) }
func (gdClass Image) Rotate180()  { gdnative.Call(gdnative.Object(gdClass), methodImage[37]) }
func (gdClass Image) FixAlphaEdges()  { gdnative.Call(gdnative.Object(gdClass), methodImage[38]) }
func (gdClass Image) PremultiplyAlpha()  { gdnative.Call(gdnative.Object(gdClass), methodImage[39]) }
func (gdClass Image) SrgbToLinear()  { gdnative.Call(gdnative.Object(gdClass), methodImage[40]) }
func (gdClass Image) NormalMapToXy()  { gdnative.Call(gdnative.Object(gdClass), methodImage[41]) }
func (gdClass Image) RgbeToSrgb() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[42]) }
func (gdClass Image) BumpMapToNormalMap(bump_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[43], bump_scale) }
func (gdClass Image) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodImage[44], compared_image, use_luma) }
func (gdClass Image) BlitRect(src Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[45], src, src_rect, dst) }
func (gdClass Image) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[46], src, mask, src_rect, dst) }
func (gdClass Image) BlendRect(src Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[47], src, src_rect, dst) }
func (gdClass Image) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[48], src, mask, src_rect, dst) }
func (gdClass Image) Fill(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[49], color) }
func (gdClass Image) FillRect(rect Rect2i, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[50], rect, color) }
func (gdClass Image) GetUsedRect() Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodImage[51]) }
func (gdClass Image) GetRect(rect Rect2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[52], rect) }
func (gdClass Image) CopyFrom(src Image)  { gdnative.Call(gdnative.Object(gdClass), methodImage[53], src) }
func (gdClass Image) GetPixelv(point Vector2i) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodImage[54], point) }
func (gdClass Image) GetPixel(x int64, y int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodImage[55], x, y) }
func (gdClass Image) SetPixelv(point Vector2i, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[56], point, color) }
func (gdClass Image) SetPixel(x int64, y int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[57], x, y, color) }
func (gdClass Image) AdjustBcs(brightness float64, contrast float64, saturation float64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[58], brightness, contrast, saturation) }
func (gdClass Image) LoadPngFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[59], buffer) }
func (gdClass Image) LoadJpgFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[60], buffer) }
func (gdClass Image) LoadWebpFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[61], buffer) }
func (gdClass Image) LoadTgaFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[62], buffer) }
func (gdClass Image) LoadBmpFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[63], buffer) }

type ImageTexture gdnative.Object

var methodImageTexture [5]gdnative.Method
func (gdClass ImageTexture) CreateFromImage(image Image) ImageTexture { return gdnative.Return[ImageTexture](gdnative.Object(gdClass), methodImageTexture[0], image) }
func (gdClass ImageTexture) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodImageTexture[1]) }
func (gdClass ImageTexture) SetImage(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[2], image) }
func (gdClass ImageTexture) Update(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[3], image) }
func (gdClass ImageTexture) SetSizeOverride(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[4], size) }

type ImageTexture3D gdnative.Object

var methodImageTexture3D [2]gdnative.Method
func (gdClass ImageTexture3D) Create(format ImageFormat, width int64, height int64, depth int64, use_mipmaps bool, data Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImageTexture3D[0], format, width, height, depth, use_mipmaps, data) }
func (gdClass ImageTexture3D) Update(data Array)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture3D[1], data) }

type ImageTextureLayered gdnative.Object

var methodImageTextureLayered [2]gdnative.Method
func (gdClass ImageTextureLayered) CreateFromImages(images Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImageTextureLayered[0], images) }
func (gdClass ImageTextureLayered) UpdateLayer(image Image, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodImageTextureLayered[1], image, layer) }

type ImmediateMesh gdnative.Object

var methodImmediateMesh [10]gdnative.Method
func (gdClass ImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[0], primitive, material) }
func (gdClass ImmediateMesh) SurfaceSetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[1], color) }
func (gdClass ImmediateMesh) SurfaceSetNormal(normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[2], normal) }
func (gdClass ImmediateMesh) SurfaceSetTangent(tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[3], tangent) }
func (gdClass ImmediateMesh) SurfaceSetUv(uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[4], uv) }
func (gdClass ImmediateMesh) SurfaceSetUv2(uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[5], uv2) }
func (gdClass ImmediateMesh) SurfaceAddVertex(vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[6], vertex) }
func (gdClass ImmediateMesh) SurfaceAddVertex2d(vertex Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[7], vertex) }
func (gdClass ImmediateMesh) SurfaceEnd()  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[8]) }
func (gdClass ImmediateMesh) ClearSurfaces()  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[9]) }

type ImporterMesh gdnative.Object

var methodImporterMesh [23]gdnative.Method
func (gdClass ImporterMesh) AddBlendShape(name string)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[0], name) }
func (gdClass ImporterMesh) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[1]) }
func (gdClass ImporterMesh) GetBlendShapeName(blend_shape_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodImporterMesh[2], blend_shape_idx) }
func (gdClass ImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[3], mode) }
func (gdClass ImporterMesh) GetBlendShapeMode() MeshBlendShapeMode { return gdnative.Return[MeshBlendShapeMode](gdnative.Object(gdClass), methodImporterMesh[4]) }
func (gdClass ImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, material Material, name string, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[5], primitive, arrays, blend_shapes, lods, material, name, flags) }
func (gdClass ImporterMesh) GetSurfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[6]) }
func (gdClass ImporterMesh) GetSurfacePrimitiveType(surface_idx int64) MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodImporterMesh[7], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceName(surface_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodImporterMesh[8], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceArrays(surface_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodImporterMesh[9], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodImporterMesh[10], surface_idx, blend_shape_idx) }
func (gdClass ImporterMesh) GetSurfaceLodCount(surface_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[11], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceLodSize(surface_idx int64, lod_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodImporterMesh[12], surface_idx, lod_idx) }
func (gdClass ImporterMesh) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodImporterMesh[13], surface_idx, lod_idx) }
func (gdClass ImporterMesh) GetSurfaceMaterial(surface_idx int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodImporterMesh[14], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceFormat(surface_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[15], surface_idx) }
func (gdClass ImporterMesh) SetSurfaceName(surface_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[16], surface_idx, name) }
func (gdClass ImporterMesh) SetSurfaceMaterial(surface_idx int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[17], surface_idx, material) }
func (gdClass ImporterMesh) GenerateLods(normal_merge_angle float64, normal_split_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[18], normal_merge_angle, normal_split_angle) }
func (gdClass ImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodImporterMesh[19], base_mesh) }
func (gdClass ImporterMesh) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[20]) }
func (gdClass ImporterMesh) SetLightmapSizeHint(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[21], size) }
func (gdClass ImporterMesh) GetLightmapSizeHint() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodImporterMesh[22]) }

type ImporterMeshInstance3D gdnative.Object

var methodImporterMeshInstance3D [6]gdnative.Method
func (gdClass ImporterMeshInstance3D) SetMesh(mesh ImporterMesh)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[0], mesh) }
func (gdClass ImporterMeshInstance3D) GetMesh() ImporterMesh { return gdnative.Return[ImporterMesh](gdnative.Object(gdClass), methodImporterMeshInstance3D[1]) }
func (gdClass ImporterMeshInstance3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[2], skin) }
func (gdClass ImporterMeshInstance3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodImporterMeshInstance3D[3]) }
func (gdClass ImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[4], skeleton_path) }
func (gdClass ImporterMeshInstance3D) GetSkeletonPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodImporterMeshInstance3D[5]) }

type Input gdnative.Object

var methodInput [46]gdnative.Method

type InputMouseMode int64

const (
	InputMouseModeVisible InputMouseMode = 0
	InputMouseModeHidden InputMouseMode = 1
	InputMouseModeCaptured InputMouseMode = 2
	InputMouseModeConfined InputMouseMode = 3
	InputMouseModeConfinedHidden InputMouseMode = 4
)

type InputCursorShape int64

const (
	InputCursorArrow InputCursorShape = 0
	InputCursorIbeam InputCursorShape = 1
	InputCursorPointingHand InputCursorShape = 2
	InputCursorCross InputCursorShape = 3
	InputCursorWait InputCursorShape = 4
	InputCursorBusy InputCursorShape = 5
	InputCursorDrag InputCursorShape = 6
	InputCursorCanDrop InputCursorShape = 7
	InputCursorForbidden InputCursorShape = 8
	InputCursorVsize InputCursorShape = 9
	InputCursorHsize InputCursorShape = 10
	InputCursorBdiagsize InputCursorShape = 11
	InputCursorFdiagsize InputCursorShape = 12
	InputCursorMove InputCursorShape = 13
	InputCursorVsplit InputCursorShape = 14
	InputCursorHsplit InputCursorShape = 15
	InputCursorHelp InputCursorShape = 16
)
func (gdClass Input) IsAnythingPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[0]) }
func (gdClass Input) IsKeyPressed(keycode Key) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[1], keycode) }
func (gdClass Input) IsPhysicalKeyPressed(keycode Key) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[2], keycode) }
func (gdClass Input) IsMouseButtonPressed(button MouseButton) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[3], button) }
func (gdClass Input) IsJoyButtonPressed(device int64, button JoyButton) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[4], device, button) }
func (gdClass Input) IsActionPressed(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[5], action, exact_match) }
func (gdClass Input) IsActionJustPressed(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[6], action, exact_match) }
func (gdClass Input) IsActionJustReleased(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[7], action, exact_match) }
func (gdClass Input) GetActionStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[8], action, exact_match) }
func (gdClass Input) GetActionRawStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[9], action, exact_match) }
func (gdClass Input) GetAxis(negative_action string, positive_action string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[10], negative_action, positive_action) }
func (gdClass Input) GetVector(negative_x string, positive_x string, negative_y string, positive_y string, deadzone float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[11], negative_x, positive_x, negative_y, positive_y, deadzone) }
func (gdClass Input) AddJoyMapping(mapping string, update_existing bool)  { gdnative.Call(gdnative.Object(gdClass), methodInput[12], mapping, update_existing) }
func (gdClass Input) RemoveJoyMapping(guid string)  { gdnative.Call(gdnative.Object(gdClass), methodInput[13], guid) }
func (gdClass Input) IsJoyKnown(device int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[14], device) }
func (gdClass Input) GetJoyAxis(device int64, axis JoyAxis) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[15], device, axis) }
func (gdClass Input) GetJoyName(device int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodInput[16], device) }
func (gdClass Input) GetJoyGuid(device int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodInput[17], device) }
func (gdClass Input) GetConnectedJoypads() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInput[18]) }
func (gdClass Input) GetJoyVibrationStrength(device int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[19], device) }
func (gdClass Input) GetJoyVibrationDuration(device int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[20], device) }
func (gdClass Input) StartJoyVibration(device int64, weak_magnitude float64, strong_magnitude float64, duration float64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[21], device, weak_magnitude, strong_magnitude, duration) }
func (gdClass Input) StopJoyVibration(device int64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[22], device) }
func (gdClass Input) VibrateHandheld(duration_ms int64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[23], duration_ms) }
func (gdClass Input) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[24]) }
func (gdClass Input) GetAccelerometer() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[25]) }
func (gdClass Input) GetMagnetometer() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[26]) }
func (gdClass Input) GetGyroscope() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[27]) }
func (gdClass Input) SetGravity(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[28], value) }
func (gdClass Input) SetAccelerometer(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[29], value) }
func (gdClass Input) SetMagnetometer(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[30], value) }
func (gdClass Input) SetGyroscope(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[31], value) }
func (gdClass Input) GetLastMouseVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[32]) }
func (gdClass Input) GetMouseButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInput[33]) }
func (gdClass Input) SetMouseMode(mode InputMouseMode)  { gdnative.Call(gdnative.Object(gdClass), methodInput[34], mode) }
func (gdClass Input) GetMouseMode() InputMouseMode { return gdnative.Return[InputMouseMode](gdnative.Object(gdClass), methodInput[35]) }
func (gdClass Input) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInput[36], position) }
func (gdClass Input) ActionPress(action string, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[37], action, strength) }
func (gdClass Input) ActionRelease(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInput[38], action) }
func (gdClass Input) SetDefaultCursorShape(shape InputCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodInput[39], shape) }
func (gdClass Input) GetCurrentCursorShape() InputCursorShape { return gdnative.Return[InputCursorShape](gdnative.Object(gdClass), methodInput[40]) }
func (gdClass Input) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInput[41], image, shape, hotspot) }
func (gdClass Input) ParseInputEvent(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInput[42], event) }
func (gdClass Input) SetUseAccumulatedInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodInput[43], enable) }
func (gdClass Input) IsUsingAccumulatedInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[44]) }
func (gdClass Input) FlushBufferedEvents()  { gdnative.Call(gdnative.Object(gdClass), methodInput[45]) }

type InputEvent gdnative.Object

var methodInputEvent [13]gdnative.Method
func (gdClass InputEvent) SetDevice(device int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEvent[0], device) }
func (gdClass InputEvent) GetDevice() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEvent[1]) }
func (gdClass InputEvent) IsAction(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[2], action, exact_match) }
func (gdClass InputEvent) IsActionPressed(action string, allow_echo bool, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[3], action, allow_echo, exact_match) }
func (gdClass InputEvent) IsActionReleased(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[4], action, exact_match) }
func (gdClass InputEvent) GetActionStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEvent[5], action, exact_match) }
func (gdClass InputEvent) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[6]) }
func (gdClass InputEvent) IsEcho() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[7]) }
func (gdClass InputEvent) AsText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInputEvent[8]) }
func (gdClass InputEvent) IsMatch(event InputEvent, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[9], event, exact_match) }
func (gdClass InputEvent) IsActionType() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[10]) }
func (gdClass InputEvent) Accumulate(with_event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[11], with_event) }
func (gdClass InputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent { return gdnative.Return[InputEvent](gdnative.Object(gdClass), methodInputEvent[12], xform, local_ofs) }

type InputEventAction gdnative.Object

var methodInputEventAction [5]gdnative.Method
func (gdClass InputEventAction) SetAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[0], action) }
func (gdClass InputEventAction) GetAction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInputEventAction[1]) }
func (gdClass InputEventAction) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[2], pressed) }
func (gdClass InputEventAction) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[3], strength) }
func (gdClass InputEventAction) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventAction[4]) }

type InputEventFromWindow gdnative.Object

var methodInputEventFromWindow [2]gdnative.Method
func (gdClass InputEventFromWindow) SetWindowId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventFromWindow[0], id) }
func (gdClass InputEventFromWindow) GetWindowId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventFromWindow[1]) }

type InputEventGesture gdnative.Object

var methodInputEventGesture [2]gdnative.Method
func (gdClass InputEventGesture) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventGesture[0], position) }
func (gdClass InputEventGesture) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventGesture[1]) }

type InputEventJoypadButton gdnative.Object

var methodInputEventJoypadButton [5]gdnative.Method
func (gdClass InputEventJoypadButton) SetButtonIndex(button_index JoyButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[0], button_index) }
func (gdClass InputEventJoypadButton) GetButtonIndex() JoyButton { return gdnative.Return[JoyButton](gdnative.Object(gdClass), methodInputEventJoypadButton[1]) }
func (gdClass InputEventJoypadButton) SetPressure(pressure float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[2], pressure) }
func (gdClass InputEventJoypadButton) GetPressure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventJoypadButton[3]) }
func (gdClass InputEventJoypadButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[4], pressed) }

type InputEventJoypadMotion gdnative.Object

var methodInputEventJoypadMotion [4]gdnative.Method
func (gdClass InputEventJoypadMotion) SetAxis(axis JoyAxis)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadMotion[0], axis) }
func (gdClass InputEventJoypadMotion) GetAxis() JoyAxis { return gdnative.Return[JoyAxis](gdnative.Object(gdClass), methodInputEventJoypadMotion[1]) }
func (gdClass InputEventJoypadMotion) SetAxisValue(axis_value float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadMotion[2], axis_value) }
func (gdClass InputEventJoypadMotion) GetAxisValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventJoypadMotion[3]) }

type InputEventKey gdnative.Object

var methodInputEventKey [10]gdnative.Method
func (gdClass InputEventKey) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[0], pressed) }
func (gdClass InputEventKey) SetKeycode(keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[1], keycode) }
func (gdClass InputEventKey) GetKeycode() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[2]) }
func (gdClass InputEventKey) SetPhysicalKeycode(physical_keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[3], physical_keycode) }
func (gdClass InputEventKey) GetPhysicalKeycode() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[4]) }
func (gdClass InputEventKey) SetUnicode(unicode int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[5], unicode) }
func (gdClass InputEventKey) GetUnicode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventKey[6]) }
func (gdClass InputEventKey) SetEcho(echo bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[7], echo) }
func (gdClass InputEventKey) GetKeycodeWithModifiers() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[8]) }
func (gdClass InputEventKey) GetPhysicalKeycodeWithModifiers() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[9]) }

type InputEventMIDI gdnative.Object

var methodInputEventMIDI [16]gdnative.Method
func (gdClass InputEventMIDI) SetChannel(channel int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[0], channel) }
func (gdClass InputEventMIDI) GetChannel() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[1]) }
func (gdClass InputEventMIDI) SetMessage(message MIDIMessage)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[2], message) }
func (gdClass InputEventMIDI) GetMessage() MIDIMessage { return gdnative.Return[MIDIMessage](gdnative.Object(gdClass), methodInputEventMIDI[3]) }
func (gdClass InputEventMIDI) SetPitch(pitch int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[4], pitch) }
func (gdClass InputEventMIDI) GetPitch() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[5]) }
func (gdClass InputEventMIDI) SetVelocity(velocity int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[6], velocity) }
func (gdClass InputEventMIDI) GetVelocity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[7]) }
func (gdClass InputEventMIDI) SetInstrument(instrument int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[8], instrument) }
func (gdClass InputEventMIDI) GetInstrument() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[9]) }
func (gdClass InputEventMIDI) SetPressure(pressure int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[10], pressure) }
func (gdClass InputEventMIDI) GetPressure() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[11]) }
func (gdClass InputEventMIDI) SetControllerNumber(controller_number int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[12], controller_number) }
func (gdClass InputEventMIDI) GetControllerNumber() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[13]) }
func (gdClass InputEventMIDI) SetControllerValue(controller_value int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[14], controller_value) }
func (gdClass InputEventMIDI) GetControllerValue() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[15]) }

type InputEventMagnifyGesture gdnative.Object

var methodInputEventMagnifyGesture [2]gdnative.Method
func (gdClass InputEventMagnifyGesture) SetFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMagnifyGesture[0], factor) }
func (gdClass InputEventMagnifyGesture) GetFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMagnifyGesture[1]) }

type InputEventMouse gdnative.Object

var methodInputEventMouse [6]gdnative.Method
func (gdClass InputEventMouse) SetButtonMask(button_mask MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[0], button_mask) }
func (gdClass InputEventMouse) GetButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInputEventMouse[1]) }
func (gdClass InputEventMouse) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[2], position) }
func (gdClass InputEventMouse) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouse[3]) }
func (gdClass InputEventMouse) SetGlobalPosition(global_position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[4], global_position) }
func (gdClass InputEventMouse) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouse[5]) }

type InputEventMouseButton gdnative.Object

var methodInputEventMouseButton [7]gdnative.Method
func (gdClass InputEventMouseButton) SetFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[0], factor) }
func (gdClass InputEventMouseButton) GetFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMouseButton[1]) }
func (gdClass InputEventMouseButton) SetButtonIndex(button_index MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[2], button_index) }
func (gdClass InputEventMouseButton) GetButtonIndex() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInputEventMouseButton[3]) }
func (gdClass InputEventMouseButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[4], pressed) }
func (gdClass InputEventMouseButton) SetDoubleClick(double_click bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[5], double_click) }
func (gdClass InputEventMouseButton) IsDoubleClick() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventMouseButton[6]) }

type InputEventMouseMotion gdnative.Object

var methodInputEventMouseMotion [10]gdnative.Method
func (gdClass InputEventMouseMotion) SetTilt(tilt Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[0], tilt) }
func (gdClass InputEventMouseMotion) GetTilt() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[1]) }
func (gdClass InputEventMouseMotion) SetPressure(pressure float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[2], pressure) }
func (gdClass InputEventMouseMotion) GetPressure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMouseMotion[3]) }
func (gdClass InputEventMouseMotion) SetPenInverted(pen_inverted bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[4], pen_inverted) }
func (gdClass InputEventMouseMotion) GetPenInverted() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventMouseMotion[5]) }
func (gdClass InputEventMouseMotion) SetRelative(relative Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[6], relative) }
func (gdClass InputEventMouseMotion) GetRelative() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[7]) }
func (gdClass InputEventMouseMotion) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[8], velocity) }
func (gdClass InputEventMouseMotion) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[9]) }

type InputEventPanGesture gdnative.Object

var methodInputEventPanGesture [2]gdnative.Method
func (gdClass InputEventPanGesture) SetDelta(delta Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventPanGesture[0], delta) }
func (gdClass InputEventPanGesture) GetDelta() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventPanGesture[1]) }

type InputEventScreenDrag gdnative.Object

var methodInputEventScreenDrag [8]gdnative.Method
func (gdClass InputEventScreenDrag) SetIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[0], index) }
func (gdClass InputEventScreenDrag) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventScreenDrag[1]) }
func (gdClass InputEventScreenDrag) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[2], position) }
func (gdClass InputEventScreenDrag) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[3]) }
func (gdClass InputEventScreenDrag) SetRelative(relative Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[4], relative) }
func (gdClass InputEventScreenDrag) GetRelative() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[5]) }
func (gdClass InputEventScreenDrag) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[6], velocity) }
func (gdClass InputEventScreenDrag) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[7]) }

type InputEventScreenTouch gdnative.Object

var methodInputEventScreenTouch [5]gdnative.Method
func (gdClass InputEventScreenTouch) SetIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[0], index) }
func (gdClass InputEventScreenTouch) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventScreenTouch[1]) }
func (gdClass InputEventScreenTouch) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[2], position) }
func (gdClass InputEventScreenTouch) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenTouch[3]) }
func (gdClass InputEventScreenTouch) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[4], pressed) }

type InputEventShortcut gdnative.Object

var methodInputEventShortcut [2]gdnative.Method
func (gdClass InputEventShortcut) SetShortcut(shortcut Shortcut)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventShortcut[0], shortcut) }
func (gdClass InputEventShortcut) GetShortcut() Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodInputEventShortcut[1]) }

type InputEventWithModifiers gdnative.Object

var methodInputEventWithModifiers [12]gdnative.Method
func (gdClass InputEventWithModifiers) SetStoreCommand(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[0], enable) }
func (gdClass InputEventWithModifiers) IsStoringCommand() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[1]) }
func (gdClass InputEventWithModifiers) SetAltPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[2], pressed) }
func (gdClass InputEventWithModifiers) IsAltPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[3]) }
func (gdClass InputEventWithModifiers) SetShiftPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[4], pressed) }
func (gdClass InputEventWithModifiers) IsShiftPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[5]) }
func (gdClass InputEventWithModifiers) SetCtrlPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[6], pressed) }
func (gdClass InputEventWithModifiers) IsCtrlPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[7]) }
func (gdClass InputEventWithModifiers) SetMetaPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[8], pressed) }
func (gdClass InputEventWithModifiers) IsMetaPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[9]) }
func (gdClass InputEventWithModifiers) SetCommandPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[10], pressed) }
func (gdClass InputEventWithModifiers) IsCommandPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[11]) }

type InputMap gdnative.Object

var methodInputMap [13]gdnative.Method
func (gdClass InputMap) HasAction(action string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[0], action) }
func (gdClass InputMap) GetActions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInputMap[1]) }
func (gdClass InputMap) AddAction(action string, deadzone float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[2], action, deadzone) }
func (gdClass InputMap) EraseAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[3], action) }
func (gdClass InputMap) ActionSetDeadzone(action string, deadzone float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[4], action, deadzone) }
func (gdClass InputMap) ActionGetDeadzone(action string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputMap[5], action) }
func (gdClass InputMap) ActionAddEvent(action string, event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[6], action, event) }
func (gdClass InputMap) ActionHasEvent(action string, event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[7], action, event) }
func (gdClass InputMap) ActionEraseEvent(action string, event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[8], action, event) }
func (gdClass InputMap) ActionEraseEvents(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[9], action) }
func (gdClass InputMap) ActionGetEvents(action string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInputMap[10], action) }
func (gdClass InputMap) EventIsAction(event InputEvent, action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[11], event, action, exact_match) }
func (gdClass InputMap) LoadFromProjectSettings()  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[12]) }

type InstancePlaceholder gdnative.Object

var methodInstancePlaceholder [3]gdnative.Method
func (gdClass InstancePlaceholder) GetStoredValues(with_order bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodInstancePlaceholder[0], with_order) }
func (gdClass InstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodInstancePlaceholder[1], replace, custom_scene) }
func (gdClass InstancePlaceholder) GetInstancePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInstancePlaceholder[2]) }

type IntervalTweener gdnative.Object

var methodIntervalTweener [0]gdnative.Method

type ItemList gdnative.Object

var methodItemList [69]gdnative.Method

type ItemListIconMode int64

const (
	ItemListIconModeTop ItemListIconMode = 0
	ItemListIconModeLeft ItemListIconMode = 1
)

type ItemListSelectMode int64

const (
	ItemListSelectSingle ItemListSelectMode = 0
	ItemListSelectMulti ItemListSelectMode = 1
)
func (gdClass ItemList) AddItem(text string, icon Texture2D, selectable bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[0], text, icon, selectable) }
func (gdClass ItemList) AddIconItem(icon Texture2D, selectable bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[1], icon, selectable) }
func (gdClass ItemList) SetItemText(idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[2], idx, text) }
func (gdClass ItemList) GetItemText(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[3], idx) }
func (gdClass ItemList) SetItemIcon(idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[4], idx, icon) }
func (gdClass ItemList) GetItemIcon(idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodItemList[5], idx) }
func (gdClass ItemList) SetItemTextDirection(idx int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[6], idx, direction) }
func (gdClass ItemList) GetItemTextDirection(idx int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodItemList[7], idx) }
func (gdClass ItemList) SetItemLanguage(idx int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[8], idx, language) }
func (gdClass ItemList) GetItemLanguage(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[9], idx) }
func (gdClass ItemList) SetItemIconTransposed(idx int64, transposed bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[10], idx, transposed) }
func (gdClass ItemList) IsItemIconTransposed(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[11], idx) }
func (gdClass ItemList) SetItemIconRegion(idx int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[12], idx, rect) }
func (gdClass ItemList) GetItemIconRegion(idx int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodItemList[13], idx) }
func (gdClass ItemList) SetItemIconModulate(idx int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[14], idx, modulate) }
func (gdClass ItemList) GetItemIconModulate(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[15], idx) }
func (gdClass ItemList) SetItemSelectable(idx int64, selectable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[16], idx, selectable) }
func (gdClass ItemList) IsItemSelectable(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[17], idx) }
func (gdClass ItemList) SetItemDisabled(idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[18], idx, disabled) }
func (gdClass ItemList) IsItemDisabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[19], idx) }
func (gdClass ItemList) SetItemMetadata(idx int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[20], idx, metadata) }
func (gdClass ItemList) GetItemMetadata(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodItemList[21], idx) }
func (gdClass ItemList) SetItemCustomBgColor(idx int64, custom_bg_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[22], idx, custom_bg_color) }
func (gdClass ItemList) GetItemCustomBgColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[23], idx) }
func (gdClass ItemList) SetItemCustomFgColor(idx int64, custom_fg_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[24], idx, custom_fg_color) }
func (gdClass ItemList) GetItemCustomFgColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[25], idx) }
func (gdClass ItemList) SetItemTooltipEnabled(idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[26], idx, enable) }
func (gdClass ItemList) IsItemTooltipEnabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[27], idx) }
func (gdClass ItemList) SetItemTooltip(idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[28], idx, tooltip) }
func (gdClass ItemList) GetItemTooltip(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[29], idx) }
func (gdClass ItemList) Select(idx int64, single bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[30], idx, single) }
func (gdClass ItemList) Deselect(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[31], idx) }
func (gdClass ItemList) DeselectAll()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[32]) }
func (gdClass ItemList) IsSelected(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[33], idx) }
func (gdClass ItemList) GetSelectedItems() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodItemList[34]) }
func (gdClass ItemList) MoveItem(from_idx int64, to_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[35], from_idx, to_idx) }
func (gdClass ItemList) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[36], count) }
func (gdClass ItemList) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[37]) }
func (gdClass ItemList) RemoveItem(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[38], idx) }
func (gdClass ItemList) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[39]) }
func (gdClass ItemList) SortItemsByText()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[40]) }
func (gdClass ItemList) SetFixedColumnWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[41], width) }
func (gdClass ItemList) GetFixedColumnWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[42]) }
func (gdClass ItemList) SetSameColumnWidth(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[43], enable) }
func (gdClass ItemList) IsSameColumnWidth() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[44]) }
func (gdClass ItemList) SetMaxTextLines(lines int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[45], lines) }
func (gdClass ItemList) GetMaxTextLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[46]) }
func (gdClass ItemList) SetMaxColumns(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[47], amount) }
func (gdClass ItemList) GetMaxColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[48]) }
func (gdClass ItemList) SetSelectMode(mode ItemListSelectMode)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[49], mode) }
func (gdClass ItemList) GetSelectMode() ItemListSelectMode { return gdnative.Return[ItemListSelectMode](gdnative.Object(gdClass), methodItemList[50]) }
func (gdClass ItemList) SetIconMode(mode ItemListIconMode)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[51], mode) }
func (gdClass ItemList) GetIconMode() ItemListIconMode { return gdnative.Return[ItemListIconMode](gdnative.Object(gdClass), methodItemList[52]) }
func (gdClass ItemList) SetFixedIconSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[53], size) }
func (gdClass ItemList) GetFixedIconSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodItemList[54]) }
func (gdClass ItemList) SetIconScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[55], scale) }
func (gdClass ItemList) GetIconScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodItemList[56]) }
func (gdClass ItemList) SetAllowRmbSelect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[57], allow) }
func (gdClass ItemList) GetAllowRmbSelect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[58]) }
func (gdClass ItemList) SetAllowReselect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[59], allow) }
func (gdClass ItemList) GetAllowReselect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[60]) }
func (gdClass ItemList) SetAutoHeight(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[61], enable) }
func (gdClass ItemList) HasAutoHeight() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[62]) }
func (gdClass ItemList) IsAnythingSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[63]) }
func (gdClass ItemList) GetItemAtPosition(position Vector2, exact bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[64], position, exact) }
func (gdClass ItemList) EnsureCurrentIsVisible()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[65]) }
func (gdClass ItemList) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodItemList[66]) }
func (gdClass ItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[67], overrun_behavior) }
func (gdClass ItemList) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodItemList[68]) }

type JNISingleton gdnative.Object

var methodJNISingleton [0]gdnative.Method

type JSON gdnative.Object

var methodJSON [5]gdnative.Method
func (gdClass JSON) Stringify(data any, indent string, sort_keys bool, full_precision bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSON[0], data, indent, sort_keys, full_precision) }
func (gdClass JSON) Parse(json_string string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodJSON[1], json_string) }
func (gdClass JSON) GetData() any { return gdnative.Return[any](gdnative.Object(gdClass), methodJSON[2]) }
func (gdClass JSON) GetErrorLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodJSON[3]) }
func (gdClass JSON) GetErrorMessage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSON[4]) }

type JSONRPC gdnative.Object

var methodJSONRPC [7]gdnative.Method

type JSONRPCErrorCode int64

const (
	JSONRPCParseError JSONRPCErrorCode = -32700
	JSONRPCInvalidRequest JSONRPCErrorCode = -32600
	JSONRPCMethodNotFound JSONRPCErrorCode = -32601
	JSONRPCInvalidParams JSONRPCErrorCode = -32602
	JSONRPCInternalError JSONRPCErrorCode = -32603
)
func (gdClass JSONRPC) SetScope(scope string, target Object)  { gdnative.Call(gdnative.Object(gdClass), methodJSONRPC[0], scope, target) }
func (gdClass JSONRPC) ProcessAction(action any, recurse bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJSONRPC[1], action, recurse) }
func (gdClass JSONRPC) ProcessString(action string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSONRPC[2], action) }
func (gdClass JSONRPC) MakeRequest(method string, params any, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[3], method, params, id) }
func (gdClass JSONRPC) MakeResponse(result any, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[4], result, id) }
func (gdClass JSONRPC) MakeNotification(method string, params any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[5], method, params) }
func (gdClass JSONRPC) MakeResponseError(code int64, message string, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[6], code, message, id) }

type JavaClass gdnative.Object

var methodJavaClass [0]gdnative.Method

type JavaClassWrapper gdnative.Object

var methodJavaClassWrapper [1]gdnative.Method
func (gdClass JavaClassWrapper) Wrap(name string) JavaClass { return gdnative.Return[JavaClass](gdnative.Object(gdClass), methodJavaClassWrapper[0], name) }

type JavaScript gdnative.Object

var methodJavaScript [7]gdnative.Method
func (gdClass JavaScript) Eval(code string, use_global_execution_context bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJavaScript[0], code, use_global_execution_context) }
func (gdClass JavaScript) GetInterface(intf string) JavaScriptObject { return gdnative.Return[JavaScriptObject](gdnative.Object(gdClass), methodJavaScript[1], intf) }
func (gdClass JavaScript) CreateCallback(callable Callable) JavaScriptObject { return gdnative.Return[JavaScriptObject](gdnative.Object(gdClass), methodJavaScript[2], callable) }
func (gdClass JavaScript) CreateObject(object string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJavaScript[3], object) }
func (gdClass JavaScript) DownloadBuffer(buffer []byte, name string, mime string)  { gdnative.Call(gdnative.Object(gdClass), methodJavaScript[4], buffer, name, mime) }
func (gdClass JavaScript) PwaNeedsUpdate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJavaScript[5]) }
func (gdClass JavaScript) PwaUpdate() error { return gdnative.Return[error](gdnative.Object(gdClass), methodJavaScript[6]) }

type JavaScriptObject gdnative.Object

var methodJavaScriptObject [0]gdnative.Method

type Joint2D gdnative.Object

var methodJoint2D [8]gdnative.Method
func (gdClass Joint2D) SetNodeA(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[0], node) }
func (gdClass Joint2D) GetNodeA() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint2D[1]) }
func (gdClass Joint2D) SetNodeB(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[2], node) }
func (gdClass Joint2D) GetNodeB() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint2D[3]) }
func (gdClass Joint2D) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[4], bias) }
func (gdClass Joint2D) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodJoint2D[5]) }
func (gdClass Joint2D) SetExcludeNodesFromCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[6], enable) }
func (gdClass Joint2D) GetExcludeNodesFromCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJoint2D[7]) }

type Joint3D gdnative.Object

var methodJoint3D [8]gdnative.Method
func (gdClass Joint3D) SetNodeA(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[0], node) }
func (gdClass Joint3D) GetNodeA() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint3D[1]) }
func (gdClass Joint3D) SetNodeB(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[2], node) }
func (gdClass Joint3D) GetNodeB() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint3D[3]) }
func (gdClass Joint3D) SetSolverPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[4], priority) }
func (gdClass Joint3D) GetSolverPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodJoint3D[5]) }
func (gdClass Joint3D) SetExcludeNodesFromCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[6], enable) }
func (gdClass Joint3D) GetExcludeNodesFromCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJoint3D[7]) }

type KinematicCollision2D gdnative.Object

var methodKinematicCollision2D [13]gdnative.Method
func (gdClass KinematicCollision2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[0]) }
func (gdClass KinematicCollision2D) GetNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[1]) }
func (gdClass KinematicCollision2D) GetTravel() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[2]) }
func (gdClass KinematicCollision2D) GetRemainder() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[3]) }
func (gdClass KinematicCollision2D) GetAngle(up_direction Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision2D[4], up_direction) }
func (gdClass KinematicCollision2D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision2D[5]) }
func (gdClass KinematicCollision2D) GetLocalShape() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[6]) }
func (gdClass KinematicCollision2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[7]) }
func (gdClass KinematicCollision2D) GetColliderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision2D[8]) }
func (gdClass KinematicCollision2D) GetColliderRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodKinematicCollision2D[9]) }
func (gdClass KinematicCollision2D) GetColliderShape() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[10]) }
func (gdClass KinematicCollision2D) GetColliderShapeIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision2D[11]) }
func (gdClass KinematicCollision2D) GetColliderVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[12]) }

type KinematicCollision3D gdnative.Object

var methodKinematicCollision3D [14]gdnative.Method
func (gdClass KinematicCollision3D) GetTravel() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[0]) }
func (gdClass KinematicCollision3D) GetRemainder() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[1]) }
func (gdClass KinematicCollision3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision3D[2]) }
func (gdClass KinematicCollision3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[3]) }
func (gdClass KinematicCollision3D) GetPosition(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[4], collision_index) }
func (gdClass KinematicCollision3D) GetNormal(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[5], collision_index) }
func (gdClass KinematicCollision3D) GetAngle(collision_index int64, up_direction Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision3D[6], collision_index, up_direction) }
func (gdClass KinematicCollision3D) GetLocalShape(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[7], collision_index) }
func (gdClass KinematicCollision3D) GetCollider(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[8], collision_index) }
func (gdClass KinematicCollision3D) GetColliderId(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[9], collision_index) }
func (gdClass KinematicCollision3D) GetColliderRid(collision_index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodKinematicCollision3D[10], collision_index) }
func (gdClass KinematicCollision3D) GetColliderShape(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[11], collision_index) }
func (gdClass KinematicCollision3D) GetColliderShapeIndex(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[12], collision_index) }
func (gdClass KinematicCollision3D) GetColliderVelocity(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[13], collision_index) }

type Label gdnative.Object

var methodLabel [38]gdnative.Method
func (gdClass Label) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[0], alignment) }
func (gdClass Label) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLabel[1]) }
func (gdClass Label) SetVerticalAlignment(alignment VerticalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[2], alignment) }
func (gdClass Label) GetVerticalAlignment() VerticalAlignment { return gdnative.Return[VerticalAlignment](gdnative.Object(gdClass), methodLabel[3]) }
func (gdClass Label) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[4], text) }
func (gdClass Label) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel[5]) }
func (gdClass Label) SetLabelSettings(settings LabelSettings)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[6], settings) }
func (gdClass Label) GetLabelSettings() LabelSettings { return gdnative.Return[LabelSettings](gdnative.Object(gdClass), methodLabel[7]) }
func (gdClass Label) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[8], direction) }
func (gdClass Label) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLabel[9]) }
func (gdClass Label) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[10], language) }
func (gdClass Label) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel[11]) }
func (gdClass Label) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[12], autowrap_mode) }
func (gdClass Label) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodLabel[13]) }
func (gdClass Label) SetClipText(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[14], enable) }
func (gdClass Label) IsClippingText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel[15]) }
func (gdClass Label) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[16], overrun_behavior) }
func (gdClass Label) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodLabel[17]) }
func (gdClass Label) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[18], enable) }
func (gdClass Label) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel[19]) }
func (gdClass Label) GetLineHeight(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[20], line) }
func (gdClass Label) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[21]) }
func (gdClass Label) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[22]) }
func (gdClass Label) GetTotalCharacterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[23]) }
func (gdClass Label) SetVisibleCharacters(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[24], amount) }
func (gdClass Label) GetVisibleCharacters() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[25]) }
func (gdClass Label) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return gdnative.Return[TextServerVisibleCharactersBehavior](gdnative.Object(gdClass), methodLabel[26]) }
func (gdClass Label) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[27], behavior) }
func (gdClass Label) SetPercentVisible(percent_visible float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[28], percent_visible) }
func (gdClass Label) GetPercentVisible() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel[29]) }
func (gdClass Label) SetLinesSkipped(lines_skipped int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[30], lines_skipped) }
func (gdClass Label) GetLinesSkipped() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[31]) }
func (gdClass Label) SetMaxLinesVisible(lines_visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[32], lines_visible) }
func (gdClass Label) GetMaxLinesVisible() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[33]) }
func (gdClass Label) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[34], parser) }
func (gdClass Label) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLabel[35]) }
func (gdClass Label) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[36], args) }
func (gdClass Label) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLabel[37]) }

type Label3D gdnative.Object

var methodLabel3D [51]gdnative.Method

type Label3DDrawFlags int64

const (
	Label3DFlagShaded Label3DDrawFlags = 0
	Label3DFlagDoubleSided Label3DDrawFlags = 1
	Label3DFlagDisableDepthTest Label3DDrawFlags = 2
	Label3DFlagFixedSize Label3DDrawFlags = 3
	Label3DFlagMax Label3DDrawFlags = 4
)

type Label3DAlphaCutMode int64

const (
	Label3DAlphaCutDisabled Label3DAlphaCutMode = 0
	Label3DAlphaCutDiscard Label3DAlphaCutMode = 1
	Label3DAlphaCutOpaquePrepass Label3DAlphaCutMode = 2
)
func (gdClass Label3D) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[0], alignment) }
func (gdClass Label3D) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLabel3D[1]) }
func (gdClass Label3D) SetVerticalAlignment(alignment VerticalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[2], alignment) }
func (gdClass Label3D) GetVerticalAlignment() VerticalAlignment { return gdnative.Return[VerticalAlignment](gdnative.Object(gdClass), methodLabel3D[3]) }
func (gdClass Label3D) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[4], modulate) }
func (gdClass Label3D) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabel3D[5]) }
func (gdClass Label3D) SetOutlineModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[6], modulate) }
func (gdClass Label3D) GetOutlineModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabel3D[7]) }
func (gdClass Label3D) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[8], text) }
func (gdClass Label3D) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel3D[9]) }
func (gdClass Label3D) SetTextDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[10], direction) }
func (gdClass Label3D) GetTextDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodLabel3D[11]) }
func (gdClass Label3D) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[12], language) }
func (gdClass Label3D) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel3D[13]) }
func (gdClass Label3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[14], parser) }
func (gdClass Label3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLabel3D[15]) }
func (gdClass Label3D) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[16], args) }
func (gdClass Label3D) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLabel3D[17]) }
func (gdClass Label3D) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[18], enable) }
func (gdClass Label3D) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel3D[19]) }
func (gdClass Label3D) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[20], priority) }
func (gdClass Label3D) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[21]) }
func (gdClass Label3D) SetOutlineRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[22], priority) }
func (gdClass Label3D) GetOutlineRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[23]) }
func (gdClass Label3D) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[24], font) }
func (gdClass Label3D) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodLabel3D[25]) }
func (gdClass Label3D) SetFontSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[26], size) }
func (gdClass Label3D) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[27]) }
func (gdClass Label3D) SetOutlineSize(outline_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[28], outline_size) }
func (gdClass Label3D) GetOutlineSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[29]) }
func (gdClass Label3D) SetLineSpacing(line_spacing float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[30], line_spacing) }
func (gdClass Label3D) GetLineSpacing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[31]) }
func (gdClass Label3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[32], autowrap_mode) }
func (gdClass Label3D) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodLabel3D[33]) }
func (gdClass Label3D) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[34], width) }
func (gdClass Label3D) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[35]) }
func (gdClass Label3D) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[36], pixel_size) }
func (gdClass Label3D) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[37]) }
func (gdClass Label3D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[38], offset) }
func (gdClass Label3D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLabel3D[39]) }
func (gdClass Label3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[40], flag, enabled) }
func (gdClass Label3D) GetDrawFlag(flag Label3DDrawFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel3D[41], flag) }
func (gdClass Label3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[42], mode) }
func (gdClass Label3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodLabel3D[43]) }
func (gdClass Label3D) SetAlphaCutMode(mode Label3DAlphaCutMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[44], mode) }
func (gdClass Label3D) GetAlphaCutMode() Label3DAlphaCutMode { return gdnative.Return[Label3DAlphaCutMode](gdnative.Object(gdClass), methodLabel3D[45]) }
func (gdClass Label3D) SetAlphaScissorThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[46], threshold) }
func (gdClass Label3D) GetAlphaScissorThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[47]) }
func (gdClass Label3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[48], mode) }
func (gdClass Label3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodLabel3D[49]) }
func (gdClass Label3D) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodLabel3D[50]) }

type LabelSettings gdnative.Object

var methodLabelSettings [18]gdnative.Method
func (gdClass LabelSettings) SetLineSpacing(spacing float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[0], spacing) }
func (gdClass LabelSettings) GetLineSpacing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabelSettings[1]) }
func (gdClass LabelSettings) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[2], font) }
func (gdClass LabelSettings) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodLabelSettings[3]) }
func (gdClass LabelSettings) SetFontSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[4], size) }
func (gdClass LabelSettings) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[5]) }
func (gdClass LabelSettings) SetFontColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[6], color) }
func (gdClass LabelSettings) GetFontColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[7]) }
func (gdClass LabelSettings) SetOutlineSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[8], size) }
func (gdClass LabelSettings) GetOutlineSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[9]) }
func (gdClass LabelSettings) SetOutlineColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[10], color) }
func (gdClass LabelSettings) GetOutlineColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[11]) }
func (gdClass LabelSettings) SetShadowSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[12], size) }
func (gdClass LabelSettings) GetShadowSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[13]) }
func (gdClass LabelSettings) SetShadowColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[14], color) }
func (gdClass LabelSettings) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[15]) }
func (gdClass LabelSettings) SetShadowOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[16], offset) }
func (gdClass LabelSettings) GetShadowOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLabelSettings[17]) }

type Light2D gdnative.Object

var methodLight2D [32]gdnative.Method

type Light2DShadowFilter int64

const (
	Light2DShadowFilterNone Light2DShadowFilter = 0
	Light2DShadowFilterPcf5 Light2DShadowFilter = 1
	Light2DShadowFilterPcf13 Light2DShadowFilter = 2
)

type Light2DBlendMode int64

const (
	Light2DBlendModeAdd Light2DBlendMode = 0
	Light2DBlendModeSub Light2DBlendMode = 1
	Light2DBlendModeMix Light2DBlendMode = 2
)
func (gdClass Light2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[0], enabled) }
func (gdClass Light2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[1]) }
func (gdClass Light2D) SetEditorOnly(editor_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[2], editor_only) }
func (gdClass Light2D) IsEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[3]) }
func (gdClass Light2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[4], color) }
func (gdClass Light2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight2D[5]) }
func (gdClass Light2D) SetEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[6], energy) }
func (gdClass Light2D) GetEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[7]) }
func (gdClass Light2D) SetZRangeMin(z int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[8], z) }
func (gdClass Light2D) GetZRangeMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[9]) }
func (gdClass Light2D) SetZRangeMax(z int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[10], z) }
func (gdClass Light2D) GetZRangeMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[11]) }
func (gdClass Light2D) SetLayerRangeMin(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[12], layer) }
func (gdClass Light2D) GetLayerRangeMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[13]) }
func (gdClass Light2D) SetLayerRangeMax(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[14], layer) }
func (gdClass Light2D) GetLayerRangeMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[15]) }
func (gdClass Light2D) SetItemCullMask(item_cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[16], item_cull_mask) }
func (gdClass Light2D) GetItemCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[17]) }
func (gdClass Light2D) SetItemShadowCullMask(item_shadow_cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[18], item_shadow_cull_mask) }
func (gdClass Light2D) GetItemShadowCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[19]) }
func (gdClass Light2D) SetShadowEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[20], enabled) }
func (gdClass Light2D) IsShadowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[21]) }
func (gdClass Light2D) SetShadowSmooth(smooth float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[22], smooth) }
func (gdClass Light2D) GetShadowSmooth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[23]) }
func (gdClass Light2D) SetShadowFilter(filter Light2DShadowFilter)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[24], filter) }
func (gdClass Light2D) GetShadowFilter() Light2DShadowFilter { return gdnative.Return[Light2DShadowFilter](gdnative.Object(gdClass), methodLight2D[25]) }
func (gdClass Light2D) SetShadowColor(shadow_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[26], shadow_color) }
func (gdClass Light2D) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight2D[27]) }
func (gdClass Light2D) SetBlendMode(mode Light2DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[28], mode) }
func (gdClass Light2D) GetBlendMode() Light2DBlendMode { return gdnative.Return[Light2DBlendMode](gdnative.Object(gdClass), methodLight2D[29]) }
func (gdClass Light2D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[30], height) }
func (gdClass Light2D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[31]) }

type Light3D gdnative.Object

var methodLight3D [26]gdnative.Method

type Light3DParam int64

const (
	Light3DParamEnergy Light3DParam = 0
	Light3DParamIndirectEnergy Light3DParam = 1
	Light3DParamSpecular Light3DParam = 2
	Light3DParamRange Light3DParam = 3
	Light3DParamSize Light3DParam = 4
	Light3DParamAttenuation Light3DParam = 5
	Light3DParamSpotAngle Light3DParam = 6
	Light3DParamSpotAttenuation Light3DParam = 7
	Light3DParamShadowMaxDistance Light3DParam = 8
	Light3DParamShadowSplit1Offset Light3DParam = 9
	Light3DParamShadowSplit2Offset Light3DParam = 10
	Light3DParamShadowSplit3Offset Light3DParam = 11
	Light3DParamShadowFadeStart Light3DParam = 12
	Light3DParamShadowNormalBias Light3DParam = 13
	Light3DParamShadowBias Light3DParam = 14
	Light3DParamShadowPancakeSize Light3DParam = 15
	Light3DParamShadowOpacity Light3DParam = 16
	Light3DParamShadowBlur Light3DParam = 17
	Light3DParamShadowVolumetricFogFade Light3DParam = 18
	Light3DParamTransmittanceBias Light3DParam = 19
	Light3DParamMax Light3DParam = 20
)

type Light3DBakeMode int64

const (
	Light3DBakeDisabled Light3DBakeMode = 0
	Light3DBakeStatic Light3DBakeMode = 1
	Light3DBakeDynamic Light3DBakeMode = 2
)
func (gdClass Light3D) SetEditorOnly(editor_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[0], editor_only) }
func (gdClass Light3D) IsEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[1]) }
func (gdClass Light3D) SetParam(param Light3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[2], param, value) }
func (gdClass Light3D) GetParam(param Light3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[3], param) }
func (gdClass Light3D) SetShadow(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[4], enabled) }
func (gdClass Light3D) HasShadow() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[5]) }
func (gdClass Light3D) SetNegative(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[6], enabled) }
func (gdClass Light3D) IsNegative() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[7]) }
func (gdClass Light3D) SetCullMask(cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[8], cull_mask) }
func (gdClass Light3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight3D[9]) }
func (gdClass Light3D) SetEnableDistanceFade(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[10], enable) }
func (gdClass Light3D) IsDistanceFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[11]) }
func (gdClass Light3D) SetDistanceFadeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[12], distance) }
func (gdClass Light3D) GetDistanceFadeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[13]) }
func (gdClass Light3D) SetDistanceFadeShadow(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[14], distance) }
func (gdClass Light3D) GetDistanceFadeShadow() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[15]) }
func (gdClass Light3D) SetDistanceFadeLength(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[16], distance) }
func (gdClass Light3D) GetDistanceFadeLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[17]) }
func (gdClass Light3D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[18], color) }
func (gdClass Light3D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight3D[19]) }
func (gdClass Light3D) SetShadowReverseCullFace(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[20], enable) }
func (gdClass Light3D) GetShadowReverseCullFace() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[21]) }
func (gdClass Light3D) SetBakeMode(bake_mode Light3DBakeMode)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[22], bake_mode) }
func (gdClass Light3D) GetBakeMode() Light3DBakeMode { return gdnative.Return[Light3DBakeMode](gdnative.Object(gdClass), methodLight3D[23]) }
func (gdClass Light3D) SetProjector(projector Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[24], projector) }
func (gdClass Light3D) GetProjector() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLight3D[25]) }

type LightOccluder2D gdnative.Object

var methodLightOccluder2D [6]gdnative.Method
func (gdClass LightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[0], polygon) }
func (gdClass LightOccluder2D) GetOccluderPolygon() OccluderPolygon2D { return gdnative.Return[OccluderPolygon2D](gdnative.Object(gdClass), methodLightOccluder2D[1]) }
func (gdClass LightOccluder2D) SetOccluderLightMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[2], mask) }
func (gdClass LightOccluder2D) GetOccluderLightMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightOccluder2D[3]) }
func (gdClass LightOccluder2D) SetAsSdfCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[4], enable) }
func (gdClass LightOccluder2D) IsSetAsSdfCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightOccluder2D[5]) }

type LightmapGI gdnative.Object

var methodLightmapGI [26]gdnative.Method

type LightmapGIBakeQuality int64

const (
	LightmapGIBakeQualityLow LightmapGIBakeQuality = 0
	LightmapGIBakeQualityMedium LightmapGIBakeQuality = 1
	LightmapGIBakeQualityHigh LightmapGIBakeQuality = 2
	LightmapGIBakeQualityUltra LightmapGIBakeQuality = 3
)

type LightmapGIGenerateProbes int64

const (
	LightmapGIGenerateProbesDisabled LightmapGIGenerateProbes = 0
	LightmapGIGenerateProbesSubdiv4 LightmapGIGenerateProbes = 1
	LightmapGIGenerateProbesSubdiv8 LightmapGIGenerateProbes = 2
	LightmapGIGenerateProbesSubdiv16 LightmapGIGenerateProbes = 3
	LightmapGIGenerateProbesSubdiv32 LightmapGIGenerateProbes = 4
)

type LightmapGIBakeError int64

const (
	LightmapGIBakeErrorOk LightmapGIBakeError = 0
	LightmapGIBakeErrorNoLightmapper LightmapGIBakeError = 1
	LightmapGIBakeErrorNoSavePath LightmapGIBakeError = 2
	LightmapGIBakeErrorNoMeshes LightmapGIBakeError = 3
	LightmapGIBakeErrorMeshesInvalid LightmapGIBakeError = 4
	LightmapGIBakeErrorCantCreateImage LightmapGIBakeError = 5
	LightmapGIBakeErrorUserAborted LightmapGIBakeError = 6
)

type LightmapGIEnvironmentMode int64

const (
	LightmapGIEnvironmentModeDisabled LightmapGIEnvironmentMode = 0
	LightmapGIEnvironmentModeScene LightmapGIEnvironmentMode = 1
	LightmapGIEnvironmentModeCustomSky LightmapGIEnvironmentMode = 2
	LightmapGIEnvironmentModeCustomColor LightmapGIEnvironmentMode = 3
)
func (gdClass LightmapGI) SetLightData(data LightmapGIData)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[0], data) }
func (gdClass LightmapGI) GetLightData() LightmapGIData { return gdnative.Return[LightmapGIData](gdnative.Object(gdClass), methodLightmapGI[1]) }
func (gdClass LightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[2], bake_quality) }
func (gdClass LightmapGI) GetBakeQuality() LightmapGIBakeQuality { return gdnative.Return[LightmapGIBakeQuality](gdnative.Object(gdClass), methodLightmapGI[3]) }
func (gdClass LightmapGI) SetBounces(bounces int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[4], bounces) }
func (gdClass LightmapGI) GetBounces() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGI[5]) }
func (gdClass LightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[6], subdivision) }
func (gdClass LightmapGI) GetGenerateProbes() LightmapGIGenerateProbes { return gdnative.Return[LightmapGIGenerateProbes](gdnative.Object(gdClass), methodLightmapGI[7]) }
func (gdClass LightmapGI) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[8], bias) }
func (gdClass LightmapGI) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLightmapGI[9]) }
func (gdClass LightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[10], mode) }
func (gdClass LightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode { return gdnative.Return[LightmapGIEnvironmentMode](gdnative.Object(gdClass), methodLightmapGI[11]) }
func (gdClass LightmapGI) SetEnvironmentCustomSky(sky Sky)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[12], sky) }
func (gdClass LightmapGI) GetEnvironmentCustomSky() Sky { return gdnative.Return[Sky](gdnative.Object(gdClass), methodLightmapGI[13]) }
func (gdClass LightmapGI) SetEnvironmentCustomColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[14], color) }
func (gdClass LightmapGI) GetEnvironmentCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLightmapGI[15]) }
func (gdClass LightmapGI) SetEnvironmentCustomEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[16], energy) }
func (gdClass LightmapGI) GetEnvironmentCustomEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLightmapGI[17]) }
func (gdClass LightmapGI) SetMaxTextureSize(max_texture_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[18], max_texture_size) }
func (gdClass LightmapGI) GetMaxTextureSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGI[19]) }
func (gdClass LightmapGI) SetUseDenoiser(use_denoiser bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[20], use_denoiser) }
func (gdClass LightmapGI) IsUsingDenoiser() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[21]) }
func (gdClass LightmapGI) SetInterior(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[22], enable) }
func (gdClass LightmapGI) IsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[23]) }
func (gdClass LightmapGI) SetDirectional(directional bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[24], directional) }
func (gdClass LightmapGI) IsDirectional() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[25]) }

type LightmapGIData gdnative.Object

var methodLightmapGIData [8]gdnative.Method
func (gdClass LightmapGIData) SetLightTexture(light_texture TextureLayered)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[0], light_texture) }
func (gdClass LightmapGIData) GetLightTexture() TextureLayered { return gdnative.Return[TextureLayered](gdnative.Object(gdClass), methodLightmapGIData[1]) }
func (gdClass LightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[2], uses_spherical_harmonics) }
func (gdClass LightmapGIData) IsUsingSphericalHarmonics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGIData[3]) }
func (gdClass LightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index int64, sub_instance int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[4], path, uv_scale, slice_index, sub_instance) }
func (gdClass LightmapGIData) GetUserCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGIData[5]) }
func (gdClass LightmapGIData) GetUserPath(user_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodLightmapGIData[6], user_idx) }
func (gdClass LightmapGIData) ClearUsers()  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[7]) }

type LightmapProbe gdnative.Object

var methodLightmapProbe [0]gdnative.Method

type Lightmapper gdnative.Object

var methodLightmapper [0]gdnative.Method

type LightmapperRD gdnative.Object

var methodLightmapperRD [0]gdnative.Method

type Line2D gdnative.Object

var methodLine2D [32]gdnative.Method

type Line2DLineJointMode int64

const (
	Line2DLineJointSharp Line2DLineJointMode = 0
	Line2DLineJointBevel Line2DLineJointMode = 1
	Line2DLineJointRound Line2DLineJointMode = 2
)

type Line2DLineCapMode int64

const (
	Line2DLineCapNone Line2DLineCapMode = 0
	Line2DLineCapBox Line2DLineCapMode = 1
	Line2DLineCapRound Line2DLineCapMode = 2
)

type Line2DLineTextureMode int64

const (
	Line2DLineTextureNone Line2DLineTextureMode = 0
	Line2DLineTextureTile Line2DLineTextureMode = 1
	Line2DLineTextureStretch Line2DLineTextureMode = 2
)
func (gdClass Line2D) SetPoints(points []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[0], points) }
func (gdClass Line2D) GetPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodLine2D[1]) }
func (gdClass Line2D) SetPointPosition(i int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[2], i, position) }
func (gdClass Line2D) GetPointPosition(i int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLine2D[3], i) }
func (gdClass Line2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLine2D[4]) }
func (gdClass Line2D) AddPoint(position Vector2, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[5], position, at_position) }
func (gdClass Line2D) RemovePoint(i int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[6], i) }
func (gdClass Line2D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[7]) }
func (gdClass Line2D) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[8], width) }
func (gdClass Line2D) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLine2D[9]) }
func (gdClass Line2D) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[10], curve) }
func (gdClass Line2D) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodLine2D[11]) }
func (gdClass Line2D) SetDefaultColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[12], color) }
func (gdClass Line2D) GetDefaultColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLine2D[13]) }
func (gdClass Line2D) SetGradient(color Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[14], color) }
func (gdClass Line2D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodLine2D[15]) }
func (gdClass Line2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[16], texture) }
func (gdClass Line2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLine2D[17]) }
func (gdClass Line2D) SetTextureMode(mode Line2DLineTextureMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[18], mode) }
func (gdClass Line2D) GetTextureMode() Line2DLineTextureMode { return gdnative.Return[Line2DLineTextureMode](gdnative.Object(gdClass), methodLine2D[19]) }
func (gdClass Line2D) SetJointMode(mode Line2DLineJointMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[20], mode) }
func (gdClass Line2D) GetJointMode() Line2DLineJointMode { return gdnative.Return[Line2DLineJointMode](gdnative.Object(gdClass), methodLine2D[21]) }
func (gdClass Line2D) SetBeginCapMode(mode Line2DLineCapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[22], mode) }
func (gdClass Line2D) GetBeginCapMode() Line2DLineCapMode { return gdnative.Return[Line2DLineCapMode](gdnative.Object(gdClass), methodLine2D[23]) }
func (gdClass Line2D) SetEndCapMode(mode Line2DLineCapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[24], mode) }
func (gdClass Line2D) GetEndCapMode() Line2DLineCapMode { return gdnative.Return[Line2DLineCapMode](gdnative.Object(gdClass), methodLine2D[25]) }
func (gdClass Line2D) SetSharpLimit(limit float64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[26], limit) }
func (gdClass Line2D) GetSharpLimit() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLine2D[27]) }
func (gdClass Line2D) SetRoundPrecision(precision int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[28], precision) }
func (gdClass Line2D) GetRoundPrecision() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLine2D[29]) }
func (gdClass Line2D) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[30], antialiased) }
func (gdClass Line2D) GetAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLine2D[31]) }

type LineEdit gdnative.Object

var methodLineEdit [70]gdnative.Method

type LineEditMenuItems int64

const (
	LineEditMenuCut LineEditMenuItems = 0
	LineEditMenuCopy LineEditMenuItems = 1
	LineEditMenuPaste LineEditMenuItems = 2
	LineEditMenuClear LineEditMenuItems = 3
	LineEditMenuSelectAll LineEditMenuItems = 4
	LineEditMenuUndo LineEditMenuItems = 5
	LineEditMenuRedo LineEditMenuItems = 6
	LineEditMenuDirInherited LineEditMenuItems = 7
	LineEditMenuDirAuto LineEditMenuItems = 8
	LineEditMenuDirLtr LineEditMenuItems = 9
	LineEditMenuDirRtl LineEditMenuItems = 10
	LineEditMenuDisplayUcc LineEditMenuItems = 11
	LineEditMenuInsertLrm LineEditMenuItems = 12
	LineEditMenuInsertRlm LineEditMenuItems = 13
	LineEditMenuInsertLre LineEditMenuItems = 14
	LineEditMenuInsertRle LineEditMenuItems = 15
	LineEditMenuInsertLro LineEditMenuItems = 16
	LineEditMenuInsertRlo LineEditMenuItems = 17
	LineEditMenuInsertPdf LineEditMenuItems = 18
	LineEditMenuInsertAlm LineEditMenuItems = 19
	LineEditMenuInsertLri LineEditMenuItems = 20
	LineEditMenuInsertRli LineEditMenuItems = 21
	LineEditMenuInsertFsi LineEditMenuItems = 22
	LineEditMenuInsertPdi LineEditMenuItems = 23
	LineEditMenuInsertZwj LineEditMenuItems = 24
	LineEditMenuInsertZwnj LineEditMenuItems = 25
	LineEditMenuInsertWj LineEditMenuItems = 26
	LineEditMenuInsertShy LineEditMenuItems = 27
	LineEditMenuMax LineEditMenuItems = 28
)

type LineEditVirtualKeyboardType int64

const (
	LineEditKeyboardTypeDefault LineEditVirtualKeyboardType = 0
	LineEditKeyboardTypeMultiline LineEditVirtualKeyboardType = 1
	LineEditKeyboardTypeNumber LineEditVirtualKeyboardType = 2
	LineEditKeyboardTypeNumberDecimal LineEditVirtualKeyboardType = 3
	LineEditKeyboardTypePhone LineEditVirtualKeyboardType = 4
	LineEditKeyboardTypeEmailAddress LineEditVirtualKeyboardType = 5
	LineEditKeyboardTypePassword LineEditVirtualKeyboardType = 6
	LineEditKeyboardTypeUrl LineEditVirtualKeyboardType = 7
)
func (gdClass LineEdit) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[0], alignment) }
func (gdClass LineEdit) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLineEdit[1]) }
func (gdClass LineEdit) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[2]) }
func (gdClass LineEdit) Select(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[3], from, to) }
func (gdClass LineEdit) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[4]) }
func (gdClass LineEdit) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[5]) }
func (gdClass LineEdit) HasSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[6]) }
func (gdClass LineEdit) GetSelectionFromColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[7]) }
func (gdClass LineEdit) GetSelectionToColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[8]) }
func (gdClass LineEdit) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[9], text) }
func (gdClass LineEdit) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[10]) }
func (gdClass LineEdit) GetDrawControlChars() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[11]) }
func (gdClass LineEdit) SetDrawControlChars(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[12], enable) }
func (gdClass LineEdit) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[13], direction) }
func (gdClass LineEdit) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLineEdit[14]) }
func (gdClass LineEdit) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[15], language) }
func (gdClass LineEdit) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[16]) }
func (gdClass LineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[17], parser) }
func (gdClass LineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLineEdit[18]) }
func (gdClass LineEdit) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[19], args) }
func (gdClass LineEdit) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLineEdit[20]) }
func (gdClass LineEdit) SetPlaceholder(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[21], text) }
func (gdClass LineEdit) GetPlaceholder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[22]) }
func (gdClass LineEdit) SetCaretColumn(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[23], position) }
func (gdClass LineEdit) GetCaretColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[24]) }
func (gdClass LineEdit) GetScrollOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[25]) }
func (gdClass LineEdit) SetExpandToTextLengthEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[26], enabled) }
func (gdClass LineEdit) IsExpandToTextLengthEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[27]) }
func (gdClass LineEdit) SetCaretBlinkEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[28], enabled) }
func (gdClass LineEdit) IsCaretBlinkEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[29]) }
func (gdClass LineEdit) SetCaretMidGraphemeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[30], enabled) }
func (gdClass LineEdit) IsCaretMidGraphemeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[31]) }
func (gdClass LineEdit) SetCaretForceDisplayed(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[32], enabled) }
func (gdClass LineEdit) IsCaretForceDisplayed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[33]) }
func (gdClass LineEdit) SetCaretBlinkSpeed(blink_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[34], blink_speed) }
func (gdClass LineEdit) GetCaretBlinkSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLineEdit[35]) }
func (gdClass LineEdit) SetMaxLength(chars int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[36], chars) }
func (gdClass LineEdit) GetMaxLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[37]) }
func (gdClass LineEdit) InsertTextAtCaret(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[38], text) }
func (gdClass LineEdit) DeleteCharAtCaret()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[39]) }
func (gdClass LineEdit) DeleteText(from_column int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[40], from_column, to_column) }
func (gdClass LineEdit) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[41], enabled) }
func (gdClass LineEdit) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[42]) }
func (gdClass LineEdit) SetSecret(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[43], enabled) }
func (gdClass LineEdit) IsSecret() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[44]) }
func (gdClass LineEdit) SetSecretCharacter(character string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[45], character) }
func (gdClass LineEdit) GetSecretCharacter() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[46]) }
func (gdClass LineEdit) MenuOption(option int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[47], option) }
func (gdClass LineEdit) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodLineEdit[48]) }
func (gdClass LineEdit) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[49]) }
func (gdClass LineEdit) SetContextMenuEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[50], enable) }
func (gdClass LineEdit) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[51]) }
func (gdClass LineEdit) SetVirtualKeyboardEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[52], enable) }
func (gdClass LineEdit) IsVirtualKeyboardEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[53]) }
func (gdClass LineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[54], atype) }
func (gdClass LineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType { return gdnative.Return[LineEditVirtualKeyboardType](gdnative.Object(gdClass), methodLineEdit[55]) }
func (gdClass LineEdit) SetClearButtonEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[56], enable) }
func (gdClass LineEdit) IsClearButtonEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[57]) }
func (gdClass LineEdit) SetShortcutKeysEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[58], enable) }
func (gdClass LineEdit) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[59]) }
func (gdClass LineEdit) SetMiddleMousePasteEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[60], enable) }
func (gdClass LineEdit) IsMiddleMousePasteEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[61]) }
func (gdClass LineEdit) SetSelectingEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[62], enable) }
func (gdClass LineEdit) IsSelectingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[63]) }
func (gdClass LineEdit) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[64], enable) }
func (gdClass LineEdit) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[65]) }
func (gdClass LineEdit) SetRightIcon(icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[66], icon) }
func (gdClass LineEdit) GetRightIcon() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLineEdit[67]) }
func (gdClass LineEdit) SetFlat(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[68], enabled) }
func (gdClass LineEdit) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[69]) }

type LinkButton gdnative.Object

var methodLinkButton [12]gdnative.Method

type LinkButtonUnderlineMode int64

const (
	LinkButtonUnderlineModeAlways LinkButtonUnderlineMode = 0
	LinkButtonUnderlineModeOnHover LinkButtonUnderlineMode = 1
	LinkButtonUnderlineModeNever LinkButtonUnderlineMode = 2
)
func (gdClass LinkButton) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[0], text) }
func (gdClass LinkButton) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLinkButton[1]) }
func (gdClass LinkButton) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[2], direction) }
func (gdClass LinkButton) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLinkButton[3]) }
func (gdClass LinkButton) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[4], language) }
func (gdClass LinkButton) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLinkButton[5]) }
func (gdClass LinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[6], underline_mode) }
func (gdClass LinkButton) GetUnderlineMode() LinkButtonUnderlineMode { return gdnative.Return[LinkButtonUnderlineMode](gdnative.Object(gdClass), methodLinkButton[7]) }
func (gdClass LinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[8], parser) }
func (gdClass LinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLinkButton[9]) }
func (gdClass LinkButton) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[10], args) }
func (gdClass LinkButton) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLinkButton[11]) }

type MainLoop gdnative.Object

var methodMainLoop [4]gdnative.Method
func (gdClass MainLoop) InitializeImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodMainLoop[0]) }
func (gdClass MainLoop) PhysicsProcessImplementation(delta float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMainLoop[1], delta) }
func (gdClass MainLoop) ProcessImplementation(delta float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMainLoop[2], delta) }
func (gdClass MainLoop) FinalizeImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodMainLoop[3]) }

type MarginContainer gdnative.Object

var methodMarginContainer [0]gdnative.Method

type Marshalls gdnative.Object

var methodMarshalls [6]gdnative.Method
func (gdClass Marshalls) VariantToBase64(variant any, full_objects bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[0], variant, full_objects) }
func (gdClass Marshalls) Base64ToVariant(base64_str string, allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMarshalls[1], base64_str, allow_objects) }
func (gdClass Marshalls) RawToBase64(array []byte) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[2], array) }
func (gdClass Marshalls) Base64ToRaw(base64_str string) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodMarshalls[3], base64_str) }
func (gdClass Marshalls) Utf8ToBase64(utf8_str string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[4], utf8_str) }
func (gdClass Marshalls) Base64ToUtf8(base64_str string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[5], base64_str) }

type Material gdnative.Object

var methodMaterial [9]gdnative.Method
func (gdClass Material) GetShaderRidImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodMaterial[0]) }
func (gdClass Material) GetShaderModeImplementation() ShaderMode { return gdnative.Return[ShaderMode](gdnative.Object(gdClass), methodMaterial[1]) }
func (gdClass Material) CanDoNextPassImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMaterial[2]) }
func (gdClass Material) CanUseRenderPriorityImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMaterial[3]) }
func (gdClass Material) SetNextPass(next_pass Material)  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[4], next_pass) }
func (gdClass Material) GetNextPass() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMaterial[5]) }
func (gdClass Material) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[6], priority) }
func (gdClass Material) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMaterial[7]) }
func (gdClass Material) InspectNativeShaderCode()  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[8]) }

type MenuButton gdnative.Object

var methodMenuButton [6]gdnative.Method
func (gdClass MenuButton) GetPopup() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodMenuButton[0]) }
func (gdClass MenuButton) SetSwitchOnHover(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[1], enable) }
func (gdClass MenuButton) IsSwitchOnHover() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuButton[2]) }
func (gdClass MenuButton) SetDisableShortcuts(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[3], disabled) }
func (gdClass MenuButton) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[4], count) }
func (gdClass MenuButton) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMenuButton[5]) }

type Mesh gdnative.Object

var methodMesh [27]gdnative.Method

type MeshPrimitiveType int64

const (
	MeshPrimitivePoints MeshPrimitiveType = 0
	MeshPrimitiveLines MeshPrimitiveType = 1
	MeshPrimitiveLineStrip MeshPrimitiveType = 2
	MeshPrimitiveTriangles MeshPrimitiveType = 3
	MeshPrimitiveTriangleStrip MeshPrimitiveType = 4
)

type MeshArrayType int64

const (
	MeshArrayVertex MeshArrayType = 0
	MeshArrayNormal MeshArrayType = 1
	MeshArrayTangent MeshArrayType = 2
	MeshArrayColor MeshArrayType = 3
	MeshArrayTexUv MeshArrayType = 4
	MeshArrayTexUv2 MeshArrayType = 5
	MeshArrayCustom0 MeshArrayType = 6
	MeshArrayCustom1 MeshArrayType = 7
	MeshArrayCustom2 MeshArrayType = 8
	MeshArrayCustom3 MeshArrayType = 9
	MeshArrayBones MeshArrayType = 10
	MeshArrayWeights MeshArrayType = 11
	MeshArrayIndex MeshArrayType = 12
	MeshArrayMax MeshArrayType = 13
)

type MeshArrayCustomFormat int64

const (
	MeshArrayCustomRgba8Unorm MeshArrayCustomFormat = 0
	MeshArrayCustomRgba8Snorm MeshArrayCustomFormat = 1
	MeshArrayCustomRgHalf MeshArrayCustomFormat = 2
	MeshArrayCustomRgbaHalf MeshArrayCustomFormat = 3
	MeshArrayCustomRFloat MeshArrayCustomFormat = 4
	MeshArrayCustomRgFloat MeshArrayCustomFormat = 5
	MeshArrayCustomRgbFloat MeshArrayCustomFormat = 6
	MeshArrayCustomRgbaFloat MeshArrayCustomFormat = 7
	MeshArrayCustomMax MeshArrayCustomFormat = 8
)

type MeshArrayFormat int64

const (
	MeshArrayFormatVertex MeshArrayFormat = 1
	MeshArrayFormatNormal MeshArrayFormat = 2
	MeshArrayFormatTangent MeshArrayFormat = 4
	MeshArrayFormatColor MeshArrayFormat = 8
	MeshArrayFormatTexUv MeshArrayFormat = 16
	MeshArrayFormatTexUv2 MeshArrayFormat = 32
	MeshArrayFormatCustom0 MeshArrayFormat = 64
	MeshArrayFormatCustom1 MeshArrayFormat = 128
	MeshArrayFormatCustom2 MeshArrayFormat = 256
	MeshArrayFormatCustom3 MeshArrayFormat = 512
	MeshArrayFormatBones MeshArrayFormat = 1024
	MeshArrayFormatWeights MeshArrayFormat = 2048
	MeshArrayFormatIndex MeshArrayFormat = 4096
	MeshArrayFormatBlendShapeMask MeshArrayFormat = 7
	MeshArrayFormatCustomBase MeshArrayFormat = 13
	MeshArrayFormatCustomBits MeshArrayFormat = 3
	MeshArrayFormatCustom0Shift MeshArrayFormat = 13
	MeshArrayFormatCustom1Shift MeshArrayFormat = 16
	MeshArrayFormatCustom2Shift MeshArrayFormat = 19
	MeshArrayFormatCustom3Shift MeshArrayFormat = 22
	MeshArrayFormatCustomMask MeshArrayFormat = 7
	MeshArrayCompressFlagsBase MeshArrayFormat = 25
	MeshArrayFlagUse2dVertices MeshArrayFormat = 33554432
	MeshArrayFlagUseDynamicUpdate MeshArrayFormat = 67108864
	MeshArrayFlagUse8BoneWeights MeshArrayFormat = 134217728
)

type MeshBlendShapeMode int64

const (
	MeshBlendShapeModeNormalized MeshBlendShapeMode = 0
	MeshBlendShapeModeRelative MeshBlendShapeMode = 1
)
func (gdClass Mesh) GetSurfaceCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[0]) }
func (gdClass Mesh) SurfaceGetArrayLenImplementation(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[1], index) }
func (gdClass Mesh) SurfaceGetArrayIndexLenImplementation(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[2], index) }
func (gdClass Mesh) SurfaceGetArraysImplementation(index int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[3], index) }
func (gdClass Mesh) SurfaceGetBlendShapeArraysImplementation(index int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[4], index) }
func (gdClass Mesh) SurfaceGetLodsImplementation(index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodMesh[5], index) }
func (gdClass Mesh) SurfaceGetFormatImplementation(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[6], index) }
func (gdClass Mesh) SurfaceGetPrimitiveTypeImplementation(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[7], index) }
func (gdClass Mesh) SurfaceSetMaterialImplementation(index int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[8], index, material) }
func (gdClass Mesh) SurfaceGetMaterialImplementation(index int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMesh[9], index) }
func (gdClass Mesh) GetBlendShapeCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[10]) }
func (gdClass Mesh) GetBlendShapeNameImplementation(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMesh[11], index) }
func (gdClass Mesh) SetBlendShapeNameImplementation(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[12], index, name) }
func (gdClass Mesh) GetAabbImplementation() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodMesh[13]) }
func (gdClass Mesh) SetLightmapSizeHint(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[14], size) }
func (gdClass Mesh) GetLightmapSizeHint() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodMesh[15]) }
func (gdClass Mesh) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodMesh[16]) }
func (gdClass Mesh) GetSurfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[17]) }
func (gdClass Mesh) SurfaceGetArrays(surf_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[18], surf_idx) }
func (gdClass Mesh) SurfaceGetBlendShapeArrays(surf_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[19], surf_idx) }
func (gdClass Mesh) SurfaceSetMaterial(surf_idx int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[20], surf_idx, material) }
func (gdClass Mesh) SurfaceGetMaterial(surf_idx int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMesh[21], surf_idx) }
func (gdClass Mesh) CreateTrimeshShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodMesh[22]) }
func (gdClass Mesh) CreateConvexShape(clean bool, simplify bool) Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodMesh[23], clean, simplify) }
func (gdClass Mesh) CreateOutline(margin float64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMesh[24], margin) }
func (gdClass Mesh) GetFaces() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodMesh[25]) }
func (gdClass Mesh) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodMesh[26]) }

type MeshDataTool gdnative.Object

var methodMeshDataTool [38]gdnative.Method
func (gdClass MeshDataTool) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[0]) }
func (gdClass MeshDataTool) CreateFromSurface(mesh ArrayMesh, surface int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMeshDataTool[1], mesh, surface) }
func (gdClass MeshDataTool) CommitToSurface(mesh ArrayMesh) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMeshDataTool[2], mesh) }
func (gdClass MeshDataTool) GetFormat() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[3]) }
func (gdClass MeshDataTool) GetVertexCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[4]) }
func (gdClass MeshDataTool) GetEdgeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[5]) }
func (gdClass MeshDataTool) GetFaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[6]) }
func (gdClass MeshDataTool) SetVertex(idx int64, vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[7], idx, vertex) }
func (gdClass MeshDataTool) GetVertex(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[8], idx) }
func (gdClass MeshDataTool) SetVertexNormal(idx int64, normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[9], idx, normal) }
func (gdClass MeshDataTool) GetVertexNormal(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[10], idx) }
func (gdClass MeshDataTool) SetVertexTangent(idx int64, tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[11], idx, tangent) }
func (gdClass MeshDataTool) GetVertexTangent(idx int64) Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodMeshDataTool[12], idx) }
func (gdClass MeshDataTool) SetVertexUv(idx int64, uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[13], idx, uv) }
func (gdClass MeshDataTool) GetVertexUv(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshDataTool[14], idx) }
func (gdClass MeshDataTool) SetVertexUv2(idx int64, uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[15], idx, uv2) }
func (gdClass MeshDataTool) GetVertexUv2(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshDataTool[16], idx) }
func (gdClass MeshDataTool) SetVertexColor(idx int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[17], idx, color) }
func (gdClass MeshDataTool) GetVertexColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMeshDataTool[18], idx) }
func (gdClass MeshDataTool) SetVertexBones(idx int64, bones []int32)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[19], idx, bones) }
func (gdClass MeshDataTool) GetVertexBones(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[20], idx) }
func (gdClass MeshDataTool) SetVertexWeights(idx int64, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[21], idx, weights) }
func (gdClass MeshDataTool) GetVertexWeights(idx int64) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodMeshDataTool[22], idx) }
func (gdClass MeshDataTool) SetVertexMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[23], idx, meta) }
func (gdClass MeshDataTool) GetVertexMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[24], idx) }
func (gdClass MeshDataTool) GetVertexEdges(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[25], idx) }
func (gdClass MeshDataTool) GetVertexFaces(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[26], idx) }
func (gdClass MeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[27], idx, vertex) }
func (gdClass MeshDataTool) GetEdgeFaces(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[28], idx) }
func (gdClass MeshDataTool) SetEdgeMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[29], idx, meta) }
func (gdClass MeshDataTool) GetEdgeMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[30], idx) }
func (gdClass MeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[31], idx, vertex) }
func (gdClass MeshDataTool) GetFaceEdge(idx int64, edge int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[32], idx, edge) }
func (gdClass MeshDataTool) SetFaceMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[33], idx, meta) }
func (gdClass MeshDataTool) GetFaceMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[34], idx) }
func (gdClass MeshDataTool) GetFaceNormal(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[35], idx) }
func (gdClass MeshDataTool) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[36], material) }
func (gdClass MeshDataTool) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshDataTool[37]) }

type MeshInstance2D gdnative.Object

var methodMeshInstance2D [6]gdnative.Method
func (gdClass MeshInstance2D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[0], mesh) }
func (gdClass MeshInstance2D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshInstance2D[1]) }
func (gdClass MeshInstance2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[2], texture) }
func (gdClass MeshInstance2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshInstance2D[3]) }
func (gdClass MeshInstance2D) SetNormalMap(normal_map Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[4], normal_map) }
func (gdClass MeshInstance2D) GetNormalMap() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshInstance2D[5]) }

type MeshInstance3D gdnative.Object

var methodMeshInstance3D [18]gdnative.Method
func (gdClass MeshInstance3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[0], mesh) }
func (gdClass MeshInstance3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshInstance3D[1]) }
func (gdClass MeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[2], skeleton_path) }
func (gdClass MeshInstance3D) GetSkeletonPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMeshInstance3D[3]) }
func (gdClass MeshInstance3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[4], skin) }
func (gdClass MeshInstance3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodMeshInstance3D[5]) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterialCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[6]) }
func (gdClass MeshInstance3D) SetSurfaceOverrideMaterial(surface int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[7], surface, material) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterial(surface int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshInstance3D[8], surface) }
func (gdClass MeshInstance3D) GetActiveMaterial(surface int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshInstance3D[9], surface) }
func (gdClass MeshInstance3D) CreateTrimeshCollision()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[10]) }
func (gdClass MeshInstance3D) CreateConvexCollision(clean bool, simplify bool)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[11], clean, simplify) }
func (gdClass MeshInstance3D) CreateMultipleConvexCollisions()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[12]) }
func (gdClass MeshInstance3D) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[13]) }
func (gdClass MeshInstance3D) FindBlendShapeByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[14], name) }
func (gdClass MeshInstance3D) GetBlendShapeValue(blend_shape_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMeshInstance3D[15], blend_shape_idx) }
func (gdClass MeshInstance3D) SetBlendShapeValue(blend_shape_idx int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[16], blend_shape_idx, value) }
func (gdClass MeshInstance3D) CreateDebugTangents()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[17]) }

type MeshLibrary gdnative.Object

var methodMeshLibrary [20]gdnative.Method
func (gdClass MeshLibrary) CreateItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[0], id) }
func (gdClass MeshLibrary) SetItemName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[1], id, name) }
func (gdClass MeshLibrary) SetItemMesh(id int64, mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[2], id, mesh) }
func (gdClass MeshLibrary) SetItemMeshTransform(id int64, mesh_transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[3], id, mesh_transform) }
func (gdClass MeshLibrary) SetItemNavmesh(id int64, navmesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[4], id, navmesh) }
func (gdClass MeshLibrary) SetItemNavmeshTransform(id int64, navmesh Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[5], id, navmesh) }
func (gdClass MeshLibrary) SetItemShapes(id int64, shapes Array)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[6], id, shapes) }
func (gdClass MeshLibrary) SetItemPreview(id int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[7], id, texture) }
func (gdClass MeshLibrary) GetItemName(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMeshLibrary[8], id) }
func (gdClass MeshLibrary) GetItemMesh(id int64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshLibrary[9], id) }
func (gdClass MeshLibrary) GetItemMeshTransform(id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMeshLibrary[10], id) }
func (gdClass MeshLibrary) GetItemNavmesh(id int64) NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodMeshLibrary[11], id) }
func (gdClass MeshLibrary) GetItemNavmeshTransform(id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMeshLibrary[12], id) }
func (gdClass MeshLibrary) GetItemShapes(id int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMeshLibrary[13], id) }
func (gdClass MeshLibrary) GetItemPreview(id int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshLibrary[14], id) }
func (gdClass MeshLibrary) RemoveItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[15], id) }
func (gdClass MeshLibrary) FindItemByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshLibrary[16], name) }
func (gdClass MeshLibrary) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[17]) }
func (gdClass MeshLibrary) GetItemList() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshLibrary[18]) }
func (gdClass MeshLibrary) GetLastUnusedItemId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshLibrary[19]) }

type MeshTexture gdnative.Object

var methodMeshTexture [6]gdnative.Method
func (gdClass MeshTexture) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[0], mesh) }
func (gdClass MeshTexture) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshTexture[1]) }
func (gdClass MeshTexture) SetImageSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[2], size) }
func (gdClass MeshTexture) GetImageSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshTexture[3]) }
func (gdClass MeshTexture) SetBaseTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[4], texture) }
func (gdClass MeshTexture) GetBaseTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshTexture[5]) }

type MethodTweener gdnative.Object

var methodMethodTweener [3]gdnative.Method
func (gdClass MethodTweener) SetDelay(delay float64) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[0], delay) }
func (gdClass MethodTweener) SetTrans(trans TweenTransitionType) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[1], trans) }
func (gdClass MethodTweener) SetEase(ease TweenEaseType) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[2], ease) }

type MissingNode gdnative.Object

var methodMissingNode [4]gdnative.Method
func (gdClass MissingNode) SetOriginalClass(name string)  { gdnative.Call(gdnative.Object(gdClass), methodMissingNode[0], name) }
func (gdClass MissingNode) GetOriginalClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMissingNode[1]) }
func (gdClass MissingNode) SetRecordingProperties(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMissingNode[2], enable) }
func (gdClass MissingNode) IsRecordingProperties() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMissingNode[3]) }

type MissingResource gdnative.Object

var methodMissingResource [4]gdnative.Method
func (gdClass MissingResource) SetOriginalClass(name string)  { gdnative.Call(gdnative.Object(gdClass), methodMissingResource[0], name) }
func (gdClass MissingResource) GetOriginalClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMissingResource[1]) }
func (gdClass MissingResource) SetRecordingProperties(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMissingResource[2], enable) }
func (gdClass MissingResource) IsRecordingProperties() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMissingResource[3]) }

type MobileVRInterface gdnative.Object

var methodMobileVRInterface [14]gdnative.Method
func (gdClass MobileVRInterface) SetEyeHeight(eye_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[0], eye_height) }
func (gdClass MobileVRInterface) GetEyeHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[1]) }
func (gdClass MobileVRInterface) SetIod(iod float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[2], iod) }
func (gdClass MobileVRInterface) GetIod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[3]) }
func (gdClass MobileVRInterface) SetDisplayWidth(display_width float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[4], display_width) }
func (gdClass MobileVRInterface) GetDisplayWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[5]) }
func (gdClass MobileVRInterface) SetDisplayToLens(display_to_lens float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[6], display_to_lens) }
func (gdClass MobileVRInterface) GetDisplayToLens() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[7]) }
func (gdClass MobileVRInterface) SetOversample(oversample float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[8], oversample) }
func (gdClass MobileVRInterface) GetOversample() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[9]) }
func (gdClass MobileVRInterface) SetK1(k float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[10], k) }
func (gdClass MobileVRInterface) GetK1() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[11]) }
func (gdClass MobileVRInterface) SetK2(k float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[12], k) }
func (gdClass MobileVRInterface) GetK2() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[13]) }

type MovieWriter gdnative.Object

var methodMovieWriter [7]gdnative.Method
func (gdClass MovieWriter) GetAudioMixRateImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMovieWriter[0]) }
func (gdClass MovieWriter) GetAudioSpeakerModeImplementation() AudioServerSpeakerMode { return gdnative.Return[AudioServerSpeakerMode](gdnative.Object(gdClass), methodMovieWriter[1]) }
func (gdClass MovieWriter) HandlesFileImplementation(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMovieWriter[2], path) }
func (gdClass MovieWriter) WriteBeginImplementation(movie_size Vector2i, fps int64, base_path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMovieWriter[3], movie_size, fps, base_path) }
func (gdClass MovieWriter) WriteFrameImplementation(frame_image Image, audio_frame_block []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMovieWriter[4], frame_image, audio_frame_block) }
func (gdClass MovieWriter) WriteEndImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodMovieWriter[5]) }
func (gdClass MovieWriter) AddWriter(writer MovieWriter)  { gdnative.Call(gdnative.Object(gdClass), methodMovieWriter[6], writer) }

type MovieWriterMJPEG gdnative.Object

var methodMovieWriterMJPEG [0]gdnative.Method

type MovieWriterPNGWAV gdnative.Object

var methodMovieWriterPNGWAV [0]gdnative.Method

type MultiMesh gdnative.Object

var methodMultiMesh [23]gdnative.Method

type MultiMeshTransformFormat int64

const (
	MultiMeshTransform2d MultiMeshTransformFormat = 0
	MultiMeshTransform3d MultiMeshTransformFormat = 1
)
func (gdClass MultiMesh) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[0], mesh) }
func (gdClass MultiMesh) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMultiMesh[1]) }
func (gdClass MultiMesh) SetUseColors(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[2], enable) }
func (gdClass MultiMesh) IsUsingColors() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiMesh[3]) }
func (gdClass MultiMesh) SetUseCustomData(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[4], enable) }
func (gdClass MultiMesh) IsUsingCustomData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiMesh[5]) }
func (gdClass MultiMesh) SetTransformFormat(format MultiMeshTransformFormat)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[6], format) }
func (gdClass MultiMesh) GetTransformFormat() MultiMeshTransformFormat { return gdnative.Return[MultiMeshTransformFormat](gdnative.Object(gdClass), methodMultiMesh[7]) }
func (gdClass MultiMesh) SetInstanceCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[8], count) }
func (gdClass MultiMesh) GetInstanceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiMesh[9]) }
func (gdClass MultiMesh) SetVisibleInstanceCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[10], count) }
func (gdClass MultiMesh) GetVisibleInstanceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiMesh[11]) }
func (gdClass MultiMesh) SetInstanceTransform(instance int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[12], instance, transform) }
func (gdClass MultiMesh) SetInstanceTransform2d(instance int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[13], instance, transform) }
func (gdClass MultiMesh) GetInstanceTransform(instance int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMultiMesh[14], instance) }
func (gdClass MultiMesh) GetInstanceTransform2d(instance int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodMultiMesh[15], instance) }
func (gdClass MultiMesh) SetInstanceColor(instance int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[16], instance, color) }
func (gdClass MultiMesh) GetInstanceColor(instance int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMultiMesh[17], instance) }
func (gdClass MultiMesh) SetInstanceCustomData(instance int64, custom_data Color)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[18], instance, custom_data) }
func (gdClass MultiMesh) GetInstanceCustomData(instance int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMultiMesh[19], instance) }
func (gdClass MultiMesh) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodMultiMesh[20]) }
func (gdClass MultiMesh) GetBuffer() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodMultiMesh[21]) }
func (gdClass MultiMesh) SetBuffer(buffer []float32)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[22], buffer) }

type MultiMeshInstance2D gdnative.Object

var methodMultiMeshInstance2D [6]gdnative.Method
func (gdClass MultiMeshInstance2D) SetMultimesh(multimesh MultiMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[0], multimesh) }
func (gdClass MultiMeshInstance2D) GetMultimesh() MultiMesh { return gdnative.Return[MultiMesh](gdnative.Object(gdClass), methodMultiMeshInstance2D[1]) }
func (gdClass MultiMeshInstance2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[2], texture) }
func (gdClass MultiMeshInstance2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMultiMeshInstance2D[3]) }
func (gdClass MultiMeshInstance2D) SetNormalMap(normal_map Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[4], normal_map) }
func (gdClass MultiMeshInstance2D) GetNormalMap() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMultiMeshInstance2D[5]) }

type MultiMeshInstance3D gdnative.Object

var methodMultiMeshInstance3D [2]gdnative.Method
func (gdClass MultiMeshInstance3D) SetMultimesh(multimesh MultiMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance3D[0], multimesh) }
func (gdClass MultiMeshInstance3D) GetMultimesh() MultiMesh { return gdnative.Return[MultiMesh](gdnative.Object(gdClass), methodMultiMeshInstance3D[1]) }

type MultiplayerAPI gdnative.Object

var methodMultiplayerAPI [14]gdnative.Method

type MultiplayerAPIRPCMode int64

const (
	MultiplayerAPIRpcModeDisabled MultiplayerAPIRPCMode = 0
	MultiplayerAPIRpcModeAnyPeer MultiplayerAPIRPCMode = 1
	MultiplayerAPIRpcModeAuthority MultiplayerAPIRPCMode = 2
)
func (gdClass MultiplayerAPI) HasMultiplayerPeer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerAPI[0]) }
func (gdClass MultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer { return gdnative.Return[MultiplayerPeer](gdnative.Object(gdClass), methodMultiplayerAPI[1]) }
func (gdClass MultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerAPI[2], peer) }
func (gdClass MultiplayerAPI) GetUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPI[3]) }
func (gdClass MultiplayerAPI) IsServer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerAPI[4]) }
func (gdClass MultiplayerAPI) GetRemoteSenderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPI[5]) }
func (gdClass MultiplayerAPI) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[6]) }
func (gdClass MultiplayerAPI) Rpc(peer int64, object Object, method string, arguments Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[7], peer, object, method, arguments) }
func (gdClass MultiplayerAPI) ObjectConfigurationAdd(object Object, configuration any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[8], object, configuration) }
func (gdClass MultiplayerAPI) ObjectConfigurationRemove(object Object, configuration any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[9], object, configuration) }
func (gdClass MultiplayerAPI) GetPeers() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMultiplayerAPI[10]) }
func (gdClass MultiplayerAPI) SetDefaultInterface(interface_name string)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerAPI[11], interface_name) }
func (gdClass MultiplayerAPI) GetDefaultInterface() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMultiplayerAPI[12]) }
func (gdClass MultiplayerAPI) CreateDefaultInterface() MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodMultiplayerAPI[13]) }

type MultiplayerAPIExtension gdnative.Object

var methodMultiplayerAPIExtension [9]gdnative.Method
func (gdClass MultiplayerAPIExtension) PollImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[0]) }
func (gdClass MultiplayerAPIExtension) SetMultiplayerPeerImplementation(multiplayer_peer MultiplayerPeer)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerAPIExtension[1], multiplayer_peer) }
func (gdClass MultiplayerAPIExtension) GetMultiplayerPeerImplementation() MultiplayerPeer { return gdnative.Return[MultiplayerPeer](gdnative.Object(gdClass), methodMultiplayerAPIExtension[2]) }
func (gdClass MultiplayerAPIExtension) GetUniqueIdImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[3]) }
func (gdClass MultiplayerAPIExtension) GetPeerIdsImplementation() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMultiplayerAPIExtension[4]) }
func (gdClass MultiplayerAPIExtension) RpcImplementation(peer int64, object Object, method string, args Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[5], peer, object, method, args) }
func (gdClass MultiplayerAPIExtension) GetRemoteSenderIdImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[6]) }
func (gdClass MultiplayerAPIExtension) ObjectConfigurationAddImplementation(object Object, configuration any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[7], object, configuration) }
func (gdClass MultiplayerAPIExtension) ObjectConfigurationRemoveImplementation(object Object, configuration any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPIExtension[8], object, configuration) }

type MultiplayerPeer gdnative.Object

var methodMultiplayerPeer [12]gdnative.Method

type MultiplayerPeerConnectionStatus int64

const (
	MultiplayerPeerConnectionDisconnected MultiplayerPeerConnectionStatus = 0
	MultiplayerPeerConnectionConnecting MultiplayerPeerConnectionStatus = 1
	MultiplayerPeerConnectionConnected MultiplayerPeerConnectionStatus = 2
)

type MultiplayerPeerTransferMode int64

const (
	MultiplayerPeerTransferModeUnreliable MultiplayerPeerTransferMode = 0
	MultiplayerPeerTransferModeUnreliableOrdered MultiplayerPeerTransferMode = 1
	MultiplayerPeerTransferModeReliable MultiplayerPeerTransferMode = 2
)
func (gdClass MultiplayerPeer) SetTransferChannel(channel int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[0], channel) }
func (gdClass MultiplayerPeer) GetTransferChannel() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[1]) }
func (gdClass MultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[2], mode) }
func (gdClass MultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode { return gdnative.Return[MultiplayerPeerTransferMode](gdnative.Object(gdClass), methodMultiplayerPeer[3]) }
func (gdClass MultiplayerPeer) SetTargetPeer(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[4], id) }
func (gdClass MultiplayerPeer) GetPacketPeer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[5]) }
func (gdClass MultiplayerPeer) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[6]) }
func (gdClass MultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus { return gdnative.Return[MultiplayerPeerConnectionStatus](gdnative.Object(gdClass), methodMultiplayerPeer[7]) }
func (gdClass MultiplayerPeer) GetUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[8]) }
func (gdClass MultiplayerPeer) GenerateUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[9]) }
func (gdClass MultiplayerPeer) SetRefuseNewConnections(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[10], enable) }
func (gdClass MultiplayerPeer) IsRefusingNewConnections() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerPeer[11]) }

type MultiplayerPeerExtension gdnative.Object

var methodMultiplayerPeerExtension [18]gdnative.Method
func (gdClass MultiplayerPeerExtension) GetPacketImplementation(r_buffer *[]byte, r_buffer_size *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[0], r_buffer, r_buffer_size) }
func (gdClass MultiplayerPeerExtension) PutPacketImplementation(p_buffer []byte, p_buffer_size int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[1], p_buffer, p_buffer_size) }
func (gdClass MultiplayerPeerExtension) GetAvailablePacketCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[2]) }
func (gdClass MultiplayerPeerExtension) GetMaxPacketSizeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[3]) }
func (gdClass MultiplayerPeerExtension) GetPacketScriptImplementation() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodMultiplayerPeerExtension[4]) }
func (gdClass MultiplayerPeerExtension) PutPacketScriptImplementation(p_buffer []byte) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[5], p_buffer) }
func (gdClass MultiplayerPeerExtension) SetTransferChannelImplementation(p_channel int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeerExtension[6], p_channel) }
func (gdClass MultiplayerPeerExtension) GetTransferChannelImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[7]) }
func (gdClass MultiplayerPeerExtension) SetTransferModeImplementation(p_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeerExtension[8], p_mode) }
func (gdClass MultiplayerPeerExtension) GetTransferModeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[9]) }
func (gdClass MultiplayerPeerExtension) SetTargetPeerImplementation(p_peer int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeerExtension[10], p_peer) }
func (gdClass MultiplayerPeerExtension) GetPacketPeerImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[11]) }
func (gdClass MultiplayerPeerExtension) IsServerImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerPeerExtension[12]) }
func (gdClass MultiplayerPeerExtension) PollImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[13]) }
func (gdClass MultiplayerPeerExtension) GetUniqueIdImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[14]) }
func (gdClass MultiplayerPeerExtension) SetRefuseNewConnectionsImplementation(p_enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeerExtension[15], p_enable) }
func (gdClass MultiplayerPeerExtension) IsRefusingNewConnectionsImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerPeerExtension[16]) }
func (gdClass MultiplayerPeerExtension) GetConnectionStatusImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeerExtension[17]) }

type MultiplayerSpawner gdnative.Object

var methodMultiplayerSpawner [10]gdnative.Method
func (gdClass MultiplayerSpawner) SpawnCustomImplementation(data any) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodMultiplayerSpawner[0], data) }
func (gdClass MultiplayerSpawner) AddSpawnableScene(path string)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[1], path) }
func (gdClass MultiplayerSpawner) GetSpawnableSceneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerSpawner[2]) }
func (gdClass MultiplayerSpawner) GetSpawnableScene(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMultiplayerSpawner[3], index) }
func (gdClass MultiplayerSpawner) ClearSpawnableScenes()  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[4]) }
func (gdClass MultiplayerSpawner) Spawn(data any) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodMultiplayerSpawner[5], data) }
func (gdClass MultiplayerSpawner) GetSpawnPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMultiplayerSpawner[6]) }
func (gdClass MultiplayerSpawner) SetSpawnPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[7], path) }
func (gdClass MultiplayerSpawner) GetSpawnLimit() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerSpawner[8]) }
func (gdClass MultiplayerSpawner) SetSpawnLimit(limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[9], limit) }

type MultiplayerSynchronizer gdnative.Object

var methodMultiplayerSynchronizer [15]gdnative.Method

type MultiplayerSynchronizerVisibilityUpdateMode int64

const (
	MultiplayerSynchronizerVisibilityProcessIdle MultiplayerSynchronizerVisibilityUpdateMode = 0
	MultiplayerSynchronizerVisibilityProcessPhysics MultiplayerSynchronizerVisibilityUpdateMode = 1
	MultiplayerSynchronizerVisibilityProcessNone MultiplayerSynchronizerVisibilityUpdateMode = 2
)
func (gdClass MultiplayerSynchronizer) SetRootPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[0], path) }
func (gdClass MultiplayerSynchronizer) GetRootPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMultiplayerSynchronizer[1]) }
func (gdClass MultiplayerSynchronizer) SetReplicationInterval(milliseconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[2], milliseconds) }
func (gdClass MultiplayerSynchronizer) GetReplicationInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMultiplayerSynchronizer[3]) }
func (gdClass MultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[4], config) }
func (gdClass MultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig { return gdnative.Return[SceneReplicationConfig](gdnative.Object(gdClass), methodMultiplayerSynchronizer[5]) }
func (gdClass MultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[6], mode) }
func (gdClass MultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode { return gdnative.Return[MultiplayerSynchronizerVisibilityUpdateMode](gdnative.Object(gdClass), methodMultiplayerSynchronizer[7]) }
func (gdClass MultiplayerSynchronizer) UpdateVisibility(for_peer int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[8], for_peer) }
func (gdClass MultiplayerSynchronizer) SetVisibilityPublic(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[9], visible) }
func (gdClass MultiplayerSynchronizer) IsVisibilityPublic() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerSynchronizer[10]) }
func (gdClass MultiplayerSynchronizer) AddVisibilityFilter(filter Callable)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[11], filter) }
func (gdClass MultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[12], filter) }
func (gdClass MultiplayerSynchronizer) SetVisibilityFor(peer int64, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[13], peer, visible) }
func (gdClass MultiplayerSynchronizer) GetVisibilityFor(peer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerSynchronizer[14], peer) }

type Mutex gdnative.Object

var methodMutex [3]gdnative.Method
func (gdClass Mutex) Lock()  { gdnative.Call(gdnative.Object(gdClass), methodMutex[0]) }
func (gdClass Mutex) TryLock() error { return gdnative.Return[error](gdnative.Object(gdClass), methodMutex[1]) }
func (gdClass Mutex) Unlock()  { gdnative.Call(gdnative.Object(gdClass), methodMutex[2]) }

type NativeExtension gdnative.Object

var methodNativeExtension [5]gdnative.Method

type NativeExtensionInitializationLevel int64

const (
	NativeExtensionInitializationLevelCore NativeExtensionInitializationLevel = 0
	NativeExtensionInitializationLevelServers NativeExtensionInitializationLevel = 1
	NativeExtensionInitializationLevelScene NativeExtensionInitializationLevel = 2
	NativeExtensionInitializationLevelEditor NativeExtensionInitializationLevel = 3
)
func (gdClass NativeExtension) OpenLibrary(path string, entry_symbol string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNativeExtension[0], path, entry_symbol) }
func (gdClass NativeExtension) CloseLibrary()  { gdnative.Call(gdnative.Object(gdClass), methodNativeExtension[1]) }
func (gdClass NativeExtension) IsLibraryOpen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNativeExtension[2]) }
func (gdClass NativeExtension) GetMinimumLibraryInitializationLevel() NativeExtensionInitializationLevel { return gdnative.Return[NativeExtensionInitializationLevel](gdnative.Object(gdClass), methodNativeExtension[3]) }
func (gdClass NativeExtension) InitializeLibrary(level NativeExtensionInitializationLevel)  { gdnative.Call(gdnative.Object(gdClass), methodNativeExtension[4], level) }

type NativeExtensionManager gdnative.Object

var methodNativeExtensionManager [6]gdnative.Method

type NativeExtensionManagerLoadStatus int64

const (
	NativeExtensionManagerLoadStatusOk NativeExtensionManagerLoadStatus = 0
	NativeExtensionManagerLoadStatusFailed NativeExtensionManagerLoadStatus = 1
	NativeExtensionManagerLoadStatusAlreadyLoaded NativeExtensionManagerLoadStatus = 2
	NativeExtensionManagerLoadStatusNotLoaded NativeExtensionManagerLoadStatus = 3
	NativeExtensionManagerLoadStatusNeedsRestart NativeExtensionManagerLoadStatus = 4
)
func (gdClass NativeExtensionManager) LoadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[0], path) }
func (gdClass NativeExtensionManager) ReloadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[1], path) }
func (gdClass NativeExtensionManager) UnloadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[2], path) }
func (gdClass NativeExtensionManager) IsExtensionLoaded(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNativeExtensionManager[3], path) }
func (gdClass NativeExtensionManager) GetLoadedExtensions() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodNativeExtensionManager[4]) }
func (gdClass NativeExtensionManager) GetExtension(path string) NativeExtension { return gdnative.Return[NativeExtension](gdnative.Object(gdClass), methodNativeExtensionManager[5], path) }

type NavigationAgent2D gdnative.Object

var methodNavigationAgent2D [36]gdnative.Method
func (gdClass NavigationAgent2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent2D[0]) }
func (gdClass NavigationAgent2D) SetAvoidanceEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[1], enabled) }
func (gdClass NavigationAgent2D) GetAvoidanceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[2]) }
func (gdClass NavigationAgent2D) SetPathDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[3], desired_distance) }
func (gdClass NavigationAgent2D) GetPathDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[4]) }
func (gdClass NavigationAgent2D) SetTargetDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[5], desired_distance) }
func (gdClass NavigationAgent2D) GetTargetDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[6]) }
func (gdClass NavigationAgent2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[7], radius) }
func (gdClass NavigationAgent2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[8]) }
func (gdClass NavigationAgent2D) SetNeighborDist(neighbor_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[9], neighbor_dist) }
func (gdClass NavigationAgent2D) GetNeighborDist() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[10]) }
func (gdClass NavigationAgent2D) SetMaxNeighbors(max_neighbors int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[11], max_neighbors) }
func (gdClass NavigationAgent2D) GetMaxNeighbors() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[12]) }
func (gdClass NavigationAgent2D) SetTimeHorizon(time_horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[13], time_horizon) }
func (gdClass NavigationAgent2D) GetTimeHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[14]) }
func (gdClass NavigationAgent2D) SetMaxSpeed(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[15], max_speed) }
func (gdClass NavigationAgent2D) GetMaxSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[16]) }
func (gdClass NavigationAgent2D) SetPathMaxDistance(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[17], max_speed) }
func (gdClass NavigationAgent2D) GetPathMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[18]) }
func (gdClass NavigationAgent2D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[19], navigation_layers) }
func (gdClass NavigationAgent2D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[20]) }
func (gdClass NavigationAgent2D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[21], layer_number, value) }
func (gdClass NavigationAgent2D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[22], layer_number) }
func (gdClass NavigationAgent2D) SetNavigationMap(navigation_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[23], navigation_map) }
func (gdClass NavigationAgent2D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent2D[24]) }
func (gdClass NavigationAgent2D) SetTargetLocation(location Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[25], location) }
func (gdClass NavigationAgent2D) GetTargetLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[26]) }
func (gdClass NavigationAgent2D) GetNextLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[27]) }
func (gdClass NavigationAgent2D) DistanceToTarget() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[28]) }
func (gdClass NavigationAgent2D) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[29], velocity) }
func (gdClass NavigationAgent2D) GetNavPath() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[30]) }
func (gdClass NavigationAgent2D) GetNavPathIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[31]) }
func (gdClass NavigationAgent2D) IsTargetReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[32]) }
func (gdClass NavigationAgent2D) IsTargetReachable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[33]) }
func (gdClass NavigationAgent2D) IsNavigationFinished() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[34]) }
func (gdClass NavigationAgent2D) GetFinalLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[35]) }

type NavigationAgent3D gdnative.Object

var methodNavigationAgent3D [40]gdnative.Method
func (gdClass NavigationAgent3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent3D[0]) }
func (gdClass NavigationAgent3D) SetAvoidanceEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[1], enabled) }
func (gdClass NavigationAgent3D) GetAvoidanceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[2]) }
func (gdClass NavigationAgent3D) SetPathDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[3], desired_distance) }
func (gdClass NavigationAgent3D) GetPathDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[4]) }
func (gdClass NavigationAgent3D) SetTargetDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[5], desired_distance) }
func (gdClass NavigationAgent3D) GetTargetDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[6]) }
func (gdClass NavigationAgent3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[7], radius) }
func (gdClass NavigationAgent3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[8]) }
func (gdClass NavigationAgent3D) SetAgentHeightOffset(agent_height_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[9], agent_height_offset) }
func (gdClass NavigationAgent3D) GetAgentHeightOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[10]) }
func (gdClass NavigationAgent3D) SetIgnoreY(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[11], ignore) }
func (gdClass NavigationAgent3D) GetIgnoreY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[12]) }
func (gdClass NavigationAgent3D) SetNeighborDist(neighbor_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[13], neighbor_dist) }
func (gdClass NavigationAgent3D) GetNeighborDist() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[14]) }
func (gdClass NavigationAgent3D) SetMaxNeighbors(max_neighbors int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[15], max_neighbors) }
func (gdClass NavigationAgent3D) GetMaxNeighbors() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[16]) }
func (gdClass NavigationAgent3D) SetTimeHorizon(time_horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[17], time_horizon) }
func (gdClass NavigationAgent3D) GetTimeHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[18]) }
func (gdClass NavigationAgent3D) SetMaxSpeed(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[19], max_speed) }
func (gdClass NavigationAgent3D) GetMaxSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[20]) }
func (gdClass NavigationAgent3D) SetPathMaxDistance(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[21], max_speed) }
func (gdClass NavigationAgent3D) GetPathMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[22]) }
func (gdClass NavigationAgent3D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[23], navigation_layers) }
func (gdClass NavigationAgent3D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[24]) }
func (gdClass NavigationAgent3D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[25], layer_number, value) }
func (gdClass NavigationAgent3D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[26], layer_number) }
func (gdClass NavigationAgent3D) SetNavigationMap(navigation_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[27], navigation_map) }
func (gdClass NavigationAgent3D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent3D[28]) }
func (gdClass NavigationAgent3D) SetTargetLocation(location Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[29], location) }
func (gdClass NavigationAgent3D) GetTargetLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[30]) }
func (gdClass NavigationAgent3D) GetNextLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[31]) }
func (gdClass NavigationAgent3D) DistanceToTarget() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[32]) }
func (gdClass NavigationAgent3D) SetVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[33], velocity) }
func (gdClass NavigationAgent3D) GetNavPath() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[34]) }
func (gdClass NavigationAgent3D) GetNavPathIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[35]) }
func (gdClass NavigationAgent3D) IsTargetReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[36]) }
func (gdClass NavigationAgent3D) IsTargetReachable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[37]) }
func (gdClass NavigationAgent3D) IsNavigationFinished() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[38]) }
func (gdClass NavigationAgent3D) GetFinalLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[39]) }

type NavigationMesh gdnative.Object

var methodNavigationMesh [55]gdnative.Method

type NavigationMeshSamplePartitionType int64

const (
	NavigationMeshSamplePartitionWatershed NavigationMeshSamplePartitionType = 0
	NavigationMeshSamplePartitionMonotone NavigationMeshSamplePartitionType = 1
	NavigationMeshSamplePartitionLayers NavigationMeshSamplePartitionType = 2
	NavigationMeshSamplePartitionMax NavigationMeshSamplePartitionType = 3
)

type NavigationMeshParsedGeometryType int64

const (
	NavigationMeshParsedGeometryMeshInstances NavigationMeshParsedGeometryType = 0
	NavigationMeshParsedGeometryStaticColliders NavigationMeshParsedGeometryType = 1
	NavigationMeshParsedGeometryBoth NavigationMeshParsedGeometryType = 2
	NavigationMeshParsedGeometryMax NavigationMeshParsedGeometryType = 3
)

type NavigationMeshSourceGeometryMode int64

const (
	NavigationMeshSourceGeometryNavmeshChildren NavigationMeshSourceGeometryMode = 0
	NavigationMeshSourceGeometryGroupsWithChildren NavigationMeshSourceGeometryMode = 1
	NavigationMeshSourceGeometryGroupsExplicit NavigationMeshSourceGeometryMode = 2
	NavigationMeshSourceGeometryMax NavigationMeshSourceGeometryMode = 3
)
func (gdClass NavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[0], sample_partition_type) }
func (gdClass NavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType { return gdnative.Return[NavigationMeshSamplePartitionType](gdnative.Object(gdClass), methodNavigationMesh[1]) }
func (gdClass NavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[2], geometry_type) }
func (gdClass NavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType { return gdnative.Return[NavigationMeshParsedGeometryType](gdnative.Object(gdClass), methodNavigationMesh[3]) }
func (gdClass NavigationMesh) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[4], mask) }
func (gdClass NavigationMesh) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationMesh[5]) }
func (gdClass NavigationMesh) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[6], layer_number, value) }
func (gdClass NavigationMesh) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[7], layer_number) }
func (gdClass NavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[8], mask) }
func (gdClass NavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode { return gdnative.Return[NavigationMeshSourceGeometryMode](gdnative.Object(gdClass), methodNavigationMesh[9]) }
func (gdClass NavigationMesh) SetSourceGroupName(mask string)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[10], mask) }
func (gdClass NavigationMesh) GetSourceGroupName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNavigationMesh[11]) }
func (gdClass NavigationMesh) SetCellSize(cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[12], cell_size) }
func (gdClass NavigationMesh) GetCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[13]) }
func (gdClass NavigationMesh) SetCellHeight(cell_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[14], cell_height) }
func (gdClass NavigationMesh) GetCellHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[15]) }
func (gdClass NavigationMesh) SetAgentHeight(agent_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[16], agent_height) }
func (gdClass NavigationMesh) GetAgentHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[17]) }
func (gdClass NavigationMesh) SetAgentRadius(agent_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[18], agent_radius) }
func (gdClass NavigationMesh) GetAgentRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[19]) }
func (gdClass NavigationMesh) SetAgentMaxClimb(agent_max_climb float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[20], agent_max_climb) }
func (gdClass NavigationMesh) GetAgentMaxClimb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[21]) }
func (gdClass NavigationMesh) SetAgentMaxSlope(agent_max_slope float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[22], agent_max_slope) }
func (gdClass NavigationMesh) GetAgentMaxSlope() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[23]) }
func (gdClass NavigationMesh) SetRegionMinSize(region_min_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[24], region_min_size) }
func (gdClass NavigationMesh) GetRegionMinSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[25]) }
func (gdClass NavigationMesh) SetRegionMergeSize(region_merge_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[26], region_merge_size) }
func (gdClass NavigationMesh) GetRegionMergeSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[27]) }
func (gdClass NavigationMesh) SetEdgeMaxLength(edge_max_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[28], edge_max_length) }
func (gdClass NavigationMesh) GetEdgeMaxLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[29]) }
func (gdClass NavigationMesh) SetEdgeMaxError(edge_max_error float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[30], edge_max_error) }
func (gdClass NavigationMesh) GetEdgeMaxError() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[31]) }
func (gdClass NavigationMesh) SetVertsPerPoly(verts_per_poly float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[32], verts_per_poly) }
func (gdClass NavigationMesh) GetVertsPerPoly() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[33]) }
func (gdClass NavigationMesh) SetDetailSampleDistance(detail_sample_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[34], detail_sample_dist) }
func (gdClass NavigationMesh) GetDetailSampleDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[35]) }
func (gdClass NavigationMesh) SetDetailSampleMaxError(detail_sample_max_error float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[36], detail_sample_max_error) }
func (gdClass NavigationMesh) GetDetailSampleMaxError() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[37]) }
func (gdClass NavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[38], filter_low_hanging_obstacles) }
func (gdClass NavigationMesh) GetFilterLowHangingObstacles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[39]) }
func (gdClass NavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[40], filter_ledge_spans) }
func (gdClass NavigationMesh) GetFilterLedgeSpans() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[41]) }
func (gdClass NavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[42], filter_walkable_low_height_spans) }
func (gdClass NavigationMesh) GetFilterWalkableLowHeightSpans() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[43]) }
func (gdClass NavigationMesh) SetFilterBakingAabb(baking_aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[44], baking_aabb) }
func (gdClass NavigationMesh) GetFilterBakingAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodNavigationMesh[45]) }
func (gdClass NavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[46], baking_aabb_offset) }
func (gdClass NavigationMesh) GetFilterBakingAabbOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationMesh[47]) }
func (gdClass NavigationMesh) SetVertices(vertices []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[48], vertices) }
func (gdClass NavigationMesh) GetVertices() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationMesh[49]) }
func (gdClass NavigationMesh) AddPolygon(polygon []int32)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[50], polygon) }
func (gdClass NavigationMesh) GetPolygonCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationMesh[51]) }
func (gdClass NavigationMesh) GetPolygon(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodNavigationMesh[52], idx) }
func (gdClass NavigationMesh) ClearPolygons()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[53]) }
func (gdClass NavigationMesh) CreateFromMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[54], mesh) }

type NavigationMeshGenerator gdnative.Object

var methodNavigationMeshGenerator [2]gdnative.Method
func (gdClass NavigationMeshGenerator) Bake(nav_mesh NavigationMesh, root_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMeshGenerator[0], nav_mesh, root_node) }
func (gdClass NavigationMeshGenerator) Clear(nav_mesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMeshGenerator[1], nav_mesh) }

type NavigationObstacle2D gdnative.Object

var methodNavigationObstacle2D [5]gdnative.Method
func (gdClass NavigationObstacle2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationObstacle2D[0]) }
func (gdClass NavigationObstacle2D) SetEstimateRadius(estimate_radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle2D[1], estimate_radius) }
func (gdClass NavigationObstacle2D) IsRadiusEstimated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationObstacle2D[2]) }
func (gdClass NavigationObstacle2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle2D[3], radius) }
func (gdClass NavigationObstacle2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationObstacle2D[4]) }

type NavigationObstacle3D gdnative.Object

var methodNavigationObstacle3D [5]gdnative.Method
func (gdClass NavigationObstacle3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationObstacle3D[0]) }
func (gdClass NavigationObstacle3D) SetEstimateRadius(estimate_radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle3D[1], estimate_radius) }
func (gdClass NavigationObstacle3D) IsRadiusEstimated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationObstacle3D[2]) }
func (gdClass NavigationObstacle3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle3D[3], radius) }
func (gdClass NavigationObstacle3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationObstacle3D[4]) }

type NavigationPolygon gdnative.Object

var methodNavigationPolygon [15]gdnative.Method
func (gdClass NavigationPolygon) SetVertices(vertices []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[0], vertices) }
func (gdClass NavigationPolygon) GetVertices() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationPolygon[1]) }
func (gdClass NavigationPolygon) AddPolygon(polygon []int32)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[2], polygon) }
func (gdClass NavigationPolygon) GetPolygonCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationPolygon[3]) }
func (gdClass NavigationPolygon) GetPolygon(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodNavigationPolygon[4], idx) }
func (gdClass NavigationPolygon) ClearPolygons()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[5]) }
func (gdClass NavigationPolygon) GetMesh() NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodNavigationPolygon[6]) }
func (gdClass NavigationPolygon) AddOutline(outline []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[7], outline) }
func (gdClass NavigationPolygon) AddOutlineAtIndex(outline []Vector2, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[8], outline, index) }
func (gdClass NavigationPolygon) GetOutlineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationPolygon[9]) }
func (gdClass NavigationPolygon) SetOutline(idx int64, outline []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[10], idx, outline) }
func (gdClass NavigationPolygon) GetOutline(idx int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationPolygon[11], idx) }
func (gdClass NavigationPolygon) RemoveOutline(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[12], idx) }
func (gdClass NavigationPolygon) ClearOutlines()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[13]) }
func (gdClass NavigationPolygon) MakePolygonsFromOutlines()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[14]) }

type NavigationRegion2D gdnative.Object

var methodNavigationRegion2D [13]gdnative.Method
func (gdClass NavigationRegion2D) SetNavigationPolygon(navpoly NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[0], navpoly) }
func (gdClass NavigationRegion2D) GetNavigationPolygon() NavigationPolygon { return gdnative.Return[NavigationPolygon](gdnative.Object(gdClass), methodNavigationRegion2D[1]) }
func (gdClass NavigationRegion2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[2], enabled) }
func (gdClass NavigationRegion2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion2D[3]) }
func (gdClass NavigationRegion2D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[4], navigation_layers) }
func (gdClass NavigationRegion2D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationRegion2D[5]) }
func (gdClass NavigationRegion2D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[6], layer_number, value) }
func (gdClass NavigationRegion2D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion2D[7], layer_number) }
func (gdClass NavigationRegion2D) GetRegionRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationRegion2D[8]) }
func (gdClass NavigationRegion2D) SetEnterCost(enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[9], enter_cost) }
func (gdClass NavigationRegion2D) GetEnterCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion2D[10]) }
func (gdClass NavigationRegion2D) SetTravelCost(travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[11], travel_cost) }
func (gdClass NavigationRegion2D) GetTravelCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion2D[12]) }

type NavigationRegion3D gdnative.Object

var methodNavigationRegion3D [14]gdnative.Method
func (gdClass NavigationRegion3D) SetNavigationMesh(navmesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[0], navmesh) }
func (gdClass NavigationRegion3D) GetNavigationMesh() NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodNavigationRegion3D[1]) }
func (gdClass NavigationRegion3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[2], enabled) }
func (gdClass NavigationRegion3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion3D[3]) }
func (gdClass NavigationRegion3D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[4], navigation_layers) }
func (gdClass NavigationRegion3D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationRegion3D[5]) }
func (gdClass NavigationRegion3D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[6], layer_number, value) }
func (gdClass NavigationRegion3D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion3D[7], layer_number) }
func (gdClass NavigationRegion3D) GetRegionRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationRegion3D[8]) }
func (gdClass NavigationRegion3D) SetEnterCost(enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[9], enter_cost) }
func (gdClass NavigationRegion3D) GetEnterCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion3D[10]) }
func (gdClass NavigationRegion3D) SetTravelCost(travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[11], travel_cost) }
func (gdClass NavigationRegion3D) GetTravelCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion3D[12]) }
func (gdClass NavigationRegion3D) BakeNavigationMesh(on_thread bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[13], on_thread) }

type NavigationServer2D gdnative.Object

var methodNavigationServer2D [43]gdnative.Method
func (gdClass NavigationServer2D) GetMaps() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[0]) }
func (gdClass NavigationServer2D) MapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[1]) }
func (gdClass NavigationServer2D) MapSetActive(mapping RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[2], mapping, active) }
func (gdClass NavigationServer2D) MapIsActive(nap RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[3], nap) }
func (gdClass NavigationServer2D) MapSetCellSize(mapping RID, cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[4], mapping, cell_size) }
func (gdClass NavigationServer2D) MapGetCellSize(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[5], mapping) }
func (gdClass NavigationServer2D) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[6], mapping, margin) }
func (gdClass NavigationServer2D) MapGetEdgeConnectionMargin(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[7], mapping) }
func (gdClass NavigationServer2D) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationServer2D[8], mapping, origin, destination, optimize, navigation_layers) }
func (gdClass NavigationServer2D) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[9], mapping, to_point) }
func (gdClass NavigationServer2D) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[10], mapping, to_point) }
func (gdClass NavigationServer2D) MapGetRegions(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[11], mapping) }
func (gdClass NavigationServer2D) MapGetAgents(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[12], mapping) }
func (gdClass NavigationServer2D) MapForceUpdate(mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[13], mapping) }
func (gdClass NavigationServer2D) RegionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[14]) }
func (gdClass NavigationServer2D) RegionSetEnterCost(region RID, enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[15], region, enter_cost) }
func (gdClass NavigationServer2D) RegionGetEnterCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[16], region) }
func (gdClass NavigationServer2D) RegionSetTravelCost(region RID, travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[17], region, travel_cost) }
func (gdClass NavigationServer2D) RegionGetTravelCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[18], region) }
func (gdClass NavigationServer2D) RegionOwnsPoint(region RID, point Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[19], region, point) }
func (gdClass NavigationServer2D) RegionSetMap(region RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[20], region, mapping) }
func (gdClass NavigationServer2D) RegionGetMap(region RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[21], region) }
func (gdClass NavigationServer2D) RegionSetNavigationLayers(region RID, navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[22], region, navigation_layers) }
func (gdClass NavigationServer2D) RegionGetNavigationLayers(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer2D[23], region) }
func (gdClass NavigationServer2D) RegionSetTransform(region RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[24], region, transform) }
func (gdClass NavigationServer2D) RegionSetNavpoly(region RID, nav_poly NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[25], region, nav_poly) }
func (gdClass NavigationServer2D) RegionGetConnectionsCount(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer2D[26], region) }
func (gdClass NavigationServer2D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[27], region, connection) }
func (gdClass NavigationServer2D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[28], region, connection) }
func (gdClass NavigationServer2D) AgentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[29]) }
func (gdClass NavigationServer2D) AgentSetMap(agent RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[30], agent, mapping) }
func (gdClass NavigationServer2D) AgentGetMap(agent RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[31], agent) }
func (gdClass NavigationServer2D) AgentSetNeighborDist(agent RID, dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[32], agent, dist) }
func (gdClass NavigationServer2D) AgentSetMaxNeighbors(agent RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[33], agent, count) }
func (gdClass NavigationServer2D) AgentSetTimeHorizon(agent RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[34], agent, time) }
func (gdClass NavigationServer2D) AgentSetRadius(agent RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[35], agent, radius) }
func (gdClass NavigationServer2D) AgentSetMaxSpeed(agent RID, max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[36], agent, max_speed) }
func (gdClass NavigationServer2D) AgentSetVelocity(agent RID, velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[37], agent, velocity) }
func (gdClass NavigationServer2D) AgentSetTargetVelocity(agent RID, target_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[38], agent, target_velocity) }
func (gdClass NavigationServer2D) AgentSetPosition(agent RID, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[39], agent, position) }
func (gdClass NavigationServer2D) AgentIsMapChanged(agent RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[40], agent) }
func (gdClass NavigationServer2D) AgentSetCallback(agent RID, receiver Object, method string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[41], agent, receiver, method, userdata) }
func (gdClass NavigationServer2D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[42], rid) }

type NavigationServer3D gdnative.Object

var methodNavigationServer3D [50]gdnative.Method
func (gdClass NavigationServer3D) GetMaps() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[0]) }
func (gdClass NavigationServer3D) MapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[1]) }
func (gdClass NavigationServer3D) MapSetActive(mapping RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[2], mapping, active) }
func (gdClass NavigationServer3D) MapIsActive(nap RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[3], nap) }
func (gdClass NavigationServer3D) MapSetUp(mapping RID, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[4], mapping, up) }
func (gdClass NavigationServer3D) MapGetUp(mapping RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[5], mapping) }
func (gdClass NavigationServer3D) MapSetCellSize(mapping RID, cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[6], mapping, cell_size) }
func (gdClass NavigationServer3D) MapGetCellSize(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[7], mapping) }
func (gdClass NavigationServer3D) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[8], mapping, margin) }
func (gdClass NavigationServer3D) MapGetEdgeConnectionMargin(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[9], mapping) }
func (gdClass NavigationServer3D) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers int64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationServer3D[10], mapping, origin, destination, optimize, navigation_layers) }
func (gdClass NavigationServer3D) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[11], mapping, start, end, use_collision) }
func (gdClass NavigationServer3D) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[12], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[13], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[14], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetRegions(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[15], mapping) }
func (gdClass NavigationServer3D) MapGetAgents(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[16], mapping) }
func (gdClass NavigationServer3D) MapForceUpdate(mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[17], mapping) }
func (gdClass NavigationServer3D) RegionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[18]) }
func (gdClass NavigationServer3D) RegionSetEnterCost(region RID, enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[19], region, enter_cost) }
func (gdClass NavigationServer3D) RegionGetEnterCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[20], region) }
func (gdClass NavigationServer3D) RegionSetTravelCost(region RID, travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[21], region, travel_cost) }
func (gdClass NavigationServer3D) RegionGetTravelCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[22], region) }
func (gdClass NavigationServer3D) RegionOwnsPoint(region RID, point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[23], region, point) }
func (gdClass NavigationServer3D) RegionSetMap(region RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[24], region, mapping) }
func (gdClass NavigationServer3D) RegionGetMap(region RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[25], region) }
func (gdClass NavigationServer3D) RegionSetNavigationLayers(region RID, navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[26], region, navigation_layers) }
func (gdClass NavigationServer3D) RegionGetNavigationLayers(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer3D[27], region) }
func (gdClass NavigationServer3D) RegionSetTransform(region RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[28], region, transform) }
func (gdClass NavigationServer3D) RegionSetNavmesh(region RID, nav_mesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[29], region, nav_mesh) }
func (gdClass NavigationServer3D) RegionBakeNavmesh(mesh NavigationMesh, node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[30], mesh, node) }
func (gdClass NavigationServer3D) RegionGetConnectionsCount(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer3D[31], region) }
func (gdClass NavigationServer3D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[32], region, connection) }
func (gdClass NavigationServer3D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[33], region, connection) }
func (gdClass NavigationServer3D) AgentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[34]) }
func (gdClass NavigationServer3D) AgentSetMap(agent RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[35], agent, mapping) }
func (gdClass NavigationServer3D) AgentGetMap(agent RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[36], agent) }
func (gdClass NavigationServer3D) AgentSetNeighborDist(agent RID, dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[37], agent, dist) }
func (gdClass NavigationServer3D) AgentSetMaxNeighbors(agent RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[38], agent, count) }
func (gdClass NavigationServer3D) AgentSetTimeHorizon(agent RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[39], agent, time) }
func (gdClass NavigationServer3D) AgentSetRadius(agent RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[40], agent, radius) }
func (gdClass NavigationServer3D) AgentSetMaxSpeed(agent RID, max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[41], agent, max_speed) }
func (gdClass NavigationServer3D) AgentSetVelocity(agent RID, velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[42], agent, velocity) }
func (gdClass NavigationServer3D) AgentSetTargetVelocity(agent RID, target_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[43], agent, target_velocity) }
func (gdClass NavigationServer3D) AgentSetPosition(agent RID, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[44], agent, position) }
func (gdClass NavigationServer3D) AgentIsMapChanged(agent RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[45], agent) }
func (gdClass NavigationServer3D) AgentSetCallback(agent RID, receiver Object, method string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[46], agent, receiver, method, userdata) }
func (gdClass NavigationServer3D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[47], rid) }
func (gdClass NavigationServer3D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[48], active) }
func (gdClass NavigationServer3D) Process(delta_time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[49], delta_time) }

type NinePatchRect gdnative.Object

var methodNinePatchRect [12]gdnative.Method

type NinePatchRectAxisStretchMode int64

const (
	NinePatchRectAxisStretchModeStretch NinePatchRectAxisStretchMode = 0
	NinePatchRectAxisStretchModeTile NinePatchRectAxisStretchMode = 1
	NinePatchRectAxisStretchModeTileFit NinePatchRectAxisStretchMode = 2
)
func (gdClass NinePatchRect) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[0], texture) }
func (gdClass NinePatchRect) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodNinePatchRect[1]) }
func (gdClass NinePatchRect) SetPatchMargin(margin Side, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[2], margin, value) }
func (gdClass NinePatchRect) GetPatchMargin(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNinePatchRect[3], margin) }
func (gdClass NinePatchRect) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[4], rect) }
func (gdClass NinePatchRect) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodNinePatchRect[5]) }
func (gdClass NinePatchRect) SetDrawCenter(draw_center bool)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[6], draw_center) }
func (gdClass NinePatchRect) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNinePatchRect[7]) }
func (gdClass NinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[8], mode) }
func (gdClass NinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode { return gdnative.Return[NinePatchRectAxisStretchMode](gdnative.Object(gdClass), methodNinePatchRect[9]) }
func (gdClass NinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[10], mode) }
func (gdClass NinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode { return gdnative.Return[NinePatchRectAxisStretchMode](gdnative.Object(gdClass), methodNinePatchRect[11]) }

type Node gdnative.Object

var methodNode [97]gdnative.Method

type NodeProcessMode int64

const (
	NodeProcessModeInherit NodeProcessMode = 0
	NodeProcessModePausable NodeProcessMode = 1
	NodeProcessModeWhenPaused NodeProcessMode = 2
	NodeProcessModeAlways NodeProcessMode = 3
	NodeProcessModeDisabled NodeProcessMode = 4
)

type NodeDuplicateFlags int64

const (
	NodeDuplicateSignals NodeDuplicateFlags = 1
	NodeDuplicateGroups NodeDuplicateFlags = 2
	NodeDuplicateScripts NodeDuplicateFlags = 4
	NodeDuplicateUseInstancing NodeDuplicateFlags = 8
)

type NodeInternalMode int64

const (
	NodeInternalModeDisabled NodeInternalMode = 0
	NodeInternalModeFront NodeInternalMode = 1
	NodeInternalModeBack NodeInternalMode = 2
)
func (gdClass Node) ProcessImplementation(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[0], delta) }
func (gdClass Node) PhysicsProcessImplementation(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[1], delta) }
func (gdClass Node) EnterTreeImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodNode[2]) }
func (gdClass Node) ExitTreeImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodNode[3]) }
func (gdClass Node) ReadyImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodNode[4]) }
func (gdClass Node) GetConfigurationWarningsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodNode[5]) }
func (gdClass Node) InputImplementation(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodNode[6], event) }
func (gdClass Node) ShortcutInputImplementation(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodNode[7], event) }
func (gdClass Node) UnhandledInputImplementation(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodNode[8], event) }
func (gdClass Node) UnhandledKeyInputImplementation(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodNode[9], event) }
func (gdClass Node) AddSibling(sibling Node, legible_unique_name bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[10], sibling, legible_unique_name) }
func (gdClass Node) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[11], name) }
func (gdClass Node) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[12]) }
func (gdClass Node) AddChild(node Node, legible_unique_name bool, internal NodeInternalMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode[13], node, legible_unique_name, internal) }
func (gdClass Node) RemoveChild(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNode[14], node) }
func (gdClass Node) GetChildCount(include_internal bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[15], include_internal) }
func (gdClass Node) GetChildren(include_internal bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[16], include_internal) }
func (gdClass Node) GetChild(idx int64, include_internal bool) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[17], idx, include_internal) }
func (gdClass Node) HasNode(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[18], path) }
func (gdClass Node) GetNode(path NodePath) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[19], path) }
func (gdClass Node) GetNodeOrNull(path NodePath) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[20], path) }
func (gdClass Node) GetParent() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[21]) }
func (gdClass Node) FindChild(pattern string, recursive bool, owned bool) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[22], pattern, recursive, owned) }
func (gdClass Node) FindChildren(pattern string, atype string, recursive bool, owned bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[23], pattern, atype, recursive, owned) }
func (gdClass Node) FindParent(pattern string) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[24], pattern) }
func (gdClass Node) HasNodeAndResource(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[25], path) }
func (gdClass Node) GetNodeAndResource(path NodePath) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[26], path) }
func (gdClass Node) IsInsideTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[27]) }
func (gdClass Node) IsAncestorOf(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[28], node) }
func (gdClass Node) IsGreaterThan(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[29], node) }
func (gdClass Node) GetPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode[30]) }
func (gdClass Node) GetPathTo(node Node) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode[31], node) }
func (gdClass Node) AddToGroup(group string, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[32], group, persistent) }
func (gdClass Node) RemoveFromGroup(group string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[33], group) }
func (gdClass Node) IsInGroup(group string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[34], group) }
func (gdClass Node) MoveChild(child_node Node, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[35], child_node, to_position) }
func (gdClass Node) GetGroups() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[36]) }
func (gdClass Node) Raise()  { gdnative.Call(gdnative.Object(gdClass), methodNode[37]) }
func (gdClass Node) SetOwner(owner Node)  { gdnative.Call(gdnative.Object(gdClass), methodNode[38], owner) }
func (gdClass Node) GetOwner() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[39]) }
func (gdClass Node) RemoveAndSkip()  { gdnative.Call(gdnative.Object(gdClass), methodNode[40]) }
func (gdClass Node) GetIndex(include_internal bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[41], include_internal) }
func (gdClass Node) PrintTree()  { gdnative.Call(gdnative.Object(gdClass), methodNode[42]) }
func (gdClass Node) PrintTreePretty()  { gdnative.Call(gdnative.Object(gdClass), methodNode[43]) }
func (gdClass Node) SetSceneFilePath(scene_file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[44], scene_file_path) }
func (gdClass Node) GetSceneFilePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[45]) }
func (gdClass Node) PropagateNotification(what int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[46], what) }
func (gdClass Node) PropagateCall(method string, args Array, parent_first bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[47], method, args, parent_first) }
func (gdClass Node) SetPhysicsProcess(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[48], enable) }
func (gdClass Node) GetPhysicsProcessDeltaTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode[49]) }
func (gdClass Node) IsPhysicsProcessing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[50]) }
func (gdClass Node) GetProcessDeltaTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode[51]) }
func (gdClass Node) SetProcess(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[52], enable) }
func (gdClass Node) SetProcessPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[53], priority) }
func (gdClass Node) GetProcessPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[54]) }
func (gdClass Node) IsProcessing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[55]) }
func (gdClass Node) SetProcessInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[56], enable) }
func (gdClass Node) IsProcessingInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[57]) }
func (gdClass Node) SetProcessShortcutInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[58], enable) }
func (gdClass Node) IsProcessingShortcutInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[59]) }
func (gdClass Node) SetProcessUnhandledInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[60], enable) }
func (gdClass Node) IsProcessingUnhandledInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[61]) }
func (gdClass Node) SetProcessUnhandledKeyInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[62], enable) }
func (gdClass Node) IsProcessingUnhandledKeyInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[63]) }
func (gdClass Node) SetProcessMode(mode NodeProcessMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode[64], mode) }
func (gdClass Node) GetProcessMode() NodeProcessMode { return gdnative.Return[NodeProcessMode](gdnative.Object(gdClass), methodNode[65]) }
func (gdClass Node) CanProcess() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[66]) }
func (gdClass Node) PrintOrphanNodes()  { gdnative.Call(gdnative.Object(gdClass), methodNode[67]) }
func (gdClass Node) SetDisplayFolded(fold bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[68], fold) }
func (gdClass Node) IsDisplayedFolded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[69]) }
func (gdClass Node) SetProcessInternal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[70], enable) }
func (gdClass Node) IsProcessingInternal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[71]) }
func (gdClass Node) SetPhysicsProcessInternal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[72], enable) }
func (gdClass Node) IsPhysicsProcessingInternal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[73]) }
func (gdClass Node) GetTree() SceneTree { return gdnative.Return[SceneTree](gdnative.Object(gdClass), methodNode[74]) }
func (gdClass Node) CreateTween() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodNode[75]) }
func (gdClass Node) Duplicate(flags int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[76], flags) }
func (gdClass Node) ReplaceBy(node Node, keep_groups bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[77], node, keep_groups) }
func (gdClass Node) SetSceneInstanceLoadPlaceholder(load_placeholder bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[78], load_placeholder) }
func (gdClass Node) GetSceneInstanceLoadPlaceholder() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[79]) }
func (gdClass Node) SetEditableInstance(node Node, is_editable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[80], node, is_editable) }
func (gdClass Node) IsEditableInstance(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[81], node) }
func (gdClass Node) GetViewport() Viewport { return gdnative.Return[Viewport](gdnative.Object(gdClass), methodNode[82]) }
func (gdClass Node) QueueFree()  { gdnative.Call(gdnative.Object(gdClass), methodNode[83]) }
func (gdClass Node) RequestReady()  { gdnative.Call(gdnative.Object(gdClass), methodNode[84]) }
func (gdClass Node) SetMultiplayerAuthority(id int64, recursive bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[85], id, recursive) }
func (gdClass Node) GetMultiplayerAuthority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[86]) }
func (gdClass Node) IsMultiplayerAuthority() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[87]) }
func (gdClass Node) GetMultiplayer() MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodNode[88]) }
func (gdClass Node) RpcConfig(method string, config any)  { gdnative.Call(gdnative.Object(gdClass), methodNode[89], method, config) }
func (gdClass Node) SetEditorDescription(editor_description string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[90], editor_description) }
func (gdClass Node) GetEditorDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[91]) }
func (gdClass Node) SetUniqueNameInOwner(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[92], enable) }
func (gdClass Node) IsUniqueNameInOwner() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[93]) }
func (gdClass Node) Rpc(method string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNode[94], method) }
func (gdClass Node) RpcId(peer_id int64, method string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNode[95], peer_id, method) }
func (gdClass Node) UpdateConfigurationWarnings()  { gdnative.Call(gdnative.Object(gdClass), methodNode[96]) }

type Node2D gdnative.Object

var methodNode2D [35]gdnative.Method
func (gdClass Node2D) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[0], position) }
func (gdClass Node2D) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[1], radians) }
func (gdClass Node2D) SetSkew(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[2], radians) }
func (gdClass Node2D) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[3], scale) }
func (gdClass Node2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[4]) }
func (gdClass Node2D) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[5]) }
func (gdClass Node2D) GetSkew() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[6]) }
func (gdClass Node2D) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[7]) }
func (gdClass Node2D) Rotate(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[8], radians) }
func (gdClass Node2D) MoveLocalX(delta float64, scaled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[9], delta, scaled) }
func (gdClass Node2D) MoveLocalY(delta float64, scaled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[10], delta, scaled) }
func (gdClass Node2D) Translate(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[11], offset) }
func (gdClass Node2D) GlobalTranslate(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[12], offset) }
func (gdClass Node2D) ApplyScale(ratio Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[13], ratio) }
func (gdClass Node2D) SetGlobalPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[14], position) }
func (gdClass Node2D) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[15]) }
func (gdClass Node2D) SetGlobalRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[16], radians) }
func (gdClass Node2D) GetGlobalRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[17]) }
func (gdClass Node2D) SetGlobalSkew(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[18], radians) }
func (gdClass Node2D) GetGlobalSkew() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[19]) }
func (gdClass Node2D) SetGlobalScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[20], scale) }
func (gdClass Node2D) GetGlobalScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[21]) }
func (gdClass Node2D) SetTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[22], xform) }
func (gdClass Node2D) SetGlobalTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[23], xform) }
func (gdClass Node2D) LookAt(point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[24], point) }
func (gdClass Node2D) GetAngleTo(point Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[25], point) }
func (gdClass Node2D) ToLocal(global_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[26], global_point) }
func (gdClass Node2D) ToGlobal(local_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[27], local_point) }
func (gdClass Node2D) SetZIndex(z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[28], z_index) }
func (gdClass Node2D) GetZIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode2D[29]) }
func (gdClass Node2D) SetZAsRelative(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[30], enable) }
func (gdClass Node2D) IsZRelative() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode2D[31]) }
func (gdClass Node2D) SetYSortEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[32], enabled) }
func (gdClass Node2D) IsYSortEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode2D[33]) }
func (gdClass Node2D) GetRelativeTransformToParent(parent Node) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodNode2D[34], parent) }

type Node3D gdnative.Object

var methodNode3D [66]gdnative.Method

type Node3DRotationEditMode int64

const (
	Node3DRotationEditModeEuler Node3DRotationEditMode = 0
	Node3DRotationEditModeQuaternion Node3DRotationEditMode = 1
	Node3DRotationEditModeBasis Node3DRotationEditMode = 2
)

type Node3DRotationOrder int64

const (
	Node3DRotationOrderXyz Node3DRotationOrder = 0
	Node3DRotationOrderXzy Node3DRotationOrder = 1
	Node3DRotationOrderYxz Node3DRotationOrder = 2
	Node3DRotationOrderYzx Node3DRotationOrder = 3
	Node3DRotationOrderZxy Node3DRotationOrder = 4
	Node3DRotationOrderZyx Node3DRotationOrder = 5
)
func (gdClass Node3D) SetTransform(local Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[0], local) }
func (gdClass Node3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodNode3D[1]) }
func (gdClass Node3D) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[2], position) }
func (gdClass Node3D) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[3]) }
func (gdClass Node3D) SetRotation(euler Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[4], euler) }
func (gdClass Node3D) GetRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[5]) }
func (gdClass Node3D) SetRotationOrder(order Node3DRotationOrder)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[6], order) }
func (gdClass Node3D) GetRotationOrder() Node3DRotationOrder { return gdnative.Return[Node3DRotationOrder](gdnative.Object(gdClass), methodNode3D[7]) }
func (gdClass Node3D) SetRotationEditMode(edit_mode Node3DRotationEditMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[8], edit_mode) }
func (gdClass Node3D) GetRotationEditMode() Node3DRotationEditMode { return gdnative.Return[Node3DRotationEditMode](gdnative.Object(gdClass), methodNode3D[9]) }
func (gdClass Node3D) SetScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[10], scale) }
func (gdClass Node3D) GetScale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[11]) }
func (gdClass Node3D) SetQuaternion(quaternion Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[12], quaternion) }
func (gdClass Node3D) GetQuaternion() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodNode3D[13]) }
func (gdClass Node3D) SetBasis(basis Basis)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[14], basis) }
func (gdClass Node3D) GetBasis() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodNode3D[15]) }
func (gdClass Node3D) SetGlobalTransform(global Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[16], global) }
func (gdClass Node3D) GetGlobalTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodNode3D[17]) }
func (gdClass Node3D) SetGlobalPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[18], position) }
func (gdClass Node3D) GetGlobalPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[19]) }
func (gdClass Node3D) SetGlobalRotation(radians Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[20], radians) }
func (gdClass Node3D) GetGlobalRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[21]) }
func (gdClass Node3D) GetParentNode3d() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodNode3D[22]) }
func (gdClass Node3D) SetIgnoreTransformNotification(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[23], enabled) }
func (gdClass Node3D) SetAsTopLevel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[24], enable) }
func (gdClass Node3D) IsSetAsTopLevel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[25]) }
func (gdClass Node3D) SetDisableScale(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[26], disable) }
func (gdClass Node3D) IsScaleDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[27]) }
func (gdClass Node3D) GetWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodNode3D[28]) }
func (gdClass Node3D) ForceUpdateTransform()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[29]) }
func (gdClass Node3D) SetVisibilityParent(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[30], path) }
func (gdClass Node3D) GetVisibilityParent() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode3D[31]) }
func (gdClass Node3D) UpdateGizmos()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[32]) }
func (gdClass Node3D) AddGizmo(gizmo Node3DGizmo)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[33], gizmo) }
func (gdClass Node3D) GetGizmos() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode3D[34]) }
func (gdClass Node3D) ClearGizmos()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[35]) }
func (gdClass Node3D) SetSubgizmoSelection(gizmo Node3DGizmo, id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[36], gizmo, id, transform) }
func (gdClass Node3D) ClearSubgizmoSelection()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[37]) }
func (gdClass Node3D) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[38], visible) }
func (gdClass Node3D) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[39]) }
func (gdClass Node3D) IsVisibleInTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[40]) }
func (gdClass Node3D) Show()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[41]) }
func (gdClass Node3D) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[42]) }
func (gdClass Node3D) SetNotifyLocalTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[43], enable) }
func (gdClass Node3D) IsLocalTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[44]) }
func (gdClass Node3D) SetNotifyTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[45], enable) }
func (gdClass Node3D) IsTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[46]) }
func (gdClass Node3D) Rotate(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[47], axis, angle) }
func (gdClass Node3D) GlobalRotate(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[48], axis, angle) }
func (gdClass Node3D) GlobalScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[49], scale) }
func (gdClass Node3D) GlobalTranslate(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[50], offset) }
func (gdClass Node3D) RotateObjectLocal(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[51], axis, angle) }
func (gdClass Node3D) ScaleObjectLocal(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[52], scale) }
func (gdClass Node3D) TranslateObjectLocal(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[53], offset) }
func (gdClass Node3D) RotateX(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[54], angle) }
func (gdClass Node3D) RotateY(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[55], angle) }
func (gdClass Node3D) RotateZ(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[56], angle) }
func (gdClass Node3D) Translate(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[57], offset) }
func (gdClass Node3D) Orthonormalize()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[58]) }
func (gdClass Node3D) SetIdentity()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[59]) }
func (gdClass Node3D) LookAt(target Vector3, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[60], target, up) }
func (gdClass Node3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[61], position, target, up) }
func (gdClass Node3D) ToLocal(global_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[62], global_point) }
func (gdClass Node3D) ToGlobal(local_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[63], local_point) }
func (gdClass Node3D) PropertyCanRevert(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[64], name) }
func (gdClass Node3D) PropertyGetRevert(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodNode3D[65], name) }

type Node3DGizmo gdnative.Object

var methodNode3DGizmo [0]gdnative.Method

type Noise gdnative.Object

var methodNoise [7]gdnative.Method
func (gdClass Noise) GetNoise1d(x float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[0], x) }
func (gdClass Noise) GetNoise2d(x float64, y float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[1], x, y) }
func (gdClass Noise) GetNoise2dv(v Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[2], v) }
func (gdClass Noise) GetNoise3d(x float64, y float64, z float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[3], x, y, z) }
func (gdClass Noise) GetNoise3dv(v Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[4], v) }
func (gdClass Noise) GetImage(width int64, height int64, invert bool, in_3d_space bool) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodNoise[5], width, height, invert, in_3d_space) }
func (gdClass Noise) GetSeamlessImage(width int64, height int64, invert bool, in_3d_space bool, skirt float64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodNoise[6], width, height, invert, in_3d_space, skirt) }

type NoiseTexture gdnative.Object

var methodNoiseTexture [20]gdnative.Method
func (gdClass NoiseTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[0], width) }
func (gdClass NoiseTexture) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[1], height) }
func (gdClass NoiseTexture) SetInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[2], invert) }
func (gdClass NoiseTexture) GetInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[3]) }
func (gdClass NoiseTexture) SetIn3dSpace(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[4], enable) }
func (gdClass NoiseTexture) IsIn3dSpace() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[5]) }
func (gdClass NoiseTexture) SetGenerateMipmaps(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[6], invert) }
func (gdClass NoiseTexture) IsGeneratingMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[7]) }
func (gdClass NoiseTexture) SetSeamless(seamless bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[8], seamless) }
func (gdClass NoiseTexture) GetSeamless() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[9]) }
func (gdClass NoiseTexture) SetSeamlessBlendSkirt(seamless_blend_skirt float64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[10], seamless_blend_skirt) }
func (gdClass NoiseTexture) GetSeamlessBlendSkirt() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoiseTexture[11]) }
func (gdClass NoiseTexture) SetAsNormalMap(as_normal_map bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[12], as_normal_map) }
func (gdClass NoiseTexture) IsNormalMap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[13]) }
func (gdClass NoiseTexture) SetBumpStrength(bump_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[14], bump_strength) }
func (gdClass NoiseTexture) GetBumpStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoiseTexture[15]) }
func (gdClass NoiseTexture) SetColorRamp(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[16], gradient) }
func (gdClass NoiseTexture) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodNoiseTexture[17]) }
func (gdClass NoiseTexture) SetNoise(noise Noise)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[18], noise) }
func (gdClass NoiseTexture) GetNoise() Noise { return gdnative.Return[Noise](gdnative.Object(gdClass), methodNoiseTexture[19]) }

type ORMMaterial3D gdnative.Object

var methodORMMaterial3D [0]gdnative.Method

type OS gdnative.Object

var methodOS [65]gdnative.Method

type OSVideoDriver int64

const (
	OSVideoDriverVulkan OSVideoDriver = 0
	OSVideoDriverOpengl3 OSVideoDriver = 1
)

type OSWeekday int64

const (
	OSDaySunday OSWeekday = 0
	OSDayMonday OSWeekday = 1
	OSDayTuesday OSWeekday = 2
	OSDayWednesday OSWeekday = 3
	OSDayThursday OSWeekday = 4
	OSDayFriday OSWeekday = 5
	OSDaySaturday OSWeekday = 6
)

type OSMonth int64

const (
	OSMonthJanuary OSMonth = 1
	OSMonthFebruary OSMonth = 2
	OSMonthMarch OSMonth = 3
	OSMonthApril OSMonth = 4
	OSMonthMay OSMonth = 5
	OSMonthJune OSMonth = 6
	OSMonthJuly OSMonth = 7
	OSMonthAugust OSMonth = 8
	OSMonthSeptember OSMonth = 9
	OSMonthOctober OSMonth = 10
	OSMonthNovember OSMonth = 11
	OSMonthDecember OSMonth = 12
)

type OSSystemDir int64

const (
	OSSystemDirDesktop OSSystemDir = 0
	OSSystemDirDcim OSSystemDir = 1
	OSSystemDirDocuments OSSystemDir = 2
	OSSystemDirDownloads OSSystemDir = 3
	OSSystemDirMovies OSSystemDir = 4
	OSSystemDirMusic OSSystemDir = 5
	OSSystemDirPictures OSSystemDir = 6
	OSSystemDirRingtones OSSystemDir = 7
)
func (gdClass OS) GetConnectedMidiInputs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[0]) }
func (gdClass OS) OpenMidiInputs()  { gdnative.Call(gdnative.Object(gdClass), methodOS[1]) }
func (gdClass OS) CloseMidiInputs()  { gdnative.Call(gdnative.Object(gdClass), methodOS[2]) }
func (gdClass OS) Alert(text string, title string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[3], text, title) }
func (gdClass OS) Crash(message string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[4], message) }
func (gdClass OS) SetLowProcessorUsageMode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[5], enable) }
func (gdClass OS) IsInLowProcessorUsageMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[6]) }
func (gdClass OS) SetLowProcessorUsageModeSleepUsec(usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[7], usec) }
func (gdClass OS) GetLowProcessorUsageModeSleepUsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[8]) }
func (gdClass OS) GetProcessorCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[9]) }
func (gdClass OS) GetProcessorName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[10]) }
func (gdClass OS) GetSystemFonts() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[11]) }
func (gdClass OS) GetSystemFontPath(font_name string, bold bool, italic bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[12], font_name, bold, italic) }
func (gdClass OS) GetExecutablePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[13]) }
func (gdClass OS) Execute(path string, arguments []string, output Array, read_stderr bool, open_console bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[14], path, arguments, output, read_stderr, open_console) }
func (gdClass OS) CreateProcess(path string, arguments []string, open_console bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[15], path, arguments, open_console) }
func (gdClass OS) CreateInstance(arguments []string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[16], arguments) }
func (gdClass OS) Kill(pid int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[17], pid) }
func (gdClass OS) ShellOpen(uri string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[18], uri) }
func (gdClass OS) IsProcessRunning(pid int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[19], pid) }
func (gdClass OS) GetProcessId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[20]) }
func (gdClass OS) GetEnvironment(variable string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[21], variable) }
func (gdClass OS) SetEnvironment(variable string, value string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[22], variable, value) }
func (gdClass OS) HasEnvironment(variable string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[23], variable) }
func (gdClass OS) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[24]) }
func (gdClass OS) GetCmdlineArgs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[25]) }
func (gdClass OS) GetCmdlineUserArgs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[26]) }
func (gdClass OS) SetRestartOnExit(restart bool, arguments []string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[27], restart, arguments) }
func (gdClass OS) IsRestartOnExitSet() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[28]) }
func (gdClass OS) GetRestartOnExitArguments() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[29]) }
func (gdClass OS) DelayUsec(usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[30], usec) }
func (gdClass OS) DelayMsec(msec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[31], msec) }
func (gdClass OS) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[32]) }
func (gdClass OS) GetLocaleLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[33]) }
func (gdClass OS) GetModelName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[34]) }
func (gdClass OS) IsUserfsPersistent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[35]) }
func (gdClass OS) IsStdoutVerbose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[36]) }
func (gdClass OS) CanUseThreads() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[37]) }
func (gdClass OS) IsDebugBuild() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[38]) }
func (gdClass OS) DumpMemoryToFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[39], file) }
func (gdClass OS) DumpResourcesToFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[40], file) }
func (gdClass OS) PrintResourcesInUse(short bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[41], short) }
func (gdClass OS) PrintAllResources(tofile string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[42], tofile) }
func (gdClass OS) GetStaticMemoryUsage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[43]) }
func (gdClass OS) GetStaticMemoryPeakUsage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[44]) }
func (gdClass OS) MoveToTrash(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[45], path) }
func (gdClass OS) GetUserDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[46]) }
func (gdClass OS) GetSystemDir(dir OSSystemDir, shared_storage bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[47], dir, shared_storage) }
func (gdClass OS) GetConfigDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[48]) }
func (gdClass OS) GetDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[49]) }
func (gdClass OS) GetCacheDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[50]) }
func (gdClass OS) GetUniqueId() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[51]) }
func (gdClass OS) PrintAllTexturesBySize()  { gdnative.Call(gdnative.Object(gdClass), methodOS[52]) }
func (gdClass OS) PrintResourcesByType(types []string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[53], types) }
func (gdClass OS) GetKeycodeString(code Key) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[54], code) }
func (gdClass OS) IsKeycodeUnicode(code int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[55], code) }
func (gdClass OS) FindKeycodeFromString(s string) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodOS[56], s) }
func (gdClass OS) SetUseFileAccessSaveAndSwap(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[57], enabled) }
func (gdClass OS) SetThreadName(name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[58], name) }
func (gdClass OS) GetThreadCallerId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[59]) }
func (gdClass OS) GetMainThreadId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[60]) }
func (gdClass OS) HasFeature(tag_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[61], tag_name) }
func (gdClass OS) RequestPermission(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[62], name) }
func (gdClass OS) RequestPermissions() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[63]) }
func (gdClass OS) GetGrantedPermissions() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[64]) }

type Object gdnative.Object

var methodObject [41]gdnative.Method

type ObjectConnectFlags int64

const (
	ObjectConnectDeferred ObjectConnectFlags = 1
	ObjectConnectPersist ObjectConnectFlags = 2
	ObjectConnectOneshot ObjectConnectFlags = 4
	ObjectConnectReferenceCounted ObjectConnectFlags = 8
)
func (gdClass Object) GetClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[0]) }
func (gdClass Object) IsClass(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[1], class) }
func (gdClass Object) Set(property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[2], property, value) }
func (gdClass Object) Get(property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[3], property) }
func (gdClass Object) SetIndexed(property NodePath, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[4], property, value) }
func (gdClass Object) GetIndexed(property NodePath) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[5], property) }
func (gdClass Object) GetPropertyList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[6]) }
func (gdClass Object) GetMethodList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[7]) }
func (gdClass Object) Notification(what int64, reversed bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[8], what, reversed) }
func (gdClass Object) ToString() string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[9]) }
func (gdClass Object) GetInstanceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodObject[10]) }
func (gdClass Object) SetScript(script any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[11], script) }
func (gdClass Object) GetScript() any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[12]) }
func (gdClass Object) SetMeta(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[13], name, value) }
func (gdClass Object) RemoveMeta(name string)  { gdnative.Call(gdnative.Object(gdClass), methodObject[14], name) }
func (gdClass Object) GetMeta(name string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[15], name, def) }
func (gdClass Object) HasMeta(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[16], name) }
func (gdClass Object) GetMetaList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodObject[17]) }
func (gdClass Object) AddUserSignal(signal string, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodObject[18], signal, arguments) }
func (gdClass Object) HasUserSignal(signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[19], signal) }
func (gdClass Object) EmitSignal(signal string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodObject[20], signal) }
func (gdClass Object) Call(method string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[21], method) }
func (gdClass Object) CallDeferred(method string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[22], method) }
func (gdClass Object) SetDeferred(property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[23], property, value) }
func (gdClass Object) Callv(method string, arg_array Array) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[24], method, arg_array) }
func (gdClass Object) HasMethod(method string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[25], method) }
func (gdClass Object) HasSignal(signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[26], signal) }
func (gdClass Object) GetSignalList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[27]) }
func (gdClass Object) GetSignalConnectionList(signal string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[28], signal) }
func (gdClass Object) GetIncomingConnections() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[29]) }
func (gdClass Object) Connect(signal string, callable Callable, flags int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodObject[30], signal, callable, flags) }
func (gdClass Object) Disconnect(signal string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodObject[31], signal, callable) }
func (gdClass Object) IsConnected(signal string, callable Callable) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[32], signal, callable) }
func (gdClass Object) SetBlockSignals(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[33], enable) }
func (gdClass Object) IsBlockingSignals() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[34]) }
func (gdClass Object) NotifyPropertyListChanged()  { gdnative.Call(gdnative.Object(gdClass), methodObject[35]) }
func (gdClass Object) SetMessageTranslation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[36], enable) }
func (gdClass Object) CanTranslateMessages() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[37]) }
func (gdClass Object) Tr(message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[38], message, context) }
func (gdClass Object) TrN(message string, plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[39], message, plural_message, n, context) }
func (gdClass Object) IsQueuedForDeletion() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[40]) }

type Occluder3D gdnative.Object

var methodOccluder3D [2]gdnative.Method
func (gdClass Occluder3D) GetVertices() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodOccluder3D[0]) }
func (gdClass Occluder3D) GetIndices() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodOccluder3D[1]) }

type OccluderInstance3D gdnative.Object

var methodOccluderInstance3D [8]gdnative.Method
func (gdClass OccluderInstance3D) SetBakeMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[0], mask) }
func (gdClass OccluderInstance3D) GetBakeMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOccluderInstance3D[1]) }
func (gdClass OccluderInstance3D) SetBakeMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[2], layer_number, value) }
func (gdClass OccluderInstance3D) GetBakeMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOccluderInstance3D[3], layer_number) }
func (gdClass OccluderInstance3D) SetBakeSimplificationDistance(simplification_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[4], simplification_distance) }
func (gdClass OccluderInstance3D) GetBakeSimplificationDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOccluderInstance3D[5]) }
func (gdClass OccluderInstance3D) SetOccluder(occluder Occluder3D)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[6], occluder) }
func (gdClass OccluderInstance3D) GetOccluder() Occluder3D { return gdnative.Return[Occluder3D](gdnative.Object(gdClass), methodOccluderInstance3D[7]) }

type OccluderPolygon2D gdnative.Object

var methodOccluderPolygon2D [6]gdnative.Method

type OccluderPolygon2DCullMode int64

const (
	OccluderPolygon2DCullDisabled OccluderPolygon2DCullMode = 0
	OccluderPolygon2DCullClockwise OccluderPolygon2DCullMode = 1
	OccluderPolygon2DCullCounterClockwise OccluderPolygon2DCullMode = 2
)
func (gdClass OccluderPolygon2D) SetClosed(closed bool)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[0], closed) }
func (gdClass OccluderPolygon2D) IsClosed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOccluderPolygon2D[1]) }
func (gdClass OccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[2], cull_mode) }
func (gdClass OccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode { return gdnative.Return[OccluderPolygon2DCullMode](gdnative.Object(gdClass), methodOccluderPolygon2D[3]) }
func (gdClass OccluderPolygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[4], polygon) }
func (gdClass OccluderPolygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodOccluderPolygon2D[5]) }

type OggPacketSequence gdnative.Object

var methodOggPacketSequence [7]gdnative.Method
func (gdClass OggPacketSequence) SetPacketData(packet_data Array)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[0], packet_data) }
func (gdClass OggPacketSequence) GetPacketData() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOggPacketSequence[1]) }
func (gdClass OggPacketSequence) SetPacketGranulePositions(granule_positions Array)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[2], granule_positions) }
func (gdClass OggPacketSequence) GetPacketGranulePositions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOggPacketSequence[3]) }
func (gdClass OggPacketSequence) SetSamplingRate(sampling_rate float64)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[4], sampling_rate) }
func (gdClass OggPacketSequence) GetSamplingRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOggPacketSequence[5]) }
func (gdClass OggPacketSequence) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOggPacketSequence[6]) }

type OggPacketSequencePlayback gdnative.Object

var methodOggPacketSequencePlayback [0]gdnative.Method

type OmniLight3D gdnative.Object

var methodOmniLight3D [2]gdnative.Method

type OmniLight3DShadowMode int64

const (
	OmniLight3DShadowDualParaboloid OmniLight3DShadowMode = 0
	OmniLight3DShadowCube OmniLight3DShadowMode = 1
)
func (gdClass OmniLight3D) SetShadowMode(mode OmniLight3DShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodOmniLight3D[0], mode) }
func (gdClass OmniLight3D) GetShadowMode() OmniLight3DShadowMode { return gdnative.Return[OmniLight3DShadowMode](gdnative.Object(gdClass), methodOmniLight3D[1]) }

type OpenXRAction gdnative.Object

var methodOpenXRAction [6]gdnative.Method

type OpenXRActionActionType int64

const (
	OpenXRActionOpenxrActionBool OpenXRActionActionType = 0
	OpenXRActionOpenxrActionFloat OpenXRActionActionType = 1
	OpenXRActionOpenxrActionVector2 OpenXRActionActionType = 2
	OpenXRActionOpenxrActionPose OpenXRActionActionType = 3
)
func (gdClass OpenXRAction) SetLocalizedName(localized_name string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[0], localized_name) }
func (gdClass OpenXRAction) GetLocalizedName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRAction[1]) }
func (gdClass OpenXRAction) SetActionType(action_type OpenXRActionActionType)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[2], action_type) }
func (gdClass OpenXRAction) GetActionType() OpenXRActionActionType { return gdnative.Return[OpenXRActionActionType](gdnative.Object(gdClass), methodOpenXRAction[3]) }
func (gdClass OpenXRAction) SetToplevelPaths(toplevel_paths []string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[4], toplevel_paths) }
func (gdClass OpenXRAction) GetToplevelPaths() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOpenXRAction[5]) }

type OpenXRActionMap gdnative.Object

var methodOpenXRActionMap [15]gdnative.Method
func (gdClass OpenXRActionMap) SetActionSets(action_sets Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[0], action_sets) }
func (gdClass OpenXRActionMap) GetActionSets() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionMap[1]) }
func (gdClass OpenXRActionMap) GetActionSetCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionMap[2]) }
func (gdClass OpenXRActionMap) FindActionSet(name string) OpenXRActionSet { return gdnative.Return[OpenXRActionSet](gdnative.Object(gdClass), methodOpenXRActionMap[3], name) }
func (gdClass OpenXRActionMap) GetActionSet(idx int64) OpenXRActionSet { return gdnative.Return[OpenXRActionSet](gdnative.Object(gdClass), methodOpenXRActionMap[4], idx) }
func (gdClass OpenXRActionMap) AddActionSet(action_set OpenXRActionSet)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[5], action_set) }
func (gdClass OpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[6], action_set) }
func (gdClass OpenXRActionMap) SetInteractionProfiles(interaction_profiles Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[7], interaction_profiles) }
func (gdClass OpenXRActionMap) GetInteractionProfiles() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionMap[8]) }
func (gdClass OpenXRActionMap) GetInteractionProfileCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionMap[9]) }
func (gdClass OpenXRActionMap) FindInteractionProfile(name string) OpenXRInteractionProfile { return gdnative.Return[OpenXRInteractionProfile](gdnative.Object(gdClass), methodOpenXRActionMap[10], name) }
func (gdClass OpenXRActionMap) GetInteractionProfile(idx int64) OpenXRInteractionProfile { return gdnative.Return[OpenXRInteractionProfile](gdnative.Object(gdClass), methodOpenXRActionMap[11], idx) }
func (gdClass OpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[12], interaction_profile) }
func (gdClass OpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[13], interaction_profile) }
func (gdClass OpenXRActionMap) CreateDefaultActionSets()  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[14]) }

type OpenXRActionSet gdnative.Object

var methodOpenXRActionSet [9]gdnative.Method
func (gdClass OpenXRActionSet) SetLocalizedName(localized_name string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[0], localized_name) }
func (gdClass OpenXRActionSet) GetLocalizedName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRActionSet[1]) }
func (gdClass OpenXRActionSet) SetPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[2], priority) }
func (gdClass OpenXRActionSet) GetPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionSet[3]) }
func (gdClass OpenXRActionSet) GetActionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionSet[4]) }
func (gdClass OpenXRActionSet) SetActions(actions Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[5], actions) }
func (gdClass OpenXRActionSet) GetActions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionSet[6]) }
func (gdClass OpenXRActionSet) AddAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[7], action) }
func (gdClass OpenXRActionSet) RemoveAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[8], action) }

type OpenXRIPBinding gdnative.Object

var methodOpenXRIPBinding [8]gdnative.Method
func (gdClass OpenXRIPBinding) SetAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[0], action) }
func (gdClass OpenXRIPBinding) GetAction() OpenXRAction { return gdnative.Return[OpenXRAction](gdnative.Object(gdClass), methodOpenXRIPBinding[1]) }
func (gdClass OpenXRIPBinding) GetPathCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRIPBinding[2]) }
func (gdClass OpenXRIPBinding) SetPaths(paths []string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[3], paths) }
func (gdClass OpenXRIPBinding) GetPaths() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOpenXRIPBinding[4]) }
func (gdClass OpenXRIPBinding) HasPath(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOpenXRIPBinding[5], path) }
func (gdClass OpenXRIPBinding) AddPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[6], path) }
func (gdClass OpenXRIPBinding) RemovePath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[7], path) }

type OpenXRInteractionProfile gdnative.Object

var methodOpenXRInteractionProfile [6]gdnative.Method
func (gdClass OpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRInteractionProfile[0], interaction_profile_path) }
func (gdClass OpenXRInteractionProfile) GetInteractionProfilePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRInteractionProfile[1]) }
func (gdClass OpenXRInteractionProfile) GetBindingCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRInteractionProfile[2]) }
func (gdClass OpenXRInteractionProfile) GetBinding(index int64) OpenXRIPBinding { return gdnative.Return[OpenXRIPBinding](gdnative.Object(gdClass), methodOpenXRInteractionProfile[3], index) }
func (gdClass OpenXRInteractionProfile) SetBindings(bindings Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRInteractionProfile[4], bindings) }
func (gdClass OpenXRInteractionProfile) GetBindings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRInteractionProfile[5]) }

type OpenXRInterface gdnative.Object

var methodOpenXRInterface [0]gdnative.Method

type OptimizedTranslation gdnative.Object

var methodOptimizedTranslation [1]gdnative.Method
func (gdClass OptimizedTranslation) Generate(from Translation)  { gdnative.Call(gdnative.Object(gdClass), methodOptimizedTranslation[0], from) }

type OptionButton gdnative.Object

var methodOptionButton [30]gdnative.Method
func (gdClass OptionButton) AddItem(label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[0], label, id) }
func (gdClass OptionButton) AddIconItem(texture Texture2D, label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[1], texture, label, id) }
func (gdClass OptionButton) SetItemText(idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[2], idx, text) }
func (gdClass OptionButton) SetItemIcon(idx int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[3], idx, texture) }
func (gdClass OptionButton) SetItemDisabled(idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[4], idx, disabled) }
func (gdClass OptionButton) SetItemId(idx int64, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[5], idx, id) }
func (gdClass OptionButton) SetItemMetadata(idx int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[6], idx, metadata) }
func (gdClass OptionButton) SetItemTooltip(idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[7], idx, tooltip) }
func (gdClass OptionButton) GetItemText(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOptionButton[8], idx) }
func (gdClass OptionButton) GetItemIcon(idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodOptionButton[9], idx) }
func (gdClass OptionButton) GetItemId(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[10], idx) }
func (gdClass OptionButton) GetItemIndex(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[11], id) }
func (gdClass OptionButton) GetItemMetadata(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodOptionButton[12], idx) }
func (gdClass OptionButton) GetItemTooltip(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOptionButton[13], idx) }
func (gdClass OptionButton) IsItemDisabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[14], idx) }
func (gdClass OptionButton) IsItemSeparator(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[15], idx) }
func (gdClass OptionButton) AddSeparator(text string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[16], text) }
func (gdClass OptionButton) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[17]) }
func (gdClass OptionButton) Select(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[18], idx) }
func (gdClass OptionButton) GetSelected() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[19]) }
func (gdClass OptionButton) GetSelectedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[20]) }
func (gdClass OptionButton) GetSelectedMetadata() any { return gdnative.Return[any](gdnative.Object(gdClass), methodOptionButton[21]) }
func (gdClass OptionButton) RemoveItem(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[22], idx) }
func (gdClass OptionButton) GetPopup() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodOptionButton[23]) }
func (gdClass OptionButton) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[24], count) }
func (gdClass OptionButton) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[25]) }
func (gdClass OptionButton) HasSelectableItems() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[26]) }
func (gdClass OptionButton) GetSelectableItem(from_last bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[27], from_last) }
func (gdClass OptionButton) SetFitToLongestItem(fit bool)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[28], fit) }
func (gdClass OptionButton) IsFitToLongestItem() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[29]) }

type PCKPacker gdnative.Object

var methodPCKPacker [3]gdnative.Method
func (gdClass PCKPacker) PckStart(pck_name string, alignment int64, key string, encrypt_directory bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[0], pck_name, alignment, key, encrypt_directory) }
func (gdClass PCKPacker) AddFile(pck_path string, source_path string, encrypt bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[1], pck_path, source_path, encrypt) }
func (gdClass PCKPacker) Flush(verbose bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[2], verbose) }

type PackedDataContainer gdnative.Object

var methodPackedDataContainer [2]gdnative.Method
func (gdClass PackedDataContainer) Pack(value any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPackedDataContainer[0], value) }
func (gdClass PackedDataContainer) Size() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPackedDataContainer[1]) }

type PackedDataContainerRef gdnative.Object

var methodPackedDataContainerRef [1]gdnative.Method
func (gdClass PackedDataContainerRef) Size() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPackedDataContainerRef[0]) }

type PackedScene gdnative.Object

var methodPackedScene [4]gdnative.Method

type PackedSceneGenEditState int64

const (
	PackedSceneGenEditStateDisabled PackedSceneGenEditState = 0
	PackedSceneGenEditStateInstance PackedSceneGenEditState = 1
	PackedSceneGenEditStateMain PackedSceneGenEditState = 2
	PackedSceneGenEditStateMainInherited PackedSceneGenEditState = 3
)
func (gdClass PackedScene) Pack(path Node) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPackedScene[0], path) }
func (gdClass PackedScene) Instantiate(edit_state PackedSceneGenEditState) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodPackedScene[1], edit_state) }
func (gdClass PackedScene) CanInstantiate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPackedScene[2]) }
func (gdClass PackedScene) GetState() SceneState { return gdnative.Return[SceneState](gdnative.Object(gdClass), methodPackedScene[3]) }

type PacketPeer gdnative.Object

var methodPacketPeer [8]gdnative.Method
func (gdClass PacketPeer) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPacketPeer[0], allow_objects) }
func (gdClass PacketPeer) PutVar(v any, full_objects bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[1], v, full_objects) }
func (gdClass PacketPeer) GetPacket() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodPacketPeer[2]) }
func (gdClass PacketPeer) PutPacket(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[3], buffer) }
func (gdClass PacketPeer) GetPacketError() error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[4]) }
func (gdClass PacketPeer) GetAvailablePacketCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeer[5]) }
func (gdClass PacketPeer) GetEncodeBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeer[6]) }
func (gdClass PacketPeer) SetEncodeBufferMaxSize(max_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeer[7], max_size) }

type PacketPeerDTLS gdnative.Object

var methodPacketPeerDTLS [4]gdnative.Method

type PacketPeerDTLSStatus int64

const (
	PacketPeerDTLSStatusDisconnected PacketPeerDTLSStatus = 0
	PacketPeerDTLSStatusHandshaking PacketPeerDTLSStatus = 1
	PacketPeerDTLSStatusConnected PacketPeerDTLSStatus = 2
	PacketPeerDTLSStatusError PacketPeerDTLSStatus = 3
	PacketPeerDTLSStatusErrorHostnameMismatch PacketPeerDTLSStatus = 4
)
func (gdClass PacketPeerDTLS) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerDTLS[0]) }
func (gdClass PacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, validate_certs bool, for_hostname string, valid_certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerDTLS[1], packet_peer, validate_certs, for_hostname, valid_certificate) }
func (gdClass PacketPeerDTLS) GetStatus() PacketPeerDTLSStatus { return gdnative.Return[PacketPeerDTLSStatus](gdnative.Object(gdClass), methodPacketPeerDTLS[2]) }
func (gdClass PacketPeerDTLS) DisconnectFromPeer()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerDTLS[3]) }

type PacketPeerExtension gdnative.Object

var methodPacketPeerExtension [4]gdnative.Method
func (gdClass PacketPeerExtension) GetPacketImplementation(r_buffer *[]byte, r_buffer_size *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerExtension[0], r_buffer, r_buffer_size) }
func (gdClass PacketPeerExtension) PutPacketImplementation(p_buffer []byte, p_buffer_size int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerExtension[1], p_buffer, p_buffer_size) }
func (gdClass PacketPeerExtension) GetAvailablePacketCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerExtension[2]) }
func (gdClass PacketPeerExtension) GetMaxPacketSizeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerExtension[3]) }

type PacketPeerStream gdnative.Object

var methodPacketPeerStream [6]gdnative.Method
func (gdClass PacketPeerStream) SetStreamPeer(peer StreamPeer)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[0], peer) }
func (gdClass PacketPeerStream) GetStreamPeer() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodPacketPeerStream[1]) }
func (gdClass PacketPeerStream) SetInputBufferMaxSize(max_size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[2], max_size_bytes) }
func (gdClass PacketPeerStream) SetOutputBufferMaxSize(max_size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[3], max_size_bytes) }
func (gdClass PacketPeerStream) GetInputBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerStream[4]) }
func (gdClass PacketPeerStream) GetOutputBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerStream[5]) }

type PacketPeerUDP gdnative.Object

var methodPacketPeerUDP [13]gdnative.Method
func (gdClass PacketPeerUDP) Bind(port int64, bind_address string, recv_buf_size int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[0], port, bind_address, recv_buf_size) }
func (gdClass PacketPeerUDP) Close()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerUDP[1]) }
func (gdClass PacketPeerUDP) Wait() error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[2]) }
func (gdClass PacketPeerUDP) IsBound() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPacketPeerUDP[3]) }
func (gdClass PacketPeerUDP) ConnectToHost(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[4], host, port) }
func (gdClass PacketPeerUDP) IsSocketConnected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPacketPeerUDP[5]) }
func (gdClass PacketPeerUDP) GetPacketIp() string { return gdnative.Return[string](gdnative.Object(gdClass), methodPacketPeerUDP[6]) }
func (gdClass PacketPeerUDP) GetPacketPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerUDP[7]) }
func (gdClass PacketPeerUDP) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerUDP[8]) }
func (gdClass PacketPeerUDP) SetDestAddress(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[9], host, port) }
func (gdClass PacketPeerUDP) SetBroadcastEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerUDP[10], enabled) }
func (gdClass PacketPeerUDP) JoinMulticastGroup(multicast_address string, interface_name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[11], multicast_address, interface_name) }
func (gdClass PacketPeerUDP) LeaveMulticastGroup(multicast_address string, interface_name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[12], multicast_address, interface_name) }

type Panel gdnative.Object

var methodPanel [0]gdnative.Method

type PanelContainer gdnative.Object

var methodPanelContainer [0]gdnative.Method

type PanoramaSkyMaterial gdnative.Object

var methodPanoramaSkyMaterial [4]gdnative.Method
func (gdClass PanoramaSkyMaterial) SetPanorama(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPanoramaSkyMaterial[0], texture) }
func (gdClass PanoramaSkyMaterial) GetPanorama() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPanoramaSkyMaterial[1]) }
func (gdClass PanoramaSkyMaterial) SetFilteringEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPanoramaSkyMaterial[2], enabled) }
func (gdClass PanoramaSkyMaterial) IsFilteringEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPanoramaSkyMaterial[3]) }

type ParallaxBackground gdnative.Object

var methodParallaxBackground [12]gdnative.Method
func (gdClass ParallaxBackground) SetScrollOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[0], offset) }
func (gdClass ParallaxBackground) GetScrollOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[1]) }
func (gdClass ParallaxBackground) SetScrollBaseOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[2], offset) }
func (gdClass ParallaxBackground) GetScrollBaseOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[3]) }
func (gdClass ParallaxBackground) SetScrollBaseScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[4], scale) }
func (gdClass ParallaxBackground) GetScrollBaseScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[5]) }
func (gdClass ParallaxBackground) SetLimitBegin(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[6], offset) }
func (gdClass ParallaxBackground) GetLimitBegin() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[7]) }
func (gdClass ParallaxBackground) SetLimitEnd(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[8], offset) }
func (gdClass ParallaxBackground) GetLimitEnd() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[9]) }
func (gdClass ParallaxBackground) SetIgnoreCameraZoom(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[10], ignore) }
func (gdClass ParallaxBackground) IsIgnoreCameraZoom() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParallaxBackground[11]) }

type ParallaxLayer gdnative.Object

var methodParallaxLayer [6]gdnative.Method
func (gdClass ParallaxLayer) SetMotionScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[0], scale) }
func (gdClass ParallaxLayer) GetMotionScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[1]) }
func (gdClass ParallaxLayer) SetMotionOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[2], offset) }
func (gdClass ParallaxLayer) GetMotionOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[3]) }
func (gdClass ParallaxLayer) SetMirroring(mirror Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[4], mirror) }
func (gdClass ParallaxLayer) GetMirroring() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[5]) }

type ParticlesMaterial gdnative.Object

var methodParticlesMaterial [74]gdnative.Method

type ParticlesMaterialParameter int64

const (
	ParticlesMaterialParamInitialLinearVelocity ParticlesMaterialParameter = 0
	ParticlesMaterialParamAngularVelocity ParticlesMaterialParameter = 1
	ParticlesMaterialParamOrbitVelocity ParticlesMaterialParameter = 2
	ParticlesMaterialParamLinearAccel ParticlesMaterialParameter = 3
	ParticlesMaterialParamRadialAccel ParticlesMaterialParameter = 4
	ParticlesMaterialParamTangentialAccel ParticlesMaterialParameter = 5
	ParticlesMaterialParamDamping ParticlesMaterialParameter = 6
	ParticlesMaterialParamAngle ParticlesMaterialParameter = 7
	ParticlesMaterialParamScale ParticlesMaterialParameter = 8
	ParticlesMaterialParamHueVariation ParticlesMaterialParameter = 9
	ParticlesMaterialParamAnimSpeed ParticlesMaterialParameter = 10
	ParticlesMaterialParamAnimOffset ParticlesMaterialParameter = 11
	ParticlesMaterialParamMax ParticlesMaterialParameter = 15
	ParticlesMaterialParamTurbVelInfluence ParticlesMaterialParameter = 13
	ParticlesMaterialParamTurbInitDisplacement ParticlesMaterialParameter = 14
	ParticlesMaterialParamTurbInfluenceOverLife ParticlesMaterialParameter = 12
)

type ParticlesMaterialParticleFlags int64

const (
	ParticlesMaterialParticleFlagAlignYToVelocity ParticlesMaterialParticleFlags = 0
	ParticlesMaterialParticleFlagRotateY ParticlesMaterialParticleFlags = 1
	ParticlesMaterialParticleFlagDisableZ ParticlesMaterialParticleFlags = 2
	ParticlesMaterialParticleFlagMax ParticlesMaterialParticleFlags = 3
)

type ParticlesMaterialEmissionShape int64

const (
	ParticlesMaterialEmissionShapePoint ParticlesMaterialEmissionShape = 0
	ParticlesMaterialEmissionShapeSphere ParticlesMaterialEmissionShape = 1
	ParticlesMaterialEmissionShapeSphereSurface ParticlesMaterialEmissionShape = 2
	ParticlesMaterialEmissionShapeBox ParticlesMaterialEmissionShape = 3
	ParticlesMaterialEmissionShapePoints ParticlesMaterialEmissionShape = 4
	ParticlesMaterialEmissionShapeDirectedPoints ParticlesMaterialEmissionShape = 5
	ParticlesMaterialEmissionShapeRing ParticlesMaterialEmissionShape = 6
	ParticlesMaterialEmissionShapeMax ParticlesMaterialEmissionShape = 7
)

type ParticlesMaterialSubEmitterMode int64

const (
	ParticlesMaterialSubEmitterDisabled ParticlesMaterialSubEmitterMode = 0
	ParticlesMaterialSubEmitterConstant ParticlesMaterialSubEmitterMode = 1
	ParticlesMaterialSubEmitterAtEnd ParticlesMaterialSubEmitterMode = 2
	ParticlesMaterialSubEmitterAtCollision ParticlesMaterialSubEmitterMode = 3
	ParticlesMaterialSubEmitterMax ParticlesMaterialSubEmitterMode = 4
)
func (gdClass ParticlesMaterial) SetDirection(degrees Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[0], degrees) }
func (gdClass ParticlesMaterial) GetDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[1]) }
func (gdClass ParticlesMaterial) SetSpread(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[2], degrees) }
func (gdClass ParticlesMaterial) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[3]) }
func (gdClass ParticlesMaterial) SetFlatness(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[4], amount) }
func (gdClass ParticlesMaterial) GetFlatness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[5]) }
func (gdClass ParticlesMaterial) SetParamMin(param ParticlesMaterialParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[6], param, value) }
func (gdClass ParticlesMaterial) GetParamMin(param ParticlesMaterialParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[7], param) }
func (gdClass ParticlesMaterial) SetParamMax(param ParticlesMaterialParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[8], param, value) }
func (gdClass ParticlesMaterial) GetParamMax(param ParticlesMaterialParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[9], param) }
func (gdClass ParticlesMaterial) SetParamTexture(param ParticlesMaterialParameter, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[10], param, texture) }
func (gdClass ParticlesMaterial) GetParamTexture(param ParticlesMaterialParameter) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[11], param) }
func (gdClass ParticlesMaterial) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[12], color) }
func (gdClass ParticlesMaterial) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodParticlesMaterial[13]) }
func (gdClass ParticlesMaterial) SetColorRamp(ramp Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[14], ramp) }
func (gdClass ParticlesMaterial) GetColorRamp() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[15]) }
func (gdClass ParticlesMaterial) SetColorInitialRamp(ramp Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[16], ramp) }
func (gdClass ParticlesMaterial) GetColorInitialRamp() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[17]) }
func (gdClass ParticlesMaterial) SetParticleFlag(particle_flag ParticlesMaterialParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[18], particle_flag, enable) }
func (gdClass ParticlesMaterial) GetParticleFlag(particle_flag ParticlesMaterialParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[19], particle_flag) }
func (gdClass ParticlesMaterial) SetEmissionShape(shape ParticlesMaterialEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[20], shape) }
func (gdClass ParticlesMaterial) GetEmissionShape() ParticlesMaterialEmissionShape { return gdnative.Return[ParticlesMaterialEmissionShape](gdnative.Object(gdClass), methodParticlesMaterial[21]) }
func (gdClass ParticlesMaterial) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[22], radius) }
func (gdClass ParticlesMaterial) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[23]) }
func (gdClass ParticlesMaterial) SetEmissionBoxExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[24], extents) }
func (gdClass ParticlesMaterial) GetEmissionBoxExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[25]) }
func (gdClass ParticlesMaterial) SetEmissionPointTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[26], texture) }
func (gdClass ParticlesMaterial) GetEmissionPointTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[27]) }
func (gdClass ParticlesMaterial) SetEmissionNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[28], texture) }
func (gdClass ParticlesMaterial) GetEmissionNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[29]) }
func (gdClass ParticlesMaterial) SetEmissionColorTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[30], texture) }
func (gdClass ParticlesMaterial) GetEmissionColorTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[31]) }
func (gdClass ParticlesMaterial) SetEmissionPointCount(point_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[32], point_count) }
func (gdClass ParticlesMaterial) GetEmissionPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodParticlesMaterial[33]) }
func (gdClass ParticlesMaterial) SetEmissionRingAxis(axis Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[34], axis) }
func (gdClass ParticlesMaterial) GetEmissionRingAxis() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[35]) }
func (gdClass ParticlesMaterial) SetEmissionRingHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[36], height) }
func (gdClass ParticlesMaterial) GetEmissionRingHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[37]) }
func (gdClass ParticlesMaterial) SetEmissionRingRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[38], radius) }
func (gdClass ParticlesMaterial) GetEmissionRingRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[39]) }
func (gdClass ParticlesMaterial) SetEmissionRingInnerRadius(inner_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[40], inner_radius) }
func (gdClass ParticlesMaterial) GetEmissionRingInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[41]) }
func (gdClass ParticlesMaterial) GetTurbulenceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[42]) }
func (gdClass ParticlesMaterial) SetTurbulenceEnabled(turbulence_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[43], turbulence_enabled) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[44]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[45], turbulence_noise_strength) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[46]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[47], turbulence_noise_scale) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseSpeedRandom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[48]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[49], turbulence_noise_speed_random) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseSpeed() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[50]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[51], turbulence_noise_speed) }
func (gdClass ParticlesMaterial) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[52]) }
func (gdClass ParticlesMaterial) SetGravity(accel_vec Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[53], accel_vec) }
func (gdClass ParticlesMaterial) SetLifetimeRandomness(randomness float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[54], randomness) }
func (gdClass ParticlesMaterial) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[55]) }
func (gdClass ParticlesMaterial) GetSubEmitterMode() ParticlesMaterialSubEmitterMode { return gdnative.Return[ParticlesMaterialSubEmitterMode](gdnative.Object(gdClass), methodParticlesMaterial[56]) }
func (gdClass ParticlesMaterial) SetSubEmitterMode(mode ParticlesMaterialSubEmitterMode)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[57], mode) }
func (gdClass ParticlesMaterial) GetSubEmitterFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[58]) }
func (gdClass ParticlesMaterial) SetSubEmitterFrequency(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[59], hz) }
func (gdClass ParticlesMaterial) GetSubEmitterAmountAtEnd() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodParticlesMaterial[60]) }
func (gdClass ParticlesMaterial) SetSubEmitterAmountAtEnd(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[61], amount) }
func (gdClass ParticlesMaterial) GetSubEmitterKeepVelocity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[62]) }
func (gdClass ParticlesMaterial) SetSubEmitterKeepVelocity(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[63], enable) }
func (gdClass ParticlesMaterial) SetAttractorInteractionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[64], enabled) }
func (gdClass ParticlesMaterial) IsAttractorInteractionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[65]) }
func (gdClass ParticlesMaterial) SetCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[66], enabled) }
func (gdClass ParticlesMaterial) IsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[67]) }
func (gdClass ParticlesMaterial) SetCollisionUseScale(radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[68], radius) }
func (gdClass ParticlesMaterial) IsCollisionUsingScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[69]) }
func (gdClass ParticlesMaterial) SetCollisionFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[70], friction) }
func (gdClass ParticlesMaterial) GetCollisionFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[71]) }
func (gdClass ParticlesMaterial) SetCollisionBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[72], bounce) }
func (gdClass ParticlesMaterial) GetCollisionBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[73]) }

type Path2D gdnative.Object

var methodPath2D [2]gdnative.Method
func (gdClass Path2D) SetCurve(curve Curve2D)  { gdnative.Call(gdnative.Object(gdClass), methodPath2D[0], curve) }
func (gdClass Path2D) GetCurve() Curve2D { return gdnative.Return[Curve2D](gdnative.Object(gdClass), methodPath2D[1]) }

type Path3D gdnative.Object

var methodPath3D [2]gdnative.Method
func (gdClass Path3D) SetCurve(curve Curve3D)  { gdnative.Call(gdnative.Object(gdClass), methodPath3D[0], curve) }
func (gdClass Path3D) GetCurve() Curve3D { return gdnative.Return[Curve3D](gdnative.Object(gdClass), methodPath3D[1]) }

type PathFollow2D gdnative.Object

var methodPathFollow2D [16]gdnative.Method
func (gdClass PathFollow2D) SetOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[0], offset) }
func (gdClass PathFollow2D) GetOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[1]) }
func (gdClass PathFollow2D) SetHOffset(h_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[2], h_offset) }
func (gdClass PathFollow2D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[3]) }
func (gdClass PathFollow2D) SetVOffset(v_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[4], v_offset) }
func (gdClass PathFollow2D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[5]) }
func (gdClass PathFollow2D) SetUnitOffset(unit_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[6], unit_offset) }
func (gdClass PathFollow2D) GetUnitOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[7]) }
func (gdClass PathFollow2D) SetRotates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[8], enable) }
func (gdClass PathFollow2D) IsRotating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[9]) }
func (gdClass PathFollow2D) SetCubicInterpolation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[10], enable) }
func (gdClass PathFollow2D) GetCubicInterpolation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[11]) }
func (gdClass PathFollow2D) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[12], loop) }
func (gdClass PathFollow2D) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[13]) }
func (gdClass PathFollow2D) SetLookahead(lookahead float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[14], lookahead) }
func (gdClass PathFollow2D) GetLookahead() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[15]) }

type PathFollow3D gdnative.Object

var methodPathFollow3D [14]gdnative.Method

type PathFollow3DRotationMode int64

const (
	PathFollow3DRotationNone PathFollow3DRotationMode = 0
	PathFollow3DRotationY PathFollow3DRotationMode = 1
	PathFollow3DRotationXy PathFollow3DRotationMode = 2
	PathFollow3DRotationXyz PathFollow3DRotationMode = 3
	PathFollow3DRotationOriented PathFollow3DRotationMode = 4
)
func (gdClass PathFollow3D) SetOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[0], offset) }
func (gdClass PathFollow3D) GetOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[1]) }
func (gdClass PathFollow3D) SetHOffset(h_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[2], h_offset) }
func (gdClass PathFollow3D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[3]) }
func (gdClass PathFollow3D) SetVOffset(v_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[4], v_offset) }
func (gdClass PathFollow3D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[5]) }
func (gdClass PathFollow3D) SetUnitOffset(unit_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[6], unit_offset) }
func (gdClass PathFollow3D) GetUnitOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[7]) }
func (gdClass PathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[8], rotation_mode) }
func (gdClass PathFollow3D) GetRotationMode() PathFollow3DRotationMode { return gdnative.Return[PathFollow3DRotationMode](gdnative.Object(gdClass), methodPathFollow3D[9]) }
func (gdClass PathFollow3D) SetCubicInterpolation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[10], enable) }
func (gdClass PathFollow3D) GetCubicInterpolation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow3D[11]) }
func (gdClass PathFollow3D) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[12], loop) }
func (gdClass PathFollow3D) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow3D[13]) }

type Performance gdnative.Object

var methodPerformance [7]gdnative.Method

type PerformanceMonitor int64

const (
	PerformanceTimeFps PerformanceMonitor = 0
	PerformanceTimeProcess PerformanceMonitor = 1
	PerformanceTimePhysicsProcess PerformanceMonitor = 2
	PerformanceMemoryStatic PerformanceMonitor = 3
	PerformanceMemoryStaticMax PerformanceMonitor = 4
	PerformanceMemoryMessageBufferMax PerformanceMonitor = 5
	PerformanceObjectCount PerformanceMonitor = 6
	PerformanceObjectResourceCount PerformanceMonitor = 7
	PerformanceObjectNodeCount PerformanceMonitor = 8
	PerformanceObjectOrphanNodeCount PerformanceMonitor = 9
	PerformanceRenderTotalObjectsInFrame PerformanceMonitor = 10
	PerformanceRenderTotalPrimitivesInFrame PerformanceMonitor = 11
	PerformanceRenderTotalDrawCallsInFrame PerformanceMonitor = 12
	PerformanceRenderVideoMemUsed PerformanceMonitor = 13
	PerformanceRenderTextureMemUsed PerformanceMonitor = 14
	PerformanceRenderBufferMemUsed PerformanceMonitor = 15
	PerformancePhysics2dActiveObjects PerformanceMonitor = 16
	PerformancePhysics2dCollisionPairs PerformanceMonitor = 17
	PerformancePhysics2dIslandCount PerformanceMonitor = 18
	PerformancePhysics3dActiveObjects PerformanceMonitor = 19
	PerformancePhysics3dCollisionPairs PerformanceMonitor = 20
	PerformancePhysics3dIslandCount PerformanceMonitor = 21
	PerformanceAudioOutputLatency PerformanceMonitor = 22
	PerformanceMonitorMax PerformanceMonitor = 23
)
func (gdClass Performance) GetMonitor(monitor PerformanceMonitor) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPerformance[0], monitor) }
func (gdClass Performance) AddCustomMonitor(id string, callable Callable, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodPerformance[1], id, callable, arguments) }
func (gdClass Performance) RemoveCustomMonitor(id string)  { gdnative.Call(gdnative.Object(gdClass), methodPerformance[2], id) }
func (gdClass Performance) HasCustomMonitor(id string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPerformance[3], id) }
func (gdClass Performance) GetCustomMonitor(id string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPerformance[4], id) }
func (gdClass Performance) GetMonitorModificationTime() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPerformance[5]) }
func (gdClass Performance) GetCustomMonitorNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPerformance[6]) }

type PhysicalBone2D gdnative.Object

var methodPhysicalBone2D [12]gdnative.Method
func (gdClass PhysicalBone2D) GetJoint() Joint2D { return gdnative.Return[Joint2D](gdnative.Object(gdClass), methodPhysicalBone2D[0]) }
func (gdClass PhysicalBone2D) GetAutoConfigureJoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[1]) }
func (gdClass PhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[2], auto_configure_joint) }
func (gdClass PhysicalBone2D) SetSimulatePhysics(simulate_physics bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[3], simulate_physics) }
func (gdClass PhysicalBone2D) GetSimulatePhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[4]) }
func (gdClass PhysicalBone2D) IsSimulatingPhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[5]) }
func (gdClass PhysicalBone2D) SetBone2dNodepath(nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[6], nodepath) }
func (gdClass PhysicalBone2D) GetBone2dNodepath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPhysicalBone2D[7]) }
func (gdClass PhysicalBone2D) SetBone2dIndex(bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[8], bone_index) }
func (gdClass PhysicalBone2D) GetBone2dIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicalBone2D[9]) }
func (gdClass PhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[10], follow_bone) }
func (gdClass PhysicalBone2D) GetFollowBoneWhenSimulating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[11]) }

type PhysicalBone3D gdnative.Object

var methodPhysicalBone3D [38]gdnative.Method

type PhysicalBone3DDampMode int64

const (
	PhysicalBone3DDampModeCombine PhysicalBone3DDampMode = 0
	PhysicalBone3DDampModeReplace PhysicalBone3DDampMode = 1
)

type PhysicalBone3DJointType int64

const (
	PhysicalBone3DJointTypeNone PhysicalBone3DJointType = 0
	PhysicalBone3DJointTypePin PhysicalBone3DJointType = 1
	PhysicalBone3DJointTypeCone PhysicalBone3DJointType = 2
	PhysicalBone3DJointTypeHinge PhysicalBone3DJointType = 3
	PhysicalBone3DJointTypeSlider PhysicalBone3DJointType = 4
	PhysicalBone3DJointType6dof PhysicalBone3DJointType = 5
)
func (gdClass PhysicalBone3D) IntegrateForcesImplementation(state PhysicsDirectBodyState3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[0], state) }
func (gdClass PhysicalBone3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[1], impulse) }
func (gdClass PhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[2], impulse, position) }
func (gdClass PhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[3], joint_type) }
func (gdClass PhysicalBone3D) GetJointType() PhysicalBone3DJointType { return gdnative.Return[PhysicalBone3DJointType](gdnative.Object(gdClass), methodPhysicalBone3D[4]) }
func (gdClass PhysicalBone3D) SetJointOffset(offset Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[5], offset) }
func (gdClass PhysicalBone3D) GetJointOffset() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicalBone3D[6]) }
func (gdClass PhysicalBone3D) SetJointRotation(euler Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[7], euler) }
func (gdClass PhysicalBone3D) GetJointRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[8]) }
func (gdClass PhysicalBone3D) SetBodyOffset(offset Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[9], offset) }
func (gdClass PhysicalBone3D) GetBodyOffset() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicalBone3D[10]) }
func (gdClass PhysicalBone3D) GetSimulatePhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[11]) }
func (gdClass PhysicalBone3D) IsSimulatingPhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[12]) }
func (gdClass PhysicalBone3D) GetBoneId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicalBone3D[13]) }
func (gdClass PhysicalBone3D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[14], mass) }
func (gdClass PhysicalBone3D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[15]) }
func (gdClass PhysicalBone3D) SetFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[16], friction) }
func (gdClass PhysicalBone3D) GetFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[17]) }
func (gdClass PhysicalBone3D) SetBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[18], bounce) }
func (gdClass PhysicalBone3D) GetBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[19]) }
func (gdClass PhysicalBone3D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[20], gravity_scale) }
func (gdClass PhysicalBone3D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[21]) }
func (gdClass PhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[22], linear_damp_mode) }
func (gdClass PhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode { return gdnative.Return[PhysicalBone3DDampMode](gdnative.Object(gdClass), methodPhysicalBone3D[23]) }
func (gdClass PhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[24], angular_damp_mode) }
func (gdClass PhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode { return gdnative.Return[PhysicalBone3DDampMode](gdnative.Object(gdClass), methodPhysicalBone3D[25]) }
func (gdClass PhysicalBone3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[26], linear_damp) }
func (gdClass PhysicalBone3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[27]) }
func (gdClass PhysicalBone3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[28], angular_damp) }
func (gdClass PhysicalBone3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[29]) }
func (gdClass PhysicalBone3D) SetLinearVelocity(linear_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[30], linear_velocity) }
func (gdClass PhysicalBone3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[31]) }
func (gdClass PhysicalBone3D) SetAngularVelocity(angular_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[32], angular_velocity) }
func (gdClass PhysicalBone3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[33]) }
func (gdClass PhysicalBone3D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[34], enable) }
func (gdClass PhysicalBone3D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[35]) }
func (gdClass PhysicalBone3D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[36], able_to_sleep) }
func (gdClass PhysicalBone3D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[37]) }

type PhysicalSkyMaterial gdnative.Object

var methodPhysicalSkyMaterial [22]gdnative.Method
func (gdClass PhysicalSkyMaterial) SetRayleighCoefficient(rayleigh float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[0], rayleigh) }
func (gdClass PhysicalSkyMaterial) GetRayleighCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[1]) }
func (gdClass PhysicalSkyMaterial) SetRayleighColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[2], color) }
func (gdClass PhysicalSkyMaterial) GetRayleighColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[3]) }
func (gdClass PhysicalSkyMaterial) SetMieCoefficient(mie float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[4], mie) }
func (gdClass PhysicalSkyMaterial) GetMieCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[5]) }
func (gdClass PhysicalSkyMaterial) SetMieEccentricity(eccentricity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[6], eccentricity) }
func (gdClass PhysicalSkyMaterial) GetMieEccentricity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[7]) }
func (gdClass PhysicalSkyMaterial) SetMieColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[8], color) }
func (gdClass PhysicalSkyMaterial) GetMieColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[9]) }
func (gdClass PhysicalSkyMaterial) SetTurbidity(turbidity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[10], turbidity) }
func (gdClass PhysicalSkyMaterial) GetTurbidity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[11]) }
func (gdClass PhysicalSkyMaterial) SetSunDiskScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[12], scale) }
func (gdClass PhysicalSkyMaterial) GetSunDiskScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[13]) }
func (gdClass PhysicalSkyMaterial) SetGroundColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[14], color) }
func (gdClass PhysicalSkyMaterial) GetGroundColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[15]) }
func (gdClass PhysicalSkyMaterial) SetExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[16], exposure) }
func (gdClass PhysicalSkyMaterial) GetExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[17]) }
func (gdClass PhysicalSkyMaterial) SetUseDebanding(use_debanding bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[18], use_debanding) }
func (gdClass PhysicalSkyMaterial) GetUseDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalSkyMaterial[19]) }
func (gdClass PhysicalSkyMaterial) SetNightSky(night_sky Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[20], night_sky) }
func (gdClass PhysicalSkyMaterial) GetNightSky() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPhysicalSkyMaterial[21]) }

type PhysicsBody2D gdnative.Object

var methodPhysicsBody2D [5]gdnative.Method
func (gdClass PhysicsBody2D) MoveAndCollide(distance Vector2, test_only bool, safe_margin float64) KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodPhysicsBody2D[0], distance, test_only, safe_margin) }
func (gdClass PhysicsBody2D) TestMove(from Transform2D, distance Vector2, collision KinematicCollision2D, safe_margin float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody2D[1], from, distance, collision, safe_margin) }
func (gdClass PhysicsBody2D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsBody2D[2]) }
func (gdClass PhysicsBody2D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody2D[3], body) }
func (gdClass PhysicsBody2D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody2D[4], body) }

type PhysicsBody3D gdnative.Object

var methodPhysicsBody3D [7]gdnative.Method
func (gdClass PhysicsBody3D) MoveAndCollide(distance Vector3, test_only bool, safe_margin float64, max_collisions int64) KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodPhysicsBody3D[0], distance, test_only, safe_margin, max_collisions) }
func (gdClass PhysicsBody3D) TestMove(from Transform3D, distance Vector3, collision KinematicCollision3D, safe_margin float64, max_collisions int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody3D[1], from, distance, collision, safe_margin, max_collisions) }
func (gdClass PhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[2], axis, lock) }
func (gdClass PhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody3D[3], axis) }
func (gdClass PhysicsBody3D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsBody3D[4]) }
func (gdClass PhysicsBody3D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[5], body) }
func (gdClass PhysicsBody3D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[6], body) }

type PhysicsDirectBodyState2D gdnative.Object

var methodPhysicsDirectBodyState2D [42]gdnative.Method
func (gdClass PhysicsDirectBodyState2D) GetTotalGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[0]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[1]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[2]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMass() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[3]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[4]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[5]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseInertia() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[6]) }
func (gdClass PhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[7], velocity) }
func (gdClass PhysicsDirectBodyState2D) GetLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[8]) }
func (gdClass PhysicsDirectBodyState2D) SetAngularVelocity(velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[9], velocity) }
func (gdClass PhysicsDirectBodyState2D) GetAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[10]) }
func (gdClass PhysicsDirectBodyState2D) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[11], transform) }
func (gdClass PhysicsDirectBodyState2D) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[12]) }
func (gdClass PhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[13], local_position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[14], impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[15], impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[16], impulse, position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[17], force) }
func (gdClass PhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[18], force, position) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[19], torque) }
func (gdClass PhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[20], force) }
func (gdClass PhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[21], force, position) }
func (gdClass PhysicsDirectBodyState2D) AddConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[22], torque) }
func (gdClass PhysicsDirectBodyState2D) SetConstantForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[23], force) }
func (gdClass PhysicsDirectBodyState2D) GetConstantForce() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[24]) }
func (gdClass PhysicsDirectBodyState2D) SetConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[25], torque) }
func (gdClass PhysicsDirectBodyState2D) GetConstantTorque() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[26]) }
func (gdClass PhysicsDirectBodyState2D) SetSleepState(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[27], enabled) }
func (gdClass PhysicsDirectBodyState2D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[28]) }
func (gdClass PhysicsDirectBodyState2D) GetContactCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[29]) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[30], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[31], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[32], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactCollider(contact_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[33], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[34], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderId(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[35], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderObject(contact_idx int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[36], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[37], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[38], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[39]) }
func (gdClass PhysicsDirectBodyState2D) IntegrateForces()  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[40]) }
func (gdClass PhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[41]) }

type PhysicsDirectBodyState3D gdnative.Object

var methodPhysicsDirectBodyState3D [44]gdnative.Method
func (gdClass PhysicsDirectBodyState3D) GetTotalGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[0]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[1]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[2]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMass() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[3]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[4]) }
func (gdClass PhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[5]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[6]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseInertia() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[7]) }
func (gdClass PhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[8], velocity) }
func (gdClass PhysicsDirectBodyState3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[9]) }
func (gdClass PhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[10], velocity) }
func (gdClass PhysicsDirectBodyState3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[11]) }
func (gdClass PhysicsDirectBodyState3D) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[12], transform) }
func (gdClass PhysicsDirectBodyState3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[13]) }
func (gdClass PhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[14], local_position) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[15], impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[16], impulse, position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[17], impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[18], force) }
func (gdClass PhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[19], force, position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[20], torque) }
func (gdClass PhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[21], force) }
func (gdClass PhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[22], force, position) }
func (gdClass PhysicsDirectBodyState3D) AddConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[23], torque) }
func (gdClass PhysicsDirectBodyState3D) SetConstantForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[24], force) }
func (gdClass PhysicsDirectBodyState3D) GetConstantForce() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[25]) }
func (gdClass PhysicsDirectBodyState3D) SetConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[26], torque) }
func (gdClass PhysicsDirectBodyState3D) GetConstantTorque() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[27]) }
func (gdClass PhysicsDirectBodyState3D) SetSleepState(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[28], enabled) }
func (gdClass PhysicsDirectBodyState3D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[29]) }
func (gdClass PhysicsDirectBodyState3D) GetContactCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[30]) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[31], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[32], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactImpulse(contact_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[33], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[34], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactCollider(contact_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[35], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[36], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderId(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[37], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderObject(contact_idx int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[38], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[39], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[40], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[41]) }
func (gdClass PhysicsDirectBodyState3D) IntegrateForces()  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[42]) }
func (gdClass PhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[43]) }

type PhysicsDirectBodyState3DExtension gdnative.Object

var methodPhysicsDirectBodyState3DExtension [44]gdnative.Method
func (gdClass PhysicsDirectBodyState3DExtension) GetTotalGravityImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[0]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetTotalLinearDampImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[1]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetTotalAngularDampImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[2]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetCenterOfMassImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[3]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetCenterOfMassLocalImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[4]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetPrincipalInertiaAxesImplementation() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[5]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetInverseMassImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[6]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetInverseInertiaImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[7]) }
func (gdClass PhysicsDirectBodyState3DExtension) SetLinearVelocityImplementation(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[8], velocity) }
func (gdClass PhysicsDirectBodyState3DExtension) GetLinearVelocityImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[9]) }
func (gdClass PhysicsDirectBodyState3DExtension) SetAngularVelocityImplementation(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[10], velocity) }
func (gdClass PhysicsDirectBodyState3DExtension) GetAngularVelocityImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[11]) }
func (gdClass PhysicsDirectBodyState3DExtension) SetTransformImplementation(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[12], transform) }
func (gdClass PhysicsDirectBodyState3DExtension) GetTransformImplementation() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[13]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetVelocityAtLocalPositionImplementation(local_position Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[14], local_position) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyCentralImpulseImplementation(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[15], impulse) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyImpulseImplementation(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[16], impulse, position) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyTorqueImpulseImplementation(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[17], impulse) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyCentralForceImplementation(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[18], force) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyForceImplementation(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[19], force, position) }
func (gdClass PhysicsDirectBodyState3DExtension) ApplyTorqueImplementation(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[20], torque) }
func (gdClass PhysicsDirectBodyState3DExtension) AddConstantCentralForceImplementation(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[21], force) }
func (gdClass PhysicsDirectBodyState3DExtension) AddConstantForceImplementation(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[22], force, position) }
func (gdClass PhysicsDirectBodyState3DExtension) AddConstantTorqueImplementation(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[23], torque) }
func (gdClass PhysicsDirectBodyState3DExtension) SetConstantForceImplementation(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[24], force) }
func (gdClass PhysicsDirectBodyState3DExtension) GetConstantForceImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[25]) }
func (gdClass PhysicsDirectBodyState3DExtension) SetConstantTorqueImplementation(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[26], torque) }
func (gdClass PhysicsDirectBodyState3DExtension) GetConstantTorqueImplementation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[27]) }
func (gdClass PhysicsDirectBodyState3DExtension) SetSleepStateImplementation(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[28], enabled) }
func (gdClass PhysicsDirectBodyState3DExtension) IsSleepingImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[29]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[30]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactLocalPositionImplementation(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[31], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactLocalNormalImplementation(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[32], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactImpulseImplementation(contact_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[33], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactLocalShapeImplementation(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[34], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderImplementation(contact_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[35], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderPositionImplementation(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[36], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderIdImplementation(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[37], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderObjectImplementation(contact_idx int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[38], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderShapeImplementation(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[39], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetContactColliderVelocityAtPositionImplementation(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[40], contact_idx) }
func (gdClass PhysicsDirectBodyState3DExtension) GetStepImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[41]) }
func (gdClass PhysicsDirectBodyState3DExtension) IntegrateForcesImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[42]) }
func (gdClass PhysicsDirectBodyState3DExtension) GetSpaceStateImplementation() PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3DExtension[43]) }

type PhysicsDirectSpaceState2D gdnative.Object

var methodPhysicsDirectSpaceState2D [6]gdnative.Method
func (gdClass PhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[0], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[1], parameters) }
func (gdClass PhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[2], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[3], parameters) }
func (gdClass PhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[4], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[5], parameters) }

type PhysicsDirectSpaceState3D gdnative.Object

var methodPhysicsDirectSpaceState3D [6]gdnative.Method
func (gdClass PhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[0], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[1], parameters) }
func (gdClass PhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[2], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[3], parameters) }
func (gdClass PhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[4], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[5], parameters) }

type PhysicsDirectSpaceState3DExtension gdnative.Object

var methodPhysicsDirectSpaceState3DExtension [7]gdnative.Method
func (gdClass PhysicsDirectSpaceState3DExtension) IntersectRayImplementation(from Vector3, to Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, hit_from_inside bool, hit_back_faces bool, result *PhysicsServer3DExtensionRayResult) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[0], from, to, collision_mask, collide_with_bodies, collide_with_areas, hit_from_inside, hit_back_faces, result) }
func (gdClass PhysicsDirectSpaceState3DExtension) IntersectPointImplementation(position Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results *PhysicsServer3DExtensionShapeResult, max_results int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[1], position, collision_mask, collide_with_bodies, collide_with_areas, results, max_results) }
func (gdClass PhysicsDirectSpaceState3DExtension) IntersectShapeImplementation(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, result_count *PhysicsServer3DExtensionShapeResult, max_results int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[2], shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, result_count, max_results) }
func (gdClass PhysicsDirectSpaceState3DExtension) CastMotionImplementation(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, closest_safe *float64, closest_unsafe *float64, info *PhysicsServer3DExtensionShapeRestInfo) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[3], shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, closest_safe, closest_unsafe, info) }
func (gdClass PhysicsDirectSpaceState3DExtension) CollideShapeImplementation(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results []byte, max_results int64, result_count *int32) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[4], shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, results, max_results, result_count) }
func (gdClass PhysicsDirectSpaceState3DExtension) RestInfoImplementation(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, rest_info *PhysicsServer3DExtensionShapeRestInfo) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[5], shape_rid, transform, motion, margin, collision_mask, collide_with_bodies, collide_with_areas, rest_info) }
func (gdClass PhysicsDirectSpaceState3DExtension) GetClosestPointToObjectVolumeImplementation(object RID, point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3DExtension[6], object, point) }

type PhysicsMaterial gdnative.Object

var methodPhysicsMaterial [8]gdnative.Method
func (gdClass PhysicsMaterial) SetFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[0], friction) }
func (gdClass PhysicsMaterial) GetFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsMaterial[1]) }
func (gdClass PhysicsMaterial) SetRough(rough bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[2], rough) }
func (gdClass PhysicsMaterial) IsRough() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsMaterial[3]) }
func (gdClass PhysicsMaterial) SetBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[4], bounce) }
func (gdClass PhysicsMaterial) GetBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsMaterial[5]) }
func (gdClass PhysicsMaterial) SetAbsorbent(absorbent bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[6], absorbent) }
func (gdClass PhysicsMaterial) IsAbsorbent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsMaterial[7]) }

type PhysicsPointQueryParameters2D gdnative.Object

var methodPhysicsPointQueryParameters2D [12]gdnative.Method
func (gdClass PhysicsPointQueryParameters2D) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[0], position) }
func (gdClass PhysicsPointQueryParameters2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[1]) }
func (gdClass PhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[2], canvas_instance_id) }
func (gdClass PhysicsPointQueryParameters2D) GetCanvasInstanceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[3]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[4], collision_mask) }
func (gdClass PhysicsPointQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[5]) }
func (gdClass PhysicsPointQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[6], exclude) }
func (gdClass PhysicsPointQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[7]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[8], enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[9]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[10], enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[11]) }

type PhysicsPointQueryParameters3D gdnative.Object

var methodPhysicsPointQueryParameters3D [10]gdnative.Method
func (gdClass PhysicsPointQueryParameters3D) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[0], position) }
func (gdClass PhysicsPointQueryParameters3D) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[1]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[2], collision_mask) }
func (gdClass PhysicsPointQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[3]) }
func (gdClass PhysicsPointQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[4], exclude) }
func (gdClass PhysicsPointQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[5]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[6], enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[7]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[8], enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[9]) }

type PhysicsRayQueryParameters2D gdnative.Object

var methodPhysicsRayQueryParameters2D [15]gdnative.Method
func (gdClass PhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask int64, exclude Array) PhysicsRayQueryParameters2D { return gdnative.Return[PhysicsRayQueryParameters2D](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[0], from, to, collision_mask, exclude) }
func (gdClass PhysicsRayQueryParameters2D) SetFrom(from Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[1], from) }
func (gdClass PhysicsRayQueryParameters2D) GetFrom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[2]) }
func (gdClass PhysicsRayQueryParameters2D) SetTo(to Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[3], to) }
func (gdClass PhysicsRayQueryParameters2D) GetTo() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[4]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[5], collision_mask) }
func (gdClass PhysicsRayQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[6]) }
func (gdClass PhysicsRayQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[7], exclude) }
func (gdClass PhysicsRayQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[8]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[9], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[10]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[11], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[12]) }
func (gdClass PhysicsRayQueryParameters2D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[13], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[14]) }

type PhysicsRayQueryParameters3D gdnative.Object

var methodPhysicsRayQueryParameters3D [17]gdnative.Method
func (gdClass PhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask int64, exclude Array) PhysicsRayQueryParameters3D { return gdnative.Return[PhysicsRayQueryParameters3D](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[0], from, to, collision_mask, exclude) }
func (gdClass PhysicsRayQueryParameters3D) SetFrom(from Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[1], from) }
func (gdClass PhysicsRayQueryParameters3D) GetFrom() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[2]) }
func (gdClass PhysicsRayQueryParameters3D) SetTo(to Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[3], to) }
func (gdClass PhysicsRayQueryParameters3D) GetTo() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[4]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[5], collision_mask) }
func (gdClass PhysicsRayQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[6]) }
func (gdClass PhysicsRayQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[7], exclude) }
func (gdClass PhysicsRayQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[8]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[9], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[10]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[11], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[12]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[13], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[14]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitBackFaces(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[15], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[16]) }

type PhysicsServer2D gdnative.Object

var methodPhysicsServer2D [108]gdnative.Method

type PhysicsServer2DSpaceParameter int64

const (
	PhysicsServer2DSpaceParamContactRecycleRadius PhysicsServer2DSpaceParameter = 0
	PhysicsServer2DSpaceParamContactMaxSeparation PhysicsServer2DSpaceParameter = 1
	PhysicsServer2DSpaceParamContactMaxAllowedPenetration PhysicsServer2DSpaceParameter = 2
	PhysicsServer2DSpaceParamContactDefaultBias PhysicsServer2DSpaceParameter = 3
	PhysicsServer2DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer2DSpaceParameter = 4
	PhysicsServer2DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer2DSpaceParameter = 5
	PhysicsServer2DSpaceParamBodyTimeToSleep PhysicsServer2DSpaceParameter = 6
	PhysicsServer2DSpaceParamConstraintDefaultBias PhysicsServer2DSpaceParameter = 7
	PhysicsServer2DSpaceParamSolverIterations PhysicsServer2DSpaceParameter = 8
)

type PhysicsServer2DShapeType int64

const (
	PhysicsServer2DShapeWorldBoundary PhysicsServer2DShapeType = 0
	PhysicsServer2DShapeSeparationRay PhysicsServer2DShapeType = 1
	PhysicsServer2DShapeSegment PhysicsServer2DShapeType = 2
	PhysicsServer2DShapeCircle PhysicsServer2DShapeType = 3
	PhysicsServer2DShapeRectangle PhysicsServer2DShapeType = 4
	PhysicsServer2DShapeCapsule PhysicsServer2DShapeType = 5
	PhysicsServer2DShapeConvexPolygon PhysicsServer2DShapeType = 6
	PhysicsServer2DShapeConcavePolygon PhysicsServer2DShapeType = 7
	PhysicsServer2DShapeCustom PhysicsServer2DShapeType = 8
)

type PhysicsServer2DAreaParameter int64

const (
	PhysicsServer2DAreaParamGravityOverrideMode PhysicsServer2DAreaParameter = 0
	PhysicsServer2DAreaParamGravity PhysicsServer2DAreaParameter = 1
	PhysicsServer2DAreaParamGravityVector PhysicsServer2DAreaParameter = 2
	PhysicsServer2DAreaParamGravityIsPoint PhysicsServer2DAreaParameter = 3
	PhysicsServer2DAreaParamGravityDistanceScale PhysicsServer2DAreaParameter = 4
	PhysicsServer2DAreaParamGravityPointAttenuation PhysicsServer2DAreaParameter = 5
	PhysicsServer2DAreaParamLinearDampOverrideMode PhysicsServer2DAreaParameter = 6
	PhysicsServer2DAreaParamLinearDamp PhysicsServer2DAreaParameter = 7
	PhysicsServer2DAreaParamAngularDampOverrideMode PhysicsServer2DAreaParameter = 8
	PhysicsServer2DAreaParamAngularDamp PhysicsServer2DAreaParameter = 9
	PhysicsServer2DAreaParamPriority PhysicsServer2DAreaParameter = 10
)

type PhysicsServer2DAreaSpaceOverrideMode int64

const (
	PhysicsServer2DAreaSpaceOverrideDisabled PhysicsServer2DAreaSpaceOverrideMode = 0
	PhysicsServer2DAreaSpaceOverrideCombine PhysicsServer2DAreaSpaceOverrideMode = 1
	PhysicsServer2DAreaSpaceOverrideCombineReplace PhysicsServer2DAreaSpaceOverrideMode = 2
	PhysicsServer2DAreaSpaceOverrideReplace PhysicsServer2DAreaSpaceOverrideMode = 3
	PhysicsServer2DAreaSpaceOverrideReplaceCombine PhysicsServer2DAreaSpaceOverrideMode = 4
)

type PhysicsServer2DBodyMode int64

const (
	PhysicsServer2DBodyModeStatic PhysicsServer2DBodyMode = 0
	PhysicsServer2DBodyModeKinematic PhysicsServer2DBodyMode = 1
	PhysicsServer2DBodyModeDynamic PhysicsServer2DBodyMode = 2
	PhysicsServer2DBodyModeDynamicLinear PhysicsServer2DBodyMode = 3
)

type PhysicsServer2DBodyParameter int64

const (
	PhysicsServer2DBodyParamBounce PhysicsServer2DBodyParameter = 0
	PhysicsServer2DBodyParamFriction PhysicsServer2DBodyParameter = 1
	PhysicsServer2DBodyParamMass PhysicsServer2DBodyParameter = 2
	PhysicsServer2DBodyParamInertia PhysicsServer2DBodyParameter = 3
	PhysicsServer2DBodyParamCenterOfMass PhysicsServer2DBodyParameter = 4
	PhysicsServer2DBodyParamGravityScale PhysicsServer2DBodyParameter = 5
	PhysicsServer2DBodyParamLinearDampMode PhysicsServer2DBodyParameter = 6
	PhysicsServer2DBodyParamAngularDampMode PhysicsServer2DBodyParameter = 7
	PhysicsServer2DBodyParamLinearDamp PhysicsServer2DBodyParameter = 8
	PhysicsServer2DBodyParamAngularDamp PhysicsServer2DBodyParameter = 9
	PhysicsServer2DBodyParamMax PhysicsServer2DBodyParameter = 10
)

type PhysicsServer2DBodyDampMode int64

const (
	PhysicsServer2DBodyDampModeCombine PhysicsServer2DBodyDampMode = 0
	PhysicsServer2DBodyDampModeReplace PhysicsServer2DBodyDampMode = 1
)

type PhysicsServer2DBodyState int64

const (
	PhysicsServer2DBodyStateTransform PhysicsServer2DBodyState = 0
	PhysicsServer2DBodyStateLinearVelocity PhysicsServer2DBodyState = 1
	PhysicsServer2DBodyStateAngularVelocity PhysicsServer2DBodyState = 2
	PhysicsServer2DBodyStateSleeping PhysicsServer2DBodyState = 3
	PhysicsServer2DBodyStateCanSleep PhysicsServer2DBodyState = 4
)

type PhysicsServer2DJointType int64

const (
	PhysicsServer2DJointTypePin PhysicsServer2DJointType = 0
	PhysicsServer2DJointTypeGroove PhysicsServer2DJointType = 1
	PhysicsServer2DJointTypeDampedSpring PhysicsServer2DJointType = 2
	PhysicsServer2DJointTypeMax PhysicsServer2DJointType = 3
)

type PhysicsServer2DJointParam int64

const (
	PhysicsServer2DJointParamBias PhysicsServer2DJointParam = 0
	PhysicsServer2DJointParamMaxBias PhysicsServer2DJointParam = 1
	PhysicsServer2DJointParamMaxForce PhysicsServer2DJointParam = 2
)

type PhysicsServer2DDampedSpringParam int64

const (
	PhysicsServer2DDampedSpringRestLength PhysicsServer2DDampedSpringParam = 0
	PhysicsServer2DDampedSpringStiffness PhysicsServer2DDampedSpringParam = 1
	PhysicsServer2DDampedSpringDamping PhysicsServer2DDampedSpringParam = 2
)

type PhysicsServer2DCCDMode int64

const (
	PhysicsServer2DCcdModeDisabled PhysicsServer2DCCDMode = 0
	PhysicsServer2DCcdModeCastRay PhysicsServer2DCCDMode = 1
	PhysicsServer2DCcdModeCastShape PhysicsServer2DCCDMode = 2
)

type PhysicsServer2DAreaBodyStatus int64

const (
	PhysicsServer2DAreaBodyAdded PhysicsServer2DAreaBodyStatus = 0
	PhysicsServer2DAreaBodyRemoved PhysicsServer2DAreaBodyStatus = 1
)

type PhysicsServer2DProcessInfo int64

const (
	PhysicsServer2DInfoActiveObjects PhysicsServer2DProcessInfo = 0
	PhysicsServer2DInfoCollisionPairs PhysicsServer2DProcessInfo = 1
	PhysicsServer2DInfoIslandCount PhysicsServer2DProcessInfo = 2
)
func (gdClass PhysicsServer2D) WorldBoundaryShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[0]) }
func (gdClass PhysicsServer2D) SeparationRayShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[1]) }
func (gdClass PhysicsServer2D) SegmentShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[2]) }
func (gdClass PhysicsServer2D) CircleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[3]) }
func (gdClass PhysicsServer2D) RectangleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[4]) }
func (gdClass PhysicsServer2D) CapsuleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[5]) }
func (gdClass PhysicsServer2D) ConvexPolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[6]) }
func (gdClass PhysicsServer2D) ConcavePolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[7]) }
func (gdClass PhysicsServer2D) ShapeSetData(shape RID, data any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[8], shape, data) }
func (gdClass PhysicsServer2D) ShapeGetType(shape RID) PhysicsServer2DShapeType { return gdnative.Return[PhysicsServer2DShapeType](gdnative.Object(gdClass), methodPhysicsServer2D[9], shape) }
func (gdClass PhysicsServer2D) ShapeGetData(shape RID) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[10], shape) }
func (gdClass PhysicsServer2D) SpaceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[11]) }
func (gdClass PhysicsServer2D) SpaceSetActive(space RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[12], space, active) }
func (gdClass PhysicsServer2D) SpaceIsActive(space RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[13], space) }
func (gdClass PhysicsServer2D) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[14], space, param, value) }
func (gdClass PhysicsServer2D) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[15], space, param) }
func (gdClass PhysicsServer2D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodPhysicsServer2D[16], space) }
func (gdClass PhysicsServer2D) AreaCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[17]) }
func (gdClass PhysicsServer2D) AreaSetSpace(area RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[18], area, space) }
func (gdClass PhysicsServer2D) AreaGetSpace(area RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[19], area) }
func (gdClass PhysicsServer2D) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[20], area, shape, transform, disabled) }
func (gdClass PhysicsServer2D) AreaSetShape(area RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[21], area, shape_idx, shape) }
func (gdClass PhysicsServer2D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[22], area, shape_idx, transform) }
func (gdClass PhysicsServer2D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[23], area, shape_idx, disabled) }
func (gdClass PhysicsServer2D) AreaGetShapeCount(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[24], area) }
func (gdClass PhysicsServer2D) AreaGetShape(area RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[25], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaGetShapeTransform(area RID, shape_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[26], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaRemoveShape(area RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[27], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaClearShapes(area RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[28], area) }
func (gdClass PhysicsServer2D) AreaSetCollisionLayer(area RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[29], area, layer) }
func (gdClass PhysicsServer2D) AreaSetCollisionMask(area RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[30], area, mask) }
func (gdClass PhysicsServer2D) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[31], area, param, value) }
func (gdClass PhysicsServer2D) AreaSetTransform(area RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[32], area, transform) }
func (gdClass PhysicsServer2D) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[33], area, param) }
func (gdClass PhysicsServer2D) AreaGetTransform(area RID) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[34], area) }
func (gdClass PhysicsServer2D) AreaAttachObjectInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[35], area, id) }
func (gdClass PhysicsServer2D) AreaGetObjectInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[36], area) }
func (gdClass PhysicsServer2D) AreaAttachCanvasInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[37], area, id) }
func (gdClass PhysicsServer2D) AreaGetCanvasInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[38], area) }
func (gdClass PhysicsServer2D) AreaSetMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[39], area, callback) }
func (gdClass PhysicsServer2D) AreaSetAreaMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[40], area, callback) }
func (gdClass PhysicsServer2D) AreaSetMonitorable(area RID, monitorable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[41], area, monitorable) }
func (gdClass PhysicsServer2D) BodyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[42]) }
func (gdClass PhysicsServer2D) BodySetSpace(body RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[43], body, space) }
func (gdClass PhysicsServer2D) BodyGetSpace(body RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[44], body) }
func (gdClass PhysicsServer2D) BodySetMode(body RID, mode PhysicsServer2DBodyMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[45], body, mode) }
func (gdClass PhysicsServer2D) BodyGetMode(body RID) PhysicsServer2DBodyMode { return gdnative.Return[PhysicsServer2DBodyMode](gdnative.Object(gdClass), methodPhysicsServer2D[46], body) }
func (gdClass PhysicsServer2D) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[47], body, shape, transform, disabled) }
func (gdClass PhysicsServer2D) BodySetShape(body RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[48], body, shape_idx, shape) }
func (gdClass PhysicsServer2D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[49], body, shape_idx, transform) }
func (gdClass PhysicsServer2D) BodyGetShapeCount(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[50], body) }
func (gdClass PhysicsServer2D) BodyGetShape(body RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[51], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyGetShapeTransform(body RID, shape_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[52], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyRemoveShape(body RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[53], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyClearShapes(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[54], body) }
func (gdClass PhysicsServer2D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[55], body, shape_idx, disabled) }
func (gdClass PhysicsServer2D) BodySetShapeAsOneWayCollision(body RID, shape_idx int64, enable bool, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[56], body, shape_idx, enable, margin) }
func (gdClass PhysicsServer2D) BodyAttachObjectInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[57], body, id) }
func (gdClass PhysicsServer2D) BodyGetObjectInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[58], body) }
func (gdClass PhysicsServer2D) BodyAttachCanvasInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[59], body, id) }
func (gdClass PhysicsServer2D) BodyGetCanvasInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[60], body) }
func (gdClass PhysicsServer2D) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[61], body, mode) }
func (gdClass PhysicsServer2D) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode { return gdnative.Return[PhysicsServer2DCCDMode](gdnative.Object(gdClass), methodPhysicsServer2D[62], body) }
func (gdClass PhysicsServer2D) BodySetCollisionLayer(body RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[63], body, layer) }
func (gdClass PhysicsServer2D) BodyGetCollisionLayer(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[64], body) }
func (gdClass PhysicsServer2D) BodySetCollisionMask(body RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[65], body, mask) }
func (gdClass PhysicsServer2D) BodyGetCollisionMask(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[66], body) }
func (gdClass PhysicsServer2D) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[67], body, param, value) }
func (gdClass PhysicsServer2D) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[68], body, param) }
func (gdClass PhysicsServer2D) BodyResetMassProperties(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[69], body) }
func (gdClass PhysicsServer2D) BodySetState(body RID, state PhysicsServer2DBodyState, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[70], body, state, value) }
func (gdClass PhysicsServer2D) BodyGetState(body RID, state PhysicsServer2DBodyState) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[71], body, state) }
func (gdClass PhysicsServer2D) BodyApplyCentralImpulse(body RID, impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[72], body, impulse) }
func (gdClass PhysicsServer2D) BodyApplyTorqueImpulse(body RID, impulse float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[73], body, impulse) }
func (gdClass PhysicsServer2D) BodyApplyImpulse(body RID, impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[74], body, impulse, position) }
func (gdClass PhysicsServer2D) BodyApplyCentralForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[75], body, force) }
func (gdClass PhysicsServer2D) BodyApplyForce(body RID, force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[76], body, force, position) }
func (gdClass PhysicsServer2D) BodyApplyTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[77], body, torque) }
func (gdClass PhysicsServer2D) BodyAddConstantCentralForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[78], body, force) }
func (gdClass PhysicsServer2D) BodyAddConstantForce(body RID, force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[79], body, force, position) }
func (gdClass PhysicsServer2D) BodyAddConstantTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[80], body, torque) }
func (gdClass PhysicsServer2D) BodySetConstantForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[81], body, force) }
func (gdClass PhysicsServer2D) BodyGetConstantForce(body RID) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsServer2D[82], body) }
func (gdClass PhysicsServer2D) BodySetConstantTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[83], body, torque) }
func (gdClass PhysicsServer2D) BodyGetConstantTorque(body RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[84], body) }
func (gdClass PhysicsServer2D) BodySetAxisVelocity(body RID, axis_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[85], body, axis_velocity) }
func (gdClass PhysicsServer2D) BodyAddCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[86], body, excepted_body) }
func (gdClass PhysicsServer2D) BodyRemoveCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[87], body, excepted_body) }
func (gdClass PhysicsServer2D) BodySetMaxContactsReported(body RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[88], body, amount) }
func (gdClass PhysicsServer2D) BodyGetMaxContactsReported(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[89], body) }
func (gdClass PhysicsServer2D) BodySetOmitForceIntegration(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[90], body, enable) }
func (gdClass PhysicsServer2D) BodyIsOmittingForceIntegration(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[91], body) }
func (gdClass PhysicsServer2D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[92], body, callable, userdata) }
func (gdClass PhysicsServer2D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[93], body, parameters, result) }
func (gdClass PhysicsServer2D) BodyGetDirectState(body RID) PhysicsDirectBodyState2D { return gdnative.Return[PhysicsDirectBodyState2D](gdnative.Object(gdClass), methodPhysicsServer2D[94], body) }
func (gdClass PhysicsServer2D) JointCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[95]) }
func (gdClass PhysicsServer2D) JointClear(joint RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[96], joint) }
func (gdClass PhysicsServer2D) JointSetParam(joint RID, param PhysicsServer2DJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[97], joint, param, value) }
func (gdClass PhysicsServer2D) JointGetParam(joint RID, param PhysicsServer2DJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[98], joint, param) }
func (gdClass PhysicsServer2D) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[99], joint, anchor, body_a, body_b) }
func (gdClass PhysicsServer2D) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[100], joint, groove1_a, groove2_a, anchor_b, body_a, body_b) }
func (gdClass PhysicsServer2D) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[101], joint, anchor_a, anchor_b, body_a, body_b) }
func (gdClass PhysicsServer2D) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[102], joint, param, value) }
func (gdClass PhysicsServer2D) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[103], joint, param) }
func (gdClass PhysicsServer2D) JointGetType(joint RID) PhysicsServer2DJointType { return gdnative.Return[PhysicsServer2DJointType](gdnative.Object(gdClass), methodPhysicsServer2D[104], joint) }
func (gdClass PhysicsServer2D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[105], rid) }
func (gdClass PhysicsServer2D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[106], active) }
func (gdClass PhysicsServer2D) GetProcessInfo(process_info PhysicsServer2DProcessInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[107], process_info) }

type PhysicsServer3D gdnative.Object

var methodPhysicsServer3D [128]gdnative.Method

type PhysicsServer3DJointType int64

const (
	PhysicsServer3DJointTypePin PhysicsServer3DJointType = 0
	PhysicsServer3DJointTypeHinge PhysicsServer3DJointType = 1
	PhysicsServer3DJointTypeSlider PhysicsServer3DJointType = 2
	PhysicsServer3DJointTypeConeTwist PhysicsServer3DJointType = 3
	PhysicsServer3DJointType6dof PhysicsServer3DJointType = 4
	PhysicsServer3DJointTypeMax PhysicsServer3DJointType = 5
)

type PhysicsServer3DPinJointParam int64

const (
	PhysicsServer3DPinJointBias PhysicsServer3DPinJointParam = 0
	PhysicsServer3DPinJointDamping PhysicsServer3DPinJointParam = 1
	PhysicsServer3DPinJointImpulseClamp PhysicsServer3DPinJointParam = 2
)

type PhysicsServer3DHingeJointParam int64

const (
	PhysicsServer3DHingeJointBias PhysicsServer3DHingeJointParam = 0
	PhysicsServer3DHingeJointLimitUpper PhysicsServer3DHingeJointParam = 1
	PhysicsServer3DHingeJointLimitLower PhysicsServer3DHingeJointParam = 2
	PhysicsServer3DHingeJointLimitBias PhysicsServer3DHingeJointParam = 3
	PhysicsServer3DHingeJointLimitSoftness PhysicsServer3DHingeJointParam = 4
	PhysicsServer3DHingeJointLimitRelaxation PhysicsServer3DHingeJointParam = 5
	PhysicsServer3DHingeJointMotorTargetVelocity PhysicsServer3DHingeJointParam = 6
	PhysicsServer3DHingeJointMotorMaxImpulse PhysicsServer3DHingeJointParam = 7
)

type PhysicsServer3DHingeJointFlag int64

const (
	PhysicsServer3DHingeJointFlagUseLimit PhysicsServer3DHingeJointFlag = 0
	PhysicsServer3DHingeJointFlagEnableMotor PhysicsServer3DHingeJointFlag = 1
)

type PhysicsServer3DSliderJointParam int64

const (
	PhysicsServer3DSliderJointLinearLimitUpper PhysicsServer3DSliderJointParam = 0
	PhysicsServer3DSliderJointLinearLimitLower PhysicsServer3DSliderJointParam = 1
	PhysicsServer3DSliderJointLinearLimitSoftness PhysicsServer3DSliderJointParam = 2
	PhysicsServer3DSliderJointLinearLimitRestitution PhysicsServer3DSliderJointParam = 3
	PhysicsServer3DSliderJointLinearLimitDamping PhysicsServer3DSliderJointParam = 4
	PhysicsServer3DSliderJointLinearMotionSoftness PhysicsServer3DSliderJointParam = 5
	PhysicsServer3DSliderJointLinearMotionRestitution PhysicsServer3DSliderJointParam = 6
	PhysicsServer3DSliderJointLinearMotionDamping PhysicsServer3DSliderJointParam = 7
	PhysicsServer3DSliderJointLinearOrthogonalSoftness PhysicsServer3DSliderJointParam = 8
	PhysicsServer3DSliderJointLinearOrthogonalRestitution PhysicsServer3DSliderJointParam = 9
	PhysicsServer3DSliderJointLinearOrthogonalDamping PhysicsServer3DSliderJointParam = 10
	PhysicsServer3DSliderJointAngularLimitUpper PhysicsServer3DSliderJointParam = 11
	PhysicsServer3DSliderJointAngularLimitLower PhysicsServer3DSliderJointParam = 12
	PhysicsServer3DSliderJointAngularLimitSoftness PhysicsServer3DSliderJointParam = 13
	PhysicsServer3DSliderJointAngularLimitRestitution PhysicsServer3DSliderJointParam = 14
	PhysicsServer3DSliderJointAngularLimitDamping PhysicsServer3DSliderJointParam = 15
	PhysicsServer3DSliderJointAngularMotionSoftness PhysicsServer3DSliderJointParam = 16
	PhysicsServer3DSliderJointAngularMotionRestitution PhysicsServer3DSliderJointParam = 17
	PhysicsServer3DSliderJointAngularMotionDamping PhysicsServer3DSliderJointParam = 18
	PhysicsServer3DSliderJointAngularOrthogonalSoftness PhysicsServer3DSliderJointParam = 19
	PhysicsServer3DSliderJointAngularOrthogonalRestitution PhysicsServer3DSliderJointParam = 20
	PhysicsServer3DSliderJointAngularOrthogonalDamping PhysicsServer3DSliderJointParam = 21
	PhysicsServer3DSliderJointMax PhysicsServer3DSliderJointParam = 22
)

type PhysicsServer3DConeTwistJointParam int64

const (
	PhysicsServer3DConeTwistJointSwingSpan PhysicsServer3DConeTwistJointParam = 0
	PhysicsServer3DConeTwistJointTwistSpan PhysicsServer3DConeTwistJointParam = 1
	PhysicsServer3DConeTwistJointBias PhysicsServer3DConeTwistJointParam = 2
	PhysicsServer3DConeTwistJointSoftness PhysicsServer3DConeTwistJointParam = 3
	PhysicsServer3DConeTwistJointRelaxation PhysicsServer3DConeTwistJointParam = 4
)

type PhysicsServer3DG6DOFJointAxisParam int64

const (
	PhysicsServer3DG6dofJointLinearLowerLimit PhysicsServer3DG6DOFJointAxisParam = 0
	PhysicsServer3DG6dofJointLinearUpperLimit PhysicsServer3DG6DOFJointAxisParam = 1
	PhysicsServer3DG6dofJointLinearLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 2
	PhysicsServer3DG6dofJointLinearRestitution PhysicsServer3DG6DOFJointAxisParam = 3
	PhysicsServer3DG6dofJointLinearDamping PhysicsServer3DG6DOFJointAxisParam = 4
	PhysicsServer3DG6dofJointLinearMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 5
	PhysicsServer3DG6dofJointLinearMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 6
	PhysicsServer3DG6dofJointAngularLowerLimit PhysicsServer3DG6DOFJointAxisParam = 10
	PhysicsServer3DG6dofJointAngularUpperLimit PhysicsServer3DG6DOFJointAxisParam = 11
	PhysicsServer3DG6dofJointAngularLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 12
	PhysicsServer3DG6dofJointAngularDamping PhysicsServer3DG6DOFJointAxisParam = 13
	PhysicsServer3DG6dofJointAngularRestitution PhysicsServer3DG6DOFJointAxisParam = 14
	PhysicsServer3DG6dofJointAngularForceLimit PhysicsServer3DG6DOFJointAxisParam = 15
	PhysicsServer3DG6dofJointAngularErp PhysicsServer3DG6DOFJointAxisParam = 16
	PhysicsServer3DG6dofJointAngularMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 17
	PhysicsServer3DG6dofJointAngularMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 18
)

type PhysicsServer3DG6DOFJointAxisFlag int64

const (
	PhysicsServer3DG6dofJointFlagEnableLinearLimit PhysicsServer3DG6DOFJointAxisFlag = 0
	PhysicsServer3DG6dofJointFlagEnableAngularLimit PhysicsServer3DG6DOFJointAxisFlag = 1
	PhysicsServer3DG6dofJointFlagEnableMotor PhysicsServer3DG6DOFJointAxisFlag = 4
	PhysicsServer3DG6dofJointFlagEnableLinearMotor PhysicsServer3DG6DOFJointAxisFlag = 5
)

type PhysicsServer3DShapeType int64

const (
	PhysicsServer3DShapeWorldBoundary PhysicsServer3DShapeType = 0
	PhysicsServer3DShapeSeparationRay PhysicsServer3DShapeType = 1
	PhysicsServer3DShapeSphere PhysicsServer3DShapeType = 2
	PhysicsServer3DShapeBox PhysicsServer3DShapeType = 3
	PhysicsServer3DShapeCapsule PhysicsServer3DShapeType = 4
	PhysicsServer3DShapeCylinder PhysicsServer3DShapeType = 5
	PhysicsServer3DShapeConvexPolygon PhysicsServer3DShapeType = 6
	PhysicsServer3DShapeConcavePolygon PhysicsServer3DShapeType = 7
	PhysicsServer3DShapeHeightmap PhysicsServer3DShapeType = 8
	PhysicsServer3DShapeSoftBody PhysicsServer3DShapeType = 9
	PhysicsServer3DShapeCustom PhysicsServer3DShapeType = 10
)

type PhysicsServer3DAreaParameter int64

const (
	PhysicsServer3DAreaParamGravityOverrideMode PhysicsServer3DAreaParameter = 0
	PhysicsServer3DAreaParamGravity PhysicsServer3DAreaParameter = 1
	PhysicsServer3DAreaParamGravityVector PhysicsServer3DAreaParameter = 2
	PhysicsServer3DAreaParamGravityIsPoint PhysicsServer3DAreaParameter = 3
	PhysicsServer3DAreaParamGravityDistanceScale PhysicsServer3DAreaParameter = 4
	PhysicsServer3DAreaParamGravityPointAttenuation PhysicsServer3DAreaParameter = 5
	PhysicsServer3DAreaParamLinearDampOverrideMode PhysicsServer3DAreaParameter = 6
	PhysicsServer3DAreaParamLinearDamp PhysicsServer3DAreaParameter = 7
	PhysicsServer3DAreaParamAngularDampOverrideMode PhysicsServer3DAreaParameter = 8
	PhysicsServer3DAreaParamAngularDamp PhysicsServer3DAreaParameter = 9
	PhysicsServer3DAreaParamPriority PhysicsServer3DAreaParameter = 10
	PhysicsServer3DAreaParamWindForceMagnitude PhysicsServer3DAreaParameter = 11
	PhysicsServer3DAreaParamWindSource PhysicsServer3DAreaParameter = 12
	PhysicsServer3DAreaParamWindDirection PhysicsServer3DAreaParameter = 13
	PhysicsServer3DAreaParamWindAttenuationFactor PhysicsServer3DAreaParameter = 14
)

type PhysicsServer3DAreaSpaceOverrideMode int64

const (
	PhysicsServer3DAreaSpaceOverrideDisabled PhysicsServer3DAreaSpaceOverrideMode = 0
	PhysicsServer3DAreaSpaceOverrideCombine PhysicsServer3DAreaSpaceOverrideMode = 1
	PhysicsServer3DAreaSpaceOverrideCombineReplace PhysicsServer3DAreaSpaceOverrideMode = 2
	PhysicsServer3DAreaSpaceOverrideReplace PhysicsServer3DAreaSpaceOverrideMode = 3
	PhysicsServer3DAreaSpaceOverrideReplaceCombine PhysicsServer3DAreaSpaceOverrideMode = 4
)

type PhysicsServer3DBodyMode int64

const (
	PhysicsServer3DBodyModeStatic PhysicsServer3DBodyMode = 0
	PhysicsServer3DBodyModeKinematic PhysicsServer3DBodyMode = 1
	PhysicsServer3DBodyModeDynamic PhysicsServer3DBodyMode = 2
	PhysicsServer3DBodyModeDynamicLinear PhysicsServer3DBodyMode = 3
)

type PhysicsServer3DBodyParameter int64

const (
	PhysicsServer3DBodyParamBounce PhysicsServer3DBodyParameter = 0
	PhysicsServer3DBodyParamFriction PhysicsServer3DBodyParameter = 1
	PhysicsServer3DBodyParamMass PhysicsServer3DBodyParameter = 2
	PhysicsServer3DBodyParamInertia PhysicsServer3DBodyParameter = 3
	PhysicsServer3DBodyParamCenterOfMass PhysicsServer3DBodyParameter = 4
	PhysicsServer3DBodyParamGravityScale PhysicsServer3DBodyParameter = 5
	PhysicsServer3DBodyParamLinearDampMode PhysicsServer3DBodyParameter = 6
	PhysicsServer3DBodyParamAngularDampMode PhysicsServer3DBodyParameter = 7
	PhysicsServer3DBodyParamLinearDamp PhysicsServer3DBodyParameter = 8
	PhysicsServer3DBodyParamAngularDamp PhysicsServer3DBodyParameter = 9
	PhysicsServer3DBodyParamMax PhysicsServer3DBodyParameter = 10
)

type PhysicsServer3DBodyDampMode int64

const (
	PhysicsServer3DBodyDampModeCombine PhysicsServer3DBodyDampMode = 0
	PhysicsServer3DBodyDampModeReplace PhysicsServer3DBodyDampMode = 1
)

type PhysicsServer3DBodyState int64

const (
	PhysicsServer3DBodyStateTransform PhysicsServer3DBodyState = 0
	PhysicsServer3DBodyStateLinearVelocity PhysicsServer3DBodyState = 1
	PhysicsServer3DBodyStateAngularVelocity PhysicsServer3DBodyState = 2
	PhysicsServer3DBodyStateSleeping PhysicsServer3DBodyState = 3
	PhysicsServer3DBodyStateCanSleep PhysicsServer3DBodyState = 4
)

type PhysicsServer3DAreaBodyStatus int64

const (
	PhysicsServer3DAreaBodyAdded PhysicsServer3DAreaBodyStatus = 0
	PhysicsServer3DAreaBodyRemoved PhysicsServer3DAreaBodyStatus = 1
)

type PhysicsServer3DProcessInfo int64

const (
	PhysicsServer3DInfoActiveObjects PhysicsServer3DProcessInfo = 0
	PhysicsServer3DInfoCollisionPairs PhysicsServer3DProcessInfo = 1
	PhysicsServer3DInfoIslandCount PhysicsServer3DProcessInfo = 2
)

type PhysicsServer3DSpaceParameter int64

const (
	PhysicsServer3DSpaceParamContactRecycleRadius PhysicsServer3DSpaceParameter = 0
	PhysicsServer3DSpaceParamContactMaxSeparation PhysicsServer3DSpaceParameter = 1
	PhysicsServer3DSpaceParamContactMaxAllowedPenetration PhysicsServer3DSpaceParameter = 2
	PhysicsServer3DSpaceParamContactDefaultBias PhysicsServer3DSpaceParameter = 3
	PhysicsServer3DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer3DSpaceParameter = 4
	PhysicsServer3DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer3DSpaceParameter = 5
	PhysicsServer3DSpaceParamBodyTimeToSleep PhysicsServer3DSpaceParameter = 6
	PhysicsServer3DSpaceParamSolverIterations PhysicsServer3DSpaceParameter = 7
)

type PhysicsServer3DBodyAxis int64

const (
	PhysicsServer3DBodyAxisLinearX PhysicsServer3DBodyAxis = 1
	PhysicsServer3DBodyAxisLinearY PhysicsServer3DBodyAxis = 2
	PhysicsServer3DBodyAxisLinearZ PhysicsServer3DBodyAxis = 4
	PhysicsServer3DBodyAxisAngularX PhysicsServer3DBodyAxis = 8
	PhysicsServer3DBodyAxisAngularY PhysicsServer3DBodyAxis = 16
	PhysicsServer3DBodyAxisAngularZ PhysicsServer3DBodyAxis = 32
)
func (gdClass PhysicsServer3D) WorldBoundaryShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[0]) }
func (gdClass PhysicsServer3D) SeparationRayShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[1]) }
func (gdClass PhysicsServer3D) SphereShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[2]) }
func (gdClass PhysicsServer3D) BoxShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[3]) }
func (gdClass PhysicsServer3D) CapsuleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[4]) }
func (gdClass PhysicsServer3D) CylinderShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[5]) }
func (gdClass PhysicsServer3D) ConvexPolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[6]) }
func (gdClass PhysicsServer3D) ConcavePolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[7]) }
func (gdClass PhysicsServer3D) HeightmapShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[8]) }
func (gdClass PhysicsServer3D) CustomShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[9]) }
func (gdClass PhysicsServer3D) ShapeSetData(shape RID, data any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[10], shape, data) }
func (gdClass PhysicsServer3D) ShapeGetType(shape RID) PhysicsServer3DShapeType { return gdnative.Return[PhysicsServer3DShapeType](gdnative.Object(gdClass), methodPhysicsServer3D[11], shape) }
func (gdClass PhysicsServer3D) ShapeGetData(shape RID) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[12], shape) }
func (gdClass PhysicsServer3D) SpaceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[13]) }
func (gdClass PhysicsServer3D) SpaceSetActive(space RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[14], space, active) }
func (gdClass PhysicsServer3D) SpaceIsActive(space RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[15], space) }
func (gdClass PhysicsServer3D) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[16], space, param, value) }
func (gdClass PhysicsServer3D) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[17], space, param) }
func (gdClass PhysicsServer3D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsServer3D[18], space) }
func (gdClass PhysicsServer3D) AreaCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[19]) }
func (gdClass PhysicsServer3D) AreaSetSpace(area RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[20], area, space) }
func (gdClass PhysicsServer3D) AreaGetSpace(area RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[21], area) }
func (gdClass PhysicsServer3D) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[22], area, shape, transform, disabled) }
func (gdClass PhysicsServer3D) AreaSetShape(area RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[23], area, shape_idx, shape) }
func (gdClass PhysicsServer3D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[24], area, shape_idx, transform) }
func (gdClass PhysicsServer3D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[25], area, shape_idx, disabled) }
func (gdClass PhysicsServer3D) AreaGetShapeCount(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[26], area) }
func (gdClass PhysicsServer3D) AreaGetShape(area RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[27], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaGetShapeTransform(area RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[28], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaRemoveShape(area RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[29], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaClearShapes(area RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[30], area) }
func (gdClass PhysicsServer3D) AreaSetCollisionLayer(area RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[31], area, layer) }
func (gdClass PhysicsServer3D) AreaSetCollisionMask(area RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[32], area, mask) }
func (gdClass PhysicsServer3D) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[33], area, param, value) }
func (gdClass PhysicsServer3D) AreaSetTransform(area RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[34], area, transform) }
func (gdClass PhysicsServer3D) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[35], area, param) }
func (gdClass PhysicsServer3D) AreaGetTransform(area RID) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[36], area) }
func (gdClass PhysicsServer3D) AreaAttachObjectInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[37], area, id) }
func (gdClass PhysicsServer3D) AreaGetObjectInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[38], area) }
func (gdClass PhysicsServer3D) AreaSetMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[39], area, callback) }
func (gdClass PhysicsServer3D) AreaSetAreaMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[40], area, callback) }
func (gdClass PhysicsServer3D) AreaSetMonitorable(area RID, monitorable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[41], area, monitorable) }
func (gdClass PhysicsServer3D) AreaSetRayPickable(area RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[42], area, enable) }
func (gdClass PhysicsServer3D) BodyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[43]) }
func (gdClass PhysicsServer3D) BodySetSpace(body RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[44], body, space) }
func (gdClass PhysicsServer3D) BodyGetSpace(body RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[45], body) }
func (gdClass PhysicsServer3D) BodySetMode(body RID, mode PhysicsServer3DBodyMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[46], body, mode) }
func (gdClass PhysicsServer3D) BodyGetMode(body RID) PhysicsServer3DBodyMode { return gdnative.Return[PhysicsServer3DBodyMode](gdnative.Object(gdClass), methodPhysicsServer3D[47], body) }
func (gdClass PhysicsServer3D) BodySetCollisionLayer(body RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[48], body, layer) }
func (gdClass PhysicsServer3D) BodyGetCollisionLayer(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[49], body) }
func (gdClass PhysicsServer3D) BodySetCollisionMask(body RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[50], body, mask) }
func (gdClass PhysicsServer3D) BodyGetCollisionMask(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[51], body) }
func (gdClass PhysicsServer3D) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[52], body, shape, transform, disabled) }
func (gdClass PhysicsServer3D) BodySetShape(body RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[53], body, shape_idx, shape) }
func (gdClass PhysicsServer3D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[54], body, shape_idx, transform) }
func (gdClass PhysicsServer3D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[55], body, shape_idx, disabled) }
func (gdClass PhysicsServer3D) BodyGetShapeCount(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[56], body) }
func (gdClass PhysicsServer3D) BodyGetShape(body RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[57], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyGetShapeTransform(body RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[58], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyRemoveShape(body RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[59], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyClearShapes(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[60], body) }
func (gdClass PhysicsServer3D) BodyAttachObjectInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[61], body, id) }
func (gdClass PhysicsServer3D) BodyGetObjectInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[62], body) }
func (gdClass PhysicsServer3D) BodySetEnableContinuousCollisionDetection(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[63], body, enable) }
func (gdClass PhysicsServer3D) BodyIsContinuousCollisionDetectionEnabled(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[64], body) }
func (gdClass PhysicsServer3D) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[65], body, param, value) }
func (gdClass PhysicsServer3D) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[66], body, param) }
func (gdClass PhysicsServer3D) BodyResetMassProperties(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[67], body) }
func (gdClass PhysicsServer3D) BodySetState(body RID, state PhysicsServer3DBodyState, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[68], body, state, value) }
func (gdClass PhysicsServer3D) BodyGetState(body RID, state PhysicsServer3DBodyState) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[69], body, state) }
func (gdClass PhysicsServer3D) BodyApplyCentralImpulse(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[70], body, impulse) }
func (gdClass PhysicsServer3D) BodyApplyImpulse(body RID, impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[71], body, impulse, position) }
func (gdClass PhysicsServer3D) BodyApplyTorqueImpulse(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[72], body, impulse) }
func (gdClass PhysicsServer3D) BodyApplyCentralForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[73], body, force) }
func (gdClass PhysicsServer3D) BodyApplyForce(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[74], body, force, position) }
func (gdClass PhysicsServer3D) BodyApplyTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[75], body, torque) }
func (gdClass PhysicsServer3D) BodyAddConstantCentralForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[76], body, force) }
func (gdClass PhysicsServer3D) BodyAddConstantForce(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[77], body, force, position) }
func (gdClass PhysicsServer3D) BodyAddConstantTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[78], body, torque) }
func (gdClass PhysicsServer3D) BodySetConstantForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[79], body, force) }
func (gdClass PhysicsServer3D) BodyGetConstantForce(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[80], body) }
func (gdClass PhysicsServer3D) BodySetConstantTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[81], body, torque) }
func (gdClass PhysicsServer3D) BodyGetConstantTorque(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[82], body) }
func (gdClass PhysicsServer3D) BodySetAxisVelocity(body RID, axis_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[83], body, axis_velocity) }
func (gdClass PhysicsServer3D) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[84], body, axis, lock) }
func (gdClass PhysicsServer3D) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[85], body, axis) }
func (gdClass PhysicsServer3D) BodyAddCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[86], body, excepted_body) }
func (gdClass PhysicsServer3D) BodyRemoveCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[87], body, excepted_body) }
func (gdClass PhysicsServer3D) BodySetMaxContactsReported(body RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[88], body, amount) }
func (gdClass PhysicsServer3D) BodyGetMaxContactsReported(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[89], body) }
func (gdClass PhysicsServer3D) BodySetOmitForceIntegration(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[90], body, enable) }
func (gdClass PhysicsServer3D) BodyIsOmittingForceIntegration(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[91], body) }
func (gdClass PhysicsServer3D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[92], body, callable, userdata) }
func (gdClass PhysicsServer3D) BodySetRayPickable(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[93], body, enable) }
func (gdClass PhysicsServer3D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[94], body, parameters, result) }
func (gdClass PhysicsServer3D) BodyGetDirectState(body RID) PhysicsDirectBodyState3D { return gdnative.Return[PhysicsDirectBodyState3D](gdnative.Object(gdClass), methodPhysicsServer3D[95], body) }
func (gdClass PhysicsServer3D) SoftBodyGetBounds(body RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodPhysicsServer3D[96], body) }
func (gdClass PhysicsServer3D) JointCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[97]) }
func (gdClass PhysicsServer3D) JointClear(joint RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[98], joint) }
func (gdClass PhysicsServer3D) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[99], joint, body_A, local_A, body_B, local_B) }
func (gdClass PhysicsServer3D) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[100], joint, param, value) }
func (gdClass PhysicsServer3D) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[101], joint, param) }
func (gdClass PhysicsServer3D) PinJointSetLocalA(joint RID, local_A Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[102], joint, local_A) }
func (gdClass PhysicsServer3D) PinJointGetLocalA(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[103], joint) }
func (gdClass PhysicsServer3D) PinJointSetLocalB(joint RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[104], joint, local_B) }
func (gdClass PhysicsServer3D) PinJointGetLocalB(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[105], joint) }
func (gdClass PhysicsServer3D) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[106], joint, body_A, hinge_A, body_B, hinge_B) }
func (gdClass PhysicsServer3D) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[107], joint, param, value) }
func (gdClass PhysicsServer3D) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[108], joint, param) }
func (gdClass PhysicsServer3D) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[109], joint, flag, enabled) }
func (gdClass PhysicsServer3D) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[110], joint, flag) }
func (gdClass PhysicsServer3D) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[111], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[112], joint, param, value) }
func (gdClass PhysicsServer3D) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[113], joint, param) }
func (gdClass PhysicsServer3D) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[114], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[115], joint, param, value) }
func (gdClass PhysicsServer3D) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[116], joint, param) }
func (gdClass PhysicsServer3D) JointGetType(joint RID) PhysicsServer3DJointType { return gdnative.Return[PhysicsServer3DJointType](gdnative.Object(gdClass), methodPhysicsServer3D[117], joint) }
func (gdClass PhysicsServer3D) JointSetSolverPriority(joint RID, priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[118], joint, priority) }
func (gdClass PhysicsServer3D) JointGetSolverPriority(joint RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[119], joint) }
func (gdClass PhysicsServer3D) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[120], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[121], joint, axis, param, value) }
func (gdClass PhysicsServer3D) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[122], joint, axis, param) }
func (gdClass PhysicsServer3D) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[123], joint, axis, flag, enable) }
func (gdClass PhysicsServer3D) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[124], joint, axis, flag) }
func (gdClass PhysicsServer3D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[125], rid) }
func (gdClass PhysicsServer3D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[126], active) }
func (gdClass PhysicsServer3D) GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[127], process_info) }

type PhysicsServer3DExtension gdnative.Object

var methodPhysicsServer3DExtension [128]gdnative.Method
func (gdClass PhysicsServer3DExtension) WorldBoundaryShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[0]) }
func (gdClass PhysicsServer3DExtension) SeparationRayShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[1]) }
func (gdClass PhysicsServer3DExtension) SphereShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[2]) }
func (gdClass PhysicsServer3DExtension) BoxShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[3]) }
func (gdClass PhysicsServer3DExtension) CapsuleShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[4]) }
func (gdClass PhysicsServer3DExtension) CylinderShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[5]) }
func (gdClass PhysicsServer3DExtension) ConvexPolygonShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[6]) }
func (gdClass PhysicsServer3DExtension) ConcavePolygonShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[7]) }
func (gdClass PhysicsServer3DExtension) HeightmapShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[8]) }
func (gdClass PhysicsServer3DExtension) CustomShapeCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[9]) }
func (gdClass PhysicsServer3DExtension) ShapeSetDataImplementation(shape RID, data any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[10], shape, data) }
func (gdClass PhysicsServer3DExtension) ShapeGetTypeImplementation(shape RID) PhysicsServer3DShapeType { return gdnative.Return[PhysicsServer3DShapeType](gdnative.Object(gdClass), methodPhysicsServer3DExtension[11], shape) }
func (gdClass PhysicsServer3DExtension) ShapeGetDataImplementation(shape RID) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3DExtension[12], shape) }
func (gdClass PhysicsServer3DExtension) SpaceCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[13]) }
func (gdClass PhysicsServer3DExtension) SpaceSetActiveImplementation(space RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[14], space, active) }
func (gdClass PhysicsServer3DExtension) SpaceIsActiveImplementation(space RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[15], space) }
func (gdClass PhysicsServer3DExtension) SpaceSetParamImplementation(space RID, param PhysicsServer3DSpaceParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[16], space, param, value) }
func (gdClass PhysicsServer3DExtension) SpaceGetParamImplementation(space RID, param PhysicsServer3DSpaceParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[17], space, param) }
func (gdClass PhysicsServer3DExtension) SpaceGetDirectStateImplementation(space RID) PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsServer3DExtension[18], space) }
func (gdClass PhysicsServer3DExtension) AreaCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[19]) }
func (gdClass PhysicsServer3DExtension) AreaSetSpaceImplementation(area RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[20], area, space) }
func (gdClass PhysicsServer3DExtension) AreaGetSpaceImplementation(area RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[21], area) }
func (gdClass PhysicsServer3DExtension) AreaAddShapeImplementation(area RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[22], area, shape, transform, disabled) }
func (gdClass PhysicsServer3DExtension) AreaSetShapeImplementation(area RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[23], area, shape_idx, shape) }
func (gdClass PhysicsServer3DExtension) AreaSetShapeTransformImplementation(area RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[24], area, shape_idx, transform) }
func (gdClass PhysicsServer3DExtension) AreaSetShapeDisabledImplementation(area RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[25], area, shape_idx, disabled) }
func (gdClass PhysicsServer3DExtension) AreaGetShapeCountImplementation(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[26], area) }
func (gdClass PhysicsServer3DExtension) AreaGetShapeImplementation(area RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[27], area, shape_idx) }
func (gdClass PhysicsServer3DExtension) AreaGetShapeTransformImplementation(area RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3DExtension[28], area, shape_idx) }
func (gdClass PhysicsServer3DExtension) AreaRemoveShapeImplementation(area RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[29], area, shape_idx) }
func (gdClass PhysicsServer3DExtension) AreaClearShapesImplementation(area RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[30], area) }
func (gdClass PhysicsServer3DExtension) AreaSetCollisionLayerImplementation(area RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[31], area, layer) }
func (gdClass PhysicsServer3DExtension) AreaSetCollisionMaskImplementation(area RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[32], area, mask) }
func (gdClass PhysicsServer3DExtension) AreaSetParamImplementation(area RID, param PhysicsServer3DAreaParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[33], area, param, value) }
func (gdClass PhysicsServer3DExtension) AreaSetTransformImplementation(area RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[34], area, transform) }
func (gdClass PhysicsServer3DExtension) AreaGetParamImplementation(area RID, param PhysicsServer3DAreaParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3DExtension[35], area, param) }
func (gdClass PhysicsServer3DExtension) AreaGetTransformImplementation(area RID) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3DExtension[36], area) }
func (gdClass PhysicsServer3DExtension) AreaAttachObjectInstanceIdImplementation(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[37], area, id) }
func (gdClass PhysicsServer3DExtension) AreaGetObjectInstanceIdImplementation(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[38], area) }
func (gdClass PhysicsServer3DExtension) AreaSetMonitorCallbackImplementation(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[39], area, callback) }
func (gdClass PhysicsServer3DExtension) AreaSetAreaMonitorCallbackImplementation(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[40], area, callback) }
func (gdClass PhysicsServer3DExtension) AreaSetMonitorableImplementation(area RID, monitorable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[41], area, monitorable) }
func (gdClass PhysicsServer3DExtension) AreaSetRayPickableImplementation(area RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[42], area, enable) }
func (gdClass PhysicsServer3DExtension) BodyCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[43]) }
func (gdClass PhysicsServer3DExtension) BodySetSpaceImplementation(body RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[44], body, space) }
func (gdClass PhysicsServer3DExtension) BodyGetSpaceImplementation(body RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[45], body) }
func (gdClass PhysicsServer3DExtension) BodySetModeImplementation(body RID, mode PhysicsServer3DBodyMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[46], body, mode) }
func (gdClass PhysicsServer3DExtension) BodyGetModeImplementation(body RID) PhysicsServer3DBodyMode { return gdnative.Return[PhysicsServer3DBodyMode](gdnative.Object(gdClass), methodPhysicsServer3DExtension[47], body) }
func (gdClass PhysicsServer3DExtension) BodySetCollisionLayerImplementation(body RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[48], body, layer) }
func (gdClass PhysicsServer3DExtension) BodyGetCollisionLayerImplementation(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[49], body) }
func (gdClass PhysicsServer3DExtension) BodySetCollisionMaskImplementation(body RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[50], body, mask) }
func (gdClass PhysicsServer3DExtension) BodyGetCollisionMaskImplementation(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[51], body) }
func (gdClass PhysicsServer3DExtension) BodyAddShapeImplementation(body RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[52], body, shape, transform, disabled) }
func (gdClass PhysicsServer3DExtension) BodySetShapeImplementation(body RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[53], body, shape_idx, shape) }
func (gdClass PhysicsServer3DExtension) BodySetShapeTransformImplementation(body RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[54], body, shape_idx, transform) }
func (gdClass PhysicsServer3DExtension) BodySetShapeDisabledImplementation(body RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[55], body, shape_idx, disabled) }
func (gdClass PhysicsServer3DExtension) BodyGetShapeCountImplementation(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[56], body) }
func (gdClass PhysicsServer3DExtension) BodyGetShapeImplementation(body RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[57], body, shape_idx) }
func (gdClass PhysicsServer3DExtension) BodyGetShapeTransformImplementation(body RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3DExtension[58], body, shape_idx) }
func (gdClass PhysicsServer3DExtension) BodyRemoveShapeImplementation(body RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[59], body, shape_idx) }
func (gdClass PhysicsServer3DExtension) BodyClearShapesImplementation(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[60], body) }
func (gdClass PhysicsServer3DExtension) BodyAttachObjectInstanceIdImplementation(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[61], body, id) }
func (gdClass PhysicsServer3DExtension) BodyGetObjectInstanceIdImplementation(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[62], body) }
func (gdClass PhysicsServer3DExtension) BodySetEnableContinuousCollisionDetectionImplementation(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[63], body, enable) }
func (gdClass PhysicsServer3DExtension) BodyIsContinuousCollisionDetectionEnabledImplementation(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[64], body) }
func (gdClass PhysicsServer3DExtension) BodySetParamImplementation(body RID, param PhysicsServer3DBodyParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[65], body, param, value) }
func (gdClass PhysicsServer3DExtension) BodyGetParamImplementation(body RID, param PhysicsServer3DBodyParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3DExtension[66], body, param) }
func (gdClass PhysicsServer3DExtension) BodyResetMassPropertiesImplementation(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[67], body) }
func (gdClass PhysicsServer3DExtension) BodySetStateImplementation(body RID, state PhysicsServer3DBodyState, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[68], body, state, value) }
func (gdClass PhysicsServer3DExtension) BodyGetStateImplementation(body RID, state PhysicsServer3DBodyState) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3DExtension[69], body, state) }
func (gdClass PhysicsServer3DExtension) BodyApplyCentralImpulseImplementation(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[70], body, impulse) }
func (gdClass PhysicsServer3DExtension) BodyApplyImpulseImplementation(body RID, impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[71], body, impulse, position) }
func (gdClass PhysicsServer3DExtension) BodyApplyTorqueImpulseImplementation(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[72], body, impulse) }
func (gdClass PhysicsServer3DExtension) BodyApplyCentralForceImplementation(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[73], body, force) }
func (gdClass PhysicsServer3DExtension) BodyApplyForceImplementation(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[74], body, force, position) }
func (gdClass PhysicsServer3DExtension) BodyApplyTorqueImplementation(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[75], body, torque) }
func (gdClass PhysicsServer3DExtension) BodyAddConstantCentralForceImplementation(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[76], body, force) }
func (gdClass PhysicsServer3DExtension) BodyAddConstantForceImplementation(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[77], body, force, position) }
func (gdClass PhysicsServer3DExtension) BodyAddConstantTorqueImplementation(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[78], body, torque) }
func (gdClass PhysicsServer3DExtension) BodySetConstantForceImplementation(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[79], body, force) }
func (gdClass PhysicsServer3DExtension) BodyGetConstantForceImplementation(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3DExtension[80], body) }
func (gdClass PhysicsServer3DExtension) BodySetConstantTorqueImplementation(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[81], body, torque) }
func (gdClass PhysicsServer3DExtension) BodyGetConstantTorqueImplementation(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3DExtension[82], body) }
func (gdClass PhysicsServer3DExtension) BodySetAxisVelocityImplementation(body RID, axis_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[83], body, axis_velocity) }
func (gdClass PhysicsServer3DExtension) BodySetAxisLockImplementation(body RID, axis PhysicsServer3DBodyAxis, lock bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[84], body, axis, lock) }
func (gdClass PhysicsServer3DExtension) BodyIsAxisLockedImplementation(body RID, axis PhysicsServer3DBodyAxis) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[85], body, axis) }
func (gdClass PhysicsServer3DExtension) BodyAddCollisionExceptionImplementation(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[86], body, excepted_body) }
func (gdClass PhysicsServer3DExtension) BodyRemoveCollisionExceptionImplementation(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[87], body, excepted_body) }
func (gdClass PhysicsServer3DExtension) BodySetMaxContactsReportedImplementation(body RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[88], body, amount) }
func (gdClass PhysicsServer3DExtension) BodyGetMaxContactsReportedImplementation(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[89], body) }
func (gdClass PhysicsServer3DExtension) BodySetOmitForceIntegrationImplementation(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[90], body, enable) }
func (gdClass PhysicsServer3DExtension) BodyIsOmittingForceIntegrationImplementation(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[91], body) }
func (gdClass PhysicsServer3DExtension) BodySetForceIntegrationCallbackImplementation(body RID, callable Callable, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[92], body, callable, userdata) }
func (gdClass PhysicsServer3DExtension) BodySetRayPickableImplementation(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[93], body, enable) }
func (gdClass PhysicsServer3DExtension) BodyTestMotionImplementation(body RID, from Transform3D, motion Vector3, margin float64, max_collisions int64, collide_separation_ray bool, result *PhysicsServer3DExtensionMotionResult) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[94], body, from, motion, margin, max_collisions, collide_separation_ray, result) }
func (gdClass PhysicsServer3DExtension) BodyGetDirectStateImplementation(body RID) PhysicsDirectBodyState3D { return gdnative.Return[PhysicsDirectBodyState3D](gdnative.Object(gdClass), methodPhysicsServer3DExtension[95], body) }
func (gdClass PhysicsServer3DExtension) SoftBodyGetBoundsImplementation(body RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodPhysicsServer3DExtension[96], body) }
func (gdClass PhysicsServer3DExtension) JointCreateImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3DExtension[97]) }
func (gdClass PhysicsServer3DExtension) JointClearImplementation(joint RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[98], joint) }
func (gdClass PhysicsServer3DExtension) JointMakePinImplementation(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[99], joint, body_A, local_A, body_B, local_B) }
func (gdClass PhysicsServer3DExtension) PinJointSetParamImplementation(joint RID, param PhysicsServer3DPinJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[100], joint, param, value) }
func (gdClass PhysicsServer3DExtension) PinJointGetParamImplementation(joint RID, param PhysicsServer3DPinJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[101], joint, param) }
func (gdClass PhysicsServer3DExtension) PinJointSetLocalAImplementation(joint RID, local_A Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[102], joint, local_A) }
func (gdClass PhysicsServer3DExtension) PinJointGetLocalAImplementation(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3DExtension[103], joint) }
func (gdClass PhysicsServer3DExtension) PinJointSetLocalBImplementation(joint RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[104], joint, local_B) }
func (gdClass PhysicsServer3DExtension) PinJointGetLocalBImplementation(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3DExtension[105], joint) }
func (gdClass PhysicsServer3DExtension) JointMakeHingeImplementation(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[106], joint, body_A, hinge_A, body_B, hinge_B) }
func (gdClass PhysicsServer3DExtension) HingeJointSetParamImplementation(joint RID, param PhysicsServer3DHingeJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[107], joint, param, value) }
func (gdClass PhysicsServer3DExtension) HingeJointGetParamImplementation(joint RID, param PhysicsServer3DHingeJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[108], joint, param) }
func (gdClass PhysicsServer3DExtension) HingeJointSetFlagImplementation(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[109], joint, flag, enabled) }
func (gdClass PhysicsServer3DExtension) HingeJointGetFlagImplementation(joint RID, flag PhysicsServer3DHingeJointFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[110], joint, flag) }
func (gdClass PhysicsServer3DExtension) JointMakeSliderImplementation(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[111], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3DExtension) SliderJointSetParamImplementation(joint RID, param PhysicsServer3DSliderJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[112], joint, param, value) }
func (gdClass PhysicsServer3DExtension) SliderJointGetParamImplementation(joint RID, param PhysicsServer3DSliderJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[113], joint, param) }
func (gdClass PhysicsServer3DExtension) JointMakeConeTwistImplementation(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[114], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3DExtension) ConeTwistJointSetParamImplementation(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[115], joint, param, value) }
func (gdClass PhysicsServer3DExtension) ConeTwistJointGetParamImplementation(joint RID, param PhysicsServer3DConeTwistJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[116], joint, param) }
func (gdClass PhysicsServer3DExtension) JointGetTypeImplementation(joint RID) PhysicsServer3DJointType { return gdnative.Return[PhysicsServer3DJointType](gdnative.Object(gdClass), methodPhysicsServer3DExtension[117], joint) }
func (gdClass PhysicsServer3DExtension) JointSetSolverPriorityImplementation(joint RID, priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[118], joint, priority) }
func (gdClass PhysicsServer3DExtension) JointGetSolverPriorityImplementation(joint RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[119], joint) }
func (gdClass PhysicsServer3DExtension) JointMakeGeneric6dofImplementation(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[120], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3DExtension) Generic6dofJointSetParamImplementation(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[121], joint, axis, param, value) }
func (gdClass PhysicsServer3DExtension) Generic6dofJointGetParamImplementation(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[122], joint, axis, param) }
func (gdClass PhysicsServer3DExtension) Generic6dofJointSetFlagImplementation(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[123], joint, axis, flag, enable) }
func (gdClass PhysicsServer3DExtension) Generic6dofJointGetFlagImplementation(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3DExtension[124], joint, axis, flag) }
func (gdClass PhysicsServer3DExtension) FreeRidImplementation(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[125], rid) }
func (gdClass PhysicsServer3DExtension) SetActiveImplementation(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DExtension[126], active) }
func (gdClass PhysicsServer3DExtension) GetProcessInfoImplementation(process_info PhysicsServer3DProcessInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3DExtension[127], process_info) }

type PhysicsServer3DRenderingServerHandler gdnative.Object

var methodPhysicsServer3DRenderingServerHandler [3]gdnative.Method
func (gdClass PhysicsServer3DRenderingServerHandler) SetVertexImplementation(vertex_id int64, vertices []byte)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DRenderingServerHandler[0], vertex_id, vertices) }
func (gdClass PhysicsServer3DRenderingServerHandler) SetNormalImplementation(vertex_id int64, normals []byte)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DRenderingServerHandler[1], vertex_id, normals) }
func (gdClass PhysicsServer3DRenderingServerHandler) SetAabbImplementation(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3DRenderingServerHandler[2], aabb) }

type PhysicsShapeQueryParameters2D gdnative.Object

var methodPhysicsShapeQueryParameters2D [18]gdnative.Method
func (gdClass PhysicsShapeQueryParameters2D) SetShape(shape Resource)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[0], shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShape() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[1]) }
func (gdClass PhysicsShapeQueryParameters2D) SetShapeRid(shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[2], shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[3]) }
func (gdClass PhysicsShapeQueryParameters2D) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[4], transform) }
func (gdClass PhysicsShapeQueryParameters2D) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[5]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMotion(motion Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[6], motion) }
func (gdClass PhysicsShapeQueryParameters2D) GetMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[7]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[8], margin) }
func (gdClass PhysicsShapeQueryParameters2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[9]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[10], collision_mask) }
func (gdClass PhysicsShapeQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[11]) }
func (gdClass PhysicsShapeQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[12], exclude) }
func (gdClass PhysicsShapeQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[13]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[14], enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[15]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[16], enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[17]) }

type PhysicsShapeQueryParameters3D gdnative.Object

var methodPhysicsShapeQueryParameters3D [18]gdnative.Method
func (gdClass PhysicsShapeQueryParameters3D) SetShape(shape Resource)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[0], shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShape() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[1]) }
func (gdClass PhysicsShapeQueryParameters3D) SetShapeRid(shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[2], shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[3]) }
func (gdClass PhysicsShapeQueryParameters3D) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[4], transform) }
func (gdClass PhysicsShapeQueryParameters3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[5]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMotion(motion Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[6], motion) }
func (gdClass PhysicsShapeQueryParameters3D) GetMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[7]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[8], margin) }
func (gdClass PhysicsShapeQueryParameters3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[9]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[10], collision_mask) }
func (gdClass PhysicsShapeQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[11]) }
func (gdClass PhysicsShapeQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[12], exclude) }
func (gdClass PhysicsShapeQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[13]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[14], enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[15]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[16], enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[17]) }

type PhysicsTestMotionParameters2D gdnative.Object

var methodPhysicsTestMotionParameters2D [14]gdnative.Method
func (gdClass PhysicsTestMotionParameters2D) GetFrom() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[0]) }
func (gdClass PhysicsTestMotionParameters2D) SetFrom(from Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[1], from) }
func (gdClass PhysicsTestMotionParameters2D) GetMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[2]) }
func (gdClass PhysicsTestMotionParameters2D) SetMotion(motion Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[3], motion) }
func (gdClass PhysicsTestMotionParameters2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[4]) }
func (gdClass PhysicsTestMotionParameters2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[5], margin) }
func (gdClass PhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[6]) }
func (gdClass PhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[7], enabled) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[8]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[9], exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[10]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[11], exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[12]) }
func (gdClass PhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[13], enabled) }

type PhysicsTestMotionParameters3D gdnative.Object

var methodPhysicsTestMotionParameters3D [16]gdnative.Method
func (gdClass PhysicsTestMotionParameters3D) GetFrom() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[0]) }
func (gdClass PhysicsTestMotionParameters3D) SetFrom(from Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[1], from) }
func (gdClass PhysicsTestMotionParameters3D) GetMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[2]) }
func (gdClass PhysicsTestMotionParameters3D) SetMotion(motion Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[3], motion) }
func (gdClass PhysicsTestMotionParameters3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[4]) }
func (gdClass PhysicsTestMotionParameters3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[5], margin) }
func (gdClass PhysicsTestMotionParameters3D) GetMaxCollisions() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[6]) }
func (gdClass PhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[7], max_collisions) }
func (gdClass PhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[8]) }
func (gdClass PhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[9], enabled) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[10]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[11], exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[12]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[13], exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[14]) }
func (gdClass PhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[15], enabled) }

type PhysicsTestMotionResult2D gdnative.Object

var methodPhysicsTestMotionResult2D [13]gdnative.Method
func (gdClass PhysicsTestMotionResult2D) GetTravel() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[0]) }
func (gdClass PhysicsTestMotionResult2D) GetRemainder() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[1]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionPoint() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[2]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[3]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[4]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[5]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[6]) }
func (gdClass PhysicsTestMotionResult2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[7]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[8]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionLocalShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[9]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[10]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[11]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[12]) }

type PhysicsTestMotionResult3D gdnative.Object

var methodPhysicsTestMotionResult3D [14]gdnative.Method
func (gdClass PhysicsTestMotionResult3D) GetTravel() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[0]) }
func (gdClass PhysicsTestMotionResult3D) GetRemainder() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[1]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[2]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[3]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[4]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionPoint(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[5], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionNormal(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[6], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderVelocity(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[7], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderId(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[8], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderRid(collision_index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[9], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollider(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[10], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderShape(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[11], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[12], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionDepth(collision_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[13], collision_index) }

type PinJoint2D gdnative.Object

var methodPinJoint2D [2]gdnative.Method
func (gdClass PinJoint2D) SetSoftness(softness float64)  { gdnative.Call(gdnative.Object(gdClass), methodPinJoint2D[0], softness) }
func (gdClass PinJoint2D) GetSoftness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPinJoint2D[1]) }

type PinJoint3D gdnative.Object

var methodPinJoint3D [2]gdnative.Method

type PinJoint3DParam int64

const (
	PinJoint3DParamBias PinJoint3DParam = 0
	PinJoint3DParamDamping PinJoint3DParam = 1
	PinJoint3DParamImpulseClamp PinJoint3DParam = 2
)
func (gdClass PinJoint3D) SetParam(param PinJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPinJoint3D[0], param, value) }
func (gdClass PinJoint3D) GetParam(param PinJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPinJoint3D[1], param) }

type PlaceholderCubemap gdnative.Object

var methodPlaceholderCubemap [0]gdnative.Method

type PlaceholderCubemapArray gdnative.Object

var methodPlaceholderCubemapArray [0]gdnative.Method

type PlaceholderMaterial gdnative.Object

var methodPlaceholderMaterial [0]gdnative.Method

type PlaceholderMesh gdnative.Object

var methodPlaceholderMesh [1]gdnative.Method
func (gdClass PlaceholderMesh) SetAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderMesh[0], aabb) }

type PlaceholderTexture2D gdnative.Object

var methodPlaceholderTexture2D [1]gdnative.Method
func (gdClass PlaceholderTexture2D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTexture2D[0], size) }

type PlaceholderTexture2DArray gdnative.Object

var methodPlaceholderTexture2DArray [0]gdnative.Method

type PlaceholderTexture3D gdnative.Object

var methodPlaceholderTexture3D [2]gdnative.Method
func (gdClass PlaceholderTexture3D) SetSize(size Vector3i)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTexture3D[0], size) }
func (gdClass PlaceholderTexture3D) GetSize() Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodPlaceholderTexture3D[1]) }

type PlaceholderTextureLayered gdnative.Object

var methodPlaceholderTextureLayered [3]gdnative.Method
func (gdClass PlaceholderTextureLayered) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTextureLayered[0], size) }
func (gdClass PlaceholderTextureLayered) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodPlaceholderTextureLayered[1]) }
func (gdClass PlaceholderTextureLayered) SetLayers(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTextureLayered[2], layers) }

type PlaneMesh gdnative.Object

var methodPlaneMesh [8]gdnative.Method
func (gdClass PlaneMesh) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[0], size) }
func (gdClass PlaneMesh) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPlaneMesh[1]) }
func (gdClass PlaneMesh) SetSubdivideWidth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[2], subdivide) }
func (gdClass PlaneMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPlaneMesh[3]) }
func (gdClass PlaneMesh) SetSubdivideDepth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[4], subdivide) }
func (gdClass PlaneMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPlaneMesh[5]) }
func (gdClass PlaneMesh) SetCenterOffset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[6], offset) }
func (gdClass PlaneMesh) GetCenterOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPlaneMesh[7]) }

type PointLight2D gdnative.Object

var methodPointLight2D [6]gdnative.Method
func (gdClass PointLight2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[0], texture) }
func (gdClass PointLight2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPointLight2D[1]) }
func (gdClass PointLight2D) SetTextureOffset(texture_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[2], texture_offset) }
func (gdClass PointLight2D) GetTextureOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPointLight2D[3]) }
func (gdClass PointLight2D) SetTextureScale(texture_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[4], texture_scale) }
func (gdClass PointLight2D) GetTextureScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPointLight2D[5]) }

type PointMesh gdnative.Object

var methodPointMesh [0]gdnative.Method

type Polygon2D gdnative.Object

var methodPolygon2D [38]gdnative.Method
func (gdClass Polygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[0], polygon) }
func (gdClass Polygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygon2D[1]) }
func (gdClass Polygon2D) SetUv(uv []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[2], uv) }
func (gdClass Polygon2D) GetUv() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygon2D[3]) }
func (gdClass Polygon2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[4], color) }
func (gdClass Polygon2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPolygon2D[5]) }
func (gdClass Polygon2D) SetPolygons(polygons Array)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[6], polygons) }
func (gdClass Polygon2D) GetPolygons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPolygon2D[7]) }
func (gdClass Polygon2D) SetVertexColors(vertex_colors []Color)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[8], vertex_colors) }
func (gdClass Polygon2D) GetVertexColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodPolygon2D[9]) }
func (gdClass Polygon2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[10], texture) }
func (gdClass Polygon2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPolygon2D[11]) }
func (gdClass Polygon2D) SetTextureOffset(texture_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[12], texture_offset) }
func (gdClass Polygon2D) GetTextureOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[13]) }
func (gdClass Polygon2D) SetTextureRotation(texture_rotation float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[14], texture_rotation) }
func (gdClass Polygon2D) GetTextureRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygon2D[15]) }
func (gdClass Polygon2D) SetTextureScale(texture_scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[16], texture_scale) }
func (gdClass Polygon2D) GetTextureScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[17]) }
func (gdClass Polygon2D) SetInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[18], invert) }
func (gdClass Polygon2D) GetInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygon2D[19]) }
func (gdClass Polygon2D) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[20], antialiased) }
func (gdClass Polygon2D) GetAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygon2D[21]) }
func (gdClass Polygon2D) SetInvertBorder(invert_border float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[22], invert_border) }
func (gdClass Polygon2D) GetInvertBorder() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygon2D[23]) }
func (gdClass Polygon2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[24], offset) }
func (gdClass Polygon2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[25]) }
func (gdClass Polygon2D) AddBone(path NodePath, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[26], path, weights) }
func (gdClass Polygon2D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPolygon2D[27]) }
func (gdClass Polygon2D) GetBonePath(index int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPolygon2D[28], index) }
func (gdClass Polygon2D) GetBoneWeights(index int64) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodPolygon2D[29], index) }
func (gdClass Polygon2D) EraseBone(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[30], index) }
func (gdClass Polygon2D) ClearBones()  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[31]) }
func (gdClass Polygon2D) SetBonePath(index int64, path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[32], index, path) }
func (gdClass Polygon2D) SetBoneWeights(index int64, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[33], index, weights) }
func (gdClass Polygon2D) SetSkeleton(skeleton NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[34], skeleton) }
func (gdClass Polygon2D) GetSkeleton() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPolygon2D[35]) }
func (gdClass Polygon2D) SetInternalVertexCount(internal_vertex_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[36], internal_vertex_count) }
func (gdClass Polygon2D) GetInternalVertexCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPolygon2D[37]) }

type PolygonOccluder3D gdnative.Object

var methodPolygonOccluder3D [2]gdnative.Method
func (gdClass PolygonOccluder3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonOccluder3D[0], polygon) }
func (gdClass PolygonOccluder3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonOccluder3D[1]) }

type PolygonPathFinder gdnative.Object

var methodPolygonPathFinder [8]gdnative.Method
func (gdClass PolygonPathFinder) Setup(points []Vector2, connections []int32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonPathFinder[0], points, connections) }
func (gdClass PolygonPathFinder) FindPath(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[1], from, to) }
func (gdClass PolygonPathFinder) GetIntersections(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[2], from, to) }
func (gdClass PolygonPathFinder) GetClosestPoint(point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[3], point) }
func (gdClass PolygonPathFinder) IsPointInside(point Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygonPathFinder[4], point) }
func (gdClass PolygonPathFinder) SetPointPenalty(idx int64, penalty float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonPathFinder[5], idx, penalty) }
func (gdClass PolygonPathFinder) GetPointPenalty(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygonPathFinder[6], idx) }
func (gdClass PolygonPathFinder) GetBounds() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodPolygonPathFinder[7]) }

type Popup gdnative.Object

var methodPopup [0]gdnative.Method

type PopupMenu gdnative.Object

var methodPopupMenu [70]gdnative.Method
func (gdClass PopupMenu) AddItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[0], label, id, accel) }
func (gdClass PopupMenu) AddIconItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[1], texture, label, id, accel) }
func (gdClass PopupMenu) AddCheckItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[2], label, id, accel) }
func (gdClass PopupMenu) AddIconCheckItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[3], texture, label, id, accel) }
func (gdClass PopupMenu) AddRadioCheckItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[4], label, id, accel) }
func (gdClass PopupMenu) AddIconRadioCheckItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[5], texture, label, id, accel) }
func (gdClass PopupMenu) AddMultistateItem(label string, max_states int64, default_state int64, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[6], label, max_states, default_state, id, accel) }
func (gdClass PopupMenu) AddShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[7], shortcut, id, global) }
func (gdClass PopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[8], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddCheckShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[9], shortcut, id, global) }
func (gdClass PopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[10], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[11], shortcut, id, global) }
func (gdClass PopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[12], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddSubmenuItem(label string, submenu string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[13], label, submenu, id) }
func (gdClass PopupMenu) SetItemText(index int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[14], index, text) }
func (gdClass PopupMenu) SetItemTextDirection(index int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[15], index, direction) }
func (gdClass PopupMenu) SetItemLanguage(index int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[16], index, language) }
func (gdClass PopupMenu) SetItemIcon(index int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[17], index, icon) }
func (gdClass PopupMenu) SetItemChecked(index int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[18], index, checked) }
func (gdClass PopupMenu) SetItemId(index int64, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[19], index, id) }
func (gdClass PopupMenu) SetItemAccelerator(index int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[20], index, accel) }
func (gdClass PopupMenu) SetItemMetadata(index int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[21], index, metadata) }
func (gdClass PopupMenu) SetItemDisabled(index int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[22], index, disabled) }
func (gdClass PopupMenu) SetItemSubmenu(index int64, submenu string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[23], index, submenu) }
func (gdClass PopupMenu) SetItemAsSeparator(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[24], index, enable) }
func (gdClass PopupMenu) SetItemAsCheckable(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[25], index, enable) }
func (gdClass PopupMenu) SetItemAsRadioCheckable(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[26], index, enable) }
func (gdClass PopupMenu) SetItemTooltip(index int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[27], index, tooltip) }
func (gdClass PopupMenu) SetItemShortcut(index int64, shortcut Shortcut, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[28], index, shortcut, global) }
func (gdClass PopupMenu) SetItemHorizontalOffset(index int64, offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[29], index, offset) }
func (gdClass PopupMenu) SetItemMultistate(index int64, state int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[30], index, state) }
func (gdClass PopupMenu) SetItemShortcutDisabled(index int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[31], index, disabled) }
func (gdClass PopupMenu) ToggleItemChecked(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[32], index) }
func (gdClass PopupMenu) ToggleItemMultistate(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[33], index) }
func (gdClass PopupMenu) GetItemText(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[34], index) }
func (gdClass PopupMenu) GetItemTextDirection(index int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodPopupMenu[35], index) }
func (gdClass PopupMenu) GetItemLanguage(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[36], index) }
func (gdClass PopupMenu) GetItemIcon(index int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPopupMenu[37], index) }
func (gdClass PopupMenu) IsItemChecked(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[38], index) }
func (gdClass PopupMenu) GetItemId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[39], index) }
func (gdClass PopupMenu) GetItemIndex(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[40], id) }
func (gdClass PopupMenu) GetItemAccelerator(index int64) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodPopupMenu[41], index) }
func (gdClass PopupMenu) GetItemMetadata(index int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPopupMenu[42], index) }
func (gdClass PopupMenu) IsItemDisabled(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[43], index) }
func (gdClass PopupMenu) GetItemSubmenu(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[44], index) }
func (gdClass PopupMenu) IsItemSeparator(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[45], index) }
func (gdClass PopupMenu) IsItemCheckable(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[46], index) }
func (gdClass PopupMenu) IsItemRadioCheckable(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[47], index) }
func (gdClass PopupMenu) IsItemShortcutDisabled(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[48], index) }
func (gdClass PopupMenu) GetItemTooltip(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[49], index) }
func (gdClass PopupMenu) GetItemShortcut(index int64) Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodPopupMenu[50], index) }
func (gdClass PopupMenu) GetItemHorizontalOffset(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[51], index) }
func (gdClass PopupMenu) SetCurrentIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[52], index) }
func (gdClass PopupMenu) GetCurrentIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[53]) }
func (gdClass PopupMenu) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[54], count) }
func (gdClass PopupMenu) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[55]) }
func (gdClass PopupMenu) ScrollToItem(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[56], index) }
func (gdClass PopupMenu) RemoveItem(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[57], index) }
func (gdClass PopupMenu) AddSeparator(label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[58], label, id) }
func (gdClass PopupMenu) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[59]) }
func (gdClass PopupMenu) SetHideOnItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[60], enable) }
func (gdClass PopupMenu) IsHideOnItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[61]) }
func (gdClass PopupMenu) SetHideOnCheckableItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[62], enable) }
func (gdClass PopupMenu) IsHideOnCheckableItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[63]) }
func (gdClass PopupMenu) SetHideOnStateItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[64], enable) }
func (gdClass PopupMenu) IsHideOnStateItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[65]) }
func (gdClass PopupMenu) SetSubmenuPopupDelay(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[66], seconds) }
func (gdClass PopupMenu) GetSubmenuPopupDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPopupMenu[67]) }
func (gdClass PopupMenu) SetAllowSearch(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[68], allow) }
func (gdClass PopupMenu) GetAllowSearch() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[69]) }

type PopupPanel gdnative.Object

var methodPopupPanel [0]gdnative.Method

type PortableCompressedTexture2D gdnative.Object

var methodPortableCompressedTexture2D [9]gdnative.Method

type PortableCompressedTexture2DCompressionMode int64

const (
	PortableCompressedTexture2DCompressionModeLossless PortableCompressedTexture2DCompressionMode = 0
	PortableCompressedTexture2DCompressionModeLossy PortableCompressedTexture2DCompressionMode = 1
	PortableCompressedTexture2DCompressionModeBasisUniversal PortableCompressedTexture2DCompressionMode = 2
	PortableCompressedTexture2DCompressionModeS3tc PortableCompressedTexture2DCompressionMode = 3
	PortableCompressedTexture2DCompressionModeEtc2 PortableCompressedTexture2DCompressionMode = 4
	PortableCompressedTexture2DCompressionModeBptc PortableCompressedTexture2DCompressionMode = 5
)
func (gdClass PortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality float64)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[0], image, compression_mode, normal_map, lossy_quality) }
func (gdClass PortableCompressedTexture2D) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodPortableCompressedTexture2D[1]) }
func (gdClass PortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode { return gdnative.Return[PortableCompressedTexture2DCompressionMode](gdnative.Object(gdClass), methodPortableCompressedTexture2D[2]) }
func (gdClass PortableCompressedTexture2D) SetSizeOverride(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[3], size) }
func (gdClass PortableCompressedTexture2D) GetSizeOverride() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPortableCompressedTexture2D[4]) }
func (gdClass PortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[5], keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingCompressedBuffer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPortableCompressedTexture2D[6]) }
func (gdClass PortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[7], keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPortableCompressedTexture2D[8]) }

type Position2D gdnative.Object

var methodPosition2D [2]gdnative.Method
func (gdClass Position2D) SetGizmoExtents(extents float64)  { gdnative.Call(gdnative.Object(gdClass), methodPosition2D[0], extents) }
func (gdClass Position2D) GetGizmoExtents() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPosition2D[1]) }

type Position3D gdnative.Object

var methodPosition3D [0]gdnative.Method

type PrimitiveMesh gdnative.Object

var methodPrimitiveMesh [8]gdnative.Method
func (gdClass PrimitiveMesh) CreateMeshArrayImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPrimitiveMesh[0]) }
func (gdClass PrimitiveMesh) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[1], material) }
func (gdClass PrimitiveMesh) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodPrimitiveMesh[2]) }
func (gdClass PrimitiveMesh) GetMeshArrays() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPrimitiveMesh[3]) }
func (gdClass PrimitiveMesh) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[4], aabb) }
func (gdClass PrimitiveMesh) GetCustomAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodPrimitiveMesh[5]) }
func (gdClass PrimitiveMesh) SetFlipFaces(flip_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[6], flip_faces) }
func (gdClass PrimitiveMesh) GetFlipFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPrimitiveMesh[7]) }

type PrismMesh gdnative.Object

var methodPrismMesh [10]gdnative.Method
func (gdClass PrismMesh) SetLeftToRight(left_to_right float64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[0], left_to_right) }
func (gdClass PrismMesh) GetLeftToRight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPrismMesh[1]) }
func (gdClass PrismMesh) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[2], size) }
func (gdClass PrismMesh) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPrismMesh[3]) }
func (gdClass PrismMesh) SetSubdivideWidth(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[4], segments) }
func (gdClass PrismMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[5]) }
func (gdClass PrismMesh) SetSubdivideHeight(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[6], segments) }
func (gdClass PrismMesh) GetSubdivideHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[7]) }
func (gdClass PrismMesh) SetSubdivideDepth(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[8], segments) }
func (gdClass PrismMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[9]) }

type ProceduralSkyMaterial gdnative.Object

var methodProceduralSkyMaterial [26]gdnative.Method
func (gdClass ProceduralSkyMaterial) SetSkyTopColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[0], color) }
func (gdClass ProceduralSkyMaterial) GetSkyTopColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[1]) }
func (gdClass ProceduralSkyMaterial) SetSkyHorizonColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[2], color) }
func (gdClass ProceduralSkyMaterial) GetSkyHorizonColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[3]) }
func (gdClass ProceduralSkyMaterial) SetSkyCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[4], curve) }
func (gdClass ProceduralSkyMaterial) GetSkyCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[5]) }
func (gdClass ProceduralSkyMaterial) SetSkyEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[6], energy) }
func (gdClass ProceduralSkyMaterial) GetSkyEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[7]) }
func (gdClass ProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[8], sky_cover) }
func (gdClass ProceduralSkyMaterial) GetSkyCover() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodProceduralSkyMaterial[9]) }
func (gdClass ProceduralSkyMaterial) SetSkyCoverModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[10], color) }
func (gdClass ProceduralSkyMaterial) GetSkyCoverModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[11]) }
func (gdClass ProceduralSkyMaterial) SetGroundBottomColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[12], color) }
func (gdClass ProceduralSkyMaterial) GetGroundBottomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[13]) }
func (gdClass ProceduralSkyMaterial) SetGroundHorizonColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[14], color) }
func (gdClass ProceduralSkyMaterial) GetGroundHorizonColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[15]) }
func (gdClass ProceduralSkyMaterial) SetGroundCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[16], curve) }
func (gdClass ProceduralSkyMaterial) GetGroundCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[17]) }
func (gdClass ProceduralSkyMaterial) SetGroundEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[18], energy) }
func (gdClass ProceduralSkyMaterial) GetGroundEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[19]) }
func (gdClass ProceduralSkyMaterial) SetSunAngleMax(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[20], degrees) }
func (gdClass ProceduralSkyMaterial) GetSunAngleMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[21]) }
func (gdClass ProceduralSkyMaterial) SetSunCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[22], curve) }
func (gdClass ProceduralSkyMaterial) GetSunCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[23]) }
func (gdClass ProceduralSkyMaterial) SetUseDebanding(use_debanding bool)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[24], use_debanding) }
func (gdClass ProceduralSkyMaterial) GetUseDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProceduralSkyMaterial[25]) }

type ProgressBar gdnative.Object

var methodProgressBar [4]gdnative.Method

type ProgressBarFillMode int64

const (
	ProgressBarFillBeginToEnd ProgressBarFillMode = 0
	ProgressBarFillEndToBegin ProgressBarFillMode = 1
	ProgressBarFillTopToBottom ProgressBarFillMode = 2
	ProgressBarFillBottomToTop ProgressBarFillMode = 3
)
func (gdClass ProgressBar) SetFillMode(mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodProgressBar[0], mode) }
func (gdClass ProgressBar) GetFillMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodProgressBar[1]) }
func (gdClass ProgressBar) SetPercentVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodProgressBar[2], visible) }
func (gdClass ProgressBar) IsPercentVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProgressBar[3]) }

type ProjectSettings gdnative.Object

var methodProjectSettings [15]gdnative.Method
func (gdClass ProjectSettings) HasSetting(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProjectSettings[0], name) }
func (gdClass ProjectSettings) SetSetting(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[1], name, value) }
func (gdClass ProjectSettings) GetSetting(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodProjectSettings[2], name) }
func (gdClass ProjectSettings) SetOrder(name string, position int64)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[3], name, position) }
func (gdClass ProjectSettings) GetOrder(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodProjectSettings[4], name) }
func (gdClass ProjectSettings) SetInitialValue(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[5], name, value) }
func (gdClass ProjectSettings) AddPropertyInfo(hint Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[6], hint) }
func (gdClass ProjectSettings) Clear(name string)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[7], name) }
func (gdClass ProjectSettings) LocalizePath(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodProjectSettings[8], path) }
func (gdClass ProjectSettings) GlobalizePath(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodProjectSettings[9], path) }
func (gdClass ProjectSettings) Save() error { return gdnative.Return[error](gdnative.Object(gdClass), methodProjectSettings[10]) }
func (gdClass ProjectSettings) LoadResourcePack(pack string, replace_files bool, offset int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProjectSettings[11], pack, replace_files, offset) }
func (gdClass ProjectSettings) PropertyCanRevert(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProjectSettings[12], name) }
func (gdClass ProjectSettings) PropertyGetRevert(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodProjectSettings[13], name) }
func (gdClass ProjectSettings) SaveCustom(file string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodProjectSettings[14], file) }

type PropertyTweener gdnative.Object

var methodPropertyTweener [6]gdnative.Method
func (gdClass PropertyTweener) From(value any) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[0], value) }
func (gdClass PropertyTweener) FromCurrent() PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[1]) }
func (gdClass PropertyTweener) AsRelative() PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[2]) }
func (gdClass PropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[3], trans) }
func (gdClass PropertyTweener) SetEase(ease TweenEaseType) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[4], ease) }
func (gdClass PropertyTweener) SetDelay(delay float64) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[5], delay) }

type ProxyTexture gdnative.Object

var methodProxyTexture [2]gdnative.Method
func (gdClass ProxyTexture) SetBase(base Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodProxyTexture[0], base) }
func (gdClass ProxyTexture) GetBase() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodProxyTexture[1]) }

type QuadMesh gdnative.Object

var methodQuadMesh [4]gdnative.Method
func (gdClass QuadMesh) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodQuadMesh[0], size) }
func (gdClass QuadMesh) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodQuadMesh[1]) }
func (gdClass QuadMesh) SetCenterOffset(center_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodQuadMesh[2], center_offset) }
func (gdClass QuadMesh) GetCenterOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodQuadMesh[3]) }

type QuadOccluder3D gdnative.Object

var methodQuadOccluder3D [2]gdnative.Method
func (gdClass QuadOccluder3D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodQuadOccluder3D[0], size) }
func (gdClass QuadOccluder3D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodQuadOccluder3D[1]) }

type RDAttachmentFormat gdnative.Object

var methodRDAttachmentFormat [6]gdnative.Method
func (gdClass RDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[0], p_member) }
func (gdClass RDAttachmentFormat) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDAttachmentFormat[1]) }
func (gdClass RDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[2], p_member) }
func (gdClass RDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDAttachmentFormat[3]) }
func (gdClass RDAttachmentFormat) SetUsageFlags(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[4], p_member) }
func (gdClass RDAttachmentFormat) GetUsageFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDAttachmentFormat[5]) }

type RDFramebufferPass gdnative.Object

var methodRDFramebufferPass [10]gdnative.Method
func (gdClass RDFramebufferPass) SetColorAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[0], p_member) }
func (gdClass RDFramebufferPass) GetColorAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[1]) }
func (gdClass RDFramebufferPass) SetInputAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[2], p_member) }
func (gdClass RDFramebufferPass) GetInputAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[3]) }
func (gdClass RDFramebufferPass) SetResolveAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[4], p_member) }
func (gdClass RDFramebufferPass) GetResolveAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[5]) }
func (gdClass RDFramebufferPass) SetPreserveAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[6], p_member) }
func (gdClass RDFramebufferPass) GetPreserveAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[7]) }
func (gdClass RDFramebufferPass) SetDepthAttachment(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[8], p_member) }
func (gdClass RDFramebufferPass) GetDepthAttachment() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDFramebufferPass[9]) }

type RDPipelineColorBlendState gdnative.Object

var methodRDPipelineColorBlendState [8]gdnative.Method
func (gdClass RDPipelineColorBlendState) SetEnableLogicOp(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[0], p_member) }
func (gdClass RDPipelineColorBlendState) GetEnableLogicOp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendState[1]) }
func (gdClass RDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[2], p_member) }
func (gdClass RDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation { return gdnative.Return[RenderingDeviceLogicOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendState[3]) }
func (gdClass RDPipelineColorBlendState) SetBlendConstant(p_member Color)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[4], p_member) }
func (gdClass RDPipelineColorBlendState) GetBlendConstant() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRDPipelineColorBlendState[5]) }
func (gdClass RDPipelineColorBlendState) SetAttachments(attachments Array)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[6], attachments) }
func (gdClass RDPipelineColorBlendState) GetAttachments() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDPipelineColorBlendState[7]) }

type RDPipelineColorBlendStateAttachment gdnative.Object

var methodRDPipelineColorBlendStateAttachment [23]gdnative.Method
func (gdClass RDPipelineColorBlendStateAttachment) SetAsMix()  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[0]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[1], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetEnableBlend() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[2]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[3], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[4]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[5], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[6]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[7], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation { return gdnative.Return[RenderingDeviceBlendOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[8]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[9], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[10]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[11], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[12]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[13], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation { return gdnative.Return[RenderingDeviceBlendOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[14]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteR(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[15], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteR() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[16]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteG(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[17], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteG() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[18]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteB(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[19], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteB() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[20]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteA(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[21], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteA() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[22]) }

type RDPipelineDepthStencilState gdnative.Object

var methodRDPipelineDepthStencilState [42]gdnative.Method
func (gdClass RDPipelineDepthStencilState) SetEnableDepthTest(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[0], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthTest() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[1]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[2], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthWrite() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[3]) }
func (gdClass RDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[4], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[5]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthRange(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[6], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthRange() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[7]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMin(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[8], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[9]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMax(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[10], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[11]) }
func (gdClass RDPipelineDepthStencilState) SetEnableStencil(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[12], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableStencil() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[13]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[14], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[15]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[16], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[17]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[18], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[19]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[20], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[21]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompareMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[22], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompareMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[23]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpWriteMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[24], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpWriteMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[25]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpReference(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[26], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpReference() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[27]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[28], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[29]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[30], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[31]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[32], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[33]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[34], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[35]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompareMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[36], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompareMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[37]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpWriteMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[38], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpWriteMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[39]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpReference(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[40], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpReference() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[41]) }

type RDPipelineMultisampleState gdnative.Object

var methodRDPipelineMultisampleState [12]gdnative.Method
func (gdClass RDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[0], p_member) }
func (gdClass RDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDPipelineMultisampleState[1]) }
func (gdClass RDPipelineMultisampleState) SetEnableSampleShading(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[2], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableSampleShading() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[3]) }
func (gdClass RDPipelineMultisampleState) SetMinSampleShading(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[4], p_member) }
func (gdClass RDPipelineMultisampleState) GetMinSampleShading() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineMultisampleState[5]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[6], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToCoverage() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[7]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[8], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToOne() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[9]) }
func (gdClass RDPipelineMultisampleState) SetSampleMasks(masks Array)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[10], masks) }
func (gdClass RDPipelineMultisampleState) GetSampleMasks() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDPipelineMultisampleState[11]) }

type RDPipelineRasterizationState gdnative.Object

var methodRDPipelineRasterizationState [22]gdnative.Method
func (gdClass RDPipelineRasterizationState) SetEnableDepthClamp(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[0], p_member) }
func (gdClass RDPipelineRasterizationState) GetEnableDepthClamp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[1]) }
func (gdClass RDPipelineRasterizationState) SetDiscardPrimitives(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[2], p_member) }
func (gdClass RDPipelineRasterizationState) GetDiscardPrimitives() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[3]) }
func (gdClass RDPipelineRasterizationState) SetWireframe(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[4], p_member) }
func (gdClass RDPipelineRasterizationState) GetWireframe() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[5]) }
func (gdClass RDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[6], p_member) }
func (gdClass RDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode { return gdnative.Return[RenderingDevicePolygonCullMode](gdnative.Object(gdClass), methodRDPipelineRasterizationState[7]) }
func (gdClass RDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[8], p_member) }
func (gdClass RDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace { return gdnative.Return[RenderingDevicePolygonFrontFace](gdnative.Object(gdClass), methodRDPipelineRasterizationState[9]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasEnable(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[10], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasEnable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[11]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[12], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasConstantFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[13]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasClamp(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[14], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasClamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[15]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[16], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasSlopeFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[17]) }
func (gdClass RDPipelineRasterizationState) SetLineWidth(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[18], p_member) }
func (gdClass RDPipelineRasterizationState) GetLineWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[19]) }
func (gdClass RDPipelineRasterizationState) SetPatchControlPoints(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[20], p_member) }
func (gdClass RDPipelineRasterizationState) GetPatchControlPoints() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[21]) }

type RDPipelineSpecializationConstant gdnative.Object

var methodRDPipelineSpecializationConstant [4]gdnative.Method
func (gdClass RDPipelineSpecializationConstant) SetValue(value any)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[0], value) }
func (gdClass RDPipelineSpecializationConstant) GetValue() any { return gdnative.Return[any](gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[1]) }
func (gdClass RDPipelineSpecializationConstant) SetConstantId(constant_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[2], constant_id) }
func (gdClass RDPipelineSpecializationConstant) GetConstantId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[3]) }

type RDSamplerState gdnative.Object

var methodRDSamplerState [30]gdnative.Method
func (gdClass RDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[0], p_member) }
func (gdClass RDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[1]) }
func (gdClass RDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[2], p_member) }
func (gdClass RDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[3]) }
func (gdClass RDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[4], p_member) }
func (gdClass RDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[5]) }
func (gdClass RDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[6], p_member) }
func (gdClass RDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[7]) }
func (gdClass RDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[8], p_member) }
func (gdClass RDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[9]) }
func (gdClass RDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[10], p_member) }
func (gdClass RDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[11]) }
func (gdClass RDSamplerState) SetLodBias(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[12], p_member) }
func (gdClass RDSamplerState) GetLodBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[13]) }
func (gdClass RDSamplerState) SetUseAnisotropy(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[14], p_member) }
func (gdClass RDSamplerState) GetUseAnisotropy() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[15]) }
func (gdClass RDSamplerState) SetAnisotropyMax(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[16], p_member) }
func (gdClass RDSamplerState) GetAnisotropyMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[17]) }
func (gdClass RDSamplerState) SetEnableCompare(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[18], p_member) }
func (gdClass RDSamplerState) GetEnableCompare() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[19]) }
func (gdClass RDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[20], p_member) }
func (gdClass RDSamplerState) GetCompareOp() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDSamplerState[21]) }
func (gdClass RDSamplerState) SetMinLod(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[22], p_member) }
func (gdClass RDSamplerState) GetMinLod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[23]) }
func (gdClass RDSamplerState) SetMaxLod(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[24], p_member) }
func (gdClass RDSamplerState) GetMaxLod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[25]) }
func (gdClass RDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[26], p_member) }
func (gdClass RDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor { return gdnative.Return[RenderingDeviceSamplerBorderColor](gdnative.Object(gdClass), methodRDSamplerState[27]) }
func (gdClass RDSamplerState) SetUnnormalizedUvw(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[28], p_member) }
func (gdClass RDSamplerState) GetUnnormalizedUvw() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[29]) }

type RDShaderFile gdnative.Object

var methodRDShaderFile [5]gdnative.Method
func (gdClass RDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderFile[0], bytecode, version) }
func (gdClass RDShaderFile) GetSpirv(version string) RDShaderSPIRV { return gdnative.Return[RDShaderSPIRV](gdnative.Object(gdClass), methodRDShaderFile[1], version) }
func (gdClass RDShaderFile) GetVersionList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodRDShaderFile[2]) }
func (gdClass RDShaderFile) SetBaseError(error string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderFile[3], error) }
func (gdClass RDShaderFile) GetBaseError() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderFile[4]) }

type RDShaderSPIRV gdnative.Object

var methodRDShaderSPIRV [4]gdnative.Method
func (gdClass RDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSPIRV[0], stage, bytecode) }
func (gdClass RDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRDShaderSPIRV[1], stage) }
func (gdClass RDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSPIRV[2], stage, compile_error) }
func (gdClass RDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderSPIRV[3], stage) }

type RDShaderSource gdnative.Object

var methodRDShaderSource [4]gdnative.Method
func (gdClass RDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSource[0], stage, source) }
func (gdClass RDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderSource[1], stage) }
func (gdClass RDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSource[2], language) }
func (gdClass RDShaderSource) GetLanguage() RenderingDeviceShaderLanguage { return gdnative.Return[RenderingDeviceShaderLanguage](gdnative.Object(gdClass), methodRDShaderSource[3]) }

type RDTextureFormat gdnative.Object

var methodRDTextureFormat [20]gdnative.Method
func (gdClass RDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[0], p_member) }
func (gdClass RDTextureFormat) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDTextureFormat[1]) }
func (gdClass RDTextureFormat) SetWidth(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[2], p_member) }
func (gdClass RDTextureFormat) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[3]) }
func (gdClass RDTextureFormat) SetHeight(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[4], p_member) }
func (gdClass RDTextureFormat) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[5]) }
func (gdClass RDTextureFormat) SetDepth(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[6], p_member) }
func (gdClass RDTextureFormat) GetDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[7]) }
func (gdClass RDTextureFormat) SetArrayLayers(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[8], p_member) }
func (gdClass RDTextureFormat) GetArrayLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[9]) }
func (gdClass RDTextureFormat) SetMipmaps(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[10], p_member) }
func (gdClass RDTextureFormat) GetMipmaps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[11]) }
func (gdClass RDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[12], p_member) }
func (gdClass RDTextureFormat) GetTextureType() RenderingDeviceTextureType { return gdnative.Return[RenderingDeviceTextureType](gdnative.Object(gdClass), methodRDTextureFormat[13]) }
func (gdClass RDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[14], p_member) }
func (gdClass RDTextureFormat) GetSamples() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDTextureFormat[15]) }
func (gdClass RDTextureFormat) SetUsageBits(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[16], p_member) }
func (gdClass RDTextureFormat) GetUsageBits() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[17]) }
func (gdClass RDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[18], format) }
func (gdClass RDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[19], format) }

type RDTextureView gdnative.Object

var methodRDTextureView [10]gdnative.Method
func (gdClass RDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[0], p_member) }
func (gdClass RDTextureView) GetFormatOverride() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDTextureView[1]) }
func (gdClass RDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[2], p_member) }
func (gdClass RDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[3]) }
func (gdClass RDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[4], p_member) }
func (gdClass RDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[5]) }
func (gdClass RDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[6], p_member) }
func (gdClass RDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[7]) }
func (gdClass RDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[8], p_member) }
func (gdClass RDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[9]) }

type RDUniform gdnative.Object

var methodRDUniform [7]gdnative.Method
func (gdClass RDUniform) SetUniformType(p_member RenderingDeviceUniformType)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[0], p_member) }
func (gdClass RDUniform) GetUniformType() RenderingDeviceUniformType { return gdnative.Return[RenderingDeviceUniformType](gdnative.Object(gdClass), methodRDUniform[1]) }
func (gdClass RDUniform) SetBinding(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[2], p_member) }
func (gdClass RDUniform) GetBinding() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDUniform[3]) }
func (gdClass RDUniform) AddId(id RID)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[4], id) }
func (gdClass RDUniform) ClearIds()  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[5]) }
func (gdClass RDUniform) GetIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDUniform[6]) }

type RDVertexAttribute gdnative.Object

var methodRDVertexAttribute [10]gdnative.Method
func (gdClass RDVertexAttribute) SetLocation(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[0], p_member) }
func (gdClass RDVertexAttribute) GetLocation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[1]) }
func (gdClass RDVertexAttribute) SetOffset(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[2], p_member) }
func (gdClass RDVertexAttribute) GetOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[3]) }
func (gdClass RDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[4], p_member) }
func (gdClass RDVertexAttribute) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDVertexAttribute[5]) }
func (gdClass RDVertexAttribute) SetStride(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[6], p_member) }
func (gdClass RDVertexAttribute) GetStride() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[7]) }
func (gdClass RDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[8], p_member) }
func (gdClass RDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency { return gdnative.Return[RenderingDeviceVertexFrequency](gdnative.Object(gdClass), methodRDVertexAttribute[9]) }

type RandomNumberGenerator gdnative.Object

var methodRandomNumberGenerator [10]gdnative.Method
func (gdClass RandomNumberGenerator) SetSeed(seed int64)  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[0], seed) }
func (gdClass RandomNumberGenerator) GetSeed() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[1]) }
func (gdClass RandomNumberGenerator) SetState(state int64)  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[2], state) }
func (gdClass RandomNumberGenerator) GetState() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[3]) }
func (gdClass RandomNumberGenerator) Randi() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[4]) }
func (gdClass RandomNumberGenerator) Randf() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[5]) }
func (gdClass RandomNumberGenerator) Randfn(mean float64, deviation float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[6], mean, deviation) }
func (gdClass RandomNumberGenerator) RandfRange(from float64, to float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[7], from, to) }
func (gdClass RandomNumberGenerator) RandiRange(from int64, to int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[8], from, to) }
func (gdClass RandomNumberGenerator) Randomize()  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[9]) }

type Range gdnative.Object

var methodRange [23]gdnative.Method
func (gdClass Range) ValueChangedImplementation(new_value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[0], new_value) }
func (gdClass Range) GetValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[1]) }
func (gdClass Range) GetMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[2]) }
func (gdClass Range) GetMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[3]) }
func (gdClass Range) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[4]) }
func (gdClass Range) GetPage() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[5]) }
func (gdClass Range) GetAsRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[6]) }
func (gdClass Range) SetValue(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[7], value) }
func (gdClass Range) SetMin(minimum float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[8], minimum) }
func (gdClass Range) SetMax(maximum float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[9], maximum) }
func (gdClass Range) SetStep(step float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[10], step) }
func (gdClass Range) SetPage(pagesize float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[11], pagesize) }
func (gdClass Range) SetAsRatio(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[12], value) }
func (gdClass Range) SetUseRoundedValues(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[13], enabled) }
func (gdClass Range) IsUsingRoundedValues() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[14]) }
func (gdClass Range) SetExpRatio(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[15], enabled) }
func (gdClass Range) IsRatioExp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[16]) }
func (gdClass Range) SetAllowGreater(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[17], allow) }
func (gdClass Range) IsGreaterAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[18]) }
func (gdClass Range) SetAllowLesser(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[19], allow) }
func (gdClass Range) IsLesserAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[20]) }
func (gdClass Range) Share(with Node)  { gdnative.Call(gdnative.Object(gdClass), methodRange[21], with) }
func (gdClass Range) Unshare()  { gdnative.Call(gdnative.Object(gdClass), methodRange[22]) }

type RayCast2D gdnative.Object

var methodRayCast2D [27]gdnative.Method
func (gdClass RayCast2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[0], enabled) }
func (gdClass RayCast2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[1]) }
func (gdClass RayCast2D) SetTargetPosition(local_point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[2], local_point) }
func (gdClass RayCast2D) GetTargetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[3]) }
func (gdClass RayCast2D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[4]) }
func (gdClass RayCast2D) ForceRaycastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[5]) }
func (gdClass RayCast2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodRayCast2D[6]) }
func (gdClass RayCast2D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast2D[7]) }
func (gdClass RayCast2D) GetCollisionPoint() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[8]) }
func (gdClass RayCast2D) GetCollisionNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[9]) }
func (gdClass RayCast2D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[10], rid) }
func (gdClass RayCast2D) AddException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[11], node) }
func (gdClass RayCast2D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[12], rid) }
func (gdClass RayCast2D) RemoveException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[13], node) }
func (gdClass RayCast2D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[14]) }
func (gdClass RayCast2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[15], mask) }
func (gdClass RayCast2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast2D[16]) }
func (gdClass RayCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[17], layer_number, value) }
func (gdClass RayCast2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[18], layer_number) }
func (gdClass RayCast2D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[19], mask) }
func (gdClass RayCast2D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[20]) }
func (gdClass RayCast2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[21], enable) }
func (gdClass RayCast2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[22]) }
func (gdClass RayCast2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[23], enable) }
func (gdClass RayCast2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[24]) }
func (gdClass RayCast2D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[25], enable) }
func (gdClass RayCast2D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[26]) }

type RayCast3D gdnative.Object

var methodRayCast3D [31]gdnative.Method
func (gdClass RayCast3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[0], enabled) }
func (gdClass RayCast3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[1]) }
func (gdClass RayCast3D) SetTargetPosition(local_point Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[2], local_point) }
func (gdClass RayCast3D) GetTargetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[3]) }
func (gdClass RayCast3D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[4]) }
func (gdClass RayCast3D) ForceRaycastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[5]) }
func (gdClass RayCast3D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodRayCast3D[6]) }
func (gdClass RayCast3D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[7]) }
func (gdClass RayCast3D) GetCollisionPoint() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[8]) }
func (gdClass RayCast3D) GetCollisionNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[9]) }
func (gdClass RayCast3D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[10], rid) }
func (gdClass RayCast3D) AddException(node CollisionObject3D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[11], node) }
func (gdClass RayCast3D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[12], rid) }
func (gdClass RayCast3D) RemoveException(node CollisionObject3D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[13], node) }
func (gdClass RayCast3D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[14]) }
func (gdClass RayCast3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[15], mask) }
func (gdClass RayCast3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[16]) }
func (gdClass RayCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[17], layer_number, value) }
func (gdClass RayCast3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[18], layer_number) }
func (gdClass RayCast3D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[19], mask) }
func (gdClass RayCast3D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[20]) }
func (gdClass RayCast3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[21], enable) }
func (gdClass RayCast3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[22]) }
func (gdClass RayCast3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[23], enable) }
func (gdClass RayCast3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[24]) }
func (gdClass RayCast3D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[25], enable) }
func (gdClass RayCast3D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[26]) }
func (gdClass RayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[27], debug_shape_custom_color) }
func (gdClass RayCast3D) GetDebugShapeCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRayCast3D[28]) }
func (gdClass RayCast3D) SetDebugShapeThickness(debug_shape_thickness int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[29], debug_shape_thickness) }
func (gdClass RayCast3D) GetDebugShapeThickness() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[30]) }

type RectangleShape2D gdnative.Object

var methodRectangleShape2D [2]gdnative.Method
func (gdClass RectangleShape2D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRectangleShape2D[0], size) }
func (gdClass RectangleShape2D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRectangleShape2D[1]) }

type RefCounted gdnative.Object

var methodRefCounted [3]gdnative.Method
func (gdClass RefCounted) InitRef() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[0]) }
func (gdClass RefCounted) Reference() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[1]) }
func (gdClass RefCounted) Unreference() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[2]) }

type ReferenceRect gdnative.Object

var methodReferenceRect [6]gdnative.Method
func (gdClass ReferenceRect) GetBorderColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodReferenceRect[0]) }
func (gdClass ReferenceRect) SetBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[1], color) }
func (gdClass ReferenceRect) GetBorderWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReferenceRect[2]) }
func (gdClass ReferenceRect) SetBorderWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[3], width) }
func (gdClass ReferenceRect) GetEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReferenceRect[4]) }
func (gdClass ReferenceRect) SetEditorOnly(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[5], enabled) }

type ReflectionProbe gdnative.Object

var methodReflectionProbe [26]gdnative.Method

type ReflectionProbeUpdateMode int64

const (
	ReflectionProbeUpdateOnce ReflectionProbeUpdateMode = 0
	ReflectionProbeUpdateAlways ReflectionProbeUpdateMode = 1
)

type ReflectionProbeAmbientMode int64

const (
	ReflectionProbeAmbientDisabled ReflectionProbeAmbientMode = 0
	ReflectionProbeAmbientEnvironment ReflectionProbeAmbientMode = 1
	ReflectionProbeAmbientColor ReflectionProbeAmbientMode = 2
)
func (gdClass ReflectionProbe) SetIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[0], intensity) }
func (gdClass ReflectionProbe) GetIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[1]) }
func (gdClass ReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[2], ambient) }
func (gdClass ReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode { return gdnative.Return[ReflectionProbeAmbientMode](gdnative.Object(gdClass), methodReflectionProbe[3]) }
func (gdClass ReflectionProbe) SetAmbientColor(ambient Color)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[4], ambient) }
func (gdClass ReflectionProbe) GetAmbientColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodReflectionProbe[5]) }
func (gdClass ReflectionProbe) SetAmbientColorEnergy(ambient_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[6], ambient_energy) }
func (gdClass ReflectionProbe) GetAmbientColorEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[7]) }
func (gdClass ReflectionProbe) SetMaxDistance(max_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[8], max_distance) }
func (gdClass ReflectionProbe) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[9]) }
func (gdClass ReflectionProbe) SetMeshLodThreshold(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[10], ratio) }
func (gdClass ReflectionProbe) GetMeshLodThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[11]) }
func (gdClass ReflectionProbe) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[12], extents) }
func (gdClass ReflectionProbe) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodReflectionProbe[13]) }
func (gdClass ReflectionProbe) SetOriginOffset(origin_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[14], origin_offset) }
func (gdClass ReflectionProbe) GetOriginOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodReflectionProbe[15]) }
func (gdClass ReflectionProbe) SetAsInterior(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[16], enable) }
func (gdClass ReflectionProbe) IsSetAsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[17]) }
func (gdClass ReflectionProbe) SetEnableBoxProjection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[18], enable) }
func (gdClass ReflectionProbe) IsBoxProjectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[19]) }
func (gdClass ReflectionProbe) SetEnableShadows(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[20], enable) }
func (gdClass ReflectionProbe) AreShadowsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[21]) }
func (gdClass ReflectionProbe) SetCullMask(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[22], layers) }
func (gdClass ReflectionProbe) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodReflectionProbe[23]) }
func (gdClass ReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[24], mode) }
func (gdClass ReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode { return gdnative.Return[ReflectionProbeUpdateMode](gdnative.Object(gdClass), methodReflectionProbe[25]) }

type RegEx gdnative.Object

var methodRegEx [10]gdnative.Method
func (gdClass RegEx) CreateFromString(pattern string) RegEx { return gdnative.Return[RegEx](gdnative.Object(gdClass), methodRegEx[0], pattern) }
func (gdClass RegEx) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodRegEx[1]) }
func (gdClass RegEx) Compile(pattern string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRegEx[2], pattern) }
func (gdClass RegEx) Search(subject string, offset int64, end int64) RegExMatch { return gdnative.Return[RegExMatch](gdnative.Object(gdClass), methodRegEx[3], subject, offset, end) }
func (gdClass RegEx) SearchAll(subject string, offset int64, end int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegEx[4], subject, offset, end) }
func (gdClass RegEx) Sub(subject string, replacement string, all bool, offset int64, end int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegEx[5], subject, replacement, all, offset, end) }
func (gdClass RegEx) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRegEx[6]) }
func (gdClass RegEx) GetPattern() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegEx[7]) }
func (gdClass RegEx) GetGroupCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegEx[8]) }
func (gdClass RegEx) GetNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegEx[9]) }

type RegExMatch gdnative.Object

var methodRegExMatch [7]gdnative.Method
func (gdClass RegExMatch) GetSubject() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegExMatch[0]) }
func (gdClass RegExMatch) GetGroupCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[1]) }
func (gdClass RegExMatch) GetNames() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRegExMatch[2]) }
func (gdClass RegExMatch) GetStrings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegExMatch[3]) }
func (gdClass RegExMatch) GetString(name any) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegExMatch[4], name) }
func (gdClass RegExMatch) GetStart(name any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[5], name) }
func (gdClass RegExMatch) GetEnd(name any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[6], name) }

type RemoteTransform2D gdnative.Object

var methodRemoteTransform2D [11]gdnative.Method
func (gdClass RemoteTransform2D) SetRemoteNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[0], path) }
func (gdClass RemoteTransform2D) GetRemoteNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRemoteTransform2D[1]) }
func (gdClass RemoteTransform2D) ForceUpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[2]) }
func (gdClass RemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[3], use_global_coordinates) }
func (gdClass RemoteTransform2D) GetUseGlobalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[4]) }
func (gdClass RemoteTransform2D) SetUpdatePosition(update_remote_position bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[5], update_remote_position) }
func (gdClass RemoteTransform2D) GetUpdatePosition() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[6]) }
func (gdClass RemoteTransform2D) SetUpdateRotation(update_remote_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[7], update_remote_rotation) }
func (gdClass RemoteTransform2D) GetUpdateRotation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[8]) }
func (gdClass RemoteTransform2D) SetUpdateScale(update_remote_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[9], update_remote_scale) }
func (gdClass RemoteTransform2D) GetUpdateScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[10]) }

type RemoteTransform3D gdnative.Object

var methodRemoteTransform3D [11]gdnative.Method
func (gdClass RemoteTransform3D) SetRemoteNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[0], path) }
func (gdClass RemoteTransform3D) GetRemoteNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRemoteTransform3D[1]) }
func (gdClass RemoteTransform3D) ForceUpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[2]) }
func (gdClass RemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[3], use_global_coordinates) }
func (gdClass RemoteTransform3D) GetUseGlobalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[4]) }
func (gdClass RemoteTransform3D) SetUpdatePosition(update_remote_position bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[5], update_remote_position) }
func (gdClass RemoteTransform3D) GetUpdatePosition() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[6]) }
func (gdClass RemoteTransform3D) SetUpdateRotation(update_remote_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[7], update_remote_rotation) }
func (gdClass RemoteTransform3D) GetUpdateRotation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[8]) }
func (gdClass RemoteTransform3D) SetUpdateScale(update_remote_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[9], update_remote_scale) }
func (gdClass RemoteTransform3D) GetUpdateScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[10]) }

type RenderingDevice gdnative.Object

var methodRenderingDevice [89]gdnative.Method

type RenderingDeviceDeviceType int64

const (
	RenderingDeviceDeviceTypeOther RenderingDeviceDeviceType = 0
	RenderingDeviceDeviceTypeIntegratedGpu RenderingDeviceDeviceType = 1
	RenderingDeviceDeviceTypeDiscreteGpu RenderingDeviceDeviceType = 2
	RenderingDeviceDeviceTypeVirtualGpu RenderingDeviceDeviceType = 3
	RenderingDeviceDeviceTypeCpu RenderingDeviceDeviceType = 4
	RenderingDeviceDeviceTypeMax RenderingDeviceDeviceType = 5
)

type RenderingDeviceDriverResource int64

const (
	RenderingDeviceDriverResourceVulkanDevice RenderingDeviceDriverResource = 0
	RenderingDeviceDriverResourceVulkanPhysicalDevice RenderingDeviceDriverResource = 1
	RenderingDeviceDriverResourceVulkanInstance RenderingDeviceDriverResource = 2
	RenderingDeviceDriverResourceVulkanQueue RenderingDeviceDriverResource = 3
	RenderingDeviceDriverResourceVulkanQueueFamilyIndex RenderingDeviceDriverResource = 4
	RenderingDeviceDriverResourceVulkanImage RenderingDeviceDriverResource = 5
	RenderingDeviceDriverResourceVulkanImageView RenderingDeviceDriverResource = 6
	RenderingDeviceDriverResourceVulkanImageNativeTextureFormat RenderingDeviceDriverResource = 7
	RenderingDeviceDriverResourceVulkanSampler RenderingDeviceDriverResource = 8
	RenderingDeviceDriverResourceVulkanDescriptorSet RenderingDeviceDriverResource = 9
	RenderingDeviceDriverResourceVulkanBuffer RenderingDeviceDriverResource = 10
	RenderingDeviceDriverResourceVulkanComputePipeline RenderingDeviceDriverResource = 11
	RenderingDeviceDriverResourceVulkanRenderPipeline RenderingDeviceDriverResource = 12
)

type RenderingDeviceDataFormat int64

const (
	RenderingDeviceDataFormatR4g4UnormPack8 RenderingDeviceDataFormat = 0
	RenderingDeviceDataFormatR4g4b4a4UnormPack16 RenderingDeviceDataFormat = 1
	RenderingDeviceDataFormatB4g4r4a4UnormPack16 RenderingDeviceDataFormat = 2
	RenderingDeviceDataFormatR5g6b5UnormPack16 RenderingDeviceDataFormat = 3
	RenderingDeviceDataFormatB5g6r5UnormPack16 RenderingDeviceDataFormat = 4
	RenderingDeviceDataFormatR5g5b5a1UnormPack16 RenderingDeviceDataFormat = 5
	RenderingDeviceDataFormatB5g5r5a1UnormPack16 RenderingDeviceDataFormat = 6
	RenderingDeviceDataFormatA1r5g5b5UnormPack16 RenderingDeviceDataFormat = 7
	RenderingDeviceDataFormatR8Unorm RenderingDeviceDataFormat = 8
	RenderingDeviceDataFormatR8Snorm RenderingDeviceDataFormat = 9
	RenderingDeviceDataFormatR8Uscaled RenderingDeviceDataFormat = 10
	RenderingDeviceDataFormatR8Sscaled RenderingDeviceDataFormat = 11
	RenderingDeviceDataFormatR8Uint RenderingDeviceDataFormat = 12
	RenderingDeviceDataFormatR8Sint RenderingDeviceDataFormat = 13
	RenderingDeviceDataFormatR8Srgb RenderingDeviceDataFormat = 14
	RenderingDeviceDataFormatR8g8Unorm RenderingDeviceDataFormat = 15
	RenderingDeviceDataFormatR8g8Snorm RenderingDeviceDataFormat = 16
	RenderingDeviceDataFormatR8g8Uscaled RenderingDeviceDataFormat = 17
	RenderingDeviceDataFormatR8g8Sscaled RenderingDeviceDataFormat = 18
	RenderingDeviceDataFormatR8g8Uint RenderingDeviceDataFormat = 19
	RenderingDeviceDataFormatR8g8Sint RenderingDeviceDataFormat = 20
	RenderingDeviceDataFormatR8g8Srgb RenderingDeviceDataFormat = 21
	RenderingDeviceDataFormatR8g8b8Unorm RenderingDeviceDataFormat = 22
	RenderingDeviceDataFormatR8g8b8Snorm RenderingDeviceDataFormat = 23
	RenderingDeviceDataFormatR8g8b8Uscaled RenderingDeviceDataFormat = 24
	RenderingDeviceDataFormatR8g8b8Sscaled RenderingDeviceDataFormat = 25
	RenderingDeviceDataFormatR8g8b8Uint RenderingDeviceDataFormat = 26
	RenderingDeviceDataFormatR8g8b8Sint RenderingDeviceDataFormat = 27
	RenderingDeviceDataFormatR8g8b8Srgb RenderingDeviceDataFormat = 28
	RenderingDeviceDataFormatB8g8r8Unorm RenderingDeviceDataFormat = 29
	RenderingDeviceDataFormatB8g8r8Snorm RenderingDeviceDataFormat = 30
	RenderingDeviceDataFormatB8g8r8Uscaled RenderingDeviceDataFormat = 31
	RenderingDeviceDataFormatB8g8r8Sscaled RenderingDeviceDataFormat = 32
	RenderingDeviceDataFormatB8g8r8Uint RenderingDeviceDataFormat = 33
	RenderingDeviceDataFormatB8g8r8Sint RenderingDeviceDataFormat = 34
	RenderingDeviceDataFormatB8g8r8Srgb RenderingDeviceDataFormat = 35
	RenderingDeviceDataFormatR8g8b8a8Unorm RenderingDeviceDataFormat = 36
	RenderingDeviceDataFormatR8g8b8a8Snorm RenderingDeviceDataFormat = 37
	RenderingDeviceDataFormatR8g8b8a8Uscaled RenderingDeviceDataFormat = 38
	RenderingDeviceDataFormatR8g8b8a8Sscaled RenderingDeviceDataFormat = 39
	RenderingDeviceDataFormatR8g8b8a8Uint RenderingDeviceDataFormat = 40
	RenderingDeviceDataFormatR8g8b8a8Sint RenderingDeviceDataFormat = 41
	RenderingDeviceDataFormatR8g8b8a8Srgb RenderingDeviceDataFormat = 42
	RenderingDeviceDataFormatB8g8r8a8Unorm RenderingDeviceDataFormat = 43
	RenderingDeviceDataFormatB8g8r8a8Snorm RenderingDeviceDataFormat = 44
	RenderingDeviceDataFormatB8g8r8a8Uscaled RenderingDeviceDataFormat = 45
	RenderingDeviceDataFormatB8g8r8a8Sscaled RenderingDeviceDataFormat = 46
	RenderingDeviceDataFormatB8g8r8a8Uint RenderingDeviceDataFormat = 47
	RenderingDeviceDataFormatB8g8r8a8Sint RenderingDeviceDataFormat = 48
	RenderingDeviceDataFormatB8g8r8a8Srgb RenderingDeviceDataFormat = 49
	RenderingDeviceDataFormatA8b8g8r8UnormPack32 RenderingDeviceDataFormat = 50
	RenderingDeviceDataFormatA8b8g8r8SnormPack32 RenderingDeviceDataFormat = 51
	RenderingDeviceDataFormatA8b8g8r8UscaledPack32 RenderingDeviceDataFormat = 52
	RenderingDeviceDataFormatA8b8g8r8SscaledPack32 RenderingDeviceDataFormat = 53
	RenderingDeviceDataFormatA8b8g8r8UintPack32 RenderingDeviceDataFormat = 54
	RenderingDeviceDataFormatA8b8g8r8SintPack32 RenderingDeviceDataFormat = 55
	RenderingDeviceDataFormatA8b8g8r8SrgbPack32 RenderingDeviceDataFormat = 56
	RenderingDeviceDataFormatA2r10g10b10UnormPack32 RenderingDeviceDataFormat = 57
	RenderingDeviceDataFormatA2r10g10b10SnormPack32 RenderingDeviceDataFormat = 58
	RenderingDeviceDataFormatA2r10g10b10UscaledPack32 RenderingDeviceDataFormat = 59
	RenderingDeviceDataFormatA2r10g10b10SscaledPack32 RenderingDeviceDataFormat = 60
	RenderingDeviceDataFormatA2r10g10b10UintPack32 RenderingDeviceDataFormat = 61
	RenderingDeviceDataFormatA2r10g10b10SintPack32 RenderingDeviceDataFormat = 62
	RenderingDeviceDataFormatA2b10g10r10UnormPack32 RenderingDeviceDataFormat = 63
	RenderingDeviceDataFormatA2b10g10r10SnormPack32 RenderingDeviceDataFormat = 64
	RenderingDeviceDataFormatA2b10g10r10UscaledPack32 RenderingDeviceDataFormat = 65
	RenderingDeviceDataFormatA2b10g10r10SscaledPack32 RenderingDeviceDataFormat = 66
	RenderingDeviceDataFormatA2b10g10r10UintPack32 RenderingDeviceDataFormat = 67
	RenderingDeviceDataFormatA2b10g10r10SintPack32 RenderingDeviceDataFormat = 68
	RenderingDeviceDataFormatR16Unorm RenderingDeviceDataFormat = 69
	RenderingDeviceDataFormatR16Snorm RenderingDeviceDataFormat = 70
	RenderingDeviceDataFormatR16Uscaled RenderingDeviceDataFormat = 71
	RenderingDeviceDataFormatR16Sscaled RenderingDeviceDataFormat = 72
	RenderingDeviceDataFormatR16Uint RenderingDeviceDataFormat = 73
	RenderingDeviceDataFormatR16Sint RenderingDeviceDataFormat = 74
	RenderingDeviceDataFormatR16Sfloat RenderingDeviceDataFormat = 75
	RenderingDeviceDataFormatR16g16Unorm RenderingDeviceDataFormat = 76
	RenderingDeviceDataFormatR16g16Snorm RenderingDeviceDataFormat = 77
	RenderingDeviceDataFormatR16g16Uscaled RenderingDeviceDataFormat = 78
	RenderingDeviceDataFormatR16g16Sscaled RenderingDeviceDataFormat = 79
	RenderingDeviceDataFormatR16g16Uint RenderingDeviceDataFormat = 80
	RenderingDeviceDataFormatR16g16Sint RenderingDeviceDataFormat = 81
	RenderingDeviceDataFormatR16g16Sfloat RenderingDeviceDataFormat = 82
	RenderingDeviceDataFormatR16g16b16Unorm RenderingDeviceDataFormat = 83
	RenderingDeviceDataFormatR16g16b16Snorm RenderingDeviceDataFormat = 84
	RenderingDeviceDataFormatR16g16b16Uscaled RenderingDeviceDataFormat = 85
	RenderingDeviceDataFormatR16g16b16Sscaled RenderingDeviceDataFormat = 86
	RenderingDeviceDataFormatR16g16b16Uint RenderingDeviceDataFormat = 87
	RenderingDeviceDataFormatR16g16b16Sint RenderingDeviceDataFormat = 88
	RenderingDeviceDataFormatR16g16b16Sfloat RenderingDeviceDataFormat = 89
	RenderingDeviceDataFormatR16g16b16a16Unorm RenderingDeviceDataFormat = 90
	RenderingDeviceDataFormatR16g16b16a16Snorm RenderingDeviceDataFormat = 91
	RenderingDeviceDataFormatR16g16b16a16Uscaled RenderingDeviceDataFormat = 92
	RenderingDeviceDataFormatR16g16b16a16Sscaled RenderingDeviceDataFormat = 93
	RenderingDeviceDataFormatR16g16b16a16Uint RenderingDeviceDataFormat = 94
	RenderingDeviceDataFormatR16g16b16a16Sint RenderingDeviceDataFormat = 95
	RenderingDeviceDataFormatR16g16b16a16Sfloat RenderingDeviceDataFormat = 96
	RenderingDeviceDataFormatR32Uint RenderingDeviceDataFormat = 97
	RenderingDeviceDataFormatR32Sint RenderingDeviceDataFormat = 98
	RenderingDeviceDataFormatR32Sfloat RenderingDeviceDataFormat = 99
	RenderingDeviceDataFormatR32g32Uint RenderingDeviceDataFormat = 100
	RenderingDeviceDataFormatR32g32Sint RenderingDeviceDataFormat = 101
	RenderingDeviceDataFormatR32g32Sfloat RenderingDeviceDataFormat = 102
	RenderingDeviceDataFormatR32g32b32Uint RenderingDeviceDataFormat = 103
	RenderingDeviceDataFormatR32g32b32Sint RenderingDeviceDataFormat = 104
	RenderingDeviceDataFormatR32g32b32Sfloat RenderingDeviceDataFormat = 105
	RenderingDeviceDataFormatR32g32b32a32Uint RenderingDeviceDataFormat = 106
	RenderingDeviceDataFormatR32g32b32a32Sint RenderingDeviceDataFormat = 107
	RenderingDeviceDataFormatR32g32b32a32Sfloat RenderingDeviceDataFormat = 108
	RenderingDeviceDataFormatR64Uint RenderingDeviceDataFormat = 109
	RenderingDeviceDataFormatR64Sint RenderingDeviceDataFormat = 110
	RenderingDeviceDataFormatR64Sfloat RenderingDeviceDataFormat = 111
	RenderingDeviceDataFormatR64g64Uint RenderingDeviceDataFormat = 112
	RenderingDeviceDataFormatR64g64Sint RenderingDeviceDataFormat = 113
	RenderingDeviceDataFormatR64g64Sfloat RenderingDeviceDataFormat = 114
	RenderingDeviceDataFormatR64g64b64Uint RenderingDeviceDataFormat = 115
	RenderingDeviceDataFormatR64g64b64Sint RenderingDeviceDataFormat = 116
	RenderingDeviceDataFormatR64g64b64Sfloat RenderingDeviceDataFormat = 117
	RenderingDeviceDataFormatR64g64b64a64Uint RenderingDeviceDataFormat = 118
	RenderingDeviceDataFormatR64g64b64a64Sint RenderingDeviceDataFormat = 119
	RenderingDeviceDataFormatR64g64b64a64Sfloat RenderingDeviceDataFormat = 120
	RenderingDeviceDataFormatB10g11r11UfloatPack32 RenderingDeviceDataFormat = 121
	RenderingDeviceDataFormatE5b9g9r9UfloatPack32 RenderingDeviceDataFormat = 122
	RenderingDeviceDataFormatD16Unorm RenderingDeviceDataFormat = 123
	RenderingDeviceDataFormatX8D24UnormPack32 RenderingDeviceDataFormat = 124
	RenderingDeviceDataFormatD32Sfloat RenderingDeviceDataFormat = 125
	RenderingDeviceDataFormatS8Uint RenderingDeviceDataFormat = 126
	RenderingDeviceDataFormatD16UnormS8Uint RenderingDeviceDataFormat = 127
	RenderingDeviceDataFormatD24UnormS8Uint RenderingDeviceDataFormat = 128
	RenderingDeviceDataFormatD32SfloatS8Uint RenderingDeviceDataFormat = 129
	RenderingDeviceDataFormatBc1RgbUnormBlock RenderingDeviceDataFormat = 130
	RenderingDeviceDataFormatBc1RgbSrgbBlock RenderingDeviceDataFormat = 131
	RenderingDeviceDataFormatBc1RgbaUnormBlock RenderingDeviceDataFormat = 132
	RenderingDeviceDataFormatBc1RgbaSrgbBlock RenderingDeviceDataFormat = 133
	RenderingDeviceDataFormatBc2UnormBlock RenderingDeviceDataFormat = 134
	RenderingDeviceDataFormatBc2SrgbBlock RenderingDeviceDataFormat = 135
	RenderingDeviceDataFormatBc3UnormBlock RenderingDeviceDataFormat = 136
	RenderingDeviceDataFormatBc3SrgbBlock RenderingDeviceDataFormat = 137
	RenderingDeviceDataFormatBc4UnormBlock RenderingDeviceDataFormat = 138
	RenderingDeviceDataFormatBc4SnormBlock RenderingDeviceDataFormat = 139
	RenderingDeviceDataFormatBc5UnormBlock RenderingDeviceDataFormat = 140
	RenderingDeviceDataFormatBc5SnormBlock RenderingDeviceDataFormat = 141
	RenderingDeviceDataFormatBc6hUfloatBlock RenderingDeviceDataFormat = 142
	RenderingDeviceDataFormatBc6hSfloatBlock RenderingDeviceDataFormat = 143
	RenderingDeviceDataFormatBc7UnormBlock RenderingDeviceDataFormat = 144
	RenderingDeviceDataFormatBc7SrgbBlock RenderingDeviceDataFormat = 145
	RenderingDeviceDataFormatEtc2R8g8b8UnormBlock RenderingDeviceDataFormat = 146
	RenderingDeviceDataFormatEtc2R8g8b8SrgbBlock RenderingDeviceDataFormat = 147
	RenderingDeviceDataFormatEtc2R8g8b8a1UnormBlock RenderingDeviceDataFormat = 148
	RenderingDeviceDataFormatEtc2R8g8b8a1SrgbBlock RenderingDeviceDataFormat = 149
	RenderingDeviceDataFormatEtc2R8g8b8a8UnormBlock RenderingDeviceDataFormat = 150
	RenderingDeviceDataFormatEtc2R8g8b8a8SrgbBlock RenderingDeviceDataFormat = 151
	RenderingDeviceDataFormatEacR11UnormBlock RenderingDeviceDataFormat = 152
	RenderingDeviceDataFormatEacR11SnormBlock RenderingDeviceDataFormat = 153
	RenderingDeviceDataFormatEacR11g11UnormBlock RenderingDeviceDataFormat = 154
	RenderingDeviceDataFormatEacR11g11SnormBlock RenderingDeviceDataFormat = 155
	RenderingDeviceDataFormatAstc4x4UnormBlock RenderingDeviceDataFormat = 156
	RenderingDeviceDataFormatAstc4x4SrgbBlock RenderingDeviceDataFormat = 157
	RenderingDeviceDataFormatAstc5x4UnormBlock RenderingDeviceDataFormat = 158
	RenderingDeviceDataFormatAstc5x4SrgbBlock RenderingDeviceDataFormat = 159
	RenderingDeviceDataFormatAstc5x5UnormBlock RenderingDeviceDataFormat = 160
	RenderingDeviceDataFormatAstc5x5SrgbBlock RenderingDeviceDataFormat = 161
	RenderingDeviceDataFormatAstc6x5UnormBlock RenderingDeviceDataFormat = 162
	RenderingDeviceDataFormatAstc6x5SrgbBlock RenderingDeviceDataFormat = 163
	RenderingDeviceDataFormatAstc6x6UnormBlock RenderingDeviceDataFormat = 164
	RenderingDeviceDataFormatAstc6x6SrgbBlock RenderingDeviceDataFormat = 165
	RenderingDeviceDataFormatAstc8x5UnormBlock RenderingDeviceDataFormat = 166
	RenderingDeviceDataFormatAstc8x5SrgbBlock RenderingDeviceDataFormat = 167
	RenderingDeviceDataFormatAstc8x6UnormBlock RenderingDeviceDataFormat = 168
	RenderingDeviceDataFormatAstc8x6SrgbBlock RenderingDeviceDataFormat = 169
	RenderingDeviceDataFormatAstc8x8UnormBlock RenderingDeviceDataFormat = 170
	RenderingDeviceDataFormatAstc8x8SrgbBlock RenderingDeviceDataFormat = 171
	RenderingDeviceDataFormatAstc10x5UnormBlock RenderingDeviceDataFormat = 172
	RenderingDeviceDataFormatAstc10x5SrgbBlock RenderingDeviceDataFormat = 173
	RenderingDeviceDataFormatAstc10x6UnormBlock RenderingDeviceDataFormat = 174
	RenderingDeviceDataFormatAstc10x6SrgbBlock RenderingDeviceDataFormat = 175
	RenderingDeviceDataFormatAstc10x8UnormBlock RenderingDeviceDataFormat = 176
	RenderingDeviceDataFormatAstc10x8SrgbBlock RenderingDeviceDataFormat = 177
	RenderingDeviceDataFormatAstc10x10UnormBlock RenderingDeviceDataFormat = 178
	RenderingDeviceDataFormatAstc10x10SrgbBlock RenderingDeviceDataFormat = 179
	RenderingDeviceDataFormatAstc12x10UnormBlock RenderingDeviceDataFormat = 180
	RenderingDeviceDataFormatAstc12x10SrgbBlock RenderingDeviceDataFormat = 181
	RenderingDeviceDataFormatAstc12x12UnormBlock RenderingDeviceDataFormat = 182
	RenderingDeviceDataFormatAstc12x12SrgbBlock RenderingDeviceDataFormat = 183
	RenderingDeviceDataFormatG8b8g8r8422Unorm RenderingDeviceDataFormat = 184
	RenderingDeviceDataFormatB8g8r8g8422Unorm RenderingDeviceDataFormat = 185
	RenderingDeviceDataFormatG8B8R83plane420Unorm RenderingDeviceDataFormat = 186
	RenderingDeviceDataFormatG8B8r82plane420Unorm RenderingDeviceDataFormat = 187
	RenderingDeviceDataFormatG8B8R83plane422Unorm RenderingDeviceDataFormat = 188
	RenderingDeviceDataFormatG8B8r82plane422Unorm RenderingDeviceDataFormat = 189
	RenderingDeviceDataFormatG8B8R83plane444Unorm RenderingDeviceDataFormat = 190
	RenderingDeviceDataFormatR10x6UnormPack16 RenderingDeviceDataFormat = 191
	RenderingDeviceDataFormatR10x6g10x6Unorm2pack16 RenderingDeviceDataFormat = 192
	RenderingDeviceDataFormatR10x6g10x6b10x6a10x6Unorm4pack16 RenderingDeviceDataFormat = 193
	RenderingDeviceDataFormatG10x6b10x6g10x6r10x6422Unorm4pack16 RenderingDeviceDataFormat = 194
	RenderingDeviceDataFormatB10x6g10x6r10x6g10x6422Unorm4pack16 RenderingDeviceDataFormat = 195
	RenderingDeviceDataFormatG10x6B10x6R10x63plane420Unorm3pack16 RenderingDeviceDataFormat = 196
	RenderingDeviceDataFormatG10x6B10x6r10x62plane420Unorm3pack16 RenderingDeviceDataFormat = 197
	RenderingDeviceDataFormatG10x6B10x6R10x63plane422Unorm3pack16 RenderingDeviceDataFormat = 198
	RenderingDeviceDataFormatG10x6B10x6r10x62plane422Unorm3pack16 RenderingDeviceDataFormat = 199
	RenderingDeviceDataFormatG10x6B10x6R10x63plane444Unorm3pack16 RenderingDeviceDataFormat = 200
	RenderingDeviceDataFormatR12x4UnormPack16 RenderingDeviceDataFormat = 201
	RenderingDeviceDataFormatR12x4g12x4Unorm2pack16 RenderingDeviceDataFormat = 202
	RenderingDeviceDataFormatR12x4g12x4b12x4a12x4Unorm4pack16 RenderingDeviceDataFormat = 203
	RenderingDeviceDataFormatG12x4b12x4g12x4r12x4422Unorm4pack16 RenderingDeviceDataFormat = 204
	RenderingDeviceDataFormatB12x4g12x4r12x4g12x4422Unorm4pack16 RenderingDeviceDataFormat = 205
	RenderingDeviceDataFormatG12x4B12x4R12x43plane420Unorm3pack16 RenderingDeviceDataFormat = 206
	RenderingDeviceDataFormatG12x4B12x4r12x42plane420Unorm3pack16 RenderingDeviceDataFormat = 207
	RenderingDeviceDataFormatG12x4B12x4R12x43plane422Unorm3pack16 RenderingDeviceDataFormat = 208
	RenderingDeviceDataFormatG12x4B12x4r12x42plane422Unorm3pack16 RenderingDeviceDataFormat = 209
	RenderingDeviceDataFormatG12x4B12x4R12x43plane444Unorm3pack16 RenderingDeviceDataFormat = 210
	RenderingDeviceDataFormatG16b16g16r16422Unorm RenderingDeviceDataFormat = 211
	RenderingDeviceDataFormatB16g16r16g16422Unorm RenderingDeviceDataFormat = 212
	RenderingDeviceDataFormatG16B16R163plane420Unorm RenderingDeviceDataFormat = 213
	RenderingDeviceDataFormatG16B16r162plane420Unorm RenderingDeviceDataFormat = 214
	RenderingDeviceDataFormatG16B16R163plane422Unorm RenderingDeviceDataFormat = 215
	RenderingDeviceDataFormatG16B16r162plane422Unorm RenderingDeviceDataFormat = 216
	RenderingDeviceDataFormatG16B16R163plane444Unorm RenderingDeviceDataFormat = 217
	RenderingDeviceDataFormatMax RenderingDeviceDataFormat = 218
)

type RenderingDeviceTextureType int64

const (
	RenderingDeviceTextureType1d RenderingDeviceTextureType = 0
	RenderingDeviceTextureType2d RenderingDeviceTextureType = 1
	RenderingDeviceTextureType3d RenderingDeviceTextureType = 2
	RenderingDeviceTextureTypeCube RenderingDeviceTextureType = 3
	RenderingDeviceTextureType1dArray RenderingDeviceTextureType = 4
	RenderingDeviceTextureType2dArray RenderingDeviceTextureType = 5
	RenderingDeviceTextureTypeCubeArray RenderingDeviceTextureType = 6
	RenderingDeviceTextureTypeMax RenderingDeviceTextureType = 7
)

type RenderingDeviceTextureSamples int64

const (
	RenderingDeviceTextureSamples1 RenderingDeviceTextureSamples = 0
	RenderingDeviceTextureSamples2 RenderingDeviceTextureSamples = 1
	RenderingDeviceTextureSamples4 RenderingDeviceTextureSamples = 2
	RenderingDeviceTextureSamples8 RenderingDeviceTextureSamples = 3
	RenderingDeviceTextureSamples16 RenderingDeviceTextureSamples = 4
	RenderingDeviceTextureSamples32 RenderingDeviceTextureSamples = 5
	RenderingDeviceTextureSamples64 RenderingDeviceTextureSamples = 6
	RenderingDeviceTextureSamplesMax RenderingDeviceTextureSamples = 7
)

type RenderingDeviceTextureUsageBits int64

const (
	RenderingDeviceTextureUsageSamplingBit RenderingDeviceTextureUsageBits = 1
	RenderingDeviceTextureUsageColorAttachmentBit RenderingDeviceTextureUsageBits = 2
	RenderingDeviceTextureUsageDepthStencilAttachmentBit RenderingDeviceTextureUsageBits = 4
	RenderingDeviceTextureUsageStorageBit RenderingDeviceTextureUsageBits = 8
	RenderingDeviceTextureUsageStorageAtomicBit RenderingDeviceTextureUsageBits = 16
	RenderingDeviceTextureUsageCpuReadBit RenderingDeviceTextureUsageBits = 32
	RenderingDeviceTextureUsageCanUpdateBit RenderingDeviceTextureUsageBits = 64
	RenderingDeviceTextureUsageCanCopyFromBit RenderingDeviceTextureUsageBits = 128
	RenderingDeviceTextureUsageCanCopyToBit RenderingDeviceTextureUsageBits = 256
	RenderingDeviceTextureUsageInputAttachmentBit RenderingDeviceTextureUsageBits = 512
)

type RenderingDeviceTextureSwizzle int64

const (
	RenderingDeviceTextureSwizzleIdentity RenderingDeviceTextureSwizzle = 0
	RenderingDeviceTextureSwizzleZero RenderingDeviceTextureSwizzle = 1
	RenderingDeviceTextureSwizzleOne RenderingDeviceTextureSwizzle = 2
	RenderingDeviceTextureSwizzleR RenderingDeviceTextureSwizzle = 3
	RenderingDeviceTextureSwizzleG RenderingDeviceTextureSwizzle = 4
	RenderingDeviceTextureSwizzleB RenderingDeviceTextureSwizzle = 5
	RenderingDeviceTextureSwizzleA RenderingDeviceTextureSwizzle = 6
	RenderingDeviceTextureSwizzleMax RenderingDeviceTextureSwizzle = 7
)

type RenderingDeviceTextureSliceType int64

const (
	RenderingDeviceTextureSlice2d RenderingDeviceTextureSliceType = 0
	RenderingDeviceTextureSliceCubemap RenderingDeviceTextureSliceType = 1
	RenderingDeviceTextureSlice3d RenderingDeviceTextureSliceType = 2
)

type RenderingDeviceSamplerFilter int64

const (
	RenderingDeviceSamplerFilterNearest RenderingDeviceSamplerFilter = 0
	RenderingDeviceSamplerFilterLinear RenderingDeviceSamplerFilter = 1
)

type RenderingDeviceSamplerRepeatMode int64

const (
	RenderingDeviceSamplerRepeatModeRepeat RenderingDeviceSamplerRepeatMode = 0
	RenderingDeviceSamplerRepeatModeMirroredRepeat RenderingDeviceSamplerRepeatMode = 1
	RenderingDeviceSamplerRepeatModeClampToEdge RenderingDeviceSamplerRepeatMode = 2
	RenderingDeviceSamplerRepeatModeClampToBorder RenderingDeviceSamplerRepeatMode = 3
	RenderingDeviceSamplerRepeatModeMirrorClampToEdge RenderingDeviceSamplerRepeatMode = 4
	RenderingDeviceSamplerRepeatModeMax RenderingDeviceSamplerRepeatMode = 5
)

type RenderingDeviceSamplerBorderColor int64

const (
	RenderingDeviceSamplerBorderColorFloatTransparentBlack RenderingDeviceSamplerBorderColor = 0
	RenderingDeviceSamplerBorderColorIntTransparentBlack RenderingDeviceSamplerBorderColor = 1
	RenderingDeviceSamplerBorderColorFloatOpaqueBlack RenderingDeviceSamplerBorderColor = 2
	RenderingDeviceSamplerBorderColorIntOpaqueBlack RenderingDeviceSamplerBorderColor = 3
	RenderingDeviceSamplerBorderColorFloatOpaqueWhite RenderingDeviceSamplerBorderColor = 4
	RenderingDeviceSamplerBorderColorIntOpaqueWhite RenderingDeviceSamplerBorderColor = 5
	RenderingDeviceSamplerBorderColorMax RenderingDeviceSamplerBorderColor = 6
)

type RenderingDeviceVertexFrequency int64

const (
	RenderingDeviceVertexFrequencyVertex RenderingDeviceVertexFrequency = 0
	RenderingDeviceVertexFrequencyInstance RenderingDeviceVertexFrequency = 1
)

type RenderingDeviceIndexBufferFormat int64

const (
	RenderingDeviceIndexBufferFormatUint16 RenderingDeviceIndexBufferFormat = 0
	RenderingDeviceIndexBufferFormatUint32 RenderingDeviceIndexBufferFormat = 1
)

type RenderingDeviceStorageBufferUsage int64

const (
	RenderingDeviceStorageBufferUsageDispatchIndirect RenderingDeviceStorageBufferUsage = 1
)

type RenderingDeviceUniformType int64

const (
	RenderingDeviceUniformTypeSampler RenderingDeviceUniformType = 0
	RenderingDeviceUniformTypeSamplerWithTexture RenderingDeviceUniformType = 1
	RenderingDeviceUniformTypeTexture RenderingDeviceUniformType = 2
	RenderingDeviceUniformTypeImage RenderingDeviceUniformType = 3
	RenderingDeviceUniformTypeTextureBuffer RenderingDeviceUniformType = 4
	RenderingDeviceUniformTypeSamplerWithTextureBuffer RenderingDeviceUniformType = 5
	RenderingDeviceUniformTypeImageBuffer RenderingDeviceUniformType = 6
	RenderingDeviceUniformTypeUniformBuffer RenderingDeviceUniformType = 7
	RenderingDeviceUniformTypeStorageBuffer RenderingDeviceUniformType = 8
	RenderingDeviceUniformTypeInputAttachment RenderingDeviceUniformType = 9
	RenderingDeviceUniformTypeMax RenderingDeviceUniformType = 10
)

type RenderingDeviceRenderPrimitive int64

const (
	RenderingDeviceRenderPrimitivePoints RenderingDeviceRenderPrimitive = 0
	RenderingDeviceRenderPrimitiveLines RenderingDeviceRenderPrimitive = 1
	RenderingDeviceRenderPrimitiveLinesWithAdjacency RenderingDeviceRenderPrimitive = 2
	RenderingDeviceRenderPrimitiveLinestrips RenderingDeviceRenderPrimitive = 3
	RenderingDeviceRenderPrimitiveLinestripsWithAdjacency RenderingDeviceRenderPrimitive = 4
	RenderingDeviceRenderPrimitiveTriangles RenderingDeviceRenderPrimitive = 5
	RenderingDeviceRenderPrimitiveTrianglesWithAdjacency RenderingDeviceRenderPrimitive = 6
	RenderingDeviceRenderPrimitiveTriangleStrips RenderingDeviceRenderPrimitive = 7
	RenderingDeviceRenderPrimitiveTriangleStripsWithAjacency RenderingDeviceRenderPrimitive = 8
	RenderingDeviceRenderPrimitiveTriangleStripsWithRestartIndex RenderingDeviceRenderPrimitive = 9
	RenderingDeviceRenderPrimitiveTesselationPatch RenderingDeviceRenderPrimitive = 10
	RenderingDeviceRenderPrimitiveMax RenderingDeviceRenderPrimitive = 11
)

type RenderingDevicePolygonCullMode int64

const (
	RenderingDevicePolygonCullDisabled RenderingDevicePolygonCullMode = 0
	RenderingDevicePolygonCullFront RenderingDevicePolygonCullMode = 1
	RenderingDevicePolygonCullBack RenderingDevicePolygonCullMode = 2
)

type RenderingDevicePolygonFrontFace int64

const (
	RenderingDevicePolygonFrontFaceClockwise RenderingDevicePolygonFrontFace = 0
	RenderingDevicePolygonFrontFaceCounterClockwise RenderingDevicePolygonFrontFace = 1
)

type RenderingDeviceStencilOperation int64

const (
	RenderingDeviceStencilOpKeep RenderingDeviceStencilOperation = 0
	RenderingDeviceStencilOpZero RenderingDeviceStencilOperation = 1
	RenderingDeviceStencilOpReplace RenderingDeviceStencilOperation = 2
	RenderingDeviceStencilOpIncrementAndClamp RenderingDeviceStencilOperation = 3
	RenderingDeviceStencilOpDecrementAndClamp RenderingDeviceStencilOperation = 4
	RenderingDeviceStencilOpInvert RenderingDeviceStencilOperation = 5
	RenderingDeviceStencilOpIncrementAndWrap RenderingDeviceStencilOperation = 6
	RenderingDeviceStencilOpDecrementAndWrap RenderingDeviceStencilOperation = 7
	RenderingDeviceStencilOpMax RenderingDeviceStencilOperation = 8
)

type RenderingDeviceCompareOperator int64

const (
	RenderingDeviceCompareOpNever RenderingDeviceCompareOperator = 0
	RenderingDeviceCompareOpLess RenderingDeviceCompareOperator = 1
	RenderingDeviceCompareOpEqual RenderingDeviceCompareOperator = 2
	RenderingDeviceCompareOpLessOrEqual RenderingDeviceCompareOperator = 3
	RenderingDeviceCompareOpGreater RenderingDeviceCompareOperator = 4
	RenderingDeviceCompareOpNotEqual RenderingDeviceCompareOperator = 5
	RenderingDeviceCompareOpGreaterOrEqual RenderingDeviceCompareOperator = 6
	RenderingDeviceCompareOpAlways RenderingDeviceCompareOperator = 7
	RenderingDeviceCompareOpMax RenderingDeviceCompareOperator = 8
)

type RenderingDeviceLogicOperation int64

const (
	RenderingDeviceLogicOpClear RenderingDeviceLogicOperation = 0
	RenderingDeviceLogicOpAnd RenderingDeviceLogicOperation = 1
	RenderingDeviceLogicOpAndReverse RenderingDeviceLogicOperation = 2
	RenderingDeviceLogicOpCopy RenderingDeviceLogicOperation = 3
	RenderingDeviceLogicOpAndInverted RenderingDeviceLogicOperation = 4
	RenderingDeviceLogicOpNoOp RenderingDeviceLogicOperation = 5
	RenderingDeviceLogicOpXor RenderingDeviceLogicOperation = 6
	RenderingDeviceLogicOpOr RenderingDeviceLogicOperation = 7
	RenderingDeviceLogicOpNor RenderingDeviceLogicOperation = 8
	RenderingDeviceLogicOpEquivalent RenderingDeviceLogicOperation = 9
	RenderingDeviceLogicOpInvert RenderingDeviceLogicOperation = 10
	RenderingDeviceLogicOpOrReverse RenderingDeviceLogicOperation = 11
	RenderingDeviceLogicOpCopyInverted RenderingDeviceLogicOperation = 12
	RenderingDeviceLogicOpOrInverted RenderingDeviceLogicOperation = 13
	RenderingDeviceLogicOpNand RenderingDeviceLogicOperation = 14
	RenderingDeviceLogicOpSet RenderingDeviceLogicOperation = 15
	RenderingDeviceLogicOpMax RenderingDeviceLogicOperation = 16
)

type RenderingDeviceBlendFactor int64

const (
	RenderingDeviceBlendFactorZero RenderingDeviceBlendFactor = 0
	RenderingDeviceBlendFactorOne RenderingDeviceBlendFactor = 1
	RenderingDeviceBlendFactorSrcColor RenderingDeviceBlendFactor = 2
	RenderingDeviceBlendFactorOneMinusSrcColor RenderingDeviceBlendFactor = 3
	RenderingDeviceBlendFactorDstColor RenderingDeviceBlendFactor = 4
	RenderingDeviceBlendFactorOneMinusDstColor RenderingDeviceBlendFactor = 5
	RenderingDeviceBlendFactorSrcAlpha RenderingDeviceBlendFactor = 6
	RenderingDeviceBlendFactorOneMinusSrcAlpha RenderingDeviceBlendFactor = 7
	RenderingDeviceBlendFactorDstAlpha RenderingDeviceBlendFactor = 8
	RenderingDeviceBlendFactorOneMinusDstAlpha RenderingDeviceBlendFactor = 9
	RenderingDeviceBlendFactorConstantColor RenderingDeviceBlendFactor = 10
	RenderingDeviceBlendFactorOneMinusConstantColor RenderingDeviceBlendFactor = 11
	RenderingDeviceBlendFactorConstantAlpha RenderingDeviceBlendFactor = 12
	RenderingDeviceBlendFactorOneMinusConstantAlpha RenderingDeviceBlendFactor = 13
	RenderingDeviceBlendFactorSrcAlphaSaturate RenderingDeviceBlendFactor = 14
	RenderingDeviceBlendFactorSrc1Color RenderingDeviceBlendFactor = 15
	RenderingDeviceBlendFactorOneMinusSrc1Color RenderingDeviceBlendFactor = 16
	RenderingDeviceBlendFactorSrc1Alpha RenderingDeviceBlendFactor = 17
	RenderingDeviceBlendFactorOneMinusSrc1Alpha RenderingDeviceBlendFactor = 18
	RenderingDeviceBlendFactorMax RenderingDeviceBlendFactor = 19
)

type RenderingDeviceBlendOperation int64

const (
	RenderingDeviceBlendOpAdd RenderingDeviceBlendOperation = 0
	RenderingDeviceBlendOpSubtract RenderingDeviceBlendOperation = 1
	RenderingDeviceBlendOpReverseSubtract RenderingDeviceBlendOperation = 2
	RenderingDeviceBlendOpMinimum RenderingDeviceBlendOperation = 3
	RenderingDeviceBlendOpMaximum RenderingDeviceBlendOperation = 4
	RenderingDeviceBlendOpMax RenderingDeviceBlendOperation = 5
)

type RenderingDevicePipelineDynamicStateFlags int64

const (
	RenderingDeviceDynamicStateLineWidth RenderingDevicePipelineDynamicStateFlags = 1
	RenderingDeviceDynamicStateDepthBias RenderingDevicePipelineDynamicStateFlags = 2
	RenderingDeviceDynamicStateBlendConstants RenderingDevicePipelineDynamicStateFlags = 4
	RenderingDeviceDynamicStateDepthBounds RenderingDevicePipelineDynamicStateFlags = 8
	RenderingDeviceDynamicStateStencilCompareMask RenderingDevicePipelineDynamicStateFlags = 16
	RenderingDeviceDynamicStateStencilWriteMask RenderingDevicePipelineDynamicStateFlags = 32
	RenderingDeviceDynamicStateStencilReference RenderingDevicePipelineDynamicStateFlags = 64
)

type RenderingDeviceInitialAction int64

const (
	RenderingDeviceInitialActionClear RenderingDeviceInitialAction = 0
	RenderingDeviceInitialActionClearRegion RenderingDeviceInitialAction = 1
	RenderingDeviceInitialActionClearRegionContinue RenderingDeviceInitialAction = 2
	RenderingDeviceInitialActionKeep RenderingDeviceInitialAction = 3
	RenderingDeviceInitialActionDrop RenderingDeviceInitialAction = 4
	RenderingDeviceInitialActionContinue RenderingDeviceInitialAction = 5
	RenderingDeviceInitialActionMax RenderingDeviceInitialAction = 6
)

type RenderingDeviceFinalAction int64

const (
	RenderingDeviceFinalActionRead RenderingDeviceFinalAction = 0
	RenderingDeviceFinalActionDiscard RenderingDeviceFinalAction = 1
	RenderingDeviceFinalActionContinue RenderingDeviceFinalAction = 2
	RenderingDeviceFinalActionMax RenderingDeviceFinalAction = 3
)

type RenderingDeviceShaderStage int64

const (
	RenderingDeviceShaderStageVertex RenderingDeviceShaderStage = 0
	RenderingDeviceShaderStageFragment RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageTesselationControl RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationEvaluation RenderingDeviceShaderStage = 3
	RenderingDeviceShaderStageCompute RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageMax RenderingDeviceShaderStage = 5
	RenderingDeviceShaderStageVertexBit RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageFragmentBit RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationControlBit RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageTesselationEvaluationBit RenderingDeviceShaderStage = 8
	RenderingDeviceShaderStageComputeBit RenderingDeviceShaderStage = 16
)

type RenderingDeviceShaderLanguage int64

const (
	RenderingDeviceShaderLanguageGlsl RenderingDeviceShaderLanguage = 0
	RenderingDeviceShaderLanguageHlsl RenderingDeviceShaderLanguage = 1
)

type RenderingDevicePipelineSpecializationConstantType int64

const (
	RenderingDevicePipelineSpecializationConstantTypeBool RenderingDevicePipelineSpecializationConstantType = 0
	RenderingDevicePipelineSpecializationConstantTypeInt RenderingDevicePipelineSpecializationConstantType = 1
	RenderingDevicePipelineSpecializationConstantTypeFloat RenderingDevicePipelineSpecializationConstantType = 2
)

type RenderingDeviceLimit int64

const (
	RenderingDeviceLimitMaxBoundUniformSets RenderingDeviceLimit = 0
	RenderingDeviceLimitMaxFramebufferColorAttachments RenderingDeviceLimit = 1
	RenderingDeviceLimitMaxTexturesPerUniformSet RenderingDeviceLimit = 2
	RenderingDeviceLimitMaxSamplersPerUniformSet RenderingDeviceLimit = 3
	RenderingDeviceLimitMaxStorageBuffersPerUniformSet RenderingDeviceLimit = 4
	RenderingDeviceLimitMaxStorageImagesPerUniformSet RenderingDeviceLimit = 5
	RenderingDeviceLimitMaxUniformBuffersPerUniformSet RenderingDeviceLimit = 6
	RenderingDeviceLimitMaxDrawIndexedIndex RenderingDeviceLimit = 7
	RenderingDeviceLimitMaxFramebufferHeight RenderingDeviceLimit = 8
	RenderingDeviceLimitMaxFramebufferWidth RenderingDeviceLimit = 9
	RenderingDeviceLimitMaxTextureArrayLayers RenderingDeviceLimit = 10
	RenderingDeviceLimitMaxTextureSize1d RenderingDeviceLimit = 11
	RenderingDeviceLimitMaxTextureSize2d RenderingDeviceLimit = 12
	RenderingDeviceLimitMaxTextureSize3d RenderingDeviceLimit = 13
	RenderingDeviceLimitMaxTextureSizeCube RenderingDeviceLimit = 14
	RenderingDeviceLimitMaxTexturesPerShaderStage RenderingDeviceLimit = 15
	RenderingDeviceLimitMaxSamplersPerShaderStage RenderingDeviceLimit = 16
	RenderingDeviceLimitMaxStorageBuffersPerShaderStage RenderingDeviceLimit = 17
	RenderingDeviceLimitMaxStorageImagesPerShaderStage RenderingDeviceLimit = 18
	RenderingDeviceLimitMaxUniformBuffersPerShaderStage RenderingDeviceLimit = 19
	RenderingDeviceLimitMaxPushConstantSize RenderingDeviceLimit = 20
	RenderingDeviceLimitMaxUniformBufferSize RenderingDeviceLimit = 21
	RenderingDeviceLimitMaxVertexInputAttributeOffset RenderingDeviceLimit = 22
	RenderingDeviceLimitMaxVertexInputAttributes RenderingDeviceLimit = 23
	RenderingDeviceLimitMaxVertexInputBindings RenderingDeviceLimit = 24
	RenderingDeviceLimitMaxVertexInputBindingStride RenderingDeviceLimit = 25
	RenderingDeviceLimitMinUniformBufferOffsetAlignment RenderingDeviceLimit = 26
	RenderingDeviceLimitMaxComputeSharedMemorySize RenderingDeviceLimit = 27
	RenderingDeviceLimitMaxComputeWorkgroupCountX RenderingDeviceLimit = 28
	RenderingDeviceLimitMaxComputeWorkgroupCountY RenderingDeviceLimit = 29
	RenderingDeviceLimitMaxComputeWorkgroupCountZ RenderingDeviceLimit = 30
	RenderingDeviceLimitMaxComputeWorkgroupInvocations RenderingDeviceLimit = 31
	RenderingDeviceLimitMaxComputeWorkgroupSizeX RenderingDeviceLimit = 32
	RenderingDeviceLimitMaxComputeWorkgroupSizeY RenderingDeviceLimit = 33
	RenderingDeviceLimitMaxComputeWorkgroupSizeZ RenderingDeviceLimit = 34
)

type RenderingDeviceMemoryType int64

const (
	RenderingDeviceMemoryTextures RenderingDeviceMemoryType = 0
	RenderingDeviceMemoryBuffers RenderingDeviceMemoryType = 1
	RenderingDeviceMemoryTotal RenderingDeviceMemoryType = 2
)
func (gdClass RenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[0], format, view, data) }
func (gdClass RenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[1], view, with_texture) }
func (gdClass RenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer int64, mipmap int64, mipmaps int64, slice_type RenderingDeviceTextureSliceType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[2], view, with_texture, layer, mipmap, mipmaps, slice_type) }
func (gdClass RenderingDevice) TextureUpdate(texture RID, layer int64, data []byte, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[3], texture, layer, data, post_barrier) }
func (gdClass RenderingDevice) TextureGetData(texture RID, layer int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[4], texture, layer) }
func (gdClass RenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[5], format, usage_flags) }
func (gdClass RenderingDevice) TextureIsShared(texture RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[6], texture) }
func (gdClass RenderingDevice) TextureIsValid(texture RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[7], texture) }
func (gdClass RenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap int64, dst_mipmap int64, src_layer int64, dst_layer int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[8], from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer, post_barrier) }
func (gdClass RenderingDevice) TextureClear(texture RID, color Color, base_mipmap int64, mipmap_count int64, base_layer int64, layer_count int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[9], texture, color, base_mipmap, mipmap_count, base_layer, layer_count, post_barrier) }
func (gdClass RenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[10], from_texture, to_texture, post_barrier) }
func (gdClass RenderingDevice) FramebufferFormatCreate(attachments Array, view_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[11], attachments, view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateMultipass(attachments Array, passes Array, view_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[12], attachments, passes, view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[13], samples) }
func (gdClass RenderingDevice) FramebufferFormatGetTextureSamples(format int64, render_pass int64) RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRenderingDevice[14], format, render_pass) }
func (gdClass RenderingDevice) FramebufferCreate(textures Array, validate_with_format int64, view_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[15], textures, validate_with_format, view_count) }
func (gdClass RenderingDevice) FramebufferCreateMultipass(textures Array, passes Array, validate_with_format int64, view_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[16], textures, passes, validate_with_format, view_count) }
func (gdClass RenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[17], size, samples, validate_with_format) }
func (gdClass RenderingDevice) FramebufferGetFormat(framebuffer RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[18], framebuffer) }
func (gdClass RenderingDevice) FramebufferIsValid(framebuffer RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[19], framebuffer) }
func (gdClass RenderingDevice) SamplerCreate(state RDSamplerState) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[20], state) }
func (gdClass RenderingDevice) VertexBufferCreate(size_bytes int64, data []byte, use_as_storage bool) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[21], size_bytes, data, use_as_storage) }
func (gdClass RenderingDevice) VertexFormatCreate(vertex_descriptions Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[22], vertex_descriptions) }
func (gdClass RenderingDevice) IndexBufferCreate(size_indices int64, format RenderingDeviceIndexBufferFormat, data []byte, use_restart_indices bool) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[23], size_indices, format, data, use_restart_indices) }
func (gdClass RenderingDevice) IndexArrayCreate(index_buffer RID, index_offset int64, index_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[24], index_buffer, index_offset, index_count) }
func (gdClass RenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV { return gdnative.Return[RDShaderSPIRV](gdnative.Object(gdClass), methodRenderingDevice[25], shader_source, allow_cache) }
func (gdClass RenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name string) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[26], spirv_data, name) }
func (gdClass RenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name string) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[27], spirv_data, name) }
func (gdClass RenderingDevice) ShaderCreateFromBytecode(binary_data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[28], binary_data) }
func (gdClass RenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[29], shader) }
func (gdClass RenderingDevice) UniformBufferCreate(size_bytes int64, data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[30], size_bytes, data) }
func (gdClass RenderingDevice) StorageBufferCreate(size_bytes int64, data []byte, usage int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[31], size_bytes, data, usage) }
func (gdClass RenderingDevice) TextureBufferCreate(size_bytes int64, format RenderingDeviceDataFormat, data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[32], size_bytes, format, data) }
func (gdClass RenderingDevice) UniformSetCreate(uniforms Array, shader RID, shader_set int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[33], uniforms, shader, shader_set) }
func (gdClass RenderingDevice) UniformSetIsValid(uniform_set RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[34], uniform_set) }
func (gdClass RenderingDevice) BufferUpdate(buffer RID, offset int64, size_bytes int64, data []byte, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[35], buffer, offset, size_bytes, data, post_barrier) }
func (gdClass RenderingDevice) BufferClear(buffer RID, offset int64, size_bytes int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[36], buffer, offset, size_bytes, post_barrier) }
func (gdClass RenderingDevice) BufferGetData(buffer RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[37], buffer) }
func (gdClass RenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format int64, vertex_format int64, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags int64, for_render_pass int64, specialization_constants Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[38], shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state, dynamic_state_flags, for_render_pass, specialization_constants) }
func (gdClass RenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[39], render_pipeline) }
func (gdClass RenderingDevice) ComputePipelineCreate(shader RID, specialization_constants Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[40], shader, specialization_constants) }
func (gdClass RenderingDevice) ComputePipelineIsValid(compute_pieline RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[41], compute_pieline) }
func (gdClass RenderingDevice) ScreenGetWidth(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[42], screen) }
func (gdClass RenderingDevice) ScreenGetHeight(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[43], screen) }
func (gdClass RenderingDevice) ScreenGetFramebufferFormat() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[44]) }
func (gdClass RenderingDevice) DrawListBeginForScreen(screen int64, clear_color Color) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[45], screen, clear_color) }
func (gdClass RenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[46], framebuffer, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures) }
func (gdClass RenderingDevice) DrawListBeginSplit(framebuffer RID, splits int64, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodRenderingDevice[47], framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures) }
func (gdClass RenderingDevice) DrawListBindRenderPipeline(draw_list int64, render_pipeline RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[48], draw_list, render_pipeline) }
func (gdClass RenderingDevice) DrawListBindUniformSet(draw_list int64, uniform_set RID, set_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[49], draw_list, uniform_set, set_index) }
func (gdClass RenderingDevice) DrawListBindVertexArray(draw_list int64, vertex_array RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[50], draw_list, vertex_array) }
func (gdClass RenderingDevice) DrawListBindIndexArray(draw_list int64, index_array RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[51], draw_list, index_array) }
func (gdClass RenderingDevice) DrawListSetPushConstant(draw_list int64, buffer []byte, size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[52], draw_list, buffer, size_bytes) }
func (gdClass RenderingDevice) DrawListDraw(draw_list int64, use_indices bool, instances int64, procedural_vertex_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[53], draw_list, use_indices, instances, procedural_vertex_count) }
func (gdClass RenderingDevice) DrawListEnableScissor(draw_list int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[54], draw_list, rect) }
func (gdClass RenderingDevice) DrawListDisableScissor(draw_list int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[55], draw_list) }
func (gdClass RenderingDevice) DrawListSwitchToNextPass() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[56]) }
func (gdClass RenderingDevice) DrawListSwitchToNextPassSplit(splits int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodRenderingDevice[57], splits) }
func (gdClass RenderingDevice) DrawListEnd(post_barrier int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[58], post_barrier) }
func (gdClass RenderingDevice) ComputeListBegin(allow_draw_overlap bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[59], allow_draw_overlap) }
func (gdClass RenderingDevice) ComputeListBindComputePipeline(compute_list int64, compute_pipeline RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[60], compute_list, compute_pipeline) }
func (gdClass RenderingDevice) ComputeListSetPushConstant(compute_list int64, buffer []byte, size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[61], compute_list, buffer, size_bytes) }
func (gdClass RenderingDevice) ComputeListBindUniformSet(compute_list int64, uniform_set RID, set_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[62], compute_list, uniform_set, set_index) }
func (gdClass RenderingDevice) ComputeListDispatch(compute_list int64, x_groups int64, y_groups int64, z_groups int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[63], compute_list, x_groups, y_groups, z_groups) }
func (gdClass RenderingDevice) ComputeListAddBarrier(compute_list int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[64], compute_list) }
func (gdClass RenderingDevice) ComputeListEnd(post_barrier int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[65], post_barrier) }
func (gdClass RenderingDevice) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[66], rid) }
func (gdClass RenderingDevice) CaptureTimestamp(name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[67], name) }
func (gdClass RenderingDevice) GetCapturedTimestampsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[68]) }
func (gdClass RenderingDevice) GetCapturedTimestampsFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[69]) }
func (gdClass RenderingDevice) GetCapturedTimestampGpuTime(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[70], index) }
func (gdClass RenderingDevice) GetCapturedTimestampCpuTime(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[71], index) }
func (gdClass RenderingDevice) GetCapturedTimestampName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[72], index) }
func (gdClass RenderingDevice) LimitGet(limit RenderingDeviceLimit) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[73], limit) }
func (gdClass RenderingDevice) GetFrameDelay() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[74]) }
func (gdClass RenderingDevice) Submit()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[75]) }
func (gdClass RenderingDevice) Sync()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[76]) }
func (gdClass RenderingDevice) Barrier(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[77], from, to) }
func (gdClass RenderingDevice) FullBarrier()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[78]) }
func (gdClass RenderingDevice) CreateLocalDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingDevice[79]) }
func (gdClass RenderingDevice) SetResourceName(id RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[80], id, name) }
func (gdClass RenderingDevice) DrawCommandBeginLabel(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[81], name, color) }
func (gdClass RenderingDevice) DrawCommandInsertLabel(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[82], name, color) }
func (gdClass RenderingDevice) DrawCommandEndLabel()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[83]) }
func (gdClass RenderingDevice) GetDeviceVendorName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[84]) }
func (gdClass RenderingDevice) GetDeviceName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[85]) }
func (gdClass RenderingDevice) GetDevicePipelineCacheUuid() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[86]) }
func (gdClass RenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[87], atype) }
func (gdClass RenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[88], resource, rid, index) }

type RenderingServer gdnative.Object

var methodRenderingServer [448]gdnative.Method

type RenderingServerTextureLayeredType int64

const (
	RenderingServerTextureLayered2dArray RenderingServerTextureLayeredType = 0
	RenderingServerTextureLayeredCubemap RenderingServerTextureLayeredType = 1
	RenderingServerTextureLayeredCubemapArray RenderingServerTextureLayeredType = 2
)

type RenderingServerCubeMapLayer int64

const (
	RenderingServerCubemapLayerLeft RenderingServerCubeMapLayer = 0
	RenderingServerCubemapLayerRight RenderingServerCubeMapLayer = 1
	RenderingServerCubemapLayerBottom RenderingServerCubeMapLayer = 2
	RenderingServerCubemapLayerTop RenderingServerCubeMapLayer = 3
	RenderingServerCubemapLayerFront RenderingServerCubeMapLayer = 4
	RenderingServerCubemapLayerBack RenderingServerCubeMapLayer = 5
)

type RenderingServerShaderMode int64

const (
	RenderingServerShaderSpatial RenderingServerShaderMode = 0
	RenderingServerShaderCanvasItem RenderingServerShaderMode = 1
	RenderingServerShaderParticles RenderingServerShaderMode = 2
	RenderingServerShaderSky RenderingServerShaderMode = 3
	RenderingServerShaderFog RenderingServerShaderMode = 4
	RenderingServerShaderMax RenderingServerShaderMode = 5
)

type RenderingServerArrayType int64

const (
	RenderingServerArrayVertex RenderingServerArrayType = 0
	RenderingServerArrayNormal RenderingServerArrayType = 1
	RenderingServerArrayTangent RenderingServerArrayType = 2
	RenderingServerArrayColor RenderingServerArrayType = 3
	RenderingServerArrayTexUv RenderingServerArrayType = 4
	RenderingServerArrayTexUv2 RenderingServerArrayType = 5
	RenderingServerArrayCustom0 RenderingServerArrayType = 6
	RenderingServerArrayCustom1 RenderingServerArrayType = 7
	RenderingServerArrayCustom2 RenderingServerArrayType = 8
	RenderingServerArrayCustom3 RenderingServerArrayType = 9
	RenderingServerArrayBones RenderingServerArrayType = 10
	RenderingServerArrayWeights RenderingServerArrayType = 11
	RenderingServerArrayIndex RenderingServerArrayType = 12
	RenderingServerArrayMax RenderingServerArrayType = 13
)

type RenderingServerArrayCustomFormat int64

const (
	RenderingServerArrayCustomRgba8Unorm RenderingServerArrayCustomFormat = 0
	RenderingServerArrayCustomRgba8Snorm RenderingServerArrayCustomFormat = 1
	RenderingServerArrayCustomRgHalf RenderingServerArrayCustomFormat = 2
	RenderingServerArrayCustomRgbaHalf RenderingServerArrayCustomFormat = 3
	RenderingServerArrayCustomRFloat RenderingServerArrayCustomFormat = 4
	RenderingServerArrayCustomRgFloat RenderingServerArrayCustomFormat = 5
	RenderingServerArrayCustomRgbFloat RenderingServerArrayCustomFormat = 6
	RenderingServerArrayCustomRgbaFloat RenderingServerArrayCustomFormat = 7
	RenderingServerArrayCustomMax RenderingServerArrayCustomFormat = 8
)

type RenderingServerArrayFormat int64

const (
	RenderingServerArrayFormatVertex RenderingServerArrayFormat = 1
	RenderingServerArrayFormatNormal RenderingServerArrayFormat = 2
	RenderingServerArrayFormatTangent RenderingServerArrayFormat = 4
	RenderingServerArrayFormatColor RenderingServerArrayFormat = 8
	RenderingServerArrayFormatTexUv RenderingServerArrayFormat = 16
	RenderingServerArrayFormatTexUv2 RenderingServerArrayFormat = 32
	RenderingServerArrayFormatCustom0 RenderingServerArrayFormat = 64
	RenderingServerArrayFormatCustom1 RenderingServerArrayFormat = 128
	RenderingServerArrayFormatCustom2 RenderingServerArrayFormat = 256
	RenderingServerArrayFormatCustom3 RenderingServerArrayFormat = 512
	RenderingServerArrayFormatBones RenderingServerArrayFormat = 1024
	RenderingServerArrayFormatWeights RenderingServerArrayFormat = 2048
	RenderingServerArrayFormatIndex RenderingServerArrayFormat = 4096
	RenderingServerArrayFormatBlendShapeMask RenderingServerArrayFormat = 7
	RenderingServerArrayFormatCustomBase RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustomBits RenderingServerArrayFormat = 3
	RenderingServerArrayFormatCustom0Shift RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustom1Shift RenderingServerArrayFormat = 16
	RenderingServerArrayFormatCustom2Shift RenderingServerArrayFormat = 19
	RenderingServerArrayFormatCustom3Shift RenderingServerArrayFormat = 22
	RenderingServerArrayFormatCustomMask RenderingServerArrayFormat = 7
	RenderingServerArrayCompressFlagsBase RenderingServerArrayFormat = 25
	RenderingServerArrayFlagUse2dVertices RenderingServerArrayFormat = 33554432
	RenderingServerArrayFlagUseDynamicUpdate RenderingServerArrayFormat = 67108864
	RenderingServerArrayFlagUse8BoneWeights RenderingServerArrayFormat = 134217728
)

type RenderingServerPrimitiveType int64

const (
	RenderingServerPrimitivePoints RenderingServerPrimitiveType = 0
	RenderingServerPrimitiveLines RenderingServerPrimitiveType = 1
	RenderingServerPrimitiveLineStrip RenderingServerPrimitiveType = 2
	RenderingServerPrimitiveTriangles RenderingServerPrimitiveType = 3
	RenderingServerPrimitiveTriangleStrip RenderingServerPrimitiveType = 4
	RenderingServerPrimitiveMax RenderingServerPrimitiveType = 5
)

type RenderingServerBlendShapeMode int64

const (
	RenderingServerBlendShapeModeNormalized RenderingServerBlendShapeMode = 0
	RenderingServerBlendShapeModeRelative RenderingServerBlendShapeMode = 1
)

type RenderingServerMultimeshTransformFormat int64

const (
	RenderingServerMultimeshTransform2d RenderingServerMultimeshTransformFormat = 0
	RenderingServerMultimeshTransform3d RenderingServerMultimeshTransformFormat = 1
)

type RenderingServerLightProjectorFilter int64

const (
	RenderingServerLightProjectorFilterNearest RenderingServerLightProjectorFilter = 0
	RenderingServerLightProjectorFilterLinear RenderingServerLightProjectorFilter = 1
	RenderingServerLightProjectorFilterNearestMipmaps RenderingServerLightProjectorFilter = 2
	RenderingServerLightProjectorFilterLinearMipmaps RenderingServerLightProjectorFilter = 3
	RenderingServerLightProjectorFilterNearestMipmapsAnisotropic RenderingServerLightProjectorFilter = 4
	RenderingServerLightProjectorFilterLinearMipmapsAnisotropic RenderingServerLightProjectorFilter = 5
)

type RenderingServerLightType int64

const (
	RenderingServerLightDirectional RenderingServerLightType = 0
	RenderingServerLightOmni RenderingServerLightType = 1
	RenderingServerLightSpot RenderingServerLightType = 2
)

type RenderingServerLightParam int64

const (
	RenderingServerLightParamEnergy RenderingServerLightParam = 0
	RenderingServerLightParamIndirectEnergy RenderingServerLightParam = 1
	RenderingServerLightParamSpecular RenderingServerLightParam = 2
	RenderingServerLightParamRange RenderingServerLightParam = 3
	RenderingServerLightParamSize RenderingServerLightParam = 4
	RenderingServerLightParamAttenuation RenderingServerLightParam = 5
	RenderingServerLightParamSpotAngle RenderingServerLightParam = 6
	RenderingServerLightParamSpotAttenuation RenderingServerLightParam = 7
	RenderingServerLightParamShadowMaxDistance RenderingServerLightParam = 8
	RenderingServerLightParamShadowSplit1Offset RenderingServerLightParam = 9
	RenderingServerLightParamShadowSplit2Offset RenderingServerLightParam = 10
	RenderingServerLightParamShadowSplit3Offset RenderingServerLightParam = 11
	RenderingServerLightParamShadowFadeStart RenderingServerLightParam = 12
	RenderingServerLightParamShadowNormalBias RenderingServerLightParam = 13
	RenderingServerLightParamShadowBias RenderingServerLightParam = 14
	RenderingServerLightParamShadowPancakeSize RenderingServerLightParam = 15
	RenderingServerLightParamShadowOpacity RenderingServerLightParam = 16
	RenderingServerLightParamShadowBlur RenderingServerLightParam = 17
	RenderingServerLightParamShadowVolumetricFogFade RenderingServerLightParam = 18
	RenderingServerLightParamTransmittanceBias RenderingServerLightParam = 19
	RenderingServerLightParamMax RenderingServerLightParam = 20
)

type RenderingServerLightBakeMode int64

const (
	RenderingServerLightBakeDisabled RenderingServerLightBakeMode = 0
	RenderingServerLightBakeStatic RenderingServerLightBakeMode = 1
	RenderingServerLightBakeDynamic RenderingServerLightBakeMode = 2
)

type RenderingServerLightOmniShadowMode int64

const (
	RenderingServerLightOmniShadowDualParaboloid RenderingServerLightOmniShadowMode = 0
	RenderingServerLightOmniShadowCube RenderingServerLightOmniShadowMode = 1
)

type RenderingServerLightDirectionalShadowMode int64

const (
	RenderingServerLightDirectionalShadowOrthogonal RenderingServerLightDirectionalShadowMode = 0
	RenderingServerLightDirectionalShadowParallel2Splits RenderingServerLightDirectionalShadowMode = 1
	RenderingServerLightDirectionalShadowParallel4Splits RenderingServerLightDirectionalShadowMode = 2
)

type RenderingServerLightDirectionalSkyMode int64

const (
	RenderingServerLightDirectionalSkyModeLightAndSky RenderingServerLightDirectionalSkyMode = 0
	RenderingServerLightDirectionalSkyModeLightOnly RenderingServerLightDirectionalSkyMode = 1
	RenderingServerLightDirectionalSkyModeSkyOnly RenderingServerLightDirectionalSkyMode = 2
)

type RenderingServerShadowQuality int64

const (
	RenderingServerShadowQualityHard RenderingServerShadowQuality = 0
	RenderingServerShadowQualitySoftVeryLow RenderingServerShadowQuality = 1
	RenderingServerShadowQualitySoftLow RenderingServerShadowQuality = 2
	RenderingServerShadowQualitySoftMedium RenderingServerShadowQuality = 3
	RenderingServerShadowQualitySoftHigh RenderingServerShadowQuality = 4
	RenderingServerShadowQualitySoftUltra RenderingServerShadowQuality = 5
	RenderingServerShadowQualityMax RenderingServerShadowQuality = 6
)

type RenderingServerReflectionProbeUpdateMode int64

const (
	RenderingServerReflectionProbeUpdateOnce RenderingServerReflectionProbeUpdateMode = 0
	RenderingServerReflectionProbeUpdateAlways RenderingServerReflectionProbeUpdateMode = 1
)

type RenderingServerReflectionProbeAmbientMode int64

const (
	RenderingServerReflectionProbeAmbientDisabled RenderingServerReflectionProbeAmbientMode = 0
	RenderingServerReflectionProbeAmbientEnvironment RenderingServerReflectionProbeAmbientMode = 1
	RenderingServerReflectionProbeAmbientColor RenderingServerReflectionProbeAmbientMode = 2
)

type RenderingServerDecalTexture int64

const (
	RenderingServerDecalTextureAlbedo RenderingServerDecalTexture = 0
	RenderingServerDecalTextureNormal RenderingServerDecalTexture = 1
	RenderingServerDecalTextureOrm RenderingServerDecalTexture = 2
	RenderingServerDecalTextureEmission RenderingServerDecalTexture = 3
	RenderingServerDecalTextureMax RenderingServerDecalTexture = 4
)

type RenderingServerDecalFilter int64

const (
	RenderingServerDecalFilterNearest RenderingServerDecalFilter = 0
	RenderingServerDecalFilterLinear RenderingServerDecalFilter = 1
	RenderingServerDecalFilterNearestMipmaps RenderingServerDecalFilter = 2
	RenderingServerDecalFilterLinearMipmaps RenderingServerDecalFilter = 3
	RenderingServerDecalFilterNearestMipmapsAnisotropic RenderingServerDecalFilter = 4
	RenderingServerDecalFilterLinearMipmapsAnisotropic RenderingServerDecalFilter = 5
)

type RenderingServerVoxelGIQuality int64

const (
	RenderingServerVoxelGiQualityLow RenderingServerVoxelGIQuality = 0
	RenderingServerVoxelGiQualityHigh RenderingServerVoxelGIQuality = 1
)

type RenderingServerParticlesMode int64

const (
	RenderingServerParticlesMode2d RenderingServerParticlesMode = 0
	RenderingServerParticlesMode3d RenderingServerParticlesMode = 1
)

type RenderingServerParticlesTransformAlign int64

const (
	RenderingServerParticlesTransformAlignDisabled RenderingServerParticlesTransformAlign = 0
	RenderingServerParticlesTransformAlignZBillboard RenderingServerParticlesTransformAlign = 1
	RenderingServerParticlesTransformAlignYToVelocity RenderingServerParticlesTransformAlign = 2
	RenderingServerParticlesTransformAlignZBillboardYToVelocity RenderingServerParticlesTransformAlign = 3
)

type RenderingServerParticlesDrawOrder int64

const (
	RenderingServerParticlesDrawOrderIndex RenderingServerParticlesDrawOrder = 0
	RenderingServerParticlesDrawOrderLifetime RenderingServerParticlesDrawOrder = 1
	RenderingServerParticlesDrawOrderReverseLifetime RenderingServerParticlesDrawOrder = 2
	RenderingServerParticlesDrawOrderViewDepth RenderingServerParticlesDrawOrder = 3
)

type RenderingServerParticlesCollisionType int64

const (
	RenderingServerParticlesCollisionTypeSphereAttract RenderingServerParticlesCollisionType = 0
	RenderingServerParticlesCollisionTypeBoxAttract RenderingServerParticlesCollisionType = 1
	RenderingServerParticlesCollisionTypeVectorFieldAttract RenderingServerParticlesCollisionType = 2
	RenderingServerParticlesCollisionTypeSphereCollide RenderingServerParticlesCollisionType = 3
	RenderingServerParticlesCollisionTypeBoxCollide RenderingServerParticlesCollisionType = 4
	RenderingServerParticlesCollisionTypeSdfCollide RenderingServerParticlesCollisionType = 5
	RenderingServerParticlesCollisionTypeHeightfieldCollide RenderingServerParticlesCollisionType = 6
)

type RenderingServerParticlesCollisionHeightfieldResolution int64

const (
	RenderingServerParticlesCollisionHeightfieldResolution256 RenderingServerParticlesCollisionHeightfieldResolution = 0
	RenderingServerParticlesCollisionHeightfieldResolution512 RenderingServerParticlesCollisionHeightfieldResolution = 1
	RenderingServerParticlesCollisionHeightfieldResolution1024 RenderingServerParticlesCollisionHeightfieldResolution = 2
	RenderingServerParticlesCollisionHeightfieldResolution2048 RenderingServerParticlesCollisionHeightfieldResolution = 3
	RenderingServerParticlesCollisionHeightfieldResolution4096 RenderingServerParticlesCollisionHeightfieldResolution = 4
	RenderingServerParticlesCollisionHeightfieldResolution8192 RenderingServerParticlesCollisionHeightfieldResolution = 5
	RenderingServerParticlesCollisionHeightfieldResolutionMax RenderingServerParticlesCollisionHeightfieldResolution = 6
)

type RenderingServerFogVolumeShape int64

const (
	RenderingServerFogVolumeShapeEllipsoid RenderingServerFogVolumeShape = 0
	RenderingServerFogVolumeShapeCone RenderingServerFogVolumeShape = 1
	RenderingServerFogVolumeShapeCylinder RenderingServerFogVolumeShape = 2
	RenderingServerFogVolumeShapeBox RenderingServerFogVolumeShape = 3
	RenderingServerFogVolumeShapeWorld RenderingServerFogVolumeShape = 4
	RenderingServerFogVolumeShapeMax RenderingServerFogVolumeShape = 5
)

type RenderingServerViewportScaling3DMode int64

const (
	RenderingServerViewportScaling3dModeBilinear RenderingServerViewportScaling3DMode = 0
	RenderingServerViewportScaling3dModeFsr RenderingServerViewportScaling3DMode = 1
	RenderingServerViewportScaling3dModeMax RenderingServerViewportScaling3DMode = 2
)

type RenderingServerViewportUpdateMode int64

const (
	RenderingServerViewportUpdateDisabled RenderingServerViewportUpdateMode = 0
	RenderingServerViewportUpdateOnce RenderingServerViewportUpdateMode = 1
	RenderingServerViewportUpdateWhenVisible RenderingServerViewportUpdateMode = 2
	RenderingServerViewportUpdateWhenParentVisible RenderingServerViewportUpdateMode = 3
	RenderingServerViewportUpdateAlways RenderingServerViewportUpdateMode = 4
)

type RenderingServerViewportClearMode int64

const (
	RenderingServerViewportClearAlways RenderingServerViewportClearMode = 0
	RenderingServerViewportClearNever RenderingServerViewportClearMode = 1
	RenderingServerViewportClearOnlyNextFrame RenderingServerViewportClearMode = 2
)

type RenderingServerViewportSDFOversize int64

const (
	RenderingServerViewportSdfOversize100Percent RenderingServerViewportSDFOversize = 0
	RenderingServerViewportSdfOversize120Percent RenderingServerViewportSDFOversize = 1
	RenderingServerViewportSdfOversize150Percent RenderingServerViewportSDFOversize = 2
	RenderingServerViewportSdfOversize200Percent RenderingServerViewportSDFOversize = 3
	RenderingServerViewportSdfOversizeMax RenderingServerViewportSDFOversize = 4
)

type RenderingServerViewportSDFScale int64

const (
	RenderingServerViewportSdfScale100Percent RenderingServerViewportSDFScale = 0
	RenderingServerViewportSdfScale50Percent RenderingServerViewportSDFScale = 1
	RenderingServerViewportSdfScale25Percent RenderingServerViewportSDFScale = 2
	RenderingServerViewportSdfScaleMax RenderingServerViewportSDFScale = 3
)

type RenderingServerViewportMSAA int64

const (
	RenderingServerViewportMsaaDisabled RenderingServerViewportMSAA = 0
	RenderingServerViewportMsaa2x RenderingServerViewportMSAA = 1
	RenderingServerViewportMsaa4x RenderingServerViewportMSAA = 2
	RenderingServerViewportMsaa8x RenderingServerViewportMSAA = 3
	RenderingServerViewportMsaaMax RenderingServerViewportMSAA = 4
)

type RenderingServerViewportScreenSpaceAA int64

const (
	RenderingServerViewportScreenSpaceAaDisabled RenderingServerViewportScreenSpaceAA = 0
	RenderingServerViewportScreenSpaceAaFxaa RenderingServerViewportScreenSpaceAA = 1
	RenderingServerViewportScreenSpaceAaMax RenderingServerViewportScreenSpaceAA = 2
)

type RenderingServerViewportOcclusionCullingBuildQuality int64

const (
	RenderingServerViewportOcclusionBuildQualityLow RenderingServerViewportOcclusionCullingBuildQuality = 0
	RenderingServerViewportOcclusionBuildQualityMedium RenderingServerViewportOcclusionCullingBuildQuality = 1
	RenderingServerViewportOcclusionBuildQualityHigh RenderingServerViewportOcclusionCullingBuildQuality = 2
)

type RenderingServerViewportRenderInfo int64

const (
	RenderingServerViewportRenderInfoObjectsInFrame RenderingServerViewportRenderInfo = 0
	RenderingServerViewportRenderInfoPrimitivesInFrame RenderingServerViewportRenderInfo = 1
	RenderingServerViewportRenderInfoDrawCallsInFrame RenderingServerViewportRenderInfo = 2
	RenderingServerViewportRenderInfoMax RenderingServerViewportRenderInfo = 3
)

type RenderingServerViewportRenderInfoType int64

const (
	RenderingServerViewportRenderInfoTypeVisible RenderingServerViewportRenderInfoType = 0
	RenderingServerViewportRenderInfoTypeShadow RenderingServerViewportRenderInfoType = 1
	RenderingServerViewportRenderInfoTypeMax RenderingServerViewportRenderInfoType = 2
)

type RenderingServerViewportDebugDraw int64

const (
	RenderingServerViewportDebugDrawDisabled RenderingServerViewportDebugDraw = 0
	RenderingServerViewportDebugDrawUnshaded RenderingServerViewportDebugDraw = 1
	RenderingServerViewportDebugDrawLighting RenderingServerViewportDebugDraw = 2
	RenderingServerViewportDebugDrawOverdraw RenderingServerViewportDebugDraw = 3
	RenderingServerViewportDebugDrawWireframe RenderingServerViewportDebugDraw = 4
	RenderingServerViewportDebugDrawNormalBuffer RenderingServerViewportDebugDraw = 5
	RenderingServerViewportDebugDrawVoxelGiAlbedo RenderingServerViewportDebugDraw = 6
	RenderingServerViewportDebugDrawVoxelGiLighting RenderingServerViewportDebugDraw = 7
	RenderingServerViewportDebugDrawVoxelGiEmission RenderingServerViewportDebugDraw = 8
	RenderingServerViewportDebugDrawShadowAtlas RenderingServerViewportDebugDraw = 9
	RenderingServerViewportDebugDrawDirectionalShadowAtlas RenderingServerViewportDebugDraw = 10
	RenderingServerViewportDebugDrawSceneLuminance RenderingServerViewportDebugDraw = 11
	RenderingServerViewportDebugDrawSsao RenderingServerViewportDebugDraw = 12
	RenderingServerViewportDebugDrawSsil RenderingServerViewportDebugDraw = 13
	RenderingServerViewportDebugDrawPssmSplits RenderingServerViewportDebugDraw = 14
	RenderingServerViewportDebugDrawDecalAtlas RenderingServerViewportDebugDraw = 15
	RenderingServerViewportDebugDrawSdfgi RenderingServerViewportDebugDraw = 16
	RenderingServerViewportDebugDrawSdfgiProbes RenderingServerViewportDebugDraw = 17
	RenderingServerViewportDebugDrawGiBuffer RenderingServerViewportDebugDraw = 18
	RenderingServerViewportDebugDrawDisableLod RenderingServerViewportDebugDraw = 19
	RenderingServerViewportDebugDrawClusterOmniLights RenderingServerViewportDebugDraw = 20
	RenderingServerViewportDebugDrawClusterSpotLights RenderingServerViewportDebugDraw = 21
	RenderingServerViewportDebugDrawClusterDecals RenderingServerViewportDebugDraw = 22
	RenderingServerViewportDebugDrawClusterReflectionProbes RenderingServerViewportDebugDraw = 23
	RenderingServerViewportDebugDrawOccluders RenderingServerViewportDebugDraw = 24
	RenderingServerViewportDebugDrawMotionVectors RenderingServerViewportDebugDraw = 25
)

type RenderingServerViewportVRSMode int64

const (
	RenderingServerViewportVrsDisabled RenderingServerViewportVRSMode = 0
	RenderingServerViewportVrsTexture RenderingServerViewportVRSMode = 1
	RenderingServerViewportVrsXr RenderingServerViewportVRSMode = 2
	RenderingServerViewportVrsMax RenderingServerViewportVRSMode = 3
)

type RenderingServerSkyMode int64

const (
	RenderingServerSkyModeAutomatic RenderingServerSkyMode = 0
	RenderingServerSkyModeQuality RenderingServerSkyMode = 1
	RenderingServerSkyModeIncremental RenderingServerSkyMode = 2
	RenderingServerSkyModeRealtime RenderingServerSkyMode = 3
)

type RenderingServerEnvironmentBG int64

const (
	RenderingServerEnvBgClearColor RenderingServerEnvironmentBG = 0
	RenderingServerEnvBgColor RenderingServerEnvironmentBG = 1
	RenderingServerEnvBgSky RenderingServerEnvironmentBG = 2
	RenderingServerEnvBgCanvas RenderingServerEnvironmentBG = 3
	RenderingServerEnvBgKeep RenderingServerEnvironmentBG = 4
	RenderingServerEnvBgCameraFeed RenderingServerEnvironmentBG = 5
	RenderingServerEnvBgMax RenderingServerEnvironmentBG = 6
)

type RenderingServerEnvironmentAmbientSource int64

const (
	RenderingServerEnvAmbientSourceBg RenderingServerEnvironmentAmbientSource = 0
	RenderingServerEnvAmbientSourceDisabled RenderingServerEnvironmentAmbientSource = 1
	RenderingServerEnvAmbientSourceColor RenderingServerEnvironmentAmbientSource = 2
	RenderingServerEnvAmbientSourceSky RenderingServerEnvironmentAmbientSource = 3
)

type RenderingServerEnvironmentReflectionSource int64

const (
	RenderingServerEnvReflectionSourceBg RenderingServerEnvironmentReflectionSource = 0
	RenderingServerEnvReflectionSourceDisabled RenderingServerEnvironmentReflectionSource = 1
	RenderingServerEnvReflectionSourceSky RenderingServerEnvironmentReflectionSource = 2
)

type RenderingServerEnvironmentGlowBlendMode int64

const (
	RenderingServerEnvGlowBlendModeAdditive RenderingServerEnvironmentGlowBlendMode = 0
	RenderingServerEnvGlowBlendModeScreen RenderingServerEnvironmentGlowBlendMode = 1
	RenderingServerEnvGlowBlendModeSoftlight RenderingServerEnvironmentGlowBlendMode = 2
	RenderingServerEnvGlowBlendModeReplace RenderingServerEnvironmentGlowBlendMode = 3
	RenderingServerEnvGlowBlendModeMix RenderingServerEnvironmentGlowBlendMode = 4
)

type RenderingServerEnvironmentToneMapper int64

const (
	RenderingServerEnvToneMapperLinear RenderingServerEnvironmentToneMapper = 0
	RenderingServerEnvToneMapperReinhard RenderingServerEnvironmentToneMapper = 1
	RenderingServerEnvToneMapperFilmic RenderingServerEnvironmentToneMapper = 2
	RenderingServerEnvToneMapperAces RenderingServerEnvironmentToneMapper = 3
)

type RenderingServerEnvironmentSSRRoughnessQuality int64

const (
	RenderingServerEnvSsrRoughnessQualityDisabled RenderingServerEnvironmentSSRRoughnessQuality = 0
	RenderingServerEnvSsrRoughnessQualityLow RenderingServerEnvironmentSSRRoughnessQuality = 1
	RenderingServerEnvSsrRoughnessQualityMedium RenderingServerEnvironmentSSRRoughnessQuality = 2
	RenderingServerEnvSsrRoughnessQualityHigh RenderingServerEnvironmentSSRRoughnessQuality = 3
)

type RenderingServerEnvironmentSSAOQuality int64

const (
	RenderingServerEnvSsaoQualityVeryLow RenderingServerEnvironmentSSAOQuality = 0
	RenderingServerEnvSsaoQualityLow RenderingServerEnvironmentSSAOQuality = 1
	RenderingServerEnvSsaoQualityMedium RenderingServerEnvironmentSSAOQuality = 2
	RenderingServerEnvSsaoQualityHigh RenderingServerEnvironmentSSAOQuality = 3
	RenderingServerEnvSsaoQualityUltra RenderingServerEnvironmentSSAOQuality = 4
)

type RenderingServerEnvironmentSSILQuality int64

const (
	RenderingServerEnvSsilQualityVeryLow RenderingServerEnvironmentSSILQuality = 0
	RenderingServerEnvSsilQualityLow RenderingServerEnvironmentSSILQuality = 1
	RenderingServerEnvSsilQualityMedium RenderingServerEnvironmentSSILQuality = 2
	RenderingServerEnvSsilQualityHigh RenderingServerEnvironmentSSILQuality = 3
	RenderingServerEnvSsilQualityUltra RenderingServerEnvironmentSSILQuality = 4
)

type RenderingServerEnvironmentSDFGIYScale int64

const (
	RenderingServerEnvSdfgiYScale50Percent RenderingServerEnvironmentSDFGIYScale = 0
	RenderingServerEnvSdfgiYScale75Percent RenderingServerEnvironmentSDFGIYScale = 1
	RenderingServerEnvSdfgiYScale100Percent RenderingServerEnvironmentSDFGIYScale = 2
)

type RenderingServerEnvironmentSDFGIRayCount int64

const (
	RenderingServerEnvSdfgiRayCount4 RenderingServerEnvironmentSDFGIRayCount = 0
	RenderingServerEnvSdfgiRayCount8 RenderingServerEnvironmentSDFGIRayCount = 1
	RenderingServerEnvSdfgiRayCount16 RenderingServerEnvironmentSDFGIRayCount = 2
	RenderingServerEnvSdfgiRayCount32 RenderingServerEnvironmentSDFGIRayCount = 3
	RenderingServerEnvSdfgiRayCount64 RenderingServerEnvironmentSDFGIRayCount = 4
	RenderingServerEnvSdfgiRayCount96 RenderingServerEnvironmentSDFGIRayCount = 5
	RenderingServerEnvSdfgiRayCount128 RenderingServerEnvironmentSDFGIRayCount = 6
	RenderingServerEnvSdfgiRayCountMax RenderingServerEnvironmentSDFGIRayCount = 7
)

type RenderingServerEnvironmentSDFGIFramesToConverge int64

const (
	RenderingServerEnvSdfgiConvergeIn5Frames RenderingServerEnvironmentSDFGIFramesToConverge = 0
	RenderingServerEnvSdfgiConvergeIn10Frames RenderingServerEnvironmentSDFGIFramesToConverge = 1
	RenderingServerEnvSdfgiConvergeIn15Frames RenderingServerEnvironmentSDFGIFramesToConverge = 2
	RenderingServerEnvSdfgiConvergeIn20Frames RenderingServerEnvironmentSDFGIFramesToConverge = 3
	RenderingServerEnvSdfgiConvergeIn25Frames RenderingServerEnvironmentSDFGIFramesToConverge = 4
	RenderingServerEnvSdfgiConvergeIn30Frames RenderingServerEnvironmentSDFGIFramesToConverge = 5
	RenderingServerEnvSdfgiConvergeMax RenderingServerEnvironmentSDFGIFramesToConverge = 6
)

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int64

const (
	RenderingServerEnvSdfgiUpdateLightIn1Frame RenderingServerEnvironmentSDFGIFramesToUpdateLight = 0
	RenderingServerEnvSdfgiUpdateLightIn2Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 1
	RenderingServerEnvSdfgiUpdateLightIn4Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 2
	RenderingServerEnvSdfgiUpdateLightIn8Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 3
	RenderingServerEnvSdfgiUpdateLightIn16Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 4
	RenderingServerEnvSdfgiUpdateLightMax RenderingServerEnvironmentSDFGIFramesToUpdateLight = 5
)

type RenderingServerSubSurfaceScatteringQuality int64

const (
	RenderingServerSubSurfaceScatteringQualityDisabled RenderingServerSubSurfaceScatteringQuality = 0
	RenderingServerSubSurfaceScatteringQualityLow RenderingServerSubSurfaceScatteringQuality = 1
	RenderingServerSubSurfaceScatteringQualityMedium RenderingServerSubSurfaceScatteringQuality = 2
	RenderingServerSubSurfaceScatteringQualityHigh RenderingServerSubSurfaceScatteringQuality = 3
)

type RenderingServerDOFBokehShape int64

const (
	RenderingServerDofBokehBox RenderingServerDOFBokehShape = 0
	RenderingServerDofBokehHexagon RenderingServerDOFBokehShape = 1
	RenderingServerDofBokehCircle RenderingServerDOFBokehShape = 2
)

type RenderingServerDOFBlurQuality int64

const (
	RenderingServerDofBlurQualityVeryLow RenderingServerDOFBlurQuality = 0
	RenderingServerDofBlurQualityLow RenderingServerDOFBlurQuality = 1
	RenderingServerDofBlurQualityMedium RenderingServerDOFBlurQuality = 2
	RenderingServerDofBlurQualityHigh RenderingServerDOFBlurQuality = 3
)

type RenderingServerInstanceType int64

const (
	RenderingServerInstanceNone RenderingServerInstanceType = 0
	RenderingServerInstanceMesh RenderingServerInstanceType = 1
	RenderingServerInstanceMultimesh RenderingServerInstanceType = 2
	RenderingServerInstanceParticles RenderingServerInstanceType = 3
	RenderingServerInstanceParticlesCollision RenderingServerInstanceType = 4
	RenderingServerInstanceLight RenderingServerInstanceType = 5
	RenderingServerInstanceReflectionProbe RenderingServerInstanceType = 6
	RenderingServerInstanceDecal RenderingServerInstanceType = 7
	RenderingServerInstanceVoxelGi RenderingServerInstanceType = 8
	RenderingServerInstanceLightmap RenderingServerInstanceType = 9
	RenderingServerInstanceOccluder RenderingServerInstanceType = 10
	RenderingServerInstanceVisiblityNotifier RenderingServerInstanceType = 11
	RenderingServerInstanceFogVolume RenderingServerInstanceType = 12
	RenderingServerInstanceMax RenderingServerInstanceType = 13
	RenderingServerInstanceGeometryMask RenderingServerInstanceType = 14
)

type RenderingServerInstanceFlags int64

const (
	RenderingServerInstanceFlagUseBakedLight RenderingServerInstanceFlags = 0
	RenderingServerInstanceFlagUseDynamicGi RenderingServerInstanceFlags = 1
	RenderingServerInstanceFlagDrawNextFrameIfVisible RenderingServerInstanceFlags = 2
	RenderingServerInstanceFlagIgnoreOcclusionCulling RenderingServerInstanceFlags = 3
	RenderingServerInstanceFlagMax RenderingServerInstanceFlags = 4
)

type RenderingServerShadowCastingSetting int64

const (
	RenderingServerShadowCastingSettingOff RenderingServerShadowCastingSetting = 0
	RenderingServerShadowCastingSettingOn RenderingServerShadowCastingSetting = 1
	RenderingServerShadowCastingSettingDoubleSided RenderingServerShadowCastingSetting = 2
	RenderingServerShadowCastingSettingShadowsOnly RenderingServerShadowCastingSetting = 3
)

type RenderingServerVisibilityRangeFadeMode int64

const (
	RenderingServerVisibilityRangeFadeDisabled RenderingServerVisibilityRangeFadeMode = 0
	RenderingServerVisibilityRangeFadeSelf RenderingServerVisibilityRangeFadeMode = 1
	RenderingServerVisibilityRangeFadeDependencies RenderingServerVisibilityRangeFadeMode = 2
)

type RenderingServerBakeChannels int64

const (
	RenderingServerBakeChannelAlbedoAlpha RenderingServerBakeChannels = 0
	RenderingServerBakeChannelNormal RenderingServerBakeChannels = 1
	RenderingServerBakeChannelOrm RenderingServerBakeChannels = 2
	RenderingServerBakeChannelEmission RenderingServerBakeChannels = 3
)

type RenderingServerCanvasTextureChannel int64

const (
	RenderingServerCanvasTextureChannelDiffuse RenderingServerCanvasTextureChannel = 0
	RenderingServerCanvasTextureChannelNormal RenderingServerCanvasTextureChannel = 1
	RenderingServerCanvasTextureChannelSpecular RenderingServerCanvasTextureChannel = 2
)

type RenderingServerNinePatchAxisMode int64

const (
	RenderingServerNinePatchStretch RenderingServerNinePatchAxisMode = 0
	RenderingServerNinePatchTile RenderingServerNinePatchAxisMode = 1
	RenderingServerNinePatchTileFit RenderingServerNinePatchAxisMode = 2
)

type RenderingServerCanvasItemTextureFilter int64

const (
	RenderingServerCanvasItemTextureFilterDefault RenderingServerCanvasItemTextureFilter = 0
	RenderingServerCanvasItemTextureFilterNearest RenderingServerCanvasItemTextureFilter = 1
	RenderingServerCanvasItemTextureFilterLinear RenderingServerCanvasItemTextureFilter = 2
	RenderingServerCanvasItemTextureFilterNearestWithMipmaps RenderingServerCanvasItemTextureFilter = 3
	RenderingServerCanvasItemTextureFilterLinearWithMipmaps RenderingServerCanvasItemTextureFilter = 4
	RenderingServerCanvasItemTextureFilterNearestWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 5
	RenderingServerCanvasItemTextureFilterLinearWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 6
	RenderingServerCanvasItemTextureFilterMax RenderingServerCanvasItemTextureFilter = 7
)

type RenderingServerCanvasItemTextureRepeat int64

const (
	RenderingServerCanvasItemTextureRepeatDefault RenderingServerCanvasItemTextureRepeat = 0
	RenderingServerCanvasItemTextureRepeatDisabled RenderingServerCanvasItemTextureRepeat = 1
	RenderingServerCanvasItemTextureRepeatEnabled RenderingServerCanvasItemTextureRepeat = 2
	RenderingServerCanvasItemTextureRepeatMirror RenderingServerCanvasItemTextureRepeat = 3
	RenderingServerCanvasItemTextureRepeatMax RenderingServerCanvasItemTextureRepeat = 4
)

type RenderingServerCanvasGroupMode int64

const (
	RenderingServerCanvasGroupModeDisabled RenderingServerCanvasGroupMode = 0
	RenderingServerCanvasGroupModeOpaque RenderingServerCanvasGroupMode = 1
	RenderingServerCanvasGroupModeTransparent RenderingServerCanvasGroupMode = 2
)

type RenderingServerCanvasLightMode int64

const (
	RenderingServerCanvasLightModePoint RenderingServerCanvasLightMode = 0
	RenderingServerCanvasLightModeDirectional RenderingServerCanvasLightMode = 1
)

type RenderingServerCanvasLightBlendMode int64

const (
	RenderingServerCanvasLightBlendModeAdd RenderingServerCanvasLightBlendMode = 0
	RenderingServerCanvasLightBlendModeSub RenderingServerCanvasLightBlendMode = 1
	RenderingServerCanvasLightBlendModeMix RenderingServerCanvasLightBlendMode = 2
)

type RenderingServerCanvasLightShadowFilter int64

const (
	RenderingServerCanvasLightFilterNone RenderingServerCanvasLightShadowFilter = 0
	RenderingServerCanvasLightFilterPcf5 RenderingServerCanvasLightShadowFilter = 1
	RenderingServerCanvasLightFilterPcf13 RenderingServerCanvasLightShadowFilter = 2
	RenderingServerCanvasLightFilterMax RenderingServerCanvasLightShadowFilter = 3
)

type RenderingServerCanvasOccluderPolygonCullMode int64

const (
	RenderingServerCanvasOccluderPolygonCullDisabled RenderingServerCanvasOccluderPolygonCullMode = 0
	RenderingServerCanvasOccluderPolygonCullClockwise RenderingServerCanvasOccluderPolygonCullMode = 1
	RenderingServerCanvasOccluderPolygonCullCounterClockwise RenderingServerCanvasOccluderPolygonCullMode = 2
)

type RenderingServerGlobalShaderUniformType int64

const (
	RenderingServerGlobalVarTypeBool RenderingServerGlobalShaderUniformType = 0
	RenderingServerGlobalVarTypeBvec2 RenderingServerGlobalShaderUniformType = 1
	RenderingServerGlobalVarTypeBvec3 RenderingServerGlobalShaderUniformType = 2
	RenderingServerGlobalVarTypeBvec4 RenderingServerGlobalShaderUniformType = 3
	RenderingServerGlobalVarTypeInt RenderingServerGlobalShaderUniformType = 4
	RenderingServerGlobalVarTypeIvec2 RenderingServerGlobalShaderUniformType = 5
	RenderingServerGlobalVarTypeIvec3 RenderingServerGlobalShaderUniformType = 6
	RenderingServerGlobalVarTypeIvec4 RenderingServerGlobalShaderUniformType = 7
	RenderingServerGlobalVarTypeRect2i RenderingServerGlobalShaderUniformType = 8
	RenderingServerGlobalVarTypeUint RenderingServerGlobalShaderUniformType = 9
	RenderingServerGlobalVarTypeUvec2 RenderingServerGlobalShaderUniformType = 10
	RenderingServerGlobalVarTypeUvec3 RenderingServerGlobalShaderUniformType = 11
	RenderingServerGlobalVarTypeUvec4 RenderingServerGlobalShaderUniformType = 12
	RenderingServerGlobalVarTypeFloat RenderingServerGlobalShaderUniformType = 13
	RenderingServerGlobalVarTypeVec2 RenderingServerGlobalShaderUniformType = 14
	RenderingServerGlobalVarTypeVec3 RenderingServerGlobalShaderUniformType = 15
	RenderingServerGlobalVarTypeVec4 RenderingServerGlobalShaderUniformType = 16
	RenderingServerGlobalVarTypeColor RenderingServerGlobalShaderUniformType = 17
	RenderingServerGlobalVarTypeRect2 RenderingServerGlobalShaderUniformType = 18
	RenderingServerGlobalVarTypeMat2 RenderingServerGlobalShaderUniformType = 19
	RenderingServerGlobalVarTypeMat3 RenderingServerGlobalShaderUniformType = 20
	RenderingServerGlobalVarTypeMat4 RenderingServerGlobalShaderUniformType = 21
	RenderingServerGlobalVarTypeTransform2d RenderingServerGlobalShaderUniformType = 22
	RenderingServerGlobalVarTypeTransform RenderingServerGlobalShaderUniformType = 23
	RenderingServerGlobalVarTypeSampler2d RenderingServerGlobalShaderUniformType = 24
	RenderingServerGlobalVarTypeSampler2darray RenderingServerGlobalShaderUniformType = 25
	RenderingServerGlobalVarTypeSampler3d RenderingServerGlobalShaderUniformType = 26
	RenderingServerGlobalVarTypeSamplercube RenderingServerGlobalShaderUniformType = 27
	RenderingServerGlobalVarTypeMax RenderingServerGlobalShaderUniformType = 28
)

type RenderingServerRenderingInfo int64

const (
	RenderingServerRenderingInfoTotalObjectsInFrame RenderingServerRenderingInfo = 0
	RenderingServerRenderingInfoTotalPrimitivesInFrame RenderingServerRenderingInfo = 1
	RenderingServerRenderingInfoTotalDrawCallsInFrame RenderingServerRenderingInfo = 2
	RenderingServerRenderingInfoTextureMemUsed RenderingServerRenderingInfo = 3
	RenderingServerRenderingInfoBufferMemUsed RenderingServerRenderingInfo = 4
	RenderingServerRenderingInfoVideoMemUsed RenderingServerRenderingInfo = 5
)

type RenderingServerFeatures int64

const (
	RenderingServerFeatureShaders RenderingServerFeatures = 0
	RenderingServerFeatureMultithreaded RenderingServerFeatures = 1
)
func (gdClass RenderingServer) Texture2dCreate(image Image) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[0], image) }
func (gdClass RenderingServer) Texture2dLayeredCreate(layers Array, layered_type RenderingServerTextureLayeredType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[1], layers, layered_type) }
func (gdClass RenderingServer) Texture3dCreate(format ImageFormat, width int64, height int64, depth int64, mipmaps bool, data Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[2], format, width, height, depth, mipmaps, data) }
func (gdClass RenderingServer) TextureProxyCreate(base RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[3], base) }
func (gdClass RenderingServer) Texture2dUpdate(texture RID, image Image, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[4], texture, image, layer) }
func (gdClass RenderingServer) Texture3dUpdate(texture RID, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[5], texture, data) }
func (gdClass RenderingServer) TextureProxyUpdate(texture RID, proxy_to RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[6], texture, proxy_to) }
func (gdClass RenderingServer) Texture2dPlaceholderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[7]) }
func (gdClass RenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[8], layered_type) }
func (gdClass RenderingServer) Texture3dPlaceholderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[9]) }
func (gdClass RenderingServer) Texture2dGet(texture RID) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[10], texture) }
func (gdClass RenderingServer) Texture2dLayerGet(texture RID, layer int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[11], texture, layer) }
func (gdClass RenderingServer) Texture3dGet(texture RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[12], texture) }
func (gdClass RenderingServer) TextureReplace(texture RID, by_texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[13], texture, by_texture) }
func (gdClass RenderingServer) TextureSetSizeOverride(texture RID, width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[14], texture, width, height) }
func (gdClass RenderingServer) TextureSetPath(texture RID, path string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[15], texture, path) }
func (gdClass RenderingServer) TextureGetPath(texture RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[16], texture) }
func (gdClass RenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[17], texture, enable) }
func (gdClass RenderingServer) ShaderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[18]) }
func (gdClass RenderingServer) ShaderSetCode(shader RID, code string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[19], shader, code) }
func (gdClass RenderingServer) ShaderSetPathHint(shader RID, path string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[20], shader, path) }
func (gdClass RenderingServer) ShaderGetCode(shader RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[21], shader) }
func (gdClass RenderingServer) ShaderGetShaderUniformList(shader RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[22], shader) }
func (gdClass RenderingServer) ShaderGetParamDefault(shader RID, param string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[23], shader, param) }
func (gdClass RenderingServer) ShaderSetDefaultTextureParam(shader RID, param string, texture RID, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[24], shader, param, texture, index) }
func (gdClass RenderingServer) ShaderGetDefaultTextureParam(shader RID, param string, index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[25], shader, param, index) }
func (gdClass RenderingServer) MaterialCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[26]) }
func (gdClass RenderingServer) MaterialSetShader(shader_material RID, shader RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[27], shader_material, shader) }
func (gdClass RenderingServer) MaterialSetParam(material RID, parameter string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[28], material, parameter, value) }
func (gdClass RenderingServer) MaterialGetParam(material RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[29], material, parameter) }
func (gdClass RenderingServer) MaterialSetRenderPriority(material RID, priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[30], material, priority) }
func (gdClass RenderingServer) MaterialSetNextPass(material RID, next_material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[31], material, next_material) }
func (gdClass RenderingServer) MeshCreateFromSurfaces(surfaces Array, blend_shape_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[32], surfaces, blend_shape_count) }
func (gdClass RenderingServer) MeshCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[33]) }
func (gdClass RenderingServer) MeshSurfaceGetFormatOffset(format int64, vertex_count int64, array_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[34], format, vertex_count, array_index) }
func (gdClass RenderingServer) MeshSurfaceGetFormatVertexStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[35], format, vertex_count) }
func (gdClass RenderingServer) MeshSurfaceGetFormatAttributeStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[36], format, vertex_count) }
func (gdClass RenderingServer) MeshSurfaceGetFormatSkinStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[37], format, vertex_count) }
func (gdClass RenderingServer) MeshAddSurface(mesh RID, surface Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[38], mesh, surface) }
func (gdClass RenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[39], mesh, primitive, arrays, blend_shapes, lods, compress_format) }
func (gdClass RenderingServer) MeshGetBlendShapeCount(mesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[40], mesh) }
func (gdClass RenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[41], mesh, mode) }
func (gdClass RenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode { return gdnative.Return[RenderingServerBlendShapeMode](gdnative.Object(gdClass), methodRenderingServer[42], mesh) }
func (gdClass RenderingServer) MeshSurfaceSetMaterial(mesh RID, surface int64, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[43], mesh, surface, material) }
func (gdClass RenderingServer) MeshSurfaceGetMaterial(mesh RID, surface int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[44], mesh, surface) }
func (gdClass RenderingServer) MeshGetSurface(mesh RID, surface int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRenderingServer[45], mesh, surface) }
func (gdClass RenderingServer) MeshSurfaceGetArrays(mesh RID, surface int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[46], mesh, surface) }
func (gdClass RenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[47], mesh, surface) }
func (gdClass RenderingServer) MeshGetSurfaceCount(mesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[48], mesh) }
func (gdClass RenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[49], mesh, aabb) }
func (gdClass RenderingServer) MeshGetCustomAabb(mesh RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[50], mesh) }
func (gdClass RenderingServer) MeshClear(mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[51], mesh) }
func (gdClass RenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[52], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[53], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[54], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[55], mesh, shadow_mesh) }
func (gdClass RenderingServer) MultimeshCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[56]) }
func (gdClass RenderingServer) MultimeshAllocateData(multimesh RID, instances int64, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[57], multimesh, instances, transform_format, color_format, custom_data_format) }
func (gdClass RenderingServer) MultimeshGetInstanceCount(multimesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[58], multimesh) }
func (gdClass RenderingServer) MultimeshSetMesh(multimesh RID, mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[59], multimesh, mesh) }
func (gdClass RenderingServer) MultimeshInstanceSetTransform(multimesh RID, index int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[60], multimesh, index, transform) }
func (gdClass RenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[61], multimesh, index, transform) }
func (gdClass RenderingServer) MultimeshInstanceSetColor(multimesh RID, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[62], multimesh, index, color) }
func (gdClass RenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index int64, custom_data Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[63], multimesh, index, custom_data) }
func (gdClass RenderingServer) MultimeshGetMesh(multimesh RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[64], multimesh) }
func (gdClass RenderingServer) MultimeshGetAabb(multimesh RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[65], multimesh) }
func (gdClass RenderingServer) MultimeshInstanceGetTransform(multimesh RID, index int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[66], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodRenderingServer[67], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetColor(multimesh RID, index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRenderingServer[68], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRenderingServer[69], multimesh, index) }
func (gdClass RenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[70], multimesh, visible) }
func (gdClass RenderingServer) MultimeshGetVisibleInstances(multimesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[71], multimesh) }
func (gdClass RenderingServer) MultimeshSetBuffer(multimesh RID, buffer []float32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[72], multimesh, buffer) }
func (gdClass RenderingServer) MultimeshGetBuffer(multimesh RID) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodRenderingServer[73], multimesh) }
func (gdClass RenderingServer) SkeletonCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[74]) }
func (gdClass RenderingServer) SkeletonAllocateData(skeleton RID, bones int64, is_2d_skeleton bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[75], skeleton, bones, is_2d_skeleton) }
func (gdClass RenderingServer) SkeletonGetBoneCount(skeleton RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[76], skeleton) }
func (gdClass RenderingServer) SkeletonBoneSetTransform(skeleton RID, bone int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[77], skeleton, bone, transform) }
func (gdClass RenderingServer) SkeletonBoneGetTransform(skeleton RID, bone int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[78], skeleton, bone) }
func (gdClass RenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[79], skeleton, bone, transform) }
func (gdClass RenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodRenderingServer[80], skeleton, bone) }
func (gdClass RenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[81], skeleton, base_transform) }
func (gdClass RenderingServer) DirectionalLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[82]) }
func (gdClass RenderingServer) OmniLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[83]) }
func (gdClass RenderingServer) SpotLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[84]) }
func (gdClass RenderingServer) LightSetColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[85], light, color) }
func (gdClass RenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[86], light, param, value) }
func (gdClass RenderingServer) LightSetShadow(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[87], light, enabled) }
func (gdClass RenderingServer) LightSetProjector(light RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[88], light, texture) }
func (gdClass RenderingServer) LightSetNegative(light RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[89], light, enable) }
func (gdClass RenderingServer) LightSetCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[90], light, mask) }
func (gdClass RenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin float64, shadow float64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[91], decal, enabled, begin, shadow, length) }
func (gdClass RenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[92], light, enabled) }
func (gdClass RenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[93], light, bake_mode) }
func (gdClass RenderingServer) LightSetMaxSdfgiCascade(light RID, cascade int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[94], light, cascade) }
func (gdClass RenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[95], light, mode) }
func (gdClass RenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[96], light, mode) }
func (gdClass RenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[97], light, enable) }
func (gdClass RenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[98], light, mode) }
func (gdClass RenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[99], filter) }
func (gdClass RenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[100], quality) }
func (gdClass RenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[101], quality) }
func (gdClass RenderingServer) DirectionalShadowAtlasSetSize(size int64, is_16bits bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[102], size, is_16bits) }
func (gdClass RenderingServer) ReflectionProbeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[103]) }
func (gdClass RenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[104], probe, mode) }
func (gdClass RenderingServer) ReflectionProbeSetIntensity(probe RID, intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[105], probe, intensity) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[106], probe, mode) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[107], probe, color) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[108], probe, energy) }
func (gdClass RenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[109], probe, distance) }
func (gdClass RenderingServer) ReflectionProbeSetExtents(probe RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[110], probe, extents) }
func (gdClass RenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[111], probe, offset) }
func (gdClass RenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[112], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[113], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[114], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetCullMask(probe RID, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[115], probe, layers) }
func (gdClass RenderingServer) ReflectionProbeSetResolution(probe RID, resolution int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[116], probe, resolution) }
func (gdClass RenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[117], probe, pixels) }
func (gdClass RenderingServer) DecalCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[118]) }
func (gdClass RenderingServer) DecalSetExtents(decal RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[119], decal, extents) }
func (gdClass RenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[120], decal, atype, texture) }
func (gdClass RenderingServer) DecalSetEmissionEnergy(decal RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[121], decal, energy) }
func (gdClass RenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[122], decal, albedo_mix) }
func (gdClass RenderingServer) DecalSetModulate(decal RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[123], decal, color) }
func (gdClass RenderingServer) DecalSetCullMask(decal RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[124], decal, mask) }
func (gdClass RenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin float64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[125], decal, enabled, begin, length) }
func (gdClass RenderingServer) DecalSetFade(decal RID, above float64, below float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[126], decal, above, below) }
func (gdClass RenderingServer) DecalSetNormalFade(decal RID, fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[127], decal, fade) }
func (gdClass RenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[128], filter) }
func (gdClass RenderingServer) GiSetUseHalfResolution(half_resolution bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[129], half_resolution) }
func (gdClass RenderingServer) VoxelGiCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[130]) }
func (gdClass RenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[131], voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts) }
func (gdClass RenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodRenderingServer[132], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetOctreeCells(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[133], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetDataCells(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[134], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetDistanceField(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[135], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetLevelCounts(voxel_gi RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[136], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[137], voxel_gi) }
func (gdClass RenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[138], voxel_gi, arange) }
func (gdClass RenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[139], voxel_gi, amount) }
func (gdClass RenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[140], voxel_gi, energy) }
func (gdClass RenderingServer) VoxelGiSetBias(voxel_gi RID, bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[141], voxel_gi, bias) }
func (gdClass RenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[142], voxel_gi, bias) }
func (gdClass RenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[143], voxel_gi, enable) }
func (gdClass RenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[144], voxel_gi, enable) }
func (gdClass RenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[145], quality) }
func (gdClass RenderingServer) LightmapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[146]) }
func (gdClass RenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[147], lightmap, light, uses_sh) }
func (gdClass RenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[148], lightmap, bounds) }
func (gdClass RenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[149], lightmap, interior) }
func (gdClass RenderingServer) LightmapSetProbeCaptureData(lightmap RID, points []Vector3, point_sh []Color, tetrahedra []int32, bsp_tree []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[150], lightmap, points, point_sh, tetrahedra, bsp_tree) }
func (gdClass RenderingServer) LightmapGetProbeCapturePoints(lightmap RID) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodRenderingServer[151], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureSh(lightmap RID) []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodRenderingServer[152], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[153], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[154], lightmap) }
func (gdClass RenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[155], speed) }
func (gdClass RenderingServer) ParticlesCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[156]) }
func (gdClass RenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[157], particles, mode) }
func (gdClass RenderingServer) ParticlesSetEmitting(particles RID, emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[158], particles, emitting) }
func (gdClass RenderingServer) ParticlesGetEmitting(particles RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[159], particles) }
func (gdClass RenderingServer) ParticlesSetAmount(particles RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[160], particles, amount) }
func (gdClass RenderingServer) ParticlesSetLifetime(particles RID, lifetime float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[161], particles, lifetime) }
func (gdClass RenderingServer) ParticlesSetOneShot(particles RID, one_shot bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[162], particles, one_shot) }
func (gdClass RenderingServer) ParticlesSetPreProcessTime(particles RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[163], particles, time) }
func (gdClass RenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[164], particles, ratio) }
func (gdClass RenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[165], particles, ratio) }
func (gdClass RenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[166], particles, aabb) }
func (gdClass RenderingServer) ParticlesSetSpeedScale(particles RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[167], particles, scale) }
func (gdClass RenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[168], particles, enable) }
func (gdClass RenderingServer) ParticlesSetProcessMaterial(particles RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[169], particles, material) }
func (gdClass RenderingServer) ParticlesSetFixedFps(particles RID, fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[170], particles, fps) }
func (gdClass RenderingServer) ParticlesSetInterpolate(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[171], particles, enable) }
func (gdClass RenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[172], particles, enable) }
func (gdClass RenderingServer) ParticlesSetCollisionBaseSize(particles RID, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[173], particles, size) }
func (gdClass RenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[174], particles, align) }
func (gdClass RenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[175], particles, enable, length_sec) }
func (gdClass RenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses Array)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[176], particles, bind_poses) }
func (gdClass RenderingServer) ParticlesIsInactive(particles RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[177], particles) }
func (gdClass RenderingServer) ParticlesRequestProcess(particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[178], particles) }
func (gdClass RenderingServer) ParticlesRestart(particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[179], particles) }
func (gdClass RenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[180], particles, subemitter_particles) }
func (gdClass RenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[181], particles, transform, velocity, color, custom, emit_flags) }
func (gdClass RenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[182], particles, order) }
func (gdClass RenderingServer) ParticlesSetDrawPasses(particles RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[183], particles, count) }
func (gdClass RenderingServer) ParticlesSetDrawPassMesh(particles RID, pass int64, mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[184], particles, pass, mesh) }
func (gdClass RenderingServer) ParticlesGetCurrentAabb(particles RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[185], particles) }
func (gdClass RenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[186], particles, transform) }
func (gdClass RenderingServer) ParticlesCollisionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[187]) }
func (gdClass RenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[188], particles_collision, atype) }
func (gdClass RenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[189], particles_collision, mask) }
func (gdClass RenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[190], particles_collision, radius) }
func (gdClass RenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[191], particles_collision, extents) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, setrngth float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[192], particles_collision, setrngth) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[193], particles_collision, amount) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[194], particles_collision, curve) }
func (gdClass RenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[195], particles_collision, texture) }
func (gdClass RenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[196], particles_collision) }
func (gdClass RenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[197], particles_collision, resolution) }
func (gdClass RenderingServer) FogVolumeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[198]) }
func (gdClass RenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[199], fog_volume, shape) }
func (gdClass RenderingServer) FogVolumeSetExtents(fog_volume RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[200], fog_volume, extents) }
func (gdClass RenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[201], fog_volume, material) }
func (gdClass RenderingServer) VisibilityNotifierCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[202]) }
func (gdClass RenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[203], notifier, aabb) }
func (gdClass RenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[204], notifier, enter_callable, exit_callable) }
func (gdClass RenderingServer) OccluderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[205]) }
func (gdClass RenderingServer) OccluderSetMesh(occluder RID, vertices []Vector3, indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[206], occluder, vertices, indices) }
func (gdClass RenderingServer) CameraCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[207]) }
func (gdClass RenderingServer) CameraSetPerspective(camera RID, fovy_degrees float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[208], camera, fovy_degrees, z_near, z_far) }
func (gdClass RenderingServer) CameraSetOrthogonal(camera RID, size float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[209], camera, size, z_near, z_far) }
func (gdClass RenderingServer) CameraSetFrustum(camera RID, size float64, offset Vector2, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[210], camera, size, offset, z_near, z_far) }
func (gdClass RenderingServer) CameraSetTransform(camera RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[211], camera, transform) }
func (gdClass RenderingServer) CameraSetCullMask(camera RID, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[212], camera, layers) }
func (gdClass RenderingServer) CameraSetEnvironment(camera RID, env RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[213], camera, env) }
func (gdClass RenderingServer) CameraSetCameraEffects(camera RID, effects RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[214], camera, effects) }
func (gdClass RenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[215], camera, enable) }
func (gdClass RenderingServer) ViewportCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[216]) }
func (gdClass RenderingServer) ViewportSetUseXr(viewport RID, use_xr bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[217], viewport, use_xr) }
func (gdClass RenderingServer) ViewportSetSize(viewport RID, width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[218], viewport, width, height) }
func (gdClass RenderingServer) ViewportSetActive(viewport RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[219], viewport, active) }
func (gdClass RenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[220], viewport, parent_viewport) }
func (gdClass RenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[221], viewport, rect, screen) }
func (gdClass RenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[222], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[223], viewport, scaling_3d_mode) }
func (gdClass RenderingServer) ViewportSetScaling3dScale(viewport RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[224], viewport, scale) }
func (gdClass RenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[225], viewport, sharpness) }
func (gdClass RenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[226], viewport, mipmap_bias) }
func (gdClass RenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[227], viewport, update_mode) }
func (gdClass RenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[228], viewport, clear_mode) }
func (gdClass RenderingServer) ViewportGetTexture(viewport RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[229], viewport) }
func (gdClass RenderingServer) ViewportSetDisable3d(viewport RID, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[230], viewport, disable) }
func (gdClass RenderingServer) ViewportSetDisable2d(viewport RID, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[231], viewport, disable) }
func (gdClass RenderingServer) ViewportSetDisableEnvironment(viewport RID, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[232], viewport, disabled) }
func (gdClass RenderingServer) ViewportAttachCamera(viewport RID, camera RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[233], viewport, camera) }
func (gdClass RenderingServer) ViewportSetScenario(viewport RID, scenario RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[234], viewport, scenario) }
func (gdClass RenderingServer) ViewportAttachCanvas(viewport RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[235], viewport, canvas) }
func (gdClass RenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[236], viewport, canvas) }
func (gdClass RenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[237], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[238], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[239], viewport, filter) }
func (gdClass RenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[240], viewport, repeat) }
func (gdClass RenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[241], viewport, canvas, offset) }
func (gdClass RenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int64, sublayer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[242], viewport, canvas, layer, sublayer) }
func (gdClass RenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[243], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[244], viewport, transform) }
func (gdClass RenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[245], viewport, oversize, scale) }
func (gdClass RenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size int64, use_16_bits bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[246], viewport, size, use_16_bits) }
func (gdClass RenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int64, subdivision int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[247], viewport, quadrant, subdivision) }
func (gdClass RenderingServer) ViewportSetMsaa(viewport RID, msaa RenderingServerViewportMSAA)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[248], viewport, msaa) }
func (gdClass RenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[249], viewport, mode) }
func (gdClass RenderingServer) ViewportSetUseTaa(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[250], viewport, enable) }
func (gdClass RenderingServer) ViewportSetUseDebanding(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[251], viewport, enable) }
func (gdClass RenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[252], viewport, enable) }
func (gdClass RenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[253], rays_per_thread) }
func (gdClass RenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[254], quality) }
func (gdClass RenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[255], viewport, atype, info) }
func (gdClass RenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[256], viewport, draw) }
func (gdClass RenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[257], viewport, enable) }
func (gdClass RenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[258], viewport) }
func (gdClass RenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[259], viewport) }
func (gdClass RenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[260], viewport, mode) }
func (gdClass RenderingServer) ViewportSetVrsTexture(viewport RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[261], viewport, texture) }
func (gdClass RenderingServer) SkyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[262]) }
func (gdClass RenderingServer) SkySetRadianceSize(sky RID, radiance_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[263], sky, radiance_size) }
func (gdClass RenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[264], sky, mode) }
func (gdClass RenderingServer) SkySetMaterial(sky RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[265], sky, material) }
func (gdClass RenderingServer) SkyBakePanorama(sky RID, energy float64, bake_irradiance bool, size Vector2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[266], sky, energy, bake_irradiance, size) }
func (gdClass RenderingServer) EnvironmentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[267]) }
func (gdClass RenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[268], env, bg) }
func (gdClass RenderingServer) EnvironmentSetSky(env RID, sky RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[269], env, sky) }
func (gdClass RenderingServer) EnvironmentSetSkyCustomFov(env RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[270], env, scale) }
func (gdClass RenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[271], env, orientation) }
func (gdClass RenderingServer) EnvironmentSetBgColor(env RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[272], env, color) }
func (gdClass RenderingServer) EnvironmentSetBgEnergy(env RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[273], env, energy) }
func (gdClass RenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[274], env, max_layer) }
func (gdClass RenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy float64, sky_contibution float64, reflection_source RenderingServerEnvironmentReflectionSource)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[275], env, color, ambient, energy, sky_contibution, reflection_source) }
func (gdClass RenderingServer) EnvironmentSetGlow(env RID, enable bool, levels []float32, intensity float64, strength float64, mix float64, bloom_threshold float64, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold float64, hdr_bleed_scale float64, hdr_luminance_cap float64, glow_map_strength float64, glow_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[276], env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map) }
func (gdClass RenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure float64, white float64, auto_exposure bool, min_luminance float64, max_luminance float64, auto_exp_speed float64, auto_exp_grey float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[277], env, tone_mapper, exposure, white, auto_exposure, min_luminance, max_luminance, auto_exp_speed, auto_exp_grey) }
func (gdClass RenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness float64, contrast float64, saturation float64, use_1d_color_correction bool, color_correction RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[278], env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction) }
func (gdClass RenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps int64, fade_in float64, fade_out float64, depth_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[279], env, enable, max_steps, fade_in, fade_out, depth_tolerance) }
func (gdClass RenderingServer) EnvironmentSetSsao(env RID, enable bool, radius float64, intensity float64, power float64, detail float64, horizon float64, sharpness float64, light_affect float64, ao_channel_affect float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[280], env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect) }
func (gdClass RenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy float64, sun_scatter float64, density float64, height float64, height_density float64, aerial_perspective float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[281], env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective) }
func (gdClass RenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades int64, min_cell_size float64, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback float64, read_sky bool, energy float64, normal_bias float64, probe_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[282], env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density float64, albedo Color, emission Color, emission_energy float64, anisotropy float64, length float64, p_detail_spread float64, gi_inject float64, temporal_reprojection bool, temporal_reprojection_amount float64, ambient_inject float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[283], env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject) }
func (gdClass RenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[284], enable) }
func (gdClass RenderingServer) EnvironmentGlowSetUseHighQuality(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[285], enable) }
func (gdClass RenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[286], quality) }
func (gdClass RenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[287], quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to) }
func (gdClass RenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[288], quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to) }
func (gdClass RenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[289], ray_count) }
func (gdClass RenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[290], frames) }
func (gdClass RenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[291], frames) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFogVolumeSize(size int64, depth int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[292], size, depth) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[293], active) }
func (gdClass RenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[294], environment, bake_irradiance, size) }
func (gdClass RenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount float64, limit float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[295], enable, amount, limit) }
func (gdClass RenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[296], quality) }
func (gdClass RenderingServer) SubSurfaceScatteringSetScale(scale float64, depth_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[297], scale, depth_scale) }
func (gdClass RenderingServer) CameraEffectsCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[298]) }
func (gdClass RenderingServer) CameraEffectsSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[299], quality, use_jitter) }
func (gdClass RenderingServer) CameraEffectsSetDofBlurBokehShape(shape RenderingServerDOFBokehShape)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[300], shape) }
func (gdClass RenderingServer) CameraEffectsSetDofBlur(camera_effects RID, far_enable bool, far_distance float64, far_transition float64, near_enable bool, near_distance float64, near_transition float64, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[301], camera_effects, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount) }
func (gdClass RenderingServer) CameraEffectsSetCustomExposure(camera_effects RID, enable bool, exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[302], camera_effects, enable, exposure) }
func (gdClass RenderingServer) ScenarioCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[303]) }
func (gdClass RenderingServer) ScenarioSetEnvironment(scenario RID, environment RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[304], scenario, environment) }
func (gdClass RenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[305], scenario, environment) }
func (gdClass RenderingServer) ScenarioSetCameraEffects(scenario RID, effects RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[306], scenario, effects) }
func (gdClass RenderingServer) InstanceCreate2(base RID, scenario RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[307], base, scenario) }
func (gdClass RenderingServer) InstanceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[308]) }
func (gdClass RenderingServer) InstanceSetBase(instance RID, base RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[309], instance, base) }
func (gdClass RenderingServer) InstanceSetScenario(instance RID, scenario RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[310], instance, scenario) }
func (gdClass RenderingServer) InstanceSetLayerMask(instance RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[311], instance, mask) }
func (gdClass RenderingServer) InstanceSetTransform(instance RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[312], instance, transform) }
func (gdClass RenderingServer) InstanceAttachObjectInstanceId(instance RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[313], instance, id) }
func (gdClass RenderingServer) InstanceSetBlendShapeWeight(instance RID, shape int64, weight float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[314], instance, shape, weight) }
func (gdClass RenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface int64, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[315], instance, surface, material) }
func (gdClass RenderingServer) InstanceSetVisible(instance RID, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[316], instance, visible) }
func (gdClass RenderingServer) InstanceGeometrySetTransparency(instance RID, transparency float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[317], instance, transparency) }
func (gdClass RenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[318], instance, aabb) }
func (gdClass RenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[319], instance, skeleton) }
func (gdClass RenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[320], instance, margin) }
func (gdClass RenderingServer) InstanceSetVisibilityParent(instance RID, parent RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[321], instance, parent) }
func (gdClass RenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[322], instance, enabled) }
func (gdClass RenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[323], instance, flag, enabled) }
func (gdClass RenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[324], instance, shadow_casting_setting) }
func (gdClass RenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[325], instance, material) }
func (gdClass RenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[326], instance, material) }
func (gdClass RenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min float64, max float64, min_margin float64, max_margin float64, fade_mode RenderingServerVisibilityRangeFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[327], instance, min, max, min_margin, max_margin, fade_mode) }
func (gdClass RenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[328], instance, lightmap, lightmap_uv_scale, lightmap_slice) }
func (gdClass RenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[329], instance, lod_bias) }
func (gdClass RenderingServer) InstanceGeometrySetShaderUniform(instance RID, parameter string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[330], instance, parameter, value) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniform(instance RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[331], instance, parameter) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniformDefaultValue(instance RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[332], instance, parameter) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniformList(instance RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[333], instance) }
func (gdClass RenderingServer) InstancesCullAabb(aabb AABB, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[334], aabb, scenario) }
func (gdClass RenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[335], from, to, scenario) }
func (gdClass RenderingServer) InstancesCullConvex(convex Array, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[336], convex, scenario) }
func (gdClass RenderingServer) BakeRenderUv2(base RID, material_overrides Array, image_size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[337], base, material_overrides, image_size) }
func (gdClass RenderingServer) CanvasCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[338]) }
func (gdClass RenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[339], canvas, item, mirroring) }
func (gdClass RenderingServer) CanvasSetModulate(canvas RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[340], canvas, color) }
func (gdClass RenderingServer) CanvasSetDisableScale(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[341], disable) }
func (gdClass RenderingServer) CanvasTextureCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[342]) }
func (gdClass RenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[343], canvas_texture, channel, texture) }
func (gdClass RenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[344], canvas_texture, base_color, shininess) }
func (gdClass RenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[345], canvas_texture, filter) }
func (gdClass RenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[346], canvas_texture, repeat) }
func (gdClass RenderingServer) CanvasItemCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[347]) }
func (gdClass RenderingServer) CanvasItemSetParent(item RID, parent RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[348], item, parent) }
func (gdClass RenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[349], item, filter) }
func (gdClass RenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[350], item, repeat) }
func (gdClass RenderingServer) CanvasItemSetVisible(item RID, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[351], item, visible) }
func (gdClass RenderingServer) CanvasItemSetLightMask(item RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[352], item, mask) }
func (gdClass RenderingServer) CanvasItemSetTransform(item RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[353], item, transform) }
func (gdClass RenderingServer) CanvasItemSetClip(item RID, clip bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[354], item, clip) }
func (gdClass RenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[355], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[356], item, use_custom_rect, rect) }
func (gdClass RenderingServer) CanvasItemSetModulate(item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[357], item, color) }
func (gdClass RenderingServer) CanvasItemSetSelfModulate(item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[358], item, color) }
func (gdClass RenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[359], item, enabled) }
func (gdClass RenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[360], item, from, to, color, width, antialiased) }
func (gdClass RenderingServer) CanvasItemAddPolyline(item RID, points []Vector2, colors []Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[361], item, points, colors, width, antialiased) }
func (gdClass RenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[362], item, rect, color) }
func (gdClass RenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[363], item, pos, radius, color) }
func (gdClass RenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[364], item, rect, texture, tile, modulate, transpose) }
func (gdClass RenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int64, px_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[365], item, rect, texture, src_rect, modulate, outline_size, px_range) }
func (gdClass RenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[366], item, rect, texture, src_rect, modulate, transpose, clip_uv) }
func (gdClass RenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[367], item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate) }
func (gdClass RenderingServer) CanvasItemAddPrimitive(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[368], item, points, colors, uvs, texture, width) }
func (gdClass RenderingServer) CanvasItemAddPolygon(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[369], item, points, colors, uvs, texture) }
func (gdClass RenderingServer) CanvasItemAddTriangleArray(item RID, indices []int32, points []Vector2, colors []Color, uvs []Vector2, bones []int32, weights []float32, texture RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[370], item, indices, points, colors, uvs, bones, weights, texture, count) }
func (gdClass RenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[371], item, mesh, transform, modulate, texture) }
func (gdClass RenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[372], item, mesh, texture) }
func (gdClass RenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[373], item, particles, texture) }
func (gdClass RenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[374], item, transform) }
func (gdClass RenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[375], item, ignore) }
func (gdClass RenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length float64, slice_begin float64, slice_end float64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[376], item, animation_length, slice_begin, slice_end, offset) }
func (gdClass RenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[377], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetZIndex(item RID, z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[378], item, z_index) }
func (gdClass RenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[379], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[380], item, enabled, rect) }
func (gdClass RenderingServer) CanvasItemClear(item RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[381], item) }
func (gdClass RenderingServer) CanvasItemSetDrawIndex(item RID, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[382], item, index) }
func (gdClass RenderingServer) CanvasItemSetMaterial(item RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[383], item, material) }
func (gdClass RenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[384], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[385], item, enable, area, enter_callable, exit_callable) }
func (gdClass RenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin float64, fit_empty bool, fit_margin float64, blur_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[386], item, mode, clear_margin, fit_empty, fit_margin, blur_mipmaps) }
func (gdClass RenderingServer) CanvasLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[387]) }
func (gdClass RenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[388], light, canvas) }
func (gdClass RenderingServer) CanvasLightSetEnabled(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[389], light, enabled) }
func (gdClass RenderingServer) CanvasLightSetTextureScale(light RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[390], light, scale) }
func (gdClass RenderingServer) CanvasLightSetTransform(light RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[391], light, transform) }
func (gdClass RenderingServer) CanvasLightSetTexture(light RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[392], light, texture) }
func (gdClass RenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[393], light, offset) }
func (gdClass RenderingServer) CanvasLightSetColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[394], light, color) }
func (gdClass RenderingServer) CanvasLightSetHeight(light RID, height float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[395], light, height) }
func (gdClass RenderingServer) CanvasLightSetEnergy(light RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[396], light, energy) }
func (gdClass RenderingServer) CanvasLightSetZRange(light RID, min_z int64, max_z int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[397], light, min_z, max_z) }
func (gdClass RenderingServer) CanvasLightSetLayerRange(light RID, min_layer int64, max_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[398], light, min_layer, max_layer) }
func (gdClass RenderingServer) CanvasLightSetItemCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[399], light, mask) }
func (gdClass RenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[400], light, mask) }
func (gdClass RenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[401], light, mode) }
func (gdClass RenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[402], light, enabled) }
func (gdClass RenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[403], light, filter) }
func (gdClass RenderingServer) CanvasLightSetShadowColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[404], light, color) }
func (gdClass RenderingServer) CanvasLightSetShadowSmooth(light RID, smooth float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[405], light, smooth) }
func (gdClass RenderingServer) CanvasLightOccluderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[406]) }
func (gdClass RenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[407], occluder, canvas) }
func (gdClass RenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[408], occluder, enabled) }
func (gdClass RenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[409], occluder, polygon) }
func (gdClass RenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[410], occluder, enable) }
func (gdClass RenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[411], occluder, transform) }
func (gdClass RenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[412], occluder, mask) }
func (gdClass RenderingServer) CanvasOccluderPolygonCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[413]) }
func (gdClass RenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape []Vector2, closed bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[414], occluder_polygon, shape, closed) }
func (gdClass RenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[415], occluder_polygon, mode) }
func (gdClass RenderingServer) CanvasSetShadowTextureSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[416], size) }
func (gdClass RenderingServer) GlobalShaderUniformAdd(name string, atype RenderingServerGlobalShaderUniformType, default_value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[417], name, atype, default_value) }
func (gdClass RenderingServer) GlobalShaderUniformRemove(name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[418], name) }
func (gdClass RenderingServer) GlobalShaderUniformGetList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodRenderingServer[419]) }
func (gdClass RenderingServer) GlobalShaderUniformSet(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[420], name, value) }
func (gdClass RenderingServer) GlobalShaderUniformSetOverride(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[421], name, value) }
func (gdClass RenderingServer) GlobalShaderUniformGet(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[422], name) }
func (gdClass RenderingServer) GlobalShaderUniformGetType(name string) RenderingServerGlobalShaderUniformType { return gdnative.Return[RenderingServerGlobalShaderUniformType](gdnative.Object(gdClass), methodRenderingServer[423], name) }
func (gdClass RenderingServer) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[424], rid) }
func (gdClass RenderingServer) RequestFrameDrawnCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[425], callable) }
func (gdClass RenderingServer) HasChanged() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[426]) }
func (gdClass RenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[427], info) }
func (gdClass RenderingServer) GetVideoAdapterName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[428]) }
func (gdClass RenderingServer) GetVideoAdapterVendor() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[429]) }
func (gdClass RenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType { return gdnative.Return[RenderingDeviceDeviceType](gdnative.Object(gdClass), methodRenderingServer[430]) }
func (gdClass RenderingServer) GetVideoAdapterApiVersion() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[431]) }
func (gdClass RenderingServer) MakeSphereMesh(latitudes int64, longitudes int64, radius float64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[432], latitudes, longitudes, radius) }
func (gdClass RenderingServer) GetTestCube() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[433]) }
func (gdClass RenderingServer) GetTestTexture() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[434]) }
func (gdClass RenderingServer) GetWhiteTexture() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[435]) }
func (gdClass RenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[436], image, color, scale, use_filter) }
func (gdClass RenderingServer) SetDefaultClearColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[437], color) }
func (gdClass RenderingServer) HasFeature(feature RenderingServerFeatures) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[438], feature) }
func (gdClass RenderingServer) HasOsFeature(feature string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[439], feature) }
func (gdClass RenderingServer) SetDebugGenerateWireframes(generate bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[440], generate) }
func (gdClass RenderingServer) IsRenderLoopEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[441]) }
func (gdClass RenderingServer) SetRenderLoopEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[442], enabled) }
func (gdClass RenderingServer) GetFrameSetupTimeCpu() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[443]) }
func (gdClass RenderingServer) ForceSync()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[444]) }
func (gdClass RenderingServer) ForceDraw(swap_buffers bool, frame_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[445], swap_buffers, frame_step) }
func (gdClass RenderingServer) GetRenderingDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingServer[446]) }
func (gdClass RenderingServer) CreateLocalRenderingDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingServer[447]) }

type Resource gdnative.Object

var methodResource [12]gdnative.Method
func (gdClass Resource) SetPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[0], path) }
func (gdClass Resource) TakeOverPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[1], path) }
func (gdClass Resource) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodResource[2]) }
func (gdClass Resource) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[3], name) }
func (gdClass Resource) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodResource[4]) }
func (gdClass Resource) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodResource[5]) }
func (gdClass Resource) SetLocalToScene(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodResource[6], enable) }
func (gdClass Resource) IsLocalToScene() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResource[7]) }
func (gdClass Resource) GetLocalScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodResource[8]) }
func (gdClass Resource) SetupLocalToScene()  { gdnative.Call(gdnative.Object(gdClass), methodResource[9]) }
func (gdClass Resource) EmitChanged()  { gdnative.Call(gdnative.Object(gdClass), methodResource[10]) }
func (gdClass Resource) Duplicate(subresources bool) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResource[11], subresources) }

type ResourceFormatLoader gdnative.Object

var methodResourceFormatLoader [9]gdnative.Method

type ResourceFormatLoaderCacheMode int64

const (
	ResourceFormatLoaderCacheModeIgnore ResourceFormatLoaderCacheMode = 0
	ResourceFormatLoaderCacheModeReuse ResourceFormatLoaderCacheMode = 1
	ResourceFormatLoaderCacheModeReplace ResourceFormatLoaderCacheMode = 2
)
func (gdClass ResourceFormatLoader) GetRecognizedExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceFormatLoader[0]) }
func (gdClass ResourceFormatLoader) HandlesTypeImplementation(atype string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceFormatLoader[1], atype) }
func (gdClass ResourceFormatLoader) GetResourceTypeImplementation(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodResourceFormatLoader[2], path) }
func (gdClass ResourceFormatLoader) GetResourceUidImplementation(path string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceFormatLoader[3], path) }
func (gdClass ResourceFormatLoader) GetDependenciesImplementation(path string, add_types bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceFormatLoader[4], path, add_types) }
func (gdClass ResourceFormatLoader) RenameDependenciesImplementation(path string, renames Dictionary) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceFormatLoader[5], path, renames) }
func (gdClass ResourceFormatLoader) ExistsImplementation(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceFormatLoader[6], path) }
func (gdClass ResourceFormatLoader) GetClassesUsedImplementation(path string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceFormatLoader[7], path) }
func (gdClass ResourceFormatLoader) LoadImplementation(path string, original_path string, use_sub_threads bool, cache_mode int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodResourceFormatLoader[8], path, original_path, use_sub_threads, cache_mode) }

type ResourceFormatSaver gdnative.Object

var methodResourceFormatSaver [3]gdnative.Method
func (gdClass ResourceFormatSaver) SaveImplementation(path Resource, resource string, flags int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceFormatSaver[0], path, resource, flags) }
func (gdClass ResourceFormatSaver) RecognizeImplementation(resource Resource) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceFormatSaver[1], resource) }
func (gdClass ResourceFormatSaver) GetRecognizedExtensionsImplementation(resource Resource) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceFormatSaver[2], resource) }

type ResourceImporter gdnative.Object

var methodResourceImporter [0]gdnative.Method

type ResourceImporterImportOrder int64

const (
	ResourceImporterImportOrderDefault ResourceImporterImportOrder = 0
	ResourceImporterImportOrderScene ResourceImporterImportOrder = 100
)

type ResourceLoader gdnative.Object

var methodResourceLoader [12]gdnative.Method

type ResourceLoaderThreadLoadStatus int64

const (
	ResourceLoaderThreadLoadInvalidResource ResourceLoaderThreadLoadStatus = 0
	ResourceLoaderThreadLoadInProgress ResourceLoaderThreadLoadStatus = 1
	ResourceLoaderThreadLoadFailed ResourceLoaderThreadLoadStatus = 2
	ResourceLoaderThreadLoadLoaded ResourceLoaderThreadLoadStatus = 3
)

type ResourceLoaderCacheMode int64

const (
	ResourceLoaderCacheModeIgnore ResourceLoaderCacheMode = 0
	ResourceLoaderCacheModeReuse ResourceLoaderCacheMode = 1
	ResourceLoaderCacheModeReplace ResourceLoaderCacheMode = 2
)
func (gdClass ResourceLoader) LoadThreadedRequest(path string, type_hint string, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) error { return gdnative.Return[error](gdnative.Object(gdClass), methodResourceLoader[0], path, type_hint, use_sub_threads, cache_mode) }
func (gdClass ResourceLoader) LoadThreadedGetStatus(path string, progress Array) ResourceLoaderThreadLoadStatus { return gdnative.Return[ResourceLoaderThreadLoadStatus](gdnative.Object(gdClass), methodResourceLoader[1], path, progress) }
func (gdClass ResourceLoader) LoadThreadedGet(path string) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourceLoader[2], path) }
func (gdClass ResourceLoader) Load(path string, type_hint string, cache_mode ResourceLoaderCacheMode) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourceLoader[3], path, type_hint, cache_mode) }
func (gdClass ResourceLoader) GetRecognizedExtensionsForType(atype string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceLoader[4], atype) }
func (gdClass ResourceLoader) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[5], format_loader, at_front) }
func (gdClass ResourceLoader) RemoveResourceFormatLoader(format_loader ResourceFormatLoader)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[6], format_loader) }
func (gdClass ResourceLoader) SetAbortOnMissingResources(abort bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[7], abort) }
func (gdClass ResourceLoader) GetDependencies(path string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceLoader[8], path) }
func (gdClass ResourceLoader) HasCached(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceLoader[9], path) }
func (gdClass ResourceLoader) Exists(path string, type_hint string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceLoader[10], path, type_hint) }
func (gdClass ResourceLoader) GetResourceUid(path string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceLoader[11], path) }

type ResourcePreloader gdnative.Object

var methodResourcePreloader [6]gdnative.Method
func (gdClass ResourcePreloader) AddResource(name string, resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[0], name, resource) }
func (gdClass ResourcePreloader) RemoveResource(name string)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[1], name) }
func (gdClass ResourcePreloader) RenameResource(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[2], name, newname) }
func (gdClass ResourcePreloader) HasResource(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourcePreloader[3], name) }
func (gdClass ResourcePreloader) GetResource(name string) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourcePreloader[4], name) }
func (gdClass ResourcePreloader) GetResourceList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourcePreloader[5]) }

type ResourceSaver gdnative.Object

var methodResourceSaver [4]gdnative.Method

type ResourceSaverSaverFlags int64

const (
	ResourceSaverFlagNone ResourceSaverSaverFlags = 0
	ResourceSaverFlagRelativePaths ResourceSaverSaverFlags = 1
	ResourceSaverFlagBundleResources ResourceSaverSaverFlags = 2
	ResourceSaverFlagChangePath ResourceSaverSaverFlags = 4
	ResourceSaverFlagOmitEditorProperties ResourceSaverSaverFlags = 8
	ResourceSaverFlagSaveBigEndian ResourceSaverSaverFlags = 16
	ResourceSaverFlagCompress ResourceSaverSaverFlags = 32
	ResourceSaverFlagReplaceSubresourcePaths ResourceSaverSaverFlags = 64
)
func (gdClass ResourceSaver) Save(resource Resource, path string, flags ResourceSaverSaverFlags) error { return gdnative.Return[error](gdnative.Object(gdClass), methodResourceSaver[0], resource, path, flags) }
func (gdClass ResourceSaver) GetRecognizedExtensions(atype Resource) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceSaver[1], atype) }
func (gdClass ResourceSaver) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceSaver[2], format_saver, at_front) }
func (gdClass ResourceSaver) RemoveResourceFormatSaver(format_saver ResourceFormatSaver)  { gdnative.Call(gdnative.Object(gdClass), methodResourceSaver[3], format_saver) }

type ResourceUID gdnative.Object

var methodResourceUID [8]gdnative.Method
func (gdClass ResourceUID) IdToText(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodResourceUID[0], id) }
func (gdClass ResourceUID) TextToId(text_id string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceUID[1], text_id) }
func (gdClass ResourceUID) CreateId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceUID[2]) }
func (gdClass ResourceUID) HasId(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceUID[3], id) }
func (gdClass ResourceUID) AddId(id int64, path string)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[4], id, path) }
func (gdClass ResourceUID) SetId(id int64, path string)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[5], id, path) }
func (gdClass ResourceUID) GetIdPath(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodResourceUID[6], id) }
func (gdClass ResourceUID) RemoveId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[7], id) }

type RibbonTrailMesh gdnative.Object

var methodRibbonTrailMesh [12]gdnative.Method

type RibbonTrailMeshShape int64

const (
	RibbonTrailMeshShapeFlat RibbonTrailMeshShape = 0
	RibbonTrailMeshShapeCross RibbonTrailMeshShape = 1
)
func (gdClass RibbonTrailMesh) SetSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[0], size) }
func (gdClass RibbonTrailMesh) GetSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRibbonTrailMesh[1]) }
func (gdClass RibbonTrailMesh) SetSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[2], sections) }
func (gdClass RibbonTrailMesh) GetSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRibbonTrailMesh[3]) }
func (gdClass RibbonTrailMesh) SetSectionLength(section_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[4], section_length) }
func (gdClass RibbonTrailMesh) GetSectionLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRibbonTrailMesh[5]) }
func (gdClass RibbonTrailMesh) SetSectionSegments(section_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[6], section_segments) }
func (gdClass RibbonTrailMesh) GetSectionSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRibbonTrailMesh[7]) }
func (gdClass RibbonTrailMesh) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[8], curve) }
func (gdClass RibbonTrailMesh) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodRibbonTrailMesh[9]) }
func (gdClass RibbonTrailMesh) SetShape(shape RibbonTrailMeshShape)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[10], shape) }
func (gdClass RibbonTrailMesh) GetShape() RibbonTrailMeshShape { return gdnative.Return[RibbonTrailMeshShape](gdnative.Object(gdClass), methodRibbonTrailMesh[11]) }

type RichTextEffect gdnative.Object

var methodRichTextEffect [1]gdnative.Method
func (gdClass RichTextEffect) ProcessCustomFxImplementation(char_fx CharFXTransform) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextEffect[0], char_fx) }

type RichTextLabel gdnative.Object

var methodRichTextLabel [108]gdnative.Method

type RichTextLabelListType int64

const (
	RichTextLabelListNumbers RichTextLabelListType = 0
	RichTextLabelListLetters RichTextLabelListType = 1
	RichTextLabelListRoman RichTextLabelListType = 2
	RichTextLabelListDots RichTextLabelListType = 3
)

type RichTextLabelItemType int64

const (
	RichTextLabelItemFrame RichTextLabelItemType = 0
	RichTextLabelItemText RichTextLabelItemType = 1
	RichTextLabelItemImage RichTextLabelItemType = 2
	RichTextLabelItemNewline RichTextLabelItemType = 3
	RichTextLabelItemFont RichTextLabelItemType = 4
	RichTextLabelItemFontSize RichTextLabelItemType = 5
	RichTextLabelItemFontFeatures RichTextLabelItemType = 6
	RichTextLabelItemColor RichTextLabelItemType = 7
	RichTextLabelItemOutlineSize RichTextLabelItemType = 8
	RichTextLabelItemOutlineColor RichTextLabelItemType = 9
	RichTextLabelItemUnderline RichTextLabelItemType = 10
	RichTextLabelItemStrikethrough RichTextLabelItemType = 11
	RichTextLabelItemParagraph RichTextLabelItemType = 12
	RichTextLabelItemIndent RichTextLabelItemType = 13
	RichTextLabelItemList RichTextLabelItemType = 14
	RichTextLabelItemTable RichTextLabelItemType = 15
	RichTextLabelItemFade RichTextLabelItemType = 16
	RichTextLabelItemShake RichTextLabelItemType = 17
	RichTextLabelItemWave RichTextLabelItemType = 18
	RichTextLabelItemTornado RichTextLabelItemType = 19
	RichTextLabelItemRainbow RichTextLabelItemType = 20
	RichTextLabelItemBgcolor RichTextLabelItemType = 21
	RichTextLabelItemFgcolor RichTextLabelItemType = 22
	RichTextLabelItemMeta RichTextLabelItemType = 23
	RichTextLabelItemHint RichTextLabelItemType = 24
	RichTextLabelItemDropcap RichTextLabelItemType = 25
	RichTextLabelItemCustomfx RichTextLabelItemType = 26
)
func (gdClass RichTextLabel) GetParsedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[0]) }
func (gdClass RichTextLabel) AddText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[1], text) }
func (gdClass RichTextLabel) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[2], text) }
func (gdClass RichTextLabel) AddImage(image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[3], image, width, height, color, inline_align) }
func (gdClass RichTextLabel) Newline()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[4]) }
func (gdClass RichTextLabel) RemoveLine(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[5], line) }
func (gdClass RichTextLabel) PushFont(font Font, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[6], font, font_size) }
func (gdClass RichTextLabel) PushFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[7], font_size) }
func (gdClass RichTextLabel) PushNormal()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[8]) }
func (gdClass RichTextLabel) PushBold()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[9]) }
func (gdClass RichTextLabel) PushBoldItalics()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[10]) }
func (gdClass RichTextLabel) PushItalics()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[11]) }
func (gdClass RichTextLabel) PushMono()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[12]) }
func (gdClass RichTextLabel) PushColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[13], color) }
func (gdClass RichTextLabel) PushOutlineSize(outline_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[14], outline_size) }
func (gdClass RichTextLabel) PushOutlineColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[15], color) }
func (gdClass RichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language string, st_parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[16], alignment, base_direction, language, st_parser) }
func (gdClass RichTextLabel) PushIndent(level int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[17], level) }
func (gdClass RichTextLabel) PushList(level int64, atype RichTextLabelListType, capitalize bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[18], level, atype, capitalize) }
func (gdClass RichTextLabel) PushMeta(data any)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[19], data) }
func (gdClass RichTextLabel) PushHint(description string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[20], description) }
func (gdClass RichTextLabel) PushUnderline()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[21]) }
func (gdClass RichTextLabel) PushStrikethrough()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[22]) }
func (gdClass RichTextLabel) PushTable(columns int64, inline_align InlineAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[23], columns, inline_align) }
func (gdClass RichTextLabel) PushDropcap(s string, font Font, size int64, dropcap_margins Rect2, color Color, outline_size int64, outline_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[24], s, font, size, dropcap_margins, color, outline_size, outline_color) }
func (gdClass RichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[25], column, expand, ratio) }
func (gdClass RichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[26], odd_row_bg, even_row_bg) }
func (gdClass RichTextLabel) SetCellBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[27], color) }
func (gdClass RichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[28], min_size, max_size) }
func (gdClass RichTextLabel) SetCellPadding(padding Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[29], padding) }
func (gdClass RichTextLabel) PushCell()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[30]) }
func (gdClass RichTextLabel) PushFgcolor(fgcolor Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[31], fgcolor) }
func (gdClass RichTextLabel) PushBgcolor(bgcolor Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[32], bgcolor) }
func (gdClass RichTextLabel) Pop()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[33]) }
func (gdClass RichTextLabel) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[34]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[35], parser) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodRichTextLabel[36]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[37], args) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRichTextLabel[38]) }
func (gdClass RichTextLabel) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[39], direction) }
func (gdClass RichTextLabel) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodRichTextLabel[40]) }
func (gdClass RichTextLabel) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[41], language) }
func (gdClass RichTextLabel) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[42]) }
func (gdClass RichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[43], autowrap_mode) }
func (gdClass RichTextLabel) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodRichTextLabel[44]) }
func (gdClass RichTextLabel) SetMetaUnderline(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[45], enable) }
func (gdClass RichTextLabel) IsMetaUnderlined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[46]) }
func (gdClass RichTextLabel) SetHintUnderline(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[47], enable) }
func (gdClass RichTextLabel) IsHintUnderlined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[48]) }
func (gdClass RichTextLabel) SetOverrideSelectedFontColor(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[49], override) }
func (gdClass RichTextLabel) IsOverridingSelectedFontColor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[50]) }
func (gdClass RichTextLabel) SetScrollActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[51], active) }
func (gdClass RichTextLabel) IsScrollActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[52]) }
func (gdClass RichTextLabel) SetScrollFollow(follow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[53], follow) }
func (gdClass RichTextLabel) IsScrollFollowing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[54]) }
func (gdClass RichTextLabel) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodRichTextLabel[55]) }
func (gdClass RichTextLabel) ScrollToLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[56], line) }
func (gdClass RichTextLabel) ScrollToParagraph(paragraph int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[57], paragraph) }
func (gdClass RichTextLabel) SetTabSize(spaces int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[58], spaces) }
func (gdClass RichTextLabel) GetTabSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[59]) }
func (gdClass RichTextLabel) SetFitContentHeight(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[60], enabled) }
func (gdClass RichTextLabel) IsFitContentHeightEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[61]) }
func (gdClass RichTextLabel) SetSelectionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[62], enabled) }
func (gdClass RichTextLabel) IsSelectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[63]) }
func (gdClass RichTextLabel) SetContextMenuEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[64], enabled) }
func (gdClass RichTextLabel) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[65]) }
func (gdClass RichTextLabel) SetShortcutKeysEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[66], enabled) }
func (gdClass RichTextLabel) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[67]) }
func (gdClass RichTextLabel) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[68], enable) }
func (gdClass RichTextLabel) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[69]) }
func (gdClass RichTextLabel) GetSelectionFrom() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[70]) }
func (gdClass RichTextLabel) GetSelectionTo() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[71]) }
func (gdClass RichTextLabel) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[72]) }
func (gdClass RichTextLabel) GetSelectedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[73]) }
func (gdClass RichTextLabel) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[74]) }
func (gdClass RichTextLabel) ParseBbcode(bbcode string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[75], bbcode) }
func (gdClass RichTextLabel) AppendText(bbcode string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[76], bbcode) }
func (gdClass RichTextLabel) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[77]) }
func (gdClass RichTextLabel) IsReady() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[78]) }
func (gdClass RichTextLabel) SetThreaded(threaded bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[79], threaded) }
func (gdClass RichTextLabel) IsThreaded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[80]) }
func (gdClass RichTextLabel) SetProgressBarDelay(delay_ms int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[81], delay_ms) }
func (gdClass RichTextLabel) GetProgressBarDelay() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[82]) }
func (gdClass RichTextLabel) SetVisibleCharacters(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[83], amount) }
func (gdClass RichTextLabel) GetVisibleCharacters() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[84]) }
func (gdClass RichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return gdnative.Return[TextServerVisibleCharactersBehavior](gdnative.Object(gdClass), methodRichTextLabel[85]) }
func (gdClass RichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[86], behavior) }
func (gdClass RichTextLabel) SetPercentVisible(percent_visible float64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[87], percent_visible) }
func (gdClass RichTextLabel) GetPercentVisible() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[88]) }
func (gdClass RichTextLabel) GetCharacterLine(character int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[89], character) }
func (gdClass RichTextLabel) GetCharacterParagraph(character int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[90], character) }
func (gdClass RichTextLabel) GetTotalCharacterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[91]) }
func (gdClass RichTextLabel) SetUseBbcode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[92], enable) }
func (gdClass RichTextLabel) IsUsingBbcode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[93]) }
func (gdClass RichTextLabel) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[94]) }
func (gdClass RichTextLabel) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[95]) }
func (gdClass RichTextLabel) GetParagraphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[96]) }
func (gdClass RichTextLabel) GetVisibleParagraphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[97]) }
func (gdClass RichTextLabel) GetContentHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[98]) }
func (gdClass RichTextLabel) GetContentWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[99]) }
func (gdClass RichTextLabel) GetLineOffset(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[100], line) }
func (gdClass RichTextLabel) GetParagraphOffset(paragraph int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[101], paragraph) }
func (gdClass RichTextLabel) ParseExpressionsForValues(expressions []string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRichTextLabel[102], expressions) }
func (gdClass RichTextLabel) SetEffects(effects Array)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[103], effects) }
func (gdClass RichTextLabel) GetEffects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRichTextLabel[104]) }
func (gdClass RichTextLabel) InstallEffect(effect any)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[105], effect) }
func (gdClass RichTextLabel) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodRichTextLabel[106]) }
func (gdClass RichTextLabel) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[107]) }

type RigidDynamicBody2D gdnative.Object

var methodRigidDynamicBody2D [58]gdnative.Method

type RigidDynamicBody2DFreezeMode int64

const (
	RigidDynamicBody2DFreezeModeStatic RigidDynamicBody2DFreezeMode = 0
	RigidDynamicBody2DFreezeModeKinematic RigidDynamicBody2DFreezeMode = 1
)

type RigidDynamicBody2DCenterOfMassMode int64

const (
	RigidDynamicBody2DCenterOfMassModeAuto RigidDynamicBody2DCenterOfMassMode = 0
	RigidDynamicBody2DCenterOfMassModeCustom RigidDynamicBody2DCenterOfMassMode = 1
)

type RigidDynamicBody2DDampMode int64

const (
	RigidDynamicBody2DDampModeCombine RigidDynamicBody2DDampMode = 0
	RigidDynamicBody2DDampModeReplace RigidDynamicBody2DDampMode = 1
)

type RigidDynamicBody2DCCDMode int64

const (
	RigidDynamicBody2DCcdModeDisabled RigidDynamicBody2DCCDMode = 0
	RigidDynamicBody2DCcdModeCastRay RigidDynamicBody2DCCDMode = 1
	RigidDynamicBody2DCcdModeCastShape RigidDynamicBody2DCCDMode = 2
)
func (gdClass RigidDynamicBody2D) IntegrateForcesImplementation(state PhysicsDirectBodyState2D)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[0], state) }
func (gdClass RigidDynamicBody2D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[1], mass) }
func (gdClass RigidDynamicBody2D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[2]) }
func (gdClass RigidDynamicBody2D) GetInertia() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[3]) }
func (gdClass RigidDynamicBody2D) SetInertia(inertia float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[4], inertia) }
func (gdClass RigidDynamicBody2D) SetCenterOfMassMode(mode RigidDynamicBody2DCenterOfMassMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[5], mode) }
func (gdClass RigidDynamicBody2D) GetCenterOfMassMode() RigidDynamicBody2DCenterOfMassMode { return gdnative.Return[RigidDynamicBody2DCenterOfMassMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[6]) }
func (gdClass RigidDynamicBody2D) SetCenterOfMass(center_of_mass Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[7], center_of_mass) }
func (gdClass RigidDynamicBody2D) GetCenterOfMass() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[8]) }
func (gdClass RigidDynamicBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[9], physics_material_override) }
func (gdClass RigidDynamicBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodRigidDynamicBody2D[10]) }
func (gdClass RigidDynamicBody2D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[11], gravity_scale) }
func (gdClass RigidDynamicBody2D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[12]) }
func (gdClass RigidDynamicBody2D) SetLinearDampMode(linear_damp_mode RigidDynamicBody2DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[13], linear_damp_mode) }
func (gdClass RigidDynamicBody2D) GetLinearDampMode() RigidDynamicBody2DDampMode { return gdnative.Return[RigidDynamicBody2DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[14]) }
func (gdClass RigidDynamicBody2D) SetAngularDampMode(angular_damp_mode RigidDynamicBody2DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[15], angular_damp_mode) }
func (gdClass RigidDynamicBody2D) GetAngularDampMode() RigidDynamicBody2DDampMode { return gdnative.Return[RigidDynamicBody2DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[16]) }
func (gdClass RigidDynamicBody2D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[17], linear_damp) }
func (gdClass RigidDynamicBody2D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[18]) }
func (gdClass RigidDynamicBody2D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[19], angular_damp) }
func (gdClass RigidDynamicBody2D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[20]) }
func (gdClass RigidDynamicBody2D) SetLinearVelocity(linear_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[21], linear_velocity) }
func (gdClass RigidDynamicBody2D) GetLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[22]) }
func (gdClass RigidDynamicBody2D) SetAngularVelocity(angular_velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[23], angular_velocity) }
func (gdClass RigidDynamicBody2D) GetAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[24]) }
func (gdClass RigidDynamicBody2D) SetMaxContactsReported(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[25], amount) }
func (gdClass RigidDynamicBody2D) GetMaxContactsReported() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRigidDynamicBody2D[26]) }
func (gdClass RigidDynamicBody2D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[27], enable) }
func (gdClass RigidDynamicBody2D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[28]) }
func (gdClass RigidDynamicBody2D) SetContactMonitor(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[29], enabled) }
func (gdClass RigidDynamicBody2D) IsContactMonitorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[30]) }
func (gdClass RigidDynamicBody2D) SetContinuousCollisionDetectionMode(mode RigidDynamicBody2DCCDMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[31], mode) }
func (gdClass RigidDynamicBody2D) GetContinuousCollisionDetectionMode() RigidDynamicBody2DCCDMode { return gdnative.Return[RigidDynamicBody2DCCDMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[32]) }
func (gdClass RigidDynamicBody2D) SetAxisVelocity(axis_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[33], axis_velocity) }
func (gdClass RigidDynamicBody2D) ApplyCentralImpulse(impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[34], impulse) }
func (gdClass RigidDynamicBody2D) ApplyImpulse(impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[35], impulse, position) }
func (gdClass RigidDynamicBody2D) ApplyTorqueImpulse(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[36], torque) }
func (gdClass RigidDynamicBody2D) ApplyCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[37], force) }
func (gdClass RigidDynamicBody2D) ApplyForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[38], force, position) }
func (gdClass RigidDynamicBody2D) ApplyTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[39], torque) }
func (gdClass RigidDynamicBody2D) AddConstantCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[40], force) }
func (gdClass RigidDynamicBody2D) AddConstantForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[41], force, position) }
func (gdClass RigidDynamicBody2D) AddConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[42], torque) }
func (gdClass RigidDynamicBody2D) SetConstantForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[43], force) }
func (gdClass RigidDynamicBody2D) GetConstantForce() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[44]) }
func (gdClass RigidDynamicBody2D) SetConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[45], torque) }
func (gdClass RigidDynamicBody2D) GetConstantTorque() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[46]) }
func (gdClass RigidDynamicBody2D) SetSleeping(sleeping bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[47], sleeping) }
func (gdClass RigidDynamicBody2D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[48]) }
func (gdClass RigidDynamicBody2D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[49], able_to_sleep) }
func (gdClass RigidDynamicBody2D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[50]) }
func (gdClass RigidDynamicBody2D) SetLockRotationEnabled(lock_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[51], lock_rotation) }
func (gdClass RigidDynamicBody2D) IsLockRotationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[52]) }
func (gdClass RigidDynamicBody2D) SetFreezeEnabled(freeze_mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[53], freeze_mode) }
func (gdClass RigidDynamicBody2D) IsFreezeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[54]) }
func (gdClass RigidDynamicBody2D) SetFreezeMode(freeze_mode RigidDynamicBody2DFreezeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[55], freeze_mode) }
func (gdClass RigidDynamicBody2D) GetFreezeMode() RigidDynamicBody2DFreezeMode { return gdnative.Return[RigidDynamicBody2DFreezeMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[56]) }
func (gdClass RigidDynamicBody2D) GetCollidingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRigidDynamicBody2D[57]) }

type RigidDynamicBody3D gdnative.Object

var methodRigidDynamicBody3D [59]gdnative.Method

type RigidDynamicBody3DFreezeMode int64

const (
	RigidDynamicBody3DFreezeModeStatic RigidDynamicBody3DFreezeMode = 0
	RigidDynamicBody3DFreezeModeKinematic RigidDynamicBody3DFreezeMode = 1
)

type RigidDynamicBody3DCenterOfMassMode int64

const (
	RigidDynamicBody3DCenterOfMassModeAuto RigidDynamicBody3DCenterOfMassMode = 0
	RigidDynamicBody3DCenterOfMassModeCustom RigidDynamicBody3DCenterOfMassMode = 1
)

type RigidDynamicBody3DDampMode int64

const (
	RigidDynamicBody3DDampModeCombine RigidDynamicBody3DDampMode = 0
	RigidDynamicBody3DDampModeReplace RigidDynamicBody3DDampMode = 1
)
func (gdClass RigidDynamicBody3D) IntegrateForcesImplementation(state PhysicsDirectBodyState3D)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[0], state) }
func (gdClass RigidDynamicBody3D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[1], mass) }
func (gdClass RigidDynamicBody3D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[2]) }
func (gdClass RigidDynamicBody3D) SetInertia(inertia Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[3], inertia) }
func (gdClass RigidDynamicBody3D) GetInertia() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[4]) }
func (gdClass RigidDynamicBody3D) SetCenterOfMassMode(mode RigidDynamicBody3DCenterOfMassMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[5], mode) }
func (gdClass RigidDynamicBody3D) GetCenterOfMassMode() RigidDynamicBody3DCenterOfMassMode { return gdnative.Return[RigidDynamicBody3DCenterOfMassMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[6]) }
func (gdClass RigidDynamicBody3D) SetCenterOfMass(center_of_mass Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[7], center_of_mass) }
func (gdClass RigidDynamicBody3D) GetCenterOfMass() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[8]) }
func (gdClass RigidDynamicBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[9], physics_material_override) }
func (gdClass RigidDynamicBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodRigidDynamicBody3D[10]) }
func (gdClass RigidDynamicBody3D) SetLinearVelocity(linear_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[11], linear_velocity) }
func (gdClass RigidDynamicBody3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[12]) }
func (gdClass RigidDynamicBody3D) SetAngularVelocity(angular_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[13], angular_velocity) }
func (gdClass RigidDynamicBody3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[14]) }
func (gdClass RigidDynamicBody3D) GetInverseInertiaTensor() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodRigidDynamicBody3D[15]) }
func (gdClass RigidDynamicBody3D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[16], gravity_scale) }
func (gdClass RigidDynamicBody3D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[17]) }
func (gdClass RigidDynamicBody3D) SetLinearDampMode(linear_damp_mode RigidDynamicBody3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[18], linear_damp_mode) }
func (gdClass RigidDynamicBody3D) GetLinearDampMode() RigidDynamicBody3DDampMode { return gdnative.Return[RigidDynamicBody3DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[19]) }
func (gdClass RigidDynamicBody3D) SetAngularDampMode(angular_damp_mode RigidDynamicBody3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[20], angular_damp_mode) }
func (gdClass RigidDynamicBody3D) GetAngularDampMode() RigidDynamicBody3DDampMode { return gdnative.Return[RigidDynamicBody3DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[21]) }
func (gdClass RigidDynamicBody3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[22], linear_damp) }
func (gdClass RigidDynamicBody3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[23]) }
func (gdClass RigidDynamicBody3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[24], angular_damp) }
func (gdClass RigidDynamicBody3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[25]) }
func (gdClass RigidDynamicBody3D) SetMaxContactsReported(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[26], amount) }
func (gdClass RigidDynamicBody3D) GetMaxContactsReported() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRigidDynamicBody3D[27]) }
func (gdClass RigidDynamicBody3D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[28], enable) }
func (gdClass RigidDynamicBody3D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[29]) }
func (gdClass RigidDynamicBody3D) SetContactMonitor(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[30], enabled) }
func (gdClass RigidDynamicBody3D) IsContactMonitorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[31]) }
func (gdClass RigidDynamicBody3D) SetUseContinuousCollisionDetection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[32], enable) }
func (gdClass RigidDynamicBody3D) IsUsingContinuousCollisionDetection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[33]) }
func (gdClass RigidDynamicBody3D) SetAxisVelocity(axis_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[34], axis_velocity) }
func (gdClass RigidDynamicBody3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[35], impulse) }
func (gdClass RigidDynamicBody3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[36], impulse, position) }
func (gdClass RigidDynamicBody3D) ApplyTorqueImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[37], impulse) }
func (gdClass RigidDynamicBody3D) ApplyCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[38], force) }
func (gdClass RigidDynamicBody3D) ApplyForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[39], force, position) }
func (gdClass RigidDynamicBody3D) ApplyTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[40], torque) }
func (gdClass RigidDynamicBody3D) AddConstantCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[41], force) }
func (gdClass RigidDynamicBody3D) AddConstantForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[42], force, position) }
func (gdClass RigidDynamicBody3D) AddConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[43], torque) }
func (gdClass RigidDynamicBody3D) SetConstantForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[44], force) }
func (gdClass RigidDynamicBody3D) GetConstantForce() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[45]) }
func (gdClass RigidDynamicBody3D) SetConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[46], torque) }
func (gdClass RigidDynamicBody3D) GetConstantTorque() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[47]) }
func (gdClass RigidDynamicBody3D) SetSleeping(sleeping bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[48], sleeping) }
func (gdClass RigidDynamicBody3D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[49]) }
func (gdClass RigidDynamicBody3D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[50], able_to_sleep) }
func (gdClass RigidDynamicBody3D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[51]) }
func (gdClass RigidDynamicBody3D) SetLockRotationEnabled(lock_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[52], lock_rotation) }
func (gdClass RigidDynamicBody3D) IsLockRotationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[53]) }
func (gdClass RigidDynamicBody3D) SetFreezeEnabled(freeze_mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[54], freeze_mode) }
func (gdClass RigidDynamicBody3D) IsFreezeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[55]) }
func (gdClass RigidDynamicBody3D) SetFreezeMode(freeze_mode RigidDynamicBody3DFreezeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[56], freeze_mode) }
func (gdClass RigidDynamicBody3D) GetFreezeMode() RigidDynamicBody3DFreezeMode { return gdnative.Return[RigidDynamicBody3DFreezeMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[57]) }
func (gdClass RigidDynamicBody3D) GetCollidingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRigidDynamicBody3D[58]) }

type RootMotionView gdnative.Object

var methodRootMotionView [10]gdnative.Method
func (gdClass RootMotionView) SetAnimationPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[0], path) }
func (gdClass RootMotionView) GetAnimationPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRootMotionView[1]) }
func (gdClass RootMotionView) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[2], color) }
func (gdClass RootMotionView) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRootMotionView[3]) }
func (gdClass RootMotionView) SetCellSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[4], size) }
func (gdClass RootMotionView) GetCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRootMotionView[5]) }
func (gdClass RootMotionView) SetRadius(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[6], size) }
func (gdClass RootMotionView) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRootMotionView[7]) }
func (gdClass RootMotionView) SetZeroY(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[8], enable) }
func (gdClass RootMotionView) GetZeroY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRootMotionView[9]) }

type SceneMultiplayer gdnative.Object

var methodSceneMultiplayer [8]gdnative.Method
func (gdClass SceneMultiplayer) SetRootPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[0], path) }
func (gdClass SceneMultiplayer) GetRootPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneMultiplayer[1]) }
func (gdClass SceneMultiplayer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[2]) }
func (gdClass SceneMultiplayer) SetRefuseNewConnections(refuse bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[3], refuse) }
func (gdClass SceneMultiplayer) IsRefusingNewConnections() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneMultiplayer[4]) }
func (gdClass SceneMultiplayer) SetAllowObjectDecoding(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[5], enable) }
func (gdClass SceneMultiplayer) IsObjectDecodingAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneMultiplayer[6]) }
func (gdClass SceneMultiplayer) SendBytes(bytes []byte, id int64, mode MultiplayerPeerTransferMode, channel int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneMultiplayer[7], bytes, id, mode, channel) }

type SceneReplicationConfig gdnative.Object

var methodSceneReplicationConfig [9]gdnative.Method
func (gdClass SceneReplicationConfig) GetProperties() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneReplicationConfig[0]) }
func (gdClass SceneReplicationConfig) AddProperty(path NodePath, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[1], path, index) }
func (gdClass SceneReplicationConfig) HasProperty(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[2], path) }
func (gdClass SceneReplicationConfig) RemoveProperty(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[3], path) }
func (gdClass SceneReplicationConfig) PropertyGetIndex(path NodePath) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneReplicationConfig[4], path) }
func (gdClass SceneReplicationConfig) PropertyGetSpawn(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[5], path) }
func (gdClass SceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[6], path, enabled) }
func (gdClass SceneReplicationConfig) PropertyGetSync(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[7], path) }
func (gdClass SceneReplicationConfig) PropertySetSync(path NodePath, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[8], path, enabled) }

type SceneState gdnative.Object

var methodSceneState [21]gdnative.Method

type SceneStateGenEditState int64

const (
	SceneStateGenEditStateDisabled SceneStateGenEditState = 0
	SceneStateGenEditStateInstance SceneStateGenEditState = 1
	SceneStateGenEditStateMain SceneStateGenEditState = 2
	SceneStateGenEditStateMainInherited SceneStateGenEditState = 3
)
func (gdClass SceneState) GetNodeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[0]) }
func (gdClass SceneState) GetNodeType(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[1], idx) }
func (gdClass SceneState) GetNodeName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[2], idx) }
func (gdClass SceneState) GetNodePath(idx int64, for_parent bool) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[3], idx, for_parent) }
func (gdClass SceneState) GetNodeOwnerPath(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[4], idx) }
func (gdClass SceneState) IsNodeInstancePlaceholder(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneState[5], idx) }
func (gdClass SceneState) GetNodeInstancePlaceholder(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[6], idx) }
func (gdClass SceneState) GetNodeInstance(idx int64) PackedScene { return gdnative.Return[PackedScene](gdnative.Object(gdClass), methodSceneState[7], idx) }
func (gdClass SceneState) GetNodeGroups(idx int64) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSceneState[8], idx) }
func (gdClass SceneState) GetNodeIndex(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[9], idx) }
func (gdClass SceneState) GetNodePropertyCount(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[10], idx) }
func (gdClass SceneState) GetNodePropertyName(idx int64, prop_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[11], idx, prop_idx) }
func (gdClass SceneState) GetNodePropertyValue(idx int64, prop_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodSceneState[12], idx, prop_idx) }
func (gdClass SceneState) GetConnectionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[13]) }
func (gdClass SceneState) GetConnectionSource(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[14], idx) }
func (gdClass SceneState) GetConnectionSignal(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[15], idx) }
func (gdClass SceneState) GetConnectionTarget(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[16], idx) }
func (gdClass SceneState) GetConnectionMethod(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[17], idx) }
func (gdClass SceneState) GetConnectionFlags(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[18], idx) }
func (gdClass SceneState) GetConnectionBinds(idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneState[19], idx) }
func (gdClass SceneState) GetConnectionUnbinds(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[20], idx) }

type SceneTree gdnative.Object

var methodSceneTree [40]gdnative.Method

type SceneTreeGroupCallFlags int64

const (
	SceneTreeGroupCallDefault SceneTreeGroupCallFlags = 0
	SceneTreeGroupCallReverse SceneTreeGroupCallFlags = 1
	SceneTreeGroupCallDeferred SceneTreeGroupCallFlags = 2
	SceneTreeGroupCallUnique SceneTreeGroupCallFlags = 4
)
func (gdClass SceneTree) GetRoot() Window { return gdnative.Return[Window](gdnative.Object(gdClass), methodSceneTree[0]) }
func (gdClass SceneTree) HasGroup(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[1], name) }
func (gdClass SceneTree) IsAutoAcceptQuit() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[2]) }
func (gdClass SceneTree) SetAutoAcceptQuit(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[3], enabled) }
func (gdClass SceneTree) IsQuitOnGoBack() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[4]) }
func (gdClass SceneTree) SetQuitOnGoBack(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[5], enabled) }
func (gdClass SceneTree) SetDebugCollisionsHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[6], enable) }
func (gdClass SceneTree) IsDebuggingCollisionsHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[7]) }
func (gdClass SceneTree) SetDebugPathsHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[8], enable) }
func (gdClass SceneTree) IsDebuggingPathsHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[9]) }
func (gdClass SceneTree) SetDebugNavigationHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[10], enable) }
func (gdClass SceneTree) IsDebuggingNavigationHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[11]) }
func (gdClass SceneTree) SetEditedSceneRoot(scene Node)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[12], scene) }
func (gdClass SceneTree) GetEditedSceneRoot() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[13]) }
func (gdClass SceneTree) SetPause(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[14], enable) }
func (gdClass SceneTree) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[15]) }
func (gdClass SceneTree) CreateTimer(time_sec float64, process_always bool) SceneTreeTimer { return gdnative.Return[SceneTreeTimer](gdnative.Object(gdClass), methodSceneTree[16], time_sec, process_always) }
func (gdClass SceneTree) CreateTween() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodSceneTree[17]) }
func (gdClass SceneTree) GetProcessedTweens() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneTree[18]) }
func (gdClass SceneTree) GetNodeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneTree[19]) }
func (gdClass SceneTree) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneTree[20]) }
func (gdClass SceneTree) Quit(exit_code int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[21], exit_code) }
func (gdClass SceneTree) QueueDelete(obj Object)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[22], obj) }
func (gdClass SceneTree) CallGroupFlags(flags int64, group string, method string)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[23], flags, group, method) }
func (gdClass SceneTree) NotifyGroupFlags(call_flags int64, group string, notification int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[24], call_flags, group, notification) }
func (gdClass SceneTree) SetGroupFlags(call_flags int64, group string, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[25], call_flags, group, property, value) }
func (gdClass SceneTree) CallGroup(group string, method string)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[26], group, method) }
func (gdClass SceneTree) NotifyGroup(group string, notification int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[27], group, notification) }
func (gdClass SceneTree) SetGroup(group string, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[28], group, property, value) }
func (gdClass SceneTree) GetNodesInGroup(group string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneTree[29], group) }
func (gdClass SceneTree) GetFirstNodeInGroup(group string) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[30], group) }
func (gdClass SceneTree) SetCurrentScene(child_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[31], child_node) }
func (gdClass SceneTree) GetCurrentScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[32]) }
func (gdClass SceneTree) ChangeScene(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[33], path) }
func (gdClass SceneTree) ChangeSceneTo(packed_scene PackedScene) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[34], packed_scene) }
func (gdClass SceneTree) ReloadCurrentScene() error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[35]) }
func (gdClass SceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[36], multiplayer, root_path) }
func (gdClass SceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodSceneTree[37], for_path) }
func (gdClass SceneTree) SetMultiplayerPollEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[38], enabled) }
func (gdClass SceneTree) IsMultiplayerPollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[39]) }

type SceneTreeTimer gdnative.Object

var methodSceneTreeTimer [2]gdnative.Method
func (gdClass SceneTreeTimer) SetTimeLeft(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTreeTimer[0], time) }
func (gdClass SceneTreeTimer) GetTimeLeft() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSceneTreeTimer[1]) }

type Script gdnative.Object

var methodScript [15]gdnative.Method
func (gdClass Script) CanInstantiate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[0]) }
func (gdClass Script) InstanceHas(base_object Object) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[1], base_object) }
func (gdClass Script) HasSourceCode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[2]) }
func (gdClass Script) GetSourceCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScript[3]) }
func (gdClass Script) SetSourceCode(source string)  { gdnative.Call(gdnative.Object(gdClass), methodScript[4], source) }
func (gdClass Script) Reload(keep_state bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodScript[5], keep_state) }
func (gdClass Script) GetBaseScript() Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScript[6]) }
func (gdClass Script) GetInstanceBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScript[7]) }
func (gdClass Script) HasScriptSignal(signal_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[8], signal_name) }
func (gdClass Script) GetScriptPropertyList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[9]) }
func (gdClass Script) GetScriptMethodList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[10]) }
func (gdClass Script) GetScriptSignalList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[11]) }
func (gdClass Script) GetScriptConstantMap() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScript[12]) }
func (gdClass Script) GetPropertyDefaultValue(property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodScript[13], property) }
func (gdClass Script) IsTool() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[14]) }

type ScriptCreateDialog gdnative.Object

var methodScriptCreateDialog [1]gdnative.Method
func (gdClass ScriptCreateDialog) Config(inherits string, path string, built_in_enabled bool, load_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodScriptCreateDialog[0], inherits, path, built_in_enabled, load_enabled) }

type ScriptEditor gdnative.Object

var methodScriptEditor [8]gdnative.Method
func (gdClass ScriptEditor) GetCurrentEditor() ScriptEditorBase { return gdnative.Return[ScriptEditorBase](gdnative.Object(gdClass), methodScriptEditor[0]) }
func (gdClass ScriptEditor) GetOpenScriptEditors() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptEditor[1]) }
func (gdClass ScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[2], syntax_highlighter) }
func (gdClass ScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[3], syntax_highlighter) }
func (gdClass ScriptEditor) GotoLine(line_number int64)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[4], line_number) }
func (gdClass ScriptEditor) GetCurrentScript() Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScriptEditor[5]) }
func (gdClass ScriptEditor) GetOpenScripts() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptEditor[6]) }
func (gdClass ScriptEditor) OpenScriptCreateDialog(base_name string, base_path string)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[7], base_name, base_path) }

type ScriptEditorBase gdnative.Object

var methodScriptEditorBase [2]gdnative.Method
func (gdClass ScriptEditorBase) GetBaseEditor() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodScriptEditorBase[0]) }
func (gdClass ScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditorBase[1], highlighter) }

type ScriptExtension gdnative.Object

var methodScriptExtension [30]gdnative.Method
func (gdClass ScriptExtension) EditorCanReloadFromFileImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[0]) }
func (gdClass ScriptExtension) PlaceholderErasedImplementation(placeholder []byte)  { gdnative.Call(gdnative.Object(gdClass), methodScriptExtension[1], placeholder) }
func (gdClass ScriptExtension) CanInstantiateImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[2]) }
func (gdClass ScriptExtension) GetBaseScriptImplementation() Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScriptExtension[3]) }
func (gdClass ScriptExtension) InheritsScriptImplementation(script Script) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[4], script) }
func (gdClass ScriptExtension) GetInstanceBaseTypeImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptExtension[5]) }
func (gdClass ScriptExtension) InstanceCreateImplementation(for_object Object) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodScriptExtension[6], for_object) }
func (gdClass ScriptExtension) PlaceholderInstanceCreateImplementation(for_object Object) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodScriptExtension[7], for_object) }
func (gdClass ScriptExtension) InstanceHasImplementation(object Object) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[8], object) }
func (gdClass ScriptExtension) HasSourceCodeImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[9]) }
func (gdClass ScriptExtension) GetSourceCodeImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptExtension[10]) }
func (gdClass ScriptExtension) SetSourceCodeImplementation(code string)  { gdnative.Call(gdnative.Object(gdClass), methodScriptExtension[11], code) }
func (gdClass ScriptExtension) ReloadImplementation(keep_state bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodScriptExtension[12], keep_state) }
func (gdClass ScriptExtension) GetDocumentationImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptExtension[13]) }
func (gdClass ScriptExtension) HasMethodImplementation(method string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[14], method) }
func (gdClass ScriptExtension) GetMethodInfoImplementation(method string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptExtension[15], method) }
func (gdClass ScriptExtension) IsToolImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[16]) }
func (gdClass ScriptExtension) IsValidImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[17]) }
func (gdClass ScriptExtension) GetLanguageImplementation() ScriptLanguage { return gdnative.Return[ScriptLanguage](gdnative.Object(gdClass), methodScriptExtension[18]) }
func (gdClass ScriptExtension) HasScriptSignalImplementation(signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[19], signal) }
func (gdClass ScriptExtension) GetScriptSignalListImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptExtension[20]) }
func (gdClass ScriptExtension) GetPropertyDefaultValueImplementation(property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodScriptExtension[21], property) }
func (gdClass ScriptExtension) UpdateExportsImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptExtension[22]) }
func (gdClass ScriptExtension) GetScriptMethodListImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptExtension[23]) }
func (gdClass ScriptExtension) GetScriptPropertyListImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptExtension[24]) }
func (gdClass ScriptExtension) GetMemberLineImplementation(member string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptExtension[25], member) }
func (gdClass ScriptExtension) GetConstantsImplementation() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptExtension[26]) }
func (gdClass ScriptExtension) GetMembersImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptExtension[27]) }
func (gdClass ScriptExtension) IsPlaceholderFallbackEnabledImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptExtension[28]) }
func (gdClass ScriptExtension) GetRpcConfigImplementation() any { return gdnative.Return[any](gdnative.Object(gdClass), methodScriptExtension[29]) }

type ScriptLanguage gdnative.Object

var methodScriptLanguage [0]gdnative.Method

type ScriptLanguageExtension gdnative.Object

var methodScriptLanguageExtension [59]gdnative.Method

type ScriptLanguageExtensionLookupResultType int64

const (
	ScriptLanguageExtensionLookupResultScriptLocation ScriptLanguageExtensionLookupResultType = 0
	ScriptLanguageExtensionLookupResultClass ScriptLanguageExtensionLookupResultType = 1
	ScriptLanguageExtensionLookupResultClassConstant ScriptLanguageExtensionLookupResultType = 2
	ScriptLanguageExtensionLookupResultClassProperty ScriptLanguageExtensionLookupResultType = 3
	ScriptLanguageExtensionLookupResultClassMethod ScriptLanguageExtensionLookupResultType = 4
	ScriptLanguageExtensionLookupResultClassSignal ScriptLanguageExtensionLookupResultType = 5
	ScriptLanguageExtensionLookupResultClassEnum ScriptLanguageExtensionLookupResultType = 6
	ScriptLanguageExtensionLookupResultClassTbdGlobalscope ScriptLanguageExtensionLookupResultType = 7
	ScriptLanguageExtensionLookupResultClassAnnotation ScriptLanguageExtensionLookupResultType = 8
	ScriptLanguageExtensionLookupResultMax ScriptLanguageExtensionLookupResultType = 9
)

type ScriptLanguageExtensionCodeCompletionLocation int64

const (
	ScriptLanguageExtensionLocationLocal ScriptLanguageExtensionCodeCompletionLocation = 0
	ScriptLanguageExtensionLocationParentMask ScriptLanguageExtensionCodeCompletionLocation = 256
	ScriptLanguageExtensionLocationOtherUserCode ScriptLanguageExtensionCodeCompletionLocation = 512
	ScriptLanguageExtensionLocationOther ScriptLanguageExtensionCodeCompletionLocation = 1024
)

type ScriptLanguageExtensionCodeCompletionKind int64

const (
	ScriptLanguageExtensionCodeCompletionKindClass ScriptLanguageExtensionCodeCompletionKind = 0
	ScriptLanguageExtensionCodeCompletionKindFunction ScriptLanguageExtensionCodeCompletionKind = 1
	ScriptLanguageExtensionCodeCompletionKindSignal ScriptLanguageExtensionCodeCompletionKind = 2
	ScriptLanguageExtensionCodeCompletionKindVariable ScriptLanguageExtensionCodeCompletionKind = 3
	ScriptLanguageExtensionCodeCompletionKindMember ScriptLanguageExtensionCodeCompletionKind = 4
	ScriptLanguageExtensionCodeCompletionKindEnum ScriptLanguageExtensionCodeCompletionKind = 5
	ScriptLanguageExtensionCodeCompletionKindConstant ScriptLanguageExtensionCodeCompletionKind = 6
	ScriptLanguageExtensionCodeCompletionKindNodePath ScriptLanguageExtensionCodeCompletionKind = 7
	ScriptLanguageExtensionCodeCompletionKindFilePath ScriptLanguageExtensionCodeCompletionKind = 8
	ScriptLanguageExtensionCodeCompletionKindPlainText ScriptLanguageExtensionCodeCompletionKind = 9
	ScriptLanguageExtensionCodeCompletionKindMax ScriptLanguageExtensionCodeCompletionKind = 10
)
func (gdClass ScriptLanguageExtension) GetNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[0]) }
func (gdClass ScriptLanguageExtension) InitImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[1]) }
func (gdClass ScriptLanguageExtension) GetTypeImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[2]) }
func (gdClass ScriptLanguageExtension) GetExtensionImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[3]) }
func (gdClass ScriptLanguageExtension) ExecuteFileImplementation(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodScriptLanguageExtension[4], path) }
func (gdClass ScriptLanguageExtension) FinishImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[5]) }
func (gdClass ScriptLanguageExtension) GetReservedWordsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodScriptLanguageExtension[6]) }
func (gdClass ScriptLanguageExtension) IsControlFlowKeywordImplementation(keyword string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[7], keyword) }
func (gdClass ScriptLanguageExtension) GetCommentDelimitersImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodScriptLanguageExtension[8]) }
func (gdClass ScriptLanguageExtension) GetStringDelimitersImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodScriptLanguageExtension[9]) }
func (gdClass ScriptLanguageExtension) MakeTemplateImplementation(template string, class_name string, base_class_name string) Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScriptLanguageExtension[10], template, class_name, base_class_name) }
func (gdClass ScriptLanguageExtension) GetBuiltInTemplatesImplementation(object string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptLanguageExtension[11], object) }
func (gdClass ScriptLanguageExtension) IsUsingTemplatesImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[12]) }
func (gdClass ScriptLanguageExtension) ValidateImplementation(script string, path string, validate_functions bool, validate_errors bool, validate_warnings bool, validate_safe_lines bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[13], script, path, validate_functions, validate_errors, validate_warnings, validate_safe_lines) }
func (gdClass ScriptLanguageExtension) ValidatePathImplementation(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[14], path) }
func (gdClass ScriptLanguageExtension) CreateScriptImplementation() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodScriptLanguageExtension[15]) }
func (gdClass ScriptLanguageExtension) HasNamedClassesImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[16]) }
func (gdClass ScriptLanguageExtension) SupportsBuiltinModeImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[17]) }
func (gdClass ScriptLanguageExtension) SupportsDocumentationImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[18]) }
func (gdClass ScriptLanguageExtension) CanInheritFromFileImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[19]) }
func (gdClass ScriptLanguageExtension) FindFunctionImplementation(class_name string, function_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptLanguageExtension[20], class_name, function_name) }
func (gdClass ScriptLanguageExtension) MakeFunctionImplementation(class_name string, function_name string, function_args []string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[21], class_name, function_name, function_args) }
func (gdClass ScriptLanguageExtension) OpenInExternalEditorImplementation(script Script, line int64, column int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodScriptLanguageExtension[22], script, line, column) }
func (gdClass ScriptLanguageExtension) OverridesExternalEditorImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[23]) }
func (gdClass ScriptLanguageExtension) CompleteCodeImplementation(code string, path string, owner Object) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[24], code, path, owner) }
func (gdClass ScriptLanguageExtension) LookupCodeImplementation(code string, symbol string, path string, owner Object) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[25], code, symbol, path, owner) }
func (gdClass ScriptLanguageExtension) AutoIndentCodeImplementation(code string, from_line int64, to_line int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[26], code, from_line, to_line) }
func (gdClass ScriptLanguageExtension) AddGlobalConstantImplementation(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[27], name, value) }
func (gdClass ScriptLanguageExtension) AddNamedGlobalConstantImplementation(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[28], name, value) }
func (gdClass ScriptLanguageExtension) RemoveNamedGlobalConstantImplementation(name string)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[29], name) }
func (gdClass ScriptLanguageExtension) ThreadEnterImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[30]) }
func (gdClass ScriptLanguageExtension) ThreadExitImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[31]) }
func (gdClass ScriptLanguageExtension) DebugGetErrorImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[32]) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptLanguageExtension[33]) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelLineImplementation(level int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptLanguageExtension[34], level) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelFunctionImplementation(level int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[35], level) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelLocalsImplementation(level int64, max_subitems int64, max_depth int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[36], level, max_subitems, max_depth) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelMembersImplementation(level int64, max_subitems int64, max_depth int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[37], level, max_subitems, max_depth) }
func (gdClass ScriptLanguageExtension) DebugGetStackLevelInstanceImplementation(level int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodScriptLanguageExtension[38], level) }
func (gdClass ScriptLanguageExtension) DebugGetGlobalsImplementation(max_subitems int64, max_depth int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[39], max_subitems, max_depth) }
func (gdClass ScriptLanguageExtension) DebugParseStackLevelExpressionImplementation(level int64, expression string, max_subitems int64, max_depth int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodScriptLanguageExtension[40], level, expression, max_subitems, max_depth) }
func (gdClass ScriptLanguageExtension) DebugGetCurrentStackInfoImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptLanguageExtension[41]) }
func (gdClass ScriptLanguageExtension) ReloadAllScriptsImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[42]) }
func (gdClass ScriptLanguageExtension) ReloadToolScriptImplementation(script Script, soft_reload bool)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[43], script, soft_reload) }
func (gdClass ScriptLanguageExtension) GetRecognizedExtensionsImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodScriptLanguageExtension[44]) }
func (gdClass ScriptLanguageExtension) GetPublicFunctionsImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptLanguageExtension[45]) }
func (gdClass ScriptLanguageExtension) GetPublicConstantsImplementation() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[46]) }
func (gdClass ScriptLanguageExtension) GetPublicAnnotationsImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptLanguageExtension[47]) }
func (gdClass ScriptLanguageExtension) ProfilingStartImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[48]) }
func (gdClass ScriptLanguageExtension) ProfilingStopImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[49]) }
func (gdClass ScriptLanguageExtension) ProfilingGetAccumulatedDataImplementation(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptLanguageExtension[50], info_array, info_max) }
func (gdClass ScriptLanguageExtension) ProfilingGetFrameDataImplementation(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScriptLanguageExtension[51], info_array, info_max) }
func (gdClass ScriptLanguageExtension) AllocInstanceBindingDataImplementation(object Object) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodScriptLanguageExtension[52], object) }
func (gdClass ScriptLanguageExtension) FreeInstanceBindingDataImplementation(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[53], data) }
func (gdClass ScriptLanguageExtension) RefcountIncrementedInstanceBindingImplementation(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[54], object) }
func (gdClass ScriptLanguageExtension) RefcountDecrementedInstanceBindingImplementation(object Object) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[55], object) }
func (gdClass ScriptLanguageExtension) FrameImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodScriptLanguageExtension[56]) }
func (gdClass ScriptLanguageExtension) HandlesGlobalClassTypeImplementation(atype string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScriptLanguageExtension[57], atype) }
func (gdClass ScriptLanguageExtension) GetGlobalClassNameImplementation(path string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScriptLanguageExtension[58], path) }

type ScrollBar gdnative.Object

var methodScrollBar [2]gdnative.Method
func (gdClass ScrollBar) SetCustomStep(step float64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollBar[0], step) }
func (gdClass ScrollBar) GetCustomStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodScrollBar[1]) }

type ScrollContainer gdnative.Object

var methodScrollContainer [15]gdnative.Method

type ScrollContainerScrollMode int64

const (
	ScrollContainerScrollModeDisabled ScrollContainerScrollMode = 0
	ScrollContainerScrollModeAuto ScrollContainerScrollMode = 1
	ScrollContainerScrollModeShowAlways ScrollContainerScrollMode = 2
	ScrollContainerScrollModeShowNever ScrollContainerScrollMode = 3
)
func (gdClass ScrollContainer) SetHScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[0], value) }
func (gdClass ScrollContainer) GetHScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[1]) }
func (gdClass ScrollContainer) SetVScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[2], value) }
func (gdClass ScrollContainer) GetVScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[3]) }
func (gdClass ScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[4], enable) }
func (gdClass ScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode { return gdnative.Return[ScrollContainerScrollMode](gdnative.Object(gdClass), methodScrollContainer[5]) }
func (gdClass ScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[6], enable) }
func (gdClass ScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode { return gdnative.Return[ScrollContainerScrollMode](gdnative.Object(gdClass), methodScrollContainer[7]) }
func (gdClass ScrollContainer) SetDeadzone(deadzone int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[8], deadzone) }
func (gdClass ScrollContainer) GetDeadzone() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[9]) }
func (gdClass ScrollContainer) SetFollowFocus(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[10], enabled) }
func (gdClass ScrollContainer) IsFollowingFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScrollContainer[11]) }
func (gdClass ScrollContainer) GetHScrollBar() HScrollBar { return gdnative.Return[HScrollBar](gdnative.Object(gdClass), methodScrollContainer[12]) }
func (gdClass ScrollContainer) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodScrollContainer[13]) }
func (gdClass ScrollContainer) EnsureControlVisible(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[14], control) }

type SegmentShape2D gdnative.Object

var methodSegmentShape2D [4]gdnative.Method
func (gdClass SegmentShape2D) SetA(a Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSegmentShape2D[0], a) }
func (gdClass SegmentShape2D) GetA() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSegmentShape2D[1]) }
func (gdClass SegmentShape2D) SetB(b Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSegmentShape2D[2], b) }
func (gdClass SegmentShape2D) GetB() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSegmentShape2D[3]) }

type Semaphore gdnative.Object

var methodSemaphore [3]gdnative.Method
func (gdClass Semaphore) Wait()  { gdnative.Call(gdnative.Object(gdClass), methodSemaphore[0]) }
func (gdClass Semaphore) TryWait() error { return gdnative.Return[error](gdnative.Object(gdClass), methodSemaphore[1]) }
func (gdClass Semaphore) Post()  { gdnative.Call(gdnative.Object(gdClass), methodSemaphore[2]) }

type SeparationRayShape2D gdnative.Object

var methodSeparationRayShape2D [4]gdnative.Method
func (gdClass SeparationRayShape2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape2D[0], length) }
func (gdClass SeparationRayShape2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSeparationRayShape2D[1]) }
func (gdClass SeparationRayShape2D) SetSlideOnSlope(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape2D[2], active) }
func (gdClass SeparationRayShape2D) GetSlideOnSlope() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSeparationRayShape2D[3]) }

type SeparationRayShape3D gdnative.Object

var methodSeparationRayShape3D [4]gdnative.Method
func (gdClass SeparationRayShape3D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape3D[0], length) }
func (gdClass SeparationRayShape3D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSeparationRayShape3D[1]) }
func (gdClass SeparationRayShape3D) SetSlideOnSlope(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape3D[2], active) }
func (gdClass SeparationRayShape3D) GetSlideOnSlope() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSeparationRayShape3D[3]) }

type Separator gdnative.Object

var methodSeparator [0]gdnative.Method

type Shader gdnative.Object

var methodShader [6]gdnative.Method

type ShaderMode int64

const (
	ShaderModeSpatial ShaderMode = 0
	ShaderModeCanvasItem ShaderMode = 1
	ShaderModeParticles ShaderMode = 2
	ShaderModeSky ShaderMode = 3
	ShaderModeFog ShaderMode = 4
)
func (gdClass Shader) GetMode() ShaderMode { return gdnative.Return[ShaderMode](gdnative.Object(gdClass), methodShader[0]) }
func (gdClass Shader) SetCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodShader[1], code) }
func (gdClass Shader) GetCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShader[2]) }
func (gdClass Shader) SetDefaultTextureParam(param string, texture Texture2D, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodShader[3], param, texture, index) }
func (gdClass Shader) GetDefaultTextureParam(param string, index int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodShader[4], param, index) }
func (gdClass Shader) HasUniform(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShader[5], name) }

type ShaderGlobalsOverride gdnative.Object

var methodShaderGlobalsOverride [0]gdnative.Method

type ShaderInclude gdnative.Object

var methodShaderInclude [2]gdnative.Method
func (gdClass ShaderInclude) SetCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodShaderInclude[0], code) }
func (gdClass ShaderInclude) GetCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShaderInclude[1]) }

type ShaderMaterial gdnative.Object

var methodShaderMaterial [6]gdnative.Method
func (gdClass ShaderMaterial) SetShader(shader Shader)  { gdnative.Call(gdnative.Object(gdClass), methodShaderMaterial[0], shader) }
func (gdClass ShaderMaterial) GetShader() Shader { return gdnative.Return[Shader](gdnative.Object(gdClass), methodShaderMaterial[1]) }
func (gdClass ShaderMaterial) SetShaderUniform(param string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodShaderMaterial[2], param, value) }
func (gdClass ShaderMaterial) GetShaderUniform(param string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodShaderMaterial[3], param) }
func (gdClass ShaderMaterial) PropertyCanRevert(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShaderMaterial[4], name) }
func (gdClass ShaderMaterial) PropertyGetRevert(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodShaderMaterial[5], name) }

type Shape2D gdnative.Object

var methodShape2D [7]gdnative.Method
func (gdClass Shape2D) SetCustomSolverBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape2D[0], bias) }
func (gdClass Shape2D) GetCustomSolverBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape2D[1]) }
func (gdClass Shape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShape2D[2], local_xform, with_shape, shape_xform) }
func (gdClass Shape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShape2D[3], local_xform, local_motion, with_shape, shape_xform, shape_motion) }
func (gdClass Shape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShape2D[4], local_xform, with_shape, shape_xform) }
func (gdClass Shape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShape2D[5], local_xform, local_motion, with_shape, shape_xform, shape_motion) }
func (gdClass Shape2D) Draw(canvas_item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodShape2D[6], canvas_item, color) }

type Shape3D gdnative.Object

var methodShape3D [5]gdnative.Method
func (gdClass Shape3D) SetCustomSolverBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape3D[0], bias) }
func (gdClass Shape3D) GetCustomSolverBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape3D[1]) }
func (gdClass Shape3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape3D[2], margin) }
func (gdClass Shape3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape3D[3]) }
func (gdClass Shape3D) GetDebugMesh() ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodShape3D[4]) }

type ShapeCast2D gdnative.Object

var methodShapeCast2D [34]gdnative.Method
func (gdClass ShapeCast2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[0], enabled) }
func (gdClass ShapeCast2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[1]) }
func (gdClass ShapeCast2D) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[2], shape) }
func (gdClass ShapeCast2D) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodShapeCast2D[3]) }
func (gdClass ShapeCast2D) SetTargetPosition(local_point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[4], local_point) }
func (gdClass ShapeCast2D) GetTargetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[5]) }
func (gdClass ShapeCast2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[6], margin) }
func (gdClass ShapeCast2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[7]) }
func (gdClass ShapeCast2D) SetMaxResults(max_results int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[8], max_results) }
func (gdClass ShapeCast2D) GetMaxResults() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[9]) }
func (gdClass ShapeCast2D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[10]) }
func (gdClass ShapeCast2D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[11]) }
func (gdClass ShapeCast2D) ForceShapecastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[12]) }
func (gdClass ShapeCast2D) GetCollider(index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodShapeCast2D[13], index) }
func (gdClass ShapeCast2D) GetColliderShape(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[14], index) }
func (gdClass ShapeCast2D) GetCollisionPoint(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[15], index) }
func (gdClass ShapeCast2D) GetCollisionNormal(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[16], index) }
func (gdClass ShapeCast2D) GetClosestCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[17]) }
func (gdClass ShapeCast2D) GetClosestCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[18]) }
func (gdClass ShapeCast2D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[19], rid) }
func (gdClass ShapeCast2D) AddException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[20], node) }
func (gdClass ShapeCast2D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[21], rid) }
func (gdClass ShapeCast2D) RemoveException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[22], node) }
func (gdClass ShapeCast2D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[23]) }
func (gdClass ShapeCast2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[24], mask) }
func (gdClass ShapeCast2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[25]) }
func (gdClass ShapeCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[26], layer_number, value) }
func (gdClass ShapeCast2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[27], layer_number) }
func (gdClass ShapeCast2D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[28], mask) }
func (gdClass ShapeCast2D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[29]) }
func (gdClass ShapeCast2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[30], enable) }
func (gdClass ShapeCast2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[31]) }
func (gdClass ShapeCast2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[32], enable) }
func (gdClass ShapeCast2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[33]) }

type ShapeCast3D gdnative.Object

var methodShapeCast3D [37]gdnative.Method
func (gdClass ShapeCast3D) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[0], resource) }
func (gdClass ShapeCast3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[1], enabled) }
func (gdClass ShapeCast3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[2]) }
func (gdClass ShapeCast3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[3], shape) }
func (gdClass ShapeCast3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodShapeCast3D[4]) }
func (gdClass ShapeCast3D) SetTargetPosition(local_point Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[5], local_point) }
func (gdClass ShapeCast3D) GetTargetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[6]) }
func (gdClass ShapeCast3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[7], margin) }
func (gdClass ShapeCast3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[8]) }
func (gdClass ShapeCast3D) SetMaxResults(max_results int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[9], max_results) }
func (gdClass ShapeCast3D) GetMaxResults() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[10]) }
func (gdClass ShapeCast3D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[11]) }
func (gdClass ShapeCast3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[12]) }
func (gdClass ShapeCast3D) ForceShapecastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[13]) }
func (gdClass ShapeCast3D) GetCollider(index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodShapeCast3D[14], index) }
func (gdClass ShapeCast3D) GetColliderShape(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[15], index) }
func (gdClass ShapeCast3D) GetCollisionPoint(index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[16], index) }
func (gdClass ShapeCast3D) GetCollisionNormal(index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[17], index) }
func (gdClass ShapeCast3D) GetClosestCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[18]) }
func (gdClass ShapeCast3D) GetClosestCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[19]) }
func (gdClass ShapeCast3D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[20], rid) }
func (gdClass ShapeCast3D) AddException(node Object)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[21], node) }
func (gdClass ShapeCast3D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[22], rid) }
func (gdClass ShapeCast3D) RemoveException(node Object)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[23], node) }
func (gdClass ShapeCast3D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[24]) }
func (gdClass ShapeCast3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[25], mask) }
func (gdClass ShapeCast3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[26]) }
func (gdClass ShapeCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[27], layer_number, value) }
func (gdClass ShapeCast3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[28], layer_number) }
func (gdClass ShapeCast3D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[29], mask) }
func (gdClass ShapeCast3D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[30]) }
func (gdClass ShapeCast3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[31], enable) }
func (gdClass ShapeCast3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[32]) }
func (gdClass ShapeCast3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[33], enable) }
func (gdClass ShapeCast3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[34]) }
func (gdClass ShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[35], debug_shape_custom_color) }
func (gdClass ShapeCast3D) GetDebugShapeCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodShapeCast3D[36]) }

type Shortcut gdnative.Object

var methodShortcut [5]gdnative.Method
func (gdClass Shortcut) SetEvents(events Array)  { gdnative.Call(gdnative.Object(gdClass), methodShortcut[0], events) }
func (gdClass Shortcut) GetEvents() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShortcut[1]) }
func (gdClass Shortcut) HasValidEvent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShortcut[2]) }
func (gdClass Shortcut) MatchesEvent(event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShortcut[3], event) }
func (gdClass Shortcut) GetAsText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShortcut[4]) }

type Skeleton2D gdnative.Object

var methodSkeleton2D [8]gdnative.Method
func (gdClass Skeleton2D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton2D[0]) }
func (gdClass Skeleton2D) GetBone(idx int64) Bone2D { return gdnative.Return[Bone2D](gdnative.Object(gdClass), methodSkeleton2D[1], idx) }
func (gdClass Skeleton2D) GetSkeleton() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSkeleton2D[2]) }
func (gdClass Skeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[3], modification_stack) }
func (gdClass Skeleton2D) GetModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeleton2D[4]) }
func (gdClass Skeleton2D) ExecuteModifications(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[5], delta, execution_mode) }
func (gdClass Skeleton2D) SetBoneLocalPoseOverride(bone_idx int64, override_pose Transform2D, strength float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[6], bone_idx, override_pose, strength, persistent) }
func (gdClass Skeleton2D) GetBoneLocalPoseOverride(bone_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodSkeleton2D[7], bone_idx) }

type Skeleton3D gdnative.Object

var methodSkeleton3D [57]gdnative.Method
func (gdClass Skeleton3D) AddBone(name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[0], name) }
func (gdClass Skeleton3D) FindBone(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[1], name) }
func (gdClass Skeleton3D) GetBoneName(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeleton3D[2], bone_idx) }
func (gdClass Skeleton3D) SetBoneName(bone_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[3], bone_idx, name) }
func (gdClass Skeleton3D) GetBoneParent(bone_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[4], bone_idx) }
func (gdClass Skeleton3D) SetBoneParent(bone_idx int64, parent_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[5], bone_idx, parent_idx) }
func (gdClass Skeleton3D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[6]) }
func (gdClass Skeleton3D) UnparentBoneAndRest(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[7], bone_idx) }
func (gdClass Skeleton3D) GetBoneChildren(bone_idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSkeleton3D[8], bone_idx) }
func (gdClass Skeleton3D) SetBoneChildren(bone_idx int64, bone_children []int32)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[9], bone_idx, bone_children) }
func (gdClass Skeleton3D) AddBoneChild(bone_idx int64, child_bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[10], bone_idx, child_bone_idx) }
func (gdClass Skeleton3D) RemoveBoneChild(bone_idx int64, child_bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[11], bone_idx, child_bone_idx) }
func (gdClass Skeleton3D) GetParentlessBones() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSkeleton3D[12]) }
func (gdClass Skeleton3D) GetBoneRest(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[13], bone_idx) }
func (gdClass Skeleton3D) SetBoneRest(bone_idx int64, rest Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[14], bone_idx, rest) }
func (gdClass Skeleton3D) GetBoneGlobalRest(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[15], bone_idx) }
func (gdClass Skeleton3D) CreateSkinFromRestTransforms() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodSkeleton3D[16]) }
func (gdClass Skeleton3D) RegisterSkin(skin Skin) SkinReference { return gdnative.Return[SkinReference](gdnative.Object(gdClass), methodSkeleton3D[17], skin) }
func (gdClass Skeleton3D) LocalizeRests()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[18]) }
func (gdClass Skeleton3D) ClearBones()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[19]) }
func (gdClass Skeleton3D) GetBonePose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[20], bone_idx) }
func (gdClass Skeleton3D) SetBonePosePosition(bone_idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[21], bone_idx, position) }
func (gdClass Skeleton3D) SetBonePoseRotation(bone_idx int64, rotation Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[22], bone_idx, rotation) }
func (gdClass Skeleton3D) SetBonePoseScale(bone_idx int64, scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[23], bone_idx, scale) }
func (gdClass Skeleton3D) GetBonePosePosition(bone_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeleton3D[24], bone_idx) }
func (gdClass Skeleton3D) GetBonePoseRotation(bone_idx int64) Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodSkeleton3D[25], bone_idx) }
func (gdClass Skeleton3D) GetBonePoseScale(bone_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeleton3D[26], bone_idx) }
func (gdClass Skeleton3D) IsBoneEnabled(bone_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[27], bone_idx) }
func (gdClass Skeleton3D) SetBoneEnabled(bone_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[28], bone_idx, enabled) }
func (gdClass Skeleton3D) ClearBonesGlobalPoseOverride()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[29]) }
func (gdClass Skeleton3D) SetBoneGlobalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[30], bone_idx, pose, amount, persistent) }
func (gdClass Skeleton3D) GetBoneGlobalPoseOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[31], bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[32], bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPoseNoOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[33], bone_idx) }
func (gdClass Skeleton3D) ClearBonesLocalPoseOverride()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[34]) }
func (gdClass Skeleton3D) SetBoneLocalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[35], bone_idx, pose, amount, persistent) }
func (gdClass Skeleton3D) GetBoneLocalPoseOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[36], bone_idx) }
func (gdClass Skeleton3D) ForceUpdateAllBoneTransforms()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[37]) }
func (gdClass Skeleton3D) ForceUpdateBoneChildTransform(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[38], bone_idx) }
func (gdClass Skeleton3D) SetMotionScale(motion_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[39], motion_scale) }
func (gdClass Skeleton3D) GetMotionScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeleton3D[40]) }
func (gdClass Skeleton3D) GlobalPoseToWorldTransform(global_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[41], global_pose) }
func (gdClass Skeleton3D) WorldTransformToGlobalPose(world_transform Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[42], world_transform) }
func (gdClass Skeleton3D) GlobalPoseToLocalPose(bone_idx int64, global_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[43], bone_idx, global_pose) }
func (gdClass Skeleton3D) LocalPoseToGlobalPose(bone_idx int64, local_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[44], bone_idx, local_pose) }
func (gdClass Skeleton3D) GlobalPoseZForwardToBoneForward(bone_idx int64, basis Basis) Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodSkeleton3D[45], bone_idx, basis) }
func (gdClass Skeleton3D) SetShowRestOnly(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[46], enabled) }
func (gdClass Skeleton3D) IsShowRestOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[47]) }
func (gdClass Skeleton3D) SetAnimatePhysicalBones(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[48], enabled) }
func (gdClass Skeleton3D) GetAnimatePhysicalBones() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[49]) }
func (gdClass Skeleton3D) PhysicalBonesStopSimulation()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[50]) }
func (gdClass Skeleton3D) PhysicalBonesStartSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[51], bones) }
func (gdClass Skeleton3D) PhysicalBonesAddCollisionException(exception RID)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[52], exception) }
func (gdClass Skeleton3D) PhysicalBonesRemoveCollisionException(exception RID)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[53], exception) }
func (gdClass Skeleton3D) SetModificationStack(modification_stack SkeletonModificationStack3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[54], modification_stack) }
func (gdClass Skeleton3D) GetModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeleton3D[55]) }
func (gdClass Skeleton3D) ExecuteModifications(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[56], delta, execution_mode) }

type SkeletonIK3D gdnative.Object

var methodSkeletonIK3D [24]gdnative.Method
func (gdClass SkeletonIK3D) SetRootBone(root_bone string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[0], root_bone) }
func (gdClass SkeletonIK3D) GetRootBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonIK3D[1]) }
func (gdClass SkeletonIK3D) SetTipBone(tip_bone string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[2], tip_bone) }
func (gdClass SkeletonIK3D) GetTipBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonIK3D[3]) }
func (gdClass SkeletonIK3D) SetInterpolation(interpolation float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[4], interpolation) }
func (gdClass SkeletonIK3D) GetInterpolation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonIK3D[5]) }
func (gdClass SkeletonIK3D) SetTargetTransform(target Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[6], target) }
func (gdClass SkeletonIK3D) GetTargetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeletonIK3D[7]) }
func (gdClass SkeletonIK3D) SetTargetNode(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[8], node) }
func (gdClass SkeletonIK3D) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonIK3D[9]) }
func (gdClass SkeletonIK3D) SetOverrideTipBasis(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[10], override) }
func (gdClass SkeletonIK3D) IsOverrideTipBasis() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[11]) }
func (gdClass SkeletonIK3D) SetUseMagnet(use bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[12], use) }
func (gdClass SkeletonIK3D) IsUsingMagnet() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[13]) }
func (gdClass SkeletonIK3D) SetMagnetPosition(local_position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[14], local_position) }
func (gdClass SkeletonIK3D) GetMagnetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonIK3D[15]) }
func (gdClass SkeletonIK3D) GetParentSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodSkeletonIK3D[16]) }
func (gdClass SkeletonIK3D) IsRunning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[17]) }
func (gdClass SkeletonIK3D) SetMinDistance(min_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[18], min_distance) }
func (gdClass SkeletonIK3D) GetMinDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonIK3D[19]) }
func (gdClass SkeletonIK3D) SetMaxIterations(iterations int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[20], iterations) }
func (gdClass SkeletonIK3D) GetMaxIterations() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonIK3D[21]) }
func (gdClass SkeletonIK3D) Start(one_time bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[22], one_time) }
func (gdClass SkeletonIK3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[23]) }

type SkeletonModification2D gdnative.Object

var methodSkeletonModification2D [13]gdnative.Method
func (gdClass SkeletonModification2D) ExecuteImplementation(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[0], delta) }
func (gdClass SkeletonModification2D) SetupModificationImplementation(modification_stack SkeletonModificationStack2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[1], modification_stack) }
func (gdClass SkeletonModification2D) DrawEditorGizmoImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[2]) }
func (gdClass SkeletonModification2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[3], enabled) }
func (gdClass SkeletonModification2D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[4]) }
func (gdClass SkeletonModification2D) GetModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeletonModification2D[5]) }
func (gdClass SkeletonModification2D) SetIsSetup(is_setup bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[6], is_setup) }
func (gdClass SkeletonModification2D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[7]) }
func (gdClass SkeletonModification2D) SetExecutionMode(execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[8], execution_mode) }
func (gdClass SkeletonModification2D) GetExecutionMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2D[9]) }
func (gdClass SkeletonModification2D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2D[10], angle, min, max, invert) }
func (gdClass SkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[11], draw_gizmo) }
func (gdClass SkeletonModification2D) GetEditorDrawGizmo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[12]) }

type SkeletonModification2DCCDIK gdnative.Object

var methodSkeletonModification2DCCDIK [20]gdnative.Method
func (gdClass SkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[0], target_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[1]) }
func (gdClass SkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[2], tip_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[3]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[4], length) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[5]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[6], joint_idx, bone2d_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[7], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[8], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[9], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx int64, rotate_from_joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[10], joint_idx, rotate_from_joint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[11], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx int64, enable_constraint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[12], joint_idx, enable_constraint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[13], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, angle_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[14], joint_idx, angle_min) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[15], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, angle_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[16], joint_idx, angle_max) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[17], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx int64, invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[18], joint_idx, invert) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[19], joint_idx) }

type SkeletonModification2DFABRIK gdnative.Object

var methodSkeletonModification2DFABRIK [12]gdnative.Method
func (gdClass SkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[0], target_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[1]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[2], length) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[3]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[4], joint_idx, bone2d_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[5], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[6], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[7], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx int64, magnet_position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[8], joint_idx, magnet_position) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[9], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx int64, use_target_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[10], joint_idx, use_target_rotation) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[11], joint_idx) }

type SkeletonModification2DJiggle gdnative.Object

var methodSkeletonModification2DJiggle [34]gdnative.Method
func (gdClass SkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[0], target_nodepath) }
func (gdClass SkeletonModification2DJiggle) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[1]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[2], length) }
func (gdClass SkeletonModification2DJiggle) GetJiggleDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[3]) }
func (gdClass SkeletonModification2DJiggle) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[4], stiffness) }
func (gdClass SkeletonModification2DJiggle) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[5]) }
func (gdClass SkeletonModification2DJiggle) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[6], mass) }
func (gdClass SkeletonModification2DJiggle) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[7]) }
func (gdClass SkeletonModification2DJiggle) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[8], damping) }
func (gdClass SkeletonModification2DJiggle) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[9]) }
func (gdClass SkeletonModification2DJiggle) SetUseGravity(use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[10], use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetUseGravity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[11]) }
func (gdClass SkeletonModification2DJiggle) SetGravity(gravity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[12], gravity) }
func (gdClass SkeletonModification2DJiggle) GetGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[13]) }
func (gdClass SkeletonModification2DJiggle) SetUseColliders(use_colliders bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[14], use_colliders) }
func (gdClass SkeletonModification2DJiggle) GetUseColliders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[15]) }
func (gdClass SkeletonModification2DJiggle) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[16], collision_mask) }
func (gdClass SkeletonModification2DJiggle) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[17]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx int64, bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[18], joint_idx, bone2d_node) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[19], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[20], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[21], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[22], joint_idx, override) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[23], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[24], joint_idx, stiffness) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[25], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[26], joint_idx, mass) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[27], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[28], joint_idx, damping) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[29], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[30], joint_idx, use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[31], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[32], joint_idx, gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[33], joint_idx) }

type SkeletonModification2DLookAt gdnative.Object

var methodSkeletonModification2DLookAt [16]gdnative.Method
func (gdClass SkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[0], bone2d_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[1]) }
func (gdClass SkeletonModification2DLookAt) SetBoneIndex(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[2], bone_idx) }
func (gdClass SkeletonModification2DLookAt) GetBoneIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[3]) }
func (gdClass SkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[4], target_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[5]) }
func (gdClass SkeletonModification2DLookAt) SetAdditionalRotation(rotation float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[6], rotation) }
func (gdClass SkeletonModification2DLookAt) GetAdditionalRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[7]) }
func (gdClass SkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[8], enable_constraint) }
func (gdClass SkeletonModification2DLookAt) GetEnableConstraint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[9]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMin(angle_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[10], angle_min) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[11]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMax(angle_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[12], angle_max) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[13]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[14], invert) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[15]) }

type SkeletonModification2DPhysicalBones gdnative.Object

var methodSkeletonModification2DPhysicalBones [7]gdnative.Method
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[0], length) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[1]) }
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx int64, physicalbone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[2], joint_idx, physicalbone2d_node) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[3], joint_idx) }
func (gdClass SkeletonModification2DPhysicalBones) FetchPhysicalBones()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[4]) }
func (gdClass SkeletonModification2DPhysicalBones) StartSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[5], bones) }
func (gdClass SkeletonModification2DPhysicalBones) StopSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[6], bones) }

type SkeletonModification2DStackHolder gdnative.Object

var methodSkeletonModification2DStackHolder [2]gdnative.Method
func (gdClass SkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DStackHolder[0], held_modification_stack) }
func (gdClass SkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeletonModification2DStackHolder[1]) }

type SkeletonModification2DTwoBoneIK gdnative.Object

var methodSkeletonModification2DTwoBoneIK [16]gdnative.Method
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[0], target_nodepath) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[1]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[2], minimum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[3]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[4], maximum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[5]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[6], flip_direction) }
func (gdClass SkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[7]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[8], bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[9]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[10], bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[11]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[12], bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[13]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[14], bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[15]) }

type SkeletonModification3D gdnative.Object

var methodSkeletonModification3D [10]gdnative.Method
func (gdClass SkeletonModification3D) ExecuteImplementation(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[0], delta) }
func (gdClass SkeletonModification3D) SetupModificationImplementation(modification_stack SkeletonModificationStack3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[1], modification_stack) }
func (gdClass SkeletonModification3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[2], enabled) }
func (gdClass SkeletonModification3D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3D[3]) }
func (gdClass SkeletonModification3D) GetModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeletonModification3D[4]) }
func (gdClass SkeletonModification3D) SetIsSetup(is_setup bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[5], is_setup) }
func (gdClass SkeletonModification3D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3D[6]) }
func (gdClass SkeletonModification3D) SetExecutionMode(execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[7], execution_mode) }
func (gdClass SkeletonModification3D) GetExecutionMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3D[8]) }
func (gdClass SkeletonModification3D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3D[9], angle, min, max, invert) }

type SkeletonModification3DCCDIK gdnative.Object

var methodSkeletonModification3DCCDIK [22]gdnative.Method
func (gdClass SkeletonModification3DCCDIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[0], target_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[1]) }
func (gdClass SkeletonModification3DCCDIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[2], tip_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[3]) }
func (gdClass SkeletonModification3DCCDIK) SetUseHighQualitySolve(high_quality_solve bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[4], high_quality_solve) }
func (gdClass SkeletonModification3DCCDIK) GetUseHighQualitySolve() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[5]) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[6], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneName(joint_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[7], joint_idx, bone_name) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[8], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[9], joint_idx, bone_index) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointCcdikAxis(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[10], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointCcdikAxis(joint_idx int64, axis int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[11], joint_idx, axis) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointEnableJointConstraint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[12], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointEnableJointConstraint(joint_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[13], joint_idx, enable) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[14], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, min_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[15], joint_idx, min_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[16], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, max_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[17], joint_idx, max_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintInvert(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[18], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintInvert(joint_idx int64, invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[19], joint_idx, invert) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[20], length) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[21]) }

type SkeletonModification3DFABRIK gdnative.Object

var methodSkeletonModification3DFABRIK [25]gdnative.Method
func (gdClass SkeletonModification3DFABRIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[0], target_nodepath) }
func (gdClass SkeletonModification3DFABRIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[1]) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[2], length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[3]) }
func (gdClass SkeletonModification3DFABRIK) SetChainTolerance(tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[4], tolerance) }
func (gdClass SkeletonModification3DFABRIK) GetChainTolerance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[5]) }
func (gdClass SkeletonModification3DFABRIK) SetChainMaxIterations(max_iterations int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[6], max_iterations) }
func (gdClass SkeletonModification3DFABRIK) GetChainMaxIterations() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[7]) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[8], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneName(joint_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[9], joint_idx, bone_name) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[10], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[11], joint_idx, bone_index) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointLength(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[12], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointLength(joint_idx int64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[13], joint_idx, length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointMagnet(joint_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[14], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointMagnet(joint_idx int64, magnet_position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[15], joint_idx, magnet_position) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointAutoCalculateLength(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[16], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointAutoCalculateLength(joint_idx int64, auto_calculate_length bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[17], joint_idx, auto_calculate_length) }
func (gdClass SkeletonModification3DFABRIK) FabrikJointAutoCalculateLength(joint_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[18], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTipNode(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[19], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTipNode(joint_idx int64, use_tip_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[20], joint_idx, use_tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointTipNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[21], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointTipNode(joint_idx int64, tip_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[22], joint_idx, tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTargetBasis(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[23], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTargetBasis(joint_idx int64, use_target_basis bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[24], joint_idx, use_target_basis) }

type SkeletonModification3DJiggle gdnative.Object

var methodSkeletonModification3DJiggle [36]gdnative.Method
func (gdClass SkeletonModification3DJiggle) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[0], target_nodepath) }
func (gdClass SkeletonModification3DJiggle) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[1]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[2], length) }
func (gdClass SkeletonModification3DJiggle) GetJiggleDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[3]) }
func (gdClass SkeletonModification3DJiggle) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[4], stiffness) }
func (gdClass SkeletonModification3DJiggle) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[5]) }
func (gdClass SkeletonModification3DJiggle) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[6], mass) }
func (gdClass SkeletonModification3DJiggle) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[7]) }
func (gdClass SkeletonModification3DJiggle) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[8], damping) }
func (gdClass SkeletonModification3DJiggle) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[9]) }
func (gdClass SkeletonModification3DJiggle) SetUseGravity(use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[10], use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetUseGravity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[11]) }
func (gdClass SkeletonModification3DJiggle) SetGravity(gravity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[12], gravity) }
func (gdClass SkeletonModification3DJiggle) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[13]) }
func (gdClass SkeletonModification3DJiggle) SetUseColliders(use_colliders bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[14], use_colliders) }
func (gdClass SkeletonModification3DJiggle) GetUseColliders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[15]) }
func (gdClass SkeletonModification3DJiggle) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[16], mask) }
func (gdClass SkeletonModification3DJiggle) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[17]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneName(joint_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[18], joint_idx, name) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[19], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[20], joint_idx, bone_idx) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[21], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[22], joint_idx, override) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[23], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[24], joint_idx, stiffness) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[25], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[26], joint_idx, mass) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[27], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[28], joint_idx, damping) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[29], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[30], joint_idx, use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[31], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[32], joint_idx, gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointGravity(joint_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[33], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointRoll(joint_idx int64, roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[34], joint_idx, roll) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointRoll(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[35], joint_idx) }

type SkeletonModification3DLookAt gdnative.Object

var methodSkeletonModification3DLookAt [12]gdnative.Method
func (gdClass SkeletonModification3DLookAt) SetBoneName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[0], name) }
func (gdClass SkeletonModification3DLookAt) GetBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[1]) }
func (gdClass SkeletonModification3DLookAt) SetBoneIndex(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[2], bone_idx) }
func (gdClass SkeletonModification3DLookAt) GetBoneIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[3]) }
func (gdClass SkeletonModification3DLookAt) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[4], target_nodepath) }
func (gdClass SkeletonModification3DLookAt) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[5]) }
func (gdClass SkeletonModification3DLookAt) SetAdditionalRotation(additional_rotation Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[6], additional_rotation) }
func (gdClass SkeletonModification3DLookAt) GetAdditionalRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[7]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationToPlane(lock_to_plane bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[8], lock_to_plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationToPlane() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[9]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationPlane(plane int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[10], plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationPlane() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[11]) }

type SkeletonModification3DStackHolder gdnative.Object

var methodSkeletonModification3DStackHolder [2]gdnative.Method
func (gdClass SkeletonModification3DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DStackHolder[0], held_modification_stack) }
func (gdClass SkeletonModification3DStackHolder) GetHeldModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeletonModification3DStackHolder[1]) }

type SkeletonModification3DTwoBoneIK gdnative.Object

var methodSkeletonModification3DTwoBoneIK [28]gdnative.Method
func (gdClass SkeletonModification3DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[0], target_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[1]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUsePoleNode(use_pole_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[2], use_pole_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUsePoleNode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[3]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetPoleNode(pole_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[4], pole_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetPoleNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[5]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUseTipNode(use_tip_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[6], use_tip_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUseTipNode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[7]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[8], tip_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[9]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetAutoCalculateJointLength(auto_calculate_joint_length bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[10], auto_calculate_joint_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetAutoCalculateJointLength() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[11]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[12], bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[13]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[14], bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[15]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneLength(bone_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[16], bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[17]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[18], bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[19]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[20], bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[21]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoLength(bone_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[22], bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[23]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneRoll(roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[24], roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneRoll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[25]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoRoll(roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[26], roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoRoll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[27]) }

type SkeletonModificationStack2D gdnative.Object

var methodSkeletonModificationStack2D [15]gdnative.Method
func (gdClass SkeletonModificationStack2D) Setup()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[0]) }
func (gdClass SkeletonModificationStack2D) Execute(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[1], delta, execution_mode) }
func (gdClass SkeletonModificationStack2D) EnableAllModifications(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[2], enabled) }
func (gdClass SkeletonModificationStack2D) GetModification(mod_idx int64) SkeletonModification2D { return gdnative.Return[SkeletonModification2D](gdnative.Object(gdClass), methodSkeletonModificationStack2D[3], mod_idx) }
func (gdClass SkeletonModificationStack2D) AddModification(modification SkeletonModification2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[4], modification) }
func (gdClass SkeletonModificationStack2D) DeleteModification(mod_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[5], mod_idx) }
func (gdClass SkeletonModificationStack2D) SetModification(mod_idx int64, modification SkeletonModification2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[6], mod_idx, modification) }
func (gdClass SkeletonModificationStack2D) SetModificationCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[7], count) }
func (gdClass SkeletonModificationStack2D) GetModificationCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModificationStack2D[8]) }
func (gdClass SkeletonModificationStack2D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack2D[9]) }
func (gdClass SkeletonModificationStack2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[10], enabled) }
func (gdClass SkeletonModificationStack2D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack2D[11]) }
func (gdClass SkeletonModificationStack2D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[12], strength) }
func (gdClass SkeletonModificationStack2D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModificationStack2D[13]) }
func (gdClass SkeletonModificationStack2D) GetSkeleton() Skeleton2D { return gdnative.Return[Skeleton2D](gdnative.Object(gdClass), methodSkeletonModificationStack2D[14]) }

type SkeletonModificationStack3D gdnative.Object

var methodSkeletonModificationStack3D [15]gdnative.Method
func (gdClass SkeletonModificationStack3D) Setup()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[0]) }
func (gdClass SkeletonModificationStack3D) Execute(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[1], delta, execution_mode) }
func (gdClass SkeletonModificationStack3D) EnableAllModifications(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[2], enabled) }
func (gdClass SkeletonModificationStack3D) GetModification(mod_idx int64) SkeletonModification3D { return gdnative.Return[SkeletonModification3D](gdnative.Object(gdClass), methodSkeletonModificationStack3D[3], mod_idx) }
func (gdClass SkeletonModificationStack3D) AddModification(modification SkeletonModification3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[4], modification) }
func (gdClass SkeletonModificationStack3D) DeleteModification(mod_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[5], mod_idx) }
func (gdClass SkeletonModificationStack3D) SetModification(mod_idx int64, modification SkeletonModification3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[6], mod_idx, modification) }
func (gdClass SkeletonModificationStack3D) SetModificationCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[7], count) }
func (gdClass SkeletonModificationStack3D) GetModificationCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModificationStack3D[8]) }
func (gdClass SkeletonModificationStack3D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack3D[9]) }
func (gdClass SkeletonModificationStack3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[10], enabled) }
func (gdClass SkeletonModificationStack3D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack3D[11]) }
func (gdClass SkeletonModificationStack3D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[12], strength) }
func (gdClass SkeletonModificationStack3D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModificationStack3D[13]) }
func (gdClass SkeletonModificationStack3D) GetSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodSkeletonModificationStack3D[14]) }

type SkeletonProfile gdnative.Object

var methodSkeletonProfile [27]gdnative.Method

type SkeletonProfileTailDirection int64

const (
	SkeletonProfileTailDirectionAverageChildren SkeletonProfileTailDirection = 0
	SkeletonProfileTailDirectionSpecificChild SkeletonProfileTailDirection = 1
	SkeletonProfileTailDirectionEnd SkeletonProfileTailDirection = 2
)
func (gdClass SkeletonProfile) SetRootBone(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[0], bone_name) }
func (gdClass SkeletonProfile) GetRootBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[1]) }
func (gdClass SkeletonProfile) SetScaleBaseBone(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[2], bone_name) }
func (gdClass SkeletonProfile) GetScaleBaseBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[3]) }
func (gdClass SkeletonProfile) SetGroupSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[4], size) }
func (gdClass SkeletonProfile) GetGroupSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[5]) }
func (gdClass SkeletonProfile) GetGroupName(group_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[6], group_idx) }
func (gdClass SkeletonProfile) SetGroupName(group_idx int64, group_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[7], group_idx, group_name) }
func (gdClass SkeletonProfile) GetTexture(group_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSkeletonProfile[8], group_idx) }
func (gdClass SkeletonProfile) SetTexture(group_idx int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[9], group_idx, texture) }
func (gdClass SkeletonProfile) SetBoneSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[10], size) }
func (gdClass SkeletonProfile) GetBoneSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[11]) }
func (gdClass SkeletonProfile) FindBone(bone_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[12], bone_name) }
func (gdClass SkeletonProfile) GetBoneName(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[13], bone_idx) }
func (gdClass SkeletonProfile) SetBoneName(bone_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[14], bone_idx, bone_name) }
func (gdClass SkeletonProfile) GetBoneParent(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[15], bone_idx) }
func (gdClass SkeletonProfile) SetBoneParent(bone_idx int64, bone_parent string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[16], bone_idx, bone_parent) }
func (gdClass SkeletonProfile) GetTailDirection(bone_idx int64) SkeletonProfileTailDirection { return gdnative.Return[SkeletonProfileTailDirection](gdnative.Object(gdClass), methodSkeletonProfile[17], bone_idx) }
func (gdClass SkeletonProfile) SetTailDirection(bone_idx int64, tail_direction SkeletonProfileTailDirection)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[18], bone_idx, tail_direction) }
func (gdClass SkeletonProfile) GetBoneTail(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[19], bone_idx) }
func (gdClass SkeletonProfile) SetBoneTail(bone_idx int64, bone_tail string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[20], bone_idx, bone_tail) }
func (gdClass SkeletonProfile) GetReferencePose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeletonProfile[21], bone_idx) }
func (gdClass SkeletonProfile) SetReferencePose(bone_idx int64, bone_name Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[22], bone_idx, bone_name) }
func (gdClass SkeletonProfile) GetHandleOffset(bone_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonProfile[23], bone_idx) }
func (gdClass SkeletonProfile) SetHandleOffset(bone_idx int64, handle_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[24], bone_idx, handle_offset) }
func (gdClass SkeletonProfile) GetGroup(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[25], bone_idx) }
func (gdClass SkeletonProfile) SetGroup(bone_idx int64, group string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[26], bone_idx, group) }

type SkeletonProfileHumanoid gdnative.Object

var methodSkeletonProfileHumanoid [0]gdnative.Method

type Skin gdnative.Object

var methodSkin [11]gdnative.Method
func (gdClass Skin) SetBindCount(bind_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[0], bind_count) }
func (gdClass Skin) GetBindCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkin[1]) }
func (gdClass Skin) AddBind(bone int64, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[2], bone, pose) }
func (gdClass Skin) AddNamedBind(name string, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[3], name, pose) }
func (gdClass Skin) SetBindPose(bind_index int64, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[4], bind_index, pose) }
func (gdClass Skin) GetBindPose(bind_index int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkin[5], bind_index) }
func (gdClass Skin) SetBindName(bind_index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[6], bind_index, name) }
func (gdClass Skin) GetBindName(bind_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkin[7], bind_index) }
func (gdClass Skin) SetBindBone(bind_index int64, bone int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[8], bind_index, bone) }
func (gdClass Skin) GetBindBone(bind_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkin[9], bind_index) }
func (gdClass Skin) ClearBinds()  { gdnative.Call(gdnative.Object(gdClass), methodSkin[10]) }

type SkinReference gdnative.Object

var methodSkinReference [2]gdnative.Method
func (gdClass SkinReference) GetSkeleton() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSkinReference[0]) }
func (gdClass SkinReference) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodSkinReference[1]) }

type Sky gdnative.Object

var methodSky [6]gdnative.Method

type SkyRadianceSize int64

const (
	SkyRadianceSize32 SkyRadianceSize = 0
	SkyRadianceSize64 SkyRadianceSize = 1
	SkyRadianceSize128 SkyRadianceSize = 2
	SkyRadianceSize256 SkyRadianceSize = 3
	SkyRadianceSize512 SkyRadianceSize = 4
	SkyRadianceSize1024 SkyRadianceSize = 5
	SkyRadianceSize2048 SkyRadianceSize = 6
	SkyRadianceSizeMax SkyRadianceSize = 7
)

type SkyProcessMode int64

const (
	SkyProcessModeAutomatic SkyProcessMode = 0
	SkyProcessModeQuality SkyProcessMode = 1
	SkyProcessModeIncremental SkyProcessMode = 2
	SkyProcessModeRealtime SkyProcessMode = 3
)
func (gdClass Sky) SetRadianceSize(size SkyRadianceSize)  { gdnative.Call(gdnative.Object(gdClass), methodSky[0], size) }
func (gdClass Sky) GetRadianceSize() SkyRadianceSize { return gdnative.Return[SkyRadianceSize](gdnative.Object(gdClass), methodSky[1]) }
func (gdClass Sky) SetProcessMode(mode SkyProcessMode)  { gdnative.Call(gdnative.Object(gdClass), methodSky[2], mode) }
func (gdClass Sky) GetProcessMode() SkyProcessMode { return gdnative.Return[SkyProcessMode](gdnative.Object(gdClass), methodSky[3]) }
func (gdClass Sky) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodSky[4], material) }
func (gdClass Sky) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodSky[5]) }

type Slider gdnative.Object

var methodSlider [8]gdnative.Method
func (gdClass Slider) SetTicks(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[0], count) }
func (gdClass Slider) GetTicks() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSlider[1]) }
func (gdClass Slider) GetTicksOnBorders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[2]) }
func (gdClass Slider) SetTicksOnBorders(ticks_on_border bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[3], ticks_on_border) }
func (gdClass Slider) SetEditable(editable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[4], editable) }
func (gdClass Slider) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[5]) }
func (gdClass Slider) SetScrollable(scrollable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[6], scrollable) }
func (gdClass Slider) IsScrollable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[7]) }

type SliderJoint3D gdnative.Object

var methodSliderJoint3D [2]gdnative.Method

type SliderJoint3DParam int64

const (
	SliderJoint3DParamLinearLimitUpper SliderJoint3DParam = 0
	SliderJoint3DParamLinearLimitLower SliderJoint3DParam = 1
	SliderJoint3DParamLinearLimitSoftness SliderJoint3DParam = 2
	SliderJoint3DParamLinearLimitRestitution SliderJoint3DParam = 3
	SliderJoint3DParamLinearLimitDamping SliderJoint3DParam = 4
	SliderJoint3DParamLinearMotionSoftness SliderJoint3DParam = 5
	SliderJoint3DParamLinearMotionRestitution SliderJoint3DParam = 6
	SliderJoint3DParamLinearMotionDamping SliderJoint3DParam = 7
	SliderJoint3DParamLinearOrthogonalSoftness SliderJoint3DParam = 8
	SliderJoint3DParamLinearOrthogonalRestitution SliderJoint3DParam = 9
	SliderJoint3DParamLinearOrthogonalDamping SliderJoint3DParam = 10
	SliderJoint3DParamAngularLimitUpper SliderJoint3DParam = 11
	SliderJoint3DParamAngularLimitLower SliderJoint3DParam = 12
	SliderJoint3DParamAngularLimitSoftness SliderJoint3DParam = 13
	SliderJoint3DParamAngularLimitRestitution SliderJoint3DParam = 14
	SliderJoint3DParamAngularLimitDamping SliderJoint3DParam = 15
	SliderJoint3DParamAngularMotionSoftness SliderJoint3DParam = 16
	SliderJoint3DParamAngularMotionRestitution SliderJoint3DParam = 17
	SliderJoint3DParamAngularMotionDamping SliderJoint3DParam = 18
	SliderJoint3DParamAngularOrthogonalSoftness SliderJoint3DParam = 19
	SliderJoint3DParamAngularOrthogonalRestitution SliderJoint3DParam = 20
	SliderJoint3DParamAngularOrthogonalDamping SliderJoint3DParam = 21
	SliderJoint3DParamMax SliderJoint3DParam = 22
)
func (gdClass SliderJoint3D) SetParam(param SliderJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodSliderJoint3D[0], param, value) }
func (gdClass SliderJoint3D) GetParam(param SliderJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSliderJoint3D[1], param) }

type SoftDynamicBody3D gdnative.Object

var methodSoftDynamicBody3D [33]gdnative.Method

type SoftDynamicBody3DDisableMode int64

const (
	SoftDynamicBody3DDisableModeRemove SoftDynamicBody3DDisableMode = 0
	SoftDynamicBody3DDisableModeKeepActive SoftDynamicBody3DDisableMode = 1
)
func (gdClass SoftDynamicBody3D) GetPhysicsRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSoftDynamicBody3D[0]) }
func (gdClass SoftDynamicBody3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[1], collision_mask) }
func (gdClass SoftDynamicBody3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[2]) }
func (gdClass SoftDynamicBody3D) SetCollisionLayer(collision_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[3], collision_layer) }
func (gdClass SoftDynamicBody3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[4]) }
func (gdClass SoftDynamicBody3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[5], layer_number, value) }
func (gdClass SoftDynamicBody3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[6], layer_number) }
func (gdClass SoftDynamicBody3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[7], layer_number, value) }
func (gdClass SoftDynamicBody3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[8], layer_number) }
func (gdClass SoftDynamicBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[9], parent_collision_ignore) }
func (gdClass SoftDynamicBody3D) GetParentCollisionIgnore() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSoftDynamicBody3D[10]) }
func (gdClass SoftDynamicBody3D) SetDisableMode(mode SoftDynamicBody3DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[11], mode) }
func (gdClass SoftDynamicBody3D) GetDisableMode() SoftDynamicBody3DDisableMode { return gdnative.Return[SoftDynamicBody3DDisableMode](gdnative.Object(gdClass), methodSoftDynamicBody3D[12]) }
func (gdClass SoftDynamicBody3D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSoftDynamicBody3D[13]) }
func (gdClass SoftDynamicBody3D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[14], body) }
func (gdClass SoftDynamicBody3D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[15], body) }
func (gdClass SoftDynamicBody3D) SetSimulationPrecision(simulation_precision int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[16], simulation_precision) }
func (gdClass SoftDynamicBody3D) GetSimulationPrecision() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[17]) }
func (gdClass SoftDynamicBody3D) SetTotalMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[18], mass) }
func (gdClass SoftDynamicBody3D) GetTotalMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[19]) }
func (gdClass SoftDynamicBody3D) SetLinearStiffness(linear_stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[20], linear_stiffness) }
func (gdClass SoftDynamicBody3D) GetLinearStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[21]) }
func (gdClass SoftDynamicBody3D) SetPressureCoefficient(pressure_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[22], pressure_coefficient) }
func (gdClass SoftDynamicBody3D) GetPressureCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[23]) }
func (gdClass SoftDynamicBody3D) SetDampingCoefficient(damping_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[24], damping_coefficient) }
func (gdClass SoftDynamicBody3D) GetDampingCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[25]) }
func (gdClass SoftDynamicBody3D) SetDragCoefficient(drag_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[26], drag_coefficient) }
func (gdClass SoftDynamicBody3D) GetDragCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[27]) }
func (gdClass SoftDynamicBody3D) GetPointTransform(point_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSoftDynamicBody3D[28], point_index) }
func (gdClass SoftDynamicBody3D) SetPointPinned(point_index int64, pinned bool, attachment_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[29], point_index, pinned, attachment_path) }
func (gdClass SoftDynamicBody3D) IsPointPinned(point_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[30], point_index) }
func (gdClass SoftDynamicBody3D) SetRayPickable(ray_pickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[31], ray_pickable) }
func (gdClass SoftDynamicBody3D) IsRayPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[32]) }

type SphereMesh gdnative.Object

var methodSphereMesh [10]gdnative.Method
func (gdClass SphereMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[0], radius) }
func (gdClass SphereMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereMesh[1]) }
func (gdClass SphereMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[2], height) }
func (gdClass SphereMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereMesh[3]) }
func (gdClass SphereMesh) SetRadialSegments(radial_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[4], radial_segments) }
func (gdClass SphereMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSphereMesh[5]) }
func (gdClass SphereMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[6], rings) }
func (gdClass SphereMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSphereMesh[7]) }
func (gdClass SphereMesh) SetIsHemisphere(is_hemisphere bool)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[8], is_hemisphere) }
func (gdClass SphereMesh) GetIsHemisphere() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSphereMesh[9]) }

type SphereOccluder3D gdnative.Object

var methodSphereOccluder3D [2]gdnative.Method
func (gdClass SphereOccluder3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereOccluder3D[0], radius) }
func (gdClass SphereOccluder3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereOccluder3D[1]) }

type SphereShape3D gdnative.Object

var methodSphereShape3D [2]gdnative.Method
func (gdClass SphereShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereShape3D[0], radius) }
func (gdClass SphereShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereShape3D[1]) }

type SpinBox gdnative.Object

var methodSpinBox [14]gdnative.Method
func (gdClass SpinBox) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[0], alignment) }
func (gdClass SpinBox) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodSpinBox[1]) }
func (gdClass SpinBox) SetSuffix(suffix string)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[2], suffix) }
func (gdClass SpinBox) GetSuffix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSpinBox[3]) }
func (gdClass SpinBox) SetPrefix(prefix string)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[4], prefix) }
func (gdClass SpinBox) GetPrefix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSpinBox[5]) }
func (gdClass SpinBox) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[6], enabled) }
func (gdClass SpinBox) SetCustomArrowStep(arrow_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[7], arrow_step) }
func (gdClass SpinBox) GetCustomArrowStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpinBox[8]) }
func (gdClass SpinBox) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpinBox[9]) }
func (gdClass SpinBox) SetUpdateOnTextChanged(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[10], enabled) }
func (gdClass SpinBox) GetUpdateOnTextChanged() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpinBox[11]) }
func (gdClass SpinBox) Apply()  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[12]) }
func (gdClass SpinBox) GetLineEdit() LineEdit { return gdnative.Return[LineEdit](gdnative.Object(gdClass), methodSpinBox[13]) }

type SplitContainer gdnative.Object

var methodSplitContainer [7]gdnative.Method

type SplitContainerDraggerVisibility int64

const (
	SplitContainerDraggerVisible SplitContainerDraggerVisibility = 0
	SplitContainerDraggerHidden SplitContainerDraggerVisibility = 1
	SplitContainerDraggerHiddenCollapsed SplitContainerDraggerVisibility = 2
)
func (gdClass SplitContainer) SetSplitOffset(offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[0], offset) }
func (gdClass SplitContainer) GetSplitOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSplitContainer[1]) }
func (gdClass SplitContainer) ClampSplitOffset()  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[2]) }
func (gdClass SplitContainer) SetCollapsed(collapsed bool)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[3], collapsed) }
func (gdClass SplitContainer) IsCollapsed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSplitContainer[4]) }
func (gdClass SplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[5], mode) }
func (gdClass SplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility { return gdnative.Return[SplitContainerDraggerVisibility](gdnative.Object(gdClass), methodSplitContainer[6]) }

type SpotLight3D gdnative.Object

var methodSpotLight3D [0]gdnative.Method

type SpringArm3D gdnative.Object

var methodSpringArm3D [12]gdnative.Method
func (gdClass SpringArm3D) GetHitLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[0]) }
func (gdClass SpringArm3D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[1], length) }
func (gdClass SpringArm3D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[2]) }
func (gdClass SpringArm3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[3], shape) }
func (gdClass SpringArm3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodSpringArm3D[4]) }
func (gdClass SpringArm3D) AddExcludedObject(RID RID)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[5], RID) }
func (gdClass SpringArm3D) RemoveExcludedObject(RID RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpringArm3D[6], RID) }
func (gdClass SpringArm3D) ClearExcludedObjects()  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[7]) }
func (gdClass SpringArm3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[8], mask) }
func (gdClass SpringArm3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpringArm3D[9]) }
func (gdClass SpringArm3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[10], margin) }
func (gdClass SpringArm3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[11]) }

type Sprite2D gdnative.Object

var methodSprite2D [26]gdnative.Method
func (gdClass Sprite2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[0], texture) }
func (gdClass Sprite2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSprite2D[1]) }
func (gdClass Sprite2D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[2], centered) }
func (gdClass Sprite2D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[3]) }
func (gdClass Sprite2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[4], offset) }
func (gdClass Sprite2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSprite2D[5]) }
func (gdClass Sprite2D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[6], flip_h) }
func (gdClass Sprite2D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[7]) }
func (gdClass Sprite2D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[8], flip_v) }
func (gdClass Sprite2D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[9]) }
func (gdClass Sprite2D) SetRegionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[10], enabled) }
func (gdClass Sprite2D) IsRegionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[11]) }
func (gdClass Sprite2D) IsPixelOpaque(pos Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[12], pos) }
func (gdClass Sprite2D) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[13], rect) }
func (gdClass Sprite2D) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite2D[14]) }
func (gdClass Sprite2D) SetRegionFilterClipEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[15], enabled) }
func (gdClass Sprite2D) IsRegionFilterClipEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[16]) }
func (gdClass Sprite2D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[17], frame) }
func (gdClass Sprite2D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[18]) }
func (gdClass Sprite2D) SetFrameCoords(coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[19], coords) }
func (gdClass Sprite2D) GetFrameCoords() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSprite2D[20]) }
func (gdClass Sprite2D) SetVframes(vframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[21], vframes) }
func (gdClass Sprite2D) GetVframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[22]) }
func (gdClass Sprite2D) SetHframes(hframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[23], hframes) }
func (gdClass Sprite2D) GetHframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[24]) }
func (gdClass Sprite2D) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite2D[25]) }

type Sprite3D gdnative.Object

var methodSprite3D [14]gdnative.Method
func (gdClass Sprite3D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[0], texture) }
func (gdClass Sprite3D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSprite3D[1]) }
func (gdClass Sprite3D) SetRegionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[2], enabled) }
func (gdClass Sprite3D) IsRegionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite3D[3]) }
func (gdClass Sprite3D) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[4], rect) }
func (gdClass Sprite3D) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite3D[5]) }
func (gdClass Sprite3D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[6], frame) }
func (gdClass Sprite3D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[7]) }
func (gdClass Sprite3D) SetFrameCoords(coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[8], coords) }
func (gdClass Sprite3D) GetFrameCoords() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSprite3D[9]) }
func (gdClass Sprite3D) SetVframes(vframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[10], vframes) }
func (gdClass Sprite3D) GetVframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[11]) }
func (gdClass Sprite3D) SetHframes(hframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[12], hframes) }
func (gdClass Sprite3D) GetHframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[13]) }

type SpriteBase3D gdnative.Object

var methodSpriteBase3D [26]gdnative.Method

type SpriteBase3DDrawFlags int64

const (
	SpriteBase3DFlagTransparent SpriteBase3DDrawFlags = 0
	SpriteBase3DFlagShaded SpriteBase3DDrawFlags = 1
	SpriteBase3DFlagDoubleSided SpriteBase3DDrawFlags = 2
	SpriteBase3DFlagDisableDepthTest SpriteBase3DDrawFlags = 3
	SpriteBase3DFlagFixedSize SpriteBase3DDrawFlags = 4
	SpriteBase3DFlagMax SpriteBase3DDrawFlags = 5
)

type SpriteBase3DAlphaCutMode int64

const (
	SpriteBase3DAlphaCutDisabled SpriteBase3DAlphaCutMode = 0
	SpriteBase3DAlphaCutDiscard SpriteBase3DAlphaCutMode = 1
	SpriteBase3DAlphaCutOpaquePrepass SpriteBase3DAlphaCutMode = 2
)
func (gdClass SpriteBase3D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[0], centered) }
func (gdClass SpriteBase3D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[1]) }
func (gdClass SpriteBase3D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[2], offset) }
func (gdClass SpriteBase3D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSpriteBase3D[3]) }
func (gdClass SpriteBase3D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[4], flip_h) }
func (gdClass SpriteBase3D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[5]) }
func (gdClass SpriteBase3D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[6], flip_v) }
func (gdClass SpriteBase3D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[7]) }
func (gdClass SpriteBase3D) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[8], modulate) }
func (gdClass SpriteBase3D) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodSpriteBase3D[9]) }
func (gdClass SpriteBase3D) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[10], priority) }
func (gdClass SpriteBase3D) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpriteBase3D[11]) }
func (gdClass SpriteBase3D) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[12], pixel_size) }
func (gdClass SpriteBase3D) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpriteBase3D[13]) }
func (gdClass SpriteBase3D) SetAxis(axis Vector3Axis)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[14], axis) }
func (gdClass SpriteBase3D) GetAxis() Vector3Axis { return gdnative.Return[Vector3Axis](gdnative.Object(gdClass), methodSpriteBase3D[15]) }
func (gdClass SpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[16], flag, enabled) }
func (gdClass SpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[17], flag) }
func (gdClass SpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[18], mode) }
func (gdClass SpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode { return gdnative.Return[SpriteBase3DAlphaCutMode](gdnative.Object(gdClass), methodSpriteBase3D[19]) }
func (gdClass SpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[20], mode) }
func (gdClass SpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodSpriteBase3D[21]) }
func (gdClass SpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[22], mode) }
func (gdClass SpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodSpriteBase3D[23]) }
func (gdClass SpriteBase3D) GetItemRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSpriteBase3D[24]) }
func (gdClass SpriteBase3D) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodSpriteBase3D[25]) }

type SpriteFrames gdnative.Object

var methodSpriteFrames [16]gdnative.Method
func (gdClass SpriteFrames) AddAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[0], anim) }
func (gdClass SpriteFrames) HasAnimation(anim string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteFrames[1], anim) }
func (gdClass SpriteFrames) RemoveAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[2], anim) }
func (gdClass SpriteFrames) RenameAnimation(anim string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[3], anim, newname) }
func (gdClass SpriteFrames) GetAnimationNames() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSpriteFrames[4]) }
func (gdClass SpriteFrames) SetAnimationSpeed(anim string, speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[5], anim, speed) }
func (gdClass SpriteFrames) GetAnimationSpeed(anim string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpriteFrames[6], anim) }
func (gdClass SpriteFrames) SetAnimationLoop(anim string, loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[7], anim, loop) }
func (gdClass SpriteFrames) GetAnimationLoop(anim string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteFrames[8], anim) }
func (gdClass SpriteFrames) AddFrame(anim string, frame Texture2D, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[9], anim, frame, at_position) }
func (gdClass SpriteFrames) GetFrameCount(anim string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpriteFrames[10], anim) }
func (gdClass SpriteFrames) GetFrame(anim string, idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSpriteFrames[11], anim, idx) }
func (gdClass SpriteFrames) SetFrame(anim string, idx int64, txt Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[12], anim, idx, txt) }
func (gdClass SpriteFrames) RemoveFrame(anim string, idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[13], anim, idx) }
func (gdClass SpriteFrames) Clear(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[14], anim) }
func (gdClass SpriteFrames) ClearAll()  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[15]) }

type StandardMaterial3D gdnative.Object

var methodStandardMaterial3D [0]gdnative.Method

type StaticBody2D gdnative.Object

var methodStaticBody2D [6]gdnative.Method
func (gdClass StaticBody2D) SetConstantLinearVelocity(vel Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[0], vel) }
func (gdClass StaticBody2D) SetConstantAngularVelocity(vel float64)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[1], vel) }
func (gdClass StaticBody2D) GetConstantLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStaticBody2D[2]) }
func (gdClass StaticBody2D) GetConstantAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStaticBody2D[3]) }
func (gdClass StaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[4], physics_material_override) }
func (gdClass StaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodStaticBody2D[5]) }

type StaticBody3D gdnative.Object

var methodStaticBody3D [6]gdnative.Method
func (gdClass StaticBody3D) SetConstantLinearVelocity(vel Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[0], vel) }
func (gdClass StaticBody3D) SetConstantAngularVelocity(vel Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[1], vel) }
func (gdClass StaticBody3D) GetConstantLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodStaticBody3D[2]) }
func (gdClass StaticBody3D) GetConstantAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodStaticBody3D[3]) }
func (gdClass StaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[4], physics_material_override) }
func (gdClass StaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodStaticBody3D[5]) }

type StreamPeer gdnative.Object

var methodStreamPeer [33]gdnative.Method
func (gdClass StreamPeer) PutData(data []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeer[0], data) }
func (gdClass StreamPeer) PutPartialData(data []byte) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[1], data) }
func (gdClass StreamPeer) GetData(bytes int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[2], bytes) }
func (gdClass StreamPeer) GetPartialData(bytes int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[3], bytes) }
func (gdClass StreamPeer) GetAvailableBytes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[4]) }
func (gdClass StreamPeer) SetBigEndian(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[5], enable) }
func (gdClass StreamPeer) IsBigEndianEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStreamPeer[6]) }
func (gdClass StreamPeer) Put8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[7], value) }
func (gdClass StreamPeer) PutU8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[8], value) }
func (gdClass StreamPeer) Put16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[9], value) }
func (gdClass StreamPeer) PutU16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[10], value) }
func (gdClass StreamPeer) Put32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[11], value) }
func (gdClass StreamPeer) PutU32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[12], value) }
func (gdClass StreamPeer) Put64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[13], value) }
func (gdClass StreamPeer) PutU64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[14], value) }
func (gdClass StreamPeer) PutFloat(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[15], value) }
func (gdClass StreamPeer) PutDouble(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[16], value) }
func (gdClass StreamPeer) PutString(value string)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[17], value) }
func (gdClass StreamPeer) PutUtf8String(value string)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[18], value) }
func (gdClass StreamPeer) PutVar(value any, full_objects bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[19], value, full_objects) }
func (gdClass StreamPeer) Get8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[20]) }
func (gdClass StreamPeer) GetU8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[21]) }
func (gdClass StreamPeer) Get16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[22]) }
func (gdClass StreamPeer) GetU16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[23]) }
func (gdClass StreamPeer) Get32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[24]) }
func (gdClass StreamPeer) GetU32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[25]) }
func (gdClass StreamPeer) Get64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[26]) }
func (gdClass StreamPeer) GetU64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[27]) }
func (gdClass StreamPeer) GetFloat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStreamPeer[28]) }
func (gdClass StreamPeer) GetDouble() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStreamPeer[29]) }
func (gdClass StreamPeer) GetString(bytes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeer[30], bytes) }
func (gdClass StreamPeer) GetUtf8String(bytes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeer[31], bytes) }
func (gdClass StreamPeer) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodStreamPeer[32], allow_objects) }

type StreamPeerBuffer gdnative.Object

var methodStreamPeerBuffer [8]gdnative.Method
func (gdClass StreamPeerBuffer) Seek(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[0], position) }
func (gdClass StreamPeerBuffer) GetSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerBuffer[1]) }
func (gdClass StreamPeerBuffer) GetPosition() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerBuffer[2]) }
func (gdClass StreamPeerBuffer) Resize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[3], size) }
func (gdClass StreamPeerBuffer) SetDataArray(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[4], data) }
func (gdClass StreamPeerBuffer) GetDataArray() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodStreamPeerBuffer[5]) }
func (gdClass StreamPeerBuffer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[6]) }
func (gdClass StreamPeerBuffer) Duplicate() StreamPeerBuffer { return gdnative.Return[StreamPeerBuffer](gdnative.Object(gdClass), methodStreamPeerBuffer[7]) }

type StreamPeerExtension gdnative.Object

var methodStreamPeerExtension [5]gdnative.Method
func (gdClass StreamPeerExtension) GetDataImplementation(r_buffer []byte, r_bytes int64, r_received *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerExtension[0], r_buffer, r_bytes, r_received) }
func (gdClass StreamPeerExtension) GetPartialDataImplementation(r_buffer []byte, r_bytes int64, r_received *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerExtension[1], r_buffer, r_bytes, r_received) }
func (gdClass StreamPeerExtension) PutDataImplementation(p_data []byte, p_bytes int64, r_sent *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerExtension[2], p_data, p_bytes, r_sent) }
func (gdClass StreamPeerExtension) PutPartialDataImplementation(p_data []byte, p_bytes int64, r_sent *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerExtension[3], p_data, p_bytes, r_sent) }
func (gdClass StreamPeerExtension) GetAvailableBytesImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerExtension[4]) }

type StreamPeerSSL gdnative.Object

var methodStreamPeerSSL [8]gdnative.Method

type StreamPeerSSLStatus int64

const (
	StreamPeerSSLStatusDisconnected StreamPeerSSLStatus = 0
	StreamPeerSSLStatusHandshaking StreamPeerSSLStatus = 1
	StreamPeerSSLStatusConnected StreamPeerSSLStatus = 2
	StreamPeerSSLStatusError StreamPeerSSLStatus = 3
	StreamPeerSSLStatusErrorHostnameMismatch StreamPeerSSLStatus = 4
)
func (gdClass StreamPeerSSL) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[0]) }
func (gdClass StreamPeerSSL) AcceptStream(stream StreamPeer, private_key CryptoKey, certificate X509Certificate, chain X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerSSL[1], stream, private_key, certificate, chain) }
func (gdClass StreamPeerSSL) ConnectToStream(stream StreamPeer, validate_certs bool, for_hostname string, valid_certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerSSL[2], stream, validate_certs, for_hostname, valid_certificate) }
func (gdClass StreamPeerSSL) GetStatus() StreamPeerSSLStatus { return gdnative.Return[StreamPeerSSLStatus](gdnative.Object(gdClass), methodStreamPeerSSL[3]) }
func (gdClass StreamPeerSSL) GetStream() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodStreamPeerSSL[4]) }
func (gdClass StreamPeerSSL) DisconnectFromStream()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[5]) }
func (gdClass StreamPeerSSL) SetBlockingHandshakeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[6], enabled) }
func (gdClass StreamPeerSSL) IsBlockingHandshakeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStreamPeerSSL[7]) }

type StreamPeerTCP gdnative.Object

var methodStreamPeerTCP [9]gdnative.Method

type StreamPeerTCPStatus int64

const (
	StreamPeerTCPStatusNone StreamPeerTCPStatus = 0
	StreamPeerTCPStatusConnecting StreamPeerTCPStatus = 1
	StreamPeerTCPStatusConnected StreamPeerTCPStatus = 2
	StreamPeerTCPStatusError StreamPeerTCPStatus = 3
)
func (gdClass StreamPeerTCP) Bind(port int64, host string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[0], port, host) }
func (gdClass StreamPeerTCP) ConnectToHost(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[1], host, port) }
func (gdClass StreamPeerTCP) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[2]) }
func (gdClass StreamPeerTCP) GetStatus() StreamPeerTCPStatus { return gdnative.Return[StreamPeerTCPStatus](gdnative.Object(gdClass), methodStreamPeerTCP[3]) }
func (gdClass StreamPeerTCP) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeerTCP[4]) }
func (gdClass StreamPeerTCP) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerTCP[5]) }
func (gdClass StreamPeerTCP) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerTCP[6]) }
func (gdClass StreamPeerTCP) DisconnectFromHost()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerTCP[7]) }
func (gdClass StreamPeerTCP) SetNoDelay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerTCP[8], enabled) }

type StyleBox gdnative.Object

var methodStyleBox [14]gdnative.Method
func (gdClass StyleBox) GetStyleMarginImplementation(side Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBox[0], side) }
func (gdClass StyleBox) TestMaskImplementation(point Vector2, rect Rect2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBox[1], point, rect) }
func (gdClass StyleBox) GetCenterSizeImplementation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[2]) }
func (gdClass StyleBox) GetDrawRectImplementation(rect Rect2) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodStyleBox[3], rect) }
func (gdClass StyleBox) DrawImplementation(to_canvas_item RID, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBox[4], to_canvas_item, rect) }
func (gdClass StyleBox) TestMask(point Vector2, rect Rect2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBox[5], point, rect) }
func (gdClass StyleBox) SetDefaultMargin(margin Side, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBox[6], margin, offset) }
func (gdClass StyleBox) GetDefaultMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBox[7], margin) }
func (gdClass StyleBox) GetMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBox[8], margin) }
func (gdClass StyleBox) GetMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[9]) }
func (gdClass StyleBox) GetCenterSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[10]) }
func (gdClass StyleBox) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[11]) }
func (gdClass StyleBox) GetCurrentItemDrawn() CanvasItem { return gdnative.Return[CanvasItem](gdnative.Object(gdClass), methodStyleBox[12]) }
func (gdClass StyleBox) Draw(canvas_item RID, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBox[13], canvas_item, rect) }

type StyleBoxEmpty gdnative.Object

var methodStyleBoxEmpty [0]gdnative.Method

type StyleBoxFlat gdnative.Object

var methodStyleBoxFlat [34]gdnative.Method
func (gdClass StyleBoxFlat) SetBgColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[0], color) }
func (gdClass StyleBoxFlat) GetBgColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[1]) }
func (gdClass StyleBoxFlat) SetBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[2], color) }
func (gdClass StyleBoxFlat) GetBorderColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[3]) }
func (gdClass StyleBoxFlat) SetBorderWidthAll(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[4], width) }
func (gdClass StyleBoxFlat) GetBorderWidthMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[5]) }
func (gdClass StyleBoxFlat) SetBorderWidth(margin Side, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[6], margin, width) }
func (gdClass StyleBoxFlat) GetBorderWidth(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[7], margin) }
func (gdClass StyleBoxFlat) SetBorderBlend(blend bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[8], blend) }
func (gdClass StyleBoxFlat) GetBorderBlend() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[9]) }
func (gdClass StyleBoxFlat) SetCornerRadiusIndividual(radius_top_left int64, radius_top_right int64, radius_bottom_right int64, radius_bottom_left int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[10], radius_top_left, radius_top_right, radius_bottom_right, radius_bottom_left) }
func (gdClass StyleBoxFlat) SetCornerRadiusAll(radius int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[11], radius) }
func (gdClass StyleBoxFlat) SetCornerRadius(corner Corner, radius int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[12], corner, radius) }
func (gdClass StyleBoxFlat) GetCornerRadius(corner Corner) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[13], corner) }
func (gdClass StyleBoxFlat) SetExpandMargin(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[14], margin, size) }
func (gdClass StyleBoxFlat) SetExpandMarginAll(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[15], size) }
func (gdClass StyleBoxFlat) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[16], size_left, size_top, size_right, size_bottom) }
func (gdClass StyleBoxFlat) GetExpandMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxFlat[17], margin) }
func (gdClass StyleBoxFlat) SetDrawCenter(draw_center bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[18], draw_center) }
func (gdClass StyleBoxFlat) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[19]) }
func (gdClass StyleBoxFlat) SetSkew(skew Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[20], skew) }
func (gdClass StyleBoxFlat) GetSkew() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBoxFlat[21]) }
func (gdClass StyleBoxFlat) SetShadowColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[22], color) }
func (gdClass StyleBoxFlat) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[23]) }
func (gdClass StyleBoxFlat) SetShadowSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[24], size) }
func (gdClass StyleBoxFlat) GetShadowSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[25]) }
func (gdClass StyleBoxFlat) SetShadowOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[26], offset) }
func (gdClass StyleBoxFlat) GetShadowOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBoxFlat[27]) }
func (gdClass StyleBoxFlat) SetAntiAliased(anti_aliased bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[28], anti_aliased) }
func (gdClass StyleBoxFlat) IsAntiAliased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[29]) }
func (gdClass StyleBoxFlat) SetAaSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[30], size) }
func (gdClass StyleBoxFlat) GetAaSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxFlat[31]) }
func (gdClass StyleBoxFlat) SetCornerDetail(detail int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[32], detail) }
func (gdClass StyleBoxFlat) GetCornerDetail() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[33]) }

type StyleBoxLine gdnative.Object

var methodStyleBoxLine [10]gdnative.Method
func (gdClass StyleBoxLine) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[0], color) }
func (gdClass StyleBoxLine) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxLine[1]) }
func (gdClass StyleBoxLine) SetThickness(thickness int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[2], thickness) }
func (gdClass StyleBoxLine) GetThickness() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxLine[3]) }
func (gdClass StyleBoxLine) SetGrowBegin(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[4], offset) }
func (gdClass StyleBoxLine) GetGrowBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxLine[5]) }
func (gdClass StyleBoxLine) SetGrowEnd(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[6], offset) }
func (gdClass StyleBoxLine) GetGrowEnd() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxLine[7]) }
func (gdClass StyleBoxLine) SetVertical(vertical bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[8], vertical) }
func (gdClass StyleBoxLine) IsVertical() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxLine[9]) }

type StyleBoxTexture gdnative.Object

var methodStyleBoxTexture [18]gdnative.Method

type StyleBoxTextureAxisStretchMode int64

const (
	StyleBoxTextureAxisStretchModeStretch StyleBoxTextureAxisStretchMode = 0
	StyleBoxTextureAxisStretchModeTile StyleBoxTextureAxisStretchMode = 1
	StyleBoxTextureAxisStretchModeTileFit StyleBoxTextureAxisStretchMode = 2
)
func (gdClass StyleBoxTexture) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[0], texture) }
func (gdClass StyleBoxTexture) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodStyleBoxTexture[1]) }
func (gdClass StyleBoxTexture) SetMarginSize(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[2], margin, size) }
func (gdClass StyleBoxTexture) GetMarginSize(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxTexture[3], margin) }
func (gdClass StyleBoxTexture) SetExpandMarginSize(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[4], margin, size) }
func (gdClass StyleBoxTexture) SetExpandMarginAll(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[5], size) }
func (gdClass StyleBoxTexture) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[6], size_left, size_top, size_right, size_bottom) }
func (gdClass StyleBoxTexture) GetExpandMarginSize(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxTexture[7], margin) }
func (gdClass StyleBoxTexture) SetRegionRect(region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[8], region) }
func (gdClass StyleBoxTexture) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodStyleBoxTexture[9]) }
func (gdClass StyleBoxTexture) SetDrawCenter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[10], enable) }
func (gdClass StyleBoxTexture) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxTexture[11]) }
func (gdClass StyleBoxTexture) SetModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[12], color) }
func (gdClass StyleBoxTexture) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxTexture[13]) }
func (gdClass StyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[14], mode) }
func (gdClass StyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode { return gdnative.Return[StyleBoxTextureAxisStretchMode](gdnative.Object(gdClass), methodStyleBoxTexture[15]) }
func (gdClass StyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[16], mode) }
func (gdClass StyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode { return gdnative.Return[StyleBoxTextureAxisStretchMode](gdnative.Object(gdClass), methodStyleBoxTexture[17]) }

type SubViewport gdnative.Object

var methodSubViewport [10]gdnative.Method

type SubViewportClearMode int64

const (
	SubViewportClearModeAlways SubViewportClearMode = 0
	SubViewportClearModeNever SubViewportClearMode = 1
	SubViewportClearModeOnce SubViewportClearMode = 2
)

type SubViewportUpdateMode int64

const (
	SubViewportUpdateDisabled SubViewportUpdateMode = 0
	SubViewportUpdateOnce SubViewportUpdateMode = 1
	SubViewportUpdateWhenVisible SubViewportUpdateMode = 2
	SubViewportUpdateWhenParentVisible SubViewportUpdateMode = 3
	SubViewportUpdateAlways SubViewportUpdateMode = 4
)
func (gdClass SubViewport) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[0], size) }
func (gdClass SubViewport) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSubViewport[1]) }
func (gdClass SubViewport) SetSize2dOverride(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[2], size) }
func (gdClass SubViewport) GetSize2dOverride() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSubViewport[3]) }
func (gdClass SubViewport) SetSize2dOverrideStretch(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[4], enable) }
func (gdClass SubViewport) IsSize2dOverrideStretchEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSubViewport[5]) }
func (gdClass SubViewport) SetUpdateMode(mode SubViewportUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[6], mode) }
func (gdClass SubViewport) GetUpdateMode() SubViewportUpdateMode { return gdnative.Return[SubViewportUpdateMode](gdnative.Object(gdClass), methodSubViewport[7]) }
func (gdClass SubViewport) SetClearMode(mode SubViewportClearMode)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[8], mode) }
func (gdClass SubViewport) GetClearMode() SubViewportClearMode { return gdnative.Return[SubViewportClearMode](gdnative.Object(gdClass), methodSubViewport[9]) }

type SubViewportContainer gdnative.Object

var methodSubViewportContainer [4]gdnative.Method
func (gdClass SubViewportContainer) SetStretch(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewportContainer[0], enable) }
func (gdClass SubViewportContainer) IsStretchEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSubViewportContainer[1]) }
func (gdClass SubViewportContainer) SetStretchShrink(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewportContainer[2], amount) }
func (gdClass SubViewportContainer) GetStretchShrink() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSubViewportContainer[3]) }

type SurfaceTool gdnative.Object

var methodSurfaceTool [32]gdnative.Method

type SurfaceToolCustomFormat int64

const (
	SurfaceToolCustomRgba8Unorm SurfaceToolCustomFormat = 0
	SurfaceToolCustomRgba8Snorm SurfaceToolCustomFormat = 1
	SurfaceToolCustomRgHalf SurfaceToolCustomFormat = 2
	SurfaceToolCustomRgbaHalf SurfaceToolCustomFormat = 3
	SurfaceToolCustomRFloat SurfaceToolCustomFormat = 4
	SurfaceToolCustomRgFloat SurfaceToolCustomFormat = 5
	SurfaceToolCustomRgbFloat SurfaceToolCustomFormat = 6
	SurfaceToolCustomRgbaFloat SurfaceToolCustomFormat = 7
	SurfaceToolCustomMax SurfaceToolCustomFormat = 8
)

type SurfaceToolSkinWeightCount int64

const (
	SurfaceToolSkin4Weights SurfaceToolSkinWeightCount = 0
	SurfaceToolSkin8Weights SurfaceToolSkinWeightCount = 1
)
func (gdClass SurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[0], count) }
func (gdClass SurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount { return gdnative.Return[SurfaceToolSkinWeightCount](gdnative.Object(gdClass), methodSurfaceTool[1]) }
func (gdClass SurfaceTool) SetCustomFormat(channel_index int64, format SurfaceToolCustomFormat)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[2], channel_index, format) }
func (gdClass SurfaceTool) GetCustomFormat(channel_index int64) SurfaceToolCustomFormat { return gdnative.Return[SurfaceToolCustomFormat](gdnative.Object(gdClass), methodSurfaceTool[3], channel_index) }
func (gdClass SurfaceTool) Begin(primitive MeshPrimitiveType)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[4], primitive) }
func (gdClass SurfaceTool) AddVertex(vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[5], vertex) }
func (gdClass SurfaceTool) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[6], color) }
func (gdClass SurfaceTool) SetNormal(normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[7], normal) }
func (gdClass SurfaceTool) SetTangent(tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[8], tangent) }
func (gdClass SurfaceTool) SetUv(uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[9], uv) }
func (gdClass SurfaceTool) SetUv2(uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[10], uv2) }
func (gdClass SurfaceTool) SetBones(bones []int32)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[11], bones) }
func (gdClass SurfaceTool) SetWeights(weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[12], weights) }
func (gdClass SurfaceTool) SetCustom(channel_index int64, custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[13], channel_index, custom_color) }
func (gdClass SurfaceTool) SetSmoothGroup(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[14], index) }
func (gdClass SurfaceTool) AddTriangleFan(vertices []Vector3, uvs []Vector2, colors []Color, uv2s []Vector2, normals []Vector3, tangents Array)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[15], vertices, uvs, colors, uv2s, normals, tangents) }
func (gdClass SurfaceTool) AddIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[16], index) }
func (gdClass SurfaceTool) Index()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[17]) }
func (gdClass SurfaceTool) Deindex()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[18]) }
func (gdClass SurfaceTool) GenerateNormals(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[19], flip) }
func (gdClass SurfaceTool) GenerateTangents()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[20]) }
func (gdClass SurfaceTool) OptimizeIndicesForCache()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[21]) }
func (gdClass SurfaceTool) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodSurfaceTool[22]) }
func (gdClass SurfaceTool) GenerateLod(nd_threshold float64, target_index_count int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSurfaceTool[23], nd_threshold, target_index_count) }
func (gdClass SurfaceTool) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[24], material) }
func (gdClass SurfaceTool) GetPrimitiveType() MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodSurfaceTool[25]) }
func (gdClass SurfaceTool) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[26]) }
func (gdClass SurfaceTool) CreateFrom(existing Mesh, surface int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[27], existing, surface) }
func (gdClass SurfaceTool) CreateFromBlendShape(existing Mesh, surface int64, blend_shape string)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[28], existing, surface, blend_shape) }
func (gdClass SurfaceTool) AppendFrom(existing Mesh, surface int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[29], existing, surface, transform) }
func (gdClass SurfaceTool) Commit(existing ArrayMesh, flags int64) ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodSurfaceTool[30], existing, flags) }
func (gdClass SurfaceTool) CommitToArrays() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSurfaceTool[31]) }

type SyntaxHighlighter gdnative.Object

var methodSyntaxHighlighter [7]gdnative.Method
func (gdClass SyntaxHighlighter) GetLineSyntaxHighlightingImplementation(line int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodSyntaxHighlighter[0], line) }
func (gdClass SyntaxHighlighter) ClearHighlightingCacheImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[1]) }
func (gdClass SyntaxHighlighter) UpdateCacheImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[2]) }
func (gdClass SyntaxHighlighter) GetLineSyntaxHighlighting(line int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodSyntaxHighlighter[3], line) }
func (gdClass SyntaxHighlighter) UpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[4]) }
func (gdClass SyntaxHighlighter) ClearHighlightingCache()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[5]) }
func (gdClass SyntaxHighlighter) GetTextEdit() TextEdit { return gdnative.Return[TextEdit](gdnative.Object(gdClass), methodSyntaxHighlighter[6]) }

type SystemFont gdnative.Object

var methodSystemFont [15]gdnative.Method
func (gdClass SystemFont) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[0], antialiased) }
func (gdClass SystemFont) IsAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[1]) }
func (gdClass SystemFont) SetGenerateMipmaps(generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[2], generate_mipmaps) }
func (gdClass SystemFont) GetGenerateMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[3]) }
func (gdClass SystemFont) SetForceAutohinter(force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[4], force_autohinter) }
func (gdClass SystemFont) IsForceAutohinter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[5]) }
func (gdClass SystemFont) SetHinting(hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[6], hinting) }
func (gdClass SystemFont) GetHinting() TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodSystemFont[7]) }
func (gdClass SystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[8], subpixel_positioning) }
func (gdClass SystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodSystemFont[9]) }
func (gdClass SystemFont) SetOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[10], oversampling) }
func (gdClass SystemFont) GetOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSystemFont[11]) }
func (gdClass SystemFont) GetFontNames() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSystemFont[12]) }
func (gdClass SystemFont) SetFontNames(names []string)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[13], names) }
func (gdClass SystemFont) SetFontStyle(style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[14], style) }

type TCPServer gdnative.Object

var methodTCPServer [6]gdnative.Method
func (gdClass TCPServer) Listen(port int64, bind_address string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodTCPServer[0], port, bind_address) }
func (gdClass TCPServer) IsConnectionAvailable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTCPServer[1]) }
func (gdClass TCPServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTCPServer[2]) }
func (gdClass TCPServer) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTCPServer[3]) }
func (gdClass TCPServer) TakeConnection() StreamPeerTCP { return gdnative.Return[StreamPeerTCP](gdnative.Object(gdClass), methodTCPServer[4]) }
func (gdClass TCPServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTCPServer[5]) }

type TabBar gdnative.Object

var methodTabBar [45]gdnative.Method

type TabBarAlignmentMode int64

const (
	TabBarAlignmentLeft TabBarAlignmentMode = 0
	TabBarAlignmentCenter TabBarAlignmentMode = 1
	TabBarAlignmentRight TabBarAlignmentMode = 2
	TabBarAlignmentMax TabBarAlignmentMode = 3
)

type TabBarCloseButtonDisplayPolicy int64

const (
	TabBarCloseButtonShowNever TabBarCloseButtonDisplayPolicy = 0
	TabBarCloseButtonShowActiveOnly TabBarCloseButtonDisplayPolicy = 1
	TabBarCloseButtonShowAlways TabBarCloseButtonDisplayPolicy = 2
	TabBarCloseButtonMax TabBarCloseButtonDisplayPolicy = 3
)
func (gdClass TabBar) SetTabCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[0], count) }
func (gdClass TabBar) GetTabCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[1]) }
func (gdClass TabBar) SetCurrentTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[2], tab_idx) }
func (gdClass TabBar) GetCurrentTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[3]) }
func (gdClass TabBar) GetPreviousTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[4]) }
func (gdClass TabBar) SetTabTitle(tab_idx int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[5], tab_idx, title) }
func (gdClass TabBar) GetTabTitle(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabBar[6], tab_idx) }
func (gdClass TabBar) SetTabTextDirection(tab_idx int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[7], tab_idx, direction) }
func (gdClass TabBar) GetTabTextDirection(tab_idx int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTabBar[8], tab_idx) }
func (gdClass TabBar) SetTabLanguage(tab_idx int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[9], tab_idx, language) }
func (gdClass TabBar) GetTabLanguage(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabBar[10], tab_idx) }
func (gdClass TabBar) SetTabIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[11], tab_idx, icon) }
func (gdClass TabBar) GetTabIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabBar[12], tab_idx) }
func (gdClass TabBar) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[13], tab_idx, icon) }
func (gdClass TabBar) GetTabButtonIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabBar[14], tab_idx) }
func (gdClass TabBar) SetTabDisabled(tab_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[15], tab_idx, disabled) }
func (gdClass TabBar) IsTabDisabled(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[16], tab_idx) }
func (gdClass TabBar) SetTabHidden(tab_idx int64, hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[17], tab_idx, hidden) }
func (gdClass TabBar) IsTabHidden(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[18], tab_idx) }
func (gdClass TabBar) RemoveTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[19], tab_idx) }
func (gdClass TabBar) AddTab(title string, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[20], title, icon) }
func (gdClass TabBar) GetTabIdxAtPoint(point Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[21], point) }
func (gdClass TabBar) SetTabAlignment(alignment TabBarAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[22], alignment) }
func (gdClass TabBar) GetTabAlignment() TabBarAlignmentMode { return gdnative.Return[TabBarAlignmentMode](gdnative.Object(gdClass), methodTabBar[23]) }
func (gdClass TabBar) SetClipTabs(clip_tabs bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[24], clip_tabs) }
func (gdClass TabBar) GetClipTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[25]) }
func (gdClass TabBar) GetTabOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[26]) }
func (gdClass TabBar) GetOffsetButtonsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[27]) }
func (gdClass TabBar) EnsureTabVisible(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[28], idx) }
func (gdClass TabBar) GetTabRect(tab_idx int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTabBar[29], tab_idx) }
func (gdClass TabBar) MoveTab(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[30], from, to) }
func (gdClass TabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[31], policy) }
func (gdClass TabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy { return gdnative.Return[TabBarCloseButtonDisplayPolicy](gdnative.Object(gdClass), methodTabBar[32]) }
func (gdClass TabBar) SetMaxTabWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[33], width) }
func (gdClass TabBar) GetMaxTabWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[34]) }
func (gdClass TabBar) SetScrollingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[35], enabled) }
func (gdClass TabBar) GetScrollingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[36]) }
func (gdClass TabBar) SetDragToRearrangeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[37], enabled) }
func (gdClass TabBar) GetDragToRearrangeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[38]) }
func (gdClass TabBar) SetTabsRearrangeGroup(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[39], group_id) }
func (gdClass TabBar) GetTabsRearrangeGroup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[40]) }
func (gdClass TabBar) SetScrollToSelected(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[41], enabled) }
func (gdClass TabBar) GetScrollToSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[42]) }
func (gdClass TabBar) SetSelectWithRmb(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[43], enabled) }
func (gdClass TabBar) GetSelectWithRmb() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[44]) }

type TabContainer gdnative.Object

var methodTabContainer [34]gdnative.Method
func (gdClass TabContainer) GetTabCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[0]) }
func (gdClass TabContainer) SetCurrentTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[1], tab_idx) }
func (gdClass TabContainer) GetCurrentTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[2]) }
func (gdClass TabContainer) GetPreviousTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[3]) }
func (gdClass TabContainer) GetCurrentTabControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodTabContainer[4]) }
func (gdClass TabContainer) GetTabControl(tab_idx int64) Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodTabContainer[5], tab_idx) }
func (gdClass TabContainer) SetTabAlignment(alignment TabBarAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[6], alignment) }
func (gdClass TabContainer) GetTabAlignment() TabBarAlignmentMode { return gdnative.Return[TabBarAlignmentMode](gdnative.Object(gdClass), methodTabContainer[7]) }
func (gdClass TabContainer) SetClipTabs(clip_tabs bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[8], clip_tabs) }
func (gdClass TabContainer) GetClipTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[9]) }
func (gdClass TabContainer) SetTabsVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[10], visible) }
func (gdClass TabContainer) AreTabsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[11]) }
func (gdClass TabContainer) SetAllTabsInFront(is_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[12], is_front) }
func (gdClass TabContainer) IsAllTabsInFront() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[13]) }
func (gdClass TabContainer) SetTabTitle(tab_idx int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[14], tab_idx, title) }
func (gdClass TabContainer) GetTabTitle(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabContainer[15], tab_idx) }
func (gdClass TabContainer) SetTabIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[16], tab_idx, icon) }
func (gdClass TabContainer) GetTabIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabContainer[17], tab_idx) }
func (gdClass TabContainer) SetTabDisabled(tab_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[18], tab_idx, disabled) }
func (gdClass TabContainer) IsTabDisabled(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[19], tab_idx) }
func (gdClass TabContainer) SetTabHidden(tab_idx int64, hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[20], tab_idx, hidden) }
func (gdClass TabContainer) IsTabHidden(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[21], tab_idx) }
func (gdClass TabContainer) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[22], tab_idx, icon) }
func (gdClass TabContainer) GetTabButtonIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabContainer[23], tab_idx) }
func (gdClass TabContainer) GetTabIdxAtPoint(point Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[24], point) }
func (gdClass TabContainer) GetTabIdxFromControl(control Control) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[25], control) }
func (gdClass TabContainer) SetPopup(popup Node)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[26], popup) }
func (gdClass TabContainer) GetPopup() Popup { return gdnative.Return[Popup](gdnative.Object(gdClass), methodTabContainer[27]) }
func (gdClass TabContainer) SetDragToRearrangeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[28], enabled) }
func (gdClass TabContainer) GetDragToRearrangeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[29]) }
func (gdClass TabContainer) SetTabsRearrangeGroup(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[30], group_id) }
func (gdClass TabContainer) GetTabsRearrangeGroup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[31]) }
func (gdClass TabContainer) SetUseHiddenTabsForMinSize(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[32], enabled) }
func (gdClass TabContainer) GetUseHiddenTabsForMinSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[33]) }

type TextEdit gdnative.Object

var methodTextEdit [195]gdnative.Method

type TextEditMenuItems int64

const (
	TextEditMenuCut TextEditMenuItems = 0
	TextEditMenuCopy TextEditMenuItems = 1
	TextEditMenuPaste TextEditMenuItems = 2
	TextEditMenuClear TextEditMenuItems = 3
	TextEditMenuSelectAll TextEditMenuItems = 4
	TextEditMenuUndo TextEditMenuItems = 5
	TextEditMenuRedo TextEditMenuItems = 6
	TextEditMenuDirInherited TextEditMenuItems = 7
	TextEditMenuDirAuto TextEditMenuItems = 8
	TextEditMenuDirLtr TextEditMenuItems = 9
	TextEditMenuDirRtl TextEditMenuItems = 10
	TextEditMenuDisplayUcc TextEditMenuItems = 11
	TextEditMenuInsertLrm TextEditMenuItems = 12
	TextEditMenuInsertRlm TextEditMenuItems = 13
	TextEditMenuInsertLre TextEditMenuItems = 14
	TextEditMenuInsertRle TextEditMenuItems = 15
	TextEditMenuInsertLro TextEditMenuItems = 16
	TextEditMenuInsertRlo TextEditMenuItems = 17
	TextEditMenuInsertPdf TextEditMenuItems = 18
	TextEditMenuInsertAlm TextEditMenuItems = 19
	TextEditMenuInsertLri TextEditMenuItems = 20
	TextEditMenuInsertRli TextEditMenuItems = 21
	TextEditMenuInsertFsi TextEditMenuItems = 22
	TextEditMenuInsertPdi TextEditMenuItems = 23
	TextEditMenuInsertZwj TextEditMenuItems = 24
	TextEditMenuInsertZwnj TextEditMenuItems = 25
	TextEditMenuInsertWj TextEditMenuItems = 26
	TextEditMenuInsertShy TextEditMenuItems = 27
	TextEditMenuMax TextEditMenuItems = 28
)

type TextEditSearchFlags int64

const (
	TextEditSearchMatchCase TextEditSearchFlags = 1
	TextEditSearchWholeWords TextEditSearchFlags = 2
	TextEditSearchBackwards TextEditSearchFlags = 4
)

type TextEditCaretType int64

const (
	TextEditCaretTypeLine TextEditCaretType = 0
	TextEditCaretTypeBlock TextEditCaretType = 1
)

type TextEditSelectionMode int64

const (
	TextEditSelectionModeNone TextEditSelectionMode = 0
	TextEditSelectionModeShift TextEditSelectionMode = 1
	TextEditSelectionModePointer TextEditSelectionMode = 2
	TextEditSelectionModeWord TextEditSelectionMode = 3
	TextEditSelectionModeLine TextEditSelectionMode = 4
)

type TextEditLineWrappingMode int64

const (
	TextEditLineWrappingNone TextEditLineWrappingMode = 0
	TextEditLineWrappingBoundary TextEditLineWrappingMode = 1
)

type TextEditGutterType int64

const (
	TextEditGutterTypeString TextEditGutterType = 0
	TextEditGutterTypeIcon TextEditGutterType = 1
	TextEditGutterTypeCustom TextEditGutterType = 2
)
func (gdClass TextEdit) HandleUnicodeInputImplementation(unicode_char int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[0], unicode_char) }
func (gdClass TextEdit) BackspaceImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[1]) }
func (gdClass TextEdit) CutImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[2]) }
func (gdClass TextEdit) CopyImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[3]) }
func (gdClass TextEdit) PasteImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[4]) }
func (gdClass TextEdit) PastePrimaryClipboardImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[5]) }
func (gdClass TextEdit) HasImeText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[6]) }
func (gdClass TextEdit) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[7], enabled) }
func (gdClass TextEdit) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[8]) }
func (gdClass TextEdit) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[9], direction) }
func (gdClass TextEdit) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTextEdit[10]) }
func (gdClass TextEdit) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[11], language) }
func (gdClass TextEdit) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[12]) }
func (gdClass TextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[13], parser) }
func (gdClass TextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTextEdit[14]) }
func (gdClass TextEdit) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[15], args) }
func (gdClass TextEdit) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextEdit[16]) }
func (gdClass TextEdit) SetTabSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[17], size) }
func (gdClass TextEdit) GetTabSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[18]) }
func (gdClass TextEdit) SetOvertypeModeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[19], enabled) }
func (gdClass TextEdit) IsOvertypeModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[20]) }
func (gdClass TextEdit) SetContextMenuEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[21], enabled) }
func (gdClass TextEdit) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[22]) }
func (gdClass TextEdit) SetShortcutKeysEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[23], enabled) }
func (gdClass TextEdit) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[24]) }
func (gdClass TextEdit) SetVirtualKeyboardEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[25], enabled) }
func (gdClass TextEdit) IsVirtualKeyboardEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[26]) }
func (gdClass TextEdit) SetMiddleMousePasteEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[27], enabled) }
func (gdClass TextEdit) IsMiddleMousePasteEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[28]) }
func (gdClass TextEdit) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[29]) }
func (gdClass TextEdit) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[30], text) }
func (gdClass TextEdit) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[31]) }
func (gdClass TextEdit) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[32]) }
func (gdClass TextEdit) SetPlaceholder(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[33], text) }
func (gdClass TextEdit) GetPlaceholder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[34]) }
func (gdClass TextEdit) SetLine(line int64, new_text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[35], line, new_text) }
func (gdClass TextEdit) GetLine(line int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[36], line) }
func (gdClass TextEdit) GetLineWidth(line int64, wrap_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[37], line, wrap_index) }
func (gdClass TextEdit) GetLineHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[38]) }
func (gdClass TextEdit) GetIndentLevel(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[39], line) }
func (gdClass TextEdit) GetFirstNonWhitespaceColumn(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[40], line) }
func (gdClass TextEdit) SwapLines(from_line int64, to_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[41], from_line, to_line) }
func (gdClass TextEdit) InsertLineAt(line int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[42], line, text) }
func (gdClass TextEdit) InsertTextAtCaret(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[43], text) }
func (gdClass TextEdit) RemoveText(from_line int64, from_column int64, to_line int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[44], from_line, from_column, to_line, to_column) }
func (gdClass TextEdit) GetLastUnhiddenLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[45]) }
func (gdClass TextEdit) GetNextVisibleLineOffsetFrom(line int64, visible_amount int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[46], line, visible_amount) }
func (gdClass TextEdit) GetNextVisibleLineIndexOffsetFrom(line int64, wrap_index int64, visible_amount int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[47], line, wrap_index, visible_amount) }
func (gdClass TextEdit) Backspace()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[48]) }
func (gdClass TextEdit) Cut()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[49]) }
func (gdClass TextEdit) Copy()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[50]) }
func (gdClass TextEdit) Paste()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[51]) }
func (gdClass TextEdit) BeginComplexOperation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[52]) }
func (gdClass TextEdit) EndComplexOperation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[53]) }
func (gdClass TextEdit) HasUndo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[54]) }
func (gdClass TextEdit) HasRedo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[55]) }
func (gdClass TextEdit) Undo()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[56]) }
func (gdClass TextEdit) Redo()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[57]) }
func (gdClass TextEdit) ClearUndoHistory()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[58]) }
func (gdClass TextEdit) TagSavedVersion()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[59]) }
func (gdClass TextEdit) GetVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[60]) }
func (gdClass TextEdit) GetSavedVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[61]) }
func (gdClass TextEdit) SetSearchText(search_text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[62], search_text) }
func (gdClass TextEdit) SetSearchFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[63], flags) }
func (gdClass TextEdit) Search(text string, flags int64, from_line int64, from_colum int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[64], text, flags, from_line, from_colum) }
func (gdClass TextEdit) SetTooltipRequestFunc(callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[65], callback) }
func (gdClass TextEdit) GetLocalMousePos() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextEdit[66]) }
func (gdClass TextEdit) GetWordAtPos(position Vector2) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[67], position) }
func (gdClass TextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[68], position, allow_out_of_bounds) }
func (gdClass TextEdit) GetPosAtLineColumn(line int64, column int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[69], line, column) }
func (gdClass TextEdit) GetRectAtLineColumn(line int64, column int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTextEdit[70], line, column) }
func (gdClass TextEdit) GetMinimapLineAtPos(position Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[71], position) }
func (gdClass TextEdit) IsDraggingCursor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[72]) }
func (gdClass TextEdit) IsMouseOverSelection(edges bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[73], edges) }
func (gdClass TextEdit) SetCaretType(atype TextEditCaretType)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[74], atype) }
func (gdClass TextEdit) GetCaretType() TextEditCaretType { return gdnative.Return[TextEditCaretType](gdnative.Object(gdClass), methodTextEdit[75]) }
func (gdClass TextEdit) SetCaretBlinkEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[76], enable) }
func (gdClass TextEdit) IsCaretBlinkEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[77]) }
func (gdClass TextEdit) SetCaretBlinkSpeed(blink_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[78], blink_speed) }
func (gdClass TextEdit) GetCaretBlinkSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[79]) }
func (gdClass TextEdit) SetMoveCaretOnRightClickEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[80], enable) }
func (gdClass TextEdit) IsMoveCaretOnRightClickEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[81]) }
func (gdClass TextEdit) SetCaretMidGraphemeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[82], enabled) }
func (gdClass TextEdit) IsCaretMidGraphemeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[83]) }
func (gdClass TextEdit) IsCaretVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[84]) }
func (gdClass TextEdit) GetCaretDrawPos() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextEdit[85]) }
func (gdClass TextEdit) SetCaretLine(line int64, adjust_viewport bool, can_be_hidden bool, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[86], line, adjust_viewport, can_be_hidden, wrap_index) }
func (gdClass TextEdit) GetCaretLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[87]) }
func (gdClass TextEdit) SetCaretColumn(column int64, adjust_viewport bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[88], column, adjust_viewport) }
func (gdClass TextEdit) GetCaretColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[89]) }
func (gdClass TextEdit) GetCaretWrapIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[90]) }
func (gdClass TextEdit) GetWordUnderCaret() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[91]) }
func (gdClass TextEdit) SetSelectingEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[92], enable) }
func (gdClass TextEdit) IsSelectingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[93]) }
func (gdClass TextEdit) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[94], enable) }
func (gdClass TextEdit) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[95]) }
func (gdClass TextEdit) SetDragAndDropSelectionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[96], enable) }
func (gdClass TextEdit) IsDragAndDropSelectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[97]) }
func (gdClass TextEdit) SetOverrideSelectedFontColor(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[98], override) }
func (gdClass TextEdit) IsOverridingSelectedFontColor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[99]) }
func (gdClass TextEdit) SetSelectionMode(mode TextEditSelectionMode, line int64, column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[100], mode, line, column) }
func (gdClass TextEdit) GetSelectionMode() TextEditSelectionMode { return gdnative.Return[TextEditSelectionMode](gdnative.Object(gdClass), methodTextEdit[101]) }
func (gdClass TextEdit) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[102]) }
func (gdClass TextEdit) SelectWordUnderCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[103]) }
func (gdClass TextEdit) Select(from_line int64, from_column int64, to_line int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[104], from_line, from_column, to_line, to_column) }
func (gdClass TextEdit) HasSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[105]) }
func (gdClass TextEdit) GetSelectedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[106]) }
func (gdClass TextEdit) GetSelectionLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[107]) }
func (gdClass TextEdit) GetSelectionColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[108]) }
func (gdClass TextEdit) GetSelectionFromLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[109]) }
func (gdClass TextEdit) GetSelectionFromColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[110]) }
func (gdClass TextEdit) GetSelectionToLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[111]) }
func (gdClass TextEdit) GetSelectionToColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[112]) }
func (gdClass TextEdit) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[113]) }
func (gdClass TextEdit) DeleteSelection()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[114]) }
func (gdClass TextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[115], mode) }
func (gdClass TextEdit) GetLineWrappingMode() TextEditLineWrappingMode { return gdnative.Return[TextEditLineWrappingMode](gdnative.Object(gdClass), methodTextEdit[116]) }
func (gdClass TextEdit) IsLineWrapped(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[117], line) }
func (gdClass TextEdit) GetLineWrapCount(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[118], line) }
func (gdClass TextEdit) GetLineWrapIndexAtColumn(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[119], line, column) }
func (gdClass TextEdit) GetLineWrappedText(line int64) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextEdit[120], line) }
func (gdClass TextEdit) SetSmoothScrollEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[121], enable) }
func (gdClass TextEdit) IsSmoothScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[122]) }
func (gdClass TextEdit) SetVScroll(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[123], value) }
func (gdClass TextEdit) GetVScroll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[124]) }
func (gdClass TextEdit) SetHScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[125], value) }
func (gdClass TextEdit) GetHScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[126]) }
func (gdClass TextEdit) SetScrollPastEndOfFileEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[127], enable) }
func (gdClass TextEdit) IsScrollPastEndOfFileEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[128]) }
func (gdClass TextEdit) SetVScrollSpeed(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[129], speed) }
func (gdClass TextEdit) GetVScrollSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[130]) }
func (gdClass TextEdit) SetFitContentHeightEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[131], enabled) }
func (gdClass TextEdit) IsFitContentHeightEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[132]) }
func (gdClass TextEdit) GetScrollPosForLine(line int64, wrap_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[133], line, wrap_index) }
func (gdClass TextEdit) SetLineAsFirstVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[134], line, wrap_index) }
func (gdClass TextEdit) GetFirstVisibleLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[135]) }
func (gdClass TextEdit) SetLineAsCenterVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[136], line, wrap_index) }
func (gdClass TextEdit) SetLineAsLastVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[137], line, wrap_index) }
func (gdClass TextEdit) GetLastFullVisibleLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[138]) }
func (gdClass TextEdit) GetLastFullVisibleLineWrapIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[139]) }
func (gdClass TextEdit) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[140]) }
func (gdClass TextEdit) GetVisibleLineCountInRange(from_line int64, to_line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[141], from_line, to_line) }
func (gdClass TextEdit) GetTotalVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[142]) }
func (gdClass TextEdit) AdjustViewportToCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[143]) }
func (gdClass TextEdit) CenterViewportToCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[144]) }
func (gdClass TextEdit) SetDrawMinimap(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[145], enabled) }
func (gdClass TextEdit) IsDrawingMinimap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[146]) }
func (gdClass TextEdit) SetMinimapWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[147], width) }
func (gdClass TextEdit) GetMinimapWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[148]) }
func (gdClass TextEdit) GetMinimapVisibleLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[149]) }
func (gdClass TextEdit) AddGutter(at int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[150], at) }
func (gdClass TextEdit) RemoveGutter(gutter int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[151], gutter) }
func (gdClass TextEdit) GetGutterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[152]) }
func (gdClass TextEdit) SetGutterName(gutter int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[153], gutter, name) }
func (gdClass TextEdit) GetGutterName(gutter int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[154], gutter) }
func (gdClass TextEdit) SetGutterType(gutter int64, atype TextEditGutterType)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[155], gutter, atype) }
func (gdClass TextEdit) GetGutterType(gutter int64) TextEditGutterType { return gdnative.Return[TextEditGutterType](gdnative.Object(gdClass), methodTextEdit[156], gutter) }
func (gdClass TextEdit) SetGutterWidth(gutter int64, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[157], gutter, width) }
func (gdClass TextEdit) GetGutterWidth(gutter int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[158], gutter) }
func (gdClass TextEdit) SetGutterDraw(gutter int64, draw bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[159], gutter, draw) }
func (gdClass TextEdit) IsGutterDrawn(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[160], gutter) }
func (gdClass TextEdit) SetGutterClickable(gutter int64, clickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[161], gutter, clickable) }
func (gdClass TextEdit) IsGutterClickable(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[162], gutter) }
func (gdClass TextEdit) SetGutterOverwritable(gutter int64, overwritable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[163], gutter, overwritable) }
func (gdClass TextEdit) IsGutterOverwritable(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[164], gutter) }
func (gdClass TextEdit) MergeGutters(from_line int64, to_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[165], from_line, to_line) }
func (gdClass TextEdit) SetGutterCustomDraw(column int64, draw_callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[166], column, draw_callback) }
func (gdClass TextEdit) GetTotalGutterWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[167]) }
func (gdClass TextEdit) SetLineGutterMetadata(line int64, gutter int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[168], line, gutter, metadata) }
func (gdClass TextEdit) GetLineGutterMetadata(line int64, gutter int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTextEdit[169], line, gutter) }
func (gdClass TextEdit) SetLineGutterText(line int64, gutter int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[170], line, gutter, text) }
func (gdClass TextEdit) GetLineGutterText(line int64, gutter int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[171], line, gutter) }
func (gdClass TextEdit) SetLineGutterIcon(line int64, gutter int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[172], line, gutter, icon) }
func (gdClass TextEdit) GetLineGutterIcon(line int64, gutter int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextEdit[173], line, gutter) }
func (gdClass TextEdit) SetLineGutterItemColor(line int64, gutter int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[174], line, gutter, color) }
func (gdClass TextEdit) GetLineGutterItemColor(line int64, gutter int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextEdit[175], line, gutter) }
func (gdClass TextEdit) SetLineGutterClickable(line int64, gutter int64, clickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[176], line, gutter, clickable) }
func (gdClass TextEdit) IsLineGutterClickable(line int64, gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[177], line, gutter) }
func (gdClass TextEdit) SetLineBackgroundColor(line int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[178], line, color) }
func (gdClass TextEdit) GetLineBackgroundColor(line int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextEdit[179], line) }
func (gdClass TextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[180], syntax_highlighter) }
func (gdClass TextEdit) GetSyntaxHighlighter() SyntaxHighlighter { return gdnative.Return[SyntaxHighlighter](gdnative.Object(gdClass), methodTextEdit[181]) }
func (gdClass TextEdit) SetHighlightCurrentLine(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[182], enabled) }
func (gdClass TextEdit) IsHighlightCurrentLineEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[183]) }
func (gdClass TextEdit) SetHighlightAllOccurrences(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[184], enabled) }
func (gdClass TextEdit) IsHighlightAllOccurrencesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[185]) }
func (gdClass TextEdit) GetDrawControlChars() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[186]) }
func (gdClass TextEdit) SetDrawControlChars(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[187], enabled) }
func (gdClass TextEdit) SetDrawTabs(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[188], enabled) }
func (gdClass TextEdit) IsDrawingTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[189]) }
func (gdClass TextEdit) SetDrawSpaces(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[190], enabled) }
func (gdClass TextEdit) IsDrawingSpaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[191]) }
func (gdClass TextEdit) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodTextEdit[192]) }
func (gdClass TextEdit) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[193]) }
func (gdClass TextEdit) MenuOption(option int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[194], option) }

type TextLine gdnative.Object

var methodTextLine [34]gdnative.Method
func (gdClass TextLine) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[0]) }
func (gdClass TextLine) SetDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[1], direction) }
func (gdClass TextLine) GetDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextLine[2]) }
func (gdClass TextLine) SetOrientation(orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[3], orientation) }
func (gdClass TextLine) GetOrientation() TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextLine[4]) }
func (gdClass TextLine) SetPreserveInvalid(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[5], enabled) }
func (gdClass TextLine) GetPreserveInvalid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[6]) }
func (gdClass TextLine) SetPreserveControl(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[7], enabled) }
func (gdClass TextLine) GetPreserveControl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[8]) }
func (gdClass TextLine) SetBidiOverride(override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[9], override) }
func (gdClass TextLine) AddString(text string, font Font, font_size int64, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[10], text, font, font_size, language, meta) }
func (gdClass TextLine) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[11], key, size, inline_align, length) }
func (gdClass TextLine) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[12], key, size, inline_align) }
func (gdClass TextLine) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[13], width) }
func (gdClass TextLine) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[14]) }
func (gdClass TextLine) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[15], alignment) }
func (gdClass TextLine) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextLine[16]) }
func (gdClass TextLine) TabAlign(tab_stops []float32)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[17], tab_stops) }
func (gdClass TextLine) SetFlags(flags TextServerJustificationFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[18], flags) }
func (gdClass TextLine) GetFlags() TextServerJustificationFlag { return gdnative.Return[TextServerJustificationFlag](gdnative.Object(gdClass), methodTextLine[19]) }
func (gdClass TextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[20], overrun_behavior) }
func (gdClass TextLine) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodTextLine[21]) }
func (gdClass TextLine) GetObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextLine[22]) }
func (gdClass TextLine) GetObjectRect(key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextLine[23], key) }
func (gdClass TextLine) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextLine[24]) }
func (gdClass TextLine) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextLine[25]) }
func (gdClass TextLine) GetLineAscent() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[26]) }
func (gdClass TextLine) GetLineDescent() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[27]) }
func (gdClass TextLine) GetLineWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[28]) }
func (gdClass TextLine) GetLineUnderlinePosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[29]) }
func (gdClass TextLine) GetLineUnderlineThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[30]) }
func (gdClass TextLine) Draw(canvas RID, pos Vector2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[31], canvas, pos, color) }
func (gdClass TextLine) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[32], canvas, pos, outline_size, color) }
func (gdClass TextLine) HitTest(coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextLine[33], coords) }

type TextMesh gdnative.Object

var methodTextMesh [26]gdnative.Method
func (gdClass TextMesh) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[0], alignment) }
func (gdClass TextMesh) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextMesh[1]) }
func (gdClass TextMesh) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[2], text) }
func (gdClass TextMesh) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextMesh[3]) }
func (gdClass TextMesh) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[4], font) }
func (gdClass TextMesh) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTextMesh[5]) }
func (gdClass TextMesh) SetFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[6], font_size) }
func (gdClass TextMesh) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextMesh[7]) }
func (gdClass TextMesh) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[8], depth) }
func (gdClass TextMesh) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[9]) }
func (gdClass TextMesh) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[10], width) }
func (gdClass TextMesh) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[11]) }
func (gdClass TextMesh) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[12], pixel_size) }
func (gdClass TextMesh) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[13]) }
func (gdClass TextMesh) SetCurveStep(curve_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[14], curve_step) }
func (gdClass TextMesh) GetCurveStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[15]) }
func (gdClass TextMesh) SetTextDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[16], direction) }
func (gdClass TextMesh) GetTextDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextMesh[17]) }
func (gdClass TextMesh) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[18], language) }
func (gdClass TextMesh) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextMesh[19]) }
func (gdClass TextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[20], parser) }
func (gdClass TextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTextMesh[21]) }
func (gdClass TextMesh) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[22], args) }
func (gdClass TextMesh) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextMesh[23]) }
func (gdClass TextMesh) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[24], enable) }
func (gdClass TextMesh) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextMesh[25]) }

type TextParagraph gdnative.Object

var methodTextParagraph [54]gdnative.Method
func (gdClass TextParagraph) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[0]) }
func (gdClass TextParagraph) SetDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[1], direction) }
func (gdClass TextParagraph) GetDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextParagraph[2]) }
func (gdClass TextParagraph) SetCustomPunctuation(custom_punctuation string)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[3], custom_punctuation) }
func (gdClass TextParagraph) GetCustomPunctuation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextParagraph[4]) }
func (gdClass TextParagraph) SetOrientation(orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[5], orientation) }
func (gdClass TextParagraph) GetOrientation() TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextParagraph[6]) }
func (gdClass TextParagraph) SetPreserveInvalid(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[7], enabled) }
func (gdClass TextParagraph) GetPreserveInvalid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[8]) }
func (gdClass TextParagraph) SetPreserveControl(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[9], enabled) }
func (gdClass TextParagraph) GetPreserveControl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[10]) }
func (gdClass TextParagraph) SetBidiOverride(override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[11], override) }
func (gdClass TextParagraph) SetDropcap(text string, font Font, font_size int64, dropcap_margins Rect2, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[12], text, font, font_size, dropcap_margins, language) }
func (gdClass TextParagraph) ClearDropcap()  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[13]) }
func (gdClass TextParagraph) AddString(text string, font Font, font_size int64, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[14], text, font, font_size, language, meta) }
func (gdClass TextParagraph) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[15], key, size, inline_align, length) }
func (gdClass TextParagraph) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[16], key, size, inline_align) }
func (gdClass TextParagraph) SetAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[17], alignment) }
func (gdClass TextParagraph) GetAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextParagraph[18]) }
func (gdClass TextParagraph) TabAlign(tab_stops []float32)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[19], tab_stops) }
func (gdClass TextParagraph) SetBreakFlags(flags TextServerLineBreakFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[20], flags) }
func (gdClass TextParagraph) GetBreakFlags() TextServerLineBreakFlag { return gdnative.Return[TextServerLineBreakFlag](gdnative.Object(gdClass), methodTextParagraph[21]) }
func (gdClass TextParagraph) SetJustificationFlags(flags TextServerJustificationFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[22], flags) }
func (gdClass TextParagraph) GetJustificationFlags() TextServerJustificationFlag { return gdnative.Return[TextServerJustificationFlag](gdnative.Object(gdClass), methodTextParagraph[23]) }
func (gdClass TextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[24], overrun_behavior) }
func (gdClass TextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodTextParagraph[25]) }
func (gdClass TextParagraph) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[26], width) }
func (gdClass TextParagraph) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[27]) }
func (gdClass TextParagraph) GetNonWrappedSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[28]) }
func (gdClass TextParagraph) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[29]) }
func (gdClass TextParagraph) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[30]) }
func (gdClass TextParagraph) GetLineRid(line int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[31], line) }
func (gdClass TextParagraph) GetDropcapRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[32]) }
func (gdClass TextParagraph) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[33]) }
func (gdClass TextParagraph) SetMaxLinesVisible(max_lines_visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[34], max_lines_visible) }
func (gdClass TextParagraph) GetMaxLinesVisible() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[35]) }
func (gdClass TextParagraph) GetLineObjects(line int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextParagraph[36], line) }
func (gdClass TextParagraph) GetLineObjectRect(line int64, key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextParagraph[37], line, key) }
func (gdClass TextParagraph) GetLineSize(line int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[38], line) }
func (gdClass TextParagraph) GetLineRange(line int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextParagraph[39], line) }
func (gdClass TextParagraph) GetLineAscent(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[40], line) }
func (gdClass TextParagraph) GetLineDescent(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[41], line) }
func (gdClass TextParagraph) GetLineWidth(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[42], line) }
func (gdClass TextParagraph) GetLineUnderlinePosition(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[43], line) }
func (gdClass TextParagraph) GetLineUnderlineThickness(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[44], line) }
func (gdClass TextParagraph) GetDropcapSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[45]) }
func (gdClass TextParagraph) GetDropcapLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[46]) }
func (gdClass TextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[47], canvas, pos, color, dc_color) }
func (gdClass TextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color, dc_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[48], canvas, pos, outline_size, color, dc_color) }
func (gdClass TextParagraph) DrawLine(canvas RID, pos Vector2, line int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[49], canvas, pos, line, color) }
func (gdClass TextParagraph) DrawLineOutline(canvas RID, pos Vector2, line int64, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[50], canvas, pos, line, outline_size, color) }
func (gdClass TextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[51], canvas, pos, color) }
func (gdClass TextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[52], canvas, pos, outline_size, color) }
func (gdClass TextParagraph) HitTest(coords Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[53], coords) }

type TextServer gdnative.Object

var methodTextServer [184]gdnative.Method

type TextServerDirection int64

const (
	TextServerDirectionAuto TextServerDirection = 0
	TextServerDirectionLtr TextServerDirection = 1
	TextServerDirectionRtl TextServerDirection = 2
)

type TextServerOrientation int64

const (
	TextServerOrientationHorizontal TextServerOrientation = 0
	TextServerOrientationVertical TextServerOrientation = 1
)

type TextServerJustificationFlag int64

const (
	TextServerJustificationNone TextServerJustificationFlag = 0
	TextServerJustificationKashida TextServerJustificationFlag = 1
	TextServerJustificationWordBound TextServerJustificationFlag = 2
	TextServerJustificationTrimEdgeSpaces TextServerJustificationFlag = 4
	TextServerJustificationAfterLastTab TextServerJustificationFlag = 8
	TextServerJustificationConstrainEllipsis TextServerJustificationFlag = 16
)

type TextServerAutowrapMode int64

const (
	TextServerAutowrapOff TextServerAutowrapMode = 0
	TextServerAutowrapArbitrary TextServerAutowrapMode = 1
	TextServerAutowrapWord TextServerAutowrapMode = 2
	TextServerAutowrapWordSmart TextServerAutowrapMode = 3
)

type TextServerLineBreakFlag int64

const (
	TextServerBreakNone TextServerLineBreakFlag = 0
	TextServerBreakMandatory TextServerLineBreakFlag = 1
	TextServerBreakWordBound TextServerLineBreakFlag = 2
	TextServerBreakGraphemeBound TextServerLineBreakFlag = 4
	TextServerBreakAdaptive TextServerLineBreakFlag = 8
)

type TextServerVisibleCharactersBehavior int64

const (
	TextServerVcCharsBeforeShaping TextServerVisibleCharactersBehavior = 0
	TextServerVcCharsAfterShaping TextServerVisibleCharactersBehavior = 1
	TextServerVcGlyphsAuto TextServerVisibleCharactersBehavior = 2
	TextServerVcGlyphsLtr TextServerVisibleCharactersBehavior = 3
	TextServerVcGlyphsRtl TextServerVisibleCharactersBehavior = 4
)

type TextServerOverrunBehavior int64

const (
	TextServerOverrunNoTrimming TextServerOverrunBehavior = 0
	TextServerOverrunTrimChar TextServerOverrunBehavior = 1
	TextServerOverrunTrimWord TextServerOverrunBehavior = 2
	TextServerOverrunTrimEllipsis TextServerOverrunBehavior = 3
	TextServerOverrunTrimWordEllipsis TextServerOverrunBehavior = 4
)

type TextServerTextOverrunFlag int64

const (
	TextServerOverrunNoTrim TextServerTextOverrunFlag = 0
	TextServerOverrunTrim TextServerTextOverrunFlag = 1
	TextServerOverrunTrimWordOnly TextServerTextOverrunFlag = 2
	TextServerOverrunAddEllipsis TextServerTextOverrunFlag = 4
	TextServerOverrunEnforceEllipsis TextServerTextOverrunFlag = 8
	TextServerOverrunJustificationAware TextServerTextOverrunFlag = 16
)

type TextServerGraphemeFlag int64

const (
	TextServerGraphemeIsValid TextServerGraphemeFlag = 1
	TextServerGraphemeIsRtl TextServerGraphemeFlag = 2
	TextServerGraphemeIsVirtual TextServerGraphemeFlag = 4
	TextServerGraphemeIsSpace TextServerGraphemeFlag = 8
	TextServerGraphemeIsBreakHard TextServerGraphemeFlag = 16
	TextServerGraphemeIsBreakSoft TextServerGraphemeFlag = 32
	TextServerGraphemeIsTab TextServerGraphemeFlag = 64
	TextServerGraphemeIsElongation TextServerGraphemeFlag = 128
	TextServerGraphemeIsPunctuation TextServerGraphemeFlag = 256
	TextServerGraphemeIsUnderscore TextServerGraphemeFlag = 512
	TextServerGraphemeIsConnected TextServerGraphemeFlag = 1024
	TextServerGraphemeIsSafeToInsertTatweel TextServerGraphemeFlag = 2048
)

type TextServerHinting int64

const (
	TextServerHintingNone TextServerHinting = 0
	TextServerHintingLight TextServerHinting = 1
	TextServerHintingNormal TextServerHinting = 2
)

type TextServerSubpixelPositioning int64

const (
	TextServerSubpixelPositioningDisabled TextServerSubpixelPositioning = 0
	TextServerSubpixelPositioningAuto TextServerSubpixelPositioning = 1
	TextServerSubpixelPositioningOneHalf TextServerSubpixelPositioning = 2
	TextServerSubpixelPositioningOneQuarter TextServerSubpixelPositioning = 3
	TextServerSubpixelPositioningOneHalfMaxSize TextServerSubpixelPositioning = 20
	TextServerSubpixelPositioningOneQuarterMaxSize TextServerSubpixelPositioning = 16
)

type TextServerFeature int64

const (
	TextServerFeatureSimpleLayout TextServerFeature = 1
	TextServerFeatureBidiLayout TextServerFeature = 2
	TextServerFeatureVerticalLayout TextServerFeature = 4
	TextServerFeatureShaping TextServerFeature = 8
	TextServerFeatureKashidaJustification TextServerFeature = 16
	TextServerFeatureBreakIterators TextServerFeature = 32
	TextServerFeatureFontBitmap TextServerFeature = 64
	TextServerFeatureFontDynamic TextServerFeature = 128
	TextServerFeatureFontMsdf TextServerFeature = 256
	TextServerFeatureFontSystem TextServerFeature = 512
	TextServerFeatureFontVariable TextServerFeature = 1024
	TextServerFeatureContextSensitiveCaseConversion TextServerFeature = 2048
	TextServerFeatureUseSupportData TextServerFeature = 4096
	TextServerFeatureUnicodeIdentifiers TextServerFeature = 8192
	TextServerFeatureUnicodeSecurity TextServerFeature = 16384
)

type TextServerContourPointTag int64

const (
	TextServerContourCurveTagOn TextServerContourPointTag = 1
	TextServerContourCurveTagOffConic TextServerContourPointTag = 0
	TextServerContourCurveTagOffCubic TextServerContourPointTag = 2
)

type TextServerSpacingType int64

const (
	TextServerSpacingGlyph TextServerSpacingType = 0
	TextServerSpacingSpace TextServerSpacingType = 1
	TextServerSpacingTop TextServerSpacingType = 2
	TextServerSpacingBottom TextServerSpacingType = 3
	TextServerSpacingMax TextServerSpacingType = 4
)

type TextServerFontStyle int64

const (
	TextServerFontBold TextServerFontStyle = 1
	TextServerFontItalic TextServerFontStyle = 2
	TextServerFontFixedWidth TextServerFontStyle = 4
)

type TextServerStructuredTextParser int64

const (
	TextServerStructuredTextDefault TextServerStructuredTextParser = 0
	TextServerStructuredTextUri TextServerStructuredTextParser = 1
	TextServerStructuredTextFile TextServerStructuredTextParser = 2
	TextServerStructuredTextEmail TextServerStructuredTextParser = 3
	TextServerStructuredTextList TextServerStructuredTextParser = 4
	TextServerStructuredTextNone TextServerStructuredTextParser = 5
	TextServerStructuredTextCustom TextServerStructuredTextParser = 6
)
func (gdClass TextServer) HasFeature(feature TextServerFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[0], feature) }
func (gdClass TextServer) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[1]) }
func (gdClass TextServer) GetFeatures() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[2]) }
func (gdClass TextServer) LoadSupportData(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[3], filename) }
func (gdClass TextServer) GetSupportDataFilename() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[4]) }
func (gdClass TextServer) GetSupportDataInfo() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[5]) }
func (gdClass TextServer) SaveSupportData(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[6], filename) }
func (gdClass TextServer) IsLocaleRightToLeft(locale string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[7], locale) }
func (gdClass TextServer) NameToTag(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[8], name) }
func (gdClass TextServer) TagToName(tag int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[9], tag) }
func (gdClass TextServer) Has(rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[10], rid) }
func (gdClass TextServer) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[11], rid) }
func (gdClass TextServer) CreateFont() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[12]) }
func (gdClass TextServer) FontSetData(font_rid RID, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[13], font_rid, data) }
func (gdClass TextServer) FontSetFaceIndex(font_rid RID, face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[14], font_rid, face_index) }
func (gdClass TextServer) FontGetFaceIndex(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[15], font_rid) }
func (gdClass TextServer) FontGetFaceCount(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[16], font_rid) }
func (gdClass TextServer) FontSetStyle(font_rid RID, style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[17], font_rid, style) }
func (gdClass TextServer) FontGetStyle(font_rid RID) TextServerFontStyle { return gdnative.Return[TextServerFontStyle](gdnative.Object(gdClass), methodTextServer[18], font_rid) }
func (gdClass TextServer) FontSetName(font_rid RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[19], font_rid, name) }
func (gdClass TextServer) FontGetName(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[20], font_rid) }
func (gdClass TextServer) FontSetStyleName(font_rid RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[21], font_rid, name) }
func (gdClass TextServer) FontGetStyleName(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[22], font_rid) }
func (gdClass TextServer) FontSetAntialiased(font_rid RID, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[23], font_rid, antialiased) }
func (gdClass TextServer) FontIsAntialiased(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[24], font_rid) }
func (gdClass TextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[25], font_rid, generate_mipmaps) }
func (gdClass TextServer) FontGetGenerateMipmaps(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[26], font_rid) }
func (gdClass TextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[27], font_rid, msdf) }
func (gdClass TextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[28], font_rid) }
func (gdClass TextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[29], font_rid, msdf_pixel_range) }
func (gdClass TextServer) FontGetMsdfPixelRange(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[30], font_rid) }
func (gdClass TextServer) FontSetMsdfSize(font_rid RID, msdf_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[31], font_rid, msdf_size) }
func (gdClass TextServer) FontGetMsdfSize(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[32], font_rid) }
func (gdClass TextServer) FontSetFixedSize(font_rid RID, fixed_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[33], font_rid, fixed_size) }
func (gdClass TextServer) FontGetFixedSize(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[34], font_rid) }
func (gdClass TextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[35], font_rid, force_autohinter) }
func (gdClass TextServer) FontIsForceAutohinter(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[36], font_rid) }
func (gdClass TextServer) FontSetHinting(font_rid RID, hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[37], font_rid, hinting) }
func (gdClass TextServer) FontGetHinting(font_rid RID) TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodTextServer[38], font_rid) }
func (gdClass TextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[39], font_rid, subpixel_positioning) }
func (gdClass TextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodTextServer[40], font_rid) }
func (gdClass TextServer) FontSetEmbolden(font_rid RID, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[41], font_rid, strength) }
func (gdClass TextServer) FontGetEmbolden(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[42], font_rid) }
func (gdClass TextServer) FontSetTransform(font_rid RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[43], font_rid, transform) }
func (gdClass TextServer) FontGetTransform(font_rid RID) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodTextServer[44], font_rid) }
func (gdClass TextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[45], font_rid, variation_coordinates) }
func (gdClass TextServer) FontGetVariationCoordinates(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[46], font_rid) }
func (gdClass TextServer) FontSetOversampling(font_rid RID, oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[47], font_rid, oversampling) }
func (gdClass TextServer) FontGetOversampling(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[48], font_rid) }
func (gdClass TextServer) FontGetSizeCacheList(font_rid RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[49], font_rid) }
func (gdClass TextServer) FontClearSizeCache(font_rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[50], font_rid) }
func (gdClass TextServer) FontRemoveSizeCache(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[51], font_rid, size) }
func (gdClass TextServer) FontSetAscent(font_rid RID, size int64, ascent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[52], font_rid, size, ascent) }
func (gdClass TextServer) FontGetAscent(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[53], font_rid, size) }
func (gdClass TextServer) FontSetDescent(font_rid RID, size int64, descent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[54], font_rid, size, descent) }
func (gdClass TextServer) FontGetDescent(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[55], font_rid, size) }
func (gdClass TextServer) FontSetUnderlinePosition(font_rid RID, size int64, underline_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[56], font_rid, size, underline_position) }
func (gdClass TextServer) FontGetUnderlinePosition(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[57], font_rid, size) }
func (gdClass TextServer) FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[58], font_rid, size, underline_thickness) }
func (gdClass TextServer) FontGetUnderlineThickness(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[59], font_rid, size) }
func (gdClass TextServer) FontSetScale(font_rid RID, size int64, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[60], font_rid, size, scale) }
func (gdClass TextServer) FontGetScale(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[61], font_rid, size) }
func (gdClass TextServer) FontGetTextureCount(font_rid RID, size Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[62], font_rid, size) }
func (gdClass TextServer) FontClearTextures(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[63], font_rid, size) }
func (gdClass TextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[64], font_rid, size, texture_index) }
func (gdClass TextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[65], font_rid, size, texture_index, image) }
func (gdClass TextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextServer[66], font_rid, size, texture_index) }
func (gdClass TextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset []int32)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[67], font_rid, size, texture_index, offset) }
func (gdClass TextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[68], font_rid, size, texture_index) }
func (gdClass TextServer) FontGetGlyphList(font_rid RID, size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[69], font_rid, size) }
func (gdClass TextServer) FontClearGlyphs(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[70], font_rid, size) }
func (gdClass TextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[71], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[72], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[73], font_rid, size, glyph, advance) }
func (gdClass TextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[74], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[75], font_rid, size, glyph, offset) }
func (gdClass TextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[76], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[77], font_rid, size, glyph, gl_size) }
func (gdClass TextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServer[78], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[79], font_rid, size, glyph, uv_rect) }
func (gdClass TextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[80], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[81], font_rid, size, glyph, texture_idx) }
func (gdClass TextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[82], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[83], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphContours(font RID, size int64, index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[84], font, size, index) }
func (gdClass TextServer) FontGetKerningList(font_rid RID, size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[85], font_rid, size) }
func (gdClass TextServer) FontClearKerningMap(font_rid RID, size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[86], font_rid, size) }
func (gdClass TextServer) FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[87], font_rid, size, glyph_pair) }
func (gdClass TextServer) FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[88], font_rid, size, glyph_pair, kerning) }
func (gdClass TextServer) FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[89], font_rid, size, glyph_pair) }
func (gdClass TextServer) FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[90], font_rid, size, char, variation_selector) }
func (gdClass TextServer) FontHasChar(font_rid RID, char int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[91], font_rid, char) }
func (gdClass TextServer) FontGetSupportedChars(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[92], font_rid) }
func (gdClass TextServer) FontRenderRange(font_rid RID, size Vector2i, start int64, end int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[93], font_rid, size, start, end) }
func (gdClass TextServer) FontRenderGlyph(font_rid RID, size Vector2i, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[94], font_rid, size, index) }
func (gdClass TextServer) FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[95], font_rid, canvas, size, pos, index, color) }
func (gdClass TextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[96], font_rid, canvas, size, outline_size, pos, index, color) }
func (gdClass TextServer) FontIsLanguageSupported(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[97], font_rid, language) }
func (gdClass TextServer) FontSetLanguageSupportOverride(font_rid RID, language string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[98], font_rid, language, supported) }
func (gdClass TextServer) FontGetLanguageSupportOverride(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[99], font_rid, language) }
func (gdClass TextServer) FontRemoveLanguageSupportOverride(font_rid RID, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[100], font_rid, language) }
func (gdClass TextServer) FontGetLanguageSupportOverrides(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServer[101], font_rid) }
func (gdClass TextServer) FontIsScriptSupported(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[102], font_rid, script) }
func (gdClass TextServer) FontSetScriptSupportOverride(font_rid RID, script string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[103], font_rid, script, supported) }
func (gdClass TextServer) FontGetScriptSupportOverride(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[104], font_rid, script) }
func (gdClass TextServer) FontRemoveScriptSupportOverride(font_rid RID, script string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[105], font_rid, script) }
func (gdClass TextServer) FontGetScriptSupportOverrides(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServer[106], font_rid) }
func (gdClass TextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[107], font_rid, overrides) }
func (gdClass TextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[108], font_rid) }
func (gdClass TextServer) FontSupportedFeatureList(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[109], font_rid) }
func (gdClass TextServer) FontSupportedVariationList(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[110], font_rid) }
func (gdClass TextServer) FontGetGlobalOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[111]) }
func (gdClass TextServer) FontSetGlobalOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[112], oversampling) }
func (gdClass TextServer) GetHexCodeBoxSize(size int64, index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[113], size, index) }
func (gdClass TextServer) DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[114], canvas, size, pos, index, color) }
func (gdClass TextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[115], direction, orientation) }
func (gdClass TextServer) ShapedTextClear(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[116], rid) }
func (gdClass TextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[117], shaped, direction) }
func (gdClass TextServer) ShapedTextGetDirection(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[118], shaped) }
func (gdClass TextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[119], shaped) }
func (gdClass TextServer) ShapedTextSetBidiOverride(shaped RID, override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[120], shaped, override) }
func (gdClass TextServer) ShapedTextSetCustomPunctuation(shaped RID, punct string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[121], shaped, punct) }
func (gdClass TextServer) ShapedTextGetCustomPunctuation(shaped RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[122], shaped) }
func (gdClass TextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[123], shaped, orientation) }
func (gdClass TextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextServer[124], shaped) }
func (gdClass TextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[125], shaped, enabled) }
func (gdClass TextServer) ShapedTextGetPreserveInvalid(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[126], shaped) }
func (gdClass TextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[127], shaped, enabled) }
func (gdClass TextServer) ShapedTextGetPreserveControl(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[128], shaped) }
func (gdClass TextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[129], shaped, spacing, value) }
func (gdClass TextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[130], shaped, spacing) }
func (gdClass TextServer) ShapedTextAddString(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[131], shaped, text, fonts, size, opentype_features, language, meta) }
func (gdClass TextServer) ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[132], shaped, key, size, inline_align, length) }
func (gdClass TextServer) ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[133], shaped, key, size, inline_align) }
func (gdClass TextServer) ShapedGetSpanCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[134], shaped) }
func (gdClass TextServer) ShapedGetSpanMeta(shaped RID, index int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTextServer[135], shaped, index) }
func (gdClass TextServer) ShapedSetSpanUpdateFont(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[136], shaped, index, fonts, size, opentype_features) }
func (gdClass TextServer) ShapedTextSubstr(shaped RID, start int64, length int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[137], shaped, start, length) }
func (gdClass TextServer) ShapedTextGetParent(shaped RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[138], shaped) }
func (gdClass TextServer) ShapedTextFitToWidth(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[139], shaped, width, jst_flags) }
func (gdClass TextServer) ShapedTextTabAlign(shaped RID, tab_stops []float32) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[140], shaped, tab_stops) }
func (gdClass TextServer) ShapedTextShape(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[141], shaped) }
func (gdClass TextServer) ShapedTextIsReady(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[142], shaped) }
func (gdClass TextServer) ShapedTextGetGlyphs(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[143], shaped) }
func (gdClass TextServer) ShapedTextSortLogical(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[144], shaped) }
func (gdClass TextServer) ShapedTextGetGlyphCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[145], shaped) }
func (gdClass TextServer) ShapedTextGetRange(shaped RID) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextServer[146], shaped) }
func (gdClass TextServer) ShapedTextGetLineBreaksAdv(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[147], shaped, width, start, once, break_flags) }
func (gdClass TextServer) ShapedTextGetLineBreaks(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[148], shaped, width, start, break_flags) }
func (gdClass TextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[149], shaped, grapheme_flags) }
func (gdClass TextServer) ShapedTextGetTrimPos(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[150], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisPos(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[151], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphs(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[152], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[153], shaped) }
func (gdClass TextServer) ShapedTextOverrunTrimToWidth(shaped RID, width float64, overrun_trim_flags TextServerTextOverrunFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[154], shaped, width, overrun_trim_flags) }
func (gdClass TextServer) ShapedTextGetObjects(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[155], shaped) }
func (gdClass TextServer) ShapedTextGetObjectRect(shaped RID, key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServer[156], shaped, key) }
func (gdClass TextServer) ShapedTextGetSize(shaped RID) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[157], shaped) }
func (gdClass TextServer) ShapedTextGetAscent(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[158], shaped) }
func (gdClass TextServer) ShapedTextGetDescent(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[159], shaped) }
func (gdClass TextServer) ShapedTextGetWidth(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[160], shaped) }
func (gdClass TextServer) ShapedTextGetUnderlinePosition(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[161], shaped) }
func (gdClass TextServer) ShapedTextGetUnderlineThickness(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[162], shaped) }
func (gdClass TextServer) ShapedTextGetCarets(shaped RID, position int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[163], shaped, position) }
func (gdClass TextServer) ShapedTextGetSelection(shaped RID, start int64, end int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTextServer[164], shaped, start, end) }
func (gdClass TextServer) ShapedTextHitTestGrapheme(shaped RID, coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[165], shaped, coords) }
func (gdClass TextServer) ShapedTextHitTestPosition(shaped RID, coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[166], shaped, coords) }
func (gdClass TextServer) ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[167], shaped, pos) }
func (gdClass TextServer) ShapedTextNextGraphemePos(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[168], shaped, pos) }
func (gdClass TextServer) ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[169], shaped, pos) }
func (gdClass TextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[170], shaped, canvas, pos, clip_l, clip_r, color) }
func (gdClass TextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[171], shaped, canvas, pos, clip_l, clip_r, outline_size, color) }
func (gdClass TextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[172], shaped, start, end) }
func (gdClass TextServer) FormatNumber(number string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[173], number, language) }
func (gdClass TextServer) ParseNumber(number string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[174], number, language) }
func (gdClass TextServer) PercentSign(language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[175], language) }
func (gdClass TextServer) StringGetWordBreaks(s string, language string) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[176], s, language) }
func (gdClass TextServer) IsConfusable(s string, dict []string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[177], s, dict) }
func (gdClass TextServer) SpoofCheck(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[178], s) }
func (gdClass TextServer) StripDiacritics(s string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[179], s) }
func (gdClass TextServer) IsValidIdentifier(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[180], s) }
func (gdClass TextServer) StringToUpper(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[181], s, language) }
func (gdClass TextServer) StringToLower(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[182], s, language) }
func (gdClass TextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[183], parser_type, args, text) }

type TextServerAdvanced gdnative.Object

var methodTextServerAdvanced [0]gdnative.Method

type TextServerDummy gdnative.Object

var methodTextServerDummy [0]gdnative.Method

type TextServerExtension gdnative.Object

var methodTextServerExtension [187]gdnative.Method
func (gdClass TextServerExtension) HasFeatureImplementation(feature TextServerFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[0], feature) }
func (gdClass TextServerExtension) GetNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[1]) }
func (gdClass TextServerExtension) GetFeaturesImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[2]) }
func (gdClass TextServerExtension) FreeRidImplementation(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[3], rid) }
func (gdClass TextServerExtension) HasImplementation(rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[4], rid) }
func (gdClass TextServerExtension) LoadSupportDataImplementation(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[5], filename) }
func (gdClass TextServerExtension) GetSupportDataFilenameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[6]) }
func (gdClass TextServerExtension) GetSupportDataInfoImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[7]) }
func (gdClass TextServerExtension) SaveSupportDataImplementation(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[8], filename) }
func (gdClass TextServerExtension) IsLocaleRightToLeftImplementation(locale string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[9], locale) }
func (gdClass TextServerExtension) NameToTagImplementation(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[10], name) }
func (gdClass TextServerExtension) TagToNameImplementation(tag int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[11], tag) }
func (gdClass TextServerExtension) CreateFontImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServerExtension[12]) }
func (gdClass TextServerExtension) FontSetDataImplementation(font_rid RID, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[13], font_rid, data) }
func (gdClass TextServerExtension) FontSetDataPtrImplementation(font_rid RID, data_ptr []byte, data_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[14], font_rid, data_ptr, data_size) }
func (gdClass TextServerExtension) FontSetFaceIndexImplementation(font_rid RID, face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[15], font_rid, face_index) }
func (gdClass TextServerExtension) FontGetFaceIndexImplementation(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[16], font_rid) }
func (gdClass TextServerExtension) FontGetFaceCountImplementation(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[17], font_rid) }
func (gdClass TextServerExtension) FontSetStyleImplementation(font_rid RID, style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[18], font_rid, style) }
func (gdClass TextServerExtension) FontGetStyleImplementation(font_rid RID) TextServerFontStyle { return gdnative.Return[TextServerFontStyle](gdnative.Object(gdClass), methodTextServerExtension[19], font_rid) }
func (gdClass TextServerExtension) FontSetNameImplementation(font_rid RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[20], font_rid, name) }
func (gdClass TextServerExtension) FontGetNameImplementation(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[21], font_rid) }
func (gdClass TextServerExtension) FontSetStyleNameImplementation(font_rid RID, name_style string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[22], font_rid, name_style) }
func (gdClass TextServerExtension) FontGetStyleNameImplementation(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[23], font_rid) }
func (gdClass TextServerExtension) FontSetAntialiasedImplementation(font_rid RID, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[24], font_rid, antialiased) }
func (gdClass TextServerExtension) FontIsAntialiasedImplementation(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[25], font_rid) }
func (gdClass TextServerExtension) FontSetGenerateMipmapsImplementation(font_rid RID, generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[26], font_rid, generate_mipmaps) }
func (gdClass TextServerExtension) FontGetGenerateMipmapsImplementation(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[27], font_rid) }
func (gdClass TextServerExtension) FontSetMultichannelSignedDistanceFieldImplementation(font_rid RID, msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[28], font_rid, msdf) }
func (gdClass TextServerExtension) FontIsMultichannelSignedDistanceFieldImplementation(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[29], font_rid) }
func (gdClass TextServerExtension) FontSetMsdfPixelRangeImplementation(font_rid RID, msdf_pixel_range int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[30], font_rid, msdf_pixel_range) }
func (gdClass TextServerExtension) FontGetMsdfPixelRangeImplementation(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[31], font_rid) }
func (gdClass TextServerExtension) FontSetMsdfSizeImplementation(font_rid RID, msdf_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[32], font_rid, msdf_size) }
func (gdClass TextServerExtension) FontGetMsdfSizeImplementation(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[33], font_rid) }
func (gdClass TextServerExtension) FontSetFixedSizeImplementation(font_rid RID, fixed_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[34], font_rid, fixed_size) }
func (gdClass TextServerExtension) FontGetFixedSizeImplementation(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[35], font_rid) }
func (gdClass TextServerExtension) FontSetForceAutohinterImplementation(font_rid RID, force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[36], font_rid, force_autohinter) }
func (gdClass TextServerExtension) FontIsForceAutohinterImplementation(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[37], font_rid) }
func (gdClass TextServerExtension) FontSetHintingImplementation(font_rid RID, hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[38], font_rid, hinting) }
func (gdClass TextServerExtension) FontGetHintingImplementation(font_rid RID) TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodTextServerExtension[39], font_rid) }
func (gdClass TextServerExtension) FontSetSubpixelPositioningImplementation(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[40], font_rid, subpixel_positioning) }
func (gdClass TextServerExtension) FontGetSubpixelPositioningImplementation(font_rid RID) TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodTextServerExtension[41], font_rid) }
func (gdClass TextServerExtension) FontSetEmboldenImplementation(font_rid RID, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[42], font_rid, strength) }
func (gdClass TextServerExtension) FontGetEmboldenImplementation(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[43], font_rid) }
func (gdClass TextServerExtension) FontSetTransformImplementation(font_rid RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[44], font_rid, transform) }
func (gdClass TextServerExtension) FontGetTransformImplementation(font_rid RID) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodTextServerExtension[45], font_rid) }
func (gdClass TextServerExtension) FontSetVariationCoordinatesImplementation(font_rid RID, variation_coordinates Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[46], font_rid, variation_coordinates) }
func (gdClass TextServerExtension) FontGetVariationCoordinatesImplementation(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServerExtension[47], font_rid) }
func (gdClass TextServerExtension) FontSetOversamplingImplementation(font_rid RID, oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[48], font_rid, oversampling) }
func (gdClass TextServerExtension) FontGetOversamplingImplementation(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[49], font_rid) }
func (gdClass TextServerExtension) FontGetSizeCacheListImplementation(font_rid RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerExtension[50], font_rid) }
func (gdClass TextServerExtension) FontClearSizeCacheImplementation(font_rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[51], font_rid) }
func (gdClass TextServerExtension) FontRemoveSizeCacheImplementation(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[52], font_rid, size) }
func (gdClass TextServerExtension) FontSetAscentImplementation(font_rid RID, size int64, ascent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[53], font_rid, size, ascent) }
func (gdClass TextServerExtension) FontGetAscentImplementation(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[54], font_rid, size) }
func (gdClass TextServerExtension) FontSetDescentImplementation(font_rid RID, size int64, descent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[55], font_rid, size, descent) }
func (gdClass TextServerExtension) FontGetDescentImplementation(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[56], font_rid, size) }
func (gdClass TextServerExtension) FontSetUnderlinePositionImplementation(font_rid RID, size int64, underline_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[57], font_rid, size, underline_position) }
func (gdClass TextServerExtension) FontGetUnderlinePositionImplementation(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[58], font_rid, size) }
func (gdClass TextServerExtension) FontSetUnderlineThicknessImplementation(font_rid RID, size int64, underline_thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[59], font_rid, size, underline_thickness) }
func (gdClass TextServerExtension) FontGetUnderlineThicknessImplementation(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[60], font_rid, size) }
func (gdClass TextServerExtension) FontSetScaleImplementation(font_rid RID, size int64, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[61], font_rid, size, scale) }
func (gdClass TextServerExtension) FontGetScaleImplementation(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[62], font_rid, size) }
func (gdClass TextServerExtension) FontGetTextureCountImplementation(font_rid RID, size Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[63], font_rid, size) }
func (gdClass TextServerExtension) FontClearTexturesImplementation(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[64], font_rid, size) }
func (gdClass TextServerExtension) FontRemoveTextureImplementation(font_rid RID, size Vector2i, texture_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[65], font_rid, size, texture_index) }
func (gdClass TextServerExtension) FontSetTextureImageImplementation(font_rid RID, size Vector2i, texture_index int64, image Image)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[66], font_rid, size, texture_index, image) }
func (gdClass TextServerExtension) FontGetTextureImageImplementation(font_rid RID, size Vector2i, texture_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextServerExtension[67], font_rid, size, texture_index) }
func (gdClass TextServerExtension) FontSetTextureOffsetsImplementation(font_rid RID, size Vector2i, texture_index int64, offset []int32)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[68], font_rid, size, texture_index, offset) }
func (gdClass TextServerExtension) FontGetTextureOffsetsImplementation(font_rid RID, size Vector2i, texture_index int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServerExtension[69], font_rid, size, texture_index) }
func (gdClass TextServerExtension) FontGetGlyphListImplementation(font_rid RID, size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerExtension[70], font_rid, size) }
func (gdClass TextServerExtension) FontClearGlyphsImplementation(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[71], font_rid, size) }
func (gdClass TextServerExtension) FontRemoveGlyphImplementation(font_rid RID, size Vector2i, glyph int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[72], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontGetGlyphAdvanceImplementation(font_rid RID, size int64, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[73], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontSetGlyphAdvanceImplementation(font_rid RID, size int64, glyph int64, advance Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[74], font_rid, size, glyph, advance) }
func (gdClass TextServerExtension) FontGetGlyphOffsetImplementation(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[75], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontSetGlyphOffsetImplementation(font_rid RID, size Vector2i, glyph int64, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[76], font_rid, size, glyph, offset) }
func (gdClass TextServerExtension) FontGetGlyphSizeImplementation(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[77], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontSetGlyphSizeImplementation(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[78], font_rid, size, glyph, gl_size) }
func (gdClass TextServerExtension) FontGetGlyphUvRectImplementation(font_rid RID, size Vector2i, glyph int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServerExtension[79], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontSetGlyphUvRectImplementation(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[80], font_rid, size, glyph, uv_rect) }
func (gdClass TextServerExtension) FontGetGlyphTextureIdxImplementation(font_rid RID, size Vector2i, glyph int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[81], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontSetGlyphTextureIdxImplementation(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[82], font_rid, size, glyph, texture_idx) }
func (gdClass TextServerExtension) FontGetGlyphTextureRidImplementation(font_rid RID, size Vector2i, glyph int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServerExtension[83], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontGetGlyphTextureSizeImplementation(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[84], font_rid, size, glyph) }
func (gdClass TextServerExtension) FontGetGlyphContoursImplementation(font_rid RID, size int64, index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServerExtension[85], font_rid, size, index) }
func (gdClass TextServerExtension) FontGetKerningListImplementation(font_rid RID, size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerExtension[86], font_rid, size) }
func (gdClass TextServerExtension) FontClearKerningMapImplementation(font_rid RID, size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[87], font_rid, size) }
func (gdClass TextServerExtension) FontRemoveKerningImplementation(font_rid RID, size int64, glyph_pair Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[88], font_rid, size, glyph_pair) }
func (gdClass TextServerExtension) FontSetKerningImplementation(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[89], font_rid, size, glyph_pair, kerning) }
func (gdClass TextServerExtension) FontGetKerningImplementation(font_rid RID, size int64, glyph_pair Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[90], font_rid, size, glyph_pair) }
func (gdClass TextServerExtension) FontGetGlyphIndexImplementation(font_rid RID, size int64, char int64, variation_selector int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[91], font_rid, size, char, variation_selector) }
func (gdClass TextServerExtension) FontHasCharImplementation(font_rid RID, char int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[92], font_rid, char) }
func (gdClass TextServerExtension) FontGetSupportedCharsImplementation(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[93], font_rid) }
func (gdClass TextServerExtension) FontRenderRangeImplementation(font_rid RID, size Vector2i, start int64, end int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[94], font_rid, size, start, end) }
func (gdClass TextServerExtension) FontRenderGlyphImplementation(font_rid RID, size Vector2i, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[95], font_rid, size, index) }
func (gdClass TextServerExtension) FontDrawGlyphImplementation(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[96], font_rid, canvas, size, pos, index, color) }
func (gdClass TextServerExtension) FontDrawGlyphOutlineImplementation(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[97], font_rid, canvas, size, outline_size, pos, index, color) }
func (gdClass TextServerExtension) FontIsLanguageSupportedImplementation(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[98], font_rid, language) }
func (gdClass TextServerExtension) FontSetLanguageSupportOverrideImplementation(font_rid RID, language string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[99], font_rid, language, supported) }
func (gdClass TextServerExtension) FontGetLanguageSupportOverrideImplementation(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[100], font_rid, language) }
func (gdClass TextServerExtension) FontRemoveLanguageSupportOverrideImplementation(font_rid RID, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[101], font_rid, language) }
func (gdClass TextServerExtension) FontGetLanguageSupportOverridesImplementation(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServerExtension[102], font_rid) }
func (gdClass TextServerExtension) FontIsScriptSupportedImplementation(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[103], font_rid, script) }
func (gdClass TextServerExtension) FontSetScriptSupportOverrideImplementation(font_rid RID, script string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[104], font_rid, script, supported) }
func (gdClass TextServerExtension) FontGetScriptSupportOverrideImplementation(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[105], font_rid, script) }
func (gdClass TextServerExtension) FontRemoveScriptSupportOverrideImplementation(font_rid RID, script string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[106], font_rid, script) }
func (gdClass TextServerExtension) FontGetScriptSupportOverridesImplementation(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServerExtension[107], font_rid) }
func (gdClass TextServerExtension) FontSetOpentypeFeatureOverridesImplementation(font_rid RID, overrides Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[108], font_rid, overrides) }
func (gdClass TextServerExtension) FontGetOpentypeFeatureOverridesImplementation(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServerExtension[109], font_rid) }
func (gdClass TextServerExtension) FontSupportedFeatureListImplementation(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServerExtension[110], font_rid) }
func (gdClass TextServerExtension) FontSupportedVariationListImplementation(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServerExtension[111], font_rid) }
func (gdClass TextServerExtension) FontGetGlobalOversamplingImplementation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[112]) }
func (gdClass TextServerExtension) FontSetGlobalOversamplingImplementation(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[113], oversampling) }
func (gdClass TextServerExtension) GetHexCodeBoxSizeImplementation(size int64, index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[114], size, index) }
func (gdClass TextServerExtension) DrawHexCodeBoxImplementation(canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[115], canvas, size, pos, index, color) }
func (gdClass TextServerExtension) CreateShapedTextImplementation(direction TextServerDirection, orientation TextServerOrientation) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServerExtension[116], direction, orientation) }
func (gdClass TextServerExtension) ShapedTextClearImplementation(shaped RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[117], shaped) }
func (gdClass TextServerExtension) ShapedTextSetDirectionImplementation(shaped RID, direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[118], shaped, direction) }
func (gdClass TextServerExtension) ShapedTextGetDirectionImplementation(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServerExtension[119], shaped) }
func (gdClass TextServerExtension) ShapedTextGetInferredDirectionImplementation(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServerExtension[120], shaped) }
func (gdClass TextServerExtension) ShapedTextSetBidiOverrideImplementation(shaped RID, override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[121], shaped, override) }
func (gdClass TextServerExtension) ShapedTextSetCustomPunctuationImplementation(shaped RID, punct string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[122], shaped, punct) }
func (gdClass TextServerExtension) ShapedTextGetCustomPunctuationImplementation(shaped RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[123], shaped) }
func (gdClass TextServerExtension) ShapedTextSetOrientationImplementation(shaped RID, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[124], shaped, orientation) }
func (gdClass TextServerExtension) ShapedTextGetOrientationImplementation(shaped RID) TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextServerExtension[125], shaped) }
func (gdClass TextServerExtension) ShapedTextSetPreserveInvalidImplementation(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[126], shaped, enabled) }
func (gdClass TextServerExtension) ShapedTextGetPreserveInvalidImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[127], shaped) }
func (gdClass TextServerExtension) ShapedTextSetPreserveControlImplementation(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[128], shaped, enabled) }
func (gdClass TextServerExtension) ShapedTextGetPreserveControlImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[129], shaped) }
func (gdClass TextServerExtension) ShapedTextSetSpacingImplementation(shaped RID, spacing TextServerSpacingType, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[130], shaped, spacing, value) }
func (gdClass TextServerExtension) ShapedTextGetSpacingImplementation(shaped RID, spacing TextServerSpacingType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[131], shaped, spacing) }
func (gdClass TextServerExtension) ShapedTextAddStringImplementation(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[132], shaped, text, fonts, size, opentype_features, language, meta) }
func (gdClass TextServerExtension) ShapedTextAddObjectImplementation(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[133], shaped, key, size, inline_align, length) }
func (gdClass TextServerExtension) ShapedTextResizeObjectImplementation(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[134], shaped, key, size, inline_align) }
func (gdClass TextServerExtension) ShapedGetSpanCountImplementation(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[135], shaped) }
func (gdClass TextServerExtension) ShapedGetSpanMetaImplementation(shaped RID, index int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTextServerExtension[136], shaped, index) }
func (gdClass TextServerExtension) ShapedSetSpanUpdateFontImplementation(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[137], shaped, index, fonts, size, opentype_features) }
func (gdClass TextServerExtension) ShapedTextSubstrImplementation(shaped RID, start int64, length int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServerExtension[138], shaped, start, length) }
func (gdClass TextServerExtension) ShapedTextGetParentImplementation(shaped RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServerExtension[139], shaped) }
func (gdClass TextServerExtension) ShapedTextFitToWidthImplementation(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[140], shaped, width, jst_flags) }
func (gdClass TextServerExtension) ShapedTextTabAlignImplementation(shaped RID, tab_stops []float32) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[141], shaped, tab_stops) }
func (gdClass TextServerExtension) ShapedTextShapeImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[142], shaped) }
func (gdClass TextServerExtension) ShapedTextUpdateBreaksImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[143], shaped) }
func (gdClass TextServerExtension) ShapedTextUpdateJustificationOpsImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[144], shaped) }
func (gdClass TextServerExtension) ShapedTextIsReadyImplementation(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[145], shaped) }
func (gdClass TextServerExtension) ShapedTextGetGlyphsImplementation(shaped RID) * Glyph { return gdnative.Return[* Glyph](gdnative.Object(gdClass), methodTextServerExtension[146], shaped) }
func (gdClass TextServerExtension) ShapedTextSortLogicalImplementation(shaped RID) * Glyph { return gdnative.Return[* Glyph](gdnative.Object(gdClass), methodTextServerExtension[147], shaped) }
func (gdClass TextServerExtension) ShapedTextGetGlyphCountImplementation(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[148], shaped) }
func (gdClass TextServerExtension) ShapedTextGetRangeImplementation(shaped RID) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextServerExtension[149], shaped) }
func (gdClass TextServerExtension) ShapedTextGetLineBreaksAdvImplementation(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServerExtension[150], shaped, width, start, once, break_flags) }
func (gdClass TextServerExtension) ShapedTextGetLineBreaksImplementation(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServerExtension[151], shaped, width, start, break_flags) }
func (gdClass TextServerExtension) ShapedTextGetWordBreaksImplementation(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServerExtension[152], shaped, grapheme_flags) }
func (gdClass TextServerExtension) ShapedTextGetTrimPosImplementation(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[153], shaped) }
func (gdClass TextServerExtension) ShapedTextGetEllipsisPosImplementation(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[154], shaped) }
func (gdClass TextServerExtension) ShapedTextGetEllipsisGlyphCountImplementation(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[155], shaped) }
func (gdClass TextServerExtension) ShapedTextGetEllipsisGlyphsImplementation(shaped RID) * Glyph { return gdnative.Return[* Glyph](gdnative.Object(gdClass), methodTextServerExtension[156], shaped) }
func (gdClass TextServerExtension) ShapedTextOverrunTrimToWidthImplementation(shaped RID, width float64, trim_flags TextServerTextOverrunFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[157], shaped, width, trim_flags) }
func (gdClass TextServerExtension) ShapedTextGetObjectsImplementation(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerExtension[158], shaped) }
func (gdClass TextServerExtension) ShapedTextGetObjectRectImplementation(shaped RID, key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServerExtension[159], shaped, key) }
func (gdClass TextServerExtension) ShapedTextGetSizeImplementation(shaped RID) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[160], shaped) }
func (gdClass TextServerExtension) ShapedTextGetAscentImplementation(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[161], shaped) }
func (gdClass TextServerExtension) ShapedTextGetDescentImplementation(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[162], shaped) }
func (gdClass TextServerExtension) ShapedTextGetWidthImplementation(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[163], shaped) }
func (gdClass TextServerExtension) ShapedTextGetUnderlinePositionImplementation(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[164], shaped) }
func (gdClass TextServerExtension) ShapedTextGetUnderlineThicknessImplementation(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServerExtension[165], shaped) }
func (gdClass TextServerExtension) ShapedTextGetDominantDirectionInRangeImplementation(shaped RID, start int64, end int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[166], shaped, start, end) }
func (gdClass TextServerExtension) ShapedTextGetCaretsImplementation(shaped RID, position int64, caret *CaretInfo)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[167], shaped, position, caret) }
func (gdClass TextServerExtension) ShapedTextGetSelectionImplementation(shaped RID, start int64, end int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTextServerExtension[168], shaped, start, end) }
func (gdClass TextServerExtension) ShapedTextHitTestGraphemeImplementation(shaped RID, coord float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[169], shaped, coord) }
func (gdClass TextServerExtension) ShapedTextHitTestPositionImplementation(shaped RID, coord float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[170], shaped, coord) }
func (gdClass TextServerExtension) ShapedTextDrawImplementation(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[171], shaped, canvas, pos, clip_l, clip_r, color) }
func (gdClass TextServerExtension) ShapedTextDrawOutlineImplementation(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerExtension[172], shaped, canvas, pos, clip_l, clip_r, outline_size, color) }
func (gdClass TextServerExtension) ShapedTextGetGraphemeBoundsImplementation(shaped RID, pos int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServerExtension[173], shaped, pos) }
func (gdClass TextServerExtension) ShapedTextNextGraphemePosImplementation(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[174], shaped, pos) }
func (gdClass TextServerExtension) ShapedTextPrevGraphemePosImplementation(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[175], shaped, pos) }
func (gdClass TextServerExtension) FormatNumberImplementation(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[176], s, language) }
func (gdClass TextServerExtension) ParseNumberImplementation(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[177], s, language) }
func (gdClass TextServerExtension) PercentSignImplementation(language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[178], language) }
func (gdClass TextServerExtension) StripDiacriticsImplementation(s string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[179], s) }
func (gdClass TextServerExtension) IsValidIdentifierImplementation(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[180], s) }
func (gdClass TextServerExtension) StringGetWordBreaksImplementation(s string, language string) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServerExtension[181], s, language) }
func (gdClass TextServerExtension) IsConfusableImplementation(s string, dict []string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerExtension[182], s, dict) }
func (gdClass TextServerExtension) SpoofCheckImplementation(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServerExtension[183], s) }
func (gdClass TextServerExtension) StringToUpperImplementation(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[184], s, language) }
func (gdClass TextServerExtension) StringToLowerImplementation(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServerExtension[185], s, language) }
func (gdClass TextServerExtension) ParseStructuredTextImplementation(parser_type TextServerStructuredTextParser, args Array, text string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerExtension[186], parser_type, args, text) }

type TextServerManager gdnative.Object

var methodTextServerManager [8]gdnative.Method
func (gdClass TextServerManager) AddInterface(intf TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[0], intf) }
func (gdClass TextServerManager) GetInterfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerManager[1]) }
func (gdClass TextServerManager) RemoveInterface(intf TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[2], intf) }
func (gdClass TextServerManager) GetInterface(idx int64) TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[3], idx) }
func (gdClass TextServerManager) GetInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerManager[4]) }
func (gdClass TextServerManager) FindInterface(name string) TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[5], name) }
func (gdClass TextServerManager) SetPrimaryInterface(index TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[6], index) }
func (gdClass TextServerManager) GetPrimaryInterface() TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[7]) }

type Texture gdnative.Object

var methodTexture [0]gdnative.Method

type Texture2D gdnative.Object

var methodTexture2D [15]gdnative.Method
func (gdClass Texture2D) GetWidthImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[0]) }
func (gdClass Texture2D) GetHeightImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[1]) }
func (gdClass Texture2D) IsPixelOpaqueImplementation(x int64, y int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture2D[2], x, y) }
func (gdClass Texture2D) HasAlphaImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture2D[3]) }
func (gdClass Texture2D) DrawImplementation(to_canvas_item RID, pos Vector2, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[4], to_canvas_item, pos, modulate, transpose) }
func (gdClass Texture2D) DrawRectImplementation(to_canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[5], to_canvas_item, rect, tile, modulate, transpose) }
func (gdClass Texture2D) DrawRectRegionImplementation(tp_canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[6], tp_canvas_item, rect, src_rect, modulate, transpose, clip_uv) }
func (gdClass Texture2D) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[7]) }
func (gdClass Texture2D) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[8]) }
func (gdClass Texture2D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTexture2D[9]) }
func (gdClass Texture2D) HasAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture2D[10]) }
func (gdClass Texture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[11], canvas_item, position, modulate, transpose) }
func (gdClass Texture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[12], canvas_item, rect, tile, modulate, transpose) }
func (gdClass Texture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[13], canvas_item, rect, src_rect, modulate, transpose, clip_uv) }
func (gdClass Texture2D) GetImage() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTexture2D[14]) }

type Texture2DArray gdnative.Object

var methodTexture2DArray [0]gdnative.Method

type Texture3D gdnative.Object

var methodTexture3D [12]gdnative.Method
func (gdClass Texture3D) GetFormatImplementation() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTexture3D[0]) }
func (gdClass Texture3D) GetWidthImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[1]) }
func (gdClass Texture3D) GetHeightImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[2]) }
func (gdClass Texture3D) GetDepthImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[3]) }
func (gdClass Texture3D) HasMipmapsImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture3D[4]) }
func (gdClass Texture3D) GetDataImplementation() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTexture3D[5]) }
func (gdClass Texture3D) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTexture3D[6]) }
func (gdClass Texture3D) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[7]) }
func (gdClass Texture3D) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[8]) }
func (gdClass Texture3D) GetDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[9]) }
func (gdClass Texture3D) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture3D[10]) }
func (gdClass Texture3D) GetData() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTexture3D[11]) }

type TextureButton gdnative.Object

var methodTextureButton [20]gdnative.Method

type TextureButtonStretchMode int64

const (
	TextureButtonStretchScale TextureButtonStretchMode = 0
	TextureButtonStretchTile TextureButtonStretchMode = 1
	TextureButtonStretchKeep TextureButtonStretchMode = 2
	TextureButtonStretchKeepCentered TextureButtonStretchMode = 3
	TextureButtonStretchKeepAspect TextureButtonStretchMode = 4
	TextureButtonStretchKeepAspectCentered TextureButtonStretchMode = 5
	TextureButtonStretchKeepAspectCovered TextureButtonStretchMode = 6
)
func (gdClass TextureButton) SetNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[0], texture) }
func (gdClass TextureButton) SetPressedTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[1], texture) }
func (gdClass TextureButton) SetHoverTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[2], texture) }
func (gdClass TextureButton) SetDisabledTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[3], texture) }
func (gdClass TextureButton) SetFocusedTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[4], texture) }
func (gdClass TextureButton) SetClickMask(mask BitMap)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[5], mask) }
func (gdClass TextureButton) SetIgnoreTextureSize(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[6], ignore) }
func (gdClass TextureButton) SetStretchMode(mode TextureButtonStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[7], mode) }
func (gdClass TextureButton) SetFlipH(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[8], enable) }
func (gdClass TextureButton) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[9]) }
func (gdClass TextureButton) SetFlipV(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[10], enable) }
func (gdClass TextureButton) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[11]) }
func (gdClass TextureButton) GetNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[12]) }
func (gdClass TextureButton) GetPressedTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[13]) }
func (gdClass TextureButton) GetHoverTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[14]) }
func (gdClass TextureButton) GetDisabledTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[15]) }
func (gdClass TextureButton) GetFocusedTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[16]) }
func (gdClass TextureButton) GetClickMask() BitMap { return gdnative.Return[BitMap](gdnative.Object(gdClass), methodTextureButton[17]) }
func (gdClass TextureButton) GetIgnoreTextureSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[18]) }
func (gdClass TextureButton) GetStretchMode() TextureButtonStretchMode { return gdnative.Return[TextureButtonStretchMode](gdnative.Object(gdClass), methodTextureButton[19]) }

type TextureLayered gdnative.Object

var methodTextureLayered [14]gdnative.Method

type TextureLayeredLayeredType int64

const (
	TextureLayeredLayeredType2dArray TextureLayeredLayeredType = 0
	TextureLayeredLayeredTypeCubemap TextureLayeredLayeredType = 1
	TextureLayeredLayeredTypeCubemapArray TextureLayeredLayeredType = 2
)
func (gdClass TextureLayered) GetFormatImplementation() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTextureLayered[0]) }
func (gdClass TextureLayered) GetLayeredTypeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[1]) }
func (gdClass TextureLayered) GetWidthImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[2]) }
func (gdClass TextureLayered) GetHeightImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[3]) }
func (gdClass TextureLayered) GetLayersImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[4]) }
func (gdClass TextureLayered) HasMipmapsImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureLayered[5]) }
func (gdClass TextureLayered) GetLayerDataImplementation(layer_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextureLayered[6], layer_index) }
func (gdClass TextureLayered) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTextureLayered[7]) }
func (gdClass TextureLayered) GetLayeredType() TextureLayeredLayeredType { return gdnative.Return[TextureLayeredLayeredType](gdnative.Object(gdClass), methodTextureLayered[8]) }
func (gdClass TextureLayered) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[9]) }
func (gdClass TextureLayered) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[10]) }
func (gdClass TextureLayered) GetLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[11]) }
func (gdClass TextureLayered) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureLayered[12]) }
func (gdClass TextureLayered) GetLayerData(layer int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextureLayered[13], layer) }

type TextureProgressBar gdnative.Object

var methodTextureProgressBar [26]gdnative.Method

type TextureProgressBarFillMode int64

const (
	TextureProgressBarFillLeftToRight TextureProgressBarFillMode = 0
	TextureProgressBarFillRightToLeft TextureProgressBarFillMode = 1
	TextureProgressBarFillTopToBottom TextureProgressBarFillMode = 2
	TextureProgressBarFillBottomToTop TextureProgressBarFillMode = 3
	TextureProgressBarFillClockwise TextureProgressBarFillMode = 4
	TextureProgressBarFillCounterClockwise TextureProgressBarFillMode = 5
	TextureProgressBarFillBilinearLeftAndRight TextureProgressBarFillMode = 6
	TextureProgressBarFillBilinearTopAndBottom TextureProgressBarFillMode = 7
	TextureProgressBarFillClockwiseAndCounterClockwise TextureProgressBarFillMode = 8
)
func (gdClass TextureProgressBar) SetUnderTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[0], tex) }
func (gdClass TextureProgressBar) GetUnderTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[1]) }
func (gdClass TextureProgressBar) SetProgressTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[2], tex) }
func (gdClass TextureProgressBar) GetProgressTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[3]) }
func (gdClass TextureProgressBar) SetOverTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[4], tex) }
func (gdClass TextureProgressBar) GetOverTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[5]) }
func (gdClass TextureProgressBar) SetFillMode(mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[6], mode) }
func (gdClass TextureProgressBar) GetFillMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureProgressBar[7]) }
func (gdClass TextureProgressBar) SetTintUnder(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[8], tint) }
func (gdClass TextureProgressBar) GetTintUnder() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[9]) }
func (gdClass TextureProgressBar) SetTintProgress(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[10], tint) }
func (gdClass TextureProgressBar) GetTintProgress() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[11]) }
func (gdClass TextureProgressBar) SetTintOver(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[12], tint) }
func (gdClass TextureProgressBar) GetTintOver() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[13]) }
func (gdClass TextureProgressBar) SetTextureProgressOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[14], offset) }
func (gdClass TextureProgressBar) GetTextureProgressOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextureProgressBar[15]) }
func (gdClass TextureProgressBar) SetRadialInitialAngle(mode float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[16], mode) }
func (gdClass TextureProgressBar) GetRadialInitialAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextureProgressBar[17]) }
func (gdClass TextureProgressBar) SetRadialCenterOffset(mode Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[18], mode) }
func (gdClass TextureProgressBar) GetRadialCenterOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextureProgressBar[19]) }
func (gdClass TextureProgressBar) SetFillDegrees(mode float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[20], mode) }
func (gdClass TextureProgressBar) GetFillDegrees() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextureProgressBar[21]) }
func (gdClass TextureProgressBar) SetStretchMargin(margin Side, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[22], margin, value) }
func (gdClass TextureProgressBar) GetStretchMargin(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureProgressBar[23], margin) }
func (gdClass TextureProgressBar) SetNinePatchStretch(stretch bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[24], stretch) }
func (gdClass TextureProgressBar) GetNinePatchStretch() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureProgressBar[25]) }

type TextureRect gdnative.Object

var methodTextureRect [10]gdnative.Method

type TextureRectStretchMode int64

const (
	TextureRectStretchScale TextureRectStretchMode = 0
	TextureRectStretchTile TextureRectStretchMode = 1
	TextureRectStretchKeep TextureRectStretchMode = 2
	TextureRectStretchKeepCentered TextureRectStretchMode = 3
	TextureRectStretchKeepAspect TextureRectStretchMode = 4
	TextureRectStretchKeepAspectCentered TextureRectStretchMode = 5
	TextureRectStretchKeepAspectCovered TextureRectStretchMode = 6
)
func (gdClass TextureRect) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[0], texture) }
func (gdClass TextureRect) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureRect[1]) }
func (gdClass TextureRect) SetIgnoreTextureSize(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[2], ignore) }
func (gdClass TextureRect) GetIgnoreTextureSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[3]) }
func (gdClass TextureRect) SetFlipH(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[4], enable) }
func (gdClass TextureRect) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[5]) }
func (gdClass TextureRect) SetFlipV(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[6], enable) }
func (gdClass TextureRect) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[7]) }
func (gdClass TextureRect) SetStretchMode(stretch_mode TextureRectStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[8], stretch_mode) }
func (gdClass TextureRect) GetStretchMode() TextureRectStretchMode { return gdnative.Return[TextureRectStretchMode](gdnative.Object(gdClass), methodTextureRect[9]) }

type Theme gdnative.Object

var methodTheme [68]gdnative.Method

type ThemeDataType int64

const (
	ThemeDataTypeColor ThemeDataType = 0
	ThemeDataTypeConstant ThemeDataType = 1
	ThemeDataTypeFont ThemeDataType = 2
	ThemeDataTypeFontSize ThemeDataType = 3
	ThemeDataTypeIcon ThemeDataType = 4
	ThemeDataTypeStylebox ThemeDataType = 5
	ThemeDataTypeMax ThemeDataType = 6
)
func (gdClass Theme) SetIcon(name string, theme_type string, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[0], name, theme_type, texture) }
func (gdClass Theme) GetIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTheme[1], name, theme_type) }
func (gdClass Theme) HasIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[2], name, theme_type) }
func (gdClass Theme) RenameIcon(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[3], old_name, name, theme_type) }
func (gdClass Theme) ClearIcon(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[4], name, theme_type) }
func (gdClass Theme) GetIconList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[5], theme_type) }
func (gdClass Theme) GetIconTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[6]) }
func (gdClass Theme) SetStylebox(name string, theme_type string, texture StyleBox)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[7], name, theme_type, texture) }
func (gdClass Theme) GetStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodTheme[8], name, theme_type) }
func (gdClass Theme) HasStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[9], name, theme_type) }
func (gdClass Theme) RenameStylebox(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[10], old_name, name, theme_type) }
func (gdClass Theme) ClearStylebox(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[11], name, theme_type) }
func (gdClass Theme) GetStyleboxList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[12], theme_type) }
func (gdClass Theme) GetStyleboxTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[13]) }
func (gdClass Theme) SetFont(name string, theme_type string, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[14], name, theme_type, font) }
func (gdClass Theme) GetFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTheme[15], name, theme_type) }
func (gdClass Theme) HasFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[16], name, theme_type) }
func (gdClass Theme) RenameFont(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[17], old_name, name, theme_type) }
func (gdClass Theme) ClearFont(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[18], name, theme_type) }
func (gdClass Theme) GetFontList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[19], theme_type) }
func (gdClass Theme) GetFontTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[20]) }
func (gdClass Theme) SetFontSize(name string, theme_type string, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[21], name, theme_type, font_size) }
func (gdClass Theme) GetFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[22], name, theme_type) }
func (gdClass Theme) HasFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[23], name, theme_type) }
func (gdClass Theme) RenameFontSize(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[24], old_name, name, theme_type) }
func (gdClass Theme) ClearFontSize(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[25], name, theme_type) }
func (gdClass Theme) GetFontSizeList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[26], theme_type) }
func (gdClass Theme) GetFontSizeTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[27]) }
func (gdClass Theme) SetColor(name string, theme_type string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[28], name, theme_type, color) }
func (gdClass Theme) GetColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTheme[29], name, theme_type) }
func (gdClass Theme) HasColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[30], name, theme_type) }
func (gdClass Theme) RenameColor(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[31], old_name, name, theme_type) }
func (gdClass Theme) ClearColor(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[32], name, theme_type) }
func (gdClass Theme) GetColorList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[33], theme_type) }
func (gdClass Theme) GetColorTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[34]) }
func (gdClass Theme) SetConstant(name string, theme_type string, constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[35], name, theme_type, constant) }
func (gdClass Theme) GetConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[36], name, theme_type) }
func (gdClass Theme) HasConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[37], name, theme_type) }
func (gdClass Theme) RenameConstant(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[38], old_name, name, theme_type) }
func (gdClass Theme) ClearConstant(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[39], name, theme_type) }
func (gdClass Theme) GetConstantList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[40], theme_type) }
func (gdClass Theme) GetConstantTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[41]) }
func (gdClass Theme) SetDefaultBaseScale(base_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[42], base_scale) }
func (gdClass Theme) GetDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTheme[43]) }
func (gdClass Theme) HasDefaultBaseScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[44]) }
func (gdClass Theme) SetDefaultFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[45], font) }
func (gdClass Theme) GetDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTheme[46]) }
func (gdClass Theme) HasDefaultFont() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[47]) }
func (gdClass Theme) SetDefaultFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[48], font_size) }
func (gdClass Theme) GetDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[49]) }
func (gdClass Theme) HasDefaultFontSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[50]) }
func (gdClass Theme) SetThemeItem(data_type ThemeDataType, name string, theme_type string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[51], data_type, name, theme_type, value) }
func (gdClass Theme) GetThemeItem(data_type ThemeDataType, name string, theme_type string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTheme[52], data_type, name, theme_type) }
func (gdClass Theme) HasThemeItem(data_type ThemeDataType, name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[53], data_type, name, theme_type) }
func (gdClass Theme) RenameThemeItem(data_type ThemeDataType, old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[54], data_type, old_name, name, theme_type) }
func (gdClass Theme) ClearThemeItem(data_type ThemeDataType, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[55], data_type, name, theme_type) }
func (gdClass Theme) GetThemeItemList(data_type ThemeDataType, theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[56], data_type, theme_type) }
func (gdClass Theme) GetThemeItemTypeList(data_type ThemeDataType) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[57], data_type) }
func (gdClass Theme) SetTypeVariation(theme_type string, base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[58], theme_type, base_type) }
func (gdClass Theme) IsTypeVariation(theme_type string, base_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[59], theme_type, base_type) }
func (gdClass Theme) ClearTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[60], theme_type) }
func (gdClass Theme) GetTypeVariationBase(theme_type string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTheme[61], theme_type) }
func (gdClass Theme) GetTypeVariationList(base_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[62], base_type) }
func (gdClass Theme) AddType(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[63], theme_type) }
func (gdClass Theme) RemoveType(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[64], theme_type) }
func (gdClass Theme) GetTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[65]) }
func (gdClass Theme) MergeWith(other Theme)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[66], other) }
func (gdClass Theme) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTheme[67]) }

type Thread gdnative.Object

var methodThread [5]gdnative.Method

type ThreadPriority int64

const (
	ThreadPriorityLow ThreadPriority = 0
	ThreadPriorityNormal ThreadPriority = 1
	ThreadPriorityHigh ThreadPriority = 2
)
func (gdClass Thread) Start(callable Callable, priority ThreadPriority) error { return gdnative.Return[error](gdnative.Object(gdClass), methodThread[0], callable, priority) }
func (gdClass Thread) GetId() string { return gdnative.Return[string](gdnative.Object(gdClass), methodThread[1]) }
func (gdClass Thread) IsStarted() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodThread[2]) }
func (gdClass Thread) IsAlive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodThread[3]) }
func (gdClass Thread) WaitToFinish() any { return gdnative.Return[any](gdnative.Object(gdClass), methodThread[4]) }

type TileData gdnative.Object

var methodTileData [46]gdnative.Method
func (gdClass TileData) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[0], flip_h) }
func (gdClass TileData) GetFlipH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[1]) }
func (gdClass TileData) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[2], flip_v) }
func (gdClass TileData) GetFlipV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[3]) }
func (gdClass TileData) SetTranspose(transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[4], transpose) }
func (gdClass TileData) GetTranspose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[5]) }
func (gdClass TileData) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[6], material) }
func (gdClass TileData) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodTileData[7]) }
func (gdClass TileData) SetTextureOffset(texture_offset Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[8], texture_offset) }
func (gdClass TileData) GetTextureOffset() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileData[9]) }
func (gdClass TileData) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[10], modulate) }
func (gdClass TileData) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileData[11]) }
func (gdClass TileData) SetZIndex(z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[12], z_index) }
func (gdClass TileData) GetZIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[13]) }
func (gdClass TileData) SetYSortOrigin(y_sort_origin int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[14], y_sort_origin) }
func (gdClass TileData) GetYSortOrigin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[15]) }
func (gdClass TileData) SetOccluder(layer_id int64, occluder_polygon OccluderPolygon2D)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[16], layer_id, occluder_polygon) }
func (gdClass TileData) GetOccluder(layer_id int64) OccluderPolygon2D { return gdnative.Return[OccluderPolygon2D](gdnative.Object(gdClass), methodTileData[17], layer_id) }
func (gdClass TileData) SetConstantLinearVelocity(layer_id int64, velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[18], layer_id, velocity) }
func (gdClass TileData) GetConstantLinearVelocity(layer_id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTileData[19], layer_id) }
func (gdClass TileData) SetConstantAngularVelocity(layer_id int64, velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[20], layer_id, velocity) }
func (gdClass TileData) GetConstantAngularVelocity(layer_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[21], layer_id) }
func (gdClass TileData) SetCollisionPolygonsCount(layer_id int64, polygons_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[22], layer_id, polygons_count) }
func (gdClass TileData) GetCollisionPolygonsCount(layer_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[23], layer_id) }
func (gdClass TileData) AddCollisionPolygon(layer_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[24], layer_id) }
func (gdClass TileData) RemoveCollisionPolygon(layer_id int64, polygon_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[25], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonPoints(layer_id int64, polygon_index int64, polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[26], layer_id, polygon_index, polygon) }
func (gdClass TileData) GetCollisionPolygonPoints(layer_id int64, polygon_index int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTileData[27], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWay(layer_id int64, polygon_index int64, one_way bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[28], layer_id, polygon_index, one_way) }
func (gdClass TileData) IsCollisionPolygonOneWay(layer_id int64, polygon_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[29], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64, one_way_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[30], layer_id, polygon_index, one_way_margin) }
func (gdClass TileData) GetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[31], layer_id, polygon_index) }
func (gdClass TileData) SetTerrainSet(terrain_set int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[32], terrain_set) }
func (gdClass TileData) GetTerrainSet() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[33]) }
func (gdClass TileData) SetTerrain(terrain int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[34], terrain) }
func (gdClass TileData) GetTerrain() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[35]) }
func (gdClass TileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[36], peering_bit, terrain) }
func (gdClass TileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[37], peering_bit) }
func (gdClass TileData) SetNavigationPolygon(layer_id int64, navigation_polygon NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[38], layer_id, navigation_polygon) }
func (gdClass TileData) GetNavigationPolygon(layer_id int64) NavigationPolygon { return gdnative.Return[NavigationPolygon](gdnative.Object(gdClass), methodTileData[39], layer_id) }
func (gdClass TileData) SetProbability(probability float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[40], probability) }
func (gdClass TileData) GetProbability() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[41]) }
func (gdClass TileData) SetCustomData(layer_name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[42], layer_name, value) }
func (gdClass TileData) GetCustomData(layer_name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTileData[43], layer_name) }
func (gdClass TileData) SetCustomDataByLayerId(layer_id int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[44], layer_id, value) }
func (gdClass TileData) GetCustomDataByLayerId(layer_id int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTileData[45], layer_id) }

type TileMap gdnative.Object

var methodTileMap [49]gdnative.Method

type TileMapVisibilityMode int64

const (
	TileMapVisibilityModeDefault TileMapVisibilityMode = 0
	TileMapVisibilityModeForceHide TileMapVisibilityMode = 2
	TileMapVisibilityModeForceShow TileMapVisibilityMode = 1
)
func (gdClass TileMap) UseTileDataRuntimeUpdateImplementation(layer int64, coords Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[0], layer, coords) }
func (gdClass TileMap) TileDataRuntimeUpdateImplementation(layer int64, coords Vector2i, tile_data TileData)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[1], layer, coords, tile_data) }
func (gdClass TileMap) SetTileset(tileset TileSet)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[2], tileset) }
func (gdClass TileMap) GetTileset() TileSet { return gdnative.Return[TileSet](gdnative.Object(gdClass), methodTileMap[3]) }
func (gdClass TileMap) SetQuadrantSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[4], size) }
func (gdClass TileMap) GetQuadrantSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[5]) }
func (gdClass TileMap) GetLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[6]) }
func (gdClass TileMap) AddLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[7], to_position) }
func (gdClass TileMap) MoveLayer(layer int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[8], layer, to_position) }
func (gdClass TileMap) RemoveLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[9], layer) }
func (gdClass TileMap) SetLayerName(layer int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[10], layer, name) }
func (gdClass TileMap) GetLayerName(layer int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileMap[11], layer) }
func (gdClass TileMap) SetLayerEnabled(layer int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[12], layer, enabled) }
func (gdClass TileMap) IsLayerEnabled(layer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[13], layer) }
func (gdClass TileMap) SetLayerModulate(layer int64, enabled Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[14], layer, enabled) }
func (gdClass TileMap) GetLayerModulate(layer int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileMap[15], layer) }
func (gdClass TileMap) SetLayerYSortEnabled(layer int64, y_sort_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[16], layer, y_sort_enabled) }
func (gdClass TileMap) IsLayerYSortEnabled(layer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[17], layer) }
func (gdClass TileMap) SetLayerYSortOrigin(layer int64, y_sort_origin int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[18], layer, y_sort_origin) }
func (gdClass TileMap) GetLayerYSortOrigin(layer int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[19], layer) }
func (gdClass TileMap) SetLayerZIndex(layer int64, z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[20], layer, z_index) }
func (gdClass TileMap) GetLayerZIndex(layer int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[21], layer) }
func (gdClass TileMap) SetCollisionAnimatable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[22], enabled) }
func (gdClass TileMap) IsCollisionAnimatable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[23]) }
func (gdClass TileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[24], collision_visibility_mode) }
func (gdClass TileMap) GetCollisionVisibilityMode() TileMapVisibilityMode { return gdnative.Return[TileMapVisibilityMode](gdnative.Object(gdClass), methodTileMap[25]) }
func (gdClass TileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[26], navigation_visibility_mode) }
func (gdClass TileMap) GetNavigationVisibilityMode() TileMapVisibilityMode { return gdnative.Return[TileMapVisibilityMode](gdnative.Object(gdClass), methodTileMap[27]) }
func (gdClass TileMap) SetCell(layer int64, coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[28], layer, coords, source_id, atlas_coords, alternative_tile) }
func (gdClass TileMap) EraseCell(layer int64, coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[29], layer, coords) }
func (gdClass TileMap) GetCellSourceId(layer int64, coords Vector2i, use_proxies bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[30], layer, coords, use_proxies) }
func (gdClass TileMap) GetCellAtlasCoords(layer int64, coords Vector2i, use_proxies bool) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[31], layer, coords, use_proxies) }
func (gdClass TileMap) GetCellAlternativeTile(layer int64, coords Vector2i, use_proxies bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[32], layer, coords, use_proxies) }
func (gdClass TileMap) GetCoordsForBodyRid(body RID) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[33], body) }
func (gdClass TileMap) GetPattern(layer int64, coords_array Array) TileMapPattern { return gdnative.Return[TileMapPattern](gdnative.Object(gdClass), methodTileMap[34], layer, coords_array) }
func (gdClass TileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[35], position_in_tilemap, coords_in_pattern, pattern) }
func (gdClass TileMap) SetPattern(layer int64, position Vector2i, pattern TileMapPattern)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[36], layer, position, pattern) }
func (gdClass TileMap) SetCellsTerrainConnect(layer int64, cells Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[37], layer, cells, terrain_set, terrain, ignore_empty_terrains) }
func (gdClass TileMap) SetCellsTerrainPath(layer int64, path Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[38], layer, path, terrain_set, terrain, ignore_empty_terrains) }
func (gdClass TileMap) FixInvalidTiles()  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[39]) }
func (gdClass TileMap) ClearLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[40], layer) }
func (gdClass TileMap) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[41]) }
func (gdClass TileMap) ForceUpdate(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[42], layer) }
func (gdClass TileMap) GetSurroundingTiles(coords Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMap[43], coords) }
func (gdClass TileMap) GetUsedCells(layer int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMap[44], layer) }
func (gdClass TileMap) GetUsedRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTileMap[45]) }
func (gdClass TileMap) MapToWorld(map_position Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTileMap[46], map_position) }
func (gdClass TileMap) WorldToMap(world_position Vector2) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[47], world_position) }
func (gdClass TileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[48], coords, neighbor) }

type TileMapPattern gdnative.Object

var methodTileMapPattern [10]gdnative.Method
func (gdClass TileMapPattern) SetCell(coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[0], coords, source_id, atlas_coords, alternative_tile) }
func (gdClass TileMapPattern) HasCell(coords Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMapPattern[1], coords) }
func (gdClass TileMapPattern) RemoveCell(coords Vector2i, update_size bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[2], coords, update_size) }
func (gdClass TileMapPattern) GetCellSourceId(coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMapPattern[3], coords) }
func (gdClass TileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMapPattern[4], coords) }
func (gdClass TileMapPattern) GetCellAlternativeTile(coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMapPattern[5], coords) }
func (gdClass TileMapPattern) GetUsedCells() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMapPattern[6]) }
func (gdClass TileMapPattern) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMapPattern[7]) }
func (gdClass TileMapPattern) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[8], size) }
func (gdClass TileMapPattern) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMapPattern[9]) }

type TileSet gdnative.Object

var methodTileSet [84]gdnative.Method

type TileSetTileShape int64

const (
	TileSetTileShapeSquare TileSetTileShape = 0
	TileSetTileShapeIsometric TileSetTileShape = 1
	TileSetTileShapeHalfOffsetSquare TileSetTileShape = 2
	TileSetTileShapeHexagon TileSetTileShape = 3
)

type TileSetTileLayout int64

const (
	TileSetTileLayoutStacked TileSetTileLayout = 0
	TileSetTileLayoutStackedOffset TileSetTileLayout = 1
	TileSetTileLayoutStairsRight TileSetTileLayout = 2
	TileSetTileLayoutStairsDown TileSetTileLayout = 3
	TileSetTileLayoutDiamondRight TileSetTileLayout = 4
	TileSetTileLayoutDiamondDown TileSetTileLayout = 5
)

type TileSetTileOffsetAxis int64

const (
	TileSetTileOffsetAxisHorizontal TileSetTileOffsetAxis = 0
	TileSetTileOffsetAxisVertical TileSetTileOffsetAxis = 1
)

type TileSetCellNeighbor int64

const (
	TileSetCellNeighborRightSide TileSetCellNeighbor = 0
	TileSetCellNeighborRightCorner TileSetCellNeighbor = 1
	TileSetCellNeighborBottomRightSide TileSetCellNeighbor = 2
	TileSetCellNeighborBottomRightCorner TileSetCellNeighbor = 3
	TileSetCellNeighborBottomSide TileSetCellNeighbor = 4
	TileSetCellNeighborBottomCorner TileSetCellNeighbor = 5
	TileSetCellNeighborBottomLeftSide TileSetCellNeighbor = 6
	TileSetCellNeighborBottomLeftCorner TileSetCellNeighbor = 7
	TileSetCellNeighborLeftSide TileSetCellNeighbor = 8
	TileSetCellNeighborLeftCorner TileSetCellNeighbor = 9
	TileSetCellNeighborTopLeftSide TileSetCellNeighbor = 10
	TileSetCellNeighborTopLeftCorner TileSetCellNeighbor = 11
	TileSetCellNeighborTopSide TileSetCellNeighbor = 12
	TileSetCellNeighborTopCorner TileSetCellNeighbor = 13
	TileSetCellNeighborTopRightSide TileSetCellNeighbor = 14
	TileSetCellNeighborTopRightCorner TileSetCellNeighbor = 15
)

type TileSetTerrainMode int64

const (
	TileSetTerrainModeMatchCornersAndSides TileSetTerrainMode = 0
	TileSetTerrainModeMatchCorners TileSetTerrainMode = 1
	TileSetTerrainModeMatchSides TileSetTerrainMode = 2
)
func (gdClass TileSet) GetNextSourceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[0]) }
func (gdClass TileSet) AddSource(source TileSetSource, atlas_source_id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[1], source, atlas_source_id_override) }
func (gdClass TileSet) RemoveSource(source_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[2], source_id) }
func (gdClass TileSet) SetSourceId(source_id int64, new_source_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[3], source_id, new_source_id) }
func (gdClass TileSet) GetSourceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[4]) }
func (gdClass TileSet) GetSourceId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[5], index) }
func (gdClass TileSet) HasSource(source_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[6], source_id) }
func (gdClass TileSet) GetSource(source_id int64) TileSetSource { return gdnative.Return[TileSetSource](gdnative.Object(gdClass), methodTileSet[7], source_id) }
func (gdClass TileSet) SetTileShape(shape TileSetTileShape)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[8], shape) }
func (gdClass TileSet) GetTileShape() TileSetTileShape { return gdnative.Return[TileSetTileShape](gdnative.Object(gdClass), methodTileSet[9]) }
func (gdClass TileSet) SetTileLayout(layout TileSetTileLayout)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[10], layout) }
func (gdClass TileSet) GetTileLayout() TileSetTileLayout { return gdnative.Return[TileSetTileLayout](gdnative.Object(gdClass), methodTileSet[11]) }
func (gdClass TileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[12], alignment) }
func (gdClass TileSet) GetTileOffsetAxis() TileSetTileOffsetAxis { return gdnative.Return[TileSetTileOffsetAxis](gdnative.Object(gdClass), methodTileSet[13]) }
func (gdClass TileSet) SetTileSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[14], size) }
func (gdClass TileSet) GetTileSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSet[15]) }
func (gdClass TileSet) SetUvClipping(uv_clipping bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[16], uv_clipping) }
func (gdClass TileSet) IsUvClipping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[17]) }
func (gdClass TileSet) GetOcclusionLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[18]) }
func (gdClass TileSet) AddOcclusionLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[19], to_position) }
func (gdClass TileSet) MoveOcclusionLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[20], layer_index, to_position) }
func (gdClass TileSet) RemoveOcclusionLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[21], layer_index) }
func (gdClass TileSet) SetOcclusionLayerLightMask(layer_index int64, light_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[22], layer_index, light_mask) }
func (gdClass TileSet) GetOcclusionLayerLightMask(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[23], layer_index) }
func (gdClass TileSet) SetOcclusionLayerSdfCollision(layer_index int64, sdf_collision bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[24], layer_index, sdf_collision) }
func (gdClass TileSet) GetOcclusionLayerSdfCollision(layer_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[25], layer_index) }
func (gdClass TileSet) GetPhysicsLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[26]) }
func (gdClass TileSet) AddPhysicsLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[27], to_position) }
func (gdClass TileSet) MovePhysicsLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[28], layer_index, to_position) }
func (gdClass TileSet) RemovePhysicsLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[29], layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionLayer(layer_index int64, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[30], layer_index, layer) }
func (gdClass TileSet) GetPhysicsLayerCollisionLayer(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[31], layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionMask(layer_index int64, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[32], layer_index, mask) }
func (gdClass TileSet) GetPhysicsLayerCollisionMask(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[33], layer_index) }
func (gdClass TileSet) SetPhysicsLayerPhysicsMaterial(layer_index int64, physics_material PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[34], layer_index, physics_material) }
func (gdClass TileSet) GetPhysicsLayerPhysicsMaterial(layer_index int64) PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodTileSet[35], layer_index) }
func (gdClass TileSet) GetTerrainSetsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[36]) }
func (gdClass TileSet) AddTerrainSet(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[37], to_position) }
func (gdClass TileSet) MoveTerrainSet(terrain_set int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[38], terrain_set, to_position) }
func (gdClass TileSet) RemoveTerrainSet(terrain_set int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[39], terrain_set) }
func (gdClass TileSet) SetTerrainSetMode(terrain_set int64, mode TileSetTerrainMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[40], terrain_set, mode) }
func (gdClass TileSet) GetTerrainSetMode(terrain_set int64) TileSetTerrainMode { return gdnative.Return[TileSetTerrainMode](gdnative.Object(gdClass), methodTileSet[41], terrain_set) }
func (gdClass TileSet) GetTerrainsCount(terrain_set int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[42], terrain_set) }
func (gdClass TileSet) AddTerrain(terrain_set int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[43], terrain_set, to_position) }
func (gdClass TileSet) MoveTerrain(terrain_set int64, terrain_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[44], terrain_set, terrain_index, to_position) }
func (gdClass TileSet) RemoveTerrain(terrain_set int64, terrain_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[45], terrain_set, terrain_index) }
func (gdClass TileSet) SetTerrainName(terrain_set int64, terrain_index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[46], terrain_set, terrain_index, name) }
func (gdClass TileSet) GetTerrainName(terrain_set int64, terrain_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileSet[47], terrain_set, terrain_index) }
func (gdClass TileSet) SetTerrainColor(terrain_set int64, terrain_index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[48], terrain_set, terrain_index, color) }
func (gdClass TileSet) GetTerrainColor(terrain_set int64, terrain_index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileSet[49], terrain_set, terrain_index) }
func (gdClass TileSet) GetNavigationLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[50]) }
func (gdClass TileSet) AddNavigationLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[51], to_position) }
func (gdClass TileSet) MoveNavigationLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[52], layer_index, to_position) }
func (gdClass TileSet) RemoveNavigationLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[53], layer_index) }
func (gdClass TileSet) SetNavigationLayerLayers(layer_index int64, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[54], layer_index, layers) }
func (gdClass TileSet) GetNavigationLayerLayers(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[55], layer_index) }
func (gdClass TileSet) GetCustomDataLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[56]) }
func (gdClass TileSet) AddCustomDataLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[57], to_position) }
func (gdClass TileSet) MoveCustomDataLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[58], layer_index, to_position) }
func (gdClass TileSet) RemoveCustomDataLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[59], layer_index) }
func (gdClass TileSet) GetCustomDataLayerByName(layer_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[60], layer_name) }
func (gdClass TileSet) SetCustomDataLayerName(layer_index int64, layer_name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[61], layer_index, layer_name) }
func (gdClass TileSet) GetCustomDataLayerName(layer_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileSet[62], layer_index) }
func (gdClass TileSet) SetCustomDataLayerType(layer_index int64, layer_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[63], layer_index, layer_type) }
func (gdClass TileSet) GetCustomDataLayerType(layer_index int64) VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodTileSet[64], layer_index) }
func (gdClass TileSet) SetSourceLevelTileProxy(source_from int64, source_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[65], source_from, source_to) }
func (gdClass TileSet) GetSourceLevelTileProxy(source_from int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[66], source_from) }
func (gdClass TileSet) HasSourceLevelTileProxy(source_from int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[67], source_from) }
func (gdClass TileSet) RemoveSourceLevelTileProxy(source_from int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[68], source_from) }
func (gdClass TileSet) SetCoordsLevelTileProxy(p_source_from int64, coords_from Vector2i, source_to int64, coords_to Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[69], p_source_from, coords_from, source_to, coords_to) }
func (gdClass TileSet) GetCoordsLevelTileProxy(source_from int64, coords_from Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[70], source_from, coords_from) }
func (gdClass TileSet) HasCoordsLevelTileProxy(source_from int64, coords_from Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[71], source_from, coords_from) }
func (gdClass TileSet) RemoveCoordsLevelTileProxy(source_from int64, coords_from Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[72], source_from, coords_from) }
func (gdClass TileSet) SetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64, source_to int64, coords_to Vector2i, alternative_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[73], source_from, coords_from, alternative_from, source_to, coords_to, alternative_to) }
func (gdClass TileSet) GetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[74], source_from, coords_from, alternative_from) }
func (gdClass TileSet) HasAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[75], source_from, coords_from, alternative_from) }
func (gdClass TileSet) RemoveAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[76], source_from, coords_from, alternative_from) }
func (gdClass TileSet) MapTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[77], source_from, coords_from, alternative_from) }
func (gdClass TileSet) CleanupInvalidTileProxies()  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[78]) }
func (gdClass TileSet) ClearTileProxies()  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[79]) }
func (gdClass TileSet) AddPattern(pattern TileMapPattern, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[80], pattern, index) }
func (gdClass TileSet) GetPattern(index int64) TileMapPattern { return gdnative.Return[TileMapPattern](gdnative.Object(gdClass), methodTileSet[81], index) }
func (gdClass TileSet) RemovePattern(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[82], index) }
func (gdClass TileSet) GetPatternsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[83]) }

type TileSetAtlasSource gdnative.Object

var methodTileSetAtlasSource [37]gdnative.Method
func (gdClass TileSetAtlasSource) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[0], texture) }
func (gdClass TileSetAtlasSource) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTileSetAtlasSource[1]) }
func (gdClass TileSetAtlasSource) SetMargins(margins Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[2], margins) }
func (gdClass TileSetAtlasSource) GetMargins() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[3]) }
func (gdClass TileSetAtlasSource) SetSeparation(separation Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[4], separation) }
func (gdClass TileSetAtlasSource) GetSeparation() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[5]) }
func (gdClass TileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[6], texture_region_size) }
func (gdClass TileSetAtlasSource) GetTextureRegionSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[7]) }
func (gdClass TileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[8], use_texture_padding) }
func (gdClass TileSetAtlasSource) GetUseTexturePadding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetAtlasSource[9]) }
func (gdClass TileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[10], atlas_coords, size) }
func (gdClass TileSetAtlasSource) RemoveTile(atlas_coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[11], atlas_coords) }
func (gdClass TileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[12], atlas_coords, new_atlas_coords, new_size) }
func (gdClass TileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[13], atlas_coords) }
func (gdClass TileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns int64, animation_separation Vector2i, frames_count int64, ignored_tile Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetAtlasSource[14], atlas_coords, size, animation_columns, animation_separation, frames_count, ignored_tile) }
func (gdClass TileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTileSetAtlasSource[15], texture, margins, separation, texture_region_size) }
func (gdClass TileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[16], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[17], atlas_coords, frame_columns) }
func (gdClass TileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[18], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[19], atlas_coords, separation) }
func (gdClass TileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[20], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[21], atlas_coords, speed) }
func (gdClass TileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[22], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[23], atlas_coords, frames_count) }
func (gdClass TileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[24], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64, duration float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[25], atlas_coords, frame_index, duration) }
func (gdClass TileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[26], atlas_coords, frame_index) }
func (gdClass TileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[27], atlas_coords) }
func (gdClass TileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[28], atlas_coords, alternative_id_override) }
func (gdClass TileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[29], atlas_coords, alternative_tile) }
func (gdClass TileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile int64, new_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[30], atlas_coords, alternative_tile, new_id) }
func (gdClass TileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[31], atlas_coords) }
func (gdClass TileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile int64) TileData { return gdnative.Return[TileData](gdnative.Object(gdClass), methodTileSetAtlasSource[32], atlas_coords, alternative_tile) }
func (gdClass TileSetAtlasSource) GetAtlasGridSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[33]) }
func (gdClass TileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTileSetAtlasSource[34], atlas_coords, frame) }
func (gdClass TileSetAtlasSource) GetRuntimeTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTileSetAtlasSource[35]) }
func (gdClass TileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTileSetAtlasSource[36], atlas_coords, frame) }

type TileSetScenesCollectionSource gdnative.Object

var methodTileSetScenesCollectionSource [11]gdnative.Method
func (gdClass TileSetScenesCollectionSource) GetSceneTilesCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[0]) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[1], index) }
func (gdClass TileSetScenesCollectionSource) HasSceneTileId(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[2], id) }
func (gdClass TileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[3], packed_scene, id_override) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileId(id int64, new_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[4], id, new_id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileScene(id int64, packed_scene PackedScene)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[5], id, packed_scene) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileScene(id int64) PackedScene { return gdnative.Return[PackedScene](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[6], id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id int64, display_placeholder bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[7], id, display_placeholder) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[8], id) }
func (gdClass TileSetScenesCollectionSource) RemoveSceneTile(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[9], id) }
func (gdClass TileSetScenesCollectionSource) GetNextSceneTileId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[10]) }

type TileSetSource gdnative.Object

var methodTileSetSource [6]gdnative.Method
func (gdClass TileSetSource) GetTilesCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[0]) }
func (gdClass TileSetSource) GetTileId(index int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetSource[1], index) }
func (gdClass TileSetSource) HasTile(atlas_coords Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetSource[2], atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[3], atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[4], atlas_coords, index) }
func (gdClass TileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetSource[5], atlas_coords, alternative_tile) }

type Time gdnative.Object

var methodTime [21]gdnative.Method

type TimeMonth int64

const (
	TimeMonthJanuary TimeMonth = 1
	TimeMonthFebruary TimeMonth = 2
	TimeMonthMarch TimeMonth = 3
	TimeMonthApril TimeMonth = 4
	TimeMonthMay TimeMonth = 5
	TimeMonthJune TimeMonth = 6
	TimeMonthJuly TimeMonth = 7
	TimeMonthAugust TimeMonth = 8
	TimeMonthSeptember TimeMonth = 9
	TimeMonthOctober TimeMonth = 10
	TimeMonthNovember TimeMonth = 11
	TimeMonthDecember TimeMonth = 12
)

type TimeWeekday int64

const (
	TimeWeekdaySunday TimeWeekday = 0
	TimeWeekdayMonday TimeWeekday = 1
	TimeWeekdayTuesday TimeWeekday = 2
	TimeWeekdayWednesday TimeWeekday = 3
	TimeWeekdayThursday TimeWeekday = 4
	TimeWeekdayFriday TimeWeekday = 5
	TimeWeekdaySaturday TimeWeekday = 6
)
func (gdClass Time) GetDatetimeDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[0], unix_time_val) }
func (gdClass Time) GetDateDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[1], unix_time_val) }
func (gdClass Time) GetTimeDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[2], unix_time_val) }
func (gdClass Time) GetDatetimeStringFromUnixTime(unix_time_val int64, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[3], unix_time_val, use_space) }
func (gdClass Time) GetDateStringFromUnixTime(unix_time_val int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[4], unix_time_val) }
func (gdClass Time) GetTimeStringFromUnixTime(unix_time_val int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[5], unix_time_val) }
func (gdClass Time) GetDatetimeDictFromDatetimeString(datetime string, weekday bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[6], datetime, weekday) }
func (gdClass Time) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[7], datetime, use_space) }
func (gdClass Time) GetUnixTimeFromDatetimeDict(datetime Dictionary) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[8], datetime) }
func (gdClass Time) GetUnixTimeFromDatetimeString(datetime string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[9], datetime) }
func (gdClass Time) GetOffsetStringFromOffsetMinutes(offset_minutes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[10], offset_minutes) }
func (gdClass Time) GetDatetimeDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[11], utc) }
func (gdClass Time) GetDateDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[12], utc) }
func (gdClass Time) GetTimeDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[13], utc) }
func (gdClass Time) GetDatetimeStringFromSystem(utc bool, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[14], utc, use_space) }
func (gdClass Time) GetDateStringFromSystem(utc bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[15], utc) }
func (gdClass Time) GetTimeStringFromSystem(utc bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[16], utc) }
func (gdClass Time) GetTimeZoneFromSystem() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[17]) }
func (gdClass Time) GetUnixTimeFromSystem() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTime[18]) }
func (gdClass Time) GetTicksMsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[19]) }
func (gdClass Time) GetTicksUsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[20]) }

type Timer gdnative.Object

var methodTimer [14]gdnative.Method

type TimerTimerProcessCallback int64

const (
	TimerTimerProcessPhysics TimerTimerProcessCallback = 0
	TimerTimerProcessIdle TimerTimerProcessCallback = 1
)
func (gdClass Timer) SetWaitTime(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[0], time_sec) }
func (gdClass Timer) GetWaitTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTimer[1]) }
func (gdClass Timer) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[2], enable) }
func (gdClass Timer) IsOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[3]) }
func (gdClass Timer) SetAutostart(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[4], enable) }
func (gdClass Timer) HasAutostart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[5]) }
func (gdClass Timer) Start(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[6], time_sec) }
func (gdClass Timer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTimer[7]) }
func (gdClass Timer) SetPaused(paused bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[8], paused) }
func (gdClass Timer) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[9]) }
func (gdClass Timer) IsStopped() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[10]) }
func (gdClass Timer) GetTimeLeft() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTimer[11]) }
func (gdClass Timer) SetTimerProcessCallback(callback TimerTimerProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[12], callback) }
func (gdClass Timer) GetTimerProcessCallback() TimerTimerProcessCallback { return gdnative.Return[TimerTimerProcessCallback](gdnative.Object(gdClass), methodTimer[13]) }

type TorusMesh gdnative.Object

var methodTorusMesh [8]gdnative.Method
func (gdClass TorusMesh) SetInnerRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[0], radius) }
func (gdClass TorusMesh) GetInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTorusMesh[1]) }
func (gdClass TorusMesh) SetOuterRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[2], radius) }
func (gdClass TorusMesh) GetOuterRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTorusMesh[3]) }
func (gdClass TorusMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[4], rings) }
func (gdClass TorusMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTorusMesh[5]) }
func (gdClass TorusMesh) SetRingSegments(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[6], rings) }
func (gdClass TorusMesh) GetRingSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTorusMesh[7]) }

type TouchScreenButton gdnative.Object

var methodTouchScreenButton [19]gdnative.Method

type TouchScreenButtonVisibilityMode int64

const (
	TouchScreenButtonVisibilityAlways TouchScreenButtonVisibilityMode = 0
	TouchScreenButtonVisibilityTouchscreenOnly TouchScreenButtonVisibilityMode = 1
)
func (gdClass TouchScreenButton) SetTextureNormal(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[0], texture) }
func (gdClass TouchScreenButton) GetTextureNormal() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTouchScreenButton[1]) }
func (gdClass TouchScreenButton) SetTexturePressed(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[2], texture) }
func (gdClass TouchScreenButton) GetTexturePressed() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTouchScreenButton[3]) }
func (gdClass TouchScreenButton) SetBitmask(bitmask BitMap)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[4], bitmask) }
func (gdClass TouchScreenButton) GetBitmask() BitMap { return gdnative.Return[BitMap](gdnative.Object(gdClass), methodTouchScreenButton[5]) }
func (gdClass TouchScreenButton) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[6], shape) }
func (gdClass TouchScreenButton) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodTouchScreenButton[7]) }
func (gdClass TouchScreenButton) SetShapeCentered(bool bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[8], bool) }
func (gdClass TouchScreenButton) IsShapeCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[9]) }
func (gdClass TouchScreenButton) SetShapeVisible(bool bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[10], bool) }
func (gdClass TouchScreenButton) IsShapeVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[11]) }
func (gdClass TouchScreenButton) SetAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[12], action) }
func (gdClass TouchScreenButton) GetAction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTouchScreenButton[13]) }
func (gdClass TouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[14], mode) }
func (gdClass TouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode { return gdnative.Return[TouchScreenButtonVisibilityMode](gdnative.Object(gdClass), methodTouchScreenButton[15]) }
func (gdClass TouchScreenButton) SetPassbyPress(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[16], enabled) }
func (gdClass TouchScreenButton) IsPassbyPressEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[17]) }
func (gdClass TouchScreenButton) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[18]) }

type Translation gdnative.Object

var methodTranslation [11]gdnative.Method
func (gdClass Translation) GetPluralMessageImplementation(src_message string, src_plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[0], src_message, src_plural_message, n, context) }
func (gdClass Translation) GetMessageImplementation(src_message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[1], src_message, context) }
func (gdClass Translation) SetLocale(locale string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[2], locale) }
func (gdClass Translation) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[3]) }
func (gdClass Translation) AddMessage(src_message string, xlated_message string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[4], src_message, xlated_message, context) }
func (gdClass Translation) AddPluralMessage(src_message string, xlated_messages []string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[5], src_message, xlated_messages, context) }
func (gdClass Translation) GetMessage(src_message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[6], src_message, context) }
func (gdClass Translation) GetPluralMessage(src_message string, src_plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[7], src_message, src_plural_message, n, context) }
func (gdClass Translation) EraseMessage(src_message string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[8], src_message, context) }
func (gdClass Translation) GetMessageList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslation[9]) }
func (gdClass Translation) GetMessageCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTranslation[10]) }

type TranslationServer gdnative.Object

var methodTranslationServer [23]gdnative.Method
func (gdClass TranslationServer) SetLocale(locale string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[0], locale) }
func (gdClass TranslationServer) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[1]) }
func (gdClass TranslationServer) GetToolLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[2]) }
func (gdClass TranslationServer) CompareLocales(locale_a string, locale_b string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTranslationServer[3], locale_a, locale_b) }
func (gdClass TranslationServer) StandardizeLocale(locale string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[4], locale) }
func (gdClass TranslationServer) GetAllLanguages() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[5]) }
func (gdClass TranslationServer) GetLanguageName(language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[6], language) }
func (gdClass TranslationServer) GetAllScripts() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[7]) }
func (gdClass TranslationServer) GetScriptName(script string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[8], script) }
func (gdClass TranslationServer) GetAllCountries() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[9]) }
func (gdClass TranslationServer) GetCountryName(country string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[10], country) }
func (gdClass TranslationServer) GetLocaleName(locale string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[11], locale) }
func (gdClass TranslationServer) Translate(message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[12], message, context) }
func (gdClass TranslationServer) TranslatePlural(message string, plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[13], message, plural_message, n, context) }
func (gdClass TranslationServer) AddTranslation(translation Translation)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[14], translation) }
func (gdClass TranslationServer) RemoveTranslation(translation Translation)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[15], translation) }
func (gdClass TranslationServer) GetTranslationObject(locale string) Translation { return gdnative.Return[Translation](gdnative.Object(gdClass), methodTranslationServer[16], locale) }
func (gdClass TranslationServer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[17]) }
func (gdClass TranslationServer) GetLoadedLocales() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTranslationServer[18]) }
func (gdClass TranslationServer) IsPseudolocalizationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTranslationServer[19]) }
func (gdClass TranslationServer) SetPseudolocalizationEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[20], enabled) }
func (gdClass TranslationServer) ReloadPseudolocalization()  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[21]) }
func (gdClass TranslationServer) Pseudolocalize(message string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[22], message) }

type Tree gdnative.Object

var methodTree [53]gdnative.Method

type TreeSelectMode int64

const (
	TreeSelectSingle TreeSelectMode = 0
	TreeSelectRow TreeSelectMode = 1
	TreeSelectMulti TreeSelectMode = 2
)

type TreeDropModeFlags int64

const (
	TreeDropModeDisabled TreeDropModeFlags = 0
	TreeDropModeOnItem TreeDropModeFlags = 1
	TreeDropModeInbetween TreeDropModeFlags = 2
)
func (gdClass Tree) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTree[0]) }
func (gdClass Tree) CreateItem(parent TreeItem, idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[1], parent, idx) }
func (gdClass Tree) GetRoot() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[2]) }
func (gdClass Tree) SetColumnCustomMinimumWidth(column int64, min_width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[3], column, min_width) }
func (gdClass Tree) SetColumnExpand(column int64, expand bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[4], column, expand) }
func (gdClass Tree) SetColumnExpandRatio(column int64, ratio int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[5], column, ratio) }
func (gdClass Tree) SetColumnClipContent(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[6], column, enable) }
func (gdClass Tree) IsColumnExpanding(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[7], column) }
func (gdClass Tree) IsColumnClippingContent(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[8], column) }
func (gdClass Tree) GetColumnExpandRatio(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[9], column) }
func (gdClass Tree) GetColumnWidth(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[10], column) }
func (gdClass Tree) SetHideRoot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[11], enable) }
func (gdClass Tree) IsRootHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[12]) }
func (gdClass Tree) GetNextSelected(from TreeItem) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[13], from) }
func (gdClass Tree) GetSelected() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[14]) }
func (gdClass Tree) GetSelectedColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[15]) }
func (gdClass Tree) GetPressedButton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[16]) }
func (gdClass Tree) SetSelectMode(mode TreeSelectMode)  { gdnative.Call(gdnative.Object(gdClass), methodTree[17], mode) }
func (gdClass Tree) GetSelectMode() TreeSelectMode { return gdnative.Return[TreeSelectMode](gdnative.Object(gdClass), methodTree[18]) }
func (gdClass Tree) SetColumns(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[19], amount) }
func (gdClass Tree) GetColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[20]) }
func (gdClass Tree) GetEdited() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[21]) }
func (gdClass Tree) GetEditedColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[22]) }
func (gdClass Tree) EditSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[23]) }
func (gdClass Tree) GetCustomPopupRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTree[24]) }
func (gdClass Tree) GetItemAreaRect(item TreeItem, column int64, button_index int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTree[25], item, column, button_index) }
func (gdClass Tree) GetItemAtPosition(position Vector2) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[26], position) }
func (gdClass Tree) GetColumnAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[27], position) }
func (gdClass Tree) GetDropSectionAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[28], position) }
func (gdClass Tree) GetButtonIdAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[29], position) }
func (gdClass Tree) EnsureCursorIsVisible()  { gdnative.Call(gdnative.Object(gdClass), methodTree[30]) }
func (gdClass Tree) SetColumnTitlesVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[31], visible) }
func (gdClass Tree) AreColumnTitlesVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[32]) }
func (gdClass Tree) SetColumnTitle(column int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTree[33], column, title) }
func (gdClass Tree) GetColumnTitle(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTree[34], column) }
func (gdClass Tree) SetColumnTitleDirection(column int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTree[35], column, direction) }
func (gdClass Tree) GetColumnTitleDirection(column int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTree[36], column) }
func (gdClass Tree) SetColumnTitleLanguage(column int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTree[37], column, language) }
func (gdClass Tree) GetColumnTitleLanguage(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTree[38], column) }
func (gdClass Tree) GetScroll() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTree[39]) }
func (gdClass Tree) ScrollToItem(item TreeItem, center_on_item bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[40], item, center_on_item) }
func (gdClass Tree) SetHScrollEnabled(h_scroll bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[41], h_scroll) }
func (gdClass Tree) IsHScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[42]) }
func (gdClass Tree) SetVScrollEnabled(h_scroll bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[43], h_scroll) }
func (gdClass Tree) IsVScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[44]) }
func (gdClass Tree) SetHideFolding(hide bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[45], hide) }
func (gdClass Tree) IsFoldingHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[46]) }
func (gdClass Tree) SetDropModeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[47], flags) }
func (gdClass Tree) GetDropModeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[48]) }
func (gdClass Tree) SetAllowRmbSelect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[49], allow) }
func (gdClass Tree) GetAllowRmbSelect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[50]) }
func (gdClass Tree) SetAllowReselect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[51], allow) }
func (gdClass Tree) GetAllowReselect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[52]) }

type TreeItem gdnative.Object

var methodTreeItem [94]gdnative.Method

type TreeItemTreeCellMode int64

const (
	TreeItemCellModeString TreeItemTreeCellMode = 0
	TreeItemCellModeCheck TreeItemTreeCellMode = 1
	TreeItemCellModeRange TreeItemTreeCellMode = 2
	TreeItemCellModeIcon TreeItemTreeCellMode = 3
	TreeItemCellModeCustom TreeItemTreeCellMode = 4
)
func (gdClass TreeItem) SetCellMode(column int64, mode TreeItemTreeCellMode)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[0], column, mode) }
func (gdClass TreeItem) GetCellMode(column int64) TreeItemTreeCellMode { return gdnative.Return[TreeItemTreeCellMode](gdnative.Object(gdClass), methodTreeItem[1], column) }
func (gdClass TreeItem) SetChecked(column int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[2], column, checked) }
func (gdClass TreeItem) SetIndeterminate(column int64, indeterminate bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[3], column, indeterminate) }
func (gdClass TreeItem) IsChecked(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[4], column) }
func (gdClass TreeItem) IsIndeterminate(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[5], column) }
func (gdClass TreeItem) PropagateCheck(column int64, emit_signal bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[6], column, emit_signal) }
func (gdClass TreeItem) SetText(column int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[7], column, text) }
func (gdClass TreeItem) GetText(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[8], column) }
func (gdClass TreeItem) SetTextDirection(column int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[9], column, direction) }
func (gdClass TreeItem) GetTextDirection(column int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTreeItem[10], column) }
func (gdClass TreeItem) SetStructuredTextBidiOverride(column int64, parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[11], column, parser) }
func (gdClass TreeItem) GetStructuredTextBidiOverride(column int64) TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTreeItem[12], column) }
func (gdClass TreeItem) SetStructuredTextBidiOverrideOptions(column int64, args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[13], column, args) }
func (gdClass TreeItem) GetStructuredTextBidiOverrideOptions(column int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTreeItem[14], column) }
func (gdClass TreeItem) SetLanguage(column int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[15], column, language) }
func (gdClass TreeItem) GetLanguage(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[16], column) }
func (gdClass TreeItem) SetSuffix(column int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[17], column, text) }
func (gdClass TreeItem) GetSuffix(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[18], column) }
func (gdClass TreeItem) SetIcon(column int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[19], column, texture) }
func (gdClass TreeItem) GetIcon(column int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTreeItem[20], column) }
func (gdClass TreeItem) SetIconRegion(column int64, region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[21], column, region) }
func (gdClass TreeItem) GetIconRegion(column int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTreeItem[22], column) }
func (gdClass TreeItem) SetIconMaxWidth(column int64, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[23], column, width) }
func (gdClass TreeItem) GetIconMaxWidth(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[24], column) }
func (gdClass TreeItem) SetIconModulate(column int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[25], column, modulate) }
func (gdClass TreeItem) GetIconModulate(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[26], column) }
func (gdClass TreeItem) SetRange(column int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[27], column, value) }
func (gdClass TreeItem) GetRange(column int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTreeItem[28], column) }
func (gdClass TreeItem) SetRangeConfig(column int64, min float64, max float64, step float64, expr bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[29], column, min, max, step, expr) }
func (gdClass TreeItem) GetRangeConfig(column int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTreeItem[30], column) }
func (gdClass TreeItem) SetMetadata(column int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[31], column, meta) }
func (gdClass TreeItem) GetMetadata(column int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTreeItem[32], column) }
func (gdClass TreeItem) SetCustomDraw(column int64, object Object, callback string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[33], column, object, callback) }
func (gdClass TreeItem) SetCollapsed(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[34], enable) }
func (gdClass TreeItem) IsCollapsed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[35]) }
func (gdClass TreeItem) SetVisible(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[36], enable) }
func (gdClass TreeItem) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[37]) }
func (gdClass TreeItem) UncollapseTree()  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[38]) }
func (gdClass TreeItem) SetCustomMinimumHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[39], height) }
func (gdClass TreeItem) GetCustomMinimumHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[40]) }
func (gdClass TreeItem) SetSelectable(column int64, selectable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[41], column, selectable) }
func (gdClass TreeItem) IsSelectable(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[42], column) }
func (gdClass TreeItem) IsSelected(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[43], column) }
func (gdClass TreeItem) Select(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[44], column) }
func (gdClass TreeItem) Deselect(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[45], column) }
func (gdClass TreeItem) SetEditable(column int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[46], column, enabled) }
func (gdClass TreeItem) IsEditable(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[47], column) }
func (gdClass TreeItem) SetCustomColor(column int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[48], column, color) }
func (gdClass TreeItem) GetCustomColor(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[49], column) }
func (gdClass TreeItem) ClearCustomColor(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[50], column) }
func (gdClass TreeItem) SetCustomFont(column int64, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[51], column, font) }
func (gdClass TreeItem) GetCustomFont(column int64) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTreeItem[52], column) }
func (gdClass TreeItem) SetCustomFontSize(column int64, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[53], column, font_size) }
func (gdClass TreeItem) GetCustomFontSize(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[54], column) }
func (gdClass TreeItem) SetCustomBgColor(column int64, color Color, just_outline bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[55], column, color, just_outline) }
func (gdClass TreeItem) ClearCustomBgColor(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[56], column) }
func (gdClass TreeItem) GetCustomBgColor(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[57], column) }
func (gdClass TreeItem) SetCustomAsButton(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[58], column, enable) }
func (gdClass TreeItem) IsCustomSetAsButton(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[59], column) }
func (gdClass TreeItem) AddButton(column int64, button Texture2D, id int64, disabled bool, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[60], column, button, id, disabled, tooltip) }
func (gdClass TreeItem) GetButtonCount(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[61], column) }
func (gdClass TreeItem) GetButtonTooltip(column int64, button_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[62], column, button_idx) }
func (gdClass TreeItem) GetButtonId(column int64, button_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[63], column, button_idx) }
func (gdClass TreeItem) GetButtonById(column int64, id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[64], column, id) }
func (gdClass TreeItem) GetButton(column int64, button_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTreeItem[65], column, button_idx) }
func (gdClass TreeItem) SetButton(column int64, button_idx int64, button Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[66], column, button_idx, button) }
func (gdClass TreeItem) EraseButton(column int64, button_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[67], column, button_idx) }
func (gdClass TreeItem) SetButtonDisabled(column int64, button_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[68], column, button_idx, disabled) }
func (gdClass TreeItem) IsButtonDisabled(column int64, button_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[69], column, button_idx) }
func (gdClass TreeItem) SetTooltip(column int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[70], column, tooltip) }
func (gdClass TreeItem) GetTooltip(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[71], column) }
func (gdClass TreeItem) SetTextAlignment(column int64, text_alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[72], column, text_alignment) }
func (gdClass TreeItem) GetTextAlignment(column int64) HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTreeItem[73], column) }
func (gdClass TreeItem) SetExpandRight(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[74], column, enable) }
func (gdClass TreeItem) GetExpandRight(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[75], column) }
func (gdClass TreeItem) SetDisableFolding(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[76], disable) }
func (gdClass TreeItem) IsFoldingDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[77]) }
func (gdClass TreeItem) CreateChild(idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[78], idx) }
func (gdClass TreeItem) GetTree() Tree { return gdnative.Return[Tree](gdnative.Object(gdClass), methodTreeItem[79]) }
func (gdClass TreeItem) GetNext() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[80]) }
func (gdClass TreeItem) GetPrev() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[81]) }
func (gdClass TreeItem) GetParent() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[82]) }
func (gdClass TreeItem) GetFirstChild() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[83]) }
func (gdClass TreeItem) GetNextVisible(wrap bool) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[84], wrap) }
func (gdClass TreeItem) GetPrevVisible(wrap bool) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[85], wrap) }
func (gdClass TreeItem) GetChild(idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[86], idx) }
func (gdClass TreeItem) GetChildCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[87]) }
func (gdClass TreeItem) GetChildren() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTreeItem[88]) }
func (gdClass TreeItem) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[89]) }
func (gdClass TreeItem) MoveBefore(item TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[90], item) }
func (gdClass TreeItem) MoveAfter(item TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[91], item) }
func (gdClass TreeItem) RemoveChild(child TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[92], child) }
func (gdClass TreeItem) CallRecursive(method string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[93], method) }

type TriangleMesh gdnative.Object

var methodTriangleMesh [0]gdnative.Method

type TubeTrailMesh gdnative.Object

var methodTubeTrailMesh [12]gdnative.Method
func (gdClass TubeTrailMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[0], radius) }
func (gdClass TubeTrailMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTubeTrailMesh[1]) }
func (gdClass TubeTrailMesh) SetRadialSteps(radial_steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[2], radial_steps) }
func (gdClass TubeTrailMesh) GetRadialSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[3]) }
func (gdClass TubeTrailMesh) SetSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[4], sections) }
func (gdClass TubeTrailMesh) GetSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[5]) }
func (gdClass TubeTrailMesh) SetSectionLength(section_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[6], section_length) }
func (gdClass TubeTrailMesh) GetSectionLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTubeTrailMesh[7]) }
func (gdClass TubeTrailMesh) SetSectionRings(section_rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[8], section_rings) }
func (gdClass TubeTrailMesh) GetSectionRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[9]) }
func (gdClass TubeTrailMesh) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[10], curve) }
func (gdClass TubeTrailMesh) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodTubeTrailMesh[11]) }

type Tween gdnative.Object

var methodTween [23]gdnative.Method

type TweenTweenProcessMode int64

const (
	TweenTweenProcessPhysics TweenTweenProcessMode = 0
	TweenTweenProcessIdle TweenTweenProcessMode = 1
)

type TweenTweenPauseMode int64

const (
	TweenTweenPauseBound TweenTweenPauseMode = 0
	TweenTweenPauseStop TweenTweenPauseMode = 1
	TweenTweenPauseProcess TweenTweenPauseMode = 2
)

type TweenTransitionType int64

const (
	TweenTransLinear TweenTransitionType = 0
	TweenTransSine TweenTransitionType = 1
	TweenTransQuint TweenTransitionType = 2
	TweenTransQuart TweenTransitionType = 3
	TweenTransQuad TweenTransitionType = 4
	TweenTransExpo TweenTransitionType = 5
	TweenTransElastic TweenTransitionType = 6
	TweenTransCubic TweenTransitionType = 7
	TweenTransCirc TweenTransitionType = 8
	TweenTransBounce TweenTransitionType = 9
	TweenTransBack TweenTransitionType = 10
)

type TweenEaseType int64

const (
	TweenEaseIn TweenEaseType = 0
	TweenEaseOut TweenEaseType = 1
	TweenEaseInOut TweenEaseType = 2
	TweenEaseOutIn TweenEaseType = 3
)
func (gdClass Tween) TweenProperty(object Object, property NodePath, final_val any, duration float64) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodTween[0], object, property, final_val, duration) }
func (gdClass Tween) TweenInterval(time float64) IntervalTweener { return gdnative.Return[IntervalTweener](gdnative.Object(gdClass), methodTween[1], time) }
func (gdClass Tween) TweenCallback(callback Callable) CallbackTweener { return gdnative.Return[CallbackTweener](gdnative.Object(gdClass), methodTween[2], callback) }
func (gdClass Tween) TweenMethod(method Callable, from any, to any, duration float64) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodTween[3], method, from, to, duration) }
func (gdClass Tween) CustomStep(delta float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[4], delta) }
func (gdClass Tween) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTween[5]) }
func (gdClass Tween) Pause()  { gdnative.Call(gdnative.Object(gdClass), methodTween[6]) }
func (gdClass Tween) Play()  { gdnative.Call(gdnative.Object(gdClass), methodTween[7]) }
func (gdClass Tween) Kill()  { gdnative.Call(gdnative.Object(gdClass), methodTween[8]) }
func (gdClass Tween) GetTotalElapsedTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTween[9]) }
func (gdClass Tween) IsRunning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[10]) }
func (gdClass Tween) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[11]) }
func (gdClass Tween) BindNode(node Node) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[12], node) }
func (gdClass Tween) SetProcessMode(mode TweenTweenProcessMode) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[13], mode) }
func (gdClass Tween) SetPauseMode(mode TweenTweenPauseMode) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[14], mode) }
func (gdClass Tween) SetParallel(parallel bool) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[15], parallel) }
func (gdClass Tween) SetLoops(loops int64) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[16], loops) }
func (gdClass Tween) SetSpeedScale(speed float64) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[17], speed) }
func (gdClass Tween) SetTrans(trans TweenTransitionType) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[18], trans) }
func (gdClass Tween) SetEase(ease TweenEaseType) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[19], ease) }
func (gdClass Tween) Parallel() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[20]) }
func (gdClass Tween) Chain() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[21]) }
func (gdClass Tween) InterpolateValue(initial_value any, delta_value any, elapsed_time float64, duration float64, trans_type TweenTransitionType, ease_type TweenEaseType) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTween[22], initial_value, delta_value, elapsed_time, duration, trans_type, ease_type) }

type Tweener gdnative.Object

var methodTweener [0]gdnative.Method

type UDPServer gdnative.Object

var methodUDPServer [9]gdnative.Method
func (gdClass UDPServer) Listen(port int64, bind_address string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodUDPServer[0], port, bind_address) }
func (gdClass UDPServer) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodUDPServer[1]) }
func (gdClass UDPServer) IsConnectionAvailable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUDPServer[2]) }
func (gdClass UDPServer) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUDPServer[3]) }
func (gdClass UDPServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUDPServer[4]) }
func (gdClass UDPServer) TakeConnection() PacketPeerUDP { return gdnative.Return[PacketPeerUDP](gdnative.Object(gdClass), methodUDPServer[5]) }
func (gdClass UDPServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodUDPServer[6]) }
func (gdClass UDPServer) SetMaxPendingConnections(max_pending_connections int64)  { gdnative.Call(gdnative.Object(gdClass), methodUDPServer[7], max_pending_connections) }
func (gdClass UDPServer) GetMaxPendingConnections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUDPServer[8]) }

type UPNP gdnative.Object

var methodUPNP [17]gdnative.Method

type UPNPUPNPResult int64

const (
	UPNPUpnpResultSuccess UPNPUPNPResult = 0
	UPNPUpnpResultNotAuthorized UPNPUPNPResult = 1
	UPNPUpnpResultPortMappingNotFound UPNPUPNPResult = 2
	UPNPUpnpResultInconsistentParameters UPNPUPNPResult = 3
	UPNPUpnpResultNoSuchEntryInArray UPNPUPNPResult = 4
	UPNPUpnpResultActionFailed UPNPUPNPResult = 5
	UPNPUpnpResultSrcIpWildcardNotPermitted UPNPUPNPResult = 6
	UPNPUpnpResultExtPortWildcardNotPermitted UPNPUPNPResult = 7
	UPNPUpnpResultIntPortWildcardNotPermitted UPNPUPNPResult = 8
	UPNPUpnpResultRemoteHostMustBeWildcard UPNPUPNPResult = 9
	UPNPUpnpResultExtPortMustBeWildcard UPNPUPNPResult = 10
	UPNPUpnpResultNoPortMapsAvailable UPNPUPNPResult = 11
	UPNPUpnpResultConflictWithOtherMechanism UPNPUPNPResult = 12
	UPNPUpnpResultConflictWithOtherMapping UPNPUPNPResult = 13
	UPNPUpnpResultSamePortValuesRequired UPNPUPNPResult = 14
	UPNPUpnpResultOnlyPermanentLeaseSupported UPNPUPNPResult = 15
	UPNPUpnpResultInvalidGateway UPNPUPNPResult = 16
	UPNPUpnpResultInvalidPort UPNPUPNPResult = 17
	UPNPUpnpResultInvalidProtocol UPNPUPNPResult = 18
	UPNPUpnpResultInvalidDuration UPNPUPNPResult = 19
	UPNPUpnpResultInvalidArgs UPNPUPNPResult = 20
	UPNPUpnpResultInvalidResponse UPNPUPNPResult = 21
	UPNPUpnpResultInvalidParam UPNPUPNPResult = 22
	UPNPUpnpResultHttpError UPNPUPNPResult = 23
	UPNPUpnpResultSocketError UPNPUPNPResult = 24
	UPNPUpnpResultMemAllocError UPNPUPNPResult = 25
	UPNPUpnpResultNoGateway UPNPUPNPResult = 26
	UPNPUpnpResultNoDevices UPNPUPNPResult = 27
	UPNPUpnpResultUnknownError UPNPUPNPResult = 28
)
func (gdClass UPNP) GetDeviceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[0]) }
func (gdClass UPNP) GetDevice(index int64) UPNPDevice { return gdnative.Return[UPNPDevice](gdnative.Object(gdClass), methodUPNP[1], index) }
func (gdClass UPNP) AddDevice(device UPNPDevice)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[2], device) }
func (gdClass UPNP) SetDevice(index int64, device UPNPDevice)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[3], index, device) }
func (gdClass UPNP) RemoveDevice(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[4], index) }
func (gdClass UPNP) ClearDevices()  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[5]) }
func (gdClass UPNP) GetGateway() UPNPDevice { return gdnative.Return[UPNPDevice](gdnative.Object(gdClass), methodUPNP[6]) }
func (gdClass UPNP) Discover(timeout int64, ttl int64, device_filter string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[7], timeout, ttl, device_filter) }
func (gdClass UPNP) QueryExternalAddress() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNP[8]) }
func (gdClass UPNP) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[9], port, port_internal, desc, proto, duration) }
func (gdClass UPNP) DeletePortMapping(port int64, proto string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[10], port, proto) }
func (gdClass UPNP) SetDiscoverMulticastIf(m_if string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[11], m_if) }
func (gdClass UPNP) GetDiscoverMulticastIf() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNP[12]) }
func (gdClass UPNP) SetDiscoverLocalPort(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[13], port) }
func (gdClass UPNP) GetDiscoverLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[14]) }
func (gdClass UPNP) SetDiscoverIpv6(ipv6 bool)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[15], ipv6) }
func (gdClass UPNP) IsDiscoverIpv6() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUPNP[16]) }

type UPNPDevice gdnative.Object

var methodUPNPDevice [16]gdnative.Method

type UPNPDeviceIGDStatus int64

const (
	UPNPDeviceIgdStatusOk UPNPDeviceIGDStatus = 0
	UPNPDeviceIgdStatusHttpError UPNPDeviceIGDStatus = 1
	UPNPDeviceIgdStatusHttpEmpty UPNPDeviceIGDStatus = 2
	UPNPDeviceIgdStatusNoUrls UPNPDeviceIGDStatus = 3
	UPNPDeviceIgdStatusNoIgd UPNPDeviceIGDStatus = 4
	UPNPDeviceIgdStatusDisconnected UPNPDeviceIGDStatus = 5
	UPNPDeviceIgdStatusUnknownDevice UPNPDeviceIGDStatus = 6
	UPNPDeviceIgdStatusInvalidControl UPNPDeviceIGDStatus = 7
	UPNPDeviceIgdStatusMallocError UPNPDeviceIGDStatus = 8
	UPNPDeviceIgdStatusUnknownError UPNPDeviceIGDStatus = 9
)
func (gdClass UPNPDevice) IsValidGateway() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUPNPDevice[0]) }
func (gdClass UPNPDevice) QueryExternalAddress() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[1]) }
func (gdClass UPNPDevice) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNPDevice[2], port, port_internal, desc, proto, duration) }
func (gdClass UPNPDevice) DeletePortMapping(port int64, proto string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNPDevice[3], port, proto) }
func (gdClass UPNPDevice) SetDescriptionUrl(url string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[4], url) }
func (gdClass UPNPDevice) GetDescriptionUrl() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[5]) }
func (gdClass UPNPDevice) SetServiceType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[6], atype) }
func (gdClass UPNPDevice) GetServiceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[7]) }
func (gdClass UPNPDevice) SetIgdControlUrl(url string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[8], url) }
func (gdClass UPNPDevice) GetIgdControlUrl() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[9]) }
func (gdClass UPNPDevice) SetIgdServiceType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[10], atype) }
func (gdClass UPNPDevice) GetIgdServiceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[11]) }
func (gdClass UPNPDevice) SetIgdOurAddr(addr string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[12], addr) }
func (gdClass UPNPDevice) GetIgdOurAddr() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[13]) }
func (gdClass UPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[14], status) }
func (gdClass UPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus { return gdnative.Return[UPNPDeviceIGDStatus](gdnative.Object(gdClass), methodUPNPDevice[15]) }

type UndoRedo gdnative.Object

var methodUndoRedo [21]gdnative.Method

type UndoRedoMergeMode int64

const (
	UndoRedoMergeDisable UndoRedoMergeMode = 0
	UndoRedoMergeEnds UndoRedoMergeMode = 1
	UndoRedoMergeAll UndoRedoMergeMode = 2
)
func (gdClass UndoRedo) CreateAction(name string, merge_mode UndoRedoMergeMode)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[0], name, merge_mode) }
func (gdClass UndoRedo) CommitAction(execute bool)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[1], execute) }
func (gdClass UndoRedo) IsCommittingAction() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[2]) }
func (gdClass UndoRedo) AddDoMethod(object Object, method string)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[3], object, method) }
func (gdClass UndoRedo) AddUndoMethod(object Object, method string)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[4], object, method) }
func (gdClass UndoRedo) AddDoProperty(object Object, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[5], object, property, value) }
func (gdClass UndoRedo) AddUndoProperty(object Object, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[6], object, property, value) }
func (gdClass UndoRedo) AddDoReference(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[7], object) }
func (gdClass UndoRedo) AddUndoReference(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[8], object) }
func (gdClass UndoRedo) StartForceKeepInMergeEnds()  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[9]) }
func (gdClass UndoRedo) EndForceKeepInMergeEnds()  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[10]) }
func (gdClass UndoRedo) GetHistoryCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[11]) }
func (gdClass UndoRedo) GetCurrentAction() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[12]) }
func (gdClass UndoRedo) GetActionName(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodUndoRedo[13], id) }
func (gdClass UndoRedo) ClearHistory(increase_version bool)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[14], increase_version) }
func (gdClass UndoRedo) GetCurrentActionName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUndoRedo[15]) }
func (gdClass UndoRedo) HasUndo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[16]) }
func (gdClass UndoRedo) HasRedo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[17]) }
func (gdClass UndoRedo) GetVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[18]) }
func (gdClass UndoRedo) Redo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[19]) }
func (gdClass UndoRedo) Undo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[20]) }

type VBoxContainer gdnative.Object

var methodVBoxContainer [0]gdnative.Method

type VFlowContainer gdnative.Object

var methodVFlowContainer [0]gdnative.Method

type VScrollBar gdnative.Object

var methodVScrollBar [0]gdnative.Method

type VSeparator gdnative.Object

var methodVSeparator [0]gdnative.Method

type VSlider gdnative.Object

var methodVSlider [0]gdnative.Method

type VSplitContainer gdnative.Object

var methodVSplitContainer [0]gdnative.Method

type VehicleBody3D gdnative.Object

var methodVehicleBody3D [6]gdnative.Method
func (gdClass VehicleBody3D) SetEngineForce(engine_force float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[0], engine_force) }
func (gdClass VehicleBody3D) GetEngineForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[1]) }
func (gdClass VehicleBody3D) SetBrake(brake float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[2], brake) }
func (gdClass VehicleBody3D) GetBrake() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[3]) }
func (gdClass VehicleBody3D) SetSteering(steering float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[4], steering) }
func (gdClass VehicleBody3D) GetSteering() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[5]) }

type VehicleWheel3D gdnative.Object

var methodVehicleWheel3D [32]gdnative.Method
func (gdClass VehicleWheel3D) SetRadius(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[0], length) }
func (gdClass VehicleWheel3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[1]) }
func (gdClass VehicleWheel3D) SetSuspensionRestLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[2], length) }
func (gdClass VehicleWheel3D) GetSuspensionRestLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[3]) }
func (gdClass VehicleWheel3D) SetSuspensionTravel(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[4], length) }
func (gdClass VehicleWheel3D) GetSuspensionTravel() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[5]) }
func (gdClass VehicleWheel3D) SetSuspensionStiffness(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[6], length) }
func (gdClass VehicleWheel3D) GetSuspensionStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[7]) }
func (gdClass VehicleWheel3D) SetSuspensionMaxForce(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[8], length) }
func (gdClass VehicleWheel3D) GetSuspensionMaxForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[9]) }
func (gdClass VehicleWheel3D) SetDampingCompression(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[10], length) }
func (gdClass VehicleWheel3D) GetDampingCompression() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[11]) }
func (gdClass VehicleWheel3D) SetDampingRelaxation(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[12], length) }
func (gdClass VehicleWheel3D) GetDampingRelaxation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[13]) }
func (gdClass VehicleWheel3D) SetUseAsTraction(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[14], enable) }
func (gdClass VehicleWheel3D) IsUsedAsTraction() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[15]) }
func (gdClass VehicleWheel3D) SetUseAsSteering(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[16], enable) }
func (gdClass VehicleWheel3D) IsUsedAsSteering() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[17]) }
func (gdClass VehicleWheel3D) SetFrictionSlip(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[18], length) }
func (gdClass VehicleWheel3D) GetFrictionSlip() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[19]) }
func (gdClass VehicleWheel3D) IsInContact() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[20]) }
func (gdClass VehicleWheel3D) GetContactBody() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodVehicleWheel3D[21]) }
func (gdClass VehicleWheel3D) SetRollInfluence(roll_influence float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[22], roll_influence) }
func (gdClass VehicleWheel3D) GetRollInfluence() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[23]) }
func (gdClass VehicleWheel3D) GetSkidinfo() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[24]) }
func (gdClass VehicleWheel3D) GetRpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[25]) }
func (gdClass VehicleWheel3D) SetEngineForce(engine_force float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[26], engine_force) }
func (gdClass VehicleWheel3D) GetEngineForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[27]) }
func (gdClass VehicleWheel3D) SetBrake(brake float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[28], brake) }
func (gdClass VehicleWheel3D) GetBrake() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[29]) }
func (gdClass VehicleWheel3D) SetSteering(steering float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[30], steering) }
func (gdClass VehicleWheel3D) GetSteering() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[31]) }

type VelocityTracker3D gdnative.Object

var methodVelocityTracker3D [5]gdnative.Method
func (gdClass VelocityTracker3D) SetTrackPhysicsStep(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVelocityTracker3D[0], enable) }
func (gdClass VelocityTracker3D) IsTrackingPhysicsStep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVelocityTracker3D[1]) }
func (gdClass VelocityTracker3D) UpdatePosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVelocityTracker3D[2], position) }
func (gdClass VelocityTracker3D) GetTrackedLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVelocityTracker3D[3]) }
func (gdClass VelocityTracker3D) Reset(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVelocityTracker3D[4], position) }

type VideoStream gdnative.Object

var methodVideoStream [0]gdnative.Method

type VideoStreamPlayer gdnative.Object

var methodVideoStreamPlayer [25]gdnative.Method
func (gdClass VideoStreamPlayer) SetStream(stream VideoStream)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[0], stream) }
func (gdClass VideoStreamPlayer) GetStream() VideoStream { return gdnative.Return[VideoStream](gdnative.Object(gdClass), methodVideoStreamPlayer[1]) }
func (gdClass VideoStreamPlayer) Play()  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[2]) }
func (gdClass VideoStreamPlayer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[3]) }
func (gdClass VideoStreamPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[4]) }
func (gdClass VideoStreamPlayer) SetPaused(paused bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[5], paused) }
func (gdClass VideoStreamPlayer) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[6]) }
func (gdClass VideoStreamPlayer) SetVolume(volume float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[7], volume) }
func (gdClass VideoStreamPlayer) GetVolume() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[8]) }
func (gdClass VideoStreamPlayer) SetVolumeDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[9], db) }
func (gdClass VideoStreamPlayer) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[10]) }
func (gdClass VideoStreamPlayer) SetAudioTrack(track int64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[11], track) }
func (gdClass VideoStreamPlayer) GetAudioTrack() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVideoStreamPlayer[12]) }
func (gdClass VideoStreamPlayer) GetStreamName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamPlayer[13]) }
func (gdClass VideoStreamPlayer) SetStreamPosition(position float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[14], position) }
func (gdClass VideoStreamPlayer) GetStreamPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[15]) }
func (gdClass VideoStreamPlayer) SetAutoplay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[16], enabled) }
func (gdClass VideoStreamPlayer) HasAutoplay() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[17]) }
func (gdClass VideoStreamPlayer) SetExpand(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[18], enable) }
func (gdClass VideoStreamPlayer) HasExpand() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[19]) }
func (gdClass VideoStreamPlayer) SetBufferingMsec(msec int64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[20], msec) }
func (gdClass VideoStreamPlayer) GetBufferingMsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVideoStreamPlayer[21]) }
func (gdClass VideoStreamPlayer) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[22], bus) }
func (gdClass VideoStreamPlayer) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamPlayer[23]) }
func (gdClass VideoStreamPlayer) GetVideoTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodVideoStreamPlayer[24]) }

type VideoStreamTheora gdnative.Object

var methodVideoStreamTheora [2]gdnative.Method
func (gdClass VideoStreamTheora) SetFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamTheora[0], file) }
func (gdClass VideoStreamTheora) GetFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamTheora[1]) }

type Viewport gdnative.Object

var methodViewport [95]gdnative.Method

type ViewportPositionalShadowAtlasQuadrantSubdiv int64

const (
	ViewportShadowAtlasQuadrantSubdivDisabled ViewportPositionalShadowAtlasQuadrantSubdiv = 0
	ViewportShadowAtlasQuadrantSubdiv1 ViewportPositionalShadowAtlasQuadrantSubdiv = 1
	ViewportShadowAtlasQuadrantSubdiv4 ViewportPositionalShadowAtlasQuadrantSubdiv = 2
	ViewportShadowAtlasQuadrantSubdiv16 ViewportPositionalShadowAtlasQuadrantSubdiv = 3
	ViewportShadowAtlasQuadrantSubdiv64 ViewportPositionalShadowAtlasQuadrantSubdiv = 4
	ViewportShadowAtlasQuadrantSubdiv256 ViewportPositionalShadowAtlasQuadrantSubdiv = 5
	ViewportShadowAtlasQuadrantSubdiv1024 ViewportPositionalShadowAtlasQuadrantSubdiv = 6
	ViewportShadowAtlasQuadrantSubdivMax ViewportPositionalShadowAtlasQuadrantSubdiv = 7
)

type ViewportScaling3DMode int64

const (
	ViewportScaling3dModeBilinear ViewportScaling3DMode = 0
	ViewportScaling3dModeFsr ViewportScaling3DMode = 1
	ViewportScaling3dModeMax ViewportScaling3DMode = 2
)

type ViewportMSAA int64

const (
	ViewportMsaaDisabled ViewportMSAA = 0
	ViewportMsaa2x ViewportMSAA = 1
	ViewportMsaa4x ViewportMSAA = 2
	ViewportMsaa8x ViewportMSAA = 3
	ViewportMsaaMax ViewportMSAA = 4
)

type ViewportScreenSpaceAA int64

const (
	ViewportScreenSpaceAaDisabled ViewportScreenSpaceAA = 0
	ViewportScreenSpaceAaFxaa ViewportScreenSpaceAA = 1
	ViewportScreenSpaceAaMax ViewportScreenSpaceAA = 2
)

type ViewportRenderInfo int64

const (
	ViewportRenderInfoObjectsInFrame ViewportRenderInfo = 0
	ViewportRenderInfoPrimitivesInFrame ViewportRenderInfo = 1
	ViewportRenderInfoDrawCallsInFrame ViewportRenderInfo = 2
	ViewportRenderInfoMax ViewportRenderInfo = 3
)

type ViewportRenderInfoType int64

const (
	ViewportRenderInfoTypeVisible ViewportRenderInfoType = 0
	ViewportRenderInfoTypeShadow ViewportRenderInfoType = 1
	ViewportRenderInfoTypeMax ViewportRenderInfoType = 2
)

type ViewportDebugDraw int64

const (
	ViewportDebugDrawDisabled ViewportDebugDraw = 0
	ViewportDebugDrawUnshaded ViewportDebugDraw = 1
	ViewportDebugDrawLighting ViewportDebugDraw = 2
	ViewportDebugDrawOverdraw ViewportDebugDraw = 3
	ViewportDebugDrawWireframe ViewportDebugDraw = 4
	ViewportDebugDrawNormalBuffer ViewportDebugDraw = 5
	ViewportDebugDrawVoxelGiAlbedo ViewportDebugDraw = 6
	ViewportDebugDrawVoxelGiLighting ViewportDebugDraw = 7
	ViewportDebugDrawVoxelGiEmission ViewportDebugDraw = 8
	ViewportDebugDrawShadowAtlas ViewportDebugDraw = 9
	ViewportDebugDrawDirectionalShadowAtlas ViewportDebugDraw = 10
	ViewportDebugDrawSceneLuminance ViewportDebugDraw = 11
	ViewportDebugDrawSsao ViewportDebugDraw = 12
	ViewportDebugDrawSsil ViewportDebugDraw = 13
	ViewportDebugDrawPssmSplits ViewportDebugDraw = 14
	ViewportDebugDrawDecalAtlas ViewportDebugDraw = 15
	ViewportDebugDrawSdfgi ViewportDebugDraw = 16
	ViewportDebugDrawSdfgiProbes ViewportDebugDraw = 17
	ViewportDebugDrawGiBuffer ViewportDebugDraw = 18
	ViewportDebugDrawDisableLod ViewportDebugDraw = 19
	ViewportDebugDrawClusterOmniLights ViewportDebugDraw = 20
	ViewportDebugDrawClusterSpotLights ViewportDebugDraw = 21
	ViewportDebugDrawClusterDecals ViewportDebugDraw = 22
	ViewportDebugDrawClusterReflectionProbes ViewportDebugDraw = 23
	ViewportDebugDrawOccluders ViewportDebugDraw = 24
	ViewportDebugDrawMotionVectors ViewportDebugDraw = 25
)

type ViewportDefaultCanvasItemTextureFilter int64

const (
	ViewportDefaultCanvasItemTextureFilterNearest ViewportDefaultCanvasItemTextureFilter = 0
	ViewportDefaultCanvasItemTextureFilterLinear ViewportDefaultCanvasItemTextureFilter = 1
	ViewportDefaultCanvasItemTextureFilterLinearWithMipmaps ViewportDefaultCanvasItemTextureFilter = 2
	ViewportDefaultCanvasItemTextureFilterNearestWithMipmaps ViewportDefaultCanvasItemTextureFilter = 3
	ViewportDefaultCanvasItemTextureFilterMax ViewportDefaultCanvasItemTextureFilter = 4
)

type ViewportDefaultCanvasItemTextureRepeat int64

const (
	ViewportDefaultCanvasItemTextureRepeatDisabled ViewportDefaultCanvasItemTextureRepeat = 0
	ViewportDefaultCanvasItemTextureRepeatEnabled ViewportDefaultCanvasItemTextureRepeat = 1
	ViewportDefaultCanvasItemTextureRepeatMirror ViewportDefaultCanvasItemTextureRepeat = 2
	ViewportDefaultCanvasItemTextureRepeatMax ViewportDefaultCanvasItemTextureRepeat = 3
)

type ViewportSDFOversize int64

const (
	ViewportSdfOversize100Percent ViewportSDFOversize = 0
	ViewportSdfOversize120Percent ViewportSDFOversize = 1
	ViewportSdfOversize150Percent ViewportSDFOversize = 2
	ViewportSdfOversize200Percent ViewportSDFOversize = 3
	ViewportSdfOversizeMax ViewportSDFOversize = 4
)

type ViewportSDFScale int64

const (
	ViewportSdfScale100Percent ViewportSDFScale = 0
	ViewportSdfScale50Percent ViewportSDFScale = 1
	ViewportSdfScale25Percent ViewportSDFScale = 2
	ViewportSdfScaleMax ViewportSDFScale = 3
)

type ViewportVRSMode int64

const (
	ViewportVrsDisabled ViewportVRSMode = 0
	ViewportVrsTexture ViewportVRSMode = 1
	ViewportVrsXr ViewportVRSMode = 2
	ViewportVrsMax ViewportVRSMode = 3
)
func (gdClass Viewport) SetWorld2d(world_2d World2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[0], world_2d) }
func (gdClass Viewport) GetWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodViewport[1]) }
func (gdClass Viewport) FindWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodViewport[2]) }
func (gdClass Viewport) SetCanvasTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[3], xform) }
func (gdClass Viewport) GetCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[4]) }
func (gdClass Viewport) SetGlobalCanvasTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[5], xform) }
func (gdClass Viewport) GetGlobalCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[6]) }
func (gdClass Viewport) GetFinalTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[7]) }
func (gdClass Viewport) GetVisibleRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodViewport[8]) }
func (gdClass Viewport) SetTransparentBackground(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[9], enable) }
func (gdClass Viewport) HasTransparentBackground() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[10]) }
func (gdClass Viewport) SetMsaa(msaa ViewportMSAA)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[11], msaa) }
func (gdClass Viewport) GetMsaa() ViewportMSAA { return gdnative.Return[ViewportMSAA](gdnative.Object(gdClass), methodViewport[12]) }
func (gdClass Viewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[13], screen_space_aa) }
func (gdClass Viewport) GetScreenSpaceAa() ViewportScreenSpaceAA { return gdnative.Return[ViewportScreenSpaceAA](gdnative.Object(gdClass), methodViewport[14]) }
func (gdClass Viewport) SetUseTaa(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[15], enable) }
func (gdClass Viewport) IsUsingTaa() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[16]) }
func (gdClass Viewport) SetUseDebanding(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[17], enable) }
func (gdClass Viewport) IsUsingDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[18]) }
func (gdClass Viewport) SetUseOcclusionCulling(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[19], enable) }
func (gdClass Viewport) IsUsingOcclusionCulling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[20]) }
func (gdClass Viewport) SetDebugDraw(debug_draw ViewportDebugDraw)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[21], debug_draw) }
func (gdClass Viewport) GetDebugDraw() ViewportDebugDraw { return gdnative.Return[ViewportDebugDraw](gdnative.Object(gdClass), methodViewport[22]) }
func (gdClass Viewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodViewport[23], atype, info) }
func (gdClass Viewport) GetTexture() ViewportTexture { return gdnative.Return[ViewportTexture](gdnative.Object(gdClass), methodViewport[24]) }
func (gdClass Viewport) SetPhysicsObjectPicking(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[25], enable) }
func (gdClass Viewport) GetPhysicsObjectPicking() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[26]) }
func (gdClass Viewport) GetViewportRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodViewport[27]) }
func (gdClass Viewport) PushTextInput(text string)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[28], text) }
func (gdClass Viewport) PushInput(event InputEvent, in_local_coords bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[29], event, in_local_coords) }
func (gdClass Viewport) PushUnhandledInput(event InputEvent, in_local_coords bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[30], event, in_local_coords) }
func (gdClass Viewport) GetCamera2d() Camera2D { return gdnative.Return[Camera2D](gdnative.Object(gdClass), methodViewport[31]) }
func (gdClass Viewport) SetAsAudioListener2d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[32], enable) }
func (gdClass Viewport) IsAudioListener2d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[33]) }
func (gdClass Viewport) GetMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodViewport[34]) }
func (gdClass Viewport) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[35], position) }
func (gdClass Viewport) GuiGetDragData() any { return gdnative.Return[any](gdnative.Object(gdClass), methodViewport[36]) }
func (gdClass Viewport) GuiIsDragging() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[37]) }
func (gdClass Viewport) GuiIsDragSuccessful() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[38]) }
func (gdClass Viewport) GuiReleaseFocus()  { gdnative.Call(gdnative.Object(gdClass), methodViewport[39]) }
func (gdClass Viewport) GuiGetFocusOwner() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodViewport[40]) }
func (gdClass Viewport) SetDisableInput(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[41], disable) }
func (gdClass Viewport) IsInputDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[42]) }
func (gdClass Viewport) SetPositionalShadowAtlasSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[43], size) }
func (gdClass Viewport) GetPositionalShadowAtlasSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodViewport[44]) }
func (gdClass Viewport) SetPositionalShadowAtlas16Bits(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[45], enable) }
func (gdClass Viewport) GetPositionalShadowAtlas16Bits() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[46]) }
func (gdClass Viewport) SetSnapControlsToPixels(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[47], enabled) }
func (gdClass Viewport) IsSnapControlsToPixelsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[48]) }
func (gdClass Viewport) SetSnap2dTransformsToPixel(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[49], enabled) }
func (gdClass Viewport) IsSnap2dTransformsToPixelEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[50]) }
func (gdClass Viewport) SetSnap2dVerticesToPixel(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[51], enabled) }
func (gdClass Viewport) IsSnap2dVerticesToPixelEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[52]) }
func (gdClass Viewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant int64, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[53], quadrant, subdiv) }
func (gdClass Viewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant int64) ViewportPositionalShadowAtlasQuadrantSubdiv { return gdnative.Return[ViewportPositionalShadowAtlasQuadrantSubdiv](gdnative.Object(gdClass), methodViewport[54], quadrant) }
func (gdClass Viewport) SetInputAsHandled()  { gdnative.Call(gdnative.Object(gdClass), methodViewport[55]) }
func (gdClass Viewport) IsInputHandled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[56]) }
func (gdClass Viewport) SetHandleInputLocally(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[57], enable) }
func (gdClass Viewport) IsHandlingInputLocally() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[58]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[59], mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter { return gdnative.Return[ViewportDefaultCanvasItemTextureFilter](gdnative.Object(gdClass), methodViewport[60]) }
func (gdClass Viewport) SetEmbeddingSubwindows(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[61], enable) }
func (gdClass Viewport) IsEmbeddingSubwindows() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[62]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[63], mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat { return gdnative.Return[ViewportDefaultCanvasItemTextureRepeat](gdnative.Object(gdClass), methodViewport[64]) }
func (gdClass Viewport) SetSdfOversize(oversize ViewportSDFOversize)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[65], oversize) }
func (gdClass Viewport) GetSdfOversize() ViewportSDFOversize { return gdnative.Return[ViewportSDFOversize](gdnative.Object(gdClass), methodViewport[66]) }
func (gdClass Viewport) SetSdfScale(scale ViewportSDFScale)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[67], scale) }
func (gdClass Viewport) GetSdfScale() ViewportSDFScale { return gdnative.Return[ViewportSDFScale](gdnative.Object(gdClass), methodViewport[68]) }
func (gdClass Viewport) SetMeshLodThreshold(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[69], pixels) }
func (gdClass Viewport) GetMeshLodThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[70]) }
func (gdClass Viewport) SetWorld3d(world_3d World3D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[71], world_3d) }
func (gdClass Viewport) GetWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodViewport[72]) }
func (gdClass Viewport) FindWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodViewport[73]) }
func (gdClass Viewport) SetUseOwnWorld3d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[74], enable) }
func (gdClass Viewport) IsUsingOwnWorld3d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[75]) }
func (gdClass Viewport) GetCamera3d() Camera3D { return gdnative.Return[Camera3D](gdnative.Object(gdClass), methodViewport[76]) }
func (gdClass Viewport) SetAsAudioListener3d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[77], enable) }
func (gdClass Viewport) IsAudioListener3d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[78]) }
func (gdClass Viewport) SetDisable3d(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[79], disable) }
func (gdClass Viewport) Is3dDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[80]) }
func (gdClass Viewport) SetUseXr(use bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[81], use) }
func (gdClass Viewport) IsUsingXr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[82]) }
func (gdClass Viewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[83], scaling_3d_mode) }
func (gdClass Viewport) GetScaling3dMode() ViewportScaling3DMode { return gdnative.Return[ViewportScaling3DMode](gdnative.Object(gdClass), methodViewport[84]) }
func (gdClass Viewport) SetScaling3dScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[85], scale) }
func (gdClass Viewport) GetScaling3dScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[86]) }
func (gdClass Viewport) SetFsrSharpness(fsr_sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[87], fsr_sharpness) }
func (gdClass Viewport) GetFsrSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[88]) }
func (gdClass Viewport) SetTextureMipmapBias(texture_mipmap_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[89], texture_mipmap_bias) }
func (gdClass Viewport) GetTextureMipmapBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[90]) }
func (gdClass Viewport) SetVrsMode(mode ViewportVRSMode)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[91], mode) }
func (gdClass Viewport) GetVrsMode() ViewportVRSMode { return gdnative.Return[ViewportVRSMode](gdnative.Object(gdClass), methodViewport[92]) }
func (gdClass Viewport) SetVrsTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[93], texture) }
func (gdClass Viewport) GetVrsTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodViewport[94]) }

type ViewportTexture gdnative.Object

var methodViewportTexture [2]gdnative.Method
func (gdClass ViewportTexture) SetViewportPathInScene(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodViewportTexture[0], path) }
func (gdClass ViewportTexture) GetViewportPathInScene() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodViewportTexture[1]) }

type VisibleOnScreenEnabler2D gdnative.Object

var methodVisibleOnScreenEnabler2D [4]gdnative.Method

type VisibleOnScreenEnabler2DEnableMode int64

const (
	VisibleOnScreenEnabler2DEnableModeInherit VisibleOnScreenEnabler2DEnableMode = 0
	VisibleOnScreenEnabler2DEnableModeAlways VisibleOnScreenEnabler2DEnableMode = 1
	VisibleOnScreenEnabler2DEnableModeWhenPaused VisibleOnScreenEnabler2DEnableMode = 2
)
func (gdClass VisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[0], mode) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode { return gdnative.Return[VisibleOnScreenEnabler2DEnableMode](gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[1]) }
func (gdClass VisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[2], path) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[3]) }

type VisibleOnScreenEnabler3D gdnative.Object

var methodVisibleOnScreenEnabler3D [4]gdnative.Method

type VisibleOnScreenEnabler3DEnableMode int64

const (
	VisibleOnScreenEnabler3DEnableModeInherit VisibleOnScreenEnabler3DEnableMode = 0
	VisibleOnScreenEnabler3DEnableModeAlways VisibleOnScreenEnabler3DEnableMode = 1
	VisibleOnScreenEnabler3DEnableModeWhenPaused VisibleOnScreenEnabler3DEnableMode = 2
)
func (gdClass VisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[0], mode) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode { return gdnative.Return[VisibleOnScreenEnabler3DEnableMode](gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[1]) }
func (gdClass VisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[2], path) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[3]) }

type VisibleOnScreenNotifier2D gdnative.Object

var methodVisibleOnScreenNotifier2D [3]gdnative.Method
func (gdClass VisibleOnScreenNotifier2D) SetRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[0], rect) }
func (gdClass VisibleOnScreenNotifier2D) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[1]) }
func (gdClass VisibleOnScreenNotifier2D) IsOnScreen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[2]) }

type VisibleOnScreenNotifier3D gdnative.Object

var methodVisibleOnScreenNotifier3D [2]gdnative.Method
func (gdClass VisibleOnScreenNotifier3D) SetAabb(rect AABB)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenNotifier3D[0], rect) }
func (gdClass VisibleOnScreenNotifier3D) IsOnScreen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisibleOnScreenNotifier3D[1]) }

type VisualInstance3D gdnative.Object

var methodVisualInstance3D [10]gdnative.Method
func (gdClass VisualInstance3D) GetAabbImplementation() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVisualInstance3D[0]) }
func (gdClass VisualInstance3D) SetBase(base RID)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[1], base) }
func (gdClass VisualInstance3D) GetBase() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodVisualInstance3D[2]) }
func (gdClass VisualInstance3D) GetInstance() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodVisualInstance3D[3]) }
func (gdClass VisualInstance3D) SetLayerMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[4], mask) }
func (gdClass VisualInstance3D) GetLayerMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualInstance3D[5]) }
func (gdClass VisualInstance3D) SetLayerMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[6], layer_number, value) }
func (gdClass VisualInstance3D) GetLayerMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualInstance3D[7], layer_number) }
func (gdClass VisualInstance3D) GetTransformedAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVisualInstance3D[8]) }
func (gdClass VisualInstance3D) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVisualInstance3D[9]) }

type VisualScript gdnative.Object

var methodVisualScript [42]gdnative.Method
func (gdClass VisualScript) AddFunction(name string, func_node_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[0], name, func_node_id) }
func (gdClass VisualScript) HasFunction(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[1], name) }
func (gdClass VisualScript) RemoveFunction(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[2], name) }
func (gdClass VisualScript) RenameFunction(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[3], name, new_name) }
func (gdClass VisualScript) SetScroll(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[4], offset) }
func (gdClass VisualScript) GetScroll() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScript[5]) }
func (gdClass VisualScript) AddNode(id int64, node VisualScriptNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[6], id, node, position) }
func (gdClass VisualScript) RemoveNode(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[7], id) }
func (gdClass VisualScript) GetFunctionNodeId(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScript[8], name) }
func (gdClass VisualScript) GetNode(id int64) VisualScriptNode { return gdnative.Return[VisualScriptNode](gdnative.Object(gdClass), methodVisualScript[9], id) }
func (gdClass VisualScript) HasNode(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[10], id) }
func (gdClass VisualScript) SetNodePosition(id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[11], id, position) }
func (gdClass VisualScript) GetNodePosition(id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScript[12], id) }
func (gdClass VisualScript) SequenceConnect(from_node int64, from_output int64, to_node int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[13], from_node, from_output, to_node) }
func (gdClass VisualScript) SequenceDisconnect(from_node int64, from_output int64, to_node int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[14], from_node, from_output, to_node) }
func (gdClass VisualScript) HasSequenceConnection(from_node int64, from_output int64, to_node int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[15], from_node, from_output, to_node) }
func (gdClass VisualScript) DataConnect(from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[16], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) DataDisconnect(from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[17], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) HasDataConnection(from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[18], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) AddVariable(name string, default_value any, export bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[19], name, default_value, export) }
func (gdClass VisualScript) HasVariable(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[20], name) }
func (gdClass VisualScript) RemoveVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[21], name) }
func (gdClass VisualScript) SetVariableDefaultValue(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[22], name, value) }
func (gdClass VisualScript) GetVariableDefaultValue(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScript[23], name) }
func (gdClass VisualScript) SetVariableInfo(name string, value Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[24], name, value) }
func (gdClass VisualScript) GetVariableInfo(name string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodVisualScript[25], name) }
func (gdClass VisualScript) SetVariableExport(name string, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[26], name, enable) }
func (gdClass VisualScript) GetVariableExport(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[27], name) }
func (gdClass VisualScript) RenameVariable(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[28], name, new_name) }
func (gdClass VisualScript) AddCustomSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[29], name) }
func (gdClass VisualScript) HasCustomSignal(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[30], name) }
func (gdClass VisualScript) CustomSignalAddArgument(name string, atype VariantType, argname string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[31], name, atype, argname, index) }
func (gdClass VisualScript) CustomSignalSetArgumentType(name string, argidx int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[32], name, argidx, atype) }
func (gdClass VisualScript) CustomSignalGetArgumentType(name string, argidx int64) VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScript[33], name, argidx) }
func (gdClass VisualScript) CustomSignalSetArgumentName(name string, argidx int64, argname string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[34], name, argidx, argname) }
func (gdClass VisualScript) CustomSignalGetArgumentName(name string, argidx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScript[35], name, argidx) }
func (gdClass VisualScript) CustomSignalRemoveArgument(name string, argidx int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[36], name, argidx) }
func (gdClass VisualScript) CustomSignalGetArgumentCount(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScript[37], name) }
func (gdClass VisualScript) CustomSignalSwapArgument(name string, argidx int64, withidx int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[38], name, argidx, withidx) }
func (gdClass VisualScript) RemoveCustomSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[39], name) }
func (gdClass VisualScript) RenameCustomSignal(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[40], name, new_name) }
func (gdClass VisualScript) SetInstanceBaseType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[41], atype) }

type VisualScriptBasicTypeConstant gdnative.Object

var methodVisualScriptBasicTypeConstant [4]gdnative.Method
func (gdClass VisualScriptBasicTypeConstant) SetBasicType(name VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[0], name) }
func (gdClass VisualScriptBasicTypeConstant) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[1]) }
func (gdClass VisualScriptBasicTypeConstant) SetBasicTypeConstant(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[2], name) }
func (gdClass VisualScriptBasicTypeConstant) GetBasicTypeConstant() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[3]) }

type VisualScriptBuiltinFunc gdnative.Object

var methodVisualScriptBuiltinFunc [2]gdnative.Method

type VisualScriptBuiltinFuncBuiltinFunc int64

const (
	VisualScriptBuiltinFuncMathSin VisualScriptBuiltinFuncBuiltinFunc = 0
	VisualScriptBuiltinFuncMathCos VisualScriptBuiltinFuncBuiltinFunc = 1
	VisualScriptBuiltinFuncMathTan VisualScriptBuiltinFuncBuiltinFunc = 2
	VisualScriptBuiltinFuncMathSinh VisualScriptBuiltinFuncBuiltinFunc = 3
	VisualScriptBuiltinFuncMathCosh VisualScriptBuiltinFuncBuiltinFunc = 4
	VisualScriptBuiltinFuncMathTanh VisualScriptBuiltinFuncBuiltinFunc = 5
	VisualScriptBuiltinFuncMathAsin VisualScriptBuiltinFuncBuiltinFunc = 6
	VisualScriptBuiltinFuncMathAcos VisualScriptBuiltinFuncBuiltinFunc = 7
	VisualScriptBuiltinFuncMathAtan VisualScriptBuiltinFuncBuiltinFunc = 8
	VisualScriptBuiltinFuncMathAtan2 VisualScriptBuiltinFuncBuiltinFunc = 9
	VisualScriptBuiltinFuncMathSqrt VisualScriptBuiltinFuncBuiltinFunc = 10
	VisualScriptBuiltinFuncMathFmod VisualScriptBuiltinFuncBuiltinFunc = 11
	VisualScriptBuiltinFuncMathFposmod VisualScriptBuiltinFuncBuiltinFunc = 12
	VisualScriptBuiltinFuncMathFloor VisualScriptBuiltinFuncBuiltinFunc = 13
	VisualScriptBuiltinFuncMathCeil VisualScriptBuiltinFuncBuiltinFunc = 14
	VisualScriptBuiltinFuncMathRound VisualScriptBuiltinFuncBuiltinFunc = 15
	VisualScriptBuiltinFuncMathAbs VisualScriptBuiltinFuncBuiltinFunc = 16
	VisualScriptBuiltinFuncMathSign VisualScriptBuiltinFuncBuiltinFunc = 17
	VisualScriptBuiltinFuncMathPow VisualScriptBuiltinFuncBuiltinFunc = 18
	VisualScriptBuiltinFuncMathLog VisualScriptBuiltinFuncBuiltinFunc = 19
	VisualScriptBuiltinFuncMathExp VisualScriptBuiltinFuncBuiltinFunc = 20
	VisualScriptBuiltinFuncMathIsnan VisualScriptBuiltinFuncBuiltinFunc = 21
	VisualScriptBuiltinFuncMathIsinf VisualScriptBuiltinFuncBuiltinFunc = 22
	VisualScriptBuiltinFuncMathEase VisualScriptBuiltinFuncBuiltinFunc = 23
	VisualScriptBuiltinFuncMathStepDecimals VisualScriptBuiltinFuncBuiltinFunc = 24
	VisualScriptBuiltinFuncMathSnapped VisualScriptBuiltinFuncBuiltinFunc = 25
	VisualScriptBuiltinFuncMathLerp VisualScriptBuiltinFuncBuiltinFunc = 26
	VisualScriptBuiltinFuncMathCubicInterpolate VisualScriptBuiltinFuncBuiltinFunc = 27
	VisualScriptBuiltinFuncMathInverseLerp VisualScriptBuiltinFuncBuiltinFunc = 28
	VisualScriptBuiltinFuncMathRangeLerp VisualScriptBuiltinFuncBuiltinFunc = 29
	VisualScriptBuiltinFuncMathMoveToward VisualScriptBuiltinFuncBuiltinFunc = 30
	VisualScriptBuiltinFuncMathRandomize VisualScriptBuiltinFuncBuiltinFunc = 31
	VisualScriptBuiltinFuncMathRandi VisualScriptBuiltinFuncBuiltinFunc = 32
	VisualScriptBuiltinFuncMathRandf VisualScriptBuiltinFuncBuiltinFunc = 33
	VisualScriptBuiltinFuncMathRandiRange VisualScriptBuiltinFuncBuiltinFunc = 34
	VisualScriptBuiltinFuncMathRandfRange VisualScriptBuiltinFuncBuiltinFunc = 35
	VisualScriptBuiltinFuncMathRandfn VisualScriptBuiltinFuncBuiltinFunc = 36
	VisualScriptBuiltinFuncMathSeed VisualScriptBuiltinFuncBuiltinFunc = 37
	VisualScriptBuiltinFuncMathRandseed VisualScriptBuiltinFuncBuiltinFunc = 38
	VisualScriptBuiltinFuncMathDeg2rad VisualScriptBuiltinFuncBuiltinFunc = 39
	VisualScriptBuiltinFuncMathRad2deg VisualScriptBuiltinFuncBuiltinFunc = 40
	VisualScriptBuiltinFuncMathLinear2db VisualScriptBuiltinFuncBuiltinFunc = 41
	VisualScriptBuiltinFuncMathDb2linear VisualScriptBuiltinFuncBuiltinFunc = 42
	VisualScriptBuiltinFuncMathWrap VisualScriptBuiltinFuncBuiltinFunc = 43
	VisualScriptBuiltinFuncMathWrapf VisualScriptBuiltinFuncBuiltinFunc = 44
	VisualScriptBuiltinFuncMathPingpong VisualScriptBuiltinFuncBuiltinFunc = 45
	VisualScriptBuiltinFuncLogicMax VisualScriptBuiltinFuncBuiltinFunc = 46
	VisualScriptBuiltinFuncLogicMin VisualScriptBuiltinFuncBuiltinFunc = 47
	VisualScriptBuiltinFuncLogicClamp VisualScriptBuiltinFuncBuiltinFunc = 48
	VisualScriptBuiltinFuncLogicNearestPo2 VisualScriptBuiltinFuncBuiltinFunc = 49
	VisualScriptBuiltinFuncObjWeakref VisualScriptBuiltinFuncBuiltinFunc = 50
	VisualScriptBuiltinFuncTypeConvert VisualScriptBuiltinFuncBuiltinFunc = 51
	VisualScriptBuiltinFuncTypeOf VisualScriptBuiltinFuncBuiltinFunc = 52
	VisualScriptBuiltinFuncTypeExists VisualScriptBuiltinFuncBuiltinFunc = 53
	VisualScriptBuiltinFuncTextChar VisualScriptBuiltinFuncBuiltinFunc = 54
	VisualScriptBuiltinFuncTextStr VisualScriptBuiltinFuncBuiltinFunc = 55
	VisualScriptBuiltinFuncTextPrint VisualScriptBuiltinFuncBuiltinFunc = 56
	VisualScriptBuiltinFuncTextPrinterr VisualScriptBuiltinFuncBuiltinFunc = 57
	VisualScriptBuiltinFuncTextPrintraw VisualScriptBuiltinFuncBuiltinFunc = 58
	VisualScriptBuiltinFuncTextPrintVerbose VisualScriptBuiltinFuncBuiltinFunc = 59
	VisualScriptBuiltinFuncVarToStr VisualScriptBuiltinFuncBuiltinFunc = 60
	VisualScriptBuiltinFuncStrToVar VisualScriptBuiltinFuncBuiltinFunc = 61
	VisualScriptBuiltinFuncVarToBytes VisualScriptBuiltinFuncBuiltinFunc = 62
	VisualScriptBuiltinFuncBytesToVar VisualScriptBuiltinFuncBuiltinFunc = 63
	VisualScriptBuiltinFuncMathSmoothstep VisualScriptBuiltinFuncBuiltinFunc = 64
	VisualScriptBuiltinFuncMathPosmod VisualScriptBuiltinFuncBuiltinFunc = 65
	VisualScriptBuiltinFuncMathLerpAngle VisualScriptBuiltinFuncBuiltinFunc = 66
	VisualScriptBuiltinFuncTextOrd VisualScriptBuiltinFuncBuiltinFunc = 67
	VisualScriptBuiltinFuncFuncMax VisualScriptBuiltinFuncBuiltinFunc = 68
)
func (gdClass VisualScriptBuiltinFunc) SetFunc(which VisualScriptBuiltinFuncBuiltinFunc)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBuiltinFunc[0], which) }
func (gdClass VisualScriptBuiltinFunc) GetFunc() VisualScriptBuiltinFuncBuiltinFunc { return gdnative.Return[VisualScriptBuiltinFuncBuiltinFunc](gdnative.Object(gdClass), methodVisualScriptBuiltinFunc[1]) }

type VisualScriptClassConstant gdnative.Object

var methodVisualScriptClassConstant [4]gdnative.Method
func (gdClass VisualScriptClassConstant) SetClassConstant(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptClassConstant[0], name) }
func (gdClass VisualScriptClassConstant) GetClassConstant() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptClassConstant[1]) }
func (gdClass VisualScriptClassConstant) SetBaseType(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptClassConstant[2], name) }
func (gdClass VisualScriptClassConstant) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptClassConstant[3]) }

type VisualScriptComment gdnative.Object

var methodVisualScriptComment [6]gdnative.Method
func (gdClass VisualScriptComment) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[0], title) }
func (gdClass VisualScriptComment) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptComment[1]) }
func (gdClass VisualScriptComment) SetDescription(description string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[2], description) }
func (gdClass VisualScriptComment) GetDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptComment[3]) }
func (gdClass VisualScriptComment) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[4], size) }
func (gdClass VisualScriptComment) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScriptComment[5]) }

type VisualScriptComposeArray gdnative.Object

var methodVisualScriptComposeArray [0]gdnative.Method

type VisualScriptCondition gdnative.Object

var methodVisualScriptCondition [0]gdnative.Method

type VisualScriptConstant gdnative.Object

var methodVisualScriptConstant [4]gdnative.Method
func (gdClass VisualScriptConstant) SetConstantType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstant[0], atype) }
func (gdClass VisualScriptConstant) GetConstantType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptConstant[1]) }
func (gdClass VisualScriptConstant) SetConstantValue(value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstant[2], value) }
func (gdClass VisualScriptConstant) GetConstantValue() any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptConstant[3]) }

type VisualScriptConstructor gdnative.Object

var methodVisualScriptConstructor [4]gdnative.Method
func (gdClass VisualScriptConstructor) SetConstructorType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstructor[0], atype) }
func (gdClass VisualScriptConstructor) GetConstructorType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptConstructor[1]) }
func (gdClass VisualScriptConstructor) SetConstructor(constructor Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstructor[2], constructor) }
func (gdClass VisualScriptConstructor) GetConstructor() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodVisualScriptConstructor[3]) }

type VisualScriptCustomNode gdnative.Object

var methodVisualScriptCustomNode [18]gdnative.Method

type VisualScriptCustomNodeStartMode int64

const (
	VisualScriptCustomNodeStartModeBeginSequence VisualScriptCustomNodeStartMode = 0
	VisualScriptCustomNodeStartModeContinueSequence VisualScriptCustomNodeStartMode = 1
	VisualScriptCustomNodeStartModeResumeYield VisualScriptCustomNodeStartMode = 2
)
func (gdClass VisualScriptCustomNode) GetOutputSequencePortCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[0]) }
func (gdClass VisualScriptCustomNode) HasInputSequencePortImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptCustomNode[1]) }
func (gdClass VisualScriptCustomNode) GetOutputSequencePortTextImplementation(seq_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[2], seq_idx) }
func (gdClass VisualScriptCustomNode) GetInputValuePortCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[3]) }
func (gdClass VisualScriptCustomNode) GetInputValuePortTypeImplementation(input_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[4], input_idx) }
func (gdClass VisualScriptCustomNode) GetInputValuePortNameImplementation(input_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[5], input_idx) }
func (gdClass VisualScriptCustomNode) GetInputValuePortHintImplementation(input_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[6], input_idx) }
func (gdClass VisualScriptCustomNode) GetInputValuePortHintStringImplementation(input_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[7], input_idx) }
func (gdClass VisualScriptCustomNode) GetOutputValuePortCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[8]) }
func (gdClass VisualScriptCustomNode) GetOutputValuePortTypeImplementation(output_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[9], output_idx) }
func (gdClass VisualScriptCustomNode) GetOutputValuePortNameImplementation(output_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[10], output_idx) }
func (gdClass VisualScriptCustomNode) GetOutputValuePortHintImplementation(output_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[11], output_idx) }
func (gdClass VisualScriptCustomNode) GetOutputValuePortHintStringImplementation(output_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[12], output_idx) }
func (gdClass VisualScriptCustomNode) GetCaptionImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[13]) }
func (gdClass VisualScriptCustomNode) GetTextImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[14]) }
func (gdClass VisualScriptCustomNode) GetCategoryImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptCustomNode[15]) }
func (gdClass VisualScriptCustomNode) GetWorkingMemorySizeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptCustomNode[16]) }
func (gdClass VisualScriptCustomNode) StepImplementation(inputs Array, outputs Array, start_mode int64, working_mem Array) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptCustomNode[17], inputs, outputs, start_mode, working_mem) }

type VisualScriptCustomNodes gdnative.Object

var methodVisualScriptCustomNodes [2]gdnative.Method
func (gdClass VisualScriptCustomNodes) AddCustomNode(name string, category string, script Script)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptCustomNodes[0], name, category, script) }
func (gdClass VisualScriptCustomNodes) RemoveCustomNode(name string, category string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptCustomNodes[1], name, category) }

type VisualScriptDeconstruct gdnative.Object

var methodVisualScriptDeconstruct [2]gdnative.Method
func (gdClass VisualScriptDeconstruct) SetDeconstructType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptDeconstruct[0], atype) }
func (gdClass VisualScriptDeconstruct) GetDeconstructType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptDeconstruct[1]) }

type VisualScriptEmitSignal gdnative.Object

var methodVisualScriptEmitSignal [2]gdnative.Method
func (gdClass VisualScriptEmitSignal) SetSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptEmitSignal[0], name) }
func (gdClass VisualScriptEmitSignal) GetSignal() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptEmitSignal[1]) }

type VisualScriptEngineSingleton gdnative.Object

var methodVisualScriptEngineSingleton [2]gdnative.Method
func (gdClass VisualScriptEngineSingleton) SetSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptEngineSingleton[0], name) }
func (gdClass VisualScriptEngineSingleton) GetSingleton() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptEngineSingleton[1]) }

type VisualScriptExpression gdnative.Object

var methodVisualScriptExpression [0]gdnative.Method

type VisualScriptFunction gdnative.Object

var methodVisualScriptFunction [0]gdnative.Method

type VisualScriptFunctionCall gdnative.Object

var methodVisualScriptFunctionCall [20]gdnative.Method

type VisualScriptFunctionCallCallMode int64

const (
	VisualScriptFunctionCallCallModeSelf VisualScriptFunctionCallCallMode = 0
	VisualScriptFunctionCallCallModeNodePath VisualScriptFunctionCallCallMode = 1
	VisualScriptFunctionCallCallModeInstance VisualScriptFunctionCallCallMode = 2
	VisualScriptFunctionCallCallModeBasicType VisualScriptFunctionCallCallMode = 3
	VisualScriptFunctionCallCallModeSingleton VisualScriptFunctionCallCallMode = 4
)

type VisualScriptFunctionCallRPCCallMode int64

const (
	VisualScriptFunctionCallRpcDisabled VisualScriptFunctionCallRPCCallMode = 0
	VisualScriptFunctionCallRpcReliable VisualScriptFunctionCallRPCCallMode = 1
	VisualScriptFunctionCallRpcUnreliable VisualScriptFunctionCallRPCCallMode = 2
	VisualScriptFunctionCallRpcReliableToId VisualScriptFunctionCallRPCCallMode = 3
	VisualScriptFunctionCallRpcUnreliableToId VisualScriptFunctionCallRPCCallMode = 4
)
func (gdClass VisualScriptFunctionCall) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[0], base_type) }
func (gdClass VisualScriptFunctionCall) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[1]) }
func (gdClass VisualScriptFunctionCall) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[2], base_script) }
func (gdClass VisualScriptFunctionCall) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[3]) }
func (gdClass VisualScriptFunctionCall) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[4], basic_type) }
func (gdClass VisualScriptFunctionCall) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptFunctionCall[5]) }
func (gdClass VisualScriptFunctionCall) SetSingleton(singleton string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[6], singleton) }
func (gdClass VisualScriptFunctionCall) GetSingleton() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[7]) }
func (gdClass VisualScriptFunctionCall) SetFunction(function string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[8], function) }
func (gdClass VisualScriptFunctionCall) GetFunction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[9]) }
func (gdClass VisualScriptFunctionCall) SetCallMode(mode VisualScriptFunctionCallCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[10], mode) }
func (gdClass VisualScriptFunctionCall) GetCallMode() VisualScriptFunctionCallCallMode { return gdnative.Return[VisualScriptFunctionCallCallMode](gdnative.Object(gdClass), methodVisualScriptFunctionCall[11]) }
func (gdClass VisualScriptFunctionCall) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[12], base_path) }
func (gdClass VisualScriptFunctionCall) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptFunctionCall[13]) }
func (gdClass VisualScriptFunctionCall) SetUseDefaultArgs(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[14], amount) }
func (gdClass VisualScriptFunctionCall) GetUseDefaultArgs() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptFunctionCall[15]) }
func (gdClass VisualScriptFunctionCall) SetRpcCallMode(mode VisualScriptFunctionCallRPCCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[16], mode) }
func (gdClass VisualScriptFunctionCall) GetRpcCallMode() VisualScriptFunctionCallRPCCallMode { return gdnative.Return[VisualScriptFunctionCallRPCCallMode](gdnative.Object(gdClass), methodVisualScriptFunctionCall[17]) }
func (gdClass VisualScriptFunctionCall) SetValidate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[18], enable) }
func (gdClass VisualScriptFunctionCall) GetValidate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptFunctionCall[19]) }

type VisualScriptFunctionState gdnative.Object

var methodVisualScriptFunctionState [3]gdnative.Method
func (gdClass VisualScriptFunctionState) ConnectToSignal(obj Object, signals string, args Array)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionState[0], obj, signals, args) }
func (gdClass VisualScriptFunctionState) Resume(args Array) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptFunctionState[1], args) }
func (gdClass VisualScriptFunctionState) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptFunctionState[2]) }

type VisualScriptGlobalConstant gdnative.Object

var methodVisualScriptGlobalConstant [2]gdnative.Method
func (gdClass VisualScriptGlobalConstant) SetGlobalConstant(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptGlobalConstant[0], index) }
func (gdClass VisualScriptGlobalConstant) GetGlobalConstant() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptGlobalConstant[1]) }

type VisualScriptIndexGet gdnative.Object

var methodVisualScriptIndexGet [0]gdnative.Method

type VisualScriptIndexSet gdnative.Object

var methodVisualScriptIndexSet [0]gdnative.Method

type VisualScriptInputAction gdnative.Object

var methodVisualScriptInputAction [4]gdnative.Method

type VisualScriptInputActionMode int64

const (
	VisualScriptInputActionModePressed VisualScriptInputActionMode = 0
	VisualScriptInputActionModeReleased VisualScriptInputActionMode = 1
	VisualScriptInputActionModeJustPressed VisualScriptInputActionMode = 2
	VisualScriptInputActionModeJustReleased VisualScriptInputActionMode = 3
)
func (gdClass VisualScriptInputAction) SetActionName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptInputAction[0], name) }
func (gdClass VisualScriptInputAction) GetActionName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptInputAction[1]) }
func (gdClass VisualScriptInputAction) SetActionMode(mode VisualScriptInputActionMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptInputAction[2], mode) }
func (gdClass VisualScriptInputAction) GetActionMode() VisualScriptInputActionMode { return gdnative.Return[VisualScriptInputActionMode](gdnative.Object(gdClass), methodVisualScriptInputAction[3]) }

type VisualScriptIterator gdnative.Object

var methodVisualScriptIterator [0]gdnative.Method

type VisualScriptLists gdnative.Object

var methodVisualScriptLists [8]gdnative.Method
func (gdClass VisualScriptLists) AddInputDataPort(atype VariantType, name string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[0], atype, name, index) }
func (gdClass VisualScriptLists) SetInputDataPortName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[1], index, name) }
func (gdClass VisualScriptLists) SetInputDataPortType(index int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[2], index, atype) }
func (gdClass VisualScriptLists) RemoveInputDataPort(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[3], index) }
func (gdClass VisualScriptLists) AddOutputDataPort(atype VariantType, name string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[4], atype, name, index) }
func (gdClass VisualScriptLists) SetOutputDataPortName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[5], index, name) }
func (gdClass VisualScriptLists) SetOutputDataPortType(index int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[6], index, atype) }
func (gdClass VisualScriptLists) RemoveOutputDataPort(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[7], index) }

type VisualScriptLocalVar gdnative.Object

var methodVisualScriptLocalVar [4]gdnative.Method
func (gdClass VisualScriptLocalVar) SetVarName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVar[0], name) }
func (gdClass VisualScriptLocalVar) GetVarName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptLocalVar[1]) }
func (gdClass VisualScriptLocalVar) SetVarType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVar[2], atype) }
func (gdClass VisualScriptLocalVar) GetVarType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptLocalVar[3]) }

type VisualScriptLocalVarSet gdnative.Object

var methodVisualScriptLocalVarSet [4]gdnative.Method
func (gdClass VisualScriptLocalVarSet) SetVarName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVarSet[0], name) }
func (gdClass VisualScriptLocalVarSet) GetVarName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptLocalVarSet[1]) }
func (gdClass VisualScriptLocalVarSet) SetVarType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVarSet[2], atype) }
func (gdClass VisualScriptLocalVarSet) GetVarType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptLocalVarSet[3]) }

type VisualScriptMathConstant gdnative.Object

var methodVisualScriptMathConstant [2]gdnative.Method

type VisualScriptMathConstantMathConstant int64

const (
	VisualScriptMathConstantMathConstantOne VisualScriptMathConstantMathConstant = 0
	VisualScriptMathConstantMathConstantPi VisualScriptMathConstantMathConstant = 1
	VisualScriptMathConstantMathConstantHalfPi VisualScriptMathConstantMathConstant = 2
	VisualScriptMathConstantMathConstantTau VisualScriptMathConstantMathConstant = 3
	VisualScriptMathConstantMathConstantE VisualScriptMathConstantMathConstant = 4
	VisualScriptMathConstantMathConstantSqrt2 VisualScriptMathConstantMathConstant = 5
	VisualScriptMathConstantMathConstantInf VisualScriptMathConstantMathConstant = 6
	VisualScriptMathConstantMathConstantNan VisualScriptMathConstantMathConstant = 7
	VisualScriptMathConstantMathConstantMax VisualScriptMathConstantMathConstant = 8
)
func (gdClass VisualScriptMathConstant) SetMathConstant(which VisualScriptMathConstantMathConstant)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptMathConstant[0], which) }
func (gdClass VisualScriptMathConstant) GetMathConstant() VisualScriptMathConstantMathConstant { return gdnative.Return[VisualScriptMathConstantMathConstant](gdnative.Object(gdClass), methodVisualScriptMathConstant[1]) }

type VisualScriptNode gdnative.Object

var methodVisualScriptNode [4]gdnative.Method
func (gdClass VisualScriptNode) GetVisualScript() VisualScript { return gdnative.Return[VisualScript](gdnative.Object(gdClass), methodVisualScriptNode[0]) }
func (gdClass VisualScriptNode) SetDefaultInputValue(port_idx int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptNode[1], port_idx, value) }
func (gdClass VisualScriptNode) GetDefaultInputValue(port_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptNode[2], port_idx) }
func (gdClass VisualScriptNode) PortsChangedNotify()  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptNode[3]) }

type VisualScriptOperator gdnative.Object

var methodVisualScriptOperator [4]gdnative.Method
func (gdClass VisualScriptOperator) SetOperator(op VariantOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptOperator[0], op) }
func (gdClass VisualScriptOperator) GetOperator() VariantOperator { return gdnative.Return[VariantOperator](gdnative.Object(gdClass), methodVisualScriptOperator[1]) }
func (gdClass VisualScriptOperator) SetTyped(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptOperator[2], atype) }
func (gdClass VisualScriptOperator) GetTyped() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptOperator[3]) }

type VisualScriptPreload gdnative.Object

var methodVisualScriptPreload [2]gdnative.Method
func (gdClass VisualScriptPreload) SetPreload(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPreload[0], resource) }
func (gdClass VisualScriptPreload) GetPreload() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodVisualScriptPreload[1]) }

type VisualScriptPropertyGet gdnative.Object

var methodVisualScriptPropertyGet [14]gdnative.Method

type VisualScriptPropertyGetCallMode int64

const (
	VisualScriptPropertyGetCallModeSelf VisualScriptPropertyGetCallMode = 0
	VisualScriptPropertyGetCallModeNodePath VisualScriptPropertyGetCallMode = 1
	VisualScriptPropertyGetCallModeInstance VisualScriptPropertyGetCallMode = 2
	VisualScriptPropertyGetCallModeBasicType VisualScriptPropertyGetCallMode = 3
)
func (gdClass VisualScriptPropertyGet) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[0], base_type) }
func (gdClass VisualScriptPropertyGet) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[1]) }
func (gdClass VisualScriptPropertyGet) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[2], base_script) }
func (gdClass VisualScriptPropertyGet) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[3]) }
func (gdClass VisualScriptPropertyGet) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[4], basic_type) }
func (gdClass VisualScriptPropertyGet) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptPropertyGet[5]) }
func (gdClass VisualScriptPropertyGet) SetProperty(property string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[6], property) }
func (gdClass VisualScriptPropertyGet) GetProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[7]) }
func (gdClass VisualScriptPropertyGet) SetCallMode(mode VisualScriptPropertyGetCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[8], mode) }
func (gdClass VisualScriptPropertyGet) GetCallMode() VisualScriptPropertyGetCallMode { return gdnative.Return[VisualScriptPropertyGetCallMode](gdnative.Object(gdClass), methodVisualScriptPropertyGet[9]) }
func (gdClass VisualScriptPropertyGet) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[10], base_path) }
func (gdClass VisualScriptPropertyGet) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptPropertyGet[11]) }
func (gdClass VisualScriptPropertyGet) SetIndex(index string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[12], index) }
func (gdClass VisualScriptPropertyGet) GetIndex() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[13]) }

type VisualScriptPropertySet gdnative.Object

var methodVisualScriptPropertySet [16]gdnative.Method

type VisualScriptPropertySetCallMode int64

const (
	VisualScriptPropertySetCallModeSelf VisualScriptPropertySetCallMode = 0
	VisualScriptPropertySetCallModeNodePath VisualScriptPropertySetCallMode = 1
	VisualScriptPropertySetCallModeInstance VisualScriptPropertySetCallMode = 2
	VisualScriptPropertySetCallModeBasicType VisualScriptPropertySetCallMode = 3
)

type VisualScriptPropertySetAssignOp int64

const (
	VisualScriptPropertySetAssignOpNone VisualScriptPropertySetAssignOp = 0
	VisualScriptPropertySetAssignOpAdd VisualScriptPropertySetAssignOp = 1
	VisualScriptPropertySetAssignOpSub VisualScriptPropertySetAssignOp = 2
	VisualScriptPropertySetAssignOpMul VisualScriptPropertySetAssignOp = 3
	VisualScriptPropertySetAssignOpDiv VisualScriptPropertySetAssignOp = 4
	VisualScriptPropertySetAssignOpMod VisualScriptPropertySetAssignOp = 5
	VisualScriptPropertySetAssignOpShiftLeft VisualScriptPropertySetAssignOp = 6
	VisualScriptPropertySetAssignOpShiftRight VisualScriptPropertySetAssignOp = 7
	VisualScriptPropertySetAssignOpBitAnd VisualScriptPropertySetAssignOp = 8
	VisualScriptPropertySetAssignOpBitOr VisualScriptPropertySetAssignOp = 9
	VisualScriptPropertySetAssignOpBitXor VisualScriptPropertySetAssignOp = 10
)
func (gdClass VisualScriptPropertySet) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[0], base_type) }
func (gdClass VisualScriptPropertySet) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[1]) }
func (gdClass VisualScriptPropertySet) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[2], base_script) }
func (gdClass VisualScriptPropertySet) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[3]) }
func (gdClass VisualScriptPropertySet) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[4], basic_type) }
func (gdClass VisualScriptPropertySet) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptPropertySet[5]) }
func (gdClass VisualScriptPropertySet) SetProperty(property string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[6], property) }
func (gdClass VisualScriptPropertySet) GetProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[7]) }
func (gdClass VisualScriptPropertySet) SetCallMode(mode VisualScriptPropertySetCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[8], mode) }
func (gdClass VisualScriptPropertySet) GetCallMode() VisualScriptPropertySetCallMode { return gdnative.Return[VisualScriptPropertySetCallMode](gdnative.Object(gdClass), methodVisualScriptPropertySet[9]) }
func (gdClass VisualScriptPropertySet) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[10], base_path) }
func (gdClass VisualScriptPropertySet) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptPropertySet[11]) }
func (gdClass VisualScriptPropertySet) SetIndex(index string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[12], index) }
func (gdClass VisualScriptPropertySet) GetIndex() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[13]) }
func (gdClass VisualScriptPropertySet) SetAssignOp(assign_op VisualScriptPropertySetAssignOp)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[14], assign_op) }
func (gdClass VisualScriptPropertySet) GetAssignOp() VisualScriptPropertySetAssignOp { return gdnative.Return[VisualScriptPropertySetAssignOp](gdnative.Object(gdClass), methodVisualScriptPropertySet[15]) }

type VisualScriptResourcePath gdnative.Object

var methodVisualScriptResourcePath [2]gdnative.Method
func (gdClass VisualScriptResourcePath) SetResourcePath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptResourcePath[0], path) }
func (gdClass VisualScriptResourcePath) GetResourcePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptResourcePath[1]) }

type VisualScriptReturn gdnative.Object

var methodVisualScriptReturn [4]gdnative.Method
func (gdClass VisualScriptReturn) SetReturnType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptReturn[0], atype) }
func (gdClass VisualScriptReturn) GetReturnType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptReturn[1]) }
func (gdClass VisualScriptReturn) SetEnableReturnValue(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptReturn[2], enable) }
func (gdClass VisualScriptReturn) IsReturnValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptReturn[3]) }

type VisualScriptSceneNode gdnative.Object

var methodVisualScriptSceneNode [2]gdnative.Method
func (gdClass VisualScriptSceneNode) SetNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSceneNode[0], path) }
func (gdClass VisualScriptSceneNode) GetNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptSceneNode[1]) }

type VisualScriptSceneTree gdnative.Object

var methodVisualScriptSceneTree [0]gdnative.Method

type VisualScriptSelect gdnative.Object

var methodVisualScriptSelect [2]gdnative.Method
func (gdClass VisualScriptSelect) SetTyped(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSelect[0], atype) }
func (gdClass VisualScriptSelect) GetTyped() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptSelect[1]) }

type VisualScriptSelf gdnative.Object

var methodVisualScriptSelf [0]gdnative.Method

type VisualScriptSequence gdnative.Object

var methodVisualScriptSequence [2]gdnative.Method
func (gdClass VisualScriptSequence) SetSteps(steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSequence[0], steps) }
func (gdClass VisualScriptSequence) GetSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptSequence[1]) }

type VisualScriptSubCall gdnative.Object

var methodVisualScriptSubCall [0]gdnative.Method

type VisualScriptSwitch gdnative.Object

var methodVisualScriptSwitch [0]gdnative.Method

type VisualScriptTypeCast gdnative.Object

var methodVisualScriptTypeCast [4]gdnative.Method
func (gdClass VisualScriptTypeCast) SetBaseType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptTypeCast[0], atype) }
func (gdClass VisualScriptTypeCast) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptTypeCast[1]) }
func (gdClass VisualScriptTypeCast) SetBaseScript(path string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptTypeCast[2], path) }
func (gdClass VisualScriptTypeCast) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptTypeCast[3]) }

type VisualScriptVariableGet gdnative.Object

var methodVisualScriptVariableGet [2]gdnative.Method
func (gdClass VisualScriptVariableGet) SetVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptVariableGet[0], name) }
func (gdClass VisualScriptVariableGet) GetVariable() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptVariableGet[1]) }

type VisualScriptVariableSet gdnative.Object

var methodVisualScriptVariableSet [2]gdnative.Method
func (gdClass VisualScriptVariableSet) SetVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptVariableSet[0], name) }
func (gdClass VisualScriptVariableSet) GetVariable() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptVariableSet[1]) }

type VisualScriptWhile gdnative.Object

var methodVisualScriptWhile [0]gdnative.Method

type VisualScriptYield gdnative.Object

var methodVisualScriptYield [4]gdnative.Method

type VisualScriptYieldYieldMode int64

const (
	VisualScriptYieldYieldFrame VisualScriptYieldYieldMode = 1
	VisualScriptYieldYieldPhysicsFrame VisualScriptYieldYieldMode = 2
	VisualScriptYieldYieldWait VisualScriptYieldYieldMode = 3
)
func (gdClass VisualScriptYield) SetYieldMode(mode VisualScriptYieldYieldMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYield[0], mode) }
func (gdClass VisualScriptYield) GetYieldMode() VisualScriptYieldYieldMode { return gdnative.Return[VisualScriptYieldYieldMode](gdnative.Object(gdClass), methodVisualScriptYield[1]) }
func (gdClass VisualScriptYield) SetWaitTime(sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYield[2], sec) }
func (gdClass VisualScriptYield) GetWaitTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualScriptYield[3]) }

type VisualScriptYieldSignal gdnative.Object

var methodVisualScriptYieldSignal [8]gdnative.Method

type VisualScriptYieldSignalCallMode int64

const (
	VisualScriptYieldSignalCallModeSelf VisualScriptYieldSignalCallMode = 0
	VisualScriptYieldSignalCallModeNodePath VisualScriptYieldSignalCallMode = 1
	VisualScriptYieldSignalCallModeInstance VisualScriptYieldSignalCallMode = 2
)
func (gdClass VisualScriptYieldSignal) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[0], base_type) }
func (gdClass VisualScriptYieldSignal) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptYieldSignal[1]) }
func (gdClass VisualScriptYieldSignal) SetSignal(signal string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[2], signal) }
func (gdClass VisualScriptYieldSignal) GetSignal() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptYieldSignal[3]) }
func (gdClass VisualScriptYieldSignal) SetCallMode(mode VisualScriptYieldSignalCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[4], mode) }
func (gdClass VisualScriptYieldSignal) GetCallMode() VisualScriptYieldSignalCallMode { return gdnative.Return[VisualScriptYieldSignalCallMode](gdnative.Object(gdClass), methodVisualScriptYieldSignal[5]) }
func (gdClass VisualScriptYieldSignal) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[6], base_path) }
func (gdClass VisualScriptYieldSignal) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptYieldSignal[7]) }

type VisualShader gdnative.Object

var methodVisualShader [20]gdnative.Method

type VisualShaderType int64

const (
	VisualShaderTypeVertex VisualShaderType = 0
	VisualShaderTypeFragment VisualShaderType = 1
	VisualShaderTypeLight VisualShaderType = 2
	VisualShaderTypeStart VisualShaderType = 3
	VisualShaderTypeProcess VisualShaderType = 4
	VisualShaderTypeCollide VisualShaderType = 5
	VisualShaderTypeStartCustom VisualShaderType = 6
	VisualShaderTypeProcessCustom VisualShaderType = 7
	VisualShaderTypeSky VisualShaderType = 8
	VisualShaderTypeFog VisualShaderType = 9
	VisualShaderTypeMax VisualShaderType = 10
)

type VisualShaderVaryingMode int64

const (
	VisualShaderVaryingModeVertexToFragLight VisualShaderVaryingMode = 0
	VisualShaderVaryingModeFragToLight VisualShaderVaryingMode = 1
	VisualShaderVaryingModeMax VisualShaderVaryingMode = 2
)

type VisualShaderVaryingType int64

const (
	VisualShaderVaryingTypeFloat VisualShaderVaryingType = 0
	VisualShaderVaryingTypeVector2d VisualShaderVaryingType = 1
	VisualShaderVaryingTypeVector3d VisualShaderVaryingType = 2
	VisualShaderVaryingTypeVector4d VisualShaderVaryingType = 3
	VisualShaderVaryingTypeColor VisualShaderVaryingType = 4
	VisualShaderVaryingTypeTransform VisualShaderVaryingType = 5
	VisualShaderVaryingTypeMax VisualShaderVaryingType = 6
)
func (gdClass VisualShader) SetMode(mode ShaderMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[0], mode) }
func (gdClass VisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[1], atype, node, position, id) }
func (gdClass VisualShader) GetNode(atype VisualShaderType, id int64) VisualShaderNode { return gdnative.Return[VisualShaderNode](gdnative.Object(gdClass), methodVisualShader[2], atype, id) }
func (gdClass VisualShader) SetNodePosition(atype VisualShaderType, id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[3], atype, id, position) }
func (gdClass VisualShader) GetNodePosition(atype VisualShaderType, id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShader[4], atype, id) }
func (gdClass VisualShader) GetNodeList(atype VisualShaderType) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodVisualShader[5], atype) }
func (gdClass VisualShader) GetValidNodeId(atype VisualShaderType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShader[6], atype) }
func (gdClass VisualShader) RemoveNode(atype VisualShaderType, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[7], atype, id) }
func (gdClass VisualShader) ReplaceNode(atype VisualShaderType, id int64, new_class string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[8], atype, id, new_class) }
func (gdClass VisualShader) IsNodeConnection(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[9], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) CanConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[10], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) ConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodVisualShader[11], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) DisconnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[12], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) ConnectNodesForced(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[13], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) GetNodeConnections(atype VisualShaderType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodVisualShader[14], atype) }
func (gdClass VisualShader) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[15], offset) }
func (gdClass VisualShader) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShader[16]) }
func (gdClass VisualShader) AddVarying(name string, mode VisualShaderVaryingMode, atype VisualShaderVaryingType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[17], name, mode, atype) }
func (gdClass VisualShader) RemoveVarying(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[18], name) }
func (gdClass VisualShader) HasVarying(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[19], name) }

type VisualShaderNode gdnative.Object

var methodVisualShaderNode [8]gdnative.Method

type VisualShaderNodePortType int64

const (
	VisualShaderNodePortTypeScalar VisualShaderNodePortType = 0
	VisualShaderNodePortTypeScalarInt VisualShaderNodePortType = 1
	VisualShaderNodePortTypeVector2d VisualShaderNodePortType = 2
	VisualShaderNodePortTypeVector3d VisualShaderNodePortType = 3
	VisualShaderNodePortTypeVector4d VisualShaderNodePortType = 4
	VisualShaderNodePortTypeBoolean VisualShaderNodePortType = 5
	VisualShaderNodePortTypeTransform VisualShaderNodePortType = 6
	VisualShaderNodePortTypeSampler VisualShaderNodePortType = 7
	VisualShaderNodePortTypeMax VisualShaderNodePortType = 8
)
func (gdClass VisualShaderNode) SetOutputPortForPreview(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[0], port) }
func (gdClass VisualShaderNode) GetOutputPortForPreview() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNode[1]) }
func (gdClass VisualShaderNode) SetInputPortDefaultValue(port int64, value any, prev_value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[2], port, value, prev_value) }
func (gdClass VisualShaderNode) GetInputPortDefaultValue(port int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualShaderNode[3], port) }
func (gdClass VisualShaderNode) RemoveInputPortDefaultValue(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[4], port) }
func (gdClass VisualShaderNode) ClearDefaultInputValues()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[5]) }
func (gdClass VisualShaderNode) SetDefaultInputValues(values Array)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[6], values) }
func (gdClass VisualShaderNode) GetDefaultInputValues() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodVisualShaderNode[7]) }

type VisualShaderNodeBillboard gdnative.Object

var methodVisualShaderNodeBillboard [4]gdnative.Method

type VisualShaderNodeBillboardBillboardType int64

const (
	VisualShaderNodeBillboardBillboardTypeDisabled VisualShaderNodeBillboardBillboardType = 0
	VisualShaderNodeBillboardBillboardTypeEnabled VisualShaderNodeBillboardBillboardType = 1
	VisualShaderNodeBillboardBillboardTypeFixedY VisualShaderNodeBillboardBillboardType = 2
	VisualShaderNodeBillboardBillboardTypeParticles VisualShaderNodeBillboardBillboardType = 3
	VisualShaderNodeBillboardBillboardTypeMax VisualShaderNodeBillboardBillboardType = 4
)
func (gdClass VisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBillboard[0], billboard_type) }
func (gdClass VisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType { return gdnative.Return[VisualShaderNodeBillboardBillboardType](gdnative.Object(gdClass), methodVisualShaderNodeBillboard[1]) }
func (gdClass VisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBillboard[2], enabled) }
func (gdClass VisualShaderNodeBillboard) IsKeepScaleEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBillboard[3]) }

type VisualShaderNodeBooleanConstant gdnative.Object

var methodVisualShaderNodeBooleanConstant [2]gdnative.Method
func (gdClass VisualShaderNodeBooleanConstant) SetConstant(constant bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanConstant[0], constant) }
func (gdClass VisualShaderNodeBooleanConstant) GetConstant() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanConstant[1]) }

type VisualShaderNodeBooleanUniform gdnative.Object

var methodVisualShaderNodeBooleanUniform [4]gdnative.Method
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[0], enabled) }
func (gdClass VisualShaderNodeBooleanUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[1]) }
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValue(value bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[2], value) }
func (gdClass VisualShaderNodeBooleanUniform) GetDefaultValue() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[3]) }

type VisualShaderNodeClamp gdnative.Object

var methodVisualShaderNodeClamp [2]gdnative.Method

type VisualShaderNodeClampOpType int64

const (
	VisualShaderNodeClampOpTypeFloat VisualShaderNodeClampOpType = 0
	VisualShaderNodeClampOpTypeInt VisualShaderNodeClampOpType = 1
	VisualShaderNodeClampOpTypeVector2d VisualShaderNodeClampOpType = 2
	VisualShaderNodeClampOpTypeVector3d VisualShaderNodeClampOpType = 3
	VisualShaderNodeClampOpTypeVector4d VisualShaderNodeClampOpType = 4
	VisualShaderNodeClampOpTypeMax VisualShaderNodeClampOpType = 5
)
func (gdClass VisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeClamp[0], op_type) }
func (gdClass VisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType { return gdnative.Return[VisualShaderNodeClampOpType](gdnative.Object(gdClass), methodVisualShaderNodeClamp[1]) }

type VisualShaderNodeColorConstant gdnative.Object

var methodVisualShaderNodeColorConstant [2]gdnative.Method
func (gdClass VisualShaderNodeColorConstant) SetConstant(constant Color)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorConstant[0], constant) }
func (gdClass VisualShaderNodeColorConstant) GetConstant() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodVisualShaderNodeColorConstant[1]) }

type VisualShaderNodeColorFunc gdnative.Object

var methodVisualShaderNodeColorFunc [2]gdnative.Method

type VisualShaderNodeColorFuncFunction int64

const (
	VisualShaderNodeColorFuncFuncGrayscale VisualShaderNodeColorFuncFunction = 0
	VisualShaderNodeColorFuncFuncHsv2rgb VisualShaderNodeColorFuncFunction = 1
	VisualShaderNodeColorFuncFuncRgb2hsv VisualShaderNodeColorFuncFunction = 2
	VisualShaderNodeColorFuncFuncSepia VisualShaderNodeColorFuncFunction = 3
	VisualShaderNodeColorFuncFuncMax VisualShaderNodeColorFuncFunction = 4
)
func (gdClass VisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorFunc[0], fn) }
func (gdClass VisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction { return gdnative.Return[VisualShaderNodeColorFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeColorFunc[1]) }

type VisualShaderNodeColorOp gdnative.Object

var methodVisualShaderNodeColorOp [2]gdnative.Method

type VisualShaderNodeColorOpOperator int64

const (
	VisualShaderNodeColorOpOpScreen VisualShaderNodeColorOpOperator = 0
	VisualShaderNodeColorOpOpDifference VisualShaderNodeColorOpOperator = 1
	VisualShaderNodeColorOpOpDarken VisualShaderNodeColorOpOperator = 2
	VisualShaderNodeColorOpOpLighten VisualShaderNodeColorOpOperator = 3
	VisualShaderNodeColorOpOpOverlay VisualShaderNodeColorOpOperator = 4
	VisualShaderNodeColorOpOpDodge VisualShaderNodeColorOpOperator = 5
	VisualShaderNodeColorOpOpBurn VisualShaderNodeColorOpOperator = 6
	VisualShaderNodeColorOpOpSoftLight VisualShaderNodeColorOpOperator = 7
	VisualShaderNodeColorOpOpHardLight VisualShaderNodeColorOpOperator = 8
	VisualShaderNodeColorOpOpMax VisualShaderNodeColorOpOperator = 9
)
func (gdClass VisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorOp[0], op) }
func (gdClass VisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator { return gdnative.Return[VisualShaderNodeColorOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeColorOp[1]) }

type VisualShaderNodeColorUniform gdnative.Object

var methodVisualShaderNodeColorUniform [4]gdnative.Method
func (gdClass VisualShaderNodeColorUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[0], enabled) }
func (gdClass VisualShaderNodeColorUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[1]) }
func (gdClass VisualShaderNodeColorUniform) SetDefaultValue(value Color)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[2], value) }
func (gdClass VisualShaderNodeColorUniform) GetDefaultValue() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[3]) }

type VisualShaderNodeComment gdnative.Object

var methodVisualShaderNodeComment [4]gdnative.Method
func (gdClass VisualShaderNodeComment) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeComment[0], title) }
func (gdClass VisualShaderNodeComment) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeComment[1]) }
func (gdClass VisualShaderNodeComment) SetDescription(description string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeComment[2], description) }
func (gdClass VisualShaderNodeComment) GetDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeComment[3]) }

type VisualShaderNodeCompare gdnative.Object

var methodVisualShaderNodeCompare [6]gdnative.Method

type VisualShaderNodeCompareComparisonType int64

const (
	VisualShaderNodeCompareCtypeScalar VisualShaderNodeCompareComparisonType = 0
	VisualShaderNodeCompareCtypeScalarInt VisualShaderNodeCompareComparisonType = 1
	VisualShaderNodeCompareCtypeVector2d VisualShaderNodeCompareComparisonType = 2
	VisualShaderNodeCompareCtypeVector3d VisualShaderNodeCompareComparisonType = 3
	VisualShaderNodeCompareCtypeVector4d VisualShaderNodeCompareComparisonType = 4
	VisualShaderNodeCompareCtypeBoolean VisualShaderNodeCompareComparisonType = 5
	VisualShaderNodeCompareCtypeTransform VisualShaderNodeCompareComparisonType = 6
	VisualShaderNodeCompareCtypeMax VisualShaderNodeCompareComparisonType = 7
)

type VisualShaderNodeCompareFunction int64

const (
	VisualShaderNodeCompareFuncEqual VisualShaderNodeCompareFunction = 0
	VisualShaderNodeCompareFuncNotEqual VisualShaderNodeCompareFunction = 1
	VisualShaderNodeCompareFuncGreaterThan VisualShaderNodeCompareFunction = 2
	VisualShaderNodeCompareFuncGreaterThanEqual VisualShaderNodeCompareFunction = 3
	VisualShaderNodeCompareFuncLessThan VisualShaderNodeCompareFunction = 4
	VisualShaderNodeCompareFuncLessThanEqual VisualShaderNodeCompareFunction = 5
	VisualShaderNodeCompareFuncMax VisualShaderNodeCompareFunction = 6
)

type VisualShaderNodeCompareCondition int64

const (
	VisualShaderNodeCompareCondAll VisualShaderNodeCompareCondition = 0
	VisualShaderNodeCompareCondAny VisualShaderNodeCompareCondition = 1
	VisualShaderNodeCompareCondMax VisualShaderNodeCompareCondition = 2
)
func (gdClass VisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[0], atype) }
func (gdClass VisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType { return gdnative.Return[VisualShaderNodeCompareComparisonType](gdnative.Object(gdClass), methodVisualShaderNodeCompare[1]) }
func (gdClass VisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[2], fn) }
func (gdClass VisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction { return gdnative.Return[VisualShaderNodeCompareFunction](gdnative.Object(gdClass), methodVisualShaderNodeCompare[3]) }
func (gdClass VisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[4], condition) }
func (gdClass VisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition { return gdnative.Return[VisualShaderNodeCompareCondition](gdnative.Object(gdClass), methodVisualShaderNodeCompare[5]) }

type VisualShaderNodeConstant gdnative.Object

var methodVisualShaderNodeConstant [0]gdnative.Method

type VisualShaderNodeCubemap gdnative.Object

var methodVisualShaderNodeCubemap [6]gdnative.Method

type VisualShaderNodeCubemapSource int64

const (
	VisualShaderNodeCubemapSourceTexture VisualShaderNodeCubemapSource = 0
	VisualShaderNodeCubemapSourcePort VisualShaderNodeCubemapSource = 1
	VisualShaderNodeCubemapSourceMax VisualShaderNodeCubemapSource = 2
)

type VisualShaderNodeCubemapTextureType int64

const (
	VisualShaderNodeCubemapTypeData VisualShaderNodeCubemapTextureType = 0
	VisualShaderNodeCubemapTypeColor VisualShaderNodeCubemapTextureType = 1
	VisualShaderNodeCubemapTypeNormalMap VisualShaderNodeCubemapTextureType = 2
	VisualShaderNodeCubemapTypeMax VisualShaderNodeCubemapTextureType = 3
)
func (gdClass VisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[0], value) }
func (gdClass VisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource { return gdnative.Return[VisualShaderNodeCubemapSource](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[1]) }
func (gdClass VisualShaderNodeCubemap) SetCubeMap(value Cubemap)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[2], value) }
func (gdClass VisualShaderNodeCubemap) GetCubeMap() Cubemap { return gdnative.Return[Cubemap](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[3]) }
func (gdClass VisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[4], value) }
func (gdClass VisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType { return gdnative.Return[VisualShaderNodeCubemapTextureType](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[5]) }

type VisualShaderNodeCubemapUniform gdnative.Object

var methodVisualShaderNodeCubemapUniform [0]gdnative.Method

type VisualShaderNodeCurveTexture gdnative.Object

var methodVisualShaderNodeCurveTexture [2]gdnative.Method
func (gdClass VisualShaderNodeCurveTexture) SetTexture(texture CurveTexture)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCurveTexture[0], texture) }
func (gdClass VisualShaderNodeCurveTexture) GetTexture() CurveTexture { return gdnative.Return[CurveTexture](gdnative.Object(gdClass), methodVisualShaderNodeCurveTexture[1]) }

type VisualShaderNodeCurveXYZTexture gdnative.Object

var methodVisualShaderNodeCurveXYZTexture [2]gdnative.Method
func (gdClass VisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCurveXYZTexture[0], texture) }
func (gdClass VisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture { return gdnative.Return[CurveXYZTexture](gdnative.Object(gdClass), methodVisualShaderNodeCurveXYZTexture[1]) }

type VisualShaderNodeCustom gdnative.Object

var methodVisualShaderNodeCustom [15]gdnative.Method
func (gdClass VisualShaderNodeCustom) GetNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[0]) }
func (gdClass VisualShaderNodeCustom) GetDescriptionImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[1]) }
func (gdClass VisualShaderNodeCustom) GetCategoryImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[2]) }
func (gdClass VisualShaderNodeCustom) GetReturnIconTypeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeCustom[3]) }
func (gdClass VisualShaderNodeCustom) GetInputPortCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeCustom[4]) }
func (gdClass VisualShaderNodeCustom) GetInputPortTypeImplementation(port int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeCustom[5], port) }
func (gdClass VisualShaderNodeCustom) GetInputPortNameImplementation(port int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[6], port) }
func (gdClass VisualShaderNodeCustom) GetOutputPortCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeCustom[7]) }
func (gdClass VisualShaderNodeCustom) GetOutputPortTypeImplementation(port int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeCustom[8], port) }
func (gdClass VisualShaderNodeCustom) GetOutputPortNameImplementation(port int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[9], port) }
func (gdClass VisualShaderNodeCustom) GetCodeImplementation(input_vars Array, output_vars Array, mode ShaderMode, atype VisualShaderType) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[10], input_vars, output_vars, mode, atype) }
func (gdClass VisualShaderNodeCustom) GetFuncCodeImplementation(mode ShaderMode, atype VisualShaderType) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[11], mode, atype) }
func (gdClass VisualShaderNodeCustom) GetGlobalCodeImplementation(mode ShaderMode) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeCustom[12], mode) }
func (gdClass VisualShaderNodeCustom) IsHighendImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeCustom[13]) }
func (gdClass VisualShaderNodeCustom) IsAvailableImplementation(mode ShaderMode, atype VisualShaderType) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeCustom[14], mode, atype) }

type VisualShaderNodeDerivativeFunc gdnative.Object

var methodVisualShaderNodeDerivativeFunc [4]gdnative.Method

type VisualShaderNodeDerivativeFuncOpType int64

const (
	VisualShaderNodeDerivativeFuncOpTypeScalar VisualShaderNodeDerivativeFuncOpType = 0
	VisualShaderNodeDerivativeFuncOpTypeVector2d VisualShaderNodeDerivativeFuncOpType = 1
	VisualShaderNodeDerivativeFuncOpTypeVector3d VisualShaderNodeDerivativeFuncOpType = 2
	VisualShaderNodeDerivativeFuncOpTypeVector4d VisualShaderNodeDerivativeFuncOpType = 3
	VisualShaderNodeDerivativeFuncOpTypeMax VisualShaderNodeDerivativeFuncOpType = 4
)

type VisualShaderNodeDerivativeFuncFunction int64

const (
	VisualShaderNodeDerivativeFuncFuncSum VisualShaderNodeDerivativeFuncFunction = 0
	VisualShaderNodeDerivativeFuncFuncX VisualShaderNodeDerivativeFuncFunction = 1
	VisualShaderNodeDerivativeFuncFuncY VisualShaderNodeDerivativeFuncFunction = 2
	VisualShaderNodeDerivativeFuncFuncMax VisualShaderNodeDerivativeFuncFunction = 3
)
func (gdClass VisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[0], atype) }
func (gdClass VisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType { return gdnative.Return[VisualShaderNodeDerivativeFuncOpType](gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[1]) }
func (gdClass VisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[2], fn) }
func (gdClass VisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction { return gdnative.Return[VisualShaderNodeDerivativeFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[3]) }

type VisualShaderNodeDeterminant gdnative.Object

var methodVisualShaderNodeDeterminant [0]gdnative.Method

type VisualShaderNodeDotProduct gdnative.Object

var methodVisualShaderNodeDotProduct [0]gdnative.Method

type VisualShaderNodeExpression gdnative.Object

var methodVisualShaderNodeExpression [2]gdnative.Method
func (gdClass VisualShaderNodeExpression) SetExpression(expression string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeExpression[0], expression) }
func (gdClass VisualShaderNodeExpression) GetExpression() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeExpression[1]) }

type VisualShaderNodeFaceForward gdnative.Object

var methodVisualShaderNodeFaceForward [0]gdnative.Method

type VisualShaderNodeFloatConstant gdnative.Object

var methodVisualShaderNodeFloatConstant [2]gdnative.Method
func (gdClass VisualShaderNodeFloatConstant) SetConstant(constant float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatConstant[0], constant) }
func (gdClass VisualShaderNodeFloatConstant) GetConstant() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatConstant[1]) }

type VisualShaderNodeFloatFunc gdnative.Object

var methodVisualShaderNodeFloatFunc [2]gdnative.Method

type VisualShaderNodeFloatFuncFunction int64

const (
	VisualShaderNodeFloatFuncFuncSin VisualShaderNodeFloatFuncFunction = 0
	VisualShaderNodeFloatFuncFuncCos VisualShaderNodeFloatFuncFunction = 1
	VisualShaderNodeFloatFuncFuncTan VisualShaderNodeFloatFuncFunction = 2
	VisualShaderNodeFloatFuncFuncAsin VisualShaderNodeFloatFuncFunction = 3
	VisualShaderNodeFloatFuncFuncAcos VisualShaderNodeFloatFuncFunction = 4
	VisualShaderNodeFloatFuncFuncAtan VisualShaderNodeFloatFuncFunction = 5
	VisualShaderNodeFloatFuncFuncSinh VisualShaderNodeFloatFuncFunction = 6
	VisualShaderNodeFloatFuncFuncCosh VisualShaderNodeFloatFuncFunction = 7
	VisualShaderNodeFloatFuncFuncTanh VisualShaderNodeFloatFuncFunction = 8
	VisualShaderNodeFloatFuncFuncLog VisualShaderNodeFloatFuncFunction = 9
	VisualShaderNodeFloatFuncFuncExp VisualShaderNodeFloatFuncFunction = 10
	VisualShaderNodeFloatFuncFuncSqrt VisualShaderNodeFloatFuncFunction = 11
	VisualShaderNodeFloatFuncFuncAbs VisualShaderNodeFloatFuncFunction = 12
	VisualShaderNodeFloatFuncFuncSign VisualShaderNodeFloatFuncFunction = 13
	VisualShaderNodeFloatFuncFuncFloor VisualShaderNodeFloatFuncFunction = 14
	VisualShaderNodeFloatFuncFuncRound VisualShaderNodeFloatFuncFunction = 15
	VisualShaderNodeFloatFuncFuncCeil VisualShaderNodeFloatFuncFunction = 16
	VisualShaderNodeFloatFuncFuncFract VisualShaderNodeFloatFuncFunction = 17
	VisualShaderNodeFloatFuncFuncSaturate VisualShaderNodeFloatFuncFunction = 18
	VisualShaderNodeFloatFuncFuncNegate VisualShaderNodeFloatFuncFunction = 19
	VisualShaderNodeFloatFuncFuncAcosh VisualShaderNodeFloatFuncFunction = 20
	VisualShaderNodeFloatFuncFuncAsinh VisualShaderNodeFloatFuncFunction = 21
	VisualShaderNodeFloatFuncFuncAtanh VisualShaderNodeFloatFuncFunction = 22
	VisualShaderNodeFloatFuncFuncDegrees VisualShaderNodeFloatFuncFunction = 23
	VisualShaderNodeFloatFuncFuncExp2 VisualShaderNodeFloatFuncFunction = 24
	VisualShaderNodeFloatFuncFuncInverseSqrt VisualShaderNodeFloatFuncFunction = 25
	VisualShaderNodeFloatFuncFuncLog2 VisualShaderNodeFloatFuncFunction = 26
	VisualShaderNodeFloatFuncFuncRadians VisualShaderNodeFloatFuncFunction = 27
	VisualShaderNodeFloatFuncFuncReciprocal VisualShaderNodeFloatFuncFunction = 28
	VisualShaderNodeFloatFuncFuncRoundeven VisualShaderNodeFloatFuncFunction = 29
	VisualShaderNodeFloatFuncFuncTrunc VisualShaderNodeFloatFuncFunction = 30
	VisualShaderNodeFloatFuncFuncOneminus VisualShaderNodeFloatFuncFunction = 31
	VisualShaderNodeFloatFuncFuncMax VisualShaderNodeFloatFuncFunction = 32
)
func (gdClass VisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatFunc[0], fn) }
func (gdClass VisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction { return gdnative.Return[VisualShaderNodeFloatFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeFloatFunc[1]) }

type VisualShaderNodeFloatOp gdnative.Object

var methodVisualShaderNodeFloatOp [2]gdnative.Method

type VisualShaderNodeFloatOpOperator int64

const (
	VisualShaderNodeFloatOpOpAdd VisualShaderNodeFloatOpOperator = 0
	VisualShaderNodeFloatOpOpSub VisualShaderNodeFloatOpOperator = 1
	VisualShaderNodeFloatOpOpMul VisualShaderNodeFloatOpOperator = 2
	VisualShaderNodeFloatOpOpDiv VisualShaderNodeFloatOpOperator = 3
	VisualShaderNodeFloatOpOpMod VisualShaderNodeFloatOpOperator = 4
	VisualShaderNodeFloatOpOpPow VisualShaderNodeFloatOpOperator = 5
	VisualShaderNodeFloatOpOpMax VisualShaderNodeFloatOpOperator = 6
	VisualShaderNodeFloatOpOpMin VisualShaderNodeFloatOpOperator = 7
	VisualShaderNodeFloatOpOpAtan2 VisualShaderNodeFloatOpOperator = 8
	VisualShaderNodeFloatOpOpStep VisualShaderNodeFloatOpOperator = 9
	VisualShaderNodeFloatOpOpEnumSize VisualShaderNodeFloatOpOperator = 10
)
func (gdClass VisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatOp[0], op) }
func (gdClass VisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator { return gdnative.Return[VisualShaderNodeFloatOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeFloatOp[1]) }

type VisualShaderNodeFloatUniform gdnative.Object

var methodVisualShaderNodeFloatUniform [12]gdnative.Method

type VisualShaderNodeFloatUniformHint int64

const (
	VisualShaderNodeFloatUniformHintNone VisualShaderNodeFloatUniformHint = 0
	VisualShaderNodeFloatUniformHintRange VisualShaderNodeFloatUniformHint = 1
	VisualShaderNodeFloatUniformHintRangeStep VisualShaderNodeFloatUniformHint = 2
	VisualShaderNodeFloatUniformHintMax VisualShaderNodeFloatUniformHint = 3
)
func (gdClass VisualShaderNodeFloatUniform) SetHint(hint VisualShaderNodeFloatUniformHint)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[0], hint) }
func (gdClass VisualShaderNodeFloatUniform) GetHint() VisualShaderNodeFloatUniformHint { return gdnative.Return[VisualShaderNodeFloatUniformHint](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[1]) }
func (gdClass VisualShaderNodeFloatUniform) SetMin(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[2], value) }
func (gdClass VisualShaderNodeFloatUniform) GetMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[3]) }
func (gdClass VisualShaderNodeFloatUniform) SetMax(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[4], value) }
func (gdClass VisualShaderNodeFloatUniform) GetMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[5]) }
func (gdClass VisualShaderNodeFloatUniform) SetStep(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[6], value) }
func (gdClass VisualShaderNodeFloatUniform) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[7]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[8], enabled) }
func (gdClass VisualShaderNodeFloatUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[9]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValue(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[10], value) }
func (gdClass VisualShaderNodeFloatUniform) GetDefaultValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[11]) }

type VisualShaderNodeFresnel gdnative.Object

var methodVisualShaderNodeFresnel [0]gdnative.Method

type VisualShaderNodeGlobalExpression gdnative.Object

var methodVisualShaderNodeGlobalExpression [0]gdnative.Method

type VisualShaderNodeGroupBase gdnative.Object

var methodVisualShaderNodeGroupBase [21]gdnative.Method
func (gdClass VisualShaderNodeGroupBase) SetInputs(inputs string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[0], inputs) }
func (gdClass VisualShaderNodeGroupBase) GetInputs() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[1]) }
func (gdClass VisualShaderNodeGroupBase) SetOutputs(outputs string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[2], outputs) }
func (gdClass VisualShaderNodeGroupBase) GetOutputs() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[3]) }
func (gdClass VisualShaderNodeGroupBase) IsValidPortName(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[4], name) }
func (gdClass VisualShaderNodeGroupBase) AddInputPort(id int64, atype int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[5], id, atype, name) }
func (gdClass VisualShaderNodeGroupBase) RemoveInputPort(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[6], id) }
func (gdClass VisualShaderNodeGroupBase) GetInputPortCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[7]) }
func (gdClass VisualShaderNodeGroupBase) HasInputPort(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[8], id) }
func (gdClass VisualShaderNodeGroupBase) ClearInputPorts()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[9]) }
func (gdClass VisualShaderNodeGroupBase) AddOutputPort(id int64, atype int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[10], id, atype, name) }
func (gdClass VisualShaderNodeGroupBase) RemoveOutputPort(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[11], id) }
func (gdClass VisualShaderNodeGroupBase) GetOutputPortCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[12]) }
func (gdClass VisualShaderNodeGroupBase) HasOutputPort(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[13], id) }
func (gdClass VisualShaderNodeGroupBase) ClearOutputPorts()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[14]) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[15], id, name) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortType(id int64, atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[16], id, atype) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[17], id, name) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortType(id int64, atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[18], id, atype) }
func (gdClass VisualShaderNodeGroupBase) GetFreeInputPortId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[19]) }
func (gdClass VisualShaderNodeGroupBase) GetFreeOutputPortId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[20]) }

type VisualShaderNodeIf gdnative.Object

var methodVisualShaderNodeIf [0]gdnative.Method

type VisualShaderNodeInput gdnative.Object

var methodVisualShaderNodeInput [3]gdnative.Method
func (gdClass VisualShaderNodeInput) SetInputName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeInput[0], name) }
func (gdClass VisualShaderNodeInput) GetInputName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeInput[1]) }
func (gdClass VisualShaderNodeInput) GetInputRealName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeInput[2]) }

type VisualShaderNodeIntConstant gdnative.Object

var methodVisualShaderNodeIntConstant [2]gdnative.Method
func (gdClass VisualShaderNodeIntConstant) SetConstant(constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntConstant[0], constant) }
func (gdClass VisualShaderNodeIntConstant) GetConstant() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntConstant[1]) }

type VisualShaderNodeIntFunc gdnative.Object

var methodVisualShaderNodeIntFunc [2]gdnative.Method

type VisualShaderNodeIntFuncFunction int64

const (
	VisualShaderNodeIntFuncFuncAbs VisualShaderNodeIntFuncFunction = 0
	VisualShaderNodeIntFuncFuncNegate VisualShaderNodeIntFuncFunction = 1
	VisualShaderNodeIntFuncFuncSign VisualShaderNodeIntFuncFunction = 2
	VisualShaderNodeIntFuncFuncBitwiseNot VisualShaderNodeIntFuncFunction = 3
	VisualShaderNodeIntFuncFuncMax VisualShaderNodeIntFuncFunction = 4
)
func (gdClass VisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntFunc[0], fn) }
func (gdClass VisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction { return gdnative.Return[VisualShaderNodeIntFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeIntFunc[1]) }

type VisualShaderNodeIntOp gdnative.Object

var methodVisualShaderNodeIntOp [2]gdnative.Method

type VisualShaderNodeIntOpOperator int64

const (
	VisualShaderNodeIntOpOpAdd VisualShaderNodeIntOpOperator = 0
	VisualShaderNodeIntOpOpSub VisualShaderNodeIntOpOperator = 1
	VisualShaderNodeIntOpOpMul VisualShaderNodeIntOpOperator = 2
	VisualShaderNodeIntOpOpDiv VisualShaderNodeIntOpOperator = 3
	VisualShaderNodeIntOpOpMod VisualShaderNodeIntOpOperator = 4
	VisualShaderNodeIntOpOpMax VisualShaderNodeIntOpOperator = 5
	VisualShaderNodeIntOpOpMin VisualShaderNodeIntOpOperator = 6
	VisualShaderNodeIntOpOpBitwiseAnd VisualShaderNodeIntOpOperator = 7
	VisualShaderNodeIntOpOpBitwiseOr VisualShaderNodeIntOpOperator = 8
	VisualShaderNodeIntOpOpBitwiseXor VisualShaderNodeIntOpOperator = 9
	VisualShaderNodeIntOpOpBitwiseLeftShift VisualShaderNodeIntOpOperator = 10
	VisualShaderNodeIntOpOpBitwiseRightShift VisualShaderNodeIntOpOperator = 11
	VisualShaderNodeIntOpOpEnumSize VisualShaderNodeIntOpOperator = 12
)
func (gdClass VisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntOp[0], op) }
func (gdClass VisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator { return gdnative.Return[VisualShaderNodeIntOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeIntOp[1]) }

type VisualShaderNodeIntUniform gdnative.Object

var methodVisualShaderNodeIntUniform [12]gdnative.Method

type VisualShaderNodeIntUniformHint int64

const (
	VisualShaderNodeIntUniformHintNone VisualShaderNodeIntUniformHint = 0
	VisualShaderNodeIntUniformHintRange VisualShaderNodeIntUniformHint = 1
	VisualShaderNodeIntUniformHintRangeStep VisualShaderNodeIntUniformHint = 2
	VisualShaderNodeIntUniformHintMax VisualShaderNodeIntUniformHint = 3
)
func (gdClass VisualShaderNodeIntUniform) SetHint(hint VisualShaderNodeIntUniformHint)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[0], hint) }
func (gdClass VisualShaderNodeIntUniform) GetHint() VisualShaderNodeIntUniformHint { return gdnative.Return[VisualShaderNodeIntUniformHint](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[1]) }
func (gdClass VisualShaderNodeIntUniform) SetMin(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[2], value) }
func (gdClass VisualShaderNodeIntUniform) GetMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[3]) }
func (gdClass VisualShaderNodeIntUniform) SetMax(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[4], value) }
func (gdClass VisualShaderNodeIntUniform) GetMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[5]) }
func (gdClass VisualShaderNodeIntUniform) SetStep(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[6], value) }
func (gdClass VisualShaderNodeIntUniform) GetStep() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[7]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[8], enabled) }
func (gdClass VisualShaderNodeIntUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[9]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValue(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[10], value) }
func (gdClass VisualShaderNodeIntUniform) GetDefaultValue() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[11]) }

type VisualShaderNodeIs gdnative.Object

var methodVisualShaderNodeIs [2]gdnative.Method

type VisualShaderNodeIsFunction int64

const (
	VisualShaderNodeIsFuncIsInf VisualShaderNodeIsFunction = 0
	VisualShaderNodeIsFuncIsNan VisualShaderNodeIsFunction = 1
	VisualShaderNodeIsFuncMax VisualShaderNodeIsFunction = 2
)
func (gdClass VisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIs[0], fn) }
func (gdClass VisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction { return gdnative.Return[VisualShaderNodeIsFunction](gdnative.Object(gdClass), methodVisualShaderNodeIs[1]) }

type VisualShaderNodeMix gdnative.Object

var methodVisualShaderNodeMix [2]gdnative.Method

type VisualShaderNodeMixOpType int64

const (
	VisualShaderNodeMixOpTypeScalar VisualShaderNodeMixOpType = 0
	VisualShaderNodeMixOpTypeVector2d VisualShaderNodeMixOpType = 1
	VisualShaderNodeMixOpTypeVector2dScalar VisualShaderNodeMixOpType = 2
	VisualShaderNodeMixOpTypeVector3d VisualShaderNodeMixOpType = 3
	VisualShaderNodeMixOpTypeVector3dScalar VisualShaderNodeMixOpType = 4
	VisualShaderNodeMixOpTypeVector4d VisualShaderNodeMixOpType = 5
	VisualShaderNodeMixOpTypeVector4dScalar VisualShaderNodeMixOpType = 6
	VisualShaderNodeMixOpTypeMax VisualShaderNodeMixOpType = 7
)
func (gdClass VisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeMix[0], op_type) }
func (gdClass VisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType { return gdnative.Return[VisualShaderNodeMixOpType](gdnative.Object(gdClass), methodVisualShaderNodeMix[1]) }

type VisualShaderNodeMultiplyAdd gdnative.Object

var methodVisualShaderNodeMultiplyAdd [2]gdnative.Method

type VisualShaderNodeMultiplyAddOpType int64

const (
	VisualShaderNodeMultiplyAddOpTypeScalar VisualShaderNodeMultiplyAddOpType = 0
	VisualShaderNodeMultiplyAddOpTypeVector2d VisualShaderNodeMultiplyAddOpType = 1
	VisualShaderNodeMultiplyAddOpTypeVector3d VisualShaderNodeMultiplyAddOpType = 2
	VisualShaderNodeMultiplyAddOpTypeVector4d VisualShaderNodeMultiplyAddOpType = 3
	VisualShaderNodeMultiplyAddOpTypeMax VisualShaderNodeMultiplyAddOpType = 4
)
func (gdClass VisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeMultiplyAdd[0], atype) }
func (gdClass VisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType { return gdnative.Return[VisualShaderNodeMultiplyAddOpType](gdnative.Object(gdClass), methodVisualShaderNodeMultiplyAdd[1]) }

type VisualShaderNodeOuterProduct gdnative.Object

var methodVisualShaderNodeOuterProduct [0]gdnative.Method

type VisualShaderNodeOutput gdnative.Object

var methodVisualShaderNodeOutput [0]gdnative.Method

type VisualShaderNodeParticleAccelerator gdnative.Object

var methodVisualShaderNodeParticleAccelerator [2]gdnative.Method

type VisualShaderNodeParticleAcceleratorMode int64

const (
	VisualShaderNodeParticleAcceleratorModeLinear VisualShaderNodeParticleAcceleratorMode = 0
	VisualShaderNodeParticleAcceleratorModeRadial VisualShaderNodeParticleAcceleratorMode = 1
	VisualShaderNodeParticleAcceleratorModeTangential VisualShaderNodeParticleAcceleratorMode = 2
	VisualShaderNodeParticleAcceleratorModeMax VisualShaderNodeParticleAcceleratorMode = 3
)
func (gdClass VisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleAccelerator[0], mode) }
func (gdClass VisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode { return gdnative.Return[VisualShaderNodeParticleAcceleratorMode](gdnative.Object(gdClass), methodVisualShaderNodeParticleAccelerator[1]) }

type VisualShaderNodeParticleBoxEmitter gdnative.Object

var methodVisualShaderNodeParticleBoxEmitter [0]gdnative.Method

type VisualShaderNodeParticleConeVelocity gdnative.Object

var methodVisualShaderNodeParticleConeVelocity [0]gdnative.Method

type VisualShaderNodeParticleEmit gdnative.Object

var methodVisualShaderNodeParticleEmit [2]gdnative.Method

type VisualShaderNodeParticleEmitEmitFlags int64

const (
	VisualShaderNodeParticleEmitEmitFlagPosition VisualShaderNodeParticleEmitEmitFlags = 1
	VisualShaderNodeParticleEmitEmitFlagRotScale VisualShaderNodeParticleEmitEmitFlags = 2
	VisualShaderNodeParticleEmitEmitFlagVelocity VisualShaderNodeParticleEmitEmitFlags = 4
	VisualShaderNodeParticleEmitEmitFlagColor VisualShaderNodeParticleEmitEmitFlags = 8
	VisualShaderNodeParticleEmitEmitFlagCustom VisualShaderNodeParticleEmitEmitFlags = 16
)
func (gdClass VisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleEmit[0], flags) }
func (gdClass VisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags { return gdnative.Return[VisualShaderNodeParticleEmitEmitFlags](gdnative.Object(gdClass), methodVisualShaderNodeParticleEmit[1]) }

type VisualShaderNodeParticleEmitter gdnative.Object

var methodVisualShaderNodeParticleEmitter [2]gdnative.Method
func (gdClass VisualShaderNodeParticleEmitter) SetMode2d(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleEmitter[0], enabled) }
func (gdClass VisualShaderNodeParticleEmitter) IsMode2d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleEmitter[1]) }

type VisualShaderNodeParticleMeshEmitter gdnative.Object

var methodVisualShaderNodeParticleMeshEmitter [6]gdnative.Method
func (gdClass VisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[0], mesh) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[1]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[2], enabled) }
func (gdClass VisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[3]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[4], surface_index) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[5]) }

type VisualShaderNodeParticleMultiplyByAxisAngle gdnative.Object

var methodVisualShaderNodeParticleMultiplyByAxisAngle [2]gdnative.Method
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMultiplyByAxisAngle[0], enabled) }
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleMultiplyByAxisAngle[1]) }

type VisualShaderNodeParticleOutput gdnative.Object

var methodVisualShaderNodeParticleOutput [0]gdnative.Method

type VisualShaderNodeParticleRandomness gdnative.Object

var methodVisualShaderNodeParticleRandomness [2]gdnative.Method

type VisualShaderNodeParticleRandomnessOpType int64

const (
	VisualShaderNodeParticleRandomnessOpTypeScalar VisualShaderNodeParticleRandomnessOpType = 0
	VisualShaderNodeParticleRandomnessOpTypeVector2d VisualShaderNodeParticleRandomnessOpType = 1
	VisualShaderNodeParticleRandomnessOpTypeVector3d VisualShaderNodeParticleRandomnessOpType = 2
	VisualShaderNodeParticleRandomnessOpTypeMax VisualShaderNodeParticleRandomnessOpType = 3
)
func (gdClass VisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleRandomness[0], atype) }
func (gdClass VisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType { return gdnative.Return[VisualShaderNodeParticleRandomnessOpType](gdnative.Object(gdClass), methodVisualShaderNodeParticleRandomness[1]) }

type VisualShaderNodeParticleRingEmitter gdnative.Object

var methodVisualShaderNodeParticleRingEmitter [0]gdnative.Method

type VisualShaderNodeParticleSphereEmitter gdnative.Object

var methodVisualShaderNodeParticleSphereEmitter [0]gdnative.Method

type VisualShaderNodeResizableBase gdnative.Object

var methodVisualShaderNodeResizableBase [2]gdnative.Method
func (gdClass VisualShaderNodeResizableBase) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeResizableBase[0], size) }
func (gdClass VisualShaderNodeResizableBase) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeResizableBase[1]) }

type VisualShaderNodeSDFRaymarch gdnative.Object

var methodVisualShaderNodeSDFRaymarch [0]gdnative.Method

type VisualShaderNodeSDFToScreenUV gdnative.Object

var methodVisualShaderNodeSDFToScreenUV [0]gdnative.Method

type VisualShaderNodeSample3D gdnative.Object

var methodVisualShaderNodeSample3D [2]gdnative.Method

type VisualShaderNodeSample3DSource int64

const (
	VisualShaderNodeSample3DSourceTexture VisualShaderNodeSample3DSource = 0
	VisualShaderNodeSample3DSourcePort VisualShaderNodeSample3DSource = 1
	VisualShaderNodeSample3DSourceMax VisualShaderNodeSample3DSource = 2
)
func (gdClass VisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSample3D[0], value) }
func (gdClass VisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource { return gdnative.Return[VisualShaderNodeSample3DSource](gdnative.Object(gdClass), methodVisualShaderNodeSample3D[1]) }

type VisualShaderNodeScreenUVToSDF gdnative.Object

var methodVisualShaderNodeScreenUVToSDF [0]gdnative.Method

type VisualShaderNodeSmoothStep gdnative.Object

var methodVisualShaderNodeSmoothStep [2]gdnative.Method

type VisualShaderNodeSmoothStepOpType int64

const (
	VisualShaderNodeSmoothStepOpTypeScalar VisualShaderNodeSmoothStepOpType = 0
	VisualShaderNodeSmoothStepOpTypeVector2d VisualShaderNodeSmoothStepOpType = 1
	VisualShaderNodeSmoothStepOpTypeVector2dScalar VisualShaderNodeSmoothStepOpType = 2
	VisualShaderNodeSmoothStepOpTypeVector3d VisualShaderNodeSmoothStepOpType = 3
	VisualShaderNodeSmoothStepOpTypeVector3dScalar VisualShaderNodeSmoothStepOpType = 4
	VisualShaderNodeSmoothStepOpTypeVector4d VisualShaderNodeSmoothStepOpType = 5
	VisualShaderNodeSmoothStepOpTypeVector4dScalar VisualShaderNodeSmoothStepOpType = 6
	VisualShaderNodeSmoothStepOpTypeMax VisualShaderNodeSmoothStepOpType = 7
)
func (gdClass VisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSmoothStep[0], op_type) }
func (gdClass VisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType { return gdnative.Return[VisualShaderNodeSmoothStepOpType](gdnative.Object(gdClass), methodVisualShaderNodeSmoothStep[1]) }

type VisualShaderNodeStep gdnative.Object

var methodVisualShaderNodeStep [2]gdnative.Method

type VisualShaderNodeStepOpType int64

const (
	VisualShaderNodeStepOpTypeScalar VisualShaderNodeStepOpType = 0
	VisualShaderNodeStepOpTypeVector2d VisualShaderNodeStepOpType = 1
	VisualShaderNodeStepOpTypeVector2dScalar VisualShaderNodeStepOpType = 2
	VisualShaderNodeStepOpTypeVector3d VisualShaderNodeStepOpType = 3
	VisualShaderNodeStepOpTypeVector3dScalar VisualShaderNodeStepOpType = 4
	VisualShaderNodeStepOpTypeVector4d VisualShaderNodeStepOpType = 5
	VisualShaderNodeStepOpTypeVector4dScalar VisualShaderNodeStepOpType = 6
	VisualShaderNodeStepOpTypeMax VisualShaderNodeStepOpType = 7
)
func (gdClass VisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeStep[0], op_type) }
func (gdClass VisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType { return gdnative.Return[VisualShaderNodeStepOpType](gdnative.Object(gdClass), methodVisualShaderNodeStep[1]) }

type VisualShaderNodeSwitch gdnative.Object

var methodVisualShaderNodeSwitch [2]gdnative.Method

type VisualShaderNodeSwitchOpType int64

const (
	VisualShaderNodeSwitchOpTypeFloat VisualShaderNodeSwitchOpType = 0
	VisualShaderNodeSwitchOpTypeInt VisualShaderNodeSwitchOpType = 1
	VisualShaderNodeSwitchOpTypeVector2d VisualShaderNodeSwitchOpType = 2
	VisualShaderNodeSwitchOpTypeVector3d VisualShaderNodeSwitchOpType = 3
	VisualShaderNodeSwitchOpTypeVector4d VisualShaderNodeSwitchOpType = 4
	VisualShaderNodeSwitchOpTypeBoolean VisualShaderNodeSwitchOpType = 5
	VisualShaderNodeSwitchOpTypeTransform VisualShaderNodeSwitchOpType = 6
	VisualShaderNodeSwitchOpTypeMax VisualShaderNodeSwitchOpType = 7
)
func (gdClass VisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSwitch[0], atype) }
func (gdClass VisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType { return gdnative.Return[VisualShaderNodeSwitchOpType](gdnative.Object(gdClass), methodVisualShaderNodeSwitch[1]) }

type VisualShaderNodeTexture gdnative.Object

var methodVisualShaderNodeTexture [6]gdnative.Method

type VisualShaderNodeTextureSource int64

const (
	VisualShaderNodeTextureSourceTexture VisualShaderNodeTextureSource = 0
	VisualShaderNodeTextureSourceScreen VisualShaderNodeTextureSource = 1
	VisualShaderNodeTextureSource2dTexture VisualShaderNodeTextureSource = 2
	VisualShaderNodeTextureSource2dNormal VisualShaderNodeTextureSource = 3
	VisualShaderNodeTextureSourceDepth VisualShaderNodeTextureSource = 4
	VisualShaderNodeTextureSourcePort VisualShaderNodeTextureSource = 5
	VisualShaderNodeTextureSourceMax VisualShaderNodeTextureSource = 6
)

type VisualShaderNodeTextureTextureType int64

const (
	VisualShaderNodeTextureTypeData VisualShaderNodeTextureTextureType = 0
	VisualShaderNodeTextureTypeColor VisualShaderNodeTextureTextureType = 1
	VisualShaderNodeTextureTypeNormalMap VisualShaderNodeTextureTextureType = 2
	VisualShaderNodeTextureTypeMax VisualShaderNodeTextureTextureType = 3
)
func (gdClass VisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[0], value) }
func (gdClass VisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource { return gdnative.Return[VisualShaderNodeTextureSource](gdnative.Object(gdClass), methodVisualShaderNodeTexture[1]) }
func (gdClass VisualShaderNodeTexture) SetTexture(value Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[2], value) }
func (gdClass VisualShaderNodeTexture) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodVisualShaderNodeTexture[3]) }
func (gdClass VisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[4], value) }
func (gdClass VisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType { return gdnative.Return[VisualShaderNodeTextureTextureType](gdnative.Object(gdClass), methodVisualShaderNodeTexture[5]) }

type VisualShaderNodeTexture2DArray gdnative.Object

var methodVisualShaderNodeTexture2DArray [2]gdnative.Method
func (gdClass VisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture2DArray[0], value) }
func (gdClass VisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray { return gdnative.Return[Texture2DArray](gdnative.Object(gdClass), methodVisualShaderNodeTexture2DArray[1]) }

type VisualShaderNodeTexture2DArrayUniform gdnative.Object

var methodVisualShaderNodeTexture2DArrayUniform [0]gdnative.Method

type VisualShaderNodeTexture3D gdnative.Object

var methodVisualShaderNodeTexture3D [2]gdnative.Method
func (gdClass VisualShaderNodeTexture3D) SetTexture(value Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture3D[0], value) }
func (gdClass VisualShaderNodeTexture3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodVisualShaderNodeTexture3D[1]) }

type VisualShaderNodeTexture3DUniform gdnative.Object

var methodVisualShaderNodeTexture3DUniform [0]gdnative.Method

type VisualShaderNodeTextureSDF gdnative.Object

var methodVisualShaderNodeTextureSDF [0]gdnative.Method

type VisualShaderNodeTextureSDFNormal gdnative.Object

var methodVisualShaderNodeTextureSDFNormal [0]gdnative.Method

type VisualShaderNodeTextureUniform gdnative.Object

var methodVisualShaderNodeTextureUniform [8]gdnative.Method

type VisualShaderNodeTextureUniformTextureType int64

const (
	VisualShaderNodeTextureUniformTypeData VisualShaderNodeTextureUniformTextureType = 0
	VisualShaderNodeTextureUniformTypeColor VisualShaderNodeTextureUniformTextureType = 1
	VisualShaderNodeTextureUniformTypeNormalMap VisualShaderNodeTextureUniformTextureType = 2
	VisualShaderNodeTextureUniformTypeAnisotropy VisualShaderNodeTextureUniformTextureType = 3
	VisualShaderNodeTextureUniformTypeMax VisualShaderNodeTextureUniformTextureType = 4
)

type VisualShaderNodeTextureUniformColorDefault int64

const (
	VisualShaderNodeTextureUniformColorDefaultWhite VisualShaderNodeTextureUniformColorDefault = 0
	VisualShaderNodeTextureUniformColorDefaultBlack VisualShaderNodeTextureUniformColorDefault = 1
	VisualShaderNodeTextureUniformColorDefaultTransparent VisualShaderNodeTextureUniformColorDefault = 2
	VisualShaderNodeTextureUniformColorDefaultMax VisualShaderNodeTextureUniformColorDefault = 3
)

type VisualShaderNodeTextureUniformTextureFilter int64

const (
	VisualShaderNodeTextureUniformFilterDefault VisualShaderNodeTextureUniformTextureFilter = 0
	VisualShaderNodeTextureUniformFilterNearest VisualShaderNodeTextureUniformTextureFilter = 1
	VisualShaderNodeTextureUniformFilterLinear VisualShaderNodeTextureUniformTextureFilter = 2
	VisualShaderNodeTextureUniformFilterNearestMipmap VisualShaderNodeTextureUniformTextureFilter = 3
	VisualShaderNodeTextureUniformFilterLinearMipmap VisualShaderNodeTextureUniformTextureFilter = 4
	VisualShaderNodeTextureUniformFilterNearestMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 5
	VisualShaderNodeTextureUniformFilterLinearMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 6
	VisualShaderNodeTextureUniformFilterMax VisualShaderNodeTextureUniformTextureFilter = 7
)

type VisualShaderNodeTextureUniformTextureRepeat int64

const (
	VisualShaderNodeTextureUniformRepeatDefault VisualShaderNodeTextureUniformTextureRepeat = 0
	VisualShaderNodeTextureUniformRepeatEnabled VisualShaderNodeTextureUniformTextureRepeat = 1
	VisualShaderNodeTextureUniformRepeatDisabled VisualShaderNodeTextureUniformTextureRepeat = 2
	VisualShaderNodeTextureUniformRepeatMax VisualShaderNodeTextureUniformTextureRepeat = 3
)
func (gdClass VisualShaderNodeTextureUniform) SetTextureType(atype VisualShaderNodeTextureUniformTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[0], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureType() VisualShaderNodeTextureUniformTextureType { return gdnative.Return[VisualShaderNodeTextureUniformTextureType](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[1]) }
func (gdClass VisualShaderNodeTextureUniform) SetColorDefault(atype VisualShaderNodeTextureUniformColorDefault)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[2], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetColorDefault() VisualShaderNodeTextureUniformColorDefault { return gdnative.Return[VisualShaderNodeTextureUniformColorDefault](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[3]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureFilter(filter VisualShaderNodeTextureUniformTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[4], filter) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureFilter() VisualShaderNodeTextureUniformTextureFilter { return gdnative.Return[VisualShaderNodeTextureUniformTextureFilter](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[5]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureRepeat(atype VisualShaderNodeTextureUniformTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[6], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureRepeat() VisualShaderNodeTextureUniformTextureRepeat { return gdnative.Return[VisualShaderNodeTextureUniformTextureRepeat](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[7]) }

type VisualShaderNodeTextureUniformTriplanar gdnative.Object

var methodVisualShaderNodeTextureUniformTriplanar [0]gdnative.Method

type VisualShaderNodeTransformCompose gdnative.Object

var methodVisualShaderNodeTransformCompose [0]gdnative.Method

type VisualShaderNodeTransformConstant gdnative.Object

var methodVisualShaderNodeTransformConstant [2]gdnative.Method
func (gdClass VisualShaderNodeTransformConstant) SetConstant(constant Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformConstant[0], constant) }
func (gdClass VisualShaderNodeTransformConstant) GetConstant() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVisualShaderNodeTransformConstant[1]) }

type VisualShaderNodeTransformDecompose gdnative.Object

var methodVisualShaderNodeTransformDecompose [0]gdnative.Method

type VisualShaderNodeTransformFunc gdnative.Object

var methodVisualShaderNodeTransformFunc [2]gdnative.Method

type VisualShaderNodeTransformFuncFunction int64

const (
	VisualShaderNodeTransformFuncFuncInverse VisualShaderNodeTransformFuncFunction = 0
	VisualShaderNodeTransformFuncFuncTranspose VisualShaderNodeTransformFuncFunction = 1
	VisualShaderNodeTransformFuncFuncMax VisualShaderNodeTransformFuncFunction = 2
)
func (gdClass VisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformFunc[0], fn) }
func (gdClass VisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction { return gdnative.Return[VisualShaderNodeTransformFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeTransformFunc[1]) }

type VisualShaderNodeTransformOp gdnative.Object

var methodVisualShaderNodeTransformOp [2]gdnative.Method

type VisualShaderNodeTransformOpOperator int64

const (
	VisualShaderNodeTransformOpOpAxb VisualShaderNodeTransformOpOperator = 0
	VisualShaderNodeTransformOpOpBxa VisualShaderNodeTransformOpOperator = 1
	VisualShaderNodeTransformOpOpAxbComp VisualShaderNodeTransformOpOperator = 2
	VisualShaderNodeTransformOpOpBxaComp VisualShaderNodeTransformOpOperator = 3
	VisualShaderNodeTransformOpOpAdd VisualShaderNodeTransformOpOperator = 4
	VisualShaderNodeTransformOpOpAMinusB VisualShaderNodeTransformOpOperator = 5
	VisualShaderNodeTransformOpOpBMinusA VisualShaderNodeTransformOpOperator = 6
	VisualShaderNodeTransformOpOpADivB VisualShaderNodeTransformOpOperator = 7
	VisualShaderNodeTransformOpOpBDivA VisualShaderNodeTransformOpOperator = 8
	VisualShaderNodeTransformOpOpMax VisualShaderNodeTransformOpOperator = 9
)
func (gdClass VisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformOp[0], op) }
func (gdClass VisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator { return gdnative.Return[VisualShaderNodeTransformOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeTransformOp[1]) }

type VisualShaderNodeTransformUniform gdnative.Object

var methodVisualShaderNodeTransformUniform [4]gdnative.Method
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[0], enabled) }
func (gdClass VisualShaderNodeTransformUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[1]) }
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValue(value Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[2], value) }
func (gdClass VisualShaderNodeTransformUniform) GetDefaultValue() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[3]) }

type VisualShaderNodeTransformVecMult gdnative.Object

var methodVisualShaderNodeTransformVecMult [2]gdnative.Method

type VisualShaderNodeTransformVecMultOperator int64

const (
	VisualShaderNodeTransformVecMultOpAxb VisualShaderNodeTransformVecMultOperator = 0
	VisualShaderNodeTransformVecMultOpBxa VisualShaderNodeTransformVecMultOperator = 1
	VisualShaderNodeTransformVecMultOp3x3Axb VisualShaderNodeTransformVecMultOperator = 2
	VisualShaderNodeTransformVecMultOp3x3Bxa VisualShaderNodeTransformVecMultOperator = 3
	VisualShaderNodeTransformVecMultOpMax VisualShaderNodeTransformVecMultOperator = 4
)
func (gdClass VisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformVecMult[0], op) }
func (gdClass VisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator { return gdnative.Return[VisualShaderNodeTransformVecMultOperator](gdnative.Object(gdClass), methodVisualShaderNodeTransformVecMult[1]) }

type VisualShaderNodeUVFunc gdnative.Object

var methodVisualShaderNodeUVFunc [2]gdnative.Method

type VisualShaderNodeUVFuncFunction int64

const (
	VisualShaderNodeUVFuncFuncPanning VisualShaderNodeUVFuncFunction = 0
	VisualShaderNodeUVFuncFuncScaling VisualShaderNodeUVFuncFunction = 1
	VisualShaderNodeUVFuncFuncMax VisualShaderNodeUVFuncFunction = 2
)
func (gdClass VisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUVFunc[0], fn) }
func (gdClass VisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction { return gdnative.Return[VisualShaderNodeUVFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeUVFunc[1]) }

type VisualShaderNodeUniform gdnative.Object

var methodVisualShaderNodeUniform [4]gdnative.Method

type VisualShaderNodeUniformQualifier int64

const (
	VisualShaderNodeUniformQualNone VisualShaderNodeUniformQualifier = 0
	VisualShaderNodeUniformQualGlobal VisualShaderNodeUniformQualifier = 1
	VisualShaderNodeUniformQualInstance VisualShaderNodeUniformQualifier = 2
	VisualShaderNodeUniformQualMax VisualShaderNodeUniformQualifier = 3
)
func (gdClass VisualShaderNodeUniform) SetUniformName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniform[0], name) }
func (gdClass VisualShaderNodeUniform) GetUniformName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeUniform[1]) }
func (gdClass VisualShaderNodeUniform) SetQualifier(qualifier VisualShaderNodeUniformQualifier)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniform[2], qualifier) }
func (gdClass VisualShaderNodeUniform) GetQualifier() VisualShaderNodeUniformQualifier { return gdnative.Return[VisualShaderNodeUniformQualifier](gdnative.Object(gdClass), methodVisualShaderNodeUniform[3]) }

type VisualShaderNodeUniformRef gdnative.Object

var methodVisualShaderNodeUniformRef [2]gdnative.Method
func (gdClass VisualShaderNodeUniformRef) SetUniformName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniformRef[0], name) }
func (gdClass VisualShaderNodeUniformRef) GetUniformName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeUniformRef[1]) }

type VisualShaderNodeVarying gdnative.Object

var methodVisualShaderNodeVarying [4]gdnative.Method
func (gdClass VisualShaderNodeVarying) SetVaryingName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVarying[0], name) }
func (gdClass VisualShaderNodeVarying) GetVaryingName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeVarying[1]) }
func (gdClass VisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVarying[2], atype) }
func (gdClass VisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType { return gdnative.Return[VisualShaderVaryingType](gdnative.Object(gdClass), methodVisualShaderNodeVarying[3]) }

type VisualShaderNodeVaryingGetter gdnative.Object

var methodVisualShaderNodeVaryingGetter [0]gdnative.Method

type VisualShaderNodeVaryingSetter gdnative.Object

var methodVisualShaderNodeVaryingSetter [0]gdnative.Method

type VisualShaderNodeVec2Constant gdnative.Object

var methodVisualShaderNodeVec2Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec2Constant) SetConstant(constant Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Constant[0], constant) }
func (gdClass VisualShaderNodeVec2Constant) GetConstant() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeVec2Constant[1]) }

type VisualShaderNodeVec2Uniform gdnative.Object

var methodVisualShaderNodeVec2Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec2Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[1]) }
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValue(value Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[2], value) }
func (gdClass VisualShaderNodeVec2Uniform) GetDefaultValue() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[3]) }

type VisualShaderNodeVec3Constant gdnative.Object

var methodVisualShaderNodeVec3Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec3Constant) SetConstant(constant Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Constant[0], constant) }
func (gdClass VisualShaderNodeVec3Constant) GetConstant() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVisualShaderNodeVec3Constant[1]) }

type VisualShaderNodeVec3Uniform gdnative.Object

var methodVisualShaderNodeVec3Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec3Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[1]) }
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValue(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[2], value) }
func (gdClass VisualShaderNodeVec3Uniform) GetDefaultValue() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[3]) }

type VisualShaderNodeVec4Constant gdnative.Object

var methodVisualShaderNodeVec4Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec4Constant) SetConstant(constant Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Constant[0], constant) }
func (gdClass VisualShaderNodeVec4Constant) GetConstant() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodVisualShaderNodeVec4Constant[1]) }

type VisualShaderNodeVec4Uniform gdnative.Object

var methodVisualShaderNodeVec4Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec4Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[1]) }
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValue(value Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[2], value) }
func (gdClass VisualShaderNodeVec4Uniform) GetDefaultValue() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[3]) }

type VisualShaderNodeVectorBase gdnative.Object

var methodVisualShaderNodeVectorBase [2]gdnative.Method

type VisualShaderNodeVectorBaseOpType int64

const (
	VisualShaderNodeVectorBaseOpTypeVector2d VisualShaderNodeVectorBaseOpType = 0
	VisualShaderNodeVectorBaseOpTypeVector3d VisualShaderNodeVectorBaseOpType = 1
	VisualShaderNodeVectorBaseOpTypeVector4d VisualShaderNodeVectorBaseOpType = 2
	VisualShaderNodeVectorBaseOpTypeMax VisualShaderNodeVectorBaseOpType = 3
)
func (gdClass VisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorBase[0], atype) }
func (gdClass VisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType { return gdnative.Return[VisualShaderNodeVectorBaseOpType](gdnative.Object(gdClass), methodVisualShaderNodeVectorBase[1]) }

type VisualShaderNodeVectorCompose gdnative.Object

var methodVisualShaderNodeVectorCompose [0]gdnative.Method

type VisualShaderNodeVectorDecompose gdnative.Object

var methodVisualShaderNodeVectorDecompose [0]gdnative.Method

type VisualShaderNodeVectorDistance gdnative.Object

var methodVisualShaderNodeVectorDistance [0]gdnative.Method

type VisualShaderNodeVectorFunc gdnative.Object

var methodVisualShaderNodeVectorFunc [2]gdnative.Method

type VisualShaderNodeVectorFuncFunction int64

const (
	VisualShaderNodeVectorFuncFuncNormalize VisualShaderNodeVectorFuncFunction = 0
	VisualShaderNodeVectorFuncFuncSaturate VisualShaderNodeVectorFuncFunction = 1
	VisualShaderNodeVectorFuncFuncNegate VisualShaderNodeVectorFuncFunction = 2
	VisualShaderNodeVectorFuncFuncReciprocal VisualShaderNodeVectorFuncFunction = 3
	VisualShaderNodeVectorFuncFuncAbs VisualShaderNodeVectorFuncFunction = 4
	VisualShaderNodeVectorFuncFuncAcos VisualShaderNodeVectorFuncFunction = 5
	VisualShaderNodeVectorFuncFuncAcosh VisualShaderNodeVectorFuncFunction = 6
	VisualShaderNodeVectorFuncFuncAsin VisualShaderNodeVectorFuncFunction = 7
	VisualShaderNodeVectorFuncFuncAsinh VisualShaderNodeVectorFuncFunction = 8
	VisualShaderNodeVectorFuncFuncAtan VisualShaderNodeVectorFuncFunction = 9
	VisualShaderNodeVectorFuncFuncAtanh VisualShaderNodeVectorFuncFunction = 10
	VisualShaderNodeVectorFuncFuncCeil VisualShaderNodeVectorFuncFunction = 11
	VisualShaderNodeVectorFuncFuncCos VisualShaderNodeVectorFuncFunction = 12
	VisualShaderNodeVectorFuncFuncCosh VisualShaderNodeVectorFuncFunction = 13
	VisualShaderNodeVectorFuncFuncDegrees VisualShaderNodeVectorFuncFunction = 14
	VisualShaderNodeVectorFuncFuncExp VisualShaderNodeVectorFuncFunction = 15
	VisualShaderNodeVectorFuncFuncExp2 VisualShaderNodeVectorFuncFunction = 16
	VisualShaderNodeVectorFuncFuncFloor VisualShaderNodeVectorFuncFunction = 17
	VisualShaderNodeVectorFuncFuncFract VisualShaderNodeVectorFuncFunction = 18
	VisualShaderNodeVectorFuncFuncInverseSqrt VisualShaderNodeVectorFuncFunction = 19
	VisualShaderNodeVectorFuncFuncLog VisualShaderNodeVectorFuncFunction = 20
	VisualShaderNodeVectorFuncFuncLog2 VisualShaderNodeVectorFuncFunction = 21
	VisualShaderNodeVectorFuncFuncRadians VisualShaderNodeVectorFuncFunction = 22
	VisualShaderNodeVectorFuncFuncRound VisualShaderNodeVectorFuncFunction = 23
	VisualShaderNodeVectorFuncFuncRoundeven VisualShaderNodeVectorFuncFunction = 24
	VisualShaderNodeVectorFuncFuncSign VisualShaderNodeVectorFuncFunction = 25
	VisualShaderNodeVectorFuncFuncSin VisualShaderNodeVectorFuncFunction = 26
	VisualShaderNodeVectorFuncFuncSinh VisualShaderNodeVectorFuncFunction = 27
	VisualShaderNodeVectorFuncFuncSqrt VisualShaderNodeVectorFuncFunction = 28
	VisualShaderNodeVectorFuncFuncTan VisualShaderNodeVectorFuncFunction = 29
	VisualShaderNodeVectorFuncFuncTanh VisualShaderNodeVectorFuncFunction = 30
	VisualShaderNodeVectorFuncFuncTrunc VisualShaderNodeVectorFuncFunction = 31
	VisualShaderNodeVectorFuncFuncOneminus VisualShaderNodeVectorFuncFunction = 32
	VisualShaderNodeVectorFuncFuncMax VisualShaderNodeVectorFuncFunction = 33
)
func (gdClass VisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorFunc[0], fn) }
func (gdClass VisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction { return gdnative.Return[VisualShaderNodeVectorFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeVectorFunc[1]) }

type VisualShaderNodeVectorLen gdnative.Object

var methodVisualShaderNodeVectorLen [0]gdnative.Method

type VisualShaderNodeVectorOp gdnative.Object

var methodVisualShaderNodeVectorOp [2]gdnative.Method

type VisualShaderNodeVectorOpOperator int64

const (
	VisualShaderNodeVectorOpOpAdd VisualShaderNodeVectorOpOperator = 0
	VisualShaderNodeVectorOpOpSub VisualShaderNodeVectorOpOperator = 1
	VisualShaderNodeVectorOpOpMul VisualShaderNodeVectorOpOperator = 2
	VisualShaderNodeVectorOpOpDiv VisualShaderNodeVectorOpOperator = 3
	VisualShaderNodeVectorOpOpMod VisualShaderNodeVectorOpOperator = 4
	VisualShaderNodeVectorOpOpPow VisualShaderNodeVectorOpOperator = 5
	VisualShaderNodeVectorOpOpMax VisualShaderNodeVectorOpOperator = 6
	VisualShaderNodeVectorOpOpMin VisualShaderNodeVectorOpOperator = 7
	VisualShaderNodeVectorOpOpCross VisualShaderNodeVectorOpOperator = 8
	VisualShaderNodeVectorOpOpAtan2 VisualShaderNodeVectorOpOperator = 9
	VisualShaderNodeVectorOpOpReflect VisualShaderNodeVectorOpOperator = 10
	VisualShaderNodeVectorOpOpStep VisualShaderNodeVectorOpOperator = 11
	VisualShaderNodeVectorOpOpEnumSize VisualShaderNodeVectorOpOperator = 12
)
func (gdClass VisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorOp[0], op) }
func (gdClass VisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator { return gdnative.Return[VisualShaderNodeVectorOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeVectorOp[1]) }

type VisualShaderNodeVectorRefract gdnative.Object

var methodVisualShaderNodeVectorRefract [0]gdnative.Method

type VoxelGI gdnative.Object

var methodVoxelGI [8]gdnative.Method

type VoxelGISubdiv int64

const (
	VoxelGISubdiv64 VoxelGISubdiv = 0
	VoxelGISubdiv128 VoxelGISubdiv = 1
	VoxelGISubdiv256 VoxelGISubdiv = 2
	VoxelGISubdiv512 VoxelGISubdiv = 3
	VoxelGISubdivMax VoxelGISubdiv = 4
)
func (gdClass VoxelGI) SetProbeData(data VoxelGIData)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[0], data) }
func (gdClass VoxelGI) GetProbeData() VoxelGIData { return gdnative.Return[VoxelGIData](gdnative.Object(gdClass), methodVoxelGI[1]) }
func (gdClass VoxelGI) SetSubdiv(subdiv VoxelGISubdiv)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[2], subdiv) }
func (gdClass VoxelGI) GetSubdiv() VoxelGISubdiv { return gdnative.Return[VoxelGISubdiv](gdnative.Object(gdClass), methodVoxelGI[3]) }
func (gdClass VoxelGI) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[4], extents) }
func (gdClass VoxelGI) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVoxelGI[5]) }
func (gdClass VoxelGI) Bake(from_node Node, create_visual_debug bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[6], from_node, create_visual_debug) }
func (gdClass VoxelGI) DebugBake()  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[7]) }

type VoxelGIData gdnative.Object

var methodVoxelGIData [21]gdnative.Method
func (gdClass VoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[0], to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts) }
func (gdClass VoxelGIData) GetBounds() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVoxelGIData[1]) }
func (gdClass VoxelGIData) GetOctreeSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVoxelGIData[2]) }
func (gdClass VoxelGIData) GetToCellXform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVoxelGIData[3]) }
func (gdClass VoxelGIData) GetOctreeCells() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodVoxelGIData[4]) }
func (gdClass VoxelGIData) GetDataCells() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodVoxelGIData[5]) }
func (gdClass VoxelGIData) GetLevelCounts() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodVoxelGIData[6]) }
func (gdClass VoxelGIData) SetDynamicRange(dynamic_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[7], dynamic_range) }
func (gdClass VoxelGIData) GetDynamicRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[8]) }
func (gdClass VoxelGIData) SetEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[9], energy) }
func (gdClass VoxelGIData) GetEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[10]) }
func (gdClass VoxelGIData) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[11], bias) }
func (gdClass VoxelGIData) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[12]) }
func (gdClass VoxelGIData) SetNormalBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[13], bias) }
func (gdClass VoxelGIData) GetNormalBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[14]) }
func (gdClass VoxelGIData) SetPropagation(propagation float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[15], propagation) }
func (gdClass VoxelGIData) GetPropagation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[16]) }
func (gdClass VoxelGIData) SetInterior(interior bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[17], interior) }
func (gdClass VoxelGIData) IsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVoxelGIData[18]) }
func (gdClass VoxelGIData) SetUseTwoBounces(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[19], enable) }
func (gdClass VoxelGIData) IsUsingTwoBounces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVoxelGIData[20]) }

type WeakRef gdnative.Object

var methodWeakRef [1]gdnative.Method
func (gdClass WeakRef) GetRef() any { return gdnative.Return[any](gdnative.Object(gdClass), methodWeakRef[0]) }

type WebRTCDataChannel gdnative.Object

var methodWebRTCDataChannel [14]gdnative.Method

type WebRTCDataChannelWriteMode int64

const (
	WebRTCDataChannelWriteModeText WebRTCDataChannelWriteMode = 0
	WebRTCDataChannelWriteModeBinary WebRTCDataChannelWriteMode = 1
)

type WebRTCDataChannelChannelState int64

const (
	WebRTCDataChannelStateConnecting WebRTCDataChannelChannelState = 0
	WebRTCDataChannelStateOpen WebRTCDataChannelChannelState = 1
	WebRTCDataChannelStateClosing WebRTCDataChannelChannelState = 2
	WebRTCDataChannelStateClosed WebRTCDataChannelChannelState = 3
)
func (gdClass WebRTCDataChannel) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCDataChannel[0]) }
func (gdClass WebRTCDataChannel) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannel[1]) }
func (gdClass WebRTCDataChannel) WasStringPacket() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[2]) }
func (gdClass WebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannel[3], write_mode) }
func (gdClass WebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode { return gdnative.Return[WebRTCDataChannelWriteMode](gdnative.Object(gdClass), methodWebRTCDataChannel[4]) }
func (gdClass WebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState { return gdnative.Return[WebRTCDataChannelChannelState](gdnative.Object(gdClass), methodWebRTCDataChannel[5]) }
func (gdClass WebRTCDataChannel) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannel[6]) }
func (gdClass WebRTCDataChannel) IsOrdered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[7]) }
func (gdClass WebRTCDataChannel) GetId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[8]) }
func (gdClass WebRTCDataChannel) GetMaxPacketLifeTime() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[9]) }
func (gdClass WebRTCDataChannel) GetMaxRetransmits() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[10]) }
func (gdClass WebRTCDataChannel) GetProtocol() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannel[11]) }
func (gdClass WebRTCDataChannel) IsNegotiated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[12]) }
func (gdClass WebRTCDataChannel) GetBufferedAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[13]) }

type WebRTCDataChannelExtension gdnative.Object

var methodWebRTCDataChannelExtension [18]gdnative.Method
func (gdClass WebRTCDataChannelExtension) GetPacketImplementation(r_buffer *[]byte, r_buffer_size *int32) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[0], r_buffer, r_buffer_size) }
func (gdClass WebRTCDataChannelExtension) PutPacketImplementation(p_buffer []byte, p_buffer_size int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[1], p_buffer, p_buffer_size) }
func (gdClass WebRTCDataChannelExtension) GetAvailablePacketCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[2]) }
func (gdClass WebRTCDataChannelExtension) GetMaxPacketSizeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[3]) }
func (gdClass WebRTCDataChannelExtension) PollImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[4]) }
func (gdClass WebRTCDataChannelExtension) CloseImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannelExtension[5]) }
func (gdClass WebRTCDataChannelExtension) SetWriteModeImplementation(p_write_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannelExtension[6], p_write_mode) }
func (gdClass WebRTCDataChannelExtension) GetWriteModeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[7]) }
func (gdClass WebRTCDataChannelExtension) WasStringPacketImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[8]) }
func (gdClass WebRTCDataChannelExtension) GetReadyStateImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[9]) }
func (gdClass WebRTCDataChannelExtension) GetLabelImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[10]) }
func (gdClass WebRTCDataChannelExtension) IsOrderedImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[11]) }
func (gdClass WebRTCDataChannelExtension) GetIdImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[12]) }
func (gdClass WebRTCDataChannelExtension) GetMaxPacketLifeTimeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[13]) }
func (gdClass WebRTCDataChannelExtension) GetMaxRetransmitsImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[14]) }
func (gdClass WebRTCDataChannelExtension) GetProtocolImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[15]) }
func (gdClass WebRTCDataChannelExtension) IsNegotiatedImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[16]) }
func (gdClass WebRTCDataChannelExtension) GetBufferedAmountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannelExtension[17]) }

type WebRTCMultiplayerPeer gdnative.Object

var methodWebRTCMultiplayerPeer [7]gdnative.Method
func (gdClass WebRTCMultiplayerPeer) Initialize(peer_id int64, server_compatibility bool, channels_config Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[0], peer_id, server_compatibility, channels_config) }
func (gdClass WebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id int64, unreliable_lifetime int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[1], peer, peer_id, unreliable_lifetime) }
func (gdClass WebRTCMultiplayerPeer) RemovePeer(peer_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[2], peer_id) }
func (gdClass WebRTCMultiplayerPeer) HasPeer(peer_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[3], peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeer(peer_id int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[4], peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeers() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[5]) }
func (gdClass WebRTCMultiplayerPeer) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[6]) }

type WebRTCPeerConnection gdnative.Object

var methodWebRTCPeerConnection [10]gdnative.Method

type WebRTCPeerConnectionConnectionState int64

const (
	WebRTCPeerConnectionStateNew WebRTCPeerConnectionConnectionState = 0
	WebRTCPeerConnectionStateConnecting WebRTCPeerConnectionConnectionState = 1
	WebRTCPeerConnectionStateConnected WebRTCPeerConnectionConnectionState = 2
	WebRTCPeerConnectionStateDisconnected WebRTCPeerConnectionConnectionState = 3
	WebRTCPeerConnectionStateFailed WebRTCPeerConnectionConnectionState = 4
	WebRTCPeerConnectionStateClosed WebRTCPeerConnectionConnectionState = 5
)
func (gdClass WebRTCPeerConnection) SetDefaultExtension(extension_class string)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCPeerConnection[0], extension_class) }
func (gdClass WebRTCPeerConnection) Initialize(configuration Dictionary) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[1], configuration) }
func (gdClass WebRTCPeerConnection) CreateDataChannel(label string, options Dictionary) WebRTCDataChannel { return gdnative.Return[WebRTCDataChannel](gdnative.Object(gdClass), methodWebRTCPeerConnection[2], label, options) }
func (gdClass WebRTCPeerConnection) CreateOffer() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[3]) }
func (gdClass WebRTCPeerConnection) SetLocalDescription(atype string, sdp string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[4], atype, sdp) }
func (gdClass WebRTCPeerConnection) SetRemoteDescription(atype string, sdp string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[5], atype, sdp) }
func (gdClass WebRTCPeerConnection) AddIceCandidate(media string, index int64, name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[6], media, index, name) }
func (gdClass WebRTCPeerConnection) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[7]) }
func (gdClass WebRTCPeerConnection) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCPeerConnection[8]) }
func (gdClass WebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState { return gdnative.Return[WebRTCPeerConnectionConnectionState](gdnative.Object(gdClass), methodWebRTCPeerConnection[9]) }

type WebRTCPeerConnectionExtension gdnative.Object

var methodWebRTCPeerConnectionExtension [9]gdnative.Method
func (gdClass WebRTCPeerConnectionExtension) GetConnectionStateImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[0]) }
func (gdClass WebRTCPeerConnectionExtension) InitializeImplementation(p_config Dictionary) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[1], p_config) }
func (gdClass WebRTCPeerConnectionExtension) CreateDataChannelImplementation(p_label string, p_config Dictionary) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[2], p_label, p_config) }
func (gdClass WebRTCPeerConnectionExtension) CreateOfferImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[3]) }
func (gdClass WebRTCPeerConnectionExtension) SetRemoteDescriptionImplementation(p_type string, p_sdp string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[4], p_type, p_sdp) }
func (gdClass WebRTCPeerConnectionExtension) SetLocalDescriptionImplementation(p_type string, p_sdp string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[5], p_type, p_sdp) }
func (gdClass WebRTCPeerConnectionExtension) AddIceCandidateImplementation(p_sdp_mid_name string, p_sdp_mline_index int64, p_sdp_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[6], p_sdp_mid_name, p_sdp_mline_index, p_sdp_name) }
func (gdClass WebRTCPeerConnectionExtension) PollImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[7]) }
func (gdClass WebRTCPeerConnectionExtension) CloseImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCPeerConnectionExtension[8]) }

type WebSocketClient gdnative.Object

var methodWebSocketClient [8]gdnative.Method
func (gdClass WebSocketClient) ConnectToUrl(url string, protocols []string, gd_mp_api bool, custom_headers []string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketClient[0], url, protocols, gd_mp_api, custom_headers) }
func (gdClass WebSocketClient) DisconnectFromHost(code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[1], code, reason) }
func (gdClass WebSocketClient) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketClient[2]) }
func (gdClass WebSocketClient) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketClient[3]) }
func (gdClass WebSocketClient) SetVerifySslEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[4], enabled) }
func (gdClass WebSocketClient) IsVerifySslEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketClient[5]) }
func (gdClass WebSocketClient) GetTrustedSslCertificate() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketClient[6]) }
func (gdClass WebSocketClient) SetTrustedSslCertificate(cert X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[7], cert) }

type WebSocketMultiplayerPeer gdnative.Object

var methodWebSocketMultiplayerPeer [2]gdnative.Method
func (gdClass WebSocketMultiplayerPeer) SetBuffers(input_buffer_size_kb int64, input_max_packets int64, output_buffer_size_kb int64, output_max_packets int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketMultiplayerPeer[0], input_buffer_size_kb, input_max_packets, output_buffer_size_kb, output_max_packets) }
func (gdClass WebSocketMultiplayerPeer) GetPeer(peer_id int64) WebSocketPeer { return gdnative.Return[WebSocketPeer](gdnative.Object(gdClass), methodWebSocketMultiplayerPeer[1], peer_id) }

type WebSocketPeer gdnative.Object

var methodWebSocketPeer [9]gdnative.Method

type WebSocketPeerWriteMode int64

const (
	WebSocketPeerWriteModeText WebSocketPeerWriteMode = 0
	WebSocketPeerWriteModeBinary WebSocketPeerWriteMode = 1
)
func (gdClass WebSocketPeer) GetWriteMode() WebSocketPeerWriteMode { return gdnative.Return[WebSocketPeerWriteMode](gdnative.Object(gdClass), methodWebSocketPeer[0]) }
func (gdClass WebSocketPeer) SetWriteMode(mode WebSocketPeerWriteMode)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[1], mode) }
func (gdClass WebSocketPeer) IsConnectedToHost() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketPeer[2]) }
func (gdClass WebSocketPeer) WasStringPacket() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketPeer[3]) }
func (gdClass WebSocketPeer) Close(code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[4], code, reason) }
func (gdClass WebSocketPeer) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketPeer[5]) }
func (gdClass WebSocketPeer) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketPeer[6]) }
func (gdClass WebSocketPeer) SetNoDelay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[7], enabled) }
func (gdClass WebSocketPeer) GetCurrentOutboundBufferedAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketPeer[8]) }

type WebSocketServer gdnative.Object

var methodWebSocketServer [18]gdnative.Method
func (gdClass WebSocketServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketServer[0]) }
func (gdClass WebSocketServer) SetExtraHeaders(headers []string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[1], headers) }
func (gdClass WebSocketServer) Listen(port int64, protocols []string, gd_mp_api bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketServer[2], port, protocols, gd_mp_api) }
func (gdClass WebSocketServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[3]) }
func (gdClass WebSocketServer) HasPeer(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketServer[4], id) }
func (gdClass WebSocketServer) GetPeerAddress(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketServer[5], id) }
func (gdClass WebSocketServer) GetPeerPort(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketServer[6], id) }
func (gdClass WebSocketServer) DisconnectPeer(id int64, code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[7], id, code, reason) }
func (gdClass WebSocketServer) GetBindIp() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketServer[8]) }
func (gdClass WebSocketServer) SetBindIp(ip string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[9], ip) }
func (gdClass WebSocketServer) GetPrivateKey() CryptoKey { return gdnative.Return[CryptoKey](gdnative.Object(gdClass), methodWebSocketServer[10]) }
func (gdClass WebSocketServer) SetPrivateKey(key CryptoKey)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[11], key) }
func (gdClass WebSocketServer) GetSslCertificate() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketServer[12]) }
func (gdClass WebSocketServer) SetSslCertificate(cert X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[13], cert) }
func (gdClass WebSocketServer) GetCaChain() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketServer[14]) }
func (gdClass WebSocketServer) SetCaChain(ca_chain X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[15], ca_chain) }
func (gdClass WebSocketServer) GetHandshakeTimeout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWebSocketServer[16]) }
func (gdClass WebSocketServer) SetHandshakeTimeout(timeout float64)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[17], timeout) }

type WebXRInterface gdnative.Object

var methodWebXRInterface [13]gdnative.Method
func (gdClass WebXRInterface) IsSessionSupported(session_mode string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[0], session_mode) }
func (gdClass WebXRInterface) SetSessionMode(session_mode string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[1], session_mode) }
func (gdClass WebXRInterface) GetSessionMode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[2]) }
func (gdClass WebXRInterface) SetRequiredFeatures(required_features string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[3], required_features) }
func (gdClass WebXRInterface) GetRequiredFeatures() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[4]) }
func (gdClass WebXRInterface) SetOptionalFeatures(optional_features string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[5], optional_features) }
func (gdClass WebXRInterface) GetOptionalFeatures() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[6]) }
func (gdClass WebXRInterface) GetReferenceSpaceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[7]) }
func (gdClass WebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[8], requested_reference_space_types) }
func (gdClass WebXRInterface) GetRequestedReferenceSpaceTypes() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[9]) }
func (gdClass WebXRInterface) GetController(controller_id int64) XRPositionalTracker { return gdnative.Return[XRPositionalTracker](gdnative.Object(gdClass), methodWebXRInterface[10], controller_id) }
func (gdClass WebXRInterface) GetVisibilityState() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[11]) }
func (gdClass WebXRInterface) GetBoundsGeometry() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodWebXRInterface[12]) }

type Window gdnative.Object

var methodWindow [78]gdnative.Method

type WindowMode int64

const (
	WindowModeWindowed WindowMode = 0
	WindowModeMinimized WindowMode = 1
	WindowModeMaximized WindowMode = 2
	WindowModeFullscreen WindowMode = 3
	WindowModeExclusiveFullscreen WindowMode = 4
)

type WindowFlags int64

const (
	WindowFlagResizeDisabled WindowFlags = 0
	WindowFlagBorderless WindowFlags = 1
	WindowFlagAlwaysOnTop WindowFlags = 2
	WindowFlagTransparent WindowFlags = 3
	WindowFlagNoFocus WindowFlags = 4
	WindowFlagPopup WindowFlags = 5
	WindowFlagMax WindowFlags = 6
)

type WindowContentScaleMode int64

const (
	WindowContentScaleModeDisabled WindowContentScaleMode = 0
	WindowContentScaleModeCanvasItems WindowContentScaleMode = 1
	WindowContentScaleModeViewport WindowContentScaleMode = 2
)

type WindowContentScaleAspect int64

const (
	WindowContentScaleAspectIgnore WindowContentScaleAspect = 0
	WindowContentScaleAspectKeep WindowContentScaleAspect = 1
	WindowContentScaleAspectKeepWidth WindowContentScaleAspect = 2
	WindowContentScaleAspectKeepHeight WindowContentScaleAspect = 3
	WindowContentScaleAspectExpand WindowContentScaleAspect = 4
)

type WindowLayoutDirection int64

const (
	WindowLayoutDirectionInherited WindowLayoutDirection = 0
	WindowLayoutDirectionLocale WindowLayoutDirection = 1
	WindowLayoutDirectionLtr WindowLayoutDirection = 2
	WindowLayoutDirectionRtl WindowLayoutDirection = 3
)
func (gdClass Window) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[0], title) }
func (gdClass Window) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWindow[1]) }
func (gdClass Window) SetCurrentScreen(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[2], index) }
func (gdClass Window) GetCurrentScreen() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[3]) }
func (gdClass Window) SetPosition(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[4], position) }
func (gdClass Window) GetPosition() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[5]) }
func (gdClass Window) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[6], size) }
func (gdClass Window) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[7]) }
func (gdClass Window) ResetSize()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[8]) }
func (gdClass Window) GetRealSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[9]) }
func (gdClass Window) SetMaxSize(max_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[10], max_size) }
func (gdClass Window) GetMaxSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[11]) }
func (gdClass Window) SetMinSize(min_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[12], min_size) }
func (gdClass Window) GetMinSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[13]) }
func (gdClass Window) SetMode(mode WindowMode)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[14], mode) }
func (gdClass Window) GetMode() WindowMode { return gdnative.Return[WindowMode](gdnative.Object(gdClass), methodWindow[15]) }
func (gdClass Window) SetFlag(flag WindowFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[16], flag, enabled) }
func (gdClass Window) GetFlag(flag WindowFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[17], flag) }
func (gdClass Window) IsMaximizeAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[18]) }
func (gdClass Window) RequestAttention()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[19]) }
func (gdClass Window) MoveToForeground()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[20]) }
func (gdClass Window) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[21], visible) }
func (gdClass Window) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[22]) }
func (gdClass Window) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[23]) }
func (gdClass Window) Show()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[24]) }
func (gdClass Window) SetTransient(transient bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[25], transient) }
func (gdClass Window) IsTransient() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[26]) }
func (gdClass Window) SetExclusive(exclusive bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[27], exclusive) }
func (gdClass Window) IsExclusive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[28]) }
func (gdClass Window) CanDraw() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[29]) }
func (gdClass Window) HasFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[30]) }
func (gdClass Window) GrabFocus()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[31]) }
func (gdClass Window) SetImeActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[32], active) }
func (gdClass Window) SetImePosition(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[33], position) }
func (gdClass Window) IsEmbedded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[34]) }
func (gdClass Window) GetContentsMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodWindow[35]) }
func (gdClass Window) SetContentScaleSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[36], size) }
func (gdClass Window) GetContentScaleSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[37]) }
func (gdClass Window) SetContentScaleMode(mode WindowContentScaleMode)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[38], mode) }
func (gdClass Window) GetContentScaleMode() WindowContentScaleMode { return gdnative.Return[WindowContentScaleMode](gdnative.Object(gdClass), methodWindow[39]) }
func (gdClass Window) SetContentScaleAspect(aspect WindowContentScaleAspect)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[40], aspect) }
func (gdClass Window) GetContentScaleAspect() WindowContentScaleAspect { return gdnative.Return[WindowContentScaleAspect](gdnative.Object(gdClass), methodWindow[41]) }
func (gdClass Window) SetContentScaleFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[42], factor) }
func (gdClass Window) GetContentScaleFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWindow[43]) }
func (gdClass Window) SetUseFontOversampling(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[44], enable) }
func (gdClass Window) IsUsingFontOversampling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[45]) }
func (gdClass Window) SetWrapControls(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[46], enable) }
func (gdClass Window) IsWrappingControls() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[47]) }
func (gdClass Window) ChildControlsChanged()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[48]) }
func (gdClass Window) SetTheme(theme Theme)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[49], theme) }
func (gdClass Window) GetTheme() Theme { return gdnative.Return[Theme](gdnative.Object(gdClass), methodWindow[50]) }
func (gdClass Window) SetThemeTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[51], theme_type) }
func (gdClass Window) GetThemeTypeVariation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWindow[52]) }
func (gdClass Window) GetThemeIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodWindow[53], name, theme_type) }
func (gdClass Window) GetThemeStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodWindow[54], name, theme_type) }
func (gdClass Window) GetThemeFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodWindow[55], name, theme_type) }
func (gdClass Window) GetThemeFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[56], name, theme_type) }
func (gdClass Window) GetThemeColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodWindow[57], name, theme_type) }
func (gdClass Window) GetThemeConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[58], name, theme_type) }
func (gdClass Window) HasThemeIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[59], name, theme_type) }
func (gdClass Window) HasThemeStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[60], name, theme_type) }
func (gdClass Window) HasThemeFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[61], name, theme_type) }
func (gdClass Window) HasThemeFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[62], name, theme_type) }
func (gdClass Window) HasThemeColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[63], name, theme_type) }
func (gdClass Window) HasThemeConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[64], name, theme_type) }
func (gdClass Window) GetThemeDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWindow[65]) }
func (gdClass Window) GetThemeDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodWindow[66]) }
func (gdClass Window) GetThemeDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[67]) }
func (gdClass Window) SetLayoutDirection(direction WindowLayoutDirection)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[68], direction) }
func (gdClass Window) GetLayoutDirection() WindowLayoutDirection { return gdnative.Return[WindowLayoutDirection](gdnative.Object(gdClass), methodWindow[69]) }
func (gdClass Window) IsLayoutRtl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[70]) }
func (gdClass Window) SetAutoTranslate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[71], enable) }
func (gdClass Window) IsAutoTranslating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[72]) }
func (gdClass Window) Popup(rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[73], rect) }
func (gdClass Window) PopupOnParent(parent_rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[74], parent_rect) }
func (gdClass Window) PopupCenteredRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[75], ratio) }
func (gdClass Window) PopupCentered(minsize Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[76], minsize) }
func (gdClass Window) PopupCenteredClamped(minsize Vector2i, fallback_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[77], minsize, fallback_ratio) }

type WorkerThreadPool gdnative.Object

var methodWorkerThreadPool [7]gdnative.Method
func (gdClass WorkerThreadPool) AddTask(action Callable, high_priority bool, description string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[0], action, high_priority, description) }
func (gdClass WorkerThreadPool) IsTaskCompleted(task_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWorkerThreadPool[1], task_id) }
func (gdClass WorkerThreadPool) WaitForTaskCompletion(task_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWorkerThreadPool[2], task_id) }
func (gdClass WorkerThreadPool) AddGroupTask(action Callable, elements int64, tasks_needed int64, high_priority bool, description string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[3], action, elements, tasks_needed, high_priority, description) }
func (gdClass WorkerThreadPool) IsGroupTaskCompleted(group_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWorkerThreadPool[4], group_id) }
func (gdClass WorkerThreadPool) GetGroupProcessedElementCount(group_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[5], group_id) }
func (gdClass WorkerThreadPool) WaitForGroupTaskCompletion(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWorkerThreadPool[6], group_id) }

type World2D gdnative.Object

var methodWorld2D [4]gdnative.Method
func (gdClass World2D) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[0]) }
func (gdClass World2D) GetSpace() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[1]) }
func (gdClass World2D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[2]) }
func (gdClass World2D) GetDirectSpaceState() PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodWorld2D[3]) }

type World3D gdnative.Object

var methodWorld3D [10]gdnative.Method
func (gdClass World3D) GetSpace() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[0]) }
func (gdClass World3D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[1]) }
func (gdClass World3D) GetScenario() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[2]) }
func (gdClass World3D) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[3], env) }
func (gdClass World3D) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorld3D[4]) }
func (gdClass World3D) SetFallbackEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[5], env) }
func (gdClass World3D) GetFallbackEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorld3D[6]) }
func (gdClass World3D) SetCameraEffects(effects CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[7], effects) }
func (gdClass World3D) GetCameraEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodWorld3D[8]) }
func (gdClass World3D) GetDirectSpaceState() PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodWorld3D[9]) }

type WorldBoundaryShape2D gdnative.Object

var methodWorldBoundaryShape2D [4]gdnative.Method
func (gdClass WorldBoundaryShape2D) SetNormal(normal Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape2D[0], normal) }
func (gdClass WorldBoundaryShape2D) GetNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodWorldBoundaryShape2D[1]) }
func (gdClass WorldBoundaryShape2D) SetDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape2D[2], distance) }
func (gdClass WorldBoundaryShape2D) GetDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWorldBoundaryShape2D[3]) }

type WorldBoundaryShape3D gdnative.Object

var methodWorldBoundaryShape3D [2]gdnative.Method
func (gdClass WorldBoundaryShape3D) SetPlane(plane Plane)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape3D[0], plane) }
func (gdClass WorldBoundaryShape3D) GetPlane() Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodWorldBoundaryShape3D[1]) }

type WorldEnvironment gdnative.Object

var methodWorldEnvironment [4]gdnative.Method
func (gdClass WorldEnvironment) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorldEnvironment[0], env) }
func (gdClass WorldEnvironment) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorldEnvironment[1]) }
func (gdClass WorldEnvironment) SetCameraEffects(env CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodWorldEnvironment[2], env) }
func (gdClass WorldEnvironment) GetCameraEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodWorldEnvironment[3]) }

type X509Certificate gdnative.Object

var methodX509Certificate [2]gdnative.Method
func (gdClass X509Certificate) Save(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodX509Certificate[0], path) }
func (gdClass X509Certificate) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodX509Certificate[1], path) }

type XMLParser gdnative.Object

var methodXMLParser [17]gdnative.Method

type XMLParserNodeType int64

const (
	XMLParserNodeNone XMLParserNodeType = 0
	XMLParserNodeElement XMLParserNodeType = 1
	XMLParserNodeElementEnd XMLParserNodeType = 2
	XMLParserNodeText XMLParserNodeType = 3
	XMLParserNodeComment XMLParserNodeType = 4
	XMLParserNodeCdata XMLParserNodeType = 5
	XMLParserNodeUnknown XMLParserNodeType = 6
)
func (gdClass XMLParser) Read() error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[0]) }
func (gdClass XMLParser) GetNodeType() XMLParserNodeType { return gdnative.Return[XMLParserNodeType](gdnative.Object(gdClass), methodXMLParser[1]) }
func (gdClass XMLParser) GetNodeName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[2]) }
func (gdClass XMLParser) GetNodeData() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[3]) }
func (gdClass XMLParser) GetNodeOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[4]) }
func (gdClass XMLParser) GetAttributeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[5]) }
func (gdClass XMLParser) GetAttributeName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[6], idx) }
func (gdClass XMLParser) GetAttributeValue(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[7], idx) }
func (gdClass XMLParser) HasAttribute(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXMLParser[8], name) }
func (gdClass XMLParser) GetNamedAttributeValue(name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[9], name) }
func (gdClass XMLParser) GetNamedAttributeValueSafe(name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[10], name) }
func (gdClass XMLParser) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXMLParser[11]) }
func (gdClass XMLParser) GetCurrentLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[12]) }
func (gdClass XMLParser) SkipSection()  { gdnative.Call(gdnative.Object(gdClass), methodXMLParser[13]) }
func (gdClass XMLParser) Seek(position int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[14], position) }
func (gdClass XMLParser) Open(file string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[15], file) }
func (gdClass XMLParser) OpenBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[16], buffer) }

type XRAnchor3D gdnative.Object

var methodXRAnchor3D [2]gdnative.Method
func (gdClass XRAnchor3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRAnchor3D[0]) }
func (gdClass XRAnchor3D) GetPlane() Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodXRAnchor3D[1]) }

type XRCamera3D gdnative.Object

var methodXRCamera3D [0]gdnative.Method

type XRController3D gdnative.Object

var methodXRController3D [4]gdnative.Method
func (gdClass XRController3D) IsButtonPressed(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRController3D[0], name) }
func (gdClass XRController3D) GetValue(name string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXRController3D[1], name) }
func (gdClass XRController3D) GetAxis(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodXRController3D[2], name) }
func (gdClass XRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand { return gdnative.Return[XRPositionalTrackerTrackerHand](gdnative.Object(gdClass), methodXRController3D[3]) }

type XRInterface gdnative.Object

var methodXRInterface [18]gdnative.Method

type XRInterfaceCapabilities int64

const (
	XRInterfaceXrNone XRInterfaceCapabilities = 0
	XRInterfaceXrMono XRInterfaceCapabilities = 1
	XRInterfaceXrStereo XRInterfaceCapabilities = 2
	XRInterfaceXrQuad XRInterfaceCapabilities = 4
	XRInterfaceXrVr XRInterfaceCapabilities = 8
	XRInterfaceXrAr XRInterfaceCapabilities = 16
	XRInterfaceXrExternal XRInterfaceCapabilities = 32
)

type XRInterfaceTrackingStatus int64

const (
	XRInterfaceXrNormalTracking XRInterfaceTrackingStatus = 0
	XRInterfaceXrExcessiveMotion XRInterfaceTrackingStatus = 1
	XRInterfaceXrInsufficientFeatures XRInterfaceTrackingStatus = 2
	XRInterfaceXrUnknownTracking XRInterfaceTrackingStatus = 3
	XRInterfaceXrNotTracking XRInterfaceTrackingStatus = 4
)

type XRInterfacePlayAreaMode int64

const (
	XRInterfaceXrPlayAreaUnknown XRInterfacePlayAreaMode = 0
	XRInterfaceXrPlayArea3dof XRInterfacePlayAreaMode = 1
	XRInterfaceXrPlayAreaSitting XRInterfacePlayAreaMode = 2
	XRInterfaceXrPlayAreaRoomscale XRInterfacePlayAreaMode = 3
	XRInterfaceXrPlayAreaStage XRInterfacePlayAreaMode = 4
)
func (gdClass XRInterface) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRInterface[0]) }
func (gdClass XRInterface) GetCapabilities() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[1]) }
func (gdClass XRInterface) IsPrimary() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[2]) }
func (gdClass XRInterface) SetPrimary(primary bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[3], primary) }
func (gdClass XRInterface) IsInitialized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[4]) }
func (gdClass XRInterface) Initialize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[5]) }
func (gdClass XRInterface) Uninitialize()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[6]) }
func (gdClass XRInterface) GetTrackingStatus() XRInterfaceTrackingStatus { return gdnative.Return[XRInterfaceTrackingStatus](gdnative.Object(gdClass), methodXRInterface[7]) }
func (gdClass XRInterface) GetRenderTargetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodXRInterface[8]) }
func (gdClass XRInterface) GetViewCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[9]) }
func (gdClass XRInterface) TriggerHapticPulse(action_name string, tracker_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[10], action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec) }
func (gdClass XRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[11], mode) }
func (gdClass XRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode { return gdnative.Return[XRInterfacePlayAreaMode](gdnative.Object(gdClass), methodXRInterface[12]) }
func (gdClass XRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[13], mode) }
func (gdClass XRInterface) GetPlayArea() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodXRInterface[14]) }
func (gdClass XRInterface) GetAnchorDetectionIsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[15]) }
func (gdClass XRInterface) SetAnchorDetectionIsEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[16], enable) }
func (gdClass XRInterface) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[17]) }

type XRInterfaceExtension gdnative.Object

var methodXRInterfaceExtension [30]gdnative.Method
func (gdClass XRInterfaceExtension) GetNameImplementation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRInterfaceExtension[0]) }
func (gdClass XRInterfaceExtension) GetCapabilitiesImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterfaceExtension[1]) }
func (gdClass XRInterfaceExtension) IsInitializedImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[2]) }
func (gdClass XRInterfaceExtension) InitializeImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[3]) }
func (gdClass XRInterfaceExtension) UninitializeImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[4]) }
func (gdClass XRInterfaceExtension) SupportsPlayAreaModeImplementation(mode XRInterfacePlayAreaMode) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[5], mode) }
func (gdClass XRInterfaceExtension) GetPlayAreaModeImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterfaceExtension[6]) }
func (gdClass XRInterfaceExtension) SetPlayAreaModeImplementation(mode int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[7], mode) }
func (gdClass XRInterfaceExtension) GetPlayAreaImplementation() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodXRInterfaceExtension[8]) }
func (gdClass XRInterfaceExtension) GetRenderTargetSizeImplementation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodXRInterfaceExtension[9]) }
func (gdClass XRInterfaceExtension) GetViewCountImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterfaceExtension[10]) }
func (gdClass XRInterfaceExtension) GetCameraTransformImplementation() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRInterfaceExtension[11]) }
func (gdClass XRInterfaceExtension) GetTransformForViewImplementation(view int64, cam_transform Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRInterfaceExtension[12], view, cam_transform) }
func (gdClass XRInterfaceExtension) GetProjectionForViewImplementation(view int64, aspect float64, z_near float64, z_far float64) []float64 { return gdnative.Return[[]float64](gdnative.Object(gdClass), methodXRInterfaceExtension[13], view, aspect, z_near, z_far) }
func (gdClass XRInterfaceExtension) GetVrsTextureImplementation() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodXRInterfaceExtension[14]) }
func (gdClass XRInterfaceExtension) ProcessImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[15]) }
func (gdClass XRInterfaceExtension) PreRenderImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[16]) }
func (gdClass XRInterfaceExtension) PreDrawViewportImplementation(render_target RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[17], render_target) }
func (gdClass XRInterfaceExtension) PostDrawViewportImplementation(render_target RID, screen_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[18], render_target, screen_rect) }
func (gdClass XRInterfaceExtension) EndFrameImplementation()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[19]) }
func (gdClass XRInterfaceExtension) NotificationImplementation(what int64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[20], what) }
func (gdClass XRInterfaceExtension) GetSuggestedTrackerNamesImplementation() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodXRInterfaceExtension[21]) }
func (gdClass XRInterfaceExtension) GetSuggestedPoseNamesImplementation(tracker_name string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodXRInterfaceExtension[22], tracker_name) }
func (gdClass XRInterfaceExtension) GetTrackingStatusImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterfaceExtension[23]) }
func (gdClass XRInterfaceExtension) TriggerHapticPulseImplementation(action_name string, tracker_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[24], action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec) }
func (gdClass XRInterfaceExtension) GetAnchorDetectionIsEnabledImplementation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterfaceExtension[25]) }
func (gdClass XRInterfaceExtension) SetAnchorDetectionIsEnabledImplementation(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[26], enabled) }
func (gdClass XRInterfaceExtension) GetCameraFeedIdImplementation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterfaceExtension[27]) }
func (gdClass XRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer int64, apply_lens_distortion bool, eye_center Vector2, k1 float64, k2 float64, upscale float64, aspect_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[28], render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio) }
func (gdClass XRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodXRInterfaceExtension[29], render_target) }

type XRNode3D gdnative.Object

var methodXRNode3D [8]gdnative.Method
func (gdClass XRNode3D) SetTracker(tracker_name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[0], tracker_name) }
func (gdClass XRNode3D) GetTracker() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRNode3D[1]) }
func (gdClass XRNode3D) SetPoseName(pose string)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[2], pose) }
func (gdClass XRNode3D) GetPoseName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRNode3D[3]) }
func (gdClass XRNode3D) GetIsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRNode3D[4]) }
func (gdClass XRNode3D) GetHasTrackingData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRNode3D[5]) }
func (gdClass XRNode3D) GetPose() XRPose { return gdnative.Return[XRPose](gdnative.Object(gdClass), methodXRNode3D[6]) }
func (gdClass XRNode3D) TriggerHapticPulse(action_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[7], action_name, frequency, amplitude, duration_sec, delay_sec) }

type XROrigin3D gdnative.Object

var methodXROrigin3D [2]gdnative.Method
func (gdClass XROrigin3D) SetWorldScale(world_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodXROrigin3D[0], world_scale) }
func (gdClass XROrigin3D) GetWorldScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXROrigin3D[1]) }

type XRPose gdnative.Object

var methodXRPose [13]gdnative.Method

type XRPoseTrackingConfidence int64

const (
	XRPoseXrTrackingConfidenceNone XRPoseTrackingConfidence = 0
	XRPoseXrTrackingConfidenceLow XRPoseTrackingConfidence = 1
	XRPoseXrTrackingConfidenceHigh XRPoseTrackingConfidence = 2
)
func (gdClass XRPose) SetHasTrackingData(has_tracking_data bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[0], has_tracking_data) }
func (gdClass XRPose) GetHasTrackingData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRPose[1]) }
func (gdClass XRPose) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[2], name) }
func (gdClass XRPose) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPose[3]) }
func (gdClass XRPose) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[4], transform) }
func (gdClass XRPose) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRPose[5]) }
func (gdClass XRPose) GetAdjustedTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRPose[6]) }
func (gdClass XRPose) SetLinearVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[7], velocity) }
func (gdClass XRPose) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRPose[8]) }
func (gdClass XRPose) SetAngularVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[9], velocity) }
func (gdClass XRPose) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRPose[10]) }
func (gdClass XRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[11], tracking_confidence) }
func (gdClass XRPose) GetTrackingConfidence() XRPoseTrackingConfidence { return gdnative.Return[XRPoseTrackingConfidence](gdnative.Object(gdClass), methodXRPose[12]) }

type XRPositionalTracker gdnative.Object

var methodXRPositionalTracker [16]gdnative.Method

type XRPositionalTrackerTrackerHand int64

const (
	XRPositionalTrackerTrackerHandUnknown XRPositionalTrackerTrackerHand = 0
	XRPositionalTrackerTrackerHandLeft XRPositionalTrackerTrackerHand = 1
	XRPositionalTrackerTrackerHandRight XRPositionalTrackerTrackerHand = 2
)
func (gdClass XRPositionalTracker) GetTrackerType() XRServerTrackerType { return gdnative.Return[XRServerTrackerType](gdnative.Object(gdClass), methodXRPositionalTracker[0]) }
func (gdClass XRPositionalTracker) SetTrackerType(atype XRServerTrackerType)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[1], atype) }
func (gdClass XRPositionalTracker) GetTrackerName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[2]) }
func (gdClass XRPositionalTracker) SetTrackerName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[3], name) }
func (gdClass XRPositionalTracker) GetTrackerDesc() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[4]) }
func (gdClass XRPositionalTracker) SetTrackerDesc(description string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[5], description) }
func (gdClass XRPositionalTracker) GetTrackerProfile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[6]) }
func (gdClass XRPositionalTracker) SetTrackerProfile(profile string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[7], profile) }
func (gdClass XRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand { return gdnative.Return[XRPositionalTrackerTrackerHand](gdnative.Object(gdClass), methodXRPositionalTracker[8]) }
func (gdClass XRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[9], hand) }
func (gdClass XRPositionalTracker) HasPose(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRPositionalTracker[10], name) }
func (gdClass XRPositionalTracker) GetPose(name string) XRPose { return gdnative.Return[XRPose](gdnative.Object(gdClass), methodXRPositionalTracker[11], name) }
func (gdClass XRPositionalTracker) InvalidatePose(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[12], name) }
func (gdClass XRPositionalTracker) SetPose(name string, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[13], name, transform, linear_velocity, angular_velocity, tracking_confidence) }
func (gdClass XRPositionalTracker) GetInput(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodXRPositionalTracker[14], name) }
func (gdClass XRPositionalTracker) SetInput(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[15], name, value) }

type XRServer gdnative.Object

var methodXRServer [17]gdnative.Method

type XRServerTrackerType int64

const (
	XRServerTrackerHead XRServerTrackerType = 1
	XRServerTrackerController XRServerTrackerType = 2
	XRServerTrackerBasestation XRServerTrackerType = 4
	XRServerTrackerAnchor XRServerTrackerType = 8
	XRServerTrackerAnyKnown XRServerTrackerType = 127
	XRServerTrackerUnknown XRServerTrackerType = 128
	XRServerTrackerAny XRServerTrackerType = 255
)

type XRServerRotationMode int64

const (
	XRServerResetFullRotation XRServerRotationMode = 0
	XRServerResetButKeepTilt XRServerRotationMode = 1
	XRServerDontResetRotation XRServerRotationMode = 2
)
func (gdClass XRServer) GetWorldScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXRServer[0]) }
func (gdClass XRServer) SetWorldScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[1], scale) }
func (gdClass XRServer) GetReferenceFrame() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRServer[2]) }
func (gdClass XRServer) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[3], rotation_mode, keep_height) }
func (gdClass XRServer) GetHmdTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRServer[4]) }
func (gdClass XRServer) AddInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[5], intf) }
func (gdClass XRServer) GetInterfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRServer[6]) }
func (gdClass XRServer) RemoveInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[7], intf) }
func (gdClass XRServer) GetInterface(idx int64) XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[8], idx) }
func (gdClass XRServer) GetInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodXRServer[9]) }
func (gdClass XRServer) FindInterface(name string) XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[10], name) }
func (gdClass XRServer) AddTracker(tracker XRPositionalTracker)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[11], tracker) }
func (gdClass XRServer) RemoveTracker(tracker XRPositionalTracker)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[12], tracker) }
func (gdClass XRServer) GetTrackers(tracker_types int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodXRServer[13], tracker_types) }
func (gdClass XRServer) GetTracker(tracker_name string) XRPositionalTracker { return gdnative.Return[XRPositionalTracker](gdnative.Object(gdClass), methodXRServer[14], tracker_name) }
func (gdClass XRServer) GetPrimaryInterface() XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[15]) }
func (gdClass XRServer) SetPrimaryInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[16], intf) }
