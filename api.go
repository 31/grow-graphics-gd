// Code generated by the generate package DO NOT EDIT
package gd

import "github.com/readykit/gd/gdnative"

type Side int64

const (
	SideLeft Side = 0
	SideTop Side = 1
	SideRight Side = 2
	SideBottom Side = 3
)

type Corner int64

const (
	CornerTopLeft Corner = 0
	CornerTopRight Corner = 1
	CornerBottomRight Corner = 2
	CornerBottomLeft Corner = 3
)

type Orientation int64

const (
	Vertical Orientation = 1
	Horizontal Orientation = 0
)

type ClockDirection int64

const (
	Clockwise ClockDirection = 0
	Counterclockwise ClockDirection = 1
)

type HorizontalAlignment int64

const (
	HorizontalAlignmentLeft HorizontalAlignment = 0
	HorizontalAlignmentCenter HorizontalAlignment = 1
	HorizontalAlignmentRight HorizontalAlignment = 2
	HorizontalAlignmentFill HorizontalAlignment = 3
)

type VerticalAlignment int64

const (
	VerticalAlignmentTop VerticalAlignment = 0
	VerticalAlignmentCenter VerticalAlignment = 1
	VerticalAlignmentBottom VerticalAlignment = 2
	VerticalAlignmentFill VerticalAlignment = 3
)

type InlineAlignment int64

const (
	InlineAlignmentTopTo InlineAlignment = 0
	InlineAlignmentCenterTo InlineAlignment = 1
	InlineAlignmentBottomTo InlineAlignment = 2
	InlineAlignmentToTop InlineAlignment = 0
	InlineAlignmentToCenter InlineAlignment = 4
	InlineAlignmentToBaseline InlineAlignment = 8
	InlineAlignmentToBottom InlineAlignment = 12
	InlineAlignmentTop InlineAlignment = 0
	InlineAlignmentCenter InlineAlignment = 5
	InlineAlignmentBottom InlineAlignment = 14
	InlineAlignmentImageMask InlineAlignment = 3
	InlineAlignmentTextMask InlineAlignment = 12
)

type Key int64

const (
	KeyNone Key = 0
	KeySpecial Key = 16777216
	KeyEscape Key = 16777217
	KeyTab Key = 16777218
	KeyBacktab Key = 16777219
	KeyBackspace Key = 16777220
	KeyEnter Key = 16777221
	KeyKpEnter Key = 16777222
	KeyInsert Key = 16777223
	KeyDelete Key = 16777224
	KeyPause Key = 16777225
	KeyPrint Key = 16777226
	KeySysreq Key = 16777227
	KeyClear Key = 16777228
	KeyHome Key = 16777229
	KeyEnd Key = 16777230
	KeyLeft Key = 16777231
	KeyUp Key = 16777232
	KeyRight Key = 16777233
	KeyDown Key = 16777234
	KeyPageup Key = 16777235
	KeyPagedown Key = 16777236
	KeyShift Key = 16777237
	KeyCtrl Key = 16777238
	KeyMeta Key = 16777239
	KeyAlt Key = 16777240
	KeyCapslock Key = 16777241
	KeyNumlock Key = 16777242
	KeyScrolllock Key = 16777243
	KeyF1 Key = 16777244
	KeyF2 Key = 16777245
	KeyF3 Key = 16777246
	KeyF4 Key = 16777247
	KeyF5 Key = 16777248
	KeyF6 Key = 16777249
	KeyF7 Key = 16777250
	KeyF8 Key = 16777251
	KeyF9 Key = 16777252
	KeyF10 Key = 16777253
	KeyF11 Key = 16777254
	KeyF12 Key = 16777255
	KeyF13 Key = 16777256
	KeyF14 Key = 16777257
	KeyF15 Key = 16777258
	KeyF16 Key = 16777259
	KeyF17 Key = 16777260
	KeyF18 Key = 16777261
	KeyF19 Key = 16777262
	KeyF20 Key = 16777263
	KeyF21 Key = 16777264
	KeyF22 Key = 16777265
	KeyF23 Key = 16777266
	KeyF24 Key = 16777267
	KeyF25 Key = 16777268
	KeyF26 Key = 16777269
	KeyF27 Key = 16777270
	KeyF28 Key = 16777271
	KeyF29 Key = 16777272
	KeyF30 Key = 16777273
	KeyF31 Key = 16777274
	KeyF32 Key = 16777275
	KeyF33 Key = 16777276
	KeyF34 Key = 16777277
	KeyF35 Key = 16777278
	KeyKpMultiply Key = 16777345
	KeyKpDivide Key = 16777346
	KeyKpSubtract Key = 16777347
	KeyKpPeriod Key = 16777348
	KeyKpAdd Key = 16777349
	KeyKp0 Key = 16777350
	KeyKp1 Key = 16777351
	KeyKp2 Key = 16777352
	KeyKp3 Key = 16777353
	KeyKp4 Key = 16777354
	KeyKp5 Key = 16777355
	KeyKp6 Key = 16777356
	KeyKp7 Key = 16777357
	KeyKp8 Key = 16777358
	KeyKp9 Key = 16777359
	KeySuperL Key = 16777280
	KeySuperR Key = 16777281
	KeyMenu Key = 16777282
	KeyHyperL Key = 16777283
	KeyHyperR Key = 16777284
	KeyHelp Key = 16777285
	KeyDirectionL Key = 16777286
	KeyDirectionR Key = 16777287
	KeyBack Key = 16777288
	KeyForward Key = 16777289
	KeyStop Key = 16777290
	KeyRefresh Key = 16777291
	KeyVolumedown Key = 16777292
	KeyVolumemute Key = 16777293
	KeyVolumeup Key = 16777294
	KeyBassboost Key = 16777295
	KeyBassup Key = 16777296
	KeyBassdown Key = 16777297
	KeyTrebleup Key = 16777298
	KeyTrebledown Key = 16777299
	KeyMediaplay Key = 16777300
	KeyMediastop Key = 16777301
	KeyMediaprevious Key = 16777302
	KeyMedianext Key = 16777303
	KeyMediarecord Key = 16777304
	KeyHomepage Key = 16777305
	KeyFavorites Key = 16777306
	KeySearch Key = 16777307
	KeyStandby Key = 16777308
	KeyOpenurl Key = 16777309
	KeyLaunchmail Key = 16777310
	KeyLaunchmedia Key = 16777311
	KeyLaunch0 Key = 16777312
	KeyLaunch1 Key = 16777313
	KeyLaunch2 Key = 16777314
	KeyLaunch3 Key = 16777315
	KeyLaunch4 Key = 16777316
	KeyLaunch5 Key = 16777317
	KeyLaunch6 Key = 16777318
	KeyLaunch7 Key = 16777319
	KeyLaunch8 Key = 16777320
	KeyLaunch9 Key = 16777321
	KeyLauncha Key = 16777322
	KeyLaunchb Key = 16777323
	KeyLaunchc Key = 16777324
	KeyLaunchd Key = 16777325
	KeyLaunche Key = 16777326
	KeyLaunchf Key = 16777327
	KeyUnknown Key = 33554431
	KeySpace Key = 32
	KeyExclam Key = 33
	KeyQuotedbl Key = 34
	KeyNumbersign Key = 35
	KeyDollar Key = 36
	KeyPercent Key = 37
	KeyAmpersand Key = 38
	KeyApostrophe Key = 39
	KeyParenleft Key = 40
	KeyParenright Key = 41
	KeyAsterisk Key = 42
	KeyPlus Key = 43
	KeyComma Key = 44
	KeyMinus Key = 45
	KeyPeriod Key = 46
	KeySlash Key = 47
	Key0 Key = 48
	Key1 Key = 49
	Key2 Key = 50
	Key3 Key = 51
	Key4 Key = 52
	Key5 Key = 53
	Key6 Key = 54
	Key7 Key = 55
	Key8 Key = 56
	Key9 Key = 57
	KeyColon Key = 58
	KeySemicolon Key = 59
	KeyLess Key = 60
	KeyEqual Key = 61
	KeyGreater Key = 62
	KeyQuestion Key = 63
	KeyAt Key = 64
	KeyA Key = 65
	KeyB Key = 66
	KeyC Key = 67
	KeyD Key = 68
	KeyE Key = 69
	KeyF Key = 70
	KeyG Key = 71
	KeyH Key = 72
	KeyI Key = 73
	KeyJ Key = 74
	KeyK Key = 75
	KeyL Key = 76
	KeyM Key = 77
	KeyN Key = 78
	KeyO Key = 79
	KeyP Key = 80
	KeyQ Key = 81
	KeyR Key = 82
	KeyS Key = 83
	KeyT Key = 84
	KeyU Key = 85
	KeyV Key = 86
	KeyW Key = 87
	KeyX Key = 88
	KeyY Key = 89
	KeyZ Key = 90
	KeyBracketleft Key = 91
	KeyBackslash Key = 92
	KeyBracketright Key = 93
	KeyAsciicircum Key = 94
	KeyUnderscore Key = 95
	KeyQuoteleft Key = 96
	KeyBraceleft Key = 123
	KeyBar Key = 124
	KeyBraceright Key = 125
	KeyAsciitilde Key = 126
	KeyNobreakspace Key = 160
	KeyExclamdown Key = 161
	KeyCent Key = 162
	KeySterling Key = 163
	KeyCurrency Key = 164
	KeyYen Key = 165
	KeyBrokenbar Key = 166
	KeySection Key = 167
	KeyDiaeresis Key = 168
	KeyCopyright Key = 169
	KeyOrdfeminine Key = 170
	KeyGuillemotleft Key = 171
	KeyNotsign Key = 172
	KeyHyphen Key = 173
	KeyRegistered Key = 174
	KeyMacron Key = 175
	KeyDegree Key = 176
	KeyPlusminus Key = 177
	KeyTwosuperior Key = 178
	KeyThreesuperior Key = 179
	KeyAcute Key = 180
	KeyMu Key = 181
	KeyParagraph Key = 182
	KeyPeriodcentered Key = 183
	KeyCedilla Key = 184
	KeyOnesuperior Key = 185
	KeyMasculine Key = 186
	KeyGuillemotright Key = 187
	KeyOnequarter Key = 188
	KeyOnehalf Key = 189
	KeyThreequarters Key = 190
	KeyQuestiondown Key = 191
	KeyAgrave Key = 192
	KeyAacute Key = 193
	KeyAcircumflex Key = 194
	KeyAtilde Key = 195
	KeyAdiaeresis Key = 196
	KeyAring Key = 197
	KeyAe Key = 198
	KeyCcedilla Key = 199
	KeyEgrave Key = 200
	KeyEacute Key = 201
	KeyEcircumflex Key = 202
	KeyEdiaeresis Key = 203
	KeyIgrave Key = 204
	KeyIacute Key = 205
	KeyIcircumflex Key = 206
	KeyIdiaeresis Key = 207
	KeyEth Key = 208
	KeyNtilde Key = 209
	KeyOgrave Key = 210
	KeyOacute Key = 211
	KeyOcircumflex Key = 212
	KeyOtilde Key = 213
	KeyOdiaeresis Key = 214
	KeyMultiply Key = 215
	KeyOoblique Key = 216
	KeyUgrave Key = 217
	KeyUacute Key = 218
	KeyUcircumflex Key = 219
	KeyUdiaeresis Key = 220
	KeyYacute Key = 221
	KeyThorn Key = 222
	KeySsharp Key = 223
	KeyDivision Key = 247
	KeyYdiaeresis Key = 255
)

type KeyModifierMask int64

const (
	KeyCodeMask KeyModifierMask = 33554431
	KeyModifierMaskDefault KeyModifierMask = 2130706432
	KeyMaskShift KeyModifierMask = 33554432
	KeyMaskAlt KeyModifierMask = 67108864
	KeyMaskMeta KeyModifierMask = 134217728
	KeyMaskCtrl KeyModifierMask = 268435456
	KeyMaskCmd KeyModifierMask = 268435456
	KeyMaskKpad KeyModifierMask = 536870912
	KeyMaskGroupSwitch KeyModifierMask = 1073741824
)

type MouseButton int64

const (
	MouseButtonNone MouseButton = 0
	MouseButtonLeft MouseButton = 1
	MouseButtonRight MouseButton = 2
	MouseButtonMiddle MouseButton = 3
	MouseButtonWheelUp MouseButton = 4
	MouseButtonWheelDown MouseButton = 5
	MouseButtonWheelLeft MouseButton = 6
	MouseButtonWheelRight MouseButton = 7
	MouseButtonXbutton1 MouseButton = 8
	MouseButtonXbutton2 MouseButton = 9
	MouseButtonMaskLeft MouseButton = 1
	MouseButtonMaskRight MouseButton = 2
	MouseButtonMaskMiddle MouseButton = 4
	MouseButtonMaskXbutton1 MouseButton = 128
	MouseButtonMaskXbutton2 MouseButton = 256
)

type JoyButton int64

const (
	JoyButtonInvalid JoyButton = -1
	JoyButtonA JoyButton = 0
	JoyButtonB JoyButton = 1
	JoyButtonX JoyButton = 2
	JoyButtonY JoyButton = 3
	JoyButtonBack JoyButton = 4
	JoyButtonGuide JoyButton = 5
	JoyButtonStart JoyButton = 6
	JoyButtonLeftStick JoyButton = 7
	JoyButtonRightStick JoyButton = 8
	JoyButtonLeftShoulder JoyButton = 9
	JoyButtonRightShoulder JoyButton = 10
	JoyButtonDpadUp JoyButton = 11
	JoyButtonDpadDown JoyButton = 12
	JoyButtonDpadLeft JoyButton = 13
	JoyButtonDpadRight JoyButton = 14
	JoyButtonMisc1 JoyButton = 15
	JoyButtonPaddle1 JoyButton = 16
	JoyButtonPaddle2 JoyButton = 17
	JoyButtonPaddle3 JoyButton = 18
	JoyButtonPaddle4 JoyButton = 19
	JoyButtonTouchpad JoyButton = 20
	JoyButtonSdlMax JoyButton = 21
	JoyButtonMax JoyButton = 128
)

type JoyAxis int64

const (
	JoyAxisInvalid JoyAxis = -1
	JoyAxisLeftX JoyAxis = 0
	JoyAxisLeftY JoyAxis = 1
	JoyAxisRightX JoyAxis = 2
	JoyAxisRightY JoyAxis = 3
	JoyAxisTriggerLeft JoyAxis = 4
	JoyAxisTriggerRight JoyAxis = 5
	JoyAxisSdlMax JoyAxis = 6
	JoyAxisMax JoyAxis = 10
)

type MIDIMessage int64

const (
	MidiMessageNone MIDIMessage = 0
	MidiMessageNoteOff MIDIMessage = 8
	MidiMessageNoteOn MIDIMessage = 9
	MidiMessageAftertouch MIDIMessage = 10
	MidiMessageControlChange MIDIMessage = 11
	MidiMessageProgramChange MIDIMessage = 12
	MidiMessageChannelPressure MIDIMessage = 13
	MidiMessagePitchBend MIDIMessage = 14
	MidiMessageSystemExclusive MIDIMessage = 240
	MidiMessageQuarterFrame MIDIMessage = 241
	MidiMessageSongPositionPointer MIDIMessage = 242
	MidiMessageSongSelect MIDIMessage = 243
	MidiMessageTuneRequest MIDIMessage = 246
	MidiMessageTimingClock MIDIMessage = 248
	MidiMessageStart MIDIMessage = 250
	MidiMessageContinue MIDIMessage = 251
	MidiMessageStop MIDIMessage = 252
	MidiMessageActiveSensing MIDIMessage = 254
	MidiMessageSystemReset MIDIMessage = 255
)

type Error int64

const (
	Ok Error = 0
	Failed Error = 1
	ErrUnavailable Error = 2
	ErrUnconfigured Error = 3
	ErrUnauthorized Error = 4
	ErrParameterRangeError Error = 5
	ErrOutOfMemory Error = 6
	ErrFileNotFound Error = 7
	ErrFileBadDrive Error = 8
	ErrFileBadPath Error = 9
	ErrFileNoPermission Error = 10
	ErrFileAlreadyInUse Error = 11
	ErrFileCantOpen Error = 12
	ErrFileCantWrite Error = 13
	ErrFileCantRead Error = 14
	ErrFileUnrecognized Error = 15
	ErrFileCorrupt Error = 16
	ErrFileMissingDependencies Error = 17
	ErrFileEof Error = 18
	ErrCantOpen Error = 19
	ErrCantCreate Error = 20
	ErrQueryFailed Error = 21
	ErrAlreadyInUse Error = 22
	ErrLocked Error = 23
	ErrTimeout Error = 24
	ErrCantConnect Error = 25
	ErrCantResolve Error = 26
	ErrConnectionError Error = 27
	ErrCantAcquireResource Error = 28
	ErrCantFork Error = 29
	ErrInvalidData Error = 30
	ErrInvalidParameter Error = 31
	ErrAlreadyExists Error = 32
	ErrDoesNotExist Error = 33
	ErrDatabaseCantRead Error = 34
	ErrDatabaseCantWrite Error = 35
	ErrCompilationFailed Error = 36
	ErrMethodNotFound Error = 37
	ErrLinkFailed Error = 38
	ErrScriptFailed Error = 39
	ErrCyclicLink Error = 40
	ErrInvalidDeclaration Error = 41
	ErrDuplicateSymbol Error = 42
	ErrParseError Error = 43
	ErrBusy Error = 44
	ErrSkip Error = 45
	ErrHelp Error = 46
	ErrBug Error = 47
	ErrPrinterOnFire Error = 48
)

type PropertyHint int64

const (
	PropertyHintNone PropertyHint = 0
	PropertyHintRange PropertyHint = 1
	PropertyHintEnum PropertyHint = 2
	PropertyHintEnumSuggestion PropertyHint = 3
	PropertyHintExpEasing PropertyHint = 4
	PropertyHintLink PropertyHint = 5
	PropertyHintFlags PropertyHint = 6
	PropertyHintLayers2dRender PropertyHint = 7
	PropertyHintLayers2dPhysics PropertyHint = 8
	PropertyHintLayers2dNavigation PropertyHint = 9
	PropertyHintLayers3dRender PropertyHint = 10
	PropertyHintLayers3dPhysics PropertyHint = 11
	PropertyHintLayers3dNavigation PropertyHint = 12
	PropertyHintFile PropertyHint = 13
	PropertyHintDir PropertyHint = 14
	PropertyHintGlobalFile PropertyHint = 15
	PropertyHintGlobalDir PropertyHint = 16
	PropertyHintResourceType PropertyHint = 17
	PropertyHintMultilineText PropertyHint = 18
	PropertyHintExpression PropertyHint = 19
	PropertyHintPlaceholderText PropertyHint = 20
	PropertyHintColorNoAlpha PropertyHint = 21
	PropertyHintImageCompressLossy PropertyHint = 22
	PropertyHintImageCompressLossless PropertyHint = 23
	PropertyHintObjectId PropertyHint = 24
	PropertyHintTypeString PropertyHint = 25
	PropertyHintNodePathToEditedNode PropertyHint = 26
	PropertyHintMethodOfVariantType PropertyHint = 27
	PropertyHintMethodOfBaseType PropertyHint = 28
	PropertyHintMethodOfInstance PropertyHint = 29
	PropertyHintMethodOfScript PropertyHint = 30
	PropertyHintPropertyOfVariantType PropertyHint = 31
	PropertyHintPropertyOfBaseType PropertyHint = 32
	PropertyHintPropertyOfInstance PropertyHint = 33
	PropertyHintPropertyOfScript PropertyHint = 34
	PropertyHintObjectTooBig PropertyHint = 35
	PropertyHintNodePathValidTypes PropertyHint = 36
	PropertyHintSaveFile PropertyHint = 37
	PropertyHintGlobalSaveFile PropertyHint = 38
	PropertyHintIntIsObjectid PropertyHint = 39
	PropertyHintIntIsPointer PropertyHint = 41
	PropertyHintArrayType PropertyHint = 40
	PropertyHintLocaleId PropertyHint = 42
	PropertyHintLocalizableString PropertyHint = 43
	PropertyHintNodeType PropertyHint = 44
	PropertyHintMax PropertyHint = 45
)

type PropertyUsageFlags int64

const (
	PropertyUsageNone PropertyUsageFlags = 0
	PropertyUsageStorage PropertyUsageFlags = 2
	PropertyUsageEditor PropertyUsageFlags = 4
	PropertyUsageCheckable PropertyUsageFlags = 8
	PropertyUsageChecked PropertyUsageFlags = 16
	PropertyUsageInternationalized PropertyUsageFlags = 32
	PropertyUsageGroup PropertyUsageFlags = 64
	PropertyUsageCategory PropertyUsageFlags = 128
	PropertyUsageSubgroup PropertyUsageFlags = 256
	PropertyUsageClassIsBitfield PropertyUsageFlags = 512
	PropertyUsageNoInstanceState PropertyUsageFlags = 1024
	PropertyUsageRestartIfChanged PropertyUsageFlags = 2048
	PropertyUsageScriptVariable PropertyUsageFlags = 4096
	PropertyUsageStoreIfNull PropertyUsageFlags = 8192
	PropertyUsageAnimateAsTrigger PropertyUsageFlags = 16384
	PropertyUsageUpdateAllIfModified PropertyUsageFlags = 32768
	PropertyUsageScriptDefaultValue PropertyUsageFlags = 65536
	PropertyUsageClassIsEnum PropertyUsageFlags = 131072
	PropertyUsageNilIsVariant PropertyUsageFlags = 262144
	PropertyUsageInternal PropertyUsageFlags = 524288
	PropertyUsageDoNotShareOnDuplicate PropertyUsageFlags = 1048576
	PropertyUsageHighEndGfx PropertyUsageFlags = 2097152
	PropertyUsageNodePathFromSceneRoot PropertyUsageFlags = 4194304
	PropertyUsageResourceNotPersistent PropertyUsageFlags = 8388608
	PropertyUsageKeyingIncrements PropertyUsageFlags = 16777216
	PropertyUsageDeferredSetResource PropertyUsageFlags = 33554432
	PropertyUsageEditorInstantiateObject PropertyUsageFlags = 67108864
	PropertyUsageEditorBasicSetting PropertyUsageFlags = 134217728
	PropertyUsageArray PropertyUsageFlags = 536870912
	PropertyUsageDefault PropertyUsageFlags = 6
	PropertyUsageDefaultIntl PropertyUsageFlags = 38
	PropertyUsageNoEditor PropertyUsageFlags = 2
)

type MethodFlags int64

const (
	MethodFlagNormal MethodFlags = 1
	MethodFlagEditor MethodFlags = 2
	MethodFlagConst MethodFlags = 4
	MethodFlagVirtual MethodFlags = 8
	MethodFlagVararg MethodFlags = 16
	MethodFlagStatic MethodFlags = 32
	MethodFlagObjectCore MethodFlags = 64
	MethodFlagsDefault MethodFlags = 1
)

type VariantType int64

const (
	TypeNil VariantType = 0
	TypeBool VariantType = 1
	TypeInt VariantType = 2
	TypeFloat VariantType = 3
	TypeString VariantType = 4
	TypeVector2 VariantType = 5
	TypeVector2i VariantType = 6
	TypeRect2 VariantType = 7
	TypeRect2i VariantType = 8
	TypeVector3 VariantType = 9
	TypeVector3i VariantType = 10
	TypeTransform2d VariantType = 11
	TypeVector4 VariantType = 12
	TypeVector4i VariantType = 13
	TypePlane VariantType = 14
	TypeQuaternion VariantType = 15
	TypeAabb VariantType = 16
	TypeBasis VariantType = 17
	TypeTransform3d VariantType = 18
	TypeProjection VariantType = 19
	TypeColor VariantType = 20
	TypeStringName VariantType = 21
	TypeNodePath VariantType = 22
	TypeRid VariantType = 23
	TypeObject VariantType = 24
	TypeCallable VariantType = 25
	TypeSignal VariantType = 26
	TypeDictionary VariantType = 27
	TypeArray VariantType = 28
	TypePackedByteArray VariantType = 29
	TypePackedInt32Array VariantType = 30
	TypePackedInt64Array VariantType = 31
	TypePackedFloat32Array VariantType = 32
	TypePackedFloat64Array VariantType = 33
	TypePackedStringArray VariantType = 34
	TypePackedVector2Array VariantType = 35
	TypePackedVector3Array VariantType = 36
	TypePackedColorArray VariantType = 37
	TypeMax VariantType = 38
)

type VariantOperator int64

const (
	OpEqual VariantOperator = 0
	OpNotEqual VariantOperator = 1
	OpLess VariantOperator = 2
	OpLessEqual VariantOperator = 3
	OpGreater VariantOperator = 4
	OpGreaterEqual VariantOperator = 5
	OpAdd VariantOperator = 6
	OpSubtract VariantOperator = 7
	OpMultiply VariantOperator = 8
	OpDivide VariantOperator = 9
	OpNegate VariantOperator = 10
	OpPositive VariantOperator = 11
	OpModule VariantOperator = 12
	OpPower VariantOperator = 13
	OpShiftLeft VariantOperator = 14
	OpShiftRight VariantOperator = 15
	OpBitAnd VariantOperator = 16
	OpBitOr VariantOperator = 17
	OpBitXor VariantOperator = 18
	OpBitNegate VariantOperator = 19
	OpAnd VariantOperator = 20
	OpOr VariantOperator = 21
	OpXor VariantOperator = 22
	OpNot VariantOperator = 23
	OpIn VariantOperator = 24
	OpMax VariantOperator = 25
)

type Vector2Axis int64

const (
	Vector2AxisX Vector2Axis = 0
	Vector2AxisY Vector2Axis = 1
)

type Vector2iAxis int64

const (
	Vector2iAxisX Vector2iAxis = 0
	Vector2iAxisY Vector2iAxis = 1
)

type Vector3Axis int64

const (
	Vector3AxisX Vector3Axis = 0
	Vector3AxisY Vector3Axis = 1
	Vector3AxisZ Vector3Axis = 2
)

type Vector3iAxis int64

const (
	Vector3iAxisX Vector3iAxis = 0
	Vector3iAxisY Vector3iAxis = 1
	Vector3iAxisZ Vector3iAxis = 2
)

type Vector4Axis int64

const (
	Vector4AxisX Vector4Axis = 0
	Vector4AxisY Vector4Axis = 1
	Vector4AxisZ Vector4Axis = 2
	Vector4AxisW Vector4Axis = 3
)

type Vector4iAxis int64

const (
	Vector4iAxisX Vector4iAxis = 0
	Vector4iAxisY Vector4iAxis = 1
	Vector4iAxisZ Vector4iAxis = 2
	Vector4iAxisW Vector4iAxis = 3
)

type BasisEulerOrder int64

const (
	BasisEulerOrderXyz BasisEulerOrder = 0
	BasisEulerOrderXzy BasisEulerOrder = 1
	BasisEulerOrderYxz BasisEulerOrder = 2
	BasisEulerOrderYzx BasisEulerOrder = 3
	BasisEulerOrderZxy BasisEulerOrder = 4
	BasisEulerOrderZyx BasisEulerOrder = 5
)

type ProjectionPlanes int64

const (
	ProjectionPlaneNear ProjectionPlanes = 0
	ProjectionPlaneFar ProjectionPlanes = 1
	ProjectionPlaneLeft ProjectionPlanes = 2
	ProjectionPlaneTop ProjectionPlanes = 3
	ProjectionPlaneRight ProjectionPlanes = 4
	ProjectionPlaneBottom ProjectionPlanes = 5
)

type AESContextMode int64

const (
	AESContextModeEcbEncrypt AESContextMode = 0
	AESContextModeEcbDecrypt AESContextMode = 1
	AESContextModeCbcEncrypt AESContextMode = 2
	AESContextModeCbcDecrypt AESContextMode = 3
	AESContextModeMax AESContextMode = 4
)

type AESContext gdnative.Object
func (AESContext) class() string { return "AESContext\000" }

func (gdClass AESContext) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodAESContext [4]gdnative.Method
func (gdClass AESContext) Start(mode AESContextMode, key []byte, iv []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAESContext[0], mode, key, iv) }
func (gdClass AESContext) Update(src []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAESContext[1], src) }
func (gdClass AESContext) GetIvState() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAESContext[2]) }
func (gdClass AESContext) Finish()  { gdnative.Call(gdnative.Object(gdClass), methodAESContext[3]) }

type AStar2D gdnative.Object
func (AStar2D) class() string { return "AStar2D\000" }

func (gdClass AStar2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodAStar2D [23]gdnative.Method
func (gdClass AStar2D) virtual(val any, name string) any {	switch name {
	case "_estimate_cost":
		i, ok := val.(interface{ EstimateCost(from_id int64, to_id int64) float64 })
		if ok {
			return i.EstimateCost
		}
	case "_compute_cost":
		i, ok := val.(interface{ ComputeCost(from_id int64, to_id int64) float64 })
		if ok {
			return i.ComputeCost
		}
	}
	return nil
}
func (gdClass AStar2D) GetAvailablePointId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[0]) }
func (gdClass AStar2D) AddPoint(id int64, position Vector2, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[1], id, position, weight_scale) }
func (gdClass AStar2D) GetPointPosition(id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAStar2D[2], id) }
func (gdClass AStar2D) SetPointPosition(id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[3], id, position) }
func (gdClass AStar2D) GetPointWeightScale(id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar2D[4], id) }
func (gdClass AStar2D) SetPointWeightScale(id int64, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[5], id, weight_scale) }
func (gdClass AStar2D) RemovePoint(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[6], id) }
func (gdClass AStar2D) HasPoint(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[7], id) }
func (gdClass AStar2D) GetPointConnections(id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar2D[8], id) }
func (gdClass AStar2D) GetPointIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAStar2D[9]) }
func (gdClass AStar2D) SetPointDisabled(id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[10], id, disabled) }
func (gdClass AStar2D) IsPointDisabled(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[11], id) }
func (gdClass AStar2D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[12], id, to_id, bidirectional) }
func (gdClass AStar2D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[13], id, to_id, bidirectional) }
func (gdClass AStar2D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar2D[14], id, to_id, bidirectional) }
func (gdClass AStar2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[15]) }
func (gdClass AStar2D) GetPointCapacity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[16]) }
func (gdClass AStar2D) ReserveSpace(num_nodes int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[17], num_nodes) }
func (gdClass AStar2D) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAStar2D[18]) }
func (gdClass AStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar2D[19], to_position, include_disabled) }
func (gdClass AStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAStar2D[20], to_position) }
func (gdClass AStar2D) GetPointPath(from_id int64, to_id int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodAStar2D[21], from_id, to_id) }
func (gdClass AStar2D) GetIdPath(from_id int64, to_id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar2D[22], from_id, to_id) }

type AStar3D gdnative.Object
func (AStar3D) class() string { return "AStar3D\000" }

func (gdClass AStar3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodAStar3D [23]gdnative.Method
func (gdClass AStar3D) virtual(val any, name string) any {	switch name {
	case "_estimate_cost":
		i, ok := val.(interface{ EstimateCost(from_id int64, to_id int64) float64 })
		if ok {
			return i.EstimateCost
		}
	case "_compute_cost":
		i, ok := val.(interface{ ComputeCost(from_id int64, to_id int64) float64 })
		if ok {
			return i.ComputeCost
		}
	}
	return nil
}
func (gdClass AStar3D) GetAvailablePointId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[0]) }
func (gdClass AStar3D) AddPoint(id int64, position Vector3, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[1], id, position, weight_scale) }
func (gdClass AStar3D) GetPointPosition(id int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodAStar3D[2], id) }
func (gdClass AStar3D) SetPointPosition(id int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[3], id, position) }
func (gdClass AStar3D) GetPointWeightScale(id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAStar3D[4], id) }
func (gdClass AStar3D) SetPointWeightScale(id int64, weight_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[5], id, weight_scale) }
func (gdClass AStar3D) RemovePoint(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[6], id) }
func (gdClass AStar3D) HasPoint(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[7], id) }
func (gdClass AStar3D) GetPointConnections(id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar3D[8], id) }
func (gdClass AStar3D) GetPointIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAStar3D[9]) }
func (gdClass AStar3D) SetPointDisabled(id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[10], id, disabled) }
func (gdClass AStar3D) IsPointDisabled(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[11], id) }
func (gdClass AStar3D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[12], id, to_id, bidirectional) }
func (gdClass AStar3D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[13], id, to_id, bidirectional) }
func (gdClass AStar3D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAStar3D[14], id, to_id, bidirectional) }
func (gdClass AStar3D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[15]) }
func (gdClass AStar3D) GetPointCapacity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[16]) }
func (gdClass AStar3D) ReserveSpace(num_nodes int64)  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[17], num_nodes) }
func (gdClass AStar3D) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAStar3D[18]) }
func (gdClass AStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAStar3D[19], to_position, include_disabled) }
func (gdClass AStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodAStar3D[20], to_position) }
func (gdClass AStar3D) GetPointPath(from_id int64, to_id int64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodAStar3D[21], from_id, to_id) }
func (gdClass AStar3D) GetIdPath(from_id int64, to_id int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodAStar3D[22], from_id, to_id) }

type AcceptDialog gdnative.Object
func (AcceptDialog) class() string { return "AcceptDialog\000" }

func (gdClass AcceptDialog) Window() Window { return Window(gdClass) }

var methodAcceptDialog [16]gdnative.Method
func (gdClass AcceptDialog) GetOkButton() Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[0]) }
func (gdClass AcceptDialog) GetLabel() Label { return gdnative.Return[Label](gdnative.Object(gdClass), methodAcceptDialog[1]) }
func (gdClass AcceptDialog) SetHideOnOk(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[2], enabled) }
func (gdClass AcceptDialog) GetHideOnOk() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[3]) }
func (gdClass AcceptDialog) SetCloseOnEscape(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[4], enabled) }
func (gdClass AcceptDialog) GetCloseOnEscape() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[5]) }
func (gdClass AcceptDialog) AddButton(text string, right bool, action string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[6], text, right, action) }
func (gdClass AcceptDialog) AddCancelButton(name string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodAcceptDialog[7], name) }
func (gdClass AcceptDialog) RemoveButton(button Control)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[8], button) }
func (gdClass AcceptDialog) RegisterTextEnter(line_edit Control)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[9], line_edit) }
func (gdClass AcceptDialog) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[10], text) }
func (gdClass AcceptDialog) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAcceptDialog[11]) }
func (gdClass AcceptDialog) SetAutowrap(autowrap bool)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[12], autowrap) }
func (gdClass AcceptDialog) HasAutowrap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAcceptDialog[13]) }
func (gdClass AcceptDialog) SetOkButtonText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAcceptDialog[14], text) }
func (gdClass AcceptDialog) GetOkButtonText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAcceptDialog[15]) }

type AnimatableBody2D gdnative.Object
func (AnimatableBody2D) class() string { return "AnimatableBody2D\000" }

func (gdClass AnimatableBody2D) StaticBody2D() StaticBody2D { return StaticBody2D(gdClass) }

var methodAnimatableBody2D [2]gdnative.Method
func (gdClass AnimatableBody2D) SetSyncToPhysics(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatableBody2D[0], enable) }
func (gdClass AnimatableBody2D) IsSyncToPhysicsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatableBody2D[1]) }

type AnimatableBody3D gdnative.Object
func (AnimatableBody3D) class() string { return "AnimatableBody3D\000" }

func (gdClass AnimatableBody3D) StaticBody3D() StaticBody3D { return StaticBody3D(gdClass) }

var methodAnimatableBody3D [2]gdnative.Method
func (gdClass AnimatableBody3D) SetSyncToPhysics(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatableBody3D[0], enable) }
func (gdClass AnimatableBody3D) IsSyncToPhysicsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatableBody3D[1]) }

type AnimatedSprite2D gdnative.Object
func (AnimatedSprite2D) class() string { return "AnimatedSprite2D\000" }

func (gdClass AnimatedSprite2D) Node2D() Node2D { return Node2D(gdClass) }

var methodAnimatedSprite2D [20]gdnative.Method
func (gdClass AnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[0], sprite_frames) }
func (gdClass AnimatedSprite2D) GetSpriteFrames() SpriteFrames { return gdnative.Return[SpriteFrames](gdnative.Object(gdClass), methodAnimatedSprite2D[1]) }
func (gdClass AnimatedSprite2D) SetAnimation(animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[2], animation) }
func (gdClass AnimatedSprite2D) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimatedSprite2D[3]) }
func (gdClass AnimatedSprite2D) SetPlaying(playing bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[4], playing) }
func (gdClass AnimatedSprite2D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[5]) }
func (gdClass AnimatedSprite2D) Play(anim string, backwards bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[6], anim, backwards) }
func (gdClass AnimatedSprite2D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[7]) }
func (gdClass AnimatedSprite2D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[8], centered) }
func (gdClass AnimatedSprite2D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[9]) }
func (gdClass AnimatedSprite2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[10], offset) }
func (gdClass AnimatedSprite2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimatedSprite2D[11]) }
func (gdClass AnimatedSprite2D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[12], flip_h) }
func (gdClass AnimatedSprite2D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[13]) }
func (gdClass AnimatedSprite2D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[14], flip_v) }
func (gdClass AnimatedSprite2D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite2D[15]) }
func (gdClass AnimatedSprite2D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[16], frame) }
func (gdClass AnimatedSprite2D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedSprite2D[17]) }
func (gdClass AnimatedSprite2D) SetSpeedScale(speed_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite2D[18], speed_scale) }
func (gdClass AnimatedSprite2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedSprite2D[19]) }

type AnimatedSprite3D gdnative.Object
func (AnimatedSprite3D) class() string { return "AnimatedSprite3D\000" }

func (gdClass AnimatedSprite3D) SpriteBase3D() SpriteBase3D { return SpriteBase3D(gdClass) }

var methodAnimatedSprite3D [9]gdnative.Method
func (gdClass AnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[0], sprite_frames) }
func (gdClass AnimatedSprite3D) GetSpriteFrames() SpriteFrames { return gdnative.Return[SpriteFrames](gdnative.Object(gdClass), methodAnimatedSprite3D[1]) }
func (gdClass AnimatedSprite3D) SetAnimation(animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[2], animation) }
func (gdClass AnimatedSprite3D) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimatedSprite3D[3]) }
func (gdClass AnimatedSprite3D) Play(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[4], anim) }
func (gdClass AnimatedSprite3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[5]) }
func (gdClass AnimatedSprite3D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedSprite3D[6]) }
func (gdClass AnimatedSprite3D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedSprite3D[7], frame) }
func (gdClass AnimatedSprite3D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedSprite3D[8]) }

type AnimatedTexture gdnative.Object
func (AnimatedTexture) class() string { return "AnimatedTexture\000" }

func (gdClass AnimatedTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodAnimatedTexture [14]gdnative.Method
func (gdClass AnimatedTexture) SetFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[0], frames) }
func (gdClass AnimatedTexture) GetFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedTexture[1]) }
func (gdClass AnimatedTexture) SetCurrentFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[2], frame) }
func (gdClass AnimatedTexture) GetCurrentFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimatedTexture[3]) }
func (gdClass AnimatedTexture) SetPause(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[4], pause) }
func (gdClass AnimatedTexture) GetPause() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedTexture[5]) }
func (gdClass AnimatedTexture) SetOneshot(oneshot bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[6], oneshot) }
func (gdClass AnimatedTexture) GetOneshot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimatedTexture[7]) }
func (gdClass AnimatedTexture) SetFps(fps float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[8], fps) }
func (gdClass AnimatedTexture) GetFps() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedTexture[9]) }
func (gdClass AnimatedTexture) SetFrameTexture(frame int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[10], frame, texture) }
func (gdClass AnimatedTexture) GetFrameTexture(frame int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodAnimatedTexture[11], frame) }
func (gdClass AnimatedTexture) SetFrameDelay(frame int64, delay float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimatedTexture[12], frame, delay) }
func (gdClass AnimatedTexture) GetFrameDelay(frame int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimatedTexture[13], frame) }

type AnimationTrackType int64

const (
	AnimationTypeValue AnimationTrackType = 0
	AnimationTypePosition3d AnimationTrackType = 1
	AnimationTypeRotation3d AnimationTrackType = 2
	AnimationTypeScale3d AnimationTrackType = 3
	AnimationTypeBlendShape AnimationTrackType = 4
	AnimationTypeMethod AnimationTrackType = 5
	AnimationTypeBezier AnimationTrackType = 6
	AnimationTypeAudio AnimationTrackType = 7
	AnimationTypeAnimation AnimationTrackType = 8
)

type AnimationInterpolationType int64

const (
	AnimationInterpolationNearest AnimationInterpolationType = 0
	AnimationInterpolationLinear AnimationInterpolationType = 1
	AnimationInterpolationCubic AnimationInterpolationType = 2
)

type AnimationUpdateMode int64

const (
	AnimationUpdateContinuous AnimationUpdateMode = 0
	AnimationUpdateDiscrete AnimationUpdateMode = 1
	AnimationUpdateTrigger AnimationUpdateMode = 2
	AnimationUpdateCapture AnimationUpdateMode = 3
)

type AnimationLoopMode int64

const (
	AnimationLoopNone AnimationLoopMode = 0
	AnimationLoopLinear AnimationLoopMode = 1
	AnimationLoopPingpong AnimationLoopMode = 2
)

type AnimationHandleMode int64

const (
	AnimationHandleModeFree AnimationHandleMode = 0
	AnimationHandleModeBalanced AnimationHandleMode = 1
)

type Animation gdnative.Object
func (Animation) class() string { return "Animation\000" }

func (gdClass Animation) Resource() Resource { return Resource(gdClass) }

var methodAnimation [71]gdnative.Method
func (gdClass Animation) AddTrack(atype AnimationTrackType, at_position int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[0], atype, at_position) }
func (gdClass Animation) RemoveTrack(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[1], track_idx) }
func (gdClass Animation) GetTrackCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[2]) }
func (gdClass Animation) TrackGetType(track_idx int64) AnimationTrackType { return gdnative.Return[AnimationTrackType](gdnative.Object(gdClass), methodAnimation[3], track_idx) }
func (gdClass Animation) TrackGetPath(track_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimation[4], track_idx) }
func (gdClass Animation) TrackSetPath(track_idx int64, path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[5], track_idx, path) }
func (gdClass Animation) FindTrack(path NodePath, atype AnimationTrackType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[6], path, atype) }
func (gdClass Animation) TrackMoveUp(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[7], track_idx) }
func (gdClass Animation) TrackMoveDown(track_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[8], track_idx) }
func (gdClass Animation) TrackMoveTo(track_idx int64, to_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[9], track_idx, to_idx) }
func (gdClass Animation) TrackSwap(track_idx int64, with_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[10], track_idx, with_idx) }
func (gdClass Animation) TrackSetImported(track_idx int64, imported bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[11], track_idx, imported) }
func (gdClass Animation) TrackIsImported(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[12], track_idx) }
func (gdClass Animation) TrackSetEnabled(track_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[13], track_idx, enabled) }
func (gdClass Animation) TrackIsEnabled(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[14], track_idx) }
func (gdClass Animation) PositionTrackInsertKey(track_idx int64, time float64, position Vector3) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[15], track_idx, time, position) }
func (gdClass Animation) RotationTrackInsertKey(track_idx int64, time float64, rotation Quaternion) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[16], track_idx, time, rotation) }
func (gdClass Animation) ScaleTrackInsertKey(track_idx int64, time float64, scale Vector3) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[17], track_idx, time, scale) }
func (gdClass Animation) BlendShapeTrackInsertKey(track_idx int64, time float64, amount float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[18], track_idx, time, amount) }
func (gdClass Animation) TrackInsertKey(track_idx int64, time float64, key any, transition float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[19], track_idx, time, key, transition) }
func (gdClass Animation) TrackRemoveKey(track_idx int64, key_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[20], track_idx, key_idx) }
func (gdClass Animation) TrackRemoveKeyAtTime(track_idx int64, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[21], track_idx, time) }
func (gdClass Animation) TrackSetKeyValue(track_idx int64, key int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[22], track_idx, key, value) }
func (gdClass Animation) TrackSetKeyTransition(track_idx int64, key_idx int64, transition float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[23], track_idx, key_idx, transition) }
func (gdClass Animation) TrackSetKeyTime(track_idx int64, key_idx int64, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[24], track_idx, key_idx, time) }
func (gdClass Animation) TrackGetKeyTransition(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[25], track_idx, key_idx) }
func (gdClass Animation) TrackGetKeyCount(track_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[26], track_idx) }
func (gdClass Animation) TrackGetKeyValue(track_idx int64, key_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimation[27], track_idx, key_idx) }
func (gdClass Animation) TrackGetKeyTime(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[28], track_idx, key_idx) }
func (gdClass Animation) TrackFindKey(track_idx int64, time float64, exact bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[29], track_idx, time, exact) }
func (gdClass Animation) TrackSetInterpolationType(track_idx int64, interpolation AnimationInterpolationType)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[30], track_idx, interpolation) }
func (gdClass Animation) TrackGetInterpolationType(track_idx int64) AnimationInterpolationType { return gdnative.Return[AnimationInterpolationType](gdnative.Object(gdClass), methodAnimation[31], track_idx) }
func (gdClass Animation) TrackSetInterpolationLoopWrap(track_idx int64, interpolation bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[32], track_idx, interpolation) }
func (gdClass Animation) TrackGetInterpolationLoopWrap(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[33], track_idx) }
func (gdClass Animation) TrackIsCompressed(track_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimation[34], track_idx) }
func (gdClass Animation) ValueTrackSetUpdateMode(track_idx int64, mode AnimationUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[35], track_idx, mode) }
func (gdClass Animation) ValueTrackGetUpdateMode(track_idx int64) AnimationUpdateMode { return gdnative.Return[AnimationUpdateMode](gdnative.Object(gdClass), methodAnimation[36], track_idx) }
func (gdClass Animation) ValueTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodAnimation[37], track_idx, time_sec, delta) }
func (gdClass Animation) ValueTrackInterpolate(track_idx int64, time_sec float64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimation[38], track_idx, time_sec) }
func (gdClass Animation) MethodTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodAnimation[39], track_idx, time_sec, delta) }
func (gdClass Animation) MethodTrackGetName(track_idx int64, key_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimation[40], track_idx, key_idx) }
func (gdClass Animation) MethodTrackGetParams(track_idx int64, key_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimation[41], track_idx, key_idx) }
func (gdClass Animation) BezierTrackInsertKey(track_idx int64, time float64, value float64, in_handle Vector2, out_handle Vector2, handle_mode AnimationHandleMode) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[42], track_idx, time, value, in_handle, out_handle, handle_mode) }
func (gdClass Animation) BezierTrackSetKeyValue(track_idx int64, key_idx int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[43], track_idx, key_idx, value) }
func (gdClass Animation) BezierTrackSetKeyInHandle(track_idx int64, key_idx int64, in_handle Vector2, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[44], track_idx, key_idx, in_handle, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackSetKeyOutHandle(track_idx int64, key_idx int64, out_handle Vector2, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[45], track_idx, key_idx, out_handle, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackGetKeyValue(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[46], track_idx, key_idx) }
func (gdClass Animation) BezierTrackGetKeyInHandle(track_idx int64, key_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimation[47], track_idx, key_idx) }
func (gdClass Animation) BezierTrackGetKeyOutHandle(track_idx int64, key_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimation[48], track_idx, key_idx) }
func (gdClass Animation) BezierTrackInterpolate(track_idx int64, time float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[49], track_idx, time) }
func (gdClass Animation) AudioTrackInsertKey(track_idx int64, time float64, stream Resource, start_offset float64, end_offset float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[50], track_idx, time, stream, start_offset, end_offset) }
func (gdClass Animation) AudioTrackSetKeyStream(track_idx int64, key_idx int64, stream Resource)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[51], track_idx, key_idx, stream) }
func (gdClass Animation) AudioTrackSetKeyStartOffset(track_idx int64, key_idx int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[52], track_idx, key_idx, offset) }
func (gdClass Animation) AudioTrackSetKeyEndOffset(track_idx int64, key_idx int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[53], track_idx, key_idx, offset) }
func (gdClass Animation) AudioTrackGetKeyStream(track_idx int64, key_idx int64) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodAnimation[54], track_idx, key_idx) }
func (gdClass Animation) AudioTrackGetKeyStartOffset(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[55], track_idx, key_idx) }
func (gdClass Animation) AudioTrackGetKeyEndOffset(track_idx int64, key_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[56], track_idx, key_idx) }
func (gdClass Animation) BezierTrackSetKeyHandleMode(track_idx int64, key_idx int64, key_handle_mode AnimationHandleMode, balanced_value_time_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[57], track_idx, key_idx, key_handle_mode, balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackGetKeyHandleMode(track_idx int64, key_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[58], track_idx, key_idx) }
func (gdClass Animation) AnimationTrackInsertKey(track_idx int64, time float64, animation string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimation[59], track_idx, time, animation) }
func (gdClass Animation) AnimationTrackSetKeyAnimation(track_idx int64, key_idx int64, animation string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[60], track_idx, key_idx, animation) }
func (gdClass Animation) AnimationTrackGetKeyAnimation(track_idx int64, key_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimation[61], track_idx, key_idx) }
func (gdClass Animation) SetLength(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[62], time_sec) }
func (gdClass Animation) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[63]) }
func (gdClass Animation) SetLoopMode(loop_mode AnimationLoopMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[64], loop_mode) }
func (gdClass Animation) GetLoopMode() AnimationLoopMode { return gdnative.Return[AnimationLoopMode](gdnative.Object(gdClass), methodAnimation[65]) }
func (gdClass Animation) SetStep(size_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[66], size_sec) }
func (gdClass Animation) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimation[67]) }
func (gdClass Animation) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[68]) }
func (gdClass Animation) CopyTrack(track_idx int64, to_animation Animation)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[69], track_idx, to_animation) }
func (gdClass Animation) Compress(page_size int64, fps int64, split_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimation[70], page_size, fps, split_tolerance) }

type AnimationLibrary gdnative.Object
func (AnimationLibrary) class() string { return "AnimationLibrary\000" }

func (gdClass AnimationLibrary) Resource() Resource { return Resource(gdClass) }

var methodAnimationLibrary [6]gdnative.Method
func (gdClass AnimationLibrary) AddAnimation(name string, animation Animation) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAnimationLibrary[0], name, animation) }
func (gdClass AnimationLibrary) RemoveAnimation(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationLibrary[1], name) }
func (gdClass AnimationLibrary) RenameAnimation(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationLibrary[2], name, newname) }
func (gdClass AnimationLibrary) HasAnimation(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationLibrary[3], name) }
func (gdClass AnimationLibrary) GetAnimation(name string) Animation { return gdnative.Return[Animation](gdnative.Object(gdClass), methodAnimationLibrary[4], name) }
func (gdClass AnimationLibrary) GetAnimationList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimationLibrary[5]) }

type AnimationNodeFilterAction int64

const (
	AnimationNodeFilterIgnore AnimationNodeFilterAction = 0
	AnimationNodeFilterPass AnimationNodeFilterAction = 1
	AnimationNodeFilterStop AnimationNodeFilterAction = 2
	AnimationNodeFilterBlend AnimationNodeFilterAction = 3
)

type AnimationNode gdnative.Object
func (AnimationNode) class() string { return "AnimationNode\000" }

func (gdClass AnimationNode) Resource() Resource { return Resource(gdClass) }

var methodAnimationNode [13]gdnative.Method
func (gdClass AnimationNode) virtual(val any, name string) any {	switch name {
	case "_get_child_nodes":
		i, ok := val.(interface{ GetChildNodes() Dictionary })
		if ok {
			return i.GetChildNodes
		}
	case "_get_parameter_list":
		i, ok := val.(interface{ GetParameterList() Array })
		if ok {
			return i.GetParameterList
		}
	case "_get_child_by_name":
		i, ok := val.(interface{ GetChildByName(name string) AnimationNode })
		if ok {
			return i.GetChildByName
		}
	case "_get_parameter_default_value":
		i, ok := val.(interface{ GetParameterDefaultValue(parameter string) any })
		if ok {
			return i.GetParameterDefaultValue
		}
	case "_process":
		i, ok := val.(interface{ Process(time float64, seek bool, seek_root bool) float64 })
		if ok {
			return i.Process
		}
	case "_get_caption":
		i, ok := val.(interface{ GetCaption() string })
		if ok {
			return i.GetCaption
		}
	case "_has_filter":
		i, ok := val.(interface{ HasFilter() bool })
		if ok {
			return i.HasFilter
		}
	}
	return nil
}
func (gdClass AnimationNode) GetInputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNode[0]) }
func (gdClass AnimationNode) GetInputName(input int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNode[1], input) }
func (gdClass AnimationNode) AddInput(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[2], name) }
func (gdClass AnimationNode) RemoveInput(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[3], index) }
func (gdClass AnimationNode) SetFilterPath(path NodePath, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[4], path, enable) }
func (gdClass AnimationNode) IsPathFiltered(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNode[5], path) }
func (gdClass AnimationNode) SetFilterEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[6], enable) }
func (gdClass AnimationNode) IsFilterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNode[7]) }
func (gdClass AnimationNode) BlendAnimation(animation string, time float64, delta float64, seeked bool, seek_root bool, blend float64, pingponged int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[8], animation, time, delta, seeked, seek_root, blend, pingponged) }
func (gdClass AnimationNode) BlendNode(name string, node AnimationNode, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNode[9], name, node, time, seek, seek_root, blend, filter, sync) }
func (gdClass AnimationNode) BlendInput(input_index int64, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNode[10], input_index, time, seek, seek_root, blend, filter, sync) }
func (gdClass AnimationNode) SetParameter(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNode[11], name, value) }
func (gdClass AnimationNode) GetParameter(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodAnimationNode[12], name) }

type AnimationNodeAdd2 gdnative.Object
func (AnimationNodeAdd2) class() string { return "AnimationNodeAdd2\000" }

func (gdClass AnimationNodeAdd2) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }


type AnimationNodeAdd3 gdnative.Object
func (AnimationNodeAdd3) class() string { return "AnimationNodeAdd3\000" }

func (gdClass AnimationNodeAdd3) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }


type AnimationNodeAnimationPlayMode int64

const (
	AnimationNodeAnimationPlayModeForward AnimationNodeAnimationPlayMode = 0
	AnimationNodeAnimationPlayModeBackward AnimationNodeAnimationPlayMode = 1
)

type AnimationNodeAnimation gdnative.Object
func (AnimationNodeAnimation) class() string { return "AnimationNodeAnimation\000" }

func (gdClass AnimationNodeAnimation) AnimationRootNode() AnimationRootNode { return AnimationRootNode(gdClass) }

var methodAnimationNodeAnimation [4]gdnative.Method
func (gdClass AnimationNodeAnimation) SetAnimation(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeAnimation[0], name) }
func (gdClass AnimationNodeAnimation) GetAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeAnimation[1]) }
func (gdClass AnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeAnimation[2], mode) }
func (gdClass AnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode { return gdnative.Return[AnimationNodeAnimationPlayMode](gdnative.Object(gdClass), methodAnimationNodeAnimation[3]) }

type AnimationNodeBlend2 gdnative.Object
func (AnimationNodeBlend2) class() string { return "AnimationNodeBlend2\000" }

func (gdClass AnimationNodeBlend2) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }


type AnimationNodeBlend3 gdnative.Object
func (AnimationNodeBlend3) class() string { return "AnimationNodeBlend3\000" }

func (gdClass AnimationNodeBlend3) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }


type AnimationNodeBlendSpace1D gdnative.Object
func (AnimationNodeBlendSpace1D) class() string { return "AnimationNodeBlendSpace1D\000" }

func (gdClass AnimationNodeBlendSpace1D) AnimationRootNode() AnimationRootNode { return AnimationRootNode(gdClass) }

var methodAnimationNodeBlendSpace1D [17]gdnative.Method
func (gdClass AnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos float64, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[0], node, pos, at_index) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointPosition(point int64, pos float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[1], point, pos) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointPosition(point int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[2], point) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointNode(point int64, node AnimationRootNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[3], point, node) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointNode(point int64) AnimationRootNode { return gdnative.Return[AnimationRootNode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[4], point) }
func (gdClass AnimationNodeBlendSpace1D) RemoveBlendPoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[5], point) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[6]) }
func (gdClass AnimationNodeBlendSpace1D) SetMinSpace(min_space float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[7], min_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMinSpace() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[8]) }
func (gdClass AnimationNodeBlendSpace1D) SetMaxSpace(max_space float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[9], max_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMaxSpace() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[10]) }
func (gdClass AnimationNodeBlendSpace1D) SetSnap(snap float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[11], snap) }
func (gdClass AnimationNodeBlendSpace1D) GetSnap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[12]) }
func (gdClass AnimationNodeBlendSpace1D) SetValueLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[13], text) }
func (gdClass AnimationNodeBlendSpace1D) GetValueLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[14]) }
func (gdClass AnimationNodeBlendSpace1D) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[15], enable) }
func (gdClass AnimationNodeBlendSpace1D) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace1D[16]) }

type AnimationNodeBlendSpace2DBlendMode int64

const (
	AnimationNodeBlendSpace2DBlendModeInterpolated AnimationNodeBlendSpace2DBlendMode = 0
	AnimationNodeBlendSpace2DBlendModeDiscrete AnimationNodeBlendSpace2DBlendMode = 1
	AnimationNodeBlendSpace2DBlendModeDiscreteCarry AnimationNodeBlendSpace2DBlendMode = 2
)

type AnimationNodeBlendSpace2D gdnative.Object
func (AnimationNodeBlendSpace2D) class() string { return "AnimationNodeBlendSpace2D\000" }

func (gdClass AnimationNodeBlendSpace2D) AnimationRootNode() AnimationRootNode { return AnimationRootNode(gdClass) }

var methodAnimationNodeBlendSpace2D [27]gdnative.Method
func (gdClass AnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[0], node, pos, at_index) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointPosition(point int64, pos Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[1], point, pos) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointPosition(point int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[2], point) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointNode(point int64, node AnimationRootNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[3], point, node) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointNode(point int64) AnimationRootNode { return gdnative.Return[AnimationRootNode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[4], point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveBlendPoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[5], point) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[6]) }
func (gdClass AnimationNodeBlendSpace2D) AddTriangle(x int64, y int64, z int64, at_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[7], x, y, z, at_index) }
func (gdClass AnimationNodeBlendSpace2D) GetTrianglePoint(triangle int64, point int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[8], triangle, point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveTriangle(triangle int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[9], triangle) }
func (gdClass AnimationNodeBlendSpace2D) GetTriangleCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[10]) }
func (gdClass AnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[11], min_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMinSpace() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[12]) }
func (gdClass AnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[13], max_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMaxSpace() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[14]) }
func (gdClass AnimationNodeBlendSpace2D) SetSnap(snap Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[15], snap) }
func (gdClass AnimationNodeBlendSpace2D) GetSnap() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[16]) }
func (gdClass AnimationNodeBlendSpace2D) SetXLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[17], text) }
func (gdClass AnimationNodeBlendSpace2D) GetXLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[18]) }
func (gdClass AnimationNodeBlendSpace2D) SetYLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[19], text) }
func (gdClass AnimationNodeBlendSpace2D) GetYLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[20]) }
func (gdClass AnimationNodeBlendSpace2D) SetAutoTriangles(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[21], enable) }
func (gdClass AnimationNodeBlendSpace2D) GetAutoTriangles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[22]) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[23], mode) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode { return gdnative.Return[AnimationNodeBlendSpace2DBlendMode](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[24]) }
func (gdClass AnimationNodeBlendSpace2D) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[25], enable) }
func (gdClass AnimationNodeBlendSpace2D) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendSpace2D[26]) }

type AnimationNodeBlendTree gdnative.Object
func (AnimationNodeBlendTree) class() string { return "AnimationNodeBlendTree\000" }

func (gdClass AnimationNodeBlendTree) AnimationRootNode() AnimationRootNode { return AnimationRootNode(gdClass) }

var methodAnimationNodeBlendTree [11]gdnative.Method
func (gdClass AnimationNodeBlendTree) AddNode(name string, node AnimationNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[0], name, node, position) }
func (gdClass AnimationNodeBlendTree) GetNode(name string) AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationNodeBlendTree[1], name) }
func (gdClass AnimationNodeBlendTree) RemoveNode(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[2], name) }
func (gdClass AnimationNodeBlendTree) RenameNode(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[3], name, new_name) }
func (gdClass AnimationNodeBlendTree) HasNode(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeBlendTree[4], name) }
func (gdClass AnimationNodeBlendTree) ConnectNode(input_node string, input_index int64, output_node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[5], input_node, input_index, output_node) }
func (gdClass AnimationNodeBlendTree) DisconnectNode(input_node string, input_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[6], input_node, input_index) }
func (gdClass AnimationNodeBlendTree) SetNodePosition(name string, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[7], name, position) }
func (gdClass AnimationNodeBlendTree) GetNodePosition(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendTree[8], name) }
func (gdClass AnimationNodeBlendTree) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeBlendTree[9], offset) }
func (gdClass AnimationNodeBlendTree) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeBlendTree[10]) }

type AnimationNodeOneShotMixMode int64

const (
	AnimationNodeOneShotMixModeBlend AnimationNodeOneShotMixMode = 0
	AnimationNodeOneShotMixModeAdd AnimationNodeOneShotMixMode = 1
)

type AnimationNodeOneShot gdnative.Object
func (AnimationNodeOneShot) class() string { return "AnimationNodeOneShot\000" }

func (gdClass AnimationNodeOneShot) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }

var methodAnimationNodeOneShot [12]gdnative.Method
func (gdClass AnimationNodeOneShot) SetFadeinTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[0], time) }
func (gdClass AnimationNodeOneShot) GetFadeinTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[1]) }
func (gdClass AnimationNodeOneShot) SetFadeoutTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[2], time) }
func (gdClass AnimationNodeOneShot) GetFadeoutTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[3]) }
func (gdClass AnimationNodeOneShot) SetAutorestart(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[4], enable) }
func (gdClass AnimationNodeOneShot) HasAutorestart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeOneShot[5]) }
func (gdClass AnimationNodeOneShot) SetAutorestartDelay(enable float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[6], enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[7]) }
func (gdClass AnimationNodeOneShot) SetAutorestartRandomDelay(enable float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[8], enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartRandomDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeOneShot[9]) }
func (gdClass AnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeOneShot[10], mode) }
func (gdClass AnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode { return gdnative.Return[AnimationNodeOneShotMixMode](gdnative.Object(gdClass), methodAnimationNodeOneShot[11]) }

type AnimationNodeOutput gdnative.Object
func (AnimationNodeOutput) class() string { return "AnimationNodeOutput\000" }

func (gdClass AnimationNodeOutput) AnimationNode() AnimationNode { return AnimationNode(gdClass) }


type AnimationNodeStateMachine gdnative.Object
func (AnimationNodeStateMachine) class() string { return "AnimationNodeStateMachine\000" }

func (gdClass AnimationNodeStateMachine) AnimationRootNode() AnimationRootNode { return AnimationRootNode(gdClass) }

var methodAnimationNodeStateMachine [19]gdnative.Method
func (gdClass AnimationNodeStateMachine) AddNode(name string, node AnimationNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[0], name, node, position) }
func (gdClass AnimationNodeStateMachine) ReplaceNode(name string, node AnimationNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[1], name, node) }
func (gdClass AnimationNodeStateMachine) GetNode(name string) AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationNodeStateMachine[2], name) }
func (gdClass AnimationNodeStateMachine) RemoveNode(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[3], name) }
func (gdClass AnimationNodeStateMachine) RenameNode(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[4], name, new_name) }
func (gdClass AnimationNodeStateMachine) HasNode(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachine[5], name) }
func (gdClass AnimationNodeStateMachine) GetNodeName(node AnimationNode) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[6], node) }
func (gdClass AnimationNodeStateMachine) SetNodePosition(name string, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[7], name, position) }
func (gdClass AnimationNodeStateMachine) GetNodePosition(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeStateMachine[8], name) }
func (gdClass AnimationNodeStateMachine) HasTransition(from string, to string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachine[9], from, to) }
func (gdClass AnimationNodeStateMachine) AddTransition(from string, to string, transition AnimationNodeStateMachineTransition)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[10], from, to, transition) }
func (gdClass AnimationNodeStateMachine) GetTransition(idx int64) AnimationNodeStateMachineTransition { return gdnative.Return[AnimationNodeStateMachineTransition](gdnative.Object(gdClass), methodAnimationNodeStateMachine[11], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionFrom(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[12], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionTo(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachine[13], idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeStateMachine[14]) }
func (gdClass AnimationNodeStateMachine) RemoveTransitionByIndex(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[15], idx) }
func (gdClass AnimationNodeStateMachine) RemoveTransition(from string, to string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[16], from, to) }
func (gdClass AnimationNodeStateMachine) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachine[17], offset) }
func (gdClass AnimationNodeStateMachine) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAnimationNodeStateMachine[18]) }

type AnimationNodeStateMachinePlayback gdnative.Object
func (AnimationNodeStateMachinePlayback) class() string { return "AnimationNodeStateMachinePlayback\000" }

func (gdClass AnimationNodeStateMachinePlayback) Resource() Resource { return Resource(gdClass) }

var methodAnimationNodeStateMachinePlayback [8]gdnative.Method
func (gdClass AnimationNodeStateMachinePlayback) Travel(to_node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[0], to_node) }
func (gdClass AnimationNodeStateMachinePlayback) Start(node string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[1], node) }
func (gdClass AnimationNodeStateMachinePlayback) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[2]) }
func (gdClass AnimationNodeStateMachinePlayback) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[3]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentNode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[4]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentPlayPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[5]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[6]) }
func (gdClass AnimationNodeStateMachinePlayback) GetTravelPath() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationNodeStateMachinePlayback[7]) }

type AnimationNodeStateMachineTransitionSwitchMode int64

const (
	AnimationNodeStateMachineTransitionSwitchModeImmediate AnimationNodeStateMachineTransitionSwitchMode = 0
	AnimationNodeStateMachineTransitionSwitchModeSync AnimationNodeStateMachineTransitionSwitchMode = 1
	AnimationNodeStateMachineTransitionSwitchModeAtEnd AnimationNodeStateMachineTransitionSwitchMode = 2
)

type AnimationNodeStateMachineTransition gdnative.Object
func (AnimationNodeStateMachineTransition) class() string { return "AnimationNodeStateMachineTransition\000" }

func (gdClass AnimationNodeStateMachineTransition) Resource() Resource { return Resource(gdClass) }

var methodAnimationNodeStateMachineTransition [16]gdnative.Method
func (gdClass AnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[0], mode) }
func (gdClass AnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode { return gdnative.Return[AnimationNodeStateMachineTransitionSwitchMode](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[1]) }
func (gdClass AnimationNodeStateMachineTransition) SetAutoAdvance(auto_advance bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[2], auto_advance) }
func (gdClass AnimationNodeStateMachineTransition) HasAutoAdvance() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[3]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceCondition(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[4], name) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceCondition() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[5]) }
func (gdClass AnimationNodeStateMachineTransition) SetXfadeTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[6], secs) }
func (gdClass AnimationNodeStateMachineTransition) GetXfadeTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[7]) }
func (gdClass AnimationNodeStateMachineTransition) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[8], disabled) }
func (gdClass AnimationNodeStateMachineTransition) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[9]) }
func (gdClass AnimationNodeStateMachineTransition) SetPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[10], priority) }
func (gdClass AnimationNodeStateMachineTransition) GetPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[11]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpression(text string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[12], text) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpression() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[13]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpressionBaseNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[14], path) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpressionBaseNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationNodeStateMachineTransition[15]) }

type AnimationNodeSync gdnative.Object
func (AnimationNodeSync) class() string { return "AnimationNodeSync\000" }

func (gdClass AnimationNodeSync) AnimationNode() AnimationNode { return AnimationNode(gdClass) }

var methodAnimationNodeSync [2]gdnative.Method
func (gdClass AnimationNodeSync) SetUseSync(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeSync[0], enable) }
func (gdClass AnimationNodeSync) IsUsingSync() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeSync[1]) }

type AnimationNodeTimeScale gdnative.Object
func (AnimationNodeTimeScale) class() string { return "AnimationNodeTimeScale\000" }

func (gdClass AnimationNodeTimeScale) AnimationNode() AnimationNode { return AnimationNode(gdClass) }


type AnimationNodeTimeSeek gdnative.Object
func (AnimationNodeTimeSeek) class() string { return "AnimationNodeTimeSeek\000" }

func (gdClass AnimationNodeTimeSeek) AnimationNode() AnimationNode { return AnimationNode(gdClass) }


type AnimationNodeTransition gdnative.Object
func (AnimationNodeTransition) class() string { return "AnimationNodeTransition\000" }

func (gdClass AnimationNodeTransition) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync(gdClass) }

var methodAnimationNodeTransition [10]gdnative.Method
func (gdClass AnimationNodeTransition) SetEnabledInputs(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[0], amount) }
func (gdClass AnimationNodeTransition) GetEnabledInputs() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAnimationNodeTransition[1]) }
func (gdClass AnimationNodeTransition) SetInputAsAutoAdvance(input int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[2], input, enable) }
func (gdClass AnimationNodeTransition) IsInputSetAsAutoAdvance(input int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeTransition[3], input) }
func (gdClass AnimationNodeTransition) SetInputCaption(input int64, caption string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[4], input, caption) }
func (gdClass AnimationNodeTransition) GetInputCaption(input int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationNodeTransition[5], input) }
func (gdClass AnimationNodeTransition) SetCrossFadeTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[6], time) }
func (gdClass AnimationNodeTransition) GetCrossFadeTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationNodeTransition[7]) }
func (gdClass AnimationNodeTransition) SetFromStart(from_start bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationNodeTransition[8], from_start) }
func (gdClass AnimationNodeTransition) IsFromStart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationNodeTransition[9]) }

type AnimationPlayerAnimationProcessCallback int64

const (
	AnimationPlayerAnimationProcessPhysics AnimationPlayerAnimationProcessCallback = 0
	AnimationPlayerAnimationProcessIdle AnimationPlayerAnimationProcessCallback = 1
	AnimationPlayerAnimationProcessManual AnimationPlayerAnimationProcessCallback = 2
)

type AnimationPlayerAnimationMethodCallMode int64

const (
	AnimationPlayerAnimationMethodCallDeferred AnimationPlayerAnimationMethodCallMode = 0
	AnimationPlayerAnimationMethodCallImmediate AnimationPlayerAnimationMethodCallMode = 1
)

type AnimationPlayer gdnative.Object
func (AnimationPlayer) class() string { return "AnimationPlayer\000" }

func (gdClass AnimationPlayer) Node() Node { return Node(gdClass) }

var methodAnimationPlayer [50]gdnative.Method
func (gdClass AnimationPlayer) AddAnimationLibrary(name string, library AnimationLibrary) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAnimationPlayer[0], name, library) }
func (gdClass AnimationPlayer) RemoveAnimationLibrary(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[1], name) }
func (gdClass AnimationPlayer) RenameAnimationLibrary(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[2], name, newname) }
func (gdClass AnimationPlayer) HasAnimationLibrary(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[3], name) }
func (gdClass AnimationPlayer) GetAnimationLibrary(name string) AnimationLibrary { return gdnative.Return[AnimationLibrary](gdnative.Object(gdClass), methodAnimationPlayer[4], name) }
func (gdClass AnimationPlayer) GetAnimationLibraryList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAnimationPlayer[5]) }
func (gdClass AnimationPlayer) HasAnimation(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[6], name) }
func (gdClass AnimationPlayer) GetAnimation(name string) Animation { return gdnative.Return[Animation](gdnative.Object(gdClass), methodAnimationPlayer[7], name) }
func (gdClass AnimationPlayer) GetAnimationList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationPlayer[8]) }
func (gdClass AnimationPlayer) AnimationSetNext(anim_from string, anim_to string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[9], anim_from, anim_to) }
func (gdClass AnimationPlayer) AnimationGetNext(anim_from string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[10], anim_from) }
func (gdClass AnimationPlayer) SetBlendTime(anim_from string, anim_to string, sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[11], anim_from, anim_to, sec) }
func (gdClass AnimationPlayer) GetBlendTime(anim_from string, anim_to string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[12], anim_from, anim_to) }
func (gdClass AnimationPlayer) SetDefaultBlendTime(sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[13], sec) }
func (gdClass AnimationPlayer) GetDefaultBlendTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[14]) }
func (gdClass AnimationPlayer) Play(name string, custom_blend float64, custom_speed float64, from_end bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[15], name, custom_blend, custom_speed, from_end) }
func (gdClass AnimationPlayer) PlayBackwards(name string, custom_blend float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[16], name, custom_blend) }
func (gdClass AnimationPlayer) Stop(reset bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[17], reset) }
func (gdClass AnimationPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[18]) }
func (gdClass AnimationPlayer) SetCurrentAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[19], anim) }
func (gdClass AnimationPlayer) GetCurrentAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[20]) }
func (gdClass AnimationPlayer) SetAssignedAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[21], anim) }
func (gdClass AnimationPlayer) GetAssignedAnimation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[22]) }
func (gdClass AnimationPlayer) Queue(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[23], name) }
func (gdClass AnimationPlayer) GetQueue() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodAnimationPlayer[24]) }
func (gdClass AnimationPlayer) ClearQueue()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[25]) }
func (gdClass AnimationPlayer) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[26], active) }
func (gdClass AnimationPlayer) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[27]) }
func (gdClass AnimationPlayer) SetSpeedScale(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[28], speed) }
func (gdClass AnimationPlayer) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[29]) }
func (gdClass AnimationPlayer) GetPlayingSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[30]) }
func (gdClass AnimationPlayer) SetAutoplay(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[31], name) }
func (gdClass AnimationPlayer) GetAutoplay() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[32]) }
func (gdClass AnimationPlayer) SetResetOnSaveEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[33], enabled) }
func (gdClass AnimationPlayer) IsResetOnSaveEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[34]) }
func (gdClass AnimationPlayer) SetRoot(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[35], path) }
func (gdClass AnimationPlayer) GetRoot() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationPlayer[36]) }
func (gdClass AnimationPlayer) FindAnimation(animation Animation) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[37], animation) }
func (gdClass AnimationPlayer) FindAnimationLibrary(animation Animation) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAnimationPlayer[38], animation) }
func (gdClass AnimationPlayer) ClearCaches()  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[39]) }
func (gdClass AnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[40], mode) }
func (gdClass AnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback { return gdnative.Return[AnimationPlayerAnimationProcessCallback](gdnative.Object(gdClass), methodAnimationPlayer[41]) }
func (gdClass AnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[42], mode) }
func (gdClass AnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode { return gdnative.Return[AnimationPlayerAnimationMethodCallMode](gdnative.Object(gdClass), methodAnimationPlayer[43]) }
func (gdClass AnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[44], enabled) }
func (gdClass AnimationPlayer) IsMovieQuitOnFinishEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationPlayer[45]) }
func (gdClass AnimationPlayer) GetCurrentAnimationPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[46]) }
func (gdClass AnimationPlayer) GetCurrentAnimationLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAnimationPlayer[47]) }
func (gdClass AnimationPlayer) Seek(seconds float64, update bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[48], seconds, update) }
func (gdClass AnimationPlayer) Advance(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationPlayer[49], delta) }

type AnimationRootNode gdnative.Object
func (AnimationRootNode) class() string { return "AnimationRootNode\000" }

func (gdClass AnimationRootNode) AnimationNode() AnimationNode { return AnimationNode(gdClass) }


type AnimationTrackEditPlugin gdnative.Object
func (AnimationTrackEditPlugin) class() string { return "AnimationTrackEditPlugin\000" }

func (gdClass AnimationTrackEditPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }


type AnimationTreeAnimationProcessCallback int64

const (
	AnimationTreeAnimationProcessPhysics AnimationTreeAnimationProcessCallback = 0
	AnimationTreeAnimationProcessIdle AnimationTreeAnimationProcessCallback = 1
	AnimationTreeAnimationProcessManual AnimationTreeAnimationProcessCallback = 2
)

type AnimationTree gdnative.Object
func (AnimationTree) class() string { return "AnimationTree\000" }

func (gdClass AnimationTree) Node() Node { return Node(gdClass) }

var methodAnimationTree [15]gdnative.Method
func (gdClass AnimationTree) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[0], active) }
func (gdClass AnimationTree) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAnimationTree[1]) }
func (gdClass AnimationTree) SetTreeRoot(root AnimationNode)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[2], root) }
func (gdClass AnimationTree) GetTreeRoot() AnimationNode { return gdnative.Return[AnimationNode](gdnative.Object(gdClass), methodAnimationTree[3]) }
func (gdClass AnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[4], mode) }
func (gdClass AnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback { return gdnative.Return[AnimationTreeAnimationProcessCallback](gdnative.Object(gdClass), methodAnimationTree[5]) }
func (gdClass AnimationTree) SetAnimationPlayer(root NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[6], root) }
func (gdClass AnimationTree) GetAnimationPlayer() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[7]) }
func (gdClass AnimationTree) SetAdvanceExpressionBaseNode(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[8], node) }
func (gdClass AnimationTree) GetAdvanceExpressionBaseNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[9]) }
func (gdClass AnimationTree) SetRootMotionTrack(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[10], path) }
func (gdClass AnimationTree) GetRootMotionTrack() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodAnimationTree[11]) }
func (gdClass AnimationTree) GetRootMotionTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodAnimationTree[12]) }
func (gdClass AnimationTree) RenameParameter(old_name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[13], old_name, new_name) }
func (gdClass AnimationTree) Advance(delta float64)  { gdnative.Call(gdnative.Object(gdClass), methodAnimationTree[14], delta) }

type Area2DSpaceOverride int64

const (
	Area2DSpaceOverrideDisabled Area2DSpaceOverride = 0
	Area2DSpaceOverrideCombine Area2DSpaceOverride = 1
	Area2DSpaceOverrideCombineReplace Area2DSpaceOverride = 2
	Area2DSpaceOverrideReplace Area2DSpaceOverride = 3
	Area2DSpaceOverrideReplaceCombine Area2DSpaceOverride = 4
)

type Area2D gdnative.Object
func (Area2D) class() string { return "Area2D\000" }

func (gdClass Area2D) CollisionObject2D() CollisionObject2D { return CollisionObject2D(gdClass) }

var methodArea2D [34]gdnative.Method
func (gdClass Area2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[0], space_override_mode) }
func (gdClass Area2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[1]) }
func (gdClass Area2D) SetGravityIsPoint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[2], enable) }
func (gdClass Area2D) IsGravityAPoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[3]) }
func (gdClass Area2D) SetGravityPointDistanceScale(distance_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[4], distance_scale) }
func (gdClass Area2D) GetGravityPointDistanceScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[5]) }
func (gdClass Area2D) SetGravityPointCenter(center Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[6], center) }
func (gdClass Area2D) GetGravityPointCenter() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodArea2D[7]) }
func (gdClass Area2D) SetGravityDirection(direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[8], direction) }
func (gdClass Area2D) GetGravityDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodArea2D[9]) }
func (gdClass Area2D) SetGravity(gravity float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[10], gravity) }
func (gdClass Area2D) GetGravity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[11]) }
func (gdClass Area2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[12], space_override_mode) }
func (gdClass Area2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[13]) }
func (gdClass Area2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[14], space_override_mode) }
func (gdClass Area2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride { return gdnative.Return[Area2DSpaceOverride](gdnative.Object(gdClass), methodArea2D[15]) }
func (gdClass Area2D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[16], linear_damp) }
func (gdClass Area2D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[17]) }
func (gdClass Area2D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[18], angular_damp) }
func (gdClass Area2D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[19]) }
func (gdClass Area2D) SetPriority(priority float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[20], priority) }
func (gdClass Area2D) GetPriority() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea2D[21]) }
func (gdClass Area2D) SetMonitoring(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[22], enable) }
func (gdClass Area2D) IsMonitoring() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[23]) }
func (gdClass Area2D) SetMonitorable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[24], enable) }
func (gdClass Area2D) IsMonitorable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[25]) }
func (gdClass Area2D) GetOverlappingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea2D[26]) }
func (gdClass Area2D) GetOverlappingAreas() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea2D[27]) }
func (gdClass Area2D) OverlapsBody(body Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[28], body) }
func (gdClass Area2D) OverlapsArea(area Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[29], area) }
func (gdClass Area2D) SetAudioBusName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[30], name) }
func (gdClass Area2D) GetAudioBusName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea2D[31]) }
func (gdClass Area2D) SetAudioBusOverride(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea2D[32], enable) }
func (gdClass Area2D) IsOverridingAudioBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea2D[33]) }

type Area3DSpaceOverride int64

const (
	Area3DSpaceOverrideDisabled Area3DSpaceOverride = 0
	Area3DSpaceOverrideCombine Area3DSpaceOverride = 1
	Area3DSpaceOverrideCombineReplace Area3DSpaceOverride = 2
	Area3DSpaceOverrideReplace Area3DSpaceOverride = 3
	Area3DSpaceOverrideReplaceCombine Area3DSpaceOverride = 4
)

type Area3D gdnative.Object
func (Area3D) class() string { return "Area3D\000" }

func (gdClass Area3D) CollisionObject3D() CollisionObject3D { return CollisionObject3D(gdClass) }

var methodArea3D [48]gdnative.Method
func (gdClass Area3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[0], space_override_mode) }
func (gdClass Area3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[1]) }
func (gdClass Area3D) SetGravityIsPoint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[2], enable) }
func (gdClass Area3D) IsGravityAPoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[3]) }
func (gdClass Area3D) SetGravityPointDistanceScale(distance_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[4], distance_scale) }
func (gdClass Area3D) GetGravityPointDistanceScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[5]) }
func (gdClass Area3D) SetGravityPointCenter(center Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[6], center) }
func (gdClass Area3D) GetGravityPointCenter() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodArea3D[7]) }
func (gdClass Area3D) SetGravityDirection(direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[8], direction) }
func (gdClass Area3D) GetGravityDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodArea3D[9]) }
func (gdClass Area3D) SetGravity(gravity float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[10], gravity) }
func (gdClass Area3D) GetGravity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[11]) }
func (gdClass Area3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[12], space_override_mode) }
func (gdClass Area3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[13]) }
func (gdClass Area3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[14], space_override_mode) }
func (gdClass Area3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride { return gdnative.Return[Area3DSpaceOverride](gdnative.Object(gdClass), methodArea3D[15]) }
func (gdClass Area3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[16], angular_damp) }
func (gdClass Area3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[17]) }
func (gdClass Area3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[18], linear_damp) }
func (gdClass Area3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[19]) }
func (gdClass Area3D) SetPriority(priority float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[20], priority) }
func (gdClass Area3D) GetPriority() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[21]) }
func (gdClass Area3D) SetWindForceMagnitude(wind_force_magnitude float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[22], wind_force_magnitude) }
func (gdClass Area3D) GetWindForceMagnitude() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[23]) }
func (gdClass Area3D) SetWindAttenuationFactor(wind_attenuation_factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[24], wind_attenuation_factor) }
func (gdClass Area3D) GetWindAttenuationFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[25]) }
func (gdClass Area3D) SetWindSourcePath(wind_source_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[26], wind_source_path) }
func (gdClass Area3D) GetWindSourcePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodArea3D[27]) }
func (gdClass Area3D) SetMonitorable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[28], enable) }
func (gdClass Area3D) IsMonitorable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[29]) }
func (gdClass Area3D) SetMonitoring(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[30], enable) }
func (gdClass Area3D) IsMonitoring() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[31]) }
func (gdClass Area3D) GetOverlappingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea3D[32]) }
func (gdClass Area3D) GetOverlappingAreas() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodArea3D[33]) }
func (gdClass Area3D) OverlapsBody(body Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[34], body) }
func (gdClass Area3D) OverlapsArea(area Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[35], area) }
func (gdClass Area3D) SetAudioBusOverride(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[36], enable) }
func (gdClass Area3D) IsOverridingAudioBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[37]) }
func (gdClass Area3D) SetAudioBusName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[38], name) }
func (gdClass Area3D) GetAudioBusName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea3D[39]) }
func (gdClass Area3D) SetUseReverbBus(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[40], enable) }
func (gdClass Area3D) IsUsingReverbBus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodArea3D[41]) }
func (gdClass Area3D) SetReverbBus(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[42], name) }
func (gdClass Area3D) GetReverbBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodArea3D[43]) }
func (gdClass Area3D) SetReverbAmount(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[44], amount) }
func (gdClass Area3D) GetReverbAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[45]) }
func (gdClass Area3D) SetReverbUniformity(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodArea3D[46], amount) }
func (gdClass Area3D) GetReverbUniformity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodArea3D[47]) }

type ArrayMesh gdnative.Object
func (ArrayMesh) class() string { return "ArrayMesh\000" }

func (gdClass ArrayMesh) Mesh() Mesh { return Mesh(gdClass) }

var methodArrayMesh [25]gdnative.Method
func (gdClass ArrayMesh) AddBlendShape(name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[0], name) }
func (gdClass ArrayMesh) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[1]) }
func (gdClass ArrayMesh) GetBlendShapeName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodArrayMesh[2], index) }
func (gdClass ArrayMesh) SetBlendShapeName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[3], index, name) }
func (gdClass ArrayMesh) ClearBlendShapes()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[4]) }
func (gdClass ArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[5], mode) }
func (gdClass ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode { return gdnative.Return[MeshBlendShapeMode](gdnative.Object(gdClass), methodArrayMesh[6]) }
func (gdClass ArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[7], primitive, arrays, blend_shapes, lods, compress_flags) }
func (gdClass ArrayMesh) ClearSurfaces()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[8]) }
func (gdClass ArrayMesh) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[9], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[10], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[11], surf_idx, offset, data) }
func (gdClass ArrayMesh) SurfaceGetArrayLen(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[12], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetArrayIndexLen(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[13], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetFormat(surf_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[14], surf_idx) }
func (gdClass ArrayMesh) SurfaceGetPrimitiveType(surf_idx int64) MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodArrayMesh[15], surf_idx) }
func (gdClass ArrayMesh) SurfaceFindByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodArrayMesh[16], name) }
func (gdClass ArrayMesh) SurfaceSetName(surf_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[17], surf_idx, name) }
func (gdClass ArrayMesh) SurfaceGetName(surf_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodArrayMesh[18], surf_idx) }
func (gdClass ArrayMesh) RegenNormalMaps()  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[19]) }
func (gdClass ArrayMesh) LightmapUnwrap(transform Transform3D, texel_size float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodArrayMesh[20], transform, texel_size) }
func (gdClass ArrayMesh) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[21], aabb) }
func (gdClass ArrayMesh) GetCustomAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodArrayMesh[22]) }
func (gdClass ArrayMesh) SetShadowMesh(mesh ArrayMesh)  { gdnative.Call(gdnative.Object(gdClass), methodArrayMesh[23], mesh) }
func (gdClass ArrayMesh) GetShadowMesh() ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodArrayMesh[24]) }

type ArrayOccluder3D gdnative.Object
func (ArrayOccluder3D) class() string { return "ArrayOccluder3D\000" }

func (gdClass ArrayOccluder3D) Occluder3D() Occluder3D { return Occluder3D(gdClass) }

var methodArrayOccluder3D [3]gdnative.Method
func (gdClass ArrayOccluder3D) SetArrays(vertices []Vector3, indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[0], vertices, indices) }
func (gdClass ArrayOccluder3D) SetVertices(vertices []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[1], vertices) }
func (gdClass ArrayOccluder3D) SetIndices(indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodArrayOccluder3D[2], indices) }

type AspectRatioContainerStretchMode int64

const (
	AspectRatioContainerStretchWidthControlsHeight AspectRatioContainerStretchMode = 0
	AspectRatioContainerStretchHeightControlsWidth AspectRatioContainerStretchMode = 1
	AspectRatioContainerStretchFit AspectRatioContainerStretchMode = 2
	AspectRatioContainerStretchCover AspectRatioContainerStretchMode = 3
)

type AspectRatioContainerAlignmentMode int64

const (
	AspectRatioContainerAlignmentBegin AspectRatioContainerAlignmentMode = 0
	AspectRatioContainerAlignmentCenter AspectRatioContainerAlignmentMode = 1
	AspectRatioContainerAlignmentEnd AspectRatioContainerAlignmentMode = 2
)

type AspectRatioContainer gdnative.Object
func (AspectRatioContainer) class() string { return "AspectRatioContainer\000" }

func (gdClass AspectRatioContainer) Container() Container { return Container(gdClass) }

var methodAspectRatioContainer [8]gdnative.Method
func (gdClass AspectRatioContainer) SetRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[0], ratio) }
func (gdClass AspectRatioContainer) GetRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAspectRatioContainer[1]) }
func (gdClass AspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[2], stretch_mode) }
func (gdClass AspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode { return gdnative.Return[AspectRatioContainerStretchMode](gdnative.Object(gdClass), methodAspectRatioContainer[3]) }
func (gdClass AspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[4], alignment_horizontal) }
func (gdClass AspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode { return gdnative.Return[AspectRatioContainerAlignmentMode](gdnative.Object(gdClass), methodAspectRatioContainer[5]) }
func (gdClass AspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodAspectRatioContainer[6], alignment_vertical) }
func (gdClass AspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode { return gdnative.Return[AspectRatioContainerAlignmentMode](gdnative.Object(gdClass), methodAspectRatioContainer[7]) }

type AtlasTexture gdnative.Object
func (AtlasTexture) class() string { return "AtlasTexture\000" }

func (gdClass AtlasTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodAtlasTexture [8]gdnative.Method
func (gdClass AtlasTexture) SetAtlas(atlas Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[0], atlas) }
func (gdClass AtlasTexture) GetAtlas() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodAtlasTexture[1]) }
func (gdClass AtlasTexture) SetRegion(region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[2], region) }
func (gdClass AtlasTexture) GetRegion() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodAtlasTexture[3]) }
func (gdClass AtlasTexture) SetMargin(margin Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[4], margin) }
func (gdClass AtlasTexture) GetMargin() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodAtlasTexture[5]) }
func (gdClass AtlasTexture) SetFilterClip(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAtlasTexture[6], enable) }
func (gdClass AtlasTexture) HasFilterClip() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAtlasTexture[7]) }

type AudioBusLayout gdnative.Object
func (AudioBusLayout) class() string { return "AudioBusLayout\000" }

func (gdClass AudioBusLayout) Resource() Resource { return Resource(gdClass) }


type AudioEffect gdnative.Object
func (AudioEffect) class() string { return "AudioEffect\000" }

func (gdClass AudioEffect) Resource() Resource { return Resource(gdClass) }

func (gdClass AudioEffect) virtual(val any, name string) any {	switch name {
	case "_instantiate":
		i, ok := val.(interface{ Instantiate() AudioEffectInstance })
		if ok {
			return i.Instantiate
		}
	}
	return nil
}

type AudioEffectAmplify gdnative.Object
func (AudioEffectAmplify) class() string { return "AudioEffectAmplify\000" }

func (gdClass AudioEffectAmplify) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectAmplify [2]gdnative.Method
func (gdClass AudioEffectAmplify) SetVolumeDb(volume float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectAmplify[0], volume) }
func (gdClass AudioEffectAmplify) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectAmplify[1]) }

type AudioEffectBandLimitFilter gdnative.Object
func (AudioEffectBandLimitFilter) class() string { return "AudioEffectBandLimitFilter\000" }

func (gdClass AudioEffectBandLimitFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectBandPassFilter gdnative.Object
func (AudioEffectBandPassFilter) class() string { return "AudioEffectBandPassFilter\000" }

func (gdClass AudioEffectBandPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectCapture gdnative.Object
func (AudioEffectCapture) class() string { return "AudioEffectCapture\000" }

func (gdClass AudioEffectCapture) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectCapture [9]gdnative.Method
func (gdClass AudioEffectCapture) CanGetBuffer(frames int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectCapture[0], frames) }
func (gdClass AudioEffectCapture) GetBuffer(frames int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodAudioEffectCapture[1], frames) }
func (gdClass AudioEffectCapture) ClearBuffer()  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCapture[2]) }
func (gdClass AudioEffectCapture) SetBufferLength(buffer_length_seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCapture[3], buffer_length_seconds) }
func (gdClass AudioEffectCapture) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCapture[4]) }
func (gdClass AudioEffectCapture) GetFramesAvailable() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[5]) }
func (gdClass AudioEffectCapture) GetDiscardedFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[6]) }
func (gdClass AudioEffectCapture) GetBufferLengthFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[7]) }
func (gdClass AudioEffectCapture) GetPushedFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectCapture[8]) }

type AudioEffectChorus gdnative.Object
func (AudioEffectChorus) class() string { return "AudioEffectChorus\000" }

func (gdClass AudioEffectChorus) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectChorus [18]gdnative.Method
func (gdClass AudioEffectChorus) SetVoiceCount(voices int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[0], voices) }
func (gdClass AudioEffectChorus) GetVoiceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectChorus[1]) }
func (gdClass AudioEffectChorus) SetVoiceDelayMs(voice_idx int64, delay_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[2], voice_idx, delay_ms) }
func (gdClass AudioEffectChorus) GetVoiceDelayMs(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[3], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceRateHz(voice_idx int64, rate_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[4], voice_idx, rate_hz) }
func (gdClass AudioEffectChorus) GetVoiceRateHz(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[5], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceDepthMs(voice_idx int64, depth_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[6], voice_idx, depth_ms) }
func (gdClass AudioEffectChorus) GetVoiceDepthMs(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[7], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceLevelDb(voice_idx int64, level_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[8], voice_idx, level_db) }
func (gdClass AudioEffectChorus) GetVoiceLevelDb(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[9], voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceCutoffHz(voice_idx int64, cutoff_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[10], voice_idx, cutoff_hz) }
func (gdClass AudioEffectChorus) GetVoiceCutoffHz(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[11], voice_idx) }
func (gdClass AudioEffectChorus) SetVoicePan(voice_idx int64, pan float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[12], voice_idx, pan) }
func (gdClass AudioEffectChorus) GetVoicePan(voice_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[13], voice_idx) }
func (gdClass AudioEffectChorus) SetWet(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[14], amount) }
func (gdClass AudioEffectChorus) GetWet() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[15]) }
func (gdClass AudioEffectChorus) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectChorus[16], amount) }
func (gdClass AudioEffectChorus) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectChorus[17]) }

type AudioEffectCompressor gdnative.Object
func (AudioEffectCompressor) class() string { return "AudioEffectCompressor\000" }

func (gdClass AudioEffectCompressor) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectCompressor [14]gdnative.Method
func (gdClass AudioEffectCompressor) SetThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[0], threshold) }
func (gdClass AudioEffectCompressor) GetThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[1]) }
func (gdClass AudioEffectCompressor) SetRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[2], ratio) }
func (gdClass AudioEffectCompressor) GetRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[3]) }
func (gdClass AudioEffectCompressor) SetGain(gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[4], gain) }
func (gdClass AudioEffectCompressor) GetGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[5]) }
func (gdClass AudioEffectCompressor) SetAttackUs(attack_us float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[6], attack_us) }
func (gdClass AudioEffectCompressor) GetAttackUs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[7]) }
func (gdClass AudioEffectCompressor) SetReleaseMs(release_ms float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[8], release_ms) }
func (gdClass AudioEffectCompressor) GetReleaseMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[9]) }
func (gdClass AudioEffectCompressor) SetMix(mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[10], mix) }
func (gdClass AudioEffectCompressor) GetMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectCompressor[11]) }
func (gdClass AudioEffectCompressor) SetSidechain(sidechain string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectCompressor[12], sidechain) }
func (gdClass AudioEffectCompressor) GetSidechain() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioEffectCompressor[13]) }

type AudioEffectDelay gdnative.Object
func (AudioEffectDelay) class() string { return "AudioEffectDelay\000" }

func (gdClass AudioEffectDelay) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectDelay [26]gdnative.Method
func (gdClass AudioEffectDelay) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[0], amount) }
func (gdClass AudioEffectDelay) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[1]) }
func (gdClass AudioEffectDelay) SetTap1Active(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[2], amount) }
func (gdClass AudioEffectDelay) IsTap1Active() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[3]) }
func (gdClass AudioEffectDelay) SetTap1DelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[4], amount) }
func (gdClass AudioEffectDelay) GetTap1DelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[5]) }
func (gdClass AudioEffectDelay) SetTap1LevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[6], amount) }
func (gdClass AudioEffectDelay) GetTap1LevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[7]) }
func (gdClass AudioEffectDelay) SetTap1Pan(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[8], amount) }
func (gdClass AudioEffectDelay) GetTap1Pan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[9]) }
func (gdClass AudioEffectDelay) SetTap2Active(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[10], amount) }
func (gdClass AudioEffectDelay) IsTap2Active() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[11]) }
func (gdClass AudioEffectDelay) SetTap2DelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[12], amount) }
func (gdClass AudioEffectDelay) GetTap2DelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[13]) }
func (gdClass AudioEffectDelay) SetTap2LevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[14], amount) }
func (gdClass AudioEffectDelay) GetTap2LevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[15]) }
func (gdClass AudioEffectDelay) SetTap2Pan(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[16], amount) }
func (gdClass AudioEffectDelay) GetTap2Pan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[17]) }
func (gdClass AudioEffectDelay) SetFeedbackActive(amount bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[18], amount) }
func (gdClass AudioEffectDelay) IsFeedbackActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectDelay[19]) }
func (gdClass AudioEffectDelay) SetFeedbackDelayMs(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[20], amount) }
func (gdClass AudioEffectDelay) GetFeedbackDelayMs() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[21]) }
func (gdClass AudioEffectDelay) SetFeedbackLevelDb(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[22], amount) }
func (gdClass AudioEffectDelay) GetFeedbackLevelDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[23]) }
func (gdClass AudioEffectDelay) SetFeedbackLowpass(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDelay[24], amount) }
func (gdClass AudioEffectDelay) GetFeedbackLowpass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDelay[25]) }

type AudioEffectDistortionMode int64

const (
	AudioEffectDistortionModeClip AudioEffectDistortionMode = 0
	AudioEffectDistortionModeAtan AudioEffectDistortionMode = 1
	AudioEffectDistortionModeLofi AudioEffectDistortionMode = 2
	AudioEffectDistortionModeOverdrive AudioEffectDistortionMode = 3
	AudioEffectDistortionModeWaveshape AudioEffectDistortionMode = 4
)

type AudioEffectDistortion gdnative.Object
func (AudioEffectDistortion) class() string { return "AudioEffectDistortion\000" }

func (gdClass AudioEffectDistortion) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectDistortion [10]gdnative.Method
func (gdClass AudioEffectDistortion) SetMode(mode AudioEffectDistortionMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[0], mode) }
func (gdClass AudioEffectDistortion) GetMode() AudioEffectDistortionMode { return gdnative.Return[AudioEffectDistortionMode](gdnative.Object(gdClass), methodAudioEffectDistortion[1]) }
func (gdClass AudioEffectDistortion) SetPreGain(pre_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[2], pre_gain) }
func (gdClass AudioEffectDistortion) GetPreGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[3]) }
func (gdClass AudioEffectDistortion) SetKeepHfHz(keep_hf_hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[4], keep_hf_hz) }
func (gdClass AudioEffectDistortion) GetKeepHfHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[5]) }
func (gdClass AudioEffectDistortion) SetDrive(drive float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[6], drive) }
func (gdClass AudioEffectDistortion) GetDrive() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[7]) }
func (gdClass AudioEffectDistortion) SetPostGain(post_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectDistortion[8], post_gain) }
func (gdClass AudioEffectDistortion) GetPostGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectDistortion[9]) }

type AudioEffectEQ gdnative.Object
func (AudioEffectEQ) class() string { return "AudioEffectEQ\000" }

func (gdClass AudioEffectEQ) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectEQ [3]gdnative.Method
func (gdClass AudioEffectEQ) SetBandGainDb(band_idx int64, volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectEQ[0], band_idx, volume_db) }
func (gdClass AudioEffectEQ) GetBandGainDb(band_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectEQ[1], band_idx) }
func (gdClass AudioEffectEQ) GetBandCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectEQ[2]) }

type AudioEffectEQ10 gdnative.Object
func (AudioEffectEQ10) class() string { return "AudioEffectEQ10\000" }

func (gdClass AudioEffectEQ10) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ(gdClass) }


type AudioEffectEQ21 gdnative.Object
func (AudioEffectEQ21) class() string { return "AudioEffectEQ21\000" }

func (gdClass AudioEffectEQ21) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ(gdClass) }


type AudioEffectEQ6 gdnative.Object
func (AudioEffectEQ6) class() string { return "AudioEffectEQ6\000" }

func (gdClass AudioEffectEQ6) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ(gdClass) }


type AudioEffectFilterFilterDB int64

const (
	AudioEffectFilterFilter6db AudioEffectFilterFilterDB = 0
	AudioEffectFilterFilter12db AudioEffectFilterFilterDB = 1
	AudioEffectFilterFilter18db AudioEffectFilterFilterDB = 2
	AudioEffectFilterFilter24db AudioEffectFilterFilterDB = 3
)

type AudioEffectFilter gdnative.Object
func (AudioEffectFilter) class() string { return "AudioEffectFilter\000" }

func (gdClass AudioEffectFilter) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectFilter [8]gdnative.Method
func (gdClass AudioEffectFilter) SetCutoff(freq float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[0], freq) }
func (gdClass AudioEffectFilter) GetCutoff() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[1]) }
func (gdClass AudioEffectFilter) SetResonance(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[2], amount) }
func (gdClass AudioEffectFilter) GetResonance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[3]) }
func (gdClass AudioEffectFilter) SetGain(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[4], amount) }
func (gdClass AudioEffectFilter) GetGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectFilter[5]) }
func (gdClass AudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectFilter[6], amount) }
func (gdClass AudioEffectFilter) GetDb() AudioEffectFilterFilterDB { return gdnative.Return[AudioEffectFilterFilterDB](gdnative.Object(gdClass), methodAudioEffectFilter[7]) }

type AudioEffectHighPassFilter gdnative.Object
func (AudioEffectHighPassFilter) class() string { return "AudioEffectHighPassFilter\000" }

func (gdClass AudioEffectHighPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectHighShelfFilter gdnative.Object
func (AudioEffectHighShelfFilter) class() string { return "AudioEffectHighShelfFilter\000" }

func (gdClass AudioEffectHighShelfFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectInstance gdnative.Object
func (AudioEffectInstance) class() string { return "AudioEffectInstance\000" }

func (gdClass AudioEffectInstance) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass AudioEffectInstance) virtual(val any, name string) any {	switch name {
	case "_process":
		i, ok := val.(interface{ Process(src_buffer []byte, dst_buffer *AudioFrame, frame_count int64)  })
		if ok {
			return i.Process
		}
	case "_process_silence":
		i, ok := val.(interface{ ProcessSilence() bool })
		if ok {
			return i.ProcessSilence
		}
	}
	return nil
}

type AudioEffectLimiter gdnative.Object
func (AudioEffectLimiter) class() string { return "AudioEffectLimiter\000" }

func (gdClass AudioEffectLimiter) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectLimiter [8]gdnative.Method
func (gdClass AudioEffectLimiter) SetCeilingDb(ceiling float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[0], ceiling) }
func (gdClass AudioEffectLimiter) GetCeilingDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[1]) }
func (gdClass AudioEffectLimiter) SetThresholdDb(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[2], threshold) }
func (gdClass AudioEffectLimiter) GetThresholdDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[3]) }
func (gdClass AudioEffectLimiter) SetSoftClipDb(soft_clip float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[4], soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[5]) }
func (gdClass AudioEffectLimiter) SetSoftClipRatio(soft_clip float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectLimiter[6], soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectLimiter[7]) }

type AudioEffectLowPassFilter gdnative.Object
func (AudioEffectLowPassFilter) class() string { return "AudioEffectLowPassFilter\000" }

func (gdClass AudioEffectLowPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectLowShelfFilter gdnative.Object
func (AudioEffectLowShelfFilter) class() string { return "AudioEffectLowShelfFilter\000" }

func (gdClass AudioEffectLowShelfFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectNotchFilter gdnative.Object
func (AudioEffectNotchFilter) class() string { return "AudioEffectNotchFilter\000" }

func (gdClass AudioEffectNotchFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter(gdClass) }


type AudioEffectPanner gdnative.Object
func (AudioEffectPanner) class() string { return "AudioEffectPanner\000" }

func (gdClass AudioEffectPanner) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectPanner [2]gdnative.Method
func (gdClass AudioEffectPanner) SetPan(cpanume float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPanner[0], cpanume) }
func (gdClass AudioEffectPanner) GetPan() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPanner[1]) }

type AudioEffectPhaser gdnative.Object
func (AudioEffectPhaser) class() string { return "AudioEffectPhaser\000" }

func (gdClass AudioEffectPhaser) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectPhaser [10]gdnative.Method
func (gdClass AudioEffectPhaser) SetRangeMinHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[0], hz) }
func (gdClass AudioEffectPhaser) GetRangeMinHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[1]) }
func (gdClass AudioEffectPhaser) SetRangeMaxHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[2], hz) }
func (gdClass AudioEffectPhaser) GetRangeMaxHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[3]) }
func (gdClass AudioEffectPhaser) SetRateHz(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[4], hz) }
func (gdClass AudioEffectPhaser) GetRateHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[5]) }
func (gdClass AudioEffectPhaser) SetFeedback(fbk float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[6], fbk) }
func (gdClass AudioEffectPhaser) GetFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[7]) }
func (gdClass AudioEffectPhaser) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPhaser[8], depth) }
func (gdClass AudioEffectPhaser) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPhaser[9]) }

type AudioEffectPitchShiftFFTSize int64

const (
	AudioEffectPitchShiftFftSize256 AudioEffectPitchShiftFFTSize = 0
	AudioEffectPitchShiftFftSize512 AudioEffectPitchShiftFFTSize = 1
	AudioEffectPitchShiftFftSize1024 AudioEffectPitchShiftFFTSize = 2
	AudioEffectPitchShiftFftSize2048 AudioEffectPitchShiftFFTSize = 3
	AudioEffectPitchShiftFftSize4096 AudioEffectPitchShiftFFTSize = 4
	AudioEffectPitchShiftFftSizeMax AudioEffectPitchShiftFFTSize = 5
)

type AudioEffectPitchShift gdnative.Object
func (AudioEffectPitchShift) class() string { return "AudioEffectPitchShift\000" }

func (gdClass AudioEffectPitchShift) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectPitchShift [6]gdnative.Method
func (gdClass AudioEffectPitchShift) SetPitchScale(rate float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[0], rate) }
func (gdClass AudioEffectPitchShift) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectPitchShift[1]) }
func (gdClass AudioEffectPitchShift) SetOversampling(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[2], amount) }
func (gdClass AudioEffectPitchShift) GetOversampling() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioEffectPitchShift[3]) }
func (gdClass AudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectPitchShift[4], size) }
func (gdClass AudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize { return gdnative.Return[AudioEffectPitchShiftFFTSize](gdnative.Object(gdClass), methodAudioEffectPitchShift[5]) }

type AudioEffectRecord gdnative.Object
func (AudioEffectRecord) class() string { return "AudioEffectRecord\000" }

func (gdClass AudioEffectRecord) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectRecord [5]gdnative.Method
func (gdClass AudioEffectRecord) SetRecordingActive(record bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectRecord[0], record) }
func (gdClass AudioEffectRecord) IsRecordingActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioEffectRecord[1]) }
func (gdClass AudioEffectRecord) SetFormat(format AudioStreamWAVFormat)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectRecord[2], format) }
func (gdClass AudioEffectRecord) GetFormat() AudioStreamWAVFormat { return gdnative.Return[AudioStreamWAVFormat](gdnative.Object(gdClass), methodAudioEffectRecord[3]) }
func (gdClass AudioEffectRecord) GetRecording() AudioStreamWAV { return gdnative.Return[AudioStreamWAV](gdnative.Object(gdClass), methodAudioEffectRecord[4]) }

type AudioEffectReverb gdnative.Object
func (AudioEffectReverb) class() string { return "AudioEffectReverb\000" }

func (gdClass AudioEffectReverb) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectReverb [16]gdnative.Method
func (gdClass AudioEffectReverb) SetPredelayMsec(msec float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[0], msec) }
func (gdClass AudioEffectReverb) GetPredelayMsec() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[1]) }
func (gdClass AudioEffectReverb) SetPredelayFeedback(feedback float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[2], feedback) }
func (gdClass AudioEffectReverb) GetPredelayFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[3]) }
func (gdClass AudioEffectReverb) SetRoomSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[4], size) }
func (gdClass AudioEffectReverb) GetRoomSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[5]) }
func (gdClass AudioEffectReverb) SetDamping(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[6], amount) }
func (gdClass AudioEffectReverb) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[7]) }
func (gdClass AudioEffectReverb) SetSpread(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[8], amount) }
func (gdClass AudioEffectReverb) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[9]) }
func (gdClass AudioEffectReverb) SetDry(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[10], amount) }
func (gdClass AudioEffectReverb) GetDry() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[11]) }
func (gdClass AudioEffectReverb) SetWet(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[12], amount) }
func (gdClass AudioEffectReverb) GetWet() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[13]) }
func (gdClass AudioEffectReverb) SetHpf(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectReverb[14], amount) }
func (gdClass AudioEffectReverb) GetHpf() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectReverb[15]) }

type AudioEffectSpectrumAnalyzerFFTSize int64

const (
	AudioEffectSpectrumAnalyzerFftSize256 AudioEffectSpectrumAnalyzerFFTSize = 0
	AudioEffectSpectrumAnalyzerFftSize512 AudioEffectSpectrumAnalyzerFFTSize = 1
	AudioEffectSpectrumAnalyzerFftSize1024 AudioEffectSpectrumAnalyzerFFTSize = 2
	AudioEffectSpectrumAnalyzerFftSize2048 AudioEffectSpectrumAnalyzerFFTSize = 3
	AudioEffectSpectrumAnalyzerFftSize4096 AudioEffectSpectrumAnalyzerFFTSize = 4
	AudioEffectSpectrumAnalyzerFftSizeMax AudioEffectSpectrumAnalyzerFFTSize = 5
)

type AudioEffectSpectrumAnalyzer gdnative.Object
func (AudioEffectSpectrumAnalyzer) class() string { return "AudioEffectSpectrumAnalyzer\000" }

func (gdClass AudioEffectSpectrumAnalyzer) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectSpectrumAnalyzer [6]gdnative.Method
func (gdClass AudioEffectSpectrumAnalyzer) SetBufferLength(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[0], seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[1]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetTapBackPos(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[2], seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetTapBackPos() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[3]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[4], size) }
func (gdClass AudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize { return gdnative.Return[AudioEffectSpectrumAnalyzerFFTSize](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzer[5]) }

type AudioEffectSpectrumAnalyzerInstanceMagnitudeMode int64

const (
	AudioEffectSpectrumAnalyzerInstanceMagnitudeAverage AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 0
	AudioEffectSpectrumAnalyzerInstanceMagnitudeMax AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 1
)

type AudioEffectSpectrumAnalyzerInstance gdnative.Object
func (AudioEffectSpectrumAnalyzerInstance) class() string { return "AudioEffectSpectrumAnalyzerInstance\000" }

func (gdClass AudioEffectSpectrumAnalyzerInstance) AudioEffectInstance() AudioEffectInstance { return AudioEffectInstance(gdClass) }

var methodAudioEffectSpectrumAnalyzerInstance [1]gdnative.Method
func (gdClass AudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz float64, to_hz float64, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodAudioEffectSpectrumAnalyzerInstance[0], from_hz, to_hz, mode) }

type AudioEffectStereoEnhance gdnative.Object
func (AudioEffectStereoEnhance) class() string { return "AudioEffectStereoEnhance\000" }

func (gdClass AudioEffectStereoEnhance) AudioEffect() AudioEffect { return AudioEffect(gdClass) }

var methodAudioEffectStereoEnhance [6]gdnative.Method
func (gdClass AudioEffectStereoEnhance) SetPanPullout(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[0], amount) }
func (gdClass AudioEffectStereoEnhance) GetPanPullout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[1]) }
func (gdClass AudioEffectStereoEnhance) SetTimePullout(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[2], amount) }
func (gdClass AudioEffectStereoEnhance) GetTimePullout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[3]) }
func (gdClass AudioEffectStereoEnhance) SetSurround(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioEffectStereoEnhance[4], amount) }
func (gdClass AudioEffectStereoEnhance) GetSurround() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioEffectStereoEnhance[5]) }

type AudioListener2D gdnative.Object
func (AudioListener2D) class() string { return "AudioListener2D\000" }

func (gdClass AudioListener2D) Node2D() Node2D { return Node2D(gdClass) }

var methodAudioListener2D [3]gdnative.Method
func (gdClass AudioListener2D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener2D[0]) }
func (gdClass AudioListener2D) ClearCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener2D[1]) }
func (gdClass AudioListener2D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioListener2D[2]) }

type AudioListener3D gdnative.Object
func (AudioListener3D) class() string { return "AudioListener3D\000" }

func (gdClass AudioListener3D) Node3D() Node3D { return Node3D(gdClass) }

var methodAudioListener3D [4]gdnative.Method
func (gdClass AudioListener3D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener3D[0]) }
func (gdClass AudioListener3D) ClearCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodAudioListener3D[1]) }
func (gdClass AudioListener3D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioListener3D[2]) }
func (gdClass AudioListener3D) GetListenerTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodAudioListener3D[3]) }

type AudioServerSpeakerMode int64

const (
	AudioServerSpeakerModeStereo AudioServerSpeakerMode = 0
	AudioServerSpeakerSurround31 AudioServerSpeakerMode = 1
	AudioServerSpeakerSurround51 AudioServerSpeakerMode = 2
	AudioServerSpeakerSurround71 AudioServerSpeakerMode = 3
)

type AudioServer gdnative.Object
func (AudioServer) class() string { return "AudioServer\000" }

func (gdClass AudioServer) Object() Object { return Object(gdClass) }

var methodAudioServer [47]gdnative.Method
func (gdClass AudioServer) SetBusCount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[0], amount) }
func (gdClass AudioServer) GetBusCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[1]) }
func (gdClass AudioServer) RemoveBus(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[2], index) }
func (gdClass AudioServer) AddBus(at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[3], at_position) }
func (gdClass AudioServer) MoveBus(index int64, to_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[4], index, to_index) }
func (gdClass AudioServer) SetBusName(bus_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[5], bus_idx, name) }
func (gdClass AudioServer) GetBusName(bus_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[6], bus_idx) }
func (gdClass AudioServer) GetBusIndex(bus_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[7], bus_name) }
func (gdClass AudioServer) GetBusChannels(bus_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[8], bus_idx) }
func (gdClass AudioServer) SetBusVolumeDb(bus_idx int64, volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[9], bus_idx, volume_db) }
func (gdClass AudioServer) GetBusVolumeDb(bus_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[10], bus_idx) }
func (gdClass AudioServer) SetBusSend(bus_idx int64, send string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[11], bus_idx, send) }
func (gdClass AudioServer) GetBusSend(bus_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[12], bus_idx) }
func (gdClass AudioServer) SetBusSolo(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[13], bus_idx, enable) }
func (gdClass AudioServer) IsBusSolo(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[14], bus_idx) }
func (gdClass AudioServer) SetBusMute(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[15], bus_idx, enable) }
func (gdClass AudioServer) IsBusMute(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[16], bus_idx) }
func (gdClass AudioServer) SetBusBypassEffects(bus_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[17], bus_idx, enable) }
func (gdClass AudioServer) IsBusBypassingEffects(bus_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[18], bus_idx) }
func (gdClass AudioServer) AddBusEffect(bus_idx int64, effect AudioEffect, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[19], bus_idx, effect, at_position) }
func (gdClass AudioServer) RemoveBusEffect(bus_idx int64, effect_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[20], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusEffectCount(bus_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioServer[21], bus_idx) }
func (gdClass AudioServer) GetBusEffect(bus_idx int64, effect_idx int64) AudioEffect { return gdnative.Return[AudioEffect](gdnative.Object(gdClass), methodAudioServer[22], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusEffectInstance(bus_idx int64, effect_idx int64, channel int64) AudioEffectInstance { return gdnative.Return[AudioEffectInstance](gdnative.Object(gdClass), methodAudioServer[23], bus_idx, effect_idx, channel) }
func (gdClass AudioServer) SwapBusEffects(bus_idx int64, effect_idx int64, by_effect_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[24], bus_idx, effect_idx, by_effect_idx) }
func (gdClass AudioServer) SetBusEffectEnabled(bus_idx int64, effect_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[25], bus_idx, effect_idx, enabled) }
func (gdClass AudioServer) IsBusEffectEnabled(bus_idx int64, effect_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioServer[26], bus_idx, effect_idx) }
func (gdClass AudioServer) GetBusPeakVolumeLeftDb(bus_idx int64, channel int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[27], bus_idx, channel) }
func (gdClass AudioServer) GetBusPeakVolumeRightDb(bus_idx int64, channel int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[28], bus_idx, channel) }
func (gdClass AudioServer) SetPlaybackSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[29], scale) }
func (gdClass AudioServer) GetPlaybackSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[30]) }
func (gdClass AudioServer) Lock()  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[31]) }
func (gdClass AudioServer) Unlock()  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[32]) }
func (gdClass AudioServer) GetSpeakerMode() AudioServerSpeakerMode { return gdnative.Return[AudioServerSpeakerMode](gdnative.Object(gdClass), methodAudioServer[33]) }
func (gdClass AudioServer) GetMixRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[34]) }
func (gdClass AudioServer) GetDeviceList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAudioServer[35]) }
func (gdClass AudioServer) GetDevice() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[36]) }
func (gdClass AudioServer) SetDevice(device string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[37], device) }
func (gdClass AudioServer) GetTimeToNextMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[38]) }
func (gdClass AudioServer) GetTimeSinceLastMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[39]) }
func (gdClass AudioServer) GetOutputLatency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioServer[40]) }
func (gdClass AudioServer) CaptureGetDeviceList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodAudioServer[41]) }
func (gdClass AudioServer) CaptureGetDevice() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioServer[42]) }
func (gdClass AudioServer) CaptureSetDevice(name string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[43], name) }
func (gdClass AudioServer) SetBusLayout(bus_layout AudioBusLayout)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[44], bus_layout) }
func (gdClass AudioServer) GenerateBusLayout() AudioBusLayout { return gdnative.Return[AudioBusLayout](gdnative.Object(gdClass), methodAudioServer[45]) }
func (gdClass AudioServer) SetEnableTaggingUsedAudioStreams(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioServer[46], enable) }

type AudioStream gdnative.Object
func (AudioStream) class() string { return "AudioStream\000" }

func (gdClass AudioStream) Resource() Resource { return Resource(gdClass) }

var methodAudioStream [3]gdnative.Method
func (gdClass AudioStream) virtual(val any, name string) any {	switch name {
	case "_instantiate_playback":
		i, ok := val.(interface{ InstantiatePlayback() AudioStreamPlayback })
		if ok {
			return i.InstantiatePlayback
		}
	case "_get_stream_name":
		i, ok := val.(interface{ GetStreamName() string })
		if ok {
			return i.GetStreamName
		}
	case "_get_length":
		i, ok := val.(interface{ GetLength() float64 })
		if ok {
			return i.GetLength
		}
	case "_is_monophonic":
		i, ok := val.(interface{ IsMonophonic() bool })
		if ok {
			return i.IsMonophonic
		}
	case "_get_bpm":
		i, ok := val.(interface{ GetBpm() float64 })
		if ok {
			return i.GetBpm
		}
	case "_get_beat_count":
		i, ok := val.(interface{ GetBeatCount() int64 })
		if ok {
			return i.GetBeatCount
		}
	}
	return nil
}
func (gdClass AudioStream) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStream[0]) }
func (gdClass AudioStream) IsMonophonic() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStream[1]) }
func (gdClass AudioStream) InstantiatePlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStream[2]) }

type AudioStreamGenerator gdnative.Object
func (AudioStreamGenerator) class() string { return "AudioStreamGenerator\000" }

func (gdClass AudioStreamGenerator) AudioStream() AudioStream { return AudioStream(gdClass) }

var methodAudioStreamGenerator [4]gdnative.Method
func (gdClass AudioStreamGenerator) SetMixRate(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGenerator[0], hz) }
func (gdClass AudioStreamGenerator) GetMixRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamGenerator[1]) }
func (gdClass AudioStreamGenerator) SetBufferLength(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGenerator[2], seconds) }
func (gdClass AudioStreamGenerator) GetBufferLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamGenerator[3]) }

type AudioStreamGeneratorPlayback gdnative.Object
func (AudioStreamGeneratorPlayback) class() string { return "AudioStreamGeneratorPlayback\000" }

func (gdClass AudioStreamGeneratorPlayback) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled { return AudioStreamPlaybackResampled(gdClass) }

var methodAudioStreamGeneratorPlayback [6]gdnative.Method
func (gdClass AudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[0], frame) }
func (gdClass AudioStreamGeneratorPlayback) CanPushBuffer(amount int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[1], amount) }
func (gdClass AudioStreamGeneratorPlayback) PushBuffer(frames []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[2], frames) }
func (gdClass AudioStreamGeneratorPlayback) GetFramesAvailable() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[3]) }
func (gdClass AudioStreamGeneratorPlayback) GetSkips() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[4]) }
func (gdClass AudioStreamGeneratorPlayback) ClearBuffer()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamGeneratorPlayback[5]) }

type AudioStreamMP3 gdnative.Object
func (AudioStreamMP3) class() string { return "AudioStreamMP3\000" }

func (gdClass AudioStreamMP3) AudioStream() AudioStream { return AudioStream(gdClass) }

var methodAudioStreamMP3 [12]gdnative.Method
func (gdClass AudioStreamMP3) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[0], data) }
func (gdClass AudioStreamMP3) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAudioStreamMP3[1]) }
func (gdClass AudioStreamMP3) SetLoop(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[2], enable) }
func (gdClass AudioStreamMP3) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamMP3[3]) }
func (gdClass AudioStreamMP3) SetLoopOffset(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[4], seconds) }
func (gdClass AudioStreamMP3) GetLoopOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamMP3[5]) }
func (gdClass AudioStreamMP3) SetBpm(bpm float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[6], bpm) }
func (gdClass AudioStreamMP3) GetBpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamMP3[7]) }
func (gdClass AudioStreamMP3) SetBeatCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[8], count) }
func (gdClass AudioStreamMP3) GetBeatCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamMP3[9]) }
func (gdClass AudioStreamMP3) SetBarBeats(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamMP3[10], count) }
func (gdClass AudioStreamMP3) GetBarBeats() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamMP3[11]) }

type AudioStreamMicrophone gdnative.Object
func (AudioStreamMicrophone) class() string { return "AudioStreamMicrophone\000" }

func (gdClass AudioStreamMicrophone) AudioStream() AudioStream { return AudioStream(gdClass) }


type AudioStreamOggVorbis gdnative.Object
func (AudioStreamOggVorbis) class() string { return "AudioStreamOggVorbis\000" }

func (gdClass AudioStreamOggVorbis) AudioStream() AudioStream { return AudioStream(gdClass) }

var methodAudioStreamOggVorbis [12]gdnative.Method
func (gdClass AudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[0], packet_sequence) }
func (gdClass AudioStreamOggVorbis) GetPacketSequence() OggPacketSequence { return gdnative.Return[OggPacketSequence](gdnative.Object(gdClass), methodAudioStreamOggVorbis[1]) }
func (gdClass AudioStreamOggVorbis) SetLoop(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[2], enable) }
func (gdClass AudioStreamOggVorbis) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamOggVorbis[3]) }
func (gdClass AudioStreamOggVorbis) SetLoopOffset(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[4], seconds) }
func (gdClass AudioStreamOggVorbis) GetLoopOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[5]) }
func (gdClass AudioStreamOggVorbis) SetBpm(bpm float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[6], bpm) }
func (gdClass AudioStreamOggVorbis) GetBpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[7]) }
func (gdClass AudioStreamOggVorbis) SetBeatCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[8], count) }
func (gdClass AudioStreamOggVorbis) GetBeatCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[9]) }
func (gdClass AudioStreamOggVorbis) SetBarBeats(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamOggVorbis[10], count) }
func (gdClass AudioStreamOggVorbis) GetBarBeats() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamOggVorbis[11]) }

type AudioStreamPlayback gdnative.Object
func (AudioStreamPlayback) class() string { return "AudioStreamPlayback\000" }

func (gdClass AudioStreamPlayback) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass AudioStreamPlayback) virtual(val any, name string) any {	switch name {
	case "_start":
		i, ok := val.(interface{ Start(from_pos float64)  })
		if ok {
			return i.Start
		}
	case "_stop":
		i, ok := val.(interface{ Stop()  })
		if ok {
			return i.Stop
		}
	case "_is_playing":
		i, ok := val.(interface{ IsPlaying() bool })
		if ok {
			return i.IsPlaying
		}
	case "_get_loop_count":
		i, ok := val.(interface{ GetLoopCount() int64 })
		if ok {
			return i.GetLoopCount
		}
	case "_get_playback_position":
		i, ok := val.(interface{ GetPlaybackPosition() float64 })
		if ok {
			return i.GetPlaybackPosition
		}
	case "_seek":
		i, ok := val.(interface{ Seek(position float64)  })
		if ok {
			return i.Seek
		}
	case "_mix":
		i, ok := val.(interface{ Mix(buffer *AudioFrame, rate_scale float64, frames int64) int64 })
		if ok {
			return i.Mix
		}
	case "_tag_used_streams":
		i, ok := val.(interface{ TagUsedStreams()  })
		if ok {
			return i.TagUsedStreams
		}
	}
	return nil
}

type AudioStreamPlaybackOggVorbis gdnative.Object
func (AudioStreamPlaybackOggVorbis) class() string { return "AudioStreamPlaybackOggVorbis\000" }

func (gdClass AudioStreamPlaybackOggVorbis) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled { return AudioStreamPlaybackResampled(gdClass) }


type AudioStreamPlaybackResampled gdnative.Object
func (AudioStreamPlaybackResampled) class() string { return "AudioStreamPlaybackResampled\000" }

func (gdClass AudioStreamPlaybackResampled) AudioStreamPlayback() AudioStreamPlayback { return AudioStreamPlayback(gdClass) }

var methodAudioStreamPlaybackResampled [1]gdnative.Method
func (gdClass AudioStreamPlaybackResampled) virtual(val any, name string) any {	switch name {
	case "_mix_resampled":
		i, ok := val.(interface{ MixResampled(dst_buffer *AudioFrame, frame_count int64) int64 })
		if ok {
			return i.MixResampled
		}
	case "_get_stream_sampling_rate":
		i, ok := val.(interface{ GetStreamSamplingRate() float64 })
		if ok {
			return i.GetStreamSamplingRate
		}
	}
	return nil
}
func (gdClass AudioStreamPlaybackResampled) BeginResample()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlaybackResampled[0]) }

type AudioStreamPlayerMixTarget int64

const (
	AudioStreamPlayerMixTargetStereo AudioStreamPlayerMixTarget = 0
	AudioStreamPlayerMixTargetSurround AudioStreamPlayerMixTarget = 1
	AudioStreamPlayerMixTargetCenter AudioStreamPlayerMixTarget = 2
)

type AudioStreamPlayer gdnative.Object
func (AudioStreamPlayer) class() string { return "AudioStreamPlayer\000" }

func (gdClass AudioStreamPlayer) Node() Node { return Node(gdClass) }

var methodAudioStreamPlayer [22]gdnative.Method
func (gdClass AudioStreamPlayer) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[0], stream) }
func (gdClass AudioStreamPlayer) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer[1]) }
func (gdClass AudioStreamPlayer) SetVolumeDb(volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[2], volume_db) }
func (gdClass AudioStreamPlayer) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[3]) }
func (gdClass AudioStreamPlayer) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[4], pitch_scale) }
func (gdClass AudioStreamPlayer) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[5]) }
func (gdClass AudioStreamPlayer) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[6], from_position) }
func (gdClass AudioStreamPlayer) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[7], to_position) }
func (gdClass AudioStreamPlayer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[8]) }
func (gdClass AudioStreamPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[9]) }
func (gdClass AudioStreamPlayer) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer[10]) }
func (gdClass AudioStreamPlayer) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[11], bus) }
func (gdClass AudioStreamPlayer) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer[12]) }
func (gdClass AudioStreamPlayer) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[13], enable) }
func (gdClass AudioStreamPlayer) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[14]) }
func (gdClass AudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[15], mix_target) }
func (gdClass AudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget { return gdnative.Return[AudioStreamPlayerMixTarget](gdnative.Object(gdClass), methodAudioStreamPlayer[16]) }
func (gdClass AudioStreamPlayer) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[17], pause) }
func (gdClass AudioStreamPlayer) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer[18]) }
func (gdClass AudioStreamPlayer) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer[19], max_polyphony) }
func (gdClass AudioStreamPlayer) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer[20]) }
func (gdClass AudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer[21]) }

type AudioStreamPlayer2D gdnative.Object
func (AudioStreamPlayer2D) class() string { return "AudioStreamPlayer2D\000" }

func (gdClass AudioStreamPlayer2D) Node2D() Node2D { return Node2D(gdClass) }

var methodAudioStreamPlayer2D [28]gdnative.Method
func (gdClass AudioStreamPlayer2D) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[0], stream) }
func (gdClass AudioStreamPlayer2D) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer2D[1]) }
func (gdClass AudioStreamPlayer2D) SetVolumeDb(volume_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[2], volume_db) }
func (gdClass AudioStreamPlayer2D) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[3]) }
func (gdClass AudioStreamPlayer2D) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[4], pitch_scale) }
func (gdClass AudioStreamPlayer2D) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[5]) }
func (gdClass AudioStreamPlayer2D) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[6], from_position) }
func (gdClass AudioStreamPlayer2D) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[7], to_position) }
func (gdClass AudioStreamPlayer2D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[8]) }
func (gdClass AudioStreamPlayer2D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[9]) }
func (gdClass AudioStreamPlayer2D) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[10]) }
func (gdClass AudioStreamPlayer2D) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[11], bus) }
func (gdClass AudioStreamPlayer2D) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer2D[12]) }
func (gdClass AudioStreamPlayer2D) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[13], enable) }
func (gdClass AudioStreamPlayer2D) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[14]) }
func (gdClass AudioStreamPlayer2D) SetMaxDistance(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[15], pixels) }
func (gdClass AudioStreamPlayer2D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[16]) }
func (gdClass AudioStreamPlayer2D) SetAttenuation(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[17], curve) }
func (gdClass AudioStreamPlayer2D) GetAttenuation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[18]) }
func (gdClass AudioStreamPlayer2D) SetAreaMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[19], mask) }
func (gdClass AudioStreamPlayer2D) GetAreaMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[20]) }
func (gdClass AudioStreamPlayer2D) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[21], pause) }
func (gdClass AudioStreamPlayer2D) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer2D[22]) }
func (gdClass AudioStreamPlayer2D) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[23], max_polyphony) }
func (gdClass AudioStreamPlayer2D) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[24]) }
func (gdClass AudioStreamPlayer2D) SetPanningStrength(panning_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer2D[25], panning_strength) }
func (gdClass AudioStreamPlayer2D) GetPanningStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer2D[26]) }
func (gdClass AudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer2D[27]) }

type AudioStreamPlayer3DAttenuationModel int64

const (
	AudioStreamPlayer3DAttenuationInverseDistance AudioStreamPlayer3DAttenuationModel = 0
	AudioStreamPlayer3DAttenuationInverseSquareDistance AudioStreamPlayer3DAttenuationModel = 1
	AudioStreamPlayer3DAttenuationLogarithmic AudioStreamPlayer3DAttenuationModel = 2
	AudioStreamPlayer3DAttenuationDisabled AudioStreamPlayer3DAttenuationModel = 3
)

type AudioStreamPlayer3DDopplerTracking int64

const (
	AudioStreamPlayer3DDopplerTrackingDisabled AudioStreamPlayer3DDopplerTracking = 0
	AudioStreamPlayer3DDopplerTrackingIdleStep AudioStreamPlayer3DDopplerTracking = 1
	AudioStreamPlayer3DDopplerTrackingPhysicsStep AudioStreamPlayer3DDopplerTracking = 2
)

type AudioStreamPlayer3D gdnative.Object
func (AudioStreamPlayer3D) class() string { return "AudioStreamPlayer3D\000" }

func (gdClass AudioStreamPlayer3D) Node3D() Node3D { return Node3D(gdClass) }

var methodAudioStreamPlayer3D [44]gdnative.Method
func (gdClass AudioStreamPlayer3D) SetStream(stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[0], stream) }
func (gdClass AudioStreamPlayer3D) GetStream() AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamPlayer3D[1]) }
func (gdClass AudioStreamPlayer3D) SetUnitDb(unit_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[2], unit_db) }
func (gdClass AudioStreamPlayer3D) GetUnitDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[3]) }
func (gdClass AudioStreamPlayer3D) SetUnitSize(unit_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[4], unit_size) }
func (gdClass AudioStreamPlayer3D) GetUnitSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[5]) }
func (gdClass AudioStreamPlayer3D) SetMaxDb(max_db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[6], max_db) }
func (gdClass AudioStreamPlayer3D) GetMaxDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[7]) }
func (gdClass AudioStreamPlayer3D) SetPitchScale(pitch_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[8], pitch_scale) }
func (gdClass AudioStreamPlayer3D) GetPitchScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[9]) }
func (gdClass AudioStreamPlayer3D) Play(from_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[10], from_position) }
func (gdClass AudioStreamPlayer3D) Seek(to_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[11], to_position) }
func (gdClass AudioStreamPlayer3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[12]) }
func (gdClass AudioStreamPlayer3D) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[13]) }
func (gdClass AudioStreamPlayer3D) GetPlaybackPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[14]) }
func (gdClass AudioStreamPlayer3D) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[15], bus) }
func (gdClass AudioStreamPlayer3D) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodAudioStreamPlayer3D[16]) }
func (gdClass AudioStreamPlayer3D) SetAutoplay(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[17], enable) }
func (gdClass AudioStreamPlayer3D) IsAutoplayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[18]) }
func (gdClass AudioStreamPlayer3D) SetMaxDistance(metres float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[19], metres) }
func (gdClass AudioStreamPlayer3D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[20]) }
func (gdClass AudioStreamPlayer3D) SetAreaMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[21], mask) }
func (gdClass AudioStreamPlayer3D) GetAreaMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[22]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngle(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[23], degrees) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[24]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[25], enabled) }
func (gdClass AudioStreamPlayer3D) IsEmissionAngleEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[26]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[27], db) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[28]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[29], degrees) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterCutoffHz() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[30]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[31], db) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[32]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[33], model) }
func (gdClass AudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel { return gdnative.Return[AudioStreamPlayer3DAttenuationModel](gdnative.Object(gdClass), methodAudioStreamPlayer3D[34]) }
func (gdClass AudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[35], mode) }
func (gdClass AudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking { return gdnative.Return[AudioStreamPlayer3DDopplerTracking](gdnative.Object(gdClass), methodAudioStreamPlayer3D[36]) }
func (gdClass AudioStreamPlayer3D) SetStreamPaused(pause bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[37], pause) }
func (gdClass AudioStreamPlayer3D) GetStreamPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamPlayer3D[38]) }
func (gdClass AudioStreamPlayer3D) SetMaxPolyphony(max_polyphony int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[39], max_polyphony) }
func (gdClass AudioStreamPlayer3D) GetMaxPolyphony() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[40]) }
func (gdClass AudioStreamPlayer3D) SetPanningStrength(panning_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamPlayer3D[41], panning_strength) }
func (gdClass AudioStreamPlayer3D) GetPanningStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamPlayer3D[42]) }
func (gdClass AudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback { return gdnative.Return[AudioStreamPlayback](gdnative.Object(gdClass), methodAudioStreamPlayer3D[43]) }

type AudioStreamRandomizerPlaybackMode int64

const (
	AudioStreamRandomizerPlaybackRandomNoRepeats AudioStreamRandomizerPlaybackMode = 0
	AudioStreamRandomizerPlaybackRandom AudioStreamRandomizerPlaybackMode = 1
	AudioStreamRandomizerPlaybackSequential AudioStreamRandomizerPlaybackMode = 2
)

type AudioStreamRandomizer gdnative.Object
func (AudioStreamRandomizer) class() string { return "AudioStreamRandomizer\000" }

func (gdClass AudioStreamRandomizer) AudioStream() AudioStream { return AudioStream(gdClass) }

var methodAudioStreamRandomizer [15]gdnative.Method
func (gdClass AudioStreamRandomizer) AddStream(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[0], index) }
func (gdClass AudioStreamRandomizer) MoveStream(index_from int64, index_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[1], index_from, index_to) }
func (gdClass AudioStreamRandomizer) RemoveStream(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[2], index) }
func (gdClass AudioStreamRandomizer) SetStream(index int64, stream AudioStream)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[3], index, stream) }
func (gdClass AudioStreamRandomizer) GetStream(index int64) AudioStream { return gdnative.Return[AudioStream](gdnative.Object(gdClass), methodAudioStreamRandomizer[4], index) }
func (gdClass AudioStreamRandomizer) SetStreamProbabilityWeight(index int64, weight float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[5], index, weight) }
func (gdClass AudioStreamRandomizer) GetStreamProbabilityWeight(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[6], index) }
func (gdClass AudioStreamRandomizer) SetStreamsCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[7], count) }
func (gdClass AudioStreamRandomizer) GetStreamsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamRandomizer[8]) }
func (gdClass AudioStreamRandomizer) SetRandomPitch(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[9], scale) }
func (gdClass AudioStreamRandomizer) GetRandomPitch() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[10]) }
func (gdClass AudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[11], db_offset) }
func (gdClass AudioStreamRandomizer) GetRandomVolumeOffsetDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodAudioStreamRandomizer[12]) }
func (gdClass AudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamRandomizer[13], mode) }
func (gdClass AudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode { return gdnative.Return[AudioStreamRandomizerPlaybackMode](gdnative.Object(gdClass), methodAudioStreamRandomizer[14]) }

type AudioStreamWAVFormat int64

const (
	AudioStreamWAVFormat8Bits AudioStreamWAVFormat = 0
	AudioStreamWAVFormat16Bits AudioStreamWAVFormat = 1
	AudioStreamWAVFormatImaAdpcm AudioStreamWAVFormat = 2
)

type AudioStreamWAVLoopMode int64

const (
	AudioStreamWAVLoopDisabled AudioStreamWAVLoopMode = 0
	AudioStreamWAVLoopForward AudioStreamWAVLoopMode = 1
	AudioStreamWAVLoopPingpong AudioStreamWAVLoopMode = 2
	AudioStreamWAVLoopBackward AudioStreamWAVLoopMode = 3
)

type AudioStreamWAV gdnative.Object
func (AudioStreamWAV) class() string { return "AudioStreamWAV\000" }

func (gdClass AudioStreamWAV) AudioStream() AudioStream { return AudioStream(gdClass) }

var methodAudioStreamWAV [15]gdnative.Method
func (gdClass AudioStreamWAV) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[0], data) }
func (gdClass AudioStreamWAV) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodAudioStreamWAV[1]) }
func (gdClass AudioStreamWAV) SetFormat(format AudioStreamWAVFormat)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[2], format) }
func (gdClass AudioStreamWAV) GetFormat() AudioStreamWAVFormat { return gdnative.Return[AudioStreamWAVFormat](gdnative.Object(gdClass), methodAudioStreamWAV[3]) }
func (gdClass AudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[4], loop_mode) }
func (gdClass AudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode { return gdnative.Return[AudioStreamWAVLoopMode](gdnative.Object(gdClass), methodAudioStreamWAV[5]) }
func (gdClass AudioStreamWAV) SetLoopBegin(loop_begin int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[6], loop_begin) }
func (gdClass AudioStreamWAV) GetLoopBegin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[7]) }
func (gdClass AudioStreamWAV) SetLoopEnd(loop_end int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[8], loop_end) }
func (gdClass AudioStreamWAV) GetLoopEnd() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[9]) }
func (gdClass AudioStreamWAV) SetMixRate(mix_rate int64)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[10], mix_rate) }
func (gdClass AudioStreamWAV) GetMixRate() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodAudioStreamWAV[11]) }
func (gdClass AudioStreamWAV) SetStereo(stereo bool)  { gdnative.Call(gdnative.Object(gdClass), methodAudioStreamWAV[12], stereo) }
func (gdClass AudioStreamWAV) IsStereo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodAudioStreamWAV[13]) }
func (gdClass AudioStreamWAV) SaveToWav(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodAudioStreamWAV[14], path) }

type BackBufferCopyCopyMode int64

const (
	BackBufferCopyCopyModeDisabled BackBufferCopyCopyMode = 0
	BackBufferCopyCopyModeRect BackBufferCopyCopyMode = 1
	BackBufferCopyCopyModeViewport BackBufferCopyCopyMode = 2
)

type BackBufferCopy gdnative.Object
func (BackBufferCopy) class() string { return "BackBufferCopy\000" }

func (gdClass BackBufferCopy) Node2D() Node2D { return Node2D(gdClass) }

var methodBackBufferCopy [4]gdnative.Method
func (gdClass BackBufferCopy) SetRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodBackBufferCopy[0], rect) }
func (gdClass BackBufferCopy) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodBackBufferCopy[1]) }
func (gdClass BackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode)  { gdnative.Call(gdnative.Object(gdClass), methodBackBufferCopy[2], copy_mode) }
func (gdClass BackBufferCopy) GetCopyMode() BackBufferCopyCopyMode { return gdnative.Return[BackBufferCopyCopyMode](gdnative.Object(gdClass), methodBackBufferCopy[3]) }

type BaseButtonDrawMode int64

const (
	BaseButtonDrawNormal BaseButtonDrawMode = 0
	BaseButtonDrawPressed BaseButtonDrawMode = 1
	BaseButtonDrawHover BaseButtonDrawMode = 2
	BaseButtonDrawDisabled BaseButtonDrawMode = 3
	BaseButtonDrawHoverPressed BaseButtonDrawMode = 4
)

type BaseButtonActionMode int64

const (
	BaseButtonActionModeButtonPress BaseButtonActionMode = 0
	BaseButtonActionModeButtonRelease BaseButtonActionMode = 1
)

type BaseButton gdnative.Object
func (BaseButton) class() string { return "BaseButton\000" }

func (gdClass BaseButton) Control() Control { return Control(gdClass) }

var methodBaseButton [23]gdnative.Method
func (gdClass BaseButton) virtual(val any, name string) any {	switch name {
	case "_pressed":
		i, ok := val.(interface{ Pressed()  })
		if ok {
			return i.Pressed
		}
	case "_toggled":
		i, ok := val.(interface{ Toggled(button_pressed bool)  })
		if ok {
			return i.Toggled
		}
	}
	return nil
}
func (gdClass BaseButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[0], pressed) }
func (gdClass BaseButton) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[1]) }
func (gdClass BaseButton) SetPressedNoSignal(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[2], pressed) }
func (gdClass BaseButton) IsHovered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[3]) }
func (gdClass BaseButton) SetToggleMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[4], enabled) }
func (gdClass BaseButton) IsToggleMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[5]) }
func (gdClass BaseButton) SetShortcutInTooltip(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[6], enabled) }
func (gdClass BaseButton) IsShortcutInTooltipEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[7]) }
func (gdClass BaseButton) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[8], disabled) }
func (gdClass BaseButton) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[9]) }
func (gdClass BaseButton) SetActionMode(mode BaseButtonActionMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[10], mode) }
func (gdClass BaseButton) GetActionMode() BaseButtonActionMode { return gdnative.Return[BaseButtonActionMode](gdnative.Object(gdClass), methodBaseButton[11]) }
func (gdClass BaseButton) SetButtonMask(mask MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[12], mask) }
func (gdClass BaseButton) GetButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodBaseButton[13]) }
func (gdClass BaseButton) GetDrawMode() BaseButtonDrawMode { return gdnative.Return[BaseButtonDrawMode](gdnative.Object(gdClass), methodBaseButton[14]) }
func (gdClass BaseButton) SetKeepPressedOutside(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[15], enabled) }
func (gdClass BaseButton) IsKeepPressedOutside() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseButton[16]) }
func (gdClass BaseButton) SetShortcut(shortcut Shortcut)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[17], shortcut) }
func (gdClass BaseButton) GetShortcut() Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodBaseButton[18]) }
func (gdClass BaseButton) SetButtonGroup(button_group ButtonGroup)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[19], button_group) }
func (gdClass BaseButton) GetButtonGroup() ButtonGroup { return gdnative.Return[ButtonGroup](gdnative.Object(gdClass), methodBaseButton[20]) }
func (gdClass BaseButton) SetShortcutContext(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodBaseButton[21], node) }
func (gdClass BaseButton) GetShortcutContext() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodBaseButton[22]) }

type BaseMaterial3DTextureParam int64

const (
	BaseMaterial3DTextureAlbedo BaseMaterial3DTextureParam = 0
	BaseMaterial3DTextureMetallic BaseMaterial3DTextureParam = 1
	BaseMaterial3DTextureRoughness BaseMaterial3DTextureParam = 2
	BaseMaterial3DTextureEmission BaseMaterial3DTextureParam = 3
	BaseMaterial3DTextureNormal BaseMaterial3DTextureParam = 4
	BaseMaterial3DTextureRim BaseMaterial3DTextureParam = 5
	BaseMaterial3DTextureClearcoat BaseMaterial3DTextureParam = 6
	BaseMaterial3DTextureFlowmap BaseMaterial3DTextureParam = 7
	BaseMaterial3DTextureAmbientOcclusion BaseMaterial3DTextureParam = 8
	BaseMaterial3DTextureHeightmap BaseMaterial3DTextureParam = 9
	BaseMaterial3DTextureSubsurfaceScattering BaseMaterial3DTextureParam = 10
	BaseMaterial3DTextureSubsurfaceTransmittance BaseMaterial3DTextureParam = 11
	BaseMaterial3DTextureBacklight BaseMaterial3DTextureParam = 12
	BaseMaterial3DTextureRefraction BaseMaterial3DTextureParam = 13
	BaseMaterial3DTextureDetailMask BaseMaterial3DTextureParam = 14
	BaseMaterial3DTextureDetailAlbedo BaseMaterial3DTextureParam = 15
	BaseMaterial3DTextureDetailNormal BaseMaterial3DTextureParam = 16
	BaseMaterial3DTextureOrm BaseMaterial3DTextureParam = 17
	BaseMaterial3DTextureMax BaseMaterial3DTextureParam = 18
)

type BaseMaterial3DTextureFilter int64

const (
	BaseMaterial3DTextureFilterNearest BaseMaterial3DTextureFilter = 0
	BaseMaterial3DTextureFilterLinear BaseMaterial3DTextureFilter = 1
	BaseMaterial3DTextureFilterNearestWithMipmaps BaseMaterial3DTextureFilter = 2
	BaseMaterial3DTextureFilterLinearWithMipmaps BaseMaterial3DTextureFilter = 3
	BaseMaterial3DTextureFilterNearestWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 4
	BaseMaterial3DTextureFilterLinearWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 5
	BaseMaterial3DTextureFilterMax BaseMaterial3DTextureFilter = 6
)

type BaseMaterial3DDetailUV int64

const (
	BaseMaterial3DDetailUv1 BaseMaterial3DDetailUV = 0
	BaseMaterial3DDetailUv2 BaseMaterial3DDetailUV = 1
)

type BaseMaterial3DTransparency int64

const (
	BaseMaterial3DTransparencyDisabled BaseMaterial3DTransparency = 0
	BaseMaterial3DTransparencyAlpha BaseMaterial3DTransparency = 1
	BaseMaterial3DTransparencyAlphaScissor BaseMaterial3DTransparency = 2
	BaseMaterial3DTransparencyAlphaHash BaseMaterial3DTransparency = 3
	BaseMaterial3DTransparencyAlphaDepthPrePass BaseMaterial3DTransparency = 4
	BaseMaterial3DTransparencyMax BaseMaterial3DTransparency = 5
)

type BaseMaterial3DShadingMode int64

const (
	BaseMaterial3DShadingModeUnshaded BaseMaterial3DShadingMode = 0
	BaseMaterial3DShadingModePerPixel BaseMaterial3DShadingMode = 1
	BaseMaterial3DShadingModePerVertex BaseMaterial3DShadingMode = 2
	BaseMaterial3DShadingModeMax BaseMaterial3DShadingMode = 3
)

type BaseMaterial3DFeature int64

const (
	BaseMaterial3DFeatureEmission BaseMaterial3DFeature = 0
	BaseMaterial3DFeatureNormalMapping BaseMaterial3DFeature = 1
	BaseMaterial3DFeatureRim BaseMaterial3DFeature = 2
	BaseMaterial3DFeatureClearcoat BaseMaterial3DFeature = 3
	BaseMaterial3DFeatureAnisotropy BaseMaterial3DFeature = 4
	BaseMaterial3DFeatureAmbientOcclusion BaseMaterial3DFeature = 5
	BaseMaterial3DFeatureHeightMapping BaseMaterial3DFeature = 6
	BaseMaterial3DFeatureSubsurfaceScattering BaseMaterial3DFeature = 7
	BaseMaterial3DFeatureSubsurfaceTransmittance BaseMaterial3DFeature = 8
	BaseMaterial3DFeatureBacklight BaseMaterial3DFeature = 9
	BaseMaterial3DFeatureRefraction BaseMaterial3DFeature = 10
	BaseMaterial3DFeatureDetail BaseMaterial3DFeature = 11
	BaseMaterial3DFeatureMax BaseMaterial3DFeature = 12
)

type BaseMaterial3DBlendMode int64

const (
	BaseMaterial3DBlendModeMix BaseMaterial3DBlendMode = 0
	BaseMaterial3DBlendModeAdd BaseMaterial3DBlendMode = 1
	BaseMaterial3DBlendModeSub BaseMaterial3DBlendMode = 2
	BaseMaterial3DBlendModeMul BaseMaterial3DBlendMode = 3
)

type BaseMaterial3DAlphaAntiAliasing int64

const (
	BaseMaterial3DAlphaAntialiasingOff BaseMaterial3DAlphaAntiAliasing = 0
	BaseMaterial3DAlphaAntialiasingAlphaToCoverage BaseMaterial3DAlphaAntiAliasing = 1
	BaseMaterial3DAlphaAntialiasingAlphaToCoverageAndToOne BaseMaterial3DAlphaAntiAliasing = 2
)

type BaseMaterial3DDepthDrawMode int64

const (
	BaseMaterial3DDepthDrawOpaqueOnly BaseMaterial3DDepthDrawMode = 0
	BaseMaterial3DDepthDrawAlways BaseMaterial3DDepthDrawMode = 1
	BaseMaterial3DDepthDrawDisabled BaseMaterial3DDepthDrawMode = 2
)

type BaseMaterial3DCullMode int64

const (
	BaseMaterial3DCullBack BaseMaterial3DCullMode = 0
	BaseMaterial3DCullFront BaseMaterial3DCullMode = 1
	BaseMaterial3DCullDisabled BaseMaterial3DCullMode = 2
)

type BaseMaterial3DFlags int64

const (
	BaseMaterial3DFlagDisableDepthTest BaseMaterial3DFlags = 0
	BaseMaterial3DFlagAlbedoFromVertexColor BaseMaterial3DFlags = 1
	BaseMaterial3DFlagSrgbVertexColor BaseMaterial3DFlags = 2
	BaseMaterial3DFlagUsePointSize BaseMaterial3DFlags = 3
	BaseMaterial3DFlagFixedSize BaseMaterial3DFlags = 4
	BaseMaterial3DFlagBillboardKeepScale BaseMaterial3DFlags = 5
	BaseMaterial3DFlagUv1UseTriplanar BaseMaterial3DFlags = 6
	BaseMaterial3DFlagUv2UseTriplanar BaseMaterial3DFlags = 7
	BaseMaterial3DFlagUv1UseWorldTriplanar BaseMaterial3DFlags = 8
	BaseMaterial3DFlagUv2UseWorldTriplanar BaseMaterial3DFlags = 9
	BaseMaterial3DFlagAoOnUv2 BaseMaterial3DFlags = 10
	BaseMaterial3DFlagEmissionOnUv2 BaseMaterial3DFlags = 11
	BaseMaterial3DFlagAlbedoTextureForceSrgb BaseMaterial3DFlags = 12
	BaseMaterial3DFlagDontReceiveShadows BaseMaterial3DFlags = 13
	BaseMaterial3DFlagDisableAmbientLight BaseMaterial3DFlags = 14
	BaseMaterial3DFlagUseShadowToOpacity BaseMaterial3DFlags = 15
	BaseMaterial3DFlagUseTextureRepeat BaseMaterial3DFlags = 16
	BaseMaterial3DFlagInvertHeightmap BaseMaterial3DFlags = 17
	BaseMaterial3DFlagSubsurfaceModeSkin BaseMaterial3DFlags = 18
	BaseMaterial3DFlagParticleTrailsMode BaseMaterial3DFlags = 19
	BaseMaterial3DFlagAlbedoTextureMsdf BaseMaterial3DFlags = 20
	BaseMaterial3DFlagMax BaseMaterial3DFlags = 21
)

type BaseMaterial3DDiffuseMode int64

const (
	BaseMaterial3DDiffuseBurley BaseMaterial3DDiffuseMode = 0
	BaseMaterial3DDiffuseLambert BaseMaterial3DDiffuseMode = 1
	BaseMaterial3DDiffuseLambertWrap BaseMaterial3DDiffuseMode = 2
	BaseMaterial3DDiffuseToon BaseMaterial3DDiffuseMode = 3
)

type BaseMaterial3DSpecularMode int64

const (
	BaseMaterial3DSpecularSchlickGgx BaseMaterial3DSpecularMode = 0
	BaseMaterial3DSpecularToon BaseMaterial3DSpecularMode = 1
	BaseMaterial3DSpecularDisabled BaseMaterial3DSpecularMode = 2
)

type BaseMaterial3DBillboardMode int64

const (
	BaseMaterial3DBillboardDisabled BaseMaterial3DBillboardMode = 0
	BaseMaterial3DBillboardEnabled BaseMaterial3DBillboardMode = 1
	BaseMaterial3DBillboardFixedY BaseMaterial3DBillboardMode = 2
	BaseMaterial3DBillboardParticles BaseMaterial3DBillboardMode = 3
)

type BaseMaterial3DTextureChannel int64

const (
	BaseMaterial3DTextureChannelRed BaseMaterial3DTextureChannel = 0
	BaseMaterial3DTextureChannelGreen BaseMaterial3DTextureChannel = 1
	BaseMaterial3DTextureChannelBlue BaseMaterial3DTextureChannel = 2
	BaseMaterial3DTextureChannelAlpha BaseMaterial3DTextureChannel = 3
	BaseMaterial3DTextureChannelGrayscale BaseMaterial3DTextureChannel = 4
)

type BaseMaterial3DEmissionOperator int64

const (
	BaseMaterial3DEmissionOpAdd BaseMaterial3DEmissionOperator = 0
	BaseMaterial3DEmissionOpMultiply BaseMaterial3DEmissionOperator = 1
)

type BaseMaterial3DDistanceFadeMode int64

const (
	BaseMaterial3DDistanceFadeDisabled BaseMaterial3DDistanceFadeMode = 0
	BaseMaterial3DDistanceFadePixelAlpha BaseMaterial3DDistanceFadeMode = 1
	BaseMaterial3DDistanceFadePixelDither BaseMaterial3DDistanceFadeMode = 2
	BaseMaterial3DDistanceFadeObjectDither BaseMaterial3DDistanceFadeMode = 3
)

type BaseMaterial3D gdnative.Object
func (BaseMaterial3D) class() string { return "BaseMaterial3D\000" }

func (gdClass BaseMaterial3D) Material() Material { return Material(gdClass) }

var methodBaseMaterial3D [134]gdnative.Method
func (gdClass BaseMaterial3D) SetAlbedo(albedo Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[0], albedo) }
func (gdClass BaseMaterial3D) GetAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[1]) }
func (gdClass BaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[2], transparency) }
func (gdClass BaseMaterial3D) GetTransparency() BaseMaterial3DTransparency { return gdnative.Return[BaseMaterial3DTransparency](gdnative.Object(gdClass), methodBaseMaterial3D[3]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[4], alpha_aa) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing { return gdnative.Return[BaseMaterial3DAlphaAntiAliasing](gdnative.Object(gdClass), methodBaseMaterial3D[5]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasingEdge(edge float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[6], edge) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasingEdge() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[7]) }
func (gdClass BaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[8], shading_mode) }
func (gdClass BaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode { return gdnative.Return[BaseMaterial3DShadingMode](gdnative.Object(gdClass), methodBaseMaterial3D[9]) }
func (gdClass BaseMaterial3D) SetSpecular(specular float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[10], specular) }
func (gdClass BaseMaterial3D) GetSpecular() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[11]) }
func (gdClass BaseMaterial3D) SetMetallic(metallic float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[12], metallic) }
func (gdClass BaseMaterial3D) GetMetallic() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[13]) }
func (gdClass BaseMaterial3D) SetRoughness(roughness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[14], roughness) }
func (gdClass BaseMaterial3D) GetRoughness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[15]) }
func (gdClass BaseMaterial3D) SetEmission(emission Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[16], emission) }
func (gdClass BaseMaterial3D) GetEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[17]) }
func (gdClass BaseMaterial3D) SetEmissionEnergy(emission_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[18], emission_energy) }
func (gdClass BaseMaterial3D) GetEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[19]) }
func (gdClass BaseMaterial3D) SetNormalScale(normal_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[20], normal_scale) }
func (gdClass BaseMaterial3D) GetNormalScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[21]) }
func (gdClass BaseMaterial3D) SetRim(rim float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[22], rim) }
func (gdClass BaseMaterial3D) GetRim() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[23]) }
func (gdClass BaseMaterial3D) SetRimTint(rim_tint float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[24], rim_tint) }
func (gdClass BaseMaterial3D) GetRimTint() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[25]) }
func (gdClass BaseMaterial3D) SetClearcoat(clearcoat float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[26], clearcoat) }
func (gdClass BaseMaterial3D) GetClearcoat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[27]) }
func (gdClass BaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[28], clearcoat_roughness) }
func (gdClass BaseMaterial3D) GetClearcoatRoughness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[29]) }
func (gdClass BaseMaterial3D) SetAnisotropy(anisotropy float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[30], anisotropy) }
func (gdClass BaseMaterial3D) GetAnisotropy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[31]) }
func (gdClass BaseMaterial3D) SetHeightmapScale(heightmap_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[32], heightmap_scale) }
func (gdClass BaseMaterial3D) GetHeightmapScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[33]) }
func (gdClass BaseMaterial3D) SetSubsurfaceScatteringStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[34], strength) }
func (gdClass BaseMaterial3D) GetSubsurfaceScatteringStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[35]) }
func (gdClass BaseMaterial3D) SetTransmittanceColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[36], color) }
func (gdClass BaseMaterial3D) GetTransmittanceColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[37]) }
func (gdClass BaseMaterial3D) SetTransmittanceDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[38], depth) }
func (gdClass BaseMaterial3D) GetTransmittanceDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[39]) }
func (gdClass BaseMaterial3D) SetTransmittanceBoost(boost float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[40], boost) }
func (gdClass BaseMaterial3D) GetTransmittanceBoost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[41]) }
func (gdClass BaseMaterial3D) SetBacklight(backlight Color)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[42], backlight) }
func (gdClass BaseMaterial3D) GetBacklight() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodBaseMaterial3D[43]) }
func (gdClass BaseMaterial3D) SetRefraction(refraction float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[44], refraction) }
func (gdClass BaseMaterial3D) GetRefraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[45]) }
func (gdClass BaseMaterial3D) SetPointSize(point_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[46], point_size) }
func (gdClass BaseMaterial3D) GetPointSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[47]) }
func (gdClass BaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[48], detail_uv) }
func (gdClass BaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV { return gdnative.Return[BaseMaterial3DDetailUV](gdnative.Object(gdClass), methodBaseMaterial3D[49]) }
func (gdClass BaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[50], blend_mode) }
func (gdClass BaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode { return gdnative.Return[BaseMaterial3DBlendMode](gdnative.Object(gdClass), methodBaseMaterial3D[51]) }
func (gdClass BaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[52], depth_draw_mode) }
func (gdClass BaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode { return gdnative.Return[BaseMaterial3DDepthDrawMode](gdnative.Object(gdClass), methodBaseMaterial3D[53]) }
func (gdClass BaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[54], cull_mode) }
func (gdClass BaseMaterial3D) GetCullMode() BaseMaterial3DCullMode { return gdnative.Return[BaseMaterial3DCullMode](gdnative.Object(gdClass), methodBaseMaterial3D[55]) }
func (gdClass BaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[56], diffuse_mode) }
func (gdClass BaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode { return gdnative.Return[BaseMaterial3DDiffuseMode](gdnative.Object(gdClass), methodBaseMaterial3D[57]) }
func (gdClass BaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[58], specular_mode) }
func (gdClass BaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode { return gdnative.Return[BaseMaterial3DSpecularMode](gdnative.Object(gdClass), methodBaseMaterial3D[59]) }
func (gdClass BaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[60], flag, enable) }
func (gdClass BaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[61], flag) }
func (gdClass BaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[62], mode) }
func (gdClass BaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodBaseMaterial3D[63]) }
func (gdClass BaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[64], feature, enable) }
func (gdClass BaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[65], feature) }
func (gdClass BaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[66], param, texture) }
func (gdClass BaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodBaseMaterial3D[67], param) }
func (gdClass BaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[68], detail_blend_mode) }
func (gdClass BaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode { return gdnative.Return[BaseMaterial3DBlendMode](gdnative.Object(gdClass), methodBaseMaterial3D[69]) }
func (gdClass BaseMaterial3D) SetUv1Scale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[70], scale) }
func (gdClass BaseMaterial3D) GetUv1Scale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[71]) }
func (gdClass BaseMaterial3D) SetUv1Offset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[72], offset) }
func (gdClass BaseMaterial3D) GetUv1Offset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[73]) }
func (gdClass BaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[74], sharpness) }
func (gdClass BaseMaterial3D) GetUv1TriplanarBlendSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[75]) }
func (gdClass BaseMaterial3D) SetUv2Scale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[76], scale) }
func (gdClass BaseMaterial3D) GetUv2Scale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[77]) }
func (gdClass BaseMaterial3D) SetUv2Offset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[78], offset) }
func (gdClass BaseMaterial3D) GetUv2Offset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBaseMaterial3D[79]) }
func (gdClass BaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[80], sharpness) }
func (gdClass BaseMaterial3D) GetUv2TriplanarBlendSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[81]) }
func (gdClass BaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[82], mode) }
func (gdClass BaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodBaseMaterial3D[83]) }
func (gdClass BaseMaterial3D) SetParticlesAnimHFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[84], frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimHFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[85]) }
func (gdClass BaseMaterial3D) SetParticlesAnimVFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[86], frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimVFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[87]) }
func (gdClass BaseMaterial3D) SetParticlesAnimLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[88], loop) }
func (gdClass BaseMaterial3D) GetParticlesAnimLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[89]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallax(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[90], enable) }
func (gdClass BaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[91]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[92], layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMinLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[93]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[94], layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBaseMaterial3D[95]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[96], flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[97]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[98], flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[99]) }
func (gdClass BaseMaterial3D) SetGrow(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[100], amount) }
func (gdClass BaseMaterial3D) GetGrow() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[101]) }
func (gdClass BaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[102], operator) }
func (gdClass BaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator { return gdnative.Return[BaseMaterial3DEmissionOperator](gdnative.Object(gdClass), methodBaseMaterial3D[103]) }
func (gdClass BaseMaterial3D) SetAoLightAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[104], amount) }
func (gdClass BaseMaterial3D) GetAoLightAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[105]) }
func (gdClass BaseMaterial3D) SetAlphaScissorThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[106], threshold) }
func (gdClass BaseMaterial3D) GetAlphaScissorThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[107]) }
func (gdClass BaseMaterial3D) SetAlphaHashScale(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[108], threshold) }
func (gdClass BaseMaterial3D) GetAlphaHashScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[109]) }
func (gdClass BaseMaterial3D) SetGrowEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[110], enable) }
func (gdClass BaseMaterial3D) IsGrowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[111]) }
func (gdClass BaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[112], channel) }
func (gdClass BaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[113]) }
func (gdClass BaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[114], channel) }
func (gdClass BaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[115]) }
func (gdClass BaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[116], channel) }
func (gdClass BaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[117]) }
func (gdClass BaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[118], channel) }
func (gdClass BaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel { return gdnative.Return[BaseMaterial3DTextureChannel](gdnative.Object(gdClass), methodBaseMaterial3D[119]) }
func (gdClass BaseMaterial3D) SetProximityFade(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[120], enabled) }
func (gdClass BaseMaterial3D) IsProximityFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBaseMaterial3D[121]) }
func (gdClass BaseMaterial3D) SetProximityFadeDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[122], distance) }
func (gdClass BaseMaterial3D) GetProximityFadeDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[123]) }
func (gdClass BaseMaterial3D) SetMsdfPixelRange(arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[124], arange) }
func (gdClass BaseMaterial3D) GetMsdfPixelRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[125]) }
func (gdClass BaseMaterial3D) SetMsdfOutlineSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[126], size) }
func (gdClass BaseMaterial3D) GetMsdfOutlineSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[127]) }
func (gdClass BaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[128], mode) }
func (gdClass BaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode { return gdnative.Return[BaseMaterial3DDistanceFadeMode](gdnative.Object(gdClass), methodBaseMaterial3D[129]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMaxDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[130], distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[131]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMinDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodBaseMaterial3D[132], distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMinDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBaseMaterial3D[133]) }

type BitMap gdnative.Object
func (BitMap) class() string { return "BitMap\000" }

func (gdClass BitMap) Resource() Resource { return Resource(gdClass) }

var methodBitMap [11]gdnative.Method
func (gdClass BitMap) Create(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[0], size) }
func (gdClass BitMap) CreateFromImageAlpha(image Image, threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[1], image, threshold) }
func (gdClass BitMap) SetBit(position Vector2, bit bool)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[2], position, bit) }
func (gdClass BitMap) GetBit(position Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBitMap[3], position) }
func (gdClass BitMap) SetBitRect(rect Rect2, bit bool)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[4], rect, bit) }
func (gdClass BitMap) GetTrueBitCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBitMap[5]) }
func (gdClass BitMap) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodBitMap[6]) }
func (gdClass BitMap) Resize(new_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[7], new_size) }
func (gdClass BitMap) GrowMask(pixels int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodBitMap[8], pixels, rect) }
func (gdClass BitMap) ConvertToImage() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodBitMap[9]) }
func (gdClass BitMap) OpaqueToPolygons(rect Rect2, epsilon float64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodBitMap[10], rect, epsilon) }

type Bone2D gdnative.Object
func (Bone2D) class() string { return "Bone2D\000" }

func (gdClass Bone2D) Node2D() Node2D { return Node2D(gdClass) }

var methodBone2D [13]gdnative.Method
func (gdClass Bone2D) SetRest(rest Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[0], rest) }
func (gdClass Bone2D) GetRest() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodBone2D[1]) }
func (gdClass Bone2D) ApplyRest()  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[2]) }
func (gdClass Bone2D) GetSkeletonRest() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodBone2D[3]) }
func (gdClass Bone2D) GetIndexInSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBone2D[4]) }
func (gdClass Bone2D) SetDefaultLength(default_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[5], default_length) }
func (gdClass Bone2D) GetDefaultLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[6]) }
func (gdClass Bone2D) SetAutocalculateLengthAndAngle(auto_calculate bool)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[7], auto_calculate) }
func (gdClass Bone2D) GetAutocalculateLengthAndAngle() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBone2D[8]) }
func (gdClass Bone2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[9], length) }
func (gdClass Bone2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[10]) }
func (gdClass Bone2D) SetBoneAngle(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodBone2D[11], angle) }
func (gdClass Bone2D) GetBoneAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodBone2D[12]) }

type BoneAttachment3D gdnative.Object
func (BoneAttachment3D) class() string { return "BoneAttachment3D\000" }

func (gdClass BoneAttachment3D) Node3D() Node3D { return Node3D(gdClass) }

var methodBoneAttachment3D [13]gdnative.Method
func (gdClass BoneAttachment3D) SetBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[0], bone_name) }
func (gdClass BoneAttachment3D) GetBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneAttachment3D[1]) }
func (gdClass BoneAttachment3D) SetBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[2], bone_idx) }
func (gdClass BoneAttachment3D) GetBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoneAttachment3D[3]) }
func (gdClass BoneAttachment3D) OnBonePoseUpdate(bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[4], bone_index) }
func (gdClass BoneAttachment3D) SetOverridePose(override_pose bool)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[5], override_pose) }
func (gdClass BoneAttachment3D) GetOverridePose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBoneAttachment3D[6]) }
func (gdClass BoneAttachment3D) SetOverrideMode(override_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[7], override_mode) }
func (gdClass BoneAttachment3D) GetOverrideMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoneAttachment3D[8]) }
func (gdClass BoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[9], use_external_skeleton) }
func (gdClass BoneAttachment3D) GetUseExternalSkeleton() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodBoneAttachment3D[10]) }
func (gdClass BoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodBoneAttachment3D[11], external_skeleton) }
func (gdClass BoneAttachment3D) GetExternalSkeleton() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodBoneAttachment3D[12]) }

type BoneMap gdnative.Object
func (BoneMap) class() string { return "BoneMap\000" }

func (gdClass BoneMap) Resource() Resource { return Resource(gdClass) }

var methodBoneMap [5]gdnative.Method
func (gdClass BoneMap) GetProfile() SkeletonProfile { return gdnative.Return[SkeletonProfile](gdnative.Object(gdClass), methodBoneMap[0]) }
func (gdClass BoneMap) SetProfile(profile SkeletonProfile)  { gdnative.Call(gdnative.Object(gdClass), methodBoneMap[1], profile) }
func (gdClass BoneMap) GetSkeletonBoneName(profile_bone_name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneMap[2], profile_bone_name) }
func (gdClass BoneMap) SetSkeletonBoneName(profile_bone_name string, skeleton_bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodBoneMap[3], profile_bone_name, skeleton_bone_name) }
func (gdClass BoneMap) FindProfileBoneName(skeleton_bone_name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodBoneMap[4], skeleton_bone_name) }

type BoxContainerAlignmentMode int64

const (
	BoxContainerAlignmentBegin BoxContainerAlignmentMode = 0
	BoxContainerAlignmentCenter BoxContainerAlignmentMode = 1
	BoxContainerAlignmentEnd BoxContainerAlignmentMode = 2
)

type BoxContainer gdnative.Object
func (BoxContainer) class() string { return "BoxContainer\000" }

func (gdClass BoxContainer) Container() Container { return Container(gdClass) }

var methodBoxContainer [3]gdnative.Method
func (gdClass BoxContainer) AddSpacer(begin bool) Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodBoxContainer[0], begin) }
func (gdClass BoxContainer) GetAlignment() BoxContainerAlignmentMode { return gdnative.Return[BoxContainerAlignmentMode](gdnative.Object(gdClass), methodBoxContainer[1]) }
func (gdClass BoxContainer) SetAlignment(alignment BoxContainerAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodBoxContainer[2], alignment) }

type BoxMesh gdnative.Object
func (BoxMesh) class() string { return "BoxMesh\000" }

func (gdClass BoxMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodBoxMesh [8]gdnative.Method
func (gdClass BoxMesh) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[0], size) }
func (gdClass BoxMesh) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxMesh[1]) }
func (gdClass BoxMesh) SetSubdivideWidth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[2], subdivide) }
func (gdClass BoxMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[3]) }
func (gdClass BoxMesh) SetSubdivideHeight(divisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[4], divisions) }
func (gdClass BoxMesh) GetSubdivideHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[5]) }
func (gdClass BoxMesh) SetSubdivideDepth(divisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodBoxMesh[6], divisions) }
func (gdClass BoxMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodBoxMesh[7]) }

type BoxOccluder3D gdnative.Object
func (BoxOccluder3D) class() string { return "BoxOccluder3D\000" }

func (gdClass BoxOccluder3D) Occluder3D() Occluder3D { return Occluder3D(gdClass) }

var methodBoxOccluder3D [2]gdnative.Method
func (gdClass BoxOccluder3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxOccluder3D[0], size) }
func (gdClass BoxOccluder3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxOccluder3D[1]) }

type BoxShape3D gdnative.Object
func (BoxShape3D) class() string { return "BoxShape3D\000" }

func (gdClass BoxShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodBoxShape3D [2]gdnative.Method
func (gdClass BoxShape3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodBoxShape3D[0], size) }
func (gdClass BoxShape3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodBoxShape3D[1]) }

type Button gdnative.Object
func (Button) class() string { return "Button\000" }

func (gdClass Button) BaseButton() BaseButton { return BaseButton(gdClass) }

var methodButton [20]gdnative.Method
func (gdClass Button) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodButton[0], text) }
func (gdClass Button) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodButton[1]) }
func (gdClass Button) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodButton[2], overrun_behavior) }
func (gdClass Button) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodButton[3]) }
func (gdClass Button) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodButton[4], direction) }
func (gdClass Button) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodButton[5]) }
func (gdClass Button) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodButton[6], language) }
func (gdClass Button) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodButton[7]) }
func (gdClass Button) SetButtonIcon(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodButton[8], texture) }
func (gdClass Button) GetButtonIcon() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodButton[9]) }
func (gdClass Button) SetFlat(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[10], enabled) }
func (gdClass Button) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[11]) }
func (gdClass Button) SetClipText(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[12], enabled) }
func (gdClass Button) GetClipText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[13]) }
func (gdClass Button) SetTextAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodButton[14], alignment) }
func (gdClass Button) GetTextAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodButton[15]) }
func (gdClass Button) SetIconAlignment(icon_alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodButton[16], icon_alignment) }
func (gdClass Button) GetIconAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodButton[17]) }
func (gdClass Button) SetExpandIcon(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodButton[18], enabled) }
func (gdClass Button) IsExpandIcon() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodButton[19]) }

type ButtonGroup gdnative.Object
func (ButtonGroup) class() string { return "ButtonGroup\000" }

func (gdClass ButtonGroup) Resource() Resource { return Resource(gdClass) }

var methodButtonGroup [2]gdnative.Method
func (gdClass ButtonGroup) GetPressedButton() BaseButton { return gdnative.Return[BaseButton](gdnative.Object(gdClass), methodButtonGroup[0]) }
func (gdClass ButtonGroup) GetButtons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodButtonGroup[1]) }

type CPUParticles2DDrawOrder int64

const (
	CPUParticles2DDrawOrderIndex CPUParticles2DDrawOrder = 0
	CPUParticles2DDrawOrderLifetime CPUParticles2DDrawOrder = 1
)

type CPUParticles2DParameter int64

const (
	CPUParticles2DParamInitialLinearVelocity CPUParticles2DParameter = 0
	CPUParticles2DParamAngularVelocity CPUParticles2DParameter = 1
	CPUParticles2DParamOrbitVelocity CPUParticles2DParameter = 2
	CPUParticles2DParamLinearAccel CPUParticles2DParameter = 3
	CPUParticles2DParamRadialAccel CPUParticles2DParameter = 4
	CPUParticles2DParamTangentialAccel CPUParticles2DParameter = 5
	CPUParticles2DParamDamping CPUParticles2DParameter = 6
	CPUParticles2DParamAngle CPUParticles2DParameter = 7
	CPUParticles2DParamScale CPUParticles2DParameter = 8
	CPUParticles2DParamHueVariation CPUParticles2DParameter = 9
	CPUParticles2DParamAnimSpeed CPUParticles2DParameter = 10
	CPUParticles2DParamAnimOffset CPUParticles2DParameter = 11
	CPUParticles2DParamMax CPUParticles2DParameter = 12
)

type CPUParticles2DParticleFlags int64

const (
	CPUParticles2DParticleFlagAlignYToVelocity CPUParticles2DParticleFlags = 0
	CPUParticles2DParticleFlagRotateY CPUParticles2DParticleFlags = 1
	CPUParticles2DParticleFlagDisableZ CPUParticles2DParticleFlags = 2
	CPUParticles2DParticleFlagMax CPUParticles2DParticleFlags = 3
)

type CPUParticles2DEmissionShape int64

const (
	CPUParticles2DEmissionShapePoint CPUParticles2DEmissionShape = 0
	CPUParticles2DEmissionShapeSphere CPUParticles2DEmissionShape = 1
	CPUParticles2DEmissionShapeSphereSurface CPUParticles2DEmissionShape = 2
	CPUParticles2DEmissionShapeRectangle CPUParticles2DEmissionShape = 3
	CPUParticles2DEmissionShapePoints CPUParticles2DEmissionShape = 4
	CPUParticles2DEmissionShapeDirectedPoints CPUParticles2DEmissionShape = 5
	CPUParticles2DEmissionShapeMax CPUParticles2DEmissionShape = 6
)

type CPUParticles2D gdnative.Object
func (CPUParticles2D) class() string { return "CPUParticles2D\000" }

func (gdClass CPUParticles2D) Node2D() Node2D { return Node2D(gdClass) }

var methodCPUParticles2D [68]gdnative.Method
func (gdClass CPUParticles2D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[0], emitting) }
func (gdClass CPUParticles2D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[1], amount) }
func (gdClass CPUParticles2D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[2], secs) }
func (gdClass CPUParticles2D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[3], enable) }
func (gdClass CPUParticles2D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[4], secs) }
func (gdClass CPUParticles2D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[5], ratio) }
func (gdClass CPUParticles2D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[6], ratio) }
func (gdClass CPUParticles2D) SetLifetimeRandomness(random float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[7], random) }
func (gdClass CPUParticles2D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[8], enable) }
func (gdClass CPUParticles2D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[9], fps) }
func (gdClass CPUParticles2D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[10], enable) }
func (gdClass CPUParticles2D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[11], scale) }
func (gdClass CPUParticles2D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[12]) }
func (gdClass CPUParticles2D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles2D[13]) }
func (gdClass CPUParticles2D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[14]) }
func (gdClass CPUParticles2D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[15]) }
func (gdClass CPUParticles2D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[16]) }
func (gdClass CPUParticles2D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[17]) }
func (gdClass CPUParticles2D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[18]) }
func (gdClass CPUParticles2D) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[19]) }
func (gdClass CPUParticles2D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[20]) }
func (gdClass CPUParticles2D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles2D[21]) }
func (gdClass CPUParticles2D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[22]) }
func (gdClass CPUParticles2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[23]) }
func (gdClass CPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[24], order) }
func (gdClass CPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder { return gdnative.Return[CPUParticles2DDrawOrder](gdnative.Object(gdClass), methodCPUParticles2D[25]) }
func (gdClass CPUParticles2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[26], texture) }
func (gdClass CPUParticles2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCPUParticles2D[27]) }
func (gdClass CPUParticles2D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[28]) }
func (gdClass CPUParticles2D) SetDirection(direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[29], direction) }
func (gdClass CPUParticles2D) GetDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[30]) }
func (gdClass CPUParticles2D) SetSpread(spread float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[31], spread) }
func (gdClass CPUParticles2D) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[32]) }
func (gdClass CPUParticles2D) SetParamMin(param CPUParticles2DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[33], param, value) }
func (gdClass CPUParticles2D) GetParamMin(param CPUParticles2DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[34], param) }
func (gdClass CPUParticles2D) SetParamMax(param CPUParticles2DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[35], param, value) }
func (gdClass CPUParticles2D) GetParamMax(param CPUParticles2DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[36], param) }
func (gdClass CPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[37], param, curve) }
func (gdClass CPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[38], param) }
func (gdClass CPUParticles2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[39], color) }
func (gdClass CPUParticles2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCPUParticles2D[40]) }
func (gdClass CPUParticles2D) SetColorRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[41], ramp) }
func (gdClass CPUParticles2D) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles2D[42]) }
func (gdClass CPUParticles2D) SetColorInitialRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[43], ramp) }
func (gdClass CPUParticles2D) GetColorInitialRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles2D[44]) }
func (gdClass CPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[45], particle_flag, enable) }
func (gdClass CPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[46], particle_flag) }
func (gdClass CPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[47], shape) }
func (gdClass CPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape { return gdnative.Return[CPUParticles2DEmissionShape](gdnative.Object(gdClass), methodCPUParticles2D[48]) }
func (gdClass CPUParticles2D) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[49], radius) }
func (gdClass CPUParticles2D) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles2D[50]) }
func (gdClass CPUParticles2D) SetEmissionRectExtents(extents Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[51], extents) }
func (gdClass CPUParticles2D) GetEmissionRectExtents() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[52]) }
func (gdClass CPUParticles2D) SetEmissionPoints(array []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[53], array) }
func (gdClass CPUParticles2D) GetEmissionPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCPUParticles2D[54]) }
func (gdClass CPUParticles2D) SetEmissionNormals(array []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[55], array) }
func (gdClass CPUParticles2D) GetEmissionNormals() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCPUParticles2D[56]) }
func (gdClass CPUParticles2D) SetEmissionColors(array []Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[57], array) }
func (gdClass CPUParticles2D) GetEmissionColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodCPUParticles2D[58]) }
func (gdClass CPUParticles2D) GetGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCPUParticles2D[59]) }
func (gdClass CPUParticles2D) SetGravity(accel_vec Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[60], accel_vec) }
func (gdClass CPUParticles2D) GetSplitScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles2D[61]) }
func (gdClass CPUParticles2D) SetSplitScale(split_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[62], split_scale) }
func (gdClass CPUParticles2D) GetScaleCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[63]) }
func (gdClass CPUParticles2D) SetScaleCurveX(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[64], scale_curve) }
func (gdClass CPUParticles2D) GetScaleCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles2D[65]) }
func (gdClass CPUParticles2D) SetScaleCurveY(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[66], scale_curve) }
func (gdClass CPUParticles2D) ConvertFromParticles(particles Node)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles2D[67], particles) }

type CPUParticles3DDrawOrder int64

const (
	CPUParticles3DDrawOrderIndex CPUParticles3DDrawOrder = 0
	CPUParticles3DDrawOrderLifetime CPUParticles3DDrawOrder = 1
	CPUParticles3DDrawOrderViewDepth CPUParticles3DDrawOrder = 2
)

type CPUParticles3DParameter int64

const (
	CPUParticles3DParamInitialLinearVelocity CPUParticles3DParameter = 0
	CPUParticles3DParamAngularVelocity CPUParticles3DParameter = 1
	CPUParticles3DParamOrbitVelocity CPUParticles3DParameter = 2
	CPUParticles3DParamLinearAccel CPUParticles3DParameter = 3
	CPUParticles3DParamRadialAccel CPUParticles3DParameter = 4
	CPUParticles3DParamTangentialAccel CPUParticles3DParameter = 5
	CPUParticles3DParamDamping CPUParticles3DParameter = 6
	CPUParticles3DParamAngle CPUParticles3DParameter = 7
	CPUParticles3DParamScale CPUParticles3DParameter = 8
	CPUParticles3DParamHueVariation CPUParticles3DParameter = 9
	CPUParticles3DParamAnimSpeed CPUParticles3DParameter = 10
	CPUParticles3DParamAnimOffset CPUParticles3DParameter = 11
	CPUParticles3DParamMax CPUParticles3DParameter = 12
)

type CPUParticles3DParticleFlags int64

const (
	CPUParticles3DParticleFlagAlignYToVelocity CPUParticles3DParticleFlags = 0
	CPUParticles3DParticleFlagRotateY CPUParticles3DParticleFlags = 1
	CPUParticles3DParticleFlagDisableZ CPUParticles3DParticleFlags = 2
	CPUParticles3DParticleFlagMax CPUParticles3DParticleFlags = 3
)

type CPUParticles3DEmissionShape int64

const (
	CPUParticles3DEmissionShapePoint CPUParticles3DEmissionShape = 0
	CPUParticles3DEmissionShapeSphere CPUParticles3DEmissionShape = 1
	CPUParticles3DEmissionShapeSphereSurface CPUParticles3DEmissionShape = 2
	CPUParticles3DEmissionShapeBox CPUParticles3DEmissionShape = 3
	CPUParticles3DEmissionShapePoints CPUParticles3DEmissionShape = 4
	CPUParticles3DEmissionShapeDirectedPoints CPUParticles3DEmissionShape = 5
	CPUParticles3DEmissionShapeRing CPUParticles3DEmissionShape = 6
	CPUParticles3DEmissionShapeMax CPUParticles3DEmissionShape = 7
)

type CPUParticles3D gdnative.Object
func (CPUParticles3D) class() string { return "CPUParticles3D\000" }

func (gdClass CPUParticles3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodCPUParticles3D [80]gdnative.Method
func (gdClass CPUParticles3D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[0], emitting) }
func (gdClass CPUParticles3D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[1], amount) }
func (gdClass CPUParticles3D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[2], secs) }
func (gdClass CPUParticles3D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[3], enable) }
func (gdClass CPUParticles3D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[4], secs) }
func (gdClass CPUParticles3D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[5], ratio) }
func (gdClass CPUParticles3D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[6], ratio) }
func (gdClass CPUParticles3D) SetLifetimeRandomness(random float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[7], random) }
func (gdClass CPUParticles3D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[8], enable) }
func (gdClass CPUParticles3D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[9], fps) }
func (gdClass CPUParticles3D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[10], enable) }
func (gdClass CPUParticles3D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[11], scale) }
func (gdClass CPUParticles3D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[12]) }
func (gdClass CPUParticles3D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles3D[13]) }
func (gdClass CPUParticles3D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[14]) }
func (gdClass CPUParticles3D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[15]) }
func (gdClass CPUParticles3D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[16]) }
func (gdClass CPUParticles3D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[17]) }
func (gdClass CPUParticles3D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[18]) }
func (gdClass CPUParticles3D) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[19]) }
func (gdClass CPUParticles3D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[20]) }
func (gdClass CPUParticles3D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCPUParticles3D[21]) }
func (gdClass CPUParticles3D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[22]) }
func (gdClass CPUParticles3D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[23]) }
func (gdClass CPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[24], order) }
func (gdClass CPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder { return gdnative.Return[CPUParticles3DDrawOrder](gdnative.Object(gdClass), methodCPUParticles3D[25]) }
func (gdClass CPUParticles3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[26], mesh) }
func (gdClass CPUParticles3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodCPUParticles3D[27]) }
func (gdClass CPUParticles3D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[28]) }
func (gdClass CPUParticles3D) SetDirection(direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[29], direction) }
func (gdClass CPUParticles3D) GetDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[30]) }
func (gdClass CPUParticles3D) SetSpread(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[31], degrees) }
func (gdClass CPUParticles3D) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[32]) }
func (gdClass CPUParticles3D) SetFlatness(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[33], amount) }
func (gdClass CPUParticles3D) GetFlatness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[34]) }
func (gdClass CPUParticles3D) SetParamMin(param CPUParticles3DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[35], param, value) }
func (gdClass CPUParticles3D) GetParamMin(param CPUParticles3DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[36], param) }
func (gdClass CPUParticles3D) SetParamMax(param CPUParticles3DParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[37], param, value) }
func (gdClass CPUParticles3D) GetParamMax(param CPUParticles3DParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[38], param) }
func (gdClass CPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[39], param, curve) }
func (gdClass CPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[40], param) }
func (gdClass CPUParticles3D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[41], color) }
func (gdClass CPUParticles3D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCPUParticles3D[42]) }
func (gdClass CPUParticles3D) SetColorRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[43], ramp) }
func (gdClass CPUParticles3D) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles3D[44]) }
func (gdClass CPUParticles3D) SetColorInitialRamp(ramp Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[45], ramp) }
func (gdClass CPUParticles3D) GetColorInitialRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodCPUParticles3D[46]) }
func (gdClass CPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[47], particle_flag, enable) }
func (gdClass CPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[48], particle_flag) }
func (gdClass CPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[49], shape) }
func (gdClass CPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape { return gdnative.Return[CPUParticles3DEmissionShape](gdnative.Object(gdClass), methodCPUParticles3D[50]) }
func (gdClass CPUParticles3D) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[51], radius) }
func (gdClass CPUParticles3D) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[52]) }
func (gdClass CPUParticles3D) SetEmissionBoxExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[53], extents) }
func (gdClass CPUParticles3D) GetEmissionBoxExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[54]) }
func (gdClass CPUParticles3D) SetEmissionPoints(array []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[55], array) }
func (gdClass CPUParticles3D) GetEmissionPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCPUParticles3D[56]) }
func (gdClass CPUParticles3D) SetEmissionNormals(array []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[57], array) }
func (gdClass CPUParticles3D) GetEmissionNormals() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCPUParticles3D[58]) }
func (gdClass CPUParticles3D) SetEmissionColors(array []Color)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[59], array) }
func (gdClass CPUParticles3D) GetEmissionColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodCPUParticles3D[60]) }
func (gdClass CPUParticles3D) SetEmissionRingAxis(axis Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[61], axis) }
func (gdClass CPUParticles3D) GetEmissionRingAxis() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[62]) }
func (gdClass CPUParticles3D) SetEmissionRingHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[63], height) }
func (gdClass CPUParticles3D) GetEmissionRingHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[64]) }
func (gdClass CPUParticles3D) SetEmissionRingRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[65], radius) }
func (gdClass CPUParticles3D) GetEmissionRingRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[66]) }
func (gdClass CPUParticles3D) SetEmissionRingInnerRadius(inner_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[67], inner_radius) }
func (gdClass CPUParticles3D) GetEmissionRingInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCPUParticles3D[68]) }
func (gdClass CPUParticles3D) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCPUParticles3D[69]) }
func (gdClass CPUParticles3D) SetGravity(accel_vec Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[70], accel_vec) }
func (gdClass CPUParticles3D) GetSplitScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCPUParticles3D[71]) }
func (gdClass CPUParticles3D) SetSplitScale(split_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[72], split_scale) }
func (gdClass CPUParticles3D) GetScaleCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[73]) }
func (gdClass CPUParticles3D) SetScaleCurveX(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[74], scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[75]) }
func (gdClass CPUParticles3D) SetScaleCurveY(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[76], scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveZ() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCPUParticles3D[77]) }
func (gdClass CPUParticles3D) SetScaleCurveZ(scale_curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[78], scale_curve) }
func (gdClass CPUParticles3D) ConvertFromParticles(particles Node)  { gdnative.Call(gdnative.Object(gdClass), methodCPUParticles3D[79], particles) }

type CSGBox3D gdnative.Object
func (CSGBox3D) class() string { return "CSGBox3D\000" }

func (gdClass CSGBox3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGBox3D [4]gdnative.Method
func (gdClass CSGBox3D) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCSGBox3D[0], size) }
func (gdClass CSGBox3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCSGBox3D[1]) }
func (gdClass CSGBox3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGBox3D[2], material) }
func (gdClass CSGBox3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGBox3D[3]) }

type CSGCombiner3D gdnative.Object
func (CSGCombiner3D) class() string { return "CSGCombiner3D\000" }

func (gdClass CSGCombiner3D) CSGShape3D() CSGShape3D { return CSGShape3D(gdClass) }


type CSGCylinder3D gdnative.Object
func (CSGCylinder3D) class() string { return "CSGCylinder3D\000" }

func (gdClass CSGCylinder3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGCylinder3D [12]gdnative.Method
func (gdClass CSGCylinder3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[0], radius) }
func (gdClass CSGCylinder3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGCylinder3D[1]) }
func (gdClass CSGCylinder3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[2], height) }
func (gdClass CSGCylinder3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGCylinder3D[3]) }
func (gdClass CSGCylinder3D) SetSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[4], sides) }
func (gdClass CSGCylinder3D) GetSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGCylinder3D[5]) }
func (gdClass CSGCylinder3D) SetCone(cone bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[6], cone) }
func (gdClass CSGCylinder3D) IsCone() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGCylinder3D[7]) }
func (gdClass CSGCylinder3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[8], material) }
func (gdClass CSGCylinder3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGCylinder3D[9]) }
func (gdClass CSGCylinder3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGCylinder3D[10], smooth_faces) }
func (gdClass CSGCylinder3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGCylinder3D[11]) }

type CSGMesh3D gdnative.Object
func (CSGMesh3D) class() string { return "CSGMesh3D\000" }

func (gdClass CSGMesh3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGMesh3D [4]gdnative.Method
func (gdClass CSGMesh3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodCSGMesh3D[0], mesh) }
func (gdClass CSGMesh3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodCSGMesh3D[1]) }
func (gdClass CSGMesh3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGMesh3D[2], material) }
func (gdClass CSGMesh3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGMesh3D[3]) }

type CSGPolygon3DMode int64

const (
	CSGPolygon3DModeDepth CSGPolygon3DMode = 0
	CSGPolygon3DModeSpin CSGPolygon3DMode = 1
	CSGPolygon3DModePath CSGPolygon3DMode = 2
)

type CSGPolygon3DPathRotation int64

const (
	CSGPolygon3DPathRotationPolygon CSGPolygon3DPathRotation = 0
	CSGPolygon3DPathRotationPath CSGPolygon3DPathRotation = 1
	CSGPolygon3DPathRotationPathFollow CSGPolygon3DPathRotation = 2
)

type CSGPolygon3DPathIntervalType int64

const (
	CSGPolygon3DPathIntervalDistance CSGPolygon3DPathIntervalType = 0
	CSGPolygon3DPathIntervalSubdivide CSGPolygon3DPathIntervalType = 1
)

type CSGPolygon3D gdnative.Object
func (CSGPolygon3D) class() string { return "CSGPolygon3D\000" }

func (gdClass CSGPolygon3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGPolygon3D [32]gdnative.Method
func (gdClass CSGPolygon3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[0], polygon) }
func (gdClass CSGPolygon3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCSGPolygon3D[1]) }
func (gdClass CSGPolygon3D) SetMode(mode CSGPolygon3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[2], mode) }
func (gdClass CSGPolygon3D) GetMode() CSGPolygon3DMode { return gdnative.Return[CSGPolygon3DMode](gdnative.Object(gdClass), methodCSGPolygon3D[3]) }
func (gdClass CSGPolygon3D) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[4], depth) }
func (gdClass CSGPolygon3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[5]) }
func (gdClass CSGPolygon3D) SetSpinDegrees(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[6], degrees) }
func (gdClass CSGPolygon3D) GetSpinDegrees() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[7]) }
func (gdClass CSGPolygon3D) SetSpinSides(spin_sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[8], spin_sides) }
func (gdClass CSGPolygon3D) GetSpinSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGPolygon3D[9]) }
func (gdClass CSGPolygon3D) SetPathNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[10], path) }
func (gdClass CSGPolygon3D) GetPathNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodCSGPolygon3D[11]) }
func (gdClass CSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[12], interval_type) }
func (gdClass CSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType { return gdnative.Return[CSGPolygon3DPathIntervalType](gdnative.Object(gdClass), methodCSGPolygon3D[13]) }
func (gdClass CSGPolygon3D) SetPathInterval(interval float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[14], interval) }
func (gdClass CSGPolygon3D) GetPathInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[15]) }
func (gdClass CSGPolygon3D) SetPathSimplifyAngle(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[16], degrees) }
func (gdClass CSGPolygon3D) GetPathSimplifyAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[17]) }
func (gdClass CSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[18], path_rotation) }
func (gdClass CSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation { return gdnative.Return[CSGPolygon3DPathRotation](gdnative.Object(gdClass), methodCSGPolygon3D[19]) }
func (gdClass CSGPolygon3D) SetPathLocal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[20], enable) }
func (gdClass CSGPolygon3D) IsPathLocal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[21]) }
func (gdClass CSGPolygon3D) SetPathContinuousU(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[22], enable) }
func (gdClass CSGPolygon3D) IsPathContinuousU() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[23]) }
func (gdClass CSGPolygon3D) SetPathUDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[24], distance) }
func (gdClass CSGPolygon3D) GetPathUDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGPolygon3D[25]) }
func (gdClass CSGPolygon3D) SetPathJoined(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[26], enable) }
func (gdClass CSGPolygon3D) IsPathJoined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[27]) }
func (gdClass CSGPolygon3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[28], material) }
func (gdClass CSGPolygon3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGPolygon3D[29]) }
func (gdClass CSGPolygon3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPolygon3D[30], smooth_faces) }
func (gdClass CSGPolygon3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPolygon3D[31]) }

type CSGPrimitive3D gdnative.Object
func (CSGPrimitive3D) class() string { return "CSGPrimitive3D\000" }

func (gdClass CSGPrimitive3D) CSGShape3D() CSGShape3D { return CSGShape3D(gdClass) }

var methodCSGPrimitive3D [2]gdnative.Method
func (gdClass CSGPrimitive3D) SetFlipFaces(flip_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGPrimitive3D[0], flip_faces) }
func (gdClass CSGPrimitive3D) GetFlipFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGPrimitive3D[1]) }

type CSGShape3DOperation int64

const (
	CSGShape3DOperationUnion CSGShape3DOperation = 0
	CSGShape3DOperationIntersection CSGShape3DOperation = 1
	CSGShape3DOperationSubtraction CSGShape3DOperation = 2
)

type CSGShape3D gdnative.Object
func (CSGShape3D) class() string { return "CSGShape3D\000" }

func (gdClass CSGShape3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodCSGShape3D [18]gdnative.Method
func (gdClass CSGShape3D) IsRootShape() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[0]) }
func (gdClass CSGShape3D) SetOperation(operation CSGShape3DOperation)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[1], operation) }
func (gdClass CSGShape3D) GetOperation() CSGShape3DOperation { return gdnative.Return[CSGShape3DOperation](gdnative.Object(gdClass), methodCSGShape3D[2]) }
func (gdClass CSGShape3D) SetSnap(snap float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[3], snap) }
func (gdClass CSGShape3D) GetSnap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGShape3D[4]) }
func (gdClass CSGShape3D) SetUseCollision(operation bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[5], operation) }
func (gdClass CSGShape3D) IsUsingCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[6]) }
func (gdClass CSGShape3D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[7], layer) }
func (gdClass CSGShape3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGShape3D[8]) }
func (gdClass CSGShape3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[9], mask) }
func (gdClass CSGShape3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGShape3D[10]) }
func (gdClass CSGShape3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[11], layer_number, value) }
func (gdClass CSGShape3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[12], layer_number) }
func (gdClass CSGShape3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[13], layer_number, value) }
func (gdClass CSGShape3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[14], layer_number) }
func (gdClass CSGShape3D) SetCalculateTangents(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGShape3D[15], enabled) }
func (gdClass CSGShape3D) IsCalculatingTangents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGShape3D[16]) }
func (gdClass CSGShape3D) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCSGShape3D[17]) }

type CSGSphere3D gdnative.Object
func (CSGSphere3D) class() string { return "CSGSphere3D\000" }

func (gdClass CSGSphere3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGSphere3D [10]gdnative.Method
func (gdClass CSGSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[0], radius) }
func (gdClass CSGSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGSphere3D[1]) }
func (gdClass CSGSphere3D) SetRadialSegments(radial_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[2], radial_segments) }
func (gdClass CSGSphere3D) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGSphere3D[3]) }
func (gdClass CSGSphere3D) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[4], rings) }
func (gdClass CSGSphere3D) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGSphere3D[5]) }
func (gdClass CSGSphere3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[6], smooth_faces) }
func (gdClass CSGSphere3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGSphere3D[7]) }
func (gdClass CSGSphere3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGSphere3D[8], material) }
func (gdClass CSGSphere3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGSphere3D[9]) }

type CSGTorus3D gdnative.Object
func (CSGTorus3D) class() string { return "CSGTorus3D\000" }

func (gdClass CSGTorus3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D(gdClass) }

var methodCSGTorus3D [12]gdnative.Method
func (gdClass CSGTorus3D) SetInnerRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[0], radius) }
func (gdClass CSGTorus3D) GetInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGTorus3D[1]) }
func (gdClass CSGTorus3D) SetOuterRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[2], radius) }
func (gdClass CSGTorus3D) GetOuterRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCSGTorus3D[3]) }
func (gdClass CSGTorus3D) SetSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[4], sides) }
func (gdClass CSGTorus3D) GetSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGTorus3D[5]) }
func (gdClass CSGTorus3D) SetRingSides(sides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[6], sides) }
func (gdClass CSGTorus3D) GetRingSides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCSGTorus3D[7]) }
func (gdClass CSGTorus3D) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[8], material) }
func (gdClass CSGTorus3D) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCSGTorus3D[9]) }
func (gdClass CSGTorus3D) SetSmoothFaces(smooth_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCSGTorus3D[10], smooth_faces) }
func (gdClass CSGTorus3D) GetSmoothFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCSGTorus3D[11]) }

type CallbackTweener gdnative.Object
func (CallbackTweener) class() string { return "CallbackTweener\000" }

func (gdClass CallbackTweener) Tweener() Tweener { return Tweener(gdClass) }

var methodCallbackTweener [1]gdnative.Method
func (gdClass CallbackTweener) SetDelay(delay float64) CallbackTweener { return gdnative.Return[CallbackTweener](gdnative.Object(gdClass), methodCallbackTweener[0], delay) }

type Camera2DAnchorMode int64

const (
	Camera2DAnchorModeFixedTopLeft Camera2DAnchorMode = 0
	Camera2DAnchorModeDragCenter Camera2DAnchorMode = 1
)

type Camera2DCamera2DProcessCallback int64

const (
	Camera2DCamera2dProcessPhysics Camera2DCamera2DProcessCallback = 0
	Camera2DCamera2dProcessIdle Camera2DCamera2DProcessCallback = 1
)

type Camera2D gdnative.Object
func (Camera2D) class() string { return "Camera2D\000" }

func (gdClass Camera2D) Node2D() Node2D { return Node2D(gdClass) }

var methodCamera2D [43]gdnative.Method
func (gdClass Camera2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[0], offset) }
func (gdClass Camera2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[1]) }
func (gdClass Camera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[2], anchor_mode) }
func (gdClass Camera2D) GetAnchorMode() Camera2DAnchorMode { return gdnative.Return[Camera2DAnchorMode](gdnative.Object(gdClass), methodCamera2D[3]) }
func (gdClass Camera2D) SetRotating(rotating bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[4], rotating) }
func (gdClass Camera2D) IsRotating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[5]) }
func (gdClass Camera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[6], mode) }
func (gdClass Camera2D) GetProcessCallback() Camera2DCamera2DProcessCallback { return gdnative.Return[Camera2DCamera2DProcessCallback](gdnative.Object(gdClass), methodCamera2D[7]) }
func (gdClass Camera2D) SetCurrent(current bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[8], current) }
func (gdClass Camera2D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[9]) }
func (gdClass Camera2D) SetLimit(margin Side, limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[10], margin, limit) }
func (gdClass Camera2D) GetLimit(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCamera2D[11], margin) }
func (gdClass Camera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[12], limit_smoothing_enabled) }
func (gdClass Camera2D) IsLimitSmoothingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[13]) }
func (gdClass Camera2D) SetDragVerticalEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[14], enabled) }
func (gdClass Camera2D) IsDragVerticalEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[15]) }
func (gdClass Camera2D) SetDragHorizontalEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[16], enabled) }
func (gdClass Camera2D) IsDragHorizontalEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[17]) }
func (gdClass Camera2D) SetDragVerticalOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[18], offset) }
func (gdClass Camera2D) GetDragVerticalOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[19]) }
func (gdClass Camera2D) SetDragHorizontalOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[20], offset) }
func (gdClass Camera2D) GetDragHorizontalOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[21]) }
func (gdClass Camera2D) SetDragMargin(margin Side, drag_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[22], margin, drag_margin) }
func (gdClass Camera2D) GetDragMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[23], margin) }
func (gdClass Camera2D) GetCameraPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[24]) }
func (gdClass Camera2D) GetCameraScreenCenter() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[25]) }
func (gdClass Camera2D) SetZoom(zoom Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[26], zoom) }
func (gdClass Camera2D) GetZoom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera2D[27]) }
func (gdClass Camera2D) SetCustomViewport(viewport Node)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[28], viewport) }
func (gdClass Camera2D) GetCustomViewport() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodCamera2D[29]) }
func (gdClass Camera2D) SetFollowSmoothing(follow_smoothing float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[30], follow_smoothing) }
func (gdClass Camera2D) GetFollowSmoothing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera2D[31]) }
func (gdClass Camera2D) SetEnableFollowSmoothing(follow_smoothing bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[32], follow_smoothing) }
func (gdClass Camera2D) IsFollowSmoothingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[33]) }
func (gdClass Camera2D) ForceUpdateScroll()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[34]) }
func (gdClass Camera2D) ResetSmoothing()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[35]) }
func (gdClass Camera2D) Align()  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[36]) }
func (gdClass Camera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[37], screen_drawing_enabled) }
func (gdClass Camera2D) IsScreenDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[38]) }
func (gdClass Camera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[39], limit_drawing_enabled) }
func (gdClass Camera2D) IsLimitDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[40]) }
func (gdClass Camera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera2D[41], margin_drawing_enabled) }
func (gdClass Camera2D) IsMarginDrawingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera2D[42]) }

type Camera3DProjectionType int64

const (
	Camera3DProjectionPerspective Camera3DProjectionType = 0
	Camera3DProjectionOrthogonal Camera3DProjectionType = 1
	Camera3DProjectionFrustum Camera3DProjectionType = 2
)

type Camera3DKeepAspect int64

const (
	Camera3DKeepWidth Camera3DKeepAspect = 0
	Camera3DKeepHeight Camera3DKeepAspect = 1
)

type Camera3DDopplerTracking int64

const (
	Camera3DDopplerTrackingDisabled Camera3DDopplerTracking = 0
	Camera3DDopplerTrackingIdleStep Camera3DDopplerTracking = 1
	Camera3DDopplerTrackingPhysicsStep Camera3DDopplerTracking = 2
)

type Camera3D gdnative.Object
func (Camera3D) class() string { return "Camera3D\000" }

func (gdClass Camera3D) Node3D() Node3D { return Node3D(gdClass) }

var methodCamera3D [46]gdnative.Method
func (gdClass Camera3D) ProjectRayNormal(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[0], screen_point) }
func (gdClass Camera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[1], screen_point) }
func (gdClass Camera3D) ProjectRayOrigin(screen_point Vector2) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[2], screen_point) }
func (gdClass Camera3D) UnprojectPosition(world_point Vector3) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera3D[3], world_point) }
func (gdClass Camera3D) IsPositionBehind(world_point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[4], world_point) }
func (gdClass Camera3D) ProjectPosition(screen_point Vector2, z_depth float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCamera3D[5], screen_point, z_depth) }
func (gdClass Camera3D) SetPerspective(fov float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[6], fov, z_near, z_far) }
func (gdClass Camera3D) SetOrthogonal(size float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[7], size, z_near, z_far) }
func (gdClass Camera3D) SetFrustum(size float64, offset Vector2, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[8], size, offset, z_near, z_far) }
func (gdClass Camera3D) MakeCurrent()  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[9]) }
func (gdClass Camera3D) ClearCurrent(enable_next bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[10], enable_next) }
func (gdClass Camera3D) SetCurrent(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[11], enabled) }
func (gdClass Camera3D) IsCurrent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[12]) }
func (gdClass Camera3D) GetCameraTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodCamera3D[13]) }
func (gdClass Camera3D) GetFov() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[14]) }
func (gdClass Camera3D) GetFrustumOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCamera3D[15]) }
func (gdClass Camera3D) GetSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[16]) }
func (gdClass Camera3D) GetFar() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[17]) }
func (gdClass Camera3D) GetNear() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[18]) }
func (gdClass Camera3D) SetFov(fov float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[19], fov) }
func (gdClass Camera3D) SetFrustumOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[20], offset) }
func (gdClass Camera3D) SetSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[21], size) }
func (gdClass Camera3D) SetFar(far float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[22], far) }
func (gdClass Camera3D) SetNear(near float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[23], near) }
func (gdClass Camera3D) GetProjection() Camera3DProjectionType { return gdnative.Return[Camera3DProjectionType](gdnative.Object(gdClass), methodCamera3D[24]) }
func (gdClass Camera3D) SetProjection(mode Camera3DProjectionType)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[25], mode) }
func (gdClass Camera3D) SetHOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[26], offset) }
func (gdClass Camera3D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[27]) }
func (gdClass Camera3D) SetVOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[28], offset) }
func (gdClass Camera3D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCamera3D[29]) }
func (gdClass Camera3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[30], mask) }
func (gdClass Camera3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCamera3D[31]) }
func (gdClass Camera3D) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[32], env) }
func (gdClass Camera3D) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodCamera3D[33]) }
func (gdClass Camera3D) SetEffects(env CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[34], env) }
func (gdClass Camera3D) GetEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodCamera3D[35]) }
func (gdClass Camera3D) SetKeepAspectMode(mode Camera3DKeepAspect)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[36], mode) }
func (gdClass Camera3D) GetKeepAspectMode() Camera3DKeepAspect { return gdnative.Return[Camera3DKeepAspect](gdnative.Object(gdClass), methodCamera3D[37]) }
func (gdClass Camera3D) SetDopplerTracking(mode Camera3DDopplerTracking)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[38], mode) }
func (gdClass Camera3D) GetDopplerTracking() Camera3DDopplerTracking { return gdnative.Return[Camera3DDopplerTracking](gdnative.Object(gdClass), methodCamera3D[39]) }
func (gdClass Camera3D) GetFrustum() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCamera3D[40]) }
func (gdClass Camera3D) IsPositionInFrustum(world_point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[41], world_point) }
func (gdClass Camera3D) GetCameraRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCamera3D[42]) }
func (gdClass Camera3D) GetPyramidShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCamera3D[43]) }
func (gdClass Camera3D) SetCullMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCamera3D[44], layer_number, value) }
func (gdClass Camera3D) GetCullMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCamera3D[45], layer_number) }

type CameraEffects gdnative.Object
func (CameraEffects) class() string { return "CameraEffects\000" }

func (gdClass CameraEffects) Resource() Resource { return Resource(gdClass) }

var methodCameraEffects [18]gdnative.Method
func (gdClass CameraEffects) SetDofBlurFarEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[0], enabled) }
func (gdClass CameraEffects) IsDofBlurFarEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[1]) }
func (gdClass CameraEffects) SetDofBlurFarDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[2], distance) }
func (gdClass CameraEffects) GetDofBlurFarDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[3]) }
func (gdClass CameraEffects) SetDofBlurFarTransition(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[4], distance) }
func (gdClass CameraEffects) GetDofBlurFarTransition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[5]) }
func (gdClass CameraEffects) SetDofBlurNearEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[6], enabled) }
func (gdClass CameraEffects) IsDofBlurNearEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[7]) }
func (gdClass CameraEffects) SetDofBlurNearDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[8], distance) }
func (gdClass CameraEffects) GetDofBlurNearDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[9]) }
func (gdClass CameraEffects) SetDofBlurNearTransition(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[10], distance) }
func (gdClass CameraEffects) GetDofBlurNearTransition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[11]) }
func (gdClass CameraEffects) SetDofBlurAmount(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[12], amount) }
func (gdClass CameraEffects) GetDofBlurAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[13]) }
func (gdClass CameraEffects) SetOverrideExposureEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[14], enabled) }
func (gdClass CameraEffects) IsOverrideExposureEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraEffects[15]) }
func (gdClass CameraEffects) SetOverrideExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraEffects[16], exposure) }
func (gdClass CameraEffects) GetOverrideExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCameraEffects[17]) }

type CameraFeedFeedDataType int64

const (
	CameraFeedFeedNoimage CameraFeedFeedDataType = 0
	CameraFeedFeedRgb CameraFeedFeedDataType = 1
	CameraFeedFeedYcbcr CameraFeedFeedDataType = 2
	CameraFeedFeedYcbcrSep CameraFeedFeedDataType = 3
)

type CameraFeedFeedPosition int64

const (
	CameraFeedFeedUnspecified CameraFeedFeedPosition = 0
	CameraFeedFeedFront CameraFeedFeedPosition = 1
	CameraFeedFeedBack CameraFeedFeedPosition = 2
)

type CameraFeed gdnative.Object
func (CameraFeed) class() string { return "CameraFeed\000" }

func (gdClass CameraFeed) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodCameraFeed [8]gdnative.Method
func (gdClass CameraFeed) GetId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraFeed[0]) }
func (gdClass CameraFeed) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraFeed[1]) }
func (gdClass CameraFeed) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraFeed[2], active) }
func (gdClass CameraFeed) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCameraFeed[3]) }
func (gdClass CameraFeed) GetPosition() CameraFeedFeedPosition { return gdnative.Return[CameraFeedFeedPosition](gdnative.Object(gdClass), methodCameraFeed[4]) }
func (gdClass CameraFeed) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCameraFeed[5]) }
func (gdClass CameraFeed) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCameraFeed[6], transform) }
func (gdClass CameraFeed) GetDatatype() CameraFeedFeedDataType { return gdnative.Return[CameraFeedFeedDataType](gdnative.Object(gdClass), methodCameraFeed[7]) }

type CameraServerFeedImage int64

const (
	CameraServerFeedRgbaImage CameraServerFeedImage = 0
	CameraServerFeedYcbcrImage CameraServerFeedImage = 0
	CameraServerFeedYImage CameraServerFeedImage = 0
	CameraServerFeedCbcrImage CameraServerFeedImage = 1
)

type CameraServer gdnative.Object
func (CameraServer) class() string { return "CameraServer\000" }

func (gdClass CameraServer) Object() Object { return Object(gdClass) }

var methodCameraServer [5]gdnative.Method
func (gdClass CameraServer) GetFeed(index int64) CameraFeed { return gdnative.Return[CameraFeed](gdnative.Object(gdClass), methodCameraServer[0], index) }
func (gdClass CameraServer) GetFeedCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraServer[1]) }
func (gdClass CameraServer) Feeds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCameraServer[2]) }
func (gdClass CameraServer) AddFeed(feed CameraFeed)  { gdnative.Call(gdnative.Object(gdClass), methodCameraServer[3], feed) }
func (gdClass CameraServer) RemoveFeed(feed CameraFeed)  { gdnative.Call(gdnative.Object(gdClass), methodCameraServer[4], feed) }

type CameraTexture gdnative.Object
func (CameraTexture) class() string { return "CameraTexture\000" }

func (gdClass CameraTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodCameraTexture [6]gdnative.Method
func (gdClass CameraTexture) SetCameraFeedId(feed_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[0], feed_id) }
func (gdClass CameraTexture) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCameraTexture[1]) }
func (gdClass CameraTexture) SetWhichFeed(which_feed CameraServerFeedImage)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[2], which_feed) }
func (gdClass CameraTexture) GetWhichFeed() CameraServerFeedImage { return gdnative.Return[CameraServerFeedImage](gdnative.Object(gdClass), methodCameraTexture[3]) }
func (gdClass CameraTexture) SetCameraActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodCameraTexture[4], active) }
func (gdClass CameraTexture) GetCameraActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCameraTexture[5]) }

type CanvasGroup gdnative.Object
func (CanvasGroup) class() string { return "CanvasGroup\000" }

func (gdClass CanvasGroup) Node2D() Node2D { return Node2D(gdClass) }

var methodCanvasGroup [6]gdnative.Method
func (gdClass CanvasGroup) SetFitMargin(fit_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[0], fit_margin) }
func (gdClass CanvasGroup) GetFitMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasGroup[1]) }
func (gdClass CanvasGroup) SetClearMargin(clear_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[2], clear_margin) }
func (gdClass CanvasGroup) GetClearMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasGroup[3]) }
func (gdClass CanvasGroup) SetUseMipmaps(use_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasGroup[4], use_mipmaps) }
func (gdClass CanvasGroup) IsUsingMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasGroup[5]) }

type CanvasItemTextureFilter int64

const (
	CanvasItemTextureFilterParentNode CanvasItemTextureFilter = 0
	CanvasItemTextureFilterNearest CanvasItemTextureFilter = 1
	CanvasItemTextureFilterLinear CanvasItemTextureFilter = 2
	CanvasItemTextureFilterNearestWithMipmaps CanvasItemTextureFilter = 3
	CanvasItemTextureFilterLinearWithMipmaps CanvasItemTextureFilter = 4
	CanvasItemTextureFilterNearestWithMipmapsAnisotropic CanvasItemTextureFilter = 5
	CanvasItemTextureFilterLinearWithMipmapsAnisotropic CanvasItemTextureFilter = 6
	CanvasItemTextureFilterMax CanvasItemTextureFilter = 7
)

type CanvasItemTextureRepeat int64

const (
	CanvasItemTextureRepeatParentNode CanvasItemTextureRepeat = 0
	CanvasItemTextureRepeatDisabled CanvasItemTextureRepeat = 1
	CanvasItemTextureRepeatEnabled CanvasItemTextureRepeat = 2
	CanvasItemTextureRepeatMirror CanvasItemTextureRepeat = 3
	CanvasItemTextureRepeatMax CanvasItemTextureRepeat = 4
)

type CanvasItem gdnative.Object
func (CanvasItem) class() string { return "CanvasItem\000" }

func (gdClass CanvasItem) Node() Node { return Node(gdClass) }

var methodCanvasItem [74]gdnative.Method
func (gdClass CanvasItem) virtual(val any, name string) any {	switch name {
	case "_draw":
		i, ok := val.(interface{ Draw()  })
		if ok {
			return i.Draw
		}
	}
	return nil
}
func (gdClass CanvasItem) GetCanvasItem() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasItem[0]) }
func (gdClass CanvasItem) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[1], visible) }
func (gdClass CanvasItem) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[2]) }
func (gdClass CanvasItem) IsVisibleInTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[3]) }
func (gdClass CanvasItem) Show()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[4]) }
func (gdClass CanvasItem) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[5]) }
func (gdClass CanvasItem) Update()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[6]) }
func (gdClass CanvasItem) SetAsTopLevel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[7], enable) }
func (gdClass CanvasItem) IsSetAsTopLevel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[8]) }
func (gdClass CanvasItem) SetLightMask(light_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[9], light_mask) }
func (gdClass CanvasItem) GetLightMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItem[10]) }
func (gdClass CanvasItem) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[11], modulate) }
func (gdClass CanvasItem) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasItem[12]) }
func (gdClass CanvasItem) SetSelfModulate(self_modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[13], self_modulate) }
func (gdClass CanvasItem) GetSelfModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasItem[14]) }
func (gdClass CanvasItem) SetDrawBehindParent(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[15], enable) }
func (gdClass CanvasItem) IsDrawBehindParentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[16]) }
func (gdClass CanvasItem) DrawLine(from Vector2, to Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[17], from, to, color, width, antialiased) }
func (gdClass CanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width float64, dash float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[18], from, to, color, width, dash) }
func (gdClass CanvasItem) DrawPolyline(points []Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[19], points, color, width, antialiased) }
func (gdClass CanvasItem) DrawPolylineColors(points []Vector2, colors []Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[20], points, colors, width, antialiased) }
func (gdClass CanvasItem) DrawArc(center Vector2, radius float64, start_angle float64, end_angle float64, point_count int64, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[21], center, radius, start_angle, end_angle, point_count, color, width, antialiased) }
func (gdClass CanvasItem) DrawMultiline(points []Vector2, color Color, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[22], points, color, width) }
func (gdClass CanvasItem) DrawMultilineColors(points []Vector2, colors []Color, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[23], points, colors, width) }
func (gdClass CanvasItem) DrawRect(rect Rect2, color Color, filled bool, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[24], rect, color, filled, width) }
func (gdClass CanvasItem) DrawCircle(position Vector2, radius float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[25], position, radius, color) }
func (gdClass CanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[26], texture, position, modulate) }
func (gdClass CanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[27], texture, rect, tile, modulate, transpose) }
func (gdClass CanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[28], texture, rect, src_rect, modulate, transpose, clip_uv) }
func (gdClass CanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline float64, pixel_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[29], texture, rect, src_rect, modulate, outline, pixel_range) }
func (gdClass CanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[30], style_box, rect) }
func (gdClass CanvasItem) DrawPrimitive(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[31], points, colors, uvs, texture, width) }
func (gdClass CanvasItem) DrawPolygon(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[32], points, colors, uvs, texture) }
func (gdClass CanvasItem) DrawColoredPolygon(points []Vector2, color Color, uvs []Vector2, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[33], points, color, uvs, texture) }
func (gdClass CanvasItem) DrawString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[34], font, pos, text, alignment, width, font_size, modulate, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawMultilineString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[35], font, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[36], font, pos, text, alignment, width, font_size, size, modulate, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[37], font, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass CanvasItem) DrawChar(font Font, pos Vector2, char string, font_size int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[38], font, pos, char, font_size, modulate) }
func (gdClass CanvasItem) DrawCharOutline(font Font, pos Vector2, char string, font_size int64, size int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[39], font, pos, char, font_size, size, modulate) }
func (gdClass CanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[40], mesh, texture, transform, modulate) }
func (gdClass CanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[41], multimesh, texture) }
func (gdClass CanvasItem) DrawSetTransform(position Vector2, rotation float64, scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[42], position, rotation, scale) }
func (gdClass CanvasItem) DrawSetTransformMatrix(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[43], xform) }
func (gdClass CanvasItem) DrawAnimationSlice(animation_length float64, slice_begin float64, slice_end float64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[44], animation_length, slice_begin, slice_end, offset) }
func (gdClass CanvasItem) DrawEndAnimation()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[45]) }
func (gdClass CanvasItem) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[46]) }
func (gdClass CanvasItem) GetGlobalTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[47]) }
func (gdClass CanvasItem) GetGlobalTransformWithCanvas() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[48]) }
func (gdClass CanvasItem) GetViewportTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[49]) }
func (gdClass CanvasItem) GetViewportRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodCanvasItem[50]) }
func (gdClass CanvasItem) GetCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[51]) }
func (gdClass CanvasItem) GetScreenTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasItem[52]) }
func (gdClass CanvasItem) GetLocalMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[53]) }
func (gdClass CanvasItem) GetGlobalMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[54]) }
func (gdClass CanvasItem) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasItem[55]) }
func (gdClass CanvasItem) GetWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodCanvasItem[56]) }
func (gdClass CanvasItem) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[57], material) }
func (gdClass CanvasItem) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodCanvasItem[58]) }
func (gdClass CanvasItem) SetUseParentMaterial(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[59], enable) }
func (gdClass CanvasItem) GetUseParentMaterial() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[60]) }
func (gdClass CanvasItem) SetNotifyLocalTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[61], enable) }
func (gdClass CanvasItem) IsLocalTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[62]) }
func (gdClass CanvasItem) SetNotifyTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[63], enable) }
func (gdClass CanvasItem) IsTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[64]) }
func (gdClass CanvasItem) ForceUpdateTransform()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[65]) }
func (gdClass CanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasItem[66], screen_point) }
func (gdClass CanvasItem) MakeInputLocal(event InputEvent) InputEvent { return gdnative.Return[InputEvent](gdnative.Object(gdClass), methodCanvasItem[67], event) }
func (gdClass CanvasItem) SetTextureFilter(mode CanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[68], mode) }
func (gdClass CanvasItem) GetTextureFilter() CanvasItemTextureFilter { return gdnative.Return[CanvasItemTextureFilter](gdnative.Object(gdClass), methodCanvasItem[69]) }
func (gdClass CanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[70], mode) }
func (gdClass CanvasItem) GetTextureRepeat() CanvasItemTextureRepeat { return gdnative.Return[CanvasItemTextureRepeat](gdnative.Object(gdClass), methodCanvasItem[71]) }
func (gdClass CanvasItem) SetClipChildren(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItem[72], enable) }
func (gdClass CanvasItem) IsClippingChildren() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItem[73]) }

type CanvasItemMaterialBlendMode int64

const (
	CanvasItemMaterialBlendModeMix CanvasItemMaterialBlendMode = 0
	CanvasItemMaterialBlendModeAdd CanvasItemMaterialBlendMode = 1
	CanvasItemMaterialBlendModeSub CanvasItemMaterialBlendMode = 2
	CanvasItemMaterialBlendModeMul CanvasItemMaterialBlendMode = 3
	CanvasItemMaterialBlendModePremultAlpha CanvasItemMaterialBlendMode = 4
)

type CanvasItemMaterialLightMode int64

const (
	CanvasItemMaterialLightModeNormal CanvasItemMaterialLightMode = 0
	CanvasItemMaterialLightModeUnshaded CanvasItemMaterialLightMode = 1
	CanvasItemMaterialLightModeLightOnly CanvasItemMaterialLightMode = 2
)

type CanvasItemMaterial gdnative.Object
func (CanvasItemMaterial) class() string { return "CanvasItemMaterial\000" }

func (gdClass CanvasItemMaterial) Material() Material { return Material(gdClass) }

var methodCanvasItemMaterial [12]gdnative.Method
func (gdClass CanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[0], blend_mode) }
func (gdClass CanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode { return gdnative.Return[CanvasItemMaterialBlendMode](gdnative.Object(gdClass), methodCanvasItemMaterial[1]) }
func (gdClass CanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[2], light_mode) }
func (gdClass CanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode { return gdnative.Return[CanvasItemMaterialLightMode](gdnative.Object(gdClass), methodCanvasItemMaterial[3]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimation(particles_anim bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[4], particles_anim) }
func (gdClass CanvasItemMaterial) GetParticlesAnimation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItemMaterial[5]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimHFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[6], frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimHFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItemMaterial[7]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimVFrames(frames int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[8], frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimVFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasItemMaterial[9]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasItemMaterial[10], loop) }
func (gdClass CanvasItemMaterial) GetParticlesAnimLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasItemMaterial[11]) }

type CanvasLayer gdnative.Object
func (CanvasLayer) class() string { return "CanvasLayer\000" }

func (gdClass CanvasLayer) Node() Node { return Node(gdClass) }

var methodCanvasLayer [21]gdnative.Method
func (gdClass CanvasLayer) SetLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[0], layer) }
func (gdClass CanvasLayer) GetLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCanvasLayer[1]) }
func (gdClass CanvasLayer) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[2], visible) }
func (gdClass CanvasLayer) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasLayer[3]) }
func (gdClass CanvasLayer) Show()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[4]) }
func (gdClass CanvasLayer) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[5]) }
func (gdClass CanvasLayer) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[6], transform) }
func (gdClass CanvasLayer) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCanvasLayer[7]) }
func (gdClass CanvasLayer) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[8], offset) }
func (gdClass CanvasLayer) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasLayer[9]) }
func (gdClass CanvasLayer) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[10], radians) }
func (gdClass CanvasLayer) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasLayer[11]) }
func (gdClass CanvasLayer) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[12], scale) }
func (gdClass CanvasLayer) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCanvasLayer[13]) }
func (gdClass CanvasLayer) SetFollowViewport(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[14], enable) }
func (gdClass CanvasLayer) IsFollowingViewport() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCanvasLayer[15]) }
func (gdClass CanvasLayer) SetFollowViewportScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[16], scale) }
func (gdClass CanvasLayer) GetFollowViewportScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasLayer[17]) }
func (gdClass CanvasLayer) SetCustomViewport(viewport Node)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasLayer[18], viewport) }
func (gdClass CanvasLayer) GetCustomViewport() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodCanvasLayer[19]) }
func (gdClass CanvasLayer) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCanvasLayer[20]) }

type CanvasModulate gdnative.Object
func (CanvasModulate) class() string { return "CanvasModulate\000" }

func (gdClass CanvasModulate) Node2D() Node2D { return Node2D(gdClass) }

var methodCanvasModulate [2]gdnative.Method
func (gdClass CanvasModulate) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasModulate[0], color) }
func (gdClass CanvasModulate) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasModulate[1]) }

type CanvasTexture gdnative.Object
func (CanvasTexture) class() string { return "CanvasTexture\000" }

func (gdClass CanvasTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodCanvasTexture [14]gdnative.Method
func (gdClass CanvasTexture) SetDiffuseTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[0], texture) }
func (gdClass CanvasTexture) GetDiffuseTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[1]) }
func (gdClass CanvasTexture) SetNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[2], texture) }
func (gdClass CanvasTexture) GetNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[3]) }
func (gdClass CanvasTexture) SetSpecularTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[4], texture) }
func (gdClass CanvasTexture) GetSpecularTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodCanvasTexture[5]) }
func (gdClass CanvasTexture) SetSpecularColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[6], color) }
func (gdClass CanvasTexture) GetSpecularColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCanvasTexture[7]) }
func (gdClass CanvasTexture) SetSpecularShininess(shininess float64)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[8], shininess) }
func (gdClass CanvasTexture) GetSpecularShininess() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCanvasTexture[9]) }
func (gdClass CanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[10], filter) }
func (gdClass CanvasTexture) GetTextureFilter() CanvasItemTextureFilter { return gdnative.Return[CanvasItemTextureFilter](gdnative.Object(gdClass), methodCanvasTexture[11]) }
func (gdClass CanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodCanvasTexture[12], repeat) }
func (gdClass CanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat { return gdnative.Return[CanvasItemTextureRepeat](gdnative.Object(gdClass), methodCanvasTexture[13]) }

type CapsuleMesh gdnative.Object
func (CapsuleMesh) class() string { return "CapsuleMesh\000" }

func (gdClass CapsuleMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodCapsuleMesh [8]gdnative.Method
func (gdClass CapsuleMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[0], radius) }
func (gdClass CapsuleMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleMesh[1]) }
func (gdClass CapsuleMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[2], height) }
func (gdClass CapsuleMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleMesh[3]) }
func (gdClass CapsuleMesh) SetRadialSegments(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[4], segments) }
func (gdClass CapsuleMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCapsuleMesh[5]) }
func (gdClass CapsuleMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleMesh[6], rings) }
func (gdClass CapsuleMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCapsuleMesh[7]) }

type CapsuleShape2D gdnative.Object
func (CapsuleShape2D) class() string { return "CapsuleShape2D\000" }

func (gdClass CapsuleShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodCapsuleShape2D [4]gdnative.Method
func (gdClass CapsuleShape2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape2D[0], radius) }
func (gdClass CapsuleShape2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape2D[1]) }
func (gdClass CapsuleShape2D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape2D[2], height) }
func (gdClass CapsuleShape2D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape2D[3]) }

type CapsuleShape3D gdnative.Object
func (CapsuleShape3D) class() string { return "CapsuleShape3D\000" }

func (gdClass CapsuleShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodCapsuleShape3D [4]gdnative.Method
func (gdClass CapsuleShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape3D[0], radius) }
func (gdClass CapsuleShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape3D[1]) }
func (gdClass CapsuleShape3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCapsuleShape3D[2], height) }
func (gdClass CapsuleShape3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCapsuleShape3D[3]) }

type CenterContainer gdnative.Object
func (CenterContainer) class() string { return "CenterContainer\000" }

func (gdClass CenterContainer) Container() Container { return Container(gdClass) }

var methodCenterContainer [2]gdnative.Method
func (gdClass CenterContainer) SetUseTopLeft(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCenterContainer[0], enable) }
func (gdClass CenterContainer) IsUsingTopLeft() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCenterContainer[1]) }

type CharFXTransform gdnative.Object
func (CharFXTransform) class() string { return "CharFXTransform\000" }

func (gdClass CharFXTransform) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodCharFXTransform [22]gdnative.Method
func (gdClass CharFXTransform) GetRange() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodCharFXTransform[0]) }
func (gdClass CharFXTransform) SetRange(arange Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[1], arange) }
func (gdClass CharFXTransform) GetElapsedTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharFXTransform[2]) }
func (gdClass CharFXTransform) SetElapsedTime(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[3], time) }
func (gdClass CharFXTransform) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharFXTransform[4]) }
func (gdClass CharFXTransform) SetVisibility(visibility bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[5], visibility) }
func (gdClass CharFXTransform) IsOutline() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharFXTransform[6]) }
func (gdClass CharFXTransform) SetOutline(outline bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[7], outline) }
func (gdClass CharFXTransform) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharFXTransform[8]) }
func (gdClass CharFXTransform) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[9], offset) }
func (gdClass CharFXTransform) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCharFXTransform[10]) }
func (gdClass CharFXTransform) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[11], color) }
func (gdClass CharFXTransform) GetEnvironment() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCharFXTransform[12]) }
func (gdClass CharFXTransform) SetEnvironment(environment Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[13], environment) }
func (gdClass CharFXTransform) GetGlyphIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[14]) }
func (gdClass CharFXTransform) SetGlyphIndex(glyph_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[15], glyph_index) }
func (gdClass CharFXTransform) GetGlyphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[16]) }
func (gdClass CharFXTransform) SetGlyphCount(glyph_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[17], glyph_count) }
func (gdClass CharFXTransform) GetGlyphFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharFXTransform[18]) }
func (gdClass CharFXTransform) SetGlyphFlags(glyph_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[19], glyph_flags) }
func (gdClass CharFXTransform) GetFont() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCharFXTransform[20]) }
func (gdClass CharFXTransform) SetFont(font RID)  { gdnative.Call(gdnative.Object(gdClass), methodCharFXTransform[21], font) }

type CharacterBody2DMotionMode int64

const (
	CharacterBody2DMotionModeGrounded CharacterBody2DMotionMode = 0
	CharacterBody2DMotionModeFloating CharacterBody2DMotionMode = 1
)

type CharacterBody2DMovingPlatformApplyVelocityOnLeave int64

const (
	CharacterBody2DPlatformVelOnLeaveAlways CharacterBody2DMovingPlatformApplyVelocityOnLeave = 0
	CharacterBody2DPlatformVelOnLeaveUpwardOnly CharacterBody2DMovingPlatformApplyVelocityOnLeave = 1
	CharacterBody2DPlatformVelOnLeaveNever CharacterBody2DMovingPlatformApplyVelocityOnLeave = 2
)

type CharacterBody2D gdnative.Object
func (CharacterBody2D) class() string { return "CharacterBody2D\000" }

func (gdClass CharacterBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D(gdClass) }

var methodCharacterBody2D [47]gdnative.Method
func (gdClass CharacterBody2D) MoveAndSlide() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[0]) }
func (gdClass CharacterBody2D) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[1], velocity) }
func (gdClass CharacterBody2D) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[2]) }
func (gdClass CharacterBody2D) SetSafeMargin(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[3], pixels) }
func (gdClass CharacterBody2D) GetSafeMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[4]) }
func (gdClass CharacterBody2D) IsFloorStopOnSlopeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[5]) }
func (gdClass CharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[6], enabled) }
func (gdClass CharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[7], enabled) }
func (gdClass CharacterBody2D) IsFloorConstantSpeedEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[8]) }
func (gdClass CharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[9], enabled) }
func (gdClass CharacterBody2D) IsFloorBlockOnWallEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[10]) }
func (gdClass CharacterBody2D) SetSlideOnCeilingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[11], enabled) }
func (gdClass CharacterBody2D) IsSlideOnCeilingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[12]) }
func (gdClass CharacterBody2D) SetMovingPlatformFloorLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[13], exclude_layer) }
func (gdClass CharacterBody2D) GetMovingPlatformFloorLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[14]) }
func (gdClass CharacterBody2D) SetMovingPlatformWallLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[15], exclude_layer) }
func (gdClass CharacterBody2D) GetMovingPlatformWallLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[16]) }
func (gdClass CharacterBody2D) GetMaxSlides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[17]) }
func (gdClass CharacterBody2D) SetMaxSlides(max_slides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[18], max_slides) }
func (gdClass CharacterBody2D) GetFloorMaxAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[19]) }
func (gdClass CharacterBody2D) SetFloorMaxAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[20], radians) }
func (gdClass CharacterBody2D) GetFloorSnapLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[21]) }
func (gdClass CharacterBody2D) SetFloorSnapLength(floor_snap_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[22], floor_snap_length) }
func (gdClass CharacterBody2D) GetWallMinSlideAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[23]) }
func (gdClass CharacterBody2D) SetWallMinSlideAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[24], radians) }
func (gdClass CharacterBody2D) GetUpDirection() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[25]) }
func (gdClass CharacterBody2D) SetUpDirection(up_direction Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[26], up_direction) }
func (gdClass CharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[27], mode) }
func (gdClass CharacterBody2D) GetMotionMode() CharacterBody2DMotionMode { return gdnative.Return[CharacterBody2DMotionMode](gdnative.Object(gdClass), methodCharacterBody2D[28]) }
func (gdClass CharacterBody2D) SetMovingPlatformApplyVelocityOnLeave(on_leave_apply_velocity CharacterBody2DMovingPlatformApplyVelocityOnLeave)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody2D[29], on_leave_apply_velocity) }
func (gdClass CharacterBody2D) GetMovingPlatformApplyVelocityOnLeave() CharacterBody2DMovingPlatformApplyVelocityOnLeave { return gdnative.Return[CharacterBody2DMovingPlatformApplyVelocityOnLeave](gdnative.Object(gdClass), methodCharacterBody2D[30]) }
func (gdClass CharacterBody2D) IsOnFloor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[31]) }
func (gdClass CharacterBody2D) IsOnFloorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[32]) }
func (gdClass CharacterBody2D) IsOnCeiling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[33]) }
func (gdClass CharacterBody2D) IsOnCeilingOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[34]) }
func (gdClass CharacterBody2D) IsOnWall() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[35]) }
func (gdClass CharacterBody2D) IsOnWallOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody2D[36]) }
func (gdClass CharacterBody2D) GetFloorNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[37]) }
func (gdClass CharacterBody2D) GetWallNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[38]) }
func (gdClass CharacterBody2D) GetLastMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[39]) }
func (gdClass CharacterBody2D) GetPositionDelta() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[40]) }
func (gdClass CharacterBody2D) GetRealVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[41]) }
func (gdClass CharacterBody2D) GetFloorAngle(up_direction Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody2D[42], up_direction) }
func (gdClass CharacterBody2D) GetPlatformVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCharacterBody2D[43]) }
func (gdClass CharacterBody2D) GetSlideCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody2D[44]) }
func (gdClass CharacterBody2D) GetSlideCollision(slide_idx int64) KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodCharacterBody2D[45], slide_idx) }
func (gdClass CharacterBody2D) GetLastSlideCollision() KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodCharacterBody2D[46]) }

type CharacterBody3DMotionMode int64

const (
	CharacterBody3DMotionModeGrounded CharacterBody3DMotionMode = 0
	CharacterBody3DMotionModeFloating CharacterBody3DMotionMode = 1
)

type CharacterBody3DMovingPlatformApplyVelocityOnLeave int64

const (
	CharacterBody3DPlatformVelOnLeaveAlways CharacterBody3DMovingPlatformApplyVelocityOnLeave = 0
	CharacterBody3DPlatformVelOnLeaveUpwardOnly CharacterBody3DMovingPlatformApplyVelocityOnLeave = 1
	CharacterBody3DPlatformVelOnLeaveNever CharacterBody3DMovingPlatformApplyVelocityOnLeave = 2
)

type CharacterBody3D gdnative.Object
func (CharacterBody3D) class() string { return "CharacterBody3D\000" }

func (gdClass CharacterBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D(gdClass) }

var methodCharacterBody3D [47]gdnative.Method
func (gdClass CharacterBody3D) MoveAndSlide() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[0]) }
func (gdClass CharacterBody3D) SetVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[1], velocity) }
func (gdClass CharacterBody3D) GetVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[2]) }
func (gdClass CharacterBody3D) SetSafeMargin(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[3], pixels) }
func (gdClass CharacterBody3D) GetSafeMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[4]) }
func (gdClass CharacterBody3D) IsFloorStopOnSlopeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[5]) }
func (gdClass CharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[6], enabled) }
func (gdClass CharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[7], enabled) }
func (gdClass CharacterBody3D) IsFloorConstantSpeedEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[8]) }
func (gdClass CharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[9], enabled) }
func (gdClass CharacterBody3D) IsFloorBlockOnWallEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[10]) }
func (gdClass CharacterBody3D) SetSlideOnCeilingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[11], enabled) }
func (gdClass CharacterBody3D) IsSlideOnCeilingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[12]) }
func (gdClass CharacterBody3D) SetMovingPlatformFloorLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[13], exclude_layer) }
func (gdClass CharacterBody3D) GetMovingPlatformFloorLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[14]) }
func (gdClass CharacterBody3D) SetMovingPlatformWallLayers(exclude_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[15], exclude_layer) }
func (gdClass CharacterBody3D) GetMovingPlatformWallLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[16]) }
func (gdClass CharacterBody3D) GetMaxSlides() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[17]) }
func (gdClass CharacterBody3D) SetMaxSlides(max_slides int64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[18], max_slides) }
func (gdClass CharacterBody3D) GetFloorMaxAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[19]) }
func (gdClass CharacterBody3D) SetFloorMaxAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[20], radians) }
func (gdClass CharacterBody3D) GetFloorSnapLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[21]) }
func (gdClass CharacterBody3D) SetFloorSnapLength(floor_snap_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[22], floor_snap_length) }
func (gdClass CharacterBody3D) GetWallMinSlideAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[23]) }
func (gdClass CharacterBody3D) SetWallMinSlideAngle(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[24], radians) }
func (gdClass CharacterBody3D) GetUpDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[25]) }
func (gdClass CharacterBody3D) SetUpDirection(up_direction Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[26], up_direction) }
func (gdClass CharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[27], mode) }
func (gdClass CharacterBody3D) GetMotionMode() CharacterBody3DMotionMode { return gdnative.Return[CharacterBody3DMotionMode](gdnative.Object(gdClass), methodCharacterBody3D[28]) }
func (gdClass CharacterBody3D) SetMovingPlatformApplyVelocityOnLeave(on_leave_apply_velocity CharacterBody3DMovingPlatformApplyVelocityOnLeave)  { gdnative.Call(gdnative.Object(gdClass), methodCharacterBody3D[29], on_leave_apply_velocity) }
func (gdClass CharacterBody3D) GetMovingPlatformApplyVelocityOnLeave() CharacterBody3DMovingPlatformApplyVelocityOnLeave { return gdnative.Return[CharacterBody3DMovingPlatformApplyVelocityOnLeave](gdnative.Object(gdClass), methodCharacterBody3D[30]) }
func (gdClass CharacterBody3D) IsOnFloor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[31]) }
func (gdClass CharacterBody3D) IsOnFloorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[32]) }
func (gdClass CharacterBody3D) IsOnCeiling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[33]) }
func (gdClass CharacterBody3D) IsOnCeilingOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[34]) }
func (gdClass CharacterBody3D) IsOnWall() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[35]) }
func (gdClass CharacterBody3D) IsOnWallOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCharacterBody3D[36]) }
func (gdClass CharacterBody3D) GetFloorNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[37]) }
func (gdClass CharacterBody3D) GetWallNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[38]) }
func (gdClass CharacterBody3D) GetLastMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[39]) }
func (gdClass CharacterBody3D) GetPositionDelta() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[40]) }
func (gdClass CharacterBody3D) GetRealVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[41]) }
func (gdClass CharacterBody3D) GetFloorAngle(up_direction Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCharacterBody3D[42], up_direction) }
func (gdClass CharacterBody3D) GetPlatformVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCharacterBody3D[43]) }
func (gdClass CharacterBody3D) GetSlideCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCharacterBody3D[44]) }
func (gdClass CharacterBody3D) GetSlideCollision(slide_idx int64) KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodCharacterBody3D[45], slide_idx) }
func (gdClass CharacterBody3D) GetLastSlideCollision() KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodCharacterBody3D[46]) }

type CheckBox gdnative.Object
func (CheckBox) class() string { return "CheckBox\000" }

func (gdClass CheckBox) Button() Button { return Button(gdClass) }


type CheckButton gdnative.Object
func (CheckButton) class() string { return "CheckButton\000" }

func (gdClass CheckButton) Button() Button { return Button(gdClass) }


type CircleShape2D gdnative.Object
func (CircleShape2D) class() string { return "CircleShape2D\000" }

func (gdClass CircleShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodCircleShape2D [2]gdnative.Method
func (gdClass CircleShape2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCircleShape2D[0], radius) }
func (gdClass CircleShape2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCircleShape2D[1]) }

type ClassDB gdnative.Object
func (ClassDB) class() string { return "ClassDB\000" }

func (gdClass ClassDB) Object() Object { return Object(gdClass) }

var methodClassDB [23]gdnative.Method
func (gdClass ClassDB) GetClassList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[0]) }
func (gdClass ClassDB) GetInheritersFromClass(class string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[1], class) }
func (gdClass ClassDB) GetParentClass(class string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodClassDB[2], class) }
func (gdClass ClassDB) ClassExists(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[3], class) }
func (gdClass ClassDB) IsParentClass(class string, inherits string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[4], class, inherits) }
func (gdClass ClassDB) CanInstantiate(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[5], class) }
func (gdClass ClassDB) Instantiate(class string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodClassDB[6], class) }
func (gdClass ClassDB) ClassHasSignal(class string, signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[7], class, signal) }
func (gdClass ClassDB) ClassGetSignal(class string, signal string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodClassDB[8], class, signal) }
func (gdClass ClassDB) ClassGetSignalList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[9], class, no_inheritance) }
func (gdClass ClassDB) ClassGetPropertyList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[10], class, no_inheritance) }
func (gdClass ClassDB) ClassGetProperty(object Object, property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodClassDB[11], object, property) }
func (gdClass ClassDB) ClassSetProperty(object Object, property string, value any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodClassDB[12], object, property, value) }
func (gdClass ClassDB) ClassHasMethod(class string, method string, no_inheritance bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[13], class, method, no_inheritance) }
func (gdClass ClassDB) ClassGetMethodList(class string, no_inheritance bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodClassDB[14], class, no_inheritance) }
func (gdClass ClassDB) ClassGetIntegerConstantList(class string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[15], class, no_inheritance) }
func (gdClass ClassDB) ClassHasIntegerConstant(class string, name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[16], class, name) }
func (gdClass ClassDB) ClassGetIntegerConstant(class string, name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodClassDB[17], class, name) }
func (gdClass ClassDB) ClassHasEnum(class string, name string, no_inheritance bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[18], class, name, no_inheritance) }
func (gdClass ClassDB) ClassGetEnumList(class string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[19], class, no_inheritance) }
func (gdClass ClassDB) ClassGetEnumConstants(class string, enum string, no_inheritance bool) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodClassDB[20], class, enum, no_inheritance) }
func (gdClass ClassDB) ClassGetIntegerConstantEnum(class string, name string, no_inheritance bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodClassDB[21], class, name, no_inheritance) }
func (gdClass ClassDB) IsClassEnabled(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodClassDB[22], class) }

type CodeEditCodeCompletionKind int64

const (
	CodeEditKindClass CodeEditCodeCompletionKind = 0
	CodeEditKindFunction CodeEditCodeCompletionKind = 1
	CodeEditKindSignal CodeEditCodeCompletionKind = 2
	CodeEditKindVariable CodeEditCodeCompletionKind = 3
	CodeEditKindMember CodeEditCodeCompletionKind = 4
	CodeEditKindEnum CodeEditCodeCompletionKind = 5
	CodeEditKindConstant CodeEditCodeCompletionKind = 6
	CodeEditKindNodePath CodeEditCodeCompletionKind = 7
	CodeEditKindFilePath CodeEditCodeCompletionKind = 8
	CodeEditKindPlainText CodeEditCodeCompletionKind = 9
)

type CodeEdit gdnative.Object
func (CodeEdit) class() string { return "CodeEdit\000" }

func (gdClass CodeEdit) TextEdit() TextEdit { return TextEdit(gdClass) }

var methodCodeEdit [96]gdnative.Method
func (gdClass CodeEdit) virtual(val any, name string) any {	switch name {
	case "_confirm_code_completion":
		i, ok := val.(interface{ ConfirmCodeCompletion(replace bool)  })
		if ok {
			return i.ConfirmCodeCompletion
		}
	case "_request_code_completion":
		i, ok := val.(interface{ RequestCodeCompletion(force bool)  })
		if ok {
			return i.RequestCodeCompletion
		}
	case "_filter_code_completion_candidates":
		i, ok := val.(interface{ FilterCodeCompletionCandidates(candidates Array) Array })
		if ok {
			return i.FilterCodeCompletionCandidates
		}
	}
	return nil
}
func (gdClass CodeEdit) SetIndentSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[0], size) }
func (gdClass CodeEdit) GetIndentSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[1]) }
func (gdClass CodeEdit) SetIndentUsingSpaces(use_spaces bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[2], use_spaces) }
func (gdClass CodeEdit) IsIndentUsingSpaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[3]) }
func (gdClass CodeEdit) SetAutoIndentEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[4], enable) }
func (gdClass CodeEdit) IsAutoIndentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[5]) }
func (gdClass CodeEdit) SetAutoIndentPrefixes(prefixes Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[6], prefixes) }
func (gdClass CodeEdit) GetAutoIndentPrefixes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[7]) }
func (gdClass CodeEdit) DoIndent()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[8]) }
func (gdClass CodeEdit) DoUnindent()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[9]) }
func (gdClass CodeEdit) IndentLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[10]) }
func (gdClass CodeEdit) UnindentLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[11]) }
func (gdClass CodeEdit) SetAutoBraceCompletionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[12], enable) }
func (gdClass CodeEdit) IsAutoBraceCompletionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[13]) }
func (gdClass CodeEdit) SetHighlightMatchingBracesEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[14], enable) }
func (gdClass CodeEdit) IsHighlightMatchingBracesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[15]) }
func (gdClass CodeEdit) AddAutoBraceCompletionPair(start_key string, end_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[16], start_key, end_key) }
func (gdClass CodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[17], pairs) }
func (gdClass CodeEdit) GetAutoBraceCompletionPairs() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeEdit[18]) }
func (gdClass CodeEdit) HasAutoBraceCompletionOpenKey(open_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[19], open_key) }
func (gdClass CodeEdit) HasAutoBraceCompletionCloseKey(close_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[20], close_key) }
func (gdClass CodeEdit) GetAutoBraceCompletionCloseKey(open_key string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[21], open_key) }
func (gdClass CodeEdit) SetDrawBreakpointsGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[22], enable) }
func (gdClass CodeEdit) IsDrawingBreakpointsGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[23]) }
func (gdClass CodeEdit) SetDrawBookmarksGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[24], enable) }
func (gdClass CodeEdit) IsDrawingBookmarksGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[25]) }
func (gdClass CodeEdit) SetDrawExecutingLinesGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[26], enable) }
func (gdClass CodeEdit) IsDrawingExecutingLinesGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[27]) }
func (gdClass CodeEdit) SetLineAsBreakpoint(line int64, breakpointed bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[28], line, breakpointed) }
func (gdClass CodeEdit) IsLineBreakpointed(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[29], line) }
func (gdClass CodeEdit) ClearBreakpointedLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[30]) }
func (gdClass CodeEdit) GetBreakpointedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[31]) }
func (gdClass CodeEdit) SetLineAsBookmarked(line int64, bookmarked bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[32], line, bookmarked) }
func (gdClass CodeEdit) IsLineBookmarked(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[33], line) }
func (gdClass CodeEdit) ClearBookmarkedLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[34]) }
func (gdClass CodeEdit) GetBookmarkedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[35]) }
func (gdClass CodeEdit) SetLineAsExecuting(line int64, executing bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[36], line, executing) }
func (gdClass CodeEdit) IsLineExecuting(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[37], line) }
func (gdClass CodeEdit) ClearExecutingLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[38]) }
func (gdClass CodeEdit) GetExecutingLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[39]) }
func (gdClass CodeEdit) SetDrawLineNumbers(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[40], enable) }
func (gdClass CodeEdit) IsDrawLineNumbersEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[41]) }
func (gdClass CodeEdit) SetLineNumbersZeroPadded(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[42], enable) }
func (gdClass CodeEdit) IsLineNumbersZeroPadded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[43]) }
func (gdClass CodeEdit) SetDrawFoldGutter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[44], enable) }
func (gdClass CodeEdit) IsDrawingFoldGutter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[45]) }
func (gdClass CodeEdit) SetLineFoldingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[46], enabled) }
func (gdClass CodeEdit) IsLineFoldingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[47]) }
func (gdClass CodeEdit) CanFoldLine(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[48], line) }
func (gdClass CodeEdit) FoldLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[49], line) }
func (gdClass CodeEdit) UnfoldLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[50], line) }
func (gdClass CodeEdit) FoldAllLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[51]) }
func (gdClass CodeEdit) UnfoldAllLines()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[52]) }
func (gdClass CodeEdit) ToggleFoldableLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[53], line) }
func (gdClass CodeEdit) IsLineFolded(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[54], line) }
func (gdClass CodeEdit) GetFoldedLines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[55]) }
func (gdClass CodeEdit) AddStringDelimiter(start_key string, end_key string, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[56], start_key, end_key, line_only) }
func (gdClass CodeEdit) RemoveStringDelimiter(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[57], start_key) }
func (gdClass CodeEdit) HasStringDelimiter(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[58], start_key) }
func (gdClass CodeEdit) SetStringDelimiters(string_delimiters Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[59], string_delimiters) }
func (gdClass CodeEdit) ClearStringDelimiters()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[60]) }
func (gdClass CodeEdit) GetStringDelimiters() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[61]) }
func (gdClass CodeEdit) IsInString(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[62], line, column) }
func (gdClass CodeEdit) AddCommentDelimiter(start_key string, end_key string, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[63], start_key, end_key, line_only) }
func (gdClass CodeEdit) RemoveCommentDelimiter(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[64], start_key) }
func (gdClass CodeEdit) HasCommentDelimiter(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[65], start_key) }
func (gdClass CodeEdit) SetCommentDelimiters(comment_delimiters Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[66], comment_delimiters) }
func (gdClass CodeEdit) ClearCommentDelimiters()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[67]) }
func (gdClass CodeEdit) GetCommentDelimiters() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[68]) }
func (gdClass CodeEdit) IsInComment(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[69], line, column) }
func (gdClass CodeEdit) GetDelimiterStartKey(delimiter_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[70], delimiter_index) }
func (gdClass CodeEdit) GetDelimiterEndKey(delimiter_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[71], delimiter_index) }
func (gdClass CodeEdit) GetDelimiterStartPosition(line int64, column int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCodeEdit[72], line, column) }
func (gdClass CodeEdit) GetDelimiterEndPosition(line int64, column int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCodeEdit[73], line, column) }
func (gdClass CodeEdit) SetCodeHint(code_hint string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[74], code_hint) }
func (gdClass CodeEdit) SetCodeHintDrawBelow(draw_below bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[75], draw_below) }
func (gdClass CodeEdit) GetTextForCodeCompletion() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[76]) }
func (gdClass CodeEdit) RequestCodeCompletion(force bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[77], force) }
func (gdClass CodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text string, insert_text string, text_color Color, icon Resource, value any)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[78], atype, display_text, insert_text, text_color, icon, value) }
func (gdClass CodeEdit) UpdateCodeCompletionOptions(force bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[79], force) }
func (gdClass CodeEdit) GetCodeCompletionOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[80]) }
func (gdClass CodeEdit) GetCodeCompletionOption(index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeEdit[81], index) }
func (gdClass CodeEdit) GetCodeCompletionSelectedIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCodeEdit[82]) }
func (gdClass CodeEdit) SetCodeCompletionSelectedIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[83], index) }
func (gdClass CodeEdit) ConfirmCodeCompletion(replace bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[84], replace) }
func (gdClass CodeEdit) CancelCodeCompletion()  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[85]) }
func (gdClass CodeEdit) SetCodeCompletionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[86], enable) }
func (gdClass CodeEdit) IsCodeCompletionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[87]) }
func (gdClass CodeEdit) SetCodeCompletionPrefixes(prefixes Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[88], prefixes) }
func (gdClass CodeEdit) GetCodeComletionPrefixes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[89]) }
func (gdClass CodeEdit) SetLineLengthGuidelines(guideline_columns Array)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[90], guideline_columns) }
func (gdClass CodeEdit) GetLineLengthGuidelines() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCodeEdit[91]) }
func (gdClass CodeEdit) SetSymbolLookupOnClickEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[92], enable) }
func (gdClass CodeEdit) IsSymbolLookupOnClickEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeEdit[93]) }
func (gdClass CodeEdit) GetTextForSymbolLookup() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCodeEdit[94]) }
func (gdClass CodeEdit) SetSymbolLookupWordAsValid(valid bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeEdit[95], valid) }

type CodeHighlighter gdnative.Object
func (CodeHighlighter) class() string { return "CodeHighlighter\000" }

func (gdClass CodeHighlighter) SyntaxHighlighter() SyntaxHighlighter { return SyntaxHighlighter(gdClass) }

var methodCodeHighlighter [28]gdnative.Method
func (gdClass CodeHighlighter) AddKeywordColor(keyword string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[0], keyword, color) }
func (gdClass CodeHighlighter) RemoveKeywordColor(keyword string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[1], keyword) }
func (gdClass CodeHighlighter) HasKeywordColor(keyword string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[2], keyword) }
func (gdClass CodeHighlighter) GetKeywordColor(keyword string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[3], keyword) }
func (gdClass CodeHighlighter) SetKeywordColors(keywords Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[4], keywords) }
func (gdClass CodeHighlighter) ClearKeywordColors()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[5]) }
func (gdClass CodeHighlighter) GetKeywordColors() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[6]) }
func (gdClass CodeHighlighter) AddMemberKeywordColor(member_keyword string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[7], member_keyword, color) }
func (gdClass CodeHighlighter) RemoveMemberKeywordColor(member_keyword string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[8], member_keyword) }
func (gdClass CodeHighlighter) HasMemberKeywordColor(member_keyword string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[9], member_keyword) }
func (gdClass CodeHighlighter) GetMemberKeywordColor(member_keyword string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[10], member_keyword) }
func (gdClass CodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[11], member_keyword) }
func (gdClass CodeHighlighter) ClearMemberKeywordColors()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[12]) }
func (gdClass CodeHighlighter) GetMemberKeywordColors() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[13]) }
func (gdClass CodeHighlighter) AddColorRegion(start_key string, end_key string, color Color, line_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[14], start_key, end_key, color, line_only) }
func (gdClass CodeHighlighter) RemoveColorRegion(start_key string)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[15], start_key) }
func (gdClass CodeHighlighter) HasColorRegion(start_key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCodeHighlighter[16], start_key) }
func (gdClass CodeHighlighter) SetColorRegions(color_regions Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[17], color_regions) }
func (gdClass CodeHighlighter) ClearColorRegions()  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[18]) }
func (gdClass CodeHighlighter) GetColorRegions() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodCodeHighlighter[19]) }
func (gdClass CodeHighlighter) SetFunctionColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[20], color) }
func (gdClass CodeHighlighter) GetFunctionColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[21]) }
func (gdClass CodeHighlighter) SetNumberColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[22], color) }
func (gdClass CodeHighlighter) GetNumberColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[23]) }
func (gdClass CodeHighlighter) SetSymbolColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[24], color) }
func (gdClass CodeHighlighter) GetSymbolColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[25]) }
func (gdClass CodeHighlighter) SetMemberVariableColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodCodeHighlighter[26], color) }
func (gdClass CodeHighlighter) GetMemberVariableColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodCodeHighlighter[27]) }

type CollisionObject2DDisableMode int64

const (
	CollisionObject2DDisableModeRemove CollisionObject2DDisableMode = 0
	CollisionObject2DDisableModeMakeStatic CollisionObject2DDisableMode = 1
	CollisionObject2DDisableModeKeepActive CollisionObject2DDisableMode = 2
)

type CollisionObject2D gdnative.Object
func (CollisionObject2D) class() string { return "CollisionObject2D\000" }

func (gdClass CollisionObject2D) Node2D() Node2D { return Node2D(gdClass) }

var methodCollisionObject2D [32]gdnative.Method
func (gdClass CollisionObject2D) virtual(val any, name string) any {	switch name {
	case "_input_event":
		i, ok := val.(interface{ InputEvent(viewport Viewport, event InputEvent, shape_idx int64)  })
		if ok {
			return i.InputEvent
		}
	}
	return nil
}
func (gdClass CollisionObject2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCollisionObject2D[0]) }
func (gdClass CollisionObject2D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[1], layer) }
func (gdClass CollisionObject2D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[2]) }
func (gdClass CollisionObject2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[3], mask) }
func (gdClass CollisionObject2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[4]) }
func (gdClass CollisionObject2D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[5], layer_number, value) }
func (gdClass CollisionObject2D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[6], layer_number) }
func (gdClass CollisionObject2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[7], layer_number, value) }
func (gdClass CollisionObject2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[8], layer_number) }
func (gdClass CollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[9], mode) }
func (gdClass CollisionObject2D) GetDisableMode() CollisionObject2DDisableMode { return gdnative.Return[CollisionObject2DDisableMode](gdnative.Object(gdClass), methodCollisionObject2D[10]) }
func (gdClass CollisionObject2D) SetPickable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[11], enabled) }
func (gdClass CollisionObject2D) IsPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[12]) }
func (gdClass CollisionObject2D) CreateShapeOwner(owner Object) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[13], owner) }
func (gdClass CollisionObject2D) RemoveShapeOwner(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[14], owner_id) }
func (gdClass CollisionObject2D) GetShapeOwners() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCollisionObject2D[15]) }
func (gdClass CollisionObject2D) ShapeOwnerSetTransform(owner_id int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[16], owner_id, transform) }
func (gdClass CollisionObject2D) ShapeOwnerGetTransform(owner_id int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodCollisionObject2D[17], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetOwner(owner_id int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodCollisionObject2D[18], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[19], owner_id, disabled) }
func (gdClass CollisionObject2D) IsShapeOwnerDisabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[20], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[21], owner_id, enable) }
func (gdClass CollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject2D[22], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id int64, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[23], owner_id, margin) }
func (gdClass CollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionObject2D[24], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerAddShape(owner_id int64, shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[25], owner_id, shape) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[26], owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodCollisionObject2D[27], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[28], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[29], owner_id, shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerClearShapes(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject2D[30], owner_id) }
func (gdClass CollisionObject2D) ShapeFindOwner(shape_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject2D[31], shape_index) }

type CollisionObject3DDisableMode int64

const (
	CollisionObject3DDisableModeRemove CollisionObject3DDisableMode = 0
	CollisionObject3DDisableModeMakeStatic CollisionObject3DDisableMode = 1
	CollisionObject3DDisableModeKeepActive CollisionObject3DDisableMode = 2
)

type CollisionObject3D gdnative.Object
func (CollisionObject3D) class() string { return "CollisionObject3D\000" }

func (gdClass CollisionObject3D) Node3D() Node3D { return Node3D(gdClass) }

var methodCollisionObject3D [30]gdnative.Method
func (gdClass CollisionObject3D) virtual(val any, name string) any {	switch name {
	case "_input_event":
		i, ok := val.(interface{ InputEvent(camera Camera3D, event InputEvent, position Vector3, normal Vector3, shape_idx int64)  })
		if ok {
			return i.InputEvent
		}
	}
	return nil
}
func (gdClass CollisionObject3D) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[0], layer) }
func (gdClass CollisionObject3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[1]) }
func (gdClass CollisionObject3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[2], mask) }
func (gdClass CollisionObject3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[3]) }
func (gdClass CollisionObject3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[4], layer_number, value) }
func (gdClass CollisionObject3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[5], layer_number) }
func (gdClass CollisionObject3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[6], layer_number, value) }
func (gdClass CollisionObject3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[7], layer_number) }
func (gdClass CollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[8], mode) }
func (gdClass CollisionObject3D) GetDisableMode() CollisionObject3DDisableMode { return gdnative.Return[CollisionObject3DDisableMode](gdnative.Object(gdClass), methodCollisionObject3D[9]) }
func (gdClass CollisionObject3D) SetRayPickable(ray_pickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[10], ray_pickable) }
func (gdClass CollisionObject3D) IsRayPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[11]) }
func (gdClass CollisionObject3D) SetCaptureInputOnDrag(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[12], enable) }
func (gdClass CollisionObject3D) GetCaptureInputOnDrag() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[13]) }
func (gdClass CollisionObject3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodCollisionObject3D[14]) }
func (gdClass CollisionObject3D) CreateShapeOwner(owner Object) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[15], owner) }
func (gdClass CollisionObject3D) RemoveShapeOwner(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[16], owner_id) }
func (gdClass CollisionObject3D) GetShapeOwners() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodCollisionObject3D[17]) }
func (gdClass CollisionObject3D) ShapeOwnerSetTransform(owner_id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[18], owner_id, transform) }
func (gdClass CollisionObject3D) ShapeOwnerGetTransform(owner_id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodCollisionObject3D[19], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetOwner(owner_id int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodCollisionObject3D[20], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[21], owner_id, disabled) }
func (gdClass CollisionObject3D) IsShapeOwnerDisabled(owner_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionObject3D[22], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerAddShape(owner_id int64, shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[23], owner_id, shape) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[24], owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodCollisionObject3D[25], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[26], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[27], owner_id, shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerClearShapes(owner_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionObject3D[28], owner_id) }
func (gdClass CollisionObject3D) ShapeFindOwner(shape_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCollisionObject3D[29], shape_index) }

type CollisionPolygon2DBuildMode int64

const (
	CollisionPolygon2DBuildSolids CollisionPolygon2DBuildMode = 0
	CollisionPolygon2DBuildSegments CollisionPolygon2DBuildMode = 1
)

type CollisionPolygon2D gdnative.Object
func (CollisionPolygon2D) class() string { return "CollisionPolygon2D\000" }

func (gdClass CollisionPolygon2D) Node2D() Node2D { return Node2D(gdClass) }

var methodCollisionPolygon2D [10]gdnative.Method
func (gdClass CollisionPolygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[0], polygon) }
func (gdClass CollisionPolygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCollisionPolygon2D[1]) }
func (gdClass CollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[2], build_mode) }
func (gdClass CollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode { return gdnative.Return[CollisionPolygon2DBuildMode](gdnative.Object(gdClass), methodCollisionPolygon2D[3]) }
func (gdClass CollisionPolygon2D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[4], disabled) }
func (gdClass CollisionPolygon2D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon2D[5]) }
func (gdClass CollisionPolygon2D) SetOneWayCollision(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[6], enabled) }
func (gdClass CollisionPolygon2D) IsOneWayCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon2D[7]) }
func (gdClass CollisionPolygon2D) SetOneWayCollisionMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon2D[8], margin) }
func (gdClass CollisionPolygon2D) GetOneWayCollisionMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon2D[9]) }

type CollisionPolygon3D gdnative.Object
func (CollisionPolygon3D) class() string { return "CollisionPolygon3D\000" }

func (gdClass CollisionPolygon3D) Node3D() Node3D { return Node3D(gdClass) }

var methodCollisionPolygon3D [8]gdnative.Method
func (gdClass CollisionPolygon3D) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[0], depth) }
func (gdClass CollisionPolygon3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon3D[1]) }
func (gdClass CollisionPolygon3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[2], polygon) }
func (gdClass CollisionPolygon3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCollisionPolygon3D[3]) }
func (gdClass CollisionPolygon3D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[4], disabled) }
func (gdClass CollisionPolygon3D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionPolygon3D[5]) }
func (gdClass CollisionPolygon3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionPolygon3D[6], margin) }
func (gdClass CollisionPolygon3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionPolygon3D[7]) }

type CollisionShape2D gdnative.Object
func (CollisionShape2D) class() string { return "CollisionShape2D\000" }

func (gdClass CollisionShape2D) Node2D() Node2D { return Node2D(gdClass) }

var methodCollisionShape2D [8]gdnative.Method
func (gdClass CollisionShape2D) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[0], shape) }
func (gdClass CollisionShape2D) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodCollisionShape2D[1]) }
func (gdClass CollisionShape2D) SetDisabled(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[2], disabled) }
func (gdClass CollisionShape2D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape2D[3]) }
func (gdClass CollisionShape2D) SetOneWayCollision(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[4], enabled) }
func (gdClass CollisionShape2D) IsOneWayCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape2D[5]) }
func (gdClass CollisionShape2D) SetOneWayCollisionMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape2D[6], margin) }
func (gdClass CollisionShape2D) GetOneWayCollisionMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCollisionShape2D[7]) }

type CollisionShape3D gdnative.Object
func (CollisionShape3D) class() string { return "CollisionShape3D\000" }

func (gdClass CollisionShape3D) Node3D() Node3D { return Node3D(gdClass) }

var methodCollisionShape3D [6]gdnative.Method
func (gdClass CollisionShape3D) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[0], resource) }
func (gdClass CollisionShape3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[1], shape) }
func (gdClass CollisionShape3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodCollisionShape3D[2]) }
func (gdClass CollisionShape3D) SetDisabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[3], enable) }
func (gdClass CollisionShape3D) IsDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCollisionShape3D[4]) }
func (gdClass CollisionShape3D) MakeConvexFromSiblings()  { gdnative.Call(gdnative.Object(gdClass), methodCollisionShape3D[5]) }

type ColorPickerColorModeType int64

const (
	ColorPickerModeRgb ColorPickerColorModeType = 0
	ColorPickerModeHsv ColorPickerColorModeType = 1
	ColorPickerModeRaw ColorPickerColorModeType = 2
	ColorPickerModeOkhsl ColorPickerColorModeType = 3
)

type ColorPickerPickerShapeType int64

const (
	ColorPickerShapeHsvRectangle ColorPickerPickerShapeType = 0
	ColorPickerShapeHsvWheel ColorPickerPickerShapeType = 1
	ColorPickerShapeVhsCircle ColorPickerPickerShapeType = 2
	ColorPickerShapeOkhslCircle ColorPickerPickerShapeType = 3
)

type ColorPicker gdnative.Object
func (ColorPicker) class() string { return "ColorPicker\000" }

func (gdClass ColorPicker) BoxContainer() BoxContainer { return BoxContainer(gdClass) }

var methodColorPicker [17]gdnative.Method
func (gdClass ColorPicker) SetPickColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[0], color) }
func (gdClass ColorPicker) GetPickColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorPicker[1]) }
func (gdClass ColorPicker) SetDeferredMode(mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[2], mode) }
func (gdClass ColorPicker) IsDeferredMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[3]) }
func (gdClass ColorPicker) SetColorMode(color_mode ColorPickerColorModeType)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[4], color_mode) }
func (gdClass ColorPicker) GetColorMode() ColorPickerColorModeType { return gdnative.Return[ColorPickerColorModeType](gdnative.Object(gdClass), methodColorPicker[5]) }
func (gdClass ColorPicker) SetEditAlpha(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[6], show) }
func (gdClass ColorPicker) IsEditingAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[7]) }
func (gdClass ColorPicker) SetPresetsEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[8], enabled) }
func (gdClass ColorPicker) ArePresetsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[9]) }
func (gdClass ColorPicker) SetPresetsVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[10], visible) }
func (gdClass ColorPicker) ArePresetsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPicker[11]) }
func (gdClass ColorPicker) AddPreset(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[12], color) }
func (gdClass ColorPicker) ErasePreset(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[13], color) }
func (gdClass ColorPicker) GetPresets() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodColorPicker[14]) }
func (gdClass ColorPicker) SetPickerShape(shape ColorPickerPickerShapeType)  { gdnative.Call(gdnative.Object(gdClass), methodColorPicker[15], shape) }
func (gdClass ColorPicker) GetPickerShape() ColorPickerPickerShapeType { return gdnative.Return[ColorPickerPickerShapeType](gdnative.Object(gdClass), methodColorPicker[16]) }

type ColorPickerButton gdnative.Object
func (ColorPickerButton) class() string { return "ColorPickerButton\000" }

func (gdClass ColorPickerButton) Button() Button { return Button(gdClass) }

var methodColorPickerButton [6]gdnative.Method
func (gdClass ColorPickerButton) SetPickColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorPickerButton[0], color) }
func (gdClass ColorPickerButton) GetPickColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorPickerButton[1]) }
func (gdClass ColorPickerButton) GetPicker() ColorPicker { return gdnative.Return[ColorPicker](gdnative.Object(gdClass), methodColorPickerButton[2]) }
func (gdClass ColorPickerButton) GetPopup() PopupPanel { return gdnative.Return[PopupPanel](gdnative.Object(gdClass), methodColorPickerButton[3]) }
func (gdClass ColorPickerButton) SetEditAlpha(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodColorPickerButton[4], show) }
func (gdClass ColorPickerButton) IsEditingAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodColorPickerButton[5]) }

type ColorRect gdnative.Object
func (ColorRect) class() string { return "ColorRect\000" }

func (gdClass ColorRect) Control() Control { return Control(gdClass) }

var methodColorRect [2]gdnative.Method
func (gdClass ColorRect) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodColorRect[0], color) }
func (gdClass ColorRect) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodColorRect[1]) }

type CompressedCubemap gdnative.Object
func (CompressedCubemap) class() string { return "CompressedCubemap\000" }

func (gdClass CompressedCubemap) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered(gdClass) }


type CompressedCubemapArray gdnative.Object
func (CompressedCubemapArray) class() string { return "CompressedCubemapArray\000" }

func (gdClass CompressedCubemapArray) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered(gdClass) }


type CompressedTexture2D gdnative.Object
func (CompressedTexture2D) class() string { return "CompressedTexture2D\000" }

func (gdClass CompressedTexture2D) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodCompressedTexture2D [2]gdnative.Method
func (gdClass CompressedTexture2D) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTexture2D[0], path) }
func (gdClass CompressedTexture2D) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTexture2D[1]) }

type CompressedTexture2DArray gdnative.Object
func (CompressedTexture2DArray) class() string { return "CompressedTexture2DArray\000" }

func (gdClass CompressedTexture2DArray) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered(gdClass) }


type CompressedTexture3D gdnative.Object
func (CompressedTexture3D) class() string { return "CompressedTexture3D\000" }

func (gdClass CompressedTexture3D) Texture3D() Texture3D { return Texture3D(gdClass) }

var methodCompressedTexture3D [2]gdnative.Method
func (gdClass CompressedTexture3D) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTexture3D[0], path) }
func (gdClass CompressedTexture3D) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTexture3D[1]) }

type CompressedTextureLayered gdnative.Object
func (CompressedTextureLayered) class() string { return "CompressedTextureLayered\000" }

func (gdClass CompressedTextureLayered) TextureLayered() TextureLayered { return TextureLayered(gdClass) }

var methodCompressedTextureLayered [2]gdnative.Method
func (gdClass CompressedTextureLayered) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCompressedTextureLayered[0], path) }
func (gdClass CompressedTextureLayered) GetLoadPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodCompressedTextureLayered[1]) }

type ConcavePolygonShape2D gdnative.Object
func (ConcavePolygonShape2D) class() string { return "ConcavePolygonShape2D\000" }

func (gdClass ConcavePolygonShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodConcavePolygonShape2D [2]gdnative.Method
func (gdClass ConcavePolygonShape2D) SetSegments(segments []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape2D[0], segments) }
func (gdClass ConcavePolygonShape2D) GetSegments() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodConcavePolygonShape2D[1]) }

type ConcavePolygonShape3D gdnative.Object
func (ConcavePolygonShape3D) class() string { return "ConcavePolygonShape3D\000" }

func (gdClass ConcavePolygonShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodConcavePolygonShape3D [4]gdnative.Method
func (gdClass ConcavePolygonShape3D) SetFaces(faces []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape3D[0], faces) }
func (gdClass ConcavePolygonShape3D) GetFaces() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodConcavePolygonShape3D[1]) }
func (gdClass ConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodConcavePolygonShape3D[2], enabled) }
func (gdClass ConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConcavePolygonShape3D[3]) }

type ConeTwistJoint3DParam int64

const (
	ConeTwistJoint3DParamSwingSpan ConeTwistJoint3DParam = 0
	ConeTwistJoint3DParamTwistSpan ConeTwistJoint3DParam = 1
	ConeTwistJoint3DParamBias ConeTwistJoint3DParam = 2
	ConeTwistJoint3DParamSoftness ConeTwistJoint3DParam = 3
	ConeTwistJoint3DParamRelaxation ConeTwistJoint3DParam = 4
	ConeTwistJoint3DParamMax ConeTwistJoint3DParam = 5
)

type ConeTwistJoint3D gdnative.Object
func (ConeTwistJoint3D) class() string { return "ConeTwistJoint3D\000" }

func (gdClass ConeTwistJoint3D) Joint3D() Joint3D { return Joint3D(gdClass) }

var methodConeTwistJoint3D [2]gdnative.Method
func (gdClass ConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodConeTwistJoint3D[0], param, value) }
func (gdClass ConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodConeTwistJoint3D[1], param) }

type ConfigFile gdnative.Object
func (ConfigFile) class() string { return "ConfigFile\000" }

func (gdClass ConfigFile) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodConfigFile [16]gdnative.Method
func (gdClass ConfigFile) SetValue(section string, key string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[0], section, key, value) }
func (gdClass ConfigFile) GetValue(section string, key string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodConfigFile[1], section, key, def) }
func (gdClass ConfigFile) HasSection(section string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConfigFile[2], section) }
func (gdClass ConfigFile) HasSectionKey(section string, key string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodConfigFile[3], section, key) }
func (gdClass ConfigFile) GetSections() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodConfigFile[4]) }
func (gdClass ConfigFile) GetSectionKeys(section string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodConfigFile[5], section) }
func (gdClass ConfigFile) EraseSection(section string)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[6], section) }
func (gdClass ConfigFile) EraseSectionKey(section string, key string)  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[7], section, key) }
func (gdClass ConfigFile) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[8], path) }
func (gdClass ConfigFile) Parse(data string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[9], data) }
func (gdClass ConfigFile) Save(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[10], path) }
func (gdClass ConfigFile) LoadEncrypted(path string, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[11], path, key) }
func (gdClass ConfigFile) LoadEncryptedPass(path string, password string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[12], path, password) }
func (gdClass ConfigFile) SaveEncrypted(path string, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[13], path, key) }
func (gdClass ConfigFile) SaveEncryptedPass(path string, password string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodConfigFile[14], path, password) }
func (gdClass ConfigFile) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodConfigFile[15]) }

type ConfirmationDialog gdnative.Object
func (ConfirmationDialog) class() string { return "ConfirmationDialog\000" }

func (gdClass ConfirmationDialog) AcceptDialog() AcceptDialog { return AcceptDialog(gdClass) }

var methodConfirmationDialog [3]gdnative.Method
func (gdClass ConfirmationDialog) GetCancelButton() Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodConfirmationDialog[0]) }
func (gdClass ConfirmationDialog) SetCancelButtonText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodConfirmationDialog[1], text) }
func (gdClass ConfirmationDialog) GetCancelButtonText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodConfirmationDialog[2]) }

type Container gdnative.Object
func (Container) class() string { return "Container\000" }

func (gdClass Container) Control() Control { return Control(gdClass) }

var methodContainer [2]gdnative.Method
func (gdClass Container) virtual(val any, name string) any {	switch name {
	case "_get_allowed_size_flags_horizontal":
		i, ok := val.(interface{ GetAllowedSizeFlagsHorizontal() []int32 })
		if ok {
			return i.GetAllowedSizeFlagsHorizontal
		}
	case "_get_allowed_size_flags_vertical":
		i, ok := val.(interface{ GetAllowedSizeFlagsVertical() []int32 })
		if ok {
			return i.GetAllowedSizeFlagsVertical
		}
	}
	return nil
}
func (gdClass Container) QueueSort()  { gdnative.Call(gdnative.Object(gdClass), methodContainer[0]) }
func (gdClass Container) FitChildInRect(child Control, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodContainer[1], child, rect) }

type ControlFocusMode int64

const (
	ControlFocusNone ControlFocusMode = 0
	ControlFocusClick ControlFocusMode = 1
	ControlFocusAll ControlFocusMode = 2
)

type ControlCursorShape int64

const (
	ControlCursorArrow ControlCursorShape = 0
	ControlCursorIbeam ControlCursorShape = 1
	ControlCursorPointingHand ControlCursorShape = 2
	ControlCursorCross ControlCursorShape = 3
	ControlCursorWait ControlCursorShape = 4
	ControlCursorBusy ControlCursorShape = 5
	ControlCursorDrag ControlCursorShape = 6
	ControlCursorCanDrop ControlCursorShape = 7
	ControlCursorForbidden ControlCursorShape = 8
	ControlCursorVsize ControlCursorShape = 9
	ControlCursorHsize ControlCursorShape = 10
	ControlCursorBdiagsize ControlCursorShape = 11
	ControlCursorFdiagsize ControlCursorShape = 12
	ControlCursorMove ControlCursorShape = 13
	ControlCursorVsplit ControlCursorShape = 14
	ControlCursorHsplit ControlCursorShape = 15
	ControlCursorHelp ControlCursorShape = 16
)

type ControlLayoutPreset int64

const (
	ControlPresetTopLeft ControlLayoutPreset = 0
	ControlPresetTopRight ControlLayoutPreset = 1
	ControlPresetBottomLeft ControlLayoutPreset = 2
	ControlPresetBottomRight ControlLayoutPreset = 3
	ControlPresetCenterLeft ControlLayoutPreset = 4
	ControlPresetCenterTop ControlLayoutPreset = 5
	ControlPresetCenterRight ControlLayoutPreset = 6
	ControlPresetCenterBottom ControlLayoutPreset = 7
	ControlPresetCenter ControlLayoutPreset = 8
	ControlPresetLeftWide ControlLayoutPreset = 9
	ControlPresetTopWide ControlLayoutPreset = 10
	ControlPresetRightWide ControlLayoutPreset = 11
	ControlPresetBottomWide ControlLayoutPreset = 12
	ControlPresetVcenterWide ControlLayoutPreset = 13
	ControlPresetHcenterWide ControlLayoutPreset = 14
	ControlPresetFullRect ControlLayoutPreset = 15
)

type ControlLayoutPresetMode int64

const (
	ControlPresetModeMinsize ControlLayoutPresetMode = 0
	ControlPresetModeKeepWidth ControlLayoutPresetMode = 1
	ControlPresetModeKeepHeight ControlLayoutPresetMode = 2
	ControlPresetModeKeepSize ControlLayoutPresetMode = 3
)

type ControlSizeFlags int64

const (
	ControlSizeShrinkBegin ControlSizeFlags = 0
	ControlSizeFill ControlSizeFlags = 1
	ControlSizeExpand ControlSizeFlags = 2
	ControlSizeExpandFill ControlSizeFlags = 3
	ControlSizeShrinkCenter ControlSizeFlags = 4
	ControlSizeShrinkEnd ControlSizeFlags = 8
)

type ControlMouseFilter int64

const (
	ControlMouseFilterStop ControlMouseFilter = 0
	ControlMouseFilterPass ControlMouseFilter = 1
	ControlMouseFilterIgnore ControlMouseFilter = 2
)

type ControlGrowDirection int64

const (
	ControlGrowDirectionBegin ControlGrowDirection = 0
	ControlGrowDirectionEnd ControlGrowDirection = 1
	ControlGrowDirectionBoth ControlGrowDirection = 2
)

type ControlAnchor int64

const (
	ControlAnchorBegin ControlAnchor = 0
	ControlAnchorEnd ControlAnchor = 1
)

type ControlLayoutDirection int64

const (
	ControlLayoutDirectionInherited ControlLayoutDirection = 0
	ControlLayoutDirectionLocale ControlLayoutDirection = 1
	ControlLayoutDirectionLtr ControlLayoutDirection = 2
	ControlLayoutDirectionRtl ControlLayoutDirection = 3
)

type ControlTextDirection int64

const (
	ControlTextDirectionInherited ControlTextDirection = 3
	ControlTextDirectionAuto ControlTextDirection = 0
	ControlTextDirectionLtr ControlTextDirection = 1
	ControlTextDirectionRtl ControlTextDirection = 2
)

type Control gdnative.Object
func (Control) class() string { return "Control\000" }

func (gdClass Control) CanvasItem() CanvasItem { return CanvasItem(gdClass) }

var methodControl [120]gdnative.Method
func (gdClass Control) virtual(val any, name string) any {	switch name {
	case "_has_point":
		i, ok := val.(interface{ HasPoint(position Vector2) bool })
		if ok {
			return i.HasPoint
		}
	case "_structured_text_parser":
		i, ok := val.(interface{ StructuredTextParser(args Array, text string) Array })
		if ok {
			return i.StructuredTextParser
		}
	case "_get_minimum_size":
		i, ok := val.(interface{ GetMinimumSize() Vector2 })
		if ok {
			return i.GetMinimumSize
		}
	case "_get_drag_data":
		i, ok := val.(interface{ GetDragData(at_position Vector2) any })
		if ok {
			return i.GetDragData
		}
	case "_can_drop_data":
		i, ok := val.(interface{ CanDropData(at_position Vector2, data any) bool })
		if ok {
			return i.CanDropData
		}
	case "_drop_data":
		i, ok := val.(interface{ DropData(at_position Vector2, data any)  })
		if ok {
			return i.DropData
		}
	case "_make_custom_tooltip":
		i, ok := val.(interface{ MakeCustomTooltip(for_text string) Object })
		if ok {
			return i.MakeCustomTooltip
		}
	case "_gui_input":
		i, ok := val.(interface{ GuiInput(event InputEvent)  })
		if ok {
			return i.GuiInput
		}
	}
	return nil
}
func (gdClass Control) AcceptEvent()  { gdnative.Call(gdnative.Object(gdClass), methodControl[0]) }
func (gdClass Control) GetMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[1]) }
func (gdClass Control) GetCombinedMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[2]) }
func (gdClass Control) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[3], preset, keep_offsets) }
func (gdClass Control) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[4], preset, resize_mode, margin) }
func (gdClass Control) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[5], preset, resize_mode, margin) }
func (gdClass Control) SetAnchor(side Side, anchor float64, keep_offset bool, push_opposite_anchor bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[6], side, anchor, keep_offset, push_opposite_anchor) }
func (gdClass Control) GetAnchor(side Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[7], side) }
func (gdClass Control) SetOffset(side Side, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[8], side, offset) }
func (gdClass Control) GetOffset(offset Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[9], offset) }
func (gdClass Control) SetAnchorAndOffset(side Side, anchor float64, offset float64, push_opposite_anchor bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[10], side, anchor, offset, push_opposite_anchor) }
func (gdClass Control) SetBegin(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[11], position) }
func (gdClass Control) SetEnd(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[12], position) }
func (gdClass Control) SetPosition(position Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[13], position, keep_offsets) }
func (gdClass Control) SetSize(size Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[14], size, keep_offsets) }
func (gdClass Control) ResetSize()  { gdnative.Call(gdnative.Object(gdClass), methodControl[15]) }
func (gdClass Control) SetCustomMinimumSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[16], size) }
func (gdClass Control) SetGlobalPosition(position Vector2, keep_offsets bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[17], position, keep_offsets) }
func (gdClass Control) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[18], radians) }
func (gdClass Control) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[19], scale) }
func (gdClass Control) SetPivotOffset(pivot_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[20], pivot_offset) }
func (gdClass Control) GetBegin() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[21]) }
func (gdClass Control) GetEnd() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[22]) }
func (gdClass Control) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[23]) }
func (gdClass Control) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[24]) }
func (gdClass Control) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[25]) }
func (gdClass Control) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[26]) }
func (gdClass Control) GetPivotOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[27]) }
func (gdClass Control) GetCustomMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[28]) }
func (gdClass Control) GetParentAreaSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[29]) }
func (gdClass Control) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[30]) }
func (gdClass Control) GetScreenPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodControl[31]) }
func (gdClass Control) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodControl[32]) }
func (gdClass Control) GetGlobalRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodControl[33]) }
func (gdClass Control) SetFocusMode(mode ControlFocusMode)  { gdnative.Call(gdnative.Object(gdClass), methodControl[34], mode) }
func (gdClass Control) GetFocusMode() ControlFocusMode { return gdnative.Return[ControlFocusMode](gdnative.Object(gdClass), methodControl[35]) }
func (gdClass Control) HasFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[36]) }
func (gdClass Control) GrabFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[37]) }
func (gdClass Control) ReleaseFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[38]) }
func (gdClass Control) FindPrevValidFocus() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[39]) }
func (gdClass Control) FindNextValidFocus() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[40]) }
func (gdClass Control) SetHSizeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[41], flags) }
func (gdClass Control) GetHSizeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[42]) }
func (gdClass Control) SetStretchRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[43], ratio) }
func (gdClass Control) GetStretchRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[44]) }
func (gdClass Control) SetVSizeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[45], flags) }
func (gdClass Control) GetVSizeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[46]) }
func (gdClass Control) SetTheme(theme Theme)  { gdnative.Call(gdnative.Object(gdClass), methodControl[47], theme) }
func (gdClass Control) GetTheme() Theme { return gdnative.Return[Theme](gdnative.Object(gdClass), methodControl[48]) }
func (gdClass Control) SetThemeTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[49], theme_type) }
func (gdClass Control) GetThemeTypeVariation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodControl[50]) }
func (gdClass Control) BeginBulkThemeOverride()  { gdnative.Call(gdnative.Object(gdClass), methodControl[51]) }
func (gdClass Control) EndBulkThemeOverride()  { gdnative.Call(gdnative.Object(gdClass), methodControl[52]) }
func (gdClass Control) AddThemeIconOverride(name string, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodControl[53], name, texture) }
func (gdClass Control) AddThemeStyleboxOverride(name string, stylebox StyleBox)  { gdnative.Call(gdnative.Object(gdClass), methodControl[54], name, stylebox) }
func (gdClass Control) AddThemeFontOverride(name string, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodControl[55], name, font) }
func (gdClass Control) AddThemeFontSizeOverride(name string, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[56], name, font_size) }
func (gdClass Control) AddThemeColorOverride(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodControl[57], name, color) }
func (gdClass Control) AddThemeConstantOverride(name string, constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodControl[58], name, constant) }
func (gdClass Control) RemoveThemeIconOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[59], name) }
func (gdClass Control) RemoveThemeStyleboxOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[60], name) }
func (gdClass Control) RemoveThemeFontOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[61], name) }
func (gdClass Control) RemoveThemeFontSizeOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[62], name) }
func (gdClass Control) RemoveThemeColorOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[63], name) }
func (gdClass Control) RemoveThemeConstantOverride(name string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[64], name) }
func (gdClass Control) GetThemeIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodControl[65], name, theme_type) }
func (gdClass Control) GetThemeStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodControl[66], name, theme_type) }
func (gdClass Control) GetThemeFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodControl[67], name, theme_type) }
func (gdClass Control) GetThemeFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[68], name, theme_type) }
func (gdClass Control) GetThemeColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodControl[69], name, theme_type) }
func (gdClass Control) GetThemeConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[70], name, theme_type) }
func (gdClass Control) HasThemeIconOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[71], name) }
func (gdClass Control) HasThemeStyleboxOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[72], name) }
func (gdClass Control) HasThemeFontOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[73], name) }
func (gdClass Control) HasThemeFontSizeOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[74], name) }
func (gdClass Control) HasThemeColorOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[75], name) }
func (gdClass Control) HasThemeConstantOverride(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[76], name) }
func (gdClass Control) HasThemeIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[77], name, theme_type) }
func (gdClass Control) HasThemeStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[78], name, theme_type) }
func (gdClass Control) HasThemeFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[79], name, theme_type) }
func (gdClass Control) HasThemeFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[80], name, theme_type) }
func (gdClass Control) HasThemeColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[81], name, theme_type) }
func (gdClass Control) HasThemeConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[82], name, theme_type) }
func (gdClass Control) GetThemeDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodControl[83]) }
func (gdClass Control) GetThemeDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodControl[84]) }
func (gdClass Control) GetThemeDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodControl[85]) }
func (gdClass Control) GetParentControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodControl[86]) }
func (gdClass Control) SetHGrowDirection(direction ControlGrowDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[87], direction) }
func (gdClass Control) GetHGrowDirection() ControlGrowDirection { return gdnative.Return[ControlGrowDirection](gdnative.Object(gdClass), methodControl[88]) }
func (gdClass Control) SetVGrowDirection(direction ControlGrowDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[89], direction) }
func (gdClass Control) GetVGrowDirection() ControlGrowDirection { return gdnative.Return[ControlGrowDirection](gdnative.Object(gdClass), methodControl[90]) }
func (gdClass Control) SetTooltip(tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodControl[91], tooltip) }
func (gdClass Control) GetTooltip(at_position Vector2) string { return gdnative.Return[string](gdnative.Object(gdClass), methodControl[92], at_position) }
func (gdClass Control) SetDefaultCursorShape(shape ControlCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodControl[93], shape) }
func (gdClass Control) GetDefaultCursorShape() ControlCursorShape { return gdnative.Return[ControlCursorShape](gdnative.Object(gdClass), methodControl[94]) }
func (gdClass Control) GetCursorShape(position Vector2) ControlCursorShape { return gdnative.Return[ControlCursorShape](gdnative.Object(gdClass), methodControl[95], position) }
func (gdClass Control) SetFocusNeighbor(side Side, neighbor NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[96], side, neighbor) }
func (gdClass Control) GetFocusNeighbor(side Side) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[97], side) }
func (gdClass Control) SetFocusNext(next NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[98], next) }
func (gdClass Control) GetFocusNext() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[99]) }
func (gdClass Control) SetFocusPrevious(previous NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodControl[100], previous) }
func (gdClass Control) GetFocusPrevious() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodControl[101]) }
func (gdClass Control) ForceDrag(data any, preview Control)  { gdnative.Call(gdnative.Object(gdClass), methodControl[102], data, preview) }
func (gdClass Control) SetMouseFilter(filter ControlMouseFilter)  { gdnative.Call(gdnative.Object(gdClass), methodControl[103], filter) }
func (gdClass Control) GetMouseFilter() ControlMouseFilter { return gdnative.Return[ControlMouseFilter](gdnative.Object(gdClass), methodControl[104]) }
func (gdClass Control) SetForcePassScrollEvents(force_pass_scroll_events bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[105], force_pass_scroll_events) }
func (gdClass Control) IsForcePassScrollEvents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[106]) }
func (gdClass Control) SetClipContents(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[107], enable) }
func (gdClass Control) IsClippingContents() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[108]) }
func (gdClass Control) GrabClickFocus()  { gdnative.Call(gdnative.Object(gdClass), methodControl[109]) }
func (gdClass Control) SetDragForwarding(target Object)  { gdnative.Call(gdnative.Object(gdClass), methodControl[110], target) }
func (gdClass Control) SetDragPreview(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodControl[111], control) }
func (gdClass Control) IsDragSuccessful() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[112]) }
func (gdClass Control) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodControl[113], position) }
func (gdClass Control) UpdateMinimumSize()  { gdnative.Call(gdnative.Object(gdClass), methodControl[114]) }
func (gdClass Control) SetLayoutDirection(direction ControlLayoutDirection)  { gdnative.Call(gdnative.Object(gdClass), methodControl[115], direction) }
func (gdClass Control) GetLayoutDirection() ControlLayoutDirection { return gdnative.Return[ControlLayoutDirection](gdnative.Object(gdClass), methodControl[116]) }
func (gdClass Control) IsLayoutRtl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[117]) }
func (gdClass Control) SetAutoTranslate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodControl[118], enable) }
func (gdClass Control) IsAutoTranslating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodControl[119]) }

type ConvexPolygonShape2D gdnative.Object
func (ConvexPolygonShape2D) class() string { return "ConvexPolygonShape2D\000" }

func (gdClass ConvexPolygonShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodConvexPolygonShape2D [3]gdnative.Method
func (gdClass ConvexPolygonShape2D) SetPointCloud(point_cloud []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape2D[0], point_cloud) }
func (gdClass ConvexPolygonShape2D) SetPoints(points []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape2D[1], points) }
func (gdClass ConvexPolygonShape2D) GetPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodConvexPolygonShape2D[2]) }

type ConvexPolygonShape3D gdnative.Object
func (ConvexPolygonShape3D) class() string { return "ConvexPolygonShape3D\000" }

func (gdClass ConvexPolygonShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodConvexPolygonShape3D [2]gdnative.Method
func (gdClass ConvexPolygonShape3D) SetPoints(points []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodConvexPolygonShape3D[0], points) }
func (gdClass ConvexPolygonShape3D) GetPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodConvexPolygonShape3D[1]) }

type Crypto gdnative.Object
func (Crypto) class() string { return "Crypto\000" }

func (gdClass Crypto) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodCrypto [9]gdnative.Method
func (gdClass Crypto) GenerateRandomBytes(size int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[0], size) }
func (gdClass Crypto) GenerateRsa(size int64) CryptoKey { return gdnative.Return[CryptoKey](gdnative.Object(gdClass), methodCrypto[1], size) }
func (gdClass Crypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name string, not_before string, not_after string) X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodCrypto[2], key, issuer_name, not_before, not_after) }
func (gdClass Crypto) Sign(hash_type HashingContextHashType, hash []byte, key CryptoKey) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[3], hash_type, hash, key) }
func (gdClass Crypto) Verify(hash_type HashingContextHashType, hash []byte, signature []byte, key CryptoKey) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCrypto[4], hash_type, hash, signature, key) }
func (gdClass Crypto) Encrypt(key CryptoKey, plaintext []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[5], key, plaintext) }
func (gdClass Crypto) Decrypt(key CryptoKey, ciphertext []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[6], key, ciphertext) }
func (gdClass Crypto) HmacDigest(hash_type HashingContextHashType, key []byte, msg []byte) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodCrypto[7], hash_type, key, msg) }
func (gdClass Crypto) ConstantTimeCompare(trusted []byte, received []byte) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCrypto[8], trusted, received) }

type CryptoKey gdnative.Object
func (CryptoKey) class() string { return "CryptoKey\000" }

func (gdClass CryptoKey) Resource() Resource { return Resource(gdClass) }

var methodCryptoKey [5]gdnative.Method
func (gdClass CryptoKey) Save(path string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[0], path, public_only) }
func (gdClass CryptoKey) Load(path string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[1], path, public_only) }
func (gdClass CryptoKey) IsPublicOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCryptoKey[2]) }
func (gdClass CryptoKey) SaveToString(public_only bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodCryptoKey[3], public_only) }
func (gdClass CryptoKey) LoadFromString(string_key string, public_only bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodCryptoKey[4], string_key, public_only) }

type Cubemap gdnative.Object
func (Cubemap) class() string { return "Cubemap\000" }

func (gdClass Cubemap) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered(gdClass) }


type CubemapArray gdnative.Object
func (CubemapArray) class() string { return "CubemapArray\000" }

func (gdClass CubemapArray) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered(gdClass) }


type CurveTangentMode int64

const (
	CurveTangentFree CurveTangentMode = 0
	CurveTangentLinear CurveTangentMode = 1
	CurveTangentModeCount CurveTangentMode = 2
)

type Curve gdnative.Object
func (Curve) class() string { return "Curve\000" }

func (gdClass Curve) Resource() Resource { return Resource(gdClass) }

var methodCurve [26]gdnative.Method
func (gdClass Curve) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[0]) }
func (gdClass Curve) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[1], count) }
func (gdClass Curve) AddPoint(position Vector2, left_tangent float64, right_tangent float64, left_mode CurveTangentMode, right_mode CurveTangentMode) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[2], position, left_tangent, right_tangent, left_mode, right_mode) }
func (gdClass Curve) RemovePoint(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[3], index) }
func (gdClass Curve) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[4]) }
func (gdClass Curve) GetPointPosition(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve[5], index) }
func (gdClass Curve) SetPointValue(index int64, y float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[6], index, y) }
func (gdClass Curve) SetPointOffset(index int64, offset float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[7], index, offset) }
func (gdClass Curve) Interpolate(offset float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[8], offset) }
func (gdClass Curve) InterpolateBaked(offset float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[9], offset) }
func (gdClass Curve) GetPointLeftTangent(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[10], index) }
func (gdClass Curve) GetPointRightTangent(index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[11], index) }
func (gdClass Curve) GetPointLeftMode(index int64) CurveTangentMode { return gdnative.Return[CurveTangentMode](gdnative.Object(gdClass), methodCurve[12], index) }
func (gdClass Curve) GetPointRightMode(index int64) CurveTangentMode { return gdnative.Return[CurveTangentMode](gdnative.Object(gdClass), methodCurve[13], index) }
func (gdClass Curve) SetPointLeftTangent(index int64, tangent float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[14], index, tangent) }
func (gdClass Curve) SetPointRightTangent(index int64, tangent float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[15], index, tangent) }
func (gdClass Curve) SetPointLeftMode(index int64, mode CurveTangentMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[16], index, mode) }
func (gdClass Curve) SetPointRightMode(index int64, mode CurveTangentMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[17], index, mode) }
func (gdClass Curve) GetMinValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[18]) }
func (gdClass Curve) SetMinValue(min float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[19], min) }
func (gdClass Curve) GetMaxValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve[20]) }
func (gdClass Curve) SetMaxValue(max float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[21], max) }
func (gdClass Curve) CleanDupes()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[22]) }
func (gdClass Curve) Bake()  { gdnative.Call(gdnative.Object(gdClass), methodCurve[23]) }
func (gdClass Curve) GetBakeResolution() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve[24]) }
func (gdClass Curve) SetBakeResolution(resolution int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve[25], resolution) }

type Curve2D gdnative.Object
func (Curve2D) class() string { return "Curve2D\000" }

func (gdClass Curve2D) Resource() Resource { return Resource(gdClass) }

var methodCurve2D [21]gdnative.Method
func (gdClass Curve2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve2D[0]) }
func (gdClass Curve2D) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[1], count) }
func (gdClass Curve2D) AddPoint(position Vector2, in Vector2, out Vector2, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[2], position, in, out, index) }
func (gdClass Curve2D) SetPointPosition(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[3], idx, position) }
func (gdClass Curve2D) GetPointPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[4], idx) }
func (gdClass Curve2D) SetPointIn(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[5], idx, position) }
func (gdClass Curve2D) GetPointIn(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[6], idx) }
func (gdClass Curve2D) SetPointOut(idx int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[7], idx, position) }
func (gdClass Curve2D) GetPointOut(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[8], idx) }
func (gdClass Curve2D) RemovePoint(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[9], idx) }
func (gdClass Curve2D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[10]) }
func (gdClass Curve2D) Interpolate(idx int64, t float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[11], idx, t) }
func (gdClass Curve2D) Interpolatef(fofs float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[12], fofs) }
func (gdClass Curve2D) SetBakeInterval(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve2D[13], distance) }
func (gdClass Curve2D) GetBakeInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[14]) }
func (gdClass Curve2D) GetBakedLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[15]) }
func (gdClass Curve2D) InterpolateBaked(offset float64, cubic bool) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[16], offset, cubic) }
func (gdClass Curve2D) GetBakedPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCurve2D[17]) }
func (gdClass Curve2D) GetClosestPoint(to_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodCurve2D[18], to_point) }
func (gdClass Curve2D) GetClosestOffset(to_point Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve2D[19], to_point) }
func (gdClass Curve2D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodCurve2D[20], max_stages, tolerance_degrees) }

type Curve3D gdnative.Object
func (Curve3D) class() string { return "Curve3D\000" }

func (gdClass Curve3D) Resource() Resource { return Resource(gdClass) }

var methodCurve3D [28]gdnative.Method
func (gdClass Curve3D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCurve3D[0]) }
func (gdClass Curve3D) SetPointCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[1], count) }
func (gdClass Curve3D) AddPoint(position Vector3, in Vector3, out Vector3, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[2], position, in, out, index) }
func (gdClass Curve3D) SetPointPosition(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[3], idx, position) }
func (gdClass Curve3D) GetPointPosition(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[4], idx) }
func (gdClass Curve3D) SetPointTilt(idx int64, tilt float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[5], idx, tilt) }
func (gdClass Curve3D) GetPointTilt(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[6], idx) }
func (gdClass Curve3D) SetPointIn(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[7], idx, position) }
func (gdClass Curve3D) GetPointIn(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[8], idx) }
func (gdClass Curve3D) SetPointOut(idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[9], idx, position) }
func (gdClass Curve3D) GetPointOut(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[10], idx) }
func (gdClass Curve3D) RemovePoint(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[11], idx) }
func (gdClass Curve3D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[12]) }
func (gdClass Curve3D) Interpolate(idx int64, t float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[13], idx, t) }
func (gdClass Curve3D) Interpolatef(fofs float64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[14], fofs) }
func (gdClass Curve3D) SetBakeInterval(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[15], distance) }
func (gdClass Curve3D) GetBakeInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[16]) }
func (gdClass Curve3D) SetUpVectorEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodCurve3D[17], enable) }
func (gdClass Curve3D) IsUpVectorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCurve3D[18]) }
func (gdClass Curve3D) GetBakedLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[19]) }
func (gdClass Curve3D) InterpolateBaked(offset float64, cubic bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[20], offset, cubic) }
func (gdClass Curve3D) InterpolateBakedUpVector(offset float64, apply_tilt bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[21], offset, apply_tilt) }
func (gdClass Curve3D) GetBakedPoints() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[22]) }
func (gdClass Curve3D) GetBakedTilts() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodCurve3D[23]) }
func (gdClass Curve3D) GetBakedUpVectors() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[24]) }
func (gdClass Curve3D) GetClosestPoint(to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodCurve3D[25], to_point) }
func (gdClass Curve3D) GetClosestOffset(to_point Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCurve3D[26], to_point) }
func (gdClass Curve3D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodCurve3D[27], max_stages, tolerance_degrees) }

type CurveTextureTextureMode int64

const (
	CurveTextureTextureModeRgb CurveTextureTextureMode = 0
	CurveTextureTextureModeRed CurveTextureTextureMode = 1
)

type CurveTexture gdnative.Object
func (CurveTexture) class() string { return "CurveTexture\000" }

func (gdClass CurveTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodCurveTexture [5]gdnative.Method
func (gdClass CurveTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[0], width) }
func (gdClass CurveTexture) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[1], curve) }
func (gdClass CurveTexture) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveTexture[2]) }
func (gdClass CurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode)  { gdnative.Call(gdnative.Object(gdClass), methodCurveTexture[3], texture_mode) }
func (gdClass CurveTexture) GetTextureMode() CurveTextureTextureMode { return gdnative.Return[CurveTextureTextureMode](gdnative.Object(gdClass), methodCurveTexture[4]) }

type CurveXYZTexture gdnative.Object
func (CurveXYZTexture) class() string { return "CurveXYZTexture\000" }

func (gdClass CurveXYZTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodCurveXYZTexture [7]gdnative.Method
func (gdClass CurveXYZTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[0], width) }
func (gdClass CurveXYZTexture) SetCurveX(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[1], curve) }
func (gdClass CurveXYZTexture) GetCurveX() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[2]) }
func (gdClass CurveXYZTexture) SetCurveY(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[3], curve) }
func (gdClass CurveXYZTexture) GetCurveY() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[4]) }
func (gdClass CurveXYZTexture) SetCurveZ(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodCurveXYZTexture[5], curve) }
func (gdClass CurveXYZTexture) GetCurveZ() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodCurveXYZTexture[6]) }

type CylinderMesh gdnative.Object
func (CylinderMesh) class() string { return "CylinderMesh\000" }

func (gdClass CylinderMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodCylinderMesh [14]gdnative.Method
func (gdClass CylinderMesh) SetTopRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[0], radius) }
func (gdClass CylinderMesh) GetTopRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[1]) }
func (gdClass CylinderMesh) SetBottomRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[2], radius) }
func (gdClass CylinderMesh) GetBottomRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[3]) }
func (gdClass CylinderMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[4], height) }
func (gdClass CylinderMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderMesh[5]) }
func (gdClass CylinderMesh) SetRadialSegments(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[6], segments) }
func (gdClass CylinderMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCylinderMesh[7]) }
func (gdClass CylinderMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[8], rings) }
func (gdClass CylinderMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodCylinderMesh[9]) }
func (gdClass CylinderMesh) SetCapTop(cap_top bool)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[10], cap_top) }
func (gdClass CylinderMesh) IsCapTop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCylinderMesh[11]) }
func (gdClass CylinderMesh) SetCapBottom(cap_bottom bool)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderMesh[12], cap_bottom) }
func (gdClass CylinderMesh) IsCapBottom() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodCylinderMesh[13]) }

type CylinderShape3D gdnative.Object
func (CylinderShape3D) class() string { return "CylinderShape3D\000" }

func (gdClass CylinderShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodCylinderShape3D [4]gdnative.Method
func (gdClass CylinderShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderShape3D[0], radius) }
func (gdClass CylinderShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderShape3D[1]) }
func (gdClass CylinderShape3D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodCylinderShape3D[2], height) }
func (gdClass CylinderShape3D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodCylinderShape3D[3]) }

type DTLSServer gdnative.Object
func (DTLSServer) class() string { return "DTLSServer\000" }

func (gdClass DTLSServer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodDTLSServer [2]gdnative.Method
func (gdClass DTLSServer) Setup(key CryptoKey, certificate X509Certificate, chain X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDTLSServer[0], key, certificate, chain) }
func (gdClass DTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS { return gdnative.Return[PacketPeerDTLS](gdnative.Object(gdClass), methodDTLSServer[1], udp_peer) }

type DampedSpringJoint2D gdnative.Object
func (DampedSpringJoint2D) class() string { return "DampedSpringJoint2D\000" }

func (gdClass DampedSpringJoint2D) Joint2D() Joint2D { return Joint2D(gdClass) }

var methodDampedSpringJoint2D [8]gdnative.Method
func (gdClass DampedSpringJoint2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[0], length) }
func (gdClass DampedSpringJoint2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[1]) }
func (gdClass DampedSpringJoint2D) SetRestLength(rest_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[2], rest_length) }
func (gdClass DampedSpringJoint2D) GetRestLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[3]) }
func (gdClass DampedSpringJoint2D) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[4], stiffness) }
func (gdClass DampedSpringJoint2D) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[5]) }
func (gdClass DampedSpringJoint2D) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodDampedSpringJoint2D[6], damping) }
func (gdClass DampedSpringJoint2D) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDampedSpringJoint2D[7]) }

type DecalDecalTexture int64

const (
	DecalTextureAlbedo DecalDecalTexture = 0
	DecalTextureNormal DecalDecalTexture = 1
	DecalTextureOrm DecalDecalTexture = 2
	DecalTextureEmission DecalDecalTexture = 3
	DecalTextureMax DecalDecalTexture = 4
)

type Decal gdnative.Object
func (Decal) class() string { return "Decal\000" }

func (gdClass Decal) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodDecal [24]gdnative.Method
func (gdClass Decal) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[0], extents) }
func (gdClass Decal) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodDecal[1]) }
func (gdClass Decal) SetTexture(atype DecalDecalTexture, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[2], atype, texture) }
func (gdClass Decal) GetTexture(atype DecalDecalTexture) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodDecal[3], atype) }
func (gdClass Decal) SetEmissionEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[4], energy) }
func (gdClass Decal) GetEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[5]) }
func (gdClass Decal) SetAlbedoMix(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[6], energy) }
func (gdClass Decal) GetAlbedoMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[7]) }
func (gdClass Decal) SetModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[8], color) }
func (gdClass Decal) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodDecal[9]) }
func (gdClass Decal) SetUpperFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[10], fade) }
func (gdClass Decal) GetUpperFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[11]) }
func (gdClass Decal) SetLowerFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[12], fade) }
func (gdClass Decal) GetLowerFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[13]) }
func (gdClass Decal) SetNormalFade(fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[14], fade) }
func (gdClass Decal) GetNormalFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[15]) }
func (gdClass Decal) SetEnableDistanceFade(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[16], enable) }
func (gdClass Decal) IsDistanceFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDecal[17]) }
func (gdClass Decal) SetDistanceFadeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[18], distance) }
func (gdClass Decal) GetDistanceFadeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[19]) }
func (gdClass Decal) SetDistanceFadeLength(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[20], distance) }
func (gdClass Decal) GetDistanceFadeLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDecal[21]) }
func (gdClass Decal) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodDecal[22], mask) }
func (gdClass Decal) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDecal[23]) }

type DirectionalLight2D gdnative.Object
func (DirectionalLight2D) class() string { return "DirectionalLight2D\000" }

func (gdClass DirectionalLight2D) Light2D() Light2D { return Light2D(gdClass) }

var methodDirectionalLight2D [2]gdnative.Method
func (gdClass DirectionalLight2D) SetMaxDistance(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight2D[0], pixels) }
func (gdClass DirectionalLight2D) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDirectionalLight2D[1]) }

type DirectionalLight3DShadowMode int64

const (
	DirectionalLight3DShadowOrthogonal DirectionalLight3DShadowMode = 0
	DirectionalLight3DShadowParallel2Splits DirectionalLight3DShadowMode = 1
	DirectionalLight3DShadowParallel4Splits DirectionalLight3DShadowMode = 2
)

type DirectionalLight3DSkyMode int64

const (
	DirectionalLight3DSkyModeLightAndSky DirectionalLight3DSkyMode = 0
	DirectionalLight3DSkyModeLightOnly DirectionalLight3DSkyMode = 1
	DirectionalLight3DSkyModeSkyOnly DirectionalLight3DSkyMode = 2
)

type DirectionalLight3D gdnative.Object
func (DirectionalLight3D) class() string { return "DirectionalLight3D\000" }

func (gdClass DirectionalLight3D) Light3D() Light3D { return Light3D(gdClass) }

var methodDirectionalLight3D [6]gdnative.Method
func (gdClass DirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[0], mode) }
func (gdClass DirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode { return gdnative.Return[DirectionalLight3DShadowMode](gdnative.Object(gdClass), methodDirectionalLight3D[1]) }
func (gdClass DirectionalLight3D) SetBlendSplits(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[2], enabled) }
func (gdClass DirectionalLight3D) IsBlendSplitsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectionalLight3D[3]) }
func (gdClass DirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodDirectionalLight3D[4], mode) }
func (gdClass DirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode { return gdnative.Return[DirectionalLight3DSkyMode](gdnative.Object(gdClass), methodDirectionalLight3D[5]) }

type Directory gdnative.Object
func (Directory) class() string { return "Directory\000" }

func (gdClass Directory) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodDirectory [24]gdnative.Method
func (gdClass Directory) Open(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[0], path) }
func (gdClass Directory) ListDirBegin() error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[1]) }
func (gdClass Directory) GetNext() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[2]) }
func (gdClass Directory) CurrentIsDir() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[3]) }
func (gdClass Directory) ListDirEnd()  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[4]) }
func (gdClass Directory) GetFiles() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDirectory[5]) }
func (gdClass Directory) GetDirectories() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDirectory[6]) }
func (gdClass Directory) GetDriveCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[7]) }
func (gdClass Directory) GetDrive(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[8], idx) }
func (gdClass Directory) GetCurrentDrive() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[9]) }
func (gdClass Directory) ChangeDir(todir string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[10], todir) }
func (gdClass Directory) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDirectory[11]) }
func (gdClass Directory) MakeDir(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[12], path) }
func (gdClass Directory) MakeDirRecursive(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[13], path) }
func (gdClass Directory) FileExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[14], path) }
func (gdClass Directory) DirExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[15], path) }
func (gdClass Directory) GetSpaceLeft() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDirectory[16]) }
func (gdClass Directory) Copy(from string, to string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[17], from, to) }
func (gdClass Directory) Rename(from string, to string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[18], from, to) }
func (gdClass Directory) Remove(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDirectory[19], path) }
func (gdClass Directory) SetIncludeNavigational(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[20], enable) }
func (gdClass Directory) GetIncludeNavigational() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[21]) }
func (gdClass Directory) SetIncludeHidden(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDirectory[22], enable) }
func (gdClass Directory) GetIncludeHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDirectory[23]) }

type DisplayServerFeature int64

const (
	DisplayServerFeatureGlobalMenu DisplayServerFeature = 0
	DisplayServerFeatureSubwindows DisplayServerFeature = 1
	DisplayServerFeatureTouchscreen DisplayServerFeature = 2
	DisplayServerFeatureMouse DisplayServerFeature = 3
	DisplayServerFeatureMouseWarp DisplayServerFeature = 4
	DisplayServerFeatureClipboard DisplayServerFeature = 5
	DisplayServerFeatureVirtualKeyboard DisplayServerFeature = 6
	DisplayServerFeatureCursorShape DisplayServerFeature = 7
	DisplayServerFeatureCustomCursorShape DisplayServerFeature = 8
	DisplayServerFeatureNativeDialog DisplayServerFeature = 9
	DisplayServerFeatureIme DisplayServerFeature = 10
	DisplayServerFeatureWindowTransparency DisplayServerFeature = 11
	DisplayServerFeatureHidpi DisplayServerFeature = 12
	DisplayServerFeatureIcon DisplayServerFeature = 13
	DisplayServerFeatureNativeIcon DisplayServerFeature = 14
	DisplayServerFeatureOrientation DisplayServerFeature = 15
	DisplayServerFeatureSwapBuffers DisplayServerFeature = 16
	DisplayServerFeatureClipboardPrimary DisplayServerFeature = 18
	DisplayServerFeatureTextToSpeech DisplayServerFeature = 19
)

type DisplayServerMouseMode int64

const (
	DisplayServerMouseModeVisible DisplayServerMouseMode = 0
	DisplayServerMouseModeHidden DisplayServerMouseMode = 1
	DisplayServerMouseModeCaptured DisplayServerMouseMode = 2
	DisplayServerMouseModeConfined DisplayServerMouseMode = 3
	DisplayServerMouseModeConfinedHidden DisplayServerMouseMode = 4
)

type DisplayServerScreenOrientation int64

const (
	DisplayServerScreenLandscape DisplayServerScreenOrientation = 0
	DisplayServerScreenPortrait DisplayServerScreenOrientation = 1
	DisplayServerScreenReverseLandscape DisplayServerScreenOrientation = 2
	DisplayServerScreenReversePortrait DisplayServerScreenOrientation = 3
	DisplayServerScreenSensorLandscape DisplayServerScreenOrientation = 4
	DisplayServerScreenSensorPortrait DisplayServerScreenOrientation = 5
	DisplayServerScreenSensor DisplayServerScreenOrientation = 6
)

type DisplayServerVirtualKeyboardType int64

const (
	DisplayServerKeyboardTypeDefault DisplayServerVirtualKeyboardType = 0
	DisplayServerKeyboardTypeMultiline DisplayServerVirtualKeyboardType = 1
	DisplayServerKeyboardTypeNumber DisplayServerVirtualKeyboardType = 2
	DisplayServerKeyboardTypeNumberDecimal DisplayServerVirtualKeyboardType = 3
	DisplayServerKeyboardTypePhone DisplayServerVirtualKeyboardType = 4
	DisplayServerKeyboardTypeEmailAddress DisplayServerVirtualKeyboardType = 5
	DisplayServerKeyboardTypePassword DisplayServerVirtualKeyboardType = 6
	DisplayServerKeyboardTypeUrl DisplayServerVirtualKeyboardType = 7
)

type DisplayServerCursorShape int64

const (
	DisplayServerCursorArrow DisplayServerCursorShape = 0
	DisplayServerCursorIbeam DisplayServerCursorShape = 1
	DisplayServerCursorPointingHand DisplayServerCursorShape = 2
	DisplayServerCursorCross DisplayServerCursorShape = 3
	DisplayServerCursorWait DisplayServerCursorShape = 4
	DisplayServerCursorBusy DisplayServerCursorShape = 5
	DisplayServerCursorDrag DisplayServerCursorShape = 6
	DisplayServerCursorCanDrop DisplayServerCursorShape = 7
	DisplayServerCursorForbidden DisplayServerCursorShape = 8
	DisplayServerCursorVsize DisplayServerCursorShape = 9
	DisplayServerCursorHsize DisplayServerCursorShape = 10
	DisplayServerCursorBdiagsize DisplayServerCursorShape = 11
	DisplayServerCursorFdiagsize DisplayServerCursorShape = 12
	DisplayServerCursorMove DisplayServerCursorShape = 13
	DisplayServerCursorVsplit DisplayServerCursorShape = 14
	DisplayServerCursorHsplit DisplayServerCursorShape = 15
	DisplayServerCursorHelp DisplayServerCursorShape = 16
	DisplayServerCursorMax DisplayServerCursorShape = 17
)

type DisplayServerWindowMode int64

const (
	DisplayServerWindowModeWindowed DisplayServerWindowMode = 0
	DisplayServerWindowModeMinimized DisplayServerWindowMode = 1
	DisplayServerWindowModeMaximized DisplayServerWindowMode = 2
	DisplayServerWindowModeFullscreen DisplayServerWindowMode = 3
	DisplayServerWindowModeExclusiveFullscreen DisplayServerWindowMode = 4
)

type DisplayServerWindowFlags int64

const (
	DisplayServerWindowFlagResizeDisabled DisplayServerWindowFlags = 0
	DisplayServerWindowFlagBorderless DisplayServerWindowFlags = 1
	DisplayServerWindowFlagAlwaysOnTop DisplayServerWindowFlags = 2
	DisplayServerWindowFlagTransparent DisplayServerWindowFlags = 3
	DisplayServerWindowFlagNoFocus DisplayServerWindowFlags = 4
	DisplayServerWindowFlagPopup DisplayServerWindowFlags = 5
	DisplayServerWindowFlagMax DisplayServerWindowFlags = 6
)

type DisplayServerWindowEvent int64

const (
	DisplayServerWindowEventMouseEnter DisplayServerWindowEvent = 0
	DisplayServerWindowEventMouseExit DisplayServerWindowEvent = 1
	DisplayServerWindowEventFocusIn DisplayServerWindowEvent = 2
	DisplayServerWindowEventFocusOut DisplayServerWindowEvent = 3
	DisplayServerWindowEventCloseRequest DisplayServerWindowEvent = 4
	DisplayServerWindowEventGoBackRequest DisplayServerWindowEvent = 5
	DisplayServerWindowEventDpiChange DisplayServerWindowEvent = 6
)

type DisplayServerVSyncMode int64

const (
	DisplayServerVsyncDisabled DisplayServerVSyncMode = 0
	DisplayServerVsyncEnabled DisplayServerVSyncMode = 1
	DisplayServerVsyncAdaptive DisplayServerVSyncMode = 2
	DisplayServerVsyncMailbox DisplayServerVSyncMode = 3
)

type DisplayServerHandleType int64

const (
	DisplayServerDisplayHandle DisplayServerHandleType = 0
	DisplayServerWindowHandle DisplayServerHandleType = 1
	DisplayServerWindowView DisplayServerHandleType = 2
)

type DisplayServerTTSUtteranceEvent int64

const (
	DisplayServerTtsUtteranceStarted DisplayServerTTSUtteranceEvent = 0
	DisplayServerTtsUtteranceEnded DisplayServerTTSUtteranceEvent = 1
	DisplayServerTtsUtteranceCanceled DisplayServerTTSUtteranceEvent = 2
	DisplayServerTtsUtteranceBoundary DisplayServerTTSUtteranceEvent = 3
)

type DisplayServer gdnative.Object
func (DisplayServer) class() string { return "DisplayServer\000" }

func (gdClass DisplayServer) Object() Object { return Object(gdClass) }

var methodDisplayServer [144]gdnative.Method
func (gdClass DisplayServer) HasFeature(feature DisplayServerFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[0], feature) }
func (gdClass DisplayServer) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[1]) }
func (gdClass DisplayServer) GlobalMenuAddItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[2], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[3], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[4], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[5], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddRadioCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[6], menu_root, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddIconRadioCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[7], menu_root, icon, label, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddMultistateItem(menu_root string, labe string, max_states int64, default_state int64, callback Callable, tag any, accelerator Key, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[8], menu_root, labe, max_states, default_state, callback, tag, accelerator, index) }
func (gdClass DisplayServer) GlobalMenuAddSubmenuItem(menu_root string, label string, submenu string, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[9], menu_root, label, submenu, index) }
func (gdClass DisplayServer) GlobalMenuAddSeparator(menu_root string, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[10], menu_root, index) }
func (gdClass DisplayServer) GlobalMenuGetItemIndexFromText(menu_root string, text string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[11], menu_root, text) }
func (gdClass DisplayServer) GlobalMenuGetItemIndexFromTag(menu_root string, tag any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[12], menu_root, tag) }
func (gdClass DisplayServer) GlobalMenuIsItemChecked(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[13], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemCheckable(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[14], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemRadioCheckable(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[15], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemCallback(menu_root string, idx int64) Callable { return gdnative.Return[Callable](gdnative.Object(gdClass), methodDisplayServer[16], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemTag(menu_root string, idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodDisplayServer[17], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemText(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[18], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemSubmenu(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[19], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemAccelerator(menu_root string, idx int64) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodDisplayServer[20], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuIsItemDisabled(menu_root string, idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[21], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemTooltip(menu_root string, idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[22], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemState(menu_root string, idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[23], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemMaxStates(menu_root string, idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[24], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemIcon(menu_root string, idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodDisplayServer[25], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuGetItemIndentationLevel(menu_root string, idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[26], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuSetItemChecked(menu_root string, idx int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[27], menu_root, idx, checked) }
func (gdClass DisplayServer) GlobalMenuSetItemCheckable(menu_root string, idx int64, checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[28], menu_root, idx, checkable) }
func (gdClass DisplayServer) GlobalMenuSetItemRadioCheckable(menu_root string, idx int64, checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[29], menu_root, idx, checkable) }
func (gdClass DisplayServer) GlobalMenuSetItemCallback(menu_root string, idx int64, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[30], menu_root, idx, callback) }
func (gdClass DisplayServer) GlobalMenuSetItemTag(menu_root string, idx int64, tag any)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[31], menu_root, idx, tag) }
func (gdClass DisplayServer) GlobalMenuSetItemText(menu_root string, idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[32], menu_root, idx, text) }
func (gdClass DisplayServer) GlobalMenuSetItemSubmenu(menu_root string, idx int64, submenu string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[33], menu_root, idx, submenu) }
func (gdClass DisplayServer) GlobalMenuSetItemAccelerator(menu_root string, idx int64, keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[34], menu_root, idx, keycode) }
func (gdClass DisplayServer) GlobalMenuSetItemDisabled(menu_root string, idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[35], menu_root, idx, disabled) }
func (gdClass DisplayServer) GlobalMenuSetItemTooltip(menu_root string, idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[36], menu_root, idx, tooltip) }
func (gdClass DisplayServer) GlobalMenuSetItemState(menu_root string, idx int64, state int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[37], menu_root, idx, state) }
func (gdClass DisplayServer) GlobalMenuSetItemMaxStates(menu_root string, idx int64, max_states int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[38], menu_root, idx, max_states) }
func (gdClass DisplayServer) GlobalMenuSetItemIcon(menu_root string, idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[39], menu_root, idx, icon) }
func (gdClass DisplayServer) GlobalMenuSetItemIndentationLevel(menu_root string, idx int64, level int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[40], menu_root, idx, level) }
func (gdClass DisplayServer) GlobalMenuRemoveItem(menu_root string, idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[41], menu_root, idx) }
func (gdClass DisplayServer) GlobalMenuClear(menu_root string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[42], menu_root) }
func (gdClass DisplayServer) TtsIsSpeaking() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[43]) }
func (gdClass DisplayServer) TtsIsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[44]) }
func (gdClass DisplayServer) TtsGetVoices() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodDisplayServer[45]) }
func (gdClass DisplayServer) TtsGetVoicesForLanguage(language string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodDisplayServer[46], language) }
func (gdClass DisplayServer) TtsSpeak(text string, voice string, volume int64, pitch float64, rate float64, utterance_id int64, interrupt bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[47], text, voice, volume, pitch, rate, utterance_id, interrupt) }
func (gdClass DisplayServer) TtsPause()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[48]) }
func (gdClass DisplayServer) TtsResume()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[49]) }
func (gdClass DisplayServer) TtsStop()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[50]) }
func (gdClass DisplayServer) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[51], event, callable) }
func (gdClass DisplayServer) MouseSetMode(mouse_mode DisplayServerMouseMode)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[52], mouse_mode) }
func (gdClass DisplayServer) MouseGetMode() DisplayServerMouseMode { return gdnative.Return[DisplayServerMouseMode](gdnative.Object(gdClass), methodDisplayServer[53]) }
func (gdClass DisplayServer) WarpMouse(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[54], position) }
func (gdClass DisplayServer) MouseGetPosition() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[55]) }
func (gdClass DisplayServer) MouseGetButtonState() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodDisplayServer[56]) }
func (gdClass DisplayServer) ClipboardSet(clipboard string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[57], clipboard) }
func (gdClass DisplayServer) ClipboardGet() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[58]) }
func (gdClass DisplayServer) ClipboardHas() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[59]) }
func (gdClass DisplayServer) ClipboardSetPrimary(clipboard_primary string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[60], clipboard_primary) }
func (gdClass DisplayServer) ClipboardGetPrimary() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[61]) }
func (gdClass DisplayServer) GetDisplayCutouts() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodDisplayServer[62]) }
func (gdClass DisplayServer) GetDisplaySafeArea() Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[63]) }
func (gdClass DisplayServer) GetScreenCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[64]) }
func (gdClass DisplayServer) ScreenGetPosition(screen int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[65], screen) }
func (gdClass DisplayServer) ScreenGetSize(screen int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[66], screen) }
func (gdClass DisplayServer) ScreenGetUsableRect(screen int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[67], screen) }
func (gdClass DisplayServer) ScreenGetDpi(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[68], screen) }
func (gdClass DisplayServer) ScreenGetScale(screen int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[69], screen) }
func (gdClass DisplayServer) ScreenIsTouchscreen(screen int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[70], screen) }
func (gdClass DisplayServer) ScreenGetMaxScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[71]) }
func (gdClass DisplayServer) ScreenGetRefreshRate(screen int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodDisplayServer[72], screen) }
func (gdClass DisplayServer) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[73], orientation, screen) }
func (gdClass DisplayServer) ScreenGetOrientation(screen int64) DisplayServerScreenOrientation { return gdnative.Return[DisplayServerScreenOrientation](gdnative.Object(gdClass), methodDisplayServer[74], screen) }
func (gdClass DisplayServer) ScreenSetKeepOn(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[75], enable) }
func (gdClass DisplayServer) ScreenIsKeptOn() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[76]) }
func (gdClass DisplayServer) GetWindowList() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodDisplayServer[77]) }
func (gdClass DisplayServer) GetWindowAtScreenPosition(position Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[78], position) }
func (gdClass DisplayServer) CreateSubWindow(mode DisplayServerWindowMode, vsync_mode DisplayServerVSyncMode, flags int64, rect Rect2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[79], mode, vsync_mode, flags, rect) }
func (gdClass DisplayServer) DeleteSubWindow(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[80], window_id) }
func (gdClass DisplayServer) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[81], handle_type, window_id) }
func (gdClass DisplayServer) WindowGetActivePopup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[82]) }
func (gdClass DisplayServer) WindowSetPopupSafeRect(window int64, rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[83], window, rect) }
func (gdClass DisplayServer) WindowGetPopupSafeRect(window int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodDisplayServer[84], window) }
func (gdClass DisplayServer) WindowSetTitle(title string, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[85], title, window_id) }
func (gdClass DisplayServer) WindowSetMousePassthrough(region []Vector2, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[86], region, window_id) }
func (gdClass DisplayServer) WindowGetCurrentScreen(window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[87], window_id) }
func (gdClass DisplayServer) WindowSetCurrentScreen(screen int64, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[88], screen, window_id) }
func (gdClass DisplayServer) WindowGetPosition(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[89], window_id) }
func (gdClass DisplayServer) WindowSetPosition(position Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[90], position, window_id) }
func (gdClass DisplayServer) WindowGetSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[91], window_id) }
func (gdClass DisplayServer) WindowSetSize(size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[92], size, window_id) }
func (gdClass DisplayServer) WindowSetRectChangedCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[93], callback, window_id) }
func (gdClass DisplayServer) WindowSetWindowEventCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[94], callback, window_id) }
func (gdClass DisplayServer) WindowSetInputEventCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[95], callback, window_id) }
func (gdClass DisplayServer) WindowSetInputTextCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[96], callback, window_id) }
func (gdClass DisplayServer) WindowSetDropFilesCallback(callback Callable, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[97], callback, window_id) }
func (gdClass DisplayServer) WindowAttachInstanceId(instance_id int64, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[98], instance_id, window_id) }
func (gdClass DisplayServer) WindowGetAttachedInstanceId(window_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[99], window_id) }
func (gdClass DisplayServer) WindowGetMaxSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[100], window_id) }
func (gdClass DisplayServer) WindowSetMaxSize(max_size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[101], max_size, window_id) }
func (gdClass DisplayServer) WindowGetMinSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[102], window_id) }
func (gdClass DisplayServer) WindowSetMinSize(min_size Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[103], min_size, window_id) }
func (gdClass DisplayServer) WindowGetRealSize(window_id int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[104], window_id) }
func (gdClass DisplayServer) WindowGetMode(window_id int64) DisplayServerWindowMode { return gdnative.Return[DisplayServerWindowMode](gdnative.Object(gdClass), methodDisplayServer[105], window_id) }
func (gdClass DisplayServer) WindowSetMode(mode DisplayServerWindowMode, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[106], mode, window_id) }
func (gdClass DisplayServer) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[107], flag, enabled, window_id) }
func (gdClass DisplayServer) WindowGetFlag(flag DisplayServerWindowFlags, window_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[108], flag, window_id) }
func (gdClass DisplayServer) WindowRequestAttention(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[109], window_id) }
func (gdClass DisplayServer) WindowMoveToForeground(window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[110], window_id) }
func (gdClass DisplayServer) WindowCanDraw(window_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[111], window_id) }
func (gdClass DisplayServer) WindowSetTransient(window_id int64, parent_window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[112], window_id, parent_window_id) }
func (gdClass DisplayServer) WindowSetExclusive(window_id int64, exclusive bool)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[113], window_id, exclusive) }
func (gdClass DisplayServer) WindowSetImeActive(active bool, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[114], active, window_id) }
func (gdClass DisplayServer) WindowSetImePosition(position Vector2i, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[115], position, window_id) }
func (gdClass DisplayServer) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[116], vsync_mode, window_id) }
func (gdClass DisplayServer) WindowGetVsyncMode(window_id int64) DisplayServerVSyncMode { return gdnative.Return[DisplayServerVSyncMode](gdnative.Object(gdClass), methodDisplayServer[117], window_id) }
func (gdClass DisplayServer) ImeGetSelection() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodDisplayServer[118]) }
func (gdClass DisplayServer) ImeGetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[119]) }
func (gdClass DisplayServer) VirtualKeyboardShow(existing_text string, position Rect2, atype DisplayServerVirtualKeyboardType, max_length int64, cursor_start int64, cursor_end int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[120], existing_text, position, atype, max_length, cursor_start, cursor_end) }
func (gdClass DisplayServer) VirtualKeyboardHide()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[121]) }
func (gdClass DisplayServer) VirtualKeyboardGetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[122]) }
func (gdClass DisplayServer) CursorSetShape(shape DisplayServerCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[123], shape) }
func (gdClass DisplayServer) CursorGetShape() DisplayServerCursorShape { return gdnative.Return[DisplayServerCursorShape](gdnative.Object(gdClass), methodDisplayServer[124]) }
func (gdClass DisplayServer) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[125], cursor, shape, hotspot) }
func (gdClass DisplayServer) GetSwapCancelOk() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodDisplayServer[126]) }
func (gdClass DisplayServer) EnableForStealingFocus(process_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[127], process_id) }
func (gdClass DisplayServer) DialogShow(title string, description string, buttons []string, callback Callable) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDisplayServer[128], title, description, buttons, callback) }
func (gdClass DisplayServer) DialogInputText(title string, description string, existing_text string, callback Callable) error { return gdnative.Return[error](gdnative.Object(gdClass), methodDisplayServer[129], title, description, existing_text, callback) }
func (gdClass DisplayServer) KeyboardGetLayoutCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[130]) }
func (gdClass DisplayServer) KeyboardGetCurrentLayout() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[131]) }
func (gdClass DisplayServer) KeyboardSetCurrentLayout(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[132], index) }
func (gdClass DisplayServer) KeyboardGetLayoutLanguage(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[133], index) }
func (gdClass DisplayServer) KeyboardGetLayoutName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[134], index) }
func (gdClass DisplayServer) KeyboardGetKeycodeFromPhysical(keycode Key) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodDisplayServer[135], keycode) }
func (gdClass DisplayServer) ProcessEvents()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[136]) }
func (gdClass DisplayServer) ForceProcessAndDropEvents()  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[137]) }
func (gdClass DisplayServer) SetNativeIcon(filename string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[138], filename) }
func (gdClass DisplayServer) SetIcon(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[139], image) }
func (gdClass DisplayServer) TabletGetDriverCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodDisplayServer[140]) }
func (gdClass DisplayServer) TabletGetDriverName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[141], idx) }
func (gdClass DisplayServer) TabletGetCurrentDriver() string { return gdnative.Return[string](gdnative.Object(gdClass), methodDisplayServer[142]) }
func (gdClass DisplayServer) TabletSetCurrentDriver(name string)  { gdnative.Call(gdnative.Object(gdClass), methodDisplayServer[143], name) }

type ENetConnectionCompressionMode int64

const (
	ENetConnectionCompressNone ENetConnectionCompressionMode = 0
	ENetConnectionCompressRangeCoder ENetConnectionCompressionMode = 1
	ENetConnectionCompressFastlz ENetConnectionCompressionMode = 2
	ENetConnectionCompressZlib ENetConnectionCompressionMode = 3
	ENetConnectionCompressZstd ENetConnectionCompressionMode = 4
)

type ENetConnectionEventType int64

const (
	ENetConnectionEventError ENetConnectionEventType = -1
	ENetConnectionEventNone ENetConnectionEventType = 0
	ENetConnectionEventConnect ENetConnectionEventType = 1
	ENetConnectionEventDisconnect ENetConnectionEventType = 2
	ENetConnectionEventReceive ENetConnectionEventType = 3
)

type ENetConnectionHostStatistic int64

const (
	ENetConnectionHostTotalSentData ENetConnectionHostStatistic = 0
	ENetConnectionHostTotalSentPackets ENetConnectionHostStatistic = 1
	ENetConnectionHostTotalReceivedData ENetConnectionHostStatistic = 2
	ENetConnectionHostTotalReceivedPackets ENetConnectionHostStatistic = 3
)

type ENetConnection gdnative.Object
func (ENetConnection) class() string { return "ENetConnection\000" }

func (gdClass ENetConnection) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodENetConnection [17]gdnative.Method
func (gdClass ENetConnection) CreateHostBound(bind_address string, bind_port int64, max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[0], bind_address, bind_port, max_peers, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) CreateHost(max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[1], max_peers, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) Destroy()  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[2]) }
func (gdClass ENetConnection) ConnectToHost(address string, port int64, channels int64, data int64) ENetPacketPeer { return gdnative.Return[ENetPacketPeer](gdnative.Object(gdClass), methodENetConnection[3], address, port, channels, data) }
func (gdClass ENetConnection) Service(timeout int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodENetConnection[4], timeout) }
func (gdClass ENetConnection) Flush()  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[5]) }
func (gdClass ENetConnection) BandwidthLimit(in_bandwidth int64, out_bandwidth int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[6], in_bandwidth, out_bandwidth) }
func (gdClass ENetConnection) ChannelLimit(limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[7], limit) }
func (gdClass ENetConnection) Broadcast(channel int64, packet []byte, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[8], channel, packet, flags) }
func (gdClass ENetConnection) Compress(mode ENetConnectionCompressionMode)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[9], mode) }
func (gdClass ENetConnection) DtlsServerSetup(key CryptoKey, certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[10], key, certificate) }
func (gdClass ENetConnection) DtlsClientSetup(certificate X509Certificate, hostname string, verify bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetConnection[11], certificate, hostname, verify) }
func (gdClass ENetConnection) RefuseNewConnections(refuse bool)  { gdnative.Call(gdnative.Object(gdClass), methodENetConnection[12], refuse) }
func (gdClass ENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodENetConnection[13], statistic) }
func (gdClass ENetConnection) GetMaxChannels() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetConnection[14]) }
func (gdClass ENetConnection) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetConnection[15]) }
func (gdClass ENetConnection) GetPeers() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodENetConnection[16]) }

type ENetMultiplayerPeer gdnative.Object
func (ENetMultiplayerPeer) class() string { return "ENetMultiplayerPeer\000" }

func (gdClass ENetMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer(gdClass) }

var methodENetMultiplayerPeer [10]gdnative.Method
func (gdClass ENetMultiplayerPeer) CreateServer(port int64, max_clients int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[0], port, max_clients, max_channels, in_bandwidth, out_bandwidth) }
func (gdClass ENetMultiplayerPeer) CreateClient(address string, port int64, channel_count int64, in_bandwidth int64, out_bandwidth int64, local_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[1], address, port, channel_count, in_bandwidth, out_bandwidth, local_port) }
func (gdClass ENetMultiplayerPeer) CreateMesh(unique_id int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[2], unique_id) }
func (gdClass ENetMultiplayerPeer) AddMeshPeer(peer_id int64, host ENetConnection) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetMultiplayerPeer[3], peer_id, host) }
func (gdClass ENetMultiplayerPeer) CloseConnection(wait_usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[4], wait_usec) }
func (gdClass ENetMultiplayerPeer) SetBindIp(ip string)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[5], ip) }
func (gdClass ENetMultiplayerPeer) SetServerRelayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodENetMultiplayerPeer[6], enabled) }
func (gdClass ENetMultiplayerPeer) IsServerRelayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodENetMultiplayerPeer[7]) }
func (gdClass ENetMultiplayerPeer) GetHost() ENetConnection { return gdnative.Return[ENetConnection](gdnative.Object(gdClass), methodENetMultiplayerPeer[8]) }
func (gdClass ENetMultiplayerPeer) GetPeer(id int64) ENetPacketPeer { return gdnative.Return[ENetPacketPeer](gdnative.Object(gdClass), methodENetMultiplayerPeer[9], id) }

type ENetPacketPeerPeerState int64

const (
	ENetPacketPeerStateDisconnected ENetPacketPeerPeerState = 0
	ENetPacketPeerStateConnecting ENetPacketPeerPeerState = 1
	ENetPacketPeerStateAcknowledgingConnect ENetPacketPeerPeerState = 2
	ENetPacketPeerStateConnectionPending ENetPacketPeerPeerState = 3
	ENetPacketPeerStateConnectionSucceeded ENetPacketPeerPeerState = 4
	ENetPacketPeerStateConnected ENetPacketPeerPeerState = 5
	ENetPacketPeerStateDisconnectLater ENetPacketPeerPeerState = 6
	ENetPacketPeerStateDisconnecting ENetPacketPeerPeerState = 7
	ENetPacketPeerStateAcknowledgingDisconnect ENetPacketPeerPeerState = 8
	ENetPacketPeerStateZombie ENetPacketPeerPeerState = 9
)

type ENetPacketPeerPeerStatistic int64

const (
	ENetPacketPeerPeerPacketLoss ENetPacketPeerPeerStatistic = 0
	ENetPacketPeerPeerPacketLossVariance ENetPacketPeerPeerStatistic = 1
	ENetPacketPeerPeerPacketLossEpoch ENetPacketPeerPeerStatistic = 2
	ENetPacketPeerPeerRoundTripTime ENetPacketPeerPeerStatistic = 3
	ENetPacketPeerPeerRoundTripTimeVariance ENetPacketPeerPeerStatistic = 4
	ENetPacketPeerPeerLastRoundTripTime ENetPacketPeerPeerStatistic = 5
	ENetPacketPeerPeerLastRoundTripTimeVariance ENetPacketPeerPeerStatistic = 6
	ENetPacketPeerPeerPacketThrottle ENetPacketPeerPeerStatistic = 7
	ENetPacketPeerPeerPacketThrottleLimit ENetPacketPeerPeerStatistic = 8
	ENetPacketPeerPeerPacketThrottleCounter ENetPacketPeerPeerStatistic = 9
	ENetPacketPeerPeerPacketThrottleEpoch ENetPacketPeerPeerStatistic = 10
	ENetPacketPeerPeerPacketThrottleAcceleration ENetPacketPeerPeerStatistic = 11
	ENetPacketPeerPeerPacketThrottleDeceleration ENetPacketPeerPeerStatistic = 12
	ENetPacketPeerPeerPacketThrottleInterval ENetPacketPeerPeerStatistic = 13
)

type ENetPacketPeer gdnative.Object
func (ENetPacketPeer) class() string { return "ENetPacketPeer\000" }

func (gdClass ENetPacketPeer) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodENetPacketPeer [13]gdnative.Method
func (gdClass ENetPacketPeer) PeerDisconnect(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[0], data) }
func (gdClass ENetPacketPeer) PeerDisconnectLater(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[1], data) }
func (gdClass ENetPacketPeer) PeerDisconnectNow(data int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[2], data) }
func (gdClass ENetPacketPeer) Ping()  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[3]) }
func (gdClass ENetPacketPeer) PingInterval(ping_interval int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[4], ping_interval) }
func (gdClass ENetPacketPeer) Reset()  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[5]) }
func (gdClass ENetPacketPeer) Send(channel int64, packet []byte, flags int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodENetPacketPeer[6], channel, packet, flags) }
func (gdClass ENetPacketPeer) ThrottleConfigure(interval int64, acceleration int64, deceleration int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[7], interval, acceleration, deceleration) }
func (gdClass ENetPacketPeer) SetTimeout(timeout int64, timeout_min int64, timeout_max int64)  { gdnative.Call(gdnative.Object(gdClass), methodENetPacketPeer[8], timeout, timeout_min, timeout_max) }
func (gdClass ENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodENetPacketPeer[9], statistic) }
func (gdClass ENetPacketPeer) GetState() ENetPacketPeerPeerState { return gdnative.Return[ENetPacketPeerPeerState](gdnative.Object(gdClass), methodENetPacketPeer[10]) }
func (gdClass ENetPacketPeer) GetChannels() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodENetPacketPeer[11]) }
func (gdClass ENetPacketPeer) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodENetPacketPeer[12]) }

type EditorCommandPalette gdnative.Object
func (EditorCommandPalette) class() string { return "EditorCommandPalette\000" }

func (gdClass EditorCommandPalette) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog(gdClass) }

var methodEditorCommandPalette [2]gdnative.Method
func (gdClass EditorCommandPalette) AddCommand(command_name string, key_name string, binded_callable Callable, shortcut_text string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorCommandPalette[0], command_name, key_name, binded_callable, shortcut_text) }
func (gdClass EditorCommandPalette) RemoveCommand(key_name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorCommandPalette[1], key_name) }

type EditorDebuggerPlugin gdnative.Object
func (EditorDebuggerPlugin) class() string { return "EditorDebuggerPlugin\000" }

func (gdClass EditorDebuggerPlugin) Control() Control { return Control(gdClass) }

var methodEditorDebuggerPlugin [7]gdnative.Method
func (gdClass EditorDebuggerPlugin) SendMessage(message string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[0], message, data) }
func (gdClass EditorDebuggerPlugin) RegisterMessageCapture(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[1], name, callable) }
func (gdClass EditorDebuggerPlugin) UnregisterMessageCapture(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorDebuggerPlugin[2], name) }
func (gdClass EditorDebuggerPlugin) HasCapture(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[3], name) }
func (gdClass EditorDebuggerPlugin) IsBreaked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[4]) }
func (gdClass EditorDebuggerPlugin) IsDebuggable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[5]) }
func (gdClass EditorDebuggerPlugin) IsSessionActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorDebuggerPlugin[6]) }

type EditorExportPlugin gdnative.Object
func (EditorExportPlugin) class() string { return "EditorExportPlugin\000" }

func (gdClass EditorExportPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorExportPlugin [11]gdnative.Method
func (gdClass EditorExportPlugin) virtual(val any, name string) any {	switch name {
	case "_export_file":
		i, ok := val.(interface{ ExportFile(path string, atype string, features []string)  })
		if ok {
			return i.ExportFile
		}
	case "_export_begin":
		i, ok := val.(interface{ ExportBegin(features []string, is_debug bool, path string, flags int64)  })
		if ok {
			return i.ExportBegin
		}
	case "_export_end":
		i, ok := val.(interface{ ExportEnd()  })
		if ok {
			return i.ExportEnd
		}
	}
	return nil
}
func (gdClass EditorExportPlugin) AddSharedObject(path string, tags []string, target string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[0], path, tags, target) }
func (gdClass EditorExportPlugin) AddIosProjectStaticLib(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[1], path) }
func (gdClass EditorExportPlugin) AddFile(path string, file []byte, remap bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[2], path, file, remap) }
func (gdClass EditorExportPlugin) AddIosFramework(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[3], path) }
func (gdClass EditorExportPlugin) AddIosEmbeddedFramework(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[4], path) }
func (gdClass EditorExportPlugin) AddIosPlistContent(plist_content string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[5], plist_content) }
func (gdClass EditorExportPlugin) AddIosLinkerFlags(flags string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[6], flags) }
func (gdClass EditorExportPlugin) AddIosBundleFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[7], path) }
func (gdClass EditorExportPlugin) AddIosCppCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[8], code) }
func (gdClass EditorExportPlugin) AddMacosPluginFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[9], path) }
func (gdClass EditorExportPlugin) Skip()  { gdnative.Call(gdnative.Object(gdClass), methodEditorExportPlugin[10]) }

type EditorFeatureProfileFeature int64

const (
	EditorFeatureProfileFeature3d EditorFeatureProfileFeature = 0
	EditorFeatureProfileFeatureScript EditorFeatureProfileFeature = 1
	EditorFeatureProfileFeatureAssetLib EditorFeatureProfileFeature = 2
	EditorFeatureProfileFeatureSceneTree EditorFeatureProfileFeature = 3
	EditorFeatureProfileFeatureNodeDock EditorFeatureProfileFeature = 4
	EditorFeatureProfileFeatureFilesystemDock EditorFeatureProfileFeature = 5
	EditorFeatureProfileFeatureImportDock EditorFeatureProfileFeature = 6
	EditorFeatureProfileFeatureMax EditorFeatureProfileFeature = 7
)

type EditorFeatureProfile gdnative.Object
func (EditorFeatureProfile) class() string { return "EditorFeatureProfile\000" }

func (gdClass EditorFeatureProfile) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorFeatureProfile [11]gdnative.Method
func (gdClass EditorFeatureProfile) SetDisableClass(class_name string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[0], class_name, disable) }
func (gdClass EditorFeatureProfile) IsClassDisabled(class_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[1], class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassEditor(class_name string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[2], class_name, disable) }
func (gdClass EditorFeatureProfile) IsClassEditorDisabled(class_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[3], class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassProperty(class_name string, property string, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[4], class_name, property, disable) }
func (gdClass EditorFeatureProfile) IsClassPropertyDisabled(class_name string, property string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[5], class_name, property) }
func (gdClass EditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFeatureProfile[6], feature, disable) }
func (gdClass EditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFeatureProfile[7], feature) }
func (gdClass EditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFeatureProfile[8], feature) }
func (gdClass EditorFeatureProfile) SaveToFile(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorFeatureProfile[9], path) }
func (gdClass EditorFeatureProfile) LoadFromFile(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorFeatureProfile[10], path) }

type EditorFileDialogFileMode int64

const (
	EditorFileDialogFileModeOpenFile EditorFileDialogFileMode = 0
	EditorFileDialogFileModeOpenFiles EditorFileDialogFileMode = 1
	EditorFileDialogFileModeOpenDir EditorFileDialogFileMode = 2
	EditorFileDialogFileModeOpenAny EditorFileDialogFileMode = 3
	EditorFileDialogFileModeSaveFile EditorFileDialogFileMode = 4
)

type EditorFileDialogAccess int64

const (
	EditorFileDialogAccessResources EditorFileDialogAccess = 0
	EditorFileDialogAccessUserdata EditorFileDialogAccess = 1
	EditorFileDialogAccessFilesystem EditorFileDialogAccess = 2
)

type EditorFileDialogDisplayMode int64

const (
	EditorFileDialogDisplayThumbnails EditorFileDialogDisplayMode = 0
	EditorFileDialogDisplayList EditorFileDialogDisplayMode = 1
)

type EditorFileDialog gdnative.Object
func (EditorFileDialog) class() string { return "EditorFileDialog\000" }

func (gdClass EditorFileDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog(gdClass) }

var methodEditorFileDialog [20]gdnative.Method
func (gdClass EditorFileDialog) ClearFilters()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[0]) }
func (gdClass EditorFileDialog) AddFilter(filter string, description string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[1], filter, description) }
func (gdClass EditorFileDialog) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[2]) }
func (gdClass EditorFileDialog) GetCurrentFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[3]) }
func (gdClass EditorFileDialog) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileDialog[4]) }
func (gdClass EditorFileDialog) SetCurrentDir(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[5], dir) }
func (gdClass EditorFileDialog) SetCurrentFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[6], file) }
func (gdClass EditorFileDialog) SetCurrentPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[7], path) }
func (gdClass EditorFileDialog) SetFileMode(mode EditorFileDialogFileMode)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[8], mode) }
func (gdClass EditorFileDialog) GetFileMode() EditorFileDialogFileMode { return gdnative.Return[EditorFileDialogFileMode](gdnative.Object(gdClass), methodEditorFileDialog[9]) }
func (gdClass EditorFileDialog) GetVbox() VBoxContainer { return gdnative.Return[VBoxContainer](gdnative.Object(gdClass), methodEditorFileDialog[10]) }
func (gdClass EditorFileDialog) SetAccess(access EditorFileDialogAccess)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[11], access) }
func (gdClass EditorFileDialog) GetAccess() EditorFileDialogAccess { return gdnative.Return[EditorFileDialogAccess](gdnative.Object(gdClass), methodEditorFileDialog[12]) }
func (gdClass EditorFileDialog) SetShowHiddenFiles(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[13], show) }
func (gdClass EditorFileDialog) IsShowingHiddenFiles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileDialog[14]) }
func (gdClass EditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[15], mode) }
func (gdClass EditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode { return gdnative.Return[EditorFileDialogDisplayMode](gdnative.Object(gdClass), methodEditorFileDialog[16]) }
func (gdClass EditorFileDialog) SetDisableOverwriteWarning(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[17], disable) }
func (gdClass EditorFileDialog) IsOverwriteWarningDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileDialog[18]) }
func (gdClass EditorFileDialog) Invalidate()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileDialog[19]) }

type EditorFileSystem gdnative.Object
func (EditorFileSystem) class() string { return "EditorFileSystem\000" }

func (gdClass EditorFileSystem) Node() Node { return Node(gdClass) }

var methodEditorFileSystem [10]gdnative.Method
func (gdClass EditorFileSystem) GetFilesystem() EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystem[0]) }
func (gdClass EditorFileSystem) IsScanning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystem[1]) }
func (gdClass EditorFileSystem) GetScanningProgress() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEditorFileSystem[2]) }
func (gdClass EditorFileSystem) Scan()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[3]) }
func (gdClass EditorFileSystem) ScanSources()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[4]) }
func (gdClass EditorFileSystem) UpdateFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[5], path) }
func (gdClass EditorFileSystem) GetFilesystemPath(path string) EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystem[6], path) }
func (gdClass EditorFileSystem) GetFileType(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystem[7], path) }
func (gdClass EditorFileSystem) UpdateScriptClasses()  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[8]) }
func (gdClass EditorFileSystem) ReimportFiles(files []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorFileSystem[9], files) }

type EditorFileSystemDirectory gdnative.Object
func (EditorFileSystemDirectory) class() string { return "EditorFileSystemDirectory\000" }

func (gdClass EditorFileSystemDirectory) Object() Object { return Object(gdClass) }

var methodEditorFileSystemDirectory [14]gdnative.Method
func (gdClass EditorFileSystemDirectory) GetSubdirCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[0]) }
func (gdClass EditorFileSystemDirectory) GetSubdir(idx int64) EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystemDirectory[1], idx) }
func (gdClass EditorFileSystemDirectory) GetFileCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[2]) }
func (gdClass EditorFileSystemDirectory) GetFile(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[3], idx) }
func (gdClass EditorFileSystemDirectory) GetFilePath(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[4], idx) }
func (gdClass EditorFileSystemDirectory) GetFileType(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[5], idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[6], idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassExtends(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[7], idx) }
func (gdClass EditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorFileSystemDirectory[8], idx) }
func (gdClass EditorFileSystemDirectory) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[9]) }
func (gdClass EditorFileSystemDirectory) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorFileSystemDirectory[10]) }
func (gdClass EditorFileSystemDirectory) GetParent() EditorFileSystemDirectory { return gdnative.Return[EditorFileSystemDirectory](gdnative.Object(gdClass), methodEditorFileSystemDirectory[11]) }
func (gdClass EditorFileSystemDirectory) FindFileIndex(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[12], name) }
func (gdClass EditorFileSystemDirectory) FindDirIndex(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorFileSystemDirectory[13], name) }

type EditorFileSystemImportFormatSupportQuery gdnative.Object
func (EditorFileSystemImportFormatSupportQuery) class() string { return "EditorFileSystemImportFormatSupportQuery\000" }

func (gdClass EditorFileSystemImportFormatSupportQuery) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EditorFileSystemImportFormatSupportQuery) virtual(val any, name string) any {	switch name {
	case "_is_active":
		i, ok := val.(interface{ IsActive() bool })
		if ok {
			return i.IsActive
		}
	case "_get_file_extensions":
		i, ok := val.(interface{ GetFileExtensions() []string })
		if ok {
			return i.GetFileExtensions
		}
	case "_query":
		i, ok := val.(interface{ Query() bool })
		if ok {
			return i.Query
		}
	}
	return nil
}

type EditorImportPlugin gdnative.Object
func (EditorImportPlugin) class() string { return "EditorImportPlugin\000" }

func (gdClass EditorImportPlugin) ResourceImporter() ResourceImporter { return ResourceImporter(gdClass) }

func (gdClass EditorImportPlugin) virtual(val any, name string) any {	switch name {
	case "_get_importer_name":
		i, ok := val.(interface{ GetImporterName() string })
		if ok {
			return i.GetImporterName
		}
	case "_get_visible_name":
		i, ok := val.(interface{ GetVisibleName() string })
		if ok {
			return i.GetVisibleName
		}
	case "_get_preset_count":
		i, ok := val.(interface{ GetPresetCount() int64 })
		if ok {
			return i.GetPresetCount
		}
	case "_get_preset_name":
		i, ok := val.(interface{ GetPresetName(preset_index int64) string })
		if ok {
			return i.GetPresetName
		}
	case "_get_recognized_extensions":
		i, ok := val.(interface{ GetRecognizedExtensions() []string })
		if ok {
			return i.GetRecognizedExtensions
		}
	case "_get_import_options":
		i, ok := val.(interface{ GetImportOptions(path string, preset_index int64) Array })
		if ok {
			return i.GetImportOptions
		}
	case "_get_save_extension":
		i, ok := val.(interface{ GetSaveExtension() string })
		if ok {
			return i.GetSaveExtension
		}
	case "_get_resource_type":
		i, ok := val.(interface{ GetResourceType() string })
		if ok {
			return i.GetResourceType
		}
	case "_get_priority":
		i, ok := val.(interface{ GetPriority() float64 })
		if ok {
			return i.GetPriority
		}
	case "_get_import_order":
		i, ok := val.(interface{ GetImportOrder() int64 })
		if ok {
			return i.GetImportOrder
		}
	case "_get_option_visibility":
		i, ok := val.(interface{ GetOptionVisibility(path string, option_name string, options Dictionary) bool })
		if ok {
			return i.GetOptionVisibility
		}
	case "_import":
		i, ok := val.(interface{ Import(source_file string, save_path string, options Dictionary, platform_variants Array, gen_files Array) int64 })
		if ok {
			return i.Import
		}
	}
	return nil
}

type EditorInspector gdnative.Object
func (EditorInspector) class() string { return "EditorInspector\000" }

func (gdClass EditorInspector) ScrollContainer() ScrollContainer { return ScrollContainer(gdClass) }


type EditorInspectorPlugin gdnative.Object
func (EditorInspectorPlugin) class() string { return "EditorInspectorPlugin\000" }

func (gdClass EditorInspectorPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorInspectorPlugin [3]gdnative.Method
func (gdClass EditorInspectorPlugin) virtual(val any, name string) any {	switch name {
	case "_can_handle":
		i, ok := val.(interface{ CanHandle(object any) bool })
		if ok {
			return i.CanHandle
		}
	case "_parse_begin":
		i, ok := val.(interface{ ParseBegin(object Object)  })
		if ok {
			return i.ParseBegin
		}
	case "_parse_category":
		i, ok := val.(interface{ ParseCategory(object Object, category string)  })
		if ok {
			return i.ParseCategory
		}
	case "_parse_group":
		i, ok := val.(interface{ ParseGroup(object Object, group string)  })
		if ok {
			return i.ParseGroup
		}
	case "_parse_property":
		i, ok := val.(interface{ ParseProperty(object Object, atype int64, name string, hint_type int64, hint_string string, usage_flags int64, wide bool) bool })
		if ok {
			return i.ParseProperty
		}
	case "_parse_end":
		i, ok := val.(interface{ ParseEnd(object Object)  })
		if ok {
			return i.ParseEnd
		}
	}
	return nil
}
func (gdClass EditorInspectorPlugin) AddCustomControl(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[0], control) }
func (gdClass EditorInspectorPlugin) AddPropertyEditor(property string, editor Control, add_to_end bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[1], property, editor, add_to_end) }
func (gdClass EditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label string, properties []string, editor Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInspectorPlugin[2], label, properties, editor) }

type EditorInterface gdnative.Object
func (EditorInterface) class() string { return "EditorInterface\000" }

func (gdClass EditorInterface) Node() Node { return Node(gdClass) }

var methodEditorInterface [37]gdnative.Method
func (gdClass EditorInterface) InspectObject(object Object, for_property string, inspector_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[0], object, for_property, inspector_only) }
func (gdClass EditorInterface) GetSelection() EditorSelection { return gdnative.Return[EditorSelection](gdnative.Object(gdClass), methodEditorInterface[1]) }
func (gdClass EditorInterface) GetEditorSettings() EditorSettings { return gdnative.Return[EditorSettings](gdnative.Object(gdClass), methodEditorInterface[2]) }
func (gdClass EditorInterface) GetScriptEditor() ScriptEditor { return gdnative.Return[ScriptEditor](gdnative.Object(gdClass), methodEditorInterface[3]) }
func (gdClass EditorInterface) GetBaseControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodEditorInterface[4]) }
func (gdClass EditorInterface) GetEditorScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEditorInterface[5]) }
func (gdClass EditorInterface) EditResource(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[6], resource) }
func (gdClass EditorInterface) EditNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[7], node) }
func (gdClass EditorInterface) EditScript(script Script, line int64, column int64, grab_focus bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[8], script, line, column, grab_focus) }
func (gdClass EditorInterface) OpenSceneFromPath(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[9], scene_filepath) }
func (gdClass EditorInterface) ReloadSceneFromPath(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[10], scene_filepath) }
func (gdClass EditorInterface) PlayMainScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[11]) }
func (gdClass EditorInterface) PlayCurrentScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[12]) }
func (gdClass EditorInterface) PlayCustomScene(scene_filepath string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[13], scene_filepath) }
func (gdClass EditorInterface) StopPlayingScene()  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[14]) }
func (gdClass EditorInterface) IsPlayingScene() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[15]) }
func (gdClass EditorInterface) GetPlayingScene() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[16]) }
func (gdClass EditorInterface) GetOpenScenes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorInterface[17]) }
func (gdClass EditorInterface) GetEditedSceneRoot() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorInterface[18]) }
func (gdClass EditorInterface) GetResourcePreviewer() EditorResourcePreview { return gdnative.Return[EditorResourcePreview](gdnative.Object(gdClass), methodEditorInterface[19]) }
func (gdClass EditorInterface) GetResourceFilesystem() EditorFileSystem { return gdnative.Return[EditorFileSystem](gdnative.Object(gdClass), methodEditorInterface[20]) }
func (gdClass EditorInterface) GetEditorMainControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodEditorInterface[21]) }
func (gdClass EditorInterface) MakeMeshPreviews(meshes Array, preview_size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorInterface[22], meshes, preview_size) }
func (gdClass EditorInterface) SelectFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[23], file) }
func (gdClass EditorInterface) GetSelectedPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[24]) }
func (gdClass EditorInterface) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorInterface[25]) }
func (gdClass EditorInterface) GetFileSystemDock() FileSystemDock { return gdnative.Return[FileSystemDock](gdnative.Object(gdClass), methodEditorInterface[26]) }
func (gdClass EditorInterface) GetEditorPaths() EditorPaths { return gdnative.Return[EditorPaths](gdnative.Object(gdClass), methodEditorInterface[27]) }
func (gdClass EditorInterface) GetCommandPalette() EditorCommandPalette { return gdnative.Return[EditorCommandPalette](gdnative.Object(gdClass), methodEditorInterface[28]) }
func (gdClass EditorInterface) SetPluginEnabled(plugin string, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[29], plugin, enabled) }
func (gdClass EditorInterface) IsPluginEnabled(plugin string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[30], plugin) }
func (gdClass EditorInterface) GetInspector() EditorInspector { return gdnative.Return[EditorInspector](gdnative.Object(gdClass), methodEditorInterface[31]) }
func (gdClass EditorInterface) SaveScene() error { return gdnative.Return[error](gdnative.Object(gdClass), methodEditorInterface[32]) }
func (gdClass EditorInterface) SaveSceneAs(path string, with_preview bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[33], path, with_preview) }
func (gdClass EditorInterface) SetMainScreenEditor(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[34], name) }
func (gdClass EditorInterface) SetDistractionFreeMode(enter bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorInterface[35], enter) }
func (gdClass EditorInterface) IsDistractionFreeModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorInterface[36]) }

type EditorNode3DGizmo gdnative.Object
func (EditorNode3DGizmo) class() string { return "EditorNode3DGizmo\000" }

func (gdClass EditorNode3DGizmo) Node3DGizmo() Node3DGizmo { return Node3DGizmo(gdClass) }

var methodEditorNode3DGizmo [13]gdnative.Method
func (gdClass EditorNode3DGizmo) virtual(val any, name string) any {	switch name {
	case "_redraw":
		i, ok := val.(interface{ Redraw()  })
		if ok {
			return i.Redraw
		}
	case "_get_handle_name":
		i, ok := val.(interface{ GetHandleName(id int64, secondary bool) string })
		if ok {
			return i.GetHandleName
		}
	case "_is_handle_highlighted":
		i, ok := val.(interface{ IsHandleHighlighted(id int64, secondary bool) bool })
		if ok {
			return i.IsHandleHighlighted
		}
	case "_get_handle_value":
		i, ok := val.(interface{ GetHandleValue(id int64, secondary bool) any })
		if ok {
			return i.GetHandleValue
		}
	case "_set_handle":
		i, ok := val.(interface{ SetHandle(id int64, secondary bool, camera Camera3D, point Vector2)  })
		if ok {
			return i.SetHandle
		}
	case "_commit_handle":
		i, ok := val.(interface{ CommitHandle(id int64, secondary bool, restore any, cancel bool)  })
		if ok {
			return i.CommitHandle
		}
	case "_subgizmos_intersect_ray":
		i, ok := val.(interface{ SubgizmosIntersectRay(camera Camera3D, point Vector2) int64 })
		if ok {
			return i.SubgizmosIntersectRay
		}
	case "_subgizmos_intersect_frustum":
		i, ok := val.(interface{ SubgizmosIntersectFrustum(camera Camera3D, frustum Array) []int32 })
		if ok {
			return i.SubgizmosIntersectFrustum
		}
	case "_set_subgizmo_transform":
		i, ok := val.(interface{ SetSubgizmoTransform(id int64, transform Transform3D)  })
		if ok {
			return i.SetSubgizmoTransform
		}
	case "_get_subgizmo_transform":
		i, ok := val.(interface{ GetSubgizmoTransform(id int64) Transform3D })
		if ok {
			return i.GetSubgizmoTransform
		}
	case "_commit_subgizmos":
		i, ok := val.(interface{ CommitSubgizmos(ids []int32, restores Array, cancel bool)  })
		if ok {
			return i.CommitSubgizmos
		}
	}
	return nil
}
func (gdClass EditorNode3DGizmo) AddLines(lines []Vector3, material Material, billboard bool, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[0], lines, material, billboard, modulate) }
func (gdClass EditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[1], mesh, material, transform, skeleton) }
func (gdClass EditorNode3DGizmo) AddCollisionSegments(segments []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[2], segments) }
func (gdClass EditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[3], triangles) }
func (gdClass EditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale float64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[4], material, default_scale, modulate) }
func (gdClass EditorNode3DGizmo) AddHandles(handles []Vector3, material Material, ids []int32, billboard bool, secondary bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[5], handles, material, ids, billboard, secondary) }
func (gdClass EditorNode3DGizmo) SetSpatialNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[6], node) }
func (gdClass EditorNode3DGizmo) GetSpatialNode() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodEditorNode3DGizmo[7]) }
func (gdClass EditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin { return gdnative.Return[EditorNode3DGizmoPlugin](gdnative.Object(gdClass), methodEditorNode3DGizmo[8]) }
func (gdClass EditorNode3DGizmo) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[9]) }
func (gdClass EditorNode3DGizmo) SetHidden(hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmo[10], hidden) }
func (gdClass EditorNode3DGizmo) IsSubgizmoSelected(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorNode3DGizmo[11], id) }
func (gdClass EditorNode3DGizmo) GetSubgizmoSelection() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodEditorNode3DGizmo[12]) }

type EditorNode3DGizmoPlugin gdnative.Object
func (EditorNode3DGizmoPlugin) class() string { return "EditorNode3DGizmoPlugin\000" }

func (gdClass EditorNode3DGizmoPlugin) Resource() Resource { return Resource(gdClass) }

var methodEditorNode3DGizmoPlugin [5]gdnative.Method
func (gdClass EditorNode3DGizmoPlugin) virtual(val any, name string) any {	switch name {
	case "_has_gizmo":
		i, ok := val.(interface{ HasGizmo(for_node_3d Node3D) bool })
		if ok {
			return i.HasGizmo
		}
	case "_create_gizmo":
		i, ok := val.(interface{ CreateGizmo(for_node_3d Node3D) EditorNode3DGizmo })
		if ok {
			return i.CreateGizmo
		}
	case "_get_gizmo_name":
		i, ok := val.(interface{ GetGizmoName() string })
		if ok {
			return i.GetGizmoName
		}
	case "_get_priority":
		i, ok := val.(interface{ GetPriority() int64 })
		if ok {
			return i.GetPriority
		}
	case "_can_be_hidden":
		i, ok := val.(interface{ CanBeHidden() bool })
		if ok {
			return i.CanBeHidden
		}
	case "_is_selectable_when_hidden":
		i, ok := val.(interface{ IsSelectableWhenHidden() bool })
		if ok {
			return i.IsSelectableWhenHidden
		}
	case "_redraw":
		i, ok := val.(interface{ Redraw(gizmo EditorNode3DGizmo)  })
		if ok {
			return i.Redraw
		}
	case "_get_handle_name":
		i, ok := val.(interface{ GetHandleName(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) string })
		if ok {
			return i.GetHandleName
		}
	case "_is_handle_highlighted":
		i, ok := val.(interface{ IsHandleHighlighted(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) bool })
		if ok {
			return i.IsHandleHighlighted
		}
	case "_get_handle_value":
		i, ok := val.(interface{ GetHandleValue(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) any })
		if ok {
			return i.GetHandleValue
		}
	case "_set_handle":
		i, ok := val.(interface{ SetHandle(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, camera Camera3D, screen_pos Vector2)  })
		if ok {
			return i.SetHandle
		}
	case "_commit_handle":
		i, ok := val.(interface{ CommitHandle(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, restore any, cancel bool)  })
		if ok {
			return i.CommitHandle
		}
	case "_subgizmos_intersect_ray":
		i, ok := val.(interface{ SubgizmosIntersectRay(gizmo EditorNode3DGizmo, camera Camera3D, screen_pos Vector2) int64 })
		if ok {
			return i.SubgizmosIntersectRay
		}
	case "_subgizmos_intersect_frustum":
		i, ok := val.(interface{ SubgizmosIntersectFrustum(gizmo EditorNode3DGizmo, camera Camera3D, frustum_planes Array) []int32 })
		if ok {
			return i.SubgizmosIntersectFrustum
		}
	case "_get_subgizmo_transform":
		i, ok := val.(interface{ GetSubgizmoTransform(gizmo EditorNode3DGizmo, subgizmo_id int64) Transform3D })
		if ok {
			return i.GetSubgizmoTransform
		}
	case "_set_subgizmo_transform":
		i, ok := val.(interface{ SetSubgizmoTransform(gizmo EditorNode3DGizmo, subgizmo_id int64, transform Transform3D)  })
		if ok {
			return i.SetSubgizmoTransform
		}
	case "_commit_subgizmos":
		i, ok := val.(interface{ CommitSubgizmos(gizmo EditorNode3DGizmo, ids []int32, restores Array, cancel bool)  })
		if ok {
			return i.CommitSubgizmos
		}
	}
	return nil
}
func (gdClass EditorNode3DGizmoPlugin) CreateMaterial(name string, color Color, billboard bool, on_top bool, use_vertex_color bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[0], name, color, billboard, on_top, use_vertex_color) }
func (gdClass EditorNode3DGizmoPlugin) CreateIconMaterial(name string, texture Texture2D, on_top bool, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[1], name, texture, on_top, color) }
func (gdClass EditorNode3DGizmoPlugin) CreateHandleMaterial(name string, billboard bool, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[2], name, billboard, texture) }
func (gdClass EditorNode3DGizmoPlugin) AddMaterial(name string, material StandardMaterial3D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[3], name, material) }
func (gdClass EditorNode3DGizmoPlugin) GetMaterial(name string, gizmo EditorNode3DGizmo) StandardMaterial3D { return gdnative.Return[StandardMaterial3D](gdnative.Object(gdClass), methodEditorNode3DGizmoPlugin[4], name, gizmo) }

type EditorPaths gdnative.Object
func (EditorPaths) class() string { return "EditorPaths\000" }

func (gdClass EditorPaths) Object() Object { return Object(gdClass) }

var methodEditorPaths [6]gdnative.Method
func (gdClass EditorPaths) GetDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[0]) }
func (gdClass EditorPaths) GetConfigDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[1]) }
func (gdClass EditorPaths) GetCacheDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[2]) }
func (gdClass EditorPaths) IsSelfContained() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorPaths[3]) }
func (gdClass EditorPaths) GetSelfContainedFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[4]) }
func (gdClass EditorPaths) GetProjectSettingsDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorPaths[5]) }

type EditorPluginCustomControlContainer int64

const (
	EditorPluginContainerToolbar EditorPluginCustomControlContainer = 0
	EditorPluginContainerSpatialEditorMenu EditorPluginCustomControlContainer = 1
	EditorPluginContainerSpatialEditorSideLeft EditorPluginCustomControlContainer = 2
	EditorPluginContainerSpatialEditorSideRight EditorPluginCustomControlContainer = 3
	EditorPluginContainerSpatialEditorBottom EditorPluginCustomControlContainer = 4
	EditorPluginContainerCanvasEditorMenu EditorPluginCustomControlContainer = 5
	EditorPluginContainerCanvasEditorSideLeft EditorPluginCustomControlContainer = 6
	EditorPluginContainerCanvasEditorSideRight EditorPluginCustomControlContainer = 7
	EditorPluginContainerCanvasEditorBottom EditorPluginCustomControlContainer = 8
	EditorPluginContainerInspectorBottom EditorPluginCustomControlContainer = 9
	EditorPluginContainerProjectSettingTabLeft EditorPluginCustomControlContainer = 10
	EditorPluginContainerProjectSettingTabRight EditorPluginCustomControlContainer = 11
)

type EditorPluginDockSlot int64

const (
	EditorPluginDockSlotLeftUl EditorPluginDockSlot = 0
	EditorPluginDockSlotLeftBl EditorPluginDockSlot = 1
	EditorPluginDockSlotLeftUr EditorPluginDockSlot = 2
	EditorPluginDockSlotLeftBr EditorPluginDockSlot = 3
	EditorPluginDockSlotRightUl EditorPluginDockSlot = 4
	EditorPluginDockSlotRightBl EditorPluginDockSlot = 5
	EditorPluginDockSlotRightUr EditorPluginDockSlot = 6
	EditorPluginDockSlotRightBr EditorPluginDockSlot = 7
	EditorPluginDockSlotMax EditorPluginDockSlot = 8
)

type EditorPlugin gdnative.Object
func (EditorPlugin) class() string { return "EditorPlugin\000" }

func (gdClass EditorPlugin) Node() Node { return Node(gdClass) }

var methodEditorPlugin [41]gdnative.Method
func (gdClass EditorPlugin) virtual(val any, name string) any {	switch name {
	case "_forward_canvas_gui_input":
		i, ok := val.(interface{ ForwardCanvasGuiInput(event InputEvent) bool })
		if ok {
			return i.ForwardCanvasGuiInput
		}
	case "_forward_canvas_draw_over_viewport":
		i, ok := val.(interface{ ForwardCanvasDrawOverViewport(viewport_control Control)  })
		if ok {
			return i.ForwardCanvasDrawOverViewport
		}
	case "_forward_canvas_force_draw_over_viewport":
		i, ok := val.(interface{ ForwardCanvasForceDrawOverViewport(viewport_control Control)  })
		if ok {
			return i.ForwardCanvasForceDrawOverViewport
		}
	case "_forward_3d_gui_input":
		i, ok := val.(interface{ Forward3dGuiInput(viewport_camera Camera3D, event InputEvent) int64 })
		if ok {
			return i.Forward3dGuiInput
		}
	case "_forward_3d_draw_over_viewport":
		i, ok := val.(interface{ Forward3dDrawOverViewport(viewport_control Control)  })
		if ok {
			return i.Forward3dDrawOverViewport
		}
	case "_forward_3d_force_draw_over_viewport":
		i, ok := val.(interface{ Forward3dForceDrawOverViewport(viewport_control Control)  })
		if ok {
			return i.Forward3dForceDrawOverViewport
		}
	case "_get_plugin_name":
		i, ok := val.(interface{ GetPluginName() string })
		if ok {
			return i.GetPluginName
		}
	case "_get_plugin_icon":
		i, ok := val.(interface{ GetPluginIcon() Texture2D })
		if ok {
			return i.GetPluginIcon
		}
	case "_has_main_screen":
		i, ok := val.(interface{ HasMainScreen() bool })
		if ok {
			return i.HasMainScreen
		}
	case "_make_visible":
		i, ok := val.(interface{ MakeVisible(visible bool)  })
		if ok {
			return i.MakeVisible
		}
	case "_edit":
		i, ok := val.(interface{ Edit(object any)  })
		if ok {
			return i.Edit
		}
	case "_handles":
		i, ok := val.(interface{ Handles(object any) bool })
		if ok {
			return i.Handles
		}
	case "_get_state":
		i, ok := val.(interface{ GetState() Dictionary })
		if ok {
			return i.GetState
		}
	case "_set_state":
		i, ok := val.(interface{ SetState(state Dictionary)  })
		if ok {
			return i.SetState
		}
	case "_clear":
		i, ok := val.(interface{ Clear()  })
		if ok {
			return i.Clear
		}
	case "_save_external_data":
		i, ok := val.(interface{ SaveExternalData()  })
		if ok {
			return i.SaveExternalData
		}
	case "_apply_changes":
		i, ok := val.(interface{ ApplyChanges()  })
		if ok {
			return i.ApplyChanges
		}
	case "_get_breakpoints":
		i, ok := val.(interface{ GetBreakpoints() []string })
		if ok {
			return i.GetBreakpoints
		}
	case "_set_window_layout":
		i, ok := val.(interface{ SetWindowLayout(configuration ConfigFile)  })
		if ok {
			return i.SetWindowLayout
		}
	case "_get_window_layout":
		i, ok := val.(interface{ GetWindowLayout(configuration ConfigFile)  })
		if ok {
			return i.GetWindowLayout
		}
	case "_build":
		i, ok := val.(interface{ Build() bool })
		if ok {
			return i.Build
		}
	case "_enable_plugin":
		i, ok := val.(interface{ EnablePlugin()  })
		if ok {
			return i.EnablePlugin
		}
	case "_disable_plugin":
		i, ok := val.(interface{ DisablePlugin()  })
		if ok {
			return i.DisablePlugin
		}
	}
	return nil
}
func (gdClass EditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[0], container, control) }
func (gdClass EditorPlugin) AddControlToBottomPanel(control Control, title string) Button { return gdnative.Return[Button](gdnative.Object(gdClass), methodEditorPlugin[1], control, title) }
func (gdClass EditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[2], slot, control) }
func (gdClass EditorPlugin) RemoveControlFromDocks(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[3], control) }
func (gdClass EditorPlugin) RemoveControlFromBottomPanel(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[4], control) }
func (gdClass EditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[5], container, control) }
func (gdClass EditorPlugin) AddToolMenuItem(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[6], name, callable) }
func (gdClass EditorPlugin) AddToolSubmenuItem(name string, submenu PopupMenu)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[7], name, submenu) }
func (gdClass EditorPlugin) RemoveToolMenuItem(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[8], name) }
func (gdClass EditorPlugin) GetExportAsMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodEditorPlugin[9]) }
func (gdClass EditorPlugin) AddCustomType(atype string, base string, script Script, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[10], atype, base, script, icon) }
func (gdClass EditorPlugin) RemoveCustomType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[11], atype) }
func (gdClass EditorPlugin) AddAutoloadSingleton(name string, path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[12], name, path) }
func (gdClass EditorPlugin) RemoveAutoloadSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[13], name) }
func (gdClass EditorPlugin) UpdateOverlays() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEditorPlugin[14]) }
func (gdClass EditorPlugin) MakeBottomPanelItemVisible(item Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[15], item) }
func (gdClass EditorPlugin) HideBottomPanel()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[16]) }
func (gdClass EditorPlugin) GetUndoRedo() UndoRedo { return gdnative.Return[UndoRedo](gdnative.Object(gdClass), methodEditorPlugin[17]) }
func (gdClass EditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[18], callable) }
func (gdClass EditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[19], callable) }
func (gdClass EditorPlugin) QueueSaveLayout()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[20]) }
func (gdClass EditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[21], parser) }
func (gdClass EditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[22], parser) }
func (gdClass EditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[23], importer, first_priority) }
func (gdClass EditorPlugin) RemoveImportPlugin(importer EditorImportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[24], importer) }
func (gdClass EditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[25], scene_format_importer, first_priority) }
func (gdClass EditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[26], scene_format_importer) }
func (gdClass EditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[27], scene_import_plugin, first_priority) }
func (gdClass EditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[28], scene_import_plugin) }
func (gdClass EditorPlugin) AddExportPlugin(plugin EditorExportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[29], plugin) }
func (gdClass EditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[30], plugin) }
func (gdClass EditorPlugin) AddSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[31], plugin) }
func (gdClass EditorPlugin) RemoveSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[32], plugin) }
func (gdClass EditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[33], plugin) }
func (gdClass EditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[34], plugin) }
func (gdClass EditorPlugin) SetInputEventForwardingAlwaysEnabled()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[35]) }
func (gdClass EditorPlugin) SetForceDrawOverForwardingEnabled()  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[36]) }
func (gdClass EditorPlugin) GetEditorInterface() EditorInterface { return gdnative.Return[EditorInterface](gdnative.Object(gdClass), methodEditorPlugin[37]) }
func (gdClass EditorPlugin) GetScriptCreateDialog() ScriptCreateDialog { return gdnative.Return[ScriptCreateDialog](gdnative.Object(gdClass), methodEditorPlugin[38]) }
func (gdClass EditorPlugin) AddDebuggerPlugin(script Script)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[39], script) }
func (gdClass EditorPlugin) RemoveDebuggerPlugin(script Script)  { gdnative.Call(gdnative.Object(gdClass), methodEditorPlugin[40], script) }

type EditorProperty gdnative.Object
func (EditorProperty) class() string { return "EditorProperty\000" }

func (gdClass EditorProperty) Container() Container { return Container(gdClass) }

var methodEditorProperty [21]gdnative.Method
func (gdClass EditorProperty) virtual(val any, name string) any {	switch name {
	case "_update_property":
		i, ok := val.(interface{ UpdateProperty()  })
		if ok {
			return i.UpdateProperty
		}
	}
	return nil
}
func (gdClass EditorProperty) SetLabel(text string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[0], text) }
func (gdClass EditorProperty) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[1]) }
func (gdClass EditorProperty) SetReadOnly(read_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[2], read_only) }
func (gdClass EditorProperty) IsReadOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[3]) }
func (gdClass EditorProperty) SetCheckable(checkable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[4], checkable) }
func (gdClass EditorProperty) IsCheckable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[5]) }
func (gdClass EditorProperty) SetChecked(checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[6], checked) }
func (gdClass EditorProperty) IsChecked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[7]) }
func (gdClass EditorProperty) SetDrawWarning(draw_warning bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[8], draw_warning) }
func (gdClass EditorProperty) IsDrawWarning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[9]) }
func (gdClass EditorProperty) SetKeying(keying bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[10], keying) }
func (gdClass EditorProperty) IsKeying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[11]) }
func (gdClass EditorProperty) SetDeletable(deletable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[12], deletable) }
func (gdClass EditorProperty) IsDeletable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorProperty[13]) }
func (gdClass EditorProperty) GetEditedProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[14]) }
func (gdClass EditorProperty) GetEditedObject() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEditorProperty[15]) }
func (gdClass EditorProperty) GetTooltipText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorProperty[16]) }
func (gdClass EditorProperty) UpdateProperty()  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[17]) }
func (gdClass EditorProperty) AddFocusable(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[18], control) }
func (gdClass EditorProperty) SetBottomEditor(editor Control)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[19], editor) }
func (gdClass EditorProperty) EmitChanged(property string, value any, field string, changing bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorProperty[20], property, value, field, changing) }

type EditorResourceConversionPlugin gdnative.Object
func (EditorResourceConversionPlugin) class() string { return "EditorResourceConversionPlugin\000" }

func (gdClass EditorResourceConversionPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EditorResourceConversionPlugin) virtual(val any, name string) any {	switch name {
	case "_converts_to":
		i, ok := val.(interface{ ConvertsTo() string })
		if ok {
			return i.ConvertsTo
		}
	case "_handles":
		i, ok := val.(interface{ Handles(resource Resource) bool })
		if ok {
			return i.Handles
		}
	case "_convert":
		i, ok := val.(interface{ Convert(resource Resource) Resource })
		if ok {
			return i.Convert
		}
	}
	return nil
}

type EditorResourcePicker gdnative.Object
func (EditorResourcePicker) class() string { return "EditorResourcePicker\000" }

func (gdClass EditorResourcePicker) HBoxContainer() HBoxContainer { return HBoxContainer(gdClass) }

var methodEditorResourcePicker [10]gdnative.Method
func (gdClass EditorResourcePicker) virtual(val any, name string) any {	switch name {
	case "_set_create_options":
		i, ok := val.(interface{ SetCreateOptions(menu_node Object)  })
		if ok {
			return i.SetCreateOptions
		}
	case "_handle_menu_selected":
		i, ok := val.(interface{ HandleMenuSelected(id int64) bool })
		if ok {
			return i.HandleMenuSelected
		}
	}
	return nil
}
func (gdClass EditorResourcePicker) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[0], base_type) }
func (gdClass EditorResourcePicker) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorResourcePicker[1]) }
func (gdClass EditorResourcePicker) GetAllowedTypes() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorResourcePicker[2]) }
func (gdClass EditorResourcePicker) SetEditedResource(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[3], resource) }
func (gdClass EditorResourcePicker) GetEditedResource() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodEditorResourcePicker[4]) }
func (gdClass EditorResourcePicker) SetToggleMode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[5], enable) }
func (gdClass EditorResourcePicker) IsToggleMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePicker[6]) }
func (gdClass EditorResourcePicker) SetTogglePressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[7], pressed) }
func (gdClass EditorResourcePicker) SetEditable(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePicker[8], enable) }
func (gdClass EditorResourcePicker) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorResourcePicker[9]) }

type EditorResourcePreview gdnative.Object
func (EditorResourcePreview) class() string { return "EditorResourcePreview\000" }

func (gdClass EditorResourcePreview) Node() Node { return Node(gdClass) }

var methodEditorResourcePreview [5]gdnative.Method
func (gdClass EditorResourcePreview) QueueResourcePreview(path string, receiver Object, receiver_func string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[0], path, receiver, receiver_func, userdata) }
func (gdClass EditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[1], resource, receiver, receiver_func, userdata) }
func (gdClass EditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[2], generator) }
func (gdClass EditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[3], generator) }
func (gdClass EditorResourcePreview) CheckForInvalidation(path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorResourcePreview[4], path) }

type EditorResourcePreviewGenerator gdnative.Object
func (EditorResourcePreviewGenerator) class() string { return "EditorResourcePreviewGenerator\000" }

func (gdClass EditorResourcePreviewGenerator) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EditorResourcePreviewGenerator) virtual(val any, name string) any {	switch name {
	case "_handles":
		i, ok := val.(interface{ Handles(atype string) bool })
		if ok {
			return i.Handles
		}
	case "_generate":
		i, ok := val.(interface{ Generate(resource Resource, size Vector2i) Texture2D })
		if ok {
			return i.Generate
		}
	case "_generate_from_path":
		i, ok := val.(interface{ GenerateFromPath(path string, size Vector2i) Texture2D })
		if ok {
			return i.GenerateFromPath
		}
	case "_generate_small_preview_automatically":
		i, ok := val.(interface{ GenerateSmallPreviewAutomatically() bool })
		if ok {
			return i.GenerateSmallPreviewAutomatically
		}
	case "_can_generate_small_preview":
		i, ok := val.(interface{ CanGenerateSmallPreview() bool })
		if ok {
			return i.CanGenerateSmallPreview
		}
	}
	return nil
}

type EditorSceneFormatImporter gdnative.Object
func (EditorSceneFormatImporter) class() string { return "EditorSceneFormatImporter\000" }

func (gdClass EditorSceneFormatImporter) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EditorSceneFormatImporter) virtual(val any, name string) any {	switch name {
	case "_get_import_flags":
		i, ok := val.(interface{ GetImportFlags() int64 })
		if ok {
			return i.GetImportFlags
		}
	case "_get_extensions":
		i, ok := val.(interface{ GetExtensions() []string })
		if ok {
			return i.GetExtensions
		}
	case "_import_scene":
		i, ok := val.(interface{ ImportScene(path string, flags int64, options Dictionary, bake_fps int64) Object })
		if ok {
			return i.ImportScene
		}
	case "_get_import_options":
		i, ok := val.(interface{ GetImportOptions(path string)  })
		if ok {
			return i.GetImportOptions
		}
	case "_get_option_visibility":
		i, ok := val.(interface{ GetOptionVisibility(path string, for_animation bool, option string) any })
		if ok {
			return i.GetOptionVisibility
		}
	}
	return nil
}

type EditorSceneFormatImporterBlend gdnative.Object
func (EditorSceneFormatImporterBlend) class() string { return "EditorSceneFormatImporterBlend\000" }

func (gdClass EditorSceneFormatImporterBlend) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter(gdClass) }


type EditorSceneFormatImporterFBX gdnative.Object
func (EditorSceneFormatImporterFBX) class() string { return "EditorSceneFormatImporterFBX\000" }

func (gdClass EditorSceneFormatImporterFBX) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter(gdClass) }


type EditorSceneFormatImporterGLTF gdnative.Object
func (EditorSceneFormatImporterGLTF) class() string { return "EditorSceneFormatImporterGLTF\000" }

func (gdClass EditorSceneFormatImporterGLTF) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter(gdClass) }


type EditorScenePostImport gdnative.Object
func (EditorScenePostImport) class() string { return "EditorScenePostImport\000" }

func (gdClass EditorScenePostImport) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorScenePostImport [1]gdnative.Method
func (gdClass EditorScenePostImport) virtual(val any, name string) any {	switch name {
	case "_post_import":
		i, ok := val.(interface{ PostImport(scene Node) Object })
		if ok {
			return i.PostImport
		}
	}
	return nil
}
func (gdClass EditorScenePostImport) GetSourceFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorScenePostImport[0]) }

type EditorScenePostImportPluginInternalImportCategory int64

const (
	EditorScenePostImportPluginInternalImportCategoryNode EditorScenePostImportPluginInternalImportCategory = 0
	EditorScenePostImportPluginInternalImportCategoryMesh3dNode EditorScenePostImportPluginInternalImportCategory = 1
	EditorScenePostImportPluginInternalImportCategoryMesh EditorScenePostImportPluginInternalImportCategory = 2
	EditorScenePostImportPluginInternalImportCategoryMaterial EditorScenePostImportPluginInternalImportCategory = 3
	EditorScenePostImportPluginInternalImportCategoryAnimation EditorScenePostImportPluginInternalImportCategory = 4
	EditorScenePostImportPluginInternalImportCategoryAnimationNode EditorScenePostImportPluginInternalImportCategory = 5
	EditorScenePostImportPluginInternalImportCategorySkeleton3dNode EditorScenePostImportPluginInternalImportCategory = 6
	EditorScenePostImportPluginInternalImportCategoryMax EditorScenePostImportPluginInternalImportCategory = 7
)

type EditorScenePostImportPlugin gdnative.Object
func (EditorScenePostImportPlugin) class() string { return "EditorScenePostImportPlugin\000" }

func (gdClass EditorScenePostImportPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorScenePostImportPlugin [3]gdnative.Method
func (gdClass EditorScenePostImportPlugin) virtual(val any, name string) any {	switch name {
	case "_get_internal_import_options":
		i, ok := val.(interface{ GetInternalImportOptions(category int64)  })
		if ok {
			return i.GetInternalImportOptions
		}
	case "_get_internal_option_visibility":
		i, ok := val.(interface{ GetInternalOptionVisibility(category int64, for_animation bool, option string) any })
		if ok {
			return i.GetInternalOptionVisibility
		}
	case "_get_internal_option_update_view_required":
		i, ok := val.(interface{ GetInternalOptionUpdateViewRequired(category int64, option string) any })
		if ok {
			return i.GetInternalOptionUpdateViewRequired
		}
	case "_internal_process":
		i, ok := val.(interface{ InternalProcess(category int64, base_node Node, node Node, resource Resource)  })
		if ok {
			return i.InternalProcess
		}
	case "_get_import_options":
		i, ok := val.(interface{ GetImportOptions(path string)  })
		if ok {
			return i.GetImportOptions
		}
	case "_get_option_visibility":
		i, ok := val.(interface{ GetOptionVisibility(path string, for_animation bool, option string) any })
		if ok {
			return i.GetOptionVisibility
		}
	case "_pre_process":
		i, ok := val.(interface{ PreProcess(scene Node)  })
		if ok {
			return i.PreProcess
		}
	case "_post_process":
		i, ok := val.(interface{ PostProcess(scene Node)  })
		if ok {
			return i.PostProcess
		}
	}
	return nil
}
func (gdClass EditorScenePostImportPlugin) GetOptionValue(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorScenePostImportPlugin[0], name) }
func (gdClass EditorScenePostImportPlugin) AddImportOption(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[1], name, value) }
func (gdClass EditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name string, default_value any, hint PropertyHint, hint_string string, usage_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScenePostImportPlugin[2], atype, name, default_value, hint, hint_string, usage_flags) }

type EditorScript gdnative.Object
func (EditorScript) class() string { return "EditorScript\000" }

func (gdClass EditorScript) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEditorScript [3]gdnative.Method
func (gdClass EditorScript) virtual(val any, name string) any {	switch name {
	case "_run":
		i, ok := val.(interface{ Run()  })
		if ok {
			return i.Run
		}
	}
	return nil
}
func (gdClass EditorScript) AddRootNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScript[0], node) }
func (gdClass EditorScript) GetScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorScript[1]) }
func (gdClass EditorScript) GetEditorInterface() EditorInterface { return gdnative.Return[EditorInterface](gdnative.Object(gdClass), methodEditorScript[2]) }

type EditorScriptPicker gdnative.Object
func (EditorScriptPicker) class() string { return "EditorScriptPicker\000" }

func (gdClass EditorScriptPicker) EditorResourcePicker() EditorResourcePicker { return EditorResourcePicker(gdClass) }

var methodEditorScriptPicker [2]gdnative.Method
func (gdClass EditorScriptPicker) SetScriptOwner(owner_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorScriptPicker[0], owner_node) }
func (gdClass EditorScriptPicker) GetScriptOwner() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodEditorScriptPicker[1]) }

type EditorSelection gdnative.Object
func (EditorSelection) class() string { return "EditorSelection\000" }

func (gdClass EditorSelection) Object() Object { return Object(gdClass) }

var methodEditorSelection [5]gdnative.Method
func (gdClass EditorSelection) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[0]) }
func (gdClass EditorSelection) AddNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[1], node) }
func (gdClass EditorSelection) RemoveNode(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSelection[2], node) }
func (gdClass EditorSelection) GetSelectedNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSelection[3]) }
func (gdClass EditorSelection) GetTransformableSelectedNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSelection[4]) }

type EditorSettings gdnative.Object
func (EditorSettings) class() string { return "EditorSettings\000" }

func (gdClass EditorSettings) Resource() Resource { return Resource(gdClass) }

var methodEditorSettings [16]gdnative.Method
func (gdClass EditorSettings) HasSetting(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSettings[0], name) }
func (gdClass EditorSettings) SetSetting(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[1], name, value) }
func (gdClass EditorSettings) GetSetting(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSettings[2], name) }
func (gdClass EditorSettings) Erase(property string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[3], property) }
func (gdClass EditorSettings) SetInitialValue(name string, value any, update_current bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[4], name, value, update_current) }
func (gdClass EditorSettings) AddPropertyInfo(info Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[5], info) }
func (gdClass EditorSettings) SetProjectMetadata(section string, key string, data any)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[6], section, key, data) }
func (gdClass EditorSettings) GetProjectMetadata(section string, key string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodEditorSettings[7], section, key, def) }
func (gdClass EditorSettings) SetFavorites(dirs []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[8], dirs) }
func (gdClass EditorSettings) GetFavorites() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorSettings[9]) }
func (gdClass EditorSettings) SetRecentDirs(dirs []string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[10], dirs) }
func (gdClass EditorSettings) GetRecentDirs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEditorSettings[11]) }
func (gdClass EditorSettings) SetBuiltinActionOverride(name string, actions_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[12], name, actions_list) }
func (gdClass EditorSettings) CheckChangedSettingsInGroup(setting_prefix string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSettings[13], setting_prefix) }
func (gdClass EditorSettings) GetChangedSettings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorSettings[14]) }
func (gdClass EditorSettings) MarkSettingChanged(setting string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSettings[15], setting) }

type EditorSpinSlider gdnative.Object
func (EditorSpinSlider) class() string { return "EditorSpinSlider\000" }

func (gdClass EditorSpinSlider) Range() Range { return Range(gdClass) }

var methodEditorSpinSlider [10]gdnative.Method
func (gdClass EditorSpinSlider) SetLabel(label string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[0], label) }
func (gdClass EditorSpinSlider) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorSpinSlider[1]) }
func (gdClass EditorSpinSlider) SetSuffix(suffix string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[2], suffix) }
func (gdClass EditorSpinSlider) GetSuffix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorSpinSlider[3]) }
func (gdClass EditorSpinSlider) SetReadOnly(read_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[4], read_only) }
func (gdClass EditorSpinSlider) IsReadOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[5]) }
func (gdClass EditorSpinSlider) SetFlat(flat bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[6], flat) }
func (gdClass EditorSpinSlider) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[7]) }
func (gdClass EditorSpinSlider) SetHideSlider(hide_slider bool)  { gdnative.Call(gdnative.Object(gdClass), methodEditorSpinSlider[8], hide_slider) }
func (gdClass EditorSpinSlider) IsHidingSlider() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorSpinSlider[9]) }

type EditorSyntaxHighlighter gdnative.Object
func (EditorSyntaxHighlighter) class() string { return "EditorSyntaxHighlighter\000" }

func (gdClass EditorSyntaxHighlighter) SyntaxHighlighter() SyntaxHighlighter { return SyntaxHighlighter(gdClass) }

func (gdClass EditorSyntaxHighlighter) virtual(val any, name string) any {	switch name {
	case "_get_name":
		i, ok := val.(interface{ GetName() string })
		if ok {
			return i.GetName
		}
	case "_get_supported_languages":
		i, ok := val.(interface{ GetSupportedLanguages() Array })
		if ok {
			return i.GetSupportedLanguages
		}
	}
	return nil
}

type EditorTranslationParserPlugin gdnative.Object
func (EditorTranslationParserPlugin) class() string { return "EditorTranslationParserPlugin\000" }

func (gdClass EditorTranslationParserPlugin) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EditorTranslationParserPlugin) virtual(val any, name string) any {	switch name {
	case "_parse_file":
		i, ok := val.(interface{ ParseFile(path string, msgids Array, msgids_context_plural Array)  })
		if ok {
			return i.ParseFile
		}
	case "_get_recognized_extensions":
		i, ok := val.(interface{ GetRecognizedExtensions() []string })
		if ok {
			return i.GetRecognizedExtensions
		}
	}
	return nil
}

type EditorVCSInterface gdnative.Object
func (EditorVCSInterface) class() string { return "EditorVCSInterface\000" }

func (gdClass EditorVCSInterface) Object() Object { return Object(gdClass) }

var methodEditorVCSInterface [11]gdnative.Method
func (gdClass EditorVCSInterface) IsAddonReady() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[0]) }
func (gdClass EditorVCSInterface) Initialize(project_root_path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[1], project_root_path) }
func (gdClass EditorVCSInterface) IsVcsInitialized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[2]) }
func (gdClass EditorVCSInterface) GetModifiedFilesData() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEditorVCSInterface[3]) }
func (gdClass EditorVCSInterface) StageFile(file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[4], file_path) }
func (gdClass EditorVCSInterface) UnstageFile(file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[5], file_path) }
func (gdClass EditorVCSInterface) Commit(msg string)  { gdnative.Call(gdnative.Object(gdClass), methodEditorVCSInterface[6], msg) }
func (gdClass EditorVCSInterface) GetFileDiff(file_path string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEditorVCSInterface[7], file_path) }
func (gdClass EditorVCSInterface) ShutDown() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEditorVCSInterface[8]) }
func (gdClass EditorVCSInterface) GetProjectName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorVCSInterface[9]) }
func (gdClass EditorVCSInterface) GetVcsName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEditorVCSInterface[10]) }

type EncodedObjectAsID gdnative.Object
func (EncodedObjectAsID) class() string { return "EncodedObjectAsID\000" }

func (gdClass EncodedObjectAsID) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodEncodedObjectAsID [2]gdnative.Method
func (gdClass EncodedObjectAsID) SetObjectId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodEncodedObjectAsID[0], id) }
func (gdClass EncodedObjectAsID) GetObjectId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEncodedObjectAsID[1]) }

type Engine gdnative.Object
func (Engine) class() string { return "Engine\000" }

func (gdClass Engine) Object() Object { return Object(gdClass) }

var methodEngine [34]gdnative.Method
func (gdClass Engine) SetPhysicsTicksPerSecond(physics_ticks_per_second int64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[0], physics_ticks_per_second) }
func (gdClass Engine) GetPhysicsTicksPerSecond() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[1]) }
func (gdClass Engine) SetPhysicsJitterFix(physics_jitter_fix float64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[2], physics_jitter_fix) }
func (gdClass Engine) GetPhysicsJitterFix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[3]) }
func (gdClass Engine) GetPhysicsInterpolationFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[4]) }
func (gdClass Engine) SetTargetFps(target_fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[5], target_fps) }
func (gdClass Engine) GetTargetFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[6]) }
func (gdClass Engine) SetTimeScale(time_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[7], time_scale) }
func (gdClass Engine) GetTimeScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[8]) }
func (gdClass Engine) GetFramesDrawn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[9]) }
func (gdClass Engine) GetFramesPerSecond() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEngine[10]) }
func (gdClass Engine) GetPhysicsFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[11]) }
func (gdClass Engine) GetProcessFrames() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[12]) }
func (gdClass Engine) GetMainLoop() MainLoop { return gdnative.Return[MainLoop](gdnative.Object(gdClass), methodEngine[13]) }
func (gdClass Engine) GetVersionInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[14]) }
func (gdClass Engine) GetAuthorInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[15]) }
func (gdClass Engine) GetCopyrightInfo() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodEngine[16]) }
func (gdClass Engine) GetDonorInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[17]) }
func (gdClass Engine) GetLicenseInfo() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodEngine[18]) }
func (gdClass Engine) GetLicenseText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[19]) }
func (gdClass Engine) GetArchitectureName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[20]) }
func (gdClass Engine) IsInPhysicsFrame() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[21]) }
func (gdClass Engine) HasSingleton(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[22], name) }
func (gdClass Engine) GetSingleton(name string) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodEngine[23], name) }
func (gdClass Engine) RegisterSingleton(name string, instance Object)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[24], name, instance) }
func (gdClass Engine) UnregisterSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[25], name) }
func (gdClass Engine) GetSingletonList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodEngine[26]) }
func (gdClass Engine) RegisterScriptLanguage(language ScriptLanguage)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[27], language) }
func (gdClass Engine) GetScriptLanguageCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEngine[28]) }
func (gdClass Engine) GetScriptLanguage(index int64) ScriptLanguage { return gdnative.Return[ScriptLanguage](gdnative.Object(gdClass), methodEngine[29], index) }
func (gdClass Engine) IsEditorHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[30]) }
func (gdClass Engine) GetWriteMoviePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodEngine[31]) }
func (gdClass Engine) SetPrintErrorMessages(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEngine[32], enabled) }
func (gdClass Engine) IsPrintingErrorMessages() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngine[33]) }

type EngineDebugger gdnative.Object
func (EngineDebugger) class() string { return "EngineDebugger\000" }

func (gdClass EngineDebugger) Object() Object { return Object(gdClass) }

var methodEngineDebugger [11]gdnative.Method
func (gdClass EngineDebugger) IsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[0]) }
func (gdClass EngineDebugger) RegisterProfiler(name string, profiler EngineProfiler)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[1], name, profiler) }
func (gdClass EngineDebugger) UnregisterProfiler(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[2], name) }
func (gdClass EngineDebugger) IsProfiling(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[3], name) }
func (gdClass EngineDebugger) HasProfiler(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[4], name) }
func (gdClass EngineDebugger) ProfilerAddFrameData(name string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[5], name, data) }
func (gdClass EngineDebugger) ProfilerEnable(name string, enable bool, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[6], name, enable, arguments) }
func (gdClass EngineDebugger) RegisterMessageCapture(name string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[7], name, callable) }
func (gdClass EngineDebugger) UnregisterMessageCapture(name string)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[8], name) }
func (gdClass EngineDebugger) HasCapture(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEngineDebugger[9], name) }
func (gdClass EngineDebugger) SendMessage(message string, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodEngineDebugger[10], message, data) }

type EngineProfiler gdnative.Object
func (EngineProfiler) class() string { return "EngineProfiler\000" }

func (gdClass EngineProfiler) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass EngineProfiler) virtual(val any, name string) any {	switch name {
	case "_toggle":
		i, ok := val.(interface{ Toggle(enable bool, options Array)  })
		if ok {
			return i.Toggle
		}
	case "_add_frame":
		i, ok := val.(interface{ AddFrame(data Array)  })
		if ok {
			return i.AddFrame
		}
	case "_tick":
		i, ok := val.(interface{ Tick(frame_time float64, process_time float64, physics_time float64, physics_frame_time float64)  })
		if ok {
			return i.Tick
		}
	}
	return nil
}

type EnvironmentBGMode int64

const (
	EnvironmentBgClearColor EnvironmentBGMode = 0
	EnvironmentBgColor EnvironmentBGMode = 1
	EnvironmentBgSky EnvironmentBGMode = 2
	EnvironmentBgCanvas EnvironmentBGMode = 3
	EnvironmentBgKeep EnvironmentBGMode = 4
	EnvironmentBgCameraFeed EnvironmentBGMode = 5
	EnvironmentBgMax EnvironmentBGMode = 6
)

type EnvironmentAmbientSource int64

const (
	EnvironmentAmbientSourceBg EnvironmentAmbientSource = 0
	EnvironmentAmbientSourceDisabled EnvironmentAmbientSource = 1
	EnvironmentAmbientSourceColor EnvironmentAmbientSource = 2
	EnvironmentAmbientSourceSky EnvironmentAmbientSource = 3
)

type EnvironmentReflectionSource int64

const (
	EnvironmentReflectionSourceBg EnvironmentReflectionSource = 0
	EnvironmentReflectionSourceDisabled EnvironmentReflectionSource = 1
	EnvironmentReflectionSourceSky EnvironmentReflectionSource = 2
)

type EnvironmentToneMapper int64

const (
	EnvironmentToneMapperLinear EnvironmentToneMapper = 0
	EnvironmentToneMapperReinhardt EnvironmentToneMapper = 1
	EnvironmentToneMapperFilmic EnvironmentToneMapper = 2
	EnvironmentToneMapperAces EnvironmentToneMapper = 3
)

type EnvironmentGlowBlendMode int64

const (
	EnvironmentGlowBlendModeAdditive EnvironmentGlowBlendMode = 0
	EnvironmentGlowBlendModeScreen EnvironmentGlowBlendMode = 1
	EnvironmentGlowBlendModeSoftlight EnvironmentGlowBlendMode = 2
	EnvironmentGlowBlendModeReplace EnvironmentGlowBlendMode = 3
	EnvironmentGlowBlendModeMix EnvironmentGlowBlendMode = 4
)

type EnvironmentSDFGIYScale int64

const (
	EnvironmentSdfgiYScale50Percent EnvironmentSDFGIYScale = 0
	EnvironmentSdfgiYScale75Percent EnvironmentSDFGIYScale = 1
	EnvironmentSdfgiYScale100Percent EnvironmentSDFGIYScale = 2
)

type Environment gdnative.Object
func (Environment) class() string { return "Environment\000" }

func (gdClass Environment) Resource() Resource { return Resource(gdClass) }

var methodEnvironment [180]gdnative.Method
func (gdClass Environment) SetBackground(mode EnvironmentBGMode)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[0], mode) }
func (gdClass Environment) GetBackground() EnvironmentBGMode { return gdnative.Return[EnvironmentBGMode](gdnative.Object(gdClass), methodEnvironment[1]) }
func (gdClass Environment) SetSky(sky Sky)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[2], sky) }
func (gdClass Environment) GetSky() Sky { return gdnative.Return[Sky](gdnative.Object(gdClass), methodEnvironment[3]) }
func (gdClass Environment) SetSkyCustomFov(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[4], scale) }
func (gdClass Environment) GetSkyCustomFov() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[5]) }
func (gdClass Environment) SetSkyRotation(euler_radians Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[6], euler_radians) }
func (gdClass Environment) GetSkyRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodEnvironment[7]) }
func (gdClass Environment) SetBgColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[8], color) }
func (gdClass Environment) GetBgColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[9]) }
func (gdClass Environment) SetBgEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[10], energy) }
func (gdClass Environment) GetBgEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[11]) }
func (gdClass Environment) SetCanvasMaxLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[12], layer) }
func (gdClass Environment) GetCanvasMaxLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[13]) }
func (gdClass Environment) SetCameraFeedId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[14], id) }
func (gdClass Environment) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[15]) }
func (gdClass Environment) SetAmbientLightColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[16], color) }
func (gdClass Environment) GetAmbientLightColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[17]) }
func (gdClass Environment) SetAmbientSource(source EnvironmentAmbientSource)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[18], source) }
func (gdClass Environment) GetAmbientSource() EnvironmentAmbientSource { return gdnative.Return[EnvironmentAmbientSource](gdnative.Object(gdClass), methodEnvironment[19]) }
func (gdClass Environment) SetAmbientLightEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[20], energy) }
func (gdClass Environment) GetAmbientLightEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[21]) }
func (gdClass Environment) SetAmbientLightSkyContribution(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[22], ratio) }
func (gdClass Environment) GetAmbientLightSkyContribution() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[23]) }
func (gdClass Environment) SetReflectionSource(source EnvironmentReflectionSource)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[24], source) }
func (gdClass Environment) GetReflectionSource() EnvironmentReflectionSource { return gdnative.Return[EnvironmentReflectionSource](gdnative.Object(gdClass), methodEnvironment[25]) }
func (gdClass Environment) SetTonemapper(mode EnvironmentToneMapper)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[26], mode) }
func (gdClass Environment) GetTonemapper() EnvironmentToneMapper { return gdnative.Return[EnvironmentToneMapper](gdnative.Object(gdClass), methodEnvironment[27]) }
func (gdClass Environment) SetTonemapExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[28], exposure) }
func (gdClass Environment) GetTonemapExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[29]) }
func (gdClass Environment) SetTonemapWhite(white float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[30], white) }
func (gdClass Environment) GetTonemapWhite() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[31]) }
func (gdClass Environment) SetTonemapAutoExposureEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[32], enabled) }
func (gdClass Environment) IsTonemapAutoExposureEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[33]) }
func (gdClass Environment) SetTonemapAutoExposureMax(exposure_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[34], exposure_max) }
func (gdClass Environment) GetTonemapAutoExposureMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[35]) }
func (gdClass Environment) SetTonemapAutoExposureMin(exposure_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[36], exposure_min) }
func (gdClass Environment) GetTonemapAutoExposureMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[37]) }
func (gdClass Environment) SetTonemapAutoExposureSpeed(exposure_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[38], exposure_speed) }
func (gdClass Environment) GetTonemapAutoExposureSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[39]) }
func (gdClass Environment) SetTonemapAutoExposureGrey(exposure_grey float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[40], exposure_grey) }
func (gdClass Environment) GetTonemapAutoExposureGrey() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[41]) }
func (gdClass Environment) SetSsrEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[42], enabled) }
func (gdClass Environment) IsSsrEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[43]) }
func (gdClass Environment) SetSsrMaxSteps(max_steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[44], max_steps) }
func (gdClass Environment) GetSsrMaxSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[45]) }
func (gdClass Environment) SetSsrFadeIn(fade_in float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[46], fade_in) }
func (gdClass Environment) GetSsrFadeIn() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[47]) }
func (gdClass Environment) SetSsrFadeOut(fade_out float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[48], fade_out) }
func (gdClass Environment) GetSsrFadeOut() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[49]) }
func (gdClass Environment) SetSsrDepthTolerance(depth_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[50], depth_tolerance) }
func (gdClass Environment) GetSsrDepthTolerance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[51]) }
func (gdClass Environment) SetSsaoEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[52], enabled) }
func (gdClass Environment) IsSsaoEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[53]) }
func (gdClass Environment) SetSsaoRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[54], radius) }
func (gdClass Environment) GetSsaoRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[55]) }
func (gdClass Environment) SetSsaoIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[56], intensity) }
func (gdClass Environment) GetSsaoIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[57]) }
func (gdClass Environment) SetSsaoPower(power float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[58], power) }
func (gdClass Environment) GetSsaoPower() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[59]) }
func (gdClass Environment) SetSsaoDetail(detail float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[60], detail) }
func (gdClass Environment) GetSsaoDetail() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[61]) }
func (gdClass Environment) SetSsaoHorizon(horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[62], horizon) }
func (gdClass Environment) GetSsaoHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[63]) }
func (gdClass Environment) SetSsaoSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[64], sharpness) }
func (gdClass Environment) GetSsaoSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[65]) }
func (gdClass Environment) SetSsaoDirectLightAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[66], amount) }
func (gdClass Environment) GetSsaoDirectLightAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[67]) }
func (gdClass Environment) SetSsaoAoChannelAffect(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[68], amount) }
func (gdClass Environment) GetSsaoAoChannelAffect() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[69]) }
func (gdClass Environment) SetSsilEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[70], enabled) }
func (gdClass Environment) IsSsilEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[71]) }
func (gdClass Environment) SetSsilRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[72], radius) }
func (gdClass Environment) GetSsilRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[73]) }
func (gdClass Environment) SetSsilIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[74], intensity) }
func (gdClass Environment) GetSsilIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[75]) }
func (gdClass Environment) SetSsilSharpness(sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[76], sharpness) }
func (gdClass Environment) GetSsilSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[77]) }
func (gdClass Environment) SetSsilNormalRejection(normal_rejection float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[78], normal_rejection) }
func (gdClass Environment) GetSsilNormalRejection() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[79]) }
func (gdClass Environment) SetSdfgiEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[80], enabled) }
func (gdClass Environment) IsSdfgiEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[81]) }
func (gdClass Environment) SetSdfgiCascades(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[82], amount) }
func (gdClass Environment) GetSdfgiCascades() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodEnvironment[83]) }
func (gdClass Environment) SetSdfgiMinCellSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[84], size) }
func (gdClass Environment) GetSdfgiMinCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[85]) }
func (gdClass Environment) SetSdfgiMaxDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[86], distance) }
func (gdClass Environment) GetSdfgiMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[87]) }
func (gdClass Environment) SetSdfgiCascade0Distance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[88], distance) }
func (gdClass Environment) GetSdfgiCascade0Distance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[89]) }
func (gdClass Environment) SetSdfgiYScale(scale EnvironmentSDFGIYScale)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[90], scale) }
func (gdClass Environment) GetSdfgiYScale() EnvironmentSDFGIYScale { return gdnative.Return[EnvironmentSDFGIYScale](gdnative.Object(gdClass), methodEnvironment[91]) }
func (gdClass Environment) SetSdfgiUseOcclusion(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[92], enable) }
func (gdClass Environment) IsSdfgiUsingOcclusion() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[93]) }
func (gdClass Environment) SetSdfgiBounceFeedback(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[94], amount) }
func (gdClass Environment) GetSdfgiBounceFeedback() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[95]) }
func (gdClass Environment) SetSdfgiReadSkyLight(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[96], enable) }
func (gdClass Environment) IsSdfgiReadingSkyLight() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[97]) }
func (gdClass Environment) SetSdfgiEnergy(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[98], amount) }
func (gdClass Environment) GetSdfgiEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[99]) }
func (gdClass Environment) SetSdfgiNormalBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[100], bias) }
func (gdClass Environment) GetSdfgiNormalBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[101]) }
func (gdClass Environment) SetSdfgiProbeBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[102], bias) }
func (gdClass Environment) GetSdfgiProbeBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[103]) }
func (gdClass Environment) SetGlowEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[104], enabled) }
func (gdClass Environment) IsGlowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[105]) }
func (gdClass Environment) SetGlowLevel(idx int64, intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[106], idx, intensity) }
func (gdClass Environment) GetGlowLevel(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[107], idx) }
func (gdClass Environment) SetGlowNormalized(normalize bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[108], normalize) }
func (gdClass Environment) IsGlowNormalized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[109]) }
func (gdClass Environment) SetGlowIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[110], intensity) }
func (gdClass Environment) GetGlowIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[111]) }
func (gdClass Environment) SetGlowStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[112], strength) }
func (gdClass Environment) GetGlowStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[113]) }
func (gdClass Environment) SetGlowMix(mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[114], mix) }
func (gdClass Environment) GetGlowMix() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[115]) }
func (gdClass Environment) SetGlowBloom(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[116], amount) }
func (gdClass Environment) GetGlowBloom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[117]) }
func (gdClass Environment) SetGlowBlendMode(mode EnvironmentGlowBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[118], mode) }
func (gdClass Environment) GetGlowBlendMode() EnvironmentGlowBlendMode { return gdnative.Return[EnvironmentGlowBlendMode](gdnative.Object(gdClass), methodEnvironment[119]) }
func (gdClass Environment) SetGlowHdrBleedThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[120], threshold) }
func (gdClass Environment) GetGlowHdrBleedThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[121]) }
func (gdClass Environment) SetGlowHdrBleedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[122], scale) }
func (gdClass Environment) GetGlowHdrBleedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[123]) }
func (gdClass Environment) SetGlowHdrLuminanceCap(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[124], amount) }
func (gdClass Environment) GetGlowHdrLuminanceCap() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[125]) }
func (gdClass Environment) SetGlowMapStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[126], strength) }
func (gdClass Environment) GetGlowMapStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[127]) }
func (gdClass Environment) SetGlowMap(mode Texture)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[128], mode) }
func (gdClass Environment) GetGlowMap() Texture { return gdnative.Return[Texture](gdnative.Object(gdClass), methodEnvironment[129]) }
func (gdClass Environment) SetFogEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[130], enabled) }
func (gdClass Environment) IsFogEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[131]) }
func (gdClass Environment) SetFogLightColor(light_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[132], light_color) }
func (gdClass Environment) GetFogLightColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[133]) }
func (gdClass Environment) SetFogLightEnergy(light_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[134], light_energy) }
func (gdClass Environment) GetFogLightEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[135]) }
func (gdClass Environment) SetFogSunScatter(sun_scatter float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[136], sun_scatter) }
func (gdClass Environment) GetFogSunScatter() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[137]) }
func (gdClass Environment) SetFogDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[138], density) }
func (gdClass Environment) GetFogDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[139]) }
func (gdClass Environment) SetFogHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[140], height) }
func (gdClass Environment) GetFogHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[141]) }
func (gdClass Environment) SetFogHeightDensity(height_density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[142], height_density) }
func (gdClass Environment) GetFogHeightDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[143]) }
func (gdClass Environment) SetFogAerialPerspective(aerial_perspective float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[144], aerial_perspective) }
func (gdClass Environment) GetFogAerialPerspective() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[145]) }
func (gdClass Environment) SetVolumetricFogEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[146], enabled) }
func (gdClass Environment) IsVolumetricFogEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[147]) }
func (gdClass Environment) SetVolumetricFogEmission(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[148], color) }
func (gdClass Environment) GetVolumetricFogEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[149]) }
func (gdClass Environment) SetVolumetricFogAlbedo(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[150], color) }
func (gdClass Environment) GetVolumetricFogAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodEnvironment[151]) }
func (gdClass Environment) SetVolumetricFogDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[152], density) }
func (gdClass Environment) GetVolumetricFogDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[153]) }
func (gdClass Environment) SetVolumetricFogEmissionEnergy(begin float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[154], begin) }
func (gdClass Environment) GetVolumetricFogEmissionEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[155]) }
func (gdClass Environment) SetVolumetricFogAnisotropy(anisotropy float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[156], anisotropy) }
func (gdClass Environment) GetVolumetricFogAnisotropy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[157]) }
func (gdClass Environment) SetVolumetricFogLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[158], length) }
func (gdClass Environment) GetVolumetricFogLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[159]) }
func (gdClass Environment) SetVolumetricFogDetailSpread(detail_spread float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[160], detail_spread) }
func (gdClass Environment) GetVolumetricFogDetailSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[161]) }
func (gdClass Environment) SetVolumetricFogGiInject(gi_inject float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[162], gi_inject) }
func (gdClass Environment) GetVolumetricFogGiInject() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[163]) }
func (gdClass Environment) SetVolumetricFogAmbientInject(enabled float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[164], enabled) }
func (gdClass Environment) GetVolumetricFogAmbientInject() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[165]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[166], enabled) }
func (gdClass Environment) IsVolumetricFogTemporalReprojectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[167]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[168], temporal_reprojection_amount) }
func (gdClass Environment) GetVolumetricFogTemporalReprojectionAmount() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[169]) }
func (gdClass Environment) SetAdjustmentEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[170], enabled) }
func (gdClass Environment) IsAdjustmentEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodEnvironment[171]) }
func (gdClass Environment) SetAdjustmentBrightness(brightness float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[172], brightness) }
func (gdClass Environment) GetAdjustmentBrightness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[173]) }
func (gdClass Environment) SetAdjustmentContrast(contrast float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[174], contrast) }
func (gdClass Environment) GetAdjustmentContrast() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[175]) }
func (gdClass Environment) SetAdjustmentSaturation(saturation float64)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[176], saturation) }
func (gdClass Environment) GetAdjustmentSaturation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodEnvironment[177]) }
func (gdClass Environment) SetAdjustmentColorCorrection(color_correction Texture)  { gdnative.Call(gdnative.Object(gdClass), methodEnvironment[178], color_correction) }
func (gdClass Environment) GetAdjustmentColorCorrection() Texture { return gdnative.Return[Texture](gdnative.Object(gdClass), methodEnvironment[179]) }

type Expression gdnative.Object
func (Expression) class() string { return "Expression\000" }

func (gdClass Expression) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodExpression [4]gdnative.Method
func (gdClass Expression) Parse(expression string, input_names []string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodExpression[0], expression, input_names) }
func (gdClass Expression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodExpression[1], inputs, base_instance, show_error, const_calls_only) }
func (gdClass Expression) HasExecuteFailed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodExpression[2]) }
func (gdClass Expression) GetErrorText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodExpression[3]) }

type FastNoiseLiteNoiseType int64

const (
	FastNoiseLiteTypeValue FastNoiseLiteNoiseType = 5
	FastNoiseLiteTypeValueCubic FastNoiseLiteNoiseType = 4
	FastNoiseLiteTypePerlin FastNoiseLiteNoiseType = 3
	FastNoiseLiteTypeCellular FastNoiseLiteNoiseType = 2
	FastNoiseLiteTypeSimplex FastNoiseLiteNoiseType = 0
	FastNoiseLiteTypeSimplexSmooth FastNoiseLiteNoiseType = 1
)

type FastNoiseLiteFractalType int64

const (
	FastNoiseLiteFractalNone FastNoiseLiteFractalType = 0
	FastNoiseLiteFractalFbm FastNoiseLiteFractalType = 1
	FastNoiseLiteFractalRidged FastNoiseLiteFractalType = 2
	FastNoiseLiteFractalPingPong FastNoiseLiteFractalType = 3
)

type FastNoiseLiteCellularDistanceFunction int64

const (
	FastNoiseLiteDistanceEuclidean FastNoiseLiteCellularDistanceFunction = 0
	FastNoiseLiteDistanceEuclideanSquared FastNoiseLiteCellularDistanceFunction = 1
	FastNoiseLiteDistanceManhattan FastNoiseLiteCellularDistanceFunction = 2
	FastNoiseLiteDistanceHybrid FastNoiseLiteCellularDistanceFunction = 3
)

type FastNoiseLiteCellularReturnType int64

const (
	FastNoiseLiteReturnCellValue FastNoiseLiteCellularReturnType = 0
	FastNoiseLiteReturnDistance FastNoiseLiteCellularReturnType = 1
	FastNoiseLiteReturnDistance2 FastNoiseLiteCellularReturnType = 2
	FastNoiseLiteReturnDistance2Add FastNoiseLiteCellularReturnType = 3
	FastNoiseLiteReturnDistance2Sub FastNoiseLiteCellularReturnType = 4
	FastNoiseLiteReturnDistance2Mul FastNoiseLiteCellularReturnType = 5
	FastNoiseLiteReturnDistance2Div FastNoiseLiteCellularReturnType = 6
)

type FastNoiseLiteDomainWarpType int64

const (
	FastNoiseLiteDomainWarpSimplex FastNoiseLiteDomainWarpType = 0
	FastNoiseLiteDomainWarpSimplexReduced FastNoiseLiteDomainWarpType = 1
	FastNoiseLiteDomainWarpBasicGrid FastNoiseLiteDomainWarpType = 2
)

type FastNoiseLiteDomainWarpFractalType int64

const (
	FastNoiseLiteDomainWarpFractalNone FastNoiseLiteDomainWarpFractalType = 0
	FastNoiseLiteDomainWarpFractalProgressive FastNoiseLiteDomainWarpFractalType = 1
	FastNoiseLiteDomainWarpFractalIndependent FastNoiseLiteDomainWarpFractalType = 2
)

type FastNoiseLite gdnative.Object
func (FastNoiseLite) class() string { return "FastNoiseLite\000" }

func (gdClass FastNoiseLite) Noise() Noise { return Noise(gdClass) }

var methodFastNoiseLite [42]gdnative.Method
func (gdClass FastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[0], atype) }
func (gdClass FastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType { return gdnative.Return[FastNoiseLiteNoiseType](gdnative.Object(gdClass), methodFastNoiseLite[1]) }
func (gdClass FastNoiseLite) SetSeed(seed int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[2], seed) }
func (gdClass FastNoiseLite) GetSeed() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[3]) }
func (gdClass FastNoiseLite) SetFrequency(freq float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[4], freq) }
func (gdClass FastNoiseLite) GetFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[5]) }
func (gdClass FastNoiseLite) SetOffset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[6], offset) }
func (gdClass FastNoiseLite) GetOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodFastNoiseLite[7]) }
func (gdClass FastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[8], atype) }
func (gdClass FastNoiseLite) GetFractalType() FastNoiseLiteFractalType { return gdnative.Return[FastNoiseLiteFractalType](gdnative.Object(gdClass), methodFastNoiseLite[9]) }
func (gdClass FastNoiseLite) SetFractalOctaves(octave_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[10], octave_count) }
func (gdClass FastNoiseLite) GetFractalOctaves() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[11]) }
func (gdClass FastNoiseLite) SetFractalLacunarity(lacunarity float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[12], lacunarity) }
func (gdClass FastNoiseLite) GetFractalLacunarity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[13]) }
func (gdClass FastNoiseLite) SetFractalGain(gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[14], gain) }
func (gdClass FastNoiseLite) GetFractalGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[15]) }
func (gdClass FastNoiseLite) SetFractalWeightedStrength(weighted_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[16], weighted_strength) }
func (gdClass FastNoiseLite) GetFractalWeightedStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[17]) }
func (gdClass FastNoiseLite) SetFractalPingPongStrength(ping_pong_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[18], ping_pong_strength) }
func (gdClass FastNoiseLite) GetFractalPingPongStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[19]) }
func (gdClass FastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[20], fn) }
func (gdClass FastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction { return gdnative.Return[FastNoiseLiteCellularDistanceFunction](gdnative.Object(gdClass), methodFastNoiseLite[21]) }
func (gdClass FastNoiseLite) SetCellularJitter(jitter float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[22], jitter) }
func (gdClass FastNoiseLite) GetCellularJitter() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[23]) }
func (gdClass FastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[24], ret) }
func (gdClass FastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType { return gdnative.Return[FastNoiseLiteCellularReturnType](gdnative.Object(gdClass), methodFastNoiseLite[25]) }
func (gdClass FastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[26], domain_warp_enabled) }
func (gdClass FastNoiseLite) IsDomainWarpEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFastNoiseLite[27]) }
func (gdClass FastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[28], domain_warp_type) }
func (gdClass FastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType { return gdnative.Return[FastNoiseLiteDomainWarpType](gdnative.Object(gdClass), methodFastNoiseLite[29]) }
func (gdClass FastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[30], domain_warp_amplitude) }
func (gdClass FastNoiseLite) GetDomainWarpAmplitude() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[31]) }
func (gdClass FastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[32], domain_warp_frequency) }
func (gdClass FastNoiseLite) GetDomainWarpFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[33]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[34], domain_warp_fractal_type) }
func (gdClass FastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType { return gdnative.Return[FastNoiseLiteDomainWarpFractalType](gdnative.Object(gdClass), methodFastNoiseLite[35]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[36], domain_warp_octave_count) }
func (gdClass FastNoiseLite) GetDomainWarpFractalOctaves() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFastNoiseLite[37]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[38], domain_warp_lacunarity) }
func (gdClass FastNoiseLite) GetDomainWarpFractalLacunarity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[39]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain float64)  { gdnative.Call(gdnative.Object(gdClass), methodFastNoiseLite[40], domain_warp_gain) }
func (gdClass FastNoiseLite) GetDomainWarpFractalGain() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFastNoiseLite[41]) }

type FileModeFlags int64

const (
	FileRead FileModeFlags = 1
	FileWrite FileModeFlags = 2
	FileReadWrite FileModeFlags = 3
	FileWriteRead FileModeFlags = 7
)

type FileCompressionMode int64

const (
	FileCompressionFastlz FileCompressionMode = 0
	FileCompressionDeflate FileCompressionMode = 1
	FileCompressionZstd FileCompressionMode = 2
	FileCompressionGzip FileCompressionMode = 3
)

type File gdnative.Object
func (File) class() string { return "File\000" }

func (gdClass File) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodFile [47]gdnative.Method
func (gdClass File) OpenEncrypted(path string, mode_flags FileModeFlags, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[0], path, mode_flags, key) }
func (gdClass File) OpenEncryptedWithPass(path string, mode_flags FileModeFlags, pass string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[1], path, mode_flags, pass) }
func (gdClass File) OpenCompressed(path string, mode_flags FileModeFlags, compression_mode FileCompressionMode) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[2], path, mode_flags, compression_mode) }
func (gdClass File) Open(path string, flags FileModeFlags) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[3], path, flags) }
func (gdClass File) Flush()  { gdnative.Call(gdnative.Object(gdClass), methodFile[4]) }
func (gdClass File) Close()  { gdnative.Call(gdnative.Object(gdClass), methodFile[5]) }
func (gdClass File) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[6]) }
func (gdClass File) GetPathAbsolute() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[7]) }
func (gdClass File) IsOpen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[8]) }
func (gdClass File) Seek(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[9], position) }
func (gdClass File) SeekEnd(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[10], position) }
func (gdClass File) GetPosition() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[11]) }
func (gdClass File) GetLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[12]) }
func (gdClass File) EofReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[13]) }
func (gdClass File) Get8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[14]) }
func (gdClass File) Get16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[15]) }
func (gdClass File) Get32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[16]) }
func (gdClass File) Get64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[17]) }
func (gdClass File) GetFloat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[18]) }
func (gdClass File) GetDouble() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[19]) }
func (gdClass File) GetReal() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFile[20]) }
func (gdClass File) GetBuffer(length int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodFile[21], length) }
func (gdClass File) GetLine() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[22]) }
func (gdClass File) GetCsvLine(delim string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFile[23], delim) }
func (gdClass File) GetAsText(skip_cr bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[24], skip_cr) }
func (gdClass File) GetMd5(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[25], path) }
func (gdClass File) GetSha256(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[26], path) }
func (gdClass File) IsBigEndian() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[27]) }
func (gdClass File) SetBigEndian(big_endian bool)  { gdnative.Call(gdnative.Object(gdClass), methodFile[28], big_endian) }
func (gdClass File) GetError() error { return gdnative.Return[error](gdnative.Object(gdClass), methodFile[29]) }
func (gdClass File) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodFile[30], allow_objects) }
func (gdClass File) Store8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[31], value) }
func (gdClass File) Store16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[32], value) }
func (gdClass File) Store32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[33], value) }
func (gdClass File) Store64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[34], value) }
func (gdClass File) StoreFloat(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[35], value) }
func (gdClass File) StoreDouble(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[36], value) }
func (gdClass File) StoreReal(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodFile[37], value) }
func (gdClass File) StoreBuffer(buffer []byte)  { gdnative.Call(gdnative.Object(gdClass), methodFile[38], buffer) }
func (gdClass File) StoreLine(line string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[39], line) }
func (gdClass File) StoreCsvLine(values []string, delim string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[40], values, delim) }
func (gdClass File) StoreString(s string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[41], s) }
func (gdClass File) StoreVar(value any, full_objects bool)  { gdnative.Call(gdnative.Object(gdClass), methodFile[42], value, full_objects) }
func (gdClass File) StorePascalString(s string)  { gdnative.Call(gdnative.Object(gdClass), methodFile[43], s) }
func (gdClass File) GetPascalString() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFile[44]) }
func (gdClass File) FileExists(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFile[45], path) }
func (gdClass File) GetModifiedTime(file string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFile[46], file) }

type FileDialogFileMode int64

const (
	FileDialogFileModeOpenFile FileDialogFileMode = 0
	FileDialogFileModeOpenFiles FileDialogFileMode = 1
	FileDialogFileModeOpenDir FileDialogFileMode = 2
	FileDialogFileModeOpenAny FileDialogFileMode = 3
	FileDialogFileModeSaveFile FileDialogFileMode = 4
)

type FileDialogAccess int64

const (
	FileDialogAccessResources FileDialogAccess = 0
	FileDialogAccessUserdata FileDialogAccess = 1
	FileDialogAccessFilesystem FileDialogAccess = 2
)

type FileDialog gdnative.Object
func (FileDialog) class() string { return "FileDialog\000" }

func (gdClass FileDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog(gdClass) }

var methodFileDialog [24]gdnative.Method
func (gdClass FileDialog) ClearFilters()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[0]) }
func (gdClass FileDialog) AddFilter(filter string, description string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[1], filter, description) }
func (gdClass FileDialog) SetFilters(filters []string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[2], filters) }
func (gdClass FileDialog) GetFilters() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFileDialog[3]) }
func (gdClass FileDialog) GetCurrentDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[4]) }
func (gdClass FileDialog) GetCurrentFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[5]) }
func (gdClass FileDialog) GetCurrentPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[6]) }
func (gdClass FileDialog) SetCurrentDir(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[7], dir) }
func (gdClass FileDialog) SetCurrentFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[8], file) }
func (gdClass FileDialog) SetCurrentPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[9], path) }
func (gdClass FileDialog) SetModeOverridesTitle(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[10], override) }
func (gdClass FileDialog) IsModeOverridingTitle() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFileDialog[11]) }
func (gdClass FileDialog) SetFileMode(mode FileDialogFileMode)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[12], mode) }
func (gdClass FileDialog) GetFileMode() FileDialogFileMode { return gdnative.Return[FileDialogFileMode](gdnative.Object(gdClass), methodFileDialog[13]) }
func (gdClass FileDialog) GetVbox() VBoxContainer { return gdnative.Return[VBoxContainer](gdnative.Object(gdClass), methodFileDialog[14]) }
func (gdClass FileDialog) GetLineEdit() LineEdit { return gdnative.Return[LineEdit](gdnative.Object(gdClass), methodFileDialog[15]) }
func (gdClass FileDialog) SetAccess(access FileDialogAccess)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[16], access) }
func (gdClass FileDialog) GetAccess() FileDialogAccess { return gdnative.Return[FileDialogAccess](gdnative.Object(gdClass), methodFileDialog[17]) }
func (gdClass FileDialog) SetRootSubfolder(dir string)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[18], dir) }
func (gdClass FileDialog) GetRootSubfolder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFileDialog[19]) }
func (gdClass FileDialog) SetShowHiddenFiles(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[20], show) }
func (gdClass FileDialog) IsShowingHiddenFiles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFileDialog[21]) }
func (gdClass FileDialog) DeselectAll()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[22]) }
func (gdClass FileDialog) Invalidate()  { gdnative.Call(gdnative.Object(gdClass), methodFileDialog[23]) }

type FileSystemDock gdnative.Object
func (FileSystemDock) class() string { return "FileSystemDock\000" }

func (gdClass FileSystemDock) VBoxContainer() VBoxContainer { return VBoxContainer(gdClass) }

var methodFileSystemDock [1]gdnative.Method
func (gdClass FileSystemDock) NavigateToPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodFileSystemDock[0], path) }

type FlowContainer gdnative.Object
func (FlowContainer) class() string { return "FlowContainer\000" }

func (gdClass FlowContainer) Container() Container { return Container(gdClass) }

var methodFlowContainer [1]gdnative.Method
func (gdClass FlowContainer) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFlowContainer[0]) }

type FogMaterial gdnative.Object
func (FogMaterial) class() string { return "FogMaterial\000" }

func (gdClass FogMaterial) Material() Material { return Material(gdClass) }

var methodFogMaterial [12]gdnative.Method
func (gdClass FogMaterial) SetDensity(density float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[0], density) }
func (gdClass FogMaterial) GetDensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[1]) }
func (gdClass FogMaterial) SetAlbedo(albedo Color)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[2], albedo) }
func (gdClass FogMaterial) GetAlbedo() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodFogMaterial[3]) }
func (gdClass FogMaterial) SetEmission(emission Color)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[4], emission) }
func (gdClass FogMaterial) GetEmission() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodFogMaterial[5]) }
func (gdClass FogMaterial) SetHeightFalloff(height_falloff float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[6], height_falloff) }
func (gdClass FogMaterial) GetHeightFalloff() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[7]) }
func (gdClass FogMaterial) SetEdgeFade(edge_fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[8], edge_fade) }
func (gdClass FogMaterial) GetEdgeFade() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFogMaterial[9]) }
func (gdClass FogMaterial) SetDensityTexture(density_texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodFogMaterial[10], density_texture) }
func (gdClass FogMaterial) GetDensityTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodFogMaterial[11]) }

type FogVolume gdnative.Object
func (FogVolume) class() string { return "FogVolume\000" }

func (gdClass FogVolume) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodFogVolume [6]gdnative.Method
func (gdClass FogVolume) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[0], extents) }
func (gdClass FogVolume) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodFogVolume[1]) }
func (gdClass FogVolume) SetShape(shape RenderingServerFogVolumeShape)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[2], shape) }
func (gdClass FogVolume) GetShape() RenderingServerFogVolumeShape { return gdnative.Return[RenderingServerFogVolumeShape](gdnative.Object(gdClass), methodFogVolume[3]) }
func (gdClass FogVolume) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodFogVolume[4], material) }
func (gdClass FogVolume) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodFogVolume[5]) }

type Font gdnative.Object
func (Font) class() string { return "Font\000" }

func (gdClass Font) Resource() Resource { return Resource(gdClass) }

var methodFont [31]gdnative.Method
func (gdClass Font) SetFallbacks(fallbacks Array)  { gdnative.Call(gdnative.Object(gdClass), methodFont[0], fallbacks) }
func (gdClass Font) GetFallbacks() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFont[1]) }
func (gdClass Font) FindVariation(variation_coordinates Dictionary, face_index int64, strength float64, transform Transform2D) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodFont[2], variation_coordinates, face_index, strength, transform) }
func (gdClass Font) GetRids() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFont[3]) }
func (gdClass Font) GetHeight(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[4], font_size) }
func (gdClass Font) GetAscent(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[5], font_size) }
func (gdClass Font) GetDescent(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[6], font_size) }
func (gdClass Font) GetUnderlinePosition(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[7], font_size) }
func (gdClass Font) GetUnderlineThickness(font_size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[8], font_size) }
func (gdClass Font) GetFontName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[9]) }
func (gdClass Font) GetFontStyleName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[10]) }
func (gdClass Font) GetFontStyle() TextServerFontStyle { return gdnative.Return[TextServerFontStyle](gdnative.Object(gdClass), methodFont[11]) }
func (gdClass Font) GetSpacing(spacing TextServerSpacingType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFont[12], spacing) }
func (gdClass Font) GetOpentypeFeatures() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[13]) }
func (gdClass Font) SetCacheCapacity(single_line int64, multi_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodFont[14], single_line, multi_line) }
func (gdClass Font) GetStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[15], text, alignment, width, font_size, jst_flags, direction, orientation) }
func (gdClass Font) GetMultilineStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[16], text, alignment, width, font_size, max_lines, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) DrawString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[17], canvas_item, pos, text, alignment, width, font_size, modulate, jst_flags, direction, orientation) }
func (gdClass Font) DrawMultilineString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[18], canvas_item, pos, text, alignment, width, font_size, max_lines, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) DrawStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[19], canvas_item, pos, text, alignment, width, font_size, size, modulate, jst_flags, direction, orientation) }
func (gdClass Font) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodFont[20], canvas_item, pos, text, alignment, width, font_size, max_lines, size, modulate, brk_flags, jst_flags, direction, orientation) }
func (gdClass Font) GetCharSize(char int64, font_size int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFont[21], char, font_size) }
func (gdClass Font) DrawChar(canvas_item RID, pos Vector2, char int64, font_size int64, modulate Color) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[22], canvas_item, pos, char, font_size, modulate) }
func (gdClass Font) DrawCharOutline(canvas_item RID, pos Vector2, char int64, font_size int64, size int64, modulate Color) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFont[23], canvas_item, pos, char, font_size, size, modulate) }
func (gdClass Font) HasChar(char int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[24], char) }
func (gdClass Font) GetSupportedChars() string { return gdnative.Return[string](gdnative.Object(gdClass), methodFont[25]) }
func (gdClass Font) IsLanguageSupported(language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[26], language) }
func (gdClass Font) IsScriptSupported(script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFont[27], script) }
func (gdClass Font) GetSupportedFeatureList() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[28]) }
func (gdClass Font) GetSupportedVariationList() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFont[29]) }
func (gdClass Font) GetFaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFont[30]) }

type FontFile gdnative.Object
func (FontFile) class() string { return "FontFile\000" }

func (gdClass FontFile) Font() Font { return Font(gdClass) }

var methodFontFile [89]gdnative.Method
func (gdClass FontFile) LoadBitmapFont(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFontFile[0], path) }
func (gdClass FontFile) LoadDynamicFont(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodFontFile[1], path) }
func (gdClass FontFile) SetData(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[2], data) }
func (gdClass FontFile) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodFontFile[3]) }
func (gdClass FontFile) SetFontName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[4], name) }
func (gdClass FontFile) SetFontStyleName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[5], name) }
func (gdClass FontFile) SetFontStyle(style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[6], style) }
func (gdClass FontFile) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[7], antialiased) }
func (gdClass FontFile) IsAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[8]) }
func (gdClass FontFile) SetGenerateMipmaps(generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[9], generate_mipmaps) }
func (gdClass FontFile) GetGenerateMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[10]) }
func (gdClass FontFile) SetMultichannelSignedDistanceField(msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[11], msdf) }
func (gdClass FontFile) IsMultichannelSignedDistanceField() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[12]) }
func (gdClass FontFile) SetMsdfPixelRange(msdf_pixel_range int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[13], msdf_pixel_range) }
func (gdClass FontFile) GetMsdfPixelRange() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[14]) }
func (gdClass FontFile) SetMsdfSize(msdf_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[15], msdf_size) }
func (gdClass FontFile) GetMsdfSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[16]) }
func (gdClass FontFile) SetFixedSize(fixed_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[17], fixed_size) }
func (gdClass FontFile) GetFixedSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[18]) }
func (gdClass FontFile) SetForceAutohinter(force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[19], force_autohinter) }
func (gdClass FontFile) IsForceAutohinter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[20]) }
func (gdClass FontFile) SetHinting(hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[21], hinting) }
func (gdClass FontFile) GetHinting() TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodFontFile[22]) }
func (gdClass FontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[23], subpixel_positioning) }
func (gdClass FontFile) GetSubpixelPositioning() TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodFontFile[24]) }
func (gdClass FontFile) SetOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[25], oversampling) }
func (gdClass FontFile) GetOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[26]) }
func (gdClass FontFile) GetCacheCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[27]) }
func (gdClass FontFile) ClearCache()  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[28]) }
func (gdClass FontFile) RemoveCache(cache_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[29], cache_index) }
func (gdClass FontFile) GetSizeCacheList(cache_index int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[30], cache_index) }
func (gdClass FontFile) ClearSizeCache(cache_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[31], cache_index) }
func (gdClass FontFile) RemoveSizeCache(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[32], cache_index, size) }
func (gdClass FontFile) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[33], cache_index, variation_coordinates) }
func (gdClass FontFile) GetVariationCoordinates(cache_index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontFile[34], cache_index) }
func (gdClass FontFile) SetEmbolden(cache_index int64, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[35], cache_index, strength) }
func (gdClass FontFile) GetEmbolden(cache_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[36], cache_index) }
func (gdClass FontFile) SetTransform(cache_index int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[37], cache_index, transform) }
func (gdClass FontFile) GetTransform(cache_index int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodFontFile[38], cache_index) }
func (gdClass FontFile) SetFaceIndex(cache_index int64, face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[39], cache_index, face_index) }
func (gdClass FontFile) GetFaceIndex(cache_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[40], cache_index) }
func (gdClass FontFile) SetCacheAscent(cache_index int64, size int64, ascent float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[41], cache_index, size, ascent) }
func (gdClass FontFile) GetCacheAscent(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[42], cache_index, size) }
func (gdClass FontFile) SetCacheDescent(cache_index int64, size int64, descent float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[43], cache_index, size, descent) }
func (gdClass FontFile) GetCacheDescent(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[44], cache_index, size) }
func (gdClass FontFile) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[45], cache_index, size, underline_position) }
func (gdClass FontFile) GetCacheUnderlinePosition(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[46], cache_index, size) }
func (gdClass FontFile) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[47], cache_index, size, underline_thickness) }
func (gdClass FontFile) GetCacheUnderlineThickness(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[48], cache_index, size) }
func (gdClass FontFile) SetCacheScale(cache_index int64, size int64, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[49], cache_index, size, scale) }
func (gdClass FontFile) GetCacheScale(cache_index int64, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontFile[50], cache_index, size) }
func (gdClass FontFile) GetTextureCount(cache_index int64, size Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[51], cache_index, size) }
func (gdClass FontFile) ClearTextures(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[52], cache_index, size) }
func (gdClass FontFile) RemoveTexture(cache_index int64, size Vector2i, texture_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[53], cache_index, size, texture_index) }
func (gdClass FontFile) SetTextureImage(cache_index int64, size Vector2i, texture_index int64, image Image)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[54], cache_index, size, texture_index, image) }
func (gdClass FontFile) GetTextureImage(cache_index int64, size Vector2i, texture_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodFontFile[55], cache_index, size, texture_index) }
func (gdClass FontFile) SetTextureOffsets(cache_index int64, size Vector2i, texture_index int64, offset []int32)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[56], cache_index, size, texture_index, offset) }
func (gdClass FontFile) GetTextureOffsets(cache_index int64, size Vector2i, texture_index int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodFontFile[57], cache_index, size, texture_index) }
func (gdClass FontFile) GetGlyphList(cache_index int64, size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[58], cache_index, size) }
func (gdClass FontFile) ClearGlyphs(cache_index int64, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[59], cache_index, size) }
func (gdClass FontFile) RemoveGlyph(cache_index int64, size Vector2i, glyph int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[60], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[61], cache_index, size, glyph, advance) }
func (gdClass FontFile) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[62], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphOffset(cache_index int64, size Vector2i, glyph int64, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[63], cache_index, size, glyph, offset) }
func (gdClass FontFile) GetGlyphOffset(cache_index int64, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[64], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphSize(cache_index int64, size Vector2i, glyph int64, gl_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[65], cache_index, size, glyph, gl_size) }
func (gdClass FontFile) GetGlyphSize(cache_index int64, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[66], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphUvRect(cache_index int64, size Vector2i, glyph int64, uv_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[67], cache_index, size, glyph, uv_rect) }
func (gdClass FontFile) GetGlyphUvRect(cache_index int64, size Vector2i, glyph int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodFontFile[68], cache_index, size, glyph) }
func (gdClass FontFile) SetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64, texture_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[69], cache_index, size, glyph, texture_idx) }
func (gdClass FontFile) GetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[70], cache_index, size, glyph) }
func (gdClass FontFile) GetKerningList(cache_index int64, size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodFontFile[71], cache_index, size) }
func (gdClass FontFile) ClearKerningMap(cache_index int64, size int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[72], cache_index, size) }
func (gdClass FontFile) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[73], cache_index, size, glyph_pair) }
func (gdClass FontFile) SetKerning(cache_index int64, size int64, glyph_pair Vector2i, kerning Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[74], cache_index, size, glyph_pair, kerning) }
func (gdClass FontFile) GetKerning(cache_index int64, size int64, glyph_pair Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodFontFile[75], cache_index, size, glyph_pair) }
func (gdClass FontFile) RenderRange(cache_index int64, size Vector2i, start int64, end int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[76], cache_index, size, start, end) }
func (gdClass FontFile) RenderGlyph(cache_index int64, size Vector2i, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[77], cache_index, size, index) }
func (gdClass FontFile) SetLanguageSupportOverride(language string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[78], language, supported) }
func (gdClass FontFile) GetLanguageSupportOverride(language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[79], language) }
func (gdClass FontFile) RemoveLanguageSupportOverride(language string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[80], language) }
func (gdClass FontFile) GetLanguageSupportOverrides() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFontFile[81]) }
func (gdClass FontFile) SetScriptSupportOverride(script string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[82], script, supported) }
func (gdClass FontFile) GetScriptSupportOverride(script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodFontFile[83], script) }
func (gdClass FontFile) RemoveScriptSupportOverride(script string)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[84], script) }
func (gdClass FontFile) GetScriptSupportOverrides() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodFontFile[85]) }
func (gdClass FontFile) SetOpentypeFeatureOverrides(overrides Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontFile[86], overrides) }
func (gdClass FontFile) GetOpentypeFeatureOverrides() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontFile[87]) }
func (gdClass FontFile) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontFile[88], size, char, variation_selector) }

type FontVariation gdnative.Object
func (FontVariation) class() string { return "FontVariation\000" }

func (gdClass FontVariation) Font() Font { return Font(gdClass) }

var methodFontVariation [12]gdnative.Method
func (gdClass FontVariation) SetBaseFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[0], font) }
func (gdClass FontVariation) GetBaseFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodFontVariation[1]) }
func (gdClass FontVariation) SetVariationOpentype(coords Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[2], coords) }
func (gdClass FontVariation) GetVariationOpentype() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodFontVariation[3]) }
func (gdClass FontVariation) SetVariationEmbolden(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[4], strength) }
func (gdClass FontVariation) GetVariationEmbolden() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodFontVariation[5]) }
func (gdClass FontVariation) SetVariationFaceIndex(face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[6], face_index) }
func (gdClass FontVariation) GetVariationFaceIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodFontVariation[7]) }
func (gdClass FontVariation) SetVariationTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[8], transform) }
func (gdClass FontVariation) GetVariationTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodFontVariation[9]) }
func (gdClass FontVariation) SetOpentypeFeatures(features Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[10], features) }
func (gdClass FontVariation) SetSpacing(spacing TextServerSpacingType, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodFontVariation[11], spacing, value) }

type FramebufferCacheRD gdnative.Object
func (FramebufferCacheRD) class() string { return "FramebufferCacheRD\000" }

func (gdClass FramebufferCacheRD) Object() Object { return Object(gdClass) }


type GDScript gdnative.Object
func (GDScript) class() string { return "GDScript\000" }

func (gdClass GDScript) Script() Script { return Script(gdClass) }

var methodGDScript [2]gdnative.Method
func (gdClass GDScript) New() any { return gdnative.Return[any](gdnative.Object(gdClass), methodGDScript[0]) }
func (gdClass GDScript) GetAsByteCode() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGDScript[1]) }

type GDScriptEditorTranslationParserPlugin gdnative.Object
func (GDScriptEditorTranslationParserPlugin) class() string { return "GDScriptEditorTranslationParserPlugin\000" }

func (gdClass GDScriptEditorTranslationParserPlugin) EditorTranslationParserPlugin() EditorTranslationParserPlugin { return EditorTranslationParserPlugin(gdClass) }


type GDScriptNativeClass gdnative.Object
func (GDScriptNativeClass) class() string { return "GDScriptNativeClass\000" }

func (gdClass GDScriptNativeClass) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodGDScriptNativeClass [1]gdnative.Method
func (gdClass GDScriptNativeClass) New() any { return gdnative.Return[any](gdnative.Object(gdClass), methodGDScriptNativeClass[0]) }

type GLTFAccessor gdnative.Object
func (GLTFAccessor) class() string { return "GLTFAccessor\000" }

func (gdClass GLTFAccessor) Resource() Resource { return Resource(gdClass) }

var methodGLTFAccessor [28]gdnative.Method
func (gdClass GLTFAccessor) GetBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[0]) }
func (gdClass GLTFAccessor) SetBufferView(buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[1], buffer_view) }
func (gdClass GLTFAccessor) GetByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[2]) }
func (gdClass GLTFAccessor) SetByteOffset(byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[3], byte_offset) }
func (gdClass GLTFAccessor) GetComponentType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[4]) }
func (gdClass GLTFAccessor) SetComponentType(component_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[5], component_type) }
func (gdClass GLTFAccessor) GetNormalized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFAccessor[6]) }
func (gdClass GLTFAccessor) SetNormalized(normalized bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[7], normalized) }
func (gdClass GLTFAccessor) GetCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[8]) }
func (gdClass GLTFAccessor) SetCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[9], count) }
func (gdClass GLTFAccessor) GetType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[10]) }
func (gdClass GLTFAccessor) SetType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[11], atype) }
func (gdClass GLTFAccessor) GetMin() []float64 { return gdnative.Return[[]float64](gdnative.Object(gdClass), methodGLTFAccessor[12]) }
func (gdClass GLTFAccessor) SetMin(min []float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[13], min) }
func (gdClass GLTFAccessor) GetMax() []float64 { return gdnative.Return[[]float64](gdnative.Object(gdClass), methodGLTFAccessor[14]) }
func (gdClass GLTFAccessor) SetMax(max []float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[15], max) }
func (gdClass GLTFAccessor) GetSparseCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[16]) }
func (gdClass GLTFAccessor) SetSparseCount(sparse_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[17], sparse_count) }
func (gdClass GLTFAccessor) GetSparseIndicesBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[18]) }
func (gdClass GLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[19], sparse_indices_buffer_view) }
func (gdClass GLTFAccessor) GetSparseIndicesByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[20]) }
func (gdClass GLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[21], sparse_indices_byte_offset) }
func (gdClass GLTFAccessor) GetSparseIndicesComponentType() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[22]) }
func (gdClass GLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[23], sparse_indices_component_type) }
func (gdClass GLTFAccessor) GetSparseValuesBufferView() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[24]) }
func (gdClass GLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[25], sparse_values_buffer_view) }
func (gdClass GLTFAccessor) GetSparseValuesByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFAccessor[26]) }
func (gdClass GLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAccessor[27], sparse_values_byte_offset) }

type GLTFAnimation gdnative.Object
func (GLTFAnimation) class() string { return "GLTFAnimation\000" }

func (gdClass GLTFAnimation) Resource() Resource { return Resource(gdClass) }

var methodGLTFAnimation [2]gdnative.Method
func (gdClass GLTFAnimation) GetLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFAnimation[0]) }
func (gdClass GLTFAnimation) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFAnimation[1], loop) }

type GLTFBufferView gdnative.Object
func (GLTFBufferView) class() string { return "GLTFBufferView\000" }

func (gdClass GLTFBufferView) Resource() Resource { return Resource(gdClass) }

var methodGLTFBufferView [10]gdnative.Method
func (gdClass GLTFBufferView) GetBuffer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[0]) }
func (gdClass GLTFBufferView) SetBuffer(buffer int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[1], buffer) }
func (gdClass GLTFBufferView) GetByteOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[2]) }
func (gdClass GLTFBufferView) SetByteOffset(byte_offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[3], byte_offset) }
func (gdClass GLTFBufferView) GetByteLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[4]) }
func (gdClass GLTFBufferView) SetByteLength(byte_length int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[5], byte_length) }
func (gdClass GLTFBufferView) GetByteStride() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFBufferView[6]) }
func (gdClass GLTFBufferView) SetByteStride(byte_stride int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[7], byte_stride) }
func (gdClass GLTFBufferView) GetIndices() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFBufferView[8]) }
func (gdClass GLTFBufferView) SetIndices(indices bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFBufferView[9], indices) }

type GLTFCamera gdnative.Object
func (GLTFCamera) class() string { return "GLTFCamera\000" }

func (gdClass GLTFCamera) Resource() Resource { return Resource(gdClass) }

var methodGLTFCamera [8]gdnative.Method
func (gdClass GLTFCamera) GetPerspective() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFCamera[0]) }
func (gdClass GLTFCamera) SetPerspective(perspective bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[1], perspective) }
func (gdClass GLTFCamera) GetFovSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[2]) }
func (gdClass GLTFCamera) SetFovSize(fov_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[3], fov_size) }
func (gdClass GLTFCamera) GetDepthFar() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[4]) }
func (gdClass GLTFCamera) SetDepthFar(zdepth_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[5], zdepth_far) }
func (gdClass GLTFCamera) GetDepthNear() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFCamera[6]) }
func (gdClass GLTFCamera) SetDepthNear(zdepth_near float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFCamera[7], zdepth_near) }

type GLTFDocument gdnative.Object
func (GLTFDocument) class() string { return "GLTFDocument\000" }

func (gdClass GLTFDocument) Resource() Resource { return Resource(gdClass) }

var methodGLTFDocument [8]gdnative.Method
func (gdClass GLTFDocument) AppendFromFile(path string, state GLTFState, flags int64, bake_fps int64, base_path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[0], path, state, flags, bake_fps, base_path) }
func (gdClass GLTFDocument) AppendFromBuffer(bytes []byte, base_path string, state GLTFState, flags int64, bake_fps int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[1], bytes, base_path, state, flags, bake_fps) }
func (gdClass GLTFDocument) AppendFromScene(node Node, state GLTFState, flags int64, bake_fps int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[2], node, state, flags, bake_fps) }
func (gdClass GLTFDocument) GenerateScene(state GLTFState, bake_fps int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodGLTFDocument[3], state, bake_fps) }
func (gdClass GLTFDocument) GenerateBuffer(state GLTFState) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGLTFDocument[4], state) }
func (gdClass GLTFDocument) WriteToFilesystem(state GLTFState, path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGLTFDocument[5], state, path) }
func (gdClass GLTFDocument) SetExtensions(extensions Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFDocument[6], extensions) }
func (gdClass GLTFDocument) GetExtensions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFDocument[7]) }

type GLTFDocumentExtension gdnative.Object
func (GLTFDocumentExtension) class() string { return "GLTFDocumentExtension\000" }

func (gdClass GLTFDocumentExtension) Resource() Resource { return Resource(gdClass) }

func (gdClass GLTFDocumentExtension) virtual(val any, name string) any {	switch name {
	case "_import_preflight":
		i, ok := val.(interface{ ImportPreflight(state GLTFState) int64 })
		if ok {
			return i.ImportPreflight
		}
	case "_import_post_parse":
		i, ok := val.(interface{ ImportPostParse(state GLTFState) int64 })
		if ok {
			return i.ImportPostParse
		}
	case "_import_node":
		i, ok := val.(interface{ ImportNode(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 })
		if ok {
			return i.ImportNode
		}
	case "_import_post":
		i, ok := val.(interface{ ImportPost(state GLTFState, root Node) int64 })
		if ok {
			return i.ImportPost
		}
	case "_export_preflight":
		i, ok := val.(interface{ ExportPreflight(root Node) int64 })
		if ok {
			return i.ExportPreflight
		}
	case "_export_node":
		i, ok := val.(interface{ ExportNode(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 })
		if ok {
			return i.ExportNode
		}
	case "_export_post":
		i, ok := val.(interface{ ExportPost(state GLTFState) int64 })
		if ok {
			return i.ExportPost
		}
	}
	return nil
}

type GLTFDocumentExtensionConvertImporterMesh gdnative.Object
func (GLTFDocumentExtensionConvertImporterMesh) class() string { return "GLTFDocumentExtensionConvertImporterMesh\000" }

func (gdClass GLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtension() GLTFDocumentExtension { return GLTFDocumentExtension(gdClass) }


type GLTFLight gdnative.Object
func (GLTFLight) class() string { return "GLTFLight\000" }

func (gdClass GLTFLight) Resource() Resource { return Resource(gdClass) }

var methodGLTFLight [12]gdnative.Method
func (gdClass GLTFLight) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFLight[0]) }
func (gdClass GLTFLight) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[1], color) }
func (gdClass GLTFLight) GetIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[2]) }
func (gdClass GLTFLight) SetIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[3], intensity) }
func (gdClass GLTFLight) GetLightType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFLight[4]) }
func (gdClass GLTFLight) SetLightType(light_type string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[5], light_type) }
func (gdClass GLTFLight) GetRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[6]) }
func (gdClass GLTFLight) SetRange(arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[7], arange) }
func (gdClass GLTFLight) GetInnerConeAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[8]) }
func (gdClass GLTFLight) SetInnerConeAngle(inner_cone_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[9], inner_cone_angle) }
func (gdClass GLTFLight) GetOuterConeAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFLight[10]) }
func (gdClass GLTFLight) SetOuterConeAngle(outer_cone_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFLight[11], outer_cone_angle) }

type GLTFMesh gdnative.Object
func (GLTFMesh) class() string { return "GLTFMesh\000" }

func (gdClass GLTFMesh) Resource() Resource { return Resource(gdClass) }

var methodGLTFMesh [6]gdnative.Method
func (gdClass GLTFMesh) GetMesh() ImporterMesh { return gdnative.Return[ImporterMesh](gdnative.Object(gdClass), methodGLTFMesh[0]) }
func (gdClass GLTFMesh) SetMesh(mesh ImporterMesh)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[1], mesh) }
func (gdClass GLTFMesh) GetBlendWeights() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodGLTFMesh[2]) }
func (gdClass GLTFMesh) SetBlendWeights(blend_weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[3], blend_weights) }
func (gdClass GLTFMesh) GetInstanceMaterials() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFMesh[4]) }
func (gdClass GLTFMesh) SetInstanceMaterials(instance_materials Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFMesh[5], instance_materials) }

type GLTFNode gdnative.Object
func (GLTFNode) class() string { return "GLTFNode\000" }

func (gdClass GLTFNode) Resource() Resource { return Resource(gdClass) }

var methodGLTFNode [26]gdnative.Method
func (gdClass GLTFNode) GetParent() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[0]) }
func (gdClass GLTFNode) SetParent(parent int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[1], parent) }
func (gdClass GLTFNode) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[2]) }
func (gdClass GLTFNode) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[3], height) }
func (gdClass GLTFNode) GetXform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodGLTFNode[4]) }
func (gdClass GLTFNode) SetXform(xform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[5], xform) }
func (gdClass GLTFNode) GetMesh() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[6]) }
func (gdClass GLTFNode) SetMesh(mesh int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[7], mesh) }
func (gdClass GLTFNode) GetCamera() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[8]) }
func (gdClass GLTFNode) SetCamera(camera int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[9], camera) }
func (gdClass GLTFNode) GetSkin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[10]) }
func (gdClass GLTFNode) SetSkin(skin int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[11], skin) }
func (gdClass GLTFNode) GetSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[12]) }
func (gdClass GLTFNode) SetSkeleton(skeleton int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[13], skeleton) }
func (gdClass GLTFNode) GetJoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFNode[14]) }
func (gdClass GLTFNode) SetJoint(joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[15], joint) }
func (gdClass GLTFNode) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGLTFNode[16]) }
func (gdClass GLTFNode) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[17], position) }
func (gdClass GLTFNode) GetRotation() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodGLTFNode[18]) }
func (gdClass GLTFNode) SetRotation(rotation Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[19], rotation) }
func (gdClass GLTFNode) GetScale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGLTFNode[20]) }
func (gdClass GLTFNode) SetScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[21], scale) }
func (gdClass GLTFNode) GetChildren() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFNode[22]) }
func (gdClass GLTFNode) SetChildren(children []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[23], children) }
func (gdClass GLTFNode) GetLight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFNode[24]) }
func (gdClass GLTFNode) SetLight(light int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFNode[25], light) }

type GLTFSkeleton gdnative.Object
func (GLTFSkeleton) class() string { return "GLTFSkeleton\000" }

func (gdClass GLTFSkeleton) Resource() Resource { return Resource(gdClass) }

var methodGLTFSkeleton [11]gdnative.Method
func (gdClass GLTFSkeleton) GetJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkeleton[0]) }
func (gdClass GLTFSkeleton) SetJoints(joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[1], joints) }
func (gdClass GLTFSkeleton) GetRoots() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkeleton[2]) }
func (gdClass GLTFSkeleton) SetRoots(roots []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[3], roots) }
func (gdClass GLTFSkeleton) GetGodotSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodGLTFSkeleton[4]) }
func (gdClass GLTFSkeleton) GetUniqueNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFSkeleton[5]) }
func (gdClass GLTFSkeleton) SetUniqueNames(unique_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[6], unique_names) }
func (gdClass GLTFSkeleton) GetGodotBoneNode() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkeleton[7]) }
func (gdClass GLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkeleton[8], godot_bone_node) }
func (gdClass GLTFSkeleton) GetBoneAttachmentCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkeleton[9]) }
func (gdClass GLTFSkeleton) GetBoneAttachment(idx int64) BoneAttachment3D { return gdnative.Return[BoneAttachment3D](gdnative.Object(gdClass), methodGLTFSkeleton[10], idx) }

type GLTFSkin gdnative.Object
func (GLTFSkin) class() string { return "GLTFSkin\000" }

func (gdClass GLTFSkin) Resource() Resource { return Resource(gdClass) }

var methodGLTFSkin [20]gdnative.Method
func (gdClass GLTFSkin) GetSkinRoot() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkin[0]) }
func (gdClass GLTFSkin) SetSkinRoot(skin_root int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[1], skin_root) }
func (gdClass GLTFSkin) GetJointsOriginal() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[2]) }
func (gdClass GLTFSkin) SetJointsOriginal(joints_original []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[3], joints_original) }
func (gdClass GLTFSkin) GetInverseBinds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFSkin[4]) }
func (gdClass GLTFSkin) SetInverseBinds(inverse_binds Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[5], inverse_binds) }
func (gdClass GLTFSkin) GetJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[6]) }
func (gdClass GLTFSkin) SetJoints(joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[7], joints) }
func (gdClass GLTFSkin) GetNonJoints() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[8]) }
func (gdClass GLTFSkin) SetNonJoints(non_joints []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[9], non_joints) }
func (gdClass GLTFSkin) GetRoots() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGLTFSkin[10]) }
func (gdClass GLTFSkin) SetRoots(roots []int32)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[11], roots) }
func (gdClass GLTFSkin) GetSkeleton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFSkin[12]) }
func (gdClass GLTFSkin) SetSkeleton(skeleton int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[13], skeleton) }
func (gdClass GLTFSkin) GetJointIToBoneI() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkin[14]) }
func (gdClass GLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[15], joint_i_to_bone_i) }
func (gdClass GLTFSkin) GetJointIToName() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFSkin[16]) }
func (gdClass GLTFSkin) SetJointIToName(joint_i_to_name Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[17], joint_i_to_name) }
func (gdClass GLTFSkin) GetGodotSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodGLTFSkin[18]) }
func (gdClass GLTFSkin) SetGodotSkin(godot_skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSkin[19], godot_skin) }

type GLTFSpecGloss gdnative.Object
func (GLTFSpecGloss) class() string { return "GLTFSpecGloss\000" }

func (gdClass GLTFSpecGloss) Resource() Resource { return Resource(gdClass) }

var methodGLTFSpecGloss [10]gdnative.Method
func (gdClass GLTFSpecGloss) GetDiffuseImg() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodGLTFSpecGloss[0]) }
func (gdClass GLTFSpecGloss) SetDiffuseImg(diffuse_img Image)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[1], diffuse_img) }
func (gdClass GLTFSpecGloss) GetDiffuseFactor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFSpecGloss[2]) }
func (gdClass GLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[3], diffuse_factor) }
func (gdClass GLTFSpecGloss) GetGlossFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGLTFSpecGloss[4]) }
func (gdClass GLTFSpecGloss) SetGlossFactor(gloss_factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[5], gloss_factor) }
func (gdClass GLTFSpecGloss) GetSpecularFactor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGLTFSpecGloss[6]) }
func (gdClass GLTFSpecGloss) SetSpecularFactor(specular_factor Color)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[7], specular_factor) }
func (gdClass GLTFSpecGloss) GetSpecGlossImg() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodGLTFSpecGloss[8]) }
func (gdClass GLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFSpecGloss[9], spec_gloss_img) }

type GLTFState gdnative.Object
func (GLTFState) class() string { return "GLTFState\000" }

func (gdClass GLTFState) Resource() Resource { return Resource(gdClass) }

var methodGLTFState [53]gdnative.Method
func (gdClass GLTFState) GetJson() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFState[0]) }
func (gdClass GLTFState) SetJson(json Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[1], json) }
func (gdClass GLTFState) GetMajorVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[2]) }
func (gdClass GLTFState) SetMajorVersion(major_version int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[3], major_version) }
func (gdClass GLTFState) GetMinorVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[4]) }
func (gdClass GLTFState) SetMinorVersion(minor_version int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[5], minor_version) }
func (gdClass GLTFState) GetGlbData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodGLTFState[6]) }
func (gdClass GLTFState) SetGlbData(glb_data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[7], glb_data) }
func (gdClass GLTFState) GetUseNamedSkinBinds() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFState[8]) }
func (gdClass GLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[9], use_named_skin_binds) }
func (gdClass GLTFState) GetNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[10]) }
func (gdClass GLTFState) SetNodes(nodes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[11], nodes) }
func (gdClass GLTFState) GetBuffers() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[12]) }
func (gdClass GLTFState) SetBuffers(buffers Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[13], buffers) }
func (gdClass GLTFState) GetBufferViews() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[14]) }
func (gdClass GLTFState) SetBufferViews(buffer_views Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[15], buffer_views) }
func (gdClass GLTFState) GetAccessors() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[16]) }
func (gdClass GLTFState) SetAccessors(accessors Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[17], accessors) }
func (gdClass GLTFState) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[18]) }
func (gdClass GLTFState) SetMeshes(meshes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[19], meshes) }
func (gdClass GLTFState) GetAnimationPlayersCount(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFState[20], idx) }
func (gdClass GLTFState) GetAnimationPlayer(idx int64) AnimationPlayer { return gdnative.Return[AnimationPlayer](gdnative.Object(gdClass), methodGLTFState[21], idx) }
func (gdClass GLTFState) GetMaterials() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[22]) }
func (gdClass GLTFState) SetMaterials(materials Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[23], materials) }
func (gdClass GLTFState) GetSceneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFState[24]) }
func (gdClass GLTFState) SetSceneName(scene_name string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[25], scene_name) }
func (gdClass GLTFState) GetBasePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGLTFState[26]) }
func (gdClass GLTFState) SetBasePath(base_path string)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[27], base_path) }
func (gdClass GLTFState) GetRootNodes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[28]) }
func (gdClass GLTFState) SetRootNodes(root_nodes Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[29], root_nodes) }
func (gdClass GLTFState) GetTextures() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[30]) }
func (gdClass GLTFState) SetTextures(textures Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[31], textures) }
func (gdClass GLTFState) GetImages() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[32]) }
func (gdClass GLTFState) SetImages(images Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[33], images) }
func (gdClass GLTFState) GetSkins() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[34]) }
func (gdClass GLTFState) SetSkins(skins Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[35], skins) }
func (gdClass GLTFState) GetCameras() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[36]) }
func (gdClass GLTFState) SetCameras(cameras Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[37], cameras) }
func (gdClass GLTFState) GetLights() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[38]) }
func (gdClass GLTFState) SetLights(lights Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[39], lights) }
func (gdClass GLTFState) GetUniqueNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[40]) }
func (gdClass GLTFState) SetUniqueNames(unique_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[41], unique_names) }
func (gdClass GLTFState) GetUniqueAnimationNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[42]) }
func (gdClass GLTFState) SetUniqueAnimationNames(unique_animation_names Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[43], unique_animation_names) }
func (gdClass GLTFState) GetSkeletons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[44]) }
func (gdClass GLTFState) SetSkeletons(skeletons Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[45], skeletons) }
func (gdClass GLTFState) GetSkeletonToNode() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGLTFState[46]) }
func (gdClass GLTFState) SetSkeletonToNode(skeleton_to_node Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[47], skeleton_to_node) }
func (gdClass GLTFState) GetCreateAnimations() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGLTFState[48]) }
func (gdClass GLTFState) SetCreateAnimations(create_animations bool)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[49], create_animations) }
func (gdClass GLTFState) GetAnimations() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGLTFState[50]) }
func (gdClass GLTFState) SetAnimations(animations Array)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFState[51], animations) }
func (gdClass GLTFState) GetSceneNode(idx int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodGLTFState[52], idx) }

type GLTFTexture gdnative.Object
func (GLTFTexture) class() string { return "GLTFTexture\000" }

func (gdClass GLTFTexture) Resource() Resource { return Resource(gdClass) }

var methodGLTFTexture [2]gdnative.Method
func (gdClass GLTFTexture) GetSrcImage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGLTFTexture[0]) }
func (gdClass GLTFTexture) SetSrcImage(src_image int64)  { gdnative.Call(gdnative.Object(gdClass), methodGLTFTexture[1], src_image) }

type GPUParticles2DDrawOrder int64

const (
	GPUParticles2DDrawOrderIndex GPUParticles2DDrawOrder = 0
	GPUParticles2DDrawOrderLifetime GPUParticles2DDrawOrder = 1
	GPUParticles2DDrawOrderReverseLifetime GPUParticles2DDrawOrder = 2
)

type GPUParticles2DEmitFlags int64

const (
	GPUParticles2DEmitFlagPosition GPUParticles2DEmitFlags = 1
	GPUParticles2DEmitFlagRotationScale GPUParticles2DEmitFlags = 2
	GPUParticles2DEmitFlagVelocity GPUParticles2DEmitFlags = 4
	GPUParticles2DEmitFlagColor GPUParticles2DEmitFlags = 8
	GPUParticles2DEmitFlagCustom GPUParticles2DEmitFlags = 16
)

type GPUParticles2D gdnative.Object
func (GPUParticles2D) class() string { return "GPUParticles2D\000" }

func (gdClass GPUParticles2D) Node2D() Node2D { return Node2D(gdClass) }

var methodGPUParticles2D [47]gdnative.Method
func (gdClass GPUParticles2D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[0], emitting) }
func (gdClass GPUParticles2D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[1], amount) }
func (gdClass GPUParticles2D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[2], secs) }
func (gdClass GPUParticles2D) SetOneShot(secs bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[3], secs) }
func (gdClass GPUParticles2D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[4], secs) }
func (gdClass GPUParticles2D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[5], ratio) }
func (gdClass GPUParticles2D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[6], ratio) }
func (gdClass GPUParticles2D) SetVisibilityRect(visibility_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[7], visibility_rect) }
func (gdClass GPUParticles2D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[8], enable) }
func (gdClass GPUParticles2D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[9], fps) }
func (gdClass GPUParticles2D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[10], enable) }
func (gdClass GPUParticles2D) SetInterpolate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[11], enable) }
func (gdClass GPUParticles2D) SetProcessMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[12], material) }
func (gdClass GPUParticles2D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[13], scale) }
func (gdClass GPUParticles2D) SetCollisionBaseSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[14], size) }
func (gdClass GPUParticles2D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[15]) }
func (gdClass GPUParticles2D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[16]) }
func (gdClass GPUParticles2D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[17]) }
func (gdClass GPUParticles2D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[18]) }
func (gdClass GPUParticles2D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[19]) }
func (gdClass GPUParticles2D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[20]) }
func (gdClass GPUParticles2D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[21]) }
func (gdClass GPUParticles2D) GetVisibilityRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodGPUParticles2D[22]) }
func (gdClass GPUParticles2D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[23]) }
func (gdClass GPUParticles2D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[24]) }
func (gdClass GPUParticles2D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[25]) }
func (gdClass GPUParticles2D) GetInterpolate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[26]) }
func (gdClass GPUParticles2D) GetProcessMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGPUParticles2D[27]) }
func (gdClass GPUParticles2D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[28]) }
func (gdClass GPUParticles2D) GetCollisionBaseSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[29]) }
func (gdClass GPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[30], order) }
func (gdClass GPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder { return gdnative.Return[GPUParticles2DDrawOrder](gdnative.Object(gdClass), methodGPUParticles2D[31]) }
func (gdClass GPUParticles2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[32], texture) }
func (gdClass GPUParticles2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodGPUParticles2D[33]) }
func (gdClass GPUParticles2D) CaptureRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodGPUParticles2D[34]) }
func (gdClass GPUParticles2D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[35]) }
func (gdClass GPUParticles2D) SetSubEmitter(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[36], path) }
func (gdClass GPUParticles2D) GetSubEmitter() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodGPUParticles2D[37]) }
func (gdClass GPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[38], xform, velocity, color, custom, flags) }
func (gdClass GPUParticles2D) SetTrailEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[39], enabled) }
func (gdClass GPUParticles2D) SetTrailLength(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[40], secs) }
func (gdClass GPUParticles2D) IsTrailEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles2D[41]) }
func (gdClass GPUParticles2D) GetTrailLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles2D[42]) }
func (gdClass GPUParticles2D) SetTrailSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[43], sections) }
func (gdClass GPUParticles2D) GetTrailSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[44]) }
func (gdClass GPUParticles2D) SetTrailSectionSubdivisions(subdivisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles2D[45], subdivisions) }
func (gdClass GPUParticles2D) GetTrailSectionSubdivisions() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles2D[46]) }

type GPUParticles3DDrawOrder int64

const (
	GPUParticles3DDrawOrderIndex GPUParticles3DDrawOrder = 0
	GPUParticles3DDrawOrderLifetime GPUParticles3DDrawOrder = 1
	GPUParticles3DDrawOrderReverseLifetime GPUParticles3DDrawOrder = 2
	GPUParticles3DDrawOrderViewDepth GPUParticles3DDrawOrder = 3
)

type GPUParticles3DEmitFlags int64

const (
	GPUParticles3DEmitFlagPosition GPUParticles3DEmitFlags = 1
	GPUParticles3DEmitFlagRotationScale GPUParticles3DEmitFlags = 2
	GPUParticles3DEmitFlagVelocity GPUParticles3DEmitFlags = 4
	GPUParticles3DEmitFlagColor GPUParticles3DEmitFlags = 8
	GPUParticles3DEmitFlagCustom GPUParticles3DEmitFlags = 16
)

type GPUParticles3DTransformAlign int64

const (
	GPUParticles3DTransformAlignDisabled GPUParticles3DTransformAlign = 0
	GPUParticles3DTransformAlignZBillboard GPUParticles3DTransformAlign = 1
	GPUParticles3DTransformAlignYToVelocity GPUParticles3DTransformAlign = 2
	GPUParticles3DTransformAlignZBillboardYToVelocity GPUParticles3DTransformAlign = 3
)

type GPUParticles3D gdnative.Object
func (GPUParticles3D) class() string { return "GPUParticles3D\000" }

func (gdClass GPUParticles3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodGPUParticles3D [49]gdnative.Method
func (gdClass GPUParticles3D) SetEmitting(emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[0], emitting) }
func (gdClass GPUParticles3D) SetAmount(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[1], amount) }
func (gdClass GPUParticles3D) SetLifetime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[2], secs) }
func (gdClass GPUParticles3D) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[3], enable) }
func (gdClass GPUParticles3D) SetPreProcessTime(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[4], secs) }
func (gdClass GPUParticles3D) SetExplosivenessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[5], ratio) }
func (gdClass GPUParticles3D) SetRandomnessRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[6], ratio) }
func (gdClass GPUParticles3D) SetVisibilityAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[7], aabb) }
func (gdClass GPUParticles3D) SetUseLocalCoordinates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[8], enable) }
func (gdClass GPUParticles3D) SetFixedFps(fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[9], fps) }
func (gdClass GPUParticles3D) SetFractionalDelta(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[10], enable) }
func (gdClass GPUParticles3D) SetInterpolate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[11], enable) }
func (gdClass GPUParticles3D) SetProcessMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[12], material) }
func (gdClass GPUParticles3D) SetSpeedScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[13], scale) }
func (gdClass GPUParticles3D) SetCollisionBaseSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[14], size) }
func (gdClass GPUParticles3D) IsEmitting() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[15]) }
func (gdClass GPUParticles3D) GetAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[16]) }
func (gdClass GPUParticles3D) GetLifetime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[17]) }
func (gdClass GPUParticles3D) GetOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[18]) }
func (gdClass GPUParticles3D) GetPreProcessTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[19]) }
func (gdClass GPUParticles3D) GetExplosivenessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[20]) }
func (gdClass GPUParticles3D) GetRandomnessRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[21]) }
func (gdClass GPUParticles3D) GetVisibilityAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodGPUParticles3D[22]) }
func (gdClass GPUParticles3D) GetUseLocalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[23]) }
func (gdClass GPUParticles3D) GetFixedFps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[24]) }
func (gdClass GPUParticles3D) GetFractionalDelta() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[25]) }
func (gdClass GPUParticles3D) GetInterpolate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[26]) }
func (gdClass GPUParticles3D) GetProcessMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGPUParticles3D[27]) }
func (gdClass GPUParticles3D) GetSpeedScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[28]) }
func (gdClass GPUParticles3D) GetCollisionBaseSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[29]) }
func (gdClass GPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[30], order) }
func (gdClass GPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder { return gdnative.Return[GPUParticles3DDrawOrder](gdnative.Object(gdClass), methodGPUParticles3D[31]) }
func (gdClass GPUParticles3D) SetDrawPasses(passes int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[32], passes) }
func (gdClass GPUParticles3D) SetDrawPassMesh(pass int64, mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[33], pass, mesh) }
func (gdClass GPUParticles3D) GetDrawPasses() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticles3D[34]) }
func (gdClass GPUParticles3D) GetDrawPassMesh(pass int64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodGPUParticles3D[35], pass) }
func (gdClass GPUParticles3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[36], skin) }
func (gdClass GPUParticles3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodGPUParticles3D[37]) }
func (gdClass GPUParticles3D) Restart()  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[38]) }
func (gdClass GPUParticles3D) CaptureAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodGPUParticles3D[39]) }
func (gdClass GPUParticles3D) SetSubEmitter(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[40], path) }
func (gdClass GPUParticles3D) GetSubEmitter() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodGPUParticles3D[41]) }
func (gdClass GPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[42], xform, velocity, color, custom, flags) }
func (gdClass GPUParticles3D) SetTrailEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[43], enabled) }
func (gdClass GPUParticles3D) SetTrailLength(secs float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[44], secs) }
func (gdClass GPUParticles3D) IsTrailEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticles3D[45]) }
func (gdClass GPUParticles3D) GetTrailLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticles3D[46]) }
func (gdClass GPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticles3D[47], align) }
func (gdClass GPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign { return gdnative.Return[GPUParticles3DTransformAlign](gdnative.Object(gdClass), methodGPUParticles3D[48]) }

type GPUParticlesAttractor3D gdnative.Object
func (GPUParticlesAttractor3D) class() string { return "GPUParticlesAttractor3D\000" }

func (gdClass GPUParticlesAttractor3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodGPUParticlesAttractor3D [8]gdnative.Method
func (gdClass GPUParticlesAttractor3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[0], mask) }
func (gdClass GPUParticlesAttractor3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[1]) }
func (gdClass GPUParticlesAttractor3D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[2], strength) }
func (gdClass GPUParticlesAttractor3D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[3]) }
func (gdClass GPUParticlesAttractor3D) SetAttenuation(attenuation float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[4], attenuation) }
func (gdClass GPUParticlesAttractor3D) GetAttenuation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[5]) }
func (gdClass GPUParticlesAttractor3D) SetDirectionality(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractor3D[6], amount) }
func (gdClass GPUParticlesAttractor3D) GetDirectionality() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractor3D[7]) }

type GPUParticlesAttractorBox3D gdnative.Object
func (GPUParticlesAttractorBox3D) class() string { return "GPUParticlesAttractorBox3D\000" }

func (gdClass GPUParticlesAttractorBox3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D(gdClass) }

var methodGPUParticlesAttractorBox3D [2]gdnative.Method
func (gdClass GPUParticlesAttractorBox3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorBox3D[0], extents) }
func (gdClass GPUParticlesAttractorBox3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesAttractorBox3D[1]) }

type GPUParticlesAttractorSphere3D gdnative.Object
func (GPUParticlesAttractorSphere3D) class() string { return "GPUParticlesAttractorSphere3D\000" }

func (gdClass GPUParticlesAttractorSphere3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D(gdClass) }

var methodGPUParticlesAttractorSphere3D [2]gdnative.Method
func (gdClass GPUParticlesAttractorSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorSphere3D[0], radius) }
func (gdClass GPUParticlesAttractorSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesAttractorSphere3D[1]) }

type GPUParticlesAttractorVectorField3D gdnative.Object
func (GPUParticlesAttractorVectorField3D) class() string { return "GPUParticlesAttractorVectorField3D\000" }

func (gdClass GPUParticlesAttractorVectorField3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D(gdClass) }

var methodGPUParticlesAttractorVectorField3D [4]gdnative.Method
func (gdClass GPUParticlesAttractorVectorField3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[0], extents) }
func (gdClass GPUParticlesAttractorVectorField3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[1]) }
func (gdClass GPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[2], texture) }
func (gdClass GPUParticlesAttractorVectorField3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodGPUParticlesAttractorVectorField3D[3]) }

type GPUParticlesCollision3D gdnative.Object
func (GPUParticlesCollision3D) class() string { return "GPUParticlesCollision3D\000" }

func (gdClass GPUParticlesCollision3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodGPUParticlesCollision3D [2]gdnative.Method
func (gdClass GPUParticlesCollision3D) SetCullMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollision3D[0], mask) }
func (gdClass GPUParticlesCollision3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesCollision3D[1]) }

type GPUParticlesCollisionBox3D gdnative.Object
func (GPUParticlesCollisionBox3D) class() string { return "GPUParticlesCollisionBox3D\000" }

func (gdClass GPUParticlesCollisionBox3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D(gdClass) }

var methodGPUParticlesCollisionBox3D [2]gdnative.Method
func (gdClass GPUParticlesCollisionBox3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionBox3D[0], extents) }
func (gdClass GPUParticlesCollisionBox3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionBox3D[1]) }

type GPUParticlesCollisionHeightField3DResolution int64

const (
	GPUParticlesCollisionHeightField3DResolution256 GPUParticlesCollisionHeightField3DResolution = 0
	GPUParticlesCollisionHeightField3DResolution512 GPUParticlesCollisionHeightField3DResolution = 1
	GPUParticlesCollisionHeightField3DResolution1024 GPUParticlesCollisionHeightField3DResolution = 2
	GPUParticlesCollisionHeightField3DResolution2048 GPUParticlesCollisionHeightField3DResolution = 3
	GPUParticlesCollisionHeightField3DResolution4096 GPUParticlesCollisionHeightField3DResolution = 4
	GPUParticlesCollisionHeightField3DResolution8192 GPUParticlesCollisionHeightField3DResolution = 5
	GPUParticlesCollisionHeightField3DResolutionMax GPUParticlesCollisionHeightField3DResolution = 6
)

type GPUParticlesCollisionHeightField3DUpdateMode int64

const (
	GPUParticlesCollisionHeightField3DUpdateModeWhenMoved GPUParticlesCollisionHeightField3DUpdateMode = 0
	GPUParticlesCollisionHeightField3DUpdateModeAlways GPUParticlesCollisionHeightField3DUpdateMode = 1
)

type GPUParticlesCollisionHeightField3D gdnative.Object
func (GPUParticlesCollisionHeightField3D) class() string { return "GPUParticlesCollisionHeightField3D\000" }

func (gdClass GPUParticlesCollisionHeightField3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D(gdClass) }

var methodGPUParticlesCollisionHeightField3D [8]gdnative.Method
func (gdClass GPUParticlesCollisionHeightField3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[0], extents) }
func (gdClass GPUParticlesCollisionHeightField3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[1]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[2], resolution) }
func (gdClass GPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution { return gdnative.Return[GPUParticlesCollisionHeightField3DResolution](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[3]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[4], update_mode) }
func (gdClass GPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode { return gdnative.Return[GPUParticlesCollisionHeightField3DUpdateMode](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[5]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[6], enabled) }
func (gdClass GPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticlesCollisionHeightField3D[7]) }

type GPUParticlesCollisionSDF3DResolution int64

const (
	GPUParticlesCollisionSDF3DResolution16 GPUParticlesCollisionSDF3DResolution = 0
	GPUParticlesCollisionSDF3DResolution32 GPUParticlesCollisionSDF3DResolution = 1
	GPUParticlesCollisionSDF3DResolution64 GPUParticlesCollisionSDF3DResolution = 2
	GPUParticlesCollisionSDF3DResolution128 GPUParticlesCollisionSDF3DResolution = 3
	GPUParticlesCollisionSDF3DResolution256 GPUParticlesCollisionSDF3DResolution = 4
	GPUParticlesCollisionSDF3DResolution512 GPUParticlesCollisionSDF3DResolution = 5
	GPUParticlesCollisionSDF3DResolutionMax GPUParticlesCollisionSDF3DResolution = 6
)

type GPUParticlesCollisionSDF3D gdnative.Object
func (GPUParticlesCollisionSDF3D) class() string { return "GPUParticlesCollisionSDF3D\000" }

func (gdClass GPUParticlesCollisionSDF3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D(gdClass) }

var methodGPUParticlesCollisionSDF3D [12]gdnative.Method
func (gdClass GPUParticlesCollisionSDF3D) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[0], extents) }
func (gdClass GPUParticlesCollisionSDF3D) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[1]) }
func (gdClass GPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[2], resolution) }
func (gdClass GPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution { return gdnative.Return[GPUParticlesCollisionSDF3DResolution](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[3]) }
func (gdClass GPUParticlesCollisionSDF3D) SetTexture(texture Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[4], texture) }
func (gdClass GPUParticlesCollisionSDF3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[5]) }
func (gdClass GPUParticlesCollisionSDF3D) SetThickness(thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[6], thickness) }
func (gdClass GPUParticlesCollisionSDF3D) GetThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[7]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[8], mask) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[9]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[10], layer_number, value) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGPUParticlesCollisionSDF3D[11], layer_number) }

type GPUParticlesCollisionSphere3D gdnative.Object
func (GPUParticlesCollisionSphere3D) class() string { return "GPUParticlesCollisionSphere3D\000" }

func (gdClass GPUParticlesCollisionSphere3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D(gdClass) }

var methodGPUParticlesCollisionSphere3D [2]gdnative.Method
func (gdClass GPUParticlesCollisionSphere3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodGPUParticlesCollisionSphere3D[0], radius) }
func (gdClass GPUParticlesCollisionSphere3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGPUParticlesCollisionSphere3D[1]) }

type Generic6DOFJoint3DParam int64

const (
	Generic6DOFJoint3DParamLinearLowerLimit Generic6DOFJoint3DParam = 0
	Generic6DOFJoint3DParamLinearUpperLimit Generic6DOFJoint3DParam = 1
	Generic6DOFJoint3DParamLinearLimitSoftness Generic6DOFJoint3DParam = 2
	Generic6DOFJoint3DParamLinearRestitution Generic6DOFJoint3DParam = 3
	Generic6DOFJoint3DParamLinearDamping Generic6DOFJoint3DParam = 4
	Generic6DOFJoint3DParamLinearMotorTargetVelocity Generic6DOFJoint3DParam = 5
	Generic6DOFJoint3DParamLinearMotorForceLimit Generic6DOFJoint3DParam = 6
	Generic6DOFJoint3DParamLinearSpringStiffness Generic6DOFJoint3DParam = 7
	Generic6DOFJoint3DParamLinearSpringDamping Generic6DOFJoint3DParam = 8
	Generic6DOFJoint3DParamLinearSpringEquilibriumPoint Generic6DOFJoint3DParam = 9
	Generic6DOFJoint3DParamAngularLowerLimit Generic6DOFJoint3DParam = 10
	Generic6DOFJoint3DParamAngularUpperLimit Generic6DOFJoint3DParam = 11
	Generic6DOFJoint3DParamAngularLimitSoftness Generic6DOFJoint3DParam = 12
	Generic6DOFJoint3DParamAngularDamping Generic6DOFJoint3DParam = 13
	Generic6DOFJoint3DParamAngularRestitution Generic6DOFJoint3DParam = 14
	Generic6DOFJoint3DParamAngularForceLimit Generic6DOFJoint3DParam = 15
	Generic6DOFJoint3DParamAngularErp Generic6DOFJoint3DParam = 16
	Generic6DOFJoint3DParamAngularMotorTargetVelocity Generic6DOFJoint3DParam = 17
	Generic6DOFJoint3DParamAngularMotorForceLimit Generic6DOFJoint3DParam = 18
	Generic6DOFJoint3DParamAngularSpringStiffness Generic6DOFJoint3DParam = 19
	Generic6DOFJoint3DParamAngularSpringDamping Generic6DOFJoint3DParam = 20
	Generic6DOFJoint3DParamAngularSpringEquilibriumPoint Generic6DOFJoint3DParam = 21
	Generic6DOFJoint3DParamMax Generic6DOFJoint3DParam = 22
)

type Generic6DOFJoint3DFlag int64

const (
	Generic6DOFJoint3DFlagEnableLinearLimit Generic6DOFJoint3DFlag = 0
	Generic6DOFJoint3DFlagEnableAngularLimit Generic6DOFJoint3DFlag = 1
	Generic6DOFJoint3DFlagEnableLinearSpring Generic6DOFJoint3DFlag = 3
	Generic6DOFJoint3DFlagEnableAngularSpring Generic6DOFJoint3DFlag = 2
	Generic6DOFJoint3DFlagEnableMotor Generic6DOFJoint3DFlag = 4
	Generic6DOFJoint3DFlagEnableLinearMotor Generic6DOFJoint3DFlag = 5
	Generic6DOFJoint3DFlagMax Generic6DOFJoint3DFlag = 6
)

type Generic6DOFJoint3D gdnative.Object
func (Generic6DOFJoint3D) class() string { return "Generic6DOFJoint3D\000" }

func (gdClass Generic6DOFJoint3D) Joint3D() Joint3D { return Joint3D(gdClass) }

var methodGeneric6DOFJoint3D [12]gdnative.Method
func (gdClass Generic6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[0], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[1], param) }
func (gdClass Generic6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[2], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[3], param) }
func (gdClass Generic6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[4], param, value) }
func (gdClass Generic6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[5], param) }
func (gdClass Generic6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[6], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[7], flag) }
func (gdClass Generic6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[8], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[9], flag) }
func (gdClass Generic6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeneric6DOFJoint3D[10], flag, value) }
func (gdClass Generic6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeneric6DOFJoint3D[11], flag) }

type Geometry2DPolyBooleanOperation int64

const (
	Geometry2DOperationUnion Geometry2DPolyBooleanOperation = 0
	Geometry2DOperationDifference Geometry2DPolyBooleanOperation = 1
	Geometry2DOperationIntersection Geometry2DPolyBooleanOperation = 2
	Geometry2DOperationXor Geometry2DPolyBooleanOperation = 3
)

type Geometry2DPolyJoinType int64

const (
	Geometry2DJoinSquare Geometry2DPolyJoinType = 0
	Geometry2DJoinRound Geometry2DPolyJoinType = 1
	Geometry2DJoinMiter Geometry2DPolyJoinType = 2
)

type Geometry2DPolyEndType int64

const (
	Geometry2DEndPolygon Geometry2DPolyEndType = 0
	Geometry2DEndJoined Geometry2DPolyEndType = 1
	Geometry2DEndButt Geometry2DPolyEndType = 2
	Geometry2DEndSquare Geometry2DPolyEndType = 3
	Geometry2DEndRound Geometry2DPolyEndType = 4
)

type Geometry2D gdnative.Object
func (Geometry2D) class() string { return "Geometry2D\000" }

func (gdClass Geometry2D) Object() Object { return Object(gdClass) }

var methodGeometry2D [22]gdnative.Method
func (gdClass Geometry2D) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[0], point, circle_position, circle_radius) }
func (gdClass Geometry2D) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometry2D[1], segment_from, segment_to, circle_position, circle_radius) }
func (gdClass Geometry2D) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry2D[2], from_a, to_a, from_b, to_b) }
func (gdClass Geometry2D) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry2D[3], from_a, dir_a, from_b, dir_b) }
func (gdClass Geometry2D) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGeometry2D[4], p1, q1, p2, q2) }
func (gdClass Geometry2D) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGeometry2D[5], point, s1, s2) }
func (gdClass Geometry2D) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGeometry2D[6], point, s1, s2) }
func (gdClass Geometry2D) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[7], point, a, b, c) }
func (gdClass Geometry2D) IsPolygonClockwise(polygon []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[8], polygon) }
func (gdClass Geometry2D) IsPointInPolygon(point Vector2, polygon []Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometry2D[9], point, polygon) }
func (gdClass Geometry2D) TriangulatePolygon(polygon []Vector2) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGeometry2D[10], polygon) }
func (gdClass Geometry2D) TriangulateDelaunay(points []Vector2) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodGeometry2D[11], points) }
func (gdClass Geometry2D) ConvexHull(points []Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGeometry2D[12], points) }
func (gdClass Geometry2D) MergePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[13], polygon_a, polygon_b) }
func (gdClass Geometry2D) ClipPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[14], polygon_a, polygon_b) }
func (gdClass Geometry2D) IntersectPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[15], polygon_a, polygon_b) }
func (gdClass Geometry2D) ExcludePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[16], polygon_a, polygon_b) }
func (gdClass Geometry2D) ClipPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[17], polyline, polygon) }
func (gdClass Geometry2D) IntersectPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[18], polyline, polygon) }
func (gdClass Geometry2D) OffsetPolygon(polygon []Vector2, delta float64, join_type Geometry2DPolyJoinType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[19], polygon, delta, join_type) }
func (gdClass Geometry2D) OffsetPolyline(polyline []Vector2, delta float64, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry2D[20], polyline, delta, join_type, end_type) }
func (gdClass Geometry2D) MakeAtlas(sizes []Vector2) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodGeometry2D[21], sizes) }

type Geometry3D gdnative.Object
func (Geometry3D) class() string { return "Geometry3D\000" }

func (gdClass Geometry3D) Object() Object { return Object(gdClass) }

var methodGeometry3D [12]gdnative.Method
func (gdClass Geometry3D) BuildBoxPlanes(extents Vector3) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[0], extents) }
func (gdClass Geometry3D) BuildCylinderPlanes(radius float64, height float64, sides int64, axis Vector3Axis) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[1], radius, height, sides, axis) }
func (gdClass Geometry3D) BuildCapsulePlanes(radius float64, height float64, sides int64, lats int64, axis Vector3Axis) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGeometry3D[2], radius, height, sides, lats, axis) }
func (gdClass Geometry3D) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[3], p1, p2, q1, q2) }
func (gdClass Geometry3D) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGeometry3D[4], point, s1, s2) }
func (gdClass Geometry3D) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGeometry3D[5], point, s1, s2) }
func (gdClass Geometry3D) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry3D[6], from, dir, a, b, c) }
func (gdClass Geometry3D) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometry3D[7], from, to, a, b, c) }
func (gdClass Geometry3D) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[8], from, to, sphere_position, sphere_radius) }
func (gdClass Geometry3D) SegmentIntersectsCylinder(from Vector3, to Vector3, height float64, radius float64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[9], from, to, height, radius) }
func (gdClass Geometry3D) SegmentIntersectsConvex(from Vector3, to Vector3, planes Array) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[10], from, to, planes) }
func (gdClass Geometry3D) ClipPolygon(points []Vector3, plane Plane) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodGeometry3D[11], points, plane) }

type GeometryInstance3DShadowCastingSetting int64

const (
	GeometryInstance3DShadowCastingSettingOff GeometryInstance3DShadowCastingSetting = 0
	GeometryInstance3DShadowCastingSettingOn GeometryInstance3DShadowCastingSetting = 1
	GeometryInstance3DShadowCastingSettingDoubleSided GeometryInstance3DShadowCastingSetting = 2
	GeometryInstance3DShadowCastingSettingShadowsOnly GeometryInstance3DShadowCastingSetting = 3
)

type GeometryInstance3DGIMode int64

const (
	GeometryInstance3DGiModeDisabled GeometryInstance3DGIMode = 0
	GeometryInstance3DGiModeStatic GeometryInstance3DGIMode = 1
	GeometryInstance3DGiModeDynamic GeometryInstance3DGIMode = 2
)

type GeometryInstance3DLightmapScale int64

const (
	GeometryInstance3DLightmapScale1x GeometryInstance3DLightmapScale = 0
	GeometryInstance3DLightmapScale2x GeometryInstance3DLightmapScale = 1
	GeometryInstance3DLightmapScale4x GeometryInstance3DLightmapScale = 2
	GeometryInstance3DLightmapScale8x GeometryInstance3DLightmapScale = 3
	GeometryInstance3DLightmapScaleMax GeometryInstance3DLightmapScale = 4
)

type GeometryInstance3DVisibilityRangeFadeMode int64

const (
	GeometryInstance3DVisibilityRangeFadeDisabled GeometryInstance3DVisibilityRangeFadeMode = 0
	GeometryInstance3DVisibilityRangeFadeSelf GeometryInstance3DVisibilityRangeFadeMode = 1
	GeometryInstance3DVisibilityRangeFadeDependencies GeometryInstance3DVisibilityRangeFadeMode = 2
)

type GeometryInstance3D gdnative.Object
func (GeometryInstance3D) class() string { return "GeometryInstance3D\000" }

func (gdClass GeometryInstance3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodGeometryInstance3D [31]gdnative.Method
func (gdClass GeometryInstance3D) SetMaterialOverride(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[0], material) }
func (gdClass GeometryInstance3D) GetMaterialOverride() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGeometryInstance3D[1]) }
func (gdClass GeometryInstance3D) SetMaterialOverlay(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[2], material) }
func (gdClass GeometryInstance3D) GetMaterialOverlay() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodGeometryInstance3D[3]) }
func (gdClass GeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[4], shadow_casting_setting) }
func (gdClass GeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting { return gdnative.Return[GeometryInstance3DShadowCastingSetting](gdnative.Object(gdClass), methodGeometryInstance3D[5]) }
func (gdClass GeometryInstance3D) SetLodBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[6], bias) }
func (gdClass GeometryInstance3D) GetLodBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[7]) }
func (gdClass GeometryInstance3D) SetTransparency(transparency float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[8], transparency) }
func (gdClass GeometryInstance3D) GetTransparency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[9]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEndMargin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[10], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEndMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[11]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEnd(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[12], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEnd() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[13]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBeginMargin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[14], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBeginMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[15]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[16], distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[17]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[18], mode) }
func (gdClass GeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode { return gdnative.Return[GeometryInstance3DVisibilityRangeFadeMode](gdnative.Object(gdClass), methodGeometryInstance3D[19]) }
func (gdClass GeometryInstance3D) SetInstanceShaderUniform(uniform string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[20], uniform, value) }
func (gdClass GeometryInstance3D) GetInstanceShaderUniform(uniform string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodGeometryInstance3D[21], uniform) }
func (gdClass GeometryInstance3D) SetExtraCullMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[22], margin) }
func (gdClass GeometryInstance3D) GetExtraCullMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGeometryInstance3D[23]) }
func (gdClass GeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[24], scale) }
func (gdClass GeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale { return gdnative.Return[GeometryInstance3DLightmapScale](gdnative.Object(gdClass), methodGeometryInstance3D[25]) }
func (gdClass GeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[26], mode) }
func (gdClass GeometryInstance3D) GetGiMode() GeometryInstance3DGIMode { return gdnative.Return[GeometryInstance3DGIMode](gdnative.Object(gdClass), methodGeometryInstance3D[27]) }
func (gdClass GeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[28], ignore_culling) }
func (gdClass GeometryInstance3D) IsIgnoringOcclusionCulling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGeometryInstance3D[29]) }
func (gdClass GeometryInstance3D) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodGeometryInstance3D[30], aabb) }

type GodotPhysicsServer2D gdnative.Object
func (GodotPhysicsServer2D) class() string { return "GodotPhysicsServer2D\000" }

func (gdClass GodotPhysicsServer2D) PhysicsServer2D() PhysicsServer2D { return PhysicsServer2D(gdClass) }


type GodotPhysicsServer3D gdnative.Object
func (GodotPhysicsServer3D) class() string { return "GodotPhysicsServer3D\000" }

func (gdClass GodotPhysicsServer3D) PhysicsServer3D() PhysicsServer3D { return PhysicsServer3D(gdClass) }


type GradientInterpolationMode int64

const (
	GradientGradientInterpolateLinear GradientInterpolationMode = 0
	GradientGradientInterpolateConstant GradientInterpolationMode = 1
	GradientGradientInterpolateCubic GradientInterpolationMode = 2
)

type Gradient gdnative.Object
func (Gradient) class() string { return "Gradient\000" }

func (gdClass Gradient) Resource() Resource { return Resource(gdClass) }

var methodGradient [15]gdnative.Method
func (gdClass Gradient) AddPoint(offset float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[0], offset, color) }
func (gdClass Gradient) RemovePoint(point int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[1], point) }
func (gdClass Gradient) SetOffset(point int64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[2], point, offset) }
func (gdClass Gradient) GetOffset(point int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGradient[3], point) }
func (gdClass Gradient) Reverse()  { gdnative.Call(gdnative.Object(gdClass), methodGradient[4]) }
func (gdClass Gradient) SetColor(point int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[5], point, color) }
func (gdClass Gradient) GetColor(point int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGradient[6], point) }
func (gdClass Gradient) Interpolate(offset float64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGradient[7], offset) }
func (gdClass Gradient) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGradient[8]) }
func (gdClass Gradient) SetOffsets(offsets []float32)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[9], offsets) }
func (gdClass Gradient) GetOffsets() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodGradient[10]) }
func (gdClass Gradient) SetColors(colors []Color)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[11], colors) }
func (gdClass Gradient) GetColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodGradient[12]) }
func (gdClass Gradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode)  { gdnative.Call(gdnative.Object(gdClass), methodGradient[13], interpolation_mode) }
func (gdClass Gradient) GetInterpolationMode() GradientInterpolationMode { return gdnative.Return[GradientInterpolationMode](gdnative.Object(gdClass), methodGradient[14]) }

type GradientTexture1D gdnative.Object
func (GradientTexture1D) class() string { return "GradientTexture1D\000" }

func (gdClass GradientTexture1D) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodGradientTexture1D [5]gdnative.Method
func (gdClass GradientTexture1D) SetGradient(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[0], gradient) }
func (gdClass GradientTexture1D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodGradientTexture1D[1]) }
func (gdClass GradientTexture1D) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[2], width) }
func (gdClass GradientTexture1D) SetUseHdr(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture1D[3], enabled) }
func (gdClass GradientTexture1D) IsUsingHdr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGradientTexture1D[4]) }

type GradientTexture2DFill int64

const (
	GradientTexture2DFillLinear GradientTexture2DFill = 0
	GradientTexture2DFillRadial GradientTexture2DFill = 1
)

type GradientTexture2DRepeat int64

const (
	GradientTexture2DRepeatNone GradientTexture2DRepeat = 0
	GradientTexture2DRepeatDefault GradientTexture2DRepeat = 1
	GradientTexture2DRepeatMirror GradientTexture2DRepeat = 2
)

type GradientTexture2D gdnative.Object
func (GradientTexture2D) class() string { return "GradientTexture2D\000" }

func (gdClass GradientTexture2D) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodGradientTexture2D [14]gdnative.Method
func (gdClass GradientTexture2D) SetGradient(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[0], gradient) }
func (gdClass GradientTexture2D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodGradientTexture2D[1]) }
func (gdClass GradientTexture2D) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[2], width) }
func (gdClass GradientTexture2D) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[3], height) }
func (gdClass GradientTexture2D) SetUseHdr(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[4], enabled) }
func (gdClass GradientTexture2D) IsUsingHdr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGradientTexture2D[5]) }
func (gdClass GradientTexture2D) SetFill(fill GradientTexture2DFill)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[6], fill) }
func (gdClass GradientTexture2D) GetFill() GradientTexture2DFill { return gdnative.Return[GradientTexture2DFill](gdnative.Object(gdClass), methodGradientTexture2D[7]) }
func (gdClass GradientTexture2D) SetFillFrom(fill_from Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[8], fill_from) }
func (gdClass GradientTexture2D) GetFillFrom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGradientTexture2D[9]) }
func (gdClass GradientTexture2D) SetFillTo(fill_to Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[10], fill_to) }
func (gdClass GradientTexture2D) GetFillTo() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGradientTexture2D[11]) }
func (gdClass GradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodGradientTexture2D[12], repeat) }
func (gdClass GradientTexture2D) GetRepeat() GradientTexture2DRepeat { return gdnative.Return[GradientTexture2DRepeat](gdnative.Object(gdClass), methodGradientTexture2D[13]) }

type GraphEditPanningScheme int64

const (
	GraphEditScrollZooms GraphEditPanningScheme = 0
	GraphEditScrollPans GraphEditPanningScheme = 1
)

type GraphEdit gdnative.Object
func (GraphEdit) class() string { return "GraphEdit\000" }

func (gdClass GraphEdit) Control() Control { return Control(gdClass) }

var methodGraphEdit [50]gdnative.Method
func (gdClass GraphEdit) virtual(val any, name string) any {	switch name {
	case "_is_in_input_hotzone":
		i, ok := val.(interface{ IsInInputHotzone(graph_node Object, slot_index int64, mouse_position Vector2) bool })
		if ok {
			return i.IsInInputHotzone
		}
	case "_is_in_output_hotzone":
		i, ok := val.(interface{ IsInOutputHotzone(graph_node Object, slot_index int64, mouse_position Vector2) bool })
		if ok {
			return i.IsInOutputHotzone
		}
	case "_get_connection_line":
		i, ok := val.(interface{ GetConnectionLine(from Vector2, to Vector2) []Vector2 })
		if ok {
			return i.GetConnectionLine
		}
	case "_is_node_hover_valid":
		i, ok := val.(interface{ IsNodeHoverValid(from string, from_slot int64, to string, to_slot int64) bool })
		if ok {
			return i.IsNodeHoverValid
		}
	}
	return nil
}
func (gdClass GraphEdit) ConnectNode(from string, from_port int64, to string, to_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodGraphEdit[0], from, from_port, to, to_port) }
func (gdClass GraphEdit) IsNodeConnected(from string, from_port int64, to string, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[1], from, from_port, to, to_port) }
func (gdClass GraphEdit) DisconnectNode(from string, from_port int64, to string, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[2], from, from_port, to, to_port) }
func (gdClass GraphEdit) SetConnectionActivity(from string, from_port int64, to string, to_port int64, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[3], from, from_port, to, to_port, amount) }
func (gdClass GraphEdit) GetConnectionList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGraphEdit[4]) }
func (gdClass GraphEdit) ClearConnections()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[5]) }
func (gdClass GraphEdit) ForceConnectionDragEnd()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[6]) }
func (gdClass GraphEdit) GetScrollOfs() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphEdit[7]) }
func (gdClass GraphEdit) SetScrollOfs(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[8], offset) }
func (gdClass GraphEdit) AddValidRightDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[9], atype) }
func (gdClass GraphEdit) RemoveValidRightDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[10], atype) }
func (gdClass GraphEdit) AddValidLeftDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[11], atype) }
func (gdClass GraphEdit) RemoveValidLeftDisconnectType(atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[12], atype) }
func (gdClass GraphEdit) AddValidConnectionType(from_type int64, to_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[13], from_type, to_type) }
func (gdClass GraphEdit) RemoveValidConnectionType(from_type int64, to_type int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[14], from_type, to_type) }
func (gdClass GraphEdit) IsValidConnectionType(from_type int64, to_type int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[15], from_type, to_type) }
func (gdClass GraphEdit) GetConnectionLine(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodGraphEdit[16], from, to) }
func (gdClass GraphEdit) SetPanningScheme(scheme GraphEditPanningScheme)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[17], scheme) }
func (gdClass GraphEdit) GetPanningScheme() GraphEditPanningScheme { return gdnative.Return[GraphEditPanningScheme](gdnative.Object(gdClass), methodGraphEdit[18]) }
func (gdClass GraphEdit) SetZoom(zoom float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[19], zoom) }
func (gdClass GraphEdit) GetZoom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[20]) }
func (gdClass GraphEdit) SetZoomMin(zoom_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[21], zoom_min) }
func (gdClass GraphEdit) GetZoomMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[22]) }
func (gdClass GraphEdit) SetZoomMax(zoom_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[23], zoom_max) }
func (gdClass GraphEdit) GetZoomMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[24]) }
func (gdClass GraphEdit) SetZoomStep(zoom_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[25], zoom_step) }
func (gdClass GraphEdit) GetZoomStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[26]) }
func (gdClass GraphEdit) SetShowZoomLabel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[27], enable) }
func (gdClass GraphEdit) IsShowingZoomLabel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[28]) }
func (gdClass GraphEdit) SetSnap(pixels int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[29], pixels) }
func (gdClass GraphEdit) GetSnap() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphEdit[30]) }
func (gdClass GraphEdit) SetUseSnap(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[31], enable) }
func (gdClass GraphEdit) IsUsingSnap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[32]) }
func (gdClass GraphEdit) SetConnectionLinesCurvature(curvature float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[33], curvature) }
func (gdClass GraphEdit) GetConnectionLinesCurvature() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[34]) }
func (gdClass GraphEdit) SetConnectionLinesThickness(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[35], pixels) }
func (gdClass GraphEdit) GetConnectionLinesThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[36]) }
func (gdClass GraphEdit) SetConnectionLinesAntialiased(pixels bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[37], pixels) }
func (gdClass GraphEdit) IsConnectionLinesAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[38]) }
func (gdClass GraphEdit) SetMinimapSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[39], size) }
func (gdClass GraphEdit) GetMinimapSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphEdit[40]) }
func (gdClass GraphEdit) SetMinimapOpacity(opacity float64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[41], opacity) }
func (gdClass GraphEdit) GetMinimapOpacity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGraphEdit[42]) }
func (gdClass GraphEdit) SetMinimapEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[43], enable) }
func (gdClass GraphEdit) IsMinimapEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[44]) }
func (gdClass GraphEdit) SetRightDisconnects(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[45], enable) }
func (gdClass GraphEdit) IsRightDisconnectsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphEdit[46]) }
func (gdClass GraphEdit) GetZoomHbox() HBoxContainer { return gdnative.Return[HBoxContainer](gdnative.Object(gdClass), methodGraphEdit[47]) }
func (gdClass GraphEdit) ArrangeNodes()  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[48]) }
func (gdClass GraphEdit) SetSelected(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodGraphEdit[49], node) }

type GraphNodeOverlay int64

const (
	GraphNodeOverlayDisabled GraphNodeOverlay = 0
	GraphNodeOverlayBreakpoint GraphNodeOverlay = 1
	GraphNodeOverlayPosition GraphNodeOverlay = 2
)

type GraphNode gdnative.Object
func (GraphNode) class() string { return "GraphNode\000" }

func (gdClass GraphNode) Container() Container { return Container(gdClass) }

var methodGraphNode [45]gdnative.Method
func (gdClass GraphNode) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[0], title) }
func (gdClass GraphNode) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGraphNode[1]) }
func (gdClass GraphNode) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[2], direction) }
func (gdClass GraphNode) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodGraphNode[3]) }
func (gdClass GraphNode) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[4], language) }
func (gdClass GraphNode) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodGraphNode[5]) }
func (gdClass GraphNode) SetSlot(idx int64, enable_left bool, type_left int64, color_left Color, enable_right bool, type_right int64, color_right Color, custom_left Texture2D, custom_right Texture2D, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[6], idx, enable_left, type_left, color_left, enable_right, type_right, color_right, custom_left, custom_right, enable) }
func (gdClass GraphNode) ClearSlot(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[7], idx) }
func (gdClass GraphNode) ClearAllSlots()  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[8]) }
func (gdClass GraphNode) IsSlotEnabledLeft(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[9], idx) }
func (gdClass GraphNode) SetSlotEnabledLeft(idx int64, enable_left bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[10], idx, enable_left) }
func (gdClass GraphNode) SetSlotTypeLeft(idx int64, type_left int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[11], idx, type_left) }
func (gdClass GraphNode) GetSlotTypeLeft(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[12], idx) }
func (gdClass GraphNode) SetSlotColorLeft(idx int64, color_left Color)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[13], idx, color_left) }
func (gdClass GraphNode) GetSlotColorLeft(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[14], idx) }
func (gdClass GraphNode) IsSlotEnabledRight(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[15], idx) }
func (gdClass GraphNode) SetSlotEnabledRight(idx int64, enable_right bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[16], idx, enable_right) }
func (gdClass GraphNode) SetSlotTypeRight(idx int64, type_right int64)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[17], idx, type_right) }
func (gdClass GraphNode) GetSlotTypeRight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[18], idx) }
func (gdClass GraphNode) SetSlotColorRight(idx int64, color_right Color)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[19], idx, color_right) }
func (gdClass GraphNode) GetSlotColorRight(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[20], idx) }
func (gdClass GraphNode) IsSlotDrawStylebox(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[21], idx) }
func (gdClass GraphNode) SetSlotDrawStylebox(idx int64, draw_stylebox bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[22], idx, draw_stylebox) }
func (gdClass GraphNode) SetPositionOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[23], offset) }
func (gdClass GraphNode) GetPositionOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[24]) }
func (gdClass GraphNode) SetComment(comment bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[25], comment) }
func (gdClass GraphNode) IsComment() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[26]) }
func (gdClass GraphNode) SetResizable(resizable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[27], resizable) }
func (gdClass GraphNode) IsResizable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[28]) }
func (gdClass GraphNode) SetSelected(selected bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[29], selected) }
func (gdClass GraphNode) IsSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[30]) }
func (gdClass GraphNode) GetConnectionInputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[31]) }
func (gdClass GraphNode) GetConnectionInputHeight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[32], idx) }
func (gdClass GraphNode) GetConnectionInputPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[33], idx) }
func (gdClass GraphNode) GetConnectionInputType(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[34], idx) }
func (gdClass GraphNode) GetConnectionInputColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[35], idx) }
func (gdClass GraphNode) GetConnectionOutputCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[36]) }
func (gdClass GraphNode) GetConnectionOutputHeight(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[37], idx) }
func (gdClass GraphNode) GetConnectionOutputPosition(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodGraphNode[38], idx) }
func (gdClass GraphNode) GetConnectionOutputType(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGraphNode[39], idx) }
func (gdClass GraphNode) GetConnectionOutputColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodGraphNode[40], idx) }
func (gdClass GraphNode) SetShowCloseButton(show bool)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[41], show) }
func (gdClass GraphNode) IsCloseButtonVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGraphNode[42]) }
func (gdClass GraphNode) SetOverlay(overlay GraphNodeOverlay)  { gdnative.Call(gdnative.Object(gdClass), methodGraphNode[43], overlay) }
func (gdClass GraphNode) GetOverlay() GraphNodeOverlay { return gdnative.Return[GraphNodeOverlay](gdnative.Object(gdClass), methodGraphNode[44]) }

type GridContainer gdnative.Object
func (GridContainer) class() string { return "GridContainer\000" }

func (gdClass GridContainer) Container() Container { return Container(gdClass) }

var methodGridContainer [2]gdnative.Method
func (gdClass GridContainer) SetColumns(columns int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridContainer[0], columns) }
func (gdClass GridContainer) GetColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridContainer[1]) }

type GridMap gdnative.Object
func (GridMap) class() string { return "GridMap\000" }

func (gdClass GridMap) Node3D() Node3D { return Node3D(gdClass) }

var methodGridMap [44]gdnative.Method
func (gdClass GridMap) SetCollisionLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[0], layer) }
func (gdClass GridMap) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[1]) }
func (gdClass GridMap) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[2], mask) }
func (gdClass GridMap) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[3]) }
func (gdClass GridMap) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[4], layer_number, value) }
func (gdClass GridMap) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[5], layer_number) }
func (gdClass GridMap) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[6], layer_number, value) }
func (gdClass GridMap) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[7], layer_number) }
func (gdClass GridMap) SetPhysicsMaterial(material PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[8], material) }
func (gdClass GridMap) GetPhysicsMaterial() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodGridMap[9]) }
func (gdClass GridMap) SetBakeNavigation(bake_navigation bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[10], bake_navigation) }
func (gdClass GridMap) IsBakingNavigation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[11]) }
func (gdClass GridMap) SetNavigationLayers(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[12], layers) }
func (gdClass GridMap) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[13]) }
func (gdClass GridMap) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[14], layer_number, value) }
func (gdClass GridMap) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[15], layer_number) }
func (gdClass GridMap) SetMeshLibrary(mesh_library MeshLibrary)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[16], mesh_library) }
func (gdClass GridMap) GetMeshLibrary() MeshLibrary { return gdnative.Return[MeshLibrary](gdnative.Object(gdClass), methodGridMap[17]) }
func (gdClass GridMap) SetCellSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[18], size) }
func (gdClass GridMap) GetCellSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGridMap[19]) }
func (gdClass GridMap) SetCellScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[20], scale) }
func (gdClass GridMap) GetCellScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGridMap[21]) }
func (gdClass GridMap) SetOctantSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[22], size) }
func (gdClass GridMap) GetOctantSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[23]) }
func (gdClass GridMap) SetCellItem(position Vector3i, item int64, orientation int64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[24], position, item, orientation) }
func (gdClass GridMap) GetCellItem(position Vector3i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[25], position) }
func (gdClass GridMap) GetCellItemOrientation(position Vector3i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodGridMap[26], position) }
func (gdClass GridMap) WorldToMap(world_position Vector3) Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodGridMap[27], world_position) }
func (gdClass GridMap) MapToWorld(map_position Vector3i) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodGridMap[28], map_position) }
func (gdClass GridMap) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[29], resource) }
func (gdClass GridMap) SetCenterX(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[30], enable) }
func (gdClass GridMap) GetCenterX() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[31]) }
func (gdClass GridMap) SetCenterY(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[32], enable) }
func (gdClass GridMap) GetCenterY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[33]) }
func (gdClass GridMap) SetCenterZ(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[34], enable) }
func (gdClass GridMap) GetCenterZ() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodGridMap[35]) }
func (gdClass GridMap) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[36]) }
func (gdClass GridMap) GetUsedCells() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[37]) }
func (gdClass GridMap) GetUsedCellsByItem(item int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[38], item) }
func (gdClass GridMap) GetMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[39]) }
func (gdClass GridMap) GetBakeMeshes() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodGridMap[40]) }
func (gdClass GridMap) GetBakeMeshInstance(idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodGridMap[41], idx) }
func (gdClass GridMap) ClearBakedMeshes()  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[42]) }
func (gdClass GridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodGridMap[43], gen_lightmap_uv, lightmap_uv_texel_size) }

type GrooveJoint2D gdnative.Object
func (GrooveJoint2D) class() string { return "GrooveJoint2D\000" }

func (gdClass GrooveJoint2D) Joint2D() Joint2D { return Joint2D(gdClass) }

var methodGrooveJoint2D [4]gdnative.Method
func (gdClass GrooveJoint2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodGrooveJoint2D[0], length) }
func (gdClass GrooveJoint2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGrooveJoint2D[1]) }
func (gdClass GrooveJoint2D) SetInitialOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodGrooveJoint2D[2], offset) }
func (gdClass GrooveJoint2D) GetInitialOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodGrooveJoint2D[3]) }

type HBoxContainer gdnative.Object
func (HBoxContainer) class() string { return "HBoxContainer\000" }

func (gdClass HBoxContainer) BoxContainer() BoxContainer { return BoxContainer(gdClass) }


type HFlowContainer gdnative.Object
func (HFlowContainer) class() string { return "HFlowContainer\000" }

func (gdClass HFlowContainer) FlowContainer() FlowContainer { return FlowContainer(gdClass) }


type HMACContext gdnative.Object
func (HMACContext) class() string { return "HMACContext\000" }

func (gdClass HMACContext) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodHMACContext [3]gdnative.Method
func (gdClass HMACContext) Start(hash_type HashingContextHashType, key []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHMACContext[0], hash_type, key) }
func (gdClass HMACContext) Update(data []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHMACContext[1], data) }
func (gdClass HMACContext) Finish() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHMACContext[2]) }

type HScrollBar gdnative.Object
func (HScrollBar) class() string { return "HScrollBar\000" }

func (gdClass HScrollBar) ScrollBar() ScrollBar { return ScrollBar(gdClass) }


type HSeparator gdnative.Object
func (HSeparator) class() string { return "HSeparator\000" }

func (gdClass HSeparator) Separator() Separator { return Separator(gdClass) }


type HSlider gdnative.Object
func (HSlider) class() string { return "HSlider\000" }

func (gdClass HSlider) Slider() Slider { return Slider(gdClass) }


type HSplitContainer gdnative.Object
func (HSplitContainer) class() string { return "HSplitContainer\000" }

func (gdClass HSplitContainer) SplitContainer() SplitContainer { return SplitContainer(gdClass) }


type HTTPClientMethod int64

const (
	HTTPClientMethodGet HTTPClientMethod = 0
	HTTPClientMethodHead HTTPClientMethod = 1
	HTTPClientMethodPost HTTPClientMethod = 2
	HTTPClientMethodPut HTTPClientMethod = 3
	HTTPClientMethodDelete HTTPClientMethod = 4
	HTTPClientMethodOptions HTTPClientMethod = 5
	HTTPClientMethodTrace HTTPClientMethod = 6
	HTTPClientMethodConnect HTTPClientMethod = 7
	HTTPClientMethodPatch HTTPClientMethod = 8
	HTTPClientMethodMax HTTPClientMethod = 9
)

type HTTPClientStatus int64

const (
	HTTPClientStatusDisconnected HTTPClientStatus = 0
	HTTPClientStatusResolving HTTPClientStatus = 1
	HTTPClientStatusCantResolve HTTPClientStatus = 2
	HTTPClientStatusConnecting HTTPClientStatus = 3
	HTTPClientStatusCantConnect HTTPClientStatus = 4
	HTTPClientStatusConnected HTTPClientStatus = 5
	HTTPClientStatusRequesting HTTPClientStatus = 6
	HTTPClientStatusBody HTTPClientStatus = 7
	HTTPClientStatusConnectionError HTTPClientStatus = 8
	HTTPClientStatusSslHandshakeError HTTPClientStatus = 9
)

type HTTPClientResponseCode int64

const (
	HTTPClientResponseContinue HTTPClientResponseCode = 100
	HTTPClientResponseSwitchingProtocols HTTPClientResponseCode = 101
	HTTPClientResponseProcessing HTTPClientResponseCode = 102
	HTTPClientResponseOk HTTPClientResponseCode = 200
	HTTPClientResponseCreated HTTPClientResponseCode = 201
	HTTPClientResponseAccepted HTTPClientResponseCode = 202
	HTTPClientResponseNonAuthoritativeInformation HTTPClientResponseCode = 203
	HTTPClientResponseNoContent HTTPClientResponseCode = 204
	HTTPClientResponseResetContent HTTPClientResponseCode = 205
	HTTPClientResponsePartialContent HTTPClientResponseCode = 206
	HTTPClientResponseMultiStatus HTTPClientResponseCode = 207
	HTTPClientResponseAlreadyReported HTTPClientResponseCode = 208
	HTTPClientResponseImUsed HTTPClientResponseCode = 226
	HTTPClientResponseMultipleChoices HTTPClientResponseCode = 300
	HTTPClientResponseMovedPermanently HTTPClientResponseCode = 301
	HTTPClientResponseFound HTTPClientResponseCode = 302
	HTTPClientResponseSeeOther HTTPClientResponseCode = 303
	HTTPClientResponseNotModified HTTPClientResponseCode = 304
	HTTPClientResponseUseProxy HTTPClientResponseCode = 305
	HTTPClientResponseSwitchProxy HTTPClientResponseCode = 306
	HTTPClientResponseTemporaryRedirect HTTPClientResponseCode = 307
	HTTPClientResponsePermanentRedirect HTTPClientResponseCode = 308
	HTTPClientResponseBadRequest HTTPClientResponseCode = 400
	HTTPClientResponseUnauthorized HTTPClientResponseCode = 401
	HTTPClientResponsePaymentRequired HTTPClientResponseCode = 402
	HTTPClientResponseForbidden HTTPClientResponseCode = 403
	HTTPClientResponseNotFound HTTPClientResponseCode = 404
	HTTPClientResponseMethodNotAllowed HTTPClientResponseCode = 405
	HTTPClientResponseNotAcceptable HTTPClientResponseCode = 406
	HTTPClientResponseProxyAuthenticationRequired HTTPClientResponseCode = 407
	HTTPClientResponseRequestTimeout HTTPClientResponseCode = 408
	HTTPClientResponseConflict HTTPClientResponseCode = 409
	HTTPClientResponseGone HTTPClientResponseCode = 410
	HTTPClientResponseLengthRequired HTTPClientResponseCode = 411
	HTTPClientResponsePreconditionFailed HTTPClientResponseCode = 412
	HTTPClientResponseRequestEntityTooLarge HTTPClientResponseCode = 413
	HTTPClientResponseRequestUriTooLong HTTPClientResponseCode = 414
	HTTPClientResponseUnsupportedMediaType HTTPClientResponseCode = 415
	HTTPClientResponseRequestedRangeNotSatisfiable HTTPClientResponseCode = 416
	HTTPClientResponseExpectationFailed HTTPClientResponseCode = 417
	HTTPClientResponseImATeapot HTTPClientResponseCode = 418
	HTTPClientResponseMisdirectedRequest HTTPClientResponseCode = 421
	HTTPClientResponseUnprocessableEntity HTTPClientResponseCode = 422
	HTTPClientResponseLocked HTTPClientResponseCode = 423
	HTTPClientResponseFailedDependency HTTPClientResponseCode = 424
	HTTPClientResponseUpgradeRequired HTTPClientResponseCode = 426
	HTTPClientResponsePreconditionRequired HTTPClientResponseCode = 428
	HTTPClientResponseTooManyRequests HTTPClientResponseCode = 429
	HTTPClientResponseRequestHeaderFieldsTooLarge HTTPClientResponseCode = 431
	HTTPClientResponseUnavailableForLegalReasons HTTPClientResponseCode = 451
	HTTPClientResponseInternalServerError HTTPClientResponseCode = 500
	HTTPClientResponseNotImplemented HTTPClientResponseCode = 501
	HTTPClientResponseBadGateway HTTPClientResponseCode = 502
	HTTPClientResponseServiceUnavailable HTTPClientResponseCode = 503
	HTTPClientResponseGatewayTimeout HTTPClientResponseCode = 504
	HTTPClientResponseHttpVersionNotSupported HTTPClientResponseCode = 505
	HTTPClientResponseVariantAlsoNegotiates HTTPClientResponseCode = 506
	HTTPClientResponseInsufficientStorage HTTPClientResponseCode = 507
	HTTPClientResponseLoopDetected HTTPClientResponseCode = 508
	HTTPClientResponseNotExtended HTTPClientResponseCode = 510
	HTTPClientResponseNetworkAuthRequired HTTPClientResponseCode = 511
)

type HTTPClient gdnative.Object
func (HTTPClient) class() string { return "HTTPClient\000" }

func (gdClass HTTPClient) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodHTTPClient [22]gdnative.Method
func (gdClass HTTPClient) ConnectToHost(host string, port int64, use_ssl bool, verify_host bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[0], host, port, use_ssl, verify_host) }
func (gdClass HTTPClient) SetConnection(connection StreamPeer)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[1], connection) }
func (gdClass HTTPClient) GetConnection() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodHTTPClient[2]) }
func (gdClass HTTPClient) RequestRaw(method HTTPClientMethod, url string, headers []string, body []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[3], method, url, headers, body) }
func (gdClass HTTPClient) Request(method HTTPClientMethod, url string, headers []string, body string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[4], method, url, headers, body) }
func (gdClass HTTPClient) Close()  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[5]) }
func (gdClass HTTPClient) HasResponse() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[6]) }
func (gdClass HTTPClient) IsResponseChunked() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[7]) }
func (gdClass HTTPClient) GetResponseCode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[8]) }
func (gdClass HTTPClient) GetResponseHeaders() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodHTTPClient[9]) }
func (gdClass HTTPClient) GetResponseHeadersAsDictionary() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodHTTPClient[10]) }
func (gdClass HTTPClient) GetResponseBodyLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[11]) }
func (gdClass HTTPClient) ReadResponseBodyChunk() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHTTPClient[12]) }
func (gdClass HTTPClient) SetReadChunkSize(bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[13], bytes) }
func (gdClass HTTPClient) GetReadChunkSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPClient[14]) }
func (gdClass HTTPClient) SetBlockingMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[15], enabled) }
func (gdClass HTTPClient) IsBlockingModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPClient[16]) }
func (gdClass HTTPClient) GetStatus() HTTPClientStatus { return gdnative.Return[HTTPClientStatus](gdnative.Object(gdClass), methodHTTPClient[17]) }
func (gdClass HTTPClient) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPClient[18]) }
func (gdClass HTTPClient) SetHttpProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[19], host, port) }
func (gdClass HTTPClient) SetHttpsProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPClient[20], host, port) }
func (gdClass HTTPClient) QueryStringFromDict(fields Dictionary) string { return gdnative.Return[string](gdnative.Object(gdClass), methodHTTPClient[21], fields) }

type HTTPRequestResult int64

const (
	HTTPRequestResultSuccess HTTPRequestResult = 0
	HTTPRequestResultChunkedBodySizeMismatch HTTPRequestResult = 1
	HTTPRequestResultCantConnect HTTPRequestResult = 2
	HTTPRequestResultCantResolve HTTPRequestResult = 3
	HTTPRequestResultConnectionError HTTPRequestResult = 4
	HTTPRequestResultSslHandshakeError HTTPRequestResult = 5
	HTTPRequestResultNoResponse HTTPRequestResult = 6
	HTTPRequestResultBodySizeLimitExceeded HTTPRequestResult = 7
	HTTPRequestResultBodyDecompressFailed HTTPRequestResult = 8
	HTTPRequestResultRequestFailed HTTPRequestResult = 9
	HTTPRequestResultDownloadFileCantOpen HTTPRequestResult = 10
	HTTPRequestResultDownloadFileWriteError HTTPRequestResult = 11
	HTTPRequestResultRedirectLimitReached HTTPRequestResult = 12
	HTTPRequestResultTimeout HTTPRequestResult = 13
)

type HTTPRequest gdnative.Object
func (HTTPRequest) class() string { return "HTTPRequest\000" }

func (gdClass HTTPRequest) Node() Node { return Node(gdClass) }

var methodHTTPRequest [22]gdnative.Method
func (gdClass HTTPRequest) Request(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPRequest[0], url, custom_headers, ssl_validate_domain, method, request_data) }
func (gdClass HTTPRequest) RequestRaw(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data_raw []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHTTPRequest[1], url, custom_headers, ssl_validate_domain, method, request_data_raw) }
func (gdClass HTTPRequest) CancelRequest()  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[2]) }
func (gdClass HTTPRequest) GetHttpClientStatus() HTTPClientStatus { return gdnative.Return[HTTPClientStatus](gdnative.Object(gdClass), methodHTTPRequest[3]) }
func (gdClass HTTPRequest) SetUseThreads(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[4], enable) }
func (gdClass HTTPRequest) IsUsingThreads() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPRequest[5]) }
func (gdClass HTTPRequest) SetAcceptGzip(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[6], enable) }
func (gdClass HTTPRequest) IsAcceptingGzip() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHTTPRequest[7]) }
func (gdClass HTTPRequest) SetBodySizeLimit(bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[8], bytes) }
func (gdClass HTTPRequest) GetBodySizeLimit() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[9]) }
func (gdClass HTTPRequest) SetMaxRedirects(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[10], amount) }
func (gdClass HTTPRequest) GetMaxRedirects() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[11]) }
func (gdClass HTTPRequest) SetDownloadFile(path string)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[12], path) }
func (gdClass HTTPRequest) GetDownloadFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodHTTPRequest[13]) }
func (gdClass HTTPRequest) GetDownloadedBytes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[14]) }
func (gdClass HTTPRequest) GetBodySize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[15]) }
func (gdClass HTTPRequest) SetTimeout(timeout float64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[16], timeout) }
func (gdClass HTTPRequest) GetTimeout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodHTTPRequest[17]) }
func (gdClass HTTPRequest) SetDownloadChunkSize(chunk_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[18], chunk_size) }
func (gdClass HTTPRequest) GetDownloadChunkSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHTTPRequest[19]) }
func (gdClass HTTPRequest) SetHttpProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[20], host, port) }
func (gdClass HTTPRequest) SetHttpsProxy(host string, port int64)  { gdnative.Call(gdnative.Object(gdClass), methodHTTPRequest[21], host, port) }

type HashingContextHashType int64

const (
	HashingContextHashMd5 HashingContextHashType = 0
	HashingContextHashSha1 HashingContextHashType = 1
	HashingContextHashSha256 HashingContextHashType = 2
)

type HashingContext gdnative.Object
func (HashingContext) class() string { return "HashingContext\000" }

func (gdClass HashingContext) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodHashingContext [3]gdnative.Method
func (gdClass HashingContext) Start(atype HashingContextHashType) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHashingContext[0], atype) }
func (gdClass HashingContext) Update(chunk []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodHashingContext[1], chunk) }
func (gdClass HashingContext) Finish() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodHashingContext[2]) }

type HeightMapShape3D gdnative.Object
func (HeightMapShape3D) class() string { return "HeightMapShape3D\000" }

func (gdClass HeightMapShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodHeightMapShape3D [6]gdnative.Method
func (gdClass HeightMapShape3D) SetMapWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[0], width) }
func (gdClass HeightMapShape3D) GetMapWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHeightMapShape3D[1]) }
func (gdClass HeightMapShape3D) SetMapDepth(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[2], height) }
func (gdClass HeightMapShape3D) GetMapDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodHeightMapShape3D[3]) }
func (gdClass HeightMapShape3D) SetMapData(data []float32)  { gdnative.Call(gdnative.Object(gdClass), methodHeightMapShape3D[4], data) }
func (gdClass HeightMapShape3D) GetMapData() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodHeightMapShape3D[5]) }

type HingeJoint3DParam int64

const (
	HingeJoint3DParamBias HingeJoint3DParam = 0
	HingeJoint3DParamLimitUpper HingeJoint3DParam = 1
	HingeJoint3DParamLimitLower HingeJoint3DParam = 2
	HingeJoint3DParamLimitBias HingeJoint3DParam = 3
	HingeJoint3DParamLimitSoftness HingeJoint3DParam = 4
	HingeJoint3DParamLimitRelaxation HingeJoint3DParam = 5
	HingeJoint3DParamMotorTargetVelocity HingeJoint3DParam = 6
	HingeJoint3DParamMotorMaxImpulse HingeJoint3DParam = 7
	HingeJoint3DParamMax HingeJoint3DParam = 8
)

type HingeJoint3DFlag int64

const (
	HingeJoint3DFlagUseLimit HingeJoint3DFlag = 0
	HingeJoint3DFlagEnableMotor HingeJoint3DFlag = 1
	HingeJoint3DFlagMax HingeJoint3DFlag = 2
)

type HingeJoint3D gdnative.Object
func (HingeJoint3D) class() string { return "HingeJoint3D\000" }

func (gdClass HingeJoint3D) Joint3D() Joint3D { return Joint3D(gdClass) }

var methodHingeJoint3D [4]gdnative.Method
func (gdClass HingeJoint3D) SetParam(param HingeJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodHingeJoint3D[0], param, value) }
func (gdClass HingeJoint3D) GetParam(param HingeJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodHingeJoint3D[1], param) }
func (gdClass HingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodHingeJoint3D[2], flag, enabled) }
func (gdClass HingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodHingeJoint3D[3], flag) }

type IPResolverStatus int64

const (
	IPResolverStatusNone IPResolverStatus = 0
	IPResolverStatusWaiting IPResolverStatus = 1
	IPResolverStatusDone IPResolverStatus = 2
	IPResolverStatusError IPResolverStatus = 3
)

type IPType int64

const (
	IPTypeNone IPType = 0
	IPTypeIpv4 IPType = 1
	IPTypeIpv6 IPType = 2
	IPTypeAny IPType = 3
)

type IP gdnative.Object
func (IP) class() string { return "IP\000" }

func (gdClass IP) Object() Object { return Object(gdClass) }

var methodIP [10]gdnative.Method
func (gdClass IP) ResolveHostname(host string, ip_type IPType) string { return gdnative.Return[string](gdnative.Object(gdClass), methodIP[0], host, ip_type) }
func (gdClass IP) ResolveHostnameAddresses(host string, ip_type IPType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[1], host, ip_type) }
func (gdClass IP) ResolveHostnameQueueItem(host string, ip_type IPType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodIP[2], host, ip_type) }
func (gdClass IP) GetResolveItemStatus(id int64) IPResolverStatus { return gdnative.Return[IPResolverStatus](gdnative.Object(gdClass), methodIP[3], id) }
func (gdClass IP) GetResolveItemAddress(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodIP[4], id) }
func (gdClass IP) GetResolveItemAddresses(id int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[5], id) }
func (gdClass IP) EraseResolveItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodIP[6], id) }
func (gdClass IP) GetLocalAddresses() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[7]) }
func (gdClass IP) GetLocalInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodIP[8]) }
func (gdClass IP) ClearCache(hostname string)  { gdnative.Call(gdnative.Object(gdClass), methodIP[9], hostname) }

type IPUnix gdnative.Object
func (IPUnix) class() string { return "IPUnix\000" }

func (gdClass IPUnix) IP() IP { return IP(gdClass) }


type ImageFormat int64

const (
	ImageFormatL8 ImageFormat = 0
	ImageFormatLa8 ImageFormat = 1
	ImageFormatR8 ImageFormat = 2
	ImageFormatRg8 ImageFormat = 3
	ImageFormatRgb8 ImageFormat = 4
	ImageFormatRgba8 ImageFormat = 5
	ImageFormatRgba4444 ImageFormat = 6
	ImageFormatRgb565 ImageFormat = 7
	ImageFormatRf ImageFormat = 8
	ImageFormatRgf ImageFormat = 9
	ImageFormatRgbf ImageFormat = 10
	ImageFormatRgbaf ImageFormat = 11
	ImageFormatRh ImageFormat = 12
	ImageFormatRgh ImageFormat = 13
	ImageFormatRgbh ImageFormat = 14
	ImageFormatRgbah ImageFormat = 15
	ImageFormatRgbe9995 ImageFormat = 16
	ImageFormatDxt1 ImageFormat = 17
	ImageFormatDxt3 ImageFormat = 18
	ImageFormatDxt5 ImageFormat = 19
	ImageFormatRgtcR ImageFormat = 20
	ImageFormatRgtcRg ImageFormat = 21
	ImageFormatBptcRgba ImageFormat = 22
	ImageFormatBptcRgbf ImageFormat = 23
	ImageFormatBptcRgbfu ImageFormat = 24
	ImageFormatEtc ImageFormat = 25
	ImageFormatEtc2R11 ImageFormat = 26
	ImageFormatEtc2R11s ImageFormat = 27
	ImageFormatEtc2Rg11 ImageFormat = 28
	ImageFormatEtc2Rg11s ImageFormat = 29
	ImageFormatEtc2Rgb8 ImageFormat = 30
	ImageFormatEtc2Rgba8 ImageFormat = 31
	ImageFormatEtc2Rgb8a1 ImageFormat = 32
	ImageFormatEtc2RaAsRg ImageFormat = 33
	ImageFormatDxt5RaAsRg ImageFormat = 34
	ImageFormatMax ImageFormat = 35
)

type ImageInterpolation int64

const (
	ImageInterpolateNearest ImageInterpolation = 0
	ImageInterpolateBilinear ImageInterpolation = 1
	ImageInterpolateCubic ImageInterpolation = 2
	ImageInterpolateTrilinear ImageInterpolation = 3
	ImageInterpolateLanczos ImageInterpolation = 4
)

type ImageAlphaMode int64

const (
	ImageAlphaNone ImageAlphaMode = 0
	ImageAlphaBit ImageAlphaMode = 1
	ImageAlphaBlend ImageAlphaMode = 2
)

type ImageCompressMode int64

const (
	ImageCompressS3tc ImageCompressMode = 0
	ImageCompressEtc ImageCompressMode = 1
	ImageCompressEtc2 ImageCompressMode = 2
	ImageCompressBptc ImageCompressMode = 3
)

type ImageUsedChannels int64

const (
	ImageUsedChannelsL ImageUsedChannels = 0
	ImageUsedChannelsLa ImageUsedChannels = 1
	ImageUsedChannelsR ImageUsedChannels = 2
	ImageUsedChannelsRg ImageUsedChannels = 3
	ImageUsedChannelsRgb ImageUsedChannels = 4
	ImageUsedChannelsRgba ImageUsedChannels = 5
)

type ImageCompressSource int64

const (
	ImageCompressSourceGeneric ImageCompressSource = 0
	ImageCompressSourceSrgb ImageCompressSource = 1
	ImageCompressSourceNormal ImageCompressSource = 2
)

type Image gdnative.Object
func (Image) class() string { return "Image\000" }

func (gdClass Image) Resource() Resource { return Resource(gdClass) }

var methodImage [64]gdnative.Method
func (gdClass Image) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[0]) }
func (gdClass Image) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[1]) }
func (gdClass Image) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodImage[2]) }
func (gdClass Image) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[3]) }
func (gdClass Image) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodImage[4]) }
func (gdClass Image) GetData() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[5]) }
func (gdClass Image) Convert(format ImageFormat)  { gdnative.Call(gdnative.Object(gdClass), methodImage[6], format) }
func (gdClass Image) GetMipmapOffset(mipmap int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImage[7], mipmap) }
func (gdClass Image) ResizeToPo2(square bool, interpolation ImageInterpolation)  { gdnative.Call(gdnative.Object(gdClass), methodImage[8], square, interpolation) }
func (gdClass Image) Resize(width int64, height int64, interpolation ImageInterpolation)  { gdnative.Call(gdnative.Object(gdClass), methodImage[9], width, height, interpolation) }
func (gdClass Image) ShrinkX2()  { gdnative.Call(gdnative.Object(gdClass), methodImage[10]) }
func (gdClass Image) Crop(width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[11], width, height) }
func (gdClass Image) FlipX()  { gdnative.Call(gdnative.Object(gdClass), methodImage[12]) }
func (gdClass Image) FlipY()  { gdnative.Call(gdnative.Object(gdClass), methodImage[13]) }
func (gdClass Image) GenerateMipmaps(renormalize bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[14], renormalize) }
func (gdClass Image) ClearMipmaps()  { gdnative.Call(gdnative.Object(gdClass), methodImage[15]) }
func (gdClass Image) Create(width int64, height int64, use_mipmaps bool, format ImageFormat)  { gdnative.Call(gdnative.Object(gdClass), methodImage[16], width, height, use_mipmaps, format) }
func (gdClass Image) CreateFromData(width int64, height int64, use_mipmaps bool, format ImageFormat, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodImage[17], width, height, use_mipmaps, format, data) }
func (gdClass Image) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[18]) }
func (gdClass Image) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[19], path) }
func (gdClass Image) LoadFromFile(path string) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[20], path) }
func (gdClass Image) SavePng(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[21], path) }
func (gdClass Image) SavePngToBuffer() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[22]) }
func (gdClass Image) SaveJpg(path string, quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[23], path, quality) }
func (gdClass Image) SaveJpgToBuffer(quality float64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[24], quality) }
func (gdClass Image) SaveExr(path string, grayscale bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[25], path, grayscale) }
func (gdClass Image) SaveExrToBuffer(grayscale bool) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[26], grayscale) }
func (gdClass Image) SaveWebp(path string, lossy bool, quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[27], path, lossy, quality) }
func (gdClass Image) SaveWebpToBuffer(lossy bool, quality float64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodImage[28], lossy, quality) }
func (gdClass Image) DetectAlpha() ImageAlphaMode { return gdnative.Return[ImageAlphaMode](gdnative.Object(gdClass), methodImage[29]) }
func (gdClass Image) IsInvisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[30]) }
func (gdClass Image) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels { return gdnative.Return[ImageUsedChannels](gdnative.Object(gdClass), methodImage[31], source) }
func (gdClass Image) Compress(mode ImageCompressMode, source ImageCompressSource, lossy_quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[32], mode, source, lossy_quality) }
func (gdClass Image) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, lossy_quality float64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[33], mode, channels, lossy_quality) }
func (gdClass Image) Decompress() error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[34]) }
func (gdClass Image) IsCompressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodImage[35]) }
func (gdClass Image) Rotate90(direction ClockDirection)  { gdnative.Call(gdnative.Object(gdClass), methodImage[36], direction) }
func (gdClass Image) Rotate180()  { gdnative.Call(gdnative.Object(gdClass), methodImage[37]) }
func (gdClass Image) FixAlphaEdges()  { gdnative.Call(gdnative.Object(gdClass), methodImage[38]) }
func (gdClass Image) PremultiplyAlpha()  { gdnative.Call(gdnative.Object(gdClass), methodImage[39]) }
func (gdClass Image) SrgbToLinear()  { gdnative.Call(gdnative.Object(gdClass), methodImage[40]) }
func (gdClass Image) NormalMapToXy()  { gdnative.Call(gdnative.Object(gdClass), methodImage[41]) }
func (gdClass Image) RgbeToSrgb() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[42]) }
func (gdClass Image) BumpMapToNormalMap(bump_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[43], bump_scale) }
func (gdClass Image) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodImage[44], compared_image, use_luma) }
func (gdClass Image) BlitRect(src Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[45], src, src_rect, dst) }
func (gdClass Image) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[46], src, mask, src_rect, dst) }
func (gdClass Image) BlendRect(src Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[47], src, src_rect, dst) }
func (gdClass Image) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImage[48], src, mask, src_rect, dst) }
func (gdClass Image) Fill(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[49], color) }
func (gdClass Image) FillRect(rect Rect2i, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[50], rect, color) }
func (gdClass Image) GetUsedRect() Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodImage[51]) }
func (gdClass Image) GetRect(rect Rect2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodImage[52], rect) }
func (gdClass Image) CopyFrom(src Image)  { gdnative.Call(gdnative.Object(gdClass), methodImage[53], src) }
func (gdClass Image) GetPixelv(point Vector2i) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodImage[54], point) }
func (gdClass Image) GetPixel(x int64, y int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodImage[55], x, y) }
func (gdClass Image) SetPixelv(point Vector2i, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[56], point, color) }
func (gdClass Image) SetPixel(x int64, y int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImage[57], x, y, color) }
func (gdClass Image) AdjustBcs(brightness float64, contrast float64, saturation float64)  { gdnative.Call(gdnative.Object(gdClass), methodImage[58], brightness, contrast, saturation) }
func (gdClass Image) LoadPngFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[59], buffer) }
func (gdClass Image) LoadJpgFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[60], buffer) }
func (gdClass Image) LoadWebpFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[61], buffer) }
func (gdClass Image) LoadTgaFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[62], buffer) }
func (gdClass Image) LoadBmpFromBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImage[63], buffer) }

type ImageTexture gdnative.Object
func (ImageTexture) class() string { return "ImageTexture\000" }

func (gdClass ImageTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodImageTexture [5]gdnative.Method
func (gdClass ImageTexture) CreateFromImage(image Image) ImageTexture { return gdnative.Return[ImageTexture](gdnative.Object(gdClass), methodImageTexture[0], image) }
func (gdClass ImageTexture) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodImageTexture[1]) }
func (gdClass ImageTexture) SetImage(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[2], image) }
func (gdClass ImageTexture) Update(image Image)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[3], image) }
func (gdClass ImageTexture) SetSizeOverride(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture[4], size) }

type ImageTexture3D gdnative.Object
func (ImageTexture3D) class() string { return "ImageTexture3D\000" }

func (gdClass ImageTexture3D) Texture3D() Texture3D { return Texture3D(gdClass) }

var methodImageTexture3D [2]gdnative.Method
func (gdClass ImageTexture3D) Create(format ImageFormat, width int64, height int64, depth int64, use_mipmaps bool, data Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImageTexture3D[0], format, width, height, depth, use_mipmaps, data) }
func (gdClass ImageTexture3D) Update(data Array)  { gdnative.Call(gdnative.Object(gdClass), methodImageTexture3D[1], data) }

type ImageTextureLayered gdnative.Object
func (ImageTextureLayered) class() string { return "ImageTextureLayered\000" }

func (gdClass ImageTextureLayered) TextureLayered() TextureLayered { return TextureLayered(gdClass) }

var methodImageTextureLayered [2]gdnative.Method
func (gdClass ImageTextureLayered) CreateFromImages(images Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodImageTextureLayered[0], images) }
func (gdClass ImageTextureLayered) UpdateLayer(image Image, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodImageTextureLayered[1], image, layer) }

type ImmediateMesh gdnative.Object
func (ImmediateMesh) class() string { return "ImmediateMesh\000" }

func (gdClass ImmediateMesh) Mesh() Mesh { return Mesh(gdClass) }

var methodImmediateMesh [10]gdnative.Method
func (gdClass ImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[0], primitive, material) }
func (gdClass ImmediateMesh) SurfaceSetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[1], color) }
func (gdClass ImmediateMesh) SurfaceSetNormal(normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[2], normal) }
func (gdClass ImmediateMesh) SurfaceSetTangent(tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[3], tangent) }
func (gdClass ImmediateMesh) SurfaceSetUv(uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[4], uv) }
func (gdClass ImmediateMesh) SurfaceSetUv2(uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[5], uv2) }
func (gdClass ImmediateMesh) SurfaceAddVertex(vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[6], vertex) }
func (gdClass ImmediateMesh) SurfaceAddVertex2d(vertex Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[7], vertex) }
func (gdClass ImmediateMesh) SurfaceEnd()  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[8]) }
func (gdClass ImmediateMesh) ClearSurfaces()  { gdnative.Call(gdnative.Object(gdClass), methodImmediateMesh[9]) }

type ImporterMesh gdnative.Object
func (ImporterMesh) class() string { return "ImporterMesh\000" }

func (gdClass ImporterMesh) Resource() Resource { return Resource(gdClass) }

var methodImporterMesh [23]gdnative.Method
func (gdClass ImporterMesh) AddBlendShape(name string)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[0], name) }
func (gdClass ImporterMesh) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[1]) }
func (gdClass ImporterMesh) GetBlendShapeName(blend_shape_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodImporterMesh[2], blend_shape_idx) }
func (gdClass ImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[3], mode) }
func (gdClass ImporterMesh) GetBlendShapeMode() MeshBlendShapeMode { return gdnative.Return[MeshBlendShapeMode](gdnative.Object(gdClass), methodImporterMesh[4]) }
func (gdClass ImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, material Material, name string, flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[5], primitive, arrays, blend_shapes, lods, material, name, flags) }
func (gdClass ImporterMesh) GetSurfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[6]) }
func (gdClass ImporterMesh) GetSurfacePrimitiveType(surface_idx int64) MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodImporterMesh[7], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceName(surface_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodImporterMesh[8], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceArrays(surface_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodImporterMesh[9], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodImporterMesh[10], surface_idx, blend_shape_idx) }
func (gdClass ImporterMesh) GetSurfaceLodCount(surface_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[11], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceLodSize(surface_idx int64, lod_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodImporterMesh[12], surface_idx, lod_idx) }
func (gdClass ImporterMesh) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodImporterMesh[13], surface_idx, lod_idx) }
func (gdClass ImporterMesh) GetSurfaceMaterial(surface_idx int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodImporterMesh[14], surface_idx) }
func (gdClass ImporterMesh) GetSurfaceFormat(surface_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodImporterMesh[15], surface_idx) }
func (gdClass ImporterMesh) SetSurfaceName(surface_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[16], surface_idx, name) }
func (gdClass ImporterMesh) SetSurfaceMaterial(surface_idx int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[17], surface_idx, material) }
func (gdClass ImporterMesh) GenerateLods(normal_merge_angle float64, normal_split_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[18], normal_merge_angle, normal_split_angle) }
func (gdClass ImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodImporterMesh[19], base_mesh) }
func (gdClass ImporterMesh) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[20]) }
func (gdClass ImporterMesh) SetLightmapSizeHint(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMesh[21], size) }
func (gdClass ImporterMesh) GetLightmapSizeHint() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodImporterMesh[22]) }

type ImporterMeshInstance3D gdnative.Object
func (ImporterMeshInstance3D) class() string { return "ImporterMeshInstance3D\000" }

func (gdClass ImporterMeshInstance3D) Node3D() Node3D { return Node3D(gdClass) }

var methodImporterMeshInstance3D [6]gdnative.Method
func (gdClass ImporterMeshInstance3D) SetMesh(mesh ImporterMesh)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[0], mesh) }
func (gdClass ImporterMeshInstance3D) GetMesh() ImporterMesh { return gdnative.Return[ImporterMesh](gdnative.Object(gdClass), methodImporterMeshInstance3D[1]) }
func (gdClass ImporterMeshInstance3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[2], skin) }
func (gdClass ImporterMeshInstance3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodImporterMeshInstance3D[3]) }
func (gdClass ImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodImporterMeshInstance3D[4], skeleton_path) }
func (gdClass ImporterMeshInstance3D) GetSkeletonPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodImporterMeshInstance3D[5]) }

type InputMouseMode int64

const (
	InputMouseModeVisible InputMouseMode = 0
	InputMouseModeHidden InputMouseMode = 1
	InputMouseModeCaptured InputMouseMode = 2
	InputMouseModeConfined InputMouseMode = 3
	InputMouseModeConfinedHidden InputMouseMode = 4
)

type InputCursorShape int64

const (
	InputCursorArrow InputCursorShape = 0
	InputCursorIbeam InputCursorShape = 1
	InputCursorPointingHand InputCursorShape = 2
	InputCursorCross InputCursorShape = 3
	InputCursorWait InputCursorShape = 4
	InputCursorBusy InputCursorShape = 5
	InputCursorDrag InputCursorShape = 6
	InputCursorCanDrop InputCursorShape = 7
	InputCursorForbidden InputCursorShape = 8
	InputCursorVsize InputCursorShape = 9
	InputCursorHsize InputCursorShape = 10
	InputCursorBdiagsize InputCursorShape = 11
	InputCursorFdiagsize InputCursorShape = 12
	InputCursorMove InputCursorShape = 13
	InputCursorVsplit InputCursorShape = 14
	InputCursorHsplit InputCursorShape = 15
	InputCursorHelp InputCursorShape = 16
)

type Input gdnative.Object
func (Input) class() string { return "Input\000" }

func (gdClass Input) Object() Object { return Object(gdClass) }

var methodInput [46]gdnative.Method
func (gdClass Input) IsAnythingPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[0]) }
func (gdClass Input) IsKeyPressed(keycode Key) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[1], keycode) }
func (gdClass Input) IsPhysicalKeyPressed(keycode Key) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[2], keycode) }
func (gdClass Input) IsMouseButtonPressed(button MouseButton) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[3], button) }
func (gdClass Input) IsJoyButtonPressed(device int64, button JoyButton) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[4], device, button) }
func (gdClass Input) IsActionPressed(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[5], action, exact_match) }
func (gdClass Input) IsActionJustPressed(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[6], action, exact_match) }
func (gdClass Input) IsActionJustReleased(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[7], action, exact_match) }
func (gdClass Input) GetActionStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[8], action, exact_match) }
func (gdClass Input) GetActionRawStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[9], action, exact_match) }
func (gdClass Input) GetAxis(negative_action string, positive_action string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[10], negative_action, positive_action) }
func (gdClass Input) GetVector(negative_x string, positive_x string, negative_y string, positive_y string, deadzone float64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[11], negative_x, positive_x, negative_y, positive_y, deadzone) }
func (gdClass Input) AddJoyMapping(mapping string, update_existing bool)  { gdnative.Call(gdnative.Object(gdClass), methodInput[12], mapping, update_existing) }
func (gdClass Input) RemoveJoyMapping(guid string)  { gdnative.Call(gdnative.Object(gdClass), methodInput[13], guid) }
func (gdClass Input) IsJoyKnown(device int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[14], device) }
func (gdClass Input) GetJoyAxis(device int64, axis JoyAxis) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[15], device, axis) }
func (gdClass Input) GetJoyName(device int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodInput[16], device) }
func (gdClass Input) GetJoyGuid(device int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodInput[17], device) }
func (gdClass Input) GetConnectedJoypads() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInput[18]) }
func (gdClass Input) GetJoyVibrationStrength(device int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[19], device) }
func (gdClass Input) GetJoyVibrationDuration(device int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInput[20], device) }
func (gdClass Input) StartJoyVibration(device int64, weak_magnitude float64, strong_magnitude float64, duration float64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[21], device, weak_magnitude, strong_magnitude, duration) }
func (gdClass Input) StopJoyVibration(device int64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[22], device) }
func (gdClass Input) VibrateHandheld(duration_ms int64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[23], duration_ms) }
func (gdClass Input) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[24]) }
func (gdClass Input) GetAccelerometer() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[25]) }
func (gdClass Input) GetMagnetometer() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[26]) }
func (gdClass Input) GetGyroscope() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodInput[27]) }
func (gdClass Input) SetGravity(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[28], value) }
func (gdClass Input) SetAccelerometer(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[29], value) }
func (gdClass Input) SetMagnetometer(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[30], value) }
func (gdClass Input) SetGyroscope(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodInput[31], value) }
func (gdClass Input) GetLastMouseVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInput[32]) }
func (gdClass Input) GetMouseButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInput[33]) }
func (gdClass Input) SetMouseMode(mode InputMouseMode)  { gdnative.Call(gdnative.Object(gdClass), methodInput[34], mode) }
func (gdClass Input) GetMouseMode() InputMouseMode { return gdnative.Return[InputMouseMode](gdnative.Object(gdClass), methodInput[35]) }
func (gdClass Input) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInput[36], position) }
func (gdClass Input) ActionPress(action string, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodInput[37], action, strength) }
func (gdClass Input) ActionRelease(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInput[38], action) }
func (gdClass Input) SetDefaultCursorShape(shape InputCursorShape)  { gdnative.Call(gdnative.Object(gdClass), methodInput[39], shape) }
func (gdClass Input) GetCurrentCursorShape() InputCursorShape { return gdnative.Return[InputCursorShape](gdnative.Object(gdClass), methodInput[40]) }
func (gdClass Input) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInput[41], image, shape, hotspot) }
func (gdClass Input) ParseInputEvent(event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInput[42], event) }
func (gdClass Input) SetUseAccumulatedInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodInput[43], enable) }
func (gdClass Input) IsUsingAccumulatedInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInput[44]) }
func (gdClass Input) FlushBufferedEvents()  { gdnative.Call(gdnative.Object(gdClass), methodInput[45]) }

type InputEvent gdnative.Object
func (InputEvent) class() string { return "InputEvent\000" }

func (gdClass InputEvent) Resource() Resource { return Resource(gdClass) }

var methodInputEvent [13]gdnative.Method
func (gdClass InputEvent) SetDevice(device int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEvent[0], device) }
func (gdClass InputEvent) GetDevice() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEvent[1]) }
func (gdClass InputEvent) IsAction(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[2], action, exact_match) }
func (gdClass InputEvent) IsActionPressed(action string, allow_echo bool, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[3], action, allow_echo, exact_match) }
func (gdClass InputEvent) IsActionReleased(action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[4], action, exact_match) }
func (gdClass InputEvent) GetActionStrength(action string, exact_match bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEvent[5], action, exact_match) }
func (gdClass InputEvent) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[6]) }
func (gdClass InputEvent) IsEcho() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[7]) }
func (gdClass InputEvent) AsText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInputEvent[8]) }
func (gdClass InputEvent) IsMatch(event InputEvent, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[9], event, exact_match) }
func (gdClass InputEvent) IsActionType() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[10]) }
func (gdClass InputEvent) Accumulate(with_event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEvent[11], with_event) }
func (gdClass InputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent { return gdnative.Return[InputEvent](gdnative.Object(gdClass), methodInputEvent[12], xform, local_ofs) }

type InputEventAction gdnative.Object
func (InputEventAction) class() string { return "InputEventAction\000" }

func (gdClass InputEventAction) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventAction [5]gdnative.Method
func (gdClass InputEventAction) SetAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[0], action) }
func (gdClass InputEventAction) GetAction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInputEventAction[1]) }
func (gdClass InputEventAction) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[2], pressed) }
func (gdClass InputEventAction) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventAction[3], strength) }
func (gdClass InputEventAction) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventAction[4]) }

type InputEventFromWindow gdnative.Object
func (InputEventFromWindow) class() string { return "InputEventFromWindow\000" }

func (gdClass InputEventFromWindow) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventFromWindow [2]gdnative.Method
func (gdClass InputEventFromWindow) SetWindowId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventFromWindow[0], id) }
func (gdClass InputEventFromWindow) GetWindowId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventFromWindow[1]) }

type InputEventGesture gdnative.Object
func (InputEventGesture) class() string { return "InputEventGesture\000" }

func (gdClass InputEventGesture) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers(gdClass) }

var methodInputEventGesture [2]gdnative.Method
func (gdClass InputEventGesture) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventGesture[0], position) }
func (gdClass InputEventGesture) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventGesture[1]) }

type InputEventJoypadButton gdnative.Object
func (InputEventJoypadButton) class() string { return "InputEventJoypadButton\000" }

func (gdClass InputEventJoypadButton) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventJoypadButton [5]gdnative.Method
func (gdClass InputEventJoypadButton) SetButtonIndex(button_index JoyButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[0], button_index) }
func (gdClass InputEventJoypadButton) GetButtonIndex() JoyButton { return gdnative.Return[JoyButton](gdnative.Object(gdClass), methodInputEventJoypadButton[1]) }
func (gdClass InputEventJoypadButton) SetPressure(pressure float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[2], pressure) }
func (gdClass InputEventJoypadButton) GetPressure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventJoypadButton[3]) }
func (gdClass InputEventJoypadButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadButton[4], pressed) }

type InputEventJoypadMotion gdnative.Object
func (InputEventJoypadMotion) class() string { return "InputEventJoypadMotion\000" }

func (gdClass InputEventJoypadMotion) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventJoypadMotion [4]gdnative.Method
func (gdClass InputEventJoypadMotion) SetAxis(axis JoyAxis)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadMotion[0], axis) }
func (gdClass InputEventJoypadMotion) GetAxis() JoyAxis { return gdnative.Return[JoyAxis](gdnative.Object(gdClass), methodInputEventJoypadMotion[1]) }
func (gdClass InputEventJoypadMotion) SetAxisValue(axis_value float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventJoypadMotion[2], axis_value) }
func (gdClass InputEventJoypadMotion) GetAxisValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventJoypadMotion[3]) }

type InputEventKey gdnative.Object
func (InputEventKey) class() string { return "InputEventKey\000" }

func (gdClass InputEventKey) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers(gdClass) }

var methodInputEventKey [10]gdnative.Method
func (gdClass InputEventKey) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[0], pressed) }
func (gdClass InputEventKey) SetKeycode(keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[1], keycode) }
func (gdClass InputEventKey) GetKeycode() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[2]) }
func (gdClass InputEventKey) SetPhysicalKeycode(physical_keycode Key)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[3], physical_keycode) }
func (gdClass InputEventKey) GetPhysicalKeycode() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[4]) }
func (gdClass InputEventKey) SetUnicode(unicode int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[5], unicode) }
func (gdClass InputEventKey) GetUnicode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventKey[6]) }
func (gdClass InputEventKey) SetEcho(echo bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventKey[7], echo) }
func (gdClass InputEventKey) GetKeycodeWithModifiers() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[8]) }
func (gdClass InputEventKey) GetPhysicalKeycodeWithModifiers() Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodInputEventKey[9]) }

type InputEventMIDI gdnative.Object
func (InputEventMIDI) class() string { return "InputEventMIDI\000" }

func (gdClass InputEventMIDI) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventMIDI [16]gdnative.Method
func (gdClass InputEventMIDI) SetChannel(channel int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[0], channel) }
func (gdClass InputEventMIDI) GetChannel() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[1]) }
func (gdClass InputEventMIDI) SetMessage(message MIDIMessage)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[2], message) }
func (gdClass InputEventMIDI) GetMessage() MIDIMessage { return gdnative.Return[MIDIMessage](gdnative.Object(gdClass), methodInputEventMIDI[3]) }
func (gdClass InputEventMIDI) SetPitch(pitch int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[4], pitch) }
func (gdClass InputEventMIDI) GetPitch() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[5]) }
func (gdClass InputEventMIDI) SetVelocity(velocity int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[6], velocity) }
func (gdClass InputEventMIDI) GetVelocity() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[7]) }
func (gdClass InputEventMIDI) SetInstrument(instrument int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[8], instrument) }
func (gdClass InputEventMIDI) GetInstrument() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[9]) }
func (gdClass InputEventMIDI) SetPressure(pressure int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[10], pressure) }
func (gdClass InputEventMIDI) GetPressure() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[11]) }
func (gdClass InputEventMIDI) SetControllerNumber(controller_number int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[12], controller_number) }
func (gdClass InputEventMIDI) GetControllerNumber() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[13]) }
func (gdClass InputEventMIDI) SetControllerValue(controller_value int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMIDI[14], controller_value) }
func (gdClass InputEventMIDI) GetControllerValue() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventMIDI[15]) }

type InputEventMagnifyGesture gdnative.Object
func (InputEventMagnifyGesture) class() string { return "InputEventMagnifyGesture\000" }

func (gdClass InputEventMagnifyGesture) InputEventGesture() InputEventGesture { return InputEventGesture(gdClass) }

var methodInputEventMagnifyGesture [2]gdnative.Method
func (gdClass InputEventMagnifyGesture) SetFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMagnifyGesture[0], factor) }
func (gdClass InputEventMagnifyGesture) GetFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMagnifyGesture[1]) }

type InputEventMouse gdnative.Object
func (InputEventMouse) class() string { return "InputEventMouse\000" }

func (gdClass InputEventMouse) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers(gdClass) }

var methodInputEventMouse [6]gdnative.Method
func (gdClass InputEventMouse) SetButtonMask(button_mask MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[0], button_mask) }
func (gdClass InputEventMouse) GetButtonMask() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInputEventMouse[1]) }
func (gdClass InputEventMouse) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[2], position) }
func (gdClass InputEventMouse) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouse[3]) }
func (gdClass InputEventMouse) SetGlobalPosition(global_position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouse[4], global_position) }
func (gdClass InputEventMouse) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouse[5]) }

type InputEventMouseButton gdnative.Object
func (InputEventMouseButton) class() string { return "InputEventMouseButton\000" }

func (gdClass InputEventMouseButton) InputEventMouse() InputEventMouse { return InputEventMouse(gdClass) }

var methodInputEventMouseButton [7]gdnative.Method
func (gdClass InputEventMouseButton) SetFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[0], factor) }
func (gdClass InputEventMouseButton) GetFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMouseButton[1]) }
func (gdClass InputEventMouseButton) SetButtonIndex(button_index MouseButton)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[2], button_index) }
func (gdClass InputEventMouseButton) GetButtonIndex() MouseButton { return gdnative.Return[MouseButton](gdnative.Object(gdClass), methodInputEventMouseButton[3]) }
func (gdClass InputEventMouseButton) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[4], pressed) }
func (gdClass InputEventMouseButton) SetDoubleClick(double_click bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseButton[5], double_click) }
func (gdClass InputEventMouseButton) IsDoubleClick() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventMouseButton[6]) }

type InputEventMouseMotion gdnative.Object
func (InputEventMouseMotion) class() string { return "InputEventMouseMotion\000" }

func (gdClass InputEventMouseMotion) InputEventMouse() InputEventMouse { return InputEventMouse(gdClass) }

var methodInputEventMouseMotion [10]gdnative.Method
func (gdClass InputEventMouseMotion) SetTilt(tilt Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[0], tilt) }
func (gdClass InputEventMouseMotion) GetTilt() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[1]) }
func (gdClass InputEventMouseMotion) SetPressure(pressure float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[2], pressure) }
func (gdClass InputEventMouseMotion) GetPressure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputEventMouseMotion[3]) }
func (gdClass InputEventMouseMotion) SetPenInverted(pen_inverted bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[4], pen_inverted) }
func (gdClass InputEventMouseMotion) GetPenInverted() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventMouseMotion[5]) }
func (gdClass InputEventMouseMotion) SetRelative(relative Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[6], relative) }
func (gdClass InputEventMouseMotion) GetRelative() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[7]) }
func (gdClass InputEventMouseMotion) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventMouseMotion[8], velocity) }
func (gdClass InputEventMouseMotion) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventMouseMotion[9]) }

type InputEventPanGesture gdnative.Object
func (InputEventPanGesture) class() string { return "InputEventPanGesture\000" }

func (gdClass InputEventPanGesture) InputEventGesture() InputEventGesture { return InputEventGesture(gdClass) }

var methodInputEventPanGesture [2]gdnative.Method
func (gdClass InputEventPanGesture) SetDelta(delta Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventPanGesture[0], delta) }
func (gdClass InputEventPanGesture) GetDelta() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventPanGesture[1]) }

type InputEventScreenDrag gdnative.Object
func (InputEventScreenDrag) class() string { return "InputEventScreenDrag\000" }

func (gdClass InputEventScreenDrag) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow(gdClass) }

var methodInputEventScreenDrag [8]gdnative.Method
func (gdClass InputEventScreenDrag) SetIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[0], index) }
func (gdClass InputEventScreenDrag) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventScreenDrag[1]) }
func (gdClass InputEventScreenDrag) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[2], position) }
func (gdClass InputEventScreenDrag) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[3]) }
func (gdClass InputEventScreenDrag) SetRelative(relative Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[4], relative) }
func (gdClass InputEventScreenDrag) GetRelative() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[5]) }
func (gdClass InputEventScreenDrag) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenDrag[6], velocity) }
func (gdClass InputEventScreenDrag) GetVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenDrag[7]) }

type InputEventScreenTouch gdnative.Object
func (InputEventScreenTouch) class() string { return "InputEventScreenTouch\000" }

func (gdClass InputEventScreenTouch) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow(gdClass) }

var methodInputEventScreenTouch [5]gdnative.Method
func (gdClass InputEventScreenTouch) SetIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[0], index) }
func (gdClass InputEventScreenTouch) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodInputEventScreenTouch[1]) }
func (gdClass InputEventScreenTouch) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[2], position) }
func (gdClass InputEventScreenTouch) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodInputEventScreenTouch[3]) }
func (gdClass InputEventScreenTouch) SetPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventScreenTouch[4], pressed) }

type InputEventShortcut gdnative.Object
func (InputEventShortcut) class() string { return "InputEventShortcut\000" }

func (gdClass InputEventShortcut) InputEvent() InputEvent { return InputEvent(gdClass) }

var methodInputEventShortcut [2]gdnative.Method
func (gdClass InputEventShortcut) SetShortcut(shortcut Shortcut)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventShortcut[0], shortcut) }
func (gdClass InputEventShortcut) GetShortcut() Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodInputEventShortcut[1]) }

type InputEventWithModifiers gdnative.Object
func (InputEventWithModifiers) class() string { return "InputEventWithModifiers\000" }

func (gdClass InputEventWithModifiers) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow(gdClass) }

var methodInputEventWithModifiers [12]gdnative.Method
func (gdClass InputEventWithModifiers) SetStoreCommand(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[0], enable) }
func (gdClass InputEventWithModifiers) IsStoringCommand() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[1]) }
func (gdClass InputEventWithModifiers) SetAltPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[2], pressed) }
func (gdClass InputEventWithModifiers) IsAltPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[3]) }
func (gdClass InputEventWithModifiers) SetShiftPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[4], pressed) }
func (gdClass InputEventWithModifiers) IsShiftPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[5]) }
func (gdClass InputEventWithModifiers) SetCtrlPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[6], pressed) }
func (gdClass InputEventWithModifiers) IsCtrlPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[7]) }
func (gdClass InputEventWithModifiers) SetMetaPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[8], pressed) }
func (gdClass InputEventWithModifiers) IsMetaPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[9]) }
func (gdClass InputEventWithModifiers) SetCommandPressed(pressed bool)  { gdnative.Call(gdnative.Object(gdClass), methodInputEventWithModifiers[10], pressed) }
func (gdClass InputEventWithModifiers) IsCommandPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputEventWithModifiers[11]) }

type InputMap gdnative.Object
func (InputMap) class() string { return "InputMap\000" }

func (gdClass InputMap) Object() Object { return Object(gdClass) }

var methodInputMap [13]gdnative.Method
func (gdClass InputMap) HasAction(action string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[0], action) }
func (gdClass InputMap) GetActions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInputMap[1]) }
func (gdClass InputMap) AddAction(action string, deadzone float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[2], action, deadzone) }
func (gdClass InputMap) EraseAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[3], action) }
func (gdClass InputMap) ActionSetDeadzone(action string, deadzone float64)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[4], action, deadzone) }
func (gdClass InputMap) ActionGetDeadzone(action string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodInputMap[5], action) }
func (gdClass InputMap) ActionAddEvent(action string, event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[6], action, event) }
func (gdClass InputMap) ActionHasEvent(action string, event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[7], action, event) }
func (gdClass InputMap) ActionEraseEvent(action string, event InputEvent)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[8], action, event) }
func (gdClass InputMap) ActionEraseEvents(action string)  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[9], action) }
func (gdClass InputMap) ActionGetEvents(action string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodInputMap[10], action) }
func (gdClass InputMap) EventIsAction(event InputEvent, action string, exact_match bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodInputMap[11], event, action, exact_match) }
func (gdClass InputMap) LoadFromProjectSettings()  { gdnative.Call(gdnative.Object(gdClass), methodInputMap[12]) }

type InstancePlaceholder gdnative.Object
func (InstancePlaceholder) class() string { return "InstancePlaceholder\000" }

func (gdClass InstancePlaceholder) Node() Node { return Node(gdClass) }

var methodInstancePlaceholder [3]gdnative.Method
func (gdClass InstancePlaceholder) GetStoredValues(with_order bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodInstancePlaceholder[0], with_order) }
func (gdClass InstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodInstancePlaceholder[1], replace, custom_scene) }
func (gdClass InstancePlaceholder) GetInstancePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodInstancePlaceholder[2]) }

type IntervalTweener gdnative.Object
func (IntervalTweener) class() string { return "IntervalTweener\000" }

func (gdClass IntervalTweener) Tweener() Tweener { return Tweener(gdClass) }


type ItemListIconMode int64

const (
	ItemListIconModeTop ItemListIconMode = 0
	ItemListIconModeLeft ItemListIconMode = 1
)

type ItemListSelectMode int64

const (
	ItemListSelectSingle ItemListSelectMode = 0
	ItemListSelectMulti ItemListSelectMode = 1
)

type ItemList gdnative.Object
func (ItemList) class() string { return "ItemList\000" }

func (gdClass ItemList) Control() Control { return Control(gdClass) }

var methodItemList [69]gdnative.Method
func (gdClass ItemList) AddItem(text string, icon Texture2D, selectable bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[0], text, icon, selectable) }
func (gdClass ItemList) AddIconItem(icon Texture2D, selectable bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[1], icon, selectable) }
func (gdClass ItemList) SetItemText(idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[2], idx, text) }
func (gdClass ItemList) GetItemText(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[3], idx) }
func (gdClass ItemList) SetItemIcon(idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[4], idx, icon) }
func (gdClass ItemList) GetItemIcon(idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodItemList[5], idx) }
func (gdClass ItemList) SetItemTextDirection(idx int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[6], idx, direction) }
func (gdClass ItemList) GetItemTextDirection(idx int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodItemList[7], idx) }
func (gdClass ItemList) SetItemLanguage(idx int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[8], idx, language) }
func (gdClass ItemList) GetItemLanguage(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[9], idx) }
func (gdClass ItemList) SetItemIconTransposed(idx int64, transposed bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[10], idx, transposed) }
func (gdClass ItemList) IsItemIconTransposed(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[11], idx) }
func (gdClass ItemList) SetItemIconRegion(idx int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[12], idx, rect) }
func (gdClass ItemList) GetItemIconRegion(idx int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodItemList[13], idx) }
func (gdClass ItemList) SetItemIconModulate(idx int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[14], idx, modulate) }
func (gdClass ItemList) GetItemIconModulate(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[15], idx) }
func (gdClass ItemList) SetItemSelectable(idx int64, selectable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[16], idx, selectable) }
func (gdClass ItemList) IsItemSelectable(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[17], idx) }
func (gdClass ItemList) SetItemDisabled(idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[18], idx, disabled) }
func (gdClass ItemList) IsItemDisabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[19], idx) }
func (gdClass ItemList) SetItemMetadata(idx int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[20], idx, metadata) }
func (gdClass ItemList) GetItemMetadata(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodItemList[21], idx) }
func (gdClass ItemList) SetItemCustomBgColor(idx int64, custom_bg_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[22], idx, custom_bg_color) }
func (gdClass ItemList) GetItemCustomBgColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[23], idx) }
func (gdClass ItemList) SetItemCustomFgColor(idx int64, custom_fg_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[24], idx, custom_fg_color) }
func (gdClass ItemList) GetItemCustomFgColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodItemList[25], idx) }
func (gdClass ItemList) SetItemTooltipEnabled(idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[26], idx, enable) }
func (gdClass ItemList) IsItemTooltipEnabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[27], idx) }
func (gdClass ItemList) SetItemTooltip(idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[28], idx, tooltip) }
func (gdClass ItemList) GetItemTooltip(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodItemList[29], idx) }
func (gdClass ItemList) Select(idx int64, single bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[30], idx, single) }
func (gdClass ItemList) Deselect(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[31], idx) }
func (gdClass ItemList) DeselectAll()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[32]) }
func (gdClass ItemList) IsSelected(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[33], idx) }
func (gdClass ItemList) GetSelectedItems() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodItemList[34]) }
func (gdClass ItemList) MoveItem(from_idx int64, to_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[35], from_idx, to_idx) }
func (gdClass ItemList) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[36], count) }
func (gdClass ItemList) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[37]) }
func (gdClass ItemList) RemoveItem(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[38], idx) }
func (gdClass ItemList) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[39]) }
func (gdClass ItemList) SortItemsByText()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[40]) }
func (gdClass ItemList) SetFixedColumnWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[41], width) }
func (gdClass ItemList) GetFixedColumnWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[42]) }
func (gdClass ItemList) SetSameColumnWidth(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[43], enable) }
func (gdClass ItemList) IsSameColumnWidth() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[44]) }
func (gdClass ItemList) SetMaxTextLines(lines int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[45], lines) }
func (gdClass ItemList) GetMaxTextLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[46]) }
func (gdClass ItemList) SetMaxColumns(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[47], amount) }
func (gdClass ItemList) GetMaxColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[48]) }
func (gdClass ItemList) SetSelectMode(mode ItemListSelectMode)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[49], mode) }
func (gdClass ItemList) GetSelectMode() ItemListSelectMode { return gdnative.Return[ItemListSelectMode](gdnative.Object(gdClass), methodItemList[50]) }
func (gdClass ItemList) SetIconMode(mode ItemListIconMode)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[51], mode) }
func (gdClass ItemList) GetIconMode() ItemListIconMode { return gdnative.Return[ItemListIconMode](gdnative.Object(gdClass), methodItemList[52]) }
func (gdClass ItemList) SetFixedIconSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[53], size) }
func (gdClass ItemList) GetFixedIconSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodItemList[54]) }
func (gdClass ItemList) SetIconScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[55], scale) }
func (gdClass ItemList) GetIconScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodItemList[56]) }
func (gdClass ItemList) SetAllowRmbSelect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[57], allow) }
func (gdClass ItemList) GetAllowRmbSelect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[58]) }
func (gdClass ItemList) SetAllowReselect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[59], allow) }
func (gdClass ItemList) GetAllowReselect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[60]) }
func (gdClass ItemList) SetAutoHeight(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[61], enable) }
func (gdClass ItemList) HasAutoHeight() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[62]) }
func (gdClass ItemList) IsAnythingSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodItemList[63]) }
func (gdClass ItemList) GetItemAtPosition(position Vector2, exact bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodItemList[64], position, exact) }
func (gdClass ItemList) EnsureCurrentIsVisible()  { gdnative.Call(gdnative.Object(gdClass), methodItemList[65]) }
func (gdClass ItemList) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodItemList[66]) }
func (gdClass ItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodItemList[67], overrun_behavior) }
func (gdClass ItemList) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodItemList[68]) }

type JNISingleton gdnative.Object
func (JNISingleton) class() string { return "JNISingleton\000" }

func (gdClass JNISingleton) Object() Object { return Object(gdClass) }


type JSON gdnative.Object
func (JSON) class() string { return "JSON\000" }

func (gdClass JSON) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodJSON [5]gdnative.Method
func (gdClass JSON) Stringify(data any, indent string, sort_keys bool, full_precision bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSON[0], data, indent, sort_keys, full_precision) }
func (gdClass JSON) Parse(json_string string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodJSON[1], json_string) }
func (gdClass JSON) GetData() any { return gdnative.Return[any](gdnative.Object(gdClass), methodJSON[2]) }
func (gdClass JSON) GetErrorLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodJSON[3]) }
func (gdClass JSON) GetErrorMessage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSON[4]) }

type JSONRPCErrorCode int64

const (
	JSONRPCParseError JSONRPCErrorCode = -32700
	JSONRPCInvalidRequest JSONRPCErrorCode = -32600
	JSONRPCMethodNotFound JSONRPCErrorCode = -32601
	JSONRPCInvalidParams JSONRPCErrorCode = -32602
	JSONRPCInternalError JSONRPCErrorCode = -32603
)

type JSONRPC gdnative.Object
func (JSONRPC) class() string { return "JSONRPC\000" }

func (gdClass JSONRPC) Object() Object { return Object(gdClass) }

var methodJSONRPC [7]gdnative.Method
func (gdClass JSONRPC) SetScope(scope string, target Object)  { gdnative.Call(gdnative.Object(gdClass), methodJSONRPC[0], scope, target) }
func (gdClass JSONRPC) ProcessAction(action any, recurse bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJSONRPC[1], action, recurse) }
func (gdClass JSONRPC) ProcessString(action string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodJSONRPC[2], action) }
func (gdClass JSONRPC) MakeRequest(method string, params any, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[3], method, params, id) }
func (gdClass JSONRPC) MakeResponse(result any, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[4], result, id) }
func (gdClass JSONRPC) MakeNotification(method string, params any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[5], method, params) }
func (gdClass JSONRPC) MakeResponseError(code int64, message string, id any) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodJSONRPC[6], code, message, id) }

type JavaClass gdnative.Object
func (JavaClass) class() string { return "JavaClass\000" }

func (gdClass JavaClass) RefCounted() RefCounted { return RefCounted(gdClass) }


type JavaClassWrapper gdnative.Object
func (JavaClassWrapper) class() string { return "JavaClassWrapper\000" }

func (gdClass JavaClassWrapper) Object() Object { return Object(gdClass) }

var methodJavaClassWrapper [1]gdnative.Method
func (gdClass JavaClassWrapper) Wrap(name string) JavaClass { return gdnative.Return[JavaClass](gdnative.Object(gdClass), methodJavaClassWrapper[0], name) }

type JavaScript gdnative.Object
func (JavaScript) class() string { return "JavaScript\000" }

func (gdClass JavaScript) Object() Object { return Object(gdClass) }

var methodJavaScript [7]gdnative.Method
func (gdClass JavaScript) Eval(code string, use_global_execution_context bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJavaScript[0], code, use_global_execution_context) }
func (gdClass JavaScript) GetInterface(intf string) JavaScriptObject { return gdnative.Return[JavaScriptObject](gdnative.Object(gdClass), methodJavaScript[1], intf) }
func (gdClass JavaScript) CreateCallback(callable Callable) JavaScriptObject { return gdnative.Return[JavaScriptObject](gdnative.Object(gdClass), methodJavaScript[2], callable) }
func (gdClass JavaScript) CreateObject(object string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodJavaScript[3], object) }
func (gdClass JavaScript) DownloadBuffer(buffer []byte, name string, mime string)  { gdnative.Call(gdnative.Object(gdClass), methodJavaScript[4], buffer, name, mime) }
func (gdClass JavaScript) PwaNeedsUpdate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJavaScript[5]) }
func (gdClass JavaScript) PwaUpdate() error { return gdnative.Return[error](gdnative.Object(gdClass), methodJavaScript[6]) }

type JavaScriptObject gdnative.Object
func (JavaScriptObject) class() string { return "JavaScriptObject\000" }

func (gdClass JavaScriptObject) RefCounted() RefCounted { return RefCounted(gdClass) }


type Joint2D gdnative.Object
func (Joint2D) class() string { return "Joint2D\000" }

func (gdClass Joint2D) Node2D() Node2D { return Node2D(gdClass) }

var methodJoint2D [8]gdnative.Method
func (gdClass Joint2D) SetNodeA(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[0], node) }
func (gdClass Joint2D) GetNodeA() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint2D[1]) }
func (gdClass Joint2D) SetNodeB(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[2], node) }
func (gdClass Joint2D) GetNodeB() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint2D[3]) }
func (gdClass Joint2D) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[4], bias) }
func (gdClass Joint2D) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodJoint2D[5]) }
func (gdClass Joint2D) SetExcludeNodesFromCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodJoint2D[6], enable) }
func (gdClass Joint2D) GetExcludeNodesFromCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJoint2D[7]) }

type Joint3D gdnative.Object
func (Joint3D) class() string { return "Joint3D\000" }

func (gdClass Joint3D) Node3D() Node3D { return Node3D(gdClass) }

var methodJoint3D [8]gdnative.Method
func (gdClass Joint3D) SetNodeA(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[0], node) }
func (gdClass Joint3D) GetNodeA() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint3D[1]) }
func (gdClass Joint3D) SetNodeB(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[2], node) }
func (gdClass Joint3D) GetNodeB() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodJoint3D[3]) }
func (gdClass Joint3D) SetSolverPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[4], priority) }
func (gdClass Joint3D) GetSolverPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodJoint3D[5]) }
func (gdClass Joint3D) SetExcludeNodesFromCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodJoint3D[6], enable) }
func (gdClass Joint3D) GetExcludeNodesFromCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodJoint3D[7]) }

type KinematicCollision2D gdnative.Object
func (KinematicCollision2D) class() string { return "KinematicCollision2D\000" }

func (gdClass KinematicCollision2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodKinematicCollision2D [13]gdnative.Method
func (gdClass KinematicCollision2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[0]) }
func (gdClass KinematicCollision2D) GetNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[1]) }
func (gdClass KinematicCollision2D) GetTravel() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[2]) }
func (gdClass KinematicCollision2D) GetRemainder() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[3]) }
func (gdClass KinematicCollision2D) GetAngle(up_direction Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision2D[4], up_direction) }
func (gdClass KinematicCollision2D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision2D[5]) }
func (gdClass KinematicCollision2D) GetLocalShape() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[6]) }
func (gdClass KinematicCollision2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[7]) }
func (gdClass KinematicCollision2D) GetColliderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision2D[8]) }
func (gdClass KinematicCollision2D) GetColliderRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodKinematicCollision2D[9]) }
func (gdClass KinematicCollision2D) GetColliderShape() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision2D[10]) }
func (gdClass KinematicCollision2D) GetColliderShapeIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision2D[11]) }
func (gdClass KinematicCollision2D) GetColliderVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodKinematicCollision2D[12]) }

type KinematicCollision3D gdnative.Object
func (KinematicCollision3D) class() string { return "KinematicCollision3D\000" }

func (gdClass KinematicCollision3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodKinematicCollision3D [14]gdnative.Method
func (gdClass KinematicCollision3D) GetTravel() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[0]) }
func (gdClass KinematicCollision3D) GetRemainder() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[1]) }
func (gdClass KinematicCollision3D) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision3D[2]) }
func (gdClass KinematicCollision3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[3]) }
func (gdClass KinematicCollision3D) GetPosition(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[4], collision_index) }
func (gdClass KinematicCollision3D) GetNormal(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[5], collision_index) }
func (gdClass KinematicCollision3D) GetAngle(collision_index int64, up_direction Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodKinematicCollision3D[6], collision_index, up_direction) }
func (gdClass KinematicCollision3D) GetLocalShape(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[7], collision_index) }
func (gdClass KinematicCollision3D) GetCollider(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[8], collision_index) }
func (gdClass KinematicCollision3D) GetColliderId(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[9], collision_index) }
func (gdClass KinematicCollision3D) GetColliderRid(collision_index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodKinematicCollision3D[10], collision_index) }
func (gdClass KinematicCollision3D) GetColliderShape(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodKinematicCollision3D[11], collision_index) }
func (gdClass KinematicCollision3D) GetColliderShapeIndex(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodKinematicCollision3D[12], collision_index) }
func (gdClass KinematicCollision3D) GetColliderVelocity(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodKinematicCollision3D[13], collision_index) }

type Label gdnative.Object
func (Label) class() string { return "Label\000" }

func (gdClass Label) Control() Control { return Control(gdClass) }

var methodLabel [38]gdnative.Method
func (gdClass Label) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[0], alignment) }
func (gdClass Label) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLabel[1]) }
func (gdClass Label) SetVerticalAlignment(alignment VerticalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[2], alignment) }
func (gdClass Label) GetVerticalAlignment() VerticalAlignment { return gdnative.Return[VerticalAlignment](gdnative.Object(gdClass), methodLabel[3]) }
func (gdClass Label) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[4], text) }
func (gdClass Label) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel[5]) }
func (gdClass Label) SetLabelSettings(settings LabelSettings)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[6], settings) }
func (gdClass Label) GetLabelSettings() LabelSettings { return gdnative.Return[LabelSettings](gdnative.Object(gdClass), methodLabel[7]) }
func (gdClass Label) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[8], direction) }
func (gdClass Label) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLabel[9]) }
func (gdClass Label) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[10], language) }
func (gdClass Label) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel[11]) }
func (gdClass Label) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[12], autowrap_mode) }
func (gdClass Label) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodLabel[13]) }
func (gdClass Label) SetClipText(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[14], enable) }
func (gdClass Label) IsClippingText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel[15]) }
func (gdClass Label) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[16], overrun_behavior) }
func (gdClass Label) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodLabel[17]) }
func (gdClass Label) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[18], enable) }
func (gdClass Label) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel[19]) }
func (gdClass Label) GetLineHeight(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[20], line) }
func (gdClass Label) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[21]) }
func (gdClass Label) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[22]) }
func (gdClass Label) GetTotalCharacterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[23]) }
func (gdClass Label) SetVisibleCharacters(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[24], amount) }
func (gdClass Label) GetVisibleCharacters() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[25]) }
func (gdClass Label) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return gdnative.Return[TextServerVisibleCharactersBehavior](gdnative.Object(gdClass), methodLabel[26]) }
func (gdClass Label) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[27], behavior) }
func (gdClass Label) SetPercentVisible(percent_visible float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[28], percent_visible) }
func (gdClass Label) GetPercentVisible() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel[29]) }
func (gdClass Label) SetLinesSkipped(lines_skipped int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[30], lines_skipped) }
func (gdClass Label) GetLinesSkipped() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[31]) }
func (gdClass Label) SetMaxLinesVisible(lines_visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[32], lines_visible) }
func (gdClass Label) GetMaxLinesVisible() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel[33]) }
func (gdClass Label) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[34], parser) }
func (gdClass Label) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLabel[35]) }
func (gdClass Label) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLabel[36], args) }
func (gdClass Label) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLabel[37]) }

type Label3DDrawFlags int64

const (
	Label3DFlagShaded Label3DDrawFlags = 0
	Label3DFlagDoubleSided Label3DDrawFlags = 1
	Label3DFlagDisableDepthTest Label3DDrawFlags = 2
	Label3DFlagFixedSize Label3DDrawFlags = 3
	Label3DFlagMax Label3DDrawFlags = 4
)

type Label3DAlphaCutMode int64

const (
	Label3DAlphaCutDisabled Label3DAlphaCutMode = 0
	Label3DAlphaCutDiscard Label3DAlphaCutMode = 1
	Label3DAlphaCutOpaquePrepass Label3DAlphaCutMode = 2
)

type Label3D gdnative.Object
func (Label3D) class() string { return "Label3D\000" }

func (gdClass Label3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodLabel3D [51]gdnative.Method
func (gdClass Label3D) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[0], alignment) }
func (gdClass Label3D) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLabel3D[1]) }
func (gdClass Label3D) SetVerticalAlignment(alignment VerticalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[2], alignment) }
func (gdClass Label3D) GetVerticalAlignment() VerticalAlignment { return gdnative.Return[VerticalAlignment](gdnative.Object(gdClass), methodLabel3D[3]) }
func (gdClass Label3D) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[4], modulate) }
func (gdClass Label3D) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabel3D[5]) }
func (gdClass Label3D) SetOutlineModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[6], modulate) }
func (gdClass Label3D) GetOutlineModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabel3D[7]) }
func (gdClass Label3D) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[8], text) }
func (gdClass Label3D) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel3D[9]) }
func (gdClass Label3D) SetTextDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[10], direction) }
func (gdClass Label3D) GetTextDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodLabel3D[11]) }
func (gdClass Label3D) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[12], language) }
func (gdClass Label3D) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLabel3D[13]) }
func (gdClass Label3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[14], parser) }
func (gdClass Label3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLabel3D[15]) }
func (gdClass Label3D) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[16], args) }
func (gdClass Label3D) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLabel3D[17]) }
func (gdClass Label3D) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[18], enable) }
func (gdClass Label3D) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel3D[19]) }
func (gdClass Label3D) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[20], priority) }
func (gdClass Label3D) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[21]) }
func (gdClass Label3D) SetOutlineRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[22], priority) }
func (gdClass Label3D) GetOutlineRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[23]) }
func (gdClass Label3D) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[24], font) }
func (gdClass Label3D) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodLabel3D[25]) }
func (gdClass Label3D) SetFontSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[26], size) }
func (gdClass Label3D) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[27]) }
func (gdClass Label3D) SetOutlineSize(outline_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[28], outline_size) }
func (gdClass Label3D) GetOutlineSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabel3D[29]) }
func (gdClass Label3D) SetLineSpacing(line_spacing float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[30], line_spacing) }
func (gdClass Label3D) GetLineSpacing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[31]) }
func (gdClass Label3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[32], autowrap_mode) }
func (gdClass Label3D) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodLabel3D[33]) }
func (gdClass Label3D) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[34], width) }
func (gdClass Label3D) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[35]) }
func (gdClass Label3D) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[36], pixel_size) }
func (gdClass Label3D) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[37]) }
func (gdClass Label3D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[38], offset) }
func (gdClass Label3D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLabel3D[39]) }
func (gdClass Label3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[40], flag, enabled) }
func (gdClass Label3D) GetDrawFlag(flag Label3DDrawFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLabel3D[41], flag) }
func (gdClass Label3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[42], mode) }
func (gdClass Label3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodLabel3D[43]) }
func (gdClass Label3D) SetAlphaCutMode(mode Label3DAlphaCutMode)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[44], mode) }
func (gdClass Label3D) GetAlphaCutMode() Label3DAlphaCutMode { return gdnative.Return[Label3DAlphaCutMode](gdnative.Object(gdClass), methodLabel3D[45]) }
func (gdClass Label3D) SetAlphaScissorThreshold(threshold float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[46], threshold) }
func (gdClass Label3D) GetAlphaScissorThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabel3D[47]) }
func (gdClass Label3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodLabel3D[48], mode) }
func (gdClass Label3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodLabel3D[49]) }
func (gdClass Label3D) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodLabel3D[50]) }

type LabelSettings gdnative.Object
func (LabelSettings) class() string { return "LabelSettings\000" }

func (gdClass LabelSettings) Resource() Resource { return Resource(gdClass) }

var methodLabelSettings [18]gdnative.Method
func (gdClass LabelSettings) SetLineSpacing(spacing float64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[0], spacing) }
func (gdClass LabelSettings) GetLineSpacing() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLabelSettings[1]) }
func (gdClass LabelSettings) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[2], font) }
func (gdClass LabelSettings) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodLabelSettings[3]) }
func (gdClass LabelSettings) SetFontSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[4], size) }
func (gdClass LabelSettings) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[5]) }
func (gdClass LabelSettings) SetFontColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[6], color) }
func (gdClass LabelSettings) GetFontColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[7]) }
func (gdClass LabelSettings) SetOutlineSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[8], size) }
func (gdClass LabelSettings) GetOutlineSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[9]) }
func (gdClass LabelSettings) SetOutlineColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[10], color) }
func (gdClass LabelSettings) GetOutlineColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[11]) }
func (gdClass LabelSettings) SetShadowSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[12], size) }
func (gdClass LabelSettings) GetShadowSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLabelSettings[13]) }
func (gdClass LabelSettings) SetShadowColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[14], color) }
func (gdClass LabelSettings) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLabelSettings[15]) }
func (gdClass LabelSettings) SetShadowOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLabelSettings[16], offset) }
func (gdClass LabelSettings) GetShadowOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLabelSettings[17]) }

type Light2DShadowFilter int64

const (
	Light2DShadowFilterNone Light2DShadowFilter = 0
	Light2DShadowFilterPcf5 Light2DShadowFilter = 1
	Light2DShadowFilterPcf13 Light2DShadowFilter = 2
)

type Light2DBlendMode int64

const (
	Light2DBlendModeAdd Light2DBlendMode = 0
	Light2DBlendModeSub Light2DBlendMode = 1
	Light2DBlendModeMix Light2DBlendMode = 2
)

type Light2D gdnative.Object
func (Light2D) class() string { return "Light2D\000" }

func (gdClass Light2D) Node2D() Node2D { return Node2D(gdClass) }

var methodLight2D [32]gdnative.Method
func (gdClass Light2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[0], enabled) }
func (gdClass Light2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[1]) }
func (gdClass Light2D) SetEditorOnly(editor_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[2], editor_only) }
func (gdClass Light2D) IsEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[3]) }
func (gdClass Light2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[4], color) }
func (gdClass Light2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight2D[5]) }
func (gdClass Light2D) SetEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[6], energy) }
func (gdClass Light2D) GetEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[7]) }
func (gdClass Light2D) SetZRangeMin(z int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[8], z) }
func (gdClass Light2D) GetZRangeMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[9]) }
func (gdClass Light2D) SetZRangeMax(z int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[10], z) }
func (gdClass Light2D) GetZRangeMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[11]) }
func (gdClass Light2D) SetLayerRangeMin(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[12], layer) }
func (gdClass Light2D) GetLayerRangeMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[13]) }
func (gdClass Light2D) SetLayerRangeMax(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[14], layer) }
func (gdClass Light2D) GetLayerRangeMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[15]) }
func (gdClass Light2D) SetItemCullMask(item_cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[16], item_cull_mask) }
func (gdClass Light2D) GetItemCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[17]) }
func (gdClass Light2D) SetItemShadowCullMask(item_shadow_cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[18], item_shadow_cull_mask) }
func (gdClass Light2D) GetItemShadowCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight2D[19]) }
func (gdClass Light2D) SetShadowEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[20], enabled) }
func (gdClass Light2D) IsShadowEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight2D[21]) }
func (gdClass Light2D) SetShadowSmooth(smooth float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[22], smooth) }
func (gdClass Light2D) GetShadowSmooth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[23]) }
func (gdClass Light2D) SetShadowFilter(filter Light2DShadowFilter)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[24], filter) }
func (gdClass Light2D) GetShadowFilter() Light2DShadowFilter { return gdnative.Return[Light2DShadowFilter](gdnative.Object(gdClass), methodLight2D[25]) }
func (gdClass Light2D) SetShadowColor(shadow_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[26], shadow_color) }
func (gdClass Light2D) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight2D[27]) }
func (gdClass Light2D) SetBlendMode(mode Light2DBlendMode)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[28], mode) }
func (gdClass Light2D) GetBlendMode() Light2DBlendMode { return gdnative.Return[Light2DBlendMode](gdnative.Object(gdClass), methodLight2D[29]) }
func (gdClass Light2D) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight2D[30], height) }
func (gdClass Light2D) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight2D[31]) }

type Light3DParam int64

const (
	Light3DParamEnergy Light3DParam = 0
	Light3DParamIndirectEnergy Light3DParam = 1
	Light3DParamSpecular Light3DParam = 2
	Light3DParamRange Light3DParam = 3
	Light3DParamSize Light3DParam = 4
	Light3DParamAttenuation Light3DParam = 5
	Light3DParamSpotAngle Light3DParam = 6
	Light3DParamSpotAttenuation Light3DParam = 7
	Light3DParamShadowMaxDistance Light3DParam = 8
	Light3DParamShadowSplit1Offset Light3DParam = 9
	Light3DParamShadowSplit2Offset Light3DParam = 10
	Light3DParamShadowSplit3Offset Light3DParam = 11
	Light3DParamShadowFadeStart Light3DParam = 12
	Light3DParamShadowNormalBias Light3DParam = 13
	Light3DParamShadowBias Light3DParam = 14
	Light3DParamShadowPancakeSize Light3DParam = 15
	Light3DParamShadowOpacity Light3DParam = 16
	Light3DParamShadowBlur Light3DParam = 17
	Light3DParamShadowVolumetricFogFade Light3DParam = 18
	Light3DParamTransmittanceBias Light3DParam = 19
	Light3DParamMax Light3DParam = 20
)

type Light3DBakeMode int64

const (
	Light3DBakeDisabled Light3DBakeMode = 0
	Light3DBakeStatic Light3DBakeMode = 1
	Light3DBakeDynamic Light3DBakeMode = 2
)

type Light3D gdnative.Object
func (Light3D) class() string { return "Light3D\000" }

func (gdClass Light3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodLight3D [26]gdnative.Method
func (gdClass Light3D) SetEditorOnly(editor_only bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[0], editor_only) }
func (gdClass Light3D) IsEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[1]) }
func (gdClass Light3D) SetParam(param Light3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[2], param, value) }
func (gdClass Light3D) GetParam(param Light3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[3], param) }
func (gdClass Light3D) SetShadow(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[4], enabled) }
func (gdClass Light3D) HasShadow() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[5]) }
func (gdClass Light3D) SetNegative(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[6], enabled) }
func (gdClass Light3D) IsNegative() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[7]) }
func (gdClass Light3D) SetCullMask(cull_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[8], cull_mask) }
func (gdClass Light3D) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLight3D[9]) }
func (gdClass Light3D) SetEnableDistanceFade(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[10], enable) }
func (gdClass Light3D) IsDistanceFadeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[11]) }
func (gdClass Light3D) SetDistanceFadeBegin(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[12], distance) }
func (gdClass Light3D) GetDistanceFadeBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[13]) }
func (gdClass Light3D) SetDistanceFadeShadow(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[14], distance) }
func (gdClass Light3D) GetDistanceFadeShadow() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[15]) }
func (gdClass Light3D) SetDistanceFadeLength(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[16], distance) }
func (gdClass Light3D) GetDistanceFadeLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLight3D[17]) }
func (gdClass Light3D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[18], color) }
func (gdClass Light3D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLight3D[19]) }
func (gdClass Light3D) SetShadowReverseCullFace(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[20], enable) }
func (gdClass Light3D) GetShadowReverseCullFace() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLight3D[21]) }
func (gdClass Light3D) SetBakeMode(bake_mode Light3DBakeMode)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[22], bake_mode) }
func (gdClass Light3D) GetBakeMode() Light3DBakeMode { return gdnative.Return[Light3DBakeMode](gdnative.Object(gdClass), methodLight3D[23]) }
func (gdClass Light3D) SetProjector(projector Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLight3D[24], projector) }
func (gdClass Light3D) GetProjector() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLight3D[25]) }

type LightOccluder2D gdnative.Object
func (LightOccluder2D) class() string { return "LightOccluder2D\000" }

func (gdClass LightOccluder2D) Node2D() Node2D { return Node2D(gdClass) }

var methodLightOccluder2D [6]gdnative.Method
func (gdClass LightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[0], polygon) }
func (gdClass LightOccluder2D) GetOccluderPolygon() OccluderPolygon2D { return gdnative.Return[OccluderPolygon2D](gdnative.Object(gdClass), methodLightOccluder2D[1]) }
func (gdClass LightOccluder2D) SetOccluderLightMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[2], mask) }
func (gdClass LightOccluder2D) GetOccluderLightMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightOccluder2D[3]) }
func (gdClass LightOccluder2D) SetAsSdfCollision(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightOccluder2D[4], enable) }
func (gdClass LightOccluder2D) IsSetAsSdfCollision() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightOccluder2D[5]) }

type LightmapGIBakeQuality int64

const (
	LightmapGIBakeQualityLow LightmapGIBakeQuality = 0
	LightmapGIBakeQualityMedium LightmapGIBakeQuality = 1
	LightmapGIBakeQualityHigh LightmapGIBakeQuality = 2
	LightmapGIBakeQualityUltra LightmapGIBakeQuality = 3
)

type LightmapGIGenerateProbes int64

const (
	LightmapGIGenerateProbesDisabled LightmapGIGenerateProbes = 0
	LightmapGIGenerateProbesSubdiv4 LightmapGIGenerateProbes = 1
	LightmapGIGenerateProbesSubdiv8 LightmapGIGenerateProbes = 2
	LightmapGIGenerateProbesSubdiv16 LightmapGIGenerateProbes = 3
	LightmapGIGenerateProbesSubdiv32 LightmapGIGenerateProbes = 4
)

type LightmapGIBakeError int64

const (
	LightmapGIBakeErrorOk LightmapGIBakeError = 0
	LightmapGIBakeErrorNoLightmapper LightmapGIBakeError = 1
	LightmapGIBakeErrorNoSavePath LightmapGIBakeError = 2
	LightmapGIBakeErrorNoMeshes LightmapGIBakeError = 3
	LightmapGIBakeErrorMeshesInvalid LightmapGIBakeError = 4
	LightmapGIBakeErrorCantCreateImage LightmapGIBakeError = 5
	LightmapGIBakeErrorUserAborted LightmapGIBakeError = 6
)

type LightmapGIEnvironmentMode int64

const (
	LightmapGIEnvironmentModeDisabled LightmapGIEnvironmentMode = 0
	LightmapGIEnvironmentModeScene LightmapGIEnvironmentMode = 1
	LightmapGIEnvironmentModeCustomSky LightmapGIEnvironmentMode = 2
	LightmapGIEnvironmentModeCustomColor LightmapGIEnvironmentMode = 3
)

type LightmapGI gdnative.Object
func (LightmapGI) class() string { return "LightmapGI\000" }

func (gdClass LightmapGI) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodLightmapGI [26]gdnative.Method
func (gdClass LightmapGI) SetLightData(data LightmapGIData)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[0], data) }
func (gdClass LightmapGI) GetLightData() LightmapGIData { return gdnative.Return[LightmapGIData](gdnative.Object(gdClass), methodLightmapGI[1]) }
func (gdClass LightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[2], bake_quality) }
func (gdClass LightmapGI) GetBakeQuality() LightmapGIBakeQuality { return gdnative.Return[LightmapGIBakeQuality](gdnative.Object(gdClass), methodLightmapGI[3]) }
func (gdClass LightmapGI) SetBounces(bounces int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[4], bounces) }
func (gdClass LightmapGI) GetBounces() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGI[5]) }
func (gdClass LightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[6], subdivision) }
func (gdClass LightmapGI) GetGenerateProbes() LightmapGIGenerateProbes { return gdnative.Return[LightmapGIGenerateProbes](gdnative.Object(gdClass), methodLightmapGI[7]) }
func (gdClass LightmapGI) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[8], bias) }
func (gdClass LightmapGI) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLightmapGI[9]) }
func (gdClass LightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[10], mode) }
func (gdClass LightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode { return gdnative.Return[LightmapGIEnvironmentMode](gdnative.Object(gdClass), methodLightmapGI[11]) }
func (gdClass LightmapGI) SetEnvironmentCustomSky(sky Sky)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[12], sky) }
func (gdClass LightmapGI) GetEnvironmentCustomSky() Sky { return gdnative.Return[Sky](gdnative.Object(gdClass), methodLightmapGI[13]) }
func (gdClass LightmapGI) SetEnvironmentCustomColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[14], color) }
func (gdClass LightmapGI) GetEnvironmentCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLightmapGI[15]) }
func (gdClass LightmapGI) SetEnvironmentCustomEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[16], energy) }
func (gdClass LightmapGI) GetEnvironmentCustomEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLightmapGI[17]) }
func (gdClass LightmapGI) SetMaxTextureSize(max_texture_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[18], max_texture_size) }
func (gdClass LightmapGI) GetMaxTextureSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGI[19]) }
func (gdClass LightmapGI) SetUseDenoiser(use_denoiser bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[20], use_denoiser) }
func (gdClass LightmapGI) IsUsingDenoiser() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[21]) }
func (gdClass LightmapGI) SetInterior(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[22], enable) }
func (gdClass LightmapGI) IsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[23]) }
func (gdClass LightmapGI) SetDirectional(directional bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGI[24], directional) }
func (gdClass LightmapGI) IsDirectional() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGI[25]) }

type LightmapGIData gdnative.Object
func (LightmapGIData) class() string { return "LightmapGIData\000" }

func (gdClass LightmapGIData) Resource() Resource { return Resource(gdClass) }

var methodLightmapGIData [8]gdnative.Method
func (gdClass LightmapGIData) SetLightTexture(light_texture TextureLayered)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[0], light_texture) }
func (gdClass LightmapGIData) GetLightTexture() TextureLayered { return gdnative.Return[TextureLayered](gdnative.Object(gdClass), methodLightmapGIData[1]) }
func (gdClass LightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[2], uses_spherical_harmonics) }
func (gdClass LightmapGIData) IsUsingSphericalHarmonics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLightmapGIData[3]) }
func (gdClass LightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index int64, sub_instance int64)  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[4], path, uv_scale, slice_index, sub_instance) }
func (gdClass LightmapGIData) GetUserCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLightmapGIData[5]) }
func (gdClass LightmapGIData) GetUserPath(user_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodLightmapGIData[6], user_idx) }
func (gdClass LightmapGIData) ClearUsers()  { gdnative.Call(gdnative.Object(gdClass), methodLightmapGIData[7]) }

type LightmapProbe gdnative.Object
func (LightmapProbe) class() string { return "LightmapProbe\000" }

func (gdClass LightmapProbe) Node3D() Node3D { return Node3D(gdClass) }


type Lightmapper gdnative.Object
func (Lightmapper) class() string { return "Lightmapper\000" }

func (gdClass Lightmapper) RefCounted() RefCounted { return RefCounted(gdClass) }


type LightmapperRD gdnative.Object
func (LightmapperRD) class() string { return "LightmapperRD\000" }

func (gdClass LightmapperRD) Lightmapper() Lightmapper { return Lightmapper(gdClass) }


type Line2DLineJointMode int64

const (
	Line2DLineJointSharp Line2DLineJointMode = 0
	Line2DLineJointBevel Line2DLineJointMode = 1
	Line2DLineJointRound Line2DLineJointMode = 2
)

type Line2DLineCapMode int64

const (
	Line2DLineCapNone Line2DLineCapMode = 0
	Line2DLineCapBox Line2DLineCapMode = 1
	Line2DLineCapRound Line2DLineCapMode = 2
)

type Line2DLineTextureMode int64

const (
	Line2DLineTextureNone Line2DLineTextureMode = 0
	Line2DLineTextureTile Line2DLineTextureMode = 1
	Line2DLineTextureStretch Line2DLineTextureMode = 2
)

type Line2D gdnative.Object
func (Line2D) class() string { return "Line2D\000" }

func (gdClass Line2D) Node2D() Node2D { return Node2D(gdClass) }

var methodLine2D [32]gdnative.Method
func (gdClass Line2D) SetPoints(points []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[0], points) }
func (gdClass Line2D) GetPoints() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodLine2D[1]) }
func (gdClass Line2D) SetPointPosition(index int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[2], index, position) }
func (gdClass Line2D) GetPointPosition(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodLine2D[3], index) }
func (gdClass Line2D) GetPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLine2D[4]) }
func (gdClass Line2D) AddPoint(position Vector2, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[5], position, index) }
func (gdClass Line2D) RemovePoint(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[6], index) }
func (gdClass Line2D) ClearPoints()  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[7]) }
func (gdClass Line2D) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[8], width) }
func (gdClass Line2D) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLine2D[9]) }
func (gdClass Line2D) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[10], curve) }
func (gdClass Line2D) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodLine2D[11]) }
func (gdClass Line2D) SetDefaultColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[12], color) }
func (gdClass Line2D) GetDefaultColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodLine2D[13]) }
func (gdClass Line2D) SetGradient(color Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[14], color) }
func (gdClass Line2D) GetGradient() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodLine2D[15]) }
func (gdClass Line2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[16], texture) }
func (gdClass Line2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLine2D[17]) }
func (gdClass Line2D) SetTextureMode(mode Line2DLineTextureMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[18], mode) }
func (gdClass Line2D) GetTextureMode() Line2DLineTextureMode { return gdnative.Return[Line2DLineTextureMode](gdnative.Object(gdClass), methodLine2D[19]) }
func (gdClass Line2D) SetJointMode(mode Line2DLineJointMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[20], mode) }
func (gdClass Line2D) GetJointMode() Line2DLineJointMode { return gdnative.Return[Line2DLineJointMode](gdnative.Object(gdClass), methodLine2D[21]) }
func (gdClass Line2D) SetBeginCapMode(mode Line2DLineCapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[22], mode) }
func (gdClass Line2D) GetBeginCapMode() Line2DLineCapMode { return gdnative.Return[Line2DLineCapMode](gdnative.Object(gdClass), methodLine2D[23]) }
func (gdClass Line2D) SetEndCapMode(mode Line2DLineCapMode)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[24], mode) }
func (gdClass Line2D) GetEndCapMode() Line2DLineCapMode { return gdnative.Return[Line2DLineCapMode](gdnative.Object(gdClass), methodLine2D[25]) }
func (gdClass Line2D) SetSharpLimit(limit float64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[26], limit) }
func (gdClass Line2D) GetSharpLimit() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLine2D[27]) }
func (gdClass Line2D) SetRoundPrecision(precision int64)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[28], precision) }
func (gdClass Line2D) GetRoundPrecision() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLine2D[29]) }
func (gdClass Line2D) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodLine2D[30], antialiased) }
func (gdClass Line2D) GetAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLine2D[31]) }

type LineEditMenuItems int64

const (
	LineEditMenuCut LineEditMenuItems = 0
	LineEditMenuCopy LineEditMenuItems = 1
	LineEditMenuPaste LineEditMenuItems = 2
	LineEditMenuClear LineEditMenuItems = 3
	LineEditMenuSelectAll LineEditMenuItems = 4
	LineEditMenuUndo LineEditMenuItems = 5
	LineEditMenuRedo LineEditMenuItems = 6
	LineEditMenuDirInherited LineEditMenuItems = 7
	LineEditMenuDirAuto LineEditMenuItems = 8
	LineEditMenuDirLtr LineEditMenuItems = 9
	LineEditMenuDirRtl LineEditMenuItems = 10
	LineEditMenuDisplayUcc LineEditMenuItems = 11
	LineEditMenuInsertLrm LineEditMenuItems = 12
	LineEditMenuInsertRlm LineEditMenuItems = 13
	LineEditMenuInsertLre LineEditMenuItems = 14
	LineEditMenuInsertRle LineEditMenuItems = 15
	LineEditMenuInsertLro LineEditMenuItems = 16
	LineEditMenuInsertRlo LineEditMenuItems = 17
	LineEditMenuInsertPdf LineEditMenuItems = 18
	LineEditMenuInsertAlm LineEditMenuItems = 19
	LineEditMenuInsertLri LineEditMenuItems = 20
	LineEditMenuInsertRli LineEditMenuItems = 21
	LineEditMenuInsertFsi LineEditMenuItems = 22
	LineEditMenuInsertPdi LineEditMenuItems = 23
	LineEditMenuInsertZwj LineEditMenuItems = 24
	LineEditMenuInsertZwnj LineEditMenuItems = 25
	LineEditMenuInsertWj LineEditMenuItems = 26
	LineEditMenuInsertShy LineEditMenuItems = 27
	LineEditMenuMax LineEditMenuItems = 28
)

type LineEditVirtualKeyboardType int64

const (
	LineEditKeyboardTypeDefault LineEditVirtualKeyboardType = 0
	LineEditKeyboardTypeMultiline LineEditVirtualKeyboardType = 1
	LineEditKeyboardTypeNumber LineEditVirtualKeyboardType = 2
	LineEditKeyboardTypeNumberDecimal LineEditVirtualKeyboardType = 3
	LineEditKeyboardTypePhone LineEditVirtualKeyboardType = 4
	LineEditKeyboardTypeEmailAddress LineEditVirtualKeyboardType = 5
	LineEditKeyboardTypePassword LineEditVirtualKeyboardType = 6
	LineEditKeyboardTypeUrl LineEditVirtualKeyboardType = 7
)

type LineEdit gdnative.Object
func (LineEdit) class() string { return "LineEdit\000" }

func (gdClass LineEdit) Control() Control { return Control(gdClass) }

var methodLineEdit [70]gdnative.Method
func (gdClass LineEdit) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[0], alignment) }
func (gdClass LineEdit) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodLineEdit[1]) }
func (gdClass LineEdit) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[2]) }
func (gdClass LineEdit) Select(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[3], from, to) }
func (gdClass LineEdit) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[4]) }
func (gdClass LineEdit) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[5]) }
func (gdClass LineEdit) HasSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[6]) }
func (gdClass LineEdit) GetSelectionFromColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[7]) }
func (gdClass LineEdit) GetSelectionToColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[8]) }
func (gdClass LineEdit) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[9], text) }
func (gdClass LineEdit) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[10]) }
func (gdClass LineEdit) GetDrawControlChars() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[11]) }
func (gdClass LineEdit) SetDrawControlChars(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[12], enable) }
func (gdClass LineEdit) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[13], direction) }
func (gdClass LineEdit) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLineEdit[14]) }
func (gdClass LineEdit) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[15], language) }
func (gdClass LineEdit) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[16]) }
func (gdClass LineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[17], parser) }
func (gdClass LineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLineEdit[18]) }
func (gdClass LineEdit) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[19], args) }
func (gdClass LineEdit) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLineEdit[20]) }
func (gdClass LineEdit) SetPlaceholder(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[21], text) }
func (gdClass LineEdit) GetPlaceholder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[22]) }
func (gdClass LineEdit) SetCaretColumn(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[23], position) }
func (gdClass LineEdit) GetCaretColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[24]) }
func (gdClass LineEdit) GetScrollOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[25]) }
func (gdClass LineEdit) SetExpandToTextLengthEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[26], enabled) }
func (gdClass LineEdit) IsExpandToTextLengthEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[27]) }
func (gdClass LineEdit) SetCaretBlinkEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[28], enabled) }
func (gdClass LineEdit) IsCaretBlinkEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[29]) }
func (gdClass LineEdit) SetCaretMidGraphemeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[30], enabled) }
func (gdClass LineEdit) IsCaretMidGraphemeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[31]) }
func (gdClass LineEdit) SetCaretForceDisplayed(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[32], enabled) }
func (gdClass LineEdit) IsCaretForceDisplayed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[33]) }
func (gdClass LineEdit) SetCaretBlinkSpeed(blink_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[34], blink_speed) }
func (gdClass LineEdit) GetCaretBlinkSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodLineEdit[35]) }
func (gdClass LineEdit) SetMaxLength(chars int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[36], chars) }
func (gdClass LineEdit) GetMaxLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodLineEdit[37]) }
func (gdClass LineEdit) InsertTextAtCaret(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[38], text) }
func (gdClass LineEdit) DeleteCharAtCaret()  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[39]) }
func (gdClass LineEdit) DeleteText(from_column int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[40], from_column, to_column) }
func (gdClass LineEdit) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[41], enabled) }
func (gdClass LineEdit) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[42]) }
func (gdClass LineEdit) SetSecret(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[43], enabled) }
func (gdClass LineEdit) IsSecret() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[44]) }
func (gdClass LineEdit) SetSecretCharacter(character string)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[45], character) }
func (gdClass LineEdit) GetSecretCharacter() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLineEdit[46]) }
func (gdClass LineEdit) MenuOption(option int64)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[47], option) }
func (gdClass LineEdit) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodLineEdit[48]) }
func (gdClass LineEdit) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[49]) }
func (gdClass LineEdit) SetContextMenuEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[50], enable) }
func (gdClass LineEdit) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[51]) }
func (gdClass LineEdit) SetVirtualKeyboardEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[52], enable) }
func (gdClass LineEdit) IsVirtualKeyboardEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[53]) }
func (gdClass LineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[54], atype) }
func (gdClass LineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType { return gdnative.Return[LineEditVirtualKeyboardType](gdnative.Object(gdClass), methodLineEdit[55]) }
func (gdClass LineEdit) SetClearButtonEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[56], enable) }
func (gdClass LineEdit) IsClearButtonEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[57]) }
func (gdClass LineEdit) SetShortcutKeysEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[58], enable) }
func (gdClass LineEdit) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[59]) }
func (gdClass LineEdit) SetMiddleMousePasteEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[60], enable) }
func (gdClass LineEdit) IsMiddleMousePasteEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[61]) }
func (gdClass LineEdit) SetSelectingEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[62], enable) }
func (gdClass LineEdit) IsSelectingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[63]) }
func (gdClass LineEdit) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[64], enable) }
func (gdClass LineEdit) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[65]) }
func (gdClass LineEdit) SetRightIcon(icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[66], icon) }
func (gdClass LineEdit) GetRightIcon() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodLineEdit[67]) }
func (gdClass LineEdit) SetFlat(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodLineEdit[68], enabled) }
func (gdClass LineEdit) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodLineEdit[69]) }

type LinkButtonUnderlineMode int64

const (
	LinkButtonUnderlineModeAlways LinkButtonUnderlineMode = 0
	LinkButtonUnderlineModeOnHover LinkButtonUnderlineMode = 1
	LinkButtonUnderlineModeNever LinkButtonUnderlineMode = 2
)

type LinkButton gdnative.Object
func (LinkButton) class() string { return "LinkButton\000" }

func (gdClass LinkButton) BaseButton() BaseButton { return BaseButton(gdClass) }

var methodLinkButton [12]gdnative.Method
func (gdClass LinkButton) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[0], text) }
func (gdClass LinkButton) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLinkButton[1]) }
func (gdClass LinkButton) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[2], direction) }
func (gdClass LinkButton) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodLinkButton[3]) }
func (gdClass LinkButton) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[4], language) }
func (gdClass LinkButton) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodLinkButton[5]) }
func (gdClass LinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[6], underline_mode) }
func (gdClass LinkButton) GetUnderlineMode() LinkButtonUnderlineMode { return gdnative.Return[LinkButtonUnderlineMode](gdnative.Object(gdClass), methodLinkButton[7]) }
func (gdClass LinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[8], parser) }
func (gdClass LinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodLinkButton[9]) }
func (gdClass LinkButton) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodLinkButton[10], args) }
func (gdClass LinkButton) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodLinkButton[11]) }

type MainLoop gdnative.Object
func (MainLoop) class() string { return "MainLoop\000" }

func (gdClass MainLoop) Object() Object { return Object(gdClass) }

func (gdClass MainLoop) virtual(val any, name string) any {	switch name {
	case "_initialize":
		i, ok := val.(interface{ Initialize()  })
		if ok {
			return i.Initialize
		}
	case "_physics_process":
		i, ok := val.(interface{ PhysicsProcess(delta float64) bool })
		if ok {
			return i.PhysicsProcess
		}
	case "_process":
		i, ok := val.(interface{ Process(delta float64) bool })
		if ok {
			return i.Process
		}
	case "_finalize":
		i, ok := val.(interface{ Finalize()  })
		if ok {
			return i.Finalize
		}
	}
	return nil
}

type MarginContainer gdnative.Object
func (MarginContainer) class() string { return "MarginContainer\000" }

func (gdClass MarginContainer) Container() Container { return Container(gdClass) }


type Marshalls gdnative.Object
func (Marshalls) class() string { return "Marshalls\000" }

func (gdClass Marshalls) Object() Object { return Object(gdClass) }

var methodMarshalls [6]gdnative.Method
func (gdClass Marshalls) VariantToBase64(variant any, full_objects bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[0], variant, full_objects) }
func (gdClass Marshalls) Base64ToVariant(base64_str string, allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMarshalls[1], base64_str, allow_objects) }
func (gdClass Marshalls) RawToBase64(array []byte) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[2], array) }
func (gdClass Marshalls) Base64ToRaw(base64_str string) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodMarshalls[3], base64_str) }
func (gdClass Marshalls) Utf8ToBase64(utf8_str string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[4], utf8_str) }
func (gdClass Marshalls) Base64ToUtf8(base64_str string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMarshalls[5], base64_str) }

type Material gdnative.Object
func (Material) class() string { return "Material\000" }

func (gdClass Material) Resource() Resource { return Resource(gdClass) }

var methodMaterial [5]gdnative.Method
func (gdClass Material) virtual(val any, name string) any {	switch name {
	case "_get_shader_rid":
		i, ok := val.(interface{ GetShaderRid() RID })
		if ok {
			return i.GetShaderRid
		}
	case "_get_shader_mode":
		i, ok := val.(interface{ GetShaderMode() ShaderMode })
		if ok {
			return i.GetShaderMode
		}
	case "_can_do_next_pass":
		i, ok := val.(interface{ CanDoNextPass() bool })
		if ok {
			return i.CanDoNextPass
		}
	case "_can_use_render_priority":
		i, ok := val.(interface{ CanUseRenderPriority() bool })
		if ok {
			return i.CanUseRenderPriority
		}
	}
	return nil
}
func (gdClass Material) SetNextPass(next_pass Material)  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[0], next_pass) }
func (gdClass Material) GetNextPass() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMaterial[1]) }
func (gdClass Material) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[2], priority) }
func (gdClass Material) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMaterial[3]) }
func (gdClass Material) InspectNativeShaderCode()  { gdnative.Call(gdnative.Object(gdClass), methodMaterial[4]) }

type MenuBar gdnative.Object
func (MenuBar) class() string { return "MenuBar\000" }

func (gdClass MenuBar) Control() Control { return Control(gdClass) }

var methodMenuBar [26]gdnative.Method
func (gdClass MenuBar) SetSwitchOnHover(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[0], enable) }
func (gdClass MenuBar) IsSwitchOnHover() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[1]) }
func (gdClass MenuBar) SetDisableShortcuts(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[2], disabled) }
func (gdClass MenuBar) SetPreferGlobalMenu(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[3], enabled) }
func (gdClass MenuBar) IsPreferGlobalMenu() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[4]) }
func (gdClass MenuBar) IsNativeMenu() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[5]) }
func (gdClass MenuBar) GetMenuCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMenuBar[6]) }
func (gdClass MenuBar) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[7], direction) }
func (gdClass MenuBar) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodMenuBar[8]) }
func (gdClass MenuBar) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[9], language) }
func (gdClass MenuBar) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMenuBar[10]) }
func (gdClass MenuBar) SetFlat(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[11], enabled) }
func (gdClass MenuBar) IsFlat() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[12]) }
func (gdClass MenuBar) SetStartIndex(enabled int64)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[13], enabled) }
func (gdClass MenuBar) GetStartIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMenuBar[14]) }
func (gdClass MenuBar) SetMenuTitle(menu int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[15], menu, title) }
func (gdClass MenuBar) GetMenuTitle(menu int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMenuBar[16], menu) }
func (gdClass MenuBar) SetMenuTooltip(menu int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[17], menu, tooltip) }
func (gdClass MenuBar) GetMenuTooltip(menu int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMenuBar[18], menu) }
func (gdClass MenuBar) SetMenuDisabled(menu int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[19], menu, disabled) }
func (gdClass MenuBar) IsMenuDisabled(menu int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[20], menu) }
func (gdClass MenuBar) SetMenuHidden(menu int64, hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[21], menu, hidden) }
func (gdClass MenuBar) IsMenuHidden(menu int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuBar[22], menu) }
func (gdClass MenuBar) SetShortcutContext(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodMenuBar[23], node) }
func (gdClass MenuBar) GetShortcutContext() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodMenuBar[24]) }
func (gdClass MenuBar) GetMenuPopup(menu int64) PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodMenuBar[25], menu) }

type MenuButton gdnative.Object
func (MenuButton) class() string { return "MenuButton\000" }

func (gdClass MenuButton) Button() Button { return Button(gdClass) }

var methodMenuButton [6]gdnative.Method
func (gdClass MenuButton) GetPopup() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodMenuButton[0]) }
func (gdClass MenuButton) SetSwitchOnHover(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[1], enable) }
func (gdClass MenuButton) IsSwitchOnHover() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMenuButton[2]) }
func (gdClass MenuButton) SetDisableShortcuts(disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[3], disabled) }
func (gdClass MenuButton) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMenuButton[4], count) }
func (gdClass MenuButton) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMenuButton[5]) }

type MeshPrimitiveType int64

const (
	MeshPrimitivePoints MeshPrimitiveType = 0
	MeshPrimitiveLines MeshPrimitiveType = 1
	MeshPrimitiveLineStrip MeshPrimitiveType = 2
	MeshPrimitiveTriangles MeshPrimitiveType = 3
	MeshPrimitiveTriangleStrip MeshPrimitiveType = 4
)

type MeshArrayType int64

const (
	MeshArrayVertex MeshArrayType = 0
	MeshArrayNormal MeshArrayType = 1
	MeshArrayTangent MeshArrayType = 2
	MeshArrayColor MeshArrayType = 3
	MeshArrayTexUv MeshArrayType = 4
	MeshArrayTexUv2 MeshArrayType = 5
	MeshArrayCustom0 MeshArrayType = 6
	MeshArrayCustom1 MeshArrayType = 7
	MeshArrayCustom2 MeshArrayType = 8
	MeshArrayCustom3 MeshArrayType = 9
	MeshArrayBones MeshArrayType = 10
	MeshArrayWeights MeshArrayType = 11
	MeshArrayIndex MeshArrayType = 12
	MeshArrayMax MeshArrayType = 13
)

type MeshArrayCustomFormat int64

const (
	MeshArrayCustomRgba8Unorm MeshArrayCustomFormat = 0
	MeshArrayCustomRgba8Snorm MeshArrayCustomFormat = 1
	MeshArrayCustomRgHalf MeshArrayCustomFormat = 2
	MeshArrayCustomRgbaHalf MeshArrayCustomFormat = 3
	MeshArrayCustomRFloat MeshArrayCustomFormat = 4
	MeshArrayCustomRgFloat MeshArrayCustomFormat = 5
	MeshArrayCustomRgbFloat MeshArrayCustomFormat = 6
	MeshArrayCustomRgbaFloat MeshArrayCustomFormat = 7
	MeshArrayCustomMax MeshArrayCustomFormat = 8
)

type MeshArrayFormat int64

const (
	MeshArrayFormatVertex MeshArrayFormat = 1
	MeshArrayFormatNormal MeshArrayFormat = 2
	MeshArrayFormatTangent MeshArrayFormat = 4
	MeshArrayFormatColor MeshArrayFormat = 8
	MeshArrayFormatTexUv MeshArrayFormat = 16
	MeshArrayFormatTexUv2 MeshArrayFormat = 32
	MeshArrayFormatCustom0 MeshArrayFormat = 64
	MeshArrayFormatCustom1 MeshArrayFormat = 128
	MeshArrayFormatCustom2 MeshArrayFormat = 256
	MeshArrayFormatCustom3 MeshArrayFormat = 512
	MeshArrayFormatBones MeshArrayFormat = 1024
	MeshArrayFormatWeights MeshArrayFormat = 2048
	MeshArrayFormatIndex MeshArrayFormat = 4096
	MeshArrayFormatBlendShapeMask MeshArrayFormat = 7
	MeshArrayFormatCustomBase MeshArrayFormat = 13
	MeshArrayFormatCustomBits MeshArrayFormat = 3
	MeshArrayFormatCustom0Shift MeshArrayFormat = 13
	MeshArrayFormatCustom1Shift MeshArrayFormat = 16
	MeshArrayFormatCustom2Shift MeshArrayFormat = 19
	MeshArrayFormatCustom3Shift MeshArrayFormat = 22
	MeshArrayFormatCustomMask MeshArrayFormat = 7
	MeshArrayCompressFlagsBase MeshArrayFormat = 25
	MeshArrayFlagUse2dVertices MeshArrayFormat = 33554432
	MeshArrayFlagUseDynamicUpdate MeshArrayFormat = 67108864
	MeshArrayFlagUse8BoneWeights MeshArrayFormat = 134217728
)

type MeshBlendShapeMode int64

const (
	MeshBlendShapeModeNormalized MeshBlendShapeMode = 0
	MeshBlendShapeModeRelative MeshBlendShapeMode = 1
)

type Mesh gdnative.Object
func (Mesh) class() string { return "Mesh\000" }

func (gdClass Mesh) Resource() Resource { return Resource(gdClass) }

var methodMesh [13]gdnative.Method
func (gdClass Mesh) virtual(val any, name string) any {	switch name {
	case "_get_surface_count":
		i, ok := val.(interface{ GetSurfaceCount() int64 })
		if ok {
			return i.GetSurfaceCount
		}
	case "_surface_get_array_len":
		i, ok := val.(interface{ SurfaceGetArrayLen(index int64) int64 })
		if ok {
			return i.SurfaceGetArrayLen
		}
	case "_surface_get_array_index_len":
		i, ok := val.(interface{ SurfaceGetArrayIndexLen(index int64) int64 })
		if ok {
			return i.SurfaceGetArrayIndexLen
		}
	case "_surface_get_arrays":
		i, ok := val.(interface{ SurfaceGetArrays(index int64) Array })
		if ok {
			return i.SurfaceGetArrays
		}
	case "_surface_get_blend_shape_arrays":
		i, ok := val.(interface{ SurfaceGetBlendShapeArrays(index int64) Array })
		if ok {
			return i.SurfaceGetBlendShapeArrays
		}
	case "_surface_get_lods":
		i, ok := val.(interface{ SurfaceGetLods(index int64) Dictionary })
		if ok {
			return i.SurfaceGetLods
		}
	case "_surface_get_format":
		i, ok := val.(interface{ SurfaceGetFormat(index int64) int64 })
		if ok {
			return i.SurfaceGetFormat
		}
	case "_surface_get_primitive_type":
		i, ok := val.(interface{ SurfaceGetPrimitiveType(index int64) int64 })
		if ok {
			return i.SurfaceGetPrimitiveType
		}
	case "_surface_set_material":
		i, ok := val.(interface{ SurfaceSetMaterial(index int64, material Material)  })
		if ok {
			return i.SurfaceSetMaterial
		}
	case "_surface_get_material":
		i, ok := val.(interface{ SurfaceGetMaterial(index int64) Material })
		if ok {
			return i.SurfaceGetMaterial
		}
	case "_get_blend_shape_count":
		i, ok := val.(interface{ GetBlendShapeCount() int64 })
		if ok {
			return i.GetBlendShapeCount
		}
	case "_get_blend_shape_name":
		i, ok := val.(interface{ GetBlendShapeName(index int64) string })
		if ok {
			return i.GetBlendShapeName
		}
	case "_set_blend_shape_name":
		i, ok := val.(interface{ SetBlendShapeName(index int64, name string)  })
		if ok {
			return i.SetBlendShapeName
		}
	case "_get_aabb":
		i, ok := val.(interface{ GetAabb() AABB })
		if ok {
			return i.GetAabb
		}
	}
	return nil
}
func (gdClass Mesh) SetLightmapSizeHint(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[0], size) }
func (gdClass Mesh) GetLightmapSizeHint() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodMesh[1]) }
func (gdClass Mesh) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodMesh[2]) }
func (gdClass Mesh) GetSurfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMesh[3]) }
func (gdClass Mesh) SurfaceGetArrays(surf_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[4], surf_idx) }
func (gdClass Mesh) SurfaceGetBlendShapeArrays(surf_idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMesh[5], surf_idx) }
func (gdClass Mesh) SurfaceSetMaterial(surf_idx int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMesh[6], surf_idx, material) }
func (gdClass Mesh) SurfaceGetMaterial(surf_idx int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMesh[7], surf_idx) }
func (gdClass Mesh) CreateTrimeshShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodMesh[8]) }
func (gdClass Mesh) CreateConvexShape(clean bool, simplify bool) Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodMesh[9], clean, simplify) }
func (gdClass Mesh) CreateOutline(margin float64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMesh[10], margin) }
func (gdClass Mesh) GetFaces() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodMesh[11]) }
func (gdClass Mesh) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodMesh[12]) }

type MeshDataTool gdnative.Object
func (MeshDataTool) class() string { return "MeshDataTool\000" }

func (gdClass MeshDataTool) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodMeshDataTool [38]gdnative.Method
func (gdClass MeshDataTool) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[0]) }
func (gdClass MeshDataTool) CreateFromSurface(mesh ArrayMesh, surface int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMeshDataTool[1], mesh, surface) }
func (gdClass MeshDataTool) CommitToSurface(mesh ArrayMesh) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMeshDataTool[2], mesh) }
func (gdClass MeshDataTool) GetFormat() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[3]) }
func (gdClass MeshDataTool) GetVertexCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[4]) }
func (gdClass MeshDataTool) GetEdgeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[5]) }
func (gdClass MeshDataTool) GetFaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[6]) }
func (gdClass MeshDataTool) SetVertex(idx int64, vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[7], idx, vertex) }
func (gdClass MeshDataTool) GetVertex(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[8], idx) }
func (gdClass MeshDataTool) SetVertexNormal(idx int64, normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[9], idx, normal) }
func (gdClass MeshDataTool) GetVertexNormal(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[10], idx) }
func (gdClass MeshDataTool) SetVertexTangent(idx int64, tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[11], idx, tangent) }
func (gdClass MeshDataTool) GetVertexTangent(idx int64) Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodMeshDataTool[12], idx) }
func (gdClass MeshDataTool) SetVertexUv(idx int64, uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[13], idx, uv) }
func (gdClass MeshDataTool) GetVertexUv(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshDataTool[14], idx) }
func (gdClass MeshDataTool) SetVertexUv2(idx int64, uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[15], idx, uv2) }
func (gdClass MeshDataTool) GetVertexUv2(idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshDataTool[16], idx) }
func (gdClass MeshDataTool) SetVertexColor(idx int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[17], idx, color) }
func (gdClass MeshDataTool) GetVertexColor(idx int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMeshDataTool[18], idx) }
func (gdClass MeshDataTool) SetVertexBones(idx int64, bones []int32)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[19], idx, bones) }
func (gdClass MeshDataTool) GetVertexBones(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[20], idx) }
func (gdClass MeshDataTool) SetVertexWeights(idx int64, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[21], idx, weights) }
func (gdClass MeshDataTool) GetVertexWeights(idx int64) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodMeshDataTool[22], idx) }
func (gdClass MeshDataTool) SetVertexMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[23], idx, meta) }
func (gdClass MeshDataTool) GetVertexMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[24], idx) }
func (gdClass MeshDataTool) GetVertexEdges(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[25], idx) }
func (gdClass MeshDataTool) GetVertexFaces(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[26], idx) }
func (gdClass MeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[27], idx, vertex) }
func (gdClass MeshDataTool) GetEdgeFaces(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshDataTool[28], idx) }
func (gdClass MeshDataTool) SetEdgeMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[29], idx, meta) }
func (gdClass MeshDataTool) GetEdgeMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[30], idx) }
func (gdClass MeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[31], idx, vertex) }
func (gdClass MeshDataTool) GetFaceEdge(idx int64, edge int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshDataTool[32], idx, edge) }
func (gdClass MeshDataTool) SetFaceMeta(idx int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[33], idx, meta) }
func (gdClass MeshDataTool) GetFaceMeta(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodMeshDataTool[34], idx) }
func (gdClass MeshDataTool) GetFaceNormal(idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodMeshDataTool[35], idx) }
func (gdClass MeshDataTool) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMeshDataTool[36], material) }
func (gdClass MeshDataTool) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshDataTool[37]) }

type MeshInstance2D gdnative.Object
func (MeshInstance2D) class() string { return "MeshInstance2D\000" }

func (gdClass MeshInstance2D) Node2D() Node2D { return Node2D(gdClass) }

var methodMeshInstance2D [6]gdnative.Method
func (gdClass MeshInstance2D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[0], mesh) }
func (gdClass MeshInstance2D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshInstance2D[1]) }
func (gdClass MeshInstance2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[2], texture) }
func (gdClass MeshInstance2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshInstance2D[3]) }
func (gdClass MeshInstance2D) SetNormalMap(normal_map Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance2D[4], normal_map) }
func (gdClass MeshInstance2D) GetNormalMap() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshInstance2D[5]) }

type MeshInstance3D gdnative.Object
func (MeshInstance3D) class() string { return "MeshInstance3D\000" }

func (gdClass MeshInstance3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodMeshInstance3D [18]gdnative.Method
func (gdClass MeshInstance3D) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[0], mesh) }
func (gdClass MeshInstance3D) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshInstance3D[1]) }
func (gdClass MeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[2], skeleton_path) }
func (gdClass MeshInstance3D) GetSkeletonPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMeshInstance3D[3]) }
func (gdClass MeshInstance3D) SetSkin(skin Skin)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[4], skin) }
func (gdClass MeshInstance3D) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodMeshInstance3D[5]) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterialCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[6]) }
func (gdClass MeshInstance3D) SetSurfaceOverrideMaterial(surface int64, material Material)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[7], surface, material) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterial(surface int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshInstance3D[8], surface) }
func (gdClass MeshInstance3D) GetActiveMaterial(surface int64) Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodMeshInstance3D[9], surface) }
func (gdClass MeshInstance3D) CreateTrimeshCollision()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[10]) }
func (gdClass MeshInstance3D) CreateConvexCollision(clean bool, simplify bool)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[11], clean, simplify) }
func (gdClass MeshInstance3D) CreateMultipleConvexCollisions()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[12]) }
func (gdClass MeshInstance3D) GetBlendShapeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[13]) }
func (gdClass MeshInstance3D) FindBlendShapeByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshInstance3D[14], name) }
func (gdClass MeshInstance3D) GetBlendShapeValue(blend_shape_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMeshInstance3D[15], blend_shape_idx) }
func (gdClass MeshInstance3D) SetBlendShapeValue(blend_shape_idx int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[16], blend_shape_idx, value) }
func (gdClass MeshInstance3D) CreateDebugTangents()  { gdnative.Call(gdnative.Object(gdClass), methodMeshInstance3D[17]) }

type MeshLibrary gdnative.Object
func (MeshLibrary) class() string { return "MeshLibrary\000" }

func (gdClass MeshLibrary) Resource() Resource { return Resource(gdClass) }

var methodMeshLibrary [20]gdnative.Method
func (gdClass MeshLibrary) CreateItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[0], id) }
func (gdClass MeshLibrary) SetItemName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[1], id, name) }
func (gdClass MeshLibrary) SetItemMesh(id int64, mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[2], id, mesh) }
func (gdClass MeshLibrary) SetItemMeshTransform(id int64, mesh_transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[3], id, mesh_transform) }
func (gdClass MeshLibrary) SetItemNavmesh(id int64, navmesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[4], id, navmesh) }
func (gdClass MeshLibrary) SetItemNavmeshTransform(id int64, navmesh Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[5], id, navmesh) }
func (gdClass MeshLibrary) SetItemShapes(id int64, shapes Array)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[6], id, shapes) }
func (gdClass MeshLibrary) SetItemPreview(id int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[7], id, texture) }
func (gdClass MeshLibrary) GetItemName(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMeshLibrary[8], id) }
func (gdClass MeshLibrary) GetItemMesh(id int64) Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshLibrary[9], id) }
func (gdClass MeshLibrary) GetItemMeshTransform(id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMeshLibrary[10], id) }
func (gdClass MeshLibrary) GetItemNavmesh(id int64) NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodMeshLibrary[11], id) }
func (gdClass MeshLibrary) GetItemNavmeshTransform(id int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMeshLibrary[12], id) }
func (gdClass MeshLibrary) GetItemShapes(id int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodMeshLibrary[13], id) }
func (gdClass MeshLibrary) GetItemPreview(id int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshLibrary[14], id) }
func (gdClass MeshLibrary) RemoveItem(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[15], id) }
func (gdClass MeshLibrary) FindItemByName(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshLibrary[16], name) }
func (gdClass MeshLibrary) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodMeshLibrary[17]) }
func (gdClass MeshLibrary) GetItemList() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMeshLibrary[18]) }
func (gdClass MeshLibrary) GetLastUnusedItemId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMeshLibrary[19]) }

type MeshTexture gdnative.Object
func (MeshTexture) class() string { return "MeshTexture\000" }

func (gdClass MeshTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodMeshTexture [6]gdnative.Method
func (gdClass MeshTexture) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[0], mesh) }
func (gdClass MeshTexture) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMeshTexture[1]) }
func (gdClass MeshTexture) SetImageSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[2], size) }
func (gdClass MeshTexture) GetImageSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodMeshTexture[3]) }
func (gdClass MeshTexture) SetBaseTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMeshTexture[4], texture) }
func (gdClass MeshTexture) GetBaseTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMeshTexture[5]) }

type MethodTweener gdnative.Object
func (MethodTweener) class() string { return "MethodTweener\000" }

func (gdClass MethodTweener) Tweener() Tweener { return Tweener(gdClass) }

var methodMethodTweener [3]gdnative.Method
func (gdClass MethodTweener) SetDelay(delay float64) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[0], delay) }
func (gdClass MethodTweener) SetTrans(trans TweenTransitionType) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[1], trans) }
func (gdClass MethodTweener) SetEase(ease TweenEaseType) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodMethodTweener[2], ease) }

type MissingNode gdnative.Object
func (MissingNode) class() string { return "MissingNode\000" }

func (gdClass MissingNode) Node() Node { return Node(gdClass) }

var methodMissingNode [4]gdnative.Method
func (gdClass MissingNode) SetOriginalClass(name string)  { gdnative.Call(gdnative.Object(gdClass), methodMissingNode[0], name) }
func (gdClass MissingNode) GetOriginalClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMissingNode[1]) }
func (gdClass MissingNode) SetRecordingProperties(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMissingNode[2], enable) }
func (gdClass MissingNode) IsRecordingProperties() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMissingNode[3]) }

type MissingResource gdnative.Object
func (MissingResource) class() string { return "MissingResource\000" }

func (gdClass MissingResource) Resource() Resource { return Resource(gdClass) }

var methodMissingResource [4]gdnative.Method
func (gdClass MissingResource) SetOriginalClass(name string)  { gdnative.Call(gdnative.Object(gdClass), methodMissingResource[0], name) }
func (gdClass MissingResource) GetOriginalClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMissingResource[1]) }
func (gdClass MissingResource) SetRecordingProperties(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMissingResource[2], enable) }
func (gdClass MissingResource) IsRecordingProperties() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMissingResource[3]) }

type MobileVRInterface gdnative.Object
func (MobileVRInterface) class() string { return "MobileVRInterface\000" }

func (gdClass MobileVRInterface) XRInterface() XRInterface { return XRInterface(gdClass) }

var methodMobileVRInterface [14]gdnative.Method
func (gdClass MobileVRInterface) SetEyeHeight(eye_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[0], eye_height) }
func (gdClass MobileVRInterface) GetEyeHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[1]) }
func (gdClass MobileVRInterface) SetIod(iod float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[2], iod) }
func (gdClass MobileVRInterface) GetIod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[3]) }
func (gdClass MobileVRInterface) SetDisplayWidth(display_width float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[4], display_width) }
func (gdClass MobileVRInterface) GetDisplayWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[5]) }
func (gdClass MobileVRInterface) SetDisplayToLens(display_to_lens float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[6], display_to_lens) }
func (gdClass MobileVRInterface) GetDisplayToLens() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[7]) }
func (gdClass MobileVRInterface) SetOversample(oversample float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[8], oversample) }
func (gdClass MobileVRInterface) GetOversample() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[9]) }
func (gdClass MobileVRInterface) SetK1(k float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[10], k) }
func (gdClass MobileVRInterface) GetK1() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[11]) }
func (gdClass MobileVRInterface) SetK2(k float64)  { gdnative.Call(gdnative.Object(gdClass), methodMobileVRInterface[12], k) }
func (gdClass MobileVRInterface) GetK2() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMobileVRInterface[13]) }

type MovieWriter gdnative.Object
func (MovieWriter) class() string { return "MovieWriter\000" }

func (gdClass MovieWriter) Object() Object { return Object(gdClass) }

var methodMovieWriter [1]gdnative.Method
func (gdClass MovieWriter) virtual(val any, name string) any {	switch name {
	case "_get_audio_mix_rate":
		i, ok := val.(interface{ GetAudioMixRate() int64 })
		if ok {
			return i.GetAudioMixRate
		}
	case "_get_audio_speaker_mode":
		i, ok := val.(interface{ GetAudioSpeakerMode() AudioServerSpeakerMode })
		if ok {
			return i.GetAudioSpeakerMode
		}
	case "_handles_file":
		i, ok := val.(interface{ HandlesFile(path string) bool })
		if ok {
			return i.HandlesFile
		}
	case "_write_begin":
		i, ok := val.(interface{ WriteBegin(movie_size Vector2i, fps int64, base_path string) error })
		if ok {
			return i.WriteBegin
		}
	case "_write_frame":
		i, ok := val.(interface{ WriteFrame(frame_image Image, audio_frame_block []byte) error })
		if ok {
			return i.WriteFrame
		}
	case "_write_end":
		i, ok := val.(interface{ WriteEnd()  })
		if ok {
			return i.WriteEnd
		}
	}
	return nil
}
func (gdClass MovieWriter) AddWriter(writer MovieWriter)  { gdnative.Call(gdnative.Object(gdClass), methodMovieWriter[0], writer) }

type MovieWriterMJPEG gdnative.Object
func (MovieWriterMJPEG) class() string { return "MovieWriterMJPEG\000" }

func (gdClass MovieWriterMJPEG) MovieWriter() MovieWriter { return MovieWriter(gdClass) }


type MovieWriterPNGWAV gdnative.Object
func (MovieWriterPNGWAV) class() string { return "MovieWriterPNGWAV\000" }

func (gdClass MovieWriterPNGWAV) MovieWriter() MovieWriter { return MovieWriter(gdClass) }


type MultiMeshTransformFormat int64

const (
	MultiMeshTransform2d MultiMeshTransformFormat = 0
	MultiMeshTransform3d MultiMeshTransformFormat = 1
)

type MultiMesh gdnative.Object
func (MultiMesh) class() string { return "MultiMesh\000" }

func (gdClass MultiMesh) Resource() Resource { return Resource(gdClass) }

var methodMultiMesh [23]gdnative.Method
func (gdClass MultiMesh) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[0], mesh) }
func (gdClass MultiMesh) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodMultiMesh[1]) }
func (gdClass MultiMesh) SetUseColors(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[2], enable) }
func (gdClass MultiMesh) IsUsingColors() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiMesh[3]) }
func (gdClass MultiMesh) SetUseCustomData(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[4], enable) }
func (gdClass MultiMesh) IsUsingCustomData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiMesh[5]) }
func (gdClass MultiMesh) SetTransformFormat(format MultiMeshTransformFormat)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[6], format) }
func (gdClass MultiMesh) GetTransformFormat() MultiMeshTransformFormat { return gdnative.Return[MultiMeshTransformFormat](gdnative.Object(gdClass), methodMultiMesh[7]) }
func (gdClass MultiMesh) SetInstanceCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[8], count) }
func (gdClass MultiMesh) GetInstanceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiMesh[9]) }
func (gdClass MultiMesh) SetVisibleInstanceCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[10], count) }
func (gdClass MultiMesh) GetVisibleInstanceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiMesh[11]) }
func (gdClass MultiMesh) SetInstanceTransform(instance int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[12], instance, transform) }
func (gdClass MultiMesh) SetInstanceTransform2d(instance int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[13], instance, transform) }
func (gdClass MultiMesh) GetInstanceTransform(instance int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodMultiMesh[14], instance) }
func (gdClass MultiMesh) GetInstanceTransform2d(instance int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodMultiMesh[15], instance) }
func (gdClass MultiMesh) SetInstanceColor(instance int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[16], instance, color) }
func (gdClass MultiMesh) GetInstanceColor(instance int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMultiMesh[17], instance) }
func (gdClass MultiMesh) SetInstanceCustomData(instance int64, custom_data Color)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[18], instance, custom_data) }
func (gdClass MultiMesh) GetInstanceCustomData(instance int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodMultiMesh[19], instance) }
func (gdClass MultiMesh) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodMultiMesh[20]) }
func (gdClass MultiMesh) GetBuffer() []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodMultiMesh[21]) }
func (gdClass MultiMesh) SetBuffer(buffer []float32)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMesh[22], buffer) }

type MultiMeshInstance2D gdnative.Object
func (MultiMeshInstance2D) class() string { return "MultiMeshInstance2D\000" }

func (gdClass MultiMeshInstance2D) Node2D() Node2D { return Node2D(gdClass) }

var methodMultiMeshInstance2D [6]gdnative.Method
func (gdClass MultiMeshInstance2D) SetMultimesh(multimesh MultiMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[0], multimesh) }
func (gdClass MultiMeshInstance2D) GetMultimesh() MultiMesh { return gdnative.Return[MultiMesh](gdnative.Object(gdClass), methodMultiMeshInstance2D[1]) }
func (gdClass MultiMeshInstance2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[2], texture) }
func (gdClass MultiMeshInstance2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMultiMeshInstance2D[3]) }
func (gdClass MultiMeshInstance2D) SetNormalMap(normal_map Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance2D[4], normal_map) }
func (gdClass MultiMeshInstance2D) GetNormalMap() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodMultiMeshInstance2D[5]) }

type MultiMeshInstance3D gdnative.Object
func (MultiMeshInstance3D) class() string { return "MultiMeshInstance3D\000" }

func (gdClass MultiMeshInstance3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodMultiMeshInstance3D [2]gdnative.Method
func (gdClass MultiMeshInstance3D) SetMultimesh(multimesh MultiMesh)  { gdnative.Call(gdnative.Object(gdClass), methodMultiMeshInstance3D[0], multimesh) }
func (gdClass MultiMeshInstance3D) GetMultimesh() MultiMesh { return gdnative.Return[MultiMesh](gdnative.Object(gdClass), methodMultiMeshInstance3D[1]) }

type MultiplayerAPIRPCMode int64

const (
	MultiplayerAPIRpcModeDisabled MultiplayerAPIRPCMode = 0
	MultiplayerAPIRpcModeAnyPeer MultiplayerAPIRPCMode = 1
	MultiplayerAPIRpcModeAuthority MultiplayerAPIRPCMode = 2
)

type MultiplayerAPI gdnative.Object
func (MultiplayerAPI) class() string { return "MultiplayerAPI\000" }

func (gdClass MultiplayerAPI) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodMultiplayerAPI [14]gdnative.Method
func (gdClass MultiplayerAPI) HasMultiplayerPeer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerAPI[0]) }
func (gdClass MultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer { return gdnative.Return[MultiplayerPeer](gdnative.Object(gdClass), methodMultiplayerAPI[1]) }
func (gdClass MultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerAPI[2], peer) }
func (gdClass MultiplayerAPI) GetUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPI[3]) }
func (gdClass MultiplayerAPI) IsServer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerAPI[4]) }
func (gdClass MultiplayerAPI) GetRemoteSenderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerAPI[5]) }
func (gdClass MultiplayerAPI) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[6]) }
func (gdClass MultiplayerAPI) Rpc(peer int64, object Object, method string, arguments Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[7], peer, object, method, arguments) }
func (gdClass MultiplayerAPI) ObjectConfigurationAdd(object Object, configuration any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[8], object, configuration) }
func (gdClass MultiplayerAPI) ObjectConfigurationRemove(object Object, configuration any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodMultiplayerAPI[9], object, configuration) }
func (gdClass MultiplayerAPI) GetPeers() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodMultiplayerAPI[10]) }
func (gdClass MultiplayerAPI) SetDefaultInterface(interface_name string)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerAPI[11], interface_name) }
func (gdClass MultiplayerAPI) GetDefaultInterface() string { return gdnative.Return[string](gdnative.Object(gdClass), methodMultiplayerAPI[12]) }
func (gdClass MultiplayerAPI) CreateDefaultInterface() MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodMultiplayerAPI[13]) }

type MultiplayerAPIExtension gdnative.Object
func (MultiplayerAPIExtension) class() string { return "MultiplayerAPIExtension\000" }

func (gdClass MultiplayerAPIExtension) MultiplayerAPI() MultiplayerAPI { return MultiplayerAPI(gdClass) }

func (gdClass MultiplayerAPIExtension) virtual(val any, name string) any {	switch name {
	case "_poll":
		i, ok := val.(interface{ Poll() int64 })
		if ok {
			return i.Poll
		}
	case "_set_multiplayer_peer":
		i, ok := val.(interface{ SetMultiplayerPeer(multiplayer_peer MultiplayerPeer)  })
		if ok {
			return i.SetMultiplayerPeer
		}
	case "_get_multiplayer_peer":
		i, ok := val.(interface{ GetMultiplayerPeer() MultiplayerPeer })
		if ok {
			return i.GetMultiplayerPeer
		}
	case "_get_unique_id":
		i, ok := val.(interface{ GetUniqueId() int64 })
		if ok {
			return i.GetUniqueId
		}
	case "_get_peer_ids":
		i, ok := val.(interface{ GetPeerIds() []int32 })
		if ok {
			return i.GetPeerIds
		}
	case "_rpc":
		i, ok := val.(interface{ Rpc(peer int64, object Object, method string, args Array) int64 })
		if ok {
			return i.Rpc
		}
	case "_get_remote_sender_id":
		i, ok := val.(interface{ GetRemoteSenderId() int64 })
		if ok {
			return i.GetRemoteSenderId
		}
	case "_object_configuration_add":
		i, ok := val.(interface{ ObjectConfigurationAdd(object Object, configuration any) int64 })
		if ok {
			return i.ObjectConfigurationAdd
		}
	case "_object_configuration_remove":
		i, ok := val.(interface{ ObjectConfigurationRemove(object Object, configuration any) int64 })
		if ok {
			return i.ObjectConfigurationRemove
		}
	}
	return nil
}

type MultiplayerPeerConnectionStatus int64

const (
	MultiplayerPeerConnectionDisconnected MultiplayerPeerConnectionStatus = 0
	MultiplayerPeerConnectionConnecting MultiplayerPeerConnectionStatus = 1
	MultiplayerPeerConnectionConnected MultiplayerPeerConnectionStatus = 2
)

type MultiplayerPeerTransferMode int64

const (
	MultiplayerPeerTransferModeUnreliable MultiplayerPeerTransferMode = 0
	MultiplayerPeerTransferModeUnreliableOrdered MultiplayerPeerTransferMode = 1
	MultiplayerPeerTransferModeReliable MultiplayerPeerTransferMode = 2
)

type MultiplayerPeer gdnative.Object
func (MultiplayerPeer) class() string { return "MultiplayerPeer\000" }

func (gdClass MultiplayerPeer) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodMultiplayerPeer [12]gdnative.Method
func (gdClass MultiplayerPeer) SetTransferChannel(channel int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[0], channel) }
func (gdClass MultiplayerPeer) GetTransferChannel() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[1]) }
func (gdClass MultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[2], mode) }
func (gdClass MultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode { return gdnative.Return[MultiplayerPeerTransferMode](gdnative.Object(gdClass), methodMultiplayerPeer[3]) }
func (gdClass MultiplayerPeer) SetTargetPeer(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[4], id) }
func (gdClass MultiplayerPeer) GetPacketPeer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[5]) }
func (gdClass MultiplayerPeer) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[6]) }
func (gdClass MultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus { return gdnative.Return[MultiplayerPeerConnectionStatus](gdnative.Object(gdClass), methodMultiplayerPeer[7]) }
func (gdClass MultiplayerPeer) GetUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[8]) }
func (gdClass MultiplayerPeer) GenerateUniqueId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerPeer[9]) }
func (gdClass MultiplayerPeer) SetRefuseNewConnections(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerPeer[10], enable) }
func (gdClass MultiplayerPeer) IsRefusingNewConnections() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerPeer[11]) }

type MultiplayerPeerExtension gdnative.Object
func (MultiplayerPeerExtension) class() string { return "MultiplayerPeerExtension\000" }

func (gdClass MultiplayerPeerExtension) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer(gdClass) }

func (gdClass MultiplayerPeerExtension) virtual(val any, name string) any {	switch name {
	case "_get_packet":
		i, ok := val.(interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 })
		if ok {
			return i.GetPacket
		}
	case "_put_packet":
		i, ok := val.(interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 })
		if ok {
			return i.PutPacket
		}
	case "_get_available_packet_count":
		i, ok := val.(interface{ GetAvailablePacketCount() int64 })
		if ok {
			return i.GetAvailablePacketCount
		}
	case "_get_max_packet_size":
		i, ok := val.(interface{ GetMaxPacketSize() int64 })
		if ok {
			return i.GetMaxPacketSize
		}
	case "_get_packet_script":
		i, ok := val.(interface{ GetPacketScript() []byte })
		if ok {
			return i.GetPacketScript
		}
	case "_put_packet_script":
		i, ok := val.(interface{ PutPacketScript(p_buffer []byte) int64 })
		if ok {
			return i.PutPacketScript
		}
	case "_set_transfer_channel":
		i, ok := val.(interface{ SetTransferChannel(p_channel int64)  })
		if ok {
			return i.SetTransferChannel
		}
	case "_get_transfer_channel":
		i, ok := val.(interface{ GetTransferChannel() int64 })
		if ok {
			return i.GetTransferChannel
		}
	case "_set_transfer_mode":
		i, ok := val.(interface{ SetTransferMode(p_mode int64)  })
		if ok {
			return i.SetTransferMode
		}
	case "_get_transfer_mode":
		i, ok := val.(interface{ GetTransferMode() int64 })
		if ok {
			return i.GetTransferMode
		}
	case "_set_target_peer":
		i, ok := val.(interface{ SetTargetPeer(p_peer int64)  })
		if ok {
			return i.SetTargetPeer
		}
	case "_get_packet_peer":
		i, ok := val.(interface{ GetPacketPeer() int64 })
		if ok {
			return i.GetPacketPeer
		}
	case "_is_server":
		i, ok := val.(interface{ IsServer() bool })
		if ok {
			return i.IsServer
		}
	case "_poll":
		i, ok := val.(interface{ Poll() int64 })
		if ok {
			return i.Poll
		}
	case "_get_unique_id":
		i, ok := val.(interface{ GetUniqueId() int64 })
		if ok {
			return i.GetUniqueId
		}
	case "_set_refuse_new_connections":
		i, ok := val.(interface{ SetRefuseNewConnections(p_enable bool)  })
		if ok {
			return i.SetRefuseNewConnections
		}
	case "_is_refusing_new_connections":
		i, ok := val.(interface{ IsRefusingNewConnections() bool })
		if ok {
			return i.IsRefusingNewConnections
		}
	case "_get_connection_status":
		i, ok := val.(interface{ GetConnectionStatus() int64 })
		if ok {
			return i.GetConnectionStatus
		}
	}
	return nil
}

type MultiplayerSpawner gdnative.Object
func (MultiplayerSpawner) class() string { return "MultiplayerSpawner\000" }

func (gdClass MultiplayerSpawner) Node() Node { return Node(gdClass) }

var methodMultiplayerSpawner [9]gdnative.Method
func (gdClass MultiplayerSpawner) virtual(val any, name string) any {	switch name {
	case "_spawn_custom":
		i, ok := val.(interface{ SpawnCustom(data any) Node })
		if ok {
			return i.SpawnCustom
		}
	}
	return nil
}
func (gdClass MultiplayerSpawner) AddSpawnableScene(path string)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[0], path) }
func (gdClass MultiplayerSpawner) GetSpawnableSceneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerSpawner[1]) }
func (gdClass MultiplayerSpawner) GetSpawnableScene(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodMultiplayerSpawner[2], index) }
func (gdClass MultiplayerSpawner) ClearSpawnableScenes()  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[3]) }
func (gdClass MultiplayerSpawner) Spawn(data any) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodMultiplayerSpawner[4], data) }
func (gdClass MultiplayerSpawner) GetSpawnPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMultiplayerSpawner[5]) }
func (gdClass MultiplayerSpawner) SetSpawnPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[6], path) }
func (gdClass MultiplayerSpawner) GetSpawnLimit() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodMultiplayerSpawner[7]) }
func (gdClass MultiplayerSpawner) SetSpawnLimit(limit int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSpawner[8], limit) }

type MultiplayerSynchronizerVisibilityUpdateMode int64

const (
	MultiplayerSynchronizerVisibilityProcessIdle MultiplayerSynchronizerVisibilityUpdateMode = 0
	MultiplayerSynchronizerVisibilityProcessPhysics MultiplayerSynchronizerVisibilityUpdateMode = 1
	MultiplayerSynchronizerVisibilityProcessNone MultiplayerSynchronizerVisibilityUpdateMode = 2
)

type MultiplayerSynchronizer gdnative.Object
func (MultiplayerSynchronizer) class() string { return "MultiplayerSynchronizer\000" }

func (gdClass MultiplayerSynchronizer) Node() Node { return Node(gdClass) }

var methodMultiplayerSynchronizer [15]gdnative.Method
func (gdClass MultiplayerSynchronizer) SetRootPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[0], path) }
func (gdClass MultiplayerSynchronizer) GetRootPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodMultiplayerSynchronizer[1]) }
func (gdClass MultiplayerSynchronizer) SetReplicationInterval(milliseconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[2], milliseconds) }
func (gdClass MultiplayerSynchronizer) GetReplicationInterval() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodMultiplayerSynchronizer[3]) }
func (gdClass MultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[4], config) }
func (gdClass MultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig { return gdnative.Return[SceneReplicationConfig](gdnative.Object(gdClass), methodMultiplayerSynchronizer[5]) }
func (gdClass MultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[6], mode) }
func (gdClass MultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode { return gdnative.Return[MultiplayerSynchronizerVisibilityUpdateMode](gdnative.Object(gdClass), methodMultiplayerSynchronizer[7]) }
func (gdClass MultiplayerSynchronizer) UpdateVisibility(for_peer int64)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[8], for_peer) }
func (gdClass MultiplayerSynchronizer) SetVisibilityPublic(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[9], visible) }
func (gdClass MultiplayerSynchronizer) IsVisibilityPublic() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerSynchronizer[10]) }
func (gdClass MultiplayerSynchronizer) AddVisibilityFilter(filter Callable)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[11], filter) }
func (gdClass MultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[12], filter) }
func (gdClass MultiplayerSynchronizer) SetVisibilityFor(peer int64, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodMultiplayerSynchronizer[13], peer, visible) }
func (gdClass MultiplayerSynchronizer) GetVisibilityFor(peer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodMultiplayerSynchronizer[14], peer) }

type Mutex gdnative.Object
func (Mutex) class() string { return "Mutex\000" }

func (gdClass Mutex) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodMutex [3]gdnative.Method
func (gdClass Mutex) Lock()  { gdnative.Call(gdnative.Object(gdClass), methodMutex[0]) }
func (gdClass Mutex) TryLock() error { return gdnative.Return[error](gdnative.Object(gdClass), methodMutex[1]) }
func (gdClass Mutex) Unlock()  { gdnative.Call(gdnative.Object(gdClass), methodMutex[2]) }

type NativeExtensionInitializationLevel int64

const (
	NativeExtensionInitializationLevelCore NativeExtensionInitializationLevel = 0
	NativeExtensionInitializationLevelServers NativeExtensionInitializationLevel = 1
	NativeExtensionInitializationLevelScene NativeExtensionInitializationLevel = 2
	NativeExtensionInitializationLevelEditor NativeExtensionInitializationLevel = 3
)

type NativeExtension gdnative.Object
func (NativeExtension) class() string { return "NativeExtension\000" }

func (gdClass NativeExtension) Resource() Resource { return Resource(gdClass) }

var methodNativeExtension [5]gdnative.Method
func (gdClass NativeExtension) OpenLibrary(path string, entry_symbol string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNativeExtension[0], path, entry_symbol) }
func (gdClass NativeExtension) CloseLibrary()  { gdnative.Call(gdnative.Object(gdClass), methodNativeExtension[1]) }
func (gdClass NativeExtension) IsLibraryOpen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNativeExtension[2]) }
func (gdClass NativeExtension) GetMinimumLibraryInitializationLevel() NativeExtensionInitializationLevel { return gdnative.Return[NativeExtensionInitializationLevel](gdnative.Object(gdClass), methodNativeExtension[3]) }
func (gdClass NativeExtension) InitializeLibrary(level NativeExtensionInitializationLevel)  { gdnative.Call(gdnative.Object(gdClass), methodNativeExtension[4], level) }

type NativeExtensionManagerLoadStatus int64

const (
	NativeExtensionManagerLoadStatusOk NativeExtensionManagerLoadStatus = 0
	NativeExtensionManagerLoadStatusFailed NativeExtensionManagerLoadStatus = 1
	NativeExtensionManagerLoadStatusAlreadyLoaded NativeExtensionManagerLoadStatus = 2
	NativeExtensionManagerLoadStatusNotLoaded NativeExtensionManagerLoadStatus = 3
	NativeExtensionManagerLoadStatusNeedsRestart NativeExtensionManagerLoadStatus = 4
)

type NativeExtensionManager gdnative.Object
func (NativeExtensionManager) class() string { return "NativeExtensionManager\000" }

func (gdClass NativeExtensionManager) Object() Object { return Object(gdClass) }

var methodNativeExtensionManager [6]gdnative.Method
func (gdClass NativeExtensionManager) LoadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[0], path) }
func (gdClass NativeExtensionManager) ReloadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[1], path) }
func (gdClass NativeExtensionManager) UnloadExtension(path string) NativeExtensionManagerLoadStatus { return gdnative.Return[NativeExtensionManagerLoadStatus](gdnative.Object(gdClass), methodNativeExtensionManager[2], path) }
func (gdClass NativeExtensionManager) IsExtensionLoaded(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNativeExtensionManager[3], path) }
func (gdClass NativeExtensionManager) GetLoadedExtensions() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodNativeExtensionManager[4]) }
func (gdClass NativeExtensionManager) GetExtension(path string) NativeExtension { return gdnative.Return[NativeExtension](gdnative.Object(gdClass), methodNativeExtensionManager[5], path) }

type NavigationAgent2D gdnative.Object
func (NavigationAgent2D) class() string { return "NavigationAgent2D\000" }

func (gdClass NavigationAgent2D) Node() Node { return Node(gdClass) }

var methodNavigationAgent2D [36]gdnative.Method
func (gdClass NavigationAgent2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent2D[0]) }
func (gdClass NavigationAgent2D) SetAvoidanceEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[1], enabled) }
func (gdClass NavigationAgent2D) GetAvoidanceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[2]) }
func (gdClass NavigationAgent2D) SetPathDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[3], desired_distance) }
func (gdClass NavigationAgent2D) GetPathDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[4]) }
func (gdClass NavigationAgent2D) SetTargetDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[5], desired_distance) }
func (gdClass NavigationAgent2D) GetTargetDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[6]) }
func (gdClass NavigationAgent2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[7], radius) }
func (gdClass NavigationAgent2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[8]) }
func (gdClass NavigationAgent2D) SetNeighborDist(neighbor_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[9], neighbor_dist) }
func (gdClass NavigationAgent2D) GetNeighborDist() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[10]) }
func (gdClass NavigationAgent2D) SetMaxNeighbors(max_neighbors int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[11], max_neighbors) }
func (gdClass NavigationAgent2D) GetMaxNeighbors() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[12]) }
func (gdClass NavigationAgent2D) SetTimeHorizon(time_horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[13], time_horizon) }
func (gdClass NavigationAgent2D) GetTimeHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[14]) }
func (gdClass NavigationAgent2D) SetMaxSpeed(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[15], max_speed) }
func (gdClass NavigationAgent2D) GetMaxSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[16]) }
func (gdClass NavigationAgent2D) SetPathMaxDistance(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[17], max_speed) }
func (gdClass NavigationAgent2D) GetPathMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[18]) }
func (gdClass NavigationAgent2D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[19], navigation_layers) }
func (gdClass NavigationAgent2D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[20]) }
func (gdClass NavigationAgent2D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[21], layer_number, value) }
func (gdClass NavigationAgent2D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[22], layer_number) }
func (gdClass NavigationAgent2D) SetNavigationMap(navigation_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[23], navigation_map) }
func (gdClass NavigationAgent2D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent2D[24]) }
func (gdClass NavigationAgent2D) SetTargetLocation(location Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[25], location) }
func (gdClass NavigationAgent2D) GetTargetLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[26]) }
func (gdClass NavigationAgent2D) GetNextLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[27]) }
func (gdClass NavigationAgent2D) DistanceToTarget() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent2D[28]) }
func (gdClass NavigationAgent2D) SetVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent2D[29], velocity) }
func (gdClass NavigationAgent2D) GetNavPath() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[30]) }
func (gdClass NavigationAgent2D) GetNavPathIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent2D[31]) }
func (gdClass NavigationAgent2D) IsTargetReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[32]) }
func (gdClass NavigationAgent2D) IsTargetReachable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[33]) }
func (gdClass NavigationAgent2D) IsNavigationFinished() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent2D[34]) }
func (gdClass NavigationAgent2D) GetFinalLocation() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationAgent2D[35]) }

type NavigationAgent3D gdnative.Object
func (NavigationAgent3D) class() string { return "NavigationAgent3D\000" }

func (gdClass NavigationAgent3D) Node() Node { return Node(gdClass) }

var methodNavigationAgent3D [40]gdnative.Method
func (gdClass NavigationAgent3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent3D[0]) }
func (gdClass NavigationAgent3D) SetAvoidanceEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[1], enabled) }
func (gdClass NavigationAgent3D) GetAvoidanceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[2]) }
func (gdClass NavigationAgent3D) SetPathDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[3], desired_distance) }
func (gdClass NavigationAgent3D) GetPathDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[4]) }
func (gdClass NavigationAgent3D) SetTargetDesiredDistance(desired_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[5], desired_distance) }
func (gdClass NavigationAgent3D) GetTargetDesiredDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[6]) }
func (gdClass NavigationAgent3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[7], radius) }
func (gdClass NavigationAgent3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[8]) }
func (gdClass NavigationAgent3D) SetAgentHeightOffset(agent_height_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[9], agent_height_offset) }
func (gdClass NavigationAgent3D) GetAgentHeightOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[10]) }
func (gdClass NavigationAgent3D) SetIgnoreY(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[11], ignore) }
func (gdClass NavigationAgent3D) GetIgnoreY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[12]) }
func (gdClass NavigationAgent3D) SetNeighborDist(neighbor_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[13], neighbor_dist) }
func (gdClass NavigationAgent3D) GetNeighborDist() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[14]) }
func (gdClass NavigationAgent3D) SetMaxNeighbors(max_neighbors int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[15], max_neighbors) }
func (gdClass NavigationAgent3D) GetMaxNeighbors() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[16]) }
func (gdClass NavigationAgent3D) SetTimeHorizon(time_horizon float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[17], time_horizon) }
func (gdClass NavigationAgent3D) GetTimeHorizon() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[18]) }
func (gdClass NavigationAgent3D) SetMaxSpeed(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[19], max_speed) }
func (gdClass NavigationAgent3D) GetMaxSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[20]) }
func (gdClass NavigationAgent3D) SetPathMaxDistance(max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[21], max_speed) }
func (gdClass NavigationAgent3D) GetPathMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[22]) }
func (gdClass NavigationAgent3D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[23], navigation_layers) }
func (gdClass NavigationAgent3D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[24]) }
func (gdClass NavigationAgent3D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[25], layer_number, value) }
func (gdClass NavigationAgent3D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[26], layer_number) }
func (gdClass NavigationAgent3D) SetNavigationMap(navigation_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[27], navigation_map) }
func (gdClass NavigationAgent3D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationAgent3D[28]) }
func (gdClass NavigationAgent3D) SetTargetLocation(location Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[29], location) }
func (gdClass NavigationAgent3D) GetTargetLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[30]) }
func (gdClass NavigationAgent3D) GetNextLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[31]) }
func (gdClass NavigationAgent3D) DistanceToTarget() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationAgent3D[32]) }
func (gdClass NavigationAgent3D) SetVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationAgent3D[33], velocity) }
func (gdClass NavigationAgent3D) GetNavPath() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[34]) }
func (gdClass NavigationAgent3D) GetNavPathIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationAgent3D[35]) }
func (gdClass NavigationAgent3D) IsTargetReached() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[36]) }
func (gdClass NavigationAgent3D) IsTargetReachable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[37]) }
func (gdClass NavigationAgent3D) IsNavigationFinished() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationAgent3D[38]) }
func (gdClass NavigationAgent3D) GetFinalLocation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationAgent3D[39]) }

type NavigationMeshSamplePartitionType int64

const (
	NavigationMeshSamplePartitionWatershed NavigationMeshSamplePartitionType = 0
	NavigationMeshSamplePartitionMonotone NavigationMeshSamplePartitionType = 1
	NavigationMeshSamplePartitionLayers NavigationMeshSamplePartitionType = 2
	NavigationMeshSamplePartitionMax NavigationMeshSamplePartitionType = 3
)

type NavigationMeshParsedGeometryType int64

const (
	NavigationMeshParsedGeometryMeshInstances NavigationMeshParsedGeometryType = 0
	NavigationMeshParsedGeometryStaticColliders NavigationMeshParsedGeometryType = 1
	NavigationMeshParsedGeometryBoth NavigationMeshParsedGeometryType = 2
	NavigationMeshParsedGeometryMax NavigationMeshParsedGeometryType = 3
)

type NavigationMeshSourceGeometryMode int64

const (
	NavigationMeshSourceGeometryNavmeshChildren NavigationMeshSourceGeometryMode = 0
	NavigationMeshSourceGeometryGroupsWithChildren NavigationMeshSourceGeometryMode = 1
	NavigationMeshSourceGeometryGroupsExplicit NavigationMeshSourceGeometryMode = 2
	NavigationMeshSourceGeometryMax NavigationMeshSourceGeometryMode = 3
)

type NavigationMesh gdnative.Object
func (NavigationMesh) class() string { return "NavigationMesh\000" }

func (gdClass NavigationMesh) Resource() Resource { return Resource(gdClass) }

var methodNavigationMesh [55]gdnative.Method
func (gdClass NavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[0], sample_partition_type) }
func (gdClass NavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType { return gdnative.Return[NavigationMeshSamplePartitionType](gdnative.Object(gdClass), methodNavigationMesh[1]) }
func (gdClass NavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[2], geometry_type) }
func (gdClass NavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType { return gdnative.Return[NavigationMeshParsedGeometryType](gdnative.Object(gdClass), methodNavigationMesh[3]) }
func (gdClass NavigationMesh) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[4], mask) }
func (gdClass NavigationMesh) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationMesh[5]) }
func (gdClass NavigationMesh) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[6], layer_number, value) }
func (gdClass NavigationMesh) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[7], layer_number) }
func (gdClass NavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[8], mask) }
func (gdClass NavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode { return gdnative.Return[NavigationMeshSourceGeometryMode](gdnative.Object(gdClass), methodNavigationMesh[9]) }
func (gdClass NavigationMesh) SetSourceGroupName(mask string)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[10], mask) }
func (gdClass NavigationMesh) GetSourceGroupName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNavigationMesh[11]) }
func (gdClass NavigationMesh) SetCellSize(cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[12], cell_size) }
func (gdClass NavigationMesh) GetCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[13]) }
func (gdClass NavigationMesh) SetCellHeight(cell_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[14], cell_height) }
func (gdClass NavigationMesh) GetCellHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[15]) }
func (gdClass NavigationMesh) SetAgentHeight(agent_height float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[16], agent_height) }
func (gdClass NavigationMesh) GetAgentHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[17]) }
func (gdClass NavigationMesh) SetAgentRadius(agent_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[18], agent_radius) }
func (gdClass NavigationMesh) GetAgentRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[19]) }
func (gdClass NavigationMesh) SetAgentMaxClimb(agent_max_climb float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[20], agent_max_climb) }
func (gdClass NavigationMesh) GetAgentMaxClimb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[21]) }
func (gdClass NavigationMesh) SetAgentMaxSlope(agent_max_slope float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[22], agent_max_slope) }
func (gdClass NavigationMesh) GetAgentMaxSlope() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[23]) }
func (gdClass NavigationMesh) SetRegionMinSize(region_min_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[24], region_min_size) }
func (gdClass NavigationMesh) GetRegionMinSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[25]) }
func (gdClass NavigationMesh) SetRegionMergeSize(region_merge_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[26], region_merge_size) }
func (gdClass NavigationMesh) GetRegionMergeSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[27]) }
func (gdClass NavigationMesh) SetEdgeMaxLength(edge_max_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[28], edge_max_length) }
func (gdClass NavigationMesh) GetEdgeMaxLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[29]) }
func (gdClass NavigationMesh) SetEdgeMaxError(edge_max_error float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[30], edge_max_error) }
func (gdClass NavigationMesh) GetEdgeMaxError() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[31]) }
func (gdClass NavigationMesh) SetVertsPerPoly(verts_per_poly float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[32], verts_per_poly) }
func (gdClass NavigationMesh) GetVertsPerPoly() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[33]) }
func (gdClass NavigationMesh) SetDetailSampleDistance(detail_sample_dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[34], detail_sample_dist) }
func (gdClass NavigationMesh) GetDetailSampleDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[35]) }
func (gdClass NavigationMesh) SetDetailSampleMaxError(detail_sample_max_error float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[36], detail_sample_max_error) }
func (gdClass NavigationMesh) GetDetailSampleMaxError() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationMesh[37]) }
func (gdClass NavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[38], filter_low_hanging_obstacles) }
func (gdClass NavigationMesh) GetFilterLowHangingObstacles() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[39]) }
func (gdClass NavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[40], filter_ledge_spans) }
func (gdClass NavigationMesh) GetFilterLedgeSpans() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[41]) }
func (gdClass NavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[42], filter_walkable_low_height_spans) }
func (gdClass NavigationMesh) GetFilterWalkableLowHeightSpans() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationMesh[43]) }
func (gdClass NavigationMesh) SetFilterBakingAabb(baking_aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[44], baking_aabb) }
func (gdClass NavigationMesh) GetFilterBakingAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodNavigationMesh[45]) }
func (gdClass NavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[46], baking_aabb_offset) }
func (gdClass NavigationMesh) GetFilterBakingAabbOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationMesh[47]) }
func (gdClass NavigationMesh) SetVertices(vertices []Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[48], vertices) }
func (gdClass NavigationMesh) GetVertices() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationMesh[49]) }
func (gdClass NavigationMesh) AddPolygon(polygon []int32)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[50], polygon) }
func (gdClass NavigationMesh) GetPolygonCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationMesh[51]) }
func (gdClass NavigationMesh) GetPolygon(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodNavigationMesh[52], idx) }
func (gdClass NavigationMesh) ClearPolygons()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[53]) }
func (gdClass NavigationMesh) CreateFromMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMesh[54], mesh) }

type NavigationMeshGenerator gdnative.Object
func (NavigationMeshGenerator) class() string { return "NavigationMeshGenerator\000" }

func (gdClass NavigationMeshGenerator) Object() Object { return Object(gdClass) }

var methodNavigationMeshGenerator [2]gdnative.Method
func (gdClass NavigationMeshGenerator) Bake(nav_mesh NavigationMesh, root_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMeshGenerator[0], nav_mesh, root_node) }
func (gdClass NavigationMeshGenerator) Clear(nav_mesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationMeshGenerator[1], nav_mesh) }

type NavigationObstacle2D gdnative.Object
func (NavigationObstacle2D) class() string { return "NavigationObstacle2D\000" }

func (gdClass NavigationObstacle2D) Node() Node { return Node(gdClass) }

var methodNavigationObstacle2D [5]gdnative.Method
func (gdClass NavigationObstacle2D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationObstacle2D[0]) }
func (gdClass NavigationObstacle2D) SetEstimateRadius(estimate_radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle2D[1], estimate_radius) }
func (gdClass NavigationObstacle2D) IsRadiusEstimated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationObstacle2D[2]) }
func (gdClass NavigationObstacle2D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle2D[3], radius) }
func (gdClass NavigationObstacle2D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationObstacle2D[4]) }

type NavigationObstacle3D gdnative.Object
func (NavigationObstacle3D) class() string { return "NavigationObstacle3D\000" }

func (gdClass NavigationObstacle3D) Node() Node { return Node(gdClass) }

var methodNavigationObstacle3D [5]gdnative.Method
func (gdClass NavigationObstacle3D) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationObstacle3D[0]) }
func (gdClass NavigationObstacle3D) SetEstimateRadius(estimate_radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle3D[1], estimate_radius) }
func (gdClass NavigationObstacle3D) IsRadiusEstimated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationObstacle3D[2]) }
func (gdClass NavigationObstacle3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationObstacle3D[3], radius) }
func (gdClass NavigationObstacle3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationObstacle3D[4]) }

type NavigationPolygon gdnative.Object
func (NavigationPolygon) class() string { return "NavigationPolygon\000" }

func (gdClass NavigationPolygon) Resource() Resource { return Resource(gdClass) }

var methodNavigationPolygon [15]gdnative.Method
func (gdClass NavigationPolygon) SetVertices(vertices []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[0], vertices) }
func (gdClass NavigationPolygon) GetVertices() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationPolygon[1]) }
func (gdClass NavigationPolygon) AddPolygon(polygon []int32)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[2], polygon) }
func (gdClass NavigationPolygon) GetPolygonCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationPolygon[3]) }
func (gdClass NavigationPolygon) GetPolygon(idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodNavigationPolygon[4], idx) }
func (gdClass NavigationPolygon) ClearPolygons()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[5]) }
func (gdClass NavigationPolygon) GetMesh() NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodNavigationPolygon[6]) }
func (gdClass NavigationPolygon) AddOutline(outline []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[7], outline) }
func (gdClass NavigationPolygon) AddOutlineAtIndex(outline []Vector2, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[8], outline, index) }
func (gdClass NavigationPolygon) GetOutlineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationPolygon[9]) }
func (gdClass NavigationPolygon) SetOutline(idx int64, outline []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[10], idx, outline) }
func (gdClass NavigationPolygon) GetOutline(idx int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationPolygon[11], idx) }
func (gdClass NavigationPolygon) RemoveOutline(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[12], idx) }
func (gdClass NavigationPolygon) ClearOutlines()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[13]) }
func (gdClass NavigationPolygon) MakePolygonsFromOutlines()  { gdnative.Call(gdnative.Object(gdClass), methodNavigationPolygon[14]) }

type NavigationRegion2D gdnative.Object
func (NavigationRegion2D) class() string { return "NavigationRegion2D\000" }

func (gdClass NavigationRegion2D) Node2D() Node2D { return Node2D(gdClass) }

var methodNavigationRegion2D [13]gdnative.Method
func (gdClass NavigationRegion2D) SetNavigationPolygon(navpoly NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[0], navpoly) }
func (gdClass NavigationRegion2D) GetNavigationPolygon() NavigationPolygon { return gdnative.Return[NavigationPolygon](gdnative.Object(gdClass), methodNavigationRegion2D[1]) }
func (gdClass NavigationRegion2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[2], enabled) }
func (gdClass NavigationRegion2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion2D[3]) }
func (gdClass NavigationRegion2D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[4], navigation_layers) }
func (gdClass NavigationRegion2D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationRegion2D[5]) }
func (gdClass NavigationRegion2D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[6], layer_number, value) }
func (gdClass NavigationRegion2D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion2D[7], layer_number) }
func (gdClass NavigationRegion2D) GetRegionRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationRegion2D[8]) }
func (gdClass NavigationRegion2D) SetEnterCost(enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[9], enter_cost) }
func (gdClass NavigationRegion2D) GetEnterCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion2D[10]) }
func (gdClass NavigationRegion2D) SetTravelCost(travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion2D[11], travel_cost) }
func (gdClass NavigationRegion2D) GetTravelCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion2D[12]) }

type NavigationRegion3D gdnative.Object
func (NavigationRegion3D) class() string { return "NavigationRegion3D\000" }

func (gdClass NavigationRegion3D) Node3D() Node3D { return Node3D(gdClass) }

var methodNavigationRegion3D [14]gdnative.Method
func (gdClass NavigationRegion3D) SetNavigationMesh(navmesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[0], navmesh) }
func (gdClass NavigationRegion3D) GetNavigationMesh() NavigationMesh { return gdnative.Return[NavigationMesh](gdnative.Object(gdClass), methodNavigationRegion3D[1]) }
func (gdClass NavigationRegion3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[2], enabled) }
func (gdClass NavigationRegion3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion3D[3]) }
func (gdClass NavigationRegion3D) SetNavigationLayers(navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[4], navigation_layers) }
func (gdClass NavigationRegion3D) GetNavigationLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationRegion3D[5]) }
func (gdClass NavigationRegion3D) SetNavigationLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[6], layer_number, value) }
func (gdClass NavigationRegion3D) GetNavigationLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationRegion3D[7], layer_number) }
func (gdClass NavigationRegion3D) GetRegionRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationRegion3D[8]) }
func (gdClass NavigationRegion3D) SetEnterCost(enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[9], enter_cost) }
func (gdClass NavigationRegion3D) GetEnterCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion3D[10]) }
func (gdClass NavigationRegion3D) SetTravelCost(travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[11], travel_cost) }
func (gdClass NavigationRegion3D) GetTravelCost() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationRegion3D[12]) }
func (gdClass NavigationRegion3D) BakeNavigationMesh(on_thread bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationRegion3D[13], on_thread) }

type NavigationServer2D gdnative.Object
func (NavigationServer2D) class() string { return "NavigationServer2D\000" }

func (gdClass NavigationServer2D) Object() Object { return Object(gdClass) }

var methodNavigationServer2D [43]gdnative.Method
func (gdClass NavigationServer2D) GetMaps() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[0]) }
func (gdClass NavigationServer2D) MapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[1]) }
func (gdClass NavigationServer2D) MapSetActive(mapping RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[2], mapping, active) }
func (gdClass NavigationServer2D) MapIsActive(mapping RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[3], mapping) }
func (gdClass NavigationServer2D) MapSetCellSize(mapping RID, cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[4], mapping, cell_size) }
func (gdClass NavigationServer2D) MapGetCellSize(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[5], mapping) }
func (gdClass NavigationServer2D) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[6], mapping, margin) }
func (gdClass NavigationServer2D) MapGetEdgeConnectionMargin(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[7], mapping) }
func (gdClass NavigationServer2D) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodNavigationServer2D[8], mapping, origin, destination, optimize, navigation_layers) }
func (gdClass NavigationServer2D) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[9], mapping, to_point) }
func (gdClass NavigationServer2D) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[10], mapping, to_point) }
func (gdClass NavigationServer2D) MapGetRegions(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[11], mapping) }
func (gdClass NavigationServer2D) MapGetAgents(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer2D[12], mapping) }
func (gdClass NavigationServer2D) MapForceUpdate(mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[13], mapping) }
func (gdClass NavigationServer2D) RegionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[14]) }
func (gdClass NavigationServer2D) RegionSetEnterCost(region RID, enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[15], region, enter_cost) }
func (gdClass NavigationServer2D) RegionGetEnterCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[16], region) }
func (gdClass NavigationServer2D) RegionSetTravelCost(region RID, travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[17], region, travel_cost) }
func (gdClass NavigationServer2D) RegionGetTravelCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer2D[18], region) }
func (gdClass NavigationServer2D) RegionOwnsPoint(region RID, point Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[19], region, point) }
func (gdClass NavigationServer2D) RegionSetMap(region RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[20], region, mapping) }
func (gdClass NavigationServer2D) RegionGetMap(region RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[21], region) }
func (gdClass NavigationServer2D) RegionSetNavigationLayers(region RID, navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[22], region, navigation_layers) }
func (gdClass NavigationServer2D) RegionGetNavigationLayers(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer2D[23], region) }
func (gdClass NavigationServer2D) RegionSetTransform(region RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[24], region, transform) }
func (gdClass NavigationServer2D) RegionSetNavpoly(region RID, nav_poly NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[25], region, nav_poly) }
func (gdClass NavigationServer2D) RegionGetConnectionsCount(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer2D[26], region) }
func (gdClass NavigationServer2D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[27], region, connection) }
func (gdClass NavigationServer2D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNavigationServer2D[28], region, connection) }
func (gdClass NavigationServer2D) AgentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[29]) }
func (gdClass NavigationServer2D) AgentSetMap(agent RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[30], agent, mapping) }
func (gdClass NavigationServer2D) AgentGetMap(agent RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer2D[31], agent) }
func (gdClass NavigationServer2D) AgentSetNeighborDist(agent RID, dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[32], agent, dist) }
func (gdClass NavigationServer2D) AgentSetMaxNeighbors(agent RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[33], agent, count) }
func (gdClass NavigationServer2D) AgentSetTimeHorizon(agent RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[34], agent, time) }
func (gdClass NavigationServer2D) AgentSetRadius(agent RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[35], agent, radius) }
func (gdClass NavigationServer2D) AgentSetMaxSpeed(agent RID, max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[36], agent, max_speed) }
func (gdClass NavigationServer2D) AgentSetVelocity(agent RID, velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[37], agent, velocity) }
func (gdClass NavigationServer2D) AgentSetTargetVelocity(agent RID, target_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[38], agent, target_velocity) }
func (gdClass NavigationServer2D) AgentSetPosition(agent RID, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[39], agent, position) }
func (gdClass NavigationServer2D) AgentIsMapChanged(agent RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer2D[40], agent) }
func (gdClass NavigationServer2D) AgentSetCallback(agent RID, receiver Object, method string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[41], agent, receiver, method, userdata) }
func (gdClass NavigationServer2D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer2D[42], rid) }

type NavigationServer3D gdnative.Object
func (NavigationServer3D) class() string { return "NavigationServer3D\000" }

func (gdClass NavigationServer3D) Object() Object { return Object(gdClass) }

var methodNavigationServer3D [50]gdnative.Method
func (gdClass NavigationServer3D) GetMaps() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[0]) }
func (gdClass NavigationServer3D) MapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[1]) }
func (gdClass NavigationServer3D) MapSetActive(mapping RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[2], mapping, active) }
func (gdClass NavigationServer3D) MapIsActive(mapping RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[3], mapping) }
func (gdClass NavigationServer3D) MapSetUp(mapping RID, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[4], mapping, up) }
func (gdClass NavigationServer3D) MapGetUp(mapping RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[5], mapping) }
func (gdClass NavigationServer3D) MapSetCellSize(mapping RID, cell_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[6], mapping, cell_size) }
func (gdClass NavigationServer3D) MapGetCellSize(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[7], mapping) }
func (gdClass NavigationServer3D) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[8], mapping, margin) }
func (gdClass NavigationServer3D) MapGetEdgeConnectionMargin(mapping RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[9], mapping) }
func (gdClass NavigationServer3D) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers int64) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodNavigationServer3D[10], mapping, origin, destination, optimize, navigation_layers) }
func (gdClass NavigationServer3D) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[11], mapping, start, end, use_collision) }
func (gdClass NavigationServer3D) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[12], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[13], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[14], mapping, to_point) }
func (gdClass NavigationServer3D) MapGetRegions(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[15], mapping) }
func (gdClass NavigationServer3D) MapGetAgents(mapping RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNavigationServer3D[16], mapping) }
func (gdClass NavigationServer3D) MapForceUpdate(mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[17], mapping) }
func (gdClass NavigationServer3D) RegionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[18]) }
func (gdClass NavigationServer3D) RegionSetEnterCost(region RID, enter_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[19], region, enter_cost) }
func (gdClass NavigationServer3D) RegionGetEnterCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[20], region) }
func (gdClass NavigationServer3D) RegionSetTravelCost(region RID, travel_cost float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[21], region, travel_cost) }
func (gdClass NavigationServer3D) RegionGetTravelCost(region RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNavigationServer3D[22], region) }
func (gdClass NavigationServer3D) RegionOwnsPoint(region RID, point Vector3) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[23], region, point) }
func (gdClass NavigationServer3D) RegionSetMap(region RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[24], region, mapping) }
func (gdClass NavigationServer3D) RegionGetMap(region RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[25], region) }
func (gdClass NavigationServer3D) RegionSetNavigationLayers(region RID, navigation_layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[26], region, navigation_layers) }
func (gdClass NavigationServer3D) RegionGetNavigationLayers(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer3D[27], region) }
func (gdClass NavigationServer3D) RegionSetTransform(region RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[28], region, transform) }
func (gdClass NavigationServer3D) RegionSetNavmesh(region RID, nav_mesh NavigationMesh)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[29], region, nav_mesh) }
func (gdClass NavigationServer3D) RegionBakeNavmesh(mesh NavigationMesh, node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[30], mesh, node) }
func (gdClass NavigationServer3D) RegionGetConnectionsCount(region RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNavigationServer3D[31], region) }
func (gdClass NavigationServer3D) RegionGetConnectionPathwayStart(region RID, connection int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[32], region, connection) }
func (gdClass NavigationServer3D) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNavigationServer3D[33], region, connection) }
func (gdClass NavigationServer3D) AgentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[34]) }
func (gdClass NavigationServer3D) AgentSetMap(agent RID, mapping RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[35], agent, mapping) }
func (gdClass NavigationServer3D) AgentGetMap(agent RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodNavigationServer3D[36], agent) }
func (gdClass NavigationServer3D) AgentSetNeighborDist(agent RID, dist float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[37], agent, dist) }
func (gdClass NavigationServer3D) AgentSetMaxNeighbors(agent RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[38], agent, count) }
func (gdClass NavigationServer3D) AgentSetTimeHorizon(agent RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[39], agent, time) }
func (gdClass NavigationServer3D) AgentSetRadius(agent RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[40], agent, radius) }
func (gdClass NavigationServer3D) AgentSetMaxSpeed(agent RID, max_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[41], agent, max_speed) }
func (gdClass NavigationServer3D) AgentSetVelocity(agent RID, velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[42], agent, velocity) }
func (gdClass NavigationServer3D) AgentSetTargetVelocity(agent RID, target_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[43], agent, target_velocity) }
func (gdClass NavigationServer3D) AgentSetPosition(agent RID, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[44], agent, position) }
func (gdClass NavigationServer3D) AgentIsMapChanged(agent RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNavigationServer3D[45], agent) }
func (gdClass NavigationServer3D) AgentSetCallback(agent RID, receiver Object, method string, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[46], agent, receiver, method, userdata) }
func (gdClass NavigationServer3D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[47], rid) }
func (gdClass NavigationServer3D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[48], active) }
func (gdClass NavigationServer3D) Process(delta_time float64)  { gdnative.Call(gdnative.Object(gdClass), methodNavigationServer3D[49], delta_time) }

type NinePatchRectAxisStretchMode int64

const (
	NinePatchRectAxisStretchModeStretch NinePatchRectAxisStretchMode = 0
	NinePatchRectAxisStretchModeTile NinePatchRectAxisStretchMode = 1
	NinePatchRectAxisStretchModeTileFit NinePatchRectAxisStretchMode = 2
)

type NinePatchRect gdnative.Object
func (NinePatchRect) class() string { return "NinePatchRect\000" }

func (gdClass NinePatchRect) Control() Control { return Control(gdClass) }

var methodNinePatchRect [12]gdnative.Method
func (gdClass NinePatchRect) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[0], texture) }
func (gdClass NinePatchRect) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodNinePatchRect[1]) }
func (gdClass NinePatchRect) SetPatchMargin(margin Side, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[2], margin, value) }
func (gdClass NinePatchRect) GetPatchMargin(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNinePatchRect[3], margin) }
func (gdClass NinePatchRect) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[4], rect) }
func (gdClass NinePatchRect) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodNinePatchRect[5]) }
func (gdClass NinePatchRect) SetDrawCenter(draw_center bool)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[6], draw_center) }
func (gdClass NinePatchRect) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNinePatchRect[7]) }
func (gdClass NinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[8], mode) }
func (gdClass NinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode { return gdnative.Return[NinePatchRectAxisStretchMode](gdnative.Object(gdClass), methodNinePatchRect[9]) }
func (gdClass NinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodNinePatchRect[10], mode) }
func (gdClass NinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode { return gdnative.Return[NinePatchRectAxisStretchMode](gdnative.Object(gdClass), methodNinePatchRect[11]) }

type NodeProcessMode int64

const (
	NodeProcessModeInherit NodeProcessMode = 0
	NodeProcessModePausable NodeProcessMode = 1
	NodeProcessModeWhenPaused NodeProcessMode = 2
	NodeProcessModeAlways NodeProcessMode = 3
	NodeProcessModeDisabled NodeProcessMode = 4
)

type NodeDuplicateFlags int64

const (
	NodeDuplicateSignals NodeDuplicateFlags = 1
	NodeDuplicateGroups NodeDuplicateFlags = 2
	NodeDuplicateScripts NodeDuplicateFlags = 4
	NodeDuplicateUseInstancing NodeDuplicateFlags = 8
)

type NodeInternalMode int64

const (
	NodeInternalModeDisabled NodeInternalMode = 0
	NodeInternalModeFront NodeInternalMode = 1
	NodeInternalModeBack NodeInternalMode = 2
)

type Node gdnative.Object
func (Node) class() string { return "Node\000" }

func (gdClass Node) Object() Object { return Object(gdClass) }

var methodNode [87]gdnative.Method
func (gdClass Node) virtual(val any, name string) any {	switch name {
	case "_process":
		i, ok := val.(interface{ Process(delta float64)  })
		if ok {
			return i.Process
		}
	case "_physics_process":
		i, ok := val.(interface{ PhysicsProcess(delta float64)  })
		if ok {
			return i.PhysicsProcess
		}
	case "_enter_tree":
		i, ok := val.(interface{ EnterTree()  })
		if ok {
			return i.EnterTree
		}
	case "_exit_tree":
		i, ok := val.(interface{ ExitTree()  })
		if ok {
			return i.ExitTree
		}
	case "_ready":
		i, ok := val.(interface{ Ready()  })
		if ok {
			return i.Ready
		}
	case "_get_configuration_warnings":
		i, ok := val.(interface{ GetConfigurationWarnings() []string })
		if ok {
			return i.GetConfigurationWarnings
		}
	case "_input":
		i, ok := val.(interface{ Input(event InputEvent)  })
		if ok {
			return i.Input
		}
	case "_shortcut_input":
		i, ok := val.(interface{ ShortcutInput(event InputEvent)  })
		if ok {
			return i.ShortcutInput
		}
	case "_unhandled_input":
		i, ok := val.(interface{ UnhandledInput(event InputEvent)  })
		if ok {
			return i.UnhandledInput
		}
	case "_unhandled_key_input":
		i, ok := val.(interface{ UnhandledKeyInput(event InputEvent)  })
		if ok {
			return i.UnhandledKeyInput
		}
	}
	return nil
}
func (gdClass Node) AddSibling(sibling Node, legible_unique_name bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[0], sibling, legible_unique_name) }
func (gdClass Node) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[1], name) }
func (gdClass Node) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[2]) }
func (gdClass Node) AddChild(node Node, legible_unique_name bool, internal NodeInternalMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode[3], node, legible_unique_name, internal) }
func (gdClass Node) RemoveChild(node Node)  { gdnative.Call(gdnative.Object(gdClass), methodNode[4], node) }
func (gdClass Node) GetChildCount(include_internal bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[5], include_internal) }
func (gdClass Node) GetChildren(include_internal bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[6], include_internal) }
func (gdClass Node) GetChild(idx int64, include_internal bool) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[7], idx, include_internal) }
func (gdClass Node) HasNode(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[8], path) }
func (gdClass Node) GetNode(path NodePath) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[9], path) }
func (gdClass Node) GetNodeOrNull(path NodePath) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[10], path) }
func (gdClass Node) GetParent() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[11]) }
func (gdClass Node) FindChild(pattern string, recursive bool, owned bool) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[12], pattern, recursive, owned) }
func (gdClass Node) FindChildren(pattern string, atype string, recursive bool, owned bool) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[13], pattern, atype, recursive, owned) }
func (gdClass Node) FindParent(pattern string) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[14], pattern) }
func (gdClass Node) HasNodeAndResource(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[15], path) }
func (gdClass Node) GetNodeAndResource(path NodePath) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[16], path) }
func (gdClass Node) IsInsideTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[17]) }
func (gdClass Node) IsAncestorOf(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[18], node) }
func (gdClass Node) IsGreaterThan(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[19], node) }
func (gdClass Node) GetPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode[20]) }
func (gdClass Node) GetPathTo(node Node) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode[21], node) }
func (gdClass Node) AddToGroup(group string, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[22], group, persistent) }
func (gdClass Node) RemoveFromGroup(group string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[23], group) }
func (gdClass Node) IsInGroup(group string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[24], group) }
func (gdClass Node) MoveChild(child_node Node, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[25], child_node, to_position) }
func (gdClass Node) GetGroups() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode[26]) }
func (gdClass Node) Raise()  { gdnative.Call(gdnative.Object(gdClass), methodNode[27]) }
func (gdClass Node) SetOwner(owner Node)  { gdnative.Call(gdnative.Object(gdClass), methodNode[28], owner) }
func (gdClass Node) GetOwner() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[29]) }
func (gdClass Node) RemoveAndSkip()  { gdnative.Call(gdnative.Object(gdClass), methodNode[30]) }
func (gdClass Node) GetIndex(include_internal bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[31], include_internal) }
func (gdClass Node) PrintTree()  { gdnative.Call(gdnative.Object(gdClass), methodNode[32]) }
func (gdClass Node) PrintTreePretty()  { gdnative.Call(gdnative.Object(gdClass), methodNode[33]) }
func (gdClass Node) SetSceneFilePath(scene_file_path string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[34], scene_file_path) }
func (gdClass Node) GetSceneFilePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[35]) }
func (gdClass Node) PropagateNotification(what int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[36], what) }
func (gdClass Node) PropagateCall(method string, args Array, parent_first bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[37], method, args, parent_first) }
func (gdClass Node) SetPhysicsProcess(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[38], enable) }
func (gdClass Node) GetPhysicsProcessDeltaTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode[39]) }
func (gdClass Node) IsPhysicsProcessing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[40]) }
func (gdClass Node) GetProcessDeltaTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode[41]) }
func (gdClass Node) SetProcess(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[42], enable) }
func (gdClass Node) SetProcessPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode[43], priority) }
func (gdClass Node) GetProcessPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[44]) }
func (gdClass Node) IsProcessing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[45]) }
func (gdClass Node) SetProcessInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[46], enable) }
func (gdClass Node) IsProcessingInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[47]) }
func (gdClass Node) SetProcessShortcutInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[48], enable) }
func (gdClass Node) IsProcessingShortcutInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[49]) }
func (gdClass Node) SetProcessUnhandledInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[50], enable) }
func (gdClass Node) IsProcessingUnhandledInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[51]) }
func (gdClass Node) SetProcessUnhandledKeyInput(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[52], enable) }
func (gdClass Node) IsProcessingUnhandledKeyInput() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[53]) }
func (gdClass Node) SetProcessMode(mode NodeProcessMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode[54], mode) }
func (gdClass Node) GetProcessMode() NodeProcessMode { return gdnative.Return[NodeProcessMode](gdnative.Object(gdClass), methodNode[55]) }
func (gdClass Node) CanProcess() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[56]) }
func (gdClass Node) PrintOrphanNodes()  { gdnative.Call(gdnative.Object(gdClass), methodNode[57]) }
func (gdClass Node) SetDisplayFolded(fold bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[58], fold) }
func (gdClass Node) IsDisplayedFolded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[59]) }
func (gdClass Node) SetProcessInternal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[60], enable) }
func (gdClass Node) IsProcessingInternal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[61]) }
func (gdClass Node) SetPhysicsProcessInternal(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[62], enable) }
func (gdClass Node) IsPhysicsProcessingInternal() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[63]) }
func (gdClass Node) GetTree() SceneTree { return gdnative.Return[SceneTree](gdnative.Object(gdClass), methodNode[64]) }
func (gdClass Node) CreateTween() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodNode[65]) }
func (gdClass Node) Duplicate(flags int64) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodNode[66], flags) }
func (gdClass Node) ReplaceBy(node Node, keep_groups bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[67], node, keep_groups) }
func (gdClass Node) SetSceneInstanceLoadPlaceholder(load_placeholder bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[68], load_placeholder) }
func (gdClass Node) GetSceneInstanceLoadPlaceholder() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[69]) }
func (gdClass Node) SetEditableInstance(node Node, is_editable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[70], node, is_editable) }
func (gdClass Node) IsEditableInstance(node Node) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[71], node) }
func (gdClass Node) GetViewport() Viewport { return gdnative.Return[Viewport](gdnative.Object(gdClass), methodNode[72]) }
func (gdClass Node) QueueFree()  { gdnative.Call(gdnative.Object(gdClass), methodNode[73]) }
func (gdClass Node) RequestReady()  { gdnative.Call(gdnative.Object(gdClass), methodNode[74]) }
func (gdClass Node) SetMultiplayerAuthority(id int64, recursive bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[75], id, recursive) }
func (gdClass Node) GetMultiplayerAuthority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode[76]) }
func (gdClass Node) IsMultiplayerAuthority() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[77]) }
func (gdClass Node) GetMultiplayer() MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodNode[78]) }
func (gdClass Node) RpcConfig(method string, config any)  { gdnative.Call(gdnative.Object(gdClass), methodNode[79], method, config) }
func (gdClass Node) SetEditorDescription(editor_description string)  { gdnative.Call(gdnative.Object(gdClass), methodNode[80], editor_description) }
func (gdClass Node) GetEditorDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodNode[81]) }
func (gdClass Node) SetUniqueNameInOwner(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode[82], enable) }
func (gdClass Node) IsUniqueNameInOwner() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode[83]) }
func (gdClass Node) Rpc(method string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNode[84], method) }
func (gdClass Node) RpcId(peer_id int64, method string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodNode[85], peer_id, method) }
func (gdClass Node) UpdateConfigurationWarnings()  { gdnative.Call(gdnative.Object(gdClass), methodNode[86]) }

type Node2D gdnative.Object
func (Node2D) class() string { return "Node2D\000" }

func (gdClass Node2D) CanvasItem() CanvasItem { return CanvasItem(gdClass) }

var methodNode2D [35]gdnative.Method
func (gdClass Node2D) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[0], position) }
func (gdClass Node2D) SetRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[1], radians) }
func (gdClass Node2D) SetSkew(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[2], radians) }
func (gdClass Node2D) SetScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[3], scale) }
func (gdClass Node2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[4]) }
func (gdClass Node2D) GetRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[5]) }
func (gdClass Node2D) GetSkew() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[6]) }
func (gdClass Node2D) GetScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[7]) }
func (gdClass Node2D) Rotate(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[8], radians) }
func (gdClass Node2D) MoveLocalX(delta float64, scaled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[9], delta, scaled) }
func (gdClass Node2D) MoveLocalY(delta float64, scaled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[10], delta, scaled) }
func (gdClass Node2D) Translate(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[11], offset) }
func (gdClass Node2D) GlobalTranslate(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[12], offset) }
func (gdClass Node2D) ApplyScale(ratio Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[13], ratio) }
func (gdClass Node2D) SetGlobalPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[14], position) }
func (gdClass Node2D) GetGlobalPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[15]) }
func (gdClass Node2D) SetGlobalRotation(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[16], radians) }
func (gdClass Node2D) GetGlobalRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[17]) }
func (gdClass Node2D) SetGlobalSkew(radians float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[18], radians) }
func (gdClass Node2D) GetGlobalSkew() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[19]) }
func (gdClass Node2D) SetGlobalScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[20], scale) }
func (gdClass Node2D) GetGlobalScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[21]) }
func (gdClass Node2D) SetTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[22], xform) }
func (gdClass Node2D) SetGlobalTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[23], xform) }
func (gdClass Node2D) LookAt(point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[24], point) }
func (gdClass Node2D) GetAngleTo(point Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNode2D[25], point) }
func (gdClass Node2D) ToLocal(global_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[26], global_point) }
func (gdClass Node2D) ToGlobal(local_point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodNode2D[27], local_point) }
func (gdClass Node2D) SetZIndex(z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[28], z_index) }
func (gdClass Node2D) GetZIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodNode2D[29]) }
func (gdClass Node2D) SetZAsRelative(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[30], enable) }
func (gdClass Node2D) IsZRelative() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode2D[31]) }
func (gdClass Node2D) SetYSortEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode2D[32], enabled) }
func (gdClass Node2D) IsYSortEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode2D[33]) }
func (gdClass Node2D) GetRelativeTransformToParent(parent Node) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodNode2D[34], parent) }

type Node3DRotationEditMode int64

const (
	Node3DRotationEditModeEuler Node3DRotationEditMode = 0
	Node3DRotationEditModeQuaternion Node3DRotationEditMode = 1
	Node3DRotationEditModeBasis Node3DRotationEditMode = 2
)

type Node3DRotationOrder int64

const (
	Node3DRotationOrderXyz Node3DRotationOrder = 0
	Node3DRotationOrderXzy Node3DRotationOrder = 1
	Node3DRotationOrderYxz Node3DRotationOrder = 2
	Node3DRotationOrderYzx Node3DRotationOrder = 3
	Node3DRotationOrderZxy Node3DRotationOrder = 4
	Node3DRotationOrderZyx Node3DRotationOrder = 5
)

type Node3D gdnative.Object
func (Node3D) class() string { return "Node3D\000" }

func (gdClass Node3D) Node() Node { return Node(gdClass) }

var methodNode3D [64]gdnative.Method
func (gdClass Node3D) SetTransform(local Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[0], local) }
func (gdClass Node3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodNode3D[1]) }
func (gdClass Node3D) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[2], position) }
func (gdClass Node3D) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[3]) }
func (gdClass Node3D) SetRotation(euler Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[4], euler) }
func (gdClass Node3D) GetRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[5]) }
func (gdClass Node3D) SetRotationOrder(order Node3DRotationOrder)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[6], order) }
func (gdClass Node3D) GetRotationOrder() Node3DRotationOrder { return gdnative.Return[Node3DRotationOrder](gdnative.Object(gdClass), methodNode3D[7]) }
func (gdClass Node3D) SetRotationEditMode(edit_mode Node3DRotationEditMode)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[8], edit_mode) }
func (gdClass Node3D) GetRotationEditMode() Node3DRotationEditMode { return gdnative.Return[Node3DRotationEditMode](gdnative.Object(gdClass), methodNode3D[9]) }
func (gdClass Node3D) SetScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[10], scale) }
func (gdClass Node3D) GetScale() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[11]) }
func (gdClass Node3D) SetQuaternion(quaternion Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[12], quaternion) }
func (gdClass Node3D) GetQuaternion() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodNode3D[13]) }
func (gdClass Node3D) SetBasis(basis Basis)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[14], basis) }
func (gdClass Node3D) GetBasis() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodNode3D[15]) }
func (gdClass Node3D) SetGlobalTransform(global Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[16], global) }
func (gdClass Node3D) GetGlobalTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodNode3D[17]) }
func (gdClass Node3D) SetGlobalPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[18], position) }
func (gdClass Node3D) GetGlobalPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[19]) }
func (gdClass Node3D) SetGlobalRotation(radians Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[20], radians) }
func (gdClass Node3D) GetGlobalRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[21]) }
func (gdClass Node3D) GetParentNode3d() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodNode3D[22]) }
func (gdClass Node3D) SetIgnoreTransformNotification(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[23], enabled) }
func (gdClass Node3D) SetAsTopLevel(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[24], enable) }
func (gdClass Node3D) IsSetAsTopLevel() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[25]) }
func (gdClass Node3D) SetDisableScale(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[26], disable) }
func (gdClass Node3D) IsScaleDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[27]) }
func (gdClass Node3D) GetWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodNode3D[28]) }
func (gdClass Node3D) ForceUpdateTransform()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[29]) }
func (gdClass Node3D) SetVisibilityParent(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[30], path) }
func (gdClass Node3D) GetVisibilityParent() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodNode3D[31]) }
func (gdClass Node3D) UpdateGizmos()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[32]) }
func (gdClass Node3D) AddGizmo(gizmo Node3DGizmo)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[33], gizmo) }
func (gdClass Node3D) GetGizmos() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodNode3D[34]) }
func (gdClass Node3D) ClearGizmos()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[35]) }
func (gdClass Node3D) SetSubgizmoSelection(gizmo Node3DGizmo, id int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[36], gizmo, id, transform) }
func (gdClass Node3D) ClearSubgizmoSelection()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[37]) }
func (gdClass Node3D) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[38], visible) }
func (gdClass Node3D) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[39]) }
func (gdClass Node3D) IsVisibleInTree() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[40]) }
func (gdClass Node3D) Show()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[41]) }
func (gdClass Node3D) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[42]) }
func (gdClass Node3D) SetNotifyLocalTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[43], enable) }
func (gdClass Node3D) IsLocalTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[44]) }
func (gdClass Node3D) SetNotifyTransform(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[45], enable) }
func (gdClass Node3D) IsTransformNotificationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNode3D[46]) }
func (gdClass Node3D) Rotate(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[47], axis, angle) }
func (gdClass Node3D) GlobalRotate(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[48], axis, angle) }
func (gdClass Node3D) GlobalScale(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[49], scale) }
func (gdClass Node3D) GlobalTranslate(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[50], offset) }
func (gdClass Node3D) RotateObjectLocal(axis Vector3, angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[51], axis, angle) }
func (gdClass Node3D) ScaleObjectLocal(scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[52], scale) }
func (gdClass Node3D) TranslateObjectLocal(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[53], offset) }
func (gdClass Node3D) RotateX(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[54], angle) }
func (gdClass Node3D) RotateY(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[55], angle) }
func (gdClass Node3D) RotateZ(angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[56], angle) }
func (gdClass Node3D) Translate(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[57], offset) }
func (gdClass Node3D) Orthonormalize()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[58]) }
func (gdClass Node3D) SetIdentity()  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[59]) }
func (gdClass Node3D) LookAt(target Vector3, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[60], target, up) }
func (gdClass Node3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodNode3D[61], position, target, up) }
func (gdClass Node3D) ToLocal(global_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[62], global_point) }
func (gdClass Node3D) ToGlobal(local_point Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodNode3D[63], local_point) }

type Node3DGizmo gdnative.Object
func (Node3DGizmo) class() string { return "Node3DGizmo\000" }

func (gdClass Node3DGizmo) RefCounted() RefCounted { return RefCounted(gdClass) }


type Noise gdnative.Object
func (Noise) class() string { return "Noise\000" }

func (gdClass Noise) Resource() Resource { return Resource(gdClass) }

var methodNoise [7]gdnative.Method
func (gdClass Noise) GetNoise1d(x float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[0], x) }
func (gdClass Noise) GetNoise2d(x float64, y float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[1], x, y) }
func (gdClass Noise) GetNoise2dv(v Vector2) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[2], v) }
func (gdClass Noise) GetNoise3d(x float64, y float64, z float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[3], x, y, z) }
func (gdClass Noise) GetNoise3dv(v Vector3) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoise[4], v) }
func (gdClass Noise) GetImage(width int64, height int64, invert bool, in_3d_space bool) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodNoise[5], width, height, invert, in_3d_space) }
func (gdClass Noise) GetSeamlessImage(width int64, height int64, invert bool, in_3d_space bool, skirt float64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodNoise[6], width, height, invert, in_3d_space, skirt) }

type NoiseTexture gdnative.Object
func (NoiseTexture) class() string { return "NoiseTexture\000" }

func (gdClass NoiseTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodNoiseTexture [20]gdnative.Method
func (gdClass NoiseTexture) SetWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[0], width) }
func (gdClass NoiseTexture) SetHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[1], height) }
func (gdClass NoiseTexture) SetInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[2], invert) }
func (gdClass NoiseTexture) GetInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[3]) }
func (gdClass NoiseTexture) SetIn3dSpace(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[4], enable) }
func (gdClass NoiseTexture) IsIn3dSpace() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[5]) }
func (gdClass NoiseTexture) SetGenerateMipmaps(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[6], invert) }
func (gdClass NoiseTexture) IsGeneratingMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[7]) }
func (gdClass NoiseTexture) SetSeamless(seamless bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[8], seamless) }
func (gdClass NoiseTexture) GetSeamless() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[9]) }
func (gdClass NoiseTexture) SetSeamlessBlendSkirt(seamless_blend_skirt float64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[10], seamless_blend_skirt) }
func (gdClass NoiseTexture) GetSeamlessBlendSkirt() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoiseTexture[11]) }
func (gdClass NoiseTexture) SetAsNormalMap(as_normal_map bool)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[12], as_normal_map) }
func (gdClass NoiseTexture) IsNormalMap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodNoiseTexture[13]) }
func (gdClass NoiseTexture) SetBumpStrength(bump_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[14], bump_strength) }
func (gdClass NoiseTexture) GetBumpStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodNoiseTexture[15]) }
func (gdClass NoiseTexture) SetColorRamp(gradient Gradient)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[16], gradient) }
func (gdClass NoiseTexture) GetColorRamp() Gradient { return gdnative.Return[Gradient](gdnative.Object(gdClass), methodNoiseTexture[17]) }
func (gdClass NoiseTexture) SetNoise(noise Noise)  { gdnative.Call(gdnative.Object(gdClass), methodNoiseTexture[18], noise) }
func (gdClass NoiseTexture) GetNoise() Noise { return gdnative.Return[Noise](gdnative.Object(gdClass), methodNoiseTexture[19]) }

type ORMMaterial3D gdnative.Object
func (ORMMaterial3D) class() string { return "ORMMaterial3D\000" }

func (gdClass ORMMaterial3D) BaseMaterial3D() BaseMaterial3D { return BaseMaterial3D(gdClass) }


type OSVideoDriver int64

const (
	OSVideoDriverVulkan OSVideoDriver = 0
	OSVideoDriverOpengl3 OSVideoDriver = 1
)

type OSWeekday int64

const (
	OSDaySunday OSWeekday = 0
	OSDayMonday OSWeekday = 1
	OSDayTuesday OSWeekday = 2
	OSDayWednesday OSWeekday = 3
	OSDayThursday OSWeekday = 4
	OSDayFriday OSWeekday = 5
	OSDaySaturday OSWeekday = 6
)

type OSMonth int64

const (
	OSMonthJanuary OSMonth = 1
	OSMonthFebruary OSMonth = 2
	OSMonthMarch OSMonth = 3
	OSMonthApril OSMonth = 4
	OSMonthMay OSMonth = 5
	OSMonthJune OSMonth = 6
	OSMonthJuly OSMonth = 7
	OSMonthAugust OSMonth = 8
	OSMonthSeptember OSMonth = 9
	OSMonthOctober OSMonth = 10
	OSMonthNovember OSMonth = 11
	OSMonthDecember OSMonth = 12
)

type OSSystemDir int64

const (
	OSSystemDirDesktop OSSystemDir = 0
	OSSystemDirDcim OSSystemDir = 1
	OSSystemDirDocuments OSSystemDir = 2
	OSSystemDirDownloads OSSystemDir = 3
	OSSystemDirMovies OSSystemDir = 4
	OSSystemDirMusic OSSystemDir = 5
	OSSystemDirPictures OSSystemDir = 6
	OSSystemDirRingtones OSSystemDir = 7
)

type OS gdnative.Object
func (OS) class() string { return "OS\000" }

func (gdClass OS) Object() Object { return Object(gdClass) }

var methodOS [65]gdnative.Method
func (gdClass OS) GetConnectedMidiInputs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[0]) }
func (gdClass OS) OpenMidiInputs()  { gdnative.Call(gdnative.Object(gdClass), methodOS[1]) }
func (gdClass OS) CloseMidiInputs()  { gdnative.Call(gdnative.Object(gdClass), methodOS[2]) }
func (gdClass OS) Alert(text string, title string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[3], text, title) }
func (gdClass OS) Crash(message string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[4], message) }
func (gdClass OS) SetLowProcessorUsageMode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[5], enable) }
func (gdClass OS) IsInLowProcessorUsageMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[6]) }
func (gdClass OS) SetLowProcessorUsageModeSleepUsec(usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[7], usec) }
func (gdClass OS) GetLowProcessorUsageModeSleepUsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[8]) }
func (gdClass OS) GetProcessorCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[9]) }
func (gdClass OS) GetProcessorName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[10]) }
func (gdClass OS) GetSystemFonts() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[11]) }
func (gdClass OS) GetSystemFontPath(font_name string, bold bool, italic bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[12], font_name, bold, italic) }
func (gdClass OS) GetExecutablePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[13]) }
func (gdClass OS) Execute(path string, arguments []string, output Array, read_stderr bool, open_console bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[14], path, arguments, output, read_stderr, open_console) }
func (gdClass OS) CreateProcess(path string, arguments []string, open_console bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[15], path, arguments, open_console) }
func (gdClass OS) CreateInstance(arguments []string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[16], arguments) }
func (gdClass OS) Kill(pid int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[17], pid) }
func (gdClass OS) ShellOpen(uri string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[18], uri) }
func (gdClass OS) IsProcessRunning(pid int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[19], pid) }
func (gdClass OS) GetProcessId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[20]) }
func (gdClass OS) GetEnvironment(variable string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[21], variable) }
func (gdClass OS) SetEnvironment(variable string, value string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[22], variable, value) }
func (gdClass OS) HasEnvironment(variable string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[23], variable) }
func (gdClass OS) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[24]) }
func (gdClass OS) GetCmdlineArgs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[25]) }
func (gdClass OS) GetCmdlineUserArgs() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[26]) }
func (gdClass OS) SetRestartOnExit(restart bool, arguments []string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[27], restart, arguments) }
func (gdClass OS) IsRestartOnExitSet() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[28]) }
func (gdClass OS) GetRestartOnExitArguments() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[29]) }
func (gdClass OS) DelayUsec(usec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[30], usec) }
func (gdClass OS) DelayMsec(msec int64)  { gdnative.Call(gdnative.Object(gdClass), methodOS[31], msec) }
func (gdClass OS) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[32]) }
func (gdClass OS) GetLocaleLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[33]) }
func (gdClass OS) GetModelName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[34]) }
func (gdClass OS) IsUserfsPersistent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[35]) }
func (gdClass OS) IsStdoutVerbose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[36]) }
func (gdClass OS) CanUseThreads() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[37]) }
func (gdClass OS) IsDebugBuild() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[38]) }
func (gdClass OS) DumpMemoryToFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[39], file) }
func (gdClass OS) DumpResourcesToFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[40], file) }
func (gdClass OS) PrintResourcesInUse(short bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[41], short) }
func (gdClass OS) PrintAllResources(tofile string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[42], tofile) }
func (gdClass OS) GetStaticMemoryUsage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[43]) }
func (gdClass OS) GetStaticMemoryPeakUsage() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[44]) }
func (gdClass OS) MoveToTrash(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[45], path) }
func (gdClass OS) GetUserDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[46]) }
func (gdClass OS) GetSystemDir(dir OSSystemDir, shared_storage bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[47], dir, shared_storage) }
func (gdClass OS) GetConfigDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[48]) }
func (gdClass OS) GetDataDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[49]) }
func (gdClass OS) GetCacheDir() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[50]) }
func (gdClass OS) GetUniqueId() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[51]) }
func (gdClass OS) PrintAllTexturesBySize()  { gdnative.Call(gdnative.Object(gdClass), methodOS[52]) }
func (gdClass OS) PrintResourcesByType(types []string)  { gdnative.Call(gdnative.Object(gdClass), methodOS[53], types) }
func (gdClass OS) GetKeycodeString(code Key) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOS[54], code) }
func (gdClass OS) IsKeycodeUnicode(code int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[55], code) }
func (gdClass OS) FindKeycodeFromString(s string) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodOS[56], s) }
func (gdClass OS) SetUseFileAccessSaveAndSwap(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodOS[57], enabled) }
func (gdClass OS) SetThreadName(name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodOS[58], name) }
func (gdClass OS) GetThreadCallerId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[59]) }
func (gdClass OS) GetMainThreadId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOS[60]) }
func (gdClass OS) HasFeature(tag_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[61], tag_name) }
func (gdClass OS) RequestPermission(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[62], name) }
func (gdClass OS) RequestPermissions() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOS[63]) }
func (gdClass OS) GetGrantedPermissions() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOS[64]) }

type ObjectConnectFlags int64

const (
	ObjectConnectDeferred ObjectConnectFlags = 1
	ObjectConnectPersist ObjectConnectFlags = 2
	ObjectConnectOneshot ObjectConnectFlags = 4
	ObjectConnectReferenceCounted ObjectConnectFlags = 8
)

type Object gdnative.Object
func (Object) class() string { return "Object\000" }

var methodObject [41]gdnative.Method
func (gdClass Object) GetClass() string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[0]) }
func (gdClass Object) IsClass(class string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[1], class) }
func (gdClass Object) Set(property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[2], property, value) }
func (gdClass Object) Get(property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[3], property) }
func (gdClass Object) SetIndexed(property NodePath, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[4], property, value) }
func (gdClass Object) GetIndexed(property NodePath) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[5], property) }
func (gdClass Object) GetPropertyList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[6]) }
func (gdClass Object) GetMethodList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[7]) }
func (gdClass Object) Notification(what int64, reversed bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[8], what, reversed) }
func (gdClass Object) ToString() string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[9]) }
func (gdClass Object) GetInstanceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodObject[10]) }
func (gdClass Object) SetScript(script any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[11], script) }
func (gdClass Object) GetScript() any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[12]) }
func (gdClass Object) SetMeta(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[13], name, value) }
func (gdClass Object) RemoveMeta(name string)  { gdnative.Call(gdnative.Object(gdClass), methodObject[14], name) }
func (gdClass Object) GetMeta(name string, def any) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[15], name, def) }
func (gdClass Object) HasMeta(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[16], name) }
func (gdClass Object) GetMetaList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodObject[17]) }
func (gdClass Object) AddUserSignal(signal string, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodObject[18], signal, arguments) }
func (gdClass Object) HasUserSignal(signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[19], signal) }
func (gdClass Object) EmitSignal(signal string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodObject[20], signal) }
func (gdClass Object) Call(method string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[21], method) }
func (gdClass Object) CallDeferred(method string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[22], method) }
func (gdClass Object) SetDeferred(property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodObject[23], property, value) }
func (gdClass Object) Callv(method string, arg_array Array) any { return gdnative.Return[any](gdnative.Object(gdClass), methodObject[24], method, arg_array) }
func (gdClass Object) HasMethod(method string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[25], method) }
func (gdClass Object) HasSignal(signal string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[26], signal) }
func (gdClass Object) GetSignalList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[27]) }
func (gdClass Object) GetSignalConnectionList(signal string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[28], signal) }
func (gdClass Object) GetIncomingConnections() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodObject[29]) }
func (gdClass Object) Connect(signal string, callable Callable, flags int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodObject[30], signal, callable, flags) }
func (gdClass Object) Disconnect(signal string, callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodObject[31], signal, callable) }
func (gdClass Object) IsConnected(signal string, callable Callable) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[32], signal, callable) }
func (gdClass Object) SetBlockSignals(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[33], enable) }
func (gdClass Object) IsBlockingSignals() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[34]) }
func (gdClass Object) NotifyPropertyListChanged()  { gdnative.Call(gdnative.Object(gdClass), methodObject[35]) }
func (gdClass Object) SetMessageTranslation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodObject[36], enable) }
func (gdClass Object) CanTranslateMessages() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[37]) }
func (gdClass Object) Tr(message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[38], message, context) }
func (gdClass Object) TrN(message string, plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodObject[39], message, plural_message, n, context) }
func (gdClass Object) IsQueuedForDeletion() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodObject[40]) }

type Occluder3D gdnative.Object
func (Occluder3D) class() string { return "Occluder3D\000" }

func (gdClass Occluder3D) Resource() Resource { return Resource(gdClass) }

var methodOccluder3D [2]gdnative.Method
func (gdClass Occluder3D) GetVertices() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodOccluder3D[0]) }
func (gdClass Occluder3D) GetIndices() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodOccluder3D[1]) }

type OccluderInstance3D gdnative.Object
func (OccluderInstance3D) class() string { return "OccluderInstance3D\000" }

func (gdClass OccluderInstance3D) Node3D() Node3D { return Node3D(gdClass) }

var methodOccluderInstance3D [8]gdnative.Method
func (gdClass OccluderInstance3D) SetBakeMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[0], mask) }
func (gdClass OccluderInstance3D) GetBakeMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOccluderInstance3D[1]) }
func (gdClass OccluderInstance3D) SetBakeMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[2], layer_number, value) }
func (gdClass OccluderInstance3D) GetBakeMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOccluderInstance3D[3], layer_number) }
func (gdClass OccluderInstance3D) SetBakeSimplificationDistance(simplification_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[4], simplification_distance) }
func (gdClass OccluderInstance3D) GetBakeSimplificationDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOccluderInstance3D[5]) }
func (gdClass OccluderInstance3D) SetOccluder(occluder Occluder3D)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderInstance3D[6], occluder) }
func (gdClass OccluderInstance3D) GetOccluder() Occluder3D { return gdnative.Return[Occluder3D](gdnative.Object(gdClass), methodOccluderInstance3D[7]) }

type OccluderPolygon2DCullMode int64

const (
	OccluderPolygon2DCullDisabled OccluderPolygon2DCullMode = 0
	OccluderPolygon2DCullClockwise OccluderPolygon2DCullMode = 1
	OccluderPolygon2DCullCounterClockwise OccluderPolygon2DCullMode = 2
)

type OccluderPolygon2D gdnative.Object
func (OccluderPolygon2D) class() string { return "OccluderPolygon2D\000" }

func (gdClass OccluderPolygon2D) Resource() Resource { return Resource(gdClass) }

var methodOccluderPolygon2D [6]gdnative.Method
func (gdClass OccluderPolygon2D) SetClosed(closed bool)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[0], closed) }
func (gdClass OccluderPolygon2D) IsClosed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOccluderPolygon2D[1]) }
func (gdClass OccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[2], cull_mode) }
func (gdClass OccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode { return gdnative.Return[OccluderPolygon2DCullMode](gdnative.Object(gdClass), methodOccluderPolygon2D[3]) }
func (gdClass OccluderPolygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodOccluderPolygon2D[4], polygon) }
func (gdClass OccluderPolygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodOccluderPolygon2D[5]) }

type OggPacketSequence gdnative.Object
func (OggPacketSequence) class() string { return "OggPacketSequence\000" }

func (gdClass OggPacketSequence) Resource() Resource { return Resource(gdClass) }

var methodOggPacketSequence [7]gdnative.Method
func (gdClass OggPacketSequence) SetPacketData(packet_data Array)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[0], packet_data) }
func (gdClass OggPacketSequence) GetPacketData() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOggPacketSequence[1]) }
func (gdClass OggPacketSequence) SetPacketGranulePositions(granule_positions Array)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[2], granule_positions) }
func (gdClass OggPacketSequence) GetPacketGranulePositions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOggPacketSequence[3]) }
func (gdClass OggPacketSequence) SetSamplingRate(sampling_rate float64)  { gdnative.Call(gdnative.Object(gdClass), methodOggPacketSequence[4], sampling_rate) }
func (gdClass OggPacketSequence) GetSamplingRate() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOggPacketSequence[5]) }
func (gdClass OggPacketSequence) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodOggPacketSequence[6]) }

type OggPacketSequencePlayback gdnative.Object
func (OggPacketSequencePlayback) class() string { return "OggPacketSequencePlayback\000" }

func (gdClass OggPacketSequencePlayback) RefCounted() RefCounted { return RefCounted(gdClass) }


type OmniLight3DShadowMode int64

const (
	OmniLight3DShadowDualParaboloid OmniLight3DShadowMode = 0
	OmniLight3DShadowCube OmniLight3DShadowMode = 1
)

type OmniLight3D gdnative.Object
func (OmniLight3D) class() string { return "OmniLight3D\000" }

func (gdClass OmniLight3D) Light3D() Light3D { return Light3D(gdClass) }

var methodOmniLight3D [2]gdnative.Method
func (gdClass OmniLight3D) SetShadowMode(mode OmniLight3DShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodOmniLight3D[0], mode) }
func (gdClass OmniLight3D) GetShadowMode() OmniLight3DShadowMode { return gdnative.Return[OmniLight3DShadowMode](gdnative.Object(gdClass), methodOmniLight3D[1]) }

type OpenXRActionActionType int64

const (
	OpenXRActionOpenxrActionBool OpenXRActionActionType = 0
	OpenXRActionOpenxrActionFloat OpenXRActionActionType = 1
	OpenXRActionOpenxrActionVector2 OpenXRActionActionType = 2
	OpenXRActionOpenxrActionPose OpenXRActionActionType = 3
)

type OpenXRAction gdnative.Object
func (OpenXRAction) class() string { return "OpenXRAction\000" }

func (gdClass OpenXRAction) Resource() Resource { return Resource(gdClass) }

var methodOpenXRAction [6]gdnative.Method
func (gdClass OpenXRAction) SetLocalizedName(localized_name string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[0], localized_name) }
func (gdClass OpenXRAction) GetLocalizedName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRAction[1]) }
func (gdClass OpenXRAction) SetActionType(action_type OpenXRActionActionType)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[2], action_type) }
func (gdClass OpenXRAction) GetActionType() OpenXRActionActionType { return gdnative.Return[OpenXRActionActionType](gdnative.Object(gdClass), methodOpenXRAction[3]) }
func (gdClass OpenXRAction) SetToplevelPaths(toplevel_paths []string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRAction[4], toplevel_paths) }
func (gdClass OpenXRAction) GetToplevelPaths() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOpenXRAction[5]) }

type OpenXRActionMap gdnative.Object
func (OpenXRActionMap) class() string { return "OpenXRActionMap\000" }

func (gdClass OpenXRActionMap) Resource() Resource { return Resource(gdClass) }

var methodOpenXRActionMap [15]gdnative.Method
func (gdClass OpenXRActionMap) SetActionSets(action_sets Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[0], action_sets) }
func (gdClass OpenXRActionMap) GetActionSets() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionMap[1]) }
func (gdClass OpenXRActionMap) GetActionSetCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionMap[2]) }
func (gdClass OpenXRActionMap) FindActionSet(name string) OpenXRActionSet { return gdnative.Return[OpenXRActionSet](gdnative.Object(gdClass), methodOpenXRActionMap[3], name) }
func (gdClass OpenXRActionMap) GetActionSet(idx int64) OpenXRActionSet { return gdnative.Return[OpenXRActionSet](gdnative.Object(gdClass), methodOpenXRActionMap[4], idx) }
func (gdClass OpenXRActionMap) AddActionSet(action_set OpenXRActionSet)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[5], action_set) }
func (gdClass OpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[6], action_set) }
func (gdClass OpenXRActionMap) SetInteractionProfiles(interaction_profiles Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[7], interaction_profiles) }
func (gdClass OpenXRActionMap) GetInteractionProfiles() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionMap[8]) }
func (gdClass OpenXRActionMap) GetInteractionProfileCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionMap[9]) }
func (gdClass OpenXRActionMap) FindInteractionProfile(name string) OpenXRInteractionProfile { return gdnative.Return[OpenXRInteractionProfile](gdnative.Object(gdClass), methodOpenXRActionMap[10], name) }
func (gdClass OpenXRActionMap) GetInteractionProfile(idx int64) OpenXRInteractionProfile { return gdnative.Return[OpenXRInteractionProfile](gdnative.Object(gdClass), methodOpenXRActionMap[11], idx) }
func (gdClass OpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[12], interaction_profile) }
func (gdClass OpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[13], interaction_profile) }
func (gdClass OpenXRActionMap) CreateDefaultActionSets()  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionMap[14]) }

type OpenXRActionSet gdnative.Object
func (OpenXRActionSet) class() string { return "OpenXRActionSet\000" }

func (gdClass OpenXRActionSet) Resource() Resource { return Resource(gdClass) }

var methodOpenXRActionSet [9]gdnative.Method
func (gdClass OpenXRActionSet) SetLocalizedName(localized_name string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[0], localized_name) }
func (gdClass OpenXRActionSet) GetLocalizedName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRActionSet[1]) }
func (gdClass OpenXRActionSet) SetPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[2], priority) }
func (gdClass OpenXRActionSet) GetPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionSet[3]) }
func (gdClass OpenXRActionSet) GetActionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRActionSet[4]) }
func (gdClass OpenXRActionSet) SetActions(actions Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[5], actions) }
func (gdClass OpenXRActionSet) GetActions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRActionSet[6]) }
func (gdClass OpenXRActionSet) AddAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[7], action) }
func (gdClass OpenXRActionSet) RemoveAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRActionSet[8], action) }

type OpenXRIPBinding gdnative.Object
func (OpenXRIPBinding) class() string { return "OpenXRIPBinding\000" }

func (gdClass OpenXRIPBinding) Resource() Resource { return Resource(gdClass) }

var methodOpenXRIPBinding [8]gdnative.Method
func (gdClass OpenXRIPBinding) SetAction(action OpenXRAction)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[0], action) }
func (gdClass OpenXRIPBinding) GetAction() OpenXRAction { return gdnative.Return[OpenXRAction](gdnative.Object(gdClass), methodOpenXRIPBinding[1]) }
func (gdClass OpenXRIPBinding) GetPathCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRIPBinding[2]) }
func (gdClass OpenXRIPBinding) SetPaths(paths []string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[3], paths) }
func (gdClass OpenXRIPBinding) GetPaths() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodOpenXRIPBinding[4]) }
func (gdClass OpenXRIPBinding) HasPath(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOpenXRIPBinding[5], path) }
func (gdClass OpenXRIPBinding) AddPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[6], path) }
func (gdClass OpenXRIPBinding) RemovePath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRIPBinding[7], path) }

type OpenXRInteractionProfile gdnative.Object
func (OpenXRInteractionProfile) class() string { return "OpenXRInteractionProfile\000" }

func (gdClass OpenXRInteractionProfile) Resource() Resource { return Resource(gdClass) }

var methodOpenXRInteractionProfile [6]gdnative.Method
func (gdClass OpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path string)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRInteractionProfile[0], interaction_profile_path) }
func (gdClass OpenXRInteractionProfile) GetInteractionProfilePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodOpenXRInteractionProfile[1]) }
func (gdClass OpenXRInteractionProfile) GetBindingCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOpenXRInteractionProfile[2]) }
func (gdClass OpenXRInteractionProfile) GetBinding(index int64) OpenXRIPBinding { return gdnative.Return[OpenXRIPBinding](gdnative.Object(gdClass), methodOpenXRInteractionProfile[3], index) }
func (gdClass OpenXRInteractionProfile) SetBindings(bindings Array)  { gdnative.Call(gdnative.Object(gdClass), methodOpenXRInteractionProfile[4], bindings) }
func (gdClass OpenXRInteractionProfile) GetBindings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodOpenXRInteractionProfile[5]) }

type OpenXRInterface gdnative.Object
func (OpenXRInterface) class() string { return "OpenXRInterface\000" }

func (gdClass OpenXRInterface) XRInterface() XRInterface { return XRInterface(gdClass) }


type OptimizedTranslation gdnative.Object
func (OptimizedTranslation) class() string { return "OptimizedTranslation\000" }

func (gdClass OptimizedTranslation) Translation() Translation { return Translation(gdClass) }

var methodOptimizedTranslation [1]gdnative.Method
func (gdClass OptimizedTranslation) Generate(from Translation)  { gdnative.Call(gdnative.Object(gdClass), methodOptimizedTranslation[0], from) }

type OptionButton gdnative.Object
func (OptionButton) class() string { return "OptionButton\000" }

func (gdClass OptionButton) Button() Button { return Button(gdClass) }

var methodOptionButton [30]gdnative.Method
func (gdClass OptionButton) AddItem(label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[0], label, id) }
func (gdClass OptionButton) AddIconItem(texture Texture2D, label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[1], texture, label, id) }
func (gdClass OptionButton) SetItemText(idx int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[2], idx, text) }
func (gdClass OptionButton) SetItemIcon(idx int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[3], idx, texture) }
func (gdClass OptionButton) SetItemDisabled(idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[4], idx, disabled) }
func (gdClass OptionButton) SetItemId(idx int64, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[5], idx, id) }
func (gdClass OptionButton) SetItemMetadata(idx int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[6], idx, metadata) }
func (gdClass OptionButton) SetItemTooltip(idx int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[7], idx, tooltip) }
func (gdClass OptionButton) GetItemText(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOptionButton[8], idx) }
func (gdClass OptionButton) GetItemIcon(idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodOptionButton[9], idx) }
func (gdClass OptionButton) GetItemId(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[10], idx) }
func (gdClass OptionButton) GetItemIndex(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[11], id) }
func (gdClass OptionButton) GetItemMetadata(idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodOptionButton[12], idx) }
func (gdClass OptionButton) GetItemTooltip(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodOptionButton[13], idx) }
func (gdClass OptionButton) IsItemDisabled(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[14], idx) }
func (gdClass OptionButton) IsItemSeparator(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[15], idx) }
func (gdClass OptionButton) AddSeparator(text string)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[16], text) }
func (gdClass OptionButton) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[17]) }
func (gdClass OptionButton) Select(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[18], idx) }
func (gdClass OptionButton) GetSelected() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[19]) }
func (gdClass OptionButton) GetSelectedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[20]) }
func (gdClass OptionButton) GetSelectedMetadata() any { return gdnative.Return[any](gdnative.Object(gdClass), methodOptionButton[21]) }
func (gdClass OptionButton) RemoveItem(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[22], idx) }
func (gdClass OptionButton) GetPopup() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodOptionButton[23]) }
func (gdClass OptionButton) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[24], count) }
func (gdClass OptionButton) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[25]) }
func (gdClass OptionButton) HasSelectableItems() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[26]) }
func (gdClass OptionButton) GetSelectableItem(from_last bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodOptionButton[27], from_last) }
func (gdClass OptionButton) SetFitToLongestItem(fit bool)  { gdnative.Call(gdnative.Object(gdClass), methodOptionButton[28], fit) }
func (gdClass OptionButton) IsFitToLongestItem() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodOptionButton[29]) }

type PCKPacker gdnative.Object
func (PCKPacker) class() string { return "PCKPacker\000" }

func (gdClass PCKPacker) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPCKPacker [3]gdnative.Method
func (gdClass PCKPacker) PckStart(pck_name string, alignment int64, key string, encrypt_directory bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[0], pck_name, alignment, key, encrypt_directory) }
func (gdClass PCKPacker) AddFile(pck_path string, source_path string, encrypt bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[1], pck_path, source_path, encrypt) }
func (gdClass PCKPacker) Flush(verbose bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPCKPacker[2], verbose) }

type PackedDataContainer gdnative.Object
func (PackedDataContainer) class() string { return "PackedDataContainer\000" }

func (gdClass PackedDataContainer) Resource() Resource { return Resource(gdClass) }

var methodPackedDataContainer [2]gdnative.Method
func (gdClass PackedDataContainer) Pack(value any) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPackedDataContainer[0], value) }
func (gdClass PackedDataContainer) Size() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPackedDataContainer[1]) }

type PackedDataContainerRef gdnative.Object
func (PackedDataContainerRef) class() string { return "PackedDataContainerRef\000" }

func (gdClass PackedDataContainerRef) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPackedDataContainerRef [1]gdnative.Method
func (gdClass PackedDataContainerRef) Size() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPackedDataContainerRef[0]) }

type PackedSceneGenEditState int64

const (
	PackedSceneGenEditStateDisabled PackedSceneGenEditState = 0
	PackedSceneGenEditStateInstance PackedSceneGenEditState = 1
	PackedSceneGenEditStateMain PackedSceneGenEditState = 2
	PackedSceneGenEditStateMainInherited PackedSceneGenEditState = 3
)

type PackedScene gdnative.Object
func (PackedScene) class() string { return "PackedScene\000" }

func (gdClass PackedScene) Resource() Resource { return Resource(gdClass) }

var methodPackedScene [4]gdnative.Method
func (gdClass PackedScene) Pack(path Node) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPackedScene[0], path) }
func (gdClass PackedScene) Instantiate(edit_state PackedSceneGenEditState) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodPackedScene[1], edit_state) }
func (gdClass PackedScene) CanInstantiate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPackedScene[2]) }
func (gdClass PackedScene) GetState() SceneState { return gdnative.Return[SceneState](gdnative.Object(gdClass), methodPackedScene[3]) }

type PacketPeer gdnative.Object
func (PacketPeer) class() string { return "PacketPeer\000" }

func (gdClass PacketPeer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPacketPeer [8]gdnative.Method
func (gdClass PacketPeer) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPacketPeer[0], allow_objects) }
func (gdClass PacketPeer) PutVar(v any, full_objects bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[1], v, full_objects) }
func (gdClass PacketPeer) GetPacket() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodPacketPeer[2]) }
func (gdClass PacketPeer) PutPacket(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[3], buffer) }
func (gdClass PacketPeer) GetPacketError() error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeer[4]) }
func (gdClass PacketPeer) GetAvailablePacketCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeer[5]) }
func (gdClass PacketPeer) GetEncodeBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeer[6]) }
func (gdClass PacketPeer) SetEncodeBufferMaxSize(max_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeer[7], max_size) }

type PacketPeerDTLSStatus int64

const (
	PacketPeerDTLSStatusDisconnected PacketPeerDTLSStatus = 0
	PacketPeerDTLSStatusHandshaking PacketPeerDTLSStatus = 1
	PacketPeerDTLSStatusConnected PacketPeerDTLSStatus = 2
	PacketPeerDTLSStatusError PacketPeerDTLSStatus = 3
	PacketPeerDTLSStatusErrorHostnameMismatch PacketPeerDTLSStatus = 4
)

type PacketPeerDTLS gdnative.Object
func (PacketPeerDTLS) class() string { return "PacketPeerDTLS\000" }

func (gdClass PacketPeerDTLS) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodPacketPeerDTLS [4]gdnative.Method
func (gdClass PacketPeerDTLS) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerDTLS[0]) }
func (gdClass PacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, validate_certs bool, for_hostname string, valid_certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerDTLS[1], packet_peer, validate_certs, for_hostname, valid_certificate) }
func (gdClass PacketPeerDTLS) GetStatus() PacketPeerDTLSStatus { return gdnative.Return[PacketPeerDTLSStatus](gdnative.Object(gdClass), methodPacketPeerDTLS[2]) }
func (gdClass PacketPeerDTLS) DisconnectFromPeer()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerDTLS[3]) }

type PacketPeerExtension gdnative.Object
func (PacketPeerExtension) class() string { return "PacketPeerExtension\000" }

func (gdClass PacketPeerExtension) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

func (gdClass PacketPeerExtension) virtual(val any, name string) any {	switch name {
	case "_get_packet":
		i, ok := val.(interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 })
		if ok {
			return i.GetPacket
		}
	case "_put_packet":
		i, ok := val.(interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 })
		if ok {
			return i.PutPacket
		}
	case "_get_available_packet_count":
		i, ok := val.(interface{ GetAvailablePacketCount() int64 })
		if ok {
			return i.GetAvailablePacketCount
		}
	case "_get_max_packet_size":
		i, ok := val.(interface{ GetMaxPacketSize() int64 })
		if ok {
			return i.GetMaxPacketSize
		}
	}
	return nil
}

type PacketPeerStream gdnative.Object
func (PacketPeerStream) class() string { return "PacketPeerStream\000" }

func (gdClass PacketPeerStream) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodPacketPeerStream [6]gdnative.Method
func (gdClass PacketPeerStream) SetStreamPeer(peer StreamPeer)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[0], peer) }
func (gdClass PacketPeerStream) GetStreamPeer() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodPacketPeerStream[1]) }
func (gdClass PacketPeerStream) SetInputBufferMaxSize(max_size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[2], max_size_bytes) }
func (gdClass PacketPeerStream) SetOutputBufferMaxSize(max_size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerStream[3], max_size_bytes) }
func (gdClass PacketPeerStream) GetInputBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerStream[4]) }
func (gdClass PacketPeerStream) GetOutputBufferMaxSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerStream[5]) }

type PacketPeerUDP gdnative.Object
func (PacketPeerUDP) class() string { return "PacketPeerUDP\000" }

func (gdClass PacketPeerUDP) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodPacketPeerUDP [13]gdnative.Method
func (gdClass PacketPeerUDP) Bind(port int64, bind_address string, recv_buf_size int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[0], port, bind_address, recv_buf_size) }
func (gdClass PacketPeerUDP) Close()  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerUDP[1]) }
func (gdClass PacketPeerUDP) Wait() error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[2]) }
func (gdClass PacketPeerUDP) IsBound() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPacketPeerUDP[3]) }
func (gdClass PacketPeerUDP) ConnectToHost(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[4], host, port) }
func (gdClass PacketPeerUDP) IsSocketConnected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPacketPeerUDP[5]) }
func (gdClass PacketPeerUDP) GetPacketIp() string { return gdnative.Return[string](gdnative.Object(gdClass), methodPacketPeerUDP[6]) }
func (gdClass PacketPeerUDP) GetPacketPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerUDP[7]) }
func (gdClass PacketPeerUDP) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPacketPeerUDP[8]) }
func (gdClass PacketPeerUDP) SetDestAddress(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[9], host, port) }
func (gdClass PacketPeerUDP) SetBroadcastEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPacketPeerUDP[10], enabled) }
func (gdClass PacketPeerUDP) JoinMulticastGroup(multicast_address string, interface_name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[11], multicast_address, interface_name) }
func (gdClass PacketPeerUDP) LeaveMulticastGroup(multicast_address string, interface_name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodPacketPeerUDP[12], multicast_address, interface_name) }

type Panel gdnative.Object
func (Panel) class() string { return "Panel\000" }

func (gdClass Panel) Control() Control { return Control(gdClass) }


type PanelContainer gdnative.Object
func (PanelContainer) class() string { return "PanelContainer\000" }

func (gdClass PanelContainer) Container() Container { return Container(gdClass) }


type PanoramaSkyMaterial gdnative.Object
func (PanoramaSkyMaterial) class() string { return "PanoramaSkyMaterial\000" }

func (gdClass PanoramaSkyMaterial) Material() Material { return Material(gdClass) }

var methodPanoramaSkyMaterial [4]gdnative.Method
func (gdClass PanoramaSkyMaterial) SetPanorama(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPanoramaSkyMaterial[0], texture) }
func (gdClass PanoramaSkyMaterial) GetPanorama() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPanoramaSkyMaterial[1]) }
func (gdClass PanoramaSkyMaterial) SetFilteringEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPanoramaSkyMaterial[2], enabled) }
func (gdClass PanoramaSkyMaterial) IsFilteringEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPanoramaSkyMaterial[3]) }

type ParallaxBackground gdnative.Object
func (ParallaxBackground) class() string { return "ParallaxBackground\000" }

func (gdClass ParallaxBackground) CanvasLayer() CanvasLayer { return CanvasLayer(gdClass) }

var methodParallaxBackground [12]gdnative.Method
func (gdClass ParallaxBackground) SetScrollOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[0], offset) }
func (gdClass ParallaxBackground) GetScrollOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[1]) }
func (gdClass ParallaxBackground) SetScrollBaseOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[2], offset) }
func (gdClass ParallaxBackground) GetScrollBaseOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[3]) }
func (gdClass ParallaxBackground) SetScrollBaseScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[4], scale) }
func (gdClass ParallaxBackground) GetScrollBaseScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[5]) }
func (gdClass ParallaxBackground) SetLimitBegin(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[6], offset) }
func (gdClass ParallaxBackground) GetLimitBegin() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[7]) }
func (gdClass ParallaxBackground) SetLimitEnd(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[8], offset) }
func (gdClass ParallaxBackground) GetLimitEnd() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxBackground[9]) }
func (gdClass ParallaxBackground) SetIgnoreCameraZoom(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxBackground[10], ignore) }
func (gdClass ParallaxBackground) IsIgnoreCameraZoom() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParallaxBackground[11]) }

type ParallaxLayer gdnative.Object
func (ParallaxLayer) class() string { return "ParallaxLayer\000" }

func (gdClass ParallaxLayer) Node2D() Node2D { return Node2D(gdClass) }

var methodParallaxLayer [6]gdnative.Method
func (gdClass ParallaxLayer) SetMotionScale(scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[0], scale) }
func (gdClass ParallaxLayer) GetMotionScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[1]) }
func (gdClass ParallaxLayer) SetMotionOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[2], offset) }
func (gdClass ParallaxLayer) GetMotionOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[3]) }
func (gdClass ParallaxLayer) SetMirroring(mirror Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodParallaxLayer[4], mirror) }
func (gdClass ParallaxLayer) GetMirroring() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodParallaxLayer[5]) }

type ParticlesMaterialParameter int64

const (
	ParticlesMaterialParamInitialLinearVelocity ParticlesMaterialParameter = 0
	ParticlesMaterialParamAngularVelocity ParticlesMaterialParameter = 1
	ParticlesMaterialParamOrbitVelocity ParticlesMaterialParameter = 2
	ParticlesMaterialParamLinearAccel ParticlesMaterialParameter = 3
	ParticlesMaterialParamRadialAccel ParticlesMaterialParameter = 4
	ParticlesMaterialParamTangentialAccel ParticlesMaterialParameter = 5
	ParticlesMaterialParamDamping ParticlesMaterialParameter = 6
	ParticlesMaterialParamAngle ParticlesMaterialParameter = 7
	ParticlesMaterialParamScale ParticlesMaterialParameter = 8
	ParticlesMaterialParamHueVariation ParticlesMaterialParameter = 9
	ParticlesMaterialParamAnimSpeed ParticlesMaterialParameter = 10
	ParticlesMaterialParamAnimOffset ParticlesMaterialParameter = 11
	ParticlesMaterialParamMax ParticlesMaterialParameter = 15
	ParticlesMaterialParamTurbVelInfluence ParticlesMaterialParameter = 13
	ParticlesMaterialParamTurbInitDisplacement ParticlesMaterialParameter = 14
	ParticlesMaterialParamTurbInfluenceOverLife ParticlesMaterialParameter = 12
)

type ParticlesMaterialParticleFlags int64

const (
	ParticlesMaterialParticleFlagAlignYToVelocity ParticlesMaterialParticleFlags = 0
	ParticlesMaterialParticleFlagRotateY ParticlesMaterialParticleFlags = 1
	ParticlesMaterialParticleFlagDisableZ ParticlesMaterialParticleFlags = 2
	ParticlesMaterialParticleFlagMax ParticlesMaterialParticleFlags = 3
)

type ParticlesMaterialEmissionShape int64

const (
	ParticlesMaterialEmissionShapePoint ParticlesMaterialEmissionShape = 0
	ParticlesMaterialEmissionShapeSphere ParticlesMaterialEmissionShape = 1
	ParticlesMaterialEmissionShapeSphereSurface ParticlesMaterialEmissionShape = 2
	ParticlesMaterialEmissionShapeBox ParticlesMaterialEmissionShape = 3
	ParticlesMaterialEmissionShapePoints ParticlesMaterialEmissionShape = 4
	ParticlesMaterialEmissionShapeDirectedPoints ParticlesMaterialEmissionShape = 5
	ParticlesMaterialEmissionShapeRing ParticlesMaterialEmissionShape = 6
	ParticlesMaterialEmissionShapeMax ParticlesMaterialEmissionShape = 7
)

type ParticlesMaterialSubEmitterMode int64

const (
	ParticlesMaterialSubEmitterDisabled ParticlesMaterialSubEmitterMode = 0
	ParticlesMaterialSubEmitterConstant ParticlesMaterialSubEmitterMode = 1
	ParticlesMaterialSubEmitterAtEnd ParticlesMaterialSubEmitterMode = 2
	ParticlesMaterialSubEmitterAtCollision ParticlesMaterialSubEmitterMode = 3
	ParticlesMaterialSubEmitterMax ParticlesMaterialSubEmitterMode = 4
)

type ParticlesMaterial gdnative.Object
func (ParticlesMaterial) class() string { return "ParticlesMaterial\000" }

func (gdClass ParticlesMaterial) Material() Material { return Material(gdClass) }

var methodParticlesMaterial [74]gdnative.Method
func (gdClass ParticlesMaterial) SetDirection(degrees Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[0], degrees) }
func (gdClass ParticlesMaterial) GetDirection() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[1]) }
func (gdClass ParticlesMaterial) SetSpread(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[2], degrees) }
func (gdClass ParticlesMaterial) GetSpread() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[3]) }
func (gdClass ParticlesMaterial) SetFlatness(amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[4], amount) }
func (gdClass ParticlesMaterial) GetFlatness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[5]) }
func (gdClass ParticlesMaterial) SetParamMin(param ParticlesMaterialParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[6], param, value) }
func (gdClass ParticlesMaterial) GetParamMin(param ParticlesMaterialParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[7], param) }
func (gdClass ParticlesMaterial) SetParamMax(param ParticlesMaterialParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[8], param, value) }
func (gdClass ParticlesMaterial) GetParamMax(param ParticlesMaterialParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[9], param) }
func (gdClass ParticlesMaterial) SetParamTexture(param ParticlesMaterialParameter, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[10], param, texture) }
func (gdClass ParticlesMaterial) GetParamTexture(param ParticlesMaterialParameter) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[11], param) }
func (gdClass ParticlesMaterial) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[12], color) }
func (gdClass ParticlesMaterial) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodParticlesMaterial[13]) }
func (gdClass ParticlesMaterial) SetColorRamp(ramp Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[14], ramp) }
func (gdClass ParticlesMaterial) GetColorRamp() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[15]) }
func (gdClass ParticlesMaterial) SetColorInitialRamp(ramp Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[16], ramp) }
func (gdClass ParticlesMaterial) GetColorInitialRamp() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[17]) }
func (gdClass ParticlesMaterial) SetParticleFlag(particle_flag ParticlesMaterialParticleFlags, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[18], particle_flag, enable) }
func (gdClass ParticlesMaterial) GetParticleFlag(particle_flag ParticlesMaterialParticleFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[19], particle_flag) }
func (gdClass ParticlesMaterial) SetEmissionShape(shape ParticlesMaterialEmissionShape)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[20], shape) }
func (gdClass ParticlesMaterial) GetEmissionShape() ParticlesMaterialEmissionShape { return gdnative.Return[ParticlesMaterialEmissionShape](gdnative.Object(gdClass), methodParticlesMaterial[21]) }
func (gdClass ParticlesMaterial) SetEmissionSphereRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[22], radius) }
func (gdClass ParticlesMaterial) GetEmissionSphereRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[23]) }
func (gdClass ParticlesMaterial) SetEmissionBoxExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[24], extents) }
func (gdClass ParticlesMaterial) GetEmissionBoxExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[25]) }
func (gdClass ParticlesMaterial) SetEmissionPointTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[26], texture) }
func (gdClass ParticlesMaterial) GetEmissionPointTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[27]) }
func (gdClass ParticlesMaterial) SetEmissionNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[28], texture) }
func (gdClass ParticlesMaterial) GetEmissionNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[29]) }
func (gdClass ParticlesMaterial) SetEmissionColorTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[30], texture) }
func (gdClass ParticlesMaterial) GetEmissionColorTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodParticlesMaterial[31]) }
func (gdClass ParticlesMaterial) SetEmissionPointCount(point_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[32], point_count) }
func (gdClass ParticlesMaterial) GetEmissionPointCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodParticlesMaterial[33]) }
func (gdClass ParticlesMaterial) SetEmissionRingAxis(axis Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[34], axis) }
func (gdClass ParticlesMaterial) GetEmissionRingAxis() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[35]) }
func (gdClass ParticlesMaterial) SetEmissionRingHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[36], height) }
func (gdClass ParticlesMaterial) GetEmissionRingHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[37]) }
func (gdClass ParticlesMaterial) SetEmissionRingRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[38], radius) }
func (gdClass ParticlesMaterial) GetEmissionRingRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[39]) }
func (gdClass ParticlesMaterial) SetEmissionRingInnerRadius(inner_radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[40], inner_radius) }
func (gdClass ParticlesMaterial) GetEmissionRingInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[41]) }
func (gdClass ParticlesMaterial) GetTurbulenceEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[42]) }
func (gdClass ParticlesMaterial) SetTurbulenceEnabled(turbulence_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[43], turbulence_enabled) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[44]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[45], turbulence_noise_strength) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[46]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[47], turbulence_noise_scale) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseSpeedRandom() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[48]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[49], turbulence_noise_speed_random) }
func (gdClass ParticlesMaterial) GetTurbulenceNoiseSpeed() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[50]) }
func (gdClass ParticlesMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[51], turbulence_noise_speed) }
func (gdClass ParticlesMaterial) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodParticlesMaterial[52]) }
func (gdClass ParticlesMaterial) SetGravity(accel_vec Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[53], accel_vec) }
func (gdClass ParticlesMaterial) SetLifetimeRandomness(randomness float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[54], randomness) }
func (gdClass ParticlesMaterial) GetLifetimeRandomness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[55]) }
func (gdClass ParticlesMaterial) GetSubEmitterMode() ParticlesMaterialSubEmitterMode { return gdnative.Return[ParticlesMaterialSubEmitterMode](gdnative.Object(gdClass), methodParticlesMaterial[56]) }
func (gdClass ParticlesMaterial) SetSubEmitterMode(mode ParticlesMaterialSubEmitterMode)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[57], mode) }
func (gdClass ParticlesMaterial) GetSubEmitterFrequency() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[58]) }
func (gdClass ParticlesMaterial) SetSubEmitterFrequency(hz float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[59], hz) }
func (gdClass ParticlesMaterial) GetSubEmitterAmountAtEnd() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodParticlesMaterial[60]) }
func (gdClass ParticlesMaterial) SetSubEmitterAmountAtEnd(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[61], amount) }
func (gdClass ParticlesMaterial) GetSubEmitterKeepVelocity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[62]) }
func (gdClass ParticlesMaterial) SetSubEmitterKeepVelocity(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[63], enable) }
func (gdClass ParticlesMaterial) SetAttractorInteractionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[64], enabled) }
func (gdClass ParticlesMaterial) IsAttractorInteractionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[65]) }
func (gdClass ParticlesMaterial) SetCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[66], enabled) }
func (gdClass ParticlesMaterial) IsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[67]) }
func (gdClass ParticlesMaterial) SetCollisionUseScale(radius bool)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[68], radius) }
func (gdClass ParticlesMaterial) IsCollisionUsingScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodParticlesMaterial[69]) }
func (gdClass ParticlesMaterial) SetCollisionFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[70], friction) }
func (gdClass ParticlesMaterial) GetCollisionFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[71]) }
func (gdClass ParticlesMaterial) SetCollisionBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodParticlesMaterial[72], bounce) }
func (gdClass ParticlesMaterial) GetCollisionBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodParticlesMaterial[73]) }

type Path2D gdnative.Object
func (Path2D) class() string { return "Path2D\000" }

func (gdClass Path2D) Node2D() Node2D { return Node2D(gdClass) }

var methodPath2D [2]gdnative.Method
func (gdClass Path2D) SetCurve(curve Curve2D)  { gdnative.Call(gdnative.Object(gdClass), methodPath2D[0], curve) }
func (gdClass Path2D) GetCurve() Curve2D { return gdnative.Return[Curve2D](gdnative.Object(gdClass), methodPath2D[1]) }

type Path3D gdnative.Object
func (Path3D) class() string { return "Path3D\000" }

func (gdClass Path3D) Node3D() Node3D { return Node3D(gdClass) }

var methodPath3D [2]gdnative.Method
func (gdClass Path3D) SetCurve(curve Curve3D)  { gdnative.Call(gdnative.Object(gdClass), methodPath3D[0], curve) }
func (gdClass Path3D) GetCurve() Curve3D { return gdnative.Return[Curve3D](gdnative.Object(gdClass), methodPath3D[1]) }

type PathFollow2D gdnative.Object
func (PathFollow2D) class() string { return "PathFollow2D\000" }

func (gdClass PathFollow2D) Node2D() Node2D { return Node2D(gdClass) }

var methodPathFollow2D [16]gdnative.Method
func (gdClass PathFollow2D) SetOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[0], offset) }
func (gdClass PathFollow2D) GetOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[1]) }
func (gdClass PathFollow2D) SetHOffset(h_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[2], h_offset) }
func (gdClass PathFollow2D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[3]) }
func (gdClass PathFollow2D) SetVOffset(v_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[4], v_offset) }
func (gdClass PathFollow2D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[5]) }
func (gdClass PathFollow2D) SetUnitOffset(unit_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[6], unit_offset) }
func (gdClass PathFollow2D) GetUnitOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[7]) }
func (gdClass PathFollow2D) SetRotates(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[8], enable) }
func (gdClass PathFollow2D) IsRotating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[9]) }
func (gdClass PathFollow2D) SetCubicInterpolation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[10], enable) }
func (gdClass PathFollow2D) GetCubicInterpolation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[11]) }
func (gdClass PathFollow2D) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[12], loop) }
func (gdClass PathFollow2D) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow2D[13]) }
func (gdClass PathFollow2D) SetLookahead(lookahead float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow2D[14], lookahead) }
func (gdClass PathFollow2D) GetLookahead() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow2D[15]) }

type PathFollow3DRotationMode int64

const (
	PathFollow3DRotationNone PathFollow3DRotationMode = 0
	PathFollow3DRotationY PathFollow3DRotationMode = 1
	PathFollow3DRotationXy PathFollow3DRotationMode = 2
	PathFollow3DRotationXyz PathFollow3DRotationMode = 3
	PathFollow3DRotationOriented PathFollow3DRotationMode = 4
)

type PathFollow3D gdnative.Object
func (PathFollow3D) class() string { return "PathFollow3D\000" }

func (gdClass PathFollow3D) Node3D() Node3D { return Node3D(gdClass) }

var methodPathFollow3D [14]gdnative.Method
func (gdClass PathFollow3D) SetOffset(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[0], offset) }
func (gdClass PathFollow3D) GetOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[1]) }
func (gdClass PathFollow3D) SetHOffset(h_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[2], h_offset) }
func (gdClass PathFollow3D) GetHOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[3]) }
func (gdClass PathFollow3D) SetVOffset(v_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[4], v_offset) }
func (gdClass PathFollow3D) GetVOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[5]) }
func (gdClass PathFollow3D) SetUnitOffset(unit_offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[6], unit_offset) }
func (gdClass PathFollow3D) GetUnitOffset() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPathFollow3D[7]) }
func (gdClass PathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[8], rotation_mode) }
func (gdClass PathFollow3D) GetRotationMode() PathFollow3DRotationMode { return gdnative.Return[PathFollow3DRotationMode](gdnative.Object(gdClass), methodPathFollow3D[9]) }
func (gdClass PathFollow3D) SetCubicInterpolation(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[10], enable) }
func (gdClass PathFollow3D) GetCubicInterpolation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow3D[11]) }
func (gdClass PathFollow3D) SetLoop(loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodPathFollow3D[12], loop) }
func (gdClass PathFollow3D) HasLoop() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPathFollow3D[13]) }

type PerformanceMonitor int64

const (
	PerformanceTimeFps PerformanceMonitor = 0
	PerformanceTimeProcess PerformanceMonitor = 1
	PerformanceTimePhysicsProcess PerformanceMonitor = 2
	PerformanceMemoryStatic PerformanceMonitor = 3
	PerformanceMemoryStaticMax PerformanceMonitor = 4
	PerformanceMemoryMessageBufferMax PerformanceMonitor = 5
	PerformanceObjectCount PerformanceMonitor = 6
	PerformanceObjectResourceCount PerformanceMonitor = 7
	PerformanceObjectNodeCount PerformanceMonitor = 8
	PerformanceObjectOrphanNodeCount PerformanceMonitor = 9
	PerformanceRenderTotalObjectsInFrame PerformanceMonitor = 10
	PerformanceRenderTotalPrimitivesInFrame PerformanceMonitor = 11
	PerformanceRenderTotalDrawCallsInFrame PerformanceMonitor = 12
	PerformanceRenderVideoMemUsed PerformanceMonitor = 13
	PerformanceRenderTextureMemUsed PerformanceMonitor = 14
	PerformanceRenderBufferMemUsed PerformanceMonitor = 15
	PerformancePhysics2dActiveObjects PerformanceMonitor = 16
	PerformancePhysics2dCollisionPairs PerformanceMonitor = 17
	PerformancePhysics2dIslandCount PerformanceMonitor = 18
	PerformancePhysics3dActiveObjects PerformanceMonitor = 19
	PerformancePhysics3dCollisionPairs PerformanceMonitor = 20
	PerformancePhysics3dIslandCount PerformanceMonitor = 21
	PerformanceAudioOutputLatency PerformanceMonitor = 22
	PerformanceMonitorMax PerformanceMonitor = 23
)

type Performance gdnative.Object
func (Performance) class() string { return "Performance\000" }

func (gdClass Performance) Object() Object { return Object(gdClass) }

var methodPerformance [7]gdnative.Method
func (gdClass Performance) GetMonitor(monitor PerformanceMonitor) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPerformance[0], monitor) }
func (gdClass Performance) AddCustomMonitor(id string, callable Callable, arguments Array)  { gdnative.Call(gdnative.Object(gdClass), methodPerformance[1], id, callable, arguments) }
func (gdClass Performance) RemoveCustomMonitor(id string)  { gdnative.Call(gdnative.Object(gdClass), methodPerformance[2], id) }
func (gdClass Performance) HasCustomMonitor(id string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPerformance[3], id) }
func (gdClass Performance) GetCustomMonitor(id string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPerformance[4], id) }
func (gdClass Performance) GetMonitorModificationTime() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPerformance[5]) }
func (gdClass Performance) GetCustomMonitorNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPerformance[6]) }

type PhysicalBone2D gdnative.Object
func (PhysicalBone2D) class() string { return "PhysicalBone2D\000" }

func (gdClass PhysicalBone2D) RigidDynamicBody2D() RigidDynamicBody2D { return RigidDynamicBody2D(gdClass) }

var methodPhysicalBone2D [12]gdnative.Method
func (gdClass PhysicalBone2D) GetJoint() Joint2D { return gdnative.Return[Joint2D](gdnative.Object(gdClass), methodPhysicalBone2D[0]) }
func (gdClass PhysicalBone2D) GetAutoConfigureJoint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[1]) }
func (gdClass PhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[2], auto_configure_joint) }
func (gdClass PhysicalBone2D) SetSimulatePhysics(simulate_physics bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[3], simulate_physics) }
func (gdClass PhysicalBone2D) GetSimulatePhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[4]) }
func (gdClass PhysicalBone2D) IsSimulatingPhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[5]) }
func (gdClass PhysicalBone2D) SetBone2dNodepath(nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[6], nodepath) }
func (gdClass PhysicalBone2D) GetBone2dNodepath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPhysicalBone2D[7]) }
func (gdClass PhysicalBone2D) SetBone2dIndex(bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[8], bone_index) }
func (gdClass PhysicalBone2D) GetBone2dIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicalBone2D[9]) }
func (gdClass PhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone2D[10], follow_bone) }
func (gdClass PhysicalBone2D) GetFollowBoneWhenSimulating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone2D[11]) }

type PhysicalBone3DDampMode int64

const (
	PhysicalBone3DDampModeCombine PhysicalBone3DDampMode = 0
	PhysicalBone3DDampModeReplace PhysicalBone3DDampMode = 1
)

type PhysicalBone3DJointType int64

const (
	PhysicalBone3DJointTypeNone PhysicalBone3DJointType = 0
	PhysicalBone3DJointTypePin PhysicalBone3DJointType = 1
	PhysicalBone3DJointTypeCone PhysicalBone3DJointType = 2
	PhysicalBone3DJointTypeHinge PhysicalBone3DJointType = 3
	PhysicalBone3DJointTypeSlider PhysicalBone3DJointType = 4
	PhysicalBone3DJointType6dof PhysicalBone3DJointType = 5
)

type PhysicalBone3D gdnative.Object
func (PhysicalBone3D) class() string { return "PhysicalBone3D\000" }

func (gdClass PhysicalBone3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D(gdClass) }

var methodPhysicalBone3D [37]gdnative.Method
func (gdClass PhysicalBone3D) virtual(val any, name string) any {	switch name {
	case "_integrate_forces":
		i, ok := val.(interface{ IntegrateForces(state PhysicsDirectBodyState3D)  })
		if ok {
			return i.IntegrateForces
		}
	}
	return nil
}
func (gdClass PhysicalBone3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[0], impulse) }
func (gdClass PhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[1], impulse, position) }
func (gdClass PhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[2], joint_type) }
func (gdClass PhysicalBone3D) GetJointType() PhysicalBone3DJointType { return gdnative.Return[PhysicalBone3DJointType](gdnative.Object(gdClass), methodPhysicalBone3D[3]) }
func (gdClass PhysicalBone3D) SetJointOffset(offset Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[4], offset) }
func (gdClass PhysicalBone3D) GetJointOffset() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicalBone3D[5]) }
func (gdClass PhysicalBone3D) SetJointRotation(euler Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[6], euler) }
func (gdClass PhysicalBone3D) GetJointRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[7]) }
func (gdClass PhysicalBone3D) SetBodyOffset(offset Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[8], offset) }
func (gdClass PhysicalBone3D) GetBodyOffset() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicalBone3D[9]) }
func (gdClass PhysicalBone3D) GetSimulatePhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[10]) }
func (gdClass PhysicalBone3D) IsSimulatingPhysics() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[11]) }
func (gdClass PhysicalBone3D) GetBoneId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicalBone3D[12]) }
func (gdClass PhysicalBone3D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[13], mass) }
func (gdClass PhysicalBone3D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[14]) }
func (gdClass PhysicalBone3D) SetFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[15], friction) }
func (gdClass PhysicalBone3D) GetFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[16]) }
func (gdClass PhysicalBone3D) SetBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[17], bounce) }
func (gdClass PhysicalBone3D) GetBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[18]) }
func (gdClass PhysicalBone3D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[19], gravity_scale) }
func (gdClass PhysicalBone3D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[20]) }
func (gdClass PhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[21], linear_damp_mode) }
func (gdClass PhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode { return gdnative.Return[PhysicalBone3DDampMode](gdnative.Object(gdClass), methodPhysicalBone3D[22]) }
func (gdClass PhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[23], angular_damp_mode) }
func (gdClass PhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode { return gdnative.Return[PhysicalBone3DDampMode](gdnative.Object(gdClass), methodPhysicalBone3D[24]) }
func (gdClass PhysicalBone3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[25], linear_damp) }
func (gdClass PhysicalBone3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[26]) }
func (gdClass PhysicalBone3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[27], angular_damp) }
func (gdClass PhysicalBone3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalBone3D[28]) }
func (gdClass PhysicalBone3D) SetLinearVelocity(linear_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[29], linear_velocity) }
func (gdClass PhysicalBone3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[30]) }
func (gdClass PhysicalBone3D) SetAngularVelocity(angular_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[31], angular_velocity) }
func (gdClass PhysicalBone3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicalBone3D[32]) }
func (gdClass PhysicalBone3D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[33], enable) }
func (gdClass PhysicalBone3D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[34]) }
func (gdClass PhysicalBone3D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalBone3D[35], able_to_sleep) }
func (gdClass PhysicalBone3D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalBone3D[36]) }

type PhysicalSkyMaterial gdnative.Object
func (PhysicalSkyMaterial) class() string { return "PhysicalSkyMaterial\000" }

func (gdClass PhysicalSkyMaterial) Material() Material { return Material(gdClass) }

var methodPhysicalSkyMaterial [22]gdnative.Method
func (gdClass PhysicalSkyMaterial) SetRayleighCoefficient(rayleigh float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[0], rayleigh) }
func (gdClass PhysicalSkyMaterial) GetRayleighCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[1]) }
func (gdClass PhysicalSkyMaterial) SetRayleighColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[2], color) }
func (gdClass PhysicalSkyMaterial) GetRayleighColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[3]) }
func (gdClass PhysicalSkyMaterial) SetMieCoefficient(mie float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[4], mie) }
func (gdClass PhysicalSkyMaterial) GetMieCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[5]) }
func (gdClass PhysicalSkyMaterial) SetMieEccentricity(eccentricity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[6], eccentricity) }
func (gdClass PhysicalSkyMaterial) GetMieEccentricity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[7]) }
func (gdClass PhysicalSkyMaterial) SetMieColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[8], color) }
func (gdClass PhysicalSkyMaterial) GetMieColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[9]) }
func (gdClass PhysicalSkyMaterial) SetTurbidity(turbidity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[10], turbidity) }
func (gdClass PhysicalSkyMaterial) GetTurbidity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[11]) }
func (gdClass PhysicalSkyMaterial) SetSunDiskScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[12], scale) }
func (gdClass PhysicalSkyMaterial) GetSunDiskScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[13]) }
func (gdClass PhysicalSkyMaterial) SetGroundColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[14], color) }
func (gdClass PhysicalSkyMaterial) GetGroundColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPhysicalSkyMaterial[15]) }
func (gdClass PhysicalSkyMaterial) SetExposure(exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[16], exposure) }
func (gdClass PhysicalSkyMaterial) GetExposure() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicalSkyMaterial[17]) }
func (gdClass PhysicalSkyMaterial) SetUseDebanding(use_debanding bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[18], use_debanding) }
func (gdClass PhysicalSkyMaterial) GetUseDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicalSkyMaterial[19]) }
func (gdClass PhysicalSkyMaterial) SetNightSky(night_sky Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicalSkyMaterial[20], night_sky) }
func (gdClass PhysicalSkyMaterial) GetNightSky() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPhysicalSkyMaterial[21]) }

type PhysicsBody2D gdnative.Object
func (PhysicsBody2D) class() string { return "PhysicsBody2D\000" }

func (gdClass PhysicsBody2D) CollisionObject2D() CollisionObject2D { return CollisionObject2D(gdClass) }

var methodPhysicsBody2D [5]gdnative.Method
func (gdClass PhysicsBody2D) MoveAndCollide(distance Vector2, test_only bool, safe_margin float64) KinematicCollision2D { return gdnative.Return[KinematicCollision2D](gdnative.Object(gdClass), methodPhysicsBody2D[0], distance, test_only, safe_margin) }
func (gdClass PhysicsBody2D) TestMove(from Transform2D, distance Vector2, collision KinematicCollision2D, safe_margin float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody2D[1], from, distance, collision, safe_margin) }
func (gdClass PhysicsBody2D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsBody2D[2]) }
func (gdClass PhysicsBody2D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody2D[3], body) }
func (gdClass PhysicsBody2D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody2D[4], body) }

type PhysicsBody3D gdnative.Object
func (PhysicsBody3D) class() string { return "PhysicsBody3D\000" }

func (gdClass PhysicsBody3D) CollisionObject3D() CollisionObject3D { return CollisionObject3D(gdClass) }

var methodPhysicsBody3D [7]gdnative.Method
func (gdClass PhysicsBody3D) MoveAndCollide(distance Vector3, test_only bool, safe_margin float64, max_collisions int64) KinematicCollision3D { return gdnative.Return[KinematicCollision3D](gdnative.Object(gdClass), methodPhysicsBody3D[0], distance, test_only, safe_margin, max_collisions) }
func (gdClass PhysicsBody3D) TestMove(from Transform3D, distance Vector3, collision KinematicCollision3D, safe_margin float64, max_collisions int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody3D[1], from, distance, collision, safe_margin, max_collisions) }
func (gdClass PhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[2], axis, lock) }
func (gdClass PhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsBody3D[3], axis) }
func (gdClass PhysicsBody3D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsBody3D[4]) }
func (gdClass PhysicsBody3D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[5], body) }
func (gdClass PhysicsBody3D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsBody3D[6], body) }

type PhysicsDirectBodyState2D gdnative.Object
func (PhysicsDirectBodyState2D) class() string { return "PhysicsDirectBodyState2D\000" }

func (gdClass PhysicsDirectBodyState2D) Object() Object { return Object(gdClass) }

var methodPhysicsDirectBodyState2D [42]gdnative.Method
func (gdClass PhysicsDirectBodyState2D) GetTotalGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[0]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[1]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[2]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMass() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[3]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[4]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[5]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseInertia() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[6]) }
func (gdClass PhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[7], velocity) }
func (gdClass PhysicsDirectBodyState2D) GetLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[8]) }
func (gdClass PhysicsDirectBodyState2D) SetAngularVelocity(velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[9], velocity) }
func (gdClass PhysicsDirectBodyState2D) GetAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[10]) }
func (gdClass PhysicsDirectBodyState2D) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[11], transform) }
func (gdClass PhysicsDirectBodyState2D) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[12]) }
func (gdClass PhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[13], local_position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[14], impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[15], impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[16], impulse, position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[17], force) }
func (gdClass PhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[18], force, position) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[19], torque) }
func (gdClass PhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[20], force) }
func (gdClass PhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[21], force, position) }
func (gdClass PhysicsDirectBodyState2D) AddConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[22], torque) }
func (gdClass PhysicsDirectBodyState2D) SetConstantForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[23], force) }
func (gdClass PhysicsDirectBodyState2D) GetConstantForce() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[24]) }
func (gdClass PhysicsDirectBodyState2D) SetConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[25], torque) }
func (gdClass PhysicsDirectBodyState2D) GetConstantTorque() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[26]) }
func (gdClass PhysicsDirectBodyState2D) SetSleepState(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[27], enabled) }
func (gdClass PhysicsDirectBodyState2D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[28]) }
func (gdClass PhysicsDirectBodyState2D) GetContactCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[29]) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[30], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[31], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[32], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactCollider(contact_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[33], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[34], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderId(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[35], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderObject(contact_idx int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[36], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[37], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[38], contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[39]) }
func (gdClass PhysicsDirectBodyState2D) IntegrateForces()  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[40]) }
func (gdClass PhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodPhysicsDirectBodyState2D[41]) }

type PhysicsDirectBodyState3D gdnative.Object
func (PhysicsDirectBodyState3D) class() string { return "PhysicsDirectBodyState3D\000" }

func (gdClass PhysicsDirectBodyState3D) Object() Object { return Object(gdClass) }

var methodPhysicsDirectBodyState3D [44]gdnative.Method
func (gdClass PhysicsDirectBodyState3D) GetTotalGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[0]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[1]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[2]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMass() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[3]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[4]) }
func (gdClass PhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[5]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[6]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseInertia() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[7]) }
func (gdClass PhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[8], velocity) }
func (gdClass PhysicsDirectBodyState3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[9]) }
func (gdClass PhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[10], velocity) }
func (gdClass PhysicsDirectBodyState3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[11]) }
func (gdClass PhysicsDirectBodyState3D) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[12], transform) }
func (gdClass PhysicsDirectBodyState3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[13]) }
func (gdClass PhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[14], local_position) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[15], impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[16], impulse, position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[17], impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[18], force) }
func (gdClass PhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[19], force, position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[20], torque) }
func (gdClass PhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[21], force) }
func (gdClass PhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[22], force, position) }
func (gdClass PhysicsDirectBodyState3D) AddConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[23], torque) }
func (gdClass PhysicsDirectBodyState3D) SetConstantForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[24], force) }
func (gdClass PhysicsDirectBodyState3D) GetConstantForce() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[25]) }
func (gdClass PhysicsDirectBodyState3D) SetConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[26], torque) }
func (gdClass PhysicsDirectBodyState3D) GetConstantTorque() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[27]) }
func (gdClass PhysicsDirectBodyState3D) SetSleepState(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[28], enabled) }
func (gdClass PhysicsDirectBodyState3D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[29]) }
func (gdClass PhysicsDirectBodyState3D) GetContactCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[30]) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[31], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[32], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactImpulse(contact_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[33], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[34], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactCollider(contact_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[35], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[36], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderId(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[37], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderObject(contact_idx int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[38], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderShape(contact_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[39], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[40], contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[41]) }
func (gdClass PhysicsDirectBodyState3D) IntegrateForces()  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[42]) }
func (gdClass PhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsDirectBodyState3D[43]) }

type PhysicsDirectBodyState3DExtension gdnative.Object
func (PhysicsDirectBodyState3DExtension) class() string { return "PhysicsDirectBodyState3DExtension\000" }

func (gdClass PhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3D() PhysicsDirectBodyState3D { return PhysicsDirectBodyState3D(gdClass) }

func (gdClass PhysicsDirectBodyState3DExtension) virtual(val any, name string) any {	switch name {
	case "_get_total_gravity":
		i, ok := val.(interface{ GetTotalGravity() Vector3 })
		if ok {
			return i.GetTotalGravity
		}
	case "_get_total_linear_damp":
		i, ok := val.(interface{ GetTotalLinearDamp() float64 })
		if ok {
			return i.GetTotalLinearDamp
		}
	case "_get_total_angular_damp":
		i, ok := val.(interface{ GetTotalAngularDamp() float64 })
		if ok {
			return i.GetTotalAngularDamp
		}
	case "_get_center_of_mass":
		i, ok := val.(interface{ GetCenterOfMass() Vector3 })
		if ok {
			return i.GetCenterOfMass
		}
	case "_get_center_of_mass_local":
		i, ok := val.(interface{ GetCenterOfMassLocal() Vector3 })
		if ok {
			return i.GetCenterOfMassLocal
		}
	case "_get_principal_inertia_axes":
		i, ok := val.(interface{ GetPrincipalInertiaAxes() Basis })
		if ok {
			return i.GetPrincipalInertiaAxes
		}
	case "_get_inverse_mass":
		i, ok := val.(interface{ GetInverseMass() float64 })
		if ok {
			return i.GetInverseMass
		}
	case "_get_inverse_inertia":
		i, ok := val.(interface{ GetInverseInertia() Vector3 })
		if ok {
			return i.GetInverseInertia
		}
	case "_set_linear_velocity":
		i, ok := val.(interface{ SetLinearVelocity(velocity Vector3)  })
		if ok {
			return i.SetLinearVelocity
		}
	case "_get_linear_velocity":
		i, ok := val.(interface{ GetLinearVelocity() Vector3 })
		if ok {
			return i.GetLinearVelocity
		}
	case "_set_angular_velocity":
		i, ok := val.(interface{ SetAngularVelocity(velocity Vector3)  })
		if ok {
			return i.SetAngularVelocity
		}
	case "_get_angular_velocity":
		i, ok := val.(interface{ GetAngularVelocity() Vector3 })
		if ok {
			return i.GetAngularVelocity
		}
	case "_set_transform":
		i, ok := val.(interface{ SetTransform(transform Transform3D)  })
		if ok {
			return i.SetTransform
		}
	case "_get_transform":
		i, ok := val.(interface{ GetTransform() Transform3D })
		if ok {
			return i.GetTransform
		}
	case "_get_velocity_at_local_position":
		i, ok := val.(interface{ GetVelocityAtLocalPosition(local_position Vector3) Vector3 })
		if ok {
			return i.GetVelocityAtLocalPosition
		}
	case "_apply_central_impulse":
		i, ok := val.(interface{ ApplyCentralImpulse(impulse Vector3)  })
		if ok {
			return i.ApplyCentralImpulse
		}
	case "_apply_impulse":
		i, ok := val.(interface{ ApplyImpulse(impulse Vector3, position Vector3)  })
		if ok {
			return i.ApplyImpulse
		}
	case "_apply_torque_impulse":
		i, ok := val.(interface{ ApplyTorqueImpulse(impulse Vector3)  })
		if ok {
			return i.ApplyTorqueImpulse
		}
	case "_apply_central_force":
		i, ok := val.(interface{ ApplyCentralForce(force Vector3)  })
		if ok {
			return i.ApplyCentralForce
		}
	case "_apply_force":
		i, ok := val.(interface{ ApplyForce(force Vector3, position Vector3)  })
		if ok {
			return i.ApplyForce
		}
	case "_apply_torque":
		i, ok := val.(interface{ ApplyTorque(torque Vector3)  })
		if ok {
			return i.ApplyTorque
		}
	case "_add_constant_central_force":
		i, ok := val.(interface{ AddConstantCentralForce(force Vector3)  })
		if ok {
			return i.AddConstantCentralForce
		}
	case "_add_constant_force":
		i, ok := val.(interface{ AddConstantForce(force Vector3, position Vector3)  })
		if ok {
			return i.AddConstantForce
		}
	case "_add_constant_torque":
		i, ok := val.(interface{ AddConstantTorque(torque Vector3)  })
		if ok {
			return i.AddConstantTorque
		}
	case "_set_constant_force":
		i, ok := val.(interface{ SetConstantForce(force Vector3)  })
		if ok {
			return i.SetConstantForce
		}
	case "_get_constant_force":
		i, ok := val.(interface{ GetConstantForce() Vector3 })
		if ok {
			return i.GetConstantForce
		}
	case "_set_constant_torque":
		i, ok := val.(interface{ SetConstantTorque(torque Vector3)  })
		if ok {
			return i.SetConstantTorque
		}
	case "_get_constant_torque":
		i, ok := val.(interface{ GetConstantTorque() Vector3 })
		if ok {
			return i.GetConstantTorque
		}
	case "_set_sleep_state":
		i, ok := val.(interface{ SetSleepState(enabled bool)  })
		if ok {
			return i.SetSleepState
		}
	case "_is_sleeping":
		i, ok := val.(interface{ IsSleeping() bool })
		if ok {
			return i.IsSleeping
		}
	case "_get_contact_count":
		i, ok := val.(interface{ GetContactCount() int64 })
		if ok {
			return i.GetContactCount
		}
	case "_get_contact_local_position":
		i, ok := val.(interface{ GetContactLocalPosition(contact_idx int64) Vector3 })
		if ok {
			return i.GetContactLocalPosition
		}
	case "_get_contact_local_normal":
		i, ok := val.(interface{ GetContactLocalNormal(contact_idx int64) Vector3 })
		if ok {
			return i.GetContactLocalNormal
		}
	case "_get_contact_impulse":
		i, ok := val.(interface{ GetContactImpulse(contact_idx int64) float64 })
		if ok {
			return i.GetContactImpulse
		}
	case "_get_contact_local_shape":
		i, ok := val.(interface{ GetContactLocalShape(contact_idx int64) int64 })
		if ok {
			return i.GetContactLocalShape
		}
	case "_get_contact_collider":
		i, ok := val.(interface{ GetContactCollider(contact_idx int64) RID })
		if ok {
			return i.GetContactCollider
		}
	case "_get_contact_collider_position":
		i, ok := val.(interface{ GetContactColliderPosition(contact_idx int64) Vector3 })
		if ok {
			return i.GetContactColliderPosition
		}
	case "_get_contact_collider_id":
		i, ok := val.(interface{ GetContactColliderId(contact_idx int64) int64 })
		if ok {
			return i.GetContactColliderId
		}
	case "_get_contact_collider_object":
		i, ok := val.(interface{ GetContactColliderObject(contact_idx int64) Object })
		if ok {
			return i.GetContactColliderObject
		}
	case "_get_contact_collider_shape":
		i, ok := val.(interface{ GetContactColliderShape(contact_idx int64) int64 })
		if ok {
			return i.GetContactColliderShape
		}
	case "_get_contact_collider_velocity_at_position":
		i, ok := val.(interface{ GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 })
		if ok {
			return i.GetContactColliderVelocityAtPosition
		}
	case "_get_step":
		i, ok := val.(interface{ GetStep() float64 })
		if ok {
			return i.GetStep
		}
	case "_integrate_forces":
		i, ok := val.(interface{ IntegrateForces()  })
		if ok {
			return i.IntegrateForces
		}
	case "_get_space_state":
		i, ok := val.(interface{ GetSpaceState() PhysicsDirectSpaceState3D })
		if ok {
			return i.GetSpaceState
		}
	}
	return nil
}

type PhysicsDirectSpaceState2D gdnative.Object
func (PhysicsDirectSpaceState2D) class() string { return "PhysicsDirectSpaceState2D\000" }

func (gdClass PhysicsDirectSpaceState2D) Object() Object { return Object(gdClass) }

var methodPhysicsDirectSpaceState2D [6]gdnative.Method
func (gdClass PhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[0], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[1], parameters) }
func (gdClass PhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[2], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[3], parameters) }
func (gdClass PhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[4], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState2D[5], parameters) }

type PhysicsDirectSpaceState3D gdnative.Object
func (PhysicsDirectSpaceState3D) class() string { return "PhysicsDirectSpaceState3D\000" }

func (gdClass PhysicsDirectSpaceState3D) Object() Object { return Object(gdClass) }

var methodPhysicsDirectSpaceState3D [6]gdnative.Method
func (gdClass PhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[0], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[1], parameters) }
func (gdClass PhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[2], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[3], parameters) }
func (gdClass PhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[4], parameters, max_results) }
func (gdClass PhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodPhysicsDirectSpaceState3D[5], parameters) }

type PhysicsDirectSpaceState3DExtension gdnative.Object
func (PhysicsDirectSpaceState3DExtension) class() string { return "PhysicsDirectSpaceState3DExtension\000" }

func (gdClass PhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3D() PhysicsDirectSpaceState3D { return PhysicsDirectSpaceState3D(gdClass) }

func (gdClass PhysicsDirectSpaceState3DExtension) virtual(val any, name string) any {	switch name {
	case "_intersect_ray":
		i, ok := val.(interface{ IntersectRay(from Vector3, to Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, hit_from_inside bool, hit_back_faces bool, result *PhysicsServer3DExtensionRayResult) bool })
		if ok {
			return i.IntersectRay
		}
	case "_intersect_point":
		i, ok := val.(interface{ IntersectPoint(position Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results *PhysicsServer3DExtensionShapeResult, max_results int64) int64 })
		if ok {
			return i.IntersectPoint
		}
	case "_intersect_shape":
		i, ok := val.(interface{ IntersectShape(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, result_count *PhysicsServer3DExtensionShapeResult, max_results int64) int64 })
		if ok {
			return i.IntersectShape
		}
	case "_cast_motion":
		i, ok := val.(interface{ CastMotion(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, closest_safe *float64, closest_unsafe *float64, info *PhysicsServer3DExtensionShapeRestInfo) bool })
		if ok {
			return i.CastMotion
		}
	case "_collide_shape":
		i, ok := val.(interface{ CollideShape(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results []byte, max_results int64, result_count *int32) bool })
		if ok {
			return i.CollideShape
		}
	case "_rest_info":
		i, ok := val.(interface{ RestInfo(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, rest_info *PhysicsServer3DExtensionShapeRestInfo) bool })
		if ok {
			return i.RestInfo
		}
	case "_get_closest_point_to_object_volume":
		i, ok := val.(interface{ GetClosestPointToObjectVolume(object RID, point Vector3) Vector3 })
		if ok {
			return i.GetClosestPointToObjectVolume
		}
	}
	return nil
}

type PhysicsMaterial gdnative.Object
func (PhysicsMaterial) class() string { return "PhysicsMaterial\000" }

func (gdClass PhysicsMaterial) Resource() Resource { return Resource(gdClass) }

var methodPhysicsMaterial [8]gdnative.Method
func (gdClass PhysicsMaterial) SetFriction(friction float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[0], friction) }
func (gdClass PhysicsMaterial) GetFriction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsMaterial[1]) }
func (gdClass PhysicsMaterial) SetRough(rough bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[2], rough) }
func (gdClass PhysicsMaterial) IsRough() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsMaterial[3]) }
func (gdClass PhysicsMaterial) SetBounce(bounce float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[4], bounce) }
func (gdClass PhysicsMaterial) GetBounce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsMaterial[5]) }
func (gdClass PhysicsMaterial) SetAbsorbent(absorbent bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsMaterial[6], absorbent) }
func (gdClass PhysicsMaterial) IsAbsorbent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsMaterial[7]) }

type PhysicsPointQueryParameters2D gdnative.Object
func (PhysicsPointQueryParameters2D) class() string { return "PhysicsPointQueryParameters2D\000" }

func (gdClass PhysicsPointQueryParameters2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsPointQueryParameters2D [12]gdnative.Method
func (gdClass PhysicsPointQueryParameters2D) SetPosition(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[0], position) }
func (gdClass PhysicsPointQueryParameters2D) GetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[1]) }
func (gdClass PhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[2], canvas_instance_id) }
func (gdClass PhysicsPointQueryParameters2D) GetCanvasInstanceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[3]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[4], collision_mask) }
func (gdClass PhysicsPointQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[5]) }
func (gdClass PhysicsPointQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[6], exclude) }
func (gdClass PhysicsPointQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[7]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[8], enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[9]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[10], enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters2D[11]) }

type PhysicsPointQueryParameters3D gdnative.Object
func (PhysicsPointQueryParameters3D) class() string { return "PhysicsPointQueryParameters3D\000" }

func (gdClass PhysicsPointQueryParameters3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsPointQueryParameters3D [10]gdnative.Method
func (gdClass PhysicsPointQueryParameters3D) SetPosition(position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[0], position) }
func (gdClass PhysicsPointQueryParameters3D) GetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[1]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[2], collision_mask) }
func (gdClass PhysicsPointQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[3]) }
func (gdClass PhysicsPointQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[4], exclude) }
func (gdClass PhysicsPointQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[5]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[6], enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[7]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[8], enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsPointQueryParameters3D[9]) }

type PhysicsRayQueryParameters2D gdnative.Object
func (PhysicsRayQueryParameters2D) class() string { return "PhysicsRayQueryParameters2D\000" }

func (gdClass PhysicsRayQueryParameters2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsRayQueryParameters2D [15]gdnative.Method
func (gdClass PhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask int64, exclude Array) PhysicsRayQueryParameters2D { return gdnative.Return[PhysicsRayQueryParameters2D](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[0], from, to, collision_mask, exclude) }
func (gdClass PhysicsRayQueryParameters2D) SetFrom(from Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[1], from) }
func (gdClass PhysicsRayQueryParameters2D) GetFrom() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[2]) }
func (gdClass PhysicsRayQueryParameters2D) SetTo(to Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[3], to) }
func (gdClass PhysicsRayQueryParameters2D) GetTo() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[4]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[5], collision_mask) }
func (gdClass PhysicsRayQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[6]) }
func (gdClass PhysicsRayQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[7], exclude) }
func (gdClass PhysicsRayQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[8]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[9], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[10]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[11], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[12]) }
func (gdClass PhysicsRayQueryParameters2D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[13], enable) }
func (gdClass PhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters2D[14]) }

type PhysicsRayQueryParameters3D gdnative.Object
func (PhysicsRayQueryParameters3D) class() string { return "PhysicsRayQueryParameters3D\000" }

func (gdClass PhysicsRayQueryParameters3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsRayQueryParameters3D [17]gdnative.Method
func (gdClass PhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask int64, exclude Array) PhysicsRayQueryParameters3D { return gdnative.Return[PhysicsRayQueryParameters3D](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[0], from, to, collision_mask, exclude) }
func (gdClass PhysicsRayQueryParameters3D) SetFrom(from Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[1], from) }
func (gdClass PhysicsRayQueryParameters3D) GetFrom() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[2]) }
func (gdClass PhysicsRayQueryParameters3D) SetTo(to Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[3], to) }
func (gdClass PhysicsRayQueryParameters3D) GetTo() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[4]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[5], collision_mask) }
func (gdClass PhysicsRayQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[6]) }
func (gdClass PhysicsRayQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[7], exclude) }
func (gdClass PhysicsRayQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[8]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[9], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[10]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[11], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[12]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[13], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[14]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitBackFaces(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[15], enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsRayQueryParameters3D[16]) }

type PhysicsServer2DSpaceParameter int64

const (
	PhysicsServer2DSpaceParamContactRecycleRadius PhysicsServer2DSpaceParameter = 0
	PhysicsServer2DSpaceParamContactMaxSeparation PhysicsServer2DSpaceParameter = 1
	PhysicsServer2DSpaceParamContactMaxAllowedPenetration PhysicsServer2DSpaceParameter = 2
	PhysicsServer2DSpaceParamContactDefaultBias PhysicsServer2DSpaceParameter = 3
	PhysicsServer2DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer2DSpaceParameter = 4
	PhysicsServer2DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer2DSpaceParameter = 5
	PhysicsServer2DSpaceParamBodyTimeToSleep PhysicsServer2DSpaceParameter = 6
	PhysicsServer2DSpaceParamConstraintDefaultBias PhysicsServer2DSpaceParameter = 7
	PhysicsServer2DSpaceParamSolverIterations PhysicsServer2DSpaceParameter = 8
)

type PhysicsServer2DShapeType int64

const (
	PhysicsServer2DShapeWorldBoundary PhysicsServer2DShapeType = 0
	PhysicsServer2DShapeSeparationRay PhysicsServer2DShapeType = 1
	PhysicsServer2DShapeSegment PhysicsServer2DShapeType = 2
	PhysicsServer2DShapeCircle PhysicsServer2DShapeType = 3
	PhysicsServer2DShapeRectangle PhysicsServer2DShapeType = 4
	PhysicsServer2DShapeCapsule PhysicsServer2DShapeType = 5
	PhysicsServer2DShapeConvexPolygon PhysicsServer2DShapeType = 6
	PhysicsServer2DShapeConcavePolygon PhysicsServer2DShapeType = 7
	PhysicsServer2DShapeCustom PhysicsServer2DShapeType = 8
)

type PhysicsServer2DAreaParameter int64

const (
	PhysicsServer2DAreaParamGravityOverrideMode PhysicsServer2DAreaParameter = 0
	PhysicsServer2DAreaParamGravity PhysicsServer2DAreaParameter = 1
	PhysicsServer2DAreaParamGravityVector PhysicsServer2DAreaParameter = 2
	PhysicsServer2DAreaParamGravityIsPoint PhysicsServer2DAreaParameter = 3
	PhysicsServer2DAreaParamGravityDistanceScale PhysicsServer2DAreaParameter = 4
	PhysicsServer2DAreaParamGravityPointAttenuation PhysicsServer2DAreaParameter = 5
	PhysicsServer2DAreaParamLinearDampOverrideMode PhysicsServer2DAreaParameter = 6
	PhysicsServer2DAreaParamLinearDamp PhysicsServer2DAreaParameter = 7
	PhysicsServer2DAreaParamAngularDampOverrideMode PhysicsServer2DAreaParameter = 8
	PhysicsServer2DAreaParamAngularDamp PhysicsServer2DAreaParameter = 9
	PhysicsServer2DAreaParamPriority PhysicsServer2DAreaParameter = 10
)

type PhysicsServer2DAreaSpaceOverrideMode int64

const (
	PhysicsServer2DAreaSpaceOverrideDisabled PhysicsServer2DAreaSpaceOverrideMode = 0
	PhysicsServer2DAreaSpaceOverrideCombine PhysicsServer2DAreaSpaceOverrideMode = 1
	PhysicsServer2DAreaSpaceOverrideCombineReplace PhysicsServer2DAreaSpaceOverrideMode = 2
	PhysicsServer2DAreaSpaceOverrideReplace PhysicsServer2DAreaSpaceOverrideMode = 3
	PhysicsServer2DAreaSpaceOverrideReplaceCombine PhysicsServer2DAreaSpaceOverrideMode = 4
)

type PhysicsServer2DBodyMode int64

const (
	PhysicsServer2DBodyModeStatic PhysicsServer2DBodyMode = 0
	PhysicsServer2DBodyModeKinematic PhysicsServer2DBodyMode = 1
	PhysicsServer2DBodyModeDynamic PhysicsServer2DBodyMode = 2
	PhysicsServer2DBodyModeDynamicLinear PhysicsServer2DBodyMode = 3
)

type PhysicsServer2DBodyParameter int64

const (
	PhysicsServer2DBodyParamBounce PhysicsServer2DBodyParameter = 0
	PhysicsServer2DBodyParamFriction PhysicsServer2DBodyParameter = 1
	PhysicsServer2DBodyParamMass PhysicsServer2DBodyParameter = 2
	PhysicsServer2DBodyParamInertia PhysicsServer2DBodyParameter = 3
	PhysicsServer2DBodyParamCenterOfMass PhysicsServer2DBodyParameter = 4
	PhysicsServer2DBodyParamGravityScale PhysicsServer2DBodyParameter = 5
	PhysicsServer2DBodyParamLinearDampMode PhysicsServer2DBodyParameter = 6
	PhysicsServer2DBodyParamAngularDampMode PhysicsServer2DBodyParameter = 7
	PhysicsServer2DBodyParamLinearDamp PhysicsServer2DBodyParameter = 8
	PhysicsServer2DBodyParamAngularDamp PhysicsServer2DBodyParameter = 9
	PhysicsServer2DBodyParamMax PhysicsServer2DBodyParameter = 10
)

type PhysicsServer2DBodyDampMode int64

const (
	PhysicsServer2DBodyDampModeCombine PhysicsServer2DBodyDampMode = 0
	PhysicsServer2DBodyDampModeReplace PhysicsServer2DBodyDampMode = 1
)

type PhysicsServer2DBodyState int64

const (
	PhysicsServer2DBodyStateTransform PhysicsServer2DBodyState = 0
	PhysicsServer2DBodyStateLinearVelocity PhysicsServer2DBodyState = 1
	PhysicsServer2DBodyStateAngularVelocity PhysicsServer2DBodyState = 2
	PhysicsServer2DBodyStateSleeping PhysicsServer2DBodyState = 3
	PhysicsServer2DBodyStateCanSleep PhysicsServer2DBodyState = 4
)

type PhysicsServer2DJointType int64

const (
	PhysicsServer2DJointTypePin PhysicsServer2DJointType = 0
	PhysicsServer2DJointTypeGroove PhysicsServer2DJointType = 1
	PhysicsServer2DJointTypeDampedSpring PhysicsServer2DJointType = 2
	PhysicsServer2DJointTypeMax PhysicsServer2DJointType = 3
)

type PhysicsServer2DJointParam int64

const (
	PhysicsServer2DJointParamBias PhysicsServer2DJointParam = 0
	PhysicsServer2DJointParamMaxBias PhysicsServer2DJointParam = 1
	PhysicsServer2DJointParamMaxForce PhysicsServer2DJointParam = 2
)

type PhysicsServer2DDampedSpringParam int64

const (
	PhysicsServer2DDampedSpringRestLength PhysicsServer2DDampedSpringParam = 0
	PhysicsServer2DDampedSpringStiffness PhysicsServer2DDampedSpringParam = 1
	PhysicsServer2DDampedSpringDamping PhysicsServer2DDampedSpringParam = 2
)

type PhysicsServer2DCCDMode int64

const (
	PhysicsServer2DCcdModeDisabled PhysicsServer2DCCDMode = 0
	PhysicsServer2DCcdModeCastRay PhysicsServer2DCCDMode = 1
	PhysicsServer2DCcdModeCastShape PhysicsServer2DCCDMode = 2
)

type PhysicsServer2DAreaBodyStatus int64

const (
	PhysicsServer2DAreaBodyAdded PhysicsServer2DAreaBodyStatus = 0
	PhysicsServer2DAreaBodyRemoved PhysicsServer2DAreaBodyStatus = 1
)

type PhysicsServer2DProcessInfo int64

const (
	PhysicsServer2DInfoActiveObjects PhysicsServer2DProcessInfo = 0
	PhysicsServer2DInfoCollisionPairs PhysicsServer2DProcessInfo = 1
	PhysicsServer2DInfoIslandCount PhysicsServer2DProcessInfo = 2
)

type PhysicsServer2D gdnative.Object
func (PhysicsServer2D) class() string { return "PhysicsServer2D\000" }

func (gdClass PhysicsServer2D) Object() Object { return Object(gdClass) }

var methodPhysicsServer2D [108]gdnative.Method
func (gdClass PhysicsServer2D) WorldBoundaryShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[0]) }
func (gdClass PhysicsServer2D) SeparationRayShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[1]) }
func (gdClass PhysicsServer2D) SegmentShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[2]) }
func (gdClass PhysicsServer2D) CircleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[3]) }
func (gdClass PhysicsServer2D) RectangleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[4]) }
func (gdClass PhysicsServer2D) CapsuleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[5]) }
func (gdClass PhysicsServer2D) ConvexPolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[6]) }
func (gdClass PhysicsServer2D) ConcavePolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[7]) }
func (gdClass PhysicsServer2D) ShapeSetData(shape RID, data any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[8], shape, data) }
func (gdClass PhysicsServer2D) ShapeGetType(shape RID) PhysicsServer2DShapeType { return gdnative.Return[PhysicsServer2DShapeType](gdnative.Object(gdClass), methodPhysicsServer2D[9], shape) }
func (gdClass PhysicsServer2D) ShapeGetData(shape RID) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[10], shape) }
func (gdClass PhysicsServer2D) SpaceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[11]) }
func (gdClass PhysicsServer2D) SpaceSetActive(space RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[12], space, active) }
func (gdClass PhysicsServer2D) SpaceIsActive(space RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[13], space) }
func (gdClass PhysicsServer2D) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[14], space, param, value) }
func (gdClass PhysicsServer2D) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[15], space, param) }
func (gdClass PhysicsServer2D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodPhysicsServer2D[16], space) }
func (gdClass PhysicsServer2D) AreaCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[17]) }
func (gdClass PhysicsServer2D) AreaSetSpace(area RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[18], area, space) }
func (gdClass PhysicsServer2D) AreaGetSpace(area RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[19], area) }
func (gdClass PhysicsServer2D) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[20], area, shape, transform, disabled) }
func (gdClass PhysicsServer2D) AreaSetShape(area RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[21], area, shape_idx, shape) }
func (gdClass PhysicsServer2D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[22], area, shape_idx, transform) }
func (gdClass PhysicsServer2D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[23], area, shape_idx, disabled) }
func (gdClass PhysicsServer2D) AreaGetShapeCount(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[24], area) }
func (gdClass PhysicsServer2D) AreaGetShape(area RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[25], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaGetShapeTransform(area RID, shape_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[26], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaRemoveShape(area RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[27], area, shape_idx) }
func (gdClass PhysicsServer2D) AreaClearShapes(area RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[28], area) }
func (gdClass PhysicsServer2D) AreaSetCollisionLayer(area RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[29], area, layer) }
func (gdClass PhysicsServer2D) AreaSetCollisionMask(area RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[30], area, mask) }
func (gdClass PhysicsServer2D) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[31], area, param, value) }
func (gdClass PhysicsServer2D) AreaSetTransform(area RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[32], area, transform) }
func (gdClass PhysicsServer2D) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[33], area, param) }
func (gdClass PhysicsServer2D) AreaGetTransform(area RID) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[34], area) }
func (gdClass PhysicsServer2D) AreaAttachObjectInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[35], area, id) }
func (gdClass PhysicsServer2D) AreaGetObjectInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[36], area) }
func (gdClass PhysicsServer2D) AreaAttachCanvasInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[37], area, id) }
func (gdClass PhysicsServer2D) AreaGetCanvasInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[38], area) }
func (gdClass PhysicsServer2D) AreaSetMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[39], area, callback) }
func (gdClass PhysicsServer2D) AreaSetAreaMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[40], area, callback) }
func (gdClass PhysicsServer2D) AreaSetMonitorable(area RID, monitorable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[41], area, monitorable) }
func (gdClass PhysicsServer2D) BodyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[42]) }
func (gdClass PhysicsServer2D) BodySetSpace(body RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[43], body, space) }
func (gdClass PhysicsServer2D) BodyGetSpace(body RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[44], body) }
func (gdClass PhysicsServer2D) BodySetMode(body RID, mode PhysicsServer2DBodyMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[45], body, mode) }
func (gdClass PhysicsServer2D) BodyGetMode(body RID) PhysicsServer2DBodyMode { return gdnative.Return[PhysicsServer2DBodyMode](gdnative.Object(gdClass), methodPhysicsServer2D[46], body) }
func (gdClass PhysicsServer2D) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[47], body, shape, transform, disabled) }
func (gdClass PhysicsServer2D) BodySetShape(body RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[48], body, shape_idx, shape) }
func (gdClass PhysicsServer2D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[49], body, shape_idx, transform) }
func (gdClass PhysicsServer2D) BodyGetShapeCount(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[50], body) }
func (gdClass PhysicsServer2D) BodyGetShape(body RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[51], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyGetShapeTransform(body RID, shape_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsServer2D[52], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyRemoveShape(body RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[53], body, shape_idx) }
func (gdClass PhysicsServer2D) BodyClearShapes(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[54], body) }
func (gdClass PhysicsServer2D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[55], body, shape_idx, disabled) }
func (gdClass PhysicsServer2D) BodySetShapeAsOneWayCollision(body RID, shape_idx int64, enable bool, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[56], body, shape_idx, enable, margin) }
func (gdClass PhysicsServer2D) BodyAttachObjectInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[57], body, id) }
func (gdClass PhysicsServer2D) BodyGetObjectInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[58], body) }
func (gdClass PhysicsServer2D) BodyAttachCanvasInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[59], body, id) }
func (gdClass PhysicsServer2D) BodyGetCanvasInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[60], body) }
func (gdClass PhysicsServer2D) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[61], body, mode) }
func (gdClass PhysicsServer2D) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode { return gdnative.Return[PhysicsServer2DCCDMode](gdnative.Object(gdClass), methodPhysicsServer2D[62], body) }
func (gdClass PhysicsServer2D) BodySetCollisionLayer(body RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[63], body, layer) }
func (gdClass PhysicsServer2D) BodyGetCollisionLayer(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[64], body) }
func (gdClass PhysicsServer2D) BodySetCollisionMask(body RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[65], body, mask) }
func (gdClass PhysicsServer2D) BodyGetCollisionMask(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[66], body) }
func (gdClass PhysicsServer2D) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[67], body, param, value) }
func (gdClass PhysicsServer2D) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[68], body, param) }
func (gdClass PhysicsServer2D) BodyResetMassProperties(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[69], body) }
func (gdClass PhysicsServer2D) BodySetState(body RID, state PhysicsServer2DBodyState, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[70], body, state, value) }
func (gdClass PhysicsServer2D) BodyGetState(body RID, state PhysicsServer2DBodyState) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer2D[71], body, state) }
func (gdClass PhysicsServer2D) BodyApplyCentralImpulse(body RID, impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[72], body, impulse) }
func (gdClass PhysicsServer2D) BodyApplyTorqueImpulse(body RID, impulse float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[73], body, impulse) }
func (gdClass PhysicsServer2D) BodyApplyImpulse(body RID, impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[74], body, impulse, position) }
func (gdClass PhysicsServer2D) BodyApplyCentralForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[75], body, force) }
func (gdClass PhysicsServer2D) BodyApplyForce(body RID, force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[76], body, force, position) }
func (gdClass PhysicsServer2D) BodyApplyTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[77], body, torque) }
func (gdClass PhysicsServer2D) BodyAddConstantCentralForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[78], body, force) }
func (gdClass PhysicsServer2D) BodyAddConstantForce(body RID, force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[79], body, force, position) }
func (gdClass PhysicsServer2D) BodyAddConstantTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[80], body, torque) }
func (gdClass PhysicsServer2D) BodySetConstantForce(body RID, force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[81], body, force) }
func (gdClass PhysicsServer2D) BodyGetConstantForce(body RID) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsServer2D[82], body) }
func (gdClass PhysicsServer2D) BodySetConstantTorque(body RID, torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[83], body, torque) }
func (gdClass PhysicsServer2D) BodyGetConstantTorque(body RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[84], body) }
func (gdClass PhysicsServer2D) BodySetAxisVelocity(body RID, axis_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[85], body, axis_velocity) }
func (gdClass PhysicsServer2D) BodyAddCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[86], body, excepted_body) }
func (gdClass PhysicsServer2D) BodyRemoveCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[87], body, excepted_body) }
func (gdClass PhysicsServer2D) BodySetMaxContactsReported(body RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[88], body, amount) }
func (gdClass PhysicsServer2D) BodyGetMaxContactsReported(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[89], body) }
func (gdClass PhysicsServer2D) BodySetOmitForceIntegration(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[90], body, enable) }
func (gdClass PhysicsServer2D) BodyIsOmittingForceIntegration(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[91], body) }
func (gdClass PhysicsServer2D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[92], body, callable, userdata) }
func (gdClass PhysicsServer2D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer2D[93], body, parameters, result) }
func (gdClass PhysicsServer2D) BodyGetDirectState(body RID) PhysicsDirectBodyState2D { return gdnative.Return[PhysicsDirectBodyState2D](gdnative.Object(gdClass), methodPhysicsServer2D[94], body) }
func (gdClass PhysicsServer2D) JointCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer2D[95]) }
func (gdClass PhysicsServer2D) JointClear(joint RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[96], joint) }
func (gdClass PhysicsServer2D) JointSetParam(joint RID, param PhysicsServer2DJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[97], joint, param, value) }
func (gdClass PhysicsServer2D) JointGetParam(joint RID, param PhysicsServer2DJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[98], joint, param) }
func (gdClass PhysicsServer2D) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[99], joint, anchor, body_a, body_b) }
func (gdClass PhysicsServer2D) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[100], joint, groove1_a, groove2_a, anchor_b, body_a, body_b) }
func (gdClass PhysicsServer2D) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[101], joint, anchor_a, anchor_b, body_a, body_b) }
func (gdClass PhysicsServer2D) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[102], joint, param, value) }
func (gdClass PhysicsServer2D) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer2D[103], joint, param) }
func (gdClass PhysicsServer2D) JointGetType(joint RID) PhysicsServer2DJointType { return gdnative.Return[PhysicsServer2DJointType](gdnative.Object(gdClass), methodPhysicsServer2D[104], joint) }
func (gdClass PhysicsServer2D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[105], rid) }
func (gdClass PhysicsServer2D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer2D[106], active) }
func (gdClass PhysicsServer2D) GetProcessInfo(process_info PhysicsServer2DProcessInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer2D[107], process_info) }

type PhysicsServer3DJointType int64

const (
	PhysicsServer3DJointTypePin PhysicsServer3DJointType = 0
	PhysicsServer3DJointTypeHinge PhysicsServer3DJointType = 1
	PhysicsServer3DJointTypeSlider PhysicsServer3DJointType = 2
	PhysicsServer3DJointTypeConeTwist PhysicsServer3DJointType = 3
	PhysicsServer3DJointType6dof PhysicsServer3DJointType = 4
	PhysicsServer3DJointTypeMax PhysicsServer3DJointType = 5
)

type PhysicsServer3DPinJointParam int64

const (
	PhysicsServer3DPinJointBias PhysicsServer3DPinJointParam = 0
	PhysicsServer3DPinJointDamping PhysicsServer3DPinJointParam = 1
	PhysicsServer3DPinJointImpulseClamp PhysicsServer3DPinJointParam = 2
)

type PhysicsServer3DHingeJointParam int64

const (
	PhysicsServer3DHingeJointBias PhysicsServer3DHingeJointParam = 0
	PhysicsServer3DHingeJointLimitUpper PhysicsServer3DHingeJointParam = 1
	PhysicsServer3DHingeJointLimitLower PhysicsServer3DHingeJointParam = 2
	PhysicsServer3DHingeJointLimitBias PhysicsServer3DHingeJointParam = 3
	PhysicsServer3DHingeJointLimitSoftness PhysicsServer3DHingeJointParam = 4
	PhysicsServer3DHingeJointLimitRelaxation PhysicsServer3DHingeJointParam = 5
	PhysicsServer3DHingeJointMotorTargetVelocity PhysicsServer3DHingeJointParam = 6
	PhysicsServer3DHingeJointMotorMaxImpulse PhysicsServer3DHingeJointParam = 7
)

type PhysicsServer3DHingeJointFlag int64

const (
	PhysicsServer3DHingeJointFlagUseLimit PhysicsServer3DHingeJointFlag = 0
	PhysicsServer3DHingeJointFlagEnableMotor PhysicsServer3DHingeJointFlag = 1
)

type PhysicsServer3DSliderJointParam int64

const (
	PhysicsServer3DSliderJointLinearLimitUpper PhysicsServer3DSliderJointParam = 0
	PhysicsServer3DSliderJointLinearLimitLower PhysicsServer3DSliderJointParam = 1
	PhysicsServer3DSliderJointLinearLimitSoftness PhysicsServer3DSliderJointParam = 2
	PhysicsServer3DSliderJointLinearLimitRestitution PhysicsServer3DSliderJointParam = 3
	PhysicsServer3DSliderJointLinearLimitDamping PhysicsServer3DSliderJointParam = 4
	PhysicsServer3DSliderJointLinearMotionSoftness PhysicsServer3DSliderJointParam = 5
	PhysicsServer3DSliderJointLinearMotionRestitution PhysicsServer3DSliderJointParam = 6
	PhysicsServer3DSliderJointLinearMotionDamping PhysicsServer3DSliderJointParam = 7
	PhysicsServer3DSliderJointLinearOrthogonalSoftness PhysicsServer3DSliderJointParam = 8
	PhysicsServer3DSliderJointLinearOrthogonalRestitution PhysicsServer3DSliderJointParam = 9
	PhysicsServer3DSliderJointLinearOrthogonalDamping PhysicsServer3DSliderJointParam = 10
	PhysicsServer3DSliderJointAngularLimitUpper PhysicsServer3DSliderJointParam = 11
	PhysicsServer3DSliderJointAngularLimitLower PhysicsServer3DSliderJointParam = 12
	PhysicsServer3DSliderJointAngularLimitSoftness PhysicsServer3DSliderJointParam = 13
	PhysicsServer3DSliderJointAngularLimitRestitution PhysicsServer3DSliderJointParam = 14
	PhysicsServer3DSliderJointAngularLimitDamping PhysicsServer3DSliderJointParam = 15
	PhysicsServer3DSliderJointAngularMotionSoftness PhysicsServer3DSliderJointParam = 16
	PhysicsServer3DSliderJointAngularMotionRestitution PhysicsServer3DSliderJointParam = 17
	PhysicsServer3DSliderJointAngularMotionDamping PhysicsServer3DSliderJointParam = 18
	PhysicsServer3DSliderJointAngularOrthogonalSoftness PhysicsServer3DSliderJointParam = 19
	PhysicsServer3DSliderJointAngularOrthogonalRestitution PhysicsServer3DSliderJointParam = 20
	PhysicsServer3DSliderJointAngularOrthogonalDamping PhysicsServer3DSliderJointParam = 21
	PhysicsServer3DSliderJointMax PhysicsServer3DSliderJointParam = 22
)

type PhysicsServer3DConeTwistJointParam int64

const (
	PhysicsServer3DConeTwistJointSwingSpan PhysicsServer3DConeTwistJointParam = 0
	PhysicsServer3DConeTwistJointTwistSpan PhysicsServer3DConeTwistJointParam = 1
	PhysicsServer3DConeTwistJointBias PhysicsServer3DConeTwistJointParam = 2
	PhysicsServer3DConeTwistJointSoftness PhysicsServer3DConeTwistJointParam = 3
	PhysicsServer3DConeTwistJointRelaxation PhysicsServer3DConeTwistJointParam = 4
)

type PhysicsServer3DG6DOFJointAxisParam int64

const (
	PhysicsServer3DG6dofJointLinearLowerLimit PhysicsServer3DG6DOFJointAxisParam = 0
	PhysicsServer3DG6dofJointLinearUpperLimit PhysicsServer3DG6DOFJointAxisParam = 1
	PhysicsServer3DG6dofJointLinearLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 2
	PhysicsServer3DG6dofJointLinearRestitution PhysicsServer3DG6DOFJointAxisParam = 3
	PhysicsServer3DG6dofJointLinearDamping PhysicsServer3DG6DOFJointAxisParam = 4
	PhysicsServer3DG6dofJointLinearMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 5
	PhysicsServer3DG6dofJointLinearMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 6
	PhysicsServer3DG6dofJointAngularLowerLimit PhysicsServer3DG6DOFJointAxisParam = 10
	PhysicsServer3DG6dofJointAngularUpperLimit PhysicsServer3DG6DOFJointAxisParam = 11
	PhysicsServer3DG6dofJointAngularLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 12
	PhysicsServer3DG6dofJointAngularDamping PhysicsServer3DG6DOFJointAxisParam = 13
	PhysicsServer3DG6dofJointAngularRestitution PhysicsServer3DG6DOFJointAxisParam = 14
	PhysicsServer3DG6dofJointAngularForceLimit PhysicsServer3DG6DOFJointAxisParam = 15
	PhysicsServer3DG6dofJointAngularErp PhysicsServer3DG6DOFJointAxisParam = 16
	PhysicsServer3DG6dofJointAngularMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 17
	PhysicsServer3DG6dofJointAngularMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 18
)

type PhysicsServer3DG6DOFJointAxisFlag int64

const (
	PhysicsServer3DG6dofJointFlagEnableLinearLimit PhysicsServer3DG6DOFJointAxisFlag = 0
	PhysicsServer3DG6dofJointFlagEnableAngularLimit PhysicsServer3DG6DOFJointAxisFlag = 1
	PhysicsServer3DG6dofJointFlagEnableMotor PhysicsServer3DG6DOFJointAxisFlag = 4
	PhysicsServer3DG6dofJointFlagEnableLinearMotor PhysicsServer3DG6DOFJointAxisFlag = 5
)

type PhysicsServer3DShapeType int64

const (
	PhysicsServer3DShapeWorldBoundary PhysicsServer3DShapeType = 0
	PhysicsServer3DShapeSeparationRay PhysicsServer3DShapeType = 1
	PhysicsServer3DShapeSphere PhysicsServer3DShapeType = 2
	PhysicsServer3DShapeBox PhysicsServer3DShapeType = 3
	PhysicsServer3DShapeCapsule PhysicsServer3DShapeType = 4
	PhysicsServer3DShapeCylinder PhysicsServer3DShapeType = 5
	PhysicsServer3DShapeConvexPolygon PhysicsServer3DShapeType = 6
	PhysicsServer3DShapeConcavePolygon PhysicsServer3DShapeType = 7
	PhysicsServer3DShapeHeightmap PhysicsServer3DShapeType = 8
	PhysicsServer3DShapeSoftBody PhysicsServer3DShapeType = 9
	PhysicsServer3DShapeCustom PhysicsServer3DShapeType = 10
)

type PhysicsServer3DAreaParameter int64

const (
	PhysicsServer3DAreaParamGravityOverrideMode PhysicsServer3DAreaParameter = 0
	PhysicsServer3DAreaParamGravity PhysicsServer3DAreaParameter = 1
	PhysicsServer3DAreaParamGravityVector PhysicsServer3DAreaParameter = 2
	PhysicsServer3DAreaParamGravityIsPoint PhysicsServer3DAreaParameter = 3
	PhysicsServer3DAreaParamGravityDistanceScale PhysicsServer3DAreaParameter = 4
	PhysicsServer3DAreaParamGravityPointAttenuation PhysicsServer3DAreaParameter = 5
	PhysicsServer3DAreaParamLinearDampOverrideMode PhysicsServer3DAreaParameter = 6
	PhysicsServer3DAreaParamLinearDamp PhysicsServer3DAreaParameter = 7
	PhysicsServer3DAreaParamAngularDampOverrideMode PhysicsServer3DAreaParameter = 8
	PhysicsServer3DAreaParamAngularDamp PhysicsServer3DAreaParameter = 9
	PhysicsServer3DAreaParamPriority PhysicsServer3DAreaParameter = 10
	PhysicsServer3DAreaParamWindForceMagnitude PhysicsServer3DAreaParameter = 11
	PhysicsServer3DAreaParamWindSource PhysicsServer3DAreaParameter = 12
	PhysicsServer3DAreaParamWindDirection PhysicsServer3DAreaParameter = 13
	PhysicsServer3DAreaParamWindAttenuationFactor PhysicsServer3DAreaParameter = 14
)

type PhysicsServer3DAreaSpaceOverrideMode int64

const (
	PhysicsServer3DAreaSpaceOverrideDisabled PhysicsServer3DAreaSpaceOverrideMode = 0
	PhysicsServer3DAreaSpaceOverrideCombine PhysicsServer3DAreaSpaceOverrideMode = 1
	PhysicsServer3DAreaSpaceOverrideCombineReplace PhysicsServer3DAreaSpaceOverrideMode = 2
	PhysicsServer3DAreaSpaceOverrideReplace PhysicsServer3DAreaSpaceOverrideMode = 3
	PhysicsServer3DAreaSpaceOverrideReplaceCombine PhysicsServer3DAreaSpaceOverrideMode = 4
)

type PhysicsServer3DBodyMode int64

const (
	PhysicsServer3DBodyModeStatic PhysicsServer3DBodyMode = 0
	PhysicsServer3DBodyModeKinematic PhysicsServer3DBodyMode = 1
	PhysicsServer3DBodyModeDynamic PhysicsServer3DBodyMode = 2
	PhysicsServer3DBodyModeDynamicLinear PhysicsServer3DBodyMode = 3
)

type PhysicsServer3DBodyParameter int64

const (
	PhysicsServer3DBodyParamBounce PhysicsServer3DBodyParameter = 0
	PhysicsServer3DBodyParamFriction PhysicsServer3DBodyParameter = 1
	PhysicsServer3DBodyParamMass PhysicsServer3DBodyParameter = 2
	PhysicsServer3DBodyParamInertia PhysicsServer3DBodyParameter = 3
	PhysicsServer3DBodyParamCenterOfMass PhysicsServer3DBodyParameter = 4
	PhysicsServer3DBodyParamGravityScale PhysicsServer3DBodyParameter = 5
	PhysicsServer3DBodyParamLinearDampMode PhysicsServer3DBodyParameter = 6
	PhysicsServer3DBodyParamAngularDampMode PhysicsServer3DBodyParameter = 7
	PhysicsServer3DBodyParamLinearDamp PhysicsServer3DBodyParameter = 8
	PhysicsServer3DBodyParamAngularDamp PhysicsServer3DBodyParameter = 9
	PhysicsServer3DBodyParamMax PhysicsServer3DBodyParameter = 10
)

type PhysicsServer3DBodyDampMode int64

const (
	PhysicsServer3DBodyDampModeCombine PhysicsServer3DBodyDampMode = 0
	PhysicsServer3DBodyDampModeReplace PhysicsServer3DBodyDampMode = 1
)

type PhysicsServer3DBodyState int64

const (
	PhysicsServer3DBodyStateTransform PhysicsServer3DBodyState = 0
	PhysicsServer3DBodyStateLinearVelocity PhysicsServer3DBodyState = 1
	PhysicsServer3DBodyStateAngularVelocity PhysicsServer3DBodyState = 2
	PhysicsServer3DBodyStateSleeping PhysicsServer3DBodyState = 3
	PhysicsServer3DBodyStateCanSleep PhysicsServer3DBodyState = 4
)

type PhysicsServer3DAreaBodyStatus int64

const (
	PhysicsServer3DAreaBodyAdded PhysicsServer3DAreaBodyStatus = 0
	PhysicsServer3DAreaBodyRemoved PhysicsServer3DAreaBodyStatus = 1
)

type PhysicsServer3DProcessInfo int64

const (
	PhysicsServer3DInfoActiveObjects PhysicsServer3DProcessInfo = 0
	PhysicsServer3DInfoCollisionPairs PhysicsServer3DProcessInfo = 1
	PhysicsServer3DInfoIslandCount PhysicsServer3DProcessInfo = 2
)

type PhysicsServer3DSpaceParameter int64

const (
	PhysicsServer3DSpaceParamContactRecycleRadius PhysicsServer3DSpaceParameter = 0
	PhysicsServer3DSpaceParamContactMaxSeparation PhysicsServer3DSpaceParameter = 1
	PhysicsServer3DSpaceParamContactMaxAllowedPenetration PhysicsServer3DSpaceParameter = 2
	PhysicsServer3DSpaceParamContactDefaultBias PhysicsServer3DSpaceParameter = 3
	PhysicsServer3DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer3DSpaceParameter = 4
	PhysicsServer3DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer3DSpaceParameter = 5
	PhysicsServer3DSpaceParamBodyTimeToSleep PhysicsServer3DSpaceParameter = 6
	PhysicsServer3DSpaceParamSolverIterations PhysicsServer3DSpaceParameter = 7
)

type PhysicsServer3DBodyAxis int64

const (
	PhysicsServer3DBodyAxisLinearX PhysicsServer3DBodyAxis = 1
	PhysicsServer3DBodyAxisLinearY PhysicsServer3DBodyAxis = 2
	PhysicsServer3DBodyAxisLinearZ PhysicsServer3DBodyAxis = 4
	PhysicsServer3DBodyAxisAngularX PhysicsServer3DBodyAxis = 8
	PhysicsServer3DBodyAxisAngularY PhysicsServer3DBodyAxis = 16
	PhysicsServer3DBodyAxisAngularZ PhysicsServer3DBodyAxis = 32
)

type PhysicsServer3D gdnative.Object
func (PhysicsServer3D) class() string { return "PhysicsServer3D\000" }

func (gdClass PhysicsServer3D) Object() Object { return Object(gdClass) }

var methodPhysicsServer3D [128]gdnative.Method
func (gdClass PhysicsServer3D) WorldBoundaryShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[0]) }
func (gdClass PhysicsServer3D) SeparationRayShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[1]) }
func (gdClass PhysicsServer3D) SphereShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[2]) }
func (gdClass PhysicsServer3D) BoxShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[3]) }
func (gdClass PhysicsServer3D) CapsuleShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[4]) }
func (gdClass PhysicsServer3D) CylinderShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[5]) }
func (gdClass PhysicsServer3D) ConvexPolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[6]) }
func (gdClass PhysicsServer3D) ConcavePolygonShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[7]) }
func (gdClass PhysicsServer3D) HeightmapShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[8]) }
func (gdClass PhysicsServer3D) CustomShapeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[9]) }
func (gdClass PhysicsServer3D) ShapeSetData(shape RID, data any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[10], shape, data) }
func (gdClass PhysicsServer3D) ShapeGetType(shape RID) PhysicsServer3DShapeType { return gdnative.Return[PhysicsServer3DShapeType](gdnative.Object(gdClass), methodPhysicsServer3D[11], shape) }
func (gdClass PhysicsServer3D) ShapeGetData(shape RID) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[12], shape) }
func (gdClass PhysicsServer3D) SpaceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[13]) }
func (gdClass PhysicsServer3D) SpaceSetActive(space RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[14], space, active) }
func (gdClass PhysicsServer3D) SpaceIsActive(space RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[15], space) }
func (gdClass PhysicsServer3D) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[16], space, param, value) }
func (gdClass PhysicsServer3D) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[17], space, param) }
func (gdClass PhysicsServer3D) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodPhysicsServer3D[18], space) }
func (gdClass PhysicsServer3D) AreaCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[19]) }
func (gdClass PhysicsServer3D) AreaSetSpace(area RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[20], area, space) }
func (gdClass PhysicsServer3D) AreaGetSpace(area RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[21], area) }
func (gdClass PhysicsServer3D) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[22], area, shape, transform, disabled) }
func (gdClass PhysicsServer3D) AreaSetShape(area RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[23], area, shape_idx, shape) }
func (gdClass PhysicsServer3D) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[24], area, shape_idx, transform) }
func (gdClass PhysicsServer3D) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[25], area, shape_idx, disabled) }
func (gdClass PhysicsServer3D) AreaGetShapeCount(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[26], area) }
func (gdClass PhysicsServer3D) AreaGetShape(area RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[27], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaGetShapeTransform(area RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[28], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaRemoveShape(area RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[29], area, shape_idx) }
func (gdClass PhysicsServer3D) AreaClearShapes(area RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[30], area) }
func (gdClass PhysicsServer3D) AreaSetCollisionLayer(area RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[31], area, layer) }
func (gdClass PhysicsServer3D) AreaSetCollisionMask(area RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[32], area, mask) }
func (gdClass PhysicsServer3D) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[33], area, param, value) }
func (gdClass PhysicsServer3D) AreaSetTransform(area RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[34], area, transform) }
func (gdClass PhysicsServer3D) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[35], area, param) }
func (gdClass PhysicsServer3D) AreaGetTransform(area RID) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[36], area) }
func (gdClass PhysicsServer3D) AreaAttachObjectInstanceId(area RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[37], area, id) }
func (gdClass PhysicsServer3D) AreaGetObjectInstanceId(area RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[38], area) }
func (gdClass PhysicsServer3D) AreaSetMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[39], area, callback) }
func (gdClass PhysicsServer3D) AreaSetAreaMonitorCallback(area RID, callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[40], area, callback) }
func (gdClass PhysicsServer3D) AreaSetMonitorable(area RID, monitorable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[41], area, monitorable) }
func (gdClass PhysicsServer3D) AreaSetRayPickable(area RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[42], area, enable) }
func (gdClass PhysicsServer3D) BodyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[43]) }
func (gdClass PhysicsServer3D) BodySetSpace(body RID, space RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[44], body, space) }
func (gdClass PhysicsServer3D) BodyGetSpace(body RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[45], body) }
func (gdClass PhysicsServer3D) BodySetMode(body RID, mode PhysicsServer3DBodyMode)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[46], body, mode) }
func (gdClass PhysicsServer3D) BodyGetMode(body RID) PhysicsServer3DBodyMode { return gdnative.Return[PhysicsServer3DBodyMode](gdnative.Object(gdClass), methodPhysicsServer3D[47], body) }
func (gdClass PhysicsServer3D) BodySetCollisionLayer(body RID, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[48], body, layer) }
func (gdClass PhysicsServer3D) BodyGetCollisionLayer(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[49], body) }
func (gdClass PhysicsServer3D) BodySetCollisionMask(body RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[50], body, mask) }
func (gdClass PhysicsServer3D) BodyGetCollisionMask(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[51], body) }
func (gdClass PhysicsServer3D) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[52], body, shape, transform, disabled) }
func (gdClass PhysicsServer3D) BodySetShape(body RID, shape_idx int64, shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[53], body, shape_idx, shape) }
func (gdClass PhysicsServer3D) BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[54], body, shape_idx, transform) }
func (gdClass PhysicsServer3D) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[55], body, shape_idx, disabled) }
func (gdClass PhysicsServer3D) BodyGetShapeCount(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[56], body) }
func (gdClass PhysicsServer3D) BodyGetShape(body RID, shape_idx int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[57], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyGetShapeTransform(body RID, shape_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsServer3D[58], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyRemoveShape(body RID, shape_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[59], body, shape_idx) }
func (gdClass PhysicsServer3D) BodyClearShapes(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[60], body) }
func (gdClass PhysicsServer3D) BodyAttachObjectInstanceId(body RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[61], body, id) }
func (gdClass PhysicsServer3D) BodyGetObjectInstanceId(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[62], body) }
func (gdClass PhysicsServer3D) BodySetEnableContinuousCollisionDetection(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[63], body, enable) }
func (gdClass PhysicsServer3D) BodyIsContinuousCollisionDetectionEnabled(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[64], body) }
func (gdClass PhysicsServer3D) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[65], body, param, value) }
func (gdClass PhysicsServer3D) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[66], body, param) }
func (gdClass PhysicsServer3D) BodyResetMassProperties(body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[67], body) }
func (gdClass PhysicsServer3D) BodySetState(body RID, state PhysicsServer3DBodyState, value any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[68], body, state, value) }
func (gdClass PhysicsServer3D) BodyGetState(body RID, state PhysicsServer3DBodyState) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPhysicsServer3D[69], body, state) }
func (gdClass PhysicsServer3D) BodyApplyCentralImpulse(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[70], body, impulse) }
func (gdClass PhysicsServer3D) BodyApplyImpulse(body RID, impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[71], body, impulse, position) }
func (gdClass PhysicsServer3D) BodyApplyTorqueImpulse(body RID, impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[72], body, impulse) }
func (gdClass PhysicsServer3D) BodyApplyCentralForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[73], body, force) }
func (gdClass PhysicsServer3D) BodyApplyForce(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[74], body, force, position) }
func (gdClass PhysicsServer3D) BodyApplyTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[75], body, torque) }
func (gdClass PhysicsServer3D) BodyAddConstantCentralForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[76], body, force) }
func (gdClass PhysicsServer3D) BodyAddConstantForce(body RID, force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[77], body, force, position) }
func (gdClass PhysicsServer3D) BodyAddConstantTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[78], body, torque) }
func (gdClass PhysicsServer3D) BodySetConstantForce(body RID, force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[79], body, force) }
func (gdClass PhysicsServer3D) BodyGetConstantForce(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[80], body) }
func (gdClass PhysicsServer3D) BodySetConstantTorque(body RID, torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[81], body, torque) }
func (gdClass PhysicsServer3D) BodyGetConstantTorque(body RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[82], body) }
func (gdClass PhysicsServer3D) BodySetAxisVelocity(body RID, axis_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[83], body, axis_velocity) }
func (gdClass PhysicsServer3D) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[84], body, axis, lock) }
func (gdClass PhysicsServer3D) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[85], body, axis) }
func (gdClass PhysicsServer3D) BodyAddCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[86], body, excepted_body) }
func (gdClass PhysicsServer3D) BodyRemoveCollisionException(body RID, excepted_body RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[87], body, excepted_body) }
func (gdClass PhysicsServer3D) BodySetMaxContactsReported(body RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[88], body, amount) }
func (gdClass PhysicsServer3D) BodyGetMaxContactsReported(body RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[89], body) }
func (gdClass PhysicsServer3D) BodySetOmitForceIntegration(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[90], body, enable) }
func (gdClass PhysicsServer3D) BodyIsOmittingForceIntegration(body RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[91], body) }
func (gdClass PhysicsServer3D) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[92], body, callable, userdata) }
func (gdClass PhysicsServer3D) BodySetRayPickable(body RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[93], body, enable) }
func (gdClass PhysicsServer3D) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[94], body, parameters, result) }
func (gdClass PhysicsServer3D) BodyGetDirectState(body RID) PhysicsDirectBodyState3D { return gdnative.Return[PhysicsDirectBodyState3D](gdnative.Object(gdClass), methodPhysicsServer3D[95], body) }
func (gdClass PhysicsServer3D) SoftBodyGetBounds(body RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodPhysicsServer3D[96], body) }
func (gdClass PhysicsServer3D) JointCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsServer3D[97]) }
func (gdClass PhysicsServer3D) JointClear(joint RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[98], joint) }
func (gdClass PhysicsServer3D) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[99], joint, body_A, local_A, body_B, local_B) }
func (gdClass PhysicsServer3D) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[100], joint, param, value) }
func (gdClass PhysicsServer3D) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[101], joint, param) }
func (gdClass PhysicsServer3D) PinJointSetLocalA(joint RID, local_A Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[102], joint, local_A) }
func (gdClass PhysicsServer3D) PinJointGetLocalA(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[103], joint) }
func (gdClass PhysicsServer3D) PinJointSetLocalB(joint RID, local_B Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[104], joint, local_B) }
func (gdClass PhysicsServer3D) PinJointGetLocalB(joint RID) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsServer3D[105], joint) }
func (gdClass PhysicsServer3D) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[106], joint, body_A, hinge_A, body_B, hinge_B) }
func (gdClass PhysicsServer3D) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[107], joint, param, value) }
func (gdClass PhysicsServer3D) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[108], joint, param) }
func (gdClass PhysicsServer3D) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[109], joint, flag, enabled) }
func (gdClass PhysicsServer3D) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[110], joint, flag) }
func (gdClass PhysicsServer3D) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[111], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[112], joint, param, value) }
func (gdClass PhysicsServer3D) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[113], joint, param) }
func (gdClass PhysicsServer3D) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[114], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[115], joint, param, value) }
func (gdClass PhysicsServer3D) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[116], joint, param) }
func (gdClass PhysicsServer3D) JointGetType(joint RID) PhysicsServer3DJointType { return gdnative.Return[PhysicsServer3DJointType](gdnative.Object(gdClass), methodPhysicsServer3D[117], joint) }
func (gdClass PhysicsServer3D) JointSetSolverPriority(joint RID, priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[118], joint, priority) }
func (gdClass PhysicsServer3D) JointGetSolverPriority(joint RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[119], joint) }
func (gdClass PhysicsServer3D) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[120], joint, body_A, local_ref_A, body_B, local_ref_B) }
func (gdClass PhysicsServer3D) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[121], joint, axis, param, value) }
func (gdClass PhysicsServer3D) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsServer3D[122], joint, axis, param) }
func (gdClass PhysicsServer3D) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[123], joint, axis, flag, enable) }
func (gdClass PhysicsServer3D) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsServer3D[124], joint, axis, flag) }
func (gdClass PhysicsServer3D) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[125], rid) }
func (gdClass PhysicsServer3D) SetActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsServer3D[126], active) }
func (gdClass PhysicsServer3D) GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsServer3D[127], process_info) }

type PhysicsServer3DExtension gdnative.Object
func (PhysicsServer3DExtension) class() string { return "PhysicsServer3DExtension\000" }

func (gdClass PhysicsServer3DExtension) PhysicsServer3D() PhysicsServer3D { return PhysicsServer3D(gdClass) }

func (gdClass PhysicsServer3DExtension) virtual(val any, name string) any {	switch name {
	case "_world_boundary_shape_create":
		i, ok := val.(interface{ WorldBoundaryShapeCreate() RID })
		if ok {
			return i.WorldBoundaryShapeCreate
		}
	case "_separation_ray_shape_create":
		i, ok := val.(interface{ SeparationRayShapeCreate() RID })
		if ok {
			return i.SeparationRayShapeCreate
		}
	case "_sphere_shape_create":
		i, ok := val.(interface{ SphereShapeCreate() RID })
		if ok {
			return i.SphereShapeCreate
		}
	case "_box_shape_create":
		i, ok := val.(interface{ BoxShapeCreate() RID })
		if ok {
			return i.BoxShapeCreate
		}
	case "_capsule_shape_create":
		i, ok := val.(interface{ CapsuleShapeCreate() RID })
		if ok {
			return i.CapsuleShapeCreate
		}
	case "_cylinder_shape_create":
		i, ok := val.(interface{ CylinderShapeCreate() RID })
		if ok {
			return i.CylinderShapeCreate
		}
	case "_convex_polygon_shape_create":
		i, ok := val.(interface{ ConvexPolygonShapeCreate() RID })
		if ok {
			return i.ConvexPolygonShapeCreate
		}
	case "_concave_polygon_shape_create":
		i, ok := val.(interface{ ConcavePolygonShapeCreate() RID })
		if ok {
			return i.ConcavePolygonShapeCreate
		}
	case "_heightmap_shape_create":
		i, ok := val.(interface{ HeightmapShapeCreate() RID })
		if ok {
			return i.HeightmapShapeCreate
		}
	case "_custom_shape_create":
		i, ok := val.(interface{ CustomShapeCreate() RID })
		if ok {
			return i.CustomShapeCreate
		}
	case "_shape_set_data":
		i, ok := val.(interface{ ShapeSetData(shape RID, data any)  })
		if ok {
			return i.ShapeSetData
		}
	case "_shape_get_type":
		i, ok := val.(interface{ ShapeGetType(shape RID) PhysicsServer3DShapeType })
		if ok {
			return i.ShapeGetType
		}
	case "_shape_get_data":
		i, ok := val.(interface{ ShapeGetData(shape RID) any })
		if ok {
			return i.ShapeGetData
		}
	case "_space_create":
		i, ok := val.(interface{ SpaceCreate() RID })
		if ok {
			return i.SpaceCreate
		}
	case "_space_set_active":
		i, ok := val.(interface{ SpaceSetActive(space RID, active bool)  })
		if ok {
			return i.SpaceSetActive
		}
	case "_space_is_active":
		i, ok := val.(interface{ SpaceIsActive(space RID) bool })
		if ok {
			return i.SpaceIsActive
		}
	case "_space_set_param":
		i, ok := val.(interface{ SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value float64)  })
		if ok {
			return i.SpaceSetParam
		}
	case "_space_get_param":
		i, ok := val.(interface{ SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) float64 })
		if ok {
			return i.SpaceGetParam
		}
	case "_space_get_direct_state":
		i, ok := val.(interface{ SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D })
		if ok {
			return i.SpaceGetDirectState
		}
	case "_area_create":
		i, ok := val.(interface{ AreaCreate() RID })
		if ok {
			return i.AreaCreate
		}
	case "_area_set_space":
		i, ok := val.(interface{ AreaSetSpace(area RID, space RID)  })
		if ok {
			return i.AreaSetSpace
		}
	case "_area_get_space":
		i, ok := val.(interface{ AreaGetSpace(area RID) RID })
		if ok {
			return i.AreaGetSpace
		}
	case "_area_add_shape":
		i, ok := val.(interface{ AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool)  })
		if ok {
			return i.AreaAddShape
		}
	case "_area_set_shape":
		i, ok := val.(interface{ AreaSetShape(area RID, shape_idx int64, shape RID)  })
		if ok {
			return i.AreaSetShape
		}
	case "_area_set_shape_transform":
		i, ok := val.(interface{ AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D)  })
		if ok {
			return i.AreaSetShapeTransform
		}
	case "_area_set_shape_disabled":
		i, ok := val.(interface{ AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  })
		if ok {
			return i.AreaSetShapeDisabled
		}
	case "_area_get_shape_count":
		i, ok := val.(interface{ AreaGetShapeCount(area RID) int64 })
		if ok {
			return i.AreaGetShapeCount
		}
	case "_area_get_shape":
		i, ok := val.(interface{ AreaGetShape(area RID, shape_idx int64) RID })
		if ok {
			return i.AreaGetShape
		}
	case "_area_get_shape_transform":
		i, ok := val.(interface{ AreaGetShapeTransform(area RID, shape_idx int64) Transform3D })
		if ok {
			return i.AreaGetShapeTransform
		}
	case "_area_remove_shape":
		i, ok := val.(interface{ AreaRemoveShape(area RID, shape_idx int64)  })
		if ok {
			return i.AreaRemoveShape
		}
	case "_area_clear_shapes":
		i, ok := val.(interface{ AreaClearShapes(area RID)  })
		if ok {
			return i.AreaClearShapes
		}
	case "_area_set_collision_layer":
		i, ok := val.(interface{ AreaSetCollisionLayer(area RID, layer int64)  })
		if ok {
			return i.AreaSetCollisionLayer
		}
	case "_area_set_collision_mask":
		i, ok := val.(interface{ AreaSetCollisionMask(area RID, mask int64)  })
		if ok {
			return i.AreaSetCollisionMask
		}
	case "_area_set_param":
		i, ok := val.(interface{ AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any)  })
		if ok {
			return i.AreaSetParam
		}
	case "_area_set_transform":
		i, ok := val.(interface{ AreaSetTransform(area RID, transform Transform3D)  })
		if ok {
			return i.AreaSetTransform
		}
	case "_area_get_param":
		i, ok := val.(interface{ AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any })
		if ok {
			return i.AreaGetParam
		}
	case "_area_get_transform":
		i, ok := val.(interface{ AreaGetTransform(area RID) Transform3D })
		if ok {
			return i.AreaGetTransform
		}
	case "_area_attach_object_instance_id":
		i, ok := val.(interface{ AreaAttachObjectInstanceId(area RID, id int64)  })
		if ok {
			return i.AreaAttachObjectInstanceId
		}
	case "_area_get_object_instance_id":
		i, ok := val.(interface{ AreaGetObjectInstanceId(area RID) int64 })
		if ok {
			return i.AreaGetObjectInstanceId
		}
	case "_area_set_monitor_callback":
		i, ok := val.(interface{ AreaSetMonitorCallback(area RID, callback Callable)  })
		if ok {
			return i.AreaSetMonitorCallback
		}
	case "_area_set_area_monitor_callback":
		i, ok := val.(interface{ AreaSetAreaMonitorCallback(area RID, callback Callable)  })
		if ok {
			return i.AreaSetAreaMonitorCallback
		}
	case "_area_set_monitorable":
		i, ok := val.(interface{ AreaSetMonitorable(area RID, monitorable bool)  })
		if ok {
			return i.AreaSetMonitorable
		}
	case "_area_set_ray_pickable":
		i, ok := val.(interface{ AreaSetRayPickable(area RID, enable bool)  })
		if ok {
			return i.AreaSetRayPickable
		}
	case "_body_create":
		i, ok := val.(interface{ BodyCreate() RID })
		if ok {
			return i.BodyCreate
		}
	case "_body_set_space":
		i, ok := val.(interface{ BodySetSpace(body RID, space RID)  })
		if ok {
			return i.BodySetSpace
		}
	case "_body_get_space":
		i, ok := val.(interface{ BodyGetSpace(body RID) RID })
		if ok {
			return i.BodyGetSpace
		}
	case "_body_set_mode":
		i, ok := val.(interface{ BodySetMode(body RID, mode PhysicsServer3DBodyMode)  })
		if ok {
			return i.BodySetMode
		}
	case "_body_get_mode":
		i, ok := val.(interface{ BodyGetMode(body RID) PhysicsServer3DBodyMode })
		if ok {
			return i.BodyGetMode
		}
	case "_body_set_collision_layer":
		i, ok := val.(interface{ BodySetCollisionLayer(body RID, layer int64)  })
		if ok {
			return i.BodySetCollisionLayer
		}
	case "_body_get_collision_layer":
		i, ok := val.(interface{ BodyGetCollisionLayer(body RID) int64 })
		if ok {
			return i.BodyGetCollisionLayer
		}
	case "_body_set_collision_mask":
		i, ok := val.(interface{ BodySetCollisionMask(body RID, mask int64)  })
		if ok {
			return i.BodySetCollisionMask
		}
	case "_body_get_collision_mask":
		i, ok := val.(interface{ BodyGetCollisionMask(body RID) int64 })
		if ok {
			return i.BodyGetCollisionMask
		}
	case "_body_add_shape":
		i, ok := val.(interface{ BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool)  })
		if ok {
			return i.BodyAddShape
		}
	case "_body_set_shape":
		i, ok := val.(interface{ BodySetShape(body RID, shape_idx int64, shape RID)  })
		if ok {
			return i.BodySetShape
		}
	case "_body_set_shape_transform":
		i, ok := val.(interface{ BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D)  })
		if ok {
			return i.BodySetShapeTransform
		}
	case "_body_set_shape_disabled":
		i, ok := val.(interface{ BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  })
		if ok {
			return i.BodySetShapeDisabled
		}
	case "_body_get_shape_count":
		i, ok := val.(interface{ BodyGetShapeCount(body RID) int64 })
		if ok {
			return i.BodyGetShapeCount
		}
	case "_body_get_shape":
		i, ok := val.(interface{ BodyGetShape(body RID, shape_idx int64) RID })
		if ok {
			return i.BodyGetShape
		}
	case "_body_get_shape_transform":
		i, ok := val.(interface{ BodyGetShapeTransform(body RID, shape_idx int64) Transform3D })
		if ok {
			return i.BodyGetShapeTransform
		}
	case "_body_remove_shape":
		i, ok := val.(interface{ BodyRemoveShape(body RID, shape_idx int64)  })
		if ok {
			return i.BodyRemoveShape
		}
	case "_body_clear_shapes":
		i, ok := val.(interface{ BodyClearShapes(body RID)  })
		if ok {
			return i.BodyClearShapes
		}
	case "_body_attach_object_instance_id":
		i, ok := val.(interface{ BodyAttachObjectInstanceId(body RID, id int64)  })
		if ok {
			return i.BodyAttachObjectInstanceId
		}
	case "_body_get_object_instance_id":
		i, ok := val.(interface{ BodyGetObjectInstanceId(body RID) int64 })
		if ok {
			return i.BodyGetObjectInstanceId
		}
	case "_body_set_enable_continuous_collision_detection":
		i, ok := val.(interface{ BodySetEnableContinuousCollisionDetection(body RID, enable bool)  })
		if ok {
			return i.BodySetEnableContinuousCollisionDetection
		}
	case "_body_is_continuous_collision_detection_enabled":
		i, ok := val.(interface{ BodyIsContinuousCollisionDetectionEnabled(body RID) bool })
		if ok {
			return i.BodyIsContinuousCollisionDetectionEnabled
		}
	case "_body_set_param":
		i, ok := val.(interface{ BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any)  })
		if ok {
			return i.BodySetParam
		}
	case "_body_get_param":
		i, ok := val.(interface{ BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any })
		if ok {
			return i.BodyGetParam
		}
	case "_body_reset_mass_properties":
		i, ok := val.(interface{ BodyResetMassProperties(body RID)  })
		if ok {
			return i.BodyResetMassProperties
		}
	case "_body_set_state":
		i, ok := val.(interface{ BodySetState(body RID, state PhysicsServer3DBodyState, value any)  })
		if ok {
			return i.BodySetState
		}
	case "_body_get_state":
		i, ok := val.(interface{ BodyGetState(body RID, state PhysicsServer3DBodyState) any })
		if ok {
			return i.BodyGetState
		}
	case "_body_apply_central_impulse":
		i, ok := val.(interface{ BodyApplyCentralImpulse(body RID, impulse Vector3)  })
		if ok {
			return i.BodyApplyCentralImpulse
		}
	case "_body_apply_impulse":
		i, ok := val.(interface{ BodyApplyImpulse(body RID, impulse Vector3, position Vector3)  })
		if ok {
			return i.BodyApplyImpulse
		}
	case "_body_apply_torque_impulse":
		i, ok := val.(interface{ BodyApplyTorqueImpulse(body RID, impulse Vector3)  })
		if ok {
			return i.BodyApplyTorqueImpulse
		}
	case "_body_apply_central_force":
		i, ok := val.(interface{ BodyApplyCentralForce(body RID, force Vector3)  })
		if ok {
			return i.BodyApplyCentralForce
		}
	case "_body_apply_force":
		i, ok := val.(interface{ BodyApplyForce(body RID, force Vector3, position Vector3)  })
		if ok {
			return i.BodyApplyForce
		}
	case "_body_apply_torque":
		i, ok := val.(interface{ BodyApplyTorque(body RID, torque Vector3)  })
		if ok {
			return i.BodyApplyTorque
		}
	case "_body_add_constant_central_force":
		i, ok := val.(interface{ BodyAddConstantCentralForce(body RID, force Vector3)  })
		if ok {
			return i.BodyAddConstantCentralForce
		}
	case "_body_add_constant_force":
		i, ok := val.(interface{ BodyAddConstantForce(body RID, force Vector3, position Vector3)  })
		if ok {
			return i.BodyAddConstantForce
		}
	case "_body_add_constant_torque":
		i, ok := val.(interface{ BodyAddConstantTorque(body RID, torque Vector3)  })
		if ok {
			return i.BodyAddConstantTorque
		}
	case "_body_set_constant_force":
		i, ok := val.(interface{ BodySetConstantForce(body RID, force Vector3)  })
		if ok {
			return i.BodySetConstantForce
		}
	case "_body_get_constant_force":
		i, ok := val.(interface{ BodyGetConstantForce(body RID) Vector3 })
		if ok {
			return i.BodyGetConstantForce
		}
	case "_body_set_constant_torque":
		i, ok := val.(interface{ BodySetConstantTorque(body RID, torque Vector3)  })
		if ok {
			return i.BodySetConstantTorque
		}
	case "_body_get_constant_torque":
		i, ok := val.(interface{ BodyGetConstantTorque(body RID) Vector3 })
		if ok {
			return i.BodyGetConstantTorque
		}
	case "_body_set_axis_velocity":
		i, ok := val.(interface{ BodySetAxisVelocity(body RID, axis_velocity Vector3)  })
		if ok {
			return i.BodySetAxisVelocity
		}
	case "_body_set_axis_lock":
		i, ok := val.(interface{ BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool)  })
		if ok {
			return i.BodySetAxisLock
		}
	case "_body_is_axis_locked":
		i, ok := val.(interface{ BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool })
		if ok {
			return i.BodyIsAxisLocked
		}
	case "_body_add_collision_exception":
		i, ok := val.(interface{ BodyAddCollisionException(body RID, excepted_body RID)  })
		if ok {
			return i.BodyAddCollisionException
		}
	case "_body_remove_collision_exception":
		i, ok := val.(interface{ BodyRemoveCollisionException(body RID, excepted_body RID)  })
		if ok {
			return i.BodyRemoveCollisionException
		}
	case "_body_set_max_contacts_reported":
		i, ok := val.(interface{ BodySetMaxContactsReported(body RID, amount int64)  })
		if ok {
			return i.BodySetMaxContactsReported
		}
	case "_body_get_max_contacts_reported":
		i, ok := val.(interface{ BodyGetMaxContactsReported(body RID) int64 })
		if ok {
			return i.BodyGetMaxContactsReported
		}
	case "_body_set_omit_force_integration":
		i, ok := val.(interface{ BodySetOmitForceIntegration(body RID, enable bool)  })
		if ok {
			return i.BodySetOmitForceIntegration
		}
	case "_body_is_omitting_force_integration":
		i, ok := val.(interface{ BodyIsOmittingForceIntegration(body RID) bool })
		if ok {
			return i.BodyIsOmittingForceIntegration
		}
	case "_body_set_force_integration_callback":
		i, ok := val.(interface{ BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  })
		if ok {
			return i.BodySetForceIntegrationCallback
		}
	case "_body_set_ray_pickable":
		i, ok := val.(interface{ BodySetRayPickable(body RID, enable bool)  })
		if ok {
			return i.BodySetRayPickable
		}
	case "_body_test_motion":
		i, ok := val.(interface{ BodyTestMotion(body RID, from Transform3D, motion Vector3, margin float64, max_collisions int64, collide_separation_ray bool, result *PhysicsServer3DExtensionMotionResult) bool })
		if ok {
			return i.BodyTestMotion
		}
	case "_body_get_direct_state":
		i, ok := val.(interface{ BodyGetDirectState(body RID) PhysicsDirectBodyState3D })
		if ok {
			return i.BodyGetDirectState
		}
	case "_soft_body_get_bounds":
		i, ok := val.(interface{ SoftBodyGetBounds(body RID) AABB })
		if ok {
			return i.SoftBodyGetBounds
		}
	case "_joint_create":
		i, ok := val.(interface{ JointCreate() RID })
		if ok {
			return i.JointCreate
		}
	case "_joint_clear":
		i, ok := val.(interface{ JointClear(joint RID)  })
		if ok {
			return i.JointClear
		}
	case "_joint_make_pin":
		i, ok := val.(interface{ JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  })
		if ok {
			return i.JointMakePin
		}
	case "_pin_joint_set_param":
		i, ok := val.(interface{ PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value float64)  })
		if ok {
			return i.PinJointSetParam
		}
	case "_pin_joint_get_param":
		i, ok := val.(interface{ PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) float64 })
		if ok {
			return i.PinJointGetParam
		}
	case "_pin_joint_set_local_a":
		i, ok := val.(interface{ PinJointSetLocalA(joint RID, local_A Vector3)  })
		if ok {
			return i.PinJointSetLocalA
		}
	case "_pin_joint_get_local_a":
		i, ok := val.(interface{ PinJointGetLocalA(joint RID) Vector3 })
		if ok {
			return i.PinJointGetLocalA
		}
	case "_pin_joint_set_local_b":
		i, ok := val.(interface{ PinJointSetLocalB(joint RID, local_B Vector3)  })
		if ok {
			return i.PinJointSetLocalB
		}
	case "_pin_joint_get_local_b":
		i, ok := val.(interface{ PinJointGetLocalB(joint RID) Vector3 })
		if ok {
			return i.PinJointGetLocalB
		}
	case "_joint_make_hinge":
		i, ok := val.(interface{ JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  })
		if ok {
			return i.JointMakeHinge
		}
	case "_hinge_joint_set_param":
		i, ok := val.(interface{ HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value float64)  })
		if ok {
			return i.HingeJointSetParam
		}
	case "_hinge_joint_get_param":
		i, ok := val.(interface{ HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) float64 })
		if ok {
			return i.HingeJointGetParam
		}
	case "_hinge_joint_set_flag":
		i, ok := val.(interface{ HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  })
		if ok {
			return i.HingeJointSetFlag
		}
	case "_hinge_joint_get_flag":
		i, ok := val.(interface{ HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool })
		if ok {
			return i.HingeJointGetFlag
		}
	case "_joint_make_slider":
		i, ok := val.(interface{ JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  })
		if ok {
			return i.JointMakeSlider
		}
	case "_slider_joint_set_param":
		i, ok := val.(interface{ SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value float64)  })
		if ok {
			return i.SliderJointSetParam
		}
	case "_slider_joint_get_param":
		i, ok := val.(interface{ SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) float64 })
		if ok {
			return i.SliderJointGetParam
		}
	case "_joint_make_cone_twist":
		i, ok := val.(interface{ JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  })
		if ok {
			return i.JointMakeConeTwist
		}
	case "_cone_twist_joint_set_param":
		i, ok := val.(interface{ ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  })
		if ok {
			return i.ConeTwistJointSetParam
		}
	case "_cone_twist_joint_get_param":
		i, ok := val.(interface{ ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) float64 })
		if ok {
			return i.ConeTwistJointGetParam
		}
	case "_joint_get_type":
		i, ok := val.(interface{ JointGetType(joint RID) PhysicsServer3DJointType })
		if ok {
			return i.JointGetType
		}
	case "_joint_set_solver_priority":
		i, ok := val.(interface{ JointSetSolverPriority(joint RID, priority int64)  })
		if ok {
			return i.JointSetSolverPriority
		}
	case "_joint_get_solver_priority":
		i, ok := val.(interface{ JointGetSolverPriority(joint RID) int64 })
		if ok {
			return i.JointGetSolverPriority
		}
	case "_joint_make_generic_6dof":
		i, ok := val.(interface{ JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  })
		if ok {
			return i.JointMakeGeneric6dof
		}
	case "_generic_6dof_joint_set_param":
		i, ok := val.(interface{ Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  })
		if ok {
			return i.Generic6dofJointSetParam
		}
	case "_generic_6dof_joint_get_param":
		i, ok := val.(interface{ Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 })
		if ok {
			return i.Generic6dofJointGetParam
		}
	case "_generic_6dof_joint_set_flag":
		i, ok := val.(interface{ Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  })
		if ok {
			return i.Generic6dofJointSetFlag
		}
	case "_generic_6dof_joint_get_flag":
		i, ok := val.(interface{ Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool })
		if ok {
			return i.Generic6dofJointGetFlag
		}
	case "_free_rid":
		i, ok := val.(interface{ FreeRid(rid RID)  })
		if ok {
			return i.FreeRid
		}
	case "_set_active":
		i, ok := val.(interface{ SetActive(active bool)  })
		if ok {
			return i.SetActive
		}
	case "_get_process_info":
		i, ok := val.(interface{ GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 })
		if ok {
			return i.GetProcessInfo
		}
	}
	return nil
}

type PhysicsServer3DRenderingServerHandler gdnative.Object
func (PhysicsServer3DRenderingServerHandler) class() string { return "PhysicsServer3DRenderingServerHandler\000" }

func (gdClass PhysicsServer3DRenderingServerHandler) Object() Object { return Object(gdClass) }

func (gdClass PhysicsServer3DRenderingServerHandler) virtual(val any, name string) any {	switch name {
	case "_set_vertex":
		i, ok := val.(interface{ SetVertex(vertex_id int64, vertices []byte)  })
		if ok {
			return i.SetVertex
		}
	case "_set_normal":
		i, ok := val.(interface{ SetNormal(vertex_id int64, normals []byte)  })
		if ok {
			return i.SetNormal
		}
	case "_set_aabb":
		i, ok := val.(interface{ SetAabb(aabb AABB)  })
		if ok {
			return i.SetAabb
		}
	}
	return nil
}

type PhysicsShapeQueryParameters2D gdnative.Object
func (PhysicsShapeQueryParameters2D) class() string { return "PhysicsShapeQueryParameters2D\000" }

func (gdClass PhysicsShapeQueryParameters2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsShapeQueryParameters2D [18]gdnative.Method
func (gdClass PhysicsShapeQueryParameters2D) SetShape(shape Resource)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[0], shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShape() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[1]) }
func (gdClass PhysicsShapeQueryParameters2D) SetShapeRid(shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[2], shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[3]) }
func (gdClass PhysicsShapeQueryParameters2D) SetTransform(transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[4], transform) }
func (gdClass PhysicsShapeQueryParameters2D) GetTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[5]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMotion(motion Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[6], motion) }
func (gdClass PhysicsShapeQueryParameters2D) GetMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[7]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[8], margin) }
func (gdClass PhysicsShapeQueryParameters2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[9]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[10], collision_mask) }
func (gdClass PhysicsShapeQueryParameters2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[11]) }
func (gdClass PhysicsShapeQueryParameters2D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[12], exclude) }
func (gdClass PhysicsShapeQueryParameters2D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[13]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[14], enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[15]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[16], enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters2D[17]) }

type PhysicsShapeQueryParameters3D gdnative.Object
func (PhysicsShapeQueryParameters3D) class() string { return "PhysicsShapeQueryParameters3D\000" }

func (gdClass PhysicsShapeQueryParameters3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsShapeQueryParameters3D [18]gdnative.Method
func (gdClass PhysicsShapeQueryParameters3D) SetShape(shape Resource)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[0], shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShape() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[1]) }
func (gdClass PhysicsShapeQueryParameters3D) SetShapeRid(shape RID)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[2], shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShapeRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[3]) }
func (gdClass PhysicsShapeQueryParameters3D) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[4], transform) }
func (gdClass PhysicsShapeQueryParameters3D) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[5]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMotion(motion Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[6], motion) }
func (gdClass PhysicsShapeQueryParameters3D) GetMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[7]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[8], margin) }
func (gdClass PhysicsShapeQueryParameters3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[9]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[10], collision_mask) }
func (gdClass PhysicsShapeQueryParameters3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[11]) }
func (gdClass PhysicsShapeQueryParameters3D) SetExclude(exclude Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[12], exclude) }
func (gdClass PhysicsShapeQueryParameters3D) GetExclude() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[13]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[14], enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[15]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[16], enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsShapeQueryParameters3D[17]) }

type PhysicsTestMotionParameters2D gdnative.Object
func (PhysicsTestMotionParameters2D) class() string { return "PhysicsTestMotionParameters2D\000" }

func (gdClass PhysicsTestMotionParameters2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsTestMotionParameters2D [14]gdnative.Method
func (gdClass PhysicsTestMotionParameters2D) GetFrom() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[0]) }
func (gdClass PhysicsTestMotionParameters2D) SetFrom(from Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[1], from) }
func (gdClass PhysicsTestMotionParameters2D) GetMotion() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[2]) }
func (gdClass PhysicsTestMotionParameters2D) SetMotion(motion Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[3], motion) }
func (gdClass PhysicsTestMotionParameters2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[4]) }
func (gdClass PhysicsTestMotionParameters2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[5], margin) }
func (gdClass PhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[6]) }
func (gdClass PhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[7], enabled) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[8]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[9], exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[10]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[11], exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[12]) }
func (gdClass PhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters2D[13], enabled) }

type PhysicsTestMotionParameters3D gdnative.Object
func (PhysicsTestMotionParameters3D) class() string { return "PhysicsTestMotionParameters3D\000" }

func (gdClass PhysicsTestMotionParameters3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsTestMotionParameters3D [16]gdnative.Method
func (gdClass PhysicsTestMotionParameters3D) GetFrom() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[0]) }
func (gdClass PhysicsTestMotionParameters3D) SetFrom(from Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[1], from) }
func (gdClass PhysicsTestMotionParameters3D) GetMotion() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[2]) }
func (gdClass PhysicsTestMotionParameters3D) SetMotion(motion Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[3], motion) }
func (gdClass PhysicsTestMotionParameters3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[4]) }
func (gdClass PhysicsTestMotionParameters3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[5], margin) }
func (gdClass PhysicsTestMotionParameters3D) GetMaxCollisions() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[6]) }
func (gdClass PhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions int64)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[7], max_collisions) }
func (gdClass PhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[8]) }
func (gdClass PhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[9], enabled) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[10]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[11], exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[12]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list Array)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[13], exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[14]) }
func (gdClass PhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPhysicsTestMotionParameters3D[15], enabled) }

type PhysicsTestMotionResult2D gdnative.Object
func (PhysicsTestMotionResult2D) class() string { return "PhysicsTestMotionResult2D\000" }

func (gdClass PhysicsTestMotionResult2D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsTestMotionResult2D [13]gdnative.Method
func (gdClass PhysicsTestMotionResult2D) GetTravel() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[0]) }
func (gdClass PhysicsTestMotionResult2D) GetRemainder() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[1]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionPoint() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[2]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[3]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[4]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[5]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[6]) }
func (gdClass PhysicsTestMotionResult2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[7]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[8]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionLocalShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[9]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[10]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[11]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult2D[12]) }

type PhysicsTestMotionResult3D gdnative.Object
func (PhysicsTestMotionResult3D) class() string { return "PhysicsTestMotionResult3D\000" }

func (gdClass PhysicsTestMotionResult3D) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodPhysicsTestMotionResult3D [14]gdnative.Method
func (gdClass PhysicsTestMotionResult3D) GetTravel() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[0]) }
func (gdClass PhysicsTestMotionResult3D) GetRemainder() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[1]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[2]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[3]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[4]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionPoint(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[5], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionNormal(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[6], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderVelocity(collision_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[7], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderId(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[8], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderRid(collision_index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[9], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollider(collision_index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[10], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderShape(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[11], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[12], collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionDepth(collision_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPhysicsTestMotionResult3D[13], collision_index) }

type PinJoint2D gdnative.Object
func (PinJoint2D) class() string { return "PinJoint2D\000" }

func (gdClass PinJoint2D) Joint2D() Joint2D { return Joint2D(gdClass) }

var methodPinJoint2D [2]gdnative.Method
func (gdClass PinJoint2D) SetSoftness(softness float64)  { gdnative.Call(gdnative.Object(gdClass), methodPinJoint2D[0], softness) }
func (gdClass PinJoint2D) GetSoftness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPinJoint2D[1]) }

type PinJoint3DParam int64

const (
	PinJoint3DParamBias PinJoint3DParam = 0
	PinJoint3DParamDamping PinJoint3DParam = 1
	PinJoint3DParamImpulseClamp PinJoint3DParam = 2
)

type PinJoint3D gdnative.Object
func (PinJoint3D) class() string { return "PinJoint3D\000" }

func (gdClass PinJoint3D) Joint3D() Joint3D { return Joint3D(gdClass) }

var methodPinJoint3D [2]gdnative.Method
func (gdClass PinJoint3D) SetParam(param PinJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodPinJoint3D[0], param, value) }
func (gdClass PinJoint3D) GetParam(param PinJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPinJoint3D[1], param) }

type PlaceholderCubemap gdnative.Object
func (PlaceholderCubemap) class() string { return "PlaceholderCubemap\000" }

func (gdClass PlaceholderCubemap) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered(gdClass) }


type PlaceholderCubemapArray gdnative.Object
func (PlaceholderCubemapArray) class() string { return "PlaceholderCubemapArray\000" }

func (gdClass PlaceholderCubemapArray) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered(gdClass) }


type PlaceholderMaterial gdnative.Object
func (PlaceholderMaterial) class() string { return "PlaceholderMaterial\000" }

func (gdClass PlaceholderMaterial) Material() Material { return Material(gdClass) }


type PlaceholderMesh gdnative.Object
func (PlaceholderMesh) class() string { return "PlaceholderMesh\000" }

func (gdClass PlaceholderMesh) Mesh() Mesh { return Mesh(gdClass) }

var methodPlaceholderMesh [1]gdnative.Method
func (gdClass PlaceholderMesh) SetAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderMesh[0], aabb) }

type PlaceholderTexture2D gdnative.Object
func (PlaceholderTexture2D) class() string { return "PlaceholderTexture2D\000" }

func (gdClass PlaceholderTexture2D) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodPlaceholderTexture2D [1]gdnative.Method
func (gdClass PlaceholderTexture2D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTexture2D[0], size) }

type PlaceholderTexture2DArray gdnative.Object
func (PlaceholderTexture2DArray) class() string { return "PlaceholderTexture2DArray\000" }

func (gdClass PlaceholderTexture2DArray) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered(gdClass) }


type PlaceholderTexture3D gdnative.Object
func (PlaceholderTexture3D) class() string { return "PlaceholderTexture3D\000" }

func (gdClass PlaceholderTexture3D) Texture3D() Texture3D { return Texture3D(gdClass) }

var methodPlaceholderTexture3D [2]gdnative.Method
func (gdClass PlaceholderTexture3D) SetSize(size Vector3i)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTexture3D[0], size) }
func (gdClass PlaceholderTexture3D) GetSize() Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodPlaceholderTexture3D[1]) }

type PlaceholderTextureLayered gdnative.Object
func (PlaceholderTextureLayered) class() string { return "PlaceholderTextureLayered\000" }

func (gdClass PlaceholderTextureLayered) TextureLayered() TextureLayered { return TextureLayered(gdClass) }

var methodPlaceholderTextureLayered [3]gdnative.Method
func (gdClass PlaceholderTextureLayered) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTextureLayered[0], size) }
func (gdClass PlaceholderTextureLayered) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodPlaceholderTextureLayered[1]) }
func (gdClass PlaceholderTextureLayered) SetLayers(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaceholderTextureLayered[2], layers) }

type PlaneMesh gdnative.Object
func (PlaneMesh) class() string { return "PlaneMesh\000" }

func (gdClass PlaneMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodPlaneMesh [8]gdnative.Method
func (gdClass PlaneMesh) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[0], size) }
func (gdClass PlaneMesh) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPlaneMesh[1]) }
func (gdClass PlaneMesh) SetSubdivideWidth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[2], subdivide) }
func (gdClass PlaneMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPlaneMesh[3]) }
func (gdClass PlaneMesh) SetSubdivideDepth(subdivide int64)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[4], subdivide) }
func (gdClass PlaneMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPlaneMesh[5]) }
func (gdClass PlaneMesh) SetCenterOffset(offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPlaneMesh[6], offset) }
func (gdClass PlaneMesh) GetCenterOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPlaneMesh[7]) }

type PointLight2D gdnative.Object
func (PointLight2D) class() string { return "PointLight2D\000" }

func (gdClass PointLight2D) Light2D() Light2D { return Light2D(gdClass) }

var methodPointLight2D [6]gdnative.Method
func (gdClass PointLight2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[0], texture) }
func (gdClass PointLight2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPointLight2D[1]) }
func (gdClass PointLight2D) SetTextureOffset(texture_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[2], texture_offset) }
func (gdClass PointLight2D) GetTextureOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPointLight2D[3]) }
func (gdClass PointLight2D) SetTextureScale(texture_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodPointLight2D[4], texture_scale) }
func (gdClass PointLight2D) GetTextureScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPointLight2D[5]) }

type PointMesh gdnative.Object
func (PointMesh) class() string { return "PointMesh\000" }

func (gdClass PointMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }


type Polygon2D gdnative.Object
func (Polygon2D) class() string { return "Polygon2D\000" }

func (gdClass Polygon2D) Node2D() Node2D { return Node2D(gdClass) }

var methodPolygon2D [38]gdnative.Method
func (gdClass Polygon2D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[0], polygon) }
func (gdClass Polygon2D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygon2D[1]) }
func (gdClass Polygon2D) SetUv(uv []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[2], uv) }
func (gdClass Polygon2D) GetUv() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygon2D[3]) }
func (gdClass Polygon2D) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[4], color) }
func (gdClass Polygon2D) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodPolygon2D[5]) }
func (gdClass Polygon2D) SetPolygons(polygons Array)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[6], polygons) }
func (gdClass Polygon2D) GetPolygons() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPolygon2D[7]) }
func (gdClass Polygon2D) SetVertexColors(vertex_colors []Color)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[8], vertex_colors) }
func (gdClass Polygon2D) GetVertexColors() []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodPolygon2D[9]) }
func (gdClass Polygon2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[10], texture) }
func (gdClass Polygon2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPolygon2D[11]) }
func (gdClass Polygon2D) SetTextureOffset(texture_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[12], texture_offset) }
func (gdClass Polygon2D) GetTextureOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[13]) }
func (gdClass Polygon2D) SetTextureRotation(texture_rotation float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[14], texture_rotation) }
func (gdClass Polygon2D) GetTextureRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygon2D[15]) }
func (gdClass Polygon2D) SetTextureScale(texture_scale Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[16], texture_scale) }
func (gdClass Polygon2D) GetTextureScale() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[17]) }
func (gdClass Polygon2D) SetInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[18], invert) }
func (gdClass Polygon2D) GetInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygon2D[19]) }
func (gdClass Polygon2D) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[20], antialiased) }
func (gdClass Polygon2D) GetAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygon2D[21]) }
func (gdClass Polygon2D) SetInvertBorder(invert_border float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[22], invert_border) }
func (gdClass Polygon2D) GetInvertBorder() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygon2D[23]) }
func (gdClass Polygon2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[24], offset) }
func (gdClass Polygon2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygon2D[25]) }
func (gdClass Polygon2D) AddBone(path NodePath, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[26], path, weights) }
func (gdClass Polygon2D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPolygon2D[27]) }
func (gdClass Polygon2D) GetBonePath(index int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPolygon2D[28], index) }
func (gdClass Polygon2D) GetBoneWeights(index int64) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodPolygon2D[29], index) }
func (gdClass Polygon2D) EraseBone(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[30], index) }
func (gdClass Polygon2D) ClearBones()  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[31]) }
func (gdClass Polygon2D) SetBonePath(index int64, path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[32], index, path) }
func (gdClass Polygon2D) SetBoneWeights(index int64, weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[33], index, weights) }
func (gdClass Polygon2D) SetSkeleton(skeleton NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[34], skeleton) }
func (gdClass Polygon2D) GetSkeleton() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodPolygon2D[35]) }
func (gdClass Polygon2D) SetInternalVertexCount(internal_vertex_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygon2D[36], internal_vertex_count) }
func (gdClass Polygon2D) GetInternalVertexCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPolygon2D[37]) }

type PolygonOccluder3D gdnative.Object
func (PolygonOccluder3D) class() string { return "PolygonOccluder3D\000" }

func (gdClass PolygonOccluder3D) Occluder3D() Occluder3D { return Occluder3D(gdClass) }

var methodPolygonOccluder3D [2]gdnative.Method
func (gdClass PolygonOccluder3D) SetPolygon(polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonOccluder3D[0], polygon) }
func (gdClass PolygonOccluder3D) GetPolygon() []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonOccluder3D[1]) }

type PolygonPathFinder gdnative.Object
func (PolygonPathFinder) class() string { return "PolygonPathFinder\000" }

func (gdClass PolygonPathFinder) Resource() Resource { return Resource(gdClass) }

var methodPolygonPathFinder [8]gdnative.Method
func (gdClass PolygonPathFinder) Setup(points []Vector2, connections []int32)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonPathFinder[0], points, connections) }
func (gdClass PolygonPathFinder) FindPath(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[1], from, to) }
func (gdClass PolygonPathFinder) GetIntersections(from Vector2, to Vector2) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[2], from, to) }
func (gdClass PolygonPathFinder) GetClosestPoint(point Vector2) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPolygonPathFinder[3], point) }
func (gdClass PolygonPathFinder) IsPointInside(point Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPolygonPathFinder[4], point) }
func (gdClass PolygonPathFinder) SetPointPenalty(idx int64, penalty float64)  { gdnative.Call(gdnative.Object(gdClass), methodPolygonPathFinder[5], idx, penalty) }
func (gdClass PolygonPathFinder) GetPointPenalty(idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPolygonPathFinder[6], idx) }
func (gdClass PolygonPathFinder) GetBounds() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodPolygonPathFinder[7]) }

type Popup gdnative.Object
func (Popup) class() string { return "Popup\000" }

func (gdClass Popup) Window() Window { return Window(gdClass) }


type PopupMenu gdnative.Object
func (PopupMenu) class() string { return "PopupMenu\000" }

func (gdClass PopupMenu) Popup() Popup { return Popup(gdClass) }

var methodPopupMenu [70]gdnative.Method
func (gdClass PopupMenu) AddItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[0], label, id, accel) }
func (gdClass PopupMenu) AddIconItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[1], texture, label, id, accel) }
func (gdClass PopupMenu) AddCheckItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[2], label, id, accel) }
func (gdClass PopupMenu) AddIconCheckItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[3], texture, label, id, accel) }
func (gdClass PopupMenu) AddRadioCheckItem(label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[4], label, id, accel) }
func (gdClass PopupMenu) AddIconRadioCheckItem(texture Texture2D, label string, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[5], texture, label, id, accel) }
func (gdClass PopupMenu) AddMultistateItem(label string, max_states int64, default_state int64, id int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[6], label, max_states, default_state, id, accel) }
func (gdClass PopupMenu) AddShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[7], shortcut, id, global) }
func (gdClass PopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[8], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddCheckShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[9], shortcut, id, global) }
func (gdClass PopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[10], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[11], shortcut, id, global) }
func (gdClass PopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[12], texture, shortcut, id, global) }
func (gdClass PopupMenu) AddSubmenuItem(label string, submenu string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[13], label, submenu, id) }
func (gdClass PopupMenu) SetItemText(index int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[14], index, text) }
func (gdClass PopupMenu) SetItemTextDirection(index int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[15], index, direction) }
func (gdClass PopupMenu) SetItemLanguage(index int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[16], index, language) }
func (gdClass PopupMenu) SetItemIcon(index int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[17], index, icon) }
func (gdClass PopupMenu) SetItemChecked(index int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[18], index, checked) }
func (gdClass PopupMenu) SetItemId(index int64, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[19], index, id) }
func (gdClass PopupMenu) SetItemAccelerator(index int64, accel Key)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[20], index, accel) }
func (gdClass PopupMenu) SetItemMetadata(index int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[21], index, metadata) }
func (gdClass PopupMenu) SetItemDisabled(index int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[22], index, disabled) }
func (gdClass PopupMenu) SetItemSubmenu(index int64, submenu string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[23], index, submenu) }
func (gdClass PopupMenu) SetItemAsSeparator(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[24], index, enable) }
func (gdClass PopupMenu) SetItemAsCheckable(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[25], index, enable) }
func (gdClass PopupMenu) SetItemAsRadioCheckable(index int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[26], index, enable) }
func (gdClass PopupMenu) SetItemTooltip(index int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[27], index, tooltip) }
func (gdClass PopupMenu) SetItemShortcut(index int64, shortcut Shortcut, global bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[28], index, shortcut, global) }
func (gdClass PopupMenu) SetItemIndent(index int64, indent int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[29], index, indent) }
func (gdClass PopupMenu) SetItemMultistate(index int64, state int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[30], index, state) }
func (gdClass PopupMenu) SetItemShortcutDisabled(index int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[31], index, disabled) }
func (gdClass PopupMenu) ToggleItemChecked(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[32], index) }
func (gdClass PopupMenu) ToggleItemMultistate(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[33], index) }
func (gdClass PopupMenu) GetItemText(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[34], index) }
func (gdClass PopupMenu) GetItemTextDirection(index int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodPopupMenu[35], index) }
func (gdClass PopupMenu) GetItemLanguage(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[36], index) }
func (gdClass PopupMenu) GetItemIcon(index int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodPopupMenu[37], index) }
func (gdClass PopupMenu) IsItemChecked(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[38], index) }
func (gdClass PopupMenu) GetItemId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[39], index) }
func (gdClass PopupMenu) GetItemIndex(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[40], id) }
func (gdClass PopupMenu) GetItemAccelerator(index int64) Key { return gdnative.Return[Key](gdnative.Object(gdClass), methodPopupMenu[41], index) }
func (gdClass PopupMenu) GetItemMetadata(index int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodPopupMenu[42], index) }
func (gdClass PopupMenu) IsItemDisabled(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[43], index) }
func (gdClass PopupMenu) GetItemSubmenu(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[44], index) }
func (gdClass PopupMenu) IsItemSeparator(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[45], index) }
func (gdClass PopupMenu) IsItemCheckable(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[46], index) }
func (gdClass PopupMenu) IsItemRadioCheckable(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[47], index) }
func (gdClass PopupMenu) IsItemShortcutDisabled(index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[48], index) }
func (gdClass PopupMenu) GetItemTooltip(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodPopupMenu[49], index) }
func (gdClass PopupMenu) GetItemShortcut(index int64) Shortcut { return gdnative.Return[Shortcut](gdnative.Object(gdClass), methodPopupMenu[50], index) }
func (gdClass PopupMenu) GetItemIndent(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[51], index) }
func (gdClass PopupMenu) SetCurrentIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[52], index) }
func (gdClass PopupMenu) GetCurrentIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[53]) }
func (gdClass PopupMenu) SetItemCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[54], count) }
func (gdClass PopupMenu) GetItemCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPopupMenu[55]) }
func (gdClass PopupMenu) ScrollToItem(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[56], index) }
func (gdClass PopupMenu) RemoveItem(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[57], index) }
func (gdClass PopupMenu) AddSeparator(label string, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[58], label, id) }
func (gdClass PopupMenu) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[59]) }
func (gdClass PopupMenu) SetHideOnItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[60], enable) }
func (gdClass PopupMenu) IsHideOnItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[61]) }
func (gdClass PopupMenu) SetHideOnCheckableItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[62], enable) }
func (gdClass PopupMenu) IsHideOnCheckableItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[63]) }
func (gdClass PopupMenu) SetHideOnStateItemSelection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[64], enable) }
func (gdClass PopupMenu) IsHideOnStateItemSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[65]) }
func (gdClass PopupMenu) SetSubmenuPopupDelay(seconds float64)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[66], seconds) }
func (gdClass PopupMenu) GetSubmenuPopupDelay() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPopupMenu[67]) }
func (gdClass PopupMenu) SetAllowSearch(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodPopupMenu[68], allow) }
func (gdClass PopupMenu) GetAllowSearch() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPopupMenu[69]) }

type PopupPanel gdnative.Object
func (PopupPanel) class() string { return "PopupPanel\000" }

func (gdClass PopupPanel) Popup() Popup { return Popup(gdClass) }


type PortableCompressedTexture2DCompressionMode int64

const (
	PortableCompressedTexture2DCompressionModeLossless PortableCompressedTexture2DCompressionMode = 0
	PortableCompressedTexture2DCompressionModeLossy PortableCompressedTexture2DCompressionMode = 1
	PortableCompressedTexture2DCompressionModeBasisUniversal PortableCompressedTexture2DCompressionMode = 2
	PortableCompressedTexture2DCompressionModeS3tc PortableCompressedTexture2DCompressionMode = 3
	PortableCompressedTexture2DCompressionModeEtc2 PortableCompressedTexture2DCompressionMode = 4
	PortableCompressedTexture2DCompressionModeBptc PortableCompressedTexture2DCompressionMode = 5
)

type PortableCompressedTexture2D gdnative.Object
func (PortableCompressedTexture2D) class() string { return "PortableCompressedTexture2D\000" }

func (gdClass PortableCompressedTexture2D) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodPortableCompressedTexture2D [9]gdnative.Method
func (gdClass PortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality float64)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[0], image, compression_mode, normal_map, lossy_quality) }
func (gdClass PortableCompressedTexture2D) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodPortableCompressedTexture2D[1]) }
func (gdClass PortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode { return gdnative.Return[PortableCompressedTexture2DCompressionMode](gdnative.Object(gdClass), methodPortableCompressedTexture2D[2]) }
func (gdClass PortableCompressedTexture2D) SetSizeOverride(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[3], size) }
func (gdClass PortableCompressedTexture2D) GetSizeOverride() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodPortableCompressedTexture2D[4]) }
func (gdClass PortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[5], keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingCompressedBuffer() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPortableCompressedTexture2D[6]) }
func (gdClass PortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool)  { gdnative.Call(gdnative.Object(gdClass), methodPortableCompressedTexture2D[7], keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPortableCompressedTexture2D[8]) }

type Position2D gdnative.Object
func (Position2D) class() string { return "Position2D\000" }

func (gdClass Position2D) Node2D() Node2D { return Node2D(gdClass) }

var methodPosition2D [2]gdnative.Method
func (gdClass Position2D) SetGizmoExtents(extents float64)  { gdnative.Call(gdnative.Object(gdClass), methodPosition2D[0], extents) }
func (gdClass Position2D) GetGizmoExtents() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPosition2D[1]) }

type Position3D gdnative.Object
func (Position3D) class() string { return "Position3D\000" }

func (gdClass Position3D) Node3D() Node3D { return Node3D(gdClass) }


type PrimitiveMesh gdnative.Object
func (PrimitiveMesh) class() string { return "PrimitiveMesh\000" }

func (gdClass PrimitiveMesh) Mesh() Mesh { return Mesh(gdClass) }

var methodPrimitiveMesh [7]gdnative.Method
func (gdClass PrimitiveMesh) virtual(val any, name string) any {	switch name {
	case "_create_mesh_array":
		i, ok := val.(interface{ CreateMeshArray() Array })
		if ok {
			return i.CreateMeshArray
		}
	}
	return nil
}
func (gdClass PrimitiveMesh) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[0], material) }
func (gdClass PrimitiveMesh) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodPrimitiveMesh[1]) }
func (gdClass PrimitiveMesh) GetMeshArrays() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodPrimitiveMesh[2]) }
func (gdClass PrimitiveMesh) SetCustomAabb(aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[3], aabb) }
func (gdClass PrimitiveMesh) GetCustomAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodPrimitiveMesh[4]) }
func (gdClass PrimitiveMesh) SetFlipFaces(flip_faces bool)  { gdnative.Call(gdnative.Object(gdClass), methodPrimitiveMesh[5], flip_faces) }
func (gdClass PrimitiveMesh) GetFlipFaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodPrimitiveMesh[6]) }

type PrismMesh gdnative.Object
func (PrismMesh) class() string { return "PrismMesh\000" }

func (gdClass PrismMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodPrismMesh [10]gdnative.Method
func (gdClass PrismMesh) SetLeftToRight(left_to_right float64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[0], left_to_right) }
func (gdClass PrismMesh) GetLeftToRight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodPrismMesh[1]) }
func (gdClass PrismMesh) SetSize(size Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[2], size) }
func (gdClass PrismMesh) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodPrismMesh[3]) }
func (gdClass PrismMesh) SetSubdivideWidth(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[4], segments) }
func (gdClass PrismMesh) GetSubdivideWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[5]) }
func (gdClass PrismMesh) SetSubdivideHeight(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[6], segments) }
func (gdClass PrismMesh) GetSubdivideHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[7]) }
func (gdClass PrismMesh) SetSubdivideDepth(segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodPrismMesh[8], segments) }
func (gdClass PrismMesh) GetSubdivideDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodPrismMesh[9]) }

type ProceduralSkyMaterial gdnative.Object
func (ProceduralSkyMaterial) class() string { return "ProceduralSkyMaterial\000" }

func (gdClass ProceduralSkyMaterial) Material() Material { return Material(gdClass) }

var methodProceduralSkyMaterial [26]gdnative.Method
func (gdClass ProceduralSkyMaterial) SetSkyTopColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[0], color) }
func (gdClass ProceduralSkyMaterial) GetSkyTopColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[1]) }
func (gdClass ProceduralSkyMaterial) SetSkyHorizonColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[2], color) }
func (gdClass ProceduralSkyMaterial) GetSkyHorizonColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[3]) }
func (gdClass ProceduralSkyMaterial) SetSkyCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[4], curve) }
func (gdClass ProceduralSkyMaterial) GetSkyCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[5]) }
func (gdClass ProceduralSkyMaterial) SetSkyEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[6], energy) }
func (gdClass ProceduralSkyMaterial) GetSkyEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[7]) }
func (gdClass ProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[8], sky_cover) }
func (gdClass ProceduralSkyMaterial) GetSkyCover() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodProceduralSkyMaterial[9]) }
func (gdClass ProceduralSkyMaterial) SetSkyCoverModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[10], color) }
func (gdClass ProceduralSkyMaterial) GetSkyCoverModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[11]) }
func (gdClass ProceduralSkyMaterial) SetGroundBottomColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[12], color) }
func (gdClass ProceduralSkyMaterial) GetGroundBottomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[13]) }
func (gdClass ProceduralSkyMaterial) SetGroundHorizonColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[14], color) }
func (gdClass ProceduralSkyMaterial) GetGroundHorizonColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodProceduralSkyMaterial[15]) }
func (gdClass ProceduralSkyMaterial) SetGroundCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[16], curve) }
func (gdClass ProceduralSkyMaterial) GetGroundCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[17]) }
func (gdClass ProceduralSkyMaterial) SetGroundEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[18], energy) }
func (gdClass ProceduralSkyMaterial) GetGroundEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[19]) }
func (gdClass ProceduralSkyMaterial) SetSunAngleMax(degrees float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[20], degrees) }
func (gdClass ProceduralSkyMaterial) GetSunAngleMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[21]) }
func (gdClass ProceduralSkyMaterial) SetSunCurve(curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[22], curve) }
func (gdClass ProceduralSkyMaterial) GetSunCurve() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodProceduralSkyMaterial[23]) }
func (gdClass ProceduralSkyMaterial) SetUseDebanding(use_debanding bool)  { gdnative.Call(gdnative.Object(gdClass), methodProceduralSkyMaterial[24], use_debanding) }
func (gdClass ProceduralSkyMaterial) GetUseDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProceduralSkyMaterial[25]) }

type ProgressBarFillMode int64

const (
	ProgressBarFillBeginToEnd ProgressBarFillMode = 0
	ProgressBarFillEndToBegin ProgressBarFillMode = 1
	ProgressBarFillTopToBottom ProgressBarFillMode = 2
	ProgressBarFillBottomToTop ProgressBarFillMode = 3
)

type ProgressBar gdnative.Object
func (ProgressBar) class() string { return "ProgressBar\000" }

func (gdClass ProgressBar) Range() Range { return Range(gdClass) }

var methodProgressBar [4]gdnative.Method
func (gdClass ProgressBar) SetFillMode(mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodProgressBar[0], mode) }
func (gdClass ProgressBar) GetFillMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodProgressBar[1]) }
func (gdClass ProgressBar) SetPercentVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodProgressBar[2], visible) }
func (gdClass ProgressBar) IsPercentVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProgressBar[3]) }

type ProjectSettings gdnative.Object
func (ProjectSettings) class() string { return "ProjectSettings\000" }

func (gdClass ProjectSettings) Object() Object { return Object(gdClass) }

var methodProjectSettings [13]gdnative.Method
func (gdClass ProjectSettings) HasSetting(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProjectSettings[0], name) }
func (gdClass ProjectSettings) SetSetting(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[1], name, value) }
func (gdClass ProjectSettings) GetSetting(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodProjectSettings[2], name) }
func (gdClass ProjectSettings) SetOrder(name string, position int64)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[3], name, position) }
func (gdClass ProjectSettings) GetOrder(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodProjectSettings[4], name) }
func (gdClass ProjectSettings) SetInitialValue(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[5], name, value) }
func (gdClass ProjectSettings) AddPropertyInfo(hint Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[6], hint) }
func (gdClass ProjectSettings) Clear(name string)  { gdnative.Call(gdnative.Object(gdClass), methodProjectSettings[7], name) }
func (gdClass ProjectSettings) LocalizePath(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodProjectSettings[8], path) }
func (gdClass ProjectSettings) GlobalizePath(path string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodProjectSettings[9], path) }
func (gdClass ProjectSettings) Save() error { return gdnative.Return[error](gdnative.Object(gdClass), methodProjectSettings[10]) }
func (gdClass ProjectSettings) LoadResourcePack(pack string, replace_files bool, offset int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodProjectSettings[11], pack, replace_files, offset) }
func (gdClass ProjectSettings) SaveCustom(file string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodProjectSettings[12], file) }

type PropertyTweener gdnative.Object
func (PropertyTweener) class() string { return "PropertyTweener\000" }

func (gdClass PropertyTweener) Tweener() Tweener { return Tweener(gdClass) }

var methodPropertyTweener [6]gdnative.Method
func (gdClass PropertyTweener) From(value any) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[0], value) }
func (gdClass PropertyTweener) FromCurrent() PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[1]) }
func (gdClass PropertyTweener) AsRelative() PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[2]) }
func (gdClass PropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[3], trans) }
func (gdClass PropertyTweener) SetEase(ease TweenEaseType) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[4], ease) }
func (gdClass PropertyTweener) SetDelay(delay float64) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodPropertyTweener[5], delay) }

type QuadMesh gdnative.Object
func (QuadMesh) class() string { return "QuadMesh\000" }

func (gdClass QuadMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodQuadMesh [4]gdnative.Method
func (gdClass QuadMesh) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodQuadMesh[0], size) }
func (gdClass QuadMesh) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodQuadMesh[1]) }
func (gdClass QuadMesh) SetCenterOffset(center_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodQuadMesh[2], center_offset) }
func (gdClass QuadMesh) GetCenterOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodQuadMesh[3]) }

type QuadOccluder3D gdnative.Object
func (QuadOccluder3D) class() string { return "QuadOccluder3D\000" }

func (gdClass QuadOccluder3D) Occluder3D() Occluder3D { return Occluder3D(gdClass) }

var methodQuadOccluder3D [2]gdnative.Method
func (gdClass QuadOccluder3D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodQuadOccluder3D[0], size) }
func (gdClass QuadOccluder3D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodQuadOccluder3D[1]) }

type RDAttachmentFormat gdnative.Object
func (RDAttachmentFormat) class() string { return "RDAttachmentFormat\000" }

func (gdClass RDAttachmentFormat) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDAttachmentFormat [6]gdnative.Method
func (gdClass RDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[0], p_member) }
func (gdClass RDAttachmentFormat) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDAttachmentFormat[1]) }
func (gdClass RDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[2], p_member) }
func (gdClass RDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDAttachmentFormat[3]) }
func (gdClass RDAttachmentFormat) SetUsageFlags(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDAttachmentFormat[4], p_member) }
func (gdClass RDAttachmentFormat) GetUsageFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDAttachmentFormat[5]) }

type RDFramebufferPass gdnative.Object
func (RDFramebufferPass) class() string { return "RDFramebufferPass\000" }

func (gdClass RDFramebufferPass) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDFramebufferPass [10]gdnative.Method
func (gdClass RDFramebufferPass) SetColorAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[0], p_member) }
func (gdClass RDFramebufferPass) GetColorAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[1]) }
func (gdClass RDFramebufferPass) SetInputAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[2], p_member) }
func (gdClass RDFramebufferPass) GetInputAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[3]) }
func (gdClass RDFramebufferPass) SetResolveAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[4], p_member) }
func (gdClass RDFramebufferPass) GetResolveAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[5]) }
func (gdClass RDFramebufferPass) SetPreserveAttachments(p_member []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[6], p_member) }
func (gdClass RDFramebufferPass) GetPreserveAttachments() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRDFramebufferPass[7]) }
func (gdClass RDFramebufferPass) SetDepthAttachment(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDFramebufferPass[8], p_member) }
func (gdClass RDFramebufferPass) GetDepthAttachment() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDFramebufferPass[9]) }

type RDPipelineColorBlendState gdnative.Object
func (RDPipelineColorBlendState) class() string { return "RDPipelineColorBlendState\000" }

func (gdClass RDPipelineColorBlendState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineColorBlendState [8]gdnative.Method
func (gdClass RDPipelineColorBlendState) SetEnableLogicOp(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[0], p_member) }
func (gdClass RDPipelineColorBlendState) GetEnableLogicOp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendState[1]) }
func (gdClass RDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[2], p_member) }
func (gdClass RDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation { return gdnative.Return[RenderingDeviceLogicOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendState[3]) }
func (gdClass RDPipelineColorBlendState) SetBlendConstant(p_member Color)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[4], p_member) }
func (gdClass RDPipelineColorBlendState) GetBlendConstant() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRDPipelineColorBlendState[5]) }
func (gdClass RDPipelineColorBlendState) SetAttachments(attachments Array)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendState[6], attachments) }
func (gdClass RDPipelineColorBlendState) GetAttachments() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDPipelineColorBlendState[7]) }

type RDPipelineColorBlendStateAttachment gdnative.Object
func (RDPipelineColorBlendStateAttachment) class() string { return "RDPipelineColorBlendStateAttachment\000" }

func (gdClass RDPipelineColorBlendStateAttachment) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineColorBlendStateAttachment [23]gdnative.Method
func (gdClass RDPipelineColorBlendStateAttachment) SetAsMix()  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[0]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[1], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetEnableBlend() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[2]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[3], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[4]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[5], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[6]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[7], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation { return gdnative.Return[RenderingDeviceBlendOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[8]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[9], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[10]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[11], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor { return gdnative.Return[RenderingDeviceBlendFactor](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[12]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[13], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation { return gdnative.Return[RenderingDeviceBlendOperation](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[14]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteR(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[15], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteR() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[16]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteG(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[17], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteG() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[18]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteB(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[19], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteB() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[20]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteA(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[21], p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteA() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineColorBlendStateAttachment[22]) }

type RDPipelineDepthStencilState gdnative.Object
func (RDPipelineDepthStencilState) class() string { return "RDPipelineDepthStencilState\000" }

func (gdClass RDPipelineDepthStencilState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineDepthStencilState [42]gdnative.Method
func (gdClass RDPipelineDepthStencilState) SetEnableDepthTest(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[0], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthTest() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[1]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[2], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthWrite() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[3]) }
func (gdClass RDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[4], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[5]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthRange(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[6], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthRange() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[7]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMin(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[8], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[9]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMax(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[10], p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[11]) }
func (gdClass RDPipelineDepthStencilState) SetEnableStencil(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[12], p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableStencil() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[13]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[14], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[15]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[16], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[17]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[18], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[19]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[20], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[21]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompareMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[22], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompareMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[23]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpWriteMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[24], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpWriteMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[25]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpReference(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[26], p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpReference() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[27]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[28], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[29]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[30], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[31]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[32], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation { return gdnative.Return[RenderingDeviceStencilOperation](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[33]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[34], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[35]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompareMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[36], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompareMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[37]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpWriteMask(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[38], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpWriteMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[39]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpReference(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineDepthStencilState[40], p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpReference() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineDepthStencilState[41]) }

type RDPipelineMultisampleState gdnative.Object
func (RDPipelineMultisampleState) class() string { return "RDPipelineMultisampleState\000" }

func (gdClass RDPipelineMultisampleState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineMultisampleState [12]gdnative.Method
func (gdClass RDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[0], p_member) }
func (gdClass RDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDPipelineMultisampleState[1]) }
func (gdClass RDPipelineMultisampleState) SetEnableSampleShading(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[2], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableSampleShading() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[3]) }
func (gdClass RDPipelineMultisampleState) SetMinSampleShading(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[4], p_member) }
func (gdClass RDPipelineMultisampleState) GetMinSampleShading() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineMultisampleState[5]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[6], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToCoverage() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[7]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[8], p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToOne() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineMultisampleState[9]) }
func (gdClass RDPipelineMultisampleState) SetSampleMasks(masks Array)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineMultisampleState[10], masks) }
func (gdClass RDPipelineMultisampleState) GetSampleMasks() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDPipelineMultisampleState[11]) }

type RDPipelineRasterizationState gdnative.Object
func (RDPipelineRasterizationState) class() string { return "RDPipelineRasterizationState\000" }

func (gdClass RDPipelineRasterizationState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineRasterizationState [22]gdnative.Method
func (gdClass RDPipelineRasterizationState) SetEnableDepthClamp(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[0], p_member) }
func (gdClass RDPipelineRasterizationState) GetEnableDepthClamp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[1]) }
func (gdClass RDPipelineRasterizationState) SetDiscardPrimitives(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[2], p_member) }
func (gdClass RDPipelineRasterizationState) GetDiscardPrimitives() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[3]) }
func (gdClass RDPipelineRasterizationState) SetWireframe(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[4], p_member) }
func (gdClass RDPipelineRasterizationState) GetWireframe() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[5]) }
func (gdClass RDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[6], p_member) }
func (gdClass RDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode { return gdnative.Return[RenderingDevicePolygonCullMode](gdnative.Object(gdClass), methodRDPipelineRasterizationState[7]) }
func (gdClass RDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[8], p_member) }
func (gdClass RDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace { return gdnative.Return[RenderingDevicePolygonFrontFace](gdnative.Object(gdClass), methodRDPipelineRasterizationState[9]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasEnable(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[10], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasEnable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDPipelineRasterizationState[11]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[12], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasConstantFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[13]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasClamp(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[14], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasClamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[15]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[16], p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasSlopeFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[17]) }
func (gdClass RDPipelineRasterizationState) SetLineWidth(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[18], p_member) }
func (gdClass RDPipelineRasterizationState) GetLineWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[19]) }
func (gdClass RDPipelineRasterizationState) SetPatchControlPoints(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineRasterizationState[20], p_member) }
func (gdClass RDPipelineRasterizationState) GetPatchControlPoints() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineRasterizationState[21]) }

type RDPipelineSpecializationConstant gdnative.Object
func (RDPipelineSpecializationConstant) class() string { return "RDPipelineSpecializationConstant\000" }

func (gdClass RDPipelineSpecializationConstant) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDPipelineSpecializationConstant [4]gdnative.Method
func (gdClass RDPipelineSpecializationConstant) SetValue(value any)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[0], value) }
func (gdClass RDPipelineSpecializationConstant) GetValue() any { return gdnative.Return[any](gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[1]) }
func (gdClass RDPipelineSpecializationConstant) SetConstantId(constant_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[2], constant_id) }
func (gdClass RDPipelineSpecializationConstant) GetConstantId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDPipelineSpecializationConstant[3]) }

type RDSamplerState gdnative.Object
func (RDSamplerState) class() string { return "RDSamplerState\000" }

func (gdClass RDSamplerState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDSamplerState [30]gdnative.Method
func (gdClass RDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[0], p_member) }
func (gdClass RDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[1]) }
func (gdClass RDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[2], p_member) }
func (gdClass RDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[3]) }
func (gdClass RDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[4], p_member) }
func (gdClass RDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter { return gdnative.Return[RenderingDeviceSamplerFilter](gdnative.Object(gdClass), methodRDSamplerState[5]) }
func (gdClass RDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[6], p_member) }
func (gdClass RDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[7]) }
func (gdClass RDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[8], p_member) }
func (gdClass RDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[9]) }
func (gdClass RDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[10], p_member) }
func (gdClass RDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode { return gdnative.Return[RenderingDeviceSamplerRepeatMode](gdnative.Object(gdClass), methodRDSamplerState[11]) }
func (gdClass RDSamplerState) SetLodBias(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[12], p_member) }
func (gdClass RDSamplerState) GetLodBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[13]) }
func (gdClass RDSamplerState) SetUseAnisotropy(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[14], p_member) }
func (gdClass RDSamplerState) GetUseAnisotropy() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[15]) }
func (gdClass RDSamplerState) SetAnisotropyMax(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[16], p_member) }
func (gdClass RDSamplerState) GetAnisotropyMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[17]) }
func (gdClass RDSamplerState) SetEnableCompare(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[18], p_member) }
func (gdClass RDSamplerState) GetEnableCompare() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[19]) }
func (gdClass RDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[20], p_member) }
func (gdClass RDSamplerState) GetCompareOp() RenderingDeviceCompareOperator { return gdnative.Return[RenderingDeviceCompareOperator](gdnative.Object(gdClass), methodRDSamplerState[21]) }
func (gdClass RDSamplerState) SetMinLod(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[22], p_member) }
func (gdClass RDSamplerState) GetMinLod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[23]) }
func (gdClass RDSamplerState) SetMaxLod(p_member float64)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[24], p_member) }
func (gdClass RDSamplerState) GetMaxLod() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRDSamplerState[25]) }
func (gdClass RDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[26], p_member) }
func (gdClass RDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor { return gdnative.Return[RenderingDeviceSamplerBorderColor](gdnative.Object(gdClass), methodRDSamplerState[27]) }
func (gdClass RDSamplerState) SetUnnormalizedUvw(p_member bool)  { gdnative.Call(gdnative.Object(gdClass), methodRDSamplerState[28], p_member) }
func (gdClass RDSamplerState) GetUnnormalizedUvw() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRDSamplerState[29]) }

type RDShaderFile gdnative.Object
func (RDShaderFile) class() string { return "RDShaderFile\000" }

func (gdClass RDShaderFile) Resource() Resource { return Resource(gdClass) }

var methodRDShaderFile [5]gdnative.Method
func (gdClass RDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderFile[0], bytecode, version) }
func (gdClass RDShaderFile) GetSpirv(version string) RDShaderSPIRV { return gdnative.Return[RDShaderSPIRV](gdnative.Object(gdClass), methodRDShaderFile[1], version) }
func (gdClass RDShaderFile) GetVersionList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodRDShaderFile[2]) }
func (gdClass RDShaderFile) SetBaseError(error string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderFile[3], error) }
func (gdClass RDShaderFile) GetBaseError() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderFile[4]) }

type RDShaderSPIRV gdnative.Object
func (RDShaderSPIRV) class() string { return "RDShaderSPIRV\000" }

func (gdClass RDShaderSPIRV) Resource() Resource { return Resource(gdClass) }

var methodRDShaderSPIRV [4]gdnative.Method
func (gdClass RDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSPIRV[0], stage, bytecode) }
func (gdClass RDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRDShaderSPIRV[1], stage) }
func (gdClass RDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSPIRV[2], stage, compile_error) }
func (gdClass RDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderSPIRV[3], stage) }

type RDShaderSource gdnative.Object
func (RDShaderSource) class() string { return "RDShaderSource\000" }

func (gdClass RDShaderSource) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDShaderSource [4]gdnative.Method
func (gdClass RDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source string)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSource[0], stage, source) }
func (gdClass RDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRDShaderSource[1], stage) }
func (gdClass RDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage)  { gdnative.Call(gdnative.Object(gdClass), methodRDShaderSource[2], language) }
func (gdClass RDShaderSource) GetLanguage() RenderingDeviceShaderLanguage { return gdnative.Return[RenderingDeviceShaderLanguage](gdnative.Object(gdClass), methodRDShaderSource[3]) }

type RDTextureFormat gdnative.Object
func (RDTextureFormat) class() string { return "RDTextureFormat\000" }

func (gdClass RDTextureFormat) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDTextureFormat [20]gdnative.Method
func (gdClass RDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[0], p_member) }
func (gdClass RDTextureFormat) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDTextureFormat[1]) }
func (gdClass RDTextureFormat) SetWidth(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[2], p_member) }
func (gdClass RDTextureFormat) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[3]) }
func (gdClass RDTextureFormat) SetHeight(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[4], p_member) }
func (gdClass RDTextureFormat) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[5]) }
func (gdClass RDTextureFormat) SetDepth(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[6], p_member) }
func (gdClass RDTextureFormat) GetDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[7]) }
func (gdClass RDTextureFormat) SetArrayLayers(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[8], p_member) }
func (gdClass RDTextureFormat) GetArrayLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[9]) }
func (gdClass RDTextureFormat) SetMipmaps(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[10], p_member) }
func (gdClass RDTextureFormat) GetMipmaps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[11]) }
func (gdClass RDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[12], p_member) }
func (gdClass RDTextureFormat) GetTextureType() RenderingDeviceTextureType { return gdnative.Return[RenderingDeviceTextureType](gdnative.Object(gdClass), methodRDTextureFormat[13]) }
func (gdClass RDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[14], p_member) }
func (gdClass RDTextureFormat) GetSamples() RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRDTextureFormat[15]) }
func (gdClass RDTextureFormat) SetUsageBits(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[16], p_member) }
func (gdClass RDTextureFormat) GetUsageBits() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDTextureFormat[17]) }
func (gdClass RDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[18], format) }
func (gdClass RDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureFormat[19], format) }

type RDTextureView gdnative.Object
func (RDTextureView) class() string { return "RDTextureView\000" }

func (gdClass RDTextureView) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDTextureView [10]gdnative.Method
func (gdClass RDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[0], p_member) }
func (gdClass RDTextureView) GetFormatOverride() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDTextureView[1]) }
func (gdClass RDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[2], p_member) }
func (gdClass RDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[3]) }
func (gdClass RDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[4], p_member) }
func (gdClass RDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[5]) }
func (gdClass RDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[6], p_member) }
func (gdClass RDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[7]) }
func (gdClass RDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle)  { gdnative.Call(gdnative.Object(gdClass), methodRDTextureView[8], p_member) }
func (gdClass RDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle { return gdnative.Return[RenderingDeviceTextureSwizzle](gdnative.Object(gdClass), methodRDTextureView[9]) }

type RDUniform gdnative.Object
func (RDUniform) class() string { return "RDUniform\000" }

func (gdClass RDUniform) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDUniform [7]gdnative.Method
func (gdClass RDUniform) SetUniformType(p_member RenderingDeviceUniformType)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[0], p_member) }
func (gdClass RDUniform) GetUniformType() RenderingDeviceUniformType { return gdnative.Return[RenderingDeviceUniformType](gdnative.Object(gdClass), methodRDUniform[1]) }
func (gdClass RDUniform) SetBinding(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[2], p_member) }
func (gdClass RDUniform) GetBinding() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDUniform[3]) }
func (gdClass RDUniform) AddId(id RID)  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[4], id) }
func (gdClass RDUniform) ClearIds()  { gdnative.Call(gdnative.Object(gdClass), methodRDUniform[5]) }
func (gdClass RDUniform) GetIds() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRDUniform[6]) }

type RDVertexAttribute gdnative.Object
func (RDVertexAttribute) class() string { return "RDVertexAttribute\000" }

func (gdClass RDVertexAttribute) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRDVertexAttribute [10]gdnative.Method
func (gdClass RDVertexAttribute) SetLocation(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[0], p_member) }
func (gdClass RDVertexAttribute) GetLocation() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[1]) }
func (gdClass RDVertexAttribute) SetOffset(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[2], p_member) }
func (gdClass RDVertexAttribute) GetOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[3]) }
func (gdClass RDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[4], p_member) }
func (gdClass RDVertexAttribute) GetFormat() RenderingDeviceDataFormat { return gdnative.Return[RenderingDeviceDataFormat](gdnative.Object(gdClass), methodRDVertexAttribute[5]) }
func (gdClass RDVertexAttribute) SetStride(p_member int64)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[6], p_member) }
func (gdClass RDVertexAttribute) GetStride() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRDVertexAttribute[7]) }
func (gdClass RDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency)  { gdnative.Call(gdnative.Object(gdClass), methodRDVertexAttribute[8], p_member) }
func (gdClass RDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency { return gdnative.Return[RenderingDeviceVertexFrequency](gdnative.Object(gdClass), methodRDVertexAttribute[9]) }

type RandomNumberGenerator gdnative.Object
func (RandomNumberGenerator) class() string { return "RandomNumberGenerator\000" }

func (gdClass RandomNumberGenerator) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRandomNumberGenerator [10]gdnative.Method
func (gdClass RandomNumberGenerator) SetSeed(seed int64)  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[0], seed) }
func (gdClass RandomNumberGenerator) GetSeed() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[1]) }
func (gdClass RandomNumberGenerator) SetState(state int64)  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[2], state) }
func (gdClass RandomNumberGenerator) GetState() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[3]) }
func (gdClass RandomNumberGenerator) Randi() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[4]) }
func (gdClass RandomNumberGenerator) Randf() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[5]) }
func (gdClass RandomNumberGenerator) Randfn(mean float64, deviation float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[6], mean, deviation) }
func (gdClass RandomNumberGenerator) RandfRange(from float64, to float64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRandomNumberGenerator[7], from, to) }
func (gdClass RandomNumberGenerator) RandiRange(from int64, to int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRandomNumberGenerator[8], from, to) }
func (gdClass RandomNumberGenerator) Randomize()  { gdnative.Call(gdnative.Object(gdClass), methodRandomNumberGenerator[9]) }

type Range gdnative.Object
func (Range) class() string { return "Range\000" }

func (gdClass Range) Control() Control { return Control(gdClass) }

var methodRange [22]gdnative.Method
func (gdClass Range) virtual(val any, name string) any {	switch name {
	case "_value_changed":
		i, ok := val.(interface{ ValueChanged(new_value float64)  })
		if ok {
			return i.ValueChanged
		}
	}
	return nil
}
func (gdClass Range) GetValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[0]) }
func (gdClass Range) GetMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[1]) }
func (gdClass Range) GetMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[2]) }
func (gdClass Range) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[3]) }
func (gdClass Range) GetPage() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[4]) }
func (gdClass Range) GetAsRatio() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRange[5]) }
func (gdClass Range) SetValue(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[6], value) }
func (gdClass Range) SetMin(minimum float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[7], minimum) }
func (gdClass Range) SetMax(maximum float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[8], maximum) }
func (gdClass Range) SetStep(step float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[9], step) }
func (gdClass Range) SetPage(pagesize float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[10], pagesize) }
func (gdClass Range) SetAsRatio(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRange[11], value) }
func (gdClass Range) SetUseRoundedValues(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[12], enabled) }
func (gdClass Range) IsUsingRoundedValues() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[13]) }
func (gdClass Range) SetExpRatio(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[14], enabled) }
func (gdClass Range) IsRatioExp() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[15]) }
func (gdClass Range) SetAllowGreater(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[16], allow) }
func (gdClass Range) IsGreaterAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[17]) }
func (gdClass Range) SetAllowLesser(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRange[18], allow) }
func (gdClass Range) IsLesserAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRange[19]) }
func (gdClass Range) Share(with Node)  { gdnative.Call(gdnative.Object(gdClass), methodRange[20], with) }
func (gdClass Range) Unshare()  { gdnative.Call(gdnative.Object(gdClass), methodRange[21]) }

type RayCast2D gdnative.Object
func (RayCast2D) class() string { return "RayCast2D\000" }

func (gdClass RayCast2D) Node2D() Node2D { return Node2D(gdClass) }

var methodRayCast2D [27]gdnative.Method
func (gdClass RayCast2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[0], enabled) }
func (gdClass RayCast2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[1]) }
func (gdClass RayCast2D) SetTargetPosition(local_point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[2], local_point) }
func (gdClass RayCast2D) GetTargetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[3]) }
func (gdClass RayCast2D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[4]) }
func (gdClass RayCast2D) ForceRaycastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[5]) }
func (gdClass RayCast2D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodRayCast2D[6]) }
func (gdClass RayCast2D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast2D[7]) }
func (gdClass RayCast2D) GetCollisionPoint() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[8]) }
func (gdClass RayCast2D) GetCollisionNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRayCast2D[9]) }
func (gdClass RayCast2D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[10], rid) }
func (gdClass RayCast2D) AddException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[11], node) }
func (gdClass RayCast2D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[12], rid) }
func (gdClass RayCast2D) RemoveException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[13], node) }
func (gdClass RayCast2D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[14]) }
func (gdClass RayCast2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[15], mask) }
func (gdClass RayCast2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast2D[16]) }
func (gdClass RayCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[17], layer_number, value) }
func (gdClass RayCast2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[18], layer_number) }
func (gdClass RayCast2D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[19], mask) }
func (gdClass RayCast2D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[20]) }
func (gdClass RayCast2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[21], enable) }
func (gdClass RayCast2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[22]) }
func (gdClass RayCast2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[23], enable) }
func (gdClass RayCast2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[24]) }
func (gdClass RayCast2D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast2D[25], enable) }
func (gdClass RayCast2D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast2D[26]) }

type RayCast3D gdnative.Object
func (RayCast3D) class() string { return "RayCast3D\000" }

func (gdClass RayCast3D) Node3D() Node3D { return Node3D(gdClass) }

var methodRayCast3D [31]gdnative.Method
func (gdClass RayCast3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[0], enabled) }
func (gdClass RayCast3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[1]) }
func (gdClass RayCast3D) SetTargetPosition(local_point Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[2], local_point) }
func (gdClass RayCast3D) GetTargetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[3]) }
func (gdClass RayCast3D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[4]) }
func (gdClass RayCast3D) ForceRaycastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[5]) }
func (gdClass RayCast3D) GetCollider() Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodRayCast3D[6]) }
func (gdClass RayCast3D) GetColliderShape() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[7]) }
func (gdClass RayCast3D) GetCollisionPoint() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[8]) }
func (gdClass RayCast3D) GetCollisionNormal() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRayCast3D[9]) }
func (gdClass RayCast3D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[10], rid) }
func (gdClass RayCast3D) AddException(node CollisionObject3D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[11], node) }
func (gdClass RayCast3D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[12], rid) }
func (gdClass RayCast3D) RemoveException(node CollisionObject3D)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[13], node) }
func (gdClass RayCast3D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[14]) }
func (gdClass RayCast3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[15], mask) }
func (gdClass RayCast3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[16]) }
func (gdClass RayCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[17], layer_number, value) }
func (gdClass RayCast3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[18], layer_number) }
func (gdClass RayCast3D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[19], mask) }
func (gdClass RayCast3D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[20]) }
func (gdClass RayCast3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[21], enable) }
func (gdClass RayCast3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[22]) }
func (gdClass RayCast3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[23], enable) }
func (gdClass RayCast3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[24]) }
func (gdClass RayCast3D) SetHitFromInside(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[25], enable) }
func (gdClass RayCast3D) IsHitFromInsideEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRayCast3D[26]) }
func (gdClass RayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[27], debug_shape_custom_color) }
func (gdClass RayCast3D) GetDebugShapeCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRayCast3D[28]) }
func (gdClass RayCast3D) SetDebugShapeThickness(debug_shape_thickness int64)  { gdnative.Call(gdnative.Object(gdClass), methodRayCast3D[29], debug_shape_thickness) }
func (gdClass RayCast3D) GetDebugShapeThickness() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRayCast3D[30]) }

type RectangleShape2D gdnative.Object
func (RectangleShape2D) class() string { return "RectangleShape2D\000" }

func (gdClass RectangleShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodRectangleShape2D [2]gdnative.Method
func (gdClass RectangleShape2D) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRectangleShape2D[0], size) }
func (gdClass RectangleShape2D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRectangleShape2D[1]) }

type RefCounted gdnative.Object
func (RefCounted) class() string { return "RefCounted\000" }

func (gdClass RefCounted) Object() Object { return Object(gdClass) }

var methodRefCounted [3]gdnative.Method
func (gdClass RefCounted) InitRef() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[0]) }
func (gdClass RefCounted) Reference() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[1]) }
func (gdClass RefCounted) Unreference() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRefCounted[2]) }

type ReferenceRect gdnative.Object
func (ReferenceRect) class() string { return "ReferenceRect\000" }

func (gdClass ReferenceRect) Control() Control { return Control(gdClass) }

var methodReferenceRect [6]gdnative.Method
func (gdClass ReferenceRect) GetBorderColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodReferenceRect[0]) }
func (gdClass ReferenceRect) SetBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[1], color) }
func (gdClass ReferenceRect) GetBorderWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReferenceRect[2]) }
func (gdClass ReferenceRect) SetBorderWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[3], width) }
func (gdClass ReferenceRect) GetEditorOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReferenceRect[4]) }
func (gdClass ReferenceRect) SetEditorOnly(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodReferenceRect[5], enabled) }

type ReflectionProbeUpdateMode int64

const (
	ReflectionProbeUpdateOnce ReflectionProbeUpdateMode = 0
	ReflectionProbeUpdateAlways ReflectionProbeUpdateMode = 1
)

type ReflectionProbeAmbientMode int64

const (
	ReflectionProbeAmbientDisabled ReflectionProbeAmbientMode = 0
	ReflectionProbeAmbientEnvironment ReflectionProbeAmbientMode = 1
	ReflectionProbeAmbientColor ReflectionProbeAmbientMode = 2
)

type ReflectionProbe gdnative.Object
func (ReflectionProbe) class() string { return "ReflectionProbe\000" }

func (gdClass ReflectionProbe) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodReflectionProbe [26]gdnative.Method
func (gdClass ReflectionProbe) SetIntensity(intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[0], intensity) }
func (gdClass ReflectionProbe) GetIntensity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[1]) }
func (gdClass ReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[2], ambient) }
func (gdClass ReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode { return gdnative.Return[ReflectionProbeAmbientMode](gdnative.Object(gdClass), methodReflectionProbe[3]) }
func (gdClass ReflectionProbe) SetAmbientColor(ambient Color)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[4], ambient) }
func (gdClass ReflectionProbe) GetAmbientColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodReflectionProbe[5]) }
func (gdClass ReflectionProbe) SetAmbientColorEnergy(ambient_energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[6], ambient_energy) }
func (gdClass ReflectionProbe) GetAmbientColorEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[7]) }
func (gdClass ReflectionProbe) SetMaxDistance(max_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[8], max_distance) }
func (gdClass ReflectionProbe) GetMaxDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[9]) }
func (gdClass ReflectionProbe) SetMeshLodThreshold(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[10], ratio) }
func (gdClass ReflectionProbe) GetMeshLodThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodReflectionProbe[11]) }
func (gdClass ReflectionProbe) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[12], extents) }
func (gdClass ReflectionProbe) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodReflectionProbe[13]) }
func (gdClass ReflectionProbe) SetOriginOffset(origin_offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[14], origin_offset) }
func (gdClass ReflectionProbe) GetOriginOffset() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodReflectionProbe[15]) }
func (gdClass ReflectionProbe) SetAsInterior(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[16], enable) }
func (gdClass ReflectionProbe) IsSetAsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[17]) }
func (gdClass ReflectionProbe) SetEnableBoxProjection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[18], enable) }
func (gdClass ReflectionProbe) IsBoxProjectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[19]) }
func (gdClass ReflectionProbe) SetEnableShadows(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[20], enable) }
func (gdClass ReflectionProbe) AreShadowsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodReflectionProbe[21]) }
func (gdClass ReflectionProbe) SetCullMask(layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[22], layers) }
func (gdClass ReflectionProbe) GetCullMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodReflectionProbe[23]) }
func (gdClass ReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodReflectionProbe[24], mode) }
func (gdClass ReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode { return gdnative.Return[ReflectionProbeUpdateMode](gdnative.Object(gdClass), methodReflectionProbe[25]) }

type RegEx gdnative.Object
func (RegEx) class() string { return "RegEx\000" }

func (gdClass RegEx) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRegEx [10]gdnative.Method
func (gdClass RegEx) CreateFromString(pattern string) RegEx { return gdnative.Return[RegEx](gdnative.Object(gdClass), methodRegEx[0], pattern) }
func (gdClass RegEx) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodRegEx[1]) }
func (gdClass RegEx) Compile(pattern string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRegEx[2], pattern) }
func (gdClass RegEx) Search(subject string, offset int64, end int64) RegExMatch { return gdnative.Return[RegExMatch](gdnative.Object(gdClass), methodRegEx[3], subject, offset, end) }
func (gdClass RegEx) SearchAll(subject string, offset int64, end int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegEx[4], subject, offset, end) }
func (gdClass RegEx) Sub(subject string, replacement string, all bool, offset int64, end int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegEx[5], subject, replacement, all, offset, end) }
func (gdClass RegEx) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRegEx[6]) }
func (gdClass RegEx) GetPattern() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegEx[7]) }
func (gdClass RegEx) GetGroupCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegEx[8]) }
func (gdClass RegEx) GetNames() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegEx[9]) }

type RegExMatch gdnative.Object
func (RegExMatch) class() string { return "RegExMatch\000" }

func (gdClass RegExMatch) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodRegExMatch [7]gdnative.Method
func (gdClass RegExMatch) GetSubject() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegExMatch[0]) }
func (gdClass RegExMatch) GetGroupCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[1]) }
func (gdClass RegExMatch) GetNames() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRegExMatch[2]) }
func (gdClass RegExMatch) GetStrings() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRegExMatch[3]) }
func (gdClass RegExMatch) GetString(name any) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRegExMatch[4], name) }
func (gdClass RegExMatch) GetStart(name any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[5], name) }
func (gdClass RegExMatch) GetEnd(name any) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRegExMatch[6], name) }

type RemoteTransform2D gdnative.Object
func (RemoteTransform2D) class() string { return "RemoteTransform2D\000" }

func (gdClass RemoteTransform2D) Node2D() Node2D { return Node2D(gdClass) }

var methodRemoteTransform2D [11]gdnative.Method
func (gdClass RemoteTransform2D) SetRemoteNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[0], path) }
func (gdClass RemoteTransform2D) GetRemoteNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRemoteTransform2D[1]) }
func (gdClass RemoteTransform2D) ForceUpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[2]) }
func (gdClass RemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[3], use_global_coordinates) }
func (gdClass RemoteTransform2D) GetUseGlobalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[4]) }
func (gdClass RemoteTransform2D) SetUpdatePosition(update_remote_position bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[5], update_remote_position) }
func (gdClass RemoteTransform2D) GetUpdatePosition() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[6]) }
func (gdClass RemoteTransform2D) SetUpdateRotation(update_remote_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[7], update_remote_rotation) }
func (gdClass RemoteTransform2D) GetUpdateRotation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[8]) }
func (gdClass RemoteTransform2D) SetUpdateScale(update_remote_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform2D[9], update_remote_scale) }
func (gdClass RemoteTransform2D) GetUpdateScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform2D[10]) }

type RemoteTransform3D gdnative.Object
func (RemoteTransform3D) class() string { return "RemoteTransform3D\000" }

func (gdClass RemoteTransform3D) Node3D() Node3D { return Node3D(gdClass) }

var methodRemoteTransform3D [11]gdnative.Method
func (gdClass RemoteTransform3D) SetRemoteNode(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[0], path) }
func (gdClass RemoteTransform3D) GetRemoteNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRemoteTransform3D[1]) }
func (gdClass RemoteTransform3D) ForceUpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[2]) }
func (gdClass RemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[3], use_global_coordinates) }
func (gdClass RemoteTransform3D) GetUseGlobalCoordinates() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[4]) }
func (gdClass RemoteTransform3D) SetUpdatePosition(update_remote_position bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[5], update_remote_position) }
func (gdClass RemoteTransform3D) GetUpdatePosition() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[6]) }
func (gdClass RemoteTransform3D) SetUpdateRotation(update_remote_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[7], update_remote_rotation) }
func (gdClass RemoteTransform3D) GetUpdateRotation() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[8]) }
func (gdClass RemoteTransform3D) SetUpdateScale(update_remote_scale bool)  { gdnative.Call(gdnative.Object(gdClass), methodRemoteTransform3D[9], update_remote_scale) }
func (gdClass RemoteTransform3D) GetUpdateScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRemoteTransform3D[10]) }

type RenderingDeviceDeviceType int64

const (
	RenderingDeviceDeviceTypeOther RenderingDeviceDeviceType = 0
	RenderingDeviceDeviceTypeIntegratedGpu RenderingDeviceDeviceType = 1
	RenderingDeviceDeviceTypeDiscreteGpu RenderingDeviceDeviceType = 2
	RenderingDeviceDeviceTypeVirtualGpu RenderingDeviceDeviceType = 3
	RenderingDeviceDeviceTypeCpu RenderingDeviceDeviceType = 4
	RenderingDeviceDeviceTypeMax RenderingDeviceDeviceType = 5
)

type RenderingDeviceDriverResource int64

const (
	RenderingDeviceDriverResourceVulkanDevice RenderingDeviceDriverResource = 0
	RenderingDeviceDriverResourceVulkanPhysicalDevice RenderingDeviceDriverResource = 1
	RenderingDeviceDriverResourceVulkanInstance RenderingDeviceDriverResource = 2
	RenderingDeviceDriverResourceVulkanQueue RenderingDeviceDriverResource = 3
	RenderingDeviceDriverResourceVulkanQueueFamilyIndex RenderingDeviceDriverResource = 4
	RenderingDeviceDriverResourceVulkanImage RenderingDeviceDriverResource = 5
	RenderingDeviceDriverResourceVulkanImageView RenderingDeviceDriverResource = 6
	RenderingDeviceDriverResourceVulkanImageNativeTextureFormat RenderingDeviceDriverResource = 7
	RenderingDeviceDriverResourceVulkanSampler RenderingDeviceDriverResource = 8
	RenderingDeviceDriverResourceVulkanDescriptorSet RenderingDeviceDriverResource = 9
	RenderingDeviceDriverResourceVulkanBuffer RenderingDeviceDriverResource = 10
	RenderingDeviceDriverResourceVulkanComputePipeline RenderingDeviceDriverResource = 11
	RenderingDeviceDriverResourceVulkanRenderPipeline RenderingDeviceDriverResource = 12
)

type RenderingDeviceDataFormat int64

const (
	RenderingDeviceDataFormatR4g4UnormPack8 RenderingDeviceDataFormat = 0
	RenderingDeviceDataFormatR4g4b4a4UnormPack16 RenderingDeviceDataFormat = 1
	RenderingDeviceDataFormatB4g4r4a4UnormPack16 RenderingDeviceDataFormat = 2
	RenderingDeviceDataFormatR5g6b5UnormPack16 RenderingDeviceDataFormat = 3
	RenderingDeviceDataFormatB5g6r5UnormPack16 RenderingDeviceDataFormat = 4
	RenderingDeviceDataFormatR5g5b5a1UnormPack16 RenderingDeviceDataFormat = 5
	RenderingDeviceDataFormatB5g5r5a1UnormPack16 RenderingDeviceDataFormat = 6
	RenderingDeviceDataFormatA1r5g5b5UnormPack16 RenderingDeviceDataFormat = 7
	RenderingDeviceDataFormatR8Unorm RenderingDeviceDataFormat = 8
	RenderingDeviceDataFormatR8Snorm RenderingDeviceDataFormat = 9
	RenderingDeviceDataFormatR8Uscaled RenderingDeviceDataFormat = 10
	RenderingDeviceDataFormatR8Sscaled RenderingDeviceDataFormat = 11
	RenderingDeviceDataFormatR8Uint RenderingDeviceDataFormat = 12
	RenderingDeviceDataFormatR8Sint RenderingDeviceDataFormat = 13
	RenderingDeviceDataFormatR8Srgb RenderingDeviceDataFormat = 14
	RenderingDeviceDataFormatR8g8Unorm RenderingDeviceDataFormat = 15
	RenderingDeviceDataFormatR8g8Snorm RenderingDeviceDataFormat = 16
	RenderingDeviceDataFormatR8g8Uscaled RenderingDeviceDataFormat = 17
	RenderingDeviceDataFormatR8g8Sscaled RenderingDeviceDataFormat = 18
	RenderingDeviceDataFormatR8g8Uint RenderingDeviceDataFormat = 19
	RenderingDeviceDataFormatR8g8Sint RenderingDeviceDataFormat = 20
	RenderingDeviceDataFormatR8g8Srgb RenderingDeviceDataFormat = 21
	RenderingDeviceDataFormatR8g8b8Unorm RenderingDeviceDataFormat = 22
	RenderingDeviceDataFormatR8g8b8Snorm RenderingDeviceDataFormat = 23
	RenderingDeviceDataFormatR8g8b8Uscaled RenderingDeviceDataFormat = 24
	RenderingDeviceDataFormatR8g8b8Sscaled RenderingDeviceDataFormat = 25
	RenderingDeviceDataFormatR8g8b8Uint RenderingDeviceDataFormat = 26
	RenderingDeviceDataFormatR8g8b8Sint RenderingDeviceDataFormat = 27
	RenderingDeviceDataFormatR8g8b8Srgb RenderingDeviceDataFormat = 28
	RenderingDeviceDataFormatB8g8r8Unorm RenderingDeviceDataFormat = 29
	RenderingDeviceDataFormatB8g8r8Snorm RenderingDeviceDataFormat = 30
	RenderingDeviceDataFormatB8g8r8Uscaled RenderingDeviceDataFormat = 31
	RenderingDeviceDataFormatB8g8r8Sscaled RenderingDeviceDataFormat = 32
	RenderingDeviceDataFormatB8g8r8Uint RenderingDeviceDataFormat = 33
	RenderingDeviceDataFormatB8g8r8Sint RenderingDeviceDataFormat = 34
	RenderingDeviceDataFormatB8g8r8Srgb RenderingDeviceDataFormat = 35
	RenderingDeviceDataFormatR8g8b8a8Unorm RenderingDeviceDataFormat = 36
	RenderingDeviceDataFormatR8g8b8a8Snorm RenderingDeviceDataFormat = 37
	RenderingDeviceDataFormatR8g8b8a8Uscaled RenderingDeviceDataFormat = 38
	RenderingDeviceDataFormatR8g8b8a8Sscaled RenderingDeviceDataFormat = 39
	RenderingDeviceDataFormatR8g8b8a8Uint RenderingDeviceDataFormat = 40
	RenderingDeviceDataFormatR8g8b8a8Sint RenderingDeviceDataFormat = 41
	RenderingDeviceDataFormatR8g8b8a8Srgb RenderingDeviceDataFormat = 42
	RenderingDeviceDataFormatB8g8r8a8Unorm RenderingDeviceDataFormat = 43
	RenderingDeviceDataFormatB8g8r8a8Snorm RenderingDeviceDataFormat = 44
	RenderingDeviceDataFormatB8g8r8a8Uscaled RenderingDeviceDataFormat = 45
	RenderingDeviceDataFormatB8g8r8a8Sscaled RenderingDeviceDataFormat = 46
	RenderingDeviceDataFormatB8g8r8a8Uint RenderingDeviceDataFormat = 47
	RenderingDeviceDataFormatB8g8r8a8Sint RenderingDeviceDataFormat = 48
	RenderingDeviceDataFormatB8g8r8a8Srgb RenderingDeviceDataFormat = 49
	RenderingDeviceDataFormatA8b8g8r8UnormPack32 RenderingDeviceDataFormat = 50
	RenderingDeviceDataFormatA8b8g8r8SnormPack32 RenderingDeviceDataFormat = 51
	RenderingDeviceDataFormatA8b8g8r8UscaledPack32 RenderingDeviceDataFormat = 52
	RenderingDeviceDataFormatA8b8g8r8SscaledPack32 RenderingDeviceDataFormat = 53
	RenderingDeviceDataFormatA8b8g8r8UintPack32 RenderingDeviceDataFormat = 54
	RenderingDeviceDataFormatA8b8g8r8SintPack32 RenderingDeviceDataFormat = 55
	RenderingDeviceDataFormatA8b8g8r8SrgbPack32 RenderingDeviceDataFormat = 56
	RenderingDeviceDataFormatA2r10g10b10UnormPack32 RenderingDeviceDataFormat = 57
	RenderingDeviceDataFormatA2r10g10b10SnormPack32 RenderingDeviceDataFormat = 58
	RenderingDeviceDataFormatA2r10g10b10UscaledPack32 RenderingDeviceDataFormat = 59
	RenderingDeviceDataFormatA2r10g10b10SscaledPack32 RenderingDeviceDataFormat = 60
	RenderingDeviceDataFormatA2r10g10b10UintPack32 RenderingDeviceDataFormat = 61
	RenderingDeviceDataFormatA2r10g10b10SintPack32 RenderingDeviceDataFormat = 62
	RenderingDeviceDataFormatA2b10g10r10UnormPack32 RenderingDeviceDataFormat = 63
	RenderingDeviceDataFormatA2b10g10r10SnormPack32 RenderingDeviceDataFormat = 64
	RenderingDeviceDataFormatA2b10g10r10UscaledPack32 RenderingDeviceDataFormat = 65
	RenderingDeviceDataFormatA2b10g10r10SscaledPack32 RenderingDeviceDataFormat = 66
	RenderingDeviceDataFormatA2b10g10r10UintPack32 RenderingDeviceDataFormat = 67
	RenderingDeviceDataFormatA2b10g10r10SintPack32 RenderingDeviceDataFormat = 68
	RenderingDeviceDataFormatR16Unorm RenderingDeviceDataFormat = 69
	RenderingDeviceDataFormatR16Snorm RenderingDeviceDataFormat = 70
	RenderingDeviceDataFormatR16Uscaled RenderingDeviceDataFormat = 71
	RenderingDeviceDataFormatR16Sscaled RenderingDeviceDataFormat = 72
	RenderingDeviceDataFormatR16Uint RenderingDeviceDataFormat = 73
	RenderingDeviceDataFormatR16Sint RenderingDeviceDataFormat = 74
	RenderingDeviceDataFormatR16Sfloat RenderingDeviceDataFormat = 75
	RenderingDeviceDataFormatR16g16Unorm RenderingDeviceDataFormat = 76
	RenderingDeviceDataFormatR16g16Snorm RenderingDeviceDataFormat = 77
	RenderingDeviceDataFormatR16g16Uscaled RenderingDeviceDataFormat = 78
	RenderingDeviceDataFormatR16g16Sscaled RenderingDeviceDataFormat = 79
	RenderingDeviceDataFormatR16g16Uint RenderingDeviceDataFormat = 80
	RenderingDeviceDataFormatR16g16Sint RenderingDeviceDataFormat = 81
	RenderingDeviceDataFormatR16g16Sfloat RenderingDeviceDataFormat = 82
	RenderingDeviceDataFormatR16g16b16Unorm RenderingDeviceDataFormat = 83
	RenderingDeviceDataFormatR16g16b16Snorm RenderingDeviceDataFormat = 84
	RenderingDeviceDataFormatR16g16b16Uscaled RenderingDeviceDataFormat = 85
	RenderingDeviceDataFormatR16g16b16Sscaled RenderingDeviceDataFormat = 86
	RenderingDeviceDataFormatR16g16b16Uint RenderingDeviceDataFormat = 87
	RenderingDeviceDataFormatR16g16b16Sint RenderingDeviceDataFormat = 88
	RenderingDeviceDataFormatR16g16b16Sfloat RenderingDeviceDataFormat = 89
	RenderingDeviceDataFormatR16g16b16a16Unorm RenderingDeviceDataFormat = 90
	RenderingDeviceDataFormatR16g16b16a16Snorm RenderingDeviceDataFormat = 91
	RenderingDeviceDataFormatR16g16b16a16Uscaled RenderingDeviceDataFormat = 92
	RenderingDeviceDataFormatR16g16b16a16Sscaled RenderingDeviceDataFormat = 93
	RenderingDeviceDataFormatR16g16b16a16Uint RenderingDeviceDataFormat = 94
	RenderingDeviceDataFormatR16g16b16a16Sint RenderingDeviceDataFormat = 95
	RenderingDeviceDataFormatR16g16b16a16Sfloat RenderingDeviceDataFormat = 96
	RenderingDeviceDataFormatR32Uint RenderingDeviceDataFormat = 97
	RenderingDeviceDataFormatR32Sint RenderingDeviceDataFormat = 98
	RenderingDeviceDataFormatR32Sfloat RenderingDeviceDataFormat = 99
	RenderingDeviceDataFormatR32g32Uint RenderingDeviceDataFormat = 100
	RenderingDeviceDataFormatR32g32Sint RenderingDeviceDataFormat = 101
	RenderingDeviceDataFormatR32g32Sfloat RenderingDeviceDataFormat = 102
	RenderingDeviceDataFormatR32g32b32Uint RenderingDeviceDataFormat = 103
	RenderingDeviceDataFormatR32g32b32Sint RenderingDeviceDataFormat = 104
	RenderingDeviceDataFormatR32g32b32Sfloat RenderingDeviceDataFormat = 105
	RenderingDeviceDataFormatR32g32b32a32Uint RenderingDeviceDataFormat = 106
	RenderingDeviceDataFormatR32g32b32a32Sint RenderingDeviceDataFormat = 107
	RenderingDeviceDataFormatR32g32b32a32Sfloat RenderingDeviceDataFormat = 108
	RenderingDeviceDataFormatR64Uint RenderingDeviceDataFormat = 109
	RenderingDeviceDataFormatR64Sint RenderingDeviceDataFormat = 110
	RenderingDeviceDataFormatR64Sfloat RenderingDeviceDataFormat = 111
	RenderingDeviceDataFormatR64g64Uint RenderingDeviceDataFormat = 112
	RenderingDeviceDataFormatR64g64Sint RenderingDeviceDataFormat = 113
	RenderingDeviceDataFormatR64g64Sfloat RenderingDeviceDataFormat = 114
	RenderingDeviceDataFormatR64g64b64Uint RenderingDeviceDataFormat = 115
	RenderingDeviceDataFormatR64g64b64Sint RenderingDeviceDataFormat = 116
	RenderingDeviceDataFormatR64g64b64Sfloat RenderingDeviceDataFormat = 117
	RenderingDeviceDataFormatR64g64b64a64Uint RenderingDeviceDataFormat = 118
	RenderingDeviceDataFormatR64g64b64a64Sint RenderingDeviceDataFormat = 119
	RenderingDeviceDataFormatR64g64b64a64Sfloat RenderingDeviceDataFormat = 120
	RenderingDeviceDataFormatB10g11r11UfloatPack32 RenderingDeviceDataFormat = 121
	RenderingDeviceDataFormatE5b9g9r9UfloatPack32 RenderingDeviceDataFormat = 122
	RenderingDeviceDataFormatD16Unorm RenderingDeviceDataFormat = 123
	RenderingDeviceDataFormatX8D24UnormPack32 RenderingDeviceDataFormat = 124
	RenderingDeviceDataFormatD32Sfloat RenderingDeviceDataFormat = 125
	RenderingDeviceDataFormatS8Uint RenderingDeviceDataFormat = 126
	RenderingDeviceDataFormatD16UnormS8Uint RenderingDeviceDataFormat = 127
	RenderingDeviceDataFormatD24UnormS8Uint RenderingDeviceDataFormat = 128
	RenderingDeviceDataFormatD32SfloatS8Uint RenderingDeviceDataFormat = 129
	RenderingDeviceDataFormatBc1RgbUnormBlock RenderingDeviceDataFormat = 130
	RenderingDeviceDataFormatBc1RgbSrgbBlock RenderingDeviceDataFormat = 131
	RenderingDeviceDataFormatBc1RgbaUnormBlock RenderingDeviceDataFormat = 132
	RenderingDeviceDataFormatBc1RgbaSrgbBlock RenderingDeviceDataFormat = 133
	RenderingDeviceDataFormatBc2UnormBlock RenderingDeviceDataFormat = 134
	RenderingDeviceDataFormatBc2SrgbBlock RenderingDeviceDataFormat = 135
	RenderingDeviceDataFormatBc3UnormBlock RenderingDeviceDataFormat = 136
	RenderingDeviceDataFormatBc3SrgbBlock RenderingDeviceDataFormat = 137
	RenderingDeviceDataFormatBc4UnormBlock RenderingDeviceDataFormat = 138
	RenderingDeviceDataFormatBc4SnormBlock RenderingDeviceDataFormat = 139
	RenderingDeviceDataFormatBc5UnormBlock RenderingDeviceDataFormat = 140
	RenderingDeviceDataFormatBc5SnormBlock RenderingDeviceDataFormat = 141
	RenderingDeviceDataFormatBc6hUfloatBlock RenderingDeviceDataFormat = 142
	RenderingDeviceDataFormatBc6hSfloatBlock RenderingDeviceDataFormat = 143
	RenderingDeviceDataFormatBc7UnormBlock RenderingDeviceDataFormat = 144
	RenderingDeviceDataFormatBc7SrgbBlock RenderingDeviceDataFormat = 145
	RenderingDeviceDataFormatEtc2R8g8b8UnormBlock RenderingDeviceDataFormat = 146
	RenderingDeviceDataFormatEtc2R8g8b8SrgbBlock RenderingDeviceDataFormat = 147
	RenderingDeviceDataFormatEtc2R8g8b8a1UnormBlock RenderingDeviceDataFormat = 148
	RenderingDeviceDataFormatEtc2R8g8b8a1SrgbBlock RenderingDeviceDataFormat = 149
	RenderingDeviceDataFormatEtc2R8g8b8a8UnormBlock RenderingDeviceDataFormat = 150
	RenderingDeviceDataFormatEtc2R8g8b8a8SrgbBlock RenderingDeviceDataFormat = 151
	RenderingDeviceDataFormatEacR11UnormBlock RenderingDeviceDataFormat = 152
	RenderingDeviceDataFormatEacR11SnormBlock RenderingDeviceDataFormat = 153
	RenderingDeviceDataFormatEacR11g11UnormBlock RenderingDeviceDataFormat = 154
	RenderingDeviceDataFormatEacR11g11SnormBlock RenderingDeviceDataFormat = 155
	RenderingDeviceDataFormatAstc4x4UnormBlock RenderingDeviceDataFormat = 156
	RenderingDeviceDataFormatAstc4x4SrgbBlock RenderingDeviceDataFormat = 157
	RenderingDeviceDataFormatAstc5x4UnormBlock RenderingDeviceDataFormat = 158
	RenderingDeviceDataFormatAstc5x4SrgbBlock RenderingDeviceDataFormat = 159
	RenderingDeviceDataFormatAstc5x5UnormBlock RenderingDeviceDataFormat = 160
	RenderingDeviceDataFormatAstc5x5SrgbBlock RenderingDeviceDataFormat = 161
	RenderingDeviceDataFormatAstc6x5UnormBlock RenderingDeviceDataFormat = 162
	RenderingDeviceDataFormatAstc6x5SrgbBlock RenderingDeviceDataFormat = 163
	RenderingDeviceDataFormatAstc6x6UnormBlock RenderingDeviceDataFormat = 164
	RenderingDeviceDataFormatAstc6x6SrgbBlock RenderingDeviceDataFormat = 165
	RenderingDeviceDataFormatAstc8x5UnormBlock RenderingDeviceDataFormat = 166
	RenderingDeviceDataFormatAstc8x5SrgbBlock RenderingDeviceDataFormat = 167
	RenderingDeviceDataFormatAstc8x6UnormBlock RenderingDeviceDataFormat = 168
	RenderingDeviceDataFormatAstc8x6SrgbBlock RenderingDeviceDataFormat = 169
	RenderingDeviceDataFormatAstc8x8UnormBlock RenderingDeviceDataFormat = 170
	RenderingDeviceDataFormatAstc8x8SrgbBlock RenderingDeviceDataFormat = 171
	RenderingDeviceDataFormatAstc10x5UnormBlock RenderingDeviceDataFormat = 172
	RenderingDeviceDataFormatAstc10x5SrgbBlock RenderingDeviceDataFormat = 173
	RenderingDeviceDataFormatAstc10x6UnormBlock RenderingDeviceDataFormat = 174
	RenderingDeviceDataFormatAstc10x6SrgbBlock RenderingDeviceDataFormat = 175
	RenderingDeviceDataFormatAstc10x8UnormBlock RenderingDeviceDataFormat = 176
	RenderingDeviceDataFormatAstc10x8SrgbBlock RenderingDeviceDataFormat = 177
	RenderingDeviceDataFormatAstc10x10UnormBlock RenderingDeviceDataFormat = 178
	RenderingDeviceDataFormatAstc10x10SrgbBlock RenderingDeviceDataFormat = 179
	RenderingDeviceDataFormatAstc12x10UnormBlock RenderingDeviceDataFormat = 180
	RenderingDeviceDataFormatAstc12x10SrgbBlock RenderingDeviceDataFormat = 181
	RenderingDeviceDataFormatAstc12x12UnormBlock RenderingDeviceDataFormat = 182
	RenderingDeviceDataFormatAstc12x12SrgbBlock RenderingDeviceDataFormat = 183
	RenderingDeviceDataFormatG8b8g8r8422Unorm RenderingDeviceDataFormat = 184
	RenderingDeviceDataFormatB8g8r8g8422Unorm RenderingDeviceDataFormat = 185
	RenderingDeviceDataFormatG8B8R83plane420Unorm RenderingDeviceDataFormat = 186
	RenderingDeviceDataFormatG8B8r82plane420Unorm RenderingDeviceDataFormat = 187
	RenderingDeviceDataFormatG8B8R83plane422Unorm RenderingDeviceDataFormat = 188
	RenderingDeviceDataFormatG8B8r82plane422Unorm RenderingDeviceDataFormat = 189
	RenderingDeviceDataFormatG8B8R83plane444Unorm RenderingDeviceDataFormat = 190
	RenderingDeviceDataFormatR10x6UnormPack16 RenderingDeviceDataFormat = 191
	RenderingDeviceDataFormatR10x6g10x6Unorm2pack16 RenderingDeviceDataFormat = 192
	RenderingDeviceDataFormatR10x6g10x6b10x6a10x6Unorm4pack16 RenderingDeviceDataFormat = 193
	RenderingDeviceDataFormatG10x6b10x6g10x6r10x6422Unorm4pack16 RenderingDeviceDataFormat = 194
	RenderingDeviceDataFormatB10x6g10x6r10x6g10x6422Unorm4pack16 RenderingDeviceDataFormat = 195
	RenderingDeviceDataFormatG10x6B10x6R10x63plane420Unorm3pack16 RenderingDeviceDataFormat = 196
	RenderingDeviceDataFormatG10x6B10x6r10x62plane420Unorm3pack16 RenderingDeviceDataFormat = 197
	RenderingDeviceDataFormatG10x6B10x6R10x63plane422Unorm3pack16 RenderingDeviceDataFormat = 198
	RenderingDeviceDataFormatG10x6B10x6r10x62plane422Unorm3pack16 RenderingDeviceDataFormat = 199
	RenderingDeviceDataFormatG10x6B10x6R10x63plane444Unorm3pack16 RenderingDeviceDataFormat = 200
	RenderingDeviceDataFormatR12x4UnormPack16 RenderingDeviceDataFormat = 201
	RenderingDeviceDataFormatR12x4g12x4Unorm2pack16 RenderingDeviceDataFormat = 202
	RenderingDeviceDataFormatR12x4g12x4b12x4a12x4Unorm4pack16 RenderingDeviceDataFormat = 203
	RenderingDeviceDataFormatG12x4b12x4g12x4r12x4422Unorm4pack16 RenderingDeviceDataFormat = 204
	RenderingDeviceDataFormatB12x4g12x4r12x4g12x4422Unorm4pack16 RenderingDeviceDataFormat = 205
	RenderingDeviceDataFormatG12x4B12x4R12x43plane420Unorm3pack16 RenderingDeviceDataFormat = 206
	RenderingDeviceDataFormatG12x4B12x4r12x42plane420Unorm3pack16 RenderingDeviceDataFormat = 207
	RenderingDeviceDataFormatG12x4B12x4R12x43plane422Unorm3pack16 RenderingDeviceDataFormat = 208
	RenderingDeviceDataFormatG12x4B12x4r12x42plane422Unorm3pack16 RenderingDeviceDataFormat = 209
	RenderingDeviceDataFormatG12x4B12x4R12x43plane444Unorm3pack16 RenderingDeviceDataFormat = 210
	RenderingDeviceDataFormatG16b16g16r16422Unorm RenderingDeviceDataFormat = 211
	RenderingDeviceDataFormatB16g16r16g16422Unorm RenderingDeviceDataFormat = 212
	RenderingDeviceDataFormatG16B16R163plane420Unorm RenderingDeviceDataFormat = 213
	RenderingDeviceDataFormatG16B16r162plane420Unorm RenderingDeviceDataFormat = 214
	RenderingDeviceDataFormatG16B16R163plane422Unorm RenderingDeviceDataFormat = 215
	RenderingDeviceDataFormatG16B16r162plane422Unorm RenderingDeviceDataFormat = 216
	RenderingDeviceDataFormatG16B16R163plane444Unorm RenderingDeviceDataFormat = 217
	RenderingDeviceDataFormatMax RenderingDeviceDataFormat = 218
)

type RenderingDeviceTextureType int64

const (
	RenderingDeviceTextureType1d RenderingDeviceTextureType = 0
	RenderingDeviceTextureType2d RenderingDeviceTextureType = 1
	RenderingDeviceTextureType3d RenderingDeviceTextureType = 2
	RenderingDeviceTextureTypeCube RenderingDeviceTextureType = 3
	RenderingDeviceTextureType1dArray RenderingDeviceTextureType = 4
	RenderingDeviceTextureType2dArray RenderingDeviceTextureType = 5
	RenderingDeviceTextureTypeCubeArray RenderingDeviceTextureType = 6
	RenderingDeviceTextureTypeMax RenderingDeviceTextureType = 7
)

type RenderingDeviceTextureSamples int64

const (
	RenderingDeviceTextureSamples1 RenderingDeviceTextureSamples = 0
	RenderingDeviceTextureSamples2 RenderingDeviceTextureSamples = 1
	RenderingDeviceTextureSamples4 RenderingDeviceTextureSamples = 2
	RenderingDeviceTextureSamples8 RenderingDeviceTextureSamples = 3
	RenderingDeviceTextureSamples16 RenderingDeviceTextureSamples = 4
	RenderingDeviceTextureSamples32 RenderingDeviceTextureSamples = 5
	RenderingDeviceTextureSamples64 RenderingDeviceTextureSamples = 6
	RenderingDeviceTextureSamplesMax RenderingDeviceTextureSamples = 7
)

type RenderingDeviceTextureUsageBits int64

const (
	RenderingDeviceTextureUsageSamplingBit RenderingDeviceTextureUsageBits = 1
	RenderingDeviceTextureUsageColorAttachmentBit RenderingDeviceTextureUsageBits = 2
	RenderingDeviceTextureUsageDepthStencilAttachmentBit RenderingDeviceTextureUsageBits = 4
	RenderingDeviceTextureUsageStorageBit RenderingDeviceTextureUsageBits = 8
	RenderingDeviceTextureUsageStorageAtomicBit RenderingDeviceTextureUsageBits = 16
	RenderingDeviceTextureUsageCpuReadBit RenderingDeviceTextureUsageBits = 32
	RenderingDeviceTextureUsageCanUpdateBit RenderingDeviceTextureUsageBits = 64
	RenderingDeviceTextureUsageCanCopyFromBit RenderingDeviceTextureUsageBits = 128
	RenderingDeviceTextureUsageCanCopyToBit RenderingDeviceTextureUsageBits = 256
	RenderingDeviceTextureUsageInputAttachmentBit RenderingDeviceTextureUsageBits = 512
)

type RenderingDeviceTextureSwizzle int64

const (
	RenderingDeviceTextureSwizzleIdentity RenderingDeviceTextureSwizzle = 0
	RenderingDeviceTextureSwizzleZero RenderingDeviceTextureSwizzle = 1
	RenderingDeviceTextureSwizzleOne RenderingDeviceTextureSwizzle = 2
	RenderingDeviceTextureSwizzleR RenderingDeviceTextureSwizzle = 3
	RenderingDeviceTextureSwizzleG RenderingDeviceTextureSwizzle = 4
	RenderingDeviceTextureSwizzleB RenderingDeviceTextureSwizzle = 5
	RenderingDeviceTextureSwizzleA RenderingDeviceTextureSwizzle = 6
	RenderingDeviceTextureSwizzleMax RenderingDeviceTextureSwizzle = 7
)

type RenderingDeviceTextureSliceType int64

const (
	RenderingDeviceTextureSlice2d RenderingDeviceTextureSliceType = 0
	RenderingDeviceTextureSliceCubemap RenderingDeviceTextureSliceType = 1
	RenderingDeviceTextureSlice3d RenderingDeviceTextureSliceType = 2
)

type RenderingDeviceSamplerFilter int64

const (
	RenderingDeviceSamplerFilterNearest RenderingDeviceSamplerFilter = 0
	RenderingDeviceSamplerFilterLinear RenderingDeviceSamplerFilter = 1
)

type RenderingDeviceSamplerRepeatMode int64

const (
	RenderingDeviceSamplerRepeatModeRepeat RenderingDeviceSamplerRepeatMode = 0
	RenderingDeviceSamplerRepeatModeMirroredRepeat RenderingDeviceSamplerRepeatMode = 1
	RenderingDeviceSamplerRepeatModeClampToEdge RenderingDeviceSamplerRepeatMode = 2
	RenderingDeviceSamplerRepeatModeClampToBorder RenderingDeviceSamplerRepeatMode = 3
	RenderingDeviceSamplerRepeatModeMirrorClampToEdge RenderingDeviceSamplerRepeatMode = 4
	RenderingDeviceSamplerRepeatModeMax RenderingDeviceSamplerRepeatMode = 5
)

type RenderingDeviceSamplerBorderColor int64

const (
	RenderingDeviceSamplerBorderColorFloatTransparentBlack RenderingDeviceSamplerBorderColor = 0
	RenderingDeviceSamplerBorderColorIntTransparentBlack RenderingDeviceSamplerBorderColor = 1
	RenderingDeviceSamplerBorderColorFloatOpaqueBlack RenderingDeviceSamplerBorderColor = 2
	RenderingDeviceSamplerBorderColorIntOpaqueBlack RenderingDeviceSamplerBorderColor = 3
	RenderingDeviceSamplerBorderColorFloatOpaqueWhite RenderingDeviceSamplerBorderColor = 4
	RenderingDeviceSamplerBorderColorIntOpaqueWhite RenderingDeviceSamplerBorderColor = 5
	RenderingDeviceSamplerBorderColorMax RenderingDeviceSamplerBorderColor = 6
)

type RenderingDeviceVertexFrequency int64

const (
	RenderingDeviceVertexFrequencyVertex RenderingDeviceVertexFrequency = 0
	RenderingDeviceVertexFrequencyInstance RenderingDeviceVertexFrequency = 1
)

type RenderingDeviceIndexBufferFormat int64

const (
	RenderingDeviceIndexBufferFormatUint16 RenderingDeviceIndexBufferFormat = 0
	RenderingDeviceIndexBufferFormatUint32 RenderingDeviceIndexBufferFormat = 1
)

type RenderingDeviceStorageBufferUsage int64

const (
	RenderingDeviceStorageBufferUsageDispatchIndirect RenderingDeviceStorageBufferUsage = 1
)

type RenderingDeviceUniformType int64

const (
	RenderingDeviceUniformTypeSampler RenderingDeviceUniformType = 0
	RenderingDeviceUniformTypeSamplerWithTexture RenderingDeviceUniformType = 1
	RenderingDeviceUniformTypeTexture RenderingDeviceUniformType = 2
	RenderingDeviceUniformTypeImage RenderingDeviceUniformType = 3
	RenderingDeviceUniformTypeTextureBuffer RenderingDeviceUniformType = 4
	RenderingDeviceUniformTypeSamplerWithTextureBuffer RenderingDeviceUniformType = 5
	RenderingDeviceUniformTypeImageBuffer RenderingDeviceUniformType = 6
	RenderingDeviceUniformTypeUniformBuffer RenderingDeviceUniformType = 7
	RenderingDeviceUniformTypeStorageBuffer RenderingDeviceUniformType = 8
	RenderingDeviceUniformTypeInputAttachment RenderingDeviceUniformType = 9
	RenderingDeviceUniformTypeMax RenderingDeviceUniformType = 10
)

type RenderingDeviceRenderPrimitive int64

const (
	RenderingDeviceRenderPrimitivePoints RenderingDeviceRenderPrimitive = 0
	RenderingDeviceRenderPrimitiveLines RenderingDeviceRenderPrimitive = 1
	RenderingDeviceRenderPrimitiveLinesWithAdjacency RenderingDeviceRenderPrimitive = 2
	RenderingDeviceRenderPrimitiveLinestrips RenderingDeviceRenderPrimitive = 3
	RenderingDeviceRenderPrimitiveLinestripsWithAdjacency RenderingDeviceRenderPrimitive = 4
	RenderingDeviceRenderPrimitiveTriangles RenderingDeviceRenderPrimitive = 5
	RenderingDeviceRenderPrimitiveTrianglesWithAdjacency RenderingDeviceRenderPrimitive = 6
	RenderingDeviceRenderPrimitiveTriangleStrips RenderingDeviceRenderPrimitive = 7
	RenderingDeviceRenderPrimitiveTriangleStripsWithAjacency RenderingDeviceRenderPrimitive = 8
	RenderingDeviceRenderPrimitiveTriangleStripsWithRestartIndex RenderingDeviceRenderPrimitive = 9
	RenderingDeviceRenderPrimitiveTesselationPatch RenderingDeviceRenderPrimitive = 10
	RenderingDeviceRenderPrimitiveMax RenderingDeviceRenderPrimitive = 11
)

type RenderingDevicePolygonCullMode int64

const (
	RenderingDevicePolygonCullDisabled RenderingDevicePolygonCullMode = 0
	RenderingDevicePolygonCullFront RenderingDevicePolygonCullMode = 1
	RenderingDevicePolygonCullBack RenderingDevicePolygonCullMode = 2
)

type RenderingDevicePolygonFrontFace int64

const (
	RenderingDevicePolygonFrontFaceClockwise RenderingDevicePolygonFrontFace = 0
	RenderingDevicePolygonFrontFaceCounterClockwise RenderingDevicePolygonFrontFace = 1
)

type RenderingDeviceStencilOperation int64

const (
	RenderingDeviceStencilOpKeep RenderingDeviceStencilOperation = 0
	RenderingDeviceStencilOpZero RenderingDeviceStencilOperation = 1
	RenderingDeviceStencilOpReplace RenderingDeviceStencilOperation = 2
	RenderingDeviceStencilOpIncrementAndClamp RenderingDeviceStencilOperation = 3
	RenderingDeviceStencilOpDecrementAndClamp RenderingDeviceStencilOperation = 4
	RenderingDeviceStencilOpInvert RenderingDeviceStencilOperation = 5
	RenderingDeviceStencilOpIncrementAndWrap RenderingDeviceStencilOperation = 6
	RenderingDeviceStencilOpDecrementAndWrap RenderingDeviceStencilOperation = 7
	RenderingDeviceStencilOpMax RenderingDeviceStencilOperation = 8
)

type RenderingDeviceCompareOperator int64

const (
	RenderingDeviceCompareOpNever RenderingDeviceCompareOperator = 0
	RenderingDeviceCompareOpLess RenderingDeviceCompareOperator = 1
	RenderingDeviceCompareOpEqual RenderingDeviceCompareOperator = 2
	RenderingDeviceCompareOpLessOrEqual RenderingDeviceCompareOperator = 3
	RenderingDeviceCompareOpGreater RenderingDeviceCompareOperator = 4
	RenderingDeviceCompareOpNotEqual RenderingDeviceCompareOperator = 5
	RenderingDeviceCompareOpGreaterOrEqual RenderingDeviceCompareOperator = 6
	RenderingDeviceCompareOpAlways RenderingDeviceCompareOperator = 7
	RenderingDeviceCompareOpMax RenderingDeviceCompareOperator = 8
)

type RenderingDeviceLogicOperation int64

const (
	RenderingDeviceLogicOpClear RenderingDeviceLogicOperation = 0
	RenderingDeviceLogicOpAnd RenderingDeviceLogicOperation = 1
	RenderingDeviceLogicOpAndReverse RenderingDeviceLogicOperation = 2
	RenderingDeviceLogicOpCopy RenderingDeviceLogicOperation = 3
	RenderingDeviceLogicOpAndInverted RenderingDeviceLogicOperation = 4
	RenderingDeviceLogicOpNoOp RenderingDeviceLogicOperation = 5
	RenderingDeviceLogicOpXor RenderingDeviceLogicOperation = 6
	RenderingDeviceLogicOpOr RenderingDeviceLogicOperation = 7
	RenderingDeviceLogicOpNor RenderingDeviceLogicOperation = 8
	RenderingDeviceLogicOpEquivalent RenderingDeviceLogicOperation = 9
	RenderingDeviceLogicOpInvert RenderingDeviceLogicOperation = 10
	RenderingDeviceLogicOpOrReverse RenderingDeviceLogicOperation = 11
	RenderingDeviceLogicOpCopyInverted RenderingDeviceLogicOperation = 12
	RenderingDeviceLogicOpOrInverted RenderingDeviceLogicOperation = 13
	RenderingDeviceLogicOpNand RenderingDeviceLogicOperation = 14
	RenderingDeviceLogicOpSet RenderingDeviceLogicOperation = 15
	RenderingDeviceLogicOpMax RenderingDeviceLogicOperation = 16
)

type RenderingDeviceBlendFactor int64

const (
	RenderingDeviceBlendFactorZero RenderingDeviceBlendFactor = 0
	RenderingDeviceBlendFactorOne RenderingDeviceBlendFactor = 1
	RenderingDeviceBlendFactorSrcColor RenderingDeviceBlendFactor = 2
	RenderingDeviceBlendFactorOneMinusSrcColor RenderingDeviceBlendFactor = 3
	RenderingDeviceBlendFactorDstColor RenderingDeviceBlendFactor = 4
	RenderingDeviceBlendFactorOneMinusDstColor RenderingDeviceBlendFactor = 5
	RenderingDeviceBlendFactorSrcAlpha RenderingDeviceBlendFactor = 6
	RenderingDeviceBlendFactorOneMinusSrcAlpha RenderingDeviceBlendFactor = 7
	RenderingDeviceBlendFactorDstAlpha RenderingDeviceBlendFactor = 8
	RenderingDeviceBlendFactorOneMinusDstAlpha RenderingDeviceBlendFactor = 9
	RenderingDeviceBlendFactorConstantColor RenderingDeviceBlendFactor = 10
	RenderingDeviceBlendFactorOneMinusConstantColor RenderingDeviceBlendFactor = 11
	RenderingDeviceBlendFactorConstantAlpha RenderingDeviceBlendFactor = 12
	RenderingDeviceBlendFactorOneMinusConstantAlpha RenderingDeviceBlendFactor = 13
	RenderingDeviceBlendFactorSrcAlphaSaturate RenderingDeviceBlendFactor = 14
	RenderingDeviceBlendFactorSrc1Color RenderingDeviceBlendFactor = 15
	RenderingDeviceBlendFactorOneMinusSrc1Color RenderingDeviceBlendFactor = 16
	RenderingDeviceBlendFactorSrc1Alpha RenderingDeviceBlendFactor = 17
	RenderingDeviceBlendFactorOneMinusSrc1Alpha RenderingDeviceBlendFactor = 18
	RenderingDeviceBlendFactorMax RenderingDeviceBlendFactor = 19
)

type RenderingDeviceBlendOperation int64

const (
	RenderingDeviceBlendOpAdd RenderingDeviceBlendOperation = 0
	RenderingDeviceBlendOpSubtract RenderingDeviceBlendOperation = 1
	RenderingDeviceBlendOpReverseSubtract RenderingDeviceBlendOperation = 2
	RenderingDeviceBlendOpMinimum RenderingDeviceBlendOperation = 3
	RenderingDeviceBlendOpMaximum RenderingDeviceBlendOperation = 4
	RenderingDeviceBlendOpMax RenderingDeviceBlendOperation = 5
)

type RenderingDevicePipelineDynamicStateFlags int64

const (
	RenderingDeviceDynamicStateLineWidth RenderingDevicePipelineDynamicStateFlags = 1
	RenderingDeviceDynamicStateDepthBias RenderingDevicePipelineDynamicStateFlags = 2
	RenderingDeviceDynamicStateBlendConstants RenderingDevicePipelineDynamicStateFlags = 4
	RenderingDeviceDynamicStateDepthBounds RenderingDevicePipelineDynamicStateFlags = 8
	RenderingDeviceDynamicStateStencilCompareMask RenderingDevicePipelineDynamicStateFlags = 16
	RenderingDeviceDynamicStateStencilWriteMask RenderingDevicePipelineDynamicStateFlags = 32
	RenderingDeviceDynamicStateStencilReference RenderingDevicePipelineDynamicStateFlags = 64
)

type RenderingDeviceInitialAction int64

const (
	RenderingDeviceInitialActionClear RenderingDeviceInitialAction = 0
	RenderingDeviceInitialActionClearRegion RenderingDeviceInitialAction = 1
	RenderingDeviceInitialActionClearRegionContinue RenderingDeviceInitialAction = 2
	RenderingDeviceInitialActionKeep RenderingDeviceInitialAction = 3
	RenderingDeviceInitialActionDrop RenderingDeviceInitialAction = 4
	RenderingDeviceInitialActionContinue RenderingDeviceInitialAction = 5
	RenderingDeviceInitialActionMax RenderingDeviceInitialAction = 6
)

type RenderingDeviceFinalAction int64

const (
	RenderingDeviceFinalActionRead RenderingDeviceFinalAction = 0
	RenderingDeviceFinalActionDiscard RenderingDeviceFinalAction = 1
	RenderingDeviceFinalActionContinue RenderingDeviceFinalAction = 2
	RenderingDeviceFinalActionMax RenderingDeviceFinalAction = 3
)

type RenderingDeviceShaderStage int64

const (
	RenderingDeviceShaderStageVertex RenderingDeviceShaderStage = 0
	RenderingDeviceShaderStageFragment RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageTesselationControl RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationEvaluation RenderingDeviceShaderStage = 3
	RenderingDeviceShaderStageCompute RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageMax RenderingDeviceShaderStage = 5
	RenderingDeviceShaderStageVertexBit RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageFragmentBit RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationControlBit RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageTesselationEvaluationBit RenderingDeviceShaderStage = 8
	RenderingDeviceShaderStageComputeBit RenderingDeviceShaderStage = 16
)

type RenderingDeviceShaderLanguage int64

const (
	RenderingDeviceShaderLanguageGlsl RenderingDeviceShaderLanguage = 0
	RenderingDeviceShaderLanguageHlsl RenderingDeviceShaderLanguage = 1
)

type RenderingDevicePipelineSpecializationConstantType int64

const (
	RenderingDevicePipelineSpecializationConstantTypeBool RenderingDevicePipelineSpecializationConstantType = 0
	RenderingDevicePipelineSpecializationConstantTypeInt RenderingDevicePipelineSpecializationConstantType = 1
	RenderingDevicePipelineSpecializationConstantTypeFloat RenderingDevicePipelineSpecializationConstantType = 2
)

type RenderingDeviceLimit int64

const (
	RenderingDeviceLimitMaxBoundUniformSets RenderingDeviceLimit = 0
	RenderingDeviceLimitMaxFramebufferColorAttachments RenderingDeviceLimit = 1
	RenderingDeviceLimitMaxTexturesPerUniformSet RenderingDeviceLimit = 2
	RenderingDeviceLimitMaxSamplersPerUniformSet RenderingDeviceLimit = 3
	RenderingDeviceLimitMaxStorageBuffersPerUniformSet RenderingDeviceLimit = 4
	RenderingDeviceLimitMaxStorageImagesPerUniformSet RenderingDeviceLimit = 5
	RenderingDeviceLimitMaxUniformBuffersPerUniformSet RenderingDeviceLimit = 6
	RenderingDeviceLimitMaxDrawIndexedIndex RenderingDeviceLimit = 7
	RenderingDeviceLimitMaxFramebufferHeight RenderingDeviceLimit = 8
	RenderingDeviceLimitMaxFramebufferWidth RenderingDeviceLimit = 9
	RenderingDeviceLimitMaxTextureArrayLayers RenderingDeviceLimit = 10
	RenderingDeviceLimitMaxTextureSize1d RenderingDeviceLimit = 11
	RenderingDeviceLimitMaxTextureSize2d RenderingDeviceLimit = 12
	RenderingDeviceLimitMaxTextureSize3d RenderingDeviceLimit = 13
	RenderingDeviceLimitMaxTextureSizeCube RenderingDeviceLimit = 14
	RenderingDeviceLimitMaxTexturesPerShaderStage RenderingDeviceLimit = 15
	RenderingDeviceLimitMaxSamplersPerShaderStage RenderingDeviceLimit = 16
	RenderingDeviceLimitMaxStorageBuffersPerShaderStage RenderingDeviceLimit = 17
	RenderingDeviceLimitMaxStorageImagesPerShaderStage RenderingDeviceLimit = 18
	RenderingDeviceLimitMaxUniformBuffersPerShaderStage RenderingDeviceLimit = 19
	RenderingDeviceLimitMaxPushConstantSize RenderingDeviceLimit = 20
	RenderingDeviceLimitMaxUniformBufferSize RenderingDeviceLimit = 21
	RenderingDeviceLimitMaxVertexInputAttributeOffset RenderingDeviceLimit = 22
	RenderingDeviceLimitMaxVertexInputAttributes RenderingDeviceLimit = 23
	RenderingDeviceLimitMaxVertexInputBindings RenderingDeviceLimit = 24
	RenderingDeviceLimitMaxVertexInputBindingStride RenderingDeviceLimit = 25
	RenderingDeviceLimitMinUniformBufferOffsetAlignment RenderingDeviceLimit = 26
	RenderingDeviceLimitMaxComputeSharedMemorySize RenderingDeviceLimit = 27
	RenderingDeviceLimitMaxComputeWorkgroupCountX RenderingDeviceLimit = 28
	RenderingDeviceLimitMaxComputeWorkgroupCountY RenderingDeviceLimit = 29
	RenderingDeviceLimitMaxComputeWorkgroupCountZ RenderingDeviceLimit = 30
	RenderingDeviceLimitMaxComputeWorkgroupInvocations RenderingDeviceLimit = 31
	RenderingDeviceLimitMaxComputeWorkgroupSizeX RenderingDeviceLimit = 32
	RenderingDeviceLimitMaxComputeWorkgroupSizeY RenderingDeviceLimit = 33
	RenderingDeviceLimitMaxComputeWorkgroupSizeZ RenderingDeviceLimit = 34
)

type RenderingDeviceMemoryType int64

const (
	RenderingDeviceMemoryTextures RenderingDeviceMemoryType = 0
	RenderingDeviceMemoryBuffers RenderingDeviceMemoryType = 1
	RenderingDeviceMemoryTotal RenderingDeviceMemoryType = 2
)

type RenderingDevice gdnative.Object
func (RenderingDevice) class() string { return "RenderingDevice\000" }

func (gdClass RenderingDevice) Object() Object { return Object(gdClass) }

var methodRenderingDevice [89]gdnative.Method
func (gdClass RenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[0], format, view, data) }
func (gdClass RenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[1], view, with_texture) }
func (gdClass RenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer int64, mipmap int64, mipmaps int64, slice_type RenderingDeviceTextureSliceType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[2], view, with_texture, layer, mipmap, mipmaps, slice_type) }
func (gdClass RenderingDevice) TextureUpdate(texture RID, layer int64, data []byte, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[3], texture, layer, data, post_barrier) }
func (gdClass RenderingDevice) TextureGetData(texture RID, layer int64) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[4], texture, layer) }
func (gdClass RenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[5], format, usage_flags) }
func (gdClass RenderingDevice) TextureIsShared(texture RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[6], texture) }
func (gdClass RenderingDevice) TextureIsValid(texture RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[7], texture) }
func (gdClass RenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap int64, dst_mipmap int64, src_layer int64, dst_layer int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[8], from_texture, to_texture, from_pos, to_pos, size, src_mipmap, dst_mipmap, src_layer, dst_layer, post_barrier) }
func (gdClass RenderingDevice) TextureClear(texture RID, color Color, base_mipmap int64, mipmap_count int64, base_layer int64, layer_count int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[9], texture, color, base_mipmap, mipmap_count, base_layer, layer_count, post_barrier) }
func (gdClass RenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[10], from_texture, to_texture, post_barrier) }
func (gdClass RenderingDevice) FramebufferFormatCreate(attachments Array, view_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[11], attachments, view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateMultipass(attachments Array, passes Array, view_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[12], attachments, passes, view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[13], samples) }
func (gdClass RenderingDevice) FramebufferFormatGetTextureSamples(format int64, render_pass int64) RenderingDeviceTextureSamples { return gdnative.Return[RenderingDeviceTextureSamples](gdnative.Object(gdClass), methodRenderingDevice[14], format, render_pass) }
func (gdClass RenderingDevice) FramebufferCreate(textures Array, validate_with_format int64, view_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[15], textures, validate_with_format, view_count) }
func (gdClass RenderingDevice) FramebufferCreateMultipass(textures Array, passes Array, validate_with_format int64, view_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[16], textures, passes, validate_with_format, view_count) }
func (gdClass RenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[17], size, samples, validate_with_format) }
func (gdClass RenderingDevice) FramebufferGetFormat(framebuffer RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[18], framebuffer) }
func (gdClass RenderingDevice) FramebufferIsValid(framebuffer RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[19], framebuffer) }
func (gdClass RenderingDevice) SamplerCreate(state RDSamplerState) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[20], state) }
func (gdClass RenderingDevice) VertexBufferCreate(size_bytes int64, data []byte, use_as_storage bool) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[21], size_bytes, data, use_as_storage) }
func (gdClass RenderingDevice) VertexFormatCreate(vertex_descriptions Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[22], vertex_descriptions) }
func (gdClass RenderingDevice) IndexBufferCreate(size_indices int64, format RenderingDeviceIndexBufferFormat, data []byte, use_restart_indices bool) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[23], size_indices, format, data, use_restart_indices) }
func (gdClass RenderingDevice) IndexArrayCreate(index_buffer RID, index_offset int64, index_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[24], index_buffer, index_offset, index_count) }
func (gdClass RenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV { return gdnative.Return[RDShaderSPIRV](gdnative.Object(gdClass), methodRenderingDevice[25], shader_source, allow_cache) }
func (gdClass RenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name string) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[26], spirv_data, name) }
func (gdClass RenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name string) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[27], spirv_data, name) }
func (gdClass RenderingDevice) ShaderCreateFromBytecode(binary_data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[28], binary_data) }
func (gdClass RenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[29], shader) }
func (gdClass RenderingDevice) UniformBufferCreate(size_bytes int64, data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[30], size_bytes, data) }
func (gdClass RenderingDevice) StorageBufferCreate(size_bytes int64, data []byte, usage int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[31], size_bytes, data, usage) }
func (gdClass RenderingDevice) TextureBufferCreate(size_bytes int64, format RenderingDeviceDataFormat, data []byte) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[32], size_bytes, format, data) }
func (gdClass RenderingDevice) UniformSetCreate(uniforms Array, shader RID, shader_set int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[33], uniforms, shader, shader_set) }
func (gdClass RenderingDevice) UniformSetIsValid(uniform_set RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[34], uniform_set) }
func (gdClass RenderingDevice) BufferUpdate(buffer RID, offset int64, size_bytes int64, data []byte, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[35], buffer, offset, size_bytes, data, post_barrier) }
func (gdClass RenderingDevice) BufferClear(buffer RID, offset int64, size_bytes int64, post_barrier int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodRenderingDevice[36], buffer, offset, size_bytes, post_barrier) }
func (gdClass RenderingDevice) BufferGetData(buffer RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingDevice[37], buffer) }
func (gdClass RenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format int64, vertex_format int64, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags int64, for_render_pass int64, specialization_constants Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[38], shader, framebuffer_format, vertex_format, primitive, rasterization_state, multisample_state, stencil_state, color_blend_state, dynamic_state_flags, for_render_pass, specialization_constants) }
func (gdClass RenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[39], render_pipeline) }
func (gdClass RenderingDevice) ComputePipelineCreate(shader RID, specialization_constants Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingDevice[40], shader, specialization_constants) }
func (gdClass RenderingDevice) ComputePipelineIsValid(compute_pieline RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingDevice[41], compute_pieline) }
func (gdClass RenderingDevice) ScreenGetWidth(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[42], screen) }
func (gdClass RenderingDevice) ScreenGetHeight(screen int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[43], screen) }
func (gdClass RenderingDevice) ScreenGetFramebufferFormat() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[44]) }
func (gdClass RenderingDevice) DrawListBeginForScreen(screen int64, clear_color Color) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[45], screen, clear_color) }
func (gdClass RenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[46], framebuffer, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures) }
func (gdClass RenderingDevice) DrawListBeginSplit(framebuffer RID, splits int64, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodRenderingDevice[47], framebuffer, splits, initial_color_action, final_color_action, initial_depth_action, final_depth_action, clear_color_values, clear_depth, clear_stencil, region, storage_textures) }
func (gdClass RenderingDevice) DrawListBindRenderPipeline(draw_list int64, render_pipeline RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[48], draw_list, render_pipeline) }
func (gdClass RenderingDevice) DrawListBindUniformSet(draw_list int64, uniform_set RID, set_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[49], draw_list, uniform_set, set_index) }
func (gdClass RenderingDevice) DrawListBindVertexArray(draw_list int64, vertex_array RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[50], draw_list, vertex_array) }
func (gdClass RenderingDevice) DrawListBindIndexArray(draw_list int64, index_array RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[51], draw_list, index_array) }
func (gdClass RenderingDevice) DrawListSetPushConstant(draw_list int64, buffer []byte, size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[52], draw_list, buffer, size_bytes) }
func (gdClass RenderingDevice) DrawListDraw(draw_list int64, use_indices bool, instances int64, procedural_vertex_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[53], draw_list, use_indices, instances, procedural_vertex_count) }
func (gdClass RenderingDevice) DrawListEnableScissor(draw_list int64, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[54], draw_list, rect) }
func (gdClass RenderingDevice) DrawListDisableScissor(draw_list int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[55], draw_list) }
func (gdClass RenderingDevice) DrawListSwitchToNextPass() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[56]) }
func (gdClass RenderingDevice) DrawListSwitchToNextPassSplit(splits int64) []int64 { return gdnative.Return[[]int64](gdnative.Object(gdClass), methodRenderingDevice[57], splits) }
func (gdClass RenderingDevice) DrawListEnd(post_barrier int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[58], post_barrier) }
func (gdClass RenderingDevice) ComputeListBegin(allow_draw_overlap bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[59], allow_draw_overlap) }
func (gdClass RenderingDevice) ComputeListBindComputePipeline(compute_list int64, compute_pipeline RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[60], compute_list, compute_pipeline) }
func (gdClass RenderingDevice) ComputeListSetPushConstant(compute_list int64, buffer []byte, size_bytes int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[61], compute_list, buffer, size_bytes) }
func (gdClass RenderingDevice) ComputeListBindUniformSet(compute_list int64, uniform_set RID, set_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[62], compute_list, uniform_set, set_index) }
func (gdClass RenderingDevice) ComputeListDispatch(compute_list int64, x_groups int64, y_groups int64, z_groups int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[63], compute_list, x_groups, y_groups, z_groups) }
func (gdClass RenderingDevice) ComputeListAddBarrier(compute_list int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[64], compute_list) }
func (gdClass RenderingDevice) ComputeListEnd(post_barrier int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[65], post_barrier) }
func (gdClass RenderingDevice) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[66], rid) }
func (gdClass RenderingDevice) CaptureTimestamp(name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[67], name) }
func (gdClass RenderingDevice) GetCapturedTimestampsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[68]) }
func (gdClass RenderingDevice) GetCapturedTimestampsFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[69]) }
func (gdClass RenderingDevice) GetCapturedTimestampGpuTime(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[70], index) }
func (gdClass RenderingDevice) GetCapturedTimestampCpuTime(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[71], index) }
func (gdClass RenderingDevice) GetCapturedTimestampName(index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[72], index) }
func (gdClass RenderingDevice) LimitGet(limit RenderingDeviceLimit) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[73], limit) }
func (gdClass RenderingDevice) GetFrameDelay() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[74]) }
func (gdClass RenderingDevice) Submit()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[75]) }
func (gdClass RenderingDevice) Sync()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[76]) }
func (gdClass RenderingDevice) Barrier(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[77], from, to) }
func (gdClass RenderingDevice) FullBarrier()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[78]) }
func (gdClass RenderingDevice) CreateLocalDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingDevice[79]) }
func (gdClass RenderingDevice) SetResourceName(id RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[80], id, name) }
func (gdClass RenderingDevice) DrawCommandBeginLabel(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[81], name, color) }
func (gdClass RenderingDevice) DrawCommandInsertLabel(name string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[82], name, color) }
func (gdClass RenderingDevice) DrawCommandEndLabel()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingDevice[83]) }
func (gdClass RenderingDevice) GetDeviceVendorName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[84]) }
func (gdClass RenderingDevice) GetDeviceName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[85]) }
func (gdClass RenderingDevice) GetDevicePipelineCacheUuid() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingDevice[86]) }
func (gdClass RenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[87], atype) }
func (gdClass RenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingDevice[88], resource, rid, index) }

type RenderingServerTextureLayeredType int64

const (
	RenderingServerTextureLayered2dArray RenderingServerTextureLayeredType = 0
	RenderingServerTextureLayeredCubemap RenderingServerTextureLayeredType = 1
	RenderingServerTextureLayeredCubemapArray RenderingServerTextureLayeredType = 2
)

type RenderingServerCubeMapLayer int64

const (
	RenderingServerCubemapLayerLeft RenderingServerCubeMapLayer = 0
	RenderingServerCubemapLayerRight RenderingServerCubeMapLayer = 1
	RenderingServerCubemapLayerBottom RenderingServerCubeMapLayer = 2
	RenderingServerCubemapLayerTop RenderingServerCubeMapLayer = 3
	RenderingServerCubemapLayerFront RenderingServerCubeMapLayer = 4
	RenderingServerCubemapLayerBack RenderingServerCubeMapLayer = 5
)

type RenderingServerShaderMode int64

const (
	RenderingServerShaderSpatial RenderingServerShaderMode = 0
	RenderingServerShaderCanvasItem RenderingServerShaderMode = 1
	RenderingServerShaderParticles RenderingServerShaderMode = 2
	RenderingServerShaderSky RenderingServerShaderMode = 3
	RenderingServerShaderFog RenderingServerShaderMode = 4
	RenderingServerShaderMax RenderingServerShaderMode = 5
)

type RenderingServerArrayType int64

const (
	RenderingServerArrayVertex RenderingServerArrayType = 0
	RenderingServerArrayNormal RenderingServerArrayType = 1
	RenderingServerArrayTangent RenderingServerArrayType = 2
	RenderingServerArrayColor RenderingServerArrayType = 3
	RenderingServerArrayTexUv RenderingServerArrayType = 4
	RenderingServerArrayTexUv2 RenderingServerArrayType = 5
	RenderingServerArrayCustom0 RenderingServerArrayType = 6
	RenderingServerArrayCustom1 RenderingServerArrayType = 7
	RenderingServerArrayCustom2 RenderingServerArrayType = 8
	RenderingServerArrayCustom3 RenderingServerArrayType = 9
	RenderingServerArrayBones RenderingServerArrayType = 10
	RenderingServerArrayWeights RenderingServerArrayType = 11
	RenderingServerArrayIndex RenderingServerArrayType = 12
	RenderingServerArrayMax RenderingServerArrayType = 13
)

type RenderingServerArrayCustomFormat int64

const (
	RenderingServerArrayCustomRgba8Unorm RenderingServerArrayCustomFormat = 0
	RenderingServerArrayCustomRgba8Snorm RenderingServerArrayCustomFormat = 1
	RenderingServerArrayCustomRgHalf RenderingServerArrayCustomFormat = 2
	RenderingServerArrayCustomRgbaHalf RenderingServerArrayCustomFormat = 3
	RenderingServerArrayCustomRFloat RenderingServerArrayCustomFormat = 4
	RenderingServerArrayCustomRgFloat RenderingServerArrayCustomFormat = 5
	RenderingServerArrayCustomRgbFloat RenderingServerArrayCustomFormat = 6
	RenderingServerArrayCustomRgbaFloat RenderingServerArrayCustomFormat = 7
	RenderingServerArrayCustomMax RenderingServerArrayCustomFormat = 8
)

type RenderingServerArrayFormat int64

const (
	RenderingServerArrayFormatVertex RenderingServerArrayFormat = 1
	RenderingServerArrayFormatNormal RenderingServerArrayFormat = 2
	RenderingServerArrayFormatTangent RenderingServerArrayFormat = 4
	RenderingServerArrayFormatColor RenderingServerArrayFormat = 8
	RenderingServerArrayFormatTexUv RenderingServerArrayFormat = 16
	RenderingServerArrayFormatTexUv2 RenderingServerArrayFormat = 32
	RenderingServerArrayFormatCustom0 RenderingServerArrayFormat = 64
	RenderingServerArrayFormatCustom1 RenderingServerArrayFormat = 128
	RenderingServerArrayFormatCustom2 RenderingServerArrayFormat = 256
	RenderingServerArrayFormatCustom3 RenderingServerArrayFormat = 512
	RenderingServerArrayFormatBones RenderingServerArrayFormat = 1024
	RenderingServerArrayFormatWeights RenderingServerArrayFormat = 2048
	RenderingServerArrayFormatIndex RenderingServerArrayFormat = 4096
	RenderingServerArrayFormatBlendShapeMask RenderingServerArrayFormat = 7
	RenderingServerArrayFormatCustomBase RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustomBits RenderingServerArrayFormat = 3
	RenderingServerArrayFormatCustom0Shift RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustom1Shift RenderingServerArrayFormat = 16
	RenderingServerArrayFormatCustom2Shift RenderingServerArrayFormat = 19
	RenderingServerArrayFormatCustom3Shift RenderingServerArrayFormat = 22
	RenderingServerArrayFormatCustomMask RenderingServerArrayFormat = 7
	RenderingServerArrayCompressFlagsBase RenderingServerArrayFormat = 25
	RenderingServerArrayFlagUse2dVertices RenderingServerArrayFormat = 33554432
	RenderingServerArrayFlagUseDynamicUpdate RenderingServerArrayFormat = 67108864
	RenderingServerArrayFlagUse8BoneWeights RenderingServerArrayFormat = 134217728
)

type RenderingServerPrimitiveType int64

const (
	RenderingServerPrimitivePoints RenderingServerPrimitiveType = 0
	RenderingServerPrimitiveLines RenderingServerPrimitiveType = 1
	RenderingServerPrimitiveLineStrip RenderingServerPrimitiveType = 2
	RenderingServerPrimitiveTriangles RenderingServerPrimitiveType = 3
	RenderingServerPrimitiveTriangleStrip RenderingServerPrimitiveType = 4
	RenderingServerPrimitiveMax RenderingServerPrimitiveType = 5
)

type RenderingServerBlendShapeMode int64

const (
	RenderingServerBlendShapeModeNormalized RenderingServerBlendShapeMode = 0
	RenderingServerBlendShapeModeRelative RenderingServerBlendShapeMode = 1
)

type RenderingServerMultimeshTransformFormat int64

const (
	RenderingServerMultimeshTransform2d RenderingServerMultimeshTransformFormat = 0
	RenderingServerMultimeshTransform3d RenderingServerMultimeshTransformFormat = 1
)

type RenderingServerLightProjectorFilter int64

const (
	RenderingServerLightProjectorFilterNearest RenderingServerLightProjectorFilter = 0
	RenderingServerLightProjectorFilterLinear RenderingServerLightProjectorFilter = 1
	RenderingServerLightProjectorFilterNearestMipmaps RenderingServerLightProjectorFilter = 2
	RenderingServerLightProjectorFilterLinearMipmaps RenderingServerLightProjectorFilter = 3
	RenderingServerLightProjectorFilterNearestMipmapsAnisotropic RenderingServerLightProjectorFilter = 4
	RenderingServerLightProjectorFilterLinearMipmapsAnisotropic RenderingServerLightProjectorFilter = 5
)

type RenderingServerLightType int64

const (
	RenderingServerLightDirectional RenderingServerLightType = 0
	RenderingServerLightOmni RenderingServerLightType = 1
	RenderingServerLightSpot RenderingServerLightType = 2
)

type RenderingServerLightParam int64

const (
	RenderingServerLightParamEnergy RenderingServerLightParam = 0
	RenderingServerLightParamIndirectEnergy RenderingServerLightParam = 1
	RenderingServerLightParamSpecular RenderingServerLightParam = 2
	RenderingServerLightParamRange RenderingServerLightParam = 3
	RenderingServerLightParamSize RenderingServerLightParam = 4
	RenderingServerLightParamAttenuation RenderingServerLightParam = 5
	RenderingServerLightParamSpotAngle RenderingServerLightParam = 6
	RenderingServerLightParamSpotAttenuation RenderingServerLightParam = 7
	RenderingServerLightParamShadowMaxDistance RenderingServerLightParam = 8
	RenderingServerLightParamShadowSplit1Offset RenderingServerLightParam = 9
	RenderingServerLightParamShadowSplit2Offset RenderingServerLightParam = 10
	RenderingServerLightParamShadowSplit3Offset RenderingServerLightParam = 11
	RenderingServerLightParamShadowFadeStart RenderingServerLightParam = 12
	RenderingServerLightParamShadowNormalBias RenderingServerLightParam = 13
	RenderingServerLightParamShadowBias RenderingServerLightParam = 14
	RenderingServerLightParamShadowPancakeSize RenderingServerLightParam = 15
	RenderingServerLightParamShadowOpacity RenderingServerLightParam = 16
	RenderingServerLightParamShadowBlur RenderingServerLightParam = 17
	RenderingServerLightParamShadowVolumetricFogFade RenderingServerLightParam = 18
	RenderingServerLightParamTransmittanceBias RenderingServerLightParam = 19
	RenderingServerLightParamMax RenderingServerLightParam = 20
)

type RenderingServerLightBakeMode int64

const (
	RenderingServerLightBakeDisabled RenderingServerLightBakeMode = 0
	RenderingServerLightBakeStatic RenderingServerLightBakeMode = 1
	RenderingServerLightBakeDynamic RenderingServerLightBakeMode = 2
)

type RenderingServerLightOmniShadowMode int64

const (
	RenderingServerLightOmniShadowDualParaboloid RenderingServerLightOmniShadowMode = 0
	RenderingServerLightOmniShadowCube RenderingServerLightOmniShadowMode = 1
)

type RenderingServerLightDirectionalShadowMode int64

const (
	RenderingServerLightDirectionalShadowOrthogonal RenderingServerLightDirectionalShadowMode = 0
	RenderingServerLightDirectionalShadowParallel2Splits RenderingServerLightDirectionalShadowMode = 1
	RenderingServerLightDirectionalShadowParallel4Splits RenderingServerLightDirectionalShadowMode = 2
)

type RenderingServerLightDirectionalSkyMode int64

const (
	RenderingServerLightDirectionalSkyModeLightAndSky RenderingServerLightDirectionalSkyMode = 0
	RenderingServerLightDirectionalSkyModeLightOnly RenderingServerLightDirectionalSkyMode = 1
	RenderingServerLightDirectionalSkyModeSkyOnly RenderingServerLightDirectionalSkyMode = 2
)

type RenderingServerShadowQuality int64

const (
	RenderingServerShadowQualityHard RenderingServerShadowQuality = 0
	RenderingServerShadowQualitySoftVeryLow RenderingServerShadowQuality = 1
	RenderingServerShadowQualitySoftLow RenderingServerShadowQuality = 2
	RenderingServerShadowQualitySoftMedium RenderingServerShadowQuality = 3
	RenderingServerShadowQualitySoftHigh RenderingServerShadowQuality = 4
	RenderingServerShadowQualitySoftUltra RenderingServerShadowQuality = 5
	RenderingServerShadowQualityMax RenderingServerShadowQuality = 6
)

type RenderingServerReflectionProbeUpdateMode int64

const (
	RenderingServerReflectionProbeUpdateOnce RenderingServerReflectionProbeUpdateMode = 0
	RenderingServerReflectionProbeUpdateAlways RenderingServerReflectionProbeUpdateMode = 1
)

type RenderingServerReflectionProbeAmbientMode int64

const (
	RenderingServerReflectionProbeAmbientDisabled RenderingServerReflectionProbeAmbientMode = 0
	RenderingServerReflectionProbeAmbientEnvironment RenderingServerReflectionProbeAmbientMode = 1
	RenderingServerReflectionProbeAmbientColor RenderingServerReflectionProbeAmbientMode = 2
)

type RenderingServerDecalTexture int64

const (
	RenderingServerDecalTextureAlbedo RenderingServerDecalTexture = 0
	RenderingServerDecalTextureNormal RenderingServerDecalTexture = 1
	RenderingServerDecalTextureOrm RenderingServerDecalTexture = 2
	RenderingServerDecalTextureEmission RenderingServerDecalTexture = 3
	RenderingServerDecalTextureMax RenderingServerDecalTexture = 4
)

type RenderingServerDecalFilter int64

const (
	RenderingServerDecalFilterNearest RenderingServerDecalFilter = 0
	RenderingServerDecalFilterLinear RenderingServerDecalFilter = 1
	RenderingServerDecalFilterNearestMipmaps RenderingServerDecalFilter = 2
	RenderingServerDecalFilterLinearMipmaps RenderingServerDecalFilter = 3
	RenderingServerDecalFilterNearestMipmapsAnisotropic RenderingServerDecalFilter = 4
	RenderingServerDecalFilterLinearMipmapsAnisotropic RenderingServerDecalFilter = 5
)

type RenderingServerVoxelGIQuality int64

const (
	RenderingServerVoxelGiQualityLow RenderingServerVoxelGIQuality = 0
	RenderingServerVoxelGiQualityHigh RenderingServerVoxelGIQuality = 1
)

type RenderingServerParticlesMode int64

const (
	RenderingServerParticlesMode2d RenderingServerParticlesMode = 0
	RenderingServerParticlesMode3d RenderingServerParticlesMode = 1
)

type RenderingServerParticlesTransformAlign int64

const (
	RenderingServerParticlesTransformAlignDisabled RenderingServerParticlesTransformAlign = 0
	RenderingServerParticlesTransformAlignZBillboard RenderingServerParticlesTransformAlign = 1
	RenderingServerParticlesTransformAlignYToVelocity RenderingServerParticlesTransformAlign = 2
	RenderingServerParticlesTransformAlignZBillboardYToVelocity RenderingServerParticlesTransformAlign = 3
)

type RenderingServerParticlesDrawOrder int64

const (
	RenderingServerParticlesDrawOrderIndex RenderingServerParticlesDrawOrder = 0
	RenderingServerParticlesDrawOrderLifetime RenderingServerParticlesDrawOrder = 1
	RenderingServerParticlesDrawOrderReverseLifetime RenderingServerParticlesDrawOrder = 2
	RenderingServerParticlesDrawOrderViewDepth RenderingServerParticlesDrawOrder = 3
)

type RenderingServerParticlesCollisionType int64

const (
	RenderingServerParticlesCollisionTypeSphereAttract RenderingServerParticlesCollisionType = 0
	RenderingServerParticlesCollisionTypeBoxAttract RenderingServerParticlesCollisionType = 1
	RenderingServerParticlesCollisionTypeVectorFieldAttract RenderingServerParticlesCollisionType = 2
	RenderingServerParticlesCollisionTypeSphereCollide RenderingServerParticlesCollisionType = 3
	RenderingServerParticlesCollisionTypeBoxCollide RenderingServerParticlesCollisionType = 4
	RenderingServerParticlesCollisionTypeSdfCollide RenderingServerParticlesCollisionType = 5
	RenderingServerParticlesCollisionTypeHeightfieldCollide RenderingServerParticlesCollisionType = 6
)

type RenderingServerParticlesCollisionHeightfieldResolution int64

const (
	RenderingServerParticlesCollisionHeightfieldResolution256 RenderingServerParticlesCollisionHeightfieldResolution = 0
	RenderingServerParticlesCollisionHeightfieldResolution512 RenderingServerParticlesCollisionHeightfieldResolution = 1
	RenderingServerParticlesCollisionHeightfieldResolution1024 RenderingServerParticlesCollisionHeightfieldResolution = 2
	RenderingServerParticlesCollisionHeightfieldResolution2048 RenderingServerParticlesCollisionHeightfieldResolution = 3
	RenderingServerParticlesCollisionHeightfieldResolution4096 RenderingServerParticlesCollisionHeightfieldResolution = 4
	RenderingServerParticlesCollisionHeightfieldResolution8192 RenderingServerParticlesCollisionHeightfieldResolution = 5
	RenderingServerParticlesCollisionHeightfieldResolutionMax RenderingServerParticlesCollisionHeightfieldResolution = 6
)

type RenderingServerFogVolumeShape int64

const (
	RenderingServerFogVolumeShapeEllipsoid RenderingServerFogVolumeShape = 0
	RenderingServerFogVolumeShapeCone RenderingServerFogVolumeShape = 1
	RenderingServerFogVolumeShapeCylinder RenderingServerFogVolumeShape = 2
	RenderingServerFogVolumeShapeBox RenderingServerFogVolumeShape = 3
	RenderingServerFogVolumeShapeWorld RenderingServerFogVolumeShape = 4
	RenderingServerFogVolumeShapeMax RenderingServerFogVolumeShape = 5
)

type RenderingServerViewportScaling3DMode int64

const (
	RenderingServerViewportScaling3dModeBilinear RenderingServerViewportScaling3DMode = 0
	RenderingServerViewportScaling3dModeFsr RenderingServerViewportScaling3DMode = 1
	RenderingServerViewportScaling3dModeMax RenderingServerViewportScaling3DMode = 2
)

type RenderingServerViewportUpdateMode int64

const (
	RenderingServerViewportUpdateDisabled RenderingServerViewportUpdateMode = 0
	RenderingServerViewportUpdateOnce RenderingServerViewportUpdateMode = 1
	RenderingServerViewportUpdateWhenVisible RenderingServerViewportUpdateMode = 2
	RenderingServerViewportUpdateWhenParentVisible RenderingServerViewportUpdateMode = 3
	RenderingServerViewportUpdateAlways RenderingServerViewportUpdateMode = 4
)

type RenderingServerViewportClearMode int64

const (
	RenderingServerViewportClearAlways RenderingServerViewportClearMode = 0
	RenderingServerViewportClearNever RenderingServerViewportClearMode = 1
	RenderingServerViewportClearOnlyNextFrame RenderingServerViewportClearMode = 2
)

type RenderingServerViewportSDFOversize int64

const (
	RenderingServerViewportSdfOversize100Percent RenderingServerViewportSDFOversize = 0
	RenderingServerViewportSdfOversize120Percent RenderingServerViewportSDFOversize = 1
	RenderingServerViewportSdfOversize150Percent RenderingServerViewportSDFOversize = 2
	RenderingServerViewportSdfOversize200Percent RenderingServerViewportSDFOversize = 3
	RenderingServerViewportSdfOversizeMax RenderingServerViewportSDFOversize = 4
)

type RenderingServerViewportSDFScale int64

const (
	RenderingServerViewportSdfScale100Percent RenderingServerViewportSDFScale = 0
	RenderingServerViewportSdfScale50Percent RenderingServerViewportSDFScale = 1
	RenderingServerViewportSdfScale25Percent RenderingServerViewportSDFScale = 2
	RenderingServerViewportSdfScaleMax RenderingServerViewportSDFScale = 3
)

type RenderingServerViewportMSAA int64

const (
	RenderingServerViewportMsaaDisabled RenderingServerViewportMSAA = 0
	RenderingServerViewportMsaa2x RenderingServerViewportMSAA = 1
	RenderingServerViewportMsaa4x RenderingServerViewportMSAA = 2
	RenderingServerViewportMsaa8x RenderingServerViewportMSAA = 3
	RenderingServerViewportMsaaMax RenderingServerViewportMSAA = 4
)

type RenderingServerViewportScreenSpaceAA int64

const (
	RenderingServerViewportScreenSpaceAaDisabled RenderingServerViewportScreenSpaceAA = 0
	RenderingServerViewportScreenSpaceAaFxaa RenderingServerViewportScreenSpaceAA = 1
	RenderingServerViewportScreenSpaceAaMax RenderingServerViewportScreenSpaceAA = 2
)

type RenderingServerViewportOcclusionCullingBuildQuality int64

const (
	RenderingServerViewportOcclusionBuildQualityLow RenderingServerViewportOcclusionCullingBuildQuality = 0
	RenderingServerViewportOcclusionBuildQualityMedium RenderingServerViewportOcclusionCullingBuildQuality = 1
	RenderingServerViewportOcclusionBuildQualityHigh RenderingServerViewportOcclusionCullingBuildQuality = 2
)

type RenderingServerViewportRenderInfo int64

const (
	RenderingServerViewportRenderInfoObjectsInFrame RenderingServerViewportRenderInfo = 0
	RenderingServerViewportRenderInfoPrimitivesInFrame RenderingServerViewportRenderInfo = 1
	RenderingServerViewportRenderInfoDrawCallsInFrame RenderingServerViewportRenderInfo = 2
	RenderingServerViewportRenderInfoMax RenderingServerViewportRenderInfo = 3
)

type RenderingServerViewportRenderInfoType int64

const (
	RenderingServerViewportRenderInfoTypeVisible RenderingServerViewportRenderInfoType = 0
	RenderingServerViewportRenderInfoTypeShadow RenderingServerViewportRenderInfoType = 1
	RenderingServerViewportRenderInfoTypeMax RenderingServerViewportRenderInfoType = 2
)

type RenderingServerViewportDebugDraw int64

const (
	RenderingServerViewportDebugDrawDisabled RenderingServerViewportDebugDraw = 0
	RenderingServerViewportDebugDrawUnshaded RenderingServerViewportDebugDraw = 1
	RenderingServerViewportDebugDrawLighting RenderingServerViewportDebugDraw = 2
	RenderingServerViewportDebugDrawOverdraw RenderingServerViewportDebugDraw = 3
	RenderingServerViewportDebugDrawWireframe RenderingServerViewportDebugDraw = 4
	RenderingServerViewportDebugDrawNormalBuffer RenderingServerViewportDebugDraw = 5
	RenderingServerViewportDebugDrawVoxelGiAlbedo RenderingServerViewportDebugDraw = 6
	RenderingServerViewportDebugDrawVoxelGiLighting RenderingServerViewportDebugDraw = 7
	RenderingServerViewportDebugDrawVoxelGiEmission RenderingServerViewportDebugDraw = 8
	RenderingServerViewportDebugDrawShadowAtlas RenderingServerViewportDebugDraw = 9
	RenderingServerViewportDebugDrawDirectionalShadowAtlas RenderingServerViewportDebugDraw = 10
	RenderingServerViewportDebugDrawSceneLuminance RenderingServerViewportDebugDraw = 11
	RenderingServerViewportDebugDrawSsao RenderingServerViewportDebugDraw = 12
	RenderingServerViewportDebugDrawSsil RenderingServerViewportDebugDraw = 13
	RenderingServerViewportDebugDrawPssmSplits RenderingServerViewportDebugDraw = 14
	RenderingServerViewportDebugDrawDecalAtlas RenderingServerViewportDebugDraw = 15
	RenderingServerViewportDebugDrawSdfgi RenderingServerViewportDebugDraw = 16
	RenderingServerViewportDebugDrawSdfgiProbes RenderingServerViewportDebugDraw = 17
	RenderingServerViewportDebugDrawGiBuffer RenderingServerViewportDebugDraw = 18
	RenderingServerViewportDebugDrawDisableLod RenderingServerViewportDebugDraw = 19
	RenderingServerViewportDebugDrawClusterOmniLights RenderingServerViewportDebugDraw = 20
	RenderingServerViewportDebugDrawClusterSpotLights RenderingServerViewportDebugDraw = 21
	RenderingServerViewportDebugDrawClusterDecals RenderingServerViewportDebugDraw = 22
	RenderingServerViewportDebugDrawClusterReflectionProbes RenderingServerViewportDebugDraw = 23
	RenderingServerViewportDebugDrawOccluders RenderingServerViewportDebugDraw = 24
	RenderingServerViewportDebugDrawMotionVectors RenderingServerViewportDebugDraw = 25
)

type RenderingServerViewportVRSMode int64

const (
	RenderingServerViewportVrsDisabled RenderingServerViewportVRSMode = 0
	RenderingServerViewportVrsTexture RenderingServerViewportVRSMode = 1
	RenderingServerViewportVrsXr RenderingServerViewportVRSMode = 2
	RenderingServerViewportVrsMax RenderingServerViewportVRSMode = 3
)

type RenderingServerSkyMode int64

const (
	RenderingServerSkyModeAutomatic RenderingServerSkyMode = 0
	RenderingServerSkyModeQuality RenderingServerSkyMode = 1
	RenderingServerSkyModeIncremental RenderingServerSkyMode = 2
	RenderingServerSkyModeRealtime RenderingServerSkyMode = 3
)

type RenderingServerEnvironmentBG int64

const (
	RenderingServerEnvBgClearColor RenderingServerEnvironmentBG = 0
	RenderingServerEnvBgColor RenderingServerEnvironmentBG = 1
	RenderingServerEnvBgSky RenderingServerEnvironmentBG = 2
	RenderingServerEnvBgCanvas RenderingServerEnvironmentBG = 3
	RenderingServerEnvBgKeep RenderingServerEnvironmentBG = 4
	RenderingServerEnvBgCameraFeed RenderingServerEnvironmentBG = 5
	RenderingServerEnvBgMax RenderingServerEnvironmentBG = 6
)

type RenderingServerEnvironmentAmbientSource int64

const (
	RenderingServerEnvAmbientSourceBg RenderingServerEnvironmentAmbientSource = 0
	RenderingServerEnvAmbientSourceDisabled RenderingServerEnvironmentAmbientSource = 1
	RenderingServerEnvAmbientSourceColor RenderingServerEnvironmentAmbientSource = 2
	RenderingServerEnvAmbientSourceSky RenderingServerEnvironmentAmbientSource = 3
)

type RenderingServerEnvironmentReflectionSource int64

const (
	RenderingServerEnvReflectionSourceBg RenderingServerEnvironmentReflectionSource = 0
	RenderingServerEnvReflectionSourceDisabled RenderingServerEnvironmentReflectionSource = 1
	RenderingServerEnvReflectionSourceSky RenderingServerEnvironmentReflectionSource = 2
)

type RenderingServerEnvironmentGlowBlendMode int64

const (
	RenderingServerEnvGlowBlendModeAdditive RenderingServerEnvironmentGlowBlendMode = 0
	RenderingServerEnvGlowBlendModeScreen RenderingServerEnvironmentGlowBlendMode = 1
	RenderingServerEnvGlowBlendModeSoftlight RenderingServerEnvironmentGlowBlendMode = 2
	RenderingServerEnvGlowBlendModeReplace RenderingServerEnvironmentGlowBlendMode = 3
	RenderingServerEnvGlowBlendModeMix RenderingServerEnvironmentGlowBlendMode = 4
)

type RenderingServerEnvironmentToneMapper int64

const (
	RenderingServerEnvToneMapperLinear RenderingServerEnvironmentToneMapper = 0
	RenderingServerEnvToneMapperReinhard RenderingServerEnvironmentToneMapper = 1
	RenderingServerEnvToneMapperFilmic RenderingServerEnvironmentToneMapper = 2
	RenderingServerEnvToneMapperAces RenderingServerEnvironmentToneMapper = 3
)

type RenderingServerEnvironmentSSRRoughnessQuality int64

const (
	RenderingServerEnvSsrRoughnessQualityDisabled RenderingServerEnvironmentSSRRoughnessQuality = 0
	RenderingServerEnvSsrRoughnessQualityLow RenderingServerEnvironmentSSRRoughnessQuality = 1
	RenderingServerEnvSsrRoughnessQualityMedium RenderingServerEnvironmentSSRRoughnessQuality = 2
	RenderingServerEnvSsrRoughnessQualityHigh RenderingServerEnvironmentSSRRoughnessQuality = 3
)

type RenderingServerEnvironmentSSAOQuality int64

const (
	RenderingServerEnvSsaoQualityVeryLow RenderingServerEnvironmentSSAOQuality = 0
	RenderingServerEnvSsaoQualityLow RenderingServerEnvironmentSSAOQuality = 1
	RenderingServerEnvSsaoQualityMedium RenderingServerEnvironmentSSAOQuality = 2
	RenderingServerEnvSsaoQualityHigh RenderingServerEnvironmentSSAOQuality = 3
	RenderingServerEnvSsaoQualityUltra RenderingServerEnvironmentSSAOQuality = 4
)

type RenderingServerEnvironmentSSILQuality int64

const (
	RenderingServerEnvSsilQualityVeryLow RenderingServerEnvironmentSSILQuality = 0
	RenderingServerEnvSsilQualityLow RenderingServerEnvironmentSSILQuality = 1
	RenderingServerEnvSsilQualityMedium RenderingServerEnvironmentSSILQuality = 2
	RenderingServerEnvSsilQualityHigh RenderingServerEnvironmentSSILQuality = 3
	RenderingServerEnvSsilQualityUltra RenderingServerEnvironmentSSILQuality = 4
)

type RenderingServerEnvironmentSDFGIYScale int64

const (
	RenderingServerEnvSdfgiYScale50Percent RenderingServerEnvironmentSDFGIYScale = 0
	RenderingServerEnvSdfgiYScale75Percent RenderingServerEnvironmentSDFGIYScale = 1
	RenderingServerEnvSdfgiYScale100Percent RenderingServerEnvironmentSDFGIYScale = 2
)

type RenderingServerEnvironmentSDFGIRayCount int64

const (
	RenderingServerEnvSdfgiRayCount4 RenderingServerEnvironmentSDFGIRayCount = 0
	RenderingServerEnvSdfgiRayCount8 RenderingServerEnvironmentSDFGIRayCount = 1
	RenderingServerEnvSdfgiRayCount16 RenderingServerEnvironmentSDFGIRayCount = 2
	RenderingServerEnvSdfgiRayCount32 RenderingServerEnvironmentSDFGIRayCount = 3
	RenderingServerEnvSdfgiRayCount64 RenderingServerEnvironmentSDFGIRayCount = 4
	RenderingServerEnvSdfgiRayCount96 RenderingServerEnvironmentSDFGIRayCount = 5
	RenderingServerEnvSdfgiRayCount128 RenderingServerEnvironmentSDFGIRayCount = 6
	RenderingServerEnvSdfgiRayCountMax RenderingServerEnvironmentSDFGIRayCount = 7
)

type RenderingServerEnvironmentSDFGIFramesToConverge int64

const (
	RenderingServerEnvSdfgiConvergeIn5Frames RenderingServerEnvironmentSDFGIFramesToConverge = 0
	RenderingServerEnvSdfgiConvergeIn10Frames RenderingServerEnvironmentSDFGIFramesToConverge = 1
	RenderingServerEnvSdfgiConvergeIn15Frames RenderingServerEnvironmentSDFGIFramesToConverge = 2
	RenderingServerEnvSdfgiConvergeIn20Frames RenderingServerEnvironmentSDFGIFramesToConverge = 3
	RenderingServerEnvSdfgiConvergeIn25Frames RenderingServerEnvironmentSDFGIFramesToConverge = 4
	RenderingServerEnvSdfgiConvergeIn30Frames RenderingServerEnvironmentSDFGIFramesToConverge = 5
	RenderingServerEnvSdfgiConvergeMax RenderingServerEnvironmentSDFGIFramesToConverge = 6
)

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int64

const (
	RenderingServerEnvSdfgiUpdateLightIn1Frame RenderingServerEnvironmentSDFGIFramesToUpdateLight = 0
	RenderingServerEnvSdfgiUpdateLightIn2Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 1
	RenderingServerEnvSdfgiUpdateLightIn4Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 2
	RenderingServerEnvSdfgiUpdateLightIn8Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 3
	RenderingServerEnvSdfgiUpdateLightIn16Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 4
	RenderingServerEnvSdfgiUpdateLightMax RenderingServerEnvironmentSDFGIFramesToUpdateLight = 5
)

type RenderingServerSubSurfaceScatteringQuality int64

const (
	RenderingServerSubSurfaceScatteringQualityDisabled RenderingServerSubSurfaceScatteringQuality = 0
	RenderingServerSubSurfaceScatteringQualityLow RenderingServerSubSurfaceScatteringQuality = 1
	RenderingServerSubSurfaceScatteringQualityMedium RenderingServerSubSurfaceScatteringQuality = 2
	RenderingServerSubSurfaceScatteringQualityHigh RenderingServerSubSurfaceScatteringQuality = 3
)

type RenderingServerDOFBokehShape int64

const (
	RenderingServerDofBokehBox RenderingServerDOFBokehShape = 0
	RenderingServerDofBokehHexagon RenderingServerDOFBokehShape = 1
	RenderingServerDofBokehCircle RenderingServerDOFBokehShape = 2
)

type RenderingServerDOFBlurQuality int64

const (
	RenderingServerDofBlurQualityVeryLow RenderingServerDOFBlurQuality = 0
	RenderingServerDofBlurQualityLow RenderingServerDOFBlurQuality = 1
	RenderingServerDofBlurQualityMedium RenderingServerDOFBlurQuality = 2
	RenderingServerDofBlurQualityHigh RenderingServerDOFBlurQuality = 3
)

type RenderingServerInstanceType int64

const (
	RenderingServerInstanceNone RenderingServerInstanceType = 0
	RenderingServerInstanceMesh RenderingServerInstanceType = 1
	RenderingServerInstanceMultimesh RenderingServerInstanceType = 2
	RenderingServerInstanceParticles RenderingServerInstanceType = 3
	RenderingServerInstanceParticlesCollision RenderingServerInstanceType = 4
	RenderingServerInstanceLight RenderingServerInstanceType = 5
	RenderingServerInstanceReflectionProbe RenderingServerInstanceType = 6
	RenderingServerInstanceDecal RenderingServerInstanceType = 7
	RenderingServerInstanceVoxelGi RenderingServerInstanceType = 8
	RenderingServerInstanceLightmap RenderingServerInstanceType = 9
	RenderingServerInstanceOccluder RenderingServerInstanceType = 10
	RenderingServerInstanceVisiblityNotifier RenderingServerInstanceType = 11
	RenderingServerInstanceFogVolume RenderingServerInstanceType = 12
	RenderingServerInstanceMax RenderingServerInstanceType = 13
	RenderingServerInstanceGeometryMask RenderingServerInstanceType = 14
)

type RenderingServerInstanceFlags int64

const (
	RenderingServerInstanceFlagUseBakedLight RenderingServerInstanceFlags = 0
	RenderingServerInstanceFlagUseDynamicGi RenderingServerInstanceFlags = 1
	RenderingServerInstanceFlagDrawNextFrameIfVisible RenderingServerInstanceFlags = 2
	RenderingServerInstanceFlagIgnoreOcclusionCulling RenderingServerInstanceFlags = 3
	RenderingServerInstanceFlagMax RenderingServerInstanceFlags = 4
)

type RenderingServerShadowCastingSetting int64

const (
	RenderingServerShadowCastingSettingOff RenderingServerShadowCastingSetting = 0
	RenderingServerShadowCastingSettingOn RenderingServerShadowCastingSetting = 1
	RenderingServerShadowCastingSettingDoubleSided RenderingServerShadowCastingSetting = 2
	RenderingServerShadowCastingSettingShadowsOnly RenderingServerShadowCastingSetting = 3
)

type RenderingServerVisibilityRangeFadeMode int64

const (
	RenderingServerVisibilityRangeFadeDisabled RenderingServerVisibilityRangeFadeMode = 0
	RenderingServerVisibilityRangeFadeSelf RenderingServerVisibilityRangeFadeMode = 1
	RenderingServerVisibilityRangeFadeDependencies RenderingServerVisibilityRangeFadeMode = 2
)

type RenderingServerBakeChannels int64

const (
	RenderingServerBakeChannelAlbedoAlpha RenderingServerBakeChannels = 0
	RenderingServerBakeChannelNormal RenderingServerBakeChannels = 1
	RenderingServerBakeChannelOrm RenderingServerBakeChannels = 2
	RenderingServerBakeChannelEmission RenderingServerBakeChannels = 3
)

type RenderingServerCanvasTextureChannel int64

const (
	RenderingServerCanvasTextureChannelDiffuse RenderingServerCanvasTextureChannel = 0
	RenderingServerCanvasTextureChannelNormal RenderingServerCanvasTextureChannel = 1
	RenderingServerCanvasTextureChannelSpecular RenderingServerCanvasTextureChannel = 2
)

type RenderingServerNinePatchAxisMode int64

const (
	RenderingServerNinePatchStretch RenderingServerNinePatchAxisMode = 0
	RenderingServerNinePatchTile RenderingServerNinePatchAxisMode = 1
	RenderingServerNinePatchTileFit RenderingServerNinePatchAxisMode = 2
)

type RenderingServerCanvasItemTextureFilter int64

const (
	RenderingServerCanvasItemTextureFilterDefault RenderingServerCanvasItemTextureFilter = 0
	RenderingServerCanvasItemTextureFilterNearest RenderingServerCanvasItemTextureFilter = 1
	RenderingServerCanvasItemTextureFilterLinear RenderingServerCanvasItemTextureFilter = 2
	RenderingServerCanvasItemTextureFilterNearestWithMipmaps RenderingServerCanvasItemTextureFilter = 3
	RenderingServerCanvasItemTextureFilterLinearWithMipmaps RenderingServerCanvasItemTextureFilter = 4
	RenderingServerCanvasItemTextureFilterNearestWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 5
	RenderingServerCanvasItemTextureFilterLinearWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 6
	RenderingServerCanvasItemTextureFilterMax RenderingServerCanvasItemTextureFilter = 7
)

type RenderingServerCanvasItemTextureRepeat int64

const (
	RenderingServerCanvasItemTextureRepeatDefault RenderingServerCanvasItemTextureRepeat = 0
	RenderingServerCanvasItemTextureRepeatDisabled RenderingServerCanvasItemTextureRepeat = 1
	RenderingServerCanvasItemTextureRepeatEnabled RenderingServerCanvasItemTextureRepeat = 2
	RenderingServerCanvasItemTextureRepeatMirror RenderingServerCanvasItemTextureRepeat = 3
	RenderingServerCanvasItemTextureRepeatMax RenderingServerCanvasItemTextureRepeat = 4
)

type RenderingServerCanvasGroupMode int64

const (
	RenderingServerCanvasGroupModeDisabled RenderingServerCanvasGroupMode = 0
	RenderingServerCanvasGroupModeOpaque RenderingServerCanvasGroupMode = 1
	RenderingServerCanvasGroupModeTransparent RenderingServerCanvasGroupMode = 2
)

type RenderingServerCanvasLightMode int64

const (
	RenderingServerCanvasLightModePoint RenderingServerCanvasLightMode = 0
	RenderingServerCanvasLightModeDirectional RenderingServerCanvasLightMode = 1
)

type RenderingServerCanvasLightBlendMode int64

const (
	RenderingServerCanvasLightBlendModeAdd RenderingServerCanvasLightBlendMode = 0
	RenderingServerCanvasLightBlendModeSub RenderingServerCanvasLightBlendMode = 1
	RenderingServerCanvasLightBlendModeMix RenderingServerCanvasLightBlendMode = 2
)

type RenderingServerCanvasLightShadowFilter int64

const (
	RenderingServerCanvasLightFilterNone RenderingServerCanvasLightShadowFilter = 0
	RenderingServerCanvasLightFilterPcf5 RenderingServerCanvasLightShadowFilter = 1
	RenderingServerCanvasLightFilterPcf13 RenderingServerCanvasLightShadowFilter = 2
	RenderingServerCanvasLightFilterMax RenderingServerCanvasLightShadowFilter = 3
)

type RenderingServerCanvasOccluderPolygonCullMode int64

const (
	RenderingServerCanvasOccluderPolygonCullDisabled RenderingServerCanvasOccluderPolygonCullMode = 0
	RenderingServerCanvasOccluderPolygonCullClockwise RenderingServerCanvasOccluderPolygonCullMode = 1
	RenderingServerCanvasOccluderPolygonCullCounterClockwise RenderingServerCanvasOccluderPolygonCullMode = 2
)

type RenderingServerGlobalShaderUniformType int64

const (
	RenderingServerGlobalVarTypeBool RenderingServerGlobalShaderUniformType = 0
	RenderingServerGlobalVarTypeBvec2 RenderingServerGlobalShaderUniformType = 1
	RenderingServerGlobalVarTypeBvec3 RenderingServerGlobalShaderUniformType = 2
	RenderingServerGlobalVarTypeBvec4 RenderingServerGlobalShaderUniformType = 3
	RenderingServerGlobalVarTypeInt RenderingServerGlobalShaderUniformType = 4
	RenderingServerGlobalVarTypeIvec2 RenderingServerGlobalShaderUniformType = 5
	RenderingServerGlobalVarTypeIvec3 RenderingServerGlobalShaderUniformType = 6
	RenderingServerGlobalVarTypeIvec4 RenderingServerGlobalShaderUniformType = 7
	RenderingServerGlobalVarTypeRect2i RenderingServerGlobalShaderUniformType = 8
	RenderingServerGlobalVarTypeUint RenderingServerGlobalShaderUniformType = 9
	RenderingServerGlobalVarTypeUvec2 RenderingServerGlobalShaderUniformType = 10
	RenderingServerGlobalVarTypeUvec3 RenderingServerGlobalShaderUniformType = 11
	RenderingServerGlobalVarTypeUvec4 RenderingServerGlobalShaderUniformType = 12
	RenderingServerGlobalVarTypeFloat RenderingServerGlobalShaderUniformType = 13
	RenderingServerGlobalVarTypeVec2 RenderingServerGlobalShaderUniformType = 14
	RenderingServerGlobalVarTypeVec3 RenderingServerGlobalShaderUniformType = 15
	RenderingServerGlobalVarTypeVec4 RenderingServerGlobalShaderUniformType = 16
	RenderingServerGlobalVarTypeColor RenderingServerGlobalShaderUniformType = 17
	RenderingServerGlobalVarTypeRect2 RenderingServerGlobalShaderUniformType = 18
	RenderingServerGlobalVarTypeMat2 RenderingServerGlobalShaderUniformType = 19
	RenderingServerGlobalVarTypeMat3 RenderingServerGlobalShaderUniformType = 20
	RenderingServerGlobalVarTypeMat4 RenderingServerGlobalShaderUniformType = 21
	RenderingServerGlobalVarTypeTransform2d RenderingServerGlobalShaderUniformType = 22
	RenderingServerGlobalVarTypeTransform RenderingServerGlobalShaderUniformType = 23
	RenderingServerGlobalVarTypeSampler2d RenderingServerGlobalShaderUniformType = 24
	RenderingServerGlobalVarTypeSampler2darray RenderingServerGlobalShaderUniformType = 25
	RenderingServerGlobalVarTypeSampler3d RenderingServerGlobalShaderUniformType = 26
	RenderingServerGlobalVarTypeSamplercube RenderingServerGlobalShaderUniformType = 27
	RenderingServerGlobalVarTypeMax RenderingServerGlobalShaderUniformType = 28
)

type RenderingServerRenderingInfo int64

const (
	RenderingServerRenderingInfoTotalObjectsInFrame RenderingServerRenderingInfo = 0
	RenderingServerRenderingInfoTotalPrimitivesInFrame RenderingServerRenderingInfo = 1
	RenderingServerRenderingInfoTotalDrawCallsInFrame RenderingServerRenderingInfo = 2
	RenderingServerRenderingInfoTextureMemUsed RenderingServerRenderingInfo = 3
	RenderingServerRenderingInfoBufferMemUsed RenderingServerRenderingInfo = 4
	RenderingServerRenderingInfoVideoMemUsed RenderingServerRenderingInfo = 5
)

type RenderingServerFeatures int64

const (
	RenderingServerFeatureShaders RenderingServerFeatures = 0
	RenderingServerFeatureMultithreaded RenderingServerFeatures = 1
)

type RenderingServer gdnative.Object
func (RenderingServer) class() string { return "RenderingServer\000" }

func (gdClass RenderingServer) Object() Object { return Object(gdClass) }

var methodRenderingServer [448]gdnative.Method
func (gdClass RenderingServer) Texture2dCreate(image Image) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[0], image) }
func (gdClass RenderingServer) Texture2dLayeredCreate(layers Array, layered_type RenderingServerTextureLayeredType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[1], layers, layered_type) }
func (gdClass RenderingServer) Texture3dCreate(format ImageFormat, width int64, height int64, depth int64, mipmaps bool, data Array) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[2], format, width, height, depth, mipmaps, data) }
func (gdClass RenderingServer) TextureProxyCreate(base RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[3], base) }
func (gdClass RenderingServer) Texture2dUpdate(texture RID, image Image, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[4], texture, image, layer) }
func (gdClass RenderingServer) Texture3dUpdate(texture RID, data Array)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[5], texture, data) }
func (gdClass RenderingServer) TextureProxyUpdate(texture RID, proxy_to RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[6], texture, proxy_to) }
func (gdClass RenderingServer) Texture2dPlaceholderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[7]) }
func (gdClass RenderingServer) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[8], layered_type) }
func (gdClass RenderingServer) Texture3dPlaceholderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[9]) }
func (gdClass RenderingServer) Texture2dGet(texture RID) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[10], texture) }
func (gdClass RenderingServer) Texture2dLayerGet(texture RID, layer int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[11], texture, layer) }
func (gdClass RenderingServer) Texture3dGet(texture RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[12], texture) }
func (gdClass RenderingServer) TextureReplace(texture RID, by_texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[13], texture, by_texture) }
func (gdClass RenderingServer) TextureSetSizeOverride(texture RID, width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[14], texture, width, height) }
func (gdClass RenderingServer) TextureSetPath(texture RID, path string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[15], texture, path) }
func (gdClass RenderingServer) TextureGetPath(texture RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[16], texture) }
func (gdClass RenderingServer) TextureSetForceRedrawIfVisible(texture RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[17], texture, enable) }
func (gdClass RenderingServer) ShaderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[18]) }
func (gdClass RenderingServer) ShaderSetCode(shader RID, code string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[19], shader, code) }
func (gdClass RenderingServer) ShaderSetPathHint(shader RID, path string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[20], shader, path) }
func (gdClass RenderingServer) ShaderGetCode(shader RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[21], shader) }
func (gdClass RenderingServer) ShaderGetShaderUniformList(shader RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[22], shader) }
func (gdClass RenderingServer) ShaderGetParamDefault(shader RID, param string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[23], shader, param) }
func (gdClass RenderingServer) ShaderSetDefaultTextureParam(shader RID, param string, texture RID, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[24], shader, param, texture, index) }
func (gdClass RenderingServer) ShaderGetDefaultTextureParam(shader RID, param string, index int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[25], shader, param, index) }
func (gdClass RenderingServer) MaterialCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[26]) }
func (gdClass RenderingServer) MaterialSetShader(shader_material RID, shader RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[27], shader_material, shader) }
func (gdClass RenderingServer) MaterialSetParam(material RID, parameter string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[28], material, parameter, value) }
func (gdClass RenderingServer) MaterialGetParam(material RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[29], material, parameter) }
func (gdClass RenderingServer) MaterialSetRenderPriority(material RID, priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[30], material, priority) }
func (gdClass RenderingServer) MaterialSetNextPass(material RID, next_material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[31], material, next_material) }
func (gdClass RenderingServer) MeshCreateFromSurfaces(surfaces Array, blend_shape_count int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[32], surfaces, blend_shape_count) }
func (gdClass RenderingServer) MeshCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[33]) }
func (gdClass RenderingServer) MeshSurfaceGetFormatOffset(format int64, vertex_count int64, array_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[34], format, vertex_count, array_index) }
func (gdClass RenderingServer) MeshSurfaceGetFormatVertexStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[35], format, vertex_count) }
func (gdClass RenderingServer) MeshSurfaceGetFormatAttributeStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[36], format, vertex_count) }
func (gdClass RenderingServer) MeshSurfaceGetFormatSkinStride(format int64, vertex_count int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[37], format, vertex_count) }
func (gdClass RenderingServer) MeshAddSurface(mesh RID, surface Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[38], mesh, surface) }
func (gdClass RenderingServer) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[39], mesh, primitive, arrays, blend_shapes, lods, compress_format) }
func (gdClass RenderingServer) MeshGetBlendShapeCount(mesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[40], mesh) }
func (gdClass RenderingServer) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[41], mesh, mode) }
func (gdClass RenderingServer) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode { return gdnative.Return[RenderingServerBlendShapeMode](gdnative.Object(gdClass), methodRenderingServer[42], mesh) }
func (gdClass RenderingServer) MeshSurfaceSetMaterial(mesh RID, surface int64, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[43], mesh, surface, material) }
func (gdClass RenderingServer) MeshSurfaceGetMaterial(mesh RID, surface int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[44], mesh, surface) }
func (gdClass RenderingServer) MeshGetSurface(mesh RID, surface int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRenderingServer[45], mesh, surface) }
func (gdClass RenderingServer) MeshSurfaceGetArrays(mesh RID, surface int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[46], mesh, surface) }
func (gdClass RenderingServer) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[47], mesh, surface) }
func (gdClass RenderingServer) MeshGetSurfaceCount(mesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[48], mesh) }
func (gdClass RenderingServer) MeshSetCustomAabb(mesh RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[49], mesh, aabb) }
func (gdClass RenderingServer) MeshGetCustomAabb(mesh RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[50], mesh) }
func (gdClass RenderingServer) MeshClear(mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[51], mesh) }
func (gdClass RenderingServer) MeshSurfaceUpdateVertexRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[52], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[53], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSurfaceUpdateSkinRegion(mesh RID, surface int64, offset int64, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[54], mesh, surface, offset, data) }
func (gdClass RenderingServer) MeshSetShadowMesh(mesh RID, shadow_mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[55], mesh, shadow_mesh) }
func (gdClass RenderingServer) MultimeshCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[56]) }
func (gdClass RenderingServer) MultimeshAllocateData(multimesh RID, instances int64, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[57], multimesh, instances, transform_format, color_format, custom_data_format) }
func (gdClass RenderingServer) MultimeshGetInstanceCount(multimesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[58], multimesh) }
func (gdClass RenderingServer) MultimeshSetMesh(multimesh RID, mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[59], multimesh, mesh) }
func (gdClass RenderingServer) MultimeshInstanceSetTransform(multimesh RID, index int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[60], multimesh, index, transform) }
func (gdClass RenderingServer) MultimeshInstanceSetTransform2d(multimesh RID, index int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[61], multimesh, index, transform) }
func (gdClass RenderingServer) MultimeshInstanceSetColor(multimesh RID, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[62], multimesh, index, color) }
func (gdClass RenderingServer) MultimeshInstanceSetCustomData(multimesh RID, index int64, custom_data Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[63], multimesh, index, custom_data) }
func (gdClass RenderingServer) MultimeshGetMesh(multimesh RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[64], multimesh) }
func (gdClass RenderingServer) MultimeshGetAabb(multimesh RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[65], multimesh) }
func (gdClass RenderingServer) MultimeshInstanceGetTransform(multimesh RID, index int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[66], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetTransform2d(multimesh RID, index int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodRenderingServer[67], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetColor(multimesh RID, index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRenderingServer[68], multimesh, index) }
func (gdClass RenderingServer) MultimeshInstanceGetCustomData(multimesh RID, index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRenderingServer[69], multimesh, index) }
func (gdClass RenderingServer) MultimeshSetVisibleInstances(multimesh RID, visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[70], multimesh, visible) }
func (gdClass RenderingServer) MultimeshGetVisibleInstances(multimesh RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[71], multimesh) }
func (gdClass RenderingServer) MultimeshSetBuffer(multimesh RID, buffer []float32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[72], multimesh, buffer) }
func (gdClass RenderingServer) MultimeshGetBuffer(multimesh RID) []float32 { return gdnative.Return[[]float32](gdnative.Object(gdClass), methodRenderingServer[73], multimesh) }
func (gdClass RenderingServer) SkeletonCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[74]) }
func (gdClass RenderingServer) SkeletonAllocateData(skeleton RID, bones int64, is_2d_skeleton bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[75], skeleton, bones, is_2d_skeleton) }
func (gdClass RenderingServer) SkeletonGetBoneCount(skeleton RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[76], skeleton) }
func (gdClass RenderingServer) SkeletonBoneSetTransform(skeleton RID, bone int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[77], skeleton, bone, transform) }
func (gdClass RenderingServer) SkeletonBoneGetTransform(skeleton RID, bone int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[78], skeleton, bone) }
func (gdClass RenderingServer) SkeletonBoneSetTransform2d(skeleton RID, bone int64, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[79], skeleton, bone, transform) }
func (gdClass RenderingServer) SkeletonBoneGetTransform2d(skeleton RID, bone int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodRenderingServer[80], skeleton, bone) }
func (gdClass RenderingServer) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[81], skeleton, base_transform) }
func (gdClass RenderingServer) DirectionalLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[82]) }
func (gdClass RenderingServer) OmniLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[83]) }
func (gdClass RenderingServer) SpotLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[84]) }
func (gdClass RenderingServer) LightSetColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[85], light, color) }
func (gdClass RenderingServer) LightSetParam(light RID, param RenderingServerLightParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[86], light, param, value) }
func (gdClass RenderingServer) LightSetShadow(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[87], light, enabled) }
func (gdClass RenderingServer) LightSetProjector(light RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[88], light, texture) }
func (gdClass RenderingServer) LightSetNegative(light RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[89], light, enable) }
func (gdClass RenderingServer) LightSetCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[90], light, mask) }
func (gdClass RenderingServer) LightSetDistanceFade(decal RID, enabled bool, begin float64, shadow float64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[91], decal, enabled, begin, shadow, length) }
func (gdClass RenderingServer) LightSetReverseCullFaceMode(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[92], light, enabled) }
func (gdClass RenderingServer) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[93], light, bake_mode) }
func (gdClass RenderingServer) LightSetMaxSdfgiCascade(light RID, cascade int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[94], light, cascade) }
func (gdClass RenderingServer) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[95], light, mode) }
func (gdClass RenderingServer) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[96], light, mode) }
func (gdClass RenderingServer) LightDirectionalSetBlendSplits(light RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[97], light, enable) }
func (gdClass RenderingServer) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[98], light, mode) }
func (gdClass RenderingServer) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[99], filter) }
func (gdClass RenderingServer) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[100], quality) }
func (gdClass RenderingServer) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[101], quality) }
func (gdClass RenderingServer) DirectionalShadowAtlasSetSize(size int64, is_16bits bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[102], size, is_16bits) }
func (gdClass RenderingServer) ReflectionProbeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[103]) }
func (gdClass RenderingServer) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[104], probe, mode) }
func (gdClass RenderingServer) ReflectionProbeSetIntensity(probe RID, intensity float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[105], probe, intensity) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[106], probe, mode) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientColor(probe RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[107], probe, color) }
func (gdClass RenderingServer) ReflectionProbeSetAmbientEnergy(probe RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[108], probe, energy) }
func (gdClass RenderingServer) ReflectionProbeSetMaxDistance(probe RID, distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[109], probe, distance) }
func (gdClass RenderingServer) ReflectionProbeSetExtents(probe RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[110], probe, extents) }
func (gdClass RenderingServer) ReflectionProbeSetOriginOffset(probe RID, offset Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[111], probe, offset) }
func (gdClass RenderingServer) ReflectionProbeSetAsInterior(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[112], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[113], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetEnableShadows(probe RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[114], probe, enable) }
func (gdClass RenderingServer) ReflectionProbeSetCullMask(probe RID, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[115], probe, layers) }
func (gdClass RenderingServer) ReflectionProbeSetResolution(probe RID, resolution int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[116], probe, resolution) }
func (gdClass RenderingServer) ReflectionProbeSetMeshLodThreshold(probe RID, pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[117], probe, pixels) }
func (gdClass RenderingServer) DecalCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[118]) }
func (gdClass RenderingServer) DecalSetExtents(decal RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[119], decal, extents) }
func (gdClass RenderingServer) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[120], decal, atype, texture) }
func (gdClass RenderingServer) DecalSetEmissionEnergy(decal RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[121], decal, energy) }
func (gdClass RenderingServer) DecalSetAlbedoMix(decal RID, albedo_mix float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[122], decal, albedo_mix) }
func (gdClass RenderingServer) DecalSetModulate(decal RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[123], decal, color) }
func (gdClass RenderingServer) DecalSetCullMask(decal RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[124], decal, mask) }
func (gdClass RenderingServer) DecalSetDistanceFade(decal RID, enabled bool, begin float64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[125], decal, enabled, begin, length) }
func (gdClass RenderingServer) DecalSetFade(decal RID, above float64, below float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[126], decal, above, below) }
func (gdClass RenderingServer) DecalSetNormalFade(decal RID, fade float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[127], decal, fade) }
func (gdClass RenderingServer) DecalsSetFilter(filter RenderingServerDecalFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[128], filter) }
func (gdClass RenderingServer) GiSetUseHalfResolution(half_resolution bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[129], half_resolution) }
func (gdClass RenderingServer) VoxelGiCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[130]) }
func (gdClass RenderingServer) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[131], voxel_gi, to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts) }
func (gdClass RenderingServer) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i { return gdnative.Return[Vector3i](gdnative.Object(gdClass), methodRenderingServer[132], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetOctreeCells(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[133], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetDataCells(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[134], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetDistanceField(voxel_gi RID) []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodRenderingServer[135], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetLevelCounts(voxel_gi RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[136], voxel_gi) }
func (gdClass RenderingServer) VoxelGiGetToCellXform(voxel_gi RID) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodRenderingServer[137], voxel_gi) }
func (gdClass RenderingServer) VoxelGiSetDynamicRange(voxel_gi RID, arange float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[138], voxel_gi, arange) }
func (gdClass RenderingServer) VoxelGiSetPropagation(voxel_gi RID, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[139], voxel_gi, amount) }
func (gdClass RenderingServer) VoxelGiSetEnergy(voxel_gi RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[140], voxel_gi, energy) }
func (gdClass RenderingServer) VoxelGiSetBias(voxel_gi RID, bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[141], voxel_gi, bias) }
func (gdClass RenderingServer) VoxelGiSetNormalBias(voxel_gi RID, bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[142], voxel_gi, bias) }
func (gdClass RenderingServer) VoxelGiSetInterior(voxel_gi RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[143], voxel_gi, enable) }
func (gdClass RenderingServer) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[144], voxel_gi, enable) }
func (gdClass RenderingServer) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[145], quality) }
func (gdClass RenderingServer) LightmapCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[146]) }
func (gdClass RenderingServer) LightmapSetTextures(lightmap RID, light RID, uses_sh bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[147], lightmap, light, uses_sh) }
func (gdClass RenderingServer) LightmapSetProbeBounds(lightmap RID, bounds AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[148], lightmap, bounds) }
func (gdClass RenderingServer) LightmapSetProbeInterior(lightmap RID, interior bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[149], lightmap, interior) }
func (gdClass RenderingServer) LightmapSetProbeCaptureData(lightmap RID, points []Vector3, point_sh []Color, tetrahedra []int32, bsp_tree []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[150], lightmap, points, point_sh, tetrahedra, bsp_tree) }
func (gdClass RenderingServer) LightmapGetProbeCapturePoints(lightmap RID) []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodRenderingServer[151], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureSh(lightmap RID) []Color { return gdnative.Return[[]Color](gdnative.Object(gdClass), methodRenderingServer[152], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureTetrahedra(lightmap RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[153], lightmap) }
func (gdClass RenderingServer) LightmapGetProbeCaptureBspTree(lightmap RID) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodRenderingServer[154], lightmap) }
func (gdClass RenderingServer) LightmapSetProbeCaptureUpdateSpeed(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[155], speed) }
func (gdClass RenderingServer) ParticlesCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[156]) }
func (gdClass RenderingServer) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[157], particles, mode) }
func (gdClass RenderingServer) ParticlesSetEmitting(particles RID, emitting bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[158], particles, emitting) }
func (gdClass RenderingServer) ParticlesGetEmitting(particles RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[159], particles) }
func (gdClass RenderingServer) ParticlesSetAmount(particles RID, amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[160], particles, amount) }
func (gdClass RenderingServer) ParticlesSetLifetime(particles RID, lifetime float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[161], particles, lifetime) }
func (gdClass RenderingServer) ParticlesSetOneShot(particles RID, one_shot bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[162], particles, one_shot) }
func (gdClass RenderingServer) ParticlesSetPreProcessTime(particles RID, time float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[163], particles, time) }
func (gdClass RenderingServer) ParticlesSetExplosivenessRatio(particles RID, ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[164], particles, ratio) }
func (gdClass RenderingServer) ParticlesSetRandomnessRatio(particles RID, ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[165], particles, ratio) }
func (gdClass RenderingServer) ParticlesSetCustomAabb(particles RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[166], particles, aabb) }
func (gdClass RenderingServer) ParticlesSetSpeedScale(particles RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[167], particles, scale) }
func (gdClass RenderingServer) ParticlesSetUseLocalCoordinates(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[168], particles, enable) }
func (gdClass RenderingServer) ParticlesSetProcessMaterial(particles RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[169], particles, material) }
func (gdClass RenderingServer) ParticlesSetFixedFps(particles RID, fps int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[170], particles, fps) }
func (gdClass RenderingServer) ParticlesSetInterpolate(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[171], particles, enable) }
func (gdClass RenderingServer) ParticlesSetFractionalDelta(particles RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[172], particles, enable) }
func (gdClass RenderingServer) ParticlesSetCollisionBaseSize(particles RID, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[173], particles, size) }
func (gdClass RenderingServer) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[174], particles, align) }
func (gdClass RenderingServer) ParticlesSetTrails(particles RID, enable bool, length_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[175], particles, enable, length_sec) }
func (gdClass RenderingServer) ParticlesSetTrailBindPoses(particles RID, bind_poses Array)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[176], particles, bind_poses) }
func (gdClass RenderingServer) ParticlesIsInactive(particles RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[177], particles) }
func (gdClass RenderingServer) ParticlesRequestProcess(particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[178], particles) }
func (gdClass RenderingServer) ParticlesRestart(particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[179], particles) }
func (gdClass RenderingServer) ParticlesSetSubemitter(particles RID, subemitter_particles RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[180], particles, subemitter_particles) }
func (gdClass RenderingServer) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[181], particles, transform, velocity, color, custom, emit_flags) }
func (gdClass RenderingServer) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[182], particles, order) }
func (gdClass RenderingServer) ParticlesSetDrawPasses(particles RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[183], particles, count) }
func (gdClass RenderingServer) ParticlesSetDrawPassMesh(particles RID, pass int64, mesh RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[184], particles, pass, mesh) }
func (gdClass RenderingServer) ParticlesGetCurrentAabb(particles RID) AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodRenderingServer[185], particles) }
func (gdClass RenderingServer) ParticlesSetEmissionTransform(particles RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[186], particles, transform) }
func (gdClass RenderingServer) ParticlesCollisionCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[187]) }
func (gdClass RenderingServer) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[188], particles_collision, atype) }
func (gdClass RenderingServer) ParticlesCollisionSetCullMask(particles_collision RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[189], particles_collision, mask) }
func (gdClass RenderingServer) ParticlesCollisionSetSphereRadius(particles_collision RID, radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[190], particles_collision, radius) }
func (gdClass RenderingServer) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[191], particles_collision, extents) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorStrength(particles_collision RID, setrngth float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[192], particles_collision, setrngth) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[193], particles_collision, amount) }
func (gdClass RenderingServer) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[194], particles_collision, curve) }
func (gdClass RenderingServer) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[195], particles_collision, texture) }
func (gdClass RenderingServer) ParticlesCollisionHeightFieldUpdate(particles_collision RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[196], particles_collision) }
func (gdClass RenderingServer) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[197], particles_collision, resolution) }
func (gdClass RenderingServer) FogVolumeCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[198]) }
func (gdClass RenderingServer) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[199], fog_volume, shape) }
func (gdClass RenderingServer) FogVolumeSetExtents(fog_volume RID, extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[200], fog_volume, extents) }
func (gdClass RenderingServer) FogVolumeSetMaterial(fog_volume RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[201], fog_volume, material) }
func (gdClass RenderingServer) VisibilityNotifierCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[202]) }
func (gdClass RenderingServer) VisibilityNotifierSetAabb(notifier RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[203], notifier, aabb) }
func (gdClass RenderingServer) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[204], notifier, enter_callable, exit_callable) }
func (gdClass RenderingServer) OccluderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[205]) }
func (gdClass RenderingServer) OccluderSetMesh(occluder RID, vertices []Vector3, indices []int32)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[206], occluder, vertices, indices) }
func (gdClass RenderingServer) CameraCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[207]) }
func (gdClass RenderingServer) CameraSetPerspective(camera RID, fovy_degrees float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[208], camera, fovy_degrees, z_near, z_far) }
func (gdClass RenderingServer) CameraSetOrthogonal(camera RID, size float64, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[209], camera, size, z_near, z_far) }
func (gdClass RenderingServer) CameraSetFrustum(camera RID, size float64, offset Vector2, z_near float64, z_far float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[210], camera, size, offset, z_near, z_far) }
func (gdClass RenderingServer) CameraSetTransform(camera RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[211], camera, transform) }
func (gdClass RenderingServer) CameraSetCullMask(camera RID, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[212], camera, layers) }
func (gdClass RenderingServer) CameraSetEnvironment(camera RID, env RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[213], camera, env) }
func (gdClass RenderingServer) CameraSetCameraEffects(camera RID, effects RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[214], camera, effects) }
func (gdClass RenderingServer) CameraSetUseVerticalAspect(camera RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[215], camera, enable) }
func (gdClass RenderingServer) ViewportCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[216]) }
func (gdClass RenderingServer) ViewportSetUseXr(viewport RID, use_xr bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[217], viewport, use_xr) }
func (gdClass RenderingServer) ViewportSetSize(viewport RID, width int64, height int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[218], viewport, width, height) }
func (gdClass RenderingServer) ViewportSetActive(viewport RID, active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[219], viewport, active) }
func (gdClass RenderingServer) ViewportSetParentViewport(viewport RID, parent_viewport RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[220], viewport, parent_viewport) }
func (gdClass RenderingServer) ViewportAttachToScreen(viewport RID, rect Rect2, screen int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[221], viewport, rect, screen) }
func (gdClass RenderingServer) ViewportSetRenderDirectToScreen(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[222], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[223], viewport, scaling_3d_mode) }
func (gdClass RenderingServer) ViewportSetScaling3dScale(viewport RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[224], viewport, scale) }
func (gdClass RenderingServer) ViewportSetFsrSharpness(viewport RID, sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[225], viewport, sharpness) }
func (gdClass RenderingServer) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[226], viewport, mipmap_bias) }
func (gdClass RenderingServer) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[227], viewport, update_mode) }
func (gdClass RenderingServer) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[228], viewport, clear_mode) }
func (gdClass RenderingServer) ViewportGetTexture(viewport RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[229], viewport) }
func (gdClass RenderingServer) ViewportSetDisable3d(viewport RID, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[230], viewport, disable) }
func (gdClass RenderingServer) ViewportSetDisable2d(viewport RID, disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[231], viewport, disable) }
func (gdClass RenderingServer) ViewportSetDisableEnvironment(viewport RID, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[232], viewport, disabled) }
func (gdClass RenderingServer) ViewportAttachCamera(viewport RID, camera RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[233], viewport, camera) }
func (gdClass RenderingServer) ViewportSetScenario(viewport RID, scenario RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[234], viewport, scenario) }
func (gdClass RenderingServer) ViewportAttachCanvas(viewport RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[235], viewport, canvas) }
func (gdClass RenderingServer) ViewportRemoveCanvas(viewport RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[236], viewport, canvas) }
func (gdClass RenderingServer) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[237], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[238], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[239], viewport, filter) }
func (gdClass RenderingServer) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[240], viewport, repeat) }
func (gdClass RenderingServer) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[241], viewport, canvas, offset) }
func (gdClass RenderingServer) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int64, sublayer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[242], viewport, canvas, layer, sublayer) }
func (gdClass RenderingServer) ViewportSetTransparentBackground(viewport RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[243], viewport, enabled) }
func (gdClass RenderingServer) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[244], viewport, transform) }
func (gdClass RenderingServer) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[245], viewport, oversize, scale) }
func (gdClass RenderingServer) ViewportSetPositionalShadowAtlasSize(viewport RID, size int64, use_16_bits bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[246], viewport, size, use_16_bits) }
func (gdClass RenderingServer) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int64, subdivision int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[247], viewport, quadrant, subdivision) }
func (gdClass RenderingServer) ViewportSetMsaa(viewport RID, msaa RenderingServerViewportMSAA)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[248], viewport, msaa) }
func (gdClass RenderingServer) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[249], viewport, mode) }
func (gdClass RenderingServer) ViewportSetUseTaa(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[250], viewport, enable) }
func (gdClass RenderingServer) ViewportSetUseDebanding(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[251], viewport, enable) }
func (gdClass RenderingServer) ViewportSetUseOcclusionCulling(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[252], viewport, enable) }
func (gdClass RenderingServer) ViewportSetOcclusionRaysPerThread(rays_per_thread int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[253], rays_per_thread) }
func (gdClass RenderingServer) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[254], quality) }
func (gdClass RenderingServer) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[255], viewport, atype, info) }
func (gdClass RenderingServer) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[256], viewport, draw) }
func (gdClass RenderingServer) ViewportSetMeasureRenderTime(viewport RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[257], viewport, enable) }
func (gdClass RenderingServer) ViewportGetMeasuredRenderTimeCpu(viewport RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[258], viewport) }
func (gdClass RenderingServer) ViewportGetMeasuredRenderTimeGpu(viewport RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[259], viewport) }
func (gdClass RenderingServer) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[260], viewport, mode) }
func (gdClass RenderingServer) ViewportSetVrsTexture(viewport RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[261], viewport, texture) }
func (gdClass RenderingServer) SkyCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[262]) }
func (gdClass RenderingServer) SkySetRadianceSize(sky RID, radiance_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[263], sky, radiance_size) }
func (gdClass RenderingServer) SkySetMode(sky RID, mode RenderingServerSkyMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[264], sky, mode) }
func (gdClass RenderingServer) SkySetMaterial(sky RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[265], sky, material) }
func (gdClass RenderingServer) SkyBakePanorama(sky RID, energy float64, bake_irradiance bool, size Vector2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[266], sky, energy, bake_irradiance, size) }
func (gdClass RenderingServer) EnvironmentCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[267]) }
func (gdClass RenderingServer) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[268], env, bg) }
func (gdClass RenderingServer) EnvironmentSetSky(env RID, sky RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[269], env, sky) }
func (gdClass RenderingServer) EnvironmentSetSkyCustomFov(env RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[270], env, scale) }
func (gdClass RenderingServer) EnvironmentSetSkyOrientation(env RID, orientation Basis)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[271], env, orientation) }
func (gdClass RenderingServer) EnvironmentSetBgColor(env RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[272], env, color) }
func (gdClass RenderingServer) EnvironmentSetBgEnergy(env RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[273], env, energy) }
func (gdClass RenderingServer) EnvironmentSetCanvasMaxLayer(env RID, max_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[274], env, max_layer) }
func (gdClass RenderingServer) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy float64, sky_contibution float64, reflection_source RenderingServerEnvironmentReflectionSource)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[275], env, color, ambient, energy, sky_contibution, reflection_source) }
func (gdClass RenderingServer) EnvironmentSetGlow(env RID, enable bool, levels []float32, intensity float64, strength float64, mix float64, bloom_threshold float64, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold float64, hdr_bleed_scale float64, hdr_luminance_cap float64, glow_map_strength float64, glow_map RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[276], env, enable, levels, intensity, strength, mix, bloom_threshold, blend_mode, hdr_bleed_threshold, hdr_bleed_scale, hdr_luminance_cap, glow_map_strength, glow_map) }
func (gdClass RenderingServer) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure float64, white float64, auto_exposure bool, min_luminance float64, max_luminance float64, auto_exp_speed float64, auto_exp_grey float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[277], env, tone_mapper, exposure, white, auto_exposure, min_luminance, max_luminance, auto_exp_speed, auto_exp_grey) }
func (gdClass RenderingServer) EnvironmentSetAdjustment(env RID, enable bool, brightness float64, contrast float64, saturation float64, use_1d_color_correction bool, color_correction RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[278], env, enable, brightness, contrast, saturation, use_1d_color_correction, color_correction) }
func (gdClass RenderingServer) EnvironmentSetSsr(env RID, enable bool, max_steps int64, fade_in float64, fade_out float64, depth_tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[279], env, enable, max_steps, fade_in, fade_out, depth_tolerance) }
func (gdClass RenderingServer) EnvironmentSetSsao(env RID, enable bool, radius float64, intensity float64, power float64, detail float64, horizon float64, sharpness float64, light_affect float64, ao_channel_affect float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[280], env, enable, radius, intensity, power, detail, horizon, sharpness, light_affect, ao_channel_affect) }
func (gdClass RenderingServer) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy float64, sun_scatter float64, density float64, height float64, height_density float64, aerial_perspective float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[281], env, enable, light_color, light_energy, sun_scatter, density, height, height_density, aerial_perspective) }
func (gdClass RenderingServer) EnvironmentSetSdfgi(env RID, enable bool, cascades int64, min_cell_size float64, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback float64, read_sky bool, energy float64, normal_bias float64, probe_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[282], env, enable, cascades, min_cell_size, y_scale, use_occlusion, bounce_feedback, read_sky, energy, normal_bias, probe_bias) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFog(env RID, enable bool, density float64, albedo Color, emission Color, emission_energy float64, anisotropy float64, length float64, p_detail_spread float64, gi_inject float64, temporal_reprojection bool, temporal_reprojection_amount float64, ambient_inject float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[283], env, enable, density, albedo, emission, emission_energy, anisotropy, length, p_detail_spread, gi_inject, temporal_reprojection, temporal_reprojection_amount, ambient_inject) }
func (gdClass RenderingServer) EnvironmentGlowSetUseBicubicUpscale(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[284], enable) }
func (gdClass RenderingServer) EnvironmentGlowSetUseHighQuality(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[285], enable) }
func (gdClass RenderingServer) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[286], quality) }
func (gdClass RenderingServer) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[287], quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to) }
func (gdClass RenderingServer) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[288], quality, half_size, adaptive_target, blur_passes, fadeout_from, fadeout_to) }
func (gdClass RenderingServer) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[289], ray_count) }
func (gdClass RenderingServer) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[290], frames) }
func (gdClass RenderingServer) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[291], frames) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFogVolumeSize(size int64, depth int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[292], size, depth) }
func (gdClass RenderingServer) EnvironmentSetVolumetricFogFilterActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[293], active) }
func (gdClass RenderingServer) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodRenderingServer[294], environment, bake_irradiance, size) }
func (gdClass RenderingServer) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount float64, limit float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[295], enable, amount, limit) }
func (gdClass RenderingServer) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[296], quality) }
func (gdClass RenderingServer) SubSurfaceScatteringSetScale(scale float64, depth_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[297], scale, depth_scale) }
func (gdClass RenderingServer) CameraEffectsCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[298]) }
func (gdClass RenderingServer) CameraEffectsSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[299], quality, use_jitter) }
func (gdClass RenderingServer) CameraEffectsSetDofBlurBokehShape(shape RenderingServerDOFBokehShape)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[300], shape) }
func (gdClass RenderingServer) CameraEffectsSetDofBlur(camera_effects RID, far_enable bool, far_distance float64, far_transition float64, near_enable bool, near_distance float64, near_transition float64, amount float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[301], camera_effects, far_enable, far_distance, far_transition, near_enable, near_distance, near_transition, amount) }
func (gdClass RenderingServer) CameraEffectsSetCustomExposure(camera_effects RID, enable bool, exposure float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[302], camera_effects, enable, exposure) }
func (gdClass RenderingServer) ScenarioCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[303]) }
func (gdClass RenderingServer) ScenarioSetEnvironment(scenario RID, environment RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[304], scenario, environment) }
func (gdClass RenderingServer) ScenarioSetFallbackEnvironment(scenario RID, environment RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[305], scenario, environment) }
func (gdClass RenderingServer) ScenarioSetCameraEffects(scenario RID, effects RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[306], scenario, effects) }
func (gdClass RenderingServer) InstanceCreate2(base RID, scenario RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[307], base, scenario) }
func (gdClass RenderingServer) InstanceCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[308]) }
func (gdClass RenderingServer) InstanceSetBase(instance RID, base RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[309], instance, base) }
func (gdClass RenderingServer) InstanceSetScenario(instance RID, scenario RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[310], instance, scenario) }
func (gdClass RenderingServer) InstanceSetLayerMask(instance RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[311], instance, mask) }
func (gdClass RenderingServer) InstanceSetTransform(instance RID, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[312], instance, transform) }
func (gdClass RenderingServer) InstanceAttachObjectInstanceId(instance RID, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[313], instance, id) }
func (gdClass RenderingServer) InstanceSetBlendShapeWeight(instance RID, shape int64, weight float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[314], instance, shape, weight) }
func (gdClass RenderingServer) InstanceSetSurfaceOverrideMaterial(instance RID, surface int64, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[315], instance, surface, material) }
func (gdClass RenderingServer) InstanceSetVisible(instance RID, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[316], instance, visible) }
func (gdClass RenderingServer) InstanceGeometrySetTransparency(instance RID, transparency float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[317], instance, transparency) }
func (gdClass RenderingServer) InstanceSetCustomAabb(instance RID, aabb AABB)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[318], instance, aabb) }
func (gdClass RenderingServer) InstanceAttachSkeleton(instance RID, skeleton RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[319], instance, skeleton) }
func (gdClass RenderingServer) InstanceSetExtraVisibilityMargin(instance RID, margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[320], instance, margin) }
func (gdClass RenderingServer) InstanceSetVisibilityParent(instance RID, parent RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[321], instance, parent) }
func (gdClass RenderingServer) InstanceSetIgnoreCulling(instance RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[322], instance, enabled) }
func (gdClass RenderingServer) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[323], instance, flag, enabled) }
func (gdClass RenderingServer) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[324], instance, shadow_casting_setting) }
func (gdClass RenderingServer) InstanceGeometrySetMaterialOverride(instance RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[325], instance, material) }
func (gdClass RenderingServer) InstanceGeometrySetMaterialOverlay(instance RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[326], instance, material) }
func (gdClass RenderingServer) InstanceGeometrySetVisibilityRange(instance RID, min float64, max float64, min_margin float64, max_margin float64, fade_mode RenderingServerVisibilityRangeFadeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[327], instance, min, max, min_margin, max_margin, fade_mode) }
func (gdClass RenderingServer) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[328], instance, lightmap, lightmap_uv_scale, lightmap_slice) }
func (gdClass RenderingServer) InstanceGeometrySetLodBias(instance RID, lod_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[329], instance, lod_bias) }
func (gdClass RenderingServer) InstanceGeometrySetShaderUniform(instance RID, parameter string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[330], instance, parameter, value) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniform(instance RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[331], instance, parameter) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniformDefaultValue(instance RID, parameter string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[332], instance, parameter) }
func (gdClass RenderingServer) InstanceGeometryGetShaderUniformList(instance RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[333], instance) }
func (gdClass RenderingServer) InstancesCullAabb(aabb AABB, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[334], aabb, scenario) }
func (gdClass RenderingServer) InstancesCullRay(from Vector3, to Vector3, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[335], from, to, scenario) }
func (gdClass RenderingServer) InstancesCullConvex(convex Array, scenario RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[336], convex, scenario) }
func (gdClass RenderingServer) BakeRenderUv2(base RID, material_overrides Array, image_size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRenderingServer[337], base, material_overrides, image_size) }
func (gdClass RenderingServer) CanvasCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[338]) }
func (gdClass RenderingServer) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[339], canvas, item, mirroring) }
func (gdClass RenderingServer) CanvasSetModulate(canvas RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[340], canvas, color) }
func (gdClass RenderingServer) CanvasSetDisableScale(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[341], disable) }
func (gdClass RenderingServer) CanvasTextureCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[342]) }
func (gdClass RenderingServer) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[343], canvas_texture, channel, texture) }
func (gdClass RenderingServer) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[344], canvas_texture, base_color, shininess) }
func (gdClass RenderingServer) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[345], canvas_texture, filter) }
func (gdClass RenderingServer) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[346], canvas_texture, repeat) }
func (gdClass RenderingServer) CanvasItemCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[347]) }
func (gdClass RenderingServer) CanvasItemSetParent(item RID, parent RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[348], item, parent) }
func (gdClass RenderingServer) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[349], item, filter) }
func (gdClass RenderingServer) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[350], item, repeat) }
func (gdClass RenderingServer) CanvasItemSetVisible(item RID, visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[351], item, visible) }
func (gdClass RenderingServer) CanvasItemSetLightMask(item RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[352], item, mask) }
func (gdClass RenderingServer) CanvasItemSetTransform(item RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[353], item, transform) }
func (gdClass RenderingServer) CanvasItemSetClip(item RID, clip bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[354], item, clip) }
func (gdClass RenderingServer) CanvasItemSetDistanceFieldMode(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[355], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[356], item, use_custom_rect, rect) }
func (gdClass RenderingServer) CanvasItemSetModulate(item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[357], item, color) }
func (gdClass RenderingServer) CanvasItemSetSelfModulate(item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[358], item, color) }
func (gdClass RenderingServer) CanvasItemSetDrawBehindParent(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[359], item, enabled) }
func (gdClass RenderingServer) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[360], item, from, to, color, width, antialiased) }
func (gdClass RenderingServer) CanvasItemAddPolyline(item RID, points []Vector2, colors []Color, width float64, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[361], item, points, colors, width, antialiased) }
func (gdClass RenderingServer) CanvasItemAddRect(item RID, rect Rect2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[362], item, rect, color) }
func (gdClass RenderingServer) CanvasItemAddCircle(item RID, pos Vector2, radius float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[363], item, pos, radius, color) }
func (gdClass RenderingServer) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[364], item, rect, texture, tile, modulate, transpose) }
func (gdClass RenderingServer) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int64, px_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[365], item, rect, texture, src_rect, modulate, outline_size, px_range) }
func (gdClass RenderingServer) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[366], item, rect, texture, src_rect, modulate, transpose, clip_uv) }
func (gdClass RenderingServer) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[367], item, rect, source, texture, topleft, bottomright, x_axis_mode, y_axis_mode, draw_center, modulate) }
func (gdClass RenderingServer) CanvasItemAddPrimitive(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID, width float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[368], item, points, colors, uvs, texture, width) }
func (gdClass RenderingServer) CanvasItemAddPolygon(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[369], item, points, colors, uvs, texture) }
func (gdClass RenderingServer) CanvasItemAddTriangleArray(item RID, indices []int32, points []Vector2, colors []Color, uvs []Vector2, bones []int32, weights []float32, texture RID, count int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[370], item, indices, points, colors, uvs, bones, weights, texture, count) }
func (gdClass RenderingServer) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[371], item, mesh, transform, modulate, texture) }
func (gdClass RenderingServer) CanvasItemAddMultimesh(item RID, mesh RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[372], item, mesh, texture) }
func (gdClass RenderingServer) CanvasItemAddParticles(item RID, particles RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[373], item, particles, texture) }
func (gdClass RenderingServer) CanvasItemAddSetTransform(item RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[374], item, transform) }
func (gdClass RenderingServer) CanvasItemAddClipIgnore(item RID, ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[375], item, ignore) }
func (gdClass RenderingServer) CanvasItemAddAnimationSlice(item RID, animation_length float64, slice_begin float64, slice_end float64, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[376], item, animation_length, slice_begin, slice_end, offset) }
func (gdClass RenderingServer) CanvasItemSetSortChildrenByY(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[377], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetZIndex(item RID, z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[378], item, z_index) }
func (gdClass RenderingServer) CanvasItemSetZAsRelativeToParent(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[379], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[380], item, enabled, rect) }
func (gdClass RenderingServer) CanvasItemClear(item RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[381], item) }
func (gdClass RenderingServer) CanvasItemSetDrawIndex(item RID, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[382], item, index) }
func (gdClass RenderingServer) CanvasItemSetMaterial(item RID, material RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[383], item, material) }
func (gdClass RenderingServer) CanvasItemSetUseParentMaterial(item RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[384], item, enabled) }
func (gdClass RenderingServer) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[385], item, enable, area, enter_callable, exit_callable) }
func (gdClass RenderingServer) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin float64, fit_empty bool, fit_margin float64, blur_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[386], item, mode, clear_margin, fit_empty, fit_margin, blur_mipmaps) }
func (gdClass RenderingServer) CanvasLightCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[387]) }
func (gdClass RenderingServer) CanvasLightAttachToCanvas(light RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[388], light, canvas) }
func (gdClass RenderingServer) CanvasLightSetEnabled(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[389], light, enabled) }
func (gdClass RenderingServer) CanvasLightSetTextureScale(light RID, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[390], light, scale) }
func (gdClass RenderingServer) CanvasLightSetTransform(light RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[391], light, transform) }
func (gdClass RenderingServer) CanvasLightSetTexture(light RID, texture RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[392], light, texture) }
func (gdClass RenderingServer) CanvasLightSetTextureOffset(light RID, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[393], light, offset) }
func (gdClass RenderingServer) CanvasLightSetColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[394], light, color) }
func (gdClass RenderingServer) CanvasLightSetHeight(light RID, height float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[395], light, height) }
func (gdClass RenderingServer) CanvasLightSetEnergy(light RID, energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[396], light, energy) }
func (gdClass RenderingServer) CanvasLightSetZRange(light RID, min_z int64, max_z int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[397], light, min_z, max_z) }
func (gdClass RenderingServer) CanvasLightSetLayerRange(light RID, min_layer int64, max_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[398], light, min_layer, max_layer) }
func (gdClass RenderingServer) CanvasLightSetItemCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[399], light, mask) }
func (gdClass RenderingServer) CanvasLightSetItemShadowCullMask(light RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[400], light, mask) }
func (gdClass RenderingServer) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[401], light, mode) }
func (gdClass RenderingServer) CanvasLightSetShadowEnabled(light RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[402], light, enabled) }
func (gdClass RenderingServer) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[403], light, filter) }
func (gdClass RenderingServer) CanvasLightSetShadowColor(light RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[404], light, color) }
func (gdClass RenderingServer) CanvasLightSetShadowSmooth(light RID, smooth float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[405], light, smooth) }
func (gdClass RenderingServer) CanvasLightOccluderCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[406]) }
func (gdClass RenderingServer) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[407], occluder, canvas) }
func (gdClass RenderingServer) CanvasLightOccluderSetEnabled(occluder RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[408], occluder, enabled) }
func (gdClass RenderingServer) CanvasLightOccluderSetPolygon(occluder RID, polygon RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[409], occluder, polygon) }
func (gdClass RenderingServer) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[410], occluder, enable) }
func (gdClass RenderingServer) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[411], occluder, transform) }
func (gdClass RenderingServer) CanvasLightOccluderSetLightMask(occluder RID, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[412], occluder, mask) }
func (gdClass RenderingServer) CanvasOccluderPolygonCreate() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[413]) }
func (gdClass RenderingServer) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape []Vector2, closed bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[414], occluder_polygon, shape, closed) }
func (gdClass RenderingServer) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[415], occluder_polygon, mode) }
func (gdClass RenderingServer) CanvasSetShadowTextureSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[416], size) }
func (gdClass RenderingServer) GlobalShaderUniformAdd(name string, atype RenderingServerGlobalShaderUniformType, default_value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[417], name, atype, default_value) }
func (gdClass RenderingServer) GlobalShaderUniformRemove(name string)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[418], name) }
func (gdClass RenderingServer) GlobalShaderUniformGetList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodRenderingServer[419]) }
func (gdClass RenderingServer) GlobalShaderUniformSet(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[420], name, value) }
func (gdClass RenderingServer) GlobalShaderUniformSetOverride(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[421], name, value) }
func (gdClass RenderingServer) GlobalShaderUniformGet(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodRenderingServer[422], name) }
func (gdClass RenderingServer) GlobalShaderUniformGetType(name string) RenderingServerGlobalShaderUniformType { return gdnative.Return[RenderingServerGlobalShaderUniformType](gdnative.Object(gdClass), methodRenderingServer[423], name) }
func (gdClass RenderingServer) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[424], rid) }
func (gdClass RenderingServer) RequestFrameDrawnCallback(callable Callable)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[425], callable) }
func (gdClass RenderingServer) HasChanged() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[426]) }
func (gdClass RenderingServer) GetRenderingInfo(info RenderingServerRenderingInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRenderingServer[427], info) }
func (gdClass RenderingServer) GetVideoAdapterName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[428]) }
func (gdClass RenderingServer) GetVideoAdapterVendor() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[429]) }
func (gdClass RenderingServer) GetVideoAdapterType() RenderingDeviceDeviceType { return gdnative.Return[RenderingDeviceDeviceType](gdnative.Object(gdClass), methodRenderingServer[430]) }
func (gdClass RenderingServer) GetVideoAdapterApiVersion() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRenderingServer[431]) }
func (gdClass RenderingServer) MakeSphereMesh(latitudes int64, longitudes int64, radius float64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[432], latitudes, longitudes, radius) }
func (gdClass RenderingServer) GetTestCube() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[433]) }
func (gdClass RenderingServer) GetTestTexture() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[434]) }
func (gdClass RenderingServer) GetWhiteTexture() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodRenderingServer[435]) }
func (gdClass RenderingServer) SetBootImage(image Image, color Color, scale bool, use_filter bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[436], image, color, scale, use_filter) }
func (gdClass RenderingServer) SetDefaultClearColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[437], color) }
func (gdClass RenderingServer) HasFeature(feature RenderingServerFeatures) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[438], feature) }
func (gdClass RenderingServer) HasOsFeature(feature string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[439], feature) }
func (gdClass RenderingServer) SetDebugGenerateWireframes(generate bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[440], generate) }
func (gdClass RenderingServer) IsRenderLoopEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRenderingServer[441]) }
func (gdClass RenderingServer) SetRenderLoopEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[442], enabled) }
func (gdClass RenderingServer) GetFrameSetupTimeCpu() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRenderingServer[443]) }
func (gdClass RenderingServer) ForceSync()  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[444]) }
func (gdClass RenderingServer) ForceDraw(swap_buffers bool, frame_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodRenderingServer[445], swap_buffers, frame_step) }
func (gdClass RenderingServer) GetRenderingDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingServer[446]) }
func (gdClass RenderingServer) CreateLocalRenderingDevice() RenderingDevice { return gdnative.Return[RenderingDevice](gdnative.Object(gdClass), methodRenderingServer[447]) }

type Resource gdnative.Object
func (Resource) class() string { return "Resource\000" }

func (gdClass Resource) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodResource [12]gdnative.Method
func (gdClass Resource) SetPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[0], path) }
func (gdClass Resource) TakeOverPath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[1], path) }
func (gdClass Resource) GetPath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodResource[2]) }
func (gdClass Resource) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodResource[3], name) }
func (gdClass Resource) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodResource[4]) }
func (gdClass Resource) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodResource[5]) }
func (gdClass Resource) SetLocalToScene(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodResource[6], enable) }
func (gdClass Resource) IsLocalToScene() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResource[7]) }
func (gdClass Resource) GetLocalScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodResource[8]) }
func (gdClass Resource) SetupLocalToScene()  { gdnative.Call(gdnative.Object(gdClass), methodResource[9]) }
func (gdClass Resource) EmitChanged()  { gdnative.Call(gdnative.Object(gdClass), methodResource[10]) }
func (gdClass Resource) Duplicate(subresources bool) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResource[11], subresources) }

type ResourceFormatLoaderCacheMode int64

const (
	ResourceFormatLoaderCacheModeIgnore ResourceFormatLoaderCacheMode = 0
	ResourceFormatLoaderCacheModeReuse ResourceFormatLoaderCacheMode = 1
	ResourceFormatLoaderCacheModeReplace ResourceFormatLoaderCacheMode = 2
)

type ResourceFormatLoader gdnative.Object
func (ResourceFormatLoader) class() string { return "ResourceFormatLoader\000" }

func (gdClass ResourceFormatLoader) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass ResourceFormatLoader) virtual(val any, name string) any {	switch name {
	case "_get_recognized_extensions":
		i, ok := val.(interface{ GetRecognizedExtensions() []string })
		if ok {
			return i.GetRecognizedExtensions
		}
	case "_handles_type":
		i, ok := val.(interface{ HandlesType(atype string) bool })
		if ok {
			return i.HandlesType
		}
	case "_get_resource_type":
		i, ok := val.(interface{ GetResourceType(path string) string })
		if ok {
			return i.GetResourceType
		}
	case "_get_resource_uid":
		i, ok := val.(interface{ GetResourceUid(path string) int64 })
		if ok {
			return i.GetResourceUid
		}
	case "_get_dependencies":
		i, ok := val.(interface{ GetDependencies(path string, add_types bool) []string })
		if ok {
			return i.GetDependencies
		}
	case "_rename_dependencies":
		i, ok := val.(interface{ RenameDependencies(path string, renames Dictionary) int64 })
		if ok {
			return i.RenameDependencies
		}
	case "_exists":
		i, ok := val.(interface{ Exists(path string) bool })
		if ok {
			return i.Exists
		}
	case "_get_classes_used":
		i, ok := val.(interface{ GetClassesUsed(path string) []string })
		if ok {
			return i.GetClassesUsed
		}
	case "_load":
		i, ok := val.(interface{ Load(path string, original_path string, use_sub_threads bool, cache_mode int64) any })
		if ok {
			return i.Load
		}
	}
	return nil
}

type ResourceFormatSaver gdnative.Object
func (ResourceFormatSaver) class() string { return "ResourceFormatSaver\000" }

func (gdClass ResourceFormatSaver) RefCounted() RefCounted { return RefCounted(gdClass) }

func (gdClass ResourceFormatSaver) virtual(val any, name string) any {	switch name {
	case "_save":
		i, ok := val.(interface{ Save(path Resource, resource string, flags int64) int64 })
		if ok {
			return i.Save
		}
	case "_recognize":
		i, ok := val.(interface{ Recognize(resource Resource) bool })
		if ok {
			return i.Recognize
		}
	case "_get_recognized_extensions":
		i, ok := val.(interface{ GetRecognizedExtensions(resource Resource) []string })
		if ok {
			return i.GetRecognizedExtensions
		}
	}
	return nil
}

type ResourceImporterImportOrder int64

const (
	ResourceImporterImportOrderDefault ResourceImporterImportOrder = 0
	ResourceImporterImportOrderScene ResourceImporterImportOrder = 100
)

type ResourceImporter gdnative.Object
func (ResourceImporter) class() string { return "ResourceImporter\000" }

func (gdClass ResourceImporter) RefCounted() RefCounted { return RefCounted(gdClass) }


type ResourceLoaderThreadLoadStatus int64

const (
	ResourceLoaderThreadLoadInvalidResource ResourceLoaderThreadLoadStatus = 0
	ResourceLoaderThreadLoadInProgress ResourceLoaderThreadLoadStatus = 1
	ResourceLoaderThreadLoadFailed ResourceLoaderThreadLoadStatus = 2
	ResourceLoaderThreadLoadLoaded ResourceLoaderThreadLoadStatus = 3
)

type ResourceLoaderCacheMode int64

const (
	ResourceLoaderCacheModeIgnore ResourceLoaderCacheMode = 0
	ResourceLoaderCacheModeReuse ResourceLoaderCacheMode = 1
	ResourceLoaderCacheModeReplace ResourceLoaderCacheMode = 2
)

type ResourceLoader gdnative.Object
func (ResourceLoader) class() string { return "ResourceLoader\000" }

func (gdClass ResourceLoader) Object() Object { return Object(gdClass) }

var methodResourceLoader [12]gdnative.Method
func (gdClass ResourceLoader) LoadThreadedRequest(path string, type_hint string, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) error { return gdnative.Return[error](gdnative.Object(gdClass), methodResourceLoader[0], path, type_hint, use_sub_threads, cache_mode) }
func (gdClass ResourceLoader) LoadThreadedGetStatus(path string, progress Array) ResourceLoaderThreadLoadStatus { return gdnative.Return[ResourceLoaderThreadLoadStatus](gdnative.Object(gdClass), methodResourceLoader[1], path, progress) }
func (gdClass ResourceLoader) LoadThreadedGet(path string) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourceLoader[2], path) }
func (gdClass ResourceLoader) Load(path string, type_hint string, cache_mode ResourceLoaderCacheMode) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourceLoader[3], path, type_hint, cache_mode) }
func (gdClass ResourceLoader) GetRecognizedExtensionsForType(atype string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceLoader[4], atype) }
func (gdClass ResourceLoader) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[5], format_loader, at_front) }
func (gdClass ResourceLoader) RemoveResourceFormatLoader(format_loader ResourceFormatLoader)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[6], format_loader) }
func (gdClass ResourceLoader) SetAbortOnMissingResources(abort bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceLoader[7], abort) }
func (gdClass ResourceLoader) GetDependencies(path string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceLoader[8], path) }
func (gdClass ResourceLoader) HasCached(path string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceLoader[9], path) }
func (gdClass ResourceLoader) Exists(path string, type_hint string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceLoader[10], path, type_hint) }
func (gdClass ResourceLoader) GetResourceUid(path string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceLoader[11], path) }

type ResourcePreloader gdnative.Object
func (ResourcePreloader) class() string { return "ResourcePreloader\000" }

func (gdClass ResourcePreloader) Node() Node { return Node(gdClass) }

var methodResourcePreloader [6]gdnative.Method
func (gdClass ResourcePreloader) AddResource(name string, resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[0], name, resource) }
func (gdClass ResourcePreloader) RemoveResource(name string)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[1], name) }
func (gdClass ResourcePreloader) RenameResource(name string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodResourcePreloader[2], name, newname) }
func (gdClass ResourcePreloader) HasResource(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourcePreloader[3], name) }
func (gdClass ResourcePreloader) GetResource(name string) Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodResourcePreloader[4], name) }
func (gdClass ResourcePreloader) GetResourceList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourcePreloader[5]) }

type ResourceSaverSaverFlags int64

const (
	ResourceSaverFlagNone ResourceSaverSaverFlags = 0
	ResourceSaverFlagRelativePaths ResourceSaverSaverFlags = 1
	ResourceSaverFlagBundleResources ResourceSaverSaverFlags = 2
	ResourceSaverFlagChangePath ResourceSaverSaverFlags = 4
	ResourceSaverFlagOmitEditorProperties ResourceSaverSaverFlags = 8
	ResourceSaverFlagSaveBigEndian ResourceSaverSaverFlags = 16
	ResourceSaverFlagCompress ResourceSaverSaverFlags = 32
	ResourceSaverFlagReplaceSubresourcePaths ResourceSaverSaverFlags = 64
)

type ResourceSaver gdnative.Object
func (ResourceSaver) class() string { return "ResourceSaver\000" }

func (gdClass ResourceSaver) Object() Object { return Object(gdClass) }

var methodResourceSaver [4]gdnative.Method
func (gdClass ResourceSaver) Save(resource Resource, path string, flags ResourceSaverSaverFlags) error { return gdnative.Return[error](gdnative.Object(gdClass), methodResourceSaver[0], resource, path, flags) }
func (gdClass ResourceSaver) GetRecognizedExtensions(atype Resource) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodResourceSaver[1], atype) }
func (gdClass ResourceSaver) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodResourceSaver[2], format_saver, at_front) }
func (gdClass ResourceSaver) RemoveResourceFormatSaver(format_saver ResourceFormatSaver)  { gdnative.Call(gdnative.Object(gdClass), methodResourceSaver[3], format_saver) }

type ResourceUID gdnative.Object
func (ResourceUID) class() string { return "ResourceUID\000" }

func (gdClass ResourceUID) Object() Object { return Object(gdClass) }

var methodResourceUID [8]gdnative.Method
func (gdClass ResourceUID) IdToText(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodResourceUID[0], id) }
func (gdClass ResourceUID) TextToId(text_id string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceUID[1], text_id) }
func (gdClass ResourceUID) CreateId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodResourceUID[2]) }
func (gdClass ResourceUID) HasId(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodResourceUID[3], id) }
func (gdClass ResourceUID) AddId(id int64, path string)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[4], id, path) }
func (gdClass ResourceUID) SetId(id int64, path string)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[5], id, path) }
func (gdClass ResourceUID) GetIdPath(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodResourceUID[6], id) }
func (gdClass ResourceUID) RemoveId(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodResourceUID[7], id) }

type RibbonTrailMeshShape int64

const (
	RibbonTrailMeshShapeFlat RibbonTrailMeshShape = 0
	RibbonTrailMeshShapeCross RibbonTrailMeshShape = 1
)

type RibbonTrailMesh gdnative.Object
func (RibbonTrailMesh) class() string { return "RibbonTrailMesh\000" }

func (gdClass RibbonTrailMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodRibbonTrailMesh [12]gdnative.Method
func (gdClass RibbonTrailMesh) SetSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[0], size) }
func (gdClass RibbonTrailMesh) GetSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRibbonTrailMesh[1]) }
func (gdClass RibbonTrailMesh) SetSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[2], sections) }
func (gdClass RibbonTrailMesh) GetSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRibbonTrailMesh[3]) }
func (gdClass RibbonTrailMesh) SetSectionLength(section_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[4], section_length) }
func (gdClass RibbonTrailMesh) GetSectionLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRibbonTrailMesh[5]) }
func (gdClass RibbonTrailMesh) SetSectionSegments(section_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[6], section_segments) }
func (gdClass RibbonTrailMesh) GetSectionSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRibbonTrailMesh[7]) }
func (gdClass RibbonTrailMesh) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[8], curve) }
func (gdClass RibbonTrailMesh) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodRibbonTrailMesh[9]) }
func (gdClass RibbonTrailMesh) SetShape(shape RibbonTrailMeshShape)  { gdnative.Call(gdnative.Object(gdClass), methodRibbonTrailMesh[10], shape) }
func (gdClass RibbonTrailMesh) GetShape() RibbonTrailMeshShape { return gdnative.Return[RibbonTrailMeshShape](gdnative.Object(gdClass), methodRibbonTrailMesh[11]) }

type RichTextEffect gdnative.Object
func (RichTextEffect) class() string { return "RichTextEffect\000" }

func (gdClass RichTextEffect) Resource() Resource { return Resource(gdClass) }

func (gdClass RichTextEffect) virtual(val any, name string) any {	switch name {
	case "_process_custom_fx":
		i, ok := val.(interface{ ProcessCustomFx(char_fx CharFXTransform) bool })
		if ok {
			return i.ProcessCustomFx
		}
	}
	return nil
}

type RichTextLabelListType int64

const (
	RichTextLabelListNumbers RichTextLabelListType = 0
	RichTextLabelListLetters RichTextLabelListType = 1
	RichTextLabelListRoman RichTextLabelListType = 2
	RichTextLabelListDots RichTextLabelListType = 3
)

type RichTextLabelItemType int64

const (
	RichTextLabelItemFrame RichTextLabelItemType = 0
	RichTextLabelItemText RichTextLabelItemType = 1
	RichTextLabelItemImage RichTextLabelItemType = 2
	RichTextLabelItemNewline RichTextLabelItemType = 3
	RichTextLabelItemFont RichTextLabelItemType = 4
	RichTextLabelItemFontSize RichTextLabelItemType = 5
	RichTextLabelItemFontFeatures RichTextLabelItemType = 6
	RichTextLabelItemColor RichTextLabelItemType = 7
	RichTextLabelItemOutlineSize RichTextLabelItemType = 8
	RichTextLabelItemOutlineColor RichTextLabelItemType = 9
	RichTextLabelItemUnderline RichTextLabelItemType = 10
	RichTextLabelItemStrikethrough RichTextLabelItemType = 11
	RichTextLabelItemParagraph RichTextLabelItemType = 12
	RichTextLabelItemIndent RichTextLabelItemType = 13
	RichTextLabelItemList RichTextLabelItemType = 14
	RichTextLabelItemTable RichTextLabelItemType = 15
	RichTextLabelItemFade RichTextLabelItemType = 16
	RichTextLabelItemShake RichTextLabelItemType = 17
	RichTextLabelItemWave RichTextLabelItemType = 18
	RichTextLabelItemTornado RichTextLabelItemType = 19
	RichTextLabelItemRainbow RichTextLabelItemType = 20
	RichTextLabelItemBgcolor RichTextLabelItemType = 21
	RichTextLabelItemFgcolor RichTextLabelItemType = 22
	RichTextLabelItemMeta RichTextLabelItemType = 23
	RichTextLabelItemHint RichTextLabelItemType = 24
	RichTextLabelItemDropcap RichTextLabelItemType = 25
	RichTextLabelItemCustomfx RichTextLabelItemType = 26
)

type RichTextLabel gdnative.Object
func (RichTextLabel) class() string { return "RichTextLabel\000" }

func (gdClass RichTextLabel) Control() Control { return Control(gdClass) }

var methodRichTextLabel [108]gdnative.Method
func (gdClass RichTextLabel) GetParsedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[0]) }
func (gdClass RichTextLabel) AddText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[1], text) }
func (gdClass RichTextLabel) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[2], text) }
func (gdClass RichTextLabel) AddImage(image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[3], image, width, height, color, inline_align) }
func (gdClass RichTextLabel) Newline()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[4]) }
func (gdClass RichTextLabel) RemoveLine(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[5], line) }
func (gdClass RichTextLabel) PushFont(font Font, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[6], font, font_size) }
func (gdClass RichTextLabel) PushFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[7], font_size) }
func (gdClass RichTextLabel) PushNormal()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[8]) }
func (gdClass RichTextLabel) PushBold()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[9]) }
func (gdClass RichTextLabel) PushBoldItalics()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[10]) }
func (gdClass RichTextLabel) PushItalics()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[11]) }
func (gdClass RichTextLabel) PushMono()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[12]) }
func (gdClass RichTextLabel) PushColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[13], color) }
func (gdClass RichTextLabel) PushOutlineSize(outline_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[14], outline_size) }
func (gdClass RichTextLabel) PushOutlineColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[15], color) }
func (gdClass RichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language string, st_parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[16], alignment, base_direction, language, st_parser) }
func (gdClass RichTextLabel) PushIndent(level int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[17], level) }
func (gdClass RichTextLabel) PushList(level int64, atype RichTextLabelListType, capitalize bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[18], level, atype, capitalize) }
func (gdClass RichTextLabel) PushMeta(data any)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[19], data) }
func (gdClass RichTextLabel) PushHint(description string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[20], description) }
func (gdClass RichTextLabel) PushUnderline()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[21]) }
func (gdClass RichTextLabel) PushStrikethrough()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[22]) }
func (gdClass RichTextLabel) PushTable(columns int64, inline_align InlineAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[23], columns, inline_align) }
func (gdClass RichTextLabel) PushDropcap(s string, font Font, size int64, dropcap_margins Rect2, color Color, outline_size int64, outline_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[24], s, font, size, dropcap_margins, color, outline_size, outline_color) }
func (gdClass RichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[25], column, expand, ratio) }
func (gdClass RichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[26], odd_row_bg, even_row_bg) }
func (gdClass RichTextLabel) SetCellBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[27], color) }
func (gdClass RichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[28], min_size, max_size) }
func (gdClass RichTextLabel) SetCellPadding(padding Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[29], padding) }
func (gdClass RichTextLabel) PushCell()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[30]) }
func (gdClass RichTextLabel) PushFgcolor(fgcolor Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[31], fgcolor) }
func (gdClass RichTextLabel) PushBgcolor(bgcolor Color)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[32], bgcolor) }
func (gdClass RichTextLabel) Pop()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[33]) }
func (gdClass RichTextLabel) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[34]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[35], parser) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodRichTextLabel[36]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[37], args) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRichTextLabel[38]) }
func (gdClass RichTextLabel) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[39], direction) }
func (gdClass RichTextLabel) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodRichTextLabel[40]) }
func (gdClass RichTextLabel) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[41], language) }
func (gdClass RichTextLabel) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[42]) }
func (gdClass RichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[43], autowrap_mode) }
func (gdClass RichTextLabel) GetAutowrapMode() TextServerAutowrapMode { return gdnative.Return[TextServerAutowrapMode](gdnative.Object(gdClass), methodRichTextLabel[44]) }
func (gdClass RichTextLabel) SetMetaUnderline(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[45], enable) }
func (gdClass RichTextLabel) IsMetaUnderlined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[46]) }
func (gdClass RichTextLabel) SetHintUnderline(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[47], enable) }
func (gdClass RichTextLabel) IsHintUnderlined() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[48]) }
func (gdClass RichTextLabel) SetOverrideSelectedFontColor(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[49], override) }
func (gdClass RichTextLabel) IsOverridingSelectedFontColor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[50]) }
func (gdClass RichTextLabel) SetScrollActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[51], active) }
func (gdClass RichTextLabel) IsScrollActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[52]) }
func (gdClass RichTextLabel) SetScrollFollow(follow bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[53], follow) }
func (gdClass RichTextLabel) IsScrollFollowing() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[54]) }
func (gdClass RichTextLabel) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodRichTextLabel[55]) }
func (gdClass RichTextLabel) ScrollToLine(line int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[56], line) }
func (gdClass RichTextLabel) ScrollToParagraph(paragraph int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[57], paragraph) }
func (gdClass RichTextLabel) SetTabSize(spaces int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[58], spaces) }
func (gdClass RichTextLabel) GetTabSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[59]) }
func (gdClass RichTextLabel) SetFitContentHeight(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[60], enabled) }
func (gdClass RichTextLabel) IsFitContentHeightEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[61]) }
func (gdClass RichTextLabel) SetSelectionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[62], enabled) }
func (gdClass RichTextLabel) IsSelectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[63]) }
func (gdClass RichTextLabel) SetContextMenuEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[64], enabled) }
func (gdClass RichTextLabel) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[65]) }
func (gdClass RichTextLabel) SetShortcutKeysEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[66], enabled) }
func (gdClass RichTextLabel) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[67]) }
func (gdClass RichTextLabel) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[68], enable) }
func (gdClass RichTextLabel) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[69]) }
func (gdClass RichTextLabel) GetSelectionFrom() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[70]) }
func (gdClass RichTextLabel) GetSelectionTo() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[71]) }
func (gdClass RichTextLabel) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[72]) }
func (gdClass RichTextLabel) GetSelectedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[73]) }
func (gdClass RichTextLabel) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[74]) }
func (gdClass RichTextLabel) ParseBbcode(bbcode string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[75], bbcode) }
func (gdClass RichTextLabel) AppendText(bbcode string)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[76], bbcode) }
func (gdClass RichTextLabel) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodRichTextLabel[77]) }
func (gdClass RichTextLabel) IsReady() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[78]) }
func (gdClass RichTextLabel) SetThreaded(threaded bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[79], threaded) }
func (gdClass RichTextLabel) IsThreaded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[80]) }
func (gdClass RichTextLabel) SetProgressBarDelay(delay_ms int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[81], delay_ms) }
func (gdClass RichTextLabel) GetProgressBarDelay() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[82]) }
func (gdClass RichTextLabel) SetVisibleCharacters(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[83], amount) }
func (gdClass RichTextLabel) GetVisibleCharacters() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[84]) }
func (gdClass RichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return gdnative.Return[TextServerVisibleCharactersBehavior](gdnative.Object(gdClass), methodRichTextLabel[85]) }
func (gdClass RichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[86], behavior) }
func (gdClass RichTextLabel) SetPercentVisible(percent_visible float64)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[87], percent_visible) }
func (gdClass RichTextLabel) GetPercentVisible() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[88]) }
func (gdClass RichTextLabel) GetCharacterLine(character int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[89], character) }
func (gdClass RichTextLabel) GetCharacterParagraph(character int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[90], character) }
func (gdClass RichTextLabel) GetTotalCharacterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[91]) }
func (gdClass RichTextLabel) SetUseBbcode(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[92], enable) }
func (gdClass RichTextLabel) IsUsingBbcode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[93]) }
func (gdClass RichTextLabel) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[94]) }
func (gdClass RichTextLabel) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[95]) }
func (gdClass RichTextLabel) GetParagraphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[96]) }
func (gdClass RichTextLabel) GetVisibleParagraphCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[97]) }
func (gdClass RichTextLabel) GetContentHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[98]) }
func (gdClass RichTextLabel) GetContentWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRichTextLabel[99]) }
func (gdClass RichTextLabel) GetLineOffset(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[100], line) }
func (gdClass RichTextLabel) GetParagraphOffset(paragraph int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRichTextLabel[101], paragraph) }
func (gdClass RichTextLabel) ParseExpressionsForValues(expressions []string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodRichTextLabel[102], expressions) }
func (gdClass RichTextLabel) SetEffects(effects Array)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[103], effects) }
func (gdClass RichTextLabel) GetEffects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRichTextLabel[104]) }
func (gdClass RichTextLabel) InstallEffect(effect any)  { gdnative.Call(gdnative.Object(gdClass), methodRichTextLabel[105], effect) }
func (gdClass RichTextLabel) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodRichTextLabel[106]) }
func (gdClass RichTextLabel) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRichTextLabel[107]) }

type RigidDynamicBody2DFreezeMode int64

const (
	RigidDynamicBody2DFreezeModeStatic RigidDynamicBody2DFreezeMode = 0
	RigidDynamicBody2DFreezeModeKinematic RigidDynamicBody2DFreezeMode = 1
)

type RigidDynamicBody2DCenterOfMassMode int64

const (
	RigidDynamicBody2DCenterOfMassModeAuto RigidDynamicBody2DCenterOfMassMode = 0
	RigidDynamicBody2DCenterOfMassModeCustom RigidDynamicBody2DCenterOfMassMode = 1
)

type RigidDynamicBody2DDampMode int64

const (
	RigidDynamicBody2DDampModeCombine RigidDynamicBody2DDampMode = 0
	RigidDynamicBody2DDampModeReplace RigidDynamicBody2DDampMode = 1
)

type RigidDynamicBody2DCCDMode int64

const (
	RigidDynamicBody2DCcdModeDisabled RigidDynamicBody2DCCDMode = 0
	RigidDynamicBody2DCcdModeCastRay RigidDynamicBody2DCCDMode = 1
	RigidDynamicBody2DCcdModeCastShape RigidDynamicBody2DCCDMode = 2
)

type RigidDynamicBody2D gdnative.Object
func (RigidDynamicBody2D) class() string { return "RigidDynamicBody2D\000" }

func (gdClass RigidDynamicBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D(gdClass) }

var methodRigidDynamicBody2D [57]gdnative.Method
func (gdClass RigidDynamicBody2D) virtual(val any, name string) any {	switch name {
	case "_integrate_forces":
		i, ok := val.(interface{ IntegrateForces(state PhysicsDirectBodyState2D)  })
		if ok {
			return i.IntegrateForces
		}
	}
	return nil
}
func (gdClass RigidDynamicBody2D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[0], mass) }
func (gdClass RigidDynamicBody2D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[1]) }
func (gdClass RigidDynamicBody2D) GetInertia() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[2]) }
func (gdClass RigidDynamicBody2D) SetInertia(inertia float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[3], inertia) }
func (gdClass RigidDynamicBody2D) SetCenterOfMassMode(mode RigidDynamicBody2DCenterOfMassMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[4], mode) }
func (gdClass RigidDynamicBody2D) GetCenterOfMassMode() RigidDynamicBody2DCenterOfMassMode { return gdnative.Return[RigidDynamicBody2DCenterOfMassMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[5]) }
func (gdClass RigidDynamicBody2D) SetCenterOfMass(center_of_mass Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[6], center_of_mass) }
func (gdClass RigidDynamicBody2D) GetCenterOfMass() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[7]) }
func (gdClass RigidDynamicBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[8], physics_material_override) }
func (gdClass RigidDynamicBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodRigidDynamicBody2D[9]) }
func (gdClass RigidDynamicBody2D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[10], gravity_scale) }
func (gdClass RigidDynamicBody2D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[11]) }
func (gdClass RigidDynamicBody2D) SetLinearDampMode(linear_damp_mode RigidDynamicBody2DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[12], linear_damp_mode) }
func (gdClass RigidDynamicBody2D) GetLinearDampMode() RigidDynamicBody2DDampMode { return gdnative.Return[RigidDynamicBody2DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[13]) }
func (gdClass RigidDynamicBody2D) SetAngularDampMode(angular_damp_mode RigidDynamicBody2DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[14], angular_damp_mode) }
func (gdClass RigidDynamicBody2D) GetAngularDampMode() RigidDynamicBody2DDampMode { return gdnative.Return[RigidDynamicBody2DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[15]) }
func (gdClass RigidDynamicBody2D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[16], linear_damp) }
func (gdClass RigidDynamicBody2D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[17]) }
func (gdClass RigidDynamicBody2D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[18], angular_damp) }
func (gdClass RigidDynamicBody2D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[19]) }
func (gdClass RigidDynamicBody2D) SetLinearVelocity(linear_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[20], linear_velocity) }
func (gdClass RigidDynamicBody2D) GetLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[21]) }
func (gdClass RigidDynamicBody2D) SetAngularVelocity(angular_velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[22], angular_velocity) }
func (gdClass RigidDynamicBody2D) GetAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[23]) }
func (gdClass RigidDynamicBody2D) SetMaxContactsReported(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[24], amount) }
func (gdClass RigidDynamicBody2D) GetMaxContactsReported() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRigidDynamicBody2D[25]) }
func (gdClass RigidDynamicBody2D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[26], enable) }
func (gdClass RigidDynamicBody2D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[27]) }
func (gdClass RigidDynamicBody2D) SetContactMonitor(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[28], enabled) }
func (gdClass RigidDynamicBody2D) IsContactMonitorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[29]) }
func (gdClass RigidDynamicBody2D) SetContinuousCollisionDetectionMode(mode RigidDynamicBody2DCCDMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[30], mode) }
func (gdClass RigidDynamicBody2D) GetContinuousCollisionDetectionMode() RigidDynamicBody2DCCDMode { return gdnative.Return[RigidDynamicBody2DCCDMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[31]) }
func (gdClass RigidDynamicBody2D) SetAxisVelocity(axis_velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[32], axis_velocity) }
func (gdClass RigidDynamicBody2D) ApplyCentralImpulse(impulse Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[33], impulse) }
func (gdClass RigidDynamicBody2D) ApplyImpulse(impulse Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[34], impulse, position) }
func (gdClass RigidDynamicBody2D) ApplyTorqueImpulse(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[35], torque) }
func (gdClass RigidDynamicBody2D) ApplyCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[36], force) }
func (gdClass RigidDynamicBody2D) ApplyForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[37], force, position) }
func (gdClass RigidDynamicBody2D) ApplyTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[38], torque) }
func (gdClass RigidDynamicBody2D) AddConstantCentralForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[39], force) }
func (gdClass RigidDynamicBody2D) AddConstantForce(force Vector2, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[40], force, position) }
func (gdClass RigidDynamicBody2D) AddConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[41], torque) }
func (gdClass RigidDynamicBody2D) SetConstantForce(force Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[42], force) }
func (gdClass RigidDynamicBody2D) GetConstantForce() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodRigidDynamicBody2D[43]) }
func (gdClass RigidDynamicBody2D) SetConstantTorque(torque float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[44], torque) }
func (gdClass RigidDynamicBody2D) GetConstantTorque() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody2D[45]) }
func (gdClass RigidDynamicBody2D) SetSleeping(sleeping bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[46], sleeping) }
func (gdClass RigidDynamicBody2D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[47]) }
func (gdClass RigidDynamicBody2D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[48], able_to_sleep) }
func (gdClass RigidDynamicBody2D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[49]) }
func (gdClass RigidDynamicBody2D) SetLockRotationEnabled(lock_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[50], lock_rotation) }
func (gdClass RigidDynamicBody2D) IsLockRotationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[51]) }
func (gdClass RigidDynamicBody2D) SetFreezeEnabled(freeze_mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[52], freeze_mode) }
func (gdClass RigidDynamicBody2D) IsFreezeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody2D[53]) }
func (gdClass RigidDynamicBody2D) SetFreezeMode(freeze_mode RigidDynamicBody2DFreezeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody2D[54], freeze_mode) }
func (gdClass RigidDynamicBody2D) GetFreezeMode() RigidDynamicBody2DFreezeMode { return gdnative.Return[RigidDynamicBody2DFreezeMode](gdnative.Object(gdClass), methodRigidDynamicBody2D[55]) }
func (gdClass RigidDynamicBody2D) GetCollidingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRigidDynamicBody2D[56]) }

type RigidDynamicBody3DFreezeMode int64

const (
	RigidDynamicBody3DFreezeModeStatic RigidDynamicBody3DFreezeMode = 0
	RigidDynamicBody3DFreezeModeKinematic RigidDynamicBody3DFreezeMode = 1
)

type RigidDynamicBody3DCenterOfMassMode int64

const (
	RigidDynamicBody3DCenterOfMassModeAuto RigidDynamicBody3DCenterOfMassMode = 0
	RigidDynamicBody3DCenterOfMassModeCustom RigidDynamicBody3DCenterOfMassMode = 1
)

type RigidDynamicBody3DDampMode int64

const (
	RigidDynamicBody3DDampModeCombine RigidDynamicBody3DDampMode = 0
	RigidDynamicBody3DDampModeReplace RigidDynamicBody3DDampMode = 1
)

type RigidDynamicBody3D gdnative.Object
func (RigidDynamicBody3D) class() string { return "RigidDynamicBody3D\000" }

func (gdClass RigidDynamicBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D(gdClass) }

var methodRigidDynamicBody3D [58]gdnative.Method
func (gdClass RigidDynamicBody3D) virtual(val any, name string) any {	switch name {
	case "_integrate_forces":
		i, ok := val.(interface{ IntegrateForces(state PhysicsDirectBodyState3D)  })
		if ok {
			return i.IntegrateForces
		}
	}
	return nil
}
func (gdClass RigidDynamicBody3D) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[0], mass) }
func (gdClass RigidDynamicBody3D) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[1]) }
func (gdClass RigidDynamicBody3D) SetInertia(inertia Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[2], inertia) }
func (gdClass RigidDynamicBody3D) GetInertia() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[3]) }
func (gdClass RigidDynamicBody3D) SetCenterOfMassMode(mode RigidDynamicBody3DCenterOfMassMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[4], mode) }
func (gdClass RigidDynamicBody3D) GetCenterOfMassMode() RigidDynamicBody3DCenterOfMassMode { return gdnative.Return[RigidDynamicBody3DCenterOfMassMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[5]) }
func (gdClass RigidDynamicBody3D) SetCenterOfMass(center_of_mass Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[6], center_of_mass) }
func (gdClass RigidDynamicBody3D) GetCenterOfMass() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[7]) }
func (gdClass RigidDynamicBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[8], physics_material_override) }
func (gdClass RigidDynamicBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodRigidDynamicBody3D[9]) }
func (gdClass RigidDynamicBody3D) SetLinearVelocity(linear_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[10], linear_velocity) }
func (gdClass RigidDynamicBody3D) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[11]) }
func (gdClass RigidDynamicBody3D) SetAngularVelocity(angular_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[12], angular_velocity) }
func (gdClass RigidDynamicBody3D) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[13]) }
func (gdClass RigidDynamicBody3D) GetInverseInertiaTensor() Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodRigidDynamicBody3D[14]) }
func (gdClass RigidDynamicBody3D) SetGravityScale(gravity_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[15], gravity_scale) }
func (gdClass RigidDynamicBody3D) GetGravityScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[16]) }
func (gdClass RigidDynamicBody3D) SetLinearDampMode(linear_damp_mode RigidDynamicBody3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[17], linear_damp_mode) }
func (gdClass RigidDynamicBody3D) GetLinearDampMode() RigidDynamicBody3DDampMode { return gdnative.Return[RigidDynamicBody3DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[18]) }
func (gdClass RigidDynamicBody3D) SetAngularDampMode(angular_damp_mode RigidDynamicBody3DDampMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[19], angular_damp_mode) }
func (gdClass RigidDynamicBody3D) GetAngularDampMode() RigidDynamicBody3DDampMode { return gdnative.Return[RigidDynamicBody3DDampMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[20]) }
func (gdClass RigidDynamicBody3D) SetLinearDamp(linear_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[21], linear_damp) }
func (gdClass RigidDynamicBody3D) GetLinearDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[22]) }
func (gdClass RigidDynamicBody3D) SetAngularDamp(angular_damp float64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[23], angular_damp) }
func (gdClass RigidDynamicBody3D) GetAngularDamp() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRigidDynamicBody3D[24]) }
func (gdClass RigidDynamicBody3D) SetMaxContactsReported(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[25], amount) }
func (gdClass RigidDynamicBody3D) GetMaxContactsReported() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodRigidDynamicBody3D[26]) }
func (gdClass RigidDynamicBody3D) SetUseCustomIntegrator(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[27], enable) }
func (gdClass RigidDynamicBody3D) IsUsingCustomIntegrator() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[28]) }
func (gdClass RigidDynamicBody3D) SetContactMonitor(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[29], enabled) }
func (gdClass RigidDynamicBody3D) IsContactMonitorEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[30]) }
func (gdClass RigidDynamicBody3D) SetUseContinuousCollisionDetection(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[31], enable) }
func (gdClass RigidDynamicBody3D) IsUsingContinuousCollisionDetection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[32]) }
func (gdClass RigidDynamicBody3D) SetAxisVelocity(axis_velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[33], axis_velocity) }
func (gdClass RigidDynamicBody3D) ApplyCentralImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[34], impulse) }
func (gdClass RigidDynamicBody3D) ApplyImpulse(impulse Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[35], impulse, position) }
func (gdClass RigidDynamicBody3D) ApplyTorqueImpulse(impulse Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[36], impulse) }
func (gdClass RigidDynamicBody3D) ApplyCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[37], force) }
func (gdClass RigidDynamicBody3D) ApplyForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[38], force, position) }
func (gdClass RigidDynamicBody3D) ApplyTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[39], torque) }
func (gdClass RigidDynamicBody3D) AddConstantCentralForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[40], force) }
func (gdClass RigidDynamicBody3D) AddConstantForce(force Vector3, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[41], force, position) }
func (gdClass RigidDynamicBody3D) AddConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[42], torque) }
func (gdClass RigidDynamicBody3D) SetConstantForce(force Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[43], force) }
func (gdClass RigidDynamicBody3D) GetConstantForce() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[44]) }
func (gdClass RigidDynamicBody3D) SetConstantTorque(torque Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[45], torque) }
func (gdClass RigidDynamicBody3D) GetConstantTorque() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodRigidDynamicBody3D[46]) }
func (gdClass RigidDynamicBody3D) SetSleeping(sleeping bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[47], sleeping) }
func (gdClass RigidDynamicBody3D) IsSleeping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[48]) }
func (gdClass RigidDynamicBody3D) SetCanSleep(able_to_sleep bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[49], able_to_sleep) }
func (gdClass RigidDynamicBody3D) IsAbleToSleep() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[50]) }
func (gdClass RigidDynamicBody3D) SetLockRotationEnabled(lock_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[51], lock_rotation) }
func (gdClass RigidDynamicBody3D) IsLockRotationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[52]) }
func (gdClass RigidDynamicBody3D) SetFreezeEnabled(freeze_mode bool)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[53], freeze_mode) }
func (gdClass RigidDynamicBody3D) IsFreezeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRigidDynamicBody3D[54]) }
func (gdClass RigidDynamicBody3D) SetFreezeMode(freeze_mode RigidDynamicBody3DFreezeMode)  { gdnative.Call(gdnative.Object(gdClass), methodRigidDynamicBody3D[55], freeze_mode) }
func (gdClass RigidDynamicBody3D) GetFreezeMode() RigidDynamicBody3DFreezeMode { return gdnative.Return[RigidDynamicBody3DFreezeMode](gdnative.Object(gdClass), methodRigidDynamicBody3D[56]) }
func (gdClass RigidDynamicBody3D) GetCollidingBodies() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodRigidDynamicBody3D[57]) }

type RootMotionView gdnative.Object
func (RootMotionView) class() string { return "RootMotionView\000" }

func (gdClass RootMotionView) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodRootMotionView [10]gdnative.Method
func (gdClass RootMotionView) SetAnimationPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[0], path) }
func (gdClass RootMotionView) GetAnimationPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodRootMotionView[1]) }
func (gdClass RootMotionView) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[2], color) }
func (gdClass RootMotionView) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodRootMotionView[3]) }
func (gdClass RootMotionView) SetCellSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[4], size) }
func (gdClass RootMotionView) GetCellSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRootMotionView[5]) }
func (gdClass RootMotionView) SetRadius(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[6], size) }
func (gdClass RootMotionView) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodRootMotionView[7]) }
func (gdClass RootMotionView) SetZeroY(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodRootMotionView[8], enable) }
func (gdClass RootMotionView) GetZeroY() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodRootMotionView[9]) }

type SceneMultiplayer gdnative.Object
func (SceneMultiplayer) class() string { return "SceneMultiplayer\000" }

func (gdClass SceneMultiplayer) MultiplayerAPI() MultiplayerAPI { return MultiplayerAPI(gdClass) }

var methodSceneMultiplayer [8]gdnative.Method
func (gdClass SceneMultiplayer) SetRootPath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[0], path) }
func (gdClass SceneMultiplayer) GetRootPath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneMultiplayer[1]) }
func (gdClass SceneMultiplayer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[2]) }
func (gdClass SceneMultiplayer) SetRefuseNewConnections(refuse bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[3], refuse) }
func (gdClass SceneMultiplayer) IsRefusingNewConnections() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneMultiplayer[4]) }
func (gdClass SceneMultiplayer) SetAllowObjectDecoding(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneMultiplayer[5], enable) }
func (gdClass SceneMultiplayer) IsObjectDecodingAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneMultiplayer[6]) }
func (gdClass SceneMultiplayer) SendBytes(bytes []byte, id int64, mode MultiplayerPeerTransferMode, channel int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneMultiplayer[7], bytes, id, mode, channel) }

type SceneReplicationConfig gdnative.Object
func (SceneReplicationConfig) class() string { return "SceneReplicationConfig\000" }

func (gdClass SceneReplicationConfig) Resource() Resource { return Resource(gdClass) }

var methodSceneReplicationConfig [9]gdnative.Method
func (gdClass SceneReplicationConfig) GetProperties() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneReplicationConfig[0]) }
func (gdClass SceneReplicationConfig) AddProperty(path NodePath, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[1], path, index) }
func (gdClass SceneReplicationConfig) HasProperty(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[2], path) }
func (gdClass SceneReplicationConfig) RemoveProperty(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[3], path) }
func (gdClass SceneReplicationConfig) PropertyGetIndex(path NodePath) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneReplicationConfig[4], path) }
func (gdClass SceneReplicationConfig) PropertyGetSpawn(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[5], path) }
func (gdClass SceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[6], path, enabled) }
func (gdClass SceneReplicationConfig) PropertyGetSync(path NodePath) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneReplicationConfig[7], path) }
func (gdClass SceneReplicationConfig) PropertySetSync(path NodePath, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneReplicationConfig[8], path, enabled) }

type SceneStateGenEditState int64

const (
	SceneStateGenEditStateDisabled SceneStateGenEditState = 0
	SceneStateGenEditStateInstance SceneStateGenEditState = 1
	SceneStateGenEditStateMain SceneStateGenEditState = 2
	SceneStateGenEditStateMainInherited SceneStateGenEditState = 3
)

type SceneState gdnative.Object
func (SceneState) class() string { return "SceneState\000" }

func (gdClass SceneState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodSceneState [21]gdnative.Method
func (gdClass SceneState) GetNodeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[0]) }
func (gdClass SceneState) GetNodeType(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[1], idx) }
func (gdClass SceneState) GetNodeName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[2], idx) }
func (gdClass SceneState) GetNodePath(idx int64, for_parent bool) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[3], idx, for_parent) }
func (gdClass SceneState) GetNodeOwnerPath(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[4], idx) }
func (gdClass SceneState) IsNodeInstancePlaceholder(idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneState[5], idx) }
func (gdClass SceneState) GetNodeInstancePlaceholder(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[6], idx) }
func (gdClass SceneState) GetNodeInstance(idx int64) PackedScene { return gdnative.Return[PackedScene](gdnative.Object(gdClass), methodSceneState[7], idx) }
func (gdClass SceneState) GetNodeGroups(idx int64) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSceneState[8], idx) }
func (gdClass SceneState) GetNodeIndex(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[9], idx) }
func (gdClass SceneState) GetNodePropertyCount(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[10], idx) }
func (gdClass SceneState) GetNodePropertyName(idx int64, prop_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[11], idx, prop_idx) }
func (gdClass SceneState) GetNodePropertyValue(idx int64, prop_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodSceneState[12], idx, prop_idx) }
func (gdClass SceneState) GetConnectionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[13]) }
func (gdClass SceneState) GetConnectionSource(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[14], idx) }
func (gdClass SceneState) GetConnectionSignal(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[15], idx) }
func (gdClass SceneState) GetConnectionTarget(idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSceneState[16], idx) }
func (gdClass SceneState) GetConnectionMethod(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSceneState[17], idx) }
func (gdClass SceneState) GetConnectionFlags(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[18], idx) }
func (gdClass SceneState) GetConnectionBinds(idx int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneState[19], idx) }
func (gdClass SceneState) GetConnectionUnbinds(idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneState[20], idx) }

type SceneTreeGroupCallFlags int64

const (
	SceneTreeGroupCallDefault SceneTreeGroupCallFlags = 0
	SceneTreeGroupCallReverse SceneTreeGroupCallFlags = 1
	SceneTreeGroupCallDeferred SceneTreeGroupCallFlags = 2
	SceneTreeGroupCallUnique SceneTreeGroupCallFlags = 4
)

type SceneTree gdnative.Object
func (SceneTree) class() string { return "SceneTree\000" }

func (gdClass SceneTree) MainLoop() MainLoop { return MainLoop(gdClass) }

var methodSceneTree [40]gdnative.Method
func (gdClass SceneTree) GetRoot() Window { return gdnative.Return[Window](gdnative.Object(gdClass), methodSceneTree[0]) }
func (gdClass SceneTree) HasGroup(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[1], name) }
func (gdClass SceneTree) IsAutoAcceptQuit() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[2]) }
func (gdClass SceneTree) SetAutoAcceptQuit(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[3], enabled) }
func (gdClass SceneTree) IsQuitOnGoBack() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[4]) }
func (gdClass SceneTree) SetQuitOnGoBack(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[5], enabled) }
func (gdClass SceneTree) SetDebugCollisionsHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[6], enable) }
func (gdClass SceneTree) IsDebuggingCollisionsHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[7]) }
func (gdClass SceneTree) SetDebugPathsHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[8], enable) }
func (gdClass SceneTree) IsDebuggingPathsHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[9]) }
func (gdClass SceneTree) SetDebugNavigationHint(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[10], enable) }
func (gdClass SceneTree) IsDebuggingNavigationHint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[11]) }
func (gdClass SceneTree) SetEditedSceneRoot(scene Node)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[12], scene) }
func (gdClass SceneTree) GetEditedSceneRoot() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[13]) }
func (gdClass SceneTree) SetPause(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[14], enable) }
func (gdClass SceneTree) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[15]) }
func (gdClass SceneTree) CreateTimer(time_sec float64, process_always bool) SceneTreeTimer { return gdnative.Return[SceneTreeTimer](gdnative.Object(gdClass), methodSceneTree[16], time_sec, process_always) }
func (gdClass SceneTree) CreateTween() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodSceneTree[17]) }
func (gdClass SceneTree) GetProcessedTweens() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneTree[18]) }
func (gdClass SceneTree) GetNodeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneTree[19]) }
func (gdClass SceneTree) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSceneTree[20]) }
func (gdClass SceneTree) Quit(exit_code int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[21], exit_code) }
func (gdClass SceneTree) QueueDelete(obj Object)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[22], obj) }
func (gdClass SceneTree) CallGroupFlags(flags int64, group string, method string)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[23], flags, group, method) }
func (gdClass SceneTree) NotifyGroupFlags(call_flags int64, group string, notification int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[24], call_flags, group, notification) }
func (gdClass SceneTree) SetGroupFlags(call_flags int64, group string, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[25], call_flags, group, property, value) }
func (gdClass SceneTree) CallGroup(group string, method string)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[26], group, method) }
func (gdClass SceneTree) NotifyGroup(group string, notification int64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[27], group, notification) }
func (gdClass SceneTree) SetGroup(group string, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[28], group, property, value) }
func (gdClass SceneTree) GetNodesInGroup(group string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSceneTree[29], group) }
func (gdClass SceneTree) GetFirstNodeInGroup(group string) Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[30], group) }
func (gdClass SceneTree) SetCurrentScene(child_node Node)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[31], child_node) }
func (gdClass SceneTree) GetCurrentScene() Node { return gdnative.Return[Node](gdnative.Object(gdClass), methodSceneTree[32]) }
func (gdClass SceneTree) ChangeScene(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[33], path) }
func (gdClass SceneTree) ChangeSceneTo(packed_scene PackedScene) error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[34], packed_scene) }
func (gdClass SceneTree) ReloadCurrentScene() error { return gdnative.Return[error](gdnative.Object(gdClass), methodSceneTree[35]) }
func (gdClass SceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[36], multiplayer, root_path) }
func (gdClass SceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI { return gdnative.Return[MultiplayerAPI](gdnative.Object(gdClass), methodSceneTree[37], for_path) }
func (gdClass SceneTree) SetMultiplayerPollEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTree[38], enabled) }
func (gdClass SceneTree) IsMultiplayerPollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSceneTree[39]) }

type SceneTreeTimer gdnative.Object
func (SceneTreeTimer) class() string { return "SceneTreeTimer\000" }

func (gdClass SceneTreeTimer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodSceneTreeTimer [2]gdnative.Method
func (gdClass SceneTreeTimer) SetTimeLeft(time float64)  { gdnative.Call(gdnative.Object(gdClass), methodSceneTreeTimer[0], time) }
func (gdClass SceneTreeTimer) GetTimeLeft() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSceneTreeTimer[1]) }

type Script gdnative.Object
func (Script) class() string { return "Script\000" }

func (gdClass Script) Resource() Resource { return Resource(gdClass) }

var methodScript [15]gdnative.Method
func (gdClass Script) CanInstantiate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[0]) }
func (gdClass Script) InstanceHas(base_object Object) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[1], base_object) }
func (gdClass Script) HasSourceCode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[2]) }
func (gdClass Script) GetSourceCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScript[3]) }
func (gdClass Script) SetSourceCode(source string)  { gdnative.Call(gdnative.Object(gdClass), methodScript[4], source) }
func (gdClass Script) Reload(keep_state bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodScript[5], keep_state) }
func (gdClass Script) GetBaseScript() Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScript[6]) }
func (gdClass Script) GetInstanceBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodScript[7]) }
func (gdClass Script) HasScriptSignal(signal_name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[8], signal_name) }
func (gdClass Script) GetScriptPropertyList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[9]) }
func (gdClass Script) GetScriptMethodList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[10]) }
func (gdClass Script) GetScriptSignalList() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScript[11]) }
func (gdClass Script) GetScriptConstantMap() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodScript[12]) }
func (gdClass Script) GetPropertyDefaultValue(property string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodScript[13], property) }
func (gdClass Script) IsTool() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScript[14]) }

type ScriptCreateDialog gdnative.Object
func (ScriptCreateDialog) class() string { return "ScriptCreateDialog\000" }

func (gdClass ScriptCreateDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog(gdClass) }

var methodScriptCreateDialog [1]gdnative.Method
func (gdClass ScriptCreateDialog) Config(inherits string, path string, built_in_enabled bool, load_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodScriptCreateDialog[0], inherits, path, built_in_enabled, load_enabled) }

type ScriptEditor gdnative.Object
func (ScriptEditor) class() string { return "ScriptEditor\000" }

func (gdClass ScriptEditor) PanelContainer() PanelContainer { return PanelContainer(gdClass) }

var methodScriptEditor [8]gdnative.Method
func (gdClass ScriptEditor) GetCurrentEditor() ScriptEditorBase { return gdnative.Return[ScriptEditorBase](gdnative.Object(gdClass), methodScriptEditor[0]) }
func (gdClass ScriptEditor) GetOpenScriptEditors() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptEditor[1]) }
func (gdClass ScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[2], syntax_highlighter) }
func (gdClass ScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[3], syntax_highlighter) }
func (gdClass ScriptEditor) GotoLine(line_number int64)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[4], line_number) }
func (gdClass ScriptEditor) GetCurrentScript() Script { return gdnative.Return[Script](gdnative.Object(gdClass), methodScriptEditor[5]) }
func (gdClass ScriptEditor) GetOpenScripts() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodScriptEditor[6]) }
func (gdClass ScriptEditor) OpenScriptCreateDialog(base_name string, base_path string)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditor[7], base_name, base_path) }

type ScriptEditorBase gdnative.Object
func (ScriptEditorBase) class() string { return "ScriptEditorBase\000" }

func (gdClass ScriptEditorBase) VBoxContainer() VBoxContainer { return VBoxContainer(gdClass) }

var methodScriptEditorBase [2]gdnative.Method
func (gdClass ScriptEditorBase) GetBaseEditor() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodScriptEditorBase[0]) }
func (gdClass ScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodScriptEditorBase[1], highlighter) }

type ScriptExtension gdnative.Object
func (ScriptExtension) class() string { return "ScriptExtension\000" }

func (gdClass ScriptExtension) Script() Script { return Script(gdClass) }

func (gdClass ScriptExtension) virtual(val any, name string) any {	switch name {
	case "_editor_can_reload_from_file":
		i, ok := val.(interface{ EditorCanReloadFromFile() bool })
		if ok {
			return i.EditorCanReloadFromFile
		}
	case "_placeholder_erased":
		i, ok := val.(interface{ PlaceholderErased(placeholder []byte)  })
		if ok {
			return i.PlaceholderErased
		}
	case "_can_instantiate":
		i, ok := val.(interface{ CanInstantiate() bool })
		if ok {
			return i.CanInstantiate
		}
	case "_get_base_script":
		i, ok := val.(interface{ GetBaseScript() Script })
		if ok {
			return i.GetBaseScript
		}
	case "_inherits_script":
		i, ok := val.(interface{ InheritsScript(script Script) bool })
		if ok {
			return i.InheritsScript
		}
	case "_get_instance_base_type":
		i, ok := val.(interface{ GetInstanceBaseType() string })
		if ok {
			return i.GetInstanceBaseType
		}
	case "_instance_create":
		i, ok := val.(interface{ InstanceCreate(for_object Object) []byte })
		if ok {
			return i.InstanceCreate
		}
	case "_placeholder_instance_create":
		i, ok := val.(interface{ PlaceholderInstanceCreate(for_object Object) []byte })
		if ok {
			return i.PlaceholderInstanceCreate
		}
	case "_instance_has":
		i, ok := val.(interface{ InstanceHas(object Object) bool })
		if ok {
			return i.InstanceHas
		}
	case "_has_source_code":
		i, ok := val.(interface{ HasSourceCode() bool })
		if ok {
			return i.HasSourceCode
		}
	case "_get_source_code":
		i, ok := val.(interface{ GetSourceCode() string })
		if ok {
			return i.GetSourceCode
		}
	case "_set_source_code":
		i, ok := val.(interface{ SetSourceCode(code string)  })
		if ok {
			return i.SetSourceCode
		}
	case "_reload":
		i, ok := val.(interface{ Reload(keep_state bool) error })
		if ok {
			return i.Reload
		}
	case "_get_documentation":
		i, ok := val.(interface{ GetDocumentation() Array })
		if ok {
			return i.GetDocumentation
		}
	case "_has_method":
		i, ok := val.(interface{ HasMethod(method string) bool })
		if ok {
			return i.HasMethod
		}
	case "_get_method_info":
		i, ok := val.(interface{ GetMethodInfo(method string) Dictionary })
		if ok {
			return i.GetMethodInfo
		}
	case "_is_tool":
		i, ok := val.(interface{ IsTool() bool })
		if ok {
			return i.IsTool
		}
	case "_is_valid":
		i, ok := val.(interface{ IsValid() bool })
		if ok {
			return i.IsValid
		}
	case "_get_language":
		i, ok := val.(interface{ GetLanguage() ScriptLanguage })
		if ok {
			return i.GetLanguage
		}
	case "_has_script_signal":
		i, ok := val.(interface{ HasScriptSignal(signal string) bool })
		if ok {
			return i.HasScriptSignal
		}
	case "_get_script_signal_list":
		i, ok := val.(interface{ GetScriptSignalList() Array })
		if ok {
			return i.GetScriptSignalList
		}
	case "_get_property_default_value":
		i, ok := val.(interface{ GetPropertyDefaultValue(property string) any })
		if ok {
			return i.GetPropertyDefaultValue
		}
	case "_update_exports":
		i, ok := val.(interface{ UpdateExports()  })
		if ok {
			return i.UpdateExports
		}
	case "_get_script_method_list":
		i, ok := val.(interface{ GetScriptMethodList() Array })
		if ok {
			return i.GetScriptMethodList
		}
	case "_get_script_property_list":
		i, ok := val.(interface{ GetScriptPropertyList() Array })
		if ok {
			return i.GetScriptPropertyList
		}
	case "_get_member_line":
		i, ok := val.(interface{ GetMemberLine(member string) int64 })
		if ok {
			return i.GetMemberLine
		}
	case "_get_constants":
		i, ok := val.(interface{ GetConstants() Dictionary })
		if ok {
			return i.GetConstants
		}
	case "_get_members":
		i, ok := val.(interface{ GetMembers() Array })
		if ok {
			return i.GetMembers
		}
	case "_is_placeholder_fallback_enabled":
		i, ok := val.(interface{ IsPlaceholderFallbackEnabled() bool })
		if ok {
			return i.IsPlaceholderFallbackEnabled
		}
	case "_get_rpc_config":
		i, ok := val.(interface{ GetRpcConfig() any })
		if ok {
			return i.GetRpcConfig
		}
	}
	return nil
}

type ScriptLanguage gdnative.Object
func (ScriptLanguage) class() string { return "ScriptLanguage\000" }

func (gdClass ScriptLanguage) Object() Object { return Object(gdClass) }


type ScriptLanguageExtensionLookupResultType int64

const (
	ScriptLanguageExtensionLookupResultScriptLocation ScriptLanguageExtensionLookupResultType = 0
	ScriptLanguageExtensionLookupResultClass ScriptLanguageExtensionLookupResultType = 1
	ScriptLanguageExtensionLookupResultClassConstant ScriptLanguageExtensionLookupResultType = 2
	ScriptLanguageExtensionLookupResultClassProperty ScriptLanguageExtensionLookupResultType = 3
	ScriptLanguageExtensionLookupResultClassMethod ScriptLanguageExtensionLookupResultType = 4
	ScriptLanguageExtensionLookupResultClassSignal ScriptLanguageExtensionLookupResultType = 5
	ScriptLanguageExtensionLookupResultClassEnum ScriptLanguageExtensionLookupResultType = 6
	ScriptLanguageExtensionLookupResultClassTbdGlobalscope ScriptLanguageExtensionLookupResultType = 7
	ScriptLanguageExtensionLookupResultClassAnnotation ScriptLanguageExtensionLookupResultType = 8
	ScriptLanguageExtensionLookupResultMax ScriptLanguageExtensionLookupResultType = 9
)

type ScriptLanguageExtensionCodeCompletionLocation int64

const (
	ScriptLanguageExtensionLocationLocal ScriptLanguageExtensionCodeCompletionLocation = 0
	ScriptLanguageExtensionLocationParentMask ScriptLanguageExtensionCodeCompletionLocation = 256
	ScriptLanguageExtensionLocationOtherUserCode ScriptLanguageExtensionCodeCompletionLocation = 512
	ScriptLanguageExtensionLocationOther ScriptLanguageExtensionCodeCompletionLocation = 1024
)

type ScriptLanguageExtensionCodeCompletionKind int64

const (
	ScriptLanguageExtensionCodeCompletionKindClass ScriptLanguageExtensionCodeCompletionKind = 0
	ScriptLanguageExtensionCodeCompletionKindFunction ScriptLanguageExtensionCodeCompletionKind = 1
	ScriptLanguageExtensionCodeCompletionKindSignal ScriptLanguageExtensionCodeCompletionKind = 2
	ScriptLanguageExtensionCodeCompletionKindVariable ScriptLanguageExtensionCodeCompletionKind = 3
	ScriptLanguageExtensionCodeCompletionKindMember ScriptLanguageExtensionCodeCompletionKind = 4
	ScriptLanguageExtensionCodeCompletionKindEnum ScriptLanguageExtensionCodeCompletionKind = 5
	ScriptLanguageExtensionCodeCompletionKindConstant ScriptLanguageExtensionCodeCompletionKind = 6
	ScriptLanguageExtensionCodeCompletionKindNodePath ScriptLanguageExtensionCodeCompletionKind = 7
	ScriptLanguageExtensionCodeCompletionKindFilePath ScriptLanguageExtensionCodeCompletionKind = 8
	ScriptLanguageExtensionCodeCompletionKindPlainText ScriptLanguageExtensionCodeCompletionKind = 9
	ScriptLanguageExtensionCodeCompletionKindMax ScriptLanguageExtensionCodeCompletionKind = 10
)

type ScriptLanguageExtension gdnative.Object
func (ScriptLanguageExtension) class() string { return "ScriptLanguageExtension\000" }

func (gdClass ScriptLanguageExtension) ScriptLanguage() ScriptLanguage { return ScriptLanguage(gdClass) }

func (gdClass ScriptLanguageExtension) virtual(val any, name string) any {	switch name {
	case "_get_name":
		i, ok := val.(interface{ GetName() string })
		if ok {
			return i.GetName
		}
	case "_init":
		i, ok := val.(interface{ Init()  })
		if ok {
			return i.Init
		}
	case "_get_type":
		i, ok := val.(interface{ GetType() string })
		if ok {
			return i.GetType
		}
	case "_get_extension":
		i, ok := val.(interface{ GetExtension() string })
		if ok {
			return i.GetExtension
		}
	case "_execute_file":
		i, ok := val.(interface{ ExecuteFile(path string) error })
		if ok {
			return i.ExecuteFile
		}
	case "_finish":
		i, ok := val.(interface{ Finish()  })
		if ok {
			return i.Finish
		}
	case "_get_reserved_words":
		i, ok := val.(interface{ GetReservedWords() []string })
		if ok {
			return i.GetReservedWords
		}
	case "_is_control_flow_keyword":
		i, ok := val.(interface{ IsControlFlowKeyword(keyword string) bool })
		if ok {
			return i.IsControlFlowKeyword
		}
	case "_get_comment_delimiters":
		i, ok := val.(interface{ GetCommentDelimiters() []string })
		if ok {
			return i.GetCommentDelimiters
		}
	case "_get_string_delimiters":
		i, ok := val.(interface{ GetStringDelimiters() []string })
		if ok {
			return i.GetStringDelimiters
		}
	case "_make_template":
		i, ok := val.(interface{ MakeTemplate(template string, class_name string, base_class_name string) Script })
		if ok {
			return i.MakeTemplate
		}
	case "_get_built_in_templates":
		i, ok := val.(interface{ GetBuiltInTemplates(object string) Array })
		if ok {
			return i.GetBuiltInTemplates
		}
	case "_is_using_templates":
		i, ok := val.(interface{ IsUsingTemplates() bool })
		if ok {
			return i.IsUsingTemplates
		}
	case "_validate":
		i, ok := val.(interface{ Validate(script string, path string, validate_functions bool, validate_errors bool, validate_warnings bool, validate_safe_lines bool) Dictionary })
		if ok {
			return i.Validate
		}
	case "_validate_path":
		i, ok := val.(interface{ ValidatePath(path string) string })
		if ok {
			return i.ValidatePath
		}
	case "_create_script":
		i, ok := val.(interface{ CreateScript() Object })
		if ok {
			return i.CreateScript
		}
	case "_has_named_classes":
		i, ok := val.(interface{ HasNamedClasses() bool })
		if ok {
			return i.HasNamedClasses
		}
	case "_supports_builtin_mode":
		i, ok := val.(interface{ SupportsBuiltinMode() bool })
		if ok {
			return i.SupportsBuiltinMode
		}
	case "_supports_documentation":
		i, ok := val.(interface{ SupportsDocumentation() bool })
		if ok {
			return i.SupportsDocumentation
		}
	case "_can_inherit_from_file":
		i, ok := val.(interface{ CanInheritFromFile() bool })
		if ok {
			return i.CanInheritFromFile
		}
	case "_find_function":
		i, ok := val.(interface{ FindFunction(class_name string, function_name string) int64 })
		if ok {
			return i.FindFunction
		}
	case "_make_function":
		i, ok := val.(interface{ MakeFunction(class_name string, function_name string, function_args []string) string })
		if ok {
			return i.MakeFunction
		}
	case "_open_in_external_editor":
		i, ok := val.(interface{ OpenInExternalEditor(script Script, line int64, column int64) error })
		if ok {
			return i.OpenInExternalEditor
		}
	case "_overrides_external_editor":
		i, ok := val.(interface{ OverridesExternalEditor() bool })
		if ok {
			return i.OverridesExternalEditor
		}
	case "_complete_code":
		i, ok := val.(interface{ CompleteCode(code string, path string, owner Object) Dictionary })
		if ok {
			return i.CompleteCode
		}
	case "_lookup_code":
		i, ok := val.(interface{ LookupCode(code string, symbol string, path string, owner Object) Dictionary })
		if ok {
			return i.LookupCode
		}
	case "_auto_indent_code":
		i, ok := val.(interface{ AutoIndentCode(code string, from_line int64, to_line int64) string })
		if ok {
			return i.AutoIndentCode
		}
	case "_add_global_constant":
		i, ok := val.(interface{ AddGlobalConstant(name string, value any)  })
		if ok {
			return i.AddGlobalConstant
		}
	case "_add_named_global_constant":
		i, ok := val.(interface{ AddNamedGlobalConstant(name string, value any)  })
		if ok {
			return i.AddNamedGlobalConstant
		}
	case "_remove_named_global_constant":
		i, ok := val.(interface{ RemoveNamedGlobalConstant(name string)  })
		if ok {
			return i.RemoveNamedGlobalConstant
		}
	case "_thread_enter":
		i, ok := val.(interface{ ThreadEnter()  })
		if ok {
			return i.ThreadEnter
		}
	case "_thread_exit":
		i, ok := val.(interface{ ThreadExit()  })
		if ok {
			return i.ThreadExit
		}
	case "_debug_get_error":
		i, ok := val.(interface{ DebugGetError() string })
		if ok {
			return i.DebugGetError
		}
	case "_debug_get_stack_level_count":
		i, ok := val.(interface{ DebugGetStackLevelCount() int64 })
		if ok {
			return i.DebugGetStackLevelCount
		}
	case "_debug_get_stack_level_line":
		i, ok := val.(interface{ DebugGetStackLevelLine(level int64) int64 })
		if ok {
			return i.DebugGetStackLevelLine
		}
	case "_debug_get_stack_level_function":
		i, ok := val.(interface{ DebugGetStackLevelFunction(level int64) string })
		if ok {
			return i.DebugGetStackLevelFunction
		}
	case "_debug_get_stack_level_locals":
		i, ok := val.(interface{ DebugGetStackLevelLocals(level int64, max_subitems int64, max_depth int64) Dictionary })
		if ok {
			return i.DebugGetStackLevelLocals
		}
	case "_debug_get_stack_level_members":
		i, ok := val.(interface{ DebugGetStackLevelMembers(level int64, max_subitems int64, max_depth int64) Dictionary })
		if ok {
			return i.DebugGetStackLevelMembers
		}
	case "_debug_get_stack_level_instance":
		i, ok := val.(interface{ DebugGetStackLevelInstance(level int64) []byte })
		if ok {
			return i.DebugGetStackLevelInstance
		}
	case "_debug_get_globals":
		i, ok := val.(interface{ DebugGetGlobals(max_subitems int64, max_depth int64) Dictionary })
		if ok {
			return i.DebugGetGlobals
		}
	case "_debug_parse_stack_level_expression":
		i, ok := val.(interface{ DebugParseStackLevelExpression(level int64, expression string, max_subitems int64, max_depth int64) string })
		if ok {
			return i.DebugParseStackLevelExpression
		}
	case "_debug_get_current_stack_info":
		i, ok := val.(interface{ DebugGetCurrentStackInfo() Array })
		if ok {
			return i.DebugGetCurrentStackInfo
		}
	case "_reload_all_scripts":
		i, ok := val.(interface{ ReloadAllScripts()  })
		if ok {
			return i.ReloadAllScripts
		}
	case "_reload_tool_script":
		i, ok := val.(interface{ ReloadToolScript(script Script, soft_reload bool)  })
		if ok {
			return i.ReloadToolScript
		}
	case "_get_recognized_extensions":
		i, ok := val.(interface{ GetRecognizedExtensions() []string })
		if ok {
			return i.GetRecognizedExtensions
		}
	case "_get_public_functions":
		i, ok := val.(interface{ GetPublicFunctions() Array })
		if ok {
			return i.GetPublicFunctions
		}
	case "_get_public_constants":
		i, ok := val.(interface{ GetPublicConstants() Dictionary })
		if ok {
			return i.GetPublicConstants
		}
	case "_get_public_annotations":
		i, ok := val.(interface{ GetPublicAnnotations() Array })
		if ok {
			return i.GetPublicAnnotations
		}
	case "_profiling_start":
		i, ok := val.(interface{ ProfilingStart()  })
		if ok {
			return i.ProfilingStart
		}
	case "_profiling_stop":
		i, ok := val.(interface{ ProfilingStop()  })
		if ok {
			return i.ProfilingStop
		}
	case "_profiling_get_accumulated_data":
		i, ok := val.(interface{ ProfilingGetAccumulatedData(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 })
		if ok {
			return i.ProfilingGetAccumulatedData
		}
	case "_profiling_get_frame_data":
		i, ok := val.(interface{ ProfilingGetFrameData(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 })
		if ok {
			return i.ProfilingGetFrameData
		}
	case "_alloc_instance_binding_data":
		i, ok := val.(interface{ AllocInstanceBindingData(object Object) []byte })
		if ok {
			return i.AllocInstanceBindingData
		}
	case "_free_instance_binding_data":
		i, ok := val.(interface{ FreeInstanceBindingData(data []byte)  })
		if ok {
			return i.FreeInstanceBindingData
		}
	case "_refcount_incremented_instance_binding":
		i, ok := val.(interface{ RefcountIncrementedInstanceBinding(object Object)  })
		if ok {
			return i.RefcountIncrementedInstanceBinding
		}
	case "_refcount_decremented_instance_binding":
		i, ok := val.(interface{ RefcountDecrementedInstanceBinding(object Object) bool })
		if ok {
			return i.RefcountDecrementedInstanceBinding
		}
	case "_frame":
		i, ok := val.(interface{ Frame()  })
		if ok {
			return i.Frame
		}
	case "_handles_global_class_type":
		i, ok := val.(interface{ HandlesGlobalClassType(atype string) bool })
		if ok {
			return i.HandlesGlobalClassType
		}
	case "_get_global_class_name":
		i, ok := val.(interface{ GetGlobalClassName(path string) Dictionary })
		if ok {
			return i.GetGlobalClassName
		}
	}
	return nil
}

type ScrollBar gdnative.Object
func (ScrollBar) class() string { return "ScrollBar\000" }

func (gdClass ScrollBar) Range() Range { return Range(gdClass) }

var methodScrollBar [2]gdnative.Method
func (gdClass ScrollBar) SetCustomStep(step float64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollBar[0], step) }
func (gdClass ScrollBar) GetCustomStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodScrollBar[1]) }

type ScrollContainerScrollMode int64

const (
	ScrollContainerScrollModeDisabled ScrollContainerScrollMode = 0
	ScrollContainerScrollModeAuto ScrollContainerScrollMode = 1
	ScrollContainerScrollModeShowAlways ScrollContainerScrollMode = 2
	ScrollContainerScrollModeShowNever ScrollContainerScrollMode = 3
)

type ScrollContainer gdnative.Object
func (ScrollContainer) class() string { return "ScrollContainer\000" }

func (gdClass ScrollContainer) Container() Container { return Container(gdClass) }

var methodScrollContainer [15]gdnative.Method
func (gdClass ScrollContainer) SetHScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[0], value) }
func (gdClass ScrollContainer) GetHScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[1]) }
func (gdClass ScrollContainer) SetVScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[2], value) }
func (gdClass ScrollContainer) GetVScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[3]) }
func (gdClass ScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[4], enable) }
func (gdClass ScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode { return gdnative.Return[ScrollContainerScrollMode](gdnative.Object(gdClass), methodScrollContainer[5]) }
func (gdClass ScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[6], enable) }
func (gdClass ScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode { return gdnative.Return[ScrollContainerScrollMode](gdnative.Object(gdClass), methodScrollContainer[7]) }
func (gdClass ScrollContainer) SetDeadzone(deadzone int64)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[8], deadzone) }
func (gdClass ScrollContainer) GetDeadzone() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodScrollContainer[9]) }
func (gdClass ScrollContainer) SetFollowFocus(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[10], enabled) }
func (gdClass ScrollContainer) IsFollowingFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodScrollContainer[11]) }
func (gdClass ScrollContainer) GetHScrollBar() HScrollBar { return gdnative.Return[HScrollBar](gdnative.Object(gdClass), methodScrollContainer[12]) }
func (gdClass ScrollContainer) GetVScrollBar() VScrollBar { return gdnative.Return[VScrollBar](gdnative.Object(gdClass), methodScrollContainer[13]) }
func (gdClass ScrollContainer) EnsureControlVisible(control Control)  { gdnative.Call(gdnative.Object(gdClass), methodScrollContainer[14], control) }

type SegmentShape2D gdnative.Object
func (SegmentShape2D) class() string { return "SegmentShape2D\000" }

func (gdClass SegmentShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodSegmentShape2D [4]gdnative.Method
func (gdClass SegmentShape2D) SetA(a Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSegmentShape2D[0], a) }
func (gdClass SegmentShape2D) GetA() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSegmentShape2D[1]) }
func (gdClass SegmentShape2D) SetB(b Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSegmentShape2D[2], b) }
func (gdClass SegmentShape2D) GetB() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSegmentShape2D[3]) }

type Semaphore gdnative.Object
func (Semaphore) class() string { return "Semaphore\000" }

func (gdClass Semaphore) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodSemaphore [3]gdnative.Method
func (gdClass Semaphore) Wait()  { gdnative.Call(gdnative.Object(gdClass), methodSemaphore[0]) }
func (gdClass Semaphore) TryWait() error { return gdnative.Return[error](gdnative.Object(gdClass), methodSemaphore[1]) }
func (gdClass Semaphore) Post()  { gdnative.Call(gdnative.Object(gdClass), methodSemaphore[2]) }

type SeparationRayShape2D gdnative.Object
func (SeparationRayShape2D) class() string { return "SeparationRayShape2D\000" }

func (gdClass SeparationRayShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodSeparationRayShape2D [4]gdnative.Method
func (gdClass SeparationRayShape2D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape2D[0], length) }
func (gdClass SeparationRayShape2D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSeparationRayShape2D[1]) }
func (gdClass SeparationRayShape2D) SetSlideOnSlope(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape2D[2], active) }
func (gdClass SeparationRayShape2D) GetSlideOnSlope() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSeparationRayShape2D[3]) }

type SeparationRayShape3D gdnative.Object
func (SeparationRayShape3D) class() string { return "SeparationRayShape3D\000" }

func (gdClass SeparationRayShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodSeparationRayShape3D [4]gdnative.Method
func (gdClass SeparationRayShape3D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape3D[0], length) }
func (gdClass SeparationRayShape3D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSeparationRayShape3D[1]) }
func (gdClass SeparationRayShape3D) SetSlideOnSlope(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodSeparationRayShape3D[2], active) }
func (gdClass SeparationRayShape3D) GetSlideOnSlope() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSeparationRayShape3D[3]) }

type Separator gdnative.Object
func (Separator) class() string { return "Separator\000" }

func (gdClass Separator) Control() Control { return Control(gdClass) }


type ShaderMode int64

const (
	ShaderModeSpatial ShaderMode = 0
	ShaderModeCanvasItem ShaderMode = 1
	ShaderModeParticles ShaderMode = 2
	ShaderModeSky ShaderMode = 3
	ShaderModeFog ShaderMode = 4
)

type Shader gdnative.Object
func (Shader) class() string { return "Shader\000" }

func (gdClass Shader) Resource() Resource { return Resource(gdClass) }

var methodShader [6]gdnative.Method
func (gdClass Shader) GetMode() ShaderMode { return gdnative.Return[ShaderMode](gdnative.Object(gdClass), methodShader[0]) }
func (gdClass Shader) SetCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodShader[1], code) }
func (gdClass Shader) GetCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShader[2]) }
func (gdClass Shader) SetDefaultTextureParam(param string, texture Texture2D, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodShader[3], param, texture, index) }
func (gdClass Shader) GetDefaultTextureParam(param string, index int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodShader[4], param, index) }
func (gdClass Shader) HasUniform(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShader[5], name) }

type ShaderGlobalsOverride gdnative.Object
func (ShaderGlobalsOverride) class() string { return "ShaderGlobalsOverride\000" }

func (gdClass ShaderGlobalsOverride) Node() Node { return Node(gdClass) }


type ShaderInclude gdnative.Object
func (ShaderInclude) class() string { return "ShaderInclude\000" }

func (gdClass ShaderInclude) Resource() Resource { return Resource(gdClass) }

var methodShaderInclude [2]gdnative.Method
func (gdClass ShaderInclude) SetCode(code string)  { gdnative.Call(gdnative.Object(gdClass), methodShaderInclude[0], code) }
func (gdClass ShaderInclude) GetCode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShaderInclude[1]) }

type ShaderMaterial gdnative.Object
func (ShaderMaterial) class() string { return "ShaderMaterial\000" }

func (gdClass ShaderMaterial) Material() Material { return Material(gdClass) }

var methodShaderMaterial [4]gdnative.Method
func (gdClass ShaderMaterial) SetShader(shader Shader)  { gdnative.Call(gdnative.Object(gdClass), methodShaderMaterial[0], shader) }
func (gdClass ShaderMaterial) GetShader() Shader { return gdnative.Return[Shader](gdnative.Object(gdClass), methodShaderMaterial[1]) }
func (gdClass ShaderMaterial) SetShaderUniform(param string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodShaderMaterial[2], param, value) }
func (gdClass ShaderMaterial) GetShaderUniform(param string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodShaderMaterial[3], param) }

type Shape2D gdnative.Object
func (Shape2D) class() string { return "Shape2D\000" }

func (gdClass Shape2D) Resource() Resource { return Resource(gdClass) }

var methodShape2D [7]gdnative.Method
func (gdClass Shape2D) SetCustomSolverBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape2D[0], bias) }
func (gdClass Shape2D) GetCustomSolverBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape2D[1]) }
func (gdClass Shape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShape2D[2], local_xform, with_shape, shape_xform) }
func (gdClass Shape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShape2D[3], local_xform, local_motion, with_shape, shape_xform, shape_motion) }
func (gdClass Shape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShape2D[4], local_xform, with_shape, shape_xform) }
func (gdClass Shape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShape2D[5], local_xform, local_motion, with_shape, shape_xform, shape_motion) }
func (gdClass Shape2D) Draw(canvas_item RID, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodShape2D[6], canvas_item, color) }

type Shape3D gdnative.Object
func (Shape3D) class() string { return "Shape3D\000" }

func (gdClass Shape3D) Resource() Resource { return Resource(gdClass) }

var methodShape3D [5]gdnative.Method
func (gdClass Shape3D) SetCustomSolverBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape3D[0], bias) }
func (gdClass Shape3D) GetCustomSolverBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape3D[1]) }
func (gdClass Shape3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShape3D[2], margin) }
func (gdClass Shape3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShape3D[3]) }
func (gdClass Shape3D) GetDebugMesh() ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodShape3D[4]) }

type ShapeCast2D gdnative.Object
func (ShapeCast2D) class() string { return "ShapeCast2D\000" }

func (gdClass ShapeCast2D) Node2D() Node2D { return Node2D(gdClass) }

var methodShapeCast2D [34]gdnative.Method
func (gdClass ShapeCast2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[0], enabled) }
func (gdClass ShapeCast2D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[1]) }
func (gdClass ShapeCast2D) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[2], shape) }
func (gdClass ShapeCast2D) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodShapeCast2D[3]) }
func (gdClass ShapeCast2D) SetTargetPosition(local_point Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[4], local_point) }
func (gdClass ShapeCast2D) GetTargetPosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[5]) }
func (gdClass ShapeCast2D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[6], margin) }
func (gdClass ShapeCast2D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[7]) }
func (gdClass ShapeCast2D) SetMaxResults(max_results int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[8], max_results) }
func (gdClass ShapeCast2D) GetMaxResults() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[9]) }
func (gdClass ShapeCast2D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[10]) }
func (gdClass ShapeCast2D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[11]) }
func (gdClass ShapeCast2D) ForceShapecastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[12]) }
func (gdClass ShapeCast2D) GetCollider(index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodShapeCast2D[13], index) }
func (gdClass ShapeCast2D) GetColliderShape(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[14], index) }
func (gdClass ShapeCast2D) GetCollisionPoint(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[15], index) }
func (gdClass ShapeCast2D) GetCollisionNormal(index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodShapeCast2D[16], index) }
func (gdClass ShapeCast2D) GetClosestCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[17]) }
func (gdClass ShapeCast2D) GetClosestCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast2D[18]) }
func (gdClass ShapeCast2D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[19], rid) }
func (gdClass ShapeCast2D) AddException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[20], node) }
func (gdClass ShapeCast2D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[21], rid) }
func (gdClass ShapeCast2D) RemoveException(node CollisionObject2D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[22], node) }
func (gdClass ShapeCast2D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[23]) }
func (gdClass ShapeCast2D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[24], mask) }
func (gdClass ShapeCast2D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast2D[25]) }
func (gdClass ShapeCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[26], layer_number, value) }
func (gdClass ShapeCast2D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[27], layer_number) }
func (gdClass ShapeCast2D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[28], mask) }
func (gdClass ShapeCast2D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[29]) }
func (gdClass ShapeCast2D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[30], enable) }
func (gdClass ShapeCast2D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[31]) }
func (gdClass ShapeCast2D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast2D[32], enable) }
func (gdClass ShapeCast2D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast2D[33]) }

type ShapeCast3D gdnative.Object
func (ShapeCast3D) class() string { return "ShapeCast3D\000" }

func (gdClass ShapeCast3D) Node3D() Node3D { return Node3D(gdClass) }

var methodShapeCast3D [37]gdnative.Method
func (gdClass ShapeCast3D) ResourceChanged(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[0], resource) }
func (gdClass ShapeCast3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[1], enabled) }
func (gdClass ShapeCast3D) IsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[2]) }
func (gdClass ShapeCast3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[3], shape) }
func (gdClass ShapeCast3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodShapeCast3D[4]) }
func (gdClass ShapeCast3D) SetTargetPosition(local_point Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[5], local_point) }
func (gdClass ShapeCast3D) GetTargetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[6]) }
func (gdClass ShapeCast3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[7], margin) }
func (gdClass ShapeCast3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[8]) }
func (gdClass ShapeCast3D) SetMaxResults(max_results int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[9], max_results) }
func (gdClass ShapeCast3D) GetMaxResults() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[10]) }
func (gdClass ShapeCast3D) IsColliding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[11]) }
func (gdClass ShapeCast3D) GetCollisionCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[12]) }
func (gdClass ShapeCast3D) ForceShapecastUpdate()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[13]) }
func (gdClass ShapeCast3D) GetCollider(index int64) Object { return gdnative.Return[Object](gdnative.Object(gdClass), methodShapeCast3D[14], index) }
func (gdClass ShapeCast3D) GetColliderShape(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[15], index) }
func (gdClass ShapeCast3D) GetCollisionPoint(index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[16], index) }
func (gdClass ShapeCast3D) GetCollisionNormal(index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodShapeCast3D[17], index) }
func (gdClass ShapeCast3D) GetClosestCollisionSafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[18]) }
func (gdClass ShapeCast3D) GetClosestCollisionUnsafeFraction() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodShapeCast3D[19]) }
func (gdClass ShapeCast3D) AddExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[20], rid) }
func (gdClass ShapeCast3D) AddException(node Object)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[21], node) }
func (gdClass ShapeCast3D) RemoveExceptionRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[22], rid) }
func (gdClass ShapeCast3D) RemoveException(node Object)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[23], node) }
func (gdClass ShapeCast3D) ClearExceptions()  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[24]) }
func (gdClass ShapeCast3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[25], mask) }
func (gdClass ShapeCast3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodShapeCast3D[26]) }
func (gdClass ShapeCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[27], layer_number, value) }
func (gdClass ShapeCast3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[28], layer_number) }
func (gdClass ShapeCast3D) SetExcludeParentBody(mask bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[29], mask) }
func (gdClass ShapeCast3D) GetExcludeParentBody() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[30]) }
func (gdClass ShapeCast3D) SetCollideWithAreas(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[31], enable) }
func (gdClass ShapeCast3D) IsCollideWithAreasEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[32]) }
func (gdClass ShapeCast3D) SetCollideWithBodies(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[33], enable) }
func (gdClass ShapeCast3D) IsCollideWithBodiesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShapeCast3D[34]) }
func (gdClass ShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodShapeCast3D[35], debug_shape_custom_color) }
func (gdClass ShapeCast3D) GetDebugShapeCustomColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodShapeCast3D[36]) }

type Shortcut gdnative.Object
func (Shortcut) class() string { return "Shortcut\000" }

func (gdClass Shortcut) Resource() Resource { return Resource(gdClass) }

var methodShortcut [5]gdnative.Method
func (gdClass Shortcut) SetEvents(events Array)  { gdnative.Call(gdnative.Object(gdClass), methodShortcut[0], events) }
func (gdClass Shortcut) GetEvents() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodShortcut[1]) }
func (gdClass Shortcut) HasValidEvent() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShortcut[2]) }
func (gdClass Shortcut) MatchesEvent(event InputEvent) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodShortcut[3], event) }
func (gdClass Shortcut) GetAsText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodShortcut[4]) }

type Skeleton2D gdnative.Object
func (Skeleton2D) class() string { return "Skeleton2D\000" }

func (gdClass Skeleton2D) Node2D() Node2D { return Node2D(gdClass) }

var methodSkeleton2D [8]gdnative.Method
func (gdClass Skeleton2D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton2D[0]) }
func (gdClass Skeleton2D) GetBone(idx int64) Bone2D { return gdnative.Return[Bone2D](gdnative.Object(gdClass), methodSkeleton2D[1], idx) }
func (gdClass Skeleton2D) GetSkeleton() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSkeleton2D[2]) }
func (gdClass Skeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[3], modification_stack) }
func (gdClass Skeleton2D) GetModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeleton2D[4]) }
func (gdClass Skeleton2D) ExecuteModifications(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[5], delta, execution_mode) }
func (gdClass Skeleton2D) SetBoneLocalPoseOverride(bone_idx int64, override_pose Transform2D, strength float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton2D[6], bone_idx, override_pose, strength, persistent) }
func (gdClass Skeleton2D) GetBoneLocalPoseOverride(bone_idx int64) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodSkeleton2D[7], bone_idx) }

type Skeleton3D gdnative.Object
func (Skeleton3D) class() string { return "Skeleton3D\000" }

func (gdClass Skeleton3D) Node3D() Node3D { return Node3D(gdClass) }

var methodSkeleton3D [57]gdnative.Method
func (gdClass Skeleton3D) AddBone(name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[0], name) }
func (gdClass Skeleton3D) FindBone(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[1], name) }
func (gdClass Skeleton3D) GetBoneName(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeleton3D[2], bone_idx) }
func (gdClass Skeleton3D) SetBoneName(bone_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[3], bone_idx, name) }
func (gdClass Skeleton3D) GetBoneParent(bone_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[4], bone_idx) }
func (gdClass Skeleton3D) SetBoneParent(bone_idx int64, parent_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[5], bone_idx, parent_idx) }
func (gdClass Skeleton3D) GetBoneCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeleton3D[6]) }
func (gdClass Skeleton3D) UnparentBoneAndRest(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[7], bone_idx) }
func (gdClass Skeleton3D) GetBoneChildren(bone_idx int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSkeleton3D[8], bone_idx) }
func (gdClass Skeleton3D) SetBoneChildren(bone_idx int64, bone_children []int32)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[9], bone_idx, bone_children) }
func (gdClass Skeleton3D) AddBoneChild(bone_idx int64, child_bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[10], bone_idx, child_bone_idx) }
func (gdClass Skeleton3D) RemoveBoneChild(bone_idx int64, child_bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[11], bone_idx, child_bone_idx) }
func (gdClass Skeleton3D) GetParentlessBones() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSkeleton3D[12]) }
func (gdClass Skeleton3D) GetBoneRest(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[13], bone_idx) }
func (gdClass Skeleton3D) SetBoneRest(bone_idx int64, rest Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[14], bone_idx, rest) }
func (gdClass Skeleton3D) GetBoneGlobalRest(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[15], bone_idx) }
func (gdClass Skeleton3D) CreateSkinFromRestTransforms() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodSkeleton3D[16]) }
func (gdClass Skeleton3D) RegisterSkin(skin Skin) SkinReference { return gdnative.Return[SkinReference](gdnative.Object(gdClass), methodSkeleton3D[17], skin) }
func (gdClass Skeleton3D) LocalizeRests()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[18]) }
func (gdClass Skeleton3D) ClearBones()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[19]) }
func (gdClass Skeleton3D) GetBonePose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[20], bone_idx) }
func (gdClass Skeleton3D) SetBonePosePosition(bone_idx int64, position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[21], bone_idx, position) }
func (gdClass Skeleton3D) SetBonePoseRotation(bone_idx int64, rotation Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[22], bone_idx, rotation) }
func (gdClass Skeleton3D) SetBonePoseScale(bone_idx int64, scale Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[23], bone_idx, scale) }
func (gdClass Skeleton3D) GetBonePosePosition(bone_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeleton3D[24], bone_idx) }
func (gdClass Skeleton3D) GetBonePoseRotation(bone_idx int64) Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodSkeleton3D[25], bone_idx) }
func (gdClass Skeleton3D) GetBonePoseScale(bone_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeleton3D[26], bone_idx) }
func (gdClass Skeleton3D) IsBoneEnabled(bone_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[27], bone_idx) }
func (gdClass Skeleton3D) SetBoneEnabled(bone_idx int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[28], bone_idx, enabled) }
func (gdClass Skeleton3D) ClearBonesGlobalPoseOverride()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[29]) }
func (gdClass Skeleton3D) SetBoneGlobalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[30], bone_idx, pose, amount, persistent) }
func (gdClass Skeleton3D) GetBoneGlobalPoseOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[31], bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[32], bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPoseNoOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[33], bone_idx) }
func (gdClass Skeleton3D) ClearBonesLocalPoseOverride()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[34]) }
func (gdClass Skeleton3D) SetBoneLocalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[35], bone_idx, pose, amount, persistent) }
func (gdClass Skeleton3D) GetBoneLocalPoseOverride(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[36], bone_idx) }
func (gdClass Skeleton3D) ForceUpdateAllBoneTransforms()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[37]) }
func (gdClass Skeleton3D) ForceUpdateBoneChildTransform(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[38], bone_idx) }
func (gdClass Skeleton3D) SetMotionScale(motion_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[39], motion_scale) }
func (gdClass Skeleton3D) GetMotionScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeleton3D[40]) }
func (gdClass Skeleton3D) GlobalPoseToWorldTransform(global_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[41], global_pose) }
func (gdClass Skeleton3D) WorldTransformToGlobalPose(world_transform Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[42], world_transform) }
func (gdClass Skeleton3D) GlobalPoseToLocalPose(bone_idx int64, global_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[43], bone_idx, global_pose) }
func (gdClass Skeleton3D) LocalPoseToGlobalPose(bone_idx int64, local_pose Transform3D) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeleton3D[44], bone_idx, local_pose) }
func (gdClass Skeleton3D) GlobalPoseZForwardToBoneForward(bone_idx int64, basis Basis) Basis { return gdnative.Return[Basis](gdnative.Object(gdClass), methodSkeleton3D[45], bone_idx, basis) }
func (gdClass Skeleton3D) SetShowRestOnly(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[46], enabled) }
func (gdClass Skeleton3D) IsShowRestOnly() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[47]) }
func (gdClass Skeleton3D) SetAnimatePhysicalBones(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[48], enabled) }
func (gdClass Skeleton3D) GetAnimatePhysicalBones() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeleton3D[49]) }
func (gdClass Skeleton3D) PhysicalBonesStopSimulation()  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[50]) }
func (gdClass Skeleton3D) PhysicalBonesStartSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[51], bones) }
func (gdClass Skeleton3D) PhysicalBonesAddCollisionException(exception RID)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[52], exception) }
func (gdClass Skeleton3D) PhysicalBonesRemoveCollisionException(exception RID)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[53], exception) }
func (gdClass Skeleton3D) SetModificationStack(modification_stack SkeletonModificationStack3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[54], modification_stack) }
func (gdClass Skeleton3D) GetModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeleton3D[55]) }
func (gdClass Skeleton3D) ExecuteModifications(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeleton3D[56], delta, execution_mode) }

type SkeletonIK3D gdnative.Object
func (SkeletonIK3D) class() string { return "SkeletonIK3D\000" }

func (gdClass SkeletonIK3D) Node() Node { return Node(gdClass) }

var methodSkeletonIK3D [24]gdnative.Method
func (gdClass SkeletonIK3D) SetRootBone(root_bone string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[0], root_bone) }
func (gdClass SkeletonIK3D) GetRootBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonIK3D[1]) }
func (gdClass SkeletonIK3D) SetTipBone(tip_bone string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[2], tip_bone) }
func (gdClass SkeletonIK3D) GetTipBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonIK3D[3]) }
func (gdClass SkeletonIK3D) SetInterpolation(interpolation float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[4], interpolation) }
func (gdClass SkeletonIK3D) GetInterpolation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonIK3D[5]) }
func (gdClass SkeletonIK3D) SetTargetTransform(target Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[6], target) }
func (gdClass SkeletonIK3D) GetTargetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeletonIK3D[7]) }
func (gdClass SkeletonIK3D) SetTargetNode(node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[8], node) }
func (gdClass SkeletonIK3D) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonIK3D[9]) }
func (gdClass SkeletonIK3D) SetOverrideTipBasis(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[10], override) }
func (gdClass SkeletonIK3D) IsOverrideTipBasis() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[11]) }
func (gdClass SkeletonIK3D) SetUseMagnet(use bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[12], use) }
func (gdClass SkeletonIK3D) IsUsingMagnet() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[13]) }
func (gdClass SkeletonIK3D) SetMagnetPosition(local_position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[14], local_position) }
func (gdClass SkeletonIK3D) GetMagnetPosition() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonIK3D[15]) }
func (gdClass SkeletonIK3D) GetParentSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodSkeletonIK3D[16]) }
func (gdClass SkeletonIK3D) IsRunning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonIK3D[17]) }
func (gdClass SkeletonIK3D) SetMinDistance(min_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[18], min_distance) }
func (gdClass SkeletonIK3D) GetMinDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonIK3D[19]) }
func (gdClass SkeletonIK3D) SetMaxIterations(iterations int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[20], iterations) }
func (gdClass SkeletonIK3D) GetMaxIterations() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonIK3D[21]) }
func (gdClass SkeletonIK3D) Start(one_time bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[22], one_time) }
func (gdClass SkeletonIK3D) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonIK3D[23]) }

type SkeletonModification2D gdnative.Object
func (SkeletonModification2D) class() string { return "SkeletonModification2D\000" }

func (gdClass SkeletonModification2D) Resource() Resource { return Resource(gdClass) }

var methodSkeletonModification2D [10]gdnative.Method
func (gdClass SkeletonModification2D) virtual(val any, name string) any {	switch name {
	case "_execute":
		i, ok := val.(interface{ Execute(delta float64)  })
		if ok {
			return i.Execute
		}
	case "_setup_modification":
		i, ok := val.(interface{ SetupModification(modification_stack SkeletonModificationStack2D)  })
		if ok {
			return i.SetupModification
		}
	case "_draw_editor_gizmo":
		i, ok := val.(interface{ DrawEditorGizmo()  })
		if ok {
			return i.DrawEditorGizmo
		}
	}
	return nil
}
func (gdClass SkeletonModification2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[0], enabled) }
func (gdClass SkeletonModification2D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[1]) }
func (gdClass SkeletonModification2D) GetModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeletonModification2D[2]) }
func (gdClass SkeletonModification2D) SetIsSetup(is_setup bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[3], is_setup) }
func (gdClass SkeletonModification2D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[4]) }
func (gdClass SkeletonModification2D) SetExecutionMode(execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[5], execution_mode) }
func (gdClass SkeletonModification2D) GetExecutionMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2D[6]) }
func (gdClass SkeletonModification2D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2D[7], angle, min, max, invert) }
func (gdClass SkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2D[8], draw_gizmo) }
func (gdClass SkeletonModification2D) GetEditorDrawGizmo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2D[9]) }

type SkeletonModification2DCCDIK gdnative.Object
func (SkeletonModification2DCCDIK) class() string { return "SkeletonModification2DCCDIK\000" }

func (gdClass SkeletonModification2DCCDIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DCCDIK [20]gdnative.Method
func (gdClass SkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[0], target_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[1]) }
func (gdClass SkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[2], tip_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[3]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[4], length) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[5]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[6], joint_idx, bone2d_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[7], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[8], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[9], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx int64, rotate_from_joint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[10], joint_idx, rotate_from_joint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[11], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx int64, enable_constraint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[12], joint_idx, enable_constraint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[13], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, angle_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[14], joint_idx, angle_min) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[15], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, angle_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[16], joint_idx, angle_max) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[17], joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx int64, invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[18], joint_idx, invert) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DCCDIK[19], joint_idx) }

type SkeletonModification2DFABRIK gdnative.Object
func (SkeletonModification2DFABRIK) class() string { return "SkeletonModification2DFABRIK\000" }

func (gdClass SkeletonModification2DFABRIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DFABRIK [12]gdnative.Method
func (gdClass SkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[0], target_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[1]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[2], length) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[3]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[4], joint_idx, bone2d_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[5], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[6], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[7], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx int64, magnet_position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[8], joint_idx, magnet_position) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[9], joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx int64, use_target_rotation bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[10], joint_idx, use_target_rotation) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DFABRIK[11], joint_idx) }

type SkeletonModification2DJiggle gdnative.Object
func (SkeletonModification2DJiggle) class() string { return "SkeletonModification2DJiggle\000" }

func (gdClass SkeletonModification2DJiggle) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DJiggle [34]gdnative.Method
func (gdClass SkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[0], target_nodepath) }
func (gdClass SkeletonModification2DJiggle) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[1]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[2], length) }
func (gdClass SkeletonModification2DJiggle) GetJiggleDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[3]) }
func (gdClass SkeletonModification2DJiggle) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[4], stiffness) }
func (gdClass SkeletonModification2DJiggle) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[5]) }
func (gdClass SkeletonModification2DJiggle) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[6], mass) }
func (gdClass SkeletonModification2DJiggle) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[7]) }
func (gdClass SkeletonModification2DJiggle) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[8], damping) }
func (gdClass SkeletonModification2DJiggle) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[9]) }
func (gdClass SkeletonModification2DJiggle) SetUseGravity(use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[10], use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetUseGravity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[11]) }
func (gdClass SkeletonModification2DJiggle) SetGravity(gravity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[12], gravity) }
func (gdClass SkeletonModification2DJiggle) GetGravity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[13]) }
func (gdClass SkeletonModification2DJiggle) SetUseColliders(use_colliders bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[14], use_colliders) }
func (gdClass SkeletonModification2DJiggle) GetUseColliders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[15]) }
func (gdClass SkeletonModification2DJiggle) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[16], collision_mask) }
func (gdClass SkeletonModification2DJiggle) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[17]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx int64, bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[18], joint_idx, bone2d_node) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[19], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[20], joint_idx, bone_idx) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[21], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[22], joint_idx, override) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[23], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[24], joint_idx, stiffness) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[25], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[26], joint_idx, mass) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[27], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[28], joint_idx, damping) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[29], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[30], joint_idx, use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[31], joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DJiggle[32], joint_idx, gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonModification2DJiggle[33], joint_idx) }

type SkeletonModification2DLookAt gdnative.Object
func (SkeletonModification2DLookAt) class() string { return "SkeletonModification2DLookAt\000" }

func (gdClass SkeletonModification2DLookAt) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DLookAt [16]gdnative.Method
func (gdClass SkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[0], bone2d_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[1]) }
func (gdClass SkeletonModification2DLookAt) SetBoneIndex(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[2], bone_idx) }
func (gdClass SkeletonModification2DLookAt) GetBoneIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[3]) }
func (gdClass SkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[4], target_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[5]) }
func (gdClass SkeletonModification2DLookAt) SetAdditionalRotation(rotation float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[6], rotation) }
func (gdClass SkeletonModification2DLookAt) GetAdditionalRotation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[7]) }
func (gdClass SkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[8], enable_constraint) }
func (gdClass SkeletonModification2DLookAt) GetEnableConstraint() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[9]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMin(angle_min float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[10], angle_min) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[11]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMax(angle_max float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[12], angle_max) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[13]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DLookAt[14], invert) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleInvert() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DLookAt[15]) }

type SkeletonModification2DPhysicalBones gdnative.Object
func (SkeletonModification2DPhysicalBones) class() string { return "SkeletonModification2DPhysicalBones\000" }

func (gdClass SkeletonModification2DPhysicalBones) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DPhysicalBones [7]gdnative.Method
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[0], length) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[1]) }
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx int64, physicalbone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[2], joint_idx, physicalbone2d_node) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[3], joint_idx) }
func (gdClass SkeletonModification2DPhysicalBones) FetchPhysicalBones()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[4]) }
func (gdClass SkeletonModification2DPhysicalBones) StartSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[5], bones) }
func (gdClass SkeletonModification2DPhysicalBones) StopSimulation(bones Array)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DPhysicalBones[6], bones) }

type SkeletonModification2DStackHolder gdnative.Object
func (SkeletonModification2DStackHolder) class() string { return "SkeletonModification2DStackHolder\000" }

func (gdClass SkeletonModification2DStackHolder) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DStackHolder [2]gdnative.Method
func (gdClass SkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DStackHolder[0], held_modification_stack) }
func (gdClass SkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D { return gdnative.Return[SkeletonModificationStack2D](gdnative.Object(gdClass), methodSkeletonModification2DStackHolder[1]) }

type SkeletonModification2DTwoBoneIK gdnative.Object
func (SkeletonModification2DTwoBoneIK) class() string { return "SkeletonModification2DTwoBoneIK\000" }

func (gdClass SkeletonModification2DTwoBoneIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D(gdClass) }

var methodSkeletonModification2DTwoBoneIK [16]gdnative.Method
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[0], target_nodepath) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[1]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[2], minimum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[3]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[4], maximum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[5]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[6], flip_direction) }
func (gdClass SkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[7]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[8], bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[9]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[10], bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[11]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[12], bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[13]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[14], bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification2DTwoBoneIK[15]) }

type SkeletonModification3D gdnative.Object
func (SkeletonModification3D) class() string { return "SkeletonModification3D\000" }

func (gdClass SkeletonModification3D) Resource() Resource { return Resource(gdClass) }

var methodSkeletonModification3D [8]gdnative.Method
func (gdClass SkeletonModification3D) virtual(val any, name string) any {	switch name {
	case "_execute":
		i, ok := val.(interface{ Execute(delta float64)  })
		if ok {
			return i.Execute
		}
	case "_setup_modification":
		i, ok := val.(interface{ SetupModification(modification_stack SkeletonModificationStack3D)  })
		if ok {
			return i.SetupModification
		}
	}
	return nil
}
func (gdClass SkeletonModification3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[0], enabled) }
func (gdClass SkeletonModification3D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3D[1]) }
func (gdClass SkeletonModification3D) GetModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeletonModification3D[2]) }
func (gdClass SkeletonModification3D) SetIsSetup(is_setup bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[3], is_setup) }
func (gdClass SkeletonModification3D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3D[4]) }
func (gdClass SkeletonModification3D) SetExecutionMode(execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3D[5], execution_mode) }
func (gdClass SkeletonModification3D) GetExecutionMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3D[6]) }
func (gdClass SkeletonModification3D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3D[7], angle, min, max, invert) }

type SkeletonModification3DCCDIK gdnative.Object
func (SkeletonModification3DCCDIK) class() string { return "SkeletonModification3DCCDIK\000" }

func (gdClass SkeletonModification3DCCDIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DCCDIK [22]gdnative.Method
func (gdClass SkeletonModification3DCCDIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[0], target_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[1]) }
func (gdClass SkeletonModification3DCCDIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[2], tip_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[3]) }
func (gdClass SkeletonModification3DCCDIK) SetUseHighQualitySolve(high_quality_solve bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[4], high_quality_solve) }
func (gdClass SkeletonModification3DCCDIK) GetUseHighQualitySolve() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[5]) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[6], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneName(joint_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[7], joint_idx, bone_name) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[8], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[9], joint_idx, bone_index) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointCcdikAxis(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[10], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointCcdikAxis(joint_idx int64, axis int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[11], joint_idx, axis) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointEnableJointConstraint(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[12], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointEnableJointConstraint(joint_idx int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[13], joint_idx, enable) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[14], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, min_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[15], joint_idx, min_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[16], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, max_angle float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[17], joint_idx, max_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintInvert(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[18], joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintInvert(joint_idx int64, invert bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[19], joint_idx, invert) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[20], length) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DCCDIK[21]) }

type SkeletonModification3DFABRIK gdnative.Object
func (SkeletonModification3DFABRIK) class() string { return "SkeletonModification3DFABRIK\000" }

func (gdClass SkeletonModification3DFABRIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DFABRIK [25]gdnative.Method
func (gdClass SkeletonModification3DFABRIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[0], target_nodepath) }
func (gdClass SkeletonModification3DFABRIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[1]) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[2], length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[3]) }
func (gdClass SkeletonModification3DFABRIK) SetChainTolerance(tolerance float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[4], tolerance) }
func (gdClass SkeletonModification3DFABRIK) GetChainTolerance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[5]) }
func (gdClass SkeletonModification3DFABRIK) SetChainMaxIterations(max_iterations int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[6], max_iterations) }
func (gdClass SkeletonModification3DFABRIK) GetChainMaxIterations() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[7]) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[8], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneName(joint_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[9], joint_idx, bone_name) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[10], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[11], joint_idx, bone_index) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointLength(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[12], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointLength(joint_idx int64, length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[13], joint_idx, length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointMagnet(joint_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[14], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointMagnet(joint_idx int64, magnet_position Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[15], joint_idx, magnet_position) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointAutoCalculateLength(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[16], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointAutoCalculateLength(joint_idx int64, auto_calculate_length bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[17], joint_idx, auto_calculate_length) }
func (gdClass SkeletonModification3DFABRIK) FabrikJointAutoCalculateLength(joint_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[18], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTipNode(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[19], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTipNode(joint_idx int64, use_tip_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[20], joint_idx, use_tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointTipNode(joint_idx int64) NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[21], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointTipNode(joint_idx int64, tip_node NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[22], joint_idx, tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTargetBasis(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[23], joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTargetBasis(joint_idx int64, use_target_basis bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DFABRIK[24], joint_idx, use_target_basis) }

type SkeletonModification3DJiggle gdnative.Object
func (SkeletonModification3DJiggle) class() string { return "SkeletonModification3DJiggle\000" }

func (gdClass SkeletonModification3DJiggle) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DJiggle [36]gdnative.Method
func (gdClass SkeletonModification3DJiggle) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[0], target_nodepath) }
func (gdClass SkeletonModification3DJiggle) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[1]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleDataChainLength(length int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[2], length) }
func (gdClass SkeletonModification3DJiggle) GetJiggleDataChainLength() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[3]) }
func (gdClass SkeletonModification3DJiggle) SetStiffness(stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[4], stiffness) }
func (gdClass SkeletonModification3DJiggle) GetStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[5]) }
func (gdClass SkeletonModification3DJiggle) SetMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[6], mass) }
func (gdClass SkeletonModification3DJiggle) GetMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[7]) }
func (gdClass SkeletonModification3DJiggle) SetDamping(damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[8], damping) }
func (gdClass SkeletonModification3DJiggle) GetDamping() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[9]) }
func (gdClass SkeletonModification3DJiggle) SetUseGravity(use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[10], use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetUseGravity() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[11]) }
func (gdClass SkeletonModification3DJiggle) SetGravity(gravity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[12], gravity) }
func (gdClass SkeletonModification3DJiggle) GetGravity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[13]) }
func (gdClass SkeletonModification3DJiggle) SetUseColliders(use_colliders bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[14], use_colliders) }
func (gdClass SkeletonModification3DJiggle) GetUseColliders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[15]) }
func (gdClass SkeletonModification3DJiggle) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[16], mask) }
func (gdClass SkeletonModification3DJiggle) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[17]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneName(joint_idx int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[18], joint_idx, name) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneName(joint_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[19], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[20], joint_idx, bone_idx) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[21], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[22], joint_idx, override) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[23], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[24], joint_idx, stiffness) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[25], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[26], joint_idx, mass) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[27], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[28], joint_idx, damping) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[29], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[30], joint_idx, use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[31], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[32], joint_idx, gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointGravity(joint_idx int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[33], joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointRoll(joint_idx int64, roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DJiggle[34], joint_idx, roll) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointRoll(joint_idx int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DJiggle[35], joint_idx) }

type SkeletonModification3DLookAt gdnative.Object
func (SkeletonModification3DLookAt) class() string { return "SkeletonModification3DLookAt\000" }

func (gdClass SkeletonModification3DLookAt) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DLookAt [12]gdnative.Method
func (gdClass SkeletonModification3DLookAt) SetBoneName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[0], name) }
func (gdClass SkeletonModification3DLookAt) GetBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[1]) }
func (gdClass SkeletonModification3DLookAt) SetBoneIndex(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[2], bone_idx) }
func (gdClass SkeletonModification3DLookAt) GetBoneIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[3]) }
func (gdClass SkeletonModification3DLookAt) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[4], target_nodepath) }
func (gdClass SkeletonModification3DLookAt) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[5]) }
func (gdClass SkeletonModification3DLookAt) SetAdditionalRotation(additional_rotation Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[6], additional_rotation) }
func (gdClass SkeletonModification3DLookAt) GetAdditionalRotation() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[7]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationToPlane(lock_to_plane bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[8], lock_to_plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationToPlane() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[9]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationPlane(plane int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DLookAt[10], plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationPlane() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DLookAt[11]) }

type SkeletonModification3DStackHolder gdnative.Object
func (SkeletonModification3DStackHolder) class() string { return "SkeletonModification3DStackHolder\000" }

func (gdClass SkeletonModification3DStackHolder) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DStackHolder [2]gdnative.Method
func (gdClass SkeletonModification3DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DStackHolder[0], held_modification_stack) }
func (gdClass SkeletonModification3DStackHolder) GetHeldModificationStack() SkeletonModificationStack3D { return gdnative.Return[SkeletonModificationStack3D](gdnative.Object(gdClass), methodSkeletonModification3DStackHolder[1]) }

type SkeletonModification3DTwoBoneIK gdnative.Object
func (SkeletonModification3DTwoBoneIK) class() string { return "SkeletonModification3DTwoBoneIK\000" }

func (gdClass SkeletonModification3DTwoBoneIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D(gdClass) }

var methodSkeletonModification3DTwoBoneIK [28]gdnative.Method
func (gdClass SkeletonModification3DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[0], target_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTargetNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[1]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUsePoleNode(use_pole_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[2], use_pole_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUsePoleNode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[3]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetPoleNode(pole_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[4], pole_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetPoleNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[5]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUseTipNode(use_tip_node bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[6], use_tip_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUseTipNode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[7]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetTipNode(tip_nodepath NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[8], tip_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTipNode() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[9]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetAutoCalculateJointLength(auto_calculate_joint_length bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[10], auto_calculate_joint_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetAutoCalculateJointLength() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[11]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[12], bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[13]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[14], bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[15]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneLength(bone_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[16], bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[17]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneName(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[18], bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[19]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[20], bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneIdx() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[21]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoLength(bone_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[22], bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[23]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneRoll(roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[24], roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneRoll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[25]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoRoll(roll float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[26], roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoRoll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModification3DTwoBoneIK[27]) }

type SkeletonModificationStack2D gdnative.Object
func (SkeletonModificationStack2D) class() string { return "SkeletonModificationStack2D\000" }

func (gdClass SkeletonModificationStack2D) Resource() Resource { return Resource(gdClass) }

var methodSkeletonModificationStack2D [15]gdnative.Method
func (gdClass SkeletonModificationStack2D) Setup()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[0]) }
func (gdClass SkeletonModificationStack2D) Execute(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[1], delta, execution_mode) }
func (gdClass SkeletonModificationStack2D) EnableAllModifications(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[2], enabled) }
func (gdClass SkeletonModificationStack2D) GetModification(mod_idx int64) SkeletonModification2D { return gdnative.Return[SkeletonModification2D](gdnative.Object(gdClass), methodSkeletonModificationStack2D[3], mod_idx) }
func (gdClass SkeletonModificationStack2D) AddModification(modification SkeletonModification2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[4], modification) }
func (gdClass SkeletonModificationStack2D) DeleteModification(mod_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[5], mod_idx) }
func (gdClass SkeletonModificationStack2D) SetModification(mod_idx int64, modification SkeletonModification2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[6], mod_idx, modification) }
func (gdClass SkeletonModificationStack2D) SetModificationCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[7], count) }
func (gdClass SkeletonModificationStack2D) GetModificationCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModificationStack2D[8]) }
func (gdClass SkeletonModificationStack2D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack2D[9]) }
func (gdClass SkeletonModificationStack2D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[10], enabled) }
func (gdClass SkeletonModificationStack2D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack2D[11]) }
func (gdClass SkeletonModificationStack2D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack2D[12], strength) }
func (gdClass SkeletonModificationStack2D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModificationStack2D[13]) }
func (gdClass SkeletonModificationStack2D) GetSkeleton() Skeleton2D { return gdnative.Return[Skeleton2D](gdnative.Object(gdClass), methodSkeletonModificationStack2D[14]) }

type SkeletonModificationStack3D gdnative.Object
func (SkeletonModificationStack3D) class() string { return "SkeletonModificationStack3D\000" }

func (gdClass SkeletonModificationStack3D) Resource() Resource { return Resource(gdClass) }

var methodSkeletonModificationStack3D [15]gdnative.Method
func (gdClass SkeletonModificationStack3D) Setup()  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[0]) }
func (gdClass SkeletonModificationStack3D) Execute(delta float64, execution_mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[1], delta, execution_mode) }
func (gdClass SkeletonModificationStack3D) EnableAllModifications(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[2], enabled) }
func (gdClass SkeletonModificationStack3D) GetModification(mod_idx int64) SkeletonModification3D { return gdnative.Return[SkeletonModification3D](gdnative.Object(gdClass), methodSkeletonModificationStack3D[3], mod_idx) }
func (gdClass SkeletonModificationStack3D) AddModification(modification SkeletonModification3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[4], modification) }
func (gdClass SkeletonModificationStack3D) DeleteModification(mod_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[5], mod_idx) }
func (gdClass SkeletonModificationStack3D) SetModification(mod_idx int64, modification SkeletonModification3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[6], mod_idx, modification) }
func (gdClass SkeletonModificationStack3D) SetModificationCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[7], count) }
func (gdClass SkeletonModificationStack3D) GetModificationCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonModificationStack3D[8]) }
func (gdClass SkeletonModificationStack3D) GetIsSetup() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack3D[9]) }
func (gdClass SkeletonModificationStack3D) SetEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[10], enabled) }
func (gdClass SkeletonModificationStack3D) GetEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSkeletonModificationStack3D[11]) }
func (gdClass SkeletonModificationStack3D) SetStrength(strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonModificationStack3D[12], strength) }
func (gdClass SkeletonModificationStack3D) GetStrength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSkeletonModificationStack3D[13]) }
func (gdClass SkeletonModificationStack3D) GetSkeleton() Skeleton3D { return gdnative.Return[Skeleton3D](gdnative.Object(gdClass), methodSkeletonModificationStack3D[14]) }

type SkeletonProfileTailDirection int64

const (
	SkeletonProfileTailDirectionAverageChildren SkeletonProfileTailDirection = 0
	SkeletonProfileTailDirectionSpecificChild SkeletonProfileTailDirection = 1
	SkeletonProfileTailDirectionEnd SkeletonProfileTailDirection = 2
)

type SkeletonProfile gdnative.Object
func (SkeletonProfile) class() string { return "SkeletonProfile\000" }

func (gdClass SkeletonProfile) Resource() Resource { return Resource(gdClass) }

var methodSkeletonProfile [27]gdnative.Method
func (gdClass SkeletonProfile) SetRootBone(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[0], bone_name) }
func (gdClass SkeletonProfile) GetRootBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[1]) }
func (gdClass SkeletonProfile) SetScaleBaseBone(bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[2], bone_name) }
func (gdClass SkeletonProfile) GetScaleBaseBone() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[3]) }
func (gdClass SkeletonProfile) SetGroupSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[4], size) }
func (gdClass SkeletonProfile) GetGroupSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[5]) }
func (gdClass SkeletonProfile) GetGroupName(group_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[6], group_idx) }
func (gdClass SkeletonProfile) SetGroupName(group_idx int64, group_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[7], group_idx, group_name) }
func (gdClass SkeletonProfile) GetTexture(group_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSkeletonProfile[8], group_idx) }
func (gdClass SkeletonProfile) SetTexture(group_idx int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[9], group_idx, texture) }
func (gdClass SkeletonProfile) SetBoneSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[10], size) }
func (gdClass SkeletonProfile) GetBoneSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[11]) }
func (gdClass SkeletonProfile) FindBone(bone_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkeletonProfile[12], bone_name) }
func (gdClass SkeletonProfile) GetBoneName(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[13], bone_idx) }
func (gdClass SkeletonProfile) SetBoneName(bone_idx int64, bone_name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[14], bone_idx, bone_name) }
func (gdClass SkeletonProfile) GetBoneParent(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[15], bone_idx) }
func (gdClass SkeletonProfile) SetBoneParent(bone_idx int64, bone_parent string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[16], bone_idx, bone_parent) }
func (gdClass SkeletonProfile) GetTailDirection(bone_idx int64) SkeletonProfileTailDirection { return gdnative.Return[SkeletonProfileTailDirection](gdnative.Object(gdClass), methodSkeletonProfile[17], bone_idx) }
func (gdClass SkeletonProfile) SetTailDirection(bone_idx int64, tail_direction SkeletonProfileTailDirection)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[18], bone_idx, tail_direction) }
func (gdClass SkeletonProfile) GetBoneTail(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[19], bone_idx) }
func (gdClass SkeletonProfile) SetBoneTail(bone_idx int64, bone_tail string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[20], bone_idx, bone_tail) }
func (gdClass SkeletonProfile) GetReferencePose(bone_idx int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkeletonProfile[21], bone_idx) }
func (gdClass SkeletonProfile) SetReferencePose(bone_idx int64, bone_name Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[22], bone_idx, bone_name) }
func (gdClass SkeletonProfile) GetHandleOffset(bone_idx int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSkeletonProfile[23], bone_idx) }
func (gdClass SkeletonProfile) SetHandleOffset(bone_idx int64, handle_offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[24], bone_idx, handle_offset) }
func (gdClass SkeletonProfile) GetGroup(bone_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkeletonProfile[25], bone_idx) }
func (gdClass SkeletonProfile) SetGroup(bone_idx int64, group string)  { gdnative.Call(gdnative.Object(gdClass), methodSkeletonProfile[26], bone_idx, group) }

type SkeletonProfileHumanoid gdnative.Object
func (SkeletonProfileHumanoid) class() string { return "SkeletonProfileHumanoid\000" }

func (gdClass SkeletonProfileHumanoid) SkeletonProfile() SkeletonProfile { return SkeletonProfile(gdClass) }


type Skin gdnative.Object
func (Skin) class() string { return "Skin\000" }

func (gdClass Skin) Resource() Resource { return Resource(gdClass) }

var methodSkin [11]gdnative.Method
func (gdClass Skin) SetBindCount(bind_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[0], bind_count) }
func (gdClass Skin) GetBindCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkin[1]) }
func (gdClass Skin) AddBind(bone int64, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[2], bone, pose) }
func (gdClass Skin) AddNamedBind(name string, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[3], name, pose) }
func (gdClass Skin) SetBindPose(bind_index int64, pose Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[4], bind_index, pose) }
func (gdClass Skin) GetBindPose(bind_index int64) Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodSkin[5], bind_index) }
func (gdClass Skin) SetBindName(bind_index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[6], bind_index, name) }
func (gdClass Skin) GetBindName(bind_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodSkin[7], bind_index) }
func (gdClass Skin) SetBindBone(bind_index int64, bone int64)  { gdnative.Call(gdnative.Object(gdClass), methodSkin[8], bind_index, bone) }
func (gdClass Skin) GetBindBone(bind_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSkin[9], bind_index) }
func (gdClass Skin) ClearBinds()  { gdnative.Call(gdnative.Object(gdClass), methodSkin[10]) }

type SkinReference gdnative.Object
func (SkinReference) class() string { return "SkinReference\000" }

func (gdClass SkinReference) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodSkinReference [2]gdnative.Method
func (gdClass SkinReference) GetSkeleton() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSkinReference[0]) }
func (gdClass SkinReference) GetSkin() Skin { return gdnative.Return[Skin](gdnative.Object(gdClass), methodSkinReference[1]) }

type SkyRadianceSize int64

const (
	SkyRadianceSize32 SkyRadianceSize = 0
	SkyRadianceSize64 SkyRadianceSize = 1
	SkyRadianceSize128 SkyRadianceSize = 2
	SkyRadianceSize256 SkyRadianceSize = 3
	SkyRadianceSize512 SkyRadianceSize = 4
	SkyRadianceSize1024 SkyRadianceSize = 5
	SkyRadianceSize2048 SkyRadianceSize = 6
	SkyRadianceSizeMax SkyRadianceSize = 7
)

type SkyProcessMode int64

const (
	SkyProcessModeAutomatic SkyProcessMode = 0
	SkyProcessModeQuality SkyProcessMode = 1
	SkyProcessModeIncremental SkyProcessMode = 2
	SkyProcessModeRealtime SkyProcessMode = 3
)

type Sky gdnative.Object
func (Sky) class() string { return "Sky\000" }

func (gdClass Sky) Resource() Resource { return Resource(gdClass) }

var methodSky [6]gdnative.Method
func (gdClass Sky) SetRadianceSize(size SkyRadianceSize)  { gdnative.Call(gdnative.Object(gdClass), methodSky[0], size) }
func (gdClass Sky) GetRadianceSize() SkyRadianceSize { return gdnative.Return[SkyRadianceSize](gdnative.Object(gdClass), methodSky[1]) }
func (gdClass Sky) SetProcessMode(mode SkyProcessMode)  { gdnative.Call(gdnative.Object(gdClass), methodSky[2], mode) }
func (gdClass Sky) GetProcessMode() SkyProcessMode { return gdnative.Return[SkyProcessMode](gdnative.Object(gdClass), methodSky[3]) }
func (gdClass Sky) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodSky[4], material) }
func (gdClass Sky) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodSky[5]) }

type Slider gdnative.Object
func (Slider) class() string { return "Slider\000" }

func (gdClass Slider) Range() Range { return Range(gdClass) }

var methodSlider [8]gdnative.Method
func (gdClass Slider) SetTicks(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[0], count) }
func (gdClass Slider) GetTicks() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSlider[1]) }
func (gdClass Slider) GetTicksOnBorders() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[2]) }
func (gdClass Slider) SetTicksOnBorders(ticks_on_border bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[3], ticks_on_border) }
func (gdClass Slider) SetEditable(editable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[4], editable) }
func (gdClass Slider) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[5]) }
func (gdClass Slider) SetScrollable(scrollable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSlider[6], scrollable) }
func (gdClass Slider) IsScrollable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSlider[7]) }

type SliderJoint3DParam int64

const (
	SliderJoint3DParamLinearLimitUpper SliderJoint3DParam = 0
	SliderJoint3DParamLinearLimitLower SliderJoint3DParam = 1
	SliderJoint3DParamLinearLimitSoftness SliderJoint3DParam = 2
	SliderJoint3DParamLinearLimitRestitution SliderJoint3DParam = 3
	SliderJoint3DParamLinearLimitDamping SliderJoint3DParam = 4
	SliderJoint3DParamLinearMotionSoftness SliderJoint3DParam = 5
	SliderJoint3DParamLinearMotionRestitution SliderJoint3DParam = 6
	SliderJoint3DParamLinearMotionDamping SliderJoint3DParam = 7
	SliderJoint3DParamLinearOrthogonalSoftness SliderJoint3DParam = 8
	SliderJoint3DParamLinearOrthogonalRestitution SliderJoint3DParam = 9
	SliderJoint3DParamLinearOrthogonalDamping SliderJoint3DParam = 10
	SliderJoint3DParamAngularLimitUpper SliderJoint3DParam = 11
	SliderJoint3DParamAngularLimitLower SliderJoint3DParam = 12
	SliderJoint3DParamAngularLimitSoftness SliderJoint3DParam = 13
	SliderJoint3DParamAngularLimitRestitution SliderJoint3DParam = 14
	SliderJoint3DParamAngularLimitDamping SliderJoint3DParam = 15
	SliderJoint3DParamAngularMotionSoftness SliderJoint3DParam = 16
	SliderJoint3DParamAngularMotionRestitution SliderJoint3DParam = 17
	SliderJoint3DParamAngularMotionDamping SliderJoint3DParam = 18
	SliderJoint3DParamAngularOrthogonalSoftness SliderJoint3DParam = 19
	SliderJoint3DParamAngularOrthogonalRestitution SliderJoint3DParam = 20
	SliderJoint3DParamAngularOrthogonalDamping SliderJoint3DParam = 21
	SliderJoint3DParamMax SliderJoint3DParam = 22
)

type SliderJoint3D gdnative.Object
func (SliderJoint3D) class() string { return "SliderJoint3D\000" }

func (gdClass SliderJoint3D) Joint3D() Joint3D { return Joint3D(gdClass) }

var methodSliderJoint3D [2]gdnative.Method
func (gdClass SliderJoint3D) SetParam(param SliderJoint3DParam, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodSliderJoint3D[0], param, value) }
func (gdClass SliderJoint3D) GetParam(param SliderJoint3DParam) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSliderJoint3D[1], param) }

type SoftDynamicBody3DDisableMode int64

const (
	SoftDynamicBody3DDisableModeRemove SoftDynamicBody3DDisableMode = 0
	SoftDynamicBody3DDisableModeKeepActive SoftDynamicBody3DDisableMode = 1
)

type SoftDynamicBody3D gdnative.Object
func (SoftDynamicBody3D) class() string { return "SoftDynamicBody3D\000" }

func (gdClass SoftDynamicBody3D) MeshInstance3D() MeshInstance3D { return MeshInstance3D(gdClass) }

var methodSoftDynamicBody3D [33]gdnative.Method
func (gdClass SoftDynamicBody3D) GetPhysicsRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodSoftDynamicBody3D[0]) }
func (gdClass SoftDynamicBody3D) SetCollisionMask(collision_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[1], collision_mask) }
func (gdClass SoftDynamicBody3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[2]) }
func (gdClass SoftDynamicBody3D) SetCollisionLayer(collision_layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[3], collision_layer) }
func (gdClass SoftDynamicBody3D) GetCollisionLayer() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[4]) }
func (gdClass SoftDynamicBody3D) SetCollisionMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[5], layer_number, value) }
func (gdClass SoftDynamicBody3D) GetCollisionMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[6], layer_number) }
func (gdClass SoftDynamicBody3D) SetCollisionLayerValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[7], layer_number, value) }
func (gdClass SoftDynamicBody3D) GetCollisionLayerValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[8], layer_number) }
func (gdClass SoftDynamicBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[9], parent_collision_ignore) }
func (gdClass SoftDynamicBody3D) GetParentCollisionIgnore() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodSoftDynamicBody3D[10]) }
func (gdClass SoftDynamicBody3D) SetDisableMode(mode SoftDynamicBody3DDisableMode)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[11], mode) }
func (gdClass SoftDynamicBody3D) GetDisableMode() SoftDynamicBody3DDisableMode { return gdnative.Return[SoftDynamicBody3DDisableMode](gdnative.Object(gdClass), methodSoftDynamicBody3D[12]) }
func (gdClass SoftDynamicBody3D) GetCollisionExceptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSoftDynamicBody3D[13]) }
func (gdClass SoftDynamicBody3D) AddCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[14], body) }
func (gdClass SoftDynamicBody3D) RemoveCollisionExceptionWith(body Node)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[15], body) }
func (gdClass SoftDynamicBody3D) SetSimulationPrecision(simulation_precision int64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[16], simulation_precision) }
func (gdClass SoftDynamicBody3D) GetSimulationPrecision() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSoftDynamicBody3D[17]) }
func (gdClass SoftDynamicBody3D) SetTotalMass(mass float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[18], mass) }
func (gdClass SoftDynamicBody3D) GetTotalMass() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[19]) }
func (gdClass SoftDynamicBody3D) SetLinearStiffness(linear_stiffness float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[20], linear_stiffness) }
func (gdClass SoftDynamicBody3D) GetLinearStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[21]) }
func (gdClass SoftDynamicBody3D) SetPressureCoefficient(pressure_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[22], pressure_coefficient) }
func (gdClass SoftDynamicBody3D) GetPressureCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[23]) }
func (gdClass SoftDynamicBody3D) SetDampingCoefficient(damping_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[24], damping_coefficient) }
func (gdClass SoftDynamicBody3D) GetDampingCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[25]) }
func (gdClass SoftDynamicBody3D) SetDragCoefficient(drag_coefficient float64)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[26], drag_coefficient) }
func (gdClass SoftDynamicBody3D) GetDragCoefficient() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSoftDynamicBody3D[27]) }
func (gdClass SoftDynamicBody3D) GetPointTransform(point_index int64) Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodSoftDynamicBody3D[28], point_index) }
func (gdClass SoftDynamicBody3D) SetPointPinned(point_index int64, pinned bool, attachment_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[29], point_index, pinned, attachment_path) }
func (gdClass SoftDynamicBody3D) IsPointPinned(point_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[30], point_index) }
func (gdClass SoftDynamicBody3D) SetRayPickable(ray_pickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSoftDynamicBody3D[31], ray_pickable) }
func (gdClass SoftDynamicBody3D) IsRayPickable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSoftDynamicBody3D[32]) }

type SphereMesh gdnative.Object
func (SphereMesh) class() string { return "SphereMesh\000" }

func (gdClass SphereMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodSphereMesh [10]gdnative.Method
func (gdClass SphereMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[0], radius) }
func (gdClass SphereMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereMesh[1]) }
func (gdClass SphereMesh) SetHeight(height float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[2], height) }
func (gdClass SphereMesh) GetHeight() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereMesh[3]) }
func (gdClass SphereMesh) SetRadialSegments(radial_segments int64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[4], radial_segments) }
func (gdClass SphereMesh) GetRadialSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSphereMesh[5]) }
func (gdClass SphereMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[6], rings) }
func (gdClass SphereMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSphereMesh[7]) }
func (gdClass SphereMesh) SetIsHemisphere(is_hemisphere bool)  { gdnative.Call(gdnative.Object(gdClass), methodSphereMesh[8], is_hemisphere) }
func (gdClass SphereMesh) GetIsHemisphere() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSphereMesh[9]) }

type SphereOccluder3D gdnative.Object
func (SphereOccluder3D) class() string { return "SphereOccluder3D\000" }

func (gdClass SphereOccluder3D) Occluder3D() Occluder3D { return Occluder3D(gdClass) }

var methodSphereOccluder3D [2]gdnative.Method
func (gdClass SphereOccluder3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereOccluder3D[0], radius) }
func (gdClass SphereOccluder3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereOccluder3D[1]) }

type SphereShape3D gdnative.Object
func (SphereShape3D) class() string { return "SphereShape3D\000" }

func (gdClass SphereShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodSphereShape3D [2]gdnative.Method
func (gdClass SphereShape3D) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodSphereShape3D[0], radius) }
func (gdClass SphereShape3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSphereShape3D[1]) }

type SpinBox gdnative.Object
func (SpinBox) class() string { return "SpinBox\000" }

func (gdClass SpinBox) Range() Range { return Range(gdClass) }

var methodSpinBox [14]gdnative.Method
func (gdClass SpinBox) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[0], alignment) }
func (gdClass SpinBox) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodSpinBox[1]) }
func (gdClass SpinBox) SetSuffix(suffix string)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[2], suffix) }
func (gdClass SpinBox) GetSuffix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSpinBox[3]) }
func (gdClass SpinBox) SetPrefix(prefix string)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[4], prefix) }
func (gdClass SpinBox) GetPrefix() string { return gdnative.Return[string](gdnative.Object(gdClass), methodSpinBox[5]) }
func (gdClass SpinBox) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[6], enabled) }
func (gdClass SpinBox) SetCustomArrowStep(arrow_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[7], arrow_step) }
func (gdClass SpinBox) GetCustomArrowStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpinBox[8]) }
func (gdClass SpinBox) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpinBox[9]) }
func (gdClass SpinBox) SetUpdateOnTextChanged(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[10], enabled) }
func (gdClass SpinBox) GetUpdateOnTextChanged() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpinBox[11]) }
func (gdClass SpinBox) Apply()  { gdnative.Call(gdnative.Object(gdClass), methodSpinBox[12]) }
func (gdClass SpinBox) GetLineEdit() LineEdit { return gdnative.Return[LineEdit](gdnative.Object(gdClass), methodSpinBox[13]) }

type SplitContainerDraggerVisibility int64

const (
	SplitContainerDraggerVisible SplitContainerDraggerVisibility = 0
	SplitContainerDraggerHidden SplitContainerDraggerVisibility = 1
	SplitContainerDraggerHiddenCollapsed SplitContainerDraggerVisibility = 2
)

type SplitContainer gdnative.Object
func (SplitContainer) class() string { return "SplitContainer\000" }

func (gdClass SplitContainer) Container() Container { return Container(gdClass) }

var methodSplitContainer [7]gdnative.Method
func (gdClass SplitContainer) SetSplitOffset(offset int64)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[0], offset) }
func (gdClass SplitContainer) GetSplitOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSplitContainer[1]) }
func (gdClass SplitContainer) ClampSplitOffset()  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[2]) }
func (gdClass SplitContainer) SetCollapsed(collapsed bool)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[3], collapsed) }
func (gdClass SplitContainer) IsCollapsed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSplitContainer[4]) }
func (gdClass SplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility)  { gdnative.Call(gdnative.Object(gdClass), methodSplitContainer[5], mode) }
func (gdClass SplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility { return gdnative.Return[SplitContainerDraggerVisibility](gdnative.Object(gdClass), methodSplitContainer[6]) }

type SpotLight3D gdnative.Object
func (SpotLight3D) class() string { return "SpotLight3D\000" }

func (gdClass SpotLight3D) Light3D() Light3D { return Light3D(gdClass) }


type SpringArm3D gdnative.Object
func (SpringArm3D) class() string { return "SpringArm3D\000" }

func (gdClass SpringArm3D) Node3D() Node3D { return Node3D(gdClass) }

var methodSpringArm3D [12]gdnative.Method
func (gdClass SpringArm3D) GetHitLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[0]) }
func (gdClass SpringArm3D) SetLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[1], length) }
func (gdClass SpringArm3D) GetLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[2]) }
func (gdClass SpringArm3D) SetShape(shape Shape3D)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[3], shape) }
func (gdClass SpringArm3D) GetShape() Shape3D { return gdnative.Return[Shape3D](gdnative.Object(gdClass), methodSpringArm3D[4]) }
func (gdClass SpringArm3D) AddExcludedObject(RID RID)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[5], RID) }
func (gdClass SpringArm3D) RemoveExcludedObject(RID RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpringArm3D[6], RID) }
func (gdClass SpringArm3D) ClearExcludedObjects()  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[7]) }
func (gdClass SpringArm3D) SetCollisionMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[8], mask) }
func (gdClass SpringArm3D) GetCollisionMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpringArm3D[9]) }
func (gdClass SpringArm3D) SetMargin(margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpringArm3D[10], margin) }
func (gdClass SpringArm3D) GetMargin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpringArm3D[11]) }

type Sprite2D gdnative.Object
func (Sprite2D) class() string { return "Sprite2D\000" }

func (gdClass Sprite2D) Node2D() Node2D { return Node2D(gdClass) }

var methodSprite2D [26]gdnative.Method
func (gdClass Sprite2D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[0], texture) }
func (gdClass Sprite2D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSprite2D[1]) }
func (gdClass Sprite2D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[2], centered) }
func (gdClass Sprite2D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[3]) }
func (gdClass Sprite2D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[4], offset) }
func (gdClass Sprite2D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSprite2D[5]) }
func (gdClass Sprite2D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[6], flip_h) }
func (gdClass Sprite2D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[7]) }
func (gdClass Sprite2D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[8], flip_v) }
func (gdClass Sprite2D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[9]) }
func (gdClass Sprite2D) SetRegionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[10], enabled) }
func (gdClass Sprite2D) IsRegionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[11]) }
func (gdClass Sprite2D) IsPixelOpaque(pos Vector2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[12], pos) }
func (gdClass Sprite2D) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[13], rect) }
func (gdClass Sprite2D) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite2D[14]) }
func (gdClass Sprite2D) SetRegionFilterClipEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[15], enabled) }
func (gdClass Sprite2D) IsRegionFilterClipEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite2D[16]) }
func (gdClass Sprite2D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[17], frame) }
func (gdClass Sprite2D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[18]) }
func (gdClass Sprite2D) SetFrameCoords(coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[19], coords) }
func (gdClass Sprite2D) GetFrameCoords() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSprite2D[20]) }
func (gdClass Sprite2D) SetVframes(vframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[21], vframes) }
func (gdClass Sprite2D) GetVframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[22]) }
func (gdClass Sprite2D) SetHframes(hframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite2D[23], hframes) }
func (gdClass Sprite2D) GetHframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite2D[24]) }
func (gdClass Sprite2D) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite2D[25]) }

type Sprite3D gdnative.Object
func (Sprite3D) class() string { return "Sprite3D\000" }

func (gdClass Sprite3D) SpriteBase3D() SpriteBase3D { return SpriteBase3D(gdClass) }

var methodSprite3D [14]gdnative.Method
func (gdClass Sprite3D) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[0], texture) }
func (gdClass Sprite3D) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSprite3D[1]) }
func (gdClass Sprite3D) SetRegionEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[2], enabled) }
func (gdClass Sprite3D) IsRegionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSprite3D[3]) }
func (gdClass Sprite3D) SetRegionRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[4], rect) }
func (gdClass Sprite3D) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSprite3D[5]) }
func (gdClass Sprite3D) SetFrame(frame int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[6], frame) }
func (gdClass Sprite3D) GetFrame() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[7]) }
func (gdClass Sprite3D) SetFrameCoords(coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[8], coords) }
func (gdClass Sprite3D) GetFrameCoords() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSprite3D[9]) }
func (gdClass Sprite3D) SetVframes(vframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[10], vframes) }
func (gdClass Sprite3D) GetVframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[11]) }
func (gdClass Sprite3D) SetHframes(hframes int64)  { gdnative.Call(gdnative.Object(gdClass), methodSprite3D[12], hframes) }
func (gdClass Sprite3D) GetHframes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSprite3D[13]) }

type SpriteBase3DDrawFlags int64

const (
	SpriteBase3DFlagTransparent SpriteBase3DDrawFlags = 0
	SpriteBase3DFlagShaded SpriteBase3DDrawFlags = 1
	SpriteBase3DFlagDoubleSided SpriteBase3DDrawFlags = 2
	SpriteBase3DFlagDisableDepthTest SpriteBase3DDrawFlags = 3
	SpriteBase3DFlagFixedSize SpriteBase3DDrawFlags = 4
	SpriteBase3DFlagMax SpriteBase3DDrawFlags = 5
)

type SpriteBase3DAlphaCutMode int64

const (
	SpriteBase3DAlphaCutDisabled SpriteBase3DAlphaCutMode = 0
	SpriteBase3DAlphaCutDiscard SpriteBase3DAlphaCutMode = 1
	SpriteBase3DAlphaCutOpaquePrepass SpriteBase3DAlphaCutMode = 2
)

type SpriteBase3D gdnative.Object
func (SpriteBase3D) class() string { return "SpriteBase3D\000" }

func (gdClass SpriteBase3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D(gdClass) }

var methodSpriteBase3D [26]gdnative.Method
func (gdClass SpriteBase3D) SetCentered(centered bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[0], centered) }
func (gdClass SpriteBase3D) IsCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[1]) }
func (gdClass SpriteBase3D) SetOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[2], offset) }
func (gdClass SpriteBase3D) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodSpriteBase3D[3]) }
func (gdClass SpriteBase3D) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[4], flip_h) }
func (gdClass SpriteBase3D) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[5]) }
func (gdClass SpriteBase3D) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[6], flip_v) }
func (gdClass SpriteBase3D) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[7]) }
func (gdClass SpriteBase3D) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[8], modulate) }
func (gdClass SpriteBase3D) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodSpriteBase3D[9]) }
func (gdClass SpriteBase3D) SetRenderPriority(priority int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[10], priority) }
func (gdClass SpriteBase3D) GetRenderPriority() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpriteBase3D[11]) }
func (gdClass SpriteBase3D) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[12], pixel_size) }
func (gdClass SpriteBase3D) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpriteBase3D[13]) }
func (gdClass SpriteBase3D) SetAxis(axis Vector3Axis)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[14], axis) }
func (gdClass SpriteBase3D) GetAxis() Vector3Axis { return gdnative.Return[Vector3Axis](gdnative.Object(gdClass), methodSpriteBase3D[15]) }
func (gdClass SpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[16], flag, enabled) }
func (gdClass SpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteBase3D[17], flag) }
func (gdClass SpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[18], mode) }
func (gdClass SpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode { return gdnative.Return[SpriteBase3DAlphaCutMode](gdnative.Object(gdClass), methodSpriteBase3D[19]) }
func (gdClass SpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[20], mode) }
func (gdClass SpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode { return gdnative.Return[BaseMaterial3DBillboardMode](gdnative.Object(gdClass), methodSpriteBase3D[21]) }
func (gdClass SpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteBase3D[22], mode) }
func (gdClass SpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter { return gdnative.Return[BaseMaterial3DTextureFilter](gdnative.Object(gdClass), methodSpriteBase3D[23]) }
func (gdClass SpriteBase3D) GetItemRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodSpriteBase3D[24]) }
func (gdClass SpriteBase3D) GenerateTriangleMesh() TriangleMesh { return gdnative.Return[TriangleMesh](gdnative.Object(gdClass), methodSpriteBase3D[25]) }

type SpriteFrames gdnative.Object
func (SpriteFrames) class() string { return "SpriteFrames\000" }

func (gdClass SpriteFrames) Resource() Resource { return Resource(gdClass) }

var methodSpriteFrames [16]gdnative.Method
func (gdClass SpriteFrames) AddAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[0], anim) }
func (gdClass SpriteFrames) HasAnimation(anim string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteFrames[1], anim) }
func (gdClass SpriteFrames) RemoveAnimation(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[2], anim) }
func (gdClass SpriteFrames) RenameAnimation(anim string, newname string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[3], anim, newname) }
func (gdClass SpriteFrames) GetAnimationNames() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSpriteFrames[4]) }
func (gdClass SpriteFrames) SetAnimationSpeed(anim string, speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[5], anim, speed) }
func (gdClass SpriteFrames) GetAnimationSpeed(anim string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSpriteFrames[6], anim) }
func (gdClass SpriteFrames) SetAnimationLoop(anim string, loop bool)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[7], anim, loop) }
func (gdClass SpriteFrames) GetAnimationLoop(anim string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSpriteFrames[8], anim) }
func (gdClass SpriteFrames) AddFrame(anim string, frame Texture2D, at_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[9], anim, frame, at_position) }
func (gdClass SpriteFrames) GetFrameCount(anim string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSpriteFrames[10], anim) }
func (gdClass SpriteFrames) GetFrame(anim string, idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodSpriteFrames[11], anim, idx) }
func (gdClass SpriteFrames) SetFrame(anim string, idx int64, txt Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[12], anim, idx, txt) }
func (gdClass SpriteFrames) RemoveFrame(anim string, idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[13], anim, idx) }
func (gdClass SpriteFrames) Clear(anim string)  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[14], anim) }
func (gdClass SpriteFrames) ClearAll()  { gdnative.Call(gdnative.Object(gdClass), methodSpriteFrames[15]) }

type StandardMaterial3D gdnative.Object
func (StandardMaterial3D) class() string { return "StandardMaterial3D\000" }

func (gdClass StandardMaterial3D) BaseMaterial3D() BaseMaterial3D { return BaseMaterial3D(gdClass) }


type StaticBody2D gdnative.Object
func (StaticBody2D) class() string { return "StaticBody2D\000" }

func (gdClass StaticBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D(gdClass) }

var methodStaticBody2D [6]gdnative.Method
func (gdClass StaticBody2D) SetConstantLinearVelocity(vel Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[0], vel) }
func (gdClass StaticBody2D) SetConstantAngularVelocity(vel float64)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[1], vel) }
func (gdClass StaticBody2D) GetConstantLinearVelocity() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStaticBody2D[2]) }
func (gdClass StaticBody2D) GetConstantAngularVelocity() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStaticBody2D[3]) }
func (gdClass StaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody2D[4], physics_material_override) }
func (gdClass StaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodStaticBody2D[5]) }

type StaticBody3D gdnative.Object
func (StaticBody3D) class() string { return "StaticBody3D\000" }

func (gdClass StaticBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D(gdClass) }

var methodStaticBody3D [6]gdnative.Method
func (gdClass StaticBody3D) SetConstantLinearVelocity(vel Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[0], vel) }
func (gdClass StaticBody3D) SetConstantAngularVelocity(vel Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[1], vel) }
func (gdClass StaticBody3D) GetConstantLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodStaticBody3D[2]) }
func (gdClass StaticBody3D) GetConstantAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodStaticBody3D[3]) }
func (gdClass StaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodStaticBody3D[4], physics_material_override) }
func (gdClass StaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodStaticBody3D[5]) }

type StreamPeer gdnative.Object
func (StreamPeer) class() string { return "StreamPeer\000" }

func (gdClass StreamPeer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodStreamPeer [33]gdnative.Method
func (gdClass StreamPeer) PutData(data []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeer[0], data) }
func (gdClass StreamPeer) PutPartialData(data []byte) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[1], data) }
func (gdClass StreamPeer) GetData(bytes int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[2], bytes) }
func (gdClass StreamPeer) GetPartialData(bytes int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodStreamPeer[3], bytes) }
func (gdClass StreamPeer) GetAvailableBytes() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[4]) }
func (gdClass StreamPeer) SetBigEndian(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[5], enable) }
func (gdClass StreamPeer) IsBigEndianEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStreamPeer[6]) }
func (gdClass StreamPeer) Put8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[7], value) }
func (gdClass StreamPeer) PutU8(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[8], value) }
func (gdClass StreamPeer) Put16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[9], value) }
func (gdClass StreamPeer) PutU16(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[10], value) }
func (gdClass StreamPeer) Put32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[11], value) }
func (gdClass StreamPeer) PutU32(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[12], value) }
func (gdClass StreamPeer) Put64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[13], value) }
func (gdClass StreamPeer) PutU64(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[14], value) }
func (gdClass StreamPeer) PutFloat(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[15], value) }
func (gdClass StreamPeer) PutDouble(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[16], value) }
func (gdClass StreamPeer) PutString(value string)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[17], value) }
func (gdClass StreamPeer) PutUtf8String(value string)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[18], value) }
func (gdClass StreamPeer) PutVar(value any, full_objects bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeer[19], value, full_objects) }
func (gdClass StreamPeer) Get8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[20]) }
func (gdClass StreamPeer) GetU8() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[21]) }
func (gdClass StreamPeer) Get16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[22]) }
func (gdClass StreamPeer) GetU16() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[23]) }
func (gdClass StreamPeer) Get32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[24]) }
func (gdClass StreamPeer) GetU32() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[25]) }
func (gdClass StreamPeer) Get64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[26]) }
func (gdClass StreamPeer) GetU64() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeer[27]) }
func (gdClass StreamPeer) GetFloat() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStreamPeer[28]) }
func (gdClass StreamPeer) GetDouble() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStreamPeer[29]) }
func (gdClass StreamPeer) GetString(bytes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeer[30], bytes) }
func (gdClass StreamPeer) GetUtf8String(bytes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeer[31], bytes) }
func (gdClass StreamPeer) GetVar(allow_objects bool) any { return gdnative.Return[any](gdnative.Object(gdClass), methodStreamPeer[32], allow_objects) }

type StreamPeerBuffer gdnative.Object
func (StreamPeerBuffer) class() string { return "StreamPeerBuffer\000" }

func (gdClass StreamPeerBuffer) StreamPeer() StreamPeer { return StreamPeer(gdClass) }

var methodStreamPeerBuffer [8]gdnative.Method
func (gdClass StreamPeerBuffer) Seek(position int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[0], position) }
func (gdClass StreamPeerBuffer) GetSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerBuffer[1]) }
func (gdClass StreamPeerBuffer) GetPosition() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerBuffer[2]) }
func (gdClass StreamPeerBuffer) Resize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[3], size) }
func (gdClass StreamPeerBuffer) SetDataArray(data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[4], data) }
func (gdClass StreamPeerBuffer) GetDataArray() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodStreamPeerBuffer[5]) }
func (gdClass StreamPeerBuffer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerBuffer[6]) }
func (gdClass StreamPeerBuffer) Duplicate() StreamPeerBuffer { return gdnative.Return[StreamPeerBuffer](gdnative.Object(gdClass), methodStreamPeerBuffer[7]) }

type StreamPeerExtension gdnative.Object
func (StreamPeerExtension) class() string { return "StreamPeerExtension\000" }

func (gdClass StreamPeerExtension) StreamPeer() StreamPeer { return StreamPeer(gdClass) }

func (gdClass StreamPeerExtension) virtual(val any, name string) any {	switch name {
	case "_get_data":
		i, ok := val.(interface{ GetData(r_buffer []byte, r_bytes int64, r_received *int32) int64 })
		if ok {
			return i.GetData
		}
	case "_get_partial_data":
		i, ok := val.(interface{ GetPartialData(r_buffer []byte, r_bytes int64, r_received *int32) int64 })
		if ok {
			return i.GetPartialData
		}
	case "_put_data":
		i, ok := val.(interface{ PutData(p_data []byte, p_bytes int64, r_sent *int32) int64 })
		if ok {
			return i.PutData
		}
	case "_put_partial_data":
		i, ok := val.(interface{ PutPartialData(p_data []byte, p_bytes int64, r_sent *int32) int64 })
		if ok {
			return i.PutPartialData
		}
	case "_get_available_bytes":
		i, ok := val.(interface{ GetAvailableBytes() int64 })
		if ok {
			return i.GetAvailableBytes
		}
	}
	return nil
}

type StreamPeerSSLStatus int64

const (
	StreamPeerSSLStatusDisconnected StreamPeerSSLStatus = 0
	StreamPeerSSLStatusHandshaking StreamPeerSSLStatus = 1
	StreamPeerSSLStatusConnected StreamPeerSSLStatus = 2
	StreamPeerSSLStatusError StreamPeerSSLStatus = 3
	StreamPeerSSLStatusErrorHostnameMismatch StreamPeerSSLStatus = 4
)

type StreamPeerSSL gdnative.Object
func (StreamPeerSSL) class() string { return "StreamPeerSSL\000" }

func (gdClass StreamPeerSSL) StreamPeer() StreamPeer { return StreamPeer(gdClass) }

var methodStreamPeerSSL [8]gdnative.Method
func (gdClass StreamPeerSSL) Poll()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[0]) }
func (gdClass StreamPeerSSL) AcceptStream(stream StreamPeer, private_key CryptoKey, certificate X509Certificate, chain X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerSSL[1], stream, private_key, certificate, chain) }
func (gdClass StreamPeerSSL) ConnectToStream(stream StreamPeer, validate_certs bool, for_hostname string, valid_certificate X509Certificate) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerSSL[2], stream, validate_certs, for_hostname, valid_certificate) }
func (gdClass StreamPeerSSL) GetStatus() StreamPeerSSLStatus { return gdnative.Return[StreamPeerSSLStatus](gdnative.Object(gdClass), methodStreamPeerSSL[3]) }
func (gdClass StreamPeerSSL) GetStream() StreamPeer { return gdnative.Return[StreamPeer](gdnative.Object(gdClass), methodStreamPeerSSL[4]) }
func (gdClass StreamPeerSSL) DisconnectFromStream()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[5]) }
func (gdClass StreamPeerSSL) SetBlockingHandshakeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerSSL[6], enabled) }
func (gdClass StreamPeerSSL) IsBlockingHandshakeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStreamPeerSSL[7]) }

type StreamPeerTCPStatus int64

const (
	StreamPeerTCPStatusNone StreamPeerTCPStatus = 0
	StreamPeerTCPStatusConnecting StreamPeerTCPStatus = 1
	StreamPeerTCPStatusConnected StreamPeerTCPStatus = 2
	StreamPeerTCPStatusError StreamPeerTCPStatus = 3
)

type StreamPeerTCP gdnative.Object
func (StreamPeerTCP) class() string { return "StreamPeerTCP\000" }

func (gdClass StreamPeerTCP) StreamPeer() StreamPeer { return StreamPeer(gdClass) }

var methodStreamPeerTCP [9]gdnative.Method
func (gdClass StreamPeerTCP) Bind(port int64, host string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[0], port, host) }
func (gdClass StreamPeerTCP) ConnectToHost(host string, port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[1], host, port) }
func (gdClass StreamPeerTCP) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodStreamPeerTCP[2]) }
func (gdClass StreamPeerTCP) GetStatus() StreamPeerTCPStatus { return gdnative.Return[StreamPeerTCPStatus](gdnative.Object(gdClass), methodStreamPeerTCP[3]) }
func (gdClass StreamPeerTCP) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodStreamPeerTCP[4]) }
func (gdClass StreamPeerTCP) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerTCP[5]) }
func (gdClass StreamPeerTCP) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStreamPeerTCP[6]) }
func (gdClass StreamPeerTCP) DisconnectFromHost()  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerTCP[7]) }
func (gdClass StreamPeerTCP) SetNoDelay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodStreamPeerTCP[8], enabled) }

type StyleBox gdnative.Object
func (StyleBox) class() string { return "StyleBox\000" }

func (gdClass StyleBox) Resource() Resource { return Resource(gdClass) }

var methodStyleBox [9]gdnative.Method
func (gdClass StyleBox) virtual(val any, name string) any {	switch name {
	case "_get_style_margin":
		i, ok := val.(interface{ GetStyleMargin(side Side) float64 })
		if ok {
			return i.GetStyleMargin
		}
	case "_test_mask":
		i, ok := val.(interface{ TestMask(point Vector2, rect Rect2) bool })
		if ok {
			return i.TestMask
		}
	case "_get_center_size":
		i, ok := val.(interface{ GetCenterSize() Vector2 })
		if ok {
			return i.GetCenterSize
		}
	case "_get_draw_rect":
		i, ok := val.(interface{ GetDrawRect(rect Rect2) Rect2 })
		if ok {
			return i.GetDrawRect
		}
	case "_draw":
		i, ok := val.(interface{ Draw(to_canvas_item RID, rect Rect2)  })
		if ok {
			return i.Draw
		}
	}
	return nil
}
func (gdClass StyleBox) TestMask(point Vector2, rect Rect2) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBox[0], point, rect) }
func (gdClass StyleBox) SetDefaultMargin(margin Side, offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBox[1], margin, offset) }
func (gdClass StyleBox) GetDefaultMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBox[2], margin) }
func (gdClass StyleBox) GetMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBox[3], margin) }
func (gdClass StyleBox) GetMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[4]) }
func (gdClass StyleBox) GetCenterSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[5]) }
func (gdClass StyleBox) GetOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBox[6]) }
func (gdClass StyleBox) GetCurrentItemDrawn() CanvasItem { return gdnative.Return[CanvasItem](gdnative.Object(gdClass), methodStyleBox[7]) }
func (gdClass StyleBox) Draw(canvas_item RID, rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBox[8], canvas_item, rect) }

type StyleBoxEmpty gdnative.Object
func (StyleBoxEmpty) class() string { return "StyleBoxEmpty\000" }

func (gdClass StyleBoxEmpty) StyleBox() StyleBox { return StyleBox(gdClass) }


type StyleBoxFlat gdnative.Object
func (StyleBoxFlat) class() string { return "StyleBoxFlat\000" }

func (gdClass StyleBoxFlat) StyleBox() StyleBox { return StyleBox(gdClass) }

var methodStyleBoxFlat [34]gdnative.Method
func (gdClass StyleBoxFlat) SetBgColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[0], color) }
func (gdClass StyleBoxFlat) GetBgColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[1]) }
func (gdClass StyleBoxFlat) SetBorderColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[2], color) }
func (gdClass StyleBoxFlat) GetBorderColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[3]) }
func (gdClass StyleBoxFlat) SetBorderWidthAll(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[4], width) }
func (gdClass StyleBoxFlat) GetBorderWidthMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[5]) }
func (gdClass StyleBoxFlat) SetBorderWidth(margin Side, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[6], margin, width) }
func (gdClass StyleBoxFlat) GetBorderWidth(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[7], margin) }
func (gdClass StyleBoxFlat) SetBorderBlend(blend bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[8], blend) }
func (gdClass StyleBoxFlat) GetBorderBlend() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[9]) }
func (gdClass StyleBoxFlat) SetCornerRadiusIndividual(radius_top_left int64, radius_top_right int64, radius_bottom_right int64, radius_bottom_left int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[10], radius_top_left, radius_top_right, radius_bottom_right, radius_bottom_left) }
func (gdClass StyleBoxFlat) SetCornerRadiusAll(radius int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[11], radius) }
func (gdClass StyleBoxFlat) SetCornerRadius(corner Corner, radius int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[12], corner, radius) }
func (gdClass StyleBoxFlat) GetCornerRadius(corner Corner) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[13], corner) }
func (gdClass StyleBoxFlat) SetExpandMargin(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[14], margin, size) }
func (gdClass StyleBoxFlat) SetExpandMarginAll(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[15], size) }
func (gdClass StyleBoxFlat) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[16], size_left, size_top, size_right, size_bottom) }
func (gdClass StyleBoxFlat) GetExpandMargin(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxFlat[17], margin) }
func (gdClass StyleBoxFlat) SetDrawCenter(draw_center bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[18], draw_center) }
func (gdClass StyleBoxFlat) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[19]) }
func (gdClass StyleBoxFlat) SetSkew(skew Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[20], skew) }
func (gdClass StyleBoxFlat) GetSkew() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBoxFlat[21]) }
func (gdClass StyleBoxFlat) SetShadowColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[22], color) }
func (gdClass StyleBoxFlat) GetShadowColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxFlat[23]) }
func (gdClass StyleBoxFlat) SetShadowSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[24], size) }
func (gdClass StyleBoxFlat) GetShadowSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[25]) }
func (gdClass StyleBoxFlat) SetShadowOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[26], offset) }
func (gdClass StyleBoxFlat) GetShadowOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodStyleBoxFlat[27]) }
func (gdClass StyleBoxFlat) SetAntiAliased(anti_aliased bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[28], anti_aliased) }
func (gdClass StyleBoxFlat) IsAntiAliased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxFlat[29]) }
func (gdClass StyleBoxFlat) SetAaSize(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[30], size) }
func (gdClass StyleBoxFlat) GetAaSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxFlat[31]) }
func (gdClass StyleBoxFlat) SetCornerDetail(detail int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxFlat[32], detail) }
func (gdClass StyleBoxFlat) GetCornerDetail() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxFlat[33]) }

type StyleBoxLine gdnative.Object
func (StyleBoxLine) class() string { return "StyleBoxLine\000" }

func (gdClass StyleBoxLine) StyleBox() StyleBox { return StyleBox(gdClass) }

var methodStyleBoxLine [10]gdnative.Method
func (gdClass StyleBoxLine) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[0], color) }
func (gdClass StyleBoxLine) GetColor() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxLine[1]) }
func (gdClass StyleBoxLine) SetThickness(thickness int64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[2], thickness) }
func (gdClass StyleBoxLine) GetThickness() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodStyleBoxLine[3]) }
func (gdClass StyleBoxLine) SetGrowBegin(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[4], offset) }
func (gdClass StyleBoxLine) GetGrowBegin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxLine[5]) }
func (gdClass StyleBoxLine) SetGrowEnd(offset float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[6], offset) }
func (gdClass StyleBoxLine) GetGrowEnd() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxLine[7]) }
func (gdClass StyleBoxLine) SetVertical(vertical bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxLine[8], vertical) }
func (gdClass StyleBoxLine) IsVertical() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxLine[9]) }

type StyleBoxTextureAxisStretchMode int64

const (
	StyleBoxTextureAxisStretchModeStretch StyleBoxTextureAxisStretchMode = 0
	StyleBoxTextureAxisStretchModeTile StyleBoxTextureAxisStretchMode = 1
	StyleBoxTextureAxisStretchModeTileFit StyleBoxTextureAxisStretchMode = 2
)

type StyleBoxTexture gdnative.Object
func (StyleBoxTexture) class() string { return "StyleBoxTexture\000" }

func (gdClass StyleBoxTexture) StyleBox() StyleBox { return StyleBox(gdClass) }

var methodStyleBoxTexture [18]gdnative.Method
func (gdClass StyleBoxTexture) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[0], texture) }
func (gdClass StyleBoxTexture) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodStyleBoxTexture[1]) }
func (gdClass StyleBoxTexture) SetMarginSize(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[2], margin, size) }
func (gdClass StyleBoxTexture) GetMarginSize(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxTexture[3], margin) }
func (gdClass StyleBoxTexture) SetExpandMarginSize(margin Side, size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[4], margin, size) }
func (gdClass StyleBoxTexture) SetExpandMarginAll(size float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[5], size) }
func (gdClass StyleBoxTexture) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[6], size_left, size_top, size_right, size_bottom) }
func (gdClass StyleBoxTexture) GetExpandMarginSize(margin Side) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodStyleBoxTexture[7], margin) }
func (gdClass StyleBoxTexture) SetRegionRect(region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[8], region) }
func (gdClass StyleBoxTexture) GetRegionRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodStyleBoxTexture[9]) }
func (gdClass StyleBoxTexture) SetDrawCenter(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[10], enable) }
func (gdClass StyleBoxTexture) IsDrawCenterEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodStyleBoxTexture[11]) }
func (gdClass StyleBoxTexture) SetModulate(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[12], color) }
func (gdClass StyleBoxTexture) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodStyleBoxTexture[13]) }
func (gdClass StyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[14], mode) }
func (gdClass StyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode { return gdnative.Return[StyleBoxTextureAxisStretchMode](gdnative.Object(gdClass), methodStyleBoxTexture[15]) }
func (gdClass StyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodStyleBoxTexture[16], mode) }
func (gdClass StyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode { return gdnative.Return[StyleBoxTextureAxisStretchMode](gdnative.Object(gdClass), methodStyleBoxTexture[17]) }

type SubViewportClearMode int64

const (
	SubViewportClearModeAlways SubViewportClearMode = 0
	SubViewportClearModeNever SubViewportClearMode = 1
	SubViewportClearModeOnce SubViewportClearMode = 2
)

type SubViewportUpdateMode int64

const (
	SubViewportUpdateDisabled SubViewportUpdateMode = 0
	SubViewportUpdateOnce SubViewportUpdateMode = 1
	SubViewportUpdateWhenVisible SubViewportUpdateMode = 2
	SubViewportUpdateWhenParentVisible SubViewportUpdateMode = 3
	SubViewportUpdateAlways SubViewportUpdateMode = 4
)

type SubViewport gdnative.Object
func (SubViewport) class() string { return "SubViewport\000" }

func (gdClass SubViewport) Viewport() Viewport { return Viewport(gdClass) }

var methodSubViewport [10]gdnative.Method
func (gdClass SubViewport) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[0], size) }
func (gdClass SubViewport) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSubViewport[1]) }
func (gdClass SubViewport) SetSize2dOverride(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[2], size) }
func (gdClass SubViewport) GetSize2dOverride() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodSubViewport[3]) }
func (gdClass SubViewport) SetSize2dOverrideStretch(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[4], enable) }
func (gdClass SubViewport) IsSize2dOverrideStretchEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSubViewport[5]) }
func (gdClass SubViewport) SetUpdateMode(mode SubViewportUpdateMode)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[6], mode) }
func (gdClass SubViewport) GetUpdateMode() SubViewportUpdateMode { return gdnative.Return[SubViewportUpdateMode](gdnative.Object(gdClass), methodSubViewport[7]) }
func (gdClass SubViewport) SetClearMode(mode SubViewportClearMode)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewport[8], mode) }
func (gdClass SubViewport) GetClearMode() SubViewportClearMode { return gdnative.Return[SubViewportClearMode](gdnative.Object(gdClass), methodSubViewport[9]) }

type SubViewportContainer gdnative.Object
func (SubViewportContainer) class() string { return "SubViewportContainer\000" }

func (gdClass SubViewportContainer) Container() Container { return Container(gdClass) }

var methodSubViewportContainer [4]gdnative.Method
func (gdClass SubViewportContainer) SetStretch(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewportContainer[0], enable) }
func (gdClass SubViewportContainer) IsStretchEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSubViewportContainer[1]) }
func (gdClass SubViewportContainer) SetStretchShrink(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodSubViewportContainer[2], amount) }
func (gdClass SubViewportContainer) GetStretchShrink() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodSubViewportContainer[3]) }

type SurfaceToolCustomFormat int64

const (
	SurfaceToolCustomRgba8Unorm SurfaceToolCustomFormat = 0
	SurfaceToolCustomRgba8Snorm SurfaceToolCustomFormat = 1
	SurfaceToolCustomRgHalf SurfaceToolCustomFormat = 2
	SurfaceToolCustomRgbaHalf SurfaceToolCustomFormat = 3
	SurfaceToolCustomRFloat SurfaceToolCustomFormat = 4
	SurfaceToolCustomRgFloat SurfaceToolCustomFormat = 5
	SurfaceToolCustomRgbFloat SurfaceToolCustomFormat = 6
	SurfaceToolCustomRgbaFloat SurfaceToolCustomFormat = 7
	SurfaceToolCustomMax SurfaceToolCustomFormat = 8
)

type SurfaceToolSkinWeightCount int64

const (
	SurfaceToolSkin4Weights SurfaceToolSkinWeightCount = 0
	SurfaceToolSkin8Weights SurfaceToolSkinWeightCount = 1
)

type SurfaceTool gdnative.Object
func (SurfaceTool) class() string { return "SurfaceTool\000" }

func (gdClass SurfaceTool) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodSurfaceTool [32]gdnative.Method
func (gdClass SurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[0], count) }
func (gdClass SurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount { return gdnative.Return[SurfaceToolSkinWeightCount](gdnative.Object(gdClass), methodSurfaceTool[1]) }
func (gdClass SurfaceTool) SetCustomFormat(channel_index int64, format SurfaceToolCustomFormat)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[2], channel_index, format) }
func (gdClass SurfaceTool) GetCustomFormat(channel_index int64) SurfaceToolCustomFormat { return gdnative.Return[SurfaceToolCustomFormat](gdnative.Object(gdClass), methodSurfaceTool[3], channel_index) }
func (gdClass SurfaceTool) Begin(primitive MeshPrimitiveType)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[4], primitive) }
func (gdClass SurfaceTool) AddVertex(vertex Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[5], vertex) }
func (gdClass SurfaceTool) SetColor(color Color)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[6], color) }
func (gdClass SurfaceTool) SetNormal(normal Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[7], normal) }
func (gdClass SurfaceTool) SetTangent(tangent Plane)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[8], tangent) }
func (gdClass SurfaceTool) SetUv(uv Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[9], uv) }
func (gdClass SurfaceTool) SetUv2(uv2 Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[10], uv2) }
func (gdClass SurfaceTool) SetBones(bones []int32)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[11], bones) }
func (gdClass SurfaceTool) SetWeights(weights []float32)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[12], weights) }
func (gdClass SurfaceTool) SetCustom(channel_index int64, custom_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[13], channel_index, custom_color) }
func (gdClass SurfaceTool) SetSmoothGroup(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[14], index) }
func (gdClass SurfaceTool) AddTriangleFan(vertices []Vector3, uvs []Vector2, colors []Color, uv2s []Vector2, normals []Vector3, tangents Array)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[15], vertices, uvs, colors, uv2s, normals, tangents) }
func (gdClass SurfaceTool) AddIndex(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[16], index) }
func (gdClass SurfaceTool) Index()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[17]) }
func (gdClass SurfaceTool) Deindex()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[18]) }
func (gdClass SurfaceTool) GenerateNormals(flip bool)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[19], flip) }
func (gdClass SurfaceTool) GenerateTangents()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[20]) }
func (gdClass SurfaceTool) OptimizeIndicesForCache()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[21]) }
func (gdClass SurfaceTool) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodSurfaceTool[22]) }
func (gdClass SurfaceTool) GenerateLod(nd_threshold float64, target_index_count int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodSurfaceTool[23], nd_threshold, target_index_count) }
func (gdClass SurfaceTool) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[24], material) }
func (gdClass SurfaceTool) GetPrimitiveType() MeshPrimitiveType { return gdnative.Return[MeshPrimitiveType](gdnative.Object(gdClass), methodSurfaceTool[25]) }
func (gdClass SurfaceTool) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[26]) }
func (gdClass SurfaceTool) CreateFrom(existing Mesh, surface int64)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[27], existing, surface) }
func (gdClass SurfaceTool) CreateFromBlendShape(existing Mesh, surface int64, blend_shape string)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[28], existing, surface, blend_shape) }
func (gdClass SurfaceTool) AppendFrom(existing Mesh, surface int64, transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodSurfaceTool[29], existing, surface, transform) }
func (gdClass SurfaceTool) Commit(existing ArrayMesh, flags int64) ArrayMesh { return gdnative.Return[ArrayMesh](gdnative.Object(gdClass), methodSurfaceTool[30], existing, flags) }
func (gdClass SurfaceTool) CommitToArrays() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodSurfaceTool[31]) }

type SyntaxHighlighter gdnative.Object
func (SyntaxHighlighter) class() string { return "SyntaxHighlighter\000" }

func (gdClass SyntaxHighlighter) Resource() Resource { return Resource(gdClass) }

var methodSyntaxHighlighter [4]gdnative.Method
func (gdClass SyntaxHighlighter) virtual(val any, name string) any {	switch name {
	case "_get_line_syntax_highlighting":
		i, ok := val.(interface{ GetLineSyntaxHighlighting(line int64) Dictionary })
		if ok {
			return i.GetLineSyntaxHighlighting
		}
	case "_clear_highlighting_cache":
		i, ok := val.(interface{ ClearHighlightingCache()  })
		if ok {
			return i.ClearHighlightingCache
		}
	case "_update_cache":
		i, ok := val.(interface{ UpdateCache()  })
		if ok {
			return i.UpdateCache
		}
	}
	return nil
}
func (gdClass SyntaxHighlighter) GetLineSyntaxHighlighting(line int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodSyntaxHighlighter[0], line) }
func (gdClass SyntaxHighlighter) UpdateCache()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[1]) }
func (gdClass SyntaxHighlighter) ClearHighlightingCache()  { gdnative.Call(gdnative.Object(gdClass), methodSyntaxHighlighter[2]) }
func (gdClass SyntaxHighlighter) GetTextEdit() TextEdit { return gdnative.Return[TextEdit](gdnative.Object(gdClass), methodSyntaxHighlighter[3]) }

type SystemFont gdnative.Object
func (SystemFont) class() string { return "SystemFont\000" }

func (gdClass SystemFont) Font() Font { return Font(gdClass) }

var methodSystemFont [17]gdnative.Method
func (gdClass SystemFont) SetAntialiased(antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[0], antialiased) }
func (gdClass SystemFont) IsAntialiased() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[1]) }
func (gdClass SystemFont) SetGenerateMipmaps(generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[2], generate_mipmaps) }
func (gdClass SystemFont) GetGenerateMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[3]) }
func (gdClass SystemFont) SetForceAutohinter(force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[4], force_autohinter) }
func (gdClass SystemFont) IsForceAutohinter() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[5]) }
func (gdClass SystemFont) SetHinting(hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[6], hinting) }
func (gdClass SystemFont) GetHinting() TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodSystemFont[7]) }
func (gdClass SystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[8], subpixel_positioning) }
func (gdClass SystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodSystemFont[9]) }
func (gdClass SystemFont) SetMultichannelSignedDistanceField(msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[10], msdf) }
func (gdClass SystemFont) IsMultichannelSignedDistanceField() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodSystemFont[11]) }
func (gdClass SystemFont) SetOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[12], oversampling) }
func (gdClass SystemFont) GetOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodSystemFont[13]) }
func (gdClass SystemFont) GetFontNames() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodSystemFont[14]) }
func (gdClass SystemFont) SetFontNames(names []string)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[15], names) }
func (gdClass SystemFont) SetFontStyle(style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodSystemFont[16], style) }

type TCPServer gdnative.Object
func (TCPServer) class() string { return "TCPServer\000" }

func (gdClass TCPServer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodTCPServer [6]gdnative.Method
func (gdClass TCPServer) Listen(port int64, bind_address string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodTCPServer[0], port, bind_address) }
func (gdClass TCPServer) IsConnectionAvailable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTCPServer[1]) }
func (gdClass TCPServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTCPServer[2]) }
func (gdClass TCPServer) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTCPServer[3]) }
func (gdClass TCPServer) TakeConnection() StreamPeerTCP { return gdnative.Return[StreamPeerTCP](gdnative.Object(gdClass), methodTCPServer[4]) }
func (gdClass TCPServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTCPServer[5]) }

type TabBarAlignmentMode int64

const (
	TabBarAlignmentLeft TabBarAlignmentMode = 0
	TabBarAlignmentCenter TabBarAlignmentMode = 1
	TabBarAlignmentRight TabBarAlignmentMode = 2
	TabBarAlignmentMax TabBarAlignmentMode = 3
)

type TabBarCloseButtonDisplayPolicy int64

const (
	TabBarCloseButtonShowNever TabBarCloseButtonDisplayPolicy = 0
	TabBarCloseButtonShowActiveOnly TabBarCloseButtonDisplayPolicy = 1
	TabBarCloseButtonShowAlways TabBarCloseButtonDisplayPolicy = 2
	TabBarCloseButtonMax TabBarCloseButtonDisplayPolicy = 3
)

type TabBar gdnative.Object
func (TabBar) class() string { return "TabBar\000" }

func (gdClass TabBar) Control() Control { return Control(gdClass) }

var methodTabBar [45]gdnative.Method
func (gdClass TabBar) SetTabCount(count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[0], count) }
func (gdClass TabBar) GetTabCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[1]) }
func (gdClass TabBar) SetCurrentTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[2], tab_idx) }
func (gdClass TabBar) GetCurrentTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[3]) }
func (gdClass TabBar) GetPreviousTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[4]) }
func (gdClass TabBar) SetTabTitle(tab_idx int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[5], tab_idx, title) }
func (gdClass TabBar) GetTabTitle(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabBar[6], tab_idx) }
func (gdClass TabBar) SetTabTextDirection(tab_idx int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[7], tab_idx, direction) }
func (gdClass TabBar) GetTabTextDirection(tab_idx int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTabBar[8], tab_idx) }
func (gdClass TabBar) SetTabLanguage(tab_idx int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[9], tab_idx, language) }
func (gdClass TabBar) GetTabLanguage(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabBar[10], tab_idx) }
func (gdClass TabBar) SetTabIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[11], tab_idx, icon) }
func (gdClass TabBar) GetTabIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabBar[12], tab_idx) }
func (gdClass TabBar) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[13], tab_idx, icon) }
func (gdClass TabBar) GetTabButtonIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabBar[14], tab_idx) }
func (gdClass TabBar) SetTabDisabled(tab_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[15], tab_idx, disabled) }
func (gdClass TabBar) IsTabDisabled(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[16], tab_idx) }
func (gdClass TabBar) SetTabHidden(tab_idx int64, hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[17], tab_idx, hidden) }
func (gdClass TabBar) IsTabHidden(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[18], tab_idx) }
func (gdClass TabBar) RemoveTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[19], tab_idx) }
func (gdClass TabBar) AddTab(title string, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[20], title, icon) }
func (gdClass TabBar) GetTabIdxAtPoint(point Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[21], point) }
func (gdClass TabBar) SetTabAlignment(alignment TabBarAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[22], alignment) }
func (gdClass TabBar) GetTabAlignment() TabBarAlignmentMode { return gdnative.Return[TabBarAlignmentMode](gdnative.Object(gdClass), methodTabBar[23]) }
func (gdClass TabBar) SetClipTabs(clip_tabs bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[24], clip_tabs) }
func (gdClass TabBar) GetClipTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[25]) }
func (gdClass TabBar) GetTabOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[26]) }
func (gdClass TabBar) GetOffsetButtonsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[27]) }
func (gdClass TabBar) EnsureTabVisible(idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[28], idx) }
func (gdClass TabBar) GetTabRect(tab_idx int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTabBar[29], tab_idx) }
func (gdClass TabBar) MoveTab(from int64, to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[30], from, to) }
func (gdClass TabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[31], policy) }
func (gdClass TabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy { return gdnative.Return[TabBarCloseButtonDisplayPolicy](gdnative.Object(gdClass), methodTabBar[32]) }
func (gdClass TabBar) SetMaxTabWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[33], width) }
func (gdClass TabBar) GetMaxTabWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[34]) }
func (gdClass TabBar) SetScrollingEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[35], enabled) }
func (gdClass TabBar) GetScrollingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[36]) }
func (gdClass TabBar) SetDragToRearrangeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[37], enabled) }
func (gdClass TabBar) GetDragToRearrangeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[38]) }
func (gdClass TabBar) SetTabsRearrangeGroup(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[39], group_id) }
func (gdClass TabBar) GetTabsRearrangeGroup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabBar[40]) }
func (gdClass TabBar) SetScrollToSelected(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[41], enabled) }
func (gdClass TabBar) GetScrollToSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[42]) }
func (gdClass TabBar) SetSelectWithRmb(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabBar[43], enabled) }
func (gdClass TabBar) GetSelectWithRmb() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabBar[44]) }

type TabContainer gdnative.Object
func (TabContainer) class() string { return "TabContainer\000" }

func (gdClass TabContainer) Container() Container { return Container(gdClass) }

var methodTabContainer [34]gdnative.Method
func (gdClass TabContainer) GetTabCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[0]) }
func (gdClass TabContainer) SetCurrentTab(tab_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[1], tab_idx) }
func (gdClass TabContainer) GetCurrentTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[2]) }
func (gdClass TabContainer) GetPreviousTab() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[3]) }
func (gdClass TabContainer) GetCurrentTabControl() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodTabContainer[4]) }
func (gdClass TabContainer) GetTabControl(tab_idx int64) Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodTabContainer[5], tab_idx) }
func (gdClass TabContainer) SetTabAlignment(alignment TabBarAlignmentMode)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[6], alignment) }
func (gdClass TabContainer) GetTabAlignment() TabBarAlignmentMode { return gdnative.Return[TabBarAlignmentMode](gdnative.Object(gdClass), methodTabContainer[7]) }
func (gdClass TabContainer) SetClipTabs(clip_tabs bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[8], clip_tabs) }
func (gdClass TabContainer) GetClipTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[9]) }
func (gdClass TabContainer) SetTabsVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[10], visible) }
func (gdClass TabContainer) AreTabsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[11]) }
func (gdClass TabContainer) SetAllTabsInFront(is_front bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[12], is_front) }
func (gdClass TabContainer) IsAllTabsInFront() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[13]) }
func (gdClass TabContainer) SetTabTitle(tab_idx int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[14], tab_idx, title) }
func (gdClass TabContainer) GetTabTitle(tab_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTabContainer[15], tab_idx) }
func (gdClass TabContainer) SetTabIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[16], tab_idx, icon) }
func (gdClass TabContainer) GetTabIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabContainer[17], tab_idx) }
func (gdClass TabContainer) SetTabDisabled(tab_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[18], tab_idx, disabled) }
func (gdClass TabContainer) IsTabDisabled(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[19], tab_idx) }
func (gdClass TabContainer) SetTabHidden(tab_idx int64, hidden bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[20], tab_idx, hidden) }
func (gdClass TabContainer) IsTabHidden(tab_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[21], tab_idx) }
func (gdClass TabContainer) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[22], tab_idx, icon) }
func (gdClass TabContainer) GetTabButtonIcon(tab_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTabContainer[23], tab_idx) }
func (gdClass TabContainer) GetTabIdxAtPoint(point Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[24], point) }
func (gdClass TabContainer) GetTabIdxFromControl(control Control) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[25], control) }
func (gdClass TabContainer) SetPopup(popup Node)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[26], popup) }
func (gdClass TabContainer) GetPopup() Popup { return gdnative.Return[Popup](gdnative.Object(gdClass), methodTabContainer[27]) }
func (gdClass TabContainer) SetDragToRearrangeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[28], enabled) }
func (gdClass TabContainer) GetDragToRearrangeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[29]) }
func (gdClass TabContainer) SetTabsRearrangeGroup(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[30], group_id) }
func (gdClass TabContainer) GetTabsRearrangeGroup() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTabContainer[31]) }
func (gdClass TabContainer) SetUseHiddenTabsForMinSize(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTabContainer[32], enabled) }
func (gdClass TabContainer) GetUseHiddenTabsForMinSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTabContainer[33]) }

type TextEditMenuItems int64

const (
	TextEditMenuCut TextEditMenuItems = 0
	TextEditMenuCopy TextEditMenuItems = 1
	TextEditMenuPaste TextEditMenuItems = 2
	TextEditMenuClear TextEditMenuItems = 3
	TextEditMenuSelectAll TextEditMenuItems = 4
	TextEditMenuUndo TextEditMenuItems = 5
	TextEditMenuRedo TextEditMenuItems = 6
	TextEditMenuDirInherited TextEditMenuItems = 7
	TextEditMenuDirAuto TextEditMenuItems = 8
	TextEditMenuDirLtr TextEditMenuItems = 9
	TextEditMenuDirRtl TextEditMenuItems = 10
	TextEditMenuDisplayUcc TextEditMenuItems = 11
	TextEditMenuInsertLrm TextEditMenuItems = 12
	TextEditMenuInsertRlm TextEditMenuItems = 13
	TextEditMenuInsertLre TextEditMenuItems = 14
	TextEditMenuInsertRle TextEditMenuItems = 15
	TextEditMenuInsertLro TextEditMenuItems = 16
	TextEditMenuInsertRlo TextEditMenuItems = 17
	TextEditMenuInsertPdf TextEditMenuItems = 18
	TextEditMenuInsertAlm TextEditMenuItems = 19
	TextEditMenuInsertLri TextEditMenuItems = 20
	TextEditMenuInsertRli TextEditMenuItems = 21
	TextEditMenuInsertFsi TextEditMenuItems = 22
	TextEditMenuInsertPdi TextEditMenuItems = 23
	TextEditMenuInsertZwj TextEditMenuItems = 24
	TextEditMenuInsertZwnj TextEditMenuItems = 25
	TextEditMenuInsertWj TextEditMenuItems = 26
	TextEditMenuInsertShy TextEditMenuItems = 27
	TextEditMenuMax TextEditMenuItems = 28
)

type TextEditSearchFlags int64

const (
	TextEditSearchMatchCase TextEditSearchFlags = 1
	TextEditSearchWholeWords TextEditSearchFlags = 2
	TextEditSearchBackwards TextEditSearchFlags = 4
)

type TextEditCaretType int64

const (
	TextEditCaretTypeLine TextEditCaretType = 0
	TextEditCaretTypeBlock TextEditCaretType = 1
)

type TextEditSelectionMode int64

const (
	TextEditSelectionModeNone TextEditSelectionMode = 0
	TextEditSelectionModeShift TextEditSelectionMode = 1
	TextEditSelectionModePointer TextEditSelectionMode = 2
	TextEditSelectionModeWord TextEditSelectionMode = 3
	TextEditSelectionModeLine TextEditSelectionMode = 4
)

type TextEditLineWrappingMode int64

const (
	TextEditLineWrappingNone TextEditLineWrappingMode = 0
	TextEditLineWrappingBoundary TextEditLineWrappingMode = 1
)

type TextEditGutterType int64

const (
	TextEditGutterTypeString TextEditGutterType = 0
	TextEditGutterTypeIcon TextEditGutterType = 1
	TextEditGutterTypeCustom TextEditGutterType = 2
)

type TextEdit gdnative.Object
func (TextEdit) class() string { return "TextEdit\000" }

func (gdClass TextEdit) Control() Control { return Control(gdClass) }

var methodTextEdit [189]gdnative.Method
func (gdClass TextEdit) virtual(val any, name string) any {	switch name {
	case "_handle_unicode_input":
		i, ok := val.(interface{ HandleUnicodeInput(unicode_char int64)  })
		if ok {
			return i.HandleUnicodeInput
		}
	case "_backspace":
		i, ok := val.(interface{ Backspace()  })
		if ok {
			return i.Backspace
		}
	case "_cut":
		i, ok := val.(interface{ Cut()  })
		if ok {
			return i.Cut
		}
	case "_copy":
		i, ok := val.(interface{ Copy()  })
		if ok {
			return i.Copy
		}
	case "_paste":
		i, ok := val.(interface{ Paste()  })
		if ok {
			return i.Paste
		}
	case "_paste_primary_clipboard":
		i, ok := val.(interface{ PastePrimaryClipboard()  })
		if ok {
			return i.PastePrimaryClipboard
		}
	}
	return nil
}
func (gdClass TextEdit) HasImeText() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[0]) }
func (gdClass TextEdit) SetEditable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[1], enabled) }
func (gdClass TextEdit) IsEditable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[2]) }
func (gdClass TextEdit) SetTextDirection(direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[3], direction) }
func (gdClass TextEdit) GetTextDirection() ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTextEdit[4]) }
func (gdClass TextEdit) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[5], language) }
func (gdClass TextEdit) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[6]) }
func (gdClass TextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[7], parser) }
func (gdClass TextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTextEdit[8]) }
func (gdClass TextEdit) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[9], args) }
func (gdClass TextEdit) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextEdit[10]) }
func (gdClass TextEdit) SetTabSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[11], size) }
func (gdClass TextEdit) GetTabSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[12]) }
func (gdClass TextEdit) SetOvertypeModeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[13], enabled) }
func (gdClass TextEdit) IsOvertypeModeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[14]) }
func (gdClass TextEdit) SetContextMenuEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[15], enabled) }
func (gdClass TextEdit) IsContextMenuEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[16]) }
func (gdClass TextEdit) SetShortcutKeysEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[17], enabled) }
func (gdClass TextEdit) IsShortcutKeysEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[18]) }
func (gdClass TextEdit) SetVirtualKeyboardEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[19], enabled) }
func (gdClass TextEdit) IsVirtualKeyboardEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[20]) }
func (gdClass TextEdit) SetMiddleMousePasteEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[21], enabled) }
func (gdClass TextEdit) IsMiddleMousePasteEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[22]) }
func (gdClass TextEdit) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[23]) }
func (gdClass TextEdit) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[24], text) }
func (gdClass TextEdit) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[25]) }
func (gdClass TextEdit) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[26]) }
func (gdClass TextEdit) SetPlaceholder(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[27], text) }
func (gdClass TextEdit) GetPlaceholder() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[28]) }
func (gdClass TextEdit) SetLine(line int64, new_text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[29], line, new_text) }
func (gdClass TextEdit) GetLine(line int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[30], line) }
func (gdClass TextEdit) GetLineWidth(line int64, wrap_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[31], line, wrap_index) }
func (gdClass TextEdit) GetLineHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[32]) }
func (gdClass TextEdit) GetIndentLevel(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[33], line) }
func (gdClass TextEdit) GetFirstNonWhitespaceColumn(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[34], line) }
func (gdClass TextEdit) SwapLines(from_line int64, to_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[35], from_line, to_line) }
func (gdClass TextEdit) InsertLineAt(line int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[36], line, text) }
func (gdClass TextEdit) InsertTextAtCaret(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[37], text) }
func (gdClass TextEdit) RemoveText(from_line int64, from_column int64, to_line int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[38], from_line, from_column, to_line, to_column) }
func (gdClass TextEdit) GetLastUnhiddenLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[39]) }
func (gdClass TextEdit) GetNextVisibleLineOffsetFrom(line int64, visible_amount int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[40], line, visible_amount) }
func (gdClass TextEdit) GetNextVisibleLineIndexOffsetFrom(line int64, wrap_index int64, visible_amount int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[41], line, wrap_index, visible_amount) }
func (gdClass TextEdit) Backspace()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[42]) }
func (gdClass TextEdit) Cut()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[43]) }
func (gdClass TextEdit) Copy()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[44]) }
func (gdClass TextEdit) Paste()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[45]) }
func (gdClass TextEdit) BeginComplexOperation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[46]) }
func (gdClass TextEdit) EndComplexOperation()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[47]) }
func (gdClass TextEdit) HasUndo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[48]) }
func (gdClass TextEdit) HasRedo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[49]) }
func (gdClass TextEdit) Undo()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[50]) }
func (gdClass TextEdit) Redo()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[51]) }
func (gdClass TextEdit) ClearUndoHistory()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[52]) }
func (gdClass TextEdit) TagSavedVersion()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[53]) }
func (gdClass TextEdit) GetVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[54]) }
func (gdClass TextEdit) GetSavedVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[55]) }
func (gdClass TextEdit) SetSearchText(search_text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[56], search_text) }
func (gdClass TextEdit) SetSearchFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[57], flags) }
func (gdClass TextEdit) Search(text string, flags int64, from_line int64, from_colum int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[58], text, flags, from_line, from_colum) }
func (gdClass TextEdit) SetTooltipRequestFunc(callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[59], callback) }
func (gdClass TextEdit) GetLocalMousePos() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextEdit[60]) }
func (gdClass TextEdit) GetWordAtPos(position Vector2) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[61], position) }
func (gdClass TextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[62], position, allow_out_of_bounds) }
func (gdClass TextEdit) GetPosAtLineColumn(line int64, column int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextEdit[63], line, column) }
func (gdClass TextEdit) GetRectAtLineColumn(line int64, column int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTextEdit[64], line, column) }
func (gdClass TextEdit) GetMinimapLineAtPos(position Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[65], position) }
func (gdClass TextEdit) IsDraggingCursor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[66]) }
func (gdClass TextEdit) IsMouseOverSelection(edges bool) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[67], edges) }
func (gdClass TextEdit) SetCaretType(atype TextEditCaretType)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[68], atype) }
func (gdClass TextEdit) GetCaretType() TextEditCaretType { return gdnative.Return[TextEditCaretType](gdnative.Object(gdClass), methodTextEdit[69]) }
func (gdClass TextEdit) SetCaretBlinkEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[70], enable) }
func (gdClass TextEdit) IsCaretBlinkEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[71]) }
func (gdClass TextEdit) SetCaretBlinkSpeed(blink_speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[72], blink_speed) }
func (gdClass TextEdit) GetCaretBlinkSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[73]) }
func (gdClass TextEdit) SetMoveCaretOnRightClickEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[74], enable) }
func (gdClass TextEdit) IsMoveCaretOnRightClickEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[75]) }
func (gdClass TextEdit) SetCaretMidGraphemeEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[76], enabled) }
func (gdClass TextEdit) IsCaretMidGraphemeEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[77]) }
func (gdClass TextEdit) IsCaretVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[78]) }
func (gdClass TextEdit) GetCaretDrawPos() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextEdit[79]) }
func (gdClass TextEdit) SetCaretLine(line int64, adjust_viewport bool, can_be_hidden bool, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[80], line, adjust_viewport, can_be_hidden, wrap_index) }
func (gdClass TextEdit) GetCaretLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[81]) }
func (gdClass TextEdit) SetCaretColumn(column int64, adjust_viewport bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[82], column, adjust_viewport) }
func (gdClass TextEdit) GetCaretColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[83]) }
func (gdClass TextEdit) GetCaretWrapIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[84]) }
func (gdClass TextEdit) GetWordUnderCaret() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[85]) }
func (gdClass TextEdit) SetSelectingEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[86], enable) }
func (gdClass TextEdit) IsSelectingEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[87]) }
func (gdClass TextEdit) SetDeselectOnFocusLossEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[88], enable) }
func (gdClass TextEdit) IsDeselectOnFocusLossEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[89]) }
func (gdClass TextEdit) SetDragAndDropSelectionEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[90], enable) }
func (gdClass TextEdit) IsDragAndDropSelectionEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[91]) }
func (gdClass TextEdit) SetOverrideSelectedFontColor(override bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[92], override) }
func (gdClass TextEdit) IsOverridingSelectedFontColor() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[93]) }
func (gdClass TextEdit) SetSelectionMode(mode TextEditSelectionMode, line int64, column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[94], mode, line, column) }
func (gdClass TextEdit) GetSelectionMode() TextEditSelectionMode { return gdnative.Return[TextEditSelectionMode](gdnative.Object(gdClass), methodTextEdit[95]) }
func (gdClass TextEdit) SelectAll()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[96]) }
func (gdClass TextEdit) SelectWordUnderCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[97]) }
func (gdClass TextEdit) Select(from_line int64, from_column int64, to_line int64, to_column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[98], from_line, from_column, to_line, to_column) }
func (gdClass TextEdit) HasSelection() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[99]) }
func (gdClass TextEdit) GetSelectedText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[100]) }
func (gdClass TextEdit) GetSelectionLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[101]) }
func (gdClass TextEdit) GetSelectionColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[102]) }
func (gdClass TextEdit) GetSelectionFromLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[103]) }
func (gdClass TextEdit) GetSelectionFromColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[104]) }
func (gdClass TextEdit) GetSelectionToLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[105]) }
func (gdClass TextEdit) GetSelectionToColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[106]) }
func (gdClass TextEdit) Deselect()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[107]) }
func (gdClass TextEdit) DeleteSelection()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[108]) }
func (gdClass TextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[109], mode) }
func (gdClass TextEdit) GetLineWrappingMode() TextEditLineWrappingMode { return gdnative.Return[TextEditLineWrappingMode](gdnative.Object(gdClass), methodTextEdit[110]) }
func (gdClass TextEdit) IsLineWrapped(line int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[111], line) }
func (gdClass TextEdit) GetLineWrapCount(line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[112], line) }
func (gdClass TextEdit) GetLineWrapIndexAtColumn(line int64, column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[113], line, column) }
func (gdClass TextEdit) GetLineWrappedText(line int64) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextEdit[114], line) }
func (gdClass TextEdit) SetSmoothScrollEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[115], enable) }
func (gdClass TextEdit) IsSmoothScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[116]) }
func (gdClass TextEdit) SetVScroll(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[117], value) }
func (gdClass TextEdit) GetVScroll() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[118]) }
func (gdClass TextEdit) SetHScroll(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[119], value) }
func (gdClass TextEdit) GetHScroll() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[120]) }
func (gdClass TextEdit) SetScrollPastEndOfFileEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[121], enable) }
func (gdClass TextEdit) IsScrollPastEndOfFileEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[122]) }
func (gdClass TextEdit) SetVScrollSpeed(speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[123], speed) }
func (gdClass TextEdit) GetVScrollSpeed() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[124]) }
func (gdClass TextEdit) SetFitContentHeightEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[125], enabled) }
func (gdClass TextEdit) IsFitContentHeightEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[126]) }
func (gdClass TextEdit) GetScrollPosForLine(line int64, wrap_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextEdit[127], line, wrap_index) }
func (gdClass TextEdit) SetLineAsFirstVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[128], line, wrap_index) }
func (gdClass TextEdit) GetFirstVisibleLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[129]) }
func (gdClass TextEdit) SetLineAsCenterVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[130], line, wrap_index) }
func (gdClass TextEdit) SetLineAsLastVisible(line int64, wrap_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[131], line, wrap_index) }
func (gdClass TextEdit) GetLastFullVisibleLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[132]) }
func (gdClass TextEdit) GetLastFullVisibleLineWrapIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[133]) }
func (gdClass TextEdit) GetVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[134]) }
func (gdClass TextEdit) GetVisibleLineCountInRange(from_line int64, to_line int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[135], from_line, to_line) }
func (gdClass TextEdit) GetTotalVisibleLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[136]) }
func (gdClass TextEdit) AdjustViewportToCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[137]) }
func (gdClass TextEdit) CenterViewportToCaret()  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[138]) }
func (gdClass TextEdit) SetDrawMinimap(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[139], enabled) }
func (gdClass TextEdit) IsDrawingMinimap() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[140]) }
func (gdClass TextEdit) SetMinimapWidth(width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[141], width) }
func (gdClass TextEdit) GetMinimapWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[142]) }
func (gdClass TextEdit) GetMinimapVisibleLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[143]) }
func (gdClass TextEdit) AddGutter(at int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[144], at) }
func (gdClass TextEdit) RemoveGutter(gutter int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[145], gutter) }
func (gdClass TextEdit) GetGutterCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[146]) }
func (gdClass TextEdit) SetGutterName(gutter int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[147], gutter, name) }
func (gdClass TextEdit) GetGutterName(gutter int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[148], gutter) }
func (gdClass TextEdit) SetGutterType(gutter int64, atype TextEditGutterType)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[149], gutter, atype) }
func (gdClass TextEdit) GetGutterType(gutter int64) TextEditGutterType { return gdnative.Return[TextEditGutterType](gdnative.Object(gdClass), methodTextEdit[150], gutter) }
func (gdClass TextEdit) SetGutterWidth(gutter int64, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[151], gutter, width) }
func (gdClass TextEdit) GetGutterWidth(gutter int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[152], gutter) }
func (gdClass TextEdit) SetGutterDraw(gutter int64, draw bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[153], gutter, draw) }
func (gdClass TextEdit) IsGutterDrawn(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[154], gutter) }
func (gdClass TextEdit) SetGutterClickable(gutter int64, clickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[155], gutter, clickable) }
func (gdClass TextEdit) IsGutterClickable(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[156], gutter) }
func (gdClass TextEdit) SetGutterOverwritable(gutter int64, overwritable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[157], gutter, overwritable) }
func (gdClass TextEdit) IsGutterOverwritable(gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[158], gutter) }
func (gdClass TextEdit) MergeGutters(from_line int64, to_line int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[159], from_line, to_line) }
func (gdClass TextEdit) SetGutterCustomDraw(column int64, draw_callback Callable)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[160], column, draw_callback) }
func (gdClass TextEdit) GetTotalGutterWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextEdit[161]) }
func (gdClass TextEdit) SetLineGutterMetadata(line int64, gutter int64, metadata any)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[162], line, gutter, metadata) }
func (gdClass TextEdit) GetLineGutterMetadata(line int64, gutter int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTextEdit[163], line, gutter) }
func (gdClass TextEdit) SetLineGutterText(line int64, gutter int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[164], line, gutter, text) }
func (gdClass TextEdit) GetLineGutterText(line int64, gutter int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextEdit[165], line, gutter) }
func (gdClass TextEdit) SetLineGutterIcon(line int64, gutter int64, icon Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[166], line, gutter, icon) }
func (gdClass TextEdit) GetLineGutterIcon(line int64, gutter int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextEdit[167], line, gutter) }
func (gdClass TextEdit) SetLineGutterItemColor(line int64, gutter int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[168], line, gutter, color) }
func (gdClass TextEdit) GetLineGutterItemColor(line int64, gutter int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextEdit[169], line, gutter) }
func (gdClass TextEdit) SetLineGutterClickable(line int64, gutter int64, clickable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[170], line, gutter, clickable) }
func (gdClass TextEdit) IsLineGutterClickable(line int64, gutter int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[171], line, gutter) }
func (gdClass TextEdit) SetLineBackgroundColor(line int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[172], line, color) }
func (gdClass TextEdit) GetLineBackgroundColor(line int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextEdit[173], line) }
func (gdClass TextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[174], syntax_highlighter) }
func (gdClass TextEdit) GetSyntaxHighlighter() SyntaxHighlighter { return gdnative.Return[SyntaxHighlighter](gdnative.Object(gdClass), methodTextEdit[175]) }
func (gdClass TextEdit) SetHighlightCurrentLine(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[176], enabled) }
func (gdClass TextEdit) IsHighlightCurrentLineEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[177]) }
func (gdClass TextEdit) SetHighlightAllOccurrences(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[178], enabled) }
func (gdClass TextEdit) IsHighlightAllOccurrencesEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[179]) }
func (gdClass TextEdit) GetDrawControlChars() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[180]) }
func (gdClass TextEdit) SetDrawControlChars(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[181], enabled) }
func (gdClass TextEdit) SetDrawTabs(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[182], enabled) }
func (gdClass TextEdit) IsDrawingTabs() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[183]) }
func (gdClass TextEdit) SetDrawSpaces(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[184], enabled) }
func (gdClass TextEdit) IsDrawingSpaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[185]) }
func (gdClass TextEdit) GetMenu() PopupMenu { return gdnative.Return[PopupMenu](gdnative.Object(gdClass), methodTextEdit[186]) }
func (gdClass TextEdit) IsMenuVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextEdit[187]) }
func (gdClass TextEdit) MenuOption(option int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextEdit[188], option) }

type TextLine gdnative.Object
func (TextLine) class() string { return "TextLine\000" }

func (gdClass TextLine) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodTextLine [34]gdnative.Method
func (gdClass TextLine) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[0]) }
func (gdClass TextLine) SetDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[1], direction) }
func (gdClass TextLine) GetDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextLine[2]) }
func (gdClass TextLine) SetOrientation(orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[3], orientation) }
func (gdClass TextLine) GetOrientation() TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextLine[4]) }
func (gdClass TextLine) SetPreserveInvalid(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[5], enabled) }
func (gdClass TextLine) GetPreserveInvalid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[6]) }
func (gdClass TextLine) SetPreserveControl(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[7], enabled) }
func (gdClass TextLine) GetPreserveControl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[8]) }
func (gdClass TextLine) SetBidiOverride(override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[9], override) }
func (gdClass TextLine) AddString(text string, font Font, font_size int64, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[10], text, font, font_size, language, meta) }
func (gdClass TextLine) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[11], key, size, inline_align, length) }
func (gdClass TextLine) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextLine[12], key, size, inline_align) }
func (gdClass TextLine) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[13], width) }
func (gdClass TextLine) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[14]) }
func (gdClass TextLine) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[15], alignment) }
func (gdClass TextLine) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextLine[16]) }
func (gdClass TextLine) TabAlign(tab_stops []float32)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[17], tab_stops) }
func (gdClass TextLine) SetFlags(flags TextServerJustificationFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[18], flags) }
func (gdClass TextLine) GetFlags() TextServerJustificationFlag { return gdnative.Return[TextServerJustificationFlag](gdnative.Object(gdClass), methodTextLine[19]) }
func (gdClass TextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[20], overrun_behavior) }
func (gdClass TextLine) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodTextLine[21]) }
func (gdClass TextLine) GetObjects() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextLine[22]) }
func (gdClass TextLine) GetObjectRect(key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextLine[23], key) }
func (gdClass TextLine) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextLine[24]) }
func (gdClass TextLine) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextLine[25]) }
func (gdClass TextLine) GetLineAscent() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[26]) }
func (gdClass TextLine) GetLineDescent() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[27]) }
func (gdClass TextLine) GetLineWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[28]) }
func (gdClass TextLine) GetLineUnderlinePosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[29]) }
func (gdClass TextLine) GetLineUnderlineThickness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextLine[30]) }
func (gdClass TextLine) Draw(canvas RID, pos Vector2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[31], canvas, pos, color) }
func (gdClass TextLine) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextLine[32], canvas, pos, outline_size, color) }
func (gdClass TextLine) HitTest(coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextLine[33], coords) }

type TextMesh gdnative.Object
func (TextMesh) class() string { return "TextMesh\000" }

func (gdClass TextMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodTextMesh [26]gdnative.Method
func (gdClass TextMesh) SetHorizontalAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[0], alignment) }
func (gdClass TextMesh) GetHorizontalAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextMesh[1]) }
func (gdClass TextMesh) SetText(text string)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[2], text) }
func (gdClass TextMesh) GetText() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextMesh[3]) }
func (gdClass TextMesh) SetFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[4], font) }
func (gdClass TextMesh) GetFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTextMesh[5]) }
func (gdClass TextMesh) SetFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[6], font_size) }
func (gdClass TextMesh) GetFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextMesh[7]) }
func (gdClass TextMesh) SetDepth(depth float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[8], depth) }
func (gdClass TextMesh) GetDepth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[9]) }
func (gdClass TextMesh) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[10], width) }
func (gdClass TextMesh) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[11]) }
func (gdClass TextMesh) SetPixelSize(pixel_size float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[12], pixel_size) }
func (gdClass TextMesh) GetPixelSize() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[13]) }
func (gdClass TextMesh) SetCurveStep(curve_step float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[14], curve_step) }
func (gdClass TextMesh) GetCurveStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextMesh[15]) }
func (gdClass TextMesh) SetTextDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[16], direction) }
func (gdClass TextMesh) GetTextDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextMesh[17]) }
func (gdClass TextMesh) SetLanguage(language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[18], language) }
func (gdClass TextMesh) GetLanguage() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextMesh[19]) }
func (gdClass TextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[20], parser) }
func (gdClass TextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTextMesh[21]) }
func (gdClass TextMesh) SetStructuredTextBidiOverrideOptions(args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[22], args) }
func (gdClass TextMesh) GetStructuredTextBidiOverrideOptions() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextMesh[23]) }
func (gdClass TextMesh) SetUppercase(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextMesh[24], enable) }
func (gdClass TextMesh) IsUppercase() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextMesh[25]) }

type TextParagraph gdnative.Object
func (TextParagraph) class() string { return "TextParagraph\000" }

func (gdClass TextParagraph) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodTextParagraph [54]gdnative.Method
func (gdClass TextParagraph) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[0]) }
func (gdClass TextParagraph) SetDirection(direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[1], direction) }
func (gdClass TextParagraph) GetDirection() TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextParagraph[2]) }
func (gdClass TextParagraph) SetCustomPunctuation(custom_punctuation string)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[3], custom_punctuation) }
func (gdClass TextParagraph) GetCustomPunctuation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextParagraph[4]) }
func (gdClass TextParagraph) SetOrientation(orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[5], orientation) }
func (gdClass TextParagraph) GetOrientation() TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextParagraph[6]) }
func (gdClass TextParagraph) SetPreserveInvalid(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[7], enabled) }
func (gdClass TextParagraph) GetPreserveInvalid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[8]) }
func (gdClass TextParagraph) SetPreserveControl(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[9], enabled) }
func (gdClass TextParagraph) GetPreserveControl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[10]) }
func (gdClass TextParagraph) SetBidiOverride(override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[11], override) }
func (gdClass TextParagraph) SetDropcap(text string, font Font, font_size int64, dropcap_margins Rect2, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[12], text, font, font_size, dropcap_margins, language) }
func (gdClass TextParagraph) ClearDropcap()  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[13]) }
func (gdClass TextParagraph) AddString(text string, font Font, font_size int64, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[14], text, font, font_size, language, meta) }
func (gdClass TextParagraph) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[15], key, size, inline_align, length) }
func (gdClass TextParagraph) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextParagraph[16], key, size, inline_align) }
func (gdClass TextParagraph) SetAlignment(alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[17], alignment) }
func (gdClass TextParagraph) GetAlignment() HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTextParagraph[18]) }
func (gdClass TextParagraph) TabAlign(tab_stops []float32)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[19], tab_stops) }
func (gdClass TextParagraph) SetBreakFlags(flags TextServerLineBreakFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[20], flags) }
func (gdClass TextParagraph) GetBreakFlags() TextServerLineBreakFlag { return gdnative.Return[TextServerLineBreakFlag](gdnative.Object(gdClass), methodTextParagraph[21]) }
func (gdClass TextParagraph) SetJustificationFlags(flags TextServerJustificationFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[22], flags) }
func (gdClass TextParagraph) GetJustificationFlags() TextServerJustificationFlag { return gdnative.Return[TextServerJustificationFlag](gdnative.Object(gdClass), methodTextParagraph[23]) }
func (gdClass TextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[24], overrun_behavior) }
func (gdClass TextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior { return gdnative.Return[TextServerOverrunBehavior](gdnative.Object(gdClass), methodTextParagraph[25]) }
func (gdClass TextParagraph) SetWidth(width float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[26], width) }
func (gdClass TextParagraph) GetWidth() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[27]) }
func (gdClass TextParagraph) GetNonWrappedSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[28]) }
func (gdClass TextParagraph) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[29]) }
func (gdClass TextParagraph) GetRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[30]) }
func (gdClass TextParagraph) GetLineRid(line int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[31], line) }
func (gdClass TextParagraph) GetDropcapRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextParagraph[32]) }
func (gdClass TextParagraph) GetLineCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[33]) }
func (gdClass TextParagraph) SetMaxLinesVisible(max_lines_visible int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[34], max_lines_visible) }
func (gdClass TextParagraph) GetMaxLinesVisible() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[35]) }
func (gdClass TextParagraph) GetLineObjects(line int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextParagraph[36], line) }
func (gdClass TextParagraph) GetLineObjectRect(line int64, key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextParagraph[37], line, key) }
func (gdClass TextParagraph) GetLineSize(line int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[38], line) }
func (gdClass TextParagraph) GetLineRange(line int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextParagraph[39], line) }
func (gdClass TextParagraph) GetLineAscent(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[40], line) }
func (gdClass TextParagraph) GetLineDescent(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[41], line) }
func (gdClass TextParagraph) GetLineWidth(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[42], line) }
func (gdClass TextParagraph) GetLineUnderlinePosition(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[43], line) }
func (gdClass TextParagraph) GetLineUnderlineThickness(line int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextParagraph[44], line) }
func (gdClass TextParagraph) GetDropcapSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextParagraph[45]) }
func (gdClass TextParagraph) GetDropcapLines() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[46]) }
func (gdClass TextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[47], canvas, pos, color, dc_color) }
func (gdClass TextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color, dc_color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[48], canvas, pos, outline_size, color, dc_color) }
func (gdClass TextParagraph) DrawLine(canvas RID, pos Vector2, line int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[49], canvas, pos, line, color) }
func (gdClass TextParagraph) DrawLineOutline(canvas RID, pos Vector2, line int64, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[50], canvas, pos, line, outline_size, color) }
func (gdClass TextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[51], canvas, pos, color) }
func (gdClass TextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextParagraph[52], canvas, pos, outline_size, color) }
func (gdClass TextParagraph) HitTest(coords Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextParagraph[53], coords) }

type TextServerDirection int64

const (
	TextServerDirectionAuto TextServerDirection = 0
	TextServerDirectionLtr TextServerDirection = 1
	TextServerDirectionRtl TextServerDirection = 2
)

type TextServerOrientation int64

const (
	TextServerOrientationHorizontal TextServerOrientation = 0
	TextServerOrientationVertical TextServerOrientation = 1
)

type TextServerJustificationFlag int64

const (
	TextServerJustificationNone TextServerJustificationFlag = 0
	TextServerJustificationKashida TextServerJustificationFlag = 1
	TextServerJustificationWordBound TextServerJustificationFlag = 2
	TextServerJustificationTrimEdgeSpaces TextServerJustificationFlag = 4
	TextServerJustificationAfterLastTab TextServerJustificationFlag = 8
	TextServerJustificationConstrainEllipsis TextServerJustificationFlag = 16
)

type TextServerAutowrapMode int64

const (
	TextServerAutowrapOff TextServerAutowrapMode = 0
	TextServerAutowrapArbitrary TextServerAutowrapMode = 1
	TextServerAutowrapWord TextServerAutowrapMode = 2
	TextServerAutowrapWordSmart TextServerAutowrapMode = 3
)

type TextServerLineBreakFlag int64

const (
	TextServerBreakNone TextServerLineBreakFlag = 0
	TextServerBreakMandatory TextServerLineBreakFlag = 1
	TextServerBreakWordBound TextServerLineBreakFlag = 2
	TextServerBreakGraphemeBound TextServerLineBreakFlag = 4
	TextServerBreakAdaptive TextServerLineBreakFlag = 8
)

type TextServerVisibleCharactersBehavior int64

const (
	TextServerVcCharsBeforeShaping TextServerVisibleCharactersBehavior = 0
	TextServerVcCharsAfterShaping TextServerVisibleCharactersBehavior = 1
	TextServerVcGlyphsAuto TextServerVisibleCharactersBehavior = 2
	TextServerVcGlyphsLtr TextServerVisibleCharactersBehavior = 3
	TextServerVcGlyphsRtl TextServerVisibleCharactersBehavior = 4
)

type TextServerOverrunBehavior int64

const (
	TextServerOverrunNoTrimming TextServerOverrunBehavior = 0
	TextServerOverrunTrimChar TextServerOverrunBehavior = 1
	TextServerOverrunTrimWord TextServerOverrunBehavior = 2
	TextServerOverrunTrimEllipsis TextServerOverrunBehavior = 3
	TextServerOverrunTrimWordEllipsis TextServerOverrunBehavior = 4
)

type TextServerTextOverrunFlag int64

const (
	TextServerOverrunNoTrim TextServerTextOverrunFlag = 0
	TextServerOverrunTrim TextServerTextOverrunFlag = 1
	TextServerOverrunTrimWordOnly TextServerTextOverrunFlag = 2
	TextServerOverrunAddEllipsis TextServerTextOverrunFlag = 4
	TextServerOverrunEnforceEllipsis TextServerTextOverrunFlag = 8
	TextServerOverrunJustificationAware TextServerTextOverrunFlag = 16
)

type TextServerGraphemeFlag int64

const (
	TextServerGraphemeIsValid TextServerGraphemeFlag = 1
	TextServerGraphemeIsRtl TextServerGraphemeFlag = 2
	TextServerGraphemeIsVirtual TextServerGraphemeFlag = 4
	TextServerGraphemeIsSpace TextServerGraphemeFlag = 8
	TextServerGraphemeIsBreakHard TextServerGraphemeFlag = 16
	TextServerGraphemeIsBreakSoft TextServerGraphemeFlag = 32
	TextServerGraphemeIsTab TextServerGraphemeFlag = 64
	TextServerGraphemeIsElongation TextServerGraphemeFlag = 128
	TextServerGraphemeIsPunctuation TextServerGraphemeFlag = 256
	TextServerGraphemeIsUnderscore TextServerGraphemeFlag = 512
	TextServerGraphemeIsConnected TextServerGraphemeFlag = 1024
	TextServerGraphemeIsSafeToInsertTatweel TextServerGraphemeFlag = 2048
)

type TextServerHinting int64

const (
	TextServerHintingNone TextServerHinting = 0
	TextServerHintingLight TextServerHinting = 1
	TextServerHintingNormal TextServerHinting = 2
)

type TextServerSubpixelPositioning int64

const (
	TextServerSubpixelPositioningDisabled TextServerSubpixelPositioning = 0
	TextServerSubpixelPositioningAuto TextServerSubpixelPositioning = 1
	TextServerSubpixelPositioningOneHalf TextServerSubpixelPositioning = 2
	TextServerSubpixelPositioningOneQuarter TextServerSubpixelPositioning = 3
	TextServerSubpixelPositioningOneHalfMaxSize TextServerSubpixelPositioning = 20
	TextServerSubpixelPositioningOneQuarterMaxSize TextServerSubpixelPositioning = 16
)

type TextServerFeature int64

const (
	TextServerFeatureSimpleLayout TextServerFeature = 1
	TextServerFeatureBidiLayout TextServerFeature = 2
	TextServerFeatureVerticalLayout TextServerFeature = 4
	TextServerFeatureShaping TextServerFeature = 8
	TextServerFeatureKashidaJustification TextServerFeature = 16
	TextServerFeatureBreakIterators TextServerFeature = 32
	TextServerFeatureFontBitmap TextServerFeature = 64
	TextServerFeatureFontDynamic TextServerFeature = 128
	TextServerFeatureFontMsdf TextServerFeature = 256
	TextServerFeatureFontSystem TextServerFeature = 512
	TextServerFeatureFontVariable TextServerFeature = 1024
	TextServerFeatureContextSensitiveCaseConversion TextServerFeature = 2048
	TextServerFeatureUseSupportData TextServerFeature = 4096
	TextServerFeatureUnicodeIdentifiers TextServerFeature = 8192
	TextServerFeatureUnicodeSecurity TextServerFeature = 16384
)

type TextServerContourPointTag int64

const (
	TextServerContourCurveTagOn TextServerContourPointTag = 1
	TextServerContourCurveTagOffConic TextServerContourPointTag = 0
	TextServerContourCurveTagOffCubic TextServerContourPointTag = 2
)

type TextServerSpacingType int64

const (
	TextServerSpacingGlyph TextServerSpacingType = 0
	TextServerSpacingSpace TextServerSpacingType = 1
	TextServerSpacingTop TextServerSpacingType = 2
	TextServerSpacingBottom TextServerSpacingType = 3
	TextServerSpacingMax TextServerSpacingType = 4
)

type TextServerFontStyle int64

const (
	TextServerFontBold TextServerFontStyle = 1
	TextServerFontItalic TextServerFontStyle = 2
	TextServerFontFixedWidth TextServerFontStyle = 4
)

type TextServerStructuredTextParser int64

const (
	TextServerStructuredTextDefault TextServerStructuredTextParser = 0
	TextServerStructuredTextUri TextServerStructuredTextParser = 1
	TextServerStructuredTextFile TextServerStructuredTextParser = 2
	TextServerStructuredTextEmail TextServerStructuredTextParser = 3
	TextServerStructuredTextList TextServerStructuredTextParser = 4
	TextServerStructuredTextNone TextServerStructuredTextParser = 5
	TextServerStructuredTextCustom TextServerStructuredTextParser = 6
)

type TextServer gdnative.Object
func (TextServer) class() string { return "TextServer\000" }

func (gdClass TextServer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodTextServer [184]gdnative.Method
func (gdClass TextServer) HasFeature(feature TextServerFeature) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[0], feature) }
func (gdClass TextServer) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[1]) }
func (gdClass TextServer) GetFeatures() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[2]) }
func (gdClass TextServer) LoadSupportData(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[3], filename) }
func (gdClass TextServer) GetSupportDataFilename() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[4]) }
func (gdClass TextServer) GetSupportDataInfo() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[5]) }
func (gdClass TextServer) SaveSupportData(filename string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[6], filename) }
func (gdClass TextServer) IsLocaleRightToLeft(locale string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[7], locale) }
func (gdClass TextServer) NameToTag(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[8], name) }
func (gdClass TextServer) TagToName(tag int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[9], tag) }
func (gdClass TextServer) Has(rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[10], rid) }
func (gdClass TextServer) FreeRid(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[11], rid) }
func (gdClass TextServer) CreateFont() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[12]) }
func (gdClass TextServer) FontSetData(font_rid RID, data []byte)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[13], font_rid, data) }
func (gdClass TextServer) FontSetFaceIndex(font_rid RID, face_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[14], font_rid, face_index) }
func (gdClass TextServer) FontGetFaceIndex(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[15], font_rid) }
func (gdClass TextServer) FontGetFaceCount(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[16], font_rid) }
func (gdClass TextServer) FontSetStyle(font_rid RID, style TextServerFontStyle)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[17], font_rid, style) }
func (gdClass TextServer) FontGetStyle(font_rid RID) TextServerFontStyle { return gdnative.Return[TextServerFontStyle](gdnative.Object(gdClass), methodTextServer[18], font_rid) }
func (gdClass TextServer) FontSetName(font_rid RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[19], font_rid, name) }
func (gdClass TextServer) FontGetName(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[20], font_rid) }
func (gdClass TextServer) FontSetStyleName(font_rid RID, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[21], font_rid, name) }
func (gdClass TextServer) FontGetStyleName(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[22], font_rid) }
func (gdClass TextServer) FontSetAntialiased(font_rid RID, antialiased bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[23], font_rid, antialiased) }
func (gdClass TextServer) FontIsAntialiased(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[24], font_rid) }
func (gdClass TextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[25], font_rid, generate_mipmaps) }
func (gdClass TextServer) FontGetGenerateMipmaps(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[26], font_rid) }
func (gdClass TextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[27], font_rid, msdf) }
func (gdClass TextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[28], font_rid) }
func (gdClass TextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[29], font_rid, msdf_pixel_range) }
func (gdClass TextServer) FontGetMsdfPixelRange(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[30], font_rid) }
func (gdClass TextServer) FontSetMsdfSize(font_rid RID, msdf_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[31], font_rid, msdf_size) }
func (gdClass TextServer) FontGetMsdfSize(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[32], font_rid) }
func (gdClass TextServer) FontSetFixedSize(font_rid RID, fixed_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[33], font_rid, fixed_size) }
func (gdClass TextServer) FontGetFixedSize(font_rid RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[34], font_rid) }
func (gdClass TextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[35], font_rid, force_autohinter) }
func (gdClass TextServer) FontIsForceAutohinter(font_rid RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[36], font_rid) }
func (gdClass TextServer) FontSetHinting(font_rid RID, hinting TextServerHinting)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[37], font_rid, hinting) }
func (gdClass TextServer) FontGetHinting(font_rid RID) TextServerHinting { return gdnative.Return[TextServerHinting](gdnative.Object(gdClass), methodTextServer[38], font_rid) }
func (gdClass TextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[39], font_rid, subpixel_positioning) }
func (gdClass TextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning { return gdnative.Return[TextServerSubpixelPositioning](gdnative.Object(gdClass), methodTextServer[40], font_rid) }
func (gdClass TextServer) FontSetEmbolden(font_rid RID, strength float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[41], font_rid, strength) }
func (gdClass TextServer) FontGetEmbolden(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[42], font_rid) }
func (gdClass TextServer) FontSetTransform(font_rid RID, transform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[43], font_rid, transform) }
func (gdClass TextServer) FontGetTransform(font_rid RID) Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodTextServer[44], font_rid) }
func (gdClass TextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[45], font_rid, variation_coordinates) }
func (gdClass TextServer) FontGetVariationCoordinates(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[46], font_rid) }
func (gdClass TextServer) FontSetOversampling(font_rid RID, oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[47], font_rid, oversampling) }
func (gdClass TextServer) FontGetOversampling(font_rid RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[48], font_rid) }
func (gdClass TextServer) FontGetSizeCacheList(font_rid RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[49], font_rid) }
func (gdClass TextServer) FontClearSizeCache(font_rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[50], font_rid) }
func (gdClass TextServer) FontRemoveSizeCache(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[51], font_rid, size) }
func (gdClass TextServer) FontSetAscent(font_rid RID, size int64, ascent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[52], font_rid, size, ascent) }
func (gdClass TextServer) FontGetAscent(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[53], font_rid, size) }
func (gdClass TextServer) FontSetDescent(font_rid RID, size int64, descent float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[54], font_rid, size, descent) }
func (gdClass TextServer) FontGetDescent(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[55], font_rid, size) }
func (gdClass TextServer) FontSetUnderlinePosition(font_rid RID, size int64, underline_position float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[56], font_rid, size, underline_position) }
func (gdClass TextServer) FontGetUnderlinePosition(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[57], font_rid, size) }
func (gdClass TextServer) FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[58], font_rid, size, underline_thickness) }
func (gdClass TextServer) FontGetUnderlineThickness(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[59], font_rid, size) }
func (gdClass TextServer) FontSetScale(font_rid RID, size int64, scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[60], font_rid, size, scale) }
func (gdClass TextServer) FontGetScale(font_rid RID, size int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[61], font_rid, size) }
func (gdClass TextServer) FontGetTextureCount(font_rid RID, size Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[62], font_rid, size) }
func (gdClass TextServer) FontClearTextures(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[63], font_rid, size) }
func (gdClass TextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[64], font_rid, size, texture_index) }
func (gdClass TextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[65], font_rid, size, texture_index, image) }
func (gdClass TextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextServer[66], font_rid, size, texture_index) }
func (gdClass TextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset []int32)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[67], font_rid, size, texture_index, offset) }
func (gdClass TextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[68], font_rid, size, texture_index) }
func (gdClass TextServer) FontGetGlyphList(font_rid RID, size Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[69], font_rid, size) }
func (gdClass TextServer) FontClearGlyphs(font_rid RID, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[70], font_rid, size) }
func (gdClass TextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[71], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[72], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[73], font_rid, size, glyph, advance) }
func (gdClass TextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[74], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[75], font_rid, size, glyph, offset) }
func (gdClass TextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[76], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[77], font_rid, size, glyph, gl_size) }
func (gdClass TextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServer[78], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[79], font_rid, size, glyph, uv_rect) }
func (gdClass TextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[80], font_rid, size, glyph) }
func (gdClass TextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[81], font_rid, size, glyph, texture_idx) }
func (gdClass TextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[82], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[83], font_rid, size, glyph) }
func (gdClass TextServer) FontGetGlyphContours(font RID, size int64, index int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[84], font, size, index) }
func (gdClass TextServer) FontGetKerningList(font_rid RID, size int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[85], font_rid, size) }
func (gdClass TextServer) FontClearKerningMap(font_rid RID, size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[86], font_rid, size) }
func (gdClass TextServer) FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[87], font_rid, size, glyph_pair) }
func (gdClass TextServer) FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[88], font_rid, size, glyph_pair, kerning) }
func (gdClass TextServer) FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[89], font_rid, size, glyph_pair) }
func (gdClass TextServer) FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[90], font_rid, size, char, variation_selector) }
func (gdClass TextServer) FontHasChar(font_rid RID, char int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[91], font_rid, char) }
func (gdClass TextServer) FontGetSupportedChars(font_rid RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[92], font_rid) }
func (gdClass TextServer) FontRenderRange(font_rid RID, size Vector2i, start int64, end int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[93], font_rid, size, start, end) }
func (gdClass TextServer) FontRenderGlyph(font_rid RID, size Vector2i, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[94], font_rid, size, index) }
func (gdClass TextServer) FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[95], font_rid, canvas, size, pos, index, color) }
func (gdClass TextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[96], font_rid, canvas, size, outline_size, pos, index, color) }
func (gdClass TextServer) FontIsLanguageSupported(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[97], font_rid, language) }
func (gdClass TextServer) FontSetLanguageSupportOverride(font_rid RID, language string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[98], font_rid, language, supported) }
func (gdClass TextServer) FontGetLanguageSupportOverride(font_rid RID, language string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[99], font_rid, language) }
func (gdClass TextServer) FontRemoveLanguageSupportOverride(font_rid RID, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[100], font_rid, language) }
func (gdClass TextServer) FontGetLanguageSupportOverrides(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServer[101], font_rid) }
func (gdClass TextServer) FontIsScriptSupported(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[102], font_rid, script) }
func (gdClass TextServer) FontSetScriptSupportOverride(font_rid RID, script string, supported bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[103], font_rid, script, supported) }
func (gdClass TextServer) FontGetScriptSupportOverride(font_rid RID, script string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[104], font_rid, script) }
func (gdClass TextServer) FontRemoveScriptSupportOverride(font_rid RID, script string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[105], font_rid, script) }
func (gdClass TextServer) FontGetScriptSupportOverrides(font_rid RID) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTextServer[106], font_rid) }
func (gdClass TextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[107], font_rid, overrides) }
func (gdClass TextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[108], font_rid) }
func (gdClass TextServer) FontSupportedFeatureList(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[109], font_rid) }
func (gdClass TextServer) FontSupportedVariationList(font_rid RID) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[110], font_rid) }
func (gdClass TextServer) FontGetGlobalOversampling() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[111]) }
func (gdClass TextServer) FontSetGlobalOversampling(oversampling float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[112], oversampling) }
func (gdClass TextServer) GetHexCodeBoxSize(size int64, index int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[113], size, index) }
func (gdClass TextServer) DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[114], canvas, size, pos, index, color) }
func (gdClass TextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[115], direction, orientation) }
func (gdClass TextServer) ShapedTextClear(rid RID)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[116], rid) }
func (gdClass TextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[117], shaped, direction) }
func (gdClass TextServer) ShapedTextGetDirection(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[118], shaped) }
func (gdClass TextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[119], shaped) }
func (gdClass TextServer) ShapedTextSetBidiOverride(shaped RID, override Array)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[120], shaped, override) }
func (gdClass TextServer) ShapedTextSetCustomPunctuation(shaped RID, punct string)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[121], shaped, punct) }
func (gdClass TextServer) ShapedTextGetCustomPunctuation(shaped RID) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[122], shaped) }
func (gdClass TextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[123], shaped, orientation) }
func (gdClass TextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation { return gdnative.Return[TextServerOrientation](gdnative.Object(gdClass), methodTextServer[124], shaped) }
func (gdClass TextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[125], shaped, enabled) }
func (gdClass TextServer) ShapedTextGetPreserveInvalid(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[126], shaped) }
func (gdClass TextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[127], shaped, enabled) }
func (gdClass TextServer) ShapedTextGetPreserveControl(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[128], shaped) }
func (gdClass TextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[129], shaped, spacing, value) }
func (gdClass TextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[130], shaped, spacing) }
func (gdClass TextServer) ShapedTextAddString(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[131], shaped, text, fonts, size, opentype_features, language, meta) }
func (gdClass TextServer) ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[132], shaped, key, size, inline_align, length) }
func (gdClass TextServer) ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[133], shaped, key, size, inline_align) }
func (gdClass TextServer) ShapedGetSpanCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[134], shaped) }
func (gdClass TextServer) ShapedGetSpanMeta(shaped RID, index int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTextServer[135], shaped, index) }
func (gdClass TextServer) ShapedSetSpanUpdateFont(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[136], shaped, index, fonts, size, opentype_features) }
func (gdClass TextServer) ShapedTextSubstr(shaped RID, start int64, length int64) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[137], shaped, start, length) }
func (gdClass TextServer) ShapedTextGetParent(shaped RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodTextServer[138], shaped) }
func (gdClass TextServer) ShapedTextFitToWidth(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[139], shaped, width, jst_flags) }
func (gdClass TextServer) ShapedTextTabAlign(shaped RID, tab_stops []float32) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[140], shaped, tab_stops) }
func (gdClass TextServer) ShapedTextShape(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[141], shaped) }
func (gdClass TextServer) ShapedTextIsReady(shaped RID) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[142], shaped) }
func (gdClass TextServer) ShapedTextGetGlyphs(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[143], shaped) }
func (gdClass TextServer) ShapedTextSortLogical(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[144], shaped) }
func (gdClass TextServer) ShapedTextGetGlyphCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[145], shaped) }
func (gdClass TextServer) ShapedTextGetRange(shaped RID) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTextServer[146], shaped) }
func (gdClass TextServer) ShapedTextGetLineBreaksAdv(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[147], shaped, width, start, once, break_flags) }
func (gdClass TextServer) ShapedTextGetLineBreaks(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[148], shaped, width, start, break_flags) }
func (gdClass TextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[149], shaped, grapheme_flags) }
func (gdClass TextServer) ShapedTextGetTrimPos(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[150], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisPos(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[151], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphs(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[152], shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[153], shaped) }
func (gdClass TextServer) ShapedTextOverrunTrimToWidth(shaped RID, width float64, overrun_trim_flags TextServerTextOverrunFlag)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[154], shaped, width, overrun_trim_flags) }
func (gdClass TextServer) ShapedTextGetObjects(shaped RID) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[155], shaped) }
func (gdClass TextServer) ShapedTextGetObjectRect(shaped RID, key any) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTextServer[156], shaped, key) }
func (gdClass TextServer) ShapedTextGetSize(shaped RID) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[157], shaped) }
func (gdClass TextServer) ShapedTextGetAscent(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[158], shaped) }
func (gdClass TextServer) ShapedTextGetDescent(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[159], shaped) }
func (gdClass TextServer) ShapedTextGetWidth(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[160], shaped) }
func (gdClass TextServer) ShapedTextGetUnderlinePosition(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[161], shaped) }
func (gdClass TextServer) ShapedTextGetUnderlineThickness(shaped RID) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextServer[162], shaped) }
func (gdClass TextServer) ShapedTextGetCarets(shaped RID, position int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTextServer[163], shaped, position) }
func (gdClass TextServer) ShapedTextGetSelection(shaped RID, start int64, end int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTextServer[164], shaped, start, end) }
func (gdClass TextServer) ShapedTextHitTestGrapheme(shaped RID, coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[165], shaped, coords) }
func (gdClass TextServer) ShapedTextHitTestPosition(shaped RID, coords float64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[166], shaped, coords) }
func (gdClass TextServer) ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextServer[167], shaped, pos) }
func (gdClass TextServer) ShapedTextNextGraphemePos(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[168], shaped, pos) }
func (gdClass TextServer) ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[169], shaped, pos) }
func (gdClass TextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[170], shaped, canvas, pos, clip_l, clip_r, color) }
func (gdClass TextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextServer[171], shaped, canvas, pos, clip_l, clip_r, outline_size, color) }
func (gdClass TextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) TextServerDirection { return gdnative.Return[TextServerDirection](gdnative.Object(gdClass), methodTextServer[172], shaped, start, end) }
func (gdClass TextServer) FormatNumber(number string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[173], number, language) }
func (gdClass TextServer) ParseNumber(number string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[174], number, language) }
func (gdClass TextServer) PercentSign(language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[175], language) }
func (gdClass TextServer) StringGetWordBreaks(s string, language string) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodTextServer[176], s, language) }
func (gdClass TextServer) IsConfusable(s string, dict []string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServer[177], s, dict) }
func (gdClass TextServer) SpoofCheck(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[178], s) }
func (gdClass TextServer) StripDiacritics(s string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[179], s) }
func (gdClass TextServer) IsValidIdentifier(s string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextServer[180], s) }
func (gdClass TextServer) StringToUpper(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[181], s, language) }
func (gdClass TextServer) StringToLower(s string, language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTextServer[182], s, language) }
func (gdClass TextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServer[183], parser_type, args, text) }

type TextServerAdvanced gdnative.Object
func (TextServerAdvanced) class() string { return "TextServerAdvanced\000" }

func (gdClass TextServerAdvanced) TextServerExtension() TextServerExtension { return TextServerExtension(gdClass) }


type TextServerDummy gdnative.Object
func (TextServerDummy) class() string { return "TextServerDummy\000" }

func (gdClass TextServerDummy) TextServerExtension() TextServerExtension { return TextServerExtension(gdClass) }


type TextServerExtension gdnative.Object
func (TextServerExtension) class() string { return "TextServerExtension\000" }

func (gdClass TextServerExtension) TextServer() TextServer { return TextServer(gdClass) }

func (gdClass TextServerExtension) virtual(val any, name string) any {	switch name {
	case "has_feature":
		i, ok := val.(interface{ HasFeature(feature TextServerFeature) bool })
		if ok {
			return i.HasFeature
		}
	case "get_name":
		i, ok := val.(interface{ GetName() string })
		if ok {
			return i.GetName
		}
	case "get_features":
		i, ok := val.(interface{ GetFeatures() int64 })
		if ok {
			return i.GetFeatures
		}
	case "free_rid":
		i, ok := val.(interface{ FreeRid(rid RID)  })
		if ok {
			return i.FreeRid
		}
	case "has":
		i, ok := val.(interface{ Has(rid RID) bool })
		if ok {
			return i.Has
		}
	case "load_support_data":
		i, ok := val.(interface{ LoadSupportData(filename string) bool })
		if ok {
			return i.LoadSupportData
		}
	case "get_support_data_filename":
		i, ok := val.(interface{ GetSupportDataFilename() string })
		if ok {
			return i.GetSupportDataFilename
		}
	case "get_support_data_info":
		i, ok := val.(interface{ GetSupportDataInfo() string })
		if ok {
			return i.GetSupportDataInfo
		}
	case "save_support_data":
		i, ok := val.(interface{ SaveSupportData(filename string) bool })
		if ok {
			return i.SaveSupportData
		}
	case "is_locale_right_to_left":
		i, ok := val.(interface{ IsLocaleRightToLeft(locale string) bool })
		if ok {
			return i.IsLocaleRightToLeft
		}
	case "name_to_tag":
		i, ok := val.(interface{ NameToTag(name string) int64 })
		if ok {
			return i.NameToTag
		}
	case "tag_to_name":
		i, ok := val.(interface{ TagToName(tag int64) string })
		if ok {
			return i.TagToName
		}
	case "create_font":
		i, ok := val.(interface{ CreateFont() RID })
		if ok {
			return i.CreateFont
		}
	case "font_set_data":
		i, ok := val.(interface{ FontSetData(font_rid RID, data []byte)  })
		if ok {
			return i.FontSetData
		}
	case "font_set_data_ptr":
		i, ok := val.(interface{ FontSetDataPtr(font_rid RID, data_ptr []byte, data_size int64)  })
		if ok {
			return i.FontSetDataPtr
		}
	case "font_set_face_index":
		i, ok := val.(interface{ FontSetFaceIndex(font_rid RID, face_index int64)  })
		if ok {
			return i.FontSetFaceIndex
		}
	case "font_get_face_index":
		i, ok := val.(interface{ FontGetFaceIndex(font_rid RID) int64 })
		if ok {
			return i.FontGetFaceIndex
		}
	case "font_get_face_count":
		i, ok := val.(interface{ FontGetFaceCount(font_rid RID) int64 })
		if ok {
			return i.FontGetFaceCount
		}
	case "font_set_style":
		i, ok := val.(interface{ FontSetStyle(font_rid RID, style TextServerFontStyle)  })
		if ok {
			return i.FontSetStyle
		}
	case "font_get_style":
		i, ok := val.(interface{ FontGetStyle(font_rid RID) TextServerFontStyle })
		if ok {
			return i.FontGetStyle
		}
	case "font_set_name":
		i, ok := val.(interface{ FontSetName(font_rid RID, name string)  })
		if ok {
			return i.FontSetName
		}
	case "font_get_name":
		i, ok := val.(interface{ FontGetName(font_rid RID) string })
		if ok {
			return i.FontGetName
		}
	case "font_set_style_name":
		i, ok := val.(interface{ FontSetStyleName(font_rid RID, name_style string)  })
		if ok {
			return i.FontSetStyleName
		}
	case "font_get_style_name":
		i, ok := val.(interface{ FontGetStyleName(font_rid RID) string })
		if ok {
			return i.FontGetStyleName
		}
	case "font_set_antialiased":
		i, ok := val.(interface{ FontSetAntialiased(font_rid RID, antialiased bool)  })
		if ok {
			return i.FontSetAntialiased
		}
	case "font_is_antialiased":
		i, ok := val.(interface{ FontIsAntialiased(font_rid RID) bool })
		if ok {
			return i.FontIsAntialiased
		}
	case "font_set_generate_mipmaps":
		i, ok := val.(interface{ FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool)  })
		if ok {
			return i.FontSetGenerateMipmaps
		}
	case "font_get_generate_mipmaps":
		i, ok := val.(interface{ FontGetGenerateMipmaps(font_rid RID) bool })
		if ok {
			return i.FontGetGenerateMipmaps
		}
	case "font_set_multichannel_signed_distance_field":
		i, ok := val.(interface{ FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool)  })
		if ok {
			return i.FontSetMultichannelSignedDistanceField
		}
	case "font_is_multichannel_signed_distance_field":
		i, ok := val.(interface{ FontIsMultichannelSignedDistanceField(font_rid RID) bool })
		if ok {
			return i.FontIsMultichannelSignedDistanceField
		}
	case "font_set_msdf_pixel_range":
		i, ok := val.(interface{ FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64)  })
		if ok {
			return i.FontSetMsdfPixelRange
		}
	case "font_get_msdf_pixel_range":
		i, ok := val.(interface{ FontGetMsdfPixelRange(font_rid RID) int64 })
		if ok {
			return i.FontGetMsdfPixelRange
		}
	case "font_set_msdf_size":
		i, ok := val.(interface{ FontSetMsdfSize(font_rid RID, msdf_size int64)  })
		if ok {
			return i.FontSetMsdfSize
		}
	case "font_get_msdf_size":
		i, ok := val.(interface{ FontGetMsdfSize(font_rid RID) int64 })
		if ok {
			return i.FontGetMsdfSize
		}
	case "font_set_fixed_size":
		i, ok := val.(interface{ FontSetFixedSize(font_rid RID, fixed_size int64)  })
		if ok {
			return i.FontSetFixedSize
		}
	case "font_get_fixed_size":
		i, ok := val.(interface{ FontGetFixedSize(font_rid RID) int64 })
		if ok {
			return i.FontGetFixedSize
		}
	case "font_set_force_autohinter":
		i, ok := val.(interface{ FontSetForceAutohinter(font_rid RID, force_autohinter bool)  })
		if ok {
			return i.FontSetForceAutohinter
		}
	case "font_is_force_autohinter":
		i, ok := val.(interface{ FontIsForceAutohinter(font_rid RID) bool })
		if ok {
			return i.FontIsForceAutohinter
		}
	case "font_set_hinting":
		i, ok := val.(interface{ FontSetHinting(font_rid RID, hinting TextServerHinting)  })
		if ok {
			return i.FontSetHinting
		}
	case "font_get_hinting":
		i, ok := val.(interface{ FontGetHinting(font_rid RID) TextServerHinting })
		if ok {
			return i.FontGetHinting
		}
	case "font_set_subpixel_positioning":
		i, ok := val.(interface{ FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  })
		if ok {
			return i.FontSetSubpixelPositioning
		}
	case "font_get_subpixel_positioning":
		i, ok := val.(interface{ FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning })
		if ok {
			return i.FontGetSubpixelPositioning
		}
	case "font_set_embolden":
		i, ok := val.(interface{ FontSetEmbolden(font_rid RID, strength float64)  })
		if ok {
			return i.FontSetEmbolden
		}
	case "font_get_embolden":
		i, ok := val.(interface{ FontGetEmbolden(font_rid RID) float64 })
		if ok {
			return i.FontGetEmbolden
		}
	case "font_set_transform":
		i, ok := val.(interface{ FontSetTransform(font_rid RID, transform Transform2D)  })
		if ok {
			return i.FontSetTransform
		}
	case "font_get_transform":
		i, ok := val.(interface{ FontGetTransform(font_rid RID) Transform2D })
		if ok {
			return i.FontGetTransform
		}
	case "font_set_variation_coordinates":
		i, ok := val.(interface{ FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary)  })
		if ok {
			return i.FontSetVariationCoordinates
		}
	case "font_get_variation_coordinates":
		i, ok := val.(interface{ FontGetVariationCoordinates(font_rid RID) Dictionary })
		if ok {
			return i.FontGetVariationCoordinates
		}
	case "font_set_oversampling":
		i, ok := val.(interface{ FontSetOversampling(font_rid RID, oversampling float64)  })
		if ok {
			return i.FontSetOversampling
		}
	case "font_get_oversampling":
		i, ok := val.(interface{ FontGetOversampling(font_rid RID) float64 })
		if ok {
			return i.FontGetOversampling
		}
	case "font_get_size_cache_list":
		i, ok := val.(interface{ FontGetSizeCacheList(font_rid RID) Array })
		if ok {
			return i.FontGetSizeCacheList
		}
	case "font_clear_size_cache":
		i, ok := val.(interface{ FontClearSizeCache(font_rid RID)  })
		if ok {
			return i.FontClearSizeCache
		}
	case "font_remove_size_cache":
		i, ok := val.(interface{ FontRemoveSizeCache(font_rid RID, size Vector2i)  })
		if ok {
			return i.FontRemoveSizeCache
		}
	case "font_set_ascent":
		i, ok := val.(interface{ FontSetAscent(font_rid RID, size int64, ascent float64)  })
		if ok {
			return i.FontSetAscent
		}
	case "font_get_ascent":
		i, ok := val.(interface{ FontGetAscent(font_rid RID, size int64) float64 })
		if ok {
			return i.FontGetAscent
		}
	case "font_set_descent":
		i, ok := val.(interface{ FontSetDescent(font_rid RID, size int64, descent float64)  })
		if ok {
			return i.FontSetDescent
		}
	case "font_get_descent":
		i, ok := val.(interface{ FontGetDescent(font_rid RID, size int64) float64 })
		if ok {
			return i.FontGetDescent
		}
	case "font_set_underline_position":
		i, ok := val.(interface{ FontSetUnderlinePosition(font_rid RID, size int64, underline_position float64)  })
		if ok {
			return i.FontSetUnderlinePosition
		}
	case "font_get_underline_position":
		i, ok := val.(interface{ FontGetUnderlinePosition(font_rid RID, size int64) float64 })
		if ok {
			return i.FontGetUnderlinePosition
		}
	case "font_set_underline_thickness":
		i, ok := val.(interface{ FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness float64)  })
		if ok {
			return i.FontSetUnderlineThickness
		}
	case "font_get_underline_thickness":
		i, ok := val.(interface{ FontGetUnderlineThickness(font_rid RID, size int64) float64 })
		if ok {
			return i.FontGetUnderlineThickness
		}
	case "font_set_scale":
		i, ok := val.(interface{ FontSetScale(font_rid RID, size int64, scale float64)  })
		if ok {
			return i.FontSetScale
		}
	case "font_get_scale":
		i, ok := val.(interface{ FontGetScale(font_rid RID, size int64) float64 })
		if ok {
			return i.FontGetScale
		}
	case "font_get_texture_count":
		i, ok := val.(interface{ FontGetTextureCount(font_rid RID, size Vector2i) int64 })
		if ok {
			return i.FontGetTextureCount
		}
	case "font_clear_textures":
		i, ok := val.(interface{ FontClearTextures(font_rid RID, size Vector2i)  })
		if ok {
			return i.FontClearTextures
		}
	case "font_remove_texture":
		i, ok := val.(interface{ FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64)  })
		if ok {
			return i.FontRemoveTexture
		}
	case "font_set_texture_image":
		i, ok := val.(interface{ FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image)  })
		if ok {
			return i.FontSetTextureImage
		}
	case "font_get_texture_image":
		i, ok := val.(interface{ FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image })
		if ok {
			return i.FontGetTextureImage
		}
	case "font_set_texture_offsets":
		i, ok := val.(interface{ FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset []int32)  })
		if ok {
			return i.FontSetTextureOffsets
		}
	case "font_get_texture_offsets":
		i, ok := val.(interface{ FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) []int32 })
		if ok {
			return i.FontGetTextureOffsets
		}
	case "font_get_glyph_list":
		i, ok := val.(interface{ FontGetGlyphList(font_rid RID, size Vector2i) Array })
		if ok {
			return i.FontGetGlyphList
		}
	case "font_clear_glyphs":
		i, ok := val.(interface{ FontClearGlyphs(font_rid RID, size Vector2i)  })
		if ok {
			return i.FontClearGlyphs
		}
	case "font_remove_glyph":
		i, ok := val.(interface{ FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64)  })
		if ok {
			return i.FontRemoveGlyph
		}
	case "font_get_glyph_advance":
		i, ok := val.(interface{ FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 })
		if ok {
			return i.FontGetGlyphAdvance
		}
	case "font_set_glyph_advance":
		i, ok := val.(interface{ FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2)  })
		if ok {
			return i.FontSetGlyphAdvance
		}
	case "font_get_glyph_offset":
		i, ok := val.(interface{ FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 })
		if ok {
			return i.FontGetGlyphOffset
		}
	case "font_set_glyph_offset":
		i, ok := val.(interface{ FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2)  })
		if ok {
			return i.FontSetGlyphOffset
		}
	case "font_get_glyph_size":
		i, ok := val.(interface{ FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 })
		if ok {
			return i.FontGetGlyphSize
		}
	case "font_set_glyph_size":
		i, ok := val.(interface{ FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  })
		if ok {
			return i.FontSetGlyphSize
		}
	case "font_get_glyph_uv_rect":
		i, ok := val.(interface{ FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 })
		if ok {
			return i.FontGetGlyphUvRect
		}
	case "font_set_glyph_uv_rect":
		i, ok := val.(interface{ FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  })
		if ok {
			return i.FontSetGlyphUvRect
		}
	case "font_get_glyph_texture_idx":
		i, ok := val.(interface{ FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 })
		if ok {
			return i.FontGetGlyphTextureIdx
		}
	case "font_set_glyph_texture_idx":
		i, ok := val.(interface{ FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  })
		if ok {
			return i.FontSetGlyphTextureIdx
		}
	case "font_get_glyph_texture_rid":
		i, ok := val.(interface{ FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID })
		if ok {
			return i.FontGetGlyphTextureRid
		}
	case "font_get_glyph_texture_size":
		i, ok := val.(interface{ FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 })
		if ok {
			return i.FontGetGlyphTextureSize
		}
	case "font_get_glyph_contours":
		i, ok := val.(interface{ FontGetGlyphContours(font_rid RID, size int64, index int64) Dictionary })
		if ok {
			return i.FontGetGlyphContours
		}
	case "font_get_kerning_list":
		i, ok := val.(interface{ FontGetKerningList(font_rid RID, size int64) Array })
		if ok {
			return i.FontGetKerningList
		}
	case "font_clear_kerning_map":
		i, ok := val.(interface{ FontClearKerningMap(font_rid RID, size int64)  })
		if ok {
			return i.FontClearKerningMap
		}
	case "font_remove_kerning":
		i, ok := val.(interface{ FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i)  })
		if ok {
			return i.FontRemoveKerning
		}
	case "font_set_kerning":
		i, ok := val.(interface{ FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  })
		if ok {
			return i.FontSetKerning
		}
	case "font_get_kerning":
		i, ok := val.(interface{ FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 })
		if ok {
			return i.FontGetKerning
		}
	case "font_get_glyph_index":
		i, ok := val.(interface{ FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 })
		if ok {
			return i.FontGetGlyphIndex
		}
	case "font_has_char":
		i, ok := val.(interface{ FontHasChar(font_rid RID, char int64) bool })
		if ok {
			return i.FontHasChar
		}
	case "font_get_supported_chars":
		i, ok := val.(interface{ FontGetSupportedChars(font_rid RID) string })
		if ok {
			return i.FontGetSupportedChars
		}
	case "font_render_range":
		i, ok := val.(interface{ FontRenderRange(font_rid RID, size Vector2i, start int64, end int64)  })
		if ok {
			return i.FontRenderRange
		}
	case "font_render_glyph":
		i, ok := val.(interface{ FontRenderGlyph(font_rid RID, size Vector2i, index int64)  })
		if ok {
			return i.FontRenderGlyph
		}
	case "font_draw_glyph":
		i, ok := val.(interface{ FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  })
		if ok {
			return i.FontDrawGlyph
		}
	case "font_draw_glyph_outline":
		i, ok := val.(interface{ FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  })
		if ok {
			return i.FontDrawGlyphOutline
		}
	case "font_is_language_supported":
		i, ok := val.(interface{ FontIsLanguageSupported(font_rid RID, language string) bool })
		if ok {
			return i.FontIsLanguageSupported
		}
	case "font_set_language_support_override":
		i, ok := val.(interface{ FontSetLanguageSupportOverride(font_rid RID, language string, supported bool)  })
		if ok {
			return i.FontSetLanguageSupportOverride
		}
	case "font_get_language_support_override":
		i, ok := val.(interface{ FontGetLanguageSupportOverride(font_rid RID, language string) bool })
		if ok {
			return i.FontGetLanguageSupportOverride
		}
	case "font_remove_language_support_override":
		i, ok := val.(interface{ FontRemoveLanguageSupportOverride(font_rid RID, language string)  })
		if ok {
			return i.FontRemoveLanguageSupportOverride
		}
	case "font_get_language_support_overrides":
		i, ok := val.(interface{ FontGetLanguageSupportOverrides(font_rid RID) []string })
		if ok {
			return i.FontGetLanguageSupportOverrides
		}
	case "font_is_script_supported":
		i, ok := val.(interface{ FontIsScriptSupported(font_rid RID, script string) bool })
		if ok {
			return i.FontIsScriptSupported
		}
	case "font_set_script_support_override":
		i, ok := val.(interface{ FontSetScriptSupportOverride(font_rid RID, script string, supported bool)  })
		if ok {
			return i.FontSetScriptSupportOverride
		}
	case "font_get_script_support_override":
		i, ok := val.(interface{ FontGetScriptSupportOverride(font_rid RID, script string) bool })
		if ok {
			return i.FontGetScriptSupportOverride
		}
	case "font_remove_script_support_override":
		i, ok := val.(interface{ FontRemoveScriptSupportOverride(font_rid RID, script string)  })
		if ok {
			return i.FontRemoveScriptSupportOverride
		}
	case "font_get_script_support_overrides":
		i, ok := val.(interface{ FontGetScriptSupportOverrides(font_rid RID) []string })
		if ok {
			return i.FontGetScriptSupportOverrides
		}
	case "font_set_opentype_feature_overrides":
		i, ok := val.(interface{ FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary)  })
		if ok {
			return i.FontSetOpentypeFeatureOverrides
		}
	case "font_get_opentype_feature_overrides":
		i, ok := val.(interface{ FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary })
		if ok {
			return i.FontGetOpentypeFeatureOverrides
		}
	case "font_supported_feature_list":
		i, ok := val.(interface{ FontSupportedFeatureList(font_rid RID) Dictionary })
		if ok {
			return i.FontSupportedFeatureList
		}
	case "font_supported_variation_list":
		i, ok := val.(interface{ FontSupportedVariationList(font_rid RID) Dictionary })
		if ok {
			return i.FontSupportedVariationList
		}
	case "font_get_global_oversampling":
		i, ok := val.(interface{ FontGetGlobalOversampling() float64 })
		if ok {
			return i.FontGetGlobalOversampling
		}
	case "font_set_global_oversampling":
		i, ok := val.(interface{ FontSetGlobalOversampling(oversampling float64)  })
		if ok {
			return i.FontSetGlobalOversampling
		}
	case "get_hex_code_box_size":
		i, ok := val.(interface{ GetHexCodeBoxSize(size int64, index int64) Vector2 })
		if ok {
			return i.GetHexCodeBoxSize
		}
	case "draw_hex_code_box":
		i, ok := val.(interface{ DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color)  })
		if ok {
			return i.DrawHexCodeBox
		}
	case "create_shaped_text":
		i, ok := val.(interface{ CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID })
		if ok {
			return i.CreateShapedText
		}
	case "shaped_text_clear":
		i, ok := val.(interface{ ShapedTextClear(shaped RID)  })
		if ok {
			return i.ShapedTextClear
		}
	case "shaped_text_set_direction":
		i, ok := val.(interface{ ShapedTextSetDirection(shaped RID, direction TextServerDirection)  })
		if ok {
			return i.ShapedTextSetDirection
		}
	case "shaped_text_get_direction":
		i, ok := val.(interface{ ShapedTextGetDirection(shaped RID) TextServerDirection })
		if ok {
			return i.ShapedTextGetDirection
		}
	case "shaped_text_get_inferred_direction":
		i, ok := val.(interface{ ShapedTextGetInferredDirection(shaped RID) TextServerDirection })
		if ok {
			return i.ShapedTextGetInferredDirection
		}
	case "shaped_text_set_bidi_override":
		i, ok := val.(interface{ ShapedTextSetBidiOverride(shaped RID, override Array)  })
		if ok {
			return i.ShapedTextSetBidiOverride
		}
	case "shaped_text_set_custom_punctuation":
		i, ok := val.(interface{ ShapedTextSetCustomPunctuation(shaped RID, punct string)  })
		if ok {
			return i.ShapedTextSetCustomPunctuation
		}
	case "shaped_text_get_custom_punctuation":
		i, ok := val.(interface{ ShapedTextGetCustomPunctuation(shaped RID) string })
		if ok {
			return i.ShapedTextGetCustomPunctuation
		}
	case "shaped_text_set_orientation":
		i, ok := val.(interface{ ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation)  })
		if ok {
			return i.ShapedTextSetOrientation
		}
	case "shaped_text_get_orientation":
		i, ok := val.(interface{ ShapedTextGetOrientation(shaped RID) TextServerOrientation })
		if ok {
			return i.ShapedTextGetOrientation
		}
	case "shaped_text_set_preserve_invalid":
		i, ok := val.(interface{ ShapedTextSetPreserveInvalid(shaped RID, enabled bool)  })
		if ok {
			return i.ShapedTextSetPreserveInvalid
		}
	case "shaped_text_get_preserve_invalid":
		i, ok := val.(interface{ ShapedTextGetPreserveInvalid(shaped RID) bool })
		if ok {
			return i.ShapedTextGetPreserveInvalid
		}
	case "shaped_text_set_preserve_control":
		i, ok := val.(interface{ ShapedTextSetPreserveControl(shaped RID, enabled bool)  })
		if ok {
			return i.ShapedTextSetPreserveControl
		}
	case "shaped_text_get_preserve_control":
		i, ok := val.(interface{ ShapedTextGetPreserveControl(shaped RID) bool })
		if ok {
			return i.ShapedTextGetPreserveControl
		}
	case "shaped_text_set_spacing":
		i, ok := val.(interface{ ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64)  })
		if ok {
			return i.ShapedTextSetSpacing
		}
	case "shaped_text_get_spacing":
		i, ok := val.(interface{ ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 })
		if ok {
			return i.ShapedTextGetSpacing
		}
	case "shaped_text_add_string":
		i, ok := val.(interface{ ShapedTextAddString(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool })
		if ok {
			return i.ShapedTextAddString
		}
	case "shaped_text_add_object":
		i, ok := val.(interface{ ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool })
		if ok {
			return i.ShapedTextAddObject
		}
	case "shaped_text_resize_object":
		i, ok := val.(interface{ ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool })
		if ok {
			return i.ShapedTextResizeObject
		}
	case "shaped_get_span_count":
		i, ok := val.(interface{ ShapedGetSpanCount(shaped RID) int64 })
		if ok {
			return i.ShapedGetSpanCount
		}
	case "shaped_get_span_meta":
		i, ok := val.(interface{ ShapedGetSpanMeta(shaped RID, index int64) any })
		if ok {
			return i.ShapedGetSpanMeta
		}
	case "shaped_set_span_update_font":
		i, ok := val.(interface{ ShapedSetSpanUpdateFont(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  })
		if ok {
			return i.ShapedSetSpanUpdateFont
		}
	case "shaped_text_substr":
		i, ok := val.(interface{ ShapedTextSubstr(shaped RID, start int64, length int64) RID })
		if ok {
			return i.ShapedTextSubstr
		}
	case "shaped_text_get_parent":
		i, ok := val.(interface{ ShapedTextGetParent(shaped RID) RID })
		if ok {
			return i.ShapedTextGetParent
		}
	case "shaped_text_fit_to_width":
		i, ok := val.(interface{ ShapedTextFitToWidth(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 })
		if ok {
			return i.ShapedTextFitToWidth
		}
	case "shaped_text_tab_align":
		i, ok := val.(interface{ ShapedTextTabAlign(shaped RID, tab_stops []float32) float64 })
		if ok {
			return i.ShapedTextTabAlign
		}
	case "shaped_text_shape":
		i, ok := val.(interface{ ShapedTextShape(shaped RID) bool })
		if ok {
			return i.ShapedTextShape
		}
	case "shaped_text_update_breaks":
		i, ok := val.(interface{ ShapedTextUpdateBreaks(shaped RID) bool })
		if ok {
			return i.ShapedTextUpdateBreaks
		}
	case "shaped_text_update_justification_ops":
		i, ok := val.(interface{ ShapedTextUpdateJustificationOps(shaped RID) bool })
		if ok {
			return i.ShapedTextUpdateJustificationOps
		}
	case "shaped_text_is_ready":
		i, ok := val.(interface{ ShapedTextIsReady(shaped RID) bool })
		if ok {
			return i.ShapedTextIsReady
		}
	case "shaped_text_get_glyphs":
		i, ok := val.(interface{ ShapedTextGetGlyphs(shaped RID) * Glyph })
		if ok {
			return i.ShapedTextGetGlyphs
		}
	case "shaped_text_sort_logical":
		i, ok := val.(interface{ ShapedTextSortLogical(shaped RID) * Glyph })
		if ok {
			return i.ShapedTextSortLogical
		}
	case "shaped_text_get_glyph_count":
		i, ok := val.(interface{ ShapedTextGetGlyphCount(shaped RID) int64 })
		if ok {
			return i.ShapedTextGetGlyphCount
		}
	case "shaped_text_get_range":
		i, ok := val.(interface{ ShapedTextGetRange(shaped RID) Vector2i })
		if ok {
			return i.ShapedTextGetRange
		}
	case "shaped_text_get_line_breaks_adv":
		i, ok := val.(interface{ ShapedTextGetLineBreaksAdv(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 })
		if ok {
			return i.ShapedTextGetLineBreaksAdv
		}
	case "shaped_text_get_line_breaks":
		i, ok := val.(interface{ ShapedTextGetLineBreaks(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 })
		if ok {
			return i.ShapedTextGetLineBreaks
		}
	case "shaped_text_get_word_breaks":
		i, ok := val.(interface{ ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 })
		if ok {
			return i.ShapedTextGetWordBreaks
		}
	case "shaped_text_get_trim_pos":
		i, ok := val.(interface{ ShapedTextGetTrimPos(shaped RID) int64 })
		if ok {
			return i.ShapedTextGetTrimPos
		}
	case "shaped_text_get_ellipsis_pos":
		i, ok := val.(interface{ ShapedTextGetEllipsisPos(shaped RID) int64 })
		if ok {
			return i.ShapedTextGetEllipsisPos
		}
	case "shaped_text_get_ellipsis_glyph_count":
		i, ok := val.(interface{ ShapedTextGetEllipsisGlyphCount(shaped RID) int64 })
		if ok {
			return i.ShapedTextGetEllipsisGlyphCount
		}
	case "shaped_text_get_ellipsis_glyphs":
		i, ok := val.(interface{ ShapedTextGetEllipsisGlyphs(shaped RID) * Glyph })
		if ok {
			return i.ShapedTextGetEllipsisGlyphs
		}
	case "shaped_text_overrun_trim_to_width":
		i, ok := val.(interface{ ShapedTextOverrunTrimToWidth(shaped RID, width float64, trim_flags TextServerTextOverrunFlag)  })
		if ok {
			return i.ShapedTextOverrunTrimToWidth
		}
	case "shaped_text_get_objects":
		i, ok := val.(interface{ ShapedTextGetObjects(shaped RID) Array })
		if ok {
			return i.ShapedTextGetObjects
		}
	case "shaped_text_get_object_rect":
		i, ok := val.(interface{ ShapedTextGetObjectRect(shaped RID, key any) Rect2 })
		if ok {
			return i.ShapedTextGetObjectRect
		}
	case "shaped_text_get_size":
		i, ok := val.(interface{ ShapedTextGetSize(shaped RID) Vector2 })
		if ok {
			return i.ShapedTextGetSize
		}
	case "shaped_text_get_ascent":
		i, ok := val.(interface{ ShapedTextGetAscent(shaped RID) float64 })
		if ok {
			return i.ShapedTextGetAscent
		}
	case "shaped_text_get_descent":
		i, ok := val.(interface{ ShapedTextGetDescent(shaped RID) float64 })
		if ok {
			return i.ShapedTextGetDescent
		}
	case "shaped_text_get_width":
		i, ok := val.(interface{ ShapedTextGetWidth(shaped RID) float64 })
		if ok {
			return i.ShapedTextGetWidth
		}
	case "shaped_text_get_underline_position":
		i, ok := val.(interface{ ShapedTextGetUnderlinePosition(shaped RID) float64 })
		if ok {
			return i.ShapedTextGetUnderlinePosition
		}
	case "shaped_text_get_underline_thickness":
		i, ok := val.(interface{ ShapedTextGetUnderlineThickness(shaped RID) float64 })
		if ok {
			return i.ShapedTextGetUnderlineThickness
		}
	case "shaped_text_get_dominant_direction_in_range":
		i, ok := val.(interface{ ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) int64 })
		if ok {
			return i.ShapedTextGetDominantDirectionInRange
		}
	case "shaped_text_get_carets":
		i, ok := val.(interface{ ShapedTextGetCarets(shaped RID, position int64, caret *CaretInfo)  })
		if ok {
			return i.ShapedTextGetCarets
		}
	case "shaped_text_get_selection":
		i, ok := val.(interface{ ShapedTextGetSelection(shaped RID, start int64, end int64) []Vector2 })
		if ok {
			return i.ShapedTextGetSelection
		}
	case "shaped_text_hit_test_grapheme":
		i, ok := val.(interface{ ShapedTextHitTestGrapheme(shaped RID, coord float64) int64 })
		if ok {
			return i.ShapedTextHitTestGrapheme
		}
	case "shaped_text_hit_test_position":
		i, ok := val.(interface{ ShapedTextHitTestPosition(shaped RID, coord float64) int64 })
		if ok {
			return i.ShapedTextHitTestPosition
		}
	case "shaped_text_draw":
		i, ok := val.(interface{ ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  })
		if ok {
			return i.ShapedTextDraw
		}
	case "shaped_text_draw_outline":
		i, ok := val.(interface{ ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  })
		if ok {
			return i.ShapedTextDrawOutline
		}
	case "shaped_text_get_grapheme_bounds":
		i, ok := val.(interface{ ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 })
		if ok {
			return i.ShapedTextGetGraphemeBounds
		}
	case "shaped_text_next_grapheme_pos":
		i, ok := val.(interface{ ShapedTextNextGraphemePos(shaped RID, pos int64) int64 })
		if ok {
			return i.ShapedTextNextGraphemePos
		}
	case "shaped_text_prev_grapheme_pos":
		i, ok := val.(interface{ ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 })
		if ok {
			return i.ShapedTextPrevGraphemePos
		}
	case "format_number":
		i, ok := val.(interface{ FormatNumber(s string, language string) string })
		if ok {
			return i.FormatNumber
		}
	case "parse_number":
		i, ok := val.(interface{ ParseNumber(s string, language string) string })
		if ok {
			return i.ParseNumber
		}
	case "percent_sign":
		i, ok := val.(interface{ PercentSign(language string) string })
		if ok {
			return i.PercentSign
		}
	case "strip_diacritics":
		i, ok := val.(interface{ StripDiacritics(s string) string })
		if ok {
			return i.StripDiacritics
		}
	case "is_valid_identifier":
		i, ok := val.(interface{ IsValidIdentifier(s string) bool })
		if ok {
			return i.IsValidIdentifier
		}
	case "string_get_word_breaks":
		i, ok := val.(interface{ StringGetWordBreaks(s string, language string) []int32 })
		if ok {
			return i.StringGetWordBreaks
		}
	case "is_confusable":
		i, ok := val.(interface{ IsConfusable(s string, dict []string) int64 })
		if ok {
			return i.IsConfusable
		}
	case "spoof_check":
		i, ok := val.(interface{ SpoofCheck(s string) bool })
		if ok {
			return i.SpoofCheck
		}
	case "string_to_upper":
		i, ok := val.(interface{ StringToUpper(s string, language string) string })
		if ok {
			return i.StringToUpper
		}
	case "string_to_lower":
		i, ok := val.(interface{ StringToLower(s string, language string) string })
		if ok {
			return i.StringToLower
		}
	case "parse_structured_text":
		i, ok := val.(interface{ ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) Array })
		if ok {
			return i.ParseStructuredText
		}
	}
	return nil
}

type TextServerManager gdnative.Object
func (TextServerManager) class() string { return "TextServerManager\000" }

func (gdClass TextServerManager) Object() Object { return Object(gdClass) }

var methodTextServerManager [8]gdnative.Method
func (gdClass TextServerManager) AddInterface(intf TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[0], intf) }
func (gdClass TextServerManager) GetInterfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextServerManager[1]) }
func (gdClass TextServerManager) RemoveInterface(intf TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[2], intf) }
func (gdClass TextServerManager) GetInterface(idx int64) TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[3], idx) }
func (gdClass TextServerManager) GetInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTextServerManager[4]) }
func (gdClass TextServerManager) FindInterface(name string) TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[5], name) }
func (gdClass TextServerManager) SetPrimaryInterface(index TextServer)  { gdnative.Call(gdnative.Object(gdClass), methodTextServerManager[6], index) }
func (gdClass TextServerManager) GetPrimaryInterface() TextServer { return gdnative.Return[TextServer](gdnative.Object(gdClass), methodTextServerManager[7]) }

type Texture gdnative.Object
func (Texture) class() string { return "Texture\000" }

func (gdClass Texture) Resource() Resource { return Resource(gdClass) }


type Texture2D gdnative.Object
func (Texture2D) class() string { return "Texture2D\000" }

func (gdClass Texture2D) Texture() Texture { return Texture(gdClass) }

var methodTexture2D [8]gdnative.Method
func (gdClass Texture2D) virtual(val any, name string) any {	switch name {
	case "_get_width":
		i, ok := val.(interface{ GetWidth() int64 })
		if ok {
			return i.GetWidth
		}
	case "_get_height":
		i, ok := val.(interface{ GetHeight() int64 })
		if ok {
			return i.GetHeight
		}
	case "_is_pixel_opaque":
		i, ok := val.(interface{ IsPixelOpaque(x int64, y int64) bool })
		if ok {
			return i.IsPixelOpaque
		}
	case "_has_alpha":
		i, ok := val.(interface{ HasAlpha() bool })
		if ok {
			return i.HasAlpha
		}
	case "_draw":
		i, ok := val.(interface{ Draw(to_canvas_item RID, pos Vector2, modulate Color, transpose bool)  })
		if ok {
			return i.Draw
		}
	case "_draw_rect":
		i, ok := val.(interface{ DrawRect(to_canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  })
		if ok {
			return i.DrawRect
		}
	case "_draw_rect_region":
		i, ok := val.(interface{ DrawRectRegion(tp_canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  })
		if ok {
			return i.DrawRectRegion
		}
	}
	return nil
}
func (gdClass Texture2D) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[0]) }
func (gdClass Texture2D) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture2D[1]) }
func (gdClass Texture2D) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTexture2D[2]) }
func (gdClass Texture2D) HasAlpha() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture2D[3]) }
func (gdClass Texture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[4], canvas_item, position, modulate, transpose) }
func (gdClass Texture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[5], canvas_item, rect, tile, modulate, transpose) }
func (gdClass Texture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { gdnative.Call(gdnative.Object(gdClass), methodTexture2D[6], canvas_item, rect, src_rect, modulate, transpose, clip_uv) }
func (gdClass Texture2D) GetImage() Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTexture2D[7]) }

type Texture2DArray gdnative.Object
func (Texture2DArray) class() string { return "Texture2DArray\000" }

func (gdClass Texture2DArray) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered(gdClass) }


type Texture3D gdnative.Object
func (Texture3D) class() string { return "Texture3D\000" }

func (gdClass Texture3D) Texture() Texture { return Texture(gdClass) }

var methodTexture3D [6]gdnative.Method
func (gdClass Texture3D) virtual(val any, name string) any {	switch name {
	case "_get_format":
		i, ok := val.(interface{ GetFormat() ImageFormat })
		if ok {
			return i.GetFormat
		}
	case "_get_width":
		i, ok := val.(interface{ GetWidth() int64 })
		if ok {
			return i.GetWidth
		}
	case "_get_height":
		i, ok := val.(interface{ GetHeight() int64 })
		if ok {
			return i.GetHeight
		}
	case "_get_depth":
		i, ok := val.(interface{ GetDepth() int64 })
		if ok {
			return i.GetDepth
		}
	case "_has_mipmaps":
		i, ok := val.(interface{ HasMipmaps() bool })
		if ok {
			return i.HasMipmaps
		}
	case "_get_data":
		i, ok := val.(interface{ GetData() Array })
		if ok {
			return i.GetData
		}
	}
	return nil
}
func (gdClass Texture3D) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTexture3D[0]) }
func (gdClass Texture3D) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[1]) }
func (gdClass Texture3D) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[2]) }
func (gdClass Texture3D) GetDepth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTexture3D[3]) }
func (gdClass Texture3D) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTexture3D[4]) }
func (gdClass Texture3D) GetData() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTexture3D[5]) }

type TextureButtonStretchMode int64

const (
	TextureButtonStretchScale TextureButtonStretchMode = 0
	TextureButtonStretchTile TextureButtonStretchMode = 1
	TextureButtonStretchKeep TextureButtonStretchMode = 2
	TextureButtonStretchKeepCentered TextureButtonStretchMode = 3
	TextureButtonStretchKeepAspect TextureButtonStretchMode = 4
	TextureButtonStretchKeepAspectCentered TextureButtonStretchMode = 5
	TextureButtonStretchKeepAspectCovered TextureButtonStretchMode = 6
)

type TextureButton gdnative.Object
func (TextureButton) class() string { return "TextureButton\000" }

func (gdClass TextureButton) BaseButton() BaseButton { return BaseButton(gdClass) }

var methodTextureButton [20]gdnative.Method
func (gdClass TextureButton) SetNormalTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[0], texture) }
func (gdClass TextureButton) SetPressedTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[1], texture) }
func (gdClass TextureButton) SetHoverTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[2], texture) }
func (gdClass TextureButton) SetDisabledTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[3], texture) }
func (gdClass TextureButton) SetFocusedTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[4], texture) }
func (gdClass TextureButton) SetClickMask(mask BitMap)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[5], mask) }
func (gdClass TextureButton) SetIgnoreTextureSize(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[6], ignore) }
func (gdClass TextureButton) SetStretchMode(mode TextureButtonStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[7], mode) }
func (gdClass TextureButton) SetFlipH(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[8], enable) }
func (gdClass TextureButton) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[9]) }
func (gdClass TextureButton) SetFlipV(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureButton[10], enable) }
func (gdClass TextureButton) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[11]) }
func (gdClass TextureButton) GetNormalTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[12]) }
func (gdClass TextureButton) GetPressedTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[13]) }
func (gdClass TextureButton) GetHoverTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[14]) }
func (gdClass TextureButton) GetDisabledTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[15]) }
func (gdClass TextureButton) GetFocusedTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureButton[16]) }
func (gdClass TextureButton) GetClickMask() BitMap { return gdnative.Return[BitMap](gdnative.Object(gdClass), methodTextureButton[17]) }
func (gdClass TextureButton) GetIgnoreTextureSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureButton[18]) }
func (gdClass TextureButton) GetStretchMode() TextureButtonStretchMode { return gdnative.Return[TextureButtonStretchMode](gdnative.Object(gdClass), methodTextureButton[19]) }

type TextureLayeredLayeredType int64

const (
	TextureLayeredLayeredType2dArray TextureLayeredLayeredType = 0
	TextureLayeredLayeredTypeCubemap TextureLayeredLayeredType = 1
	TextureLayeredLayeredTypeCubemapArray TextureLayeredLayeredType = 2
)

type TextureLayered gdnative.Object
func (TextureLayered) class() string { return "TextureLayered\000" }

func (gdClass TextureLayered) Texture() Texture { return Texture(gdClass) }

var methodTextureLayered [7]gdnative.Method
func (gdClass TextureLayered) virtual(val any, name string) any {	switch name {
	case "_get_format":
		i, ok := val.(interface{ GetFormat() ImageFormat })
		if ok {
			return i.GetFormat
		}
	case "_get_layered_type":
		i, ok := val.(interface{ GetLayeredType() int64 })
		if ok {
			return i.GetLayeredType
		}
	case "_get_width":
		i, ok := val.(interface{ GetWidth() int64 })
		if ok {
			return i.GetWidth
		}
	case "_get_height":
		i, ok := val.(interface{ GetHeight() int64 })
		if ok {
			return i.GetHeight
		}
	case "_get_layers":
		i, ok := val.(interface{ GetLayers() int64 })
		if ok {
			return i.GetLayers
		}
	case "_has_mipmaps":
		i, ok := val.(interface{ HasMipmaps() bool })
		if ok {
			return i.HasMipmaps
		}
	case "_get_layer_data":
		i, ok := val.(interface{ GetLayerData(layer_index int64) Image })
		if ok {
			return i.GetLayerData
		}
	}
	return nil
}
func (gdClass TextureLayered) GetFormat() ImageFormat { return gdnative.Return[ImageFormat](gdnative.Object(gdClass), methodTextureLayered[0]) }
func (gdClass TextureLayered) GetLayeredType() TextureLayeredLayeredType { return gdnative.Return[TextureLayeredLayeredType](gdnative.Object(gdClass), methodTextureLayered[1]) }
func (gdClass TextureLayered) GetWidth() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[2]) }
func (gdClass TextureLayered) GetHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[3]) }
func (gdClass TextureLayered) GetLayers() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureLayered[4]) }
func (gdClass TextureLayered) HasMipmaps() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureLayered[5]) }
func (gdClass TextureLayered) GetLayerData(layer int64) Image { return gdnative.Return[Image](gdnative.Object(gdClass), methodTextureLayered[6], layer) }

type TextureProgressBarFillMode int64

const (
	TextureProgressBarFillLeftToRight TextureProgressBarFillMode = 0
	TextureProgressBarFillRightToLeft TextureProgressBarFillMode = 1
	TextureProgressBarFillTopToBottom TextureProgressBarFillMode = 2
	TextureProgressBarFillBottomToTop TextureProgressBarFillMode = 3
	TextureProgressBarFillClockwise TextureProgressBarFillMode = 4
	TextureProgressBarFillCounterClockwise TextureProgressBarFillMode = 5
	TextureProgressBarFillBilinearLeftAndRight TextureProgressBarFillMode = 6
	TextureProgressBarFillBilinearTopAndBottom TextureProgressBarFillMode = 7
	TextureProgressBarFillClockwiseAndCounterClockwise TextureProgressBarFillMode = 8
)

type TextureProgressBar gdnative.Object
func (TextureProgressBar) class() string { return "TextureProgressBar\000" }

func (gdClass TextureProgressBar) Range() Range { return Range(gdClass) }

var methodTextureProgressBar [26]gdnative.Method
func (gdClass TextureProgressBar) SetUnderTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[0], tex) }
func (gdClass TextureProgressBar) GetUnderTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[1]) }
func (gdClass TextureProgressBar) SetProgressTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[2], tex) }
func (gdClass TextureProgressBar) GetProgressTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[3]) }
func (gdClass TextureProgressBar) SetOverTexture(tex Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[4], tex) }
func (gdClass TextureProgressBar) GetOverTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureProgressBar[5]) }
func (gdClass TextureProgressBar) SetFillMode(mode int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[6], mode) }
func (gdClass TextureProgressBar) GetFillMode() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureProgressBar[7]) }
func (gdClass TextureProgressBar) SetTintUnder(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[8], tint) }
func (gdClass TextureProgressBar) GetTintUnder() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[9]) }
func (gdClass TextureProgressBar) SetTintProgress(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[10], tint) }
func (gdClass TextureProgressBar) GetTintProgress() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[11]) }
func (gdClass TextureProgressBar) SetTintOver(tint Color)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[12], tint) }
func (gdClass TextureProgressBar) GetTintOver() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTextureProgressBar[13]) }
func (gdClass TextureProgressBar) SetTextureProgressOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[14], offset) }
func (gdClass TextureProgressBar) GetTextureProgressOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextureProgressBar[15]) }
func (gdClass TextureProgressBar) SetRadialInitialAngle(mode float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[16], mode) }
func (gdClass TextureProgressBar) GetRadialInitialAngle() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextureProgressBar[17]) }
func (gdClass TextureProgressBar) SetRadialCenterOffset(mode Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[18], mode) }
func (gdClass TextureProgressBar) GetRadialCenterOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTextureProgressBar[19]) }
func (gdClass TextureProgressBar) SetFillDegrees(mode float64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[20], mode) }
func (gdClass TextureProgressBar) GetFillDegrees() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTextureProgressBar[21]) }
func (gdClass TextureProgressBar) SetStretchMargin(margin Side, value int64)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[22], margin, value) }
func (gdClass TextureProgressBar) GetStretchMargin(margin Side) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTextureProgressBar[23], margin) }
func (gdClass TextureProgressBar) SetNinePatchStretch(stretch bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureProgressBar[24], stretch) }
func (gdClass TextureProgressBar) GetNinePatchStretch() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureProgressBar[25]) }

type TextureRectStretchMode int64

const (
	TextureRectStretchScale TextureRectStretchMode = 0
	TextureRectStretchTile TextureRectStretchMode = 1
	TextureRectStretchKeep TextureRectStretchMode = 2
	TextureRectStretchKeepCentered TextureRectStretchMode = 3
	TextureRectStretchKeepAspect TextureRectStretchMode = 4
	TextureRectStretchKeepAspectCentered TextureRectStretchMode = 5
	TextureRectStretchKeepAspectCovered TextureRectStretchMode = 6
)

type TextureRect gdnative.Object
func (TextureRect) class() string { return "TextureRect\000" }

func (gdClass TextureRect) Control() Control { return Control(gdClass) }

var methodTextureRect [10]gdnative.Method
func (gdClass TextureRect) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[0], texture) }
func (gdClass TextureRect) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTextureRect[1]) }
func (gdClass TextureRect) SetIgnoreTextureSize(ignore bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[2], ignore) }
func (gdClass TextureRect) GetIgnoreTextureSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[3]) }
func (gdClass TextureRect) SetFlipH(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[4], enable) }
func (gdClass TextureRect) IsFlippedH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[5]) }
func (gdClass TextureRect) SetFlipV(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[6], enable) }
func (gdClass TextureRect) IsFlippedV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTextureRect[7]) }
func (gdClass TextureRect) SetStretchMode(stretch_mode TextureRectStretchMode)  { gdnative.Call(gdnative.Object(gdClass), methodTextureRect[8], stretch_mode) }
func (gdClass TextureRect) GetStretchMode() TextureRectStretchMode { return gdnative.Return[TextureRectStretchMode](gdnative.Object(gdClass), methodTextureRect[9]) }

type ThemeDataType int64

const (
	ThemeDataTypeColor ThemeDataType = 0
	ThemeDataTypeConstant ThemeDataType = 1
	ThemeDataTypeFont ThemeDataType = 2
	ThemeDataTypeFontSize ThemeDataType = 3
	ThemeDataTypeIcon ThemeDataType = 4
	ThemeDataTypeStylebox ThemeDataType = 5
	ThemeDataTypeMax ThemeDataType = 6
)

type Theme gdnative.Object
func (Theme) class() string { return "Theme\000" }

func (gdClass Theme) Resource() Resource { return Resource(gdClass) }

var methodTheme [68]gdnative.Method
func (gdClass Theme) SetIcon(name string, theme_type string, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[0], name, theme_type, texture) }
func (gdClass Theme) GetIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTheme[1], name, theme_type) }
func (gdClass Theme) HasIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[2], name, theme_type) }
func (gdClass Theme) RenameIcon(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[3], old_name, name, theme_type) }
func (gdClass Theme) ClearIcon(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[4], name, theme_type) }
func (gdClass Theme) GetIconList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[5], theme_type) }
func (gdClass Theme) GetIconTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[6]) }
func (gdClass Theme) SetStylebox(name string, theme_type string, texture StyleBox)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[7], name, theme_type, texture) }
func (gdClass Theme) GetStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodTheme[8], name, theme_type) }
func (gdClass Theme) HasStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[9], name, theme_type) }
func (gdClass Theme) RenameStylebox(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[10], old_name, name, theme_type) }
func (gdClass Theme) ClearStylebox(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[11], name, theme_type) }
func (gdClass Theme) GetStyleboxList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[12], theme_type) }
func (gdClass Theme) GetStyleboxTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[13]) }
func (gdClass Theme) SetFont(name string, theme_type string, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[14], name, theme_type, font) }
func (gdClass Theme) GetFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTheme[15], name, theme_type) }
func (gdClass Theme) HasFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[16], name, theme_type) }
func (gdClass Theme) RenameFont(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[17], old_name, name, theme_type) }
func (gdClass Theme) ClearFont(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[18], name, theme_type) }
func (gdClass Theme) GetFontList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[19], theme_type) }
func (gdClass Theme) GetFontTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[20]) }
func (gdClass Theme) SetFontSize(name string, theme_type string, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[21], name, theme_type, font_size) }
func (gdClass Theme) GetFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[22], name, theme_type) }
func (gdClass Theme) HasFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[23], name, theme_type) }
func (gdClass Theme) RenameFontSize(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[24], old_name, name, theme_type) }
func (gdClass Theme) ClearFontSize(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[25], name, theme_type) }
func (gdClass Theme) GetFontSizeList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[26], theme_type) }
func (gdClass Theme) GetFontSizeTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[27]) }
func (gdClass Theme) SetColor(name string, theme_type string, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[28], name, theme_type, color) }
func (gdClass Theme) GetColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTheme[29], name, theme_type) }
func (gdClass Theme) HasColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[30], name, theme_type) }
func (gdClass Theme) RenameColor(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[31], old_name, name, theme_type) }
func (gdClass Theme) ClearColor(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[32], name, theme_type) }
func (gdClass Theme) GetColorList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[33], theme_type) }
func (gdClass Theme) GetColorTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[34]) }
func (gdClass Theme) SetConstant(name string, theme_type string, constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[35], name, theme_type, constant) }
func (gdClass Theme) GetConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[36], name, theme_type) }
func (gdClass Theme) HasConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[37], name, theme_type) }
func (gdClass Theme) RenameConstant(old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[38], old_name, name, theme_type) }
func (gdClass Theme) ClearConstant(name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[39], name, theme_type) }
func (gdClass Theme) GetConstantList(theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[40], theme_type) }
func (gdClass Theme) GetConstantTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[41]) }
func (gdClass Theme) SetDefaultBaseScale(base_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[42], base_scale) }
func (gdClass Theme) GetDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTheme[43]) }
func (gdClass Theme) HasDefaultBaseScale() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[44]) }
func (gdClass Theme) SetDefaultFont(font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[45], font) }
func (gdClass Theme) GetDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTheme[46]) }
func (gdClass Theme) HasDefaultFont() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[47]) }
func (gdClass Theme) SetDefaultFontSize(font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[48], font_size) }
func (gdClass Theme) GetDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTheme[49]) }
func (gdClass Theme) HasDefaultFontSize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[50]) }
func (gdClass Theme) SetThemeItem(data_type ThemeDataType, name string, theme_type string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[51], data_type, name, theme_type, value) }
func (gdClass Theme) GetThemeItem(data_type ThemeDataType, name string, theme_type string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTheme[52], data_type, name, theme_type) }
func (gdClass Theme) HasThemeItem(data_type ThemeDataType, name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[53], data_type, name, theme_type) }
func (gdClass Theme) RenameThemeItem(data_type ThemeDataType, old_name string, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[54], data_type, old_name, name, theme_type) }
func (gdClass Theme) ClearThemeItem(data_type ThemeDataType, name string, theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[55], data_type, name, theme_type) }
func (gdClass Theme) GetThemeItemList(data_type ThemeDataType, theme_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[56], data_type, theme_type) }
func (gdClass Theme) GetThemeItemTypeList(data_type ThemeDataType) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[57], data_type) }
func (gdClass Theme) SetTypeVariation(theme_type string, base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[58], theme_type, base_type) }
func (gdClass Theme) IsTypeVariation(theme_type string, base_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTheme[59], theme_type, base_type) }
func (gdClass Theme) ClearTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[60], theme_type) }
func (gdClass Theme) GetTypeVariationBase(theme_type string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTheme[61], theme_type) }
func (gdClass Theme) GetTypeVariationList(base_type string) []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[62], base_type) }
func (gdClass Theme) AddType(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[63], theme_type) }
func (gdClass Theme) RemoveType(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[64], theme_type) }
func (gdClass Theme) GetTypeList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTheme[65]) }
func (gdClass Theme) MergeWith(other Theme)  { gdnative.Call(gdnative.Object(gdClass), methodTheme[66], other) }
func (gdClass Theme) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTheme[67]) }

type ThreadPriority int64

const (
	ThreadPriorityLow ThreadPriority = 0
	ThreadPriorityNormal ThreadPriority = 1
	ThreadPriorityHigh ThreadPriority = 2
)

type Thread gdnative.Object
func (Thread) class() string { return "Thread\000" }

func (gdClass Thread) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodThread [5]gdnative.Method
func (gdClass Thread) Start(callable Callable, priority ThreadPriority) error { return gdnative.Return[error](gdnative.Object(gdClass), methodThread[0], callable, priority) }
func (gdClass Thread) GetId() string { return gdnative.Return[string](gdnative.Object(gdClass), methodThread[1]) }
func (gdClass Thread) IsStarted() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodThread[2]) }
func (gdClass Thread) IsAlive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodThread[3]) }
func (gdClass Thread) WaitToFinish() any { return gdnative.Return[any](gdnative.Object(gdClass), methodThread[4]) }

type TileData gdnative.Object
func (TileData) class() string { return "TileData\000" }

func (gdClass TileData) Object() Object { return Object(gdClass) }

var methodTileData [46]gdnative.Method
func (gdClass TileData) SetFlipH(flip_h bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[0], flip_h) }
func (gdClass TileData) GetFlipH() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[1]) }
func (gdClass TileData) SetFlipV(flip_v bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[2], flip_v) }
func (gdClass TileData) GetFlipV() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[3]) }
func (gdClass TileData) SetTranspose(transpose bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[4], transpose) }
func (gdClass TileData) GetTranspose() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[5]) }
func (gdClass TileData) SetMaterial(material Material)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[6], material) }
func (gdClass TileData) GetMaterial() Material { return gdnative.Return[Material](gdnative.Object(gdClass), methodTileData[7]) }
func (gdClass TileData) SetTextureOffset(texture_offset Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[8], texture_offset) }
func (gdClass TileData) GetTextureOffset() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileData[9]) }
func (gdClass TileData) SetModulate(modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[10], modulate) }
func (gdClass TileData) GetModulate() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileData[11]) }
func (gdClass TileData) SetZIndex(z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[12], z_index) }
func (gdClass TileData) GetZIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[13]) }
func (gdClass TileData) SetYSortOrigin(y_sort_origin int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[14], y_sort_origin) }
func (gdClass TileData) GetYSortOrigin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[15]) }
func (gdClass TileData) SetOccluder(layer_id int64, occluder_polygon OccluderPolygon2D)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[16], layer_id, occluder_polygon) }
func (gdClass TileData) GetOccluder(layer_id int64) OccluderPolygon2D { return gdnative.Return[OccluderPolygon2D](gdnative.Object(gdClass), methodTileData[17], layer_id) }
func (gdClass TileData) SetConstantLinearVelocity(layer_id int64, velocity Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[18], layer_id, velocity) }
func (gdClass TileData) GetConstantLinearVelocity(layer_id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTileData[19], layer_id) }
func (gdClass TileData) SetConstantAngularVelocity(layer_id int64, velocity float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[20], layer_id, velocity) }
func (gdClass TileData) GetConstantAngularVelocity(layer_id int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[21], layer_id) }
func (gdClass TileData) SetCollisionPolygonsCount(layer_id int64, polygons_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[22], layer_id, polygons_count) }
func (gdClass TileData) GetCollisionPolygonsCount(layer_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[23], layer_id) }
func (gdClass TileData) AddCollisionPolygon(layer_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[24], layer_id) }
func (gdClass TileData) RemoveCollisionPolygon(layer_id int64, polygon_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[25], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonPoints(layer_id int64, polygon_index int64, polygon []Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[26], layer_id, polygon_index, polygon) }
func (gdClass TileData) GetCollisionPolygonPoints(layer_id int64, polygon_index int64) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTileData[27], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWay(layer_id int64, polygon_index int64, one_way bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[28], layer_id, polygon_index, one_way) }
func (gdClass TileData) IsCollisionPolygonOneWay(layer_id int64, polygon_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileData[29], layer_id, polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64, one_way_margin float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[30], layer_id, polygon_index, one_way_margin) }
func (gdClass TileData) GetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[31], layer_id, polygon_index) }
func (gdClass TileData) SetTerrainSet(terrain_set int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[32], terrain_set) }
func (gdClass TileData) GetTerrainSet() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[33]) }
func (gdClass TileData) SetTerrain(terrain int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[34], terrain) }
func (gdClass TileData) GetTerrain() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[35]) }
func (gdClass TileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[36], peering_bit, terrain) }
func (gdClass TileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileData[37], peering_bit) }
func (gdClass TileData) SetNavigationPolygon(layer_id int64, navigation_polygon NavigationPolygon)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[38], layer_id, navigation_polygon) }
func (gdClass TileData) GetNavigationPolygon(layer_id int64) NavigationPolygon { return gdnative.Return[NavigationPolygon](gdnative.Object(gdClass), methodTileData[39], layer_id) }
func (gdClass TileData) SetProbability(probability float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[40], probability) }
func (gdClass TileData) GetProbability() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileData[41]) }
func (gdClass TileData) SetCustomData(layer_name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[42], layer_name, value) }
func (gdClass TileData) GetCustomData(layer_name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTileData[43], layer_name) }
func (gdClass TileData) SetCustomDataByLayerId(layer_id int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodTileData[44], layer_id, value) }
func (gdClass TileData) GetCustomDataByLayerId(layer_id int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTileData[45], layer_id) }

type TileMapVisibilityMode int64

const (
	TileMapVisibilityModeDefault TileMapVisibilityMode = 0
	TileMapVisibilityModeForceHide TileMapVisibilityMode = 2
	TileMapVisibilityModeForceShow TileMapVisibilityMode = 1
)

type TileMap gdnative.Object
func (TileMap) class() string { return "TileMap\000" }

func (gdClass TileMap) Node2D() Node2D { return Node2D(gdClass) }

var methodTileMap [47]gdnative.Method
func (gdClass TileMap) virtual(val any, name string) any {	switch name {
	case "_use_tile_data_runtime_update":
		i, ok := val.(interface{ UseTileDataRuntimeUpdate(layer int64, coords Vector2i) bool })
		if ok {
			return i.UseTileDataRuntimeUpdate
		}
	case "_tile_data_runtime_update":
		i, ok := val.(interface{ TileDataRuntimeUpdate(layer int64, coords Vector2i, tile_data TileData)  })
		if ok {
			return i.TileDataRuntimeUpdate
		}
	}
	return nil
}
func (gdClass TileMap) SetTileset(tileset TileSet)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[0], tileset) }
func (gdClass TileMap) GetTileset() TileSet { return gdnative.Return[TileSet](gdnative.Object(gdClass), methodTileMap[1]) }
func (gdClass TileMap) SetQuadrantSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[2], size) }
func (gdClass TileMap) GetQuadrantSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[3]) }
func (gdClass TileMap) GetLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[4]) }
func (gdClass TileMap) AddLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[5], to_position) }
func (gdClass TileMap) MoveLayer(layer int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[6], layer, to_position) }
func (gdClass TileMap) RemoveLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[7], layer) }
func (gdClass TileMap) SetLayerName(layer int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[8], layer, name) }
func (gdClass TileMap) GetLayerName(layer int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileMap[9], layer) }
func (gdClass TileMap) SetLayerEnabled(layer int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[10], layer, enabled) }
func (gdClass TileMap) IsLayerEnabled(layer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[11], layer) }
func (gdClass TileMap) SetLayerModulate(layer int64, enabled Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[12], layer, enabled) }
func (gdClass TileMap) GetLayerModulate(layer int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileMap[13], layer) }
func (gdClass TileMap) SetLayerYSortEnabled(layer int64, y_sort_enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[14], layer, y_sort_enabled) }
func (gdClass TileMap) IsLayerYSortEnabled(layer int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[15], layer) }
func (gdClass TileMap) SetLayerYSortOrigin(layer int64, y_sort_origin int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[16], layer, y_sort_origin) }
func (gdClass TileMap) GetLayerYSortOrigin(layer int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[17], layer) }
func (gdClass TileMap) SetLayerZIndex(layer int64, z_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[18], layer, z_index) }
func (gdClass TileMap) GetLayerZIndex(layer int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[19], layer) }
func (gdClass TileMap) SetCollisionAnimatable(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[20], enabled) }
func (gdClass TileMap) IsCollisionAnimatable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMap[21]) }
func (gdClass TileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[22], collision_visibility_mode) }
func (gdClass TileMap) GetCollisionVisibilityMode() TileMapVisibilityMode { return gdnative.Return[TileMapVisibilityMode](gdnative.Object(gdClass), methodTileMap[23]) }
func (gdClass TileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[24], navigation_visibility_mode) }
func (gdClass TileMap) GetNavigationVisibilityMode() TileMapVisibilityMode { return gdnative.Return[TileMapVisibilityMode](gdnative.Object(gdClass), methodTileMap[25]) }
func (gdClass TileMap) SetCell(layer int64, coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[26], layer, coords, source_id, atlas_coords, alternative_tile) }
func (gdClass TileMap) EraseCell(layer int64, coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[27], layer, coords) }
func (gdClass TileMap) GetCellSourceId(layer int64, coords Vector2i, use_proxies bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[28], layer, coords, use_proxies) }
func (gdClass TileMap) GetCellAtlasCoords(layer int64, coords Vector2i, use_proxies bool) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[29], layer, coords, use_proxies) }
func (gdClass TileMap) GetCellAlternativeTile(layer int64, coords Vector2i, use_proxies bool) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMap[30], layer, coords, use_proxies) }
func (gdClass TileMap) GetCoordsForBodyRid(body RID) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[31], body) }
func (gdClass TileMap) GetPattern(layer int64, coords_array Array) TileMapPattern { return gdnative.Return[TileMapPattern](gdnative.Object(gdClass), methodTileMap[32], layer, coords_array) }
func (gdClass TileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[33], position_in_tilemap, coords_in_pattern, pattern) }
func (gdClass TileMap) SetPattern(layer int64, position Vector2i, pattern TileMapPattern)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[34], layer, position, pattern) }
func (gdClass TileMap) SetCellsTerrainConnect(layer int64, cells Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[35], layer, cells, terrain_set, terrain, ignore_empty_terrains) }
func (gdClass TileMap) SetCellsTerrainPath(layer int64, path Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[36], layer, path, terrain_set, terrain, ignore_empty_terrains) }
func (gdClass TileMap) FixInvalidTiles()  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[37]) }
func (gdClass TileMap) ClearLayer(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[38], layer) }
func (gdClass TileMap) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[39]) }
func (gdClass TileMap) ForceUpdate(layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMap[40], layer) }
func (gdClass TileMap) GetSurroundingTiles(coords Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMap[41], coords) }
func (gdClass TileMap) GetUsedCells(layer int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMap[42], layer) }
func (gdClass TileMap) GetUsedRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTileMap[43]) }
func (gdClass TileMap) MapToWorld(map_position Vector2i) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTileMap[44], map_position) }
func (gdClass TileMap) WorldToMap(world_position Vector2) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[45], world_position) }
func (gdClass TileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMap[46], coords, neighbor) }

type TileMapPattern gdnative.Object
func (TileMapPattern) class() string { return "TileMapPattern\000" }

func (gdClass TileMapPattern) Resource() Resource { return Resource(gdClass) }

var methodTileMapPattern [10]gdnative.Method
func (gdClass TileMapPattern) SetCell(coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[0], coords, source_id, atlas_coords, alternative_tile) }
func (gdClass TileMapPattern) HasCell(coords Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMapPattern[1], coords) }
func (gdClass TileMapPattern) RemoveCell(coords Vector2i, update_size bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[2], coords, update_size) }
func (gdClass TileMapPattern) GetCellSourceId(coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMapPattern[3], coords) }
func (gdClass TileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMapPattern[4], coords) }
func (gdClass TileMapPattern) GetCellAlternativeTile(coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileMapPattern[5], coords) }
func (gdClass TileMapPattern) GetUsedCells() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileMapPattern[6]) }
func (gdClass TileMapPattern) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileMapPattern[7]) }
func (gdClass TileMapPattern) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileMapPattern[8], size) }
func (gdClass TileMapPattern) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileMapPattern[9]) }

type TileSetTileShape int64

const (
	TileSetTileShapeSquare TileSetTileShape = 0
	TileSetTileShapeIsometric TileSetTileShape = 1
	TileSetTileShapeHalfOffsetSquare TileSetTileShape = 2
	TileSetTileShapeHexagon TileSetTileShape = 3
)

type TileSetTileLayout int64

const (
	TileSetTileLayoutStacked TileSetTileLayout = 0
	TileSetTileLayoutStackedOffset TileSetTileLayout = 1
	TileSetTileLayoutStairsRight TileSetTileLayout = 2
	TileSetTileLayoutStairsDown TileSetTileLayout = 3
	TileSetTileLayoutDiamondRight TileSetTileLayout = 4
	TileSetTileLayoutDiamondDown TileSetTileLayout = 5
)

type TileSetTileOffsetAxis int64

const (
	TileSetTileOffsetAxisHorizontal TileSetTileOffsetAxis = 0
	TileSetTileOffsetAxisVertical TileSetTileOffsetAxis = 1
)

type TileSetCellNeighbor int64

const (
	TileSetCellNeighborRightSide TileSetCellNeighbor = 0
	TileSetCellNeighborRightCorner TileSetCellNeighbor = 1
	TileSetCellNeighborBottomRightSide TileSetCellNeighbor = 2
	TileSetCellNeighborBottomRightCorner TileSetCellNeighbor = 3
	TileSetCellNeighborBottomSide TileSetCellNeighbor = 4
	TileSetCellNeighborBottomCorner TileSetCellNeighbor = 5
	TileSetCellNeighborBottomLeftSide TileSetCellNeighbor = 6
	TileSetCellNeighborBottomLeftCorner TileSetCellNeighbor = 7
	TileSetCellNeighborLeftSide TileSetCellNeighbor = 8
	TileSetCellNeighborLeftCorner TileSetCellNeighbor = 9
	TileSetCellNeighborTopLeftSide TileSetCellNeighbor = 10
	TileSetCellNeighborTopLeftCorner TileSetCellNeighbor = 11
	TileSetCellNeighborTopSide TileSetCellNeighbor = 12
	TileSetCellNeighborTopCorner TileSetCellNeighbor = 13
	TileSetCellNeighborTopRightSide TileSetCellNeighbor = 14
	TileSetCellNeighborTopRightCorner TileSetCellNeighbor = 15
)

type TileSetTerrainMode int64

const (
	TileSetTerrainModeMatchCornersAndSides TileSetTerrainMode = 0
	TileSetTerrainModeMatchCorners TileSetTerrainMode = 1
	TileSetTerrainModeMatchSides TileSetTerrainMode = 2
)

type TileSet gdnative.Object
func (TileSet) class() string { return "TileSet\000" }

func (gdClass TileSet) Resource() Resource { return Resource(gdClass) }

var methodTileSet [84]gdnative.Method
func (gdClass TileSet) GetNextSourceId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[0]) }
func (gdClass TileSet) AddSource(source TileSetSource, atlas_source_id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[1], source, atlas_source_id_override) }
func (gdClass TileSet) RemoveSource(source_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[2], source_id) }
func (gdClass TileSet) SetSourceId(source_id int64, new_source_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[3], source_id, new_source_id) }
func (gdClass TileSet) GetSourceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[4]) }
func (gdClass TileSet) GetSourceId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[5], index) }
func (gdClass TileSet) HasSource(source_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[6], source_id) }
func (gdClass TileSet) GetSource(source_id int64) TileSetSource { return gdnative.Return[TileSetSource](gdnative.Object(gdClass), methodTileSet[7], source_id) }
func (gdClass TileSet) SetTileShape(shape TileSetTileShape)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[8], shape) }
func (gdClass TileSet) GetTileShape() TileSetTileShape { return gdnative.Return[TileSetTileShape](gdnative.Object(gdClass), methodTileSet[9]) }
func (gdClass TileSet) SetTileLayout(layout TileSetTileLayout)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[10], layout) }
func (gdClass TileSet) GetTileLayout() TileSetTileLayout { return gdnative.Return[TileSetTileLayout](gdnative.Object(gdClass), methodTileSet[11]) }
func (gdClass TileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[12], alignment) }
func (gdClass TileSet) GetTileOffsetAxis() TileSetTileOffsetAxis { return gdnative.Return[TileSetTileOffsetAxis](gdnative.Object(gdClass), methodTileSet[13]) }
func (gdClass TileSet) SetTileSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[14], size) }
func (gdClass TileSet) GetTileSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSet[15]) }
func (gdClass TileSet) SetUvClipping(uv_clipping bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[16], uv_clipping) }
func (gdClass TileSet) IsUvClipping() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[17]) }
func (gdClass TileSet) GetOcclusionLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[18]) }
func (gdClass TileSet) AddOcclusionLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[19], to_position) }
func (gdClass TileSet) MoveOcclusionLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[20], layer_index, to_position) }
func (gdClass TileSet) RemoveOcclusionLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[21], layer_index) }
func (gdClass TileSet) SetOcclusionLayerLightMask(layer_index int64, light_mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[22], layer_index, light_mask) }
func (gdClass TileSet) GetOcclusionLayerLightMask(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[23], layer_index) }
func (gdClass TileSet) SetOcclusionLayerSdfCollision(layer_index int64, sdf_collision bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[24], layer_index, sdf_collision) }
func (gdClass TileSet) GetOcclusionLayerSdfCollision(layer_index int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[25], layer_index) }
func (gdClass TileSet) GetPhysicsLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[26]) }
func (gdClass TileSet) AddPhysicsLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[27], to_position) }
func (gdClass TileSet) MovePhysicsLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[28], layer_index, to_position) }
func (gdClass TileSet) RemovePhysicsLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[29], layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionLayer(layer_index int64, layer int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[30], layer_index, layer) }
func (gdClass TileSet) GetPhysicsLayerCollisionLayer(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[31], layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionMask(layer_index int64, mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[32], layer_index, mask) }
func (gdClass TileSet) GetPhysicsLayerCollisionMask(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[33], layer_index) }
func (gdClass TileSet) SetPhysicsLayerPhysicsMaterial(layer_index int64, physics_material PhysicsMaterial)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[34], layer_index, physics_material) }
func (gdClass TileSet) GetPhysicsLayerPhysicsMaterial(layer_index int64) PhysicsMaterial { return gdnative.Return[PhysicsMaterial](gdnative.Object(gdClass), methodTileSet[35], layer_index) }
func (gdClass TileSet) GetTerrainSetsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[36]) }
func (gdClass TileSet) AddTerrainSet(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[37], to_position) }
func (gdClass TileSet) MoveTerrainSet(terrain_set int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[38], terrain_set, to_position) }
func (gdClass TileSet) RemoveTerrainSet(terrain_set int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[39], terrain_set) }
func (gdClass TileSet) SetTerrainSetMode(terrain_set int64, mode TileSetTerrainMode)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[40], terrain_set, mode) }
func (gdClass TileSet) GetTerrainSetMode(terrain_set int64) TileSetTerrainMode { return gdnative.Return[TileSetTerrainMode](gdnative.Object(gdClass), methodTileSet[41], terrain_set) }
func (gdClass TileSet) GetTerrainsCount(terrain_set int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[42], terrain_set) }
func (gdClass TileSet) AddTerrain(terrain_set int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[43], terrain_set, to_position) }
func (gdClass TileSet) MoveTerrain(terrain_set int64, terrain_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[44], terrain_set, terrain_index, to_position) }
func (gdClass TileSet) RemoveTerrain(terrain_set int64, terrain_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[45], terrain_set, terrain_index) }
func (gdClass TileSet) SetTerrainName(terrain_set int64, terrain_index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[46], terrain_set, terrain_index, name) }
func (gdClass TileSet) GetTerrainName(terrain_set int64, terrain_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileSet[47], terrain_set, terrain_index) }
func (gdClass TileSet) SetTerrainColor(terrain_set int64, terrain_index int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[48], terrain_set, terrain_index, color) }
func (gdClass TileSet) GetTerrainColor(terrain_set int64, terrain_index int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTileSet[49], terrain_set, terrain_index) }
func (gdClass TileSet) GetNavigationLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[50]) }
func (gdClass TileSet) AddNavigationLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[51], to_position) }
func (gdClass TileSet) MoveNavigationLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[52], layer_index, to_position) }
func (gdClass TileSet) RemoveNavigationLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[53], layer_index) }
func (gdClass TileSet) SetNavigationLayerLayers(layer_index int64, layers int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[54], layer_index, layers) }
func (gdClass TileSet) GetNavigationLayerLayers(layer_index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[55], layer_index) }
func (gdClass TileSet) GetCustomDataLayersCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[56]) }
func (gdClass TileSet) AddCustomDataLayer(to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[57], to_position) }
func (gdClass TileSet) MoveCustomDataLayer(layer_index int64, to_position int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[58], layer_index, to_position) }
func (gdClass TileSet) RemoveCustomDataLayer(layer_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[59], layer_index) }
func (gdClass TileSet) GetCustomDataLayerByName(layer_name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[60], layer_name) }
func (gdClass TileSet) SetCustomDataLayerName(layer_index int64, layer_name string)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[61], layer_index, layer_name) }
func (gdClass TileSet) GetCustomDataLayerName(layer_index int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTileSet[62], layer_index) }
func (gdClass TileSet) SetCustomDataLayerType(layer_index int64, layer_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[63], layer_index, layer_type) }
func (gdClass TileSet) GetCustomDataLayerType(layer_index int64) VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodTileSet[64], layer_index) }
func (gdClass TileSet) SetSourceLevelTileProxy(source_from int64, source_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[65], source_from, source_to) }
func (gdClass TileSet) GetSourceLevelTileProxy(source_from int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[66], source_from) }
func (gdClass TileSet) HasSourceLevelTileProxy(source_from int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[67], source_from) }
func (gdClass TileSet) RemoveSourceLevelTileProxy(source_from int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[68], source_from) }
func (gdClass TileSet) SetCoordsLevelTileProxy(p_source_from int64, coords_from Vector2i, source_to int64, coords_to Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[69], p_source_from, coords_from, source_to, coords_to) }
func (gdClass TileSet) GetCoordsLevelTileProxy(source_from int64, coords_from Vector2i) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[70], source_from, coords_from) }
func (gdClass TileSet) HasCoordsLevelTileProxy(source_from int64, coords_from Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[71], source_from, coords_from) }
func (gdClass TileSet) RemoveCoordsLevelTileProxy(source_from int64, coords_from Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[72], source_from, coords_from) }
func (gdClass TileSet) SetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64, source_to int64, coords_to Vector2i, alternative_to int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[73], source_from, coords_from, alternative_from, source_to, coords_to, alternative_to) }
func (gdClass TileSet) GetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[74], source_from, coords_from, alternative_from) }
func (gdClass TileSet) HasAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSet[75], source_from, coords_from, alternative_from) }
func (gdClass TileSet) RemoveAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[76], source_from, coords_from, alternative_from) }
func (gdClass TileSet) MapTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTileSet[77], source_from, coords_from, alternative_from) }
func (gdClass TileSet) CleanupInvalidTileProxies()  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[78]) }
func (gdClass TileSet) ClearTileProxies()  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[79]) }
func (gdClass TileSet) AddPattern(pattern TileMapPattern, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[80], pattern, index) }
func (gdClass TileSet) GetPattern(index int64) TileMapPattern { return gdnative.Return[TileMapPattern](gdnative.Object(gdClass), methodTileSet[81], index) }
func (gdClass TileSet) RemovePattern(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSet[82], index) }
func (gdClass TileSet) GetPatternsCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSet[83]) }

type TileSetAtlasSource gdnative.Object
func (TileSetAtlasSource) class() string { return "TileSetAtlasSource\000" }

func (gdClass TileSetAtlasSource) TileSetSource() TileSetSource { return TileSetSource(gdClass) }

var methodTileSetAtlasSource [37]gdnative.Method
func (gdClass TileSetAtlasSource) SetTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[0], texture) }
func (gdClass TileSetAtlasSource) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTileSetAtlasSource[1]) }
func (gdClass TileSetAtlasSource) SetMargins(margins Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[2], margins) }
func (gdClass TileSetAtlasSource) GetMargins() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[3]) }
func (gdClass TileSetAtlasSource) SetSeparation(separation Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[4], separation) }
func (gdClass TileSetAtlasSource) GetSeparation() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[5]) }
func (gdClass TileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[6], texture_region_size) }
func (gdClass TileSetAtlasSource) GetTextureRegionSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[7]) }
func (gdClass TileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[8], use_texture_padding) }
func (gdClass TileSetAtlasSource) GetUseTexturePadding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetAtlasSource[9]) }
func (gdClass TileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[10], atlas_coords, size) }
func (gdClass TileSetAtlasSource) RemoveTile(atlas_coords Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[11], atlas_coords) }
func (gdClass TileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[12], atlas_coords, new_atlas_coords, new_size) }
func (gdClass TileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[13], atlas_coords) }
func (gdClass TileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns int64, animation_separation Vector2i, frames_count int64, ignored_tile Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetAtlasSource[14], atlas_coords, size, animation_columns, animation_separation, frames_count, ignored_tile) }
func (gdClass TileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) []Vector2 { return gdnative.Return[[]Vector2](gdnative.Object(gdClass), methodTileSetAtlasSource[15], texture, margins, separation, texture_region_size) }
func (gdClass TileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[16], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[17], atlas_coords, frame_columns) }
func (gdClass TileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[18], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[19], atlas_coords, separation) }
func (gdClass TileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[20], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[21], atlas_coords, speed) }
func (gdClass TileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[22], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[23], atlas_coords, frames_count) }
func (gdClass TileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[24], atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64, duration float64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[25], atlas_coords, frame_index, duration) }
func (gdClass TileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[26], atlas_coords, frame_index) }
func (gdClass TileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTileSetAtlasSource[27], atlas_coords) }
func (gdClass TileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[28], atlas_coords, alternative_id_override) }
func (gdClass TileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[29], atlas_coords, alternative_tile) }
func (gdClass TileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile int64, new_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetAtlasSource[30], atlas_coords, alternative_tile, new_id) }
func (gdClass TileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetAtlasSource[31], atlas_coords) }
func (gdClass TileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile int64) TileData { return gdnative.Return[TileData](gdnative.Object(gdClass), methodTileSetAtlasSource[32], atlas_coords, alternative_tile) }
func (gdClass TileSetAtlasSource) GetAtlasGridSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetAtlasSource[33]) }
func (gdClass TileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTileSetAtlasSource[34], atlas_coords, frame) }
func (gdClass TileSetAtlasSource) GetRuntimeTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTileSetAtlasSource[35]) }
func (gdClass TileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return gdnative.Return[Rect2i](gdnative.Object(gdClass), methodTileSetAtlasSource[36], atlas_coords, frame) }

type TileSetScenesCollectionSource gdnative.Object
func (TileSetScenesCollectionSource) class() string { return "TileSetScenesCollectionSource\000" }

func (gdClass TileSetScenesCollectionSource) TileSetSource() TileSetSource { return TileSetSource(gdClass) }

var methodTileSetScenesCollectionSource [11]gdnative.Method
func (gdClass TileSetScenesCollectionSource) GetSceneTilesCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[0]) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileId(index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[1], index) }
func (gdClass TileSetScenesCollectionSource) HasSceneTileId(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[2], id) }
func (gdClass TileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[3], packed_scene, id_override) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileId(id int64, new_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[4], id, new_id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileScene(id int64, packed_scene PackedScene)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[5], id, packed_scene) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileScene(id int64) PackedScene { return gdnative.Return[PackedScene](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[6], id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id int64, display_placeholder bool)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[7], id, display_placeholder) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[8], id) }
func (gdClass TileSetScenesCollectionSource) RemoveSceneTile(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodTileSetScenesCollectionSource[9], id) }
func (gdClass TileSetScenesCollectionSource) GetNextSceneTileId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetScenesCollectionSource[10]) }

type TileSetSource gdnative.Object
func (TileSetSource) class() string { return "TileSetSource\000" }

func (gdClass TileSetSource) Resource() Resource { return Resource(gdClass) }

var methodTileSetSource [6]gdnative.Method
func (gdClass TileSetSource) GetTilesCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[0]) }
func (gdClass TileSetSource) GetTileId(index int64) Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodTileSetSource[1], index) }
func (gdClass TileSetSource) HasTile(atlas_coords Vector2i) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetSource[2], atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[3], atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTileSetSource[4], atlas_coords, index) }
func (gdClass TileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTileSetSource[5], atlas_coords, alternative_tile) }

type TimeMonth int64

const (
	TimeMonthJanuary TimeMonth = 1
	TimeMonthFebruary TimeMonth = 2
	TimeMonthMarch TimeMonth = 3
	TimeMonthApril TimeMonth = 4
	TimeMonthMay TimeMonth = 5
	TimeMonthJune TimeMonth = 6
	TimeMonthJuly TimeMonth = 7
	TimeMonthAugust TimeMonth = 8
	TimeMonthSeptember TimeMonth = 9
	TimeMonthOctober TimeMonth = 10
	TimeMonthNovember TimeMonth = 11
	TimeMonthDecember TimeMonth = 12
)

type TimeWeekday int64

const (
	TimeWeekdaySunday TimeWeekday = 0
	TimeWeekdayMonday TimeWeekday = 1
	TimeWeekdayTuesday TimeWeekday = 2
	TimeWeekdayWednesday TimeWeekday = 3
	TimeWeekdayThursday TimeWeekday = 4
	TimeWeekdayFriday TimeWeekday = 5
	TimeWeekdaySaturday TimeWeekday = 6
)

type Time gdnative.Object
func (Time) class() string { return "Time\000" }

func (gdClass Time) Object() Object { return Object(gdClass) }

var methodTime [21]gdnative.Method
func (gdClass Time) GetDatetimeDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[0], unix_time_val) }
func (gdClass Time) GetDateDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[1], unix_time_val) }
func (gdClass Time) GetTimeDictFromUnixTime(unix_time_val int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[2], unix_time_val) }
func (gdClass Time) GetDatetimeStringFromUnixTime(unix_time_val int64, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[3], unix_time_val, use_space) }
func (gdClass Time) GetDateStringFromUnixTime(unix_time_val int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[4], unix_time_val) }
func (gdClass Time) GetTimeStringFromUnixTime(unix_time_val int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[5], unix_time_val) }
func (gdClass Time) GetDatetimeDictFromDatetimeString(datetime string, weekday bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[6], datetime, weekday) }
func (gdClass Time) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[7], datetime, use_space) }
func (gdClass Time) GetUnixTimeFromDatetimeDict(datetime Dictionary) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[8], datetime) }
func (gdClass Time) GetUnixTimeFromDatetimeString(datetime string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[9], datetime) }
func (gdClass Time) GetOffsetStringFromOffsetMinutes(offset_minutes int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[10], offset_minutes) }
func (gdClass Time) GetDatetimeDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[11], utc) }
func (gdClass Time) GetDateDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[12], utc) }
func (gdClass Time) GetTimeDictFromSystem(utc bool) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[13], utc) }
func (gdClass Time) GetDatetimeStringFromSystem(utc bool, use_space bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[14], utc, use_space) }
func (gdClass Time) GetDateStringFromSystem(utc bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[15], utc) }
func (gdClass Time) GetTimeStringFromSystem(utc bool) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTime[16], utc) }
func (gdClass Time) GetTimeZoneFromSystem() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTime[17]) }
func (gdClass Time) GetUnixTimeFromSystem() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTime[18]) }
func (gdClass Time) GetTicksMsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[19]) }
func (gdClass Time) GetTicksUsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTime[20]) }

type TimerTimerProcessCallback int64

const (
	TimerTimerProcessPhysics TimerTimerProcessCallback = 0
	TimerTimerProcessIdle TimerTimerProcessCallback = 1
)

type Timer gdnative.Object
func (Timer) class() string { return "Timer\000" }

func (gdClass Timer) Node() Node { return Node(gdClass) }

var methodTimer [14]gdnative.Method
func (gdClass Timer) SetWaitTime(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[0], time_sec) }
func (gdClass Timer) GetWaitTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTimer[1]) }
func (gdClass Timer) SetOneShot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[2], enable) }
func (gdClass Timer) IsOneShot() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[3]) }
func (gdClass Timer) SetAutostart(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[4], enable) }
func (gdClass Timer) HasAutostart() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[5]) }
func (gdClass Timer) Start(time_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[6], time_sec) }
func (gdClass Timer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTimer[7]) }
func (gdClass Timer) SetPaused(paused bool)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[8], paused) }
func (gdClass Timer) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[9]) }
func (gdClass Timer) IsStopped() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTimer[10]) }
func (gdClass Timer) GetTimeLeft() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTimer[11]) }
func (gdClass Timer) SetTimerProcessCallback(callback TimerTimerProcessCallback)  { gdnative.Call(gdnative.Object(gdClass), methodTimer[12], callback) }
func (gdClass Timer) GetTimerProcessCallback() TimerTimerProcessCallback { return gdnative.Return[TimerTimerProcessCallback](gdnative.Object(gdClass), methodTimer[13]) }

type TorusMesh gdnative.Object
func (TorusMesh) class() string { return "TorusMesh\000" }

func (gdClass TorusMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodTorusMesh [8]gdnative.Method
func (gdClass TorusMesh) SetInnerRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[0], radius) }
func (gdClass TorusMesh) GetInnerRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTorusMesh[1]) }
func (gdClass TorusMesh) SetOuterRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[2], radius) }
func (gdClass TorusMesh) GetOuterRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTorusMesh[3]) }
func (gdClass TorusMesh) SetRings(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[4], rings) }
func (gdClass TorusMesh) GetRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTorusMesh[5]) }
func (gdClass TorusMesh) SetRingSegments(rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTorusMesh[6], rings) }
func (gdClass TorusMesh) GetRingSegments() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTorusMesh[7]) }

type TouchScreenButtonVisibilityMode int64

const (
	TouchScreenButtonVisibilityAlways TouchScreenButtonVisibilityMode = 0
	TouchScreenButtonVisibilityTouchscreenOnly TouchScreenButtonVisibilityMode = 1
)

type TouchScreenButton gdnative.Object
func (TouchScreenButton) class() string { return "TouchScreenButton\000" }

func (gdClass TouchScreenButton) Node2D() Node2D { return Node2D(gdClass) }

var methodTouchScreenButton [19]gdnative.Method
func (gdClass TouchScreenButton) SetTextureNormal(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[0], texture) }
func (gdClass TouchScreenButton) GetTextureNormal() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTouchScreenButton[1]) }
func (gdClass TouchScreenButton) SetTexturePressed(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[2], texture) }
func (gdClass TouchScreenButton) GetTexturePressed() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTouchScreenButton[3]) }
func (gdClass TouchScreenButton) SetBitmask(bitmask BitMap)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[4], bitmask) }
func (gdClass TouchScreenButton) GetBitmask() BitMap { return gdnative.Return[BitMap](gdnative.Object(gdClass), methodTouchScreenButton[5]) }
func (gdClass TouchScreenButton) SetShape(shape Shape2D)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[6], shape) }
func (gdClass TouchScreenButton) GetShape() Shape2D { return gdnative.Return[Shape2D](gdnative.Object(gdClass), methodTouchScreenButton[7]) }
func (gdClass TouchScreenButton) SetShapeCentered(bool bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[8], bool) }
func (gdClass TouchScreenButton) IsShapeCentered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[9]) }
func (gdClass TouchScreenButton) SetShapeVisible(bool bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[10], bool) }
func (gdClass TouchScreenButton) IsShapeVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[11]) }
func (gdClass TouchScreenButton) SetAction(action string)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[12], action) }
func (gdClass TouchScreenButton) GetAction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTouchScreenButton[13]) }
func (gdClass TouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[14], mode) }
func (gdClass TouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode { return gdnative.Return[TouchScreenButtonVisibilityMode](gdnative.Object(gdClass), methodTouchScreenButton[15]) }
func (gdClass TouchScreenButton) SetPassbyPress(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTouchScreenButton[16], enabled) }
func (gdClass TouchScreenButton) IsPassbyPressEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[17]) }
func (gdClass TouchScreenButton) IsPressed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTouchScreenButton[18]) }

type Translation gdnative.Object
func (Translation) class() string { return "Translation\000" }

func (gdClass Translation) Resource() Resource { return Resource(gdClass) }

var methodTranslation [9]gdnative.Method
func (gdClass Translation) virtual(val any, name string) any {	switch name {
	case "_get_plural_message":
		i, ok := val.(interface{ GetPluralMessage(src_message string, src_plural_message string, n int64, context string) string })
		if ok {
			return i.GetPluralMessage
		}
	case "_get_message":
		i, ok := val.(interface{ GetMessage(src_message string, context string) string })
		if ok {
			return i.GetMessage
		}
	}
	return nil
}
func (gdClass Translation) SetLocale(locale string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[0], locale) }
func (gdClass Translation) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[1]) }
func (gdClass Translation) AddMessage(src_message string, xlated_message string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[2], src_message, xlated_message, context) }
func (gdClass Translation) AddPluralMessage(src_message string, xlated_messages []string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[3], src_message, xlated_messages, context) }
func (gdClass Translation) GetMessage(src_message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[4], src_message, context) }
func (gdClass Translation) GetPluralMessage(src_message string, src_plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslation[5], src_message, src_plural_message, n, context) }
func (gdClass Translation) EraseMessage(src_message string, context string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslation[6], src_message, context) }
func (gdClass Translation) GetMessageList() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslation[7]) }
func (gdClass Translation) GetMessageCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTranslation[8]) }

type TranslationServer gdnative.Object
func (TranslationServer) class() string { return "TranslationServer\000" }

func (gdClass TranslationServer) Object() Object { return Object(gdClass) }

var methodTranslationServer [23]gdnative.Method
func (gdClass TranslationServer) SetLocale(locale string)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[0], locale) }
func (gdClass TranslationServer) GetLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[1]) }
func (gdClass TranslationServer) GetToolLocale() string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[2]) }
func (gdClass TranslationServer) CompareLocales(locale_a string, locale_b string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTranslationServer[3], locale_a, locale_b) }
func (gdClass TranslationServer) StandardizeLocale(locale string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[4], locale) }
func (gdClass TranslationServer) GetAllLanguages() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[5]) }
func (gdClass TranslationServer) GetLanguageName(language string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[6], language) }
func (gdClass TranslationServer) GetAllScripts() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[7]) }
func (gdClass TranslationServer) GetScriptName(script string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[8], script) }
func (gdClass TranslationServer) GetAllCountries() []string { return gdnative.Return[[]string](gdnative.Object(gdClass), methodTranslationServer[9]) }
func (gdClass TranslationServer) GetCountryName(country string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[10], country) }
func (gdClass TranslationServer) GetLocaleName(locale string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[11], locale) }
func (gdClass TranslationServer) Translate(message string, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[12], message, context) }
func (gdClass TranslationServer) TranslatePlural(message string, plural_message string, n int64, context string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[13], message, plural_message, n, context) }
func (gdClass TranslationServer) AddTranslation(translation Translation)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[14], translation) }
func (gdClass TranslationServer) RemoveTranslation(translation Translation)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[15], translation) }
func (gdClass TranslationServer) GetTranslationObject(locale string) Translation { return gdnative.Return[Translation](gdnative.Object(gdClass), methodTranslationServer[16], locale) }
func (gdClass TranslationServer) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[17]) }
func (gdClass TranslationServer) GetLoadedLocales() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTranslationServer[18]) }
func (gdClass TranslationServer) IsPseudolocalizationEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTranslationServer[19]) }
func (gdClass TranslationServer) SetPseudolocalizationEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[20], enabled) }
func (gdClass TranslationServer) ReloadPseudolocalization()  { gdnative.Call(gdnative.Object(gdClass), methodTranslationServer[21]) }
func (gdClass TranslationServer) Pseudolocalize(message string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTranslationServer[22], message) }

type TreeSelectMode int64

const (
	TreeSelectSingle TreeSelectMode = 0
	TreeSelectRow TreeSelectMode = 1
	TreeSelectMulti TreeSelectMode = 2
)

type TreeDropModeFlags int64

const (
	TreeDropModeDisabled TreeDropModeFlags = 0
	TreeDropModeOnItem TreeDropModeFlags = 1
	TreeDropModeInbetween TreeDropModeFlags = 2
)

type Tree gdnative.Object
func (Tree) class() string { return "Tree\000" }

func (gdClass Tree) Control() Control { return Control(gdClass) }

var methodTree [53]gdnative.Method
func (gdClass Tree) Clear()  { gdnative.Call(gdnative.Object(gdClass), methodTree[0]) }
func (gdClass Tree) CreateItem(parent TreeItem, idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[1], parent, idx) }
func (gdClass Tree) GetRoot() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[2]) }
func (gdClass Tree) SetColumnCustomMinimumWidth(column int64, min_width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[3], column, min_width) }
func (gdClass Tree) SetColumnExpand(column int64, expand bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[4], column, expand) }
func (gdClass Tree) SetColumnExpandRatio(column int64, ratio int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[5], column, ratio) }
func (gdClass Tree) SetColumnClipContent(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[6], column, enable) }
func (gdClass Tree) IsColumnExpanding(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[7], column) }
func (gdClass Tree) IsColumnClippingContent(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[8], column) }
func (gdClass Tree) GetColumnExpandRatio(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[9], column) }
func (gdClass Tree) GetColumnWidth(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[10], column) }
func (gdClass Tree) SetHideRoot(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[11], enable) }
func (gdClass Tree) IsRootHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[12]) }
func (gdClass Tree) GetNextSelected(from TreeItem) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[13], from) }
func (gdClass Tree) GetSelected() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[14]) }
func (gdClass Tree) GetSelectedColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[15]) }
func (gdClass Tree) GetPressedButton() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[16]) }
func (gdClass Tree) SetSelectMode(mode TreeSelectMode)  { gdnative.Call(gdnative.Object(gdClass), methodTree[17], mode) }
func (gdClass Tree) GetSelectMode() TreeSelectMode { return gdnative.Return[TreeSelectMode](gdnative.Object(gdClass), methodTree[18]) }
func (gdClass Tree) SetColumns(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[19], amount) }
func (gdClass Tree) GetColumns() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[20]) }
func (gdClass Tree) GetEdited() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[21]) }
func (gdClass Tree) GetEditedColumn() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[22]) }
func (gdClass Tree) EditSelected() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[23]) }
func (gdClass Tree) GetCustomPopupRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTree[24]) }
func (gdClass Tree) GetItemAreaRect(item TreeItem, column int64, button_index int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTree[25], item, column, button_index) }
func (gdClass Tree) GetItemAtPosition(position Vector2) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTree[26], position) }
func (gdClass Tree) GetColumnAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[27], position) }
func (gdClass Tree) GetDropSectionAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[28], position) }
func (gdClass Tree) GetButtonIdAtPosition(position Vector2) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[29], position) }
func (gdClass Tree) EnsureCursorIsVisible()  { gdnative.Call(gdnative.Object(gdClass), methodTree[30]) }
func (gdClass Tree) SetColumnTitlesVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[31], visible) }
func (gdClass Tree) AreColumnTitlesVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[32]) }
func (gdClass Tree) SetColumnTitle(column int64, title string)  { gdnative.Call(gdnative.Object(gdClass), methodTree[33], column, title) }
func (gdClass Tree) GetColumnTitle(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTree[34], column) }
func (gdClass Tree) SetColumnTitleDirection(column int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTree[35], column, direction) }
func (gdClass Tree) GetColumnTitleDirection(column int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTree[36], column) }
func (gdClass Tree) SetColumnTitleLanguage(column int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTree[37], column, language) }
func (gdClass Tree) GetColumnTitleLanguage(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTree[38], column) }
func (gdClass Tree) GetScroll() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodTree[39]) }
func (gdClass Tree) ScrollToItem(item TreeItem, center_on_item bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[40], item, center_on_item) }
func (gdClass Tree) SetHScrollEnabled(h_scroll bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[41], h_scroll) }
func (gdClass Tree) IsHScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[42]) }
func (gdClass Tree) SetVScrollEnabled(h_scroll bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[43], h_scroll) }
func (gdClass Tree) IsVScrollEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[44]) }
func (gdClass Tree) SetHideFolding(hide bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[45], hide) }
func (gdClass Tree) IsFoldingHidden() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[46]) }
func (gdClass Tree) SetDropModeFlags(flags int64)  { gdnative.Call(gdnative.Object(gdClass), methodTree[47], flags) }
func (gdClass Tree) GetDropModeFlags() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTree[48]) }
func (gdClass Tree) SetAllowRmbSelect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[49], allow) }
func (gdClass Tree) GetAllowRmbSelect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[50]) }
func (gdClass Tree) SetAllowReselect(allow bool)  { gdnative.Call(gdnative.Object(gdClass), methodTree[51], allow) }
func (gdClass Tree) GetAllowReselect() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTree[52]) }

type TreeItemTreeCellMode int64

const (
	TreeItemCellModeString TreeItemTreeCellMode = 0
	TreeItemCellModeCheck TreeItemTreeCellMode = 1
	TreeItemCellModeRange TreeItemTreeCellMode = 2
	TreeItemCellModeIcon TreeItemTreeCellMode = 3
	TreeItemCellModeCustom TreeItemTreeCellMode = 4
)

type TreeItem gdnative.Object
func (TreeItem) class() string { return "TreeItem\000" }

func (gdClass TreeItem) Object() Object { return Object(gdClass) }

var methodTreeItem [94]gdnative.Method
func (gdClass TreeItem) SetCellMode(column int64, mode TreeItemTreeCellMode)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[0], column, mode) }
func (gdClass TreeItem) GetCellMode(column int64) TreeItemTreeCellMode { return gdnative.Return[TreeItemTreeCellMode](gdnative.Object(gdClass), methodTreeItem[1], column) }
func (gdClass TreeItem) SetChecked(column int64, checked bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[2], column, checked) }
func (gdClass TreeItem) SetIndeterminate(column int64, indeterminate bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[3], column, indeterminate) }
func (gdClass TreeItem) IsChecked(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[4], column) }
func (gdClass TreeItem) IsIndeterminate(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[5], column) }
func (gdClass TreeItem) PropagateCheck(column int64, emit_signal bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[6], column, emit_signal) }
func (gdClass TreeItem) SetText(column int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[7], column, text) }
func (gdClass TreeItem) GetText(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[8], column) }
func (gdClass TreeItem) SetTextDirection(column int64, direction ControlTextDirection)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[9], column, direction) }
func (gdClass TreeItem) GetTextDirection(column int64) ControlTextDirection { return gdnative.Return[ControlTextDirection](gdnative.Object(gdClass), methodTreeItem[10], column) }
func (gdClass TreeItem) SetStructuredTextBidiOverride(column int64, parser TextServerStructuredTextParser)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[11], column, parser) }
func (gdClass TreeItem) GetStructuredTextBidiOverride(column int64) TextServerStructuredTextParser { return gdnative.Return[TextServerStructuredTextParser](gdnative.Object(gdClass), methodTreeItem[12], column) }
func (gdClass TreeItem) SetStructuredTextBidiOverrideOptions(column int64, args Array)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[13], column, args) }
func (gdClass TreeItem) GetStructuredTextBidiOverrideOptions(column int64) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTreeItem[14], column) }
func (gdClass TreeItem) SetLanguage(column int64, language string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[15], column, language) }
func (gdClass TreeItem) GetLanguage(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[16], column) }
func (gdClass TreeItem) SetSuffix(column int64, text string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[17], column, text) }
func (gdClass TreeItem) GetSuffix(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[18], column) }
func (gdClass TreeItem) SetIcon(column int64, texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[19], column, texture) }
func (gdClass TreeItem) GetIcon(column int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTreeItem[20], column) }
func (gdClass TreeItem) SetIconRegion(column int64, region Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[21], column, region) }
func (gdClass TreeItem) GetIconRegion(column int64) Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodTreeItem[22], column) }
func (gdClass TreeItem) SetIconMaxWidth(column int64, width int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[23], column, width) }
func (gdClass TreeItem) GetIconMaxWidth(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[24], column) }
func (gdClass TreeItem) SetIconModulate(column int64, modulate Color)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[25], column, modulate) }
func (gdClass TreeItem) GetIconModulate(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[26], column) }
func (gdClass TreeItem) SetRange(column int64, value float64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[27], column, value) }
func (gdClass TreeItem) GetRange(column int64) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTreeItem[28], column) }
func (gdClass TreeItem) SetRangeConfig(column int64, min float64, max float64, step float64, expr bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[29], column, min, max, step, expr) }
func (gdClass TreeItem) GetRangeConfig(column int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodTreeItem[30], column) }
func (gdClass TreeItem) SetMetadata(column int64, meta any)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[31], column, meta) }
func (gdClass TreeItem) GetMetadata(column int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTreeItem[32], column) }
func (gdClass TreeItem) SetCustomDraw(column int64, object Object, callback string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[33], column, object, callback) }
func (gdClass TreeItem) SetCollapsed(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[34], enable) }
func (gdClass TreeItem) IsCollapsed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[35]) }
func (gdClass TreeItem) SetVisible(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[36], enable) }
func (gdClass TreeItem) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[37]) }
func (gdClass TreeItem) UncollapseTree()  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[38]) }
func (gdClass TreeItem) SetCustomMinimumHeight(height int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[39], height) }
func (gdClass TreeItem) GetCustomMinimumHeight() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[40]) }
func (gdClass TreeItem) SetSelectable(column int64, selectable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[41], column, selectable) }
func (gdClass TreeItem) IsSelectable(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[42], column) }
func (gdClass TreeItem) IsSelected(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[43], column) }
func (gdClass TreeItem) Select(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[44], column) }
func (gdClass TreeItem) Deselect(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[45], column) }
func (gdClass TreeItem) SetEditable(column int64, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[46], column, enabled) }
func (gdClass TreeItem) IsEditable(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[47], column) }
func (gdClass TreeItem) SetCustomColor(column int64, color Color)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[48], column, color) }
func (gdClass TreeItem) GetCustomColor(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[49], column) }
func (gdClass TreeItem) ClearCustomColor(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[50], column) }
func (gdClass TreeItem) SetCustomFont(column int64, font Font)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[51], column, font) }
func (gdClass TreeItem) GetCustomFont(column int64) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodTreeItem[52], column) }
func (gdClass TreeItem) SetCustomFontSize(column int64, font_size int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[53], column, font_size) }
func (gdClass TreeItem) GetCustomFontSize(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[54], column) }
func (gdClass TreeItem) SetCustomBgColor(column int64, color Color, just_outline bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[55], column, color, just_outline) }
func (gdClass TreeItem) ClearCustomBgColor(column int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[56], column) }
func (gdClass TreeItem) GetCustomBgColor(column int64) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodTreeItem[57], column) }
func (gdClass TreeItem) SetCustomAsButton(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[58], column, enable) }
func (gdClass TreeItem) IsCustomSetAsButton(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[59], column) }
func (gdClass TreeItem) AddButton(column int64, button Texture2D, id int64, disabled bool, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[60], column, button, id, disabled, tooltip) }
func (gdClass TreeItem) GetButtonCount(column int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[61], column) }
func (gdClass TreeItem) GetButtonTooltip(column int64, button_idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[62], column, button_idx) }
func (gdClass TreeItem) GetButtonId(column int64, button_idx int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[63], column, button_idx) }
func (gdClass TreeItem) GetButtonById(column int64, id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[64], column, id) }
func (gdClass TreeItem) GetButton(column int64, button_idx int64) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodTreeItem[65], column, button_idx) }
func (gdClass TreeItem) SetButton(column int64, button_idx int64, button Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[66], column, button_idx, button) }
func (gdClass TreeItem) EraseButton(column int64, button_idx int64)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[67], column, button_idx) }
func (gdClass TreeItem) SetButtonDisabled(column int64, button_idx int64, disabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[68], column, button_idx, disabled) }
func (gdClass TreeItem) IsButtonDisabled(column int64, button_idx int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[69], column, button_idx) }
func (gdClass TreeItem) SetTooltip(column int64, tooltip string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[70], column, tooltip) }
func (gdClass TreeItem) GetTooltip(column int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodTreeItem[71], column) }
func (gdClass TreeItem) SetTextAlignment(column int64, text_alignment HorizontalAlignment)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[72], column, text_alignment) }
func (gdClass TreeItem) GetTextAlignment(column int64) HorizontalAlignment { return gdnative.Return[HorizontalAlignment](gdnative.Object(gdClass), methodTreeItem[73], column) }
func (gdClass TreeItem) SetExpandRight(column int64, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[74], column, enable) }
func (gdClass TreeItem) GetExpandRight(column int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[75], column) }
func (gdClass TreeItem) SetDisableFolding(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[76], disable) }
func (gdClass TreeItem) IsFoldingDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTreeItem[77]) }
func (gdClass TreeItem) CreateChild(idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[78], idx) }
func (gdClass TreeItem) GetTree() Tree { return gdnative.Return[Tree](gdnative.Object(gdClass), methodTreeItem[79]) }
func (gdClass TreeItem) GetNext() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[80]) }
func (gdClass TreeItem) GetPrev() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[81]) }
func (gdClass TreeItem) GetParent() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[82]) }
func (gdClass TreeItem) GetFirstChild() TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[83]) }
func (gdClass TreeItem) GetNextVisible(wrap bool) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[84], wrap) }
func (gdClass TreeItem) GetPrevVisible(wrap bool) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[85], wrap) }
func (gdClass TreeItem) GetChild(idx int64) TreeItem { return gdnative.Return[TreeItem](gdnative.Object(gdClass), methodTreeItem[86], idx) }
func (gdClass TreeItem) GetChildCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[87]) }
func (gdClass TreeItem) GetChildren() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodTreeItem[88]) }
func (gdClass TreeItem) GetIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTreeItem[89]) }
func (gdClass TreeItem) MoveBefore(item TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[90], item) }
func (gdClass TreeItem) MoveAfter(item TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[91], item) }
func (gdClass TreeItem) RemoveChild(child TreeItem)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[92], child) }
func (gdClass TreeItem) CallRecursive(method string)  { gdnative.Call(gdnative.Object(gdClass), methodTreeItem[93], method) }

type TriangleMesh gdnative.Object
func (TriangleMesh) class() string { return "TriangleMesh\000" }

func (gdClass TriangleMesh) RefCounted() RefCounted { return RefCounted(gdClass) }


type TubeTrailMesh gdnative.Object
func (TubeTrailMesh) class() string { return "TubeTrailMesh\000" }

func (gdClass TubeTrailMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh(gdClass) }

var methodTubeTrailMesh [12]gdnative.Method
func (gdClass TubeTrailMesh) SetRadius(radius float64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[0], radius) }
func (gdClass TubeTrailMesh) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTubeTrailMesh[1]) }
func (gdClass TubeTrailMesh) SetRadialSteps(radial_steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[2], radial_steps) }
func (gdClass TubeTrailMesh) GetRadialSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[3]) }
func (gdClass TubeTrailMesh) SetSections(sections int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[4], sections) }
func (gdClass TubeTrailMesh) GetSections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[5]) }
func (gdClass TubeTrailMesh) SetSectionLength(section_length float64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[6], section_length) }
func (gdClass TubeTrailMesh) GetSectionLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTubeTrailMesh[7]) }
func (gdClass TubeTrailMesh) SetSectionRings(section_rings int64)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[8], section_rings) }
func (gdClass TubeTrailMesh) GetSectionRings() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodTubeTrailMesh[9]) }
func (gdClass TubeTrailMesh) SetCurve(curve Curve)  { gdnative.Call(gdnative.Object(gdClass), methodTubeTrailMesh[10], curve) }
func (gdClass TubeTrailMesh) GetCurve() Curve { return gdnative.Return[Curve](gdnative.Object(gdClass), methodTubeTrailMesh[11]) }

type TweenTweenProcessMode int64

const (
	TweenTweenProcessPhysics TweenTweenProcessMode = 0
	TweenTweenProcessIdle TweenTweenProcessMode = 1
)

type TweenTweenPauseMode int64

const (
	TweenTweenPauseBound TweenTweenPauseMode = 0
	TweenTweenPauseStop TweenTweenPauseMode = 1
	TweenTweenPauseProcess TweenTweenPauseMode = 2
)

type TweenTransitionType int64

const (
	TweenTransLinear TweenTransitionType = 0
	TweenTransSine TweenTransitionType = 1
	TweenTransQuint TweenTransitionType = 2
	TweenTransQuart TweenTransitionType = 3
	TweenTransQuad TweenTransitionType = 4
	TweenTransExpo TweenTransitionType = 5
	TweenTransElastic TweenTransitionType = 6
	TweenTransCubic TweenTransitionType = 7
	TweenTransCirc TweenTransitionType = 8
	TweenTransBounce TweenTransitionType = 9
	TweenTransBack TweenTransitionType = 10
)

type TweenEaseType int64

const (
	TweenEaseIn TweenEaseType = 0
	TweenEaseOut TweenEaseType = 1
	TweenEaseInOut TweenEaseType = 2
	TweenEaseOutIn TweenEaseType = 3
)

type Tween gdnative.Object
func (Tween) class() string { return "Tween\000" }

func (gdClass Tween) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodTween [23]gdnative.Method
func (gdClass Tween) TweenProperty(object Object, property NodePath, final_val any, duration float64) PropertyTweener { return gdnative.Return[PropertyTweener](gdnative.Object(gdClass), methodTween[0], object, property, final_val, duration) }
func (gdClass Tween) TweenInterval(time float64) IntervalTweener { return gdnative.Return[IntervalTweener](gdnative.Object(gdClass), methodTween[1], time) }
func (gdClass Tween) TweenCallback(callback Callable) CallbackTweener { return gdnative.Return[CallbackTweener](gdnative.Object(gdClass), methodTween[2], callback) }
func (gdClass Tween) TweenMethod(method Callable, from any, to any, duration float64) MethodTweener { return gdnative.Return[MethodTweener](gdnative.Object(gdClass), methodTween[3], method, from, to, duration) }
func (gdClass Tween) CustomStep(delta float64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[4], delta) }
func (gdClass Tween) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodTween[5]) }
func (gdClass Tween) Pause()  { gdnative.Call(gdnative.Object(gdClass), methodTween[6]) }
func (gdClass Tween) Play()  { gdnative.Call(gdnative.Object(gdClass), methodTween[7]) }
func (gdClass Tween) Kill()  { gdnative.Call(gdnative.Object(gdClass), methodTween[8]) }
func (gdClass Tween) GetTotalElapsedTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodTween[9]) }
func (gdClass Tween) IsRunning() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[10]) }
func (gdClass Tween) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodTween[11]) }
func (gdClass Tween) BindNode(node Node) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[12], node) }
func (gdClass Tween) SetProcessMode(mode TweenTweenProcessMode) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[13], mode) }
func (gdClass Tween) SetPauseMode(mode TweenTweenPauseMode) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[14], mode) }
func (gdClass Tween) SetParallel(parallel bool) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[15], parallel) }
func (gdClass Tween) SetLoops(loops int64) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[16], loops) }
func (gdClass Tween) SetSpeedScale(speed float64) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[17], speed) }
func (gdClass Tween) SetTrans(trans TweenTransitionType) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[18], trans) }
func (gdClass Tween) SetEase(ease TweenEaseType) Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[19], ease) }
func (gdClass Tween) Parallel() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[20]) }
func (gdClass Tween) Chain() Tween { return gdnative.Return[Tween](gdnative.Object(gdClass), methodTween[21]) }
func (gdClass Tween) InterpolateValue(initial_value any, delta_value any, elapsed_time float64, duration float64, trans_type TweenTransitionType, ease_type TweenEaseType) any { return gdnative.Return[any](gdnative.Object(gdClass), methodTween[22], initial_value, delta_value, elapsed_time, duration, trans_type, ease_type) }

type Tweener gdnative.Object
func (Tweener) class() string { return "Tweener\000" }

func (gdClass Tweener) RefCounted() RefCounted { return RefCounted(gdClass) }


type UDPServer gdnative.Object
func (UDPServer) class() string { return "UDPServer\000" }

func (gdClass UDPServer) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodUDPServer [9]gdnative.Method
func (gdClass UDPServer) Listen(port int64, bind_address string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodUDPServer[0], port, bind_address) }
func (gdClass UDPServer) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodUDPServer[1]) }
func (gdClass UDPServer) IsConnectionAvailable() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUDPServer[2]) }
func (gdClass UDPServer) GetLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUDPServer[3]) }
func (gdClass UDPServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUDPServer[4]) }
func (gdClass UDPServer) TakeConnection() PacketPeerUDP { return gdnative.Return[PacketPeerUDP](gdnative.Object(gdClass), methodUDPServer[5]) }
func (gdClass UDPServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodUDPServer[6]) }
func (gdClass UDPServer) SetMaxPendingConnections(max_pending_connections int64)  { gdnative.Call(gdnative.Object(gdClass), methodUDPServer[7], max_pending_connections) }
func (gdClass UDPServer) GetMaxPendingConnections() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUDPServer[8]) }

type UPNPUPNPResult int64

const (
	UPNPUpnpResultSuccess UPNPUPNPResult = 0
	UPNPUpnpResultNotAuthorized UPNPUPNPResult = 1
	UPNPUpnpResultPortMappingNotFound UPNPUPNPResult = 2
	UPNPUpnpResultInconsistentParameters UPNPUPNPResult = 3
	UPNPUpnpResultNoSuchEntryInArray UPNPUPNPResult = 4
	UPNPUpnpResultActionFailed UPNPUPNPResult = 5
	UPNPUpnpResultSrcIpWildcardNotPermitted UPNPUPNPResult = 6
	UPNPUpnpResultExtPortWildcardNotPermitted UPNPUPNPResult = 7
	UPNPUpnpResultIntPortWildcardNotPermitted UPNPUPNPResult = 8
	UPNPUpnpResultRemoteHostMustBeWildcard UPNPUPNPResult = 9
	UPNPUpnpResultExtPortMustBeWildcard UPNPUPNPResult = 10
	UPNPUpnpResultNoPortMapsAvailable UPNPUPNPResult = 11
	UPNPUpnpResultConflictWithOtherMechanism UPNPUPNPResult = 12
	UPNPUpnpResultConflictWithOtherMapping UPNPUPNPResult = 13
	UPNPUpnpResultSamePortValuesRequired UPNPUPNPResult = 14
	UPNPUpnpResultOnlyPermanentLeaseSupported UPNPUPNPResult = 15
	UPNPUpnpResultInvalidGateway UPNPUPNPResult = 16
	UPNPUpnpResultInvalidPort UPNPUPNPResult = 17
	UPNPUpnpResultInvalidProtocol UPNPUPNPResult = 18
	UPNPUpnpResultInvalidDuration UPNPUPNPResult = 19
	UPNPUpnpResultInvalidArgs UPNPUPNPResult = 20
	UPNPUpnpResultInvalidResponse UPNPUPNPResult = 21
	UPNPUpnpResultInvalidParam UPNPUPNPResult = 22
	UPNPUpnpResultHttpError UPNPUPNPResult = 23
	UPNPUpnpResultSocketError UPNPUPNPResult = 24
	UPNPUpnpResultMemAllocError UPNPUPNPResult = 25
	UPNPUpnpResultNoGateway UPNPUPNPResult = 26
	UPNPUpnpResultNoDevices UPNPUPNPResult = 27
	UPNPUpnpResultUnknownError UPNPUPNPResult = 28
)

type UPNP gdnative.Object
func (UPNP) class() string { return "UPNP\000" }

func (gdClass UPNP) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodUPNP [17]gdnative.Method
func (gdClass UPNP) GetDeviceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[0]) }
func (gdClass UPNP) GetDevice(index int64) UPNPDevice { return gdnative.Return[UPNPDevice](gdnative.Object(gdClass), methodUPNP[1], index) }
func (gdClass UPNP) AddDevice(device UPNPDevice)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[2], device) }
func (gdClass UPNP) SetDevice(index int64, device UPNPDevice)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[3], index, device) }
func (gdClass UPNP) RemoveDevice(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[4], index) }
func (gdClass UPNP) ClearDevices()  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[5]) }
func (gdClass UPNP) GetGateway() UPNPDevice { return gdnative.Return[UPNPDevice](gdnative.Object(gdClass), methodUPNP[6]) }
func (gdClass UPNP) Discover(timeout int64, ttl int64, device_filter string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[7], timeout, ttl, device_filter) }
func (gdClass UPNP) QueryExternalAddress() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNP[8]) }
func (gdClass UPNP) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[9], port, port_internal, desc, proto, duration) }
func (gdClass UPNP) DeletePortMapping(port int64, proto string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[10], port, proto) }
func (gdClass UPNP) SetDiscoverMulticastIf(m_if string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[11], m_if) }
func (gdClass UPNP) GetDiscoverMulticastIf() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNP[12]) }
func (gdClass UPNP) SetDiscoverLocalPort(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[13], port) }
func (gdClass UPNP) GetDiscoverLocalPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNP[14]) }
func (gdClass UPNP) SetDiscoverIpv6(ipv6 bool)  { gdnative.Call(gdnative.Object(gdClass), methodUPNP[15], ipv6) }
func (gdClass UPNP) IsDiscoverIpv6() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUPNP[16]) }

type UPNPDeviceIGDStatus int64

const (
	UPNPDeviceIgdStatusOk UPNPDeviceIGDStatus = 0
	UPNPDeviceIgdStatusHttpError UPNPDeviceIGDStatus = 1
	UPNPDeviceIgdStatusHttpEmpty UPNPDeviceIGDStatus = 2
	UPNPDeviceIgdStatusNoUrls UPNPDeviceIGDStatus = 3
	UPNPDeviceIgdStatusNoIgd UPNPDeviceIGDStatus = 4
	UPNPDeviceIgdStatusDisconnected UPNPDeviceIGDStatus = 5
	UPNPDeviceIgdStatusUnknownDevice UPNPDeviceIGDStatus = 6
	UPNPDeviceIgdStatusInvalidControl UPNPDeviceIGDStatus = 7
	UPNPDeviceIgdStatusMallocError UPNPDeviceIGDStatus = 8
	UPNPDeviceIgdStatusUnknownError UPNPDeviceIGDStatus = 9
)

type UPNPDevice gdnative.Object
func (UPNPDevice) class() string { return "UPNPDevice\000" }

func (gdClass UPNPDevice) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodUPNPDevice [16]gdnative.Method
func (gdClass UPNPDevice) IsValidGateway() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUPNPDevice[0]) }
func (gdClass UPNPDevice) QueryExternalAddress() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[1]) }
func (gdClass UPNPDevice) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNPDevice[2], port, port_internal, desc, proto, duration) }
func (gdClass UPNPDevice) DeletePortMapping(port int64, proto string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUPNPDevice[3], port, proto) }
func (gdClass UPNPDevice) SetDescriptionUrl(url string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[4], url) }
func (gdClass UPNPDevice) GetDescriptionUrl() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[5]) }
func (gdClass UPNPDevice) SetServiceType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[6], atype) }
func (gdClass UPNPDevice) GetServiceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[7]) }
func (gdClass UPNPDevice) SetIgdControlUrl(url string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[8], url) }
func (gdClass UPNPDevice) GetIgdControlUrl() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[9]) }
func (gdClass UPNPDevice) SetIgdServiceType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[10], atype) }
func (gdClass UPNPDevice) GetIgdServiceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[11]) }
func (gdClass UPNPDevice) SetIgdOurAddr(addr string)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[12], addr) }
func (gdClass UPNPDevice) GetIgdOurAddr() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUPNPDevice[13]) }
func (gdClass UPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus)  { gdnative.Call(gdnative.Object(gdClass), methodUPNPDevice[14], status) }
func (gdClass UPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus { return gdnative.Return[UPNPDeviceIGDStatus](gdnative.Object(gdClass), methodUPNPDevice[15]) }

type UndoRedoMergeMode int64

const (
	UndoRedoMergeDisable UndoRedoMergeMode = 0
	UndoRedoMergeEnds UndoRedoMergeMode = 1
	UndoRedoMergeAll UndoRedoMergeMode = 2
)

type UndoRedo gdnative.Object
func (UndoRedo) class() string { return "UndoRedo\000" }

func (gdClass UndoRedo) Object() Object { return Object(gdClass) }

var methodUndoRedo [21]gdnative.Method
func (gdClass UndoRedo) CreateAction(name string, merge_mode UndoRedoMergeMode)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[0], name, merge_mode) }
func (gdClass UndoRedo) CommitAction(execute bool)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[1], execute) }
func (gdClass UndoRedo) IsCommittingAction() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[2]) }
func (gdClass UndoRedo) AddDoMethod(object Object, method string)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[3], object, method) }
func (gdClass UndoRedo) AddUndoMethod(object Object, method string)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[4], object, method) }
func (gdClass UndoRedo) AddDoProperty(object Object, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[5], object, property, value) }
func (gdClass UndoRedo) AddUndoProperty(object Object, property string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[6], object, property, value) }
func (gdClass UndoRedo) AddDoReference(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[7], object) }
func (gdClass UndoRedo) AddUndoReference(object Object)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[8], object) }
func (gdClass UndoRedo) StartForceKeepInMergeEnds()  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[9]) }
func (gdClass UndoRedo) EndForceKeepInMergeEnds()  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[10]) }
func (gdClass UndoRedo) GetHistoryCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[11]) }
func (gdClass UndoRedo) GetCurrentAction() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[12]) }
func (gdClass UndoRedo) GetActionName(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodUndoRedo[13], id) }
func (gdClass UndoRedo) ClearHistory(increase_version bool)  { gdnative.Call(gdnative.Object(gdClass), methodUndoRedo[14], increase_version) }
func (gdClass UndoRedo) GetCurrentActionName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodUndoRedo[15]) }
func (gdClass UndoRedo) HasUndo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[16]) }
func (gdClass UndoRedo) HasRedo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[17]) }
func (gdClass UndoRedo) GetVersion() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodUndoRedo[18]) }
func (gdClass UndoRedo) Redo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[19]) }
func (gdClass UndoRedo) Undo() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodUndoRedo[20]) }

type UniformSetCacheRD gdnative.Object
func (UniformSetCacheRD) class() string { return "UniformSetCacheRD\000" }

func (gdClass UniformSetCacheRD) Object() Object { return Object(gdClass) }


type VBoxContainer gdnative.Object
func (VBoxContainer) class() string { return "VBoxContainer\000" }

func (gdClass VBoxContainer) BoxContainer() BoxContainer { return BoxContainer(gdClass) }


type VFlowContainer gdnative.Object
func (VFlowContainer) class() string { return "VFlowContainer\000" }

func (gdClass VFlowContainer) FlowContainer() FlowContainer { return FlowContainer(gdClass) }


type VScrollBar gdnative.Object
func (VScrollBar) class() string { return "VScrollBar\000" }

func (gdClass VScrollBar) ScrollBar() ScrollBar { return ScrollBar(gdClass) }


type VSeparator gdnative.Object
func (VSeparator) class() string { return "VSeparator\000" }

func (gdClass VSeparator) Separator() Separator { return Separator(gdClass) }


type VSlider gdnative.Object
func (VSlider) class() string { return "VSlider\000" }

func (gdClass VSlider) Slider() Slider { return Slider(gdClass) }


type VSplitContainer gdnative.Object
func (VSplitContainer) class() string { return "VSplitContainer\000" }

func (gdClass VSplitContainer) SplitContainer() SplitContainer { return SplitContainer(gdClass) }


type VehicleBody3D gdnative.Object
func (VehicleBody3D) class() string { return "VehicleBody3D\000" }

func (gdClass VehicleBody3D) RigidDynamicBody3D() RigidDynamicBody3D { return RigidDynamicBody3D(gdClass) }

var methodVehicleBody3D [6]gdnative.Method
func (gdClass VehicleBody3D) SetEngineForce(engine_force float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[0], engine_force) }
func (gdClass VehicleBody3D) GetEngineForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[1]) }
func (gdClass VehicleBody3D) SetBrake(brake float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[2], brake) }
func (gdClass VehicleBody3D) GetBrake() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[3]) }
func (gdClass VehicleBody3D) SetSteering(steering float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleBody3D[4], steering) }
func (gdClass VehicleBody3D) GetSteering() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleBody3D[5]) }

type VehicleWheel3D gdnative.Object
func (VehicleWheel3D) class() string { return "VehicleWheel3D\000" }

func (gdClass VehicleWheel3D) Node3D() Node3D { return Node3D(gdClass) }

var methodVehicleWheel3D [32]gdnative.Method
func (gdClass VehicleWheel3D) SetRadius(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[0], length) }
func (gdClass VehicleWheel3D) GetRadius() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[1]) }
func (gdClass VehicleWheel3D) SetSuspensionRestLength(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[2], length) }
func (gdClass VehicleWheel3D) GetSuspensionRestLength() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[3]) }
func (gdClass VehicleWheel3D) SetSuspensionTravel(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[4], length) }
func (gdClass VehicleWheel3D) GetSuspensionTravel() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[5]) }
func (gdClass VehicleWheel3D) SetSuspensionStiffness(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[6], length) }
func (gdClass VehicleWheel3D) GetSuspensionStiffness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[7]) }
func (gdClass VehicleWheel3D) SetSuspensionMaxForce(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[8], length) }
func (gdClass VehicleWheel3D) GetSuspensionMaxForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[9]) }
func (gdClass VehicleWheel3D) SetDampingCompression(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[10], length) }
func (gdClass VehicleWheel3D) GetDampingCompression() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[11]) }
func (gdClass VehicleWheel3D) SetDampingRelaxation(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[12], length) }
func (gdClass VehicleWheel3D) GetDampingRelaxation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[13]) }
func (gdClass VehicleWheel3D) SetUseAsTraction(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[14], enable) }
func (gdClass VehicleWheel3D) IsUsedAsTraction() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[15]) }
func (gdClass VehicleWheel3D) SetUseAsSteering(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[16], enable) }
func (gdClass VehicleWheel3D) IsUsedAsSteering() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[17]) }
func (gdClass VehicleWheel3D) SetFrictionSlip(length float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[18], length) }
func (gdClass VehicleWheel3D) GetFrictionSlip() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[19]) }
func (gdClass VehicleWheel3D) IsInContact() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVehicleWheel3D[20]) }
func (gdClass VehicleWheel3D) GetContactBody() Node3D { return gdnative.Return[Node3D](gdnative.Object(gdClass), methodVehicleWheel3D[21]) }
func (gdClass VehicleWheel3D) SetRollInfluence(roll_influence float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[22], roll_influence) }
func (gdClass VehicleWheel3D) GetRollInfluence() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[23]) }
func (gdClass VehicleWheel3D) GetSkidinfo() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[24]) }
func (gdClass VehicleWheel3D) GetRpm() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[25]) }
func (gdClass VehicleWheel3D) SetEngineForce(engine_force float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[26], engine_force) }
func (gdClass VehicleWheel3D) GetEngineForce() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[27]) }
func (gdClass VehicleWheel3D) SetBrake(brake float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[28], brake) }
func (gdClass VehicleWheel3D) GetBrake() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[29]) }
func (gdClass VehicleWheel3D) SetSteering(steering float64)  { gdnative.Call(gdnative.Object(gdClass), methodVehicleWheel3D[30], steering) }
func (gdClass VehicleWheel3D) GetSteering() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVehicleWheel3D[31]) }

type VideoStream gdnative.Object
func (VideoStream) class() string { return "VideoStream\000" }

func (gdClass VideoStream) Resource() Resource { return Resource(gdClass) }


type VideoStreamPlayer gdnative.Object
func (VideoStreamPlayer) class() string { return "VideoStreamPlayer\000" }

func (gdClass VideoStreamPlayer) Control() Control { return Control(gdClass) }

var methodVideoStreamPlayer [25]gdnative.Method
func (gdClass VideoStreamPlayer) SetStream(stream VideoStream)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[0], stream) }
func (gdClass VideoStreamPlayer) GetStream() VideoStream { return gdnative.Return[VideoStream](gdnative.Object(gdClass), methodVideoStreamPlayer[1]) }
func (gdClass VideoStreamPlayer) Play()  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[2]) }
func (gdClass VideoStreamPlayer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[3]) }
func (gdClass VideoStreamPlayer) IsPlaying() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[4]) }
func (gdClass VideoStreamPlayer) SetPaused(paused bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[5], paused) }
func (gdClass VideoStreamPlayer) IsPaused() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[6]) }
func (gdClass VideoStreamPlayer) SetVolume(volume float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[7], volume) }
func (gdClass VideoStreamPlayer) GetVolume() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[8]) }
func (gdClass VideoStreamPlayer) SetVolumeDb(db float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[9], db) }
func (gdClass VideoStreamPlayer) GetVolumeDb() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[10]) }
func (gdClass VideoStreamPlayer) SetAudioTrack(track int64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[11], track) }
func (gdClass VideoStreamPlayer) GetAudioTrack() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVideoStreamPlayer[12]) }
func (gdClass VideoStreamPlayer) GetStreamName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamPlayer[13]) }
func (gdClass VideoStreamPlayer) SetStreamPosition(position float64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[14], position) }
func (gdClass VideoStreamPlayer) GetStreamPosition() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVideoStreamPlayer[15]) }
func (gdClass VideoStreamPlayer) SetAutoplay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[16], enabled) }
func (gdClass VideoStreamPlayer) HasAutoplay() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[17]) }
func (gdClass VideoStreamPlayer) SetExpand(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[18], enable) }
func (gdClass VideoStreamPlayer) HasExpand() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVideoStreamPlayer[19]) }
func (gdClass VideoStreamPlayer) SetBufferingMsec(msec int64)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[20], msec) }
func (gdClass VideoStreamPlayer) GetBufferingMsec() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVideoStreamPlayer[21]) }
func (gdClass VideoStreamPlayer) SetBus(bus string)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamPlayer[22], bus) }
func (gdClass VideoStreamPlayer) GetBus() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamPlayer[23]) }
func (gdClass VideoStreamPlayer) GetVideoTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodVideoStreamPlayer[24]) }

type VideoStreamTheora gdnative.Object
func (VideoStreamTheora) class() string { return "VideoStreamTheora\000" }

func (gdClass VideoStreamTheora) VideoStream() VideoStream { return VideoStream(gdClass) }

var methodVideoStreamTheora [2]gdnative.Method
func (gdClass VideoStreamTheora) SetFile(file string)  { gdnative.Call(gdnative.Object(gdClass), methodVideoStreamTheora[0], file) }
func (gdClass VideoStreamTheora) GetFile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVideoStreamTheora[1]) }

type ViewportPositionalShadowAtlasQuadrantSubdiv int64

const (
	ViewportShadowAtlasQuadrantSubdivDisabled ViewportPositionalShadowAtlasQuadrantSubdiv = 0
	ViewportShadowAtlasQuadrantSubdiv1 ViewportPositionalShadowAtlasQuadrantSubdiv = 1
	ViewportShadowAtlasQuadrantSubdiv4 ViewportPositionalShadowAtlasQuadrantSubdiv = 2
	ViewportShadowAtlasQuadrantSubdiv16 ViewportPositionalShadowAtlasQuadrantSubdiv = 3
	ViewportShadowAtlasQuadrantSubdiv64 ViewportPositionalShadowAtlasQuadrantSubdiv = 4
	ViewportShadowAtlasQuadrantSubdiv256 ViewportPositionalShadowAtlasQuadrantSubdiv = 5
	ViewportShadowAtlasQuadrantSubdiv1024 ViewportPositionalShadowAtlasQuadrantSubdiv = 6
	ViewportShadowAtlasQuadrantSubdivMax ViewportPositionalShadowAtlasQuadrantSubdiv = 7
)

type ViewportScaling3DMode int64

const (
	ViewportScaling3dModeBilinear ViewportScaling3DMode = 0
	ViewportScaling3dModeFsr ViewportScaling3DMode = 1
	ViewportScaling3dModeMax ViewportScaling3DMode = 2
)

type ViewportMSAA int64

const (
	ViewportMsaaDisabled ViewportMSAA = 0
	ViewportMsaa2x ViewportMSAA = 1
	ViewportMsaa4x ViewportMSAA = 2
	ViewportMsaa8x ViewportMSAA = 3
	ViewportMsaaMax ViewportMSAA = 4
)

type ViewportScreenSpaceAA int64

const (
	ViewportScreenSpaceAaDisabled ViewportScreenSpaceAA = 0
	ViewportScreenSpaceAaFxaa ViewportScreenSpaceAA = 1
	ViewportScreenSpaceAaMax ViewportScreenSpaceAA = 2
)

type ViewportRenderInfo int64

const (
	ViewportRenderInfoObjectsInFrame ViewportRenderInfo = 0
	ViewportRenderInfoPrimitivesInFrame ViewportRenderInfo = 1
	ViewportRenderInfoDrawCallsInFrame ViewportRenderInfo = 2
	ViewportRenderInfoMax ViewportRenderInfo = 3
)

type ViewportRenderInfoType int64

const (
	ViewportRenderInfoTypeVisible ViewportRenderInfoType = 0
	ViewportRenderInfoTypeShadow ViewportRenderInfoType = 1
	ViewportRenderInfoTypeMax ViewportRenderInfoType = 2
)

type ViewportDebugDraw int64

const (
	ViewportDebugDrawDisabled ViewportDebugDraw = 0
	ViewportDebugDrawUnshaded ViewportDebugDraw = 1
	ViewportDebugDrawLighting ViewportDebugDraw = 2
	ViewportDebugDrawOverdraw ViewportDebugDraw = 3
	ViewportDebugDrawWireframe ViewportDebugDraw = 4
	ViewportDebugDrawNormalBuffer ViewportDebugDraw = 5
	ViewportDebugDrawVoxelGiAlbedo ViewportDebugDraw = 6
	ViewportDebugDrawVoxelGiLighting ViewportDebugDraw = 7
	ViewportDebugDrawVoxelGiEmission ViewportDebugDraw = 8
	ViewportDebugDrawShadowAtlas ViewportDebugDraw = 9
	ViewportDebugDrawDirectionalShadowAtlas ViewportDebugDraw = 10
	ViewportDebugDrawSceneLuminance ViewportDebugDraw = 11
	ViewportDebugDrawSsao ViewportDebugDraw = 12
	ViewportDebugDrawSsil ViewportDebugDraw = 13
	ViewportDebugDrawPssmSplits ViewportDebugDraw = 14
	ViewportDebugDrawDecalAtlas ViewportDebugDraw = 15
	ViewportDebugDrawSdfgi ViewportDebugDraw = 16
	ViewportDebugDrawSdfgiProbes ViewportDebugDraw = 17
	ViewportDebugDrawGiBuffer ViewportDebugDraw = 18
	ViewportDebugDrawDisableLod ViewportDebugDraw = 19
	ViewportDebugDrawClusterOmniLights ViewportDebugDraw = 20
	ViewportDebugDrawClusterSpotLights ViewportDebugDraw = 21
	ViewportDebugDrawClusterDecals ViewportDebugDraw = 22
	ViewportDebugDrawClusterReflectionProbes ViewportDebugDraw = 23
	ViewportDebugDrawOccluders ViewportDebugDraw = 24
	ViewportDebugDrawMotionVectors ViewportDebugDraw = 25
)

type ViewportDefaultCanvasItemTextureFilter int64

const (
	ViewportDefaultCanvasItemTextureFilterNearest ViewportDefaultCanvasItemTextureFilter = 0
	ViewportDefaultCanvasItemTextureFilterLinear ViewportDefaultCanvasItemTextureFilter = 1
	ViewportDefaultCanvasItemTextureFilterLinearWithMipmaps ViewportDefaultCanvasItemTextureFilter = 2
	ViewportDefaultCanvasItemTextureFilterNearestWithMipmaps ViewportDefaultCanvasItemTextureFilter = 3
	ViewportDefaultCanvasItemTextureFilterMax ViewportDefaultCanvasItemTextureFilter = 4
)

type ViewportDefaultCanvasItemTextureRepeat int64

const (
	ViewportDefaultCanvasItemTextureRepeatDisabled ViewportDefaultCanvasItemTextureRepeat = 0
	ViewportDefaultCanvasItemTextureRepeatEnabled ViewportDefaultCanvasItemTextureRepeat = 1
	ViewportDefaultCanvasItemTextureRepeatMirror ViewportDefaultCanvasItemTextureRepeat = 2
	ViewportDefaultCanvasItemTextureRepeatMax ViewportDefaultCanvasItemTextureRepeat = 3
)

type ViewportSDFOversize int64

const (
	ViewportSdfOversize100Percent ViewportSDFOversize = 0
	ViewportSdfOversize120Percent ViewportSDFOversize = 1
	ViewportSdfOversize150Percent ViewportSDFOversize = 2
	ViewportSdfOversize200Percent ViewportSDFOversize = 3
	ViewportSdfOversizeMax ViewportSDFOversize = 4
)

type ViewportSDFScale int64

const (
	ViewportSdfScale100Percent ViewportSDFScale = 0
	ViewportSdfScale50Percent ViewportSDFScale = 1
	ViewportSdfScale25Percent ViewportSDFScale = 2
	ViewportSdfScaleMax ViewportSDFScale = 3
)

type ViewportVRSMode int64

const (
	ViewportVrsDisabled ViewportVRSMode = 0
	ViewportVrsTexture ViewportVRSMode = 1
	ViewportVrsXr ViewportVRSMode = 2
	ViewportVrsMax ViewportVRSMode = 3
)

type Viewport gdnative.Object
func (Viewport) class() string { return "Viewport\000" }

func (gdClass Viewport) Node() Node { return Node(gdClass) }

var methodViewport [95]gdnative.Method
func (gdClass Viewport) SetWorld2d(world_2d World2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[0], world_2d) }
func (gdClass Viewport) GetWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodViewport[1]) }
func (gdClass Viewport) FindWorld2d() World2D { return gdnative.Return[World2D](gdnative.Object(gdClass), methodViewport[2]) }
func (gdClass Viewport) SetCanvasTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[3], xform) }
func (gdClass Viewport) GetCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[4]) }
func (gdClass Viewport) SetGlobalCanvasTransform(xform Transform2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[5], xform) }
func (gdClass Viewport) GetGlobalCanvasTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[6]) }
func (gdClass Viewport) GetFinalTransform() Transform2D { return gdnative.Return[Transform2D](gdnative.Object(gdClass), methodViewport[7]) }
func (gdClass Viewport) GetVisibleRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodViewport[8]) }
func (gdClass Viewport) SetTransparentBackground(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[9], enable) }
func (gdClass Viewport) HasTransparentBackground() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[10]) }
func (gdClass Viewport) SetMsaa(msaa ViewportMSAA)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[11], msaa) }
func (gdClass Viewport) GetMsaa() ViewportMSAA { return gdnative.Return[ViewportMSAA](gdnative.Object(gdClass), methodViewport[12]) }
func (gdClass Viewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[13], screen_space_aa) }
func (gdClass Viewport) GetScreenSpaceAa() ViewportScreenSpaceAA { return gdnative.Return[ViewportScreenSpaceAA](gdnative.Object(gdClass), methodViewport[14]) }
func (gdClass Viewport) SetUseTaa(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[15], enable) }
func (gdClass Viewport) IsUsingTaa() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[16]) }
func (gdClass Viewport) SetUseDebanding(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[17], enable) }
func (gdClass Viewport) IsUsingDebanding() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[18]) }
func (gdClass Viewport) SetUseOcclusionCulling(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[19], enable) }
func (gdClass Viewport) IsUsingOcclusionCulling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[20]) }
func (gdClass Viewport) SetDebugDraw(debug_draw ViewportDebugDraw)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[21], debug_draw) }
func (gdClass Viewport) GetDebugDraw() ViewportDebugDraw { return gdnative.Return[ViewportDebugDraw](gdnative.Object(gdClass), methodViewport[22]) }
func (gdClass Viewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodViewport[23], atype, info) }
func (gdClass Viewport) GetTexture() ViewportTexture { return gdnative.Return[ViewportTexture](gdnative.Object(gdClass), methodViewport[24]) }
func (gdClass Viewport) SetPhysicsObjectPicking(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[25], enable) }
func (gdClass Viewport) GetPhysicsObjectPicking() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[26]) }
func (gdClass Viewport) GetViewportRid() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodViewport[27]) }
func (gdClass Viewport) PushTextInput(text string)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[28], text) }
func (gdClass Viewport) PushInput(event InputEvent, in_local_coords bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[29], event, in_local_coords) }
func (gdClass Viewport) PushUnhandledInput(event InputEvent, in_local_coords bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[30], event, in_local_coords) }
func (gdClass Viewport) GetCamera2d() Camera2D { return gdnative.Return[Camera2D](gdnative.Object(gdClass), methodViewport[31]) }
func (gdClass Viewport) SetAsAudioListener2d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[32], enable) }
func (gdClass Viewport) IsAudioListener2d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[33]) }
func (gdClass Viewport) GetMousePosition() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodViewport[34]) }
func (gdClass Viewport) WarpMouse(position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[35], position) }
func (gdClass Viewport) GuiGetDragData() any { return gdnative.Return[any](gdnative.Object(gdClass), methodViewport[36]) }
func (gdClass Viewport) GuiIsDragging() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[37]) }
func (gdClass Viewport) GuiIsDragSuccessful() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[38]) }
func (gdClass Viewport) GuiReleaseFocus()  { gdnative.Call(gdnative.Object(gdClass), methodViewport[39]) }
func (gdClass Viewport) GuiGetFocusOwner() Control { return gdnative.Return[Control](gdnative.Object(gdClass), methodViewport[40]) }
func (gdClass Viewport) SetDisableInput(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[41], disable) }
func (gdClass Viewport) IsInputDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[42]) }
func (gdClass Viewport) SetPositionalShadowAtlasSize(size int64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[43], size) }
func (gdClass Viewport) GetPositionalShadowAtlasSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodViewport[44]) }
func (gdClass Viewport) SetPositionalShadowAtlas16Bits(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[45], enable) }
func (gdClass Viewport) GetPositionalShadowAtlas16Bits() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[46]) }
func (gdClass Viewport) SetSnapControlsToPixels(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[47], enabled) }
func (gdClass Viewport) IsSnapControlsToPixelsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[48]) }
func (gdClass Viewport) SetSnap2dTransformsToPixel(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[49], enabled) }
func (gdClass Viewport) IsSnap2dTransformsToPixelEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[50]) }
func (gdClass Viewport) SetSnap2dVerticesToPixel(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[51], enabled) }
func (gdClass Viewport) IsSnap2dVerticesToPixelEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[52]) }
func (gdClass Viewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant int64, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[53], quadrant, subdiv) }
func (gdClass Viewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant int64) ViewportPositionalShadowAtlasQuadrantSubdiv { return gdnative.Return[ViewportPositionalShadowAtlasQuadrantSubdiv](gdnative.Object(gdClass), methodViewport[54], quadrant) }
func (gdClass Viewport) SetInputAsHandled()  { gdnative.Call(gdnative.Object(gdClass), methodViewport[55]) }
func (gdClass Viewport) IsInputHandled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[56]) }
func (gdClass Viewport) SetHandleInputLocally(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[57], enable) }
func (gdClass Viewport) IsHandlingInputLocally() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[58]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[59], mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter { return gdnative.Return[ViewportDefaultCanvasItemTextureFilter](gdnative.Object(gdClass), methodViewport[60]) }
func (gdClass Viewport) SetEmbeddingSubwindows(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[61], enable) }
func (gdClass Viewport) IsEmbeddingSubwindows() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[62]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[63], mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat { return gdnative.Return[ViewportDefaultCanvasItemTextureRepeat](gdnative.Object(gdClass), methodViewport[64]) }
func (gdClass Viewport) SetSdfOversize(oversize ViewportSDFOversize)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[65], oversize) }
func (gdClass Viewport) GetSdfOversize() ViewportSDFOversize { return gdnative.Return[ViewportSDFOversize](gdnative.Object(gdClass), methodViewport[66]) }
func (gdClass Viewport) SetSdfScale(scale ViewportSDFScale)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[67], scale) }
func (gdClass Viewport) GetSdfScale() ViewportSDFScale { return gdnative.Return[ViewportSDFScale](gdnative.Object(gdClass), methodViewport[68]) }
func (gdClass Viewport) SetMeshLodThreshold(pixels float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[69], pixels) }
func (gdClass Viewport) GetMeshLodThreshold() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[70]) }
func (gdClass Viewport) SetWorld3d(world_3d World3D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[71], world_3d) }
func (gdClass Viewport) GetWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodViewport[72]) }
func (gdClass Viewport) FindWorld3d() World3D { return gdnative.Return[World3D](gdnative.Object(gdClass), methodViewport[73]) }
func (gdClass Viewport) SetUseOwnWorld3d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[74], enable) }
func (gdClass Viewport) IsUsingOwnWorld3d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[75]) }
func (gdClass Viewport) GetCamera3d() Camera3D { return gdnative.Return[Camera3D](gdnative.Object(gdClass), methodViewport[76]) }
func (gdClass Viewport) SetAsAudioListener3d(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[77], enable) }
func (gdClass Viewport) IsAudioListener3d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[78]) }
func (gdClass Viewport) SetDisable3d(disable bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[79], disable) }
func (gdClass Viewport) Is3dDisabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[80]) }
func (gdClass Viewport) SetUseXr(use bool)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[81], use) }
func (gdClass Viewport) IsUsingXr() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodViewport[82]) }
func (gdClass Viewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[83], scaling_3d_mode) }
func (gdClass Viewport) GetScaling3dMode() ViewportScaling3DMode { return gdnative.Return[ViewportScaling3DMode](gdnative.Object(gdClass), methodViewport[84]) }
func (gdClass Viewport) SetScaling3dScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[85], scale) }
func (gdClass Viewport) GetScaling3dScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[86]) }
func (gdClass Viewport) SetFsrSharpness(fsr_sharpness float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[87], fsr_sharpness) }
func (gdClass Viewport) GetFsrSharpness() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[88]) }
func (gdClass Viewport) SetTextureMipmapBias(texture_mipmap_bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[89], texture_mipmap_bias) }
func (gdClass Viewport) GetTextureMipmapBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodViewport[90]) }
func (gdClass Viewport) SetVrsMode(mode ViewportVRSMode)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[91], mode) }
func (gdClass Viewport) GetVrsMode() ViewportVRSMode { return gdnative.Return[ViewportVRSMode](gdnative.Object(gdClass), methodViewport[92]) }
func (gdClass Viewport) SetVrsTexture(texture Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodViewport[93], texture) }
func (gdClass Viewport) GetVrsTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodViewport[94]) }

type ViewportTexture gdnative.Object
func (ViewportTexture) class() string { return "ViewportTexture\000" }

func (gdClass ViewportTexture) Texture2D() Texture2D { return Texture2D(gdClass) }

var methodViewportTexture [2]gdnative.Method
func (gdClass ViewportTexture) SetViewportPathInScene(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodViewportTexture[0], path) }
func (gdClass ViewportTexture) GetViewportPathInScene() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodViewportTexture[1]) }

type VisibleOnScreenEnabler2DEnableMode int64

const (
	VisibleOnScreenEnabler2DEnableModeInherit VisibleOnScreenEnabler2DEnableMode = 0
	VisibleOnScreenEnabler2DEnableModeAlways VisibleOnScreenEnabler2DEnableMode = 1
	VisibleOnScreenEnabler2DEnableModeWhenPaused VisibleOnScreenEnabler2DEnableMode = 2
)

type VisibleOnScreenEnabler2D gdnative.Object
func (VisibleOnScreenEnabler2D) class() string { return "VisibleOnScreenEnabler2D\000" }

func (gdClass VisibleOnScreenEnabler2D) VisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D { return VisibleOnScreenNotifier2D(gdClass) }

var methodVisibleOnScreenEnabler2D [4]gdnative.Method
func (gdClass VisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[0], mode) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode { return gdnative.Return[VisibleOnScreenEnabler2DEnableMode](gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[1]) }
func (gdClass VisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[2], path) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisibleOnScreenEnabler2D[3]) }

type VisibleOnScreenEnabler3DEnableMode int64

const (
	VisibleOnScreenEnabler3DEnableModeInherit VisibleOnScreenEnabler3DEnableMode = 0
	VisibleOnScreenEnabler3DEnableModeAlways VisibleOnScreenEnabler3DEnableMode = 1
	VisibleOnScreenEnabler3DEnableModeWhenPaused VisibleOnScreenEnabler3DEnableMode = 2
)

type VisibleOnScreenEnabler3D gdnative.Object
func (VisibleOnScreenEnabler3D) class() string { return "VisibleOnScreenEnabler3D\000" }

func (gdClass VisibleOnScreenEnabler3D) VisibleOnScreenNotifier3D() VisibleOnScreenNotifier3D { return VisibleOnScreenNotifier3D(gdClass) }

var methodVisibleOnScreenEnabler3D [4]gdnative.Method
func (gdClass VisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[0], mode) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode { return gdnative.Return[VisibleOnScreenEnabler3DEnableMode](gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[1]) }
func (gdClass VisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[2], path) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisibleOnScreenEnabler3D[3]) }

type VisibleOnScreenNotifier2D gdnative.Object
func (VisibleOnScreenNotifier2D) class() string { return "VisibleOnScreenNotifier2D\000" }

func (gdClass VisibleOnScreenNotifier2D) Node2D() Node2D { return Node2D(gdClass) }

var methodVisibleOnScreenNotifier2D [3]gdnative.Method
func (gdClass VisibleOnScreenNotifier2D) SetRect(rect Rect2)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[0], rect) }
func (gdClass VisibleOnScreenNotifier2D) GetRect() Rect2 { return gdnative.Return[Rect2](gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[1]) }
func (gdClass VisibleOnScreenNotifier2D) IsOnScreen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisibleOnScreenNotifier2D[2]) }

type VisibleOnScreenNotifier3D gdnative.Object
func (VisibleOnScreenNotifier3D) class() string { return "VisibleOnScreenNotifier3D\000" }

func (gdClass VisibleOnScreenNotifier3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodVisibleOnScreenNotifier3D [2]gdnative.Method
func (gdClass VisibleOnScreenNotifier3D) SetAabb(rect AABB)  { gdnative.Call(gdnative.Object(gdClass), methodVisibleOnScreenNotifier3D[0], rect) }
func (gdClass VisibleOnScreenNotifier3D) IsOnScreen() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisibleOnScreenNotifier3D[1]) }

type VisualInstance3D gdnative.Object
func (VisualInstance3D) class() string { return "VisualInstance3D\000" }

func (gdClass VisualInstance3D) Node3D() Node3D { return Node3D(gdClass) }

var methodVisualInstance3D [9]gdnative.Method
func (gdClass VisualInstance3D) virtual(val any, name string) any {	switch name {
	case "_get_aabb":
		i, ok := val.(interface{ GetAabb() AABB })
		if ok {
			return i.GetAabb
		}
	}
	return nil
}
func (gdClass VisualInstance3D) SetBase(base RID)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[0], base) }
func (gdClass VisualInstance3D) GetBase() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodVisualInstance3D[1]) }
func (gdClass VisualInstance3D) GetInstance() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodVisualInstance3D[2]) }
func (gdClass VisualInstance3D) SetLayerMask(mask int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[3], mask) }
func (gdClass VisualInstance3D) GetLayerMask() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualInstance3D[4]) }
func (gdClass VisualInstance3D) SetLayerMaskValue(layer_number int64, value bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualInstance3D[5], layer_number, value) }
func (gdClass VisualInstance3D) GetLayerMaskValue(layer_number int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualInstance3D[6], layer_number) }
func (gdClass VisualInstance3D) GetTransformedAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVisualInstance3D[7]) }
func (gdClass VisualInstance3D) GetAabb() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVisualInstance3D[8]) }

type VisualScript gdnative.Object
func (VisualScript) class() string { return "VisualScript\000" }

func (gdClass VisualScript) Script() Script { return Script(gdClass) }

var methodVisualScript [42]gdnative.Method
func (gdClass VisualScript) AddFunction(name string, func_node_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[0], name, func_node_id) }
func (gdClass VisualScript) HasFunction(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[1], name) }
func (gdClass VisualScript) RemoveFunction(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[2], name) }
func (gdClass VisualScript) RenameFunction(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[3], name, new_name) }
func (gdClass VisualScript) SetScroll(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[4], offset) }
func (gdClass VisualScript) GetScroll() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScript[5]) }
func (gdClass VisualScript) AddNode(id int64, node VisualScriptNode, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[6], id, node, position) }
func (gdClass VisualScript) RemoveNode(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[7], id) }
func (gdClass VisualScript) GetFunctionNodeId(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScript[8], name) }
func (gdClass VisualScript) GetNode(id int64) VisualScriptNode { return gdnative.Return[VisualScriptNode](gdnative.Object(gdClass), methodVisualScript[9], id) }
func (gdClass VisualScript) HasNode(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[10], id) }
func (gdClass VisualScript) SetNodePosition(id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[11], id, position) }
func (gdClass VisualScript) GetNodePosition(id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScript[12], id) }
func (gdClass VisualScript) SequenceConnect(from_node int64, from_output int64, to_node int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[13], from_node, from_output, to_node) }
func (gdClass VisualScript) SequenceDisconnect(from_node int64, from_output int64, to_node int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[14], from_node, from_output, to_node) }
func (gdClass VisualScript) HasSequenceConnection(from_node int64, from_output int64, to_node int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[15], from_node, from_output, to_node) }
func (gdClass VisualScript) DataConnect(from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[16], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) DataDisconnect(from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[17], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) HasDataConnection(from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[18], from_node, from_port, to_node, to_port) }
func (gdClass VisualScript) AddVariable(name string, default_value any, export bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[19], name, default_value, export) }
func (gdClass VisualScript) HasVariable(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[20], name) }
func (gdClass VisualScript) RemoveVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[21], name) }
func (gdClass VisualScript) SetVariableDefaultValue(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[22], name, value) }
func (gdClass VisualScript) GetVariableDefaultValue(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScript[23], name) }
func (gdClass VisualScript) SetVariableInfo(name string, value Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[24], name, value) }
func (gdClass VisualScript) GetVariableInfo(name string) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodVisualScript[25], name) }
func (gdClass VisualScript) SetVariableExport(name string, enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[26], name, enable) }
func (gdClass VisualScript) GetVariableExport(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[27], name) }
func (gdClass VisualScript) RenameVariable(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[28], name, new_name) }
func (gdClass VisualScript) AddCustomSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[29], name) }
func (gdClass VisualScript) HasCustomSignal(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScript[30], name) }
func (gdClass VisualScript) CustomSignalAddArgument(name string, atype VariantType, argname string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[31], name, atype, argname, index) }
func (gdClass VisualScript) CustomSignalSetArgumentType(name string, argidx int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[32], name, argidx, atype) }
func (gdClass VisualScript) CustomSignalGetArgumentType(name string, argidx int64) VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScript[33], name, argidx) }
func (gdClass VisualScript) CustomSignalSetArgumentName(name string, argidx int64, argname string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[34], name, argidx, argname) }
func (gdClass VisualScript) CustomSignalGetArgumentName(name string, argidx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScript[35], name, argidx) }
func (gdClass VisualScript) CustomSignalRemoveArgument(name string, argidx int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[36], name, argidx) }
func (gdClass VisualScript) CustomSignalGetArgumentCount(name string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScript[37], name) }
func (gdClass VisualScript) CustomSignalSwapArgument(name string, argidx int64, withidx int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[38], name, argidx, withidx) }
func (gdClass VisualScript) RemoveCustomSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[39], name) }
func (gdClass VisualScript) RenameCustomSignal(name string, new_name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[40], name, new_name) }
func (gdClass VisualScript) SetInstanceBaseType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScript[41], atype) }

type VisualScriptBasicTypeConstant gdnative.Object
func (VisualScriptBasicTypeConstant) class() string { return "VisualScriptBasicTypeConstant\000" }

func (gdClass VisualScriptBasicTypeConstant) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptBasicTypeConstant [4]gdnative.Method
func (gdClass VisualScriptBasicTypeConstant) SetBasicType(name VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[0], name) }
func (gdClass VisualScriptBasicTypeConstant) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[1]) }
func (gdClass VisualScriptBasicTypeConstant) SetBasicTypeConstant(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[2], name) }
func (gdClass VisualScriptBasicTypeConstant) GetBasicTypeConstant() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptBasicTypeConstant[3]) }

type VisualScriptBuiltinFuncBuiltinFunc int64

const (
	VisualScriptBuiltinFuncMathSin VisualScriptBuiltinFuncBuiltinFunc = 0
	VisualScriptBuiltinFuncMathCos VisualScriptBuiltinFuncBuiltinFunc = 1
	VisualScriptBuiltinFuncMathTan VisualScriptBuiltinFuncBuiltinFunc = 2
	VisualScriptBuiltinFuncMathSinh VisualScriptBuiltinFuncBuiltinFunc = 3
	VisualScriptBuiltinFuncMathCosh VisualScriptBuiltinFuncBuiltinFunc = 4
	VisualScriptBuiltinFuncMathTanh VisualScriptBuiltinFuncBuiltinFunc = 5
	VisualScriptBuiltinFuncMathAsin VisualScriptBuiltinFuncBuiltinFunc = 6
	VisualScriptBuiltinFuncMathAcos VisualScriptBuiltinFuncBuiltinFunc = 7
	VisualScriptBuiltinFuncMathAtan VisualScriptBuiltinFuncBuiltinFunc = 8
	VisualScriptBuiltinFuncMathAtan2 VisualScriptBuiltinFuncBuiltinFunc = 9
	VisualScriptBuiltinFuncMathSqrt VisualScriptBuiltinFuncBuiltinFunc = 10
	VisualScriptBuiltinFuncMathFmod VisualScriptBuiltinFuncBuiltinFunc = 11
	VisualScriptBuiltinFuncMathFposmod VisualScriptBuiltinFuncBuiltinFunc = 12
	VisualScriptBuiltinFuncMathFloor VisualScriptBuiltinFuncBuiltinFunc = 13
	VisualScriptBuiltinFuncMathCeil VisualScriptBuiltinFuncBuiltinFunc = 14
	VisualScriptBuiltinFuncMathRound VisualScriptBuiltinFuncBuiltinFunc = 15
	VisualScriptBuiltinFuncMathAbs VisualScriptBuiltinFuncBuiltinFunc = 16
	VisualScriptBuiltinFuncMathSign VisualScriptBuiltinFuncBuiltinFunc = 17
	VisualScriptBuiltinFuncMathPow VisualScriptBuiltinFuncBuiltinFunc = 18
	VisualScriptBuiltinFuncMathLog VisualScriptBuiltinFuncBuiltinFunc = 19
	VisualScriptBuiltinFuncMathExp VisualScriptBuiltinFuncBuiltinFunc = 20
	VisualScriptBuiltinFuncMathIsnan VisualScriptBuiltinFuncBuiltinFunc = 21
	VisualScriptBuiltinFuncMathIsinf VisualScriptBuiltinFuncBuiltinFunc = 22
	VisualScriptBuiltinFuncMathEase VisualScriptBuiltinFuncBuiltinFunc = 23
	VisualScriptBuiltinFuncMathStepDecimals VisualScriptBuiltinFuncBuiltinFunc = 24
	VisualScriptBuiltinFuncMathSnapped VisualScriptBuiltinFuncBuiltinFunc = 25
	VisualScriptBuiltinFuncMathLerp VisualScriptBuiltinFuncBuiltinFunc = 26
	VisualScriptBuiltinFuncMathCubicInterpolate VisualScriptBuiltinFuncBuiltinFunc = 27
	VisualScriptBuiltinFuncMathInverseLerp VisualScriptBuiltinFuncBuiltinFunc = 28
	VisualScriptBuiltinFuncMathRangeLerp VisualScriptBuiltinFuncBuiltinFunc = 29
	VisualScriptBuiltinFuncMathMoveToward VisualScriptBuiltinFuncBuiltinFunc = 30
	VisualScriptBuiltinFuncMathRandomize VisualScriptBuiltinFuncBuiltinFunc = 31
	VisualScriptBuiltinFuncMathRandi VisualScriptBuiltinFuncBuiltinFunc = 32
	VisualScriptBuiltinFuncMathRandf VisualScriptBuiltinFuncBuiltinFunc = 33
	VisualScriptBuiltinFuncMathRandiRange VisualScriptBuiltinFuncBuiltinFunc = 34
	VisualScriptBuiltinFuncMathRandfRange VisualScriptBuiltinFuncBuiltinFunc = 35
	VisualScriptBuiltinFuncMathRandfn VisualScriptBuiltinFuncBuiltinFunc = 36
	VisualScriptBuiltinFuncMathSeed VisualScriptBuiltinFuncBuiltinFunc = 37
	VisualScriptBuiltinFuncMathRandseed VisualScriptBuiltinFuncBuiltinFunc = 38
	VisualScriptBuiltinFuncMathDeg2rad VisualScriptBuiltinFuncBuiltinFunc = 39
	VisualScriptBuiltinFuncMathRad2deg VisualScriptBuiltinFuncBuiltinFunc = 40
	VisualScriptBuiltinFuncMathLinear2db VisualScriptBuiltinFuncBuiltinFunc = 41
	VisualScriptBuiltinFuncMathDb2linear VisualScriptBuiltinFuncBuiltinFunc = 42
	VisualScriptBuiltinFuncMathWrap VisualScriptBuiltinFuncBuiltinFunc = 43
	VisualScriptBuiltinFuncMathWrapf VisualScriptBuiltinFuncBuiltinFunc = 44
	VisualScriptBuiltinFuncMathPingpong VisualScriptBuiltinFuncBuiltinFunc = 45
	VisualScriptBuiltinFuncLogicMax VisualScriptBuiltinFuncBuiltinFunc = 46
	VisualScriptBuiltinFuncLogicMin VisualScriptBuiltinFuncBuiltinFunc = 47
	VisualScriptBuiltinFuncLogicClamp VisualScriptBuiltinFuncBuiltinFunc = 48
	VisualScriptBuiltinFuncLogicNearestPo2 VisualScriptBuiltinFuncBuiltinFunc = 49
	VisualScriptBuiltinFuncObjWeakref VisualScriptBuiltinFuncBuiltinFunc = 50
	VisualScriptBuiltinFuncTypeConvert VisualScriptBuiltinFuncBuiltinFunc = 51
	VisualScriptBuiltinFuncTypeOf VisualScriptBuiltinFuncBuiltinFunc = 52
	VisualScriptBuiltinFuncTypeExists VisualScriptBuiltinFuncBuiltinFunc = 53
	VisualScriptBuiltinFuncTextChar VisualScriptBuiltinFuncBuiltinFunc = 54
	VisualScriptBuiltinFuncTextStr VisualScriptBuiltinFuncBuiltinFunc = 55
	VisualScriptBuiltinFuncTextPrint VisualScriptBuiltinFuncBuiltinFunc = 56
	VisualScriptBuiltinFuncTextPrinterr VisualScriptBuiltinFuncBuiltinFunc = 57
	VisualScriptBuiltinFuncTextPrintraw VisualScriptBuiltinFuncBuiltinFunc = 58
	VisualScriptBuiltinFuncTextPrintVerbose VisualScriptBuiltinFuncBuiltinFunc = 59
	VisualScriptBuiltinFuncVarToStr VisualScriptBuiltinFuncBuiltinFunc = 60
	VisualScriptBuiltinFuncStrToVar VisualScriptBuiltinFuncBuiltinFunc = 61
	VisualScriptBuiltinFuncVarToBytes VisualScriptBuiltinFuncBuiltinFunc = 62
	VisualScriptBuiltinFuncBytesToVar VisualScriptBuiltinFuncBuiltinFunc = 63
	VisualScriptBuiltinFuncMathSmoothstep VisualScriptBuiltinFuncBuiltinFunc = 64
	VisualScriptBuiltinFuncMathPosmod VisualScriptBuiltinFuncBuiltinFunc = 65
	VisualScriptBuiltinFuncMathLerpAngle VisualScriptBuiltinFuncBuiltinFunc = 66
	VisualScriptBuiltinFuncTextOrd VisualScriptBuiltinFuncBuiltinFunc = 67
	VisualScriptBuiltinFuncFuncMax VisualScriptBuiltinFuncBuiltinFunc = 68
)

type VisualScriptBuiltinFunc gdnative.Object
func (VisualScriptBuiltinFunc) class() string { return "VisualScriptBuiltinFunc\000" }

func (gdClass VisualScriptBuiltinFunc) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptBuiltinFunc [2]gdnative.Method
func (gdClass VisualScriptBuiltinFunc) SetFunc(which VisualScriptBuiltinFuncBuiltinFunc)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptBuiltinFunc[0], which) }
func (gdClass VisualScriptBuiltinFunc) GetFunc() VisualScriptBuiltinFuncBuiltinFunc { return gdnative.Return[VisualScriptBuiltinFuncBuiltinFunc](gdnative.Object(gdClass), methodVisualScriptBuiltinFunc[1]) }

type VisualScriptClassConstant gdnative.Object
func (VisualScriptClassConstant) class() string { return "VisualScriptClassConstant\000" }

func (gdClass VisualScriptClassConstant) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptClassConstant [4]gdnative.Method
func (gdClass VisualScriptClassConstant) SetClassConstant(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptClassConstant[0], name) }
func (gdClass VisualScriptClassConstant) GetClassConstant() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptClassConstant[1]) }
func (gdClass VisualScriptClassConstant) SetBaseType(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptClassConstant[2], name) }
func (gdClass VisualScriptClassConstant) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptClassConstant[3]) }

type VisualScriptComment gdnative.Object
func (VisualScriptComment) class() string { return "VisualScriptComment\000" }

func (gdClass VisualScriptComment) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptComment [6]gdnative.Method
func (gdClass VisualScriptComment) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[0], title) }
func (gdClass VisualScriptComment) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptComment[1]) }
func (gdClass VisualScriptComment) SetDescription(description string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[2], description) }
func (gdClass VisualScriptComment) GetDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptComment[3]) }
func (gdClass VisualScriptComment) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptComment[4], size) }
func (gdClass VisualScriptComment) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualScriptComment[5]) }

type VisualScriptComposeArray gdnative.Object
func (VisualScriptComposeArray) class() string { return "VisualScriptComposeArray\000" }

func (gdClass VisualScriptComposeArray) VisualScriptLists() VisualScriptLists { return VisualScriptLists(gdClass) }


type VisualScriptCondition gdnative.Object
func (VisualScriptCondition) class() string { return "VisualScriptCondition\000" }

func (gdClass VisualScriptCondition) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptConstant gdnative.Object
func (VisualScriptConstant) class() string { return "VisualScriptConstant\000" }

func (gdClass VisualScriptConstant) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptConstant [4]gdnative.Method
func (gdClass VisualScriptConstant) SetConstantType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstant[0], atype) }
func (gdClass VisualScriptConstant) GetConstantType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptConstant[1]) }
func (gdClass VisualScriptConstant) SetConstantValue(value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstant[2], value) }
func (gdClass VisualScriptConstant) GetConstantValue() any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptConstant[3]) }

type VisualScriptConstructor gdnative.Object
func (VisualScriptConstructor) class() string { return "VisualScriptConstructor\000" }

func (gdClass VisualScriptConstructor) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptConstructor [4]gdnative.Method
func (gdClass VisualScriptConstructor) SetConstructorType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstructor[0], atype) }
func (gdClass VisualScriptConstructor) GetConstructorType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptConstructor[1]) }
func (gdClass VisualScriptConstructor) SetConstructor(constructor Dictionary)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptConstructor[2], constructor) }
func (gdClass VisualScriptConstructor) GetConstructor() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodVisualScriptConstructor[3]) }

type VisualScriptCustomNodeStartMode int64

const (
	VisualScriptCustomNodeStartModeBeginSequence VisualScriptCustomNodeStartMode = 0
	VisualScriptCustomNodeStartModeContinueSequence VisualScriptCustomNodeStartMode = 1
	VisualScriptCustomNodeStartModeResumeYield VisualScriptCustomNodeStartMode = 2
)

type VisualScriptCustomNode gdnative.Object
func (VisualScriptCustomNode) class() string { return "VisualScriptCustomNode\000" }

func (gdClass VisualScriptCustomNode) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

func (gdClass VisualScriptCustomNode) virtual(val any, name string) any {	switch name {
	case "_get_output_sequence_port_count":
		i, ok := val.(interface{ GetOutputSequencePortCount() int64 })
		if ok {
			return i.GetOutputSequencePortCount
		}
	case "_has_input_sequence_port":
		i, ok := val.(interface{ HasInputSequencePort() bool })
		if ok {
			return i.HasInputSequencePort
		}
	case "_get_output_sequence_port_text":
		i, ok := val.(interface{ GetOutputSequencePortText(seq_idx int64) string })
		if ok {
			return i.GetOutputSequencePortText
		}
	case "_get_input_value_port_count":
		i, ok := val.(interface{ GetInputValuePortCount() int64 })
		if ok {
			return i.GetInputValuePortCount
		}
	case "_get_input_value_port_type":
		i, ok := val.(interface{ GetInputValuePortType(input_idx int64) int64 })
		if ok {
			return i.GetInputValuePortType
		}
	case "_get_input_value_port_name":
		i, ok := val.(interface{ GetInputValuePortName(input_idx int64) string })
		if ok {
			return i.GetInputValuePortName
		}
	case "_get_input_value_port_hint":
		i, ok := val.(interface{ GetInputValuePortHint(input_idx int64) int64 })
		if ok {
			return i.GetInputValuePortHint
		}
	case "_get_input_value_port_hint_string":
		i, ok := val.(interface{ GetInputValuePortHintString(input_idx int64) string })
		if ok {
			return i.GetInputValuePortHintString
		}
	case "_get_output_value_port_count":
		i, ok := val.(interface{ GetOutputValuePortCount() int64 })
		if ok {
			return i.GetOutputValuePortCount
		}
	case "_get_output_value_port_type":
		i, ok := val.(interface{ GetOutputValuePortType(output_idx int64) int64 })
		if ok {
			return i.GetOutputValuePortType
		}
	case "_get_output_value_port_name":
		i, ok := val.(interface{ GetOutputValuePortName(output_idx int64) string })
		if ok {
			return i.GetOutputValuePortName
		}
	case "_get_output_value_port_hint":
		i, ok := val.(interface{ GetOutputValuePortHint(output_idx int64) int64 })
		if ok {
			return i.GetOutputValuePortHint
		}
	case "_get_output_value_port_hint_string":
		i, ok := val.(interface{ GetOutputValuePortHintString(output_idx int64) string })
		if ok {
			return i.GetOutputValuePortHintString
		}
	case "_get_caption":
		i, ok := val.(interface{ GetCaption() string })
		if ok {
			return i.GetCaption
		}
	case "_get_text":
		i, ok := val.(interface{ GetText() string })
		if ok {
			return i.GetText
		}
	case "_get_category":
		i, ok := val.(interface{ GetCategory() string })
		if ok {
			return i.GetCategory
		}
	case "_get_working_memory_size":
		i, ok := val.(interface{ GetWorkingMemorySize() int64 })
		if ok {
			return i.GetWorkingMemorySize
		}
	case "_step":
		i, ok := val.(interface{ Step(inputs Array, outputs Array, start_mode int64, working_mem Array) any })
		if ok {
			return i.Step
		}
	}
	return nil
}

type VisualScriptCustomNodes gdnative.Object
func (VisualScriptCustomNodes) class() string { return "VisualScriptCustomNodes\000" }

func (gdClass VisualScriptCustomNodes) Object() Object { return Object(gdClass) }

var methodVisualScriptCustomNodes [2]gdnative.Method
func (gdClass VisualScriptCustomNodes) AddCustomNode(name string, category string, script Script)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptCustomNodes[0], name, category, script) }
func (gdClass VisualScriptCustomNodes) RemoveCustomNode(name string, category string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptCustomNodes[1], name, category) }

type VisualScriptDeconstruct gdnative.Object
func (VisualScriptDeconstruct) class() string { return "VisualScriptDeconstruct\000" }

func (gdClass VisualScriptDeconstruct) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptDeconstruct [2]gdnative.Method
func (gdClass VisualScriptDeconstruct) SetDeconstructType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptDeconstruct[0], atype) }
func (gdClass VisualScriptDeconstruct) GetDeconstructType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptDeconstruct[1]) }

type VisualScriptEmitSignal gdnative.Object
func (VisualScriptEmitSignal) class() string { return "VisualScriptEmitSignal\000" }

func (gdClass VisualScriptEmitSignal) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptEmitSignal [2]gdnative.Method
func (gdClass VisualScriptEmitSignal) SetSignal(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptEmitSignal[0], name) }
func (gdClass VisualScriptEmitSignal) GetSignal() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptEmitSignal[1]) }

type VisualScriptEngineSingleton gdnative.Object
func (VisualScriptEngineSingleton) class() string { return "VisualScriptEngineSingleton\000" }

func (gdClass VisualScriptEngineSingleton) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptEngineSingleton [2]gdnative.Method
func (gdClass VisualScriptEngineSingleton) SetSingleton(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptEngineSingleton[0], name) }
func (gdClass VisualScriptEngineSingleton) GetSingleton() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptEngineSingleton[1]) }

type VisualScriptExpression gdnative.Object
func (VisualScriptExpression) class() string { return "VisualScriptExpression\000" }

func (gdClass VisualScriptExpression) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptFunction gdnative.Object
func (VisualScriptFunction) class() string { return "VisualScriptFunction\000" }

func (gdClass VisualScriptFunction) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptFunctionCallCallMode int64

const (
	VisualScriptFunctionCallCallModeSelf VisualScriptFunctionCallCallMode = 0
	VisualScriptFunctionCallCallModeNodePath VisualScriptFunctionCallCallMode = 1
	VisualScriptFunctionCallCallModeInstance VisualScriptFunctionCallCallMode = 2
	VisualScriptFunctionCallCallModeBasicType VisualScriptFunctionCallCallMode = 3
	VisualScriptFunctionCallCallModeSingleton VisualScriptFunctionCallCallMode = 4
)

type VisualScriptFunctionCallRPCCallMode int64

const (
	VisualScriptFunctionCallRpcDisabled VisualScriptFunctionCallRPCCallMode = 0
	VisualScriptFunctionCallRpcReliable VisualScriptFunctionCallRPCCallMode = 1
	VisualScriptFunctionCallRpcUnreliable VisualScriptFunctionCallRPCCallMode = 2
	VisualScriptFunctionCallRpcReliableToId VisualScriptFunctionCallRPCCallMode = 3
	VisualScriptFunctionCallRpcUnreliableToId VisualScriptFunctionCallRPCCallMode = 4
)

type VisualScriptFunctionCall gdnative.Object
func (VisualScriptFunctionCall) class() string { return "VisualScriptFunctionCall\000" }

func (gdClass VisualScriptFunctionCall) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptFunctionCall [20]gdnative.Method
func (gdClass VisualScriptFunctionCall) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[0], base_type) }
func (gdClass VisualScriptFunctionCall) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[1]) }
func (gdClass VisualScriptFunctionCall) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[2], base_script) }
func (gdClass VisualScriptFunctionCall) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[3]) }
func (gdClass VisualScriptFunctionCall) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[4], basic_type) }
func (gdClass VisualScriptFunctionCall) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptFunctionCall[5]) }
func (gdClass VisualScriptFunctionCall) SetSingleton(singleton string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[6], singleton) }
func (gdClass VisualScriptFunctionCall) GetSingleton() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[7]) }
func (gdClass VisualScriptFunctionCall) SetFunction(function string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[8], function) }
func (gdClass VisualScriptFunctionCall) GetFunction() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptFunctionCall[9]) }
func (gdClass VisualScriptFunctionCall) SetCallMode(mode VisualScriptFunctionCallCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[10], mode) }
func (gdClass VisualScriptFunctionCall) GetCallMode() VisualScriptFunctionCallCallMode { return gdnative.Return[VisualScriptFunctionCallCallMode](gdnative.Object(gdClass), methodVisualScriptFunctionCall[11]) }
func (gdClass VisualScriptFunctionCall) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[12], base_path) }
func (gdClass VisualScriptFunctionCall) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptFunctionCall[13]) }
func (gdClass VisualScriptFunctionCall) SetUseDefaultArgs(amount int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[14], amount) }
func (gdClass VisualScriptFunctionCall) GetUseDefaultArgs() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptFunctionCall[15]) }
func (gdClass VisualScriptFunctionCall) SetRpcCallMode(mode VisualScriptFunctionCallRPCCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[16], mode) }
func (gdClass VisualScriptFunctionCall) GetRpcCallMode() VisualScriptFunctionCallRPCCallMode { return gdnative.Return[VisualScriptFunctionCallRPCCallMode](gdnative.Object(gdClass), methodVisualScriptFunctionCall[17]) }
func (gdClass VisualScriptFunctionCall) SetValidate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionCall[18], enable) }
func (gdClass VisualScriptFunctionCall) GetValidate() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptFunctionCall[19]) }

type VisualScriptFunctionState gdnative.Object
func (VisualScriptFunctionState) class() string { return "VisualScriptFunctionState\000" }

func (gdClass VisualScriptFunctionState) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodVisualScriptFunctionState [3]gdnative.Method
func (gdClass VisualScriptFunctionState) ConnectToSignal(obj Object, signals string, args Array)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptFunctionState[0], obj, signals, args) }
func (gdClass VisualScriptFunctionState) Resume(args Array) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptFunctionState[1], args) }
func (gdClass VisualScriptFunctionState) IsValid() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptFunctionState[2]) }

type VisualScriptGlobalConstant gdnative.Object
func (VisualScriptGlobalConstant) class() string { return "VisualScriptGlobalConstant\000" }

func (gdClass VisualScriptGlobalConstant) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptGlobalConstant [2]gdnative.Method
func (gdClass VisualScriptGlobalConstant) SetGlobalConstant(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptGlobalConstant[0], index) }
func (gdClass VisualScriptGlobalConstant) GetGlobalConstant() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptGlobalConstant[1]) }

type VisualScriptIndexGet gdnative.Object
func (VisualScriptIndexGet) class() string { return "VisualScriptIndexGet\000" }

func (gdClass VisualScriptIndexGet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptIndexSet gdnative.Object
func (VisualScriptIndexSet) class() string { return "VisualScriptIndexSet\000" }

func (gdClass VisualScriptIndexSet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptInputActionMode int64

const (
	VisualScriptInputActionModePressed VisualScriptInputActionMode = 0
	VisualScriptInputActionModeReleased VisualScriptInputActionMode = 1
	VisualScriptInputActionModeJustPressed VisualScriptInputActionMode = 2
	VisualScriptInputActionModeJustReleased VisualScriptInputActionMode = 3
)

type VisualScriptInputAction gdnative.Object
func (VisualScriptInputAction) class() string { return "VisualScriptInputAction\000" }

func (gdClass VisualScriptInputAction) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptInputAction [4]gdnative.Method
func (gdClass VisualScriptInputAction) SetActionName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptInputAction[0], name) }
func (gdClass VisualScriptInputAction) GetActionName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptInputAction[1]) }
func (gdClass VisualScriptInputAction) SetActionMode(mode VisualScriptInputActionMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptInputAction[2], mode) }
func (gdClass VisualScriptInputAction) GetActionMode() VisualScriptInputActionMode { return gdnative.Return[VisualScriptInputActionMode](gdnative.Object(gdClass), methodVisualScriptInputAction[3]) }

type VisualScriptIterator gdnative.Object
func (VisualScriptIterator) class() string { return "VisualScriptIterator\000" }

func (gdClass VisualScriptIterator) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptLists gdnative.Object
func (VisualScriptLists) class() string { return "VisualScriptLists\000" }

func (gdClass VisualScriptLists) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptLists [8]gdnative.Method
func (gdClass VisualScriptLists) AddInputDataPort(atype VariantType, name string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[0], atype, name, index) }
func (gdClass VisualScriptLists) SetInputDataPortName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[1], index, name) }
func (gdClass VisualScriptLists) SetInputDataPortType(index int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[2], index, atype) }
func (gdClass VisualScriptLists) RemoveInputDataPort(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[3], index) }
func (gdClass VisualScriptLists) AddOutputDataPort(atype VariantType, name string, index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[4], atype, name, index) }
func (gdClass VisualScriptLists) SetOutputDataPortName(index int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[5], index, name) }
func (gdClass VisualScriptLists) SetOutputDataPortType(index int64, atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[6], index, atype) }
func (gdClass VisualScriptLists) RemoveOutputDataPort(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLists[7], index) }

type VisualScriptLocalVar gdnative.Object
func (VisualScriptLocalVar) class() string { return "VisualScriptLocalVar\000" }

func (gdClass VisualScriptLocalVar) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptLocalVar [4]gdnative.Method
func (gdClass VisualScriptLocalVar) SetVarName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVar[0], name) }
func (gdClass VisualScriptLocalVar) GetVarName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptLocalVar[1]) }
func (gdClass VisualScriptLocalVar) SetVarType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVar[2], atype) }
func (gdClass VisualScriptLocalVar) GetVarType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptLocalVar[3]) }

type VisualScriptLocalVarSet gdnative.Object
func (VisualScriptLocalVarSet) class() string { return "VisualScriptLocalVarSet\000" }

func (gdClass VisualScriptLocalVarSet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptLocalVarSet [4]gdnative.Method
func (gdClass VisualScriptLocalVarSet) SetVarName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVarSet[0], name) }
func (gdClass VisualScriptLocalVarSet) GetVarName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptLocalVarSet[1]) }
func (gdClass VisualScriptLocalVarSet) SetVarType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptLocalVarSet[2], atype) }
func (gdClass VisualScriptLocalVarSet) GetVarType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptLocalVarSet[3]) }

type VisualScriptMathConstantMathConstant int64

const (
	VisualScriptMathConstantMathConstantOne VisualScriptMathConstantMathConstant = 0
	VisualScriptMathConstantMathConstantPi VisualScriptMathConstantMathConstant = 1
	VisualScriptMathConstantMathConstantHalfPi VisualScriptMathConstantMathConstant = 2
	VisualScriptMathConstantMathConstantTau VisualScriptMathConstantMathConstant = 3
	VisualScriptMathConstantMathConstantE VisualScriptMathConstantMathConstant = 4
	VisualScriptMathConstantMathConstantSqrt2 VisualScriptMathConstantMathConstant = 5
	VisualScriptMathConstantMathConstantInf VisualScriptMathConstantMathConstant = 6
	VisualScriptMathConstantMathConstantNan VisualScriptMathConstantMathConstant = 7
	VisualScriptMathConstantMathConstantMax VisualScriptMathConstantMathConstant = 8
)

type VisualScriptMathConstant gdnative.Object
func (VisualScriptMathConstant) class() string { return "VisualScriptMathConstant\000" }

func (gdClass VisualScriptMathConstant) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptMathConstant [2]gdnative.Method
func (gdClass VisualScriptMathConstant) SetMathConstant(which VisualScriptMathConstantMathConstant)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptMathConstant[0], which) }
func (gdClass VisualScriptMathConstant) GetMathConstant() VisualScriptMathConstantMathConstant { return gdnative.Return[VisualScriptMathConstantMathConstant](gdnative.Object(gdClass), methodVisualScriptMathConstant[1]) }

type VisualScriptNode gdnative.Object
func (VisualScriptNode) class() string { return "VisualScriptNode\000" }

func (gdClass VisualScriptNode) Resource() Resource { return Resource(gdClass) }

var methodVisualScriptNode [4]gdnative.Method
func (gdClass VisualScriptNode) GetVisualScript() VisualScript { return gdnative.Return[VisualScript](gdnative.Object(gdClass), methodVisualScriptNode[0]) }
func (gdClass VisualScriptNode) SetDefaultInputValue(port_idx int64, value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptNode[1], port_idx, value) }
func (gdClass VisualScriptNode) GetDefaultInputValue(port_idx int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualScriptNode[2], port_idx) }
func (gdClass VisualScriptNode) PortsChangedNotify()  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptNode[3]) }

type VisualScriptOperator gdnative.Object
func (VisualScriptOperator) class() string { return "VisualScriptOperator\000" }

func (gdClass VisualScriptOperator) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptOperator [4]gdnative.Method
func (gdClass VisualScriptOperator) SetOperator(op VariantOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptOperator[0], op) }
func (gdClass VisualScriptOperator) GetOperator() VariantOperator { return gdnative.Return[VariantOperator](gdnative.Object(gdClass), methodVisualScriptOperator[1]) }
func (gdClass VisualScriptOperator) SetTyped(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptOperator[2], atype) }
func (gdClass VisualScriptOperator) GetTyped() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptOperator[3]) }

type VisualScriptPreload gdnative.Object
func (VisualScriptPreload) class() string { return "VisualScriptPreload\000" }

func (gdClass VisualScriptPreload) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptPreload [2]gdnative.Method
func (gdClass VisualScriptPreload) SetPreload(resource Resource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPreload[0], resource) }
func (gdClass VisualScriptPreload) GetPreload() Resource { return gdnative.Return[Resource](gdnative.Object(gdClass), methodVisualScriptPreload[1]) }

type VisualScriptPropertyGetCallMode int64

const (
	VisualScriptPropertyGetCallModeSelf VisualScriptPropertyGetCallMode = 0
	VisualScriptPropertyGetCallModeNodePath VisualScriptPropertyGetCallMode = 1
	VisualScriptPropertyGetCallModeInstance VisualScriptPropertyGetCallMode = 2
	VisualScriptPropertyGetCallModeBasicType VisualScriptPropertyGetCallMode = 3
)

type VisualScriptPropertyGet gdnative.Object
func (VisualScriptPropertyGet) class() string { return "VisualScriptPropertyGet\000" }

func (gdClass VisualScriptPropertyGet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptPropertyGet [14]gdnative.Method
func (gdClass VisualScriptPropertyGet) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[0], base_type) }
func (gdClass VisualScriptPropertyGet) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[1]) }
func (gdClass VisualScriptPropertyGet) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[2], base_script) }
func (gdClass VisualScriptPropertyGet) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[3]) }
func (gdClass VisualScriptPropertyGet) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[4], basic_type) }
func (gdClass VisualScriptPropertyGet) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptPropertyGet[5]) }
func (gdClass VisualScriptPropertyGet) SetProperty(property string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[6], property) }
func (gdClass VisualScriptPropertyGet) GetProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[7]) }
func (gdClass VisualScriptPropertyGet) SetCallMode(mode VisualScriptPropertyGetCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[8], mode) }
func (gdClass VisualScriptPropertyGet) GetCallMode() VisualScriptPropertyGetCallMode { return gdnative.Return[VisualScriptPropertyGetCallMode](gdnative.Object(gdClass), methodVisualScriptPropertyGet[9]) }
func (gdClass VisualScriptPropertyGet) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[10], base_path) }
func (gdClass VisualScriptPropertyGet) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptPropertyGet[11]) }
func (gdClass VisualScriptPropertyGet) SetIndex(index string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertyGet[12], index) }
func (gdClass VisualScriptPropertyGet) GetIndex() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertyGet[13]) }

type VisualScriptPropertySetCallMode int64

const (
	VisualScriptPropertySetCallModeSelf VisualScriptPropertySetCallMode = 0
	VisualScriptPropertySetCallModeNodePath VisualScriptPropertySetCallMode = 1
	VisualScriptPropertySetCallModeInstance VisualScriptPropertySetCallMode = 2
	VisualScriptPropertySetCallModeBasicType VisualScriptPropertySetCallMode = 3
)

type VisualScriptPropertySetAssignOp int64

const (
	VisualScriptPropertySetAssignOpNone VisualScriptPropertySetAssignOp = 0
	VisualScriptPropertySetAssignOpAdd VisualScriptPropertySetAssignOp = 1
	VisualScriptPropertySetAssignOpSub VisualScriptPropertySetAssignOp = 2
	VisualScriptPropertySetAssignOpMul VisualScriptPropertySetAssignOp = 3
	VisualScriptPropertySetAssignOpDiv VisualScriptPropertySetAssignOp = 4
	VisualScriptPropertySetAssignOpMod VisualScriptPropertySetAssignOp = 5
	VisualScriptPropertySetAssignOpShiftLeft VisualScriptPropertySetAssignOp = 6
	VisualScriptPropertySetAssignOpShiftRight VisualScriptPropertySetAssignOp = 7
	VisualScriptPropertySetAssignOpBitAnd VisualScriptPropertySetAssignOp = 8
	VisualScriptPropertySetAssignOpBitOr VisualScriptPropertySetAssignOp = 9
	VisualScriptPropertySetAssignOpBitXor VisualScriptPropertySetAssignOp = 10
)

type VisualScriptPropertySet gdnative.Object
func (VisualScriptPropertySet) class() string { return "VisualScriptPropertySet\000" }

func (gdClass VisualScriptPropertySet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptPropertySet [16]gdnative.Method
func (gdClass VisualScriptPropertySet) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[0], base_type) }
func (gdClass VisualScriptPropertySet) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[1]) }
func (gdClass VisualScriptPropertySet) SetBaseScript(base_script string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[2], base_script) }
func (gdClass VisualScriptPropertySet) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[3]) }
func (gdClass VisualScriptPropertySet) SetBasicType(basic_type VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[4], basic_type) }
func (gdClass VisualScriptPropertySet) GetBasicType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptPropertySet[5]) }
func (gdClass VisualScriptPropertySet) SetProperty(property string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[6], property) }
func (gdClass VisualScriptPropertySet) GetProperty() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[7]) }
func (gdClass VisualScriptPropertySet) SetCallMode(mode VisualScriptPropertySetCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[8], mode) }
func (gdClass VisualScriptPropertySet) GetCallMode() VisualScriptPropertySetCallMode { return gdnative.Return[VisualScriptPropertySetCallMode](gdnative.Object(gdClass), methodVisualScriptPropertySet[9]) }
func (gdClass VisualScriptPropertySet) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[10], base_path) }
func (gdClass VisualScriptPropertySet) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptPropertySet[11]) }
func (gdClass VisualScriptPropertySet) SetIndex(index string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[12], index) }
func (gdClass VisualScriptPropertySet) GetIndex() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptPropertySet[13]) }
func (gdClass VisualScriptPropertySet) SetAssignOp(assign_op VisualScriptPropertySetAssignOp)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptPropertySet[14], assign_op) }
func (gdClass VisualScriptPropertySet) GetAssignOp() VisualScriptPropertySetAssignOp { return gdnative.Return[VisualScriptPropertySetAssignOp](gdnative.Object(gdClass), methodVisualScriptPropertySet[15]) }

type VisualScriptResourcePath gdnative.Object
func (VisualScriptResourcePath) class() string { return "VisualScriptResourcePath\000" }

func (gdClass VisualScriptResourcePath) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptResourcePath [2]gdnative.Method
func (gdClass VisualScriptResourcePath) SetResourcePath(path string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptResourcePath[0], path) }
func (gdClass VisualScriptResourcePath) GetResourcePath() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptResourcePath[1]) }

type VisualScriptReturn gdnative.Object
func (VisualScriptReturn) class() string { return "VisualScriptReturn\000" }

func (gdClass VisualScriptReturn) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptReturn [4]gdnative.Method
func (gdClass VisualScriptReturn) SetReturnType(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptReturn[0], atype) }
func (gdClass VisualScriptReturn) GetReturnType() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptReturn[1]) }
func (gdClass VisualScriptReturn) SetEnableReturnValue(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptReturn[2], enable) }
func (gdClass VisualScriptReturn) IsReturnValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualScriptReturn[3]) }

type VisualScriptSceneNode gdnative.Object
func (VisualScriptSceneNode) class() string { return "VisualScriptSceneNode\000" }

func (gdClass VisualScriptSceneNode) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptSceneNode [2]gdnative.Method
func (gdClass VisualScriptSceneNode) SetNodePath(path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSceneNode[0], path) }
func (gdClass VisualScriptSceneNode) GetNodePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptSceneNode[1]) }

type VisualScriptSceneTree gdnative.Object
func (VisualScriptSceneTree) class() string { return "VisualScriptSceneTree\000" }

func (gdClass VisualScriptSceneTree) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptSelect gdnative.Object
func (VisualScriptSelect) class() string { return "VisualScriptSelect\000" }

func (gdClass VisualScriptSelect) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptSelect [2]gdnative.Method
func (gdClass VisualScriptSelect) SetTyped(atype VariantType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSelect[0], atype) }
func (gdClass VisualScriptSelect) GetTyped() VariantType { return gdnative.Return[VariantType](gdnative.Object(gdClass), methodVisualScriptSelect[1]) }

type VisualScriptSelf gdnative.Object
func (VisualScriptSelf) class() string { return "VisualScriptSelf\000" }

func (gdClass VisualScriptSelf) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptSequence gdnative.Object
func (VisualScriptSequence) class() string { return "VisualScriptSequence\000" }

func (gdClass VisualScriptSequence) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptSequence [2]gdnative.Method
func (gdClass VisualScriptSequence) SetSteps(steps int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptSequence[0], steps) }
func (gdClass VisualScriptSequence) GetSteps() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualScriptSequence[1]) }

type VisualScriptSubCall gdnative.Object
func (VisualScriptSubCall) class() string { return "VisualScriptSubCall\000" }

func (gdClass VisualScriptSubCall) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptSwitch gdnative.Object
func (VisualScriptSwitch) class() string { return "VisualScriptSwitch\000" }

func (gdClass VisualScriptSwitch) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptTypeCast gdnative.Object
func (VisualScriptTypeCast) class() string { return "VisualScriptTypeCast\000" }

func (gdClass VisualScriptTypeCast) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptTypeCast [4]gdnative.Method
func (gdClass VisualScriptTypeCast) SetBaseType(atype string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptTypeCast[0], atype) }
func (gdClass VisualScriptTypeCast) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptTypeCast[1]) }
func (gdClass VisualScriptTypeCast) SetBaseScript(path string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptTypeCast[2], path) }
func (gdClass VisualScriptTypeCast) GetBaseScript() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptTypeCast[3]) }

type VisualScriptVariableGet gdnative.Object
func (VisualScriptVariableGet) class() string { return "VisualScriptVariableGet\000" }

func (gdClass VisualScriptVariableGet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptVariableGet [2]gdnative.Method
func (gdClass VisualScriptVariableGet) SetVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptVariableGet[0], name) }
func (gdClass VisualScriptVariableGet) GetVariable() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptVariableGet[1]) }

type VisualScriptVariableSet gdnative.Object
func (VisualScriptVariableSet) class() string { return "VisualScriptVariableSet\000" }

func (gdClass VisualScriptVariableSet) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptVariableSet [2]gdnative.Method
func (gdClass VisualScriptVariableSet) SetVariable(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptVariableSet[0], name) }
func (gdClass VisualScriptVariableSet) GetVariable() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptVariableSet[1]) }

type VisualScriptWhile gdnative.Object
func (VisualScriptWhile) class() string { return "VisualScriptWhile\000" }

func (gdClass VisualScriptWhile) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }


type VisualScriptYieldYieldMode int64

const (
	VisualScriptYieldYieldFrame VisualScriptYieldYieldMode = 1
	VisualScriptYieldYieldPhysicsFrame VisualScriptYieldYieldMode = 2
	VisualScriptYieldYieldWait VisualScriptYieldYieldMode = 3
)

type VisualScriptYield gdnative.Object
func (VisualScriptYield) class() string { return "VisualScriptYield\000" }

func (gdClass VisualScriptYield) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptYield [4]gdnative.Method
func (gdClass VisualScriptYield) SetYieldMode(mode VisualScriptYieldYieldMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYield[0], mode) }
func (gdClass VisualScriptYield) GetYieldMode() VisualScriptYieldYieldMode { return gdnative.Return[VisualScriptYieldYieldMode](gdnative.Object(gdClass), methodVisualScriptYield[1]) }
func (gdClass VisualScriptYield) SetWaitTime(sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYield[2], sec) }
func (gdClass VisualScriptYield) GetWaitTime() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualScriptYield[3]) }

type VisualScriptYieldSignalCallMode int64

const (
	VisualScriptYieldSignalCallModeSelf VisualScriptYieldSignalCallMode = 0
	VisualScriptYieldSignalCallModeNodePath VisualScriptYieldSignalCallMode = 1
	VisualScriptYieldSignalCallModeInstance VisualScriptYieldSignalCallMode = 2
)

type VisualScriptYieldSignal gdnative.Object
func (VisualScriptYieldSignal) class() string { return "VisualScriptYieldSignal\000" }

func (gdClass VisualScriptYieldSignal) VisualScriptNode() VisualScriptNode { return VisualScriptNode(gdClass) }

var methodVisualScriptYieldSignal [8]gdnative.Method
func (gdClass VisualScriptYieldSignal) SetBaseType(base_type string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[0], base_type) }
func (gdClass VisualScriptYieldSignal) GetBaseType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptYieldSignal[1]) }
func (gdClass VisualScriptYieldSignal) SetSignal(signal string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[2], signal) }
func (gdClass VisualScriptYieldSignal) GetSignal() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualScriptYieldSignal[3]) }
func (gdClass VisualScriptYieldSignal) SetCallMode(mode VisualScriptYieldSignalCallMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[4], mode) }
func (gdClass VisualScriptYieldSignal) GetCallMode() VisualScriptYieldSignalCallMode { return gdnative.Return[VisualScriptYieldSignalCallMode](gdnative.Object(gdClass), methodVisualScriptYieldSignal[5]) }
func (gdClass VisualScriptYieldSignal) SetBasePath(base_path NodePath)  { gdnative.Call(gdnative.Object(gdClass), methodVisualScriptYieldSignal[6], base_path) }
func (gdClass VisualScriptYieldSignal) GetBasePath() NodePath { return gdnative.Return[NodePath](gdnative.Object(gdClass), methodVisualScriptYieldSignal[7]) }

type VisualShaderType int64

const (
	VisualShaderTypeVertex VisualShaderType = 0
	VisualShaderTypeFragment VisualShaderType = 1
	VisualShaderTypeLight VisualShaderType = 2
	VisualShaderTypeStart VisualShaderType = 3
	VisualShaderTypeProcess VisualShaderType = 4
	VisualShaderTypeCollide VisualShaderType = 5
	VisualShaderTypeStartCustom VisualShaderType = 6
	VisualShaderTypeProcessCustom VisualShaderType = 7
	VisualShaderTypeSky VisualShaderType = 8
	VisualShaderTypeFog VisualShaderType = 9
	VisualShaderTypeMax VisualShaderType = 10
)

type VisualShaderVaryingMode int64

const (
	VisualShaderVaryingModeVertexToFragLight VisualShaderVaryingMode = 0
	VisualShaderVaryingModeFragToLight VisualShaderVaryingMode = 1
	VisualShaderVaryingModeMax VisualShaderVaryingMode = 2
)

type VisualShaderVaryingType int64

const (
	VisualShaderVaryingTypeFloat VisualShaderVaryingType = 0
	VisualShaderVaryingTypeVector2d VisualShaderVaryingType = 1
	VisualShaderVaryingTypeVector3d VisualShaderVaryingType = 2
	VisualShaderVaryingTypeVector4d VisualShaderVaryingType = 3
	VisualShaderVaryingTypeColor VisualShaderVaryingType = 4
	VisualShaderVaryingTypeTransform VisualShaderVaryingType = 5
	VisualShaderVaryingTypeMax VisualShaderVaryingType = 6
)

type VisualShader gdnative.Object
func (VisualShader) class() string { return "VisualShader\000" }

func (gdClass VisualShader) Shader() Shader { return Shader(gdClass) }

var methodVisualShader [20]gdnative.Method
func (gdClass VisualShader) SetMode(mode ShaderMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[0], mode) }
func (gdClass VisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[1], atype, node, position, id) }
func (gdClass VisualShader) GetNode(atype VisualShaderType, id int64) VisualShaderNode { return gdnative.Return[VisualShaderNode](gdnative.Object(gdClass), methodVisualShader[2], atype, id) }
func (gdClass VisualShader) SetNodePosition(atype VisualShaderType, id int64, position Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[3], atype, id, position) }
func (gdClass VisualShader) GetNodePosition(atype VisualShaderType, id int64) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShader[4], atype, id) }
func (gdClass VisualShader) GetNodeList(atype VisualShaderType) []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodVisualShader[5], atype) }
func (gdClass VisualShader) GetValidNodeId(atype VisualShaderType) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShader[6], atype) }
func (gdClass VisualShader) RemoveNode(atype VisualShaderType, id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[7], atype, id) }
func (gdClass VisualShader) ReplaceNode(atype VisualShaderType, id int64, new_class string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[8], atype, id, new_class) }
func (gdClass VisualShader) IsNodeConnection(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[9], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) CanConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[10], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) ConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodVisualShader[11], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) DisconnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[12], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) ConnectNodesForced(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[13], atype, from_node, from_port, to_node, to_port) }
func (gdClass VisualShader) GetNodeConnections(atype VisualShaderType) Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodVisualShader[14], atype) }
func (gdClass VisualShader) SetGraphOffset(offset Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[15], offset) }
func (gdClass VisualShader) GetGraphOffset() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShader[16]) }
func (gdClass VisualShader) AddVarying(name string, mode VisualShaderVaryingMode, atype VisualShaderVaryingType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[17], name, mode, atype) }
func (gdClass VisualShader) RemoveVarying(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShader[18], name) }
func (gdClass VisualShader) HasVarying(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShader[19], name) }

type VisualShaderNodePortType int64

const (
	VisualShaderNodePortTypeScalar VisualShaderNodePortType = 0
	VisualShaderNodePortTypeScalarInt VisualShaderNodePortType = 1
	VisualShaderNodePortTypeVector2d VisualShaderNodePortType = 2
	VisualShaderNodePortTypeVector3d VisualShaderNodePortType = 3
	VisualShaderNodePortTypeVector4d VisualShaderNodePortType = 4
	VisualShaderNodePortTypeBoolean VisualShaderNodePortType = 5
	VisualShaderNodePortTypeTransform VisualShaderNodePortType = 6
	VisualShaderNodePortTypeSampler VisualShaderNodePortType = 7
	VisualShaderNodePortTypeMax VisualShaderNodePortType = 8
)

type VisualShaderNode gdnative.Object
func (VisualShaderNode) class() string { return "VisualShaderNode\000" }

func (gdClass VisualShaderNode) Resource() Resource { return Resource(gdClass) }

var methodVisualShaderNode [8]gdnative.Method
func (gdClass VisualShaderNode) SetOutputPortForPreview(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[0], port) }
func (gdClass VisualShaderNode) GetOutputPortForPreview() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNode[1]) }
func (gdClass VisualShaderNode) SetInputPortDefaultValue(port int64, value any, prev_value any)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[2], port, value, prev_value) }
func (gdClass VisualShaderNode) GetInputPortDefaultValue(port int64) any { return gdnative.Return[any](gdnative.Object(gdClass), methodVisualShaderNode[3], port) }
func (gdClass VisualShaderNode) RemoveInputPortDefaultValue(port int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[4], port) }
func (gdClass VisualShaderNode) ClearDefaultInputValues()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[5]) }
func (gdClass VisualShaderNode) SetDefaultInputValues(values Array)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNode[6], values) }
func (gdClass VisualShaderNode) GetDefaultInputValues() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodVisualShaderNode[7]) }

type VisualShaderNodeBillboardBillboardType int64

const (
	VisualShaderNodeBillboardBillboardTypeDisabled VisualShaderNodeBillboardBillboardType = 0
	VisualShaderNodeBillboardBillboardTypeEnabled VisualShaderNodeBillboardBillboardType = 1
	VisualShaderNodeBillboardBillboardTypeFixedY VisualShaderNodeBillboardBillboardType = 2
	VisualShaderNodeBillboardBillboardTypeParticles VisualShaderNodeBillboardBillboardType = 3
	VisualShaderNodeBillboardBillboardTypeMax VisualShaderNodeBillboardBillboardType = 4
)

type VisualShaderNodeBillboard gdnative.Object
func (VisualShaderNodeBillboard) class() string { return "VisualShaderNodeBillboard\000" }

func (gdClass VisualShaderNodeBillboard) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeBillboard [4]gdnative.Method
func (gdClass VisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBillboard[0], billboard_type) }
func (gdClass VisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType { return gdnative.Return[VisualShaderNodeBillboardBillboardType](gdnative.Object(gdClass), methodVisualShaderNodeBillboard[1]) }
func (gdClass VisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBillboard[2], enabled) }
func (gdClass VisualShaderNodeBillboard) IsKeepScaleEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBillboard[3]) }

type VisualShaderNodeBooleanConstant gdnative.Object
func (VisualShaderNodeBooleanConstant) class() string { return "VisualShaderNodeBooleanConstant\000" }

func (gdClass VisualShaderNodeBooleanConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeBooleanConstant [2]gdnative.Method
func (gdClass VisualShaderNodeBooleanConstant) SetConstant(constant bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanConstant[0], constant) }
func (gdClass VisualShaderNodeBooleanConstant) GetConstant() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanConstant[1]) }

type VisualShaderNodeBooleanUniform gdnative.Object
func (VisualShaderNodeBooleanUniform) class() string { return "VisualShaderNodeBooleanUniform\000" }

func (gdClass VisualShaderNodeBooleanUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeBooleanUniform [4]gdnative.Method
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[0], enabled) }
func (gdClass VisualShaderNodeBooleanUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[1]) }
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValue(value bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[2], value) }
func (gdClass VisualShaderNodeBooleanUniform) GetDefaultValue() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeBooleanUniform[3]) }

type VisualShaderNodeClampOpType int64

const (
	VisualShaderNodeClampOpTypeFloat VisualShaderNodeClampOpType = 0
	VisualShaderNodeClampOpTypeInt VisualShaderNodeClampOpType = 1
	VisualShaderNodeClampOpTypeVector2d VisualShaderNodeClampOpType = 2
	VisualShaderNodeClampOpTypeVector3d VisualShaderNodeClampOpType = 3
	VisualShaderNodeClampOpTypeVector4d VisualShaderNodeClampOpType = 4
	VisualShaderNodeClampOpTypeMax VisualShaderNodeClampOpType = 5
)

type VisualShaderNodeClamp gdnative.Object
func (VisualShaderNodeClamp) class() string { return "VisualShaderNodeClamp\000" }

func (gdClass VisualShaderNodeClamp) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeClamp [2]gdnative.Method
func (gdClass VisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeClamp[0], op_type) }
func (gdClass VisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType { return gdnative.Return[VisualShaderNodeClampOpType](gdnative.Object(gdClass), methodVisualShaderNodeClamp[1]) }

type VisualShaderNodeColorConstant gdnative.Object
func (VisualShaderNodeColorConstant) class() string { return "VisualShaderNodeColorConstant\000" }

func (gdClass VisualShaderNodeColorConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeColorConstant [2]gdnative.Method
func (gdClass VisualShaderNodeColorConstant) SetConstant(constant Color)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorConstant[0], constant) }
func (gdClass VisualShaderNodeColorConstant) GetConstant() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodVisualShaderNodeColorConstant[1]) }

type VisualShaderNodeColorFuncFunction int64

const (
	VisualShaderNodeColorFuncFuncGrayscale VisualShaderNodeColorFuncFunction = 0
	VisualShaderNodeColorFuncFuncHsv2rgb VisualShaderNodeColorFuncFunction = 1
	VisualShaderNodeColorFuncFuncRgb2hsv VisualShaderNodeColorFuncFunction = 2
	VisualShaderNodeColorFuncFuncSepia VisualShaderNodeColorFuncFunction = 3
	VisualShaderNodeColorFuncFuncMax VisualShaderNodeColorFuncFunction = 4
)

type VisualShaderNodeColorFunc gdnative.Object
func (VisualShaderNodeColorFunc) class() string { return "VisualShaderNodeColorFunc\000" }

func (gdClass VisualShaderNodeColorFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeColorFunc [2]gdnative.Method
func (gdClass VisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorFunc[0], fn) }
func (gdClass VisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction { return gdnative.Return[VisualShaderNodeColorFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeColorFunc[1]) }

type VisualShaderNodeColorOpOperator int64

const (
	VisualShaderNodeColorOpOpScreen VisualShaderNodeColorOpOperator = 0
	VisualShaderNodeColorOpOpDifference VisualShaderNodeColorOpOperator = 1
	VisualShaderNodeColorOpOpDarken VisualShaderNodeColorOpOperator = 2
	VisualShaderNodeColorOpOpLighten VisualShaderNodeColorOpOperator = 3
	VisualShaderNodeColorOpOpOverlay VisualShaderNodeColorOpOperator = 4
	VisualShaderNodeColorOpOpDodge VisualShaderNodeColorOpOperator = 5
	VisualShaderNodeColorOpOpBurn VisualShaderNodeColorOpOperator = 6
	VisualShaderNodeColorOpOpSoftLight VisualShaderNodeColorOpOperator = 7
	VisualShaderNodeColorOpOpHardLight VisualShaderNodeColorOpOperator = 8
	VisualShaderNodeColorOpOpMax VisualShaderNodeColorOpOperator = 9
)

type VisualShaderNodeColorOp gdnative.Object
func (VisualShaderNodeColorOp) class() string { return "VisualShaderNodeColorOp\000" }

func (gdClass VisualShaderNodeColorOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeColorOp [2]gdnative.Method
func (gdClass VisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorOp[0], op) }
func (gdClass VisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator { return gdnative.Return[VisualShaderNodeColorOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeColorOp[1]) }

type VisualShaderNodeColorUniform gdnative.Object
func (VisualShaderNodeColorUniform) class() string { return "VisualShaderNodeColorUniform\000" }

func (gdClass VisualShaderNodeColorUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeColorUniform [4]gdnative.Method
func (gdClass VisualShaderNodeColorUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[0], enabled) }
func (gdClass VisualShaderNodeColorUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[1]) }
func (gdClass VisualShaderNodeColorUniform) SetDefaultValue(value Color)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[2], value) }
func (gdClass VisualShaderNodeColorUniform) GetDefaultValue() Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodVisualShaderNodeColorUniform[3]) }

type VisualShaderNodeComment gdnative.Object
func (VisualShaderNodeComment) class() string { return "VisualShaderNodeComment\000" }

func (gdClass VisualShaderNodeComment) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase(gdClass) }

var methodVisualShaderNodeComment [4]gdnative.Method
func (gdClass VisualShaderNodeComment) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeComment[0], title) }
func (gdClass VisualShaderNodeComment) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeComment[1]) }
func (gdClass VisualShaderNodeComment) SetDescription(description string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeComment[2], description) }
func (gdClass VisualShaderNodeComment) GetDescription() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeComment[3]) }

type VisualShaderNodeCompareComparisonType int64

const (
	VisualShaderNodeCompareCtypeScalar VisualShaderNodeCompareComparisonType = 0
	VisualShaderNodeCompareCtypeScalarInt VisualShaderNodeCompareComparisonType = 1
	VisualShaderNodeCompareCtypeVector2d VisualShaderNodeCompareComparisonType = 2
	VisualShaderNodeCompareCtypeVector3d VisualShaderNodeCompareComparisonType = 3
	VisualShaderNodeCompareCtypeVector4d VisualShaderNodeCompareComparisonType = 4
	VisualShaderNodeCompareCtypeBoolean VisualShaderNodeCompareComparisonType = 5
	VisualShaderNodeCompareCtypeTransform VisualShaderNodeCompareComparisonType = 6
	VisualShaderNodeCompareCtypeMax VisualShaderNodeCompareComparisonType = 7
)

type VisualShaderNodeCompareFunction int64

const (
	VisualShaderNodeCompareFuncEqual VisualShaderNodeCompareFunction = 0
	VisualShaderNodeCompareFuncNotEqual VisualShaderNodeCompareFunction = 1
	VisualShaderNodeCompareFuncGreaterThan VisualShaderNodeCompareFunction = 2
	VisualShaderNodeCompareFuncGreaterThanEqual VisualShaderNodeCompareFunction = 3
	VisualShaderNodeCompareFuncLessThan VisualShaderNodeCompareFunction = 4
	VisualShaderNodeCompareFuncLessThanEqual VisualShaderNodeCompareFunction = 5
	VisualShaderNodeCompareFuncMax VisualShaderNodeCompareFunction = 6
)

type VisualShaderNodeCompareCondition int64

const (
	VisualShaderNodeCompareCondAll VisualShaderNodeCompareCondition = 0
	VisualShaderNodeCompareCondAny VisualShaderNodeCompareCondition = 1
	VisualShaderNodeCompareCondMax VisualShaderNodeCompareCondition = 2
)

type VisualShaderNodeCompare gdnative.Object
func (VisualShaderNodeCompare) class() string { return "VisualShaderNodeCompare\000" }

func (gdClass VisualShaderNodeCompare) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeCompare [6]gdnative.Method
func (gdClass VisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[0], atype) }
func (gdClass VisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType { return gdnative.Return[VisualShaderNodeCompareComparisonType](gdnative.Object(gdClass), methodVisualShaderNodeCompare[1]) }
func (gdClass VisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[2], fn) }
func (gdClass VisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction { return gdnative.Return[VisualShaderNodeCompareFunction](gdnative.Object(gdClass), methodVisualShaderNodeCompare[3]) }
func (gdClass VisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCompare[4], condition) }
func (gdClass VisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition { return gdnative.Return[VisualShaderNodeCompareCondition](gdnative.Object(gdClass), methodVisualShaderNodeCompare[5]) }

type VisualShaderNodeConstant gdnative.Object
func (VisualShaderNodeConstant) class() string { return "VisualShaderNodeConstant\000" }

func (gdClass VisualShaderNodeConstant) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeCubemapSource int64

const (
	VisualShaderNodeCubemapSourceTexture VisualShaderNodeCubemapSource = 0
	VisualShaderNodeCubemapSourcePort VisualShaderNodeCubemapSource = 1
	VisualShaderNodeCubemapSourceMax VisualShaderNodeCubemapSource = 2
)

type VisualShaderNodeCubemapTextureType int64

const (
	VisualShaderNodeCubemapTypeData VisualShaderNodeCubemapTextureType = 0
	VisualShaderNodeCubemapTypeColor VisualShaderNodeCubemapTextureType = 1
	VisualShaderNodeCubemapTypeNormalMap VisualShaderNodeCubemapTextureType = 2
	VisualShaderNodeCubemapTypeMax VisualShaderNodeCubemapTextureType = 3
)

type VisualShaderNodeCubemap gdnative.Object
func (VisualShaderNodeCubemap) class() string { return "VisualShaderNodeCubemap\000" }

func (gdClass VisualShaderNodeCubemap) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeCubemap [6]gdnative.Method
func (gdClass VisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[0], value) }
func (gdClass VisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource { return gdnative.Return[VisualShaderNodeCubemapSource](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[1]) }
func (gdClass VisualShaderNodeCubemap) SetCubeMap(value Cubemap)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[2], value) }
func (gdClass VisualShaderNodeCubemap) GetCubeMap() Cubemap { return gdnative.Return[Cubemap](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[3]) }
func (gdClass VisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCubemap[4], value) }
func (gdClass VisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType { return gdnative.Return[VisualShaderNodeCubemapTextureType](gdnative.Object(gdClass), methodVisualShaderNodeCubemap[5]) }

type VisualShaderNodeCubemapUniform gdnative.Object
func (VisualShaderNodeCubemapUniform) class() string { return "VisualShaderNodeCubemapUniform\000" }

func (gdClass VisualShaderNodeCubemapUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform(gdClass) }


type VisualShaderNodeCurveTexture gdnative.Object
func (VisualShaderNodeCurveTexture) class() string { return "VisualShaderNodeCurveTexture\000" }

func (gdClass VisualShaderNodeCurveTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase(gdClass) }

var methodVisualShaderNodeCurveTexture [2]gdnative.Method
func (gdClass VisualShaderNodeCurveTexture) SetTexture(texture CurveTexture)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCurveTexture[0], texture) }
func (gdClass VisualShaderNodeCurveTexture) GetTexture() CurveTexture { return gdnative.Return[CurveTexture](gdnative.Object(gdClass), methodVisualShaderNodeCurveTexture[1]) }

type VisualShaderNodeCurveXYZTexture gdnative.Object
func (VisualShaderNodeCurveXYZTexture) class() string { return "VisualShaderNodeCurveXYZTexture\000" }

func (gdClass VisualShaderNodeCurveXYZTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase(gdClass) }

var methodVisualShaderNodeCurveXYZTexture [2]gdnative.Method
func (gdClass VisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeCurveXYZTexture[0], texture) }
func (gdClass VisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture { return gdnative.Return[CurveXYZTexture](gdnative.Object(gdClass), methodVisualShaderNodeCurveXYZTexture[1]) }

type VisualShaderNodeCustom gdnative.Object
func (VisualShaderNodeCustom) class() string { return "VisualShaderNodeCustom\000" }

func (gdClass VisualShaderNodeCustom) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

func (gdClass VisualShaderNodeCustom) virtual(val any, name string) any {	switch name {
	case "_get_name":
		i, ok := val.(interface{ GetName() string })
		if ok {
			return i.GetName
		}
	case "_get_description":
		i, ok := val.(interface{ GetDescription() string })
		if ok {
			return i.GetDescription
		}
	case "_get_category":
		i, ok := val.(interface{ GetCategory() string })
		if ok {
			return i.GetCategory
		}
	case "_get_return_icon_type":
		i, ok := val.(interface{ GetReturnIconType() int64 })
		if ok {
			return i.GetReturnIconType
		}
	case "_get_input_port_count":
		i, ok := val.(interface{ GetInputPortCount() int64 })
		if ok {
			return i.GetInputPortCount
		}
	case "_get_input_port_type":
		i, ok := val.(interface{ GetInputPortType(port int64) int64 })
		if ok {
			return i.GetInputPortType
		}
	case "_get_input_port_name":
		i, ok := val.(interface{ GetInputPortName(port int64) string })
		if ok {
			return i.GetInputPortName
		}
	case "_get_output_port_count":
		i, ok := val.(interface{ GetOutputPortCount() int64 })
		if ok {
			return i.GetOutputPortCount
		}
	case "_get_output_port_type":
		i, ok := val.(interface{ GetOutputPortType(port int64) int64 })
		if ok {
			return i.GetOutputPortType
		}
	case "_get_output_port_name":
		i, ok := val.(interface{ GetOutputPortName(port int64) string })
		if ok {
			return i.GetOutputPortName
		}
	case "_get_code":
		i, ok := val.(interface{ GetCode(input_vars Array, output_vars Array, mode ShaderMode, atype VisualShaderType) string })
		if ok {
			return i.GetCode
		}
	case "_get_func_code":
		i, ok := val.(interface{ GetFuncCode(mode ShaderMode, atype VisualShaderType) string })
		if ok {
			return i.GetFuncCode
		}
	case "_get_global_code":
		i, ok := val.(interface{ GetGlobalCode(mode ShaderMode) string })
		if ok {
			return i.GetGlobalCode
		}
	case "_is_highend":
		i, ok := val.(interface{ IsHighend() bool })
		if ok {
			return i.IsHighend
		}
	case "_is_available":
		i, ok := val.(interface{ IsAvailable(mode ShaderMode, atype VisualShaderType) bool })
		if ok {
			return i.IsAvailable
		}
	}
	return nil
}

type VisualShaderNodeDerivativeFuncOpType int64

const (
	VisualShaderNodeDerivativeFuncOpTypeScalar VisualShaderNodeDerivativeFuncOpType = 0
	VisualShaderNodeDerivativeFuncOpTypeVector2d VisualShaderNodeDerivativeFuncOpType = 1
	VisualShaderNodeDerivativeFuncOpTypeVector3d VisualShaderNodeDerivativeFuncOpType = 2
	VisualShaderNodeDerivativeFuncOpTypeVector4d VisualShaderNodeDerivativeFuncOpType = 3
	VisualShaderNodeDerivativeFuncOpTypeMax VisualShaderNodeDerivativeFuncOpType = 4
)

type VisualShaderNodeDerivativeFuncFunction int64

const (
	VisualShaderNodeDerivativeFuncFuncSum VisualShaderNodeDerivativeFuncFunction = 0
	VisualShaderNodeDerivativeFuncFuncX VisualShaderNodeDerivativeFuncFunction = 1
	VisualShaderNodeDerivativeFuncFuncY VisualShaderNodeDerivativeFuncFunction = 2
	VisualShaderNodeDerivativeFuncFuncMax VisualShaderNodeDerivativeFuncFunction = 3
)

type VisualShaderNodeDerivativeFunc gdnative.Object
func (VisualShaderNodeDerivativeFunc) class() string { return "VisualShaderNodeDerivativeFunc\000" }

func (gdClass VisualShaderNodeDerivativeFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeDerivativeFunc [4]gdnative.Method
func (gdClass VisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[0], atype) }
func (gdClass VisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType { return gdnative.Return[VisualShaderNodeDerivativeFuncOpType](gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[1]) }
func (gdClass VisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[2], fn) }
func (gdClass VisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction { return gdnative.Return[VisualShaderNodeDerivativeFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeDerivativeFunc[3]) }

type VisualShaderNodeDeterminant gdnative.Object
func (VisualShaderNodeDeterminant) class() string { return "VisualShaderNodeDeterminant\000" }

func (gdClass VisualShaderNodeDeterminant) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeDotProduct gdnative.Object
func (VisualShaderNodeDotProduct) class() string { return "VisualShaderNodeDotProduct\000" }

func (gdClass VisualShaderNodeDotProduct) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeExpression gdnative.Object
func (VisualShaderNodeExpression) class() string { return "VisualShaderNodeExpression\000" }

func (gdClass VisualShaderNodeExpression) VisualShaderNodeGroupBase() VisualShaderNodeGroupBase { return VisualShaderNodeGroupBase(gdClass) }

var methodVisualShaderNodeExpression [2]gdnative.Method
func (gdClass VisualShaderNodeExpression) SetExpression(expression string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeExpression[0], expression) }
func (gdClass VisualShaderNodeExpression) GetExpression() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeExpression[1]) }

type VisualShaderNodeFaceForward gdnative.Object
func (VisualShaderNodeFaceForward) class() string { return "VisualShaderNodeFaceForward\000" }

func (gdClass VisualShaderNodeFaceForward) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VisualShaderNodeFloatConstant gdnative.Object
func (VisualShaderNodeFloatConstant) class() string { return "VisualShaderNodeFloatConstant\000" }

func (gdClass VisualShaderNodeFloatConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeFloatConstant [2]gdnative.Method
func (gdClass VisualShaderNodeFloatConstant) SetConstant(constant float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatConstant[0], constant) }
func (gdClass VisualShaderNodeFloatConstant) GetConstant() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatConstant[1]) }

type VisualShaderNodeFloatFuncFunction int64

const (
	VisualShaderNodeFloatFuncFuncSin VisualShaderNodeFloatFuncFunction = 0
	VisualShaderNodeFloatFuncFuncCos VisualShaderNodeFloatFuncFunction = 1
	VisualShaderNodeFloatFuncFuncTan VisualShaderNodeFloatFuncFunction = 2
	VisualShaderNodeFloatFuncFuncAsin VisualShaderNodeFloatFuncFunction = 3
	VisualShaderNodeFloatFuncFuncAcos VisualShaderNodeFloatFuncFunction = 4
	VisualShaderNodeFloatFuncFuncAtan VisualShaderNodeFloatFuncFunction = 5
	VisualShaderNodeFloatFuncFuncSinh VisualShaderNodeFloatFuncFunction = 6
	VisualShaderNodeFloatFuncFuncCosh VisualShaderNodeFloatFuncFunction = 7
	VisualShaderNodeFloatFuncFuncTanh VisualShaderNodeFloatFuncFunction = 8
	VisualShaderNodeFloatFuncFuncLog VisualShaderNodeFloatFuncFunction = 9
	VisualShaderNodeFloatFuncFuncExp VisualShaderNodeFloatFuncFunction = 10
	VisualShaderNodeFloatFuncFuncSqrt VisualShaderNodeFloatFuncFunction = 11
	VisualShaderNodeFloatFuncFuncAbs VisualShaderNodeFloatFuncFunction = 12
	VisualShaderNodeFloatFuncFuncSign VisualShaderNodeFloatFuncFunction = 13
	VisualShaderNodeFloatFuncFuncFloor VisualShaderNodeFloatFuncFunction = 14
	VisualShaderNodeFloatFuncFuncRound VisualShaderNodeFloatFuncFunction = 15
	VisualShaderNodeFloatFuncFuncCeil VisualShaderNodeFloatFuncFunction = 16
	VisualShaderNodeFloatFuncFuncFract VisualShaderNodeFloatFuncFunction = 17
	VisualShaderNodeFloatFuncFuncSaturate VisualShaderNodeFloatFuncFunction = 18
	VisualShaderNodeFloatFuncFuncNegate VisualShaderNodeFloatFuncFunction = 19
	VisualShaderNodeFloatFuncFuncAcosh VisualShaderNodeFloatFuncFunction = 20
	VisualShaderNodeFloatFuncFuncAsinh VisualShaderNodeFloatFuncFunction = 21
	VisualShaderNodeFloatFuncFuncAtanh VisualShaderNodeFloatFuncFunction = 22
	VisualShaderNodeFloatFuncFuncDegrees VisualShaderNodeFloatFuncFunction = 23
	VisualShaderNodeFloatFuncFuncExp2 VisualShaderNodeFloatFuncFunction = 24
	VisualShaderNodeFloatFuncFuncInverseSqrt VisualShaderNodeFloatFuncFunction = 25
	VisualShaderNodeFloatFuncFuncLog2 VisualShaderNodeFloatFuncFunction = 26
	VisualShaderNodeFloatFuncFuncRadians VisualShaderNodeFloatFuncFunction = 27
	VisualShaderNodeFloatFuncFuncReciprocal VisualShaderNodeFloatFuncFunction = 28
	VisualShaderNodeFloatFuncFuncRoundeven VisualShaderNodeFloatFuncFunction = 29
	VisualShaderNodeFloatFuncFuncTrunc VisualShaderNodeFloatFuncFunction = 30
	VisualShaderNodeFloatFuncFuncOneminus VisualShaderNodeFloatFuncFunction = 31
	VisualShaderNodeFloatFuncFuncMax VisualShaderNodeFloatFuncFunction = 32
)

type VisualShaderNodeFloatFunc gdnative.Object
func (VisualShaderNodeFloatFunc) class() string { return "VisualShaderNodeFloatFunc\000" }

func (gdClass VisualShaderNodeFloatFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeFloatFunc [2]gdnative.Method
func (gdClass VisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatFunc[0], fn) }
func (gdClass VisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction { return gdnative.Return[VisualShaderNodeFloatFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeFloatFunc[1]) }

type VisualShaderNodeFloatOpOperator int64

const (
	VisualShaderNodeFloatOpOpAdd VisualShaderNodeFloatOpOperator = 0
	VisualShaderNodeFloatOpOpSub VisualShaderNodeFloatOpOperator = 1
	VisualShaderNodeFloatOpOpMul VisualShaderNodeFloatOpOperator = 2
	VisualShaderNodeFloatOpOpDiv VisualShaderNodeFloatOpOperator = 3
	VisualShaderNodeFloatOpOpMod VisualShaderNodeFloatOpOperator = 4
	VisualShaderNodeFloatOpOpPow VisualShaderNodeFloatOpOperator = 5
	VisualShaderNodeFloatOpOpMax VisualShaderNodeFloatOpOperator = 6
	VisualShaderNodeFloatOpOpMin VisualShaderNodeFloatOpOperator = 7
	VisualShaderNodeFloatOpOpAtan2 VisualShaderNodeFloatOpOperator = 8
	VisualShaderNodeFloatOpOpStep VisualShaderNodeFloatOpOperator = 9
	VisualShaderNodeFloatOpOpEnumSize VisualShaderNodeFloatOpOperator = 10
)

type VisualShaderNodeFloatOp gdnative.Object
func (VisualShaderNodeFloatOp) class() string { return "VisualShaderNodeFloatOp\000" }

func (gdClass VisualShaderNodeFloatOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeFloatOp [2]gdnative.Method
func (gdClass VisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatOp[0], op) }
func (gdClass VisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator { return gdnative.Return[VisualShaderNodeFloatOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeFloatOp[1]) }

type VisualShaderNodeFloatUniformHint int64

const (
	VisualShaderNodeFloatUniformHintNone VisualShaderNodeFloatUniformHint = 0
	VisualShaderNodeFloatUniformHintRange VisualShaderNodeFloatUniformHint = 1
	VisualShaderNodeFloatUniformHintRangeStep VisualShaderNodeFloatUniformHint = 2
	VisualShaderNodeFloatUniformHintMax VisualShaderNodeFloatUniformHint = 3
)

type VisualShaderNodeFloatUniform gdnative.Object
func (VisualShaderNodeFloatUniform) class() string { return "VisualShaderNodeFloatUniform\000" }

func (gdClass VisualShaderNodeFloatUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeFloatUniform [12]gdnative.Method
func (gdClass VisualShaderNodeFloatUniform) SetHint(hint VisualShaderNodeFloatUniformHint)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[0], hint) }
func (gdClass VisualShaderNodeFloatUniform) GetHint() VisualShaderNodeFloatUniformHint { return gdnative.Return[VisualShaderNodeFloatUniformHint](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[1]) }
func (gdClass VisualShaderNodeFloatUniform) SetMin(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[2], value) }
func (gdClass VisualShaderNodeFloatUniform) GetMin() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[3]) }
func (gdClass VisualShaderNodeFloatUniform) SetMax(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[4], value) }
func (gdClass VisualShaderNodeFloatUniform) GetMax() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[5]) }
func (gdClass VisualShaderNodeFloatUniform) SetStep(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[6], value) }
func (gdClass VisualShaderNodeFloatUniform) GetStep() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[7]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[8], enabled) }
func (gdClass VisualShaderNodeFloatUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[9]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValue(value float64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[10], value) }
func (gdClass VisualShaderNodeFloatUniform) GetDefaultValue() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVisualShaderNodeFloatUniform[11]) }

type VisualShaderNodeFresnel gdnative.Object
func (VisualShaderNodeFresnel) class() string { return "VisualShaderNodeFresnel\000" }

func (gdClass VisualShaderNodeFresnel) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeGlobalExpression gdnative.Object
func (VisualShaderNodeGlobalExpression) class() string { return "VisualShaderNodeGlobalExpression\000" }

func (gdClass VisualShaderNodeGlobalExpression) VisualShaderNodeExpression() VisualShaderNodeExpression { return VisualShaderNodeExpression(gdClass) }


type VisualShaderNodeGroupBase gdnative.Object
func (VisualShaderNodeGroupBase) class() string { return "VisualShaderNodeGroupBase\000" }

func (gdClass VisualShaderNodeGroupBase) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase(gdClass) }

var methodVisualShaderNodeGroupBase [21]gdnative.Method
func (gdClass VisualShaderNodeGroupBase) SetInputs(inputs string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[0], inputs) }
func (gdClass VisualShaderNodeGroupBase) GetInputs() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[1]) }
func (gdClass VisualShaderNodeGroupBase) SetOutputs(outputs string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[2], outputs) }
func (gdClass VisualShaderNodeGroupBase) GetOutputs() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[3]) }
func (gdClass VisualShaderNodeGroupBase) IsValidPortName(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[4], name) }
func (gdClass VisualShaderNodeGroupBase) AddInputPort(id int64, atype int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[5], id, atype, name) }
func (gdClass VisualShaderNodeGroupBase) RemoveInputPort(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[6], id) }
func (gdClass VisualShaderNodeGroupBase) GetInputPortCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[7]) }
func (gdClass VisualShaderNodeGroupBase) HasInputPort(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[8], id) }
func (gdClass VisualShaderNodeGroupBase) ClearInputPorts()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[9]) }
func (gdClass VisualShaderNodeGroupBase) AddOutputPort(id int64, atype int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[10], id, atype, name) }
func (gdClass VisualShaderNodeGroupBase) RemoveOutputPort(id int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[11], id) }
func (gdClass VisualShaderNodeGroupBase) GetOutputPortCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[12]) }
func (gdClass VisualShaderNodeGroupBase) HasOutputPort(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[13], id) }
func (gdClass VisualShaderNodeGroupBase) ClearOutputPorts()  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[14]) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[15], id, name) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortType(id int64, atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[16], id, atype) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortName(id int64, name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[17], id, name) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortType(id int64, atype int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[18], id, atype) }
func (gdClass VisualShaderNodeGroupBase) GetFreeInputPortId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[19]) }
func (gdClass VisualShaderNodeGroupBase) GetFreeOutputPortId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeGroupBase[20]) }

type VisualShaderNodeIf gdnative.Object
func (VisualShaderNodeIf) class() string { return "VisualShaderNodeIf\000" }

func (gdClass VisualShaderNodeIf) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeInput gdnative.Object
func (VisualShaderNodeInput) class() string { return "VisualShaderNodeInput\000" }

func (gdClass VisualShaderNodeInput) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeInput [3]gdnative.Method
func (gdClass VisualShaderNodeInput) SetInputName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeInput[0], name) }
func (gdClass VisualShaderNodeInput) GetInputName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeInput[1]) }
func (gdClass VisualShaderNodeInput) GetInputRealName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeInput[2]) }

type VisualShaderNodeIntConstant gdnative.Object
func (VisualShaderNodeIntConstant) class() string { return "VisualShaderNodeIntConstant\000" }

func (gdClass VisualShaderNodeIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeIntConstant [2]gdnative.Method
func (gdClass VisualShaderNodeIntConstant) SetConstant(constant int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntConstant[0], constant) }
func (gdClass VisualShaderNodeIntConstant) GetConstant() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntConstant[1]) }

type VisualShaderNodeIntFuncFunction int64

const (
	VisualShaderNodeIntFuncFuncAbs VisualShaderNodeIntFuncFunction = 0
	VisualShaderNodeIntFuncFuncNegate VisualShaderNodeIntFuncFunction = 1
	VisualShaderNodeIntFuncFuncSign VisualShaderNodeIntFuncFunction = 2
	VisualShaderNodeIntFuncFuncBitwiseNot VisualShaderNodeIntFuncFunction = 3
	VisualShaderNodeIntFuncFuncMax VisualShaderNodeIntFuncFunction = 4
)

type VisualShaderNodeIntFunc gdnative.Object
func (VisualShaderNodeIntFunc) class() string { return "VisualShaderNodeIntFunc\000" }

func (gdClass VisualShaderNodeIntFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeIntFunc [2]gdnative.Method
func (gdClass VisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntFunc[0], fn) }
func (gdClass VisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction { return gdnative.Return[VisualShaderNodeIntFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeIntFunc[1]) }

type VisualShaderNodeIntOpOperator int64

const (
	VisualShaderNodeIntOpOpAdd VisualShaderNodeIntOpOperator = 0
	VisualShaderNodeIntOpOpSub VisualShaderNodeIntOpOperator = 1
	VisualShaderNodeIntOpOpMul VisualShaderNodeIntOpOperator = 2
	VisualShaderNodeIntOpOpDiv VisualShaderNodeIntOpOperator = 3
	VisualShaderNodeIntOpOpMod VisualShaderNodeIntOpOperator = 4
	VisualShaderNodeIntOpOpMax VisualShaderNodeIntOpOperator = 5
	VisualShaderNodeIntOpOpMin VisualShaderNodeIntOpOperator = 6
	VisualShaderNodeIntOpOpBitwiseAnd VisualShaderNodeIntOpOperator = 7
	VisualShaderNodeIntOpOpBitwiseOr VisualShaderNodeIntOpOperator = 8
	VisualShaderNodeIntOpOpBitwiseXor VisualShaderNodeIntOpOperator = 9
	VisualShaderNodeIntOpOpBitwiseLeftShift VisualShaderNodeIntOpOperator = 10
	VisualShaderNodeIntOpOpBitwiseRightShift VisualShaderNodeIntOpOperator = 11
	VisualShaderNodeIntOpOpEnumSize VisualShaderNodeIntOpOperator = 12
)

type VisualShaderNodeIntOp gdnative.Object
func (VisualShaderNodeIntOp) class() string { return "VisualShaderNodeIntOp\000" }

func (gdClass VisualShaderNodeIntOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeIntOp [2]gdnative.Method
func (gdClass VisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntOp[0], op) }
func (gdClass VisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator { return gdnative.Return[VisualShaderNodeIntOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeIntOp[1]) }

type VisualShaderNodeIntUniformHint int64

const (
	VisualShaderNodeIntUniformHintNone VisualShaderNodeIntUniformHint = 0
	VisualShaderNodeIntUniformHintRange VisualShaderNodeIntUniformHint = 1
	VisualShaderNodeIntUniformHintRangeStep VisualShaderNodeIntUniformHint = 2
	VisualShaderNodeIntUniformHintMax VisualShaderNodeIntUniformHint = 3
)

type VisualShaderNodeIntUniform gdnative.Object
func (VisualShaderNodeIntUniform) class() string { return "VisualShaderNodeIntUniform\000" }

func (gdClass VisualShaderNodeIntUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeIntUniform [12]gdnative.Method
func (gdClass VisualShaderNodeIntUniform) SetHint(hint VisualShaderNodeIntUniformHint)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[0], hint) }
func (gdClass VisualShaderNodeIntUniform) GetHint() VisualShaderNodeIntUniformHint { return gdnative.Return[VisualShaderNodeIntUniformHint](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[1]) }
func (gdClass VisualShaderNodeIntUniform) SetMin(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[2], value) }
func (gdClass VisualShaderNodeIntUniform) GetMin() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[3]) }
func (gdClass VisualShaderNodeIntUniform) SetMax(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[4], value) }
func (gdClass VisualShaderNodeIntUniform) GetMax() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[5]) }
func (gdClass VisualShaderNodeIntUniform) SetStep(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[6], value) }
func (gdClass VisualShaderNodeIntUniform) GetStep() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[7]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[8], enabled) }
func (gdClass VisualShaderNodeIntUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[9]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValue(value int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[10], value) }
func (gdClass VisualShaderNodeIntUniform) GetDefaultValue() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeIntUniform[11]) }

type VisualShaderNodeIsFunction int64

const (
	VisualShaderNodeIsFuncIsInf VisualShaderNodeIsFunction = 0
	VisualShaderNodeIsFuncIsNan VisualShaderNodeIsFunction = 1
	VisualShaderNodeIsFuncMax VisualShaderNodeIsFunction = 2
)

type VisualShaderNodeIs gdnative.Object
func (VisualShaderNodeIs) class() string { return "VisualShaderNodeIs\000" }

func (gdClass VisualShaderNodeIs) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeIs [2]gdnative.Method
func (gdClass VisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeIs[0], fn) }
func (gdClass VisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction { return gdnative.Return[VisualShaderNodeIsFunction](gdnative.Object(gdClass), methodVisualShaderNodeIs[1]) }

type VisualShaderNodeMixOpType int64

const (
	VisualShaderNodeMixOpTypeScalar VisualShaderNodeMixOpType = 0
	VisualShaderNodeMixOpTypeVector2d VisualShaderNodeMixOpType = 1
	VisualShaderNodeMixOpTypeVector2dScalar VisualShaderNodeMixOpType = 2
	VisualShaderNodeMixOpTypeVector3d VisualShaderNodeMixOpType = 3
	VisualShaderNodeMixOpTypeVector3dScalar VisualShaderNodeMixOpType = 4
	VisualShaderNodeMixOpTypeVector4d VisualShaderNodeMixOpType = 5
	VisualShaderNodeMixOpTypeVector4dScalar VisualShaderNodeMixOpType = 6
	VisualShaderNodeMixOpTypeMax VisualShaderNodeMixOpType = 7
)

type VisualShaderNodeMix gdnative.Object
func (VisualShaderNodeMix) class() string { return "VisualShaderNodeMix\000" }

func (gdClass VisualShaderNodeMix) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeMix [2]gdnative.Method
func (gdClass VisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeMix[0], op_type) }
func (gdClass VisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType { return gdnative.Return[VisualShaderNodeMixOpType](gdnative.Object(gdClass), methodVisualShaderNodeMix[1]) }

type VisualShaderNodeMultiplyAddOpType int64

const (
	VisualShaderNodeMultiplyAddOpTypeScalar VisualShaderNodeMultiplyAddOpType = 0
	VisualShaderNodeMultiplyAddOpTypeVector2d VisualShaderNodeMultiplyAddOpType = 1
	VisualShaderNodeMultiplyAddOpTypeVector3d VisualShaderNodeMultiplyAddOpType = 2
	VisualShaderNodeMultiplyAddOpTypeVector4d VisualShaderNodeMultiplyAddOpType = 3
	VisualShaderNodeMultiplyAddOpTypeMax VisualShaderNodeMultiplyAddOpType = 4
)

type VisualShaderNodeMultiplyAdd gdnative.Object
func (VisualShaderNodeMultiplyAdd) class() string { return "VisualShaderNodeMultiplyAdd\000" }

func (gdClass VisualShaderNodeMultiplyAdd) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeMultiplyAdd [2]gdnative.Method
func (gdClass VisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeMultiplyAdd[0], atype) }
func (gdClass VisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType { return gdnative.Return[VisualShaderNodeMultiplyAddOpType](gdnative.Object(gdClass), methodVisualShaderNodeMultiplyAdd[1]) }

type VisualShaderNodeOuterProduct gdnative.Object
func (VisualShaderNodeOuterProduct) class() string { return "VisualShaderNodeOuterProduct\000" }

func (gdClass VisualShaderNodeOuterProduct) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeOutput gdnative.Object
func (VisualShaderNodeOutput) class() string { return "VisualShaderNodeOutput\000" }

func (gdClass VisualShaderNodeOutput) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeParticleAcceleratorMode int64

const (
	VisualShaderNodeParticleAcceleratorModeLinear VisualShaderNodeParticleAcceleratorMode = 0
	VisualShaderNodeParticleAcceleratorModeRadial VisualShaderNodeParticleAcceleratorMode = 1
	VisualShaderNodeParticleAcceleratorModeTangential VisualShaderNodeParticleAcceleratorMode = 2
	VisualShaderNodeParticleAcceleratorModeMax VisualShaderNodeParticleAcceleratorMode = 3
)

type VisualShaderNodeParticleAccelerator gdnative.Object
func (VisualShaderNodeParticleAccelerator) class() string { return "VisualShaderNodeParticleAccelerator\000" }

func (gdClass VisualShaderNodeParticleAccelerator) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeParticleAccelerator [2]gdnative.Method
func (gdClass VisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleAccelerator[0], mode) }
func (gdClass VisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode { return gdnative.Return[VisualShaderNodeParticleAcceleratorMode](gdnative.Object(gdClass), methodVisualShaderNodeParticleAccelerator[1]) }

type VisualShaderNodeParticleBoxEmitter gdnative.Object
func (VisualShaderNodeParticleBoxEmitter) class() string { return "VisualShaderNodeParticleBoxEmitter\000" }

func (gdClass VisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter(gdClass) }


type VisualShaderNodeParticleConeVelocity gdnative.Object
func (VisualShaderNodeParticleConeVelocity) class() string { return "VisualShaderNodeParticleConeVelocity\000" }

func (gdClass VisualShaderNodeParticleConeVelocity) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeParticleEmitEmitFlags int64

const (
	VisualShaderNodeParticleEmitEmitFlagPosition VisualShaderNodeParticleEmitEmitFlags = 1
	VisualShaderNodeParticleEmitEmitFlagRotScale VisualShaderNodeParticleEmitEmitFlags = 2
	VisualShaderNodeParticleEmitEmitFlagVelocity VisualShaderNodeParticleEmitEmitFlags = 4
	VisualShaderNodeParticleEmitEmitFlagColor VisualShaderNodeParticleEmitEmitFlags = 8
	VisualShaderNodeParticleEmitEmitFlagCustom VisualShaderNodeParticleEmitEmitFlags = 16
)

type VisualShaderNodeParticleEmit gdnative.Object
func (VisualShaderNodeParticleEmit) class() string { return "VisualShaderNodeParticleEmit\000" }

func (gdClass VisualShaderNodeParticleEmit) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeParticleEmit [2]gdnative.Method
func (gdClass VisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleEmit[0], flags) }
func (gdClass VisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags { return gdnative.Return[VisualShaderNodeParticleEmitEmitFlags](gdnative.Object(gdClass), methodVisualShaderNodeParticleEmit[1]) }

type VisualShaderNodeParticleEmitter gdnative.Object
func (VisualShaderNodeParticleEmitter) class() string { return "VisualShaderNodeParticleEmitter\000" }

func (gdClass VisualShaderNodeParticleEmitter) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeParticleEmitter [2]gdnative.Method
func (gdClass VisualShaderNodeParticleEmitter) SetMode2d(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleEmitter[0], enabled) }
func (gdClass VisualShaderNodeParticleEmitter) IsMode2d() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleEmitter[1]) }

type VisualShaderNodeParticleMeshEmitter gdnative.Object
func (VisualShaderNodeParticleMeshEmitter) class() string { return "VisualShaderNodeParticleMeshEmitter\000" }

func (gdClass VisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter(gdClass) }

var methodVisualShaderNodeParticleMeshEmitter [6]gdnative.Method
func (gdClass VisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[0], mesh) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetMesh() Mesh { return gdnative.Return[Mesh](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[1]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[2], enabled) }
func (gdClass VisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[3]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index int64)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[4], surface_index) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodVisualShaderNodeParticleMeshEmitter[5]) }

type VisualShaderNodeParticleMultiplyByAxisAngle gdnative.Object
func (VisualShaderNodeParticleMultiplyByAxisAngle) class() string { return "VisualShaderNodeParticleMultiplyByAxisAngle\000" }

func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeParticleMultiplyByAxisAngle [2]gdnative.Method
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleMultiplyByAxisAngle[0], enabled) }
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeParticleMultiplyByAxisAngle[1]) }

type VisualShaderNodeParticleOutput gdnative.Object
func (VisualShaderNodeParticleOutput) class() string { return "VisualShaderNodeParticleOutput\000" }

func (gdClass VisualShaderNodeParticleOutput) VisualShaderNodeOutput() VisualShaderNodeOutput { return VisualShaderNodeOutput(gdClass) }


type VisualShaderNodeParticleRandomnessOpType int64

const (
	VisualShaderNodeParticleRandomnessOpTypeScalar VisualShaderNodeParticleRandomnessOpType = 0
	VisualShaderNodeParticleRandomnessOpTypeVector2d VisualShaderNodeParticleRandomnessOpType = 1
	VisualShaderNodeParticleRandomnessOpTypeVector3d VisualShaderNodeParticleRandomnessOpType = 2
	VisualShaderNodeParticleRandomnessOpTypeMax VisualShaderNodeParticleRandomnessOpType = 3
)

type VisualShaderNodeParticleRandomness gdnative.Object
func (VisualShaderNodeParticleRandomness) class() string { return "VisualShaderNodeParticleRandomness\000" }

func (gdClass VisualShaderNodeParticleRandomness) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeParticleRandomness [2]gdnative.Method
func (gdClass VisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeParticleRandomness[0], atype) }
func (gdClass VisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType { return gdnative.Return[VisualShaderNodeParticleRandomnessOpType](gdnative.Object(gdClass), methodVisualShaderNodeParticleRandomness[1]) }

type VisualShaderNodeParticleRingEmitter gdnative.Object
func (VisualShaderNodeParticleRingEmitter) class() string { return "VisualShaderNodeParticleRingEmitter\000" }

func (gdClass VisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter(gdClass) }


type VisualShaderNodeParticleSphereEmitter gdnative.Object
func (VisualShaderNodeParticleSphereEmitter) class() string { return "VisualShaderNodeParticleSphereEmitter\000" }

func (gdClass VisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter(gdClass) }


type VisualShaderNodeResizableBase gdnative.Object
func (VisualShaderNodeResizableBase) class() string { return "VisualShaderNodeResizableBase\000" }

func (gdClass VisualShaderNodeResizableBase) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeResizableBase [2]gdnative.Method
func (gdClass VisualShaderNodeResizableBase) SetSize(size Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeResizableBase[0], size) }
func (gdClass VisualShaderNodeResizableBase) GetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeResizableBase[1]) }

type VisualShaderNodeSDFRaymarch gdnative.Object
func (VisualShaderNodeSDFRaymarch) class() string { return "VisualShaderNodeSDFRaymarch\000" }

func (gdClass VisualShaderNodeSDFRaymarch) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeSDFToScreenUV gdnative.Object
func (VisualShaderNodeSDFToScreenUV) class() string { return "VisualShaderNodeSDFToScreenUV\000" }

func (gdClass VisualShaderNodeSDFToScreenUV) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeSample3DSource int64

const (
	VisualShaderNodeSample3DSourceTexture VisualShaderNodeSample3DSource = 0
	VisualShaderNodeSample3DSourcePort VisualShaderNodeSample3DSource = 1
	VisualShaderNodeSample3DSourceMax VisualShaderNodeSample3DSource = 2
)

type VisualShaderNodeSample3D gdnative.Object
func (VisualShaderNodeSample3D) class() string { return "VisualShaderNodeSample3D\000" }

func (gdClass VisualShaderNodeSample3D) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeSample3D [2]gdnative.Method
func (gdClass VisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSample3D[0], value) }
func (gdClass VisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource { return gdnative.Return[VisualShaderNodeSample3DSource](gdnative.Object(gdClass), methodVisualShaderNodeSample3D[1]) }

type VisualShaderNodeScreenUVToSDF gdnative.Object
func (VisualShaderNodeScreenUVToSDF) class() string { return "VisualShaderNodeScreenUVToSDF\000" }

func (gdClass VisualShaderNodeScreenUVToSDF) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeSmoothStepOpType int64

const (
	VisualShaderNodeSmoothStepOpTypeScalar VisualShaderNodeSmoothStepOpType = 0
	VisualShaderNodeSmoothStepOpTypeVector2d VisualShaderNodeSmoothStepOpType = 1
	VisualShaderNodeSmoothStepOpTypeVector2dScalar VisualShaderNodeSmoothStepOpType = 2
	VisualShaderNodeSmoothStepOpTypeVector3d VisualShaderNodeSmoothStepOpType = 3
	VisualShaderNodeSmoothStepOpTypeVector3dScalar VisualShaderNodeSmoothStepOpType = 4
	VisualShaderNodeSmoothStepOpTypeVector4d VisualShaderNodeSmoothStepOpType = 5
	VisualShaderNodeSmoothStepOpTypeVector4dScalar VisualShaderNodeSmoothStepOpType = 6
	VisualShaderNodeSmoothStepOpTypeMax VisualShaderNodeSmoothStepOpType = 7
)

type VisualShaderNodeSmoothStep gdnative.Object
func (VisualShaderNodeSmoothStep) class() string { return "VisualShaderNodeSmoothStep\000" }

func (gdClass VisualShaderNodeSmoothStep) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeSmoothStep [2]gdnative.Method
func (gdClass VisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSmoothStep[0], op_type) }
func (gdClass VisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType { return gdnative.Return[VisualShaderNodeSmoothStepOpType](gdnative.Object(gdClass), methodVisualShaderNodeSmoothStep[1]) }

type VisualShaderNodeStepOpType int64

const (
	VisualShaderNodeStepOpTypeScalar VisualShaderNodeStepOpType = 0
	VisualShaderNodeStepOpTypeVector2d VisualShaderNodeStepOpType = 1
	VisualShaderNodeStepOpTypeVector2dScalar VisualShaderNodeStepOpType = 2
	VisualShaderNodeStepOpTypeVector3d VisualShaderNodeStepOpType = 3
	VisualShaderNodeStepOpTypeVector3dScalar VisualShaderNodeStepOpType = 4
	VisualShaderNodeStepOpTypeVector4d VisualShaderNodeStepOpType = 5
	VisualShaderNodeStepOpTypeVector4dScalar VisualShaderNodeStepOpType = 6
	VisualShaderNodeStepOpTypeMax VisualShaderNodeStepOpType = 7
)

type VisualShaderNodeStep gdnative.Object
func (VisualShaderNodeStep) class() string { return "VisualShaderNodeStep\000" }

func (gdClass VisualShaderNodeStep) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeStep [2]gdnative.Method
func (gdClass VisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeStep[0], op_type) }
func (gdClass VisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType { return gdnative.Return[VisualShaderNodeStepOpType](gdnative.Object(gdClass), methodVisualShaderNodeStep[1]) }

type VisualShaderNodeSwitchOpType int64

const (
	VisualShaderNodeSwitchOpTypeFloat VisualShaderNodeSwitchOpType = 0
	VisualShaderNodeSwitchOpTypeInt VisualShaderNodeSwitchOpType = 1
	VisualShaderNodeSwitchOpTypeVector2d VisualShaderNodeSwitchOpType = 2
	VisualShaderNodeSwitchOpTypeVector3d VisualShaderNodeSwitchOpType = 3
	VisualShaderNodeSwitchOpTypeVector4d VisualShaderNodeSwitchOpType = 4
	VisualShaderNodeSwitchOpTypeBoolean VisualShaderNodeSwitchOpType = 5
	VisualShaderNodeSwitchOpTypeTransform VisualShaderNodeSwitchOpType = 6
	VisualShaderNodeSwitchOpTypeMax VisualShaderNodeSwitchOpType = 7
)

type VisualShaderNodeSwitch gdnative.Object
func (VisualShaderNodeSwitch) class() string { return "VisualShaderNodeSwitch\000" }

func (gdClass VisualShaderNodeSwitch) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeSwitch [2]gdnative.Method
func (gdClass VisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeSwitch[0], atype) }
func (gdClass VisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType { return gdnative.Return[VisualShaderNodeSwitchOpType](gdnative.Object(gdClass), methodVisualShaderNodeSwitch[1]) }

type VisualShaderNodeTextureSource int64

const (
	VisualShaderNodeTextureSourceTexture VisualShaderNodeTextureSource = 0
	VisualShaderNodeTextureSourceScreen VisualShaderNodeTextureSource = 1
	VisualShaderNodeTextureSource2dTexture VisualShaderNodeTextureSource = 2
	VisualShaderNodeTextureSource2dNormal VisualShaderNodeTextureSource = 3
	VisualShaderNodeTextureSourceDepth VisualShaderNodeTextureSource = 4
	VisualShaderNodeTextureSourcePort VisualShaderNodeTextureSource = 5
	VisualShaderNodeTextureSourceMax VisualShaderNodeTextureSource = 6
)

type VisualShaderNodeTextureTextureType int64

const (
	VisualShaderNodeTextureTypeData VisualShaderNodeTextureTextureType = 0
	VisualShaderNodeTextureTypeColor VisualShaderNodeTextureTextureType = 1
	VisualShaderNodeTextureTypeNormalMap VisualShaderNodeTextureTextureType = 2
	VisualShaderNodeTextureTypeMax VisualShaderNodeTextureTextureType = 3
)

type VisualShaderNodeTexture gdnative.Object
func (VisualShaderNodeTexture) class() string { return "VisualShaderNodeTexture\000" }

func (gdClass VisualShaderNodeTexture) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeTexture [6]gdnative.Method
func (gdClass VisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[0], value) }
func (gdClass VisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource { return gdnative.Return[VisualShaderNodeTextureSource](gdnative.Object(gdClass), methodVisualShaderNodeTexture[1]) }
func (gdClass VisualShaderNodeTexture) SetTexture(value Texture2D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[2], value) }
func (gdClass VisualShaderNodeTexture) GetTexture() Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodVisualShaderNodeTexture[3]) }
func (gdClass VisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture[4], value) }
func (gdClass VisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType { return gdnative.Return[VisualShaderNodeTextureTextureType](gdnative.Object(gdClass), methodVisualShaderNodeTexture[5]) }

type VisualShaderNodeTexture2DArray gdnative.Object
func (VisualShaderNodeTexture2DArray) class() string { return "VisualShaderNodeTexture2DArray\000" }

func (gdClass VisualShaderNodeTexture2DArray) VisualShaderNodeSample3D() VisualShaderNodeSample3D { return VisualShaderNodeSample3D(gdClass) }

var methodVisualShaderNodeTexture2DArray [2]gdnative.Method
func (gdClass VisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture2DArray[0], value) }
func (gdClass VisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray { return gdnative.Return[Texture2DArray](gdnative.Object(gdClass), methodVisualShaderNodeTexture2DArray[1]) }

type VisualShaderNodeTexture2DArrayUniform gdnative.Object
func (VisualShaderNodeTexture2DArrayUniform) class() string { return "VisualShaderNodeTexture2DArrayUniform\000" }

func (gdClass VisualShaderNodeTexture2DArrayUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform(gdClass) }


type VisualShaderNodeTexture3D gdnative.Object
func (VisualShaderNodeTexture3D) class() string { return "VisualShaderNodeTexture3D\000" }

func (gdClass VisualShaderNodeTexture3D) VisualShaderNodeSample3D() VisualShaderNodeSample3D { return VisualShaderNodeSample3D(gdClass) }

var methodVisualShaderNodeTexture3D [2]gdnative.Method
func (gdClass VisualShaderNodeTexture3D) SetTexture(value Texture3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTexture3D[0], value) }
func (gdClass VisualShaderNodeTexture3D) GetTexture() Texture3D { return gdnative.Return[Texture3D](gdnative.Object(gdClass), methodVisualShaderNodeTexture3D[1]) }

type VisualShaderNodeTexture3DUniform gdnative.Object
func (VisualShaderNodeTexture3DUniform) class() string { return "VisualShaderNodeTexture3DUniform\000" }

func (gdClass VisualShaderNodeTexture3DUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform(gdClass) }


type VisualShaderNodeTextureSDF gdnative.Object
func (VisualShaderNodeTextureSDF) class() string { return "VisualShaderNodeTextureSDF\000" }

func (gdClass VisualShaderNodeTextureSDF) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeTextureSDFNormal gdnative.Object
func (VisualShaderNodeTextureSDFNormal) class() string { return "VisualShaderNodeTextureSDFNormal\000" }

func (gdClass VisualShaderNodeTextureSDFNormal) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeTextureUniformTextureType int64

const (
	VisualShaderNodeTextureUniformTypeData VisualShaderNodeTextureUniformTextureType = 0
	VisualShaderNodeTextureUniformTypeColor VisualShaderNodeTextureUniformTextureType = 1
	VisualShaderNodeTextureUniformTypeNormalMap VisualShaderNodeTextureUniformTextureType = 2
	VisualShaderNodeTextureUniformTypeAnisotropy VisualShaderNodeTextureUniformTextureType = 3
	VisualShaderNodeTextureUniformTypeMax VisualShaderNodeTextureUniformTextureType = 4
)

type VisualShaderNodeTextureUniformColorDefault int64

const (
	VisualShaderNodeTextureUniformColorDefaultWhite VisualShaderNodeTextureUniformColorDefault = 0
	VisualShaderNodeTextureUniformColorDefaultBlack VisualShaderNodeTextureUniformColorDefault = 1
	VisualShaderNodeTextureUniformColorDefaultTransparent VisualShaderNodeTextureUniformColorDefault = 2
	VisualShaderNodeTextureUniformColorDefaultMax VisualShaderNodeTextureUniformColorDefault = 3
)

type VisualShaderNodeTextureUniformTextureFilter int64

const (
	VisualShaderNodeTextureUniformFilterDefault VisualShaderNodeTextureUniformTextureFilter = 0
	VisualShaderNodeTextureUniformFilterNearest VisualShaderNodeTextureUniformTextureFilter = 1
	VisualShaderNodeTextureUniformFilterLinear VisualShaderNodeTextureUniformTextureFilter = 2
	VisualShaderNodeTextureUniformFilterNearestMipmap VisualShaderNodeTextureUniformTextureFilter = 3
	VisualShaderNodeTextureUniformFilterLinearMipmap VisualShaderNodeTextureUniformTextureFilter = 4
	VisualShaderNodeTextureUniformFilterNearestMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 5
	VisualShaderNodeTextureUniformFilterLinearMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 6
	VisualShaderNodeTextureUniformFilterMax VisualShaderNodeTextureUniformTextureFilter = 7
)

type VisualShaderNodeTextureUniformTextureRepeat int64

const (
	VisualShaderNodeTextureUniformRepeatDefault VisualShaderNodeTextureUniformTextureRepeat = 0
	VisualShaderNodeTextureUniformRepeatEnabled VisualShaderNodeTextureUniformTextureRepeat = 1
	VisualShaderNodeTextureUniformRepeatDisabled VisualShaderNodeTextureUniformTextureRepeat = 2
	VisualShaderNodeTextureUniformRepeatMax VisualShaderNodeTextureUniformTextureRepeat = 3
)

type VisualShaderNodeTextureUniform gdnative.Object
func (VisualShaderNodeTextureUniform) class() string { return "VisualShaderNodeTextureUniform\000" }

func (gdClass VisualShaderNodeTextureUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeTextureUniform [8]gdnative.Method
func (gdClass VisualShaderNodeTextureUniform) SetTextureType(atype VisualShaderNodeTextureUniformTextureType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[0], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureType() VisualShaderNodeTextureUniformTextureType { return gdnative.Return[VisualShaderNodeTextureUniformTextureType](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[1]) }
func (gdClass VisualShaderNodeTextureUniform) SetColorDefault(atype VisualShaderNodeTextureUniformColorDefault)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[2], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetColorDefault() VisualShaderNodeTextureUniformColorDefault { return gdnative.Return[VisualShaderNodeTextureUniformColorDefault](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[3]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureFilter(filter VisualShaderNodeTextureUniformTextureFilter)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[4], filter) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureFilter() VisualShaderNodeTextureUniformTextureFilter { return gdnative.Return[VisualShaderNodeTextureUniformTextureFilter](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[5]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureRepeat(atype VisualShaderNodeTextureUniformTextureRepeat)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[6], atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureRepeat() VisualShaderNodeTextureUniformTextureRepeat { return gdnative.Return[VisualShaderNodeTextureUniformTextureRepeat](gdnative.Object(gdClass), methodVisualShaderNodeTextureUniform[7]) }

type VisualShaderNodeTextureUniformTriplanar gdnative.Object
func (VisualShaderNodeTextureUniformTriplanar) class() string { return "VisualShaderNodeTextureUniformTriplanar\000" }

func (gdClass VisualShaderNodeTextureUniformTriplanar) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform(gdClass) }


type VisualShaderNodeTransformCompose gdnative.Object
func (VisualShaderNodeTransformCompose) class() string { return "VisualShaderNodeTransformCompose\000" }

func (gdClass VisualShaderNodeTransformCompose) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeTransformConstant gdnative.Object
func (VisualShaderNodeTransformConstant) class() string { return "VisualShaderNodeTransformConstant\000" }

func (gdClass VisualShaderNodeTransformConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeTransformConstant [2]gdnative.Method
func (gdClass VisualShaderNodeTransformConstant) SetConstant(constant Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformConstant[0], constant) }
func (gdClass VisualShaderNodeTransformConstant) GetConstant() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVisualShaderNodeTransformConstant[1]) }

type VisualShaderNodeTransformDecompose gdnative.Object
func (VisualShaderNodeTransformDecompose) class() string { return "VisualShaderNodeTransformDecompose\000" }

func (gdClass VisualShaderNodeTransformDecompose) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }


type VisualShaderNodeTransformFuncFunction int64

const (
	VisualShaderNodeTransformFuncFuncInverse VisualShaderNodeTransformFuncFunction = 0
	VisualShaderNodeTransformFuncFuncTranspose VisualShaderNodeTransformFuncFunction = 1
	VisualShaderNodeTransformFuncFuncMax VisualShaderNodeTransformFuncFunction = 2
)

type VisualShaderNodeTransformFunc gdnative.Object
func (VisualShaderNodeTransformFunc) class() string { return "VisualShaderNodeTransformFunc\000" }

func (gdClass VisualShaderNodeTransformFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeTransformFunc [2]gdnative.Method
func (gdClass VisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformFunc[0], fn) }
func (gdClass VisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction { return gdnative.Return[VisualShaderNodeTransformFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeTransformFunc[1]) }

type VisualShaderNodeTransformOpOperator int64

const (
	VisualShaderNodeTransformOpOpAxb VisualShaderNodeTransformOpOperator = 0
	VisualShaderNodeTransformOpOpBxa VisualShaderNodeTransformOpOperator = 1
	VisualShaderNodeTransformOpOpAxbComp VisualShaderNodeTransformOpOperator = 2
	VisualShaderNodeTransformOpOpBxaComp VisualShaderNodeTransformOpOperator = 3
	VisualShaderNodeTransformOpOpAdd VisualShaderNodeTransformOpOperator = 4
	VisualShaderNodeTransformOpOpAMinusB VisualShaderNodeTransformOpOperator = 5
	VisualShaderNodeTransformOpOpBMinusA VisualShaderNodeTransformOpOperator = 6
	VisualShaderNodeTransformOpOpADivB VisualShaderNodeTransformOpOperator = 7
	VisualShaderNodeTransformOpOpBDivA VisualShaderNodeTransformOpOperator = 8
	VisualShaderNodeTransformOpOpMax VisualShaderNodeTransformOpOperator = 9
)

type VisualShaderNodeTransformOp gdnative.Object
func (VisualShaderNodeTransformOp) class() string { return "VisualShaderNodeTransformOp\000" }

func (gdClass VisualShaderNodeTransformOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeTransformOp [2]gdnative.Method
func (gdClass VisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformOp[0], op) }
func (gdClass VisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator { return gdnative.Return[VisualShaderNodeTransformOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeTransformOp[1]) }

type VisualShaderNodeTransformUniform gdnative.Object
func (VisualShaderNodeTransformUniform) class() string { return "VisualShaderNodeTransformUniform\000" }

func (gdClass VisualShaderNodeTransformUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeTransformUniform [4]gdnative.Method
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[0], enabled) }
func (gdClass VisualShaderNodeTransformUniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[1]) }
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValue(value Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[2], value) }
func (gdClass VisualShaderNodeTransformUniform) GetDefaultValue() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVisualShaderNodeTransformUniform[3]) }

type VisualShaderNodeTransformVecMultOperator int64

const (
	VisualShaderNodeTransformVecMultOpAxb VisualShaderNodeTransformVecMultOperator = 0
	VisualShaderNodeTransformVecMultOpBxa VisualShaderNodeTransformVecMultOperator = 1
	VisualShaderNodeTransformVecMultOp3x3Axb VisualShaderNodeTransformVecMultOperator = 2
	VisualShaderNodeTransformVecMultOp3x3Bxa VisualShaderNodeTransformVecMultOperator = 3
	VisualShaderNodeTransformVecMultOpMax VisualShaderNodeTransformVecMultOperator = 4
)

type VisualShaderNodeTransformVecMult gdnative.Object
func (VisualShaderNodeTransformVecMult) class() string { return "VisualShaderNodeTransformVecMult\000" }

func (gdClass VisualShaderNodeTransformVecMult) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeTransformVecMult [2]gdnative.Method
func (gdClass VisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeTransformVecMult[0], op) }
func (gdClass VisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator { return gdnative.Return[VisualShaderNodeTransformVecMultOperator](gdnative.Object(gdClass), methodVisualShaderNodeTransformVecMult[1]) }

type VisualShaderNodeUVFuncFunction int64

const (
	VisualShaderNodeUVFuncFuncPanning VisualShaderNodeUVFuncFunction = 0
	VisualShaderNodeUVFuncFuncScaling VisualShaderNodeUVFuncFunction = 1
	VisualShaderNodeUVFuncFuncMax VisualShaderNodeUVFuncFunction = 2
)

type VisualShaderNodeUVFunc gdnative.Object
func (VisualShaderNodeUVFunc) class() string { return "VisualShaderNodeUVFunc\000" }

func (gdClass VisualShaderNodeUVFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeUVFunc [2]gdnative.Method
func (gdClass VisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUVFunc[0], fn) }
func (gdClass VisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction { return gdnative.Return[VisualShaderNodeUVFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeUVFunc[1]) }

type VisualShaderNodeUniformQualifier int64

const (
	VisualShaderNodeUniformQualNone VisualShaderNodeUniformQualifier = 0
	VisualShaderNodeUniformQualGlobal VisualShaderNodeUniformQualifier = 1
	VisualShaderNodeUniformQualInstance VisualShaderNodeUniformQualifier = 2
	VisualShaderNodeUniformQualMax VisualShaderNodeUniformQualifier = 3
)

type VisualShaderNodeUniform gdnative.Object
func (VisualShaderNodeUniform) class() string { return "VisualShaderNodeUniform\000" }

func (gdClass VisualShaderNodeUniform) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeUniform [4]gdnative.Method
func (gdClass VisualShaderNodeUniform) SetUniformName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniform[0], name) }
func (gdClass VisualShaderNodeUniform) GetUniformName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeUniform[1]) }
func (gdClass VisualShaderNodeUniform) SetQualifier(qualifier VisualShaderNodeUniformQualifier)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniform[2], qualifier) }
func (gdClass VisualShaderNodeUniform) GetQualifier() VisualShaderNodeUniformQualifier { return gdnative.Return[VisualShaderNodeUniformQualifier](gdnative.Object(gdClass), methodVisualShaderNodeUniform[3]) }

type VisualShaderNodeUniformRef gdnative.Object
func (VisualShaderNodeUniformRef) class() string { return "VisualShaderNodeUniformRef\000" }

func (gdClass VisualShaderNodeUniformRef) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeUniformRef [2]gdnative.Method
func (gdClass VisualShaderNodeUniformRef) SetUniformName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeUniformRef[0], name) }
func (gdClass VisualShaderNodeUniformRef) GetUniformName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeUniformRef[1]) }

type VisualShaderNodeVarying gdnative.Object
func (VisualShaderNodeVarying) class() string { return "VisualShaderNodeVarying\000" }

func (gdClass VisualShaderNodeVarying) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeVarying [4]gdnative.Method
func (gdClass VisualShaderNodeVarying) SetVaryingName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVarying[0], name) }
func (gdClass VisualShaderNodeVarying) GetVaryingName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodVisualShaderNodeVarying[1]) }
func (gdClass VisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVarying[2], atype) }
func (gdClass VisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType { return gdnative.Return[VisualShaderVaryingType](gdnative.Object(gdClass), methodVisualShaderNodeVarying[3]) }

type VisualShaderNodeVaryingGetter gdnative.Object
func (VisualShaderNodeVaryingGetter) class() string { return "VisualShaderNodeVaryingGetter\000" }

func (gdClass VisualShaderNodeVaryingGetter) VisualShaderNodeVarying() VisualShaderNodeVarying { return VisualShaderNodeVarying(gdClass) }


type VisualShaderNodeVaryingSetter gdnative.Object
func (VisualShaderNodeVaryingSetter) class() string { return "VisualShaderNodeVaryingSetter\000" }

func (gdClass VisualShaderNodeVaryingSetter) VisualShaderNodeVarying() VisualShaderNodeVarying { return VisualShaderNodeVarying(gdClass) }


type VisualShaderNodeVec2Constant gdnative.Object
func (VisualShaderNodeVec2Constant) class() string { return "VisualShaderNodeVec2Constant\000" }

func (gdClass VisualShaderNodeVec2Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeVec2Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec2Constant) SetConstant(constant Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Constant[0], constant) }
func (gdClass VisualShaderNodeVec2Constant) GetConstant() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeVec2Constant[1]) }

type VisualShaderNodeVec2Uniform gdnative.Object
func (VisualShaderNodeVec2Uniform) class() string { return "VisualShaderNodeVec2Uniform\000" }

func (gdClass VisualShaderNodeVec2Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeVec2Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec2Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[1]) }
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValue(value Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[2], value) }
func (gdClass VisualShaderNodeVec2Uniform) GetDefaultValue() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodVisualShaderNodeVec2Uniform[3]) }

type VisualShaderNodeVec3Constant gdnative.Object
func (VisualShaderNodeVec3Constant) class() string { return "VisualShaderNodeVec3Constant\000" }

func (gdClass VisualShaderNodeVec3Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeVec3Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec3Constant) SetConstant(constant Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Constant[0], constant) }
func (gdClass VisualShaderNodeVec3Constant) GetConstant() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVisualShaderNodeVec3Constant[1]) }

type VisualShaderNodeVec3Uniform gdnative.Object
func (VisualShaderNodeVec3Uniform) class() string { return "VisualShaderNodeVec3Uniform\000" }

func (gdClass VisualShaderNodeVec3Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeVec3Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec3Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[1]) }
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValue(value Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[2], value) }
func (gdClass VisualShaderNodeVec3Uniform) GetDefaultValue() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVisualShaderNodeVec3Uniform[3]) }

type VisualShaderNodeVec4Constant gdnative.Object
func (VisualShaderNodeVec4Constant) class() string { return "VisualShaderNodeVec4Constant\000" }

func (gdClass VisualShaderNodeVec4Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant(gdClass) }

var methodVisualShaderNodeVec4Constant [2]gdnative.Method
func (gdClass VisualShaderNodeVec4Constant) SetConstant(constant Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Constant[0], constant) }
func (gdClass VisualShaderNodeVec4Constant) GetConstant() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodVisualShaderNodeVec4Constant[1]) }

type VisualShaderNodeVec4Uniform gdnative.Object
func (VisualShaderNodeVec4Uniform) class() string { return "VisualShaderNodeVec4Uniform\000" }

func (gdClass VisualShaderNodeVec4Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform(gdClass) }

var methodVisualShaderNodeVec4Uniform [4]gdnative.Method
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValueEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[0], enabled) }
func (gdClass VisualShaderNodeVec4Uniform) IsDefaultValueEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[1]) }
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValue(value Quaternion)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[2], value) }
func (gdClass VisualShaderNodeVec4Uniform) GetDefaultValue() Quaternion { return gdnative.Return[Quaternion](gdnative.Object(gdClass), methodVisualShaderNodeVec4Uniform[3]) }

type VisualShaderNodeVectorBaseOpType int64

const (
	VisualShaderNodeVectorBaseOpTypeVector2d VisualShaderNodeVectorBaseOpType = 0
	VisualShaderNodeVectorBaseOpTypeVector3d VisualShaderNodeVectorBaseOpType = 1
	VisualShaderNodeVectorBaseOpTypeVector4d VisualShaderNodeVectorBaseOpType = 2
	VisualShaderNodeVectorBaseOpTypeMax VisualShaderNodeVectorBaseOpType = 3
)

type VisualShaderNodeVectorBase gdnative.Object
func (VisualShaderNodeVectorBase) class() string { return "VisualShaderNodeVectorBase\000" }

func (gdClass VisualShaderNodeVectorBase) VisualShaderNode() VisualShaderNode { return VisualShaderNode(gdClass) }

var methodVisualShaderNodeVectorBase [2]gdnative.Method
func (gdClass VisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorBase[0], atype) }
func (gdClass VisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType { return gdnative.Return[VisualShaderNodeVectorBaseOpType](gdnative.Object(gdClass), methodVisualShaderNodeVectorBase[1]) }

type VisualShaderNodeVectorCompose gdnative.Object
func (VisualShaderNodeVectorCompose) class() string { return "VisualShaderNodeVectorCompose\000" }

func (gdClass VisualShaderNodeVectorCompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VisualShaderNodeVectorDecompose gdnative.Object
func (VisualShaderNodeVectorDecompose) class() string { return "VisualShaderNodeVectorDecompose\000" }

func (gdClass VisualShaderNodeVectorDecompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VisualShaderNodeVectorDistance gdnative.Object
func (VisualShaderNodeVectorDistance) class() string { return "VisualShaderNodeVectorDistance\000" }

func (gdClass VisualShaderNodeVectorDistance) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VisualShaderNodeVectorFuncFunction int64

const (
	VisualShaderNodeVectorFuncFuncNormalize VisualShaderNodeVectorFuncFunction = 0
	VisualShaderNodeVectorFuncFuncSaturate VisualShaderNodeVectorFuncFunction = 1
	VisualShaderNodeVectorFuncFuncNegate VisualShaderNodeVectorFuncFunction = 2
	VisualShaderNodeVectorFuncFuncReciprocal VisualShaderNodeVectorFuncFunction = 3
	VisualShaderNodeVectorFuncFuncAbs VisualShaderNodeVectorFuncFunction = 4
	VisualShaderNodeVectorFuncFuncAcos VisualShaderNodeVectorFuncFunction = 5
	VisualShaderNodeVectorFuncFuncAcosh VisualShaderNodeVectorFuncFunction = 6
	VisualShaderNodeVectorFuncFuncAsin VisualShaderNodeVectorFuncFunction = 7
	VisualShaderNodeVectorFuncFuncAsinh VisualShaderNodeVectorFuncFunction = 8
	VisualShaderNodeVectorFuncFuncAtan VisualShaderNodeVectorFuncFunction = 9
	VisualShaderNodeVectorFuncFuncAtanh VisualShaderNodeVectorFuncFunction = 10
	VisualShaderNodeVectorFuncFuncCeil VisualShaderNodeVectorFuncFunction = 11
	VisualShaderNodeVectorFuncFuncCos VisualShaderNodeVectorFuncFunction = 12
	VisualShaderNodeVectorFuncFuncCosh VisualShaderNodeVectorFuncFunction = 13
	VisualShaderNodeVectorFuncFuncDegrees VisualShaderNodeVectorFuncFunction = 14
	VisualShaderNodeVectorFuncFuncExp VisualShaderNodeVectorFuncFunction = 15
	VisualShaderNodeVectorFuncFuncExp2 VisualShaderNodeVectorFuncFunction = 16
	VisualShaderNodeVectorFuncFuncFloor VisualShaderNodeVectorFuncFunction = 17
	VisualShaderNodeVectorFuncFuncFract VisualShaderNodeVectorFuncFunction = 18
	VisualShaderNodeVectorFuncFuncInverseSqrt VisualShaderNodeVectorFuncFunction = 19
	VisualShaderNodeVectorFuncFuncLog VisualShaderNodeVectorFuncFunction = 20
	VisualShaderNodeVectorFuncFuncLog2 VisualShaderNodeVectorFuncFunction = 21
	VisualShaderNodeVectorFuncFuncRadians VisualShaderNodeVectorFuncFunction = 22
	VisualShaderNodeVectorFuncFuncRound VisualShaderNodeVectorFuncFunction = 23
	VisualShaderNodeVectorFuncFuncRoundeven VisualShaderNodeVectorFuncFunction = 24
	VisualShaderNodeVectorFuncFuncSign VisualShaderNodeVectorFuncFunction = 25
	VisualShaderNodeVectorFuncFuncSin VisualShaderNodeVectorFuncFunction = 26
	VisualShaderNodeVectorFuncFuncSinh VisualShaderNodeVectorFuncFunction = 27
	VisualShaderNodeVectorFuncFuncSqrt VisualShaderNodeVectorFuncFunction = 28
	VisualShaderNodeVectorFuncFuncTan VisualShaderNodeVectorFuncFunction = 29
	VisualShaderNodeVectorFuncFuncTanh VisualShaderNodeVectorFuncFunction = 30
	VisualShaderNodeVectorFuncFuncTrunc VisualShaderNodeVectorFuncFunction = 31
	VisualShaderNodeVectorFuncFuncOneminus VisualShaderNodeVectorFuncFunction = 32
	VisualShaderNodeVectorFuncFuncMax VisualShaderNodeVectorFuncFunction = 33
)

type VisualShaderNodeVectorFunc gdnative.Object
func (VisualShaderNodeVectorFunc) class() string { return "VisualShaderNodeVectorFunc\000" }

func (gdClass VisualShaderNodeVectorFunc) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }

var methodVisualShaderNodeVectorFunc [2]gdnative.Method
func (gdClass VisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorFunc[0], fn) }
func (gdClass VisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction { return gdnative.Return[VisualShaderNodeVectorFuncFunction](gdnative.Object(gdClass), methodVisualShaderNodeVectorFunc[1]) }

type VisualShaderNodeVectorLen gdnative.Object
func (VisualShaderNodeVectorLen) class() string { return "VisualShaderNodeVectorLen\000" }

func (gdClass VisualShaderNodeVectorLen) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VisualShaderNodeVectorOpOperator int64

const (
	VisualShaderNodeVectorOpOpAdd VisualShaderNodeVectorOpOperator = 0
	VisualShaderNodeVectorOpOpSub VisualShaderNodeVectorOpOperator = 1
	VisualShaderNodeVectorOpOpMul VisualShaderNodeVectorOpOperator = 2
	VisualShaderNodeVectorOpOpDiv VisualShaderNodeVectorOpOperator = 3
	VisualShaderNodeVectorOpOpMod VisualShaderNodeVectorOpOperator = 4
	VisualShaderNodeVectorOpOpPow VisualShaderNodeVectorOpOperator = 5
	VisualShaderNodeVectorOpOpMax VisualShaderNodeVectorOpOperator = 6
	VisualShaderNodeVectorOpOpMin VisualShaderNodeVectorOpOperator = 7
	VisualShaderNodeVectorOpOpCross VisualShaderNodeVectorOpOperator = 8
	VisualShaderNodeVectorOpOpAtan2 VisualShaderNodeVectorOpOperator = 9
	VisualShaderNodeVectorOpOpReflect VisualShaderNodeVectorOpOperator = 10
	VisualShaderNodeVectorOpOpStep VisualShaderNodeVectorOpOperator = 11
	VisualShaderNodeVectorOpOpEnumSize VisualShaderNodeVectorOpOperator = 12
)

type VisualShaderNodeVectorOp gdnative.Object
func (VisualShaderNodeVectorOp) class() string { return "VisualShaderNodeVectorOp\000" }

func (gdClass VisualShaderNodeVectorOp) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }

var methodVisualShaderNodeVectorOp [2]gdnative.Method
func (gdClass VisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator)  { gdnative.Call(gdnative.Object(gdClass), methodVisualShaderNodeVectorOp[0], op) }
func (gdClass VisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator { return gdnative.Return[VisualShaderNodeVectorOpOperator](gdnative.Object(gdClass), methodVisualShaderNodeVectorOp[1]) }

type VisualShaderNodeVectorRefract gdnative.Object
func (VisualShaderNodeVectorRefract) class() string { return "VisualShaderNodeVectorRefract\000" }

func (gdClass VisualShaderNodeVectorRefract) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase(gdClass) }


type VoxelGISubdiv int64

const (
	VoxelGISubdiv64 VoxelGISubdiv = 0
	VoxelGISubdiv128 VoxelGISubdiv = 1
	VoxelGISubdiv256 VoxelGISubdiv = 2
	VoxelGISubdiv512 VoxelGISubdiv = 3
	VoxelGISubdivMax VoxelGISubdiv = 4
)

type VoxelGI gdnative.Object
func (VoxelGI) class() string { return "VoxelGI\000" }

func (gdClass VoxelGI) VisualInstance3D() VisualInstance3D { return VisualInstance3D(gdClass) }

var methodVoxelGI [8]gdnative.Method
func (gdClass VoxelGI) SetProbeData(data VoxelGIData)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[0], data) }
func (gdClass VoxelGI) GetProbeData() VoxelGIData { return gdnative.Return[VoxelGIData](gdnative.Object(gdClass), methodVoxelGI[1]) }
func (gdClass VoxelGI) SetSubdiv(subdiv VoxelGISubdiv)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[2], subdiv) }
func (gdClass VoxelGI) GetSubdiv() VoxelGISubdiv { return gdnative.Return[VoxelGISubdiv](gdnative.Object(gdClass), methodVoxelGI[3]) }
func (gdClass VoxelGI) SetExtents(extents Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[4], extents) }
func (gdClass VoxelGI) GetExtents() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVoxelGI[5]) }
func (gdClass VoxelGI) Bake(from_node Node, create_visual_debug bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[6], from_node, create_visual_debug) }
func (gdClass VoxelGI) DebugBake()  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGI[7]) }

type VoxelGIData gdnative.Object
func (VoxelGIData) class() string { return "VoxelGIData\000" }

func (gdClass VoxelGIData) Resource() Resource { return Resource(gdClass) }

var methodVoxelGIData [21]gdnative.Method
func (gdClass VoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[0], to_cell_xform, aabb, octree_size, octree_cells, data_cells, distance_field, level_counts) }
func (gdClass VoxelGIData) GetBounds() AABB { return gdnative.Return[AABB](gdnative.Object(gdClass), methodVoxelGIData[1]) }
func (gdClass VoxelGIData) GetOctreeSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodVoxelGIData[2]) }
func (gdClass VoxelGIData) GetToCellXform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodVoxelGIData[3]) }
func (gdClass VoxelGIData) GetOctreeCells() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodVoxelGIData[4]) }
func (gdClass VoxelGIData) GetDataCells() []byte { return gdnative.Return[[]byte](gdnative.Object(gdClass), methodVoxelGIData[5]) }
func (gdClass VoxelGIData) GetLevelCounts() []int32 { return gdnative.Return[[]int32](gdnative.Object(gdClass), methodVoxelGIData[6]) }
func (gdClass VoxelGIData) SetDynamicRange(dynamic_range float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[7], dynamic_range) }
func (gdClass VoxelGIData) GetDynamicRange() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[8]) }
func (gdClass VoxelGIData) SetEnergy(energy float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[9], energy) }
func (gdClass VoxelGIData) GetEnergy() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[10]) }
func (gdClass VoxelGIData) SetBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[11], bias) }
func (gdClass VoxelGIData) GetBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[12]) }
func (gdClass VoxelGIData) SetNormalBias(bias float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[13], bias) }
func (gdClass VoxelGIData) GetNormalBias() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[14]) }
func (gdClass VoxelGIData) SetPropagation(propagation float64)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[15], propagation) }
func (gdClass VoxelGIData) GetPropagation() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodVoxelGIData[16]) }
func (gdClass VoxelGIData) SetInterior(interior bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[17], interior) }
func (gdClass VoxelGIData) IsInterior() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVoxelGIData[18]) }
func (gdClass VoxelGIData) SetUseTwoBounces(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodVoxelGIData[19], enable) }
func (gdClass VoxelGIData) IsUsingTwoBounces() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodVoxelGIData[20]) }

type WeakRef gdnative.Object
func (WeakRef) class() string { return "WeakRef\000" }

func (gdClass WeakRef) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodWeakRef [1]gdnative.Method
func (gdClass WeakRef) GetRef() any { return gdnative.Return[any](gdnative.Object(gdClass), methodWeakRef[0]) }

type WebRTCDataChannelWriteMode int64

const (
	WebRTCDataChannelWriteModeText WebRTCDataChannelWriteMode = 0
	WebRTCDataChannelWriteModeBinary WebRTCDataChannelWriteMode = 1
)

type WebRTCDataChannelChannelState int64

const (
	WebRTCDataChannelStateConnecting WebRTCDataChannelChannelState = 0
	WebRTCDataChannelStateOpen WebRTCDataChannelChannelState = 1
	WebRTCDataChannelStateClosing WebRTCDataChannelChannelState = 2
	WebRTCDataChannelStateClosed WebRTCDataChannelChannelState = 3
)

type WebRTCDataChannel gdnative.Object
func (WebRTCDataChannel) class() string { return "WebRTCDataChannel\000" }

func (gdClass WebRTCDataChannel) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodWebRTCDataChannel [14]gdnative.Method
func (gdClass WebRTCDataChannel) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCDataChannel[0]) }
func (gdClass WebRTCDataChannel) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannel[1]) }
func (gdClass WebRTCDataChannel) WasStringPacket() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[2]) }
func (gdClass WebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCDataChannel[3], write_mode) }
func (gdClass WebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode { return gdnative.Return[WebRTCDataChannelWriteMode](gdnative.Object(gdClass), methodWebRTCDataChannel[4]) }
func (gdClass WebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState { return gdnative.Return[WebRTCDataChannelChannelState](gdnative.Object(gdClass), methodWebRTCDataChannel[5]) }
func (gdClass WebRTCDataChannel) GetLabel() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannel[6]) }
func (gdClass WebRTCDataChannel) IsOrdered() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[7]) }
func (gdClass WebRTCDataChannel) GetId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[8]) }
func (gdClass WebRTCDataChannel) GetMaxPacketLifeTime() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[9]) }
func (gdClass WebRTCDataChannel) GetMaxRetransmits() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[10]) }
func (gdClass WebRTCDataChannel) GetProtocol() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebRTCDataChannel[11]) }
func (gdClass WebRTCDataChannel) IsNegotiated() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCDataChannel[12]) }
func (gdClass WebRTCDataChannel) GetBufferedAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebRTCDataChannel[13]) }

type WebRTCDataChannelExtension gdnative.Object
func (WebRTCDataChannelExtension) class() string { return "WebRTCDataChannelExtension\000" }

func (gdClass WebRTCDataChannelExtension) WebRTCDataChannel() WebRTCDataChannel { return WebRTCDataChannel(gdClass) }

func (gdClass WebRTCDataChannelExtension) virtual(val any, name string) any {	switch name {
	case "_get_packet":
		i, ok := val.(interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 })
		if ok {
			return i.GetPacket
		}
	case "_put_packet":
		i, ok := val.(interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 })
		if ok {
			return i.PutPacket
		}
	case "_get_available_packet_count":
		i, ok := val.(interface{ GetAvailablePacketCount() int64 })
		if ok {
			return i.GetAvailablePacketCount
		}
	case "_get_max_packet_size":
		i, ok := val.(interface{ GetMaxPacketSize() int64 })
		if ok {
			return i.GetMaxPacketSize
		}
	case "_poll":
		i, ok := val.(interface{ Poll() int64 })
		if ok {
			return i.Poll
		}
	case "_close":
		i, ok := val.(interface{ Close()  })
		if ok {
			return i.Close
		}
	case "_set_write_mode":
		i, ok := val.(interface{ SetWriteMode(p_write_mode int64)  })
		if ok {
			return i.SetWriteMode
		}
	case "_get_write_mode":
		i, ok := val.(interface{ GetWriteMode() int64 })
		if ok {
			return i.GetWriteMode
		}
	case "_was_string_packet":
		i, ok := val.(interface{ WasStringPacket() bool })
		if ok {
			return i.WasStringPacket
		}
	case "_get_ready_state":
		i, ok := val.(interface{ GetReadyState() int64 })
		if ok {
			return i.GetReadyState
		}
	case "_get_label":
		i, ok := val.(interface{ GetLabel() string })
		if ok {
			return i.GetLabel
		}
	case "_is_ordered":
		i, ok := val.(interface{ IsOrdered() bool })
		if ok {
			return i.IsOrdered
		}
	case "_get_id":
		i, ok := val.(interface{ GetId() int64 })
		if ok {
			return i.GetId
		}
	case "_get_max_packet_life_time":
		i, ok := val.(interface{ GetMaxPacketLifeTime() int64 })
		if ok {
			return i.GetMaxPacketLifeTime
		}
	case "_get_max_retransmits":
		i, ok := val.(interface{ GetMaxRetransmits() int64 })
		if ok {
			return i.GetMaxRetransmits
		}
	case "_get_protocol":
		i, ok := val.(interface{ GetProtocol() string })
		if ok {
			return i.GetProtocol
		}
	case "_is_negotiated":
		i, ok := val.(interface{ IsNegotiated() bool })
		if ok {
			return i.IsNegotiated
		}
	case "_get_buffered_amount":
		i, ok := val.(interface{ GetBufferedAmount() int64 })
		if ok {
			return i.GetBufferedAmount
		}
	}
	return nil
}

type WebRTCMultiplayerPeer gdnative.Object
func (WebRTCMultiplayerPeer) class() string { return "WebRTCMultiplayerPeer\000" }

func (gdClass WebRTCMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer(gdClass) }

var methodWebRTCMultiplayerPeer [7]gdnative.Method
func (gdClass WebRTCMultiplayerPeer) Initialize(peer_id int64, server_compatibility bool, channels_config Array) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[0], peer_id, server_compatibility, channels_config) }
func (gdClass WebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id int64, unreliable_lifetime int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[1], peer, peer_id, unreliable_lifetime) }
func (gdClass WebRTCMultiplayerPeer) RemovePeer(peer_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[2], peer_id) }
func (gdClass WebRTCMultiplayerPeer) HasPeer(peer_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[3], peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeer(peer_id int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[4], peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeers() Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[5]) }
func (gdClass WebRTCMultiplayerPeer) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCMultiplayerPeer[6]) }

type WebRTCPeerConnectionConnectionState int64

const (
	WebRTCPeerConnectionStateNew WebRTCPeerConnectionConnectionState = 0
	WebRTCPeerConnectionStateConnecting WebRTCPeerConnectionConnectionState = 1
	WebRTCPeerConnectionStateConnected WebRTCPeerConnectionConnectionState = 2
	WebRTCPeerConnectionStateDisconnected WebRTCPeerConnectionConnectionState = 3
	WebRTCPeerConnectionStateFailed WebRTCPeerConnectionConnectionState = 4
	WebRTCPeerConnectionStateClosed WebRTCPeerConnectionConnectionState = 5
)

type WebRTCPeerConnection gdnative.Object
func (WebRTCPeerConnection) class() string { return "WebRTCPeerConnection\000" }

func (gdClass WebRTCPeerConnection) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodWebRTCPeerConnection [10]gdnative.Method
func (gdClass WebRTCPeerConnection) SetDefaultExtension(extension_class string)  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCPeerConnection[0], extension_class) }
func (gdClass WebRTCPeerConnection) Initialize(configuration Dictionary) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[1], configuration) }
func (gdClass WebRTCPeerConnection) CreateDataChannel(label string, options Dictionary) WebRTCDataChannel { return gdnative.Return[WebRTCDataChannel](gdnative.Object(gdClass), methodWebRTCPeerConnection[2], label, options) }
func (gdClass WebRTCPeerConnection) CreateOffer() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[3]) }
func (gdClass WebRTCPeerConnection) SetLocalDescription(atype string, sdp string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[4], atype, sdp) }
func (gdClass WebRTCPeerConnection) SetRemoteDescription(atype string, sdp string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[5], atype, sdp) }
func (gdClass WebRTCPeerConnection) AddIceCandidate(media string, index int64, name string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[6], media, index, name) }
func (gdClass WebRTCPeerConnection) Poll() error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebRTCPeerConnection[7]) }
func (gdClass WebRTCPeerConnection) Close()  { gdnative.Call(gdnative.Object(gdClass), methodWebRTCPeerConnection[8]) }
func (gdClass WebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState { return gdnative.Return[WebRTCPeerConnectionConnectionState](gdnative.Object(gdClass), methodWebRTCPeerConnection[9]) }

type WebRTCPeerConnectionExtension gdnative.Object
func (WebRTCPeerConnectionExtension) class() string { return "WebRTCPeerConnectionExtension\000" }

func (gdClass WebRTCPeerConnectionExtension) WebRTCPeerConnection() WebRTCPeerConnection { return WebRTCPeerConnection(gdClass) }

func (gdClass WebRTCPeerConnectionExtension) virtual(val any, name string) any {	switch name {
	case "_get_connection_state":
		i, ok := val.(interface{ GetConnectionState() int64 })
		if ok {
			return i.GetConnectionState
		}
	case "_initialize":
		i, ok := val.(interface{ Initialize(p_config Dictionary) int64 })
		if ok {
			return i.Initialize
		}
	case "_create_data_channel":
		i, ok := val.(interface{ CreateDataChannel(p_label string, p_config Dictionary) Object })
		if ok {
			return i.CreateDataChannel
		}
	case "_create_offer":
		i, ok := val.(interface{ CreateOffer() int64 })
		if ok {
			return i.CreateOffer
		}
	case "_set_remote_description":
		i, ok := val.(interface{ SetRemoteDescription(p_type string, p_sdp string) int64 })
		if ok {
			return i.SetRemoteDescription
		}
	case "_set_local_description":
		i, ok := val.(interface{ SetLocalDescription(p_type string, p_sdp string) int64 })
		if ok {
			return i.SetLocalDescription
		}
	case "_add_ice_candidate":
		i, ok := val.(interface{ AddIceCandidate(p_sdp_mid_name string, p_sdp_mline_index int64, p_sdp_name string) int64 })
		if ok {
			return i.AddIceCandidate
		}
	case "_poll":
		i, ok := val.(interface{ Poll() int64 })
		if ok {
			return i.Poll
		}
	case "_close":
		i, ok := val.(interface{ Close()  })
		if ok {
			return i.Close
		}
	}
	return nil
}

type WebSocketClient gdnative.Object
func (WebSocketClient) class() string { return "WebSocketClient\000" }

func (gdClass WebSocketClient) WebSocketMultiplayerPeer() WebSocketMultiplayerPeer { return WebSocketMultiplayerPeer(gdClass) }

var methodWebSocketClient [8]gdnative.Method
func (gdClass WebSocketClient) ConnectToUrl(url string, protocols []string, gd_mp_api bool, custom_headers []string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketClient[0], url, protocols, gd_mp_api, custom_headers) }
func (gdClass WebSocketClient) DisconnectFromHost(code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[1], code, reason) }
func (gdClass WebSocketClient) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketClient[2]) }
func (gdClass WebSocketClient) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketClient[3]) }
func (gdClass WebSocketClient) SetVerifySslEnabled(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[4], enabled) }
func (gdClass WebSocketClient) IsVerifySslEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketClient[5]) }
func (gdClass WebSocketClient) GetTrustedSslCertificate() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketClient[6]) }
func (gdClass WebSocketClient) SetTrustedSslCertificate(cert X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketClient[7], cert) }

type WebSocketMultiplayerPeer gdnative.Object
func (WebSocketMultiplayerPeer) class() string { return "WebSocketMultiplayerPeer\000" }

func (gdClass WebSocketMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer(gdClass) }

var methodWebSocketMultiplayerPeer [2]gdnative.Method
func (gdClass WebSocketMultiplayerPeer) SetBuffers(input_buffer_size_kb int64, input_max_packets int64, output_buffer_size_kb int64, output_max_packets int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketMultiplayerPeer[0], input_buffer_size_kb, input_max_packets, output_buffer_size_kb, output_max_packets) }
func (gdClass WebSocketMultiplayerPeer) GetPeer(peer_id int64) WebSocketPeer { return gdnative.Return[WebSocketPeer](gdnative.Object(gdClass), methodWebSocketMultiplayerPeer[1], peer_id) }

type WebSocketPeerWriteMode int64

const (
	WebSocketPeerWriteModeText WebSocketPeerWriteMode = 0
	WebSocketPeerWriteModeBinary WebSocketPeerWriteMode = 1
)

type WebSocketPeer gdnative.Object
func (WebSocketPeer) class() string { return "WebSocketPeer\000" }

func (gdClass WebSocketPeer) PacketPeer() PacketPeer { return PacketPeer(gdClass) }

var methodWebSocketPeer [9]gdnative.Method
func (gdClass WebSocketPeer) GetWriteMode() WebSocketPeerWriteMode { return gdnative.Return[WebSocketPeerWriteMode](gdnative.Object(gdClass), methodWebSocketPeer[0]) }
func (gdClass WebSocketPeer) SetWriteMode(mode WebSocketPeerWriteMode)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[1], mode) }
func (gdClass WebSocketPeer) IsConnectedToHost() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketPeer[2]) }
func (gdClass WebSocketPeer) WasStringPacket() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketPeer[3]) }
func (gdClass WebSocketPeer) Close(code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[4], code, reason) }
func (gdClass WebSocketPeer) GetConnectedHost() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketPeer[5]) }
func (gdClass WebSocketPeer) GetConnectedPort() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketPeer[6]) }
func (gdClass WebSocketPeer) SetNoDelay(enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketPeer[7], enabled) }
func (gdClass WebSocketPeer) GetCurrentOutboundBufferedAmount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketPeer[8]) }

type WebSocketServer gdnative.Object
func (WebSocketServer) class() string { return "WebSocketServer\000" }

func (gdClass WebSocketServer) WebSocketMultiplayerPeer() WebSocketMultiplayerPeer { return WebSocketMultiplayerPeer(gdClass) }

var methodWebSocketServer [18]gdnative.Method
func (gdClass WebSocketServer) IsListening() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketServer[0]) }
func (gdClass WebSocketServer) SetExtraHeaders(headers []string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[1], headers) }
func (gdClass WebSocketServer) Listen(port int64, protocols []string, gd_mp_api bool) error { return gdnative.Return[error](gdnative.Object(gdClass), methodWebSocketServer[2], port, protocols, gd_mp_api) }
func (gdClass WebSocketServer) Stop()  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[3]) }
func (gdClass WebSocketServer) HasPeer(id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWebSocketServer[4], id) }
func (gdClass WebSocketServer) GetPeerAddress(id int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketServer[5], id) }
func (gdClass WebSocketServer) GetPeerPort(id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWebSocketServer[6], id) }
func (gdClass WebSocketServer) DisconnectPeer(id int64, code int64, reason string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[7], id, code, reason) }
func (gdClass WebSocketServer) GetBindIp() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebSocketServer[8]) }
func (gdClass WebSocketServer) SetBindIp(ip string)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[9], ip) }
func (gdClass WebSocketServer) GetPrivateKey() CryptoKey { return gdnative.Return[CryptoKey](gdnative.Object(gdClass), methodWebSocketServer[10]) }
func (gdClass WebSocketServer) SetPrivateKey(key CryptoKey)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[11], key) }
func (gdClass WebSocketServer) GetSslCertificate() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketServer[12]) }
func (gdClass WebSocketServer) SetSslCertificate(cert X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[13], cert) }
func (gdClass WebSocketServer) GetCaChain() X509Certificate { return gdnative.Return[X509Certificate](gdnative.Object(gdClass), methodWebSocketServer[14]) }
func (gdClass WebSocketServer) SetCaChain(ca_chain X509Certificate)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[15], ca_chain) }
func (gdClass WebSocketServer) GetHandshakeTimeout() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWebSocketServer[16]) }
func (gdClass WebSocketServer) SetHandshakeTimeout(timeout float64)  { gdnative.Call(gdnative.Object(gdClass), methodWebSocketServer[17], timeout) }

type WebXRInterface gdnative.Object
func (WebXRInterface) class() string { return "WebXRInterface\000" }

func (gdClass WebXRInterface) XRInterface() XRInterface { return XRInterface(gdClass) }

var methodWebXRInterface [13]gdnative.Method
func (gdClass WebXRInterface) IsSessionSupported(session_mode string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[0], session_mode) }
func (gdClass WebXRInterface) SetSessionMode(session_mode string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[1], session_mode) }
func (gdClass WebXRInterface) GetSessionMode() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[2]) }
func (gdClass WebXRInterface) SetRequiredFeatures(required_features string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[3], required_features) }
func (gdClass WebXRInterface) GetRequiredFeatures() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[4]) }
func (gdClass WebXRInterface) SetOptionalFeatures(optional_features string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[5], optional_features) }
func (gdClass WebXRInterface) GetOptionalFeatures() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[6]) }
func (gdClass WebXRInterface) GetReferenceSpaceType() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[7]) }
func (gdClass WebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types string)  { gdnative.Call(gdnative.Object(gdClass), methodWebXRInterface[8], requested_reference_space_types) }
func (gdClass WebXRInterface) GetRequestedReferenceSpaceTypes() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[9]) }
func (gdClass WebXRInterface) GetController(controller_id int64) XRPositionalTracker { return gdnative.Return[XRPositionalTracker](gdnative.Object(gdClass), methodWebXRInterface[10], controller_id) }
func (gdClass WebXRInterface) GetVisibilityState() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWebXRInterface[11]) }
func (gdClass WebXRInterface) GetBoundsGeometry() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodWebXRInterface[12]) }

type WindowMode int64

const (
	WindowModeWindowed WindowMode = 0
	WindowModeMinimized WindowMode = 1
	WindowModeMaximized WindowMode = 2
	WindowModeFullscreen WindowMode = 3
	WindowModeExclusiveFullscreen WindowMode = 4
)

type WindowFlags int64

const (
	WindowFlagResizeDisabled WindowFlags = 0
	WindowFlagBorderless WindowFlags = 1
	WindowFlagAlwaysOnTop WindowFlags = 2
	WindowFlagTransparent WindowFlags = 3
	WindowFlagNoFocus WindowFlags = 4
	WindowFlagPopup WindowFlags = 5
	WindowFlagMax WindowFlags = 6
)

type WindowContentScaleMode int64

const (
	WindowContentScaleModeDisabled WindowContentScaleMode = 0
	WindowContentScaleModeCanvasItems WindowContentScaleMode = 1
	WindowContentScaleModeViewport WindowContentScaleMode = 2
)

type WindowContentScaleAspect int64

const (
	WindowContentScaleAspectIgnore WindowContentScaleAspect = 0
	WindowContentScaleAspectKeep WindowContentScaleAspect = 1
	WindowContentScaleAspectKeepWidth WindowContentScaleAspect = 2
	WindowContentScaleAspectKeepHeight WindowContentScaleAspect = 3
	WindowContentScaleAspectExpand WindowContentScaleAspect = 4
)

type WindowLayoutDirection int64

const (
	WindowLayoutDirectionInherited WindowLayoutDirection = 0
	WindowLayoutDirectionLocale WindowLayoutDirection = 1
	WindowLayoutDirectionLtr WindowLayoutDirection = 2
	WindowLayoutDirectionRtl WindowLayoutDirection = 3
)

type Window gdnative.Object
func (Window) class() string { return "Window\000" }

func (gdClass Window) Viewport() Viewport { return Viewport(gdClass) }

var methodWindow [78]gdnative.Method
func (gdClass Window) SetTitle(title string)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[0], title) }
func (gdClass Window) GetTitle() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWindow[1]) }
func (gdClass Window) SetCurrentScreen(index int64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[2], index) }
func (gdClass Window) GetCurrentScreen() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[3]) }
func (gdClass Window) SetPosition(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[4], position) }
func (gdClass Window) GetPosition() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[5]) }
func (gdClass Window) SetSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[6], size) }
func (gdClass Window) GetSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[7]) }
func (gdClass Window) ResetSize()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[8]) }
func (gdClass Window) GetRealSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[9]) }
func (gdClass Window) SetMaxSize(max_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[10], max_size) }
func (gdClass Window) GetMaxSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[11]) }
func (gdClass Window) SetMinSize(min_size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[12], min_size) }
func (gdClass Window) GetMinSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[13]) }
func (gdClass Window) SetMode(mode WindowMode)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[14], mode) }
func (gdClass Window) GetMode() WindowMode { return gdnative.Return[WindowMode](gdnative.Object(gdClass), methodWindow[15]) }
func (gdClass Window) SetFlag(flag WindowFlags, enabled bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[16], flag, enabled) }
func (gdClass Window) GetFlag(flag WindowFlags) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[17], flag) }
func (gdClass Window) IsMaximizeAllowed() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[18]) }
func (gdClass Window) RequestAttention()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[19]) }
func (gdClass Window) MoveToForeground()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[20]) }
func (gdClass Window) SetVisible(visible bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[21], visible) }
func (gdClass Window) IsVisible() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[22]) }
func (gdClass Window) Hide()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[23]) }
func (gdClass Window) Show()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[24]) }
func (gdClass Window) SetTransient(transient bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[25], transient) }
func (gdClass Window) IsTransient() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[26]) }
func (gdClass Window) SetExclusive(exclusive bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[27], exclusive) }
func (gdClass Window) IsExclusive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[28]) }
func (gdClass Window) CanDraw() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[29]) }
func (gdClass Window) HasFocus() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[30]) }
func (gdClass Window) GrabFocus()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[31]) }
func (gdClass Window) SetImeActive(active bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[32], active) }
func (gdClass Window) SetImePosition(position Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[33], position) }
func (gdClass Window) IsEmbedded() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[34]) }
func (gdClass Window) GetContentsMinimumSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodWindow[35]) }
func (gdClass Window) SetContentScaleSize(size Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[36], size) }
func (gdClass Window) GetContentScaleSize() Vector2i { return gdnative.Return[Vector2i](gdnative.Object(gdClass), methodWindow[37]) }
func (gdClass Window) SetContentScaleMode(mode WindowContentScaleMode)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[38], mode) }
func (gdClass Window) GetContentScaleMode() WindowContentScaleMode { return gdnative.Return[WindowContentScaleMode](gdnative.Object(gdClass), methodWindow[39]) }
func (gdClass Window) SetContentScaleAspect(aspect WindowContentScaleAspect)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[40], aspect) }
func (gdClass Window) GetContentScaleAspect() WindowContentScaleAspect { return gdnative.Return[WindowContentScaleAspect](gdnative.Object(gdClass), methodWindow[41]) }
func (gdClass Window) SetContentScaleFactor(factor float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[42], factor) }
func (gdClass Window) GetContentScaleFactor() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWindow[43]) }
func (gdClass Window) SetUseFontOversampling(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[44], enable) }
func (gdClass Window) IsUsingFontOversampling() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[45]) }
func (gdClass Window) SetWrapControls(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[46], enable) }
func (gdClass Window) IsWrappingControls() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[47]) }
func (gdClass Window) ChildControlsChanged()  { gdnative.Call(gdnative.Object(gdClass), methodWindow[48]) }
func (gdClass Window) SetTheme(theme Theme)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[49], theme) }
func (gdClass Window) GetTheme() Theme { return gdnative.Return[Theme](gdnative.Object(gdClass), methodWindow[50]) }
func (gdClass Window) SetThemeTypeVariation(theme_type string)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[51], theme_type) }
func (gdClass Window) GetThemeTypeVariation() string { return gdnative.Return[string](gdnative.Object(gdClass), methodWindow[52]) }
func (gdClass Window) GetThemeIcon(name string, theme_type string) Texture2D { return gdnative.Return[Texture2D](gdnative.Object(gdClass), methodWindow[53], name, theme_type) }
func (gdClass Window) GetThemeStylebox(name string, theme_type string) StyleBox { return gdnative.Return[StyleBox](gdnative.Object(gdClass), methodWindow[54], name, theme_type) }
func (gdClass Window) GetThemeFont(name string, theme_type string) Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodWindow[55], name, theme_type) }
func (gdClass Window) GetThemeFontSize(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[56], name, theme_type) }
func (gdClass Window) GetThemeColor(name string, theme_type string) Color { return gdnative.Return[Color](gdnative.Object(gdClass), methodWindow[57], name, theme_type) }
func (gdClass Window) GetThemeConstant(name string, theme_type string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[58], name, theme_type) }
func (gdClass Window) HasThemeIcon(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[59], name, theme_type) }
func (gdClass Window) HasThemeStylebox(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[60], name, theme_type) }
func (gdClass Window) HasThemeFont(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[61], name, theme_type) }
func (gdClass Window) HasThemeFontSize(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[62], name, theme_type) }
func (gdClass Window) HasThemeColor(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[63], name, theme_type) }
func (gdClass Window) HasThemeConstant(name string, theme_type string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[64], name, theme_type) }
func (gdClass Window) GetThemeDefaultBaseScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWindow[65]) }
func (gdClass Window) GetThemeDefaultFont() Font { return gdnative.Return[Font](gdnative.Object(gdClass), methodWindow[66]) }
func (gdClass Window) GetThemeDefaultFontSize() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWindow[67]) }
func (gdClass Window) SetLayoutDirection(direction WindowLayoutDirection)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[68], direction) }
func (gdClass Window) GetLayoutDirection() WindowLayoutDirection { return gdnative.Return[WindowLayoutDirection](gdnative.Object(gdClass), methodWindow[69]) }
func (gdClass Window) IsLayoutRtl() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[70]) }
func (gdClass Window) SetAutoTranslate(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[71], enable) }
func (gdClass Window) IsAutoTranslating() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWindow[72]) }
func (gdClass Window) Popup(rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[73], rect) }
func (gdClass Window) PopupOnParent(parent_rect Rect2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[74], parent_rect) }
func (gdClass Window) PopupCenteredRatio(ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[75], ratio) }
func (gdClass Window) PopupCentered(minsize Vector2i)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[76], minsize) }
func (gdClass Window) PopupCenteredClamped(minsize Vector2i, fallback_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodWindow[77], minsize, fallback_ratio) }

type WorkerThreadPool gdnative.Object
func (WorkerThreadPool) class() string { return "WorkerThreadPool\000" }

func (gdClass WorkerThreadPool) Object() Object { return Object(gdClass) }

var methodWorkerThreadPool [7]gdnative.Method
func (gdClass WorkerThreadPool) AddTask(action Callable, high_priority bool, description string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[0], action, high_priority, description) }
func (gdClass WorkerThreadPool) IsTaskCompleted(task_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWorkerThreadPool[1], task_id) }
func (gdClass WorkerThreadPool) WaitForTaskCompletion(task_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWorkerThreadPool[2], task_id) }
func (gdClass WorkerThreadPool) AddGroupTask(action Callable, elements int64, tasks_needed int64, high_priority bool, description string) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[3], action, elements, tasks_needed, high_priority, description) }
func (gdClass WorkerThreadPool) IsGroupTaskCompleted(group_id int64) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodWorkerThreadPool[4], group_id) }
func (gdClass WorkerThreadPool) GetGroupProcessedElementCount(group_id int64) int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodWorkerThreadPool[5], group_id) }
func (gdClass WorkerThreadPool) WaitForGroupTaskCompletion(group_id int64)  { gdnative.Call(gdnative.Object(gdClass), methodWorkerThreadPool[6], group_id) }

type World2D gdnative.Object
func (World2D) class() string { return "World2D\000" }

func (gdClass World2D) Resource() Resource { return Resource(gdClass) }

var methodWorld2D [4]gdnative.Method
func (gdClass World2D) GetCanvas() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[0]) }
func (gdClass World2D) GetSpace() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[1]) }
func (gdClass World2D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld2D[2]) }
func (gdClass World2D) GetDirectSpaceState() PhysicsDirectSpaceState2D { return gdnative.Return[PhysicsDirectSpaceState2D](gdnative.Object(gdClass), methodWorld2D[3]) }

type World3D gdnative.Object
func (World3D) class() string { return "World3D\000" }

func (gdClass World3D) Resource() Resource { return Resource(gdClass) }

var methodWorld3D [10]gdnative.Method
func (gdClass World3D) GetSpace() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[0]) }
func (gdClass World3D) GetNavigationMap() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[1]) }
func (gdClass World3D) GetScenario() RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodWorld3D[2]) }
func (gdClass World3D) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[3], env) }
func (gdClass World3D) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorld3D[4]) }
func (gdClass World3D) SetFallbackEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[5], env) }
func (gdClass World3D) GetFallbackEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorld3D[6]) }
func (gdClass World3D) SetCameraEffects(effects CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodWorld3D[7], effects) }
func (gdClass World3D) GetCameraEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodWorld3D[8]) }
func (gdClass World3D) GetDirectSpaceState() PhysicsDirectSpaceState3D { return gdnative.Return[PhysicsDirectSpaceState3D](gdnative.Object(gdClass), methodWorld3D[9]) }

type WorldBoundaryShape2D gdnative.Object
func (WorldBoundaryShape2D) class() string { return "WorldBoundaryShape2D\000" }

func (gdClass WorldBoundaryShape2D) Shape2D() Shape2D { return Shape2D(gdClass) }

var methodWorldBoundaryShape2D [4]gdnative.Method
func (gdClass WorldBoundaryShape2D) SetNormal(normal Vector2)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape2D[0], normal) }
func (gdClass WorldBoundaryShape2D) GetNormal() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodWorldBoundaryShape2D[1]) }
func (gdClass WorldBoundaryShape2D) SetDistance(distance float64)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape2D[2], distance) }
func (gdClass WorldBoundaryShape2D) GetDistance() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodWorldBoundaryShape2D[3]) }

type WorldBoundaryShape3D gdnative.Object
func (WorldBoundaryShape3D) class() string { return "WorldBoundaryShape3D\000" }

func (gdClass WorldBoundaryShape3D) Shape3D() Shape3D { return Shape3D(gdClass) }

var methodWorldBoundaryShape3D [2]gdnative.Method
func (gdClass WorldBoundaryShape3D) SetPlane(plane Plane)  { gdnative.Call(gdnative.Object(gdClass), methodWorldBoundaryShape3D[0], plane) }
func (gdClass WorldBoundaryShape3D) GetPlane() Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodWorldBoundaryShape3D[1]) }

type WorldEnvironment gdnative.Object
func (WorldEnvironment) class() string { return "WorldEnvironment\000" }

func (gdClass WorldEnvironment) Node() Node { return Node(gdClass) }

var methodWorldEnvironment [4]gdnative.Method
func (gdClass WorldEnvironment) SetEnvironment(env Environment)  { gdnative.Call(gdnative.Object(gdClass), methodWorldEnvironment[0], env) }
func (gdClass WorldEnvironment) GetEnvironment() Environment { return gdnative.Return[Environment](gdnative.Object(gdClass), methodWorldEnvironment[1]) }
func (gdClass WorldEnvironment) SetCameraEffects(env CameraEffects)  { gdnative.Call(gdnative.Object(gdClass), methodWorldEnvironment[2], env) }
func (gdClass WorldEnvironment) GetCameraEffects() CameraEffects { return gdnative.Return[CameraEffects](gdnative.Object(gdClass), methodWorldEnvironment[3]) }

type X509Certificate gdnative.Object
func (X509Certificate) class() string { return "X509Certificate\000" }

func (gdClass X509Certificate) Resource() Resource { return Resource(gdClass) }

var methodX509Certificate [2]gdnative.Method
func (gdClass X509Certificate) Save(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodX509Certificate[0], path) }
func (gdClass X509Certificate) Load(path string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodX509Certificate[1], path) }

type XMLParserNodeType int64

const (
	XMLParserNodeNone XMLParserNodeType = 0
	XMLParserNodeElement XMLParserNodeType = 1
	XMLParserNodeElementEnd XMLParserNodeType = 2
	XMLParserNodeText XMLParserNodeType = 3
	XMLParserNodeComment XMLParserNodeType = 4
	XMLParserNodeCdata XMLParserNodeType = 5
	XMLParserNodeUnknown XMLParserNodeType = 6
)

type XMLParser gdnative.Object
func (XMLParser) class() string { return "XMLParser\000" }

func (gdClass XMLParser) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodXMLParser [17]gdnative.Method
func (gdClass XMLParser) Read() error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[0]) }
func (gdClass XMLParser) GetNodeType() XMLParserNodeType { return gdnative.Return[XMLParserNodeType](gdnative.Object(gdClass), methodXMLParser[1]) }
func (gdClass XMLParser) GetNodeName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[2]) }
func (gdClass XMLParser) GetNodeData() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[3]) }
func (gdClass XMLParser) GetNodeOffset() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[4]) }
func (gdClass XMLParser) GetAttributeCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[5]) }
func (gdClass XMLParser) GetAttributeName(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[6], idx) }
func (gdClass XMLParser) GetAttributeValue(idx int64) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[7], idx) }
func (gdClass XMLParser) HasAttribute(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXMLParser[8], name) }
func (gdClass XMLParser) GetNamedAttributeValue(name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[9], name) }
func (gdClass XMLParser) GetNamedAttributeValueSafe(name string) string { return gdnative.Return[string](gdnative.Object(gdClass), methodXMLParser[10], name) }
func (gdClass XMLParser) IsEmpty() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXMLParser[11]) }
func (gdClass XMLParser) GetCurrentLine() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXMLParser[12]) }
func (gdClass XMLParser) SkipSection()  { gdnative.Call(gdnative.Object(gdClass), methodXMLParser[13]) }
func (gdClass XMLParser) Seek(position int64) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[14], position) }
func (gdClass XMLParser) Open(file string) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[15], file) }
func (gdClass XMLParser) OpenBuffer(buffer []byte) error { return gdnative.Return[error](gdnative.Object(gdClass), methodXMLParser[16], buffer) }

type XRAnchor3D gdnative.Object
func (XRAnchor3D) class() string { return "XRAnchor3D\000" }

func (gdClass XRAnchor3D) XRNode3D() XRNode3D { return XRNode3D(gdClass) }

var methodXRAnchor3D [2]gdnative.Method
func (gdClass XRAnchor3D) GetSize() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRAnchor3D[0]) }
func (gdClass XRAnchor3D) GetPlane() Plane { return gdnative.Return[Plane](gdnative.Object(gdClass), methodXRAnchor3D[1]) }

type XRCamera3D gdnative.Object
func (XRCamera3D) class() string { return "XRCamera3D\000" }

func (gdClass XRCamera3D) Camera3D() Camera3D { return Camera3D(gdClass) }


type XRController3D gdnative.Object
func (XRController3D) class() string { return "XRController3D\000" }

func (gdClass XRController3D) XRNode3D() XRNode3D { return XRNode3D(gdClass) }

var methodXRController3D [4]gdnative.Method
func (gdClass XRController3D) IsButtonPressed(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRController3D[0], name) }
func (gdClass XRController3D) GetValue(name string) float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXRController3D[1], name) }
func (gdClass XRController3D) GetAxis(name string) Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodXRController3D[2], name) }
func (gdClass XRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand { return gdnative.Return[XRPositionalTrackerTrackerHand](gdnative.Object(gdClass), methodXRController3D[3]) }

type XRInterfaceCapabilities int64

const (
	XRInterfaceXrNone XRInterfaceCapabilities = 0
	XRInterfaceXrMono XRInterfaceCapabilities = 1
	XRInterfaceXrStereo XRInterfaceCapabilities = 2
	XRInterfaceXrQuad XRInterfaceCapabilities = 4
	XRInterfaceXrVr XRInterfaceCapabilities = 8
	XRInterfaceXrAr XRInterfaceCapabilities = 16
	XRInterfaceXrExternal XRInterfaceCapabilities = 32
)

type XRInterfaceTrackingStatus int64

const (
	XRInterfaceXrNormalTracking XRInterfaceTrackingStatus = 0
	XRInterfaceXrExcessiveMotion XRInterfaceTrackingStatus = 1
	XRInterfaceXrInsufficientFeatures XRInterfaceTrackingStatus = 2
	XRInterfaceXrUnknownTracking XRInterfaceTrackingStatus = 3
	XRInterfaceXrNotTracking XRInterfaceTrackingStatus = 4
)

type XRInterfacePlayAreaMode int64

const (
	XRInterfaceXrPlayAreaUnknown XRInterfacePlayAreaMode = 0
	XRInterfaceXrPlayArea3dof XRInterfacePlayAreaMode = 1
	XRInterfaceXrPlayAreaSitting XRInterfacePlayAreaMode = 2
	XRInterfaceXrPlayAreaRoomscale XRInterfacePlayAreaMode = 3
	XRInterfaceXrPlayAreaStage XRInterfacePlayAreaMode = 4
)

type XRInterface gdnative.Object
func (XRInterface) class() string { return "XRInterface\000" }

func (gdClass XRInterface) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodXRInterface [18]gdnative.Method
func (gdClass XRInterface) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRInterface[0]) }
func (gdClass XRInterface) GetCapabilities() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[1]) }
func (gdClass XRInterface) IsPrimary() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[2]) }
func (gdClass XRInterface) SetPrimary(primary bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[3], primary) }
func (gdClass XRInterface) IsInitialized() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[4]) }
func (gdClass XRInterface) Initialize() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[5]) }
func (gdClass XRInterface) Uninitialize()  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[6]) }
func (gdClass XRInterface) GetTrackingStatus() XRInterfaceTrackingStatus { return gdnative.Return[XRInterfaceTrackingStatus](gdnative.Object(gdClass), methodXRInterface[7]) }
func (gdClass XRInterface) GetRenderTargetSize() Vector2 { return gdnative.Return[Vector2](gdnative.Object(gdClass), methodXRInterface[8]) }
func (gdClass XRInterface) GetViewCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[9]) }
func (gdClass XRInterface) TriggerHapticPulse(action_name string, tracker_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[10], action_name, tracker_name, frequency, amplitude, duration_sec, delay_sec) }
func (gdClass XRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[11], mode) }
func (gdClass XRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode { return gdnative.Return[XRInterfacePlayAreaMode](gdnative.Object(gdClass), methodXRInterface[12]) }
func (gdClass XRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[13], mode) }
func (gdClass XRInterface) GetPlayArea() []Vector3 { return gdnative.Return[[]Vector3](gdnative.Object(gdClass), methodXRInterface[14]) }
func (gdClass XRInterface) GetAnchorDetectionIsEnabled() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRInterface[15]) }
func (gdClass XRInterface) SetAnchorDetectionIsEnabled(enable bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterface[16], enable) }
func (gdClass XRInterface) GetCameraFeedId() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRInterface[17]) }

type XRInterfaceExtension gdnative.Object
func (XRInterfaceExtension) class() string { return "XRInterfaceExtension\000" }

func (gdClass XRInterfaceExtension) XRInterface() XRInterface { return XRInterface(gdClass) }

var methodXRInterfaceExtension [2]gdnative.Method
func (gdClass XRInterfaceExtension) virtual(val any, name string) any {	switch name {
	case "_get_name":
		i, ok := val.(interface{ GetName() string })
		if ok {
			return i.GetName
		}
	case "_get_capabilities":
		i, ok := val.(interface{ GetCapabilities() int64 })
		if ok {
			return i.GetCapabilities
		}
	case "_is_initialized":
		i, ok := val.(interface{ IsInitialized() bool })
		if ok {
			return i.IsInitialized
		}
	case "_initialize":
		i, ok := val.(interface{ Initialize() bool })
		if ok {
			return i.Initialize
		}
	case "_uninitialize":
		i, ok := val.(interface{ Uninitialize()  })
		if ok {
			return i.Uninitialize
		}
	case "_supports_play_area_mode":
		i, ok := val.(interface{ SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool })
		if ok {
			return i.SupportsPlayAreaMode
		}
	case "_get_play_area_mode":
		i, ok := val.(interface{ GetPlayAreaMode() int64 })
		if ok {
			return i.GetPlayAreaMode
		}
	case "_set_play_area_mode":
		i, ok := val.(interface{ SetPlayAreaMode(mode int64) bool })
		if ok {
			return i.SetPlayAreaMode
		}
	case "_get_play_area":
		i, ok := val.(interface{ GetPlayArea() []Vector3 })
		if ok {
			return i.GetPlayArea
		}
	case "_get_render_target_size":
		i, ok := val.(interface{ GetRenderTargetSize() Vector2 })
		if ok {
			return i.GetRenderTargetSize
		}
	case "_get_view_count":
		i, ok := val.(interface{ GetViewCount() int64 })
		if ok {
			return i.GetViewCount
		}
	case "_get_camera_transform":
		i, ok := val.(interface{ GetCameraTransform() Transform3D })
		if ok {
			return i.GetCameraTransform
		}
	case "_get_transform_for_view":
		i, ok := val.(interface{ GetTransformForView(view int64, cam_transform Transform3D) Transform3D })
		if ok {
			return i.GetTransformForView
		}
	case "_get_projection_for_view":
		i, ok := val.(interface{ GetProjectionForView(view int64, aspect float64, z_near float64, z_far float64) []float64 })
		if ok {
			return i.GetProjectionForView
		}
	case "_get_vrs_texture":
		i, ok := val.(interface{ GetVrsTexture() RID })
		if ok {
			return i.GetVrsTexture
		}
	case "_process":
		i, ok := val.(interface{ Process()  })
		if ok {
			return i.Process
		}
	case "_pre_render":
		i, ok := val.(interface{ PreRender()  })
		if ok {
			return i.PreRender
		}
	case "_pre_draw_viewport":
		i, ok := val.(interface{ PreDrawViewport(render_target RID) bool })
		if ok {
			return i.PreDrawViewport
		}
	case "_post_draw_viewport":
		i, ok := val.(interface{ PostDrawViewport(render_target RID, screen_rect Rect2)  })
		if ok {
			return i.PostDrawViewport
		}
	case "_end_frame":
		i, ok := val.(interface{ EndFrame()  })
		if ok {
			return i.EndFrame
		}
	case "_notification":
		i, ok := val.(interface{ Notification(what int64)  })
		if ok {
			return i.Notification
		}
	case "_get_suggested_tracker_names":
		i, ok := val.(interface{ GetSuggestedTrackerNames() []string })
		if ok {
			return i.GetSuggestedTrackerNames
		}
	case "_get_suggested_pose_names":
		i, ok := val.(interface{ GetSuggestedPoseNames(tracker_name string) []string })
		if ok {
			return i.GetSuggestedPoseNames
		}
	case "_get_tracking_status":
		i, ok := val.(interface{ GetTrackingStatus() int64 })
		if ok {
			return i.GetTrackingStatus
		}
	case "_trigger_haptic_pulse":
		i, ok := val.(interface{ TriggerHapticPulse(action_name string, tracker_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  })
		if ok {
			return i.TriggerHapticPulse
		}
	case "_get_anchor_detection_is_enabled":
		i, ok := val.(interface{ GetAnchorDetectionIsEnabled() bool })
		if ok {
			return i.GetAnchorDetectionIsEnabled
		}
	case "_set_anchor_detection_is_enabled":
		i, ok := val.(interface{ SetAnchorDetectionIsEnabled(enabled bool)  })
		if ok {
			return i.SetAnchorDetectionIsEnabled
		}
	case "_get_camera_feed_id":
		i, ok := val.(interface{ GetCameraFeedId() int64 })
		if ok {
			return i.GetCameraFeedId
		}
	}
	return nil
}
func (gdClass XRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer int64, apply_lens_distortion bool, eye_center Vector2, k1 float64, k2 float64, upscale float64, aspect_ratio float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRInterfaceExtension[0], render_target, src_rect, dst_rect, use_layer, layer, apply_lens_distortion, eye_center, k1, k2, upscale, aspect_ratio) }
func (gdClass XRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID { return gdnative.Return[RID](gdnative.Object(gdClass), methodXRInterfaceExtension[1], render_target) }

type XRNode3D gdnative.Object
func (XRNode3D) class() string { return "XRNode3D\000" }

func (gdClass XRNode3D) Node3D() Node3D { return Node3D(gdClass) }

var methodXRNode3D [8]gdnative.Method
func (gdClass XRNode3D) SetTracker(tracker_name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[0], tracker_name) }
func (gdClass XRNode3D) GetTracker() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRNode3D[1]) }
func (gdClass XRNode3D) SetPoseName(pose string)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[2], pose) }
func (gdClass XRNode3D) GetPoseName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRNode3D[3]) }
func (gdClass XRNode3D) GetIsActive() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRNode3D[4]) }
func (gdClass XRNode3D) GetHasTrackingData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRNode3D[5]) }
func (gdClass XRNode3D) GetPose() XRPose { return gdnative.Return[XRPose](gdnative.Object(gdClass), methodXRNode3D[6]) }
func (gdClass XRNode3D) TriggerHapticPulse(action_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRNode3D[7], action_name, frequency, amplitude, duration_sec, delay_sec) }

type XROrigin3D gdnative.Object
func (XROrigin3D) class() string { return "XROrigin3D\000" }

func (gdClass XROrigin3D) Node3D() Node3D { return Node3D(gdClass) }

var methodXROrigin3D [2]gdnative.Method
func (gdClass XROrigin3D) SetWorldScale(world_scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodXROrigin3D[0], world_scale) }
func (gdClass XROrigin3D) GetWorldScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXROrigin3D[1]) }

type XRPoseTrackingConfidence int64

const (
	XRPoseXrTrackingConfidenceNone XRPoseTrackingConfidence = 0
	XRPoseXrTrackingConfidenceLow XRPoseTrackingConfidence = 1
	XRPoseXrTrackingConfidenceHigh XRPoseTrackingConfidence = 2
)

type XRPose gdnative.Object
func (XRPose) class() string { return "XRPose\000" }

func (gdClass XRPose) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodXRPose [13]gdnative.Method
func (gdClass XRPose) SetHasTrackingData(has_tracking_data bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[0], has_tracking_data) }
func (gdClass XRPose) GetHasTrackingData() bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRPose[1]) }
func (gdClass XRPose) SetName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[2], name) }
func (gdClass XRPose) GetName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPose[3]) }
func (gdClass XRPose) SetTransform(transform Transform3D)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[4], transform) }
func (gdClass XRPose) GetTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRPose[5]) }
func (gdClass XRPose) GetAdjustedTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRPose[6]) }
func (gdClass XRPose) SetLinearVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[7], velocity) }
func (gdClass XRPose) GetLinearVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRPose[8]) }
func (gdClass XRPose) SetAngularVelocity(velocity Vector3)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[9], velocity) }
func (gdClass XRPose) GetAngularVelocity() Vector3 { return gdnative.Return[Vector3](gdnative.Object(gdClass), methodXRPose[10]) }
func (gdClass XRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence)  { gdnative.Call(gdnative.Object(gdClass), methodXRPose[11], tracking_confidence) }
func (gdClass XRPose) GetTrackingConfidence() XRPoseTrackingConfidence { return gdnative.Return[XRPoseTrackingConfidence](gdnative.Object(gdClass), methodXRPose[12]) }

type XRPositionalTrackerTrackerHand int64

const (
	XRPositionalTrackerTrackerHandUnknown XRPositionalTrackerTrackerHand = 0
	XRPositionalTrackerTrackerHandLeft XRPositionalTrackerTrackerHand = 1
	XRPositionalTrackerTrackerHandRight XRPositionalTrackerTrackerHand = 2
)

type XRPositionalTracker gdnative.Object
func (XRPositionalTracker) class() string { return "XRPositionalTracker\000" }

func (gdClass XRPositionalTracker) RefCounted() RefCounted { return RefCounted(gdClass) }

var methodXRPositionalTracker [16]gdnative.Method
func (gdClass XRPositionalTracker) GetTrackerType() XRServerTrackerType { return gdnative.Return[XRServerTrackerType](gdnative.Object(gdClass), methodXRPositionalTracker[0]) }
func (gdClass XRPositionalTracker) SetTrackerType(atype XRServerTrackerType)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[1], atype) }
func (gdClass XRPositionalTracker) GetTrackerName() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[2]) }
func (gdClass XRPositionalTracker) SetTrackerName(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[3], name) }
func (gdClass XRPositionalTracker) GetTrackerDesc() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[4]) }
func (gdClass XRPositionalTracker) SetTrackerDesc(description string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[5], description) }
func (gdClass XRPositionalTracker) GetTrackerProfile() string { return gdnative.Return[string](gdnative.Object(gdClass), methodXRPositionalTracker[6]) }
func (gdClass XRPositionalTracker) SetTrackerProfile(profile string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[7], profile) }
func (gdClass XRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand { return gdnative.Return[XRPositionalTrackerTrackerHand](gdnative.Object(gdClass), methodXRPositionalTracker[8]) }
func (gdClass XRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[9], hand) }
func (gdClass XRPositionalTracker) HasPose(name string) bool { return gdnative.Return[bool](gdnative.Object(gdClass), methodXRPositionalTracker[10], name) }
func (gdClass XRPositionalTracker) GetPose(name string) XRPose { return gdnative.Return[XRPose](gdnative.Object(gdClass), methodXRPositionalTracker[11], name) }
func (gdClass XRPositionalTracker) InvalidatePose(name string)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[12], name) }
func (gdClass XRPositionalTracker) SetPose(name string, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[13], name, transform, linear_velocity, angular_velocity, tracking_confidence) }
func (gdClass XRPositionalTracker) GetInput(name string) any { return gdnative.Return[any](gdnative.Object(gdClass), methodXRPositionalTracker[14], name) }
func (gdClass XRPositionalTracker) SetInput(name string, value any)  { gdnative.Call(gdnative.Object(gdClass), methodXRPositionalTracker[15], name, value) }

type XRServerTrackerType int64

const (
	XRServerTrackerHead XRServerTrackerType = 1
	XRServerTrackerController XRServerTrackerType = 2
	XRServerTrackerBasestation XRServerTrackerType = 4
	XRServerTrackerAnchor XRServerTrackerType = 8
	XRServerTrackerAnyKnown XRServerTrackerType = 127
	XRServerTrackerUnknown XRServerTrackerType = 128
	XRServerTrackerAny XRServerTrackerType = 255
)

type XRServerRotationMode int64

const (
	XRServerResetFullRotation XRServerRotationMode = 0
	XRServerResetButKeepTilt XRServerRotationMode = 1
	XRServerDontResetRotation XRServerRotationMode = 2
)

type XRServer gdnative.Object
func (XRServer) class() string { return "XRServer\000" }

func (gdClass XRServer) Object() Object { return Object(gdClass) }

var methodXRServer [17]gdnative.Method
func (gdClass XRServer) GetWorldScale() float64 { return gdnative.Return[float64](gdnative.Object(gdClass), methodXRServer[0]) }
func (gdClass XRServer) SetWorldScale(scale float64)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[1], scale) }
func (gdClass XRServer) GetReferenceFrame() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRServer[2]) }
func (gdClass XRServer) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[3], rotation_mode, keep_height) }
func (gdClass XRServer) GetHmdTransform() Transform3D { return gdnative.Return[Transform3D](gdnative.Object(gdClass), methodXRServer[4]) }
func (gdClass XRServer) AddInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[5], intf) }
func (gdClass XRServer) GetInterfaceCount() int64 { return gdnative.Return[int64](gdnative.Object(gdClass), methodXRServer[6]) }
func (gdClass XRServer) RemoveInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[7], intf) }
func (gdClass XRServer) GetInterface(idx int64) XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[8], idx) }
func (gdClass XRServer) GetInterfaces() Array { return gdnative.Return[Array](gdnative.Object(gdClass), methodXRServer[9]) }
func (gdClass XRServer) FindInterface(name string) XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[10], name) }
func (gdClass XRServer) AddTracker(tracker XRPositionalTracker)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[11], tracker) }
func (gdClass XRServer) RemoveTracker(tracker XRPositionalTracker)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[12], tracker) }
func (gdClass XRServer) GetTrackers(tracker_types int64) Dictionary { return gdnative.Return[Dictionary](gdnative.Object(gdClass), methodXRServer[13], tracker_types) }
func (gdClass XRServer) GetTracker(tracker_name string) XRPositionalTracker { return gdnative.Return[XRPositionalTracker](gdnative.Object(gdClass), methodXRServer[14], tracker_name) }
func (gdClass XRServer) GetPrimaryInterface() XRInterface { return gdnative.Return[XRInterface](gdnative.Object(gdClass), methodXRServer[15]) }
func (gdClass XRServer) SetPrimaryInterface(intf XRInterface)  { gdnative.Call(gdnative.Object(gdClass), methodXRServer[16], intf) }

func init() {	gdnative.OnLoad(func() {		methodAESContext[0] = gdnative.MethodOf("AESContext\000", "start\000", 3167574919)
		methodAESContext[1] = gdnative.MethodOf("AESContext\000", "update\000", 527836100)
		methodAESContext[2] = gdnative.MethodOf("AESContext\000", "get_iv_state\000", 2115431945)
		methodAESContext[3] = gdnative.MethodOf("AESContext\000", "finish\000", 3218959716)
		methodAStar2D[0] = gdnative.MethodOf("AStar2D\000", "get_available_point_id\000", 3905245786)
		methodAStar2D[1] = gdnative.MethodOf("AStar2D\000", "add_point\000", 3370185124)
		methodAStar2D[2] = gdnative.MethodOf("AStar2D\000", "get_point_position\000", 2299179447)
		methodAStar2D[3] = gdnative.MethodOf("AStar2D\000", "set_point_position\000", 163021252)
		methodAStar2D[4] = gdnative.MethodOf("AStar2D\000", "get_point_weight_scale\000", 2339986948)
		methodAStar2D[5] = gdnative.MethodOf("AStar2D\000", "set_point_weight_scale\000", 1602489585)
		methodAStar2D[6] = gdnative.MethodOf("AStar2D\000", "remove_point\000", 1286410249)
		methodAStar2D[7] = gdnative.MethodOf("AStar2D\000", "has_point\000", 1116898809)
		methodAStar2D[8] = gdnative.MethodOf("AStar2D\000", "get_point_connections\000", 2865087369)
		methodAStar2D[9] = gdnative.MethodOf("AStar2D\000", "get_point_ids\000", 2915620761)
		methodAStar2D[10] = gdnative.MethodOf("AStar2D\000", "set_point_disabled\000", 4023243586)
		methodAStar2D[11] = gdnative.MethodOf("AStar2D\000", "is_point_disabled\000", 1116898809)
		methodAStar2D[12] = gdnative.MethodOf("AStar2D\000", "connect_points\000", 3785370599)
		methodAStar2D[13] = gdnative.MethodOf("AStar2D\000", "disconnect_points\000", 3785370599)
		methodAStar2D[14] = gdnative.MethodOf("AStar2D\000", "are_points_connected\000", 4063588998)
		methodAStar2D[15] = gdnative.MethodOf("AStar2D\000", "get_point_count\000", 3905245786)
		methodAStar2D[16] = gdnative.MethodOf("AStar2D\000", "get_point_capacity\000", 3905245786)
		methodAStar2D[17] = gdnative.MethodOf("AStar2D\000", "reserve_space\000", 1286410249)
		methodAStar2D[18] = gdnative.MethodOf("AStar2D\000", "clear\000", 3218959716)
		methodAStar2D[19] = gdnative.MethodOf("AStar2D\000", "get_closest_point\000", 2300324924)
		methodAStar2D[20] = gdnative.MethodOf("AStar2D\000", "get_closest_position_in_segment\000", 2656412154)
		methodAStar2D[21] = gdnative.MethodOf("AStar2D\000", "get_point_path\000", 281625055)
		methodAStar2D[22] = gdnative.MethodOf("AStar2D\000", "get_id_path\000", 3404614526)
		methodAStar3D[0] = gdnative.MethodOf("AStar3D\000", "get_available_point_id\000", 3905245786)
		methodAStar3D[1] = gdnative.MethodOf("AStar3D\000", "add_point\000", 2920922839)
		methodAStar3D[2] = gdnative.MethodOf("AStar3D\000", "get_point_position\000", 711720468)
		methodAStar3D[3] = gdnative.MethodOf("AStar3D\000", "set_point_position\000", 1530502735)
		methodAStar3D[4] = gdnative.MethodOf("AStar3D\000", "get_point_weight_scale\000", 2339986948)
		methodAStar3D[5] = gdnative.MethodOf("AStar3D\000", "set_point_weight_scale\000", 1602489585)
		methodAStar3D[6] = gdnative.MethodOf("AStar3D\000", "remove_point\000", 1286410249)
		methodAStar3D[7] = gdnative.MethodOf("AStar3D\000", "has_point\000", 1116898809)
		methodAStar3D[8] = gdnative.MethodOf("AStar3D\000", "get_point_connections\000", 2865087369)
		methodAStar3D[9] = gdnative.MethodOf("AStar3D\000", "get_point_ids\000", 2915620761)
		methodAStar3D[10] = gdnative.MethodOf("AStar3D\000", "set_point_disabled\000", 4023243586)
		methodAStar3D[11] = gdnative.MethodOf("AStar3D\000", "is_point_disabled\000", 1116898809)
		methodAStar3D[12] = gdnative.MethodOf("AStar3D\000", "connect_points\000", 3785370599)
		methodAStar3D[13] = gdnative.MethodOf("AStar3D\000", "disconnect_points\000", 3785370599)
		methodAStar3D[14] = gdnative.MethodOf("AStar3D\000", "are_points_connected\000", 4063588998)
		methodAStar3D[15] = gdnative.MethodOf("AStar3D\000", "get_point_count\000", 3905245786)
		methodAStar3D[16] = gdnative.MethodOf("AStar3D\000", "get_point_capacity\000", 3905245786)
		methodAStar3D[17] = gdnative.MethodOf("AStar3D\000", "reserve_space\000", 1286410249)
		methodAStar3D[18] = gdnative.MethodOf("AStar3D\000", "clear\000", 3218959716)
		methodAStar3D[19] = gdnative.MethodOf("AStar3D\000", "get_closest_point\000", 3241074317)
		methodAStar3D[20] = gdnative.MethodOf("AStar3D\000", "get_closest_position_in_segment\000", 192990374)
		methodAStar3D[21] = gdnative.MethodOf("AStar3D\000", "get_point_path\000", 880819742)
		methodAStar3D[22] = gdnative.MethodOf("AStar3D\000", "get_id_path\000", 3404614526)
		methodAcceptDialog[0] = gdnative.MethodOf("AcceptDialog\000", "get_ok_button\000", 1856205918)
		methodAcceptDialog[1] = gdnative.MethodOf("AcceptDialog\000", "get_label\000", 566733104)
		methodAcceptDialog[2] = gdnative.MethodOf("AcceptDialog\000", "set_hide_on_ok\000", 2586408642)
		methodAcceptDialog[3] = gdnative.MethodOf("AcceptDialog\000", "get_hide_on_ok\000", 36873697)
		methodAcceptDialog[4] = gdnative.MethodOf("AcceptDialog\000", "set_close_on_escape\000", 2586408642)
		methodAcceptDialog[5] = gdnative.MethodOf("AcceptDialog\000", "get_close_on_escape\000", 36873697)
		methodAcceptDialog[6] = gdnative.MethodOf("AcceptDialog\000", "add_button\000", 4158837846)
		methodAcceptDialog[7] = gdnative.MethodOf("AcceptDialog\000", "add_cancel_button\000", 242045556)
		methodAcceptDialog[8] = gdnative.MethodOf("AcceptDialog\000", "remove_button\000", 1496901182)
		methodAcceptDialog[9] = gdnative.MethodOf("AcceptDialog\000", "register_text_enter\000", 1496901182)
		methodAcceptDialog[10] = gdnative.MethodOf("AcceptDialog\000", "set_text\000", 83702148)
		methodAcceptDialog[11] = gdnative.MethodOf("AcceptDialog\000", "get_text\000", 201670096)
		methodAcceptDialog[12] = gdnative.MethodOf("AcceptDialog\000", "set_autowrap\000", 2586408642)
		methodAcceptDialog[13] = gdnative.MethodOf("AcceptDialog\000", "has_autowrap\000", 2240911060)
		methodAcceptDialog[14] = gdnative.MethodOf("AcceptDialog\000", "set_ok_button_text\000", 83702148)
		methodAcceptDialog[15] = gdnative.MethodOf("AcceptDialog\000", "get_ok_button_text\000", 201670096)
		methodAnimatableBody2D[0] = gdnative.MethodOf("AnimatableBody2D\000", "set_sync_to_physics\000", 2586408642)
		methodAnimatableBody2D[1] = gdnative.MethodOf("AnimatableBody2D\000", "is_sync_to_physics_enabled\000", 36873697)
		methodAnimatableBody3D[0] = gdnative.MethodOf("AnimatableBody3D\000", "set_sync_to_physics\000", 2586408642)
		methodAnimatableBody3D[1] = gdnative.MethodOf("AnimatableBody3D\000", "is_sync_to_physics_enabled\000", 36873697)
		methodAnimatedSprite2D[0] = gdnative.MethodOf("AnimatedSprite2D\000", "set_sprite_frames\000", 905781144)
		methodAnimatedSprite2D[1] = gdnative.MethodOf("AnimatedSprite2D\000", "get_sprite_frames\000", 3804851214)
		methodAnimatedSprite2D[2] = gdnative.MethodOf("AnimatedSprite2D\000", "set_animation\000", 3304788590)
		methodAnimatedSprite2D[3] = gdnative.MethodOf("AnimatedSprite2D\000", "get_animation\000", 2002593661)
		methodAnimatedSprite2D[4] = gdnative.MethodOf("AnimatedSprite2D\000", "set_playing\000", 2586408642)
		methodAnimatedSprite2D[5] = gdnative.MethodOf("AnimatedSprite2D\000", "is_playing\000", 36873697)
		methodAnimatedSprite2D[6] = gdnative.MethodOf("AnimatedSprite2D\000", "play\000", 1975901163)
		methodAnimatedSprite2D[7] = gdnative.MethodOf("AnimatedSprite2D\000", "stop\000", 3218959716)
		methodAnimatedSprite2D[8] = gdnative.MethodOf("AnimatedSprite2D\000", "set_centered\000", 2586408642)
		methodAnimatedSprite2D[9] = gdnative.MethodOf("AnimatedSprite2D\000", "is_centered\000", 36873697)
		methodAnimatedSprite2D[10] = gdnative.MethodOf("AnimatedSprite2D\000", "set_offset\000", 743155724)
		methodAnimatedSprite2D[11] = gdnative.MethodOf("AnimatedSprite2D\000", "get_offset\000", 3341600327)
		methodAnimatedSprite2D[12] = gdnative.MethodOf("AnimatedSprite2D\000", "set_flip_h\000", 2586408642)
		methodAnimatedSprite2D[13] = gdnative.MethodOf("AnimatedSprite2D\000", "is_flipped_h\000", 36873697)
		methodAnimatedSprite2D[14] = gdnative.MethodOf("AnimatedSprite2D\000", "set_flip_v\000", 2586408642)
		methodAnimatedSprite2D[15] = gdnative.MethodOf("AnimatedSprite2D\000", "is_flipped_v\000", 36873697)
		methodAnimatedSprite2D[16] = gdnative.MethodOf("AnimatedSprite2D\000", "set_frame\000", 1286410249)
		methodAnimatedSprite2D[17] = gdnative.MethodOf("AnimatedSprite2D\000", "get_frame\000", 3905245786)
		methodAnimatedSprite2D[18] = gdnative.MethodOf("AnimatedSprite2D\000", "set_speed_scale\000", 373806689)
		methodAnimatedSprite2D[19] = gdnative.MethodOf("AnimatedSprite2D\000", "get_speed_scale\000", 1740695150)
		methodAnimatedSprite3D[0] = gdnative.MethodOf("AnimatedSprite3D\000", "set_sprite_frames\000", 905781144)
		methodAnimatedSprite3D[1] = gdnative.MethodOf("AnimatedSprite3D\000", "get_sprite_frames\000", 3804851214)
		methodAnimatedSprite3D[2] = gdnative.MethodOf("AnimatedSprite3D\000", "set_animation\000", 3304788590)
		methodAnimatedSprite3D[3] = gdnative.MethodOf("AnimatedSprite3D\000", "get_animation\000", 2002593661)
		methodAnimatedSprite3D[4] = gdnative.MethodOf("AnimatedSprite3D\000", "play\000", 1421762485)
		methodAnimatedSprite3D[5] = gdnative.MethodOf("AnimatedSprite3D\000", "stop\000", 3218959716)
		methodAnimatedSprite3D[6] = gdnative.MethodOf("AnimatedSprite3D\000", "is_playing\000", 36873697)
		methodAnimatedSprite3D[7] = gdnative.MethodOf("AnimatedSprite3D\000", "set_frame\000", 1286410249)
		methodAnimatedSprite3D[8] = gdnative.MethodOf("AnimatedSprite3D\000", "get_frame\000", 3905245786)
		methodAnimatedTexture[0] = gdnative.MethodOf("AnimatedTexture\000", "set_frames\000", 1286410249)
		methodAnimatedTexture[1] = gdnative.MethodOf("AnimatedTexture\000", "get_frames\000", 3905245786)
		methodAnimatedTexture[2] = gdnative.MethodOf("AnimatedTexture\000", "set_current_frame\000", 1286410249)
		methodAnimatedTexture[3] = gdnative.MethodOf("AnimatedTexture\000", "get_current_frame\000", 3905245786)
		methodAnimatedTexture[4] = gdnative.MethodOf("AnimatedTexture\000", "set_pause\000", 2586408642)
		methodAnimatedTexture[5] = gdnative.MethodOf("AnimatedTexture\000", "get_pause\000", 36873697)
		methodAnimatedTexture[6] = gdnative.MethodOf("AnimatedTexture\000", "set_oneshot\000", 2586408642)
		methodAnimatedTexture[7] = gdnative.MethodOf("AnimatedTexture\000", "get_oneshot\000", 36873697)
		methodAnimatedTexture[8] = gdnative.MethodOf("AnimatedTexture\000", "set_fps\000", 373806689)
		methodAnimatedTexture[9] = gdnative.MethodOf("AnimatedTexture\000", "get_fps\000", 1740695150)
		methodAnimatedTexture[10] = gdnative.MethodOf("AnimatedTexture\000", "set_frame_texture\000", 666127730)
		methodAnimatedTexture[11] = gdnative.MethodOf("AnimatedTexture\000", "get_frame_texture\000", 3536238170)
		methodAnimatedTexture[12] = gdnative.MethodOf("AnimatedTexture\000", "set_frame_delay\000", 1602489585)
		methodAnimatedTexture[13] = gdnative.MethodOf("AnimatedTexture\000", "get_frame_delay\000", 2339986948)
		methodAnimation[0] = gdnative.MethodOf("Animation\000", "add_track\000", 2393815928)
		methodAnimation[1] = gdnative.MethodOf("Animation\000", "remove_track\000", 1286410249)
		methodAnimation[2] = gdnative.MethodOf("Animation\000", "get_track_count\000", 3905245786)
		methodAnimation[3] = gdnative.MethodOf("Animation\000", "track_get_type\000", 3445944217)
		methodAnimation[4] = gdnative.MethodOf("Animation\000", "track_get_path\000", 408788394)
		methodAnimation[5] = gdnative.MethodOf("Animation\000", "track_set_path\000", 2761262315)
		methodAnimation[6] = gdnative.MethodOf("Animation\000", "find_track\000", 245376003)
		methodAnimation[7] = gdnative.MethodOf("Animation\000", "track_move_up\000", 1286410249)
		methodAnimation[8] = gdnative.MethodOf("Animation\000", "track_move_down\000", 1286410249)
		methodAnimation[9] = gdnative.MethodOf("Animation\000", "track_move_to\000", 3937882851)
		methodAnimation[10] = gdnative.MethodOf("Animation\000", "track_swap\000", 3937882851)
		methodAnimation[11] = gdnative.MethodOf("Animation\000", "track_set_imported\000", 300928843)
		methodAnimation[12] = gdnative.MethodOf("Animation\000", "track_is_imported\000", 1116898809)
		methodAnimation[13] = gdnative.MethodOf("Animation\000", "track_set_enabled\000", 300928843)
		methodAnimation[14] = gdnative.MethodOf("Animation\000", "track_is_enabled\000", 1116898809)
		methodAnimation[15] = gdnative.MethodOf("Animation\000", "position_track_insert_key\000", 2540608232)
		methodAnimation[16] = gdnative.MethodOf("Animation\000", "rotation_track_insert_key\000", 4165004800)
		methodAnimation[17] = gdnative.MethodOf("Animation\000", "scale_track_insert_key\000", 2540608232)
		methodAnimation[18] = gdnative.MethodOf("Animation\000", "blend_shape_track_insert_key\000", 1534913637)
		methodAnimation[19] = gdnative.MethodOf("Animation\000", "track_insert_key\000", 1985425300)
		methodAnimation[20] = gdnative.MethodOf("Animation\000", "track_remove_key\000", 3937882851)
		methodAnimation[21] = gdnative.MethodOf("Animation\000", "track_remove_key_at_time\000", 1602489585)
		methodAnimation[22] = gdnative.MethodOf("Animation\000", "track_set_key_value\000", 2060538656)
		methodAnimation[23] = gdnative.MethodOf("Animation\000", "track_set_key_transition\000", 3506521499)
		methodAnimation[24] = gdnative.MethodOf("Animation\000", "track_set_key_time\000", 3506521499)
		methodAnimation[25] = gdnative.MethodOf("Animation\000", "track_get_key_transition\000", 3085491603)
		methodAnimation[26] = gdnative.MethodOf("Animation\000", "track_get_key_count\000", 923996154)
		methodAnimation[27] = gdnative.MethodOf("Animation\000", "track_get_key_value\000", 678354945)
		methodAnimation[28] = gdnative.MethodOf("Animation\000", "track_get_key_time\000", 3085491603)
		methodAnimation[29] = gdnative.MethodOf("Animation\000", "track_find_key\000", 2119071283)
		methodAnimation[30] = gdnative.MethodOf("Animation\000", "track_set_interpolation_type\000", 4112932513)
		methodAnimation[31] = gdnative.MethodOf("Animation\000", "track_get_interpolation_type\000", 1530756894)
		methodAnimation[32] = gdnative.MethodOf("Animation\000", "track_set_interpolation_loop_wrap\000", 300928843)
		methodAnimation[33] = gdnative.MethodOf("Animation\000", "track_get_interpolation_loop_wrap\000", 1116898809)
		methodAnimation[34] = gdnative.MethodOf("Animation\000", "track_is_compressed\000", 1116898809)
		methodAnimation[35] = gdnative.MethodOf("Animation\000", "value_track_set_update_mode\000", 2854058312)
		methodAnimation[36] = gdnative.MethodOf("Animation\000", "value_track_get_update_mode\000", 1440326473)
		methodAnimation[37] = gdnative.MethodOf("Animation\000", "value_track_get_key_indices\000", 139121918)
		methodAnimation[38] = gdnative.MethodOf("Animation\000", "value_track_interpolate\000", 491147702)
		methodAnimation[39] = gdnative.MethodOf("Animation\000", "method_track_get_key_indices\000", 139121918)
		methodAnimation[40] = gdnative.MethodOf("Animation\000", "method_track_get_name\000", 351665558)
		methodAnimation[41] = gdnative.MethodOf("Animation\000", "method_track_get_params\000", 2345056839)
		methodAnimation[42] = gdnative.MethodOf("Animation\000", "bezier_track_insert_key\000", 3919731513)
		methodAnimation[43] = gdnative.MethodOf("Animation\000", "bezier_track_set_key_value\000", 3506521499)
		methodAnimation[44] = gdnative.MethodOf("Animation\000", "bezier_track_set_key_in_handle\000", 1028302688)
		methodAnimation[45] = gdnative.MethodOf("Animation\000", "bezier_track_set_key_out_handle\000", 1028302688)
		methodAnimation[46] = gdnative.MethodOf("Animation\000", "bezier_track_get_key_value\000", 3085491603)
		methodAnimation[47] = gdnative.MethodOf("Animation\000", "bezier_track_get_key_in_handle\000", 3016396712)
		methodAnimation[48] = gdnative.MethodOf("Animation\000", "bezier_track_get_key_out_handle\000", 3016396712)
		methodAnimation[49] = gdnative.MethodOf("Animation\000", "bezier_track_interpolate\000", 1900462983)
		methodAnimation[50] = gdnative.MethodOf("Animation\000", "audio_track_insert_key\000", 3489962123)
		methodAnimation[51] = gdnative.MethodOf("Animation\000", "audio_track_set_key_stream\000", 3886397084)
		methodAnimation[52] = gdnative.MethodOf("Animation\000", "audio_track_set_key_start_offset\000", 3506521499)
		methodAnimation[53] = gdnative.MethodOf("Animation\000", "audio_track_set_key_end_offset\000", 3506521499)
		methodAnimation[54] = gdnative.MethodOf("Animation\000", "audio_track_get_key_stream\000", 635277205)
		methodAnimation[55] = gdnative.MethodOf("Animation\000", "audio_track_get_key_start_offset\000", 3085491603)
		methodAnimation[56] = gdnative.MethodOf("Animation\000", "audio_track_get_key_end_offset\000", 3085491603)
		methodAnimation[57] = gdnative.MethodOf("Animation\000", "bezier_track_set_key_handle_mode\000", 1049703175)
		methodAnimation[58] = gdnative.MethodOf("Animation\000", "bezier_track_get_key_handle_mode\000", 3175239445)
		methodAnimation[59] = gdnative.MethodOf("Animation\000", "animation_track_insert_key\000", 158676774)
		methodAnimation[60] = gdnative.MethodOf("Animation\000", "animation_track_set_key_animation\000", 117615382)
		methodAnimation[61] = gdnative.MethodOf("Animation\000", "animation_track_get_key_animation\000", 351665558)
		methodAnimation[62] = gdnative.MethodOf("Animation\000", "set_length\000", 373806689)
		methodAnimation[63] = gdnative.MethodOf("Animation\000", "get_length\000", 1740695150)
		methodAnimation[64] = gdnative.MethodOf("Animation\000", "set_loop_mode\000", 3155355575)
		methodAnimation[65] = gdnative.MethodOf("Animation\000", "get_loop_mode\000", 1988889481)
		methodAnimation[66] = gdnative.MethodOf("Animation\000", "set_step\000", 373806689)
		methodAnimation[67] = gdnative.MethodOf("Animation\000", "get_step\000", 1740695150)
		methodAnimation[68] = gdnative.MethodOf("Animation\000", "clear\000", 3218959716)
		methodAnimation[69] = gdnative.MethodOf("Animation\000", "copy_track\000", 148001024)
		methodAnimation[70] = gdnative.MethodOf("Animation\000", "compress\000", 1804059263)
		methodAnimationLibrary[0] = gdnative.MethodOf("AnimationLibrary\000", "add_animation\000", 1811855551)
		methodAnimationLibrary[1] = gdnative.MethodOf("AnimationLibrary\000", "remove_animation\000", 3304788590)
		methodAnimationLibrary[2] = gdnative.MethodOf("AnimationLibrary\000", "rename_animation\000", 3740211285)
		methodAnimationLibrary[3] = gdnative.MethodOf("AnimationLibrary\000", "has_animation\000", 2619796661)
		methodAnimationLibrary[4] = gdnative.MethodOf("AnimationLibrary\000", "get_animation\000", 2933122410)
		methodAnimationLibrary[5] = gdnative.MethodOf("AnimationLibrary\000", "get_animation_list\000", 3995934104)
		methodAnimationNode[0] = gdnative.MethodOf("AnimationNode\000", "get_input_count\000", 3905245786)
		methodAnimationNode[1] = gdnative.MethodOf("AnimationNode\000", "get_input_name\000", 990163283)
		methodAnimationNode[2] = gdnative.MethodOf("AnimationNode\000", "add_input\000", 83702148)
		methodAnimationNode[3] = gdnative.MethodOf("AnimationNode\000", "remove_input\000", 1286410249)
		methodAnimationNode[4] = gdnative.MethodOf("AnimationNode\000", "set_filter_path\000", 3868023870)
		methodAnimationNode[5] = gdnative.MethodOf("AnimationNode\000", "is_path_filtered\000", 861721659)
		methodAnimationNode[6] = gdnative.MethodOf("AnimationNode\000", "set_filter_enabled\000", 2586408642)
		methodAnimationNode[7] = gdnative.MethodOf("AnimationNode\000", "is_filter_enabled\000", 36873697)
		methodAnimationNode[8] = gdnative.MethodOf("AnimationNode\000", "blend_animation\000", 592042552)
		methodAnimationNode[9] = gdnative.MethodOf("AnimationNode\000", "blend_node\000", 308530085)
		methodAnimationNode[10] = gdnative.MethodOf("AnimationNode\000", "blend_input\000", 1365393708)
		methodAnimationNode[11] = gdnative.MethodOf("AnimationNode\000", "set_parameter\000", 3776071444)
		methodAnimationNode[12] = gdnative.MethodOf("AnimationNode\000", "get_parameter\000", 2760726917)
		methodAnimationNodeAnimation[0] = gdnative.MethodOf("AnimationNodeAnimation\000", "set_animation\000", 3304788590)
		methodAnimationNodeAnimation[1] = gdnative.MethodOf("AnimationNodeAnimation\000", "get_animation\000", 2002593661)
		methodAnimationNodeAnimation[2] = gdnative.MethodOf("AnimationNodeAnimation\000", "set_play_mode\000", 3347718873)
		methodAnimationNodeAnimation[3] = gdnative.MethodOf("AnimationNodeAnimation\000", "get_play_mode\000", 2061244637)
		methodAnimationNodeBlendSpace1D[0] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "add_blend_point\000", 4069484420)
		methodAnimationNodeBlendSpace1D[1] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_blend_point_position\000", 1602489585)
		methodAnimationNodeBlendSpace1D[2] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_blend_point_position\000", 2339986948)
		methodAnimationNodeBlendSpace1D[3] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_blend_point_node\000", 4240341528)
		methodAnimationNodeBlendSpace1D[4] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_blend_point_node\000", 665599029)
		methodAnimationNodeBlendSpace1D[5] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "remove_blend_point\000", 1286410249)
		methodAnimationNodeBlendSpace1D[6] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_blend_point_count\000", 3905245786)
		methodAnimationNodeBlendSpace1D[7] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_min_space\000", 373806689)
		methodAnimationNodeBlendSpace1D[8] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_min_space\000", 1740695150)
		methodAnimationNodeBlendSpace1D[9] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_max_space\000", 373806689)
		methodAnimationNodeBlendSpace1D[10] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_max_space\000", 1740695150)
		methodAnimationNodeBlendSpace1D[11] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_snap\000", 373806689)
		methodAnimationNodeBlendSpace1D[12] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_snap\000", 1740695150)
		methodAnimationNodeBlendSpace1D[13] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_value_label\000", 83702148)
		methodAnimationNodeBlendSpace1D[14] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "get_value_label\000", 201670096)
		methodAnimationNodeBlendSpace1D[15] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeBlendSpace1D[16] = gdnative.MethodOf("AnimationNodeBlendSpace1D\000", "is_using_sync\000", 36873697)
		methodAnimationNodeBlendSpace2D[0] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "add_blend_point\000", 1533588937)
		methodAnimationNodeBlendSpace2D[1] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_blend_point_position\000", 163021252)
		methodAnimationNodeBlendSpace2D[2] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_blend_point_position\000", 2299179447)
		methodAnimationNodeBlendSpace2D[3] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_blend_point_node\000", 4240341528)
		methodAnimationNodeBlendSpace2D[4] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_blend_point_node\000", 665599029)
		methodAnimationNodeBlendSpace2D[5] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "remove_blend_point\000", 1286410249)
		methodAnimationNodeBlendSpace2D[6] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_blend_point_count\000", 3905245786)
		methodAnimationNodeBlendSpace2D[7] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "add_triangle\000", 642454959)
		methodAnimationNodeBlendSpace2D[8] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_triangle_point\000", 50157827)
		methodAnimationNodeBlendSpace2D[9] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "remove_triangle\000", 1286410249)
		methodAnimationNodeBlendSpace2D[10] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_triangle_count\000", 3905245786)
		methodAnimationNodeBlendSpace2D[11] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_min_space\000", 743155724)
		methodAnimationNodeBlendSpace2D[12] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_min_space\000", 3341600327)
		methodAnimationNodeBlendSpace2D[13] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_max_space\000", 743155724)
		methodAnimationNodeBlendSpace2D[14] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_max_space\000", 3341600327)
		methodAnimationNodeBlendSpace2D[15] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_snap\000", 743155724)
		methodAnimationNodeBlendSpace2D[16] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_snap\000", 3341600327)
		methodAnimationNodeBlendSpace2D[17] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_x_label\000", 83702148)
		methodAnimationNodeBlendSpace2D[18] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_x_label\000", 201670096)
		methodAnimationNodeBlendSpace2D[19] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_y_label\000", 83702148)
		methodAnimationNodeBlendSpace2D[20] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_y_label\000", 201670096)
		methodAnimationNodeBlendSpace2D[21] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_auto_triangles\000", 2586408642)
		methodAnimationNodeBlendSpace2D[22] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_auto_triangles\000", 36873697)
		methodAnimationNodeBlendSpace2D[23] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_blend_mode\000", 81193520)
		methodAnimationNodeBlendSpace2D[24] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "get_blend_mode\000", 1398433632)
		methodAnimationNodeBlendSpace2D[25] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeBlendSpace2D[26] = gdnative.MethodOf("AnimationNodeBlendSpace2D\000", "is_using_sync\000", 36873697)
		methodAnimationNodeBlendTree[0] = gdnative.MethodOf("AnimationNodeBlendTree\000", "add_node\000", 2055804584)
		methodAnimationNodeBlendTree[1] = gdnative.MethodOf("AnimationNodeBlendTree\000", "get_node\000", 625644256)
		methodAnimationNodeBlendTree[2] = gdnative.MethodOf("AnimationNodeBlendTree\000", "remove_node\000", 3304788590)
		methodAnimationNodeBlendTree[3] = gdnative.MethodOf("AnimationNodeBlendTree\000", "rename_node\000", 3740211285)
		methodAnimationNodeBlendTree[4] = gdnative.MethodOf("AnimationNodeBlendTree\000", "has_node\000", 2619796661)
		methodAnimationNodeBlendTree[5] = gdnative.MethodOf("AnimationNodeBlendTree\000", "connect_node\000", 2168001410)
		methodAnimationNodeBlendTree[6] = gdnative.MethodOf("AnimationNodeBlendTree\000", "disconnect_node\000", 2415702435)
		methodAnimationNodeBlendTree[7] = gdnative.MethodOf("AnimationNodeBlendTree\000", "set_node_position\000", 1999414630)
		methodAnimationNodeBlendTree[8] = gdnative.MethodOf("AnimationNodeBlendTree\000", "get_node_position\000", 3100822709)
		methodAnimationNodeBlendTree[9] = gdnative.MethodOf("AnimationNodeBlendTree\000", "set_graph_offset\000", 743155724)
		methodAnimationNodeBlendTree[10] = gdnative.MethodOf("AnimationNodeBlendTree\000", "get_graph_offset\000", 3341600327)
		methodAnimationNodeOneShot[0] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_fadein_time\000", 373806689)
		methodAnimationNodeOneShot[1] = gdnative.MethodOf("AnimationNodeOneShot\000", "get_fadein_time\000", 1740695150)
		methodAnimationNodeOneShot[2] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_fadeout_time\000", 373806689)
		methodAnimationNodeOneShot[3] = gdnative.MethodOf("AnimationNodeOneShot\000", "get_fadeout_time\000", 1740695150)
		methodAnimationNodeOneShot[4] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_autorestart\000", 2586408642)
		methodAnimationNodeOneShot[5] = gdnative.MethodOf("AnimationNodeOneShot\000", "has_autorestart\000", 36873697)
		methodAnimationNodeOneShot[6] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_autorestart_delay\000", 373806689)
		methodAnimationNodeOneShot[7] = gdnative.MethodOf("AnimationNodeOneShot\000", "get_autorestart_delay\000", 1740695150)
		methodAnimationNodeOneShot[8] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_autorestart_random_delay\000", 373806689)
		methodAnimationNodeOneShot[9] = gdnative.MethodOf("AnimationNodeOneShot\000", "get_autorestart_random_delay\000", 1740695150)
		methodAnimationNodeOneShot[10] = gdnative.MethodOf("AnimationNodeOneShot\000", "set_mix_mode\000", 1018899799)
		methodAnimationNodeOneShot[11] = gdnative.MethodOf("AnimationNodeOneShot\000", "get_mix_mode\000", 3076550526)
		methodAnimationNodeStateMachine[0] = gdnative.MethodOf("AnimationNodeStateMachine\000", "add_node\000", 2055804584)
		methodAnimationNodeStateMachine[1] = gdnative.MethodOf("AnimationNodeStateMachine\000", "replace_node\000", 2559412862)
		methodAnimationNodeStateMachine[2] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_node\000", 625644256)
		methodAnimationNodeStateMachine[3] = gdnative.MethodOf("AnimationNodeStateMachine\000", "remove_node\000", 3304788590)
		methodAnimationNodeStateMachine[4] = gdnative.MethodOf("AnimationNodeStateMachine\000", "rename_node\000", 3740211285)
		methodAnimationNodeStateMachine[5] = gdnative.MethodOf("AnimationNodeStateMachine\000", "has_node\000", 2619796661)
		methodAnimationNodeStateMachine[6] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_node_name\000", 739213945)
		methodAnimationNodeStateMachine[7] = gdnative.MethodOf("AnimationNodeStateMachine\000", "set_node_position\000", 1999414630)
		methodAnimationNodeStateMachine[8] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_node_position\000", 3100822709)
		methodAnimationNodeStateMachine[9] = gdnative.MethodOf("AnimationNodeStateMachine\000", "has_transition\000", 471820014)
		methodAnimationNodeStateMachine[10] = gdnative.MethodOf("AnimationNodeStateMachine\000", "add_transition\000", 795486887)
		methodAnimationNodeStateMachine[11] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_transition\000", 4192381260)
		methodAnimationNodeStateMachine[12] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_transition_from\000", 659327637)
		methodAnimationNodeStateMachine[13] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_transition_to\000", 659327637)
		methodAnimationNodeStateMachine[14] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_transition_count\000", 3905245786)
		methodAnimationNodeStateMachine[15] = gdnative.MethodOf("AnimationNodeStateMachine\000", "remove_transition_by_index\000", 1286410249)
		methodAnimationNodeStateMachine[16] = gdnative.MethodOf("AnimationNodeStateMachine\000", "remove_transition\000", 3740211285)
		methodAnimationNodeStateMachine[17] = gdnative.MethodOf("AnimationNodeStateMachine\000", "set_graph_offset\000", 743155724)
		methodAnimationNodeStateMachine[18] = gdnative.MethodOf("AnimationNodeStateMachine\000", "get_graph_offset\000", 3341600327)
		methodAnimationNodeStateMachinePlayback[0] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "travel\000", 3304788590)
		methodAnimationNodeStateMachinePlayback[1] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "start\000", 3304788590)
		methodAnimationNodeStateMachinePlayback[2] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "stop\000", 3218959716)
		methodAnimationNodeStateMachinePlayback[3] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "is_playing\000", 36873697)
		methodAnimationNodeStateMachinePlayback[4] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "get_current_node\000", 2002593661)
		methodAnimationNodeStateMachinePlayback[5] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "get_current_play_position\000", 1740695150)
		methodAnimationNodeStateMachinePlayback[6] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "get_current_length\000", 1740695150)
		methodAnimationNodeStateMachinePlayback[7] = gdnative.MethodOf("AnimationNodeStateMachinePlayback\000", "get_travel_path\000", 1139954409)
		methodAnimationNodeStateMachineTransition[0] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_switch_mode\000", 2074906633)
		methodAnimationNodeStateMachineTransition[1] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_switch_mode\000", 2138562085)
		methodAnimationNodeStateMachineTransition[2] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_auto_advance\000", 2586408642)
		methodAnimationNodeStateMachineTransition[3] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "has_auto_advance\000", 36873697)
		methodAnimationNodeStateMachineTransition[4] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_advance_condition\000", 3304788590)
		methodAnimationNodeStateMachineTransition[5] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_advance_condition\000", 2002593661)
		methodAnimationNodeStateMachineTransition[6] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_xfade_time\000", 373806689)
		methodAnimationNodeStateMachineTransition[7] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_xfade_time\000", 1740695150)
		methodAnimationNodeStateMachineTransition[8] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_disabled\000", 2586408642)
		methodAnimationNodeStateMachineTransition[9] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "is_disabled\000", 36873697)
		methodAnimationNodeStateMachineTransition[10] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_priority\000", 1286410249)
		methodAnimationNodeStateMachineTransition[11] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_priority\000", 3905245786)
		methodAnimationNodeStateMachineTransition[12] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_advance_expression\000", 83702148)
		methodAnimationNodeStateMachineTransition[13] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_advance_expression\000", 201670096)
		methodAnimationNodeStateMachineTransition[14] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "set_advance_expression_base_node\000", 1348162250)
		methodAnimationNodeStateMachineTransition[15] = gdnative.MethodOf("AnimationNodeStateMachineTransition\000", "get_advance_expression_base_node\000", 4075236667)
		methodAnimationNodeSync[0] = gdnative.MethodOf("AnimationNodeSync\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeSync[1] = gdnative.MethodOf("AnimationNodeSync\000", "is_using_sync\000", 36873697)
		methodAnimationNodeTransition[0] = gdnative.MethodOf("AnimationNodeTransition\000", "set_enabled_inputs\000", 1286410249)
		methodAnimationNodeTransition[1] = gdnative.MethodOf("AnimationNodeTransition\000", "get_enabled_inputs\000", 2455072627)
		methodAnimationNodeTransition[2] = gdnative.MethodOf("AnimationNodeTransition\000", "set_input_as_auto_advance\000", 300928843)
		methodAnimationNodeTransition[3] = gdnative.MethodOf("AnimationNodeTransition\000", "is_input_set_as_auto_advance\000", 1116898809)
		methodAnimationNodeTransition[4] = gdnative.MethodOf("AnimationNodeTransition\000", "set_input_caption\000", 501894301)
		methodAnimationNodeTransition[5] = gdnative.MethodOf("AnimationNodeTransition\000", "get_input_caption\000", 844755477)
		methodAnimationNodeTransition[6] = gdnative.MethodOf("AnimationNodeTransition\000", "set_cross_fade_time\000", 373806689)
		methodAnimationNodeTransition[7] = gdnative.MethodOf("AnimationNodeTransition\000", "get_cross_fade_time\000", 1740695150)
		methodAnimationNodeTransition[8] = gdnative.MethodOf("AnimationNodeTransition\000", "set_from_start\000", 2586408642)
		methodAnimationNodeTransition[9] = gdnative.MethodOf("AnimationNodeTransition\000", "is_from_start\000", 36873697)
		methodAnimationPlayer[0] = gdnative.MethodOf("AnimationPlayer\000", "add_animation_library\000", 618909818)
		methodAnimationPlayer[1] = gdnative.MethodOf("AnimationPlayer\000", "remove_animation_library\000", 3304788590)
		methodAnimationPlayer[2] = gdnative.MethodOf("AnimationPlayer\000", "rename_animation_library\000", 3740211285)
		methodAnimationPlayer[3] = gdnative.MethodOf("AnimationPlayer\000", "has_animation_library\000", 2619796661)
		methodAnimationPlayer[4] = gdnative.MethodOf("AnimationPlayer\000", "get_animation_library\000", 147342321)
		methodAnimationPlayer[5] = gdnative.MethodOf("AnimationPlayer\000", "get_animation_library_list\000", 3995934104)
		methodAnimationPlayer[6] = gdnative.MethodOf("AnimationPlayer\000", "has_animation\000", 2619796661)
		methodAnimationPlayer[7] = gdnative.MethodOf("AnimationPlayer\000", "get_animation\000", 2933122410)
		methodAnimationPlayer[8] = gdnative.MethodOf("AnimationPlayer\000", "get_animation_list\000", 1139954409)
		methodAnimationPlayer[9] = gdnative.MethodOf("AnimationPlayer\000", "animation_set_next\000", 3740211285)
		methodAnimationPlayer[10] = gdnative.MethodOf("AnimationPlayer\000", "animation_get_next\000", 1965194235)
		methodAnimationPlayer[11] = gdnative.MethodOf("AnimationPlayer\000", "set_blend_time\000", 3231131886)
		methodAnimationPlayer[12] = gdnative.MethodOf("AnimationPlayer\000", "get_blend_time\000", 1958752504)
		methodAnimationPlayer[13] = gdnative.MethodOf("AnimationPlayer\000", "set_default_blend_time\000", 373806689)
		methodAnimationPlayer[14] = gdnative.MethodOf("AnimationPlayer\000", "get_default_blend_time\000", 1740695150)
		methodAnimationPlayer[15] = gdnative.MethodOf("AnimationPlayer\000", "play\000", 2221377757)
		methodAnimationPlayer[16] = gdnative.MethodOf("AnimationPlayer\000", "play_backwards\000", 2787282401)
		methodAnimationPlayer[17] = gdnative.MethodOf("AnimationPlayer\000", "stop\000", 3216645846)
		methodAnimationPlayer[18] = gdnative.MethodOf("AnimationPlayer\000", "is_playing\000", 36873697)
		methodAnimationPlayer[19] = gdnative.MethodOf("AnimationPlayer\000", "set_current_animation\000", 83702148)
		methodAnimationPlayer[20] = gdnative.MethodOf("AnimationPlayer\000", "get_current_animation\000", 201670096)
		methodAnimationPlayer[21] = gdnative.MethodOf("AnimationPlayer\000", "set_assigned_animation\000", 83702148)
		methodAnimationPlayer[22] = gdnative.MethodOf("AnimationPlayer\000", "get_assigned_animation\000", 201670096)
		methodAnimationPlayer[23] = gdnative.MethodOf("AnimationPlayer\000", "queue\000", 3304788590)
		methodAnimationPlayer[24] = gdnative.MethodOf("AnimationPlayer\000", "get_queue\000", 2981934095)
		methodAnimationPlayer[25] = gdnative.MethodOf("AnimationPlayer\000", "clear_queue\000", 3218959716)
		methodAnimationPlayer[26] = gdnative.MethodOf("AnimationPlayer\000", "set_active\000", 2586408642)
		methodAnimationPlayer[27] = gdnative.MethodOf("AnimationPlayer\000", "is_active\000", 36873697)
		methodAnimationPlayer[28] = gdnative.MethodOf("AnimationPlayer\000", "set_speed_scale\000", 373806689)
		methodAnimationPlayer[29] = gdnative.MethodOf("AnimationPlayer\000", "get_speed_scale\000", 1740695150)
		methodAnimationPlayer[30] = gdnative.MethodOf("AnimationPlayer\000", "get_playing_speed\000", 1740695150)
		methodAnimationPlayer[31] = gdnative.MethodOf("AnimationPlayer\000", "set_autoplay\000", 83702148)
		methodAnimationPlayer[32] = gdnative.MethodOf("AnimationPlayer\000", "get_autoplay\000", 201670096)
		methodAnimationPlayer[33] = gdnative.MethodOf("AnimationPlayer\000", "set_reset_on_save_enabled\000", 2586408642)
		methodAnimationPlayer[34] = gdnative.MethodOf("AnimationPlayer\000", "is_reset_on_save_enabled\000", 36873697)
		methodAnimationPlayer[35] = gdnative.MethodOf("AnimationPlayer\000", "set_root\000", 1348162250)
		methodAnimationPlayer[36] = gdnative.MethodOf("AnimationPlayer\000", "get_root\000", 4075236667)
		methodAnimationPlayer[37] = gdnative.MethodOf("AnimationPlayer\000", "find_animation\000", 1559484580)
		methodAnimationPlayer[38] = gdnative.MethodOf("AnimationPlayer\000", "find_animation_library\000", 1559484580)
		methodAnimationPlayer[39] = gdnative.MethodOf("AnimationPlayer\000", "clear_caches\000", 3218959716)
		methodAnimationPlayer[40] = gdnative.MethodOf("AnimationPlayer\000", "set_process_callback\000", 1663839457)
		methodAnimationPlayer[41] = gdnative.MethodOf("AnimationPlayer\000", "get_process_callback\000", 4207496604)
		methodAnimationPlayer[42] = gdnative.MethodOf("AnimationPlayer\000", "set_method_call_mode\000", 3413514846)
		methodAnimationPlayer[43] = gdnative.MethodOf("AnimationPlayer\000", "get_method_call_mode\000", 3583380054)
		methodAnimationPlayer[44] = gdnative.MethodOf("AnimationPlayer\000", "set_movie_quit_on_finish_enabled\000", 2586408642)
		methodAnimationPlayer[45] = gdnative.MethodOf("AnimationPlayer\000", "is_movie_quit_on_finish_enabled\000", 36873697)
		methodAnimationPlayer[46] = gdnative.MethodOf("AnimationPlayer\000", "get_current_animation_position\000", 1740695150)
		methodAnimationPlayer[47] = gdnative.MethodOf("AnimationPlayer\000", "get_current_animation_length\000", 1740695150)
		methodAnimationPlayer[48] = gdnative.MethodOf("AnimationPlayer\000", "seek\000", 2087892650)
		methodAnimationPlayer[49] = gdnative.MethodOf("AnimationPlayer\000", "advance\000", 373806689)
		methodAnimationTree[0] = gdnative.MethodOf("AnimationTree\000", "set_active\000", 2586408642)
		methodAnimationTree[1] = gdnative.MethodOf("AnimationTree\000", "is_active\000", 36873697)
		methodAnimationTree[2] = gdnative.MethodOf("AnimationTree\000", "set_tree_root\000", 712869711)
		methodAnimationTree[3] = gdnative.MethodOf("AnimationTree\000", "get_tree_root\000", 1462070895)
		methodAnimationTree[4] = gdnative.MethodOf("AnimationTree\000", "set_process_callback\000", 1723352826)
		methodAnimationTree[5] = gdnative.MethodOf("AnimationTree\000", "get_process_callback\000", 891317132)
		methodAnimationTree[6] = gdnative.MethodOf("AnimationTree\000", "set_animation_player\000", 1348162250)
		methodAnimationTree[7] = gdnative.MethodOf("AnimationTree\000", "get_animation_player\000", 4075236667)
		methodAnimationTree[8] = gdnative.MethodOf("AnimationTree\000", "set_advance_expression_base_node\000", 1348162250)
		methodAnimationTree[9] = gdnative.MethodOf("AnimationTree\000", "get_advance_expression_base_node\000", 4075236667)
		methodAnimationTree[10] = gdnative.MethodOf("AnimationTree\000", "set_root_motion_track\000", 1348162250)
		methodAnimationTree[11] = gdnative.MethodOf("AnimationTree\000", "get_root_motion_track\000", 4075236667)
		methodAnimationTree[12] = gdnative.MethodOf("AnimationTree\000", "get_root_motion_transform\000", 3229777777)
		methodAnimationTree[13] = gdnative.MethodOf("AnimationTree\000", "rename_parameter\000", 3186203200)
		methodAnimationTree[14] = gdnative.MethodOf("AnimationTree\000", "advance\000", 373806689)
		methodArea2D[0] = gdnative.MethodOf("Area2D\000", "set_gravity_space_override_mode\000", 2879900038)
		methodArea2D[1] = gdnative.MethodOf("Area2D\000", "get_gravity_space_override_mode\000", 3990256304)
		methodArea2D[2] = gdnative.MethodOf("Area2D\000", "set_gravity_is_point\000", 2586408642)
		methodArea2D[3] = gdnative.MethodOf("Area2D\000", "is_gravity_a_point\000", 36873697)
		methodArea2D[4] = gdnative.MethodOf("Area2D\000", "set_gravity_point_distance_scale\000", 373806689)
		methodArea2D[5] = gdnative.MethodOf("Area2D\000", "get_gravity_point_distance_scale\000", 1740695150)
		methodArea2D[6] = gdnative.MethodOf("Area2D\000", "set_gravity_point_center\000", 743155724)
		methodArea2D[7] = gdnative.MethodOf("Area2D\000", "get_gravity_point_center\000", 3341600327)
		methodArea2D[8] = gdnative.MethodOf("Area2D\000", "set_gravity_direction\000", 743155724)
		methodArea2D[9] = gdnative.MethodOf("Area2D\000", "get_gravity_direction\000", 3341600327)
		methodArea2D[10] = gdnative.MethodOf("Area2D\000", "set_gravity\000", 373806689)
		methodArea2D[11] = gdnative.MethodOf("Area2D\000", "get_gravity\000", 1740695150)
		methodArea2D[12] = gdnative.MethodOf("Area2D\000", "set_linear_damp_space_override_mode\000", 2879900038)
		methodArea2D[13] = gdnative.MethodOf("Area2D\000", "get_linear_damp_space_override_mode\000", 3990256304)
		methodArea2D[14] = gdnative.MethodOf("Area2D\000", "set_angular_damp_space_override_mode\000", 2879900038)
		methodArea2D[15] = gdnative.MethodOf("Area2D\000", "get_angular_damp_space_override_mode\000", 3990256304)
		methodArea2D[16] = gdnative.MethodOf("Area2D\000", "set_linear_damp\000", 373806689)
		methodArea2D[17] = gdnative.MethodOf("Area2D\000", "get_linear_damp\000", 1740695150)
		methodArea2D[18] = gdnative.MethodOf("Area2D\000", "set_angular_damp\000", 373806689)
		methodArea2D[19] = gdnative.MethodOf("Area2D\000", "get_angular_damp\000", 1740695150)
		methodArea2D[20] = gdnative.MethodOf("Area2D\000", "set_priority\000", 373806689)
		methodArea2D[21] = gdnative.MethodOf("Area2D\000", "get_priority\000", 1740695150)
		methodArea2D[22] = gdnative.MethodOf("Area2D\000", "set_monitoring\000", 2586408642)
		methodArea2D[23] = gdnative.MethodOf("Area2D\000", "is_monitoring\000", 36873697)
		methodArea2D[24] = gdnative.MethodOf("Area2D\000", "set_monitorable\000", 2586408642)
		methodArea2D[25] = gdnative.MethodOf("Area2D\000", "is_monitorable\000", 36873697)
		methodArea2D[26] = gdnative.MethodOf("Area2D\000", "get_overlapping_bodies\000", 3995934104)
		methodArea2D[27] = gdnative.MethodOf("Area2D\000", "get_overlapping_areas\000", 3995934104)
		methodArea2D[28] = gdnative.MethodOf("Area2D\000", "overlaps_body\000", 3093956946)
		methodArea2D[29] = gdnative.MethodOf("Area2D\000", "overlaps_area\000", 3093956946)
		methodArea2D[30] = gdnative.MethodOf("Area2D\000", "set_audio_bus_name\000", 3304788590)
		methodArea2D[31] = gdnative.MethodOf("Area2D\000", "get_audio_bus_name\000", 2002593661)
		methodArea2D[32] = gdnative.MethodOf("Area2D\000", "set_audio_bus_override\000", 2586408642)
		methodArea2D[33] = gdnative.MethodOf("Area2D\000", "is_overriding_audio_bus\000", 36873697)
		methodArea3D[0] = gdnative.MethodOf("Area3D\000", "set_gravity_space_override_mode\000", 2311433571)
		methodArea3D[1] = gdnative.MethodOf("Area3D\000", "get_gravity_space_override_mode\000", 958191869)
		methodArea3D[2] = gdnative.MethodOf("Area3D\000", "set_gravity_is_point\000", 2586408642)
		methodArea3D[3] = gdnative.MethodOf("Area3D\000", "is_gravity_a_point\000", 36873697)
		methodArea3D[4] = gdnative.MethodOf("Area3D\000", "set_gravity_point_distance_scale\000", 373806689)
		methodArea3D[5] = gdnative.MethodOf("Area3D\000", "get_gravity_point_distance_scale\000", 1740695150)
		methodArea3D[6] = gdnative.MethodOf("Area3D\000", "set_gravity_point_center\000", 3460891852)
		methodArea3D[7] = gdnative.MethodOf("Area3D\000", "get_gravity_point_center\000", 3360562783)
		methodArea3D[8] = gdnative.MethodOf("Area3D\000", "set_gravity_direction\000", 3460891852)
		methodArea3D[9] = gdnative.MethodOf("Area3D\000", "get_gravity_direction\000", 3360562783)
		methodArea3D[10] = gdnative.MethodOf("Area3D\000", "set_gravity\000", 373806689)
		methodArea3D[11] = gdnative.MethodOf("Area3D\000", "get_gravity\000", 1740695150)
		methodArea3D[12] = gdnative.MethodOf("Area3D\000", "set_linear_damp_space_override_mode\000", 2311433571)
		methodArea3D[13] = gdnative.MethodOf("Area3D\000", "get_linear_damp_space_override_mode\000", 958191869)
		methodArea3D[14] = gdnative.MethodOf("Area3D\000", "set_angular_damp_space_override_mode\000", 2311433571)
		methodArea3D[15] = gdnative.MethodOf("Area3D\000", "get_angular_damp_space_override_mode\000", 958191869)
		methodArea3D[16] = gdnative.MethodOf("Area3D\000", "set_angular_damp\000", 373806689)
		methodArea3D[17] = gdnative.MethodOf("Area3D\000", "get_angular_damp\000", 1740695150)
		methodArea3D[18] = gdnative.MethodOf("Area3D\000", "set_linear_damp\000", 373806689)
		methodArea3D[19] = gdnative.MethodOf("Area3D\000", "get_linear_damp\000", 1740695150)
		methodArea3D[20] = gdnative.MethodOf("Area3D\000", "set_priority\000", 373806689)
		methodArea3D[21] = gdnative.MethodOf("Area3D\000", "get_priority\000", 1740695150)
		methodArea3D[22] = gdnative.MethodOf("Area3D\000", "set_wind_force_magnitude\000", 373806689)
		methodArea3D[23] = gdnative.MethodOf("Area3D\000", "get_wind_force_magnitude\000", 1740695150)
		methodArea3D[24] = gdnative.MethodOf("Area3D\000", "set_wind_attenuation_factor\000", 373806689)
		methodArea3D[25] = gdnative.MethodOf("Area3D\000", "get_wind_attenuation_factor\000", 1740695150)
		methodArea3D[26] = gdnative.MethodOf("Area3D\000", "set_wind_source_path\000", 1348162250)
		methodArea3D[27] = gdnative.MethodOf("Area3D\000", "get_wind_source_path\000", 4075236667)
		methodArea3D[28] = gdnative.MethodOf("Area3D\000", "set_monitorable\000", 2586408642)
		methodArea3D[29] = gdnative.MethodOf("Area3D\000", "is_monitorable\000", 36873697)
		methodArea3D[30] = gdnative.MethodOf("Area3D\000", "set_monitoring\000", 2586408642)
		methodArea3D[31] = gdnative.MethodOf("Area3D\000", "is_monitoring\000", 36873697)
		methodArea3D[32] = gdnative.MethodOf("Area3D\000", "get_overlapping_bodies\000", 3995934104)
		methodArea3D[33] = gdnative.MethodOf("Area3D\000", "get_overlapping_areas\000", 3995934104)
		methodArea3D[34] = gdnative.MethodOf("Area3D\000", "overlaps_body\000", 3093956946)
		methodArea3D[35] = gdnative.MethodOf("Area3D\000", "overlaps_area\000", 3093956946)
		methodArea3D[36] = gdnative.MethodOf("Area3D\000", "set_audio_bus_override\000", 2586408642)
		methodArea3D[37] = gdnative.MethodOf("Area3D\000", "is_overriding_audio_bus\000", 36873697)
		methodArea3D[38] = gdnative.MethodOf("Area3D\000", "set_audio_bus_name\000", 3304788590)
		methodArea3D[39] = gdnative.MethodOf("Area3D\000", "get_audio_bus_name\000", 2002593661)
		methodArea3D[40] = gdnative.MethodOf("Area3D\000", "set_use_reverb_bus\000", 2586408642)
		methodArea3D[41] = gdnative.MethodOf("Area3D\000", "is_using_reverb_bus\000", 36873697)
		methodArea3D[42] = gdnative.MethodOf("Area3D\000", "set_reverb_bus\000", 3304788590)
		methodArea3D[43] = gdnative.MethodOf("Area3D\000", "get_reverb_bus\000", 2002593661)
		methodArea3D[44] = gdnative.MethodOf("Area3D\000", "set_reverb_amount\000", 373806689)
		methodArea3D[45] = gdnative.MethodOf("Area3D\000", "get_reverb_amount\000", 1740695150)
		methodArea3D[46] = gdnative.MethodOf("Area3D\000", "set_reverb_uniformity\000", 373806689)
		methodArea3D[47] = gdnative.MethodOf("Area3D\000", "get_reverb_uniformity\000", 1740695150)
		methodArrayMesh[0] = gdnative.MethodOf("ArrayMesh\000", "add_blend_shape\000", 3304788590)
		methodArrayMesh[1] = gdnative.MethodOf("ArrayMesh\000", "get_blend_shape_count\000", 3905245786)
		methodArrayMesh[2] = gdnative.MethodOf("ArrayMesh\000", "get_blend_shape_name\000", 659327637)
		methodArrayMesh[3] = gdnative.MethodOf("ArrayMesh\000", "set_blend_shape_name\000", 3780747571)
		methodArrayMesh[4] = gdnative.MethodOf("ArrayMesh\000", "clear_blend_shapes\000", 3218959716)
		methodArrayMesh[5] = gdnative.MethodOf("ArrayMesh\000", "set_blend_shape_mode\000", 227983991)
		methodArrayMesh[6] = gdnative.MethodOf("ArrayMesh\000", "get_blend_shape_mode\000", 836485024)
		methodArrayMesh[7] = gdnative.MethodOf("ArrayMesh\000", "add_surface_from_arrays\000", 2970484840)
		methodArrayMesh[8] = gdnative.MethodOf("ArrayMesh\000", "clear_surfaces\000", 3218959716)
		methodArrayMesh[9] = gdnative.MethodOf("ArrayMesh\000", "surface_update_vertex_region\000", 3837166854)
		methodArrayMesh[10] = gdnative.MethodOf("ArrayMesh\000", "surface_update_attribute_region\000", 3837166854)
		methodArrayMesh[11] = gdnative.MethodOf("ArrayMesh\000", "surface_update_skin_region\000", 3837166854)
		methodArrayMesh[12] = gdnative.MethodOf("ArrayMesh\000", "surface_get_array_len\000", 923996154)
		methodArrayMesh[13] = gdnative.MethodOf("ArrayMesh\000", "surface_get_array_index_len\000", 923996154)
		methodArrayMesh[14] = gdnative.MethodOf("ArrayMesh\000", "surface_get_format\000", 923996154)
		methodArrayMesh[15] = gdnative.MethodOf("ArrayMesh\000", "surface_get_primitive_type\000", 4141943888)
		methodArrayMesh[16] = gdnative.MethodOf("ArrayMesh\000", "surface_find_by_name\000", 1321353865)
		methodArrayMesh[17] = gdnative.MethodOf("ArrayMesh\000", "surface_set_name\000", 501894301)
		methodArrayMesh[18] = gdnative.MethodOf("ArrayMesh\000", "surface_get_name\000", 844755477)
		methodArrayMesh[19] = gdnative.MethodOf("ArrayMesh\000", "regen_normal_maps\000", 3218959716)
		methodArrayMesh[20] = gdnative.MethodOf("ArrayMesh\000", "lightmap_unwrap\000", 1476641071)
		methodArrayMesh[21] = gdnative.MethodOf("ArrayMesh\000", "set_custom_aabb\000", 259215842)
		methodArrayMesh[22] = gdnative.MethodOf("ArrayMesh\000", "get_custom_aabb\000", 1068685055)
		methodArrayMesh[23] = gdnative.MethodOf("ArrayMesh\000", "set_shadow_mesh\000", 3377897901)
		methodArrayMesh[24] = gdnative.MethodOf("ArrayMesh\000", "get_shadow_mesh\000", 3206942465)
		methodArrayOccluder3D[0] = gdnative.MethodOf("ArrayOccluder3D\000", "set_arrays\000", 3233972621)
		methodArrayOccluder3D[1] = gdnative.MethodOf("ArrayOccluder3D\000", "set_vertices\000", 334873810)
		methodArrayOccluder3D[2] = gdnative.MethodOf("ArrayOccluder3D\000", "set_indices\000", 3614634198)
		methodAspectRatioContainer[0] = gdnative.MethodOf("AspectRatioContainer\000", "set_ratio\000", 373806689)
		methodAspectRatioContainer[1] = gdnative.MethodOf("AspectRatioContainer\000", "get_ratio\000", 1740695150)
		methodAspectRatioContainer[2] = gdnative.MethodOf("AspectRatioContainer\000", "set_stretch_mode\000", 1876743467)
		methodAspectRatioContainer[3] = gdnative.MethodOf("AspectRatioContainer\000", "get_stretch_mode\000", 3416449033)
		methodAspectRatioContainer[4] = gdnative.MethodOf("AspectRatioContainer\000", "set_alignment_horizontal\000", 2147829016)
		methodAspectRatioContainer[5] = gdnative.MethodOf("AspectRatioContainer\000", "get_alignment_horizontal\000", 3838875429)
		methodAspectRatioContainer[6] = gdnative.MethodOf("AspectRatioContainer\000", "set_alignment_vertical\000", 2147829016)
		methodAspectRatioContainer[7] = gdnative.MethodOf("AspectRatioContainer\000", "get_alignment_vertical\000", 3838875429)
		methodAtlasTexture[0] = gdnative.MethodOf("AtlasTexture\000", "set_atlas\000", 4051416890)
		methodAtlasTexture[1] = gdnative.MethodOf("AtlasTexture\000", "get_atlas\000", 3635182373)
		methodAtlasTexture[2] = gdnative.MethodOf("AtlasTexture\000", "set_region\000", 2046264180)
		methodAtlasTexture[3] = gdnative.MethodOf("AtlasTexture\000", "get_region\000", 1639390495)
		methodAtlasTexture[4] = gdnative.MethodOf("AtlasTexture\000", "set_margin\000", 2046264180)
		methodAtlasTexture[5] = gdnative.MethodOf("AtlasTexture\000", "get_margin\000", 1639390495)
		methodAtlasTexture[6] = gdnative.MethodOf("AtlasTexture\000", "set_filter_clip\000", 2586408642)
		methodAtlasTexture[7] = gdnative.MethodOf("AtlasTexture\000", "has_filter_clip\000", 36873697)
		methodAudioEffectAmplify[0] = gdnative.MethodOf("AudioEffectAmplify\000", "set_volume_db\000", 373806689)
		methodAudioEffectAmplify[1] = gdnative.MethodOf("AudioEffectAmplify\000", "get_volume_db\000", 1740695150)
		methodAudioEffectCapture[0] = gdnative.MethodOf("AudioEffectCapture\000", "can_get_buffer\000", 1116898809)
		methodAudioEffectCapture[1] = gdnative.MethodOf("AudioEffectCapture\000", "get_buffer\000", 2649534757)
		methodAudioEffectCapture[2] = gdnative.MethodOf("AudioEffectCapture\000", "clear_buffer\000", 3218959716)
		methodAudioEffectCapture[3] = gdnative.MethodOf("AudioEffectCapture\000", "set_buffer_length\000", 373806689)
		methodAudioEffectCapture[4] = gdnative.MethodOf("AudioEffectCapture\000", "get_buffer_length\000", 191475506)
		methodAudioEffectCapture[5] = gdnative.MethodOf("AudioEffectCapture\000", "get_frames_available\000", 3905245786)
		methodAudioEffectCapture[6] = gdnative.MethodOf("AudioEffectCapture\000", "get_discarded_frames\000", 3905245786)
		methodAudioEffectCapture[7] = gdnative.MethodOf("AudioEffectCapture\000", "get_buffer_length_frames\000", 3905245786)
		methodAudioEffectCapture[8] = gdnative.MethodOf("AudioEffectCapture\000", "get_pushed_frames\000", 3905245786)
		methodAudioEffectChorus[0] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_count\000", 1286410249)
		methodAudioEffectChorus[1] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_count\000", 3905245786)
		methodAudioEffectChorus[2] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_delay_ms\000", 1602489585)
		methodAudioEffectChorus[3] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_delay_ms\000", 2339986948)
		methodAudioEffectChorus[4] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_rate_hz\000", 1602489585)
		methodAudioEffectChorus[5] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_rate_hz\000", 2339986948)
		methodAudioEffectChorus[6] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_depth_ms\000", 1602489585)
		methodAudioEffectChorus[7] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_depth_ms\000", 2339986948)
		methodAudioEffectChorus[8] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_level_db\000", 1602489585)
		methodAudioEffectChorus[9] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_level_db\000", 2339986948)
		methodAudioEffectChorus[10] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_cutoff_hz\000", 1602489585)
		methodAudioEffectChorus[11] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_cutoff_hz\000", 2339986948)
		methodAudioEffectChorus[12] = gdnative.MethodOf("AudioEffectChorus\000", "set_voice_pan\000", 1602489585)
		methodAudioEffectChorus[13] = gdnative.MethodOf("AudioEffectChorus\000", "get_voice_pan\000", 2339986948)
		methodAudioEffectChorus[14] = gdnative.MethodOf("AudioEffectChorus\000", "set_wet\000", 373806689)
		methodAudioEffectChorus[15] = gdnative.MethodOf("AudioEffectChorus\000", "get_wet\000", 1740695150)
		methodAudioEffectChorus[16] = gdnative.MethodOf("AudioEffectChorus\000", "set_dry\000", 373806689)
		methodAudioEffectChorus[17] = gdnative.MethodOf("AudioEffectChorus\000", "get_dry\000", 1740695150)
		methodAudioEffectCompressor[0] = gdnative.MethodOf("AudioEffectCompressor\000", "set_threshold\000", 373806689)
		methodAudioEffectCompressor[1] = gdnative.MethodOf("AudioEffectCompressor\000", "get_threshold\000", 1740695150)
		methodAudioEffectCompressor[2] = gdnative.MethodOf("AudioEffectCompressor\000", "set_ratio\000", 373806689)
		methodAudioEffectCompressor[3] = gdnative.MethodOf("AudioEffectCompressor\000", "get_ratio\000", 1740695150)
		methodAudioEffectCompressor[4] = gdnative.MethodOf("AudioEffectCompressor\000", "set_gain\000", 373806689)
		methodAudioEffectCompressor[5] = gdnative.MethodOf("AudioEffectCompressor\000", "get_gain\000", 1740695150)
		methodAudioEffectCompressor[6] = gdnative.MethodOf("AudioEffectCompressor\000", "set_attack_us\000", 373806689)
		methodAudioEffectCompressor[7] = gdnative.MethodOf("AudioEffectCompressor\000", "get_attack_us\000", 1740695150)
		methodAudioEffectCompressor[8] = gdnative.MethodOf("AudioEffectCompressor\000", "set_release_ms\000", 373806689)
		methodAudioEffectCompressor[9] = gdnative.MethodOf("AudioEffectCompressor\000", "get_release_ms\000", 1740695150)
		methodAudioEffectCompressor[10] = gdnative.MethodOf("AudioEffectCompressor\000", "set_mix\000", 373806689)
		methodAudioEffectCompressor[11] = gdnative.MethodOf("AudioEffectCompressor\000", "get_mix\000", 1740695150)
		methodAudioEffectCompressor[12] = gdnative.MethodOf("AudioEffectCompressor\000", "set_sidechain\000", 3304788590)
		methodAudioEffectCompressor[13] = gdnative.MethodOf("AudioEffectCompressor\000", "get_sidechain\000", 2002593661)
		methodAudioEffectDelay[0] = gdnative.MethodOf("AudioEffectDelay\000", "set_dry\000", 373806689)
		methodAudioEffectDelay[1] = gdnative.MethodOf("AudioEffectDelay\000", "get_dry\000", 191475506)
		methodAudioEffectDelay[2] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap1_active\000", 2586408642)
		methodAudioEffectDelay[3] = gdnative.MethodOf("AudioEffectDelay\000", "is_tap1_active\000", 36873697)
		methodAudioEffectDelay[4] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap1_delay_ms\000", 373806689)
		methodAudioEffectDelay[5] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap1_delay_ms\000", 1740695150)
		methodAudioEffectDelay[6] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap1_level_db\000", 373806689)
		methodAudioEffectDelay[7] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap1_level_db\000", 1740695150)
		methodAudioEffectDelay[8] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap1_pan\000", 373806689)
		methodAudioEffectDelay[9] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap1_pan\000", 1740695150)
		methodAudioEffectDelay[10] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap2_active\000", 2586408642)
		methodAudioEffectDelay[11] = gdnative.MethodOf("AudioEffectDelay\000", "is_tap2_active\000", 36873697)
		methodAudioEffectDelay[12] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap2_delay_ms\000", 373806689)
		methodAudioEffectDelay[13] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap2_delay_ms\000", 1740695150)
		methodAudioEffectDelay[14] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap2_level_db\000", 373806689)
		methodAudioEffectDelay[15] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap2_level_db\000", 1740695150)
		methodAudioEffectDelay[16] = gdnative.MethodOf("AudioEffectDelay\000", "set_tap2_pan\000", 373806689)
		methodAudioEffectDelay[17] = gdnative.MethodOf("AudioEffectDelay\000", "get_tap2_pan\000", 1740695150)
		methodAudioEffectDelay[18] = gdnative.MethodOf("AudioEffectDelay\000", "set_feedback_active\000", 2586408642)
		methodAudioEffectDelay[19] = gdnative.MethodOf("AudioEffectDelay\000", "is_feedback_active\000", 36873697)
		methodAudioEffectDelay[20] = gdnative.MethodOf("AudioEffectDelay\000", "set_feedback_delay_ms\000", 373806689)
		methodAudioEffectDelay[21] = gdnative.MethodOf("AudioEffectDelay\000", "get_feedback_delay_ms\000", 1740695150)
		methodAudioEffectDelay[22] = gdnative.MethodOf("AudioEffectDelay\000", "set_feedback_level_db\000", 373806689)
		methodAudioEffectDelay[23] = gdnative.MethodOf("AudioEffectDelay\000", "get_feedback_level_db\000", 1740695150)
		methodAudioEffectDelay[24] = gdnative.MethodOf("AudioEffectDelay\000", "set_feedback_lowpass\000", 373806689)
		methodAudioEffectDelay[25] = gdnative.MethodOf("AudioEffectDelay\000", "get_feedback_lowpass\000", 1740695150)
		methodAudioEffectDistortion[0] = gdnative.MethodOf("AudioEffectDistortion\000", "set_mode\000", 1314744793)
		methodAudioEffectDistortion[1] = gdnative.MethodOf("AudioEffectDistortion\000", "get_mode\000", 809118343)
		methodAudioEffectDistortion[2] = gdnative.MethodOf("AudioEffectDistortion\000", "set_pre_gain\000", 373806689)
		methodAudioEffectDistortion[3] = gdnative.MethodOf("AudioEffectDistortion\000", "get_pre_gain\000", 1740695150)
		methodAudioEffectDistortion[4] = gdnative.MethodOf("AudioEffectDistortion\000", "set_keep_hf_hz\000", 373806689)
		methodAudioEffectDistortion[5] = gdnative.MethodOf("AudioEffectDistortion\000", "get_keep_hf_hz\000", 1740695150)
		methodAudioEffectDistortion[6] = gdnative.MethodOf("AudioEffectDistortion\000", "set_drive\000", 373806689)
		methodAudioEffectDistortion[7] = gdnative.MethodOf("AudioEffectDistortion\000", "get_drive\000", 1740695150)
		methodAudioEffectDistortion[8] = gdnative.MethodOf("AudioEffectDistortion\000", "set_post_gain\000", 373806689)
		methodAudioEffectDistortion[9] = gdnative.MethodOf("AudioEffectDistortion\000", "get_post_gain\000", 1740695150)
		methodAudioEffectEQ[0] = gdnative.MethodOf("AudioEffectEQ\000", "set_band_gain_db\000", 1602489585)
		methodAudioEffectEQ[1] = gdnative.MethodOf("AudioEffectEQ\000", "get_band_gain_db\000", 2339986948)
		methodAudioEffectEQ[2] = gdnative.MethodOf("AudioEffectEQ\000", "get_band_count\000", 3905245786)
		methodAudioEffectFilter[0] = gdnative.MethodOf("AudioEffectFilter\000", "set_cutoff\000", 373806689)
		methodAudioEffectFilter[1] = gdnative.MethodOf("AudioEffectFilter\000", "get_cutoff\000", 1740695150)
		methodAudioEffectFilter[2] = gdnative.MethodOf("AudioEffectFilter\000", "set_resonance\000", 373806689)
		methodAudioEffectFilter[3] = gdnative.MethodOf("AudioEffectFilter\000", "get_resonance\000", 1740695150)
		methodAudioEffectFilter[4] = gdnative.MethodOf("AudioEffectFilter\000", "set_gain\000", 373806689)
		methodAudioEffectFilter[5] = gdnative.MethodOf("AudioEffectFilter\000", "get_gain\000", 1740695150)
		methodAudioEffectFilter[6] = gdnative.MethodOf("AudioEffectFilter\000", "set_db\000", 771740901)
		methodAudioEffectFilter[7] = gdnative.MethodOf("AudioEffectFilter\000", "get_db\000", 3981721890)
		methodAudioEffectLimiter[0] = gdnative.MethodOf("AudioEffectLimiter\000", "set_ceiling_db\000", 373806689)
		methodAudioEffectLimiter[1] = gdnative.MethodOf("AudioEffectLimiter\000", "get_ceiling_db\000", 1740695150)
		methodAudioEffectLimiter[2] = gdnative.MethodOf("AudioEffectLimiter\000", "set_threshold_db\000", 373806689)
		methodAudioEffectLimiter[3] = gdnative.MethodOf("AudioEffectLimiter\000", "get_threshold_db\000", 1740695150)
		methodAudioEffectLimiter[4] = gdnative.MethodOf("AudioEffectLimiter\000", "set_soft_clip_db\000", 373806689)
		methodAudioEffectLimiter[5] = gdnative.MethodOf("AudioEffectLimiter\000", "get_soft_clip_db\000", 1740695150)
		methodAudioEffectLimiter[6] = gdnative.MethodOf("AudioEffectLimiter\000", "set_soft_clip_ratio\000", 373806689)
		methodAudioEffectLimiter[7] = gdnative.MethodOf("AudioEffectLimiter\000", "get_soft_clip_ratio\000", 1740695150)
		methodAudioEffectPanner[0] = gdnative.MethodOf("AudioEffectPanner\000", "set_pan\000", 373806689)
		methodAudioEffectPanner[1] = gdnative.MethodOf("AudioEffectPanner\000", "get_pan\000", 1740695150)
		methodAudioEffectPhaser[0] = gdnative.MethodOf("AudioEffectPhaser\000", "set_range_min_hz\000", 373806689)
		methodAudioEffectPhaser[1] = gdnative.MethodOf("AudioEffectPhaser\000", "get_range_min_hz\000", 1740695150)
		methodAudioEffectPhaser[2] = gdnative.MethodOf("AudioEffectPhaser\000", "set_range_max_hz\000", 373806689)
		methodAudioEffectPhaser[3] = gdnative.MethodOf("AudioEffectPhaser\000", "get_range_max_hz\000", 1740695150)
		methodAudioEffectPhaser[4] = gdnative.MethodOf("AudioEffectPhaser\000", "set_rate_hz\000", 373806689)
		methodAudioEffectPhaser[5] = gdnative.MethodOf("AudioEffectPhaser\000", "get_rate_hz\000", 1740695150)
		methodAudioEffectPhaser[6] = gdnative.MethodOf("AudioEffectPhaser\000", "set_feedback\000", 373806689)
		methodAudioEffectPhaser[7] = gdnative.MethodOf("AudioEffectPhaser\000", "get_feedback\000", 1740695150)
		methodAudioEffectPhaser[8] = gdnative.MethodOf("AudioEffectPhaser\000", "set_depth\000", 373806689)
		methodAudioEffectPhaser[9] = gdnative.MethodOf("AudioEffectPhaser\000", "get_depth\000", 1740695150)
		methodAudioEffectPitchShift[0] = gdnative.MethodOf("AudioEffectPitchShift\000", "set_pitch_scale\000", 373806689)
		methodAudioEffectPitchShift[1] = gdnative.MethodOf("AudioEffectPitchShift\000", "get_pitch_scale\000", 1740695150)
		methodAudioEffectPitchShift[2] = gdnative.MethodOf("AudioEffectPitchShift\000", "set_oversampling\000", 1286410249)
		methodAudioEffectPitchShift[3] = gdnative.MethodOf("AudioEffectPitchShift\000", "get_oversampling\000", 3905245786)
		methodAudioEffectPitchShift[4] = gdnative.MethodOf("AudioEffectPitchShift\000", "set_fft_size\000", 2323518741)
		methodAudioEffectPitchShift[5] = gdnative.MethodOf("AudioEffectPitchShift\000", "get_fft_size\000", 2361246789)
		methodAudioEffectRecord[0] = gdnative.MethodOf("AudioEffectRecord\000", "set_recording_active\000", 2586408642)
		methodAudioEffectRecord[1] = gdnative.MethodOf("AudioEffectRecord\000", "is_recording_active\000", 36873697)
		methodAudioEffectRecord[2] = gdnative.MethodOf("AudioEffectRecord\000", "set_format\000", 60648488)
		methodAudioEffectRecord[3] = gdnative.MethodOf("AudioEffectRecord\000", "get_format\000", 3151724922)
		methodAudioEffectRecord[4] = gdnative.MethodOf("AudioEffectRecord\000", "get_recording\000", 2964110865)
		methodAudioEffectReverb[0] = gdnative.MethodOf("AudioEffectReverb\000", "set_predelay_msec\000", 373806689)
		methodAudioEffectReverb[1] = gdnative.MethodOf("AudioEffectReverb\000", "get_predelay_msec\000", 1740695150)
		methodAudioEffectReverb[2] = gdnative.MethodOf("AudioEffectReverb\000", "set_predelay_feedback\000", 373806689)
		methodAudioEffectReverb[3] = gdnative.MethodOf("AudioEffectReverb\000", "get_predelay_feedback\000", 1740695150)
		methodAudioEffectReverb[4] = gdnative.MethodOf("AudioEffectReverb\000", "set_room_size\000", 373806689)
		methodAudioEffectReverb[5] = gdnative.MethodOf("AudioEffectReverb\000", "get_room_size\000", 1740695150)
		methodAudioEffectReverb[6] = gdnative.MethodOf("AudioEffectReverb\000", "set_damping\000", 373806689)
		methodAudioEffectReverb[7] = gdnative.MethodOf("AudioEffectReverb\000", "get_damping\000", 1740695150)
		methodAudioEffectReverb[8] = gdnative.MethodOf("AudioEffectReverb\000", "set_spread\000", 373806689)
		methodAudioEffectReverb[9] = gdnative.MethodOf("AudioEffectReverb\000", "get_spread\000", 1740695150)
		methodAudioEffectReverb[10] = gdnative.MethodOf("AudioEffectReverb\000", "set_dry\000", 373806689)
		methodAudioEffectReverb[11] = gdnative.MethodOf("AudioEffectReverb\000", "get_dry\000", 1740695150)
		methodAudioEffectReverb[12] = gdnative.MethodOf("AudioEffectReverb\000", "set_wet\000", 373806689)
		methodAudioEffectReverb[13] = gdnative.MethodOf("AudioEffectReverb\000", "get_wet\000", 1740695150)
		methodAudioEffectReverb[14] = gdnative.MethodOf("AudioEffectReverb\000", "set_hpf\000", 373806689)
		methodAudioEffectReverb[15] = gdnative.MethodOf("AudioEffectReverb\000", "get_hpf\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[0] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "set_buffer_length\000", 373806689)
		methodAudioEffectSpectrumAnalyzer[1] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "get_buffer_length\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[2] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "set_tap_back_pos\000", 373806689)
		methodAudioEffectSpectrumAnalyzer[3] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "get_tap_back_pos\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[4] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "set_fft_size\000", 1202879215)
		methodAudioEffectSpectrumAnalyzer[5] = gdnative.MethodOf("AudioEffectSpectrumAnalyzer\000", "get_fft_size\000", 3925405343)
		methodAudioEffectSpectrumAnalyzerInstance[0] = gdnative.MethodOf("AudioEffectSpectrumAnalyzerInstance\000", "get_magnitude_for_frequency_range\000", 2693213071)
		methodAudioEffectStereoEnhance[0] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "set_pan_pullout\000", 373806689)
		methodAudioEffectStereoEnhance[1] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "get_pan_pullout\000", 1740695150)
		methodAudioEffectStereoEnhance[2] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "set_time_pullout\000", 373806689)
		methodAudioEffectStereoEnhance[3] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "get_time_pullout\000", 1740695150)
		methodAudioEffectStereoEnhance[4] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "set_surround\000", 373806689)
		methodAudioEffectStereoEnhance[5] = gdnative.MethodOf("AudioEffectStereoEnhance\000", "get_surround\000", 1740695150)
		methodAudioListener2D[0] = gdnative.MethodOf("AudioListener2D\000", "make_current\000", 3218959716)
		methodAudioListener2D[1] = gdnative.MethodOf("AudioListener2D\000", "clear_current\000", 3218959716)
		methodAudioListener2D[2] = gdnative.MethodOf("AudioListener2D\000", "is_current\000", 36873697)
		methodAudioListener3D[0] = gdnative.MethodOf("AudioListener3D\000", "make_current\000", 3218959716)
		methodAudioListener3D[1] = gdnative.MethodOf("AudioListener3D\000", "clear_current\000", 3218959716)
		methodAudioListener3D[2] = gdnative.MethodOf("AudioListener3D\000", "is_current\000", 36873697)
		methodAudioListener3D[3] = gdnative.MethodOf("AudioListener3D\000", "get_listener_transform\000", 3229777777)
		methodAudioServer[0] = gdnative.MethodOf("AudioServer\000", "set_bus_count\000", 1286410249)
		methodAudioServer[1] = gdnative.MethodOf("AudioServer\000", "get_bus_count\000", 3905245786)
		methodAudioServer[2] = gdnative.MethodOf("AudioServer\000", "remove_bus\000", 1286410249)
		methodAudioServer[3] = gdnative.MethodOf("AudioServer\000", "add_bus\000", 1025054187)
		methodAudioServer[4] = gdnative.MethodOf("AudioServer\000", "move_bus\000", 3937882851)
		methodAudioServer[5] = gdnative.MethodOf("AudioServer\000", "set_bus_name\000", 501894301)
		methodAudioServer[6] = gdnative.MethodOf("AudioServer\000", "get_bus_name\000", 844755477)
		methodAudioServer[7] = gdnative.MethodOf("AudioServer\000", "get_bus_index\000", 2458036349)
		methodAudioServer[8] = gdnative.MethodOf("AudioServer\000", "get_bus_channels\000", 923996154)
		methodAudioServer[9] = gdnative.MethodOf("AudioServer\000", "set_bus_volume_db\000", 1602489585)
		methodAudioServer[10] = gdnative.MethodOf("AudioServer\000", "get_bus_volume_db\000", 2339986948)
		methodAudioServer[11] = gdnative.MethodOf("AudioServer\000", "set_bus_send\000", 3780747571)
		methodAudioServer[12] = gdnative.MethodOf("AudioServer\000", "get_bus_send\000", 659327637)
		methodAudioServer[13] = gdnative.MethodOf("AudioServer\000", "set_bus_solo\000", 300928843)
		methodAudioServer[14] = gdnative.MethodOf("AudioServer\000", "is_bus_solo\000", 1116898809)
		methodAudioServer[15] = gdnative.MethodOf("AudioServer\000", "set_bus_mute\000", 300928843)
		methodAudioServer[16] = gdnative.MethodOf("AudioServer\000", "is_bus_mute\000", 1116898809)
		methodAudioServer[17] = gdnative.MethodOf("AudioServer\000", "set_bus_bypass_effects\000", 300928843)
		methodAudioServer[18] = gdnative.MethodOf("AudioServer\000", "is_bus_bypassing_effects\000", 1116898809)
		methodAudioServer[19] = gdnative.MethodOf("AudioServer\000", "add_bus_effect\000", 4147765248)
		methodAudioServer[20] = gdnative.MethodOf("AudioServer\000", "remove_bus_effect\000", 3937882851)
		methodAudioServer[21] = gdnative.MethodOf("AudioServer\000", "get_bus_effect_count\000", 3744713108)
		methodAudioServer[22] = gdnative.MethodOf("AudioServer\000", "get_bus_effect\000", 726064442)
		methodAudioServer[23] = gdnative.MethodOf("AudioServer\000", "get_bus_effect_instance\000", 2887144608)
		methodAudioServer[24] = gdnative.MethodOf("AudioServer\000", "swap_bus_effects\000", 1649997291)
		methodAudioServer[25] = gdnative.MethodOf("AudioServer\000", "set_bus_effect_enabled\000", 1383440665)
		methodAudioServer[26] = gdnative.MethodOf("AudioServer\000", "is_bus_effect_enabled\000", 2522259332)
		methodAudioServer[27] = gdnative.MethodOf("AudioServer\000", "get_bus_peak_volume_left_db\000", 3085491603)
		methodAudioServer[28] = gdnative.MethodOf("AudioServer\000", "get_bus_peak_volume_right_db\000", 3085491603)
		methodAudioServer[29] = gdnative.MethodOf("AudioServer\000", "set_playback_speed_scale\000", 373806689)
		methodAudioServer[30] = gdnative.MethodOf("AudioServer\000", "get_playback_speed_scale\000", 1740695150)
		methodAudioServer[31] = gdnative.MethodOf("AudioServer\000", "lock\000", 3218959716)
		methodAudioServer[32] = gdnative.MethodOf("AudioServer\000", "unlock\000", 3218959716)
		methodAudioServer[33] = gdnative.MethodOf("AudioServer\000", "get_speaker_mode\000", 2549190337)
		methodAudioServer[34] = gdnative.MethodOf("AudioServer\000", "get_mix_rate\000", 1740695150)
		methodAudioServer[35] = gdnative.MethodOf("AudioServer\000", "get_device_list\000", 2915620761)
		methodAudioServer[36] = gdnative.MethodOf("AudioServer\000", "get_device\000", 2841200299)
		methodAudioServer[37] = gdnative.MethodOf("AudioServer\000", "set_device\000", 83702148)
		methodAudioServer[38] = gdnative.MethodOf("AudioServer\000", "get_time_to_next_mix\000", 1740695150)
		methodAudioServer[39] = gdnative.MethodOf("AudioServer\000", "get_time_since_last_mix\000", 1740695150)
		methodAudioServer[40] = gdnative.MethodOf("AudioServer\000", "get_output_latency\000", 1740695150)
		methodAudioServer[41] = gdnative.MethodOf("AudioServer\000", "capture_get_device_list\000", 2915620761)
		methodAudioServer[42] = gdnative.MethodOf("AudioServer\000", "capture_get_device\000", 2841200299)
		methodAudioServer[43] = gdnative.MethodOf("AudioServer\000", "capture_set_device\000", 83702148)
		methodAudioServer[44] = gdnative.MethodOf("AudioServer\000", "set_bus_layout\000", 3319058824)
		methodAudioServer[45] = gdnative.MethodOf("AudioServer\000", "generate_bus_layout\000", 3769973890)
		methodAudioServer[46] = gdnative.MethodOf("AudioServer\000", "set_enable_tagging_used_audio_streams\000", 2586408642)
		methodAudioStream[0] = gdnative.MethodOf("AudioStream\000", "get_length\000", 1740695150)
		methodAudioStream[1] = gdnative.MethodOf("AudioStream\000", "is_monophonic\000", 36873697)
		methodAudioStream[2] = gdnative.MethodOf("AudioStream\000", "instantiate_playback\000", 210135309)
		methodAudioStreamGenerator[0] = gdnative.MethodOf("AudioStreamGenerator\000", "set_mix_rate\000", 373806689)
		methodAudioStreamGenerator[1] = gdnative.MethodOf("AudioStreamGenerator\000", "get_mix_rate\000", 1740695150)
		methodAudioStreamGenerator[2] = gdnative.MethodOf("AudioStreamGenerator\000", "set_buffer_length\000", 373806689)
		methodAudioStreamGenerator[3] = gdnative.MethodOf("AudioStreamGenerator\000", "get_buffer_length\000", 1740695150)
		methodAudioStreamGeneratorPlayback[0] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "push_frame\000", 3975407249)
		methodAudioStreamGeneratorPlayback[1] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "can_push_buffer\000", 1116898809)
		methodAudioStreamGeneratorPlayback[2] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "push_buffer\000", 1361156557)
		methodAudioStreamGeneratorPlayback[3] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "get_frames_available\000", 3905245786)
		methodAudioStreamGeneratorPlayback[4] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "get_skips\000", 3905245786)
		methodAudioStreamGeneratorPlayback[5] = gdnative.MethodOf("AudioStreamGeneratorPlayback\000", "clear_buffer\000", 3218959716)
		methodAudioStreamMP3[0] = gdnative.MethodOf("AudioStreamMP3\000", "set_data\000", 2971499966)
		methodAudioStreamMP3[1] = gdnative.MethodOf("AudioStreamMP3\000", "get_data\000", 2362200018)
		methodAudioStreamMP3[2] = gdnative.MethodOf("AudioStreamMP3\000", "set_loop\000", 2586408642)
		methodAudioStreamMP3[3] = gdnative.MethodOf("AudioStreamMP3\000", "has_loop\000", 36873697)
		methodAudioStreamMP3[4] = gdnative.MethodOf("AudioStreamMP3\000", "set_loop_offset\000", 373806689)
		methodAudioStreamMP3[5] = gdnative.MethodOf("AudioStreamMP3\000", "get_loop_offset\000", 1740695150)
		methodAudioStreamMP3[6] = gdnative.MethodOf("AudioStreamMP3\000", "set_bpm\000", 373806689)
		methodAudioStreamMP3[7] = gdnative.MethodOf("AudioStreamMP3\000", "get_bpm\000", 1740695150)
		methodAudioStreamMP3[8] = gdnative.MethodOf("AudioStreamMP3\000", "set_beat_count\000", 1286410249)
		methodAudioStreamMP3[9] = gdnative.MethodOf("AudioStreamMP3\000", "get_beat_count\000", 3905245786)
		methodAudioStreamMP3[10] = gdnative.MethodOf("AudioStreamMP3\000", "set_bar_beats\000", 1286410249)
		methodAudioStreamMP3[11] = gdnative.MethodOf("AudioStreamMP3\000", "get_bar_beats\000", 3905245786)
		methodAudioStreamOggVorbis[0] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_packet_sequence\000", 438882457)
		methodAudioStreamOggVorbis[1] = gdnative.MethodOf("AudioStreamOggVorbis\000", "get_packet_sequence\000", 2801636033)
		methodAudioStreamOggVorbis[2] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_loop\000", 2586408642)
		methodAudioStreamOggVorbis[3] = gdnative.MethodOf("AudioStreamOggVorbis\000", "has_loop\000", 36873697)
		methodAudioStreamOggVorbis[4] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_loop_offset\000", 373806689)
		methodAudioStreamOggVorbis[5] = gdnative.MethodOf("AudioStreamOggVorbis\000", "get_loop_offset\000", 1740695150)
		methodAudioStreamOggVorbis[6] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_bpm\000", 373806689)
		methodAudioStreamOggVorbis[7] = gdnative.MethodOf("AudioStreamOggVorbis\000", "get_bpm\000", 1740695150)
		methodAudioStreamOggVorbis[8] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_beat_count\000", 1286410249)
		methodAudioStreamOggVorbis[9] = gdnative.MethodOf("AudioStreamOggVorbis\000", "get_beat_count\000", 3905245786)
		methodAudioStreamOggVorbis[10] = gdnative.MethodOf("AudioStreamOggVorbis\000", "set_bar_beats\000", 1286410249)
		methodAudioStreamOggVorbis[11] = gdnative.MethodOf("AudioStreamOggVorbis\000", "get_bar_beats\000", 3905245786)
		methodAudioStreamPlaybackResampled[0] = gdnative.MethodOf("AudioStreamPlaybackResampled\000", "begin_resample\000", 3218959716)
		methodAudioStreamPlayer[0] = gdnative.MethodOf("AudioStreamPlayer\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer[1] = gdnative.MethodOf("AudioStreamPlayer\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer[2] = gdnative.MethodOf("AudioStreamPlayer\000", "set_volume_db\000", 373806689)
		methodAudioStreamPlayer[3] = gdnative.MethodOf("AudioStreamPlayer\000", "get_volume_db\000", 1740695150)
		methodAudioStreamPlayer[4] = gdnative.MethodOf("AudioStreamPlayer\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer[5] = gdnative.MethodOf("AudioStreamPlayer\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer[6] = gdnative.MethodOf("AudioStreamPlayer\000", "play\000", 3041634712)
		methodAudioStreamPlayer[7] = gdnative.MethodOf("AudioStreamPlayer\000", "seek\000", 373806689)
		methodAudioStreamPlayer[8] = gdnative.MethodOf("AudioStreamPlayer\000", "stop\000", 3218959716)
		methodAudioStreamPlayer[9] = gdnative.MethodOf("AudioStreamPlayer\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer[10] = gdnative.MethodOf("AudioStreamPlayer\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer[11] = gdnative.MethodOf("AudioStreamPlayer\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer[12] = gdnative.MethodOf("AudioStreamPlayer\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer[13] = gdnative.MethodOf("AudioStreamPlayer\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer[14] = gdnative.MethodOf("AudioStreamPlayer\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer[15] = gdnative.MethodOf("AudioStreamPlayer\000", "set_mix_target\000", 2300306138)
		methodAudioStreamPlayer[16] = gdnative.MethodOf("AudioStreamPlayer\000", "get_mix_target\000", 172807476)
		methodAudioStreamPlayer[17] = gdnative.MethodOf("AudioStreamPlayer\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer[18] = gdnative.MethodOf("AudioStreamPlayer\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer[19] = gdnative.MethodOf("AudioStreamPlayer\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer[20] = gdnative.MethodOf("AudioStreamPlayer\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer[21] = gdnative.MethodOf("AudioStreamPlayer\000", "get_stream_playback\000", 210135309)
		methodAudioStreamPlayer2D[0] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer2D[1] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer2D[2] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_volume_db\000", 373806689)
		methodAudioStreamPlayer2D[3] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_volume_db\000", 1740695150)
		methodAudioStreamPlayer2D[4] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer2D[5] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer2D[6] = gdnative.MethodOf("AudioStreamPlayer2D\000", "play\000", 3041634712)
		methodAudioStreamPlayer2D[7] = gdnative.MethodOf("AudioStreamPlayer2D\000", "seek\000", 373806689)
		methodAudioStreamPlayer2D[8] = gdnative.MethodOf("AudioStreamPlayer2D\000", "stop\000", 3218959716)
		methodAudioStreamPlayer2D[9] = gdnative.MethodOf("AudioStreamPlayer2D\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer2D[10] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer2D[11] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer2D[12] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer2D[13] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer2D[14] = gdnative.MethodOf("AudioStreamPlayer2D\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer2D[15] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_max_distance\000", 373806689)
		methodAudioStreamPlayer2D[16] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_max_distance\000", 1740695150)
		methodAudioStreamPlayer2D[17] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_attenuation\000", 373806689)
		methodAudioStreamPlayer2D[18] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_attenuation\000", 1740695150)
		methodAudioStreamPlayer2D[19] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_area_mask\000", 1286410249)
		methodAudioStreamPlayer2D[20] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_area_mask\000", 3905245786)
		methodAudioStreamPlayer2D[21] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer2D[22] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer2D[23] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer2D[24] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer2D[25] = gdnative.MethodOf("AudioStreamPlayer2D\000", "set_panning_strength\000", 373806689)
		methodAudioStreamPlayer2D[26] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_panning_strength\000", 1740695150)
		methodAudioStreamPlayer2D[27] = gdnative.MethodOf("AudioStreamPlayer2D\000", "get_stream_playback\000", 210135309)
		methodAudioStreamPlayer3D[0] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer3D[1] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer3D[2] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_unit_db\000", 373806689)
		methodAudioStreamPlayer3D[3] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_unit_db\000", 1740695150)
		methodAudioStreamPlayer3D[4] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_unit_size\000", 373806689)
		methodAudioStreamPlayer3D[5] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_unit_size\000", 1740695150)
		methodAudioStreamPlayer3D[6] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_max_db\000", 373806689)
		methodAudioStreamPlayer3D[7] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_max_db\000", 1740695150)
		methodAudioStreamPlayer3D[8] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer3D[9] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer3D[10] = gdnative.MethodOf("AudioStreamPlayer3D\000", "play\000", 3041634712)
		methodAudioStreamPlayer3D[11] = gdnative.MethodOf("AudioStreamPlayer3D\000", "seek\000", 373806689)
		methodAudioStreamPlayer3D[12] = gdnative.MethodOf("AudioStreamPlayer3D\000", "stop\000", 3218959716)
		methodAudioStreamPlayer3D[13] = gdnative.MethodOf("AudioStreamPlayer3D\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer3D[14] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer3D[15] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer3D[16] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer3D[17] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer3D[18] = gdnative.MethodOf("AudioStreamPlayer3D\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer3D[19] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_max_distance\000", 373806689)
		methodAudioStreamPlayer3D[20] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_max_distance\000", 1740695150)
		methodAudioStreamPlayer3D[21] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_area_mask\000", 1286410249)
		methodAudioStreamPlayer3D[22] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_area_mask\000", 3905245786)
		methodAudioStreamPlayer3D[23] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_emission_angle\000", 373806689)
		methodAudioStreamPlayer3D[24] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_emission_angle\000", 1740695150)
		methodAudioStreamPlayer3D[25] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_emission_angle_enabled\000", 2586408642)
		methodAudioStreamPlayer3D[26] = gdnative.MethodOf("AudioStreamPlayer3D\000", "is_emission_angle_enabled\000", 36873697)
		methodAudioStreamPlayer3D[27] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_emission_angle_filter_attenuation_db\000", 373806689)
		methodAudioStreamPlayer3D[28] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_emission_angle_filter_attenuation_db\000", 1740695150)
		methodAudioStreamPlayer3D[29] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_attenuation_filter_cutoff_hz\000", 373806689)
		methodAudioStreamPlayer3D[30] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_attenuation_filter_cutoff_hz\000", 1740695150)
		methodAudioStreamPlayer3D[31] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_attenuation_filter_db\000", 373806689)
		methodAudioStreamPlayer3D[32] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_attenuation_filter_db\000", 1740695150)
		methodAudioStreamPlayer3D[33] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_attenuation_model\000", 2988086229)
		methodAudioStreamPlayer3D[34] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_attenuation_model\000", 3035106060)
		methodAudioStreamPlayer3D[35] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_doppler_tracking\000", 3968161450)
		methodAudioStreamPlayer3D[36] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_doppler_tracking\000", 1702418664)
		methodAudioStreamPlayer3D[37] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer3D[38] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer3D[39] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer3D[40] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer3D[41] = gdnative.MethodOf("AudioStreamPlayer3D\000", "set_panning_strength\000", 373806689)
		methodAudioStreamPlayer3D[42] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_panning_strength\000", 1740695150)
		methodAudioStreamPlayer3D[43] = gdnative.MethodOf("AudioStreamPlayer3D\000", "get_stream_playback\000", 210135309)
		methodAudioStreamRandomizer[0] = gdnative.MethodOf("AudioStreamRandomizer\000", "add_stream\000", 1286410249)
		methodAudioStreamRandomizer[1] = gdnative.MethodOf("AudioStreamRandomizer\000", "move_stream\000", 3937882851)
		methodAudioStreamRandomizer[2] = gdnative.MethodOf("AudioStreamRandomizer\000", "remove_stream\000", 1286410249)
		methodAudioStreamRandomizer[3] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_stream\000", 111075094)
		methodAudioStreamRandomizer[4] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_stream\000", 2739380747)
		methodAudioStreamRandomizer[5] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_stream_probability_weight\000", 1602489585)
		methodAudioStreamRandomizer[6] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_stream_probability_weight\000", 2339986948)
		methodAudioStreamRandomizer[7] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_streams_count\000", 1286410249)
		methodAudioStreamRandomizer[8] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_streams_count\000", 3905245786)
		methodAudioStreamRandomizer[9] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_random_pitch\000", 373806689)
		methodAudioStreamRandomizer[10] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_random_pitch\000", 1740695150)
		methodAudioStreamRandomizer[11] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_random_volume_offset_db\000", 373806689)
		methodAudioStreamRandomizer[12] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_random_volume_offset_db\000", 1740695150)
		methodAudioStreamRandomizer[13] = gdnative.MethodOf("AudioStreamRandomizer\000", "set_playback_mode\000", 3950967023)
		methodAudioStreamRandomizer[14] = gdnative.MethodOf("AudioStreamRandomizer\000", "get_playback_mode\000", 3943055077)
		methodAudioStreamWAV[0] = gdnative.MethodOf("AudioStreamWAV\000", "set_data\000", 2971499966)
		methodAudioStreamWAV[1] = gdnative.MethodOf("AudioStreamWAV\000", "get_data\000", 2362200018)
		methodAudioStreamWAV[2] = gdnative.MethodOf("AudioStreamWAV\000", "set_format\000", 60648488)
		methodAudioStreamWAV[3] = gdnative.MethodOf("AudioStreamWAV\000", "get_format\000", 3151724922)
		methodAudioStreamWAV[4] = gdnative.MethodOf("AudioStreamWAV\000", "set_loop_mode\000", 2444882972)
		methodAudioStreamWAV[5] = gdnative.MethodOf("AudioStreamWAV\000", "get_loop_mode\000", 393560655)
		methodAudioStreamWAV[6] = gdnative.MethodOf("AudioStreamWAV\000", "set_loop_begin\000", 1286410249)
		methodAudioStreamWAV[7] = gdnative.MethodOf("AudioStreamWAV\000", "get_loop_begin\000", 3905245786)
		methodAudioStreamWAV[8] = gdnative.MethodOf("AudioStreamWAV\000", "set_loop_end\000", 1286410249)
		methodAudioStreamWAV[9] = gdnative.MethodOf("AudioStreamWAV\000", "get_loop_end\000", 3905245786)
		methodAudioStreamWAV[10] = gdnative.MethodOf("AudioStreamWAV\000", "set_mix_rate\000", 1286410249)
		methodAudioStreamWAV[11] = gdnative.MethodOf("AudioStreamWAV\000", "get_mix_rate\000", 3905245786)
		methodAudioStreamWAV[12] = gdnative.MethodOf("AudioStreamWAV\000", "set_stereo\000", 2586408642)
		methodAudioStreamWAV[13] = gdnative.MethodOf("AudioStreamWAV\000", "is_stereo\000", 36873697)
		methodAudioStreamWAV[14] = gdnative.MethodOf("AudioStreamWAV\000", "save_to_wav\000", 166001499)
		methodBackBufferCopy[0] = gdnative.MethodOf("BackBufferCopy\000", "set_rect\000", 2046264180)
		methodBackBufferCopy[1] = gdnative.MethodOf("BackBufferCopy\000", "get_rect\000", 1639390495)
		methodBackBufferCopy[2] = gdnative.MethodOf("BackBufferCopy\000", "set_copy_mode\000", 1713538590)
		methodBackBufferCopy[3] = gdnative.MethodOf("BackBufferCopy\000", "get_copy_mode\000", 3271169440)
		methodBaseButton[0] = gdnative.MethodOf("BaseButton\000", "set_pressed\000", 2586408642)
		methodBaseButton[1] = gdnative.MethodOf("BaseButton\000", "is_pressed\000", 36873697)
		methodBaseButton[2] = gdnative.MethodOf("BaseButton\000", "set_pressed_no_signal\000", 2586408642)
		methodBaseButton[3] = gdnative.MethodOf("BaseButton\000", "is_hovered\000", 36873697)
		methodBaseButton[4] = gdnative.MethodOf("BaseButton\000", "set_toggle_mode\000", 2586408642)
		methodBaseButton[5] = gdnative.MethodOf("BaseButton\000", "is_toggle_mode\000", 36873697)
		methodBaseButton[6] = gdnative.MethodOf("BaseButton\000", "set_shortcut_in_tooltip\000", 2586408642)
		methodBaseButton[7] = gdnative.MethodOf("BaseButton\000", "is_shortcut_in_tooltip_enabled\000", 36873697)
		methodBaseButton[8] = gdnative.MethodOf("BaseButton\000", "set_disabled\000", 2586408642)
		methodBaseButton[9] = gdnative.MethodOf("BaseButton\000", "is_disabled\000", 36873697)
		methodBaseButton[10] = gdnative.MethodOf("BaseButton\000", "set_action_mode\000", 1985162088)
		methodBaseButton[11] = gdnative.MethodOf("BaseButton\000", "get_action_mode\000", 2589712189)
		methodBaseButton[12] = gdnative.MethodOf("BaseButton\000", "set_button_mask\000", 3624991109)
		methodBaseButton[13] = gdnative.MethodOf("BaseButton\000", "get_button_mask\000", 1132662608)
		methodBaseButton[14] = gdnative.MethodOf("BaseButton\000", "get_draw_mode\000", 2492721305)
		methodBaseButton[15] = gdnative.MethodOf("BaseButton\000", "set_keep_pressed_outside\000", 2586408642)
		methodBaseButton[16] = gdnative.MethodOf("BaseButton\000", "is_keep_pressed_outside\000", 36873697)
		methodBaseButton[17] = gdnative.MethodOf("BaseButton\000", "set_shortcut\000", 857163497)
		methodBaseButton[18] = gdnative.MethodOf("BaseButton\000", "get_shortcut\000", 3415666916)
		methodBaseButton[19] = gdnative.MethodOf("BaseButton\000", "set_button_group\000", 1794463739)
		methodBaseButton[20] = gdnative.MethodOf("BaseButton\000", "get_button_group\000", 281644053)
		methodBaseButton[21] = gdnative.MethodOf("BaseButton\000", "set_shortcut_context\000", 1078189570)
		methodBaseButton[22] = gdnative.MethodOf("BaseButton\000", "get_shortcut_context\000", 3160264692)
		methodBaseMaterial3D[0] = gdnative.MethodOf("BaseMaterial3D\000", "set_albedo\000", 2920490490)
		methodBaseMaterial3D[1] = gdnative.MethodOf("BaseMaterial3D\000", "get_albedo\000", 3444240500)
		methodBaseMaterial3D[2] = gdnative.MethodOf("BaseMaterial3D\000", "set_transparency\000", 3435651667)
		methodBaseMaterial3D[3] = gdnative.MethodOf("BaseMaterial3D\000", "get_transparency\000", 990903061)
		methodBaseMaterial3D[4] = gdnative.MethodOf("BaseMaterial3D\000", "set_alpha_antialiasing\000", 3212649852)
		methodBaseMaterial3D[5] = gdnative.MethodOf("BaseMaterial3D\000", "get_alpha_antialiasing\000", 2889939400)
		methodBaseMaterial3D[6] = gdnative.MethodOf("BaseMaterial3D\000", "set_alpha_antialiasing_edge\000", 373806689)
		methodBaseMaterial3D[7] = gdnative.MethodOf("BaseMaterial3D\000", "get_alpha_antialiasing_edge\000", 1740695150)
		methodBaseMaterial3D[8] = gdnative.MethodOf("BaseMaterial3D\000", "set_shading_mode\000", 3368750322)
		methodBaseMaterial3D[9] = gdnative.MethodOf("BaseMaterial3D\000", "get_shading_mode\000", 2132070559)
		methodBaseMaterial3D[10] = gdnative.MethodOf("BaseMaterial3D\000", "set_specular\000", 373806689)
		methodBaseMaterial3D[11] = gdnative.MethodOf("BaseMaterial3D\000", "get_specular\000", 1740695150)
		methodBaseMaterial3D[12] = gdnative.MethodOf("BaseMaterial3D\000", "set_metallic\000", 373806689)
		methodBaseMaterial3D[13] = gdnative.MethodOf("BaseMaterial3D\000", "get_metallic\000", 1740695150)
		methodBaseMaterial3D[14] = gdnative.MethodOf("BaseMaterial3D\000", "set_roughness\000", 373806689)
		methodBaseMaterial3D[15] = gdnative.MethodOf("BaseMaterial3D\000", "get_roughness\000", 1740695150)
		methodBaseMaterial3D[16] = gdnative.MethodOf("BaseMaterial3D\000", "set_emission\000", 2920490490)
		methodBaseMaterial3D[17] = gdnative.MethodOf("BaseMaterial3D\000", "get_emission\000", 3444240500)
		methodBaseMaterial3D[18] = gdnative.MethodOf("BaseMaterial3D\000", "set_emission_energy\000", 373806689)
		methodBaseMaterial3D[19] = gdnative.MethodOf("BaseMaterial3D\000", "get_emission_energy\000", 1740695150)
		methodBaseMaterial3D[20] = gdnative.MethodOf("BaseMaterial3D\000", "set_normal_scale\000", 373806689)
		methodBaseMaterial3D[21] = gdnative.MethodOf("BaseMaterial3D\000", "get_normal_scale\000", 1740695150)
		methodBaseMaterial3D[22] = gdnative.MethodOf("BaseMaterial3D\000", "set_rim\000", 373806689)
		methodBaseMaterial3D[23] = gdnative.MethodOf("BaseMaterial3D\000", "get_rim\000", 1740695150)
		methodBaseMaterial3D[24] = gdnative.MethodOf("BaseMaterial3D\000", "set_rim_tint\000", 373806689)
		methodBaseMaterial3D[25] = gdnative.MethodOf("BaseMaterial3D\000", "get_rim_tint\000", 1740695150)
		methodBaseMaterial3D[26] = gdnative.MethodOf("BaseMaterial3D\000", "set_clearcoat\000", 373806689)
		methodBaseMaterial3D[27] = gdnative.MethodOf("BaseMaterial3D\000", "get_clearcoat\000", 1740695150)
		methodBaseMaterial3D[28] = gdnative.MethodOf("BaseMaterial3D\000", "set_clearcoat_roughness\000", 373806689)
		methodBaseMaterial3D[29] = gdnative.MethodOf("BaseMaterial3D\000", "get_clearcoat_roughness\000", 1740695150)
		methodBaseMaterial3D[30] = gdnative.MethodOf("BaseMaterial3D\000", "set_anisotropy\000", 373806689)
		methodBaseMaterial3D[31] = gdnative.MethodOf("BaseMaterial3D\000", "get_anisotropy\000", 1740695150)
		methodBaseMaterial3D[32] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_scale\000", 373806689)
		methodBaseMaterial3D[33] = gdnative.MethodOf("BaseMaterial3D\000", "get_heightmap_scale\000", 1740695150)
		methodBaseMaterial3D[34] = gdnative.MethodOf("BaseMaterial3D\000", "set_subsurface_scattering_strength\000", 373806689)
		methodBaseMaterial3D[35] = gdnative.MethodOf("BaseMaterial3D\000", "get_subsurface_scattering_strength\000", 1740695150)
		methodBaseMaterial3D[36] = gdnative.MethodOf("BaseMaterial3D\000", "set_transmittance_color\000", 2920490490)
		methodBaseMaterial3D[37] = gdnative.MethodOf("BaseMaterial3D\000", "get_transmittance_color\000", 3444240500)
		methodBaseMaterial3D[38] = gdnative.MethodOf("BaseMaterial3D\000", "set_transmittance_depth\000", 373806689)
		methodBaseMaterial3D[39] = gdnative.MethodOf("BaseMaterial3D\000", "get_transmittance_depth\000", 1740695150)
		methodBaseMaterial3D[40] = gdnative.MethodOf("BaseMaterial3D\000", "set_transmittance_boost\000", 373806689)
		methodBaseMaterial3D[41] = gdnative.MethodOf("BaseMaterial3D\000", "get_transmittance_boost\000", 1740695150)
		methodBaseMaterial3D[42] = gdnative.MethodOf("BaseMaterial3D\000", "set_backlight\000", 2920490490)
		methodBaseMaterial3D[43] = gdnative.MethodOf("BaseMaterial3D\000", "get_backlight\000", 3444240500)
		methodBaseMaterial3D[44] = gdnative.MethodOf("BaseMaterial3D\000", "set_refraction\000", 373806689)
		methodBaseMaterial3D[45] = gdnative.MethodOf("BaseMaterial3D\000", "get_refraction\000", 1740695150)
		methodBaseMaterial3D[46] = gdnative.MethodOf("BaseMaterial3D\000", "set_point_size\000", 373806689)
		methodBaseMaterial3D[47] = gdnative.MethodOf("BaseMaterial3D\000", "get_point_size\000", 1740695150)
		methodBaseMaterial3D[48] = gdnative.MethodOf("BaseMaterial3D\000", "set_detail_uv\000", 456801921)
		methodBaseMaterial3D[49] = gdnative.MethodOf("BaseMaterial3D\000", "get_detail_uv\000", 2306920512)
		methodBaseMaterial3D[50] = gdnative.MethodOf("BaseMaterial3D\000", "set_blend_mode\000", 2830186259)
		methodBaseMaterial3D[51] = gdnative.MethodOf("BaseMaterial3D\000", "get_blend_mode\000", 4022690962)
		methodBaseMaterial3D[52] = gdnative.MethodOf("BaseMaterial3D\000", "set_depth_draw_mode\000", 1456584748)
		methodBaseMaterial3D[53] = gdnative.MethodOf("BaseMaterial3D\000", "get_depth_draw_mode\000", 2578197639)
		methodBaseMaterial3D[54] = gdnative.MethodOf("BaseMaterial3D\000", "set_cull_mode\000", 2338909218)
		methodBaseMaterial3D[55] = gdnative.MethodOf("BaseMaterial3D\000", "get_cull_mode\000", 1941499586)
		methodBaseMaterial3D[56] = gdnative.MethodOf("BaseMaterial3D\000", "set_diffuse_mode\000", 1045299638)
		methodBaseMaterial3D[57] = gdnative.MethodOf("BaseMaterial3D\000", "get_diffuse_mode\000", 3973617136)
		methodBaseMaterial3D[58] = gdnative.MethodOf("BaseMaterial3D\000", "set_specular_mode\000", 584737147)
		methodBaseMaterial3D[59] = gdnative.MethodOf("BaseMaterial3D\000", "get_specular_mode\000", 2569953298)
		methodBaseMaterial3D[60] = gdnative.MethodOf("BaseMaterial3D\000", "set_flag\000", 3070159527)
		methodBaseMaterial3D[61] = gdnative.MethodOf("BaseMaterial3D\000", "get_flag\000", 1286410065)
		methodBaseMaterial3D[62] = gdnative.MethodOf("BaseMaterial3D\000", "set_texture_filter\000", 22904437)
		methodBaseMaterial3D[63] = gdnative.MethodOf("BaseMaterial3D\000", "get_texture_filter\000", 3289213076)
		methodBaseMaterial3D[64] = gdnative.MethodOf("BaseMaterial3D\000", "set_feature\000", 2819288693)
		methodBaseMaterial3D[65] = gdnative.MethodOf("BaseMaterial3D\000", "get_feature\000", 1965241794)
		methodBaseMaterial3D[66] = gdnative.MethodOf("BaseMaterial3D\000", "set_texture\000", 464208135)
		methodBaseMaterial3D[67] = gdnative.MethodOf("BaseMaterial3D\000", "get_texture\000", 329605813)
		methodBaseMaterial3D[68] = gdnative.MethodOf("BaseMaterial3D\000", "set_detail_blend_mode\000", 2830186259)
		methodBaseMaterial3D[69] = gdnative.MethodOf("BaseMaterial3D\000", "get_detail_blend_mode\000", 4022690962)
		methodBaseMaterial3D[70] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv1_scale\000", 3460891852)
		methodBaseMaterial3D[71] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv1_scale\000", 3360562783)
		methodBaseMaterial3D[72] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv1_offset\000", 3460891852)
		methodBaseMaterial3D[73] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv1_offset\000", 3360562783)
		methodBaseMaterial3D[74] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv1_triplanar_blend_sharpness\000", 373806689)
		methodBaseMaterial3D[75] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv1_triplanar_blend_sharpness\000", 1740695150)
		methodBaseMaterial3D[76] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv2_scale\000", 3460891852)
		methodBaseMaterial3D[77] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv2_scale\000", 3360562783)
		methodBaseMaterial3D[78] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv2_offset\000", 3460891852)
		methodBaseMaterial3D[79] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv2_offset\000", 3360562783)
		methodBaseMaterial3D[80] = gdnative.MethodOf("BaseMaterial3D\000", "set_uv2_triplanar_blend_sharpness\000", 373806689)
		methodBaseMaterial3D[81] = gdnative.MethodOf("BaseMaterial3D\000", "get_uv2_triplanar_blend_sharpness\000", 1740695150)
		methodBaseMaterial3D[82] = gdnative.MethodOf("BaseMaterial3D\000", "set_billboard_mode\000", 4202036497)
		methodBaseMaterial3D[83] = gdnative.MethodOf("BaseMaterial3D\000", "get_billboard_mode\000", 1283840139)
		methodBaseMaterial3D[84] = gdnative.MethodOf("BaseMaterial3D\000", "set_particles_anim_h_frames\000", 1286410249)
		methodBaseMaterial3D[85] = gdnative.MethodOf("BaseMaterial3D\000", "get_particles_anim_h_frames\000", 3905245786)
		methodBaseMaterial3D[86] = gdnative.MethodOf("BaseMaterial3D\000", "set_particles_anim_v_frames\000", 1286410249)
		methodBaseMaterial3D[87] = gdnative.MethodOf("BaseMaterial3D\000", "get_particles_anim_v_frames\000", 3905245786)
		methodBaseMaterial3D[88] = gdnative.MethodOf("BaseMaterial3D\000", "set_particles_anim_loop\000", 2586408642)
		methodBaseMaterial3D[89] = gdnative.MethodOf("BaseMaterial3D\000", "get_particles_anim_loop\000", 36873697)
		methodBaseMaterial3D[90] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_deep_parallax\000", 2586408642)
		methodBaseMaterial3D[91] = gdnative.MethodOf("BaseMaterial3D\000", "is_heightmap_deep_parallax_enabled\000", 36873697)
		methodBaseMaterial3D[92] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_deep_parallax_min_layers\000", 1286410249)
		methodBaseMaterial3D[93] = gdnative.MethodOf("BaseMaterial3D\000", "get_heightmap_deep_parallax_min_layers\000", 3905245786)
		methodBaseMaterial3D[94] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_deep_parallax_max_layers\000", 1286410249)
		methodBaseMaterial3D[95] = gdnative.MethodOf("BaseMaterial3D\000", "get_heightmap_deep_parallax_max_layers\000", 3905245786)
		methodBaseMaterial3D[96] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_deep_parallax_flip_tangent\000", 2586408642)
		methodBaseMaterial3D[97] = gdnative.MethodOf("BaseMaterial3D\000", "get_heightmap_deep_parallax_flip_tangent\000", 36873697)
		methodBaseMaterial3D[98] = gdnative.MethodOf("BaseMaterial3D\000", "set_heightmap_deep_parallax_flip_binormal\000", 2586408642)
		methodBaseMaterial3D[99] = gdnative.MethodOf("BaseMaterial3D\000", "get_heightmap_deep_parallax_flip_binormal\000", 36873697)
		methodBaseMaterial3D[100] = gdnative.MethodOf("BaseMaterial3D\000", "set_grow\000", 373806689)
		methodBaseMaterial3D[101] = gdnative.MethodOf("BaseMaterial3D\000", "get_grow\000", 1740695150)
		methodBaseMaterial3D[102] = gdnative.MethodOf("BaseMaterial3D\000", "set_emission_operator\000", 3825128922)
		methodBaseMaterial3D[103] = gdnative.MethodOf("BaseMaterial3D\000", "get_emission_operator\000", 974205018)
		methodBaseMaterial3D[104] = gdnative.MethodOf("BaseMaterial3D\000", "set_ao_light_affect\000", 373806689)
		methodBaseMaterial3D[105] = gdnative.MethodOf("BaseMaterial3D\000", "get_ao_light_affect\000", 1740695150)
		methodBaseMaterial3D[106] = gdnative.MethodOf("BaseMaterial3D\000", "set_alpha_scissor_threshold\000", 373806689)
		methodBaseMaterial3D[107] = gdnative.MethodOf("BaseMaterial3D\000", "get_alpha_scissor_threshold\000", 1740695150)
		methodBaseMaterial3D[108] = gdnative.MethodOf("BaseMaterial3D\000", "set_alpha_hash_scale\000", 373806689)
		methodBaseMaterial3D[109] = gdnative.MethodOf("BaseMaterial3D\000", "get_alpha_hash_scale\000", 1740695150)
		methodBaseMaterial3D[110] = gdnative.MethodOf("BaseMaterial3D\000", "set_grow_enabled\000", 2586408642)
		methodBaseMaterial3D[111] = gdnative.MethodOf("BaseMaterial3D\000", "is_grow_enabled\000", 36873697)
		methodBaseMaterial3D[112] = gdnative.MethodOf("BaseMaterial3D\000", "set_metallic_texture_channel\000", 744167988)
		methodBaseMaterial3D[113] = gdnative.MethodOf("BaseMaterial3D\000", "get_metallic_texture_channel\000", 568133867)
		methodBaseMaterial3D[114] = gdnative.MethodOf("BaseMaterial3D\000", "set_roughness_texture_channel\000", 744167988)
		methodBaseMaterial3D[115] = gdnative.MethodOf("BaseMaterial3D\000", "get_roughness_texture_channel\000", 568133867)
		methodBaseMaterial3D[116] = gdnative.MethodOf("BaseMaterial3D\000", "set_ao_texture_channel\000", 744167988)
		methodBaseMaterial3D[117] = gdnative.MethodOf("BaseMaterial3D\000", "get_ao_texture_channel\000", 568133867)
		methodBaseMaterial3D[118] = gdnative.MethodOf("BaseMaterial3D\000", "set_refraction_texture_channel\000", 744167988)
		methodBaseMaterial3D[119] = gdnative.MethodOf("BaseMaterial3D\000", "get_refraction_texture_channel\000", 568133867)
		methodBaseMaterial3D[120] = gdnative.MethodOf("BaseMaterial3D\000", "set_proximity_fade\000", 2586408642)
		methodBaseMaterial3D[121] = gdnative.MethodOf("BaseMaterial3D\000", "is_proximity_fade_enabled\000", 36873697)
		methodBaseMaterial3D[122] = gdnative.MethodOf("BaseMaterial3D\000", "set_proximity_fade_distance\000", 373806689)
		methodBaseMaterial3D[123] = gdnative.MethodOf("BaseMaterial3D\000", "get_proximity_fade_distance\000", 1740695150)
		methodBaseMaterial3D[124] = gdnative.MethodOf("BaseMaterial3D\000", "set_msdf_pixel_range\000", 373806689)
		methodBaseMaterial3D[125] = gdnative.MethodOf("BaseMaterial3D\000", "get_msdf_pixel_range\000", 1740695150)
		methodBaseMaterial3D[126] = gdnative.MethodOf("BaseMaterial3D\000", "set_msdf_outline_size\000", 373806689)
		methodBaseMaterial3D[127] = gdnative.MethodOf("BaseMaterial3D\000", "get_msdf_outline_size\000", 1740695150)
		methodBaseMaterial3D[128] = gdnative.MethodOf("BaseMaterial3D\000", "set_distance_fade\000", 1379478617)
		methodBaseMaterial3D[129] = gdnative.MethodOf("BaseMaterial3D\000", "get_distance_fade\000", 2694575734)
		methodBaseMaterial3D[130] = gdnative.MethodOf("BaseMaterial3D\000", "set_distance_fade_max_distance\000", 373806689)
		methodBaseMaterial3D[131] = gdnative.MethodOf("BaseMaterial3D\000", "get_distance_fade_max_distance\000", 1740695150)
		methodBaseMaterial3D[132] = gdnative.MethodOf("BaseMaterial3D\000", "set_distance_fade_min_distance\000", 373806689)
		methodBaseMaterial3D[133] = gdnative.MethodOf("BaseMaterial3D\000", "get_distance_fade_min_distance\000", 1740695150)
		methodBitMap[0] = gdnative.MethodOf("BitMap\000", "create\000", 743155724)
		methodBitMap[1] = gdnative.MethodOf("BitMap\000", "create_from_image_alpha\000", 505265891)
		methodBitMap[2] = gdnative.MethodOf("BitMap\000", "set_bit\000", 979101055)
		methodBitMap[3] = gdnative.MethodOf("BitMap\000", "get_bit\000", 556197845)
		methodBitMap[4] = gdnative.MethodOf("BitMap\000", "set_bit_rect\000", 1453796981)
		methodBitMap[5] = gdnative.MethodOf("BitMap\000", "get_true_bit_count\000", 3905245786)
		methodBitMap[6] = gdnative.MethodOf("BitMap\000", "get_size\000", 3341600327)
		methodBitMap[7] = gdnative.MethodOf("BitMap\000", "resize\000", 743155724)
		methodBitMap[8] = gdnative.MethodOf("BitMap\000", "grow_mask\000", 1356297692)
		methodBitMap[9] = gdnative.MethodOf("BitMap\000", "convert_to_image\000", 4190603485)
		methodBitMap[10] = gdnative.MethodOf("BitMap\000", "opaque_to_polygons\000", 88560356)
		methodBone2D[0] = gdnative.MethodOf("Bone2D\000", "set_rest\000", 2761652528)
		methodBone2D[1] = gdnative.MethodOf("Bone2D\000", "get_rest\000", 3814499831)
		methodBone2D[2] = gdnative.MethodOf("Bone2D\000", "apply_rest\000", 3218959716)
		methodBone2D[3] = gdnative.MethodOf("Bone2D\000", "get_skeleton_rest\000", 3814499831)
		methodBone2D[4] = gdnative.MethodOf("Bone2D\000", "get_index_in_skeleton\000", 3905245786)
		methodBone2D[5] = gdnative.MethodOf("Bone2D\000", "set_default_length\000", 373806689)
		methodBone2D[6] = gdnative.MethodOf("Bone2D\000", "get_default_length\000", 1740695150)
		methodBone2D[7] = gdnative.MethodOf("Bone2D\000", "set_autocalculate_length_and_angle\000", 2586408642)
		methodBone2D[8] = gdnative.MethodOf("Bone2D\000", "get_autocalculate_length_and_angle\000", 36873697)
		methodBone2D[9] = gdnative.MethodOf("Bone2D\000", "set_length\000", 373806689)
		methodBone2D[10] = gdnative.MethodOf("Bone2D\000", "get_length\000", 1740695150)
		methodBone2D[11] = gdnative.MethodOf("Bone2D\000", "set_bone_angle\000", 373806689)
		methodBone2D[12] = gdnative.MethodOf("Bone2D\000", "get_bone_angle\000", 1740695150)
		methodBoneAttachment3D[0] = gdnative.MethodOf("BoneAttachment3D\000", "set_bone_name\000", 83702148)
		methodBoneAttachment3D[1] = gdnative.MethodOf("BoneAttachment3D\000", "get_bone_name\000", 201670096)
		methodBoneAttachment3D[2] = gdnative.MethodOf("BoneAttachment3D\000", "set_bone_idx\000", 1286410249)
		methodBoneAttachment3D[3] = gdnative.MethodOf("BoneAttachment3D\000", "get_bone_idx\000", 3905245786)
		methodBoneAttachment3D[4] = gdnative.MethodOf("BoneAttachment3D\000", "on_bone_pose_update\000", 1286410249)
		methodBoneAttachment3D[5] = gdnative.MethodOf("BoneAttachment3D\000", "set_override_pose\000", 2586408642)
		methodBoneAttachment3D[6] = gdnative.MethodOf("BoneAttachment3D\000", "get_override_pose\000", 36873697)
		methodBoneAttachment3D[7] = gdnative.MethodOf("BoneAttachment3D\000", "set_override_mode\000", 1286410249)
		methodBoneAttachment3D[8] = gdnative.MethodOf("BoneAttachment3D\000", "get_override_mode\000", 3905245786)
		methodBoneAttachment3D[9] = gdnative.MethodOf("BoneAttachment3D\000", "set_use_external_skeleton\000", 2586408642)
		methodBoneAttachment3D[10] = gdnative.MethodOf("BoneAttachment3D\000", "get_use_external_skeleton\000", 36873697)
		methodBoneAttachment3D[11] = gdnative.MethodOf("BoneAttachment3D\000", "set_external_skeleton\000", 1348162250)
		methodBoneAttachment3D[12] = gdnative.MethodOf("BoneAttachment3D\000", "get_external_skeleton\000", 4075236667)
		methodBoneMap[0] = gdnative.MethodOf("BoneMap\000", "get_profile\000", 4291782652)
		methodBoneMap[1] = gdnative.MethodOf("BoneMap\000", "set_profile\000", 3870374136)
		methodBoneMap[2] = gdnative.MethodOf("BoneMap\000", "get_skeleton_bone_name\000", 1965194235)
		methodBoneMap[3] = gdnative.MethodOf("BoneMap\000", "set_skeleton_bone_name\000", 3740211285)
		methodBoneMap[4] = gdnative.MethodOf("BoneMap\000", "find_profile_bone_name\000", 1965194235)
		methodBoxContainer[0] = gdnative.MethodOf("BoxContainer\000", "add_spacer\000", 1326660695)
		methodBoxContainer[1] = gdnative.MethodOf("BoxContainer\000", "get_alignment\000", 1915476527)
		methodBoxContainer[2] = gdnative.MethodOf("BoxContainer\000", "set_alignment\000", 2456745134)
		methodBoxMesh[0] = gdnative.MethodOf("BoxMesh\000", "set_size\000", 3460891852)
		methodBoxMesh[1] = gdnative.MethodOf("BoxMesh\000", "get_size\000", 3360562783)
		methodBoxMesh[2] = gdnative.MethodOf("BoxMesh\000", "set_subdivide_width\000", 1286410249)
		methodBoxMesh[3] = gdnative.MethodOf("BoxMesh\000", "get_subdivide_width\000", 3905245786)
		methodBoxMesh[4] = gdnative.MethodOf("BoxMesh\000", "set_subdivide_height\000", 1286410249)
		methodBoxMesh[5] = gdnative.MethodOf("BoxMesh\000", "get_subdivide_height\000", 3905245786)
		methodBoxMesh[6] = gdnative.MethodOf("BoxMesh\000", "set_subdivide_depth\000", 1286410249)
		methodBoxMesh[7] = gdnative.MethodOf("BoxMesh\000", "get_subdivide_depth\000", 3905245786)
		methodBoxOccluder3D[0] = gdnative.MethodOf("BoxOccluder3D\000", "set_size\000", 3460891852)
		methodBoxOccluder3D[1] = gdnative.MethodOf("BoxOccluder3D\000", "get_size\000", 3360562783)
		methodBoxShape3D[0] = gdnative.MethodOf("BoxShape3D\000", "set_size\000", 3460891852)
		methodBoxShape3D[1] = gdnative.MethodOf("BoxShape3D\000", "get_size\000", 3360562783)
		methodButton[0] = gdnative.MethodOf("Button\000", "set_text\000", 83702148)
		methodButton[1] = gdnative.MethodOf("Button\000", "get_text\000", 201670096)
		methodButton[2] = gdnative.MethodOf("Button\000", "set_text_overrun_behavior\000", 1008890932)
		methodButton[3] = gdnative.MethodOf("Button\000", "get_text_overrun_behavior\000", 3779142101)
		methodButton[4] = gdnative.MethodOf("Button\000", "set_text_direction\000", 119160795)
		methodButton[5] = gdnative.MethodOf("Button\000", "get_text_direction\000", 797257663)
		methodButton[6] = gdnative.MethodOf("Button\000", "set_language\000", 83702148)
		methodButton[7] = gdnative.MethodOf("Button\000", "get_language\000", 201670096)
		methodButton[8] = gdnative.MethodOf("Button\000", "set_button_icon\000", 4051416890)
		methodButton[9] = gdnative.MethodOf("Button\000", "get_button_icon\000", 3635182373)
		methodButton[10] = gdnative.MethodOf("Button\000", "set_flat\000", 2586408642)
		methodButton[11] = gdnative.MethodOf("Button\000", "is_flat\000", 36873697)
		methodButton[12] = gdnative.MethodOf("Button\000", "set_clip_text\000", 2586408642)
		methodButton[13] = gdnative.MethodOf("Button\000", "get_clip_text\000", 36873697)
		methodButton[14] = gdnative.MethodOf("Button\000", "set_text_alignment\000", 2312603777)
		methodButton[15] = gdnative.MethodOf("Button\000", "get_text_alignment\000", 341400642)
		methodButton[16] = gdnative.MethodOf("Button\000", "set_icon_alignment\000", 2312603777)
		methodButton[17] = gdnative.MethodOf("Button\000", "get_icon_alignment\000", 341400642)
		methodButton[18] = gdnative.MethodOf("Button\000", "set_expand_icon\000", 2586408642)
		methodButton[19] = gdnative.MethodOf("Button\000", "is_expand_icon\000", 36873697)
		methodButtonGroup[0] = gdnative.MethodOf("ButtonGroup\000", "get_pressed_button\000", 3886434893)
		methodButtonGroup[1] = gdnative.MethodOf("ButtonGroup\000", "get_buttons\000", 2915620761)
		methodCPUParticles2D[0] = gdnative.MethodOf("CPUParticles2D\000", "set_emitting\000", 2586408642)
		methodCPUParticles2D[1] = gdnative.MethodOf("CPUParticles2D\000", "set_amount\000", 1286410249)
		methodCPUParticles2D[2] = gdnative.MethodOf("CPUParticles2D\000", "set_lifetime\000", 373806689)
		methodCPUParticles2D[3] = gdnative.MethodOf("CPUParticles2D\000", "set_one_shot\000", 2586408642)
		methodCPUParticles2D[4] = gdnative.MethodOf("CPUParticles2D\000", "set_pre_process_time\000", 373806689)
		methodCPUParticles2D[5] = gdnative.MethodOf("CPUParticles2D\000", "set_explosiveness_ratio\000", 373806689)
		methodCPUParticles2D[6] = gdnative.MethodOf("CPUParticles2D\000", "set_randomness_ratio\000", 373806689)
		methodCPUParticles2D[7] = gdnative.MethodOf("CPUParticles2D\000", "set_lifetime_randomness\000", 373806689)
		methodCPUParticles2D[8] = gdnative.MethodOf("CPUParticles2D\000", "set_use_local_coordinates\000", 2586408642)
		methodCPUParticles2D[9] = gdnative.MethodOf("CPUParticles2D\000", "set_fixed_fps\000", 1286410249)
		methodCPUParticles2D[10] = gdnative.MethodOf("CPUParticles2D\000", "set_fractional_delta\000", 2586408642)
		methodCPUParticles2D[11] = gdnative.MethodOf("CPUParticles2D\000", "set_speed_scale\000", 373806689)
		methodCPUParticles2D[12] = gdnative.MethodOf("CPUParticles2D\000", "is_emitting\000", 36873697)
		methodCPUParticles2D[13] = gdnative.MethodOf("CPUParticles2D\000", "get_amount\000", 3905245786)
		methodCPUParticles2D[14] = gdnative.MethodOf("CPUParticles2D\000", "get_lifetime\000", 1740695150)
		methodCPUParticles2D[15] = gdnative.MethodOf("CPUParticles2D\000", "get_one_shot\000", 36873697)
		methodCPUParticles2D[16] = gdnative.MethodOf("CPUParticles2D\000", "get_pre_process_time\000", 1740695150)
		methodCPUParticles2D[17] = gdnative.MethodOf("CPUParticles2D\000", "get_explosiveness_ratio\000", 1740695150)
		methodCPUParticles2D[18] = gdnative.MethodOf("CPUParticles2D\000", "get_randomness_ratio\000", 1740695150)
		methodCPUParticles2D[19] = gdnative.MethodOf("CPUParticles2D\000", "get_lifetime_randomness\000", 1740695150)
		methodCPUParticles2D[20] = gdnative.MethodOf("CPUParticles2D\000", "get_use_local_coordinates\000", 36873697)
		methodCPUParticles2D[21] = gdnative.MethodOf("CPUParticles2D\000", "get_fixed_fps\000", 3905245786)
		methodCPUParticles2D[22] = gdnative.MethodOf("CPUParticles2D\000", "get_fractional_delta\000", 36873697)
		methodCPUParticles2D[23] = gdnative.MethodOf("CPUParticles2D\000", "get_speed_scale\000", 1740695150)
		methodCPUParticles2D[24] = gdnative.MethodOf("CPUParticles2D\000", "set_draw_order\000", 4183193490)
		methodCPUParticles2D[25] = gdnative.MethodOf("CPUParticles2D\000", "get_draw_order\000", 1668655735)
		methodCPUParticles2D[26] = gdnative.MethodOf("CPUParticles2D\000", "set_texture\000", 4051416890)
		methodCPUParticles2D[27] = gdnative.MethodOf("CPUParticles2D\000", "get_texture\000", 3635182373)
		methodCPUParticles2D[28] = gdnative.MethodOf("CPUParticles2D\000", "restart\000", 3218959716)
		methodCPUParticles2D[29] = gdnative.MethodOf("CPUParticles2D\000", "set_direction\000", 743155724)
		methodCPUParticles2D[30] = gdnative.MethodOf("CPUParticles2D\000", "get_direction\000", 3341600327)
		methodCPUParticles2D[31] = gdnative.MethodOf("CPUParticles2D\000", "set_spread\000", 373806689)
		methodCPUParticles2D[32] = gdnative.MethodOf("CPUParticles2D\000", "get_spread\000", 1740695150)
		methodCPUParticles2D[33] = gdnative.MethodOf("CPUParticles2D\000", "set_param_min\000", 3320615296)
		methodCPUParticles2D[34] = gdnative.MethodOf("CPUParticles2D\000", "get_param_min\000", 2038050600)
		methodCPUParticles2D[35] = gdnative.MethodOf("CPUParticles2D\000", "set_param_max\000", 3320615296)
		methodCPUParticles2D[36] = gdnative.MethodOf("CPUParticles2D\000", "get_param_max\000", 2038050600)
		methodCPUParticles2D[37] = gdnative.MethodOf("CPUParticles2D\000", "set_param_curve\000", 2959350143)
		methodCPUParticles2D[38] = gdnative.MethodOf("CPUParticles2D\000", "get_param_curve\000", 2603158474)
		methodCPUParticles2D[39] = gdnative.MethodOf("CPUParticles2D\000", "set_color\000", 2920490490)
		methodCPUParticles2D[40] = gdnative.MethodOf("CPUParticles2D\000", "get_color\000", 3444240500)
		methodCPUParticles2D[41] = gdnative.MethodOf("CPUParticles2D\000", "set_color_ramp\000", 2756054477)
		methodCPUParticles2D[42] = gdnative.MethodOf("CPUParticles2D\000", "get_color_ramp\000", 132272999)
		methodCPUParticles2D[43] = gdnative.MethodOf("CPUParticles2D\000", "set_color_initial_ramp\000", 2756054477)
		methodCPUParticles2D[44] = gdnative.MethodOf("CPUParticles2D\000", "get_color_initial_ramp\000", 132272999)
		methodCPUParticles2D[45] = gdnative.MethodOf("CPUParticles2D\000", "set_particle_flag\000", 4178137949)
		methodCPUParticles2D[46] = gdnative.MethodOf("CPUParticles2D\000", "get_particle_flag\000", 2829976507)
		methodCPUParticles2D[47] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_shape\000", 393763892)
		methodCPUParticles2D[48] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_shape\000", 1740246024)
		methodCPUParticles2D[49] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_sphere_radius\000", 373806689)
		methodCPUParticles2D[50] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_sphere_radius\000", 1740695150)
		methodCPUParticles2D[51] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_rect_extents\000", 743155724)
		methodCPUParticles2D[52] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_rect_extents\000", 3341600327)
		methodCPUParticles2D[53] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_points\000", 1509147220)
		methodCPUParticles2D[54] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_points\000", 2961356807)
		methodCPUParticles2D[55] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_normals\000", 1509147220)
		methodCPUParticles2D[56] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_normals\000", 2961356807)
		methodCPUParticles2D[57] = gdnative.MethodOf("CPUParticles2D\000", "set_emission_colors\000", 3546319833)
		methodCPUParticles2D[58] = gdnative.MethodOf("CPUParticles2D\000", "get_emission_colors\000", 1392750486)
		methodCPUParticles2D[59] = gdnative.MethodOf("CPUParticles2D\000", "get_gravity\000", 3341600327)
		methodCPUParticles2D[60] = gdnative.MethodOf("CPUParticles2D\000", "set_gravity\000", 743155724)
		methodCPUParticles2D[61] = gdnative.MethodOf("CPUParticles2D\000", "get_split_scale\000", 2240911060)
		methodCPUParticles2D[62] = gdnative.MethodOf("CPUParticles2D\000", "set_split_scale\000", 2586408642)
		methodCPUParticles2D[63] = gdnative.MethodOf("CPUParticles2D\000", "get_scale_curve_x\000", 2460114913)
		methodCPUParticles2D[64] = gdnative.MethodOf("CPUParticles2D\000", "set_scale_curve_x\000", 270443179)
		methodCPUParticles2D[65] = gdnative.MethodOf("CPUParticles2D\000", "get_scale_curve_y\000", 2460114913)
		methodCPUParticles2D[66] = gdnative.MethodOf("CPUParticles2D\000", "set_scale_curve_y\000", 270443179)
		methodCPUParticles2D[67] = gdnative.MethodOf("CPUParticles2D\000", "convert_from_particles\000", 1078189570)
		methodCPUParticles3D[0] = gdnative.MethodOf("CPUParticles3D\000", "set_emitting\000", 2586408642)
		methodCPUParticles3D[1] = gdnative.MethodOf("CPUParticles3D\000", "set_amount\000", 1286410249)
		methodCPUParticles3D[2] = gdnative.MethodOf("CPUParticles3D\000", "set_lifetime\000", 373806689)
		methodCPUParticles3D[3] = gdnative.MethodOf("CPUParticles3D\000", "set_one_shot\000", 2586408642)
		methodCPUParticles3D[4] = gdnative.MethodOf("CPUParticles3D\000", "set_pre_process_time\000", 373806689)
		methodCPUParticles3D[5] = gdnative.MethodOf("CPUParticles3D\000", "set_explosiveness_ratio\000", 373806689)
		methodCPUParticles3D[6] = gdnative.MethodOf("CPUParticles3D\000", "set_randomness_ratio\000", 373806689)
		methodCPUParticles3D[7] = gdnative.MethodOf("CPUParticles3D\000", "set_lifetime_randomness\000", 373806689)
		methodCPUParticles3D[8] = gdnative.MethodOf("CPUParticles3D\000", "set_use_local_coordinates\000", 2586408642)
		methodCPUParticles3D[9] = gdnative.MethodOf("CPUParticles3D\000", "set_fixed_fps\000", 1286410249)
		methodCPUParticles3D[10] = gdnative.MethodOf("CPUParticles3D\000", "set_fractional_delta\000", 2586408642)
		methodCPUParticles3D[11] = gdnative.MethodOf("CPUParticles3D\000", "set_speed_scale\000", 373806689)
		methodCPUParticles3D[12] = gdnative.MethodOf("CPUParticles3D\000", "is_emitting\000", 36873697)
		methodCPUParticles3D[13] = gdnative.MethodOf("CPUParticles3D\000", "get_amount\000", 3905245786)
		methodCPUParticles3D[14] = gdnative.MethodOf("CPUParticles3D\000", "get_lifetime\000", 1740695150)
		methodCPUParticles3D[15] = gdnative.MethodOf("CPUParticles3D\000", "get_one_shot\000", 36873697)
		methodCPUParticles3D[16] = gdnative.MethodOf("CPUParticles3D\000", "get_pre_process_time\000", 1740695150)
		methodCPUParticles3D[17] = gdnative.MethodOf("CPUParticles3D\000", "get_explosiveness_ratio\000", 1740695150)
		methodCPUParticles3D[18] = gdnative.MethodOf("CPUParticles3D\000", "get_randomness_ratio\000", 1740695150)
		methodCPUParticles3D[19] = gdnative.MethodOf("CPUParticles3D\000", "get_lifetime_randomness\000", 1740695150)
		methodCPUParticles3D[20] = gdnative.MethodOf("CPUParticles3D\000", "get_use_local_coordinates\000", 36873697)
		methodCPUParticles3D[21] = gdnative.MethodOf("CPUParticles3D\000", "get_fixed_fps\000", 3905245786)
		methodCPUParticles3D[22] = gdnative.MethodOf("CPUParticles3D\000", "get_fractional_delta\000", 36873697)
		methodCPUParticles3D[23] = gdnative.MethodOf("CPUParticles3D\000", "get_speed_scale\000", 1740695150)
		methodCPUParticles3D[24] = gdnative.MethodOf("CPUParticles3D\000", "set_draw_order\000", 1427401774)
		methodCPUParticles3D[25] = gdnative.MethodOf("CPUParticles3D\000", "get_draw_order\000", 1321900776)
		methodCPUParticles3D[26] = gdnative.MethodOf("CPUParticles3D\000", "set_mesh\000", 194775623)
		methodCPUParticles3D[27] = gdnative.MethodOf("CPUParticles3D\000", "get_mesh\000", 1808005922)
		methodCPUParticles3D[28] = gdnative.MethodOf("CPUParticles3D\000", "restart\000", 3218959716)
		methodCPUParticles3D[29] = gdnative.MethodOf("CPUParticles3D\000", "set_direction\000", 3460891852)
		methodCPUParticles3D[30] = gdnative.MethodOf("CPUParticles3D\000", "get_direction\000", 3360562783)
		methodCPUParticles3D[31] = gdnative.MethodOf("CPUParticles3D\000", "set_spread\000", 373806689)
		methodCPUParticles3D[32] = gdnative.MethodOf("CPUParticles3D\000", "get_spread\000", 1740695150)
		methodCPUParticles3D[33] = gdnative.MethodOf("CPUParticles3D\000", "set_flatness\000", 373806689)
		methodCPUParticles3D[34] = gdnative.MethodOf("CPUParticles3D\000", "get_flatness\000", 1740695150)
		methodCPUParticles3D[35] = gdnative.MethodOf("CPUParticles3D\000", "set_param_min\000", 557936109)
		methodCPUParticles3D[36] = gdnative.MethodOf("CPUParticles3D\000", "get_param_min\000", 597646162)
		methodCPUParticles3D[37] = gdnative.MethodOf("CPUParticles3D\000", "set_param_max\000", 557936109)
		methodCPUParticles3D[38] = gdnative.MethodOf("CPUParticles3D\000", "get_param_max\000", 597646162)
		methodCPUParticles3D[39] = gdnative.MethodOf("CPUParticles3D\000", "set_param_curve\000", 4044142537)
		methodCPUParticles3D[40] = gdnative.MethodOf("CPUParticles3D\000", "get_param_curve\000", 4132790277)
		methodCPUParticles3D[41] = gdnative.MethodOf("CPUParticles3D\000", "set_color\000", 2920490490)
		methodCPUParticles3D[42] = gdnative.MethodOf("CPUParticles3D\000", "get_color\000", 3444240500)
		methodCPUParticles3D[43] = gdnative.MethodOf("CPUParticles3D\000", "set_color_ramp\000", 2756054477)
		methodCPUParticles3D[44] = gdnative.MethodOf("CPUParticles3D\000", "get_color_ramp\000", 132272999)
		methodCPUParticles3D[45] = gdnative.MethodOf("CPUParticles3D\000", "set_color_initial_ramp\000", 2756054477)
		methodCPUParticles3D[46] = gdnative.MethodOf("CPUParticles3D\000", "get_color_initial_ramp\000", 132272999)
		methodCPUParticles3D[47] = gdnative.MethodOf("CPUParticles3D\000", "set_particle_flag\000", 3515406498)
		methodCPUParticles3D[48] = gdnative.MethodOf("CPUParticles3D\000", "get_particle_flag\000", 2845201987)
		methodCPUParticles3D[49] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_shape\000", 491823814)
		methodCPUParticles3D[50] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_shape\000", 2961454842)
		methodCPUParticles3D[51] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_sphere_radius\000", 373806689)
		methodCPUParticles3D[52] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_sphere_radius\000", 1740695150)
		methodCPUParticles3D[53] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_box_extents\000", 3460891852)
		methodCPUParticles3D[54] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_box_extents\000", 3360562783)
		methodCPUParticles3D[55] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_points\000", 334873810)
		methodCPUParticles3D[56] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_points\000", 497664490)
		methodCPUParticles3D[57] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_normals\000", 334873810)
		methodCPUParticles3D[58] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_normals\000", 497664490)
		methodCPUParticles3D[59] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_colors\000", 3546319833)
		methodCPUParticles3D[60] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_colors\000", 1392750486)
		methodCPUParticles3D[61] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_ring_axis\000", 3460891852)
		methodCPUParticles3D[62] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_ring_axis\000", 3360562783)
		methodCPUParticles3D[63] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_ring_height\000", 373806689)
		methodCPUParticles3D[64] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_ring_height\000", 1740695150)
		methodCPUParticles3D[65] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_ring_radius\000", 373806689)
		methodCPUParticles3D[66] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_ring_radius\000", 1740695150)
		methodCPUParticles3D[67] = gdnative.MethodOf("CPUParticles3D\000", "set_emission_ring_inner_radius\000", 373806689)
		methodCPUParticles3D[68] = gdnative.MethodOf("CPUParticles3D\000", "get_emission_ring_inner_radius\000", 1740695150)
		methodCPUParticles3D[69] = gdnative.MethodOf("CPUParticles3D\000", "get_gravity\000", 3360562783)
		methodCPUParticles3D[70] = gdnative.MethodOf("CPUParticles3D\000", "set_gravity\000", 3460891852)
		methodCPUParticles3D[71] = gdnative.MethodOf("CPUParticles3D\000", "get_split_scale\000", 2240911060)
		methodCPUParticles3D[72] = gdnative.MethodOf("CPUParticles3D\000", "set_split_scale\000", 2586408642)
		methodCPUParticles3D[73] = gdnative.MethodOf("CPUParticles3D\000", "get_scale_curve_x\000", 2460114913)
		methodCPUParticles3D[74] = gdnative.MethodOf("CPUParticles3D\000", "set_scale_curve_x\000", 270443179)
		methodCPUParticles3D[75] = gdnative.MethodOf("CPUParticles3D\000", "get_scale_curve_y\000", 2460114913)
		methodCPUParticles3D[76] = gdnative.MethodOf("CPUParticles3D\000", "set_scale_curve_y\000", 270443179)
		methodCPUParticles3D[77] = gdnative.MethodOf("CPUParticles3D\000", "get_scale_curve_z\000", 2460114913)
		methodCPUParticles3D[78] = gdnative.MethodOf("CPUParticles3D\000", "set_scale_curve_z\000", 270443179)
		methodCPUParticles3D[79] = gdnative.MethodOf("CPUParticles3D\000", "convert_from_particles\000", 1078189570)
		methodCSGBox3D[0] = gdnative.MethodOf("CSGBox3D\000", "set_size\000", 3460891852)
		methodCSGBox3D[1] = gdnative.MethodOf("CSGBox3D\000", "get_size\000", 3360562783)
		methodCSGBox3D[2] = gdnative.MethodOf("CSGBox3D\000", "set_material\000", 2757459619)
		methodCSGBox3D[3] = gdnative.MethodOf("CSGBox3D\000", "get_material\000", 5934680)
		methodCSGCylinder3D[0] = gdnative.MethodOf("CSGCylinder3D\000", "set_radius\000", 373806689)
		methodCSGCylinder3D[1] = gdnative.MethodOf("CSGCylinder3D\000", "get_radius\000", 1740695150)
		methodCSGCylinder3D[2] = gdnative.MethodOf("CSGCylinder3D\000", "set_height\000", 373806689)
		methodCSGCylinder3D[3] = gdnative.MethodOf("CSGCylinder3D\000", "get_height\000", 1740695150)
		methodCSGCylinder3D[4] = gdnative.MethodOf("CSGCylinder3D\000", "set_sides\000", 1286410249)
		methodCSGCylinder3D[5] = gdnative.MethodOf("CSGCylinder3D\000", "get_sides\000", 3905245786)
		methodCSGCylinder3D[6] = gdnative.MethodOf("CSGCylinder3D\000", "set_cone\000", 2586408642)
		methodCSGCylinder3D[7] = gdnative.MethodOf("CSGCylinder3D\000", "is_cone\000", 36873697)
		methodCSGCylinder3D[8] = gdnative.MethodOf("CSGCylinder3D\000", "set_material\000", 2757459619)
		methodCSGCylinder3D[9] = gdnative.MethodOf("CSGCylinder3D\000", "get_material\000", 5934680)
		methodCSGCylinder3D[10] = gdnative.MethodOf("CSGCylinder3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGCylinder3D[11] = gdnative.MethodOf("CSGCylinder3D\000", "get_smooth_faces\000", 36873697)
		methodCSGMesh3D[0] = gdnative.MethodOf("CSGMesh3D\000", "set_mesh\000", 194775623)
		methodCSGMesh3D[1] = gdnative.MethodOf("CSGMesh3D\000", "get_mesh\000", 4081188045)
		methodCSGMesh3D[2] = gdnative.MethodOf("CSGMesh3D\000", "set_material\000", 2757459619)
		methodCSGMesh3D[3] = gdnative.MethodOf("CSGMesh3D\000", "get_material\000", 5934680)
		methodCSGPolygon3D[0] = gdnative.MethodOf("CSGPolygon3D\000", "set_polygon\000", 1509147220)
		methodCSGPolygon3D[1] = gdnative.MethodOf("CSGPolygon3D\000", "get_polygon\000", 2961356807)
		methodCSGPolygon3D[2] = gdnative.MethodOf("CSGPolygon3D\000", "set_mode\000", 3158377035)
		methodCSGPolygon3D[3] = gdnative.MethodOf("CSGPolygon3D\000", "get_mode\000", 1201612222)
		methodCSGPolygon3D[4] = gdnative.MethodOf("CSGPolygon3D\000", "set_depth\000", 373806689)
		methodCSGPolygon3D[5] = gdnative.MethodOf("CSGPolygon3D\000", "get_depth\000", 1740695150)
		methodCSGPolygon3D[6] = gdnative.MethodOf("CSGPolygon3D\000", "set_spin_degrees\000", 373806689)
		methodCSGPolygon3D[7] = gdnative.MethodOf("CSGPolygon3D\000", "get_spin_degrees\000", 1740695150)
		methodCSGPolygon3D[8] = gdnative.MethodOf("CSGPolygon3D\000", "set_spin_sides\000", 1286410249)
		methodCSGPolygon3D[9] = gdnative.MethodOf("CSGPolygon3D\000", "get_spin_sides\000", 3905245786)
		methodCSGPolygon3D[10] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_node\000", 1348162250)
		methodCSGPolygon3D[11] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_node\000", 4075236667)
		methodCSGPolygon3D[12] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_interval_type\000", 3744240707)
		methodCSGPolygon3D[13] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_interval_type\000", 3434618397)
		methodCSGPolygon3D[14] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_interval\000", 373806689)
		methodCSGPolygon3D[15] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_interval\000", 1740695150)
		methodCSGPolygon3D[16] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_simplify_angle\000", 373806689)
		methodCSGPolygon3D[17] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_simplify_angle\000", 1740695150)
		methodCSGPolygon3D[18] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_rotation\000", 1412947288)
		methodCSGPolygon3D[19] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_rotation\000", 647219346)
		methodCSGPolygon3D[20] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_local\000", 2586408642)
		methodCSGPolygon3D[21] = gdnative.MethodOf("CSGPolygon3D\000", "is_path_local\000", 36873697)
		methodCSGPolygon3D[22] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_continuous_u\000", 2586408642)
		methodCSGPolygon3D[23] = gdnative.MethodOf("CSGPolygon3D\000", "is_path_continuous_u\000", 36873697)
		methodCSGPolygon3D[24] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_u_distance\000", 373806689)
		methodCSGPolygon3D[25] = gdnative.MethodOf("CSGPolygon3D\000", "get_path_u_distance\000", 1740695150)
		methodCSGPolygon3D[26] = gdnative.MethodOf("CSGPolygon3D\000", "set_path_joined\000", 2586408642)
		methodCSGPolygon3D[27] = gdnative.MethodOf("CSGPolygon3D\000", "is_path_joined\000", 36873697)
		methodCSGPolygon3D[28] = gdnative.MethodOf("CSGPolygon3D\000", "set_material\000", 2757459619)
		methodCSGPolygon3D[29] = gdnative.MethodOf("CSGPolygon3D\000", "get_material\000", 5934680)
		methodCSGPolygon3D[30] = gdnative.MethodOf("CSGPolygon3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGPolygon3D[31] = gdnative.MethodOf("CSGPolygon3D\000", "get_smooth_faces\000", 36873697)
		methodCSGPrimitive3D[0] = gdnative.MethodOf("CSGPrimitive3D\000", "set_flip_faces\000", 2586408642)
		methodCSGPrimitive3D[1] = gdnative.MethodOf("CSGPrimitive3D\000", "get_flip_faces\000", 2240911060)
		methodCSGShape3D[0] = gdnative.MethodOf("CSGShape3D\000", "is_root_shape\000", 36873697)
		methodCSGShape3D[1] = gdnative.MethodOf("CSGShape3D\000", "set_operation\000", 811425055)
		methodCSGShape3D[2] = gdnative.MethodOf("CSGShape3D\000", "get_operation\000", 2662425879)
		methodCSGShape3D[3] = gdnative.MethodOf("CSGShape3D\000", "set_snap\000", 373806689)
		methodCSGShape3D[4] = gdnative.MethodOf("CSGShape3D\000", "get_snap\000", 1740695150)
		methodCSGShape3D[5] = gdnative.MethodOf("CSGShape3D\000", "set_use_collision\000", 2586408642)
		methodCSGShape3D[6] = gdnative.MethodOf("CSGShape3D\000", "is_using_collision\000", 36873697)
		methodCSGShape3D[7] = gdnative.MethodOf("CSGShape3D\000", "set_collision_layer\000", 1286410249)
		methodCSGShape3D[8] = gdnative.MethodOf("CSGShape3D\000", "get_collision_layer\000", 3905245786)
		methodCSGShape3D[9] = gdnative.MethodOf("CSGShape3D\000", "set_collision_mask\000", 1286410249)
		methodCSGShape3D[10] = gdnative.MethodOf("CSGShape3D\000", "get_collision_mask\000", 3905245786)
		methodCSGShape3D[11] = gdnative.MethodOf("CSGShape3D\000", "set_collision_mask_value\000", 300928843)
		methodCSGShape3D[12] = gdnative.MethodOf("CSGShape3D\000", "get_collision_mask_value\000", 1116898809)
		methodCSGShape3D[13] = gdnative.MethodOf("CSGShape3D\000", "set_collision_layer_value\000", 300928843)
		methodCSGShape3D[14] = gdnative.MethodOf("CSGShape3D\000", "get_collision_layer_value\000", 1116898809)
		methodCSGShape3D[15] = gdnative.MethodOf("CSGShape3D\000", "set_calculate_tangents\000", 2586408642)
		methodCSGShape3D[16] = gdnative.MethodOf("CSGShape3D\000", "is_calculating_tangents\000", 36873697)
		methodCSGShape3D[17] = gdnative.MethodOf("CSGShape3D\000", "get_meshes\000", 3995934104)
		methodCSGSphere3D[0] = gdnative.MethodOf("CSGSphere3D\000", "set_radius\000", 373806689)
		methodCSGSphere3D[1] = gdnative.MethodOf("CSGSphere3D\000", "get_radius\000", 1740695150)
		methodCSGSphere3D[2] = gdnative.MethodOf("CSGSphere3D\000", "set_radial_segments\000", 1286410249)
		methodCSGSphere3D[3] = gdnative.MethodOf("CSGSphere3D\000", "get_radial_segments\000", 3905245786)
		methodCSGSphere3D[4] = gdnative.MethodOf("CSGSphere3D\000", "set_rings\000", 1286410249)
		methodCSGSphere3D[5] = gdnative.MethodOf("CSGSphere3D\000", "get_rings\000", 3905245786)
		methodCSGSphere3D[6] = gdnative.MethodOf("CSGSphere3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGSphere3D[7] = gdnative.MethodOf("CSGSphere3D\000", "get_smooth_faces\000", 36873697)
		methodCSGSphere3D[8] = gdnative.MethodOf("CSGSphere3D\000", "set_material\000", 2757459619)
		methodCSGSphere3D[9] = gdnative.MethodOf("CSGSphere3D\000", "get_material\000", 5934680)
		methodCSGTorus3D[0] = gdnative.MethodOf("CSGTorus3D\000", "set_inner_radius\000", 373806689)
		methodCSGTorus3D[1] = gdnative.MethodOf("CSGTorus3D\000", "get_inner_radius\000", 1740695150)
		methodCSGTorus3D[2] = gdnative.MethodOf("CSGTorus3D\000", "set_outer_radius\000", 373806689)
		methodCSGTorus3D[3] = gdnative.MethodOf("CSGTorus3D\000", "get_outer_radius\000", 1740695150)
		methodCSGTorus3D[4] = gdnative.MethodOf("CSGTorus3D\000", "set_sides\000", 1286410249)
		methodCSGTorus3D[5] = gdnative.MethodOf("CSGTorus3D\000", "get_sides\000", 3905245786)
		methodCSGTorus3D[6] = gdnative.MethodOf("CSGTorus3D\000", "set_ring_sides\000", 1286410249)
		methodCSGTorus3D[7] = gdnative.MethodOf("CSGTorus3D\000", "get_ring_sides\000", 3905245786)
		methodCSGTorus3D[8] = gdnative.MethodOf("CSGTorus3D\000", "set_material\000", 2757459619)
		methodCSGTorus3D[9] = gdnative.MethodOf("CSGTorus3D\000", "get_material\000", 5934680)
		methodCSGTorus3D[10] = gdnative.MethodOf("CSGTorus3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGTorus3D[11] = gdnative.MethodOf("CSGTorus3D\000", "get_smooth_faces\000", 36873697)
		methodCallbackTweener[0] = gdnative.MethodOf("CallbackTweener\000", "set_delay\000", 3008182292)
		methodCamera2D[0] = gdnative.MethodOf("Camera2D\000", "set_offset\000", 743155724)
		methodCamera2D[1] = gdnative.MethodOf("Camera2D\000", "get_offset\000", 3341600327)
		methodCamera2D[2] = gdnative.MethodOf("Camera2D\000", "set_anchor_mode\000", 2050398218)
		methodCamera2D[3] = gdnative.MethodOf("Camera2D\000", "get_anchor_mode\000", 155978067)
		methodCamera2D[4] = gdnative.MethodOf("Camera2D\000", "set_rotating\000", 2586408642)
		methodCamera2D[5] = gdnative.MethodOf("Camera2D\000", "is_rotating\000", 36873697)
		methodCamera2D[6] = gdnative.MethodOf("Camera2D\000", "set_process_callback\000", 4201947462)
		methodCamera2D[7] = gdnative.MethodOf("Camera2D\000", "get_process_callback\000", 2325344499)
		methodCamera2D[8] = gdnative.MethodOf("Camera2D\000", "set_current\000", 2586408642)
		methodCamera2D[9] = gdnative.MethodOf("Camera2D\000", "is_current\000", 36873697)
		methodCamera2D[10] = gdnative.MethodOf("Camera2D\000", "set_limit\000", 437707142)
		methodCamera2D[11] = gdnative.MethodOf("Camera2D\000", "get_limit\000", 1983885014)
		methodCamera2D[12] = gdnative.MethodOf("Camera2D\000", "set_limit_smoothing_enabled\000", 2586408642)
		methodCamera2D[13] = gdnative.MethodOf("Camera2D\000", "is_limit_smoothing_enabled\000", 36873697)
		methodCamera2D[14] = gdnative.MethodOf("Camera2D\000", "set_drag_vertical_enabled\000", 2586408642)
		methodCamera2D[15] = gdnative.MethodOf("Camera2D\000", "is_drag_vertical_enabled\000", 36873697)
		methodCamera2D[16] = gdnative.MethodOf("Camera2D\000", "set_drag_horizontal_enabled\000", 2586408642)
		methodCamera2D[17] = gdnative.MethodOf("Camera2D\000", "is_drag_horizontal_enabled\000", 36873697)
		methodCamera2D[18] = gdnative.MethodOf("Camera2D\000", "set_drag_vertical_offset\000", 373806689)
		methodCamera2D[19] = gdnative.MethodOf("Camera2D\000", "get_drag_vertical_offset\000", 1740695150)
		methodCamera2D[20] = gdnative.MethodOf("Camera2D\000", "set_drag_horizontal_offset\000", 373806689)
		methodCamera2D[21] = gdnative.MethodOf("Camera2D\000", "get_drag_horizontal_offset\000", 1740695150)
		methodCamera2D[22] = gdnative.MethodOf("Camera2D\000", "set_drag_margin\000", 4290182280)
		methodCamera2D[23] = gdnative.MethodOf("Camera2D\000", "get_drag_margin\000", 2869120046)
		methodCamera2D[24] = gdnative.MethodOf("Camera2D\000", "get_camera_position\000", 3341600327)
		methodCamera2D[25] = gdnative.MethodOf("Camera2D\000", "get_camera_screen_center\000", 3341600327)
		methodCamera2D[26] = gdnative.MethodOf("Camera2D\000", "set_zoom\000", 743155724)
		methodCamera2D[27] = gdnative.MethodOf("Camera2D\000", "get_zoom\000", 3341600327)
		methodCamera2D[28] = gdnative.MethodOf("Camera2D\000", "set_custom_viewport\000", 1078189570)
		methodCamera2D[29] = gdnative.MethodOf("Camera2D\000", "get_custom_viewport\000", 3160264692)
		methodCamera2D[30] = gdnative.MethodOf("Camera2D\000", "set_follow_smoothing\000", 373806689)
		methodCamera2D[31] = gdnative.MethodOf("Camera2D\000", "get_follow_smoothing\000", 1740695150)
		methodCamera2D[32] = gdnative.MethodOf("Camera2D\000", "set_enable_follow_smoothing\000", 2586408642)
		methodCamera2D[33] = gdnative.MethodOf("Camera2D\000", "is_follow_smoothing_enabled\000", 36873697)
		methodCamera2D[34] = gdnative.MethodOf("Camera2D\000", "force_update_scroll\000", 3218959716)
		methodCamera2D[35] = gdnative.MethodOf("Camera2D\000", "reset_smoothing\000", 3218959716)
		methodCamera2D[36] = gdnative.MethodOf("Camera2D\000", "align\000", 3218959716)
		methodCamera2D[37] = gdnative.MethodOf("Camera2D\000", "set_screen_drawing_enabled\000", 2586408642)
		methodCamera2D[38] = gdnative.MethodOf("Camera2D\000", "is_screen_drawing_enabled\000", 36873697)
		methodCamera2D[39] = gdnative.MethodOf("Camera2D\000", "set_limit_drawing_enabled\000", 2586408642)
		methodCamera2D[40] = gdnative.MethodOf("Camera2D\000", "is_limit_drawing_enabled\000", 36873697)
		methodCamera2D[41] = gdnative.MethodOf("Camera2D\000", "set_margin_drawing_enabled\000", 2586408642)
		methodCamera2D[42] = gdnative.MethodOf("Camera2D\000", "is_margin_drawing_enabled\000", 36873697)
		methodCamera3D[0] = gdnative.MethodOf("Camera3D\000", "project_ray_normal\000", 1718073306)
		methodCamera3D[1] = gdnative.MethodOf("Camera3D\000", "project_local_ray_normal\000", 1718073306)
		methodCamera3D[2] = gdnative.MethodOf("Camera3D\000", "project_ray_origin\000", 1718073306)
		methodCamera3D[3] = gdnative.MethodOf("Camera3D\000", "unproject_position\000", 3758901831)
		methodCamera3D[4] = gdnative.MethodOf("Camera3D\000", "is_position_behind\000", 3108956480)
		methodCamera3D[5] = gdnative.MethodOf("Camera3D\000", "project_position\000", 2171975744)
		methodCamera3D[6] = gdnative.MethodOf("Camera3D\000", "set_perspective\000", 2385087082)
		methodCamera3D[7] = gdnative.MethodOf("Camera3D\000", "set_orthogonal\000", 2385087082)
		methodCamera3D[8] = gdnative.MethodOf("Camera3D\000", "set_frustum\000", 354890663)
		methodCamera3D[9] = gdnative.MethodOf("Camera3D\000", "make_current\000", 3218959716)
		methodCamera3D[10] = gdnative.MethodOf("Camera3D\000", "clear_current\000", 3216645846)
		methodCamera3D[11] = gdnative.MethodOf("Camera3D\000", "set_current\000", 2586408642)
		methodCamera3D[12] = gdnative.MethodOf("Camera3D\000", "is_current\000", 36873697)
		methodCamera3D[13] = gdnative.MethodOf("Camera3D\000", "get_camera_transform\000", 3229777777)
		methodCamera3D[14] = gdnative.MethodOf("Camera3D\000", "get_fov\000", 1740695150)
		methodCamera3D[15] = gdnative.MethodOf("Camera3D\000", "get_frustum_offset\000", 3341600327)
		methodCamera3D[16] = gdnative.MethodOf("Camera3D\000", "get_size\000", 1740695150)
		methodCamera3D[17] = gdnative.MethodOf("Camera3D\000", "get_far\000", 1740695150)
		methodCamera3D[18] = gdnative.MethodOf("Camera3D\000", "get_near\000", 1740695150)
		methodCamera3D[19] = gdnative.MethodOf("Camera3D\000", "set_fov\000", 373806689)
		methodCamera3D[20] = gdnative.MethodOf("Camera3D\000", "set_frustum_offset\000", 743155724)
		methodCamera3D[21] = gdnative.MethodOf("Camera3D\000", "set_size\000", 373806689)
		methodCamera3D[22] = gdnative.MethodOf("Camera3D\000", "set_far\000", 373806689)
		methodCamera3D[23] = gdnative.MethodOf("Camera3D\000", "set_near\000", 373806689)
		methodCamera3D[24] = gdnative.MethodOf("Camera3D\000", "get_projection\000", 2624185235)
		methodCamera3D[25] = gdnative.MethodOf("Camera3D\000", "set_projection\000", 4218540108)
		methodCamera3D[26] = gdnative.MethodOf("Camera3D\000", "set_h_offset\000", 373806689)
		methodCamera3D[27] = gdnative.MethodOf("Camera3D\000", "get_h_offset\000", 1740695150)
		methodCamera3D[28] = gdnative.MethodOf("Camera3D\000", "set_v_offset\000", 373806689)
		methodCamera3D[29] = gdnative.MethodOf("Camera3D\000", "get_v_offset\000", 1740695150)
		methodCamera3D[30] = gdnative.MethodOf("Camera3D\000", "set_cull_mask\000", 1286410249)
		methodCamera3D[31] = gdnative.MethodOf("Camera3D\000", "get_cull_mask\000", 3905245786)
		methodCamera3D[32] = gdnative.MethodOf("Camera3D\000", "set_environment\000", 4143518816)
		methodCamera3D[33] = gdnative.MethodOf("Camera3D\000", "get_environment\000", 3082064660)
		methodCamera3D[34] = gdnative.MethodOf("Camera3D\000", "set_effects\000", 1711096158)
		methodCamera3D[35] = gdnative.MethodOf("Camera3D\000", "get_effects\000", 2213573967)
		methodCamera3D[36] = gdnative.MethodOf("Camera3D\000", "set_keep_aspect_mode\000", 1740651252)
		methodCamera3D[37] = gdnative.MethodOf("Camera3D\000", "get_keep_aspect_mode\000", 2790278316)
		methodCamera3D[38] = gdnative.MethodOf("Camera3D\000", "set_doppler_tracking\000", 3109431270)
		methodCamera3D[39] = gdnative.MethodOf("Camera3D\000", "get_doppler_tracking\000", 1584483649)
		methodCamera3D[40] = gdnative.MethodOf("Camera3D\000", "get_frustum\000", 3995934104)
		methodCamera3D[41] = gdnative.MethodOf("Camera3D\000", "is_position_in_frustum\000", 3108956480)
		methodCamera3D[42] = gdnative.MethodOf("Camera3D\000", "get_camera_rid\000", 2944877500)
		methodCamera3D[43] = gdnative.MethodOf("Camera3D\000", "get_pyramid_shape_rid\000", 529393457)
		methodCamera3D[44] = gdnative.MethodOf("Camera3D\000", "set_cull_mask_value\000", 300928843)
		methodCamera3D[45] = gdnative.MethodOf("Camera3D\000", "get_cull_mask_value\000", 1116898809)
		methodCameraEffects[0] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_far_enabled\000", 2586408642)
		methodCameraEffects[1] = gdnative.MethodOf("CameraEffects\000", "is_dof_blur_far_enabled\000", 36873697)
		methodCameraEffects[2] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_far_distance\000", 373806689)
		methodCameraEffects[3] = gdnative.MethodOf("CameraEffects\000", "get_dof_blur_far_distance\000", 1740695150)
		methodCameraEffects[4] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_far_transition\000", 373806689)
		methodCameraEffects[5] = gdnative.MethodOf("CameraEffects\000", "get_dof_blur_far_transition\000", 1740695150)
		methodCameraEffects[6] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_near_enabled\000", 2586408642)
		methodCameraEffects[7] = gdnative.MethodOf("CameraEffects\000", "is_dof_blur_near_enabled\000", 36873697)
		methodCameraEffects[8] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_near_distance\000", 373806689)
		methodCameraEffects[9] = gdnative.MethodOf("CameraEffects\000", "get_dof_blur_near_distance\000", 1740695150)
		methodCameraEffects[10] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_near_transition\000", 373806689)
		methodCameraEffects[11] = gdnative.MethodOf("CameraEffects\000", "get_dof_blur_near_transition\000", 1740695150)
		methodCameraEffects[12] = gdnative.MethodOf("CameraEffects\000", "set_dof_blur_amount\000", 373806689)
		methodCameraEffects[13] = gdnative.MethodOf("CameraEffects\000", "get_dof_blur_amount\000", 1740695150)
		methodCameraEffects[14] = gdnative.MethodOf("CameraEffects\000", "set_override_exposure_enabled\000", 2586408642)
		methodCameraEffects[15] = gdnative.MethodOf("CameraEffects\000", "is_override_exposure_enabled\000", 36873697)
		methodCameraEffects[16] = gdnative.MethodOf("CameraEffects\000", "set_override_exposure\000", 373806689)
		methodCameraEffects[17] = gdnative.MethodOf("CameraEffects\000", "get_override_exposure\000", 1740695150)
		methodCameraFeed[0] = gdnative.MethodOf("CameraFeed\000", "get_id\000", 3905245786)
		methodCameraFeed[1] = gdnative.MethodOf("CameraFeed\000", "is_active\000", 36873697)
		methodCameraFeed[2] = gdnative.MethodOf("CameraFeed\000", "set_active\000", 2586408642)
		methodCameraFeed[3] = gdnative.MethodOf("CameraFeed\000", "get_name\000", 201670096)
		methodCameraFeed[4] = gdnative.MethodOf("CameraFeed\000", "get_position\000", 2711679033)
		methodCameraFeed[5] = gdnative.MethodOf("CameraFeed\000", "get_transform\000", 3814499831)
		methodCameraFeed[6] = gdnative.MethodOf("CameraFeed\000", "set_transform\000", 2761652528)
		methodCameraFeed[7] = gdnative.MethodOf("CameraFeed\000", "get_datatype\000", 1477782850)
		methodCameraServer[0] = gdnative.MethodOf("CameraServer\000", "get_feed\000", 361927068)
		methodCameraServer[1] = gdnative.MethodOf("CameraServer\000", "get_feed_count\000", 2455072627)
		methodCameraServer[2] = gdnative.MethodOf("CameraServer\000", "feeds\000", 2915620761)
		methodCameraServer[3] = gdnative.MethodOf("CameraServer\000", "add_feed\000", 3204782488)
		methodCameraServer[4] = gdnative.MethodOf("CameraServer\000", "remove_feed\000", 3204782488)
		methodCameraTexture[0] = gdnative.MethodOf("CameraTexture\000", "set_camera_feed_id\000", 1286410249)
		methodCameraTexture[1] = gdnative.MethodOf("CameraTexture\000", "get_camera_feed_id\000", 3905245786)
		methodCameraTexture[2] = gdnative.MethodOf("CameraTexture\000", "set_which_feed\000", 1595299230)
		methodCameraTexture[3] = gdnative.MethodOf("CameraTexture\000", "get_which_feed\000", 91039457)
		methodCameraTexture[4] = gdnative.MethodOf("CameraTexture\000", "set_camera_active\000", 2586408642)
		methodCameraTexture[5] = gdnative.MethodOf("CameraTexture\000", "get_camera_active\000", 36873697)
		methodCanvasGroup[0] = gdnative.MethodOf("CanvasGroup\000", "set_fit_margin\000", 373806689)
		methodCanvasGroup[1] = gdnative.MethodOf("CanvasGroup\000", "get_fit_margin\000", 1740695150)
		methodCanvasGroup[2] = gdnative.MethodOf("CanvasGroup\000", "set_clear_margin\000", 373806689)
		methodCanvasGroup[3] = gdnative.MethodOf("CanvasGroup\000", "get_clear_margin\000", 1740695150)
		methodCanvasGroup[4] = gdnative.MethodOf("CanvasGroup\000", "set_use_mipmaps\000", 2586408642)
		methodCanvasGroup[5] = gdnative.MethodOf("CanvasGroup\000", "is_using_mipmaps\000", 36873697)
		methodCanvasItem[0] = gdnative.MethodOf("CanvasItem\000", "get_canvas_item\000", 2944877500)
		methodCanvasItem[1] = gdnative.MethodOf("CanvasItem\000", "set_visible\000", 2586408642)
		methodCanvasItem[2] = gdnative.MethodOf("CanvasItem\000", "is_visible\000", 36873697)
		methodCanvasItem[3] = gdnative.MethodOf("CanvasItem\000", "is_visible_in_tree\000", 36873697)
		methodCanvasItem[4] = gdnative.MethodOf("CanvasItem\000", "show\000", 3218959716)
		methodCanvasItem[5] = gdnative.MethodOf("CanvasItem\000", "hide\000", 3218959716)
		methodCanvasItem[6] = gdnative.MethodOf("CanvasItem\000", "update\000", 3218959716)
		methodCanvasItem[7] = gdnative.MethodOf("CanvasItem\000", "set_as_top_level\000", 2586408642)
		methodCanvasItem[8] = gdnative.MethodOf("CanvasItem\000", "is_set_as_top_level\000", 36873697)
		methodCanvasItem[9] = gdnative.MethodOf("CanvasItem\000", "set_light_mask\000", 1286410249)
		methodCanvasItem[10] = gdnative.MethodOf("CanvasItem\000", "get_light_mask\000", 3905245786)
		methodCanvasItem[11] = gdnative.MethodOf("CanvasItem\000", "set_modulate\000", 2920490490)
		methodCanvasItem[12] = gdnative.MethodOf("CanvasItem\000", "get_modulate\000", 3444240500)
		methodCanvasItem[13] = gdnative.MethodOf("CanvasItem\000", "set_self_modulate\000", 2920490490)
		methodCanvasItem[14] = gdnative.MethodOf("CanvasItem\000", "get_self_modulate\000", 3444240500)
		methodCanvasItem[15] = gdnative.MethodOf("CanvasItem\000", "set_draw_behind_parent\000", 2586408642)
		methodCanvasItem[16] = gdnative.MethodOf("CanvasItem\000", "is_draw_behind_parent_enabled\000", 36873697)
		methodCanvasItem[17] = gdnative.MethodOf("CanvasItem\000", "draw_line\000", 2516941890)
		methodCanvasItem[18] = gdnative.MethodOf("CanvasItem\000", "draw_dashed_line\000", 3655830234)
		methodCanvasItem[19] = gdnative.MethodOf("CanvasItem\000", "draw_polyline\000", 4175878946)
		methodCanvasItem[20] = gdnative.MethodOf("CanvasItem\000", "draw_polyline_colors\000", 2239164197)
		methodCanvasItem[21] = gdnative.MethodOf("CanvasItem\000", "draw_arc\000", 3486841771)
		methodCanvasItem[22] = gdnative.MethodOf("CanvasItem\000", "draw_multiline\000", 4230657331)
		methodCanvasItem[23] = gdnative.MethodOf("CanvasItem\000", "draw_multiline_colors\000", 235933050)
		methodCanvasItem[24] = gdnative.MethodOf("CanvasItem\000", "draw_rect\000", 84391229)
		methodCanvasItem[25] = gdnative.MethodOf("CanvasItem\000", "draw_circle\000", 3063020269)
		methodCanvasItem[26] = gdnative.MethodOf("CanvasItem\000", "draw_texture\000", 1695860435)
		methodCanvasItem[27] = gdnative.MethodOf("CanvasItem\000", "draw_texture_rect\000", 3204081724)
		methodCanvasItem[28] = gdnative.MethodOf("CanvasItem\000", "draw_texture_rect_region\000", 3196597532)
		methodCanvasItem[29] = gdnative.MethodOf("CanvasItem\000", "draw_msdf_texture_rect_region\000", 1246729963)
		methodCanvasItem[30] = gdnative.MethodOf("CanvasItem\000", "draw_style_box\000", 388176283)
		methodCanvasItem[31] = gdnative.MethodOf("CanvasItem\000", "draw_primitive\000", 3548136561)
		methodCanvasItem[32] = gdnative.MethodOf("CanvasItem\000", "draw_polygon\000", 2683625537)
		methodCanvasItem[33] = gdnative.MethodOf("CanvasItem\000", "draw_colored_polygon\000", 1659099617)
		methodCanvasItem[34] = gdnative.MethodOf("CanvasItem\000", "draw_string\000", 2552080639)
		methodCanvasItem[35] = gdnative.MethodOf("CanvasItem\000", "draw_multiline_string\000", 4002645436)
		methodCanvasItem[36] = gdnative.MethodOf("CanvasItem\000", "draw_string_outline\000", 850005221)
		methodCanvasItem[37] = gdnative.MethodOf("CanvasItem\000", "draw_multiline_string_outline\000", 3717870722)
		methodCanvasItem[38] = gdnative.MethodOf("CanvasItem\000", "draw_char\000", 2329089032)
		methodCanvasItem[39] = gdnative.MethodOf("CanvasItem\000", "draw_char_outline\000", 419453826)
		methodCanvasItem[40] = gdnative.MethodOf("CanvasItem\000", "draw_mesh\000", 1634855856)
		methodCanvasItem[41] = gdnative.MethodOf("CanvasItem\000", "draw_multimesh\000", 937992368)
		methodCanvasItem[42] = gdnative.MethodOf("CanvasItem\000", "draw_set_transform\000", 4181505845)
		methodCanvasItem[43] = gdnative.MethodOf("CanvasItem\000", "draw_set_transform_matrix\000", 2761652528)
		methodCanvasItem[44] = gdnative.MethodOf("CanvasItem\000", "draw_animation_slice\000", 2295343543)
		methodCanvasItem[45] = gdnative.MethodOf("CanvasItem\000", "draw_end_animation\000", 3218959716)
		methodCanvasItem[46] = gdnative.MethodOf("CanvasItem\000", "get_transform\000", 3814499831)
		methodCanvasItem[47] = gdnative.MethodOf("CanvasItem\000", "get_global_transform\000", 3814499831)
		methodCanvasItem[48] = gdnative.MethodOf("CanvasItem\000", "get_global_transform_with_canvas\000", 3814499831)
		methodCanvasItem[49] = gdnative.MethodOf("CanvasItem\000", "get_viewport_transform\000", 3814499831)
		methodCanvasItem[50] = gdnative.MethodOf("CanvasItem\000", "get_viewport_rect\000", 1639390495)
		methodCanvasItem[51] = gdnative.MethodOf("CanvasItem\000", "get_canvas_transform\000", 3814499831)
		methodCanvasItem[52] = gdnative.MethodOf("CanvasItem\000", "get_screen_transform\000", 3814499831)
		methodCanvasItem[53] = gdnative.MethodOf("CanvasItem\000", "get_local_mouse_position\000", 3341600327)
		methodCanvasItem[54] = gdnative.MethodOf("CanvasItem\000", "get_global_mouse_position\000", 3341600327)
		methodCanvasItem[55] = gdnative.MethodOf("CanvasItem\000", "get_canvas\000", 2944877500)
		methodCanvasItem[56] = gdnative.MethodOf("CanvasItem\000", "get_world_2d\000", 2339128592)
		methodCanvasItem[57] = gdnative.MethodOf("CanvasItem\000", "set_material\000", 2757459619)
		methodCanvasItem[58] = gdnative.MethodOf("CanvasItem\000", "get_material\000", 5934680)
		methodCanvasItem[59] = gdnative.MethodOf("CanvasItem\000", "set_use_parent_material\000", 2586408642)
		methodCanvasItem[60] = gdnative.MethodOf("CanvasItem\000", "get_use_parent_material\000", 36873697)
		methodCanvasItem[61] = gdnative.MethodOf("CanvasItem\000", "set_notify_local_transform\000", 2586408642)
		methodCanvasItem[62] = gdnative.MethodOf("CanvasItem\000", "is_local_transform_notification_enabled\000", 36873697)
		methodCanvasItem[63] = gdnative.MethodOf("CanvasItem\000", "set_notify_transform\000", 2586408642)
		methodCanvasItem[64] = gdnative.MethodOf("CanvasItem\000", "is_transform_notification_enabled\000", 36873697)
		methodCanvasItem[65] = gdnative.MethodOf("CanvasItem\000", "force_update_transform\000", 3218959716)
		methodCanvasItem[66] = gdnative.MethodOf("CanvasItem\000", "make_canvas_position_local\000", 2656412154)
		methodCanvasItem[67] = gdnative.MethodOf("CanvasItem\000", "make_input_local\000", 811130057)
		methodCanvasItem[68] = gdnative.MethodOf("CanvasItem\000", "set_texture_filter\000", 1037999706)
		methodCanvasItem[69] = gdnative.MethodOf("CanvasItem\000", "get_texture_filter\000", 121960042)
		methodCanvasItem[70] = gdnative.MethodOf("CanvasItem\000", "set_texture_repeat\000", 1716472974)
		methodCanvasItem[71] = gdnative.MethodOf("CanvasItem\000", "get_texture_repeat\000", 2667158319)
		methodCanvasItem[72] = gdnative.MethodOf("CanvasItem\000", "set_clip_children\000", 2586408642)
		methodCanvasItem[73] = gdnative.MethodOf("CanvasItem\000", "is_clipping_children\000", 36873697)
		methodCanvasItemMaterial[0] = gdnative.MethodOf("CanvasItemMaterial\000", "set_blend_mode\000", 1786054936)
		methodCanvasItemMaterial[1] = gdnative.MethodOf("CanvasItemMaterial\000", "get_blend_mode\000", 3318684035)
		methodCanvasItemMaterial[2] = gdnative.MethodOf("CanvasItemMaterial\000", "set_light_mode\000", 628074070)
		methodCanvasItemMaterial[3] = gdnative.MethodOf("CanvasItemMaterial\000", "get_light_mode\000", 3863292382)
		methodCanvasItemMaterial[4] = gdnative.MethodOf("CanvasItemMaterial\000", "set_particles_animation\000", 2586408642)
		methodCanvasItemMaterial[5] = gdnative.MethodOf("CanvasItemMaterial\000", "get_particles_animation\000", 36873697)
		methodCanvasItemMaterial[6] = gdnative.MethodOf("CanvasItemMaterial\000", "set_particles_anim_h_frames\000", 1286410249)
		methodCanvasItemMaterial[7] = gdnative.MethodOf("CanvasItemMaterial\000", "get_particles_anim_h_frames\000", 3905245786)
		methodCanvasItemMaterial[8] = gdnative.MethodOf("CanvasItemMaterial\000", "set_particles_anim_v_frames\000", 1286410249)
		methodCanvasItemMaterial[9] = gdnative.MethodOf("CanvasItemMaterial\000", "get_particles_anim_v_frames\000", 3905245786)
		methodCanvasItemMaterial[10] = gdnative.MethodOf("CanvasItemMaterial\000", "set_particles_anim_loop\000", 2586408642)
		methodCanvasItemMaterial[11] = gdnative.MethodOf("CanvasItemMaterial\000", "get_particles_anim_loop\000", 36873697)
		methodCanvasLayer[0] = gdnative.MethodOf("CanvasLayer\000", "set_layer\000", 1286410249)
		methodCanvasLayer[1] = gdnative.MethodOf("CanvasLayer\000", "get_layer\000", 3905245786)
		methodCanvasLayer[2] = gdnative.MethodOf("CanvasLayer\000", "set_visible\000", 2586408642)
		methodCanvasLayer[3] = gdnative.MethodOf("CanvasLayer\000", "is_visible\000", 36873697)
		methodCanvasLayer[4] = gdnative.MethodOf("CanvasLayer\000", "show\000", 3218959716)
		methodCanvasLayer[5] = gdnative.MethodOf("CanvasLayer\000", "hide\000", 3218959716)
		methodCanvasLayer[6] = gdnative.MethodOf("CanvasLayer\000", "set_transform\000", 2761652528)
		methodCanvasLayer[7] = gdnative.MethodOf("CanvasLayer\000", "get_transform\000", 3814499831)
		methodCanvasLayer[8] = gdnative.MethodOf("CanvasLayer\000", "set_offset\000", 743155724)
		methodCanvasLayer[9] = gdnative.MethodOf("CanvasLayer\000", "get_offset\000", 3341600327)
		methodCanvasLayer[10] = gdnative.MethodOf("CanvasLayer\000", "set_rotation\000", 373806689)
		methodCanvasLayer[11] = gdnative.MethodOf("CanvasLayer\000", "get_rotation\000", 1740695150)
		methodCanvasLayer[12] = gdnative.MethodOf("CanvasLayer\000", "set_scale\000", 743155724)
		methodCanvasLayer[13] = gdnative.MethodOf("CanvasLayer\000", "get_scale\000", 3341600327)
		methodCanvasLayer[14] = gdnative.MethodOf("CanvasLayer\000", "set_follow_viewport\000", 2586408642)
		methodCanvasLayer[15] = gdnative.MethodOf("CanvasLayer\000", "is_following_viewport\000", 36873697)
		methodCanvasLayer[16] = gdnative.MethodOf("CanvasLayer\000", "set_follow_viewport_scale\000", 373806689)
		methodCanvasLayer[17] = gdnative.MethodOf("CanvasLayer\000", "get_follow_viewport_scale\000", 1740695150)
		methodCanvasLayer[18] = gdnative.MethodOf("CanvasLayer\000", "set_custom_viewport\000", 1078189570)
		methodCanvasLayer[19] = gdnative.MethodOf("CanvasLayer\000", "get_custom_viewport\000", 3160264692)
		methodCanvasLayer[20] = gdnative.MethodOf("CanvasLayer\000", "get_canvas\000", 2944877500)
		methodCanvasModulate[0] = gdnative.MethodOf("CanvasModulate\000", "set_color\000", 2920490490)
		methodCanvasModulate[1] = gdnative.MethodOf("CanvasModulate\000", "get_color\000", 3444240500)
		methodCanvasTexture[0] = gdnative.MethodOf("CanvasTexture\000", "set_diffuse_texture\000", 4051416890)
		methodCanvasTexture[1] = gdnative.MethodOf("CanvasTexture\000", "get_diffuse_texture\000", 3635182373)
		methodCanvasTexture[2] = gdnative.MethodOf("CanvasTexture\000", "set_normal_texture\000", 4051416890)
		methodCanvasTexture[3] = gdnative.MethodOf("CanvasTexture\000", "get_normal_texture\000", 3635182373)
		methodCanvasTexture[4] = gdnative.MethodOf("CanvasTexture\000", "set_specular_texture\000", 4051416890)
		methodCanvasTexture[5] = gdnative.MethodOf("CanvasTexture\000", "get_specular_texture\000", 3635182373)
		methodCanvasTexture[6] = gdnative.MethodOf("CanvasTexture\000", "set_specular_color\000", 2920490490)
		methodCanvasTexture[7] = gdnative.MethodOf("CanvasTexture\000", "get_specular_color\000", 3444240500)
		methodCanvasTexture[8] = gdnative.MethodOf("CanvasTexture\000", "set_specular_shininess\000", 373806689)
		methodCanvasTexture[9] = gdnative.MethodOf("CanvasTexture\000", "get_specular_shininess\000", 1740695150)
		methodCanvasTexture[10] = gdnative.MethodOf("CanvasTexture\000", "set_texture_filter\000", 1037999706)
		methodCanvasTexture[11] = gdnative.MethodOf("CanvasTexture\000", "get_texture_filter\000", 121960042)
		methodCanvasTexture[12] = gdnative.MethodOf("CanvasTexture\000", "set_texture_repeat\000", 1716472974)
		methodCanvasTexture[13] = gdnative.MethodOf("CanvasTexture\000", "get_texture_repeat\000", 2667158319)
		methodCapsuleMesh[0] = gdnative.MethodOf("CapsuleMesh\000", "set_radius\000", 373806689)
		methodCapsuleMesh[1] = gdnative.MethodOf("CapsuleMesh\000", "get_radius\000", 1740695150)
		methodCapsuleMesh[2] = gdnative.MethodOf("CapsuleMesh\000", "set_height\000", 373806689)
		methodCapsuleMesh[3] = gdnative.MethodOf("CapsuleMesh\000", "get_height\000", 1740695150)
		methodCapsuleMesh[4] = gdnative.MethodOf("CapsuleMesh\000", "set_radial_segments\000", 1286410249)
		methodCapsuleMesh[5] = gdnative.MethodOf("CapsuleMesh\000", "get_radial_segments\000", 3905245786)
		methodCapsuleMesh[6] = gdnative.MethodOf("CapsuleMesh\000", "set_rings\000", 1286410249)
		methodCapsuleMesh[7] = gdnative.MethodOf("CapsuleMesh\000", "get_rings\000", 3905245786)
		methodCapsuleShape2D[0] = gdnative.MethodOf("CapsuleShape2D\000", "set_radius\000", 373806689)
		methodCapsuleShape2D[1] = gdnative.MethodOf("CapsuleShape2D\000", "get_radius\000", 1740695150)
		methodCapsuleShape2D[2] = gdnative.MethodOf("CapsuleShape2D\000", "set_height\000", 373806689)
		methodCapsuleShape2D[3] = gdnative.MethodOf("CapsuleShape2D\000", "get_height\000", 1740695150)
		methodCapsuleShape3D[0] = gdnative.MethodOf("CapsuleShape3D\000", "set_radius\000", 373806689)
		methodCapsuleShape3D[1] = gdnative.MethodOf("CapsuleShape3D\000", "get_radius\000", 1740695150)
		methodCapsuleShape3D[2] = gdnative.MethodOf("CapsuleShape3D\000", "set_height\000", 373806689)
		methodCapsuleShape3D[3] = gdnative.MethodOf("CapsuleShape3D\000", "get_height\000", 1740695150)
		methodCenterContainer[0] = gdnative.MethodOf("CenterContainer\000", "set_use_top_left\000", 2586408642)
		methodCenterContainer[1] = gdnative.MethodOf("CenterContainer\000", "is_using_top_left\000", 36873697)
		methodCharFXTransform[0] = gdnative.MethodOf("CharFXTransform\000", "get_range\000", 2741790807)
		methodCharFXTransform[1] = gdnative.MethodOf("CharFXTransform\000", "set_range\000", 1130785943)
		methodCharFXTransform[2] = gdnative.MethodOf("CharFXTransform\000", "get_elapsed_time\000", 191475506)
		methodCharFXTransform[3] = gdnative.MethodOf("CharFXTransform\000", "set_elapsed_time\000", 373806689)
		methodCharFXTransform[4] = gdnative.MethodOf("CharFXTransform\000", "is_visible\000", 2240911060)
		methodCharFXTransform[5] = gdnative.MethodOf("CharFXTransform\000", "set_visibility\000", 2586408642)
		methodCharFXTransform[6] = gdnative.MethodOf("CharFXTransform\000", "is_outline\000", 2240911060)
		methodCharFXTransform[7] = gdnative.MethodOf("CharFXTransform\000", "set_outline\000", 2586408642)
		methodCharFXTransform[8] = gdnative.MethodOf("CharFXTransform\000", "get_offset\000", 1497962370)
		methodCharFXTransform[9] = gdnative.MethodOf("CharFXTransform\000", "set_offset\000", 743155724)
		methodCharFXTransform[10] = gdnative.MethodOf("CharFXTransform\000", "get_color\000", 3200896285)
		methodCharFXTransform[11] = gdnative.MethodOf("CharFXTransform\000", "set_color\000", 2920490490)
		methodCharFXTransform[12] = gdnative.MethodOf("CharFXTransform\000", "get_environment\000", 2382534195)
		methodCharFXTransform[13] = gdnative.MethodOf("CharFXTransform\000", "set_environment\000", 4155329257)
		methodCharFXTransform[14] = gdnative.MethodOf("CharFXTransform\000", "get_glyph_index\000", 3905245786)
		methodCharFXTransform[15] = gdnative.MethodOf("CharFXTransform\000", "set_glyph_index\000", 1286410249)
		methodCharFXTransform[16] = gdnative.MethodOf("CharFXTransform\000", "get_glyph_count\000", 3905245786)
		methodCharFXTransform[17] = gdnative.MethodOf("CharFXTransform\000", "set_glyph_count\000", 1286410249)
		methodCharFXTransform[18] = gdnative.MethodOf("CharFXTransform\000", "get_glyph_flags\000", 3905245786)
		methodCharFXTransform[19] = gdnative.MethodOf("CharFXTransform\000", "set_glyph_flags\000", 1286410249)
		methodCharFXTransform[20] = gdnative.MethodOf("CharFXTransform\000", "get_font\000", 2944877500)
		methodCharFXTransform[21] = gdnative.MethodOf("CharFXTransform\000", "set_font\000", 2722037293)
		methodCharacterBody2D[0] = gdnative.MethodOf("CharacterBody2D\000", "move_and_slide\000", 2240911060)
		methodCharacterBody2D[1] = gdnative.MethodOf("CharacterBody2D\000", "set_velocity\000", 743155724)
		methodCharacterBody2D[2] = gdnative.MethodOf("CharacterBody2D\000", "get_velocity\000", 3341600327)
		methodCharacterBody2D[3] = gdnative.MethodOf("CharacterBody2D\000", "set_safe_margin\000", 373806689)
		methodCharacterBody2D[4] = gdnative.MethodOf("CharacterBody2D\000", "get_safe_margin\000", 1740695150)
		methodCharacterBody2D[5] = gdnative.MethodOf("CharacterBody2D\000", "is_floor_stop_on_slope_enabled\000", 36873697)
		methodCharacterBody2D[6] = gdnative.MethodOf("CharacterBody2D\000", "set_floor_stop_on_slope_enabled\000", 2586408642)
		methodCharacterBody2D[7] = gdnative.MethodOf("CharacterBody2D\000", "set_floor_constant_speed_enabled\000", 2586408642)
		methodCharacterBody2D[8] = gdnative.MethodOf("CharacterBody2D\000", "is_floor_constant_speed_enabled\000", 36873697)
		methodCharacterBody2D[9] = gdnative.MethodOf("CharacterBody2D\000", "set_floor_block_on_wall_enabled\000", 2586408642)
		methodCharacterBody2D[10] = gdnative.MethodOf("CharacterBody2D\000", "is_floor_block_on_wall_enabled\000", 36873697)
		methodCharacterBody2D[11] = gdnative.MethodOf("CharacterBody2D\000", "set_slide_on_ceiling_enabled\000", 2586408642)
		methodCharacterBody2D[12] = gdnative.MethodOf("CharacterBody2D\000", "is_slide_on_ceiling_enabled\000", 36873697)
		methodCharacterBody2D[13] = gdnative.MethodOf("CharacterBody2D\000", "set_moving_platform_floor_layers\000", 1286410249)
		methodCharacterBody2D[14] = gdnative.MethodOf("CharacterBody2D\000", "get_moving_platform_floor_layers\000", 3905245786)
		methodCharacterBody2D[15] = gdnative.MethodOf("CharacterBody2D\000", "set_moving_platform_wall_layers\000", 1286410249)
		methodCharacterBody2D[16] = gdnative.MethodOf("CharacterBody2D\000", "get_moving_platform_wall_layers\000", 3905245786)
		methodCharacterBody2D[17] = gdnative.MethodOf("CharacterBody2D\000", "get_max_slides\000", 3905245786)
		methodCharacterBody2D[18] = gdnative.MethodOf("CharacterBody2D\000", "set_max_slides\000", 1286410249)
		methodCharacterBody2D[19] = gdnative.MethodOf("CharacterBody2D\000", "get_floor_max_angle\000", 1740695150)
		methodCharacterBody2D[20] = gdnative.MethodOf("CharacterBody2D\000", "set_floor_max_angle\000", 373806689)
		methodCharacterBody2D[21] = gdnative.MethodOf("CharacterBody2D\000", "get_floor_snap_length\000", 191475506)
		methodCharacterBody2D[22] = gdnative.MethodOf("CharacterBody2D\000", "set_floor_snap_length\000", 373806689)
		methodCharacterBody2D[23] = gdnative.MethodOf("CharacterBody2D\000", "get_wall_min_slide_angle\000", 1740695150)
		methodCharacterBody2D[24] = gdnative.MethodOf("CharacterBody2D\000", "set_wall_min_slide_angle\000", 373806689)
		methodCharacterBody2D[25] = gdnative.MethodOf("CharacterBody2D\000", "get_up_direction\000", 3341600327)
		methodCharacterBody2D[26] = gdnative.MethodOf("CharacterBody2D\000", "set_up_direction\000", 743155724)
		methodCharacterBody2D[27] = gdnative.MethodOf("CharacterBody2D\000", "set_motion_mode\000", 1224392233)
		methodCharacterBody2D[28] = gdnative.MethodOf("CharacterBody2D\000", "get_motion_mode\000", 1160151236)
		methodCharacterBody2D[29] = gdnative.MethodOf("CharacterBody2D\000", "set_moving_platform_apply_velocity_on_leave\000", 1451865543)
		methodCharacterBody2D[30] = gdnative.MethodOf("CharacterBody2D\000", "get_moving_platform_apply_velocity_on_leave\000", 3847096330)
		methodCharacterBody2D[31] = gdnative.MethodOf("CharacterBody2D\000", "is_on_floor\000", 36873697)
		methodCharacterBody2D[32] = gdnative.MethodOf("CharacterBody2D\000", "is_on_floor_only\000", 36873697)
		methodCharacterBody2D[33] = gdnative.MethodOf("CharacterBody2D\000", "is_on_ceiling\000", 36873697)
		methodCharacterBody2D[34] = gdnative.MethodOf("CharacterBody2D\000", "is_on_ceiling_only\000", 36873697)
		methodCharacterBody2D[35] = gdnative.MethodOf("CharacterBody2D\000", "is_on_wall\000", 36873697)
		methodCharacterBody2D[36] = gdnative.MethodOf("CharacterBody2D\000", "is_on_wall_only\000", 36873697)
		methodCharacterBody2D[37] = gdnative.MethodOf("CharacterBody2D\000", "get_floor_normal\000", 3341600327)
		methodCharacterBody2D[38] = gdnative.MethodOf("CharacterBody2D\000", "get_wall_normal\000", 3341600327)
		methodCharacterBody2D[39] = gdnative.MethodOf("CharacterBody2D\000", "get_last_motion\000", 3341600327)
		methodCharacterBody2D[40] = gdnative.MethodOf("CharacterBody2D\000", "get_position_delta\000", 3341600327)
		methodCharacterBody2D[41] = gdnative.MethodOf("CharacterBody2D\000", "get_real_velocity\000", 3341600327)
		methodCharacterBody2D[42] = gdnative.MethodOf("CharacterBody2D\000", "get_floor_angle\000", 2841063350)
		methodCharacterBody2D[43] = gdnative.MethodOf("CharacterBody2D\000", "get_platform_velocity\000", 3341600327)
		methodCharacterBody2D[44] = gdnative.MethodOf("CharacterBody2D\000", "get_slide_collision_count\000", 3905245786)
		methodCharacterBody2D[45] = gdnative.MethodOf("CharacterBody2D\000", "get_slide_collision\000", 860659811)
		methodCharacterBody2D[46] = gdnative.MethodOf("CharacterBody2D\000", "get_last_slide_collision\000", 2161834755)
		methodCharacterBody3D[0] = gdnative.MethodOf("CharacterBody3D\000", "move_and_slide\000", 2240911060)
		methodCharacterBody3D[1] = gdnative.MethodOf("CharacterBody3D\000", "set_velocity\000", 3460891852)
		methodCharacterBody3D[2] = gdnative.MethodOf("CharacterBody3D\000", "get_velocity\000", 3360562783)
		methodCharacterBody3D[3] = gdnative.MethodOf("CharacterBody3D\000", "set_safe_margin\000", 373806689)
		methodCharacterBody3D[4] = gdnative.MethodOf("CharacterBody3D\000", "get_safe_margin\000", 1740695150)
		methodCharacterBody3D[5] = gdnative.MethodOf("CharacterBody3D\000", "is_floor_stop_on_slope_enabled\000", 36873697)
		methodCharacterBody3D[6] = gdnative.MethodOf("CharacterBody3D\000", "set_floor_stop_on_slope_enabled\000", 2586408642)
		methodCharacterBody3D[7] = gdnative.MethodOf("CharacterBody3D\000", "set_floor_constant_speed_enabled\000", 2586408642)
		methodCharacterBody3D[8] = gdnative.MethodOf("CharacterBody3D\000", "is_floor_constant_speed_enabled\000", 36873697)
		methodCharacterBody3D[9] = gdnative.MethodOf("CharacterBody3D\000", "set_floor_block_on_wall_enabled\000", 2586408642)
		methodCharacterBody3D[10] = gdnative.MethodOf("CharacterBody3D\000", "is_floor_block_on_wall_enabled\000", 36873697)
		methodCharacterBody3D[11] = gdnative.MethodOf("CharacterBody3D\000", "set_slide_on_ceiling_enabled\000", 2586408642)
		methodCharacterBody3D[12] = gdnative.MethodOf("CharacterBody3D\000", "is_slide_on_ceiling_enabled\000", 36873697)
		methodCharacterBody3D[13] = gdnative.MethodOf("CharacterBody3D\000", "set_moving_platform_floor_layers\000", 1286410249)
		methodCharacterBody3D[14] = gdnative.MethodOf("CharacterBody3D\000", "get_moving_platform_floor_layers\000", 3905245786)
		methodCharacterBody3D[15] = gdnative.MethodOf("CharacterBody3D\000", "set_moving_platform_wall_layers\000", 1286410249)
		methodCharacterBody3D[16] = gdnative.MethodOf("CharacterBody3D\000", "get_moving_platform_wall_layers\000", 3905245786)
		methodCharacterBody3D[17] = gdnative.MethodOf("CharacterBody3D\000", "get_max_slides\000", 3905245786)
		methodCharacterBody3D[18] = gdnative.MethodOf("CharacterBody3D\000", "set_max_slides\000", 1286410249)
		methodCharacterBody3D[19] = gdnative.MethodOf("CharacterBody3D\000", "get_floor_max_angle\000", 1740695150)
		methodCharacterBody3D[20] = gdnative.MethodOf("CharacterBody3D\000", "set_floor_max_angle\000", 373806689)
		methodCharacterBody3D[21] = gdnative.MethodOf("CharacterBody3D\000", "get_floor_snap_length\000", 191475506)
		methodCharacterBody3D[22] = gdnative.MethodOf("CharacterBody3D\000", "set_floor_snap_length\000", 373806689)
		methodCharacterBody3D[23] = gdnative.MethodOf("CharacterBody3D\000", "get_wall_min_slide_angle\000", 1740695150)
		methodCharacterBody3D[24] = gdnative.MethodOf("CharacterBody3D\000", "set_wall_min_slide_angle\000", 373806689)
		methodCharacterBody3D[25] = gdnative.MethodOf("CharacterBody3D\000", "get_up_direction\000", 3360562783)
		methodCharacterBody3D[26] = gdnative.MethodOf("CharacterBody3D\000", "set_up_direction\000", 3460891852)
		methodCharacterBody3D[27] = gdnative.MethodOf("CharacterBody3D\000", "set_motion_mode\000", 2690739026)
		methodCharacterBody3D[28] = gdnative.MethodOf("CharacterBody3D\000", "get_motion_mode\000", 3529553604)
		methodCharacterBody3D[29] = gdnative.MethodOf("CharacterBody3D\000", "set_moving_platform_apply_velocity_on_leave\000", 2748509440)
		methodCharacterBody3D[30] = gdnative.MethodOf("CharacterBody3D\000", "get_moving_platform_apply_velocity_on_leave\000", 4009183668)
		methodCharacterBody3D[31] = gdnative.MethodOf("CharacterBody3D\000", "is_on_floor\000", 36873697)
		methodCharacterBody3D[32] = gdnative.MethodOf("CharacterBody3D\000", "is_on_floor_only\000", 36873697)
		methodCharacterBody3D[33] = gdnative.MethodOf("CharacterBody3D\000", "is_on_ceiling\000", 36873697)
		methodCharacterBody3D[34] = gdnative.MethodOf("CharacterBody3D\000", "is_on_ceiling_only\000", 36873697)
		methodCharacterBody3D[35] = gdnative.MethodOf("CharacterBody3D\000", "is_on_wall\000", 36873697)
		methodCharacterBody3D[36] = gdnative.MethodOf("CharacterBody3D\000", "is_on_wall_only\000", 36873697)
		methodCharacterBody3D[37] = gdnative.MethodOf("CharacterBody3D\000", "get_floor_normal\000", 3360562783)
		methodCharacterBody3D[38] = gdnative.MethodOf("CharacterBody3D\000", "get_wall_normal\000", 3360562783)
		methodCharacterBody3D[39] = gdnative.MethodOf("CharacterBody3D\000", "get_last_motion\000", 3360562783)
		methodCharacterBody3D[40] = gdnative.MethodOf("CharacterBody3D\000", "get_position_delta\000", 3360562783)
		methodCharacterBody3D[41] = gdnative.MethodOf("CharacterBody3D\000", "get_real_velocity\000", 3360562783)
		methodCharacterBody3D[42] = gdnative.MethodOf("CharacterBody3D\000", "get_floor_angle\000", 2906300789)
		methodCharacterBody3D[43] = gdnative.MethodOf("CharacterBody3D\000", "get_platform_velocity\000", 3360562783)
		methodCharacterBody3D[44] = gdnative.MethodOf("CharacterBody3D\000", "get_slide_collision_count\000", 3905245786)
		methodCharacterBody3D[45] = gdnative.MethodOf("CharacterBody3D\000", "get_slide_collision\000", 107003663)
		methodCharacterBody3D[46] = gdnative.MethodOf("CharacterBody3D\000", "get_last_slide_collision\000", 186875014)
		methodCircleShape2D[0] = gdnative.MethodOf("CircleShape2D\000", "set_radius\000", 373806689)
		methodCircleShape2D[1] = gdnative.MethodOf("CircleShape2D\000", "get_radius\000", 1740695150)
		methodClassDB[0] = gdnative.MethodOf("ClassDB\000", "get_class_list\000", 1139954409)
		methodClassDB[1] = gdnative.MethodOf("ClassDB\000", "get_inheriters_from_class\000", 1761182771)
		methodClassDB[2] = gdnative.MethodOf("ClassDB\000", "get_parent_class\000", 1965194235)
		methodClassDB[3] = gdnative.MethodOf("ClassDB\000", "class_exists\000", 2619796661)
		methodClassDB[4] = gdnative.MethodOf("ClassDB\000", "is_parent_class\000", 471820014)
		methodClassDB[5] = gdnative.MethodOf("ClassDB\000", "can_instantiate\000", 2619796661)
		methodClassDB[6] = gdnative.MethodOf("ClassDB\000", "instantiate\000", 2760726917)
		methodClassDB[7] = gdnative.MethodOf("ClassDB\000", "class_has_signal\000", 471820014)
		methodClassDB[8] = gdnative.MethodOf("ClassDB\000", "class_get_signal\000", 3061114238)
		methodClassDB[9] = gdnative.MethodOf("ClassDB\000", "class_get_signal_list\000", 3504980660)
		methodClassDB[10] = gdnative.MethodOf("ClassDB\000", "class_get_property_list\000", 3504980660)
		methodClassDB[11] = gdnative.MethodOf("ClassDB\000", "class_get_property\000", 2498641674)
		methodClassDB[12] = gdnative.MethodOf("ClassDB\000", "class_set_property\000", 1690314931)
		methodClassDB[13] = gdnative.MethodOf("ClassDB\000", "class_has_method\000", 3860701026)
		methodClassDB[14] = gdnative.MethodOf("ClassDB\000", "class_get_method_list\000", 3504980660)
		methodClassDB[15] = gdnative.MethodOf("ClassDB\000", "class_get_integer_constant_list\000", 3031669221)
		methodClassDB[16] = gdnative.MethodOf("ClassDB\000", "class_has_integer_constant\000", 471820014)
		methodClassDB[17] = gdnative.MethodOf("ClassDB\000", "class_get_integer_constant\000", 2419549490)
		methodClassDB[18] = gdnative.MethodOf("ClassDB\000", "class_has_enum\000", 3860701026)
		methodClassDB[19] = gdnative.MethodOf("ClassDB\000", "class_get_enum_list\000", 3031669221)
		methodClassDB[20] = gdnative.MethodOf("ClassDB\000", "class_get_enum_constants\000", 661528303)
		methodClassDB[21] = gdnative.MethodOf("ClassDB\000", "class_get_integer_constant_enum\000", 2457504236)
		methodClassDB[22] = gdnative.MethodOf("ClassDB\000", "is_class_enabled\000", 2619796661)
		methodCodeEdit[0] = gdnative.MethodOf("CodeEdit\000", "set_indent_size\000", 1286410249)
		methodCodeEdit[1] = gdnative.MethodOf("CodeEdit\000", "get_indent_size\000", 3905245786)
		methodCodeEdit[2] = gdnative.MethodOf("CodeEdit\000", "set_indent_using_spaces\000", 2586408642)
		methodCodeEdit[3] = gdnative.MethodOf("CodeEdit\000", "is_indent_using_spaces\000", 36873697)
		methodCodeEdit[4] = gdnative.MethodOf("CodeEdit\000", "set_auto_indent_enabled\000", 2586408642)
		methodCodeEdit[5] = gdnative.MethodOf("CodeEdit\000", "is_auto_indent_enabled\000", 36873697)
		methodCodeEdit[6] = gdnative.MethodOf("CodeEdit\000", "set_auto_indent_prefixes\000", 381264803)
		methodCodeEdit[7] = gdnative.MethodOf("CodeEdit\000", "get_auto_indent_prefixes\000", 3995934104)
		methodCodeEdit[8] = gdnative.MethodOf("CodeEdit\000", "do_indent\000", 3218959716)
		methodCodeEdit[9] = gdnative.MethodOf("CodeEdit\000", "do_unindent\000", 3218959716)
		methodCodeEdit[10] = gdnative.MethodOf("CodeEdit\000", "indent_lines\000", 3218959716)
		methodCodeEdit[11] = gdnative.MethodOf("CodeEdit\000", "unindent_lines\000", 3218959716)
		methodCodeEdit[12] = gdnative.MethodOf("CodeEdit\000", "set_auto_brace_completion_enabled\000", 2586408642)
		methodCodeEdit[13] = gdnative.MethodOf("CodeEdit\000", "is_auto_brace_completion_enabled\000", 36873697)
		methodCodeEdit[14] = gdnative.MethodOf("CodeEdit\000", "set_highlight_matching_braces_enabled\000", 2586408642)
		methodCodeEdit[15] = gdnative.MethodOf("CodeEdit\000", "is_highlight_matching_braces_enabled\000", 36873697)
		methodCodeEdit[16] = gdnative.MethodOf("CodeEdit\000", "add_auto_brace_completion_pair\000", 3186203200)
		methodCodeEdit[17] = gdnative.MethodOf("CodeEdit\000", "set_auto_brace_completion_pairs\000", 4155329257)
		methodCodeEdit[18] = gdnative.MethodOf("CodeEdit\000", "get_auto_brace_completion_pairs\000", 3102165223)
		methodCodeEdit[19] = gdnative.MethodOf("CodeEdit\000", "has_auto_brace_completion_open_key\000", 3927539163)
		methodCodeEdit[20] = gdnative.MethodOf("CodeEdit\000", "has_auto_brace_completion_close_key\000", 3927539163)
		methodCodeEdit[21] = gdnative.MethodOf("CodeEdit\000", "get_auto_brace_completion_close_key\000", 3135753539)
		methodCodeEdit[22] = gdnative.MethodOf("CodeEdit\000", "set_draw_breakpoints_gutter\000", 2586408642)
		methodCodeEdit[23] = gdnative.MethodOf("CodeEdit\000", "is_drawing_breakpoints_gutter\000", 36873697)
		methodCodeEdit[24] = gdnative.MethodOf("CodeEdit\000", "set_draw_bookmarks_gutter\000", 2586408642)
		methodCodeEdit[25] = gdnative.MethodOf("CodeEdit\000", "is_drawing_bookmarks_gutter\000", 36873697)
		methodCodeEdit[26] = gdnative.MethodOf("CodeEdit\000", "set_draw_executing_lines_gutter\000", 2586408642)
		methodCodeEdit[27] = gdnative.MethodOf("CodeEdit\000", "is_drawing_executing_lines_gutter\000", 36873697)
		methodCodeEdit[28] = gdnative.MethodOf("CodeEdit\000", "set_line_as_breakpoint\000", 300928843)
		methodCodeEdit[29] = gdnative.MethodOf("CodeEdit\000", "is_line_breakpointed\000", 1116898809)
		methodCodeEdit[30] = gdnative.MethodOf("CodeEdit\000", "clear_breakpointed_lines\000", 3218959716)
		methodCodeEdit[31] = gdnative.MethodOf("CodeEdit\000", "get_breakpointed_lines\000", 3995934104)
		methodCodeEdit[32] = gdnative.MethodOf("CodeEdit\000", "set_line_as_bookmarked\000", 300928843)
		methodCodeEdit[33] = gdnative.MethodOf("CodeEdit\000", "is_line_bookmarked\000", 1116898809)
		methodCodeEdit[34] = gdnative.MethodOf("CodeEdit\000", "clear_bookmarked_lines\000", 3218959716)
		methodCodeEdit[35] = gdnative.MethodOf("CodeEdit\000", "get_bookmarked_lines\000", 3995934104)
		methodCodeEdit[36] = gdnative.MethodOf("CodeEdit\000", "set_line_as_executing\000", 300928843)
		methodCodeEdit[37] = gdnative.MethodOf("CodeEdit\000", "is_line_executing\000", 1116898809)
		methodCodeEdit[38] = gdnative.MethodOf("CodeEdit\000", "clear_executing_lines\000", 3218959716)
		methodCodeEdit[39] = gdnative.MethodOf("CodeEdit\000", "get_executing_lines\000", 3995934104)
		methodCodeEdit[40] = gdnative.MethodOf("CodeEdit\000", "set_draw_line_numbers\000", 2586408642)
		methodCodeEdit[41] = gdnative.MethodOf("CodeEdit\000", "is_draw_line_numbers_enabled\000", 36873697)
		methodCodeEdit[42] = gdnative.MethodOf("CodeEdit\000", "set_line_numbers_zero_padded\000", 2586408642)
		methodCodeEdit[43] = gdnative.MethodOf("CodeEdit\000", "is_line_numbers_zero_padded\000", 36873697)
		methodCodeEdit[44] = gdnative.MethodOf("CodeEdit\000", "set_draw_fold_gutter\000", 2586408642)
		methodCodeEdit[45] = gdnative.MethodOf("CodeEdit\000", "is_drawing_fold_gutter\000", 36873697)
		methodCodeEdit[46] = gdnative.MethodOf("CodeEdit\000", "set_line_folding_enabled\000", 2586408642)
		methodCodeEdit[47] = gdnative.MethodOf("CodeEdit\000", "is_line_folding_enabled\000", 36873697)
		methodCodeEdit[48] = gdnative.MethodOf("CodeEdit\000", "can_fold_line\000", 1116898809)
		methodCodeEdit[49] = gdnative.MethodOf("CodeEdit\000", "fold_line\000", 1286410249)
		methodCodeEdit[50] = gdnative.MethodOf("CodeEdit\000", "unfold_line\000", 1286410249)
		methodCodeEdit[51] = gdnative.MethodOf("CodeEdit\000", "fold_all_lines\000", 3218959716)
		methodCodeEdit[52] = gdnative.MethodOf("CodeEdit\000", "unfold_all_lines\000", 3218959716)
		methodCodeEdit[53] = gdnative.MethodOf("CodeEdit\000", "toggle_foldable_line\000", 1286410249)
		methodCodeEdit[54] = gdnative.MethodOf("CodeEdit\000", "is_line_folded\000", 1116898809)
		methodCodeEdit[55] = gdnative.MethodOf("CodeEdit\000", "get_folded_lines\000", 3995934104)
		methodCodeEdit[56] = gdnative.MethodOf("CodeEdit\000", "add_string_delimiter\000", 3146098955)
		methodCodeEdit[57] = gdnative.MethodOf("CodeEdit\000", "remove_string_delimiter\000", 83702148)
		methodCodeEdit[58] = gdnative.MethodOf("CodeEdit\000", "has_string_delimiter\000", 3927539163)
		methodCodeEdit[59] = gdnative.MethodOf("CodeEdit\000", "set_string_delimiters\000", 381264803)
		methodCodeEdit[60] = gdnative.MethodOf("CodeEdit\000", "clear_string_delimiters\000", 3218959716)
		methodCodeEdit[61] = gdnative.MethodOf("CodeEdit\000", "get_string_delimiters\000", 3995934104)
		methodCodeEdit[62] = gdnative.MethodOf("CodeEdit\000", "is_in_string\000", 3294126239)
		methodCodeEdit[63] = gdnative.MethodOf("CodeEdit\000", "add_comment_delimiter\000", 3146098955)
		methodCodeEdit[64] = gdnative.MethodOf("CodeEdit\000", "remove_comment_delimiter\000", 83702148)
		methodCodeEdit[65] = gdnative.MethodOf("CodeEdit\000", "has_comment_delimiter\000", 3927539163)
		methodCodeEdit[66] = gdnative.MethodOf("CodeEdit\000", "set_comment_delimiters\000", 381264803)
		methodCodeEdit[67] = gdnative.MethodOf("CodeEdit\000", "clear_comment_delimiters\000", 3218959716)
		methodCodeEdit[68] = gdnative.MethodOf("CodeEdit\000", "get_comment_delimiters\000", 3995934104)
		methodCodeEdit[69] = gdnative.MethodOf("CodeEdit\000", "is_in_comment\000", 3294126239)
		methodCodeEdit[70] = gdnative.MethodOf("CodeEdit\000", "get_delimiter_start_key\000", 844755477)
		methodCodeEdit[71] = gdnative.MethodOf("CodeEdit\000", "get_delimiter_end_key\000", 844755477)
		methodCodeEdit[72] = gdnative.MethodOf("CodeEdit\000", "get_delimiter_start_position\000", 3016396712)
		methodCodeEdit[73] = gdnative.MethodOf("CodeEdit\000", "get_delimiter_end_position\000", 3016396712)
		methodCodeEdit[74] = gdnative.MethodOf("CodeEdit\000", "set_code_hint\000", 83702148)
		methodCodeEdit[75] = gdnative.MethodOf("CodeEdit\000", "set_code_hint_draw_below\000", 2586408642)
		methodCodeEdit[76] = gdnative.MethodOf("CodeEdit\000", "get_text_for_code_completion\000", 201670096)
		methodCodeEdit[77] = gdnative.MethodOf("CodeEdit\000", "request_code_completion\000", 107499316)
		methodCodeEdit[78] = gdnative.MethodOf("CodeEdit\000", "add_code_completion_option\000", 3965792804)
		methodCodeEdit[79] = gdnative.MethodOf("CodeEdit\000", "update_code_completion_options\000", 2586408642)
		methodCodeEdit[80] = gdnative.MethodOf("CodeEdit\000", "get_code_completion_options\000", 3995934104)
		methodCodeEdit[81] = gdnative.MethodOf("CodeEdit\000", "get_code_completion_option\000", 3485342025)
		methodCodeEdit[82] = gdnative.MethodOf("CodeEdit\000", "get_code_completion_selected_index\000", 3905245786)
		methodCodeEdit[83] = gdnative.MethodOf("CodeEdit\000", "set_code_completion_selected_index\000", 1286410249)
		methodCodeEdit[84] = gdnative.MethodOf("CodeEdit\000", "confirm_code_completion\000", 107499316)
		methodCodeEdit[85] = gdnative.MethodOf("CodeEdit\000", "cancel_code_completion\000", 3218959716)
		methodCodeEdit[86] = gdnative.MethodOf("CodeEdit\000", "set_code_completion_enabled\000", 2586408642)
		methodCodeEdit[87] = gdnative.MethodOf("CodeEdit\000", "is_code_completion_enabled\000", 36873697)
		methodCodeEdit[88] = gdnative.MethodOf("CodeEdit\000", "set_code_completion_prefixes\000", 381264803)
		methodCodeEdit[89] = gdnative.MethodOf("CodeEdit\000", "get_code_comletion_prefixes\000", 3995934104)
		methodCodeEdit[90] = gdnative.MethodOf("CodeEdit\000", "set_line_length_guidelines\000", 381264803)
		methodCodeEdit[91] = gdnative.MethodOf("CodeEdit\000", "get_line_length_guidelines\000", 3995934104)
		methodCodeEdit[92] = gdnative.MethodOf("CodeEdit\000", "set_symbol_lookup_on_click_enabled\000", 2586408642)
		methodCodeEdit[93] = gdnative.MethodOf("CodeEdit\000", "is_symbol_lookup_on_click_enabled\000", 36873697)
		methodCodeEdit[94] = gdnative.MethodOf("CodeEdit\000", "get_text_for_symbol_lookup\000", 2841200299)
		methodCodeEdit[95] = gdnative.MethodOf("CodeEdit\000", "set_symbol_lookup_word_as_valid\000", 2586408642)
		methodCodeHighlighter[0] = gdnative.MethodOf("CodeHighlighter\000", "add_keyword_color\000", 1636512886)
		methodCodeHighlighter[1] = gdnative.MethodOf("CodeHighlighter\000", "remove_keyword_color\000", 83702148)
		methodCodeHighlighter[2] = gdnative.MethodOf("CodeHighlighter\000", "has_keyword_color\000", 3927539163)
		methodCodeHighlighter[3] = gdnative.MethodOf("CodeHighlighter\000", "get_keyword_color\000", 3855908743)
		methodCodeHighlighter[4] = gdnative.MethodOf("CodeHighlighter\000", "set_keyword_colors\000", 4155329257)
		methodCodeHighlighter[5] = gdnative.MethodOf("CodeHighlighter\000", "clear_keyword_colors\000", 3218959716)
		methodCodeHighlighter[6] = gdnative.MethodOf("CodeHighlighter\000", "get_keyword_colors\000", 3102165223)
		methodCodeHighlighter[7] = gdnative.MethodOf("CodeHighlighter\000", "add_member_keyword_color\000", 1636512886)
		methodCodeHighlighter[8] = gdnative.MethodOf("CodeHighlighter\000", "remove_member_keyword_color\000", 83702148)
		methodCodeHighlighter[9] = gdnative.MethodOf("CodeHighlighter\000", "has_member_keyword_color\000", 3927539163)
		methodCodeHighlighter[10] = gdnative.MethodOf("CodeHighlighter\000", "get_member_keyword_color\000", 3855908743)
		methodCodeHighlighter[11] = gdnative.MethodOf("CodeHighlighter\000", "set_member_keyword_colors\000", 4155329257)
		methodCodeHighlighter[12] = gdnative.MethodOf("CodeHighlighter\000", "clear_member_keyword_colors\000", 3218959716)
		methodCodeHighlighter[13] = gdnative.MethodOf("CodeHighlighter\000", "get_member_keyword_colors\000", 3102165223)
		methodCodeHighlighter[14] = gdnative.MethodOf("CodeHighlighter\000", "add_color_region\000", 2924977451)
		methodCodeHighlighter[15] = gdnative.MethodOf("CodeHighlighter\000", "remove_color_region\000", 83702148)
		methodCodeHighlighter[16] = gdnative.MethodOf("CodeHighlighter\000", "has_color_region\000", 3927539163)
		methodCodeHighlighter[17] = gdnative.MethodOf("CodeHighlighter\000", "set_color_regions\000", 4155329257)
		methodCodeHighlighter[18] = gdnative.MethodOf("CodeHighlighter\000", "clear_color_regions\000", 3218959716)
		methodCodeHighlighter[19] = gdnative.MethodOf("CodeHighlighter\000", "get_color_regions\000", 3102165223)
		methodCodeHighlighter[20] = gdnative.MethodOf("CodeHighlighter\000", "set_function_color\000", 2920490490)
		methodCodeHighlighter[21] = gdnative.MethodOf("CodeHighlighter\000", "get_function_color\000", 3444240500)
		methodCodeHighlighter[22] = gdnative.MethodOf("CodeHighlighter\000", "set_number_color\000", 2920490490)
		methodCodeHighlighter[23] = gdnative.MethodOf("CodeHighlighter\000", "get_number_color\000", 3444240500)
		methodCodeHighlighter[24] = gdnative.MethodOf("CodeHighlighter\000", "set_symbol_color\000", 2920490490)
		methodCodeHighlighter[25] = gdnative.MethodOf("CodeHighlighter\000", "get_symbol_color\000", 3444240500)
		methodCodeHighlighter[26] = gdnative.MethodOf("CodeHighlighter\000", "set_member_variable_color\000", 2920490490)
		methodCodeHighlighter[27] = gdnative.MethodOf("CodeHighlighter\000", "get_member_variable_color\000", 3444240500)
		methodCollisionObject2D[0] = gdnative.MethodOf("CollisionObject2D\000", "get_rid\000", 2944877500)
		methodCollisionObject2D[1] = gdnative.MethodOf("CollisionObject2D\000", "set_collision_layer\000", 1286410249)
		methodCollisionObject2D[2] = gdnative.MethodOf("CollisionObject2D\000", "get_collision_layer\000", 3905245786)
		methodCollisionObject2D[3] = gdnative.MethodOf("CollisionObject2D\000", "set_collision_mask\000", 1286410249)
		methodCollisionObject2D[4] = gdnative.MethodOf("CollisionObject2D\000", "get_collision_mask\000", 3905245786)
		methodCollisionObject2D[5] = gdnative.MethodOf("CollisionObject2D\000", "set_collision_layer_value\000", 300928843)
		methodCollisionObject2D[6] = gdnative.MethodOf("CollisionObject2D\000", "get_collision_layer_value\000", 1116898809)
		methodCollisionObject2D[7] = gdnative.MethodOf("CollisionObject2D\000", "set_collision_mask_value\000", 300928843)
		methodCollisionObject2D[8] = gdnative.MethodOf("CollisionObject2D\000", "get_collision_mask_value\000", 1116898809)
		methodCollisionObject2D[9] = gdnative.MethodOf("CollisionObject2D\000", "set_disable_mode\000", 1919204045)
		methodCollisionObject2D[10] = gdnative.MethodOf("CollisionObject2D\000", "get_disable_mode\000", 3172846349)
		methodCollisionObject2D[11] = gdnative.MethodOf("CollisionObject2D\000", "set_pickable\000", 2586408642)
		methodCollisionObject2D[12] = gdnative.MethodOf("CollisionObject2D\000", "is_pickable\000", 36873697)
		methodCollisionObject2D[13] = gdnative.MethodOf("CollisionObject2D\000", "create_shape_owner\000", 3429307534)
		methodCollisionObject2D[14] = gdnative.MethodOf("CollisionObject2D\000", "remove_shape_owner\000", 1286410249)
		methodCollisionObject2D[15] = gdnative.MethodOf("CollisionObject2D\000", "get_shape_owners\000", 2915620761)
		methodCollisionObject2D[16] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_set_transform\000", 30160968)
		methodCollisionObject2D[17] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_get_transform\000", 3836996910)
		methodCollisionObject2D[18] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_get_owner\000", 3332903315)
		methodCollisionObject2D[19] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_set_disabled\000", 300928843)
		methodCollisionObject2D[20] = gdnative.MethodOf("CollisionObject2D\000", "is_shape_owner_disabled\000", 1116898809)
		methodCollisionObject2D[21] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_set_one_way_collision\000", 300928843)
		methodCollisionObject2D[22] = gdnative.MethodOf("CollisionObject2D\000", "is_shape_owner_one_way_collision_enabled\000", 1116898809)
		methodCollisionObject2D[23] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_set_one_way_collision_margin\000", 1602489585)
		methodCollisionObject2D[24] = gdnative.MethodOf("CollisionObject2D\000", "get_shape_owner_one_way_collision_margin\000", 2339986948)
		methodCollisionObject2D[25] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_add_shape\000", 2077425081)
		methodCollisionObject2D[26] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_get_shape_count\000", 923996154)
		methodCollisionObject2D[27] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_get_shape\000", 3106725749)
		methodCollisionObject2D[28] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_get_shape_index\000", 3175239445)
		methodCollisionObject2D[29] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_remove_shape\000", 3937882851)
		methodCollisionObject2D[30] = gdnative.MethodOf("CollisionObject2D\000", "shape_owner_clear_shapes\000", 1286410249)
		methodCollisionObject2D[31] = gdnative.MethodOf("CollisionObject2D\000", "shape_find_owner\000", 923996154)
		methodCollisionObject3D[0] = gdnative.MethodOf("CollisionObject3D\000", "set_collision_layer\000", 1286410249)
		methodCollisionObject3D[1] = gdnative.MethodOf("CollisionObject3D\000", "get_collision_layer\000", 3905245786)
		methodCollisionObject3D[2] = gdnative.MethodOf("CollisionObject3D\000", "set_collision_mask\000", 1286410249)
		methodCollisionObject3D[3] = gdnative.MethodOf("CollisionObject3D\000", "get_collision_mask\000", 3905245786)
		methodCollisionObject3D[4] = gdnative.MethodOf("CollisionObject3D\000", "set_collision_layer_value\000", 300928843)
		methodCollisionObject3D[5] = gdnative.MethodOf("CollisionObject3D\000", "get_collision_layer_value\000", 1116898809)
		methodCollisionObject3D[6] = gdnative.MethodOf("CollisionObject3D\000", "set_collision_mask_value\000", 300928843)
		methodCollisionObject3D[7] = gdnative.MethodOf("CollisionObject3D\000", "get_collision_mask_value\000", 1116898809)
		methodCollisionObject3D[8] = gdnative.MethodOf("CollisionObject3D\000", "set_disable_mode\000", 1623620376)
		methodCollisionObject3D[9] = gdnative.MethodOf("CollisionObject3D\000", "get_disable_mode\000", 410164780)
		methodCollisionObject3D[10] = gdnative.MethodOf("CollisionObject3D\000", "set_ray_pickable\000", 2586408642)
		methodCollisionObject3D[11] = gdnative.MethodOf("CollisionObject3D\000", "is_ray_pickable\000", 36873697)
		methodCollisionObject3D[12] = gdnative.MethodOf("CollisionObject3D\000", "set_capture_input_on_drag\000", 2586408642)
		methodCollisionObject3D[13] = gdnative.MethodOf("CollisionObject3D\000", "get_capture_input_on_drag\000", 36873697)
		methodCollisionObject3D[14] = gdnative.MethodOf("CollisionObject3D\000", "get_rid\000", 2944877500)
		methodCollisionObject3D[15] = gdnative.MethodOf("CollisionObject3D\000", "create_shape_owner\000", 3429307534)
		methodCollisionObject3D[16] = gdnative.MethodOf("CollisionObject3D\000", "remove_shape_owner\000", 1286410249)
		methodCollisionObject3D[17] = gdnative.MethodOf("CollisionObject3D\000", "get_shape_owners\000", 2915620761)
		methodCollisionObject3D[18] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_set_transform\000", 3616898986)
		methodCollisionObject3D[19] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_get_transform\000", 1965739696)
		methodCollisionObject3D[20] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_get_owner\000", 3332903315)
		methodCollisionObject3D[21] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_set_disabled\000", 300928843)
		methodCollisionObject3D[22] = gdnative.MethodOf("CollisionObject3D\000", "is_shape_owner_disabled\000", 1116898809)
		methodCollisionObject3D[23] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_add_shape\000", 2566676345)
		methodCollisionObject3D[24] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_get_shape_count\000", 923996154)
		methodCollisionObject3D[25] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_get_shape\000", 4015519174)
		methodCollisionObject3D[26] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_get_shape_index\000", 3175239445)
		methodCollisionObject3D[27] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_remove_shape\000", 3937882851)
		methodCollisionObject3D[28] = gdnative.MethodOf("CollisionObject3D\000", "shape_owner_clear_shapes\000", 1286410249)
		methodCollisionObject3D[29] = gdnative.MethodOf("CollisionObject3D\000", "shape_find_owner\000", 923996154)
		methodCollisionPolygon2D[0] = gdnative.MethodOf("CollisionPolygon2D\000", "set_polygon\000", 1509147220)
		methodCollisionPolygon2D[1] = gdnative.MethodOf("CollisionPolygon2D\000", "get_polygon\000", 2961356807)
		methodCollisionPolygon2D[2] = gdnative.MethodOf("CollisionPolygon2D\000", "set_build_mode\000", 2780803135)
		methodCollisionPolygon2D[3] = gdnative.MethodOf("CollisionPolygon2D\000", "get_build_mode\000", 3044948800)
		methodCollisionPolygon2D[4] = gdnative.MethodOf("CollisionPolygon2D\000", "set_disabled\000", 2586408642)
		methodCollisionPolygon2D[5] = gdnative.MethodOf("CollisionPolygon2D\000", "is_disabled\000", 36873697)
		methodCollisionPolygon2D[6] = gdnative.MethodOf("CollisionPolygon2D\000", "set_one_way_collision\000", 2586408642)
		methodCollisionPolygon2D[7] = gdnative.MethodOf("CollisionPolygon2D\000", "is_one_way_collision_enabled\000", 36873697)
		methodCollisionPolygon2D[8] = gdnative.MethodOf("CollisionPolygon2D\000", "set_one_way_collision_margin\000", 373806689)
		methodCollisionPolygon2D[9] = gdnative.MethodOf("CollisionPolygon2D\000", "get_one_way_collision_margin\000", 1740695150)
		methodCollisionPolygon3D[0] = gdnative.MethodOf("CollisionPolygon3D\000", "set_depth\000", 373806689)
		methodCollisionPolygon3D[1] = gdnative.MethodOf("CollisionPolygon3D\000", "get_depth\000", 1740695150)
		methodCollisionPolygon3D[2] = gdnative.MethodOf("CollisionPolygon3D\000", "set_polygon\000", 1509147220)
		methodCollisionPolygon3D[3] = gdnative.MethodOf("CollisionPolygon3D\000", "get_polygon\000", 2961356807)
		methodCollisionPolygon3D[4] = gdnative.MethodOf("CollisionPolygon3D\000", "set_disabled\000", 2586408642)
		methodCollisionPolygon3D[5] = gdnative.MethodOf("CollisionPolygon3D\000", "is_disabled\000", 36873697)
		methodCollisionPolygon3D[6] = gdnative.MethodOf("CollisionPolygon3D\000", "set_margin\000", 373806689)
		methodCollisionPolygon3D[7] = gdnative.MethodOf("CollisionPolygon3D\000", "get_margin\000", 1740695150)
		methodCollisionShape2D[0] = gdnative.MethodOf("CollisionShape2D\000", "set_shape\000", 771364740)
		methodCollisionShape2D[1] = gdnative.MethodOf("CollisionShape2D\000", "get_shape\000", 522005891)
		methodCollisionShape2D[2] = gdnative.MethodOf("CollisionShape2D\000", "set_disabled\000", 2586408642)
		methodCollisionShape2D[3] = gdnative.MethodOf("CollisionShape2D\000", "is_disabled\000", 36873697)
		methodCollisionShape2D[4] = gdnative.MethodOf("CollisionShape2D\000", "set_one_way_collision\000", 2586408642)
		methodCollisionShape2D[5] = gdnative.MethodOf("CollisionShape2D\000", "is_one_way_collision_enabled\000", 36873697)
		methodCollisionShape2D[6] = gdnative.MethodOf("CollisionShape2D\000", "set_one_way_collision_margin\000", 373806689)
		methodCollisionShape2D[7] = gdnative.MethodOf("CollisionShape2D\000", "get_one_way_collision_margin\000", 1740695150)
		methodCollisionShape3D[0] = gdnative.MethodOf("CollisionShape3D\000", "resource_changed\000", 968641751)
		methodCollisionShape3D[1] = gdnative.MethodOf("CollisionShape3D\000", "set_shape\000", 1549710052)
		methodCollisionShape3D[2] = gdnative.MethodOf("CollisionShape3D\000", "get_shape\000", 3214262478)
		methodCollisionShape3D[3] = gdnative.MethodOf("CollisionShape3D\000", "set_disabled\000", 2586408642)
		methodCollisionShape3D[4] = gdnative.MethodOf("CollisionShape3D\000", "is_disabled\000", 36873697)
		methodCollisionShape3D[5] = gdnative.MethodOf("CollisionShape3D\000", "make_convex_from_siblings\000", 3218959716)
		methodColorPicker[0] = gdnative.MethodOf("ColorPicker\000", "set_pick_color\000", 2920490490)
		methodColorPicker[1] = gdnative.MethodOf("ColorPicker\000", "get_pick_color\000", 3444240500)
		methodColorPicker[2] = gdnative.MethodOf("ColorPicker\000", "set_deferred_mode\000", 2586408642)
		methodColorPicker[3] = gdnative.MethodOf("ColorPicker\000", "is_deferred_mode\000", 36873697)
		methodColorPicker[4] = gdnative.MethodOf("ColorPicker\000", "set_color_mode\000", 1579114136)
		methodColorPicker[5] = gdnative.MethodOf("ColorPicker\000", "get_color_mode\000", 392907674)
		methodColorPicker[6] = gdnative.MethodOf("ColorPicker\000", "set_edit_alpha\000", 2586408642)
		methodColorPicker[7] = gdnative.MethodOf("ColorPicker\000", "is_editing_alpha\000", 36873697)
		methodColorPicker[8] = gdnative.MethodOf("ColorPicker\000", "set_presets_enabled\000", 2586408642)
		methodColorPicker[9] = gdnative.MethodOf("ColorPicker\000", "are_presets_enabled\000", 36873697)
		methodColorPicker[10] = gdnative.MethodOf("ColorPicker\000", "set_presets_visible\000", 2586408642)
		methodColorPicker[11] = gdnative.MethodOf("ColorPicker\000", "are_presets_visible\000", 36873697)
		methodColorPicker[12] = gdnative.MethodOf("ColorPicker\000", "add_preset\000", 2920490490)
		methodColorPicker[13] = gdnative.MethodOf("ColorPicker\000", "erase_preset\000", 2920490490)
		methodColorPicker[14] = gdnative.MethodOf("ColorPicker\000", "get_presets\000", 1392750486)
		methodColorPicker[15] = gdnative.MethodOf("ColorPicker\000", "set_picker_shape\000", 3981373861)
		methodColorPicker[16] = gdnative.MethodOf("ColorPicker\000", "get_picker_shape\000", 1143229889)
		methodColorPickerButton[0] = gdnative.MethodOf("ColorPickerButton\000", "set_pick_color\000", 2920490490)
		methodColorPickerButton[1] = gdnative.MethodOf("ColorPickerButton\000", "get_pick_color\000", 3444240500)
		methodColorPickerButton[2] = gdnative.MethodOf("ColorPickerButton\000", "get_picker\000", 331835996)
		methodColorPickerButton[3] = gdnative.MethodOf("ColorPickerButton\000", "get_popup\000", 1322440207)
		methodColorPickerButton[4] = gdnative.MethodOf("ColorPickerButton\000", "set_edit_alpha\000", 2586408642)
		methodColorPickerButton[5] = gdnative.MethodOf("ColorPickerButton\000", "is_editing_alpha\000", 36873697)
		methodColorRect[0] = gdnative.MethodOf("ColorRect\000", "set_color\000", 2920490490)
		methodColorRect[1] = gdnative.MethodOf("ColorRect\000", "get_color\000", 3444240500)
		methodCompressedTexture2D[0] = gdnative.MethodOf("CompressedTexture2D\000", "load\000", 166001499)
		methodCompressedTexture2D[1] = gdnative.MethodOf("CompressedTexture2D\000", "get_load_path\000", 201670096)
		methodCompressedTexture3D[0] = gdnative.MethodOf("CompressedTexture3D\000", "load\000", 166001499)
		methodCompressedTexture3D[1] = gdnative.MethodOf("CompressedTexture3D\000", "get_load_path\000", 201670096)
		methodCompressedTextureLayered[0] = gdnative.MethodOf("CompressedTextureLayered\000", "load\000", 166001499)
		methodCompressedTextureLayered[1] = gdnative.MethodOf("CompressedTextureLayered\000", "get_load_path\000", 201670096)
		methodConcavePolygonShape2D[0] = gdnative.MethodOf("ConcavePolygonShape2D\000", "set_segments\000", 1509147220)
		methodConcavePolygonShape2D[1] = gdnative.MethodOf("ConcavePolygonShape2D\000", "get_segments\000", 2961356807)
		methodConcavePolygonShape3D[0] = gdnative.MethodOf("ConcavePolygonShape3D\000", "set_faces\000", 334873810)
		methodConcavePolygonShape3D[1] = gdnative.MethodOf("ConcavePolygonShape3D\000", "get_faces\000", 497664490)
		methodConcavePolygonShape3D[2] = gdnative.MethodOf("ConcavePolygonShape3D\000", "set_backface_collision_enabled\000", 2586408642)
		methodConcavePolygonShape3D[3] = gdnative.MethodOf("ConcavePolygonShape3D\000", "is_backface_collision_enabled\000", 36873697)
		methodConeTwistJoint3D[0] = gdnative.MethodOf("ConeTwistJoint3D\000", "set_param\000", 1062470226)
		methodConeTwistJoint3D[1] = gdnative.MethodOf("ConeTwistJoint3D\000", "get_param\000", 2928790850)
		methodConfigFile[0] = gdnative.MethodOf("ConfigFile\000", "set_value\000", 2504492430)
		methodConfigFile[1] = gdnative.MethodOf("ConfigFile\000", "get_value\000", 89809366)
		methodConfigFile[2] = gdnative.MethodOf("ConfigFile\000", "has_section\000", 3927539163)
		methodConfigFile[3] = gdnative.MethodOf("ConfigFile\000", "has_section_key\000", 820780508)
		methodConfigFile[4] = gdnative.MethodOf("ConfigFile\000", "get_sections\000", 1139954409)
		methodConfigFile[5] = gdnative.MethodOf("ConfigFile\000", "get_section_keys\000", 4291131558)
		methodConfigFile[6] = gdnative.MethodOf("ConfigFile\000", "erase_section\000", 83702148)
		methodConfigFile[7] = gdnative.MethodOf("ConfigFile\000", "erase_section_key\000", 3186203200)
		methodConfigFile[8] = gdnative.MethodOf("ConfigFile\000", "load\000", 166001499)
		methodConfigFile[9] = gdnative.MethodOf("ConfigFile\000", "parse\000", 166001499)
		methodConfigFile[10] = gdnative.MethodOf("ConfigFile\000", "save\000", 166001499)
		methodConfigFile[11] = gdnative.MethodOf("ConfigFile\000", "load_encrypted\000", 887037711)
		methodConfigFile[12] = gdnative.MethodOf("ConfigFile\000", "load_encrypted_pass\000", 852856452)
		methodConfigFile[13] = gdnative.MethodOf("ConfigFile\000", "save_encrypted\000", 887037711)
		methodConfigFile[14] = gdnative.MethodOf("ConfigFile\000", "save_encrypted_pass\000", 852856452)
		methodConfigFile[15] = gdnative.MethodOf("ConfigFile\000", "clear\000", 3218959716)
		methodConfirmationDialog[0] = gdnative.MethodOf("ConfirmationDialog\000", "get_cancel_button\000", 1856205918)
		methodConfirmationDialog[1] = gdnative.MethodOf("ConfirmationDialog\000", "set_cancel_button_text\000", 83702148)
		methodConfirmationDialog[2] = gdnative.MethodOf("ConfirmationDialog\000", "get_cancel_button_text\000", 201670096)
		methodContainer[0] = gdnative.MethodOf("Container\000", "queue_sort\000", 3218959716)
		methodContainer[1] = gdnative.MethodOf("Container\000", "fit_child_in_rect\000", 1993438598)
		methodControl[0] = gdnative.MethodOf("Control\000", "accept_event\000", 3218959716)
		methodControl[1] = gdnative.MethodOf("Control\000", "get_minimum_size\000", 3341600327)
		methodControl[2] = gdnative.MethodOf("Control\000", "get_combined_minimum_size\000", 3341600327)
		methodControl[3] = gdnative.MethodOf("Control\000", "set_anchors_preset\000", 509135270)
		methodControl[4] = gdnative.MethodOf("Control\000", "set_offsets_preset\000", 3651818904)
		methodControl[5] = gdnative.MethodOf("Control\000", "set_anchors_and_offsets_preset\000", 3651818904)
		methodControl[6] = gdnative.MethodOf("Control\000", "set_anchor\000", 2589937826)
		methodControl[7] = gdnative.MethodOf("Control\000", "get_anchor\000", 2869120046)
		methodControl[8] = gdnative.MethodOf("Control\000", "set_offset\000", 4290182280)
		methodControl[9] = gdnative.MethodOf("Control\000", "get_offset\000", 2869120046)
		methodControl[10] = gdnative.MethodOf("Control\000", "set_anchor_and_offset\000", 4031722181)
		methodControl[11] = gdnative.MethodOf("Control\000", "set_begin\000", 743155724)
		methodControl[12] = gdnative.MethodOf("Control\000", "set_end\000", 743155724)
		methodControl[13] = gdnative.MethodOf("Control\000", "set_position\000", 2436320129)
		methodControl[14] = gdnative.MethodOf("Control\000", "set_size\000", 2436320129)
		methodControl[15] = gdnative.MethodOf("Control\000", "reset_size\000", 3218959716)
		methodControl[16] = gdnative.MethodOf("Control\000", "set_custom_minimum_size\000", 743155724)
		methodControl[17] = gdnative.MethodOf("Control\000", "set_global_position\000", 2436320129)
		methodControl[18] = gdnative.MethodOf("Control\000", "set_rotation\000", 373806689)
		methodControl[19] = gdnative.MethodOf("Control\000", "set_scale\000", 743155724)
		methodControl[20] = gdnative.MethodOf("Control\000", "set_pivot_offset\000", 743155724)
		methodControl[21] = gdnative.MethodOf("Control\000", "get_begin\000", 3341600327)
		methodControl[22] = gdnative.MethodOf("Control\000", "get_end\000", 3341600327)
		methodControl[23] = gdnative.MethodOf("Control\000", "get_position\000", 3341600327)
		methodControl[24] = gdnative.MethodOf("Control\000", "get_size\000", 3341600327)
		methodControl[25] = gdnative.MethodOf("Control\000", "get_rotation\000", 1740695150)
		methodControl[26] = gdnative.MethodOf("Control\000", "get_scale\000", 3341600327)
		methodControl[27] = gdnative.MethodOf("Control\000", "get_pivot_offset\000", 3341600327)
		methodControl[28] = gdnative.MethodOf("Control\000", "get_custom_minimum_size\000", 3341600327)
		methodControl[29] = gdnative.MethodOf("Control\000", "get_parent_area_size\000", 3341600327)
		methodControl[30] = gdnative.MethodOf("Control\000", "get_global_position\000", 3341600327)
		methodControl[31] = gdnative.MethodOf("Control\000", "get_screen_position\000", 3341600327)
		methodControl[32] = gdnative.MethodOf("Control\000", "get_rect\000", 1639390495)
		methodControl[33] = gdnative.MethodOf("Control\000", "get_global_rect\000", 1639390495)
		methodControl[34] = gdnative.MethodOf("Control\000", "set_focus_mode\000", 3232914922)
		methodControl[35] = gdnative.MethodOf("Control\000", "get_focus_mode\000", 2132829277)
		methodControl[36] = gdnative.MethodOf("Control\000", "has_focus\000", 36873697)
		methodControl[37] = gdnative.MethodOf("Control\000", "grab_focus\000", 3218959716)
		methodControl[38] = gdnative.MethodOf("Control\000", "release_focus\000", 3218959716)
		methodControl[39] = gdnative.MethodOf("Control\000", "find_prev_valid_focus\000", 2783021301)
		methodControl[40] = gdnative.MethodOf("Control\000", "find_next_valid_focus\000", 2783021301)
		methodControl[41] = gdnative.MethodOf("Control\000", "set_h_size_flags\000", 1286410249)
		methodControl[42] = gdnative.MethodOf("Control\000", "get_h_size_flags\000", 3905245786)
		methodControl[43] = gdnative.MethodOf("Control\000", "set_stretch_ratio\000", 373806689)
		methodControl[44] = gdnative.MethodOf("Control\000", "get_stretch_ratio\000", 1740695150)
		methodControl[45] = gdnative.MethodOf("Control\000", "set_v_size_flags\000", 1286410249)
		methodControl[46] = gdnative.MethodOf("Control\000", "get_v_size_flags\000", 3905245786)
		methodControl[47] = gdnative.MethodOf("Control\000", "set_theme\000", 2326690814)
		methodControl[48] = gdnative.MethodOf("Control\000", "get_theme\000", 3846893731)
		methodControl[49] = gdnative.MethodOf("Control\000", "set_theme_type_variation\000", 3304788590)
		methodControl[50] = gdnative.MethodOf("Control\000", "get_theme_type_variation\000", 2002593661)
		methodControl[51] = gdnative.MethodOf("Control\000", "begin_bulk_theme_override\000", 3218959716)
		methodControl[52] = gdnative.MethodOf("Control\000", "end_bulk_theme_override\000", 3218959716)
		methodControl[53] = gdnative.MethodOf("Control\000", "add_theme_icon_override\000", 1373065600)
		methodControl[54] = gdnative.MethodOf("Control\000", "add_theme_stylebox_override\000", 4188838905)
		methodControl[55] = gdnative.MethodOf("Control\000", "add_theme_font_override\000", 3518018674)
		methodControl[56] = gdnative.MethodOf("Control\000", "add_theme_font_size_override\000", 2415702435)
		methodControl[57] = gdnative.MethodOf("Control\000", "add_theme_color_override\000", 4260178595)
		methodControl[58] = gdnative.MethodOf("Control\000", "add_theme_constant_override\000", 2415702435)
		methodControl[59] = gdnative.MethodOf("Control\000", "remove_theme_icon_override\000", 3304788590)
		methodControl[60] = gdnative.MethodOf("Control\000", "remove_theme_stylebox_override\000", 3304788590)
		methodControl[61] = gdnative.MethodOf("Control\000", "remove_theme_font_override\000", 3304788590)
		methodControl[62] = gdnative.MethodOf("Control\000", "remove_theme_font_size_override\000", 3304788590)
		methodControl[63] = gdnative.MethodOf("Control\000", "remove_theme_color_override\000", 3304788590)
		methodControl[64] = gdnative.MethodOf("Control\000", "remove_theme_constant_override\000", 3304788590)
		methodControl[65] = gdnative.MethodOf("Control\000", "get_theme_icon\000", 2336455395)
		methodControl[66] = gdnative.MethodOf("Control\000", "get_theme_stylebox\000", 2759935355)
		methodControl[67] = gdnative.MethodOf("Control\000", "get_theme_font\000", 387378635)
		methodControl[68] = gdnative.MethodOf("Control\000", "get_theme_font_size\000", 229578101)
		methodControl[69] = gdnative.MethodOf("Control\000", "get_theme_color\000", 2377051548)
		methodControl[70] = gdnative.MethodOf("Control\000", "get_theme_constant\000", 229578101)
		methodControl[71] = gdnative.MethodOf("Control\000", "has_theme_icon_override\000", 2619796661)
		methodControl[72] = gdnative.MethodOf("Control\000", "has_theme_stylebox_override\000", 2619796661)
		methodControl[73] = gdnative.MethodOf("Control\000", "has_theme_font_override\000", 2619796661)
		methodControl[74] = gdnative.MethodOf("Control\000", "has_theme_font_size_override\000", 2619796661)
		methodControl[75] = gdnative.MethodOf("Control\000", "has_theme_color_override\000", 2619796661)
		methodControl[76] = gdnative.MethodOf("Control\000", "has_theme_constant_override\000", 2619796661)
		methodControl[77] = gdnative.MethodOf("Control\000", "has_theme_icon\000", 1187511791)
		methodControl[78] = gdnative.MethodOf("Control\000", "has_theme_stylebox\000", 1187511791)
		methodControl[79] = gdnative.MethodOf("Control\000", "has_theme_font\000", 1187511791)
		methodControl[80] = gdnative.MethodOf("Control\000", "has_theme_font_size\000", 1187511791)
		methodControl[81] = gdnative.MethodOf("Control\000", "has_theme_color\000", 1187511791)
		methodControl[82] = gdnative.MethodOf("Control\000", "has_theme_constant\000", 1187511791)
		methodControl[83] = gdnative.MethodOf("Control\000", "get_theme_default_base_scale\000", 1740695150)
		methodControl[84] = gdnative.MethodOf("Control\000", "get_theme_default_font\000", 3229501585)
		methodControl[85] = gdnative.MethodOf("Control\000", "get_theme_default_font_size\000", 3905245786)
		methodControl[86] = gdnative.MethodOf("Control\000", "get_parent_control\000", 2783021301)
		methodControl[87] = gdnative.MethodOf("Control\000", "set_h_grow_direction\000", 2022385301)
		methodControl[88] = gdnative.MethodOf("Control\000", "get_h_grow_direction\000", 3635610155)
		methodControl[89] = gdnative.MethodOf("Control\000", "set_v_grow_direction\000", 2022385301)
		methodControl[90] = gdnative.MethodOf("Control\000", "get_v_grow_direction\000", 3635610155)
		methodControl[91] = gdnative.MethodOf("Control\000", "set_tooltip\000", 83702148)
		methodControl[92] = gdnative.MethodOf("Control\000", "get_tooltip\000", 2895288280)
		methodControl[93] = gdnative.MethodOf("Control\000", "set_default_cursor_shape\000", 217062046)
		methodControl[94] = gdnative.MethodOf("Control\000", "get_default_cursor_shape\000", 2359535750)
		methodControl[95] = gdnative.MethodOf("Control\000", "get_cursor_shape\000", 1395773853)
		methodControl[96] = gdnative.MethodOf("Control\000", "set_focus_neighbor\000", 2024461774)
		methodControl[97] = gdnative.MethodOf("Control\000", "get_focus_neighbor\000", 2757935761)
		methodControl[98] = gdnative.MethodOf("Control\000", "set_focus_next\000", 1348162250)
		methodControl[99] = gdnative.MethodOf("Control\000", "get_focus_next\000", 4075236667)
		methodControl[100] = gdnative.MethodOf("Control\000", "set_focus_previous\000", 1348162250)
		methodControl[101] = gdnative.MethodOf("Control\000", "get_focus_previous\000", 4075236667)
		methodControl[102] = gdnative.MethodOf("Control\000", "force_drag\000", 3191844692)
		methodControl[103] = gdnative.MethodOf("Control\000", "set_mouse_filter\000", 3891156122)
		methodControl[104] = gdnative.MethodOf("Control\000", "get_mouse_filter\000", 1572545674)
		methodControl[105] = gdnative.MethodOf("Control\000", "set_force_pass_scroll_events\000", 2586408642)
		methodControl[106] = gdnative.MethodOf("Control\000", "is_force_pass_scroll_events\000", 36873697)
		methodControl[107] = gdnative.MethodOf("Control\000", "set_clip_contents\000", 2586408642)
		methodControl[108] = gdnative.MethodOf("Control\000", "is_clipping_contents\000", 2240911060)
		methodControl[109] = gdnative.MethodOf("Control\000", "grab_click_focus\000", 3218959716)
		methodControl[110] = gdnative.MethodOf("Control\000", "set_drag_forwarding\000", 3975164845)
		methodControl[111] = gdnative.MethodOf("Control\000", "set_drag_preview\000", 1496901182)
		methodControl[112] = gdnative.MethodOf("Control\000", "is_drag_successful\000", 36873697)
		methodControl[113] = gdnative.MethodOf("Control\000", "warp_mouse\000", 743155724)
		methodControl[114] = gdnative.MethodOf("Control\000", "update_minimum_size\000", 3218959716)
		methodControl[115] = gdnative.MethodOf("Control\000", "set_layout_direction\000", 3310692370)
		methodControl[116] = gdnative.MethodOf("Control\000", "get_layout_direction\000", 1546772008)
		methodControl[117] = gdnative.MethodOf("Control\000", "is_layout_rtl\000", 36873697)
		methodControl[118] = gdnative.MethodOf("Control\000", "set_auto_translate\000", 2586408642)
		methodControl[119] = gdnative.MethodOf("Control\000", "is_auto_translating\000", 36873697)
		methodConvexPolygonShape2D[0] = gdnative.MethodOf("ConvexPolygonShape2D\000", "set_point_cloud\000", 1509147220)
		methodConvexPolygonShape2D[1] = gdnative.MethodOf("ConvexPolygonShape2D\000", "set_points\000", 1509147220)
		methodConvexPolygonShape2D[2] = gdnative.MethodOf("ConvexPolygonShape2D\000", "get_points\000", 2961356807)
		methodConvexPolygonShape3D[0] = gdnative.MethodOf("ConvexPolygonShape3D\000", "set_points\000", 334873810)
		methodConvexPolygonShape3D[1] = gdnative.MethodOf("ConvexPolygonShape3D\000", "get_points\000", 497664490)
		methodCrypto[0] = gdnative.MethodOf("Crypto\000", "generate_random_bytes\000", 47165747)
		methodCrypto[1] = gdnative.MethodOf("Crypto\000", "generate_rsa\000", 1237515462)
		methodCrypto[2] = gdnative.MethodOf("Crypto\000", "generate_self_signed_certificate\000", 947314696)
		methodCrypto[3] = gdnative.MethodOf("Crypto\000", "sign\000", 1673662703)
		methodCrypto[4] = gdnative.MethodOf("Crypto\000", "verify\000", 2805902225)
		methodCrypto[5] = gdnative.MethodOf("Crypto\000", "encrypt\000", 2361793670)
		methodCrypto[6] = gdnative.MethodOf("Crypto\000", "decrypt\000", 2361793670)
		methodCrypto[7] = gdnative.MethodOf("Crypto\000", "hmac_digest\000", 2368951203)
		methodCrypto[8] = gdnative.MethodOf("Crypto\000", "constant_time_compare\000", 1024142237)
		methodCryptoKey[0] = gdnative.MethodOf("CryptoKey\000", "save\000", 885841341)
		methodCryptoKey[1] = gdnative.MethodOf("CryptoKey\000", "load\000", 885841341)
		methodCryptoKey[2] = gdnative.MethodOf("CryptoKey\000", "is_public_only\000", 36873697)
		methodCryptoKey[3] = gdnative.MethodOf("CryptoKey\000", "save_to_string\000", 32795936)
		methodCryptoKey[4] = gdnative.MethodOf("CryptoKey\000", "load_from_string\000", 885841341)
		methodCurve[0] = gdnative.MethodOf("Curve\000", "get_point_count\000", 3905245786)
		methodCurve[1] = gdnative.MethodOf("Curve\000", "set_point_count\000", 1286410249)
		methodCurve[2] = gdnative.MethodOf("Curve\000", "add_point\000", 2766148617)
		methodCurve[3] = gdnative.MethodOf("Curve\000", "remove_point\000", 1286410249)
		methodCurve[4] = gdnative.MethodOf("Curve\000", "clear_points\000", 3218959716)
		methodCurve[5] = gdnative.MethodOf("Curve\000", "get_point_position\000", 2299179447)
		methodCurve[6] = gdnative.MethodOf("Curve\000", "set_point_value\000", 1602489585)
		methodCurve[7] = gdnative.MethodOf("Curve\000", "set_point_offset\000", 3780573764)
		methodCurve[8] = gdnative.MethodOf("Curve\000", "interpolate\000", 3919130443)
		methodCurve[9] = gdnative.MethodOf("Curve\000", "interpolate_baked\000", 3919130443)
		methodCurve[10] = gdnative.MethodOf("Curve\000", "get_point_left_tangent\000", 2339986948)
		methodCurve[11] = gdnative.MethodOf("Curve\000", "get_point_right_tangent\000", 2339986948)
		methodCurve[12] = gdnative.MethodOf("Curve\000", "get_point_left_mode\000", 426950354)
		methodCurve[13] = gdnative.MethodOf("Curve\000", "get_point_right_mode\000", 426950354)
		methodCurve[14] = gdnative.MethodOf("Curve\000", "set_point_left_tangent\000", 1602489585)
		methodCurve[15] = gdnative.MethodOf("Curve\000", "set_point_right_tangent\000", 1602489585)
		methodCurve[16] = gdnative.MethodOf("Curve\000", "set_point_left_mode\000", 1217242874)
		methodCurve[17] = gdnative.MethodOf("Curve\000", "set_point_right_mode\000", 1217242874)
		methodCurve[18] = gdnative.MethodOf("Curve\000", "get_min_value\000", 1740695150)
		methodCurve[19] = gdnative.MethodOf("Curve\000", "set_min_value\000", 373806689)
		methodCurve[20] = gdnative.MethodOf("Curve\000", "get_max_value\000", 1740695150)
		methodCurve[21] = gdnative.MethodOf("Curve\000", "set_max_value\000", 373806689)
		methodCurve[22] = gdnative.MethodOf("Curve\000", "clean_dupes\000", 3218959716)
		methodCurve[23] = gdnative.MethodOf("Curve\000", "bake\000", 3218959716)
		methodCurve[24] = gdnative.MethodOf("Curve\000", "get_bake_resolution\000", 3905245786)
		methodCurve[25] = gdnative.MethodOf("Curve\000", "set_bake_resolution\000", 1286410249)
		methodCurve2D[0] = gdnative.MethodOf("Curve2D\000", "get_point_count\000", 3905245786)
		methodCurve2D[1] = gdnative.MethodOf("Curve2D\000", "set_point_count\000", 1286410249)
		methodCurve2D[2] = gdnative.MethodOf("Curve2D\000", "add_point\000", 2437345566)
		methodCurve2D[3] = gdnative.MethodOf("Curve2D\000", "set_point_position\000", 163021252)
		methodCurve2D[4] = gdnative.MethodOf("Curve2D\000", "get_point_position\000", 2299179447)
		methodCurve2D[5] = gdnative.MethodOf("Curve2D\000", "set_point_in\000", 163021252)
		methodCurve2D[6] = gdnative.MethodOf("Curve2D\000", "get_point_in\000", 2299179447)
		methodCurve2D[7] = gdnative.MethodOf("Curve2D\000", "set_point_out\000", 163021252)
		methodCurve2D[8] = gdnative.MethodOf("Curve2D\000", "get_point_out\000", 2299179447)
		methodCurve2D[9] = gdnative.MethodOf("Curve2D\000", "remove_point\000", 1286410249)
		methodCurve2D[10] = gdnative.MethodOf("Curve2D\000", "clear_points\000", 3218959716)
		methodCurve2D[11] = gdnative.MethodOf("Curve2D\000", "interpolate\000", 26514310)
		methodCurve2D[12] = gdnative.MethodOf("Curve2D\000", "interpolatef\000", 3588506812)
		methodCurve2D[13] = gdnative.MethodOf("Curve2D\000", "set_bake_interval\000", 373806689)
		methodCurve2D[14] = gdnative.MethodOf("Curve2D\000", "get_bake_interval\000", 1740695150)
		methodCurve2D[15] = gdnative.MethodOf("Curve2D\000", "get_baked_length\000", 1740695150)
		methodCurve2D[16] = gdnative.MethodOf("Curve2D\000", "interpolate_baked\000", 674850128)
		methodCurve2D[17] = gdnative.MethodOf("Curve2D\000", "get_baked_points\000", 2961356807)
		methodCurve2D[18] = gdnative.MethodOf("Curve2D\000", "get_closest_point\000", 2656412154)
		methodCurve2D[19] = gdnative.MethodOf("Curve2D\000", "get_closest_offset\000", 2276447920)
		methodCurve2D[20] = gdnative.MethodOf("Curve2D\000", "tessellate\000", 958145977)
		methodCurve3D[0] = gdnative.MethodOf("Curve3D\000", "get_point_count\000", 3905245786)
		methodCurve3D[1] = gdnative.MethodOf("Curve3D\000", "set_point_count\000", 1286410249)
		methodCurve3D[2] = gdnative.MethodOf("Curve3D\000", "add_point\000", 3836314258)
		methodCurve3D[3] = gdnative.MethodOf("Curve3D\000", "set_point_position\000", 1530502735)
		methodCurve3D[4] = gdnative.MethodOf("Curve3D\000", "get_point_position\000", 711720468)
		methodCurve3D[5] = gdnative.MethodOf("Curve3D\000", "set_point_tilt\000", 1602489585)
		methodCurve3D[6] = gdnative.MethodOf("Curve3D\000", "get_point_tilt\000", 2339986948)
		methodCurve3D[7] = gdnative.MethodOf("Curve3D\000", "set_point_in\000", 1530502735)
		methodCurve3D[8] = gdnative.MethodOf("Curve3D\000", "get_point_in\000", 711720468)
		methodCurve3D[9] = gdnative.MethodOf("Curve3D\000", "set_point_out\000", 1530502735)
		methodCurve3D[10] = gdnative.MethodOf("Curve3D\000", "get_point_out\000", 711720468)
		methodCurve3D[11] = gdnative.MethodOf("Curve3D\000", "remove_point\000", 1286410249)
		methodCurve3D[12] = gdnative.MethodOf("Curve3D\000", "clear_points\000", 3218959716)
		methodCurve3D[13] = gdnative.MethodOf("Curve3D\000", "interpolate\000", 3285246857)
		methodCurve3D[14] = gdnative.MethodOf("Curve3D\000", "interpolatef\000", 2553580215)
		methodCurve3D[15] = gdnative.MethodOf("Curve3D\000", "set_bake_interval\000", 373806689)
		methodCurve3D[16] = gdnative.MethodOf("Curve3D\000", "get_bake_interval\000", 1740695150)
		methodCurve3D[17] = gdnative.MethodOf("Curve3D\000", "set_up_vector_enabled\000", 2586408642)
		methodCurve3D[18] = gdnative.MethodOf("Curve3D\000", "is_up_vector_enabled\000", 36873697)
		methodCurve3D[19] = gdnative.MethodOf("Curve3D\000", "get_baked_length\000", 1740695150)
		methodCurve3D[20] = gdnative.MethodOf("Curve3D\000", "interpolate_baked\000", 1362627031)
		methodCurve3D[21] = gdnative.MethodOf("Curve3D\000", "interpolate_baked_up_vector\000", 1362627031)
		methodCurve3D[22] = gdnative.MethodOf("Curve3D\000", "get_baked_points\000", 497664490)
		methodCurve3D[23] = gdnative.MethodOf("Curve3D\000", "get_baked_tilts\000", 675695659)
		methodCurve3D[24] = gdnative.MethodOf("Curve3D\000", "get_baked_up_vectors\000", 497664490)
		methodCurve3D[25] = gdnative.MethodOf("Curve3D\000", "get_closest_point\000", 192990374)
		methodCurve3D[26] = gdnative.MethodOf("Curve3D\000", "get_closest_offset\000", 1109078154)
		methodCurve3D[27] = gdnative.MethodOf("Curve3D\000", "tessellate\000", 1519759391)
		methodCurveTexture[0] = gdnative.MethodOf("CurveTexture\000", "set_width\000", 1286410249)
		methodCurveTexture[1] = gdnative.MethodOf("CurveTexture\000", "set_curve\000", 270443179)
		methodCurveTexture[2] = gdnative.MethodOf("CurveTexture\000", "get_curve\000", 2460114913)
		methodCurveTexture[3] = gdnative.MethodOf("CurveTexture\000", "set_texture_mode\000", 1321955367)
		methodCurveTexture[4] = gdnative.MethodOf("CurveTexture\000", "get_texture_mode\000", 715756376)
		methodCurveXYZTexture[0] = gdnative.MethodOf("CurveXYZTexture\000", "set_width\000", 1286410249)
		methodCurveXYZTexture[1] = gdnative.MethodOf("CurveXYZTexture\000", "set_curve_x\000", 270443179)
		methodCurveXYZTexture[2] = gdnative.MethodOf("CurveXYZTexture\000", "get_curve_x\000", 2460114913)
		methodCurveXYZTexture[3] = gdnative.MethodOf("CurveXYZTexture\000", "set_curve_y\000", 270443179)
		methodCurveXYZTexture[4] = gdnative.MethodOf("CurveXYZTexture\000", "get_curve_y\000", 2460114913)
		methodCurveXYZTexture[5] = gdnative.MethodOf("CurveXYZTexture\000", "set_curve_z\000", 270443179)
		methodCurveXYZTexture[6] = gdnative.MethodOf("CurveXYZTexture\000", "get_curve_z\000", 2460114913)
		methodCylinderMesh[0] = gdnative.MethodOf("CylinderMesh\000", "set_top_radius\000", 373806689)
		methodCylinderMesh[1] = gdnative.MethodOf("CylinderMesh\000", "get_top_radius\000", 1740695150)
		methodCylinderMesh[2] = gdnative.MethodOf("CylinderMesh\000", "set_bottom_radius\000", 373806689)
		methodCylinderMesh[3] = gdnative.MethodOf("CylinderMesh\000", "get_bottom_radius\000", 1740695150)
		methodCylinderMesh[4] = gdnative.MethodOf("CylinderMesh\000", "set_height\000", 373806689)
		methodCylinderMesh[5] = gdnative.MethodOf("CylinderMesh\000", "get_height\000", 1740695150)
		methodCylinderMesh[6] = gdnative.MethodOf("CylinderMesh\000", "set_radial_segments\000", 1286410249)
		methodCylinderMesh[7] = gdnative.MethodOf("CylinderMesh\000", "get_radial_segments\000", 3905245786)
		methodCylinderMesh[8] = gdnative.MethodOf("CylinderMesh\000", "set_rings\000", 1286410249)
		methodCylinderMesh[9] = gdnative.MethodOf("CylinderMesh\000", "get_rings\000", 3905245786)
		methodCylinderMesh[10] = gdnative.MethodOf("CylinderMesh\000", "set_cap_top\000", 2586408642)
		methodCylinderMesh[11] = gdnative.MethodOf("CylinderMesh\000", "is_cap_top\000", 36873697)
		methodCylinderMesh[12] = gdnative.MethodOf("CylinderMesh\000", "set_cap_bottom\000", 2586408642)
		methodCylinderMesh[13] = gdnative.MethodOf("CylinderMesh\000", "is_cap_bottom\000", 36873697)
		methodCylinderShape3D[0] = gdnative.MethodOf("CylinderShape3D\000", "set_radius\000", 373806689)
		methodCylinderShape3D[1] = gdnative.MethodOf("CylinderShape3D\000", "get_radius\000", 1740695150)
		methodCylinderShape3D[2] = gdnative.MethodOf("CylinderShape3D\000", "set_height\000", 373806689)
		methodCylinderShape3D[3] = gdnative.MethodOf("CylinderShape3D\000", "get_height\000", 1740695150)
		methodDTLSServer[0] = gdnative.MethodOf("DTLSServer\000", "setup\000", 3871247334)
		methodDTLSServer[1] = gdnative.MethodOf("DTLSServer\000", "take_connection\000", 3946580474)
		methodDampedSpringJoint2D[0] = gdnative.MethodOf("DampedSpringJoint2D\000", "set_length\000", 373806689)
		methodDampedSpringJoint2D[1] = gdnative.MethodOf("DampedSpringJoint2D\000", "get_length\000", 1740695150)
		methodDampedSpringJoint2D[2] = gdnative.MethodOf("DampedSpringJoint2D\000", "set_rest_length\000", 373806689)
		methodDampedSpringJoint2D[3] = gdnative.MethodOf("DampedSpringJoint2D\000", "get_rest_length\000", 1740695150)
		methodDampedSpringJoint2D[4] = gdnative.MethodOf("DampedSpringJoint2D\000", "set_stiffness\000", 373806689)
		methodDampedSpringJoint2D[5] = gdnative.MethodOf("DampedSpringJoint2D\000", "get_stiffness\000", 1740695150)
		methodDampedSpringJoint2D[6] = gdnative.MethodOf("DampedSpringJoint2D\000", "set_damping\000", 373806689)
		methodDampedSpringJoint2D[7] = gdnative.MethodOf("DampedSpringJoint2D\000", "get_damping\000", 1740695150)
		methodDecal[0] = gdnative.MethodOf("Decal\000", "set_extents\000", 3460891852)
		methodDecal[1] = gdnative.MethodOf("Decal\000", "get_extents\000", 3360562783)
		methodDecal[2] = gdnative.MethodOf("Decal\000", "set_texture\000", 2086764391)
		methodDecal[3] = gdnative.MethodOf("Decal\000", "get_texture\000", 3244119503)
		methodDecal[4] = gdnative.MethodOf("Decal\000", "set_emission_energy\000", 373806689)
		methodDecal[5] = gdnative.MethodOf("Decal\000", "get_emission_energy\000", 1740695150)
		methodDecal[6] = gdnative.MethodOf("Decal\000", "set_albedo_mix\000", 373806689)
		methodDecal[7] = gdnative.MethodOf("Decal\000", "get_albedo_mix\000", 1740695150)
		methodDecal[8] = gdnative.MethodOf("Decal\000", "set_modulate\000", 2920490490)
		methodDecal[9] = gdnative.MethodOf("Decal\000", "get_modulate\000", 3444240500)
		methodDecal[10] = gdnative.MethodOf("Decal\000", "set_upper_fade\000", 373806689)
		methodDecal[11] = gdnative.MethodOf("Decal\000", "get_upper_fade\000", 1740695150)
		methodDecal[12] = gdnative.MethodOf("Decal\000", "set_lower_fade\000", 373806689)
		methodDecal[13] = gdnative.MethodOf("Decal\000", "get_lower_fade\000", 1740695150)
		methodDecal[14] = gdnative.MethodOf("Decal\000", "set_normal_fade\000", 373806689)
		methodDecal[15] = gdnative.MethodOf("Decal\000", "get_normal_fade\000", 1740695150)
		methodDecal[16] = gdnative.MethodOf("Decal\000", "set_enable_distance_fade\000", 2586408642)
		methodDecal[17] = gdnative.MethodOf("Decal\000", "is_distance_fade_enabled\000", 36873697)
		methodDecal[18] = gdnative.MethodOf("Decal\000", "set_distance_fade_begin\000", 373806689)
		methodDecal[19] = gdnative.MethodOf("Decal\000", "get_distance_fade_begin\000", 1740695150)
		methodDecal[20] = gdnative.MethodOf("Decal\000", "set_distance_fade_length\000", 373806689)
		methodDecal[21] = gdnative.MethodOf("Decal\000", "get_distance_fade_length\000", 1740695150)
		methodDecal[22] = gdnative.MethodOf("Decal\000", "set_cull_mask\000", 1286410249)
		methodDecal[23] = gdnative.MethodOf("Decal\000", "get_cull_mask\000", 3905245786)
		methodDirectionalLight2D[0] = gdnative.MethodOf("DirectionalLight2D\000", "set_max_distance\000", 373806689)
		methodDirectionalLight2D[1] = gdnative.MethodOf("DirectionalLight2D\000", "get_max_distance\000", 1740695150)
		methodDirectionalLight3D[0] = gdnative.MethodOf("DirectionalLight3D\000", "set_shadow_mode\000", 1261211726)
		methodDirectionalLight3D[1] = gdnative.MethodOf("DirectionalLight3D\000", "get_shadow_mode\000", 2765228544)
		methodDirectionalLight3D[2] = gdnative.MethodOf("DirectionalLight3D\000", "set_blend_splits\000", 2586408642)
		methodDirectionalLight3D[3] = gdnative.MethodOf("DirectionalLight3D\000", "is_blend_splits_enabled\000", 36873697)
		methodDirectionalLight3D[4] = gdnative.MethodOf("DirectionalLight3D\000", "set_sky_mode\000", 2691194817)
		methodDirectionalLight3D[5] = gdnative.MethodOf("DirectionalLight3D\000", "get_sky_mode\000", 3819982774)
		methodDirectory[0] = gdnative.MethodOf("Directory\000", "open\000", 166001499)
		methodDirectory[1] = gdnative.MethodOf("Directory\000", "list_dir_begin\000", 2018049411)
		methodDirectory[2] = gdnative.MethodOf("Directory\000", "get_next\000", 2841200299)
		methodDirectory[3] = gdnative.MethodOf("Directory\000", "current_is_dir\000", 36873697)
		methodDirectory[4] = gdnative.MethodOf("Directory\000", "list_dir_end\000", 3218959716)
		methodDirectory[5] = gdnative.MethodOf("Directory\000", "get_files\000", 2981934095)
		methodDirectory[6] = gdnative.MethodOf("Directory\000", "get_directories\000", 2981934095)
		methodDirectory[7] = gdnative.MethodOf("Directory\000", "get_drive_count\000", 2455072627)
		methodDirectory[8] = gdnative.MethodOf("Directory\000", "get_drive\000", 990163283)
		methodDirectory[9] = gdnative.MethodOf("Directory\000", "get_current_drive\000", 2455072627)
		methodDirectory[10] = gdnative.MethodOf("Directory\000", "change_dir\000", 166001499)
		methodDirectory[11] = gdnative.MethodOf("Directory\000", "get_current_dir\000", 2841200299)
		methodDirectory[12] = gdnative.MethodOf("Directory\000", "make_dir\000", 166001499)
		methodDirectory[13] = gdnative.MethodOf("Directory\000", "make_dir_recursive\000", 166001499)
		methodDirectory[14] = gdnative.MethodOf("Directory\000", "file_exists\000", 2323990056)
		methodDirectory[15] = gdnative.MethodOf("Directory\000", "dir_exists\000", 2323990056)
		methodDirectory[16] = gdnative.MethodOf("Directory\000", "get_space_left\000", 2455072627)
		methodDirectory[17] = gdnative.MethodOf("Directory\000", "copy\000", 852856452)
		methodDirectory[18] = gdnative.MethodOf("Directory\000", "rename\000", 852856452)
		methodDirectory[19] = gdnative.MethodOf("Directory\000", "remove\000", 166001499)
		methodDirectory[20] = gdnative.MethodOf("Directory\000", "set_include_navigational\000", 2586408642)
		methodDirectory[21] = gdnative.MethodOf("Directory\000", "get_include_navigational\000", 36873697)
		methodDirectory[22] = gdnative.MethodOf("Directory\000", "set_include_hidden\000", 2586408642)
		methodDirectory[23] = gdnative.MethodOf("Directory\000", "get_include_hidden\000", 36873697)
		methodDisplayServer[0] = gdnative.MethodOf("DisplayServer\000", "has_feature\000", 334065950)
		methodDisplayServer[1] = gdnative.MethodOf("DisplayServer\000", "get_name\000", 201670096)
		methodDisplayServer[2] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_item\000", 1343835725)
		methodDisplayServer[3] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_check_item\000", 1343835725)
		methodDisplayServer[4] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_icon_item\000", 129300587)
		methodDisplayServer[5] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_icon_check_item\000", 129300587)
		methodDisplayServer[6] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_radio_check_item\000", 1343835725)
		methodDisplayServer[7] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_icon_radio_check_item\000", 129300587)
		methodDisplayServer[8] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_multistate_item\000", 2051878499)
		methodDisplayServer[9] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_submenu_item\000", 3806306913)
		methodDisplayServer[10] = gdnative.MethodOf("DisplayServer\000", "global_menu_add_separator\000", 1041533178)
		methodDisplayServer[11] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_index_from_text\000", 2878152881)
		methodDisplayServer[12] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_index_from_tag\000", 2941063483)
		methodDisplayServer[13] = gdnative.MethodOf("DisplayServer\000", "global_menu_is_item_checked\000", 3511468594)
		methodDisplayServer[14] = gdnative.MethodOf("DisplayServer\000", "global_menu_is_item_checkable\000", 3511468594)
		methodDisplayServer[15] = gdnative.MethodOf("DisplayServer\000", "global_menu_is_item_radio_checkable\000", 3511468594)
		methodDisplayServer[16] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_callback\000", 748666903)
		methodDisplayServer[17] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_tag\000", 330672633)
		methodDisplayServer[18] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_text\000", 591067909)
		methodDisplayServer[19] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_submenu\000", 591067909)
		methodDisplayServer[20] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_accelerator\000", 936065394)
		methodDisplayServer[21] = gdnative.MethodOf("DisplayServer\000", "global_menu_is_item_disabled\000", 3511468594)
		methodDisplayServer[22] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_tooltip\000", 591067909)
		methodDisplayServer[23] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_state\000", 3422818498)
		methodDisplayServer[24] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_max_states\000", 3422818498)
		methodDisplayServer[25] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_icon\000", 3591713183)
		methodDisplayServer[26] = gdnative.MethodOf("DisplayServer\000", "global_menu_get_item_indentation_level\000", 3422818498)
		methodDisplayServer[27] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_checked\000", 4108344793)
		methodDisplayServer[28] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_checkable\000", 4108344793)
		methodDisplayServer[29] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_radio_checkable\000", 4108344793)
		methodDisplayServer[30] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_callback\000", 3809915389)
		methodDisplayServer[31] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_tag\000", 453659863)
		methodDisplayServer[32] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_text\000", 965966136)
		methodDisplayServer[33] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_submenu\000", 965966136)
		methodDisplayServer[34] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_accelerator\000", 566943293)
		methodDisplayServer[35] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_disabled\000", 4108344793)
		methodDisplayServer[36] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_tooltip\000", 965966136)
		methodDisplayServer[37] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_state\000", 3474840532)
		methodDisplayServer[38] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_max_states\000", 3474840532)
		methodDisplayServer[39] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_icon\000", 3201338066)
		methodDisplayServer[40] = gdnative.MethodOf("DisplayServer\000", "global_menu_set_item_indentation_level\000", 3474840532)
		methodDisplayServer[41] = gdnative.MethodOf("DisplayServer\000", "global_menu_remove_item\000", 2956805083)
		methodDisplayServer[42] = gdnative.MethodOf("DisplayServer\000", "global_menu_clear\000", 83702148)
		methodDisplayServer[43] = gdnative.MethodOf("DisplayServer\000", "tts_is_speaking\000", 36873697)
		methodDisplayServer[44] = gdnative.MethodOf("DisplayServer\000", "tts_is_paused\000", 36873697)
		methodDisplayServer[45] = gdnative.MethodOf("DisplayServer\000", "tts_get_voices\000", 3995934104)
		methodDisplayServer[46] = gdnative.MethodOf("DisplayServer\000", "tts_get_voices_for_language\000", 4291131558)
		methodDisplayServer[47] = gdnative.MethodOf("DisplayServer\000", "tts_speak\000", 3723082199)
		methodDisplayServer[48] = gdnative.MethodOf("DisplayServer\000", "tts_pause\000", 3218959716)
		methodDisplayServer[49] = gdnative.MethodOf("DisplayServer\000", "tts_resume\000", 3218959716)
		methodDisplayServer[50] = gdnative.MethodOf("DisplayServer\000", "tts_stop\000", 3218959716)
		methodDisplayServer[51] = gdnative.MethodOf("DisplayServer\000", "tts_set_utterance_callback\000", 109679083)
		methodDisplayServer[52] = gdnative.MethodOf("DisplayServer\000", "mouse_set_mode\000", 348288463)
		methodDisplayServer[53] = gdnative.MethodOf("DisplayServer\000", "mouse_get_mode\000", 1353961651)
		methodDisplayServer[54] = gdnative.MethodOf("DisplayServer\000", "warp_mouse\000", 1130785943)
		methodDisplayServer[55] = gdnative.MethodOf("DisplayServer\000", "mouse_get_position\000", 3690982128)
		methodDisplayServer[56] = gdnative.MethodOf("DisplayServer\000", "mouse_get_button_state\000", 1132662608)
		methodDisplayServer[57] = gdnative.MethodOf("DisplayServer\000", "clipboard_set\000", 83702148)
		methodDisplayServer[58] = gdnative.MethodOf("DisplayServer\000", "clipboard_get\000", 201670096)
		methodDisplayServer[59] = gdnative.MethodOf("DisplayServer\000", "clipboard_has\000", 36873697)
		methodDisplayServer[60] = gdnative.MethodOf("DisplayServer\000", "clipboard_set_primary\000", 83702148)
		methodDisplayServer[61] = gdnative.MethodOf("DisplayServer\000", "clipboard_get_primary\000", 201670096)
		methodDisplayServer[62] = gdnative.MethodOf("DisplayServer\000", "get_display_cutouts\000", 3995934104)
		methodDisplayServer[63] = gdnative.MethodOf("DisplayServer\000", "get_display_safe_area\000", 410525958)
		methodDisplayServer[64] = gdnative.MethodOf("DisplayServer\000", "get_screen_count\000", 3905245786)
		methodDisplayServer[65] = gdnative.MethodOf("DisplayServer\000", "screen_get_position\000", 1725937825)
		methodDisplayServer[66] = gdnative.MethodOf("DisplayServer\000", "screen_get_size\000", 1725937825)
		methodDisplayServer[67] = gdnative.MethodOf("DisplayServer\000", "screen_get_usable_rect\000", 2439012528)
		methodDisplayServer[68] = gdnative.MethodOf("DisplayServer\000", "screen_get_dpi\000", 181039630)
		methodDisplayServer[69] = gdnative.MethodOf("DisplayServer\000", "screen_get_scale\000", 909105437)
		methodDisplayServer[70] = gdnative.MethodOf("DisplayServer\000", "screen_is_touchscreen\000", 2824505868)
		methodDisplayServer[71] = gdnative.MethodOf("DisplayServer\000", "screen_get_max_scale\000", 1740695150)
		methodDisplayServer[72] = gdnative.MethodOf("DisplayServer\000", "screen_get_refresh_rate\000", 909105437)
		methodDisplayServer[73] = gdnative.MethodOf("DisplayServer\000", "screen_set_orientation\000", 2629526904)
		methodDisplayServer[74] = gdnative.MethodOf("DisplayServer\000", "screen_get_orientation\000", 133818562)
		methodDisplayServer[75] = gdnative.MethodOf("DisplayServer\000", "screen_set_keep_on\000", 2586408642)
		methodDisplayServer[76] = gdnative.MethodOf("DisplayServer\000", "screen_is_kept_on\000", 36873697)
		methodDisplayServer[77] = gdnative.MethodOf("DisplayServer\000", "get_window_list\000", 1930428628)
		methodDisplayServer[78] = gdnative.MethodOf("DisplayServer\000", "get_window_at_screen_position\000", 2485466453)
		methodDisplayServer[79] = gdnative.MethodOf("DisplayServer\000", "create_sub_window\000", 1993979852)
		methodDisplayServer[80] = gdnative.MethodOf("DisplayServer\000", "delete_sub_window\000", 1286410249)
		methodDisplayServer[81] = gdnative.MethodOf("DisplayServer\000", "window_get_native_handle\000", 2709193271)
		methodDisplayServer[82] = gdnative.MethodOf("DisplayServer\000", "window_get_active_popup\000", 3905245786)
		methodDisplayServer[83] = gdnative.MethodOf("DisplayServer\000", "window_set_popup_safe_rect\000", 3317281434)
		methodDisplayServer[84] = gdnative.MethodOf("DisplayServer\000", "window_get_popup_safe_rect\000", 2161169500)
		methodDisplayServer[85] = gdnative.MethodOf("DisplayServer\000", "window_set_title\000", 3043792800)
		methodDisplayServer[86] = gdnative.MethodOf("DisplayServer\000", "window_set_mouse_passthrough\000", 3958815166)
		methodDisplayServer[87] = gdnative.MethodOf("DisplayServer\000", "window_get_current_screen\000", 1591665591)
		methodDisplayServer[88] = gdnative.MethodOf("DisplayServer\000", "window_set_current_screen\000", 3023605688)
		methodDisplayServer[89] = gdnative.MethodOf("DisplayServer\000", "window_get_position\000", 763922886)
		methodDisplayServer[90] = gdnative.MethodOf("DisplayServer\000", "window_set_position\000", 3614040015)
		methodDisplayServer[91] = gdnative.MethodOf("DisplayServer\000", "window_get_size\000", 763922886)
		methodDisplayServer[92] = gdnative.MethodOf("DisplayServer\000", "window_set_size\000", 3614040015)
		methodDisplayServer[93] = gdnative.MethodOf("DisplayServer\000", "window_set_rect_changed_callback\000", 3653650673)
		methodDisplayServer[94] = gdnative.MethodOf("DisplayServer\000", "window_set_window_event_callback\000", 3653650673)
		methodDisplayServer[95] = gdnative.MethodOf("DisplayServer\000", "window_set_input_event_callback\000", 3653650673)
		methodDisplayServer[96] = gdnative.MethodOf("DisplayServer\000", "window_set_input_text_callback\000", 3653650673)
		methodDisplayServer[97] = gdnative.MethodOf("DisplayServer\000", "window_set_drop_files_callback\000", 3653650673)
		methodDisplayServer[98] = gdnative.MethodOf("DisplayServer\000", "window_attach_instance_id\000", 3023605688)
		methodDisplayServer[99] = gdnative.MethodOf("DisplayServer\000", "window_get_attached_instance_id\000", 1591665591)
		methodDisplayServer[100] = gdnative.MethodOf("DisplayServer\000", "window_get_max_size\000", 763922886)
		methodDisplayServer[101] = gdnative.MethodOf("DisplayServer\000", "window_set_max_size\000", 3614040015)
		methodDisplayServer[102] = gdnative.MethodOf("DisplayServer\000", "window_get_min_size\000", 763922886)
		methodDisplayServer[103] = gdnative.MethodOf("DisplayServer\000", "window_set_min_size\000", 3614040015)
		methodDisplayServer[104] = gdnative.MethodOf("DisplayServer\000", "window_get_real_size\000", 763922886)
		methodDisplayServer[105] = gdnative.MethodOf("DisplayServer\000", "window_get_mode\000", 2185728461)
		methodDisplayServer[106] = gdnative.MethodOf("DisplayServer\000", "window_set_mode\000", 2942569511)
		methodDisplayServer[107] = gdnative.MethodOf("DisplayServer\000", "window_set_flag\000", 3971592565)
		methodDisplayServer[108] = gdnative.MethodOf("DisplayServer\000", "window_get_flag\000", 2662949986)
		methodDisplayServer[109] = gdnative.MethodOf("DisplayServer\000", "window_request_attention\000", 1995695955)
		methodDisplayServer[110] = gdnative.MethodOf("DisplayServer\000", "window_move_to_foreground\000", 1995695955)
		methodDisplayServer[111] = gdnative.MethodOf("DisplayServer\000", "window_can_draw\000", 1051549951)
		methodDisplayServer[112] = gdnative.MethodOf("DisplayServer\000", "window_set_transient\000", 3937882851)
		methodDisplayServer[113] = gdnative.MethodOf("DisplayServer\000", "window_set_exclusive\000", 300928843)
		methodDisplayServer[114] = gdnative.MethodOf("DisplayServer\000", "window_set_ime_active\000", 450484987)
		methodDisplayServer[115] = gdnative.MethodOf("DisplayServer\000", "window_set_ime_position\000", 3614040015)
		methodDisplayServer[116] = gdnative.MethodOf("DisplayServer\000", "window_set_vsync_mode\000", 1708924624)
		methodDisplayServer[117] = gdnative.MethodOf("DisplayServer\000", "window_get_vsync_mode\000", 578873795)
		methodDisplayServer[118] = gdnative.MethodOf("DisplayServer\000", "ime_get_selection\000", 3690982128)
		methodDisplayServer[119] = gdnative.MethodOf("DisplayServer\000", "ime_get_text\000", 201670096)
		methodDisplayServer[120] = gdnative.MethodOf("DisplayServer\000", "virtual_keyboard_show\000", 860410478)
		methodDisplayServer[121] = gdnative.MethodOf("DisplayServer\000", "virtual_keyboard_hide\000", 3218959716)
		methodDisplayServer[122] = gdnative.MethodOf("DisplayServer\000", "virtual_keyboard_get_height\000", 3905245786)
		methodDisplayServer[123] = gdnative.MethodOf("DisplayServer\000", "cursor_set_shape\000", 2026291549)
		methodDisplayServer[124] = gdnative.MethodOf("DisplayServer\000", "cursor_get_shape\000", 1087724927)
		methodDisplayServer[125] = gdnative.MethodOf("DisplayServer\000", "cursor_set_custom_image\000", 1358907026)
		methodDisplayServer[126] = gdnative.MethodOf("DisplayServer\000", "get_swap_cancel_ok\000", 2240911060)
		methodDisplayServer[127] = gdnative.MethodOf("DisplayServer\000", "enable_for_stealing_focus\000", 1286410249)
		methodDisplayServer[128] = gdnative.MethodOf("DisplayServer\000", "dialog_show\000", 4115553226)
		methodDisplayServer[129] = gdnative.MethodOf("DisplayServer\000", "dialog_input_text\000", 3088703427)
		methodDisplayServer[130] = gdnative.MethodOf("DisplayServer\000", "keyboard_get_layout_count\000", 3905245786)
		methodDisplayServer[131] = gdnative.MethodOf("DisplayServer\000", "keyboard_get_current_layout\000", 3905245786)
		methodDisplayServer[132] = gdnative.MethodOf("DisplayServer\000", "keyboard_set_current_layout\000", 1286410249)
		methodDisplayServer[133] = gdnative.MethodOf("DisplayServer\000", "keyboard_get_layout_language\000", 844755477)
		methodDisplayServer[134] = gdnative.MethodOf("DisplayServer\000", "keyboard_get_layout_name\000", 844755477)
		methodDisplayServer[135] = gdnative.MethodOf("DisplayServer\000", "keyboard_get_keycode_from_physical\000", 3447613187)
		methodDisplayServer[136] = gdnative.MethodOf("DisplayServer\000", "process_events\000", 3218959716)
		methodDisplayServer[137] = gdnative.MethodOf("DisplayServer\000", "force_process_and_drop_events\000", 3218959716)
		methodDisplayServer[138] = gdnative.MethodOf("DisplayServer\000", "set_native_icon\000", 83702148)
		methodDisplayServer[139] = gdnative.MethodOf("DisplayServer\000", "set_icon\000", 532598488)
		methodDisplayServer[140] = gdnative.MethodOf("DisplayServer\000", "tablet_get_driver_count\000", 3905245786)
		methodDisplayServer[141] = gdnative.MethodOf("DisplayServer\000", "tablet_get_driver_name\000", 844755477)
		methodDisplayServer[142] = gdnative.MethodOf("DisplayServer\000", "tablet_get_current_driver\000", 201670096)
		methodDisplayServer[143] = gdnative.MethodOf("DisplayServer\000", "tablet_set_current_driver\000", 83702148)
		methodENetConnection[0] = gdnative.MethodOf("ENetConnection\000", "create_host_bound\000", 866250949)
		methodENetConnection[1] = gdnative.MethodOf("ENetConnection\000", "create_host\000", 117198950)
		methodENetConnection[2] = gdnative.MethodOf("ENetConnection\000", "destroy\000", 3218959716)
		methodENetConnection[3] = gdnative.MethodOf("ENetConnection\000", "connect_to_host\000", 385984708)
		methodENetConnection[4] = gdnative.MethodOf("ENetConnection\000", "service\000", 2402345344)
		methodENetConnection[5] = gdnative.MethodOf("ENetConnection\000", "flush\000", 3218959716)
		methodENetConnection[6] = gdnative.MethodOf("ENetConnection\000", "bandwidth_limit\000", 2302169788)
		methodENetConnection[7] = gdnative.MethodOf("ENetConnection\000", "channel_limit\000", 1286410249)
		methodENetConnection[8] = gdnative.MethodOf("ENetConnection\000", "broadcast\000", 2772371345)
		methodENetConnection[9] = gdnative.MethodOf("ENetConnection\000", "compress\000", 2660215187)
		methodENetConnection[10] = gdnative.MethodOf("ENetConnection\000", "dtls_server_setup\000", 3447544237)
		methodENetConnection[11] = gdnative.MethodOf("ENetConnection\000", "dtls_client_setup\000", 2959136280)
		methodENetConnection[12] = gdnative.MethodOf("ENetConnection\000", "refuse_new_connections\000", 2586408642)
		methodENetConnection[13] = gdnative.MethodOf("ENetConnection\000", "pop_statistic\000", 2166904170)
		methodENetConnection[14] = gdnative.MethodOf("ENetConnection\000", "get_max_channels\000", 3905245786)
		methodENetConnection[15] = gdnative.MethodOf("ENetConnection\000", "get_local_port\000", 3905245786)
		methodENetConnection[16] = gdnative.MethodOf("ENetConnection\000", "get_peers\000", 2915620761)
		methodENetMultiplayerPeer[0] = gdnative.MethodOf("ENetMultiplayerPeer\000", "create_server\000", 1616151701)
		methodENetMultiplayerPeer[1] = gdnative.MethodOf("ENetMultiplayerPeer\000", "create_client\000", 920217784)
		methodENetMultiplayerPeer[2] = gdnative.MethodOf("ENetMultiplayerPeer\000", "create_mesh\000", 844576869)
		methodENetMultiplayerPeer[3] = gdnative.MethodOf("ENetMultiplayerPeer\000", "add_mesh_peer\000", 1293458335)
		methodENetMultiplayerPeer[4] = gdnative.MethodOf("ENetMultiplayerPeer\000", "close_connection\000", 2886164389)
		methodENetMultiplayerPeer[5] = gdnative.MethodOf("ENetMultiplayerPeer\000", "set_bind_ip\000", 83702148)
		methodENetMultiplayerPeer[6] = gdnative.MethodOf("ENetMultiplayerPeer\000", "set_server_relay_enabled\000", 2586408642)
		methodENetMultiplayerPeer[7] = gdnative.MethodOf("ENetMultiplayerPeer\000", "is_server_relay_enabled\000", 36873697)
		methodENetMultiplayerPeer[8] = gdnative.MethodOf("ENetMultiplayerPeer\000", "get_host\000", 4103238886)
		methodENetMultiplayerPeer[9] = gdnative.MethodOf("ENetMultiplayerPeer\000", "get_peer\000", 3793311544)
		methodENetPacketPeer[0] = gdnative.MethodOf("ENetPacketPeer\000", "peer_disconnect\000", 1995695955)
		methodENetPacketPeer[1] = gdnative.MethodOf("ENetPacketPeer\000", "peer_disconnect_later\000", 1995695955)
		methodENetPacketPeer[2] = gdnative.MethodOf("ENetPacketPeer\000", "peer_disconnect_now\000", 1995695955)
		methodENetPacketPeer[3] = gdnative.MethodOf("ENetPacketPeer\000", "ping\000", 3218959716)
		methodENetPacketPeer[4] = gdnative.MethodOf("ENetPacketPeer\000", "ping_interval\000", 1286410249)
		methodENetPacketPeer[5] = gdnative.MethodOf("ENetPacketPeer\000", "reset\000", 3218959716)
		methodENetPacketPeer[6] = gdnative.MethodOf("ENetPacketPeer\000", "send\000", 120522849)
		methodENetPacketPeer[7] = gdnative.MethodOf("ENetPacketPeer\000", "throttle_configure\000", 1649997291)
		methodENetPacketPeer[8] = gdnative.MethodOf("ENetPacketPeer\000", "set_timeout\000", 1649997291)
		methodENetPacketPeer[9] = gdnative.MethodOf("ENetPacketPeer\000", "get_statistic\000", 1642578323)
		methodENetPacketPeer[10] = gdnative.MethodOf("ENetPacketPeer\000", "get_state\000", 711068532)
		methodENetPacketPeer[11] = gdnative.MethodOf("ENetPacketPeer\000", "get_channels\000", 3905245786)
		methodENetPacketPeer[12] = gdnative.MethodOf("ENetPacketPeer\000", "is_active\000", 36873697)
		methodEditorCommandPalette[0] = gdnative.MethodOf("EditorCommandPalette\000", "add_command\000", 3664614892)
		methodEditorCommandPalette[1] = gdnative.MethodOf("EditorCommandPalette\000", "remove_command\000", 83702148)
		methodEditorDebuggerPlugin[0] = gdnative.MethodOf("EditorDebuggerPlugin\000", "send_message\000", 1209351045)
		methodEditorDebuggerPlugin[1] = gdnative.MethodOf("EditorDebuggerPlugin\000", "register_message_capture\000", 1874754934)
		methodEditorDebuggerPlugin[2] = gdnative.MethodOf("EditorDebuggerPlugin\000", "unregister_message_capture\000", 3304788590)
		methodEditorDebuggerPlugin[3] = gdnative.MethodOf("EditorDebuggerPlugin\000", "has_capture\000", 2041966384)
		methodEditorDebuggerPlugin[4] = gdnative.MethodOf("EditorDebuggerPlugin\000", "is_breaked\000", 2240911060)
		methodEditorDebuggerPlugin[5] = gdnative.MethodOf("EditorDebuggerPlugin\000", "is_debuggable\000", 2240911060)
		methodEditorDebuggerPlugin[6] = gdnative.MethodOf("EditorDebuggerPlugin\000", "is_session_active\000", 2240911060)
		methodEditorExportPlugin[0] = gdnative.MethodOf("EditorExportPlugin\000", "add_shared_object\000", 3098291045)
		methodEditorExportPlugin[1] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_project_static_lib\000", 83702148)
		methodEditorExportPlugin[2] = gdnative.MethodOf("EditorExportPlugin\000", "add_file\000", 527928637)
		methodEditorExportPlugin[3] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_framework\000", 83702148)
		methodEditorExportPlugin[4] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_embedded_framework\000", 83702148)
		methodEditorExportPlugin[5] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_plist_content\000", 83702148)
		methodEditorExportPlugin[6] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_linker_flags\000", 83702148)
		methodEditorExportPlugin[7] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_bundle_file\000", 83702148)
		methodEditorExportPlugin[8] = gdnative.MethodOf("EditorExportPlugin\000", "add_ios_cpp_code\000", 83702148)
		methodEditorExportPlugin[9] = gdnative.MethodOf("EditorExportPlugin\000", "add_macos_plugin_file\000", 83702148)
		methodEditorExportPlugin[10] = gdnative.MethodOf("EditorExportPlugin\000", "skip\000", 3218959716)
		methodEditorFeatureProfile[0] = gdnative.MethodOf("EditorFeatureProfile\000", "set_disable_class\000", 2524380260)
		methodEditorFeatureProfile[1] = gdnative.MethodOf("EditorFeatureProfile\000", "is_class_disabled\000", 2619796661)
		methodEditorFeatureProfile[2] = gdnative.MethodOf("EditorFeatureProfile\000", "set_disable_class_editor\000", 2524380260)
		methodEditorFeatureProfile[3] = gdnative.MethodOf("EditorFeatureProfile\000", "is_class_editor_disabled\000", 2619796661)
		methodEditorFeatureProfile[4] = gdnative.MethodOf("EditorFeatureProfile\000", "set_disable_class_property\000", 865197084)
		methodEditorFeatureProfile[5] = gdnative.MethodOf("EditorFeatureProfile\000", "is_class_property_disabled\000", 471820014)
		methodEditorFeatureProfile[6] = gdnative.MethodOf("EditorFeatureProfile\000", "set_disable_feature\000", 1884871044)
		methodEditorFeatureProfile[7] = gdnative.MethodOf("EditorFeatureProfile\000", "is_feature_disabled\000", 2974403161)
		methodEditorFeatureProfile[8] = gdnative.MethodOf("EditorFeatureProfile\000", "get_feature_name\000", 3401335809)
		methodEditorFeatureProfile[9] = gdnative.MethodOf("EditorFeatureProfile\000", "save_to_file\000", 166001499)
		methodEditorFeatureProfile[10] = gdnative.MethodOf("EditorFeatureProfile\000", "load_from_file\000", 166001499)
		methodEditorFileDialog[0] = gdnative.MethodOf("EditorFileDialog\000", "clear_filters\000", 3218959716)
		methodEditorFileDialog[1] = gdnative.MethodOf("EditorFileDialog\000", "add_filter\000", 233059325)
		methodEditorFileDialog[2] = gdnative.MethodOf("EditorFileDialog\000", "get_current_dir\000", 201670096)
		methodEditorFileDialog[3] = gdnative.MethodOf("EditorFileDialog\000", "get_current_file\000", 201670096)
		methodEditorFileDialog[4] = gdnative.MethodOf("EditorFileDialog\000", "get_current_path\000", 201670096)
		methodEditorFileDialog[5] = gdnative.MethodOf("EditorFileDialog\000", "set_current_dir\000", 83702148)
		methodEditorFileDialog[6] = gdnative.MethodOf("EditorFileDialog\000", "set_current_file\000", 83702148)
		methodEditorFileDialog[7] = gdnative.MethodOf("EditorFileDialog\000", "set_current_path\000", 83702148)
		methodEditorFileDialog[8] = gdnative.MethodOf("EditorFileDialog\000", "set_file_mode\000", 274150415)
		methodEditorFileDialog[9] = gdnative.MethodOf("EditorFileDialog\000", "get_file_mode\000", 2681044145)
		methodEditorFileDialog[10] = gdnative.MethodOf("EditorFileDialog\000", "get_vbox\000", 915758477)
		methodEditorFileDialog[11] = gdnative.MethodOf("EditorFileDialog\000", "set_access\000", 3882893764)
		methodEditorFileDialog[12] = gdnative.MethodOf("EditorFileDialog\000", "get_access\000", 778734016)
		methodEditorFileDialog[13] = gdnative.MethodOf("EditorFileDialog\000", "set_show_hidden_files\000", 2586408642)
		methodEditorFileDialog[14] = gdnative.MethodOf("EditorFileDialog\000", "is_showing_hidden_files\000", 36873697)
		methodEditorFileDialog[15] = gdnative.MethodOf("EditorFileDialog\000", "set_display_mode\000", 3049004050)
		methodEditorFileDialog[16] = gdnative.MethodOf("EditorFileDialog\000", "get_display_mode\000", 3517174669)
		methodEditorFileDialog[17] = gdnative.MethodOf("EditorFileDialog\000", "set_disable_overwrite_warning\000", 2586408642)
		methodEditorFileDialog[18] = gdnative.MethodOf("EditorFileDialog\000", "is_overwrite_warning_disabled\000", 36873697)
		methodEditorFileDialog[19] = gdnative.MethodOf("EditorFileDialog\000", "invalidate\000", 3218959716)
		methodEditorFileSystem[0] = gdnative.MethodOf("EditorFileSystem\000", "get_filesystem\000", 842323275)
		methodEditorFileSystem[1] = gdnative.MethodOf("EditorFileSystem\000", "is_scanning\000", 36873697)
		methodEditorFileSystem[2] = gdnative.MethodOf("EditorFileSystem\000", "get_scanning_progress\000", 1740695150)
		methodEditorFileSystem[3] = gdnative.MethodOf("EditorFileSystem\000", "scan\000", 3218959716)
		methodEditorFileSystem[4] = gdnative.MethodOf("EditorFileSystem\000", "scan_sources\000", 3218959716)
		methodEditorFileSystem[5] = gdnative.MethodOf("EditorFileSystem\000", "update_file\000", 83702148)
		methodEditorFileSystem[6] = gdnative.MethodOf("EditorFileSystem\000", "get_filesystem_path\000", 3188521125)
		methodEditorFileSystem[7] = gdnative.MethodOf("EditorFileSystem\000", "get_file_type\000", 3135753539)
		methodEditorFileSystem[8] = gdnative.MethodOf("EditorFileSystem\000", "update_script_classes\000", 3218959716)
		methodEditorFileSystem[9] = gdnative.MethodOf("EditorFileSystem\000", "reimport_files\000", 4015028928)
		methodEditorFileSystemDirectory[0] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_subdir_count\000", 3905245786)
		methodEditorFileSystemDirectory[1] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_subdir\000", 2330964164)
		methodEditorFileSystemDirectory[2] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_count\000", 3905245786)
		methodEditorFileSystemDirectory[3] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file\000", 844755477)
		methodEditorFileSystemDirectory[4] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_path\000", 844755477)
		methodEditorFileSystemDirectory[5] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_type\000", 659327637)
		methodEditorFileSystemDirectory[6] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_script_class_name\000", 844755477)
		methodEditorFileSystemDirectory[7] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_script_class_extends\000", 844755477)
		methodEditorFileSystemDirectory[8] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_file_import_is_valid\000", 1116898809)
		methodEditorFileSystemDirectory[9] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_name\000", 2841200299)
		methodEditorFileSystemDirectory[10] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_path\000", 201670096)
		methodEditorFileSystemDirectory[11] = gdnative.MethodOf("EditorFileSystemDirectory\000", "get_parent\000", 842323275)
		methodEditorFileSystemDirectory[12] = gdnative.MethodOf("EditorFileSystemDirectory\000", "find_file_index\000", 1321353865)
		methodEditorFileSystemDirectory[13] = gdnative.MethodOf("EditorFileSystemDirectory\000", "find_dir_index\000", 1321353865)
		methodEditorInspectorPlugin[0] = gdnative.MethodOf("EditorInspectorPlugin\000", "add_custom_control\000", 1496901182)
		methodEditorInspectorPlugin[1] = gdnative.MethodOf("EditorInspectorPlugin\000", "add_property_editor\000", 3406284123)
		methodEditorInspectorPlugin[2] = gdnative.MethodOf("EditorInspectorPlugin\000", "add_property_editor_for_multiple_properties\000", 788598683)
		methodEditorInterface[0] = gdnative.MethodOf("EditorInterface\000", "inspect_object\000", 2564140749)
		methodEditorInterface[1] = gdnative.MethodOf("EditorInterface\000", "get_selection\000", 50507531)
		methodEditorInterface[2] = gdnative.MethodOf("EditorInterface\000", "get_editor_settings\000", 2469088558)
		methodEditorInterface[3] = gdnative.MethodOf("EditorInterface\000", "get_script_editor\000", 3947407316)
		methodEditorInterface[4] = gdnative.MethodOf("EditorInterface\000", "get_base_control\000", 829782337)
		methodEditorInterface[5] = gdnative.MethodOf("EditorInterface\000", "get_editor_scale\000", 1740695150)
		methodEditorInterface[6] = gdnative.MethodOf("EditorInterface\000", "edit_resource\000", 968641751)
		methodEditorInterface[7] = gdnative.MethodOf("EditorInterface\000", "edit_node\000", 1078189570)
		methodEditorInterface[8] = gdnative.MethodOf("EditorInterface\000", "edit_script\000", 3664508569)
		methodEditorInterface[9] = gdnative.MethodOf("EditorInterface\000", "open_scene_from_path\000", 83702148)
		methodEditorInterface[10] = gdnative.MethodOf("EditorInterface\000", "reload_scene_from_path\000", 83702148)
		methodEditorInterface[11] = gdnative.MethodOf("EditorInterface\000", "play_main_scene\000", 3218959716)
		methodEditorInterface[12] = gdnative.MethodOf("EditorInterface\000", "play_current_scene\000", 3218959716)
		methodEditorInterface[13] = gdnative.MethodOf("EditorInterface\000", "play_custom_scene\000", 83702148)
		methodEditorInterface[14] = gdnative.MethodOf("EditorInterface\000", "stop_playing_scene\000", 3218959716)
		methodEditorInterface[15] = gdnative.MethodOf("EditorInterface\000", "is_playing_scene\000", 36873697)
		methodEditorInterface[16] = gdnative.MethodOf("EditorInterface\000", "get_playing_scene\000", 201670096)
		methodEditorInterface[17] = gdnative.MethodOf("EditorInterface\000", "get_open_scenes\000", 3995934104)
		methodEditorInterface[18] = gdnative.MethodOf("EditorInterface\000", "get_edited_scene_root\000", 1818953479)
		methodEditorInterface[19] = gdnative.MethodOf("EditorInterface\000", "get_resource_previewer\000", 1578506115)
		methodEditorInterface[20] = gdnative.MethodOf("EditorInterface\000", "get_resource_filesystem\000", 492575303)
		methodEditorInterface[21] = gdnative.MethodOf("EditorInterface\000", "get_editor_main_control\000", 829782337)
		methodEditorInterface[22] = gdnative.MethodOf("EditorInterface\000", "make_mesh_previews\000", 878078554)
		methodEditorInterface[23] = gdnative.MethodOf("EditorInterface\000", "select_file\000", 83702148)
		methodEditorInterface[24] = gdnative.MethodOf("EditorInterface\000", "get_selected_path\000", 201670096)
		methodEditorInterface[25] = gdnative.MethodOf("EditorInterface\000", "get_current_path\000", 201670096)
		methodEditorInterface[26] = gdnative.MethodOf("EditorInterface\000", "get_file_system_dock\000", 561123517)
		methodEditorInterface[27] = gdnative.MethodOf("EditorInterface\000", "get_editor_paths\000", 4197665367)
		methodEditorInterface[28] = gdnative.MethodOf("EditorInterface\000", "get_command_palette\000", 2471163807)
		methodEditorInterface[29] = gdnative.MethodOf("EditorInterface\000", "set_plugin_enabled\000", 2678287736)
		methodEditorInterface[30] = gdnative.MethodOf("EditorInterface\000", "is_plugin_enabled\000", 3927539163)
		methodEditorInterface[31] = gdnative.MethodOf("EditorInterface\000", "get_inspector\000", 3517113938)
		methodEditorInterface[32] = gdnative.MethodOf("EditorInterface\000", "save_scene\000", 166280745)
		methodEditorInterface[33] = gdnative.MethodOf("EditorInterface\000", "save_scene_as\000", 1168363258)
		methodEditorInterface[34] = gdnative.MethodOf("EditorInterface\000", "set_main_screen_editor\000", 83702148)
		methodEditorInterface[35] = gdnative.MethodOf("EditorInterface\000", "set_distraction_free_mode\000", 2586408642)
		methodEditorInterface[36] = gdnative.MethodOf("EditorInterface\000", "is_distraction_free_mode_enabled\000", 36873697)
		methodEditorNode3DGizmo[0] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_lines\000", 302451090)
		methodEditorNode3DGizmo[1] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_mesh\000", 1868867708)
		methodEditorNode3DGizmo[2] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_collision_segments\000", 334873810)
		methodEditorNode3DGizmo[3] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_collision_triangles\000", 54901064)
		methodEditorNode3DGizmo[4] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_unscaled_billboard\000", 3719733075)
		methodEditorNode3DGizmo[5] = gdnative.MethodOf("EditorNode3DGizmo\000", "add_handles\000", 2254560097)
		methodEditorNode3DGizmo[6] = gdnative.MethodOf("EditorNode3DGizmo\000", "set_spatial_node\000", 1078189570)
		methodEditorNode3DGizmo[7] = gdnative.MethodOf("EditorNode3DGizmo\000", "get_spatial_node\000", 151077316)
		methodEditorNode3DGizmo[8] = gdnative.MethodOf("EditorNode3DGizmo\000", "get_plugin\000", 4250544552)
		methodEditorNode3DGizmo[9] = gdnative.MethodOf("EditorNode3DGizmo\000", "clear\000", 3218959716)
		methodEditorNode3DGizmo[10] = gdnative.MethodOf("EditorNode3DGizmo\000", "set_hidden\000", 2586408642)
		methodEditorNode3DGizmo[11] = gdnative.MethodOf("EditorNode3DGizmo\000", "is_subgizmo_selected\000", 1116898809)
		methodEditorNode3DGizmo[12] = gdnative.MethodOf("EditorNode3DGizmo\000", "get_subgizmo_selection\000", 1930428628)
		methodEditorNode3DGizmoPlugin[0] = gdnative.MethodOf("EditorNode3DGizmoPlugin\000", "create_material\000", 3486012546)
		methodEditorNode3DGizmoPlugin[1] = gdnative.MethodOf("EditorNode3DGizmoPlugin\000", "create_icon_material\000", 2976007329)
		methodEditorNode3DGizmoPlugin[2] = gdnative.MethodOf("EditorNode3DGizmoPlugin\000", "create_handle_material\000", 2486475223)
		methodEditorNode3DGizmoPlugin[3] = gdnative.MethodOf("EditorNode3DGizmoPlugin\000", "add_material\000", 1374068695)
		methodEditorNode3DGizmoPlugin[4] = gdnative.MethodOf("EditorNode3DGizmoPlugin\000", "get_material\000", 3501703615)
		methodEditorPaths[0] = gdnative.MethodOf("EditorPaths\000", "get_data_dir\000", 201670096)
		methodEditorPaths[1] = gdnative.MethodOf("EditorPaths\000", "get_config_dir\000", 201670096)
		methodEditorPaths[2] = gdnative.MethodOf("EditorPaths\000", "get_cache_dir\000", 201670096)
		methodEditorPaths[3] = gdnative.MethodOf("EditorPaths\000", "is_self_contained\000", 36873697)
		methodEditorPaths[4] = gdnative.MethodOf("EditorPaths\000", "get_self_contained_file\000", 201670096)
		methodEditorPaths[5] = gdnative.MethodOf("EditorPaths\000", "get_project_settings_dir\000", 201670096)
		methodEditorPlugin[0] = gdnative.MethodOf("EditorPlugin\000", "add_control_to_container\000", 3092750152)
		methodEditorPlugin[1] = gdnative.MethodOf("EditorPlugin\000", "add_control_to_bottom_panel\000", 3526039376)
		methodEditorPlugin[2] = gdnative.MethodOf("EditorPlugin\000", "add_control_to_dock\000", 3354871258)
		methodEditorPlugin[3] = gdnative.MethodOf("EditorPlugin\000", "remove_control_from_docks\000", 1496901182)
		methodEditorPlugin[4] = gdnative.MethodOf("EditorPlugin\000", "remove_control_from_bottom_panel\000", 1496901182)
		methodEditorPlugin[5] = gdnative.MethodOf("EditorPlugin\000", "remove_control_from_container\000", 3092750152)
		methodEditorPlugin[6] = gdnative.MethodOf("EditorPlugin\000", "add_tool_menu_item\000", 2137474292)
		methodEditorPlugin[7] = gdnative.MethodOf("EditorPlugin\000", "add_tool_submenu_item\000", 1019428915)
		methodEditorPlugin[8] = gdnative.MethodOf("EditorPlugin\000", "remove_tool_menu_item\000", 83702148)
		methodEditorPlugin[9] = gdnative.MethodOf("EditorPlugin\000", "get_export_as_menu\000", 1775878644)
		methodEditorPlugin[10] = gdnative.MethodOf("EditorPlugin\000", "add_custom_type\000", 1986814599)
		methodEditorPlugin[11] = gdnative.MethodOf("EditorPlugin\000", "remove_custom_type\000", 83702148)
		methodEditorPlugin[12] = gdnative.MethodOf("EditorPlugin\000", "add_autoload_singleton\000", 3186203200)
		methodEditorPlugin[13] = gdnative.MethodOf("EditorPlugin\000", "remove_autoload_singleton\000", 83702148)
		methodEditorPlugin[14] = gdnative.MethodOf("EditorPlugin\000", "update_overlays\000", 3905245786)
		methodEditorPlugin[15] = gdnative.MethodOf("EditorPlugin\000", "make_bottom_panel_item_visible\000", 1496901182)
		methodEditorPlugin[16] = gdnative.MethodOf("EditorPlugin\000", "hide_bottom_panel\000", 3218959716)
		methodEditorPlugin[17] = gdnative.MethodOf("EditorPlugin\000", "get_undo_redo\000", 170677864)
		methodEditorPlugin[18] = gdnative.MethodOf("EditorPlugin\000", "add_undo_redo_inspector_hook_callback\000", 1611583062)
		methodEditorPlugin[19] = gdnative.MethodOf("EditorPlugin\000", "remove_undo_redo_inspector_hook_callback\000", 1611583062)
		methodEditorPlugin[20] = gdnative.MethodOf("EditorPlugin\000", "queue_save_layout\000", 3218959716)
		methodEditorPlugin[21] = gdnative.MethodOf("EditorPlugin\000", "add_translation_parser_plugin\000", 3116463128)
		methodEditorPlugin[22] = gdnative.MethodOf("EditorPlugin\000", "remove_translation_parser_plugin\000", 3116463128)
		methodEditorPlugin[23] = gdnative.MethodOf("EditorPlugin\000", "add_import_plugin\000", 3113975762)
		methodEditorPlugin[24] = gdnative.MethodOf("EditorPlugin\000", "remove_import_plugin\000", 2312482773)
		methodEditorPlugin[25] = gdnative.MethodOf("EditorPlugin\000", "add_scene_format_importer_plugin\000", 2764104752)
		methodEditorPlugin[26] = gdnative.MethodOf("EditorPlugin\000", "remove_scene_format_importer_plugin\000", 2637776123)
		methodEditorPlugin[27] = gdnative.MethodOf("EditorPlugin\000", "add_scene_post_import_plugin\000", 3492436322)
		methodEditorPlugin[28] = gdnative.MethodOf("EditorPlugin\000", "remove_scene_post_import_plugin\000", 3045178206)
		methodEditorPlugin[29] = gdnative.MethodOf("EditorPlugin\000", "add_export_plugin\000", 4095952207)
		methodEditorPlugin[30] = gdnative.MethodOf("EditorPlugin\000", "remove_export_plugin\000", 4095952207)
		methodEditorPlugin[31] = gdnative.MethodOf("EditorPlugin\000", "add_spatial_gizmo_plugin\000", 1541015022)
		methodEditorPlugin[32] = gdnative.MethodOf("EditorPlugin\000", "remove_spatial_gizmo_plugin\000", 1541015022)
		methodEditorPlugin[33] = gdnative.MethodOf("EditorPlugin\000", "add_inspector_plugin\000", 546395733)
		methodEditorPlugin[34] = gdnative.MethodOf("EditorPlugin\000", "remove_inspector_plugin\000", 546395733)
		methodEditorPlugin[35] = gdnative.MethodOf("EditorPlugin\000", "set_input_event_forwarding_always_enabled\000", 3218959716)
		methodEditorPlugin[36] = gdnative.MethodOf("EditorPlugin\000", "set_force_draw_over_forwarding_enabled\000", 3218959716)
		methodEditorPlugin[37] = gdnative.MethodOf("EditorPlugin\000", "get_editor_interface\000", 4223731786)
		methodEditorPlugin[38] = gdnative.MethodOf("EditorPlugin\000", "get_script_create_dialog\000", 3121871482)
		methodEditorPlugin[39] = gdnative.MethodOf("EditorPlugin\000", "add_debugger_plugin\000", 3657522847)
		methodEditorPlugin[40] = gdnative.MethodOf("EditorPlugin\000", "remove_debugger_plugin\000", 3657522847)
		methodEditorProperty[0] = gdnative.MethodOf("EditorProperty\000", "set_label\000", 83702148)
		methodEditorProperty[1] = gdnative.MethodOf("EditorProperty\000", "get_label\000", 201670096)
		methodEditorProperty[2] = gdnative.MethodOf("EditorProperty\000", "set_read_only\000", 2586408642)
		methodEditorProperty[3] = gdnative.MethodOf("EditorProperty\000", "is_read_only\000", 36873697)
		methodEditorProperty[4] = gdnative.MethodOf("EditorProperty\000", "set_checkable\000", 2586408642)
		methodEditorProperty[5] = gdnative.MethodOf("EditorProperty\000", "is_checkable\000", 36873697)
		methodEditorProperty[6] = gdnative.MethodOf("EditorProperty\000", "set_checked\000", 2586408642)
		methodEditorProperty[7] = gdnative.MethodOf("EditorProperty\000", "is_checked\000", 36873697)
		methodEditorProperty[8] = gdnative.MethodOf("EditorProperty\000", "set_draw_warning\000", 2586408642)
		methodEditorProperty[9] = gdnative.MethodOf("EditorProperty\000", "is_draw_warning\000", 36873697)
		methodEditorProperty[10] = gdnative.MethodOf("EditorProperty\000", "set_keying\000", 2586408642)
		methodEditorProperty[11] = gdnative.MethodOf("EditorProperty\000", "is_keying\000", 36873697)
		methodEditorProperty[12] = gdnative.MethodOf("EditorProperty\000", "set_deletable\000", 2586408642)
		methodEditorProperty[13] = gdnative.MethodOf("EditorProperty\000", "is_deletable\000", 36873697)
		methodEditorProperty[14] = gdnative.MethodOf("EditorProperty\000", "get_edited_property\000", 2002593661)
		methodEditorProperty[15] = gdnative.MethodOf("EditorProperty\000", "get_edited_object\000", 2050059866)
		methodEditorProperty[16] = gdnative.MethodOf("EditorProperty\000", "get_tooltip_text\000", 201670096)
		methodEditorProperty[17] = gdnative.MethodOf("EditorProperty\000", "update_property\000", 3218959716)
		methodEditorProperty[18] = gdnative.MethodOf("EditorProperty\000", "add_focusable\000", 1496901182)
		methodEditorProperty[19] = gdnative.MethodOf("EditorProperty\000", "set_bottom_editor\000", 1496901182)
		methodEditorProperty[20] = gdnative.MethodOf("EditorProperty\000", "emit_changed\000", 3069422438)
		methodEditorResourcePicker[0] = gdnative.MethodOf("EditorResourcePicker\000", "set_base_type\000", 83702148)
		methodEditorResourcePicker[1] = gdnative.MethodOf("EditorResourcePicker\000", "get_base_type\000", 201670096)
		methodEditorResourcePicker[2] = gdnative.MethodOf("EditorResourcePicker\000", "get_allowed_types\000", 1139954409)
		methodEditorResourcePicker[3] = gdnative.MethodOf("EditorResourcePicker\000", "set_edited_resource\000", 968641751)
		methodEditorResourcePicker[4] = gdnative.MethodOf("EditorResourcePicker\000", "get_edited_resource\000", 2674603643)
		methodEditorResourcePicker[5] = gdnative.MethodOf("EditorResourcePicker\000", "set_toggle_mode\000", 2586408642)
		methodEditorResourcePicker[6] = gdnative.MethodOf("EditorResourcePicker\000", "is_toggle_mode\000", 36873697)
		methodEditorResourcePicker[7] = gdnative.MethodOf("EditorResourcePicker\000", "set_toggle_pressed\000", 2586408642)
		methodEditorResourcePicker[8] = gdnative.MethodOf("EditorResourcePicker\000", "set_editable\000", 2586408642)
		methodEditorResourcePicker[9] = gdnative.MethodOf("EditorResourcePicker\000", "is_editable\000", 36873697)
		methodEditorResourcePreview[0] = gdnative.MethodOf("EditorResourcePreview\000", "queue_resource_preview\000", 233177534)
		methodEditorResourcePreview[1] = gdnative.MethodOf("EditorResourcePreview\000", "queue_edited_resource_preview\000", 1608376650)
		methodEditorResourcePreview[2] = gdnative.MethodOf("EditorResourcePreview\000", "add_preview_generator\000", 332288124)
		methodEditorResourcePreview[3] = gdnative.MethodOf("EditorResourcePreview\000", "remove_preview_generator\000", 332288124)
		methodEditorResourcePreview[4] = gdnative.MethodOf("EditorResourcePreview\000", "check_for_invalidation\000", 83702148)
		methodEditorScenePostImport[0] = gdnative.MethodOf("EditorScenePostImport\000", "get_source_file\000", 201670096)
		methodEditorScenePostImportPlugin[0] = gdnative.MethodOf("EditorScenePostImportPlugin\000", "get_option_value\000", 2760726917)
		methodEditorScenePostImportPlugin[1] = gdnative.MethodOf("EditorScenePostImportPlugin\000", "add_import_option\000", 402577236)
		methodEditorScenePostImportPlugin[2] = gdnative.MethodOf("EditorScenePostImportPlugin\000", "add_import_option_advanced\000", 3774155785)
		methodEditorScript[0] = gdnative.MethodOf("EditorScript\000", "add_root_node\000", 1078189570)
		methodEditorScript[1] = gdnative.MethodOf("EditorScript\000", "get_scene\000", 1818953479)
		methodEditorScript[2] = gdnative.MethodOf("EditorScript\000", "get_editor_interface\000", 4223731786)
		methodEditorScriptPicker[0] = gdnative.MethodOf("EditorScriptPicker\000", "set_script_owner\000", 1078189570)
		methodEditorScriptPicker[1] = gdnative.MethodOf("EditorScriptPicker\000", "get_script_owner\000", 3160264692)
		methodEditorSelection[0] = gdnative.MethodOf("EditorSelection\000", "clear\000", 3218959716)
		methodEditorSelection[1] = gdnative.MethodOf("EditorSelection\000", "add_node\000", 1078189570)
		methodEditorSelection[2] = gdnative.MethodOf("EditorSelection\000", "remove_node\000", 1078189570)
		methodEditorSelection[3] = gdnative.MethodOf("EditorSelection\000", "get_selected_nodes\000", 2915620761)
		methodEditorSelection[4] = gdnative.MethodOf("EditorSelection\000", "get_transformable_selected_nodes\000", 2915620761)
		methodEditorSettings[0] = gdnative.MethodOf("EditorSettings\000", "has_setting\000", 3927539163)
		methodEditorSettings[1] = gdnative.MethodOf("EditorSettings\000", "set_setting\000", 402577236)
		methodEditorSettings[2] = gdnative.MethodOf("EditorSettings\000", "get_setting\000", 1868160156)
		methodEditorSettings[3] = gdnative.MethodOf("EditorSettings\000", "erase\000", 83702148)
		methodEditorSettings[4] = gdnative.MethodOf("EditorSettings\000", "set_initial_value\000", 1529169264)
		methodEditorSettings[5] = gdnative.MethodOf("EditorSettings\000", "add_property_info\000", 4155329257)
		methodEditorSettings[6] = gdnative.MethodOf("EditorSettings\000", "set_project_metadata\000", 2504492430)
		methodEditorSettings[7] = gdnative.MethodOf("EditorSettings\000", "get_project_metadata\000", 89809366)
		methodEditorSettings[8] = gdnative.MethodOf("EditorSettings\000", "set_favorites\000", 4015028928)
		methodEditorSettings[9] = gdnative.MethodOf("EditorSettings\000", "get_favorites\000", 1139954409)
		methodEditorSettings[10] = gdnative.MethodOf("EditorSettings\000", "set_recent_dirs\000", 4015028928)
		methodEditorSettings[11] = gdnative.MethodOf("EditorSettings\000", "get_recent_dirs\000", 1139954409)
		methodEditorSettings[12] = gdnative.MethodOf("EditorSettings\000", "set_builtin_action_override\000", 1209351045)
		methodEditorSettings[13] = gdnative.MethodOf("EditorSettings\000", "check_changed_settings_in_group\000", 3927539163)
		methodEditorSettings[14] = gdnative.MethodOf("EditorSettings\000", "get_changed_settings\000", 3995934104)
		methodEditorSettings[15] = gdnative.MethodOf("EditorSettings\000", "mark_setting_changed\000", 83702148)
		methodEditorSpinSlider[0] = gdnative.MethodOf("EditorSpinSlider\000", "set_label\000", 83702148)
		methodEditorSpinSlider[1] = gdnative.MethodOf("EditorSpinSlider\000", "get_label\000", 201670096)
		methodEditorSpinSlider[2] = gdnative.MethodOf("EditorSpinSlider\000", "set_suffix\000", 83702148)
		methodEditorSpinSlider[3] = gdnative.MethodOf("EditorSpinSlider\000", "get_suffix\000", 201670096)
		methodEditorSpinSlider[4] = gdnative.MethodOf("EditorSpinSlider\000", "set_read_only\000", 2586408642)
		methodEditorSpinSlider[5] = gdnative.MethodOf("EditorSpinSlider\000", "is_read_only\000", 36873697)
		methodEditorSpinSlider[6] = gdnative.MethodOf("EditorSpinSlider\000", "set_flat\000", 2586408642)
		methodEditorSpinSlider[7] = gdnative.MethodOf("EditorSpinSlider\000", "is_flat\000", 36873697)
		methodEditorSpinSlider[8] = gdnative.MethodOf("EditorSpinSlider\000", "set_hide_slider\000", 2586408642)
		methodEditorSpinSlider[9] = gdnative.MethodOf("EditorSpinSlider\000", "is_hiding_slider\000", 36873697)
		methodEditorVCSInterface[0] = gdnative.MethodOf("EditorVCSInterface\000", "is_addon_ready\000", 2240911060)
		methodEditorVCSInterface[1] = gdnative.MethodOf("EditorVCSInterface\000", "initialize\000", 2323990056)
		methodEditorVCSInterface[2] = gdnative.MethodOf("EditorVCSInterface\000", "is_vcs_initialized\000", 2240911060)
		methodEditorVCSInterface[3] = gdnative.MethodOf("EditorVCSInterface\000", "get_modified_files_data\000", 2382534195)
		methodEditorVCSInterface[4] = gdnative.MethodOf("EditorVCSInterface\000", "stage_file\000", 83702148)
		methodEditorVCSInterface[5] = gdnative.MethodOf("EditorVCSInterface\000", "unstage_file\000", 83702148)
		methodEditorVCSInterface[6] = gdnative.MethodOf("EditorVCSInterface\000", "commit\000", 83702148)
		methodEditorVCSInterface[7] = gdnative.MethodOf("EditorVCSInterface\000", "get_file_diff\000", 1576865988)
		methodEditorVCSInterface[8] = gdnative.MethodOf("EditorVCSInterface\000", "shut_down\000", 2240911060)
		methodEditorVCSInterface[9] = gdnative.MethodOf("EditorVCSInterface\000", "get_project_name\000", 2841200299)
		methodEditorVCSInterface[10] = gdnative.MethodOf("EditorVCSInterface\000", "get_vcs_name\000", 2841200299)
		methodEncodedObjectAsID[0] = gdnative.MethodOf("EncodedObjectAsID\000", "set_object_id\000", 1286410249)
		methodEncodedObjectAsID[1] = gdnative.MethodOf("EncodedObjectAsID\000", "get_object_id\000", 3905245786)
		methodEngine[0] = gdnative.MethodOf("Engine\000", "set_physics_ticks_per_second\000", 1286410249)
		methodEngine[1] = gdnative.MethodOf("Engine\000", "get_physics_ticks_per_second\000", 3905245786)
		methodEngine[2] = gdnative.MethodOf("Engine\000", "set_physics_jitter_fix\000", 373806689)
		methodEngine[3] = gdnative.MethodOf("Engine\000", "get_physics_jitter_fix\000", 1740695150)
		methodEngine[4] = gdnative.MethodOf("Engine\000", "get_physics_interpolation_fraction\000", 1740695150)
		methodEngine[5] = gdnative.MethodOf("Engine\000", "set_target_fps\000", 1286410249)
		methodEngine[6] = gdnative.MethodOf("Engine\000", "get_target_fps\000", 3905245786)
		methodEngine[7] = gdnative.MethodOf("Engine\000", "set_time_scale\000", 373806689)
		methodEngine[8] = gdnative.MethodOf("Engine\000", "get_time_scale\000", 191475506)
		methodEngine[9] = gdnative.MethodOf("Engine\000", "get_frames_drawn\000", 2455072627)
		methodEngine[10] = gdnative.MethodOf("Engine\000", "get_frames_per_second\000", 1740695150)
		methodEngine[11] = gdnative.MethodOf("Engine\000", "get_physics_frames\000", 3905245786)
		methodEngine[12] = gdnative.MethodOf("Engine\000", "get_process_frames\000", 3905245786)
		methodEngine[13] = gdnative.MethodOf("Engine\000", "get_main_loop\000", 1016888095)
		methodEngine[14] = gdnative.MethodOf("Engine\000", "get_version_info\000", 3102165223)
		methodEngine[15] = gdnative.MethodOf("Engine\000", "get_author_info\000", 3102165223)
		methodEngine[16] = gdnative.MethodOf("Engine\000", "get_copyright_info\000", 3995934104)
		methodEngine[17] = gdnative.MethodOf("Engine\000", "get_donor_info\000", 3102165223)
		methodEngine[18] = gdnative.MethodOf("Engine\000", "get_license_info\000", 3102165223)
		methodEngine[19] = gdnative.MethodOf("Engine\000", "get_license_text\000", 201670096)
		methodEngine[20] = gdnative.MethodOf("Engine\000", "get_architecture_name\000", 201670096)
		methodEngine[21] = gdnative.MethodOf("Engine\000", "is_in_physics_frame\000", 36873697)
		methodEngine[22] = gdnative.MethodOf("Engine\000", "has_singleton\000", 2619796661)
		methodEngine[23] = gdnative.MethodOf("Engine\000", "get_singleton\000", 1371597918)
		methodEngine[24] = gdnative.MethodOf("Engine\000", "register_singleton\000", 965313290)
		methodEngine[25] = gdnative.MethodOf("Engine\000", "unregister_singleton\000", 3304788590)
		methodEngine[26] = gdnative.MethodOf("Engine\000", "get_singleton_list\000", 1139954409)
		methodEngine[27] = gdnative.MethodOf("Engine\000", "register_script_language\000", 1327703655)
		methodEngine[28] = gdnative.MethodOf("Engine\000", "get_script_language_count\000", 2455072627)
		methodEngine[29] = gdnative.MethodOf("Engine\000", "get_script_language\000", 2151255799)
		methodEngine[30] = gdnative.MethodOf("Engine\000", "is_editor_hint\000", 36873697)
		methodEngine[31] = gdnative.MethodOf("Engine\000", "get_write_movie_path\000", 201670096)
		methodEngine[32] = gdnative.MethodOf("Engine\000", "set_print_error_messages\000", 2586408642)
		methodEngine[33] = gdnative.MethodOf("Engine\000", "is_printing_error_messages\000", 36873697)
		methodEngineDebugger[0] = gdnative.MethodOf("EngineDebugger\000", "is_active\000", 2240911060)
		methodEngineDebugger[1] = gdnative.MethodOf("EngineDebugger\000", "register_profiler\000", 3651669560)
		methodEngineDebugger[2] = gdnative.MethodOf("EngineDebugger\000", "unregister_profiler\000", 3304788590)
		methodEngineDebugger[3] = gdnative.MethodOf("EngineDebugger\000", "is_profiling\000", 2041966384)
		methodEngineDebugger[4] = gdnative.MethodOf("EngineDebugger\000", "has_profiler\000", 2041966384)
		methodEngineDebugger[5] = gdnative.MethodOf("EngineDebugger\000", "profiler_add_frame_data\000", 1895267858)
		methodEngineDebugger[6] = gdnative.MethodOf("EngineDebugger\000", "profiler_enable\000", 438160728)
		methodEngineDebugger[7] = gdnative.MethodOf("EngineDebugger\000", "register_message_capture\000", 1874754934)
		methodEngineDebugger[8] = gdnative.MethodOf("EngineDebugger\000", "unregister_message_capture\000", 3304788590)
		methodEngineDebugger[9] = gdnative.MethodOf("EngineDebugger\000", "has_capture\000", 2041966384)
		methodEngineDebugger[10] = gdnative.MethodOf("EngineDebugger\000", "send_message\000", 1209351045)
		methodEnvironment[0] = gdnative.MethodOf("Environment\000", "set_background\000", 4071623990)
		methodEnvironment[1] = gdnative.MethodOf("Environment\000", "get_background\000", 1843210413)
		methodEnvironment[2] = gdnative.MethodOf("Environment\000", "set_sky\000", 3336722921)
		methodEnvironment[3] = gdnative.MethodOf("Environment\000", "get_sky\000", 1177136966)
		methodEnvironment[4] = gdnative.MethodOf("Environment\000", "set_sky_custom_fov\000", 373806689)
		methodEnvironment[5] = gdnative.MethodOf("Environment\000", "get_sky_custom_fov\000", 1740695150)
		methodEnvironment[6] = gdnative.MethodOf("Environment\000", "set_sky_rotation\000", 3460891852)
		methodEnvironment[7] = gdnative.MethodOf("Environment\000", "get_sky_rotation\000", 3360562783)
		methodEnvironment[8] = gdnative.MethodOf("Environment\000", "set_bg_color\000", 2920490490)
		methodEnvironment[9] = gdnative.MethodOf("Environment\000", "get_bg_color\000", 3444240500)
		methodEnvironment[10] = gdnative.MethodOf("Environment\000", "set_bg_energy\000", 373806689)
		methodEnvironment[11] = gdnative.MethodOf("Environment\000", "get_bg_energy\000", 1740695150)
		methodEnvironment[12] = gdnative.MethodOf("Environment\000", "set_canvas_max_layer\000", 1286410249)
		methodEnvironment[13] = gdnative.MethodOf("Environment\000", "get_canvas_max_layer\000", 3905245786)
		methodEnvironment[14] = gdnative.MethodOf("Environment\000", "set_camera_feed_id\000", 1286410249)
		methodEnvironment[15] = gdnative.MethodOf("Environment\000", "get_camera_feed_id\000", 3905245786)
		methodEnvironment[16] = gdnative.MethodOf("Environment\000", "set_ambient_light_color\000", 2920490490)
		methodEnvironment[17] = gdnative.MethodOf("Environment\000", "get_ambient_light_color\000", 3444240500)
		methodEnvironment[18] = gdnative.MethodOf("Environment\000", "set_ambient_source\000", 2607780160)
		methodEnvironment[19] = gdnative.MethodOf("Environment\000", "get_ambient_source\000", 67453933)
		methodEnvironment[20] = gdnative.MethodOf("Environment\000", "set_ambient_light_energy\000", 373806689)
		methodEnvironment[21] = gdnative.MethodOf("Environment\000", "get_ambient_light_energy\000", 1740695150)
		methodEnvironment[22] = gdnative.MethodOf("Environment\000", "set_ambient_light_sky_contribution\000", 373806689)
		methodEnvironment[23] = gdnative.MethodOf("Environment\000", "get_ambient_light_sky_contribution\000", 1740695150)
		methodEnvironment[24] = gdnative.MethodOf("Environment\000", "set_reflection_source\000", 299673197)
		methodEnvironment[25] = gdnative.MethodOf("Environment\000", "get_reflection_source\000", 777700713)
		methodEnvironment[26] = gdnative.MethodOf("Environment\000", "set_tonemapper\000", 1509116664)
		methodEnvironment[27] = gdnative.MethodOf("Environment\000", "get_tonemapper\000", 2908408137)
		methodEnvironment[28] = gdnative.MethodOf("Environment\000", "set_tonemap_exposure\000", 373806689)
		methodEnvironment[29] = gdnative.MethodOf("Environment\000", "get_tonemap_exposure\000", 1740695150)
		methodEnvironment[30] = gdnative.MethodOf("Environment\000", "set_tonemap_white\000", 373806689)
		methodEnvironment[31] = gdnative.MethodOf("Environment\000", "get_tonemap_white\000", 1740695150)
		methodEnvironment[32] = gdnative.MethodOf("Environment\000", "set_tonemap_auto_exposure_enabled\000", 2586408642)
		methodEnvironment[33] = gdnative.MethodOf("Environment\000", "is_tonemap_auto_exposure_enabled\000", 36873697)
		methodEnvironment[34] = gdnative.MethodOf("Environment\000", "set_tonemap_auto_exposure_max\000", 373806689)
		methodEnvironment[35] = gdnative.MethodOf("Environment\000", "get_tonemap_auto_exposure_max\000", 1740695150)
		methodEnvironment[36] = gdnative.MethodOf("Environment\000", "set_tonemap_auto_exposure_min\000", 373806689)
		methodEnvironment[37] = gdnative.MethodOf("Environment\000", "get_tonemap_auto_exposure_min\000", 1740695150)
		methodEnvironment[38] = gdnative.MethodOf("Environment\000", "set_tonemap_auto_exposure_speed\000", 373806689)
		methodEnvironment[39] = gdnative.MethodOf("Environment\000", "get_tonemap_auto_exposure_speed\000", 1740695150)
		methodEnvironment[40] = gdnative.MethodOf("Environment\000", "set_tonemap_auto_exposure_grey\000", 373806689)
		methodEnvironment[41] = gdnative.MethodOf("Environment\000", "get_tonemap_auto_exposure_grey\000", 1740695150)
		methodEnvironment[42] = gdnative.MethodOf("Environment\000", "set_ssr_enabled\000", 2586408642)
		methodEnvironment[43] = gdnative.MethodOf("Environment\000", "is_ssr_enabled\000", 36873697)
		methodEnvironment[44] = gdnative.MethodOf("Environment\000", "set_ssr_max_steps\000", 1286410249)
		methodEnvironment[45] = gdnative.MethodOf("Environment\000", "get_ssr_max_steps\000", 3905245786)
		methodEnvironment[46] = gdnative.MethodOf("Environment\000", "set_ssr_fade_in\000", 373806689)
		methodEnvironment[47] = gdnative.MethodOf("Environment\000", "get_ssr_fade_in\000", 1740695150)
		methodEnvironment[48] = gdnative.MethodOf("Environment\000", "set_ssr_fade_out\000", 373806689)
		methodEnvironment[49] = gdnative.MethodOf("Environment\000", "get_ssr_fade_out\000", 1740695150)
		methodEnvironment[50] = gdnative.MethodOf("Environment\000", "set_ssr_depth_tolerance\000", 373806689)
		methodEnvironment[51] = gdnative.MethodOf("Environment\000", "get_ssr_depth_tolerance\000", 1740695150)
		methodEnvironment[52] = gdnative.MethodOf("Environment\000", "set_ssao_enabled\000", 2586408642)
		methodEnvironment[53] = gdnative.MethodOf("Environment\000", "is_ssao_enabled\000", 36873697)
		methodEnvironment[54] = gdnative.MethodOf("Environment\000", "set_ssao_radius\000", 373806689)
		methodEnvironment[55] = gdnative.MethodOf("Environment\000", "get_ssao_radius\000", 1740695150)
		methodEnvironment[56] = gdnative.MethodOf("Environment\000", "set_ssao_intensity\000", 373806689)
		methodEnvironment[57] = gdnative.MethodOf("Environment\000", "get_ssao_intensity\000", 1740695150)
		methodEnvironment[58] = gdnative.MethodOf("Environment\000", "set_ssao_power\000", 373806689)
		methodEnvironment[59] = gdnative.MethodOf("Environment\000", "get_ssao_power\000", 1740695150)
		methodEnvironment[60] = gdnative.MethodOf("Environment\000", "set_ssao_detail\000", 373806689)
		methodEnvironment[61] = gdnative.MethodOf("Environment\000", "get_ssao_detail\000", 1740695150)
		methodEnvironment[62] = gdnative.MethodOf("Environment\000", "set_ssao_horizon\000", 373806689)
		methodEnvironment[63] = gdnative.MethodOf("Environment\000", "get_ssao_horizon\000", 1740695150)
		methodEnvironment[64] = gdnative.MethodOf("Environment\000", "set_ssao_sharpness\000", 373806689)
		methodEnvironment[65] = gdnative.MethodOf("Environment\000", "get_ssao_sharpness\000", 1740695150)
		methodEnvironment[66] = gdnative.MethodOf("Environment\000", "set_ssao_direct_light_affect\000", 373806689)
		methodEnvironment[67] = gdnative.MethodOf("Environment\000", "get_ssao_direct_light_affect\000", 1740695150)
		methodEnvironment[68] = gdnative.MethodOf("Environment\000", "set_ssao_ao_channel_affect\000", 373806689)
		methodEnvironment[69] = gdnative.MethodOf("Environment\000", "get_ssao_ao_channel_affect\000", 1740695150)
		methodEnvironment[70] = gdnative.MethodOf("Environment\000", "set_ssil_enabled\000", 2586408642)
		methodEnvironment[71] = gdnative.MethodOf("Environment\000", "is_ssil_enabled\000", 36873697)
		methodEnvironment[72] = gdnative.MethodOf("Environment\000", "set_ssil_radius\000", 373806689)
		methodEnvironment[73] = gdnative.MethodOf("Environment\000", "get_ssil_radius\000", 1740695150)
		methodEnvironment[74] = gdnative.MethodOf("Environment\000", "set_ssil_intensity\000", 373806689)
		methodEnvironment[75] = gdnative.MethodOf("Environment\000", "get_ssil_intensity\000", 1740695150)
		methodEnvironment[76] = gdnative.MethodOf("Environment\000", "set_ssil_sharpness\000", 373806689)
		methodEnvironment[77] = gdnative.MethodOf("Environment\000", "get_ssil_sharpness\000", 1740695150)
		methodEnvironment[78] = gdnative.MethodOf("Environment\000", "set_ssil_normal_rejection\000", 373806689)
		methodEnvironment[79] = gdnative.MethodOf("Environment\000", "get_ssil_normal_rejection\000", 1740695150)
		methodEnvironment[80] = gdnative.MethodOf("Environment\000", "set_sdfgi_enabled\000", 2586408642)
		methodEnvironment[81] = gdnative.MethodOf("Environment\000", "is_sdfgi_enabled\000", 36873697)
		methodEnvironment[82] = gdnative.MethodOf("Environment\000", "set_sdfgi_cascades\000", 1286410249)
		methodEnvironment[83] = gdnative.MethodOf("Environment\000", "get_sdfgi_cascades\000", 3905245786)
		methodEnvironment[84] = gdnative.MethodOf("Environment\000", "set_sdfgi_min_cell_size\000", 373806689)
		methodEnvironment[85] = gdnative.MethodOf("Environment\000", "get_sdfgi_min_cell_size\000", 1740695150)
		methodEnvironment[86] = gdnative.MethodOf("Environment\000", "set_sdfgi_max_distance\000", 373806689)
		methodEnvironment[87] = gdnative.MethodOf("Environment\000", "get_sdfgi_max_distance\000", 1740695150)
		methodEnvironment[88] = gdnative.MethodOf("Environment\000", "set_sdfgi_cascade0_distance\000", 373806689)
		methodEnvironment[89] = gdnative.MethodOf("Environment\000", "get_sdfgi_cascade0_distance\000", 1740695150)
		methodEnvironment[90] = gdnative.MethodOf("Environment\000", "set_sdfgi_y_scale\000", 3608608372)
		methodEnvironment[91] = gdnative.MethodOf("Environment\000", "get_sdfgi_y_scale\000", 2568002245)
		methodEnvironment[92] = gdnative.MethodOf("Environment\000", "set_sdfgi_use_occlusion\000", 2586408642)
		methodEnvironment[93] = gdnative.MethodOf("Environment\000", "is_sdfgi_using_occlusion\000", 36873697)
		methodEnvironment[94] = gdnative.MethodOf("Environment\000", "set_sdfgi_bounce_feedback\000", 373806689)
		methodEnvironment[95] = gdnative.MethodOf("Environment\000", "get_sdfgi_bounce_feedback\000", 1740695150)
		methodEnvironment[96] = gdnative.MethodOf("Environment\000", "set_sdfgi_read_sky_light\000", 2586408642)
		methodEnvironment[97] = gdnative.MethodOf("Environment\000", "is_sdfgi_reading_sky_light\000", 36873697)
		methodEnvironment[98] = gdnative.MethodOf("Environment\000", "set_sdfgi_energy\000", 373806689)
		methodEnvironment[99] = gdnative.MethodOf("Environment\000", "get_sdfgi_energy\000", 1740695150)
		methodEnvironment[100] = gdnative.MethodOf("Environment\000", "set_sdfgi_normal_bias\000", 373806689)
		methodEnvironment[101] = gdnative.MethodOf("Environment\000", "get_sdfgi_normal_bias\000", 1740695150)
		methodEnvironment[102] = gdnative.MethodOf("Environment\000", "set_sdfgi_probe_bias\000", 373806689)
		methodEnvironment[103] = gdnative.MethodOf("Environment\000", "get_sdfgi_probe_bias\000", 1740695150)
		methodEnvironment[104] = gdnative.MethodOf("Environment\000", "set_glow_enabled\000", 2586408642)
		methodEnvironment[105] = gdnative.MethodOf("Environment\000", "is_glow_enabled\000", 36873697)
		methodEnvironment[106] = gdnative.MethodOf("Environment\000", "set_glow_level\000", 1602489585)
		methodEnvironment[107] = gdnative.MethodOf("Environment\000", "get_glow_level\000", 2339986948)
		methodEnvironment[108] = gdnative.MethodOf("Environment\000", "set_glow_normalized\000", 2586408642)
		methodEnvironment[109] = gdnative.MethodOf("Environment\000", "is_glow_normalized\000", 36873697)
		methodEnvironment[110] = gdnative.MethodOf("Environment\000", "set_glow_intensity\000", 373806689)
		methodEnvironment[111] = gdnative.MethodOf("Environment\000", "get_glow_intensity\000", 1740695150)
		methodEnvironment[112] = gdnative.MethodOf("Environment\000", "set_glow_strength\000", 373806689)
		methodEnvironment[113] = gdnative.MethodOf("Environment\000", "get_glow_strength\000", 1740695150)
		methodEnvironment[114] = gdnative.MethodOf("Environment\000", "set_glow_mix\000", 373806689)
		methodEnvironment[115] = gdnative.MethodOf("Environment\000", "get_glow_mix\000", 1740695150)
		methodEnvironment[116] = gdnative.MethodOf("Environment\000", "set_glow_bloom\000", 373806689)
		methodEnvironment[117] = gdnative.MethodOf("Environment\000", "get_glow_bloom\000", 1740695150)
		methodEnvironment[118] = gdnative.MethodOf("Environment\000", "set_glow_blend_mode\000", 2561587761)
		methodEnvironment[119] = gdnative.MethodOf("Environment\000", "get_glow_blend_mode\000", 1529667332)
		methodEnvironment[120] = gdnative.MethodOf("Environment\000", "set_glow_hdr_bleed_threshold\000", 373806689)
		methodEnvironment[121] = gdnative.MethodOf("Environment\000", "get_glow_hdr_bleed_threshold\000", 1740695150)
		methodEnvironment[122] = gdnative.MethodOf("Environment\000", "set_glow_hdr_bleed_scale\000", 373806689)
		methodEnvironment[123] = gdnative.MethodOf("Environment\000", "get_glow_hdr_bleed_scale\000", 1740695150)
		methodEnvironment[124] = gdnative.MethodOf("Environment\000", "set_glow_hdr_luminance_cap\000", 373806689)
		methodEnvironment[125] = gdnative.MethodOf("Environment\000", "get_glow_hdr_luminance_cap\000", 1740695150)
		methodEnvironment[126] = gdnative.MethodOf("Environment\000", "set_glow_map_strength\000", 373806689)
		methodEnvironment[127] = gdnative.MethodOf("Environment\000", "get_glow_map_strength\000", 1740695150)
		methodEnvironment[128] = gdnative.MethodOf("Environment\000", "set_glow_map\000", 1790811099)
		methodEnvironment[129] = gdnative.MethodOf("Environment\000", "get_glow_map\000", 4037048985)
		methodEnvironment[130] = gdnative.MethodOf("Environment\000", "set_fog_enabled\000", 2586408642)
		methodEnvironment[131] = gdnative.MethodOf("Environment\000", "is_fog_enabled\000", 36873697)
		methodEnvironment[132] = gdnative.MethodOf("Environment\000", "set_fog_light_color\000", 2920490490)
		methodEnvironment[133] = gdnative.MethodOf("Environment\000", "get_fog_light_color\000", 3444240500)
		methodEnvironment[134] = gdnative.MethodOf("Environment\000", "set_fog_light_energy\000", 373806689)
		methodEnvironment[135] = gdnative.MethodOf("Environment\000", "get_fog_light_energy\000", 1740695150)
		methodEnvironment[136] = gdnative.MethodOf("Environment\000", "set_fog_sun_scatter\000", 373806689)
		methodEnvironment[137] = gdnative.MethodOf("Environment\000", "get_fog_sun_scatter\000", 1740695150)
		methodEnvironment[138] = gdnative.MethodOf("Environment\000", "set_fog_density\000", 373806689)
		methodEnvironment[139] = gdnative.MethodOf("Environment\000", "get_fog_density\000", 1740695150)
		methodEnvironment[140] = gdnative.MethodOf("Environment\000", "set_fog_height\000", 373806689)
		methodEnvironment[141] = gdnative.MethodOf("Environment\000", "get_fog_height\000", 1740695150)
		methodEnvironment[142] = gdnative.MethodOf("Environment\000", "set_fog_height_density\000", 373806689)
		methodEnvironment[143] = gdnative.MethodOf("Environment\000", "get_fog_height_density\000", 1740695150)
		methodEnvironment[144] = gdnative.MethodOf("Environment\000", "set_fog_aerial_perspective\000", 373806689)
		methodEnvironment[145] = gdnative.MethodOf("Environment\000", "get_fog_aerial_perspective\000", 1740695150)
		methodEnvironment[146] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_enabled\000", 2586408642)
		methodEnvironment[147] = gdnative.MethodOf("Environment\000", "is_volumetric_fog_enabled\000", 36873697)
		methodEnvironment[148] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_emission\000", 2920490490)
		methodEnvironment[149] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_emission\000", 3444240500)
		methodEnvironment[150] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_albedo\000", 2920490490)
		methodEnvironment[151] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_albedo\000", 3444240500)
		methodEnvironment[152] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_density\000", 373806689)
		methodEnvironment[153] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_density\000", 1740695150)
		methodEnvironment[154] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_emission_energy\000", 373806689)
		methodEnvironment[155] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_emission_energy\000", 1740695150)
		methodEnvironment[156] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_anisotropy\000", 373806689)
		methodEnvironment[157] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_anisotropy\000", 1740695150)
		methodEnvironment[158] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_length\000", 373806689)
		methodEnvironment[159] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_length\000", 1740695150)
		methodEnvironment[160] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_detail_spread\000", 373806689)
		methodEnvironment[161] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_detail_spread\000", 1740695150)
		methodEnvironment[162] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_gi_inject\000", 373806689)
		methodEnvironment[163] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_gi_inject\000", 1740695150)
		methodEnvironment[164] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_ambient_inject\000", 373806689)
		methodEnvironment[165] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_ambient_inject\000", 1740695150)
		methodEnvironment[166] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_temporal_reprojection_enabled\000", 2586408642)
		methodEnvironment[167] = gdnative.MethodOf("Environment\000", "is_volumetric_fog_temporal_reprojection_enabled\000", 36873697)
		methodEnvironment[168] = gdnative.MethodOf("Environment\000", "set_volumetric_fog_temporal_reprojection_amount\000", 373806689)
		methodEnvironment[169] = gdnative.MethodOf("Environment\000", "get_volumetric_fog_temporal_reprojection_amount\000", 1740695150)
		methodEnvironment[170] = gdnative.MethodOf("Environment\000", "set_adjustment_enabled\000", 2586408642)
		methodEnvironment[171] = gdnative.MethodOf("Environment\000", "is_adjustment_enabled\000", 36873697)
		methodEnvironment[172] = gdnative.MethodOf("Environment\000", "set_adjustment_brightness\000", 373806689)
		methodEnvironment[173] = gdnative.MethodOf("Environment\000", "get_adjustment_brightness\000", 1740695150)
		methodEnvironment[174] = gdnative.MethodOf("Environment\000", "set_adjustment_contrast\000", 373806689)
		methodEnvironment[175] = gdnative.MethodOf("Environment\000", "get_adjustment_contrast\000", 1740695150)
		methodEnvironment[176] = gdnative.MethodOf("Environment\000", "set_adjustment_saturation\000", 373806689)
		methodEnvironment[177] = gdnative.MethodOf("Environment\000", "get_adjustment_saturation\000", 1740695150)
		methodEnvironment[178] = gdnative.MethodOf("Environment\000", "set_adjustment_color_correction\000", 1790811099)
		methodEnvironment[179] = gdnative.MethodOf("Environment\000", "get_adjustment_color_correction\000", 4037048985)
		methodExpression[0] = gdnative.MethodOf("Expression\000", "parse\000", 3658149758)
		methodExpression[1] = gdnative.MethodOf("Expression\000", "execute\000", 3712471238)
		methodExpression[2] = gdnative.MethodOf("Expression\000", "has_execute_failed\000", 36873697)
		methodExpression[3] = gdnative.MethodOf("Expression\000", "get_error_text\000", 201670096)
		methodFastNoiseLite[0] = gdnative.MethodOf("FastNoiseLite\000", "set_noise_type\000", 2624461392)
		methodFastNoiseLite[1] = gdnative.MethodOf("FastNoiseLite\000", "get_noise_type\000", 1458108610)
		methodFastNoiseLite[2] = gdnative.MethodOf("FastNoiseLite\000", "set_seed\000", 1286410249)
		methodFastNoiseLite[3] = gdnative.MethodOf("FastNoiseLite\000", "get_seed\000", 3905245786)
		methodFastNoiseLite[4] = gdnative.MethodOf("FastNoiseLite\000", "set_frequency\000", 373806689)
		methodFastNoiseLite[5] = gdnative.MethodOf("FastNoiseLite\000", "get_frequency\000", 1740695150)
		methodFastNoiseLite[6] = gdnative.MethodOf("FastNoiseLite\000", "set_offset\000", 3460891852)
		methodFastNoiseLite[7] = gdnative.MethodOf("FastNoiseLite\000", "get_offset\000", 3360562783)
		methodFastNoiseLite[8] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_type\000", 4132731174)
		methodFastNoiseLite[9] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_type\000", 1036889279)
		methodFastNoiseLite[10] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_octaves\000", 1286410249)
		methodFastNoiseLite[11] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_octaves\000", 3905245786)
		methodFastNoiseLite[12] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_lacunarity\000", 373806689)
		methodFastNoiseLite[13] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_lacunarity\000", 1740695150)
		methodFastNoiseLite[14] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_gain\000", 373806689)
		methodFastNoiseLite[15] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_gain\000", 1740695150)
		methodFastNoiseLite[16] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_weighted_strength\000", 373806689)
		methodFastNoiseLite[17] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_weighted_strength\000", 1740695150)
		methodFastNoiseLite[18] = gdnative.MethodOf("FastNoiseLite\000", "set_fractal_ping_pong_strength\000", 373806689)
		methodFastNoiseLite[19] = gdnative.MethodOf("FastNoiseLite\000", "get_fractal_ping_pong_strength\000", 1740695150)
		methodFastNoiseLite[20] = gdnative.MethodOf("FastNoiseLite\000", "set_cellular_distance_function\000", 1006013267)
		methodFastNoiseLite[21] = gdnative.MethodOf("FastNoiseLite\000", "get_cellular_distance_function\000", 2021274088)
		methodFastNoiseLite[22] = gdnative.MethodOf("FastNoiseLite\000", "set_cellular_jitter\000", 373806689)
		methodFastNoiseLite[23] = gdnative.MethodOf("FastNoiseLite\000", "get_cellular_jitter\000", 1740695150)
		methodFastNoiseLite[24] = gdnative.MethodOf("FastNoiseLite\000", "set_cellular_return_type\000", 2654169698)
		methodFastNoiseLite[25] = gdnative.MethodOf("FastNoiseLite\000", "get_cellular_return_type\000", 3699796343)
		methodFastNoiseLite[26] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_enabled\000", 2586408642)
		methodFastNoiseLite[27] = gdnative.MethodOf("FastNoiseLite\000", "is_domain_warp_enabled\000", 36873697)
		methodFastNoiseLite[28] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_type\000", 3629692980)
		methodFastNoiseLite[29] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_type\000", 2980162020)
		methodFastNoiseLite[30] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_amplitude\000", 373806689)
		methodFastNoiseLite[31] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_amplitude\000", 1740695150)
		methodFastNoiseLite[32] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_frequency\000", 373806689)
		methodFastNoiseLite[33] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_frequency\000", 1740695150)
		methodFastNoiseLite[34] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_fractal_type\000", 3999408287)
		methodFastNoiseLite[35] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_fractal_type\000", 407716934)
		methodFastNoiseLite[36] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_fractal_octaves\000", 1286410249)
		methodFastNoiseLite[37] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_fractal_octaves\000", 3905245786)
		methodFastNoiseLite[38] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_fractal_lacunarity\000", 373806689)
		methodFastNoiseLite[39] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_fractal_lacunarity\000", 1740695150)
		methodFastNoiseLite[40] = gdnative.MethodOf("FastNoiseLite\000", "set_domain_warp_fractal_gain\000", 373806689)
		methodFastNoiseLite[41] = gdnative.MethodOf("FastNoiseLite\000", "get_domain_warp_fractal_gain\000", 1740695150)
		methodFile[0] = gdnative.MethodOf("File\000", "open_encrypted\000", 1337424764)
		methodFile[1] = gdnative.MethodOf("File\000", "open_encrypted_with_pass\000", 1053231221)
		methodFile[2] = gdnative.MethodOf("File\000", "open_compressed\000", 2636971738)
		methodFile[3] = gdnative.MethodOf("File\000", "open\000", 985763342)
		methodFile[4] = gdnative.MethodOf("File\000", "flush\000", 3218959716)
		methodFile[5] = gdnative.MethodOf("File\000", "close\000", 3218959716)
		methodFile[6] = gdnative.MethodOf("File\000", "get_path\000", 201670096)
		methodFile[7] = gdnative.MethodOf("File\000", "get_path_absolute\000", 201670096)
		methodFile[8] = gdnative.MethodOf("File\000", "is_open\000", 36873697)
		methodFile[9] = gdnative.MethodOf("File\000", "seek\000", 1286410249)
		methodFile[10] = gdnative.MethodOf("File\000", "seek_end\000", 1995695955)
		methodFile[11] = gdnative.MethodOf("File\000", "get_position\000", 3905245786)
		methodFile[12] = gdnative.MethodOf("File\000", "get_length\000", 3905245786)
		methodFile[13] = gdnative.MethodOf("File\000", "eof_reached\000", 36873697)
		methodFile[14] = gdnative.MethodOf("File\000", "get_8\000", 3905245786)
		methodFile[15] = gdnative.MethodOf("File\000", "get_16\000", 3905245786)
		methodFile[16] = gdnative.MethodOf("File\000", "get_32\000", 3905245786)
		methodFile[17] = gdnative.MethodOf("File\000", "get_64\000", 3905245786)
		methodFile[18] = gdnative.MethodOf("File\000", "get_float\000", 1740695150)
		methodFile[19] = gdnative.MethodOf("File\000", "get_double\000", 1740695150)
		methodFile[20] = gdnative.MethodOf("File\000", "get_real\000", 1740695150)
		methodFile[21] = gdnative.MethodOf("File\000", "get_buffer\000", 4131300905)
		methodFile[22] = gdnative.MethodOf("File\000", "get_line\000", 201670096)
		methodFile[23] = gdnative.MethodOf("File\000", "get_csv_line\000", 2358116058)
		methodFile[24] = gdnative.MethodOf("File\000", "get_as_text\000", 1162154673)
		methodFile[25] = gdnative.MethodOf("File\000", "get_md5\000", 3135753539)
		methodFile[26] = gdnative.MethodOf("File\000", "get_sha256\000", 3135753539)
		methodFile[27] = gdnative.MethodOf("File\000", "is_big_endian\000", 2240911060)
		methodFile[28] = gdnative.MethodOf("File\000", "set_big_endian\000", 2586408642)
		methodFile[29] = gdnative.MethodOf("File\000", "get_error\000", 3185525595)
		methodFile[30] = gdnative.MethodOf("File\000", "get_var\000", 189129690)
		methodFile[31] = gdnative.MethodOf("File\000", "store_8\000", 1286410249)
		methodFile[32] = gdnative.MethodOf("File\000", "store_16\000", 1286410249)
		methodFile[33] = gdnative.MethodOf("File\000", "store_32\000", 1286410249)
		methodFile[34] = gdnative.MethodOf("File\000", "store_64\000", 1286410249)
		methodFile[35] = gdnative.MethodOf("File\000", "store_float\000", 373806689)
		methodFile[36] = gdnative.MethodOf("File\000", "store_double\000", 373806689)
		methodFile[37] = gdnative.MethodOf("File\000", "store_real\000", 373806689)
		methodFile[38] = gdnative.MethodOf("File\000", "store_buffer\000", 2971499966)
		methodFile[39] = gdnative.MethodOf("File\000", "store_line\000", 83702148)
		methodFile[40] = gdnative.MethodOf("File\000", "store_csv_line\000", 2217842308)
		methodFile[41] = gdnative.MethodOf("File\000", "store_string\000", 83702148)
		methodFile[42] = gdnative.MethodOf("File\000", "store_var\000", 738511890)
		methodFile[43] = gdnative.MethodOf("File\000", "store_pascal_string\000", 83702148)
		methodFile[44] = gdnative.MethodOf("File\000", "get_pascal_string\000", 2841200299)
		methodFile[45] = gdnative.MethodOf("File\000", "file_exists\000", 2323990056)
		methodFile[46] = gdnative.MethodOf("File\000", "get_modified_time\000", 1321353865)
		methodFileDialog[0] = gdnative.MethodOf("FileDialog\000", "clear_filters\000", 3218959716)
		methodFileDialog[1] = gdnative.MethodOf("FileDialog\000", "add_filter\000", 233059325)
		methodFileDialog[2] = gdnative.MethodOf("FileDialog\000", "set_filters\000", 4015028928)
		methodFileDialog[3] = gdnative.MethodOf("FileDialog\000", "get_filters\000", 1139954409)
		methodFileDialog[4] = gdnative.MethodOf("FileDialog\000", "get_current_dir\000", 201670096)
		methodFileDialog[5] = gdnative.MethodOf("FileDialog\000", "get_current_file\000", 201670096)
		methodFileDialog[6] = gdnative.MethodOf("FileDialog\000", "get_current_path\000", 201670096)
		methodFileDialog[7] = gdnative.MethodOf("FileDialog\000", "set_current_dir\000", 83702148)
		methodFileDialog[8] = gdnative.MethodOf("FileDialog\000", "set_current_file\000", 83702148)
		methodFileDialog[9] = gdnative.MethodOf("FileDialog\000", "set_current_path\000", 83702148)
		methodFileDialog[10] = gdnative.MethodOf("FileDialog\000", "set_mode_overrides_title\000", 2586408642)
		methodFileDialog[11] = gdnative.MethodOf("FileDialog\000", "is_mode_overriding_title\000", 36873697)
		methodFileDialog[12] = gdnative.MethodOf("FileDialog\000", "set_file_mode\000", 3654936397)
		methodFileDialog[13] = gdnative.MethodOf("FileDialog\000", "get_file_mode\000", 4074825319)
		methodFileDialog[14] = gdnative.MethodOf("FileDialog\000", "get_vbox\000", 915758477)
		methodFileDialog[15] = gdnative.MethodOf("FileDialog\000", "get_line_edit\000", 4071694264)
		methodFileDialog[16] = gdnative.MethodOf("FileDialog\000", "set_access\000", 4104413466)
		methodFileDialog[17] = gdnative.MethodOf("FileDialog\000", "get_access\000", 3344081076)
		methodFileDialog[18] = gdnative.MethodOf("FileDialog\000", "set_root_subfolder\000", 83702148)
		methodFileDialog[19] = gdnative.MethodOf("FileDialog\000", "get_root_subfolder\000", 201670096)
		methodFileDialog[20] = gdnative.MethodOf("FileDialog\000", "set_show_hidden_files\000", 2586408642)
		methodFileDialog[21] = gdnative.MethodOf("FileDialog\000", "is_showing_hidden_files\000", 36873697)
		methodFileDialog[22] = gdnative.MethodOf("FileDialog\000", "deselect_all\000", 3218959716)
		methodFileDialog[23] = gdnative.MethodOf("FileDialog\000", "invalidate\000", 3218959716)
		methodFileSystemDock[0] = gdnative.MethodOf("FileSystemDock\000", "navigate_to_path\000", 83702148)
		methodFlowContainer[0] = gdnative.MethodOf("FlowContainer\000", "get_line_count\000", 3905245786)
		methodFogMaterial[0] = gdnative.MethodOf("FogMaterial\000", "set_density\000", 373806689)
		methodFogMaterial[1] = gdnative.MethodOf("FogMaterial\000", "get_density\000", 1740695150)
		methodFogMaterial[2] = gdnative.MethodOf("FogMaterial\000", "set_albedo\000", 2920490490)
		methodFogMaterial[3] = gdnative.MethodOf("FogMaterial\000", "get_albedo\000", 3444240500)
		methodFogMaterial[4] = gdnative.MethodOf("FogMaterial\000", "set_emission\000", 2920490490)
		methodFogMaterial[5] = gdnative.MethodOf("FogMaterial\000", "get_emission\000", 3444240500)
		methodFogMaterial[6] = gdnative.MethodOf("FogMaterial\000", "set_height_falloff\000", 373806689)
		methodFogMaterial[7] = gdnative.MethodOf("FogMaterial\000", "get_height_falloff\000", 1740695150)
		methodFogMaterial[8] = gdnative.MethodOf("FogMaterial\000", "set_edge_fade\000", 373806689)
		methodFogMaterial[9] = gdnative.MethodOf("FogMaterial\000", "get_edge_fade\000", 1740695150)
		methodFogMaterial[10] = gdnative.MethodOf("FogMaterial\000", "set_density_texture\000", 1188404210)
		methodFogMaterial[11] = gdnative.MethodOf("FogMaterial\000", "get_density_texture\000", 373985333)
		methodFogVolume[0] = gdnative.MethodOf("FogVolume\000", "set_extents\000", 3460891852)
		methodFogVolume[1] = gdnative.MethodOf("FogVolume\000", "get_extents\000", 3360562783)
		methodFogVolume[2] = gdnative.MethodOf("FogVolume\000", "set_shape\000", 1416323362)
		methodFogVolume[3] = gdnative.MethodOf("FogVolume\000", "get_shape\000", 3920334604)
		methodFogVolume[4] = gdnative.MethodOf("FogVolume\000", "set_material\000", 2757459619)
		methodFogVolume[5] = gdnative.MethodOf("FogVolume\000", "get_material\000", 5934680)
		methodFont[0] = gdnative.MethodOf("Font\000", "set_fallbacks\000", 381264803)
		methodFont[1] = gdnative.MethodOf("Font\000", "get_fallbacks\000", 3995934104)
		methodFont[2] = gdnative.MethodOf("Font\000", "find_variation\000", 3705324482)
		methodFont[3] = gdnative.MethodOf("Font\000", "get_rids\000", 3995934104)
		methodFont[4] = gdnative.MethodOf("Font\000", "get_height\000", 378113874)
		methodFont[5] = gdnative.MethodOf("Font\000", "get_ascent\000", 378113874)
		methodFont[6] = gdnative.MethodOf("Font\000", "get_descent\000", 378113874)
		methodFont[7] = gdnative.MethodOf("Font\000", "get_underline_position\000", 378113874)
		methodFont[8] = gdnative.MethodOf("Font\000", "get_underline_thickness\000", 378113874)
		methodFont[9] = gdnative.MethodOf("Font\000", "get_font_name\000", 201670096)
		methodFont[10] = gdnative.MethodOf("Font\000", "get_font_style_name\000", 201670096)
		methodFont[11] = gdnative.MethodOf("Font\000", "get_font_style\000", 2520224254)
		methodFont[12] = gdnative.MethodOf("Font\000", "get_spacing\000", 1310880908)
		methodFont[13] = gdnative.MethodOf("Font\000", "get_opentype_features\000", 3102165223)
		methodFont[14] = gdnative.MethodOf("Font\000", "set_cache_capacity\000", 3937882851)
		methodFont[15] = gdnative.MethodOf("Font\000", "get_string_size\000", 3678918099)
		methodFont[16] = gdnative.MethodOf("Font\000", "get_multiline_string_size\000", 2427690650)
		methodFont[17] = gdnative.MethodOf("Font\000", "draw_string\000", 2565402639)
		methodFont[18] = gdnative.MethodOf("Font\000", "draw_multiline_string\000", 348869189)
		methodFont[19] = gdnative.MethodOf("Font\000", "draw_string_outline\000", 657875837)
		methodFont[20] = gdnative.MethodOf("Font\000", "draw_multiline_string_outline\000", 1649790182)
		methodFont[21] = gdnative.MethodOf("Font\000", "get_char_size\000", 3016396712)
		methodFont[22] = gdnative.MethodOf("Font\000", "draw_char\000", 1462476057)
		methodFont[23] = gdnative.MethodOf("Font\000", "draw_char_outline\000", 4161008124)
		methodFont[24] = gdnative.MethodOf("Font\000", "has_char\000", 1116898809)
		methodFont[25] = gdnative.MethodOf("Font\000", "get_supported_chars\000", 201670096)
		methodFont[26] = gdnative.MethodOf("Font\000", "is_language_supported\000", 3927539163)
		methodFont[27] = gdnative.MethodOf("Font\000", "is_script_supported\000", 3927539163)
		methodFont[28] = gdnative.MethodOf("Font\000", "get_supported_feature_list\000", 3102165223)
		methodFont[29] = gdnative.MethodOf("Font\000", "get_supported_variation_list\000", 3102165223)
		methodFont[30] = gdnative.MethodOf("Font\000", "get_face_count\000", 3905245786)
		methodFontFile[0] = gdnative.MethodOf("FontFile\000", "load_bitmap_font\000", 166001499)
		methodFontFile[1] = gdnative.MethodOf("FontFile\000", "load_dynamic_font\000", 166001499)
		methodFontFile[2] = gdnative.MethodOf("FontFile\000", "set_data\000", 2971499966)
		methodFontFile[3] = gdnative.MethodOf("FontFile\000", "get_data\000", 2362200018)
		methodFontFile[4] = gdnative.MethodOf("FontFile\000", "set_font_name\000", 83702148)
		methodFontFile[5] = gdnative.MethodOf("FontFile\000", "set_font_style_name\000", 83702148)
		methodFontFile[6] = gdnative.MethodOf("FontFile\000", "set_font_style\000", 918070724)
		methodFontFile[7] = gdnative.MethodOf("FontFile\000", "set_antialiased\000", 2586408642)
		methodFontFile[8] = gdnative.MethodOf("FontFile\000", "is_antialiased\000", 36873697)
		methodFontFile[9] = gdnative.MethodOf("FontFile\000", "set_generate_mipmaps\000", 2586408642)
		methodFontFile[10] = gdnative.MethodOf("FontFile\000", "get_generate_mipmaps\000", 36873697)
		methodFontFile[11] = gdnative.MethodOf("FontFile\000", "set_multichannel_signed_distance_field\000", 2586408642)
		methodFontFile[12] = gdnative.MethodOf("FontFile\000", "is_multichannel_signed_distance_field\000", 36873697)
		methodFontFile[13] = gdnative.MethodOf("FontFile\000", "set_msdf_pixel_range\000", 1286410249)
		methodFontFile[14] = gdnative.MethodOf("FontFile\000", "get_msdf_pixel_range\000", 3905245786)
		methodFontFile[15] = gdnative.MethodOf("FontFile\000", "set_msdf_size\000", 1286410249)
		methodFontFile[16] = gdnative.MethodOf("FontFile\000", "get_msdf_size\000", 3905245786)
		methodFontFile[17] = gdnative.MethodOf("FontFile\000", "set_fixed_size\000", 1286410249)
		methodFontFile[18] = gdnative.MethodOf("FontFile\000", "get_fixed_size\000", 3905245786)
		methodFontFile[19] = gdnative.MethodOf("FontFile\000", "set_force_autohinter\000", 2586408642)
		methodFontFile[20] = gdnative.MethodOf("FontFile\000", "is_force_autohinter\000", 36873697)
		methodFontFile[21] = gdnative.MethodOf("FontFile\000", "set_hinting\000", 1827459492)
		methodFontFile[22] = gdnative.MethodOf("FontFile\000", "get_hinting\000", 3683214614)
		methodFontFile[23] = gdnative.MethodOf("FontFile\000", "set_subpixel_positioning\000", 4225742182)
		methodFontFile[24] = gdnative.MethodOf("FontFile\000", "get_subpixel_positioning\000", 1069238588)
		methodFontFile[25] = gdnative.MethodOf("FontFile\000", "set_oversampling\000", 373806689)
		methodFontFile[26] = gdnative.MethodOf("FontFile\000", "get_oversampling\000", 1740695150)
		methodFontFile[27] = gdnative.MethodOf("FontFile\000", "get_cache_count\000", 3905245786)
		methodFontFile[28] = gdnative.MethodOf("FontFile\000", "clear_cache\000", 3218959716)
		methodFontFile[29] = gdnative.MethodOf("FontFile\000", "remove_cache\000", 1286410249)
		methodFontFile[30] = gdnative.MethodOf("FontFile\000", "get_size_cache_list\000", 663333327)
		methodFontFile[31] = gdnative.MethodOf("FontFile\000", "clear_size_cache\000", 1286410249)
		methodFontFile[32] = gdnative.MethodOf("FontFile\000", "remove_size_cache\000", 2311374912)
		methodFontFile[33] = gdnative.MethodOf("FontFile\000", "set_variation_coordinates\000", 64545446)
		methodFontFile[34] = gdnative.MethodOf("FontFile\000", "get_variation_coordinates\000", 3485342025)
		methodFontFile[35] = gdnative.MethodOf("FontFile\000", "set_embolden\000", 1602489585)
		methodFontFile[36] = gdnative.MethodOf("FontFile\000", "get_embolden\000", 2339986948)
		methodFontFile[37] = gdnative.MethodOf("FontFile\000", "set_transform\000", 30160968)
		methodFontFile[38] = gdnative.MethodOf("FontFile\000", "get_transform\000", 3836996910)
		methodFontFile[39] = gdnative.MethodOf("FontFile\000", "set_face_index\000", 3937882851)
		methodFontFile[40] = gdnative.MethodOf("FontFile\000", "get_face_index\000", 923996154)
		methodFontFile[41] = gdnative.MethodOf("FontFile\000", "set_cache_ascent\000", 3506521499)
		methodFontFile[42] = gdnative.MethodOf("FontFile\000", "get_cache_ascent\000", 3085491603)
		methodFontFile[43] = gdnative.MethodOf("FontFile\000", "set_cache_descent\000", 3506521499)
		methodFontFile[44] = gdnative.MethodOf("FontFile\000", "get_cache_descent\000", 3085491603)
		methodFontFile[45] = gdnative.MethodOf("FontFile\000", "set_cache_underline_position\000", 3506521499)
		methodFontFile[46] = gdnative.MethodOf("FontFile\000", "get_cache_underline_position\000", 3085491603)
		methodFontFile[47] = gdnative.MethodOf("FontFile\000", "set_cache_underline_thickness\000", 3506521499)
		methodFontFile[48] = gdnative.MethodOf("FontFile\000", "get_cache_underline_thickness\000", 3085491603)
		methodFontFile[49] = gdnative.MethodOf("FontFile\000", "set_cache_scale\000", 3506521499)
		methodFontFile[50] = gdnative.MethodOf("FontFile\000", "get_cache_scale\000", 3085491603)
		methodFontFile[51] = gdnative.MethodOf("FontFile\000", "get_texture_count\000", 1987661582)
		methodFontFile[52] = gdnative.MethodOf("FontFile\000", "clear_textures\000", 2311374912)
		methodFontFile[53] = gdnative.MethodOf("FontFile\000", "remove_texture\000", 2328951467)
		methodFontFile[54] = gdnative.MethodOf("FontFile\000", "set_texture_image\000", 4157974066)
		methodFontFile[55] = gdnative.MethodOf("FontFile\000", "get_texture_image\000", 3878418953)
		methodFontFile[56] = gdnative.MethodOf("FontFile\000", "set_texture_offsets\000", 2849993437)
		methodFontFile[57] = gdnative.MethodOf("FontFile\000", "get_texture_offsets\000", 3703444828)
		methodFontFile[58] = gdnative.MethodOf("FontFile\000", "get_glyph_list\000", 3611457556)
		methodFontFile[59] = gdnative.MethodOf("FontFile\000", "clear_glyphs\000", 2311374912)
		methodFontFile[60] = gdnative.MethodOf("FontFile\000", "remove_glyph\000", 2328951467)
		methodFontFile[61] = gdnative.MethodOf("FontFile\000", "set_glyph_advance\000", 947991729)
		methodFontFile[62] = gdnative.MethodOf("FontFile\000", "get_glyph_advance\000", 1601573536)
		methodFontFile[63] = gdnative.MethodOf("FontFile\000", "set_glyph_offset\000", 921719850)
		methodFontFile[64] = gdnative.MethodOf("FontFile\000", "get_glyph_offset\000", 3205412300)
		methodFontFile[65] = gdnative.MethodOf("FontFile\000", "set_glyph_size\000", 921719850)
		methodFontFile[66] = gdnative.MethodOf("FontFile\000", "get_glyph_size\000", 3205412300)
		methodFontFile[67] = gdnative.MethodOf("FontFile\000", "set_glyph_uv_rect\000", 3821620992)
		methodFontFile[68] = gdnative.MethodOf("FontFile\000", "get_glyph_uv_rect\000", 3927917900)
		methodFontFile[69] = gdnative.MethodOf("FontFile\000", "set_glyph_texture_idx\000", 355564111)
		methodFontFile[70] = gdnative.MethodOf("FontFile\000", "get_glyph_texture_idx\000", 1629411054)
		methodFontFile[71] = gdnative.MethodOf("FontFile\000", "get_kerning_list\000", 2345056839)
		methodFontFile[72] = gdnative.MethodOf("FontFile\000", "clear_kerning_map\000", 3937882851)
		methodFontFile[73] = gdnative.MethodOf("FontFile\000", "remove_kerning\000", 3930204747)
		methodFontFile[74] = gdnative.MethodOf("FontFile\000", "set_kerning\000", 3182200918)
		methodFontFile[75] = gdnative.MethodOf("FontFile\000", "get_kerning\000", 1611912865)
		methodFontFile[76] = gdnative.MethodOf("FontFile\000", "render_range\000", 355564111)
		methodFontFile[77] = gdnative.MethodOf("FontFile\000", "render_glyph\000", 2328951467)
		methodFontFile[78] = gdnative.MethodOf("FontFile\000", "set_language_support_override\000", 2678287736)
		methodFontFile[79] = gdnative.MethodOf("FontFile\000", "get_language_support_override\000", 3927539163)
		methodFontFile[80] = gdnative.MethodOf("FontFile\000", "remove_language_support_override\000", 83702148)
		methodFontFile[81] = gdnative.MethodOf("FontFile\000", "get_language_support_overrides\000", 1139954409)
		methodFontFile[82] = gdnative.MethodOf("FontFile\000", "set_script_support_override\000", 2678287736)
		methodFontFile[83] = gdnative.MethodOf("FontFile\000", "get_script_support_override\000", 3927539163)
		methodFontFile[84] = gdnative.MethodOf("FontFile\000", "remove_script_support_override\000", 83702148)
		methodFontFile[85] = gdnative.MethodOf("FontFile\000", "get_script_support_overrides\000", 1139954409)
		methodFontFile[86] = gdnative.MethodOf("FontFile\000", "set_opentype_feature_overrides\000", 4155329257)
		methodFontFile[87] = gdnative.MethodOf("FontFile\000", "get_opentype_feature_overrides\000", 3102165223)
		methodFontFile[88] = gdnative.MethodOf("FontFile\000", "get_glyph_index\000", 864943070)
		methodFontVariation[0] = gdnative.MethodOf("FontVariation\000", "set_base_font\000", 1262170328)
		methodFontVariation[1] = gdnative.MethodOf("FontVariation\000", "get_base_font\000", 3229501585)
		methodFontVariation[2] = gdnative.MethodOf("FontVariation\000", "set_variation_opentype\000", 4155329257)
		methodFontVariation[3] = gdnative.MethodOf("FontVariation\000", "get_variation_opentype\000", 3102165223)
		methodFontVariation[4] = gdnative.MethodOf("FontVariation\000", "set_variation_embolden\000", 373806689)
		methodFontVariation[5] = gdnative.MethodOf("FontVariation\000", "get_variation_embolden\000", 1740695150)
		methodFontVariation[6] = gdnative.MethodOf("FontVariation\000", "set_variation_face_index\000", 1286410249)
		methodFontVariation[7] = gdnative.MethodOf("FontVariation\000", "get_variation_face_index\000", 3905245786)
		methodFontVariation[8] = gdnative.MethodOf("FontVariation\000", "set_variation_transform\000", 2761652528)
		methodFontVariation[9] = gdnative.MethodOf("FontVariation\000", "get_variation_transform\000", 3814499831)
		methodFontVariation[10] = gdnative.MethodOf("FontVariation\000", "set_opentype_features\000", 4155329257)
		methodFontVariation[11] = gdnative.MethodOf("FontVariation\000", "set_spacing\000", 3122339690)
		methodGDScript[0] = gdnative.MethodOf("GDScript\000", "new\000", 1545262638)
		methodGDScript[1] = gdnative.MethodOf("GDScript\000", "get_as_byte_code\000", 2362200018)
		methodGLTFAccessor[0] = gdnative.MethodOf("GLTFAccessor\000", "get_buffer_view\000", 2455072627)
		methodGLTFAccessor[1] = gdnative.MethodOf("GLTFAccessor\000", "set_buffer_view\000", 1286410249)
		methodGLTFAccessor[2] = gdnative.MethodOf("GLTFAccessor\000", "get_byte_offset\000", 2455072627)
		methodGLTFAccessor[3] = gdnative.MethodOf("GLTFAccessor\000", "set_byte_offset\000", 1286410249)
		methodGLTFAccessor[4] = gdnative.MethodOf("GLTFAccessor\000", "get_component_type\000", 2455072627)
		methodGLTFAccessor[5] = gdnative.MethodOf("GLTFAccessor\000", "set_component_type\000", 1286410249)
		methodGLTFAccessor[6] = gdnative.MethodOf("GLTFAccessor\000", "get_normalized\000", 2240911060)
		methodGLTFAccessor[7] = gdnative.MethodOf("GLTFAccessor\000", "set_normalized\000", 2586408642)
		methodGLTFAccessor[8] = gdnative.MethodOf("GLTFAccessor\000", "get_count\000", 2455072627)
		methodGLTFAccessor[9] = gdnative.MethodOf("GLTFAccessor\000", "set_count\000", 1286410249)
		methodGLTFAccessor[10] = gdnative.MethodOf("GLTFAccessor\000", "get_type\000", 2455072627)
		methodGLTFAccessor[11] = gdnative.MethodOf("GLTFAccessor\000", "set_type\000", 1286410249)
		methodGLTFAccessor[12] = gdnative.MethodOf("GLTFAccessor\000", "get_min\000", 148677866)
		methodGLTFAccessor[13] = gdnative.MethodOf("GLTFAccessor\000", "set_min\000", 2576592201)
		methodGLTFAccessor[14] = gdnative.MethodOf("GLTFAccessor\000", "get_max\000", 148677866)
		methodGLTFAccessor[15] = gdnative.MethodOf("GLTFAccessor\000", "set_max\000", 2576592201)
		methodGLTFAccessor[16] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_count\000", 2455072627)
		methodGLTFAccessor[17] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_count\000", 1286410249)
		methodGLTFAccessor[18] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_indices_buffer_view\000", 2455072627)
		methodGLTFAccessor[19] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_indices_buffer_view\000", 1286410249)
		methodGLTFAccessor[20] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_indices_byte_offset\000", 2455072627)
		methodGLTFAccessor[21] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_indices_byte_offset\000", 1286410249)
		methodGLTFAccessor[22] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_indices_component_type\000", 2455072627)
		methodGLTFAccessor[23] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_indices_component_type\000", 1286410249)
		methodGLTFAccessor[24] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_values_buffer_view\000", 2455072627)
		methodGLTFAccessor[25] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_values_buffer_view\000", 1286410249)
		methodGLTFAccessor[26] = gdnative.MethodOf("GLTFAccessor\000", "get_sparse_values_byte_offset\000", 2455072627)
		methodGLTFAccessor[27] = gdnative.MethodOf("GLTFAccessor\000", "set_sparse_values_byte_offset\000", 1286410249)
		methodGLTFAnimation[0] = gdnative.MethodOf("GLTFAnimation\000", "get_loop\000", 36873697)
		methodGLTFAnimation[1] = gdnative.MethodOf("GLTFAnimation\000", "set_loop\000", 2586408642)
		methodGLTFBufferView[0] = gdnative.MethodOf("GLTFBufferView\000", "get_buffer\000", 2455072627)
		methodGLTFBufferView[1] = gdnative.MethodOf("GLTFBufferView\000", "set_buffer\000", 1286410249)
		methodGLTFBufferView[2] = gdnative.MethodOf("GLTFBufferView\000", "get_byte_offset\000", 2455072627)
		methodGLTFBufferView[3] = gdnative.MethodOf("GLTFBufferView\000", "set_byte_offset\000", 1286410249)
		methodGLTFBufferView[4] = gdnative.MethodOf("GLTFBufferView\000", "get_byte_length\000", 2455072627)
		methodGLTFBufferView[5] = gdnative.MethodOf("GLTFBufferView\000", "set_byte_length\000", 1286410249)
		methodGLTFBufferView[6] = gdnative.MethodOf("GLTFBufferView\000", "get_byte_stride\000", 2455072627)
		methodGLTFBufferView[7] = gdnative.MethodOf("GLTFBufferView\000", "set_byte_stride\000", 1286410249)
		methodGLTFBufferView[8] = gdnative.MethodOf("GLTFBufferView\000", "get_indices\000", 2240911060)
		methodGLTFBufferView[9] = gdnative.MethodOf("GLTFBufferView\000", "set_indices\000", 2586408642)
		methodGLTFCamera[0] = gdnative.MethodOf("GLTFCamera\000", "get_perspective\000", 36873697)
		methodGLTFCamera[1] = gdnative.MethodOf("GLTFCamera\000", "set_perspective\000", 2586408642)
		methodGLTFCamera[2] = gdnative.MethodOf("GLTFCamera\000", "get_fov_size\000", 1740695150)
		methodGLTFCamera[3] = gdnative.MethodOf("GLTFCamera\000", "set_fov_size\000", 373806689)
		methodGLTFCamera[4] = gdnative.MethodOf("GLTFCamera\000", "get_depth_far\000", 1740695150)
		methodGLTFCamera[5] = gdnative.MethodOf("GLTFCamera\000", "set_depth_far\000", 373806689)
		methodGLTFCamera[6] = gdnative.MethodOf("GLTFCamera\000", "get_depth_near\000", 1740695150)
		methodGLTFCamera[7] = gdnative.MethodOf("GLTFCamera\000", "set_depth_near\000", 373806689)
		methodGLTFDocument[0] = gdnative.MethodOf("GLTFDocument\000", "append_from_file\000", 151088826)
		methodGLTFDocument[1] = gdnative.MethodOf("GLTFDocument\000", "append_from_buffer\000", 3407700015)
		methodGLTFDocument[2] = gdnative.MethodOf("GLTFDocument\000", "append_from_scene\000", 2536678188)
		methodGLTFDocument[3] = gdnative.MethodOf("GLTFDocument\000", "generate_scene\000", 1603623551)
		methodGLTFDocument[4] = gdnative.MethodOf("GLTFDocument\000", "generate_buffer\000", 741783455)
		methodGLTFDocument[5] = gdnative.MethodOf("GLTFDocument\000", "write_to_filesystem\000", 1784551478)
		methodGLTFDocument[6] = gdnative.MethodOf("GLTFDocument\000", "set_extensions\000", 381264803)
		methodGLTFDocument[7] = gdnative.MethodOf("GLTFDocument\000", "get_extensions\000", 3995934104)
		methodGLTFLight[0] = gdnative.MethodOf("GLTFLight\000", "get_color\000", 3200896285)
		methodGLTFLight[1] = gdnative.MethodOf("GLTFLight\000", "set_color\000", 2920490490)
		methodGLTFLight[2] = gdnative.MethodOf("GLTFLight\000", "get_intensity\000", 191475506)
		methodGLTFLight[3] = gdnative.MethodOf("GLTFLight\000", "set_intensity\000", 373806689)
		methodGLTFLight[4] = gdnative.MethodOf("GLTFLight\000", "get_light_type\000", 2841200299)
		methodGLTFLight[5] = gdnative.MethodOf("GLTFLight\000", "set_light_type\000", 83702148)
		methodGLTFLight[6] = gdnative.MethodOf("GLTFLight\000", "get_range\000", 191475506)
		methodGLTFLight[7] = gdnative.MethodOf("GLTFLight\000", "set_range\000", 373806689)
		methodGLTFLight[8] = gdnative.MethodOf("GLTFLight\000", "get_inner_cone_angle\000", 191475506)
		methodGLTFLight[9] = gdnative.MethodOf("GLTFLight\000", "set_inner_cone_angle\000", 373806689)
		methodGLTFLight[10] = gdnative.MethodOf("GLTFLight\000", "get_outer_cone_angle\000", 191475506)
		methodGLTFLight[11] = gdnative.MethodOf("GLTFLight\000", "set_outer_cone_angle\000", 373806689)
		methodGLTFMesh[0] = gdnative.MethodOf("GLTFMesh\000", "get_mesh\000", 3754628756)
		methodGLTFMesh[1] = gdnative.MethodOf("GLTFMesh\000", "set_mesh\000", 2255166972)
		methodGLTFMesh[2] = gdnative.MethodOf("GLTFMesh\000", "get_blend_weights\000", 2445143706)
		methodGLTFMesh[3] = gdnative.MethodOf("GLTFMesh\000", "set_blend_weights\000", 2899603908)
		methodGLTFMesh[4] = gdnative.MethodOf("GLTFMesh\000", "get_instance_materials\000", 2915620761)
		methodGLTFMesh[5] = gdnative.MethodOf("GLTFMesh\000", "set_instance_materials\000", 381264803)
		methodGLTFNode[0] = gdnative.MethodOf("GLTFNode\000", "get_parent\000", 2455072627)
		methodGLTFNode[1] = gdnative.MethodOf("GLTFNode\000", "set_parent\000", 1286410249)
		methodGLTFNode[2] = gdnative.MethodOf("GLTFNode\000", "get_height\000", 2455072627)
		methodGLTFNode[3] = gdnative.MethodOf("GLTFNode\000", "set_height\000", 1286410249)
		methodGLTFNode[4] = gdnative.MethodOf("GLTFNode\000", "get_xform\000", 4183770049)
		methodGLTFNode[5] = gdnative.MethodOf("GLTFNode\000", "set_xform\000", 2952846383)
		methodGLTFNode[6] = gdnative.MethodOf("GLTFNode\000", "get_mesh\000", 2455072627)
		methodGLTFNode[7] = gdnative.MethodOf("GLTFNode\000", "set_mesh\000", 1286410249)
		methodGLTFNode[8] = gdnative.MethodOf("GLTFNode\000", "get_camera\000", 2455072627)
		methodGLTFNode[9] = gdnative.MethodOf("GLTFNode\000", "set_camera\000", 1286410249)
		methodGLTFNode[10] = gdnative.MethodOf("GLTFNode\000", "get_skin\000", 2455072627)
		methodGLTFNode[11] = gdnative.MethodOf("GLTFNode\000", "set_skin\000", 1286410249)
		methodGLTFNode[12] = gdnative.MethodOf("GLTFNode\000", "get_skeleton\000", 2455072627)
		methodGLTFNode[13] = gdnative.MethodOf("GLTFNode\000", "set_skeleton\000", 1286410249)
		methodGLTFNode[14] = gdnative.MethodOf("GLTFNode\000", "get_joint\000", 2240911060)
		methodGLTFNode[15] = gdnative.MethodOf("GLTFNode\000", "set_joint\000", 2586408642)
		methodGLTFNode[16] = gdnative.MethodOf("GLTFNode\000", "get_position\000", 3783033775)
		methodGLTFNode[17] = gdnative.MethodOf("GLTFNode\000", "set_position\000", 3460891852)
		methodGLTFNode[18] = gdnative.MethodOf("GLTFNode\000", "get_rotation\000", 2916281908)
		methodGLTFNode[19] = gdnative.MethodOf("GLTFNode\000", "set_rotation\000", 1727505552)
		methodGLTFNode[20] = gdnative.MethodOf("GLTFNode\000", "get_scale\000", 3783033775)
		methodGLTFNode[21] = gdnative.MethodOf("GLTFNode\000", "set_scale\000", 3460891852)
		methodGLTFNode[22] = gdnative.MethodOf("GLTFNode\000", "get_children\000", 969006518)
		methodGLTFNode[23] = gdnative.MethodOf("GLTFNode\000", "set_children\000", 3614634198)
		methodGLTFNode[24] = gdnative.MethodOf("GLTFNode\000", "get_light\000", 2455072627)
		methodGLTFNode[25] = gdnative.MethodOf("GLTFNode\000", "set_light\000", 1286410249)
		methodGLTFSkeleton[0] = gdnative.MethodOf("GLTFSkeleton\000", "get_joints\000", 969006518)
		methodGLTFSkeleton[1] = gdnative.MethodOf("GLTFSkeleton\000", "set_joints\000", 3614634198)
		methodGLTFSkeleton[2] = gdnative.MethodOf("GLTFSkeleton\000", "get_roots\000", 969006518)
		methodGLTFSkeleton[3] = gdnative.MethodOf("GLTFSkeleton\000", "set_roots\000", 3614634198)
		methodGLTFSkeleton[4] = gdnative.MethodOf("GLTFSkeleton\000", "get_godot_skeleton\000", 1814733083)
		methodGLTFSkeleton[5] = gdnative.MethodOf("GLTFSkeleton\000", "get_unique_names\000", 2915620761)
		methodGLTFSkeleton[6] = gdnative.MethodOf("GLTFSkeleton\000", "set_unique_names\000", 381264803)
		methodGLTFSkeleton[7] = gdnative.MethodOf("GLTFSkeleton\000", "get_godot_bone_node\000", 2382534195)
		methodGLTFSkeleton[8] = gdnative.MethodOf("GLTFSkeleton\000", "set_godot_bone_node\000", 4155329257)
		methodGLTFSkeleton[9] = gdnative.MethodOf("GLTFSkeleton\000", "get_bone_attachment_count\000", 2455072627)
		methodGLTFSkeleton[10] = gdnative.MethodOf("GLTFSkeleton\000", "get_bone_attachment\000", 945440495)
		methodGLTFSkin[0] = gdnative.MethodOf("GLTFSkin\000", "get_skin_root\000", 2455072627)
		methodGLTFSkin[1] = gdnative.MethodOf("GLTFSkin\000", "set_skin_root\000", 1286410249)
		methodGLTFSkin[2] = gdnative.MethodOf("GLTFSkin\000", "get_joints_original\000", 969006518)
		methodGLTFSkin[3] = gdnative.MethodOf("GLTFSkin\000", "set_joints_original\000", 3614634198)
		methodGLTFSkin[4] = gdnative.MethodOf("GLTFSkin\000", "get_inverse_binds\000", 2915620761)
		methodGLTFSkin[5] = gdnative.MethodOf("GLTFSkin\000", "set_inverse_binds\000", 381264803)
		methodGLTFSkin[6] = gdnative.MethodOf("GLTFSkin\000", "get_joints\000", 969006518)
		methodGLTFSkin[7] = gdnative.MethodOf("GLTFSkin\000", "set_joints\000", 3614634198)
		methodGLTFSkin[8] = gdnative.MethodOf("GLTFSkin\000", "get_non_joints\000", 969006518)
		methodGLTFSkin[9] = gdnative.MethodOf("GLTFSkin\000", "set_non_joints\000", 3614634198)
		methodGLTFSkin[10] = gdnative.MethodOf("GLTFSkin\000", "get_roots\000", 969006518)
		methodGLTFSkin[11] = gdnative.MethodOf("GLTFSkin\000", "set_roots\000", 3614634198)
		methodGLTFSkin[12] = gdnative.MethodOf("GLTFSkin\000", "get_skeleton\000", 2455072627)
		methodGLTFSkin[13] = gdnative.MethodOf("GLTFSkin\000", "set_skeleton\000", 1286410249)
		methodGLTFSkin[14] = gdnative.MethodOf("GLTFSkin\000", "get_joint_i_to_bone_i\000", 2382534195)
		methodGLTFSkin[15] = gdnative.MethodOf("GLTFSkin\000", "set_joint_i_to_bone_i\000", 4155329257)
		methodGLTFSkin[16] = gdnative.MethodOf("GLTFSkin\000", "get_joint_i_to_name\000", 2382534195)
		methodGLTFSkin[17] = gdnative.MethodOf("GLTFSkin\000", "set_joint_i_to_name\000", 4155329257)
		methodGLTFSkin[18] = gdnative.MethodOf("GLTFSkin\000", "get_godot_skin\000", 1032037385)
		methodGLTFSkin[19] = gdnative.MethodOf("GLTFSkin\000", "set_godot_skin\000", 3971435618)
		methodGLTFSpecGloss[0] = gdnative.MethodOf("GLTFSpecGloss\000", "get_diffuse_img\000", 564927088)
		methodGLTFSpecGloss[1] = gdnative.MethodOf("GLTFSpecGloss\000", "set_diffuse_img\000", 532598488)
		methodGLTFSpecGloss[2] = gdnative.MethodOf("GLTFSpecGloss\000", "get_diffuse_factor\000", 3200896285)
		methodGLTFSpecGloss[3] = gdnative.MethodOf("GLTFSpecGloss\000", "set_diffuse_factor\000", 2920490490)
		methodGLTFSpecGloss[4] = gdnative.MethodOf("GLTFSpecGloss\000", "get_gloss_factor\000", 191475506)
		methodGLTFSpecGloss[5] = gdnative.MethodOf("GLTFSpecGloss\000", "set_gloss_factor\000", 373806689)
		methodGLTFSpecGloss[6] = gdnative.MethodOf("GLTFSpecGloss\000", "get_specular_factor\000", 3200896285)
		methodGLTFSpecGloss[7] = gdnative.MethodOf("GLTFSpecGloss\000", "set_specular_factor\000", 2920490490)
		methodGLTFSpecGloss[8] = gdnative.MethodOf("GLTFSpecGloss\000", "get_spec_gloss_img\000", 564927088)
		methodGLTFSpecGloss[9] = gdnative.MethodOf("GLTFSpecGloss\000", "set_spec_gloss_img\000", 532598488)
		methodGLTFState[0] = gdnative.MethodOf("GLTFState\000", "get_json\000", 2382534195)
		methodGLTFState[1] = gdnative.MethodOf("GLTFState\000", "set_json\000", 4155329257)
		methodGLTFState[2] = gdnative.MethodOf("GLTFState\000", "get_major_version\000", 2455072627)
		methodGLTFState[3] = gdnative.MethodOf("GLTFState\000", "set_major_version\000", 1286410249)
		methodGLTFState[4] = gdnative.MethodOf("GLTFState\000", "get_minor_version\000", 2455072627)
		methodGLTFState[5] = gdnative.MethodOf("GLTFState\000", "set_minor_version\000", 1286410249)
		methodGLTFState[6] = gdnative.MethodOf("GLTFState\000", "get_glb_data\000", 2115431945)
		methodGLTFState[7] = gdnative.MethodOf("GLTFState\000", "set_glb_data\000", 2971499966)
		methodGLTFState[8] = gdnative.MethodOf("GLTFState\000", "get_use_named_skin_binds\000", 2240911060)
		methodGLTFState[9] = gdnative.MethodOf("GLTFState\000", "set_use_named_skin_binds\000", 2586408642)
		methodGLTFState[10] = gdnative.MethodOf("GLTFState\000", "get_nodes\000", 2915620761)
		methodGLTFState[11] = gdnative.MethodOf("GLTFState\000", "set_nodes\000", 381264803)
		methodGLTFState[12] = gdnative.MethodOf("GLTFState\000", "get_buffers\000", 2915620761)
		methodGLTFState[13] = gdnative.MethodOf("GLTFState\000", "set_buffers\000", 381264803)
		methodGLTFState[14] = gdnative.MethodOf("GLTFState\000", "get_buffer_views\000", 2915620761)
		methodGLTFState[15] = gdnative.MethodOf("GLTFState\000", "set_buffer_views\000", 381264803)
		methodGLTFState[16] = gdnative.MethodOf("GLTFState\000", "get_accessors\000", 2915620761)
		methodGLTFState[17] = gdnative.MethodOf("GLTFState\000", "set_accessors\000", 381264803)
		methodGLTFState[18] = gdnative.MethodOf("GLTFState\000", "get_meshes\000", 2915620761)
		methodGLTFState[19] = gdnative.MethodOf("GLTFState\000", "set_meshes\000", 381264803)
		methodGLTFState[20] = gdnative.MethodOf("GLTFState\000", "get_animation_players_count\000", 3744713108)
		methodGLTFState[21] = gdnative.MethodOf("GLTFState\000", "get_animation_player\000", 925043400)
		methodGLTFState[22] = gdnative.MethodOf("GLTFState\000", "get_materials\000", 2915620761)
		methodGLTFState[23] = gdnative.MethodOf("GLTFState\000", "set_materials\000", 381264803)
		methodGLTFState[24] = gdnative.MethodOf("GLTFState\000", "get_scene_name\000", 2841200299)
		methodGLTFState[25] = gdnative.MethodOf("GLTFState\000", "set_scene_name\000", 83702148)
		methodGLTFState[26] = gdnative.MethodOf("GLTFState\000", "get_base_path\000", 2841200299)
		methodGLTFState[27] = gdnative.MethodOf("GLTFState\000", "set_base_path\000", 83702148)
		methodGLTFState[28] = gdnative.MethodOf("GLTFState\000", "get_root_nodes\000", 2915620761)
		methodGLTFState[29] = gdnative.MethodOf("GLTFState\000", "set_root_nodes\000", 381264803)
		methodGLTFState[30] = gdnative.MethodOf("GLTFState\000", "get_textures\000", 2915620761)
		methodGLTFState[31] = gdnative.MethodOf("GLTFState\000", "set_textures\000", 381264803)
		methodGLTFState[32] = gdnative.MethodOf("GLTFState\000", "get_images\000", 2915620761)
		methodGLTFState[33] = gdnative.MethodOf("GLTFState\000", "set_images\000", 381264803)
		methodGLTFState[34] = gdnative.MethodOf("GLTFState\000", "get_skins\000", 2915620761)
		methodGLTFState[35] = gdnative.MethodOf("GLTFState\000", "set_skins\000", 381264803)
		methodGLTFState[36] = gdnative.MethodOf("GLTFState\000", "get_cameras\000", 2915620761)
		methodGLTFState[37] = gdnative.MethodOf("GLTFState\000", "set_cameras\000", 381264803)
		methodGLTFState[38] = gdnative.MethodOf("GLTFState\000", "get_lights\000", 2915620761)
		methodGLTFState[39] = gdnative.MethodOf("GLTFState\000", "set_lights\000", 381264803)
		methodGLTFState[40] = gdnative.MethodOf("GLTFState\000", "get_unique_names\000", 2915620761)
		methodGLTFState[41] = gdnative.MethodOf("GLTFState\000", "set_unique_names\000", 381264803)
		methodGLTFState[42] = gdnative.MethodOf("GLTFState\000", "get_unique_animation_names\000", 2915620761)
		methodGLTFState[43] = gdnative.MethodOf("GLTFState\000", "set_unique_animation_names\000", 381264803)
		methodGLTFState[44] = gdnative.MethodOf("GLTFState\000", "get_skeletons\000", 2915620761)
		methodGLTFState[45] = gdnative.MethodOf("GLTFState\000", "set_skeletons\000", 381264803)
		methodGLTFState[46] = gdnative.MethodOf("GLTFState\000", "get_skeleton_to_node\000", 2382534195)
		methodGLTFState[47] = gdnative.MethodOf("GLTFState\000", "set_skeleton_to_node\000", 4155329257)
		methodGLTFState[48] = gdnative.MethodOf("GLTFState\000", "get_create_animations\000", 2240911060)
		methodGLTFState[49] = gdnative.MethodOf("GLTFState\000", "set_create_animations\000", 2586408642)
		methodGLTFState[50] = gdnative.MethodOf("GLTFState\000", "get_animations\000", 2915620761)
		methodGLTFState[51] = gdnative.MethodOf("GLTFState\000", "set_animations\000", 381264803)
		methodGLTFState[52] = gdnative.MethodOf("GLTFState\000", "get_scene_node\000", 4253421667)
		methodGLTFTexture[0] = gdnative.MethodOf("GLTFTexture\000", "get_src_image\000", 3905245786)
		methodGLTFTexture[1] = gdnative.MethodOf("GLTFTexture\000", "set_src_image\000", 1286410249)
		methodGPUParticles2D[0] = gdnative.MethodOf("GPUParticles2D\000", "set_emitting\000", 2586408642)
		methodGPUParticles2D[1] = gdnative.MethodOf("GPUParticles2D\000", "set_amount\000", 1286410249)
		methodGPUParticles2D[2] = gdnative.MethodOf("GPUParticles2D\000", "set_lifetime\000", 373806689)
		methodGPUParticles2D[3] = gdnative.MethodOf("GPUParticles2D\000", "set_one_shot\000", 2586408642)
		methodGPUParticles2D[4] = gdnative.MethodOf("GPUParticles2D\000", "set_pre_process_time\000", 373806689)
		methodGPUParticles2D[5] = gdnative.MethodOf("GPUParticles2D\000", "set_explosiveness_ratio\000", 373806689)
		methodGPUParticles2D[6] = gdnative.MethodOf("GPUParticles2D\000", "set_randomness_ratio\000", 373806689)
		methodGPUParticles2D[7] = gdnative.MethodOf("GPUParticles2D\000", "set_visibility_rect\000", 2046264180)
		methodGPUParticles2D[8] = gdnative.MethodOf("GPUParticles2D\000", "set_use_local_coordinates\000", 2586408642)
		methodGPUParticles2D[9] = gdnative.MethodOf("GPUParticles2D\000", "set_fixed_fps\000", 1286410249)
		methodGPUParticles2D[10] = gdnative.MethodOf("GPUParticles2D\000", "set_fractional_delta\000", 2586408642)
		methodGPUParticles2D[11] = gdnative.MethodOf("GPUParticles2D\000", "set_interpolate\000", 2586408642)
		methodGPUParticles2D[12] = gdnative.MethodOf("GPUParticles2D\000", "set_process_material\000", 2757459619)
		methodGPUParticles2D[13] = gdnative.MethodOf("GPUParticles2D\000", "set_speed_scale\000", 373806689)
		methodGPUParticles2D[14] = gdnative.MethodOf("GPUParticles2D\000", "set_collision_base_size\000", 373806689)
		methodGPUParticles2D[15] = gdnative.MethodOf("GPUParticles2D\000", "is_emitting\000", 36873697)
		methodGPUParticles2D[16] = gdnative.MethodOf("GPUParticles2D\000", "get_amount\000", 3905245786)
		methodGPUParticles2D[17] = gdnative.MethodOf("GPUParticles2D\000", "get_lifetime\000", 1740695150)
		methodGPUParticles2D[18] = gdnative.MethodOf("GPUParticles2D\000", "get_one_shot\000", 36873697)
		methodGPUParticles2D[19] = gdnative.MethodOf("GPUParticles2D\000", "get_pre_process_time\000", 1740695150)
		methodGPUParticles2D[20] = gdnative.MethodOf("GPUParticles2D\000", "get_explosiveness_ratio\000", 1740695150)
		methodGPUParticles2D[21] = gdnative.MethodOf("GPUParticles2D\000", "get_randomness_ratio\000", 1740695150)
		methodGPUParticles2D[22] = gdnative.MethodOf("GPUParticles2D\000", "get_visibility_rect\000", 1639390495)
		methodGPUParticles2D[23] = gdnative.MethodOf("GPUParticles2D\000", "get_use_local_coordinates\000", 36873697)
		methodGPUParticles2D[24] = gdnative.MethodOf("GPUParticles2D\000", "get_fixed_fps\000", 3905245786)
		methodGPUParticles2D[25] = gdnative.MethodOf("GPUParticles2D\000", "get_fractional_delta\000", 36873697)
		methodGPUParticles2D[26] = gdnative.MethodOf("GPUParticles2D\000", "get_interpolate\000", 36873697)
		methodGPUParticles2D[27] = gdnative.MethodOf("GPUParticles2D\000", "get_process_material\000", 5934680)
		methodGPUParticles2D[28] = gdnative.MethodOf("GPUParticles2D\000", "get_speed_scale\000", 1740695150)
		methodGPUParticles2D[29] = gdnative.MethodOf("GPUParticles2D\000", "get_collision_base_size\000", 1740695150)
		methodGPUParticles2D[30] = gdnative.MethodOf("GPUParticles2D\000", "set_draw_order\000", 1939677959)
		methodGPUParticles2D[31] = gdnative.MethodOf("GPUParticles2D\000", "get_draw_order\000", 941479095)
		methodGPUParticles2D[32] = gdnative.MethodOf("GPUParticles2D\000", "set_texture\000", 4051416890)
		methodGPUParticles2D[33] = gdnative.MethodOf("GPUParticles2D\000", "get_texture\000", 3635182373)
		methodGPUParticles2D[34] = gdnative.MethodOf("GPUParticles2D\000", "capture_rect\000", 1639390495)
		methodGPUParticles2D[35] = gdnative.MethodOf("GPUParticles2D\000", "restart\000", 3218959716)
		methodGPUParticles2D[36] = gdnative.MethodOf("GPUParticles2D\000", "set_sub_emitter\000", 1348162250)
		methodGPUParticles2D[37] = gdnative.MethodOf("GPUParticles2D\000", "get_sub_emitter\000", 4075236667)
		methodGPUParticles2D[38] = gdnative.MethodOf("GPUParticles2D\000", "emit_particle\000", 2179202058)
		methodGPUParticles2D[39] = gdnative.MethodOf("GPUParticles2D\000", "set_trail_enabled\000", 2586408642)
		methodGPUParticles2D[40] = gdnative.MethodOf("GPUParticles2D\000", "set_trail_length\000", 373806689)
		methodGPUParticles2D[41] = gdnative.MethodOf("GPUParticles2D\000", "is_trail_enabled\000", 36873697)
		methodGPUParticles2D[42] = gdnative.MethodOf("GPUParticles2D\000", "get_trail_length\000", 1740695150)
		methodGPUParticles2D[43] = gdnative.MethodOf("GPUParticles2D\000", "set_trail_sections\000", 1286410249)
		methodGPUParticles2D[44] = gdnative.MethodOf("GPUParticles2D\000", "get_trail_sections\000", 3905245786)
		methodGPUParticles2D[45] = gdnative.MethodOf("GPUParticles2D\000", "set_trail_section_subdivisions\000", 1286410249)
		methodGPUParticles2D[46] = gdnative.MethodOf("GPUParticles2D\000", "get_trail_section_subdivisions\000", 3905245786)
		methodGPUParticles3D[0] = gdnative.MethodOf("GPUParticles3D\000", "set_emitting\000", 2586408642)
		methodGPUParticles3D[1] = gdnative.MethodOf("GPUParticles3D\000", "set_amount\000", 1286410249)
		methodGPUParticles3D[2] = gdnative.MethodOf("GPUParticles3D\000", "set_lifetime\000", 373806689)
		methodGPUParticles3D[3] = gdnative.MethodOf("GPUParticles3D\000", "set_one_shot\000", 2586408642)
		methodGPUParticles3D[4] = gdnative.MethodOf("GPUParticles3D\000", "set_pre_process_time\000", 373806689)
		methodGPUParticles3D[5] = gdnative.MethodOf("GPUParticles3D\000", "set_explosiveness_ratio\000", 373806689)
		methodGPUParticles3D[6] = gdnative.MethodOf("GPUParticles3D\000", "set_randomness_ratio\000", 373806689)
		methodGPUParticles3D[7] = gdnative.MethodOf("GPUParticles3D\000", "set_visibility_aabb\000", 259215842)
		methodGPUParticles3D[8] = gdnative.MethodOf("GPUParticles3D\000", "set_use_local_coordinates\000", 2586408642)
		methodGPUParticles3D[9] = gdnative.MethodOf("GPUParticles3D\000", "set_fixed_fps\000", 1286410249)
		methodGPUParticles3D[10] = gdnative.MethodOf("GPUParticles3D\000", "set_fractional_delta\000", 2586408642)
		methodGPUParticles3D[11] = gdnative.MethodOf("GPUParticles3D\000", "set_interpolate\000", 2586408642)
		methodGPUParticles3D[12] = gdnative.MethodOf("GPUParticles3D\000", "set_process_material\000", 2757459619)
		methodGPUParticles3D[13] = gdnative.MethodOf("GPUParticles3D\000", "set_speed_scale\000", 373806689)
		methodGPUParticles3D[14] = gdnative.MethodOf("GPUParticles3D\000", "set_collision_base_size\000", 373806689)
		methodGPUParticles3D[15] = gdnative.MethodOf("GPUParticles3D\000", "is_emitting\000", 36873697)
		methodGPUParticles3D[16] = gdnative.MethodOf("GPUParticles3D\000", "get_amount\000", 3905245786)
		methodGPUParticles3D[17] = gdnative.MethodOf("GPUParticles3D\000", "get_lifetime\000", 1740695150)
		methodGPUParticles3D[18] = gdnative.MethodOf("GPUParticles3D\000", "get_one_shot\000", 36873697)
		methodGPUParticles3D[19] = gdnative.MethodOf("GPUParticles3D\000", "get_pre_process_time\000", 1740695150)
		methodGPUParticles3D[20] = gdnative.MethodOf("GPUParticles3D\000", "get_explosiveness_ratio\000", 1740695150)
		methodGPUParticles3D[21] = gdnative.MethodOf("GPUParticles3D\000", "get_randomness_ratio\000", 1740695150)
		methodGPUParticles3D[22] = gdnative.MethodOf("GPUParticles3D\000", "get_visibility_aabb\000", 1068685055)
		methodGPUParticles3D[23] = gdnative.MethodOf("GPUParticles3D\000", "get_use_local_coordinates\000", 36873697)
		methodGPUParticles3D[24] = gdnative.MethodOf("GPUParticles3D\000", "get_fixed_fps\000", 3905245786)
		methodGPUParticles3D[25] = gdnative.MethodOf("GPUParticles3D\000", "get_fractional_delta\000", 36873697)
		methodGPUParticles3D[26] = gdnative.MethodOf("GPUParticles3D\000", "get_interpolate\000", 36873697)
		methodGPUParticles3D[27] = gdnative.MethodOf("GPUParticles3D\000", "get_process_material\000", 5934680)
		methodGPUParticles3D[28] = gdnative.MethodOf("GPUParticles3D\000", "get_speed_scale\000", 1740695150)
		methodGPUParticles3D[29] = gdnative.MethodOf("GPUParticles3D\000", "get_collision_base_size\000", 1740695150)
		methodGPUParticles3D[30] = gdnative.MethodOf("GPUParticles3D\000", "set_draw_order\000", 1208074815)
		methodGPUParticles3D[31] = gdnative.MethodOf("GPUParticles3D\000", "get_draw_order\000", 3770381780)
		methodGPUParticles3D[32] = gdnative.MethodOf("GPUParticles3D\000", "set_draw_passes\000", 1286410249)
		methodGPUParticles3D[33] = gdnative.MethodOf("GPUParticles3D\000", "set_draw_pass_mesh\000", 969122797)
		methodGPUParticles3D[34] = gdnative.MethodOf("GPUParticles3D\000", "get_draw_passes\000", 3905245786)
		methodGPUParticles3D[35] = gdnative.MethodOf("GPUParticles3D\000", "get_draw_pass_mesh\000", 1576363275)
		methodGPUParticles3D[36] = gdnative.MethodOf("GPUParticles3D\000", "set_skin\000", 3971435618)
		methodGPUParticles3D[37] = gdnative.MethodOf("GPUParticles3D\000", "get_skin\000", 2074563878)
		methodGPUParticles3D[38] = gdnative.MethodOf("GPUParticles3D\000", "restart\000", 3218959716)
		methodGPUParticles3D[39] = gdnative.MethodOf("GPUParticles3D\000", "capture_aabb\000", 1068685055)
		methodGPUParticles3D[40] = gdnative.MethodOf("GPUParticles3D\000", "set_sub_emitter\000", 1348162250)
		methodGPUParticles3D[41] = gdnative.MethodOf("GPUParticles3D\000", "get_sub_emitter\000", 4075236667)
		methodGPUParticles3D[42] = gdnative.MethodOf("GPUParticles3D\000", "emit_particle\000", 992173727)
		methodGPUParticles3D[43] = gdnative.MethodOf("GPUParticles3D\000", "set_trail_enabled\000", 2586408642)
		methodGPUParticles3D[44] = gdnative.MethodOf("GPUParticles3D\000", "set_trail_length\000", 373806689)
		methodGPUParticles3D[45] = gdnative.MethodOf("GPUParticles3D\000", "is_trail_enabled\000", 36873697)
		methodGPUParticles3D[46] = gdnative.MethodOf("GPUParticles3D\000", "get_trail_length\000", 1740695150)
		methodGPUParticles3D[47] = gdnative.MethodOf("GPUParticles3D\000", "set_transform_align\000", 3892425954)
		methodGPUParticles3D[48] = gdnative.MethodOf("GPUParticles3D\000", "get_transform_align\000", 2100992166)
		methodGPUParticlesAttractor3D[0] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "set_cull_mask\000", 1286410249)
		methodGPUParticlesAttractor3D[1] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "get_cull_mask\000", 3905245786)
		methodGPUParticlesAttractor3D[2] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "set_strength\000", 373806689)
		methodGPUParticlesAttractor3D[3] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "get_strength\000", 1740695150)
		methodGPUParticlesAttractor3D[4] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "set_attenuation\000", 373806689)
		methodGPUParticlesAttractor3D[5] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "get_attenuation\000", 1740695150)
		methodGPUParticlesAttractor3D[6] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "set_directionality\000", 373806689)
		methodGPUParticlesAttractor3D[7] = gdnative.MethodOf("GPUParticlesAttractor3D\000", "get_directionality\000", 1740695150)
		methodGPUParticlesAttractorBox3D[0] = gdnative.MethodOf("GPUParticlesAttractorBox3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesAttractorBox3D[1] = gdnative.MethodOf("GPUParticlesAttractorBox3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesAttractorSphere3D[0] = gdnative.MethodOf("GPUParticlesAttractorSphere3D\000", "set_radius\000", 373806689)
		methodGPUParticlesAttractorSphere3D[1] = gdnative.MethodOf("GPUParticlesAttractorSphere3D\000", "get_radius\000", 1740695150)
		methodGPUParticlesAttractorVectorField3D[0] = gdnative.MethodOf("GPUParticlesAttractorVectorField3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesAttractorVectorField3D[1] = gdnative.MethodOf("GPUParticlesAttractorVectorField3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesAttractorVectorField3D[2] = gdnative.MethodOf("GPUParticlesAttractorVectorField3D\000", "set_texture\000", 1188404210)
		methodGPUParticlesAttractorVectorField3D[3] = gdnative.MethodOf("GPUParticlesAttractorVectorField3D\000", "get_texture\000", 373985333)
		methodGPUParticlesCollision3D[0] = gdnative.MethodOf("GPUParticlesCollision3D\000", "set_cull_mask\000", 1286410249)
		methodGPUParticlesCollision3D[1] = gdnative.MethodOf("GPUParticlesCollision3D\000", "get_cull_mask\000", 3905245786)
		methodGPUParticlesCollisionBox3D[0] = gdnative.MethodOf("GPUParticlesCollisionBox3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionBox3D[1] = gdnative.MethodOf("GPUParticlesCollisionBox3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionHeightField3D[0] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionHeightField3D[1] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionHeightField3D[2] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "set_resolution\000", 1009996517)
		methodGPUParticlesCollisionHeightField3D[3] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "get_resolution\000", 1156065644)
		methodGPUParticlesCollisionHeightField3D[4] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "set_update_mode\000", 673680859)
		methodGPUParticlesCollisionHeightField3D[5] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "get_update_mode\000", 1998141380)
		methodGPUParticlesCollisionHeightField3D[6] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "set_follow_camera_enabled\000", 2586408642)
		methodGPUParticlesCollisionHeightField3D[7] = gdnative.MethodOf("GPUParticlesCollisionHeightField3D\000", "is_follow_camera_enabled\000", 36873697)
		methodGPUParticlesCollisionSDF3D[0] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionSDF3D[1] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionSDF3D[2] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_resolution\000", 1155629297)
		methodGPUParticlesCollisionSDF3D[3] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_resolution\000", 2919555867)
		methodGPUParticlesCollisionSDF3D[4] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_texture\000", 1188404210)
		methodGPUParticlesCollisionSDF3D[5] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_texture\000", 373985333)
		methodGPUParticlesCollisionSDF3D[6] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_thickness\000", 373806689)
		methodGPUParticlesCollisionSDF3D[7] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_thickness\000", 1740695150)
		methodGPUParticlesCollisionSDF3D[8] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_bake_mask\000", 1286410249)
		methodGPUParticlesCollisionSDF3D[9] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_bake_mask\000", 3905245786)
		methodGPUParticlesCollisionSDF3D[10] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "set_bake_mask_value\000", 300928843)
		methodGPUParticlesCollisionSDF3D[11] = gdnative.MethodOf("GPUParticlesCollisionSDF3D\000", "get_bake_mask_value\000", 1116898809)
		methodGPUParticlesCollisionSphere3D[0] = gdnative.MethodOf("GPUParticlesCollisionSphere3D\000", "set_radius\000", 373806689)
		methodGPUParticlesCollisionSphere3D[1] = gdnative.MethodOf("GPUParticlesCollisionSphere3D\000", "get_radius\000", 1740695150)
		methodGeneric6DOFJoint3D[0] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_param_x\000", 2018184242)
		methodGeneric6DOFJoint3D[1] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_param_x\000", 2599835054)
		methodGeneric6DOFJoint3D[2] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_param_y\000", 2018184242)
		methodGeneric6DOFJoint3D[3] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_param_y\000", 2599835054)
		methodGeneric6DOFJoint3D[4] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_param_z\000", 2018184242)
		methodGeneric6DOFJoint3D[5] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_param_z\000", 2599835054)
		methodGeneric6DOFJoint3D[6] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_flag_x\000", 2451594564)
		methodGeneric6DOFJoint3D[7] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_flag_x\000", 2122427807)
		methodGeneric6DOFJoint3D[8] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_flag_y\000", 2451594564)
		methodGeneric6DOFJoint3D[9] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_flag_y\000", 2122427807)
		methodGeneric6DOFJoint3D[10] = gdnative.MethodOf("Generic6DOFJoint3D\000", "set_flag_z\000", 2451594564)
		methodGeneric6DOFJoint3D[11] = gdnative.MethodOf("Generic6DOFJoint3D\000", "get_flag_z\000", 2122427807)
		methodGeometry2D[0] = gdnative.MethodOf("Geometry2D\000", "is_point_in_circle\000", 2929491703)
		methodGeometry2D[1] = gdnative.MethodOf("Geometry2D\000", "segment_intersects_circle\000", 1356928167)
		methodGeometry2D[2] = gdnative.MethodOf("Geometry2D\000", "segment_intersects_segment\000", 2058025344)
		methodGeometry2D[3] = gdnative.MethodOf("Geometry2D\000", "line_intersects_line\000", 2058025344)
		methodGeometry2D[4] = gdnative.MethodOf("Geometry2D\000", "get_closest_points_between_segments\000", 3344690961)
		methodGeometry2D[5] = gdnative.MethodOf("Geometry2D\000", "get_closest_point_to_segment\000", 4172901909)
		methodGeometry2D[6] = gdnative.MethodOf("Geometry2D\000", "get_closest_point_to_segment_uncapped\000", 4172901909)
		methodGeometry2D[7] = gdnative.MethodOf("Geometry2D\000", "point_is_inside_triangle\000", 1025948137)
		methodGeometry2D[8] = gdnative.MethodOf("Geometry2D\000", "is_polygon_clockwise\000", 1361156557)
		methodGeometry2D[9] = gdnative.MethodOf("Geometry2D\000", "is_point_in_polygon\000", 738277916)
		methodGeometry2D[10] = gdnative.MethodOf("Geometry2D\000", "triangulate_polygon\000", 1389921771)
		methodGeometry2D[11] = gdnative.MethodOf("Geometry2D\000", "triangulate_delaunay\000", 1389921771)
		methodGeometry2D[12] = gdnative.MethodOf("Geometry2D\000", "convex_hull\000", 2004331998)
		methodGeometry2D[13] = gdnative.MethodOf("Geometry2D\000", "merge_polygons\000", 3637387053)
		methodGeometry2D[14] = gdnative.MethodOf("Geometry2D\000", "clip_polygons\000", 3637387053)
		methodGeometry2D[15] = gdnative.MethodOf("Geometry2D\000", "intersect_polygons\000", 3637387053)
		methodGeometry2D[16] = gdnative.MethodOf("Geometry2D\000", "exclude_polygons\000", 3637387053)
		methodGeometry2D[17] = gdnative.MethodOf("Geometry2D\000", "clip_polyline_with_polygon\000", 3637387053)
		methodGeometry2D[18] = gdnative.MethodOf("Geometry2D\000", "intersect_polyline_with_polygon\000", 3637387053)
		methodGeometry2D[19] = gdnative.MethodOf("Geometry2D\000", "offset_polygon\000", 3837618924)
		methodGeometry2D[20] = gdnative.MethodOf("Geometry2D\000", "offset_polyline\000", 328033063)
		methodGeometry2D[21] = gdnative.MethodOf("Geometry2D\000", "make_atlas\000", 1337682371)
		methodGeometry3D[0] = gdnative.MethodOf("Geometry3D\000", "build_box_planes\000", 3622277145)
		methodGeometry3D[1] = gdnative.MethodOf("Geometry3D\000", "build_cylinder_planes\000", 3142160516)
		methodGeometry3D[2] = gdnative.MethodOf("Geometry3D\000", "build_capsule_planes\000", 410870045)
		methodGeometry3D[3] = gdnative.MethodOf("Geometry3D\000", "get_closest_points_between_segments\000", 1056373962)
		methodGeometry3D[4] = gdnative.MethodOf("Geometry3D\000", "get_closest_point_to_segment\000", 2168193209)
		methodGeometry3D[5] = gdnative.MethodOf("Geometry3D\000", "get_closest_point_to_segment_uncapped\000", 2168193209)
		methodGeometry3D[6] = gdnative.MethodOf("Geometry3D\000", "ray_intersects_triangle\000", 1718655448)
		methodGeometry3D[7] = gdnative.MethodOf("Geometry3D\000", "segment_intersects_triangle\000", 1718655448)
		methodGeometry3D[8] = gdnative.MethodOf("Geometry3D\000", "segment_intersects_sphere\000", 4080141172)
		methodGeometry3D[9] = gdnative.MethodOf("Geometry3D\000", "segment_intersects_cylinder\000", 2361316491)
		methodGeometry3D[10] = gdnative.MethodOf("Geometry3D\000", "segment_intersects_convex\000", 537425332)
		methodGeometry3D[11] = gdnative.MethodOf("Geometry3D\000", "clip_polygon\000", 2603188319)
		methodGeometryInstance3D[0] = gdnative.MethodOf("GeometryInstance3D\000", "set_material_override\000", 2757459619)
		methodGeometryInstance3D[1] = gdnative.MethodOf("GeometryInstance3D\000", "get_material_override\000", 5934680)
		methodGeometryInstance3D[2] = gdnative.MethodOf("GeometryInstance3D\000", "set_material_overlay\000", 2757459619)
		methodGeometryInstance3D[3] = gdnative.MethodOf("GeometryInstance3D\000", "get_material_overlay\000", 5934680)
		methodGeometryInstance3D[4] = gdnative.MethodOf("GeometryInstance3D\000", "set_cast_shadows_setting\000", 856677339)
		methodGeometryInstance3D[5] = gdnative.MethodOf("GeometryInstance3D\000", "get_cast_shadows_setting\000", 3383019359)
		methodGeometryInstance3D[6] = gdnative.MethodOf("GeometryInstance3D\000", "set_lod_bias\000", 373806689)
		methodGeometryInstance3D[7] = gdnative.MethodOf("GeometryInstance3D\000", "get_lod_bias\000", 1740695150)
		methodGeometryInstance3D[8] = gdnative.MethodOf("GeometryInstance3D\000", "set_transparency\000", 373806689)
		methodGeometryInstance3D[9] = gdnative.MethodOf("GeometryInstance3D\000", "get_transparency\000", 1740695150)
		methodGeometryInstance3D[10] = gdnative.MethodOf("GeometryInstance3D\000", "set_visibility_range_end_margin\000", 373806689)
		methodGeometryInstance3D[11] = gdnative.MethodOf("GeometryInstance3D\000", "get_visibility_range_end_margin\000", 1740695150)
		methodGeometryInstance3D[12] = gdnative.MethodOf("GeometryInstance3D\000", "set_visibility_range_end\000", 373806689)
		methodGeometryInstance3D[13] = gdnative.MethodOf("GeometryInstance3D\000", "get_visibility_range_end\000", 1740695150)
		methodGeometryInstance3D[14] = gdnative.MethodOf("GeometryInstance3D\000", "set_visibility_range_begin_margin\000", 373806689)
		methodGeometryInstance3D[15] = gdnative.MethodOf("GeometryInstance3D\000", "get_visibility_range_begin_margin\000", 1740695150)
		methodGeometryInstance3D[16] = gdnative.MethodOf("GeometryInstance3D\000", "set_visibility_range_begin\000", 373806689)
		methodGeometryInstance3D[17] = gdnative.MethodOf("GeometryInstance3D\000", "get_visibility_range_begin\000", 1740695150)
		methodGeometryInstance3D[18] = gdnative.MethodOf("GeometryInstance3D\000", "set_visibility_range_fade_mode\000", 1440117808)
		methodGeometryInstance3D[19] = gdnative.MethodOf("GeometryInstance3D\000", "get_visibility_range_fade_mode\000", 2067221882)
		methodGeometryInstance3D[20] = gdnative.MethodOf("GeometryInstance3D\000", "set_instance_shader_uniform\000", 3776071444)
		methodGeometryInstance3D[21] = gdnative.MethodOf("GeometryInstance3D\000", "get_instance_shader_uniform\000", 2760726917)
		methodGeometryInstance3D[22] = gdnative.MethodOf("GeometryInstance3D\000", "set_extra_cull_margin\000", 373806689)
		methodGeometryInstance3D[23] = gdnative.MethodOf("GeometryInstance3D\000", "get_extra_cull_margin\000", 1740695150)
		methodGeometryInstance3D[24] = gdnative.MethodOf("GeometryInstance3D\000", "set_lightmap_scale\000", 2462696582)
		methodGeometryInstance3D[25] = gdnative.MethodOf("GeometryInstance3D\000", "get_lightmap_scale\000", 798767852)
		methodGeometryInstance3D[26] = gdnative.MethodOf("GeometryInstance3D\000", "set_gi_mode\000", 2548557163)
		methodGeometryInstance3D[27] = gdnative.MethodOf("GeometryInstance3D\000", "get_gi_mode\000", 2188566509)
		methodGeometryInstance3D[28] = gdnative.MethodOf("GeometryInstance3D\000", "set_ignore_occlusion_culling\000", 2586408642)
		methodGeometryInstance3D[29] = gdnative.MethodOf("GeometryInstance3D\000", "is_ignoring_occlusion_culling\000", 2240911060)
		methodGeometryInstance3D[30] = gdnative.MethodOf("GeometryInstance3D\000", "set_custom_aabb\000", 259215842)
		methodGradient[0] = gdnative.MethodOf("Gradient\000", "add_point\000", 3629403827)
		methodGradient[1] = gdnative.MethodOf("Gradient\000", "remove_point\000", 1286410249)
		methodGradient[2] = gdnative.MethodOf("Gradient\000", "set_offset\000", 1602489585)
		methodGradient[3] = gdnative.MethodOf("Gradient\000", "get_offset\000", 4025615559)
		methodGradient[4] = gdnative.MethodOf("Gradient\000", "reverse\000", 3218959716)
		methodGradient[5] = gdnative.MethodOf("Gradient\000", "set_color\000", 2878471219)
		methodGradient[6] = gdnative.MethodOf("Gradient\000", "get_color\000", 2624840992)
		methodGradient[7] = gdnative.MethodOf("Gradient\000", "interpolate\000", 1250405064)
		methodGradient[8] = gdnative.MethodOf("Gradient\000", "get_point_count\000", 3905245786)
		methodGradient[9] = gdnative.MethodOf("Gradient\000", "set_offsets\000", 2899603908)
		methodGradient[10] = gdnative.MethodOf("Gradient\000", "get_offsets\000", 675695659)
		methodGradient[11] = gdnative.MethodOf("Gradient\000", "set_colors\000", 3546319833)
		methodGradient[12] = gdnative.MethodOf("Gradient\000", "get_colors\000", 1392750486)
		methodGradient[13] = gdnative.MethodOf("Gradient\000", "set_interpolation_mode\000", 1971444490)
		methodGradient[14] = gdnative.MethodOf("Gradient\000", "get_interpolation_mode\000", 3674172981)
		methodGradientTexture1D[0] = gdnative.MethodOf("GradientTexture1D\000", "set_gradient\000", 2756054477)
		methodGradientTexture1D[1] = gdnative.MethodOf("GradientTexture1D\000", "get_gradient\000", 132272999)
		methodGradientTexture1D[2] = gdnative.MethodOf("GradientTexture1D\000", "set_width\000", 1286410249)
		methodGradientTexture1D[3] = gdnative.MethodOf("GradientTexture1D\000", "set_use_hdr\000", 2586408642)
		methodGradientTexture1D[4] = gdnative.MethodOf("GradientTexture1D\000", "is_using_hdr\000", 36873697)
		methodGradientTexture2D[0] = gdnative.MethodOf("GradientTexture2D\000", "set_gradient\000", 2756054477)
		methodGradientTexture2D[1] = gdnative.MethodOf("GradientTexture2D\000", "get_gradient\000", 132272999)
		methodGradientTexture2D[2] = gdnative.MethodOf("GradientTexture2D\000", "set_width\000", 1286410249)
		methodGradientTexture2D[3] = gdnative.MethodOf("GradientTexture2D\000", "set_height\000", 1286410249)
		methodGradientTexture2D[4] = gdnative.MethodOf("GradientTexture2D\000", "set_use_hdr\000", 2586408642)
		methodGradientTexture2D[5] = gdnative.MethodOf("GradientTexture2D\000", "is_using_hdr\000", 36873697)
		methodGradientTexture2D[6] = gdnative.MethodOf("GradientTexture2D\000", "set_fill\000", 3623927636)
		methodGradientTexture2D[7] = gdnative.MethodOf("GradientTexture2D\000", "get_fill\000", 1876227217)
		methodGradientTexture2D[8] = gdnative.MethodOf("GradientTexture2D\000", "set_fill_from\000", 743155724)
		methodGradientTexture2D[9] = gdnative.MethodOf("GradientTexture2D\000", "get_fill_from\000", 3341600327)
		methodGradientTexture2D[10] = gdnative.MethodOf("GradientTexture2D\000", "set_fill_to\000", 743155724)
		methodGradientTexture2D[11] = gdnative.MethodOf("GradientTexture2D\000", "get_fill_to\000", 3341600327)
		methodGradientTexture2D[12] = gdnative.MethodOf("GradientTexture2D\000", "set_repeat\000", 1357597002)
		methodGradientTexture2D[13] = gdnative.MethodOf("GradientTexture2D\000", "get_repeat\000", 3351758665)
		methodGraphEdit[0] = gdnative.MethodOf("GraphEdit\000", "connect_node\000", 195065850)
		methodGraphEdit[1] = gdnative.MethodOf("GraphEdit\000", "is_node_connected\000", 4216241294)
		methodGraphEdit[2] = gdnative.MethodOf("GraphEdit\000", "disconnect_node\000", 1933654315)
		methodGraphEdit[3] = gdnative.MethodOf("GraphEdit\000", "set_connection_activity\000", 1141899943)
		methodGraphEdit[4] = gdnative.MethodOf("GraphEdit\000", "get_connection_list\000", 3995934104)
		methodGraphEdit[5] = gdnative.MethodOf("GraphEdit\000", "clear_connections\000", 3218959716)
		methodGraphEdit[6] = gdnative.MethodOf("GraphEdit\000", "force_connection_drag_end\000", 3218959716)
		methodGraphEdit[7] = gdnative.MethodOf("GraphEdit\000", "get_scroll_ofs\000", 3341600327)
		methodGraphEdit[8] = gdnative.MethodOf("GraphEdit\000", "set_scroll_ofs\000", 743155724)
		methodGraphEdit[9] = gdnative.MethodOf("GraphEdit\000", "add_valid_right_disconnect_type\000", 1286410249)
		methodGraphEdit[10] = gdnative.MethodOf("GraphEdit\000", "remove_valid_right_disconnect_type\000", 1286410249)
		methodGraphEdit[11] = gdnative.MethodOf("GraphEdit\000", "add_valid_left_disconnect_type\000", 1286410249)
		methodGraphEdit[12] = gdnative.MethodOf("GraphEdit\000", "remove_valid_left_disconnect_type\000", 1286410249)
		methodGraphEdit[13] = gdnative.MethodOf("GraphEdit\000", "add_valid_connection_type\000", 3937882851)
		methodGraphEdit[14] = gdnative.MethodOf("GraphEdit\000", "remove_valid_connection_type\000", 3937882851)
		methodGraphEdit[15] = gdnative.MethodOf("GraphEdit\000", "is_valid_connection_type\000", 2522259332)
		methodGraphEdit[16] = gdnative.MethodOf("GraphEdit\000", "get_connection_line\000", 1562168077)
		methodGraphEdit[17] = gdnative.MethodOf("GraphEdit\000", "set_panning_scheme\000", 18893313)
		methodGraphEdit[18] = gdnative.MethodOf("GraphEdit\000", "get_panning_scheme\000", 549924446)
		methodGraphEdit[19] = gdnative.MethodOf("GraphEdit\000", "set_zoom\000", 373806689)
		methodGraphEdit[20] = gdnative.MethodOf("GraphEdit\000", "get_zoom\000", 1740695150)
		methodGraphEdit[21] = gdnative.MethodOf("GraphEdit\000", "set_zoom_min\000", 373806689)
		methodGraphEdit[22] = gdnative.MethodOf("GraphEdit\000", "get_zoom_min\000", 1740695150)
		methodGraphEdit[23] = gdnative.MethodOf("GraphEdit\000", "set_zoom_max\000", 373806689)
		methodGraphEdit[24] = gdnative.MethodOf("GraphEdit\000", "get_zoom_max\000", 1740695150)
		methodGraphEdit[25] = gdnative.MethodOf("GraphEdit\000", "set_zoom_step\000", 373806689)
		methodGraphEdit[26] = gdnative.MethodOf("GraphEdit\000", "get_zoom_step\000", 1740695150)
		methodGraphEdit[27] = gdnative.MethodOf("GraphEdit\000", "set_show_zoom_label\000", 2586408642)
		methodGraphEdit[28] = gdnative.MethodOf("GraphEdit\000", "is_showing_zoom_label\000", 36873697)
		methodGraphEdit[29] = gdnative.MethodOf("GraphEdit\000", "set_snap\000", 1286410249)
		methodGraphEdit[30] = gdnative.MethodOf("GraphEdit\000", "get_snap\000", 3905245786)
		methodGraphEdit[31] = gdnative.MethodOf("GraphEdit\000", "set_use_snap\000", 2586408642)
		methodGraphEdit[32] = gdnative.MethodOf("GraphEdit\000", "is_using_snap\000", 36873697)
		methodGraphEdit[33] = gdnative.MethodOf("GraphEdit\000", "set_connection_lines_curvature\000", 373806689)
		methodGraphEdit[34] = gdnative.MethodOf("GraphEdit\000", "get_connection_lines_curvature\000", 1740695150)
		methodGraphEdit[35] = gdnative.MethodOf("GraphEdit\000", "set_connection_lines_thickness\000", 373806689)
		methodGraphEdit[36] = gdnative.MethodOf("GraphEdit\000", "get_connection_lines_thickness\000", 1740695150)
		methodGraphEdit[37] = gdnative.MethodOf("GraphEdit\000", "set_connection_lines_antialiased\000", 2586408642)
		methodGraphEdit[38] = gdnative.MethodOf("GraphEdit\000", "is_connection_lines_antialiased\000", 36873697)
		methodGraphEdit[39] = gdnative.MethodOf("GraphEdit\000", "set_minimap_size\000", 743155724)
		methodGraphEdit[40] = gdnative.MethodOf("GraphEdit\000", "get_minimap_size\000", 3341600327)
		methodGraphEdit[41] = gdnative.MethodOf("GraphEdit\000", "set_minimap_opacity\000", 373806689)
		methodGraphEdit[42] = gdnative.MethodOf("GraphEdit\000", "get_minimap_opacity\000", 1740695150)
		methodGraphEdit[43] = gdnative.MethodOf("GraphEdit\000", "set_minimap_enabled\000", 2586408642)
		methodGraphEdit[44] = gdnative.MethodOf("GraphEdit\000", "is_minimap_enabled\000", 36873697)
		methodGraphEdit[45] = gdnative.MethodOf("GraphEdit\000", "set_right_disconnects\000", 2586408642)
		methodGraphEdit[46] = gdnative.MethodOf("GraphEdit\000", "is_right_disconnects_enabled\000", 36873697)
		methodGraphEdit[47] = gdnative.MethodOf("GraphEdit\000", "get_zoom_hbox\000", 3590609951)
		methodGraphEdit[48] = gdnative.MethodOf("GraphEdit\000", "arrange_nodes\000", 3218959716)
		methodGraphEdit[49] = gdnative.MethodOf("GraphEdit\000", "set_selected\000", 1078189570)
		methodGraphNode[0] = gdnative.MethodOf("GraphNode\000", "set_title\000", 83702148)
		methodGraphNode[1] = gdnative.MethodOf("GraphNode\000", "get_title\000", 201670096)
		methodGraphNode[2] = gdnative.MethodOf("GraphNode\000", "set_text_direction\000", 119160795)
		methodGraphNode[3] = gdnative.MethodOf("GraphNode\000", "get_text_direction\000", 797257663)
		methodGraphNode[4] = gdnative.MethodOf("GraphNode\000", "set_language\000", 83702148)
		methodGraphNode[5] = gdnative.MethodOf("GraphNode\000", "get_language\000", 201670096)
		methodGraphNode[6] = gdnative.MethodOf("GraphNode\000", "set_slot\000", 902131739)
		methodGraphNode[7] = gdnative.MethodOf("GraphNode\000", "clear_slot\000", 1286410249)
		methodGraphNode[8] = gdnative.MethodOf("GraphNode\000", "clear_all_slots\000", 3218959716)
		methodGraphNode[9] = gdnative.MethodOf("GraphNode\000", "is_slot_enabled_left\000", 1116898809)
		methodGraphNode[10] = gdnative.MethodOf("GraphNode\000", "set_slot_enabled_left\000", 300928843)
		methodGraphNode[11] = gdnative.MethodOf("GraphNode\000", "set_slot_type_left\000", 3937882851)
		methodGraphNode[12] = gdnative.MethodOf("GraphNode\000", "get_slot_type_left\000", 923996154)
		methodGraphNode[13] = gdnative.MethodOf("GraphNode\000", "set_slot_color_left\000", 2878471219)
		methodGraphNode[14] = gdnative.MethodOf("GraphNode\000", "get_slot_color_left\000", 3457211756)
		methodGraphNode[15] = gdnative.MethodOf("GraphNode\000", "is_slot_enabled_right\000", 1116898809)
		methodGraphNode[16] = gdnative.MethodOf("GraphNode\000", "set_slot_enabled_right\000", 300928843)
		methodGraphNode[17] = gdnative.MethodOf("GraphNode\000", "set_slot_type_right\000", 3937882851)
		methodGraphNode[18] = gdnative.MethodOf("GraphNode\000", "get_slot_type_right\000", 923996154)
		methodGraphNode[19] = gdnative.MethodOf("GraphNode\000", "set_slot_color_right\000", 2878471219)
		methodGraphNode[20] = gdnative.MethodOf("GraphNode\000", "get_slot_color_right\000", 3457211756)
		methodGraphNode[21] = gdnative.MethodOf("GraphNode\000", "is_slot_draw_stylebox\000", 1116898809)
		methodGraphNode[22] = gdnative.MethodOf("GraphNode\000", "set_slot_draw_stylebox\000", 300928843)
		methodGraphNode[23] = gdnative.MethodOf("GraphNode\000", "set_position_offset\000", 743155724)
		methodGraphNode[24] = gdnative.MethodOf("GraphNode\000", "get_position_offset\000", 3341600327)
		methodGraphNode[25] = gdnative.MethodOf("GraphNode\000", "set_comment\000", 2586408642)
		methodGraphNode[26] = gdnative.MethodOf("GraphNode\000", "is_comment\000", 36873697)
		methodGraphNode[27] = gdnative.MethodOf("GraphNode\000", "set_resizable\000", 2586408642)
		methodGraphNode[28] = gdnative.MethodOf("GraphNode\000", "is_resizable\000", 36873697)
		methodGraphNode[29] = gdnative.MethodOf("GraphNode\000", "set_selected\000", 2586408642)
		methodGraphNode[30] = gdnative.MethodOf("GraphNode\000", "is_selected\000", 2240911060)
		methodGraphNode[31] = gdnative.MethodOf("GraphNode\000", "get_connection_input_count\000", 2455072627)
		methodGraphNode[32] = gdnative.MethodOf("GraphNode\000", "get_connection_input_height\000", 3744713108)
		methodGraphNode[33] = gdnative.MethodOf("GraphNode\000", "get_connection_input_position\000", 3114997196)
		methodGraphNode[34] = gdnative.MethodOf("GraphNode\000", "get_connection_input_type\000", 3744713108)
		methodGraphNode[35] = gdnative.MethodOf("GraphNode\000", "get_connection_input_color\000", 2624840992)
		methodGraphNode[36] = gdnative.MethodOf("GraphNode\000", "get_connection_output_count\000", 2455072627)
		methodGraphNode[37] = gdnative.MethodOf("GraphNode\000", "get_connection_output_height\000", 3744713108)
		methodGraphNode[38] = gdnative.MethodOf("GraphNode\000", "get_connection_output_position\000", 3114997196)
		methodGraphNode[39] = gdnative.MethodOf("GraphNode\000", "get_connection_output_type\000", 3744713108)
		methodGraphNode[40] = gdnative.MethodOf("GraphNode\000", "get_connection_output_color\000", 2624840992)
		methodGraphNode[41] = gdnative.MethodOf("GraphNode\000", "set_show_close_button\000", 2586408642)
		methodGraphNode[42] = gdnative.MethodOf("GraphNode\000", "is_close_button_visible\000", 36873697)
		methodGraphNode[43] = gdnative.MethodOf("GraphNode\000", "set_overlay\000", 3144190109)
		methodGraphNode[44] = gdnative.MethodOf("GraphNode\000", "get_overlay\000", 2854257040)
		methodGridContainer[0] = gdnative.MethodOf("GridContainer\000", "set_columns\000", 1286410249)
		methodGridContainer[1] = gdnative.MethodOf("GridContainer\000", "get_columns\000", 3905245786)
		methodGridMap[0] = gdnative.MethodOf("GridMap\000", "set_collision_layer\000", 1286410249)
		methodGridMap[1] = gdnative.MethodOf("GridMap\000", "get_collision_layer\000", 3905245786)
		methodGridMap[2] = gdnative.MethodOf("GridMap\000", "set_collision_mask\000", 1286410249)
		methodGridMap[3] = gdnative.MethodOf("GridMap\000", "get_collision_mask\000", 3905245786)
		methodGridMap[4] = gdnative.MethodOf("GridMap\000", "set_collision_mask_value\000", 300928843)
		methodGridMap[5] = gdnative.MethodOf("GridMap\000", "get_collision_mask_value\000", 1116898809)
		methodGridMap[6] = gdnative.MethodOf("GridMap\000", "set_collision_layer_value\000", 300928843)
		methodGridMap[7] = gdnative.MethodOf("GridMap\000", "get_collision_layer_value\000", 1116898809)
		methodGridMap[8] = gdnative.MethodOf("GridMap\000", "set_physics_material\000", 1784508650)
		methodGridMap[9] = gdnative.MethodOf("GridMap\000", "get_physics_material\000", 2521850424)
		methodGridMap[10] = gdnative.MethodOf("GridMap\000", "set_bake_navigation\000", 2586408642)
		methodGridMap[11] = gdnative.MethodOf("GridMap\000", "is_baking_navigation\000", 2240911060)
		methodGridMap[12] = gdnative.MethodOf("GridMap\000", "set_navigation_layers\000", 1286410249)
		methodGridMap[13] = gdnative.MethodOf("GridMap\000", "get_navigation_layers\000", 3905245786)
		methodGridMap[14] = gdnative.MethodOf("GridMap\000", "set_navigation_layer_value\000", 300928843)
		methodGridMap[15] = gdnative.MethodOf("GridMap\000", "get_navigation_layer_value\000", 1116898809)
		methodGridMap[16] = gdnative.MethodOf("GridMap\000", "set_mesh_library\000", 1488083439)
		methodGridMap[17] = gdnative.MethodOf("GridMap\000", "get_mesh_library\000", 3350993772)
		methodGridMap[18] = gdnative.MethodOf("GridMap\000", "set_cell_size\000", 3460891852)
		methodGridMap[19] = gdnative.MethodOf("GridMap\000", "get_cell_size\000", 3360562783)
		methodGridMap[20] = gdnative.MethodOf("GridMap\000", "set_cell_scale\000", 373806689)
		methodGridMap[21] = gdnative.MethodOf("GridMap\000", "get_cell_scale\000", 1740695150)
		methodGridMap[22] = gdnative.MethodOf("GridMap\000", "set_octant_size\000", 1286410249)
		methodGridMap[23] = gdnative.MethodOf("GridMap\000", "get_octant_size\000", 3905245786)
		methodGridMap[24] = gdnative.MethodOf("GridMap\000", "set_cell_item\000", 4177201334)
		methodGridMap[25] = gdnative.MethodOf("GridMap\000", "get_cell_item\000", 3724960147)
		methodGridMap[26] = gdnative.MethodOf("GridMap\000", "get_cell_item_orientation\000", 3724960147)
		methodGridMap[27] = gdnative.MethodOf("GridMap\000", "world_to_map\000", 1257687843)
		methodGridMap[28] = gdnative.MethodOf("GridMap\000", "map_to_world\000", 1088329196)
		methodGridMap[29] = gdnative.MethodOf("GridMap\000", "resource_changed\000", 968641751)
		methodGridMap[30] = gdnative.MethodOf("GridMap\000", "set_center_x\000", 2586408642)
		methodGridMap[31] = gdnative.MethodOf("GridMap\000", "get_center_x\000", 36873697)
		methodGridMap[32] = gdnative.MethodOf("GridMap\000", "set_center_y\000", 2586408642)
		methodGridMap[33] = gdnative.MethodOf("GridMap\000", "get_center_y\000", 36873697)
		methodGridMap[34] = gdnative.MethodOf("GridMap\000", "set_center_z\000", 2586408642)
		methodGridMap[35] = gdnative.MethodOf("GridMap\000", "get_center_z\000", 36873697)
		methodGridMap[36] = gdnative.MethodOf("GridMap\000", "clear\000", 3218959716)
		methodGridMap[37] = gdnative.MethodOf("GridMap\000", "get_used_cells\000", 3995934104)
		methodGridMap[38] = gdnative.MethodOf("GridMap\000", "get_used_cells_by_item\000", 663333327)
		methodGridMap[39] = gdnative.MethodOf("GridMap\000", "get_meshes\000", 3995934104)
		methodGridMap[40] = gdnative.MethodOf("GridMap\000", "get_bake_meshes\000", 2915620761)
		methodGridMap[41] = gdnative.MethodOf("GridMap\000", "get_bake_mesh_instance\000", 937000113)
		methodGridMap[42] = gdnative.MethodOf("GridMap\000", "clear_baked_meshes\000", 3218959716)
		methodGridMap[43] = gdnative.MethodOf("GridMap\000", "make_baked_meshes\000", 1135556294)
		methodGrooveJoint2D[0] = gdnative.MethodOf("GrooveJoint2D\000", "set_length\000", 373806689)
		methodGrooveJoint2D[1] = gdnative.MethodOf("GrooveJoint2D\000", "get_length\000", 1740695150)
		methodGrooveJoint2D[2] = gdnative.MethodOf("GrooveJoint2D\000", "set_initial_offset\000", 373806689)
		methodGrooveJoint2D[3] = gdnative.MethodOf("GrooveJoint2D\000", "get_initial_offset\000", 1740695150)
		methodHMACContext[0] = gdnative.MethodOf("HMACContext\000", "start\000", 3537364598)
		methodHMACContext[1] = gdnative.MethodOf("HMACContext\000", "update\000", 680677267)
		methodHMACContext[2] = gdnative.MethodOf("HMACContext\000", "finish\000", 2115431945)
		methodHTTPClient[0] = gdnative.MethodOf("HTTPClient\000", "connect_to_host\000", 2602796911)
		methodHTTPClient[1] = gdnative.MethodOf("HTTPClient\000", "set_connection\000", 3281897016)
		methodHTTPClient[2] = gdnative.MethodOf("HTTPClient\000", "get_connection\000", 2741655269)
		methodHTTPClient[3] = gdnative.MethodOf("HTTPClient\000", "request_raw\000", 540161961)
		methodHTTPClient[4] = gdnative.MethodOf("HTTPClient\000", "request\000", 3249905507)
		methodHTTPClient[5] = gdnative.MethodOf("HTTPClient\000", "close\000", 3218959716)
		methodHTTPClient[6] = gdnative.MethodOf("HTTPClient\000", "has_response\000", 36873697)
		methodHTTPClient[7] = gdnative.MethodOf("HTTPClient\000", "is_response_chunked\000", 36873697)
		methodHTTPClient[8] = gdnative.MethodOf("HTTPClient\000", "get_response_code\000", 3905245786)
		methodHTTPClient[9] = gdnative.MethodOf("HTTPClient\000", "get_response_headers\000", 2981934095)
		methodHTTPClient[10] = gdnative.MethodOf("HTTPClient\000", "get_response_headers_as_dictionary\000", 2382534195)
		methodHTTPClient[11] = gdnative.MethodOf("HTTPClient\000", "get_response_body_length\000", 3905245786)
		methodHTTPClient[12] = gdnative.MethodOf("HTTPClient\000", "read_response_body_chunk\000", 2115431945)
		methodHTTPClient[13] = gdnative.MethodOf("HTTPClient\000", "set_read_chunk_size\000", 1286410249)
		methodHTTPClient[14] = gdnative.MethodOf("HTTPClient\000", "get_read_chunk_size\000", 3905245786)
		methodHTTPClient[15] = gdnative.MethodOf("HTTPClient\000", "set_blocking_mode\000", 2586408642)
		methodHTTPClient[16] = gdnative.MethodOf("HTTPClient\000", "is_blocking_mode_enabled\000", 36873697)
		methodHTTPClient[17] = gdnative.MethodOf("HTTPClient\000", "get_status\000", 1426656811)
		methodHTTPClient[18] = gdnative.MethodOf("HTTPClient\000", "poll\000", 166280745)
		methodHTTPClient[19] = gdnative.MethodOf("HTTPClient\000", "set_http_proxy\000", 2956805083)
		methodHTTPClient[20] = gdnative.MethodOf("HTTPClient\000", "set_https_proxy\000", 2956805083)
		methodHTTPClient[21] = gdnative.MethodOf("HTTPClient\000", "query_string_from_dict\000", 2538086567)
		methodHTTPRequest[0] = gdnative.MethodOf("HTTPRequest\000", "request\000", 1899023990)
		methodHTTPRequest[1] = gdnative.MethodOf("HTTPRequest\000", "request_raw\000", 3236422912)
		methodHTTPRequest[2] = gdnative.MethodOf("HTTPRequest\000", "cancel_request\000", 3218959716)
		methodHTTPRequest[3] = gdnative.MethodOf("HTTPRequest\000", "get_http_client_status\000", 1426656811)
		methodHTTPRequest[4] = gdnative.MethodOf("HTTPRequest\000", "set_use_threads\000", 2586408642)
		methodHTTPRequest[5] = gdnative.MethodOf("HTTPRequest\000", "is_using_threads\000", 36873697)
		methodHTTPRequest[6] = gdnative.MethodOf("HTTPRequest\000", "set_accept_gzip\000", 2586408642)
		methodHTTPRequest[7] = gdnative.MethodOf("HTTPRequest\000", "is_accepting_gzip\000", 36873697)
		methodHTTPRequest[8] = gdnative.MethodOf("HTTPRequest\000", "set_body_size_limit\000", 1286410249)
		methodHTTPRequest[9] = gdnative.MethodOf("HTTPRequest\000", "get_body_size_limit\000", 3905245786)
		methodHTTPRequest[10] = gdnative.MethodOf("HTTPRequest\000", "set_max_redirects\000", 1286410249)
		methodHTTPRequest[11] = gdnative.MethodOf("HTTPRequest\000", "get_max_redirects\000", 3905245786)
		methodHTTPRequest[12] = gdnative.MethodOf("HTTPRequest\000", "set_download_file\000", 83702148)
		methodHTTPRequest[13] = gdnative.MethodOf("HTTPRequest\000", "get_download_file\000", 201670096)
		methodHTTPRequest[14] = gdnative.MethodOf("HTTPRequest\000", "get_downloaded_bytes\000", 3905245786)
		methodHTTPRequest[15] = gdnative.MethodOf("HTTPRequest\000", "get_body_size\000", 3905245786)
		methodHTTPRequest[16] = gdnative.MethodOf("HTTPRequest\000", "set_timeout\000", 373806689)
		methodHTTPRequest[17] = gdnative.MethodOf("HTTPRequest\000", "get_timeout\000", 191475506)
		methodHTTPRequest[18] = gdnative.MethodOf("HTTPRequest\000", "set_download_chunk_size\000", 1286410249)
		methodHTTPRequest[19] = gdnative.MethodOf("HTTPRequest\000", "get_download_chunk_size\000", 3905245786)
		methodHTTPRequest[20] = gdnative.MethodOf("HTTPRequest\000", "set_http_proxy\000", 2956805083)
		methodHTTPRequest[21] = gdnative.MethodOf("HTTPRequest\000", "set_https_proxy\000", 2956805083)
		methodHashingContext[0] = gdnative.MethodOf("HashingContext\000", "start\000", 3940338335)
		methodHashingContext[1] = gdnative.MethodOf("HashingContext\000", "update\000", 680677267)
		methodHashingContext[2] = gdnative.MethodOf("HashingContext\000", "finish\000", 2115431945)
		methodHeightMapShape3D[0] = gdnative.MethodOf("HeightMapShape3D\000", "set_map_width\000", 1286410249)
		methodHeightMapShape3D[1] = gdnative.MethodOf("HeightMapShape3D\000", "get_map_width\000", 3905245786)
		methodHeightMapShape3D[2] = gdnative.MethodOf("HeightMapShape3D\000", "set_map_depth\000", 1286410249)
		methodHeightMapShape3D[3] = gdnative.MethodOf("HeightMapShape3D\000", "get_map_depth\000", 3905245786)
		methodHeightMapShape3D[4] = gdnative.MethodOf("HeightMapShape3D\000", "set_map_data\000", 2899603908)
		methodHeightMapShape3D[5] = gdnative.MethodOf("HeightMapShape3D\000", "get_map_data\000", 675695659)
		methodHingeJoint3D[0] = gdnative.MethodOf("HingeJoint3D\000", "set_param\000", 3082977519)
		methodHingeJoint3D[1] = gdnative.MethodOf("HingeJoint3D\000", "get_param\000", 4066002676)
		methodHingeJoint3D[2] = gdnative.MethodOf("HingeJoint3D\000", "set_flag\000", 1083494620)
		methodHingeJoint3D[3] = gdnative.MethodOf("HingeJoint3D\000", "get_flag\000", 2841369610)
		methodIP[0] = gdnative.MethodOf("IP\000", "resolve_hostname\000", 396864159)
		methodIP[1] = gdnative.MethodOf("IP\000", "resolve_hostname_addresses\000", 500071499)
		methodIP[2] = gdnative.MethodOf("IP\000", "resolve_hostname_queue_item\000", 3936392508)
		methodIP[3] = gdnative.MethodOf("IP\000", "get_resolve_item_status\000", 3812250196)
		methodIP[4] = gdnative.MethodOf("IP\000", "get_resolve_item_address\000", 844755477)
		methodIP[5] = gdnative.MethodOf("IP\000", "get_resolve_item_addresses\000", 663333327)
		methodIP[6] = gdnative.MethodOf("IP\000", "erase_resolve_item\000", 1286410249)
		methodIP[7] = gdnative.MethodOf("IP\000", "get_local_addresses\000", 3995934104)
		methodIP[8] = gdnative.MethodOf("IP\000", "get_local_interfaces\000", 3995934104)
		methodIP[9] = gdnative.MethodOf("IP\000", "clear_cache\000", 3005725572)
		methodImage[0] = gdnative.MethodOf("Image\000", "get_width\000", 3905245786)
		methodImage[1] = gdnative.MethodOf("Image\000", "get_height\000", 3905245786)
		methodImage[2] = gdnative.MethodOf("Image\000", "get_size\000", 3690982128)
		methodImage[3] = gdnative.MethodOf("Image\000", "has_mipmaps\000", 36873697)
		methodImage[4] = gdnative.MethodOf("Image\000", "get_format\000", 3847873762)
		methodImage[5] = gdnative.MethodOf("Image\000", "get_data\000", 2362200018)
		methodImage[6] = gdnative.MethodOf("Image\000", "convert\000", 2120693146)
		methodImage[7] = gdnative.MethodOf("Image\000", "get_mipmap_offset\000", 923996154)
		methodImage[8] = gdnative.MethodOf("Image\000", "resize_to_po2\000", 4189212329)
		methodImage[9] = gdnative.MethodOf("Image\000", "resize\000", 2461393748)
		methodImage[10] = gdnative.MethodOf("Image\000", "shrink_x2\000", 3218959716)
		methodImage[11] = gdnative.MethodOf("Image\000", "crop\000", 3937882851)
		methodImage[12] = gdnative.MethodOf("Image\000", "flip_x\000", 3218959716)
		methodImage[13] = gdnative.MethodOf("Image\000", "flip_y\000", 3218959716)
		methodImage[14] = gdnative.MethodOf("Image\000", "generate_mipmaps\000", 1633102583)
		methodImage[15] = gdnative.MethodOf("Image\000", "clear_mipmaps\000", 3218959716)
		methodImage[16] = gdnative.MethodOf("Image\000", "create\000", 2904688759)
		methodImage[17] = gdnative.MethodOf("Image\000", "create_from_data\000", 2740482212)
		methodImage[18] = gdnative.MethodOf("Image\000", "is_empty\000", 36873697)
		methodImage[19] = gdnative.MethodOf("Image\000", "load\000", 166001499)
		methodImage[20] = gdnative.MethodOf("Image\000", "load_from_file\000", 736337515)
		methodImage[21] = gdnative.MethodOf("Image\000", "save_png\000", 2113323047)
		methodImage[22] = gdnative.MethodOf("Image\000", "save_png_to_buffer\000", 2362200018)
		methodImage[23] = gdnative.MethodOf("Image\000", "save_jpg\000", 578836491)
		methodImage[24] = gdnative.MethodOf("Image\000", "save_jpg_to_buffer\000", 310747435)
		methodImage[25] = gdnative.MethodOf("Image\000", "save_exr\000", 3108122999)
		methodImage[26] = gdnative.MethodOf("Image\000", "save_exr_to_buffer\000", 3178917920)
		methodImage[27] = gdnative.MethodOf("Image\000", "save_webp\000", 3594949219)
		methodImage[28] = gdnative.MethodOf("Image\000", "save_webp_to_buffer\000", 1235769281)
		methodImage[29] = gdnative.MethodOf("Image\000", "detect_alpha\000", 2030116505)
		methodImage[30] = gdnative.MethodOf("Image\000", "is_invisible\000", 36873697)
		methodImage[31] = gdnative.MethodOf("Image\000", "detect_used_channels\000", 2703139984)
		methodImage[32] = gdnative.MethodOf("Image\000", "compress\000", 2521880595)
		methodImage[33] = gdnative.MethodOf("Image\000", "compress_from_channels\000", 1815281629)
		methodImage[34] = gdnative.MethodOf("Image\000", "decompress\000", 166280745)
		methodImage[35] = gdnative.MethodOf("Image\000", "is_compressed\000", 36873697)
		methodImage[36] = gdnative.MethodOf("Image\000", "rotate_90\000", 1901204267)
		methodImage[37] = gdnative.MethodOf("Image\000", "rotate_180\000", 3218959716)
		methodImage[38] = gdnative.MethodOf("Image\000", "fix_alpha_edges\000", 3218959716)
		methodImage[39] = gdnative.MethodOf("Image\000", "premultiply_alpha\000", 3218959716)
		methodImage[40] = gdnative.MethodOf("Image\000", "srgb_to_linear\000", 3218959716)
		methodImage[41] = gdnative.MethodOf("Image\000", "normal_map_to_xy\000", 3218959716)
		methodImage[42] = gdnative.MethodOf("Image\000", "rgbe_to_srgb\000", 564927088)
		methodImage[43] = gdnative.MethodOf("Image\000", "bump_map_to_normal_map\000", 336773324)
		methodImage[44] = gdnative.MethodOf("Image\000", "compute_image_metrics\000", 3080961247)
		methodImage[45] = gdnative.MethodOf("Image\000", "blit_rect\000", 2903928755)
		methodImage[46] = gdnative.MethodOf("Image\000", "blit_rect_mask\000", 3383581145)
		methodImage[47] = gdnative.MethodOf("Image\000", "blend_rect\000", 2903928755)
		methodImage[48] = gdnative.MethodOf("Image\000", "blend_rect_mask\000", 3383581145)
		methodImage[49] = gdnative.MethodOf("Image\000", "fill\000", 2920490490)
		methodImage[50] = gdnative.MethodOf("Image\000", "fill_rect\000", 514693913)
		methodImage[51] = gdnative.MethodOf("Image\000", "get_used_rect\000", 410525958)
		methodImage[52] = gdnative.MethodOf("Image\000", "get_rect\000", 2601441065)
		methodImage[53] = gdnative.MethodOf("Image\000", "copy_from\000", 532598488)
		methodImage[54] = gdnative.MethodOf("Image\000", "get_pixelv\000", 1532707496)
		methodImage[55] = gdnative.MethodOf("Image\000", "get_pixel\000", 2165839948)
		methodImage[56] = gdnative.MethodOf("Image\000", "set_pixelv\000", 287851464)
		methodImage[57] = gdnative.MethodOf("Image\000", "set_pixel\000", 3733378741)
		methodImage[58] = gdnative.MethodOf("Image\000", "adjust_bcs\000", 2385087082)
		methodImage[59] = gdnative.MethodOf("Image\000", "load_png_from_buffer\000", 680677267)
		methodImage[60] = gdnative.MethodOf("Image\000", "load_jpg_from_buffer\000", 680677267)
		methodImage[61] = gdnative.MethodOf("Image\000", "load_webp_from_buffer\000", 680677267)
		methodImage[62] = gdnative.MethodOf("Image\000", "load_tga_from_buffer\000", 680677267)
		methodImage[63] = gdnative.MethodOf("Image\000", "load_bmp_from_buffer\000", 680677267)
		methodImageTexture[0] = gdnative.MethodOf("ImageTexture\000", "create_from_image\000", 2775144163)
		methodImageTexture[1] = gdnative.MethodOf("ImageTexture\000", "get_format\000", 3847873762)
		methodImageTexture[2] = gdnative.MethodOf("ImageTexture\000", "set_image\000", 532598488)
		methodImageTexture[3] = gdnative.MethodOf("ImageTexture\000", "update\000", 532598488)
		methodImageTexture[4] = gdnative.MethodOf("ImageTexture\000", "set_size_override\000", 1130785943)
		methodImageTexture3D[0] = gdnative.MethodOf("ImageTexture3D\000", "create\000", 1130379827)
		methodImageTexture3D[1] = gdnative.MethodOf("ImageTexture3D\000", "update\000", 381264803)
		methodImageTextureLayered[0] = gdnative.MethodOf("ImageTextureLayered\000", "create_from_images\000", 2785773503)
		methodImageTextureLayered[1] = gdnative.MethodOf("ImageTextureLayered\000", "update_layer\000", 3331733361)
		methodImmediateMesh[0] = gdnative.MethodOf("ImmediateMesh\000", "surface_begin\000", 3716480242)
		methodImmediateMesh[1] = gdnative.MethodOf("ImmediateMesh\000", "surface_set_color\000", 2920490490)
		methodImmediateMesh[2] = gdnative.MethodOf("ImmediateMesh\000", "surface_set_normal\000", 3460891852)
		methodImmediateMesh[3] = gdnative.MethodOf("ImmediateMesh\000", "surface_set_tangent\000", 3505987427)
		methodImmediateMesh[4] = gdnative.MethodOf("ImmediateMesh\000", "surface_set_uv\000", 743155724)
		methodImmediateMesh[5] = gdnative.MethodOf("ImmediateMesh\000", "surface_set_uv2\000", 743155724)
		methodImmediateMesh[6] = gdnative.MethodOf("ImmediateMesh\000", "surface_add_vertex\000", 3460891852)
		methodImmediateMesh[7] = gdnative.MethodOf("ImmediateMesh\000", "surface_add_vertex_2d\000", 743155724)
		methodImmediateMesh[8] = gdnative.MethodOf("ImmediateMesh\000", "surface_end\000", 3218959716)
		methodImmediateMesh[9] = gdnative.MethodOf("ImmediateMesh\000", "clear_surfaces\000", 3218959716)
		methodImporterMesh[0] = gdnative.MethodOf("ImporterMesh\000", "add_blend_shape\000", 83702148)
		methodImporterMesh[1] = gdnative.MethodOf("ImporterMesh\000", "get_blend_shape_count\000", 3905245786)
		methodImporterMesh[2] = gdnative.MethodOf("ImporterMesh\000", "get_blend_shape_name\000", 844755477)
		methodImporterMesh[3] = gdnative.MethodOf("ImporterMesh\000", "set_blend_shape_mode\000", 227983991)
		methodImporterMesh[4] = gdnative.MethodOf("ImporterMesh\000", "get_blend_shape_mode\000", 836485024)
		methodImporterMesh[5] = gdnative.MethodOf("ImporterMesh\000", "add_surface\000", 4122361985)
		methodImporterMesh[6] = gdnative.MethodOf("ImporterMesh\000", "get_surface_count\000", 3905245786)
		methodImporterMesh[7] = gdnative.MethodOf("ImporterMesh\000", "get_surface_primitive_type\000", 3552571330)
		methodImporterMesh[8] = gdnative.MethodOf("ImporterMesh\000", "get_surface_name\000", 844755477)
		methodImporterMesh[9] = gdnative.MethodOf("ImporterMesh\000", "get_surface_arrays\000", 663333327)
		methodImporterMesh[10] = gdnative.MethodOf("ImporterMesh\000", "get_surface_blend_shape_arrays\000", 2345056839)
		methodImporterMesh[11] = gdnative.MethodOf("ImporterMesh\000", "get_surface_lod_count\000", 923996154)
		methodImporterMesh[12] = gdnative.MethodOf("ImporterMesh\000", "get_surface_lod_size\000", 3085491603)
		methodImporterMesh[13] = gdnative.MethodOf("ImporterMesh\000", "get_surface_lod_indices\000", 1265128013)
		methodImporterMesh[14] = gdnative.MethodOf("ImporterMesh\000", "get_surface_material\000", 2897466400)
		methodImporterMesh[15] = gdnative.MethodOf("ImporterMesh\000", "get_surface_format\000", 923996154)
		methodImporterMesh[16] = gdnative.MethodOf("ImporterMesh\000", "set_surface_name\000", 501894301)
		methodImporterMesh[17] = gdnative.MethodOf("ImporterMesh\000", "set_surface_material\000", 3671737478)
		methodImporterMesh[18] = gdnative.MethodOf("ImporterMesh\000", "generate_lods\000", 1017552074)
		methodImporterMesh[19] = gdnative.MethodOf("ImporterMesh\000", "get_mesh\000", 1457573577)
		methodImporterMesh[20] = gdnative.MethodOf("ImporterMesh\000", "clear\000", 3218959716)
		methodImporterMesh[21] = gdnative.MethodOf("ImporterMesh\000", "set_lightmap_size_hint\000", 1130785943)
		methodImporterMesh[22] = gdnative.MethodOf("ImporterMesh\000", "get_lightmap_size_hint\000", 3690982128)
		methodImporterMeshInstance3D[0] = gdnative.MethodOf("ImporterMeshInstance3D\000", "set_mesh\000", 2255166972)
		methodImporterMeshInstance3D[1] = gdnative.MethodOf("ImporterMeshInstance3D\000", "get_mesh\000", 3161779525)
		methodImporterMeshInstance3D[2] = gdnative.MethodOf("ImporterMeshInstance3D\000", "set_skin\000", 3971435618)
		methodImporterMeshInstance3D[3] = gdnative.MethodOf("ImporterMeshInstance3D\000", "get_skin\000", 2074563878)
		methodImporterMeshInstance3D[4] = gdnative.MethodOf("ImporterMeshInstance3D\000", "set_skeleton_path\000", 1348162250)
		methodImporterMeshInstance3D[5] = gdnative.MethodOf("ImporterMeshInstance3D\000", "get_skeleton_path\000", 4075236667)
		methodInput[0] = gdnative.MethodOf("Input\000", "is_anything_pressed\000", 36873697)
		methodInput[1] = gdnative.MethodOf("Input\000", "is_key_pressed\000", 1938909964)
		methodInput[2] = gdnative.MethodOf("Input\000", "is_physical_key_pressed\000", 1938909964)
		methodInput[3] = gdnative.MethodOf("Input\000", "is_mouse_button_pressed\000", 1821097125)
		methodInput[4] = gdnative.MethodOf("Input\000", "is_joy_button_pressed\000", 787208542)
		methodInput[5] = gdnative.MethodOf("Input\000", "is_action_pressed\000", 1558498928)
		methodInput[6] = gdnative.MethodOf("Input\000", "is_action_just_pressed\000", 1558498928)
		methodInput[7] = gdnative.MethodOf("Input\000", "is_action_just_released\000", 1558498928)
		methodInput[8] = gdnative.MethodOf("Input\000", "get_action_strength\000", 801543509)
		methodInput[9] = gdnative.MethodOf("Input\000", "get_action_raw_strength\000", 801543509)
		methodInput[10] = gdnative.MethodOf("Input\000", "get_axis\000", 1958752504)
		methodInput[11] = gdnative.MethodOf("Input\000", "get_vector\000", 1517139831)
		methodInput[12] = gdnative.MethodOf("Input\000", "add_joy_mapping\000", 1168363258)
		methodInput[13] = gdnative.MethodOf("Input\000", "remove_joy_mapping\000", 83702148)
		methodInput[14] = gdnative.MethodOf("Input\000", "is_joy_known\000", 3067735520)
		methodInput[15] = gdnative.MethodOf("Input\000", "get_joy_axis\000", 4063175957)
		methodInput[16] = gdnative.MethodOf("Input\000", "get_joy_name\000", 990163283)
		methodInput[17] = gdnative.MethodOf("Input\000", "get_joy_guid\000", 844755477)
		methodInput[18] = gdnative.MethodOf("Input\000", "get_connected_joypads\000", 2915620761)
		methodInput[19] = gdnative.MethodOf("Input\000", "get_joy_vibration_strength\000", 3114997196)
		methodInput[20] = gdnative.MethodOf("Input\000", "get_joy_vibration_duration\000", 4025615559)
		methodInput[21] = gdnative.MethodOf("Input\000", "start_joy_vibration\000", 1890603622)
		methodInput[22] = gdnative.MethodOf("Input\000", "stop_joy_vibration\000", 1286410249)
		methodInput[23] = gdnative.MethodOf("Input\000", "vibrate_handheld\000", 955504365)
		methodInput[24] = gdnative.MethodOf("Input\000", "get_gravity\000", 3360562783)
		methodInput[25] = gdnative.MethodOf("Input\000", "get_accelerometer\000", 3360562783)
		methodInput[26] = gdnative.MethodOf("Input\000", "get_magnetometer\000", 3360562783)
		methodInput[27] = gdnative.MethodOf("Input\000", "get_gyroscope\000", 3360562783)
		methodInput[28] = gdnative.MethodOf("Input\000", "set_gravity\000", 3460891852)
		methodInput[29] = gdnative.MethodOf("Input\000", "set_accelerometer\000", 3460891852)
		methodInput[30] = gdnative.MethodOf("Input\000", "set_magnetometer\000", 3460891852)
		methodInput[31] = gdnative.MethodOf("Input\000", "set_gyroscope\000", 3460891852)
		methodInput[32] = gdnative.MethodOf("Input\000", "get_last_mouse_velocity\000", 1497962370)
		methodInput[33] = gdnative.MethodOf("Input\000", "get_mouse_button_mask\000", 1132662608)
		methodInput[34] = gdnative.MethodOf("Input\000", "set_mouse_mode\000", 2228490894)
		methodInput[35] = gdnative.MethodOf("Input\000", "get_mouse_mode\000", 965286182)
		methodInput[36] = gdnative.MethodOf("Input\000", "warp_mouse\000", 743155724)
		methodInput[37] = gdnative.MethodOf("Input\000", "action_press\000", 573731101)
		methodInput[38] = gdnative.MethodOf("Input\000", "action_release\000", 3304788590)
		methodInput[39] = gdnative.MethodOf("Input\000", "set_default_cursor_shape\000", 2124816902)
		methodInput[40] = gdnative.MethodOf("Input\000", "get_current_cursor_shape\000", 3455658929)
		methodInput[41] = gdnative.MethodOf("Input\000", "set_custom_mouse_cursor\000", 3489634142)
		methodInput[42] = gdnative.MethodOf("Input\000", "parse_input_event\000", 3754044979)
		methodInput[43] = gdnative.MethodOf("Input\000", "set_use_accumulated_input\000", 2586408642)
		methodInput[44] = gdnative.MethodOf("Input\000", "is_using_accumulated_input\000", 2240911060)
		methodInput[45] = gdnative.MethodOf("Input\000", "flush_buffered_events\000", 3218959716)
		methodInputEvent[0] = gdnative.MethodOf("InputEvent\000", "set_device\000", 1286410249)
		methodInputEvent[1] = gdnative.MethodOf("InputEvent\000", "get_device\000", 3905245786)
		methodInputEvent[2] = gdnative.MethodOf("InputEvent\000", "is_action\000", 1558498928)
		methodInputEvent[3] = gdnative.MethodOf("InputEvent\000", "is_action_pressed\000", 1631499404)
		methodInputEvent[4] = gdnative.MethodOf("InputEvent\000", "is_action_released\000", 1558498928)
		methodInputEvent[5] = gdnative.MethodOf("InputEvent\000", "get_action_strength\000", 801543509)
		methodInputEvent[6] = gdnative.MethodOf("InputEvent\000", "is_pressed\000", 36873697)
		methodInputEvent[7] = gdnative.MethodOf("InputEvent\000", "is_echo\000", 36873697)
		methodInputEvent[8] = gdnative.MethodOf("InputEvent\000", "as_text\000", 201670096)
		methodInputEvent[9] = gdnative.MethodOf("InputEvent\000", "is_match\000", 3392494811)
		methodInputEvent[10] = gdnative.MethodOf("InputEvent\000", "is_action_type\000", 36873697)
		methodInputEvent[11] = gdnative.MethodOf("InputEvent\000", "accumulate\000", 1062211774)
		methodInputEvent[12] = gdnative.MethodOf("InputEvent\000", "xformed_by\000", 2747409789)
		methodInputEventAction[0] = gdnative.MethodOf("InputEventAction\000", "set_action\000", 3304788590)
		methodInputEventAction[1] = gdnative.MethodOf("InputEventAction\000", "get_action\000", 2002593661)
		methodInputEventAction[2] = gdnative.MethodOf("InputEventAction\000", "set_pressed\000", 2586408642)
		methodInputEventAction[3] = gdnative.MethodOf("InputEventAction\000", "set_strength\000", 373806689)
		methodInputEventAction[4] = gdnative.MethodOf("InputEventAction\000", "get_strength\000", 1740695150)
		methodInputEventFromWindow[0] = gdnative.MethodOf("InputEventFromWindow\000", "set_window_id\000", 1286410249)
		methodInputEventFromWindow[1] = gdnative.MethodOf("InputEventFromWindow\000", "get_window_id\000", 3905245786)
		methodInputEventGesture[0] = gdnative.MethodOf("InputEventGesture\000", "set_position\000", 743155724)
		methodInputEventGesture[1] = gdnative.MethodOf("InputEventGesture\000", "get_position\000", 3341600327)
		methodInputEventJoypadButton[0] = gdnative.MethodOf("InputEventJoypadButton\000", "set_button_index\000", 1466368136)
		methodInputEventJoypadButton[1] = gdnative.MethodOf("InputEventJoypadButton\000", "get_button_index\000", 595588182)
		methodInputEventJoypadButton[2] = gdnative.MethodOf("InputEventJoypadButton\000", "set_pressure\000", 373806689)
		methodInputEventJoypadButton[3] = gdnative.MethodOf("InputEventJoypadButton\000", "get_pressure\000", 1740695150)
		methodInputEventJoypadButton[4] = gdnative.MethodOf("InputEventJoypadButton\000", "set_pressed\000", 2586408642)
		methodInputEventJoypadMotion[0] = gdnative.MethodOf("InputEventJoypadMotion\000", "set_axis\000", 1332685170)
		methodInputEventJoypadMotion[1] = gdnative.MethodOf("InputEventJoypadMotion\000", "get_axis\000", 4019121683)
		methodInputEventJoypadMotion[2] = gdnative.MethodOf("InputEventJoypadMotion\000", "set_axis_value\000", 373806689)
		methodInputEventJoypadMotion[3] = gdnative.MethodOf("InputEventJoypadMotion\000", "get_axis_value\000", 1740695150)
		methodInputEventKey[0] = gdnative.MethodOf("InputEventKey\000", "set_pressed\000", 2586408642)
		methodInputEventKey[1] = gdnative.MethodOf("InputEventKey\000", "set_keycode\000", 888074362)
		methodInputEventKey[2] = gdnative.MethodOf("InputEventKey\000", "get_keycode\000", 1585896689)
		methodInputEventKey[3] = gdnative.MethodOf("InputEventKey\000", "set_physical_keycode\000", 888074362)
		methodInputEventKey[4] = gdnative.MethodOf("InputEventKey\000", "get_physical_keycode\000", 1585896689)
		methodInputEventKey[5] = gdnative.MethodOf("InputEventKey\000", "set_unicode\000", 1286410249)
		methodInputEventKey[6] = gdnative.MethodOf("InputEventKey\000", "get_unicode\000", 3905245786)
		methodInputEventKey[7] = gdnative.MethodOf("InputEventKey\000", "set_echo\000", 2586408642)
		methodInputEventKey[8] = gdnative.MethodOf("InputEventKey\000", "get_keycode_with_modifiers\000", 1585896689)
		methodInputEventKey[9] = gdnative.MethodOf("InputEventKey\000", "get_physical_keycode_with_modifiers\000", 1585896689)
		methodInputEventMIDI[0] = gdnative.MethodOf("InputEventMIDI\000", "set_channel\000", 1286410249)
		methodInputEventMIDI[1] = gdnative.MethodOf("InputEventMIDI\000", "get_channel\000", 3905245786)
		methodInputEventMIDI[2] = gdnative.MethodOf("InputEventMIDI\000", "set_message\000", 1064271510)
		methodInputEventMIDI[3] = gdnative.MethodOf("InputEventMIDI\000", "get_message\000", 1936512097)
		methodInputEventMIDI[4] = gdnative.MethodOf("InputEventMIDI\000", "set_pitch\000", 1286410249)
		methodInputEventMIDI[5] = gdnative.MethodOf("InputEventMIDI\000", "get_pitch\000", 3905245786)
		methodInputEventMIDI[6] = gdnative.MethodOf("InputEventMIDI\000", "set_velocity\000", 1286410249)
		methodInputEventMIDI[7] = gdnative.MethodOf("InputEventMIDI\000", "get_velocity\000", 3905245786)
		methodInputEventMIDI[8] = gdnative.MethodOf("InputEventMIDI\000", "set_instrument\000", 1286410249)
		methodInputEventMIDI[9] = gdnative.MethodOf("InputEventMIDI\000", "get_instrument\000", 3905245786)
		methodInputEventMIDI[10] = gdnative.MethodOf("InputEventMIDI\000", "set_pressure\000", 1286410249)
		methodInputEventMIDI[11] = gdnative.MethodOf("InputEventMIDI\000", "get_pressure\000", 3905245786)
		methodInputEventMIDI[12] = gdnative.MethodOf("InputEventMIDI\000", "set_controller_number\000", 1286410249)
		methodInputEventMIDI[13] = gdnative.MethodOf("InputEventMIDI\000", "get_controller_number\000", 3905245786)
		methodInputEventMIDI[14] = gdnative.MethodOf("InputEventMIDI\000", "set_controller_value\000", 1286410249)
		methodInputEventMIDI[15] = gdnative.MethodOf("InputEventMIDI\000", "get_controller_value\000", 3905245786)
		methodInputEventMagnifyGesture[0] = gdnative.MethodOf("InputEventMagnifyGesture\000", "set_factor\000", 373806689)
		methodInputEventMagnifyGesture[1] = gdnative.MethodOf("InputEventMagnifyGesture\000", "get_factor\000", 1740695150)
		methodInputEventMouse[0] = gdnative.MethodOf("InputEventMouse\000", "set_button_mask\000", 3624991109)
		methodInputEventMouse[1] = gdnative.MethodOf("InputEventMouse\000", "get_button_mask\000", 1132662608)
		methodInputEventMouse[2] = gdnative.MethodOf("InputEventMouse\000", "set_position\000", 743155724)
		methodInputEventMouse[3] = gdnative.MethodOf("InputEventMouse\000", "get_position\000", 3341600327)
		methodInputEventMouse[4] = gdnative.MethodOf("InputEventMouse\000", "set_global_position\000", 743155724)
		methodInputEventMouse[5] = gdnative.MethodOf("InputEventMouse\000", "get_global_position\000", 3341600327)
		methodInputEventMouseButton[0] = gdnative.MethodOf("InputEventMouseButton\000", "set_factor\000", 373806689)
		methodInputEventMouseButton[1] = gdnative.MethodOf("InputEventMouseButton\000", "get_factor\000", 1740695150)
		methodInputEventMouseButton[2] = gdnative.MethodOf("InputEventMouseButton\000", "set_button_index\000", 3624991109)
		methodInputEventMouseButton[3] = gdnative.MethodOf("InputEventMouseButton\000", "get_button_index\000", 1132662608)
		methodInputEventMouseButton[4] = gdnative.MethodOf("InputEventMouseButton\000", "set_pressed\000", 2586408642)
		methodInputEventMouseButton[5] = gdnative.MethodOf("InputEventMouseButton\000", "set_double_click\000", 2586408642)
		methodInputEventMouseButton[6] = gdnative.MethodOf("InputEventMouseButton\000", "is_double_click\000", 36873697)
		methodInputEventMouseMotion[0] = gdnative.MethodOf("InputEventMouseMotion\000", "set_tilt\000", 743155724)
		methodInputEventMouseMotion[1] = gdnative.MethodOf("InputEventMouseMotion\000", "get_tilt\000", 3341600327)
		methodInputEventMouseMotion[2] = gdnative.MethodOf("InputEventMouseMotion\000", "set_pressure\000", 373806689)
		methodInputEventMouseMotion[3] = gdnative.MethodOf("InputEventMouseMotion\000", "get_pressure\000", 1740695150)
		methodInputEventMouseMotion[4] = gdnative.MethodOf("InputEventMouseMotion\000", "set_pen_inverted\000", 2586408642)
		methodInputEventMouseMotion[5] = gdnative.MethodOf("InputEventMouseMotion\000", "get_pen_inverted\000", 36873697)
		methodInputEventMouseMotion[6] = gdnative.MethodOf("InputEventMouseMotion\000", "set_relative\000", 743155724)
		methodInputEventMouseMotion[7] = gdnative.MethodOf("InputEventMouseMotion\000", "get_relative\000", 3341600327)
		methodInputEventMouseMotion[8] = gdnative.MethodOf("InputEventMouseMotion\000", "set_velocity\000", 743155724)
		methodInputEventMouseMotion[9] = gdnative.MethodOf("InputEventMouseMotion\000", "get_velocity\000", 3341600327)
		methodInputEventPanGesture[0] = gdnative.MethodOf("InputEventPanGesture\000", "set_delta\000", 743155724)
		methodInputEventPanGesture[1] = gdnative.MethodOf("InputEventPanGesture\000", "get_delta\000", 3341600327)
		methodInputEventScreenDrag[0] = gdnative.MethodOf("InputEventScreenDrag\000", "set_index\000", 1286410249)
		methodInputEventScreenDrag[1] = gdnative.MethodOf("InputEventScreenDrag\000", "get_index\000", 3905245786)
		methodInputEventScreenDrag[2] = gdnative.MethodOf("InputEventScreenDrag\000", "set_position\000", 743155724)
		methodInputEventScreenDrag[3] = gdnative.MethodOf("InputEventScreenDrag\000", "get_position\000", 3341600327)
		methodInputEventScreenDrag[4] = gdnative.MethodOf("InputEventScreenDrag\000", "set_relative\000", 743155724)
		methodInputEventScreenDrag[5] = gdnative.MethodOf("InputEventScreenDrag\000", "get_relative\000", 3341600327)
		methodInputEventScreenDrag[6] = gdnative.MethodOf("InputEventScreenDrag\000", "set_velocity\000", 743155724)
		methodInputEventScreenDrag[7] = gdnative.MethodOf("InputEventScreenDrag\000", "get_velocity\000", 3341600327)
		methodInputEventScreenTouch[0] = gdnative.MethodOf("InputEventScreenTouch\000", "set_index\000", 1286410249)
		methodInputEventScreenTouch[1] = gdnative.MethodOf("InputEventScreenTouch\000", "get_index\000", 3905245786)
		methodInputEventScreenTouch[2] = gdnative.MethodOf("InputEventScreenTouch\000", "set_position\000", 743155724)
		methodInputEventScreenTouch[3] = gdnative.MethodOf("InputEventScreenTouch\000", "get_position\000", 3341600327)
		methodInputEventScreenTouch[4] = gdnative.MethodOf("InputEventScreenTouch\000", "set_pressed\000", 2586408642)
		methodInputEventShortcut[0] = gdnative.MethodOf("InputEventShortcut\000", "set_shortcut\000", 857163497)
		methodInputEventShortcut[1] = gdnative.MethodOf("InputEventShortcut\000", "get_shortcut\000", 3766804753)
		methodInputEventWithModifiers[0] = gdnative.MethodOf("InputEventWithModifiers\000", "set_store_command\000", 2586408642)
		methodInputEventWithModifiers[1] = gdnative.MethodOf("InputEventWithModifiers\000", "is_storing_command\000", 36873697)
		methodInputEventWithModifiers[2] = gdnative.MethodOf("InputEventWithModifiers\000", "set_alt_pressed\000", 2586408642)
		methodInputEventWithModifiers[3] = gdnative.MethodOf("InputEventWithModifiers\000", "is_alt_pressed\000", 36873697)
		methodInputEventWithModifiers[4] = gdnative.MethodOf("InputEventWithModifiers\000", "set_shift_pressed\000", 2586408642)
		methodInputEventWithModifiers[5] = gdnative.MethodOf("InputEventWithModifiers\000", "is_shift_pressed\000", 36873697)
		methodInputEventWithModifiers[6] = gdnative.MethodOf("InputEventWithModifiers\000", "set_ctrl_pressed\000", 2586408642)
		methodInputEventWithModifiers[7] = gdnative.MethodOf("InputEventWithModifiers\000", "is_ctrl_pressed\000", 36873697)
		methodInputEventWithModifiers[8] = gdnative.MethodOf("InputEventWithModifiers\000", "set_meta_pressed\000", 2586408642)
		methodInputEventWithModifiers[9] = gdnative.MethodOf("InputEventWithModifiers\000", "is_meta_pressed\000", 36873697)
		methodInputEventWithModifiers[10] = gdnative.MethodOf("InputEventWithModifiers\000", "set_command_pressed\000", 2586408642)
		methodInputEventWithModifiers[11] = gdnative.MethodOf("InputEventWithModifiers\000", "is_command_pressed\000", 36873697)
		methodInputMap[0] = gdnative.MethodOf("InputMap\000", "has_action\000", 2619796661)
		methodInputMap[1] = gdnative.MethodOf("InputMap\000", "get_actions\000", 2915620761)
		methodInputMap[2] = gdnative.MethodOf("InputMap\000", "add_action\000", 573731101)
		methodInputMap[3] = gdnative.MethodOf("InputMap\000", "erase_action\000", 3304788590)
		methodInputMap[4] = gdnative.MethodOf("InputMap\000", "action_set_deadzone\000", 4135858297)
		methodInputMap[5] = gdnative.MethodOf("InputMap\000", "action_get_deadzone\000", 1391627649)
		methodInputMap[6] = gdnative.MethodOf("InputMap\000", "action_add_event\000", 518302593)
		methodInputMap[7] = gdnative.MethodOf("InputMap\000", "action_has_event\000", 1185871985)
		methodInputMap[8] = gdnative.MethodOf("InputMap\000", "action_erase_event\000", 518302593)
		methodInputMap[9] = gdnative.MethodOf("InputMap\000", "action_erase_events\000", 3304788590)
		methodInputMap[10] = gdnative.MethodOf("InputMap\000", "action_get_events\000", 689397652)
		methodInputMap[11] = gdnative.MethodOf("InputMap\000", "event_is_action\000", 3193353650)
		methodInputMap[12] = gdnative.MethodOf("InputMap\000", "load_from_project_settings\000", 3218959716)
		methodInstancePlaceholder[0] = gdnative.MethodOf("InstancePlaceholder\000", "get_stored_values\000", 2230153369)
		methodInstancePlaceholder[1] = gdnative.MethodOf("InstancePlaceholder\000", "create_instance\000", 3794612210)
		methodInstancePlaceholder[2] = gdnative.MethodOf("InstancePlaceholder\000", "get_instance_path\000", 201670096)
		methodItemList[0] = gdnative.MethodOf("ItemList\000", "add_item\000", 4086250691)
		methodItemList[1] = gdnative.MethodOf("ItemList\000", "add_icon_item\000", 3332687421)
		methodItemList[2] = gdnative.MethodOf("ItemList\000", "set_item_text\000", 501894301)
		methodItemList[3] = gdnative.MethodOf("ItemList\000", "get_item_text\000", 844755477)
		methodItemList[4] = gdnative.MethodOf("ItemList\000", "set_item_icon\000", 666127730)
		methodItemList[5] = gdnative.MethodOf("ItemList\000", "get_item_icon\000", 3536238170)
		methodItemList[6] = gdnative.MethodOf("ItemList\000", "set_item_text_direction\000", 1707680378)
		methodItemList[7] = gdnative.MethodOf("ItemList\000", "get_item_text_direction\000", 4235602388)
		methodItemList[8] = gdnative.MethodOf("ItemList\000", "set_item_language\000", 501894301)
		methodItemList[9] = gdnative.MethodOf("ItemList\000", "get_item_language\000", 844755477)
		methodItemList[10] = gdnative.MethodOf("ItemList\000", "set_item_icon_transposed\000", 300928843)
		methodItemList[11] = gdnative.MethodOf("ItemList\000", "is_item_icon_transposed\000", 1116898809)
		methodItemList[12] = gdnative.MethodOf("ItemList\000", "set_item_icon_region\000", 1356297692)
		methodItemList[13] = gdnative.MethodOf("ItemList\000", "get_item_icon_region\000", 3327874267)
		methodItemList[14] = gdnative.MethodOf("ItemList\000", "set_item_icon_modulate\000", 2878471219)
		methodItemList[15] = gdnative.MethodOf("ItemList\000", "get_item_icon_modulate\000", 3457211756)
		methodItemList[16] = gdnative.MethodOf("ItemList\000", "set_item_selectable\000", 300928843)
		methodItemList[17] = gdnative.MethodOf("ItemList\000", "is_item_selectable\000", 1116898809)
		methodItemList[18] = gdnative.MethodOf("ItemList\000", "set_item_disabled\000", 300928843)
		methodItemList[19] = gdnative.MethodOf("ItemList\000", "is_item_disabled\000", 1116898809)
		methodItemList[20] = gdnative.MethodOf("ItemList\000", "set_item_metadata\000", 2152698145)
		methodItemList[21] = gdnative.MethodOf("ItemList\000", "get_item_metadata\000", 4227898402)
		methodItemList[22] = gdnative.MethodOf("ItemList\000", "set_item_custom_bg_color\000", 2878471219)
		methodItemList[23] = gdnative.MethodOf("ItemList\000", "get_item_custom_bg_color\000", 3457211756)
		methodItemList[24] = gdnative.MethodOf("ItemList\000", "set_item_custom_fg_color\000", 2878471219)
		methodItemList[25] = gdnative.MethodOf("ItemList\000", "get_item_custom_fg_color\000", 3457211756)
		methodItemList[26] = gdnative.MethodOf("ItemList\000", "set_item_tooltip_enabled\000", 300928843)
		methodItemList[27] = gdnative.MethodOf("ItemList\000", "is_item_tooltip_enabled\000", 1116898809)
		methodItemList[28] = gdnative.MethodOf("ItemList\000", "set_item_tooltip\000", 501894301)
		methodItemList[29] = gdnative.MethodOf("ItemList\000", "get_item_tooltip\000", 844755477)
		methodItemList[30] = gdnative.MethodOf("ItemList\000", "select\000", 4023243586)
		methodItemList[31] = gdnative.MethodOf("ItemList\000", "deselect\000", 1286410249)
		methodItemList[32] = gdnative.MethodOf("ItemList\000", "deselect_all\000", 3218959716)
		methodItemList[33] = gdnative.MethodOf("ItemList\000", "is_selected\000", 1116898809)
		methodItemList[34] = gdnative.MethodOf("ItemList\000", "get_selected_items\000", 969006518)
		methodItemList[35] = gdnative.MethodOf("ItemList\000", "move_item\000", 3937882851)
		methodItemList[36] = gdnative.MethodOf("ItemList\000", "set_item_count\000", 1286410249)
		methodItemList[37] = gdnative.MethodOf("ItemList\000", "get_item_count\000", 3905245786)
		methodItemList[38] = gdnative.MethodOf("ItemList\000", "remove_item\000", 1286410249)
		methodItemList[39] = gdnative.MethodOf("ItemList\000", "clear\000", 3218959716)
		methodItemList[40] = gdnative.MethodOf("ItemList\000", "sort_items_by_text\000", 3218959716)
		methodItemList[41] = gdnative.MethodOf("ItemList\000", "set_fixed_column_width\000", 1286410249)
		methodItemList[42] = gdnative.MethodOf("ItemList\000", "get_fixed_column_width\000", 3905245786)
		methodItemList[43] = gdnative.MethodOf("ItemList\000", "set_same_column_width\000", 2586408642)
		methodItemList[44] = gdnative.MethodOf("ItemList\000", "is_same_column_width\000", 36873697)
		methodItemList[45] = gdnative.MethodOf("ItemList\000", "set_max_text_lines\000", 1286410249)
		methodItemList[46] = gdnative.MethodOf("ItemList\000", "get_max_text_lines\000", 3905245786)
		methodItemList[47] = gdnative.MethodOf("ItemList\000", "set_max_columns\000", 1286410249)
		methodItemList[48] = gdnative.MethodOf("ItemList\000", "get_max_columns\000", 3905245786)
		methodItemList[49] = gdnative.MethodOf("ItemList\000", "set_select_mode\000", 928267388)
		methodItemList[50] = gdnative.MethodOf("ItemList\000", "get_select_mode\000", 1191945842)
		methodItemList[51] = gdnative.MethodOf("ItemList\000", "set_icon_mode\000", 2025053633)
		methodItemList[52] = gdnative.MethodOf("ItemList\000", "get_icon_mode\000", 3353929232)
		methodItemList[53] = gdnative.MethodOf("ItemList\000", "set_fixed_icon_size\000", 743155724)
		methodItemList[54] = gdnative.MethodOf("ItemList\000", "get_fixed_icon_size\000", 3341600327)
		methodItemList[55] = gdnative.MethodOf("ItemList\000", "set_icon_scale\000", 373806689)
		methodItemList[56] = gdnative.MethodOf("ItemList\000", "get_icon_scale\000", 1740695150)
		methodItemList[57] = gdnative.MethodOf("ItemList\000", "set_allow_rmb_select\000", 2586408642)
		methodItemList[58] = gdnative.MethodOf("ItemList\000", "get_allow_rmb_select\000", 36873697)
		methodItemList[59] = gdnative.MethodOf("ItemList\000", "set_allow_reselect\000", 2586408642)
		methodItemList[60] = gdnative.MethodOf("ItemList\000", "get_allow_reselect\000", 36873697)
		methodItemList[61] = gdnative.MethodOf("ItemList\000", "set_auto_height\000", 2586408642)
		methodItemList[62] = gdnative.MethodOf("ItemList\000", "has_auto_height\000", 36873697)
		methodItemList[63] = gdnative.MethodOf("ItemList\000", "is_anything_selected\000", 2240911060)
		methodItemList[64] = gdnative.MethodOf("ItemList\000", "get_item_at_position\000", 2300324924)
		methodItemList[65] = gdnative.MethodOf("ItemList\000", "ensure_current_is_visible\000", 3218959716)
		methodItemList[66] = gdnative.MethodOf("ItemList\000", "get_v_scroll_bar\000", 2630340773)
		methodItemList[67] = gdnative.MethodOf("ItemList\000", "set_text_overrun_behavior\000", 1008890932)
		methodItemList[68] = gdnative.MethodOf("ItemList\000", "get_text_overrun_behavior\000", 3779142101)
		methodJSON[0] = gdnative.MethodOf("JSON\000", "stringify\000", 2656701787)
		methodJSON[1] = gdnative.MethodOf("JSON\000", "parse\000", 166001499)
		methodJSON[2] = gdnative.MethodOf("JSON\000", "get_data\000", 1214101251)
		methodJSON[3] = gdnative.MethodOf("JSON\000", "get_error_line\000", 3905245786)
		methodJSON[4] = gdnative.MethodOf("JSON\000", "get_error_message\000", 201670096)
		methodJSONRPC[0] = gdnative.MethodOf("JSONRPC\000", "set_scope\000", 2572618360)
		methodJSONRPC[1] = gdnative.MethodOf("JSONRPC\000", "process_action\000", 2963479484)
		methodJSONRPC[2] = gdnative.MethodOf("JSONRPC\000", "process_string\000", 1703090593)
		methodJSONRPC[3] = gdnative.MethodOf("JSONRPC\000", "make_request\000", 3423508980)
		methodJSONRPC[4] = gdnative.MethodOf("JSONRPC\000", "make_response\000", 5053918)
		methodJSONRPC[5] = gdnative.MethodOf("JSONRPC\000", "make_notification\000", 2949127017)
		methodJSONRPC[6] = gdnative.MethodOf("JSONRPC\000", "make_response_error\000", 928596297)
		methodJoint2D[0] = gdnative.MethodOf("Joint2D\000", "set_node_a\000", 1348162250)
		methodJoint2D[1] = gdnative.MethodOf("Joint2D\000", "get_node_a\000", 4075236667)
		methodJoint2D[2] = gdnative.MethodOf("Joint2D\000", "set_node_b\000", 1348162250)
		methodJoint2D[3] = gdnative.MethodOf("Joint2D\000", "get_node_b\000", 4075236667)
		methodJoint2D[4] = gdnative.MethodOf("Joint2D\000", "set_bias\000", 373806689)
		methodJoint2D[5] = gdnative.MethodOf("Joint2D\000", "get_bias\000", 1740695150)
		methodJoint2D[6] = gdnative.MethodOf("Joint2D\000", "set_exclude_nodes_from_collision\000", 2586408642)
		methodJoint2D[7] = gdnative.MethodOf("Joint2D\000", "get_exclude_nodes_from_collision\000", 36873697)
		methodJoint3D[0] = gdnative.MethodOf("Joint3D\000", "set_node_a\000", 1348162250)
		methodJoint3D[1] = gdnative.MethodOf("Joint3D\000", "get_node_a\000", 4075236667)
		methodJoint3D[2] = gdnative.MethodOf("Joint3D\000", "set_node_b\000", 1348162250)
		methodJoint3D[3] = gdnative.MethodOf("Joint3D\000", "get_node_b\000", 4075236667)
		methodJoint3D[4] = gdnative.MethodOf("Joint3D\000", "set_solver_priority\000", 1286410249)
		methodJoint3D[5] = gdnative.MethodOf("Joint3D\000", "get_solver_priority\000", 3905245786)
		methodJoint3D[6] = gdnative.MethodOf("Joint3D\000", "set_exclude_nodes_from_collision\000", 2586408642)
		methodJoint3D[7] = gdnative.MethodOf("Joint3D\000", "get_exclude_nodes_from_collision\000", 36873697)
		methodKinematicCollision2D[0] = gdnative.MethodOf("KinematicCollision2D\000", "get_position\000", 3341600327)
		methodKinematicCollision2D[1] = gdnative.MethodOf("KinematicCollision2D\000", "get_normal\000", 3341600327)
		methodKinematicCollision2D[2] = gdnative.MethodOf("KinematicCollision2D\000", "get_travel\000", 3341600327)
		methodKinematicCollision2D[3] = gdnative.MethodOf("KinematicCollision2D\000", "get_remainder\000", 3341600327)
		methodKinematicCollision2D[4] = gdnative.MethodOf("KinematicCollision2D\000", "get_angle\000", 2841063350)
		methodKinematicCollision2D[5] = gdnative.MethodOf("KinematicCollision2D\000", "get_depth\000", 1740695150)
		methodKinematicCollision2D[6] = gdnative.MethodOf("KinematicCollision2D\000", "get_local_shape\000", 1981248198)
		methodKinematicCollision2D[7] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider\000", 1981248198)
		methodKinematicCollision2D[8] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider_id\000", 3905245786)
		methodKinematicCollision2D[9] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider_rid\000", 2944877500)
		methodKinematicCollision2D[10] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider_shape\000", 1981248198)
		methodKinematicCollision2D[11] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider_shape_index\000", 3905245786)
		methodKinematicCollision2D[12] = gdnative.MethodOf("KinematicCollision2D\000", "get_collider_velocity\000", 3341600327)
		methodKinematicCollision3D[0] = gdnative.MethodOf("KinematicCollision3D\000", "get_travel\000", 3360562783)
		methodKinematicCollision3D[1] = gdnative.MethodOf("KinematicCollision3D\000", "get_remainder\000", 3360562783)
		methodKinematicCollision3D[2] = gdnative.MethodOf("KinematicCollision3D\000", "get_depth\000", 1740695150)
		methodKinematicCollision3D[3] = gdnative.MethodOf("KinematicCollision3D\000", "get_collision_count\000", 3905245786)
		methodKinematicCollision3D[4] = gdnative.MethodOf("KinematicCollision3D\000", "get_position\000", 1914908202)
		methodKinematicCollision3D[5] = gdnative.MethodOf("KinematicCollision3D\000", "get_normal\000", 1914908202)
		methodKinematicCollision3D[6] = gdnative.MethodOf("KinematicCollision3D\000", "get_angle\000", 1242741860)
		methodKinematicCollision3D[7] = gdnative.MethodOf("KinematicCollision3D\000", "get_local_shape\000", 2639523548)
		methodKinematicCollision3D[8] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider\000", 2639523548)
		methodKinematicCollision3D[9] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider_id\000", 1591665591)
		methodKinematicCollision3D[10] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider_rid\000", 1231817359)
		methodKinematicCollision3D[11] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider_shape\000", 2639523548)
		methodKinematicCollision3D[12] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider_shape_index\000", 1591665591)
		methodKinematicCollision3D[13] = gdnative.MethodOf("KinematicCollision3D\000", "get_collider_velocity\000", 1914908202)
		methodLabel[0] = gdnative.MethodOf("Label\000", "set_horizontal_alignment\000", 2312603777)
		methodLabel[1] = gdnative.MethodOf("Label\000", "get_horizontal_alignment\000", 341400642)
		methodLabel[2] = gdnative.MethodOf("Label\000", "set_vertical_alignment\000", 1796458609)
		methodLabel[3] = gdnative.MethodOf("Label\000", "get_vertical_alignment\000", 3274884059)
		methodLabel[4] = gdnative.MethodOf("Label\000", "set_text\000", 83702148)
		methodLabel[5] = gdnative.MethodOf("Label\000", "get_text\000", 201670096)
		methodLabel[6] = gdnative.MethodOf("Label\000", "set_label_settings\000", 1030653839)
		methodLabel[7] = gdnative.MethodOf("Label\000", "get_label_settings\000", 826676056)
		methodLabel[8] = gdnative.MethodOf("Label\000", "set_text_direction\000", 119160795)
		methodLabel[9] = gdnative.MethodOf("Label\000", "get_text_direction\000", 797257663)
		methodLabel[10] = gdnative.MethodOf("Label\000", "set_language\000", 83702148)
		methodLabel[11] = gdnative.MethodOf("Label\000", "get_language\000", 201670096)
		methodLabel[12] = gdnative.MethodOf("Label\000", "set_autowrap_mode\000", 3289138044)
		methodLabel[13] = gdnative.MethodOf("Label\000", "get_autowrap_mode\000", 1549071663)
		methodLabel[14] = gdnative.MethodOf("Label\000", "set_clip_text\000", 2586408642)
		methodLabel[15] = gdnative.MethodOf("Label\000", "is_clipping_text\000", 36873697)
		methodLabel[16] = gdnative.MethodOf("Label\000", "set_text_overrun_behavior\000", 1008890932)
		methodLabel[17] = gdnative.MethodOf("Label\000", "get_text_overrun_behavior\000", 3779142101)
		methodLabel[18] = gdnative.MethodOf("Label\000", "set_uppercase\000", 2586408642)
		methodLabel[19] = gdnative.MethodOf("Label\000", "is_uppercase\000", 36873697)
		methodLabel[20] = gdnative.MethodOf("Label\000", "get_line_height\000", 181039630)
		methodLabel[21] = gdnative.MethodOf("Label\000", "get_line_count\000", 3905245786)
		methodLabel[22] = gdnative.MethodOf("Label\000", "get_visible_line_count\000", 3905245786)
		methodLabel[23] = gdnative.MethodOf("Label\000", "get_total_character_count\000", 3905245786)
		methodLabel[24] = gdnative.MethodOf("Label\000", "set_visible_characters\000", 1286410249)
		methodLabel[25] = gdnative.MethodOf("Label\000", "get_visible_characters\000", 3905245786)
		methodLabel[26] = gdnative.MethodOf("Label\000", "get_visible_characters_behavior\000", 258789322)
		methodLabel[27] = gdnative.MethodOf("Label\000", "set_visible_characters_behavior\000", 3383839701)
		methodLabel[28] = gdnative.MethodOf("Label\000", "set_percent_visible\000", 373806689)
		methodLabel[29] = gdnative.MethodOf("Label\000", "get_percent_visible\000", 1740695150)
		methodLabel[30] = gdnative.MethodOf("Label\000", "set_lines_skipped\000", 1286410249)
		methodLabel[31] = gdnative.MethodOf("Label\000", "get_lines_skipped\000", 3905245786)
		methodLabel[32] = gdnative.MethodOf("Label\000", "set_max_lines_visible\000", 1286410249)
		methodLabel[33] = gdnative.MethodOf("Label\000", "get_max_lines_visible\000", 3905245786)
		methodLabel[34] = gdnative.MethodOf("Label\000", "set_structured_text_bidi_override\000", 55961453)
		methodLabel[35] = gdnative.MethodOf("Label\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLabel[36] = gdnative.MethodOf("Label\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLabel[37] = gdnative.MethodOf("Label\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLabel3D[0] = gdnative.MethodOf("Label3D\000", "set_horizontal_alignment\000", 2312603777)
		methodLabel3D[1] = gdnative.MethodOf("Label3D\000", "get_horizontal_alignment\000", 341400642)
		methodLabel3D[2] = gdnative.MethodOf("Label3D\000", "set_vertical_alignment\000", 1796458609)
		methodLabel3D[3] = gdnative.MethodOf("Label3D\000", "get_vertical_alignment\000", 3274884059)
		methodLabel3D[4] = gdnative.MethodOf("Label3D\000", "set_modulate\000", 2920490490)
		methodLabel3D[5] = gdnative.MethodOf("Label3D\000", "get_modulate\000", 3444240500)
		methodLabel3D[6] = gdnative.MethodOf("Label3D\000", "set_outline_modulate\000", 2920490490)
		methodLabel3D[7] = gdnative.MethodOf("Label3D\000", "get_outline_modulate\000", 3444240500)
		methodLabel3D[8] = gdnative.MethodOf("Label3D\000", "set_text\000", 83702148)
		methodLabel3D[9] = gdnative.MethodOf("Label3D\000", "get_text\000", 201670096)
		methodLabel3D[10] = gdnative.MethodOf("Label3D\000", "set_text_direction\000", 1418190634)
		methodLabel3D[11] = gdnative.MethodOf("Label3D\000", "get_text_direction\000", 2516697328)
		methodLabel3D[12] = gdnative.MethodOf("Label3D\000", "set_language\000", 83702148)
		methodLabel3D[13] = gdnative.MethodOf("Label3D\000", "get_language\000", 201670096)
		methodLabel3D[14] = gdnative.MethodOf("Label3D\000", "set_structured_text_bidi_override\000", 55961453)
		methodLabel3D[15] = gdnative.MethodOf("Label3D\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLabel3D[16] = gdnative.MethodOf("Label3D\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLabel3D[17] = gdnative.MethodOf("Label3D\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLabel3D[18] = gdnative.MethodOf("Label3D\000", "set_uppercase\000", 2586408642)
		methodLabel3D[19] = gdnative.MethodOf("Label3D\000", "is_uppercase\000", 36873697)
		methodLabel3D[20] = gdnative.MethodOf("Label3D\000", "set_render_priority\000", 1286410249)
		methodLabel3D[21] = gdnative.MethodOf("Label3D\000", "get_render_priority\000", 3905245786)
		methodLabel3D[22] = gdnative.MethodOf("Label3D\000", "set_outline_render_priority\000", 1286410249)
		methodLabel3D[23] = gdnative.MethodOf("Label3D\000", "get_outline_render_priority\000", 3905245786)
		methodLabel3D[24] = gdnative.MethodOf("Label3D\000", "set_font\000", 1262170328)
		methodLabel3D[25] = gdnative.MethodOf("Label3D\000", "get_font\000", 3229501585)
		methodLabel3D[26] = gdnative.MethodOf("Label3D\000", "set_font_size\000", 1286410249)
		methodLabel3D[27] = gdnative.MethodOf("Label3D\000", "get_font_size\000", 3905245786)
		methodLabel3D[28] = gdnative.MethodOf("Label3D\000", "set_outline_size\000", 1286410249)
		methodLabel3D[29] = gdnative.MethodOf("Label3D\000", "get_outline_size\000", 3905245786)
		methodLabel3D[30] = gdnative.MethodOf("Label3D\000", "set_line_spacing\000", 373806689)
		methodLabel3D[31] = gdnative.MethodOf("Label3D\000", "get_line_spacing\000", 1740695150)
		methodLabel3D[32] = gdnative.MethodOf("Label3D\000", "set_autowrap_mode\000", 3289138044)
		methodLabel3D[33] = gdnative.MethodOf("Label3D\000", "get_autowrap_mode\000", 1549071663)
		methodLabel3D[34] = gdnative.MethodOf("Label3D\000", "set_width\000", 373806689)
		methodLabel3D[35] = gdnative.MethodOf("Label3D\000", "get_width\000", 1740695150)
		methodLabel3D[36] = gdnative.MethodOf("Label3D\000", "set_pixel_size\000", 373806689)
		methodLabel3D[37] = gdnative.MethodOf("Label3D\000", "get_pixel_size\000", 1740695150)
		methodLabel3D[38] = gdnative.MethodOf("Label3D\000", "set_offset\000", 743155724)
		methodLabel3D[39] = gdnative.MethodOf("Label3D\000", "get_offset\000", 3341600327)
		methodLabel3D[40] = gdnative.MethodOf("Label3D\000", "set_draw_flag\000", 1285833066)
		methodLabel3D[41] = gdnative.MethodOf("Label3D\000", "get_draw_flag\000", 259226453)
		methodLabel3D[42] = gdnative.MethodOf("Label3D\000", "set_billboard_mode\000", 4202036497)
		methodLabel3D[43] = gdnative.MethodOf("Label3D\000", "get_billboard_mode\000", 1283840139)
		methodLabel3D[44] = gdnative.MethodOf("Label3D\000", "set_alpha_cut_mode\000", 2549142916)
		methodLabel3D[45] = gdnative.MethodOf("Label3D\000", "get_alpha_cut_mode\000", 219468601)
		methodLabel3D[46] = gdnative.MethodOf("Label3D\000", "set_alpha_scissor_threshold\000", 373806689)
		methodLabel3D[47] = gdnative.MethodOf("Label3D\000", "get_alpha_scissor_threshold\000", 1740695150)
		methodLabel3D[48] = gdnative.MethodOf("Label3D\000", "set_texture_filter\000", 22904437)
		methodLabel3D[49] = gdnative.MethodOf("Label3D\000", "get_texture_filter\000", 3289213076)
		methodLabel3D[50] = gdnative.MethodOf("Label3D\000", "generate_triangle_mesh\000", 3476533166)
		methodLabelSettings[0] = gdnative.MethodOf("LabelSettings\000", "set_line_spacing\000", 373806689)
		methodLabelSettings[1] = gdnative.MethodOf("LabelSettings\000", "get_line_spacing\000", 1740695150)
		methodLabelSettings[2] = gdnative.MethodOf("LabelSettings\000", "set_font\000", 1262170328)
		methodLabelSettings[3] = gdnative.MethodOf("LabelSettings\000", "get_font\000", 3229501585)
		methodLabelSettings[4] = gdnative.MethodOf("LabelSettings\000", "set_font_size\000", 1286410249)
		methodLabelSettings[5] = gdnative.MethodOf("LabelSettings\000", "get_font_size\000", 3905245786)
		methodLabelSettings[6] = gdnative.MethodOf("LabelSettings\000", "set_font_color\000", 2920490490)
		methodLabelSettings[7] = gdnative.MethodOf("LabelSettings\000", "get_font_color\000", 3444240500)
		methodLabelSettings[8] = gdnative.MethodOf("LabelSettings\000", "set_outline_size\000", 1286410249)
		methodLabelSettings[9] = gdnative.MethodOf("LabelSettings\000", "get_outline_size\000", 3905245786)
		methodLabelSettings[10] = gdnative.MethodOf("LabelSettings\000", "set_outline_color\000", 2920490490)
		methodLabelSettings[11] = gdnative.MethodOf("LabelSettings\000", "get_outline_color\000", 3444240500)
		methodLabelSettings[12] = gdnative.MethodOf("LabelSettings\000", "set_shadow_size\000", 1286410249)
		methodLabelSettings[13] = gdnative.MethodOf("LabelSettings\000", "get_shadow_size\000", 3905245786)
		methodLabelSettings[14] = gdnative.MethodOf("LabelSettings\000", "set_shadow_color\000", 2920490490)
		methodLabelSettings[15] = gdnative.MethodOf("LabelSettings\000", "get_shadow_color\000", 3444240500)
		methodLabelSettings[16] = gdnative.MethodOf("LabelSettings\000", "set_shadow_offset\000", 743155724)
		methodLabelSettings[17] = gdnative.MethodOf("LabelSettings\000", "get_shadow_offset\000", 3341600327)
		methodLight2D[0] = gdnative.MethodOf("Light2D\000", "set_enabled\000", 2586408642)
		methodLight2D[1] = gdnative.MethodOf("Light2D\000", "is_enabled\000", 36873697)
		methodLight2D[2] = gdnative.MethodOf("Light2D\000", "set_editor_only\000", 2586408642)
		methodLight2D[3] = gdnative.MethodOf("Light2D\000", "is_editor_only\000", 36873697)
		methodLight2D[4] = gdnative.MethodOf("Light2D\000", "set_color\000", 2920490490)
		methodLight2D[5] = gdnative.MethodOf("Light2D\000", "get_color\000", 3444240500)
		methodLight2D[6] = gdnative.MethodOf("Light2D\000", "set_energy\000", 373806689)
		methodLight2D[7] = gdnative.MethodOf("Light2D\000", "get_energy\000", 1740695150)
		methodLight2D[8] = gdnative.MethodOf("Light2D\000", "set_z_range_min\000", 1286410249)
		methodLight2D[9] = gdnative.MethodOf("Light2D\000", "get_z_range_min\000", 3905245786)
		methodLight2D[10] = gdnative.MethodOf("Light2D\000", "set_z_range_max\000", 1286410249)
		methodLight2D[11] = gdnative.MethodOf("Light2D\000", "get_z_range_max\000", 3905245786)
		methodLight2D[12] = gdnative.MethodOf("Light2D\000", "set_layer_range_min\000", 1286410249)
		methodLight2D[13] = gdnative.MethodOf("Light2D\000", "get_layer_range_min\000", 3905245786)
		methodLight2D[14] = gdnative.MethodOf("Light2D\000", "set_layer_range_max\000", 1286410249)
		methodLight2D[15] = gdnative.MethodOf("Light2D\000", "get_layer_range_max\000", 3905245786)
		methodLight2D[16] = gdnative.MethodOf("Light2D\000", "set_item_cull_mask\000", 1286410249)
		methodLight2D[17] = gdnative.MethodOf("Light2D\000", "get_item_cull_mask\000", 3905245786)
		methodLight2D[18] = gdnative.MethodOf("Light2D\000", "set_item_shadow_cull_mask\000", 1286410249)
		methodLight2D[19] = gdnative.MethodOf("Light2D\000", "get_item_shadow_cull_mask\000", 3905245786)
		methodLight2D[20] = gdnative.MethodOf("Light2D\000", "set_shadow_enabled\000", 2586408642)
		methodLight2D[21] = gdnative.MethodOf("Light2D\000", "is_shadow_enabled\000", 36873697)
		methodLight2D[22] = gdnative.MethodOf("Light2D\000", "set_shadow_smooth\000", 373806689)
		methodLight2D[23] = gdnative.MethodOf("Light2D\000", "get_shadow_smooth\000", 1740695150)
		methodLight2D[24] = gdnative.MethodOf("Light2D\000", "set_shadow_filter\000", 3209356555)
		methodLight2D[25] = gdnative.MethodOf("Light2D\000", "get_shadow_filter\000", 1973619177)
		methodLight2D[26] = gdnative.MethodOf("Light2D\000", "set_shadow_color\000", 2920490490)
		methodLight2D[27] = gdnative.MethodOf("Light2D\000", "get_shadow_color\000", 3444240500)
		methodLight2D[28] = gdnative.MethodOf("Light2D\000", "set_blend_mode\000", 2916638796)
		methodLight2D[29] = gdnative.MethodOf("Light2D\000", "get_blend_mode\000", 936255250)
		methodLight2D[30] = gdnative.MethodOf("Light2D\000", "set_height\000", 373806689)
		methodLight2D[31] = gdnative.MethodOf("Light2D\000", "get_height\000", 1740695150)
		methodLight3D[0] = gdnative.MethodOf("Light3D\000", "set_editor_only\000", 2586408642)
		methodLight3D[1] = gdnative.MethodOf("Light3D\000", "is_editor_only\000", 36873697)
		methodLight3D[2] = gdnative.MethodOf("Light3D\000", "set_param\000", 1722734213)
		methodLight3D[3] = gdnative.MethodOf("Light3D\000", "get_param\000", 1844084987)
		methodLight3D[4] = gdnative.MethodOf("Light3D\000", "set_shadow\000", 2586408642)
		methodLight3D[5] = gdnative.MethodOf("Light3D\000", "has_shadow\000", 36873697)
		methodLight3D[6] = gdnative.MethodOf("Light3D\000", "set_negative\000", 2586408642)
		methodLight3D[7] = gdnative.MethodOf("Light3D\000", "is_negative\000", 36873697)
		methodLight3D[8] = gdnative.MethodOf("Light3D\000", "set_cull_mask\000", 1286410249)
		methodLight3D[9] = gdnative.MethodOf("Light3D\000", "get_cull_mask\000", 3905245786)
		methodLight3D[10] = gdnative.MethodOf("Light3D\000", "set_enable_distance_fade\000", 2586408642)
		methodLight3D[11] = gdnative.MethodOf("Light3D\000", "is_distance_fade_enabled\000", 36873697)
		methodLight3D[12] = gdnative.MethodOf("Light3D\000", "set_distance_fade_begin\000", 373806689)
		methodLight3D[13] = gdnative.MethodOf("Light3D\000", "get_distance_fade_begin\000", 1740695150)
		methodLight3D[14] = gdnative.MethodOf("Light3D\000", "set_distance_fade_shadow\000", 373806689)
		methodLight3D[15] = gdnative.MethodOf("Light3D\000", "get_distance_fade_shadow\000", 1740695150)
		methodLight3D[16] = gdnative.MethodOf("Light3D\000", "set_distance_fade_length\000", 373806689)
		methodLight3D[17] = gdnative.MethodOf("Light3D\000", "get_distance_fade_length\000", 1740695150)
		methodLight3D[18] = gdnative.MethodOf("Light3D\000", "set_color\000", 2920490490)
		methodLight3D[19] = gdnative.MethodOf("Light3D\000", "get_color\000", 3444240500)
		methodLight3D[20] = gdnative.MethodOf("Light3D\000", "set_shadow_reverse_cull_face\000", 2586408642)
		methodLight3D[21] = gdnative.MethodOf("Light3D\000", "get_shadow_reverse_cull_face\000", 36873697)
		methodLight3D[22] = gdnative.MethodOf("Light3D\000", "set_bake_mode\000", 37739303)
		methodLight3D[23] = gdnative.MethodOf("Light3D\000", "get_bake_mode\000", 371737608)
		methodLight3D[24] = gdnative.MethodOf("Light3D\000", "set_projector\000", 4051416890)
		methodLight3D[25] = gdnative.MethodOf("Light3D\000", "get_projector\000", 3635182373)
		methodLightOccluder2D[0] = gdnative.MethodOf("LightOccluder2D\000", "set_occluder_polygon\000", 3258315893)
		methodLightOccluder2D[1] = gdnative.MethodOf("LightOccluder2D\000", "get_occluder_polygon\000", 3962317075)
		methodLightOccluder2D[2] = gdnative.MethodOf("LightOccluder2D\000", "set_occluder_light_mask\000", 1286410249)
		methodLightOccluder2D[3] = gdnative.MethodOf("LightOccluder2D\000", "get_occluder_light_mask\000", 3905245786)
		methodLightOccluder2D[4] = gdnative.MethodOf("LightOccluder2D\000", "set_as_sdf_collision\000", 2586408642)
		methodLightOccluder2D[5] = gdnative.MethodOf("LightOccluder2D\000", "is_set_as_sdf_collision\000", 36873697)
		methodLightmapGI[0] = gdnative.MethodOf("LightmapGI\000", "set_light_data\000", 1790597277)
		methodLightmapGI[1] = gdnative.MethodOf("LightmapGI\000", "get_light_data\000", 290354153)
		methodLightmapGI[2] = gdnative.MethodOf("LightmapGI\000", "set_bake_quality\000", 1192215803)
		methodLightmapGI[3] = gdnative.MethodOf("LightmapGI\000", "get_bake_quality\000", 688832735)
		methodLightmapGI[4] = gdnative.MethodOf("LightmapGI\000", "set_bounces\000", 1286410249)
		methodLightmapGI[5] = gdnative.MethodOf("LightmapGI\000", "get_bounces\000", 3905245786)
		methodLightmapGI[6] = gdnative.MethodOf("LightmapGI\000", "set_generate_probes\000", 549981046)
		methodLightmapGI[7] = gdnative.MethodOf("LightmapGI\000", "get_generate_probes\000", 3930596226)
		methodLightmapGI[8] = gdnative.MethodOf("LightmapGI\000", "set_bias\000", 373806689)
		methodLightmapGI[9] = gdnative.MethodOf("LightmapGI\000", "get_bias\000", 1740695150)
		methodLightmapGI[10] = gdnative.MethodOf("LightmapGI\000", "set_environment_mode\000", 2282650285)
		methodLightmapGI[11] = gdnative.MethodOf("LightmapGI\000", "get_environment_mode\000", 4128646479)
		methodLightmapGI[12] = gdnative.MethodOf("LightmapGI\000", "set_environment_custom_sky\000", 3336722921)
		methodLightmapGI[13] = gdnative.MethodOf("LightmapGI\000", "get_environment_custom_sky\000", 1177136966)
		methodLightmapGI[14] = gdnative.MethodOf("LightmapGI\000", "set_environment_custom_color\000", 2920490490)
		methodLightmapGI[15] = gdnative.MethodOf("LightmapGI\000", "get_environment_custom_color\000", 3444240500)
		methodLightmapGI[16] = gdnative.MethodOf("LightmapGI\000", "set_environment_custom_energy\000", 373806689)
		methodLightmapGI[17] = gdnative.MethodOf("LightmapGI\000", "get_environment_custom_energy\000", 1740695150)
		methodLightmapGI[18] = gdnative.MethodOf("LightmapGI\000", "set_max_texture_size\000", 1286410249)
		methodLightmapGI[19] = gdnative.MethodOf("LightmapGI\000", "get_max_texture_size\000", 3905245786)
		methodLightmapGI[20] = gdnative.MethodOf("LightmapGI\000", "set_use_denoiser\000", 2586408642)
		methodLightmapGI[21] = gdnative.MethodOf("LightmapGI\000", "is_using_denoiser\000", 36873697)
		methodLightmapGI[22] = gdnative.MethodOf("LightmapGI\000", "set_interior\000", 2586408642)
		methodLightmapGI[23] = gdnative.MethodOf("LightmapGI\000", "is_interior\000", 36873697)
		methodLightmapGI[24] = gdnative.MethodOf("LightmapGI\000", "set_directional\000", 2586408642)
		methodLightmapGI[25] = gdnative.MethodOf("LightmapGI\000", "is_directional\000", 36873697)
		methodLightmapGIData[0] = gdnative.MethodOf("LightmapGIData\000", "set_light_texture\000", 1278366092)
		methodLightmapGIData[1] = gdnative.MethodOf("LightmapGIData\000", "get_light_texture\000", 3984243839)
		methodLightmapGIData[2] = gdnative.MethodOf("LightmapGIData\000", "set_uses_spherical_harmonics\000", 2586408642)
		methodLightmapGIData[3] = gdnative.MethodOf("LightmapGIData\000", "is_using_spherical_harmonics\000", 36873697)
		methodLightmapGIData[4] = gdnative.MethodOf("LightmapGIData\000", "add_user\000", 4272570515)
		methodLightmapGIData[5] = gdnative.MethodOf("LightmapGIData\000", "get_user_count\000", 3905245786)
		methodLightmapGIData[6] = gdnative.MethodOf("LightmapGIData\000", "get_user_path\000", 408788394)
		methodLightmapGIData[7] = gdnative.MethodOf("LightmapGIData\000", "clear_users\000", 3218959716)
		methodLine2D[0] = gdnative.MethodOf("Line2D\000", "set_points\000", 1509147220)
		methodLine2D[1] = gdnative.MethodOf("Line2D\000", "get_points\000", 2961356807)
		methodLine2D[2] = gdnative.MethodOf("Line2D\000", "set_point_position\000", 163021252)
		methodLine2D[3] = gdnative.MethodOf("Line2D\000", "get_point_position\000", 2299179447)
		methodLine2D[4] = gdnative.MethodOf("Line2D\000", "get_point_count\000", 3905245786)
		methodLine2D[5] = gdnative.MethodOf("Line2D\000", "add_point\000", 468506575)
		methodLine2D[6] = gdnative.MethodOf("Line2D\000", "remove_point\000", 1286410249)
		methodLine2D[7] = gdnative.MethodOf("Line2D\000", "clear_points\000", 3218959716)
		methodLine2D[8] = gdnative.MethodOf("Line2D\000", "set_width\000", 373806689)
		methodLine2D[9] = gdnative.MethodOf("Line2D\000", "get_width\000", 1740695150)
		methodLine2D[10] = gdnative.MethodOf("Line2D\000", "set_curve\000", 270443179)
		methodLine2D[11] = gdnative.MethodOf("Line2D\000", "get_curve\000", 2460114913)
		methodLine2D[12] = gdnative.MethodOf("Line2D\000", "set_default_color\000", 2920490490)
		methodLine2D[13] = gdnative.MethodOf("Line2D\000", "get_default_color\000", 3444240500)
		methodLine2D[14] = gdnative.MethodOf("Line2D\000", "set_gradient\000", 2756054477)
		methodLine2D[15] = gdnative.MethodOf("Line2D\000", "get_gradient\000", 132272999)
		methodLine2D[16] = gdnative.MethodOf("Line2D\000", "set_texture\000", 4051416890)
		methodLine2D[17] = gdnative.MethodOf("Line2D\000", "get_texture\000", 3635182373)
		methodLine2D[18] = gdnative.MethodOf("Line2D\000", "set_texture_mode\000", 1952559516)
		methodLine2D[19] = gdnative.MethodOf("Line2D\000", "get_texture_mode\000", 2341040722)
		methodLine2D[20] = gdnative.MethodOf("Line2D\000", "set_joint_mode\000", 604292979)
		methodLine2D[21] = gdnative.MethodOf("Line2D\000", "get_joint_mode\000", 2546544037)
		methodLine2D[22] = gdnative.MethodOf("Line2D\000", "set_begin_cap_mode\000", 1669024546)
		methodLine2D[23] = gdnative.MethodOf("Line2D\000", "get_begin_cap_mode\000", 1107511441)
		methodLine2D[24] = gdnative.MethodOf("Line2D\000", "set_end_cap_mode\000", 1669024546)
		methodLine2D[25] = gdnative.MethodOf("Line2D\000", "get_end_cap_mode\000", 1107511441)
		methodLine2D[26] = gdnative.MethodOf("Line2D\000", "set_sharp_limit\000", 373806689)
		methodLine2D[27] = gdnative.MethodOf("Line2D\000", "get_sharp_limit\000", 1740695150)
		methodLine2D[28] = gdnative.MethodOf("Line2D\000", "set_round_precision\000", 1286410249)
		methodLine2D[29] = gdnative.MethodOf("Line2D\000", "get_round_precision\000", 3905245786)
		methodLine2D[30] = gdnative.MethodOf("Line2D\000", "set_antialiased\000", 2586408642)
		methodLine2D[31] = gdnative.MethodOf("Line2D\000", "get_antialiased\000", 36873697)
		methodLineEdit[0] = gdnative.MethodOf("LineEdit\000", "set_horizontal_alignment\000", 2312603777)
		methodLineEdit[1] = gdnative.MethodOf("LineEdit\000", "get_horizontal_alignment\000", 341400642)
		methodLineEdit[2] = gdnative.MethodOf("LineEdit\000", "clear\000", 3218959716)
		methodLineEdit[3] = gdnative.MethodOf("LineEdit\000", "select\000", 1328111411)
		methodLineEdit[4] = gdnative.MethodOf("LineEdit\000", "select_all\000", 3218959716)
		methodLineEdit[5] = gdnative.MethodOf("LineEdit\000", "deselect\000", 3218959716)
		methodLineEdit[6] = gdnative.MethodOf("LineEdit\000", "has_selection\000", 36873697)
		methodLineEdit[7] = gdnative.MethodOf("LineEdit\000", "get_selection_from_column\000", 3905245786)
		methodLineEdit[8] = gdnative.MethodOf("LineEdit\000", "get_selection_to_column\000", 3905245786)
		methodLineEdit[9] = gdnative.MethodOf("LineEdit\000", "set_text\000", 83702148)
		methodLineEdit[10] = gdnative.MethodOf("LineEdit\000", "get_text\000", 201670096)
		methodLineEdit[11] = gdnative.MethodOf("LineEdit\000", "get_draw_control_chars\000", 36873697)
		methodLineEdit[12] = gdnative.MethodOf("LineEdit\000", "set_draw_control_chars\000", 2586408642)
		methodLineEdit[13] = gdnative.MethodOf("LineEdit\000", "set_text_direction\000", 119160795)
		methodLineEdit[14] = gdnative.MethodOf("LineEdit\000", "get_text_direction\000", 797257663)
		methodLineEdit[15] = gdnative.MethodOf("LineEdit\000", "set_language\000", 83702148)
		methodLineEdit[16] = gdnative.MethodOf("LineEdit\000", "get_language\000", 201670096)
		methodLineEdit[17] = gdnative.MethodOf("LineEdit\000", "set_structured_text_bidi_override\000", 55961453)
		methodLineEdit[18] = gdnative.MethodOf("LineEdit\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLineEdit[19] = gdnative.MethodOf("LineEdit\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLineEdit[20] = gdnative.MethodOf("LineEdit\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLineEdit[21] = gdnative.MethodOf("LineEdit\000", "set_placeholder\000", 83702148)
		methodLineEdit[22] = gdnative.MethodOf("LineEdit\000", "get_placeholder\000", 201670096)
		methodLineEdit[23] = gdnative.MethodOf("LineEdit\000", "set_caret_column\000", 1286410249)
		methodLineEdit[24] = gdnative.MethodOf("LineEdit\000", "get_caret_column\000", 3905245786)
		methodLineEdit[25] = gdnative.MethodOf("LineEdit\000", "get_scroll_offset\000", 3905245786)
		methodLineEdit[26] = gdnative.MethodOf("LineEdit\000", "set_expand_to_text_length_enabled\000", 2586408642)
		methodLineEdit[27] = gdnative.MethodOf("LineEdit\000", "is_expand_to_text_length_enabled\000", 36873697)
		methodLineEdit[28] = gdnative.MethodOf("LineEdit\000", "set_caret_blink_enabled\000", 2586408642)
		methodLineEdit[29] = gdnative.MethodOf("LineEdit\000", "is_caret_blink_enabled\000", 36873697)
		methodLineEdit[30] = gdnative.MethodOf("LineEdit\000", "set_caret_mid_grapheme_enabled\000", 2586408642)
		methodLineEdit[31] = gdnative.MethodOf("LineEdit\000", "is_caret_mid_grapheme_enabled\000", 36873697)
		methodLineEdit[32] = gdnative.MethodOf("LineEdit\000", "set_caret_force_displayed\000", 2586408642)
		methodLineEdit[33] = gdnative.MethodOf("LineEdit\000", "is_caret_force_displayed\000", 36873697)
		methodLineEdit[34] = gdnative.MethodOf("LineEdit\000", "set_caret_blink_speed\000", 373806689)
		methodLineEdit[35] = gdnative.MethodOf("LineEdit\000", "get_caret_blink_speed\000", 1740695150)
		methodLineEdit[36] = gdnative.MethodOf("LineEdit\000", "set_max_length\000", 1286410249)
		methodLineEdit[37] = gdnative.MethodOf("LineEdit\000", "get_max_length\000", 3905245786)
		methodLineEdit[38] = gdnative.MethodOf("LineEdit\000", "insert_text_at_caret\000", 83702148)
		methodLineEdit[39] = gdnative.MethodOf("LineEdit\000", "delete_char_at_caret\000", 3218959716)
		methodLineEdit[40] = gdnative.MethodOf("LineEdit\000", "delete_text\000", 3937882851)
		methodLineEdit[41] = gdnative.MethodOf("LineEdit\000", "set_editable\000", 2586408642)
		methodLineEdit[42] = gdnative.MethodOf("LineEdit\000", "is_editable\000", 36873697)
		methodLineEdit[43] = gdnative.MethodOf("LineEdit\000", "set_secret\000", 2586408642)
		methodLineEdit[44] = gdnative.MethodOf("LineEdit\000", "is_secret\000", 36873697)
		methodLineEdit[45] = gdnative.MethodOf("LineEdit\000", "set_secret_character\000", 83702148)
		methodLineEdit[46] = gdnative.MethodOf("LineEdit\000", "get_secret_character\000", 201670096)
		methodLineEdit[47] = gdnative.MethodOf("LineEdit\000", "menu_option\000", 1286410249)
		methodLineEdit[48] = gdnative.MethodOf("LineEdit\000", "get_menu\000", 229722558)
		methodLineEdit[49] = gdnative.MethodOf("LineEdit\000", "is_menu_visible\000", 36873697)
		methodLineEdit[50] = gdnative.MethodOf("LineEdit\000", "set_context_menu_enabled\000", 2586408642)
		methodLineEdit[51] = gdnative.MethodOf("LineEdit\000", "is_context_menu_enabled\000", 2240911060)
		methodLineEdit[52] = gdnative.MethodOf("LineEdit\000", "set_virtual_keyboard_enabled\000", 2586408642)
		methodLineEdit[53] = gdnative.MethodOf("LineEdit\000", "is_virtual_keyboard_enabled\000", 36873697)
		methodLineEdit[54] = gdnative.MethodOf("LineEdit\000", "set_virtual_keyboard_type\000", 2696893573)
		methodLineEdit[55] = gdnative.MethodOf("LineEdit\000", "get_virtual_keyboard_type\000", 1928699316)
		methodLineEdit[56] = gdnative.MethodOf("LineEdit\000", "set_clear_button_enabled\000", 2586408642)
		methodLineEdit[57] = gdnative.MethodOf("LineEdit\000", "is_clear_button_enabled\000", 36873697)
		methodLineEdit[58] = gdnative.MethodOf("LineEdit\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodLineEdit[59] = gdnative.MethodOf("LineEdit\000", "is_shortcut_keys_enabled\000", 36873697)
		methodLineEdit[60] = gdnative.MethodOf("LineEdit\000", "set_middle_mouse_paste_enabled\000", 2586408642)
		methodLineEdit[61] = gdnative.MethodOf("LineEdit\000", "is_middle_mouse_paste_enabled\000", 36873697)
		methodLineEdit[62] = gdnative.MethodOf("LineEdit\000", "set_selecting_enabled\000", 2586408642)
		methodLineEdit[63] = gdnative.MethodOf("LineEdit\000", "is_selecting_enabled\000", 36873697)
		methodLineEdit[64] = gdnative.MethodOf("LineEdit\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodLineEdit[65] = gdnative.MethodOf("LineEdit\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodLineEdit[66] = gdnative.MethodOf("LineEdit\000", "set_right_icon\000", 4051416890)
		methodLineEdit[67] = gdnative.MethodOf("LineEdit\000", "get_right_icon\000", 255860311)
		methodLineEdit[68] = gdnative.MethodOf("LineEdit\000", "set_flat\000", 2586408642)
		methodLineEdit[69] = gdnative.MethodOf("LineEdit\000", "is_flat\000", 36873697)
		methodLinkButton[0] = gdnative.MethodOf("LinkButton\000", "set_text\000", 83702148)
		methodLinkButton[1] = gdnative.MethodOf("LinkButton\000", "get_text\000", 201670096)
		methodLinkButton[2] = gdnative.MethodOf("LinkButton\000", "set_text_direction\000", 119160795)
		methodLinkButton[3] = gdnative.MethodOf("LinkButton\000", "get_text_direction\000", 797257663)
		methodLinkButton[4] = gdnative.MethodOf("LinkButton\000", "set_language\000", 83702148)
		methodLinkButton[5] = gdnative.MethodOf("LinkButton\000", "get_language\000", 201670096)
		methodLinkButton[6] = gdnative.MethodOf("LinkButton\000", "set_underline_mode\000", 4032947085)
		methodLinkButton[7] = gdnative.MethodOf("LinkButton\000", "get_underline_mode\000", 568343738)
		methodLinkButton[8] = gdnative.MethodOf("LinkButton\000", "set_structured_text_bidi_override\000", 55961453)
		methodLinkButton[9] = gdnative.MethodOf("LinkButton\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLinkButton[10] = gdnative.MethodOf("LinkButton\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLinkButton[11] = gdnative.MethodOf("LinkButton\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodMarshalls[0] = gdnative.MethodOf("Marshalls\000", "variant_to_base64\000", 3876248563)
		methodMarshalls[1] = gdnative.MethodOf("Marshalls\000", "base64_to_variant\000", 218087648)
		methodMarshalls[2] = gdnative.MethodOf("Marshalls\000", "raw_to_base64\000", 3999417757)
		methodMarshalls[3] = gdnative.MethodOf("Marshalls\000", "base64_to_raw\000", 659035735)
		methodMarshalls[4] = gdnative.MethodOf("Marshalls\000", "utf8_to_base64\000", 1703090593)
		methodMarshalls[5] = gdnative.MethodOf("Marshalls\000", "base64_to_utf8\000", 1703090593)
		methodMaterial[0] = gdnative.MethodOf("Material\000", "set_next_pass\000", 2757459619)
		methodMaterial[1] = gdnative.MethodOf("Material\000", "get_next_pass\000", 5934680)
		methodMaterial[2] = gdnative.MethodOf("Material\000", "set_render_priority\000", 1286410249)
		methodMaterial[3] = gdnative.MethodOf("Material\000", "get_render_priority\000", 3905245786)
		methodMaterial[4] = gdnative.MethodOf("Material\000", "inspect_native_shader_code\000", 3218959716)
		methodMenuBar[0] = gdnative.MethodOf("MenuBar\000", "set_switch_on_hover\000", 2586408642)
		methodMenuBar[1] = gdnative.MethodOf("MenuBar\000", "is_switch_on_hover\000", 2240911060)
		methodMenuBar[2] = gdnative.MethodOf("MenuBar\000", "set_disable_shortcuts\000", 2586408642)
		methodMenuBar[3] = gdnative.MethodOf("MenuBar\000", "set_prefer_global_menu\000", 2586408642)
		methodMenuBar[4] = gdnative.MethodOf("MenuBar\000", "is_prefer_global_menu\000", 36873697)
		methodMenuBar[5] = gdnative.MethodOf("MenuBar\000", "is_native_menu\000", 36873697)
		methodMenuBar[6] = gdnative.MethodOf("MenuBar\000", "get_menu_count\000", 3905245786)
		methodMenuBar[7] = gdnative.MethodOf("MenuBar\000", "set_text_direction\000", 119160795)
		methodMenuBar[8] = gdnative.MethodOf("MenuBar\000", "get_text_direction\000", 797257663)
		methodMenuBar[9] = gdnative.MethodOf("MenuBar\000", "set_language\000", 83702148)
		methodMenuBar[10] = gdnative.MethodOf("MenuBar\000", "get_language\000", 201670096)
		methodMenuBar[11] = gdnative.MethodOf("MenuBar\000", "set_flat\000", 2586408642)
		methodMenuBar[12] = gdnative.MethodOf("MenuBar\000", "is_flat\000", 36873697)
		methodMenuBar[13] = gdnative.MethodOf("MenuBar\000", "set_start_index\000", 1286410249)
		methodMenuBar[14] = gdnative.MethodOf("MenuBar\000", "get_start_index\000", 3905245786)
		methodMenuBar[15] = gdnative.MethodOf("MenuBar\000", "set_menu_title\000", 501894301)
		methodMenuBar[16] = gdnative.MethodOf("MenuBar\000", "get_menu_title\000", 844755477)
		methodMenuBar[17] = gdnative.MethodOf("MenuBar\000", "set_menu_tooltip\000", 501894301)
		methodMenuBar[18] = gdnative.MethodOf("MenuBar\000", "get_menu_tooltip\000", 844755477)
		methodMenuBar[19] = gdnative.MethodOf("MenuBar\000", "set_menu_disabled\000", 300928843)
		methodMenuBar[20] = gdnative.MethodOf("MenuBar\000", "is_menu_disabled\000", 1116898809)
		methodMenuBar[21] = gdnative.MethodOf("MenuBar\000", "set_menu_hidden\000", 300928843)
		methodMenuBar[22] = gdnative.MethodOf("MenuBar\000", "is_menu_hidden\000", 1116898809)
		methodMenuBar[23] = gdnative.MethodOf("MenuBar\000", "set_shortcut_context\000", 1078189570)
		methodMenuBar[24] = gdnative.MethodOf("MenuBar\000", "get_shortcut_context\000", 3160264692)
		methodMenuBar[25] = gdnative.MethodOf("MenuBar\000", "get_menu_popup\000", 2100501353)
		methodMenuButton[0] = gdnative.MethodOf("MenuButton\000", "get_popup\000", 229722558)
		methodMenuButton[1] = gdnative.MethodOf("MenuButton\000", "set_switch_on_hover\000", 2586408642)
		methodMenuButton[2] = gdnative.MethodOf("MenuButton\000", "is_switch_on_hover\000", 2240911060)
		methodMenuButton[3] = gdnative.MethodOf("MenuButton\000", "set_disable_shortcuts\000", 2586408642)
		methodMenuButton[4] = gdnative.MethodOf("MenuButton\000", "set_item_count\000", 1286410249)
		methodMenuButton[5] = gdnative.MethodOf("MenuButton\000", "get_item_count\000", 3905245786)
		methodMesh[0] = gdnative.MethodOf("Mesh\000", "set_lightmap_size_hint\000", 1130785943)
		methodMesh[1] = gdnative.MethodOf("Mesh\000", "get_lightmap_size_hint\000", 3690982128)
		methodMesh[2] = gdnative.MethodOf("Mesh\000", "get_aabb\000", 1068685055)
		methodMesh[3] = gdnative.MethodOf("Mesh\000", "get_surface_count\000", 3905245786)
		methodMesh[4] = gdnative.MethodOf("Mesh\000", "surface_get_arrays\000", 663333327)
		methodMesh[5] = gdnative.MethodOf("Mesh\000", "surface_get_blend_shape_arrays\000", 663333327)
		methodMesh[6] = gdnative.MethodOf("Mesh\000", "surface_set_material\000", 3671737478)
		methodMesh[7] = gdnative.MethodOf("Mesh\000", "surface_get_material\000", 2897466400)
		methodMesh[8] = gdnative.MethodOf("Mesh\000", "create_trimesh_shape\000", 3214262478)
		methodMesh[9] = gdnative.MethodOf("Mesh\000", "create_convex_shape\000", 1330343779)
		methodMesh[10] = gdnative.MethodOf("Mesh\000", "create_outline\000", 1208642001)
		methodMesh[11] = gdnative.MethodOf("Mesh\000", "get_faces\000", 497664490)
		methodMesh[12] = gdnative.MethodOf("Mesh\000", "generate_triangle_mesh\000", 3476533166)
		methodMeshDataTool[0] = gdnative.MethodOf("MeshDataTool\000", "clear\000", 3218959716)
		methodMeshDataTool[1] = gdnative.MethodOf("MeshDataTool\000", "create_from_surface\000", 2727020678)
		methodMeshDataTool[2] = gdnative.MethodOf("MeshDataTool\000", "commit_to_surface\000", 3521099812)
		methodMeshDataTool[3] = gdnative.MethodOf("MeshDataTool\000", "get_format\000", 3905245786)
		methodMeshDataTool[4] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_count\000", 3905245786)
		methodMeshDataTool[5] = gdnative.MethodOf("MeshDataTool\000", "get_edge_count\000", 3905245786)
		methodMeshDataTool[6] = gdnative.MethodOf("MeshDataTool\000", "get_face_count\000", 3905245786)
		methodMeshDataTool[7] = gdnative.MethodOf("MeshDataTool\000", "set_vertex\000", 1530502735)
		methodMeshDataTool[8] = gdnative.MethodOf("MeshDataTool\000", "get_vertex\000", 711720468)
		methodMeshDataTool[9] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_normal\000", 1530502735)
		methodMeshDataTool[10] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_normal\000", 711720468)
		methodMeshDataTool[11] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_tangent\000", 1104099133)
		methodMeshDataTool[12] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_tangent\000", 1372055458)
		methodMeshDataTool[13] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_uv\000", 163021252)
		methodMeshDataTool[14] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_uv\000", 2299179447)
		methodMeshDataTool[15] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_uv2\000", 163021252)
		methodMeshDataTool[16] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_uv2\000", 2299179447)
		methodMeshDataTool[17] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_color\000", 2878471219)
		methodMeshDataTool[18] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_color\000", 3457211756)
		methodMeshDataTool[19] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_bones\000", 3500328261)
		methodMeshDataTool[20] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_bones\000", 1706082319)
		methodMeshDataTool[21] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_weights\000", 1345852415)
		methodMeshDataTool[22] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_weights\000", 1542882410)
		methodMeshDataTool[23] = gdnative.MethodOf("MeshDataTool\000", "set_vertex_meta\000", 2152698145)
		methodMeshDataTool[24] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_meta\000", 4227898402)
		methodMeshDataTool[25] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_edges\000", 1706082319)
		methodMeshDataTool[26] = gdnative.MethodOf("MeshDataTool\000", "get_vertex_faces\000", 1706082319)
		methodMeshDataTool[27] = gdnative.MethodOf("MeshDataTool\000", "get_edge_vertex\000", 3175239445)
		methodMeshDataTool[28] = gdnative.MethodOf("MeshDataTool\000", "get_edge_faces\000", 1706082319)
		methodMeshDataTool[29] = gdnative.MethodOf("MeshDataTool\000", "set_edge_meta\000", 2152698145)
		methodMeshDataTool[30] = gdnative.MethodOf("MeshDataTool\000", "get_edge_meta\000", 4227898402)
		methodMeshDataTool[31] = gdnative.MethodOf("MeshDataTool\000", "get_face_vertex\000", 3175239445)
		methodMeshDataTool[32] = gdnative.MethodOf("MeshDataTool\000", "get_face_edge\000", 3175239445)
		methodMeshDataTool[33] = gdnative.MethodOf("MeshDataTool\000", "set_face_meta\000", 2152698145)
		methodMeshDataTool[34] = gdnative.MethodOf("MeshDataTool\000", "get_face_meta\000", 4227898402)
		methodMeshDataTool[35] = gdnative.MethodOf("MeshDataTool\000", "get_face_normal\000", 711720468)
		methodMeshDataTool[36] = gdnative.MethodOf("MeshDataTool\000", "set_material\000", 2757459619)
		methodMeshDataTool[37] = gdnative.MethodOf("MeshDataTool\000", "get_material\000", 5934680)
		methodMeshInstance2D[0] = gdnative.MethodOf("MeshInstance2D\000", "set_mesh\000", 194775623)
		methodMeshInstance2D[1] = gdnative.MethodOf("MeshInstance2D\000", "get_mesh\000", 1808005922)
		methodMeshInstance2D[2] = gdnative.MethodOf("MeshInstance2D\000", "set_texture\000", 4051416890)
		methodMeshInstance2D[3] = gdnative.MethodOf("MeshInstance2D\000", "get_texture\000", 3635182373)
		methodMeshInstance2D[4] = gdnative.MethodOf("MeshInstance2D\000", "set_normal_map\000", 4051416890)
		methodMeshInstance2D[5] = gdnative.MethodOf("MeshInstance2D\000", "get_normal_map\000", 3635182373)
		methodMeshInstance3D[0] = gdnative.MethodOf("MeshInstance3D\000", "set_mesh\000", 194775623)
		methodMeshInstance3D[1] = gdnative.MethodOf("MeshInstance3D\000", "get_mesh\000", 1808005922)
		methodMeshInstance3D[2] = gdnative.MethodOf("MeshInstance3D\000", "set_skeleton_path\000", 1348162250)
		methodMeshInstance3D[3] = gdnative.MethodOf("MeshInstance3D\000", "get_skeleton_path\000", 277076166)
		methodMeshInstance3D[4] = gdnative.MethodOf("MeshInstance3D\000", "set_skin\000", 3971435618)
		methodMeshInstance3D[5] = gdnative.MethodOf("MeshInstance3D\000", "get_skin\000", 2074563878)
		methodMeshInstance3D[6] = gdnative.MethodOf("MeshInstance3D\000", "get_surface_override_material_count\000", 3905245786)
		methodMeshInstance3D[7] = gdnative.MethodOf("MeshInstance3D\000", "set_surface_override_material\000", 3671737478)
		methodMeshInstance3D[8] = gdnative.MethodOf("MeshInstance3D\000", "get_surface_override_material\000", 2897466400)
		methodMeshInstance3D[9] = gdnative.MethodOf("MeshInstance3D\000", "get_active_material\000", 2897466400)
		methodMeshInstance3D[10] = gdnative.MethodOf("MeshInstance3D\000", "create_trimesh_collision\000", 3218959716)
		methodMeshInstance3D[11] = gdnative.MethodOf("MeshInstance3D\000", "create_convex_collision\000", 2751962654)
		methodMeshInstance3D[12] = gdnative.MethodOf("MeshInstance3D\000", "create_multiple_convex_collisions\000", 3218959716)
		methodMeshInstance3D[13] = gdnative.MethodOf("MeshInstance3D\000", "get_blend_shape_count\000", 3905245786)
		methodMeshInstance3D[14] = gdnative.MethodOf("MeshInstance3D\000", "find_blend_shape_by_name\000", 4150868206)
		methodMeshInstance3D[15] = gdnative.MethodOf("MeshInstance3D\000", "get_blend_shape_value\000", 2339986948)
		methodMeshInstance3D[16] = gdnative.MethodOf("MeshInstance3D\000", "set_blend_shape_value\000", 1602489585)
		methodMeshInstance3D[17] = gdnative.MethodOf("MeshInstance3D\000", "create_debug_tangents\000", 3218959716)
		methodMeshLibrary[0] = gdnative.MethodOf("MeshLibrary\000", "create_item\000", 1286410249)
		methodMeshLibrary[1] = gdnative.MethodOf("MeshLibrary\000", "set_item_name\000", 501894301)
		methodMeshLibrary[2] = gdnative.MethodOf("MeshLibrary\000", "set_item_mesh\000", 969122797)
		methodMeshLibrary[3] = gdnative.MethodOf("MeshLibrary\000", "set_item_mesh_transform\000", 3616898986)
		methodMeshLibrary[4] = gdnative.MethodOf("MeshLibrary\000", "set_item_navmesh\000", 3483353960)
		methodMeshLibrary[5] = gdnative.MethodOf("MeshLibrary\000", "set_item_navmesh_transform\000", 3616898986)
		methodMeshLibrary[6] = gdnative.MethodOf("MeshLibrary\000", "set_item_shapes\000", 537221740)
		methodMeshLibrary[7] = gdnative.MethodOf("MeshLibrary\000", "set_item_preview\000", 666127730)
		methodMeshLibrary[8] = gdnative.MethodOf("MeshLibrary\000", "get_item_name\000", 844755477)
		methodMeshLibrary[9] = gdnative.MethodOf("MeshLibrary\000", "get_item_mesh\000", 1576363275)
		methodMeshLibrary[10] = gdnative.MethodOf("MeshLibrary\000", "get_item_mesh_transform\000", 1965739696)
		methodMeshLibrary[11] = gdnative.MethodOf("MeshLibrary\000", "get_item_navmesh\000", 2729647406)
		methodMeshLibrary[12] = gdnative.MethodOf("MeshLibrary\000", "get_item_navmesh_transform\000", 1965739696)
		methodMeshLibrary[13] = gdnative.MethodOf("MeshLibrary\000", "get_item_shapes\000", 663333327)
		methodMeshLibrary[14] = gdnative.MethodOf("MeshLibrary\000", "get_item_preview\000", 3536238170)
		methodMeshLibrary[15] = gdnative.MethodOf("MeshLibrary\000", "remove_item\000", 1286410249)
		methodMeshLibrary[16] = gdnative.MethodOf("MeshLibrary\000", "find_item_by_name\000", 1321353865)
		methodMeshLibrary[17] = gdnative.MethodOf("MeshLibrary\000", "clear\000", 3218959716)
		methodMeshLibrary[18] = gdnative.MethodOf("MeshLibrary\000", "get_item_list\000", 1930428628)
		methodMeshLibrary[19] = gdnative.MethodOf("MeshLibrary\000", "get_last_unused_item_id\000", 3905245786)
		methodMeshTexture[0] = gdnative.MethodOf("MeshTexture\000", "set_mesh\000", 194775623)
		methodMeshTexture[1] = gdnative.MethodOf("MeshTexture\000", "get_mesh\000", 1808005922)
		methodMeshTexture[2] = gdnative.MethodOf("MeshTexture\000", "set_image_size\000", 743155724)
		methodMeshTexture[3] = gdnative.MethodOf("MeshTexture\000", "get_image_size\000", 3341600327)
		methodMeshTexture[4] = gdnative.MethodOf("MeshTexture\000", "set_base_texture\000", 4051416890)
		methodMeshTexture[5] = gdnative.MethodOf("MeshTexture\000", "get_base_texture\000", 3635182373)
		methodMethodTweener[0] = gdnative.MethodOf("MethodTweener\000", "set_delay\000", 266477812)
		methodMethodTweener[1] = gdnative.MethodOf("MethodTweener\000", "set_trans\000", 3740975367)
		methodMethodTweener[2] = gdnative.MethodOf("MethodTweener\000", "set_ease\000", 315540545)
		methodMissingNode[0] = gdnative.MethodOf("MissingNode\000", "set_original_class\000", 83702148)
		methodMissingNode[1] = gdnative.MethodOf("MissingNode\000", "get_original_class\000", 201670096)
		methodMissingNode[2] = gdnative.MethodOf("MissingNode\000", "set_recording_properties\000", 2586408642)
		methodMissingNode[3] = gdnative.MethodOf("MissingNode\000", "is_recording_properties\000", 36873697)
		methodMissingResource[0] = gdnative.MethodOf("MissingResource\000", "set_original_class\000", 83702148)
		methodMissingResource[1] = gdnative.MethodOf("MissingResource\000", "get_original_class\000", 201670096)
		methodMissingResource[2] = gdnative.MethodOf("MissingResource\000", "set_recording_properties\000", 2586408642)
		methodMissingResource[3] = gdnative.MethodOf("MissingResource\000", "is_recording_properties\000", 36873697)
		methodMobileVRInterface[0] = gdnative.MethodOf("MobileVRInterface\000", "set_eye_height\000", 373806689)
		methodMobileVRInterface[1] = gdnative.MethodOf("MobileVRInterface\000", "get_eye_height\000", 1740695150)
		methodMobileVRInterface[2] = gdnative.MethodOf("MobileVRInterface\000", "set_iod\000", 373806689)
		methodMobileVRInterface[3] = gdnative.MethodOf("MobileVRInterface\000", "get_iod\000", 1740695150)
		methodMobileVRInterface[4] = gdnative.MethodOf("MobileVRInterface\000", "set_display_width\000", 373806689)
		methodMobileVRInterface[5] = gdnative.MethodOf("MobileVRInterface\000", "get_display_width\000", 1740695150)
		methodMobileVRInterface[6] = gdnative.MethodOf("MobileVRInterface\000", "set_display_to_lens\000", 373806689)
		methodMobileVRInterface[7] = gdnative.MethodOf("MobileVRInterface\000", "get_display_to_lens\000", 1740695150)
		methodMobileVRInterface[8] = gdnative.MethodOf("MobileVRInterface\000", "set_oversample\000", 373806689)
		methodMobileVRInterface[9] = gdnative.MethodOf("MobileVRInterface\000", "get_oversample\000", 1740695150)
		methodMobileVRInterface[10] = gdnative.MethodOf("MobileVRInterface\000", "set_k1\000", 373806689)
		methodMobileVRInterface[11] = gdnative.MethodOf("MobileVRInterface\000", "get_k1\000", 1740695150)
		methodMobileVRInterface[12] = gdnative.MethodOf("MobileVRInterface\000", "set_k2\000", 373806689)
		methodMobileVRInterface[13] = gdnative.MethodOf("MobileVRInterface\000", "get_k2\000", 1740695150)
		methodMovieWriter[0] = gdnative.MethodOf("MovieWriter\000", "add_writer\000", 4023702871)
		methodMultiMesh[0] = gdnative.MethodOf("MultiMesh\000", "set_mesh\000", 194775623)
		methodMultiMesh[1] = gdnative.MethodOf("MultiMesh\000", "get_mesh\000", 1808005922)
		methodMultiMesh[2] = gdnative.MethodOf("MultiMesh\000", "set_use_colors\000", 2586408642)
		methodMultiMesh[3] = gdnative.MethodOf("MultiMesh\000", "is_using_colors\000", 36873697)
		methodMultiMesh[4] = gdnative.MethodOf("MultiMesh\000", "set_use_custom_data\000", 2586408642)
		methodMultiMesh[5] = gdnative.MethodOf("MultiMesh\000", "is_using_custom_data\000", 36873697)
		methodMultiMesh[6] = gdnative.MethodOf("MultiMesh\000", "set_transform_format\000", 2404750322)
		methodMultiMesh[7] = gdnative.MethodOf("MultiMesh\000", "get_transform_format\000", 2444156481)
		methodMultiMesh[8] = gdnative.MethodOf("MultiMesh\000", "set_instance_count\000", 1286410249)
		methodMultiMesh[9] = gdnative.MethodOf("MultiMesh\000", "get_instance_count\000", 3905245786)
		methodMultiMesh[10] = gdnative.MethodOf("MultiMesh\000", "set_visible_instance_count\000", 1286410249)
		methodMultiMesh[11] = gdnative.MethodOf("MultiMesh\000", "get_visible_instance_count\000", 3905245786)
		methodMultiMesh[12] = gdnative.MethodOf("MultiMesh\000", "set_instance_transform\000", 3616898986)
		methodMultiMesh[13] = gdnative.MethodOf("MultiMesh\000", "set_instance_transform_2d\000", 30160968)
		methodMultiMesh[14] = gdnative.MethodOf("MultiMesh\000", "get_instance_transform\000", 1965739696)
		methodMultiMesh[15] = gdnative.MethodOf("MultiMesh\000", "get_instance_transform_2d\000", 3836996910)
		methodMultiMesh[16] = gdnative.MethodOf("MultiMesh\000", "set_instance_color\000", 2878471219)
		methodMultiMesh[17] = gdnative.MethodOf("MultiMesh\000", "get_instance_color\000", 3457211756)
		methodMultiMesh[18] = gdnative.MethodOf("MultiMesh\000", "set_instance_custom_data\000", 2878471219)
		methodMultiMesh[19] = gdnative.MethodOf("MultiMesh\000", "get_instance_custom_data\000", 3457211756)
		methodMultiMesh[20] = gdnative.MethodOf("MultiMesh\000", "get_aabb\000", 1068685055)
		methodMultiMesh[21] = gdnative.MethodOf("MultiMesh\000", "get_buffer\000", 675695659)
		methodMultiMesh[22] = gdnative.MethodOf("MultiMesh\000", "set_buffer\000", 2899603908)
		methodMultiMeshInstance2D[0] = gdnative.MethodOf("MultiMeshInstance2D\000", "set_multimesh\000", 2246127404)
		methodMultiMeshInstance2D[1] = gdnative.MethodOf("MultiMeshInstance2D\000", "get_multimesh\000", 1385450523)
		methodMultiMeshInstance2D[2] = gdnative.MethodOf("MultiMeshInstance2D\000", "set_texture\000", 4051416890)
		methodMultiMeshInstance2D[3] = gdnative.MethodOf("MultiMeshInstance2D\000", "get_texture\000", 3635182373)
		methodMultiMeshInstance2D[4] = gdnative.MethodOf("MultiMeshInstance2D\000", "set_normal_map\000", 4051416890)
		methodMultiMeshInstance2D[5] = gdnative.MethodOf("MultiMeshInstance2D\000", "get_normal_map\000", 3635182373)
		methodMultiMeshInstance3D[0] = gdnative.MethodOf("MultiMeshInstance3D\000", "set_multimesh\000", 2246127404)
		methodMultiMeshInstance3D[1] = gdnative.MethodOf("MultiMeshInstance3D\000", "get_multimesh\000", 1385450523)
		methodMultiplayerAPI[0] = gdnative.MethodOf("MultiplayerAPI\000", "has_multiplayer_peer\000", 2240911060)
		methodMultiplayerAPI[1] = gdnative.MethodOf("MultiplayerAPI\000", "get_multiplayer_peer\000", 3223692825)
		methodMultiplayerAPI[2] = gdnative.MethodOf("MultiplayerAPI\000", "set_multiplayer_peer\000", 3694835298)
		methodMultiplayerAPI[3] = gdnative.MethodOf("MultiplayerAPI\000", "get_unique_id\000", 2455072627)
		methodMultiplayerAPI[4] = gdnative.MethodOf("MultiplayerAPI\000", "is_server\000", 2240911060)
		methodMultiplayerAPI[5] = gdnative.MethodOf("MultiplayerAPI\000", "get_remote_sender_id\000", 2455072627)
		methodMultiplayerAPI[6] = gdnative.MethodOf("MultiplayerAPI\000", "poll\000", 166280745)
		methodMultiplayerAPI[7] = gdnative.MethodOf("MultiplayerAPI\000", "rpc\000", 1833408346)
		methodMultiplayerAPI[8] = gdnative.MethodOf("MultiplayerAPI\000", "object_configuration_add\000", 1171879464)
		methodMultiplayerAPI[9] = gdnative.MethodOf("MultiplayerAPI\000", "object_configuration_remove\000", 1171879464)
		methodMultiplayerAPI[10] = gdnative.MethodOf("MultiplayerAPI\000", "get_peers\000", 969006518)
		methodMultiplayerAPI[11] = gdnative.MethodOf("MultiplayerAPI\000", "set_default_interface\000", 3304788590)
		methodMultiplayerAPI[12] = gdnative.MethodOf("MultiplayerAPI\000", "get_default_interface\000", 2737447660)
		methodMultiplayerAPI[13] = gdnative.MethodOf("MultiplayerAPI\000", "create_default_interface\000", 3294156723)
		methodMultiplayerPeer[0] = gdnative.MethodOf("MultiplayerPeer\000", "set_transfer_channel\000", 1286410249)
		methodMultiplayerPeer[1] = gdnative.MethodOf("MultiplayerPeer\000", "get_transfer_channel\000", 3905245786)
		methodMultiplayerPeer[2] = gdnative.MethodOf("MultiplayerPeer\000", "set_transfer_mode\000", 950411049)
		methodMultiplayerPeer[3] = gdnative.MethodOf("MultiplayerPeer\000", "get_transfer_mode\000", 3369852622)
		methodMultiplayerPeer[4] = gdnative.MethodOf("MultiplayerPeer\000", "set_target_peer\000", 1286410249)
		methodMultiplayerPeer[5] = gdnative.MethodOf("MultiplayerPeer\000", "get_packet_peer\000", 3905245786)
		methodMultiplayerPeer[6] = gdnative.MethodOf("MultiplayerPeer\000", "poll\000", 3218959716)
		methodMultiplayerPeer[7] = gdnative.MethodOf("MultiplayerPeer\000", "get_connection_status\000", 2147374275)
		methodMultiplayerPeer[8] = gdnative.MethodOf("MultiplayerPeer\000", "get_unique_id\000", 3905245786)
		methodMultiplayerPeer[9] = gdnative.MethodOf("MultiplayerPeer\000", "generate_unique_id\000", 3905245786)
		methodMultiplayerPeer[10] = gdnative.MethodOf("MultiplayerPeer\000", "set_refuse_new_connections\000", 2586408642)
		methodMultiplayerPeer[11] = gdnative.MethodOf("MultiplayerPeer\000", "is_refusing_new_connections\000", 36873697)
		methodMultiplayerSpawner[0] = gdnative.MethodOf("MultiplayerSpawner\000", "add_spawnable_scene\000", 83702148)
		methodMultiplayerSpawner[1] = gdnative.MethodOf("MultiplayerSpawner\000", "get_spawnable_scene_count\000", 3905245786)
		methodMultiplayerSpawner[2] = gdnative.MethodOf("MultiplayerSpawner\000", "get_spawnable_scene\000", 844755477)
		methodMultiplayerSpawner[3] = gdnative.MethodOf("MultiplayerSpawner\000", "clear_spawnable_scenes\000", 3218959716)
		methodMultiplayerSpawner[4] = gdnative.MethodOf("MultiplayerSpawner\000", "spawn\000", 1991184589)
		methodMultiplayerSpawner[5] = gdnative.MethodOf("MultiplayerSpawner\000", "get_spawn_path\000", 4075236667)
		methodMultiplayerSpawner[6] = gdnative.MethodOf("MultiplayerSpawner\000", "set_spawn_path\000", 1348162250)
		methodMultiplayerSpawner[7] = gdnative.MethodOf("MultiplayerSpawner\000", "get_spawn_limit\000", 3905245786)
		methodMultiplayerSpawner[8] = gdnative.MethodOf("MultiplayerSpawner\000", "set_spawn_limit\000", 1286410249)
		methodMultiplayerSynchronizer[0] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_root_path\000", 1348162250)
		methodMultiplayerSynchronizer[1] = gdnative.MethodOf("MultiplayerSynchronizer\000", "get_root_path\000", 4075236667)
		methodMultiplayerSynchronizer[2] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_replication_interval\000", 373806689)
		methodMultiplayerSynchronizer[3] = gdnative.MethodOf("MultiplayerSynchronizer\000", "get_replication_interval\000", 1740695150)
		methodMultiplayerSynchronizer[4] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_replication_config\000", 3889206742)
		methodMultiplayerSynchronizer[5] = gdnative.MethodOf("MultiplayerSynchronizer\000", "get_replication_config\000", 3200254614)
		methodMultiplayerSynchronizer[6] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_visibility_update_mode\000", 3494860300)
		methodMultiplayerSynchronizer[7] = gdnative.MethodOf("MultiplayerSynchronizer\000", "get_visibility_update_mode\000", 3352241418)
		methodMultiplayerSynchronizer[8] = gdnative.MethodOf("MultiplayerSynchronizer\000", "update_visibility\000", 1995695955)
		methodMultiplayerSynchronizer[9] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_visibility_public\000", 2586408642)
		methodMultiplayerSynchronizer[10] = gdnative.MethodOf("MultiplayerSynchronizer\000", "is_visibility_public\000", 36873697)
		methodMultiplayerSynchronizer[11] = gdnative.MethodOf("MultiplayerSynchronizer\000", "add_visibility_filter\000", 1611583062)
		methodMultiplayerSynchronizer[12] = gdnative.MethodOf("MultiplayerSynchronizer\000", "remove_visibility_filter\000", 1611583062)
		methodMultiplayerSynchronizer[13] = gdnative.MethodOf("MultiplayerSynchronizer\000", "set_visibility_for\000", 300928843)
		methodMultiplayerSynchronizer[14] = gdnative.MethodOf("MultiplayerSynchronizer\000", "get_visibility_for\000", 1116898809)
		methodMutex[0] = gdnative.MethodOf("Mutex\000", "lock\000", 3218959716)
		methodMutex[1] = gdnative.MethodOf("Mutex\000", "try_lock\000", 166280745)
		methodMutex[2] = gdnative.MethodOf("Mutex\000", "unlock\000", 3218959716)
		methodNativeExtension[0] = gdnative.MethodOf("NativeExtension\000", "open_library\000", 852856452)
		methodNativeExtension[1] = gdnative.MethodOf("NativeExtension\000", "close_library\000", 3218959716)
		methodNativeExtension[2] = gdnative.MethodOf("NativeExtension\000", "is_library_open\000", 36873697)
		methodNativeExtension[3] = gdnative.MethodOf("NativeExtension\000", "get_minimum_library_initialization_level\000", 3541246554)
		methodNativeExtension[4] = gdnative.MethodOf("NativeExtension\000", "initialize_library\000", 3743496778)
		methodNativeExtensionManager[0] = gdnative.MethodOf("NativeExtensionManager\000", "load_extension\000", 3900395898)
		methodNativeExtensionManager[1] = gdnative.MethodOf("NativeExtensionManager\000", "reload_extension\000", 3900395898)
		methodNativeExtensionManager[2] = gdnative.MethodOf("NativeExtensionManager\000", "unload_extension\000", 3900395898)
		methodNativeExtensionManager[3] = gdnative.MethodOf("NativeExtensionManager\000", "is_extension_loaded\000", 3927539163)
		methodNativeExtensionManager[4] = gdnative.MethodOf("NativeExtensionManager\000", "get_loaded_extensions\000", 1139954409)
		methodNativeExtensionManager[5] = gdnative.MethodOf("NativeExtensionManager\000", "get_extension\000", 3065478200)
		methodNavigationAgent2D[0] = gdnative.MethodOf("NavigationAgent2D\000", "get_rid\000", 2944877500)
		methodNavigationAgent2D[1] = gdnative.MethodOf("NavigationAgent2D\000", "set_avoidance_enabled\000", 2586408642)
		methodNavigationAgent2D[2] = gdnative.MethodOf("NavigationAgent2D\000", "get_avoidance_enabled\000", 36873697)
		methodNavigationAgent2D[3] = gdnative.MethodOf("NavigationAgent2D\000", "set_path_desired_distance\000", 373806689)
		methodNavigationAgent2D[4] = gdnative.MethodOf("NavigationAgent2D\000", "get_path_desired_distance\000", 1740695150)
		methodNavigationAgent2D[5] = gdnative.MethodOf("NavigationAgent2D\000", "set_target_desired_distance\000", 373806689)
		methodNavigationAgent2D[6] = gdnative.MethodOf("NavigationAgent2D\000", "get_target_desired_distance\000", 1740695150)
		methodNavigationAgent2D[7] = gdnative.MethodOf("NavigationAgent2D\000", "set_radius\000", 373806689)
		methodNavigationAgent2D[8] = gdnative.MethodOf("NavigationAgent2D\000", "get_radius\000", 1740695150)
		methodNavigationAgent2D[9] = gdnative.MethodOf("NavigationAgent2D\000", "set_neighbor_dist\000", 373806689)
		methodNavigationAgent2D[10] = gdnative.MethodOf("NavigationAgent2D\000", "get_neighbor_dist\000", 1740695150)
		methodNavigationAgent2D[11] = gdnative.MethodOf("NavigationAgent2D\000", "set_max_neighbors\000", 1286410249)
		methodNavigationAgent2D[12] = gdnative.MethodOf("NavigationAgent2D\000", "get_max_neighbors\000", 3905245786)
		methodNavigationAgent2D[13] = gdnative.MethodOf("NavigationAgent2D\000", "set_time_horizon\000", 373806689)
		methodNavigationAgent2D[14] = gdnative.MethodOf("NavigationAgent2D\000", "get_time_horizon\000", 1740695150)
		methodNavigationAgent2D[15] = gdnative.MethodOf("NavigationAgent2D\000", "set_max_speed\000", 373806689)
		methodNavigationAgent2D[16] = gdnative.MethodOf("NavigationAgent2D\000", "get_max_speed\000", 1740695150)
		methodNavigationAgent2D[17] = gdnative.MethodOf("NavigationAgent2D\000", "set_path_max_distance\000", 373806689)
		methodNavigationAgent2D[18] = gdnative.MethodOf("NavigationAgent2D\000", "get_path_max_distance\000", 191475506)
		methodNavigationAgent2D[19] = gdnative.MethodOf("NavigationAgent2D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationAgent2D[20] = gdnative.MethodOf("NavigationAgent2D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationAgent2D[21] = gdnative.MethodOf("NavigationAgent2D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationAgent2D[22] = gdnative.MethodOf("NavigationAgent2D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationAgent2D[23] = gdnative.MethodOf("NavigationAgent2D\000", "set_navigation_map\000", 2722037293)
		methodNavigationAgent2D[24] = gdnative.MethodOf("NavigationAgent2D\000", "get_navigation_map\000", 2944877500)
		methodNavigationAgent2D[25] = gdnative.MethodOf("NavigationAgent2D\000", "set_target_location\000", 743155724)
		methodNavigationAgent2D[26] = gdnative.MethodOf("NavigationAgent2D\000", "get_target_location\000", 3341600327)
		methodNavigationAgent2D[27] = gdnative.MethodOf("NavigationAgent2D\000", "get_next_location\000", 1497962370)
		methodNavigationAgent2D[28] = gdnative.MethodOf("NavigationAgent2D\000", "distance_to_target\000", 1740695150)
		methodNavigationAgent2D[29] = gdnative.MethodOf("NavigationAgent2D\000", "set_velocity\000", 743155724)
		methodNavigationAgent2D[30] = gdnative.MethodOf("NavigationAgent2D\000", "get_nav_path\000", 2961356807)
		methodNavigationAgent2D[31] = gdnative.MethodOf("NavigationAgent2D\000", "get_nav_path_index\000", 3905245786)
		methodNavigationAgent2D[32] = gdnative.MethodOf("NavigationAgent2D\000", "is_target_reached\000", 36873697)
		methodNavigationAgent2D[33] = gdnative.MethodOf("NavigationAgent2D\000", "is_target_reachable\000", 2240911060)
		methodNavigationAgent2D[34] = gdnative.MethodOf("NavigationAgent2D\000", "is_navigation_finished\000", 2240911060)
		methodNavigationAgent2D[35] = gdnative.MethodOf("NavigationAgent2D\000", "get_final_location\000", 1497962370)
		methodNavigationAgent3D[0] = gdnative.MethodOf("NavigationAgent3D\000", "get_rid\000", 2944877500)
		methodNavigationAgent3D[1] = gdnative.MethodOf("NavigationAgent3D\000", "set_avoidance_enabled\000", 2586408642)
		methodNavigationAgent3D[2] = gdnative.MethodOf("NavigationAgent3D\000", "get_avoidance_enabled\000", 36873697)
		methodNavigationAgent3D[3] = gdnative.MethodOf("NavigationAgent3D\000", "set_path_desired_distance\000", 373806689)
		methodNavigationAgent3D[4] = gdnative.MethodOf("NavigationAgent3D\000", "get_path_desired_distance\000", 1740695150)
		methodNavigationAgent3D[5] = gdnative.MethodOf("NavigationAgent3D\000", "set_target_desired_distance\000", 373806689)
		methodNavigationAgent3D[6] = gdnative.MethodOf("NavigationAgent3D\000", "get_target_desired_distance\000", 1740695150)
		methodNavigationAgent3D[7] = gdnative.MethodOf("NavigationAgent3D\000", "set_radius\000", 373806689)
		methodNavigationAgent3D[8] = gdnative.MethodOf("NavigationAgent3D\000", "get_radius\000", 1740695150)
		methodNavigationAgent3D[9] = gdnative.MethodOf("NavigationAgent3D\000", "set_agent_height_offset\000", 373806689)
		methodNavigationAgent3D[10] = gdnative.MethodOf("NavigationAgent3D\000", "get_agent_height_offset\000", 1740695150)
		methodNavigationAgent3D[11] = gdnative.MethodOf("NavigationAgent3D\000", "set_ignore_y\000", 2586408642)
		methodNavigationAgent3D[12] = gdnative.MethodOf("NavigationAgent3D\000", "get_ignore_y\000", 36873697)
		methodNavigationAgent3D[13] = gdnative.MethodOf("NavigationAgent3D\000", "set_neighbor_dist\000", 373806689)
		methodNavigationAgent3D[14] = gdnative.MethodOf("NavigationAgent3D\000", "get_neighbor_dist\000", 1740695150)
		methodNavigationAgent3D[15] = gdnative.MethodOf("NavigationAgent3D\000", "set_max_neighbors\000", 1286410249)
		methodNavigationAgent3D[16] = gdnative.MethodOf("NavigationAgent3D\000", "get_max_neighbors\000", 3905245786)
		methodNavigationAgent3D[17] = gdnative.MethodOf("NavigationAgent3D\000", "set_time_horizon\000", 373806689)
		methodNavigationAgent3D[18] = gdnative.MethodOf("NavigationAgent3D\000", "get_time_horizon\000", 1740695150)
		methodNavigationAgent3D[19] = gdnative.MethodOf("NavigationAgent3D\000", "set_max_speed\000", 373806689)
		methodNavigationAgent3D[20] = gdnative.MethodOf("NavigationAgent3D\000", "get_max_speed\000", 1740695150)
		methodNavigationAgent3D[21] = gdnative.MethodOf("NavigationAgent3D\000", "set_path_max_distance\000", 373806689)
		methodNavigationAgent3D[22] = gdnative.MethodOf("NavigationAgent3D\000", "get_path_max_distance\000", 191475506)
		methodNavigationAgent3D[23] = gdnative.MethodOf("NavigationAgent3D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationAgent3D[24] = gdnative.MethodOf("NavigationAgent3D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationAgent3D[25] = gdnative.MethodOf("NavigationAgent3D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationAgent3D[26] = gdnative.MethodOf("NavigationAgent3D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationAgent3D[27] = gdnative.MethodOf("NavigationAgent3D\000", "set_navigation_map\000", 2722037293)
		methodNavigationAgent3D[28] = gdnative.MethodOf("NavigationAgent3D\000", "get_navigation_map\000", 2944877500)
		methodNavigationAgent3D[29] = gdnative.MethodOf("NavigationAgent3D\000", "set_target_location\000", 3460891852)
		methodNavigationAgent3D[30] = gdnative.MethodOf("NavigationAgent3D\000", "get_target_location\000", 3360562783)
		methodNavigationAgent3D[31] = gdnative.MethodOf("NavigationAgent3D\000", "get_next_location\000", 3783033775)
		methodNavigationAgent3D[32] = gdnative.MethodOf("NavigationAgent3D\000", "distance_to_target\000", 1740695150)
		methodNavigationAgent3D[33] = gdnative.MethodOf("NavigationAgent3D\000", "set_velocity\000", 3460891852)
		methodNavigationAgent3D[34] = gdnative.MethodOf("NavigationAgent3D\000", "get_nav_path\000", 497664490)
		methodNavigationAgent3D[35] = gdnative.MethodOf("NavigationAgent3D\000", "get_nav_path_index\000", 3905245786)
		methodNavigationAgent3D[36] = gdnative.MethodOf("NavigationAgent3D\000", "is_target_reached\000", 36873697)
		methodNavigationAgent3D[37] = gdnative.MethodOf("NavigationAgent3D\000", "is_target_reachable\000", 2240911060)
		methodNavigationAgent3D[38] = gdnative.MethodOf("NavigationAgent3D\000", "is_navigation_finished\000", 2240911060)
		methodNavigationAgent3D[39] = gdnative.MethodOf("NavigationAgent3D\000", "get_final_location\000", 3783033775)
		methodNavigationMesh[0] = gdnative.MethodOf("NavigationMesh\000", "set_sample_partition_type\000", 2472437533)
		methodNavigationMesh[1] = gdnative.MethodOf("NavigationMesh\000", "get_sample_partition_type\000", 833513918)
		methodNavigationMesh[2] = gdnative.MethodOf("NavigationMesh\000", "set_parsed_geometry_type\000", 3064713163)
		methodNavigationMesh[3] = gdnative.MethodOf("NavigationMesh\000", "get_parsed_geometry_type\000", 3928011953)
		methodNavigationMesh[4] = gdnative.MethodOf("NavigationMesh\000", "set_collision_mask\000", 1286410249)
		methodNavigationMesh[5] = gdnative.MethodOf("NavigationMesh\000", "get_collision_mask\000", 3905245786)
		methodNavigationMesh[6] = gdnative.MethodOf("NavigationMesh\000", "set_collision_mask_value\000", 300928843)
		methodNavigationMesh[7] = gdnative.MethodOf("NavigationMesh\000", "get_collision_mask_value\000", 1116898809)
		methodNavigationMesh[8] = gdnative.MethodOf("NavigationMesh\000", "set_source_geometry_mode\000", 2700825194)
		methodNavigationMesh[9] = gdnative.MethodOf("NavigationMesh\000", "get_source_geometry_mode\000", 2770484141)
		methodNavigationMesh[10] = gdnative.MethodOf("NavigationMesh\000", "set_source_group_name\000", 3304788590)
		methodNavigationMesh[11] = gdnative.MethodOf("NavigationMesh\000", "get_source_group_name\000", 2002593661)
		methodNavigationMesh[12] = gdnative.MethodOf("NavigationMesh\000", "set_cell_size\000", 373806689)
		methodNavigationMesh[13] = gdnative.MethodOf("NavigationMesh\000", "get_cell_size\000", 1740695150)
		methodNavigationMesh[14] = gdnative.MethodOf("NavigationMesh\000", "set_cell_height\000", 373806689)
		methodNavigationMesh[15] = gdnative.MethodOf("NavigationMesh\000", "get_cell_height\000", 1740695150)
		methodNavigationMesh[16] = gdnative.MethodOf("NavigationMesh\000", "set_agent_height\000", 373806689)
		methodNavigationMesh[17] = gdnative.MethodOf("NavigationMesh\000", "get_agent_height\000", 1740695150)
		methodNavigationMesh[18] = gdnative.MethodOf("NavigationMesh\000", "set_agent_radius\000", 373806689)
		methodNavigationMesh[19] = gdnative.MethodOf("NavigationMesh\000", "get_agent_radius\000", 191475506)
		methodNavigationMesh[20] = gdnative.MethodOf("NavigationMesh\000", "set_agent_max_climb\000", 373806689)
		methodNavigationMesh[21] = gdnative.MethodOf("NavigationMesh\000", "get_agent_max_climb\000", 1740695150)
		methodNavigationMesh[22] = gdnative.MethodOf("NavigationMesh\000", "set_agent_max_slope\000", 373806689)
		methodNavigationMesh[23] = gdnative.MethodOf("NavigationMesh\000", "get_agent_max_slope\000", 1740695150)
		methodNavigationMesh[24] = gdnative.MethodOf("NavigationMesh\000", "set_region_min_size\000", 373806689)
		methodNavigationMesh[25] = gdnative.MethodOf("NavigationMesh\000", "get_region_min_size\000", 1740695150)
		methodNavigationMesh[26] = gdnative.MethodOf("NavigationMesh\000", "set_region_merge_size\000", 373806689)
		methodNavigationMesh[27] = gdnative.MethodOf("NavigationMesh\000", "get_region_merge_size\000", 1740695150)
		methodNavigationMesh[28] = gdnative.MethodOf("NavigationMesh\000", "set_edge_max_length\000", 373806689)
		methodNavigationMesh[29] = gdnative.MethodOf("NavigationMesh\000", "get_edge_max_length\000", 1740695150)
		methodNavigationMesh[30] = gdnative.MethodOf("NavigationMesh\000", "set_edge_max_error\000", 373806689)
		methodNavigationMesh[31] = gdnative.MethodOf("NavigationMesh\000", "get_edge_max_error\000", 1740695150)
		methodNavigationMesh[32] = gdnative.MethodOf("NavigationMesh\000", "set_verts_per_poly\000", 373806689)
		methodNavigationMesh[33] = gdnative.MethodOf("NavigationMesh\000", "get_verts_per_poly\000", 1740695150)
		methodNavigationMesh[34] = gdnative.MethodOf("NavigationMesh\000", "set_detail_sample_distance\000", 373806689)
		methodNavigationMesh[35] = gdnative.MethodOf("NavigationMesh\000", "get_detail_sample_distance\000", 1740695150)
		methodNavigationMesh[36] = gdnative.MethodOf("NavigationMesh\000", "set_detail_sample_max_error\000", 373806689)
		methodNavigationMesh[37] = gdnative.MethodOf("NavigationMesh\000", "get_detail_sample_max_error\000", 1740695150)
		methodNavigationMesh[38] = gdnative.MethodOf("NavigationMesh\000", "set_filter_low_hanging_obstacles\000", 2586408642)
		methodNavigationMesh[39] = gdnative.MethodOf("NavigationMesh\000", "get_filter_low_hanging_obstacles\000", 36873697)
		methodNavigationMesh[40] = gdnative.MethodOf("NavigationMesh\000", "set_filter_ledge_spans\000", 2586408642)
		methodNavigationMesh[41] = gdnative.MethodOf("NavigationMesh\000", "get_filter_ledge_spans\000", 36873697)
		methodNavigationMesh[42] = gdnative.MethodOf("NavigationMesh\000", "set_filter_walkable_low_height_spans\000", 2586408642)
		methodNavigationMesh[43] = gdnative.MethodOf("NavigationMesh\000", "get_filter_walkable_low_height_spans\000", 36873697)
		methodNavigationMesh[44] = gdnative.MethodOf("NavigationMesh\000", "set_filter_baking_aabb\000", 259215842)
		methodNavigationMesh[45] = gdnative.MethodOf("NavigationMesh\000", "get_filter_baking_aabb\000", 1068685055)
		methodNavigationMesh[46] = gdnative.MethodOf("NavigationMesh\000", "set_filter_baking_aabb_offset\000", 3460891852)
		methodNavigationMesh[47] = gdnative.MethodOf("NavigationMesh\000", "get_filter_baking_aabb_offset\000", 3360562783)
		methodNavigationMesh[48] = gdnative.MethodOf("NavigationMesh\000", "set_vertices\000", 334873810)
		methodNavigationMesh[49] = gdnative.MethodOf("NavigationMesh\000", "get_vertices\000", 497664490)
		methodNavigationMesh[50] = gdnative.MethodOf("NavigationMesh\000", "add_polygon\000", 3614634198)
		methodNavigationMesh[51] = gdnative.MethodOf("NavigationMesh\000", "get_polygon_count\000", 3905245786)
		methodNavigationMesh[52] = gdnative.MethodOf("NavigationMesh\000", "get_polygon\000", 3668444399)
		methodNavigationMesh[53] = gdnative.MethodOf("NavigationMesh\000", "clear_polygons\000", 3218959716)
		methodNavigationMesh[54] = gdnative.MethodOf("NavigationMesh\000", "create_from_mesh\000", 194775623)
		methodNavigationMeshGenerator[0] = gdnative.MethodOf("NavigationMeshGenerator\000", "bake\000", 1401173477)
		methodNavigationMeshGenerator[1] = gdnative.MethodOf("NavigationMeshGenerator\000", "clear\000", 2923361153)
		methodNavigationObstacle2D[0] = gdnative.MethodOf("NavigationObstacle2D\000", "get_rid\000", 2944877500)
		methodNavigationObstacle2D[1] = gdnative.MethodOf("NavigationObstacle2D\000", "set_estimate_radius\000", 2586408642)
		methodNavigationObstacle2D[2] = gdnative.MethodOf("NavigationObstacle2D\000", "is_radius_estimated\000", 36873697)
		methodNavigationObstacle2D[3] = gdnative.MethodOf("NavigationObstacle2D\000", "set_radius\000", 373806689)
		methodNavigationObstacle2D[4] = gdnative.MethodOf("NavigationObstacle2D\000", "get_radius\000", 1740695150)
		methodNavigationObstacle3D[0] = gdnative.MethodOf("NavigationObstacle3D\000", "get_rid\000", 2944877500)
		methodNavigationObstacle3D[1] = gdnative.MethodOf("NavigationObstacle3D\000", "set_estimate_radius\000", 2586408642)
		methodNavigationObstacle3D[2] = gdnative.MethodOf("NavigationObstacle3D\000", "is_radius_estimated\000", 36873697)
		methodNavigationObstacle3D[3] = gdnative.MethodOf("NavigationObstacle3D\000", "set_radius\000", 373806689)
		methodNavigationObstacle3D[4] = gdnative.MethodOf("NavigationObstacle3D\000", "get_radius\000", 1740695150)
		methodNavigationPolygon[0] = gdnative.MethodOf("NavigationPolygon\000", "set_vertices\000", 1509147220)
		methodNavigationPolygon[1] = gdnative.MethodOf("NavigationPolygon\000", "get_vertices\000", 2961356807)
		methodNavigationPolygon[2] = gdnative.MethodOf("NavigationPolygon\000", "add_polygon\000", 3614634198)
		methodNavigationPolygon[3] = gdnative.MethodOf("NavigationPolygon\000", "get_polygon_count\000", 3905245786)
		methodNavigationPolygon[4] = gdnative.MethodOf("NavigationPolygon\000", "get_polygon\000", 3668444399)
		methodNavigationPolygon[5] = gdnative.MethodOf("NavigationPolygon\000", "clear_polygons\000", 3218959716)
		methodNavigationPolygon[6] = gdnative.MethodOf("NavigationPolygon\000", "get_mesh\000", 330232164)
		methodNavigationPolygon[7] = gdnative.MethodOf("NavigationPolygon\000", "add_outline\000", 1509147220)
		methodNavigationPolygon[8] = gdnative.MethodOf("NavigationPolygon\000", "add_outline_at_index\000", 1569738947)
		methodNavigationPolygon[9] = gdnative.MethodOf("NavigationPolygon\000", "get_outline_count\000", 3905245786)
		methodNavigationPolygon[10] = gdnative.MethodOf("NavigationPolygon\000", "set_outline\000", 1201971903)
		methodNavigationPolygon[11] = gdnative.MethodOf("NavigationPolygon\000", "get_outline\000", 3946907486)
		methodNavigationPolygon[12] = gdnative.MethodOf("NavigationPolygon\000", "remove_outline\000", 1286410249)
		methodNavigationPolygon[13] = gdnative.MethodOf("NavigationPolygon\000", "clear_outlines\000", 3218959716)
		methodNavigationPolygon[14] = gdnative.MethodOf("NavigationPolygon\000", "make_polygons_from_outlines\000", 3218959716)
		methodNavigationRegion2D[0] = gdnative.MethodOf("NavigationRegion2D\000", "set_navigation_polygon\000", 1515040758)
		methodNavigationRegion2D[1] = gdnative.MethodOf("NavigationRegion2D\000", "get_navigation_polygon\000", 1046532237)
		methodNavigationRegion2D[2] = gdnative.MethodOf("NavigationRegion2D\000", "set_enabled\000", 2586408642)
		methodNavigationRegion2D[3] = gdnative.MethodOf("NavigationRegion2D\000", "is_enabled\000", 36873697)
		methodNavigationRegion2D[4] = gdnative.MethodOf("NavigationRegion2D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationRegion2D[5] = gdnative.MethodOf("NavigationRegion2D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationRegion2D[6] = gdnative.MethodOf("NavigationRegion2D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationRegion2D[7] = gdnative.MethodOf("NavigationRegion2D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationRegion2D[8] = gdnative.MethodOf("NavigationRegion2D\000", "get_region_rid\000", 2944877500)
		methodNavigationRegion2D[9] = gdnative.MethodOf("NavigationRegion2D\000", "set_enter_cost\000", 373806689)
		methodNavigationRegion2D[10] = gdnative.MethodOf("NavigationRegion2D\000", "get_enter_cost\000", 1740695150)
		methodNavigationRegion2D[11] = gdnative.MethodOf("NavigationRegion2D\000", "set_travel_cost\000", 373806689)
		methodNavigationRegion2D[12] = gdnative.MethodOf("NavigationRegion2D\000", "get_travel_cost\000", 1740695150)
		methodNavigationRegion3D[0] = gdnative.MethodOf("NavigationRegion3D\000", "set_navigation_mesh\000", 2923361153)
		methodNavigationRegion3D[1] = gdnative.MethodOf("NavigationRegion3D\000", "get_navigation_mesh\000", 1468720886)
		methodNavigationRegion3D[2] = gdnative.MethodOf("NavigationRegion3D\000", "set_enabled\000", 2586408642)
		methodNavigationRegion3D[3] = gdnative.MethodOf("NavigationRegion3D\000", "is_enabled\000", 36873697)
		methodNavigationRegion3D[4] = gdnative.MethodOf("NavigationRegion3D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationRegion3D[5] = gdnative.MethodOf("NavigationRegion3D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationRegion3D[6] = gdnative.MethodOf("NavigationRegion3D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationRegion3D[7] = gdnative.MethodOf("NavigationRegion3D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationRegion3D[8] = gdnative.MethodOf("NavigationRegion3D\000", "get_region_rid\000", 2944877500)
		methodNavigationRegion3D[9] = gdnative.MethodOf("NavigationRegion3D\000", "set_enter_cost\000", 373806689)
		methodNavigationRegion3D[10] = gdnative.MethodOf("NavigationRegion3D\000", "get_enter_cost\000", 1740695150)
		methodNavigationRegion3D[11] = gdnative.MethodOf("NavigationRegion3D\000", "set_travel_cost\000", 373806689)
		methodNavigationRegion3D[12] = gdnative.MethodOf("NavigationRegion3D\000", "get_travel_cost\000", 1740695150)
		methodNavigationRegion3D[13] = gdnative.MethodOf("NavigationRegion3D\000", "bake_navigation_mesh\000", 3216645846)
		methodNavigationServer2D[0] = gdnative.MethodOf("NavigationServer2D\000", "get_maps\000", 3995934104)
		methodNavigationServer2D[1] = gdnative.MethodOf("NavigationServer2D\000", "map_create\000", 2944877500)
		methodNavigationServer2D[2] = gdnative.MethodOf("NavigationServer2D\000", "map_set_active\000", 453506575)
		methodNavigationServer2D[3] = gdnative.MethodOf("NavigationServer2D\000", "map_is_active\000", 4155700596)
		methodNavigationServer2D[4] = gdnative.MethodOf("NavigationServer2D\000", "map_set_cell_size\000", 225571937)
		methodNavigationServer2D[5] = gdnative.MethodOf("NavigationServer2D\000", "map_get_cell_size\000", 866169185)
		methodNavigationServer2D[6] = gdnative.MethodOf("NavigationServer2D\000", "map_set_edge_connection_margin\000", 225571937)
		methodNavigationServer2D[7] = gdnative.MethodOf("NavigationServer2D\000", "map_get_edge_connection_margin\000", 866169185)
		methodNavigationServer2D[8] = gdnative.MethodOf("NavigationServer2D\000", "map_get_path\000", 56240621)
		methodNavigationServer2D[9] = gdnative.MethodOf("NavigationServer2D\000", "map_get_closest_point\000", 1358334418)
		methodNavigationServer2D[10] = gdnative.MethodOf("NavigationServer2D\000", "map_get_closest_point_owner\000", 1353467510)
		methodNavigationServer2D[11] = gdnative.MethodOf("NavigationServer2D\000", "map_get_regions\000", 2684255073)
		methodNavigationServer2D[12] = gdnative.MethodOf("NavigationServer2D\000", "map_get_agents\000", 2684255073)
		methodNavigationServer2D[13] = gdnative.MethodOf("NavigationServer2D\000", "map_force_update\000", 2722037293)
		methodNavigationServer2D[14] = gdnative.MethodOf("NavigationServer2D\000", "region_create\000", 2944877500)
		methodNavigationServer2D[15] = gdnative.MethodOf("NavigationServer2D\000", "region_set_enter_cost\000", 225571937)
		methodNavigationServer2D[16] = gdnative.MethodOf("NavigationServer2D\000", "region_get_enter_cost\000", 866169185)
		methodNavigationServer2D[17] = gdnative.MethodOf("NavigationServer2D\000", "region_set_travel_cost\000", 225571937)
		methodNavigationServer2D[18] = gdnative.MethodOf("NavigationServer2D\000", "region_get_travel_cost\000", 866169185)
		methodNavigationServer2D[19] = gdnative.MethodOf("NavigationServer2D\000", "region_owns_point\000", 219849798)
		methodNavigationServer2D[20] = gdnative.MethodOf("NavigationServer2D\000", "region_set_map\000", 781978857)
		methodNavigationServer2D[21] = gdnative.MethodOf("NavigationServer2D\000", "region_get_map\000", 3814569979)
		methodNavigationServer2D[22] = gdnative.MethodOf("NavigationServer2D\000", "region_set_navigation_layers\000", 286288326)
		methodNavigationServer2D[23] = gdnative.MethodOf("NavigationServer2D\000", "region_get_navigation_layers\000", 2198884583)
		methodNavigationServer2D[24] = gdnative.MethodOf("NavigationServer2D\000", "region_set_transform\000", 17342764)
		methodNavigationServer2D[25] = gdnative.MethodOf("NavigationServer2D\000", "region_set_navpoly\000", 3393715760)
		methodNavigationServer2D[26] = gdnative.MethodOf("NavigationServer2D\000", "region_get_connections_count\000", 2198884583)
		methodNavigationServer2D[27] = gdnative.MethodOf("NavigationServer2D\000", "region_get_connection_pathway_start\000", 2546185844)
		methodNavigationServer2D[28] = gdnative.MethodOf("NavigationServer2D\000", "region_get_connection_pathway_end\000", 2546185844)
		methodNavigationServer2D[29] = gdnative.MethodOf("NavigationServer2D\000", "agent_create\000", 2944877500)
		methodNavigationServer2D[30] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_map\000", 781978857)
		methodNavigationServer2D[31] = gdnative.MethodOf("NavigationServer2D\000", "agent_get_map\000", 3814569979)
		methodNavigationServer2D[32] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_neighbor_dist\000", 225571937)
		methodNavigationServer2D[33] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_max_neighbors\000", 286288326)
		methodNavigationServer2D[34] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_time_horizon\000", 225571937)
		methodNavigationServer2D[35] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_radius\000", 225571937)
		methodNavigationServer2D[36] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_max_speed\000", 225571937)
		methodNavigationServer2D[37] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_velocity\000", 3255841543)
		methodNavigationServer2D[38] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_target_velocity\000", 3255841543)
		methodNavigationServer2D[39] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_position\000", 3255841543)
		methodNavigationServer2D[40] = gdnative.MethodOf("NavigationServer2D\000", "agent_is_map_changed\000", 4155700596)
		methodNavigationServer2D[41] = gdnative.MethodOf("NavigationServer2D\000", "agent_set_callback\000", 1039455419)
		methodNavigationServer2D[42] = gdnative.MethodOf("NavigationServer2D\000", "free_rid\000", 145472570)
		methodNavigationServer3D[0] = gdnative.MethodOf("NavigationServer3D\000", "get_maps\000", 3995934104)
		methodNavigationServer3D[1] = gdnative.MethodOf("NavigationServer3D\000", "map_create\000", 2944877500)
		methodNavigationServer3D[2] = gdnative.MethodOf("NavigationServer3D\000", "map_set_active\000", 453506575)
		methodNavigationServer3D[3] = gdnative.MethodOf("NavigationServer3D\000", "map_is_active\000", 4155700596)
		methodNavigationServer3D[4] = gdnative.MethodOf("NavigationServer3D\000", "map_set_up\000", 3923919901)
		methodNavigationServer3D[5] = gdnative.MethodOf("NavigationServer3D\000", "map_get_up\000", 531438156)
		methodNavigationServer3D[6] = gdnative.MethodOf("NavigationServer3D\000", "map_set_cell_size\000", 225571937)
		methodNavigationServer3D[7] = gdnative.MethodOf("NavigationServer3D\000", "map_get_cell_size\000", 866169185)
		methodNavigationServer3D[8] = gdnative.MethodOf("NavigationServer3D\000", "map_set_edge_connection_margin\000", 225571937)
		methodNavigationServer3D[9] = gdnative.MethodOf("NavigationServer3D\000", "map_get_edge_connection_margin\000", 866169185)
		methodNavigationServer3D[10] = gdnative.MethodOf("NavigationServer3D\000", "map_get_path\000", 2121045993)
		methodNavigationServer3D[11] = gdnative.MethodOf("NavigationServer3D\000", "map_get_closest_point_to_segment\000", 3830095642)
		methodNavigationServer3D[12] = gdnative.MethodOf("NavigationServer3D\000", "map_get_closest_point\000", 2056183332)
		methodNavigationServer3D[13] = gdnative.MethodOf("NavigationServer3D\000", "map_get_closest_point_normal\000", 2056183332)
		methodNavigationServer3D[14] = gdnative.MethodOf("NavigationServer3D\000", "map_get_closest_point_owner\000", 553364610)
		methodNavigationServer3D[15] = gdnative.MethodOf("NavigationServer3D\000", "map_get_regions\000", 2684255073)
		methodNavigationServer3D[16] = gdnative.MethodOf("NavigationServer3D\000", "map_get_agents\000", 2684255073)
		methodNavigationServer3D[17] = gdnative.MethodOf("NavigationServer3D\000", "map_force_update\000", 2722037293)
		methodNavigationServer3D[18] = gdnative.MethodOf("NavigationServer3D\000", "region_create\000", 2944877500)
		methodNavigationServer3D[19] = gdnative.MethodOf("NavigationServer3D\000", "region_set_enter_cost\000", 225571937)
		methodNavigationServer3D[20] = gdnative.MethodOf("NavigationServer3D\000", "region_get_enter_cost\000", 866169185)
		methodNavigationServer3D[21] = gdnative.MethodOf("NavigationServer3D\000", "region_set_travel_cost\000", 225571937)
		methodNavigationServer3D[22] = gdnative.MethodOf("NavigationServer3D\000", "region_get_travel_cost\000", 866169185)
		methodNavigationServer3D[23] = gdnative.MethodOf("NavigationServer3D\000", "region_owns_point\000", 2360011153)
		methodNavigationServer3D[24] = gdnative.MethodOf("NavigationServer3D\000", "region_set_map\000", 781978857)
		methodNavigationServer3D[25] = gdnative.MethodOf("NavigationServer3D\000", "region_get_map\000", 3814569979)
		methodNavigationServer3D[26] = gdnative.MethodOf("NavigationServer3D\000", "region_set_navigation_layers\000", 286288326)
		methodNavigationServer3D[27] = gdnative.MethodOf("NavigationServer3D\000", "region_get_navigation_layers\000", 2198884583)
		methodNavigationServer3D[28] = gdnative.MethodOf("NavigationServer3D\000", "region_set_transform\000", 2679806994)
		methodNavigationServer3D[29] = gdnative.MethodOf("NavigationServer3D\000", "region_set_navmesh\000", 4027193260)
		methodNavigationServer3D[30] = gdnative.MethodOf("NavigationServer3D\000", "region_bake_navmesh\000", 1465939311)
		methodNavigationServer3D[31] = gdnative.MethodOf("NavigationServer3D\000", "region_get_connections_count\000", 2198884583)
		methodNavigationServer3D[32] = gdnative.MethodOf("NavigationServer3D\000", "region_get_connection_pathway_start\000", 3440143363)
		methodNavigationServer3D[33] = gdnative.MethodOf("NavigationServer3D\000", "region_get_connection_pathway_end\000", 3440143363)
		methodNavigationServer3D[34] = gdnative.MethodOf("NavigationServer3D\000", "agent_create\000", 2944877500)
		methodNavigationServer3D[35] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_map\000", 781978857)
		methodNavigationServer3D[36] = gdnative.MethodOf("NavigationServer3D\000", "agent_get_map\000", 3814569979)
		methodNavigationServer3D[37] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_neighbor_dist\000", 225571937)
		methodNavigationServer3D[38] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_max_neighbors\000", 286288326)
		methodNavigationServer3D[39] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_time_horizon\000", 225571937)
		methodNavigationServer3D[40] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_radius\000", 225571937)
		methodNavigationServer3D[41] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_max_speed\000", 225571937)
		methodNavigationServer3D[42] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_velocity\000", 3923919901)
		methodNavigationServer3D[43] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_target_velocity\000", 3923919901)
		methodNavigationServer3D[44] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_position\000", 3923919901)
		methodNavigationServer3D[45] = gdnative.MethodOf("NavigationServer3D\000", "agent_is_map_changed\000", 4155700596)
		methodNavigationServer3D[46] = gdnative.MethodOf("NavigationServer3D\000", "agent_set_callback\000", 1039455419)
		methodNavigationServer3D[47] = gdnative.MethodOf("NavigationServer3D\000", "free_rid\000", 145472570)
		methodNavigationServer3D[48] = gdnative.MethodOf("NavigationServer3D\000", "set_active\000", 1695273946)
		methodNavigationServer3D[49] = gdnative.MethodOf("NavigationServer3D\000", "process\000", 373806689)
		methodNinePatchRect[0] = gdnative.MethodOf("NinePatchRect\000", "set_texture\000", 4051416890)
		methodNinePatchRect[1] = gdnative.MethodOf("NinePatchRect\000", "get_texture\000", 3635182373)
		methodNinePatchRect[2] = gdnative.MethodOf("NinePatchRect\000", "set_patch_margin\000", 437707142)
		methodNinePatchRect[3] = gdnative.MethodOf("NinePatchRect\000", "get_patch_margin\000", 1983885014)
		methodNinePatchRect[4] = gdnative.MethodOf("NinePatchRect\000", "set_region_rect\000", 2046264180)
		methodNinePatchRect[5] = gdnative.MethodOf("NinePatchRect\000", "get_region_rect\000", 1639390495)
		methodNinePatchRect[6] = gdnative.MethodOf("NinePatchRect\000", "set_draw_center\000", 2586408642)
		methodNinePatchRect[7] = gdnative.MethodOf("NinePatchRect\000", "is_draw_center_enabled\000", 36873697)
		methodNinePatchRect[8] = gdnative.MethodOf("NinePatchRect\000", "set_h_axis_stretch_mode\000", 3219608417)
		methodNinePatchRect[9] = gdnative.MethodOf("NinePatchRect\000", "get_h_axis_stretch_mode\000", 3317113799)
		methodNinePatchRect[10] = gdnative.MethodOf("NinePatchRect\000", "set_v_axis_stretch_mode\000", 3219608417)
		methodNinePatchRect[11] = gdnative.MethodOf("NinePatchRect\000", "get_v_axis_stretch_mode\000", 3317113799)
		methodNode[0] = gdnative.MethodOf("Node\000", "add_sibling\000", 2570952461)
		methodNode[1] = gdnative.MethodOf("Node\000", "set_name\000", 83702148)
		methodNode[2] = gdnative.MethodOf("Node\000", "get_name\000", 2002593661)
		methodNode[3] = gdnative.MethodOf("Node\000", "add_child\000", 3070154285)
		methodNode[4] = gdnative.MethodOf("Node\000", "remove_child\000", 1078189570)
		methodNode[5] = gdnative.MethodOf("Node\000", "get_child_count\000", 894402480)
		methodNode[6] = gdnative.MethodOf("Node\000", "get_children\000", 873284517)
		methodNode[7] = gdnative.MethodOf("Node\000", "get_child\000", 541253412)
		methodNode[8] = gdnative.MethodOf("Node\000", "has_node\000", 861721659)
		methodNode[9] = gdnative.MethodOf("Node\000", "get_node\000", 2734337346)
		methodNode[10] = gdnative.MethodOf("Node\000", "get_node_or_null\000", 2734337346)
		methodNode[11] = gdnative.MethodOf("Node\000", "get_parent\000", 3160264692)
		methodNode[12] = gdnative.MethodOf("Node\000", "find_child\000", 4253159453)
		methodNode[13] = gdnative.MethodOf("Node\000", "find_children\000", 1585018254)
		methodNode[14] = gdnative.MethodOf("Node\000", "find_parent\000", 1140089439)
		methodNode[15] = gdnative.MethodOf("Node\000", "has_node_and_resource\000", 861721659)
		methodNode[16] = gdnative.MethodOf("Node\000", "get_node_and_resource\000", 502563882)
		methodNode[17] = gdnative.MethodOf("Node\000", "is_inside_tree\000", 36873697)
		methodNode[18] = gdnative.MethodOf("Node\000", "is_ancestor_of\000", 3093956946)
		methodNode[19] = gdnative.MethodOf("Node\000", "is_greater_than\000", 3093956946)
		methodNode[20] = gdnative.MethodOf("Node\000", "get_path\000", 4075236667)
		methodNode[21] = gdnative.MethodOf("Node\000", "get_path_to\000", 2147067491)
		methodNode[22] = gdnative.MethodOf("Node\000", "add_to_group\000", 3683006648)
		methodNode[23] = gdnative.MethodOf("Node\000", "remove_from_group\000", 3304788590)
		methodNode[24] = gdnative.MethodOf("Node\000", "is_in_group\000", 2619796661)
		methodNode[25] = gdnative.MethodOf("Node\000", "move_child\000", 3315886247)
		methodNode[26] = gdnative.MethodOf("Node\000", "get_groups\000", 3995934104)
		methodNode[27] = gdnative.MethodOf("Node\000", "raise\000", 3218959716)
		methodNode[28] = gdnative.MethodOf("Node\000", "set_owner\000", 1078189570)
		methodNode[29] = gdnative.MethodOf("Node\000", "get_owner\000", 3160264692)
		methodNode[30] = gdnative.MethodOf("Node\000", "remove_and_skip\000", 3218959716)
		methodNode[31] = gdnative.MethodOf("Node\000", "get_index\000", 894402480)
		methodNode[32] = gdnative.MethodOf("Node\000", "print_tree\000", 3218959716)
		methodNode[33] = gdnative.MethodOf("Node\000", "print_tree_pretty\000", 3218959716)
		methodNode[34] = gdnative.MethodOf("Node\000", "set_scene_file_path\000", 83702148)
		methodNode[35] = gdnative.MethodOf("Node\000", "get_scene_file_path\000", 201670096)
		methodNode[36] = gdnative.MethodOf("Node\000", "propagate_notification\000", 1286410249)
		methodNode[37] = gdnative.MethodOf("Node\000", "propagate_call\000", 1667910434)
		methodNode[38] = gdnative.MethodOf("Node\000", "set_physics_process\000", 2586408642)
		methodNode[39] = gdnative.MethodOf("Node\000", "get_physics_process_delta_time\000", 1740695150)
		methodNode[40] = gdnative.MethodOf("Node\000", "is_physics_processing\000", 36873697)
		methodNode[41] = gdnative.MethodOf("Node\000", "get_process_delta_time\000", 1740695150)
		methodNode[42] = gdnative.MethodOf("Node\000", "set_process\000", 2586408642)
		methodNode[43] = gdnative.MethodOf("Node\000", "set_process_priority\000", 1286410249)
		methodNode[44] = gdnative.MethodOf("Node\000", "get_process_priority\000", 3905245786)
		methodNode[45] = gdnative.MethodOf("Node\000", "is_processing\000", 36873697)
		methodNode[46] = gdnative.MethodOf("Node\000", "set_process_input\000", 2586408642)
		methodNode[47] = gdnative.MethodOf("Node\000", "is_processing_input\000", 36873697)
		methodNode[48] = gdnative.MethodOf("Node\000", "set_process_shortcut_input\000", 2586408642)
		methodNode[49] = gdnative.MethodOf("Node\000", "is_processing_shortcut_input\000", 36873697)
		methodNode[50] = gdnative.MethodOf("Node\000", "set_process_unhandled_input\000", 2586408642)
		methodNode[51] = gdnative.MethodOf("Node\000", "is_processing_unhandled_input\000", 36873697)
		methodNode[52] = gdnative.MethodOf("Node\000", "set_process_unhandled_key_input\000", 2586408642)
		methodNode[53] = gdnative.MethodOf("Node\000", "is_processing_unhandled_key_input\000", 36873697)
		methodNode[54] = gdnative.MethodOf("Node\000", "set_process_mode\000", 1841290486)
		methodNode[55] = gdnative.MethodOf("Node\000", "get_process_mode\000", 739966102)
		methodNode[56] = gdnative.MethodOf("Node\000", "can_process\000", 36873697)
		methodNode[57] = gdnative.MethodOf("Node\000", "print_orphan_nodes\000", 3218959716)
		methodNode[58] = gdnative.MethodOf("Node\000", "set_display_folded\000", 2586408642)
		methodNode[59] = gdnative.MethodOf("Node\000", "is_displayed_folded\000", 36873697)
		methodNode[60] = gdnative.MethodOf("Node\000", "set_process_internal\000", 2586408642)
		methodNode[61] = gdnative.MethodOf("Node\000", "is_processing_internal\000", 36873697)
		methodNode[62] = gdnative.MethodOf("Node\000", "set_physics_process_internal\000", 2586408642)
		methodNode[63] = gdnative.MethodOf("Node\000", "is_physics_processing_internal\000", 36873697)
		methodNode[64] = gdnative.MethodOf("Node\000", "get_tree\000", 2958820483)
		methodNode[65] = gdnative.MethodOf("Node\000", "create_tween\000", 3426978995)
		methodNode[66] = gdnative.MethodOf("Node\000", "duplicate\000", 3511555459)
		methodNode[67] = gdnative.MethodOf("Node\000", "replace_by\000", 2570952461)
		methodNode[68] = gdnative.MethodOf("Node\000", "set_scene_instance_load_placeholder\000", 2586408642)
		methodNode[69] = gdnative.MethodOf("Node\000", "get_scene_instance_load_placeholder\000", 36873697)
		methodNode[70] = gdnative.MethodOf("Node\000", "set_editable_instance\000", 2731852923)
		methodNode[71] = gdnative.MethodOf("Node\000", "is_editable_instance\000", 3093956946)
		methodNode[72] = gdnative.MethodOf("Node\000", "get_viewport\000", 3596683776)
		methodNode[73] = gdnative.MethodOf("Node\000", "queue_free\000", 3218959716)
		methodNode[74] = gdnative.MethodOf("Node\000", "request_ready\000", 3218959716)
		methodNode[75] = gdnative.MethodOf("Node\000", "set_multiplayer_authority\000", 4023243586)
		methodNode[76] = gdnative.MethodOf("Node\000", "get_multiplayer_authority\000", 3905245786)
		methodNode[77] = gdnative.MethodOf("Node\000", "is_multiplayer_authority\000", 36873697)
		methodNode[78] = gdnative.MethodOf("Node\000", "get_multiplayer\000", 406750475)
		methodNode[79] = gdnative.MethodOf("Node\000", "rpc_config\000", 3776071444)
		methodNode[80] = gdnative.MethodOf("Node\000", "set_editor_description\000", 83702148)
		methodNode[81] = gdnative.MethodOf("Node\000", "get_editor_description\000", 201670096)
		methodNode[82] = gdnative.MethodOf("Node\000", "set_unique_name_in_owner\000", 2586408642)
		methodNode[83] = gdnative.MethodOf("Node\000", "is_unique_name_in_owner\000", 36873697)
		methodNode[84] = gdnative.MethodOf("Node\000", "rpc\000", 4047867050)
		methodNode[85] = gdnative.MethodOf("Node\000", "rpc_id\000", 361499283)
		methodNode[86] = gdnative.MethodOf("Node\000", "update_configuration_warnings\000", 3218959716)
		methodNode2D[0] = gdnative.MethodOf("Node2D\000", "set_position\000", 743155724)
		methodNode2D[1] = gdnative.MethodOf("Node2D\000", "set_rotation\000", 373806689)
		methodNode2D[2] = gdnative.MethodOf("Node2D\000", "set_skew\000", 373806689)
		methodNode2D[3] = gdnative.MethodOf("Node2D\000", "set_scale\000", 743155724)
		methodNode2D[4] = gdnative.MethodOf("Node2D\000", "get_position\000", 3341600327)
		methodNode2D[5] = gdnative.MethodOf("Node2D\000", "get_rotation\000", 1740695150)
		methodNode2D[6] = gdnative.MethodOf("Node2D\000", "get_skew\000", 1740695150)
		methodNode2D[7] = gdnative.MethodOf("Node2D\000", "get_scale\000", 3341600327)
		methodNode2D[8] = gdnative.MethodOf("Node2D\000", "rotate\000", 373806689)
		methodNode2D[9] = gdnative.MethodOf("Node2D\000", "move_local_x\000", 2087892650)
		methodNode2D[10] = gdnative.MethodOf("Node2D\000", "move_local_y\000", 2087892650)
		methodNode2D[11] = gdnative.MethodOf("Node2D\000", "translate\000", 743155724)
		methodNode2D[12] = gdnative.MethodOf("Node2D\000", "global_translate\000", 743155724)
		methodNode2D[13] = gdnative.MethodOf("Node2D\000", "apply_scale\000", 743155724)
		methodNode2D[14] = gdnative.MethodOf("Node2D\000", "set_global_position\000", 743155724)
		methodNode2D[15] = gdnative.MethodOf("Node2D\000", "get_global_position\000", 3341600327)
		methodNode2D[16] = gdnative.MethodOf("Node2D\000", "set_global_rotation\000", 373806689)
		methodNode2D[17] = gdnative.MethodOf("Node2D\000", "get_global_rotation\000", 1740695150)
		methodNode2D[18] = gdnative.MethodOf("Node2D\000", "set_global_skew\000", 373806689)
		methodNode2D[19] = gdnative.MethodOf("Node2D\000", "get_global_skew\000", 1740695150)
		methodNode2D[20] = gdnative.MethodOf("Node2D\000", "set_global_scale\000", 743155724)
		methodNode2D[21] = gdnative.MethodOf("Node2D\000", "get_global_scale\000", 3341600327)
		methodNode2D[22] = gdnative.MethodOf("Node2D\000", "set_transform\000", 2761652528)
		methodNode2D[23] = gdnative.MethodOf("Node2D\000", "set_global_transform\000", 2761652528)
		methodNode2D[24] = gdnative.MethodOf("Node2D\000", "look_at\000", 743155724)
		methodNode2D[25] = gdnative.MethodOf("Node2D\000", "get_angle_to\000", 2276447920)
		methodNode2D[26] = gdnative.MethodOf("Node2D\000", "to_local\000", 2656412154)
		methodNode2D[27] = gdnative.MethodOf("Node2D\000", "to_global\000", 2656412154)
		methodNode2D[28] = gdnative.MethodOf("Node2D\000", "set_z_index\000", 1286410249)
		methodNode2D[29] = gdnative.MethodOf("Node2D\000", "get_z_index\000", 3905245786)
		methodNode2D[30] = gdnative.MethodOf("Node2D\000", "set_z_as_relative\000", 2586408642)
		methodNode2D[31] = gdnative.MethodOf("Node2D\000", "is_z_relative\000", 36873697)
		methodNode2D[32] = gdnative.MethodOf("Node2D\000", "set_y_sort_enabled\000", 2586408642)
		methodNode2D[33] = gdnative.MethodOf("Node2D\000", "is_y_sort_enabled\000", 36873697)
		methodNode2D[34] = gdnative.MethodOf("Node2D\000", "get_relative_transform_to_parent\000", 904556875)
		methodNode3D[0] = gdnative.MethodOf("Node3D\000", "set_transform\000", 2952846383)
		methodNode3D[1] = gdnative.MethodOf("Node3D\000", "get_transform\000", 3229777777)
		methodNode3D[2] = gdnative.MethodOf("Node3D\000", "set_position\000", 3460891852)
		methodNode3D[3] = gdnative.MethodOf("Node3D\000", "get_position\000", 3360562783)
		methodNode3D[4] = gdnative.MethodOf("Node3D\000", "set_rotation\000", 3460891852)
		methodNode3D[5] = gdnative.MethodOf("Node3D\000", "get_rotation\000", 3360562783)
		methodNode3D[6] = gdnative.MethodOf("Node3D\000", "set_rotation_order\000", 1415243067)
		methodNode3D[7] = gdnative.MethodOf("Node3D\000", "get_rotation_order\000", 2488981056)
		methodNode3D[8] = gdnative.MethodOf("Node3D\000", "set_rotation_edit_mode\000", 141483330)
		methodNode3D[9] = gdnative.MethodOf("Node3D\000", "get_rotation_edit_mode\000", 1572188370)
		methodNode3D[10] = gdnative.MethodOf("Node3D\000", "set_scale\000", 3460891852)
		methodNode3D[11] = gdnative.MethodOf("Node3D\000", "get_scale\000", 3360562783)
		methodNode3D[12] = gdnative.MethodOf("Node3D\000", "set_quaternion\000", 1727505552)
		methodNode3D[13] = gdnative.MethodOf("Node3D\000", "get_quaternion\000", 1222331677)
		methodNode3D[14] = gdnative.MethodOf("Node3D\000", "set_basis\000", 1055510324)
		methodNode3D[15] = gdnative.MethodOf("Node3D\000", "get_basis\000", 2716978435)
		methodNode3D[16] = gdnative.MethodOf("Node3D\000", "set_global_transform\000", 2952846383)
		methodNode3D[17] = gdnative.MethodOf("Node3D\000", "get_global_transform\000", 3229777777)
		methodNode3D[18] = gdnative.MethodOf("Node3D\000", "set_global_position\000", 3460891852)
		methodNode3D[19] = gdnative.MethodOf("Node3D\000", "get_global_position\000", 3360562783)
		methodNode3D[20] = gdnative.MethodOf("Node3D\000", "set_global_rotation\000", 3460891852)
		methodNode3D[21] = gdnative.MethodOf("Node3D\000", "get_global_rotation\000", 3360562783)
		methodNode3D[22] = gdnative.MethodOf("Node3D\000", "get_parent_node_3d\000", 151077316)
		methodNode3D[23] = gdnative.MethodOf("Node3D\000", "set_ignore_transform_notification\000", 2586408642)
		methodNode3D[24] = gdnative.MethodOf("Node3D\000", "set_as_top_level\000", 2586408642)
		methodNode3D[25] = gdnative.MethodOf("Node3D\000", "is_set_as_top_level\000", 36873697)
		methodNode3D[26] = gdnative.MethodOf("Node3D\000", "set_disable_scale\000", 2586408642)
		methodNode3D[27] = gdnative.MethodOf("Node3D\000", "is_scale_disabled\000", 36873697)
		methodNode3D[28] = gdnative.MethodOf("Node3D\000", "get_world_3d\000", 317588385)
		methodNode3D[29] = gdnative.MethodOf("Node3D\000", "force_update_transform\000", 3218959716)
		methodNode3D[30] = gdnative.MethodOf("Node3D\000", "set_visibility_parent\000", 1348162250)
		methodNode3D[31] = gdnative.MethodOf("Node3D\000", "get_visibility_parent\000", 4075236667)
		methodNode3D[32] = gdnative.MethodOf("Node3D\000", "update_gizmos\000", 3218959716)
		methodNode3D[33] = gdnative.MethodOf("Node3D\000", "add_gizmo\000", 1544533845)
		methodNode3D[34] = gdnative.MethodOf("Node3D\000", "get_gizmos\000", 3995934104)
		methodNode3D[35] = gdnative.MethodOf("Node3D\000", "clear_gizmos\000", 3218959716)
		methodNode3D[36] = gdnative.MethodOf("Node3D\000", "set_subgizmo_selection\000", 3317607635)
		methodNode3D[37] = gdnative.MethodOf("Node3D\000", "clear_subgizmo_selection\000", 3218959716)
		methodNode3D[38] = gdnative.MethodOf("Node3D\000", "set_visible\000", 2586408642)
		methodNode3D[39] = gdnative.MethodOf("Node3D\000", "is_visible\000", 36873697)
		methodNode3D[40] = gdnative.MethodOf("Node3D\000", "is_visible_in_tree\000", 36873697)
		methodNode3D[41] = gdnative.MethodOf("Node3D\000", "show\000", 3218959716)
		methodNode3D[42] = gdnative.MethodOf("Node3D\000", "hide\000", 3218959716)
		methodNode3D[43] = gdnative.MethodOf("Node3D\000", "set_notify_local_transform\000", 2586408642)
		methodNode3D[44] = gdnative.MethodOf("Node3D\000", "is_local_transform_notification_enabled\000", 36873697)
		methodNode3D[45] = gdnative.MethodOf("Node3D\000", "set_notify_transform\000", 2586408642)
		methodNode3D[46] = gdnative.MethodOf("Node3D\000", "is_transform_notification_enabled\000", 36873697)
		methodNode3D[47] = gdnative.MethodOf("Node3D\000", "rotate\000", 3436291937)
		methodNode3D[48] = gdnative.MethodOf("Node3D\000", "global_rotate\000", 3436291937)
		methodNode3D[49] = gdnative.MethodOf("Node3D\000", "global_scale\000", 3460891852)
		methodNode3D[50] = gdnative.MethodOf("Node3D\000", "global_translate\000", 3460891852)
		methodNode3D[51] = gdnative.MethodOf("Node3D\000", "rotate_object_local\000", 3436291937)
		methodNode3D[52] = gdnative.MethodOf("Node3D\000", "scale_object_local\000", 3460891852)
		methodNode3D[53] = gdnative.MethodOf("Node3D\000", "translate_object_local\000", 3460891852)
		methodNode3D[54] = gdnative.MethodOf("Node3D\000", "rotate_x\000", 373806689)
		methodNode3D[55] = gdnative.MethodOf("Node3D\000", "rotate_y\000", 373806689)
		methodNode3D[56] = gdnative.MethodOf("Node3D\000", "rotate_z\000", 373806689)
		methodNode3D[57] = gdnative.MethodOf("Node3D\000", "translate\000", 3460891852)
		methodNode3D[58] = gdnative.MethodOf("Node3D\000", "orthonormalize\000", 3218959716)
		methodNode3D[59] = gdnative.MethodOf("Node3D\000", "set_identity\000", 3218959716)
		methodNode3D[60] = gdnative.MethodOf("Node3D\000", "look_at\000", 1002852006)
		methodNode3D[61] = gdnative.MethodOf("Node3D\000", "look_at_from_position\000", 735115603)
		methodNode3D[62] = gdnative.MethodOf("Node3D\000", "to_local\000", 192990374)
		methodNode3D[63] = gdnative.MethodOf("Node3D\000", "to_global\000", 192990374)
		methodNoise[0] = gdnative.MethodOf("Noise\000", "get_noise_1d\000", 3919130443)
		methodNoise[1] = gdnative.MethodOf("Noise\000", "get_noise_2d\000", 2753205203)
		methodNoise[2] = gdnative.MethodOf("Noise\000", "get_noise_2dv\000", 2276447920)
		methodNoise[3] = gdnative.MethodOf("Noise\000", "get_noise_3d\000", 973811851)
		methodNoise[4] = gdnative.MethodOf("Noise\000", "get_noise_3dv\000", 1109078154)
		methodNoise[5] = gdnative.MethodOf("Noise\000", "get_image\000", 3397462027)
		methodNoise[6] = gdnative.MethodOf("Noise\000", "get_seamless_image\000", 943521238)
		methodNoiseTexture[0] = gdnative.MethodOf("NoiseTexture\000", "set_width\000", 1286410249)
		methodNoiseTexture[1] = gdnative.MethodOf("NoiseTexture\000", "set_height\000", 1286410249)
		methodNoiseTexture[2] = gdnative.MethodOf("NoiseTexture\000", "set_invert\000", 2586408642)
		methodNoiseTexture[3] = gdnative.MethodOf("NoiseTexture\000", "get_invert\000", 36873697)
		methodNoiseTexture[4] = gdnative.MethodOf("NoiseTexture\000", "set_in_3d_space\000", 2586408642)
		methodNoiseTexture[5] = gdnative.MethodOf("NoiseTexture\000", "is_in_3d_space\000", 36873697)
		methodNoiseTexture[6] = gdnative.MethodOf("NoiseTexture\000", "set_generate_mipmaps\000", 2586408642)
		methodNoiseTexture[7] = gdnative.MethodOf("NoiseTexture\000", "is_generating_mipmaps\000", 36873697)
		methodNoiseTexture[8] = gdnative.MethodOf("NoiseTexture\000", "set_seamless\000", 2586408642)
		methodNoiseTexture[9] = gdnative.MethodOf("NoiseTexture\000", "get_seamless\000", 2240911060)
		methodNoiseTexture[10] = gdnative.MethodOf("NoiseTexture\000", "set_seamless_blend_skirt\000", 373806689)
		methodNoiseTexture[11] = gdnative.MethodOf("NoiseTexture\000", "get_seamless_blend_skirt\000", 191475506)
		methodNoiseTexture[12] = gdnative.MethodOf("NoiseTexture\000", "set_as_normal_map\000", 2586408642)
		methodNoiseTexture[13] = gdnative.MethodOf("NoiseTexture\000", "is_normal_map\000", 2240911060)
		methodNoiseTexture[14] = gdnative.MethodOf("NoiseTexture\000", "set_bump_strength\000", 373806689)
		methodNoiseTexture[15] = gdnative.MethodOf("NoiseTexture\000", "get_bump_strength\000", 191475506)
		methodNoiseTexture[16] = gdnative.MethodOf("NoiseTexture\000", "set_color_ramp\000", 2756054477)
		methodNoiseTexture[17] = gdnative.MethodOf("NoiseTexture\000", "get_color_ramp\000", 132272999)
		methodNoiseTexture[18] = gdnative.MethodOf("NoiseTexture\000", "set_noise\000", 4135492439)
		methodNoiseTexture[19] = gdnative.MethodOf("NoiseTexture\000", "get_noise\000", 185851837)
		methodOS[0] = gdnative.MethodOf("OS\000", "get_connected_midi_inputs\000", 2981934095)
		methodOS[1] = gdnative.MethodOf("OS\000", "open_midi_inputs\000", 3218959716)
		methodOS[2] = gdnative.MethodOf("OS\000", "close_midi_inputs\000", 3218959716)
		methodOS[3] = gdnative.MethodOf("OS\000", "alert\000", 233059325)
		methodOS[4] = gdnative.MethodOf("OS\000", "crash\000", 83702148)
		methodOS[5] = gdnative.MethodOf("OS\000", "set_low_processor_usage_mode\000", 2586408642)
		methodOS[6] = gdnative.MethodOf("OS\000", "is_in_low_processor_usage_mode\000", 36873697)
		methodOS[7] = gdnative.MethodOf("OS\000", "set_low_processor_usage_mode_sleep_usec\000", 1286410249)
		methodOS[8] = gdnative.MethodOf("OS\000", "get_low_processor_usage_mode_sleep_usec\000", 3905245786)
		methodOS[9] = gdnative.MethodOf("OS\000", "get_processor_count\000", 3905245786)
		methodOS[10] = gdnative.MethodOf("OS\000", "get_processor_name\000", 201670096)
		methodOS[11] = gdnative.MethodOf("OS\000", "get_system_fonts\000", 1139954409)
		methodOS[12] = gdnative.MethodOf("OS\000", "get_system_font_path\000", 3158716772)
		methodOS[13] = gdnative.MethodOf("OS\000", "get_executable_path\000", 201670096)
		methodOS[14] = gdnative.MethodOf("OS\000", "execute\000", 2881709059)
		methodOS[15] = gdnative.MethodOf("OS\000", "create_process\000", 2903767230)
		methodOS[16] = gdnative.MethodOf("OS\000", "create_instance\000", 1080601263)
		methodOS[17] = gdnative.MethodOf("OS\000", "kill\000", 844576869)
		methodOS[18] = gdnative.MethodOf("OS\000", "shell_open\000", 166001499)
		methodOS[19] = gdnative.MethodOf("OS\000", "is_process_running\000", 1116898809)
		methodOS[20] = gdnative.MethodOf("OS\000", "get_process_id\000", 3905245786)
		methodOS[21] = gdnative.MethodOf("OS\000", "get_environment\000", 3135753539)
		methodOS[22] = gdnative.MethodOf("OS\000", "set_environment\000", 820780508)
		methodOS[23] = gdnative.MethodOf("OS\000", "has_environment\000", 3927539163)
		methodOS[24] = gdnative.MethodOf("OS\000", "get_name\000", 201670096)
		methodOS[25] = gdnative.MethodOf("OS\000", "get_cmdline_args\000", 2981934095)
		methodOS[26] = gdnative.MethodOf("OS\000", "get_cmdline_user_args\000", 2981934095)
		methodOS[27] = gdnative.MethodOf("OS\000", "set_restart_on_exit\000", 611198603)
		methodOS[28] = gdnative.MethodOf("OS\000", "is_restart_on_exit_set\000", 36873697)
		methodOS[29] = gdnative.MethodOf("OS\000", "get_restart_on_exit_arguments\000", 1139954409)
		methodOS[30] = gdnative.MethodOf("OS\000", "delay_usec\000", 998575451)
		methodOS[31] = gdnative.MethodOf("OS\000", "delay_msec\000", 998575451)
		methodOS[32] = gdnative.MethodOf("OS\000", "get_locale\000", 201670096)
		methodOS[33] = gdnative.MethodOf("OS\000", "get_locale_language\000", 201670096)
		methodOS[34] = gdnative.MethodOf("OS\000", "get_model_name\000", 201670096)
		methodOS[35] = gdnative.MethodOf("OS\000", "is_userfs_persistent\000", 36873697)
		methodOS[36] = gdnative.MethodOf("OS\000", "is_stdout_verbose\000", 36873697)
		methodOS[37] = gdnative.MethodOf("OS\000", "can_use_threads\000", 36873697)
		methodOS[38] = gdnative.MethodOf("OS\000", "is_debug_build\000", 36873697)
		methodOS[39] = gdnative.MethodOf("OS\000", "dump_memory_to_file\000", 83702148)
		methodOS[40] = gdnative.MethodOf("OS\000", "dump_resources_to_file\000", 83702148)
		methodOS[41] = gdnative.MethodOf("OS\000", "print_resources_in_use\000", 107499316)
		methodOS[42] = gdnative.MethodOf("OS\000", "print_all_resources\000", 3005725572)
		methodOS[43] = gdnative.MethodOf("OS\000", "get_static_memory_usage\000", 3905245786)
		methodOS[44] = gdnative.MethodOf("OS\000", "get_static_memory_peak_usage\000", 3905245786)
		methodOS[45] = gdnative.MethodOf("OS\000", "move_to_trash\000", 2113323047)
		methodOS[46] = gdnative.MethodOf("OS\000", "get_user_data_dir\000", 201670096)
		methodOS[47] = gdnative.MethodOf("OS\000", "get_system_dir\000", 1965199849)
		methodOS[48] = gdnative.MethodOf("OS\000", "get_config_dir\000", 201670096)
		methodOS[49] = gdnative.MethodOf("OS\000", "get_data_dir\000", 201670096)
		methodOS[50] = gdnative.MethodOf("OS\000", "get_cache_dir\000", 201670096)
		methodOS[51] = gdnative.MethodOf("OS\000", "get_unique_id\000", 201670096)
		methodOS[52] = gdnative.MethodOf("OS\000", "print_all_textures_by_size\000", 3218959716)
		methodOS[53] = gdnative.MethodOf("OS\000", "print_resources_by_type\000", 4015028928)
		methodOS[54] = gdnative.MethodOf("OS\000", "get_keycode_string\000", 2261993717)
		methodOS[55] = gdnative.MethodOf("OS\000", "is_keycode_unicode\000", 1116898809)
		methodOS[56] = gdnative.MethodOf("OS\000", "find_keycode_from_string\000", 1084858572)
		methodOS[57] = gdnative.MethodOf("OS\000", "set_use_file_access_save_and_swap\000", 2586408642)
		methodOS[58] = gdnative.MethodOf("OS\000", "set_thread_name\000", 166001499)
		methodOS[59] = gdnative.MethodOf("OS\000", "get_thread_caller_id\000", 3905245786)
		methodOS[60] = gdnative.MethodOf("OS\000", "get_main_thread_id\000", 3905245786)
		methodOS[61] = gdnative.MethodOf("OS\000", "has_feature\000", 3927539163)
		methodOS[62] = gdnative.MethodOf("OS\000", "request_permission\000", 2323990056)
		methodOS[63] = gdnative.MethodOf("OS\000", "request_permissions\000", 2240911060)
		methodOS[64] = gdnative.MethodOf("OS\000", "get_granted_permissions\000", 1139954409)
		methodObject[0] = gdnative.MethodOf("Object\000", "get_class\000", 201670096)
		methodObject[1] = gdnative.MethodOf("Object\000", "is_class\000", 3927539163)
		methodObject[2] = gdnative.MethodOf("Object\000", "set\000", 3776071444)
		methodObject[3] = gdnative.MethodOf("Object\000", "get\000", 2760726917)
		methodObject[4] = gdnative.MethodOf("Object\000", "set_indexed\000", 3500910842)
		methodObject[5] = gdnative.MethodOf("Object\000", "get_indexed\000", 4006125091)
		methodObject[6] = gdnative.MethodOf("Object\000", "get_property_list\000", 3995934104)
		methodObject[7] = gdnative.MethodOf("Object\000", "get_method_list\000", 3995934104)
		methodObject[8] = gdnative.MethodOf("Object\000", "notification\000", 4023243586)
		methodObject[9] = gdnative.MethodOf("Object\000", "to_string\000", 2841200299)
		methodObject[10] = gdnative.MethodOf("Object\000", "get_instance_id\000", 3905245786)
		methodObject[11] = gdnative.MethodOf("Object\000", "set_script\000", 1114965689)
		methodObject[12] = gdnative.MethodOf("Object\000", "get_script\000", 1214101251)
		methodObject[13] = gdnative.MethodOf("Object\000", "set_meta\000", 3776071444)
		methodObject[14] = gdnative.MethodOf("Object\000", "remove_meta\000", 3304788590)
		methodObject[15] = gdnative.MethodOf("Object\000", "get_meta\000", 3990617847)
		methodObject[16] = gdnative.MethodOf("Object\000", "has_meta\000", 2619796661)
		methodObject[17] = gdnative.MethodOf("Object\000", "get_meta_list\000", 1139954409)
		methodObject[18] = gdnative.MethodOf("Object\000", "add_user_signal\000", 3780025912)
		methodObject[19] = gdnative.MethodOf("Object\000", "has_user_signal\000", 2619796661)
		methodObject[20] = gdnative.MethodOf("Object\000", "emit_signal\000", 4047867050)
		methodObject[21] = gdnative.MethodOf("Object\000", "call\000", 3400424181)
		methodObject[22] = gdnative.MethodOf("Object\000", "call_deferred\000", 3400424181)
		methodObject[23] = gdnative.MethodOf("Object\000", "set_deferred\000", 3776071444)
		methodObject[24] = gdnative.MethodOf("Object\000", "callv\000", 1260104456)
		methodObject[25] = gdnative.MethodOf("Object\000", "has_method\000", 2619796661)
		methodObject[26] = gdnative.MethodOf("Object\000", "has_signal\000", 2619796661)
		methodObject[27] = gdnative.MethodOf("Object\000", "get_signal_list\000", 3995934104)
		methodObject[28] = gdnative.MethodOf("Object\000", "get_signal_connection_list\000", 3147814860)
		methodObject[29] = gdnative.MethodOf("Object\000", "get_incoming_connections\000", 3995934104)
		methodObject[30] = gdnative.MethodOf("Object\000", "connect\000", 1469446357)
		methodObject[31] = gdnative.MethodOf("Object\000", "disconnect\000", 1874754934)
		methodObject[32] = gdnative.MethodOf("Object\000", "is_connected\000", 768136979)
		methodObject[33] = gdnative.MethodOf("Object\000", "set_block_signals\000", 2586408642)
		methodObject[34] = gdnative.MethodOf("Object\000", "is_blocking_signals\000", 36873697)
		methodObject[35] = gdnative.MethodOf("Object\000", "notify_property_list_changed\000", 3218959716)
		methodObject[36] = gdnative.MethodOf("Object\000", "set_message_translation\000", 2586408642)
		methodObject[37] = gdnative.MethodOf("Object\000", "can_translate_messages\000", 36873697)
		methodObject[38] = gdnative.MethodOf("Object\000", "tr\000", 2475554935)
		methodObject[39] = gdnative.MethodOf("Object\000", "tr_n\000", 4021311862)
		methodObject[40] = gdnative.MethodOf("Object\000", "is_queued_for_deletion\000", 36873697)
		methodOccluder3D[0] = gdnative.MethodOf("Occluder3D\000", "get_vertices\000", 497664490)
		methodOccluder3D[1] = gdnative.MethodOf("Occluder3D\000", "get_indices\000", 1930428628)
		methodOccluderInstance3D[0] = gdnative.MethodOf("OccluderInstance3D\000", "set_bake_mask\000", 1286410249)
		methodOccluderInstance3D[1] = gdnative.MethodOf("OccluderInstance3D\000", "get_bake_mask\000", 3905245786)
		methodOccluderInstance3D[2] = gdnative.MethodOf("OccluderInstance3D\000", "set_bake_mask_value\000", 300928843)
		methodOccluderInstance3D[3] = gdnative.MethodOf("OccluderInstance3D\000", "get_bake_mask_value\000", 1116898809)
		methodOccluderInstance3D[4] = gdnative.MethodOf("OccluderInstance3D\000", "set_bake_simplification_distance\000", 373806689)
		methodOccluderInstance3D[5] = gdnative.MethodOf("OccluderInstance3D\000", "get_bake_simplification_distance\000", 1740695150)
		methodOccluderInstance3D[6] = gdnative.MethodOf("OccluderInstance3D\000", "set_occluder\000", 1664878165)
		methodOccluderInstance3D[7] = gdnative.MethodOf("OccluderInstance3D\000", "get_occluder\000", 1696836198)
		methodOccluderPolygon2D[0] = gdnative.MethodOf("OccluderPolygon2D\000", "set_closed\000", 2586408642)
		methodOccluderPolygon2D[1] = gdnative.MethodOf("OccluderPolygon2D\000", "is_closed\000", 36873697)
		methodOccluderPolygon2D[2] = gdnative.MethodOf("OccluderPolygon2D\000", "set_cull_mode\000", 3500863002)
		methodOccluderPolygon2D[3] = gdnative.MethodOf("OccluderPolygon2D\000", "get_cull_mode\000", 33931036)
		methodOccluderPolygon2D[4] = gdnative.MethodOf("OccluderPolygon2D\000", "set_polygon\000", 1509147220)
		methodOccluderPolygon2D[5] = gdnative.MethodOf("OccluderPolygon2D\000", "get_polygon\000", 2961356807)
		methodOggPacketSequence[0] = gdnative.MethodOf("OggPacketSequence\000", "set_packet_data\000", 381264803)
		methodOggPacketSequence[1] = gdnative.MethodOf("OggPacketSequence\000", "get_packet_data\000", 3995934104)
		methodOggPacketSequence[2] = gdnative.MethodOf("OggPacketSequence\000", "set_packet_granule_positions\000", 381264803)
		methodOggPacketSequence[3] = gdnative.MethodOf("OggPacketSequence\000", "get_packet_granule_positions\000", 3995934104)
		methodOggPacketSequence[4] = gdnative.MethodOf("OggPacketSequence\000", "set_sampling_rate\000", 373806689)
		methodOggPacketSequence[5] = gdnative.MethodOf("OggPacketSequence\000", "get_sampling_rate\000", 1740695150)
		methodOggPacketSequence[6] = gdnative.MethodOf("OggPacketSequence\000", "get_length\000", 1740695150)
		methodOmniLight3D[0] = gdnative.MethodOf("OmniLight3D\000", "set_shadow_mode\000", 121862228)
		methodOmniLight3D[1] = gdnative.MethodOf("OmniLight3D\000", "get_shadow_mode\000", 4181586331)
		methodOpenXRAction[0] = gdnative.MethodOf("OpenXRAction\000", "set_localized_name\000", 83702148)
		methodOpenXRAction[1] = gdnative.MethodOf("OpenXRAction\000", "get_localized_name\000", 201670096)
		methodOpenXRAction[2] = gdnative.MethodOf("OpenXRAction\000", "set_action_type\000", 1675238366)
		methodOpenXRAction[3] = gdnative.MethodOf("OpenXRAction\000", "get_action_type\000", 3536542431)
		methodOpenXRAction[4] = gdnative.MethodOf("OpenXRAction\000", "set_toplevel_paths\000", 4015028928)
		methodOpenXRAction[5] = gdnative.MethodOf("OpenXRAction\000", "get_toplevel_paths\000", 1139954409)
		methodOpenXRActionMap[0] = gdnative.MethodOf("OpenXRActionMap\000", "set_action_sets\000", 381264803)
		methodOpenXRActionMap[1] = gdnative.MethodOf("OpenXRActionMap\000", "get_action_sets\000", 3995934104)
		methodOpenXRActionMap[2] = gdnative.MethodOf("OpenXRActionMap\000", "get_action_set_count\000", 3905245786)
		methodOpenXRActionMap[3] = gdnative.MethodOf("OpenXRActionMap\000", "find_action_set\000", 1888809267)
		methodOpenXRActionMap[4] = gdnative.MethodOf("OpenXRActionMap\000", "get_action_set\000", 1789580336)
		methodOpenXRActionMap[5] = gdnative.MethodOf("OpenXRActionMap\000", "add_action_set\000", 2093310581)
		methodOpenXRActionMap[6] = gdnative.MethodOf("OpenXRActionMap\000", "remove_action_set\000", 2093310581)
		methodOpenXRActionMap[7] = gdnative.MethodOf("OpenXRActionMap\000", "set_interaction_profiles\000", 381264803)
		methodOpenXRActionMap[8] = gdnative.MethodOf("OpenXRActionMap\000", "get_interaction_profiles\000", 3995934104)
		methodOpenXRActionMap[9] = gdnative.MethodOf("OpenXRActionMap\000", "get_interaction_profile_count\000", 3905245786)
		methodOpenXRActionMap[10] = gdnative.MethodOf("OpenXRActionMap\000", "find_interaction_profile\000", 3095875538)
		methodOpenXRActionMap[11] = gdnative.MethodOf("OpenXRActionMap\000", "get_interaction_profile\000", 2546151210)
		methodOpenXRActionMap[12] = gdnative.MethodOf("OpenXRActionMap\000", "add_interaction_profile\000", 2697953512)
		methodOpenXRActionMap[13] = gdnative.MethodOf("OpenXRActionMap\000", "remove_interaction_profile\000", 2697953512)
		methodOpenXRActionMap[14] = gdnative.MethodOf("OpenXRActionMap\000", "create_default_action_sets\000", 3218959716)
		methodOpenXRActionSet[0] = gdnative.MethodOf("OpenXRActionSet\000", "set_localized_name\000", 83702148)
		methodOpenXRActionSet[1] = gdnative.MethodOf("OpenXRActionSet\000", "get_localized_name\000", 201670096)
		methodOpenXRActionSet[2] = gdnative.MethodOf("OpenXRActionSet\000", "set_priority\000", 1286410249)
		methodOpenXRActionSet[3] = gdnative.MethodOf("OpenXRActionSet\000", "get_priority\000", 3905245786)
		methodOpenXRActionSet[4] = gdnative.MethodOf("OpenXRActionSet\000", "get_action_count\000", 3905245786)
		methodOpenXRActionSet[5] = gdnative.MethodOf("OpenXRActionSet\000", "set_actions\000", 381264803)
		methodOpenXRActionSet[6] = gdnative.MethodOf("OpenXRActionSet\000", "get_actions\000", 3995934104)
		methodOpenXRActionSet[7] = gdnative.MethodOf("OpenXRActionSet\000", "add_action\000", 349361333)
		methodOpenXRActionSet[8] = gdnative.MethodOf("OpenXRActionSet\000", "remove_action\000", 349361333)
		methodOpenXRIPBinding[0] = gdnative.MethodOf("OpenXRIPBinding\000", "set_action\000", 349361333)
		methodOpenXRIPBinding[1] = gdnative.MethodOf("OpenXRIPBinding\000", "get_action\000", 4072409085)
		methodOpenXRIPBinding[2] = gdnative.MethodOf("OpenXRIPBinding\000", "get_path_count\000", 3905245786)
		methodOpenXRIPBinding[3] = gdnative.MethodOf("OpenXRIPBinding\000", "set_paths\000", 4015028928)
		methodOpenXRIPBinding[4] = gdnative.MethodOf("OpenXRIPBinding\000", "get_paths\000", 1139954409)
		methodOpenXRIPBinding[5] = gdnative.MethodOf("OpenXRIPBinding\000", "has_path\000", 3927539163)
		methodOpenXRIPBinding[6] = gdnative.MethodOf("OpenXRIPBinding\000", "add_path\000", 83702148)
		methodOpenXRIPBinding[7] = gdnative.MethodOf("OpenXRIPBinding\000", "remove_path\000", 83702148)
		methodOpenXRInteractionProfile[0] = gdnative.MethodOf("OpenXRInteractionProfile\000", "set_interaction_profile_path\000", 83702148)
		methodOpenXRInteractionProfile[1] = gdnative.MethodOf("OpenXRInteractionProfile\000", "get_interaction_profile_path\000", 201670096)
		methodOpenXRInteractionProfile[2] = gdnative.MethodOf("OpenXRInteractionProfile\000", "get_binding_count\000", 3905245786)
		methodOpenXRInteractionProfile[3] = gdnative.MethodOf("OpenXRInteractionProfile\000", "get_binding\000", 3934429652)
		methodOpenXRInteractionProfile[4] = gdnative.MethodOf("OpenXRInteractionProfile\000", "set_bindings\000", 381264803)
		methodOpenXRInteractionProfile[5] = gdnative.MethodOf("OpenXRInteractionProfile\000", "get_bindings\000", 3995934104)
		methodOptimizedTranslation[0] = gdnative.MethodOf("OptimizedTranslation\000", "generate\000", 1466479800)
		methodOptionButton[0] = gdnative.MethodOf("OptionButton\000", "add_item\000", 3043792800)
		methodOptionButton[1] = gdnative.MethodOf("OptionButton\000", "add_icon_item\000", 3944051090)
		methodOptionButton[2] = gdnative.MethodOf("OptionButton\000", "set_item_text\000", 501894301)
		methodOptionButton[3] = gdnative.MethodOf("OptionButton\000", "set_item_icon\000", 666127730)
		methodOptionButton[4] = gdnative.MethodOf("OptionButton\000", "set_item_disabled\000", 300928843)
		methodOptionButton[5] = gdnative.MethodOf("OptionButton\000", "set_item_id\000", 3937882851)
		methodOptionButton[6] = gdnative.MethodOf("OptionButton\000", "set_item_metadata\000", 2152698145)
		methodOptionButton[7] = gdnative.MethodOf("OptionButton\000", "set_item_tooltip\000", 501894301)
		methodOptionButton[8] = gdnative.MethodOf("OptionButton\000", "get_item_text\000", 844755477)
		methodOptionButton[9] = gdnative.MethodOf("OptionButton\000", "get_item_icon\000", 3536238170)
		methodOptionButton[10] = gdnative.MethodOf("OptionButton\000", "get_item_id\000", 923996154)
		methodOptionButton[11] = gdnative.MethodOf("OptionButton\000", "get_item_index\000", 923996154)
		methodOptionButton[12] = gdnative.MethodOf("OptionButton\000", "get_item_metadata\000", 4227898402)
		methodOptionButton[13] = gdnative.MethodOf("OptionButton\000", "get_item_tooltip\000", 844755477)
		methodOptionButton[14] = gdnative.MethodOf("OptionButton\000", "is_item_disabled\000", 1116898809)
		methodOptionButton[15] = gdnative.MethodOf("OptionButton\000", "is_item_separator\000", 1116898809)
		methodOptionButton[16] = gdnative.MethodOf("OptionButton\000", "add_separator\000", 3005725572)
		methodOptionButton[17] = gdnative.MethodOf("OptionButton\000", "clear\000", 3218959716)
		methodOptionButton[18] = gdnative.MethodOf("OptionButton\000", "select\000", 1286410249)
		methodOptionButton[19] = gdnative.MethodOf("OptionButton\000", "get_selected\000", 3905245786)
		methodOptionButton[20] = gdnative.MethodOf("OptionButton\000", "get_selected_id\000", 3905245786)
		methodOptionButton[21] = gdnative.MethodOf("OptionButton\000", "get_selected_metadata\000", 1214101251)
		methodOptionButton[22] = gdnative.MethodOf("OptionButton\000", "remove_item\000", 1286410249)
		methodOptionButton[23] = gdnative.MethodOf("OptionButton\000", "get_popup\000", 229722558)
		methodOptionButton[24] = gdnative.MethodOf("OptionButton\000", "set_item_count\000", 1286410249)
		methodOptionButton[25] = gdnative.MethodOf("OptionButton\000", "get_item_count\000", 3905245786)
		methodOptionButton[26] = gdnative.MethodOf("OptionButton\000", "has_selectable_items\000", 36873697)
		methodOptionButton[27] = gdnative.MethodOf("OptionButton\000", "get_selectable_item\000", 894402480)
		methodOptionButton[28] = gdnative.MethodOf("OptionButton\000", "set_fit_to_longest_item\000", 2586408642)
		methodOptionButton[29] = gdnative.MethodOf("OptionButton\000", "is_fit_to_longest_item\000", 36873697)
		methodPCKPacker[0] = gdnative.MethodOf("PCKPacker\000", "pck_start\000", 3232891339)
		methodPCKPacker[1] = gdnative.MethodOf("PCKPacker\000", "add_file\000", 2215643711)
		methodPCKPacker[2] = gdnative.MethodOf("PCKPacker\000", "flush\000", 1633102583)
		methodPackedDataContainer[0] = gdnative.MethodOf("PackedDataContainer\000", "pack\000", 966674026)
		methodPackedDataContainer[1] = gdnative.MethodOf("PackedDataContainer\000", "size\000", 3905245786)
		methodPackedDataContainerRef[0] = gdnative.MethodOf("PackedDataContainerRef\000", "size\000", 3905245786)
		methodPackedScene[0] = gdnative.MethodOf("PackedScene\000", "pack\000", 2584678054)
		methodPackedScene[1] = gdnative.MethodOf("PackedScene\000", "instantiate\000", 2628778455)
		methodPackedScene[2] = gdnative.MethodOf("PackedScene\000", "can_instantiate\000", 36873697)
		methodPackedScene[3] = gdnative.MethodOf("PackedScene\000", "get_state\000", 3479783971)
		methodPacketPeer[0] = gdnative.MethodOf("PacketPeer\000", "get_var\000", 3442865206)
		methodPacketPeer[1] = gdnative.MethodOf("PacketPeer\000", "put_var\000", 2436251611)
		methodPacketPeer[2] = gdnative.MethodOf("PacketPeer\000", "get_packet\000", 2115431945)
		methodPacketPeer[3] = gdnative.MethodOf("PacketPeer\000", "put_packet\000", 680677267)
		methodPacketPeer[4] = gdnative.MethodOf("PacketPeer\000", "get_packet_error\000", 3185525595)
		methodPacketPeer[5] = gdnative.MethodOf("PacketPeer\000", "get_available_packet_count\000", 3905245786)
		methodPacketPeer[6] = gdnative.MethodOf("PacketPeer\000", "get_encode_buffer_max_size\000", 3905245786)
		methodPacketPeer[7] = gdnative.MethodOf("PacketPeer\000", "set_encode_buffer_max_size\000", 1286410249)
		methodPacketPeerDTLS[0] = gdnative.MethodOf("PacketPeerDTLS\000", "poll\000", 3218959716)
		methodPacketPeerDTLS[1] = gdnative.MethodOf("PacketPeerDTLS\000", "connect_to_peer\000", 293566484)
		methodPacketPeerDTLS[2] = gdnative.MethodOf("PacketPeerDTLS\000", "get_status\000", 3248654679)
		methodPacketPeerDTLS[3] = gdnative.MethodOf("PacketPeerDTLS\000", "disconnect_from_peer\000", 3218959716)
		methodPacketPeerStream[0] = gdnative.MethodOf("PacketPeerStream\000", "set_stream_peer\000", 3281897016)
		methodPacketPeerStream[1] = gdnative.MethodOf("PacketPeerStream\000", "get_stream_peer\000", 2741655269)
		methodPacketPeerStream[2] = gdnative.MethodOf("PacketPeerStream\000", "set_input_buffer_max_size\000", 1286410249)
		methodPacketPeerStream[3] = gdnative.MethodOf("PacketPeerStream\000", "set_output_buffer_max_size\000", 1286410249)
		methodPacketPeerStream[4] = gdnative.MethodOf("PacketPeerStream\000", "get_input_buffer_max_size\000", 3905245786)
		methodPacketPeerStream[5] = gdnative.MethodOf("PacketPeerStream\000", "get_output_buffer_max_size\000", 3905245786)
		methodPacketPeerUDP[0] = gdnative.MethodOf("PacketPeerUDP\000", "bind\000", 4290438434)
		methodPacketPeerUDP[1] = gdnative.MethodOf("PacketPeerUDP\000", "close\000", 3218959716)
		methodPacketPeerUDP[2] = gdnative.MethodOf("PacketPeerUDP\000", "wait\000", 166280745)
		methodPacketPeerUDP[3] = gdnative.MethodOf("PacketPeerUDP\000", "is_bound\000", 36873697)
		methodPacketPeerUDP[4] = gdnative.MethodOf("PacketPeerUDP\000", "connect_to_host\000", 993915709)
		methodPacketPeerUDP[5] = gdnative.MethodOf("PacketPeerUDP\000", "is_socket_connected\000", 36873697)
		methodPacketPeerUDP[6] = gdnative.MethodOf("PacketPeerUDP\000", "get_packet_ip\000", 201670096)
		methodPacketPeerUDP[7] = gdnative.MethodOf("PacketPeerUDP\000", "get_packet_port\000", 3905245786)
		methodPacketPeerUDP[8] = gdnative.MethodOf("PacketPeerUDP\000", "get_local_port\000", 3905245786)
		methodPacketPeerUDP[9] = gdnative.MethodOf("PacketPeerUDP\000", "set_dest_address\000", 993915709)
		methodPacketPeerUDP[10] = gdnative.MethodOf("PacketPeerUDP\000", "set_broadcast_enabled\000", 2586408642)
		methodPacketPeerUDP[11] = gdnative.MethodOf("PacketPeerUDP\000", "join_multicast_group\000", 852856452)
		methodPacketPeerUDP[12] = gdnative.MethodOf("PacketPeerUDP\000", "leave_multicast_group\000", 852856452)
		methodPanoramaSkyMaterial[0] = gdnative.MethodOf("PanoramaSkyMaterial\000", "set_panorama\000", 4051416890)
		methodPanoramaSkyMaterial[1] = gdnative.MethodOf("PanoramaSkyMaterial\000", "get_panorama\000", 3635182373)
		methodPanoramaSkyMaterial[2] = gdnative.MethodOf("PanoramaSkyMaterial\000", "set_filtering_enabled\000", 2586408642)
		methodPanoramaSkyMaterial[3] = gdnative.MethodOf("PanoramaSkyMaterial\000", "is_filtering_enabled\000", 36873697)
		methodParallaxBackground[0] = gdnative.MethodOf("ParallaxBackground\000", "set_scroll_offset\000", 743155724)
		methodParallaxBackground[1] = gdnative.MethodOf("ParallaxBackground\000", "get_scroll_offset\000", 3341600327)
		methodParallaxBackground[2] = gdnative.MethodOf("ParallaxBackground\000", "set_scroll_base_offset\000", 743155724)
		methodParallaxBackground[3] = gdnative.MethodOf("ParallaxBackground\000", "get_scroll_base_offset\000", 3341600327)
		methodParallaxBackground[4] = gdnative.MethodOf("ParallaxBackground\000", "set_scroll_base_scale\000", 743155724)
		methodParallaxBackground[5] = gdnative.MethodOf("ParallaxBackground\000", "get_scroll_base_scale\000", 3341600327)
		methodParallaxBackground[6] = gdnative.MethodOf("ParallaxBackground\000", "set_limit_begin\000", 743155724)
		methodParallaxBackground[7] = gdnative.MethodOf("ParallaxBackground\000", "get_limit_begin\000", 3341600327)
		methodParallaxBackground[8] = gdnative.MethodOf("ParallaxBackground\000", "set_limit_end\000", 743155724)
		methodParallaxBackground[9] = gdnative.MethodOf("ParallaxBackground\000", "get_limit_end\000", 3341600327)
		methodParallaxBackground[10] = gdnative.MethodOf("ParallaxBackground\000", "set_ignore_camera_zoom\000", 2586408642)
		methodParallaxBackground[11] = gdnative.MethodOf("ParallaxBackground\000", "is_ignore_camera_zoom\000", 2240911060)
		methodParallaxLayer[0] = gdnative.MethodOf("ParallaxLayer\000", "set_motion_scale\000", 743155724)
		methodParallaxLayer[1] = gdnative.MethodOf("ParallaxLayer\000", "get_motion_scale\000", 3341600327)
		methodParallaxLayer[2] = gdnative.MethodOf("ParallaxLayer\000", "set_motion_offset\000", 743155724)
		methodParallaxLayer[3] = gdnative.MethodOf("ParallaxLayer\000", "get_motion_offset\000", 3341600327)
		methodParallaxLayer[4] = gdnative.MethodOf("ParallaxLayer\000", "set_mirroring\000", 743155724)
		methodParallaxLayer[5] = gdnative.MethodOf("ParallaxLayer\000", "get_mirroring\000", 3341600327)
		methodParticlesMaterial[0] = gdnative.MethodOf("ParticlesMaterial\000", "set_direction\000", 3460891852)
		methodParticlesMaterial[1] = gdnative.MethodOf("ParticlesMaterial\000", "get_direction\000", 3360562783)
		methodParticlesMaterial[2] = gdnative.MethodOf("ParticlesMaterial\000", "set_spread\000", 373806689)
		methodParticlesMaterial[3] = gdnative.MethodOf("ParticlesMaterial\000", "get_spread\000", 1740695150)
		methodParticlesMaterial[4] = gdnative.MethodOf("ParticlesMaterial\000", "set_flatness\000", 373806689)
		methodParticlesMaterial[5] = gdnative.MethodOf("ParticlesMaterial\000", "get_flatness\000", 1740695150)
		methodParticlesMaterial[6] = gdnative.MethodOf("ParticlesMaterial\000", "set_param_min\000", 4274524439)
		methodParticlesMaterial[7] = gdnative.MethodOf("ParticlesMaterial\000", "get_param_min\000", 1283126188)
		methodParticlesMaterial[8] = gdnative.MethodOf("ParticlesMaterial\000", "set_param_max\000", 4274524439)
		methodParticlesMaterial[9] = gdnative.MethodOf("ParticlesMaterial\000", "get_param_max\000", 1283126188)
		methodParticlesMaterial[10] = gdnative.MethodOf("ParticlesMaterial\000", "set_param_texture\000", 2656851978)
		methodParticlesMaterial[11] = gdnative.MethodOf("ParticlesMaterial\000", "get_param_texture\000", 2649254505)
		methodParticlesMaterial[12] = gdnative.MethodOf("ParticlesMaterial\000", "set_color\000", 2920490490)
		methodParticlesMaterial[13] = gdnative.MethodOf("ParticlesMaterial\000", "get_color\000", 3444240500)
		methodParticlesMaterial[14] = gdnative.MethodOf("ParticlesMaterial\000", "set_color_ramp\000", 4051416890)
		methodParticlesMaterial[15] = gdnative.MethodOf("ParticlesMaterial\000", "get_color_ramp\000", 3635182373)
		methodParticlesMaterial[16] = gdnative.MethodOf("ParticlesMaterial\000", "set_color_initial_ramp\000", 4051416890)
		methodParticlesMaterial[17] = gdnative.MethodOf("ParticlesMaterial\000", "get_color_initial_ramp\000", 3635182373)
		methodParticlesMaterial[18] = gdnative.MethodOf("ParticlesMaterial\000", "set_particle_flag\000", 1631494402)
		methodParticlesMaterial[19] = gdnative.MethodOf("ParticlesMaterial\000", "get_particle_flag\000", 818711554)
		methodParticlesMaterial[20] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_shape\000", 248988319)
		methodParticlesMaterial[21] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_shape\000", 3582086991)
		methodParticlesMaterial[22] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_sphere_radius\000", 373806689)
		methodParticlesMaterial[23] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_sphere_radius\000", 1740695150)
		methodParticlesMaterial[24] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_box_extents\000", 3460891852)
		methodParticlesMaterial[25] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_box_extents\000", 3360562783)
		methodParticlesMaterial[26] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_point_texture\000", 4051416890)
		methodParticlesMaterial[27] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_point_texture\000", 3635182373)
		methodParticlesMaterial[28] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_normal_texture\000", 4051416890)
		methodParticlesMaterial[29] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_normal_texture\000", 3635182373)
		methodParticlesMaterial[30] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_color_texture\000", 4051416890)
		methodParticlesMaterial[31] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_color_texture\000", 3635182373)
		methodParticlesMaterial[32] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_point_count\000", 1286410249)
		methodParticlesMaterial[33] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_point_count\000", 3905245786)
		methodParticlesMaterial[34] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_ring_axis\000", 3460891852)
		methodParticlesMaterial[35] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_ring_axis\000", 3360562783)
		methodParticlesMaterial[36] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_ring_height\000", 373806689)
		methodParticlesMaterial[37] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_ring_height\000", 1740695150)
		methodParticlesMaterial[38] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_ring_radius\000", 373806689)
		methodParticlesMaterial[39] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_ring_radius\000", 1740695150)
		methodParticlesMaterial[40] = gdnative.MethodOf("ParticlesMaterial\000", "set_emission_ring_inner_radius\000", 373806689)
		methodParticlesMaterial[41] = gdnative.MethodOf("ParticlesMaterial\000", "get_emission_ring_inner_radius\000", 1740695150)
		methodParticlesMaterial[42] = gdnative.MethodOf("ParticlesMaterial\000", "get_turbulence_enabled\000", 36873697)
		methodParticlesMaterial[43] = gdnative.MethodOf("ParticlesMaterial\000", "set_turbulence_enabled\000", 2586408642)
		methodParticlesMaterial[44] = gdnative.MethodOf("ParticlesMaterial\000", "get_turbulence_noise_strength\000", 1740695150)
		methodParticlesMaterial[45] = gdnative.MethodOf("ParticlesMaterial\000", "set_turbulence_noise_strength\000", 373806689)
		methodParticlesMaterial[46] = gdnative.MethodOf("ParticlesMaterial\000", "get_turbulence_noise_scale\000", 1740695150)
		methodParticlesMaterial[47] = gdnative.MethodOf("ParticlesMaterial\000", "set_turbulence_noise_scale\000", 373806689)
		methodParticlesMaterial[48] = gdnative.MethodOf("ParticlesMaterial\000", "get_turbulence_noise_speed_random\000", 1740695150)
		methodParticlesMaterial[49] = gdnative.MethodOf("ParticlesMaterial\000", "set_turbulence_noise_speed_random\000", 373806689)
		methodParticlesMaterial[50] = gdnative.MethodOf("ParticlesMaterial\000", "get_turbulence_noise_speed\000", 3360562783)
		methodParticlesMaterial[51] = gdnative.MethodOf("ParticlesMaterial\000", "set_turbulence_noise_speed\000", 3460891852)
		methodParticlesMaterial[52] = gdnative.MethodOf("ParticlesMaterial\000", "get_gravity\000", 3360562783)
		methodParticlesMaterial[53] = gdnative.MethodOf("ParticlesMaterial\000", "set_gravity\000", 3460891852)
		methodParticlesMaterial[54] = gdnative.MethodOf("ParticlesMaterial\000", "set_lifetime_randomness\000", 373806689)
		methodParticlesMaterial[55] = gdnative.MethodOf("ParticlesMaterial\000", "get_lifetime_randomness\000", 1740695150)
		methodParticlesMaterial[56] = gdnative.MethodOf("ParticlesMaterial\000", "get_sub_emitter_mode\000", 1938652866)
		methodParticlesMaterial[57] = gdnative.MethodOf("ParticlesMaterial\000", "set_sub_emitter_mode\000", 372278199)
		methodParticlesMaterial[58] = gdnative.MethodOf("ParticlesMaterial\000", "get_sub_emitter_frequency\000", 1740695150)
		methodParticlesMaterial[59] = gdnative.MethodOf("ParticlesMaterial\000", "set_sub_emitter_frequency\000", 373806689)
		methodParticlesMaterial[60] = gdnative.MethodOf("ParticlesMaterial\000", "get_sub_emitter_amount_at_end\000", 3905245786)
		methodParticlesMaterial[61] = gdnative.MethodOf("ParticlesMaterial\000", "set_sub_emitter_amount_at_end\000", 1286410249)
		methodParticlesMaterial[62] = gdnative.MethodOf("ParticlesMaterial\000", "get_sub_emitter_keep_velocity\000", 36873697)
		methodParticlesMaterial[63] = gdnative.MethodOf("ParticlesMaterial\000", "set_sub_emitter_keep_velocity\000", 2586408642)
		methodParticlesMaterial[64] = gdnative.MethodOf("ParticlesMaterial\000", "set_attractor_interaction_enabled\000", 2586408642)
		methodParticlesMaterial[65] = gdnative.MethodOf("ParticlesMaterial\000", "is_attractor_interaction_enabled\000", 36873697)
		methodParticlesMaterial[66] = gdnative.MethodOf("ParticlesMaterial\000", "set_collision_enabled\000", 2586408642)
		methodParticlesMaterial[67] = gdnative.MethodOf("ParticlesMaterial\000", "is_collision_enabled\000", 36873697)
		methodParticlesMaterial[68] = gdnative.MethodOf("ParticlesMaterial\000", "set_collision_use_scale\000", 2586408642)
		methodParticlesMaterial[69] = gdnative.MethodOf("ParticlesMaterial\000", "is_collision_using_scale\000", 36873697)
		methodParticlesMaterial[70] = gdnative.MethodOf("ParticlesMaterial\000", "set_collision_friction\000", 373806689)
		methodParticlesMaterial[71] = gdnative.MethodOf("ParticlesMaterial\000", "get_collision_friction\000", 1740695150)
		methodParticlesMaterial[72] = gdnative.MethodOf("ParticlesMaterial\000", "set_collision_bounce\000", 373806689)
		methodParticlesMaterial[73] = gdnative.MethodOf("ParticlesMaterial\000", "get_collision_bounce\000", 1740695150)
		methodPath2D[0] = gdnative.MethodOf("Path2D\000", "set_curve\000", 659985499)
		methodPath2D[1] = gdnative.MethodOf("Path2D\000", "get_curve\000", 660369445)
		methodPath3D[0] = gdnative.MethodOf("Path3D\000", "set_curve\000", 408955118)
		methodPath3D[1] = gdnative.MethodOf("Path3D\000", "get_curve\000", 4244715212)
		methodPathFollow2D[0] = gdnative.MethodOf("PathFollow2D\000", "set_offset\000", 373806689)
		methodPathFollow2D[1] = gdnative.MethodOf("PathFollow2D\000", "get_offset\000", 1740695150)
		methodPathFollow2D[2] = gdnative.MethodOf("PathFollow2D\000", "set_h_offset\000", 373806689)
		methodPathFollow2D[3] = gdnative.MethodOf("PathFollow2D\000", "get_h_offset\000", 1740695150)
		methodPathFollow2D[4] = gdnative.MethodOf("PathFollow2D\000", "set_v_offset\000", 373806689)
		methodPathFollow2D[5] = gdnative.MethodOf("PathFollow2D\000", "get_v_offset\000", 1740695150)
		methodPathFollow2D[6] = gdnative.MethodOf("PathFollow2D\000", "set_unit_offset\000", 373806689)
		methodPathFollow2D[7] = gdnative.MethodOf("PathFollow2D\000", "get_unit_offset\000", 1740695150)
		methodPathFollow2D[8] = gdnative.MethodOf("PathFollow2D\000", "set_rotates\000", 2586408642)
		methodPathFollow2D[9] = gdnative.MethodOf("PathFollow2D\000", "is_rotating\000", 36873697)
		methodPathFollow2D[10] = gdnative.MethodOf("PathFollow2D\000", "set_cubic_interpolation\000", 2586408642)
		methodPathFollow2D[11] = gdnative.MethodOf("PathFollow2D\000", "get_cubic_interpolation\000", 36873697)
		methodPathFollow2D[12] = gdnative.MethodOf("PathFollow2D\000", "set_loop\000", 2586408642)
		methodPathFollow2D[13] = gdnative.MethodOf("PathFollow2D\000", "has_loop\000", 36873697)
		methodPathFollow2D[14] = gdnative.MethodOf("PathFollow2D\000", "set_lookahead\000", 373806689)
		methodPathFollow2D[15] = gdnative.MethodOf("PathFollow2D\000", "get_lookahead\000", 1740695150)
		methodPathFollow3D[0] = gdnative.MethodOf("PathFollow3D\000", "set_offset\000", 373806689)
		methodPathFollow3D[1] = gdnative.MethodOf("PathFollow3D\000", "get_offset\000", 1740695150)
		methodPathFollow3D[2] = gdnative.MethodOf("PathFollow3D\000", "set_h_offset\000", 373806689)
		methodPathFollow3D[3] = gdnative.MethodOf("PathFollow3D\000", "get_h_offset\000", 1740695150)
		methodPathFollow3D[4] = gdnative.MethodOf("PathFollow3D\000", "set_v_offset\000", 373806689)
		methodPathFollow3D[5] = gdnative.MethodOf("PathFollow3D\000", "get_v_offset\000", 1740695150)
		methodPathFollow3D[6] = gdnative.MethodOf("PathFollow3D\000", "set_unit_offset\000", 373806689)
		methodPathFollow3D[7] = gdnative.MethodOf("PathFollow3D\000", "get_unit_offset\000", 1740695150)
		methodPathFollow3D[8] = gdnative.MethodOf("PathFollow3D\000", "set_rotation_mode\000", 1640311967)
		methodPathFollow3D[9] = gdnative.MethodOf("PathFollow3D\000", "get_rotation_mode\000", 3814010545)
		methodPathFollow3D[10] = gdnative.MethodOf("PathFollow3D\000", "set_cubic_interpolation\000", 2586408642)
		methodPathFollow3D[11] = gdnative.MethodOf("PathFollow3D\000", "get_cubic_interpolation\000", 36873697)
		methodPathFollow3D[12] = gdnative.MethodOf("PathFollow3D\000", "set_loop\000", 2586408642)
		methodPathFollow3D[13] = gdnative.MethodOf("PathFollow3D\000", "has_loop\000", 36873697)
		methodPerformance[0] = gdnative.MethodOf("Performance\000", "get_monitor\000", 1943275655)
		methodPerformance[1] = gdnative.MethodOf("Performance\000", "add_custom_monitor\000", 2865980031)
		methodPerformance[2] = gdnative.MethodOf("Performance\000", "remove_custom_monitor\000", 3304788590)
		methodPerformance[3] = gdnative.MethodOf("Performance\000", "has_custom_monitor\000", 2041966384)
		methodPerformance[4] = gdnative.MethodOf("Performance\000", "get_custom_monitor\000", 2138907829)
		methodPerformance[5] = gdnative.MethodOf("Performance\000", "get_monitor_modification_time\000", 2455072627)
		methodPerformance[6] = gdnative.MethodOf("Performance\000", "get_custom_monitor_names\000", 2915620761)
		methodPhysicalBone2D[0] = gdnative.MethodOf("PhysicalBone2D\000", "get_joint\000", 3582132112)
		methodPhysicalBone2D[1] = gdnative.MethodOf("PhysicalBone2D\000", "get_auto_configure_joint\000", 36873697)
		methodPhysicalBone2D[2] = gdnative.MethodOf("PhysicalBone2D\000", "set_auto_configure_joint\000", 2586408642)
		methodPhysicalBone2D[3] = gdnative.MethodOf("PhysicalBone2D\000", "set_simulate_physics\000", 2586408642)
		methodPhysicalBone2D[4] = gdnative.MethodOf("PhysicalBone2D\000", "get_simulate_physics\000", 36873697)
		methodPhysicalBone2D[5] = gdnative.MethodOf("PhysicalBone2D\000", "is_simulating_physics\000", 36873697)
		methodPhysicalBone2D[6] = gdnative.MethodOf("PhysicalBone2D\000", "set_bone2d_nodepath\000", 1348162250)
		methodPhysicalBone2D[7] = gdnative.MethodOf("PhysicalBone2D\000", "get_bone2d_nodepath\000", 4075236667)
		methodPhysicalBone2D[8] = gdnative.MethodOf("PhysicalBone2D\000", "set_bone2d_index\000", 1286410249)
		methodPhysicalBone2D[9] = gdnative.MethodOf("PhysicalBone2D\000", "get_bone2d_index\000", 3905245786)
		methodPhysicalBone2D[10] = gdnative.MethodOf("PhysicalBone2D\000", "set_follow_bone_when_simulating\000", 2586408642)
		methodPhysicalBone2D[11] = gdnative.MethodOf("PhysicalBone2D\000", "get_follow_bone_when_simulating\000", 36873697)
		methodPhysicalBone3D[0] = gdnative.MethodOf("PhysicalBone3D\000", "apply_central_impulse\000", 3460891852)
		methodPhysicalBone3D[1] = gdnative.MethodOf("PhysicalBone3D\000", "apply_impulse\000", 1002852006)
		methodPhysicalBone3D[2] = gdnative.MethodOf("PhysicalBone3D\000", "set_joint_type\000", 2289552604)
		methodPhysicalBone3D[3] = gdnative.MethodOf("PhysicalBone3D\000", "get_joint_type\000", 931347320)
		methodPhysicalBone3D[4] = gdnative.MethodOf("PhysicalBone3D\000", "set_joint_offset\000", 2952846383)
		methodPhysicalBone3D[5] = gdnative.MethodOf("PhysicalBone3D\000", "get_joint_offset\000", 3229777777)
		methodPhysicalBone3D[6] = gdnative.MethodOf("PhysicalBone3D\000", "set_joint_rotation\000", 3460891852)
		methodPhysicalBone3D[7] = gdnative.MethodOf("PhysicalBone3D\000", "get_joint_rotation\000", 3360562783)
		methodPhysicalBone3D[8] = gdnative.MethodOf("PhysicalBone3D\000", "set_body_offset\000", 2952846383)
		methodPhysicalBone3D[9] = gdnative.MethodOf("PhysicalBone3D\000", "get_body_offset\000", 3229777777)
		methodPhysicalBone3D[10] = gdnative.MethodOf("PhysicalBone3D\000", "get_simulate_physics\000", 2240911060)
		methodPhysicalBone3D[11] = gdnative.MethodOf("PhysicalBone3D\000", "is_simulating_physics\000", 2240911060)
		methodPhysicalBone3D[12] = gdnative.MethodOf("PhysicalBone3D\000", "get_bone_id\000", 3905245786)
		methodPhysicalBone3D[13] = gdnative.MethodOf("PhysicalBone3D\000", "set_mass\000", 373806689)
		methodPhysicalBone3D[14] = gdnative.MethodOf("PhysicalBone3D\000", "get_mass\000", 1740695150)
		methodPhysicalBone3D[15] = gdnative.MethodOf("PhysicalBone3D\000", "set_friction\000", 373806689)
		methodPhysicalBone3D[16] = gdnative.MethodOf("PhysicalBone3D\000", "get_friction\000", 1740695150)
		methodPhysicalBone3D[17] = gdnative.MethodOf("PhysicalBone3D\000", "set_bounce\000", 373806689)
		methodPhysicalBone3D[18] = gdnative.MethodOf("PhysicalBone3D\000", "get_bounce\000", 1740695150)
		methodPhysicalBone3D[19] = gdnative.MethodOf("PhysicalBone3D\000", "set_gravity_scale\000", 373806689)
		methodPhysicalBone3D[20] = gdnative.MethodOf("PhysicalBone3D\000", "get_gravity_scale\000", 1740695150)
		methodPhysicalBone3D[21] = gdnative.MethodOf("PhysicalBone3D\000", "set_linear_damp_mode\000", 1244972221)
		methodPhysicalBone3D[22] = gdnative.MethodOf("PhysicalBone3D\000", "get_linear_damp_mode\000", 205884699)
		methodPhysicalBone3D[23] = gdnative.MethodOf("PhysicalBone3D\000", "set_angular_damp_mode\000", 1244972221)
		methodPhysicalBone3D[24] = gdnative.MethodOf("PhysicalBone3D\000", "get_angular_damp_mode\000", 205884699)
		methodPhysicalBone3D[25] = gdnative.MethodOf("PhysicalBone3D\000", "set_linear_damp\000", 373806689)
		methodPhysicalBone3D[26] = gdnative.MethodOf("PhysicalBone3D\000", "get_linear_damp\000", 1740695150)
		methodPhysicalBone3D[27] = gdnative.MethodOf("PhysicalBone3D\000", "set_angular_damp\000", 373806689)
		methodPhysicalBone3D[28] = gdnative.MethodOf("PhysicalBone3D\000", "get_angular_damp\000", 1740695150)
		methodPhysicalBone3D[29] = gdnative.MethodOf("PhysicalBone3D\000", "set_linear_velocity\000", 3460891852)
		methodPhysicalBone3D[30] = gdnative.MethodOf("PhysicalBone3D\000", "get_linear_velocity\000", 3360562783)
		methodPhysicalBone3D[31] = gdnative.MethodOf("PhysicalBone3D\000", "set_angular_velocity\000", 3460891852)
		methodPhysicalBone3D[32] = gdnative.MethodOf("PhysicalBone3D\000", "get_angular_velocity\000", 3360562783)
		methodPhysicalBone3D[33] = gdnative.MethodOf("PhysicalBone3D\000", "set_use_custom_integrator\000", 2586408642)
		methodPhysicalBone3D[34] = gdnative.MethodOf("PhysicalBone3D\000", "is_using_custom_integrator\000", 2240911060)
		methodPhysicalBone3D[35] = gdnative.MethodOf("PhysicalBone3D\000", "set_can_sleep\000", 2586408642)
		methodPhysicalBone3D[36] = gdnative.MethodOf("PhysicalBone3D\000", "is_able_to_sleep\000", 36873697)
		methodPhysicalSkyMaterial[0] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_rayleigh_coefficient\000", 373806689)
		methodPhysicalSkyMaterial[1] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_rayleigh_coefficient\000", 1740695150)
		methodPhysicalSkyMaterial[2] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_rayleigh_color\000", 2920490490)
		methodPhysicalSkyMaterial[3] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_rayleigh_color\000", 3444240500)
		methodPhysicalSkyMaterial[4] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_mie_coefficient\000", 373806689)
		methodPhysicalSkyMaterial[5] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_mie_coefficient\000", 1740695150)
		methodPhysicalSkyMaterial[6] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_mie_eccentricity\000", 373806689)
		methodPhysicalSkyMaterial[7] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_mie_eccentricity\000", 1740695150)
		methodPhysicalSkyMaterial[8] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_mie_color\000", 2920490490)
		methodPhysicalSkyMaterial[9] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_mie_color\000", 3444240500)
		methodPhysicalSkyMaterial[10] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_turbidity\000", 373806689)
		methodPhysicalSkyMaterial[11] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_turbidity\000", 1740695150)
		methodPhysicalSkyMaterial[12] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_sun_disk_scale\000", 373806689)
		methodPhysicalSkyMaterial[13] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_sun_disk_scale\000", 1740695150)
		methodPhysicalSkyMaterial[14] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_ground_color\000", 2920490490)
		methodPhysicalSkyMaterial[15] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_ground_color\000", 3444240500)
		methodPhysicalSkyMaterial[16] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_exposure\000", 373806689)
		methodPhysicalSkyMaterial[17] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_exposure\000", 1740695150)
		methodPhysicalSkyMaterial[18] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_use_debanding\000", 2586408642)
		methodPhysicalSkyMaterial[19] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_use_debanding\000", 36873697)
		methodPhysicalSkyMaterial[20] = gdnative.MethodOf("PhysicalSkyMaterial\000", "set_night_sky\000", 4051416890)
		methodPhysicalSkyMaterial[21] = gdnative.MethodOf("PhysicalSkyMaterial\000", "get_night_sky\000", 3635182373)
		methodPhysicsBody2D[0] = gdnative.MethodOf("PhysicsBody2D\000", "move_and_collide\000", 1707139212)
		methodPhysicsBody2D[1] = gdnative.MethodOf("PhysicsBody2D\000", "test_move\000", 498344496)
		methodPhysicsBody2D[2] = gdnative.MethodOf("PhysicsBody2D\000", "get_collision_exceptions\000", 2915620761)
		methodPhysicsBody2D[3] = gdnative.MethodOf("PhysicsBody2D\000", "add_collision_exception_with\000", 1078189570)
		methodPhysicsBody2D[4] = gdnative.MethodOf("PhysicsBody2D\000", "remove_collision_exception_with\000", 1078189570)
		methodPhysicsBody3D[0] = gdnative.MethodOf("PhysicsBody3D\000", "move_and_collide\000", 3373113249)
		methodPhysicsBody3D[1] = gdnative.MethodOf("PhysicsBody3D\000", "test_move\000", 3957778045)
		methodPhysicsBody3D[2] = gdnative.MethodOf("PhysicsBody3D\000", "set_axis_lock\000", 1787895195)
		methodPhysicsBody3D[3] = gdnative.MethodOf("PhysicsBody3D\000", "get_axis_lock\000", 2264617709)
		methodPhysicsBody3D[4] = gdnative.MethodOf("PhysicsBody3D\000", "get_collision_exceptions\000", 2915620761)
		methodPhysicsBody3D[5] = gdnative.MethodOf("PhysicsBody3D\000", "add_collision_exception_with\000", 1078189570)
		methodPhysicsBody3D[6] = gdnative.MethodOf("PhysicsBody3D\000", "remove_collision_exception_with\000", 1078189570)
		methodPhysicsDirectBodyState2D[0] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_total_gravity\000", 3341600327)
		methodPhysicsDirectBodyState2D[1] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_total_linear_damp\000", 1740695150)
		methodPhysicsDirectBodyState2D[2] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_total_angular_damp\000", 1740695150)
		methodPhysicsDirectBodyState2D[3] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_center_of_mass\000", 3341600327)
		methodPhysicsDirectBodyState2D[4] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_center_of_mass_local\000", 3341600327)
		methodPhysicsDirectBodyState2D[5] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_inverse_mass\000", 1740695150)
		methodPhysicsDirectBodyState2D[6] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_inverse_inertia\000", 1740695150)
		methodPhysicsDirectBodyState2D[7] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_linear_velocity\000", 743155724)
		methodPhysicsDirectBodyState2D[8] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_linear_velocity\000", 3341600327)
		methodPhysicsDirectBodyState2D[9] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_angular_velocity\000", 373806689)
		methodPhysicsDirectBodyState2D[10] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_angular_velocity\000", 1740695150)
		methodPhysicsDirectBodyState2D[11] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_transform\000", 2761652528)
		methodPhysicsDirectBodyState2D[12] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_transform\000", 3814499831)
		methodPhysicsDirectBodyState2D[13] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_velocity_at_local_position\000", 2656412154)
		methodPhysicsDirectBodyState2D[14] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_central_impulse\000", 743155724)
		methodPhysicsDirectBodyState2D[15] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_torque_impulse\000", 373806689)
		methodPhysicsDirectBodyState2D[16] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_impulse\000", 496058220)
		methodPhysicsDirectBodyState2D[17] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_central_force\000", 3862383994)
		methodPhysicsDirectBodyState2D[18] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_force\000", 496058220)
		methodPhysicsDirectBodyState2D[19] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "apply_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[20] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "add_constant_central_force\000", 3862383994)
		methodPhysicsDirectBodyState2D[21] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "add_constant_force\000", 496058220)
		methodPhysicsDirectBodyState2D[22] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "add_constant_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[23] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_constant_force\000", 743155724)
		methodPhysicsDirectBodyState2D[24] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_constant_force\000", 3341600327)
		methodPhysicsDirectBodyState2D[25] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_constant_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[26] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_constant_torque\000", 1740695150)
		methodPhysicsDirectBodyState2D[27] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "set_sleep_state\000", 2586408642)
		methodPhysicsDirectBodyState2D[28] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "is_sleeping\000", 36873697)
		methodPhysicsDirectBodyState2D[29] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_count\000", 3905245786)
		methodPhysicsDirectBodyState2D[30] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_local_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[31] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_local_normal\000", 2299179447)
		methodPhysicsDirectBodyState2D[32] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_local_shape\000", 923996154)
		methodPhysicsDirectBodyState2D[33] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider\000", 495598643)
		methodPhysicsDirectBodyState2D[34] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[35] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider_id\000", 923996154)
		methodPhysicsDirectBodyState2D[36] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider_object\000", 3332903315)
		methodPhysicsDirectBodyState2D[37] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider_shape\000", 923996154)
		methodPhysicsDirectBodyState2D[38] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_contact_collider_velocity_at_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[39] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_step\000", 1740695150)
		methodPhysicsDirectBodyState2D[40] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "integrate_forces\000", 3218959716)
		methodPhysicsDirectBodyState2D[41] = gdnative.MethodOf("PhysicsDirectBodyState2D\000", "get_space_state\000", 2506717822)
		methodPhysicsDirectBodyState3D[0] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_total_gravity\000", 3360562783)
		methodPhysicsDirectBodyState3D[1] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_total_linear_damp\000", 1740695150)
		methodPhysicsDirectBodyState3D[2] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_total_angular_damp\000", 1740695150)
		methodPhysicsDirectBodyState3D[3] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_center_of_mass\000", 3360562783)
		methodPhysicsDirectBodyState3D[4] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_center_of_mass_local\000", 3360562783)
		methodPhysicsDirectBodyState3D[5] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_principal_inertia_axes\000", 2716978435)
		methodPhysicsDirectBodyState3D[6] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_inverse_mass\000", 1740695150)
		methodPhysicsDirectBodyState3D[7] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_inverse_inertia\000", 3360562783)
		methodPhysicsDirectBodyState3D[8] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_linear_velocity\000", 3460891852)
		methodPhysicsDirectBodyState3D[9] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_linear_velocity\000", 3360562783)
		methodPhysicsDirectBodyState3D[10] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_angular_velocity\000", 3460891852)
		methodPhysicsDirectBodyState3D[11] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_angular_velocity\000", 3360562783)
		methodPhysicsDirectBodyState3D[12] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_transform\000", 2952846383)
		methodPhysicsDirectBodyState3D[13] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_transform\000", 3229777777)
		methodPhysicsDirectBodyState3D[14] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_velocity_at_local_position\000", 192990374)
		methodPhysicsDirectBodyState3D[15] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_central_impulse\000", 2007698547)
		methodPhysicsDirectBodyState3D[16] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_impulse\000", 1002852006)
		methodPhysicsDirectBodyState3D[17] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_torque_impulse\000", 3460891852)
		methodPhysicsDirectBodyState3D[18] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_central_force\000", 2007698547)
		methodPhysicsDirectBodyState3D[19] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_force\000", 1002852006)
		methodPhysicsDirectBodyState3D[20] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "apply_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[21] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "add_constant_central_force\000", 2007698547)
		methodPhysicsDirectBodyState3D[22] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "add_constant_force\000", 1002852006)
		methodPhysicsDirectBodyState3D[23] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "add_constant_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[24] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_constant_force\000", 3460891852)
		methodPhysicsDirectBodyState3D[25] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_constant_force\000", 3360562783)
		methodPhysicsDirectBodyState3D[26] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_constant_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[27] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_constant_torque\000", 3360562783)
		methodPhysicsDirectBodyState3D[28] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "set_sleep_state\000", 2586408642)
		methodPhysicsDirectBodyState3D[29] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "is_sleeping\000", 36873697)
		methodPhysicsDirectBodyState3D[30] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_count\000", 3905245786)
		methodPhysicsDirectBodyState3D[31] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_local_position\000", 711720468)
		methodPhysicsDirectBodyState3D[32] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_local_normal\000", 711720468)
		methodPhysicsDirectBodyState3D[33] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_impulse\000", 2339986948)
		methodPhysicsDirectBodyState3D[34] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_local_shape\000", 923996154)
		methodPhysicsDirectBodyState3D[35] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider\000", 495598643)
		methodPhysicsDirectBodyState3D[36] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider_position\000", 711720468)
		methodPhysicsDirectBodyState3D[37] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider_id\000", 923996154)
		methodPhysicsDirectBodyState3D[38] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider_object\000", 3332903315)
		methodPhysicsDirectBodyState3D[39] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider_shape\000", 923996154)
		methodPhysicsDirectBodyState3D[40] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_contact_collider_velocity_at_position\000", 711720468)
		methodPhysicsDirectBodyState3D[41] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_step\000", 1740695150)
		methodPhysicsDirectBodyState3D[42] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "integrate_forces\000", 3218959716)
		methodPhysicsDirectBodyState3D[43] = gdnative.MethodOf("PhysicsDirectBodyState3D\000", "get_space_state\000", 2069328350)
		methodPhysicsDirectSpaceState2D[0] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "intersect_point\000", 3278207904)
		methodPhysicsDirectSpaceState2D[1] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "intersect_ray\000", 1590275562)
		methodPhysicsDirectSpaceState2D[2] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "intersect_shape\000", 3803848594)
		methodPhysicsDirectSpaceState2D[3] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "cast_motion\000", 1194958700)
		methodPhysicsDirectSpaceState2D[4] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "collide_shape\000", 3803848594)
		methodPhysicsDirectSpaceState2D[5] = gdnative.MethodOf("PhysicsDirectSpaceState2D\000", "get_rest_info\000", 2803666496)
		methodPhysicsDirectSpaceState3D[0] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "intersect_point\000", 45993382)
		methodPhysicsDirectSpaceState3D[1] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "intersect_ray\000", 3957970750)
		methodPhysicsDirectSpaceState3D[2] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "intersect_shape\000", 550215980)
		methodPhysicsDirectSpaceState3D[3] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "cast_motion\000", 2463445962)
		methodPhysicsDirectSpaceState3D[4] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "collide_shape\000", 550215980)
		methodPhysicsDirectSpaceState3D[5] = gdnative.MethodOf("PhysicsDirectSpaceState3D\000", "get_rest_info\000", 1376751592)
		methodPhysicsMaterial[0] = gdnative.MethodOf("PhysicsMaterial\000", "set_friction\000", 373806689)
		methodPhysicsMaterial[1] = gdnative.MethodOf("PhysicsMaterial\000", "get_friction\000", 1740695150)
		methodPhysicsMaterial[2] = gdnative.MethodOf("PhysicsMaterial\000", "set_rough\000", 2586408642)
		methodPhysicsMaterial[3] = gdnative.MethodOf("PhysicsMaterial\000", "is_rough\000", 36873697)
		methodPhysicsMaterial[4] = gdnative.MethodOf("PhysicsMaterial\000", "set_bounce\000", 373806689)
		methodPhysicsMaterial[5] = gdnative.MethodOf("PhysicsMaterial\000", "get_bounce\000", 1740695150)
		methodPhysicsMaterial[6] = gdnative.MethodOf("PhysicsMaterial\000", "set_absorbent\000", 2586408642)
		methodPhysicsMaterial[7] = gdnative.MethodOf("PhysicsMaterial\000", "is_absorbent\000", 36873697)
		methodPhysicsPointQueryParameters2D[0] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_position\000", 743155724)
		methodPhysicsPointQueryParameters2D[1] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "get_position\000", 3341600327)
		methodPhysicsPointQueryParameters2D[2] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_canvas_instance_id\000", 1286410249)
		methodPhysicsPointQueryParameters2D[3] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "get_canvas_instance_id\000", 3905245786)
		methodPhysicsPointQueryParameters2D[4] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsPointQueryParameters2D[5] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsPointQueryParameters2D[6] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsPointQueryParameters2D[7] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsPointQueryParameters2D[8] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsPointQueryParameters2D[9] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsPointQueryParameters2D[10] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsPointQueryParameters2D[11] = gdnative.MethodOf("PhysicsPointQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsPointQueryParameters3D[0] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "set_position\000", 3460891852)
		methodPhysicsPointQueryParameters3D[1] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "get_position\000", 3360562783)
		methodPhysicsPointQueryParameters3D[2] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsPointQueryParameters3D[3] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsPointQueryParameters3D[4] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsPointQueryParameters3D[5] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsPointQueryParameters3D[6] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsPointQueryParameters3D[7] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsPointQueryParameters3D[8] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsPointQueryParameters3D[9] = gdnative.MethodOf("PhysicsPointQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[0] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "create\000", 1118143851)
		methodPhysicsRayQueryParameters2D[1] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_from\000", 743155724)
		methodPhysicsRayQueryParameters2D[2] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "get_from\000", 3341600327)
		methodPhysicsRayQueryParameters2D[3] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_to\000", 743155724)
		methodPhysicsRayQueryParameters2D[4] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "get_to\000", 3341600327)
		methodPhysicsRayQueryParameters2D[5] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsRayQueryParameters2D[6] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsRayQueryParameters2D[7] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsRayQueryParameters2D[8] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsRayQueryParameters2D[9] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsRayQueryParameters2D[10] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[11] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsRayQueryParameters2D[12] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[13] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "set_hit_from_inside\000", 2586408642)
		methodPhysicsRayQueryParameters2D[14] = gdnative.MethodOf("PhysicsRayQueryParameters2D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[0] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "create\000", 680321959)
		methodPhysicsRayQueryParameters3D[1] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_from\000", 3460891852)
		methodPhysicsRayQueryParameters3D[2] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "get_from\000", 3360562783)
		methodPhysicsRayQueryParameters3D[3] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_to\000", 3460891852)
		methodPhysicsRayQueryParameters3D[4] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "get_to\000", 3360562783)
		methodPhysicsRayQueryParameters3D[5] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsRayQueryParameters3D[6] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsRayQueryParameters3D[7] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsRayQueryParameters3D[8] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsRayQueryParameters3D[9] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsRayQueryParameters3D[10] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[11] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsRayQueryParameters3D[12] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[13] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_hit_from_inside\000", 2586408642)
		methodPhysicsRayQueryParameters3D[14] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[15] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "set_hit_back_faces\000", 2586408642)
		methodPhysicsRayQueryParameters3D[16] = gdnative.MethodOf("PhysicsRayQueryParameters3D\000", "is_hit_back_faces_enabled\000", 36873697)
		methodPhysicsServer2D[0] = gdnative.MethodOf("PhysicsServer2D\000", "world_boundary_shape_create\000", 529393457)
		methodPhysicsServer2D[1] = gdnative.MethodOf("PhysicsServer2D\000", "separation_ray_shape_create\000", 529393457)
		methodPhysicsServer2D[2] = gdnative.MethodOf("PhysicsServer2D\000", "segment_shape_create\000", 529393457)
		methodPhysicsServer2D[3] = gdnative.MethodOf("PhysicsServer2D\000", "circle_shape_create\000", 529393457)
		methodPhysicsServer2D[4] = gdnative.MethodOf("PhysicsServer2D\000", "rectangle_shape_create\000", 529393457)
		methodPhysicsServer2D[5] = gdnative.MethodOf("PhysicsServer2D\000", "capsule_shape_create\000", 529393457)
		methodPhysicsServer2D[6] = gdnative.MethodOf("PhysicsServer2D\000", "convex_polygon_shape_create\000", 529393457)
		methodPhysicsServer2D[7] = gdnative.MethodOf("PhysicsServer2D\000", "concave_polygon_shape_create\000", 529393457)
		methodPhysicsServer2D[8] = gdnative.MethodOf("PhysicsServer2D\000", "shape_set_data\000", 3175752987)
		methodPhysicsServer2D[9] = gdnative.MethodOf("PhysicsServer2D\000", "shape_get_type\000", 1240598777)
		methodPhysicsServer2D[10] = gdnative.MethodOf("PhysicsServer2D\000", "shape_get_data\000", 4171304767)
		methodPhysicsServer2D[11] = gdnative.MethodOf("PhysicsServer2D\000", "space_create\000", 529393457)
		methodPhysicsServer2D[12] = gdnative.MethodOf("PhysicsServer2D\000", "space_set_active\000", 1265174801)
		methodPhysicsServer2D[13] = gdnative.MethodOf("PhysicsServer2D\000", "space_is_active\000", 4155700596)
		methodPhysicsServer2D[14] = gdnative.MethodOf("PhysicsServer2D\000", "space_set_param\000", 949194586)
		methodPhysicsServer2D[15] = gdnative.MethodOf("PhysicsServer2D\000", "space_get_param\000", 874111783)
		methodPhysicsServer2D[16] = gdnative.MethodOf("PhysicsServer2D\000", "space_get_direct_state\000", 3160173886)
		methodPhysicsServer2D[17] = gdnative.MethodOf("PhysicsServer2D\000", "area_create\000", 529393457)
		methodPhysicsServer2D[18] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_space\000", 395945892)
		methodPhysicsServer2D[19] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_space\000", 3814569979)
		methodPhysicsServer2D[20] = gdnative.MethodOf("PhysicsServer2D\000", "area_add_shape\000", 754862190)
		methodPhysicsServer2D[21] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_shape\000", 2310537182)
		methodPhysicsServer2D[22] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_shape_transform\000", 736082694)
		methodPhysicsServer2D[23] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_shape_disabled\000", 2658558584)
		methodPhysicsServer2D[24] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_shape_count\000", 2198884583)
		methodPhysicsServer2D[25] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_shape\000", 1066463050)
		methodPhysicsServer2D[26] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_shape_transform\000", 1324854622)
		methodPhysicsServer2D[27] = gdnative.MethodOf("PhysicsServer2D\000", "area_remove_shape\000", 3411492887)
		methodPhysicsServer2D[28] = gdnative.MethodOf("PhysicsServer2D\000", "area_clear_shapes\000", 2722037293)
		methodPhysicsServer2D[29] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_collision_layer\000", 3411492887)
		methodPhysicsServer2D[30] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_collision_mask\000", 3411492887)
		methodPhysicsServer2D[31] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_param\000", 1257146028)
		methodPhysicsServer2D[32] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_transform\000", 1246044741)
		methodPhysicsServer2D[33] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_param\000", 3047435120)
		methodPhysicsServer2D[34] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_transform\000", 213527486)
		methodPhysicsServer2D[35] = gdnative.MethodOf("PhysicsServer2D\000", "area_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer2D[36] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_object_instance_id\000", 2198884583)
		methodPhysicsServer2D[37] = gdnative.MethodOf("PhysicsServer2D\000", "area_attach_canvas_instance_id\000", 3411492887)
		methodPhysicsServer2D[38] = gdnative.MethodOf("PhysicsServer2D\000", "area_get_canvas_instance_id\000", 2198884583)
		methodPhysicsServer2D[39] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_monitor_callback\000", 3379118538)
		methodPhysicsServer2D[40] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_area_monitor_callback\000", 3379118538)
		methodPhysicsServer2D[41] = gdnative.MethodOf("PhysicsServer2D\000", "area_set_monitorable\000", 1265174801)
		methodPhysicsServer2D[42] = gdnative.MethodOf("PhysicsServer2D\000", "body_create\000", 529393457)
		methodPhysicsServer2D[43] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_space\000", 395945892)
		methodPhysicsServer2D[44] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_space\000", 3814569979)
		methodPhysicsServer2D[45] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_mode\000", 1658067650)
		methodPhysicsServer2D[46] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_mode\000", 3261702585)
		methodPhysicsServer2D[47] = gdnative.MethodOf("PhysicsServer2D\000", "body_add_shape\000", 754862190)
		methodPhysicsServer2D[48] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_shape\000", 2310537182)
		methodPhysicsServer2D[49] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_shape_transform\000", 736082694)
		methodPhysicsServer2D[50] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_shape_count\000", 2198884583)
		methodPhysicsServer2D[51] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_shape\000", 1066463050)
		methodPhysicsServer2D[52] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_shape_transform\000", 1324854622)
		methodPhysicsServer2D[53] = gdnative.MethodOf("PhysicsServer2D\000", "body_remove_shape\000", 3411492887)
		methodPhysicsServer2D[54] = gdnative.MethodOf("PhysicsServer2D\000", "body_clear_shapes\000", 2722037293)
		methodPhysicsServer2D[55] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_shape_disabled\000", 2658558584)
		methodPhysicsServer2D[56] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_shape_as_one_way_collision\000", 2556489974)
		methodPhysicsServer2D[57] = gdnative.MethodOf("PhysicsServer2D\000", "body_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer2D[58] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_object_instance_id\000", 2198884583)
		methodPhysicsServer2D[59] = gdnative.MethodOf("PhysicsServer2D\000", "body_attach_canvas_instance_id\000", 3411492887)
		methodPhysicsServer2D[60] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_canvas_instance_id\000", 2198884583)
		methodPhysicsServer2D[61] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_continuous_collision_detection_mode\000", 1882257015)
		methodPhysicsServer2D[62] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_continuous_collision_detection_mode\000", 2661282217)
		methodPhysicsServer2D[63] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_collision_layer\000", 3411492887)
		methodPhysicsServer2D[64] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_collision_layer\000", 2198884583)
		methodPhysicsServer2D[65] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_collision_mask\000", 3411492887)
		methodPhysicsServer2D[66] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_collision_mask\000", 2198884583)
		methodPhysicsServer2D[67] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_param\000", 2715630609)
		methodPhysicsServer2D[68] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_param\000", 3208033526)
		methodPhysicsServer2D[69] = gdnative.MethodOf("PhysicsServer2D\000", "body_reset_mass_properties\000", 2722037293)
		methodPhysicsServer2D[70] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_state\000", 1706355209)
		methodPhysicsServer2D[71] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_state\000", 4036367961)
		methodPhysicsServer2D[72] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_central_impulse\000", 3201125042)
		methodPhysicsServer2D[73] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_torque_impulse\000", 1794382983)
		methodPhysicsServer2D[74] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_impulse\000", 34330743)
		methodPhysicsServer2D[75] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_central_force\000", 3201125042)
		methodPhysicsServer2D[76] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_force\000", 34330743)
		methodPhysicsServer2D[77] = gdnative.MethodOf("PhysicsServer2D\000", "body_apply_torque\000", 1794382983)
		methodPhysicsServer2D[78] = gdnative.MethodOf("PhysicsServer2D\000", "body_add_constant_central_force\000", 3201125042)
		methodPhysicsServer2D[79] = gdnative.MethodOf("PhysicsServer2D\000", "body_add_constant_force\000", 34330743)
		methodPhysicsServer2D[80] = gdnative.MethodOf("PhysicsServer2D\000", "body_add_constant_torque\000", 1794382983)
		methodPhysicsServer2D[81] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_constant_force\000", 3201125042)
		methodPhysicsServer2D[82] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_constant_force\000", 2440833711)
		methodPhysicsServer2D[83] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_constant_torque\000", 1794382983)
		methodPhysicsServer2D[84] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_constant_torque\000", 866169185)
		methodPhysicsServer2D[85] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_axis_velocity\000", 3201125042)
		methodPhysicsServer2D[86] = gdnative.MethodOf("PhysicsServer2D\000", "body_add_collision_exception\000", 395945892)
		methodPhysicsServer2D[87] = gdnative.MethodOf("PhysicsServer2D\000", "body_remove_collision_exception\000", 395945892)
		methodPhysicsServer2D[88] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_max_contacts_reported\000", 3411492887)
		methodPhysicsServer2D[89] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_max_contacts_reported\000", 2198884583)
		methodPhysicsServer2D[90] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_omit_force_integration\000", 1265174801)
		methodPhysicsServer2D[91] = gdnative.MethodOf("PhysicsServer2D\000", "body_is_omitting_force_integration\000", 4155700596)
		methodPhysicsServer2D[92] = gdnative.MethodOf("PhysicsServer2D\000", "body_set_force_integration_callback\000", 3059434249)
		methodPhysicsServer2D[93] = gdnative.MethodOf("PhysicsServer2D\000", "body_test_motion\000", 1699844009)
		methodPhysicsServer2D[94] = gdnative.MethodOf("PhysicsServer2D\000", "body_get_direct_state\000", 1191931871)
		methodPhysicsServer2D[95] = gdnative.MethodOf("PhysicsServer2D\000", "joint_create\000", 529393457)
		methodPhysicsServer2D[96] = gdnative.MethodOf("PhysicsServer2D\000", "joint_clear\000", 2722037293)
		methodPhysicsServer2D[97] = gdnative.MethodOf("PhysicsServer2D\000", "joint_set_param\000", 3972556514)
		methodPhysicsServer2D[98] = gdnative.MethodOf("PhysicsServer2D\000", "joint_get_param\000", 4016448949)
		methodPhysicsServer2D[99] = gdnative.MethodOf("PhysicsServer2D\000", "joint_make_pin\000", 2288600450)
		methodPhysicsServer2D[100] = gdnative.MethodOf("PhysicsServer2D\000", "joint_make_groove\000", 3573265764)
		methodPhysicsServer2D[101] = gdnative.MethodOf("PhysicsServer2D\000", "joint_make_damped_spring\000", 206603952)
		methodPhysicsServer2D[102] = gdnative.MethodOf("PhysicsServer2D\000", "damped_spring_joint_set_param\000", 220564071)
		methodPhysicsServer2D[103] = gdnative.MethodOf("PhysicsServer2D\000", "damped_spring_joint_get_param\000", 2075871277)
		methodPhysicsServer2D[104] = gdnative.MethodOf("PhysicsServer2D\000", "joint_get_type\000", 4262502231)
		methodPhysicsServer2D[105] = gdnative.MethodOf("PhysicsServer2D\000", "free_rid\000", 2722037293)
		methodPhysicsServer2D[106] = gdnative.MethodOf("PhysicsServer2D\000", "set_active\000", 2586408642)
		methodPhysicsServer2D[107] = gdnative.MethodOf("PhysicsServer2D\000", "get_process_info\000", 576496006)
		methodPhysicsServer3D[0] = gdnative.MethodOf("PhysicsServer3D\000", "world_boundary_shape_create\000", 529393457)
		methodPhysicsServer3D[1] = gdnative.MethodOf("PhysicsServer3D\000", "separation_ray_shape_create\000", 529393457)
		methodPhysicsServer3D[2] = gdnative.MethodOf("PhysicsServer3D\000", "sphere_shape_create\000", 529393457)
		methodPhysicsServer3D[3] = gdnative.MethodOf("PhysicsServer3D\000", "box_shape_create\000", 529393457)
		methodPhysicsServer3D[4] = gdnative.MethodOf("PhysicsServer3D\000", "capsule_shape_create\000", 529393457)
		methodPhysicsServer3D[5] = gdnative.MethodOf("PhysicsServer3D\000", "cylinder_shape_create\000", 529393457)
		methodPhysicsServer3D[6] = gdnative.MethodOf("PhysicsServer3D\000", "convex_polygon_shape_create\000", 529393457)
		methodPhysicsServer3D[7] = gdnative.MethodOf("PhysicsServer3D\000", "concave_polygon_shape_create\000", 529393457)
		methodPhysicsServer3D[8] = gdnative.MethodOf("PhysicsServer3D\000", "heightmap_shape_create\000", 529393457)
		methodPhysicsServer3D[9] = gdnative.MethodOf("PhysicsServer3D\000", "custom_shape_create\000", 529393457)
		methodPhysicsServer3D[10] = gdnative.MethodOf("PhysicsServer3D\000", "shape_set_data\000", 3175752987)
		methodPhysicsServer3D[11] = gdnative.MethodOf("PhysicsServer3D\000", "shape_get_type\000", 3418923367)
		methodPhysicsServer3D[12] = gdnative.MethodOf("PhysicsServer3D\000", "shape_get_data\000", 4171304767)
		methodPhysicsServer3D[13] = gdnative.MethodOf("PhysicsServer3D\000", "space_create\000", 529393457)
		methodPhysicsServer3D[14] = gdnative.MethodOf("PhysicsServer3D\000", "space_set_active\000", 1265174801)
		methodPhysicsServer3D[15] = gdnative.MethodOf("PhysicsServer3D\000", "space_is_active\000", 4155700596)
		methodPhysicsServer3D[16] = gdnative.MethodOf("PhysicsServer3D\000", "space_set_param\000", 2406017470)
		methodPhysicsServer3D[17] = gdnative.MethodOf("PhysicsServer3D\000", "space_get_param\000", 1523206731)
		methodPhysicsServer3D[18] = gdnative.MethodOf("PhysicsServer3D\000", "space_get_direct_state\000", 2048616813)
		methodPhysicsServer3D[19] = gdnative.MethodOf("PhysicsServer3D\000", "area_create\000", 529393457)
		methodPhysicsServer3D[20] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_space\000", 395945892)
		methodPhysicsServer3D[21] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_space\000", 3814569979)
		methodPhysicsServer3D[22] = gdnative.MethodOf("PhysicsServer3D\000", "area_add_shape\000", 4040559639)
		methodPhysicsServer3D[23] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_shape\000", 2310537182)
		methodPhysicsServer3D[24] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_shape_transform\000", 675327471)
		methodPhysicsServer3D[25] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_shape_disabled\000", 2658558584)
		methodPhysicsServer3D[26] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_shape_count\000", 2198884583)
		methodPhysicsServer3D[27] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_shape\000", 1066463050)
		methodPhysicsServer3D[28] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_shape_transform\000", 1050775521)
		methodPhysicsServer3D[29] = gdnative.MethodOf("PhysicsServer3D\000", "area_remove_shape\000", 3411492887)
		methodPhysicsServer3D[30] = gdnative.MethodOf("PhysicsServer3D\000", "area_clear_shapes\000", 2722037293)
		methodPhysicsServer3D[31] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_collision_layer\000", 3411492887)
		methodPhysicsServer3D[32] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_collision_mask\000", 3411492887)
		methodPhysicsServer3D[33] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_param\000", 2980114638)
		methodPhysicsServer3D[34] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_transform\000", 3935195649)
		methodPhysicsServer3D[35] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_param\000", 890056067)
		methodPhysicsServer3D[36] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_transform\000", 1128465797)
		methodPhysicsServer3D[37] = gdnative.MethodOf("PhysicsServer3D\000", "area_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer3D[38] = gdnative.MethodOf("PhysicsServer3D\000", "area_get_object_instance_id\000", 2198884583)
		methodPhysicsServer3D[39] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_monitor_callback\000", 3379118538)
		methodPhysicsServer3D[40] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_area_monitor_callback\000", 3379118538)
		methodPhysicsServer3D[41] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_monitorable\000", 1265174801)
		methodPhysicsServer3D[42] = gdnative.MethodOf("PhysicsServer3D\000", "area_set_ray_pickable\000", 1265174801)
		methodPhysicsServer3D[43] = gdnative.MethodOf("PhysicsServer3D\000", "body_create\000", 529393457)
		methodPhysicsServer3D[44] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_space\000", 395945892)
		methodPhysicsServer3D[45] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_space\000", 3814569979)
		methodPhysicsServer3D[46] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_mode\000", 606803466)
		methodPhysicsServer3D[47] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_mode\000", 2488819728)
		methodPhysicsServer3D[48] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_collision_layer\000", 3411492887)
		methodPhysicsServer3D[49] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_collision_layer\000", 2198884583)
		methodPhysicsServer3D[50] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_collision_mask\000", 3411492887)
		methodPhysicsServer3D[51] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_collision_mask\000", 2198884583)
		methodPhysicsServer3D[52] = gdnative.MethodOf("PhysicsServer3D\000", "body_add_shape\000", 4040559639)
		methodPhysicsServer3D[53] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_shape\000", 2310537182)
		methodPhysicsServer3D[54] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_shape_transform\000", 675327471)
		methodPhysicsServer3D[55] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_shape_disabled\000", 2658558584)
		methodPhysicsServer3D[56] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_shape_count\000", 2198884583)
		methodPhysicsServer3D[57] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_shape\000", 1066463050)
		methodPhysicsServer3D[58] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_shape_transform\000", 1050775521)
		methodPhysicsServer3D[59] = gdnative.MethodOf("PhysicsServer3D\000", "body_remove_shape\000", 3411492887)
		methodPhysicsServer3D[60] = gdnative.MethodOf("PhysicsServer3D\000", "body_clear_shapes\000", 2722037293)
		methodPhysicsServer3D[61] = gdnative.MethodOf("PhysicsServer3D\000", "body_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer3D[62] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_object_instance_id\000", 2198884583)
		methodPhysicsServer3D[63] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_enable_continuous_collision_detection\000", 1265174801)
		methodPhysicsServer3D[64] = gdnative.MethodOf("PhysicsServer3D\000", "body_is_continuous_collision_detection_enabled\000", 4155700596)
		methodPhysicsServer3D[65] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_param\000", 910941953)
		methodPhysicsServer3D[66] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_param\000", 3385027841)
		methodPhysicsServer3D[67] = gdnative.MethodOf("PhysicsServer3D\000", "body_reset_mass_properties\000", 2722037293)
		methodPhysicsServer3D[68] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_state\000", 599977762)
		methodPhysicsServer3D[69] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_state\000", 1850449534)
		methodPhysicsServer3D[70] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_central_impulse\000", 3227306858)
		methodPhysicsServer3D[71] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_impulse\000", 110375048)
		methodPhysicsServer3D[72] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_torque_impulse\000", 3227306858)
		methodPhysicsServer3D[73] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_central_force\000", 3227306858)
		methodPhysicsServer3D[74] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_force\000", 110375048)
		methodPhysicsServer3D[75] = gdnative.MethodOf("PhysicsServer3D\000", "body_apply_torque\000", 3227306858)
		methodPhysicsServer3D[76] = gdnative.MethodOf("PhysicsServer3D\000", "body_add_constant_central_force\000", 3227306858)
		methodPhysicsServer3D[77] = gdnative.MethodOf("PhysicsServer3D\000", "body_add_constant_force\000", 110375048)
		methodPhysicsServer3D[78] = gdnative.MethodOf("PhysicsServer3D\000", "body_add_constant_torque\000", 3227306858)
		methodPhysicsServer3D[79] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_constant_force\000", 3227306858)
		methodPhysicsServer3D[80] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_constant_force\000", 531438156)
		methodPhysicsServer3D[81] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_constant_torque\000", 3227306858)
		methodPhysicsServer3D[82] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_constant_torque\000", 531438156)
		methodPhysicsServer3D[83] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_axis_velocity\000", 3227306858)
		methodPhysicsServer3D[84] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_axis_lock\000", 2020836892)
		methodPhysicsServer3D[85] = gdnative.MethodOf("PhysicsServer3D\000", "body_is_axis_locked\000", 587853580)
		methodPhysicsServer3D[86] = gdnative.MethodOf("PhysicsServer3D\000", "body_add_collision_exception\000", 395945892)
		methodPhysicsServer3D[87] = gdnative.MethodOf("PhysicsServer3D\000", "body_remove_collision_exception\000", 395945892)
		methodPhysicsServer3D[88] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_max_contacts_reported\000", 3411492887)
		methodPhysicsServer3D[89] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_max_contacts_reported\000", 2198884583)
		methodPhysicsServer3D[90] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_omit_force_integration\000", 1265174801)
		methodPhysicsServer3D[91] = gdnative.MethodOf("PhysicsServer3D\000", "body_is_omitting_force_integration\000", 4155700596)
		methodPhysicsServer3D[92] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_force_integration_callback\000", 3059434249)
		methodPhysicsServer3D[93] = gdnative.MethodOf("PhysicsServer3D\000", "body_set_ray_pickable\000", 1265174801)
		methodPhysicsServer3D[94] = gdnative.MethodOf("PhysicsServer3D\000", "body_test_motion\000", 1944921792)
		methodPhysicsServer3D[95] = gdnative.MethodOf("PhysicsServer3D\000", "body_get_direct_state\000", 3029727957)
		methodPhysicsServer3D[96] = gdnative.MethodOf("PhysicsServer3D\000", "soft_body_get_bounds\000", 974181306)
		methodPhysicsServer3D[97] = gdnative.MethodOf("PhysicsServer3D\000", "joint_create\000", 529393457)
		methodPhysicsServer3D[98] = gdnative.MethodOf("PhysicsServer3D\000", "joint_clear\000", 2722037293)
		methodPhysicsServer3D[99] = gdnative.MethodOf("PhysicsServer3D\000", "joint_make_pin\000", 4280171926)
		methodPhysicsServer3D[100] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_set_param\000", 810685294)
		methodPhysicsServer3D[101] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_get_param\000", 2817972347)
		methodPhysicsServer3D[102] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_set_local_a\000", 3227306858)
		methodPhysicsServer3D[103] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_get_local_a\000", 531438156)
		methodPhysicsServer3D[104] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_set_local_b\000", 3227306858)
		methodPhysicsServer3D[105] = gdnative.MethodOf("PhysicsServer3D\000", "pin_joint_get_local_b\000", 531438156)
		methodPhysicsServer3D[106] = gdnative.MethodOf("PhysicsServer3D\000", "joint_make_hinge\000", 1684107643)
		methodPhysicsServer3D[107] = gdnative.MethodOf("PhysicsServer3D\000", "hinge_joint_set_param\000", 3165502333)
		methodPhysicsServer3D[108] = gdnative.MethodOf("PhysicsServer3D\000", "hinge_joint_get_param\000", 2129207581)
		methodPhysicsServer3D[109] = gdnative.MethodOf("PhysicsServer3D\000", "hinge_joint_set_flag\000", 1601626188)
		methodPhysicsServer3D[110] = gdnative.MethodOf("PhysicsServer3D\000", "hinge_joint_get_flag\000", 4165147865)
		methodPhysicsServer3D[111] = gdnative.MethodOf("PhysicsServer3D\000", "joint_make_slider\000", 1684107643)
		methodPhysicsServer3D[112] = gdnative.MethodOf("PhysicsServer3D\000", "slider_joint_set_param\000", 2264833593)
		methodPhysicsServer3D[113] = gdnative.MethodOf("PhysicsServer3D\000", "slider_joint_get_param\000", 3498644957)
		methodPhysicsServer3D[114] = gdnative.MethodOf("PhysicsServer3D\000", "joint_make_cone_twist\000", 1684107643)
		methodPhysicsServer3D[115] = gdnative.MethodOf("PhysicsServer3D\000", "cone_twist_joint_set_param\000", 808587618)
		methodPhysicsServer3D[116] = gdnative.MethodOf("PhysicsServer3D\000", "cone_twist_joint_get_param\000", 1134789658)
		methodPhysicsServer3D[117] = gdnative.MethodOf("PhysicsServer3D\000", "joint_get_type\000", 4290791900)
		methodPhysicsServer3D[118] = gdnative.MethodOf("PhysicsServer3D\000", "joint_set_solver_priority\000", 3411492887)
		methodPhysicsServer3D[119] = gdnative.MethodOf("PhysicsServer3D\000", "joint_get_solver_priority\000", 2198884583)
		methodPhysicsServer3D[120] = gdnative.MethodOf("PhysicsServer3D\000", "joint_make_generic_6dof\000", 1684107643)
		methodPhysicsServer3D[121] = gdnative.MethodOf("PhysicsServer3D\000", "generic_6dof_joint_set_param\000", 2600081391)
		methodPhysicsServer3D[122] = gdnative.MethodOf("PhysicsServer3D\000", "generic_6dof_joint_get_param\000", 467122058)
		methodPhysicsServer3D[123] = gdnative.MethodOf("PhysicsServer3D\000", "generic_6dof_joint_set_flag\000", 3570926903)
		methodPhysicsServer3D[124] = gdnative.MethodOf("PhysicsServer3D\000", "generic_6dof_joint_get_flag\000", 4158090196)
		methodPhysicsServer3D[125] = gdnative.MethodOf("PhysicsServer3D\000", "free_rid\000", 2722037293)
		methodPhysicsServer3D[126] = gdnative.MethodOf("PhysicsServer3D\000", "set_active\000", 2586408642)
		methodPhysicsServer3D[127] = gdnative.MethodOf("PhysicsServer3D\000", "get_process_info\000", 1332958745)
		methodPhysicsShapeQueryParameters2D[0] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_shape\000", 968641751)
		methodPhysicsShapeQueryParameters2D[1] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_shape\000", 121922552)
		methodPhysicsShapeQueryParameters2D[2] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_shape_rid\000", 2722037293)
		methodPhysicsShapeQueryParameters2D[3] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_shape_rid\000", 2944877500)
		methodPhysicsShapeQueryParameters2D[4] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_transform\000", 2761652528)
		methodPhysicsShapeQueryParameters2D[5] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_transform\000", 3814499831)
		methodPhysicsShapeQueryParameters2D[6] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_motion\000", 743155724)
		methodPhysicsShapeQueryParameters2D[7] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_motion\000", 3341600327)
		methodPhysicsShapeQueryParameters2D[8] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_margin\000", 373806689)
		methodPhysicsShapeQueryParameters2D[9] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_margin\000", 1740695150)
		methodPhysicsShapeQueryParameters2D[10] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsShapeQueryParameters2D[11] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsShapeQueryParameters2D[12] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsShapeQueryParameters2D[13] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsShapeQueryParameters2D[14] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsShapeQueryParameters2D[15] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters2D[16] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsShapeQueryParameters2D[17] = gdnative.MethodOf("PhysicsShapeQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters3D[0] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_shape\000", 968641751)
		methodPhysicsShapeQueryParameters3D[1] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_shape\000", 121922552)
		methodPhysicsShapeQueryParameters3D[2] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_shape_rid\000", 2722037293)
		methodPhysicsShapeQueryParameters3D[3] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_shape_rid\000", 2944877500)
		methodPhysicsShapeQueryParameters3D[4] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_transform\000", 2952846383)
		methodPhysicsShapeQueryParameters3D[5] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_transform\000", 3229777777)
		methodPhysicsShapeQueryParameters3D[6] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_motion\000", 3460891852)
		methodPhysicsShapeQueryParameters3D[7] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_motion\000", 3360562783)
		methodPhysicsShapeQueryParameters3D[8] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_margin\000", 373806689)
		methodPhysicsShapeQueryParameters3D[9] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_margin\000", 1740695150)
		methodPhysicsShapeQueryParameters3D[10] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsShapeQueryParameters3D[11] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsShapeQueryParameters3D[12] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsShapeQueryParameters3D[13] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsShapeQueryParameters3D[14] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsShapeQueryParameters3D[15] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters3D[16] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsShapeQueryParameters3D[17] = gdnative.MethodOf("PhysicsShapeQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[0] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "get_from\000", 3814499831)
		methodPhysicsTestMotionParameters2D[1] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_from\000", 2761652528)
		methodPhysicsTestMotionParameters2D[2] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "get_motion\000", 3341600327)
		methodPhysicsTestMotionParameters2D[3] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_motion\000", 743155724)
		methodPhysicsTestMotionParameters2D[4] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "get_margin\000", 1740695150)
		methodPhysicsTestMotionParameters2D[5] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_margin\000", 373806689)
		methodPhysicsTestMotionParameters2D[6] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "is_collide_separation_ray_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[7] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_collide_separation_ray_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters2D[8] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "get_exclude_bodies\000", 3995934104)
		methodPhysicsTestMotionParameters2D[9] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_exclude_bodies\000", 381264803)
		methodPhysicsTestMotionParameters2D[10] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "get_exclude_objects\000", 3995934104)
		methodPhysicsTestMotionParameters2D[11] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_exclude_objects\000", 381264803)
		methodPhysicsTestMotionParameters2D[12] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "is_recovery_as_collision_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[13] = gdnative.MethodOf("PhysicsTestMotionParameters2D\000", "set_recovery_as_collision_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters3D[0] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_from\000", 3229777777)
		methodPhysicsTestMotionParameters3D[1] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_from\000", 2952846383)
		methodPhysicsTestMotionParameters3D[2] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_motion\000", 3360562783)
		methodPhysicsTestMotionParameters3D[3] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_motion\000", 3460891852)
		methodPhysicsTestMotionParameters3D[4] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_margin\000", 1740695150)
		methodPhysicsTestMotionParameters3D[5] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_margin\000", 373806689)
		methodPhysicsTestMotionParameters3D[6] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_max_collisions\000", 3905245786)
		methodPhysicsTestMotionParameters3D[7] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_max_collisions\000", 1286410249)
		methodPhysicsTestMotionParameters3D[8] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "is_collide_separation_ray_enabled\000", 36873697)
		methodPhysicsTestMotionParameters3D[9] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_collide_separation_ray_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters3D[10] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_exclude_bodies\000", 3995934104)
		methodPhysicsTestMotionParameters3D[11] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_exclude_bodies\000", 381264803)
		methodPhysicsTestMotionParameters3D[12] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "get_exclude_objects\000", 3995934104)
		methodPhysicsTestMotionParameters3D[13] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_exclude_objects\000", 381264803)
		methodPhysicsTestMotionParameters3D[14] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "is_recovery_as_collision_enabled\000", 36873697)
		methodPhysicsTestMotionParameters3D[15] = gdnative.MethodOf("PhysicsTestMotionParameters3D\000", "set_recovery_as_collision_enabled\000", 2586408642)
		methodPhysicsTestMotionResult2D[0] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_travel\000", 3341600327)
		methodPhysicsTestMotionResult2D[1] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_remainder\000", 3341600327)
		methodPhysicsTestMotionResult2D[2] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_point\000", 3341600327)
		methodPhysicsTestMotionResult2D[3] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_normal\000", 3341600327)
		methodPhysicsTestMotionResult2D[4] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collider_velocity\000", 3341600327)
		methodPhysicsTestMotionResult2D[5] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collider_id\000", 3905245786)
		methodPhysicsTestMotionResult2D[6] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collider_rid\000", 2944877500)
		methodPhysicsTestMotionResult2D[7] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collider\000", 1981248198)
		methodPhysicsTestMotionResult2D[8] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collider_shape\000", 3905245786)
		methodPhysicsTestMotionResult2D[9] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_local_shape\000", 3905245786)
		methodPhysicsTestMotionResult2D[10] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_depth\000", 1740695150)
		methodPhysicsTestMotionResult2D[11] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_safe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult2D[12] = gdnative.MethodOf("PhysicsTestMotionResult2D\000", "get_collision_unsafe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[0] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_travel\000", 3360562783)
		methodPhysicsTestMotionResult3D[1] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_remainder\000", 3360562783)
		methodPhysicsTestMotionResult3D[2] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_safe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[3] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_unsafe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[4] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_count\000", 3905245786)
		methodPhysicsTestMotionResult3D[5] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_point\000", 1914908202)
		methodPhysicsTestMotionResult3D[6] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_normal\000", 1914908202)
		methodPhysicsTestMotionResult3D[7] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collider_velocity\000", 1914908202)
		methodPhysicsTestMotionResult3D[8] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collider_id\000", 1591665591)
		methodPhysicsTestMotionResult3D[9] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collider_rid\000", 1231817359)
		methodPhysicsTestMotionResult3D[10] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collider\000", 2639523548)
		methodPhysicsTestMotionResult3D[11] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collider_shape\000", 1591665591)
		methodPhysicsTestMotionResult3D[12] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_local_shape\000", 1591665591)
		methodPhysicsTestMotionResult3D[13] = gdnative.MethodOf("PhysicsTestMotionResult3D\000", "get_collision_depth\000", 218038398)
		methodPinJoint2D[0] = gdnative.MethodOf("PinJoint2D\000", "set_softness\000", 373806689)
		methodPinJoint2D[1] = gdnative.MethodOf("PinJoint2D\000", "get_softness\000", 1740695150)
		methodPinJoint3D[0] = gdnative.MethodOf("PinJoint3D\000", "set_param\000", 2059913726)
		methodPinJoint3D[1] = gdnative.MethodOf("PinJoint3D\000", "get_param\000", 1758438771)
		methodPlaceholderMesh[0] = gdnative.MethodOf("PlaceholderMesh\000", "set_aabb\000", 259215842)
		methodPlaceholderTexture2D[0] = gdnative.MethodOf("PlaceholderTexture2D\000", "set_size\000", 743155724)
		methodPlaceholderTexture3D[0] = gdnative.MethodOf("PlaceholderTexture3D\000", "set_size\000", 560364750)
		methodPlaceholderTexture3D[1] = gdnative.MethodOf("PlaceholderTexture3D\000", "get_size\000", 2785653706)
		methodPlaceholderTextureLayered[0] = gdnative.MethodOf("PlaceholderTextureLayered\000", "set_size\000", 1130785943)
		methodPlaceholderTextureLayered[1] = gdnative.MethodOf("PlaceholderTextureLayered\000", "get_size\000", 3690982128)
		methodPlaceholderTextureLayered[2] = gdnative.MethodOf("PlaceholderTextureLayered\000", "set_layers\000", 1286410249)
		methodPlaneMesh[0] = gdnative.MethodOf("PlaneMesh\000", "set_size\000", 743155724)
		methodPlaneMesh[1] = gdnative.MethodOf("PlaneMesh\000", "get_size\000", 3341600327)
		methodPlaneMesh[2] = gdnative.MethodOf("PlaneMesh\000", "set_subdivide_width\000", 1286410249)
		methodPlaneMesh[3] = gdnative.MethodOf("PlaneMesh\000", "get_subdivide_width\000", 3905245786)
		methodPlaneMesh[4] = gdnative.MethodOf("PlaneMesh\000", "set_subdivide_depth\000", 1286410249)
		methodPlaneMesh[5] = gdnative.MethodOf("PlaneMesh\000", "get_subdivide_depth\000", 3905245786)
		methodPlaneMesh[6] = gdnative.MethodOf("PlaneMesh\000", "set_center_offset\000", 3460891852)
		methodPlaneMesh[7] = gdnative.MethodOf("PlaneMesh\000", "get_center_offset\000", 3360562783)
		methodPointLight2D[0] = gdnative.MethodOf("PointLight2D\000", "set_texture\000", 4051416890)
		methodPointLight2D[1] = gdnative.MethodOf("PointLight2D\000", "get_texture\000", 3635182373)
		methodPointLight2D[2] = gdnative.MethodOf("PointLight2D\000", "set_texture_offset\000", 743155724)
		methodPointLight2D[3] = gdnative.MethodOf("PointLight2D\000", "get_texture_offset\000", 3341600327)
		methodPointLight2D[4] = gdnative.MethodOf("PointLight2D\000", "set_texture_scale\000", 373806689)
		methodPointLight2D[5] = gdnative.MethodOf("PointLight2D\000", "get_texture_scale\000", 1740695150)
		methodPolygon2D[0] = gdnative.MethodOf("Polygon2D\000", "set_polygon\000", 1509147220)
		methodPolygon2D[1] = gdnative.MethodOf("Polygon2D\000", "get_polygon\000", 2961356807)
		methodPolygon2D[2] = gdnative.MethodOf("Polygon2D\000", "set_uv\000", 1509147220)
		methodPolygon2D[3] = gdnative.MethodOf("Polygon2D\000", "get_uv\000", 2961356807)
		methodPolygon2D[4] = gdnative.MethodOf("Polygon2D\000", "set_color\000", 2920490490)
		methodPolygon2D[5] = gdnative.MethodOf("Polygon2D\000", "get_color\000", 3444240500)
		methodPolygon2D[6] = gdnative.MethodOf("Polygon2D\000", "set_polygons\000", 381264803)
		methodPolygon2D[7] = gdnative.MethodOf("Polygon2D\000", "get_polygons\000", 3995934104)
		methodPolygon2D[8] = gdnative.MethodOf("Polygon2D\000", "set_vertex_colors\000", 3546319833)
		methodPolygon2D[9] = gdnative.MethodOf("Polygon2D\000", "get_vertex_colors\000", 1392750486)
		methodPolygon2D[10] = gdnative.MethodOf("Polygon2D\000", "set_texture\000", 4051416890)
		methodPolygon2D[11] = gdnative.MethodOf("Polygon2D\000", "get_texture\000", 3635182373)
		methodPolygon2D[12] = gdnative.MethodOf("Polygon2D\000", "set_texture_offset\000", 743155724)
		methodPolygon2D[13] = gdnative.MethodOf("Polygon2D\000", "get_texture_offset\000", 3341600327)
		methodPolygon2D[14] = gdnative.MethodOf("Polygon2D\000", "set_texture_rotation\000", 373806689)
		methodPolygon2D[15] = gdnative.MethodOf("Polygon2D\000", "get_texture_rotation\000", 1740695150)
		methodPolygon2D[16] = gdnative.MethodOf("Polygon2D\000", "set_texture_scale\000", 743155724)
		methodPolygon2D[17] = gdnative.MethodOf("Polygon2D\000", "get_texture_scale\000", 3341600327)
		methodPolygon2D[18] = gdnative.MethodOf("Polygon2D\000", "set_invert\000", 2586408642)
		methodPolygon2D[19] = gdnative.MethodOf("Polygon2D\000", "get_invert\000", 36873697)
		methodPolygon2D[20] = gdnative.MethodOf("Polygon2D\000", "set_antialiased\000", 2586408642)
		methodPolygon2D[21] = gdnative.MethodOf("Polygon2D\000", "get_antialiased\000", 36873697)
		methodPolygon2D[22] = gdnative.MethodOf("Polygon2D\000", "set_invert_border\000", 373806689)
		methodPolygon2D[23] = gdnative.MethodOf("Polygon2D\000", "get_invert_border\000", 1740695150)
		methodPolygon2D[24] = gdnative.MethodOf("Polygon2D\000", "set_offset\000", 743155724)
		methodPolygon2D[25] = gdnative.MethodOf("Polygon2D\000", "get_offset\000", 3341600327)
		methodPolygon2D[26] = gdnative.MethodOf("Polygon2D\000", "add_bone\000", 703042815)
		methodPolygon2D[27] = gdnative.MethodOf("Polygon2D\000", "get_bone_count\000", 3905245786)
		methodPolygon2D[28] = gdnative.MethodOf("Polygon2D\000", "get_bone_path\000", 408788394)
		methodPolygon2D[29] = gdnative.MethodOf("Polygon2D\000", "get_bone_weights\000", 1542882410)
		methodPolygon2D[30] = gdnative.MethodOf("Polygon2D\000", "erase_bone\000", 1286410249)
		methodPolygon2D[31] = gdnative.MethodOf("Polygon2D\000", "clear_bones\000", 3218959716)
		methodPolygon2D[32] = gdnative.MethodOf("Polygon2D\000", "set_bone_path\000", 2761262315)
		methodPolygon2D[33] = gdnative.MethodOf("Polygon2D\000", "set_bone_weights\000", 1345852415)
		methodPolygon2D[34] = gdnative.MethodOf("Polygon2D\000", "set_skeleton\000", 1348162250)
		methodPolygon2D[35] = gdnative.MethodOf("Polygon2D\000", "get_skeleton\000", 4075236667)
		methodPolygon2D[36] = gdnative.MethodOf("Polygon2D\000", "set_internal_vertex_count\000", 1286410249)
		methodPolygon2D[37] = gdnative.MethodOf("Polygon2D\000", "get_internal_vertex_count\000", 3905245786)
		methodPolygonOccluder3D[0] = gdnative.MethodOf("PolygonOccluder3D\000", "set_polygon\000", 1509147220)
		methodPolygonOccluder3D[1] = gdnative.MethodOf("PolygonOccluder3D\000", "get_polygon\000", 2961356807)
		methodPolygonPathFinder[0] = gdnative.MethodOf("PolygonPathFinder\000", "setup\000", 3251786936)
		methodPolygonPathFinder[1] = gdnative.MethodOf("PolygonPathFinder\000", "find_path\000", 1562168077)
		methodPolygonPathFinder[2] = gdnative.MethodOf("PolygonPathFinder\000", "get_intersections\000", 3932192302)
		methodPolygonPathFinder[3] = gdnative.MethodOf("PolygonPathFinder\000", "get_closest_point\000", 2656412154)
		methodPolygonPathFinder[4] = gdnative.MethodOf("PolygonPathFinder\000", "is_point_inside\000", 556197845)
		methodPolygonPathFinder[5] = gdnative.MethodOf("PolygonPathFinder\000", "set_point_penalty\000", 1602489585)
		methodPolygonPathFinder[6] = gdnative.MethodOf("PolygonPathFinder\000", "get_point_penalty\000", 2339986948)
		methodPolygonPathFinder[7] = gdnative.MethodOf("PolygonPathFinder\000", "get_bounds\000", 1639390495)
		methodPopupMenu[0] = gdnative.MethodOf("PopupMenu\000", "add_item\000", 3224536192)
		methodPopupMenu[1] = gdnative.MethodOf("PopupMenu\000", "add_icon_item\000", 1200674553)
		methodPopupMenu[2] = gdnative.MethodOf("PopupMenu\000", "add_check_item\000", 3224536192)
		methodPopupMenu[3] = gdnative.MethodOf("PopupMenu\000", "add_icon_check_item\000", 1200674553)
		methodPopupMenu[4] = gdnative.MethodOf("PopupMenu\000", "add_radio_check_item\000", 3224536192)
		methodPopupMenu[5] = gdnative.MethodOf("PopupMenu\000", "add_icon_radio_check_item\000", 1200674553)
		methodPopupMenu[6] = gdnative.MethodOf("PopupMenu\000", "add_multistate_item\000", 1585218420)
		methodPopupMenu[7] = gdnative.MethodOf("PopupMenu\000", "add_shortcut\000", 2168272394)
		methodPopupMenu[8] = gdnative.MethodOf("PopupMenu\000", "add_icon_shortcut\000", 68101841)
		methodPopupMenu[9] = gdnative.MethodOf("PopupMenu\000", "add_check_shortcut\000", 2168272394)
		methodPopupMenu[10] = gdnative.MethodOf("PopupMenu\000", "add_icon_check_shortcut\000", 68101841)
		methodPopupMenu[11] = gdnative.MethodOf("PopupMenu\000", "add_radio_check_shortcut\000", 2168272394)
		methodPopupMenu[12] = gdnative.MethodOf("PopupMenu\000", "add_icon_radio_check_shortcut\000", 68101841)
		methodPopupMenu[13] = gdnative.MethodOf("PopupMenu\000", "add_submenu_item\000", 3728518296)
		methodPopupMenu[14] = gdnative.MethodOf("PopupMenu\000", "set_item_text\000", 501894301)
		methodPopupMenu[15] = gdnative.MethodOf("PopupMenu\000", "set_item_text_direction\000", 1707680378)
		methodPopupMenu[16] = gdnative.MethodOf("PopupMenu\000", "set_item_language\000", 501894301)
		methodPopupMenu[17] = gdnative.MethodOf("PopupMenu\000", "set_item_icon\000", 666127730)
		methodPopupMenu[18] = gdnative.MethodOf("PopupMenu\000", "set_item_checked\000", 300928843)
		methodPopupMenu[19] = gdnative.MethodOf("PopupMenu\000", "set_item_id\000", 3937882851)
		methodPopupMenu[20] = gdnative.MethodOf("PopupMenu\000", "set_item_accelerator\000", 2992817551)
		methodPopupMenu[21] = gdnative.MethodOf("PopupMenu\000", "set_item_metadata\000", 2152698145)
		methodPopupMenu[22] = gdnative.MethodOf("PopupMenu\000", "set_item_disabled\000", 300928843)
		methodPopupMenu[23] = gdnative.MethodOf("PopupMenu\000", "set_item_submenu\000", 501894301)
		methodPopupMenu[24] = gdnative.MethodOf("PopupMenu\000", "set_item_as_separator\000", 300928843)
		methodPopupMenu[25] = gdnative.MethodOf("PopupMenu\000", "set_item_as_checkable\000", 300928843)
		methodPopupMenu[26] = gdnative.MethodOf("PopupMenu\000", "set_item_as_radio_checkable\000", 300928843)
		methodPopupMenu[27] = gdnative.MethodOf("PopupMenu\000", "set_item_tooltip\000", 501894301)
		methodPopupMenu[28] = gdnative.MethodOf("PopupMenu\000", "set_item_shortcut\000", 825127832)
		methodPopupMenu[29] = gdnative.MethodOf("PopupMenu\000", "set_item_indent\000", 3937882851)
		methodPopupMenu[30] = gdnative.MethodOf("PopupMenu\000", "set_item_multistate\000", 3937882851)
		methodPopupMenu[31] = gdnative.MethodOf("PopupMenu\000", "set_item_shortcut_disabled\000", 300928843)
		methodPopupMenu[32] = gdnative.MethodOf("PopupMenu\000", "toggle_item_checked\000", 1286410249)
		methodPopupMenu[33] = gdnative.MethodOf("PopupMenu\000", "toggle_item_multistate\000", 1286410249)
		methodPopupMenu[34] = gdnative.MethodOf("PopupMenu\000", "get_item_text\000", 844755477)
		methodPopupMenu[35] = gdnative.MethodOf("PopupMenu\000", "get_item_text_direction\000", 4235602388)
		methodPopupMenu[36] = gdnative.MethodOf("PopupMenu\000", "get_item_language\000", 844755477)
		methodPopupMenu[37] = gdnative.MethodOf("PopupMenu\000", "get_item_icon\000", 3536238170)
		methodPopupMenu[38] = gdnative.MethodOf("PopupMenu\000", "is_item_checked\000", 1116898809)
		methodPopupMenu[39] = gdnative.MethodOf("PopupMenu\000", "get_item_id\000", 923996154)
		methodPopupMenu[40] = gdnative.MethodOf("PopupMenu\000", "get_item_index\000", 923996154)
		methodPopupMenu[41] = gdnative.MethodOf("PopupMenu\000", "get_item_accelerator\000", 253789942)
		methodPopupMenu[42] = gdnative.MethodOf("PopupMenu\000", "get_item_metadata\000", 4227898402)
		methodPopupMenu[43] = gdnative.MethodOf("PopupMenu\000", "is_item_disabled\000", 1116898809)
		methodPopupMenu[44] = gdnative.MethodOf("PopupMenu\000", "get_item_submenu\000", 844755477)
		methodPopupMenu[45] = gdnative.MethodOf("PopupMenu\000", "is_item_separator\000", 1116898809)
		methodPopupMenu[46] = gdnative.MethodOf("PopupMenu\000", "is_item_checkable\000", 1116898809)
		methodPopupMenu[47] = gdnative.MethodOf("PopupMenu\000", "is_item_radio_checkable\000", 1116898809)
		methodPopupMenu[48] = gdnative.MethodOf("PopupMenu\000", "is_item_shortcut_disabled\000", 1116898809)
		methodPopupMenu[49] = gdnative.MethodOf("PopupMenu\000", "get_item_tooltip\000", 844755477)
		methodPopupMenu[50] = gdnative.MethodOf("PopupMenu\000", "get_item_shortcut\000", 1449483325)
		methodPopupMenu[51] = gdnative.MethodOf("PopupMenu\000", "get_item_indent\000", 923996154)
		methodPopupMenu[52] = gdnative.MethodOf("PopupMenu\000", "set_current_index\000", 1286410249)
		methodPopupMenu[53] = gdnative.MethodOf("PopupMenu\000", "get_current_index\000", 3905245786)
		methodPopupMenu[54] = gdnative.MethodOf("PopupMenu\000", "set_item_count\000", 1286410249)
		methodPopupMenu[55] = gdnative.MethodOf("PopupMenu\000", "get_item_count\000", 3905245786)
		methodPopupMenu[56] = gdnative.MethodOf("PopupMenu\000", "scroll_to_item\000", 1286410249)
		methodPopupMenu[57] = gdnative.MethodOf("PopupMenu\000", "remove_item\000", 1286410249)
		methodPopupMenu[58] = gdnative.MethodOf("PopupMenu\000", "add_separator\000", 2266703459)
		methodPopupMenu[59] = gdnative.MethodOf("PopupMenu\000", "clear\000", 3218959716)
		methodPopupMenu[60] = gdnative.MethodOf("PopupMenu\000", "set_hide_on_item_selection\000", 2586408642)
		methodPopupMenu[61] = gdnative.MethodOf("PopupMenu\000", "is_hide_on_item_selection\000", 36873697)
		methodPopupMenu[62] = gdnative.MethodOf("PopupMenu\000", "set_hide_on_checkable_item_selection\000", 2586408642)
		methodPopupMenu[63] = gdnative.MethodOf("PopupMenu\000", "is_hide_on_checkable_item_selection\000", 36873697)
		methodPopupMenu[64] = gdnative.MethodOf("PopupMenu\000", "set_hide_on_state_item_selection\000", 2586408642)
		methodPopupMenu[65] = gdnative.MethodOf("PopupMenu\000", "is_hide_on_state_item_selection\000", 36873697)
		methodPopupMenu[66] = gdnative.MethodOf("PopupMenu\000", "set_submenu_popup_delay\000", 373806689)
		methodPopupMenu[67] = gdnative.MethodOf("PopupMenu\000", "get_submenu_popup_delay\000", 1740695150)
		methodPopupMenu[68] = gdnative.MethodOf("PopupMenu\000", "set_allow_search\000", 2586408642)
		methodPopupMenu[69] = gdnative.MethodOf("PopupMenu\000", "get_allow_search\000", 36873697)
		methodPortableCompressedTexture2D[0] = gdnative.MethodOf("PortableCompressedTexture2D\000", "create_from_image\000", 97251393)
		methodPortableCompressedTexture2D[1] = gdnative.MethodOf("PortableCompressedTexture2D\000", "get_format\000", 3847873762)
		methodPortableCompressedTexture2D[2] = gdnative.MethodOf("PortableCompressedTexture2D\000", "get_compression_mode\000", 3265612739)
		methodPortableCompressedTexture2D[3] = gdnative.MethodOf("PortableCompressedTexture2D\000", "set_size_override\000", 743155724)
		methodPortableCompressedTexture2D[4] = gdnative.MethodOf("PortableCompressedTexture2D\000", "get_size_override\000", 3341600327)
		methodPortableCompressedTexture2D[5] = gdnative.MethodOf("PortableCompressedTexture2D\000", "set_keep_compressed_buffer\000", 2586408642)
		methodPortableCompressedTexture2D[6] = gdnative.MethodOf("PortableCompressedTexture2D\000", "is_keeping_compressed_buffer\000", 36873697)
		methodPortableCompressedTexture2D[7] = gdnative.MethodOf("PortableCompressedTexture2D\000", "set_keep_all_compressed_buffers\000", 2586408642)
		methodPortableCompressedTexture2D[8] = gdnative.MethodOf("PortableCompressedTexture2D\000", "is_keeping_all_compressed_buffers\000", 2240911060)
		methodPosition2D[0] = gdnative.MethodOf("Position2D\000", "set_gizmo_extents\000", 373806689)
		methodPosition2D[1] = gdnative.MethodOf("Position2D\000", "get_gizmo_extents\000", 1740695150)
		methodPrimitiveMesh[0] = gdnative.MethodOf("PrimitiveMesh\000", "set_material\000", 2757459619)
		methodPrimitiveMesh[1] = gdnative.MethodOf("PrimitiveMesh\000", "get_material\000", 5934680)
		methodPrimitiveMesh[2] = gdnative.MethodOf("PrimitiveMesh\000", "get_mesh_arrays\000", 3995934104)
		methodPrimitiveMesh[3] = gdnative.MethodOf("PrimitiveMesh\000", "set_custom_aabb\000", 259215842)
		methodPrimitiveMesh[4] = gdnative.MethodOf("PrimitiveMesh\000", "get_custom_aabb\000", 1068685055)
		methodPrimitiveMesh[5] = gdnative.MethodOf("PrimitiveMesh\000", "set_flip_faces\000", 2586408642)
		methodPrimitiveMesh[6] = gdnative.MethodOf("PrimitiveMesh\000", "get_flip_faces\000", 36873697)
		methodPrismMesh[0] = gdnative.MethodOf("PrismMesh\000", "set_left_to_right\000", 373806689)
		methodPrismMesh[1] = gdnative.MethodOf("PrismMesh\000", "get_left_to_right\000", 1740695150)
		methodPrismMesh[2] = gdnative.MethodOf("PrismMesh\000", "set_size\000", 3460891852)
		methodPrismMesh[3] = gdnative.MethodOf("PrismMesh\000", "get_size\000", 3360562783)
		methodPrismMesh[4] = gdnative.MethodOf("PrismMesh\000", "set_subdivide_width\000", 1286410249)
		methodPrismMesh[5] = gdnative.MethodOf("PrismMesh\000", "get_subdivide_width\000", 3905245786)
		methodPrismMesh[6] = gdnative.MethodOf("PrismMesh\000", "set_subdivide_height\000", 1286410249)
		methodPrismMesh[7] = gdnative.MethodOf("PrismMesh\000", "get_subdivide_height\000", 3905245786)
		methodPrismMesh[8] = gdnative.MethodOf("PrismMesh\000", "set_subdivide_depth\000", 1286410249)
		methodPrismMesh[9] = gdnative.MethodOf("PrismMesh\000", "get_subdivide_depth\000", 3905245786)
		methodProceduralSkyMaterial[0] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_top_color\000", 2920490490)
		methodProceduralSkyMaterial[1] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_top_color\000", 3444240500)
		methodProceduralSkyMaterial[2] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_horizon_color\000", 2920490490)
		methodProceduralSkyMaterial[3] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_horizon_color\000", 3444240500)
		methodProceduralSkyMaterial[4] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_curve\000", 373806689)
		methodProceduralSkyMaterial[5] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_curve\000", 1740695150)
		methodProceduralSkyMaterial[6] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_energy\000", 373806689)
		methodProceduralSkyMaterial[7] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_energy\000", 1740695150)
		methodProceduralSkyMaterial[8] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_cover\000", 4051416890)
		methodProceduralSkyMaterial[9] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_cover\000", 3635182373)
		methodProceduralSkyMaterial[10] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sky_cover_modulate\000", 2920490490)
		methodProceduralSkyMaterial[11] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sky_cover_modulate\000", 3444240500)
		methodProceduralSkyMaterial[12] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_ground_bottom_color\000", 2920490490)
		methodProceduralSkyMaterial[13] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_ground_bottom_color\000", 3444240500)
		methodProceduralSkyMaterial[14] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_ground_horizon_color\000", 2920490490)
		methodProceduralSkyMaterial[15] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_ground_horizon_color\000", 3444240500)
		methodProceduralSkyMaterial[16] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_ground_curve\000", 373806689)
		methodProceduralSkyMaterial[17] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_ground_curve\000", 1740695150)
		methodProceduralSkyMaterial[18] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_ground_energy\000", 373806689)
		methodProceduralSkyMaterial[19] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_ground_energy\000", 1740695150)
		methodProceduralSkyMaterial[20] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sun_angle_max\000", 373806689)
		methodProceduralSkyMaterial[21] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sun_angle_max\000", 1740695150)
		methodProceduralSkyMaterial[22] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_sun_curve\000", 373806689)
		methodProceduralSkyMaterial[23] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_sun_curve\000", 1740695150)
		methodProceduralSkyMaterial[24] = gdnative.MethodOf("ProceduralSkyMaterial\000", "set_use_debanding\000", 2586408642)
		methodProceduralSkyMaterial[25] = gdnative.MethodOf("ProceduralSkyMaterial\000", "get_use_debanding\000", 36873697)
		methodProgressBar[0] = gdnative.MethodOf("ProgressBar\000", "set_fill_mode\000", 1286410249)
		methodProgressBar[1] = gdnative.MethodOf("ProgressBar\000", "get_fill_mode\000", 2455072627)
		methodProgressBar[2] = gdnative.MethodOf("ProgressBar\000", "set_percent_visible\000", 2586408642)
		methodProgressBar[3] = gdnative.MethodOf("ProgressBar\000", "is_percent_visible\000", 36873697)
		methodProjectSettings[0] = gdnative.MethodOf("ProjectSettings\000", "has_setting\000", 3927539163)
		methodProjectSettings[1] = gdnative.MethodOf("ProjectSettings\000", "set_setting\000", 402577236)
		methodProjectSettings[2] = gdnative.MethodOf("ProjectSettings\000", "get_setting\000", 1868160156)
		methodProjectSettings[3] = gdnative.MethodOf("ProjectSettings\000", "set_order\000", 2956805083)
		methodProjectSettings[4] = gdnative.MethodOf("ProjectSettings\000", "get_order\000", 1321353865)
		methodProjectSettings[5] = gdnative.MethodOf("ProjectSettings\000", "set_initial_value\000", 402577236)
		methodProjectSettings[6] = gdnative.MethodOf("ProjectSettings\000", "add_property_info\000", 4155329257)
		methodProjectSettings[7] = gdnative.MethodOf("ProjectSettings\000", "clear\000", 83702148)
		methodProjectSettings[8] = gdnative.MethodOf("ProjectSettings\000", "localize_path\000", 3135753539)
		methodProjectSettings[9] = gdnative.MethodOf("ProjectSettings\000", "globalize_path\000", 3135753539)
		methodProjectSettings[10] = gdnative.MethodOf("ProjectSettings\000", "save\000", 166280745)
		methodProjectSettings[11] = gdnative.MethodOf("ProjectSettings\000", "load_resource_pack\000", 3001721055)
		methodProjectSettings[12] = gdnative.MethodOf("ProjectSettings\000", "save_custom\000", 166001499)
		methodPropertyTweener[0] = gdnative.MethodOf("PropertyTweener\000", "from\000", 4190193059)
		methodPropertyTweener[1] = gdnative.MethodOf("PropertyTweener\000", "from_current\000", 4279177709)
		methodPropertyTweener[2] = gdnative.MethodOf("PropertyTweener\000", "as_relative\000", 4279177709)
		methodPropertyTweener[3] = gdnative.MethodOf("PropertyTweener\000", "set_trans\000", 1899107404)
		methodPropertyTweener[4] = gdnative.MethodOf("PropertyTweener\000", "set_ease\000", 1080455622)
		methodPropertyTweener[5] = gdnative.MethodOf("PropertyTweener\000", "set_delay\000", 2171559331)
		methodQuadMesh[0] = gdnative.MethodOf("QuadMesh\000", "set_size\000", 743155724)
		methodQuadMesh[1] = gdnative.MethodOf("QuadMesh\000", "get_size\000", 3341600327)
		methodQuadMesh[2] = gdnative.MethodOf("QuadMesh\000", "set_center_offset\000", 3460891852)
		methodQuadMesh[3] = gdnative.MethodOf("QuadMesh\000", "get_center_offset\000", 3360562783)
		methodQuadOccluder3D[0] = gdnative.MethodOf("QuadOccluder3D\000", "set_size\000", 743155724)
		methodQuadOccluder3D[1] = gdnative.MethodOf("QuadOccluder3D\000", "get_size\000", 3341600327)
		methodRDAttachmentFormat[0] = gdnative.MethodOf("RDAttachmentFormat\000", "set_format\000", 565531219)
		methodRDAttachmentFormat[1] = gdnative.MethodOf("RDAttachmentFormat\000", "get_format\000", 2235804183)
		methodRDAttachmentFormat[2] = gdnative.MethodOf("RDAttachmentFormat\000", "set_samples\000", 3774171498)
		methodRDAttachmentFormat[3] = gdnative.MethodOf("RDAttachmentFormat\000", "get_samples\000", 407791724)
		methodRDAttachmentFormat[4] = gdnative.MethodOf("RDAttachmentFormat\000", "set_usage_flags\000", 1286410249)
		methodRDAttachmentFormat[5] = gdnative.MethodOf("RDAttachmentFormat\000", "get_usage_flags\000", 3905245786)
		methodRDFramebufferPass[0] = gdnative.MethodOf("RDFramebufferPass\000", "set_color_attachments\000", 3614634198)
		methodRDFramebufferPass[1] = gdnative.MethodOf("RDFramebufferPass\000", "get_color_attachments\000", 1930428628)
		methodRDFramebufferPass[2] = gdnative.MethodOf("RDFramebufferPass\000", "set_input_attachments\000", 3614634198)
		methodRDFramebufferPass[3] = gdnative.MethodOf("RDFramebufferPass\000", "get_input_attachments\000", 1930428628)
		methodRDFramebufferPass[4] = gdnative.MethodOf("RDFramebufferPass\000", "set_resolve_attachments\000", 3614634198)
		methodRDFramebufferPass[5] = gdnative.MethodOf("RDFramebufferPass\000", "get_resolve_attachments\000", 1930428628)
		methodRDFramebufferPass[6] = gdnative.MethodOf("RDFramebufferPass\000", "set_preserve_attachments\000", 3614634198)
		methodRDFramebufferPass[7] = gdnative.MethodOf("RDFramebufferPass\000", "get_preserve_attachments\000", 1930428628)
		methodRDFramebufferPass[8] = gdnative.MethodOf("RDFramebufferPass\000", "set_depth_attachment\000", 1286410249)
		methodRDFramebufferPass[9] = gdnative.MethodOf("RDFramebufferPass\000", "get_depth_attachment\000", 3905245786)
		methodRDPipelineColorBlendState[0] = gdnative.MethodOf("RDPipelineColorBlendState\000", "set_enable_logic_op\000", 2586408642)
		methodRDPipelineColorBlendState[1] = gdnative.MethodOf("RDPipelineColorBlendState\000", "get_enable_logic_op\000", 36873697)
		methodRDPipelineColorBlendState[2] = gdnative.MethodOf("RDPipelineColorBlendState\000", "set_logic_op\000", 3610841058)
		methodRDPipelineColorBlendState[3] = gdnative.MethodOf("RDPipelineColorBlendState\000", "get_logic_op\000", 988254690)
		methodRDPipelineColorBlendState[4] = gdnative.MethodOf("RDPipelineColorBlendState\000", "set_blend_constant\000", 2920490490)
		methodRDPipelineColorBlendState[5] = gdnative.MethodOf("RDPipelineColorBlendState\000", "get_blend_constant\000", 3444240500)
		methodRDPipelineColorBlendState[6] = gdnative.MethodOf("RDPipelineColorBlendState\000", "set_attachments\000", 381264803)
		methodRDPipelineColorBlendState[7] = gdnative.MethodOf("RDPipelineColorBlendState\000", "get_attachments\000", 3995934104)
		methodRDPipelineColorBlendStateAttachment[0] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_as_mix\000", 3218959716)
		methodRDPipelineColorBlendStateAttachment[1] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_enable_blend\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[2] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_enable_blend\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[3] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_src_color_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[4] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_src_color_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[5] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_dst_color_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[6] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_dst_color_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[7] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_color_blend_op\000", 3073022720)
		methodRDPipelineColorBlendStateAttachment[8] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_color_blend_op\000", 1385093561)
		methodRDPipelineColorBlendStateAttachment[9] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_src_alpha_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[10] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_src_alpha_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[11] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_dst_alpha_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[12] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_dst_alpha_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[13] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_alpha_blend_op\000", 3073022720)
		methodRDPipelineColorBlendStateAttachment[14] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_alpha_blend_op\000", 1385093561)
		methodRDPipelineColorBlendStateAttachment[15] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_write_r\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[16] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_write_r\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[17] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_write_g\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[18] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_write_g\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[19] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_write_b\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[20] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_write_b\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[21] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "set_write_a\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[22] = gdnative.MethodOf("RDPipelineColorBlendStateAttachment\000", "get_write_a\000", 36873697)
		methodRDPipelineDepthStencilState[0] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_enable_depth_test\000", 2586408642)
		methodRDPipelineDepthStencilState[1] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_enable_depth_test\000", 36873697)
		methodRDPipelineDepthStencilState[2] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_enable_depth_write\000", 2586408642)
		methodRDPipelineDepthStencilState[3] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_enable_depth_write\000", 36873697)
		methodRDPipelineDepthStencilState[4] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_depth_compare_operator\000", 2573711505)
		methodRDPipelineDepthStencilState[5] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_depth_compare_operator\000", 269730778)
		methodRDPipelineDepthStencilState[6] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_enable_depth_range\000", 2586408642)
		methodRDPipelineDepthStencilState[7] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_enable_depth_range\000", 36873697)
		methodRDPipelineDepthStencilState[8] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_depth_range_min\000", 373806689)
		methodRDPipelineDepthStencilState[9] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_depth_range_min\000", 1740695150)
		methodRDPipelineDepthStencilState[10] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_depth_range_max\000", 373806689)
		methodRDPipelineDepthStencilState[11] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_depth_range_max\000", 1740695150)
		methodRDPipelineDepthStencilState[12] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_enable_stencil\000", 2586408642)
		methodRDPipelineDepthStencilState[13] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_enable_stencil\000", 36873697)
		methodRDPipelineDepthStencilState[14] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[15] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[16] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_pass\000", 2092799566)
		methodRDPipelineDepthStencilState[17] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_pass\000", 1714732389)
		methodRDPipelineDepthStencilState[18] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_depth_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[19] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_depth_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[20] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_compare\000", 2573711505)
		methodRDPipelineDepthStencilState[21] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_compare\000", 269730778)
		methodRDPipelineDepthStencilState[22] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_compare_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[23] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_compare_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[24] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_write_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[25] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_write_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[26] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_front_op_reference\000", 1286410249)
		methodRDPipelineDepthStencilState[27] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_front_op_reference\000", 3905245786)
		methodRDPipelineDepthStencilState[28] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[29] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[30] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_pass\000", 2092799566)
		methodRDPipelineDepthStencilState[31] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_pass\000", 1714732389)
		methodRDPipelineDepthStencilState[32] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_depth_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[33] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_depth_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[34] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_compare\000", 2573711505)
		methodRDPipelineDepthStencilState[35] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_compare\000", 269730778)
		methodRDPipelineDepthStencilState[36] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_compare_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[37] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_compare_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[38] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_write_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[39] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_write_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[40] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "set_back_op_reference\000", 1286410249)
		methodRDPipelineDepthStencilState[41] = gdnative.MethodOf("RDPipelineDepthStencilState\000", "get_back_op_reference\000", 3905245786)
		methodRDPipelineMultisampleState[0] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_sample_count\000", 3774171498)
		methodRDPipelineMultisampleState[1] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_sample_count\000", 407791724)
		methodRDPipelineMultisampleState[2] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_enable_sample_shading\000", 2586408642)
		methodRDPipelineMultisampleState[3] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_enable_sample_shading\000", 36873697)
		methodRDPipelineMultisampleState[4] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_min_sample_shading\000", 373806689)
		methodRDPipelineMultisampleState[5] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_min_sample_shading\000", 1740695150)
		methodRDPipelineMultisampleState[6] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_enable_alpha_to_coverage\000", 2586408642)
		methodRDPipelineMultisampleState[7] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_enable_alpha_to_coverage\000", 36873697)
		methodRDPipelineMultisampleState[8] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_enable_alpha_to_one\000", 2586408642)
		methodRDPipelineMultisampleState[9] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_enable_alpha_to_one\000", 36873697)
		methodRDPipelineMultisampleState[10] = gdnative.MethodOf("RDPipelineMultisampleState\000", "set_sample_masks\000", 381264803)
		methodRDPipelineMultisampleState[11] = gdnative.MethodOf("RDPipelineMultisampleState\000", "get_sample_masks\000", 3995934104)
		methodRDPipelineRasterizationState[0] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_enable_depth_clamp\000", 2586408642)
		methodRDPipelineRasterizationState[1] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_enable_depth_clamp\000", 36873697)
		methodRDPipelineRasterizationState[2] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_discard_primitives\000", 2586408642)
		methodRDPipelineRasterizationState[3] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_discard_primitives\000", 36873697)
		methodRDPipelineRasterizationState[4] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_wireframe\000", 2586408642)
		methodRDPipelineRasterizationState[5] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_wireframe\000", 36873697)
		methodRDPipelineRasterizationState[6] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_cull_mode\000", 2662586502)
		methodRDPipelineRasterizationState[7] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_cull_mode\000", 2192484313)
		methodRDPipelineRasterizationState[8] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_front_face\000", 2637251213)
		methodRDPipelineRasterizationState[9] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_front_face\000", 708793786)
		methodRDPipelineRasterizationState[10] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_depth_bias_enable\000", 2586408642)
		methodRDPipelineRasterizationState[11] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_depth_bias_enable\000", 36873697)
		methodRDPipelineRasterizationState[12] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_depth_bias_constant_factor\000", 373806689)
		methodRDPipelineRasterizationState[13] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_depth_bias_constant_factor\000", 1740695150)
		methodRDPipelineRasterizationState[14] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_depth_bias_clamp\000", 373806689)
		methodRDPipelineRasterizationState[15] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_depth_bias_clamp\000", 1740695150)
		methodRDPipelineRasterizationState[16] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_depth_bias_slope_factor\000", 373806689)
		methodRDPipelineRasterizationState[17] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_depth_bias_slope_factor\000", 1740695150)
		methodRDPipelineRasterizationState[18] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_line_width\000", 373806689)
		methodRDPipelineRasterizationState[19] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_line_width\000", 1740695150)
		methodRDPipelineRasterizationState[20] = gdnative.MethodOf("RDPipelineRasterizationState\000", "set_patch_control_points\000", 1286410249)
		methodRDPipelineRasterizationState[21] = gdnative.MethodOf("RDPipelineRasterizationState\000", "get_patch_control_points\000", 3905245786)
		methodRDPipelineSpecializationConstant[0] = gdnative.MethodOf("RDPipelineSpecializationConstant\000", "set_value\000", 1114965689)
		methodRDPipelineSpecializationConstant[1] = gdnative.MethodOf("RDPipelineSpecializationConstant\000", "get_value\000", 1214101251)
		methodRDPipelineSpecializationConstant[2] = gdnative.MethodOf("RDPipelineSpecializationConstant\000", "set_constant_id\000", 1286410249)
		methodRDPipelineSpecializationConstant[3] = gdnative.MethodOf("RDPipelineSpecializationConstant\000", "get_constant_id\000", 3905245786)
		methodRDSamplerState[0] = gdnative.MethodOf("RDSamplerState\000", "set_mag_filter\000", 1493420382)
		methodRDSamplerState[1] = gdnative.MethodOf("RDSamplerState\000", "get_mag_filter\000", 2209202801)
		methodRDSamplerState[2] = gdnative.MethodOf("RDSamplerState\000", "set_min_filter\000", 1493420382)
		methodRDSamplerState[3] = gdnative.MethodOf("RDSamplerState\000", "get_min_filter\000", 2209202801)
		methodRDSamplerState[4] = gdnative.MethodOf("RDSamplerState\000", "set_mip_filter\000", 1493420382)
		methodRDSamplerState[5] = gdnative.MethodOf("RDSamplerState\000", "get_mip_filter\000", 2209202801)
		methodRDSamplerState[6] = gdnative.MethodOf("RDSamplerState\000", "set_repeat_u\000", 246127626)
		methodRDSamplerState[7] = gdnative.MethodOf("RDSamplerState\000", "get_repeat_u\000", 3227895872)
		methodRDSamplerState[8] = gdnative.MethodOf("RDSamplerState\000", "set_repeat_v\000", 246127626)
		methodRDSamplerState[9] = gdnative.MethodOf("RDSamplerState\000", "get_repeat_v\000", 3227895872)
		methodRDSamplerState[10] = gdnative.MethodOf("RDSamplerState\000", "set_repeat_w\000", 246127626)
		methodRDSamplerState[11] = gdnative.MethodOf("RDSamplerState\000", "get_repeat_w\000", 3227895872)
		methodRDSamplerState[12] = gdnative.MethodOf("RDSamplerState\000", "set_lod_bias\000", 373806689)
		methodRDSamplerState[13] = gdnative.MethodOf("RDSamplerState\000", "get_lod_bias\000", 1740695150)
		methodRDSamplerState[14] = gdnative.MethodOf("RDSamplerState\000", "set_use_anisotropy\000", 2586408642)
		methodRDSamplerState[15] = gdnative.MethodOf("RDSamplerState\000", "get_use_anisotropy\000", 36873697)
		methodRDSamplerState[16] = gdnative.MethodOf("RDSamplerState\000", "set_anisotropy_max\000", 373806689)
		methodRDSamplerState[17] = gdnative.MethodOf("RDSamplerState\000", "get_anisotropy_max\000", 1740695150)
		methodRDSamplerState[18] = gdnative.MethodOf("RDSamplerState\000", "set_enable_compare\000", 2586408642)
		methodRDSamplerState[19] = gdnative.MethodOf("RDSamplerState\000", "get_enable_compare\000", 36873697)
		methodRDSamplerState[20] = gdnative.MethodOf("RDSamplerState\000", "set_compare_op\000", 2573711505)
		methodRDSamplerState[21] = gdnative.MethodOf("RDSamplerState\000", "get_compare_op\000", 269730778)
		methodRDSamplerState[22] = gdnative.MethodOf("RDSamplerState\000", "set_min_lod\000", 373806689)
		methodRDSamplerState[23] = gdnative.MethodOf("RDSamplerState\000", "get_min_lod\000", 1740695150)
		methodRDSamplerState[24] = gdnative.MethodOf("RDSamplerState\000", "set_max_lod\000", 373806689)
		methodRDSamplerState[25] = gdnative.MethodOf("RDSamplerState\000", "get_max_lod\000", 1740695150)
		methodRDSamplerState[26] = gdnative.MethodOf("RDSamplerState\000", "set_border_color\000", 1115869595)
		methodRDSamplerState[27] = gdnative.MethodOf("RDSamplerState\000", "get_border_color\000", 3514246478)
		methodRDSamplerState[28] = gdnative.MethodOf("RDSamplerState\000", "set_unnormalized_uvw\000", 2586408642)
		methodRDSamplerState[29] = gdnative.MethodOf("RDSamplerState\000", "get_unnormalized_uvw\000", 36873697)
		methodRDShaderFile[0] = gdnative.MethodOf("RDShaderFile\000", "set_bytecode\000", 1558064255)
		methodRDShaderFile[1] = gdnative.MethodOf("RDShaderFile\000", "get_spirv\000", 3340165340)
		methodRDShaderFile[2] = gdnative.MethodOf("RDShaderFile\000", "get_version_list\000", 1139954409)
		methodRDShaderFile[3] = gdnative.MethodOf("RDShaderFile\000", "set_base_error\000", 83702148)
		methodRDShaderFile[4] = gdnative.MethodOf("RDShaderFile\000", "get_base_error\000", 201670096)
		methodRDShaderSPIRV[0] = gdnative.MethodOf("RDShaderSPIRV\000", "set_stage_bytecode\000", 3514097977)
		methodRDShaderSPIRV[1] = gdnative.MethodOf("RDShaderSPIRV\000", "get_stage_bytecode\000", 3816765404)
		methodRDShaderSPIRV[2] = gdnative.MethodOf("RDShaderSPIRV\000", "set_stage_compile_error\000", 620821314)
		methodRDShaderSPIRV[3] = gdnative.MethodOf("RDShaderSPIRV\000", "get_stage_compile_error\000", 3354920045)
		methodRDShaderSource[0] = gdnative.MethodOf("RDShaderSource\000", "set_stage_source\000", 620821314)
		methodRDShaderSource[1] = gdnative.MethodOf("RDShaderSource\000", "get_stage_source\000", 3354920045)
		methodRDShaderSource[2] = gdnative.MethodOf("RDShaderSource\000", "set_language\000", 3422186742)
		methodRDShaderSource[3] = gdnative.MethodOf("RDShaderSource\000", "get_language\000", 1063538261)
		methodRDTextureFormat[0] = gdnative.MethodOf("RDTextureFormat\000", "set_format\000", 565531219)
		methodRDTextureFormat[1] = gdnative.MethodOf("RDTextureFormat\000", "get_format\000", 2235804183)
		methodRDTextureFormat[2] = gdnative.MethodOf("RDTextureFormat\000", "set_width\000", 1286410249)
		methodRDTextureFormat[3] = gdnative.MethodOf("RDTextureFormat\000", "get_width\000", 3905245786)
		methodRDTextureFormat[4] = gdnative.MethodOf("RDTextureFormat\000", "set_height\000", 1286410249)
		methodRDTextureFormat[5] = gdnative.MethodOf("RDTextureFormat\000", "get_height\000", 3905245786)
		methodRDTextureFormat[6] = gdnative.MethodOf("RDTextureFormat\000", "set_depth\000", 1286410249)
		methodRDTextureFormat[7] = gdnative.MethodOf("RDTextureFormat\000", "get_depth\000", 3905245786)
		methodRDTextureFormat[8] = gdnative.MethodOf("RDTextureFormat\000", "set_array_layers\000", 1286410249)
		methodRDTextureFormat[9] = gdnative.MethodOf("RDTextureFormat\000", "get_array_layers\000", 3905245786)
		methodRDTextureFormat[10] = gdnative.MethodOf("RDTextureFormat\000", "set_mipmaps\000", 1286410249)
		methodRDTextureFormat[11] = gdnative.MethodOf("RDTextureFormat\000", "get_mipmaps\000", 3905245786)
		methodRDTextureFormat[12] = gdnative.MethodOf("RDTextureFormat\000", "set_texture_type\000", 652343381)
		methodRDTextureFormat[13] = gdnative.MethodOf("RDTextureFormat\000", "get_texture_type\000", 4036357416)
		methodRDTextureFormat[14] = gdnative.MethodOf("RDTextureFormat\000", "set_samples\000", 3774171498)
		methodRDTextureFormat[15] = gdnative.MethodOf("RDTextureFormat\000", "get_samples\000", 407791724)
		methodRDTextureFormat[16] = gdnative.MethodOf("RDTextureFormat\000", "set_usage_bits\000", 1286410249)
		methodRDTextureFormat[17] = gdnative.MethodOf("RDTextureFormat\000", "get_usage_bits\000", 3905245786)
		methodRDTextureFormat[18] = gdnative.MethodOf("RDTextureFormat\000", "add_shareable_format\000", 565531219)
		methodRDTextureFormat[19] = gdnative.MethodOf("RDTextureFormat\000", "remove_shareable_format\000", 565531219)
		methodRDTextureView[0] = gdnative.MethodOf("RDTextureView\000", "set_format_override\000", 565531219)
		methodRDTextureView[1] = gdnative.MethodOf("RDTextureView\000", "get_format_override\000", 2235804183)
		methodRDTextureView[2] = gdnative.MethodOf("RDTextureView\000", "set_swizzle_r\000", 3833362581)
		methodRDTextureView[3] = gdnative.MethodOf("RDTextureView\000", "get_swizzle_r\000", 4150792614)
		methodRDTextureView[4] = gdnative.MethodOf("RDTextureView\000", "set_swizzle_g\000", 3833362581)
		methodRDTextureView[5] = gdnative.MethodOf("RDTextureView\000", "get_swizzle_g\000", 4150792614)
		methodRDTextureView[6] = gdnative.MethodOf("RDTextureView\000", "set_swizzle_b\000", 3833362581)
		methodRDTextureView[7] = gdnative.MethodOf("RDTextureView\000", "get_swizzle_b\000", 4150792614)
		methodRDTextureView[8] = gdnative.MethodOf("RDTextureView\000", "set_swizzle_a\000", 3833362581)
		methodRDTextureView[9] = gdnative.MethodOf("RDTextureView\000", "get_swizzle_a\000", 4150792614)
		methodRDUniform[0] = gdnative.MethodOf("RDUniform\000", "set_uniform_type\000", 1664894931)
		methodRDUniform[1] = gdnative.MethodOf("RDUniform\000", "get_uniform_type\000", 475470040)
		methodRDUniform[2] = gdnative.MethodOf("RDUniform\000", "set_binding\000", 1286410249)
		methodRDUniform[3] = gdnative.MethodOf("RDUniform\000", "get_binding\000", 3905245786)
		methodRDUniform[4] = gdnative.MethodOf("RDUniform\000", "add_id\000", 2722037293)
		methodRDUniform[5] = gdnative.MethodOf("RDUniform\000", "clear_ids\000", 3218959716)
		methodRDUniform[6] = gdnative.MethodOf("RDUniform\000", "get_ids\000", 3995934104)
		methodRDVertexAttribute[0] = gdnative.MethodOf("RDVertexAttribute\000", "set_location\000", 1286410249)
		methodRDVertexAttribute[1] = gdnative.MethodOf("RDVertexAttribute\000", "get_location\000", 3905245786)
		methodRDVertexAttribute[2] = gdnative.MethodOf("RDVertexAttribute\000", "set_offset\000", 1286410249)
		methodRDVertexAttribute[3] = gdnative.MethodOf("RDVertexAttribute\000", "get_offset\000", 3905245786)
		methodRDVertexAttribute[4] = gdnative.MethodOf("RDVertexAttribute\000", "set_format\000", 565531219)
		methodRDVertexAttribute[5] = gdnative.MethodOf("RDVertexAttribute\000", "get_format\000", 2235804183)
		methodRDVertexAttribute[6] = gdnative.MethodOf("RDVertexAttribute\000", "set_stride\000", 1286410249)
		methodRDVertexAttribute[7] = gdnative.MethodOf("RDVertexAttribute\000", "get_stride\000", 3905245786)
		methodRDVertexAttribute[8] = gdnative.MethodOf("RDVertexAttribute\000", "set_frequency\000", 522141836)
		methodRDVertexAttribute[9] = gdnative.MethodOf("RDVertexAttribute\000", "get_frequency\000", 4154106413)
		methodRandomNumberGenerator[0] = gdnative.MethodOf("RandomNumberGenerator\000", "set_seed\000", 1286410249)
		methodRandomNumberGenerator[1] = gdnative.MethodOf("RandomNumberGenerator\000", "get_seed\000", 2455072627)
		methodRandomNumberGenerator[2] = gdnative.MethodOf("RandomNumberGenerator\000", "set_state\000", 1286410249)
		methodRandomNumberGenerator[3] = gdnative.MethodOf("RandomNumberGenerator\000", "get_state\000", 3905245786)
		methodRandomNumberGenerator[4] = gdnative.MethodOf("RandomNumberGenerator\000", "randi\000", 2455072627)
		methodRandomNumberGenerator[5] = gdnative.MethodOf("RandomNumberGenerator\000", "randf\000", 191475506)
		methodRandomNumberGenerator[6] = gdnative.MethodOf("RandomNumberGenerator\000", "randfn\000", 2207676613)
		methodRandomNumberGenerator[7] = gdnative.MethodOf("RandomNumberGenerator\000", "randf_range\000", 4269894367)
		methodRandomNumberGenerator[8] = gdnative.MethodOf("RandomNumberGenerator\000", "randi_range\000", 50157827)
		methodRandomNumberGenerator[9] = gdnative.MethodOf("RandomNumberGenerator\000", "randomize\000", 3218959716)
		methodRange[0] = gdnative.MethodOf("Range\000", "get_value\000", 1740695150)
		methodRange[1] = gdnative.MethodOf("Range\000", "get_min\000", 1740695150)
		methodRange[2] = gdnative.MethodOf("Range\000", "get_max\000", 1740695150)
		methodRange[3] = gdnative.MethodOf("Range\000", "get_step\000", 1740695150)
		methodRange[4] = gdnative.MethodOf("Range\000", "get_page\000", 1740695150)
		methodRange[5] = gdnative.MethodOf("Range\000", "get_as_ratio\000", 1740695150)
		methodRange[6] = gdnative.MethodOf("Range\000", "set_value\000", 373806689)
		methodRange[7] = gdnative.MethodOf("Range\000", "set_min\000", 373806689)
		methodRange[8] = gdnative.MethodOf("Range\000", "set_max\000", 373806689)
		methodRange[9] = gdnative.MethodOf("Range\000", "set_step\000", 373806689)
		methodRange[10] = gdnative.MethodOf("Range\000", "set_page\000", 373806689)
		methodRange[11] = gdnative.MethodOf("Range\000", "set_as_ratio\000", 373806689)
		methodRange[12] = gdnative.MethodOf("Range\000", "set_use_rounded_values\000", 2586408642)
		methodRange[13] = gdnative.MethodOf("Range\000", "is_using_rounded_values\000", 36873697)
		methodRange[14] = gdnative.MethodOf("Range\000", "set_exp_ratio\000", 2586408642)
		methodRange[15] = gdnative.MethodOf("Range\000", "is_ratio_exp\000", 36873697)
		methodRange[16] = gdnative.MethodOf("Range\000", "set_allow_greater\000", 2586408642)
		methodRange[17] = gdnative.MethodOf("Range\000", "is_greater_allowed\000", 36873697)
		methodRange[18] = gdnative.MethodOf("Range\000", "set_allow_lesser\000", 2586408642)
		methodRange[19] = gdnative.MethodOf("Range\000", "is_lesser_allowed\000", 36873697)
		methodRange[20] = gdnative.MethodOf("Range\000", "share\000", 1078189570)
		methodRange[21] = gdnative.MethodOf("Range\000", "unshare\000", 3218959716)
		methodRayCast2D[0] = gdnative.MethodOf("RayCast2D\000", "set_enabled\000", 2586408642)
		methodRayCast2D[1] = gdnative.MethodOf("RayCast2D\000", "is_enabled\000", 36873697)
		methodRayCast2D[2] = gdnative.MethodOf("RayCast2D\000", "set_target_position\000", 743155724)
		methodRayCast2D[3] = gdnative.MethodOf("RayCast2D\000", "get_target_position\000", 3341600327)
		methodRayCast2D[4] = gdnative.MethodOf("RayCast2D\000", "is_colliding\000", 36873697)
		methodRayCast2D[5] = gdnative.MethodOf("RayCast2D\000", "force_raycast_update\000", 3218959716)
		methodRayCast2D[6] = gdnative.MethodOf("RayCast2D\000", "get_collider\000", 1981248198)
		methodRayCast2D[7] = gdnative.MethodOf("RayCast2D\000", "get_collider_shape\000", 3905245786)
		methodRayCast2D[8] = gdnative.MethodOf("RayCast2D\000", "get_collision_point\000", 3341600327)
		methodRayCast2D[9] = gdnative.MethodOf("RayCast2D\000", "get_collision_normal\000", 3341600327)
		methodRayCast2D[10] = gdnative.MethodOf("RayCast2D\000", "add_exception_rid\000", 2722037293)
		methodRayCast2D[11] = gdnative.MethodOf("RayCast2D\000", "add_exception\000", 3090941106)
		methodRayCast2D[12] = gdnative.MethodOf("RayCast2D\000", "remove_exception_rid\000", 2722037293)
		methodRayCast2D[13] = gdnative.MethodOf("RayCast2D\000", "remove_exception\000", 3090941106)
		methodRayCast2D[14] = gdnative.MethodOf("RayCast2D\000", "clear_exceptions\000", 3218959716)
		methodRayCast2D[15] = gdnative.MethodOf("RayCast2D\000", "set_collision_mask\000", 1286410249)
		methodRayCast2D[16] = gdnative.MethodOf("RayCast2D\000", "get_collision_mask\000", 3905245786)
		methodRayCast2D[17] = gdnative.MethodOf("RayCast2D\000", "set_collision_mask_value\000", 300928843)
		methodRayCast2D[18] = gdnative.MethodOf("RayCast2D\000", "get_collision_mask_value\000", 1116898809)
		methodRayCast2D[19] = gdnative.MethodOf("RayCast2D\000", "set_exclude_parent_body\000", 2586408642)
		methodRayCast2D[20] = gdnative.MethodOf("RayCast2D\000", "get_exclude_parent_body\000", 36873697)
		methodRayCast2D[21] = gdnative.MethodOf("RayCast2D\000", "set_collide_with_areas\000", 2586408642)
		methodRayCast2D[22] = gdnative.MethodOf("RayCast2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodRayCast2D[23] = gdnative.MethodOf("RayCast2D\000", "set_collide_with_bodies\000", 2586408642)
		methodRayCast2D[24] = gdnative.MethodOf("RayCast2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodRayCast2D[25] = gdnative.MethodOf("RayCast2D\000", "set_hit_from_inside\000", 2586408642)
		methodRayCast2D[26] = gdnative.MethodOf("RayCast2D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodRayCast3D[0] = gdnative.MethodOf("RayCast3D\000", "set_enabled\000", 2586408642)
		methodRayCast3D[1] = gdnative.MethodOf("RayCast3D\000", "is_enabled\000", 36873697)
		methodRayCast3D[2] = gdnative.MethodOf("RayCast3D\000", "set_target_position\000", 3460891852)
		methodRayCast3D[3] = gdnative.MethodOf("RayCast3D\000", "get_target_position\000", 3360562783)
		methodRayCast3D[4] = gdnative.MethodOf("RayCast3D\000", "is_colliding\000", 36873697)
		methodRayCast3D[5] = gdnative.MethodOf("RayCast3D\000", "force_raycast_update\000", 3218959716)
		methodRayCast3D[6] = gdnative.MethodOf("RayCast3D\000", "get_collider\000", 1981248198)
		methodRayCast3D[7] = gdnative.MethodOf("RayCast3D\000", "get_collider_shape\000", 3905245786)
		methodRayCast3D[8] = gdnative.MethodOf("RayCast3D\000", "get_collision_point\000", 3360562783)
		methodRayCast3D[9] = gdnative.MethodOf("RayCast3D\000", "get_collision_normal\000", 3360562783)
		methodRayCast3D[10] = gdnative.MethodOf("RayCast3D\000", "add_exception_rid\000", 2722037293)
		methodRayCast3D[11] = gdnative.MethodOf("RayCast3D\000", "add_exception\000", 1976431078)
		methodRayCast3D[12] = gdnative.MethodOf("RayCast3D\000", "remove_exception_rid\000", 2722037293)
		methodRayCast3D[13] = gdnative.MethodOf("RayCast3D\000", "remove_exception\000", 1976431078)
		methodRayCast3D[14] = gdnative.MethodOf("RayCast3D\000", "clear_exceptions\000", 3218959716)
		methodRayCast3D[15] = gdnative.MethodOf("RayCast3D\000", "set_collision_mask\000", 1286410249)
		methodRayCast3D[16] = gdnative.MethodOf("RayCast3D\000", "get_collision_mask\000", 3905245786)
		methodRayCast3D[17] = gdnative.MethodOf("RayCast3D\000", "set_collision_mask_value\000", 300928843)
		methodRayCast3D[18] = gdnative.MethodOf("RayCast3D\000", "get_collision_mask_value\000", 1116898809)
		methodRayCast3D[19] = gdnative.MethodOf("RayCast3D\000", "set_exclude_parent_body\000", 2586408642)
		methodRayCast3D[20] = gdnative.MethodOf("RayCast3D\000", "get_exclude_parent_body\000", 36873697)
		methodRayCast3D[21] = gdnative.MethodOf("RayCast3D\000", "set_collide_with_areas\000", 2586408642)
		methodRayCast3D[22] = gdnative.MethodOf("RayCast3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodRayCast3D[23] = gdnative.MethodOf("RayCast3D\000", "set_collide_with_bodies\000", 2586408642)
		methodRayCast3D[24] = gdnative.MethodOf("RayCast3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodRayCast3D[25] = gdnative.MethodOf("RayCast3D\000", "set_hit_from_inside\000", 2586408642)
		methodRayCast3D[26] = gdnative.MethodOf("RayCast3D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodRayCast3D[27] = gdnative.MethodOf("RayCast3D\000", "set_debug_shape_custom_color\000", 2920490490)
		methodRayCast3D[28] = gdnative.MethodOf("RayCast3D\000", "get_debug_shape_custom_color\000", 3444240500)
		methodRayCast3D[29] = gdnative.MethodOf("RayCast3D\000", "set_debug_shape_thickness\000", 1286410249)
		methodRayCast3D[30] = gdnative.MethodOf("RayCast3D\000", "get_debug_shape_thickness\000", 3905245786)
		methodRectangleShape2D[0] = gdnative.MethodOf("RectangleShape2D\000", "set_size\000", 743155724)
		methodRectangleShape2D[1] = gdnative.MethodOf("RectangleShape2D\000", "get_size\000", 3341600327)
		methodRefCounted[0] = gdnative.MethodOf("RefCounted\000", "init_ref\000", 2240911060)
		methodRefCounted[1] = gdnative.MethodOf("RefCounted\000", "reference\000", 2240911060)
		methodRefCounted[2] = gdnative.MethodOf("RefCounted\000", "unreference\000", 2240911060)
		methodReferenceRect[0] = gdnative.MethodOf("ReferenceRect\000", "get_border_color\000", 3444240500)
		methodReferenceRect[1] = gdnative.MethodOf("ReferenceRect\000", "set_border_color\000", 2920490490)
		methodReferenceRect[2] = gdnative.MethodOf("ReferenceRect\000", "get_border_width\000", 1740695150)
		methodReferenceRect[3] = gdnative.MethodOf("ReferenceRect\000", "set_border_width\000", 373806689)
		methodReferenceRect[4] = gdnative.MethodOf("ReferenceRect\000", "get_editor_only\000", 36873697)
		methodReferenceRect[5] = gdnative.MethodOf("ReferenceRect\000", "set_editor_only\000", 2586408642)
		methodReflectionProbe[0] = gdnative.MethodOf("ReflectionProbe\000", "set_intensity\000", 373806689)
		methodReflectionProbe[1] = gdnative.MethodOf("ReflectionProbe\000", "get_intensity\000", 1740695150)
		methodReflectionProbe[2] = gdnative.MethodOf("ReflectionProbe\000", "set_ambient_mode\000", 1748981278)
		methodReflectionProbe[3] = gdnative.MethodOf("ReflectionProbe\000", "get_ambient_mode\000", 1014607621)
		methodReflectionProbe[4] = gdnative.MethodOf("ReflectionProbe\000", "set_ambient_color\000", 2920490490)
		methodReflectionProbe[5] = gdnative.MethodOf("ReflectionProbe\000", "get_ambient_color\000", 3444240500)
		methodReflectionProbe[6] = gdnative.MethodOf("ReflectionProbe\000", "set_ambient_color_energy\000", 373806689)
		methodReflectionProbe[7] = gdnative.MethodOf("ReflectionProbe\000", "get_ambient_color_energy\000", 1740695150)
		methodReflectionProbe[8] = gdnative.MethodOf("ReflectionProbe\000", "set_max_distance\000", 373806689)
		methodReflectionProbe[9] = gdnative.MethodOf("ReflectionProbe\000", "get_max_distance\000", 1740695150)
		methodReflectionProbe[10] = gdnative.MethodOf("ReflectionProbe\000", "set_mesh_lod_threshold\000", 373806689)
		methodReflectionProbe[11] = gdnative.MethodOf("ReflectionProbe\000", "get_mesh_lod_threshold\000", 1740695150)
		methodReflectionProbe[12] = gdnative.MethodOf("ReflectionProbe\000", "set_extents\000", 3460891852)
		methodReflectionProbe[13] = gdnative.MethodOf("ReflectionProbe\000", "get_extents\000", 3360562783)
		methodReflectionProbe[14] = gdnative.MethodOf("ReflectionProbe\000", "set_origin_offset\000", 3460891852)
		methodReflectionProbe[15] = gdnative.MethodOf("ReflectionProbe\000", "get_origin_offset\000", 3360562783)
		methodReflectionProbe[16] = gdnative.MethodOf("ReflectionProbe\000", "set_as_interior\000", 2586408642)
		methodReflectionProbe[17] = gdnative.MethodOf("ReflectionProbe\000", "is_set_as_interior\000", 36873697)
		methodReflectionProbe[18] = gdnative.MethodOf("ReflectionProbe\000", "set_enable_box_projection\000", 2586408642)
		methodReflectionProbe[19] = gdnative.MethodOf("ReflectionProbe\000", "is_box_projection_enabled\000", 36873697)
		methodReflectionProbe[20] = gdnative.MethodOf("ReflectionProbe\000", "set_enable_shadows\000", 2586408642)
		methodReflectionProbe[21] = gdnative.MethodOf("ReflectionProbe\000", "are_shadows_enabled\000", 36873697)
		methodReflectionProbe[22] = gdnative.MethodOf("ReflectionProbe\000", "set_cull_mask\000", 1286410249)
		methodReflectionProbe[23] = gdnative.MethodOf("ReflectionProbe\000", "get_cull_mask\000", 3905245786)
		methodReflectionProbe[24] = gdnative.MethodOf("ReflectionProbe\000", "set_update_mode\000", 4090221187)
		methodReflectionProbe[25] = gdnative.MethodOf("ReflectionProbe\000", "get_update_mode\000", 2367550552)
		methodRegEx[0] = gdnative.MethodOf("RegEx\000", "create_from_string\000", 2150300909)
		methodRegEx[1] = gdnative.MethodOf("RegEx\000", "clear\000", 3218959716)
		methodRegEx[2] = gdnative.MethodOf("RegEx\000", "compile\000", 166001499)
		methodRegEx[3] = gdnative.MethodOf("RegEx\000", "search\000", 4087180739)
		methodRegEx[4] = gdnative.MethodOf("RegEx\000", "search_all\000", 3354100289)
		methodRegEx[5] = gdnative.MethodOf("RegEx\000", "sub\000", 758293621)
		methodRegEx[6] = gdnative.MethodOf("RegEx\000", "is_valid\000", 36873697)
		methodRegEx[7] = gdnative.MethodOf("RegEx\000", "get_pattern\000", 201670096)
		methodRegEx[8] = gdnative.MethodOf("RegEx\000", "get_group_count\000", 3905245786)
		methodRegEx[9] = gdnative.MethodOf("RegEx\000", "get_names\000", 3995934104)
		methodRegExMatch[0] = gdnative.MethodOf("RegExMatch\000", "get_subject\000", 201670096)
		methodRegExMatch[1] = gdnative.MethodOf("RegExMatch\000", "get_group_count\000", 3905245786)
		methodRegExMatch[2] = gdnative.MethodOf("RegExMatch\000", "get_names\000", 3102165223)
		methodRegExMatch[3] = gdnative.MethodOf("RegExMatch\000", "get_strings\000", 3995934104)
		methodRegExMatch[4] = gdnative.MethodOf("RegExMatch\000", "get_string\000", 687115856)
		methodRegExMatch[5] = gdnative.MethodOf("RegExMatch\000", "get_start\000", 490464691)
		methodRegExMatch[6] = gdnative.MethodOf("RegExMatch\000", "get_end\000", 490464691)
		methodRemoteTransform2D[0] = gdnative.MethodOf("RemoteTransform2D\000", "set_remote_node\000", 1348162250)
		methodRemoteTransform2D[1] = gdnative.MethodOf("RemoteTransform2D\000", "get_remote_node\000", 4075236667)
		methodRemoteTransform2D[2] = gdnative.MethodOf("RemoteTransform2D\000", "force_update_cache\000", 3218959716)
		methodRemoteTransform2D[3] = gdnative.MethodOf("RemoteTransform2D\000", "set_use_global_coordinates\000", 2586408642)
		methodRemoteTransform2D[4] = gdnative.MethodOf("RemoteTransform2D\000", "get_use_global_coordinates\000", 36873697)
		methodRemoteTransform2D[5] = gdnative.MethodOf("RemoteTransform2D\000", "set_update_position\000", 2586408642)
		methodRemoteTransform2D[6] = gdnative.MethodOf("RemoteTransform2D\000", "get_update_position\000", 36873697)
		methodRemoteTransform2D[7] = gdnative.MethodOf("RemoteTransform2D\000", "set_update_rotation\000", 2586408642)
		methodRemoteTransform2D[8] = gdnative.MethodOf("RemoteTransform2D\000", "get_update_rotation\000", 36873697)
		methodRemoteTransform2D[9] = gdnative.MethodOf("RemoteTransform2D\000", "set_update_scale\000", 2586408642)
		methodRemoteTransform2D[10] = gdnative.MethodOf("RemoteTransform2D\000", "get_update_scale\000", 36873697)
		methodRemoteTransform3D[0] = gdnative.MethodOf("RemoteTransform3D\000", "set_remote_node\000", 1348162250)
		methodRemoteTransform3D[1] = gdnative.MethodOf("RemoteTransform3D\000", "get_remote_node\000", 4075236667)
		methodRemoteTransform3D[2] = gdnative.MethodOf("RemoteTransform3D\000", "force_update_cache\000", 3218959716)
		methodRemoteTransform3D[3] = gdnative.MethodOf("RemoteTransform3D\000", "set_use_global_coordinates\000", 2586408642)
		methodRemoteTransform3D[4] = gdnative.MethodOf("RemoteTransform3D\000", "get_use_global_coordinates\000", 36873697)
		methodRemoteTransform3D[5] = gdnative.MethodOf("RemoteTransform3D\000", "set_update_position\000", 2586408642)
		methodRemoteTransform3D[6] = gdnative.MethodOf("RemoteTransform3D\000", "get_update_position\000", 36873697)
		methodRemoteTransform3D[7] = gdnative.MethodOf("RemoteTransform3D\000", "set_update_rotation\000", 2586408642)
		methodRemoteTransform3D[8] = gdnative.MethodOf("RemoteTransform3D\000", "get_update_rotation\000", 36873697)
		methodRemoteTransform3D[9] = gdnative.MethodOf("RemoteTransform3D\000", "set_update_scale\000", 2586408642)
		methodRemoteTransform3D[10] = gdnative.MethodOf("RemoteTransform3D\000", "get_update_scale\000", 36873697)
		methodRenderingDevice[0] = gdnative.MethodOf("RenderingDevice\000", "texture_create\000", 3011278298)
		methodRenderingDevice[1] = gdnative.MethodOf("RenderingDevice\000", "texture_create_shared\000", 3178156134)
		methodRenderingDevice[2] = gdnative.MethodOf("RenderingDevice\000", "texture_create_shared_from_slice\000", 864132525)
		methodRenderingDevice[3] = gdnative.MethodOf("RenderingDevice\000", "texture_update\000", 259041867)
		methodRenderingDevice[4] = gdnative.MethodOf("RenderingDevice\000", "texture_get_data\000", 1859412099)
		methodRenderingDevice[5] = gdnative.MethodOf("RenderingDevice\000", "texture_is_format_supported_for_usage\000", 1616490902)
		methodRenderingDevice[6] = gdnative.MethodOf("RenderingDevice\000", "texture_is_shared\000", 3521089500)
		methodRenderingDevice[7] = gdnative.MethodOf("RenderingDevice\000", "texture_is_valid\000", 3521089500)
		methodRenderingDevice[8] = gdnative.MethodOf("RenderingDevice\000", "texture_copy\000", 4234145050)
		methodRenderingDevice[9] = gdnative.MethodOf("RenderingDevice\000", "texture_clear\000", 1993157964)
		methodRenderingDevice[10] = gdnative.MethodOf("RenderingDevice\000", "texture_resolve_multisample\000", 1429823113)
		methodRenderingDevice[11] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_format_create\000", 2635475316)
		methodRenderingDevice[12] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_format_create_multipass\000", 1992489524)
		methodRenderingDevice[13] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_format_create_empty\000", 555930169)
		methodRenderingDevice[14] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_format_get_texture_samples\000", 1036806638)
		methodRenderingDevice[15] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_create\000", 1884747791)
		methodRenderingDevice[16] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_create_multipass\000", 452534725)
		methodRenderingDevice[17] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_create_empty\000", 382373098)
		methodRenderingDevice[18] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_get_format\000", 3917799429)
		methodRenderingDevice[19] = gdnative.MethodOf("RenderingDevice\000", "framebuffer_is_valid\000", 4155700596)
		methodRenderingDevice[20] = gdnative.MethodOf("RenderingDevice\000", "sampler_create\000", 2327892535)
		methodRenderingDevice[21] = gdnative.MethodOf("RenderingDevice\000", "vertex_buffer_create\000", 3491282828)
		methodRenderingDevice[22] = gdnative.MethodOf("RenderingDevice\000", "vertex_format_create\000", 1242678479)
		methodRenderingDevice[23] = gdnative.MethodOf("RenderingDevice\000", "index_buffer_create\000", 975915977)
		methodRenderingDevice[24] = gdnative.MethodOf("RenderingDevice\000", "index_array_create\000", 2256026069)
		methodRenderingDevice[25] = gdnative.MethodOf("RenderingDevice\000", "shader_compile_spirv_from_source\000", 3459523685)
		methodRenderingDevice[26] = gdnative.MethodOf("RenderingDevice\000", "shader_compile_binary_from_spirv\000", 1395027180)
		methodRenderingDevice[27] = gdnative.MethodOf("RenderingDevice\000", "shader_create_from_spirv\000", 3297482566)
		methodRenderingDevice[28] = gdnative.MethodOf("RenderingDevice\000", "shader_create_from_bytecode\000", 3049171473)
		methodRenderingDevice[29] = gdnative.MethodOf("RenderingDevice\000", "shader_get_vertex_input_attribute_mask\000", 3917799429)
		methodRenderingDevice[30] = gdnative.MethodOf("RenderingDevice\000", "uniform_buffer_create\000", 1453158401)
		methodRenderingDevice[31] = gdnative.MethodOf("RenderingDevice\000", "storage_buffer_create\000", 595994205)
		methodRenderingDevice[32] = gdnative.MethodOf("RenderingDevice\000", "texture_buffer_create\000", 2344087557)
		methodRenderingDevice[33] = gdnative.MethodOf("RenderingDevice\000", "uniform_set_create\000", 2280795797)
		methodRenderingDevice[34] = gdnative.MethodOf("RenderingDevice\000", "uniform_set_is_valid\000", 3521089500)
		methodRenderingDevice[35] = gdnative.MethodOf("RenderingDevice\000", "buffer_update\000", 857091402)
		methodRenderingDevice[36] = gdnative.MethodOf("RenderingDevice\000", "buffer_clear\000", 3627474756)
		methodRenderingDevice[37] = gdnative.MethodOf("RenderingDevice\000", "buffer_get_data\000", 1102329001)
		methodRenderingDevice[38] = gdnative.MethodOf("RenderingDevice\000", "render_pipeline_create\000", 3544722194)
		methodRenderingDevice[39] = gdnative.MethodOf("RenderingDevice\000", "render_pipeline_is_valid\000", 3521089500)
		methodRenderingDevice[40] = gdnative.MethodOf("RenderingDevice\000", "compute_pipeline_create\000", 403593840)
		methodRenderingDevice[41] = gdnative.MethodOf("RenderingDevice\000", "compute_pipeline_is_valid\000", 3521089500)
		methodRenderingDevice[42] = gdnative.MethodOf("RenderingDevice\000", "screen_get_width\000", 1591665591)
		methodRenderingDevice[43] = gdnative.MethodOf("RenderingDevice\000", "screen_get_height\000", 1591665591)
		methodRenderingDevice[44] = gdnative.MethodOf("RenderingDevice\000", "screen_get_framebuffer_format\000", 3905245786)
		methodRenderingDevice[45] = gdnative.MethodOf("RenderingDevice\000", "draw_list_begin_for_screen\000", 3988079995)
		methodRenderingDevice[46] = gdnative.MethodOf("RenderingDevice\000", "draw_list_begin\000", 4252992020)
		methodRenderingDevice[47] = gdnative.MethodOf("RenderingDevice\000", "draw_list_begin_split\000", 832527510)
		methodRenderingDevice[48] = gdnative.MethodOf("RenderingDevice\000", "draw_list_bind_render_pipeline\000", 4040184819)
		methodRenderingDevice[49] = gdnative.MethodOf("RenderingDevice\000", "draw_list_bind_uniform_set\000", 749655778)
		methodRenderingDevice[50] = gdnative.MethodOf("RenderingDevice\000", "draw_list_bind_vertex_array\000", 4040184819)
		methodRenderingDevice[51] = gdnative.MethodOf("RenderingDevice\000", "draw_list_bind_index_array\000", 4040184819)
		methodRenderingDevice[52] = gdnative.MethodOf("RenderingDevice\000", "draw_list_set_push_constant\000", 2772371345)
		methodRenderingDevice[53] = gdnative.MethodOf("RenderingDevice\000", "draw_list_draw\000", 3710874499)
		methodRenderingDevice[54] = gdnative.MethodOf("RenderingDevice\000", "draw_list_enable_scissor\000", 338791288)
		methodRenderingDevice[55] = gdnative.MethodOf("RenderingDevice\000", "draw_list_disable_scissor\000", 1286410249)
		methodRenderingDevice[56] = gdnative.MethodOf("RenderingDevice\000", "draw_list_switch_to_next_pass\000", 2455072627)
		methodRenderingDevice[57] = gdnative.MethodOf("RenderingDevice\000", "draw_list_switch_to_next_pass_split\000", 2865087369)
		methodRenderingDevice[58] = gdnative.MethodOf("RenderingDevice\000", "draw_list_end\000", 2829508664)
		methodRenderingDevice[59] = gdnative.MethodOf("RenderingDevice\000", "compute_list_begin\000", 968564752)
		methodRenderingDevice[60] = gdnative.MethodOf("RenderingDevice\000", "compute_list_bind_compute_pipeline\000", 4040184819)
		methodRenderingDevice[61] = gdnative.MethodOf("RenderingDevice\000", "compute_list_set_push_constant\000", 2772371345)
		methodRenderingDevice[62] = gdnative.MethodOf("RenderingDevice\000", "compute_list_bind_uniform_set\000", 749655778)
		methodRenderingDevice[63] = gdnative.MethodOf("RenderingDevice\000", "compute_list_dispatch\000", 4275841770)
		methodRenderingDevice[64] = gdnative.MethodOf("RenderingDevice\000", "compute_list_add_barrier\000", 1286410249)
		methodRenderingDevice[65] = gdnative.MethodOf("RenderingDevice\000", "compute_list_end\000", 2829508664)
		methodRenderingDevice[66] = gdnative.MethodOf("RenderingDevice\000", "free_rid\000", 2722037293)
		methodRenderingDevice[67] = gdnative.MethodOf("RenderingDevice\000", "capture_timestamp\000", 83702148)
		methodRenderingDevice[68] = gdnative.MethodOf("RenderingDevice\000", "get_captured_timestamps_count\000", 3905245786)
		methodRenderingDevice[69] = gdnative.MethodOf("RenderingDevice\000", "get_captured_timestamps_frame\000", 3905245786)
		methodRenderingDevice[70] = gdnative.MethodOf("RenderingDevice\000", "get_captured_timestamp_gpu_time\000", 923996154)
		methodRenderingDevice[71] = gdnative.MethodOf("RenderingDevice\000", "get_captured_timestamp_cpu_time\000", 923996154)
		methodRenderingDevice[72] = gdnative.MethodOf("RenderingDevice\000", "get_captured_timestamp_name\000", 844755477)
		methodRenderingDevice[73] = gdnative.MethodOf("RenderingDevice\000", "limit_get\000", 1559202131)
		methodRenderingDevice[74] = gdnative.MethodOf("RenderingDevice\000", "get_frame_delay\000", 3905245786)
		methodRenderingDevice[75] = gdnative.MethodOf("RenderingDevice\000", "submit\000", 3218959716)
		methodRenderingDevice[76] = gdnative.MethodOf("RenderingDevice\000", "sync\000", 3218959716)
		methodRenderingDevice[77] = gdnative.MethodOf("RenderingDevice\000", "barrier\000", 3979627413)
		methodRenderingDevice[78] = gdnative.MethodOf("RenderingDevice\000", "full_barrier\000", 3218959716)
		methodRenderingDevice[79] = gdnative.MethodOf("RenderingDevice\000", "create_local_device\000", 2846302423)
		methodRenderingDevice[80] = gdnative.MethodOf("RenderingDevice\000", "set_resource_name\000", 2726140452)
		methodRenderingDevice[81] = gdnative.MethodOf("RenderingDevice\000", "draw_command_begin_label\000", 1636512886)
		methodRenderingDevice[82] = gdnative.MethodOf("RenderingDevice\000", "draw_command_insert_label\000", 1636512886)
		methodRenderingDevice[83] = gdnative.MethodOf("RenderingDevice\000", "draw_command_end_label\000", 3218959716)
		methodRenderingDevice[84] = gdnative.MethodOf("RenderingDevice\000", "get_device_vendor_name\000", 201670096)
		methodRenderingDevice[85] = gdnative.MethodOf("RenderingDevice\000", "get_device_name\000", 201670096)
		methodRenderingDevice[86] = gdnative.MethodOf("RenderingDevice\000", "get_device_pipeline_cache_uuid\000", 201670096)
		methodRenderingDevice[87] = gdnative.MethodOf("RenderingDevice\000", "get_memory_usage\000", 251690689)
		methodRenderingDevice[88] = gdnative.MethodOf("RenderingDevice\000", "get_driver_resource\000", 501815484)
		methodRenderingServer[0] = gdnative.MethodOf("RenderingServer\000", "texture_2d_create\000", 2010018390)
		methodRenderingServer[1] = gdnative.MethodOf("RenderingServer\000", "texture_2d_layered_create\000", 913689023)
		methodRenderingServer[2] = gdnative.MethodOf("RenderingServer\000", "texture_3d_create\000", 4036838706)
		methodRenderingServer[3] = gdnative.MethodOf("RenderingServer\000", "texture_proxy_create\000", 41030802)
		methodRenderingServer[4] = gdnative.MethodOf("RenderingServer\000", "texture_2d_update\000", 999539803)
		methodRenderingServer[5] = gdnative.MethodOf("RenderingServer\000", "texture_3d_update\000", 684822712)
		methodRenderingServer[6] = gdnative.MethodOf("RenderingServer\000", "texture_proxy_update\000", 395945892)
		methodRenderingServer[7] = gdnative.MethodOf("RenderingServer\000", "texture_2d_placeholder_create\000", 529393457)
		methodRenderingServer[8] = gdnative.MethodOf("RenderingServer\000", "texture_2d_layered_placeholder_create\000", 1394585590)
		methodRenderingServer[9] = gdnative.MethodOf("RenderingServer\000", "texture_3d_placeholder_create\000", 529393457)
		methodRenderingServer[10] = gdnative.MethodOf("RenderingServer\000", "texture_2d_get\000", 4206205781)
		methodRenderingServer[11] = gdnative.MethodOf("RenderingServer\000", "texture_2d_layer_get\000", 2705440895)
		methodRenderingServer[12] = gdnative.MethodOf("RenderingServer\000", "texture_3d_get\000", 2684255073)
		methodRenderingServer[13] = gdnative.MethodOf("RenderingServer\000", "texture_replace\000", 395945892)
		methodRenderingServer[14] = gdnative.MethodOf("RenderingServer\000", "texture_set_size_override\000", 4288446313)
		methodRenderingServer[15] = gdnative.MethodOf("RenderingServer\000", "texture_set_path\000", 2726140452)
		methodRenderingServer[16] = gdnative.MethodOf("RenderingServer\000", "texture_get_path\000", 642473191)
		methodRenderingServer[17] = gdnative.MethodOf("RenderingServer\000", "texture_set_force_redraw_if_visible\000", 1265174801)
		methodRenderingServer[18] = gdnative.MethodOf("RenderingServer\000", "shader_create\000", 529393457)
		methodRenderingServer[19] = gdnative.MethodOf("RenderingServer\000", "shader_set_code\000", 2726140452)
		methodRenderingServer[20] = gdnative.MethodOf("RenderingServer\000", "shader_set_path_hint\000", 2726140452)
		methodRenderingServer[21] = gdnative.MethodOf("RenderingServer\000", "shader_get_code\000", 642473191)
		methodRenderingServer[22] = gdnative.MethodOf("RenderingServer\000", "shader_get_shader_uniform_list\000", 2684255073)
		methodRenderingServer[23] = gdnative.MethodOf("RenderingServer\000", "shader_get_param_default\000", 2621281810)
		methodRenderingServer[24] = gdnative.MethodOf("RenderingServer\000", "shader_set_default_texture_param\000", 3864903085)
		methodRenderingServer[25] = gdnative.MethodOf("RenderingServer\000", "shader_get_default_texture_param\000", 2523186822)
		methodRenderingServer[26] = gdnative.MethodOf("RenderingServer\000", "material_create\000", 529393457)
		methodRenderingServer[27] = gdnative.MethodOf("RenderingServer\000", "material_set_shader\000", 395945892)
		methodRenderingServer[28] = gdnative.MethodOf("RenderingServer\000", "material_set_param\000", 3477296213)
		methodRenderingServer[29] = gdnative.MethodOf("RenderingServer\000", "material_get_param\000", 2621281810)
		methodRenderingServer[30] = gdnative.MethodOf("RenderingServer\000", "material_set_render_priority\000", 3411492887)
		methodRenderingServer[31] = gdnative.MethodOf("RenderingServer\000", "material_set_next_pass\000", 395945892)
		methodRenderingServer[32] = gdnative.MethodOf("RenderingServer\000", "mesh_create_from_surfaces\000", 4007581507)
		methodRenderingServer[33] = gdnative.MethodOf("RenderingServer\000", "mesh_create\000", 529393457)
		methodRenderingServer[34] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_format_offset\000", 864943070)
		methodRenderingServer[35] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_format_vertex_stride\000", 3175239445)
		methodRenderingServer[36] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_format_attribute_stride\000", 3175239445)
		methodRenderingServer[37] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_format_skin_stride\000", 3175239445)
		methodRenderingServer[38] = gdnative.MethodOf("RenderingServer\000", "mesh_add_surface\000", 1217542888)
		methodRenderingServer[39] = gdnative.MethodOf("RenderingServer\000", "mesh_add_surface_from_arrays\000", 2954797512)
		methodRenderingServer[40] = gdnative.MethodOf("RenderingServer\000", "mesh_get_blend_shape_count\000", 2198884583)
		methodRenderingServer[41] = gdnative.MethodOf("RenderingServer\000", "mesh_set_blend_shape_mode\000", 1294662092)
		methodRenderingServer[42] = gdnative.MethodOf("RenderingServer\000", "mesh_get_blend_shape_mode\000", 4282291819)
		methodRenderingServer[43] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_set_material\000", 2310537182)
		methodRenderingServer[44] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_material\000", 1066463050)
		methodRenderingServer[45] = gdnative.MethodOf("RenderingServer\000", "mesh_get_surface\000", 186674697)
		methodRenderingServer[46] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_arrays\000", 1778388067)
		methodRenderingServer[47] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_get_blend_shape_arrays\000", 1778388067)
		methodRenderingServer[48] = gdnative.MethodOf("RenderingServer\000", "mesh_get_surface_count\000", 2198884583)
		methodRenderingServer[49] = gdnative.MethodOf("RenderingServer\000", "mesh_set_custom_aabb\000", 3696536120)
		methodRenderingServer[50] = gdnative.MethodOf("RenderingServer\000", "mesh_get_custom_aabb\000", 974181306)
		methodRenderingServer[51] = gdnative.MethodOf("RenderingServer\000", "mesh_clear\000", 2722037293)
		methodRenderingServer[52] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_update_vertex_region\000", 2900195149)
		methodRenderingServer[53] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_update_attribute_region\000", 2900195149)
		methodRenderingServer[54] = gdnative.MethodOf("RenderingServer\000", "mesh_surface_update_skin_region\000", 2900195149)
		methodRenderingServer[55] = gdnative.MethodOf("RenderingServer\000", "mesh_set_shadow_mesh\000", 395945892)
		methodRenderingServer[56] = gdnative.MethodOf("RenderingServer\000", "multimesh_create\000", 529393457)
		methodRenderingServer[57] = gdnative.MethodOf("RenderingServer\000", "multimesh_allocate_data\000", 283685892)
		methodRenderingServer[58] = gdnative.MethodOf("RenderingServer\000", "multimesh_get_instance_count\000", 2198884583)
		methodRenderingServer[59] = gdnative.MethodOf("RenderingServer\000", "multimesh_set_mesh\000", 395945892)
		methodRenderingServer[60] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_set_transform\000", 675327471)
		methodRenderingServer[61] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_set_transform_2d\000", 736082694)
		methodRenderingServer[62] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_set_color\000", 176975443)
		methodRenderingServer[63] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_set_custom_data\000", 176975443)
		methodRenderingServer[64] = gdnative.MethodOf("RenderingServer\000", "multimesh_get_mesh\000", 3814569979)
		methodRenderingServer[65] = gdnative.MethodOf("RenderingServer\000", "multimesh_get_aabb\000", 974181306)
		methodRenderingServer[66] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_get_transform\000", 1050775521)
		methodRenderingServer[67] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_get_transform_2d\000", 1324854622)
		methodRenderingServer[68] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_get_color\000", 2946315076)
		methodRenderingServer[69] = gdnative.MethodOf("RenderingServer\000", "multimesh_instance_get_custom_data\000", 2946315076)
		methodRenderingServer[70] = gdnative.MethodOf("RenderingServer\000", "multimesh_set_visible_instances\000", 3411492887)
		methodRenderingServer[71] = gdnative.MethodOf("RenderingServer\000", "multimesh_get_visible_instances\000", 2198884583)
		methodRenderingServer[72] = gdnative.MethodOf("RenderingServer\000", "multimesh_set_buffer\000", 2960552364)
		methodRenderingServer[73] = gdnative.MethodOf("RenderingServer\000", "multimesh_get_buffer\000", 3964669176)
		methodRenderingServer[74] = gdnative.MethodOf("RenderingServer\000", "skeleton_create\000", 529393457)
		methodRenderingServer[75] = gdnative.MethodOf("RenderingServer\000", "skeleton_allocate_data\000", 1904426712)
		methodRenderingServer[76] = gdnative.MethodOf("RenderingServer\000", "skeleton_get_bone_count\000", 2198884583)
		methodRenderingServer[77] = gdnative.MethodOf("RenderingServer\000", "skeleton_bone_set_transform\000", 675327471)
		methodRenderingServer[78] = gdnative.MethodOf("RenderingServer\000", "skeleton_bone_get_transform\000", 1050775521)
		methodRenderingServer[79] = gdnative.MethodOf("RenderingServer\000", "skeleton_bone_set_transform_2d\000", 736082694)
		methodRenderingServer[80] = gdnative.MethodOf("RenderingServer\000", "skeleton_bone_get_transform_2d\000", 1324854622)
		methodRenderingServer[81] = gdnative.MethodOf("RenderingServer\000", "skeleton_set_base_transform_2d\000", 1246044741)
		methodRenderingServer[82] = gdnative.MethodOf("RenderingServer\000", "directional_light_create\000", 529393457)
		methodRenderingServer[83] = gdnative.MethodOf("RenderingServer\000", "omni_light_create\000", 529393457)
		methodRenderingServer[84] = gdnative.MethodOf("RenderingServer\000", "spot_light_create\000", 529393457)
		methodRenderingServer[85] = gdnative.MethodOf("RenderingServer\000", "light_set_color\000", 2948539648)
		methodRenderingServer[86] = gdnative.MethodOf("RenderingServer\000", "light_set_param\000", 501936875)
		methodRenderingServer[87] = gdnative.MethodOf("RenderingServer\000", "light_set_shadow\000", 1265174801)
		methodRenderingServer[88] = gdnative.MethodOf("RenderingServer\000", "light_set_projector\000", 395945892)
		methodRenderingServer[89] = gdnative.MethodOf("RenderingServer\000", "light_set_negative\000", 1265174801)
		methodRenderingServer[90] = gdnative.MethodOf("RenderingServer\000", "light_set_cull_mask\000", 3411492887)
		methodRenderingServer[91] = gdnative.MethodOf("RenderingServer\000", "light_set_distance_fade\000", 1622292572)
		methodRenderingServer[92] = gdnative.MethodOf("RenderingServer\000", "light_set_reverse_cull_face_mode\000", 1265174801)
		methodRenderingServer[93] = gdnative.MethodOf("RenderingServer\000", "light_set_bake_mode\000", 1048525260)
		methodRenderingServer[94] = gdnative.MethodOf("RenderingServer\000", "light_set_max_sdfgi_cascade\000", 3411492887)
		methodRenderingServer[95] = gdnative.MethodOf("RenderingServer\000", "light_omni_set_shadow_mode\000", 2552677200)
		methodRenderingServer[96] = gdnative.MethodOf("RenderingServer\000", "light_directional_set_shadow_mode\000", 380462970)
		methodRenderingServer[97] = gdnative.MethodOf("RenderingServer\000", "light_directional_set_blend_splits\000", 1265174801)
		methodRenderingServer[98] = gdnative.MethodOf("RenderingServer\000", "light_directional_set_sky_mode\000", 2559740754)
		methodRenderingServer[99] = gdnative.MethodOf("RenderingServer\000", "light_projectors_set_filter\000", 43944325)
		methodRenderingServer[100] = gdnative.MethodOf("RenderingServer\000", "positional_soft_shadow_filter_set_quality\000", 3613045266)
		methodRenderingServer[101] = gdnative.MethodOf("RenderingServer\000", "directional_soft_shadow_filter_set_quality\000", 3613045266)
		methodRenderingServer[102] = gdnative.MethodOf("RenderingServer\000", "directional_shadow_atlas_set_size\000", 300928843)
		methodRenderingServer[103] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_create\000", 529393457)
		methodRenderingServer[104] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_update_mode\000", 3853670147)
		methodRenderingServer[105] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_intensity\000", 1794382983)
		methodRenderingServer[106] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_ambient_mode\000", 184163074)
		methodRenderingServer[107] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_ambient_color\000", 2948539648)
		methodRenderingServer[108] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_ambient_energy\000", 1794382983)
		methodRenderingServer[109] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_max_distance\000", 1794382983)
		methodRenderingServer[110] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_extents\000", 3227306858)
		methodRenderingServer[111] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_origin_offset\000", 3227306858)
		methodRenderingServer[112] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_as_interior\000", 1265174801)
		methodRenderingServer[113] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_enable_box_projection\000", 1265174801)
		methodRenderingServer[114] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_enable_shadows\000", 1265174801)
		methodRenderingServer[115] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_cull_mask\000", 3411492887)
		methodRenderingServer[116] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_resolution\000", 3411492887)
		methodRenderingServer[117] = gdnative.MethodOf("RenderingServer\000", "reflection_probe_set_mesh_lod_threshold\000", 1794382983)
		methodRenderingServer[118] = gdnative.MethodOf("RenderingServer\000", "decal_create\000", 529393457)
		methodRenderingServer[119] = gdnative.MethodOf("RenderingServer\000", "decal_set_extents\000", 3227306858)
		methodRenderingServer[120] = gdnative.MethodOf("RenderingServer\000", "decal_set_texture\000", 3953344054)
		methodRenderingServer[121] = gdnative.MethodOf("RenderingServer\000", "decal_set_emission_energy\000", 1794382983)
		methodRenderingServer[122] = gdnative.MethodOf("RenderingServer\000", "decal_set_albedo_mix\000", 1794382983)
		methodRenderingServer[123] = gdnative.MethodOf("RenderingServer\000", "decal_set_modulate\000", 2948539648)
		methodRenderingServer[124] = gdnative.MethodOf("RenderingServer\000", "decal_set_cull_mask\000", 3411492887)
		methodRenderingServer[125] = gdnative.MethodOf("RenderingServer\000", "decal_set_distance_fade\000", 2972769666)
		methodRenderingServer[126] = gdnative.MethodOf("RenderingServer\000", "decal_set_fade\000", 2513314492)
		methodRenderingServer[127] = gdnative.MethodOf("RenderingServer\000", "decal_set_normal_fade\000", 1794382983)
		methodRenderingServer[128] = gdnative.MethodOf("RenderingServer\000", "decals_set_filter\000", 3519875702)
		methodRenderingServer[129] = gdnative.MethodOf("RenderingServer\000", "gi_set_use_half_resolution\000", 2586408642)
		methodRenderingServer[130] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_create\000", 529393457)
		methodRenderingServer[131] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_allocate_data\000", 4108223027)
		methodRenderingServer[132] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_octree_size\000", 2607699645)
		methodRenderingServer[133] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_octree_cells\000", 3348040486)
		methodRenderingServer[134] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_data_cells\000", 3348040486)
		methodRenderingServer[135] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_distance_field\000", 3348040486)
		methodRenderingServer[136] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_level_counts\000", 788230395)
		methodRenderingServer[137] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_get_to_cell_xform\000", 1128465797)
		methodRenderingServer[138] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_dynamic_range\000", 1794382983)
		methodRenderingServer[139] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_propagation\000", 1794382983)
		methodRenderingServer[140] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_energy\000", 1794382983)
		methodRenderingServer[141] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_bias\000", 1794382983)
		methodRenderingServer[142] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_normal_bias\000", 1794382983)
		methodRenderingServer[143] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_interior\000", 1265174801)
		methodRenderingServer[144] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_use_two_bounces\000", 1265174801)
		methodRenderingServer[145] = gdnative.MethodOf("RenderingServer\000", "voxel_gi_set_quality\000", 1538689978)
		methodRenderingServer[146] = gdnative.MethodOf("RenderingServer\000", "lightmap_create\000", 529393457)
		methodRenderingServer[147] = gdnative.MethodOf("RenderingServer\000", "lightmap_set_textures\000", 2646464759)
		methodRenderingServer[148] = gdnative.MethodOf("RenderingServer\000", "lightmap_set_probe_bounds\000", 3696536120)
		methodRenderingServer[149] = gdnative.MethodOf("RenderingServer\000", "lightmap_set_probe_interior\000", 1265174801)
		methodRenderingServer[150] = gdnative.MethodOf("RenderingServer\000", "lightmap_set_probe_capture_data\000", 3217845880)
		methodRenderingServer[151] = gdnative.MethodOf("RenderingServer\000", "lightmap_get_probe_capture_points\000", 808965560)
		methodRenderingServer[152] = gdnative.MethodOf("RenderingServer\000", "lightmap_get_probe_capture_sh\000", 1569415609)
		methodRenderingServer[153] = gdnative.MethodOf("RenderingServer\000", "lightmap_get_probe_capture_tetrahedra\000", 788230395)
		methodRenderingServer[154] = gdnative.MethodOf("RenderingServer\000", "lightmap_get_probe_capture_bsp_tree\000", 788230395)
		methodRenderingServer[155] = gdnative.MethodOf("RenderingServer\000", "lightmap_set_probe_capture_update_speed\000", 373806689)
		methodRenderingServer[156] = gdnative.MethodOf("RenderingServer\000", "particles_create\000", 529393457)
		methodRenderingServer[157] = gdnative.MethodOf("RenderingServer\000", "particles_set_mode\000", 3492270028)
		methodRenderingServer[158] = gdnative.MethodOf("RenderingServer\000", "particles_set_emitting\000", 1265174801)
		methodRenderingServer[159] = gdnative.MethodOf("RenderingServer\000", "particles_get_emitting\000", 3521089500)
		methodRenderingServer[160] = gdnative.MethodOf("RenderingServer\000", "particles_set_amount\000", 3411492887)
		methodRenderingServer[161] = gdnative.MethodOf("RenderingServer\000", "particles_set_lifetime\000", 1794382983)
		methodRenderingServer[162] = gdnative.MethodOf("RenderingServer\000", "particles_set_one_shot\000", 1265174801)
		methodRenderingServer[163] = gdnative.MethodOf("RenderingServer\000", "particles_set_pre_process_time\000", 1794382983)
		methodRenderingServer[164] = gdnative.MethodOf("RenderingServer\000", "particles_set_explosiveness_ratio\000", 1794382983)
		methodRenderingServer[165] = gdnative.MethodOf("RenderingServer\000", "particles_set_randomness_ratio\000", 1794382983)
		methodRenderingServer[166] = gdnative.MethodOf("RenderingServer\000", "particles_set_custom_aabb\000", 3696536120)
		methodRenderingServer[167] = gdnative.MethodOf("RenderingServer\000", "particles_set_speed_scale\000", 1794382983)
		methodRenderingServer[168] = gdnative.MethodOf("RenderingServer\000", "particles_set_use_local_coordinates\000", 1265174801)
		methodRenderingServer[169] = gdnative.MethodOf("RenderingServer\000", "particles_set_process_material\000", 395945892)
		methodRenderingServer[170] = gdnative.MethodOf("RenderingServer\000", "particles_set_fixed_fps\000", 3411492887)
		methodRenderingServer[171] = gdnative.MethodOf("RenderingServer\000", "particles_set_interpolate\000", 1265174801)
		methodRenderingServer[172] = gdnative.MethodOf("RenderingServer\000", "particles_set_fractional_delta\000", 1265174801)
		methodRenderingServer[173] = gdnative.MethodOf("RenderingServer\000", "particles_set_collision_base_size\000", 1794382983)
		methodRenderingServer[174] = gdnative.MethodOf("RenderingServer\000", "particles_set_transform_align\000", 3264971368)
		methodRenderingServer[175] = gdnative.MethodOf("RenderingServer\000", "particles_set_trails\000", 2010054925)
		methodRenderingServer[176] = gdnative.MethodOf("RenderingServer\000", "particles_set_trail_bind_poses\000", 684822712)
		methodRenderingServer[177] = gdnative.MethodOf("RenderingServer\000", "particles_is_inactive\000", 3521089500)
		methodRenderingServer[178] = gdnative.MethodOf("RenderingServer\000", "particles_request_process\000", 2722037293)
		methodRenderingServer[179] = gdnative.MethodOf("RenderingServer\000", "particles_restart\000", 2722037293)
		methodRenderingServer[180] = gdnative.MethodOf("RenderingServer\000", "particles_set_subemitter\000", 395945892)
		methodRenderingServer[181] = gdnative.MethodOf("RenderingServer\000", "particles_emit\000", 4043136117)
		methodRenderingServer[182] = gdnative.MethodOf("RenderingServer\000", "particles_set_draw_order\000", 935028487)
		methodRenderingServer[183] = gdnative.MethodOf("RenderingServer\000", "particles_set_draw_passes\000", 3411492887)
		methodRenderingServer[184] = gdnative.MethodOf("RenderingServer\000", "particles_set_draw_pass_mesh\000", 2310537182)
		methodRenderingServer[185] = gdnative.MethodOf("RenderingServer\000", "particles_get_current_aabb\000", 3952830260)
		methodRenderingServer[186] = gdnative.MethodOf("RenderingServer\000", "particles_set_emission_transform\000", 3935195649)
		methodRenderingServer[187] = gdnative.MethodOf("RenderingServer\000", "particles_collision_create\000", 529393457)
		methodRenderingServer[188] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_collision_type\000", 1497044930)
		methodRenderingServer[189] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_cull_mask\000", 3411492887)
		methodRenderingServer[190] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_sphere_radius\000", 1794382983)
		methodRenderingServer[191] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_box_extents\000", 3227306858)
		methodRenderingServer[192] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_attractor_strength\000", 1794382983)
		methodRenderingServer[193] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_attractor_directionality\000", 1794382983)
		methodRenderingServer[194] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_attractor_attenuation\000", 1794382983)
		methodRenderingServer[195] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_field_texture\000", 395945892)
		methodRenderingServer[196] = gdnative.MethodOf("RenderingServer\000", "particles_collision_height_field_update\000", 2722037293)
		methodRenderingServer[197] = gdnative.MethodOf("RenderingServer\000", "particles_collision_set_height_field_resolution\000", 962977297)
		methodRenderingServer[198] = gdnative.MethodOf("RenderingServer\000", "fog_volume_create\000", 529393457)
		methodRenderingServer[199] = gdnative.MethodOf("RenderingServer\000", "fog_volume_set_shape\000", 3818703106)
		methodRenderingServer[200] = gdnative.MethodOf("RenderingServer\000", "fog_volume_set_extents\000", 3227306858)
		methodRenderingServer[201] = gdnative.MethodOf("RenderingServer\000", "fog_volume_set_material\000", 395945892)
		methodRenderingServer[202] = gdnative.MethodOf("RenderingServer\000", "visibility_notifier_create\000", 529393457)
		methodRenderingServer[203] = gdnative.MethodOf("RenderingServer\000", "visibility_notifier_set_aabb\000", 3696536120)
		methodRenderingServer[204] = gdnative.MethodOf("RenderingServer\000", "visibility_notifier_set_callbacks\000", 2689735388)
		methodRenderingServer[205] = gdnative.MethodOf("RenderingServer\000", "occluder_create\000", 529393457)
		methodRenderingServer[206] = gdnative.MethodOf("RenderingServer\000", "occluder_set_mesh\000", 3854404263)
		methodRenderingServer[207] = gdnative.MethodOf("RenderingServer\000", "camera_create\000", 529393457)
		methodRenderingServer[208] = gdnative.MethodOf("RenderingServer\000", "camera_set_perspective\000", 157498339)
		methodRenderingServer[209] = gdnative.MethodOf("RenderingServer\000", "camera_set_orthogonal\000", 157498339)
		methodRenderingServer[210] = gdnative.MethodOf("RenderingServer\000", "camera_set_frustum\000", 1889878953)
		methodRenderingServer[211] = gdnative.MethodOf("RenderingServer\000", "camera_set_transform\000", 3935195649)
		methodRenderingServer[212] = gdnative.MethodOf("RenderingServer\000", "camera_set_cull_mask\000", 3411492887)
		methodRenderingServer[213] = gdnative.MethodOf("RenderingServer\000", "camera_set_environment\000", 395945892)
		methodRenderingServer[214] = gdnative.MethodOf("RenderingServer\000", "camera_set_camera_effects\000", 395945892)
		methodRenderingServer[215] = gdnative.MethodOf("RenderingServer\000", "camera_set_use_vertical_aspect\000", 1265174801)
		methodRenderingServer[216] = gdnative.MethodOf("RenderingServer\000", "viewport_create\000", 529393457)
		methodRenderingServer[217] = gdnative.MethodOf("RenderingServer\000", "viewport_set_use_xr\000", 1265174801)
		methodRenderingServer[218] = gdnative.MethodOf("RenderingServer\000", "viewport_set_size\000", 4288446313)
		methodRenderingServer[219] = gdnative.MethodOf("RenderingServer\000", "viewport_set_active\000", 1265174801)
		methodRenderingServer[220] = gdnative.MethodOf("RenderingServer\000", "viewport_set_parent_viewport\000", 395945892)
		methodRenderingServer[221] = gdnative.MethodOf("RenderingServer\000", "viewport_attach_to_screen\000", 1278520651)
		methodRenderingServer[222] = gdnative.MethodOf("RenderingServer\000", "viewport_set_render_direct_to_screen\000", 1265174801)
		methodRenderingServer[223] = gdnative.MethodOf("RenderingServer\000", "viewport_set_scaling_3d_mode\000", 2386524376)
		methodRenderingServer[224] = gdnative.MethodOf("RenderingServer\000", "viewport_set_scaling_3d_scale\000", 1794382983)
		methodRenderingServer[225] = gdnative.MethodOf("RenderingServer\000", "viewport_set_fsr_sharpness\000", 1794382983)
		methodRenderingServer[226] = gdnative.MethodOf("RenderingServer\000", "viewport_set_texture_mipmap_bias\000", 1794382983)
		methodRenderingServer[227] = gdnative.MethodOf("RenderingServer\000", "viewport_set_update_mode\000", 3161116010)
		methodRenderingServer[228] = gdnative.MethodOf("RenderingServer\000", "viewport_set_clear_mode\000", 3628367896)
		methodRenderingServer[229] = gdnative.MethodOf("RenderingServer\000", "viewport_get_texture\000", 3814569979)
		methodRenderingServer[230] = gdnative.MethodOf("RenderingServer\000", "viewport_set_disable_3d\000", 1265174801)
		methodRenderingServer[231] = gdnative.MethodOf("RenderingServer\000", "viewport_set_disable_2d\000", 1265174801)
		methodRenderingServer[232] = gdnative.MethodOf("RenderingServer\000", "viewport_set_disable_environment\000", 1265174801)
		methodRenderingServer[233] = gdnative.MethodOf("RenderingServer\000", "viewport_attach_camera\000", 395945892)
		methodRenderingServer[234] = gdnative.MethodOf("RenderingServer\000", "viewport_set_scenario\000", 395945892)
		methodRenderingServer[235] = gdnative.MethodOf("RenderingServer\000", "viewport_attach_canvas\000", 395945892)
		methodRenderingServer[236] = gdnative.MethodOf("RenderingServer\000", "viewport_remove_canvas\000", 395945892)
		methodRenderingServer[237] = gdnative.MethodOf("RenderingServer\000", "viewport_set_snap_2d_transforms_to_pixel\000", 1265174801)
		methodRenderingServer[238] = gdnative.MethodOf("RenderingServer\000", "viewport_set_snap_2d_vertices_to_pixel\000", 1265174801)
		methodRenderingServer[239] = gdnative.MethodOf("RenderingServer\000", "viewport_set_default_canvas_item_texture_filter\000", 1155129294)
		methodRenderingServer[240] = gdnative.MethodOf("RenderingServer\000", "viewport_set_default_canvas_item_texture_repeat\000", 1652956681)
		methodRenderingServer[241] = gdnative.MethodOf("RenderingServer\000", "viewport_set_canvas_transform\000", 3608606053)
		methodRenderingServer[242] = gdnative.MethodOf("RenderingServer\000", "viewport_set_canvas_stacking\000", 3713930247)
		methodRenderingServer[243] = gdnative.MethodOf("RenderingServer\000", "viewport_set_transparent_background\000", 1265174801)
		methodRenderingServer[244] = gdnative.MethodOf("RenderingServer\000", "viewport_set_global_canvas_transform\000", 1246044741)
		methodRenderingServer[245] = gdnative.MethodOf("RenderingServer\000", "viewport_set_sdf_oversize_and_scale\000", 1329198632)
		methodRenderingServer[246] = gdnative.MethodOf("RenderingServer\000", "viewport_set_positional_shadow_atlas_size\000", 1904426712)
		methodRenderingServer[247] = gdnative.MethodOf("RenderingServer\000", "viewport_set_positional_shadow_atlas_quadrant_subdivision\000", 4288446313)
		methodRenderingServer[248] = gdnative.MethodOf("RenderingServer\000", "viewport_set_msaa\000", 3764433340)
		methodRenderingServer[249] = gdnative.MethodOf("RenderingServer\000", "viewport_set_screen_space_aa\000", 1447279591)
		methodRenderingServer[250] = gdnative.MethodOf("RenderingServer\000", "viewport_set_use_taa\000", 1265174801)
		methodRenderingServer[251] = gdnative.MethodOf("RenderingServer\000", "viewport_set_use_debanding\000", 1265174801)
		methodRenderingServer[252] = gdnative.MethodOf("RenderingServer\000", "viewport_set_use_occlusion_culling\000", 1265174801)
		methodRenderingServer[253] = gdnative.MethodOf("RenderingServer\000", "viewport_set_occlusion_rays_per_thread\000", 1286410249)
		methodRenderingServer[254] = gdnative.MethodOf("RenderingServer\000", "viewport_set_occlusion_culling_build_quality\000", 2069725696)
		methodRenderingServer[255] = gdnative.MethodOf("RenderingServer\000", "viewport_get_render_info\000", 2041262392)
		methodRenderingServer[256] = gdnative.MethodOf("RenderingServer\000", "viewport_set_debug_draw\000", 2089420930)
		methodRenderingServer[257] = gdnative.MethodOf("RenderingServer\000", "viewport_set_measure_render_time\000", 1265174801)
		methodRenderingServer[258] = gdnative.MethodOf("RenderingServer\000", "viewport_get_measured_render_time_cpu\000", 866169185)
		methodRenderingServer[259] = gdnative.MethodOf("RenderingServer\000", "viewport_get_measured_render_time_gpu\000", 866169185)
		methodRenderingServer[260] = gdnative.MethodOf("RenderingServer\000", "viewport_set_vrs_mode\000", 398809874)
		methodRenderingServer[261] = gdnative.MethodOf("RenderingServer\000", "viewport_set_vrs_texture\000", 395945892)
		methodRenderingServer[262] = gdnative.MethodOf("RenderingServer\000", "sky_create\000", 529393457)
		methodRenderingServer[263] = gdnative.MethodOf("RenderingServer\000", "sky_set_radiance_size\000", 3411492887)
		methodRenderingServer[264] = gdnative.MethodOf("RenderingServer\000", "sky_set_mode\000", 3279019937)
		methodRenderingServer[265] = gdnative.MethodOf("RenderingServer\000", "sky_set_material\000", 395945892)
		methodRenderingServer[266] = gdnative.MethodOf("RenderingServer\000", "sky_bake_panorama\000", 3875285818)
		methodRenderingServer[267] = gdnative.MethodOf("RenderingServer\000", "environment_create\000", 529393457)
		methodRenderingServer[268] = gdnative.MethodOf("RenderingServer\000", "environment_set_background\000", 3937328877)
		methodRenderingServer[269] = gdnative.MethodOf("RenderingServer\000", "environment_set_sky\000", 395945892)
		methodRenderingServer[270] = gdnative.MethodOf("RenderingServer\000", "environment_set_sky_custom_fov\000", 1794382983)
		methodRenderingServer[271] = gdnative.MethodOf("RenderingServer\000", "environment_set_sky_orientation\000", 1735850857)
		methodRenderingServer[272] = gdnative.MethodOf("RenderingServer\000", "environment_set_bg_color\000", 2948539648)
		methodRenderingServer[273] = gdnative.MethodOf("RenderingServer\000", "environment_set_bg_energy\000", 1794382983)
		methodRenderingServer[274] = gdnative.MethodOf("RenderingServer\000", "environment_set_canvas_max_layer\000", 3411492887)
		methodRenderingServer[275] = gdnative.MethodOf("RenderingServer\000", "environment_set_ambient_light\000", 362573166)
		methodRenderingServer[276] = gdnative.MethodOf("RenderingServer\000", "environment_set_glow\000", 2421724940)
		methodRenderingServer[277] = gdnative.MethodOf("RenderingServer\000", "environment_set_tonemap\000", 2732704897)
		methodRenderingServer[278] = gdnative.MethodOf("RenderingServer\000", "environment_set_adjustment\000", 876799838)
		methodRenderingServer[279] = gdnative.MethodOf("RenderingServer\000", "environment_set_ssr\000", 3607294374)
		methodRenderingServer[280] = gdnative.MethodOf("RenderingServer\000", "environment_set_ssao\000", 3994732740)
		methodRenderingServer[281] = gdnative.MethodOf("RenderingServer\000", "environment_set_fog\000", 3810560768)
		methodRenderingServer[282] = gdnative.MethodOf("RenderingServer\000", "environment_set_sdfgi\000", 3519144388)
		methodRenderingServer[283] = gdnative.MethodOf("RenderingServer\000", "environment_set_volumetric_fog\000", 3689440217)
		methodRenderingServer[284] = gdnative.MethodOf("RenderingServer\000", "environment_glow_set_use_bicubic_upscale\000", 2586408642)
		methodRenderingServer[285] = gdnative.MethodOf("RenderingServer\000", "environment_glow_set_use_high_quality\000", 2586408642)
		methodRenderingServer[286] = gdnative.MethodOf("RenderingServer\000", "environment_set_ssr_roughness_quality\000", 1190026788)
		methodRenderingServer[287] = gdnative.MethodOf("RenderingServer\000", "environment_set_ssao_quality\000", 189753569)
		methodRenderingServer[288] = gdnative.MethodOf("RenderingServer\000", "environment_set_ssil_quality\000", 1713836683)
		methodRenderingServer[289] = gdnative.MethodOf("RenderingServer\000", "environment_set_sdfgi_ray_count\000", 340137951)
		methodRenderingServer[290] = gdnative.MethodOf("RenderingServer\000", "environment_set_sdfgi_frames_to_converge\000", 2182444374)
		methodRenderingServer[291] = gdnative.MethodOf("RenderingServer\000", "environment_set_sdfgi_frames_to_update_light\000", 1251144068)
		methodRenderingServer[292] = gdnative.MethodOf("RenderingServer\000", "environment_set_volumetric_fog_volume_size\000", 3937882851)
		methodRenderingServer[293] = gdnative.MethodOf("RenderingServer\000", "environment_set_volumetric_fog_filter_active\000", 2586408642)
		methodRenderingServer[294] = gdnative.MethodOf("RenderingServer\000", "environment_bake_panorama\000", 2452908646)
		methodRenderingServer[295] = gdnative.MethodOf("RenderingServer\000", "screen_space_roughness_limiter_set_active\000", 916716790)
		methodRenderingServer[296] = gdnative.MethodOf("RenderingServer\000", "sub_surface_scattering_set_quality\000", 64571803)
		methodRenderingServer[297] = gdnative.MethodOf("RenderingServer\000", "sub_surface_scattering_set_scale\000", 1017552074)
		methodRenderingServer[298] = gdnative.MethodOf("RenderingServer\000", "camera_effects_create\000", 529393457)
		methodRenderingServer[299] = gdnative.MethodOf("RenderingServer\000", "camera_effects_set_dof_blur_quality\000", 2220136795)
		methodRenderingServer[300] = gdnative.MethodOf("RenderingServer\000", "camera_effects_set_dof_blur_bokeh_shape\000", 1205058394)
		methodRenderingServer[301] = gdnative.MethodOf("RenderingServer\000", "camera_effects_set_dof_blur\000", 316272616)
		methodRenderingServer[302] = gdnative.MethodOf("RenderingServer\000", "camera_effects_set_custom_exposure\000", 2010054925)
		methodRenderingServer[303] = gdnative.MethodOf("RenderingServer\000", "scenario_create\000", 529393457)
		methodRenderingServer[304] = gdnative.MethodOf("RenderingServer\000", "scenario_set_environment\000", 395945892)
		methodRenderingServer[305] = gdnative.MethodOf("RenderingServer\000", "scenario_set_fallback_environment\000", 395945892)
		methodRenderingServer[306] = gdnative.MethodOf("RenderingServer\000", "scenario_set_camera_effects\000", 395945892)
		methodRenderingServer[307] = gdnative.MethodOf("RenderingServer\000", "instance_create2\000", 746547085)
		methodRenderingServer[308] = gdnative.MethodOf("RenderingServer\000", "instance_create\000", 529393457)
		methodRenderingServer[309] = gdnative.MethodOf("RenderingServer\000", "instance_set_base\000", 395945892)
		methodRenderingServer[310] = gdnative.MethodOf("RenderingServer\000", "instance_set_scenario\000", 395945892)
		methodRenderingServer[311] = gdnative.MethodOf("RenderingServer\000", "instance_set_layer_mask\000", 3411492887)
		methodRenderingServer[312] = gdnative.MethodOf("RenderingServer\000", "instance_set_transform\000", 3935195649)
		methodRenderingServer[313] = gdnative.MethodOf("RenderingServer\000", "instance_attach_object_instance_id\000", 3411492887)
		methodRenderingServer[314] = gdnative.MethodOf("RenderingServer\000", "instance_set_blend_shape_weight\000", 1892459533)
		methodRenderingServer[315] = gdnative.MethodOf("RenderingServer\000", "instance_set_surface_override_material\000", 2310537182)
		methodRenderingServer[316] = gdnative.MethodOf("RenderingServer\000", "instance_set_visible\000", 1265174801)
		methodRenderingServer[317] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_transparency\000", 1794382983)
		methodRenderingServer[318] = gdnative.MethodOf("RenderingServer\000", "instance_set_custom_aabb\000", 3696536120)
		methodRenderingServer[319] = gdnative.MethodOf("RenderingServer\000", "instance_attach_skeleton\000", 395945892)
		methodRenderingServer[320] = gdnative.MethodOf("RenderingServer\000", "instance_set_extra_visibility_margin\000", 1794382983)
		methodRenderingServer[321] = gdnative.MethodOf("RenderingServer\000", "instance_set_visibility_parent\000", 395945892)
		methodRenderingServer[322] = gdnative.MethodOf("RenderingServer\000", "instance_set_ignore_culling\000", 1265174801)
		methodRenderingServer[323] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_flag\000", 1014989537)
		methodRenderingServer[324] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_cast_shadows_setting\000", 3768836020)
		methodRenderingServer[325] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_material_override\000", 395945892)
		methodRenderingServer[326] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_material_overlay\000", 395945892)
		methodRenderingServer[327] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_visibility_range\000", 4263925858)
		methodRenderingServer[328] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_lightmap\000", 536974962)
		methodRenderingServer[329] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_lod_bias\000", 1794382983)
		methodRenderingServer[330] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_set_shader_uniform\000", 3477296213)
		methodRenderingServer[331] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_get_shader_uniform\000", 2621281810)
		methodRenderingServer[332] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_get_shader_uniform_default_value\000", 2621281810)
		methodRenderingServer[333] = gdnative.MethodOf("RenderingServer\000", "instance_geometry_get_shader_uniform_list\000", 2684255073)
		methodRenderingServer[334] = gdnative.MethodOf("RenderingServer\000", "instances_cull_aabb\000", 1149645703)
		methodRenderingServer[335] = gdnative.MethodOf("RenderingServer\000", "instances_cull_ray\000", 4168413368)
		methodRenderingServer[336] = gdnative.MethodOf("RenderingServer\000", "instances_cull_convex\000", 2871735507)
		methodRenderingServer[337] = gdnative.MethodOf("RenderingServer\000", "bake_render_uv2\000", 1904608558)
		methodRenderingServer[338] = gdnative.MethodOf("RenderingServer\000", "canvas_create\000", 529393457)
		methodRenderingServer[339] = gdnative.MethodOf("RenderingServer\000", "canvas_set_item_mirroring\000", 2343975398)
		methodRenderingServer[340] = gdnative.MethodOf("RenderingServer\000", "canvas_set_modulate\000", 2948539648)
		methodRenderingServer[341] = gdnative.MethodOf("RenderingServer\000", "canvas_set_disable_scale\000", 2586408642)
		methodRenderingServer[342] = gdnative.MethodOf("RenderingServer\000", "canvas_texture_create\000", 529393457)
		methodRenderingServer[343] = gdnative.MethodOf("RenderingServer\000", "canvas_texture_set_channel\000", 3822119138)
		methodRenderingServer[344] = gdnative.MethodOf("RenderingServer\000", "canvas_texture_set_shading_parameters\000", 2124967469)
		methodRenderingServer[345] = gdnative.MethodOf("RenderingServer\000", "canvas_texture_set_texture_filter\000", 1155129294)
		methodRenderingServer[346] = gdnative.MethodOf("RenderingServer\000", "canvas_texture_set_texture_repeat\000", 1652956681)
		methodRenderingServer[347] = gdnative.MethodOf("RenderingServer\000", "canvas_item_create\000", 529393457)
		methodRenderingServer[348] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_parent\000", 395945892)
		methodRenderingServer[349] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_default_texture_filter\000", 1155129294)
		methodRenderingServer[350] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_default_texture_repeat\000", 1652956681)
		methodRenderingServer[351] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_visible\000", 1265174801)
		methodRenderingServer[352] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_light_mask\000", 3411492887)
		methodRenderingServer[353] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_transform\000", 1246044741)
		methodRenderingServer[354] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_clip\000", 1265174801)
		methodRenderingServer[355] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_distance_field_mode\000", 1265174801)
		methodRenderingServer[356] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_custom_rect\000", 2180266943)
		methodRenderingServer[357] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_modulate\000", 2948539648)
		methodRenderingServer[358] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_self_modulate\000", 2948539648)
		methodRenderingServer[359] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_draw_behind_parent\000", 1265174801)
		methodRenderingServer[360] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_line\000", 2843922985)
		methodRenderingServer[361] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_polyline\000", 3438017257)
		methodRenderingServer[362] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_rect\000", 934531857)
		methodRenderingServer[363] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_circle\000", 2439351960)
		methodRenderingServer[364] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_texture_rect\000", 3205360868)
		methodRenderingServer[365] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_msdf_texture_rect_region\000", 4239856677)
		methodRenderingServer[366] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_texture_rect_region\000", 2782979504)
		methodRenderingServer[367] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_nine_patch\000", 904428547)
		methodRenderingServer[368] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_primitive\000", 3826547603)
		methodRenderingServer[369] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_polygon\000", 2907936855)
		methodRenderingServer[370] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_triangle_array\000", 749685193)
		methodRenderingServer[371] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_mesh\000", 3548053052)
		methodRenderingServer[372] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_multimesh\000", 1541595251)
		methodRenderingServer[373] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_particles\000", 2575754278)
		methodRenderingServer[374] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_set_transform\000", 1246044741)
		methodRenderingServer[375] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_clip_ignore\000", 1265174801)
		methodRenderingServer[376] = gdnative.MethodOf("RenderingServer\000", "canvas_item_add_animation_slice\000", 4107531031)
		methodRenderingServer[377] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_sort_children_by_y\000", 1265174801)
		methodRenderingServer[378] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_z_index\000", 3411492887)
		methodRenderingServer[379] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_z_as_relative_to_parent\000", 1265174801)
		methodRenderingServer[380] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_copy_to_backbuffer\000", 2429202503)
		methodRenderingServer[381] = gdnative.MethodOf("RenderingServer\000", "canvas_item_clear\000", 2722037293)
		methodRenderingServer[382] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_draw_index\000", 3411492887)
		methodRenderingServer[383] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_material\000", 395945892)
		methodRenderingServer[384] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_use_parent_material\000", 1265174801)
		methodRenderingServer[385] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_visibility_notifier\000", 3568945579)
		methodRenderingServer[386] = gdnative.MethodOf("RenderingServer\000", "canvas_item_set_canvas_group_mode\000", 1568036344)
		methodRenderingServer[387] = gdnative.MethodOf("RenderingServer\000", "canvas_light_create\000", 529393457)
		methodRenderingServer[388] = gdnative.MethodOf("RenderingServer\000", "canvas_light_attach_to_canvas\000", 395945892)
		methodRenderingServer[389] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_enabled\000", 1265174801)
		methodRenderingServer[390] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_texture_scale\000", 1794382983)
		methodRenderingServer[391] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_transform\000", 1246044741)
		methodRenderingServer[392] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_texture\000", 395945892)
		methodRenderingServer[393] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_texture_offset\000", 3201125042)
		methodRenderingServer[394] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_color\000", 2948539648)
		methodRenderingServer[395] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_height\000", 1794382983)
		methodRenderingServer[396] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_energy\000", 1794382983)
		methodRenderingServer[397] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_z_range\000", 4288446313)
		methodRenderingServer[398] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_layer_range\000", 4288446313)
		methodRenderingServer[399] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_item_cull_mask\000", 3411492887)
		methodRenderingServer[400] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_item_shadow_cull_mask\000", 3411492887)
		methodRenderingServer[401] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_mode\000", 2957564891)
		methodRenderingServer[402] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_shadow_enabled\000", 1265174801)
		methodRenderingServer[403] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_shadow_filter\000", 393119659)
		methodRenderingServer[404] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_shadow_color\000", 2948539648)
		methodRenderingServer[405] = gdnative.MethodOf("RenderingServer\000", "canvas_light_set_shadow_smooth\000", 1794382983)
		methodRenderingServer[406] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_create\000", 529393457)
		methodRenderingServer[407] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_attach_to_canvas\000", 395945892)
		methodRenderingServer[408] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_set_enabled\000", 1265174801)
		methodRenderingServer[409] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_set_polygon\000", 395945892)
		methodRenderingServer[410] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_set_as_sdf_collision\000", 1265174801)
		methodRenderingServer[411] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_set_transform\000", 1246044741)
		methodRenderingServer[412] = gdnative.MethodOf("RenderingServer\000", "canvas_light_occluder_set_light_mask\000", 3411492887)
		methodRenderingServer[413] = gdnative.MethodOf("RenderingServer\000", "canvas_occluder_polygon_create\000", 529393457)
		methodRenderingServer[414] = gdnative.MethodOf("RenderingServer\000", "canvas_occluder_polygon_set_shape\000", 2103882027)
		methodRenderingServer[415] = gdnative.MethodOf("RenderingServer\000", "canvas_occluder_polygon_set_cull_mode\000", 1839404663)
		methodRenderingServer[416] = gdnative.MethodOf("RenderingServer\000", "canvas_set_shadow_texture_size\000", 1286410249)
		methodRenderingServer[417] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_add\000", 2580774935)
		methodRenderingServer[418] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_remove\000", 3304788590)
		methodRenderingServer[419] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_get_list\000", 1139954409)
		methodRenderingServer[420] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_set\000", 3776071444)
		methodRenderingServer[421] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_set_override\000", 3776071444)
		methodRenderingServer[422] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_get\000", 2760726917)
		methodRenderingServer[423] = gdnative.MethodOf("RenderingServer\000", "global_shader_uniform_get_type\000", 1808916393)
		methodRenderingServer[424] = gdnative.MethodOf("RenderingServer\000", "free_rid\000", 2722037293)
		methodRenderingServer[425] = gdnative.MethodOf("RenderingServer\000", "request_frame_drawn_callback\000", 1611583062)
		methodRenderingServer[426] = gdnative.MethodOf("RenderingServer\000", "has_changed\000", 36873697)
		methodRenderingServer[427] = gdnative.MethodOf("RenderingServer\000", "get_rendering_info\000", 3763192241)
		methodRenderingServer[428] = gdnative.MethodOf("RenderingServer\000", "get_video_adapter_name\000", 201670096)
		methodRenderingServer[429] = gdnative.MethodOf("RenderingServer\000", "get_video_adapter_vendor\000", 201670096)
		methodRenderingServer[430] = gdnative.MethodOf("RenderingServer\000", "get_video_adapter_type\000", 3099547011)
		methodRenderingServer[431] = gdnative.MethodOf("RenderingServer\000", "get_video_adapter_api_version\000", 201670096)
		methodRenderingServer[432] = gdnative.MethodOf("RenderingServer\000", "make_sphere_mesh\000", 2251015897)
		methodRenderingServer[433] = gdnative.MethodOf("RenderingServer\000", "get_test_cube\000", 529393457)
		methodRenderingServer[434] = gdnative.MethodOf("RenderingServer\000", "get_test_texture\000", 529393457)
		methodRenderingServer[435] = gdnative.MethodOf("RenderingServer\000", "get_white_texture\000", 529393457)
		methodRenderingServer[436] = gdnative.MethodOf("RenderingServer\000", "set_boot_image\000", 2244367877)
		methodRenderingServer[437] = gdnative.MethodOf("RenderingServer\000", "set_default_clear_color\000", 2920490490)
		methodRenderingServer[438] = gdnative.MethodOf("RenderingServer\000", "has_feature\000", 598462696)
		methodRenderingServer[439] = gdnative.MethodOf("RenderingServer\000", "has_os_feature\000", 3927539163)
		methodRenderingServer[440] = gdnative.MethodOf("RenderingServer\000", "set_debug_generate_wireframes\000", 2586408642)
		methodRenderingServer[441] = gdnative.MethodOf("RenderingServer\000", "is_render_loop_enabled\000", 36873697)
		methodRenderingServer[442] = gdnative.MethodOf("RenderingServer\000", "set_render_loop_enabled\000", 2586408642)
		methodRenderingServer[443] = gdnative.MethodOf("RenderingServer\000", "get_frame_setup_time_cpu\000", 1740695150)
		methodRenderingServer[444] = gdnative.MethodOf("RenderingServer\000", "force_sync\000", 3218959716)
		methodRenderingServer[445] = gdnative.MethodOf("RenderingServer\000", "force_draw\000", 899045543)
		methodRenderingServer[446] = gdnative.MethodOf("RenderingServer\000", "get_rendering_device\000", 1405107940)
		methodRenderingServer[447] = gdnative.MethodOf("RenderingServer\000", "create_local_rendering_device\000", 1405107940)
		methodResource[0] = gdnative.MethodOf("Resource\000", "set_path\000", 83702148)
		methodResource[1] = gdnative.MethodOf("Resource\000", "take_over_path\000", 83702148)
		methodResource[2] = gdnative.MethodOf("Resource\000", "get_path\000", 201670096)
		methodResource[3] = gdnative.MethodOf("Resource\000", "set_name\000", 83702148)
		methodResource[4] = gdnative.MethodOf("Resource\000", "get_name\000", 201670096)
		methodResource[5] = gdnative.MethodOf("Resource\000", "get_rid\000", 2944877500)
		methodResource[6] = gdnative.MethodOf("Resource\000", "set_local_to_scene\000", 2586408642)
		methodResource[7] = gdnative.MethodOf("Resource\000", "is_local_to_scene\000", 36873697)
		methodResource[8] = gdnative.MethodOf("Resource\000", "get_local_scene\000", 3160264692)
		methodResource[9] = gdnative.MethodOf("Resource\000", "setup_local_to_scene\000", 3218959716)
		methodResource[10] = gdnative.MethodOf("Resource\000", "emit_changed\000", 3218959716)
		methodResource[11] = gdnative.MethodOf("Resource\000", "duplicate\000", 482882304)
		methodResourceLoader[0] = gdnative.MethodOf("ResourceLoader\000", "load_threaded_request\000", 1939848623)
		methodResourceLoader[1] = gdnative.MethodOf("ResourceLoader\000", "load_threaded_get_status\000", 3931021148)
		methodResourceLoader[2] = gdnative.MethodOf("ResourceLoader\000", "load_threaded_get\000", 1748875256)
		methodResourceLoader[3] = gdnative.MethodOf("ResourceLoader\000", "load\000", 2622212233)
		methodResourceLoader[4] = gdnative.MethodOf("ResourceLoader\000", "get_recognized_extensions_for_type\000", 3538744774)
		methodResourceLoader[5] = gdnative.MethodOf("ResourceLoader\000", "add_resource_format_loader\000", 2896595483)
		methodResourceLoader[6] = gdnative.MethodOf("ResourceLoader\000", "remove_resource_format_loader\000", 405397102)
		methodResourceLoader[7] = gdnative.MethodOf("ResourceLoader\000", "set_abort_on_missing_resources\000", 2586408642)
		methodResourceLoader[8] = gdnative.MethodOf("ResourceLoader\000", "get_dependencies\000", 3538744774)
		methodResourceLoader[9] = gdnative.MethodOf("ResourceLoader\000", "has_cached\000", 2323990056)
		methodResourceLoader[10] = gdnative.MethodOf("ResourceLoader\000", "exists\000", 2220807150)
		methodResourceLoader[11] = gdnative.MethodOf("ResourceLoader\000", "get_resource_uid\000", 1597066294)
		methodResourcePreloader[0] = gdnative.MethodOf("ResourcePreloader\000", "add_resource\000", 1168801743)
		methodResourcePreloader[1] = gdnative.MethodOf("ResourcePreloader\000", "remove_resource\000", 3304788590)
		methodResourcePreloader[2] = gdnative.MethodOf("ResourcePreloader\000", "rename_resource\000", 3740211285)
		methodResourcePreloader[3] = gdnative.MethodOf("ResourcePreloader\000", "has_resource\000", 2619796661)
		methodResourcePreloader[4] = gdnative.MethodOf("ResourcePreloader\000", "get_resource\000", 3742749261)
		methodResourcePreloader[5] = gdnative.MethodOf("ResourcePreloader\000", "get_resource_list\000", 1139954409)
		methodResourceSaver[0] = gdnative.MethodOf("ResourceSaver\000", "save\000", 2303056517)
		methodResourceSaver[1] = gdnative.MethodOf("ResourceSaver\000", "get_recognized_extensions\000", 4223597960)
		methodResourceSaver[2] = gdnative.MethodOf("ResourceSaver\000", "add_resource_format_saver\000", 362894272)
		methodResourceSaver[3] = gdnative.MethodOf("ResourceSaver\000", "remove_resource_format_saver\000", 3373026878)
		methodResourceUID[0] = gdnative.MethodOf("ResourceUID\000", "id_to_text\000", 844755477)
		methodResourceUID[1] = gdnative.MethodOf("ResourceUID\000", "text_to_id\000", 1321353865)
		methodResourceUID[2] = gdnative.MethodOf("ResourceUID\000", "create_id\000", 2455072627)
		methodResourceUID[3] = gdnative.MethodOf("ResourceUID\000", "has_id\000", 1116898809)
		methodResourceUID[4] = gdnative.MethodOf("ResourceUID\000", "add_id\000", 501894301)
		methodResourceUID[5] = gdnative.MethodOf("ResourceUID\000", "set_id\000", 501894301)
		methodResourceUID[6] = gdnative.MethodOf("ResourceUID\000", "get_id_path\000", 844755477)
		methodResourceUID[7] = gdnative.MethodOf("ResourceUID\000", "remove_id\000", 1286410249)
		methodRibbonTrailMesh[0] = gdnative.MethodOf("RibbonTrailMesh\000", "set_size\000", 373806689)
		methodRibbonTrailMesh[1] = gdnative.MethodOf("RibbonTrailMesh\000", "get_size\000", 1740695150)
		methodRibbonTrailMesh[2] = gdnative.MethodOf("RibbonTrailMesh\000", "set_sections\000", 1286410249)
		methodRibbonTrailMesh[3] = gdnative.MethodOf("RibbonTrailMesh\000", "get_sections\000", 3905245786)
		methodRibbonTrailMesh[4] = gdnative.MethodOf("RibbonTrailMesh\000", "set_section_length\000", 373806689)
		methodRibbonTrailMesh[5] = gdnative.MethodOf("RibbonTrailMesh\000", "get_section_length\000", 1740695150)
		methodRibbonTrailMesh[6] = gdnative.MethodOf("RibbonTrailMesh\000", "set_section_segments\000", 1286410249)
		methodRibbonTrailMesh[7] = gdnative.MethodOf("RibbonTrailMesh\000", "get_section_segments\000", 3905245786)
		methodRibbonTrailMesh[8] = gdnative.MethodOf("RibbonTrailMesh\000", "set_curve\000", 270443179)
		methodRibbonTrailMesh[9] = gdnative.MethodOf("RibbonTrailMesh\000", "get_curve\000", 2460114913)
		methodRibbonTrailMesh[10] = gdnative.MethodOf("RibbonTrailMesh\000", "set_shape\000", 1684440262)
		methodRibbonTrailMesh[11] = gdnative.MethodOf("RibbonTrailMesh\000", "get_shape\000", 1317484155)
		methodRichTextLabel[0] = gdnative.MethodOf("RichTextLabel\000", "get_parsed_text\000", 201670096)
		methodRichTextLabel[1] = gdnative.MethodOf("RichTextLabel\000", "add_text\000", 83702148)
		methodRichTextLabel[2] = gdnative.MethodOf("RichTextLabel\000", "set_text\000", 83702148)
		methodRichTextLabel[3] = gdnative.MethodOf("RichTextLabel\000", "add_image\000", 369227336)
		methodRichTextLabel[4] = gdnative.MethodOf("RichTextLabel\000", "newline\000", 3218959716)
		methodRichTextLabel[5] = gdnative.MethodOf("RichTextLabel\000", "remove_line\000", 3067735520)
		methodRichTextLabel[6] = gdnative.MethodOf("RichTextLabel\000", "push_font\000", 3014009009)
		methodRichTextLabel[7] = gdnative.MethodOf("RichTextLabel\000", "push_font_size\000", 1286410249)
		methodRichTextLabel[8] = gdnative.MethodOf("RichTextLabel\000", "push_normal\000", 3218959716)
		methodRichTextLabel[9] = gdnative.MethodOf("RichTextLabel\000", "push_bold\000", 3218959716)
		methodRichTextLabel[10] = gdnative.MethodOf("RichTextLabel\000", "push_bold_italics\000", 3218959716)
		methodRichTextLabel[11] = gdnative.MethodOf("RichTextLabel\000", "push_italics\000", 3218959716)
		methodRichTextLabel[12] = gdnative.MethodOf("RichTextLabel\000", "push_mono\000", 3218959716)
		methodRichTextLabel[13] = gdnative.MethodOf("RichTextLabel\000", "push_color\000", 2920490490)
		methodRichTextLabel[14] = gdnative.MethodOf("RichTextLabel\000", "push_outline_size\000", 1286410249)
		methodRichTextLabel[15] = gdnative.MethodOf("RichTextLabel\000", "push_outline_color\000", 2920490490)
		methodRichTextLabel[16] = gdnative.MethodOf("RichTextLabel\000", "push_paragraph\000", 1037160898)
		methodRichTextLabel[17] = gdnative.MethodOf("RichTextLabel\000", "push_indent\000", 1286410249)
		methodRichTextLabel[18] = gdnative.MethodOf("RichTextLabel\000", "push_list\000", 2241060727)
		methodRichTextLabel[19] = gdnative.MethodOf("RichTextLabel\000", "push_meta\000", 1114965689)
		methodRichTextLabel[20] = gdnative.MethodOf("RichTextLabel\000", "push_hint\000", 83702148)
		methodRichTextLabel[21] = gdnative.MethodOf("RichTextLabel\000", "push_underline\000", 3218959716)
		methodRichTextLabel[22] = gdnative.MethodOf("RichTextLabel\000", "push_strikethrough\000", 3218959716)
		methodRichTextLabel[23] = gdnative.MethodOf("RichTextLabel\000", "push_table\000", 740069725)
		methodRichTextLabel[24] = gdnative.MethodOf("RichTextLabel\000", "push_dropcap\000", 311501835)
		methodRichTextLabel[25] = gdnative.MethodOf("RichTextLabel\000", "set_table_column_expand\000", 4258957458)
		methodRichTextLabel[26] = gdnative.MethodOf("RichTextLabel\000", "set_cell_row_background_color\000", 3465483165)
		methodRichTextLabel[27] = gdnative.MethodOf("RichTextLabel\000", "set_cell_border_color\000", 2920490490)
		methodRichTextLabel[28] = gdnative.MethodOf("RichTextLabel\000", "set_cell_size_override\000", 3108078480)
		methodRichTextLabel[29] = gdnative.MethodOf("RichTextLabel\000", "set_cell_padding\000", 2046264180)
		methodRichTextLabel[30] = gdnative.MethodOf("RichTextLabel\000", "push_cell\000", 3218959716)
		methodRichTextLabel[31] = gdnative.MethodOf("RichTextLabel\000", "push_fgcolor\000", 2920490490)
		methodRichTextLabel[32] = gdnative.MethodOf("RichTextLabel\000", "push_bgcolor\000", 2920490490)
		methodRichTextLabel[33] = gdnative.MethodOf("RichTextLabel\000", "pop\000", 3218959716)
		methodRichTextLabel[34] = gdnative.MethodOf("RichTextLabel\000", "clear\000", 3218959716)
		methodRichTextLabel[35] = gdnative.MethodOf("RichTextLabel\000", "set_structured_text_bidi_override\000", 55961453)
		methodRichTextLabel[36] = gdnative.MethodOf("RichTextLabel\000", "get_structured_text_bidi_override\000", 3385126229)
		methodRichTextLabel[37] = gdnative.MethodOf("RichTextLabel\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodRichTextLabel[38] = gdnative.MethodOf("RichTextLabel\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodRichTextLabel[39] = gdnative.MethodOf("RichTextLabel\000", "set_text_direction\000", 119160795)
		methodRichTextLabel[40] = gdnative.MethodOf("RichTextLabel\000", "get_text_direction\000", 797257663)
		methodRichTextLabel[41] = gdnative.MethodOf("RichTextLabel\000", "set_language\000", 83702148)
		methodRichTextLabel[42] = gdnative.MethodOf("RichTextLabel\000", "get_language\000", 201670096)
		methodRichTextLabel[43] = gdnative.MethodOf("RichTextLabel\000", "set_autowrap_mode\000", 3289138044)
		methodRichTextLabel[44] = gdnative.MethodOf("RichTextLabel\000", "get_autowrap_mode\000", 1549071663)
		methodRichTextLabel[45] = gdnative.MethodOf("RichTextLabel\000", "set_meta_underline\000", 2586408642)
		methodRichTextLabel[46] = gdnative.MethodOf("RichTextLabel\000", "is_meta_underlined\000", 36873697)
		methodRichTextLabel[47] = gdnative.MethodOf("RichTextLabel\000", "set_hint_underline\000", 2586408642)
		methodRichTextLabel[48] = gdnative.MethodOf("RichTextLabel\000", "is_hint_underlined\000", 36873697)
		methodRichTextLabel[49] = gdnative.MethodOf("RichTextLabel\000", "set_override_selected_font_color\000", 2586408642)
		methodRichTextLabel[50] = gdnative.MethodOf("RichTextLabel\000", "is_overriding_selected_font_color\000", 36873697)
		methodRichTextLabel[51] = gdnative.MethodOf("RichTextLabel\000", "set_scroll_active\000", 2586408642)
		methodRichTextLabel[52] = gdnative.MethodOf("RichTextLabel\000", "is_scroll_active\000", 36873697)
		methodRichTextLabel[53] = gdnative.MethodOf("RichTextLabel\000", "set_scroll_follow\000", 2586408642)
		methodRichTextLabel[54] = gdnative.MethodOf("RichTextLabel\000", "is_scroll_following\000", 36873697)
		methodRichTextLabel[55] = gdnative.MethodOf("RichTextLabel\000", "get_v_scroll_bar\000", 2630340773)
		methodRichTextLabel[56] = gdnative.MethodOf("RichTextLabel\000", "scroll_to_line\000", 1286410249)
		methodRichTextLabel[57] = gdnative.MethodOf("RichTextLabel\000", "scroll_to_paragraph\000", 1286410249)
		methodRichTextLabel[58] = gdnative.MethodOf("RichTextLabel\000", "set_tab_size\000", 1286410249)
		methodRichTextLabel[59] = gdnative.MethodOf("RichTextLabel\000", "get_tab_size\000", 3905245786)
		methodRichTextLabel[60] = gdnative.MethodOf("RichTextLabel\000", "set_fit_content_height\000", 2586408642)
		methodRichTextLabel[61] = gdnative.MethodOf("RichTextLabel\000", "is_fit_content_height_enabled\000", 36873697)
		methodRichTextLabel[62] = gdnative.MethodOf("RichTextLabel\000", "set_selection_enabled\000", 2586408642)
		methodRichTextLabel[63] = gdnative.MethodOf("RichTextLabel\000", "is_selection_enabled\000", 36873697)
		methodRichTextLabel[64] = gdnative.MethodOf("RichTextLabel\000", "set_context_menu_enabled\000", 2586408642)
		methodRichTextLabel[65] = gdnative.MethodOf("RichTextLabel\000", "is_context_menu_enabled\000", 36873697)
		methodRichTextLabel[66] = gdnative.MethodOf("RichTextLabel\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodRichTextLabel[67] = gdnative.MethodOf("RichTextLabel\000", "is_shortcut_keys_enabled\000", 36873697)
		methodRichTextLabel[68] = gdnative.MethodOf("RichTextLabel\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodRichTextLabel[69] = gdnative.MethodOf("RichTextLabel\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodRichTextLabel[70] = gdnative.MethodOf("RichTextLabel\000", "get_selection_from\000", 3905245786)
		methodRichTextLabel[71] = gdnative.MethodOf("RichTextLabel\000", "get_selection_to\000", 3905245786)
		methodRichTextLabel[72] = gdnative.MethodOf("RichTextLabel\000", "select_all\000", 3218959716)
		methodRichTextLabel[73] = gdnative.MethodOf("RichTextLabel\000", "get_selected_text\000", 201670096)
		methodRichTextLabel[74] = gdnative.MethodOf("RichTextLabel\000", "deselect\000", 3218959716)
		methodRichTextLabel[75] = gdnative.MethodOf("RichTextLabel\000", "parse_bbcode\000", 83702148)
		methodRichTextLabel[76] = gdnative.MethodOf("RichTextLabel\000", "append_text\000", 83702148)
		methodRichTextLabel[77] = gdnative.MethodOf("RichTextLabel\000", "get_text\000", 201670096)
		methodRichTextLabel[78] = gdnative.MethodOf("RichTextLabel\000", "is_ready\000", 36873697)
		methodRichTextLabel[79] = gdnative.MethodOf("RichTextLabel\000", "set_threaded\000", 2586408642)
		methodRichTextLabel[80] = gdnative.MethodOf("RichTextLabel\000", "is_threaded\000", 36873697)
		methodRichTextLabel[81] = gdnative.MethodOf("RichTextLabel\000", "set_progress_bar_delay\000", 1286410249)
		methodRichTextLabel[82] = gdnative.MethodOf("RichTextLabel\000", "get_progress_bar_delay\000", 3905245786)
		methodRichTextLabel[83] = gdnative.MethodOf("RichTextLabel\000", "set_visible_characters\000", 1286410249)
		methodRichTextLabel[84] = gdnative.MethodOf("RichTextLabel\000", "get_visible_characters\000", 3905245786)
		methodRichTextLabel[85] = gdnative.MethodOf("RichTextLabel\000", "get_visible_characters_behavior\000", 258789322)
		methodRichTextLabel[86] = gdnative.MethodOf("RichTextLabel\000", "set_visible_characters_behavior\000", 3383839701)
		methodRichTextLabel[87] = gdnative.MethodOf("RichTextLabel\000", "set_percent_visible\000", 373806689)
		methodRichTextLabel[88] = gdnative.MethodOf("RichTextLabel\000", "get_percent_visible\000", 1740695150)
		methodRichTextLabel[89] = gdnative.MethodOf("RichTextLabel\000", "get_character_line\000", 3744713108)
		methodRichTextLabel[90] = gdnative.MethodOf("RichTextLabel\000", "get_character_paragraph\000", 3744713108)
		methodRichTextLabel[91] = gdnative.MethodOf("RichTextLabel\000", "get_total_character_count\000", 3905245786)
		methodRichTextLabel[92] = gdnative.MethodOf("RichTextLabel\000", "set_use_bbcode\000", 2586408642)
		methodRichTextLabel[93] = gdnative.MethodOf("RichTextLabel\000", "is_using_bbcode\000", 36873697)
		methodRichTextLabel[94] = gdnative.MethodOf("RichTextLabel\000", "get_line_count\000", 3905245786)
		methodRichTextLabel[95] = gdnative.MethodOf("RichTextLabel\000", "get_visible_line_count\000", 3905245786)
		methodRichTextLabel[96] = gdnative.MethodOf("RichTextLabel\000", "get_paragraph_count\000", 3905245786)
		methodRichTextLabel[97] = gdnative.MethodOf("RichTextLabel\000", "get_visible_paragraph_count\000", 3905245786)
		methodRichTextLabel[98] = gdnative.MethodOf("RichTextLabel\000", "get_content_height\000", 3905245786)
		methodRichTextLabel[99] = gdnative.MethodOf("RichTextLabel\000", "get_content_width\000", 3905245786)
		methodRichTextLabel[100] = gdnative.MethodOf("RichTextLabel\000", "get_line_offset\000", 4025615559)
		methodRichTextLabel[101] = gdnative.MethodOf("RichTextLabel\000", "get_paragraph_offset\000", 4025615559)
		methodRichTextLabel[102] = gdnative.MethodOf("RichTextLabel\000", "parse_expressions_for_values\000", 1522900837)
		methodRichTextLabel[103] = gdnative.MethodOf("RichTextLabel\000", "set_effects\000", 381264803)
		methodRichTextLabel[104] = gdnative.MethodOf("RichTextLabel\000", "get_effects\000", 2915620761)
		methodRichTextLabel[105] = gdnative.MethodOf("RichTextLabel\000", "install_effect\000", 1114965689)
		methodRichTextLabel[106] = gdnative.MethodOf("RichTextLabel\000", "get_menu\000", 229722558)
		methodRichTextLabel[107] = gdnative.MethodOf("RichTextLabel\000", "is_menu_visible\000", 36873697)
		methodRigidDynamicBody2D[0] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_mass\000", 373806689)
		methodRigidDynamicBody2D[1] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_mass\000", 1740695150)
		methodRigidDynamicBody2D[2] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_inertia\000", 1740695150)
		methodRigidDynamicBody2D[3] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_inertia\000", 373806689)
		methodRigidDynamicBody2D[4] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_center_of_mass_mode\000", 3452825391)
		methodRigidDynamicBody2D[5] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_center_of_mass_mode\000", 1339826430)
		methodRigidDynamicBody2D[6] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_center_of_mass\000", 743155724)
		methodRigidDynamicBody2D[7] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_center_of_mass\000", 3341600327)
		methodRigidDynamicBody2D[8] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_physics_material_override\000", 1784508650)
		methodRigidDynamicBody2D[9] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_physics_material_override\000", 2521850424)
		methodRigidDynamicBody2D[10] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_gravity_scale\000", 373806689)
		methodRigidDynamicBody2D[11] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_gravity_scale\000", 1740695150)
		methodRigidDynamicBody2D[12] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_linear_damp_mode\000", 511720019)
		methodRigidDynamicBody2D[13] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_linear_damp_mode\000", 1421279436)
		methodRigidDynamicBody2D[14] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_angular_damp_mode\000", 511720019)
		methodRigidDynamicBody2D[15] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_angular_damp_mode\000", 1421279436)
		methodRigidDynamicBody2D[16] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_linear_damp\000", 373806689)
		methodRigidDynamicBody2D[17] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_linear_damp\000", 1740695150)
		methodRigidDynamicBody2D[18] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_angular_damp\000", 373806689)
		methodRigidDynamicBody2D[19] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_angular_damp\000", 1740695150)
		methodRigidDynamicBody2D[20] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_linear_velocity\000", 743155724)
		methodRigidDynamicBody2D[21] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_linear_velocity\000", 3341600327)
		methodRigidDynamicBody2D[22] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_angular_velocity\000", 373806689)
		methodRigidDynamicBody2D[23] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_angular_velocity\000", 1740695150)
		methodRigidDynamicBody2D[24] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_max_contacts_reported\000", 1286410249)
		methodRigidDynamicBody2D[25] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_max_contacts_reported\000", 3905245786)
		methodRigidDynamicBody2D[26] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_use_custom_integrator\000", 2586408642)
		methodRigidDynamicBody2D[27] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_using_custom_integrator\000", 2240911060)
		methodRigidDynamicBody2D[28] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_contact_monitor\000", 2586408642)
		methodRigidDynamicBody2D[29] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_contact_monitor_enabled\000", 36873697)
		methodRigidDynamicBody2D[30] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_continuous_collision_detection_mode\000", 2718300349)
		methodRigidDynamicBody2D[31] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_continuous_collision_detection_mode\000", 92885946)
		methodRigidDynamicBody2D[32] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_axis_velocity\000", 743155724)
		methodRigidDynamicBody2D[33] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_central_impulse\000", 3862383994)
		methodRigidDynamicBody2D[34] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_impulse\000", 496058220)
		methodRigidDynamicBody2D[35] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_torque_impulse\000", 373806689)
		methodRigidDynamicBody2D[36] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_central_force\000", 743155724)
		methodRigidDynamicBody2D[37] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_force\000", 496058220)
		methodRigidDynamicBody2D[38] = gdnative.MethodOf("RigidDynamicBody2D\000", "apply_torque\000", 373806689)
		methodRigidDynamicBody2D[39] = gdnative.MethodOf("RigidDynamicBody2D\000", "add_constant_central_force\000", 743155724)
		methodRigidDynamicBody2D[40] = gdnative.MethodOf("RigidDynamicBody2D\000", "add_constant_force\000", 496058220)
		methodRigidDynamicBody2D[41] = gdnative.MethodOf("RigidDynamicBody2D\000", "add_constant_torque\000", 373806689)
		methodRigidDynamicBody2D[42] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_constant_force\000", 743155724)
		methodRigidDynamicBody2D[43] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_constant_force\000", 3341600327)
		methodRigidDynamicBody2D[44] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_constant_torque\000", 373806689)
		methodRigidDynamicBody2D[45] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_constant_torque\000", 1740695150)
		methodRigidDynamicBody2D[46] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_sleeping\000", 2586408642)
		methodRigidDynamicBody2D[47] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_sleeping\000", 36873697)
		methodRigidDynamicBody2D[48] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_can_sleep\000", 2586408642)
		methodRigidDynamicBody2D[49] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_able_to_sleep\000", 36873697)
		methodRigidDynamicBody2D[50] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_lock_rotation_enabled\000", 2586408642)
		methodRigidDynamicBody2D[51] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_lock_rotation_enabled\000", 36873697)
		methodRigidDynamicBody2D[52] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_freeze_enabled\000", 2586408642)
		methodRigidDynamicBody2D[53] = gdnative.MethodOf("RigidDynamicBody2D\000", "is_freeze_enabled\000", 36873697)
		methodRigidDynamicBody2D[54] = gdnative.MethodOf("RigidDynamicBody2D\000", "set_freeze_mode\000", 2450751375)
		methodRigidDynamicBody2D[55] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_freeze_mode\000", 870555613)
		methodRigidDynamicBody2D[56] = gdnative.MethodOf("RigidDynamicBody2D\000", "get_colliding_bodies\000", 3995934104)
		methodRigidDynamicBody3D[0] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_mass\000", 373806689)
		methodRigidDynamicBody3D[1] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_mass\000", 1740695150)
		methodRigidDynamicBody3D[2] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_inertia\000", 3460891852)
		methodRigidDynamicBody3D[3] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_inertia\000", 3360562783)
		methodRigidDynamicBody3D[4] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_center_of_mass_mode\000", 1631935582)
		methodRigidDynamicBody3D[5] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_center_of_mass_mode\000", 2909173950)
		methodRigidDynamicBody3D[6] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_center_of_mass\000", 3460891852)
		methodRigidDynamicBody3D[7] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_center_of_mass\000", 3360562783)
		methodRigidDynamicBody3D[8] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_physics_material_override\000", 1784508650)
		methodRigidDynamicBody3D[9] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_physics_material_override\000", 2521850424)
		methodRigidDynamicBody3D[10] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_linear_velocity\000", 3460891852)
		methodRigidDynamicBody3D[11] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_linear_velocity\000", 3360562783)
		methodRigidDynamicBody3D[12] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_angular_velocity\000", 3460891852)
		methodRigidDynamicBody3D[13] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_angular_velocity\000", 3360562783)
		methodRigidDynamicBody3D[14] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_inverse_inertia_tensor\000", 2716978435)
		methodRigidDynamicBody3D[15] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_gravity_scale\000", 373806689)
		methodRigidDynamicBody3D[16] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_gravity_scale\000", 1740695150)
		methodRigidDynamicBody3D[17] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_linear_damp_mode\000", 47243782)
		methodRigidDynamicBody3D[18] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_linear_damp_mode\000", 2950994489)
		methodRigidDynamicBody3D[19] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_angular_damp_mode\000", 47243782)
		methodRigidDynamicBody3D[20] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_angular_damp_mode\000", 2950994489)
		methodRigidDynamicBody3D[21] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_linear_damp\000", 373806689)
		methodRigidDynamicBody3D[22] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_linear_damp\000", 1740695150)
		methodRigidDynamicBody3D[23] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_angular_damp\000", 373806689)
		methodRigidDynamicBody3D[24] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_angular_damp\000", 1740695150)
		methodRigidDynamicBody3D[25] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_max_contacts_reported\000", 1286410249)
		methodRigidDynamicBody3D[26] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_max_contacts_reported\000", 3905245786)
		methodRigidDynamicBody3D[27] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_use_custom_integrator\000", 2586408642)
		methodRigidDynamicBody3D[28] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_using_custom_integrator\000", 2240911060)
		methodRigidDynamicBody3D[29] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_contact_monitor\000", 2586408642)
		methodRigidDynamicBody3D[30] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_contact_monitor_enabled\000", 36873697)
		methodRigidDynamicBody3D[31] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_use_continuous_collision_detection\000", 2586408642)
		methodRigidDynamicBody3D[32] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_using_continuous_collision_detection\000", 36873697)
		methodRigidDynamicBody3D[33] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_axis_velocity\000", 3460891852)
		methodRigidDynamicBody3D[34] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_central_impulse\000", 3460891852)
		methodRigidDynamicBody3D[35] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_impulse\000", 1002852006)
		methodRigidDynamicBody3D[36] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_torque_impulse\000", 3460891852)
		methodRigidDynamicBody3D[37] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_central_force\000", 3460891852)
		methodRigidDynamicBody3D[38] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_force\000", 1002852006)
		methodRigidDynamicBody3D[39] = gdnative.MethodOf("RigidDynamicBody3D\000", "apply_torque\000", 3460891852)
		methodRigidDynamicBody3D[40] = gdnative.MethodOf("RigidDynamicBody3D\000", "add_constant_central_force\000", 3460891852)
		methodRigidDynamicBody3D[41] = gdnative.MethodOf("RigidDynamicBody3D\000", "add_constant_force\000", 1002852006)
		methodRigidDynamicBody3D[42] = gdnative.MethodOf("RigidDynamicBody3D\000", "add_constant_torque\000", 3460891852)
		methodRigidDynamicBody3D[43] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_constant_force\000", 3460891852)
		methodRigidDynamicBody3D[44] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_constant_force\000", 3360562783)
		methodRigidDynamicBody3D[45] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_constant_torque\000", 3460891852)
		methodRigidDynamicBody3D[46] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_constant_torque\000", 3360562783)
		methodRigidDynamicBody3D[47] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_sleeping\000", 2586408642)
		methodRigidDynamicBody3D[48] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_sleeping\000", 36873697)
		methodRigidDynamicBody3D[49] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_can_sleep\000", 2586408642)
		methodRigidDynamicBody3D[50] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_able_to_sleep\000", 36873697)
		methodRigidDynamicBody3D[51] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_lock_rotation_enabled\000", 2586408642)
		methodRigidDynamicBody3D[52] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_lock_rotation_enabled\000", 36873697)
		methodRigidDynamicBody3D[53] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_freeze_enabled\000", 2586408642)
		methodRigidDynamicBody3D[54] = gdnative.MethodOf("RigidDynamicBody3D\000", "is_freeze_enabled\000", 36873697)
		methodRigidDynamicBody3D[55] = gdnative.MethodOf("RigidDynamicBody3D\000", "set_freeze_mode\000", 1256278317)
		methodRigidDynamicBody3D[56] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_freeze_mode\000", 497157993)
		methodRigidDynamicBody3D[57] = gdnative.MethodOf("RigidDynamicBody3D\000", "get_colliding_bodies\000", 3995934104)
		methodRootMotionView[0] = gdnative.MethodOf("RootMotionView\000", "set_animation_path\000", 1348162250)
		methodRootMotionView[1] = gdnative.MethodOf("RootMotionView\000", "get_animation_path\000", 4075236667)
		methodRootMotionView[2] = gdnative.MethodOf("RootMotionView\000", "set_color\000", 2920490490)
		methodRootMotionView[3] = gdnative.MethodOf("RootMotionView\000", "get_color\000", 3444240500)
		methodRootMotionView[4] = gdnative.MethodOf("RootMotionView\000", "set_cell_size\000", 373806689)
		methodRootMotionView[5] = gdnative.MethodOf("RootMotionView\000", "get_cell_size\000", 1740695150)
		methodRootMotionView[6] = gdnative.MethodOf("RootMotionView\000", "set_radius\000", 373806689)
		methodRootMotionView[7] = gdnative.MethodOf("RootMotionView\000", "get_radius\000", 1740695150)
		methodRootMotionView[8] = gdnative.MethodOf("RootMotionView\000", "set_zero_y\000", 2586408642)
		methodRootMotionView[9] = gdnative.MethodOf("RootMotionView\000", "get_zero_y\000", 36873697)
		methodSceneMultiplayer[0] = gdnative.MethodOf("SceneMultiplayer\000", "set_root_path\000", 1348162250)
		methodSceneMultiplayer[1] = gdnative.MethodOf("SceneMultiplayer\000", "get_root_path\000", 4075236667)
		methodSceneMultiplayer[2] = gdnative.MethodOf("SceneMultiplayer\000", "clear\000", 3218959716)
		methodSceneMultiplayer[3] = gdnative.MethodOf("SceneMultiplayer\000", "set_refuse_new_connections\000", 2586408642)
		methodSceneMultiplayer[4] = gdnative.MethodOf("SceneMultiplayer\000", "is_refusing_new_connections\000", 36873697)
		methodSceneMultiplayer[5] = gdnative.MethodOf("SceneMultiplayer\000", "set_allow_object_decoding\000", 2586408642)
		methodSceneMultiplayer[6] = gdnative.MethodOf("SceneMultiplayer\000", "is_object_decoding_allowed\000", 36873697)
		methodSceneMultiplayer[7] = gdnative.MethodOf("SceneMultiplayer\000", "send_bytes\000", 2742700601)
		methodSceneReplicationConfig[0] = gdnative.MethodOf("SceneReplicationConfig\000", "get_properties\000", 3995934104)
		methodSceneReplicationConfig[1] = gdnative.MethodOf("SceneReplicationConfig\000", "add_property\000", 3818401521)
		methodSceneReplicationConfig[2] = gdnative.MethodOf("SceneReplicationConfig\000", "has_property\000", 861721659)
		methodSceneReplicationConfig[3] = gdnative.MethodOf("SceneReplicationConfig\000", "remove_property\000", 1348162250)
		methodSceneReplicationConfig[4] = gdnative.MethodOf("SceneReplicationConfig\000", "property_get_index\000", 1382022557)
		methodSceneReplicationConfig[5] = gdnative.MethodOf("SceneReplicationConfig\000", "property_get_spawn\000", 3456846888)
		methodSceneReplicationConfig[6] = gdnative.MethodOf("SceneReplicationConfig\000", "property_set_spawn\000", 3868023870)
		methodSceneReplicationConfig[7] = gdnative.MethodOf("SceneReplicationConfig\000", "property_get_sync\000", 3456846888)
		methodSceneReplicationConfig[8] = gdnative.MethodOf("SceneReplicationConfig\000", "property_set_sync\000", 3868023870)
		methodSceneState[0] = gdnative.MethodOf("SceneState\000", "get_node_count\000", 3905245786)
		methodSceneState[1] = gdnative.MethodOf("SceneState\000", "get_node_type\000", 659327637)
		methodSceneState[2] = gdnative.MethodOf("SceneState\000", "get_node_name\000", 659327637)
		methodSceneState[3] = gdnative.MethodOf("SceneState\000", "get_node_path\000", 2272487792)
		methodSceneState[4] = gdnative.MethodOf("SceneState\000", "get_node_owner_path\000", 408788394)
		methodSceneState[5] = gdnative.MethodOf("SceneState\000", "is_node_instance_placeholder\000", 1116898809)
		methodSceneState[6] = gdnative.MethodOf("SceneState\000", "get_node_instance_placeholder\000", 844755477)
		methodSceneState[7] = gdnative.MethodOf("SceneState\000", "get_node_instance\000", 511017218)
		methodSceneState[8] = gdnative.MethodOf("SceneState\000", "get_node_groups\000", 647634434)
		methodSceneState[9] = gdnative.MethodOf("SceneState\000", "get_node_index\000", 923996154)
		methodSceneState[10] = gdnative.MethodOf("SceneState\000", "get_node_property_count\000", 923996154)
		methodSceneState[11] = gdnative.MethodOf("SceneState\000", "get_node_property_name\000", 351665558)
		methodSceneState[12] = gdnative.MethodOf("SceneState\000", "get_node_property_value\000", 678354945)
		methodSceneState[13] = gdnative.MethodOf("SceneState\000", "get_connection_count\000", 3905245786)
		methodSceneState[14] = gdnative.MethodOf("SceneState\000", "get_connection_source\000", 408788394)
		methodSceneState[15] = gdnative.MethodOf("SceneState\000", "get_connection_signal\000", 659327637)
		methodSceneState[16] = gdnative.MethodOf("SceneState\000", "get_connection_target\000", 408788394)
		methodSceneState[17] = gdnative.MethodOf("SceneState\000", "get_connection_method\000", 659327637)
		methodSceneState[18] = gdnative.MethodOf("SceneState\000", "get_connection_flags\000", 923996154)
		methodSceneState[19] = gdnative.MethodOf("SceneState\000", "get_connection_binds\000", 663333327)
		methodSceneState[20] = gdnative.MethodOf("SceneState\000", "get_connection_unbinds\000", 923996154)
		methodSceneTree[0] = gdnative.MethodOf("SceneTree\000", "get_root\000", 1757182445)
		methodSceneTree[1] = gdnative.MethodOf("SceneTree\000", "has_group\000", 2619796661)
		methodSceneTree[2] = gdnative.MethodOf("SceneTree\000", "is_auto_accept_quit\000", 36873697)
		methodSceneTree[3] = gdnative.MethodOf("SceneTree\000", "set_auto_accept_quit\000", 2586408642)
		methodSceneTree[4] = gdnative.MethodOf("SceneTree\000", "is_quit_on_go_back\000", 36873697)
		methodSceneTree[5] = gdnative.MethodOf("SceneTree\000", "set_quit_on_go_back\000", 2586408642)
		methodSceneTree[6] = gdnative.MethodOf("SceneTree\000", "set_debug_collisions_hint\000", 2586408642)
		methodSceneTree[7] = gdnative.MethodOf("SceneTree\000", "is_debugging_collisions_hint\000", 36873697)
		methodSceneTree[8] = gdnative.MethodOf("SceneTree\000", "set_debug_paths_hint\000", 2586408642)
		methodSceneTree[9] = gdnative.MethodOf("SceneTree\000", "is_debugging_paths_hint\000", 36873697)
		methodSceneTree[10] = gdnative.MethodOf("SceneTree\000", "set_debug_navigation_hint\000", 2586408642)
		methodSceneTree[11] = gdnative.MethodOf("SceneTree\000", "is_debugging_navigation_hint\000", 36873697)
		methodSceneTree[12] = gdnative.MethodOf("SceneTree\000", "set_edited_scene_root\000", 1078189570)
		methodSceneTree[13] = gdnative.MethodOf("SceneTree\000", "get_edited_scene_root\000", 3160264692)
		methodSceneTree[14] = gdnative.MethodOf("SceneTree\000", "set_pause\000", 2586408642)
		methodSceneTree[15] = gdnative.MethodOf("SceneTree\000", "is_paused\000", 36873697)
		methodSceneTree[16] = gdnative.MethodOf("SceneTree\000", "create_timer\000", 826575767)
		methodSceneTree[17] = gdnative.MethodOf("SceneTree\000", "create_tween\000", 3426978995)
		methodSceneTree[18] = gdnative.MethodOf("SceneTree\000", "get_processed_tweens\000", 2915620761)
		methodSceneTree[19] = gdnative.MethodOf("SceneTree\000", "get_node_count\000", 3905245786)
		methodSceneTree[20] = gdnative.MethodOf("SceneTree\000", "get_frame\000", 3905245786)
		methodSceneTree[21] = gdnative.MethodOf("SceneTree\000", "quit\000", 1995695955)
		methodSceneTree[22] = gdnative.MethodOf("SceneTree\000", "queue_delete\000", 3975164845)
		methodSceneTree[23] = gdnative.MethodOf("SceneTree\000", "call_group_flags\000", 1527739229)
		methodSceneTree[24] = gdnative.MethodOf("SceneTree\000", "notify_group_flags\000", 1245489420)
		methodSceneTree[25] = gdnative.MethodOf("SceneTree\000", "set_group_flags\000", 3497599527)
		methodSceneTree[26] = gdnative.MethodOf("SceneTree\000", "call_group\000", 1257962832)
		methodSceneTree[27] = gdnative.MethodOf("SceneTree\000", "notify_group\000", 2415702435)
		methodSceneTree[28] = gdnative.MethodOf("SceneTree\000", "set_group\000", 1279312029)
		methodSceneTree[29] = gdnative.MethodOf("SceneTree\000", "get_nodes_in_group\000", 689397652)
		methodSceneTree[30] = gdnative.MethodOf("SceneTree\000", "get_first_node_in_group\000", 4071044623)
		methodSceneTree[31] = gdnative.MethodOf("SceneTree\000", "set_current_scene\000", 1078189570)
		methodSceneTree[32] = gdnative.MethodOf("SceneTree\000", "get_current_scene\000", 3160264692)
		methodSceneTree[33] = gdnative.MethodOf("SceneTree\000", "change_scene\000", 166001499)
		methodSceneTree[34] = gdnative.MethodOf("SceneTree\000", "change_scene_to\000", 107349098)
		methodSceneTree[35] = gdnative.MethodOf("SceneTree\000", "reload_current_scene\000", 166280745)
		methodSceneTree[36] = gdnative.MethodOf("SceneTree\000", "set_multiplayer\000", 2385607013)
		methodSceneTree[37] = gdnative.MethodOf("SceneTree\000", "get_multiplayer\000", 3453401404)
		methodSceneTree[38] = gdnative.MethodOf("SceneTree\000", "set_multiplayer_poll_enabled\000", 2586408642)
		methodSceneTree[39] = gdnative.MethodOf("SceneTree\000", "is_multiplayer_poll_enabled\000", 36873697)
		methodSceneTreeTimer[0] = gdnative.MethodOf("SceneTreeTimer\000", "set_time_left\000", 373806689)
		methodSceneTreeTimer[1] = gdnative.MethodOf("SceneTreeTimer\000", "get_time_left\000", 1740695150)
		methodScript[0] = gdnative.MethodOf("Script\000", "can_instantiate\000", 36873697)
		methodScript[1] = gdnative.MethodOf("Script\000", "instance_has\000", 397768994)
		methodScript[2] = gdnative.MethodOf("Script\000", "has_source_code\000", 36873697)
		methodScript[3] = gdnative.MethodOf("Script\000", "get_source_code\000", 201670096)
		methodScript[4] = gdnative.MethodOf("Script\000", "set_source_code\000", 83702148)
		methodScript[5] = gdnative.MethodOf("Script\000", "reload\000", 1633102583)
		methodScript[6] = gdnative.MethodOf("Script\000", "get_base_script\000", 278624046)
		methodScript[7] = gdnative.MethodOf("Script\000", "get_instance_base_type\000", 2002593661)
		methodScript[8] = gdnative.MethodOf("Script\000", "has_script_signal\000", 2619796661)
		methodScript[9] = gdnative.MethodOf("Script\000", "get_script_property_list\000", 2915620761)
		methodScript[10] = gdnative.MethodOf("Script\000", "get_script_method_list\000", 2915620761)
		methodScript[11] = gdnative.MethodOf("Script\000", "get_script_signal_list\000", 2915620761)
		methodScript[12] = gdnative.MethodOf("Script\000", "get_script_constant_map\000", 2382534195)
		methodScript[13] = gdnative.MethodOf("Script\000", "get_property_default_value\000", 2138907829)
		methodScript[14] = gdnative.MethodOf("Script\000", "is_tool\000", 36873697)
		methodScriptCreateDialog[0] = gdnative.MethodOf("ScriptCreateDialog\000", "config\000", 4210001628)
		methodScriptEditor[0] = gdnative.MethodOf("ScriptEditor\000", "get_current_editor\000", 1906266726)
		methodScriptEditor[1] = gdnative.MethodOf("ScriptEditor\000", "get_open_script_editors\000", 3995934104)
		methodScriptEditor[2] = gdnative.MethodOf("ScriptEditor\000", "register_syntax_highlighter\000", 1092774468)
		methodScriptEditor[3] = gdnative.MethodOf("ScriptEditor\000", "unregister_syntax_highlighter\000", 1092774468)
		methodScriptEditor[4] = gdnative.MethodOf("ScriptEditor\000", "goto_line\000", 1286410249)
		methodScriptEditor[5] = gdnative.MethodOf("ScriptEditor\000", "get_current_script\000", 2146468882)
		methodScriptEditor[6] = gdnative.MethodOf("ScriptEditor\000", "get_open_scripts\000", 3995934104)
		methodScriptEditor[7] = gdnative.MethodOf("ScriptEditor\000", "open_script_create_dialog\000", 3186203200)
		methodScriptEditorBase[0] = gdnative.MethodOf("ScriptEditorBase\000", "get_base_editor\000", 2783021301)
		methodScriptEditorBase[1] = gdnative.MethodOf("ScriptEditorBase\000", "add_syntax_highlighter\000", 1092774468)
		methodScrollBar[0] = gdnative.MethodOf("ScrollBar\000", "set_custom_step\000", 373806689)
		methodScrollBar[1] = gdnative.MethodOf("ScrollBar\000", "get_custom_step\000", 1740695150)
		methodScrollContainer[0] = gdnative.MethodOf("ScrollContainer\000", "set_h_scroll\000", 1286410249)
		methodScrollContainer[1] = gdnative.MethodOf("ScrollContainer\000", "get_h_scroll\000", 3905245786)
		methodScrollContainer[2] = gdnative.MethodOf("ScrollContainer\000", "set_v_scroll\000", 1286410249)
		methodScrollContainer[3] = gdnative.MethodOf("ScrollContainer\000", "get_v_scroll\000", 3905245786)
		methodScrollContainer[4] = gdnative.MethodOf("ScrollContainer\000", "set_horizontal_scroll_mode\000", 2750506364)
		methodScrollContainer[5] = gdnative.MethodOf("ScrollContainer\000", "get_horizontal_scroll_mode\000", 3987985145)
		methodScrollContainer[6] = gdnative.MethodOf("ScrollContainer\000", "set_vertical_scroll_mode\000", 2750506364)
		methodScrollContainer[7] = gdnative.MethodOf("ScrollContainer\000", "get_vertical_scroll_mode\000", 3987985145)
		methodScrollContainer[8] = gdnative.MethodOf("ScrollContainer\000", "set_deadzone\000", 1286410249)
		methodScrollContainer[9] = gdnative.MethodOf("ScrollContainer\000", "get_deadzone\000", 3905245786)
		methodScrollContainer[10] = gdnative.MethodOf("ScrollContainer\000", "set_follow_focus\000", 2586408642)
		methodScrollContainer[11] = gdnative.MethodOf("ScrollContainer\000", "is_following_focus\000", 36873697)
		methodScrollContainer[12] = gdnative.MethodOf("ScrollContainer\000", "get_h_scroll_bar\000", 4004517983)
		methodScrollContainer[13] = gdnative.MethodOf("ScrollContainer\000", "get_v_scroll_bar\000", 2630340773)
		methodScrollContainer[14] = gdnative.MethodOf("ScrollContainer\000", "ensure_control_visible\000", 1496901182)
		methodSegmentShape2D[0] = gdnative.MethodOf("SegmentShape2D\000", "set_a\000", 743155724)
		methodSegmentShape2D[1] = gdnative.MethodOf("SegmentShape2D\000", "get_a\000", 3341600327)
		methodSegmentShape2D[2] = gdnative.MethodOf("SegmentShape2D\000", "set_b\000", 743155724)
		methodSegmentShape2D[3] = gdnative.MethodOf("SegmentShape2D\000", "get_b\000", 3341600327)
		methodSemaphore[0] = gdnative.MethodOf("Semaphore\000", "wait\000", 3218959716)
		methodSemaphore[1] = gdnative.MethodOf("Semaphore\000", "try_wait\000", 166280745)
		methodSemaphore[2] = gdnative.MethodOf("Semaphore\000", "post\000", 3218959716)
		methodSeparationRayShape2D[0] = gdnative.MethodOf("SeparationRayShape2D\000", "set_length\000", 373806689)
		methodSeparationRayShape2D[1] = gdnative.MethodOf("SeparationRayShape2D\000", "get_length\000", 1740695150)
		methodSeparationRayShape2D[2] = gdnative.MethodOf("SeparationRayShape2D\000", "set_slide_on_slope\000", 2586408642)
		methodSeparationRayShape2D[3] = gdnative.MethodOf("SeparationRayShape2D\000", "get_slide_on_slope\000", 36873697)
		methodSeparationRayShape3D[0] = gdnative.MethodOf("SeparationRayShape3D\000", "set_length\000", 373806689)
		methodSeparationRayShape3D[1] = gdnative.MethodOf("SeparationRayShape3D\000", "get_length\000", 1740695150)
		methodSeparationRayShape3D[2] = gdnative.MethodOf("SeparationRayShape3D\000", "set_slide_on_slope\000", 2586408642)
		methodSeparationRayShape3D[3] = gdnative.MethodOf("SeparationRayShape3D\000", "get_slide_on_slope\000", 36873697)
		methodShader[0] = gdnative.MethodOf("Shader\000", "get_mode\000", 3392948163)
		methodShader[1] = gdnative.MethodOf("Shader\000", "set_code\000", 83702148)
		methodShader[2] = gdnative.MethodOf("Shader\000", "get_code\000", 201670096)
		methodShader[3] = gdnative.MethodOf("Shader\000", "set_default_texture_param\000", 1628453603)
		methodShader[4] = gdnative.MethodOf("Shader\000", "get_default_texture_param\000", 3823812009)
		methodShader[5] = gdnative.MethodOf("Shader\000", "has_uniform\000", 2619796661)
		methodShaderInclude[0] = gdnative.MethodOf("ShaderInclude\000", "set_code\000", 83702148)
		methodShaderInclude[1] = gdnative.MethodOf("ShaderInclude\000", "get_code\000", 201670096)
		methodShaderMaterial[0] = gdnative.MethodOf("ShaderMaterial\000", "set_shader\000", 3341921675)
		methodShaderMaterial[1] = gdnative.MethodOf("ShaderMaterial\000", "get_shader\000", 2078273437)
		methodShaderMaterial[2] = gdnative.MethodOf("ShaderMaterial\000", "set_shader_uniform\000", 3776071444)
		methodShaderMaterial[3] = gdnative.MethodOf("ShaderMaterial\000", "get_shader_uniform\000", 2760726917)
		methodShape2D[0] = gdnative.MethodOf("Shape2D\000", "set_custom_solver_bias\000", 373806689)
		methodShape2D[1] = gdnative.MethodOf("Shape2D\000", "get_custom_solver_bias\000", 1740695150)
		methodShape2D[2] = gdnative.MethodOf("Shape2D\000", "collide\000", 3709843132)
		methodShape2D[3] = gdnative.MethodOf("Shape2D\000", "collide_with_motion\000", 2869556801)
		methodShape2D[4] = gdnative.MethodOf("Shape2D\000", "collide_and_get_contacts\000", 322365360)
		methodShape2D[5] = gdnative.MethodOf("Shape2D\000", "collide_with_motion_and_get_contacts\000", 1867376717)
		methodShape2D[6] = gdnative.MethodOf("Shape2D\000", "draw\000", 2948539648)
		methodShape3D[0] = gdnative.MethodOf("Shape3D\000", "set_custom_solver_bias\000", 373806689)
		methodShape3D[1] = gdnative.MethodOf("Shape3D\000", "get_custom_solver_bias\000", 1740695150)
		methodShape3D[2] = gdnative.MethodOf("Shape3D\000", "set_margin\000", 373806689)
		methodShape3D[3] = gdnative.MethodOf("Shape3D\000", "get_margin\000", 1740695150)
		methodShape3D[4] = gdnative.MethodOf("Shape3D\000", "get_debug_mesh\000", 1605880883)
		methodShapeCast2D[0] = gdnative.MethodOf("ShapeCast2D\000", "set_enabled\000", 2586408642)
		methodShapeCast2D[1] = gdnative.MethodOf("ShapeCast2D\000", "is_enabled\000", 36873697)
		methodShapeCast2D[2] = gdnative.MethodOf("ShapeCast2D\000", "set_shape\000", 771364740)
		methodShapeCast2D[3] = gdnative.MethodOf("ShapeCast2D\000", "get_shape\000", 522005891)
		methodShapeCast2D[4] = gdnative.MethodOf("ShapeCast2D\000", "set_target_position\000", 743155724)
		methodShapeCast2D[5] = gdnative.MethodOf("ShapeCast2D\000", "get_target_position\000", 3341600327)
		methodShapeCast2D[6] = gdnative.MethodOf("ShapeCast2D\000", "set_margin\000", 373806689)
		methodShapeCast2D[7] = gdnative.MethodOf("ShapeCast2D\000", "get_margin\000", 1740695150)
		methodShapeCast2D[8] = gdnative.MethodOf("ShapeCast2D\000", "set_max_results\000", 1286410249)
		methodShapeCast2D[9] = gdnative.MethodOf("ShapeCast2D\000", "get_max_results\000", 3905245786)
		methodShapeCast2D[10] = gdnative.MethodOf("ShapeCast2D\000", "is_colliding\000", 36873697)
		methodShapeCast2D[11] = gdnative.MethodOf("ShapeCast2D\000", "get_collision_count\000", 3905245786)
		methodShapeCast2D[12] = gdnative.MethodOf("ShapeCast2D\000", "force_shapecast_update\000", 3218959716)
		methodShapeCast2D[13] = gdnative.MethodOf("ShapeCast2D\000", "get_collider\000", 3332903315)
		methodShapeCast2D[14] = gdnative.MethodOf("ShapeCast2D\000", "get_collider_shape\000", 923996154)
		methodShapeCast2D[15] = gdnative.MethodOf("ShapeCast2D\000", "get_collision_point\000", 2299179447)
		methodShapeCast2D[16] = gdnative.MethodOf("ShapeCast2D\000", "get_collision_normal\000", 2299179447)
		methodShapeCast2D[17] = gdnative.MethodOf("ShapeCast2D\000", "get_closest_collision_safe_fraction\000", 1740695150)
		methodShapeCast2D[18] = gdnative.MethodOf("ShapeCast2D\000", "get_closest_collision_unsafe_fraction\000", 1740695150)
		methodShapeCast2D[19] = gdnative.MethodOf("ShapeCast2D\000", "add_exception_rid\000", 2722037293)
		methodShapeCast2D[20] = gdnative.MethodOf("ShapeCast2D\000", "add_exception\000", 3090941106)
		methodShapeCast2D[21] = gdnative.MethodOf("ShapeCast2D\000", "remove_exception_rid\000", 2722037293)
		methodShapeCast2D[22] = gdnative.MethodOf("ShapeCast2D\000", "remove_exception\000", 3090941106)
		methodShapeCast2D[23] = gdnative.MethodOf("ShapeCast2D\000", "clear_exceptions\000", 3218959716)
		methodShapeCast2D[24] = gdnative.MethodOf("ShapeCast2D\000", "set_collision_mask\000", 1286410249)
		methodShapeCast2D[25] = gdnative.MethodOf("ShapeCast2D\000", "get_collision_mask\000", 3905245786)
		methodShapeCast2D[26] = gdnative.MethodOf("ShapeCast2D\000", "set_collision_mask_value\000", 300928843)
		methodShapeCast2D[27] = gdnative.MethodOf("ShapeCast2D\000", "get_collision_mask_value\000", 1116898809)
		methodShapeCast2D[28] = gdnative.MethodOf("ShapeCast2D\000", "set_exclude_parent_body\000", 2586408642)
		methodShapeCast2D[29] = gdnative.MethodOf("ShapeCast2D\000", "get_exclude_parent_body\000", 36873697)
		methodShapeCast2D[30] = gdnative.MethodOf("ShapeCast2D\000", "set_collide_with_areas\000", 2586408642)
		methodShapeCast2D[31] = gdnative.MethodOf("ShapeCast2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodShapeCast2D[32] = gdnative.MethodOf("ShapeCast2D\000", "set_collide_with_bodies\000", 2586408642)
		methodShapeCast2D[33] = gdnative.MethodOf("ShapeCast2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodShapeCast3D[0] = gdnative.MethodOf("ShapeCast3D\000", "resource_changed\000", 968641751)
		methodShapeCast3D[1] = gdnative.MethodOf("ShapeCast3D\000", "set_enabled\000", 2586408642)
		methodShapeCast3D[2] = gdnative.MethodOf("ShapeCast3D\000", "is_enabled\000", 36873697)
		methodShapeCast3D[3] = gdnative.MethodOf("ShapeCast3D\000", "set_shape\000", 1549710052)
		methodShapeCast3D[4] = gdnative.MethodOf("ShapeCast3D\000", "get_shape\000", 3214262478)
		methodShapeCast3D[5] = gdnative.MethodOf("ShapeCast3D\000", "set_target_position\000", 3460891852)
		methodShapeCast3D[6] = gdnative.MethodOf("ShapeCast3D\000", "get_target_position\000", 3360562783)
		methodShapeCast3D[7] = gdnative.MethodOf("ShapeCast3D\000", "set_margin\000", 373806689)
		methodShapeCast3D[8] = gdnative.MethodOf("ShapeCast3D\000", "get_margin\000", 1740695150)
		methodShapeCast3D[9] = gdnative.MethodOf("ShapeCast3D\000", "set_max_results\000", 1286410249)
		methodShapeCast3D[10] = gdnative.MethodOf("ShapeCast3D\000", "get_max_results\000", 3905245786)
		methodShapeCast3D[11] = gdnative.MethodOf("ShapeCast3D\000", "is_colliding\000", 36873697)
		methodShapeCast3D[12] = gdnative.MethodOf("ShapeCast3D\000", "get_collision_count\000", 3905245786)
		methodShapeCast3D[13] = gdnative.MethodOf("ShapeCast3D\000", "force_shapecast_update\000", 3218959716)
		methodShapeCast3D[14] = gdnative.MethodOf("ShapeCast3D\000", "get_collider\000", 3332903315)
		methodShapeCast3D[15] = gdnative.MethodOf("ShapeCast3D\000", "get_collider_shape\000", 923996154)
		methodShapeCast3D[16] = gdnative.MethodOf("ShapeCast3D\000", "get_collision_point\000", 711720468)
		methodShapeCast3D[17] = gdnative.MethodOf("ShapeCast3D\000", "get_collision_normal\000", 711720468)
		methodShapeCast3D[18] = gdnative.MethodOf("ShapeCast3D\000", "get_closest_collision_safe_fraction\000", 1740695150)
		methodShapeCast3D[19] = gdnative.MethodOf("ShapeCast3D\000", "get_closest_collision_unsafe_fraction\000", 1740695150)
		methodShapeCast3D[20] = gdnative.MethodOf("ShapeCast3D\000", "add_exception_rid\000", 2722037293)
		methodShapeCast3D[21] = gdnative.MethodOf("ShapeCast3D\000", "add_exception\000", 3975164845)
		methodShapeCast3D[22] = gdnative.MethodOf("ShapeCast3D\000", "remove_exception_rid\000", 2722037293)
		methodShapeCast3D[23] = gdnative.MethodOf("ShapeCast3D\000", "remove_exception\000", 3975164845)
		methodShapeCast3D[24] = gdnative.MethodOf("ShapeCast3D\000", "clear_exceptions\000", 3218959716)
		methodShapeCast3D[25] = gdnative.MethodOf("ShapeCast3D\000", "set_collision_mask\000", 1286410249)
		methodShapeCast3D[26] = gdnative.MethodOf("ShapeCast3D\000", "get_collision_mask\000", 3905245786)
		methodShapeCast3D[27] = gdnative.MethodOf("ShapeCast3D\000", "set_collision_mask_value\000", 300928843)
		methodShapeCast3D[28] = gdnative.MethodOf("ShapeCast3D\000", "get_collision_mask_value\000", 1116898809)
		methodShapeCast3D[29] = gdnative.MethodOf("ShapeCast3D\000", "set_exclude_parent_body\000", 2586408642)
		methodShapeCast3D[30] = gdnative.MethodOf("ShapeCast3D\000", "get_exclude_parent_body\000", 36873697)
		methodShapeCast3D[31] = gdnative.MethodOf("ShapeCast3D\000", "set_collide_with_areas\000", 2586408642)
		methodShapeCast3D[32] = gdnative.MethodOf("ShapeCast3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodShapeCast3D[33] = gdnative.MethodOf("ShapeCast3D\000", "set_collide_with_bodies\000", 2586408642)
		methodShapeCast3D[34] = gdnative.MethodOf("ShapeCast3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodShapeCast3D[35] = gdnative.MethodOf("ShapeCast3D\000", "set_debug_shape_custom_color\000", 2920490490)
		methodShapeCast3D[36] = gdnative.MethodOf("ShapeCast3D\000", "get_debug_shape_custom_color\000", 3444240500)
		methodShortcut[0] = gdnative.MethodOf("Shortcut\000", "set_events\000", 381264803)
		methodShortcut[1] = gdnative.MethodOf("Shortcut\000", "get_events\000", 3995934104)
		methodShortcut[2] = gdnative.MethodOf("Shortcut\000", "has_valid_event\000", 36873697)
		methodShortcut[3] = gdnative.MethodOf("Shortcut\000", "matches_event\000", 3738334489)
		methodShortcut[4] = gdnative.MethodOf("Shortcut\000", "get_as_text\000", 201670096)
		methodSkeleton2D[0] = gdnative.MethodOf("Skeleton2D\000", "get_bone_count\000", 3905245786)
		methodSkeleton2D[1] = gdnative.MethodOf("Skeleton2D\000", "get_bone\000", 2556267111)
		methodSkeleton2D[2] = gdnative.MethodOf("Skeleton2D\000", "get_skeleton\000", 2944877500)
		methodSkeleton2D[3] = gdnative.MethodOf("Skeleton2D\000", "set_modification_stack\000", 3907307132)
		methodSkeleton2D[4] = gdnative.MethodOf("Skeleton2D\000", "get_modification_stack\000", 2107508396)
		methodSkeleton2D[5] = gdnative.MethodOf("Skeleton2D\000", "execute_modifications\000", 1005356550)
		methodSkeleton2D[6] = gdnative.MethodOf("Skeleton2D\000", "set_bone_local_pose_override\000", 555457532)
		methodSkeleton2D[7] = gdnative.MethodOf("Skeleton2D\000", "get_bone_local_pose_override\000", 2995540667)
		methodSkeleton3D[0] = gdnative.MethodOf("Skeleton3D\000", "add_bone\000", 83702148)
		methodSkeleton3D[1] = gdnative.MethodOf("Skeleton3D\000", "find_bone\000", 1321353865)
		methodSkeleton3D[2] = gdnative.MethodOf("Skeleton3D\000", "get_bone_name\000", 844755477)
		methodSkeleton3D[3] = gdnative.MethodOf("Skeleton3D\000", "set_bone_name\000", 501894301)
		methodSkeleton3D[4] = gdnative.MethodOf("Skeleton3D\000", "get_bone_parent\000", 923996154)
		methodSkeleton3D[5] = gdnative.MethodOf("Skeleton3D\000", "set_bone_parent\000", 3937882851)
		methodSkeleton3D[6] = gdnative.MethodOf("Skeleton3D\000", "get_bone_count\000", 3905245786)
		methodSkeleton3D[7] = gdnative.MethodOf("Skeleton3D\000", "unparent_bone_and_rest\000", 1286410249)
		methodSkeleton3D[8] = gdnative.MethodOf("Skeleton3D\000", "get_bone_children\000", 3668444399)
		methodSkeleton3D[9] = gdnative.MethodOf("Skeleton3D\000", "set_bone_children\000", 3500328261)
		methodSkeleton3D[10] = gdnative.MethodOf("Skeleton3D\000", "add_bone_child\000", 3937882851)
		methodSkeleton3D[11] = gdnative.MethodOf("Skeleton3D\000", "remove_bone_child\000", 3937882851)
		methodSkeleton3D[12] = gdnative.MethodOf("Skeleton3D\000", "get_parentless_bones\000", 969006518)
		methodSkeleton3D[13] = gdnative.MethodOf("Skeleton3D\000", "get_bone_rest\000", 1965739696)
		methodSkeleton3D[14] = gdnative.MethodOf("Skeleton3D\000", "set_bone_rest\000", 3616898986)
		methodSkeleton3D[15] = gdnative.MethodOf("Skeleton3D\000", "get_bone_global_rest\000", 1965739696)
		methodSkeleton3D[16] = gdnative.MethodOf("Skeleton3D\000", "create_skin_from_rest_transforms\000", 1032037385)
		methodSkeleton3D[17] = gdnative.MethodOf("Skeleton3D\000", "register_skin\000", 3405789568)
		methodSkeleton3D[18] = gdnative.MethodOf("Skeleton3D\000", "localize_rests\000", 3218959716)
		methodSkeleton3D[19] = gdnative.MethodOf("Skeleton3D\000", "clear_bones\000", 3218959716)
		methodSkeleton3D[20] = gdnative.MethodOf("Skeleton3D\000", "get_bone_pose\000", 1965739696)
		methodSkeleton3D[21] = gdnative.MethodOf("Skeleton3D\000", "set_bone_pose_position\000", 1530502735)
		methodSkeleton3D[22] = gdnative.MethodOf("Skeleton3D\000", "set_bone_pose_rotation\000", 2823819782)
		methodSkeleton3D[23] = gdnative.MethodOf("Skeleton3D\000", "set_bone_pose_scale\000", 1530502735)
		methodSkeleton3D[24] = gdnative.MethodOf("Skeleton3D\000", "get_bone_pose_position\000", 711720468)
		methodSkeleton3D[25] = gdnative.MethodOf("Skeleton3D\000", "get_bone_pose_rotation\000", 476865136)
		methodSkeleton3D[26] = gdnative.MethodOf("Skeleton3D\000", "get_bone_pose_scale\000", 711720468)
		methodSkeleton3D[27] = gdnative.MethodOf("Skeleton3D\000", "is_bone_enabled\000", 1116898809)
		methodSkeleton3D[28] = gdnative.MethodOf("Skeleton3D\000", "set_bone_enabled\000", 4023243586)
		methodSkeleton3D[29] = gdnative.MethodOf("Skeleton3D\000", "clear_bones_global_pose_override\000", 3218959716)
		methodSkeleton3D[30] = gdnative.MethodOf("Skeleton3D\000", "set_bone_global_pose_override\000", 3483398371)
		methodSkeleton3D[31] = gdnative.MethodOf("Skeleton3D\000", "get_bone_global_pose_override\000", 1965739696)
		methodSkeleton3D[32] = gdnative.MethodOf("Skeleton3D\000", "get_bone_global_pose\000", 1965739696)
		methodSkeleton3D[33] = gdnative.MethodOf("Skeleton3D\000", "get_bone_global_pose_no_override\000", 1965739696)
		methodSkeleton3D[34] = gdnative.MethodOf("Skeleton3D\000", "clear_bones_local_pose_override\000", 3218959716)
		methodSkeleton3D[35] = gdnative.MethodOf("Skeleton3D\000", "set_bone_local_pose_override\000", 3483398371)
		methodSkeleton3D[36] = gdnative.MethodOf("Skeleton3D\000", "get_bone_local_pose_override\000", 1965739696)
		methodSkeleton3D[37] = gdnative.MethodOf("Skeleton3D\000", "force_update_all_bone_transforms\000", 3218959716)
		methodSkeleton3D[38] = gdnative.MethodOf("Skeleton3D\000", "force_update_bone_child_transform\000", 1286410249)
		methodSkeleton3D[39] = gdnative.MethodOf("Skeleton3D\000", "set_motion_scale\000", 373806689)
		methodSkeleton3D[40] = gdnative.MethodOf("Skeleton3D\000", "get_motion_scale\000", 1740695150)
		methodSkeleton3D[41] = gdnative.MethodOf("Skeleton3D\000", "global_pose_to_world_transform\000", 3396462327)
		methodSkeleton3D[42] = gdnative.MethodOf("Skeleton3D\000", "world_transform_to_global_pose\000", 3396462327)
		methodSkeleton3D[43] = gdnative.MethodOf("Skeleton3D\000", "global_pose_to_local_pose\000", 518934792)
		methodSkeleton3D[44] = gdnative.MethodOf("Skeleton3D\000", "local_pose_to_global_pose\000", 518934792)
		methodSkeleton3D[45] = gdnative.MethodOf("Skeleton3D\000", "global_pose_z_forward_to_bone_forward\000", 97773470)
		methodSkeleton3D[46] = gdnative.MethodOf("Skeleton3D\000", "set_show_rest_only\000", 2586408642)
		methodSkeleton3D[47] = gdnative.MethodOf("Skeleton3D\000", "is_show_rest_only\000", 36873697)
		methodSkeleton3D[48] = gdnative.MethodOf("Skeleton3D\000", "set_animate_physical_bones\000", 2586408642)
		methodSkeleton3D[49] = gdnative.MethodOf("Skeleton3D\000", "get_animate_physical_bones\000", 36873697)
		methodSkeleton3D[50] = gdnative.MethodOf("Skeleton3D\000", "physical_bones_stop_simulation\000", 3218959716)
		methodSkeleton3D[51] = gdnative.MethodOf("Skeleton3D\000", "physical_bones_start_simulation\000", 2787316981)
		methodSkeleton3D[52] = gdnative.MethodOf("Skeleton3D\000", "physical_bones_add_collision_exception\000", 2722037293)
		methodSkeleton3D[53] = gdnative.MethodOf("Skeleton3D\000", "physical_bones_remove_collision_exception\000", 2722037293)
		methodSkeleton3D[54] = gdnative.MethodOf("Skeleton3D\000", "set_modification_stack\000", 3155601425)
		methodSkeleton3D[55] = gdnative.MethodOf("Skeleton3D\000", "get_modification_stack\000", 3888860108)
		methodSkeleton3D[56] = gdnative.MethodOf("Skeleton3D\000", "execute_modifications\000", 1005356550)
		methodSkeletonIK3D[0] = gdnative.MethodOf("SkeletonIK3D\000", "set_root_bone\000", 3304788590)
		methodSkeletonIK3D[1] = gdnative.MethodOf("SkeletonIK3D\000", "get_root_bone\000", 2002593661)
		methodSkeletonIK3D[2] = gdnative.MethodOf("SkeletonIK3D\000", "set_tip_bone\000", 3304788590)
		methodSkeletonIK3D[3] = gdnative.MethodOf("SkeletonIK3D\000", "get_tip_bone\000", 2002593661)
		methodSkeletonIK3D[4] = gdnative.MethodOf("SkeletonIK3D\000", "set_interpolation\000", 373806689)
		methodSkeletonIK3D[5] = gdnative.MethodOf("SkeletonIK3D\000", "get_interpolation\000", 1740695150)
		methodSkeletonIK3D[6] = gdnative.MethodOf("SkeletonIK3D\000", "set_target_transform\000", 2952846383)
		methodSkeletonIK3D[7] = gdnative.MethodOf("SkeletonIK3D\000", "get_target_transform\000", 3229777777)
		methodSkeletonIK3D[8] = gdnative.MethodOf("SkeletonIK3D\000", "set_target_node\000", 1348162250)
		methodSkeletonIK3D[9] = gdnative.MethodOf("SkeletonIK3D\000", "get_target_node\000", 277076166)
		methodSkeletonIK3D[10] = gdnative.MethodOf("SkeletonIK3D\000", "set_override_tip_basis\000", 2586408642)
		methodSkeletonIK3D[11] = gdnative.MethodOf("SkeletonIK3D\000", "is_override_tip_basis\000", 36873697)
		methodSkeletonIK3D[12] = gdnative.MethodOf("SkeletonIK3D\000", "set_use_magnet\000", 2586408642)
		methodSkeletonIK3D[13] = gdnative.MethodOf("SkeletonIK3D\000", "is_using_magnet\000", 36873697)
		methodSkeletonIK3D[14] = gdnative.MethodOf("SkeletonIK3D\000", "set_magnet_position\000", 3460891852)
		methodSkeletonIK3D[15] = gdnative.MethodOf("SkeletonIK3D\000", "get_magnet_position\000", 3360562783)
		methodSkeletonIK3D[16] = gdnative.MethodOf("SkeletonIK3D\000", "get_parent_skeleton\000", 1488626673)
		methodSkeletonIK3D[17] = gdnative.MethodOf("SkeletonIK3D\000", "is_running\000", 2240911060)
		methodSkeletonIK3D[18] = gdnative.MethodOf("SkeletonIK3D\000", "set_min_distance\000", 373806689)
		methodSkeletonIK3D[19] = gdnative.MethodOf("SkeletonIK3D\000", "get_min_distance\000", 1740695150)
		methodSkeletonIK3D[20] = gdnative.MethodOf("SkeletonIK3D\000", "set_max_iterations\000", 1286410249)
		methodSkeletonIK3D[21] = gdnative.MethodOf("SkeletonIK3D\000", "get_max_iterations\000", 3905245786)
		methodSkeletonIK3D[22] = gdnative.MethodOf("SkeletonIK3D\000", "start\000", 107499316)
		methodSkeletonIK3D[23] = gdnative.MethodOf("SkeletonIK3D\000", "stop\000", 3218959716)
		methodSkeletonModification2D[0] = gdnative.MethodOf("SkeletonModification2D\000", "set_enabled\000", 2586408642)
		methodSkeletonModification2D[1] = gdnative.MethodOf("SkeletonModification2D\000", "get_enabled\000", 2240911060)
		methodSkeletonModification2D[2] = gdnative.MethodOf("SkeletonModification2D\000", "get_modification_stack\000", 2137761694)
		methodSkeletonModification2D[3] = gdnative.MethodOf("SkeletonModification2D\000", "set_is_setup\000", 2586408642)
		methodSkeletonModification2D[4] = gdnative.MethodOf("SkeletonModification2D\000", "get_is_setup\000", 36873697)
		methodSkeletonModification2D[5] = gdnative.MethodOf("SkeletonModification2D\000", "set_execution_mode\000", 1286410249)
		methodSkeletonModification2D[6] = gdnative.MethodOf("SkeletonModification2D\000", "get_execution_mode\000", 3905245786)
		methodSkeletonModification2D[7] = gdnative.MethodOf("SkeletonModification2D\000", "clamp_angle\000", 1229502682)
		methodSkeletonModification2D[8] = gdnative.MethodOf("SkeletonModification2D\000", "set_editor_draw_gizmo\000", 2586408642)
		methodSkeletonModification2D[9] = gdnative.MethodOf("SkeletonModification2D\000", "get_editor_draw_gizmo\000", 36873697)
		methodSkeletonModification2DCCDIK[0] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DCCDIK[1] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DCCDIK[2] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification2DCCDIK[3] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification2DCCDIK[4] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_data_chain_length\000", 1286410249)
		methodSkeletonModification2DCCDIK[5] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_data_chain_length\000", 2455072627)
		methodSkeletonModification2DCCDIK[6] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DCCDIK[7] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DCCDIK[8] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DCCDIK[9] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_bone_index\000", 923996154)
		methodSkeletonModification2DCCDIK[10] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_rotate_from_joint\000", 300928843)
		methodSkeletonModification2DCCDIK[11] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_rotate_from_joint\000", 1116898809)
		methodSkeletonModification2DCCDIK[12] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_enable_constraint\000", 300928843)
		methodSkeletonModification2DCCDIK[13] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_enable_constraint\000", 1116898809)
		methodSkeletonModification2DCCDIK[14] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_min\000", 1602489585)
		methodSkeletonModification2DCCDIK[15] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_min\000", 2339986948)
		methodSkeletonModification2DCCDIK[16] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_max\000", 1602489585)
		methodSkeletonModification2DCCDIK[17] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_max\000", 2339986948)
		methodSkeletonModification2DCCDIK[18] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_invert\000", 300928843)
		methodSkeletonModification2DCCDIK[19] = gdnative.MethodOf("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_invert\000", 1116898809)
		methodSkeletonModification2DFABRIK[0] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DFABRIK[1] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DFABRIK[2] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_fabrik_data_chain_length\000", 1286410249)
		methodSkeletonModification2DFABRIK[3] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_fabrik_data_chain_length\000", 2455072627)
		methodSkeletonModification2DFABRIK[4] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_fabrik_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DFABRIK[5] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_fabrik_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DFABRIK[6] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_fabrik_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DFABRIK[7] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_fabrik_joint_bone_index\000", 923996154)
		methodSkeletonModification2DFABRIK[8] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_fabrik_joint_magnet_position\000", 163021252)
		methodSkeletonModification2DFABRIK[9] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_fabrik_joint_magnet_position\000", 2299179447)
		methodSkeletonModification2DFABRIK[10] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "set_fabrik_joint_use_target_rotation\000", 300928843)
		methodSkeletonModification2DFABRIK[11] = gdnative.MethodOf("SkeletonModification2DFABRIK\000", "get_fabrik_joint_use_target_rotation\000", 1116898809)
		methodSkeletonModification2DJiggle[0] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DJiggle[1] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DJiggle[2] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_data_chain_length\000", 1286410249)
		methodSkeletonModification2DJiggle[3] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_data_chain_length\000", 2455072627)
		methodSkeletonModification2DJiggle[4] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_stiffness\000", 373806689)
		methodSkeletonModification2DJiggle[5] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_stiffness\000", 1740695150)
		methodSkeletonModification2DJiggle[6] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_mass\000", 373806689)
		methodSkeletonModification2DJiggle[7] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_mass\000", 1740695150)
		methodSkeletonModification2DJiggle[8] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_damping\000", 373806689)
		methodSkeletonModification2DJiggle[9] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_damping\000", 1740695150)
		methodSkeletonModification2DJiggle[10] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_use_gravity\000", 2586408642)
		methodSkeletonModification2DJiggle[11] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_use_gravity\000", 36873697)
		methodSkeletonModification2DJiggle[12] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_gravity\000", 743155724)
		methodSkeletonModification2DJiggle[13] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_gravity\000", 3341600327)
		methodSkeletonModification2DJiggle[14] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_use_colliders\000", 2586408642)
		methodSkeletonModification2DJiggle[15] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_use_colliders\000", 36873697)
		methodSkeletonModification2DJiggle[16] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_collision_mask\000", 1286410249)
		methodSkeletonModification2DJiggle[17] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_collision_mask\000", 3905245786)
		methodSkeletonModification2DJiggle[18] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DJiggle[19] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DJiggle[20] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DJiggle[21] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_bone_index\000", 923996154)
		methodSkeletonModification2DJiggle[22] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_override\000", 300928843)
		methodSkeletonModification2DJiggle[23] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_override\000", 1116898809)
		methodSkeletonModification2DJiggle[24] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_stiffness\000", 1602489585)
		methodSkeletonModification2DJiggle[25] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_stiffness\000", 2339986948)
		methodSkeletonModification2DJiggle[26] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_mass\000", 1602489585)
		methodSkeletonModification2DJiggle[27] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_mass\000", 2339986948)
		methodSkeletonModification2DJiggle[28] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_damping\000", 1602489585)
		methodSkeletonModification2DJiggle[29] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_damping\000", 2339986948)
		methodSkeletonModification2DJiggle[30] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_use_gravity\000", 300928843)
		methodSkeletonModification2DJiggle[31] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_use_gravity\000", 1116898809)
		methodSkeletonModification2DJiggle[32] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "set_jiggle_joint_gravity\000", 163021252)
		methodSkeletonModification2DJiggle[33] = gdnative.MethodOf("SkeletonModification2DJiggle\000", "get_jiggle_joint_gravity\000", 2299179447)
		methodSkeletonModification2DLookAt[0] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_bone2d_node\000", 1348162250)
		methodSkeletonModification2DLookAt[1] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_bone2d_node\000", 4075236667)
		methodSkeletonModification2DLookAt[2] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_bone_index\000", 1286410249)
		methodSkeletonModification2DLookAt[3] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_bone_index\000", 3905245786)
		methodSkeletonModification2DLookAt[4] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DLookAt[5] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DLookAt[6] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_additional_rotation\000", 373806689)
		methodSkeletonModification2DLookAt[7] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_additional_rotation\000", 1740695150)
		methodSkeletonModification2DLookAt[8] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_enable_constraint\000", 2586408642)
		methodSkeletonModification2DLookAt[9] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_enable_constraint\000", 36873697)
		methodSkeletonModification2DLookAt[10] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_constraint_angle_min\000", 373806689)
		methodSkeletonModification2DLookAt[11] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_constraint_angle_min\000", 1740695150)
		methodSkeletonModification2DLookAt[12] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_constraint_angle_max\000", 373806689)
		methodSkeletonModification2DLookAt[13] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_constraint_angle_max\000", 1740695150)
		methodSkeletonModification2DLookAt[14] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "set_constraint_angle_invert\000", 2586408642)
		methodSkeletonModification2DLookAt[15] = gdnative.MethodOf("SkeletonModification2DLookAt\000", "get_constraint_angle_invert\000", 36873697)
		methodSkeletonModification2DPhysicalBones[0] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "set_physical_bone_chain_length\000", 1286410249)
		methodSkeletonModification2DPhysicalBones[1] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "get_physical_bone_chain_length\000", 2455072627)
		methodSkeletonModification2DPhysicalBones[2] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "set_physical_bone_node\000", 2761262315)
		methodSkeletonModification2DPhysicalBones[3] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "get_physical_bone_node\000", 408788394)
		methodSkeletonModification2DPhysicalBones[4] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "fetch_physical_bones\000", 3218959716)
		methodSkeletonModification2DPhysicalBones[5] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "start_simulation\000", 2787316981)
		methodSkeletonModification2DPhysicalBones[6] = gdnative.MethodOf("SkeletonModification2DPhysicalBones\000", "stop_simulation\000", 2787316981)
		methodSkeletonModification2DStackHolder[0] = gdnative.MethodOf("SkeletonModification2DStackHolder\000", "set_held_modification_stack\000", 3907307132)
		methodSkeletonModification2DStackHolder[1] = gdnative.MethodOf("SkeletonModification2DStackHolder\000", "get_held_modification_stack\000", 2107508396)
		methodSkeletonModification2DTwoBoneIK[0] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[1] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[2] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_target_minimum_distance\000", 373806689)
		methodSkeletonModification2DTwoBoneIK[3] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_target_minimum_distance\000", 1740695150)
		methodSkeletonModification2DTwoBoneIK[4] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_target_maximum_distance\000", 373806689)
		methodSkeletonModification2DTwoBoneIK[5] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_target_maximum_distance\000", 1740695150)
		methodSkeletonModification2DTwoBoneIK[6] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_flip_bend_direction\000", 2586408642)
		methodSkeletonModification2DTwoBoneIK[7] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_flip_bend_direction\000", 36873697)
		methodSkeletonModification2DTwoBoneIK[8] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_joint_one_bone2d_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[9] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_joint_one_bone2d_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[10] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_joint_one_bone_idx\000", 1286410249)
		methodSkeletonModification2DTwoBoneIK[11] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_joint_one_bone_idx\000", 3905245786)
		methodSkeletonModification2DTwoBoneIK[12] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_joint_two_bone2d_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[13] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_joint_two_bone2d_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[14] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "set_joint_two_bone_idx\000", 1286410249)
		methodSkeletonModification2DTwoBoneIK[15] = gdnative.MethodOf("SkeletonModification2DTwoBoneIK\000", "get_joint_two_bone_idx\000", 3905245786)
		methodSkeletonModification3D[0] = gdnative.MethodOf("SkeletonModification3D\000", "set_enabled\000", 2586408642)
		methodSkeletonModification3D[1] = gdnative.MethodOf("SkeletonModification3D\000", "get_enabled\000", 2240911060)
		methodSkeletonModification3D[2] = gdnative.MethodOf("SkeletonModification3D\000", "get_modification_stack\000", 3888860108)
		methodSkeletonModification3D[3] = gdnative.MethodOf("SkeletonModification3D\000", "set_is_setup\000", 2586408642)
		methodSkeletonModification3D[4] = gdnative.MethodOf("SkeletonModification3D\000", "get_is_setup\000", 36873697)
		methodSkeletonModification3D[5] = gdnative.MethodOf("SkeletonModification3D\000", "set_execution_mode\000", 1286410249)
		methodSkeletonModification3D[6] = gdnative.MethodOf("SkeletonModification3D\000", "get_execution_mode\000", 3905245786)
		methodSkeletonModification3D[7] = gdnative.MethodOf("SkeletonModification3D\000", "clamp_angle\000", 1229502682)
		methodSkeletonModification3DCCDIK[0] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DCCDIK[1] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DCCDIK[2] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification3DCCDIK[3] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification3DCCDIK[4] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_use_high_quality_solve\000", 2586408642)
		methodSkeletonModification3DCCDIK[5] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_use_high_quality_solve\000", 36873697)
		methodSkeletonModification3DCCDIK[6] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_bone_name\000", 844755477)
		methodSkeletonModification3DCCDIK[7] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_bone_name\000", 501894301)
		methodSkeletonModification3DCCDIK[8] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_bone_index\000", 923996154)
		methodSkeletonModification3DCCDIK[9] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DCCDIK[10] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_ccdik_axis\000", 923996154)
		methodSkeletonModification3DCCDIK[11] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_ccdik_axis\000", 3937882851)
		methodSkeletonModification3DCCDIK[12] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_enable_joint_constraint\000", 1116898809)
		methodSkeletonModification3DCCDIK[13] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_enable_joint_constraint\000", 300928843)
		methodSkeletonModification3DCCDIK[14] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_angle_min\000", 2339986948)
		methodSkeletonModification3DCCDIK[15] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_angle_min\000", 1602489585)
		methodSkeletonModification3DCCDIK[16] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_angle_max\000", 2339986948)
		methodSkeletonModification3DCCDIK[17] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_angle_max\000", 1602489585)
		methodSkeletonModification3DCCDIK[18] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_invert\000", 1116898809)
		methodSkeletonModification3DCCDIK[19] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_invert\000", 300928843)
		methodSkeletonModification3DCCDIK[20] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "set_ccdik_data_chain_length\000", 1286410249)
		methodSkeletonModification3DCCDIK[21] = gdnative.MethodOf("SkeletonModification3DCCDIK\000", "get_ccdik_data_chain_length\000", 2455072627)
		methodSkeletonModification3DFABRIK[0] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DFABRIK[1] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DFABRIK[2] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_data_chain_length\000", 1286410249)
		methodSkeletonModification3DFABRIK[3] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_data_chain_length\000", 2455072627)
		methodSkeletonModification3DFABRIK[4] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_chain_tolerance\000", 373806689)
		methodSkeletonModification3DFABRIK[5] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_chain_tolerance\000", 191475506)
		methodSkeletonModification3DFABRIK[6] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_chain_max_iterations\000", 1286410249)
		methodSkeletonModification3DFABRIK[7] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_chain_max_iterations\000", 2455072627)
		methodSkeletonModification3DFABRIK[8] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_bone_name\000", 844755477)
		methodSkeletonModification3DFABRIK[9] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_bone_name\000", 501894301)
		methodSkeletonModification3DFABRIK[10] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_bone_index\000", 923996154)
		methodSkeletonModification3DFABRIK[11] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DFABRIK[12] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_length\000", 2339986948)
		methodSkeletonModification3DFABRIK[13] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_length\000", 1602489585)
		methodSkeletonModification3DFABRIK[14] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_magnet\000", 711720468)
		methodSkeletonModification3DFABRIK[15] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_magnet\000", 1530502735)
		methodSkeletonModification3DFABRIK[16] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_auto_calculate_length\000", 1116898809)
		methodSkeletonModification3DFABRIK[17] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_auto_calculate_length\000", 300928843)
		methodSkeletonModification3DFABRIK[18] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "fabrik_joint_auto_calculate_length\000", 1286410249)
		methodSkeletonModification3DFABRIK[19] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_use_tip_node\000", 1116898809)
		methodSkeletonModification3DFABRIK[20] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_use_tip_node\000", 300928843)
		methodSkeletonModification3DFABRIK[21] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_tip_node\000", 408788394)
		methodSkeletonModification3DFABRIK[22] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_tip_node\000", 2761262315)
		methodSkeletonModification3DFABRIK[23] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "get_fabrik_joint_use_target_basis\000", 1116898809)
		methodSkeletonModification3DFABRIK[24] = gdnative.MethodOf("SkeletonModification3DFABRIK\000", "set_fabrik_joint_use_target_basis\000", 300928843)
		methodSkeletonModification3DJiggle[0] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DJiggle[1] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DJiggle[2] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_data_chain_length\000", 1286410249)
		methodSkeletonModification3DJiggle[3] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_data_chain_length\000", 2455072627)
		methodSkeletonModification3DJiggle[4] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_stiffness\000", 373806689)
		methodSkeletonModification3DJiggle[5] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_stiffness\000", 1740695150)
		methodSkeletonModification3DJiggle[6] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_mass\000", 373806689)
		methodSkeletonModification3DJiggle[7] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_mass\000", 1740695150)
		methodSkeletonModification3DJiggle[8] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_damping\000", 373806689)
		methodSkeletonModification3DJiggle[9] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_damping\000", 1740695150)
		methodSkeletonModification3DJiggle[10] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_use_gravity\000", 2586408642)
		methodSkeletonModification3DJiggle[11] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_use_gravity\000", 36873697)
		methodSkeletonModification3DJiggle[12] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_gravity\000", 3460891852)
		methodSkeletonModification3DJiggle[13] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_gravity\000", 3360562783)
		methodSkeletonModification3DJiggle[14] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_use_colliders\000", 2586408642)
		methodSkeletonModification3DJiggle[15] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_use_colliders\000", 36873697)
		methodSkeletonModification3DJiggle[16] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_collision_mask\000", 1286410249)
		methodSkeletonModification3DJiggle[17] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_collision_mask\000", 3905245786)
		methodSkeletonModification3DJiggle[18] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_bone_name\000", 501894301)
		methodSkeletonModification3DJiggle[19] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_bone_name\000", 844755477)
		methodSkeletonModification3DJiggle[20] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DJiggle[21] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_bone_index\000", 923996154)
		methodSkeletonModification3DJiggle[22] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_override\000", 300928843)
		methodSkeletonModification3DJiggle[23] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_override\000", 1116898809)
		methodSkeletonModification3DJiggle[24] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_stiffness\000", 1602489585)
		methodSkeletonModification3DJiggle[25] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_stiffness\000", 2339986948)
		methodSkeletonModification3DJiggle[26] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_mass\000", 1602489585)
		methodSkeletonModification3DJiggle[27] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_mass\000", 2339986948)
		methodSkeletonModification3DJiggle[28] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_damping\000", 1602489585)
		methodSkeletonModification3DJiggle[29] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_damping\000", 2339986948)
		methodSkeletonModification3DJiggle[30] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_use_gravity\000", 300928843)
		methodSkeletonModification3DJiggle[31] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_use_gravity\000", 1116898809)
		methodSkeletonModification3DJiggle[32] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_gravity\000", 1530502735)
		methodSkeletonModification3DJiggle[33] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_gravity\000", 711720468)
		methodSkeletonModification3DJiggle[34] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "set_jiggle_joint_roll\000", 1602489585)
		methodSkeletonModification3DJiggle[35] = gdnative.MethodOf("SkeletonModification3DJiggle\000", "get_jiggle_joint_roll\000", 2339986948)
		methodSkeletonModification3DLookAt[0] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_bone_name\000", 83702148)
		methodSkeletonModification3DLookAt[1] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_bone_name\000", 201670096)
		methodSkeletonModification3DLookAt[2] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_bone_index\000", 1286410249)
		methodSkeletonModification3DLookAt[3] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_bone_index\000", 3905245786)
		methodSkeletonModification3DLookAt[4] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DLookAt[5] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DLookAt[6] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_additional_rotation\000", 3460891852)
		methodSkeletonModification3DLookAt[7] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_additional_rotation\000", 3360562783)
		methodSkeletonModification3DLookAt[8] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_lock_rotation_to_plane\000", 2586408642)
		methodSkeletonModification3DLookAt[9] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_lock_rotation_to_plane\000", 36873697)
		methodSkeletonModification3DLookAt[10] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "set_lock_rotation_plane\000", 1286410249)
		methodSkeletonModification3DLookAt[11] = gdnative.MethodOf("SkeletonModification3DLookAt\000", "get_lock_rotation_plane\000", 3905245786)
		methodSkeletonModification3DStackHolder[0] = gdnative.MethodOf("SkeletonModification3DStackHolder\000", "set_held_modification_stack\000", 3155601425)
		methodSkeletonModification3DStackHolder[1] = gdnative.MethodOf("SkeletonModification3DStackHolder\000", "get_held_modification_stack\000", 3652152314)
		methodSkeletonModification3DTwoBoneIK[0] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[1] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[2] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_use_pole_node\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[3] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_use_pole_node\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[4] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_pole_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[5] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_pole_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[6] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_use_tip_node\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[7] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_use_tip_node\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[8] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[9] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[10] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_auto_calculate_joint_length\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[11] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_auto_calculate_joint_length\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[12] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_one_bone_name\000", 83702148)
		methodSkeletonModification3DTwoBoneIK[13] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_one_bone_name\000", 201670096)
		methodSkeletonModification3DTwoBoneIK[14] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_one_bone_idx\000", 1286410249)
		methodSkeletonModification3DTwoBoneIK[15] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_one_bone_idx\000", 3905245786)
		methodSkeletonModification3DTwoBoneIK[16] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_one_length\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[17] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_one_length\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[18] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_two_bone_name\000", 83702148)
		methodSkeletonModification3DTwoBoneIK[19] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_two_bone_name\000", 201670096)
		methodSkeletonModification3DTwoBoneIK[20] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_two_bone_idx\000", 1286410249)
		methodSkeletonModification3DTwoBoneIK[21] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_two_bone_idx\000", 3905245786)
		methodSkeletonModification3DTwoBoneIK[22] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_two_length\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[23] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_two_length\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[24] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_one_roll\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[25] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_one_roll\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[26] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "set_joint_two_roll\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[27] = gdnative.MethodOf("SkeletonModification3DTwoBoneIK\000", "get_joint_two_roll\000", 1740695150)
		methodSkeletonModificationStack2D[0] = gdnative.MethodOf("SkeletonModificationStack2D\000", "setup\000", 3218959716)
		methodSkeletonModificationStack2D[1] = gdnative.MethodOf("SkeletonModificationStack2D\000", "execute\000", 1005356550)
		methodSkeletonModificationStack2D[2] = gdnative.MethodOf("SkeletonModificationStack2D\000", "enable_all_modifications\000", 2586408642)
		methodSkeletonModificationStack2D[3] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_modification\000", 2570274329)
		methodSkeletonModificationStack2D[4] = gdnative.MethodOf("SkeletonModificationStack2D\000", "add_modification\000", 354162120)
		methodSkeletonModificationStack2D[5] = gdnative.MethodOf("SkeletonModificationStack2D\000", "delete_modification\000", 1286410249)
		methodSkeletonModificationStack2D[6] = gdnative.MethodOf("SkeletonModificationStack2D\000", "set_modification\000", 1098262544)
		methodSkeletonModificationStack2D[7] = gdnative.MethodOf("SkeletonModificationStack2D\000", "set_modification_count\000", 1286410249)
		methodSkeletonModificationStack2D[8] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_modification_count\000", 3905245786)
		methodSkeletonModificationStack2D[9] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_is_setup\000", 36873697)
		methodSkeletonModificationStack2D[10] = gdnative.MethodOf("SkeletonModificationStack2D\000", "set_enabled\000", 2586408642)
		methodSkeletonModificationStack2D[11] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_enabled\000", 36873697)
		methodSkeletonModificationStack2D[12] = gdnative.MethodOf("SkeletonModificationStack2D\000", "set_strength\000", 373806689)
		methodSkeletonModificationStack2D[13] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_strength\000", 1740695150)
		methodSkeletonModificationStack2D[14] = gdnative.MethodOf("SkeletonModificationStack2D\000", "get_skeleton\000", 1697361217)
		methodSkeletonModificationStack3D[0] = gdnative.MethodOf("SkeletonModificationStack3D\000", "setup\000", 3218959716)
		methodSkeletonModificationStack3D[1] = gdnative.MethodOf("SkeletonModificationStack3D\000", "execute\000", 1005356550)
		methodSkeletonModificationStack3D[2] = gdnative.MethodOf("SkeletonModificationStack3D\000", "enable_all_modifications\000", 2586408642)
		methodSkeletonModificationStack3D[3] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_modification\000", 4260634309)
		methodSkeletonModificationStack3D[4] = gdnative.MethodOf("SkeletonModificationStack3D\000", "add_modification\000", 2301100674)
		methodSkeletonModificationStack3D[5] = gdnative.MethodOf("SkeletonModificationStack3D\000", "delete_modification\000", 1286410249)
		methodSkeletonModificationStack3D[6] = gdnative.MethodOf("SkeletonModificationStack3D\000", "set_modification\000", 94671383)
		methodSkeletonModificationStack3D[7] = gdnative.MethodOf("SkeletonModificationStack3D\000", "set_modification_count\000", 1286410249)
		methodSkeletonModificationStack3D[8] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_modification_count\000", 3905245786)
		methodSkeletonModificationStack3D[9] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_is_setup\000", 36873697)
		methodSkeletonModificationStack3D[10] = gdnative.MethodOf("SkeletonModificationStack3D\000", "set_enabled\000", 2586408642)
		methodSkeletonModificationStack3D[11] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_enabled\000", 36873697)
		methodSkeletonModificationStack3D[12] = gdnative.MethodOf("SkeletonModificationStack3D\000", "set_strength\000", 373806689)
		methodSkeletonModificationStack3D[13] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_strength\000", 1740695150)
		methodSkeletonModificationStack3D[14] = gdnative.MethodOf("SkeletonModificationStack3D\000", "get_skeleton\000", 1488626673)
		methodSkeletonProfile[0] = gdnative.MethodOf("SkeletonProfile\000", "set_root_bone\000", 3304788590)
		methodSkeletonProfile[1] = gdnative.MethodOf("SkeletonProfile\000", "get_root_bone\000", 2737447660)
		methodSkeletonProfile[2] = gdnative.MethodOf("SkeletonProfile\000", "set_scale_base_bone\000", 3304788590)
		methodSkeletonProfile[3] = gdnative.MethodOf("SkeletonProfile\000", "get_scale_base_bone\000", 2737447660)
		methodSkeletonProfile[4] = gdnative.MethodOf("SkeletonProfile\000", "set_group_size\000", 1286410249)
		methodSkeletonProfile[5] = gdnative.MethodOf("SkeletonProfile\000", "get_group_size\000", 2455072627)
		methodSkeletonProfile[6] = gdnative.MethodOf("SkeletonProfile\000", "get_group_name\000", 659327637)
		methodSkeletonProfile[7] = gdnative.MethodOf("SkeletonProfile\000", "set_group_name\000", 3780747571)
		methodSkeletonProfile[8] = gdnative.MethodOf("SkeletonProfile\000", "get_texture\000", 3536238170)
		methodSkeletonProfile[9] = gdnative.MethodOf("SkeletonProfile\000", "set_texture\000", 666127730)
		methodSkeletonProfile[10] = gdnative.MethodOf("SkeletonProfile\000", "set_bone_size\000", 1286410249)
		methodSkeletonProfile[11] = gdnative.MethodOf("SkeletonProfile\000", "get_bone_size\000", 2455072627)
		methodSkeletonProfile[12] = gdnative.MethodOf("SkeletonProfile\000", "find_bone\000", 2458036349)
		methodSkeletonProfile[13] = gdnative.MethodOf("SkeletonProfile\000", "get_bone_name\000", 659327637)
		methodSkeletonProfile[14] = gdnative.MethodOf("SkeletonProfile\000", "set_bone_name\000", 3780747571)
		methodSkeletonProfile[15] = gdnative.MethodOf("SkeletonProfile\000", "get_bone_parent\000", 659327637)
		methodSkeletonProfile[16] = gdnative.MethodOf("SkeletonProfile\000", "set_bone_parent\000", 3780747571)
		methodSkeletonProfile[17] = gdnative.MethodOf("SkeletonProfile\000", "get_tail_direction\000", 2675997574)
		methodSkeletonProfile[18] = gdnative.MethodOf("SkeletonProfile\000", "set_tail_direction\000", 1231951015)
		methodSkeletonProfile[19] = gdnative.MethodOf("SkeletonProfile\000", "get_bone_tail\000", 659327637)
		methodSkeletonProfile[20] = gdnative.MethodOf("SkeletonProfile\000", "set_bone_tail\000", 3780747571)
		methodSkeletonProfile[21] = gdnative.MethodOf("SkeletonProfile\000", "get_reference_pose\000", 1965739696)
		methodSkeletonProfile[22] = gdnative.MethodOf("SkeletonProfile\000", "set_reference_pose\000", 3616898986)
		methodSkeletonProfile[23] = gdnative.MethodOf("SkeletonProfile\000", "get_handle_offset\000", 2299179447)
		methodSkeletonProfile[24] = gdnative.MethodOf("SkeletonProfile\000", "set_handle_offset\000", 163021252)
		methodSkeletonProfile[25] = gdnative.MethodOf("SkeletonProfile\000", "get_group\000", 659327637)
		methodSkeletonProfile[26] = gdnative.MethodOf("SkeletonProfile\000", "set_group\000", 3780747571)
		methodSkin[0] = gdnative.MethodOf("Skin\000", "set_bind_count\000", 1286410249)
		methodSkin[1] = gdnative.MethodOf("Skin\000", "get_bind_count\000", 3905245786)
		methodSkin[2] = gdnative.MethodOf("Skin\000", "add_bind\000", 3616898986)
		methodSkin[3] = gdnative.MethodOf("Skin\000", "add_named_bind\000", 3154712474)
		methodSkin[4] = gdnative.MethodOf("Skin\000", "set_bind_pose\000", 3616898986)
		methodSkin[5] = gdnative.MethodOf("Skin\000", "get_bind_pose\000", 1965739696)
		methodSkin[6] = gdnative.MethodOf("Skin\000", "set_bind_name\000", 3780747571)
		methodSkin[7] = gdnative.MethodOf("Skin\000", "get_bind_name\000", 659327637)
		methodSkin[8] = gdnative.MethodOf("Skin\000", "set_bind_bone\000", 3937882851)
		methodSkin[9] = gdnative.MethodOf("Skin\000", "get_bind_bone\000", 923996154)
		methodSkin[10] = gdnative.MethodOf("Skin\000", "clear_binds\000", 3218959716)
		methodSkinReference[0] = gdnative.MethodOf("SkinReference\000", "get_skeleton\000", 2944877500)
		methodSkinReference[1] = gdnative.MethodOf("SkinReference\000", "get_skin\000", 2074563878)
		methodSky[0] = gdnative.MethodOf("Sky\000", "set_radiance_size\000", 1512957179)
		methodSky[1] = gdnative.MethodOf("Sky\000", "get_radiance_size\000", 2708733976)
		methodSky[2] = gdnative.MethodOf("Sky\000", "set_process_mode\000", 875986769)
		methodSky[3] = gdnative.MethodOf("Sky\000", "get_process_mode\000", 731245043)
		methodSky[4] = gdnative.MethodOf("Sky\000", "set_material\000", 2757459619)
		methodSky[5] = gdnative.MethodOf("Sky\000", "get_material\000", 5934680)
		methodSlider[0] = gdnative.MethodOf("Slider\000", "set_ticks\000", 1286410249)
		methodSlider[1] = gdnative.MethodOf("Slider\000", "get_ticks\000", 3905245786)
		methodSlider[2] = gdnative.MethodOf("Slider\000", "get_ticks_on_borders\000", 36873697)
		methodSlider[3] = gdnative.MethodOf("Slider\000", "set_ticks_on_borders\000", 2586408642)
		methodSlider[4] = gdnative.MethodOf("Slider\000", "set_editable\000", 2586408642)
		methodSlider[5] = gdnative.MethodOf("Slider\000", "is_editable\000", 36873697)
		methodSlider[6] = gdnative.MethodOf("Slider\000", "set_scrollable\000", 2586408642)
		methodSlider[7] = gdnative.MethodOf("Slider\000", "is_scrollable\000", 36873697)
		methodSliderJoint3D[0] = gdnative.MethodOf("SliderJoint3D\000", "set_param\000", 918243683)
		methodSliderJoint3D[1] = gdnative.MethodOf("SliderJoint3D\000", "get_param\000", 959925627)
		methodSoftDynamicBody3D[0] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_physics_rid\000", 2944877500)
		methodSoftDynamicBody3D[1] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_collision_mask\000", 1286410249)
		methodSoftDynamicBody3D[2] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_collision_mask\000", 3905245786)
		methodSoftDynamicBody3D[3] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_collision_layer\000", 1286410249)
		methodSoftDynamicBody3D[4] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_collision_layer\000", 3905245786)
		methodSoftDynamicBody3D[5] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_collision_mask_value\000", 300928843)
		methodSoftDynamicBody3D[6] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_collision_mask_value\000", 1116898809)
		methodSoftDynamicBody3D[7] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_collision_layer_value\000", 300928843)
		methodSoftDynamicBody3D[8] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_collision_layer_value\000", 1116898809)
		methodSoftDynamicBody3D[9] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_parent_collision_ignore\000", 1348162250)
		methodSoftDynamicBody3D[10] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_parent_collision_ignore\000", 4075236667)
		methodSoftDynamicBody3D[11] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_disable_mode\000", 3605008527)
		methodSoftDynamicBody3D[12] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_disable_mode\000", 599013717)
		methodSoftDynamicBody3D[13] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_collision_exceptions\000", 2915620761)
		methodSoftDynamicBody3D[14] = gdnative.MethodOf("SoftDynamicBody3D\000", "add_collision_exception_with\000", 1078189570)
		methodSoftDynamicBody3D[15] = gdnative.MethodOf("SoftDynamicBody3D\000", "remove_collision_exception_with\000", 1078189570)
		methodSoftDynamicBody3D[16] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_simulation_precision\000", 1286410249)
		methodSoftDynamicBody3D[17] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_simulation_precision\000", 2455072627)
		methodSoftDynamicBody3D[18] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_total_mass\000", 373806689)
		methodSoftDynamicBody3D[19] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_total_mass\000", 191475506)
		methodSoftDynamicBody3D[20] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_linear_stiffness\000", 373806689)
		methodSoftDynamicBody3D[21] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_linear_stiffness\000", 191475506)
		methodSoftDynamicBody3D[22] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_pressure_coefficient\000", 373806689)
		methodSoftDynamicBody3D[23] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_pressure_coefficient\000", 191475506)
		methodSoftDynamicBody3D[24] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_damping_coefficient\000", 373806689)
		methodSoftDynamicBody3D[25] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_damping_coefficient\000", 191475506)
		methodSoftDynamicBody3D[26] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_drag_coefficient\000", 373806689)
		methodSoftDynamicBody3D[27] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_drag_coefficient\000", 191475506)
		methodSoftDynamicBody3D[28] = gdnative.MethodOf("SoftDynamicBody3D\000", "get_point_transform\000", 871989493)
		methodSoftDynamicBody3D[29] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_point_pinned\000", 3814935226)
		methodSoftDynamicBody3D[30] = gdnative.MethodOf("SoftDynamicBody3D\000", "is_point_pinned\000", 1116898809)
		methodSoftDynamicBody3D[31] = gdnative.MethodOf("SoftDynamicBody3D\000", "set_ray_pickable\000", 2586408642)
		methodSoftDynamicBody3D[32] = gdnative.MethodOf("SoftDynamicBody3D\000", "is_ray_pickable\000", 36873697)
		methodSphereMesh[0] = gdnative.MethodOf("SphereMesh\000", "set_radius\000", 373806689)
		methodSphereMesh[1] = gdnative.MethodOf("SphereMesh\000", "get_radius\000", 1740695150)
		methodSphereMesh[2] = gdnative.MethodOf("SphereMesh\000", "set_height\000", 373806689)
		methodSphereMesh[3] = gdnative.MethodOf("SphereMesh\000", "get_height\000", 1740695150)
		methodSphereMesh[4] = gdnative.MethodOf("SphereMesh\000", "set_radial_segments\000", 1286410249)
		methodSphereMesh[5] = gdnative.MethodOf("SphereMesh\000", "get_radial_segments\000", 3905245786)
		methodSphereMesh[6] = gdnative.MethodOf("SphereMesh\000", "set_rings\000", 1286410249)
		methodSphereMesh[7] = gdnative.MethodOf("SphereMesh\000", "get_rings\000", 3905245786)
		methodSphereMesh[8] = gdnative.MethodOf("SphereMesh\000", "set_is_hemisphere\000", 2586408642)
		methodSphereMesh[9] = gdnative.MethodOf("SphereMesh\000", "get_is_hemisphere\000", 36873697)
		methodSphereOccluder3D[0] = gdnative.MethodOf("SphereOccluder3D\000", "set_radius\000", 373806689)
		methodSphereOccluder3D[1] = gdnative.MethodOf("SphereOccluder3D\000", "get_radius\000", 1740695150)
		methodSphereShape3D[0] = gdnative.MethodOf("SphereShape3D\000", "set_radius\000", 373806689)
		methodSphereShape3D[1] = gdnative.MethodOf("SphereShape3D\000", "get_radius\000", 1740695150)
		methodSpinBox[0] = gdnative.MethodOf("SpinBox\000", "set_horizontal_alignment\000", 2312603777)
		methodSpinBox[1] = gdnative.MethodOf("SpinBox\000", "get_horizontal_alignment\000", 341400642)
		methodSpinBox[2] = gdnative.MethodOf("SpinBox\000", "set_suffix\000", 83702148)
		methodSpinBox[3] = gdnative.MethodOf("SpinBox\000", "get_suffix\000", 201670096)
		methodSpinBox[4] = gdnative.MethodOf("SpinBox\000", "set_prefix\000", 83702148)
		methodSpinBox[5] = gdnative.MethodOf("SpinBox\000", "get_prefix\000", 201670096)
		methodSpinBox[6] = gdnative.MethodOf("SpinBox\000", "set_editable\000", 2586408642)
		methodSpinBox[7] = gdnative.MethodOf("SpinBox\000", "set_custom_arrow_step\000", 373806689)
		methodSpinBox[8] = gdnative.MethodOf("SpinBox\000", "get_custom_arrow_step\000", 1740695150)
		methodSpinBox[9] = gdnative.MethodOf("SpinBox\000", "is_editable\000", 36873697)
		methodSpinBox[10] = gdnative.MethodOf("SpinBox\000", "set_update_on_text_changed\000", 2586408642)
		methodSpinBox[11] = gdnative.MethodOf("SpinBox\000", "get_update_on_text_changed\000", 36873697)
		methodSpinBox[12] = gdnative.MethodOf("SpinBox\000", "apply\000", 3218959716)
		methodSpinBox[13] = gdnative.MethodOf("SpinBox\000", "get_line_edit\000", 4071694264)
		methodSplitContainer[0] = gdnative.MethodOf("SplitContainer\000", "set_split_offset\000", 1286410249)
		methodSplitContainer[1] = gdnative.MethodOf("SplitContainer\000", "get_split_offset\000", 3905245786)
		methodSplitContainer[2] = gdnative.MethodOf("SplitContainer\000", "clamp_split_offset\000", 3218959716)
		methodSplitContainer[3] = gdnative.MethodOf("SplitContainer\000", "set_collapsed\000", 2586408642)
		methodSplitContainer[4] = gdnative.MethodOf("SplitContainer\000", "is_collapsed\000", 36873697)
		methodSplitContainer[5] = gdnative.MethodOf("SplitContainer\000", "set_dragger_visibility\000", 1168273952)
		methodSplitContainer[6] = gdnative.MethodOf("SplitContainer\000", "get_dragger_visibility\000", 967297479)
		methodSpringArm3D[0] = gdnative.MethodOf("SpringArm3D\000", "get_hit_length\000", 191475506)
		methodSpringArm3D[1] = gdnative.MethodOf("SpringArm3D\000", "set_length\000", 373806689)
		methodSpringArm3D[2] = gdnative.MethodOf("SpringArm3D\000", "get_length\000", 1740695150)
		methodSpringArm3D[3] = gdnative.MethodOf("SpringArm3D\000", "set_shape\000", 1549710052)
		methodSpringArm3D[4] = gdnative.MethodOf("SpringArm3D\000", "get_shape\000", 3214262478)
		methodSpringArm3D[5] = gdnative.MethodOf("SpringArm3D\000", "add_excluded_object\000", 2722037293)
		methodSpringArm3D[6] = gdnative.MethodOf("SpringArm3D\000", "remove_excluded_object\000", 3521089500)
		methodSpringArm3D[7] = gdnative.MethodOf("SpringArm3D\000", "clear_excluded_objects\000", 3218959716)
		methodSpringArm3D[8] = gdnative.MethodOf("SpringArm3D\000", "set_collision_mask\000", 1286410249)
		methodSpringArm3D[9] = gdnative.MethodOf("SpringArm3D\000", "get_collision_mask\000", 2455072627)
		methodSpringArm3D[10] = gdnative.MethodOf("SpringArm3D\000", "set_margin\000", 373806689)
		methodSpringArm3D[11] = gdnative.MethodOf("SpringArm3D\000", "get_margin\000", 191475506)
		methodSprite2D[0] = gdnative.MethodOf("Sprite2D\000", "set_texture\000", 4051416890)
		methodSprite2D[1] = gdnative.MethodOf("Sprite2D\000", "get_texture\000", 3635182373)
		methodSprite2D[2] = gdnative.MethodOf("Sprite2D\000", "set_centered\000", 2586408642)
		methodSprite2D[3] = gdnative.MethodOf("Sprite2D\000", "is_centered\000", 36873697)
		methodSprite2D[4] = gdnative.MethodOf("Sprite2D\000", "set_offset\000", 743155724)
		methodSprite2D[5] = gdnative.MethodOf("Sprite2D\000", "get_offset\000", 3341600327)
		methodSprite2D[6] = gdnative.MethodOf("Sprite2D\000", "set_flip_h\000", 2586408642)
		methodSprite2D[7] = gdnative.MethodOf("Sprite2D\000", "is_flipped_h\000", 36873697)
		methodSprite2D[8] = gdnative.MethodOf("Sprite2D\000", "set_flip_v\000", 2586408642)
		methodSprite2D[9] = gdnative.MethodOf("Sprite2D\000", "is_flipped_v\000", 36873697)
		methodSprite2D[10] = gdnative.MethodOf("Sprite2D\000", "set_region_enabled\000", 2586408642)
		methodSprite2D[11] = gdnative.MethodOf("Sprite2D\000", "is_region_enabled\000", 36873697)
		methodSprite2D[12] = gdnative.MethodOf("Sprite2D\000", "is_pixel_opaque\000", 556197845)
		methodSprite2D[13] = gdnative.MethodOf("Sprite2D\000", "set_region_rect\000", 2046264180)
		methodSprite2D[14] = gdnative.MethodOf("Sprite2D\000", "get_region_rect\000", 1639390495)
		methodSprite2D[15] = gdnative.MethodOf("Sprite2D\000", "set_region_filter_clip_enabled\000", 2586408642)
		methodSprite2D[16] = gdnative.MethodOf("Sprite2D\000", "is_region_filter_clip_enabled\000", 36873697)
		methodSprite2D[17] = gdnative.MethodOf("Sprite2D\000", "set_frame\000", 1286410249)
		methodSprite2D[18] = gdnative.MethodOf("Sprite2D\000", "get_frame\000", 3905245786)
		methodSprite2D[19] = gdnative.MethodOf("Sprite2D\000", "set_frame_coords\000", 1130785943)
		methodSprite2D[20] = gdnative.MethodOf("Sprite2D\000", "get_frame_coords\000", 3690982128)
		methodSprite2D[21] = gdnative.MethodOf("Sprite2D\000", "set_vframes\000", 1286410249)
		methodSprite2D[22] = gdnative.MethodOf("Sprite2D\000", "get_vframes\000", 3905245786)
		methodSprite2D[23] = gdnative.MethodOf("Sprite2D\000", "set_hframes\000", 1286410249)
		methodSprite2D[24] = gdnative.MethodOf("Sprite2D\000", "get_hframes\000", 3905245786)
		methodSprite2D[25] = gdnative.MethodOf("Sprite2D\000", "get_rect\000", 1639390495)
		methodSprite3D[0] = gdnative.MethodOf("Sprite3D\000", "set_texture\000", 4051416890)
		methodSprite3D[1] = gdnative.MethodOf("Sprite3D\000", "get_texture\000", 3635182373)
		methodSprite3D[2] = gdnative.MethodOf("Sprite3D\000", "set_region_enabled\000", 2586408642)
		methodSprite3D[3] = gdnative.MethodOf("Sprite3D\000", "is_region_enabled\000", 36873697)
		methodSprite3D[4] = gdnative.MethodOf("Sprite3D\000", "set_region_rect\000", 2046264180)
		methodSprite3D[5] = gdnative.MethodOf("Sprite3D\000", "get_region_rect\000", 1639390495)
		methodSprite3D[6] = gdnative.MethodOf("Sprite3D\000", "set_frame\000", 1286410249)
		methodSprite3D[7] = gdnative.MethodOf("Sprite3D\000", "get_frame\000", 3905245786)
		methodSprite3D[8] = gdnative.MethodOf("Sprite3D\000", "set_frame_coords\000", 1130785943)
		methodSprite3D[9] = gdnative.MethodOf("Sprite3D\000", "get_frame_coords\000", 3690982128)
		methodSprite3D[10] = gdnative.MethodOf("Sprite3D\000", "set_vframes\000", 1286410249)
		methodSprite3D[11] = gdnative.MethodOf("Sprite3D\000", "get_vframes\000", 3905245786)
		methodSprite3D[12] = gdnative.MethodOf("Sprite3D\000", "set_hframes\000", 1286410249)
		methodSprite3D[13] = gdnative.MethodOf("Sprite3D\000", "get_hframes\000", 3905245786)
		methodSpriteBase3D[0] = gdnative.MethodOf("SpriteBase3D\000", "set_centered\000", 2586408642)
		methodSpriteBase3D[1] = gdnative.MethodOf("SpriteBase3D\000", "is_centered\000", 36873697)
		methodSpriteBase3D[2] = gdnative.MethodOf("SpriteBase3D\000", "set_offset\000", 743155724)
		methodSpriteBase3D[3] = gdnative.MethodOf("SpriteBase3D\000", "get_offset\000", 3341600327)
		methodSpriteBase3D[4] = gdnative.MethodOf("SpriteBase3D\000", "set_flip_h\000", 2586408642)
		methodSpriteBase3D[5] = gdnative.MethodOf("SpriteBase3D\000", "is_flipped_h\000", 36873697)
		methodSpriteBase3D[6] = gdnative.MethodOf("SpriteBase3D\000", "set_flip_v\000", 2586408642)
		methodSpriteBase3D[7] = gdnative.MethodOf("SpriteBase3D\000", "is_flipped_v\000", 36873697)
		methodSpriteBase3D[8] = gdnative.MethodOf("SpriteBase3D\000", "set_modulate\000", 2920490490)
		methodSpriteBase3D[9] = gdnative.MethodOf("SpriteBase3D\000", "get_modulate\000", 3444240500)
		methodSpriteBase3D[10] = gdnative.MethodOf("SpriteBase3D\000", "set_render_priority\000", 1286410249)
		methodSpriteBase3D[11] = gdnative.MethodOf("SpriteBase3D\000", "get_render_priority\000", 3905245786)
		methodSpriteBase3D[12] = gdnative.MethodOf("SpriteBase3D\000", "set_pixel_size\000", 373806689)
		methodSpriteBase3D[13] = gdnative.MethodOf("SpriteBase3D\000", "get_pixel_size\000", 1740695150)
		methodSpriteBase3D[14] = gdnative.MethodOf("SpriteBase3D\000", "set_axis\000", 1144690656)
		methodSpriteBase3D[15] = gdnative.MethodOf("SpriteBase3D\000", "get_axis\000", 3050976882)
		methodSpriteBase3D[16] = gdnative.MethodOf("SpriteBase3D\000", "set_draw_flag\000", 1135633219)
		methodSpriteBase3D[17] = gdnative.MethodOf("SpriteBase3D\000", "get_draw_flag\000", 1733036628)
		methodSpriteBase3D[18] = gdnative.MethodOf("SpriteBase3D\000", "set_alpha_cut_mode\000", 227561226)
		methodSpriteBase3D[19] = gdnative.MethodOf("SpriteBase3D\000", "get_alpha_cut_mode\000", 336003791)
		methodSpriteBase3D[20] = gdnative.MethodOf("SpriteBase3D\000", "set_billboard_mode\000", 4202036497)
		methodSpriteBase3D[21] = gdnative.MethodOf("SpriteBase3D\000", "get_billboard_mode\000", 1283840139)
		methodSpriteBase3D[22] = gdnative.MethodOf("SpriteBase3D\000", "set_texture_filter\000", 22904437)
		methodSpriteBase3D[23] = gdnative.MethodOf("SpriteBase3D\000", "get_texture_filter\000", 3289213076)
		methodSpriteBase3D[24] = gdnative.MethodOf("SpriteBase3D\000", "get_item_rect\000", 1639390495)
		methodSpriteBase3D[25] = gdnative.MethodOf("SpriteBase3D\000", "generate_triangle_mesh\000", 3476533166)
		methodSpriteFrames[0] = gdnative.MethodOf("SpriteFrames\000", "add_animation\000", 3304788590)
		methodSpriteFrames[1] = gdnative.MethodOf("SpriteFrames\000", "has_animation\000", 2619796661)
		methodSpriteFrames[2] = gdnative.MethodOf("SpriteFrames\000", "remove_animation\000", 3304788590)
		methodSpriteFrames[3] = gdnative.MethodOf("SpriteFrames\000", "rename_animation\000", 3740211285)
		methodSpriteFrames[4] = gdnative.MethodOf("SpriteFrames\000", "get_animation_names\000", 1139954409)
		methodSpriteFrames[5] = gdnative.MethodOf("SpriteFrames\000", "set_animation_speed\000", 4135858297)
		methodSpriteFrames[6] = gdnative.MethodOf("SpriteFrames\000", "get_animation_speed\000", 2349060816)
		methodSpriteFrames[7] = gdnative.MethodOf("SpriteFrames\000", "set_animation_loop\000", 2524380260)
		methodSpriteFrames[8] = gdnative.MethodOf("SpriteFrames\000", "get_animation_loop\000", 2619796661)
		methodSpriteFrames[9] = gdnative.MethodOf("SpriteFrames\000", "add_frame\000", 1628453603)
		methodSpriteFrames[10] = gdnative.MethodOf("SpriteFrames\000", "get_frame_count\000", 2458036349)
		methodSpriteFrames[11] = gdnative.MethodOf("SpriteFrames\000", "get_frame\000", 2900517879)
		methodSpriteFrames[12] = gdnative.MethodOf("SpriteFrames\000", "set_frame\000", 3435961619)
		methodSpriteFrames[13] = gdnative.MethodOf("SpriteFrames\000", "remove_frame\000", 2415702435)
		methodSpriteFrames[14] = gdnative.MethodOf("SpriteFrames\000", "clear\000", 3304788590)
		methodSpriteFrames[15] = gdnative.MethodOf("SpriteFrames\000", "clear_all\000", 3218959716)
		methodStaticBody2D[0] = gdnative.MethodOf("StaticBody2D\000", "set_constant_linear_velocity\000", 743155724)
		methodStaticBody2D[1] = gdnative.MethodOf("StaticBody2D\000", "set_constant_angular_velocity\000", 373806689)
		methodStaticBody2D[2] = gdnative.MethodOf("StaticBody2D\000", "get_constant_linear_velocity\000", 3341600327)
		methodStaticBody2D[3] = gdnative.MethodOf("StaticBody2D\000", "get_constant_angular_velocity\000", 1740695150)
		methodStaticBody2D[4] = gdnative.MethodOf("StaticBody2D\000", "set_physics_material_override\000", 1784508650)
		methodStaticBody2D[5] = gdnative.MethodOf("StaticBody2D\000", "get_physics_material_override\000", 2521850424)
		methodStaticBody3D[0] = gdnative.MethodOf("StaticBody3D\000", "set_constant_linear_velocity\000", 3460891852)
		methodStaticBody3D[1] = gdnative.MethodOf("StaticBody3D\000", "set_constant_angular_velocity\000", 3460891852)
		methodStaticBody3D[2] = gdnative.MethodOf("StaticBody3D\000", "get_constant_linear_velocity\000", 3360562783)
		methodStaticBody3D[3] = gdnative.MethodOf("StaticBody3D\000", "get_constant_angular_velocity\000", 3360562783)
		methodStaticBody3D[4] = gdnative.MethodOf("StaticBody3D\000", "set_physics_material_override\000", 1784508650)
		methodStaticBody3D[5] = gdnative.MethodOf("StaticBody3D\000", "get_physics_material_override\000", 2521850424)
		methodStreamPeer[0] = gdnative.MethodOf("StreamPeer\000", "put_data\000", 680677267)
		methodStreamPeer[1] = gdnative.MethodOf("StreamPeer\000", "put_partial_data\000", 2934048347)
		methodStreamPeer[2] = gdnative.MethodOf("StreamPeer\000", "get_data\000", 1171824711)
		methodStreamPeer[3] = gdnative.MethodOf("StreamPeer\000", "get_partial_data\000", 1171824711)
		methodStreamPeer[4] = gdnative.MethodOf("StreamPeer\000", "get_available_bytes\000", 3905245786)
		methodStreamPeer[5] = gdnative.MethodOf("StreamPeer\000", "set_big_endian\000", 2586408642)
		methodStreamPeer[6] = gdnative.MethodOf("StreamPeer\000", "is_big_endian_enabled\000", 36873697)
		methodStreamPeer[7] = gdnative.MethodOf("StreamPeer\000", "put_8\000", 1286410249)
		methodStreamPeer[8] = gdnative.MethodOf("StreamPeer\000", "put_u8\000", 1286410249)
		methodStreamPeer[9] = gdnative.MethodOf("StreamPeer\000", "put_16\000", 1286410249)
		methodStreamPeer[10] = gdnative.MethodOf("StreamPeer\000", "put_u16\000", 1286410249)
		methodStreamPeer[11] = gdnative.MethodOf("StreamPeer\000", "put_32\000", 1286410249)
		methodStreamPeer[12] = gdnative.MethodOf("StreamPeer\000", "put_u32\000", 1286410249)
		methodStreamPeer[13] = gdnative.MethodOf("StreamPeer\000", "put_64\000", 1286410249)
		methodStreamPeer[14] = gdnative.MethodOf("StreamPeer\000", "put_u64\000", 1286410249)
		methodStreamPeer[15] = gdnative.MethodOf("StreamPeer\000", "put_float\000", 373806689)
		methodStreamPeer[16] = gdnative.MethodOf("StreamPeer\000", "put_double\000", 373806689)
		methodStreamPeer[17] = gdnative.MethodOf("StreamPeer\000", "put_string\000", 83702148)
		methodStreamPeer[18] = gdnative.MethodOf("StreamPeer\000", "put_utf8_string\000", 83702148)
		methodStreamPeer[19] = gdnative.MethodOf("StreamPeer\000", "put_var\000", 738511890)
		methodStreamPeer[20] = gdnative.MethodOf("StreamPeer\000", "get_8\000", 2455072627)
		methodStreamPeer[21] = gdnative.MethodOf("StreamPeer\000", "get_u8\000", 2455072627)
		methodStreamPeer[22] = gdnative.MethodOf("StreamPeer\000", "get_16\000", 2455072627)
		methodStreamPeer[23] = gdnative.MethodOf("StreamPeer\000", "get_u16\000", 2455072627)
		methodStreamPeer[24] = gdnative.MethodOf("StreamPeer\000", "get_32\000", 2455072627)
		methodStreamPeer[25] = gdnative.MethodOf("StreamPeer\000", "get_u32\000", 2455072627)
		methodStreamPeer[26] = gdnative.MethodOf("StreamPeer\000", "get_64\000", 2455072627)
		methodStreamPeer[27] = gdnative.MethodOf("StreamPeer\000", "get_u64\000", 2455072627)
		methodStreamPeer[28] = gdnative.MethodOf("StreamPeer\000", "get_float\000", 191475506)
		methodStreamPeer[29] = gdnative.MethodOf("StreamPeer\000", "get_double\000", 191475506)
		methodStreamPeer[30] = gdnative.MethodOf("StreamPeer\000", "get_string\000", 2309358862)
		methodStreamPeer[31] = gdnative.MethodOf("StreamPeer\000", "get_utf8_string\000", 2309358862)
		methodStreamPeer[32] = gdnative.MethodOf("StreamPeer\000", "get_var\000", 3442865206)
		methodStreamPeerBuffer[0] = gdnative.MethodOf("StreamPeerBuffer\000", "seek\000", 1286410249)
		methodStreamPeerBuffer[1] = gdnative.MethodOf("StreamPeerBuffer\000", "get_size\000", 3905245786)
		methodStreamPeerBuffer[2] = gdnative.MethodOf("StreamPeerBuffer\000", "get_position\000", 3905245786)
		methodStreamPeerBuffer[3] = gdnative.MethodOf("StreamPeerBuffer\000", "resize\000", 1286410249)
		methodStreamPeerBuffer[4] = gdnative.MethodOf("StreamPeerBuffer\000", "set_data_array\000", 2971499966)
		methodStreamPeerBuffer[5] = gdnative.MethodOf("StreamPeerBuffer\000", "get_data_array\000", 2362200018)
		methodStreamPeerBuffer[6] = gdnative.MethodOf("StreamPeerBuffer\000", "clear\000", 3218959716)
		methodStreamPeerBuffer[7] = gdnative.MethodOf("StreamPeerBuffer\000", "duplicate\000", 2474064677)
		methodStreamPeerSSL[0] = gdnative.MethodOf("StreamPeerSSL\000", "poll\000", 3218959716)
		methodStreamPeerSSL[1] = gdnative.MethodOf("StreamPeerSSL\000", "accept_stream\000", 2359858912)
		methodStreamPeerSSL[2] = gdnative.MethodOf("StreamPeerSSL\000", "connect_to_stream\000", 127827767)
		methodStreamPeerSSL[3] = gdnative.MethodOf("StreamPeerSSL\000", "get_status\000", 524219300)
		methodStreamPeerSSL[4] = gdnative.MethodOf("StreamPeerSSL\000", "get_stream\000", 2741655269)
		methodStreamPeerSSL[5] = gdnative.MethodOf("StreamPeerSSL\000", "disconnect_from_stream\000", 3218959716)
		methodStreamPeerSSL[6] = gdnative.MethodOf("StreamPeerSSL\000", "set_blocking_handshake_enabled\000", 2586408642)
		methodStreamPeerSSL[7] = gdnative.MethodOf("StreamPeerSSL\000", "is_blocking_handshake_enabled\000", 36873697)
		methodStreamPeerTCP[0] = gdnative.MethodOf("StreamPeerTCP\000", "bind\000", 4025329869)
		methodStreamPeerTCP[1] = gdnative.MethodOf("StreamPeerTCP\000", "connect_to_host\000", 993915709)
		methodStreamPeerTCP[2] = gdnative.MethodOf("StreamPeerTCP\000", "poll\000", 166280745)
		methodStreamPeerTCP[3] = gdnative.MethodOf("StreamPeerTCP\000", "get_status\000", 859471121)
		methodStreamPeerTCP[4] = gdnative.MethodOf("StreamPeerTCP\000", "get_connected_host\000", 201670096)
		methodStreamPeerTCP[5] = gdnative.MethodOf("StreamPeerTCP\000", "get_connected_port\000", 3905245786)
		methodStreamPeerTCP[6] = gdnative.MethodOf("StreamPeerTCP\000", "get_local_port\000", 3905245786)
		methodStreamPeerTCP[7] = gdnative.MethodOf("StreamPeerTCP\000", "disconnect_from_host\000", 3218959716)
		methodStreamPeerTCP[8] = gdnative.MethodOf("StreamPeerTCP\000", "set_no_delay\000", 2586408642)
		methodStyleBox[0] = gdnative.MethodOf("StyleBox\000", "test_mask\000", 3735564539)
		methodStyleBox[1] = gdnative.MethodOf("StyleBox\000", "set_default_margin\000", 4290182280)
		methodStyleBox[2] = gdnative.MethodOf("StyleBox\000", "get_default_margin\000", 2869120046)
		methodStyleBox[3] = gdnative.MethodOf("StyleBox\000", "get_margin\000", 2869120046)
		methodStyleBox[4] = gdnative.MethodOf("StyleBox\000", "get_minimum_size\000", 3341600327)
		methodStyleBox[5] = gdnative.MethodOf("StyleBox\000", "get_center_size\000", 3341600327)
		methodStyleBox[6] = gdnative.MethodOf("StyleBox\000", "get_offset\000", 3341600327)
		methodStyleBox[7] = gdnative.MethodOf("StyleBox\000", "get_current_item_drawn\000", 3213695180)
		methodStyleBox[8] = gdnative.MethodOf("StyleBox\000", "draw\000", 2275962004)
		methodStyleBoxFlat[0] = gdnative.MethodOf("StyleBoxFlat\000", "set_bg_color\000", 2920490490)
		methodStyleBoxFlat[1] = gdnative.MethodOf("StyleBoxFlat\000", "get_bg_color\000", 3444240500)
		methodStyleBoxFlat[2] = gdnative.MethodOf("StyleBoxFlat\000", "set_border_color\000", 2920490490)
		methodStyleBoxFlat[3] = gdnative.MethodOf("StyleBoxFlat\000", "get_border_color\000", 3444240500)
		methodStyleBoxFlat[4] = gdnative.MethodOf("StyleBoxFlat\000", "set_border_width_all\000", 1286410249)
		methodStyleBoxFlat[5] = gdnative.MethodOf("StyleBoxFlat\000", "get_border_width_min\000", 3905245786)
		methodStyleBoxFlat[6] = gdnative.MethodOf("StyleBoxFlat\000", "set_border_width\000", 437707142)
		methodStyleBoxFlat[7] = gdnative.MethodOf("StyleBoxFlat\000", "get_border_width\000", 1983885014)
		methodStyleBoxFlat[8] = gdnative.MethodOf("StyleBoxFlat\000", "set_border_blend\000", 2586408642)
		methodStyleBoxFlat[9] = gdnative.MethodOf("StyleBoxFlat\000", "get_border_blend\000", 36873697)
		methodStyleBoxFlat[10] = gdnative.MethodOf("StyleBoxFlat\000", "set_corner_radius_individual\000", 4275841770)
		methodStyleBoxFlat[11] = gdnative.MethodOf("StyleBoxFlat\000", "set_corner_radius_all\000", 1286410249)
		methodStyleBoxFlat[12] = gdnative.MethodOf("StyleBoxFlat\000", "set_corner_radius\000", 2696158768)
		methodStyleBoxFlat[13] = gdnative.MethodOf("StyleBoxFlat\000", "get_corner_radius\000", 3982397690)
		methodStyleBoxFlat[14] = gdnative.MethodOf("StyleBoxFlat\000", "set_expand_margin\000", 4290182280)
		methodStyleBoxFlat[15] = gdnative.MethodOf("StyleBoxFlat\000", "set_expand_margin_all\000", 373806689)
		methodStyleBoxFlat[16] = gdnative.MethodOf("StyleBoxFlat\000", "set_expand_margin_individual\000", 3948312143)
		methodStyleBoxFlat[17] = gdnative.MethodOf("StyleBoxFlat\000", "get_expand_margin\000", 2869120046)
		methodStyleBoxFlat[18] = gdnative.MethodOf("StyleBoxFlat\000", "set_draw_center\000", 2586408642)
		methodStyleBoxFlat[19] = gdnative.MethodOf("StyleBoxFlat\000", "is_draw_center_enabled\000", 36873697)
		methodStyleBoxFlat[20] = gdnative.MethodOf("StyleBoxFlat\000", "set_skew\000", 743155724)
		methodStyleBoxFlat[21] = gdnative.MethodOf("StyleBoxFlat\000", "get_skew\000", 3341600327)
		methodStyleBoxFlat[22] = gdnative.MethodOf("StyleBoxFlat\000", "set_shadow_color\000", 2920490490)
		methodStyleBoxFlat[23] = gdnative.MethodOf("StyleBoxFlat\000", "get_shadow_color\000", 3444240500)
		methodStyleBoxFlat[24] = gdnative.MethodOf("StyleBoxFlat\000", "set_shadow_size\000", 1286410249)
		methodStyleBoxFlat[25] = gdnative.MethodOf("StyleBoxFlat\000", "get_shadow_size\000", 3905245786)
		methodStyleBoxFlat[26] = gdnative.MethodOf("StyleBoxFlat\000", "set_shadow_offset\000", 743155724)
		methodStyleBoxFlat[27] = gdnative.MethodOf("StyleBoxFlat\000", "get_shadow_offset\000", 3341600327)
		methodStyleBoxFlat[28] = gdnative.MethodOf("StyleBoxFlat\000", "set_anti_aliased\000", 2586408642)
		methodStyleBoxFlat[29] = gdnative.MethodOf("StyleBoxFlat\000", "is_anti_aliased\000", 36873697)
		methodStyleBoxFlat[30] = gdnative.MethodOf("StyleBoxFlat\000", "set_aa_size\000", 373806689)
		methodStyleBoxFlat[31] = gdnative.MethodOf("StyleBoxFlat\000", "get_aa_size\000", 1740695150)
		methodStyleBoxFlat[32] = gdnative.MethodOf("StyleBoxFlat\000", "set_corner_detail\000", 1286410249)
		methodStyleBoxFlat[33] = gdnative.MethodOf("StyleBoxFlat\000", "get_corner_detail\000", 3905245786)
		methodStyleBoxLine[0] = gdnative.MethodOf("StyleBoxLine\000", "set_color\000", 2920490490)
		methodStyleBoxLine[1] = gdnative.MethodOf("StyleBoxLine\000", "get_color\000", 3444240500)
		methodStyleBoxLine[2] = gdnative.MethodOf("StyleBoxLine\000", "set_thickness\000", 1286410249)
		methodStyleBoxLine[3] = gdnative.MethodOf("StyleBoxLine\000", "get_thickness\000", 3905245786)
		methodStyleBoxLine[4] = gdnative.MethodOf("StyleBoxLine\000", "set_grow_begin\000", 373806689)
		methodStyleBoxLine[5] = gdnative.MethodOf("StyleBoxLine\000", "get_grow_begin\000", 1740695150)
		methodStyleBoxLine[6] = gdnative.MethodOf("StyleBoxLine\000", "set_grow_end\000", 373806689)
		methodStyleBoxLine[7] = gdnative.MethodOf("StyleBoxLine\000", "get_grow_end\000", 1740695150)
		methodStyleBoxLine[8] = gdnative.MethodOf("StyleBoxLine\000", "set_vertical\000", 2586408642)
		methodStyleBoxLine[9] = gdnative.MethodOf("StyleBoxLine\000", "is_vertical\000", 36873697)
		methodStyleBoxTexture[0] = gdnative.MethodOf("StyleBoxTexture\000", "set_texture\000", 4051416890)
		methodStyleBoxTexture[1] = gdnative.MethodOf("StyleBoxTexture\000", "get_texture\000", 3635182373)
		methodStyleBoxTexture[2] = gdnative.MethodOf("StyleBoxTexture\000", "set_margin_size\000", 4290182280)
		methodStyleBoxTexture[3] = gdnative.MethodOf("StyleBoxTexture\000", "get_margin_size\000", 2869120046)
		methodStyleBoxTexture[4] = gdnative.MethodOf("StyleBoxTexture\000", "set_expand_margin_size\000", 4290182280)
		methodStyleBoxTexture[5] = gdnative.MethodOf("StyleBoxTexture\000", "set_expand_margin_all\000", 373806689)
		methodStyleBoxTexture[6] = gdnative.MethodOf("StyleBoxTexture\000", "set_expand_margin_individual\000", 3948312143)
		methodStyleBoxTexture[7] = gdnative.MethodOf("StyleBoxTexture\000", "get_expand_margin_size\000", 2869120046)
		methodStyleBoxTexture[8] = gdnative.MethodOf("StyleBoxTexture\000", "set_region_rect\000", 2046264180)
		methodStyleBoxTexture[9] = gdnative.MethodOf("StyleBoxTexture\000", "get_region_rect\000", 1639390495)
		methodStyleBoxTexture[10] = gdnative.MethodOf("StyleBoxTexture\000", "set_draw_center\000", 2586408642)
		methodStyleBoxTexture[11] = gdnative.MethodOf("StyleBoxTexture\000", "is_draw_center_enabled\000", 36873697)
		methodStyleBoxTexture[12] = gdnative.MethodOf("StyleBoxTexture\000", "set_modulate\000", 2920490490)
		methodStyleBoxTexture[13] = gdnative.MethodOf("StyleBoxTexture\000", "get_modulate\000", 3444240500)
		methodStyleBoxTexture[14] = gdnative.MethodOf("StyleBoxTexture\000", "set_h_axis_stretch_mode\000", 2965538783)
		methodStyleBoxTexture[15] = gdnative.MethodOf("StyleBoxTexture\000", "get_h_axis_stretch_mode\000", 3807744063)
		methodStyleBoxTexture[16] = gdnative.MethodOf("StyleBoxTexture\000", "set_v_axis_stretch_mode\000", 2965538783)
		methodStyleBoxTexture[17] = gdnative.MethodOf("StyleBoxTexture\000", "get_v_axis_stretch_mode\000", 3807744063)
		methodSubViewport[0] = gdnative.MethodOf("SubViewport\000", "set_size\000", 1130785943)
		methodSubViewport[1] = gdnative.MethodOf("SubViewport\000", "get_size\000", 3690982128)
		methodSubViewport[2] = gdnative.MethodOf("SubViewport\000", "set_size_2d_override\000", 1130785943)
		methodSubViewport[3] = gdnative.MethodOf("SubViewport\000", "get_size_2d_override\000", 3690982128)
		methodSubViewport[4] = gdnative.MethodOf("SubViewport\000", "set_size_2d_override_stretch\000", 2586408642)
		methodSubViewport[5] = gdnative.MethodOf("SubViewport\000", "is_size_2d_override_stretch_enabled\000", 36873697)
		methodSubViewport[6] = gdnative.MethodOf("SubViewport\000", "set_update_mode\000", 1295690030)
		methodSubViewport[7] = gdnative.MethodOf("SubViewport\000", "get_update_mode\000", 2980171553)
		methodSubViewport[8] = gdnative.MethodOf("SubViewport\000", "set_clear_mode\000", 2834454712)
		methodSubViewport[9] = gdnative.MethodOf("SubViewport\000", "get_clear_mode\000", 331324495)
		methodSubViewportContainer[0] = gdnative.MethodOf("SubViewportContainer\000", "set_stretch\000", 2586408642)
		methodSubViewportContainer[1] = gdnative.MethodOf("SubViewportContainer\000", "is_stretch_enabled\000", 36873697)
		methodSubViewportContainer[2] = gdnative.MethodOf("SubViewportContainer\000", "set_stretch_shrink\000", 1286410249)
		methodSubViewportContainer[3] = gdnative.MethodOf("SubViewportContainer\000", "get_stretch_shrink\000", 3905245786)
		methodSurfaceTool[0] = gdnative.MethodOf("SurfaceTool\000", "set_skin_weight_count\000", 618679515)
		methodSurfaceTool[1] = gdnative.MethodOf("SurfaceTool\000", "get_skin_weight_count\000", 1072401130)
		methodSurfaceTool[2] = gdnative.MethodOf("SurfaceTool\000", "set_custom_format\000", 4087759856)
		methodSurfaceTool[3] = gdnative.MethodOf("SurfaceTool\000", "get_custom_format\000", 839863283)
		methodSurfaceTool[4] = gdnative.MethodOf("SurfaceTool\000", "begin\000", 2230304113)
		methodSurfaceTool[5] = gdnative.MethodOf("SurfaceTool\000", "add_vertex\000", 3460891852)
		methodSurfaceTool[6] = gdnative.MethodOf("SurfaceTool\000", "set_color\000", 2920490490)
		methodSurfaceTool[7] = gdnative.MethodOf("SurfaceTool\000", "set_normal\000", 3460891852)
		methodSurfaceTool[8] = gdnative.MethodOf("SurfaceTool\000", "set_tangent\000", 3505987427)
		methodSurfaceTool[9] = gdnative.MethodOf("SurfaceTool\000", "set_uv\000", 743155724)
		methodSurfaceTool[10] = gdnative.MethodOf("SurfaceTool\000", "set_uv2\000", 743155724)
		methodSurfaceTool[11] = gdnative.MethodOf("SurfaceTool\000", "set_bones\000", 3614634198)
		methodSurfaceTool[12] = gdnative.MethodOf("SurfaceTool\000", "set_weights\000", 2899603908)
		methodSurfaceTool[13] = gdnative.MethodOf("SurfaceTool\000", "set_custom\000", 2878471219)
		methodSurfaceTool[14] = gdnative.MethodOf("SurfaceTool\000", "set_smooth_group\000", 1286410249)
		methodSurfaceTool[15] = gdnative.MethodOf("SurfaceTool\000", "add_triangle_fan\000", 297960074)
		methodSurfaceTool[16] = gdnative.MethodOf("SurfaceTool\000", "add_index\000", 1286410249)
		methodSurfaceTool[17] = gdnative.MethodOf("SurfaceTool\000", "index\000", 3218959716)
		methodSurfaceTool[18] = gdnative.MethodOf("SurfaceTool\000", "deindex\000", 3218959716)
		methodSurfaceTool[19] = gdnative.MethodOf("SurfaceTool\000", "generate_normals\000", 107499316)
		methodSurfaceTool[20] = gdnative.MethodOf("SurfaceTool\000", "generate_tangents\000", 3218959716)
		methodSurfaceTool[21] = gdnative.MethodOf("SurfaceTool\000", "optimize_indices_for_cache\000", 3218959716)
		methodSurfaceTool[22] = gdnative.MethodOf("SurfaceTool\000", "get_aabb\000", 1068685055)
		methodSurfaceTool[23] = gdnative.MethodOf("SurfaceTool\000", "generate_lod\000", 1894448909)
		methodSurfaceTool[24] = gdnative.MethodOf("SurfaceTool\000", "set_material\000", 2757459619)
		methodSurfaceTool[25] = gdnative.MethodOf("SurfaceTool\000", "get_primitive_type\000", 768822145)
		methodSurfaceTool[26] = gdnative.MethodOf("SurfaceTool\000", "clear\000", 3218959716)
		methodSurfaceTool[27] = gdnative.MethodOf("SurfaceTool\000", "create_from\000", 1767024570)
		methodSurfaceTool[28] = gdnative.MethodOf("SurfaceTool\000", "create_from_blend_shape\000", 1306185582)
		methodSurfaceTool[29] = gdnative.MethodOf("SurfaceTool\000", "append_from\000", 2217967155)
		methodSurfaceTool[30] = gdnative.MethodOf("SurfaceTool\000", "commit\000", 4107864055)
		methodSurfaceTool[31] = gdnative.MethodOf("SurfaceTool\000", "commit_to_arrays\000", 2915620761)
		methodSyntaxHighlighter[0] = gdnative.MethodOf("SyntaxHighlighter\000", "get_line_syntax_highlighting\000", 3554694381)
		methodSyntaxHighlighter[1] = gdnative.MethodOf("SyntaxHighlighter\000", "update_cache\000", 3218959716)
		methodSyntaxHighlighter[2] = gdnative.MethodOf("SyntaxHighlighter\000", "clear_highlighting_cache\000", 3218959716)
		methodSyntaxHighlighter[3] = gdnative.MethodOf("SyntaxHighlighter\000", "get_text_edit\000", 2185802765)
		methodSystemFont[0] = gdnative.MethodOf("SystemFont\000", "set_antialiased\000", 2586408642)
		methodSystemFont[1] = gdnative.MethodOf("SystemFont\000", "is_antialiased\000", 36873697)
		methodSystemFont[2] = gdnative.MethodOf("SystemFont\000", "set_generate_mipmaps\000", 2586408642)
		methodSystemFont[3] = gdnative.MethodOf("SystemFont\000", "get_generate_mipmaps\000", 36873697)
		methodSystemFont[4] = gdnative.MethodOf("SystemFont\000", "set_force_autohinter\000", 2586408642)
		methodSystemFont[5] = gdnative.MethodOf("SystemFont\000", "is_force_autohinter\000", 36873697)
		methodSystemFont[6] = gdnative.MethodOf("SystemFont\000", "set_hinting\000", 1827459492)
		methodSystemFont[7] = gdnative.MethodOf("SystemFont\000", "get_hinting\000", 3683214614)
		methodSystemFont[8] = gdnative.MethodOf("SystemFont\000", "set_subpixel_positioning\000", 4225742182)
		methodSystemFont[9] = gdnative.MethodOf("SystemFont\000", "get_subpixel_positioning\000", 1069238588)
		methodSystemFont[10] = gdnative.MethodOf("SystemFont\000", "set_multichannel_signed_distance_field\000", 2586408642)
		methodSystemFont[11] = gdnative.MethodOf("SystemFont\000", "is_multichannel_signed_distance_field\000", 36873697)
		methodSystemFont[12] = gdnative.MethodOf("SystemFont\000", "set_oversampling\000", 373806689)
		methodSystemFont[13] = gdnative.MethodOf("SystemFont\000", "get_oversampling\000", 1740695150)
		methodSystemFont[14] = gdnative.MethodOf("SystemFont\000", "get_font_names\000", 1139954409)
		methodSystemFont[15] = gdnative.MethodOf("SystemFont\000", "set_font_names\000", 4015028928)
		methodSystemFont[16] = gdnative.MethodOf("SystemFont\000", "set_font_style\000", 918070724)
		methodTCPServer[0] = gdnative.MethodOf("TCPServer\000", "listen\000", 4025329869)
		methodTCPServer[1] = gdnative.MethodOf("TCPServer\000", "is_connection_available\000", 36873697)
		methodTCPServer[2] = gdnative.MethodOf("TCPServer\000", "is_listening\000", 36873697)
		methodTCPServer[3] = gdnative.MethodOf("TCPServer\000", "get_local_port\000", 3905245786)
		methodTCPServer[4] = gdnative.MethodOf("TCPServer\000", "take_connection\000", 30545006)
		methodTCPServer[5] = gdnative.MethodOf("TCPServer\000", "stop\000", 3218959716)
		methodTabBar[0] = gdnative.MethodOf("TabBar\000", "set_tab_count\000", 1286410249)
		methodTabBar[1] = gdnative.MethodOf("TabBar\000", "get_tab_count\000", 3905245786)
		methodTabBar[2] = gdnative.MethodOf("TabBar\000", "set_current_tab\000", 1286410249)
		methodTabBar[3] = gdnative.MethodOf("TabBar\000", "get_current_tab\000", 3905245786)
		methodTabBar[4] = gdnative.MethodOf("TabBar\000", "get_previous_tab\000", 3905245786)
		methodTabBar[5] = gdnative.MethodOf("TabBar\000", "set_tab_title\000", 501894301)
		methodTabBar[6] = gdnative.MethodOf("TabBar\000", "get_tab_title\000", 844755477)
		methodTabBar[7] = gdnative.MethodOf("TabBar\000", "set_tab_text_direction\000", 1707680378)
		methodTabBar[8] = gdnative.MethodOf("TabBar\000", "get_tab_text_direction\000", 4235602388)
		methodTabBar[9] = gdnative.MethodOf("TabBar\000", "set_tab_language\000", 501894301)
		methodTabBar[10] = gdnative.MethodOf("TabBar\000", "get_tab_language\000", 844755477)
		methodTabBar[11] = gdnative.MethodOf("TabBar\000", "set_tab_icon\000", 666127730)
		methodTabBar[12] = gdnative.MethodOf("TabBar\000", "get_tab_icon\000", 3536238170)
		methodTabBar[13] = gdnative.MethodOf("TabBar\000", "set_tab_button_icon\000", 666127730)
		methodTabBar[14] = gdnative.MethodOf("TabBar\000", "get_tab_button_icon\000", 3536238170)
		methodTabBar[15] = gdnative.MethodOf("TabBar\000", "set_tab_disabled\000", 300928843)
		methodTabBar[16] = gdnative.MethodOf("TabBar\000", "is_tab_disabled\000", 1116898809)
		methodTabBar[17] = gdnative.MethodOf("TabBar\000", "set_tab_hidden\000", 300928843)
		methodTabBar[18] = gdnative.MethodOf("TabBar\000", "is_tab_hidden\000", 1116898809)
		methodTabBar[19] = gdnative.MethodOf("TabBar\000", "remove_tab\000", 1286410249)
		methodTabBar[20] = gdnative.MethodOf("TabBar\000", "add_tab\000", 1465444425)
		methodTabBar[21] = gdnative.MethodOf("TabBar\000", "get_tab_idx_at_point\000", 3820158470)
		methodTabBar[22] = gdnative.MethodOf("TabBar\000", "set_tab_alignment\000", 2413632353)
		methodTabBar[23] = gdnative.MethodOf("TabBar\000", "get_tab_alignment\000", 2178122193)
		methodTabBar[24] = gdnative.MethodOf("TabBar\000", "set_clip_tabs\000", 2586408642)
		methodTabBar[25] = gdnative.MethodOf("TabBar\000", "get_clip_tabs\000", 36873697)
		methodTabBar[26] = gdnative.MethodOf("TabBar\000", "get_tab_offset\000", 3905245786)
		methodTabBar[27] = gdnative.MethodOf("TabBar\000", "get_offset_buttons_visible\000", 36873697)
		methodTabBar[28] = gdnative.MethodOf("TabBar\000", "ensure_tab_visible\000", 1286410249)
		methodTabBar[29] = gdnative.MethodOf("TabBar\000", "get_tab_rect\000", 3327874267)
		methodTabBar[30] = gdnative.MethodOf("TabBar\000", "move_tab\000", 3937882851)
		methodTabBar[31] = gdnative.MethodOf("TabBar\000", "set_tab_close_display_policy\000", 2212906737)
		methodTabBar[32] = gdnative.MethodOf("TabBar\000", "get_tab_close_display_policy\000", 2956568028)
		methodTabBar[33] = gdnative.MethodOf("TabBar\000", "set_max_tab_width\000", 1286410249)
		methodTabBar[34] = gdnative.MethodOf("TabBar\000", "get_max_tab_width\000", 3905245786)
		methodTabBar[35] = gdnative.MethodOf("TabBar\000", "set_scrolling_enabled\000", 2586408642)
		methodTabBar[36] = gdnative.MethodOf("TabBar\000", "get_scrolling_enabled\000", 36873697)
		methodTabBar[37] = gdnative.MethodOf("TabBar\000", "set_drag_to_rearrange_enabled\000", 2586408642)
		methodTabBar[38] = gdnative.MethodOf("TabBar\000", "get_drag_to_rearrange_enabled\000", 36873697)
		methodTabBar[39] = gdnative.MethodOf("TabBar\000", "set_tabs_rearrange_group\000", 1286410249)
		methodTabBar[40] = gdnative.MethodOf("TabBar\000", "get_tabs_rearrange_group\000", 3905245786)
		methodTabBar[41] = gdnative.MethodOf("TabBar\000", "set_scroll_to_selected\000", 2586408642)
		methodTabBar[42] = gdnative.MethodOf("TabBar\000", "get_scroll_to_selected\000", 36873697)
		methodTabBar[43] = gdnative.MethodOf("TabBar\000", "set_select_with_rmb\000", 2586408642)
		methodTabBar[44] = gdnative.MethodOf("TabBar\000", "get_select_with_rmb\000", 36873697)
		methodTabContainer[0] = gdnative.MethodOf("TabContainer\000", "get_tab_count\000", 3905245786)
		methodTabContainer[1] = gdnative.MethodOf("TabContainer\000", "set_current_tab\000", 1286410249)
		methodTabContainer[2] = gdnative.MethodOf("TabContainer\000", "get_current_tab\000", 3905245786)
		methodTabContainer[3] = gdnative.MethodOf("TabContainer\000", "get_previous_tab\000", 3905245786)
		methodTabContainer[4] = gdnative.MethodOf("TabContainer\000", "get_current_tab_control\000", 2783021301)
		methodTabContainer[5] = gdnative.MethodOf("TabContainer\000", "get_tab_control\000", 1065994134)
		methodTabContainer[6] = gdnative.MethodOf("TabContainer\000", "set_tab_alignment\000", 2413632353)
		methodTabContainer[7] = gdnative.MethodOf("TabContainer\000", "get_tab_alignment\000", 2178122193)
		methodTabContainer[8] = gdnative.MethodOf("TabContainer\000", "set_clip_tabs\000", 2586408642)
		methodTabContainer[9] = gdnative.MethodOf("TabContainer\000", "get_clip_tabs\000", 36873697)
		methodTabContainer[10] = gdnative.MethodOf("TabContainer\000", "set_tabs_visible\000", 2586408642)
		methodTabContainer[11] = gdnative.MethodOf("TabContainer\000", "are_tabs_visible\000", 36873697)
		methodTabContainer[12] = gdnative.MethodOf("TabContainer\000", "set_all_tabs_in_front\000", 2586408642)
		methodTabContainer[13] = gdnative.MethodOf("TabContainer\000", "is_all_tabs_in_front\000", 36873697)
		methodTabContainer[14] = gdnative.MethodOf("TabContainer\000", "set_tab_title\000", 501894301)
		methodTabContainer[15] = gdnative.MethodOf("TabContainer\000", "get_tab_title\000", 844755477)
		methodTabContainer[16] = gdnative.MethodOf("TabContainer\000", "set_tab_icon\000", 666127730)
		methodTabContainer[17] = gdnative.MethodOf("TabContainer\000", "get_tab_icon\000", 3536238170)
		methodTabContainer[18] = gdnative.MethodOf("TabContainer\000", "set_tab_disabled\000", 300928843)
		methodTabContainer[19] = gdnative.MethodOf("TabContainer\000", "is_tab_disabled\000", 1116898809)
		methodTabContainer[20] = gdnative.MethodOf("TabContainer\000", "set_tab_hidden\000", 300928843)
		methodTabContainer[21] = gdnative.MethodOf("TabContainer\000", "is_tab_hidden\000", 1116898809)
		methodTabContainer[22] = gdnative.MethodOf("TabContainer\000", "set_tab_button_icon\000", 666127730)
		methodTabContainer[23] = gdnative.MethodOf("TabContainer\000", "get_tab_button_icon\000", 3536238170)
		methodTabContainer[24] = gdnative.MethodOf("TabContainer\000", "get_tab_idx_at_point\000", 3820158470)
		methodTabContainer[25] = gdnative.MethodOf("TabContainer\000", "get_tab_idx_from_control\000", 2787397975)
		methodTabContainer[26] = gdnative.MethodOf("TabContainer\000", "set_popup\000", 1078189570)
		methodTabContainer[27] = gdnative.MethodOf("TabContainer\000", "get_popup\000", 111095082)
		methodTabContainer[28] = gdnative.MethodOf("TabContainer\000", "set_drag_to_rearrange_enabled\000", 2586408642)
		methodTabContainer[29] = gdnative.MethodOf("TabContainer\000", "get_drag_to_rearrange_enabled\000", 36873697)
		methodTabContainer[30] = gdnative.MethodOf("TabContainer\000", "set_tabs_rearrange_group\000", 1286410249)
		methodTabContainer[31] = gdnative.MethodOf("TabContainer\000", "get_tabs_rearrange_group\000", 3905245786)
		methodTabContainer[32] = gdnative.MethodOf("TabContainer\000", "set_use_hidden_tabs_for_min_size\000", 2586408642)
		methodTabContainer[33] = gdnative.MethodOf("TabContainer\000", "get_use_hidden_tabs_for_min_size\000", 36873697)
		methodTextEdit[0] = gdnative.MethodOf("TextEdit\000", "has_ime_text\000", 36873697)
		methodTextEdit[1] = gdnative.MethodOf("TextEdit\000", "set_editable\000", 2586408642)
		methodTextEdit[2] = gdnative.MethodOf("TextEdit\000", "is_editable\000", 36873697)
		methodTextEdit[3] = gdnative.MethodOf("TextEdit\000", "set_text_direction\000", 119160795)
		methodTextEdit[4] = gdnative.MethodOf("TextEdit\000", "get_text_direction\000", 797257663)
		methodTextEdit[5] = gdnative.MethodOf("TextEdit\000", "set_language\000", 83702148)
		methodTextEdit[6] = gdnative.MethodOf("TextEdit\000", "get_language\000", 201670096)
		methodTextEdit[7] = gdnative.MethodOf("TextEdit\000", "set_structured_text_bidi_override\000", 55961453)
		methodTextEdit[8] = gdnative.MethodOf("TextEdit\000", "get_structured_text_bidi_override\000", 3385126229)
		methodTextEdit[9] = gdnative.MethodOf("TextEdit\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodTextEdit[10] = gdnative.MethodOf("TextEdit\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodTextEdit[11] = gdnative.MethodOf("TextEdit\000", "set_tab_size\000", 1286410249)
		methodTextEdit[12] = gdnative.MethodOf("TextEdit\000", "get_tab_size\000", 3905245786)
		methodTextEdit[13] = gdnative.MethodOf("TextEdit\000", "set_overtype_mode_enabled\000", 2586408642)
		methodTextEdit[14] = gdnative.MethodOf("TextEdit\000", "is_overtype_mode_enabled\000", 36873697)
		methodTextEdit[15] = gdnative.MethodOf("TextEdit\000", "set_context_menu_enabled\000", 2586408642)
		methodTextEdit[16] = gdnative.MethodOf("TextEdit\000", "is_context_menu_enabled\000", 36873697)
		methodTextEdit[17] = gdnative.MethodOf("TextEdit\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodTextEdit[18] = gdnative.MethodOf("TextEdit\000", "is_shortcut_keys_enabled\000", 36873697)
		methodTextEdit[19] = gdnative.MethodOf("TextEdit\000", "set_virtual_keyboard_enabled\000", 2586408642)
		methodTextEdit[20] = gdnative.MethodOf("TextEdit\000", "is_virtual_keyboard_enabled\000", 36873697)
		methodTextEdit[21] = gdnative.MethodOf("TextEdit\000", "set_middle_mouse_paste_enabled\000", 2586408642)
		methodTextEdit[22] = gdnative.MethodOf("TextEdit\000", "is_middle_mouse_paste_enabled\000", 36873697)
		methodTextEdit[23] = gdnative.MethodOf("TextEdit\000", "clear\000", 3218959716)
		methodTextEdit[24] = gdnative.MethodOf("TextEdit\000", "set_text\000", 83702148)
		methodTextEdit[25] = gdnative.MethodOf("TextEdit\000", "get_text\000", 201670096)
		methodTextEdit[26] = gdnative.MethodOf("TextEdit\000", "get_line_count\000", 3905245786)
		methodTextEdit[27] = gdnative.MethodOf("TextEdit\000", "set_placeholder\000", 83702148)
		methodTextEdit[28] = gdnative.MethodOf("TextEdit\000", "get_placeholder\000", 201670096)
		methodTextEdit[29] = gdnative.MethodOf("TextEdit\000", "set_line\000", 501894301)
		methodTextEdit[30] = gdnative.MethodOf("TextEdit\000", "get_line\000", 844755477)
		methodTextEdit[31] = gdnative.MethodOf("TextEdit\000", "get_line_width\000", 3294126239)
		methodTextEdit[32] = gdnative.MethodOf("TextEdit\000", "get_line_height\000", 3905245786)
		methodTextEdit[33] = gdnative.MethodOf("TextEdit\000", "get_indent_level\000", 923996154)
		methodTextEdit[34] = gdnative.MethodOf("TextEdit\000", "get_first_non_whitespace_column\000", 923996154)
		methodTextEdit[35] = gdnative.MethodOf("TextEdit\000", "swap_lines\000", 3937882851)
		methodTextEdit[36] = gdnative.MethodOf("TextEdit\000", "insert_line_at\000", 501894301)
		methodTextEdit[37] = gdnative.MethodOf("TextEdit\000", "insert_text_at_caret\000", 83702148)
		methodTextEdit[38] = gdnative.MethodOf("TextEdit\000", "remove_text\000", 4275841770)
		methodTextEdit[39] = gdnative.MethodOf("TextEdit\000", "get_last_unhidden_line\000", 3905245786)
		methodTextEdit[40] = gdnative.MethodOf("TextEdit\000", "get_next_visible_line_offset_from\000", 3175239445)
		methodTextEdit[41] = gdnative.MethodOf("TextEdit\000", "get_next_visible_line_index_offset_from\000", 3386475622)
		methodTextEdit[42] = gdnative.MethodOf("TextEdit\000", "backspace\000", 3218959716)
		methodTextEdit[43] = gdnative.MethodOf("TextEdit\000", "cut\000", 3218959716)
		methodTextEdit[44] = gdnative.MethodOf("TextEdit\000", "copy\000", 3218959716)
		methodTextEdit[45] = gdnative.MethodOf("TextEdit\000", "paste\000", 3218959716)
		methodTextEdit[46] = gdnative.MethodOf("TextEdit\000", "begin_complex_operation\000", 3218959716)
		methodTextEdit[47] = gdnative.MethodOf("TextEdit\000", "end_complex_operation\000", 3218959716)
		methodTextEdit[48] = gdnative.MethodOf("TextEdit\000", "has_undo\000", 36873697)
		methodTextEdit[49] = gdnative.MethodOf("TextEdit\000", "has_redo\000", 36873697)
		methodTextEdit[50] = gdnative.MethodOf("TextEdit\000", "undo\000", 3218959716)
		methodTextEdit[51] = gdnative.MethodOf("TextEdit\000", "redo\000", 3218959716)
		methodTextEdit[52] = gdnative.MethodOf("TextEdit\000", "clear_undo_history\000", 3218959716)
		methodTextEdit[53] = gdnative.MethodOf("TextEdit\000", "tag_saved_version\000", 3218959716)
		methodTextEdit[54] = gdnative.MethodOf("TextEdit\000", "get_version\000", 3905245786)
		methodTextEdit[55] = gdnative.MethodOf("TextEdit\000", "get_saved_version\000", 3905245786)
		methodTextEdit[56] = gdnative.MethodOf("TextEdit\000", "set_search_text\000", 83702148)
		methodTextEdit[57] = gdnative.MethodOf("TextEdit\000", "set_search_flags\000", 1286410249)
		methodTextEdit[58] = gdnative.MethodOf("TextEdit\000", "search\000", 1203739136)
		methodTextEdit[59] = gdnative.MethodOf("TextEdit\000", "set_tooltip_request_func\000", 1611583062)
		methodTextEdit[60] = gdnative.MethodOf("TextEdit\000", "get_local_mouse_pos\000", 3341600327)
		methodTextEdit[61] = gdnative.MethodOf("TextEdit\000", "get_word_at_pos\000", 3674420000)
		methodTextEdit[62] = gdnative.MethodOf("TextEdit\000", "get_line_column_at_pos\000", 850652858)
		methodTextEdit[63] = gdnative.MethodOf("TextEdit\000", "get_pos_at_line_column\000", 410388347)
		methodTextEdit[64] = gdnative.MethodOf("TextEdit\000", "get_rect_at_line_column\000", 3256618057)
		methodTextEdit[65] = gdnative.MethodOf("TextEdit\000", "get_minimap_line_at_pos\000", 2485466453)
		methodTextEdit[66] = gdnative.MethodOf("TextEdit\000", "is_dragging_cursor\000", 36873697)
		methodTextEdit[67] = gdnative.MethodOf("TextEdit\000", "is_mouse_over_selection\000", 3135401148)
		methodTextEdit[68] = gdnative.MethodOf("TextEdit\000", "set_caret_type\000", 1211596914)
		methodTextEdit[69] = gdnative.MethodOf("TextEdit\000", "get_caret_type\000", 2830252959)
		methodTextEdit[70] = gdnative.MethodOf("TextEdit\000", "set_caret_blink_enabled\000", 2586408642)
		methodTextEdit[71] = gdnative.MethodOf("TextEdit\000", "is_caret_blink_enabled\000", 36873697)
		methodTextEdit[72] = gdnative.MethodOf("TextEdit\000", "set_caret_blink_speed\000", 373806689)
		methodTextEdit[73] = gdnative.MethodOf("TextEdit\000", "get_caret_blink_speed\000", 1740695150)
		methodTextEdit[74] = gdnative.MethodOf("TextEdit\000", "set_move_caret_on_right_click_enabled\000", 2586408642)
		methodTextEdit[75] = gdnative.MethodOf("TextEdit\000", "is_move_caret_on_right_click_enabled\000", 36873697)
		methodTextEdit[76] = gdnative.MethodOf("TextEdit\000", "set_caret_mid_grapheme_enabled\000", 2586408642)
		methodTextEdit[77] = gdnative.MethodOf("TextEdit\000", "is_caret_mid_grapheme_enabled\000", 36873697)
		methodTextEdit[78] = gdnative.MethodOf("TextEdit\000", "is_caret_visible\000", 36873697)
		methodTextEdit[79] = gdnative.MethodOf("TextEdit\000", "get_caret_draw_pos\000", 3341600327)
		methodTextEdit[80] = gdnative.MethodOf("TextEdit\000", "set_caret_line\000", 3443156988)
		methodTextEdit[81] = gdnative.MethodOf("TextEdit\000", "get_caret_line\000", 3905245786)
		methodTextEdit[82] = gdnative.MethodOf("TextEdit\000", "set_caret_column\000", 4023243586)
		methodTextEdit[83] = gdnative.MethodOf("TextEdit\000", "get_caret_column\000", 3905245786)
		methodTextEdit[84] = gdnative.MethodOf("TextEdit\000", "get_caret_wrap_index\000", 3905245786)
		methodTextEdit[85] = gdnative.MethodOf("TextEdit\000", "get_word_under_caret\000", 201670096)
		methodTextEdit[86] = gdnative.MethodOf("TextEdit\000", "set_selecting_enabled\000", 2586408642)
		methodTextEdit[87] = gdnative.MethodOf("TextEdit\000", "is_selecting_enabled\000", 36873697)
		methodTextEdit[88] = gdnative.MethodOf("TextEdit\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodTextEdit[89] = gdnative.MethodOf("TextEdit\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodTextEdit[90] = gdnative.MethodOf("TextEdit\000", "set_drag_and_drop_selection_enabled\000", 2586408642)
		methodTextEdit[91] = gdnative.MethodOf("TextEdit\000", "is_drag_and_drop_selection_enabled\000", 36873697)
		methodTextEdit[92] = gdnative.MethodOf("TextEdit\000", "set_override_selected_font_color\000", 2586408642)
		methodTextEdit[93] = gdnative.MethodOf("TextEdit\000", "is_overriding_selected_font_color\000", 36873697)
		methodTextEdit[94] = gdnative.MethodOf("TextEdit\000", "set_selection_mode\000", 2206958594)
		methodTextEdit[95] = gdnative.MethodOf("TextEdit\000", "get_selection_mode\000", 3750106938)
		methodTextEdit[96] = gdnative.MethodOf("TextEdit\000", "select_all\000", 3218959716)
		methodTextEdit[97] = gdnative.MethodOf("TextEdit\000", "select_word_under_caret\000", 3218959716)
		methodTextEdit[98] = gdnative.MethodOf("TextEdit\000", "select\000", 4275841770)
		methodTextEdit[99] = gdnative.MethodOf("TextEdit\000", "has_selection\000", 36873697)
		methodTextEdit[100] = gdnative.MethodOf("TextEdit\000", "get_selected_text\000", 201670096)
		methodTextEdit[101] = gdnative.MethodOf("TextEdit\000", "get_selection_line\000", 3905245786)
		methodTextEdit[102] = gdnative.MethodOf("TextEdit\000", "get_selection_column\000", 3905245786)
		methodTextEdit[103] = gdnative.MethodOf("TextEdit\000", "get_selection_from_line\000", 3905245786)
		methodTextEdit[104] = gdnative.MethodOf("TextEdit\000", "get_selection_from_column\000", 3905245786)
		methodTextEdit[105] = gdnative.MethodOf("TextEdit\000", "get_selection_to_line\000", 3905245786)
		methodTextEdit[106] = gdnative.MethodOf("TextEdit\000", "get_selection_to_column\000", 3905245786)
		methodTextEdit[107] = gdnative.MethodOf("TextEdit\000", "deselect\000", 3218959716)
		methodTextEdit[108] = gdnative.MethodOf("TextEdit\000", "delete_selection\000", 3218959716)
		methodTextEdit[109] = gdnative.MethodOf("TextEdit\000", "set_line_wrapping_mode\000", 2525115309)
		methodTextEdit[110] = gdnative.MethodOf("TextEdit\000", "get_line_wrapping_mode\000", 3562716114)
		methodTextEdit[111] = gdnative.MethodOf("TextEdit\000", "is_line_wrapped\000", 1116898809)
		methodTextEdit[112] = gdnative.MethodOf("TextEdit\000", "get_line_wrap_count\000", 923996154)
		methodTextEdit[113] = gdnative.MethodOf("TextEdit\000", "get_line_wrap_index_at_column\000", 3175239445)
		methodTextEdit[114] = gdnative.MethodOf("TextEdit\000", "get_line_wrapped_text\000", 647634434)
		methodTextEdit[115] = gdnative.MethodOf("TextEdit\000", "set_smooth_scroll_enabled\000", 2586408642)
		methodTextEdit[116] = gdnative.MethodOf("TextEdit\000", "is_smooth_scroll_enabled\000", 36873697)
		methodTextEdit[117] = gdnative.MethodOf("TextEdit\000", "set_v_scroll\000", 373806689)
		methodTextEdit[118] = gdnative.MethodOf("TextEdit\000", "get_v_scroll\000", 1740695150)
		methodTextEdit[119] = gdnative.MethodOf("TextEdit\000", "set_h_scroll\000", 1286410249)
		methodTextEdit[120] = gdnative.MethodOf("TextEdit\000", "get_h_scroll\000", 3905245786)
		methodTextEdit[121] = gdnative.MethodOf("TextEdit\000", "set_scroll_past_end_of_file_enabled\000", 2586408642)
		methodTextEdit[122] = gdnative.MethodOf("TextEdit\000", "is_scroll_past_end_of_file_enabled\000", 36873697)
		methodTextEdit[123] = gdnative.MethodOf("TextEdit\000", "set_v_scroll_speed\000", 373806689)
		methodTextEdit[124] = gdnative.MethodOf("TextEdit\000", "get_v_scroll_speed\000", 1740695150)
		methodTextEdit[125] = gdnative.MethodOf("TextEdit\000", "set_fit_content_height_enabled\000", 2586408642)
		methodTextEdit[126] = gdnative.MethodOf("TextEdit\000", "is_fit_content_height_enabled\000", 36873697)
		methodTextEdit[127] = gdnative.MethodOf("TextEdit\000", "get_scroll_pos_for_line\000", 3274652423)
		methodTextEdit[128] = gdnative.MethodOf("TextEdit\000", "set_line_as_first_visible\000", 3023605688)
		methodTextEdit[129] = gdnative.MethodOf("TextEdit\000", "get_first_visible_line\000", 3905245786)
		methodTextEdit[130] = gdnative.MethodOf("TextEdit\000", "set_line_as_center_visible\000", 3023605688)
		methodTextEdit[131] = gdnative.MethodOf("TextEdit\000", "set_line_as_last_visible\000", 3023605688)
		methodTextEdit[132] = gdnative.MethodOf("TextEdit\000", "get_last_full_visible_line\000", 3905245786)
		methodTextEdit[133] = gdnative.MethodOf("TextEdit\000", "get_last_full_visible_line_wrap_index\000", 3905245786)
		methodTextEdit[134] = gdnative.MethodOf("TextEdit\000", "get_visible_line_count\000", 3905245786)
		methodTextEdit[135] = gdnative.MethodOf("TextEdit\000", "get_visible_line_count_in_range\000", 3175239445)
		methodTextEdit[136] = gdnative.MethodOf("TextEdit\000", "get_total_visible_line_count\000", 3905245786)
		methodTextEdit[137] = gdnative.MethodOf("TextEdit\000", "adjust_viewport_to_caret\000", 3218959716)
		methodTextEdit[138] = gdnative.MethodOf("TextEdit\000", "center_viewport_to_caret\000", 3218959716)
		methodTextEdit[139] = gdnative.MethodOf("TextEdit\000", "set_draw_minimap\000", 2586408642)
		methodTextEdit[140] = gdnative.MethodOf("TextEdit\000", "is_drawing_minimap\000", 36873697)
		methodTextEdit[141] = gdnative.MethodOf("TextEdit\000", "set_minimap_width\000", 1286410249)
		methodTextEdit[142] = gdnative.MethodOf("TextEdit\000", "get_minimap_width\000", 3905245786)
		methodTextEdit[143] = gdnative.MethodOf("TextEdit\000", "get_minimap_visible_lines\000", 3905245786)
		methodTextEdit[144] = gdnative.MethodOf("TextEdit\000", "add_gutter\000", 1025054187)
		methodTextEdit[145] = gdnative.MethodOf("TextEdit\000", "remove_gutter\000", 1286410249)
		methodTextEdit[146] = gdnative.MethodOf("TextEdit\000", "get_gutter_count\000", 3905245786)
		methodTextEdit[147] = gdnative.MethodOf("TextEdit\000", "set_gutter_name\000", 501894301)
		methodTextEdit[148] = gdnative.MethodOf("TextEdit\000", "get_gutter_name\000", 844755477)
		methodTextEdit[149] = gdnative.MethodOf("TextEdit\000", "set_gutter_type\000", 1088959071)
		methodTextEdit[150] = gdnative.MethodOf("TextEdit\000", "get_gutter_type\000", 1159699127)
		methodTextEdit[151] = gdnative.MethodOf("TextEdit\000", "set_gutter_width\000", 3937882851)
		methodTextEdit[152] = gdnative.MethodOf("TextEdit\000", "get_gutter_width\000", 923996154)
		methodTextEdit[153] = gdnative.MethodOf("TextEdit\000", "set_gutter_draw\000", 300928843)
		methodTextEdit[154] = gdnative.MethodOf("TextEdit\000", "is_gutter_drawn\000", 1116898809)
		methodTextEdit[155] = gdnative.MethodOf("TextEdit\000", "set_gutter_clickable\000", 300928843)
		methodTextEdit[156] = gdnative.MethodOf("TextEdit\000", "is_gutter_clickable\000", 1116898809)
		methodTextEdit[157] = gdnative.MethodOf("TextEdit\000", "set_gutter_overwritable\000", 300928843)
		methodTextEdit[158] = gdnative.MethodOf("TextEdit\000", "is_gutter_overwritable\000", 1116898809)
		methodTextEdit[159] = gdnative.MethodOf("TextEdit\000", "merge_gutters\000", 3937882851)
		methodTextEdit[160] = gdnative.MethodOf("TextEdit\000", "set_gutter_custom_draw\000", 957362965)
		methodTextEdit[161] = gdnative.MethodOf("TextEdit\000", "get_total_gutter_width\000", 3905245786)
		methodTextEdit[162] = gdnative.MethodOf("TextEdit\000", "set_line_gutter_metadata\000", 2060538656)
		methodTextEdit[163] = gdnative.MethodOf("TextEdit\000", "get_line_gutter_metadata\000", 678354945)
		methodTextEdit[164] = gdnative.MethodOf("TextEdit\000", "set_line_gutter_text\000", 2285447957)
		methodTextEdit[165] = gdnative.MethodOf("TextEdit\000", "get_line_gutter_text\000", 1391810591)
		methodTextEdit[166] = gdnative.MethodOf("TextEdit\000", "set_line_gutter_icon\000", 176101966)
		methodTextEdit[167] = gdnative.MethodOf("TextEdit\000", "get_line_gutter_icon\000", 2584904275)
		methodTextEdit[168] = gdnative.MethodOf("TextEdit\000", "set_line_gutter_item_color\000", 3733378741)
		methodTextEdit[169] = gdnative.MethodOf("TextEdit\000", "get_line_gutter_item_color\000", 2165839948)
		methodTextEdit[170] = gdnative.MethodOf("TextEdit\000", "set_line_gutter_clickable\000", 1383440665)
		methodTextEdit[171] = gdnative.MethodOf("TextEdit\000", "is_line_gutter_clickable\000", 2522259332)
		methodTextEdit[172] = gdnative.MethodOf("TextEdit\000", "set_line_background_color\000", 2878471219)
		methodTextEdit[173] = gdnative.MethodOf("TextEdit\000", "get_line_background_color\000", 3457211756)
		methodTextEdit[174] = gdnative.MethodOf("TextEdit\000", "set_syntax_highlighter\000", 2765644541)
		methodTextEdit[175] = gdnative.MethodOf("TextEdit\000", "get_syntax_highlighter\000", 2721131626)
		methodTextEdit[176] = gdnative.MethodOf("TextEdit\000", "set_highlight_current_line\000", 2586408642)
		methodTextEdit[177] = gdnative.MethodOf("TextEdit\000", "is_highlight_current_line_enabled\000", 36873697)
		methodTextEdit[178] = gdnative.MethodOf("TextEdit\000", "set_highlight_all_occurrences\000", 2586408642)
		methodTextEdit[179] = gdnative.MethodOf("TextEdit\000", "is_highlight_all_occurrences_enabled\000", 36873697)
		methodTextEdit[180] = gdnative.MethodOf("TextEdit\000", "get_draw_control_chars\000", 36873697)
		methodTextEdit[181] = gdnative.MethodOf("TextEdit\000", "set_draw_control_chars\000", 2586408642)
		methodTextEdit[182] = gdnative.MethodOf("TextEdit\000", "set_draw_tabs\000", 2586408642)
		methodTextEdit[183] = gdnative.MethodOf("TextEdit\000", "is_drawing_tabs\000", 36873697)
		methodTextEdit[184] = gdnative.MethodOf("TextEdit\000", "set_draw_spaces\000", 2586408642)
		methodTextEdit[185] = gdnative.MethodOf("TextEdit\000", "is_drawing_spaces\000", 36873697)
		methodTextEdit[186] = gdnative.MethodOf("TextEdit\000", "get_menu\000", 229722558)
		methodTextEdit[187] = gdnative.MethodOf("TextEdit\000", "is_menu_visible\000", 36873697)
		methodTextEdit[188] = gdnative.MethodOf("TextEdit\000", "menu_option\000", 1286410249)
		methodTextLine[0] = gdnative.MethodOf("TextLine\000", "clear\000", 3218959716)
		methodTextLine[1] = gdnative.MethodOf("TextLine\000", "set_direction\000", 1418190634)
		methodTextLine[2] = gdnative.MethodOf("TextLine\000", "get_direction\000", 2516697328)
		methodTextLine[3] = gdnative.MethodOf("TextLine\000", "set_orientation\000", 42823726)
		methodTextLine[4] = gdnative.MethodOf("TextLine\000", "get_orientation\000", 175768116)
		methodTextLine[5] = gdnative.MethodOf("TextLine\000", "set_preserve_invalid\000", 2586408642)
		methodTextLine[6] = gdnative.MethodOf("TextLine\000", "get_preserve_invalid\000", 36873697)
		methodTextLine[7] = gdnative.MethodOf("TextLine\000", "set_preserve_control\000", 2586408642)
		methodTextLine[8] = gdnative.MethodOf("TextLine\000", "get_preserve_control\000", 36873697)
		methodTextLine[9] = gdnative.MethodOf("TextLine\000", "set_bidi_override\000", 381264803)
		methodTextLine[10] = gdnative.MethodOf("TextLine\000", "add_string\000", 867188035)
		methodTextLine[11] = gdnative.MethodOf("TextLine\000", "add_object\000", 232531617)
		methodTextLine[12] = gdnative.MethodOf("TextLine\000", "resize_object\000", 1241600523)
		methodTextLine[13] = gdnative.MethodOf("TextLine\000", "set_width\000", 373806689)
		methodTextLine[14] = gdnative.MethodOf("TextLine\000", "get_width\000", 1740695150)
		methodTextLine[15] = gdnative.MethodOf("TextLine\000", "set_horizontal_alignment\000", 2312603777)
		methodTextLine[16] = gdnative.MethodOf("TextLine\000", "get_horizontal_alignment\000", 341400642)
		methodTextLine[17] = gdnative.MethodOf("TextLine\000", "tab_align\000", 2899603908)
		methodTextLine[18] = gdnative.MethodOf("TextLine\000", "set_flags\000", 2877345813)
		methodTextLine[19] = gdnative.MethodOf("TextLine\000", "get_flags\000", 1583363614)
		methodTextLine[20] = gdnative.MethodOf("TextLine\000", "set_text_overrun_behavior\000", 1008890932)
		methodTextLine[21] = gdnative.MethodOf("TextLine\000", "get_text_overrun_behavior\000", 3779142101)
		methodTextLine[22] = gdnative.MethodOf("TextLine\000", "get_objects\000", 3995934104)
		methodTextLine[23] = gdnative.MethodOf("TextLine\000", "get_object_rect\000", 1742700391)
		methodTextLine[24] = gdnative.MethodOf("TextLine\000", "get_size\000", 3341600327)
		methodTextLine[25] = gdnative.MethodOf("TextLine\000", "get_rid\000", 2944877500)
		methodTextLine[26] = gdnative.MethodOf("TextLine\000", "get_line_ascent\000", 1740695150)
		methodTextLine[27] = gdnative.MethodOf("TextLine\000", "get_line_descent\000", 1740695150)
		methodTextLine[28] = gdnative.MethodOf("TextLine\000", "get_line_width\000", 1740695150)
		methodTextLine[29] = gdnative.MethodOf("TextLine\000", "get_line_underline_position\000", 1740695150)
		methodTextLine[30] = gdnative.MethodOf("TextLine\000", "get_line_underline_thickness\000", 1740695150)
		methodTextLine[31] = gdnative.MethodOf("TextLine\000", "draw\000", 1164457837)
		methodTextLine[32] = gdnative.MethodOf("TextLine\000", "draw_outline\000", 1364491366)
		methodTextLine[33] = gdnative.MethodOf("TextLine\000", "hit_test\000", 2401831903)
		methodTextMesh[0] = gdnative.MethodOf("TextMesh\000", "set_horizontal_alignment\000", 2312603777)
		methodTextMesh[1] = gdnative.MethodOf("TextMesh\000", "get_horizontal_alignment\000", 341400642)
		methodTextMesh[2] = gdnative.MethodOf("TextMesh\000", "set_text\000", 83702148)
		methodTextMesh[3] = gdnative.MethodOf("TextMesh\000", "get_text\000", 201670096)
		methodTextMesh[4] = gdnative.MethodOf("TextMesh\000", "set_font\000", 1262170328)
		methodTextMesh[5] = gdnative.MethodOf("TextMesh\000", "get_font\000", 3229501585)
		methodTextMesh[6] = gdnative.MethodOf("TextMesh\000", "set_font_size\000", 1286410249)
		methodTextMesh[7] = gdnative.MethodOf("TextMesh\000", "get_font_size\000", 3905245786)
		methodTextMesh[8] = gdnative.MethodOf("TextMesh\000", "set_depth\000", 373806689)
		methodTextMesh[9] = gdnative.MethodOf("TextMesh\000", "get_depth\000", 1740695150)
		methodTextMesh[10] = gdnative.MethodOf("TextMesh\000", "set_width\000", 373806689)
		methodTextMesh[11] = gdnative.MethodOf("TextMesh\000", "get_width\000", 1740695150)
		methodTextMesh[12] = gdnative.MethodOf("TextMesh\000", "set_pixel_size\000", 373806689)
		methodTextMesh[13] = gdnative.MethodOf("TextMesh\000", "get_pixel_size\000", 1740695150)
		methodTextMesh[14] = gdnative.MethodOf("TextMesh\000", "set_curve_step\000", 373806689)
		methodTextMesh[15] = gdnative.MethodOf("TextMesh\000", "get_curve_step\000", 1740695150)
		methodTextMesh[16] = gdnative.MethodOf("TextMesh\000", "set_text_direction\000", 1418190634)
		methodTextMesh[17] = gdnative.MethodOf("TextMesh\000", "get_text_direction\000", 2516697328)
		methodTextMesh[18] = gdnative.MethodOf("TextMesh\000", "set_language\000", 83702148)
		methodTextMesh[19] = gdnative.MethodOf("TextMesh\000", "get_language\000", 201670096)
		methodTextMesh[20] = gdnative.MethodOf("TextMesh\000", "set_structured_text_bidi_override\000", 55961453)
		methodTextMesh[21] = gdnative.MethodOf("TextMesh\000", "get_structured_text_bidi_override\000", 3385126229)
		methodTextMesh[22] = gdnative.MethodOf("TextMesh\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodTextMesh[23] = gdnative.MethodOf("TextMesh\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodTextMesh[24] = gdnative.MethodOf("TextMesh\000", "set_uppercase\000", 2586408642)
		methodTextMesh[25] = gdnative.MethodOf("TextMesh\000", "is_uppercase\000", 36873697)
		methodTextParagraph[0] = gdnative.MethodOf("TextParagraph\000", "clear\000", 3218959716)
		methodTextParagraph[1] = gdnative.MethodOf("TextParagraph\000", "set_direction\000", 1418190634)
		methodTextParagraph[2] = gdnative.MethodOf("TextParagraph\000", "get_direction\000", 2516697328)
		methodTextParagraph[3] = gdnative.MethodOf("TextParagraph\000", "set_custom_punctuation\000", 83702148)
		methodTextParagraph[4] = gdnative.MethodOf("TextParagraph\000", "get_custom_punctuation\000", 201670096)
		methodTextParagraph[5] = gdnative.MethodOf("TextParagraph\000", "set_orientation\000", 42823726)
		methodTextParagraph[6] = gdnative.MethodOf("TextParagraph\000", "get_orientation\000", 175768116)
		methodTextParagraph[7] = gdnative.MethodOf("TextParagraph\000", "set_preserve_invalid\000", 2586408642)
		methodTextParagraph[8] = gdnative.MethodOf("TextParagraph\000", "get_preserve_invalid\000", 36873697)
		methodTextParagraph[9] = gdnative.MethodOf("TextParagraph\000", "set_preserve_control\000", 2586408642)
		methodTextParagraph[10] = gdnative.MethodOf("TextParagraph\000", "get_preserve_control\000", 36873697)
		methodTextParagraph[11] = gdnative.MethodOf("TextParagraph\000", "set_bidi_override\000", 381264803)
		methodTextParagraph[12] = gdnative.MethodOf("TextParagraph\000", "set_dropcap\000", 2613124475)
		methodTextParagraph[13] = gdnative.MethodOf("TextParagraph\000", "clear_dropcap\000", 3218959716)
		methodTextParagraph[14] = gdnative.MethodOf("TextParagraph\000", "add_string\000", 867188035)
		methodTextParagraph[15] = gdnative.MethodOf("TextParagraph\000", "add_object\000", 232531617)
		methodTextParagraph[16] = gdnative.MethodOf("TextParagraph\000", "resize_object\000", 1241600523)
		methodTextParagraph[17] = gdnative.MethodOf("TextParagraph\000", "set_alignment\000", 2312603777)
		methodTextParagraph[18] = gdnative.MethodOf("TextParagraph\000", "get_alignment\000", 341400642)
		methodTextParagraph[19] = gdnative.MethodOf("TextParagraph\000", "tab_align\000", 2899603908)
		methodTextParagraph[20] = gdnative.MethodOf("TextParagraph\000", "set_break_flags\000", 2809697122)
		methodTextParagraph[21] = gdnative.MethodOf("TextParagraph\000", "get_break_flags\000", 2340632602)
		methodTextParagraph[22] = gdnative.MethodOf("TextParagraph\000", "set_justification_flags\000", 2877345813)
		methodTextParagraph[23] = gdnative.MethodOf("TextParagraph\000", "get_justification_flags\000", 1583363614)
		methodTextParagraph[24] = gdnative.MethodOf("TextParagraph\000", "set_text_overrun_behavior\000", 1008890932)
		methodTextParagraph[25] = gdnative.MethodOf("TextParagraph\000", "get_text_overrun_behavior\000", 3779142101)
		methodTextParagraph[26] = gdnative.MethodOf("TextParagraph\000", "set_width\000", 373806689)
		methodTextParagraph[27] = gdnative.MethodOf("TextParagraph\000", "get_width\000", 1740695150)
		methodTextParagraph[28] = gdnative.MethodOf("TextParagraph\000", "get_non_wrapped_size\000", 3341600327)
		methodTextParagraph[29] = gdnative.MethodOf("TextParagraph\000", "get_size\000", 3341600327)
		methodTextParagraph[30] = gdnative.MethodOf("TextParagraph\000", "get_rid\000", 2944877500)
		methodTextParagraph[31] = gdnative.MethodOf("TextParagraph\000", "get_line_rid\000", 495598643)
		methodTextParagraph[32] = gdnative.MethodOf("TextParagraph\000", "get_dropcap_rid\000", 2944877500)
		methodTextParagraph[33] = gdnative.MethodOf("TextParagraph\000", "get_line_count\000", 3905245786)
		methodTextParagraph[34] = gdnative.MethodOf("TextParagraph\000", "set_max_lines_visible\000", 1286410249)
		methodTextParagraph[35] = gdnative.MethodOf("TextParagraph\000", "get_max_lines_visible\000", 3905245786)
		methodTextParagraph[36] = gdnative.MethodOf("TextParagraph\000", "get_line_objects\000", 663333327)
		methodTextParagraph[37] = gdnative.MethodOf("TextParagraph\000", "get_line_object_rect\000", 204315017)
		methodTextParagraph[38] = gdnative.MethodOf("TextParagraph\000", "get_line_size\000", 2299179447)
		methodTextParagraph[39] = gdnative.MethodOf("TextParagraph\000", "get_line_range\000", 880721226)
		methodTextParagraph[40] = gdnative.MethodOf("TextParagraph\000", "get_line_ascent\000", 2339986948)
		methodTextParagraph[41] = gdnative.MethodOf("TextParagraph\000", "get_line_descent\000", 2339986948)
		methodTextParagraph[42] = gdnative.MethodOf("TextParagraph\000", "get_line_width\000", 2339986948)
		methodTextParagraph[43] = gdnative.MethodOf("TextParagraph\000", "get_line_underline_position\000", 2339986948)
		methodTextParagraph[44] = gdnative.MethodOf("TextParagraph\000", "get_line_underline_thickness\000", 2339986948)
		methodTextParagraph[45] = gdnative.MethodOf("TextParagraph\000", "get_dropcap_size\000", 3341600327)
		methodTextParagraph[46] = gdnative.MethodOf("TextParagraph\000", "get_dropcap_lines\000", 3905245786)
		methodTextParagraph[47] = gdnative.MethodOf("TextParagraph\000", "draw\000", 367324453)
		methodTextParagraph[48] = gdnative.MethodOf("TextParagraph\000", "draw_outline\000", 2159523405)
		methodTextParagraph[49] = gdnative.MethodOf("TextParagraph\000", "draw_line\000", 3963848920)
		methodTextParagraph[50] = gdnative.MethodOf("TextParagraph\000", "draw_line_outline\000", 1814903311)
		methodTextParagraph[51] = gdnative.MethodOf("TextParagraph\000", "draw_dropcap\000", 1164457837)
		methodTextParagraph[52] = gdnative.MethodOf("TextParagraph\000", "draw_dropcap_outline\000", 1364491366)
		methodTextParagraph[53] = gdnative.MethodOf("TextParagraph\000", "hit_test\000", 3820158470)
		methodTextServer[0] = gdnative.MethodOf("TextServer\000", "has_feature\000", 3967367083)
		methodTextServer[1] = gdnative.MethodOf("TextServer\000", "get_name\000", 201670096)
		methodTextServer[2] = gdnative.MethodOf("TextServer\000", "get_features\000", 3905245786)
		methodTextServer[3] = gdnative.MethodOf("TextServer\000", "load_support_data\000", 2323990056)
		methodTextServer[4] = gdnative.MethodOf("TextServer\000", "get_support_data_filename\000", 201670096)
		methodTextServer[5] = gdnative.MethodOf("TextServer\000", "get_support_data_info\000", 201670096)
		methodTextServer[6] = gdnative.MethodOf("TextServer\000", "save_support_data\000", 3927539163)
		methodTextServer[7] = gdnative.MethodOf("TextServer\000", "is_locale_right_to_left\000", 3927539163)
		methodTextServer[8] = gdnative.MethodOf("TextServer\000", "name_to_tag\000", 1321353865)
		methodTextServer[9] = gdnative.MethodOf("TextServer\000", "tag_to_name\000", 844755477)
		methodTextServer[10] = gdnative.MethodOf("TextServer\000", "has\000", 3521089500)
		methodTextServer[11] = gdnative.MethodOf("TextServer\000", "free_rid\000", 2722037293)
		methodTextServer[12] = gdnative.MethodOf("TextServer\000", "create_font\000", 529393457)
		methodTextServer[13] = gdnative.MethodOf("TextServer\000", "font_set_data\000", 1355495400)
		methodTextServer[14] = gdnative.MethodOf("TextServer\000", "font_set_face_index\000", 3411492887)
		methodTextServer[15] = gdnative.MethodOf("TextServer\000", "font_get_face_index\000", 2198884583)
		methodTextServer[16] = gdnative.MethodOf("TextServer\000", "font_get_face_count\000", 2198884583)
		methodTextServer[17] = gdnative.MethodOf("TextServer\000", "font_set_style\000", 898466325)
		methodTextServer[18] = gdnative.MethodOf("TextServer\000", "font_get_style\000", 3082502592)
		methodTextServer[19] = gdnative.MethodOf("TextServer\000", "font_set_name\000", 2726140452)
		methodTextServer[20] = gdnative.MethodOf("TextServer\000", "font_get_name\000", 642473191)
		methodTextServer[21] = gdnative.MethodOf("TextServer\000", "font_set_style_name\000", 2726140452)
		methodTextServer[22] = gdnative.MethodOf("TextServer\000", "font_get_style_name\000", 642473191)
		methodTextServer[23] = gdnative.MethodOf("TextServer\000", "font_set_antialiased\000", 1265174801)
		methodTextServer[24] = gdnative.MethodOf("TextServer\000", "font_is_antialiased\000", 4155700596)
		methodTextServer[25] = gdnative.MethodOf("TextServer\000", "font_set_generate_mipmaps\000", 1265174801)
		methodTextServer[26] = gdnative.MethodOf("TextServer\000", "font_get_generate_mipmaps\000", 4155700596)
		methodTextServer[27] = gdnative.MethodOf("TextServer\000", "font_set_multichannel_signed_distance_field\000", 1265174801)
		methodTextServer[28] = gdnative.MethodOf("TextServer\000", "font_is_multichannel_signed_distance_field\000", 4155700596)
		methodTextServer[29] = gdnative.MethodOf("TextServer\000", "font_set_msdf_pixel_range\000", 3411492887)
		methodTextServer[30] = gdnative.MethodOf("TextServer\000", "font_get_msdf_pixel_range\000", 2198884583)
		methodTextServer[31] = gdnative.MethodOf("TextServer\000", "font_set_msdf_size\000", 3411492887)
		methodTextServer[32] = gdnative.MethodOf("TextServer\000", "font_get_msdf_size\000", 2198884583)
		methodTextServer[33] = gdnative.MethodOf("TextServer\000", "font_set_fixed_size\000", 3411492887)
		methodTextServer[34] = gdnative.MethodOf("TextServer\000", "font_get_fixed_size\000", 2198884583)
		methodTextServer[35] = gdnative.MethodOf("TextServer\000", "font_set_force_autohinter\000", 1265174801)
		methodTextServer[36] = gdnative.MethodOf("TextServer\000", "font_is_force_autohinter\000", 4155700596)
		methodTextServer[37] = gdnative.MethodOf("TextServer\000", "font_set_hinting\000", 1520010864)
		methodTextServer[38] = gdnative.MethodOf("TextServer\000", "font_get_hinting\000", 3971592737)
		methodTextServer[39] = gdnative.MethodOf("TextServer\000", "font_set_subpixel_positioning\000", 3830459669)
		methodTextServer[40] = gdnative.MethodOf("TextServer\000", "font_get_subpixel_positioning\000", 2752233671)
		methodTextServer[41] = gdnative.MethodOf("TextServer\000", "font_set_embolden\000", 1794382983)
		methodTextServer[42] = gdnative.MethodOf("TextServer\000", "font_get_embolden\000", 866169185)
		methodTextServer[43] = gdnative.MethodOf("TextServer\000", "font_set_transform\000", 1246044741)
		methodTextServer[44] = gdnative.MethodOf("TextServer\000", "font_get_transform\000", 213527486)
		methodTextServer[45] = gdnative.MethodOf("TextServer\000", "font_set_variation_coordinates\000", 1217542888)
		methodTextServer[46] = gdnative.MethodOf("TextServer\000", "font_get_variation_coordinates\000", 1882737106)
		methodTextServer[47] = gdnative.MethodOf("TextServer\000", "font_set_oversampling\000", 1794382983)
		methodTextServer[48] = gdnative.MethodOf("TextServer\000", "font_get_oversampling\000", 866169185)
		methodTextServer[49] = gdnative.MethodOf("TextServer\000", "font_get_size_cache_list\000", 2684255073)
		methodTextServer[50] = gdnative.MethodOf("TextServer\000", "font_clear_size_cache\000", 2722037293)
		methodTextServer[51] = gdnative.MethodOf("TextServer\000", "font_remove_size_cache\000", 2450610377)
		methodTextServer[52] = gdnative.MethodOf("TextServer\000", "font_set_ascent\000", 1892459533)
		methodTextServer[53] = gdnative.MethodOf("TextServer\000", "font_get_ascent\000", 755457166)
		methodTextServer[54] = gdnative.MethodOf("TextServer\000", "font_set_descent\000", 1892459533)
		methodTextServer[55] = gdnative.MethodOf("TextServer\000", "font_get_descent\000", 755457166)
		methodTextServer[56] = gdnative.MethodOf("TextServer\000", "font_set_underline_position\000", 1892459533)
		methodTextServer[57] = gdnative.MethodOf("TextServer\000", "font_get_underline_position\000", 755457166)
		methodTextServer[58] = gdnative.MethodOf("TextServer\000", "font_set_underline_thickness\000", 1892459533)
		methodTextServer[59] = gdnative.MethodOf("TextServer\000", "font_get_underline_thickness\000", 755457166)
		methodTextServer[60] = gdnative.MethodOf("TextServer\000", "font_set_scale\000", 1892459533)
		methodTextServer[61] = gdnative.MethodOf("TextServer\000", "font_get_scale\000", 755457166)
		methodTextServer[62] = gdnative.MethodOf("TextServer\000", "font_get_texture_count\000", 1311001310)
		methodTextServer[63] = gdnative.MethodOf("TextServer\000", "font_clear_textures\000", 2450610377)
		methodTextServer[64] = gdnative.MethodOf("TextServer\000", "font_remove_texture\000", 3810512262)
		methodTextServer[65] = gdnative.MethodOf("TextServer\000", "font_set_texture_image\000", 2354485091)
		methodTextServer[66] = gdnative.MethodOf("TextServer\000", "font_get_texture_image\000", 2451761155)
		methodTextServer[67] = gdnative.MethodOf("TextServer\000", "font_set_texture_offsets\000", 3005398047)
		methodTextServer[68] = gdnative.MethodOf("TextServer\000", "font_get_texture_offsets\000", 3420028887)
		methodTextServer[69] = gdnative.MethodOf("TextServer\000", "font_get_glyph_list\000", 609223755)
		methodTextServer[70] = gdnative.MethodOf("TextServer\000", "font_clear_glyphs\000", 2450610377)
		methodTextServer[71] = gdnative.MethodOf("TextServer\000", "font_remove_glyph\000", 3810512262)
		methodTextServer[72] = gdnative.MethodOf("TextServer\000", "font_get_glyph_advance\000", 2555689501)
		methodTextServer[73] = gdnative.MethodOf("TextServer\000", "font_set_glyph_advance\000", 3219397315)
		methodTextServer[74] = gdnative.MethodOf("TextServer\000", "font_get_glyph_offset\000", 513728628)
		methodTextServer[75] = gdnative.MethodOf("TextServer\000", "font_set_glyph_offset\000", 1812632090)
		methodTextServer[76] = gdnative.MethodOf("TextServer\000", "font_get_glyph_size\000", 513728628)
		methodTextServer[77] = gdnative.MethodOf("TextServer\000", "font_set_glyph_size\000", 1812632090)
		methodTextServer[78] = gdnative.MethodOf("TextServer\000", "font_get_glyph_uv_rect\000", 2274268786)
		methodTextServer[79] = gdnative.MethodOf("TextServer\000", "font_set_glyph_uv_rect\000", 1973324081)
		methodTextServer[80] = gdnative.MethodOf("TextServer\000", "font_get_glyph_texture_idx\000", 4292800474)
		methodTextServer[81] = gdnative.MethodOf("TextServer\000", "font_set_glyph_texture_idx\000", 4254580980)
		methodTextServer[82] = gdnative.MethodOf("TextServer\000", "font_get_glyph_texture_rid\000", 1451696141)
		methodTextServer[83] = gdnative.MethodOf("TextServer\000", "font_get_glyph_texture_size\000", 513728628)
		methodTextServer[84] = gdnative.MethodOf("TextServer\000", "font_get_glyph_contours\000", 2903964473)
		methodTextServer[85] = gdnative.MethodOf("TextServer\000", "font_get_kerning_list\000", 1778388067)
		methodTextServer[86] = gdnative.MethodOf("TextServer\000", "font_clear_kerning_map\000", 3411492887)
		methodTextServer[87] = gdnative.MethodOf("TextServer\000", "font_remove_kerning\000", 2141860016)
		methodTextServer[88] = gdnative.MethodOf("TextServer\000", "font_set_kerning\000", 3630965883)
		methodTextServer[89] = gdnative.MethodOf("TextServer\000", "font_get_kerning\000", 1019980169)
		methodTextServer[90] = gdnative.MethodOf("TextServer\000", "font_get_glyph_index\000", 1765635060)
		methodTextServer[91] = gdnative.MethodOf("TextServer\000", "font_has_char\000", 3120086654)
		methodTextServer[92] = gdnative.MethodOf("TextServer\000", "font_get_supported_chars\000", 642473191)
		methodTextServer[93] = gdnative.MethodOf("TextServer\000", "font_render_range\000", 4254580980)
		methodTextServer[94] = gdnative.MethodOf("TextServer\000", "font_render_glyph\000", 3810512262)
		methodTextServer[95] = gdnative.MethodOf("TextServer\000", "font_draw_glyph\000", 1821196351)
		methodTextServer[96] = gdnative.MethodOf("TextServer\000", "font_draw_glyph_outline\000", 1124898203)
		methodTextServer[97] = gdnative.MethodOf("TextServer\000", "font_is_language_supported\000", 3199320846)
		methodTextServer[98] = gdnative.MethodOf("TextServer\000", "font_set_language_support_override\000", 2313957094)
		methodTextServer[99] = gdnative.MethodOf("TextServer\000", "font_get_language_support_override\000", 2829184646)
		methodTextServer[100] = gdnative.MethodOf("TextServer\000", "font_remove_language_support_override\000", 2726140452)
		methodTextServer[101] = gdnative.MethodOf("TextServer\000", "font_get_language_support_overrides\000", 2801473409)
		methodTextServer[102] = gdnative.MethodOf("TextServer\000", "font_is_script_supported\000", 3199320846)
		methodTextServer[103] = gdnative.MethodOf("TextServer\000", "font_set_script_support_override\000", 2313957094)
		methodTextServer[104] = gdnative.MethodOf("TextServer\000", "font_get_script_support_override\000", 2829184646)
		methodTextServer[105] = gdnative.MethodOf("TextServer\000", "font_remove_script_support_override\000", 2726140452)
		methodTextServer[106] = gdnative.MethodOf("TextServer\000", "font_get_script_support_overrides\000", 2801473409)
		methodTextServer[107] = gdnative.MethodOf("TextServer\000", "font_set_opentype_feature_overrides\000", 1217542888)
		methodTextServer[108] = gdnative.MethodOf("TextServer\000", "font_get_opentype_feature_overrides\000", 1882737106)
		methodTextServer[109] = gdnative.MethodOf("TextServer\000", "font_supported_feature_list\000", 1882737106)
		methodTextServer[110] = gdnative.MethodOf("TextServer\000", "font_supported_variation_list\000", 1882737106)
		methodTextServer[111] = gdnative.MethodOf("TextServer\000", "font_get_global_oversampling\000", 1740695150)
		methodTextServer[112] = gdnative.MethodOf("TextServer\000", "font_set_global_oversampling\000", 373806689)
		methodTextServer[113] = gdnative.MethodOf("TextServer\000", "get_hex_code_box_size\000", 3016396712)
		methodTextServer[114] = gdnative.MethodOf("TextServer\000", "draw_hex_code_box\000", 1602046441)
		methodTextServer[115] = gdnative.MethodOf("TextServer\000", "create_shaped_text\000", 1231398698)
		methodTextServer[116] = gdnative.MethodOf("TextServer\000", "shaped_text_clear\000", 2722037293)
		methodTextServer[117] = gdnative.MethodOf("TextServer\000", "shaped_text_set_direction\000", 2616949700)
		methodTextServer[118] = gdnative.MethodOf("TextServer\000", "shaped_text_get_direction\000", 3065904362)
		methodTextServer[119] = gdnative.MethodOf("TextServer\000", "shaped_text_get_inferred_direction\000", 3065904362)
		methodTextServer[120] = gdnative.MethodOf("TextServer\000", "shaped_text_set_bidi_override\000", 684822712)
		methodTextServer[121] = gdnative.MethodOf("TextServer\000", "shaped_text_set_custom_punctuation\000", 2726140452)
		methodTextServer[122] = gdnative.MethodOf("TextServer\000", "shaped_text_get_custom_punctuation\000", 642473191)
		methodTextServer[123] = gdnative.MethodOf("TextServer\000", "shaped_text_set_orientation\000", 104095128)
		methodTextServer[124] = gdnative.MethodOf("TextServer\000", "shaped_text_get_orientation\000", 3142708106)
		methodTextServer[125] = gdnative.MethodOf("TextServer\000", "shaped_text_set_preserve_invalid\000", 1265174801)
		methodTextServer[126] = gdnative.MethodOf("TextServer\000", "shaped_text_get_preserve_invalid\000", 4155700596)
		methodTextServer[127] = gdnative.MethodOf("TextServer\000", "shaped_text_set_preserve_control\000", 1265174801)
		methodTextServer[128] = gdnative.MethodOf("TextServer\000", "shaped_text_get_preserve_control\000", 4155700596)
		methodTextServer[129] = gdnative.MethodOf("TextServer\000", "shaped_text_set_spacing\000", 1307259930)
		methodTextServer[130] = gdnative.MethodOf("TextServer\000", "shaped_text_get_spacing\000", 1213653558)
		methodTextServer[131] = gdnative.MethodOf("TextServer\000", "shaped_text_add_string\000", 2621279422)
		methodTextServer[132] = gdnative.MethodOf("TextServer\000", "shaped_text_add_object\000", 2711351313)
		methodTextServer[133] = gdnative.MethodOf("TextServer\000", "shaped_text_resize_object\000", 3402652107)
		methodTextServer[134] = gdnative.MethodOf("TextServer\000", "shaped_get_span_count\000", 2198884583)
		methodTextServer[135] = gdnative.MethodOf("TextServer\000", "shaped_get_span_meta\000", 4069510997)
		methodTextServer[136] = gdnative.MethodOf("TextServer\000", "shaped_set_span_update_font\000", 1578983057)
		methodTextServer[137] = gdnative.MethodOf("TextServer\000", "shaped_text_substr\000", 1937682086)
		methodTextServer[138] = gdnative.MethodOf("TextServer\000", "shaped_text_get_parent\000", 3814569979)
		methodTextServer[139] = gdnative.MethodOf("TextServer\000", "shaped_text_fit_to_width\000", 603718830)
		methodTextServer[140] = gdnative.MethodOf("TextServer\000", "shaped_text_tab_align\000", 1283669550)
		methodTextServer[141] = gdnative.MethodOf("TextServer\000", "shaped_text_shape\000", 3521089500)
		methodTextServer[142] = gdnative.MethodOf("TextServer\000", "shaped_text_is_ready\000", 4155700596)
		methodTextServer[143] = gdnative.MethodOf("TextServer\000", "shaped_text_get_glyphs\000", 2684255073)
		methodTextServer[144] = gdnative.MethodOf("TextServer\000", "shaped_text_sort_logical\000", 2670461153)
		methodTextServer[145] = gdnative.MethodOf("TextServer\000", "shaped_text_get_glyph_count\000", 2198884583)
		methodTextServer[146] = gdnative.MethodOf("TextServer\000", "shaped_text_get_range\000", 733700038)
		methodTextServer[147] = gdnative.MethodOf("TextServer\000", "shaped_text_get_line_breaks_adv\000", 4206849830)
		methodTextServer[148] = gdnative.MethodOf("TextServer\000", "shaped_text_get_line_breaks\000", 303410369)
		methodTextServer[149] = gdnative.MethodOf("TextServer\000", "shaped_text_get_word_breaks\000", 3299477123)
		methodTextServer[150] = gdnative.MethodOf("TextServer\000", "shaped_text_get_trim_pos\000", 2198884583)
		methodTextServer[151] = gdnative.MethodOf("TextServer\000", "shaped_text_get_ellipsis_pos\000", 2198884583)
		methodTextServer[152] = gdnative.MethodOf("TextServer\000", "shaped_text_get_ellipsis_glyphs\000", 2684255073)
		methodTextServer[153] = gdnative.MethodOf("TextServer\000", "shaped_text_get_ellipsis_glyph_count\000", 2198884583)
		methodTextServer[154] = gdnative.MethodOf("TextServer\000", "shaped_text_overrun_trim_to_width\000", 1572579718)
		methodTextServer[155] = gdnative.MethodOf("TextServer\000", "shaped_text_get_objects\000", 2684255073)
		methodTextServer[156] = gdnative.MethodOf("TextServer\000", "shaped_text_get_object_rect\000", 447978354)
		methodTextServer[157] = gdnative.MethodOf("TextServer\000", "shaped_text_get_size\000", 2440833711)
		methodTextServer[158] = gdnative.MethodOf("TextServer\000", "shaped_text_get_ascent\000", 866169185)
		methodTextServer[159] = gdnative.MethodOf("TextServer\000", "shaped_text_get_descent\000", 866169185)
		methodTextServer[160] = gdnative.MethodOf("TextServer\000", "shaped_text_get_width\000", 866169185)
		methodTextServer[161] = gdnative.MethodOf("TextServer\000", "shaped_text_get_underline_position\000", 866169185)
		methodTextServer[162] = gdnative.MethodOf("TextServer\000", "shaped_text_get_underline_thickness\000", 866169185)
		methodTextServer[163] = gdnative.MethodOf("TextServer\000", "shaped_text_get_carets\000", 1574219346)
		methodTextServer[164] = gdnative.MethodOf("TextServer\000", "shaped_text_get_selection\000", 3714187733)
		methodTextServer[165] = gdnative.MethodOf("TextServer\000", "shaped_text_hit_test_grapheme\000", 3149310417)
		methodTextServer[166] = gdnative.MethodOf("TextServer\000", "shaped_text_hit_test_position\000", 3149310417)
		methodTextServer[167] = gdnative.MethodOf("TextServer\000", "shaped_text_get_grapheme_bounds\000", 2546185844)
		methodTextServer[168] = gdnative.MethodOf("TextServer\000", "shaped_text_next_grapheme_pos\000", 1120910005)
		methodTextServer[169] = gdnative.MethodOf("TextServer\000", "shaped_text_prev_grapheme_pos\000", 1120910005)
		methodTextServer[170] = gdnative.MethodOf("TextServer\000", "shaped_text_draw\000", 70679950)
		methodTextServer[171] = gdnative.MethodOf("TextServer\000", "shaped_text_draw_outline\000", 2673671346)
		methodTextServer[172] = gdnative.MethodOf("TextServer\000", "shaped_text_get_dominant_direction_in_range\000", 3326907668)
		methodTextServer[173] = gdnative.MethodOf("TextServer\000", "format_number\000", 2305636099)
		methodTextServer[174] = gdnative.MethodOf("TextServer\000", "parse_number\000", 2305636099)
		methodTextServer[175] = gdnative.MethodOf("TextServer\000", "percent_sign\000", 993269549)
		methodTextServer[176] = gdnative.MethodOf("TextServer\000", "string_get_word_breaks\000", 1586579831)
		methodTextServer[177] = gdnative.MethodOf("TextServer\000", "is_confusable\000", 1433197768)
		methodTextServer[178] = gdnative.MethodOf("TextServer\000", "spoof_check\000", 3927539163)
		methodTextServer[179] = gdnative.MethodOf("TextServer\000", "strip_diacritics\000", 3135753539)
		methodTextServer[180] = gdnative.MethodOf("TextServer\000", "is_valid_identifier\000", 3927539163)
		methodTextServer[181] = gdnative.MethodOf("TextServer\000", "string_to_upper\000", 2305636099)
		methodTextServer[182] = gdnative.MethodOf("TextServer\000", "string_to_lower\000", 2305636099)
		methodTextServer[183] = gdnative.MethodOf("TextServer\000", "parse_structured_text\000", 3310685015)
		methodTextServerManager[0] = gdnative.MethodOf("TextServerManager\000", "add_interface\000", 1799689403)
		methodTextServerManager[1] = gdnative.MethodOf("TextServerManager\000", "get_interface_count\000", 3905245786)
		methodTextServerManager[2] = gdnative.MethodOf("TextServerManager\000", "remove_interface\000", 1799689403)
		methodTextServerManager[3] = gdnative.MethodOf("TextServerManager\000", "get_interface\000", 1672475555)
		methodTextServerManager[4] = gdnative.MethodOf("TextServerManager\000", "get_interfaces\000", 3995934104)
		methodTextServerManager[5] = gdnative.MethodOf("TextServerManager\000", "find_interface\000", 2240905781)
		methodTextServerManager[6] = gdnative.MethodOf("TextServerManager\000", "set_primary_interface\000", 1799689403)
		methodTextServerManager[7] = gdnative.MethodOf("TextServerManager\000", "get_primary_interface\000", 905850878)
		methodTexture2D[0] = gdnative.MethodOf("Texture2D\000", "get_width\000", 3905245786)
		methodTexture2D[1] = gdnative.MethodOf("Texture2D\000", "get_height\000", 3905245786)
		methodTexture2D[2] = gdnative.MethodOf("Texture2D\000", "get_size\000", 3341600327)
		methodTexture2D[3] = gdnative.MethodOf("Texture2D\000", "has_alpha\000", 36873697)
		methodTexture2D[4] = gdnative.MethodOf("Texture2D\000", "draw\000", 1115460088)
		methodTexture2D[5] = gdnative.MethodOf("Texture2D\000", "draw_rect\000", 575156982)
		methodTexture2D[6] = gdnative.MethodOf("Texture2D\000", "draw_rect_region\000", 1066564656)
		methodTexture2D[7] = gdnative.MethodOf("Texture2D\000", "get_image\000", 4190603485)
		methodTexture3D[0] = gdnative.MethodOf("Texture3D\000", "get_format\000", 3847873762)
		methodTexture3D[1] = gdnative.MethodOf("Texture3D\000", "get_width\000", 3905245786)
		methodTexture3D[2] = gdnative.MethodOf("Texture3D\000", "get_height\000", 3905245786)
		methodTexture3D[3] = gdnative.MethodOf("Texture3D\000", "get_depth\000", 3905245786)
		methodTexture3D[4] = gdnative.MethodOf("Texture3D\000", "has_mipmaps\000", 36873697)
		methodTexture3D[5] = gdnative.MethodOf("Texture3D\000", "get_data\000", 3995934104)
		methodTextureButton[0] = gdnative.MethodOf("TextureButton\000", "set_normal_texture\000", 4051416890)
		methodTextureButton[1] = gdnative.MethodOf("TextureButton\000", "set_pressed_texture\000", 4051416890)
		methodTextureButton[2] = gdnative.MethodOf("TextureButton\000", "set_hover_texture\000", 4051416890)
		methodTextureButton[3] = gdnative.MethodOf("TextureButton\000", "set_disabled_texture\000", 4051416890)
		methodTextureButton[4] = gdnative.MethodOf("TextureButton\000", "set_focused_texture\000", 4051416890)
		methodTextureButton[5] = gdnative.MethodOf("TextureButton\000", "set_click_mask\000", 698588216)
		methodTextureButton[6] = gdnative.MethodOf("TextureButton\000", "set_ignore_texture_size\000", 2586408642)
		methodTextureButton[7] = gdnative.MethodOf("TextureButton\000", "set_stretch_mode\000", 252530840)
		methodTextureButton[8] = gdnative.MethodOf("TextureButton\000", "set_flip_h\000", 2586408642)
		methodTextureButton[9] = gdnative.MethodOf("TextureButton\000", "is_flipped_h\000", 36873697)
		methodTextureButton[10] = gdnative.MethodOf("TextureButton\000", "set_flip_v\000", 2586408642)
		methodTextureButton[11] = gdnative.MethodOf("TextureButton\000", "is_flipped_v\000", 36873697)
		methodTextureButton[12] = gdnative.MethodOf("TextureButton\000", "get_normal_texture\000", 3635182373)
		methodTextureButton[13] = gdnative.MethodOf("TextureButton\000", "get_pressed_texture\000", 3635182373)
		methodTextureButton[14] = gdnative.MethodOf("TextureButton\000", "get_hover_texture\000", 3635182373)
		methodTextureButton[15] = gdnative.MethodOf("TextureButton\000", "get_disabled_texture\000", 3635182373)
		methodTextureButton[16] = gdnative.MethodOf("TextureButton\000", "get_focused_texture\000", 3635182373)
		methodTextureButton[17] = gdnative.MethodOf("TextureButton\000", "get_click_mask\000", 2459671998)
		methodTextureButton[18] = gdnative.MethodOf("TextureButton\000", "get_ignore_texture_size\000", 36873697)
		methodTextureButton[19] = gdnative.MethodOf("TextureButton\000", "get_stretch_mode\000", 33815122)
		methodTextureLayered[0] = gdnative.MethodOf("TextureLayered\000", "get_format\000", 3847873762)
		methodTextureLayered[1] = gdnative.MethodOf("TextureLayered\000", "get_layered_type\000", 518123893)
		methodTextureLayered[2] = gdnative.MethodOf("TextureLayered\000", "get_width\000", 3905245786)
		methodTextureLayered[3] = gdnative.MethodOf("TextureLayered\000", "get_height\000", 3905245786)
		methodTextureLayered[4] = gdnative.MethodOf("TextureLayered\000", "get_layers\000", 3905245786)
		methodTextureLayered[5] = gdnative.MethodOf("TextureLayered\000", "has_mipmaps\000", 36873697)
		methodTextureLayered[6] = gdnative.MethodOf("TextureLayered\000", "get_layer_data\000", 3655284255)
		methodTextureProgressBar[0] = gdnative.MethodOf("TextureProgressBar\000", "set_under_texture\000", 4051416890)
		methodTextureProgressBar[1] = gdnative.MethodOf("TextureProgressBar\000", "get_under_texture\000", 3635182373)
		methodTextureProgressBar[2] = gdnative.MethodOf("TextureProgressBar\000", "set_progress_texture\000", 4051416890)
		methodTextureProgressBar[3] = gdnative.MethodOf("TextureProgressBar\000", "get_progress_texture\000", 3635182373)
		methodTextureProgressBar[4] = gdnative.MethodOf("TextureProgressBar\000", "set_over_texture\000", 4051416890)
		methodTextureProgressBar[5] = gdnative.MethodOf("TextureProgressBar\000", "get_over_texture\000", 3635182373)
		methodTextureProgressBar[6] = gdnative.MethodOf("TextureProgressBar\000", "set_fill_mode\000", 1286410249)
		methodTextureProgressBar[7] = gdnative.MethodOf("TextureProgressBar\000", "get_fill_mode\000", 2455072627)
		methodTextureProgressBar[8] = gdnative.MethodOf("TextureProgressBar\000", "set_tint_under\000", 2920490490)
		methodTextureProgressBar[9] = gdnative.MethodOf("TextureProgressBar\000", "get_tint_under\000", 3444240500)
		methodTextureProgressBar[10] = gdnative.MethodOf("TextureProgressBar\000", "set_tint_progress\000", 2920490490)
		methodTextureProgressBar[11] = gdnative.MethodOf("TextureProgressBar\000", "get_tint_progress\000", 3444240500)
		methodTextureProgressBar[12] = gdnative.MethodOf("TextureProgressBar\000", "set_tint_over\000", 2920490490)
		methodTextureProgressBar[13] = gdnative.MethodOf("TextureProgressBar\000", "get_tint_over\000", 3444240500)
		methodTextureProgressBar[14] = gdnative.MethodOf("TextureProgressBar\000", "set_texture_progress_offset\000", 743155724)
		methodTextureProgressBar[15] = gdnative.MethodOf("TextureProgressBar\000", "get_texture_progress_offset\000", 3341600327)
		methodTextureProgressBar[16] = gdnative.MethodOf("TextureProgressBar\000", "set_radial_initial_angle\000", 373806689)
		methodTextureProgressBar[17] = gdnative.MethodOf("TextureProgressBar\000", "get_radial_initial_angle\000", 191475506)
		methodTextureProgressBar[18] = gdnative.MethodOf("TextureProgressBar\000", "set_radial_center_offset\000", 743155724)
		methodTextureProgressBar[19] = gdnative.MethodOf("TextureProgressBar\000", "get_radial_center_offset\000", 1497962370)
		methodTextureProgressBar[20] = gdnative.MethodOf("TextureProgressBar\000", "set_fill_degrees\000", 373806689)
		methodTextureProgressBar[21] = gdnative.MethodOf("TextureProgressBar\000", "get_fill_degrees\000", 191475506)
		methodTextureProgressBar[22] = gdnative.MethodOf("TextureProgressBar\000", "set_stretch_margin\000", 437707142)
		methodTextureProgressBar[23] = gdnative.MethodOf("TextureProgressBar\000", "get_stretch_margin\000", 1983885014)
		methodTextureProgressBar[24] = gdnative.MethodOf("TextureProgressBar\000", "set_nine_patch_stretch\000", 2586408642)
		methodTextureProgressBar[25] = gdnative.MethodOf("TextureProgressBar\000", "get_nine_patch_stretch\000", 36873697)
		methodTextureRect[0] = gdnative.MethodOf("TextureRect\000", "set_texture\000", 4051416890)
		methodTextureRect[1] = gdnative.MethodOf("TextureRect\000", "get_texture\000", 3635182373)
		methodTextureRect[2] = gdnative.MethodOf("TextureRect\000", "set_ignore_texture_size\000", 2586408642)
		methodTextureRect[3] = gdnative.MethodOf("TextureRect\000", "get_ignore_texture_size\000", 36873697)
		methodTextureRect[4] = gdnative.MethodOf("TextureRect\000", "set_flip_h\000", 2586408642)
		methodTextureRect[5] = gdnative.MethodOf("TextureRect\000", "is_flipped_h\000", 36873697)
		methodTextureRect[6] = gdnative.MethodOf("TextureRect\000", "set_flip_v\000", 2586408642)
		methodTextureRect[7] = gdnative.MethodOf("TextureRect\000", "is_flipped_v\000", 36873697)
		methodTextureRect[8] = gdnative.MethodOf("TextureRect\000", "set_stretch_mode\000", 58788729)
		methodTextureRect[9] = gdnative.MethodOf("TextureRect\000", "get_stretch_mode\000", 346396079)
		methodTheme[0] = gdnative.MethodOf("Theme\000", "set_icon\000", 2188371082)
		methodTheme[1] = gdnative.MethodOf("Theme\000", "get_icon\000", 934555193)
		methodTheme[2] = gdnative.MethodOf("Theme\000", "has_icon\000", 471820014)
		methodTheme[3] = gdnative.MethodOf("Theme\000", "rename_icon\000", 642128662)
		methodTheme[4] = gdnative.MethodOf("Theme\000", "clear_icon\000", 3740211285)
		methodTheme[5] = gdnative.MethodOf("Theme\000", "get_icon_list\000", 4291131558)
		methodTheme[6] = gdnative.MethodOf("Theme\000", "get_icon_type_list\000", 1139954409)
		methodTheme[7] = gdnative.MethodOf("Theme\000", "set_stylebox\000", 2075907568)
		methodTheme[8] = gdnative.MethodOf("Theme\000", "get_stylebox\000", 3405608165)
		methodTheme[9] = gdnative.MethodOf("Theme\000", "has_stylebox\000", 471820014)
		methodTheme[10] = gdnative.MethodOf("Theme\000", "rename_stylebox\000", 642128662)
		methodTheme[11] = gdnative.MethodOf("Theme\000", "clear_stylebox\000", 3740211285)
		methodTheme[12] = gdnative.MethodOf("Theme\000", "get_stylebox_list\000", 4291131558)
		methodTheme[13] = gdnative.MethodOf("Theme\000", "get_stylebox_type_list\000", 1139954409)
		methodTheme[14] = gdnative.MethodOf("Theme\000", "set_font\000", 177292320)
		methodTheme[15] = gdnative.MethodOf("Theme\000", "get_font\000", 3445063586)
		methodTheme[16] = gdnative.MethodOf("Theme\000", "has_font\000", 471820014)
		methodTheme[17] = gdnative.MethodOf("Theme\000", "rename_font\000", 642128662)
		methodTheme[18] = gdnative.MethodOf("Theme\000", "clear_font\000", 3740211285)
		methodTheme[19] = gdnative.MethodOf("Theme\000", "get_font_list\000", 4291131558)
		methodTheme[20] = gdnative.MethodOf("Theme\000", "get_font_type_list\000", 1139954409)
		methodTheme[21] = gdnative.MethodOf("Theme\000", "set_font_size\000", 281601298)
		methodTheme[22] = gdnative.MethodOf("Theme\000", "get_font_size\000", 2419549490)
		methodTheme[23] = gdnative.MethodOf("Theme\000", "has_font_size\000", 471820014)
		methodTheme[24] = gdnative.MethodOf("Theme\000", "rename_font_size\000", 642128662)
		methodTheme[25] = gdnative.MethodOf("Theme\000", "clear_font_size\000", 3740211285)
		methodTheme[26] = gdnative.MethodOf("Theme\000", "get_font_size_list\000", 4291131558)
		methodTheme[27] = gdnative.MethodOf("Theme\000", "get_font_size_type_list\000", 1139954409)
		methodTheme[28] = gdnative.MethodOf("Theme\000", "set_color\000", 4111215154)
		methodTheme[29] = gdnative.MethodOf("Theme\000", "get_color\000", 2015923404)
		methodTheme[30] = gdnative.MethodOf("Theme\000", "has_color\000", 471820014)
		methodTheme[31] = gdnative.MethodOf("Theme\000", "rename_color\000", 642128662)
		methodTheme[32] = gdnative.MethodOf("Theme\000", "clear_color\000", 3740211285)
		methodTheme[33] = gdnative.MethodOf("Theme\000", "get_color_list\000", 4291131558)
		methodTheme[34] = gdnative.MethodOf("Theme\000", "get_color_type_list\000", 1139954409)
		methodTheme[35] = gdnative.MethodOf("Theme\000", "set_constant\000", 281601298)
		methodTheme[36] = gdnative.MethodOf("Theme\000", "get_constant\000", 2419549490)
		methodTheme[37] = gdnative.MethodOf("Theme\000", "has_constant\000", 471820014)
		methodTheme[38] = gdnative.MethodOf("Theme\000", "rename_constant\000", 642128662)
		methodTheme[39] = gdnative.MethodOf("Theme\000", "clear_constant\000", 3740211285)
		methodTheme[40] = gdnative.MethodOf("Theme\000", "get_constant_list\000", 4291131558)
		methodTheme[41] = gdnative.MethodOf("Theme\000", "get_constant_type_list\000", 1139954409)
		methodTheme[42] = gdnative.MethodOf("Theme\000", "set_default_base_scale\000", 373806689)
		methodTheme[43] = gdnative.MethodOf("Theme\000", "get_default_base_scale\000", 1740695150)
		methodTheme[44] = gdnative.MethodOf("Theme\000", "has_default_base_scale\000", 36873697)
		methodTheme[45] = gdnative.MethodOf("Theme\000", "set_default_font\000", 1262170328)
		methodTheme[46] = gdnative.MethodOf("Theme\000", "get_default_font\000", 3229501585)
		methodTheme[47] = gdnative.MethodOf("Theme\000", "has_default_font\000", 36873697)
		methodTheme[48] = gdnative.MethodOf("Theme\000", "set_default_font_size\000", 1286410249)
		methodTheme[49] = gdnative.MethodOf("Theme\000", "get_default_font_size\000", 3905245786)
		methodTheme[50] = gdnative.MethodOf("Theme\000", "has_default_font_size\000", 36873697)
		methodTheme[51] = gdnative.MethodOf("Theme\000", "set_theme_item\000", 2492983623)
		methodTheme[52] = gdnative.MethodOf("Theme\000", "get_theme_item\000", 2191024021)
		methodTheme[53] = gdnative.MethodOf("Theme\000", "has_theme_item\000", 1739311056)
		methodTheme[54] = gdnative.MethodOf("Theme\000", "rename_theme_item\000", 3900867553)
		methodTheme[55] = gdnative.MethodOf("Theme\000", "clear_theme_item\000", 2965505587)
		methodTheme[56] = gdnative.MethodOf("Theme\000", "get_theme_item_list\000", 3726716710)
		methodTheme[57] = gdnative.MethodOf("Theme\000", "get_theme_item_type_list\000", 1316004935)
		methodTheme[58] = gdnative.MethodOf("Theme\000", "set_type_variation\000", 3740211285)
		methodTheme[59] = gdnative.MethodOf("Theme\000", "is_type_variation\000", 471820014)
		methodTheme[60] = gdnative.MethodOf("Theme\000", "clear_type_variation\000", 3304788590)
		methodTheme[61] = gdnative.MethodOf("Theme\000", "get_type_variation_base\000", 1965194235)
		methodTheme[62] = gdnative.MethodOf("Theme\000", "get_type_variation_list\000", 1761182771)
		methodTheme[63] = gdnative.MethodOf("Theme\000", "add_type\000", 3304788590)
		methodTheme[64] = gdnative.MethodOf("Theme\000", "remove_type\000", 3304788590)
		methodTheme[65] = gdnative.MethodOf("Theme\000", "get_type_list\000", 1139954409)
		methodTheme[66] = gdnative.MethodOf("Theme\000", "merge_with\000", 2326690814)
		methodTheme[67] = gdnative.MethodOf("Theme\000", "clear\000", 3218959716)
		methodThread[0] = gdnative.MethodOf("Thread\000", "start\000", 2779832528)
		methodThread[1] = gdnative.MethodOf("Thread\000", "get_id\000", 201670096)
		methodThread[2] = gdnative.MethodOf("Thread\000", "is_started\000", 36873697)
		methodThread[3] = gdnative.MethodOf("Thread\000", "is_alive\000", 36873697)
		methodThread[4] = gdnative.MethodOf("Thread\000", "wait_to_finish\000", 1460262497)
		methodTileData[0] = gdnative.MethodOf("TileData\000", "set_flip_h\000", 2586408642)
		methodTileData[1] = gdnative.MethodOf("TileData\000", "get_flip_h\000", 36873697)
		methodTileData[2] = gdnative.MethodOf("TileData\000", "set_flip_v\000", 2586408642)
		methodTileData[3] = gdnative.MethodOf("TileData\000", "get_flip_v\000", 36873697)
		methodTileData[4] = gdnative.MethodOf("TileData\000", "set_transpose\000", 2586408642)
		methodTileData[5] = gdnative.MethodOf("TileData\000", "get_transpose\000", 36873697)
		methodTileData[6] = gdnative.MethodOf("TileData\000", "set_material\000", 2757459619)
		methodTileData[7] = gdnative.MethodOf("TileData\000", "get_material\000", 5934680)
		methodTileData[8] = gdnative.MethodOf("TileData\000", "set_texture_offset\000", 1130785943)
		methodTileData[9] = gdnative.MethodOf("TileData\000", "get_texture_offset\000", 3690982128)
		methodTileData[10] = gdnative.MethodOf("TileData\000", "set_modulate\000", 2920490490)
		methodTileData[11] = gdnative.MethodOf("TileData\000", "get_modulate\000", 3444240500)
		methodTileData[12] = gdnative.MethodOf("TileData\000", "set_z_index\000", 1286410249)
		methodTileData[13] = gdnative.MethodOf("TileData\000", "get_z_index\000", 3905245786)
		methodTileData[14] = gdnative.MethodOf("TileData\000", "set_y_sort_origin\000", 1286410249)
		methodTileData[15] = gdnative.MethodOf("TileData\000", "get_y_sort_origin\000", 3905245786)
		methodTileData[16] = gdnative.MethodOf("TileData\000", "set_occluder\000", 914399637)
		methodTileData[17] = gdnative.MethodOf("TileData\000", "get_occluder\000", 2458574231)
		methodTileData[18] = gdnative.MethodOf("TileData\000", "set_constant_linear_velocity\000", 163021252)
		methodTileData[19] = gdnative.MethodOf("TileData\000", "get_constant_linear_velocity\000", 2299179447)
		methodTileData[20] = gdnative.MethodOf("TileData\000", "set_constant_angular_velocity\000", 1602489585)
		methodTileData[21] = gdnative.MethodOf("TileData\000", "get_constant_angular_velocity\000", 2339986948)
		methodTileData[22] = gdnative.MethodOf("TileData\000", "set_collision_polygons_count\000", 3937882851)
		methodTileData[23] = gdnative.MethodOf("TileData\000", "get_collision_polygons_count\000", 923996154)
		methodTileData[24] = gdnative.MethodOf("TileData\000", "add_collision_polygon\000", 1286410249)
		methodTileData[25] = gdnative.MethodOf("TileData\000", "remove_collision_polygon\000", 3937882851)
		methodTileData[26] = gdnative.MethodOf("TileData\000", "set_collision_polygon_points\000", 3230546541)
		methodTileData[27] = gdnative.MethodOf("TileData\000", "get_collision_polygon_points\000", 103942801)
		methodTileData[28] = gdnative.MethodOf("TileData\000", "set_collision_polygon_one_way\000", 1383440665)
		methodTileData[29] = gdnative.MethodOf("TileData\000", "is_collision_polygon_one_way\000", 2522259332)
		methodTileData[30] = gdnative.MethodOf("TileData\000", "set_collision_polygon_one_way_margin\000", 3506521499)
		methodTileData[31] = gdnative.MethodOf("TileData\000", "get_collision_polygon_one_way_margin\000", 3085491603)
		methodTileData[32] = gdnative.MethodOf("TileData\000", "set_terrain_set\000", 1286410249)
		methodTileData[33] = gdnative.MethodOf("TileData\000", "get_terrain_set\000", 3905245786)
		methodTileData[34] = gdnative.MethodOf("TileData\000", "set_terrain\000", 1286410249)
		methodTileData[35] = gdnative.MethodOf("TileData\000", "get_terrain\000", 3905245786)
		methodTileData[36] = gdnative.MethodOf("TileData\000", "set_terrain_peering_bit\000", 1084452308)
		methodTileData[37] = gdnative.MethodOf("TileData\000", "get_terrain_peering_bit\000", 3831796792)
		methodTileData[38] = gdnative.MethodOf("TileData\000", "set_navigation_polygon\000", 2224691167)
		methodTileData[39] = gdnative.MethodOf("TileData\000", "get_navigation_polygon\000", 3991786031)
		methodTileData[40] = gdnative.MethodOf("TileData\000", "set_probability\000", 373806689)
		methodTileData[41] = gdnative.MethodOf("TileData\000", "get_probability\000", 1740695150)
		methodTileData[42] = gdnative.MethodOf("TileData\000", "set_custom_data\000", 402577236)
		methodTileData[43] = gdnative.MethodOf("TileData\000", "get_custom_data\000", 1868160156)
		methodTileData[44] = gdnative.MethodOf("TileData\000", "set_custom_data_by_layer_id\000", 2152698145)
		methodTileData[45] = gdnative.MethodOf("TileData\000", "get_custom_data_by_layer_id\000", 4227898402)
		methodTileMap[0] = gdnative.MethodOf("TileMap\000", "set_tileset\000", 774531446)
		methodTileMap[1] = gdnative.MethodOf("TileMap\000", "get_tileset\000", 2678226422)
		methodTileMap[2] = gdnative.MethodOf("TileMap\000", "set_quadrant_size\000", 1286410249)
		methodTileMap[3] = gdnative.MethodOf("TileMap\000", "get_quadrant_size\000", 3905245786)
		methodTileMap[4] = gdnative.MethodOf("TileMap\000", "get_layers_count\000", 3905245786)
		methodTileMap[5] = gdnative.MethodOf("TileMap\000", "add_layer\000", 1286410249)
		methodTileMap[6] = gdnative.MethodOf("TileMap\000", "move_layer\000", 3937882851)
		methodTileMap[7] = gdnative.MethodOf("TileMap\000", "remove_layer\000", 1286410249)
		methodTileMap[8] = gdnative.MethodOf("TileMap\000", "set_layer_name\000", 501894301)
		methodTileMap[9] = gdnative.MethodOf("TileMap\000", "get_layer_name\000", 844755477)
		methodTileMap[10] = gdnative.MethodOf("TileMap\000", "set_layer_enabled\000", 300928843)
		methodTileMap[11] = gdnative.MethodOf("TileMap\000", "is_layer_enabled\000", 1116898809)
		methodTileMap[12] = gdnative.MethodOf("TileMap\000", "set_layer_modulate\000", 2878471219)
		methodTileMap[13] = gdnative.MethodOf("TileMap\000", "get_layer_modulate\000", 3457211756)
		methodTileMap[14] = gdnative.MethodOf("TileMap\000", "set_layer_y_sort_enabled\000", 300928843)
		methodTileMap[15] = gdnative.MethodOf("TileMap\000", "is_layer_y_sort_enabled\000", 1116898809)
		methodTileMap[16] = gdnative.MethodOf("TileMap\000", "set_layer_y_sort_origin\000", 3937882851)
		methodTileMap[17] = gdnative.MethodOf("TileMap\000", "get_layer_y_sort_origin\000", 923996154)
		methodTileMap[18] = gdnative.MethodOf("TileMap\000", "set_layer_z_index\000", 3937882851)
		methodTileMap[19] = gdnative.MethodOf("TileMap\000", "get_layer_z_index\000", 923996154)
		methodTileMap[20] = gdnative.MethodOf("TileMap\000", "set_collision_animatable\000", 2586408642)
		methodTileMap[21] = gdnative.MethodOf("TileMap\000", "is_collision_animatable\000", 36873697)
		methodTileMap[22] = gdnative.MethodOf("TileMap\000", "set_collision_visibility_mode\000", 3193440636)
		methodTileMap[23] = gdnative.MethodOf("TileMap\000", "get_collision_visibility_mode\000", 2026313073)
		methodTileMap[24] = gdnative.MethodOf("TileMap\000", "set_navigation_visibility_mode\000", 3193440636)
		methodTileMap[25] = gdnative.MethodOf("TileMap\000", "get_navigation_visibility_mode\000", 2026313073)
		methodTileMap[26] = gdnative.MethodOf("TileMap\000", "set_cell\000", 1732664643)
		methodTileMap[27] = gdnative.MethodOf("TileMap\000", "erase_cell\000", 2311374912)
		methodTileMap[28] = gdnative.MethodOf("TileMap\000", "get_cell_source_id\000", 201473609)
		methodTileMap[29] = gdnative.MethodOf("TileMap\000", "get_cell_atlas_coords\000", 780734168)
		methodTileMap[30] = gdnative.MethodOf("TileMap\000", "get_cell_alternative_tile\000", 201473609)
		methodTileMap[31] = gdnative.MethodOf("TileMap\000", "get_coords_for_body_rid\000", 291584212)
		methodTileMap[32] = gdnative.MethodOf("TileMap\000", "get_pattern\000", 2833570986)
		methodTileMap[33] = gdnative.MethodOf("TileMap\000", "map_pattern\000", 1864516957)
		methodTileMap[34] = gdnative.MethodOf("TileMap\000", "set_pattern\000", 1195853946)
		methodTileMap[35] = gdnative.MethodOf("TileMap\000", "set_cells_terrain_connect\000", 3072115677)
		methodTileMap[36] = gdnative.MethodOf("TileMap\000", "set_cells_terrain_path\000", 3072115677)
		methodTileMap[37] = gdnative.MethodOf("TileMap\000", "fix_invalid_tiles\000", 3218959716)
		methodTileMap[38] = gdnative.MethodOf("TileMap\000", "clear_layer\000", 1286410249)
		methodTileMap[39] = gdnative.MethodOf("TileMap\000", "clear\000", 3218959716)
		methodTileMap[40] = gdnative.MethodOf("TileMap\000", "force_update\000", 1025054187)
		methodTileMap[41] = gdnative.MethodOf("TileMap\000", "get_surrounding_tiles\000", 2673526557)
		methodTileMap[42] = gdnative.MethodOf("TileMap\000", "get_used_cells\000", 663333327)
		methodTileMap[43] = gdnative.MethodOf("TileMap\000", "get_used_rect\000", 3248174)
		methodTileMap[44] = gdnative.MethodOf("TileMap\000", "map_to_world\000", 108438297)
		methodTileMap[45] = gdnative.MethodOf("TileMap\000", "world_to_map\000", 837806996)
		methodTileMap[46] = gdnative.MethodOf("TileMap\000", "get_neighbor_cell\000", 986575103)
		methodTileMapPattern[0] = gdnative.MethodOf("TileMapPattern\000", "set_cell\000", 634000503)
		methodTileMapPattern[1] = gdnative.MethodOf("TileMapPattern\000", "has_cell\000", 3900751641)
		methodTileMapPattern[2] = gdnative.MethodOf("TileMapPattern\000", "remove_cell\000", 4153096796)
		methodTileMapPattern[3] = gdnative.MethodOf("TileMapPattern\000", "get_cell_source_id\000", 2485466453)
		methodTileMapPattern[4] = gdnative.MethodOf("TileMapPattern\000", "get_cell_atlas_coords\000", 3050897911)
		methodTileMapPattern[5] = gdnative.MethodOf("TileMapPattern\000", "get_cell_alternative_tile\000", 2485466453)
		methodTileMapPattern[6] = gdnative.MethodOf("TileMapPattern\000", "get_used_cells\000", 3995934104)
		methodTileMapPattern[7] = gdnative.MethodOf("TileMapPattern\000", "get_size\000", 3690982128)
		methodTileMapPattern[8] = gdnative.MethodOf("TileMapPattern\000", "set_size\000", 1130785943)
		methodTileMapPattern[9] = gdnative.MethodOf("TileMapPattern\000", "is_empty\000", 36873697)
		methodTileSet[0] = gdnative.MethodOf("TileSet\000", "get_next_source_id\000", 3905245786)
		methodTileSet[1] = gdnative.MethodOf("TileSet\000", "add_source\000", 276991387)
		methodTileSet[2] = gdnative.MethodOf("TileSet\000", "remove_source\000", 1286410249)
		methodTileSet[3] = gdnative.MethodOf("TileSet\000", "set_source_id\000", 3937882851)
		methodTileSet[4] = gdnative.MethodOf("TileSet\000", "get_source_count\000", 3905245786)
		methodTileSet[5] = gdnative.MethodOf("TileSet\000", "get_source_id\000", 923996154)
		methodTileSet[6] = gdnative.MethodOf("TileSet\000", "has_source\000", 1116898809)
		methodTileSet[7] = gdnative.MethodOf("TileSet\000", "get_source\000", 1763540252)
		methodTileSet[8] = gdnative.MethodOf("TileSet\000", "set_tile_shape\000", 2131427112)
		methodTileSet[9] = gdnative.MethodOf("TileSet\000", "get_tile_shape\000", 716918169)
		methodTileSet[10] = gdnative.MethodOf("TileSet\000", "set_tile_layout\000", 1071216679)
		methodTileSet[11] = gdnative.MethodOf("TileSet\000", "get_tile_layout\000", 194628839)
		methodTileSet[12] = gdnative.MethodOf("TileSet\000", "set_tile_offset_axis\000", 3300198521)
		methodTileSet[13] = gdnative.MethodOf("TileSet\000", "get_tile_offset_axis\000", 762494114)
		methodTileSet[14] = gdnative.MethodOf("TileSet\000", "set_tile_size\000", 1130785943)
		methodTileSet[15] = gdnative.MethodOf("TileSet\000", "get_tile_size\000", 3690982128)
		methodTileSet[16] = gdnative.MethodOf("TileSet\000", "set_uv_clipping\000", 2586408642)
		methodTileSet[17] = gdnative.MethodOf("TileSet\000", "is_uv_clipping\000", 36873697)
		methodTileSet[18] = gdnative.MethodOf("TileSet\000", "get_occlusion_layers_count\000", 3905245786)
		methodTileSet[19] = gdnative.MethodOf("TileSet\000", "add_occlusion_layer\000", 1025054187)
		methodTileSet[20] = gdnative.MethodOf("TileSet\000", "move_occlusion_layer\000", 3937882851)
		methodTileSet[21] = gdnative.MethodOf("TileSet\000", "remove_occlusion_layer\000", 1286410249)
		methodTileSet[22] = gdnative.MethodOf("TileSet\000", "set_occlusion_layer_light_mask\000", 3937882851)
		methodTileSet[23] = gdnative.MethodOf("TileSet\000", "get_occlusion_layer_light_mask\000", 923996154)
		methodTileSet[24] = gdnative.MethodOf("TileSet\000", "set_occlusion_layer_sdf_collision\000", 300928843)
		methodTileSet[25] = gdnative.MethodOf("TileSet\000", "get_occlusion_layer_sdf_collision\000", 1116898809)
		methodTileSet[26] = gdnative.MethodOf("TileSet\000", "get_physics_layers_count\000", 3905245786)
		methodTileSet[27] = gdnative.MethodOf("TileSet\000", "add_physics_layer\000", 1025054187)
		methodTileSet[28] = gdnative.MethodOf("TileSet\000", "move_physics_layer\000", 3937882851)
		methodTileSet[29] = gdnative.MethodOf("TileSet\000", "remove_physics_layer\000", 1286410249)
		methodTileSet[30] = gdnative.MethodOf("TileSet\000", "set_physics_layer_collision_layer\000", 3937882851)
		methodTileSet[31] = gdnative.MethodOf("TileSet\000", "get_physics_layer_collision_layer\000", 923996154)
		methodTileSet[32] = gdnative.MethodOf("TileSet\000", "set_physics_layer_collision_mask\000", 3937882851)
		methodTileSet[33] = gdnative.MethodOf("TileSet\000", "get_physics_layer_collision_mask\000", 923996154)
		methodTileSet[34] = gdnative.MethodOf("TileSet\000", "set_physics_layer_physics_material\000", 1018687357)
		methodTileSet[35] = gdnative.MethodOf("TileSet\000", "get_physics_layer_physics_material\000", 788318639)
		methodTileSet[36] = gdnative.MethodOf("TileSet\000", "get_terrain_sets_count\000", 3905245786)
		methodTileSet[37] = gdnative.MethodOf("TileSet\000", "add_terrain_set\000", 1025054187)
		methodTileSet[38] = gdnative.MethodOf("TileSet\000", "move_terrain_set\000", 3937882851)
		methodTileSet[39] = gdnative.MethodOf("TileSet\000", "remove_terrain_set\000", 1286410249)
		methodTileSet[40] = gdnative.MethodOf("TileSet\000", "set_terrain_set_mode\000", 3943003916)
		methodTileSet[41] = gdnative.MethodOf("TileSet\000", "get_terrain_set_mode\000", 2084469411)
		methodTileSet[42] = gdnative.MethodOf("TileSet\000", "get_terrains_count\000", 923996154)
		methodTileSet[43] = gdnative.MethodOf("TileSet\000", "add_terrain\000", 3023605688)
		methodTileSet[44] = gdnative.MethodOf("TileSet\000", "move_terrain\000", 1649997291)
		methodTileSet[45] = gdnative.MethodOf("TileSet\000", "remove_terrain\000", 3937882851)
		methodTileSet[46] = gdnative.MethodOf("TileSet\000", "set_terrain_name\000", 2285447957)
		methodTileSet[47] = gdnative.MethodOf("TileSet\000", "get_terrain_name\000", 1391810591)
		methodTileSet[48] = gdnative.MethodOf("TileSet\000", "set_terrain_color\000", 3733378741)
		methodTileSet[49] = gdnative.MethodOf("TileSet\000", "get_terrain_color\000", 2165839948)
		methodTileSet[50] = gdnative.MethodOf("TileSet\000", "get_navigation_layers_count\000", 3905245786)
		methodTileSet[51] = gdnative.MethodOf("TileSet\000", "add_navigation_layer\000", 1025054187)
		methodTileSet[52] = gdnative.MethodOf("TileSet\000", "move_navigation_layer\000", 3937882851)
		methodTileSet[53] = gdnative.MethodOf("TileSet\000", "remove_navigation_layer\000", 1286410249)
		methodTileSet[54] = gdnative.MethodOf("TileSet\000", "set_navigation_layer_layers\000", 3937882851)
		methodTileSet[55] = gdnative.MethodOf("TileSet\000", "get_navigation_layer_layers\000", 923996154)
		methodTileSet[56] = gdnative.MethodOf("TileSet\000", "get_custom_data_layers_count\000", 3905245786)
		methodTileSet[57] = gdnative.MethodOf("TileSet\000", "add_custom_data_layer\000", 1025054187)
		methodTileSet[58] = gdnative.MethodOf("TileSet\000", "move_custom_data_layer\000", 3937882851)
		methodTileSet[59] = gdnative.MethodOf("TileSet\000", "remove_custom_data_layer\000", 1286410249)
		methodTileSet[60] = gdnative.MethodOf("TileSet\000", "get_custom_data_layer_by_name\000", 1321353865)
		methodTileSet[61] = gdnative.MethodOf("TileSet\000", "set_custom_data_layer_name\000", 501894301)
		methodTileSet[62] = gdnative.MethodOf("TileSet\000", "get_custom_data_layer_name\000", 844755477)
		methodTileSet[63] = gdnative.MethodOf("TileSet\000", "set_custom_data_layer_type\000", 3492912874)
		methodTileSet[64] = gdnative.MethodOf("TileSet\000", "get_custom_data_layer_type\000", 2990820875)
		methodTileSet[65] = gdnative.MethodOf("TileSet\000", "set_source_level_tile_proxy\000", 3937882851)
		methodTileSet[66] = gdnative.MethodOf("TileSet\000", "get_source_level_tile_proxy\000", 3744713108)
		methodTileSet[67] = gdnative.MethodOf("TileSet\000", "has_source_level_tile_proxy\000", 3067735520)
		methodTileSet[68] = gdnative.MethodOf("TileSet\000", "remove_source_level_tile_proxy\000", 1286410249)
		methodTileSet[69] = gdnative.MethodOf("TileSet\000", "set_coords_level_tile_proxy\000", 1769939278)
		methodTileSet[70] = gdnative.MethodOf("TileSet\000", "get_coords_level_tile_proxy\000", 2856536371)
		methodTileSet[71] = gdnative.MethodOf("TileSet\000", "has_coords_level_tile_proxy\000", 3957903770)
		methodTileSet[72] = gdnative.MethodOf("TileSet\000", "remove_coords_level_tile_proxy\000", 2311374912)
		methodTileSet[73] = gdnative.MethodOf("TileSet\000", "set_alternative_level_tile_proxy\000", 3862385460)
		methodTileSet[74] = gdnative.MethodOf("TileSet\000", "get_alternative_level_tile_proxy\000", 2303761075)
		methodTileSet[75] = gdnative.MethodOf("TileSet\000", "has_alternative_level_tile_proxy\000", 180086755)
		methodTileSet[76] = gdnative.MethodOf("TileSet\000", "remove_alternative_level_tile_proxy\000", 2328951467)
		methodTileSet[77] = gdnative.MethodOf("TileSet\000", "map_tile_proxy\000", 4267935328)
		methodTileSet[78] = gdnative.MethodOf("TileSet\000", "cleanup_invalid_tile_proxies\000", 3218959716)
		methodTileSet[79] = gdnative.MethodOf("TileSet\000", "clear_tile_proxies\000", 3218959716)
		methodTileSet[80] = gdnative.MethodOf("TileSet\000", "add_pattern\000", 3009264082)
		methodTileSet[81] = gdnative.MethodOf("TileSet\000", "get_pattern\000", 4207737510)
		methodTileSet[82] = gdnative.MethodOf("TileSet\000", "remove_pattern\000", 1286410249)
		methodTileSet[83] = gdnative.MethodOf("TileSet\000", "get_patterns_count\000", 2455072627)
		methodTileSetAtlasSource[0] = gdnative.MethodOf("TileSetAtlasSource\000", "set_texture\000", 4051416890)
		methodTileSetAtlasSource[1] = gdnative.MethodOf("TileSetAtlasSource\000", "get_texture\000", 3635182373)
		methodTileSetAtlasSource[2] = gdnative.MethodOf("TileSetAtlasSource\000", "set_margins\000", 1130785943)
		methodTileSetAtlasSource[3] = gdnative.MethodOf("TileSetAtlasSource\000", "get_margins\000", 3690982128)
		methodTileSetAtlasSource[4] = gdnative.MethodOf("TileSetAtlasSource\000", "set_separation\000", 1130785943)
		methodTileSetAtlasSource[5] = gdnative.MethodOf("TileSetAtlasSource\000", "get_separation\000", 3690982128)
		methodTileSetAtlasSource[6] = gdnative.MethodOf("TileSetAtlasSource\000", "set_texture_region_size\000", 1130785943)
		methodTileSetAtlasSource[7] = gdnative.MethodOf("TileSetAtlasSource\000", "get_texture_region_size\000", 3690982128)
		methodTileSetAtlasSource[8] = gdnative.MethodOf("TileSetAtlasSource\000", "set_use_texture_padding\000", 2586408642)
		methodTileSetAtlasSource[9] = gdnative.MethodOf("TileSetAtlasSource\000", "get_use_texture_padding\000", 36873697)
		methodTileSetAtlasSource[10] = gdnative.MethodOf("TileSetAtlasSource\000", "create_tile\000", 1583819816)
		methodTileSetAtlasSource[11] = gdnative.MethodOf("TileSetAtlasSource\000", "remove_tile\000", 1130785943)
		methodTileSetAtlasSource[12] = gdnative.MethodOf("TileSetAtlasSource\000", "move_tile_in_atlas\000", 1375626516)
		methodTileSetAtlasSource[13] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_size_in_atlas\000", 3050897911)
		methodTileSetAtlasSource[14] = gdnative.MethodOf("TileSetAtlasSource\000", "has_room_for_tile\000", 4182444377)
		methodTileSetAtlasSource[15] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tiles_to_be_removed_on_change\000", 1240378054)
		methodTileSetAtlasSource[16] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_at_coords\000", 3050897911)
		methodTileSetAtlasSource[17] = gdnative.MethodOf("TileSetAtlasSource\000", "set_tile_animation_columns\000", 3200960707)
		methodTileSetAtlasSource[18] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_columns\000", 2485466453)
		methodTileSetAtlasSource[19] = gdnative.MethodOf("TileSetAtlasSource\000", "set_tile_animation_separation\000", 1941061099)
		methodTileSetAtlasSource[20] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_separation\000", 3050897911)
		methodTileSetAtlasSource[21] = gdnative.MethodOf("TileSetAtlasSource\000", "set_tile_animation_speed\000", 2262553149)
		methodTileSetAtlasSource[22] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_speed\000", 719993801)
		methodTileSetAtlasSource[23] = gdnative.MethodOf("TileSetAtlasSource\000", "set_tile_animation_frames_count\000", 3200960707)
		methodTileSetAtlasSource[24] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_frames_count\000", 2485466453)
		methodTileSetAtlasSource[25] = gdnative.MethodOf("TileSetAtlasSource\000", "set_tile_animation_frame_duration\000", 2843487787)
		methodTileSetAtlasSource[26] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_frame_duration\000", 1802448425)
		methodTileSetAtlasSource[27] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_animation_total_duration\000", 719993801)
		methodTileSetAtlasSource[28] = gdnative.MethodOf("TileSetAtlasSource\000", "create_alternative_tile\000", 3531100812)
		methodTileSetAtlasSource[29] = gdnative.MethodOf("TileSetAtlasSource\000", "remove_alternative_tile\000", 3200960707)
		methodTileSetAtlasSource[30] = gdnative.MethodOf("TileSetAtlasSource\000", "set_alternative_tile_id\000", 1499785778)
		methodTileSetAtlasSource[31] = gdnative.MethodOf("TileSetAtlasSource\000", "get_next_alternative_tile_id\000", 2485466453)
		methodTileSetAtlasSource[32] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_data\000", 3534028207)
		methodTileSetAtlasSource[33] = gdnative.MethodOf("TileSetAtlasSource\000", "get_atlas_grid_size\000", 3690982128)
		methodTileSetAtlasSource[34] = gdnative.MethodOf("TileSetAtlasSource\000", "get_tile_texture_region\000", 1321423751)
		methodTileSetAtlasSource[35] = gdnative.MethodOf("TileSetAtlasSource\000", "get_runtime_texture\000", 3635182373)
		methodTileSetAtlasSource[36] = gdnative.MethodOf("TileSetAtlasSource\000", "get_runtime_tile_texture_region\000", 104874263)
		methodTileSetScenesCollectionSource[0] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "get_scene_tiles_count\000", 2455072627)
		methodTileSetScenesCollectionSource[1] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "get_scene_tile_id\000", 3744713108)
		methodTileSetScenesCollectionSource[2] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "has_scene_tile_id\000", 3067735520)
		methodTileSetScenesCollectionSource[3] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "create_scene_tile\000", 2633389122)
		methodTileSetScenesCollectionSource[4] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "set_scene_tile_id\000", 3937882851)
		methodTileSetScenesCollectionSource[5] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "set_scene_tile_scene\000", 3435852839)
		methodTileSetScenesCollectionSource[6] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "get_scene_tile_scene\000", 511017218)
		methodTileSetScenesCollectionSource[7] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "set_scene_tile_display_placeholder\000", 300928843)
		methodTileSetScenesCollectionSource[8] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "get_scene_tile_display_placeholder\000", 1116898809)
		methodTileSetScenesCollectionSource[9] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "remove_scene_tile\000", 1286410249)
		methodTileSetScenesCollectionSource[10] = gdnative.MethodOf("TileSetScenesCollectionSource\000", "get_next_scene_tile_id\000", 3905245786)
		methodTileSetSource[0] = gdnative.MethodOf("TileSetSource\000", "get_tiles_count\000", 3905245786)
		methodTileSetSource[1] = gdnative.MethodOf("TileSetSource\000", "get_tile_id\000", 880721226)
		methodTileSetSource[2] = gdnative.MethodOf("TileSetSource\000", "has_tile\000", 3900751641)
		methodTileSetSource[3] = gdnative.MethodOf("TileSetSource\000", "get_alternative_tiles_count\000", 2485466453)
		methodTileSetSource[4] = gdnative.MethodOf("TileSetSource\000", "get_alternative_tile_id\000", 89881719)
		methodTileSetSource[5] = gdnative.MethodOf("TileSetSource\000", "has_alternative_tile\000", 1073731340)
		methodTime[0] = gdnative.MethodOf("Time\000", "get_datetime_dict_from_unix_time\000", 3485342025)
		methodTime[1] = gdnative.MethodOf("Time\000", "get_date_dict_from_unix_time\000", 3485342025)
		methodTime[2] = gdnative.MethodOf("Time\000", "get_time_dict_from_unix_time\000", 3485342025)
		methodTime[3] = gdnative.MethodOf("Time\000", "get_datetime_string_from_unix_time\000", 2311239925)
		methodTime[4] = gdnative.MethodOf("Time\000", "get_date_string_from_unix_time\000", 844755477)
		methodTime[5] = gdnative.MethodOf("Time\000", "get_time_string_from_unix_time\000", 844755477)
		methodTime[6] = gdnative.MethodOf("Time\000", "get_datetime_dict_from_datetime_string\000", 3253569256)
		methodTime[7] = gdnative.MethodOf("Time\000", "get_datetime_string_from_datetime_dict\000", 1898123706)
		methodTime[8] = gdnative.MethodOf("Time\000", "get_unix_time_from_datetime_dict\000", 3021115443)
		methodTime[9] = gdnative.MethodOf("Time\000", "get_unix_time_from_datetime_string\000", 1321353865)
		methodTime[10] = gdnative.MethodOf("Time\000", "get_offset_string_from_offset_minutes\000", 844755477)
		methodTime[11] = gdnative.MethodOf("Time\000", "get_datetime_dict_from_system\000", 205769976)
		methodTime[12] = gdnative.MethodOf("Time\000", "get_date_dict_from_system\000", 205769976)
		methodTime[13] = gdnative.MethodOf("Time\000", "get_time_dict_from_system\000", 205769976)
		methodTime[14] = gdnative.MethodOf("Time\000", "get_datetime_string_from_system\000", 1136425492)
		methodTime[15] = gdnative.MethodOf("Time\000", "get_date_string_from_system\000", 1162154673)
		methodTime[16] = gdnative.MethodOf("Time\000", "get_time_string_from_system\000", 1162154673)
		methodTime[17] = gdnative.MethodOf("Time\000", "get_time_zone_from_system\000", 3102165223)
		methodTime[18] = gdnative.MethodOf("Time\000", "get_unix_time_from_system\000", 1740695150)
		methodTime[19] = gdnative.MethodOf("Time\000", "get_ticks_msec\000", 3905245786)
		methodTime[20] = gdnative.MethodOf("Time\000", "get_ticks_usec\000", 3905245786)
		methodTimer[0] = gdnative.MethodOf("Timer\000", "set_wait_time\000", 373806689)
		methodTimer[1] = gdnative.MethodOf("Timer\000", "get_wait_time\000", 1740695150)
		methodTimer[2] = gdnative.MethodOf("Timer\000", "set_one_shot\000", 2586408642)
		methodTimer[3] = gdnative.MethodOf("Timer\000", "is_one_shot\000", 36873697)
		methodTimer[4] = gdnative.MethodOf("Timer\000", "set_autostart\000", 2586408642)
		methodTimer[5] = gdnative.MethodOf("Timer\000", "has_autostart\000", 36873697)
		methodTimer[6] = gdnative.MethodOf("Timer\000", "start\000", 1392008558)
		methodTimer[7] = gdnative.MethodOf("Timer\000", "stop\000", 3218959716)
		methodTimer[8] = gdnative.MethodOf("Timer\000", "set_paused\000", 2586408642)
		methodTimer[9] = gdnative.MethodOf("Timer\000", "is_paused\000", 36873697)
		methodTimer[10] = gdnative.MethodOf("Timer\000", "is_stopped\000", 36873697)
		methodTimer[11] = gdnative.MethodOf("Timer\000", "get_time_left\000", 1740695150)
		methodTimer[12] = gdnative.MethodOf("Timer\000", "set_timer_process_callback\000", 3469495063)
		methodTimer[13] = gdnative.MethodOf("Timer\000", "get_timer_process_callback\000", 2672570227)
		methodTorusMesh[0] = gdnative.MethodOf("TorusMesh\000", "set_inner_radius\000", 373806689)
		methodTorusMesh[1] = gdnative.MethodOf("TorusMesh\000", "get_inner_radius\000", 1740695150)
		methodTorusMesh[2] = gdnative.MethodOf("TorusMesh\000", "set_outer_radius\000", 373806689)
		methodTorusMesh[3] = gdnative.MethodOf("TorusMesh\000", "get_outer_radius\000", 1740695150)
		methodTorusMesh[4] = gdnative.MethodOf("TorusMesh\000", "set_rings\000", 1286410249)
		methodTorusMesh[5] = gdnative.MethodOf("TorusMesh\000", "get_rings\000", 3905245786)
		methodTorusMesh[6] = gdnative.MethodOf("TorusMesh\000", "set_ring_segments\000", 1286410249)
		methodTorusMesh[7] = gdnative.MethodOf("TorusMesh\000", "get_ring_segments\000", 3905245786)
		methodTouchScreenButton[0] = gdnative.MethodOf("TouchScreenButton\000", "set_texture_normal\000", 4051416890)
		methodTouchScreenButton[1] = gdnative.MethodOf("TouchScreenButton\000", "get_texture_normal\000", 3635182373)
		methodTouchScreenButton[2] = gdnative.MethodOf("TouchScreenButton\000", "set_texture_pressed\000", 4051416890)
		methodTouchScreenButton[3] = gdnative.MethodOf("TouchScreenButton\000", "get_texture_pressed\000", 3635182373)
		methodTouchScreenButton[4] = gdnative.MethodOf("TouchScreenButton\000", "set_bitmask\000", 698588216)
		methodTouchScreenButton[5] = gdnative.MethodOf("TouchScreenButton\000", "get_bitmask\000", 2459671998)
		methodTouchScreenButton[6] = gdnative.MethodOf("TouchScreenButton\000", "set_shape\000", 771364740)
		methodTouchScreenButton[7] = gdnative.MethodOf("TouchScreenButton\000", "get_shape\000", 522005891)
		methodTouchScreenButton[8] = gdnative.MethodOf("TouchScreenButton\000", "set_shape_centered\000", 2586408642)
		methodTouchScreenButton[9] = gdnative.MethodOf("TouchScreenButton\000", "is_shape_centered\000", 36873697)
		methodTouchScreenButton[10] = gdnative.MethodOf("TouchScreenButton\000", "set_shape_visible\000", 2586408642)
		methodTouchScreenButton[11] = gdnative.MethodOf("TouchScreenButton\000", "is_shape_visible\000", 36873697)
		methodTouchScreenButton[12] = gdnative.MethodOf("TouchScreenButton\000", "set_action\000", 83702148)
		methodTouchScreenButton[13] = gdnative.MethodOf("TouchScreenButton\000", "get_action\000", 201670096)
		methodTouchScreenButton[14] = gdnative.MethodOf("TouchScreenButton\000", "set_visibility_mode\000", 3031128463)
		methodTouchScreenButton[15] = gdnative.MethodOf("TouchScreenButton\000", "get_visibility_mode\000", 2558996468)
		methodTouchScreenButton[16] = gdnative.MethodOf("TouchScreenButton\000", "set_passby_press\000", 2586408642)
		methodTouchScreenButton[17] = gdnative.MethodOf("TouchScreenButton\000", "is_passby_press_enabled\000", 36873697)
		methodTouchScreenButton[18] = gdnative.MethodOf("TouchScreenButton\000", "is_pressed\000", 36873697)
		methodTranslation[0] = gdnative.MethodOf("Translation\000", "set_locale\000", 83702148)
		methodTranslation[1] = gdnative.MethodOf("Translation\000", "get_locale\000", 201670096)
		methodTranslation[2] = gdnative.MethodOf("Translation\000", "add_message\000", 971803314)
		methodTranslation[3] = gdnative.MethodOf("Translation\000", "add_plural_message\000", 360316719)
		methodTranslation[4] = gdnative.MethodOf("Translation\000", "get_message\000", 58037827)
		methodTranslation[5] = gdnative.MethodOf("Translation\000", "get_plural_message\000", 1333931916)
		methodTranslation[6] = gdnative.MethodOf("Translation\000", "erase_message\000", 3919944288)
		methodTranslation[7] = gdnative.MethodOf("Translation\000", "get_message_list\000", 1139954409)
		methodTranslation[8] = gdnative.MethodOf("Translation\000", "get_message_count\000", 3905245786)
		methodTranslationServer[0] = gdnative.MethodOf("TranslationServer\000", "set_locale\000", 83702148)
		methodTranslationServer[1] = gdnative.MethodOf("TranslationServer\000", "get_locale\000", 201670096)
		methodTranslationServer[2] = gdnative.MethodOf("TranslationServer\000", "get_tool_locale\000", 2841200299)
		methodTranslationServer[3] = gdnative.MethodOf("TranslationServer\000", "compare_locales\000", 2878152881)
		methodTranslationServer[4] = gdnative.MethodOf("TranslationServer\000", "standardize_locale\000", 3135753539)
		methodTranslationServer[5] = gdnative.MethodOf("TranslationServer\000", "get_all_languages\000", 1139954409)
		methodTranslationServer[6] = gdnative.MethodOf("TranslationServer\000", "get_language_name\000", 3135753539)
		methodTranslationServer[7] = gdnative.MethodOf("TranslationServer\000", "get_all_scripts\000", 1139954409)
		methodTranslationServer[8] = gdnative.MethodOf("TranslationServer\000", "get_script_name\000", 3135753539)
		methodTranslationServer[9] = gdnative.MethodOf("TranslationServer\000", "get_all_countries\000", 1139954409)
		methodTranslationServer[10] = gdnative.MethodOf("TranslationServer\000", "get_country_name\000", 3135753539)
		methodTranslationServer[11] = gdnative.MethodOf("TranslationServer\000", "get_locale_name\000", 3135753539)
		methodTranslationServer[12] = gdnative.MethodOf("TranslationServer\000", "translate\000", 58037827)
		methodTranslationServer[13] = gdnative.MethodOf("TranslationServer\000", "translate_plural\000", 1333931916)
		methodTranslationServer[14] = gdnative.MethodOf("TranslationServer\000", "add_translation\000", 1466479800)
		methodTranslationServer[15] = gdnative.MethodOf("TranslationServer\000", "remove_translation\000", 1466479800)
		methodTranslationServer[16] = gdnative.MethodOf("TranslationServer\000", "get_translation_object\000", 2065240175)
		methodTranslationServer[17] = gdnative.MethodOf("TranslationServer\000", "clear\000", 3218959716)
		methodTranslationServer[18] = gdnative.MethodOf("TranslationServer\000", "get_loaded_locales\000", 3995934104)
		methodTranslationServer[19] = gdnative.MethodOf("TranslationServer\000", "is_pseudolocalization_enabled\000", 36873697)
		methodTranslationServer[20] = gdnative.MethodOf("TranslationServer\000", "set_pseudolocalization_enabled\000", 2586408642)
		methodTranslationServer[21] = gdnative.MethodOf("TranslationServer\000", "reload_pseudolocalization\000", 3218959716)
		methodTranslationServer[22] = gdnative.MethodOf("TranslationServer\000", "pseudolocalize\000", 1965194235)
		methodTree[0] = gdnative.MethodOf("Tree\000", "clear\000", 3218959716)
		methodTree[1] = gdnative.MethodOf("Tree\000", "create_item\000", 528467046)
		methodTree[2] = gdnative.MethodOf("Tree\000", "get_root\000", 1514277247)
		methodTree[3] = gdnative.MethodOf("Tree\000", "set_column_custom_minimum_width\000", 3937882851)
		methodTree[4] = gdnative.MethodOf("Tree\000", "set_column_expand\000", 300928843)
		methodTree[5] = gdnative.MethodOf("Tree\000", "set_column_expand_ratio\000", 3937882851)
		methodTree[6] = gdnative.MethodOf("Tree\000", "set_column_clip_content\000", 300928843)
		methodTree[7] = gdnative.MethodOf("Tree\000", "is_column_expanding\000", 1116898809)
		methodTree[8] = gdnative.MethodOf("Tree\000", "is_column_clipping_content\000", 1116898809)
		methodTree[9] = gdnative.MethodOf("Tree\000", "get_column_expand_ratio\000", 923996154)
		methodTree[10] = gdnative.MethodOf("Tree\000", "get_column_width\000", 923996154)
		methodTree[11] = gdnative.MethodOf("Tree\000", "set_hide_root\000", 2586408642)
		methodTree[12] = gdnative.MethodOf("Tree\000", "is_root_hidden\000", 36873697)
		methodTree[13] = gdnative.MethodOf("Tree\000", "get_next_selected\000", 873446299)
		methodTree[14] = gdnative.MethodOf("Tree\000", "get_selected\000", 1514277247)
		methodTree[15] = gdnative.MethodOf("Tree\000", "get_selected_column\000", 3905245786)
		methodTree[16] = gdnative.MethodOf("Tree\000", "get_pressed_button\000", 3905245786)
		methodTree[17] = gdnative.MethodOf("Tree\000", "set_select_mode\000", 3223887270)
		methodTree[18] = gdnative.MethodOf("Tree\000", "get_select_mode\000", 100748571)
		methodTree[19] = gdnative.MethodOf("Tree\000", "set_columns\000", 1286410249)
		methodTree[20] = gdnative.MethodOf("Tree\000", "get_columns\000", 3905245786)
		methodTree[21] = gdnative.MethodOf("Tree\000", "get_edited\000", 1514277247)
		methodTree[22] = gdnative.MethodOf("Tree\000", "get_edited_column\000", 3905245786)
		methodTree[23] = gdnative.MethodOf("Tree\000", "edit_selected\000", 2240911060)
		methodTree[24] = gdnative.MethodOf("Tree\000", "get_custom_popup_rect\000", 1639390495)
		methodTree[25] = gdnative.MethodOf("Tree\000", "get_item_area_rect\000", 1235226180)
		methodTree[26] = gdnative.MethodOf("Tree\000", "get_item_at_position\000", 4193340126)
		methodTree[27] = gdnative.MethodOf("Tree\000", "get_column_at_position\000", 3820158470)
		methodTree[28] = gdnative.MethodOf("Tree\000", "get_drop_section_at_position\000", 3820158470)
		methodTree[29] = gdnative.MethodOf("Tree\000", "get_button_id_at_position\000", 3820158470)
		methodTree[30] = gdnative.MethodOf("Tree\000", "ensure_cursor_is_visible\000", 3218959716)
		methodTree[31] = gdnative.MethodOf("Tree\000", "set_column_titles_visible\000", 2586408642)
		methodTree[32] = gdnative.MethodOf("Tree\000", "are_column_titles_visible\000", 36873697)
		methodTree[33] = gdnative.MethodOf("Tree\000", "set_column_title\000", 501894301)
		methodTree[34] = gdnative.MethodOf("Tree\000", "get_column_title\000", 844755477)
		methodTree[35] = gdnative.MethodOf("Tree\000", "set_column_title_direction\000", 1707680378)
		methodTree[36] = gdnative.MethodOf("Tree\000", "get_column_title_direction\000", 4235602388)
		methodTree[37] = gdnative.MethodOf("Tree\000", "set_column_title_language\000", 501894301)
		methodTree[38] = gdnative.MethodOf("Tree\000", "get_column_title_language\000", 844755477)
		methodTree[39] = gdnative.MethodOf("Tree\000", "get_scroll\000", 3341600327)
		methodTree[40] = gdnative.MethodOf("Tree\000", "scroll_to_item\000", 1314737213)
		methodTree[41] = gdnative.MethodOf("Tree\000", "set_h_scroll_enabled\000", 2586408642)
		methodTree[42] = gdnative.MethodOf("Tree\000", "is_h_scroll_enabled\000", 36873697)
		methodTree[43] = gdnative.MethodOf("Tree\000", "set_v_scroll_enabled\000", 2586408642)
		methodTree[44] = gdnative.MethodOf("Tree\000", "is_v_scroll_enabled\000", 36873697)
		methodTree[45] = gdnative.MethodOf("Tree\000", "set_hide_folding\000", 2586408642)
		methodTree[46] = gdnative.MethodOf("Tree\000", "is_folding_hidden\000", 36873697)
		methodTree[47] = gdnative.MethodOf("Tree\000", "set_drop_mode_flags\000", 1286410249)
		methodTree[48] = gdnative.MethodOf("Tree\000", "get_drop_mode_flags\000", 3905245786)
		methodTree[49] = gdnative.MethodOf("Tree\000", "set_allow_rmb_select\000", 2586408642)
		methodTree[50] = gdnative.MethodOf("Tree\000", "get_allow_rmb_select\000", 36873697)
		methodTree[51] = gdnative.MethodOf("Tree\000", "set_allow_reselect\000", 2586408642)
		methodTree[52] = gdnative.MethodOf("Tree\000", "get_allow_reselect\000", 36873697)
		methodTreeItem[0] = gdnative.MethodOf("TreeItem\000", "set_cell_mode\000", 289920701)
		methodTreeItem[1] = gdnative.MethodOf("TreeItem\000", "get_cell_mode\000", 3406114978)
		methodTreeItem[2] = gdnative.MethodOf("TreeItem\000", "set_checked\000", 300928843)
		methodTreeItem[3] = gdnative.MethodOf("TreeItem\000", "set_indeterminate\000", 300928843)
		methodTreeItem[4] = gdnative.MethodOf("TreeItem\000", "is_checked\000", 1116898809)
		methodTreeItem[5] = gdnative.MethodOf("TreeItem\000", "is_indeterminate\000", 1116898809)
		methodTreeItem[6] = gdnative.MethodOf("TreeItem\000", "propagate_check\000", 4023243586)
		methodTreeItem[7] = gdnative.MethodOf("TreeItem\000", "set_text\000", 501894301)
		methodTreeItem[8] = gdnative.MethodOf("TreeItem\000", "get_text\000", 844755477)
		methodTreeItem[9] = gdnative.MethodOf("TreeItem\000", "set_text_direction\000", 1707680378)
		methodTreeItem[10] = gdnative.MethodOf("TreeItem\000", "get_text_direction\000", 4235602388)
		methodTreeItem[11] = gdnative.MethodOf("TreeItem\000", "set_structured_text_bidi_override\000", 868756907)
		methodTreeItem[12] = gdnative.MethodOf("TreeItem\000", "get_structured_text_bidi_override\000", 3377823772)
		methodTreeItem[13] = gdnative.MethodOf("TreeItem\000", "set_structured_text_bidi_override_options\000", 537221740)
		methodTreeItem[14] = gdnative.MethodOf("TreeItem\000", "get_structured_text_bidi_override_options\000", 663333327)
		methodTreeItem[15] = gdnative.MethodOf("TreeItem\000", "set_language\000", 501894301)
		methodTreeItem[16] = gdnative.MethodOf("TreeItem\000", "get_language\000", 844755477)
		methodTreeItem[17] = gdnative.MethodOf("TreeItem\000", "set_suffix\000", 501894301)
		methodTreeItem[18] = gdnative.MethodOf("TreeItem\000", "get_suffix\000", 844755477)
		methodTreeItem[19] = gdnative.MethodOf("TreeItem\000", "set_icon\000", 666127730)
		methodTreeItem[20] = gdnative.MethodOf("TreeItem\000", "get_icon\000", 3536238170)
		methodTreeItem[21] = gdnative.MethodOf("TreeItem\000", "set_icon_region\000", 1356297692)
		methodTreeItem[22] = gdnative.MethodOf("TreeItem\000", "get_icon_region\000", 3327874267)
		methodTreeItem[23] = gdnative.MethodOf("TreeItem\000", "set_icon_max_width\000", 3937882851)
		methodTreeItem[24] = gdnative.MethodOf("TreeItem\000", "get_icon_max_width\000", 923996154)
		methodTreeItem[25] = gdnative.MethodOf("TreeItem\000", "set_icon_modulate\000", 2878471219)
		methodTreeItem[26] = gdnative.MethodOf("TreeItem\000", "get_icon_modulate\000", 3457211756)
		methodTreeItem[27] = gdnative.MethodOf("TreeItem\000", "set_range\000", 1602489585)
		methodTreeItem[28] = gdnative.MethodOf("TreeItem\000", "get_range\000", 2339986948)
		methodTreeItem[29] = gdnative.MethodOf("TreeItem\000", "set_range_config\000", 1547181014)
		methodTreeItem[30] = gdnative.MethodOf("TreeItem\000", "get_range_config\000", 3554694381)
		methodTreeItem[31] = gdnative.MethodOf("TreeItem\000", "set_metadata\000", 2152698145)
		methodTreeItem[32] = gdnative.MethodOf("TreeItem\000", "get_metadata\000", 4227898402)
		methodTreeItem[33] = gdnative.MethodOf("TreeItem\000", "set_custom_draw\000", 272420368)
		methodTreeItem[34] = gdnative.MethodOf("TreeItem\000", "set_collapsed\000", 2586408642)
		methodTreeItem[35] = gdnative.MethodOf("TreeItem\000", "is_collapsed\000", 2240911060)
		methodTreeItem[36] = gdnative.MethodOf("TreeItem\000", "set_visible\000", 2586408642)
		methodTreeItem[37] = gdnative.MethodOf("TreeItem\000", "is_visible\000", 2240911060)
		methodTreeItem[38] = gdnative.MethodOf("TreeItem\000", "uncollapse_tree\000", 3218959716)
		methodTreeItem[39] = gdnative.MethodOf("TreeItem\000", "set_custom_minimum_height\000", 1286410249)
		methodTreeItem[40] = gdnative.MethodOf("TreeItem\000", "get_custom_minimum_height\000", 3905245786)
		methodTreeItem[41] = gdnative.MethodOf("TreeItem\000", "set_selectable\000", 300928843)
		methodTreeItem[42] = gdnative.MethodOf("TreeItem\000", "is_selectable\000", 1116898809)
		methodTreeItem[43] = gdnative.MethodOf("TreeItem\000", "is_selected\000", 3067735520)
		methodTreeItem[44] = gdnative.MethodOf("TreeItem\000", "select\000", 1286410249)
		methodTreeItem[45] = gdnative.MethodOf("TreeItem\000", "deselect\000", 1286410249)
		methodTreeItem[46] = gdnative.MethodOf("TreeItem\000", "set_editable\000", 300928843)
		methodTreeItem[47] = gdnative.MethodOf("TreeItem\000", "is_editable\000", 3067735520)
		methodTreeItem[48] = gdnative.MethodOf("TreeItem\000", "set_custom_color\000", 2878471219)
		methodTreeItem[49] = gdnative.MethodOf("TreeItem\000", "get_custom_color\000", 3457211756)
		methodTreeItem[50] = gdnative.MethodOf("TreeItem\000", "clear_custom_color\000", 1286410249)
		methodTreeItem[51] = gdnative.MethodOf("TreeItem\000", "set_custom_font\000", 2637609184)
		methodTreeItem[52] = gdnative.MethodOf("TreeItem\000", "get_custom_font\000", 4244553094)
		methodTreeItem[53] = gdnative.MethodOf("TreeItem\000", "set_custom_font_size\000", 3937882851)
		methodTreeItem[54] = gdnative.MethodOf("TreeItem\000", "get_custom_font_size\000", 923996154)
		methodTreeItem[55] = gdnative.MethodOf("TreeItem\000", "set_custom_bg_color\000", 894174518)
		methodTreeItem[56] = gdnative.MethodOf("TreeItem\000", "clear_custom_bg_color\000", 1286410249)
		methodTreeItem[57] = gdnative.MethodOf("TreeItem\000", "get_custom_bg_color\000", 3457211756)
		methodTreeItem[58] = gdnative.MethodOf("TreeItem\000", "set_custom_as_button\000", 300928843)
		methodTreeItem[59] = gdnative.MethodOf("TreeItem\000", "is_custom_set_as_button\000", 1116898809)
		methodTreeItem[60] = gdnative.MethodOf("TreeItem\000", "add_button\000", 1507727907)
		methodTreeItem[61] = gdnative.MethodOf("TreeItem\000", "get_button_count\000", 923996154)
		methodTreeItem[62] = gdnative.MethodOf("TreeItem\000", "get_button_tooltip\000", 1391810591)
		methodTreeItem[63] = gdnative.MethodOf("TreeItem\000", "get_button_id\000", 3175239445)
		methodTreeItem[64] = gdnative.MethodOf("TreeItem\000", "get_button_by_id\000", 3175239445)
		methodTreeItem[65] = gdnative.MethodOf("TreeItem\000", "get_button\000", 2584904275)
		methodTreeItem[66] = gdnative.MethodOf("TreeItem\000", "set_button\000", 176101966)
		methodTreeItem[67] = gdnative.MethodOf("TreeItem\000", "erase_button\000", 3937882851)
		methodTreeItem[68] = gdnative.MethodOf("TreeItem\000", "set_button_disabled\000", 1383440665)
		methodTreeItem[69] = gdnative.MethodOf("TreeItem\000", "is_button_disabled\000", 2522259332)
		methodTreeItem[70] = gdnative.MethodOf("TreeItem\000", "set_tooltip\000", 501894301)
		methodTreeItem[71] = gdnative.MethodOf("TreeItem\000", "get_tooltip\000", 844755477)
		methodTreeItem[72] = gdnative.MethodOf("TreeItem\000", "set_text_alignment\000", 3276431499)
		methodTreeItem[73] = gdnative.MethodOf("TreeItem\000", "get_text_alignment\000", 4171562184)
		methodTreeItem[74] = gdnative.MethodOf("TreeItem\000", "set_expand_right\000", 300928843)
		methodTreeItem[75] = gdnative.MethodOf("TreeItem\000", "get_expand_right\000", 1116898809)
		methodTreeItem[76] = gdnative.MethodOf("TreeItem\000", "set_disable_folding\000", 2586408642)
		methodTreeItem[77] = gdnative.MethodOf("TreeItem\000", "is_folding_disabled\000", 36873697)
		methodTreeItem[78] = gdnative.MethodOf("TreeItem\000", "create_child\000", 954243986)
		methodTreeItem[79] = gdnative.MethodOf("TreeItem\000", "get_tree\000", 2243340556)
		methodTreeItem[80] = gdnative.MethodOf("TreeItem\000", "get_next\000", 1514277247)
		methodTreeItem[81] = gdnative.MethodOf("TreeItem\000", "get_prev\000", 2768121250)
		methodTreeItem[82] = gdnative.MethodOf("TreeItem\000", "get_parent\000", 1514277247)
		methodTreeItem[83] = gdnative.MethodOf("TreeItem\000", "get_first_child\000", 1514277247)
		methodTreeItem[84] = gdnative.MethodOf("TreeItem\000", "get_next_visible\000", 1666920593)
		methodTreeItem[85] = gdnative.MethodOf("TreeItem\000", "get_prev_visible\000", 1666920593)
		methodTreeItem[86] = gdnative.MethodOf("TreeItem\000", "get_child\000", 306700752)
		methodTreeItem[87] = gdnative.MethodOf("TreeItem\000", "get_child_count\000", 2455072627)
		methodTreeItem[88] = gdnative.MethodOf("TreeItem\000", "get_children\000", 2915620761)
		methodTreeItem[89] = gdnative.MethodOf("TreeItem\000", "get_index\000", 2455072627)
		methodTreeItem[90] = gdnative.MethodOf("TreeItem\000", "move_before\000", 1819951137)
		methodTreeItem[91] = gdnative.MethodOf("TreeItem\000", "move_after\000", 1819951137)
		methodTreeItem[92] = gdnative.MethodOf("TreeItem\000", "remove_child\000", 1819951137)
		methodTreeItem[93] = gdnative.MethodOf("TreeItem\000", "call_recursive\000", 2866548813)
		methodTubeTrailMesh[0] = gdnative.MethodOf("TubeTrailMesh\000", "set_radius\000", 373806689)
		methodTubeTrailMesh[1] = gdnative.MethodOf("TubeTrailMesh\000", "get_radius\000", 1740695150)
		methodTubeTrailMesh[2] = gdnative.MethodOf("TubeTrailMesh\000", "set_radial_steps\000", 1286410249)
		methodTubeTrailMesh[3] = gdnative.MethodOf("TubeTrailMesh\000", "get_radial_steps\000", 3905245786)
		methodTubeTrailMesh[4] = gdnative.MethodOf("TubeTrailMesh\000", "set_sections\000", 1286410249)
		methodTubeTrailMesh[5] = gdnative.MethodOf("TubeTrailMesh\000", "get_sections\000", 3905245786)
		methodTubeTrailMesh[6] = gdnative.MethodOf("TubeTrailMesh\000", "set_section_length\000", 373806689)
		methodTubeTrailMesh[7] = gdnative.MethodOf("TubeTrailMesh\000", "get_section_length\000", 1740695150)
		methodTubeTrailMesh[8] = gdnative.MethodOf("TubeTrailMesh\000", "set_section_rings\000", 1286410249)
		methodTubeTrailMesh[9] = gdnative.MethodOf("TubeTrailMesh\000", "get_section_rings\000", 3905245786)
		methodTubeTrailMesh[10] = gdnative.MethodOf("TubeTrailMesh\000", "set_curve\000", 270443179)
		methodTubeTrailMesh[11] = gdnative.MethodOf("TubeTrailMesh\000", "get_curve\000", 2460114913)
		methodTween[0] = gdnative.MethodOf("Tween\000", "tween_property\000", 4049770449)
		methodTween[1] = gdnative.MethodOf("Tween\000", "tween_interval\000", 413360199)
		methodTween[2] = gdnative.MethodOf("Tween\000", "tween_callback\000", 1540176488)
		methodTween[3] = gdnative.MethodOf("Tween\000", "tween_method\000", 2337877153)
		methodTween[4] = gdnative.MethodOf("Tween\000", "custom_step\000", 330693286)
		methodTween[5] = gdnative.MethodOf("Tween\000", "stop\000", 3218959716)
		methodTween[6] = gdnative.MethodOf("Tween\000", "pause\000", 3218959716)
		methodTween[7] = gdnative.MethodOf("Tween\000", "play\000", 3218959716)
		methodTween[8] = gdnative.MethodOf("Tween\000", "kill\000", 3218959716)
		methodTween[9] = gdnative.MethodOf("Tween\000", "get_total_elapsed_time\000", 1740695150)
		methodTween[10] = gdnative.MethodOf("Tween\000", "is_running\000", 2240911060)
		methodTween[11] = gdnative.MethodOf("Tween\000", "is_valid\000", 2240911060)
		methodTween[12] = gdnative.MethodOf("Tween\000", "bind_node\000", 2946786331)
		methodTween[13] = gdnative.MethodOf("Tween\000", "set_process_mode\000", 855258840)
		methodTween[14] = gdnative.MethodOf("Tween\000", "set_pause_mode\000", 3363368837)
		methodTween[15] = gdnative.MethodOf("Tween\000", "set_parallel\000", 1942052223)
		methodTween[16] = gdnative.MethodOf("Tween\000", "set_loops\000", 2670836414)
		methodTween[17] = gdnative.MethodOf("Tween\000", "set_speed_scale\000", 3961971106)
		methodTween[18] = gdnative.MethodOf("Tween\000", "set_trans\000", 3965963875)
		methodTween[19] = gdnative.MethodOf("Tween\000", "set_ease\000", 1208117252)
		methodTween[20] = gdnative.MethodOf("Tween\000", "parallel\000", 3426978995)
		methodTween[21] = gdnative.MethodOf("Tween\000", "chain\000", 3426978995)
		methodTween[22] = gdnative.MethodOf("Tween\000", "interpolate_value\000", 3452526450)
		methodUDPServer[0] = gdnative.MethodOf("UDPServer\000", "listen\000", 4025329869)
		methodUDPServer[1] = gdnative.MethodOf("UDPServer\000", "poll\000", 166280745)
		methodUDPServer[2] = gdnative.MethodOf("UDPServer\000", "is_connection_available\000", 36873697)
		methodUDPServer[3] = gdnative.MethodOf("UDPServer\000", "get_local_port\000", 3905245786)
		methodUDPServer[4] = gdnative.MethodOf("UDPServer\000", "is_listening\000", 36873697)
		methodUDPServer[5] = gdnative.MethodOf("UDPServer\000", "take_connection\000", 808734560)
		methodUDPServer[6] = gdnative.MethodOf("UDPServer\000", "stop\000", 3218959716)
		methodUDPServer[7] = gdnative.MethodOf("UDPServer\000", "set_max_pending_connections\000", 1286410249)
		methodUDPServer[8] = gdnative.MethodOf("UDPServer\000", "get_max_pending_connections\000", 3905245786)
		methodUPNP[0] = gdnative.MethodOf("UPNP\000", "get_device_count\000", 3905245786)
		methodUPNP[1] = gdnative.MethodOf("UPNP\000", "get_device\000", 2193290270)
		methodUPNP[2] = gdnative.MethodOf("UPNP\000", "add_device\000", 986715920)
		methodUPNP[3] = gdnative.MethodOf("UPNP\000", "set_device\000", 3015133723)
		methodUPNP[4] = gdnative.MethodOf("UPNP\000", "remove_device\000", 1286410249)
		methodUPNP[5] = gdnative.MethodOf("UPNP\000", "clear_devices\000", 3218959716)
		methodUPNP[6] = gdnative.MethodOf("UPNP\000", "get_gateway\000", 2276800779)
		methodUPNP[7] = gdnative.MethodOf("UPNP\000", "discover\000", 1575334765)
		methodUPNP[8] = gdnative.MethodOf("UPNP\000", "query_external_address\000", 201670096)
		methodUPNP[9] = gdnative.MethodOf("UPNP\000", "add_port_mapping\000", 3358934458)
		methodUPNP[10] = gdnative.MethodOf("UPNP\000", "delete_port_mapping\000", 760296170)
		methodUPNP[11] = gdnative.MethodOf("UPNP\000", "set_discover_multicast_if\000", 83702148)
		methodUPNP[12] = gdnative.MethodOf("UPNP\000", "get_discover_multicast_if\000", 201670096)
		methodUPNP[13] = gdnative.MethodOf("UPNP\000", "set_discover_local_port\000", 1286410249)
		methodUPNP[14] = gdnative.MethodOf("UPNP\000", "get_discover_local_port\000", 3905245786)
		methodUPNP[15] = gdnative.MethodOf("UPNP\000", "set_discover_ipv6\000", 2586408642)
		methodUPNP[16] = gdnative.MethodOf("UPNP\000", "is_discover_ipv6\000", 36873697)
		methodUPNPDevice[0] = gdnative.MethodOf("UPNPDevice\000", "is_valid_gateway\000", 36873697)
		methodUPNPDevice[1] = gdnative.MethodOf("UPNPDevice\000", "query_external_address\000", 201670096)
		methodUPNPDevice[2] = gdnative.MethodOf("UPNPDevice\000", "add_port_mapping\000", 3358934458)
		methodUPNPDevice[3] = gdnative.MethodOf("UPNPDevice\000", "delete_port_mapping\000", 760296170)
		methodUPNPDevice[4] = gdnative.MethodOf("UPNPDevice\000", "set_description_url\000", 83702148)
		methodUPNPDevice[5] = gdnative.MethodOf("UPNPDevice\000", "get_description_url\000", 201670096)
		methodUPNPDevice[6] = gdnative.MethodOf("UPNPDevice\000", "set_service_type\000", 83702148)
		methodUPNPDevice[7] = gdnative.MethodOf("UPNPDevice\000", "get_service_type\000", 201670096)
		methodUPNPDevice[8] = gdnative.MethodOf("UPNPDevice\000", "set_igd_control_url\000", 83702148)
		methodUPNPDevice[9] = gdnative.MethodOf("UPNPDevice\000", "get_igd_control_url\000", 201670096)
		methodUPNPDevice[10] = gdnative.MethodOf("UPNPDevice\000", "set_igd_service_type\000", 83702148)
		methodUPNPDevice[11] = gdnative.MethodOf("UPNPDevice\000", "get_igd_service_type\000", 201670096)
		methodUPNPDevice[12] = gdnative.MethodOf("UPNPDevice\000", "set_igd_our_addr\000", 83702148)
		methodUPNPDevice[13] = gdnative.MethodOf("UPNPDevice\000", "get_igd_our_addr\000", 201670096)
		methodUPNPDevice[14] = gdnative.MethodOf("UPNPDevice\000", "set_igd_status\000", 519504122)
		methodUPNPDevice[15] = gdnative.MethodOf("UPNPDevice\000", "get_igd_status\000", 180887011)
		methodUndoRedo[0] = gdnative.MethodOf("UndoRedo\000", "create_action\000", 183245820)
		methodUndoRedo[1] = gdnative.MethodOf("UndoRedo\000", "commit_action\000", 3216645846)
		methodUndoRedo[2] = gdnative.MethodOf("UndoRedo\000", "is_committing_action\000", 36873697)
		methodUndoRedo[3] = gdnative.MethodOf("UndoRedo\000", "add_do_method\000", 1517810467)
		methodUndoRedo[4] = gdnative.MethodOf("UndoRedo\000", "add_undo_method\000", 1517810467)
		methodUndoRedo[5] = gdnative.MethodOf("UndoRedo\000", "add_do_property\000", 1017172818)
		methodUndoRedo[6] = gdnative.MethodOf("UndoRedo\000", "add_undo_property\000", 1017172818)
		methodUndoRedo[7] = gdnative.MethodOf("UndoRedo\000", "add_do_reference\000", 3975164845)
		methodUndoRedo[8] = gdnative.MethodOf("UndoRedo\000", "add_undo_reference\000", 3975164845)
		methodUndoRedo[9] = gdnative.MethodOf("UndoRedo\000", "start_force_keep_in_merge_ends\000", 3218959716)
		methodUndoRedo[10] = gdnative.MethodOf("UndoRedo\000", "end_force_keep_in_merge_ends\000", 3218959716)
		methodUndoRedo[11] = gdnative.MethodOf("UndoRedo\000", "get_history_count\000", 2455072627)
		methodUndoRedo[12] = gdnative.MethodOf("UndoRedo\000", "get_current_action\000", 2455072627)
		methodUndoRedo[13] = gdnative.MethodOf("UndoRedo\000", "get_action_name\000", 990163283)
		methodUndoRedo[14] = gdnative.MethodOf("UndoRedo\000", "clear_history\000", 3216645846)
		methodUndoRedo[15] = gdnative.MethodOf("UndoRedo\000", "get_current_action_name\000", 201670096)
		methodUndoRedo[16] = gdnative.MethodOf("UndoRedo\000", "has_undo\000", 36873697)
		methodUndoRedo[17] = gdnative.MethodOf("UndoRedo\000", "has_redo\000", 36873697)
		methodUndoRedo[18] = gdnative.MethodOf("UndoRedo\000", "get_version\000", 3905245786)
		methodUndoRedo[19] = gdnative.MethodOf("UndoRedo\000", "redo\000", 2240911060)
		methodUndoRedo[20] = gdnative.MethodOf("UndoRedo\000", "undo\000", 2240911060)
		methodVehicleBody3D[0] = gdnative.MethodOf("VehicleBody3D\000", "set_engine_force\000", 373806689)
		methodVehicleBody3D[1] = gdnative.MethodOf("VehicleBody3D\000", "get_engine_force\000", 1740695150)
		methodVehicleBody3D[2] = gdnative.MethodOf("VehicleBody3D\000", "set_brake\000", 373806689)
		methodVehicleBody3D[3] = gdnative.MethodOf("VehicleBody3D\000", "get_brake\000", 1740695150)
		methodVehicleBody3D[4] = gdnative.MethodOf("VehicleBody3D\000", "set_steering\000", 373806689)
		methodVehicleBody3D[5] = gdnative.MethodOf("VehicleBody3D\000", "get_steering\000", 1740695150)
		methodVehicleWheel3D[0] = gdnative.MethodOf("VehicleWheel3D\000", "set_radius\000", 373806689)
		methodVehicleWheel3D[1] = gdnative.MethodOf("VehicleWheel3D\000", "get_radius\000", 1740695150)
		methodVehicleWheel3D[2] = gdnative.MethodOf("VehicleWheel3D\000", "set_suspension_rest_length\000", 373806689)
		methodVehicleWheel3D[3] = gdnative.MethodOf("VehicleWheel3D\000", "get_suspension_rest_length\000", 1740695150)
		methodVehicleWheel3D[4] = gdnative.MethodOf("VehicleWheel3D\000", "set_suspension_travel\000", 373806689)
		methodVehicleWheel3D[5] = gdnative.MethodOf("VehicleWheel3D\000", "get_suspension_travel\000", 1740695150)
		methodVehicleWheel3D[6] = gdnative.MethodOf("VehicleWheel3D\000", "set_suspension_stiffness\000", 373806689)
		methodVehicleWheel3D[7] = gdnative.MethodOf("VehicleWheel3D\000", "get_suspension_stiffness\000", 1740695150)
		methodVehicleWheel3D[8] = gdnative.MethodOf("VehicleWheel3D\000", "set_suspension_max_force\000", 373806689)
		methodVehicleWheel3D[9] = gdnative.MethodOf("VehicleWheel3D\000", "get_suspension_max_force\000", 1740695150)
		methodVehicleWheel3D[10] = gdnative.MethodOf("VehicleWheel3D\000", "set_damping_compression\000", 373806689)
		methodVehicleWheel3D[11] = gdnative.MethodOf("VehicleWheel3D\000", "get_damping_compression\000", 1740695150)
		methodVehicleWheel3D[12] = gdnative.MethodOf("VehicleWheel3D\000", "set_damping_relaxation\000", 373806689)
		methodVehicleWheel3D[13] = gdnative.MethodOf("VehicleWheel3D\000", "get_damping_relaxation\000", 1740695150)
		methodVehicleWheel3D[14] = gdnative.MethodOf("VehicleWheel3D\000", "set_use_as_traction\000", 2586408642)
		methodVehicleWheel3D[15] = gdnative.MethodOf("VehicleWheel3D\000", "is_used_as_traction\000", 36873697)
		methodVehicleWheel3D[16] = gdnative.MethodOf("VehicleWheel3D\000", "set_use_as_steering\000", 2586408642)
		methodVehicleWheel3D[17] = gdnative.MethodOf("VehicleWheel3D\000", "is_used_as_steering\000", 36873697)
		methodVehicleWheel3D[18] = gdnative.MethodOf("VehicleWheel3D\000", "set_friction_slip\000", 373806689)
		methodVehicleWheel3D[19] = gdnative.MethodOf("VehicleWheel3D\000", "get_friction_slip\000", 1740695150)
		methodVehicleWheel3D[20] = gdnative.MethodOf("VehicleWheel3D\000", "is_in_contact\000", 36873697)
		methodVehicleWheel3D[21] = gdnative.MethodOf("VehicleWheel3D\000", "get_contact_body\000", 151077316)
		methodVehicleWheel3D[22] = gdnative.MethodOf("VehicleWheel3D\000", "set_roll_influence\000", 373806689)
		methodVehicleWheel3D[23] = gdnative.MethodOf("VehicleWheel3D\000", "get_roll_influence\000", 1740695150)
		methodVehicleWheel3D[24] = gdnative.MethodOf("VehicleWheel3D\000", "get_skidinfo\000", 1740695150)
		methodVehicleWheel3D[25] = gdnative.MethodOf("VehicleWheel3D\000", "get_rpm\000", 1740695150)
		methodVehicleWheel3D[26] = gdnative.MethodOf("VehicleWheel3D\000", "set_engine_force\000", 373806689)
		methodVehicleWheel3D[27] = gdnative.MethodOf("VehicleWheel3D\000", "get_engine_force\000", 1740695150)
		methodVehicleWheel3D[28] = gdnative.MethodOf("VehicleWheel3D\000", "set_brake\000", 373806689)
		methodVehicleWheel3D[29] = gdnative.MethodOf("VehicleWheel3D\000", "get_brake\000", 1740695150)
		methodVehicleWheel3D[30] = gdnative.MethodOf("VehicleWheel3D\000", "set_steering\000", 373806689)
		methodVehicleWheel3D[31] = gdnative.MethodOf("VehicleWheel3D\000", "get_steering\000", 1740695150)
		methodVideoStreamPlayer[0] = gdnative.MethodOf("VideoStreamPlayer\000", "set_stream\000", 2317102564)
		methodVideoStreamPlayer[1] = gdnative.MethodOf("VideoStreamPlayer\000", "get_stream\000", 438621487)
		methodVideoStreamPlayer[2] = gdnative.MethodOf("VideoStreamPlayer\000", "play\000", 3218959716)
		methodVideoStreamPlayer[3] = gdnative.MethodOf("VideoStreamPlayer\000", "stop\000", 3218959716)
		methodVideoStreamPlayer[4] = gdnative.MethodOf("VideoStreamPlayer\000", "is_playing\000", 36873697)
		methodVideoStreamPlayer[5] = gdnative.MethodOf("VideoStreamPlayer\000", "set_paused\000", 2586408642)
		methodVideoStreamPlayer[6] = gdnative.MethodOf("VideoStreamPlayer\000", "is_paused\000", 36873697)
		methodVideoStreamPlayer[7] = gdnative.MethodOf("VideoStreamPlayer\000", "set_volume\000", 373806689)
		methodVideoStreamPlayer[8] = gdnative.MethodOf("VideoStreamPlayer\000", "get_volume\000", 1740695150)
		methodVideoStreamPlayer[9] = gdnative.MethodOf("VideoStreamPlayer\000", "set_volume_db\000", 373806689)
		methodVideoStreamPlayer[10] = gdnative.MethodOf("VideoStreamPlayer\000", "get_volume_db\000", 1740695150)
		methodVideoStreamPlayer[11] = gdnative.MethodOf("VideoStreamPlayer\000", "set_audio_track\000", 1286410249)
		methodVideoStreamPlayer[12] = gdnative.MethodOf("VideoStreamPlayer\000", "get_audio_track\000", 3905245786)
		methodVideoStreamPlayer[13] = gdnative.MethodOf("VideoStreamPlayer\000", "get_stream_name\000", 201670096)
		methodVideoStreamPlayer[14] = gdnative.MethodOf("VideoStreamPlayer\000", "set_stream_position\000", 373806689)
		methodVideoStreamPlayer[15] = gdnative.MethodOf("VideoStreamPlayer\000", "get_stream_position\000", 1740695150)
		methodVideoStreamPlayer[16] = gdnative.MethodOf("VideoStreamPlayer\000", "set_autoplay\000", 2586408642)
		methodVideoStreamPlayer[17] = gdnative.MethodOf("VideoStreamPlayer\000", "has_autoplay\000", 36873697)
		methodVideoStreamPlayer[18] = gdnative.MethodOf("VideoStreamPlayer\000", "set_expand\000", 2586408642)
		methodVideoStreamPlayer[19] = gdnative.MethodOf("VideoStreamPlayer\000", "has_expand\000", 36873697)
		methodVideoStreamPlayer[20] = gdnative.MethodOf("VideoStreamPlayer\000", "set_buffering_msec\000", 1286410249)
		methodVideoStreamPlayer[21] = gdnative.MethodOf("VideoStreamPlayer\000", "get_buffering_msec\000", 3905245786)
		methodVideoStreamPlayer[22] = gdnative.MethodOf("VideoStreamPlayer\000", "set_bus\000", 3304788590)
		methodVideoStreamPlayer[23] = gdnative.MethodOf("VideoStreamPlayer\000", "get_bus\000", 2002593661)
		methodVideoStreamPlayer[24] = gdnative.MethodOf("VideoStreamPlayer\000", "get_video_texture\000", 3635182373)
		methodVideoStreamTheora[0] = gdnative.MethodOf("VideoStreamTheora\000", "set_file\000", 83702148)
		methodVideoStreamTheora[1] = gdnative.MethodOf("VideoStreamTheora\000", "get_file\000", 2841200299)
		methodViewport[0] = gdnative.MethodOf("Viewport\000", "set_world_2d\000", 2736080068)
		methodViewport[1] = gdnative.MethodOf("Viewport\000", "get_world_2d\000", 2339128592)
		methodViewport[2] = gdnative.MethodOf("Viewport\000", "find_world_2d\000", 2339128592)
		methodViewport[3] = gdnative.MethodOf("Viewport\000", "set_canvas_transform\000", 2761652528)
		methodViewport[4] = gdnative.MethodOf("Viewport\000", "get_canvas_transform\000", 3814499831)
		methodViewport[5] = gdnative.MethodOf("Viewport\000", "set_global_canvas_transform\000", 2761652528)
		methodViewport[6] = gdnative.MethodOf("Viewport\000", "get_global_canvas_transform\000", 3814499831)
		methodViewport[7] = gdnative.MethodOf("Viewport\000", "get_final_transform\000", 3814499831)
		methodViewport[8] = gdnative.MethodOf("Viewport\000", "get_visible_rect\000", 1639390495)
		methodViewport[9] = gdnative.MethodOf("Viewport\000", "set_transparent_background\000", 2586408642)
		methodViewport[10] = gdnative.MethodOf("Viewport\000", "has_transparent_background\000", 36873697)
		methodViewport[11] = gdnative.MethodOf("Viewport\000", "set_msaa\000", 3330258708)
		methodViewport[12] = gdnative.MethodOf("Viewport\000", "get_msaa\000", 2542055527)
		methodViewport[13] = gdnative.MethodOf("Viewport\000", "set_screen_space_aa\000", 3544169389)
		methodViewport[14] = gdnative.MethodOf("Viewport\000", "get_screen_space_aa\000", 1390814124)
		methodViewport[15] = gdnative.MethodOf("Viewport\000", "set_use_taa\000", 2586408642)
		methodViewport[16] = gdnative.MethodOf("Viewport\000", "is_using_taa\000", 36873697)
		methodViewport[17] = gdnative.MethodOf("Viewport\000", "set_use_debanding\000", 2586408642)
		methodViewport[18] = gdnative.MethodOf("Viewport\000", "is_using_debanding\000", 36873697)
		methodViewport[19] = gdnative.MethodOf("Viewport\000", "set_use_occlusion_culling\000", 2586408642)
		methodViewport[20] = gdnative.MethodOf("Viewport\000", "is_using_occlusion_culling\000", 36873697)
		methodViewport[21] = gdnative.MethodOf("Viewport\000", "set_debug_draw\000", 1970246205)
		methodViewport[22] = gdnative.MethodOf("Viewport\000", "get_debug_draw\000", 579191299)
		methodViewport[23] = gdnative.MethodOf("Viewport\000", "get_render_info\000", 481977019)
		methodViewport[24] = gdnative.MethodOf("Viewport\000", "get_texture\000", 1746695840)
		methodViewport[25] = gdnative.MethodOf("Viewport\000", "set_physics_object_picking\000", 2586408642)
		methodViewport[26] = gdnative.MethodOf("Viewport\000", "get_physics_object_picking\000", 2240911060)
		methodViewport[27] = gdnative.MethodOf("Viewport\000", "get_viewport_rid\000", 2944877500)
		methodViewport[28] = gdnative.MethodOf("Viewport\000", "push_text_input\000", 83702148)
		methodViewport[29] = gdnative.MethodOf("Viewport\000", "push_input\000", 3644664830)
		methodViewport[30] = gdnative.MethodOf("Viewport\000", "push_unhandled_input\000", 3644664830)
		methodViewport[31] = gdnative.MethodOf("Viewport\000", "get_camera_2d\000", 3551466917)
		methodViewport[32] = gdnative.MethodOf("Viewport\000", "set_as_audio_listener_2d\000", 2586408642)
		methodViewport[33] = gdnative.MethodOf("Viewport\000", "is_audio_listener_2d\000", 36873697)
		methodViewport[34] = gdnative.MethodOf("Viewport\000", "get_mouse_position\000", 3341600327)
		methodViewport[35] = gdnative.MethodOf("Viewport\000", "warp_mouse\000", 743155724)
		methodViewport[36] = gdnative.MethodOf("Viewport\000", "gui_get_drag_data\000", 1214101251)
		methodViewport[37] = gdnative.MethodOf("Viewport\000", "gui_is_dragging\000", 36873697)
		methodViewport[38] = gdnative.MethodOf("Viewport\000", "gui_is_drag_successful\000", 36873697)
		methodViewport[39] = gdnative.MethodOf("Viewport\000", "gui_release_focus\000", 3218959716)
		methodViewport[40] = gdnative.MethodOf("Viewport\000", "gui_get_focus_owner\000", 829782337)
		methodViewport[41] = gdnative.MethodOf("Viewport\000", "set_disable_input\000", 2586408642)
		methodViewport[42] = gdnative.MethodOf("Viewport\000", "is_input_disabled\000", 36873697)
		methodViewport[43] = gdnative.MethodOf("Viewport\000", "set_positional_shadow_atlas_size\000", 1286410249)
		methodViewport[44] = gdnative.MethodOf("Viewport\000", "get_positional_shadow_atlas_size\000", 3905245786)
		methodViewport[45] = gdnative.MethodOf("Viewport\000", "set_positional_shadow_atlas_16_bits\000", 2586408642)
		methodViewport[46] = gdnative.MethodOf("Viewport\000", "get_positional_shadow_atlas_16_bits\000", 36873697)
		methodViewport[47] = gdnative.MethodOf("Viewport\000", "set_snap_controls_to_pixels\000", 2586408642)
		methodViewport[48] = gdnative.MethodOf("Viewport\000", "is_snap_controls_to_pixels_enabled\000", 36873697)
		methodViewport[49] = gdnative.MethodOf("Viewport\000", "set_snap_2d_transforms_to_pixel\000", 2586408642)
		methodViewport[50] = gdnative.MethodOf("Viewport\000", "is_snap_2d_transforms_to_pixel_enabled\000", 36873697)
		methodViewport[51] = gdnative.MethodOf("Viewport\000", "set_snap_2d_vertices_to_pixel\000", 2586408642)
		methodViewport[52] = gdnative.MethodOf("Viewport\000", "is_snap_2d_vertices_to_pixel_enabled\000", 36873697)
		methodViewport[53] = gdnative.MethodOf("Viewport\000", "set_positional_shadow_atlas_quadrant_subdiv\000", 2596956071)
		methodViewport[54] = gdnative.MethodOf("Viewport\000", "get_positional_shadow_atlas_quadrant_subdiv\000", 2676778355)
		methodViewport[55] = gdnative.MethodOf("Viewport\000", "set_input_as_handled\000", 3218959716)
		methodViewport[56] = gdnative.MethodOf("Viewport\000", "is_input_handled\000", 36873697)
		methodViewport[57] = gdnative.MethodOf("Viewport\000", "set_handle_input_locally\000", 2586408642)
		methodViewport[58] = gdnative.MethodOf("Viewport\000", "is_handling_input_locally\000", 36873697)
		methodViewport[59] = gdnative.MethodOf("Viewport\000", "set_default_canvas_item_texture_filter\000", 2815160100)
		methodViewport[60] = gdnative.MethodOf("Viewport\000", "get_default_canvas_item_texture_filter\000", 896601198)
		methodViewport[61] = gdnative.MethodOf("Viewport\000", "set_embedding_subwindows\000", 2586408642)
		methodViewport[62] = gdnative.MethodOf("Viewport\000", "is_embedding_subwindows\000", 36873697)
		methodViewport[63] = gdnative.MethodOf("Viewport\000", "set_default_canvas_item_texture_repeat\000", 1658513413)
		methodViewport[64] = gdnative.MethodOf("Viewport\000", "get_default_canvas_item_texture_repeat\000", 4049774160)
		methodViewport[65] = gdnative.MethodOf("Viewport\000", "set_sdf_oversize\000", 2574159017)
		methodViewport[66] = gdnative.MethodOf("Viewport\000", "get_sdf_oversize\000", 2631427510)
		methodViewport[67] = gdnative.MethodOf("Viewport\000", "set_sdf_scale\000", 1402773951)
		methodViewport[68] = gdnative.MethodOf("Viewport\000", "get_sdf_scale\000", 3162688184)
		methodViewport[69] = gdnative.MethodOf("Viewport\000", "set_mesh_lod_threshold\000", 373806689)
		methodViewport[70] = gdnative.MethodOf("Viewport\000", "get_mesh_lod_threshold\000", 1740695150)
		methodViewport[71] = gdnative.MethodOf("Viewport\000", "set_world_3d\000", 1400875337)
		methodViewport[72] = gdnative.MethodOf("Viewport\000", "get_world_3d\000", 317588385)
		methodViewport[73] = gdnative.MethodOf("Viewport\000", "find_world_3d\000", 317588385)
		methodViewport[74] = gdnative.MethodOf("Viewport\000", "set_use_own_world_3d\000", 2586408642)
		methodViewport[75] = gdnative.MethodOf("Viewport\000", "is_using_own_world_3d\000", 36873697)
		methodViewport[76] = gdnative.MethodOf("Viewport\000", "get_camera_3d\000", 2285090890)
		methodViewport[77] = gdnative.MethodOf("Viewport\000", "set_as_audio_listener_3d\000", 2586408642)
		methodViewport[78] = gdnative.MethodOf("Viewport\000", "is_audio_listener_3d\000", 36873697)
		methodViewport[79] = gdnative.MethodOf("Viewport\000", "set_disable_3d\000", 2586408642)
		methodViewport[80] = gdnative.MethodOf("Viewport\000", "is_3d_disabled\000", 36873697)
		methodViewport[81] = gdnative.MethodOf("Viewport\000", "set_use_xr\000", 2586408642)
		methodViewport[82] = gdnative.MethodOf("Viewport\000", "is_using_xr\000", 2240911060)
		methodViewport[83] = gdnative.MethodOf("Viewport\000", "set_scaling_3d_mode\000", 1531597597)
		methodViewport[84] = gdnative.MethodOf("Viewport\000", "get_scaling_3d_mode\000", 2597660574)
		methodViewport[85] = gdnative.MethodOf("Viewport\000", "set_scaling_3d_scale\000", 373806689)
		methodViewport[86] = gdnative.MethodOf("Viewport\000", "get_scaling_3d_scale\000", 1740695150)
		methodViewport[87] = gdnative.MethodOf("Viewport\000", "set_fsr_sharpness\000", 373806689)
		methodViewport[88] = gdnative.MethodOf("Viewport\000", "get_fsr_sharpness\000", 1740695150)
		methodViewport[89] = gdnative.MethodOf("Viewport\000", "set_texture_mipmap_bias\000", 373806689)
		methodViewport[90] = gdnative.MethodOf("Viewport\000", "get_texture_mipmap_bias\000", 1740695150)
		methodViewport[91] = gdnative.MethodOf("Viewport\000", "set_vrs_mode\000", 2749867817)
		methodViewport[92] = gdnative.MethodOf("Viewport\000", "get_vrs_mode\000", 349660525)
		methodViewport[93] = gdnative.MethodOf("Viewport\000", "set_vrs_texture\000", 4051416890)
		methodViewport[94] = gdnative.MethodOf("Viewport\000", "get_vrs_texture\000", 3635182373)
		methodViewportTexture[0] = gdnative.MethodOf("ViewportTexture\000", "set_viewport_path_in_scene\000", 1348162250)
		methodViewportTexture[1] = gdnative.MethodOf("ViewportTexture\000", "get_viewport_path_in_scene\000", 4075236667)
		methodVisibleOnScreenEnabler2D[0] = gdnative.MethodOf("VisibleOnScreenEnabler2D\000", "set_enable_mode\000", 2961788752)
		methodVisibleOnScreenEnabler2D[1] = gdnative.MethodOf("VisibleOnScreenEnabler2D\000", "get_enable_mode\000", 2650445576)
		methodVisibleOnScreenEnabler2D[2] = gdnative.MethodOf("VisibleOnScreenEnabler2D\000", "set_enable_node_path\000", 1348162250)
		methodVisibleOnScreenEnabler2D[3] = gdnative.MethodOf("VisibleOnScreenEnabler2D\000", "get_enable_node_path\000", 277076166)
		methodVisibleOnScreenEnabler3D[0] = gdnative.MethodOf("VisibleOnScreenEnabler3D\000", "set_enable_mode\000", 320303646)
		methodVisibleOnScreenEnabler3D[1] = gdnative.MethodOf("VisibleOnScreenEnabler3D\000", "get_enable_mode\000", 3352990031)
		methodVisibleOnScreenEnabler3D[2] = gdnative.MethodOf("VisibleOnScreenEnabler3D\000", "set_enable_node_path\000", 1348162250)
		methodVisibleOnScreenEnabler3D[3] = gdnative.MethodOf("VisibleOnScreenEnabler3D\000", "get_enable_node_path\000", 277076166)
		methodVisibleOnScreenNotifier2D[0] = gdnative.MethodOf("VisibleOnScreenNotifier2D\000", "set_rect\000", 2046264180)
		methodVisibleOnScreenNotifier2D[1] = gdnative.MethodOf("VisibleOnScreenNotifier2D\000", "get_rect\000", 1639390495)
		methodVisibleOnScreenNotifier2D[2] = gdnative.MethodOf("VisibleOnScreenNotifier2D\000", "is_on_screen\000", 36873697)
		methodVisibleOnScreenNotifier3D[0] = gdnative.MethodOf("VisibleOnScreenNotifier3D\000", "set_aabb\000", 259215842)
		methodVisibleOnScreenNotifier3D[1] = gdnative.MethodOf("VisibleOnScreenNotifier3D\000", "is_on_screen\000", 36873697)
		methodVisualInstance3D[0] = gdnative.MethodOf("VisualInstance3D\000", "set_base\000", 2722037293)
		methodVisualInstance3D[1] = gdnative.MethodOf("VisualInstance3D\000", "get_base\000", 2944877500)
		methodVisualInstance3D[2] = gdnative.MethodOf("VisualInstance3D\000", "get_instance\000", 2944877500)
		methodVisualInstance3D[3] = gdnative.MethodOf("VisualInstance3D\000", "set_layer_mask\000", 1286410249)
		methodVisualInstance3D[4] = gdnative.MethodOf("VisualInstance3D\000", "get_layer_mask\000", 3905245786)
		methodVisualInstance3D[5] = gdnative.MethodOf("VisualInstance3D\000", "set_layer_mask_value\000", 300928843)
		methodVisualInstance3D[6] = gdnative.MethodOf("VisualInstance3D\000", "get_layer_mask_value\000", 1116898809)
		methodVisualInstance3D[7] = gdnative.MethodOf("VisualInstance3D\000", "get_transformed_aabb\000", 1068685055)
		methodVisualInstance3D[8] = gdnative.MethodOf("VisualInstance3D\000", "get_aabb\000", 1068685055)
		methodVisualScript[0] = gdnative.MethodOf("VisualScript\000", "add_function\000", 2415702435)
		methodVisualScript[1] = gdnative.MethodOf("VisualScript\000", "has_function\000", 2619796661)
		methodVisualScript[2] = gdnative.MethodOf("VisualScript\000", "remove_function\000", 3304788590)
		methodVisualScript[3] = gdnative.MethodOf("VisualScript\000", "rename_function\000", 3740211285)
		methodVisualScript[4] = gdnative.MethodOf("VisualScript\000", "set_scroll\000", 743155724)
		methodVisualScript[5] = gdnative.MethodOf("VisualScript\000", "get_scroll\000", 3341600327)
		methodVisualScript[6] = gdnative.MethodOf("VisualScript\000", "add_node\000", 3131718070)
		methodVisualScript[7] = gdnative.MethodOf("VisualScript\000", "remove_node\000", 1286410249)
		methodVisualScript[8] = gdnative.MethodOf("VisualScript\000", "get_function_node_id\000", 2458036349)
		methodVisualScript[9] = gdnative.MethodOf("VisualScript\000", "get_node\000", 3745104081)
		methodVisualScript[10] = gdnative.MethodOf("VisualScript\000", "has_node\000", 1116898809)
		methodVisualScript[11] = gdnative.MethodOf("VisualScript\000", "set_node_position\000", 163021252)
		methodVisualScript[12] = gdnative.MethodOf("VisualScript\000", "get_node_position\000", 2299179447)
		methodVisualScript[13] = gdnative.MethodOf("VisualScript\000", "sequence_connect\000", 1649997291)
		methodVisualScript[14] = gdnative.MethodOf("VisualScript\000", "sequence_disconnect\000", 1649997291)
		methodVisualScript[15] = gdnative.MethodOf("VisualScript\000", "has_sequence_connection\000", 3072856071)
		methodVisualScript[16] = gdnative.MethodOf("VisualScript\000", "data_connect\000", 4275841770)
		methodVisualScript[17] = gdnative.MethodOf("VisualScript\000", "data_disconnect\000", 4275841770)
		methodVisualScript[18] = gdnative.MethodOf("VisualScript\000", "has_data_connection\000", 1701679529)
		methodVisualScript[19] = gdnative.MethodOf("VisualScript\000", "add_variable\000", 4087535639)
		methodVisualScript[20] = gdnative.MethodOf("VisualScript\000", "has_variable\000", 2619796661)
		methodVisualScript[21] = gdnative.MethodOf("VisualScript\000", "remove_variable\000", 3304788590)
		methodVisualScript[22] = gdnative.MethodOf("VisualScript\000", "set_variable_default_value\000", 3776071444)
		methodVisualScript[23] = gdnative.MethodOf("VisualScript\000", "get_variable_default_value\000", 2760726917)
		methodVisualScript[24] = gdnative.MethodOf("VisualScript\000", "set_variable_info\000", 745996376)
		methodVisualScript[25] = gdnative.MethodOf("VisualScript\000", "get_variable_info\000", 4028089122)
		methodVisualScript[26] = gdnative.MethodOf("VisualScript\000", "set_variable_export\000", 2524380260)
		methodVisualScript[27] = gdnative.MethodOf("VisualScript\000", "get_variable_export\000", 2619796661)
		methodVisualScript[28] = gdnative.MethodOf("VisualScript\000", "rename_variable\000", 3740211285)
		methodVisualScript[29] = gdnative.MethodOf("VisualScript\000", "add_custom_signal\000", 3304788590)
		methodVisualScript[30] = gdnative.MethodOf("VisualScript\000", "has_custom_signal\000", 2619796661)
		methodVisualScript[31] = gdnative.MethodOf("VisualScript\000", "custom_signal_add_argument\000", 1149431365)
		methodVisualScript[32] = gdnative.MethodOf("VisualScript\000", "custom_signal_set_argument_type\000", 2311141340)
		methodVisualScript[33] = gdnative.MethodOf("VisualScript\000", "custom_signal_get_argument_type\000", 1605562169)
		methodVisualScript[34] = gdnative.MethodOf("VisualScript\000", "custom_signal_set_argument_name\000", 2785984494)
		methodVisualScript[35] = gdnative.MethodOf("VisualScript\000", "custom_signal_get_argument_name\000", 988217201)
		methodVisualScript[36] = gdnative.MethodOf("VisualScript\000", "custom_signal_remove_argument\000", 2415702435)
		methodVisualScript[37] = gdnative.MethodOf("VisualScript\000", "custom_signal_get_argument_count\000", 2458036349)
		methodVisualScript[38] = gdnative.MethodOf("VisualScript\000", "custom_signal_swap_argument\000", 2825628604)
		methodVisualScript[39] = gdnative.MethodOf("VisualScript\000", "remove_custom_signal\000", 3304788590)
		methodVisualScript[40] = gdnative.MethodOf("VisualScript\000", "rename_custom_signal\000", 3740211285)
		methodVisualScript[41] = gdnative.MethodOf("VisualScript\000", "set_instance_base_type\000", 3304788590)
		methodVisualScriptBasicTypeConstant[0] = gdnative.MethodOf("VisualScriptBasicTypeConstant\000", "set_basic_type\000", 2887708385)
		methodVisualScriptBasicTypeConstant[1] = gdnative.MethodOf("VisualScriptBasicTypeConstant\000", "get_basic_type\000", 3416842102)
		methodVisualScriptBasicTypeConstant[2] = gdnative.MethodOf("VisualScriptBasicTypeConstant\000", "set_basic_type_constant\000", 3304788590)
		methodVisualScriptBasicTypeConstant[3] = gdnative.MethodOf("VisualScriptBasicTypeConstant\000", "get_basic_type_constant\000", 2002593661)
		methodVisualScriptBuiltinFunc[0] = gdnative.MethodOf("VisualScriptBuiltinFunc\000", "set_func\000", 620405801)
		methodVisualScriptBuiltinFunc[1] = gdnative.MethodOf("VisualScriptBuiltinFunc\000", "get_func\000", 781834680)
		methodVisualScriptClassConstant[0] = gdnative.MethodOf("VisualScriptClassConstant\000", "set_class_constant\000", 3304788590)
		methodVisualScriptClassConstant[1] = gdnative.MethodOf("VisualScriptClassConstant\000", "get_class_constant\000", 2737447660)
		methodVisualScriptClassConstant[2] = gdnative.MethodOf("VisualScriptClassConstant\000", "set_base_type\000", 3304788590)
		methodVisualScriptClassConstant[3] = gdnative.MethodOf("VisualScriptClassConstant\000", "get_base_type\000", 2737447660)
		methodVisualScriptComment[0] = gdnative.MethodOf("VisualScriptComment\000", "set_title\000", 83702148)
		methodVisualScriptComment[1] = gdnative.MethodOf("VisualScriptComment\000", "get_title\000", 201670096)
		methodVisualScriptComment[2] = gdnative.MethodOf("VisualScriptComment\000", "set_description\000", 83702148)
		methodVisualScriptComment[3] = gdnative.MethodOf("VisualScriptComment\000", "get_description\000", 201670096)
		methodVisualScriptComment[4] = gdnative.MethodOf("VisualScriptComment\000", "set_size\000", 743155724)
		methodVisualScriptComment[5] = gdnative.MethodOf("VisualScriptComment\000", "get_size\000", 3341600327)
		methodVisualScriptConstant[0] = gdnative.MethodOf("VisualScriptConstant\000", "set_constant_type\000", 2887708385)
		methodVisualScriptConstant[1] = gdnative.MethodOf("VisualScriptConstant\000", "get_constant_type\000", 3416842102)
		methodVisualScriptConstant[2] = gdnative.MethodOf("VisualScriptConstant\000", "set_constant_value\000", 1114965689)
		methodVisualScriptConstant[3] = gdnative.MethodOf("VisualScriptConstant\000", "get_constant_value\000", 1214101251)
		methodVisualScriptConstructor[0] = gdnative.MethodOf("VisualScriptConstructor\000", "set_constructor_type\000", 2887708385)
		methodVisualScriptConstructor[1] = gdnative.MethodOf("VisualScriptConstructor\000", "get_constructor_type\000", 3416842102)
		methodVisualScriptConstructor[2] = gdnative.MethodOf("VisualScriptConstructor\000", "set_constructor\000", 4155329257)
		methodVisualScriptConstructor[3] = gdnative.MethodOf("VisualScriptConstructor\000", "get_constructor\000", 3102165223)
		methodVisualScriptCustomNodes[0] = gdnative.MethodOf("VisualScriptCustomNodes\000", "add_custom_node\000", 4270490372)
		methodVisualScriptCustomNodes[1] = gdnative.MethodOf("VisualScriptCustomNodes\000", "remove_custom_node\000", 3186203200)
		methodVisualScriptDeconstruct[0] = gdnative.MethodOf("VisualScriptDeconstruct\000", "set_deconstruct_type\000", 2887708385)
		methodVisualScriptDeconstruct[1] = gdnative.MethodOf("VisualScriptDeconstruct\000", "get_deconstruct_type\000", 3416842102)
		methodVisualScriptEmitSignal[0] = gdnative.MethodOf("VisualScriptEmitSignal\000", "set_signal\000", 3304788590)
		methodVisualScriptEmitSignal[1] = gdnative.MethodOf("VisualScriptEmitSignal\000", "get_signal\000", 2002593661)
		methodVisualScriptEngineSingleton[0] = gdnative.MethodOf("VisualScriptEngineSingleton\000", "set_singleton\000", 83702148)
		methodVisualScriptEngineSingleton[1] = gdnative.MethodOf("VisualScriptEngineSingleton\000", "get_singleton\000", 2841200299)
		methodVisualScriptFunctionCall[0] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_base_type\000", 3304788590)
		methodVisualScriptFunctionCall[1] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_base_type\000", 2002593661)
		methodVisualScriptFunctionCall[2] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_base_script\000", 83702148)
		methodVisualScriptFunctionCall[3] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_base_script\000", 201670096)
		methodVisualScriptFunctionCall[4] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_basic_type\000", 2887708385)
		methodVisualScriptFunctionCall[5] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_basic_type\000", 3416842102)
		methodVisualScriptFunctionCall[6] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_singleton\000", 3304788590)
		methodVisualScriptFunctionCall[7] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_singleton\000", 2002593661)
		methodVisualScriptFunctionCall[8] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_function\000", 3304788590)
		methodVisualScriptFunctionCall[9] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_function\000", 2002593661)
		methodVisualScriptFunctionCall[10] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_call_mode\000", 697692193)
		methodVisualScriptFunctionCall[11] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_call_mode\000", 1833353862)
		methodVisualScriptFunctionCall[12] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_base_path\000", 1348162250)
		methodVisualScriptFunctionCall[13] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_base_path\000", 4075236667)
		methodVisualScriptFunctionCall[14] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_use_default_args\000", 1286410249)
		methodVisualScriptFunctionCall[15] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_use_default_args\000", 3905245786)
		methodVisualScriptFunctionCall[16] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_rpc_call_mode\000", 3836215895)
		methodVisualScriptFunctionCall[17] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_rpc_call_mode\000", 1976562450)
		methodVisualScriptFunctionCall[18] = gdnative.MethodOf("VisualScriptFunctionCall\000", "set_validate\000", 2586408642)
		methodVisualScriptFunctionCall[19] = gdnative.MethodOf("VisualScriptFunctionCall\000", "get_validate\000", 36873697)
		methodVisualScriptFunctionState[0] = gdnative.MethodOf("VisualScriptFunctionState\000", "connect_to_signal\000", 3557354769)
		methodVisualScriptFunctionState[1] = gdnative.MethodOf("VisualScriptFunctionState\000", "resume\000", 2627273609)
		methodVisualScriptFunctionState[2] = gdnative.MethodOf("VisualScriptFunctionState\000", "is_valid\000", 36873697)
		methodVisualScriptGlobalConstant[0] = gdnative.MethodOf("VisualScriptGlobalConstant\000", "set_global_constant\000", 1286410249)
		methodVisualScriptGlobalConstant[1] = gdnative.MethodOf("VisualScriptGlobalConstant\000", "get_global_constant\000", 2455072627)
		methodVisualScriptInputAction[0] = gdnative.MethodOf("VisualScriptInputAction\000", "set_action_name\000", 3304788590)
		methodVisualScriptInputAction[1] = gdnative.MethodOf("VisualScriptInputAction\000", "get_action_name\000", 2002593661)
		methodVisualScriptInputAction[2] = gdnative.MethodOf("VisualScriptInputAction\000", "set_action_mode\000", 315703700)
		methodVisualScriptInputAction[3] = gdnative.MethodOf("VisualScriptInputAction\000", "get_action_mode\000", 2667110114)
		methodVisualScriptLists[0] = gdnative.MethodOf("VisualScriptLists\000", "add_input_data_port\000", 2260798308)
		methodVisualScriptLists[1] = gdnative.MethodOf("VisualScriptLists\000", "set_input_data_port_name\000", 501894301)
		methodVisualScriptLists[2] = gdnative.MethodOf("VisualScriptLists\000", "set_input_data_port_type\000", 3492912874)
		methodVisualScriptLists[3] = gdnative.MethodOf("VisualScriptLists\000", "remove_input_data_port\000", 1286410249)
		methodVisualScriptLists[4] = gdnative.MethodOf("VisualScriptLists\000", "add_output_data_port\000", 2260798308)
		methodVisualScriptLists[5] = gdnative.MethodOf("VisualScriptLists\000", "set_output_data_port_name\000", 501894301)
		methodVisualScriptLists[6] = gdnative.MethodOf("VisualScriptLists\000", "set_output_data_port_type\000", 3492912874)
		methodVisualScriptLists[7] = gdnative.MethodOf("VisualScriptLists\000", "remove_output_data_port\000", 1286410249)
		methodVisualScriptLocalVar[0] = gdnative.MethodOf("VisualScriptLocalVar\000", "set_var_name\000", 3304788590)
		methodVisualScriptLocalVar[1] = gdnative.MethodOf("VisualScriptLocalVar\000", "get_var_name\000", 2002593661)
		methodVisualScriptLocalVar[2] = gdnative.MethodOf("VisualScriptLocalVar\000", "set_var_type\000", 2887708385)
		methodVisualScriptLocalVar[3] = gdnative.MethodOf("VisualScriptLocalVar\000", "get_var_type\000", 3416842102)
		methodVisualScriptLocalVarSet[0] = gdnative.MethodOf("VisualScriptLocalVarSet\000", "set_var_name\000", 3304788590)
		methodVisualScriptLocalVarSet[1] = gdnative.MethodOf("VisualScriptLocalVarSet\000", "get_var_name\000", 2002593661)
		methodVisualScriptLocalVarSet[2] = gdnative.MethodOf("VisualScriptLocalVarSet\000", "set_var_type\000", 2887708385)
		methodVisualScriptLocalVarSet[3] = gdnative.MethodOf("VisualScriptLocalVarSet\000", "get_var_type\000", 3416842102)
		methodVisualScriptMathConstant[0] = gdnative.MethodOf("VisualScriptMathConstant\000", "set_math_constant\000", 585905713)
		methodVisualScriptMathConstant[1] = gdnative.MethodOf("VisualScriptMathConstant\000", "get_math_constant\000", 1673478079)
		methodVisualScriptNode[0] = gdnative.MethodOf("VisualScriptNode\000", "get_visual_script\000", 400131028)
		methodVisualScriptNode[1] = gdnative.MethodOf("VisualScriptNode\000", "set_default_input_value\000", 2152698145)
		methodVisualScriptNode[2] = gdnative.MethodOf("VisualScriptNode\000", "get_default_input_value\000", 4227898402)
		methodVisualScriptNode[3] = gdnative.MethodOf("VisualScriptNode\000", "ports_changed_notify\000", 3218959716)
		methodVisualScriptOperator[0] = gdnative.MethodOf("VisualScriptOperator\000", "set_operator\000", 766151822)
		methodVisualScriptOperator[1] = gdnative.MethodOf("VisualScriptOperator\000", "get_operator\000", 3816674027)
		methodVisualScriptOperator[2] = gdnative.MethodOf("VisualScriptOperator\000", "set_typed\000", 2887708385)
		methodVisualScriptOperator[3] = gdnative.MethodOf("VisualScriptOperator\000", "get_typed\000", 3416842102)
		methodVisualScriptPreload[0] = gdnative.MethodOf("VisualScriptPreload\000", "set_preload\000", 968641751)
		methodVisualScriptPreload[1] = gdnative.MethodOf("VisualScriptPreload\000", "get_preload\000", 121922552)
		methodVisualScriptPropertyGet[0] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_base_type\000", 3304788590)
		methodVisualScriptPropertyGet[1] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_base_type\000", 2002593661)
		methodVisualScriptPropertyGet[2] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_base_script\000", 83702148)
		methodVisualScriptPropertyGet[3] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_base_script\000", 201670096)
		methodVisualScriptPropertyGet[4] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_basic_type\000", 2887708385)
		methodVisualScriptPropertyGet[5] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_basic_type\000", 3416842102)
		methodVisualScriptPropertyGet[6] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_property\000", 3304788590)
		methodVisualScriptPropertyGet[7] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_property\000", 2002593661)
		methodVisualScriptPropertyGet[8] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_call_mode\000", 3551783243)
		methodVisualScriptPropertyGet[9] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_call_mode\000", 206945834)
		methodVisualScriptPropertyGet[10] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_base_path\000", 1348162250)
		methodVisualScriptPropertyGet[11] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_base_path\000", 4075236667)
		methodVisualScriptPropertyGet[12] = gdnative.MethodOf("VisualScriptPropertyGet\000", "set_index\000", 3304788590)
		methodVisualScriptPropertyGet[13] = gdnative.MethodOf("VisualScriptPropertyGet\000", "get_index\000", 2002593661)
		methodVisualScriptPropertySet[0] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_base_type\000", 3304788590)
		methodVisualScriptPropertySet[1] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_base_type\000", 2002593661)
		methodVisualScriptPropertySet[2] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_base_script\000", 83702148)
		methodVisualScriptPropertySet[3] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_base_script\000", 201670096)
		methodVisualScriptPropertySet[4] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_basic_type\000", 2887708385)
		methodVisualScriptPropertySet[5] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_basic_type\000", 3416842102)
		methodVisualScriptPropertySet[6] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_property\000", 3304788590)
		methodVisualScriptPropertySet[7] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_property\000", 2002593661)
		methodVisualScriptPropertySet[8] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_call_mode\000", 2955593888)
		methodVisualScriptPropertySet[9] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_call_mode\000", 724201062)
		methodVisualScriptPropertySet[10] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_base_path\000", 1348162250)
		methodVisualScriptPropertySet[11] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_base_path\000", 4075236667)
		methodVisualScriptPropertySet[12] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_index\000", 3304788590)
		methodVisualScriptPropertySet[13] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_index\000", 2002593661)
		methodVisualScriptPropertySet[14] = gdnative.MethodOf("VisualScriptPropertySet\000", "set_assign_op\000", 670467928)
		methodVisualScriptPropertySet[15] = gdnative.MethodOf("VisualScriptPropertySet\000", "get_assign_op\000", 3860320925)
		methodVisualScriptResourcePath[0] = gdnative.MethodOf("VisualScriptResourcePath\000", "set_resource_path\000", 83702148)
		methodVisualScriptResourcePath[1] = gdnative.MethodOf("VisualScriptResourcePath\000", "get_resource_path\000", 2841200299)
		methodVisualScriptReturn[0] = gdnative.MethodOf("VisualScriptReturn\000", "set_return_type\000", 2887708385)
		methodVisualScriptReturn[1] = gdnative.MethodOf("VisualScriptReturn\000", "get_return_type\000", 3416842102)
		methodVisualScriptReturn[2] = gdnative.MethodOf("VisualScriptReturn\000", "set_enable_return_value\000", 2586408642)
		methodVisualScriptReturn[3] = gdnative.MethodOf("VisualScriptReturn\000", "is_return_value_enabled\000", 36873697)
		methodVisualScriptSceneNode[0] = gdnative.MethodOf("VisualScriptSceneNode\000", "set_node_path\000", 1348162250)
		methodVisualScriptSceneNode[1] = gdnative.MethodOf("VisualScriptSceneNode\000", "get_node_path\000", 277076166)
		methodVisualScriptSelect[0] = gdnative.MethodOf("VisualScriptSelect\000", "set_typed\000", 2887708385)
		methodVisualScriptSelect[1] = gdnative.MethodOf("VisualScriptSelect\000", "get_typed\000", 3416842102)
		methodVisualScriptSequence[0] = gdnative.MethodOf("VisualScriptSequence\000", "set_steps\000", 1286410249)
		methodVisualScriptSequence[1] = gdnative.MethodOf("VisualScriptSequence\000", "get_steps\000", 3905245786)
		methodVisualScriptTypeCast[0] = gdnative.MethodOf("VisualScriptTypeCast\000", "set_base_type\000", 3304788590)
		methodVisualScriptTypeCast[1] = gdnative.MethodOf("VisualScriptTypeCast\000", "get_base_type\000", 2002593661)
		methodVisualScriptTypeCast[2] = gdnative.MethodOf("VisualScriptTypeCast\000", "set_base_script\000", 83702148)
		methodVisualScriptTypeCast[3] = gdnative.MethodOf("VisualScriptTypeCast\000", "get_base_script\000", 201670096)
		methodVisualScriptVariableGet[0] = gdnative.MethodOf("VisualScriptVariableGet\000", "set_variable\000", 3304788590)
		methodVisualScriptVariableGet[1] = gdnative.MethodOf("VisualScriptVariableGet\000", "get_variable\000", 2002593661)
		methodVisualScriptVariableSet[0] = gdnative.MethodOf("VisualScriptVariableSet\000", "set_variable\000", 3304788590)
		methodVisualScriptVariableSet[1] = gdnative.MethodOf("VisualScriptVariableSet\000", "get_variable\000", 2002593661)
		methodVisualScriptYield[0] = gdnative.MethodOf("VisualScriptYield\000", "set_yield_mode\000", 2680332698)
		methodVisualScriptYield[1] = gdnative.MethodOf("VisualScriptYield\000", "get_yield_mode\000", 561851229)
		methodVisualScriptYield[2] = gdnative.MethodOf("VisualScriptYield\000", "set_wait_time\000", 373806689)
		methodVisualScriptYield[3] = gdnative.MethodOf("VisualScriptYield\000", "get_wait_time\000", 191475506)
		methodVisualScriptYieldSignal[0] = gdnative.MethodOf("VisualScriptYieldSignal\000", "set_base_type\000", 3304788590)
		methodVisualScriptYieldSignal[1] = gdnative.MethodOf("VisualScriptYieldSignal\000", "get_base_type\000", 2002593661)
		methodVisualScriptYieldSignal[2] = gdnative.MethodOf("VisualScriptYieldSignal\000", "set_signal\000", 3304788590)
		methodVisualScriptYieldSignal[3] = gdnative.MethodOf("VisualScriptYieldSignal\000", "get_signal\000", 2002593661)
		methodVisualScriptYieldSignal[4] = gdnative.MethodOf("VisualScriptYieldSignal\000", "set_call_mode\000", 418847721)
		methodVisualScriptYieldSignal[5] = gdnative.MethodOf("VisualScriptYieldSignal\000", "get_call_mode\000", 3059194562)
		methodVisualScriptYieldSignal[6] = gdnative.MethodOf("VisualScriptYieldSignal\000", "set_base_path\000", 1348162250)
		methodVisualScriptYieldSignal[7] = gdnative.MethodOf("VisualScriptYieldSignal\000", "get_base_path\000", 4075236667)
		methodVisualShader[0] = gdnative.MethodOf("VisualShader\000", "set_mode\000", 3978014962)
		methodVisualShader[1] = gdnative.MethodOf("VisualShader\000", "add_node\000", 1560769431)
		methodVisualShader[2] = gdnative.MethodOf("VisualShader\000", "get_node\000", 3784670312)
		methodVisualShader[3] = gdnative.MethodOf("VisualShader\000", "set_node_position\000", 2726660721)
		methodVisualShader[4] = gdnative.MethodOf("VisualShader\000", "get_node_position\000", 2175036082)
		methodVisualShader[5] = gdnative.MethodOf("VisualShader\000", "get_node_list\000", 2370592410)
		methodVisualShader[6] = gdnative.MethodOf("VisualShader\000", "get_valid_node_id\000", 629467342)
		methodVisualShader[7] = gdnative.MethodOf("VisualShader\000", "remove_node\000", 844050912)
		methodVisualShader[8] = gdnative.MethodOf("VisualShader\000", "replace_node\000", 3144735253)
		methodVisualShader[9] = gdnative.MethodOf("VisualShader\000", "is_node_connection\000", 3922381898)
		methodVisualShader[10] = gdnative.MethodOf("VisualShader\000", "can_connect_nodes\000", 3922381898)
		methodVisualShader[11] = gdnative.MethodOf("VisualShader\000", "connect_nodes\000", 3081049573)
		methodVisualShader[12] = gdnative.MethodOf("VisualShader\000", "disconnect_nodes\000", 2268060358)
		methodVisualShader[13] = gdnative.MethodOf("VisualShader\000", "connect_nodes_forced\000", 2268060358)
		methodVisualShader[14] = gdnative.MethodOf("VisualShader\000", "get_node_connections\000", 1441964831)
		methodVisualShader[15] = gdnative.MethodOf("VisualShader\000", "set_graph_offset\000", 743155724)
		methodVisualShader[16] = gdnative.MethodOf("VisualShader\000", "get_graph_offset\000", 3341600327)
		methodVisualShader[17] = gdnative.MethodOf("VisualShader\000", "add_varying\000", 2084110726)
		methodVisualShader[18] = gdnative.MethodOf("VisualShader\000", "remove_varying\000", 83702148)
		methodVisualShader[19] = gdnative.MethodOf("VisualShader\000", "has_varying\000", 3927539163)
		methodVisualShaderNode[0] = gdnative.MethodOf("VisualShaderNode\000", "set_output_port_for_preview\000", 1286410249)
		methodVisualShaderNode[1] = gdnative.MethodOf("VisualShaderNode\000", "get_output_port_for_preview\000", 3905245786)
		methodVisualShaderNode[2] = gdnative.MethodOf("VisualShaderNode\000", "set_input_port_default_value\000", 150923387)
		methodVisualShaderNode[3] = gdnative.MethodOf("VisualShaderNode\000", "get_input_port_default_value\000", 4227898402)
		methodVisualShaderNode[4] = gdnative.MethodOf("VisualShaderNode\000", "remove_input_port_default_value\000", 1286410249)
		methodVisualShaderNode[5] = gdnative.MethodOf("VisualShaderNode\000", "clear_default_input_values\000", 3218959716)
		methodVisualShaderNode[6] = gdnative.MethodOf("VisualShaderNode\000", "set_default_input_values\000", 381264803)
		methodVisualShaderNode[7] = gdnative.MethodOf("VisualShaderNode\000", "get_default_input_values\000", 3995934104)
		methodVisualShaderNodeBillboard[0] = gdnative.MethodOf("VisualShaderNodeBillboard\000", "set_billboard_type\000", 1227463289)
		methodVisualShaderNodeBillboard[1] = gdnative.MethodOf("VisualShaderNodeBillboard\000", "get_billboard_type\000", 3724188517)
		methodVisualShaderNodeBillboard[2] = gdnative.MethodOf("VisualShaderNodeBillboard\000", "set_keep_scale_enabled\000", 2586408642)
		methodVisualShaderNodeBillboard[3] = gdnative.MethodOf("VisualShaderNodeBillboard\000", "is_keep_scale_enabled\000", 36873697)
		methodVisualShaderNodeBooleanConstant[0] = gdnative.MethodOf("VisualShaderNodeBooleanConstant\000", "set_constant\000", 2586408642)
		methodVisualShaderNodeBooleanConstant[1] = gdnative.MethodOf("VisualShaderNodeBooleanConstant\000", "get_constant\000", 36873697)
		methodVisualShaderNodeBooleanUniform[0] = gdnative.MethodOf("VisualShaderNodeBooleanUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeBooleanUniform[1] = gdnative.MethodOf("VisualShaderNodeBooleanUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeBooleanUniform[2] = gdnative.MethodOf("VisualShaderNodeBooleanUniform\000", "set_default_value\000", 2586408642)
		methodVisualShaderNodeBooleanUniform[3] = gdnative.MethodOf("VisualShaderNodeBooleanUniform\000", "get_default_value\000", 36873697)
		methodVisualShaderNodeClamp[0] = gdnative.MethodOf("VisualShaderNodeClamp\000", "set_op_type\000", 405010749)
		methodVisualShaderNodeClamp[1] = gdnative.MethodOf("VisualShaderNodeClamp\000", "get_op_type\000", 233276050)
		methodVisualShaderNodeColorConstant[0] = gdnative.MethodOf("VisualShaderNodeColorConstant\000", "set_constant\000", 2920490490)
		methodVisualShaderNodeColorConstant[1] = gdnative.MethodOf("VisualShaderNodeColorConstant\000", "get_constant\000", 3444240500)
		methodVisualShaderNodeColorFunc[0] = gdnative.MethodOf("VisualShaderNodeColorFunc\000", "set_function\000", 3973396138)
		methodVisualShaderNodeColorFunc[1] = gdnative.MethodOf("VisualShaderNodeColorFunc\000", "get_function\000", 554863321)
		methodVisualShaderNodeColorOp[0] = gdnative.MethodOf("VisualShaderNodeColorOp\000", "set_operator\000", 4260370673)
		methodVisualShaderNodeColorOp[1] = gdnative.MethodOf("VisualShaderNodeColorOp\000", "get_operator\000", 1950956529)
		methodVisualShaderNodeColorUniform[0] = gdnative.MethodOf("VisualShaderNodeColorUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeColorUniform[1] = gdnative.MethodOf("VisualShaderNodeColorUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeColorUniform[2] = gdnative.MethodOf("VisualShaderNodeColorUniform\000", "set_default_value\000", 2920490490)
		methodVisualShaderNodeColorUniform[3] = gdnative.MethodOf("VisualShaderNodeColorUniform\000", "get_default_value\000", 3444240500)
		methodVisualShaderNodeComment[0] = gdnative.MethodOf("VisualShaderNodeComment\000", "set_title\000", 83702148)
		methodVisualShaderNodeComment[1] = gdnative.MethodOf("VisualShaderNodeComment\000", "get_title\000", 201670096)
		methodVisualShaderNodeComment[2] = gdnative.MethodOf("VisualShaderNodeComment\000", "set_description\000", 83702148)
		methodVisualShaderNodeComment[3] = gdnative.MethodOf("VisualShaderNodeComment\000", "get_description\000", 201670096)
		methodVisualShaderNodeCompare[0] = gdnative.MethodOf("VisualShaderNodeCompare\000", "set_comparison_type\000", 516558320)
		methodVisualShaderNodeCompare[1] = gdnative.MethodOf("VisualShaderNodeCompare\000", "get_comparison_type\000", 3495315961)
		methodVisualShaderNodeCompare[2] = gdnative.MethodOf("VisualShaderNodeCompare\000", "set_function\000", 2370951349)
		methodVisualShaderNodeCompare[3] = gdnative.MethodOf("VisualShaderNodeCompare\000", "get_function\000", 4089164265)
		methodVisualShaderNodeCompare[4] = gdnative.MethodOf("VisualShaderNodeCompare\000", "set_condition\000", 918742392)
		methodVisualShaderNodeCompare[5] = gdnative.MethodOf("VisualShaderNodeCompare\000", "get_condition\000", 3281078941)
		methodVisualShaderNodeCubemap[0] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "set_source\000", 1625400621)
		methodVisualShaderNodeCubemap[1] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "get_source\000", 2222048781)
		methodVisualShaderNodeCubemap[2] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "set_cube_map\000", 2219800736)
		methodVisualShaderNodeCubemap[3] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "get_cube_map\000", 1772111058)
		methodVisualShaderNodeCubemap[4] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "set_texture_type\000", 1899718876)
		methodVisualShaderNodeCubemap[5] = gdnative.MethodOf("VisualShaderNodeCubemap\000", "get_texture_type\000", 3356498888)
		methodVisualShaderNodeCurveTexture[0] = gdnative.MethodOf("VisualShaderNodeCurveTexture\000", "set_texture\000", 181872837)
		methodVisualShaderNodeCurveTexture[1] = gdnative.MethodOf("VisualShaderNodeCurveTexture\000", "get_texture\000", 2800800579)
		methodVisualShaderNodeCurveXYZTexture[0] = gdnative.MethodOf("VisualShaderNodeCurveXYZTexture\000", "set_texture\000", 8031783)
		methodVisualShaderNodeCurveXYZTexture[1] = gdnative.MethodOf("VisualShaderNodeCurveXYZTexture\000", "get_texture\000", 1950275015)
		methodVisualShaderNodeDerivativeFunc[0] = gdnative.MethodOf("VisualShaderNodeDerivativeFunc\000", "set_op_type\000", 377800221)
		methodVisualShaderNodeDerivativeFunc[1] = gdnative.MethodOf("VisualShaderNodeDerivativeFunc\000", "get_op_type\000", 3997800514)
		methodVisualShaderNodeDerivativeFunc[2] = gdnative.MethodOf("VisualShaderNodeDerivativeFunc\000", "set_function\000", 1944704156)
		methodVisualShaderNodeDerivativeFunc[3] = gdnative.MethodOf("VisualShaderNodeDerivativeFunc\000", "get_function\000", 2389093396)
		methodVisualShaderNodeExpression[0] = gdnative.MethodOf("VisualShaderNodeExpression\000", "set_expression\000", 83702148)
		methodVisualShaderNodeExpression[1] = gdnative.MethodOf("VisualShaderNodeExpression\000", "get_expression\000", 201670096)
		methodVisualShaderNodeFloatConstant[0] = gdnative.MethodOf("VisualShaderNodeFloatConstant\000", "set_constant\000", 373806689)
		methodVisualShaderNodeFloatConstant[1] = gdnative.MethodOf("VisualShaderNodeFloatConstant\000", "get_constant\000", 1740695150)
		methodVisualShaderNodeFloatFunc[0] = gdnative.MethodOf("VisualShaderNodeFloatFunc\000", "set_function\000", 536026177)
		methodVisualShaderNodeFloatFunc[1] = gdnative.MethodOf("VisualShaderNodeFloatFunc\000", "get_function\000", 2033948868)
		methodVisualShaderNodeFloatOp[0] = gdnative.MethodOf("VisualShaderNodeFloatOp\000", "set_operator\000", 2488468047)
		methodVisualShaderNodeFloatOp[1] = gdnative.MethodOf("VisualShaderNodeFloatOp\000", "get_operator\000", 1867979390)
		methodVisualShaderNodeFloatUniform[0] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_hint\000", 1381357203)
		methodVisualShaderNodeFloatUniform[1] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "get_hint\000", 569120385)
		methodVisualShaderNodeFloatUniform[2] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_min\000", 373806689)
		methodVisualShaderNodeFloatUniform[3] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "get_min\000", 1740695150)
		methodVisualShaderNodeFloatUniform[4] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_max\000", 373806689)
		methodVisualShaderNodeFloatUniform[5] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "get_max\000", 1740695150)
		methodVisualShaderNodeFloatUniform[6] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_step\000", 373806689)
		methodVisualShaderNodeFloatUniform[7] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "get_step\000", 1740695150)
		methodVisualShaderNodeFloatUniform[8] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeFloatUniform[9] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeFloatUniform[10] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "set_default_value\000", 373806689)
		methodVisualShaderNodeFloatUniform[11] = gdnative.MethodOf("VisualShaderNodeFloatUniform\000", "get_default_value\000", 1740695150)
		methodVisualShaderNodeGroupBase[0] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_inputs\000", 83702148)
		methodVisualShaderNodeGroupBase[1] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_inputs\000", 201670096)
		methodVisualShaderNodeGroupBase[2] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_outputs\000", 83702148)
		methodVisualShaderNodeGroupBase[3] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_outputs\000", 201670096)
		methodVisualShaderNodeGroupBase[4] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "is_valid_port_name\000", 3927539163)
		methodVisualShaderNodeGroupBase[5] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "add_input_port\000", 2285447957)
		methodVisualShaderNodeGroupBase[6] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "remove_input_port\000", 1286410249)
		methodVisualShaderNodeGroupBase[7] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_input_port_count\000", 3905245786)
		methodVisualShaderNodeGroupBase[8] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "has_input_port\000", 1116898809)
		methodVisualShaderNodeGroupBase[9] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "clear_input_ports\000", 3218959716)
		methodVisualShaderNodeGroupBase[10] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "add_output_port\000", 2285447957)
		methodVisualShaderNodeGroupBase[11] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "remove_output_port\000", 1286410249)
		methodVisualShaderNodeGroupBase[12] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_output_port_count\000", 3905245786)
		methodVisualShaderNodeGroupBase[13] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "has_output_port\000", 1116898809)
		methodVisualShaderNodeGroupBase[14] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "clear_output_ports\000", 3218959716)
		methodVisualShaderNodeGroupBase[15] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_input_port_name\000", 501894301)
		methodVisualShaderNodeGroupBase[16] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_input_port_type\000", 3937882851)
		methodVisualShaderNodeGroupBase[17] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_output_port_name\000", 501894301)
		methodVisualShaderNodeGroupBase[18] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "set_output_port_type\000", 3937882851)
		methodVisualShaderNodeGroupBase[19] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_free_input_port_id\000", 3905245786)
		methodVisualShaderNodeGroupBase[20] = gdnative.MethodOf("VisualShaderNodeGroupBase\000", "get_free_output_port_id\000", 3905245786)
		methodVisualShaderNodeInput[0] = gdnative.MethodOf("VisualShaderNodeInput\000", "set_input_name\000", 83702148)
		methodVisualShaderNodeInput[1] = gdnative.MethodOf("VisualShaderNodeInput\000", "get_input_name\000", 201670096)
		methodVisualShaderNodeInput[2] = gdnative.MethodOf("VisualShaderNodeInput\000", "get_input_real_name\000", 201670096)
		methodVisualShaderNodeIntConstant[0] = gdnative.MethodOf("VisualShaderNodeIntConstant\000", "set_constant\000", 1286410249)
		methodVisualShaderNodeIntConstant[1] = gdnative.MethodOf("VisualShaderNodeIntConstant\000", "get_constant\000", 3905245786)
		methodVisualShaderNodeIntFunc[0] = gdnative.MethodOf("VisualShaderNodeIntFunc\000", "set_function\000", 424195284)
		methodVisualShaderNodeIntFunc[1] = gdnative.MethodOf("VisualShaderNodeIntFunc\000", "get_function\000", 2753496911)
		methodVisualShaderNodeIntOp[0] = gdnative.MethodOf("VisualShaderNodeIntOp\000", "set_operator\000", 1677909323)
		methodVisualShaderNodeIntOp[1] = gdnative.MethodOf("VisualShaderNodeIntOp\000", "get_operator\000", 1236987913)
		methodVisualShaderNodeIntUniform[0] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_hint\000", 143686977)
		methodVisualShaderNodeIntUniform[1] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "get_hint\000", 1563206693)
		methodVisualShaderNodeIntUniform[2] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_min\000", 1286410249)
		methodVisualShaderNodeIntUniform[3] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "get_min\000", 3905245786)
		methodVisualShaderNodeIntUniform[4] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_max\000", 1286410249)
		methodVisualShaderNodeIntUniform[5] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "get_max\000", 3905245786)
		methodVisualShaderNodeIntUniform[6] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_step\000", 1286410249)
		methodVisualShaderNodeIntUniform[7] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "get_step\000", 3905245786)
		methodVisualShaderNodeIntUniform[8] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeIntUniform[9] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeIntUniform[10] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "set_default_value\000", 1286410249)
		methodVisualShaderNodeIntUniform[11] = gdnative.MethodOf("VisualShaderNodeIntUniform\000", "get_default_value\000", 3905245786)
		methodVisualShaderNodeIs[0] = gdnative.MethodOf("VisualShaderNodeIs\000", "set_function\000", 1438374690)
		methodVisualShaderNodeIs[1] = gdnative.MethodOf("VisualShaderNodeIs\000", "get_function\000", 580678557)
		methodVisualShaderNodeMix[0] = gdnative.MethodOf("VisualShaderNodeMix\000", "set_op_type\000", 3397501671)
		methodVisualShaderNodeMix[1] = gdnative.MethodOf("VisualShaderNodeMix\000", "get_op_type\000", 4013957297)
		methodVisualShaderNodeMultiplyAdd[0] = gdnative.MethodOf("VisualShaderNodeMultiplyAdd\000", "set_op_type\000", 1409862380)
		methodVisualShaderNodeMultiplyAdd[1] = gdnative.MethodOf("VisualShaderNodeMultiplyAdd\000", "get_op_type\000", 2823201991)
		methodVisualShaderNodeParticleAccelerator[0] = gdnative.MethodOf("VisualShaderNodeParticleAccelerator\000", "set_mode\000", 3457585749)
		methodVisualShaderNodeParticleAccelerator[1] = gdnative.MethodOf("VisualShaderNodeParticleAccelerator\000", "get_mode\000", 2660365633)
		methodVisualShaderNodeParticleEmit[0] = gdnative.MethodOf("VisualShaderNodeParticleEmit\000", "set_flags\000", 3960756792)
		methodVisualShaderNodeParticleEmit[1] = gdnative.MethodOf("VisualShaderNodeParticleEmit\000", "get_flags\000", 171277835)
		methodVisualShaderNodeParticleEmitter[0] = gdnative.MethodOf("VisualShaderNodeParticleEmitter\000", "set_mode_2d\000", 2586408642)
		methodVisualShaderNodeParticleEmitter[1] = gdnative.MethodOf("VisualShaderNodeParticleEmitter\000", "is_mode_2d\000", 36873697)
		methodVisualShaderNodeParticleMeshEmitter[0] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "set_mesh\000", 194775623)
		methodVisualShaderNodeParticleMeshEmitter[1] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "get_mesh\000", 1808005922)
		methodVisualShaderNodeParticleMeshEmitter[2] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "set_use_all_surfaces\000", 2586408642)
		methodVisualShaderNodeParticleMeshEmitter[3] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "is_use_all_surfaces\000", 36873697)
		methodVisualShaderNodeParticleMeshEmitter[4] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "set_surface_index\000", 1286410249)
		methodVisualShaderNodeParticleMeshEmitter[5] = gdnative.MethodOf("VisualShaderNodeParticleMeshEmitter\000", "get_surface_index\000", 3905245786)
		methodVisualShaderNodeParticleMultiplyByAxisAngle[0] = gdnative.MethodOf("VisualShaderNodeParticleMultiplyByAxisAngle\000", "set_degrees_mode\000", 2586408642)
		methodVisualShaderNodeParticleMultiplyByAxisAngle[1] = gdnative.MethodOf("VisualShaderNodeParticleMultiplyByAxisAngle\000", "is_degrees_mode\000", 36873697)
		methodVisualShaderNodeParticleRandomness[0] = gdnative.MethodOf("VisualShaderNodeParticleRandomness\000", "set_op_type\000", 2060089061)
		methodVisualShaderNodeParticleRandomness[1] = gdnative.MethodOf("VisualShaderNodeParticleRandomness\000", "get_op_type\000", 3597061078)
		methodVisualShaderNodeResizableBase[0] = gdnative.MethodOf("VisualShaderNodeResizableBase\000", "set_size\000", 743155724)
		methodVisualShaderNodeResizableBase[1] = gdnative.MethodOf("VisualShaderNodeResizableBase\000", "get_size\000", 3341600327)
		methodVisualShaderNodeSample3D[0] = gdnative.MethodOf("VisualShaderNodeSample3D\000", "set_source\000", 3315130991)
		methodVisualShaderNodeSample3D[1] = gdnative.MethodOf("VisualShaderNodeSample3D\000", "get_source\000", 1079494121)
		methodVisualShaderNodeSmoothStep[0] = gdnative.MethodOf("VisualShaderNodeSmoothStep\000", "set_op_type\000", 2427426148)
		methodVisualShaderNodeSmoothStep[1] = gdnative.MethodOf("VisualShaderNodeSmoothStep\000", "get_op_type\000", 359640855)
		methodVisualShaderNodeStep[0] = gdnative.MethodOf("VisualShaderNodeStep\000", "set_op_type\000", 715172489)
		methodVisualShaderNodeStep[1] = gdnative.MethodOf("VisualShaderNodeStep\000", "get_op_type\000", 3274022781)
		methodVisualShaderNodeSwitch[0] = gdnative.MethodOf("VisualShaderNodeSwitch\000", "set_op_type\000", 510471861)
		methodVisualShaderNodeSwitch[1] = gdnative.MethodOf("VisualShaderNodeSwitch\000", "get_op_type\000", 2517845071)
		methodVisualShaderNodeTexture[0] = gdnative.MethodOf("VisualShaderNodeTexture\000", "set_source\000", 905262939)
		methodVisualShaderNodeTexture[1] = gdnative.MethodOf("VisualShaderNodeTexture\000", "get_source\000", 2896297444)
		methodVisualShaderNodeTexture[2] = gdnative.MethodOf("VisualShaderNodeTexture\000", "set_texture\000", 4051416890)
		methodVisualShaderNodeTexture[3] = gdnative.MethodOf("VisualShaderNodeTexture\000", "get_texture\000", 3635182373)
		methodVisualShaderNodeTexture[4] = gdnative.MethodOf("VisualShaderNodeTexture\000", "set_texture_type\000", 986314081)
		methodVisualShaderNodeTexture[5] = gdnative.MethodOf("VisualShaderNodeTexture\000", "get_texture_type\000", 3290430153)
		methodVisualShaderNodeTexture2DArray[0] = gdnative.MethodOf("VisualShaderNodeTexture2DArray\000", "set_texture_array\000", 2206200446)
		methodVisualShaderNodeTexture2DArray[1] = gdnative.MethodOf("VisualShaderNodeTexture2DArray\000", "get_texture_array\000", 146117123)
		methodVisualShaderNodeTexture3D[0] = gdnative.MethodOf("VisualShaderNodeTexture3D\000", "set_texture\000", 1188404210)
		methodVisualShaderNodeTexture3D[1] = gdnative.MethodOf("VisualShaderNodeTexture3D\000", "get_texture\000", 373985333)
		methodVisualShaderNodeTextureUniform[0] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "set_texture_type\000", 3894235364)
		methodVisualShaderNodeTextureUniform[1] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "get_texture_type\000", 244818602)
		methodVisualShaderNodeTextureUniform[2] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "set_color_default\000", 2490959881)
		methodVisualShaderNodeTextureUniform[3] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "get_color_default\000", 2357923939)
		methodVisualShaderNodeTextureUniform[4] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "set_texture_filter\000", 1608887800)
		methodVisualShaderNodeTextureUniform[5] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "get_texture_filter\000", 2790632769)
		methodVisualShaderNodeTextureUniform[6] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "set_texture_repeat\000", 1498268787)
		methodVisualShaderNodeTextureUniform[7] = gdnative.MethodOf("VisualShaderNodeTextureUniform\000", "get_texture_repeat\000", 98242067)
		methodVisualShaderNodeTransformConstant[0] = gdnative.MethodOf("VisualShaderNodeTransformConstant\000", "set_constant\000", 2952846383)
		methodVisualShaderNodeTransformConstant[1] = gdnative.MethodOf("VisualShaderNodeTransformConstant\000", "get_constant\000", 3229777777)
		methodVisualShaderNodeTransformFunc[0] = gdnative.MethodOf("VisualShaderNodeTransformFunc\000", "set_function\000", 2900990409)
		methodVisualShaderNodeTransformFunc[1] = gdnative.MethodOf("VisualShaderNodeTransformFunc\000", "get_function\000", 2839926569)
		methodVisualShaderNodeTransformOp[0] = gdnative.MethodOf("VisualShaderNodeTransformOp\000", "set_operator\000", 2287310733)
		methodVisualShaderNodeTransformOp[1] = gdnative.MethodOf("VisualShaderNodeTransformOp\000", "get_operator\000", 1238663601)
		methodVisualShaderNodeTransformUniform[0] = gdnative.MethodOf("VisualShaderNodeTransformUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeTransformUniform[1] = gdnative.MethodOf("VisualShaderNodeTransformUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeTransformUniform[2] = gdnative.MethodOf("VisualShaderNodeTransformUniform\000", "set_default_value\000", 2952846383)
		methodVisualShaderNodeTransformUniform[3] = gdnative.MethodOf("VisualShaderNodeTransformUniform\000", "get_default_value\000", 3229777777)
		methodVisualShaderNodeTransformVecMult[0] = gdnative.MethodOf("VisualShaderNodeTransformVecMult\000", "set_operator\000", 1785665912)
		methodVisualShaderNodeTransformVecMult[1] = gdnative.MethodOf("VisualShaderNodeTransformVecMult\000", "get_operator\000", 1622088722)
		methodVisualShaderNodeUVFunc[0] = gdnative.MethodOf("VisualShaderNodeUVFunc\000", "set_function\000", 765791915)
		methodVisualShaderNodeUVFunc[1] = gdnative.MethodOf("VisualShaderNodeUVFunc\000", "get_function\000", 3772902164)
		methodVisualShaderNodeUniform[0] = gdnative.MethodOf("VisualShaderNodeUniform\000", "set_uniform_name\000", 83702148)
		methodVisualShaderNodeUniform[1] = gdnative.MethodOf("VisualShaderNodeUniform\000", "get_uniform_name\000", 201670096)
		methodVisualShaderNodeUniform[2] = gdnative.MethodOf("VisualShaderNodeUniform\000", "set_qualifier\000", 1917199311)
		methodVisualShaderNodeUniform[3] = gdnative.MethodOf("VisualShaderNodeUniform\000", "get_qualifier\000", 3211552365)
		methodVisualShaderNodeUniformRef[0] = gdnative.MethodOf("VisualShaderNodeUniformRef\000", "set_uniform_name\000", 83702148)
		methodVisualShaderNodeUniformRef[1] = gdnative.MethodOf("VisualShaderNodeUniformRef\000", "get_uniform_name\000", 201670096)
		methodVisualShaderNodeVarying[0] = gdnative.MethodOf("VisualShaderNodeVarying\000", "set_varying_name\000", 83702148)
		methodVisualShaderNodeVarying[1] = gdnative.MethodOf("VisualShaderNodeVarying\000", "get_varying_name\000", 201670096)
		methodVisualShaderNodeVarying[2] = gdnative.MethodOf("VisualShaderNodeVarying\000", "set_varying_type\000", 3565867981)
		methodVisualShaderNodeVarying[3] = gdnative.MethodOf("VisualShaderNodeVarying\000", "get_varying_type\000", 523183580)
		methodVisualShaderNodeVec2Constant[0] = gdnative.MethodOf("VisualShaderNodeVec2Constant\000", "set_constant\000", 743155724)
		methodVisualShaderNodeVec2Constant[1] = gdnative.MethodOf("VisualShaderNodeVec2Constant\000", "get_constant\000", 3341600327)
		methodVisualShaderNodeVec2Uniform[0] = gdnative.MethodOf("VisualShaderNodeVec2Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec2Uniform[1] = gdnative.MethodOf("VisualShaderNodeVec2Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec2Uniform[2] = gdnative.MethodOf("VisualShaderNodeVec2Uniform\000", "set_default_value\000", 743155724)
		methodVisualShaderNodeVec2Uniform[3] = gdnative.MethodOf("VisualShaderNodeVec2Uniform\000", "get_default_value\000", 3341600327)
		methodVisualShaderNodeVec3Constant[0] = gdnative.MethodOf("VisualShaderNodeVec3Constant\000", "set_constant\000", 3460891852)
		methodVisualShaderNodeVec3Constant[1] = gdnative.MethodOf("VisualShaderNodeVec3Constant\000", "get_constant\000", 3360562783)
		methodVisualShaderNodeVec3Uniform[0] = gdnative.MethodOf("VisualShaderNodeVec3Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec3Uniform[1] = gdnative.MethodOf("VisualShaderNodeVec3Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec3Uniform[2] = gdnative.MethodOf("VisualShaderNodeVec3Uniform\000", "set_default_value\000", 3460891852)
		methodVisualShaderNodeVec3Uniform[3] = gdnative.MethodOf("VisualShaderNodeVec3Uniform\000", "get_default_value\000", 3360562783)
		methodVisualShaderNodeVec4Constant[0] = gdnative.MethodOf("VisualShaderNodeVec4Constant\000", "set_constant\000", 1727505552)
		methodVisualShaderNodeVec4Constant[1] = gdnative.MethodOf("VisualShaderNodeVec4Constant\000", "get_constant\000", 1222331677)
		methodVisualShaderNodeVec4Uniform[0] = gdnative.MethodOf("VisualShaderNodeVec4Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec4Uniform[1] = gdnative.MethodOf("VisualShaderNodeVec4Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec4Uniform[2] = gdnative.MethodOf("VisualShaderNodeVec4Uniform\000", "set_default_value\000", 1727505552)
		methodVisualShaderNodeVec4Uniform[3] = gdnative.MethodOf("VisualShaderNodeVec4Uniform\000", "get_default_value\000", 1222331677)
		methodVisualShaderNodeVectorBase[0] = gdnative.MethodOf("VisualShaderNodeVectorBase\000", "set_op_type\000", 1692596998)
		methodVisualShaderNodeVectorBase[1] = gdnative.MethodOf("VisualShaderNodeVectorBase\000", "get_op_type\000", 2568738462)
		methodVisualShaderNodeVectorFunc[0] = gdnative.MethodOf("VisualShaderNodeVectorFunc\000", "set_function\000", 629964457)
		methodVisualShaderNodeVectorFunc[1] = gdnative.MethodOf("VisualShaderNodeVectorFunc\000", "get_function\000", 4047776843)
		methodVisualShaderNodeVectorOp[0] = gdnative.MethodOf("VisualShaderNodeVectorOp\000", "set_operator\000", 3371507302)
		methodVisualShaderNodeVectorOp[1] = gdnative.MethodOf("VisualShaderNodeVectorOp\000", "get_operator\000", 11793929)
		methodVoxelGI[0] = gdnative.MethodOf("VoxelGI\000", "set_probe_data\000", 1637849675)
		methodVoxelGI[1] = gdnative.MethodOf("VoxelGI\000", "get_probe_data\000", 1730645405)
		methodVoxelGI[2] = gdnative.MethodOf("VoxelGI\000", "set_subdiv\000", 2240898472)
		methodVoxelGI[3] = gdnative.MethodOf("VoxelGI\000", "get_subdiv\000", 4261647950)
		methodVoxelGI[4] = gdnative.MethodOf("VoxelGI\000", "set_extents\000", 3460891852)
		methodVoxelGI[5] = gdnative.MethodOf("VoxelGI\000", "get_extents\000", 3360562783)
		methodVoxelGI[6] = gdnative.MethodOf("VoxelGI\000", "bake\000", 2781551026)
		methodVoxelGI[7] = gdnative.MethodOf("VoxelGI\000", "debug_bake\000", 3218959716)
		methodVoxelGIData[0] = gdnative.MethodOf("VoxelGIData\000", "allocate\000", 4041601946)
		methodVoxelGIData[1] = gdnative.MethodOf("VoxelGIData\000", "get_bounds\000", 1068685055)
		methodVoxelGIData[2] = gdnative.MethodOf("VoxelGIData\000", "get_octree_size\000", 3360562783)
		methodVoxelGIData[3] = gdnative.MethodOf("VoxelGIData\000", "get_to_cell_xform\000", 3229777777)
		methodVoxelGIData[4] = gdnative.MethodOf("VoxelGIData\000", "get_octree_cells\000", 2362200018)
		methodVoxelGIData[5] = gdnative.MethodOf("VoxelGIData\000", "get_data_cells\000", 2362200018)
		methodVoxelGIData[6] = gdnative.MethodOf("VoxelGIData\000", "get_level_counts\000", 1930428628)
		methodVoxelGIData[7] = gdnative.MethodOf("VoxelGIData\000", "set_dynamic_range\000", 373806689)
		methodVoxelGIData[8] = gdnative.MethodOf("VoxelGIData\000", "get_dynamic_range\000", 1740695150)
		methodVoxelGIData[9] = gdnative.MethodOf("VoxelGIData\000", "set_energy\000", 373806689)
		methodVoxelGIData[10] = gdnative.MethodOf("VoxelGIData\000", "get_energy\000", 1740695150)
		methodVoxelGIData[11] = gdnative.MethodOf("VoxelGIData\000", "set_bias\000", 373806689)
		methodVoxelGIData[12] = gdnative.MethodOf("VoxelGIData\000", "get_bias\000", 1740695150)
		methodVoxelGIData[13] = gdnative.MethodOf("VoxelGIData\000", "set_normal_bias\000", 373806689)
		methodVoxelGIData[14] = gdnative.MethodOf("VoxelGIData\000", "get_normal_bias\000", 1740695150)
		methodVoxelGIData[15] = gdnative.MethodOf("VoxelGIData\000", "set_propagation\000", 373806689)
		methodVoxelGIData[16] = gdnative.MethodOf("VoxelGIData\000", "get_propagation\000", 1740695150)
		methodVoxelGIData[17] = gdnative.MethodOf("VoxelGIData\000", "set_interior\000", 2586408642)
		methodVoxelGIData[18] = gdnative.MethodOf("VoxelGIData\000", "is_interior\000", 36873697)
		methodVoxelGIData[19] = gdnative.MethodOf("VoxelGIData\000", "set_use_two_bounces\000", 2586408642)
		methodVoxelGIData[20] = gdnative.MethodOf("VoxelGIData\000", "is_using_two_bounces\000", 36873697)
		methodWeakRef[0] = gdnative.MethodOf("WeakRef\000", "get_ref\000", 1214101251)
		methodWebRTCDataChannel[0] = gdnative.MethodOf("WebRTCDataChannel\000", "poll\000", 166280745)
		methodWebRTCDataChannel[1] = gdnative.MethodOf("WebRTCDataChannel\000", "close\000", 3218959716)
		methodWebRTCDataChannel[2] = gdnative.MethodOf("WebRTCDataChannel\000", "was_string_packet\000", 36873697)
		methodWebRTCDataChannel[3] = gdnative.MethodOf("WebRTCDataChannel\000", "set_write_mode\000", 1999768052)
		methodWebRTCDataChannel[4] = gdnative.MethodOf("WebRTCDataChannel\000", "get_write_mode\000", 2848495172)
		methodWebRTCDataChannel[5] = gdnative.MethodOf("WebRTCDataChannel\000", "get_ready_state\000", 3501143017)
		methodWebRTCDataChannel[6] = gdnative.MethodOf("WebRTCDataChannel\000", "get_label\000", 201670096)
		methodWebRTCDataChannel[7] = gdnative.MethodOf("WebRTCDataChannel\000", "is_ordered\000", 36873697)
		methodWebRTCDataChannel[8] = gdnative.MethodOf("WebRTCDataChannel\000", "get_id\000", 3905245786)
		methodWebRTCDataChannel[9] = gdnative.MethodOf("WebRTCDataChannel\000", "get_max_packet_life_time\000", 3905245786)
		methodWebRTCDataChannel[10] = gdnative.MethodOf("WebRTCDataChannel\000", "get_max_retransmits\000", 3905245786)
		methodWebRTCDataChannel[11] = gdnative.MethodOf("WebRTCDataChannel\000", "get_protocol\000", 201670096)
		methodWebRTCDataChannel[12] = gdnative.MethodOf("WebRTCDataChannel\000", "is_negotiated\000", 36873697)
		methodWebRTCDataChannel[13] = gdnative.MethodOf("WebRTCDataChannel\000", "get_buffered_amount\000", 3905245786)
		methodWebRTCMultiplayerPeer[0] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "initialize\000", 3613820124)
		methodWebRTCMultiplayerPeer[1] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "add_peer\000", 2555866323)
		methodWebRTCMultiplayerPeer[2] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "remove_peer\000", 1286410249)
		methodWebRTCMultiplayerPeer[3] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "has_peer\000", 3067735520)
		methodWebRTCMultiplayerPeer[4] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "get_peer\000", 3554694381)
		methodWebRTCMultiplayerPeer[5] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "get_peers\000", 2382534195)
		methodWebRTCMultiplayerPeer[6] = gdnative.MethodOf("WebRTCMultiplayerPeer\000", "close\000", 3218959716)
		methodWebRTCPeerConnection[0] = gdnative.MethodOf("WebRTCPeerConnection\000", "set_default_extension\000", 3304788590)
		methodWebRTCPeerConnection[1] = gdnative.MethodOf("WebRTCPeerConnection\000", "initialize\000", 2625064318)
		methodWebRTCPeerConnection[2] = gdnative.MethodOf("WebRTCPeerConnection\000", "create_data_channel\000", 3997447457)
		methodWebRTCPeerConnection[3] = gdnative.MethodOf("WebRTCPeerConnection\000", "create_offer\000", 166280745)
		methodWebRTCPeerConnection[4] = gdnative.MethodOf("WebRTCPeerConnection\000", "set_local_description\000", 852856452)
		methodWebRTCPeerConnection[5] = gdnative.MethodOf("WebRTCPeerConnection\000", "set_remote_description\000", 852856452)
		methodWebRTCPeerConnection[6] = gdnative.MethodOf("WebRTCPeerConnection\000", "add_ice_candidate\000", 3958950400)
		methodWebRTCPeerConnection[7] = gdnative.MethodOf("WebRTCPeerConnection\000", "poll\000", 166280745)
		methodWebRTCPeerConnection[8] = gdnative.MethodOf("WebRTCPeerConnection\000", "close\000", 3218959716)
		methodWebRTCPeerConnection[9] = gdnative.MethodOf("WebRTCPeerConnection\000", "get_connection_state\000", 2275710506)
		methodWebSocketClient[0] = gdnative.MethodOf("WebSocketClient\000", "connect_to_url\000", 2284355069)
		methodWebSocketClient[1] = gdnative.MethodOf("WebSocketClient\000", "disconnect_from_host\000", 1047156615)
		methodWebSocketClient[2] = gdnative.MethodOf("WebSocketClient\000", "get_connected_host\000", 201670096)
		methodWebSocketClient[3] = gdnative.MethodOf("WebSocketClient\000", "get_connected_port\000", 3905245786)
		methodWebSocketClient[4] = gdnative.MethodOf("WebSocketClient\000", "set_verify_ssl_enabled\000", 2586408642)
		methodWebSocketClient[5] = gdnative.MethodOf("WebSocketClient\000", "is_verify_ssl_enabled\000", 36873697)
		methodWebSocketClient[6] = gdnative.MethodOf("WebSocketClient\000", "get_trusted_ssl_certificate\000", 1120709175)
		methodWebSocketClient[7] = gdnative.MethodOf("WebSocketClient\000", "set_trusted_ssl_certificate\000", 1793585120)
		methodWebSocketMultiplayerPeer[0] = gdnative.MethodOf("WebSocketMultiplayerPeer\000", "set_buffers\000", 3684568301)
		methodWebSocketMultiplayerPeer[1] = gdnative.MethodOf("WebSocketMultiplayerPeer\000", "get_peer\000", 1381378851)
		methodWebSocketPeer[0] = gdnative.MethodOf("WebSocketPeer\000", "get_write_mode\000", 1797831585)
		methodWebSocketPeer[1] = gdnative.MethodOf("WebSocketPeer\000", "set_write_mode\000", 96037162)
		methodWebSocketPeer[2] = gdnative.MethodOf("WebSocketPeer\000", "is_connected_to_host\000", 36873697)
		methodWebSocketPeer[3] = gdnative.MethodOf("WebSocketPeer\000", "was_string_packet\000", 36873697)
		methodWebSocketPeer[4] = gdnative.MethodOf("WebSocketPeer\000", "close\000", 1047156615)
		methodWebSocketPeer[5] = gdnative.MethodOf("WebSocketPeer\000", "get_connected_host\000", 201670096)
		methodWebSocketPeer[6] = gdnative.MethodOf("WebSocketPeer\000", "get_connected_port\000", 3905245786)
		methodWebSocketPeer[7] = gdnative.MethodOf("WebSocketPeer\000", "set_no_delay\000", 2586408642)
		methodWebSocketPeer[8] = gdnative.MethodOf("WebSocketPeer\000", "get_current_outbound_buffered_amount\000", 3905245786)
		methodWebSocketServer[0] = gdnative.MethodOf("WebSocketServer\000", "is_listening\000", 36873697)
		methodWebSocketServer[1] = gdnative.MethodOf("WebSocketServer\000", "set_extra_headers\000", 2328480543)
		methodWebSocketServer[2] = gdnative.MethodOf("WebSocketServer\000", "listen\000", 4229601608)
		methodWebSocketServer[3] = gdnative.MethodOf("WebSocketServer\000", "stop\000", 3218959716)
		methodWebSocketServer[4] = gdnative.MethodOf("WebSocketServer\000", "has_peer\000", 1116898809)
		methodWebSocketServer[5] = gdnative.MethodOf("WebSocketServer\000", "get_peer_address\000", 844755477)
		methodWebSocketServer[6] = gdnative.MethodOf("WebSocketServer\000", "get_peer_port\000", 923996154)
		methodWebSocketServer[7] = gdnative.MethodOf("WebSocketServer\000", "disconnect_peer\000", 2976048447)
		methodWebSocketServer[8] = gdnative.MethodOf("WebSocketServer\000", "get_bind_ip\000", 201670096)
		methodWebSocketServer[9] = gdnative.MethodOf("WebSocketServer\000", "set_bind_ip\000", 83702148)
		methodWebSocketServer[10] = gdnative.MethodOf("WebSocketServer\000", "get_private_key\000", 2119971811)
		methodWebSocketServer[11] = gdnative.MethodOf("WebSocketServer\000", "set_private_key\000", 3770317738)
		methodWebSocketServer[12] = gdnative.MethodOf("WebSocketServer\000", "get_ssl_certificate\000", 1120709175)
		methodWebSocketServer[13] = gdnative.MethodOf("WebSocketServer\000", "set_ssl_certificate\000", 1793585120)
		methodWebSocketServer[14] = gdnative.MethodOf("WebSocketServer\000", "get_ca_chain\000", 1120709175)
		methodWebSocketServer[15] = gdnative.MethodOf("WebSocketServer\000", "set_ca_chain\000", 1793585120)
		methodWebSocketServer[16] = gdnative.MethodOf("WebSocketServer\000", "get_handshake_timeout\000", 1740695150)
		methodWebSocketServer[17] = gdnative.MethodOf("WebSocketServer\000", "set_handshake_timeout\000", 373806689)
		methodWebXRInterface[0] = gdnative.MethodOf("WebXRInterface\000", "is_session_supported\000", 83702148)
		methodWebXRInterface[1] = gdnative.MethodOf("WebXRInterface\000", "set_session_mode\000", 83702148)
		methodWebXRInterface[2] = gdnative.MethodOf("WebXRInterface\000", "get_session_mode\000", 201670096)
		methodWebXRInterface[3] = gdnative.MethodOf("WebXRInterface\000", "set_required_features\000", 83702148)
		methodWebXRInterface[4] = gdnative.MethodOf("WebXRInterface\000", "get_required_features\000", 201670096)
		methodWebXRInterface[5] = gdnative.MethodOf("WebXRInterface\000", "set_optional_features\000", 83702148)
		methodWebXRInterface[6] = gdnative.MethodOf("WebXRInterface\000", "get_optional_features\000", 201670096)
		methodWebXRInterface[7] = gdnative.MethodOf("WebXRInterface\000", "get_reference_space_type\000", 201670096)
		methodWebXRInterface[8] = gdnative.MethodOf("WebXRInterface\000", "set_requested_reference_space_types\000", 83702148)
		methodWebXRInterface[9] = gdnative.MethodOf("WebXRInterface\000", "get_requested_reference_space_types\000", 201670096)
		methodWebXRInterface[10] = gdnative.MethodOf("WebXRInterface\000", "get_controller\000", 636011756)
		methodWebXRInterface[11] = gdnative.MethodOf("WebXRInterface\000", "get_visibility_state\000", 201670096)
		methodWebXRInterface[12] = gdnative.MethodOf("WebXRInterface\000", "get_bounds_geometry\000", 497664490)
		methodWindow[0] = gdnative.MethodOf("Window\000", "set_title\000", 83702148)
		methodWindow[1] = gdnative.MethodOf("Window\000", "get_title\000", 201670096)
		methodWindow[2] = gdnative.MethodOf("Window\000", "set_current_screen\000", 1286410249)
		methodWindow[3] = gdnative.MethodOf("Window\000", "get_current_screen\000", 3905245786)
		methodWindow[4] = gdnative.MethodOf("Window\000", "set_position\000", 1130785943)
		methodWindow[5] = gdnative.MethodOf("Window\000", "get_position\000", 3690982128)
		methodWindow[6] = gdnative.MethodOf("Window\000", "set_size\000", 1130785943)
		methodWindow[7] = gdnative.MethodOf("Window\000", "get_size\000", 3690982128)
		methodWindow[8] = gdnative.MethodOf("Window\000", "reset_size\000", 3218959716)
		methodWindow[9] = gdnative.MethodOf("Window\000", "get_real_size\000", 3690982128)
		methodWindow[10] = gdnative.MethodOf("Window\000", "set_max_size\000", 1130785943)
		methodWindow[11] = gdnative.MethodOf("Window\000", "get_max_size\000", 3690982128)
		methodWindow[12] = gdnative.MethodOf("Window\000", "set_min_size\000", 1130785943)
		methodWindow[13] = gdnative.MethodOf("Window\000", "get_min_size\000", 3690982128)
		methodWindow[14] = gdnative.MethodOf("Window\000", "set_mode\000", 3095236531)
		methodWindow[15] = gdnative.MethodOf("Window\000", "get_mode\000", 2566346114)
		methodWindow[16] = gdnative.MethodOf("Window\000", "set_flag\000", 3426449779)
		methodWindow[17] = gdnative.MethodOf("Window\000", "get_flag\000", 3062752289)
		methodWindow[18] = gdnative.MethodOf("Window\000", "is_maximize_allowed\000", 36873697)
		methodWindow[19] = gdnative.MethodOf("Window\000", "request_attention\000", 3218959716)
		methodWindow[20] = gdnative.MethodOf("Window\000", "move_to_foreground\000", 3218959716)
		methodWindow[21] = gdnative.MethodOf("Window\000", "set_visible\000", 2586408642)
		methodWindow[22] = gdnative.MethodOf("Window\000", "is_visible\000", 36873697)
		methodWindow[23] = gdnative.MethodOf("Window\000", "hide\000", 3218959716)
		methodWindow[24] = gdnative.MethodOf("Window\000", "show\000", 3218959716)
		methodWindow[25] = gdnative.MethodOf("Window\000", "set_transient\000", 2586408642)
		methodWindow[26] = gdnative.MethodOf("Window\000", "is_transient\000", 36873697)
		methodWindow[27] = gdnative.MethodOf("Window\000", "set_exclusive\000", 2586408642)
		methodWindow[28] = gdnative.MethodOf("Window\000", "is_exclusive\000", 36873697)
		methodWindow[29] = gdnative.MethodOf("Window\000", "can_draw\000", 36873697)
		methodWindow[30] = gdnative.MethodOf("Window\000", "has_focus\000", 36873697)
		methodWindow[31] = gdnative.MethodOf("Window\000", "grab_focus\000", 3218959716)
		methodWindow[32] = gdnative.MethodOf("Window\000", "set_ime_active\000", 2586408642)
		methodWindow[33] = gdnative.MethodOf("Window\000", "set_ime_position\000", 1130785943)
		methodWindow[34] = gdnative.MethodOf("Window\000", "is_embedded\000", 36873697)
		methodWindow[35] = gdnative.MethodOf("Window\000", "get_contents_minimum_size\000", 3341600327)
		methodWindow[36] = gdnative.MethodOf("Window\000", "set_content_scale_size\000", 1130785943)
		methodWindow[37] = gdnative.MethodOf("Window\000", "get_content_scale_size\000", 3690982128)
		methodWindow[38] = gdnative.MethodOf("Window\000", "set_content_scale_mode\000", 2937716473)
		methodWindow[39] = gdnative.MethodOf("Window\000", "get_content_scale_mode\000", 161585230)
		methodWindow[40] = gdnative.MethodOf("Window\000", "set_content_scale_aspect\000", 2370399418)
		methodWindow[41] = gdnative.MethodOf("Window\000", "get_content_scale_aspect\000", 4158790715)
		methodWindow[42] = gdnative.MethodOf("Window\000", "set_content_scale_factor\000", 373806689)
		methodWindow[43] = gdnative.MethodOf("Window\000", "get_content_scale_factor\000", 1740695150)
		methodWindow[44] = gdnative.MethodOf("Window\000", "set_use_font_oversampling\000", 2586408642)
		methodWindow[45] = gdnative.MethodOf("Window\000", "is_using_font_oversampling\000", 36873697)
		methodWindow[46] = gdnative.MethodOf("Window\000", "set_wrap_controls\000", 2586408642)
		methodWindow[47] = gdnative.MethodOf("Window\000", "is_wrapping_controls\000", 36873697)
		methodWindow[48] = gdnative.MethodOf("Window\000", "child_controls_changed\000", 3218959716)
		methodWindow[49] = gdnative.MethodOf("Window\000", "set_theme\000", 2326690814)
		methodWindow[50] = gdnative.MethodOf("Window\000", "get_theme\000", 3846893731)
		methodWindow[51] = gdnative.MethodOf("Window\000", "set_theme_type_variation\000", 3304788590)
		methodWindow[52] = gdnative.MethodOf("Window\000", "get_theme_type_variation\000", 2002593661)
		methodWindow[53] = gdnative.MethodOf("Window\000", "get_theme_icon\000", 2336455395)
		methodWindow[54] = gdnative.MethodOf("Window\000", "get_theme_stylebox\000", 2759935355)
		methodWindow[55] = gdnative.MethodOf("Window\000", "get_theme_font\000", 387378635)
		methodWindow[56] = gdnative.MethodOf("Window\000", "get_theme_font_size\000", 229578101)
		methodWindow[57] = gdnative.MethodOf("Window\000", "get_theme_color\000", 2377051548)
		methodWindow[58] = gdnative.MethodOf("Window\000", "get_theme_constant\000", 229578101)
		methodWindow[59] = gdnative.MethodOf("Window\000", "has_theme_icon\000", 1187511791)
		methodWindow[60] = gdnative.MethodOf("Window\000", "has_theme_stylebox\000", 1187511791)
		methodWindow[61] = gdnative.MethodOf("Window\000", "has_theme_font\000", 1187511791)
		methodWindow[62] = gdnative.MethodOf("Window\000", "has_theme_font_size\000", 1187511791)
		methodWindow[63] = gdnative.MethodOf("Window\000", "has_theme_color\000", 1187511791)
		methodWindow[64] = gdnative.MethodOf("Window\000", "has_theme_constant\000", 1187511791)
		methodWindow[65] = gdnative.MethodOf("Window\000", "get_theme_default_base_scale\000", 1740695150)
		methodWindow[66] = gdnative.MethodOf("Window\000", "get_theme_default_font\000", 3229501585)
		methodWindow[67] = gdnative.MethodOf("Window\000", "get_theme_default_font_size\000", 3905245786)
		methodWindow[68] = gdnative.MethodOf("Window\000", "set_layout_direction\000", 3094704184)
		methodWindow[69] = gdnative.MethodOf("Window\000", "get_layout_direction\000", 3909617982)
		methodWindow[70] = gdnative.MethodOf("Window\000", "is_layout_rtl\000", 36873697)
		methodWindow[71] = gdnative.MethodOf("Window\000", "set_auto_translate\000", 2586408642)
		methodWindow[72] = gdnative.MethodOf("Window\000", "is_auto_translating\000", 36873697)
		methodWindow[73] = gdnative.MethodOf("Window\000", "popup\000", 1680304321)
		methodWindow[74] = gdnative.MethodOf("Window\000", "popup_on_parent\000", 1763793166)
		methodWindow[75] = gdnative.MethodOf("Window\000", "popup_centered_ratio\000", 1912078273)
		methodWindow[76] = gdnative.MethodOf("Window\000", "popup_centered\000", 3447975422)
		methodWindow[77] = gdnative.MethodOf("Window\000", "popup_centered_clamped\000", 3728566557)
		methodWorkerThreadPool[0] = gdnative.MethodOf("WorkerThreadPool\000", "add_task\000", 3976347598)
		methodWorkerThreadPool[1] = gdnative.MethodOf("WorkerThreadPool\000", "is_task_completed\000", 1116898809)
		methodWorkerThreadPool[2] = gdnative.MethodOf("WorkerThreadPool\000", "wait_for_task_completion\000", 1286410249)
		methodWorkerThreadPool[3] = gdnative.MethodOf("WorkerThreadPool\000", "add_group_task\000", 2377228549)
		methodWorkerThreadPool[4] = gdnative.MethodOf("WorkerThreadPool\000", "is_group_task_completed\000", 1116898809)
		methodWorkerThreadPool[5] = gdnative.MethodOf("WorkerThreadPool\000", "get_group_processed_element_count\000", 923996154)
		methodWorkerThreadPool[6] = gdnative.MethodOf("WorkerThreadPool\000", "wait_for_group_task_completion\000", 1286410249)
		methodWorld2D[0] = gdnative.MethodOf("World2D\000", "get_canvas\000", 2944877500)
		methodWorld2D[1] = gdnative.MethodOf("World2D\000", "get_space\000", 2944877500)
		methodWorld2D[2] = gdnative.MethodOf("World2D\000", "get_navigation_map\000", 2944877500)
		methodWorld2D[3] = gdnative.MethodOf("World2D\000", "get_direct_space_state\000", 2506717822)
		methodWorld3D[0] = gdnative.MethodOf("World3D\000", "get_space\000", 2944877500)
		methodWorld3D[1] = gdnative.MethodOf("World3D\000", "get_navigation_map\000", 2944877500)
		methodWorld3D[2] = gdnative.MethodOf("World3D\000", "get_scenario\000", 2944877500)
		methodWorld3D[3] = gdnative.MethodOf("World3D\000", "set_environment\000", 4143518816)
		methodWorld3D[4] = gdnative.MethodOf("World3D\000", "get_environment\000", 3082064660)
		methodWorld3D[5] = gdnative.MethodOf("World3D\000", "set_fallback_environment\000", 4143518816)
		methodWorld3D[6] = gdnative.MethodOf("World3D\000", "get_fallback_environment\000", 3082064660)
		methodWorld3D[7] = gdnative.MethodOf("World3D\000", "set_camera_effects\000", 1711096158)
		methodWorld3D[8] = gdnative.MethodOf("World3D\000", "get_camera_effects\000", 2213573967)
		methodWorld3D[9] = gdnative.MethodOf("World3D\000", "get_direct_space_state\000", 2069328350)
		methodWorldBoundaryShape2D[0] = gdnative.MethodOf("WorldBoundaryShape2D\000", "set_normal\000", 743155724)
		methodWorldBoundaryShape2D[1] = gdnative.MethodOf("WorldBoundaryShape2D\000", "get_normal\000", 3341600327)
		methodWorldBoundaryShape2D[2] = gdnative.MethodOf("WorldBoundaryShape2D\000", "set_distance\000", 373806689)
		methodWorldBoundaryShape2D[3] = gdnative.MethodOf("WorldBoundaryShape2D\000", "get_distance\000", 1740695150)
		methodWorldBoundaryShape3D[0] = gdnative.MethodOf("WorldBoundaryShape3D\000", "set_plane\000", 3505987427)
		methodWorldBoundaryShape3D[1] = gdnative.MethodOf("WorldBoundaryShape3D\000", "get_plane\000", 2753500971)
		methodWorldEnvironment[0] = gdnative.MethodOf("WorldEnvironment\000", "set_environment\000", 4143518816)
		methodWorldEnvironment[1] = gdnative.MethodOf("WorldEnvironment\000", "get_environment\000", 3082064660)
		methodWorldEnvironment[2] = gdnative.MethodOf("WorldEnvironment\000", "set_camera_effects\000", 1711096158)
		methodWorldEnvironment[3] = gdnative.MethodOf("WorldEnvironment\000", "get_camera_effects\000", 2213573967)
		methodX509Certificate[0] = gdnative.MethodOf("X509Certificate\000", "save\000", 166001499)
		methodX509Certificate[1] = gdnative.MethodOf("X509Certificate\000", "load\000", 166001499)
		methodXMLParser[0] = gdnative.MethodOf("XMLParser\000", "read\000", 166280745)
		methodXMLParser[1] = gdnative.MethodOf("XMLParser\000", "get_node_type\000", 2984359541)
		methodXMLParser[2] = gdnative.MethodOf("XMLParser\000", "get_node_name\000", 201670096)
		methodXMLParser[3] = gdnative.MethodOf("XMLParser\000", "get_node_data\000", 201670096)
		methodXMLParser[4] = gdnative.MethodOf("XMLParser\000", "get_node_offset\000", 3905245786)
		methodXMLParser[5] = gdnative.MethodOf("XMLParser\000", "get_attribute_count\000", 3905245786)
		methodXMLParser[6] = gdnative.MethodOf("XMLParser\000", "get_attribute_name\000", 844755477)
		methodXMLParser[7] = gdnative.MethodOf("XMLParser\000", "get_attribute_value\000", 844755477)
		methodXMLParser[8] = gdnative.MethodOf("XMLParser\000", "has_attribute\000", 3927539163)
		methodXMLParser[9] = gdnative.MethodOf("XMLParser\000", "get_named_attribute_value\000", 3135753539)
		methodXMLParser[10] = gdnative.MethodOf("XMLParser\000", "get_named_attribute_value_safe\000", 3135753539)
		methodXMLParser[11] = gdnative.MethodOf("XMLParser\000", "is_empty\000", 36873697)
		methodXMLParser[12] = gdnative.MethodOf("XMLParser\000", "get_current_line\000", 3905245786)
		methodXMLParser[13] = gdnative.MethodOf("XMLParser\000", "skip_section\000", 3218959716)
		methodXMLParser[14] = gdnative.MethodOf("XMLParser\000", "seek\000", 844576869)
		methodXMLParser[15] = gdnative.MethodOf("XMLParser\000", "open\000", 166001499)
		methodXMLParser[16] = gdnative.MethodOf("XMLParser\000", "open_buffer\000", 680677267)
		methodXRAnchor3D[0] = gdnative.MethodOf("XRAnchor3D\000", "get_size\000", 3360562783)
		methodXRAnchor3D[1] = gdnative.MethodOf("XRAnchor3D\000", "get_plane\000", 2753500971)
		methodXRController3D[0] = gdnative.MethodOf("XRController3D\000", "is_button_pressed\000", 2619796661)
		methodXRController3D[1] = gdnative.MethodOf("XRController3D\000", "get_value\000", 2349060816)
		methodXRController3D[2] = gdnative.MethodOf("XRController3D\000", "get_axis\000", 3100822709)
		methodXRController3D[3] = gdnative.MethodOf("XRController3D\000", "get_tracker_hand\000", 4181770860)
		methodXRInterface[0] = gdnative.MethodOf("XRInterface\000", "get_name\000", 2002593661)
		methodXRInterface[1] = gdnative.MethodOf("XRInterface\000", "get_capabilities\000", 3905245786)
		methodXRInterface[2] = gdnative.MethodOf("XRInterface\000", "is_primary\000", 2240911060)
		methodXRInterface[3] = gdnative.MethodOf("XRInterface\000", "set_primary\000", 2586408642)
		methodXRInterface[4] = gdnative.MethodOf("XRInterface\000", "is_initialized\000", 36873697)
		methodXRInterface[5] = gdnative.MethodOf("XRInterface\000", "initialize\000", 2240911060)
		methodXRInterface[6] = gdnative.MethodOf("XRInterface\000", "uninitialize\000", 3218959716)
		methodXRInterface[7] = gdnative.MethodOf("XRInterface\000", "get_tracking_status\000", 167423259)
		methodXRInterface[8] = gdnative.MethodOf("XRInterface\000", "get_render_target_size\000", 1497962370)
		methodXRInterface[9] = gdnative.MethodOf("XRInterface\000", "get_view_count\000", 2455072627)
		methodXRInterface[10] = gdnative.MethodOf("XRInterface\000", "trigger_haptic_pulse\000", 3752640163)
		methodXRInterface[11] = gdnative.MethodOf("XRInterface\000", "supports_play_area_mode\000", 3429955281)
		methodXRInterface[12] = gdnative.MethodOf("XRInterface\000", "get_play_area_mode\000", 1615132885)
		methodXRInterface[13] = gdnative.MethodOf("XRInterface\000", "set_play_area_mode\000", 3429955281)
		methodXRInterface[14] = gdnative.MethodOf("XRInterface\000", "get_play_area\000", 497664490)
		methodXRInterface[15] = gdnative.MethodOf("XRInterface\000", "get_anchor_detection_is_enabled\000", 36873697)
		methodXRInterface[16] = gdnative.MethodOf("XRInterface\000", "set_anchor_detection_is_enabled\000", 2586408642)
		methodXRInterface[17] = gdnative.MethodOf("XRInterface\000", "get_camera_feed_id\000", 2455072627)
		methodXRInterfaceExtension[0] = gdnative.MethodOf("XRInterfaceExtension\000", "add_blit\000", 258596971)
		methodXRInterfaceExtension[1] = gdnative.MethodOf("XRInterfaceExtension\000", "get_render_target_texture\000", 41030802)
		methodXRNode3D[0] = gdnative.MethodOf("XRNode3D\000", "set_tracker\000", 3304788590)
		methodXRNode3D[1] = gdnative.MethodOf("XRNode3D\000", "get_tracker\000", 2002593661)
		methodXRNode3D[2] = gdnative.MethodOf("XRNode3D\000", "set_pose_name\000", 3304788590)
		methodXRNode3D[3] = gdnative.MethodOf("XRNode3D\000", "get_pose_name\000", 2002593661)
		methodXRNode3D[4] = gdnative.MethodOf("XRNode3D\000", "get_is_active\000", 36873697)
		methodXRNode3D[5] = gdnative.MethodOf("XRNode3D\000", "get_has_tracking_data\000", 36873697)
		methodXRNode3D[6] = gdnative.MethodOf("XRNode3D\000", "get_pose\000", 2806551826)
		methodXRNode3D[7] = gdnative.MethodOf("XRNode3D\000", "trigger_haptic_pulse\000", 508576839)
		methodXROrigin3D[0] = gdnative.MethodOf("XROrigin3D\000", "set_world_scale\000", 373806689)
		methodXROrigin3D[1] = gdnative.MethodOf("XROrigin3D\000", "get_world_scale\000", 1740695150)
		methodXRPose[0] = gdnative.MethodOf("XRPose\000", "set_has_tracking_data\000", 2586408642)
		methodXRPose[1] = gdnative.MethodOf("XRPose\000", "get_has_tracking_data\000", 36873697)
		methodXRPose[2] = gdnative.MethodOf("XRPose\000", "set_name\000", 3304788590)
		methodXRPose[3] = gdnative.MethodOf("XRPose\000", "get_name\000", 2002593661)
		methodXRPose[4] = gdnative.MethodOf("XRPose\000", "set_transform\000", 2952846383)
		methodXRPose[5] = gdnative.MethodOf("XRPose\000", "get_transform\000", 3229777777)
		methodXRPose[6] = gdnative.MethodOf("XRPose\000", "get_adjusted_transform\000", 3229777777)
		methodXRPose[7] = gdnative.MethodOf("XRPose\000", "set_linear_velocity\000", 3460891852)
		methodXRPose[8] = gdnative.MethodOf("XRPose\000", "get_linear_velocity\000", 3360562783)
		methodXRPose[9] = gdnative.MethodOf("XRPose\000", "set_angular_velocity\000", 3460891852)
		methodXRPose[10] = gdnative.MethodOf("XRPose\000", "get_angular_velocity\000", 3360562783)
		methodXRPose[11] = gdnative.MethodOf("XRPose\000", "set_tracking_confidence\000", 4171656666)
		methodXRPose[12] = gdnative.MethodOf("XRPose\000", "get_tracking_confidence\000", 2064923680)
		methodXRPositionalTracker[0] = gdnative.MethodOf("XRPositionalTracker\000", "get_tracker_type\000", 2784508102)
		methodXRPositionalTracker[1] = gdnative.MethodOf("XRPositionalTracker\000", "set_tracker_type\000", 3055763575)
		methodXRPositionalTracker[2] = gdnative.MethodOf("XRPositionalTracker\000", "get_tracker_name\000", 2002593661)
		methodXRPositionalTracker[3] = gdnative.MethodOf("XRPositionalTracker\000", "set_tracker_name\000", 3304788590)
		methodXRPositionalTracker[4] = gdnative.MethodOf("XRPositionalTracker\000", "get_tracker_desc\000", 201670096)
		methodXRPositionalTracker[5] = gdnative.MethodOf("XRPositionalTracker\000", "set_tracker_desc\000", 83702148)
		methodXRPositionalTracker[6] = gdnative.MethodOf("XRPositionalTracker\000", "get_tracker_profile\000", 201670096)
		methodXRPositionalTracker[7] = gdnative.MethodOf("XRPositionalTracker\000", "set_tracker_profile\000", 83702148)
		methodXRPositionalTracker[8] = gdnative.MethodOf("XRPositionalTracker\000", "get_tracker_hand\000", 4181770860)
		methodXRPositionalTracker[9] = gdnative.MethodOf("XRPositionalTracker\000", "set_tracker_hand\000", 3904108980)
		methodXRPositionalTracker[10] = gdnative.MethodOf("XRPositionalTracker\000", "has_pose\000", 2619796661)
		methodXRPositionalTracker[11] = gdnative.MethodOf("XRPositionalTracker\000", "get_pose\000", 4099720006)
		methodXRPositionalTracker[12] = gdnative.MethodOf("XRPositionalTracker\000", "invalidate_pose\000", 3304788590)
		methodXRPositionalTracker[13] = gdnative.MethodOf("XRPositionalTracker\000", "set_pose\000", 3451230163)
		methodXRPositionalTracker[14] = gdnative.MethodOf("XRPositionalTracker\000", "get_input\000", 2760726917)
		methodXRPositionalTracker[15] = gdnative.MethodOf("XRPositionalTracker\000", "set_input\000", 3776071444)
		methodXRServer[0] = gdnative.MethodOf("XRServer\000", "get_world_scale\000", 1740695150)
		methodXRServer[1] = gdnative.MethodOf("XRServer\000", "set_world_scale\000", 373806689)
		methodXRServer[2] = gdnative.MethodOf("XRServer\000", "get_reference_frame\000", 3229777777)
		methodXRServer[3] = gdnative.MethodOf("XRServer\000", "center_on_hmd\000", 1450904707)
		methodXRServer[4] = gdnative.MethodOf("XRServer\000", "get_hmd_transform\000", 4183770049)
		methodXRServer[5] = gdnative.MethodOf("XRServer\000", "add_interface\000", 1898711491)
		methodXRServer[6] = gdnative.MethodOf("XRServer\000", "get_interface_count\000", 3905245786)
		methodXRServer[7] = gdnative.MethodOf("XRServer\000", "remove_interface\000", 1898711491)
		methodXRServer[8] = gdnative.MethodOf("XRServer\000", "get_interface\000", 4237347919)
		methodXRServer[9] = gdnative.MethodOf("XRServer\000", "get_interfaces\000", 3995934104)
		methodXRServer[10] = gdnative.MethodOf("XRServer\000", "find_interface\000", 1395192955)
		methodXRServer[11] = gdnative.MethodOf("XRServer\000", "add_tracker\000", 2692800323)
		methodXRServer[12] = gdnative.MethodOf("XRServer\000", "remove_tracker\000", 2692800323)
		methodXRServer[13] = gdnative.MethodOf("XRServer\000", "get_trackers\000", 3554694381)
		methodXRServer[14] = gdnative.MethodOf("XRServer\000", "get_tracker\000", 2742084544)
		methodXRServer[15] = gdnative.MethodOf("XRServer\000", "get_primary_interface\000", 2143545064)
		methodXRServer[16] = gdnative.MethodOf("XRServer\000", "set_primary_interface\000", 1898711491)
	})
}