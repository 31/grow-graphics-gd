//go:build !generate

// Code generated by the generate package DO NOT EDIT
package gd

import "reflect"

type Side int64

const (
	SideLeft Side = 0
	SideTop Side = 1
	SideRight Side = 2
	SideBottom Side = 3
)

type Corner int64

const (
	CornerTopLeft Corner = 0
	CornerTopRight Corner = 1
	CornerBottomRight Corner = 2
	CornerBottomLeft Corner = 3
)

type Orientation int64

const (
	Vertical Orientation = 1
	Horizontal Orientation = 0
)

type ClockDirection int64

const (
	Clockwise ClockDirection = 0
	Counterclockwise ClockDirection = 1
)

type HorizontalAlignment int64

const (
	HorizontalAlignmentLeft HorizontalAlignment = 0
	HorizontalAlignmentCenter HorizontalAlignment = 1
	HorizontalAlignmentRight HorizontalAlignment = 2
	HorizontalAlignmentFill HorizontalAlignment = 3
)

type VerticalAlignment int64

const (
	VerticalAlignmentTop VerticalAlignment = 0
	VerticalAlignmentCenter VerticalAlignment = 1
	VerticalAlignmentBottom VerticalAlignment = 2
	VerticalAlignmentFill VerticalAlignment = 3
)

type InlineAlignment int64

const (
	InlineAlignmentTopTo InlineAlignment = 0
	InlineAlignmentCenterTo InlineAlignment = 1
	InlineAlignmentBottomTo InlineAlignment = 2
	InlineAlignmentToTop InlineAlignment = 0
	InlineAlignmentToCenter InlineAlignment = 4
	InlineAlignmentToBaseline InlineAlignment = 8
	InlineAlignmentToBottom InlineAlignment = 12
	InlineAlignmentTop InlineAlignment = 0
	InlineAlignmentCenter InlineAlignment = 5
	InlineAlignmentBottom InlineAlignment = 14
	InlineAlignmentImageMask InlineAlignment = 3
	InlineAlignmentTextMask InlineAlignment = 12
)

type Key int64

const (
	KeyNone Key = 0
	KeySpecial Key = 16777216
	KeyEscape Key = 16777217
	KeyTab Key = 16777218
	KeyBacktab Key = 16777219
	KeyBackspace Key = 16777220
	KeyEnter Key = 16777221
	KeyKpEnter Key = 16777222
	KeyInsert Key = 16777223
	KeyDelete Key = 16777224
	KeyPause Key = 16777225
	KeyPrint Key = 16777226
	KeySysreq Key = 16777227
	KeyClear Key = 16777228
	KeyHome Key = 16777229
	KeyEnd Key = 16777230
	KeyLeft Key = 16777231
	KeyUp Key = 16777232
	KeyRight Key = 16777233
	KeyDown Key = 16777234
	KeyPageup Key = 16777235
	KeyPagedown Key = 16777236
	KeyShift Key = 16777237
	KeyCtrl Key = 16777238
	KeyMeta Key = 16777239
	KeyAlt Key = 16777240
	KeyCapslock Key = 16777241
	KeyNumlock Key = 16777242
	KeyScrolllock Key = 16777243
	KeyF1 Key = 16777244
	KeyF2 Key = 16777245
	KeyF3 Key = 16777246
	KeyF4 Key = 16777247
	KeyF5 Key = 16777248
	KeyF6 Key = 16777249
	KeyF7 Key = 16777250
	KeyF8 Key = 16777251
	KeyF9 Key = 16777252
	KeyF10 Key = 16777253
	KeyF11 Key = 16777254
	KeyF12 Key = 16777255
	KeyF13 Key = 16777256
	KeyF14 Key = 16777257
	KeyF15 Key = 16777258
	KeyF16 Key = 16777259
	KeyF17 Key = 16777260
	KeyF18 Key = 16777261
	KeyF19 Key = 16777262
	KeyF20 Key = 16777263
	KeyF21 Key = 16777264
	KeyF22 Key = 16777265
	KeyF23 Key = 16777266
	KeyF24 Key = 16777267
	KeyF25 Key = 16777268
	KeyF26 Key = 16777269
	KeyF27 Key = 16777270
	KeyF28 Key = 16777271
	KeyF29 Key = 16777272
	KeyF30 Key = 16777273
	KeyF31 Key = 16777274
	KeyF32 Key = 16777275
	KeyF33 Key = 16777276
	KeyF34 Key = 16777277
	KeyF35 Key = 16777278
	KeyKpMultiply Key = 16777345
	KeyKpDivide Key = 16777346
	KeyKpSubtract Key = 16777347
	KeyKpPeriod Key = 16777348
	KeyKpAdd Key = 16777349
	KeyKp0 Key = 16777350
	KeyKp1 Key = 16777351
	KeyKp2 Key = 16777352
	KeyKp3 Key = 16777353
	KeyKp4 Key = 16777354
	KeyKp5 Key = 16777355
	KeyKp6 Key = 16777356
	KeyKp7 Key = 16777357
	KeyKp8 Key = 16777358
	KeyKp9 Key = 16777359
	KeySuperL Key = 16777280
	KeySuperR Key = 16777281
	KeyMenu Key = 16777282
	KeyHyperL Key = 16777283
	KeyHyperR Key = 16777284
	KeyHelp Key = 16777285
	KeyDirectionL Key = 16777286
	KeyDirectionR Key = 16777287
	KeyBack Key = 16777288
	KeyForward Key = 16777289
	KeyStop Key = 16777290
	KeyRefresh Key = 16777291
	KeyVolumedown Key = 16777292
	KeyVolumemute Key = 16777293
	KeyVolumeup Key = 16777294
	KeyBassboost Key = 16777295
	KeyBassup Key = 16777296
	KeyBassdown Key = 16777297
	KeyTrebleup Key = 16777298
	KeyTrebledown Key = 16777299
	KeyMediaplay Key = 16777300
	KeyMediastop Key = 16777301
	KeyMediaprevious Key = 16777302
	KeyMedianext Key = 16777303
	KeyMediarecord Key = 16777304
	KeyHomepage Key = 16777305
	KeyFavorites Key = 16777306
	KeySearch Key = 16777307
	KeyStandby Key = 16777308
	KeyOpenurl Key = 16777309
	KeyLaunchmail Key = 16777310
	KeyLaunchmedia Key = 16777311
	KeyLaunch0 Key = 16777312
	KeyLaunch1 Key = 16777313
	KeyLaunch2 Key = 16777314
	KeyLaunch3 Key = 16777315
	KeyLaunch4 Key = 16777316
	KeyLaunch5 Key = 16777317
	KeyLaunch6 Key = 16777318
	KeyLaunch7 Key = 16777319
	KeyLaunch8 Key = 16777320
	KeyLaunch9 Key = 16777321
	KeyLauncha Key = 16777322
	KeyLaunchb Key = 16777323
	KeyLaunchc Key = 16777324
	KeyLaunchd Key = 16777325
	KeyLaunche Key = 16777326
	KeyLaunchf Key = 16777327
	KeyUnknown Key = 33554431
	KeySpace Key = 32
	KeyExclam Key = 33
	KeyQuotedbl Key = 34
	KeyNumbersign Key = 35
	KeyDollar Key = 36
	KeyPercent Key = 37
	KeyAmpersand Key = 38
	KeyApostrophe Key = 39
	KeyParenleft Key = 40
	KeyParenright Key = 41
	KeyAsterisk Key = 42
	KeyPlus Key = 43
	KeyComma Key = 44
	KeyMinus Key = 45
	KeyPeriod Key = 46
	KeySlash Key = 47
	Key0 Key = 48
	Key1 Key = 49
	Key2 Key = 50
	Key3 Key = 51
	Key4 Key = 52
	Key5 Key = 53
	Key6 Key = 54
	Key7 Key = 55
	Key8 Key = 56
	Key9 Key = 57
	KeyColon Key = 58
	KeySemicolon Key = 59
	KeyLess Key = 60
	KeyEqual Key = 61
	KeyGreater Key = 62
	KeyQuestion Key = 63
	KeyAt Key = 64
	KeyA Key = 65
	KeyB Key = 66
	KeyC Key = 67
	KeyD Key = 68
	KeyE Key = 69
	KeyF Key = 70
	KeyG Key = 71
	KeyH Key = 72
	KeyI Key = 73
	KeyJ Key = 74
	KeyK Key = 75
	KeyL Key = 76
	KeyM Key = 77
	KeyN Key = 78
	KeyO Key = 79
	KeyP Key = 80
	KeyQ Key = 81
	KeyR Key = 82
	KeyS Key = 83
	KeyT Key = 84
	KeyU Key = 85
	KeyV Key = 86
	KeyW Key = 87
	KeyX Key = 88
	KeyY Key = 89
	KeyZ Key = 90
	KeyBracketleft Key = 91
	KeyBackslash Key = 92
	KeyBracketright Key = 93
	KeyAsciicircum Key = 94
	KeyUnderscore Key = 95
	KeyQuoteleft Key = 96
	KeyBraceleft Key = 123
	KeyBar Key = 124
	KeyBraceright Key = 125
	KeyAsciitilde Key = 126
	KeyNobreakspace Key = 160
	KeyExclamdown Key = 161
	KeyCent Key = 162
	KeySterling Key = 163
	KeyCurrency Key = 164
	KeyYen Key = 165
	KeyBrokenbar Key = 166
	KeySection Key = 167
	KeyDiaeresis Key = 168
	KeyCopyright Key = 169
	KeyOrdfeminine Key = 170
	KeyGuillemotleft Key = 171
	KeyNotsign Key = 172
	KeyHyphen Key = 173
	KeyRegistered Key = 174
	KeyMacron Key = 175
	KeyDegree Key = 176
	KeyPlusminus Key = 177
	KeyTwosuperior Key = 178
	KeyThreesuperior Key = 179
	KeyAcute Key = 180
	KeyMu Key = 181
	KeyParagraph Key = 182
	KeyPeriodcentered Key = 183
	KeyCedilla Key = 184
	KeyOnesuperior Key = 185
	KeyMasculine Key = 186
	KeyGuillemotright Key = 187
	KeyOnequarter Key = 188
	KeyOnehalf Key = 189
	KeyThreequarters Key = 190
	KeyQuestiondown Key = 191
	KeyAgrave Key = 192
	KeyAacute Key = 193
	KeyAcircumflex Key = 194
	KeyAtilde Key = 195
	KeyAdiaeresis Key = 196
	KeyAring Key = 197
	KeyAe Key = 198
	KeyCcedilla Key = 199
	KeyEgrave Key = 200
	KeyEacute Key = 201
	KeyEcircumflex Key = 202
	KeyEdiaeresis Key = 203
	KeyIgrave Key = 204
	KeyIacute Key = 205
	KeyIcircumflex Key = 206
	KeyIdiaeresis Key = 207
	KeyEth Key = 208
	KeyNtilde Key = 209
	KeyOgrave Key = 210
	KeyOacute Key = 211
	KeyOcircumflex Key = 212
	KeyOtilde Key = 213
	KeyOdiaeresis Key = 214
	KeyMultiply Key = 215
	KeyOoblique Key = 216
	KeyUgrave Key = 217
	KeyUacute Key = 218
	KeyUcircumflex Key = 219
	KeyUdiaeresis Key = 220
	KeyYacute Key = 221
	KeyThorn Key = 222
	KeySsharp Key = 223
	KeyDivision Key = 247
	KeyYdiaeresis Key = 255
)

type KeyModifierMask int64

const (
	KeyCodeMask KeyModifierMask = 33554431
	KeyModifierMaskDefault KeyModifierMask = 2130706432
	KeyMaskShift KeyModifierMask = 33554432
	KeyMaskAlt KeyModifierMask = 67108864
	KeyMaskMeta KeyModifierMask = 134217728
	KeyMaskCtrl KeyModifierMask = 268435456
	KeyMaskCmd KeyModifierMask = 268435456
	KeyMaskKpad KeyModifierMask = 536870912
	KeyMaskGroupSwitch KeyModifierMask = 1073741824
)

type MouseButton int64

const (
	MouseButtonNone MouseButton = 0
	MouseButtonLeft MouseButton = 1
	MouseButtonRight MouseButton = 2
	MouseButtonMiddle MouseButton = 3
	MouseButtonWheelUp MouseButton = 4
	MouseButtonWheelDown MouseButton = 5
	MouseButtonWheelLeft MouseButton = 6
	MouseButtonWheelRight MouseButton = 7
	MouseButtonXbutton1 MouseButton = 8
	MouseButtonXbutton2 MouseButton = 9
	MouseButtonMaskLeft MouseButton = 1
	MouseButtonMaskRight MouseButton = 2
	MouseButtonMaskMiddle MouseButton = 4
	MouseButtonMaskXbutton1 MouseButton = 128
	MouseButtonMaskXbutton2 MouseButton = 256
)

type JoyButton int64

const (
	JoyButtonInvalid JoyButton = -1
	JoyButtonA JoyButton = 0
	JoyButtonB JoyButton = 1
	JoyButtonX JoyButton = 2
	JoyButtonY JoyButton = 3
	JoyButtonBack JoyButton = 4
	JoyButtonGuide JoyButton = 5
	JoyButtonStart JoyButton = 6
	JoyButtonLeftStick JoyButton = 7
	JoyButtonRightStick JoyButton = 8
	JoyButtonLeftShoulder JoyButton = 9
	JoyButtonRightShoulder JoyButton = 10
	JoyButtonDpadUp JoyButton = 11
	JoyButtonDpadDown JoyButton = 12
	JoyButtonDpadLeft JoyButton = 13
	JoyButtonDpadRight JoyButton = 14
	JoyButtonMisc1 JoyButton = 15
	JoyButtonPaddle1 JoyButton = 16
	JoyButtonPaddle2 JoyButton = 17
	JoyButtonPaddle3 JoyButton = 18
	JoyButtonPaddle4 JoyButton = 19
	JoyButtonTouchpad JoyButton = 20
	JoyButtonSdlMax JoyButton = 21
	JoyButtonMax JoyButton = 128
)

type JoyAxis int64

const (
	JoyAxisInvalid JoyAxis = -1
	JoyAxisLeftX JoyAxis = 0
	JoyAxisLeftY JoyAxis = 1
	JoyAxisRightX JoyAxis = 2
	JoyAxisRightY JoyAxis = 3
	JoyAxisTriggerLeft JoyAxis = 4
	JoyAxisTriggerRight JoyAxis = 5
	JoyAxisSdlMax JoyAxis = 6
	JoyAxisMax JoyAxis = 10
)

type MIDIMessage int64

const (
	MidiMessageNone MIDIMessage = 0
	MidiMessageNoteOff MIDIMessage = 8
	MidiMessageNoteOn MIDIMessage = 9
	MidiMessageAftertouch MIDIMessage = 10
	MidiMessageControlChange MIDIMessage = 11
	MidiMessageProgramChange MIDIMessage = 12
	MidiMessageChannelPressure MIDIMessage = 13
	MidiMessagePitchBend MIDIMessage = 14
	MidiMessageSystemExclusive MIDIMessage = 240
	MidiMessageQuarterFrame MIDIMessage = 241
	MidiMessageSongPositionPointer MIDIMessage = 242
	MidiMessageSongSelect MIDIMessage = 243
	MidiMessageTuneRequest MIDIMessage = 246
	MidiMessageTimingClock MIDIMessage = 248
	MidiMessageStart MIDIMessage = 250
	MidiMessageContinue MIDIMessage = 251
	MidiMessageStop MIDIMessage = 252
	MidiMessageActiveSensing MIDIMessage = 254
	MidiMessageSystemReset MIDIMessage = 255
)

type Error int64

const (
	Ok Error = 0
	Failed Error = 1
	ErrUnavailable Error = 2
	ErrUnconfigured Error = 3
	ErrUnauthorized Error = 4
	ErrParameterRangeError Error = 5
	ErrOutOfMemory Error = 6
	ErrFileNotFound Error = 7
	ErrFileBadDrive Error = 8
	ErrFileBadPath Error = 9
	ErrFileNoPermission Error = 10
	ErrFileAlreadyInUse Error = 11
	ErrFileCantOpen Error = 12
	ErrFileCantWrite Error = 13
	ErrFileCantRead Error = 14
	ErrFileUnrecognized Error = 15
	ErrFileCorrupt Error = 16
	ErrFileMissingDependencies Error = 17
	ErrFileEof Error = 18
	ErrCantOpen Error = 19
	ErrCantCreate Error = 20
	ErrQueryFailed Error = 21
	ErrAlreadyInUse Error = 22
	ErrLocked Error = 23
	ErrTimeout Error = 24
	ErrCantConnect Error = 25
	ErrCantResolve Error = 26
	ErrConnectionError Error = 27
	ErrCantAcquireResource Error = 28
	ErrCantFork Error = 29
	ErrInvalidData Error = 30
	ErrInvalidParameter Error = 31
	ErrAlreadyExists Error = 32
	ErrDoesNotExist Error = 33
	ErrDatabaseCantRead Error = 34
	ErrDatabaseCantWrite Error = 35
	ErrCompilationFailed Error = 36
	ErrMethodNotFound Error = 37
	ErrLinkFailed Error = 38
	ErrScriptFailed Error = 39
	ErrCyclicLink Error = 40
	ErrInvalidDeclaration Error = 41
	ErrDuplicateSymbol Error = 42
	ErrParseError Error = 43
	ErrBusy Error = 44
	ErrSkip Error = 45
	ErrHelp Error = 46
	ErrBug Error = 47
	ErrPrinterOnFire Error = 48
)

type PropertyHint int64

const (
	PropertyHintNone PropertyHint = 0
	PropertyHintRange PropertyHint = 1
	PropertyHintEnum PropertyHint = 2
	PropertyHintEnumSuggestion PropertyHint = 3
	PropertyHintExpEasing PropertyHint = 4
	PropertyHintLink PropertyHint = 5
	PropertyHintFlags PropertyHint = 6
	PropertyHintLayers2dRender PropertyHint = 7
	PropertyHintLayers2dPhysics PropertyHint = 8
	PropertyHintLayers2dNavigation PropertyHint = 9
	PropertyHintLayers3dRender PropertyHint = 10
	PropertyHintLayers3dPhysics PropertyHint = 11
	PropertyHintLayers3dNavigation PropertyHint = 12
	PropertyHintFile PropertyHint = 13
	PropertyHintDir PropertyHint = 14
	PropertyHintGlobalFile PropertyHint = 15
	PropertyHintGlobalDir PropertyHint = 16
	PropertyHintResourceType PropertyHint = 17
	PropertyHintMultilineText PropertyHint = 18
	PropertyHintExpression PropertyHint = 19
	PropertyHintPlaceholderText PropertyHint = 20
	PropertyHintColorNoAlpha PropertyHint = 21
	PropertyHintImageCompressLossy PropertyHint = 22
	PropertyHintImageCompressLossless PropertyHint = 23
	PropertyHintObjectId PropertyHint = 24
	PropertyHintTypeString PropertyHint = 25
	PropertyHintNodePathToEditedNode PropertyHint = 26
	PropertyHintMethodOfVariantType PropertyHint = 27
	PropertyHintMethodOfBaseType PropertyHint = 28
	PropertyHintMethodOfInstance PropertyHint = 29
	PropertyHintMethodOfScript PropertyHint = 30
	PropertyHintPropertyOfVariantType PropertyHint = 31
	PropertyHintPropertyOfBaseType PropertyHint = 32
	PropertyHintPropertyOfInstance PropertyHint = 33
	PropertyHintPropertyOfScript PropertyHint = 34
	PropertyHintObjectTooBig PropertyHint = 35
	PropertyHintNodePathValidTypes PropertyHint = 36
	PropertyHintSaveFile PropertyHint = 37
	PropertyHintGlobalSaveFile PropertyHint = 38
	PropertyHintIntIsObjectid PropertyHint = 39
	PropertyHintIntIsPointer PropertyHint = 41
	PropertyHintArrayType PropertyHint = 40
	PropertyHintLocaleId PropertyHint = 42
	PropertyHintLocalizableString PropertyHint = 43
	PropertyHintNodeType PropertyHint = 44
	PropertyHintHideQuaternionEdit PropertyHint = 45
	PropertyHintPassword PropertyHint = 46
	PropertyHintMax PropertyHint = 47
)

type PropertyUsageFlags int64

const (
	PropertyUsageNone PropertyUsageFlags = 0
	PropertyUsageStorage PropertyUsageFlags = 2
	PropertyUsageEditor PropertyUsageFlags = 4
	PropertyUsageCheckable PropertyUsageFlags = 8
	PropertyUsageChecked PropertyUsageFlags = 16
	PropertyUsageInternationalized PropertyUsageFlags = 32
	PropertyUsageGroup PropertyUsageFlags = 64
	PropertyUsageCategory PropertyUsageFlags = 128
	PropertyUsageSubgroup PropertyUsageFlags = 256
	PropertyUsageClassIsBitfield PropertyUsageFlags = 512
	PropertyUsageNoInstanceState PropertyUsageFlags = 1024
	PropertyUsageRestartIfChanged PropertyUsageFlags = 2048
	PropertyUsageScriptVariable PropertyUsageFlags = 4096
	PropertyUsageStoreIfNull PropertyUsageFlags = 8192
	PropertyUsageAnimateAsTrigger PropertyUsageFlags = 16384
	PropertyUsageUpdateAllIfModified PropertyUsageFlags = 32768
	PropertyUsageScriptDefaultValue PropertyUsageFlags = 65536
	PropertyUsageClassIsEnum PropertyUsageFlags = 131072
	PropertyUsageNilIsVariant PropertyUsageFlags = 262144
	PropertyUsageInternal PropertyUsageFlags = 524288
	PropertyUsageDoNotShareOnDuplicate PropertyUsageFlags = 1048576
	PropertyUsageHighEndGfx PropertyUsageFlags = 2097152
	PropertyUsageNodePathFromSceneRoot PropertyUsageFlags = 4194304
	PropertyUsageResourceNotPersistent PropertyUsageFlags = 8388608
	PropertyUsageKeyingIncrements PropertyUsageFlags = 16777216
	PropertyUsageDeferredSetResource PropertyUsageFlags = 33554432
	PropertyUsageEditorInstantiateObject PropertyUsageFlags = 67108864
	PropertyUsageEditorBasicSetting PropertyUsageFlags = 134217728
	PropertyUsageArray PropertyUsageFlags = 536870912
	PropertyUsageDefault PropertyUsageFlags = 6
	PropertyUsageDefaultIntl PropertyUsageFlags = 38
	PropertyUsageNoEditor PropertyUsageFlags = 2
)

type MethodFlags int64

const (
	MethodFlagNormal MethodFlags = 1
	MethodFlagEditor MethodFlags = 2
	MethodFlagConst MethodFlags = 4
	MethodFlagVirtual MethodFlags = 8
	MethodFlagVararg MethodFlags = 16
	MethodFlagStatic MethodFlags = 32
	MethodFlagObjectCore MethodFlags = 64
	MethodFlagsDefault MethodFlags = 1
)

type VariantType int64

const (
	TypeNil VariantType = 0
	TypeBool VariantType = 1
	TypeInt VariantType = 2
	TypeFloat VariantType = 3
	TypeString VariantType = 4
	TypeVector2 VariantType = 5
	TypeVector2i VariantType = 6
	TypeRect2 VariantType = 7
	TypeRect2i VariantType = 8
	TypeVector3 VariantType = 9
	TypeVector3i VariantType = 10
	TypeTransform2d VariantType = 11
	TypeVector4 VariantType = 12
	TypeVector4i VariantType = 13
	TypePlane VariantType = 14
	TypeQuaternion VariantType = 15
	TypeAabb VariantType = 16
	TypeBasis VariantType = 17
	TypeTransform3d VariantType = 18
	TypeProjection VariantType = 19
	TypeColor VariantType = 20
	TypeStringName VariantType = 21
	TypeNodePath VariantType = 22
	TypeRid VariantType = 23
	TypeObject VariantType = 24
	TypeCallable VariantType = 25
	TypeSignal VariantType = 26
	TypeDictionary VariantType = 27
	TypeArray VariantType = 28
	TypePackedByteArray VariantType = 29
	TypePackedInt32Array VariantType = 30
	TypePackedInt64Array VariantType = 31
	TypePackedFloat32Array VariantType = 32
	TypePackedFloat64Array VariantType = 33
	TypePackedStringArray VariantType = 34
	TypePackedVector2Array VariantType = 35
	TypePackedVector3Array VariantType = 36
	TypePackedColorArray VariantType = 37
	TypeMax VariantType = 38
)

type VariantOperator int64

const (
	OpEqual VariantOperator = 0
	OpNotEqual VariantOperator = 1
	OpLess VariantOperator = 2
	OpLessEqual VariantOperator = 3
	OpGreater VariantOperator = 4
	OpGreaterEqual VariantOperator = 5
	OpAdd VariantOperator = 6
	OpSubtract VariantOperator = 7
	OpMultiply VariantOperator = 8
	OpDivide VariantOperator = 9
	OpNegate VariantOperator = 10
	OpPositive VariantOperator = 11
	OpModule VariantOperator = 12
	OpPower VariantOperator = 13
	OpShiftLeft VariantOperator = 14
	OpShiftRight VariantOperator = 15
	OpBitAnd VariantOperator = 16
	OpBitOr VariantOperator = 17
	OpBitXor VariantOperator = 18
	OpBitNegate VariantOperator = 19
	OpAnd VariantOperator = 20
	OpOr VariantOperator = 21
	OpXor VariantOperator = 22
	OpNot VariantOperator = 23
	OpIn VariantOperator = 24
	OpMax VariantOperator = 25
)
var utilities [102]cUtilityFunction
func Sin(angle_rad float64) float64 {return utilityCall[float64](utilities[0], &angle_rad) }
func Cos(angle_rad float64) float64 {return utilityCall[float64](utilities[1], &angle_rad) }
func Tan(angle_rad float64) float64 {return utilityCall[float64](utilities[2], &angle_rad) }
func Sinh(x float64) float64 {return utilityCall[float64](utilities[3], &x) }
func Cosh(x float64) float64 {return utilityCall[float64](utilities[4], &x) }
func Tanh(x float64) float64 {return utilityCall[float64](utilities[5], &x) }
func Asin(x float64) float64 {return utilityCall[float64](utilities[6], &x) }
func Acos(x float64) float64 {return utilityCall[float64](utilities[7], &x) }
func Atan(x float64) float64 {return utilityCall[float64](utilities[8], &x) }
func Atan2(y float64, x float64) float64 {return utilityCall[float64](utilities[9], &y, &x) }
func Sqrt(x float64) float64 {return utilityCall[float64](utilities[10], &x) }
func Fmod(x float64, y float64) float64 {return utilityCall[float64](utilities[11], &x, &y) }
func Fposmod(x float64, y float64) float64 {return utilityCall[float64](utilities[12], &x, &y) }
func Posmod(x int64, y int64) int64 {return utilityCall[int64](utilities[13], &x, &y) }
func Floor(x any) any {return utilityCall[any](utilities[14], &x) }
func Floorf(x float64) float64 {return utilityCall[float64](utilities[15], &x) }
func Floori(x float64) int64 {return utilityCall[int64](utilities[16], &x) }
func Ceil(x any) any {return utilityCall[any](utilities[17], &x) }
func Ceilf(x float64) float64 {return utilityCall[float64](utilities[18], &x) }
func Ceili(x float64) int64 {return utilityCall[int64](utilities[19], &x) }
func Round(x any) any {return utilityCall[any](utilities[20], &x) }
func Roundf(x float64) float64 {return utilityCall[float64](utilities[21], &x) }
func Roundi(x float64) int64 {return utilityCall[int64](utilities[22], &x) }
func Abs(x any) any {return utilityCall[any](utilities[23], &x) }
func Absf(x float64) float64 {return utilityCall[float64](utilities[24], &x) }
func Absi(x int64) int64 {return utilityCall[int64](utilities[25], &x) }
func Sign(x any) any {return utilityCall[any](utilities[26], &x) }
func Signf(x float64) float64 {return utilityCall[float64](utilities[27], &x) }
func Signi(x int64) int64 {return utilityCall[int64](utilities[28], &x) }
func Pow(base float64, exp float64) float64 {return utilityCall[float64](utilities[29], &base, &exp) }
func Log(x float64) float64 {return utilityCall[float64](utilities[30], &x) }
func Exp(x float64) float64 {return utilityCall[float64](utilities[31], &x) }
func IsNan(x float64) bool {return utilityCall[bool](utilities[32], &x) }
func IsInf(x float64) bool {return utilityCall[bool](utilities[33], &x) }
func IsEqualApprox(a float64, b float64) bool {return utilityCall[bool](utilities[34], &a, &b) }
func IsZeroApprox(x float64) bool {return utilityCall[bool](utilities[35], &x) }
func Ease(x float64, curve float64) float64 {return utilityCall[float64](utilities[36], &x, &curve) }
func StepDecimals(x float64) int64 {return utilityCall[int64](utilities[37], &x) }
func Snapped(x float64, step float64) float64 {return utilityCall[float64](utilities[38], &x, &step) }
func Lerp(from any, to any, weight any) any {return utilityCall[any](utilities[39], &from, &to, &weight) }
func Lerpf(from float64, to float64, weight float64) float64 {return utilityCall[float64](utilities[40], &from, &to, &weight) }
func CubicInterpolate(from float64, to float64, pre float64, post float64, weight float64) float64 {return utilityCall[float64](utilities[41], &from, &to, &pre, &post, &weight) }
func CubicInterpolateAngle(from float64, to float64, pre float64, post float64, weight float64) float64 {return utilityCall[float64](utilities[42], &from, &to, &pre, &post, &weight) }
func CubicInterpolateInTime(from float64, to float64, pre float64, post float64, weight float64, to_t float64, pre_t float64, post_t float64) float64 {return utilityCall[float64](utilities[43], &from, &to, &pre, &post, &weight, &to_t, &pre_t, &post_t) }
func CubicInterpolateAngleInTime(from float64, to float64, pre float64, post float64, weight float64, to_t float64, pre_t float64, post_t float64) float64 {return utilityCall[float64](utilities[44], &from, &to, &pre, &post, &weight, &to_t, &pre_t, &post_t) }
func BezierInterpolate(start float64, control_1 float64, control_2 float64, end float64, t float64) float64 {return utilityCall[float64](utilities[45], &start, &control_1, &control_2, &end, &t) }
func LerpAngle(from float64, to float64, weight float64) float64 {return utilityCall[float64](utilities[46], &from, &to, &weight) }
func InverseLerp(from float64, to float64, weight float64) float64 {return utilityCall[float64](utilities[47], &from, &to, &weight) }
func RangeLerp(value float64, istart float64, istop float64, ostart float64, ostop float64) float64 {return utilityCall[float64](utilities[48], &value, &istart, &istop, &ostart, &ostop) }
func Smoothstep(from float64, to float64, x float64) float64 {return utilityCall[float64](utilities[49], &from, &to, &x) }
func MoveToward(from float64, to float64, delta float64) float64 {return utilityCall[float64](utilities[50], &from, &to, &delta) }
func DegToRad(deg float64) float64 {return utilityCall[float64](utilities[51], &deg) }
func RadToDeg(rad float64) float64 {return utilityCall[float64](utilities[52], &rad) }
func LinearToDb(lin float64) float64 {return utilityCall[float64](utilities[53], &lin) }
func DbToLinear(db float64) float64 {return utilityCall[float64](utilities[54], &db) }
func Wrap(value any, min any, max any) any {return utilityCall[any](utilities[55], &value, &min, &max) }
func Wrapi(value int64, min int64, max int64) int64 {return utilityCall[int64](utilities[56], &value, &min, &max) }
func Wrapf(value float64, min float64, max float64) float64 {return utilityCall[float64](utilities[57], &value, &min, &max) }
func Max(arg1 any, arg2 any) any {return utilityCall[any](utilities[58], &arg1, &arg2) }
func Maxi(a int64, b int64) int64 {return utilityCall[int64](utilities[59], &a, &b) }
func Maxf(a float64, b float64) float64 {return utilityCall[float64](utilities[60], &a, &b) }
func Min(arg1 any, arg2 any) any {return utilityCall[any](utilities[61], &arg1, &arg2) }
func Mini(a int64, b int64) int64 {return utilityCall[int64](utilities[62], &a, &b) }
func Minf(a float64, b float64) float64 {return utilityCall[float64](utilities[63], &a, &b) }
func Clamp(value any, min any, max any) any {return utilityCall[any](utilities[64], &value, &min, &max) }
func Clampi(value int64, min int64, max int64) int64 {return utilityCall[int64](utilities[65], &value, &min, &max) }
func Clampf(value float64, min float64, max float64) float64 {return utilityCall[float64](utilities[66], &value, &min, &max) }
func NearestPo2(value int64) int64 {return utilityCall[int64](utilities[67], &value) }
func Pingpong(value float64, length float64) float64 {return utilityCall[float64](utilities[68], &value, &length) }
func Randomize()  {utilityCall[struct{}](utilities[69]) }
func Randi() int64 {return utilityCall[int64](utilities[70]) }
func Randf() float64 {return utilityCall[float64](utilities[71]) }
func RandiRange(from int64, to int64) int64 {return utilityCall[int64](utilities[72], &from, &to) }
func RandfRange(from float64, to float64) float64 {return utilityCall[float64](utilities[73], &from, &to) }
func Randfn(mean float64, deviation float64) float64 {return utilityCall[float64](utilities[74], &mean, &deviation) }
func Seed(base int64)  {utilityCall[struct{}](utilities[75], &base) }
func RandFromSeed(seed int64) []int64 {return utilityCall[[]int64](utilities[76], &seed) }
func Weakref(obj any) any {return utilityCall[any](utilities[77], &obj) }
func Typeof(variable any) int64 {return utilityCall[int64](utilities[78], &variable) }
func Str(arg1 any) string {return utilityCall[string](utilities[79], &arg1) }
func ErrorString(error int64) string {return utilityCall[string](utilities[80], &error) }
func Print(arg1 any)  {utilityCall[struct{}](utilities[81], &arg1) }
func PrintRich(arg1 any)  {utilityCall[struct{}](utilities[82], &arg1) }
func Printerr(arg1 any)  {utilityCall[struct{}](utilities[83], &arg1) }
func Printt(arg1 any)  {utilityCall[struct{}](utilities[84], &arg1) }
func Prints(arg1 any)  {utilityCall[struct{}](utilities[85], &arg1) }
func Printraw(arg1 any)  {utilityCall[struct{}](utilities[86], &arg1) }
func PrintVerbose(arg1 any)  {utilityCall[struct{}](utilities[87], &arg1) }
func PushError(arg1 any)  {utilityCall[struct{}](utilities[88], &arg1) }
func PushWarning(arg1 any)  {utilityCall[struct{}](utilities[89], &arg1) }
func VarToStr(variable any) string {return utilityCall[string](utilities[90], &variable) }
func StrToVar(s string) any {return utilityCall[any](utilities[91], &s) }
func VarToBytes(variable any) []byte {return utilityCall[[]byte](utilities[92], &variable) }
func BytesToVar(bytes []byte) any {return utilityCall[any](utilities[93], &bytes) }
func VarToBytesWithObjects(variable any) []byte {return utilityCall[[]byte](utilities[94], &variable) }
func BytesToVarWithObjects(bytes []byte) any {return utilityCall[any](utilities[95], &bytes) }
func Hash(variable any) int64 {return utilityCall[int64](utilities[96], &variable) }
func InstanceFromId(instance_id int64) Object {return utilityCall[Object](utilities[97], &instance_id) }
func IsInstanceIdValid(id int64) bool {return utilityCall[bool](utilities[98], &id) }
func IsInstanceValid(instance any) bool {return utilityCall[bool](utilities[99], &instance) }
func RidAllocateId() int64 {return utilityCall[int64](utilities[100]) }
func RidFromInt64(base int64) RID {return utilityCall[RID](utilities[101], &base) }

type Vector2Axis int64

const (
	Vector2AxisX Vector2Axis = 0
	Vector2AxisY Vector2Axis = 1
)
type Vector2 = cVector2
var methodVector2 [39]cBuiltInMethod
func (gdClass Vector2) Angle() float64 { return builtinCall[float64](&gdClass, methodVector2[0]) }
func (gdClass Vector2) AngleTo(to Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[1], &to) }
func (gdClass Vector2) AngleToPoint(to Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[2], &to) }
func (gdClass Vector2) DirectionTo(to Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[3], &to) }
func (gdClass Vector2) DistanceTo(to Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[4], &to) }
func (gdClass Vector2) DistanceSquaredTo(to Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[5], &to) }
func (gdClass Vector2) Length() float64 { return builtinCall[float64](&gdClass, methodVector2[6]) }
func (gdClass Vector2) LengthSquared() float64 { return builtinCall[float64](&gdClass, methodVector2[7]) }
func (gdClass Vector2) LimitLength(length float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[8], &length) }
func (gdClass Vector2) Normalized() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[9]) }
func (gdClass Vector2) IsNormalized() bool { return builtinCall[bool](&gdClass, methodVector2[10]) }
func (gdClass Vector2) IsEqualApprox(to Vector2) bool { return builtinCall[bool](&gdClass, methodVector2[11], &to) }
func (gdClass Vector2) Posmod(mod float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[12], &mod) }
func (gdClass Vector2) Posmodv(modv Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[13], &modv) }
func (gdClass Vector2) Project(b Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[14], &b) }
func (gdClass Vector2) Lerp(to Vector2, weight float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[15], &to, &weight) }
func (gdClass Vector2) Slerp(to Vector2, weight float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[16], &to, &weight) }
func (gdClass Vector2) CubicInterpolate(b Vector2, pre_a Vector2, post_b Vector2, weight float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[17], &b, &pre_a, &post_b, &weight) }
func (gdClass Vector2) CubicInterpolateInTime(b Vector2, pre_a Vector2, post_b Vector2, weight float64, b_t float64, pre_a_t float64, post_b_t float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[18], &b, &pre_a, &post_b, &weight, &b_t, &pre_a_t, &post_b_t) }
func (gdClass Vector2) BezierInterpolate(control_1 Vector2, control_2 Vector2, end Vector2, t float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[19], &control_1, &control_2, &end, &t) }
func (gdClass Vector2) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector2[20]) }
func (gdClass Vector2) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector2[21]) }
func (gdClass Vector2) MoveToward(to Vector2, delta float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[22], &to, &delta) }
func (gdClass Vector2) Rotated(angle float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[23], &angle) }
func (gdClass Vector2) Orthogonal() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[24]) }
func (gdClass Vector2) Floor() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[25]) }
func (gdClass Vector2) Ceil() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[26]) }
func (gdClass Vector2) Round() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[27]) }
func (gdClass Vector2) Aspect() float64 { return builtinCall[float64](&gdClass, methodVector2[28]) }
func (gdClass Vector2) Dot(with Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[29], &with) }
func (gdClass Vector2) Slide(n Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[30], &n) }
func (gdClass Vector2) Bounce(n Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[31], &n) }
func (gdClass Vector2) Reflect(n Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[32], &n) }
func (gdClass Vector2) Cross(with Vector2) float64 { return builtinCall[float64](&gdClass, methodVector2[33], &with) }
func (gdClass Vector2) Abs() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[34]) }
func (gdClass Vector2) Sign() Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[35]) }
func (gdClass Vector2) Clamp(min Vector2, max Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[36], &min, &max) }
func (gdClass Vector2) Snapped(step Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[37], &step) }
func (gdClass Vector2) FromAngle(angle float64) Vector2 { return builtinCall[Vector2](&gdClass, methodVector2[38], &angle) }

type Vector2iAxis int64

const (
	Vector2iAxisX Vector2iAxis = 0
	Vector2iAxisY Vector2iAxis = 1
)
type Vector2i = cVector2i
var methodVector2i [8]cBuiltInMethod
func (gdClass Vector2i) Aspect() float64 { return builtinCall[float64](&gdClass, methodVector2i[0]) }
func (gdClass Vector2i) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector2i[1]) }
func (gdClass Vector2i) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector2i[2]) }
func (gdClass Vector2i) Length() float64 { return builtinCall[float64](&gdClass, methodVector2i[3]) }
func (gdClass Vector2i) LengthSquared() int64 { return builtinCall[int64](&gdClass, methodVector2i[4]) }
func (gdClass Vector2i) Sign() Vector2i { return builtinCall[Vector2i](&gdClass, methodVector2i[5]) }
func (gdClass Vector2i) Abs() Vector2i { return builtinCall[Vector2i](&gdClass, methodVector2i[6]) }
func (gdClass Vector2i) Clamp(min Vector2i, max Vector2i) Vector2i { return builtinCall[Vector2i](&gdClass, methodVector2i[7], &min, &max) }
type Rect2 = cRect2
var methodRect2 [14]cBuiltInMethod
func (gdClass Rect2) GetCenter() Vector2 { return builtinCall[Vector2](&gdClass, methodRect2[0]) }
func (gdClass Rect2) GetArea() float64 { return builtinCall[float64](&gdClass, methodRect2[1]) }
func (gdClass Rect2) HasNoArea() bool { return builtinCall[bool](&gdClass, methodRect2[2]) }
func (gdClass Rect2) HasPoint(point Vector2) bool { return builtinCall[bool](&gdClass, methodRect2[3], &point) }
func (gdClass Rect2) IsEqualApprox(rect Rect2) bool { return builtinCall[bool](&gdClass, methodRect2[4], &rect) }
func (gdClass Rect2) Intersects(b Rect2, include_borders bool) bool { return builtinCall[bool](&gdClass, methodRect2[5], &b, &include_borders) }
func (gdClass Rect2) Encloses(b Rect2) bool { return builtinCall[bool](&gdClass, methodRect2[6], &b) }
func (gdClass Rect2) Intersection(b Rect2) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[7], &b) }
func (gdClass Rect2) Merge(b Rect2) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[8], &b) }
func (gdClass Rect2) Expand(to Vector2) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[9], &to) }
func (gdClass Rect2) Grow(amount float64) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[10], &amount) }
func (gdClass Rect2) GrowSide(side int64, amount float64) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[11], &side, &amount) }
func (gdClass Rect2) GrowIndividual(left float64, top float64, right float64, bottom float64) Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[12], &left, &top, &right, &bottom) }
func (gdClass Rect2) Abs() Rect2 { return builtinCall[Rect2](&gdClass, methodRect2[13]) }
type Rect2i = cRect2i
var methodRect2i [13]cBuiltInMethod
func (gdClass Rect2i) GetCenter() Vector2i { return builtinCall[Vector2i](&gdClass, methodRect2i[0]) }
func (gdClass Rect2i) GetArea() int64 { return builtinCall[int64](&gdClass, methodRect2i[1]) }
func (gdClass Rect2i) HasNoArea() bool { return builtinCall[bool](&gdClass, methodRect2i[2]) }
func (gdClass Rect2i) HasPoint(point Vector2i) bool { return builtinCall[bool](&gdClass, methodRect2i[3], &point) }
func (gdClass Rect2i) Intersects(b Rect2i) bool { return builtinCall[bool](&gdClass, methodRect2i[4], &b) }
func (gdClass Rect2i) Encloses(b Rect2i) bool { return builtinCall[bool](&gdClass, methodRect2i[5], &b) }
func (gdClass Rect2i) Intersection(b Rect2i) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[6], &b) }
func (gdClass Rect2i) Merge(b Rect2i) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[7], &b) }
func (gdClass Rect2i) Expand(to Vector2i) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[8], &to) }
func (gdClass Rect2i) Grow(amount int64) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[9], &amount) }
func (gdClass Rect2i) GrowSide(side int64, amount int64) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[10], &side, &amount) }
func (gdClass Rect2i) GrowIndividual(left int64, top int64, right int64, bottom int64) Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[11], &left, &top, &right, &bottom) }
func (gdClass Rect2i) Abs() Rect2i { return builtinCall[Rect2i](&gdClass, methodRect2i[12]) }

type Vector3Axis int64

const (
	Vector3AxisX Vector3Axis = 0
	Vector3AxisY Vector3Axis = 1
	Vector3AxisZ Vector3Axis = 2
)
type Vector3 = cVector3
var methodVector3 [39]cBuiltInMethod
func (gdClass Vector3) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector3[0]) }
func (gdClass Vector3) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector3[1]) }
func (gdClass Vector3) AngleTo(to Vector3) float64 { return builtinCall[float64](&gdClass, methodVector3[2], &to) }
func (gdClass Vector3) SignedAngleTo(to Vector3, axis Vector3) float64 { return builtinCall[float64](&gdClass, methodVector3[3], &to, &axis) }
func (gdClass Vector3) DirectionTo(to Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[4], &to) }
func (gdClass Vector3) DistanceTo(to Vector3) float64 { return builtinCall[float64](&gdClass, methodVector3[5], &to) }
func (gdClass Vector3) DistanceSquaredTo(to Vector3) float64 { return builtinCall[float64](&gdClass, methodVector3[6], &to) }
func (gdClass Vector3) Length() float64 { return builtinCall[float64](&gdClass, methodVector3[7]) }
func (gdClass Vector3) LengthSquared() float64 { return builtinCall[float64](&gdClass, methodVector3[8]) }
func (gdClass Vector3) LimitLength(length float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[9], &length) }
func (gdClass Vector3) Normalized() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[10]) }
func (gdClass Vector3) IsNormalized() bool { return builtinCall[bool](&gdClass, methodVector3[11]) }
func (gdClass Vector3) IsEqualApprox(to Vector3) bool { return builtinCall[bool](&gdClass, methodVector3[12], &to) }
func (gdClass Vector3) Inverse() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[13]) }
func (gdClass Vector3) Clamp(min Vector3, max Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[14], &min, &max) }
func (gdClass Vector3) Snapped(step Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[15], &step) }
func (gdClass Vector3) Rotated(axis Vector3, angle float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[16], &axis, &angle) }
func (gdClass Vector3) Lerp(to Vector3, weight float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[17], &to, &weight) }
func (gdClass Vector3) Slerp(to Vector3, weight float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[18], &to, &weight) }
func (gdClass Vector3) CubicInterpolate(b Vector3, pre_a Vector3, post_b Vector3, weight float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[19], &b, &pre_a, &post_b, &weight) }
func (gdClass Vector3) CubicInterpolateInTime(b Vector3, pre_a Vector3, post_b Vector3, weight float64, b_t float64, pre_a_t float64, post_b_t float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[20], &b, &pre_a, &post_b, &weight, &b_t, &pre_a_t, &post_b_t) }
func (gdClass Vector3) BezierInterpolate(control_1 Vector3, control_2 Vector3, end Vector3, t float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[21], &control_1, &control_2, &end, &t) }
func (gdClass Vector3) MoveToward(to Vector3, delta float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[22], &to, &delta) }
func (gdClass Vector3) Dot(with Vector3) float64 { return builtinCall[float64](&gdClass, methodVector3[23], &with) }
func (gdClass Vector3) Cross(with Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[24], &with) }
func (gdClass Vector3) Outer(with Vector3) Basis { return builtinCall[Basis](&gdClass, methodVector3[25], &with) }
func (gdClass Vector3) Abs() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[26]) }
func (gdClass Vector3) Floor() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[27]) }
func (gdClass Vector3) Ceil() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[28]) }
func (gdClass Vector3) Round() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[29]) }
func (gdClass Vector3) Posmod(mod float64) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[30], &mod) }
func (gdClass Vector3) Posmodv(modv Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[31], &modv) }
func (gdClass Vector3) Project(b Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[32], &b) }
func (gdClass Vector3) Slide(n Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[33], &n) }
func (gdClass Vector3) Bounce(n Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[34], &n) }
func (gdClass Vector3) Reflect(n Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[35], &n) }
func (gdClass Vector3) Sign() Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[36]) }
func (gdClass Vector3) OctahedronEncode() Vector2 { return builtinCall[Vector2](&gdClass, methodVector3[37]) }
func (gdClass Vector3) OctahedronDecode(uv Vector2) Vector3 { return builtinCall[Vector3](&gdClass, methodVector3[38], &uv) }

type Vector3iAxis int64

const (
	Vector3iAxisX Vector3iAxis = 0
	Vector3iAxisY Vector3iAxis = 1
	Vector3iAxisZ Vector3iAxis = 2
)
type Vector3i = cVector3i
var methodVector3i [7]cBuiltInMethod
func (gdClass Vector3i) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector3i[0]) }
func (gdClass Vector3i) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector3i[1]) }
func (gdClass Vector3i) Length() float64 { return builtinCall[float64](&gdClass, methodVector3i[2]) }
func (gdClass Vector3i) LengthSquared() int64 { return builtinCall[int64](&gdClass, methodVector3i[3]) }
func (gdClass Vector3i) Sign() Vector3i { return builtinCall[Vector3i](&gdClass, methodVector3i[4]) }
func (gdClass Vector3i) Abs() Vector3i { return builtinCall[Vector3i](&gdClass, methodVector3i[5]) }
func (gdClass Vector3i) Clamp(min Vector3i, max Vector3i) Vector3i { return builtinCall[Vector3i](&gdClass, methodVector3i[6], &min, &max) }
type Transform2D = cTransform2D
var methodTransform2D [21]cBuiltInMethod
func (gdClass Transform2D) Inverse() Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[0]) }
func (gdClass Transform2D) AffineInverse() Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[1]) }
func (gdClass Transform2D) GetRotation() float64 { return builtinCall[float64](&gdClass, methodTransform2D[2]) }
func (gdClass Transform2D) GetOrigin() Vector2 { return builtinCall[Vector2](&gdClass, methodTransform2D[3]) }
func (gdClass Transform2D) GetScale() Vector2 { return builtinCall[Vector2](&gdClass, methodTransform2D[4]) }
func (gdClass Transform2D) GetSkew() float64 { return builtinCall[float64](&gdClass, methodTransform2D[5]) }
func (gdClass Transform2D) Orthonormalized() Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[6]) }
func (gdClass Transform2D) Rotated(angle float64) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[7], &angle) }
func (gdClass Transform2D) RotatedLocal(angle float64) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[8], &angle) }
func (gdClass Transform2D) Scaled(scale Vector2) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[9], &scale) }
func (gdClass Transform2D) ScaledLocal(scale Vector2) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[10], &scale) }
func (gdClass Transform2D) Translated(offset Vector2) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[11], &offset) }
func (gdClass Transform2D) TranslatedLocal(offset Vector2) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[12], &offset) }
func (gdClass Transform2D) BasisXform(v Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodTransform2D[13], &v) }
func (gdClass Transform2D) BasisXformInv(v Vector2) Vector2 { return builtinCall[Vector2](&gdClass, methodTransform2D[14], &v) }
func (gdClass Transform2D) InterpolateWith(xform Transform2D, weight float64) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[15], &xform, &weight) }
func (gdClass Transform2D) IsEqualApprox(xform Transform2D) bool { return builtinCall[bool](&gdClass, methodTransform2D[16], &xform) }
func (gdClass Transform2D) SetRotation(rotation float64)  { builtinCall[struct{}](&gdClass, methodTransform2D[17], &rotation) }
func (gdClass Transform2D) SetScale(scale Vector2)  { builtinCall[struct{}](&gdClass, methodTransform2D[18], &scale) }
func (gdClass Transform2D) SetSkew(skew float64)  { builtinCall[struct{}](&gdClass, methodTransform2D[19], &skew) }
func (gdClass Transform2D) LookingAt(target Vector2) Transform2D { return builtinCall[Transform2D](&gdClass, methodTransform2D[20], &target) }

type Vector4Axis int64

const (
	Vector4AxisX Vector4Axis = 0
	Vector4AxisY Vector4Axis = 1
	Vector4AxisZ Vector4Axis = 2
	Vector4AxisW Vector4Axis = 3
)
type Vector4 = cVector4
var methodVector4 [24]cBuiltInMethod
func (gdClass Vector4) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector4[0]) }
func (gdClass Vector4) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector4[1]) }
func (gdClass Vector4) Length() float64 { return builtinCall[float64](&gdClass, methodVector4[2]) }
func (gdClass Vector4) LengthSquared() float64 { return builtinCall[float64](&gdClass, methodVector4[3]) }
func (gdClass Vector4) Abs() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[4]) }
func (gdClass Vector4) Sign() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[5]) }
func (gdClass Vector4) Floor() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[6]) }
func (gdClass Vector4) Ceil() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[7]) }
func (gdClass Vector4) Round() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[8]) }
func (gdClass Vector4) Lerp(to Vector4, weight float64) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[9], &to, &weight) }
func (gdClass Vector4) CubicInterpolate(b Vector4, pre_a Vector4, post_b Vector4, weight float64) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[10], &b, &pre_a, &post_b, &weight) }
func (gdClass Vector4) CubicInterpolateInTime(b Vector4, pre_a Vector4, post_b Vector4, weight float64, b_t float64, pre_a_t float64, post_b_t float64) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[11], &b, &pre_a, &post_b, &weight, &b_t, &pre_a_t, &post_b_t) }
func (gdClass Vector4) Posmod(mod float64) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[12], &mod) }
func (gdClass Vector4) Posmodv(modv Vector4) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[13], &modv) }
func (gdClass Vector4) Snapped(step Vector4) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[14], &step) }
func (gdClass Vector4) Clamp(min Vector4, max Vector4) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[15], &min, &max) }
func (gdClass Vector4) Normalized() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[16]) }
func (gdClass Vector4) IsNormalized() bool { return builtinCall[bool](&gdClass, methodVector4[17]) }
func (gdClass Vector4) DirectionTo(to Vector4) Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[18], &to) }
func (gdClass Vector4) DistanceTo(to Vector4) float64 { return builtinCall[float64](&gdClass, methodVector4[19], &to) }
func (gdClass Vector4) DistanceSquaredTo(to Vector4) float64 { return builtinCall[float64](&gdClass, methodVector4[20], &to) }
func (gdClass Vector4) Dot(with Vector4) float64 { return builtinCall[float64](&gdClass, methodVector4[21], &with) }
func (gdClass Vector4) Inverse() Vector4 { return builtinCall[Vector4](&gdClass, methodVector4[22]) }
func (gdClass Vector4) IsEqualApprox(with Vector4) bool { return builtinCall[bool](&gdClass, methodVector4[23], &with) }

type Vector4iAxis int64

const (
	Vector4iAxisX Vector4iAxis = 0
	Vector4iAxisY Vector4iAxis = 1
	Vector4iAxisZ Vector4iAxis = 2
	Vector4iAxisW Vector4iAxis = 3
)
type Vector4i = cVector4i
var methodVector4i [7]cBuiltInMethod
func (gdClass Vector4i) MinAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector4i[0]) }
func (gdClass Vector4i) MaxAxisIndex() int64 { return builtinCall[int64](&gdClass, methodVector4i[1]) }
func (gdClass Vector4i) Length() float64 { return builtinCall[float64](&gdClass, methodVector4i[2]) }
func (gdClass Vector4i) LengthSquared() int64 { return builtinCall[int64](&gdClass, methodVector4i[3]) }
func (gdClass Vector4i) Sign() Vector4i { return builtinCall[Vector4i](&gdClass, methodVector4i[4]) }
func (gdClass Vector4i) Abs() Vector4i { return builtinCall[Vector4i](&gdClass, methodVector4i[5]) }
func (gdClass Vector4i) Clamp(min Vector4i, max Vector4i) Vector4i { return builtinCall[Vector4i](&gdClass, methodVector4i[6], &min, &max) }
type Plane = cPlane
var methodPlane [10]cBuiltInMethod
func (gdClass Plane) Normalized() Plane { return builtinCall[Plane](&gdClass, methodPlane[0]) }
func (gdClass Plane) Center() Vector3 { return builtinCall[Vector3](&gdClass, methodPlane[1]) }
func (gdClass Plane) IsEqualApprox(to_plane Plane) bool { return builtinCall[bool](&gdClass, methodPlane[2], &to_plane) }
func (gdClass Plane) IsPointOver(point Vector3) bool { return builtinCall[bool](&gdClass, methodPlane[3], &point) }
func (gdClass Plane) DistanceTo(point Vector3) float64 { return builtinCall[float64](&gdClass, methodPlane[4], &point) }
func (gdClass Plane) HasPoint(point Vector3, tolerance float64) bool { return builtinCall[bool](&gdClass, methodPlane[5], &point, &tolerance) }
func (gdClass Plane) Project(point Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodPlane[6], &point) }
func (gdClass Plane) Intersect3(b Plane, c Plane) any { return builtinCall[any](&gdClass, methodPlane[7], &b, &c) }
func (gdClass Plane) IntersectsRay(from Vector3, dir Vector3) any { return builtinCall[any](&gdClass, methodPlane[8], &from, &dir) }
func (gdClass Plane) IntersectsSegment(from Vector3, to Vector3) any { return builtinCall[any](&gdClass, methodPlane[9], &from, &to) }
type Quaternion = cQuaternion
var methodQuaternion [17]cBuiltInMethod
func (gdClass Quaternion) Length() float64 { return builtinCall[float64](&gdClass, methodQuaternion[0]) }
func (gdClass Quaternion) LengthSquared() float64 { return builtinCall[float64](&gdClass, methodQuaternion[1]) }
func (gdClass Quaternion) Normalized() Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[2]) }
func (gdClass Quaternion) IsNormalized() bool { return builtinCall[bool](&gdClass, methodQuaternion[3]) }
func (gdClass Quaternion) IsEqualApprox(to Quaternion) bool { return builtinCall[bool](&gdClass, methodQuaternion[4], &to) }
func (gdClass Quaternion) Inverse() Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[5]) }
func (gdClass Quaternion) Log() Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[6]) }
func (gdClass Quaternion) Exp() Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[7]) }
func (gdClass Quaternion) AngleTo(to Quaternion) float64 { return builtinCall[float64](&gdClass, methodQuaternion[8], &to) }
func (gdClass Quaternion) Dot(with Quaternion) float64 { return builtinCall[float64](&gdClass, methodQuaternion[9], &with) }
func (gdClass Quaternion) Slerp(to Quaternion, weight float64) Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[10], &to, &weight) }
func (gdClass Quaternion) Slerpni(to Quaternion, weight float64) Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[11], &to, &weight) }
func (gdClass Quaternion) SphericalCubicInterpolate(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float64) Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[12], &b, &pre_a, &post_b, &weight) }
func (gdClass Quaternion) SphericalCubicInterpolateInTime(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float64, b_t float64, pre_a_t float64, post_b_t float64) Quaternion { return builtinCall[Quaternion](&gdClass, methodQuaternion[13], &b, &pre_a, &post_b, &weight, &b_t, &pre_a_t, &post_b_t) }
func (gdClass Quaternion) GetEuler() Vector3 { return builtinCall[Vector3](&gdClass, methodQuaternion[14]) }
func (gdClass Quaternion) GetAxis() Vector3 { return builtinCall[Vector3](&gdClass, methodQuaternion[15]) }
func (gdClass Quaternion) GetAngle() float64 { return builtinCall[float64](&gdClass, methodQuaternion[16]) }
type AABB = cAABB
var methodAABB [24]cBuiltInMethod
func (gdClass AABB) Abs() AABB { return builtinCall[AABB](&gdClass, methodAABB[0]) }
func (gdClass AABB) GetCenter() Vector3 { return builtinCall[Vector3](&gdClass, methodAABB[1]) }
func (gdClass AABB) GetVolume() float64 { return builtinCall[float64](&gdClass, methodAABB[2]) }
func (gdClass AABB) HasNoVolume() bool { return builtinCall[bool](&gdClass, methodAABB[3]) }
func (gdClass AABB) HasNoSurface() bool { return builtinCall[bool](&gdClass, methodAABB[4]) }
func (gdClass AABB) HasPoint(point Vector3) bool { return builtinCall[bool](&gdClass, methodAABB[5], &point) }
func (gdClass AABB) IsEqualApprox(aabb AABB) bool { return builtinCall[bool](&gdClass, methodAABB[6], &aabb) }
func (gdClass AABB) Intersects(with AABB) bool { return builtinCall[bool](&gdClass, methodAABB[7], &with) }
func (gdClass AABB) Encloses(with AABB) bool { return builtinCall[bool](&gdClass, methodAABB[8], &with) }
func (gdClass AABB) IntersectsPlane(plane Plane) bool { return builtinCall[bool](&gdClass, methodAABB[9], &plane) }
func (gdClass AABB) Intersection(with AABB) AABB { return builtinCall[AABB](&gdClass, methodAABB[10], &with) }
func (gdClass AABB) Merge(with AABB) AABB { return builtinCall[AABB](&gdClass, methodAABB[11], &with) }
func (gdClass AABB) Expand(to_point Vector3) AABB { return builtinCall[AABB](&gdClass, methodAABB[12], &to_point) }
func (gdClass AABB) Grow(by float64) AABB { return builtinCall[AABB](&gdClass, methodAABB[13], &by) }
func (gdClass AABB) GetSupport(dir Vector3) Vector3 { return builtinCall[Vector3](&gdClass, methodAABB[14], &dir) }
func (gdClass AABB) GetLongestAxis() Vector3 { return builtinCall[Vector3](&gdClass, methodAABB[15]) }
func (gdClass AABB) GetLongestAxisIndex() int64 { return builtinCall[int64](&gdClass, methodAABB[16]) }
func (gdClass AABB) GetLongestAxisSize() float64 { return builtinCall[float64](&gdClass, methodAABB[17]) }
func (gdClass AABB) GetShortestAxis() Vector3 { return builtinCall[Vector3](&gdClass, methodAABB[18]) }
func (gdClass AABB) GetShortestAxisIndex() int64 { return builtinCall[int64](&gdClass, methodAABB[19]) }
func (gdClass AABB) GetShortestAxisSize() float64 { return builtinCall[float64](&gdClass, methodAABB[20]) }
func (gdClass AABB) GetEndpoint(idx int64) Vector3 { return builtinCall[Vector3](&gdClass, methodAABB[21], &idx) }
func (gdClass AABB) IntersectsSegment(from Vector3, to Vector3) any { return builtinCall[any](&gdClass, methodAABB[22], &from, &to) }
func (gdClass AABB) IntersectsRay(from Vector3, dir Vector3) any { return builtinCall[any](&gdClass, methodAABB[23], &from, &dir) }

type BasisEulerOrder int64

const (
	BasisEulerOrderXyz BasisEulerOrder = 0
	BasisEulerOrderXzy BasisEulerOrder = 1
	BasisEulerOrderYxz BasisEulerOrder = 2
	BasisEulerOrderYzx BasisEulerOrder = 3
	BasisEulerOrderZxy BasisEulerOrder = 4
	BasisEulerOrderZyx BasisEulerOrder = 5
)
type Basis = cBasis
var methodBasis [17]cBuiltInMethod
func (gdClass Basis) Inverse() Basis { return builtinCall[Basis](&gdClass, methodBasis[0]) }
func (gdClass Basis) Transposed() Basis { return builtinCall[Basis](&gdClass, methodBasis[1]) }
func (gdClass Basis) Orthonormalized() Basis { return builtinCall[Basis](&gdClass, methodBasis[2]) }
func (gdClass Basis) Determinant() float64 { return builtinCall[float64](&gdClass, methodBasis[3]) }
func (gdClass Basis) Rotated(axis Vector3, angle float64) Basis { return builtinCall[Basis](&gdClass, methodBasis[4], &axis, &angle) }
func (gdClass Basis) Scaled(scale Vector3) Basis { return builtinCall[Basis](&gdClass, methodBasis[5], &scale) }
func (gdClass Basis) GetScale() Vector3 { return builtinCall[Vector3](&gdClass, methodBasis[6]) }
func (gdClass Basis) GetEuler(order int64) Vector3 { return builtinCall[Vector3](&gdClass, methodBasis[7], &order) }
func (gdClass Basis) Tdotx(with Vector3) float64 { return builtinCall[float64](&gdClass, methodBasis[8], &with) }
func (gdClass Basis) Tdoty(with Vector3) float64 { return builtinCall[float64](&gdClass, methodBasis[9], &with) }
func (gdClass Basis) Tdotz(with Vector3) float64 { return builtinCall[float64](&gdClass, methodBasis[10], &with) }
func (gdClass Basis) Slerp(to Basis, weight float64) Basis { return builtinCall[Basis](&gdClass, methodBasis[11], &to, &weight) }
func (gdClass Basis) IsEqualApprox(b Basis) bool { return builtinCall[bool](&gdClass, methodBasis[12], &b) }
func (gdClass Basis) GetRotationQuaternion() Quaternion { return builtinCall[Quaternion](&gdClass, methodBasis[13]) }
func (gdClass Basis) LookingAt(target Vector3, up Vector3) Basis { return builtinCall[Basis](&gdClass, methodBasis[14], &target, &up) }
func (gdClass Basis) FromScale(scale Vector3) Basis { return builtinCall[Basis](&gdClass, methodBasis[15], &scale) }
func (gdClass Basis) FromEuler(euler Vector3, order int64) Basis { return builtinCall[Basis](&gdClass, methodBasis[16], &euler, &order) }
type Transform3D = cTransform3D
var methodTransform3D [13]cBuiltInMethod
func (gdClass Transform3D) Inverse() Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[0]) }
func (gdClass Transform3D) AffineInverse() Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[1]) }
func (gdClass Transform3D) Orthonormalized() Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[2]) }
func (gdClass Transform3D) Rotated(axis Vector3, angle float64) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[3], &axis, &angle) }
func (gdClass Transform3D) RotatedLocal(axis Vector3, angle float64) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[4], &axis, &angle) }
func (gdClass Transform3D) Scaled(scale Vector3) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[5], &scale) }
func (gdClass Transform3D) ScaledLocal(scale Vector3) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[6], &scale) }
func (gdClass Transform3D) Translated(offset Vector3) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[7], &offset) }
func (gdClass Transform3D) TranslatedLocal(offset Vector3) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[8], &offset) }
func (gdClass Transform3D) LookingAt(target Vector3, up Vector3) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[9], &target, &up) }
func (gdClass Transform3D) SphericalInterpolateWith(xform Transform3D, weight float64) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[10], &xform, &weight) }
func (gdClass Transform3D) InterpolateWith(xform Transform3D, weight float64) Transform3D { return builtinCall[Transform3D](&gdClass, methodTransform3D[11], &xform, &weight) }
func (gdClass Transform3D) IsEqualApprox(xform Transform3D) bool { return builtinCall[bool](&gdClass, methodTransform3D[12], &xform) }

type ProjectionPlanes int64

const (
	ProjectionPlaneNear ProjectionPlanes = 0
	ProjectionPlaneFar ProjectionPlanes = 1
	ProjectionPlaneLeft ProjectionPlanes = 2
	ProjectionPlaneTop ProjectionPlanes = 3
	ProjectionPlaneRight ProjectionPlanes = 4
	ProjectionPlaneBottom ProjectionPlanes = 5
)
type Projection = cProjection
var methodProjection [26]cBuiltInMethod
func (gdClass Projection) CreateDepthCorrection(flip_y bool) Projection { return builtinCall[Projection](&gdClass, methodProjection[0], &flip_y) }
func (gdClass Projection) CreateLightAtlasRect(rect Rect2) Projection { return builtinCall[Projection](&gdClass, methodProjection[1], &rect) }
func (gdClass Projection) CreatePerspective(fovy float64, aspect float64, z_near float64, z_far float64, flip_fov bool) Projection { return builtinCall[Projection](&gdClass, methodProjection[2], &fovy, &aspect, &z_near, &z_far, &flip_fov) }
func (gdClass Projection) CreatePerspectiveHmd(fovy float64, aspect float64, z_near float64, z_far float64, flip_fov bool, eye int64, intraocular_dist float64,  convergence_dist float64) Projection { return builtinCall[Projection](&gdClass, methodProjection[3], &fovy, &aspect, &z_near, &z_far, &flip_fov, &eye, &intraocular_dist, & convergence_dist) }
func (gdClass Projection) CreateForHmd(eye int64, aspect float64, intraocular_dist float64, display_width float64, display_to_lens float64, oversample float64, z_near float64, z_far float64) Projection { return builtinCall[Projection](&gdClass, methodProjection[4], &eye, &aspect, &intraocular_dist, &display_width, &display_to_lens, &oversample, &z_near, &z_far) }
func (gdClass Projection) CreateOrthogonal(left float64, right float64, bottom float64, top float64, z_near float64, z_far float64) Projection { return builtinCall[Projection](&gdClass, methodProjection[5], &left, &right, &bottom, &top, &z_near, &z_far) }
func (gdClass Projection) CreateOrthogonalAspect(size float64, aspect float64, z_near float64, z_far float64, flip_fov bool) Projection { return builtinCall[Projection](&gdClass, methodProjection[6], &size, &aspect, &z_near, &z_far, &flip_fov) }
func (gdClass Projection) CreateFrustum(left float64, right float64, bottom float64, top float64, z_near float64, z_far float64) Projection { return builtinCall[Projection](&gdClass, methodProjection[7], &left, &right, &bottom, &top, &z_near, &z_far) }
func (gdClass Projection) CreateFrustumAspect(size float64, aspect float64, offset Vector2, z_near float64, z_far float64, flip_fov bool) Projection { return builtinCall[Projection](&gdClass, methodProjection[8], &size, &aspect, &offset, &z_near, &z_far, &flip_fov) }
func (gdClass Projection) CreateFitAabb(aabb AABB) Projection { return builtinCall[Projection](&gdClass, methodProjection[9], &aabb) }
func (gdClass Projection) Determinant() float64 { return builtinCall[float64](&gdClass, methodProjection[10]) }
func (gdClass Projection) PerspectiveZnearAdjusted(new_znear float64) Projection { return builtinCall[Projection](&gdClass, methodProjection[11], &new_znear) }
func (gdClass Projection) GetProjectionPlane(plane int64) Plane { return builtinCall[Plane](&gdClass, methodProjection[12], &plane) }
func (gdClass Projection) FlippedY() Projection { return builtinCall[Projection](&gdClass, methodProjection[13]) }
func (gdClass Projection) JitterOffseted(offset Vector2) Projection { return builtinCall[Projection](&gdClass, methodProjection[14], &offset) }
func (gdClass Projection) GetFovy(fovx float64, aspect float64) float64 { return builtinCall[float64](&gdClass, methodProjection[15], &fovx, &aspect) }
func (gdClass Projection) GetZFar() float64 { return builtinCall[float64](&gdClass, methodProjection[16]) }
func (gdClass Projection) GetZNear() float64 { return builtinCall[float64](&gdClass, methodProjection[17]) }
func (gdClass Projection) GetAspect() float64 { return builtinCall[float64](&gdClass, methodProjection[18]) }
func (gdClass Projection) GetFov() float64 { return builtinCall[float64](&gdClass, methodProjection[19]) }
func (gdClass Projection) IsOrthogonal() bool { return builtinCall[bool](&gdClass, methodProjection[20]) }
func (gdClass Projection) GetViewportHalfExtents() Vector2 { return builtinCall[Vector2](&gdClass, methodProjection[21]) }
func (gdClass Projection) GetFarPlaneHalfExtents() Vector2 { return builtinCall[Vector2](&gdClass, methodProjection[22]) }
func (gdClass Projection) Inverse() Projection { return builtinCall[Projection](&gdClass, methodProjection[23]) }
func (gdClass Projection) GetPixelsPerMeter(for_pixel_width int64) int64 { return builtinCall[int64](&gdClass, methodProjection[24], &for_pixel_width) }
func (gdClass Projection) GetLodMultiplier() float64 { return builtinCall[float64](&gdClass, methodProjection[25]) }
type Color = cColor
var methodColor [29]cBuiltInMethod
func (gdClass Color) ToArgb32() int64 { return builtinCall[int64](&gdClass, methodColor[0]) }
func (gdClass Color) ToAbgr32() int64 { return builtinCall[int64](&gdClass, methodColor[1]) }
func (gdClass Color) ToRgba32() int64 { return builtinCall[int64](&gdClass, methodColor[2]) }
func (gdClass Color) ToArgb64() int64 { return builtinCall[int64](&gdClass, methodColor[3]) }
func (gdClass Color) ToAbgr64() int64 { return builtinCall[int64](&gdClass, methodColor[4]) }
func (gdClass Color) ToRgba64() int64 { return builtinCall[int64](&gdClass, methodColor[5]) }
func (gdClass Color) ToHtml(with_alpha bool) string { return builtinCall[string](&gdClass, methodColor[6], &with_alpha) }
func (gdClass Color) Clamp(min Color, max Color) Color { return builtinCall[Color](&gdClass, methodColor[7], &min, &max) }
func (gdClass Color) Inverted() Color { return builtinCall[Color](&gdClass, methodColor[8]) }
func (gdClass Color) Lerp(to Color, weight float64) Color { return builtinCall[Color](&gdClass, methodColor[9], &to, &weight) }
func (gdClass Color) Lightened(amount float64) Color { return builtinCall[Color](&gdClass, methodColor[10], &amount) }
func (gdClass Color) Darkened(amount float64) Color { return builtinCall[Color](&gdClass, methodColor[11], &amount) }
func (gdClass Color) Blend(over Color) Color { return builtinCall[Color](&gdClass, methodColor[12], &over) }
func (gdClass Color) GetLuminance() float64 { return builtinCall[float64](&gdClass, methodColor[13]) }
func (gdClass Color) SrgbToLinear() Color { return builtinCall[Color](&gdClass, methodColor[14]) }
func (gdClass Color) LinearToSrgb() Color { return builtinCall[Color](&gdClass, methodColor[15]) }
func (gdClass Color) IsEqualApprox(to Color) bool { return builtinCall[bool](&gdClass, methodColor[16], &to) }
func (gdClass Color) Hex(hex int64) Color { return builtinCall[Color](&gdClass, methodColor[17], &hex) }
func (gdClass Color) Hex64(hex int64) Color { return builtinCall[Color](&gdClass, methodColor[18], &hex) }
func (gdClass Color) Html(rgba string) Color { return builtinCall[Color](&gdClass, methodColor[19], &rgba) }
func (gdClass Color) HtmlIsValid(color string) bool { return builtinCall[bool](&gdClass, methodColor[20], &color) }
func (gdClass Color) FindNamedColor(name string) int64 { return builtinCall[int64](&gdClass, methodColor[21], &name) }
func (gdClass Color) GetNamedColorCount() int64 { return builtinCall[int64](&gdClass, methodColor[22]) }
func (gdClass Color) GetNamedColorName(idx int64) string { return builtinCall[string](&gdClass, methodColor[23], &idx) }
func (gdClass Color) GetNamedColor(idx int64) Color { return builtinCall[Color](&gdClass, methodColor[24], &idx) }
func (gdClass Color) FromString(str string, def Color) Color { return builtinCall[Color](&gdClass, methodColor[25], &str, &def) }
func (gdClass Color) FromHsv(h float64, s float64, v float64, alpha float64) Color { return builtinCall[Color](&gdClass, methodColor[26], &h, &s, &v, &alpha) }
func (gdClass Color) FromOkHsl(h float64, s float64, l float64, alpha float64) Color { return builtinCall[Color](&gdClass, methodColor[27], &h, &s, &l, &alpha) }
func (gdClass Color) FromRgbe9995(rgbe int64) Color { return builtinCall[Color](&gdClass, methodColor[28], &rgbe) }
type Name = cName
var methodName [1]cBuiltInMethod
func (gdClass Name) Hash() int64 { return builtinCall[int64](&gdClass, methodName[0]) }
type NodePath = cNodePath
var methodNodePath [10]cBuiltInMethod
func (gdClass NodePath) IsAbsolute() bool { return builtinCall[bool](&gdClass, methodNodePath[0]) }
func (gdClass NodePath) GetNameCount() int64 { return builtinCall[int64](&gdClass, methodNodePath[1]) }
func (gdClass NodePath) GetName(idx int64) Name { return builtinCall[Name](&gdClass, methodNodePath[2], &idx) }
func (gdClass NodePath) GetSubnameCount() int64 { return builtinCall[int64](&gdClass, methodNodePath[3]) }
func (gdClass NodePath) Hash() int64 { return builtinCall[int64](&gdClass, methodNodePath[4]) }
func (gdClass NodePath) GetSubname(idx int64) Name { return builtinCall[Name](&gdClass, methodNodePath[5], &idx) }
func (gdClass NodePath) GetConcatenatedNames() Name { return builtinCall[Name](&gdClass, methodNodePath[6]) }
func (gdClass NodePath) GetConcatenatedSubnames() Name { return builtinCall[Name](&gdClass, methodNodePath[7]) }
func (gdClass NodePath) GetAsPropertyPath() NodePath { return builtinCall[NodePath](&gdClass, methodNodePath[8]) }
func (gdClass NodePath) IsEmpty() bool { return builtinCall[bool](&gdClass, methodNodePath[9]) }
type RID = cRID
var methodRID [2]cBuiltInMethod
func (gdClass RID) IsValid() bool { return builtinCall[bool](&gdClass, methodRID[0]) }
func (gdClass RID) GetId() int64 { return builtinCall[int64](&gdClass, methodRID[1]) }
type Callable = cCallable
var methodCallable [14]cBuiltInMethod
func (gdClass Callable) IsNull() bool { return builtinCall[bool](&gdClass, methodCallable[0]) }
func (gdClass Callable) IsCustom() bool { return builtinCall[bool](&gdClass, methodCallable[1]) }
func (gdClass Callable) IsStandard() bool { return builtinCall[bool](&gdClass, methodCallable[2]) }
func (gdClass Callable) IsValid() bool { return builtinCall[bool](&gdClass, methodCallable[3]) }
func (gdClass Callable) GetObject() Object { return builtinCall[Object](&gdClass, methodCallable[4]) }
func (gdClass Callable) GetObjectId() int64 { return builtinCall[int64](&gdClass, methodCallable[5]) }
func (gdClass Callable) GetMethod() Name { return builtinCall[Name](&gdClass, methodCallable[6]) }
func (gdClass Callable) Hash() int64 { return builtinCall[int64](&gdClass, methodCallable[7]) }
func (gdClass Callable) Unbind(argcount int64) Callable { return builtinCall[Callable](&gdClass, methodCallable[8], &argcount) }
func (gdClass Callable) Call() any { return builtinCall[any](&gdClass, methodCallable[9]) }
func (gdClass Callable) CallDeferred()  { builtinCall[struct{}](&gdClass, methodCallable[10]) }
func (gdClass Callable) Rpc()  { builtinCall[struct{}](&gdClass, methodCallable[11]) }
func (gdClass Callable) RpcId(peer_id int64)  { builtinCall[struct{}](&gdClass, methodCallable[12], &peer_id) }
func (gdClass Callable) Bind() Callable { return builtinCall[Callable](&gdClass, methodCallable[13]) }
type Signal = cSignal
var methodSignal [9]cBuiltInMethod
func (gdClass Signal) IsNull() bool { return builtinCall[bool](&gdClass, methodSignal[0]) }
func (gdClass Signal) GetObject() Object { return builtinCall[Object](&gdClass, methodSignal[1]) }
func (gdClass Signal) GetObjectId() int64 { return builtinCall[int64](&gdClass, methodSignal[2]) }
func (gdClass Signal) GetName() Name { return builtinCall[Name](&gdClass, methodSignal[3]) }
func (gdClass Signal) Connect(callable Callable, flags int64) int64 { return builtinCall[int64](&gdClass, methodSignal[4], &callable, &flags) }
func (gdClass Signal) Disconnect(callable Callable)  { builtinCall[struct{}](&gdClass, methodSignal[5], &callable) }
func (gdClass Signal) IsConnected(callable Callable) bool { return builtinCall[bool](&gdClass, methodSignal[6], &callable) }
func (gdClass Signal) GetConnections() Array { return builtinCall[Array](&gdClass, methodSignal[7]) }
func (gdClass Signal) Emit()  { builtinCall[struct{}](&gdClass, methodSignal[8]) }
type Dictionary = cDictionary
var methodDictionary [12]cBuiltInMethod
func (gdClass Dictionary) Size() int64 { return builtinCall[int64](&gdClass, methodDictionary[0]) }
func (gdClass Dictionary) IsEmpty() bool { return builtinCall[bool](&gdClass, methodDictionary[1]) }
func (gdClass Dictionary) Clear()  { builtinCall[struct{}](&gdClass, methodDictionary[2]) }
func (gdClass Dictionary) Merge(dictionary Dictionary, overwrite bool)  { builtinCall[struct{}](&gdClass, methodDictionary[3], &dictionary, &overwrite) }
func (gdClass Dictionary) Has(key any) bool { return builtinCall[bool](&gdClass, methodDictionary[4], &key) }
func (gdClass Dictionary) HasAll(keys Array) bool { return builtinCall[bool](&gdClass, methodDictionary[5], &keys) }
func (gdClass Dictionary) Erase(key any) bool { return builtinCall[bool](&gdClass, methodDictionary[6], &key) }
func (gdClass Dictionary) Hash() int64 { return builtinCall[int64](&gdClass, methodDictionary[7]) }
func (gdClass Dictionary) Keys() Array { return builtinCall[Array](&gdClass, methodDictionary[8]) }
func (gdClass Dictionary) Values() Array { return builtinCall[Array](&gdClass, methodDictionary[9]) }
func (gdClass Dictionary) Duplicate(deep bool) Dictionary { return builtinCall[Dictionary](&gdClass, methodDictionary[10], &deep) }
func (gdClass Dictionary) Get(key any, def any) any { return builtinCall[any](&gdClass, methodDictionary[11], &key, &def) }
type Array = cArray
var methodArray [38]cBuiltInMethod
func (gdClass Array) Size() int64 { return builtinCall[int64](&gdClass, methodArray[0]) }
func (gdClass Array) IsEmpty() bool { return builtinCall[bool](&gdClass, methodArray[1]) }
func (gdClass Array) Clear()  { builtinCall[struct{}](&gdClass, methodArray[2]) }
func (gdClass Array) Hash() int64 { return builtinCall[int64](&gdClass, methodArray[3]) }
func (gdClass Array) PushBack(value any)  { builtinCall[struct{}](&gdClass, methodArray[4], &value) }
func (gdClass Array) PushFront(value any)  { builtinCall[struct{}](&gdClass, methodArray[5], &value) }
func (gdClass Array) Append(value any)  { builtinCall[struct{}](&gdClass, methodArray[6], &value) }
func (gdClass Array) AppendArray(array Array)  { builtinCall[struct{}](&gdClass, methodArray[7], &array) }
func (gdClass Array) Resize(size int64) int64 { return builtinCall[int64](&gdClass, methodArray[8], &size) }
func (gdClass Array) Insert(position int64, value any) int64 { return builtinCall[int64](&gdClass, methodArray[9], &position, &value) }
func (gdClass Array) RemoveAt(position int64)  { builtinCall[struct{}](&gdClass, methodArray[10], &position) }
func (gdClass Array) Fill(value any)  { builtinCall[struct{}](&gdClass, methodArray[11], &value) }
func (gdClass Array) Erase(value any)  { builtinCall[struct{}](&gdClass, methodArray[12], &value) }
func (gdClass Array) Front() any { return builtinCall[any](&gdClass, methodArray[13]) }
func (gdClass Array) Back() any { return builtinCall[any](&gdClass, methodArray[14]) }
func (gdClass Array) Find(what any, from int64) int64 { return builtinCall[int64](&gdClass, methodArray[15], &what, &from) }
func (gdClass Array) Rfind(what any, from int64) int64 { return builtinCall[int64](&gdClass, methodArray[16], &what, &from) }
func (gdClass Array) FindLast(value any) int64 { return builtinCall[int64](&gdClass, methodArray[17], &value) }
func (gdClass Array) Count(value any) int64 { return builtinCall[int64](&gdClass, methodArray[18], &value) }
func (gdClass Array) Has(value any) bool { return builtinCall[bool](&gdClass, methodArray[19], &value) }
func (gdClass Array) PopBack() any { return builtinCall[any](&gdClass, methodArray[20]) }
func (gdClass Array) PopFront() any { return builtinCall[any](&gdClass, methodArray[21]) }
func (gdClass Array) PopAt(position int64) any { return builtinCall[any](&gdClass, methodArray[22], &position) }
func (gdClass Array) Sort()  { builtinCall[struct{}](&gdClass, methodArray[23]) }
func (gdClass Array) SortCustom(fn Callable)  { builtinCall[struct{}](&gdClass, methodArray[24], &fn) }
func (gdClass Array) Shuffle()  { builtinCall[struct{}](&gdClass, methodArray[25]) }
func (gdClass Array) Bsearch(value any, before bool) int64 { return builtinCall[int64](&gdClass, methodArray[26], &value, &before) }
func (gdClass Array) BsearchCustom(value any, fn Callable, before bool) int64 { return builtinCall[int64](&gdClass, methodArray[27], &value, &fn, &before) }
func (gdClass Array) Reverse()  { builtinCall[struct{}](&gdClass, methodArray[28]) }
func (gdClass Array) Duplicate(deep bool) Array { return builtinCall[Array](&gdClass, methodArray[29], &deep) }
func (gdClass Array) Slice(begin int64, end int64, step int64, deep bool) Array { return builtinCall[Array](&gdClass, methodArray[30], &begin, &end, &step, &deep) }
func (gdClass Array) Filter(method Callable) Array { return builtinCall[Array](&gdClass, methodArray[31], &method) }
func (gdClass Array) Map(method Callable) Array { return builtinCall[Array](&gdClass, methodArray[32], &method) }
func (gdClass Array) Reduce(method Callable, accum any) any { return builtinCall[any](&gdClass, methodArray[33], &method, &accum) }
func (gdClass Array) Any(method Callable) bool { return builtinCall[bool](&gdClass, methodArray[34], &method) }
func (gdClass Array) All(method Callable) bool { return builtinCall[bool](&gdClass, methodArray[35], &method) }
func (gdClass Array) Max() any { return builtinCall[any](&gdClass, methodArray[36]) }
func (gdClass Array) Min() any { return builtinCall[any](&gdClass, methodArray[37]) }

type AESContextMode int64

const (
	AESContextModeEcbEncrypt AESContextMode = 0
	AESContextModeEcbDecrypt AESContextMode = 1
	AESContextModeCbcEncrypt AESContextMode = 2
	AESContextModeCbcDecrypt AESContextMode = 3
	AESContextModeMax AESContextMode = 4
)

type AESContext struct{self *AESContext; obj safeObject }
func NewAESContext(ctx Context, at *AESContext) AESContext { if at == nil { at = new(AESContext) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AESContext) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AESContext) owner() cObject { return gdClass.obj.get() }
func (AESContext) class() string { return "AESContext\000" }

func (gdClass AESContext) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodAESContext [4]cMethodBind
func (gdClass AESContext) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass AESContext) Start(mode AESContextMode, key []byte, iv []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodAESContext[0], &mode, &key, &iv) }
func (gdClass AESContext) Update(src []byte) []byte { return methodCall[[]byte](gdClass.obj.get(), methodAESContext[1], &src) }
func (gdClass AESContext) GetIvState() []byte { return methodCall[[]byte](gdClass.obj.get(), methodAESContext[2]) }
func (gdClass AESContext) Finish()  { methodCall[struct{}](gdClass.obj.get(), methodAESContext[3]) }

type AStar2D struct{self *AStar2D; obj safeObject }
func NewAStar2D(ctx Context, at *AStar2D) AStar2D { if at == nil { at = new(AStar2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AStar2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AStar2D) owner() cObject { return gdClass.obj.get() }
func (AStar2D) class() string { return "AStar2D\000" }

func (gdClass AStar2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodAStar2D [23]cMethodBind
func (gdClass AStar2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_estimate_cost":
		if rtype.Implements(reflect.TypeOf([0]interface{ EstimateCost(from_id int64, to_id int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`EstimateCost`)
		}
		return
	case "_compute_cost":
		if rtype.Implements(reflect.TypeOf([0]interface{ ComputeCost(from_id int64, to_id int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`ComputeCost`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass AStar2D) GetAvailablePointId() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar2D[0]) }
func (gdClass AStar2D) AddPoint(id int64, position Vector2, weight_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[1], &id, &position, &weight_scale) }
func (gdClass AStar2D) GetPointPosition(id int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAStar2D[2], &id) }
func (gdClass AStar2D) SetPointPosition(id int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[3], &id, &position) }
func (gdClass AStar2D) GetPointWeightScale(id int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAStar2D[4], &id) }
func (gdClass AStar2D) SetPointWeightScale(id int64, weight_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[5], &id, &weight_scale) }
func (gdClass AStar2D) RemovePoint(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[6], &id) }
func (gdClass AStar2D) HasPoint(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodAStar2D[7], &id) }
func (gdClass AStar2D) GetPointConnections(id int64) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar2D[8], &id) }
func (gdClass AStar2D) GetPointIds() []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar2D[9]) }
func (gdClass AStar2D) SetPointDisabled(id int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[10], &id, &disabled) }
func (gdClass AStar2D) IsPointDisabled(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodAStar2D[11], &id) }
func (gdClass AStar2D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[12], &id, &to_id, &bidirectional) }
func (gdClass AStar2D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[13], &id, &to_id, &bidirectional) }
func (gdClass AStar2D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return methodCall[bool](gdClass.obj.get(), methodAStar2D[14], &id, &to_id, &bidirectional) }
func (gdClass AStar2D) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar2D[15]) }
func (gdClass AStar2D) GetPointCapacity() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar2D[16]) }
func (gdClass AStar2D) ReserveSpace(num_nodes int64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[17], &num_nodes) }
func (gdClass AStar2D) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodAStar2D[18]) }
func (gdClass AStar2D) GetClosestPoint(to_position Vector2, include_disabled bool) int64 { return methodCall[int64](gdClass.obj.get(), methodAStar2D[19], &to_position, &include_disabled) }
func (gdClass AStar2D) GetClosestPositionInSegment(to_position Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAStar2D[20], &to_position) }
func (gdClass AStar2D) GetPointPath(from_id int64, to_id int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodAStar2D[21], &from_id, &to_id) }
func (gdClass AStar2D) GetIdPath(from_id int64, to_id int64) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar2D[22], &from_id, &to_id) }

type AStar3D struct{self *AStar3D; obj safeObject }
func NewAStar3D(ctx Context, at *AStar3D) AStar3D { if at == nil { at = new(AStar3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AStar3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AStar3D) owner() cObject { return gdClass.obj.get() }
func (AStar3D) class() string { return "AStar3D\000" }

func (gdClass AStar3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodAStar3D [23]cMethodBind
func (gdClass AStar3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_estimate_cost":
		if rtype.Implements(reflect.TypeOf([0]interface{ EstimateCost(from_id int64, to_id int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`EstimateCost`)
		}
		return
	case "_compute_cost":
		if rtype.Implements(reflect.TypeOf([0]interface{ ComputeCost(from_id int64, to_id int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`ComputeCost`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass AStar3D) GetAvailablePointId() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar3D[0]) }
func (gdClass AStar3D) AddPoint(id int64, position Vector3, weight_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[1], &id, &position, &weight_scale) }
func (gdClass AStar3D) GetPointPosition(id int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodAStar3D[2], &id) }
func (gdClass AStar3D) SetPointPosition(id int64, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[3], &id, &position) }
func (gdClass AStar3D) GetPointWeightScale(id int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAStar3D[4], &id) }
func (gdClass AStar3D) SetPointWeightScale(id int64, weight_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[5], &id, &weight_scale) }
func (gdClass AStar3D) RemovePoint(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[6], &id) }
func (gdClass AStar3D) HasPoint(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodAStar3D[7], &id) }
func (gdClass AStar3D) GetPointConnections(id int64) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar3D[8], &id) }
func (gdClass AStar3D) GetPointIds() []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar3D[9]) }
func (gdClass AStar3D) SetPointDisabled(id int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[10], &id, &disabled) }
func (gdClass AStar3D) IsPointDisabled(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodAStar3D[11], &id) }
func (gdClass AStar3D) ConnectPoints(id int64, to_id int64, bidirectional bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[12], &id, &to_id, &bidirectional) }
func (gdClass AStar3D) DisconnectPoints(id int64, to_id int64, bidirectional bool)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[13], &id, &to_id, &bidirectional) }
func (gdClass AStar3D) ArePointsConnected(id int64, to_id int64, bidirectional bool) bool { return methodCall[bool](gdClass.obj.get(), methodAStar3D[14], &id, &to_id, &bidirectional) }
func (gdClass AStar3D) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar3D[15]) }
func (gdClass AStar3D) GetPointCapacity() int64 { return methodCall[int64](gdClass.obj.get(), methodAStar3D[16]) }
func (gdClass AStar3D) ReserveSpace(num_nodes int64)  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[17], &num_nodes) }
func (gdClass AStar3D) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodAStar3D[18]) }
func (gdClass AStar3D) GetClosestPoint(to_position Vector3, include_disabled bool) int64 { return methodCall[int64](gdClass.obj.get(), methodAStar3D[19], &to_position, &include_disabled) }
func (gdClass AStar3D) GetClosestPositionInSegment(to_position Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodAStar3D[20], &to_position) }
func (gdClass AStar3D) GetPointPath(from_id int64, to_id int64) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodAStar3D[21], &from_id, &to_id) }
func (gdClass AStar3D) GetIdPath(from_id int64, to_id int64) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodAStar3D[22], &from_id, &to_id) }

type AcceptDialog struct{self *AcceptDialog; obj safeObject }
func NewAcceptDialog(ctx Context, at *AcceptDialog) AcceptDialog { if at == nil { at = new(AcceptDialog) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AcceptDialog) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AcceptDialog) owner() cObject { return gdClass.obj.get() }
func (AcceptDialog) class() string { return "AcceptDialog\000" }

func (gdClass AcceptDialog) Window() Window { return Window{obj:gdClass.obj} }

var methodAcceptDialog [16]cMethodBind
func (gdClass AcceptDialog) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Window().virtual(rtype, name)
}
func (gdClass AcceptDialog) GetOkButton() Button { return methodCall[Button](gdClass.obj.get(), methodAcceptDialog[0]) }
func (gdClass AcceptDialog) GetLabel() Label { return methodCall[Label](gdClass.obj.get(), methodAcceptDialog[1]) }
func (gdClass AcceptDialog) SetHideOnOk(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[2], &enabled) }
func (gdClass AcceptDialog) GetHideOnOk() bool { return methodCall[bool](gdClass.obj.get(), methodAcceptDialog[3]) }
func (gdClass AcceptDialog) SetCloseOnEscape(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[4], &enabled) }
func (gdClass AcceptDialog) GetCloseOnEscape() bool { return methodCall[bool](gdClass.obj.get(), methodAcceptDialog[5]) }
func (gdClass AcceptDialog) AddButton(text string, right bool, action string) Button { return methodCall[Button](gdClass.obj.get(), methodAcceptDialog[6], &text, &right, &action) }
func (gdClass AcceptDialog) AddCancelButton(name string) Button { return methodCall[Button](gdClass.obj.get(), methodAcceptDialog[7], &name) }
func (gdClass AcceptDialog) RemoveButton(button Control)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[8], &button) }
func (gdClass AcceptDialog) RegisterTextEnter(line_edit Control)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[9], &line_edit) }
func (gdClass AcceptDialog) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[10], &text) }
func (gdClass AcceptDialog) GetText() string { return methodCall[string](gdClass.obj.get(), methodAcceptDialog[11]) }
func (gdClass AcceptDialog) SetAutowrap(autowrap bool)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[12], &autowrap) }
func (gdClass AcceptDialog) HasAutowrap() bool { return methodCall[bool](gdClass.obj.get(), methodAcceptDialog[13]) }
func (gdClass AcceptDialog) SetOkButtonText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAcceptDialog[14], &text) }
func (gdClass AcceptDialog) GetOkButtonText() string { return methodCall[string](gdClass.obj.get(), methodAcceptDialog[15]) }

type AnimatableBody2D struct{self *AnimatableBody2D; obj safeObject }
func NewAnimatableBody2D(ctx Context, at *AnimatableBody2D) AnimatableBody2D { if at == nil { at = new(AnimatableBody2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimatableBody2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimatableBody2D) owner() cObject { return gdClass.obj.get() }
func (AnimatableBody2D) class() string { return "AnimatableBody2D\000" }

func (gdClass AnimatableBody2D) StaticBody2D() StaticBody2D { return StaticBody2D{obj:gdClass.obj} }

var methodAnimatableBody2D [2]cMethodBind
func (gdClass AnimatableBody2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StaticBody2D().virtual(rtype, name)
}
func (gdClass AnimatableBody2D) SetSyncToPhysics(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatableBody2D[0], &enable) }
func (gdClass AnimatableBody2D) IsSyncToPhysicsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatableBody2D[1]) }

type AnimatableBody3D struct{self *AnimatableBody3D; obj safeObject }
func NewAnimatableBody3D(ctx Context, at *AnimatableBody3D) AnimatableBody3D { if at == nil { at = new(AnimatableBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimatableBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimatableBody3D) owner() cObject { return gdClass.obj.get() }
func (AnimatableBody3D) class() string { return "AnimatableBody3D\000" }

func (gdClass AnimatableBody3D) StaticBody3D() StaticBody3D { return StaticBody3D{obj:gdClass.obj} }

var methodAnimatableBody3D [2]cMethodBind
func (gdClass AnimatableBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StaticBody3D().virtual(rtype, name)
}
func (gdClass AnimatableBody3D) SetSyncToPhysics(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatableBody3D[0], &enable) }
func (gdClass AnimatableBody3D) IsSyncToPhysicsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatableBody3D[1]) }

type AnimatedSprite2D struct{self *AnimatedSprite2D; obj safeObject }
func NewAnimatedSprite2D(ctx Context, at *AnimatedSprite2D) AnimatedSprite2D { if at == nil { at = new(AnimatedSprite2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimatedSprite2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimatedSprite2D) owner() cObject { return gdClass.obj.get() }
func (AnimatedSprite2D) class() string { return "AnimatedSprite2D\000" }

func (gdClass AnimatedSprite2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodAnimatedSprite2D [20]cMethodBind
func (gdClass AnimatedSprite2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass AnimatedSprite2D) SetSpriteFrames(sprite_frames SpriteFrames)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[0], &sprite_frames) }
func (gdClass AnimatedSprite2D) GetSpriteFrames() SpriteFrames { return methodCall[SpriteFrames](gdClass.obj.get(), methodAnimatedSprite2D[1]) }
func (gdClass AnimatedSprite2D) SetAnimation(animation Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[2], &animation) }
func (gdClass AnimatedSprite2D) GetAnimation() Name { return methodCall[Name](gdClass.obj.get(), methodAnimatedSprite2D[3]) }
func (gdClass AnimatedSprite2D) SetPlaying(playing bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[4], &playing) }
func (gdClass AnimatedSprite2D) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedSprite2D[5]) }
func (gdClass AnimatedSprite2D) Play(anim Name, backwards bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[6], &anim, &backwards) }
func (gdClass AnimatedSprite2D) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[7]) }
func (gdClass AnimatedSprite2D) SetCentered(centered bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[8], &centered) }
func (gdClass AnimatedSprite2D) IsCentered() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedSprite2D[9]) }
func (gdClass AnimatedSprite2D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[10], &offset) }
func (gdClass AnimatedSprite2D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimatedSprite2D[11]) }
func (gdClass AnimatedSprite2D) SetFlipH(flip_h bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[12], &flip_h) }
func (gdClass AnimatedSprite2D) IsFlippedH() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedSprite2D[13]) }
func (gdClass AnimatedSprite2D) SetFlipV(flip_v bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[14], &flip_v) }
func (gdClass AnimatedSprite2D) IsFlippedV() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedSprite2D[15]) }
func (gdClass AnimatedSprite2D) SetFrame(frame int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[16], &frame) }
func (gdClass AnimatedSprite2D) GetFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimatedSprite2D[17]) }
func (gdClass AnimatedSprite2D) SetSpeedScale(speed_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite2D[18], &speed_scale) }
func (gdClass AnimatedSprite2D) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimatedSprite2D[19]) }

type AnimatedSprite3D struct{self *AnimatedSprite3D; obj safeObject }
func NewAnimatedSprite3D(ctx Context, at *AnimatedSprite3D) AnimatedSprite3D { if at == nil { at = new(AnimatedSprite3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimatedSprite3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimatedSprite3D) owner() cObject { return gdClass.obj.get() }
func (AnimatedSprite3D) class() string { return "AnimatedSprite3D\000" }

func (gdClass AnimatedSprite3D) SpriteBase3D() SpriteBase3D { return SpriteBase3D{obj:gdClass.obj} }

var methodAnimatedSprite3D [9]cMethodBind
func (gdClass AnimatedSprite3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SpriteBase3D().virtual(rtype, name)
}
func (gdClass AnimatedSprite3D) SetSpriteFrames(sprite_frames SpriteFrames)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite3D[0], &sprite_frames) }
func (gdClass AnimatedSprite3D) GetSpriteFrames() SpriteFrames { return methodCall[SpriteFrames](gdClass.obj.get(), methodAnimatedSprite3D[1]) }
func (gdClass AnimatedSprite3D) SetAnimation(animation Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite3D[2], &animation) }
func (gdClass AnimatedSprite3D) GetAnimation() Name { return methodCall[Name](gdClass.obj.get(), methodAnimatedSprite3D[3]) }
func (gdClass AnimatedSprite3D) Play(anim Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite3D[4], &anim) }
func (gdClass AnimatedSprite3D) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite3D[5]) }
func (gdClass AnimatedSprite3D) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedSprite3D[6]) }
func (gdClass AnimatedSprite3D) SetFrame(frame int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedSprite3D[7], &frame) }
func (gdClass AnimatedSprite3D) GetFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimatedSprite3D[8]) }

type AnimatedTexture struct{self *AnimatedTexture; obj safeObject }
func NewAnimatedTexture(ctx Context, at *AnimatedTexture) AnimatedTexture { if at == nil { at = new(AnimatedTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimatedTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimatedTexture) owner() cObject { return gdClass.obj.get() }
func (AnimatedTexture) class() string { return "AnimatedTexture\000" }

func (gdClass AnimatedTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodAnimatedTexture [14]cMethodBind
func (gdClass AnimatedTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass AnimatedTexture) SetFrames(frames int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[0], &frames) }
func (gdClass AnimatedTexture) GetFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimatedTexture[1]) }
func (gdClass AnimatedTexture) SetCurrentFrame(frame int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[2], &frame) }
func (gdClass AnimatedTexture) GetCurrentFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimatedTexture[3]) }
func (gdClass AnimatedTexture) SetPause(pause bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[4], &pause) }
func (gdClass AnimatedTexture) GetPause() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedTexture[5]) }
func (gdClass AnimatedTexture) SetOneshot(oneshot bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[6], &oneshot) }
func (gdClass AnimatedTexture) GetOneshot() bool { return methodCall[bool](gdClass.obj.get(), methodAnimatedTexture[7]) }
func (gdClass AnimatedTexture) SetFps(fps float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[8], &fps) }
func (gdClass AnimatedTexture) GetFps() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimatedTexture[9]) }
func (gdClass AnimatedTexture) SetFrameTexture(frame int64, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[10], &frame, &texture) }
func (gdClass AnimatedTexture) GetFrameTexture(frame int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodAnimatedTexture[11], &frame) }
func (gdClass AnimatedTexture) SetFrameDelay(frame int64, delay float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimatedTexture[12], &frame, &delay) }
func (gdClass AnimatedTexture) GetFrameDelay(frame int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimatedTexture[13], &frame) }

type AnimationTrackType int64

const (
	AnimationTypeValue AnimationTrackType = 0
	AnimationTypePosition3d AnimationTrackType = 1
	AnimationTypeRotation3d AnimationTrackType = 2
	AnimationTypeScale3d AnimationTrackType = 3
	AnimationTypeBlendShape AnimationTrackType = 4
	AnimationTypeMethod AnimationTrackType = 5
	AnimationTypeBezier AnimationTrackType = 6
	AnimationTypeAudio AnimationTrackType = 7
	AnimationTypeAnimation AnimationTrackType = 8
)

type AnimationInterpolationType int64

const (
	AnimationInterpolationNearest AnimationInterpolationType = 0
	AnimationInterpolationLinear AnimationInterpolationType = 1
	AnimationInterpolationCubic AnimationInterpolationType = 2
	AnimationInterpolationLinearAngle AnimationInterpolationType = 3
	AnimationInterpolationCubicAngle AnimationInterpolationType = 4
)

type AnimationUpdateMode int64

const (
	AnimationUpdateContinuous AnimationUpdateMode = 0
	AnimationUpdateDiscrete AnimationUpdateMode = 1
	AnimationUpdateTrigger AnimationUpdateMode = 2
	AnimationUpdateCapture AnimationUpdateMode = 3
)

type AnimationLoopMode int64

const (
	AnimationLoopNone AnimationLoopMode = 0
	AnimationLoopLinear AnimationLoopMode = 1
	AnimationLoopPingpong AnimationLoopMode = 2
)

type Animation struct{self *Animation; obj safeObject }
func NewAnimation(ctx Context, at *Animation) Animation { if at == nil { at = new(Animation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Animation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Animation) owner() cObject { return gdClass.obj.get() }
func (Animation) class() string { return "Animation\000" }

func (gdClass Animation) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAnimation [69]cMethodBind
func (gdClass Animation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Animation) AddTrack(atype AnimationTrackType, at_position int64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[0], &atype, &at_position) }
func (gdClass Animation) RemoveTrack(track_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[1], &track_idx) }
func (gdClass Animation) GetTrackCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[2]) }
func (gdClass Animation) TrackGetType(track_idx int64) AnimationTrackType { return methodCall[AnimationTrackType](gdClass.obj.get(), methodAnimation[3], &track_idx) }
func (gdClass Animation) TrackGetPath(track_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimation[4], &track_idx) }
func (gdClass Animation) TrackSetPath(track_idx int64, path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[5], &track_idx, &path) }
func (gdClass Animation) FindTrack(path NodePath, atype AnimationTrackType) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[6], &path, &atype) }
func (gdClass Animation) TrackMoveUp(track_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[7], &track_idx) }
func (gdClass Animation) TrackMoveDown(track_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[8], &track_idx) }
func (gdClass Animation) TrackMoveTo(track_idx int64, to_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[9], &track_idx, &to_idx) }
func (gdClass Animation) TrackSwap(track_idx int64, with_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[10], &track_idx, &with_idx) }
func (gdClass Animation) TrackSetImported(track_idx int64, imported bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[11], &track_idx, &imported) }
func (gdClass Animation) TrackIsImported(track_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAnimation[12], &track_idx) }
func (gdClass Animation) TrackSetEnabled(track_idx int64, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[13], &track_idx, &enabled) }
func (gdClass Animation) TrackIsEnabled(track_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAnimation[14], &track_idx) }
func (gdClass Animation) PositionTrackInsertKey(track_idx int64, time float64, position Vector3) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[15], &track_idx, &time, &position) }
func (gdClass Animation) RotationTrackInsertKey(track_idx int64, time float64, rotation Quaternion) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[16], &track_idx, &time, &rotation) }
func (gdClass Animation) ScaleTrackInsertKey(track_idx int64, time float64, scale Vector3) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[17], &track_idx, &time, &scale) }
func (gdClass Animation) BlendShapeTrackInsertKey(track_idx int64, time float64, amount float64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[18], &track_idx, &time, &amount) }
func (gdClass Animation) TrackInsertKey(track_idx int64, time float64, key any, transition float64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[19], &track_idx, &time, &key, &transition) }
func (gdClass Animation) TrackRemoveKey(track_idx int64, key_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[20], &track_idx, &key_idx) }
func (gdClass Animation) TrackRemoveKeyAtTime(track_idx int64, time float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[21], &track_idx, &time) }
func (gdClass Animation) TrackSetKeyValue(track_idx int64, key int64, value any)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[22], &track_idx, &key, &value) }
func (gdClass Animation) TrackSetKeyTransition(track_idx int64, key_idx int64, transition float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[23], &track_idx, &key_idx, &transition) }
func (gdClass Animation) TrackSetKeyTime(track_idx int64, key_idx int64, time float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[24], &track_idx, &key_idx, &time) }
func (gdClass Animation) TrackGetKeyTransition(track_idx int64, key_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[25], &track_idx, &key_idx) }
func (gdClass Animation) TrackGetKeyCount(track_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[26], &track_idx) }
func (gdClass Animation) TrackGetKeyValue(track_idx int64, key_idx int64) any { return methodCall[any](gdClass.obj.get(), methodAnimation[27], &track_idx, &key_idx) }
func (gdClass Animation) TrackGetKeyTime(track_idx int64, key_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[28], &track_idx, &key_idx) }
func (gdClass Animation) TrackFindKey(track_idx int64, time float64, exact bool) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[29], &track_idx, &time, &exact) }
func (gdClass Animation) TrackSetInterpolationType(track_idx int64, interpolation AnimationInterpolationType)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[30], &track_idx, &interpolation) }
func (gdClass Animation) TrackGetInterpolationType(track_idx int64) AnimationInterpolationType { return methodCall[AnimationInterpolationType](gdClass.obj.get(), methodAnimation[31], &track_idx) }
func (gdClass Animation) TrackSetInterpolationLoopWrap(track_idx int64, interpolation bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[32], &track_idx, &interpolation) }
func (gdClass Animation) TrackGetInterpolationLoopWrap(track_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAnimation[33], &track_idx) }
func (gdClass Animation) TrackIsCompressed(track_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAnimation[34], &track_idx) }
func (gdClass Animation) ValueTrackSetUpdateMode(track_idx int64, mode AnimationUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[35], &track_idx, &mode) }
func (gdClass Animation) ValueTrackGetUpdateMode(track_idx int64) AnimationUpdateMode { return methodCall[AnimationUpdateMode](gdClass.obj.get(), methodAnimation[36], &track_idx) }
func (gdClass Animation) ValueTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodAnimation[37], &track_idx, &time_sec, &delta) }
func (gdClass Animation) ValueTrackInterpolate(track_idx int64, time_sec float64) any { return methodCall[any](gdClass.obj.get(), methodAnimation[38], &track_idx, &time_sec) }
func (gdClass Animation) MethodTrackGetKeyIndices(track_idx int64, time_sec float64, delta float64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodAnimation[39], &track_idx, &time_sec, &delta) }
func (gdClass Animation) MethodTrackGetName(track_idx int64, key_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodAnimation[40], &track_idx, &key_idx) }
func (gdClass Animation) MethodTrackGetParams(track_idx int64, key_idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodAnimation[41], &track_idx, &key_idx) }
func (gdClass Animation) BezierTrackInsertKey(track_idx int64, time float64, value float64, in_handle Vector2, out_handle Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[42], &track_idx, &time, &value, &in_handle, &out_handle) }
func (gdClass Animation) BezierTrackSetKeyValue(track_idx int64, key_idx int64, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[43], &track_idx, &key_idx, &value) }
func (gdClass Animation) BezierTrackSetKeyInHandle(track_idx int64, key_idx int64, in_handle Vector2, balanced_value_time_ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[44], &track_idx, &key_idx, &in_handle, &balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackSetKeyOutHandle(track_idx int64, key_idx int64, out_handle Vector2, balanced_value_time_ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[45], &track_idx, &key_idx, &out_handle, &balanced_value_time_ratio) }
func (gdClass Animation) BezierTrackGetKeyValue(track_idx int64, key_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[46], &track_idx, &key_idx) }
func (gdClass Animation) BezierTrackGetKeyInHandle(track_idx int64, key_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimation[47], &track_idx, &key_idx) }
func (gdClass Animation) BezierTrackGetKeyOutHandle(track_idx int64, key_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimation[48], &track_idx, &key_idx) }
func (gdClass Animation) BezierTrackInterpolate(track_idx int64, time float64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[49], &track_idx, &time) }
func (gdClass Animation) AudioTrackInsertKey(track_idx int64, time float64, stream Resource, start_offset float64, end_offset float64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[50], &track_idx, &time, &stream, &start_offset, &end_offset) }
func (gdClass Animation) AudioTrackSetKeyStream(track_idx int64, key_idx int64, stream Resource)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[51], &track_idx, &key_idx, &stream) }
func (gdClass Animation) AudioTrackSetKeyStartOffset(track_idx int64, key_idx int64, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[52], &track_idx, &key_idx, &offset) }
func (gdClass Animation) AudioTrackSetKeyEndOffset(track_idx int64, key_idx int64, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[53], &track_idx, &key_idx, &offset) }
func (gdClass Animation) AudioTrackGetKeyStream(track_idx int64, key_idx int64) Resource { return methodCall[Resource](gdClass.obj.get(), methodAnimation[54], &track_idx, &key_idx) }
func (gdClass Animation) AudioTrackGetKeyStartOffset(track_idx int64, key_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[55], &track_idx, &key_idx) }
func (gdClass Animation) AudioTrackGetKeyEndOffset(track_idx int64, key_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[56], &track_idx, &key_idx) }
func (gdClass Animation) AnimationTrackInsertKey(track_idx int64, time float64, animation Name) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimation[57], &track_idx, &time, &animation) }
func (gdClass Animation) AnimationTrackSetKeyAnimation(track_idx int64, key_idx int64, animation Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[58], &track_idx, &key_idx, &animation) }
func (gdClass Animation) AnimationTrackGetKeyAnimation(track_idx int64, key_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodAnimation[59], &track_idx, &key_idx) }
func (gdClass Animation) SetLength(time_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[60], &time_sec) }
func (gdClass Animation) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[61]) }
func (gdClass Animation) SetLoopMode(loop_mode AnimationLoopMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[62], &loop_mode) }
func (gdClass Animation) GetLoopMode() AnimationLoopMode { return methodCall[AnimationLoopMode](gdClass.obj.get(), methodAnimation[63]) }
func (gdClass Animation) SetStep(size_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[64], &size_sec) }
func (gdClass Animation) GetStep() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimation[65]) }
func (gdClass Animation) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[66]) }
func (gdClass Animation) CopyTrack(track_idx int64, to_animation Animation)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[67], &track_idx, &to_animation) }
func (gdClass Animation) Compress(page_size int64, fps int64, split_tolerance float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimation[68], &page_size, &fps, &split_tolerance) }

type AnimationLibrary struct{self *AnimationLibrary; obj safeObject }
func NewAnimationLibrary(ctx Context, at *AnimationLibrary) AnimationLibrary { if at == nil { at = new(AnimationLibrary) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationLibrary) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationLibrary) owner() cObject { return gdClass.obj.get() }
func (AnimationLibrary) class() string { return "AnimationLibrary\000" }

func (gdClass AnimationLibrary) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAnimationLibrary [6]cMethodBind
func (gdClass AnimationLibrary) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass AnimationLibrary) AddAnimation(name Name, animation Animation) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationLibrary[0], &name, &animation) }
func (gdClass AnimationLibrary) RemoveAnimation(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationLibrary[1], &name) }
func (gdClass AnimationLibrary) RenameAnimation(name Name, newname Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationLibrary[2], &name, &newname) }
func (gdClass AnimationLibrary) HasAnimation(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationLibrary[3], &name) }
func (gdClass AnimationLibrary) GetAnimation(name Name) Animation { return methodCall[Animation](gdClass.obj.get(), methodAnimationLibrary[4], &name) }
func (gdClass AnimationLibrary) GetAnimationList() Array { return methodCall[Array](gdClass.obj.get(), methodAnimationLibrary[5]) }

type AnimationNodeFilterAction int64

const (
	AnimationNodeFilterIgnore AnimationNodeFilterAction = 0
	AnimationNodeFilterPass AnimationNodeFilterAction = 1
	AnimationNodeFilterStop AnimationNodeFilterAction = 2
	AnimationNodeFilterBlend AnimationNodeFilterAction = 3
)

type AnimationNode struct{self *AnimationNode; obj safeObject }
func NewAnimationNode(ctx Context, at *AnimationNode) AnimationNode { if at == nil { at = new(AnimationNode) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNode) owner() cObject { return gdClass.obj.get() }
func (AnimationNode) class() string { return "AnimationNode\000" }

func (gdClass AnimationNode) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAnimationNode [13]cMethodBind
func (gdClass AnimationNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_child_nodes":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetChildNodes() Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetChildNodes`)
		}
		return
	case "_get_parameter_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetParameterList() Array }{}).Elem()) {
			return rtype.MethodByName(`GetParameterList`)
		}
		return
	case "_get_child_by_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetChildByName(name Name) AnimationNode }{}).Elem()) {
			return rtype.MethodByName(`GetChildByName`)
		}
		return
	case "_get_parameter_default_value":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetParameterDefaultValue(parameter Name) any }{}).Elem()) {
			return rtype.MethodByName(`GetParameterDefaultValue`)
		}
		return
	case "_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ Process(time float64, seek bool, seek_root bool) float64 }{}).Elem()) {
			return rtype.MethodByName(`Process`)
		}
		return
	case "_get_caption":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCaption() string }{}).Elem()) {
			return rtype.MethodByName(`GetCaption`)
		}
		return
	case "_has_filter":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasFilter() bool }{}).Elem()) {
			return rtype.MethodByName(`HasFilter`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass AnimationNode) GetInputCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNode[0]) }
func (gdClass AnimationNode) GetInputName(input int64) string { return methodCall[string](gdClass.obj.get(), methodAnimationNode[1], &input) }
func (gdClass AnimationNode) AddInput(name string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[2], &name) }
func (gdClass AnimationNode) RemoveInput(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[3], &index) }
func (gdClass AnimationNode) SetFilterPath(path NodePath, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[4], &path, &enable) }
func (gdClass AnimationNode) IsPathFiltered(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNode[5], &path) }
func (gdClass AnimationNode) SetFilterEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[6], &enable) }
func (gdClass AnimationNode) IsFilterEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNode[7]) }
func (gdClass AnimationNode) BlendAnimation(animation Name, time float64, delta float64, seeked bool, seek_root bool, blend float64, pingponged int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[8], &animation, &time, &delta, &seeked, &seek_root, &blend, &pingponged) }
func (gdClass AnimationNode) BlendNode(name Name, node AnimationNode, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNode[9], &name, &node, &time, &seek, &seek_root, &blend, &filter, &sync) }
func (gdClass AnimationNode) BlendInput(input_index int64, time float64, seek bool, seek_root bool, blend float64, filter AnimationNodeFilterAction, sync bool) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNode[10], &input_index, &time, &seek, &seek_root, &blend, &filter, &sync) }
func (gdClass AnimationNode) SetParameter(name Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNode[11], &name, &value) }
func (gdClass AnimationNode) GetParameter(name Name) any { return methodCall[any](gdClass.obj.get(), methodAnimationNode[12], &name) }

type AnimationNodeAdd2 struct{self *AnimationNodeAdd2; obj safeObject }
func NewAnimationNodeAdd2(ctx Context, at *AnimationNodeAdd2) AnimationNodeAdd2 { if at == nil { at = new(AnimationNodeAdd2) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeAdd2) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeAdd2) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeAdd2) class() string { return "AnimationNodeAdd2\000" }

func (gdClass AnimationNodeAdd2) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

func (gdClass AnimationNodeAdd2) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}

type AnimationNodeAdd3 struct{self *AnimationNodeAdd3; obj safeObject }
func NewAnimationNodeAdd3(ctx Context, at *AnimationNodeAdd3) AnimationNodeAdd3 { if at == nil { at = new(AnimationNodeAdd3) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeAdd3) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeAdd3) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeAdd3) class() string { return "AnimationNodeAdd3\000" }

func (gdClass AnimationNodeAdd3) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

func (gdClass AnimationNodeAdd3) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}

type AnimationNodeAnimationPlayMode int64

const (
	AnimationNodeAnimationPlayModeForward AnimationNodeAnimationPlayMode = 0
	AnimationNodeAnimationPlayModeBackward AnimationNodeAnimationPlayMode = 1
)

type AnimationNodeAnimation struct{self *AnimationNodeAnimation; obj safeObject }
func NewAnimationNodeAnimation(ctx Context, at *AnimationNodeAnimation) AnimationNodeAnimation { if at == nil { at = new(AnimationNodeAnimation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeAnimation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeAnimation) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeAnimation) class() string { return "AnimationNodeAnimation\000" }

func (gdClass AnimationNodeAnimation) AnimationRootNode() AnimationRootNode { return AnimationRootNode{obj:gdClass.obj} }

var methodAnimationNodeAnimation [4]cMethodBind
func (gdClass AnimationNodeAnimation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationRootNode().virtual(rtype, name)
}
func (gdClass AnimationNodeAnimation) SetAnimation(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeAnimation[0], &name) }
func (gdClass AnimationNodeAnimation) GetAnimation() Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeAnimation[1]) }
func (gdClass AnimationNodeAnimation) SetPlayMode(mode AnimationNodeAnimationPlayMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeAnimation[2], &mode) }
func (gdClass AnimationNodeAnimation) GetPlayMode() AnimationNodeAnimationPlayMode { return methodCall[AnimationNodeAnimationPlayMode](gdClass.obj.get(), methodAnimationNodeAnimation[3]) }

type AnimationNodeBlend2 struct{self *AnimationNodeBlend2; obj safeObject }
func NewAnimationNodeBlend2(ctx Context, at *AnimationNodeBlend2) AnimationNodeBlend2 { if at == nil { at = new(AnimationNodeBlend2) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeBlend2) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeBlend2) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeBlend2) class() string { return "AnimationNodeBlend2\000" }

func (gdClass AnimationNodeBlend2) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

func (gdClass AnimationNodeBlend2) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}

type AnimationNodeBlend3 struct{self *AnimationNodeBlend3; obj safeObject }
func NewAnimationNodeBlend3(ctx Context, at *AnimationNodeBlend3) AnimationNodeBlend3 { if at == nil { at = new(AnimationNodeBlend3) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeBlend3) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeBlend3) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeBlend3) class() string { return "AnimationNodeBlend3\000" }

func (gdClass AnimationNodeBlend3) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

func (gdClass AnimationNodeBlend3) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}

type AnimationNodeBlendSpace1D struct{self *AnimationNodeBlendSpace1D; obj safeObject }
func NewAnimationNodeBlendSpace1D(ctx Context, at *AnimationNodeBlendSpace1D) AnimationNodeBlendSpace1D { if at == nil { at = new(AnimationNodeBlendSpace1D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeBlendSpace1D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeBlendSpace1D) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeBlendSpace1D) class() string { return "AnimationNodeBlendSpace1D\000" }

func (gdClass AnimationNodeBlendSpace1D) AnimationRootNode() AnimationRootNode { return AnimationRootNode{obj:gdClass.obj} }

var methodAnimationNodeBlendSpace1D [17]cMethodBind
func (gdClass AnimationNodeBlendSpace1D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationRootNode().virtual(rtype, name)
}
func (gdClass AnimationNodeBlendSpace1D) AddBlendPoint(node AnimationRootNode, pos float64, at_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[0], &node, &pos, &at_index) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointPosition(point int64, pos float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[1], &point, &pos) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointPosition(point int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[2], &point) }
func (gdClass AnimationNodeBlendSpace1D) SetBlendPointNode(point int64, node AnimationRootNode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[3], &point, &node) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointNode(point int64) AnimationRootNode { return methodCall[AnimationRootNode](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[4], &point) }
func (gdClass AnimationNodeBlendSpace1D) RemoveBlendPoint(point int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[5], &point) }
func (gdClass AnimationNodeBlendSpace1D) GetBlendPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[6]) }
func (gdClass AnimationNodeBlendSpace1D) SetMinSpace(min_space float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[7], &min_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMinSpace() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[8]) }
func (gdClass AnimationNodeBlendSpace1D) SetMaxSpace(max_space float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[9], &max_space) }
func (gdClass AnimationNodeBlendSpace1D) GetMaxSpace() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[10]) }
func (gdClass AnimationNodeBlendSpace1D) SetSnap(snap float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[11], &snap) }
func (gdClass AnimationNodeBlendSpace1D) GetSnap() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[12]) }
func (gdClass AnimationNodeBlendSpace1D) SetValueLabel(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[13], &text) }
func (gdClass AnimationNodeBlendSpace1D) GetValueLabel() string { return methodCall[string](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[14]) }
func (gdClass AnimationNodeBlendSpace1D) SetUseSync(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[15], &enable) }
func (gdClass AnimationNodeBlendSpace1D) IsUsingSync() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeBlendSpace1D[16]) }

type AnimationNodeBlendSpace2DBlendMode int64

const (
	AnimationNodeBlendSpace2DBlendModeInterpolated AnimationNodeBlendSpace2DBlendMode = 0
	AnimationNodeBlendSpace2DBlendModeDiscrete AnimationNodeBlendSpace2DBlendMode = 1
	AnimationNodeBlendSpace2DBlendModeDiscreteCarry AnimationNodeBlendSpace2DBlendMode = 2
)

type AnimationNodeBlendSpace2D struct{self *AnimationNodeBlendSpace2D; obj safeObject }
func NewAnimationNodeBlendSpace2D(ctx Context, at *AnimationNodeBlendSpace2D) AnimationNodeBlendSpace2D { if at == nil { at = new(AnimationNodeBlendSpace2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeBlendSpace2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeBlendSpace2D) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeBlendSpace2D) class() string { return "AnimationNodeBlendSpace2D\000" }

func (gdClass AnimationNodeBlendSpace2D) AnimationRootNode() AnimationRootNode { return AnimationRootNode{obj:gdClass.obj} }

var methodAnimationNodeBlendSpace2D [27]cMethodBind
func (gdClass AnimationNodeBlendSpace2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationRootNode().virtual(rtype, name)
}
func (gdClass AnimationNodeBlendSpace2D) AddBlendPoint(node AnimationRootNode, pos Vector2, at_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[0], &node, &pos, &at_index) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointPosition(point int64, pos Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[1], &point, &pos) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointPosition(point int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[2], &point) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendPointNode(point int64, node AnimationRootNode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[3], &point, &node) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointNode(point int64) AnimationRootNode { return methodCall[AnimationRootNode](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[4], &point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveBlendPoint(point int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[5], &point) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[6]) }
func (gdClass AnimationNodeBlendSpace2D) AddTriangle(x int64, y int64, z int64, at_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[7], &x, &y, &z, &at_index) }
func (gdClass AnimationNodeBlendSpace2D) GetTrianglePoint(triangle int64, point int64) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[8], &triangle, &point) }
func (gdClass AnimationNodeBlendSpace2D) RemoveTriangle(triangle int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[9], &triangle) }
func (gdClass AnimationNodeBlendSpace2D) GetTriangleCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[10]) }
func (gdClass AnimationNodeBlendSpace2D) SetMinSpace(min_space Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[11], &min_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMinSpace() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[12]) }
func (gdClass AnimationNodeBlendSpace2D) SetMaxSpace(max_space Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[13], &max_space) }
func (gdClass AnimationNodeBlendSpace2D) GetMaxSpace() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[14]) }
func (gdClass AnimationNodeBlendSpace2D) SetSnap(snap Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[15], &snap) }
func (gdClass AnimationNodeBlendSpace2D) GetSnap() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[16]) }
func (gdClass AnimationNodeBlendSpace2D) SetXLabel(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[17], &text) }
func (gdClass AnimationNodeBlendSpace2D) GetXLabel() string { return methodCall[string](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[18]) }
func (gdClass AnimationNodeBlendSpace2D) SetYLabel(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[19], &text) }
func (gdClass AnimationNodeBlendSpace2D) GetYLabel() string { return methodCall[string](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[20]) }
func (gdClass AnimationNodeBlendSpace2D) SetAutoTriangles(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[21], &enable) }
func (gdClass AnimationNodeBlendSpace2D) GetAutoTriangles() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[22]) }
func (gdClass AnimationNodeBlendSpace2D) SetBlendMode(mode AnimationNodeBlendSpace2DBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[23], &mode) }
func (gdClass AnimationNodeBlendSpace2D) GetBlendMode() AnimationNodeBlendSpace2DBlendMode { return methodCall[AnimationNodeBlendSpace2DBlendMode](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[24]) }
func (gdClass AnimationNodeBlendSpace2D) SetUseSync(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[25], &enable) }
func (gdClass AnimationNodeBlendSpace2D) IsUsingSync() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeBlendSpace2D[26]) }

type AnimationNodeBlendTree struct{self *AnimationNodeBlendTree; obj safeObject }
func NewAnimationNodeBlendTree(ctx Context, at *AnimationNodeBlendTree) AnimationNodeBlendTree { if at == nil { at = new(AnimationNodeBlendTree) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeBlendTree) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeBlendTree) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeBlendTree) class() string { return "AnimationNodeBlendTree\000" }

func (gdClass AnimationNodeBlendTree) AnimationRootNode() AnimationRootNode { return AnimationRootNode{obj:gdClass.obj} }

var methodAnimationNodeBlendTree [11]cMethodBind
func (gdClass AnimationNodeBlendTree) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationRootNode().virtual(rtype, name)
}
func (gdClass AnimationNodeBlendTree) AddNode(name Name, node AnimationNode, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[0], &name, &node, &position) }
func (gdClass AnimationNodeBlendTree) GetNode(name Name) AnimationNode { return methodCall[AnimationNode](gdClass.obj.get(), methodAnimationNodeBlendTree[1], &name) }
func (gdClass AnimationNodeBlendTree) RemoveNode(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[2], &name) }
func (gdClass AnimationNodeBlendTree) RenameNode(name Name, new_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[3], &name, &new_name) }
func (gdClass AnimationNodeBlendTree) HasNode(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeBlendTree[4], &name) }
func (gdClass AnimationNodeBlendTree) ConnectNode(input_node Name, input_index int64, output_node Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[5], &input_node, &input_index, &output_node) }
func (gdClass AnimationNodeBlendTree) DisconnectNode(input_node Name, input_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[6], &input_node, &input_index) }
func (gdClass AnimationNodeBlendTree) SetNodePosition(name Name, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[7], &name, &position) }
func (gdClass AnimationNodeBlendTree) GetNodePosition(name Name) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendTree[8], &name) }
func (gdClass AnimationNodeBlendTree) SetGraphOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeBlendTree[9], &offset) }
func (gdClass AnimationNodeBlendTree) GetGraphOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeBlendTree[10]) }

type AnimationNodeOneShotMixMode int64

const (
	AnimationNodeOneShotMixModeBlend AnimationNodeOneShotMixMode = 0
	AnimationNodeOneShotMixModeAdd AnimationNodeOneShotMixMode = 1
)

type AnimationNodeOneShot struct{self *AnimationNodeOneShot; obj safeObject }
func NewAnimationNodeOneShot(ctx Context, at *AnimationNodeOneShot) AnimationNodeOneShot { if at == nil { at = new(AnimationNodeOneShot) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeOneShot) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeOneShot) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeOneShot) class() string { return "AnimationNodeOneShot\000" }

func (gdClass AnimationNodeOneShot) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

var methodAnimationNodeOneShot [12]cMethodBind
func (gdClass AnimationNodeOneShot) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}
func (gdClass AnimationNodeOneShot) SetFadeinTime(time float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[0], &time) }
func (gdClass AnimationNodeOneShot) GetFadeinTime() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeOneShot[1]) }
func (gdClass AnimationNodeOneShot) SetFadeoutTime(time float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[2], &time) }
func (gdClass AnimationNodeOneShot) GetFadeoutTime() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeOneShot[3]) }
func (gdClass AnimationNodeOneShot) SetAutorestart(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[4], &enable) }
func (gdClass AnimationNodeOneShot) HasAutorestart() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeOneShot[5]) }
func (gdClass AnimationNodeOneShot) SetAutorestartDelay(enable float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[6], &enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartDelay() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeOneShot[7]) }
func (gdClass AnimationNodeOneShot) SetAutorestartRandomDelay(enable float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[8], &enable) }
func (gdClass AnimationNodeOneShot) GetAutorestartRandomDelay() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeOneShot[9]) }
func (gdClass AnimationNodeOneShot) SetMixMode(mode AnimationNodeOneShotMixMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeOneShot[10], &mode) }
func (gdClass AnimationNodeOneShot) GetMixMode() AnimationNodeOneShotMixMode { return methodCall[AnimationNodeOneShotMixMode](gdClass.obj.get(), methodAnimationNodeOneShot[11]) }

type AnimationNodeOutput struct{self *AnimationNodeOutput; obj safeObject }
func NewAnimationNodeOutput(ctx Context, at *AnimationNodeOutput) AnimationNodeOutput { if at == nil { at = new(AnimationNodeOutput) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeOutput) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeOutput) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeOutput) class() string { return "AnimationNodeOutput\000" }

func (gdClass AnimationNodeOutput) AnimationNode() AnimationNode { return AnimationNode{obj:gdClass.obj} }

func (gdClass AnimationNodeOutput) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNode().virtual(rtype, name)
}

type AnimationNodeStateMachine struct{self *AnimationNodeStateMachine; obj safeObject }
func NewAnimationNodeStateMachine(ctx Context, at *AnimationNodeStateMachine) AnimationNodeStateMachine { if at == nil { at = new(AnimationNodeStateMachine) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeStateMachine) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeStateMachine) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeStateMachine) class() string { return "AnimationNodeStateMachine\000" }

func (gdClass AnimationNodeStateMachine) AnimationRootNode() AnimationRootNode { return AnimationRootNode{obj:gdClass.obj} }

var methodAnimationNodeStateMachine [19]cMethodBind
func (gdClass AnimationNodeStateMachine) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationRootNode().virtual(rtype, name)
}
func (gdClass AnimationNodeStateMachine) AddNode(name Name, node AnimationNode, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[0], &name, &node, &position) }
func (gdClass AnimationNodeStateMachine) ReplaceNode(name Name, node AnimationNode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[1], &name, &node) }
func (gdClass AnimationNodeStateMachine) GetNode(name Name) AnimationNode { return methodCall[AnimationNode](gdClass.obj.get(), methodAnimationNodeStateMachine[2], &name) }
func (gdClass AnimationNodeStateMachine) RemoveNode(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[3], &name) }
func (gdClass AnimationNodeStateMachine) RenameNode(name Name, new_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[4], &name, &new_name) }
func (gdClass AnimationNodeStateMachine) HasNode(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeStateMachine[5], &name) }
func (gdClass AnimationNodeStateMachine) GetNodeName(node AnimationNode) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeStateMachine[6], &node) }
func (gdClass AnimationNodeStateMachine) SetNodePosition(name Name, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[7], &name, &position) }
func (gdClass AnimationNodeStateMachine) GetNodePosition(name Name) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeStateMachine[8], &name) }
func (gdClass AnimationNodeStateMachine) HasTransition(from Name, to Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeStateMachine[9], &from, &to) }
func (gdClass AnimationNodeStateMachine) AddTransition(from Name, to Name, transition AnimationNodeStateMachineTransition)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[10], &from, &to, &transition) }
func (gdClass AnimationNodeStateMachine) GetTransition(idx int64) AnimationNodeStateMachineTransition { return methodCall[AnimationNodeStateMachineTransition](gdClass.obj.get(), methodAnimationNodeStateMachine[11], &idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionFrom(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeStateMachine[12], &idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionTo(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeStateMachine[13], &idx) }
func (gdClass AnimationNodeStateMachine) GetTransitionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeStateMachine[14]) }
func (gdClass AnimationNodeStateMachine) RemoveTransitionByIndex(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[15], &idx) }
func (gdClass AnimationNodeStateMachine) RemoveTransition(from Name, to Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[16], &from, &to) }
func (gdClass AnimationNodeStateMachine) SetGraphOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachine[17], &offset) }
func (gdClass AnimationNodeStateMachine) GetGraphOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAnimationNodeStateMachine[18]) }

type AnimationNodeStateMachinePlayback struct{self *AnimationNodeStateMachinePlayback; obj safeObject }
func NewAnimationNodeStateMachinePlayback(ctx Context, at *AnimationNodeStateMachinePlayback) AnimationNodeStateMachinePlayback { if at == nil { at = new(AnimationNodeStateMachinePlayback) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeStateMachinePlayback) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeStateMachinePlayback) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeStateMachinePlayback) class() string { return "AnimationNodeStateMachinePlayback\000" }

func (gdClass AnimationNodeStateMachinePlayback) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAnimationNodeStateMachinePlayback [8]cMethodBind
func (gdClass AnimationNodeStateMachinePlayback) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass AnimationNodeStateMachinePlayback) Travel(to_node Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[0], &to_node) }
func (gdClass AnimationNodeStateMachinePlayback) Start(node Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[1], &node) }
func (gdClass AnimationNodeStateMachinePlayback) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[2]) }
func (gdClass AnimationNodeStateMachinePlayback) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[3]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentNode() Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[4]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentPlayPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[5]) }
func (gdClass AnimationNodeStateMachinePlayback) GetCurrentLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[6]) }
func (gdClass AnimationNodeStateMachinePlayback) GetTravelPath() []string { return methodCall[[]string](gdClass.obj.get(), methodAnimationNodeStateMachinePlayback[7]) }

type AnimationNodeStateMachineTransitionSwitchMode int64

const (
	AnimationNodeStateMachineTransitionSwitchModeImmediate AnimationNodeStateMachineTransitionSwitchMode = 0
	AnimationNodeStateMachineTransitionSwitchModeSync AnimationNodeStateMachineTransitionSwitchMode = 1
	AnimationNodeStateMachineTransitionSwitchModeAtEnd AnimationNodeStateMachineTransitionSwitchMode = 2
)

type AnimationNodeStateMachineTransition struct{self *AnimationNodeStateMachineTransition; obj safeObject }
func NewAnimationNodeStateMachineTransition(ctx Context, at *AnimationNodeStateMachineTransition) AnimationNodeStateMachineTransition { if at == nil { at = new(AnimationNodeStateMachineTransition) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeStateMachineTransition) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeStateMachineTransition) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeStateMachineTransition) class() string { return "AnimationNodeStateMachineTransition\000" }

func (gdClass AnimationNodeStateMachineTransition) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAnimationNodeStateMachineTransition [18]cMethodBind
func (gdClass AnimationNodeStateMachineTransition) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass AnimationNodeStateMachineTransition) SetSwitchMode(mode AnimationNodeStateMachineTransitionSwitchMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[0], &mode) }
func (gdClass AnimationNodeStateMachineTransition) GetSwitchMode() AnimationNodeStateMachineTransitionSwitchMode { return methodCall[AnimationNodeStateMachineTransitionSwitchMode](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[1]) }
func (gdClass AnimationNodeStateMachineTransition) SetAutoAdvance(auto_advance bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[2], &auto_advance) }
func (gdClass AnimationNodeStateMachineTransition) HasAutoAdvance() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[3]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceCondition(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[4], &name) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceCondition() Name { return methodCall[Name](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[5]) }
func (gdClass AnimationNodeStateMachineTransition) SetXfadeTime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[6], &secs) }
func (gdClass AnimationNodeStateMachineTransition) GetXfadeTime() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[7]) }
func (gdClass AnimationNodeStateMachineTransition) SetXfadeCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[8], &curve) }
func (gdClass AnimationNodeStateMachineTransition) GetXfadeCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[9]) }
func (gdClass AnimationNodeStateMachineTransition) SetDisabled(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[10], &disabled) }
func (gdClass AnimationNodeStateMachineTransition) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[11]) }
func (gdClass AnimationNodeStateMachineTransition) SetPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[12], &priority) }
func (gdClass AnimationNodeStateMachineTransition) GetPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[13]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpression(text string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[14], &text) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpression() string { return methodCall[string](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[15]) }
func (gdClass AnimationNodeStateMachineTransition) SetAdvanceExpressionBaseNode(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[16], &path) }
func (gdClass AnimationNodeStateMachineTransition) GetAdvanceExpressionBaseNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimationNodeStateMachineTransition[17]) }

type AnimationNodeSync struct{self *AnimationNodeSync; obj safeObject }
func NewAnimationNodeSync(ctx Context, at *AnimationNodeSync) AnimationNodeSync { if at == nil { at = new(AnimationNodeSync) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeSync) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeSync) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeSync) class() string { return "AnimationNodeSync\000" }

func (gdClass AnimationNodeSync) AnimationNode() AnimationNode { return AnimationNode{obj:gdClass.obj} }

var methodAnimationNodeSync [2]cMethodBind
func (gdClass AnimationNodeSync) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNode().virtual(rtype, name)
}
func (gdClass AnimationNodeSync) SetUseSync(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeSync[0], &enable) }
func (gdClass AnimationNodeSync) IsUsingSync() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeSync[1]) }

type AnimationNodeTimeScale struct{self *AnimationNodeTimeScale; obj safeObject }
func NewAnimationNodeTimeScale(ctx Context, at *AnimationNodeTimeScale) AnimationNodeTimeScale { if at == nil { at = new(AnimationNodeTimeScale) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeTimeScale) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeTimeScale) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeTimeScale) class() string { return "AnimationNodeTimeScale\000" }

func (gdClass AnimationNodeTimeScale) AnimationNode() AnimationNode { return AnimationNode{obj:gdClass.obj} }

func (gdClass AnimationNodeTimeScale) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNode().virtual(rtype, name)
}

type AnimationNodeTimeSeek struct{self *AnimationNodeTimeSeek; obj safeObject }
func NewAnimationNodeTimeSeek(ctx Context, at *AnimationNodeTimeSeek) AnimationNodeTimeSeek { if at == nil { at = new(AnimationNodeTimeSeek) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeTimeSeek) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeTimeSeek) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeTimeSeek) class() string { return "AnimationNodeTimeSeek\000" }

func (gdClass AnimationNodeTimeSeek) AnimationNode() AnimationNode { return AnimationNode{obj:gdClass.obj} }

func (gdClass AnimationNodeTimeSeek) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNode().virtual(rtype, name)
}

type AnimationNodeTransition struct{self *AnimationNodeTransition; obj safeObject }
func NewAnimationNodeTransition(ctx Context, at *AnimationNodeTransition) AnimationNodeTransition { if at == nil { at = new(AnimationNodeTransition) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationNodeTransition) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationNodeTransition) owner() cObject { return gdClass.obj.get() }
func (AnimationNodeTransition) class() string { return "AnimationNodeTransition\000" }

func (gdClass AnimationNodeTransition) AnimationNodeSync() AnimationNodeSync { return AnimationNodeSync{obj:gdClass.obj} }

var methodAnimationNodeTransition [12]cMethodBind
func (gdClass AnimationNodeTransition) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNodeSync().virtual(rtype, name)
}
func (gdClass AnimationNodeTransition) SetEnabledInputs(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[0], &amount) }
func (gdClass AnimationNodeTransition) GetEnabledInputs() int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationNodeTransition[1]) }
func (gdClass AnimationNodeTransition) SetInputAsAutoAdvance(input int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[2], &input, &enable) }
func (gdClass AnimationNodeTransition) IsInputSetAsAutoAdvance(input int64) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeTransition[3], &input) }
func (gdClass AnimationNodeTransition) SetInputCaption(input int64, caption string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[4], &input, &caption) }
func (gdClass AnimationNodeTransition) GetInputCaption(input int64) string { return methodCall[string](gdClass.obj.get(), methodAnimationNodeTransition[5], &input) }
func (gdClass AnimationNodeTransition) SetXfadeTime(time float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[6], &time) }
func (gdClass AnimationNodeTransition) GetXfadeTime() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationNodeTransition[7]) }
func (gdClass AnimationNodeTransition) SetXfadeCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[8], &curve) }
func (gdClass AnimationNodeTransition) GetXfadeCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodAnimationNodeTransition[9]) }
func (gdClass AnimationNodeTransition) SetFromStart(from_start bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationNodeTransition[10], &from_start) }
func (gdClass AnimationNodeTransition) IsFromStart() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationNodeTransition[11]) }

type AnimationPlayerAnimationProcessCallback int64

const (
	AnimationPlayerAnimationProcessPhysics AnimationPlayerAnimationProcessCallback = 0
	AnimationPlayerAnimationProcessIdle AnimationPlayerAnimationProcessCallback = 1
	AnimationPlayerAnimationProcessManual AnimationPlayerAnimationProcessCallback = 2
)

type AnimationPlayerAnimationMethodCallMode int64

const (
	AnimationPlayerAnimationMethodCallDeferred AnimationPlayerAnimationMethodCallMode = 0
	AnimationPlayerAnimationMethodCallImmediate AnimationPlayerAnimationMethodCallMode = 1
)

type AnimationPlayer struct{self *AnimationPlayer; obj safeObject }
func NewAnimationPlayer(ctx Context, at *AnimationPlayer) AnimationPlayer { if at == nil { at = new(AnimationPlayer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimationPlayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationPlayer) owner() cObject { return gdClass.obj.get() }
func (AnimationPlayer) class() string { return "AnimationPlayer\000" }

func (gdClass AnimationPlayer) Node() Node { return Node{obj:gdClass.obj} }

var methodAnimationPlayer [50]cMethodBind
func (gdClass AnimationPlayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass AnimationPlayer) AddAnimationLibrary(name Name, library AnimationLibrary) int64 { return methodCall[int64](gdClass.obj.get(), methodAnimationPlayer[0], &name, &library) }
func (gdClass AnimationPlayer) RemoveAnimationLibrary(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[1], &name) }
func (gdClass AnimationPlayer) RenameAnimationLibrary(name Name, newname Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[2], &name, &newname) }
func (gdClass AnimationPlayer) HasAnimationLibrary(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[3], &name) }
func (gdClass AnimationPlayer) GetAnimationLibrary(name Name) AnimationLibrary { return methodCall[AnimationLibrary](gdClass.obj.get(), methodAnimationPlayer[4], &name) }
func (gdClass AnimationPlayer) GetAnimationLibraryList() Array { return methodCall[Array](gdClass.obj.get(), methodAnimationPlayer[5]) }
func (gdClass AnimationPlayer) HasAnimation(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[6], &name) }
func (gdClass AnimationPlayer) GetAnimation(name Name) Animation { return methodCall[Animation](gdClass.obj.get(), methodAnimationPlayer[7], &name) }
func (gdClass AnimationPlayer) GetAnimationList() []string { return methodCall[[]string](gdClass.obj.get(), methodAnimationPlayer[8]) }
func (gdClass AnimationPlayer) AnimationSetNext(anim_from Name, anim_to Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[9], &anim_from, &anim_to) }
func (gdClass AnimationPlayer) AnimationGetNext(anim_from Name) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationPlayer[10], &anim_from) }
func (gdClass AnimationPlayer) SetBlendTime(anim_from Name, anim_to Name, sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[11], &anim_from, &anim_to, &sec) }
func (gdClass AnimationPlayer) GetBlendTime(anim_from Name, anim_to Name) float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[12], &anim_from, &anim_to) }
func (gdClass AnimationPlayer) SetDefaultBlendTime(sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[13], &sec) }
func (gdClass AnimationPlayer) GetDefaultBlendTime() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[14]) }
func (gdClass AnimationPlayer) Play(name Name, custom_blend float64, custom_speed float64, from_end bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[15], &name, &custom_blend, &custom_speed, &from_end) }
func (gdClass AnimationPlayer) PlayBackwards(name Name, custom_blend float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[16], &name, &custom_blend) }
func (gdClass AnimationPlayer) Stop(reset bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[17], &reset) }
func (gdClass AnimationPlayer) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[18]) }
func (gdClass AnimationPlayer) SetCurrentAnimation(anim string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[19], &anim) }
func (gdClass AnimationPlayer) GetCurrentAnimation() string { return methodCall[string](gdClass.obj.get(), methodAnimationPlayer[20]) }
func (gdClass AnimationPlayer) SetAssignedAnimation(anim string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[21], &anim) }
func (gdClass AnimationPlayer) GetAssignedAnimation() string { return methodCall[string](gdClass.obj.get(), methodAnimationPlayer[22]) }
func (gdClass AnimationPlayer) Queue(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[23], &name) }
func (gdClass AnimationPlayer) GetQueue() []string { return methodCall[[]string](gdClass.obj.get(), methodAnimationPlayer[24]) }
func (gdClass AnimationPlayer) ClearQueue()  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[25]) }
func (gdClass AnimationPlayer) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[26], &active) }
func (gdClass AnimationPlayer) IsActive() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[27]) }
func (gdClass AnimationPlayer) SetSpeedScale(speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[28], &speed) }
func (gdClass AnimationPlayer) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[29]) }
func (gdClass AnimationPlayer) GetPlayingSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[30]) }
func (gdClass AnimationPlayer) SetAutoplay(name string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[31], &name) }
func (gdClass AnimationPlayer) GetAutoplay() string { return methodCall[string](gdClass.obj.get(), methodAnimationPlayer[32]) }
func (gdClass AnimationPlayer) SetResetOnSaveEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[33], &enabled) }
func (gdClass AnimationPlayer) IsResetOnSaveEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[34]) }
func (gdClass AnimationPlayer) SetRoot(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[35], &path) }
func (gdClass AnimationPlayer) GetRoot() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimationPlayer[36]) }
func (gdClass AnimationPlayer) FindAnimation(animation Animation) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationPlayer[37], &animation) }
func (gdClass AnimationPlayer) FindAnimationLibrary(animation Animation) Name { return methodCall[Name](gdClass.obj.get(), methodAnimationPlayer[38], &animation) }
func (gdClass AnimationPlayer) ClearCaches()  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[39]) }
func (gdClass AnimationPlayer) SetProcessCallback(mode AnimationPlayerAnimationProcessCallback)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[40], &mode) }
func (gdClass AnimationPlayer) GetProcessCallback() AnimationPlayerAnimationProcessCallback { return methodCall[AnimationPlayerAnimationProcessCallback](gdClass.obj.get(), methodAnimationPlayer[41]) }
func (gdClass AnimationPlayer) SetMethodCallMode(mode AnimationPlayerAnimationMethodCallMode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[42], &mode) }
func (gdClass AnimationPlayer) GetMethodCallMode() AnimationPlayerAnimationMethodCallMode { return methodCall[AnimationPlayerAnimationMethodCallMode](gdClass.obj.get(), methodAnimationPlayer[43]) }
func (gdClass AnimationPlayer) SetMovieQuitOnFinishEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[44], &enabled) }
func (gdClass AnimationPlayer) IsMovieQuitOnFinishEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationPlayer[45]) }
func (gdClass AnimationPlayer) GetCurrentAnimationPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[46]) }
func (gdClass AnimationPlayer) GetCurrentAnimationLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAnimationPlayer[47]) }
func (gdClass AnimationPlayer) SeekTo(seconds float64, update bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[48], &seconds, &update) }
func (gdClass AnimationPlayer) Advance(delta float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationPlayer[49], &delta) }

type AnimationRootNode struct{self *AnimationRootNode; obj safeObject }
func NewAnimationRootNode(ctx Context, at *AnimationRootNode) AnimationRootNode { if at == nil { at = new(AnimationRootNode) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationRootNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationRootNode) owner() cObject { return gdClass.obj.get() }
func (AnimationRootNode) class() string { return "AnimationRootNode\000" }

func (gdClass AnimationRootNode) AnimationNode() AnimationNode { return AnimationNode{obj:gdClass.obj} }

func (gdClass AnimationRootNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AnimationNode().virtual(rtype, name)
}

type AnimationTrackEditPlugin struct{self *AnimationTrackEditPlugin; obj safeObject }
func NewAnimationTrackEditPlugin(ctx Context, at *AnimationTrackEditPlugin) AnimationTrackEditPlugin { if at == nil { at = new(AnimationTrackEditPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AnimationTrackEditPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationTrackEditPlugin) owner() cObject { return gdClass.obj.get() }
func (AnimationTrackEditPlugin) class() string { return "AnimationTrackEditPlugin\000" }

func (gdClass AnimationTrackEditPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass AnimationTrackEditPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type AnimationTreeAnimationProcessCallback int64

const (
	AnimationTreeAnimationProcessPhysics AnimationTreeAnimationProcessCallback = 0
	AnimationTreeAnimationProcessIdle AnimationTreeAnimationProcessCallback = 1
	AnimationTreeAnimationProcessManual AnimationTreeAnimationProcessCallback = 2
)

type AnimationTree struct{self *AnimationTree; obj safeObject }
func NewAnimationTree(ctx Context, at *AnimationTree) AnimationTree { if at == nil { at = new(AnimationTree) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AnimationTree) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AnimationTree) owner() cObject { return gdClass.obj.get() }
func (AnimationTree) class() string { return "AnimationTree\000" }

func (gdClass AnimationTree) Node() Node { return Node{obj:gdClass.obj} }

var methodAnimationTree [15]cMethodBind
func (gdClass AnimationTree) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass AnimationTree) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[0], &active) }
func (gdClass AnimationTree) IsActive() bool { return methodCall[bool](gdClass.obj.get(), methodAnimationTree[1]) }
func (gdClass AnimationTree) SetTreeRoot(root AnimationNode)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[2], &root) }
func (gdClass AnimationTree) GetTreeRoot() AnimationNode { return methodCall[AnimationNode](gdClass.obj.get(), methodAnimationTree[3]) }
func (gdClass AnimationTree) SetProcessCallback(mode AnimationTreeAnimationProcessCallback)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[4], &mode) }
func (gdClass AnimationTree) GetProcessCallback() AnimationTreeAnimationProcessCallback { return methodCall[AnimationTreeAnimationProcessCallback](gdClass.obj.get(), methodAnimationTree[5]) }
func (gdClass AnimationTree) SetAnimationPlayer(root NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[6], &root) }
func (gdClass AnimationTree) GetAnimationPlayer() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimationTree[7]) }
func (gdClass AnimationTree) SetAdvanceExpressionBaseNode(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[8], &node) }
func (gdClass AnimationTree) GetAdvanceExpressionBaseNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimationTree[9]) }
func (gdClass AnimationTree) SetRootMotionTrack(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[10], &path) }
func (gdClass AnimationTree) GetRootMotionTrack() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodAnimationTree[11]) }
func (gdClass AnimationTree) GetRootMotionTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodAnimationTree[12]) }
func (gdClass AnimationTree) RenameParameter(old_name string, new_name string)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[13], &old_name, &new_name) }
func (gdClass AnimationTree) Advance(delta float64)  { methodCall[struct{}](gdClass.obj.get(), methodAnimationTree[14], &delta) }

type Area2DSpaceOverride int64

const (
	Area2DSpaceOverrideDisabled Area2DSpaceOverride = 0
	Area2DSpaceOverrideCombine Area2DSpaceOverride = 1
	Area2DSpaceOverrideCombineReplace Area2DSpaceOverride = 2
	Area2DSpaceOverrideReplace Area2DSpaceOverride = 3
	Area2DSpaceOverrideReplaceCombine Area2DSpaceOverride = 4
)

type Area2D struct{self *Area2D; obj safeObject }
func NewArea2D(ctx Context, at *Area2D) Area2D { if at == nil { at = new(Area2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Area2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Area2D) owner() cObject { return gdClass.obj.get() }
func (Area2D) class() string { return "Area2D\000" }

func (gdClass Area2D) CollisionObject2D() CollisionObject2D { return CollisionObject2D{obj:gdClass.obj} }

var methodArea2D [34]cMethodBind
func (gdClass Area2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CollisionObject2D().virtual(rtype, name)
}
func (gdClass Area2D) SetGravitySpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[0], &space_override_mode) }
func (gdClass Area2D) GetGravitySpaceOverrideMode() Area2DSpaceOverride { return methodCall[Area2DSpaceOverride](gdClass.obj.get(), methodArea2D[1]) }
func (gdClass Area2D) SetGravityIsPoint(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[2], &enable) }
func (gdClass Area2D) IsGravityAPoint() bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[3]) }
func (gdClass Area2D) SetGravityPointDistanceScale(distance_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[4], &distance_scale) }
func (gdClass Area2D) GetGravityPointDistanceScale() float64 { return methodCall[float64](gdClass.obj.get(), methodArea2D[5]) }
func (gdClass Area2D) SetGravityPointCenter(center Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[6], &center) }
func (gdClass Area2D) GetGravityPointCenter() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodArea2D[7]) }
func (gdClass Area2D) SetGravityDirection(direction Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[8], &direction) }
func (gdClass Area2D) GetGravityDirection() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodArea2D[9]) }
func (gdClass Area2D) SetGravity(gravity float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[10], &gravity) }
func (gdClass Area2D) GetGravity() float64 { return methodCall[float64](gdClass.obj.get(), methodArea2D[11]) }
func (gdClass Area2D) SetLinearDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[12], &space_override_mode) }
func (gdClass Area2D) GetLinearDampSpaceOverrideMode() Area2DSpaceOverride { return methodCall[Area2DSpaceOverride](gdClass.obj.get(), methodArea2D[13]) }
func (gdClass Area2D) SetAngularDampSpaceOverrideMode(space_override_mode Area2DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[14], &space_override_mode) }
func (gdClass Area2D) GetAngularDampSpaceOverrideMode() Area2DSpaceOverride { return methodCall[Area2DSpaceOverride](gdClass.obj.get(), methodArea2D[15]) }
func (gdClass Area2D) SetLinearDamp(linear_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[16], &linear_damp) }
func (gdClass Area2D) GetLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodArea2D[17]) }
func (gdClass Area2D) SetAngularDamp(angular_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[18], &angular_damp) }
func (gdClass Area2D) GetAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodArea2D[19]) }
func (gdClass Area2D) SetPriority(priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[20], &priority) }
func (gdClass Area2D) GetPriority() float64 { return methodCall[float64](gdClass.obj.get(), methodArea2D[21]) }
func (gdClass Area2D) SetMonitoring(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[22], &enable) }
func (gdClass Area2D) IsMonitoring() bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[23]) }
func (gdClass Area2D) SetMonitorable(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[24], &enable) }
func (gdClass Area2D) IsMonitorable() bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[25]) }
func (gdClass Area2D) GetOverlappingBodies() Array { return methodCall[Array](gdClass.obj.get(), methodArea2D[26]) }
func (gdClass Area2D) GetOverlappingAreas() Array { return methodCall[Array](gdClass.obj.get(), methodArea2D[27]) }
func (gdClass Area2D) OverlapsBody(body Node) bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[28], &body) }
func (gdClass Area2D) OverlapsArea(area Node) bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[29], &area) }
func (gdClass Area2D) SetAudioBusName(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[30], &name) }
func (gdClass Area2D) GetAudioBusName() Name { return methodCall[Name](gdClass.obj.get(), methodArea2D[31]) }
func (gdClass Area2D) SetAudioBusOverride(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea2D[32], &enable) }
func (gdClass Area2D) IsOverridingAudioBus() bool { return methodCall[bool](gdClass.obj.get(), methodArea2D[33]) }

type Area3DSpaceOverride int64

const (
	Area3DSpaceOverrideDisabled Area3DSpaceOverride = 0
	Area3DSpaceOverrideCombine Area3DSpaceOverride = 1
	Area3DSpaceOverrideCombineReplace Area3DSpaceOverride = 2
	Area3DSpaceOverrideReplace Area3DSpaceOverride = 3
	Area3DSpaceOverrideReplaceCombine Area3DSpaceOverride = 4
)

type Area3D struct{self *Area3D; obj safeObject }
func NewArea3D(ctx Context, at *Area3D) Area3D { if at == nil { at = new(Area3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Area3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Area3D) owner() cObject { return gdClass.obj.get() }
func (Area3D) class() string { return "Area3D\000" }

func (gdClass Area3D) CollisionObject3D() CollisionObject3D { return CollisionObject3D{obj:gdClass.obj} }

var methodArea3D [48]cMethodBind
func (gdClass Area3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CollisionObject3D().virtual(rtype, name)
}
func (gdClass Area3D) SetGravitySpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[0], &space_override_mode) }
func (gdClass Area3D) GetGravitySpaceOverrideMode() Area3DSpaceOverride { return methodCall[Area3DSpaceOverride](gdClass.obj.get(), methodArea3D[1]) }
func (gdClass Area3D) SetGravityIsPoint(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[2], &enable) }
func (gdClass Area3D) IsGravityAPoint() bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[3]) }
func (gdClass Area3D) SetGravityPointDistanceScale(distance_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[4], &distance_scale) }
func (gdClass Area3D) GetGravityPointDistanceScale() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[5]) }
func (gdClass Area3D) SetGravityPointCenter(center Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[6], &center) }
func (gdClass Area3D) GetGravityPointCenter() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodArea3D[7]) }
func (gdClass Area3D) SetGravityDirection(direction Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[8], &direction) }
func (gdClass Area3D) GetGravityDirection() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodArea3D[9]) }
func (gdClass Area3D) SetGravity(gravity float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[10], &gravity) }
func (gdClass Area3D) GetGravity() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[11]) }
func (gdClass Area3D) SetLinearDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[12], &space_override_mode) }
func (gdClass Area3D) GetLinearDampSpaceOverrideMode() Area3DSpaceOverride { return methodCall[Area3DSpaceOverride](gdClass.obj.get(), methodArea3D[13]) }
func (gdClass Area3D) SetAngularDampSpaceOverrideMode(space_override_mode Area3DSpaceOverride)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[14], &space_override_mode) }
func (gdClass Area3D) GetAngularDampSpaceOverrideMode() Area3DSpaceOverride { return methodCall[Area3DSpaceOverride](gdClass.obj.get(), methodArea3D[15]) }
func (gdClass Area3D) SetAngularDamp(angular_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[16], &angular_damp) }
func (gdClass Area3D) GetAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[17]) }
func (gdClass Area3D) SetLinearDamp(linear_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[18], &linear_damp) }
func (gdClass Area3D) GetLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[19]) }
func (gdClass Area3D) SetPriority(priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[20], &priority) }
func (gdClass Area3D) GetPriority() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[21]) }
func (gdClass Area3D) SetWindForceMagnitude(wind_force_magnitude float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[22], &wind_force_magnitude) }
func (gdClass Area3D) GetWindForceMagnitude() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[23]) }
func (gdClass Area3D) SetWindAttenuationFactor(wind_attenuation_factor float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[24], &wind_attenuation_factor) }
func (gdClass Area3D) GetWindAttenuationFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[25]) }
func (gdClass Area3D) SetWindSourcePath(wind_source_path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[26], &wind_source_path) }
func (gdClass Area3D) GetWindSourcePath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodArea3D[27]) }
func (gdClass Area3D) SetMonitorable(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[28], &enable) }
func (gdClass Area3D) IsMonitorable() bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[29]) }
func (gdClass Area3D) SetMonitoring(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[30], &enable) }
func (gdClass Area3D) IsMonitoring() bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[31]) }
func (gdClass Area3D) GetOverlappingBodies() Array { return methodCall[Array](gdClass.obj.get(), methodArea3D[32]) }
func (gdClass Area3D) GetOverlappingAreas() Array { return methodCall[Array](gdClass.obj.get(), methodArea3D[33]) }
func (gdClass Area3D) OverlapsBody(body Node) bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[34], &body) }
func (gdClass Area3D) OverlapsArea(area Node) bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[35], &area) }
func (gdClass Area3D) SetAudioBusOverride(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[36], &enable) }
func (gdClass Area3D) IsOverridingAudioBus() bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[37]) }
func (gdClass Area3D) SetAudioBusName(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[38], &name) }
func (gdClass Area3D) GetAudioBusName() Name { return methodCall[Name](gdClass.obj.get(), methodArea3D[39]) }
func (gdClass Area3D) SetUseReverbBus(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[40], &enable) }
func (gdClass Area3D) IsUsingReverbBus() bool { return methodCall[bool](gdClass.obj.get(), methodArea3D[41]) }
func (gdClass Area3D) SetReverbBus(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[42], &name) }
func (gdClass Area3D) GetReverbBus() Name { return methodCall[Name](gdClass.obj.get(), methodArea3D[43]) }
func (gdClass Area3D) SetReverbAmount(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[44], &amount) }
func (gdClass Area3D) GetReverbAmount() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[45]) }
func (gdClass Area3D) SetReverbUniformity(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodArea3D[46], &amount) }
func (gdClass Area3D) GetReverbUniformity() float64 { return methodCall[float64](gdClass.obj.get(), methodArea3D[47]) }

type ArrayMesh struct{self *ArrayMesh; obj safeObject }
func NewArrayMesh(ctx Context, at *ArrayMesh) ArrayMesh { if at == nil { at = new(ArrayMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ArrayMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ArrayMesh) owner() cObject { return gdClass.obj.get() }
func (ArrayMesh) class() string { return "ArrayMesh\000" }

func (gdClass ArrayMesh) Mesh() Mesh { return Mesh{obj:gdClass.obj} }

var methodArrayMesh [25]cMethodBind
func (gdClass ArrayMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Mesh().virtual(rtype, name)
}
func (gdClass ArrayMesh) AddBlendShape(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[0], &name) }
func (gdClass ArrayMesh) GetBlendShapeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[1]) }
func (gdClass ArrayMesh) GetBlendShapeName(index int64) Name { return methodCall[Name](gdClass.obj.get(), methodArrayMesh[2], &index) }
func (gdClass ArrayMesh) SetBlendShapeName(index int64, name Name)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[3], &index, &name) }
func (gdClass ArrayMesh) ClearBlendShapes()  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[4]) }
func (gdClass ArrayMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[5], &mode) }
func (gdClass ArrayMesh) GetBlendShapeMode() MeshBlendShapeMode { return methodCall[MeshBlendShapeMode](gdClass.obj.get(), methodArrayMesh[6]) }
func (gdClass ArrayMesh) AddSurfaceFromArrays(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[7], &primitive, &arrays, &blend_shapes, &lods, &compress_flags) }
func (gdClass ArrayMesh) ClearSurfaces()  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[8]) }
func (gdClass ArrayMesh) SurfaceUpdateVertexRegion(surf_idx int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[9], &surf_idx, &offset, &data) }
func (gdClass ArrayMesh) SurfaceUpdateAttributeRegion(surf_idx int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[10], &surf_idx, &offset, &data) }
func (gdClass ArrayMesh) SurfaceUpdateSkinRegion(surf_idx int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[11], &surf_idx, &offset, &data) }
func (gdClass ArrayMesh) SurfaceGetArrayLen(surf_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[12], &surf_idx) }
func (gdClass ArrayMesh) SurfaceGetArrayIndexLen(surf_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[13], &surf_idx) }
func (gdClass ArrayMesh) SurfaceGetFormat(surf_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[14], &surf_idx) }
func (gdClass ArrayMesh) SurfaceGetPrimitiveType(surf_idx int64) MeshPrimitiveType { return methodCall[MeshPrimitiveType](gdClass.obj.get(), methodArrayMesh[15], &surf_idx) }
func (gdClass ArrayMesh) SurfaceFindByName(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[16], &name) }
func (gdClass ArrayMesh) SurfaceSetName(surf_idx int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[17], &surf_idx, &name) }
func (gdClass ArrayMesh) SurfaceGetName(surf_idx int64) string { return methodCall[string](gdClass.obj.get(), methodArrayMesh[18], &surf_idx) }
func (gdClass ArrayMesh) RegenNormalMaps()  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[19]) }
func (gdClass ArrayMesh) LightmapUnwrap(transform Transform3D, texel_size float64) int64 { return methodCall[int64](gdClass.obj.get(), methodArrayMesh[20], &transform, &texel_size) }
func (gdClass ArrayMesh) SetCustomAabb(aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[21], &aabb) }
func (gdClass ArrayMesh) GetCustomAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodArrayMesh[22]) }
func (gdClass ArrayMesh) SetShadowMesh(mesh ArrayMesh)  { methodCall[struct{}](gdClass.obj.get(), methodArrayMesh[23], &mesh) }
func (gdClass ArrayMesh) GetShadowMesh() ArrayMesh { return methodCall[ArrayMesh](gdClass.obj.get(), methodArrayMesh[24]) }

type ArrayOccluder3D struct{self *ArrayOccluder3D; obj safeObject }
func NewArrayOccluder3D(ctx Context, at *ArrayOccluder3D) ArrayOccluder3D { if at == nil { at = new(ArrayOccluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ArrayOccluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ArrayOccluder3D) owner() cObject { return gdClass.obj.get() }
func (ArrayOccluder3D) class() string { return "ArrayOccluder3D\000" }

func (gdClass ArrayOccluder3D) Occluder3D() Occluder3D { return Occluder3D{obj:gdClass.obj} }

var methodArrayOccluder3D [3]cMethodBind
func (gdClass ArrayOccluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Occluder3D().virtual(rtype, name)
}
func (gdClass ArrayOccluder3D) SetArrays(vertices []Vector3, indices []int32)  { methodCall[struct{}](gdClass.obj.get(), methodArrayOccluder3D[0], &vertices, &indices) }
func (gdClass ArrayOccluder3D) SetVertices(vertices []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodArrayOccluder3D[1], &vertices) }
func (gdClass ArrayOccluder3D) SetIndices(indices []int32)  { methodCall[struct{}](gdClass.obj.get(), methodArrayOccluder3D[2], &indices) }

type AspectRatioContainerStretchMode int64

const (
	AspectRatioContainerStretchWidthControlsHeight AspectRatioContainerStretchMode = 0
	AspectRatioContainerStretchHeightControlsWidth AspectRatioContainerStretchMode = 1
	AspectRatioContainerStretchFit AspectRatioContainerStretchMode = 2
	AspectRatioContainerStretchCover AspectRatioContainerStretchMode = 3
)

type AspectRatioContainerAlignmentMode int64

const (
	AspectRatioContainerAlignmentBegin AspectRatioContainerAlignmentMode = 0
	AspectRatioContainerAlignmentCenter AspectRatioContainerAlignmentMode = 1
	AspectRatioContainerAlignmentEnd AspectRatioContainerAlignmentMode = 2
)

type AspectRatioContainer struct{self *AspectRatioContainer; obj safeObject }
func NewAspectRatioContainer(ctx Context, at *AspectRatioContainer) AspectRatioContainer { if at == nil { at = new(AspectRatioContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AspectRatioContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AspectRatioContainer) owner() cObject { return gdClass.obj.get() }
func (AspectRatioContainer) class() string { return "AspectRatioContainer\000" }

func (gdClass AspectRatioContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodAspectRatioContainer [8]cMethodBind
func (gdClass AspectRatioContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass AspectRatioContainer) SetRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodAspectRatioContainer[0], &ratio) }
func (gdClass AspectRatioContainer) GetRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodAspectRatioContainer[1]) }
func (gdClass AspectRatioContainer) SetStretchMode(stretch_mode AspectRatioContainerStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodAspectRatioContainer[2], &stretch_mode) }
func (gdClass AspectRatioContainer) GetStretchMode() AspectRatioContainerStretchMode { return methodCall[AspectRatioContainerStretchMode](gdClass.obj.get(), methodAspectRatioContainer[3]) }
func (gdClass AspectRatioContainer) SetAlignmentHorizontal(alignment_horizontal AspectRatioContainerAlignmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodAspectRatioContainer[4], &alignment_horizontal) }
func (gdClass AspectRatioContainer) GetAlignmentHorizontal() AspectRatioContainerAlignmentMode { return methodCall[AspectRatioContainerAlignmentMode](gdClass.obj.get(), methodAspectRatioContainer[5]) }
func (gdClass AspectRatioContainer) SetAlignmentVertical(alignment_vertical AspectRatioContainerAlignmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodAspectRatioContainer[6], &alignment_vertical) }
func (gdClass AspectRatioContainer) GetAlignmentVertical() AspectRatioContainerAlignmentMode { return methodCall[AspectRatioContainerAlignmentMode](gdClass.obj.get(), methodAspectRatioContainer[7]) }

type AtlasTexture struct{self *AtlasTexture; obj safeObject }
func NewAtlasTexture(ctx Context, at *AtlasTexture) AtlasTexture { if at == nil { at = new(AtlasTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AtlasTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AtlasTexture) owner() cObject { return gdClass.obj.get() }
func (AtlasTexture) class() string { return "AtlasTexture\000" }

func (gdClass AtlasTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodAtlasTexture [8]cMethodBind
func (gdClass AtlasTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass AtlasTexture) SetAtlas(atlas Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodAtlasTexture[0], &atlas) }
func (gdClass AtlasTexture) GetAtlas() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodAtlasTexture[1]) }
func (gdClass AtlasTexture) SetRegion(region Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodAtlasTexture[2], &region) }
func (gdClass AtlasTexture) GetRegion() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodAtlasTexture[3]) }
func (gdClass AtlasTexture) SetMargin(margin Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodAtlasTexture[4], &margin) }
func (gdClass AtlasTexture) GetMargin() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodAtlasTexture[5]) }
func (gdClass AtlasTexture) SetFilterClip(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAtlasTexture[6], &enable) }
func (gdClass AtlasTexture) HasFilterClip() bool { return methodCall[bool](gdClass.obj.get(), methodAtlasTexture[7]) }

type AudioBusLayout struct{self *AudioBusLayout; obj safeObject }
func NewAudioBusLayout(ctx Context, at *AudioBusLayout) AudioBusLayout { if at == nil { at = new(AudioBusLayout) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioBusLayout) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioBusLayout) owner() cObject { return gdClass.obj.get() }
func (AudioBusLayout) class() string { return "AudioBusLayout\000" }

func (gdClass AudioBusLayout) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass AudioBusLayout) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}

type AudioEffect struct{self *AudioEffect; obj safeObject }
func NewAudioEffect(ctx Context, at *AudioEffect) AudioEffect { if at == nil { at = new(AudioEffect) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffect) owner() cObject { return gdClass.obj.get() }
func (AudioEffect) class() string { return "AudioEffect\000" }

func (gdClass AudioEffect) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass AudioEffect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_instantiate":
		if rtype.Implements(reflect.TypeOf([0]interface{ Instantiate() AudioEffectInstance }{}).Elem()) {
			return rtype.MethodByName(`Instantiate`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}

type AudioEffectAmplify struct{self *AudioEffectAmplify; obj safeObject }
func NewAudioEffectAmplify(ctx Context, at *AudioEffectAmplify) AudioEffectAmplify { if at == nil { at = new(AudioEffectAmplify) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectAmplify) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectAmplify) owner() cObject { return gdClass.obj.get() }
func (AudioEffectAmplify) class() string { return "AudioEffectAmplify\000" }

func (gdClass AudioEffectAmplify) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectAmplify [2]cMethodBind
func (gdClass AudioEffectAmplify) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectAmplify) SetVolumeDb(volume float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectAmplify[0], &volume) }
func (gdClass AudioEffectAmplify) GetVolumeDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectAmplify[1]) }

type AudioEffectBandLimitFilter struct{self *AudioEffectBandLimitFilter; obj safeObject }
func NewAudioEffectBandLimitFilter(ctx Context, at *AudioEffectBandLimitFilter) AudioEffectBandLimitFilter { if at == nil { at = new(AudioEffectBandLimitFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectBandLimitFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectBandLimitFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectBandLimitFilter) class() string { return "AudioEffectBandLimitFilter\000" }

func (gdClass AudioEffectBandLimitFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectBandLimitFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectBandPassFilter struct{self *AudioEffectBandPassFilter; obj safeObject }
func NewAudioEffectBandPassFilter(ctx Context, at *AudioEffectBandPassFilter) AudioEffectBandPassFilter { if at == nil { at = new(AudioEffectBandPassFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectBandPassFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectBandPassFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectBandPassFilter) class() string { return "AudioEffectBandPassFilter\000" }

func (gdClass AudioEffectBandPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectBandPassFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectCapture struct{self *AudioEffectCapture; obj safeObject }
func NewAudioEffectCapture(ctx Context, at *AudioEffectCapture) AudioEffectCapture { if at == nil { at = new(AudioEffectCapture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectCapture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectCapture) owner() cObject { return gdClass.obj.get() }
func (AudioEffectCapture) class() string { return "AudioEffectCapture\000" }

func (gdClass AudioEffectCapture) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectCapture [9]cMethodBind
func (gdClass AudioEffectCapture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectCapture) CanGetBuffer(frames int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioEffectCapture[0], &frames) }
func (gdClass AudioEffectCapture) GetBuffer(frames int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodAudioEffectCapture[1], &frames) }
func (gdClass AudioEffectCapture) ClearBuffer()  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCapture[2]) }
func (gdClass AudioEffectCapture) SetBufferLength(buffer_length_seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCapture[3], &buffer_length_seconds) }
func (gdClass AudioEffectCapture) GetBufferLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCapture[4]) }
func (gdClass AudioEffectCapture) GetFramesAvailable() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectCapture[5]) }
func (gdClass AudioEffectCapture) GetDiscardedFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectCapture[6]) }
func (gdClass AudioEffectCapture) GetBufferLengthFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectCapture[7]) }
func (gdClass AudioEffectCapture) GetPushedFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectCapture[8]) }

type AudioEffectChorus struct{self *AudioEffectChorus; obj safeObject }
func NewAudioEffectChorus(ctx Context, at *AudioEffectChorus) AudioEffectChorus { if at == nil { at = new(AudioEffectChorus) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectChorus) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectChorus) owner() cObject { return gdClass.obj.get() }
func (AudioEffectChorus) class() string { return "AudioEffectChorus\000" }

func (gdClass AudioEffectChorus) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectChorus [18]cMethodBind
func (gdClass AudioEffectChorus) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectChorus) SetVoiceCount(voices int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[0], &voices) }
func (gdClass AudioEffectChorus) GetVoiceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectChorus[1]) }
func (gdClass AudioEffectChorus) SetVoiceDelayMs(voice_idx int64, delay_ms float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[2], &voice_idx, &delay_ms) }
func (gdClass AudioEffectChorus) GetVoiceDelayMs(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[3], &voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceRateHz(voice_idx int64, rate_hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[4], &voice_idx, &rate_hz) }
func (gdClass AudioEffectChorus) GetVoiceRateHz(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[5], &voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceDepthMs(voice_idx int64, depth_ms float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[6], &voice_idx, &depth_ms) }
func (gdClass AudioEffectChorus) GetVoiceDepthMs(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[7], &voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceLevelDb(voice_idx int64, level_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[8], &voice_idx, &level_db) }
func (gdClass AudioEffectChorus) GetVoiceLevelDb(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[9], &voice_idx) }
func (gdClass AudioEffectChorus) SetVoiceCutoffHz(voice_idx int64, cutoff_hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[10], &voice_idx, &cutoff_hz) }
func (gdClass AudioEffectChorus) GetVoiceCutoffHz(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[11], &voice_idx) }
func (gdClass AudioEffectChorus) SetVoicePan(voice_idx int64, pan float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[12], &voice_idx, &pan) }
func (gdClass AudioEffectChorus) GetVoicePan(voice_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[13], &voice_idx) }
func (gdClass AudioEffectChorus) SetWet(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[14], &amount) }
func (gdClass AudioEffectChorus) GetWet() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[15]) }
func (gdClass AudioEffectChorus) SetDry(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectChorus[16], &amount) }
func (gdClass AudioEffectChorus) GetDry() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectChorus[17]) }

type AudioEffectCompressor struct{self *AudioEffectCompressor; obj safeObject }
func NewAudioEffectCompressor(ctx Context, at *AudioEffectCompressor) AudioEffectCompressor { if at == nil { at = new(AudioEffectCompressor) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectCompressor) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectCompressor) owner() cObject { return gdClass.obj.get() }
func (AudioEffectCompressor) class() string { return "AudioEffectCompressor\000" }

func (gdClass AudioEffectCompressor) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectCompressor [14]cMethodBind
func (gdClass AudioEffectCompressor) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectCompressor) SetThreshold(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[0], &threshold) }
func (gdClass AudioEffectCompressor) GetThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[1]) }
func (gdClass AudioEffectCompressor) SetRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[2], &ratio) }
func (gdClass AudioEffectCompressor) GetRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[3]) }
func (gdClass AudioEffectCompressor) SetGain(gain float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[4], &gain) }
func (gdClass AudioEffectCompressor) GetGain() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[5]) }
func (gdClass AudioEffectCompressor) SetAttackUs(attack_us float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[6], &attack_us) }
func (gdClass AudioEffectCompressor) GetAttackUs() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[7]) }
func (gdClass AudioEffectCompressor) SetReleaseMs(release_ms float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[8], &release_ms) }
func (gdClass AudioEffectCompressor) GetReleaseMs() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[9]) }
func (gdClass AudioEffectCompressor) SetMix(mix float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[10], &mix) }
func (gdClass AudioEffectCompressor) GetMix() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectCompressor[11]) }
func (gdClass AudioEffectCompressor) SetSidechain(sidechain Name)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectCompressor[12], &sidechain) }
func (gdClass AudioEffectCompressor) GetSidechain() Name { return methodCall[Name](gdClass.obj.get(), methodAudioEffectCompressor[13]) }

type AudioEffectDelay struct{self *AudioEffectDelay; obj safeObject }
func NewAudioEffectDelay(ctx Context, at *AudioEffectDelay) AudioEffectDelay { if at == nil { at = new(AudioEffectDelay) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectDelay) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectDelay) owner() cObject { return gdClass.obj.get() }
func (AudioEffectDelay) class() string { return "AudioEffectDelay\000" }

func (gdClass AudioEffectDelay) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectDelay [26]cMethodBind
func (gdClass AudioEffectDelay) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectDelay) SetDry(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[0], &amount) }
func (gdClass AudioEffectDelay) GetDry() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[1]) }
func (gdClass AudioEffectDelay) SetTap1Active(amount bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[2], &amount) }
func (gdClass AudioEffectDelay) IsTap1Active() bool { return methodCall[bool](gdClass.obj.get(), methodAudioEffectDelay[3]) }
func (gdClass AudioEffectDelay) SetTap1DelayMs(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[4], &amount) }
func (gdClass AudioEffectDelay) GetTap1DelayMs() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[5]) }
func (gdClass AudioEffectDelay) SetTap1LevelDb(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[6], &amount) }
func (gdClass AudioEffectDelay) GetTap1LevelDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[7]) }
func (gdClass AudioEffectDelay) SetTap1Pan(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[8], &amount) }
func (gdClass AudioEffectDelay) GetTap1Pan() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[9]) }
func (gdClass AudioEffectDelay) SetTap2Active(amount bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[10], &amount) }
func (gdClass AudioEffectDelay) IsTap2Active() bool { return methodCall[bool](gdClass.obj.get(), methodAudioEffectDelay[11]) }
func (gdClass AudioEffectDelay) SetTap2DelayMs(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[12], &amount) }
func (gdClass AudioEffectDelay) GetTap2DelayMs() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[13]) }
func (gdClass AudioEffectDelay) SetTap2LevelDb(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[14], &amount) }
func (gdClass AudioEffectDelay) GetTap2LevelDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[15]) }
func (gdClass AudioEffectDelay) SetTap2Pan(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[16], &amount) }
func (gdClass AudioEffectDelay) GetTap2Pan() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[17]) }
func (gdClass AudioEffectDelay) SetFeedbackActive(amount bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[18], &amount) }
func (gdClass AudioEffectDelay) IsFeedbackActive() bool { return methodCall[bool](gdClass.obj.get(), methodAudioEffectDelay[19]) }
func (gdClass AudioEffectDelay) SetFeedbackDelayMs(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[20], &amount) }
func (gdClass AudioEffectDelay) GetFeedbackDelayMs() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[21]) }
func (gdClass AudioEffectDelay) SetFeedbackLevelDb(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[22], &amount) }
func (gdClass AudioEffectDelay) GetFeedbackLevelDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[23]) }
func (gdClass AudioEffectDelay) SetFeedbackLowpass(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDelay[24], &amount) }
func (gdClass AudioEffectDelay) GetFeedbackLowpass() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDelay[25]) }

type AudioEffectDistortionMode int64

const (
	AudioEffectDistortionModeClip AudioEffectDistortionMode = 0
	AudioEffectDistortionModeAtan AudioEffectDistortionMode = 1
	AudioEffectDistortionModeLofi AudioEffectDistortionMode = 2
	AudioEffectDistortionModeOverdrive AudioEffectDistortionMode = 3
	AudioEffectDistortionModeWaveshape AudioEffectDistortionMode = 4
)

type AudioEffectDistortion struct{self *AudioEffectDistortion; obj safeObject }
func NewAudioEffectDistortion(ctx Context, at *AudioEffectDistortion) AudioEffectDistortion { if at == nil { at = new(AudioEffectDistortion) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectDistortion) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectDistortion) owner() cObject { return gdClass.obj.get() }
func (AudioEffectDistortion) class() string { return "AudioEffectDistortion\000" }

func (gdClass AudioEffectDistortion) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectDistortion [10]cMethodBind
func (gdClass AudioEffectDistortion) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectDistortion) SetMode(mode AudioEffectDistortionMode)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDistortion[0], &mode) }
func (gdClass AudioEffectDistortion) GetMode() AudioEffectDistortionMode { return methodCall[AudioEffectDistortionMode](gdClass.obj.get(), methodAudioEffectDistortion[1]) }
func (gdClass AudioEffectDistortion) SetPreGain(pre_gain float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDistortion[2], &pre_gain) }
func (gdClass AudioEffectDistortion) GetPreGain() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDistortion[3]) }
func (gdClass AudioEffectDistortion) SetKeepHfHz(keep_hf_hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDistortion[4], &keep_hf_hz) }
func (gdClass AudioEffectDistortion) GetKeepHfHz() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDistortion[5]) }
func (gdClass AudioEffectDistortion) SetDrive(drive float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDistortion[6], &drive) }
func (gdClass AudioEffectDistortion) GetDrive() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDistortion[7]) }
func (gdClass AudioEffectDistortion) SetPostGain(post_gain float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectDistortion[8], &post_gain) }
func (gdClass AudioEffectDistortion) GetPostGain() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectDistortion[9]) }

type AudioEffectEQ struct{self *AudioEffectEQ; obj safeObject }
func NewAudioEffectEQ(ctx Context, at *AudioEffectEQ) AudioEffectEQ { if at == nil { at = new(AudioEffectEQ) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectEQ) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectEQ) owner() cObject { return gdClass.obj.get() }
func (AudioEffectEQ) class() string { return "AudioEffectEQ\000" }

func (gdClass AudioEffectEQ) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectEQ [3]cMethodBind
func (gdClass AudioEffectEQ) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectEQ) SetBandGainDb(band_idx int64, volume_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectEQ[0], &band_idx, &volume_db) }
func (gdClass AudioEffectEQ) GetBandGainDb(band_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectEQ[1], &band_idx) }
func (gdClass AudioEffectEQ) GetBandCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectEQ[2]) }

type AudioEffectEQ10 struct{self *AudioEffectEQ10; obj safeObject }
func NewAudioEffectEQ10(ctx Context, at *AudioEffectEQ10) AudioEffectEQ10 { if at == nil { at = new(AudioEffectEQ10) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectEQ10) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectEQ10) owner() cObject { return gdClass.obj.get() }
func (AudioEffectEQ10) class() string { return "AudioEffectEQ10\000" }

func (gdClass AudioEffectEQ10) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ{obj:gdClass.obj} }

func (gdClass AudioEffectEQ10) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectEQ().virtual(rtype, name)
}

type AudioEffectEQ21 struct{self *AudioEffectEQ21; obj safeObject }
func NewAudioEffectEQ21(ctx Context, at *AudioEffectEQ21) AudioEffectEQ21 { if at == nil { at = new(AudioEffectEQ21) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectEQ21) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectEQ21) owner() cObject { return gdClass.obj.get() }
func (AudioEffectEQ21) class() string { return "AudioEffectEQ21\000" }

func (gdClass AudioEffectEQ21) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ{obj:gdClass.obj} }

func (gdClass AudioEffectEQ21) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectEQ().virtual(rtype, name)
}

type AudioEffectEQ6 struct{self *AudioEffectEQ6; obj safeObject }
func NewAudioEffectEQ6(ctx Context, at *AudioEffectEQ6) AudioEffectEQ6 { if at == nil { at = new(AudioEffectEQ6) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectEQ6) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectEQ6) owner() cObject { return gdClass.obj.get() }
func (AudioEffectEQ6) class() string { return "AudioEffectEQ6\000" }

func (gdClass AudioEffectEQ6) AudioEffectEQ() AudioEffectEQ { return AudioEffectEQ{obj:gdClass.obj} }

func (gdClass AudioEffectEQ6) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectEQ().virtual(rtype, name)
}

type AudioEffectFilterFilterDB int64

const (
	AudioEffectFilterFilter6db AudioEffectFilterFilterDB = 0
	AudioEffectFilterFilter12db AudioEffectFilterFilterDB = 1
	AudioEffectFilterFilter18db AudioEffectFilterFilterDB = 2
	AudioEffectFilterFilter24db AudioEffectFilterFilterDB = 3
)

type AudioEffectFilter struct{self *AudioEffectFilter; obj safeObject }
func NewAudioEffectFilter(ctx Context, at *AudioEffectFilter) AudioEffectFilter { if at == nil { at = new(AudioEffectFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectFilter) class() string { return "AudioEffectFilter\000" }

func (gdClass AudioEffectFilter) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectFilter [8]cMethodBind
func (gdClass AudioEffectFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectFilter) SetCutoff(freq float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectFilter[0], &freq) }
func (gdClass AudioEffectFilter) GetCutoff() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectFilter[1]) }
func (gdClass AudioEffectFilter) SetResonance(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectFilter[2], &amount) }
func (gdClass AudioEffectFilter) GetResonance() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectFilter[3]) }
func (gdClass AudioEffectFilter) SetGain(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectFilter[4], &amount) }
func (gdClass AudioEffectFilter) GetGain() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectFilter[5]) }
func (gdClass AudioEffectFilter) SetDb(amount AudioEffectFilterFilterDB)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectFilter[6], &amount) }
func (gdClass AudioEffectFilter) GetDb() AudioEffectFilterFilterDB { return methodCall[AudioEffectFilterFilterDB](gdClass.obj.get(), methodAudioEffectFilter[7]) }

type AudioEffectHighPassFilter struct{self *AudioEffectHighPassFilter; obj safeObject }
func NewAudioEffectHighPassFilter(ctx Context, at *AudioEffectHighPassFilter) AudioEffectHighPassFilter { if at == nil { at = new(AudioEffectHighPassFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectHighPassFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectHighPassFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectHighPassFilter) class() string { return "AudioEffectHighPassFilter\000" }

func (gdClass AudioEffectHighPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectHighPassFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectHighShelfFilter struct{self *AudioEffectHighShelfFilter; obj safeObject }
func NewAudioEffectHighShelfFilter(ctx Context, at *AudioEffectHighShelfFilter) AudioEffectHighShelfFilter { if at == nil { at = new(AudioEffectHighShelfFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectHighShelfFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectHighShelfFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectHighShelfFilter) class() string { return "AudioEffectHighShelfFilter\000" }

func (gdClass AudioEffectHighShelfFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectHighShelfFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectInstance struct{self *AudioEffectInstance; obj safeObject }
func NewAudioEffectInstance(ctx Context, at *AudioEffectInstance) AudioEffectInstance { if at == nil { at = new(AudioEffectInstance) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectInstance) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectInstance) owner() cObject { return gdClass.obj.get() }
func (AudioEffectInstance) class() string { return "AudioEffectInstance\000" }

func (gdClass AudioEffectInstance) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass AudioEffectInstance) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ Process(src_buffer []byte, dst_buffer *AudioFrame, frame_count int64)  }{}).Elem()) {
			return rtype.MethodByName(`Process`)
		}
		return
	case "_process_silence":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProcessSilence() bool }{}).Elem()) {
			return rtype.MethodByName(`ProcessSilence`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type AudioEffectLimiter struct{self *AudioEffectLimiter; obj safeObject }
func NewAudioEffectLimiter(ctx Context, at *AudioEffectLimiter) AudioEffectLimiter { if at == nil { at = new(AudioEffectLimiter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectLimiter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectLimiter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectLimiter) class() string { return "AudioEffectLimiter\000" }

func (gdClass AudioEffectLimiter) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectLimiter [8]cMethodBind
func (gdClass AudioEffectLimiter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectLimiter) SetCeilingDb(ceiling float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectLimiter[0], &ceiling) }
func (gdClass AudioEffectLimiter) GetCeilingDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectLimiter[1]) }
func (gdClass AudioEffectLimiter) SetThresholdDb(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectLimiter[2], &threshold) }
func (gdClass AudioEffectLimiter) GetThresholdDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectLimiter[3]) }
func (gdClass AudioEffectLimiter) SetSoftClipDb(soft_clip float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectLimiter[4], &soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectLimiter[5]) }
func (gdClass AudioEffectLimiter) SetSoftClipRatio(soft_clip float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectLimiter[6], &soft_clip) }
func (gdClass AudioEffectLimiter) GetSoftClipRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectLimiter[7]) }

type AudioEffectLowPassFilter struct{self *AudioEffectLowPassFilter; obj safeObject }
func NewAudioEffectLowPassFilter(ctx Context, at *AudioEffectLowPassFilter) AudioEffectLowPassFilter { if at == nil { at = new(AudioEffectLowPassFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectLowPassFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectLowPassFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectLowPassFilter) class() string { return "AudioEffectLowPassFilter\000" }

func (gdClass AudioEffectLowPassFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectLowPassFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectLowShelfFilter struct{self *AudioEffectLowShelfFilter; obj safeObject }
func NewAudioEffectLowShelfFilter(ctx Context, at *AudioEffectLowShelfFilter) AudioEffectLowShelfFilter { if at == nil { at = new(AudioEffectLowShelfFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectLowShelfFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectLowShelfFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectLowShelfFilter) class() string { return "AudioEffectLowShelfFilter\000" }

func (gdClass AudioEffectLowShelfFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectLowShelfFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectNotchFilter struct{self *AudioEffectNotchFilter; obj safeObject }
func NewAudioEffectNotchFilter(ctx Context, at *AudioEffectNotchFilter) AudioEffectNotchFilter { if at == nil { at = new(AudioEffectNotchFilter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectNotchFilter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectNotchFilter) owner() cObject { return gdClass.obj.get() }
func (AudioEffectNotchFilter) class() string { return "AudioEffectNotchFilter\000" }

func (gdClass AudioEffectNotchFilter) AudioEffectFilter() AudioEffectFilter { return AudioEffectFilter{obj:gdClass.obj} }

func (gdClass AudioEffectNotchFilter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectFilter().virtual(rtype, name)
}

type AudioEffectPanner struct{self *AudioEffectPanner; obj safeObject }
func NewAudioEffectPanner(ctx Context, at *AudioEffectPanner) AudioEffectPanner { if at == nil { at = new(AudioEffectPanner) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectPanner) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectPanner) owner() cObject { return gdClass.obj.get() }
func (AudioEffectPanner) class() string { return "AudioEffectPanner\000" }

func (gdClass AudioEffectPanner) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectPanner [2]cMethodBind
func (gdClass AudioEffectPanner) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectPanner) SetPan(cpanume float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPanner[0], &cpanume) }
func (gdClass AudioEffectPanner) GetPan() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPanner[1]) }

type AudioEffectPhaser struct{self *AudioEffectPhaser; obj safeObject }
func NewAudioEffectPhaser(ctx Context, at *AudioEffectPhaser) AudioEffectPhaser { if at == nil { at = new(AudioEffectPhaser) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectPhaser) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectPhaser) owner() cObject { return gdClass.obj.get() }
func (AudioEffectPhaser) class() string { return "AudioEffectPhaser\000" }

func (gdClass AudioEffectPhaser) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectPhaser [10]cMethodBind
func (gdClass AudioEffectPhaser) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectPhaser) SetRangeMinHz(hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPhaser[0], &hz) }
func (gdClass AudioEffectPhaser) GetRangeMinHz() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPhaser[1]) }
func (gdClass AudioEffectPhaser) SetRangeMaxHz(hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPhaser[2], &hz) }
func (gdClass AudioEffectPhaser) GetRangeMaxHz() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPhaser[3]) }
func (gdClass AudioEffectPhaser) SetRateHz(hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPhaser[4], &hz) }
func (gdClass AudioEffectPhaser) GetRateHz() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPhaser[5]) }
func (gdClass AudioEffectPhaser) SetFeedback(fbk float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPhaser[6], &fbk) }
func (gdClass AudioEffectPhaser) GetFeedback() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPhaser[7]) }
func (gdClass AudioEffectPhaser) SetDepth(depth float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPhaser[8], &depth) }
func (gdClass AudioEffectPhaser) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPhaser[9]) }

type AudioEffectPitchShiftFFTSize int64

const (
	AudioEffectPitchShiftFftSize256 AudioEffectPitchShiftFFTSize = 0
	AudioEffectPitchShiftFftSize512 AudioEffectPitchShiftFFTSize = 1
	AudioEffectPitchShiftFftSize1024 AudioEffectPitchShiftFFTSize = 2
	AudioEffectPitchShiftFftSize2048 AudioEffectPitchShiftFFTSize = 3
	AudioEffectPitchShiftFftSize4096 AudioEffectPitchShiftFFTSize = 4
	AudioEffectPitchShiftFftSizeMax AudioEffectPitchShiftFFTSize = 5
)

type AudioEffectPitchShift struct{self *AudioEffectPitchShift; obj safeObject }
func NewAudioEffectPitchShift(ctx Context, at *AudioEffectPitchShift) AudioEffectPitchShift { if at == nil { at = new(AudioEffectPitchShift) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectPitchShift) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectPitchShift) owner() cObject { return gdClass.obj.get() }
func (AudioEffectPitchShift) class() string { return "AudioEffectPitchShift\000" }

func (gdClass AudioEffectPitchShift) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectPitchShift [6]cMethodBind
func (gdClass AudioEffectPitchShift) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectPitchShift) SetPitchScale(rate float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPitchShift[0], &rate) }
func (gdClass AudioEffectPitchShift) GetPitchScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectPitchShift[1]) }
func (gdClass AudioEffectPitchShift) SetOversampling(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPitchShift[2], &amount) }
func (gdClass AudioEffectPitchShift) GetOversampling() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioEffectPitchShift[3]) }
func (gdClass AudioEffectPitchShift) SetFftSize(size AudioEffectPitchShiftFFTSize)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectPitchShift[4], &size) }
func (gdClass AudioEffectPitchShift) GetFftSize() AudioEffectPitchShiftFFTSize { return methodCall[AudioEffectPitchShiftFFTSize](gdClass.obj.get(), methodAudioEffectPitchShift[5]) }

type AudioEffectRecord struct{self *AudioEffectRecord; obj safeObject }
func NewAudioEffectRecord(ctx Context, at *AudioEffectRecord) AudioEffectRecord { if at == nil { at = new(AudioEffectRecord) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectRecord) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectRecord) owner() cObject { return gdClass.obj.get() }
func (AudioEffectRecord) class() string { return "AudioEffectRecord\000" }

func (gdClass AudioEffectRecord) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectRecord [5]cMethodBind
func (gdClass AudioEffectRecord) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectRecord) SetRecordingActive(record bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectRecord[0], &record) }
func (gdClass AudioEffectRecord) IsRecordingActive() bool { return methodCall[bool](gdClass.obj.get(), methodAudioEffectRecord[1]) }
func (gdClass AudioEffectRecord) SetFormat(format AudioStreamWAVFormat)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectRecord[2], &format) }
func (gdClass AudioEffectRecord) GetFormat() AudioStreamWAVFormat { return methodCall[AudioStreamWAVFormat](gdClass.obj.get(), methodAudioEffectRecord[3]) }
func (gdClass AudioEffectRecord) GetRecording() AudioStreamWAV { return methodCall[AudioStreamWAV](gdClass.obj.get(), methodAudioEffectRecord[4]) }

type AudioEffectReverb struct{self *AudioEffectReverb; obj safeObject }
func NewAudioEffectReverb(ctx Context, at *AudioEffectReverb) AudioEffectReverb { if at == nil { at = new(AudioEffectReverb) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectReverb) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectReverb) owner() cObject { return gdClass.obj.get() }
func (AudioEffectReverb) class() string { return "AudioEffectReverb\000" }

func (gdClass AudioEffectReverb) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectReverb [16]cMethodBind
func (gdClass AudioEffectReverb) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectReverb) SetPredelayMsec(msec float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[0], &msec) }
func (gdClass AudioEffectReverb) GetPredelayMsec() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[1]) }
func (gdClass AudioEffectReverb) SetPredelayFeedback(feedback float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[2], &feedback) }
func (gdClass AudioEffectReverb) GetPredelayFeedback() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[3]) }
func (gdClass AudioEffectReverb) SetRoomSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[4], &size) }
func (gdClass AudioEffectReverb) GetRoomSize() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[5]) }
func (gdClass AudioEffectReverb) SetDamping(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[6], &amount) }
func (gdClass AudioEffectReverb) GetDamping() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[7]) }
func (gdClass AudioEffectReverb) SetSpread(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[8], &amount) }
func (gdClass AudioEffectReverb) GetSpread() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[9]) }
func (gdClass AudioEffectReverb) SetDry(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[10], &amount) }
func (gdClass AudioEffectReverb) GetDry() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[11]) }
func (gdClass AudioEffectReverb) SetWet(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[12], &amount) }
func (gdClass AudioEffectReverb) GetWet() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[13]) }
func (gdClass AudioEffectReverb) SetHpf(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectReverb[14], &amount) }
func (gdClass AudioEffectReverb) GetHpf() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectReverb[15]) }

type AudioEffectSpectrumAnalyzerFFTSize int64

const (
	AudioEffectSpectrumAnalyzerFftSize256 AudioEffectSpectrumAnalyzerFFTSize = 0
	AudioEffectSpectrumAnalyzerFftSize512 AudioEffectSpectrumAnalyzerFFTSize = 1
	AudioEffectSpectrumAnalyzerFftSize1024 AudioEffectSpectrumAnalyzerFFTSize = 2
	AudioEffectSpectrumAnalyzerFftSize2048 AudioEffectSpectrumAnalyzerFFTSize = 3
	AudioEffectSpectrumAnalyzerFftSize4096 AudioEffectSpectrumAnalyzerFFTSize = 4
	AudioEffectSpectrumAnalyzerFftSizeMax AudioEffectSpectrumAnalyzerFFTSize = 5
)

type AudioEffectSpectrumAnalyzer struct{self *AudioEffectSpectrumAnalyzer; obj safeObject }
func NewAudioEffectSpectrumAnalyzer(ctx Context, at *AudioEffectSpectrumAnalyzer) AudioEffectSpectrumAnalyzer { if at == nil { at = new(AudioEffectSpectrumAnalyzer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectSpectrumAnalyzer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectSpectrumAnalyzer) owner() cObject { return gdClass.obj.get() }
func (AudioEffectSpectrumAnalyzer) class() string { return "AudioEffectSpectrumAnalyzer\000" }

func (gdClass AudioEffectSpectrumAnalyzer) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectSpectrumAnalyzer [6]cMethodBind
func (gdClass AudioEffectSpectrumAnalyzer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectSpectrumAnalyzer) SetBufferLength(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[0], &seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetBufferLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[1]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetTapBackPos(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[2], &seconds) }
func (gdClass AudioEffectSpectrumAnalyzer) GetTapBackPos() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[3]) }
func (gdClass AudioEffectSpectrumAnalyzer) SetFftSize(size AudioEffectSpectrumAnalyzerFFTSize)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[4], &size) }
func (gdClass AudioEffectSpectrumAnalyzer) GetFftSize() AudioEffectSpectrumAnalyzerFFTSize { return methodCall[AudioEffectSpectrumAnalyzerFFTSize](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzer[5]) }

type AudioEffectSpectrumAnalyzerInstanceMagnitudeMode int64

const (
	AudioEffectSpectrumAnalyzerInstanceMagnitudeAverage AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 0
	AudioEffectSpectrumAnalyzerInstanceMagnitudeMax AudioEffectSpectrumAnalyzerInstanceMagnitudeMode = 1
)

type AudioEffectSpectrumAnalyzerInstance struct{self *AudioEffectSpectrumAnalyzerInstance; obj safeObject }
func NewAudioEffectSpectrumAnalyzerInstance(ctx Context, at *AudioEffectSpectrumAnalyzerInstance) AudioEffectSpectrumAnalyzerInstance { if at == nil { at = new(AudioEffectSpectrumAnalyzerInstance) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectSpectrumAnalyzerInstance) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectSpectrumAnalyzerInstance) owner() cObject { return gdClass.obj.get() }
func (AudioEffectSpectrumAnalyzerInstance) class() string { return "AudioEffectSpectrumAnalyzerInstance\000" }

func (gdClass AudioEffectSpectrumAnalyzerInstance) AudioEffectInstance() AudioEffectInstance { return AudioEffectInstance{obj:gdClass.obj} }

var methodAudioEffectSpectrumAnalyzerInstance [1]cMethodBind
func (gdClass AudioEffectSpectrumAnalyzerInstance) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffectInstance().virtual(rtype, name)
}
func (gdClass AudioEffectSpectrumAnalyzerInstance) GetMagnitudeForFrequencyRange(from_hz float64, to_hz float64, mode AudioEffectSpectrumAnalyzerInstanceMagnitudeMode) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodAudioEffectSpectrumAnalyzerInstance[0], &from_hz, &to_hz, &mode) }

type AudioEffectStereoEnhance struct{self *AudioEffectStereoEnhance; obj safeObject }
func NewAudioEffectStereoEnhance(ctx Context, at *AudioEffectStereoEnhance) AudioEffectStereoEnhance { if at == nil { at = new(AudioEffectStereoEnhance) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioEffectStereoEnhance) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioEffectStereoEnhance) owner() cObject { return gdClass.obj.get() }
func (AudioEffectStereoEnhance) class() string { return "AudioEffectStereoEnhance\000" }

func (gdClass AudioEffectStereoEnhance) AudioEffect() AudioEffect { return AudioEffect{obj:gdClass.obj} }

var methodAudioEffectStereoEnhance [6]cMethodBind
func (gdClass AudioEffectStereoEnhance) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioEffect().virtual(rtype, name)
}
func (gdClass AudioEffectStereoEnhance) SetPanPullout(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectStereoEnhance[0], &amount) }
func (gdClass AudioEffectStereoEnhance) GetPanPullout() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectStereoEnhance[1]) }
func (gdClass AudioEffectStereoEnhance) SetTimePullout(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectStereoEnhance[2], &amount) }
func (gdClass AudioEffectStereoEnhance) GetTimePullout() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectStereoEnhance[3]) }
func (gdClass AudioEffectStereoEnhance) SetSurround(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioEffectStereoEnhance[4], &amount) }
func (gdClass AudioEffectStereoEnhance) GetSurround() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioEffectStereoEnhance[5]) }

type AudioListener2D struct{self *AudioListener2D; obj safeObject }
func NewAudioListener2D(ctx Context, at *AudioListener2D) AudioListener2D { if at == nil { at = new(AudioListener2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioListener2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioListener2D) owner() cObject { return gdClass.obj.get() }
func (AudioListener2D) class() string { return "AudioListener2D\000" }

func (gdClass AudioListener2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodAudioListener2D [3]cMethodBind
func (gdClass AudioListener2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass AudioListener2D) MakeCurrent()  { methodCall[struct{}](gdClass.obj.get(), methodAudioListener2D[0]) }
func (gdClass AudioListener2D) ClearCurrent()  { methodCall[struct{}](gdClass.obj.get(), methodAudioListener2D[1]) }
func (gdClass AudioListener2D) IsCurrent() bool { return methodCall[bool](gdClass.obj.get(), methodAudioListener2D[2]) }

type AudioListener3D struct{self *AudioListener3D; obj safeObject }
func NewAudioListener3D(ctx Context, at *AudioListener3D) AudioListener3D { if at == nil { at = new(AudioListener3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioListener3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioListener3D) owner() cObject { return gdClass.obj.get() }
func (AudioListener3D) class() string { return "AudioListener3D\000" }

func (gdClass AudioListener3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodAudioListener3D [4]cMethodBind
func (gdClass AudioListener3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass AudioListener3D) MakeCurrent()  { methodCall[struct{}](gdClass.obj.get(), methodAudioListener3D[0]) }
func (gdClass AudioListener3D) ClearCurrent()  { methodCall[struct{}](gdClass.obj.get(), methodAudioListener3D[1]) }
func (gdClass AudioListener3D) IsCurrent() bool { return methodCall[bool](gdClass.obj.get(), methodAudioListener3D[2]) }
func (gdClass AudioListener3D) GetListenerTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodAudioListener3D[3]) }

type AudioServerSpeakerMode int64

const (
	AudioServerSpeakerModeStereo AudioServerSpeakerMode = 0
	AudioServerSpeakerSurround31 AudioServerSpeakerMode = 1
	AudioServerSpeakerSurround51 AudioServerSpeakerMode = 2
	AudioServerSpeakerSurround71 AudioServerSpeakerMode = 3
)
var AudioServer AudioServerSingleton

type AudioServerSingleton struct{self *AudioServerSingleton; obj safeObject }
func NewAudioServerSingleton(ctx Context, at *AudioServerSingleton) AudioServerSingleton { if at == nil { at = new(AudioServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioServerSingleton) owner() cObject { return gdClass.obj.get() }
func (AudioServerSingleton) class() string { return "AudioServerSingleton\000" }

func (gdClass AudioServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodAudioServerSingleton [47]cMethodBind
func (gdClass AudioServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass AudioServerSingleton) SetBusCount(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[0], &amount) }
func (gdClass AudioServerSingleton) GetBusCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioServerSingleton[1]) }
func (gdClass AudioServerSingleton) RemoveBus(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[2], &index) }
func (gdClass AudioServerSingleton) AddBus(at_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[3], &at_position) }
func (gdClass AudioServerSingleton) MoveBus(index int64, to_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[4], &index, &to_index) }
func (gdClass AudioServerSingleton) SetBusName(bus_idx int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[5], &bus_idx, &name) }
func (gdClass AudioServerSingleton) GetBusName(bus_idx int64) string { return methodCall[string](gdClass.obj.get(), methodAudioServerSingleton[6], &bus_idx) }
func (gdClass AudioServerSingleton) GetBusIndex(bus_name Name) int64 { return methodCall[int64](gdClass.obj.get(), methodAudioServerSingleton[7], &bus_name) }
func (gdClass AudioServerSingleton) GetBusChannels(bus_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodAudioServerSingleton[8], &bus_idx) }
func (gdClass AudioServerSingleton) SetBusVolumeDb(bus_idx int64, volume_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[9], &bus_idx, &volume_db) }
func (gdClass AudioServerSingleton) GetBusVolumeDb(bus_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[10], &bus_idx) }
func (gdClass AudioServerSingleton) SetBusSend(bus_idx int64, send Name)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[11], &bus_idx, &send) }
func (gdClass AudioServerSingleton) GetBusSend(bus_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodAudioServerSingleton[12], &bus_idx) }
func (gdClass AudioServerSingleton) SetBusSolo(bus_idx int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[13], &bus_idx, &enable) }
func (gdClass AudioServerSingleton) IsBusSolo(bus_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioServerSingleton[14], &bus_idx) }
func (gdClass AudioServerSingleton) SetBusMute(bus_idx int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[15], &bus_idx, &enable) }
func (gdClass AudioServerSingleton) IsBusMute(bus_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioServerSingleton[16], &bus_idx) }
func (gdClass AudioServerSingleton) SetBusBypassEffects(bus_idx int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[17], &bus_idx, &enable) }
func (gdClass AudioServerSingleton) IsBusBypassingEffects(bus_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioServerSingleton[18], &bus_idx) }
func (gdClass AudioServerSingleton) AddBusEffect(bus_idx int64, effect AudioEffect, at_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[19], &bus_idx, &effect, &at_position) }
func (gdClass AudioServerSingleton) RemoveBusEffect(bus_idx int64, effect_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[20], &bus_idx, &effect_idx) }
func (gdClass AudioServerSingleton) GetBusEffectCount(bus_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodAudioServerSingleton[21], &bus_idx) }
func (gdClass AudioServerSingleton) GetBusEffect(bus_idx int64, effect_idx int64) AudioEffect { return methodCall[AudioEffect](gdClass.obj.get(), methodAudioServerSingleton[22], &bus_idx, &effect_idx) }
func (gdClass AudioServerSingleton) GetBusEffectInstance(bus_idx int64, effect_idx int64, channel int64) AudioEffectInstance { return methodCall[AudioEffectInstance](gdClass.obj.get(), methodAudioServerSingleton[23], &bus_idx, &effect_idx, &channel) }
func (gdClass AudioServerSingleton) SwapBusEffects(bus_idx int64, effect_idx int64, by_effect_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[24], &bus_idx, &effect_idx, &by_effect_idx) }
func (gdClass AudioServerSingleton) SetBusEffectEnabled(bus_idx int64, effect_idx int64, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[25], &bus_idx, &effect_idx, &enabled) }
func (gdClass AudioServerSingleton) IsBusEffectEnabled(bus_idx int64, effect_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioServerSingleton[26], &bus_idx, &effect_idx) }
func (gdClass AudioServerSingleton) GetBusPeakVolumeLeftDb(bus_idx int64, channel int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[27], &bus_idx, &channel) }
func (gdClass AudioServerSingleton) GetBusPeakVolumeRightDb(bus_idx int64, channel int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[28], &bus_idx, &channel) }
func (gdClass AudioServerSingleton) SetPlaybackSpeedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[29], &scale) }
func (gdClass AudioServerSingleton) GetPlaybackSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[30]) }
func (gdClass AudioServerSingleton) Lock()  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[31]) }
func (gdClass AudioServerSingleton) Unlock()  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[32]) }
func (gdClass AudioServerSingleton) GetSpeakerMode() AudioServerSpeakerMode { return methodCall[AudioServerSpeakerMode](gdClass.obj.get(), methodAudioServerSingleton[33]) }
func (gdClass AudioServerSingleton) GetMixRate() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[34]) }
func (gdClass AudioServerSingleton) GetDeviceList() []string { return methodCall[[]string](gdClass.obj.get(), methodAudioServerSingleton[35]) }
func (gdClass AudioServerSingleton) GetDevice() string { return methodCall[string](gdClass.obj.get(), methodAudioServerSingleton[36]) }
func (gdClass AudioServerSingleton) SetDevice(device string)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[37], &device) }
func (gdClass AudioServerSingleton) GetTimeToNextMix() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[38]) }
func (gdClass AudioServerSingleton) GetTimeSinceLastMix() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[39]) }
func (gdClass AudioServerSingleton) GetOutputLatency() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioServerSingleton[40]) }
func (gdClass AudioServerSingleton) CaptureGetDeviceList() []string { return methodCall[[]string](gdClass.obj.get(), methodAudioServerSingleton[41]) }
func (gdClass AudioServerSingleton) CaptureGetDevice() string { return methodCall[string](gdClass.obj.get(), methodAudioServerSingleton[42]) }
func (gdClass AudioServerSingleton) CaptureSetDevice(name string)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[43], &name) }
func (gdClass AudioServerSingleton) SetBusLayout(bus_layout AudioBusLayout)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[44], &bus_layout) }
func (gdClass AudioServerSingleton) GenerateBusLayout() AudioBusLayout { return methodCall[AudioBusLayout](gdClass.obj.get(), methodAudioServerSingleton[45]) }
func (gdClass AudioServerSingleton) SetEnableTaggingUsedAudioStreams(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioServerSingleton[46], &enable) }

type AudioStream struct{self *AudioStream; obj safeObject }
func NewAudioStream(ctx Context, at *AudioStream) AudioStream { if at == nil { at = new(AudioStream) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStream) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStream) owner() cObject { return gdClass.obj.get() }
func (AudioStream) class() string { return "AudioStream\000" }

func (gdClass AudioStream) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodAudioStream [3]cMethodBind
func (gdClass AudioStream) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_instantiate_playback":
		if rtype.Implements(reflect.TypeOf([0]interface{ InstantiatePlayback() AudioStreamPlayback }{}).Elem()) {
			return rtype.MethodByName(`InstantiatePlayback`)
		}
		return
	case "_get_stream_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetStreamName() string }{}).Elem()) {
			return rtype.MethodByName(`GetStreamName`)
		}
		return
	case "_get_length":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLength() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetLength`)
		}
		return
	case "_is_monophonic":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsMonophonic() bool }{}).Elem()) {
			return rtype.MethodByName(`IsMonophonic`)
		}
		return
	case "_get_bpm":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBpm() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetBpm`)
		}
		return
	case "_get_beat_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBeatCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetBeatCount`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass AudioStream) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStream[0]) }
func (gdClass AudioStream) IsMonophonic() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStream[1]) }
func (gdClass AudioStream) InstantiatePlayback() AudioStreamPlayback { return methodCall[AudioStreamPlayback](gdClass.obj.get(), methodAudioStream[2]) }

type AudioStreamGenerator struct{self *AudioStreamGenerator; obj safeObject }
func NewAudioStreamGenerator(ctx Context, at *AudioStreamGenerator) AudioStreamGenerator { if at == nil { at = new(AudioStreamGenerator) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamGenerator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamGenerator) owner() cObject { return gdClass.obj.get() }
func (AudioStreamGenerator) class() string { return "AudioStreamGenerator\000" }

func (gdClass AudioStreamGenerator) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

var methodAudioStreamGenerator [4]cMethodBind
func (gdClass AudioStreamGenerator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}
func (gdClass AudioStreamGenerator) SetMixRate(hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamGenerator[0], &hz) }
func (gdClass AudioStreamGenerator) GetMixRate() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamGenerator[1]) }
func (gdClass AudioStreamGenerator) SetBufferLength(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamGenerator[2], &seconds) }
func (gdClass AudioStreamGenerator) GetBufferLength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamGenerator[3]) }

type AudioStreamGeneratorPlayback struct{self *AudioStreamGeneratorPlayback; obj safeObject }
func NewAudioStreamGeneratorPlayback(ctx Context, at *AudioStreamGeneratorPlayback) AudioStreamGeneratorPlayback { if at == nil { at = new(AudioStreamGeneratorPlayback) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamGeneratorPlayback) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamGeneratorPlayback) owner() cObject { return gdClass.obj.get() }
func (AudioStreamGeneratorPlayback) class() string { return "AudioStreamGeneratorPlayback\000" }

func (gdClass AudioStreamGeneratorPlayback) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled { return AudioStreamPlaybackResampled{obj:gdClass.obj} }

var methodAudioStreamGeneratorPlayback [6]cMethodBind
func (gdClass AudioStreamGeneratorPlayback) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStreamPlaybackResampled().virtual(rtype, name)
}
func (gdClass AudioStreamGeneratorPlayback) PushFrame(frame Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[0], &frame) }
func (gdClass AudioStreamGeneratorPlayback) CanPushBuffer(amount int64) bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[1], &amount) }
func (gdClass AudioStreamGeneratorPlayback) PushBuffer(frames []Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[2], &frames) }
func (gdClass AudioStreamGeneratorPlayback) GetFramesAvailable() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[3]) }
func (gdClass AudioStreamGeneratorPlayback) GetSkips() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[4]) }
func (gdClass AudioStreamGeneratorPlayback) ClearBuffer()  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamGeneratorPlayback[5]) }

type AudioStreamMP3 struct{self *AudioStreamMP3; obj safeObject }
func NewAudioStreamMP3(ctx Context, at *AudioStreamMP3) AudioStreamMP3 { if at == nil { at = new(AudioStreamMP3) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamMP3) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamMP3) owner() cObject { return gdClass.obj.get() }
func (AudioStreamMP3) class() string { return "AudioStreamMP3\000" }

func (gdClass AudioStreamMP3) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

var methodAudioStreamMP3 [12]cMethodBind
func (gdClass AudioStreamMP3) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}
func (gdClass AudioStreamMP3) SetData(data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[0], &data) }
func (gdClass AudioStreamMP3) GetData() []byte { return methodCall[[]byte](gdClass.obj.get(), methodAudioStreamMP3[1]) }
func (gdClass AudioStreamMP3) SetLoop(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[2], &enable) }
func (gdClass AudioStreamMP3) HasLoop() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamMP3[3]) }
func (gdClass AudioStreamMP3) SetLoopOffset(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[4], &seconds) }
func (gdClass AudioStreamMP3) GetLoopOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamMP3[5]) }
func (gdClass AudioStreamMP3) SetBpm(bpm float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[6], &bpm) }
func (gdClass AudioStreamMP3) GetBpm() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamMP3[7]) }
func (gdClass AudioStreamMP3) SetBeatCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[8], &count) }
func (gdClass AudioStreamMP3) GetBeatCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamMP3[9]) }
func (gdClass AudioStreamMP3) SetBarBeats(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamMP3[10], &count) }
func (gdClass AudioStreamMP3) GetBarBeats() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamMP3[11]) }

type AudioStreamMicrophone struct{self *AudioStreamMicrophone; obj safeObject }
func NewAudioStreamMicrophone(ctx Context, at *AudioStreamMicrophone) AudioStreamMicrophone { if at == nil { at = new(AudioStreamMicrophone) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamMicrophone) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamMicrophone) owner() cObject { return gdClass.obj.get() }
func (AudioStreamMicrophone) class() string { return "AudioStreamMicrophone\000" }

func (gdClass AudioStreamMicrophone) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

func (gdClass AudioStreamMicrophone) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}

type AudioStreamOggVorbis struct{self *AudioStreamOggVorbis; obj safeObject }
func NewAudioStreamOggVorbis(ctx Context, at *AudioStreamOggVorbis) AudioStreamOggVorbis { if at == nil { at = new(AudioStreamOggVorbis) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamOggVorbis) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamOggVorbis) owner() cObject { return gdClass.obj.get() }
func (AudioStreamOggVorbis) class() string { return "AudioStreamOggVorbis\000" }

func (gdClass AudioStreamOggVorbis) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

var methodAudioStreamOggVorbis [12]cMethodBind
func (gdClass AudioStreamOggVorbis) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}
func (gdClass AudioStreamOggVorbis) SetPacketSequence(packet_sequence OggPacketSequence)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[0], &packet_sequence) }
func (gdClass AudioStreamOggVorbis) GetPacketSequence() OggPacketSequence { return methodCall[OggPacketSequence](gdClass.obj.get(), methodAudioStreamOggVorbis[1]) }
func (gdClass AudioStreamOggVorbis) SetLoop(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[2], &enable) }
func (gdClass AudioStreamOggVorbis) HasLoop() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamOggVorbis[3]) }
func (gdClass AudioStreamOggVorbis) SetLoopOffset(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[4], &seconds) }
func (gdClass AudioStreamOggVorbis) GetLoopOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamOggVorbis[5]) }
func (gdClass AudioStreamOggVorbis) SetBpm(bpm float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[6], &bpm) }
func (gdClass AudioStreamOggVorbis) GetBpm() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamOggVorbis[7]) }
func (gdClass AudioStreamOggVorbis) SetBeatCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[8], &count) }
func (gdClass AudioStreamOggVorbis) GetBeatCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamOggVorbis[9]) }
func (gdClass AudioStreamOggVorbis) SetBarBeats(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamOggVorbis[10], &count) }
func (gdClass AudioStreamOggVorbis) GetBarBeats() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamOggVorbis[11]) }

type AudioStreamPlayback struct{self *AudioStreamPlayback; obj safeObject }
func NewAudioStreamPlayback(ctx Context, at *AudioStreamPlayback) AudioStreamPlayback { if at == nil { at = new(AudioStreamPlayback) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamPlayback) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlayback) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlayback) class() string { return "AudioStreamPlayback\000" }

func (gdClass AudioStreamPlayback) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass AudioStreamPlayback) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_start":
		if rtype.Implements(reflect.TypeOf([0]interface{ Start(from_pos float64)  }{}).Elem()) {
			return rtype.MethodByName(`Start`)
		}
		return
	case "_stop":
		if rtype.Implements(reflect.TypeOf([0]interface{ Stop()  }{}).Elem()) {
			return rtype.MethodByName(`Stop`)
		}
		return
	case "_is_playing":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsPlaying() bool }{}).Elem()) {
			return rtype.MethodByName(`IsPlaying`)
		}
		return
	case "_get_loop_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLoopCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetLoopCount`)
		}
		return
	case "_get_playback_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPlaybackPosition() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetPlaybackPosition`)
		}
		return
	case "_seek":
		if rtype.Implements(reflect.TypeOf([0]interface{ Seek(position float64)  }{}).Elem()) {
			return rtype.MethodByName(`Seek`)
		}
		return
	case "_mix":
		if rtype.Implements(reflect.TypeOf([0]interface{ Mix(buffer *AudioFrame, rate_scale float64, frames int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`Mix`)
		}
		return
	case "_tag_used_streams":
		if rtype.Implements(reflect.TypeOf([0]interface{ TagUsedStreams()  }{}).Elem()) {
			return rtype.MethodByName(`TagUsedStreams`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type AudioStreamPlaybackOggVorbis struct{self *AudioStreamPlaybackOggVorbis; obj safeObject }
func NewAudioStreamPlaybackOggVorbis(ctx Context, at *AudioStreamPlaybackOggVorbis) AudioStreamPlaybackOggVorbis { if at == nil { at = new(AudioStreamPlaybackOggVorbis) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamPlaybackOggVorbis) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlaybackOggVorbis) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlaybackOggVorbis) class() string { return "AudioStreamPlaybackOggVorbis\000" }

func (gdClass AudioStreamPlaybackOggVorbis) AudioStreamPlaybackResampled() AudioStreamPlaybackResampled { return AudioStreamPlaybackResampled{obj:gdClass.obj} }

func (gdClass AudioStreamPlaybackOggVorbis) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStreamPlaybackResampled().virtual(rtype, name)
}

type AudioStreamPlaybackResampled struct{self *AudioStreamPlaybackResampled; obj safeObject }
func NewAudioStreamPlaybackResampled(ctx Context, at *AudioStreamPlaybackResampled) AudioStreamPlaybackResampled { if at == nil { at = new(AudioStreamPlaybackResampled) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamPlaybackResampled) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlaybackResampled) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlaybackResampled) class() string { return "AudioStreamPlaybackResampled\000" }

func (gdClass AudioStreamPlaybackResampled) AudioStreamPlayback() AudioStreamPlayback { return AudioStreamPlayback{obj:gdClass.obj} }

var methodAudioStreamPlaybackResampled [1]cMethodBind
func (gdClass AudioStreamPlaybackResampled) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_mix_resampled":
		if rtype.Implements(reflect.TypeOf([0]interface{ MixResampled(dst_buffer *AudioFrame, frame_count int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`MixResampled`)
		}
		return
	case "_get_stream_sampling_rate":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetStreamSamplingRate() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetStreamSamplingRate`)
		}
		return
	}
	return gdClass.AudioStreamPlayback().virtual(rtype, name)
}
func (gdClass AudioStreamPlaybackResampled) BeginResample()  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlaybackResampled[0]) }

type AudioStreamPlayerMixTarget int64

const (
	AudioStreamPlayerMixTargetStereo AudioStreamPlayerMixTarget = 0
	AudioStreamPlayerMixTargetSurround AudioStreamPlayerMixTarget = 1
	AudioStreamPlayerMixTargetCenter AudioStreamPlayerMixTarget = 2
)

type AudioStreamPlayer struct{self *AudioStreamPlayer; obj safeObject }
func NewAudioStreamPlayer(ctx Context, at *AudioStreamPlayer) AudioStreamPlayer { if at == nil { at = new(AudioStreamPlayer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioStreamPlayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlayer) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlayer) class() string { return "AudioStreamPlayer\000" }

func (gdClass AudioStreamPlayer) Node() Node { return Node{obj:gdClass.obj} }

var methodAudioStreamPlayer [22]cMethodBind
func (gdClass AudioStreamPlayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass AudioStreamPlayer) SetStream(stream AudioStream)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[0], &stream) }
func (gdClass AudioStreamPlayer) GetStream() AudioStream { return methodCall[AudioStream](gdClass.obj.get(), methodAudioStreamPlayer[1]) }
func (gdClass AudioStreamPlayer) SetVolumeDb(volume_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[2], &volume_db) }
func (gdClass AudioStreamPlayer) GetVolumeDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer[3]) }
func (gdClass AudioStreamPlayer) SetPitchScale(pitch_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[4], &pitch_scale) }
func (gdClass AudioStreamPlayer) GetPitchScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer[5]) }
func (gdClass AudioStreamPlayer) Play(from_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[6], &from_position) }
func (gdClass AudioStreamPlayer) SeekTo(to_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[7], &to_position) }
func (gdClass AudioStreamPlayer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[8]) }
func (gdClass AudioStreamPlayer) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer[9]) }
func (gdClass AudioStreamPlayer) GetPlaybackPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer[10]) }
func (gdClass AudioStreamPlayer) SetBus(bus Name)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[11], &bus) }
func (gdClass AudioStreamPlayer) GetBus() Name { return methodCall[Name](gdClass.obj.get(), methodAudioStreamPlayer[12]) }
func (gdClass AudioStreamPlayer) SetAutoplay(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[13], &enable) }
func (gdClass AudioStreamPlayer) IsAutoplayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer[14]) }
func (gdClass AudioStreamPlayer) SetMixTarget(mix_target AudioStreamPlayerMixTarget)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[15], &mix_target) }
func (gdClass AudioStreamPlayer) GetMixTarget() AudioStreamPlayerMixTarget { return methodCall[AudioStreamPlayerMixTarget](gdClass.obj.get(), methodAudioStreamPlayer[16]) }
func (gdClass AudioStreamPlayer) SetStreamPaused(pause bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[17], &pause) }
func (gdClass AudioStreamPlayer) GetStreamPaused() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer[18]) }
func (gdClass AudioStreamPlayer) SetMaxPolyphony(max_polyphony int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer[19], &max_polyphony) }
func (gdClass AudioStreamPlayer) GetMaxPolyphony() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamPlayer[20]) }
func (gdClass AudioStreamPlayer) GetStreamPlayback() AudioStreamPlayback { return methodCall[AudioStreamPlayback](gdClass.obj.get(), methodAudioStreamPlayer[21]) }

type AudioStreamPlayer2D struct{self *AudioStreamPlayer2D; obj safeObject }
func NewAudioStreamPlayer2D(ctx Context, at *AudioStreamPlayer2D) AudioStreamPlayer2D { if at == nil { at = new(AudioStreamPlayer2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioStreamPlayer2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlayer2D) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlayer2D) class() string { return "AudioStreamPlayer2D\000" }

func (gdClass AudioStreamPlayer2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodAudioStreamPlayer2D [28]cMethodBind
func (gdClass AudioStreamPlayer2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass AudioStreamPlayer2D) SetStream(stream AudioStream)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[0], &stream) }
func (gdClass AudioStreamPlayer2D) GetStream() AudioStream { return methodCall[AudioStream](gdClass.obj.get(), methodAudioStreamPlayer2D[1]) }
func (gdClass AudioStreamPlayer2D) SetVolumeDb(volume_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[2], &volume_db) }
func (gdClass AudioStreamPlayer2D) GetVolumeDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[3]) }
func (gdClass AudioStreamPlayer2D) SetPitchScale(pitch_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[4], &pitch_scale) }
func (gdClass AudioStreamPlayer2D) GetPitchScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[5]) }
func (gdClass AudioStreamPlayer2D) Play(from_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[6], &from_position) }
func (gdClass AudioStreamPlayer2D) SeekTo(to_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[7], &to_position) }
func (gdClass AudioStreamPlayer2D) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[8]) }
func (gdClass AudioStreamPlayer2D) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer2D[9]) }
func (gdClass AudioStreamPlayer2D) GetPlaybackPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[10]) }
func (gdClass AudioStreamPlayer2D) SetBus(bus Name)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[11], &bus) }
func (gdClass AudioStreamPlayer2D) GetBus() Name { return methodCall[Name](gdClass.obj.get(), methodAudioStreamPlayer2D[12]) }
func (gdClass AudioStreamPlayer2D) SetAutoplay(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[13], &enable) }
func (gdClass AudioStreamPlayer2D) IsAutoplayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer2D[14]) }
func (gdClass AudioStreamPlayer2D) SetMaxDistance(pixels float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[15], &pixels) }
func (gdClass AudioStreamPlayer2D) GetMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[16]) }
func (gdClass AudioStreamPlayer2D) SetAttenuation(curve float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[17], &curve) }
func (gdClass AudioStreamPlayer2D) GetAttenuation() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[18]) }
func (gdClass AudioStreamPlayer2D) SetAreaMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[19], &mask) }
func (gdClass AudioStreamPlayer2D) GetAreaMask() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamPlayer2D[20]) }
func (gdClass AudioStreamPlayer2D) SetStreamPaused(pause bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[21], &pause) }
func (gdClass AudioStreamPlayer2D) GetStreamPaused() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer2D[22]) }
func (gdClass AudioStreamPlayer2D) SetMaxPolyphony(max_polyphony int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[23], &max_polyphony) }
func (gdClass AudioStreamPlayer2D) GetMaxPolyphony() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamPlayer2D[24]) }
func (gdClass AudioStreamPlayer2D) SetPanningStrength(panning_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer2D[25], &panning_strength) }
func (gdClass AudioStreamPlayer2D) GetPanningStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer2D[26]) }
func (gdClass AudioStreamPlayer2D) GetStreamPlayback() AudioStreamPlayback { return methodCall[AudioStreamPlayback](gdClass.obj.get(), methodAudioStreamPlayer2D[27]) }

type AudioStreamPlayer3DAttenuationModel int64

const (
	AudioStreamPlayer3DAttenuationInverseDistance AudioStreamPlayer3DAttenuationModel = 0
	AudioStreamPlayer3DAttenuationInverseSquareDistance AudioStreamPlayer3DAttenuationModel = 1
	AudioStreamPlayer3DAttenuationLogarithmic AudioStreamPlayer3DAttenuationModel = 2
	AudioStreamPlayer3DAttenuationDisabled AudioStreamPlayer3DAttenuationModel = 3
)

type AudioStreamPlayer3DDopplerTracking int64

const (
	AudioStreamPlayer3DDopplerTrackingDisabled AudioStreamPlayer3DDopplerTracking = 0
	AudioStreamPlayer3DDopplerTrackingIdleStep AudioStreamPlayer3DDopplerTracking = 1
	AudioStreamPlayer3DDopplerTrackingPhysicsStep AudioStreamPlayer3DDopplerTracking = 2
)

type AudioStreamPlayer3D struct{self *AudioStreamPlayer3D; obj safeObject }
func NewAudioStreamPlayer3D(ctx Context, at *AudioStreamPlayer3D) AudioStreamPlayer3D { if at == nil { at = new(AudioStreamPlayer3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass AudioStreamPlayer3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamPlayer3D) owner() cObject { return gdClass.obj.get() }
func (AudioStreamPlayer3D) class() string { return "AudioStreamPlayer3D\000" }

func (gdClass AudioStreamPlayer3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodAudioStreamPlayer3D [44]cMethodBind
func (gdClass AudioStreamPlayer3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass AudioStreamPlayer3D) SetStream(stream AudioStream)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[0], &stream) }
func (gdClass AudioStreamPlayer3D) GetStream() AudioStream { return methodCall[AudioStream](gdClass.obj.get(), methodAudioStreamPlayer3D[1]) }
func (gdClass AudioStreamPlayer3D) SetUnitDb(unit_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[2], &unit_db) }
func (gdClass AudioStreamPlayer3D) GetUnitDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[3]) }
func (gdClass AudioStreamPlayer3D) SetUnitSize(unit_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[4], &unit_size) }
func (gdClass AudioStreamPlayer3D) GetUnitSize() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[5]) }
func (gdClass AudioStreamPlayer3D) SetMaxDb(max_db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[6], &max_db) }
func (gdClass AudioStreamPlayer3D) GetMaxDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[7]) }
func (gdClass AudioStreamPlayer3D) SetPitchScale(pitch_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[8], &pitch_scale) }
func (gdClass AudioStreamPlayer3D) GetPitchScale() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[9]) }
func (gdClass AudioStreamPlayer3D) Play(from_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[10], &from_position) }
func (gdClass AudioStreamPlayer3D) SeekTo(to_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[11], &to_position) }
func (gdClass AudioStreamPlayer3D) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[12]) }
func (gdClass AudioStreamPlayer3D) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer3D[13]) }
func (gdClass AudioStreamPlayer3D) GetPlaybackPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[14]) }
func (gdClass AudioStreamPlayer3D) SetBus(bus Name)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[15], &bus) }
func (gdClass AudioStreamPlayer3D) GetBus() Name { return methodCall[Name](gdClass.obj.get(), methodAudioStreamPlayer3D[16]) }
func (gdClass AudioStreamPlayer3D) SetAutoplay(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[17], &enable) }
func (gdClass AudioStreamPlayer3D) IsAutoplayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer3D[18]) }
func (gdClass AudioStreamPlayer3D) SetMaxDistance(metres float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[19], &metres) }
func (gdClass AudioStreamPlayer3D) GetMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[20]) }
func (gdClass AudioStreamPlayer3D) SetAreaMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[21], &mask) }
func (gdClass AudioStreamPlayer3D) GetAreaMask() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamPlayer3D[22]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngle(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[23], &degrees) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[24]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[25], &enabled) }
func (gdClass AudioStreamPlayer3D) IsEmissionAngleEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer3D[26]) }
func (gdClass AudioStreamPlayer3D) SetEmissionAngleFilterAttenuationDb(db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[27], &db) }
func (gdClass AudioStreamPlayer3D) GetEmissionAngleFilterAttenuationDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[28]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterCutoffHz(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[29], &degrees) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterCutoffHz() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[30]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationFilterDb(db float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[31], &db) }
func (gdClass AudioStreamPlayer3D) GetAttenuationFilterDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[32]) }
func (gdClass AudioStreamPlayer3D) SetAttenuationModel(model AudioStreamPlayer3DAttenuationModel)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[33], &model) }
func (gdClass AudioStreamPlayer3D) GetAttenuationModel() AudioStreamPlayer3DAttenuationModel { return methodCall[AudioStreamPlayer3DAttenuationModel](gdClass.obj.get(), methodAudioStreamPlayer3D[34]) }
func (gdClass AudioStreamPlayer3D) SetDopplerTracking(mode AudioStreamPlayer3DDopplerTracking)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[35], &mode) }
func (gdClass AudioStreamPlayer3D) GetDopplerTracking() AudioStreamPlayer3DDopplerTracking { return methodCall[AudioStreamPlayer3DDopplerTracking](gdClass.obj.get(), methodAudioStreamPlayer3D[36]) }
func (gdClass AudioStreamPlayer3D) SetStreamPaused(pause bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[37], &pause) }
func (gdClass AudioStreamPlayer3D) GetStreamPaused() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamPlayer3D[38]) }
func (gdClass AudioStreamPlayer3D) SetMaxPolyphony(max_polyphony int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[39], &max_polyphony) }
func (gdClass AudioStreamPlayer3D) GetMaxPolyphony() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamPlayer3D[40]) }
func (gdClass AudioStreamPlayer3D) SetPanningStrength(panning_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamPlayer3D[41], &panning_strength) }
func (gdClass AudioStreamPlayer3D) GetPanningStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamPlayer3D[42]) }
func (gdClass AudioStreamPlayer3D) GetStreamPlayback() AudioStreamPlayback { return methodCall[AudioStreamPlayback](gdClass.obj.get(), methodAudioStreamPlayer3D[43]) }

type AudioStreamRandomizerPlaybackMode int64

const (
	AudioStreamRandomizerPlaybackRandomNoRepeats AudioStreamRandomizerPlaybackMode = 0
	AudioStreamRandomizerPlaybackRandom AudioStreamRandomizerPlaybackMode = 1
	AudioStreamRandomizerPlaybackSequential AudioStreamRandomizerPlaybackMode = 2
)

type AudioStreamRandomizer struct{self *AudioStreamRandomizer; obj safeObject }
func NewAudioStreamRandomizer(ctx Context, at *AudioStreamRandomizer) AudioStreamRandomizer { if at == nil { at = new(AudioStreamRandomizer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamRandomizer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamRandomizer) owner() cObject { return gdClass.obj.get() }
func (AudioStreamRandomizer) class() string { return "AudioStreamRandomizer\000" }

func (gdClass AudioStreamRandomizer) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

var methodAudioStreamRandomizer [15]cMethodBind
func (gdClass AudioStreamRandomizer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}
func (gdClass AudioStreamRandomizer) AddStream(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[0], &index) }
func (gdClass AudioStreamRandomizer) MoveStream(index_from int64, index_to int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[1], &index_from, &index_to) }
func (gdClass AudioStreamRandomizer) RemoveStream(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[2], &index) }
func (gdClass AudioStreamRandomizer) SetStream(index int64, stream AudioStream)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[3], &index, &stream) }
func (gdClass AudioStreamRandomizer) GetStream(index int64) AudioStream { return methodCall[AudioStream](gdClass.obj.get(), methodAudioStreamRandomizer[4], &index) }
func (gdClass AudioStreamRandomizer) SetStreamProbabilityWeight(index int64, weight float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[5], &index, &weight) }
func (gdClass AudioStreamRandomizer) GetStreamProbabilityWeight(index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamRandomizer[6], &index) }
func (gdClass AudioStreamRandomizer) SetStreamsCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[7], &count) }
func (gdClass AudioStreamRandomizer) GetStreamsCount() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamRandomizer[8]) }
func (gdClass AudioStreamRandomizer) SetRandomPitch(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[9], &scale) }
func (gdClass AudioStreamRandomizer) GetRandomPitch() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamRandomizer[10]) }
func (gdClass AudioStreamRandomizer) SetRandomVolumeOffsetDb(db_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[11], &db_offset) }
func (gdClass AudioStreamRandomizer) GetRandomVolumeOffsetDb() float64 { return methodCall[float64](gdClass.obj.get(), methodAudioStreamRandomizer[12]) }
func (gdClass AudioStreamRandomizer) SetPlaybackMode(mode AudioStreamRandomizerPlaybackMode)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamRandomizer[13], &mode) }
func (gdClass AudioStreamRandomizer) GetPlaybackMode() AudioStreamRandomizerPlaybackMode { return methodCall[AudioStreamRandomizerPlaybackMode](gdClass.obj.get(), methodAudioStreamRandomizer[14]) }

type AudioStreamWAVFormat int64

const (
	AudioStreamWAVFormat8Bits AudioStreamWAVFormat = 0
	AudioStreamWAVFormat16Bits AudioStreamWAVFormat = 1
	AudioStreamWAVFormatImaAdpcm AudioStreamWAVFormat = 2
)

type AudioStreamWAVLoopMode int64

const (
	AudioStreamWAVLoopDisabled AudioStreamWAVLoopMode = 0
	AudioStreamWAVLoopForward AudioStreamWAVLoopMode = 1
	AudioStreamWAVLoopPingpong AudioStreamWAVLoopMode = 2
	AudioStreamWAVLoopBackward AudioStreamWAVLoopMode = 3
)

type AudioStreamWAV struct{self *AudioStreamWAV; obj safeObject }
func NewAudioStreamWAV(ctx Context, at *AudioStreamWAV) AudioStreamWAV { if at == nil { at = new(AudioStreamWAV) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass AudioStreamWAV) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass AudioStreamWAV) owner() cObject { return gdClass.obj.get() }
func (AudioStreamWAV) class() string { return "AudioStreamWAV\000" }

func (gdClass AudioStreamWAV) AudioStream() AudioStream { return AudioStream{obj:gdClass.obj} }

var methodAudioStreamWAV [15]cMethodBind
func (gdClass AudioStreamWAV) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AudioStream().virtual(rtype, name)
}
func (gdClass AudioStreamWAV) SetData(data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[0], &data) }
func (gdClass AudioStreamWAV) GetData() []byte { return methodCall[[]byte](gdClass.obj.get(), methodAudioStreamWAV[1]) }
func (gdClass AudioStreamWAV) SetFormat(format AudioStreamWAVFormat)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[2], &format) }
func (gdClass AudioStreamWAV) GetFormat() AudioStreamWAVFormat { return methodCall[AudioStreamWAVFormat](gdClass.obj.get(), methodAudioStreamWAV[3]) }
func (gdClass AudioStreamWAV) SetLoopMode(loop_mode AudioStreamWAVLoopMode)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[4], &loop_mode) }
func (gdClass AudioStreamWAV) GetLoopMode() AudioStreamWAVLoopMode { return methodCall[AudioStreamWAVLoopMode](gdClass.obj.get(), methodAudioStreamWAV[5]) }
func (gdClass AudioStreamWAV) SetLoopBegin(loop_begin int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[6], &loop_begin) }
func (gdClass AudioStreamWAV) GetLoopBegin() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamWAV[7]) }
func (gdClass AudioStreamWAV) SetLoopEnd(loop_end int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[8], &loop_end) }
func (gdClass AudioStreamWAV) GetLoopEnd() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamWAV[9]) }
func (gdClass AudioStreamWAV) SetMixRate(mix_rate int64)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[10], &mix_rate) }
func (gdClass AudioStreamWAV) GetMixRate() int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamWAV[11]) }
func (gdClass AudioStreamWAV) SetStereo(stereo bool)  { methodCall[struct{}](gdClass.obj.get(), methodAudioStreamWAV[12], &stereo) }
func (gdClass AudioStreamWAV) IsStereo() bool { return methodCall[bool](gdClass.obj.get(), methodAudioStreamWAV[13]) }
func (gdClass AudioStreamWAV) SaveToWav(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodAudioStreamWAV[14], &path) }

type BackBufferCopyCopyMode int64

const (
	BackBufferCopyCopyModeDisabled BackBufferCopyCopyMode = 0
	BackBufferCopyCopyModeRect BackBufferCopyCopyMode = 1
	BackBufferCopyCopyModeViewport BackBufferCopyCopyMode = 2
)

type BackBufferCopy struct{self *BackBufferCopy; obj safeObject }
func NewBackBufferCopy(ctx Context, at *BackBufferCopy) BackBufferCopy { if at == nil { at = new(BackBufferCopy) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass BackBufferCopy) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BackBufferCopy) owner() cObject { return gdClass.obj.get() }
func (BackBufferCopy) class() string { return "BackBufferCopy\000" }

func (gdClass BackBufferCopy) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodBackBufferCopy [4]cMethodBind
func (gdClass BackBufferCopy) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass BackBufferCopy) SetRect(rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodBackBufferCopy[0], &rect) }
func (gdClass BackBufferCopy) GetRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodBackBufferCopy[1]) }
func (gdClass BackBufferCopy) SetCopyMode(copy_mode BackBufferCopyCopyMode)  { methodCall[struct{}](gdClass.obj.get(), methodBackBufferCopy[2], &copy_mode) }
func (gdClass BackBufferCopy) GetCopyMode() BackBufferCopyCopyMode { return methodCall[BackBufferCopyCopyMode](gdClass.obj.get(), methodBackBufferCopy[3]) }

type BaseButtonDrawMode int64

const (
	BaseButtonDrawNormal BaseButtonDrawMode = 0
	BaseButtonDrawPressed BaseButtonDrawMode = 1
	BaseButtonDrawHover BaseButtonDrawMode = 2
	BaseButtonDrawDisabled BaseButtonDrawMode = 3
	BaseButtonDrawHoverPressed BaseButtonDrawMode = 4
)

type BaseButtonActionMode int64

const (
	BaseButtonActionModeButtonPress BaseButtonActionMode = 0
	BaseButtonActionModeButtonRelease BaseButtonActionMode = 1
)

type BaseButton struct{self *BaseButton; obj safeObject }
func NewBaseButton(ctx Context, at *BaseButton) BaseButton { if at == nil { at = new(BaseButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass BaseButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BaseButton) owner() cObject { return gdClass.obj.get() }
func (BaseButton) class() string { return "BaseButton\000" }

func (gdClass BaseButton) Control() Control { return Control{obj:gdClass.obj} }

var methodBaseButton [23]cMethodBind
func (gdClass BaseButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_pressed":
		if rtype.Implements(reflect.TypeOf([0]interface{ Pressed()  }{}).Elem()) {
			return rtype.MethodByName(`Pressed`)
		}
		return
	case "_toggled":
		if rtype.Implements(reflect.TypeOf([0]interface{ Toggled(button_pressed bool)  }{}).Elem()) {
			return rtype.MethodByName(`Toggled`)
		}
		return
	}
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass BaseButton) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[0], &pressed) }
func (gdClass BaseButton) IsPressed() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[1]) }
func (gdClass BaseButton) SetPressedNoSignal(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[2], &pressed) }
func (gdClass BaseButton) IsHovered() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[3]) }
func (gdClass BaseButton) SetToggleMode(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[4], &enabled) }
func (gdClass BaseButton) IsToggleMode() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[5]) }
func (gdClass BaseButton) SetShortcutInTooltip(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[6], &enabled) }
func (gdClass BaseButton) IsShortcutInTooltipEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[7]) }
func (gdClass BaseButton) SetDisabled(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[8], &disabled) }
func (gdClass BaseButton) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[9]) }
func (gdClass BaseButton) SetActionMode(mode BaseButtonActionMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[10], &mode) }
func (gdClass BaseButton) GetActionMode() BaseButtonActionMode { return methodCall[BaseButtonActionMode](gdClass.obj.get(), methodBaseButton[11]) }
func (gdClass BaseButton) SetButtonMask(mask MouseButton)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[12], &mask) }
func (gdClass BaseButton) GetButtonMask() MouseButton { return methodCall[MouseButton](gdClass.obj.get(), methodBaseButton[13]) }
func (gdClass BaseButton) GetDrawMode() BaseButtonDrawMode { return methodCall[BaseButtonDrawMode](gdClass.obj.get(), methodBaseButton[14]) }
func (gdClass BaseButton) SetKeepPressedOutside(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[15], &enabled) }
func (gdClass BaseButton) IsKeepPressedOutside() bool { return methodCall[bool](gdClass.obj.get(), methodBaseButton[16]) }
func (gdClass BaseButton) SetShortcut(shortcut Shortcut)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[17], &shortcut) }
func (gdClass BaseButton) GetShortcut() Shortcut { return methodCall[Shortcut](gdClass.obj.get(), methodBaseButton[18]) }
func (gdClass BaseButton) SetButtonGroup(button_group ButtonGroup)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[19], &button_group) }
func (gdClass BaseButton) GetButtonGroup() ButtonGroup { return methodCall[ButtonGroup](gdClass.obj.get(), methodBaseButton[20]) }
func (gdClass BaseButton) SetShortcutContext(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodBaseButton[21], &node) }
func (gdClass BaseButton) GetShortcutContext() Node { return methodCall[Node](gdClass.obj.get(), methodBaseButton[22]) }

type BaseMaterial3DTextureParam int64

const (
	BaseMaterial3DTextureAlbedo BaseMaterial3DTextureParam = 0
	BaseMaterial3DTextureMetallic BaseMaterial3DTextureParam = 1
	BaseMaterial3DTextureRoughness BaseMaterial3DTextureParam = 2
	BaseMaterial3DTextureEmission BaseMaterial3DTextureParam = 3
	BaseMaterial3DTextureNormal BaseMaterial3DTextureParam = 4
	BaseMaterial3DTextureRim BaseMaterial3DTextureParam = 5
	BaseMaterial3DTextureClearcoat BaseMaterial3DTextureParam = 6
	BaseMaterial3DTextureFlowmap BaseMaterial3DTextureParam = 7
	BaseMaterial3DTextureAmbientOcclusion BaseMaterial3DTextureParam = 8
	BaseMaterial3DTextureHeightmap BaseMaterial3DTextureParam = 9
	BaseMaterial3DTextureSubsurfaceScattering BaseMaterial3DTextureParam = 10
	BaseMaterial3DTextureSubsurfaceTransmittance BaseMaterial3DTextureParam = 11
	BaseMaterial3DTextureBacklight BaseMaterial3DTextureParam = 12
	BaseMaterial3DTextureRefraction BaseMaterial3DTextureParam = 13
	BaseMaterial3DTextureDetailMask BaseMaterial3DTextureParam = 14
	BaseMaterial3DTextureDetailAlbedo BaseMaterial3DTextureParam = 15
	BaseMaterial3DTextureDetailNormal BaseMaterial3DTextureParam = 16
	BaseMaterial3DTextureOrm BaseMaterial3DTextureParam = 17
	BaseMaterial3DTextureMax BaseMaterial3DTextureParam = 18
)

type BaseMaterial3DTextureFilter int64

const (
	BaseMaterial3DTextureFilterNearest BaseMaterial3DTextureFilter = 0
	BaseMaterial3DTextureFilterLinear BaseMaterial3DTextureFilter = 1
	BaseMaterial3DTextureFilterNearestWithMipmaps BaseMaterial3DTextureFilter = 2
	BaseMaterial3DTextureFilterLinearWithMipmaps BaseMaterial3DTextureFilter = 3
	BaseMaterial3DTextureFilterNearestWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 4
	BaseMaterial3DTextureFilterLinearWithMipmapsAnisotropic BaseMaterial3DTextureFilter = 5
	BaseMaterial3DTextureFilterMax BaseMaterial3DTextureFilter = 6
)

type BaseMaterial3DDetailUV int64

const (
	BaseMaterial3DDetailUv1 BaseMaterial3DDetailUV = 0
	BaseMaterial3DDetailUv2 BaseMaterial3DDetailUV = 1
)

type BaseMaterial3DTransparency int64

const (
	BaseMaterial3DTransparencyDisabled BaseMaterial3DTransparency = 0
	BaseMaterial3DTransparencyAlpha BaseMaterial3DTransparency = 1
	BaseMaterial3DTransparencyAlphaScissor BaseMaterial3DTransparency = 2
	BaseMaterial3DTransparencyAlphaHash BaseMaterial3DTransparency = 3
	BaseMaterial3DTransparencyAlphaDepthPrePass BaseMaterial3DTransparency = 4
	BaseMaterial3DTransparencyMax BaseMaterial3DTransparency = 5
)

type BaseMaterial3DShadingMode int64

const (
	BaseMaterial3DShadingModeUnshaded BaseMaterial3DShadingMode = 0
	BaseMaterial3DShadingModePerPixel BaseMaterial3DShadingMode = 1
	BaseMaterial3DShadingModePerVertex BaseMaterial3DShadingMode = 2
	BaseMaterial3DShadingModeMax BaseMaterial3DShadingMode = 3
)

type BaseMaterial3DFeature int64

const (
	BaseMaterial3DFeatureEmission BaseMaterial3DFeature = 0
	BaseMaterial3DFeatureNormalMapping BaseMaterial3DFeature = 1
	BaseMaterial3DFeatureRim BaseMaterial3DFeature = 2
	BaseMaterial3DFeatureClearcoat BaseMaterial3DFeature = 3
	BaseMaterial3DFeatureAnisotropy BaseMaterial3DFeature = 4
	BaseMaterial3DFeatureAmbientOcclusion BaseMaterial3DFeature = 5
	BaseMaterial3DFeatureHeightMapping BaseMaterial3DFeature = 6
	BaseMaterial3DFeatureSubsurfaceScattering BaseMaterial3DFeature = 7
	BaseMaterial3DFeatureSubsurfaceTransmittance BaseMaterial3DFeature = 8
	BaseMaterial3DFeatureBacklight BaseMaterial3DFeature = 9
	BaseMaterial3DFeatureRefraction BaseMaterial3DFeature = 10
	BaseMaterial3DFeatureDetail BaseMaterial3DFeature = 11
	BaseMaterial3DFeatureMax BaseMaterial3DFeature = 12
)

type BaseMaterial3DBlendMode int64

const (
	BaseMaterial3DBlendModeMix BaseMaterial3DBlendMode = 0
	BaseMaterial3DBlendModeAdd BaseMaterial3DBlendMode = 1
	BaseMaterial3DBlendModeSub BaseMaterial3DBlendMode = 2
	BaseMaterial3DBlendModeMul BaseMaterial3DBlendMode = 3
)

type BaseMaterial3DAlphaAntiAliasing int64

const (
	BaseMaterial3DAlphaAntialiasingOff BaseMaterial3DAlphaAntiAliasing = 0
	BaseMaterial3DAlphaAntialiasingAlphaToCoverage BaseMaterial3DAlphaAntiAliasing = 1
	BaseMaterial3DAlphaAntialiasingAlphaToCoverageAndToOne BaseMaterial3DAlphaAntiAliasing = 2
)

type BaseMaterial3DDepthDrawMode int64

const (
	BaseMaterial3DDepthDrawOpaqueOnly BaseMaterial3DDepthDrawMode = 0
	BaseMaterial3DDepthDrawAlways BaseMaterial3DDepthDrawMode = 1
	BaseMaterial3DDepthDrawDisabled BaseMaterial3DDepthDrawMode = 2
)

type BaseMaterial3DCullMode int64

const (
	BaseMaterial3DCullBack BaseMaterial3DCullMode = 0
	BaseMaterial3DCullFront BaseMaterial3DCullMode = 1
	BaseMaterial3DCullDisabled BaseMaterial3DCullMode = 2
)

type BaseMaterial3DFlags int64

const (
	BaseMaterial3DFlagDisableDepthTest BaseMaterial3DFlags = 0
	BaseMaterial3DFlagAlbedoFromVertexColor BaseMaterial3DFlags = 1
	BaseMaterial3DFlagSrgbVertexColor BaseMaterial3DFlags = 2
	BaseMaterial3DFlagUsePointSize BaseMaterial3DFlags = 3
	BaseMaterial3DFlagFixedSize BaseMaterial3DFlags = 4
	BaseMaterial3DFlagBillboardKeepScale BaseMaterial3DFlags = 5
	BaseMaterial3DFlagUv1UseTriplanar BaseMaterial3DFlags = 6
	BaseMaterial3DFlagUv2UseTriplanar BaseMaterial3DFlags = 7
	BaseMaterial3DFlagUv1UseWorldTriplanar BaseMaterial3DFlags = 8
	BaseMaterial3DFlagUv2UseWorldTriplanar BaseMaterial3DFlags = 9
	BaseMaterial3DFlagAoOnUv2 BaseMaterial3DFlags = 10
	BaseMaterial3DFlagEmissionOnUv2 BaseMaterial3DFlags = 11
	BaseMaterial3DFlagAlbedoTextureForceSrgb BaseMaterial3DFlags = 12
	BaseMaterial3DFlagDontReceiveShadows BaseMaterial3DFlags = 13
	BaseMaterial3DFlagDisableAmbientLight BaseMaterial3DFlags = 14
	BaseMaterial3DFlagUseShadowToOpacity BaseMaterial3DFlags = 15
	BaseMaterial3DFlagUseTextureRepeat BaseMaterial3DFlags = 16
	BaseMaterial3DFlagInvertHeightmap BaseMaterial3DFlags = 17
	BaseMaterial3DFlagSubsurfaceModeSkin BaseMaterial3DFlags = 18
	BaseMaterial3DFlagParticleTrailsMode BaseMaterial3DFlags = 19
	BaseMaterial3DFlagAlbedoTextureMsdf BaseMaterial3DFlags = 20
	BaseMaterial3DFlagMax BaseMaterial3DFlags = 21
)

type BaseMaterial3DDiffuseMode int64

const (
	BaseMaterial3DDiffuseBurley BaseMaterial3DDiffuseMode = 0
	BaseMaterial3DDiffuseLambert BaseMaterial3DDiffuseMode = 1
	BaseMaterial3DDiffuseLambertWrap BaseMaterial3DDiffuseMode = 2
	BaseMaterial3DDiffuseToon BaseMaterial3DDiffuseMode = 3
)

type BaseMaterial3DSpecularMode int64

const (
	BaseMaterial3DSpecularSchlickGgx BaseMaterial3DSpecularMode = 0
	BaseMaterial3DSpecularToon BaseMaterial3DSpecularMode = 1
	BaseMaterial3DSpecularDisabled BaseMaterial3DSpecularMode = 2
)

type BaseMaterial3DBillboardMode int64

const (
	BaseMaterial3DBillboardDisabled BaseMaterial3DBillboardMode = 0
	BaseMaterial3DBillboardEnabled BaseMaterial3DBillboardMode = 1
	BaseMaterial3DBillboardFixedY BaseMaterial3DBillboardMode = 2
	BaseMaterial3DBillboardParticles BaseMaterial3DBillboardMode = 3
)

type BaseMaterial3DTextureChannel int64

const (
	BaseMaterial3DTextureChannelRed BaseMaterial3DTextureChannel = 0
	BaseMaterial3DTextureChannelGreen BaseMaterial3DTextureChannel = 1
	BaseMaterial3DTextureChannelBlue BaseMaterial3DTextureChannel = 2
	BaseMaterial3DTextureChannelAlpha BaseMaterial3DTextureChannel = 3
	BaseMaterial3DTextureChannelGrayscale BaseMaterial3DTextureChannel = 4
)

type BaseMaterial3DEmissionOperator int64

const (
	BaseMaterial3DEmissionOpAdd BaseMaterial3DEmissionOperator = 0
	BaseMaterial3DEmissionOpMultiply BaseMaterial3DEmissionOperator = 1
)

type BaseMaterial3DDistanceFadeMode int64

const (
	BaseMaterial3DDistanceFadeDisabled BaseMaterial3DDistanceFadeMode = 0
	BaseMaterial3DDistanceFadePixelAlpha BaseMaterial3DDistanceFadeMode = 1
	BaseMaterial3DDistanceFadePixelDither BaseMaterial3DDistanceFadeMode = 2
	BaseMaterial3DDistanceFadeObjectDither BaseMaterial3DDistanceFadeMode = 3
)

type BaseMaterial3D struct{self *BaseMaterial3D; obj safeObject }
func NewBaseMaterial3D(ctx Context, at *BaseMaterial3D) BaseMaterial3D { if at == nil { at = new(BaseMaterial3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BaseMaterial3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BaseMaterial3D) owner() cObject { return gdClass.obj.get() }
func (BaseMaterial3D) class() string { return "BaseMaterial3D\000" }

func (gdClass BaseMaterial3D) Material() Material { return Material{obj:gdClass.obj} }

var methodBaseMaterial3D [134]cMethodBind
func (gdClass BaseMaterial3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass BaseMaterial3D) SetAlbedo(albedo Color)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[0], &albedo) }
func (gdClass BaseMaterial3D) GetAlbedo() Color { return methodCall[Color](gdClass.obj.get(), methodBaseMaterial3D[1]) }
func (gdClass BaseMaterial3D) SetTransparency(transparency BaseMaterial3DTransparency)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[2], &transparency) }
func (gdClass BaseMaterial3D) GetTransparency() BaseMaterial3DTransparency { return methodCall[BaseMaterial3DTransparency](gdClass.obj.get(), methodBaseMaterial3D[3]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasing(alpha_aa BaseMaterial3DAlphaAntiAliasing)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[4], &alpha_aa) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasing() BaseMaterial3DAlphaAntiAliasing { return methodCall[BaseMaterial3DAlphaAntiAliasing](gdClass.obj.get(), methodBaseMaterial3D[5]) }
func (gdClass BaseMaterial3D) SetAlphaAntialiasingEdge(edge float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[6], &edge) }
func (gdClass BaseMaterial3D) GetAlphaAntialiasingEdge() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[7]) }
func (gdClass BaseMaterial3D) SetShadingMode(shading_mode BaseMaterial3DShadingMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[8], &shading_mode) }
func (gdClass BaseMaterial3D) GetShadingMode() BaseMaterial3DShadingMode { return methodCall[BaseMaterial3DShadingMode](gdClass.obj.get(), methodBaseMaterial3D[9]) }
func (gdClass BaseMaterial3D) SetSpecular(specular float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[10], &specular) }
func (gdClass BaseMaterial3D) GetSpecular() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[11]) }
func (gdClass BaseMaterial3D) SetMetallic(metallic float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[12], &metallic) }
func (gdClass BaseMaterial3D) GetMetallic() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[13]) }
func (gdClass BaseMaterial3D) SetRoughness(roughness float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[14], &roughness) }
func (gdClass BaseMaterial3D) GetRoughness() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[15]) }
func (gdClass BaseMaterial3D) SetEmission(emission Color)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[16], &emission) }
func (gdClass BaseMaterial3D) GetEmission() Color { return methodCall[Color](gdClass.obj.get(), methodBaseMaterial3D[17]) }
func (gdClass BaseMaterial3D) SetEmissionEnergy(emission_energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[18], &emission_energy) }
func (gdClass BaseMaterial3D) GetEmissionEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[19]) }
func (gdClass BaseMaterial3D) SetNormalScale(normal_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[20], &normal_scale) }
func (gdClass BaseMaterial3D) GetNormalScale() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[21]) }
func (gdClass BaseMaterial3D) SetRim(rim float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[22], &rim) }
func (gdClass BaseMaterial3D) GetRim() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[23]) }
func (gdClass BaseMaterial3D) SetRimTint(rim_tint float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[24], &rim_tint) }
func (gdClass BaseMaterial3D) GetRimTint() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[25]) }
func (gdClass BaseMaterial3D) SetClearcoat(clearcoat float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[26], &clearcoat) }
func (gdClass BaseMaterial3D) GetClearcoat() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[27]) }
func (gdClass BaseMaterial3D) SetClearcoatRoughness(clearcoat_roughness float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[28], &clearcoat_roughness) }
func (gdClass BaseMaterial3D) GetClearcoatRoughness() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[29]) }
func (gdClass BaseMaterial3D) SetAnisotropy(anisotropy float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[30], &anisotropy) }
func (gdClass BaseMaterial3D) GetAnisotropy() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[31]) }
func (gdClass BaseMaterial3D) SetHeightmapScale(heightmap_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[32], &heightmap_scale) }
func (gdClass BaseMaterial3D) GetHeightmapScale() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[33]) }
func (gdClass BaseMaterial3D) SetSubsurfaceScatteringStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[34], &strength) }
func (gdClass BaseMaterial3D) GetSubsurfaceScatteringStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[35]) }
func (gdClass BaseMaterial3D) SetTransmittanceColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[36], &color) }
func (gdClass BaseMaterial3D) GetTransmittanceColor() Color { return methodCall[Color](gdClass.obj.get(), methodBaseMaterial3D[37]) }
func (gdClass BaseMaterial3D) SetTransmittanceDepth(depth float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[38], &depth) }
func (gdClass BaseMaterial3D) GetTransmittanceDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[39]) }
func (gdClass BaseMaterial3D) SetTransmittanceBoost(boost float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[40], &boost) }
func (gdClass BaseMaterial3D) GetTransmittanceBoost() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[41]) }
func (gdClass BaseMaterial3D) SetBacklight(backlight Color)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[42], &backlight) }
func (gdClass BaseMaterial3D) GetBacklight() Color { return methodCall[Color](gdClass.obj.get(), methodBaseMaterial3D[43]) }
func (gdClass BaseMaterial3D) SetRefraction(refraction float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[44], &refraction) }
func (gdClass BaseMaterial3D) GetRefraction() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[45]) }
func (gdClass BaseMaterial3D) SetPointSize(point_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[46], &point_size) }
func (gdClass BaseMaterial3D) GetPointSize() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[47]) }
func (gdClass BaseMaterial3D) SetDetailUv(detail_uv BaseMaterial3DDetailUV)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[48], &detail_uv) }
func (gdClass BaseMaterial3D) GetDetailUv() BaseMaterial3DDetailUV { return methodCall[BaseMaterial3DDetailUV](gdClass.obj.get(), methodBaseMaterial3D[49]) }
func (gdClass BaseMaterial3D) SetBlendMode(blend_mode BaseMaterial3DBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[50], &blend_mode) }
func (gdClass BaseMaterial3D) GetBlendMode() BaseMaterial3DBlendMode { return methodCall[BaseMaterial3DBlendMode](gdClass.obj.get(), methodBaseMaterial3D[51]) }
func (gdClass BaseMaterial3D) SetDepthDrawMode(depth_draw_mode BaseMaterial3DDepthDrawMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[52], &depth_draw_mode) }
func (gdClass BaseMaterial3D) GetDepthDrawMode() BaseMaterial3DDepthDrawMode { return methodCall[BaseMaterial3DDepthDrawMode](gdClass.obj.get(), methodBaseMaterial3D[53]) }
func (gdClass BaseMaterial3D) SetCullMode(cull_mode BaseMaterial3DCullMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[54], &cull_mode) }
func (gdClass BaseMaterial3D) GetCullMode() BaseMaterial3DCullMode { return methodCall[BaseMaterial3DCullMode](gdClass.obj.get(), methodBaseMaterial3D[55]) }
func (gdClass BaseMaterial3D) SetDiffuseMode(diffuse_mode BaseMaterial3DDiffuseMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[56], &diffuse_mode) }
func (gdClass BaseMaterial3D) GetDiffuseMode() BaseMaterial3DDiffuseMode { return methodCall[BaseMaterial3DDiffuseMode](gdClass.obj.get(), methodBaseMaterial3D[57]) }
func (gdClass BaseMaterial3D) SetSpecularMode(specular_mode BaseMaterial3DSpecularMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[58], &specular_mode) }
func (gdClass BaseMaterial3D) GetSpecularMode() BaseMaterial3DSpecularMode { return methodCall[BaseMaterial3DSpecularMode](gdClass.obj.get(), methodBaseMaterial3D[59]) }
func (gdClass BaseMaterial3D) SetFlag(flag BaseMaterial3DFlags, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[60], &flag, &enable) }
func (gdClass BaseMaterial3D) GetFlag(flag BaseMaterial3DFlags) bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[61], &flag) }
func (gdClass BaseMaterial3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[62], &mode) }
func (gdClass BaseMaterial3D) GetTextureFilter() BaseMaterial3DTextureFilter { return methodCall[BaseMaterial3DTextureFilter](gdClass.obj.get(), methodBaseMaterial3D[63]) }
func (gdClass BaseMaterial3D) SetFeature(feature BaseMaterial3DFeature, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[64], &feature, &enable) }
func (gdClass BaseMaterial3D) GetFeature(feature BaseMaterial3DFeature) bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[65], &feature) }
func (gdClass BaseMaterial3D) SetTexture(param BaseMaterial3DTextureParam, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[66], &param, &texture) }
func (gdClass BaseMaterial3D) GetTexture(param BaseMaterial3DTextureParam) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodBaseMaterial3D[67], &param) }
func (gdClass BaseMaterial3D) SetDetailBlendMode(detail_blend_mode BaseMaterial3DBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[68], &detail_blend_mode) }
func (gdClass BaseMaterial3D) GetDetailBlendMode() BaseMaterial3DBlendMode { return methodCall[BaseMaterial3DBlendMode](gdClass.obj.get(), methodBaseMaterial3D[69]) }
func (gdClass BaseMaterial3D) SetUv1Scale(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[70], &scale) }
func (gdClass BaseMaterial3D) GetUv1Scale() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBaseMaterial3D[71]) }
func (gdClass BaseMaterial3D) SetUv1Offset(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[72], &offset) }
func (gdClass BaseMaterial3D) GetUv1Offset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBaseMaterial3D[73]) }
func (gdClass BaseMaterial3D) SetUv1TriplanarBlendSharpness(sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[74], &sharpness) }
func (gdClass BaseMaterial3D) GetUv1TriplanarBlendSharpness() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[75]) }
func (gdClass BaseMaterial3D) SetUv2Scale(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[76], &scale) }
func (gdClass BaseMaterial3D) GetUv2Scale() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBaseMaterial3D[77]) }
func (gdClass BaseMaterial3D) SetUv2Offset(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[78], &offset) }
func (gdClass BaseMaterial3D) GetUv2Offset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBaseMaterial3D[79]) }
func (gdClass BaseMaterial3D) SetUv2TriplanarBlendSharpness(sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[80], &sharpness) }
func (gdClass BaseMaterial3D) GetUv2TriplanarBlendSharpness() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[81]) }
func (gdClass BaseMaterial3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[82], &mode) }
func (gdClass BaseMaterial3D) GetBillboardMode() BaseMaterial3DBillboardMode { return methodCall[BaseMaterial3DBillboardMode](gdClass.obj.get(), methodBaseMaterial3D[83]) }
func (gdClass BaseMaterial3D) SetParticlesAnimHFrames(frames int64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[84], &frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimHFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodBaseMaterial3D[85]) }
func (gdClass BaseMaterial3D) SetParticlesAnimVFrames(frames int64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[86], &frames) }
func (gdClass BaseMaterial3D) GetParticlesAnimVFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodBaseMaterial3D[87]) }
func (gdClass BaseMaterial3D) SetParticlesAnimLoop(loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[88], &loop) }
func (gdClass BaseMaterial3D) GetParticlesAnimLoop() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[89]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallax(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[90], &enable) }
func (gdClass BaseMaterial3D) IsHeightmapDeepParallaxEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[91]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMinLayers(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[92], &layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMinLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodBaseMaterial3D[93]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxMaxLayers(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[94], &layer) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxMaxLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodBaseMaterial3D[95]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipTangent(flip bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[96], &flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipTangent() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[97]) }
func (gdClass BaseMaterial3D) SetHeightmapDeepParallaxFlipBinormal(flip bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[98], &flip) }
func (gdClass BaseMaterial3D) GetHeightmapDeepParallaxFlipBinormal() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[99]) }
func (gdClass BaseMaterial3D) SetGrow(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[100], &amount) }
func (gdClass BaseMaterial3D) GetGrow() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[101]) }
func (gdClass BaseMaterial3D) SetEmissionOperator(operator BaseMaterial3DEmissionOperator)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[102], &operator) }
func (gdClass BaseMaterial3D) GetEmissionOperator() BaseMaterial3DEmissionOperator { return methodCall[BaseMaterial3DEmissionOperator](gdClass.obj.get(), methodBaseMaterial3D[103]) }
func (gdClass BaseMaterial3D) SetAoLightAffect(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[104], &amount) }
func (gdClass BaseMaterial3D) GetAoLightAffect() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[105]) }
func (gdClass BaseMaterial3D) SetAlphaScissorThreshold(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[106], &threshold) }
func (gdClass BaseMaterial3D) GetAlphaScissorThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[107]) }
func (gdClass BaseMaterial3D) SetAlphaHashScale(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[108], &threshold) }
func (gdClass BaseMaterial3D) GetAlphaHashScale() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[109]) }
func (gdClass BaseMaterial3D) SetGrowEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[110], &enable) }
func (gdClass BaseMaterial3D) IsGrowEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[111]) }
func (gdClass BaseMaterial3D) SetMetallicTextureChannel(channel BaseMaterial3DTextureChannel)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[112], &channel) }
func (gdClass BaseMaterial3D) GetMetallicTextureChannel() BaseMaterial3DTextureChannel { return methodCall[BaseMaterial3DTextureChannel](gdClass.obj.get(), methodBaseMaterial3D[113]) }
func (gdClass BaseMaterial3D) SetRoughnessTextureChannel(channel BaseMaterial3DTextureChannel)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[114], &channel) }
func (gdClass BaseMaterial3D) GetRoughnessTextureChannel() BaseMaterial3DTextureChannel { return methodCall[BaseMaterial3DTextureChannel](gdClass.obj.get(), methodBaseMaterial3D[115]) }
func (gdClass BaseMaterial3D) SetAoTextureChannel(channel BaseMaterial3DTextureChannel)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[116], &channel) }
func (gdClass BaseMaterial3D) GetAoTextureChannel() BaseMaterial3DTextureChannel { return methodCall[BaseMaterial3DTextureChannel](gdClass.obj.get(), methodBaseMaterial3D[117]) }
func (gdClass BaseMaterial3D) SetRefractionTextureChannel(channel BaseMaterial3DTextureChannel)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[118], &channel) }
func (gdClass BaseMaterial3D) GetRefractionTextureChannel() BaseMaterial3DTextureChannel { return methodCall[BaseMaterial3DTextureChannel](gdClass.obj.get(), methodBaseMaterial3D[119]) }
func (gdClass BaseMaterial3D) SetProximityFade(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[120], &enabled) }
func (gdClass BaseMaterial3D) IsProximityFadeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodBaseMaterial3D[121]) }
func (gdClass BaseMaterial3D) SetProximityFadeDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[122], &distance) }
func (gdClass BaseMaterial3D) GetProximityFadeDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[123]) }
func (gdClass BaseMaterial3D) SetMsdfPixelRange(arange float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[124], &arange) }
func (gdClass BaseMaterial3D) GetMsdfPixelRange() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[125]) }
func (gdClass BaseMaterial3D) SetMsdfOutlineSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[126], &size) }
func (gdClass BaseMaterial3D) GetMsdfOutlineSize() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[127]) }
func (gdClass BaseMaterial3D) SetDistanceFade(mode BaseMaterial3DDistanceFadeMode)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[128], &mode) }
func (gdClass BaseMaterial3D) GetDistanceFade() BaseMaterial3DDistanceFadeMode { return methodCall[BaseMaterial3DDistanceFadeMode](gdClass.obj.get(), methodBaseMaterial3D[129]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMaxDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[130], &distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[131]) }
func (gdClass BaseMaterial3D) SetDistanceFadeMinDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodBaseMaterial3D[132], &distance) }
func (gdClass BaseMaterial3D) GetDistanceFadeMinDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodBaseMaterial3D[133]) }

type BitMap struct{self *BitMap; obj safeObject }
func NewBitMap(ctx Context, at *BitMap) BitMap { if at == nil { at = new(BitMap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BitMap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BitMap) owner() cObject { return gdClass.obj.get() }
func (BitMap) class() string { return "BitMap\000" }

func (gdClass BitMap) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodBitMap [11]cMethodBind
func (gdClass BitMap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass BitMap) Create(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[0], &size) }
func (gdClass BitMap) CreateFromImageAlpha(image Image, threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[1], &image, &threshold) }
func (gdClass BitMap) SetBit(position Vector2, bit bool)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[2], &position, &bit) }
func (gdClass BitMap) GetBit(position Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodBitMap[3], &position) }
func (gdClass BitMap) SetBitRect(rect Rect2, bit bool)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[4], &rect, &bit) }
func (gdClass BitMap) GetTrueBitCount() int64 { return methodCall[int64](gdClass.obj.get(), methodBitMap[5]) }
func (gdClass BitMap) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodBitMap[6]) }
func (gdClass BitMap) Resize(new_size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[7], &new_size) }
func (gdClass BitMap) GrowMask(pixels int64, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodBitMap[8], &pixels, &rect) }
func (gdClass BitMap) ConvertToImage() Image { return methodCall[Image](gdClass.obj.get(), methodBitMap[9]) }
func (gdClass BitMap) OpaqueToPolygons(rect Rect2, epsilon float64) Array { return methodCall[Array](gdClass.obj.get(), methodBitMap[10], &rect, &epsilon) }

type Bone2D struct{self *Bone2D; obj safeObject }
func NewBone2D(ctx Context, at *Bone2D) Bone2D { if at == nil { at = new(Bone2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Bone2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Bone2D) owner() cObject { return gdClass.obj.get() }
func (Bone2D) class() string { return "Bone2D\000" }

func (gdClass Bone2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodBone2D [13]cMethodBind
func (gdClass Bone2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Bone2D) SetRest(rest Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[0], &rest) }
func (gdClass Bone2D) GetRest() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodBone2D[1]) }
func (gdClass Bone2D) ApplyRest()  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[2]) }
func (gdClass Bone2D) GetSkeletonRest() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodBone2D[3]) }
func (gdClass Bone2D) GetIndexInSkeleton() int64 { return methodCall[int64](gdClass.obj.get(), methodBone2D[4]) }
func (gdClass Bone2D) SetDefaultLength(default_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[5], &default_length) }
func (gdClass Bone2D) GetDefaultLength() float64 { return methodCall[float64](gdClass.obj.get(), methodBone2D[6]) }
func (gdClass Bone2D) SetAutocalculateLengthAndAngle(auto_calculate bool)  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[7], &auto_calculate) }
func (gdClass Bone2D) GetAutocalculateLengthAndAngle() bool { return methodCall[bool](gdClass.obj.get(), methodBone2D[8]) }
func (gdClass Bone2D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[9], &length) }
func (gdClass Bone2D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodBone2D[10]) }
func (gdClass Bone2D) SetBoneAngle(angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodBone2D[11], &angle) }
func (gdClass Bone2D) GetBoneAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodBone2D[12]) }

type BoneAttachment3D struct{self *BoneAttachment3D; obj safeObject }
func NewBoneAttachment3D(ctx Context, at *BoneAttachment3D) BoneAttachment3D { if at == nil { at = new(BoneAttachment3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass BoneAttachment3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoneAttachment3D) owner() cObject { return gdClass.obj.get() }
func (BoneAttachment3D) class() string { return "BoneAttachment3D\000" }

func (gdClass BoneAttachment3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodBoneAttachment3D [13]cMethodBind
func (gdClass BoneAttachment3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass BoneAttachment3D) SetBoneName(bone_name string)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[0], &bone_name) }
func (gdClass BoneAttachment3D) GetBoneName() string { return methodCall[string](gdClass.obj.get(), methodBoneAttachment3D[1]) }
func (gdClass BoneAttachment3D) SetBoneIdx(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[2], &bone_idx) }
func (gdClass BoneAttachment3D) GetBoneIdx() int64 { return methodCall[int64](gdClass.obj.get(), methodBoneAttachment3D[3]) }
func (gdClass BoneAttachment3D) OnBonePoseUpdate(bone_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[4], &bone_index) }
func (gdClass BoneAttachment3D) SetOverridePose(override_pose bool)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[5], &override_pose) }
func (gdClass BoneAttachment3D) GetOverridePose() bool { return methodCall[bool](gdClass.obj.get(), methodBoneAttachment3D[6]) }
func (gdClass BoneAttachment3D) SetOverrideMode(override_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[7], &override_mode) }
func (gdClass BoneAttachment3D) GetOverrideMode() int64 { return methodCall[int64](gdClass.obj.get(), methodBoneAttachment3D[8]) }
func (gdClass BoneAttachment3D) SetUseExternalSkeleton(use_external_skeleton bool)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[9], &use_external_skeleton) }
func (gdClass BoneAttachment3D) GetUseExternalSkeleton() bool { return methodCall[bool](gdClass.obj.get(), methodBoneAttachment3D[10]) }
func (gdClass BoneAttachment3D) SetExternalSkeleton(external_skeleton NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodBoneAttachment3D[11], &external_skeleton) }
func (gdClass BoneAttachment3D) GetExternalSkeleton() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodBoneAttachment3D[12]) }

type BoneMap struct{self *BoneMap; obj safeObject }
func NewBoneMap(ctx Context, at *BoneMap) BoneMap { if at == nil { at = new(BoneMap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BoneMap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoneMap) owner() cObject { return gdClass.obj.get() }
func (BoneMap) class() string { return "BoneMap\000" }

func (gdClass BoneMap) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodBoneMap [5]cMethodBind
func (gdClass BoneMap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass BoneMap) GetProfile() SkeletonProfile { return methodCall[SkeletonProfile](gdClass.obj.get(), methodBoneMap[0]) }
func (gdClass BoneMap) SetProfile(profile SkeletonProfile)  { methodCall[struct{}](gdClass.obj.get(), methodBoneMap[1], &profile) }
func (gdClass BoneMap) GetSkeletonBoneName(profile_bone_name Name) Name { return methodCall[Name](gdClass.obj.get(), methodBoneMap[2], &profile_bone_name) }
func (gdClass BoneMap) SetSkeletonBoneName(profile_bone_name Name, skeleton_bone_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodBoneMap[3], &profile_bone_name, &skeleton_bone_name) }
func (gdClass BoneMap) FindProfileBoneName(skeleton_bone_name Name) Name { return methodCall[Name](gdClass.obj.get(), methodBoneMap[4], &skeleton_bone_name) }

type BoxContainerAlignmentMode int64

const (
	BoxContainerAlignmentBegin BoxContainerAlignmentMode = 0
	BoxContainerAlignmentCenter BoxContainerAlignmentMode = 1
	BoxContainerAlignmentEnd BoxContainerAlignmentMode = 2
)

type BoxContainer struct{self *BoxContainer; obj safeObject }
func NewBoxContainer(ctx Context, at *BoxContainer) BoxContainer { if at == nil { at = new(BoxContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass BoxContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoxContainer) owner() cObject { return gdClass.obj.get() }
func (BoxContainer) class() string { return "BoxContainer\000" }

func (gdClass BoxContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodBoxContainer [3]cMethodBind
func (gdClass BoxContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass BoxContainer) AddSpacer(begin bool) Control { return methodCall[Control](gdClass.obj.get(), methodBoxContainer[0], &begin) }
func (gdClass BoxContainer) GetAlignment() BoxContainerAlignmentMode { return methodCall[BoxContainerAlignmentMode](gdClass.obj.get(), methodBoxContainer[1]) }
func (gdClass BoxContainer) SetAlignment(alignment BoxContainerAlignmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodBoxContainer[2], &alignment) }

type BoxMesh struct{self *BoxMesh; obj safeObject }
func NewBoxMesh(ctx Context, at *BoxMesh) BoxMesh { if at == nil { at = new(BoxMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BoxMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoxMesh) owner() cObject { return gdClass.obj.get() }
func (BoxMesh) class() string { return "BoxMesh\000" }

func (gdClass BoxMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodBoxMesh [8]cMethodBind
func (gdClass BoxMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass BoxMesh) SetSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBoxMesh[0], &size) }
func (gdClass BoxMesh) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBoxMesh[1]) }
func (gdClass BoxMesh) SetSubdivideWidth(subdivide int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoxMesh[2], &subdivide) }
func (gdClass BoxMesh) GetSubdivideWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodBoxMesh[3]) }
func (gdClass BoxMesh) SetSubdivideHeight(divisions int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoxMesh[4], &divisions) }
func (gdClass BoxMesh) GetSubdivideHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodBoxMesh[5]) }
func (gdClass BoxMesh) SetSubdivideDepth(divisions int64)  { methodCall[struct{}](gdClass.obj.get(), methodBoxMesh[6], &divisions) }
func (gdClass BoxMesh) GetSubdivideDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodBoxMesh[7]) }

type BoxOccluder3D struct{self *BoxOccluder3D; obj safeObject }
func NewBoxOccluder3D(ctx Context, at *BoxOccluder3D) BoxOccluder3D { if at == nil { at = new(BoxOccluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BoxOccluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoxOccluder3D) owner() cObject { return gdClass.obj.get() }
func (BoxOccluder3D) class() string { return "BoxOccluder3D\000" }

func (gdClass BoxOccluder3D) Occluder3D() Occluder3D { return Occluder3D{obj:gdClass.obj} }

var methodBoxOccluder3D [2]cMethodBind
func (gdClass BoxOccluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Occluder3D().virtual(rtype, name)
}
func (gdClass BoxOccluder3D) SetSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBoxOccluder3D[0], &size) }
func (gdClass BoxOccluder3D) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBoxOccluder3D[1]) }

type BoxShape3D struct{self *BoxShape3D; obj safeObject }
func NewBoxShape3D(ctx Context, at *BoxShape3D) BoxShape3D { if at == nil { at = new(BoxShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass BoxShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass BoxShape3D) owner() cObject { return gdClass.obj.get() }
func (BoxShape3D) class() string { return "BoxShape3D\000" }

func (gdClass BoxShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodBoxShape3D [2]cMethodBind
func (gdClass BoxShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass BoxShape3D) SetSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodBoxShape3D[0], &size) }
func (gdClass BoxShape3D) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodBoxShape3D[1]) }

type Button struct{self *Button; obj safeObject }
func NewButton(ctx Context, at *Button) Button { if at == nil { at = new(Button) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Button) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Button) owner() cObject { return gdClass.obj.get() }
func (Button) class() string { return "Button\000" }

func (gdClass Button) BaseButton() BaseButton { return BaseButton{obj:gdClass.obj} }

var methodButton [20]cMethodBind
func (gdClass Button) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BaseButton().virtual(rtype, name)
}
func (gdClass Button) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodButton[0], &text) }
func (gdClass Button) GetText() string { return methodCall[string](gdClass.obj.get(), methodButton[1]) }
func (gdClass Button) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodButton[2], &overrun_behavior) }
func (gdClass Button) GetTextOverrunBehavior() TextServerOverrunBehavior { return methodCall[TextServerOverrunBehavior](gdClass.obj.get(), methodButton[3]) }
func (gdClass Button) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodButton[4], &direction) }
func (gdClass Button) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodButton[5]) }
func (gdClass Button) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodButton[6], &language) }
func (gdClass Button) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodButton[7]) }
func (gdClass Button) SetButtonIcon(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodButton[8], &texture) }
func (gdClass Button) GetButtonIcon() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodButton[9]) }
func (gdClass Button) SetFlat(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodButton[10], &enabled) }
func (gdClass Button) IsFlat() bool { return methodCall[bool](gdClass.obj.get(), methodButton[11]) }
func (gdClass Button) SetClipText(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodButton[12], &enabled) }
func (gdClass Button) GetClipText() bool { return methodCall[bool](gdClass.obj.get(), methodButton[13]) }
func (gdClass Button) SetTextAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodButton[14], &alignment) }
func (gdClass Button) GetTextAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodButton[15]) }
func (gdClass Button) SetIconAlignment(icon_alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodButton[16], &icon_alignment) }
func (gdClass Button) GetIconAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodButton[17]) }
func (gdClass Button) SetExpandIcon(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodButton[18], &enabled) }
func (gdClass Button) IsExpandIcon() bool { return methodCall[bool](gdClass.obj.get(), methodButton[19]) }

type ButtonGroup struct{self *ButtonGroup; obj safeObject }
func NewButtonGroup(ctx Context, at *ButtonGroup) ButtonGroup { if at == nil { at = new(ButtonGroup) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ButtonGroup) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ButtonGroup) owner() cObject { return gdClass.obj.get() }
func (ButtonGroup) class() string { return "ButtonGroup\000" }

func (gdClass ButtonGroup) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodButtonGroup [2]cMethodBind
func (gdClass ButtonGroup) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass ButtonGroup) GetPressedButton() BaseButton { return methodCall[BaseButton](gdClass.obj.get(), methodButtonGroup[0]) }
func (gdClass ButtonGroup) GetButtons() Array { return methodCall[Array](gdClass.obj.get(), methodButtonGroup[1]) }

type CPUParticles2DDrawOrder int64

const (
	CPUParticles2DDrawOrderIndex CPUParticles2DDrawOrder = 0
	CPUParticles2DDrawOrderLifetime CPUParticles2DDrawOrder = 1
)

type CPUParticles2DParameter int64

const (
	CPUParticles2DParamInitialLinearVelocity CPUParticles2DParameter = 0
	CPUParticles2DParamAngularVelocity CPUParticles2DParameter = 1
	CPUParticles2DParamOrbitVelocity CPUParticles2DParameter = 2
	CPUParticles2DParamLinearAccel CPUParticles2DParameter = 3
	CPUParticles2DParamRadialAccel CPUParticles2DParameter = 4
	CPUParticles2DParamTangentialAccel CPUParticles2DParameter = 5
	CPUParticles2DParamDamping CPUParticles2DParameter = 6
	CPUParticles2DParamAngle CPUParticles2DParameter = 7
	CPUParticles2DParamScale CPUParticles2DParameter = 8
	CPUParticles2DParamHueVariation CPUParticles2DParameter = 9
	CPUParticles2DParamAnimSpeed CPUParticles2DParameter = 10
	CPUParticles2DParamAnimOffset CPUParticles2DParameter = 11
	CPUParticles2DParamMax CPUParticles2DParameter = 12
)

type CPUParticles2DParticleFlags int64

const (
	CPUParticles2DParticleFlagAlignYToVelocity CPUParticles2DParticleFlags = 0
	CPUParticles2DParticleFlagRotateY CPUParticles2DParticleFlags = 1
	CPUParticles2DParticleFlagDisableZ CPUParticles2DParticleFlags = 2
	CPUParticles2DParticleFlagMax CPUParticles2DParticleFlags = 3
)

type CPUParticles2DEmissionShape int64

const (
	CPUParticles2DEmissionShapePoint CPUParticles2DEmissionShape = 0
	CPUParticles2DEmissionShapeSphere CPUParticles2DEmissionShape = 1
	CPUParticles2DEmissionShapeSphereSurface CPUParticles2DEmissionShape = 2
	CPUParticles2DEmissionShapeRectangle CPUParticles2DEmissionShape = 3
	CPUParticles2DEmissionShapePoints CPUParticles2DEmissionShape = 4
	CPUParticles2DEmissionShapeDirectedPoints CPUParticles2DEmissionShape = 5
	CPUParticles2DEmissionShapeMax CPUParticles2DEmissionShape = 6
)

type CPUParticles2D struct{self *CPUParticles2D; obj safeObject }
func NewCPUParticles2D(ctx Context, at *CPUParticles2D) CPUParticles2D { if at == nil { at = new(CPUParticles2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CPUParticles2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CPUParticles2D) owner() cObject { return gdClass.obj.get() }
func (CPUParticles2D) class() string { return "CPUParticles2D\000" }

func (gdClass CPUParticles2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCPUParticles2D [68]cMethodBind
func (gdClass CPUParticles2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CPUParticles2D) SetEmitting(emitting bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[0], &emitting) }
func (gdClass CPUParticles2D) SetAmount(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[1], &amount) }
func (gdClass CPUParticles2D) SetLifetime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[2], &secs) }
func (gdClass CPUParticles2D) SetOneShot(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[3], &enable) }
func (gdClass CPUParticles2D) SetPreProcessTime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[4], &secs) }
func (gdClass CPUParticles2D) SetExplosivenessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[5], &ratio) }
func (gdClass CPUParticles2D) SetRandomnessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[6], &ratio) }
func (gdClass CPUParticles2D) SetLifetimeRandomness(random float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[7], &random) }
func (gdClass CPUParticles2D) SetUseLocalCoordinates(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[8], &enable) }
func (gdClass CPUParticles2D) SetFixedFps(fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[9], &fps) }
func (gdClass CPUParticles2D) SetFractionalDelta(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[10], &enable) }
func (gdClass CPUParticles2D) SetSpeedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[11], &scale) }
func (gdClass CPUParticles2D) IsEmitting() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[12]) }
func (gdClass CPUParticles2D) GetAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodCPUParticles2D[13]) }
func (gdClass CPUParticles2D) GetLifetime() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[14]) }
func (gdClass CPUParticles2D) GetOneShot() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[15]) }
func (gdClass CPUParticles2D) GetPreProcessTime() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[16]) }
func (gdClass CPUParticles2D) GetExplosivenessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[17]) }
func (gdClass CPUParticles2D) GetRandomnessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[18]) }
func (gdClass CPUParticles2D) GetLifetimeRandomness() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[19]) }
func (gdClass CPUParticles2D) GetUseLocalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[20]) }
func (gdClass CPUParticles2D) GetFixedFps() int64 { return methodCall[int64](gdClass.obj.get(), methodCPUParticles2D[21]) }
func (gdClass CPUParticles2D) GetFractionalDelta() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[22]) }
func (gdClass CPUParticles2D) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[23]) }
func (gdClass CPUParticles2D) SetDrawOrder(order CPUParticles2DDrawOrder)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[24], &order) }
func (gdClass CPUParticles2D) GetDrawOrder() CPUParticles2DDrawOrder { return methodCall[CPUParticles2DDrawOrder](gdClass.obj.get(), methodCPUParticles2D[25]) }
func (gdClass CPUParticles2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[26], &texture) }
func (gdClass CPUParticles2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodCPUParticles2D[27]) }
func (gdClass CPUParticles2D) Restart()  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[28]) }
func (gdClass CPUParticles2D) SetDirection(direction Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[29], &direction) }
func (gdClass CPUParticles2D) GetDirection() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCPUParticles2D[30]) }
func (gdClass CPUParticles2D) SetSpread(spread float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[31], &spread) }
func (gdClass CPUParticles2D) GetSpread() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[32]) }
func (gdClass CPUParticles2D) SetParamMin(param CPUParticles2DParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[33], &param, &value) }
func (gdClass CPUParticles2D) GetParamMin(param CPUParticles2DParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[34], &param) }
func (gdClass CPUParticles2D) SetParamMax(param CPUParticles2DParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[35], &param, &value) }
func (gdClass CPUParticles2D) GetParamMax(param CPUParticles2DParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[36], &param) }
func (gdClass CPUParticles2D) SetParamCurve(param CPUParticles2DParameter, curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[37], &param, &curve) }
func (gdClass CPUParticles2D) GetParamCurve(param CPUParticles2DParameter) Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles2D[38], &param) }
func (gdClass CPUParticles2D) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[39], &color) }
func (gdClass CPUParticles2D) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodCPUParticles2D[40]) }
func (gdClass CPUParticles2D) SetColorRamp(ramp Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[41], &ramp) }
func (gdClass CPUParticles2D) GetColorRamp() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodCPUParticles2D[42]) }
func (gdClass CPUParticles2D) SetColorInitialRamp(ramp Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[43], &ramp) }
func (gdClass CPUParticles2D) GetColorInitialRamp() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodCPUParticles2D[44]) }
func (gdClass CPUParticles2D) SetParticleFlag(particle_flag CPUParticles2DParticleFlags, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[45], &particle_flag, &enable) }
func (gdClass CPUParticles2D) GetParticleFlag(particle_flag CPUParticles2DParticleFlags) bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[46], &particle_flag) }
func (gdClass CPUParticles2D) SetEmissionShape(shape CPUParticles2DEmissionShape)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[47], &shape) }
func (gdClass CPUParticles2D) GetEmissionShape() CPUParticles2DEmissionShape { return methodCall[CPUParticles2DEmissionShape](gdClass.obj.get(), methodCPUParticles2D[48]) }
func (gdClass CPUParticles2D) SetEmissionSphereRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[49], &radius) }
func (gdClass CPUParticles2D) GetEmissionSphereRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles2D[50]) }
func (gdClass CPUParticles2D) SetEmissionRectExtents(extents Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[51], &extents) }
func (gdClass CPUParticles2D) GetEmissionRectExtents() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCPUParticles2D[52]) }
func (gdClass CPUParticles2D) SetEmissionPoints(array []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[53], &array) }
func (gdClass CPUParticles2D) GetEmissionPoints() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCPUParticles2D[54]) }
func (gdClass CPUParticles2D) SetEmissionNormals(array []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[55], &array) }
func (gdClass CPUParticles2D) GetEmissionNormals() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCPUParticles2D[56]) }
func (gdClass CPUParticles2D) SetEmissionColors(array []Color)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[57], &array) }
func (gdClass CPUParticles2D) GetEmissionColors() []Color { return methodCall[[]Color](gdClass.obj.get(), methodCPUParticles2D[58]) }
func (gdClass CPUParticles2D) GetGravity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCPUParticles2D[59]) }
func (gdClass CPUParticles2D) SetGravity(accel_vec Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[60], &accel_vec) }
func (gdClass CPUParticles2D) GetSplitScale() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles2D[61]) }
func (gdClass CPUParticles2D) SetSplitScale(split_scale bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[62], &split_scale) }
func (gdClass CPUParticles2D) GetScaleCurveX() Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles2D[63]) }
func (gdClass CPUParticles2D) SetScaleCurveX(scale_curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[64], &scale_curve) }
func (gdClass CPUParticles2D) GetScaleCurveY() Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles2D[65]) }
func (gdClass CPUParticles2D) SetScaleCurveY(scale_curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[66], &scale_curve) }
func (gdClass CPUParticles2D) ConvertFromParticles(particles Node)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles2D[67], &particles) }

type CPUParticles3DDrawOrder int64

const (
	CPUParticles3DDrawOrderIndex CPUParticles3DDrawOrder = 0
	CPUParticles3DDrawOrderLifetime CPUParticles3DDrawOrder = 1
	CPUParticles3DDrawOrderViewDepth CPUParticles3DDrawOrder = 2
)

type CPUParticles3DParameter int64

const (
	CPUParticles3DParamInitialLinearVelocity CPUParticles3DParameter = 0
	CPUParticles3DParamAngularVelocity CPUParticles3DParameter = 1
	CPUParticles3DParamOrbitVelocity CPUParticles3DParameter = 2
	CPUParticles3DParamLinearAccel CPUParticles3DParameter = 3
	CPUParticles3DParamRadialAccel CPUParticles3DParameter = 4
	CPUParticles3DParamTangentialAccel CPUParticles3DParameter = 5
	CPUParticles3DParamDamping CPUParticles3DParameter = 6
	CPUParticles3DParamAngle CPUParticles3DParameter = 7
	CPUParticles3DParamScale CPUParticles3DParameter = 8
	CPUParticles3DParamHueVariation CPUParticles3DParameter = 9
	CPUParticles3DParamAnimSpeed CPUParticles3DParameter = 10
	CPUParticles3DParamAnimOffset CPUParticles3DParameter = 11
	CPUParticles3DParamMax CPUParticles3DParameter = 12
)

type CPUParticles3DParticleFlags int64

const (
	CPUParticles3DParticleFlagAlignYToVelocity CPUParticles3DParticleFlags = 0
	CPUParticles3DParticleFlagRotateY CPUParticles3DParticleFlags = 1
	CPUParticles3DParticleFlagDisableZ CPUParticles3DParticleFlags = 2
	CPUParticles3DParticleFlagMax CPUParticles3DParticleFlags = 3
)

type CPUParticles3DEmissionShape int64

const (
	CPUParticles3DEmissionShapePoint CPUParticles3DEmissionShape = 0
	CPUParticles3DEmissionShapeSphere CPUParticles3DEmissionShape = 1
	CPUParticles3DEmissionShapeSphereSurface CPUParticles3DEmissionShape = 2
	CPUParticles3DEmissionShapeBox CPUParticles3DEmissionShape = 3
	CPUParticles3DEmissionShapePoints CPUParticles3DEmissionShape = 4
	CPUParticles3DEmissionShapeDirectedPoints CPUParticles3DEmissionShape = 5
	CPUParticles3DEmissionShapeRing CPUParticles3DEmissionShape = 6
	CPUParticles3DEmissionShapeMax CPUParticles3DEmissionShape = 7
)

type CPUParticles3D struct{self *CPUParticles3D; obj safeObject }
func NewCPUParticles3D(ctx Context, at *CPUParticles3D) CPUParticles3D { if at == nil { at = new(CPUParticles3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CPUParticles3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CPUParticles3D) owner() cObject { return gdClass.obj.get() }
func (CPUParticles3D) class() string { return "CPUParticles3D\000" }

func (gdClass CPUParticles3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodCPUParticles3D [80]cMethodBind
func (gdClass CPUParticles3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass CPUParticles3D) SetEmitting(emitting bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[0], &emitting) }
func (gdClass CPUParticles3D) SetAmount(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[1], &amount) }
func (gdClass CPUParticles3D) SetLifetime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[2], &secs) }
func (gdClass CPUParticles3D) SetOneShot(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[3], &enable) }
func (gdClass CPUParticles3D) SetPreProcessTime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[4], &secs) }
func (gdClass CPUParticles3D) SetExplosivenessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[5], &ratio) }
func (gdClass CPUParticles3D) SetRandomnessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[6], &ratio) }
func (gdClass CPUParticles3D) SetLifetimeRandomness(random float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[7], &random) }
func (gdClass CPUParticles3D) SetUseLocalCoordinates(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[8], &enable) }
func (gdClass CPUParticles3D) SetFixedFps(fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[9], &fps) }
func (gdClass CPUParticles3D) SetFractionalDelta(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[10], &enable) }
func (gdClass CPUParticles3D) SetSpeedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[11], &scale) }
func (gdClass CPUParticles3D) IsEmitting() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[12]) }
func (gdClass CPUParticles3D) GetAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodCPUParticles3D[13]) }
func (gdClass CPUParticles3D) GetLifetime() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[14]) }
func (gdClass CPUParticles3D) GetOneShot() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[15]) }
func (gdClass CPUParticles3D) GetPreProcessTime() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[16]) }
func (gdClass CPUParticles3D) GetExplosivenessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[17]) }
func (gdClass CPUParticles3D) GetRandomnessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[18]) }
func (gdClass CPUParticles3D) GetLifetimeRandomness() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[19]) }
func (gdClass CPUParticles3D) GetUseLocalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[20]) }
func (gdClass CPUParticles3D) GetFixedFps() int64 { return methodCall[int64](gdClass.obj.get(), methodCPUParticles3D[21]) }
func (gdClass CPUParticles3D) GetFractionalDelta() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[22]) }
func (gdClass CPUParticles3D) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[23]) }
func (gdClass CPUParticles3D) SetDrawOrder(order CPUParticles3DDrawOrder)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[24], &order) }
func (gdClass CPUParticles3D) GetDrawOrder() CPUParticles3DDrawOrder { return methodCall[CPUParticles3DDrawOrder](gdClass.obj.get(), methodCPUParticles3D[25]) }
func (gdClass CPUParticles3D) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[26], &mesh) }
func (gdClass CPUParticles3D) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodCPUParticles3D[27]) }
func (gdClass CPUParticles3D) Restart()  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[28]) }
func (gdClass CPUParticles3D) SetDirection(direction Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[29], &direction) }
func (gdClass CPUParticles3D) GetDirection() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCPUParticles3D[30]) }
func (gdClass CPUParticles3D) SetSpread(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[31], &degrees) }
func (gdClass CPUParticles3D) GetSpread() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[32]) }
func (gdClass CPUParticles3D) SetFlatness(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[33], &amount) }
func (gdClass CPUParticles3D) GetFlatness() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[34]) }
func (gdClass CPUParticles3D) SetParamMin(param CPUParticles3DParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[35], &param, &value) }
func (gdClass CPUParticles3D) GetParamMin(param CPUParticles3DParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[36], &param) }
func (gdClass CPUParticles3D) SetParamMax(param CPUParticles3DParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[37], &param, &value) }
func (gdClass CPUParticles3D) GetParamMax(param CPUParticles3DParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[38], &param) }
func (gdClass CPUParticles3D) SetParamCurve(param CPUParticles3DParameter, curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[39], &param, &curve) }
func (gdClass CPUParticles3D) GetParamCurve(param CPUParticles3DParameter) Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles3D[40], &param) }
func (gdClass CPUParticles3D) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[41], &color) }
func (gdClass CPUParticles3D) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodCPUParticles3D[42]) }
func (gdClass CPUParticles3D) SetColorRamp(ramp Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[43], &ramp) }
func (gdClass CPUParticles3D) GetColorRamp() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodCPUParticles3D[44]) }
func (gdClass CPUParticles3D) SetColorInitialRamp(ramp Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[45], &ramp) }
func (gdClass CPUParticles3D) GetColorInitialRamp() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodCPUParticles3D[46]) }
func (gdClass CPUParticles3D) SetParticleFlag(particle_flag CPUParticles3DParticleFlags, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[47], &particle_flag, &enable) }
func (gdClass CPUParticles3D) GetParticleFlag(particle_flag CPUParticles3DParticleFlags) bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[48], &particle_flag) }
func (gdClass CPUParticles3D) SetEmissionShape(shape CPUParticles3DEmissionShape)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[49], &shape) }
func (gdClass CPUParticles3D) GetEmissionShape() CPUParticles3DEmissionShape { return methodCall[CPUParticles3DEmissionShape](gdClass.obj.get(), methodCPUParticles3D[50]) }
func (gdClass CPUParticles3D) SetEmissionSphereRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[51], &radius) }
func (gdClass CPUParticles3D) GetEmissionSphereRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[52]) }
func (gdClass CPUParticles3D) SetEmissionBoxExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[53], &extents) }
func (gdClass CPUParticles3D) GetEmissionBoxExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCPUParticles3D[54]) }
func (gdClass CPUParticles3D) SetEmissionPoints(array []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[55], &array) }
func (gdClass CPUParticles3D) GetEmissionPoints() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodCPUParticles3D[56]) }
func (gdClass CPUParticles3D) SetEmissionNormals(array []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[57], &array) }
func (gdClass CPUParticles3D) GetEmissionNormals() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodCPUParticles3D[58]) }
func (gdClass CPUParticles3D) SetEmissionColors(array []Color)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[59], &array) }
func (gdClass CPUParticles3D) GetEmissionColors() []Color { return methodCall[[]Color](gdClass.obj.get(), methodCPUParticles3D[60]) }
func (gdClass CPUParticles3D) SetEmissionRingAxis(axis Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[61], &axis) }
func (gdClass CPUParticles3D) GetEmissionRingAxis() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCPUParticles3D[62]) }
func (gdClass CPUParticles3D) SetEmissionRingHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[63], &height) }
func (gdClass CPUParticles3D) GetEmissionRingHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[64]) }
func (gdClass CPUParticles3D) SetEmissionRingRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[65], &radius) }
func (gdClass CPUParticles3D) GetEmissionRingRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[66]) }
func (gdClass CPUParticles3D) SetEmissionRingInnerRadius(inner_radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[67], &inner_radius) }
func (gdClass CPUParticles3D) GetEmissionRingInnerRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCPUParticles3D[68]) }
func (gdClass CPUParticles3D) GetGravity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCPUParticles3D[69]) }
func (gdClass CPUParticles3D) SetGravity(accel_vec Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[70], &accel_vec) }
func (gdClass CPUParticles3D) GetSplitScale() bool { return methodCall[bool](gdClass.obj.get(), methodCPUParticles3D[71]) }
func (gdClass CPUParticles3D) SetSplitScale(split_scale bool)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[72], &split_scale) }
func (gdClass CPUParticles3D) GetScaleCurveX() Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles3D[73]) }
func (gdClass CPUParticles3D) SetScaleCurveX(scale_curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[74], &scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveY() Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles3D[75]) }
func (gdClass CPUParticles3D) SetScaleCurveY(scale_curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[76], &scale_curve) }
func (gdClass CPUParticles3D) GetScaleCurveZ() Curve { return methodCall[Curve](gdClass.obj.get(), methodCPUParticles3D[77]) }
func (gdClass CPUParticles3D) SetScaleCurveZ(scale_curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[78], &scale_curve) }
func (gdClass CPUParticles3D) ConvertFromParticles(particles Node)  { methodCall[struct{}](gdClass.obj.get(), methodCPUParticles3D[79], &particles) }

type CSGBox3D struct{self *CSGBox3D; obj safeObject }
func NewCSGBox3D(ctx Context, at *CSGBox3D) CSGBox3D { if at == nil { at = new(CSGBox3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGBox3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGBox3D) owner() cObject { return gdClass.obj.get() }
func (CSGBox3D) class() string { return "CSGBox3D\000" }

func (gdClass CSGBox3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGBox3D [4]cMethodBind
func (gdClass CSGBox3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGBox3D) SetSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCSGBox3D[0], &size) }
func (gdClass CSGBox3D) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCSGBox3D[1]) }
func (gdClass CSGBox3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGBox3D[2], &material) }
func (gdClass CSGBox3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGBox3D[3]) }

type CSGCombiner3D struct{self *CSGCombiner3D; obj safeObject }
func NewCSGCombiner3D(ctx Context, at *CSGCombiner3D) CSGCombiner3D { if at == nil { at = new(CSGCombiner3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGCombiner3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGCombiner3D) owner() cObject { return gdClass.obj.get() }
func (CSGCombiner3D) class() string { return "CSGCombiner3D\000" }

func (gdClass CSGCombiner3D) CSGShape3D() CSGShape3D { return CSGShape3D{obj:gdClass.obj} }

func (gdClass CSGCombiner3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGShape3D().virtual(rtype, name)
}

type CSGCylinder3D struct{self *CSGCylinder3D; obj safeObject }
func NewCSGCylinder3D(ctx Context, at *CSGCylinder3D) CSGCylinder3D { if at == nil { at = new(CSGCylinder3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGCylinder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGCylinder3D) owner() cObject { return gdClass.obj.get() }
func (CSGCylinder3D) class() string { return "CSGCylinder3D\000" }

func (gdClass CSGCylinder3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGCylinder3D [12]cMethodBind
func (gdClass CSGCylinder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGCylinder3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[0], &radius) }
func (gdClass CSGCylinder3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGCylinder3D[1]) }
func (gdClass CSGCylinder3D) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[2], &height) }
func (gdClass CSGCylinder3D) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGCylinder3D[3]) }
func (gdClass CSGCylinder3D) SetSides(sides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[4], &sides) }
func (gdClass CSGCylinder3D) GetSides() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGCylinder3D[5]) }
func (gdClass CSGCylinder3D) SetCone(cone bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[6], &cone) }
func (gdClass CSGCylinder3D) IsCone() bool { return methodCall[bool](gdClass.obj.get(), methodCSGCylinder3D[7]) }
func (gdClass CSGCylinder3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[8], &material) }
func (gdClass CSGCylinder3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGCylinder3D[9]) }
func (gdClass CSGCylinder3D) SetSmoothFaces(smooth_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGCylinder3D[10], &smooth_faces) }
func (gdClass CSGCylinder3D) GetSmoothFaces() bool { return methodCall[bool](gdClass.obj.get(), methodCSGCylinder3D[11]) }

type CSGMesh3D struct{self *CSGMesh3D; obj safeObject }
func NewCSGMesh3D(ctx Context, at *CSGMesh3D) CSGMesh3D { if at == nil { at = new(CSGMesh3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGMesh3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGMesh3D) owner() cObject { return gdClass.obj.get() }
func (CSGMesh3D) class() string { return "CSGMesh3D\000" }

func (gdClass CSGMesh3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGMesh3D [4]cMethodBind
func (gdClass CSGMesh3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGMesh3D) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodCSGMesh3D[0], &mesh) }
func (gdClass CSGMesh3D) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodCSGMesh3D[1]) }
func (gdClass CSGMesh3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGMesh3D[2], &material) }
func (gdClass CSGMesh3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGMesh3D[3]) }

type CSGPolygon3DMode int64

const (
	CSGPolygon3DModeDepth CSGPolygon3DMode = 0
	CSGPolygon3DModeSpin CSGPolygon3DMode = 1
	CSGPolygon3DModePath CSGPolygon3DMode = 2
)

type CSGPolygon3DPathRotation int64

const (
	CSGPolygon3DPathRotationPolygon CSGPolygon3DPathRotation = 0
	CSGPolygon3DPathRotationPath CSGPolygon3DPathRotation = 1
	CSGPolygon3DPathRotationPathFollow CSGPolygon3DPathRotation = 2
)

type CSGPolygon3DPathIntervalType int64

const (
	CSGPolygon3DPathIntervalDistance CSGPolygon3DPathIntervalType = 0
	CSGPolygon3DPathIntervalSubdivide CSGPolygon3DPathIntervalType = 1
)

type CSGPolygon3D struct{self *CSGPolygon3D; obj safeObject }
func NewCSGPolygon3D(ctx Context, at *CSGPolygon3D) CSGPolygon3D { if at == nil { at = new(CSGPolygon3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGPolygon3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGPolygon3D) owner() cObject { return gdClass.obj.get() }
func (CSGPolygon3D) class() string { return "CSGPolygon3D\000" }

func (gdClass CSGPolygon3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGPolygon3D [32]cMethodBind
func (gdClass CSGPolygon3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGPolygon3D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[0], &polygon) }
func (gdClass CSGPolygon3D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCSGPolygon3D[1]) }
func (gdClass CSGPolygon3D) SetMode(mode CSGPolygon3DMode)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[2], &mode) }
func (gdClass CSGPolygon3D) GetMode() CSGPolygon3DMode { return methodCall[CSGPolygon3DMode](gdClass.obj.get(), methodCSGPolygon3D[3]) }
func (gdClass CSGPolygon3D) SetDepth(depth float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[4], &depth) }
func (gdClass CSGPolygon3D) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGPolygon3D[5]) }
func (gdClass CSGPolygon3D) SetSpinDegrees(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[6], &degrees) }
func (gdClass CSGPolygon3D) GetSpinDegrees() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGPolygon3D[7]) }
func (gdClass CSGPolygon3D) SetSpinSides(spin_sides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[8], &spin_sides) }
func (gdClass CSGPolygon3D) GetSpinSides() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGPolygon3D[9]) }
func (gdClass CSGPolygon3D) SetPathNode(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[10], &path) }
func (gdClass CSGPolygon3D) GetPathNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodCSGPolygon3D[11]) }
func (gdClass CSGPolygon3D) SetPathIntervalType(interval_type CSGPolygon3DPathIntervalType)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[12], &interval_type) }
func (gdClass CSGPolygon3D) GetPathIntervalType() CSGPolygon3DPathIntervalType { return methodCall[CSGPolygon3DPathIntervalType](gdClass.obj.get(), methodCSGPolygon3D[13]) }
func (gdClass CSGPolygon3D) SetPathInterval(interval float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[14], &interval) }
func (gdClass CSGPolygon3D) GetPathInterval() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGPolygon3D[15]) }
func (gdClass CSGPolygon3D) SetPathSimplifyAngle(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[16], &degrees) }
func (gdClass CSGPolygon3D) GetPathSimplifyAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGPolygon3D[17]) }
func (gdClass CSGPolygon3D) SetPathRotation(path_rotation CSGPolygon3DPathRotation)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[18], &path_rotation) }
func (gdClass CSGPolygon3D) GetPathRotation() CSGPolygon3DPathRotation { return methodCall[CSGPolygon3DPathRotation](gdClass.obj.get(), methodCSGPolygon3D[19]) }
func (gdClass CSGPolygon3D) SetPathLocal(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[20], &enable) }
func (gdClass CSGPolygon3D) IsPathLocal() bool { return methodCall[bool](gdClass.obj.get(), methodCSGPolygon3D[21]) }
func (gdClass CSGPolygon3D) SetPathContinuousU(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[22], &enable) }
func (gdClass CSGPolygon3D) IsPathContinuousU() bool { return methodCall[bool](gdClass.obj.get(), methodCSGPolygon3D[23]) }
func (gdClass CSGPolygon3D) SetPathUDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[24], &distance) }
func (gdClass CSGPolygon3D) GetPathUDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGPolygon3D[25]) }
func (gdClass CSGPolygon3D) SetPathJoined(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[26], &enable) }
func (gdClass CSGPolygon3D) IsPathJoined() bool { return methodCall[bool](gdClass.obj.get(), methodCSGPolygon3D[27]) }
func (gdClass CSGPolygon3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[28], &material) }
func (gdClass CSGPolygon3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGPolygon3D[29]) }
func (gdClass CSGPolygon3D) SetSmoothFaces(smooth_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPolygon3D[30], &smooth_faces) }
func (gdClass CSGPolygon3D) GetSmoothFaces() bool { return methodCall[bool](gdClass.obj.get(), methodCSGPolygon3D[31]) }

type CSGPrimitive3D struct{self *CSGPrimitive3D; obj safeObject }
func NewCSGPrimitive3D(ctx Context, at *CSGPrimitive3D) CSGPrimitive3D { if at == nil { at = new(CSGPrimitive3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGPrimitive3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGPrimitive3D) owner() cObject { return gdClass.obj.get() }
func (CSGPrimitive3D) class() string { return "CSGPrimitive3D\000" }

func (gdClass CSGPrimitive3D) CSGShape3D() CSGShape3D { return CSGShape3D{obj:gdClass.obj} }

var methodCSGPrimitive3D [2]cMethodBind
func (gdClass CSGPrimitive3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGShape3D().virtual(rtype, name)
}
func (gdClass CSGPrimitive3D) SetFlipFaces(flip_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGPrimitive3D[0], &flip_faces) }
func (gdClass CSGPrimitive3D) GetFlipFaces() bool { return methodCall[bool](gdClass.obj.get(), methodCSGPrimitive3D[1]) }

type CSGShape3DOperation int64

const (
	CSGShape3DOperationUnion CSGShape3DOperation = 0
	CSGShape3DOperationIntersection CSGShape3DOperation = 1
	CSGShape3DOperationSubtraction CSGShape3DOperation = 2
)

type CSGShape3D struct{self *CSGShape3D; obj safeObject }
func NewCSGShape3D(ctx Context, at *CSGShape3D) CSGShape3D { if at == nil { at = new(CSGShape3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGShape3D) owner() cObject { return gdClass.obj.get() }
func (CSGShape3D) class() string { return "CSGShape3D\000" }

func (gdClass CSGShape3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodCSGShape3D [20]cMethodBind
func (gdClass CSGShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass CSGShape3D) IsRootShape() bool { return methodCall[bool](gdClass.obj.get(), methodCSGShape3D[0]) }
func (gdClass CSGShape3D) SetOperation(operation CSGShape3DOperation)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[1], &operation) }
func (gdClass CSGShape3D) GetOperation() CSGShape3DOperation { return methodCall[CSGShape3DOperation](gdClass.obj.get(), methodCSGShape3D[2]) }
func (gdClass CSGShape3D) SetSnap(snap float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[3], &snap) }
func (gdClass CSGShape3D) GetSnap() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGShape3D[4]) }
func (gdClass CSGShape3D) SetUseCollision(operation bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[5], &operation) }
func (gdClass CSGShape3D) IsUsingCollision() bool { return methodCall[bool](gdClass.obj.get(), methodCSGShape3D[6]) }
func (gdClass CSGShape3D) SetCollisionLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[7], &layer) }
func (gdClass CSGShape3D) GetCollisionLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGShape3D[8]) }
func (gdClass CSGShape3D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[9], &mask) }
func (gdClass CSGShape3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGShape3D[10]) }
func (gdClass CSGShape3D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[11], &layer_number, &value) }
func (gdClass CSGShape3D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCSGShape3D[12], &layer_number) }
func (gdClass CSGShape3D) SetCollisionLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[13], &layer_number, &value) }
func (gdClass CSGShape3D) GetCollisionLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCSGShape3D[14], &layer_number) }
func (gdClass CSGShape3D) SetCollisionPriority(priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[15], &priority) }
func (gdClass CSGShape3D) GetCollisionPriority() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGShape3D[16]) }
func (gdClass CSGShape3D) SetCalculateTangents(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGShape3D[17], &enabled) }
func (gdClass CSGShape3D) IsCalculatingTangents() bool { return methodCall[bool](gdClass.obj.get(), methodCSGShape3D[18]) }
func (gdClass CSGShape3D) GetMeshes() Array { return methodCall[Array](gdClass.obj.get(), methodCSGShape3D[19]) }

type CSGSphere3D struct{self *CSGSphere3D; obj safeObject }
func NewCSGSphere3D(ctx Context, at *CSGSphere3D) CSGSphere3D { if at == nil { at = new(CSGSphere3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGSphere3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGSphere3D) owner() cObject { return gdClass.obj.get() }
func (CSGSphere3D) class() string { return "CSGSphere3D\000" }

func (gdClass CSGSphere3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGSphere3D [10]cMethodBind
func (gdClass CSGSphere3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGSphere3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGSphere3D[0], &radius) }
func (gdClass CSGSphere3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGSphere3D[1]) }
func (gdClass CSGSphere3D) SetRadialSegments(radial_segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGSphere3D[2], &radial_segments) }
func (gdClass CSGSphere3D) GetRadialSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGSphere3D[3]) }
func (gdClass CSGSphere3D) SetRings(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGSphere3D[4], &rings) }
func (gdClass CSGSphere3D) GetRings() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGSphere3D[5]) }
func (gdClass CSGSphere3D) SetSmoothFaces(smooth_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGSphere3D[6], &smooth_faces) }
func (gdClass CSGSphere3D) GetSmoothFaces() bool { return methodCall[bool](gdClass.obj.get(), methodCSGSphere3D[7]) }
func (gdClass CSGSphere3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGSphere3D[8], &material) }
func (gdClass CSGSphere3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGSphere3D[9]) }

type CSGTorus3D struct{self *CSGTorus3D; obj safeObject }
func NewCSGTorus3D(ctx Context, at *CSGTorus3D) CSGTorus3D { if at == nil { at = new(CSGTorus3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CSGTorus3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CSGTorus3D) owner() cObject { return gdClass.obj.get() }
func (CSGTorus3D) class() string { return "CSGTorus3D\000" }

func (gdClass CSGTorus3D) CSGPrimitive3D() CSGPrimitive3D { return CSGPrimitive3D{obj:gdClass.obj} }

var methodCSGTorus3D [12]cMethodBind
func (gdClass CSGTorus3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CSGPrimitive3D().virtual(rtype, name)
}
func (gdClass CSGTorus3D) SetInnerRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[0], &radius) }
func (gdClass CSGTorus3D) GetInnerRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGTorus3D[1]) }
func (gdClass CSGTorus3D) SetOuterRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[2], &radius) }
func (gdClass CSGTorus3D) GetOuterRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCSGTorus3D[3]) }
func (gdClass CSGTorus3D) SetSides(sides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[4], &sides) }
func (gdClass CSGTorus3D) GetSides() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGTorus3D[5]) }
func (gdClass CSGTorus3D) SetRingSides(sides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[6], &sides) }
func (gdClass CSGTorus3D) GetRingSides() int64 { return methodCall[int64](gdClass.obj.get(), methodCSGTorus3D[7]) }
func (gdClass CSGTorus3D) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[8], &material) }
func (gdClass CSGTorus3D) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCSGTorus3D[9]) }
func (gdClass CSGTorus3D) SetSmoothFaces(smooth_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCSGTorus3D[10], &smooth_faces) }
func (gdClass CSGTorus3D) GetSmoothFaces() bool { return methodCall[bool](gdClass.obj.get(), methodCSGTorus3D[11]) }

type CallbackTweener struct{self *CallbackTweener; obj safeObject }
func NewCallbackTweener(ctx Context, at *CallbackTweener) CallbackTweener { if at == nil { at = new(CallbackTweener) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CallbackTweener) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CallbackTweener) owner() cObject { return gdClass.obj.get() }
func (CallbackTweener) class() string { return "CallbackTweener\000" }

func (gdClass CallbackTweener) Tweener() Tweener { return Tweener{obj:gdClass.obj} }

var methodCallbackTweener [1]cMethodBind
func (gdClass CallbackTweener) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Tweener().virtual(rtype, name)
}
func (gdClass CallbackTweener) SetDelay(delay float64) CallbackTweener { return methodCall[CallbackTweener](gdClass.obj.get(), methodCallbackTweener[0], &delay) }

type Camera2DAnchorMode int64

const (
	Camera2DAnchorModeFixedTopLeft Camera2DAnchorMode = 0
	Camera2DAnchorModeDragCenter Camera2DAnchorMode = 1
)

type Camera2DCamera2DProcessCallback int64

const (
	Camera2DCamera2dProcessPhysics Camera2DCamera2DProcessCallback = 0
	Camera2DCamera2dProcessIdle Camera2DCamera2DProcessCallback = 1
)

type Camera2D struct{self *Camera2D; obj safeObject }
func NewCamera2D(ctx Context, at *Camera2D) Camera2D { if at == nil { at = new(Camera2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Camera2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Camera2D) owner() cObject { return gdClass.obj.get() }
func (Camera2D) class() string { return "Camera2D\000" }

func (gdClass Camera2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCamera2D [43]cMethodBind
func (gdClass Camera2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Camera2D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[0], &offset) }
func (gdClass Camera2D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera2D[1]) }
func (gdClass Camera2D) SetAnchorMode(anchor_mode Camera2DAnchorMode)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[2], &anchor_mode) }
func (gdClass Camera2D) GetAnchorMode() Camera2DAnchorMode { return methodCall[Camera2DAnchorMode](gdClass.obj.get(), methodCamera2D[3]) }
func (gdClass Camera2D) SetRotating(rotating bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[4], &rotating) }
func (gdClass Camera2D) IsRotating() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[5]) }
func (gdClass Camera2D) SetProcessCallback(mode Camera2DCamera2DProcessCallback)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[6], &mode) }
func (gdClass Camera2D) GetProcessCallback() Camera2DCamera2DProcessCallback { return methodCall[Camera2DCamera2DProcessCallback](gdClass.obj.get(), methodCamera2D[7]) }
func (gdClass Camera2D) SetCurrent(current bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[8], &current) }
func (gdClass Camera2D) IsCurrent() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[9]) }
func (gdClass Camera2D) SetLimit(margin Side, limit int64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[10], &margin, &limit) }
func (gdClass Camera2D) GetLimit(margin Side) int64 { return methodCall[int64](gdClass.obj.get(), methodCamera2D[11], &margin) }
func (gdClass Camera2D) SetLimitSmoothingEnabled(limit_smoothing_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[12], &limit_smoothing_enabled) }
func (gdClass Camera2D) IsLimitSmoothingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[13]) }
func (gdClass Camera2D) SetDragVerticalEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[14], &enabled) }
func (gdClass Camera2D) IsDragVerticalEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[15]) }
func (gdClass Camera2D) SetDragHorizontalEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[16], &enabled) }
func (gdClass Camera2D) IsDragHorizontalEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[17]) }
func (gdClass Camera2D) SetDragVerticalOffset(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[18], &offset) }
func (gdClass Camera2D) GetDragVerticalOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera2D[19]) }
func (gdClass Camera2D) SetDragHorizontalOffset(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[20], &offset) }
func (gdClass Camera2D) GetDragHorizontalOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera2D[21]) }
func (gdClass Camera2D) SetDragMargin(margin Side, drag_margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[22], &margin, &drag_margin) }
func (gdClass Camera2D) GetDragMargin(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodCamera2D[23], &margin) }
func (gdClass Camera2D) GetCameraPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera2D[24]) }
func (gdClass Camera2D) GetCameraScreenCenter() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera2D[25]) }
func (gdClass Camera2D) SetZoom(zoom Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[26], &zoom) }
func (gdClass Camera2D) GetZoom() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera2D[27]) }
func (gdClass Camera2D) SetCustomViewport(viewport Node)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[28], &viewport) }
func (gdClass Camera2D) GetCustomViewport() Node { return methodCall[Node](gdClass.obj.get(), methodCamera2D[29]) }
func (gdClass Camera2D) SetFollowSmoothing(follow_smoothing float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[30], &follow_smoothing) }
func (gdClass Camera2D) GetFollowSmoothing() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera2D[31]) }
func (gdClass Camera2D) SetEnableFollowSmoothing(follow_smoothing bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[32], &follow_smoothing) }
func (gdClass Camera2D) IsFollowSmoothingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[33]) }
func (gdClass Camera2D) ForceUpdateScroll()  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[34]) }
func (gdClass Camera2D) ResetSmoothing()  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[35]) }
func (gdClass Camera2D) Align()  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[36]) }
func (gdClass Camera2D) SetScreenDrawingEnabled(screen_drawing_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[37], &screen_drawing_enabled) }
func (gdClass Camera2D) IsScreenDrawingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[38]) }
func (gdClass Camera2D) SetLimitDrawingEnabled(limit_drawing_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[39], &limit_drawing_enabled) }
func (gdClass Camera2D) IsLimitDrawingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[40]) }
func (gdClass Camera2D) SetMarginDrawingEnabled(margin_drawing_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera2D[41], &margin_drawing_enabled) }
func (gdClass Camera2D) IsMarginDrawingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCamera2D[42]) }

type Camera3DProjectionType int64

const (
	Camera3DProjectionPerspective Camera3DProjectionType = 0
	Camera3DProjectionOrthogonal Camera3DProjectionType = 1
	Camera3DProjectionFrustum Camera3DProjectionType = 2
)

type Camera3DKeepAspect int64

const (
	Camera3DKeepWidth Camera3DKeepAspect = 0
	Camera3DKeepHeight Camera3DKeepAspect = 1
)

type Camera3DDopplerTracking int64

const (
	Camera3DDopplerTrackingDisabled Camera3DDopplerTracking = 0
	Camera3DDopplerTrackingIdleStep Camera3DDopplerTracking = 1
	Camera3DDopplerTrackingPhysicsStep Camera3DDopplerTracking = 2
)

type Camera3D struct{self *Camera3D; obj safeObject }
func NewCamera3D(ctx Context, at *Camera3D) Camera3D { if at == nil { at = new(Camera3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Camera3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Camera3D) owner() cObject { return gdClass.obj.get() }
func (Camera3D) class() string { return "Camera3D\000" }

func (gdClass Camera3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodCamera3D [46]cMethodBind
func (gdClass Camera3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass Camera3D) ProjectRayNormal(screen_point Vector2) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCamera3D[0], &screen_point) }
func (gdClass Camera3D) ProjectLocalRayNormal(screen_point Vector2) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCamera3D[1], &screen_point) }
func (gdClass Camera3D) ProjectRayOrigin(screen_point Vector2) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCamera3D[2], &screen_point) }
func (gdClass Camera3D) UnprojectPosition(world_point Vector3) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera3D[3], &world_point) }
func (gdClass Camera3D) IsPositionBehind(world_point Vector3) bool { return methodCall[bool](gdClass.obj.get(), methodCamera3D[4], &world_point) }
func (gdClass Camera3D) ProjectPosition(screen_point Vector2, z_depth float64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCamera3D[5], &screen_point, &z_depth) }
func (gdClass Camera3D) SetPerspective(fov float64, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[6], &fov, &z_near, &z_far) }
func (gdClass Camera3D) SetOrthogonal(size float64, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[7], &size, &z_near, &z_far) }
func (gdClass Camera3D) SetFrustum(size float64, offset Vector2, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[8], &size, &offset, &z_near, &z_far) }
func (gdClass Camera3D) MakeCurrent()  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[9]) }
func (gdClass Camera3D) ClearCurrent(enable_next bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[10], &enable_next) }
func (gdClass Camera3D) SetCurrent(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[11], &enabled) }
func (gdClass Camera3D) IsCurrent() bool { return methodCall[bool](gdClass.obj.get(), methodCamera3D[12]) }
func (gdClass Camera3D) GetCameraTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodCamera3D[13]) }
func (gdClass Camera3D) GetFov() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[14]) }
func (gdClass Camera3D) GetFrustumOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCamera3D[15]) }
func (gdClass Camera3D) GetSize() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[16]) }
func (gdClass Camera3D) GetFar() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[17]) }
func (gdClass Camera3D) GetNear() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[18]) }
func (gdClass Camera3D) SetFov(fov float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[19], &fov) }
func (gdClass Camera3D) SetFrustumOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[20], &offset) }
func (gdClass Camera3D) SetSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[21], &size) }
func (gdClass Camera3D) SetFar(far float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[22], &far) }
func (gdClass Camera3D) SetNear(near float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[23], &near) }
func (gdClass Camera3D) GetProjection() Camera3DProjectionType { return methodCall[Camera3DProjectionType](gdClass.obj.get(), methodCamera3D[24]) }
func (gdClass Camera3D) SetProjection(mode Camera3DProjectionType)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[25], &mode) }
func (gdClass Camera3D) SetHOffset(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[26], &offset) }
func (gdClass Camera3D) GetHOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[27]) }
func (gdClass Camera3D) SetVOffset(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[28], &offset) }
func (gdClass Camera3D) GetVOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodCamera3D[29]) }
func (gdClass Camera3D) SetCullMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[30], &mask) }
func (gdClass Camera3D) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodCamera3D[31]) }
func (gdClass Camera3D) SetEnvironment(env Environment)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[32], &env) }
func (gdClass Camera3D) GetEnvironment() Environment { return methodCall[Environment](gdClass.obj.get(), methodCamera3D[33]) }
func (gdClass Camera3D) SetEffects(env CameraEffects)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[34], &env) }
func (gdClass Camera3D) GetEffects() CameraEffects { return methodCall[CameraEffects](gdClass.obj.get(), methodCamera3D[35]) }
func (gdClass Camera3D) SetKeepAspectMode(mode Camera3DKeepAspect)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[36], &mode) }
func (gdClass Camera3D) GetKeepAspectMode() Camera3DKeepAspect { return methodCall[Camera3DKeepAspect](gdClass.obj.get(), methodCamera3D[37]) }
func (gdClass Camera3D) SetDopplerTracking(mode Camera3DDopplerTracking)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[38], &mode) }
func (gdClass Camera3D) GetDopplerTracking() Camera3DDopplerTracking { return methodCall[Camera3DDopplerTracking](gdClass.obj.get(), methodCamera3D[39]) }
func (gdClass Camera3D) GetFrustum() Array { return methodCall[Array](gdClass.obj.get(), methodCamera3D[40]) }
func (gdClass Camera3D) IsPositionInFrustum(world_point Vector3) bool { return methodCall[bool](gdClass.obj.get(), methodCamera3D[41], &world_point) }
func (gdClass Camera3D) GetCameraRid() RID { return methodCall[RID](gdClass.obj.get(), methodCamera3D[42]) }
func (gdClass Camera3D) GetPyramidShapeRid() RID { return methodCall[RID](gdClass.obj.get(), methodCamera3D[43]) }
func (gdClass Camera3D) SetCullMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCamera3D[44], &layer_number, &value) }
func (gdClass Camera3D) GetCullMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCamera3D[45], &layer_number) }

type CameraEffects struct{self *CameraEffects; obj safeObject }
func NewCameraEffects(ctx Context, at *CameraEffects) CameraEffects { if at == nil { at = new(CameraEffects) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CameraEffects) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CameraEffects) owner() cObject { return gdClass.obj.get() }
func (CameraEffects) class() string { return "CameraEffects\000" }

func (gdClass CameraEffects) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodCameraEffects [18]cMethodBind
func (gdClass CameraEffects) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass CameraEffects) SetDofBlurFarEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[0], &enabled) }
func (gdClass CameraEffects) IsDofBlurFarEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCameraEffects[1]) }
func (gdClass CameraEffects) SetDofBlurFarDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[2], &distance) }
func (gdClass CameraEffects) GetDofBlurFarDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[3]) }
func (gdClass CameraEffects) SetDofBlurFarTransition(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[4], &distance) }
func (gdClass CameraEffects) GetDofBlurFarTransition() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[5]) }
func (gdClass CameraEffects) SetDofBlurNearEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[6], &enabled) }
func (gdClass CameraEffects) IsDofBlurNearEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCameraEffects[7]) }
func (gdClass CameraEffects) SetDofBlurNearDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[8], &distance) }
func (gdClass CameraEffects) GetDofBlurNearDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[9]) }
func (gdClass CameraEffects) SetDofBlurNearTransition(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[10], &distance) }
func (gdClass CameraEffects) GetDofBlurNearTransition() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[11]) }
func (gdClass CameraEffects) SetDofBlurAmount(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[12], &amount) }
func (gdClass CameraEffects) GetDofBlurAmount() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[13]) }
func (gdClass CameraEffects) SetOverrideExposureEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[14], &enabled) }
func (gdClass CameraEffects) IsOverrideExposureEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCameraEffects[15]) }
func (gdClass CameraEffects) SetOverrideExposure(exposure float64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraEffects[16], &exposure) }
func (gdClass CameraEffects) GetOverrideExposure() float64 { return methodCall[float64](gdClass.obj.get(), methodCameraEffects[17]) }

type CameraFeedFeedDataType int64

const (
	CameraFeedFeedNoimage CameraFeedFeedDataType = 0
	CameraFeedFeedRgb CameraFeedFeedDataType = 1
	CameraFeedFeedYcbcr CameraFeedFeedDataType = 2
	CameraFeedFeedYcbcrSep CameraFeedFeedDataType = 3
)

type CameraFeedFeedPosition int64

const (
	CameraFeedFeedUnspecified CameraFeedFeedPosition = 0
	CameraFeedFeedFront CameraFeedFeedPosition = 1
	CameraFeedFeedBack CameraFeedFeedPosition = 2
)

type CameraFeed struct{self *CameraFeed; obj safeObject }
func NewCameraFeed(ctx Context, at *CameraFeed) CameraFeed { if at == nil { at = new(CameraFeed) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CameraFeed) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CameraFeed) owner() cObject { return gdClass.obj.get() }
func (CameraFeed) class() string { return "CameraFeed\000" }

func (gdClass CameraFeed) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodCameraFeed [8]cMethodBind
func (gdClass CameraFeed) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass CameraFeed) GetId() int64 { return methodCall[int64](gdClass.obj.get(), methodCameraFeed[0]) }
func (gdClass CameraFeed) IsActive() bool { return methodCall[bool](gdClass.obj.get(), methodCameraFeed[1]) }
func (gdClass CameraFeed) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodCameraFeed[2], &active) }
func (gdClass CameraFeed) GetName() string { return methodCall[string](gdClass.obj.get(), methodCameraFeed[3]) }
func (gdClass CameraFeed) GetPosition() CameraFeedFeedPosition { return methodCall[CameraFeedFeedPosition](gdClass.obj.get(), methodCameraFeed[4]) }
func (gdClass CameraFeed) GetTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCameraFeed[5]) }
func (gdClass CameraFeed) SetTransform(transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodCameraFeed[6], &transform) }
func (gdClass CameraFeed) GetDatatype() CameraFeedFeedDataType { return methodCall[CameraFeedFeedDataType](gdClass.obj.get(), methodCameraFeed[7]) }

type CameraServerFeedImage int64

const (
	CameraServerFeedRgbaImage CameraServerFeedImage = 0
	CameraServerFeedYcbcrImage CameraServerFeedImage = 0
	CameraServerFeedYImage CameraServerFeedImage = 0
	CameraServerFeedCbcrImage CameraServerFeedImage = 1
)
var CameraServer CameraServerSingleton

type CameraServerSingleton struct{self *CameraServerSingleton; obj safeObject }
func NewCameraServerSingleton(ctx Context, at *CameraServerSingleton) CameraServerSingleton { if at == nil { at = new(CameraServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CameraServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CameraServerSingleton) owner() cObject { return gdClass.obj.get() }
func (CameraServerSingleton) class() string { return "CameraServerSingleton\000" }

func (gdClass CameraServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodCameraServerSingleton [5]cMethodBind
func (gdClass CameraServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass CameraServerSingleton) GetFeed(index int64) CameraFeed { return methodCall[CameraFeed](gdClass.obj.get(), methodCameraServerSingleton[0], &index) }
func (gdClass CameraServerSingleton) GetFeedCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCameraServerSingleton[1]) }
func (gdClass CameraServerSingleton) Feeds() Array { return methodCall[Array](gdClass.obj.get(), methodCameraServerSingleton[2]) }
func (gdClass CameraServerSingleton) AddFeed(feed CameraFeed)  { methodCall[struct{}](gdClass.obj.get(), methodCameraServerSingleton[3], &feed) }
func (gdClass CameraServerSingleton) RemoveFeed(feed CameraFeed)  { methodCall[struct{}](gdClass.obj.get(), methodCameraServerSingleton[4], &feed) }

type CameraTexture struct{self *CameraTexture; obj safeObject }
func NewCameraTexture(ctx Context, at *CameraTexture) CameraTexture { if at == nil { at = new(CameraTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CameraTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CameraTexture) owner() cObject { return gdClass.obj.get() }
func (CameraTexture) class() string { return "CameraTexture\000" }

func (gdClass CameraTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodCameraTexture [6]cMethodBind
func (gdClass CameraTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass CameraTexture) SetCameraFeedId(feed_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCameraTexture[0], &feed_id) }
func (gdClass CameraTexture) GetCameraFeedId() int64 { return methodCall[int64](gdClass.obj.get(), methodCameraTexture[1]) }
func (gdClass CameraTexture) SetWhichFeed(which_feed CameraServerFeedImage)  { methodCall[struct{}](gdClass.obj.get(), methodCameraTexture[2], &which_feed) }
func (gdClass CameraTexture) GetWhichFeed() CameraServerFeedImage { return methodCall[CameraServerFeedImage](gdClass.obj.get(), methodCameraTexture[3]) }
func (gdClass CameraTexture) SetCameraActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodCameraTexture[4], &active) }
func (gdClass CameraTexture) GetCameraActive() bool { return methodCall[bool](gdClass.obj.get(), methodCameraTexture[5]) }

type CanvasGroup struct{self *CanvasGroup; obj safeObject }
func NewCanvasGroup(ctx Context, at *CanvasGroup) CanvasGroup { if at == nil { at = new(CanvasGroup) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CanvasGroup) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasGroup) owner() cObject { return gdClass.obj.get() }
func (CanvasGroup) class() string { return "CanvasGroup\000" }

func (gdClass CanvasGroup) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCanvasGroup [6]cMethodBind
func (gdClass CanvasGroup) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CanvasGroup) SetFitMargin(fit_margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasGroup[0], &fit_margin) }
func (gdClass CanvasGroup) GetFitMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCanvasGroup[1]) }
func (gdClass CanvasGroup) SetClearMargin(clear_margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasGroup[2], &clear_margin) }
func (gdClass CanvasGroup) GetClearMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCanvasGroup[3]) }
func (gdClass CanvasGroup) SetUseMipmaps(use_mipmaps bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasGroup[4], &use_mipmaps) }
func (gdClass CanvasGroup) IsUsingMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasGroup[5]) }

type CanvasItemTextureFilter int64

const (
	CanvasItemTextureFilterParentNode CanvasItemTextureFilter = 0
	CanvasItemTextureFilterNearest CanvasItemTextureFilter = 1
	CanvasItemTextureFilterLinear CanvasItemTextureFilter = 2
	CanvasItemTextureFilterNearestWithMipmaps CanvasItemTextureFilter = 3
	CanvasItemTextureFilterLinearWithMipmaps CanvasItemTextureFilter = 4
	CanvasItemTextureFilterNearestWithMipmapsAnisotropic CanvasItemTextureFilter = 5
	CanvasItemTextureFilterLinearWithMipmapsAnisotropic CanvasItemTextureFilter = 6
	CanvasItemTextureFilterMax CanvasItemTextureFilter = 7
)

type CanvasItemTextureRepeat int64

const (
	CanvasItemTextureRepeatParentNode CanvasItemTextureRepeat = 0
	CanvasItemTextureRepeatDisabled CanvasItemTextureRepeat = 1
	CanvasItemTextureRepeatEnabled CanvasItemTextureRepeat = 2
	CanvasItemTextureRepeatMirror CanvasItemTextureRepeat = 3
	CanvasItemTextureRepeatMax CanvasItemTextureRepeat = 4
)

type CanvasItem struct{self *CanvasItem; obj safeObject }
func NewCanvasItem(ctx Context, at *CanvasItem) CanvasItem { if at == nil { at = new(CanvasItem) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CanvasItem) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasItem) owner() cObject { return gdClass.obj.get() }
func (CanvasItem) class() string { return "CanvasItem\000" }

func (gdClass CanvasItem) Node() Node { return Node{obj:gdClass.obj} }

var methodCanvasItem [75]cMethodBind
func (gdClass CanvasItem) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_draw":
		if rtype.Implements(reflect.TypeOf([0]interface{ Draw()  }{}).Elem()) {
			return rtype.MethodByName(`Draw`)
		}
		return
	}
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass CanvasItem) GetCanvasItem() RID { return methodCall[RID](gdClass.obj.get(), methodCanvasItem[0]) }
func (gdClass CanvasItem) SetVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[1], &visible) }
func (gdClass CanvasItem) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[2]) }
func (gdClass CanvasItem) IsVisibleInTree() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[3]) }
func (gdClass CanvasItem) Show()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[4]) }
func (gdClass CanvasItem) Hide()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[5]) }
func (gdClass CanvasItem) Update()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[6]) }
func (gdClass CanvasItem) SetAsTopLevel(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[7], &enable) }
func (gdClass CanvasItem) IsSetAsTopLevel() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[8]) }
func (gdClass CanvasItem) SetLightMask(light_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[9], &light_mask) }
func (gdClass CanvasItem) GetLightMask() int64 { return methodCall[int64](gdClass.obj.get(), methodCanvasItem[10]) }
func (gdClass CanvasItem) SetModulate(modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[11], &modulate) }
func (gdClass CanvasItem) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodCanvasItem[12]) }
func (gdClass CanvasItem) SetSelfModulate(self_modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[13], &self_modulate) }
func (gdClass CanvasItem) GetSelfModulate() Color { return methodCall[Color](gdClass.obj.get(), methodCanvasItem[14]) }
func (gdClass CanvasItem) SetDrawBehindParent(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[15], &enable) }
func (gdClass CanvasItem) IsDrawBehindParentEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[16]) }
func (gdClass CanvasItem) DrawLine(from Vector2, to Vector2, color Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[17], &from, &to, &color, &width, &antialiased) }
func (gdClass CanvasItem) DrawDashedLine(from Vector2, to Vector2, color Color, width float64, dash float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[18], &from, &to, &color, &width, &dash) }
func (gdClass CanvasItem) DrawPolyline(points []Vector2, color Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[19], &points, &color, &width, &antialiased) }
func (gdClass CanvasItem) DrawPolylineColors(points []Vector2, colors []Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[20], &points, &colors, &width, &antialiased) }
func (gdClass CanvasItem) DrawArc(center Vector2, radius float64, start_angle float64, end_angle float64, point_count int64, color Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[21], &center, &radius, &start_angle, &end_angle, &point_count, &color, &width, &antialiased) }
func (gdClass CanvasItem) DrawMultiline(points []Vector2, color Color, width float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[22], &points, &color, &width) }
func (gdClass CanvasItem) DrawMultilineColors(points []Vector2, colors []Color, width float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[23], &points, &colors, &width) }
func (gdClass CanvasItem) DrawRect(rect Rect2, color Color, filled bool, width float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[24], &rect, &color, &filled, &width) }
func (gdClass CanvasItem) DrawCircle(position Vector2, radius float64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[25], &position, &radius, &color) }
func (gdClass CanvasItem) DrawTexture(texture Texture2D, position Vector2, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[26], &texture, &position, &modulate) }
func (gdClass CanvasItem) DrawTextureRect(texture Texture2D, rect Rect2, tile bool, modulate Color, transpose bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[27], &texture, &rect, &tile, &modulate, &transpose) }
func (gdClass CanvasItem) DrawTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[28], &texture, &rect, &src_rect, &modulate, &transpose, &clip_uv) }
func (gdClass CanvasItem) DrawMsdfTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color, outline float64, pixel_range float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[29], &texture, &rect, &src_rect, &modulate, &outline, &pixel_range) }
func (gdClass CanvasItem) DrawLcdTextureRectRegion(texture Texture2D, rect Rect2, src_rect Rect2, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[30], &texture, &rect, &src_rect, &modulate) }
func (gdClass CanvasItem) DrawStyleBox(style_box StyleBox, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[31], &style_box, &rect) }
func (gdClass CanvasItem) DrawPrimitive(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D, width float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[32], &points, &colors, &uvs, &texture, &width) }
func (gdClass CanvasItem) DrawPolygon(points []Vector2, colors []Color, uvs []Vector2, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[33], &points, &colors, &uvs, &texture) }
func (gdClass CanvasItem) DrawColoredPolygon(points []Vector2, color Color, uvs []Vector2, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[34], &points, &color, &uvs, &texture) }
func (gdClass CanvasItem) DrawString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[35], &font, &pos, &text, &alignment, &width, &font_size, &modulate, &jst_flags, &direction, &orientation) }
func (gdClass CanvasItem) DrawMultilineString(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[36], &font, &pos, &text, &alignment, &width, &font_size, &max_lines, &modulate, &brk_flags, &jst_flags, &direction, &orientation) }
func (gdClass CanvasItem) DrawStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[37], &font, &pos, &text, &alignment, &width, &font_size, &size, &modulate, &jst_flags, &direction, &orientation) }
func (gdClass CanvasItem) DrawMultilineStringOutline(font Font, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[38], &font, &pos, &text, &alignment, &width, &font_size, &max_lines, &size, &modulate, &brk_flags, &jst_flags, &direction, &orientation) }
func (gdClass CanvasItem) DrawChar(font Font, pos Vector2, char string, font_size int64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[39], &font, &pos, &char, &font_size, &modulate) }
func (gdClass CanvasItem) DrawCharOutline(font Font, pos Vector2, char string, font_size int64, size int64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[40], &font, &pos, &char, &font_size, &size, &modulate) }
func (gdClass CanvasItem) DrawMesh(mesh Mesh, texture Texture2D, transform Transform2D, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[41], &mesh, &texture, &transform, &modulate) }
func (gdClass CanvasItem) DrawMultimesh(multimesh MultiMesh, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[42], &multimesh, &texture) }
func (gdClass CanvasItem) DrawSetTransform(position Vector2, rotation float64, scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[43], &position, &rotation, &scale) }
func (gdClass CanvasItem) DrawSetTransformMatrix(xform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[44], &xform) }
func (gdClass CanvasItem) DrawAnimationSlice(animation_length float64, slice_begin float64, slice_end float64, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[45], &animation_length, &slice_begin, &slice_end, &offset) }
func (gdClass CanvasItem) DrawEndAnimation()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[46]) }
func (gdClass CanvasItem) GetTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[47]) }
func (gdClass CanvasItem) GetGlobalTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[48]) }
func (gdClass CanvasItem) GetGlobalTransformWithCanvas() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[49]) }
func (gdClass CanvasItem) GetViewportTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[50]) }
func (gdClass CanvasItem) GetViewportRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodCanvasItem[51]) }
func (gdClass CanvasItem) GetCanvasTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[52]) }
func (gdClass CanvasItem) GetScreenTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasItem[53]) }
func (gdClass CanvasItem) GetLocalMousePosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCanvasItem[54]) }
func (gdClass CanvasItem) GetGlobalMousePosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCanvasItem[55]) }
func (gdClass CanvasItem) GetCanvas() RID { return methodCall[RID](gdClass.obj.get(), methodCanvasItem[56]) }
func (gdClass CanvasItem) GetWorld2d() World2D { return methodCall[World2D](gdClass.obj.get(), methodCanvasItem[57]) }
func (gdClass CanvasItem) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[58], &material) }
func (gdClass CanvasItem) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodCanvasItem[59]) }
func (gdClass CanvasItem) SetUseParentMaterial(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[60], &enable) }
func (gdClass CanvasItem) GetUseParentMaterial() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[61]) }
func (gdClass CanvasItem) SetNotifyLocalTransform(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[62], &enable) }
func (gdClass CanvasItem) IsLocalTransformNotificationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[63]) }
func (gdClass CanvasItem) SetNotifyTransform(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[64], &enable) }
func (gdClass CanvasItem) IsTransformNotificationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[65]) }
func (gdClass CanvasItem) ForceUpdateTransform()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[66]) }
func (gdClass CanvasItem) MakeCanvasPositionLocal(screen_point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCanvasItem[67], &screen_point) }
func (gdClass CanvasItem) MakeInputLocal(event InputEvent) InputEvent { return methodCall[InputEvent](gdClass.obj.get(), methodCanvasItem[68], &event) }
func (gdClass CanvasItem) SetTextureFilter(mode CanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[69], &mode) }
func (gdClass CanvasItem) GetTextureFilter() CanvasItemTextureFilter { return methodCall[CanvasItemTextureFilter](gdClass.obj.get(), methodCanvasItem[70]) }
func (gdClass CanvasItem) SetTextureRepeat(mode CanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[71], &mode) }
func (gdClass CanvasItem) GetTextureRepeat() CanvasItemTextureRepeat { return methodCall[CanvasItemTextureRepeat](gdClass.obj.get(), methodCanvasItem[72]) }
func (gdClass CanvasItem) SetClipChildren(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItem[73], &enable) }
func (gdClass CanvasItem) IsClippingChildren() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItem[74]) }

type CanvasItemMaterialBlendMode int64

const (
	CanvasItemMaterialBlendModeMix CanvasItemMaterialBlendMode = 0
	CanvasItemMaterialBlendModeAdd CanvasItemMaterialBlendMode = 1
	CanvasItemMaterialBlendModeSub CanvasItemMaterialBlendMode = 2
	CanvasItemMaterialBlendModeMul CanvasItemMaterialBlendMode = 3
	CanvasItemMaterialBlendModePremultAlpha CanvasItemMaterialBlendMode = 4
)

type CanvasItemMaterialLightMode int64

const (
	CanvasItemMaterialLightModeNormal CanvasItemMaterialLightMode = 0
	CanvasItemMaterialLightModeUnshaded CanvasItemMaterialLightMode = 1
	CanvasItemMaterialLightModeLightOnly CanvasItemMaterialLightMode = 2
)

type CanvasItemMaterial struct{self *CanvasItemMaterial; obj safeObject }
func NewCanvasItemMaterial(ctx Context, at *CanvasItemMaterial) CanvasItemMaterial { if at == nil { at = new(CanvasItemMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CanvasItemMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasItemMaterial) owner() cObject { return gdClass.obj.get() }
func (CanvasItemMaterial) class() string { return "CanvasItemMaterial\000" }

func (gdClass CanvasItemMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodCanvasItemMaterial [12]cMethodBind
func (gdClass CanvasItemMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass CanvasItemMaterial) SetBlendMode(blend_mode CanvasItemMaterialBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[0], &blend_mode) }
func (gdClass CanvasItemMaterial) GetBlendMode() CanvasItemMaterialBlendMode { return methodCall[CanvasItemMaterialBlendMode](gdClass.obj.get(), methodCanvasItemMaterial[1]) }
func (gdClass CanvasItemMaterial) SetLightMode(light_mode CanvasItemMaterialLightMode)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[2], &light_mode) }
func (gdClass CanvasItemMaterial) GetLightMode() CanvasItemMaterialLightMode { return methodCall[CanvasItemMaterialLightMode](gdClass.obj.get(), methodCanvasItemMaterial[3]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimation(particles_anim bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[4], &particles_anim) }
func (gdClass CanvasItemMaterial) GetParticlesAnimation() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItemMaterial[5]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimHFrames(frames int64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[6], &frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimHFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodCanvasItemMaterial[7]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimVFrames(frames int64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[8], &frames) }
func (gdClass CanvasItemMaterial) GetParticlesAnimVFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodCanvasItemMaterial[9]) }
func (gdClass CanvasItemMaterial) SetParticlesAnimLoop(loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasItemMaterial[10], &loop) }
func (gdClass CanvasItemMaterial) GetParticlesAnimLoop() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasItemMaterial[11]) }

type CanvasLayer struct{self *CanvasLayer; obj safeObject }
func NewCanvasLayer(ctx Context, at *CanvasLayer) CanvasLayer { if at == nil { at = new(CanvasLayer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CanvasLayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasLayer) owner() cObject { return gdClass.obj.get() }
func (CanvasLayer) class() string { return "CanvasLayer\000" }

func (gdClass CanvasLayer) Node() Node { return Node{obj:gdClass.obj} }

var methodCanvasLayer [21]cMethodBind
func (gdClass CanvasLayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass CanvasLayer) SetLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[0], &layer) }
func (gdClass CanvasLayer) GetLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodCanvasLayer[1]) }
func (gdClass CanvasLayer) SetVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[2], &visible) }
func (gdClass CanvasLayer) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasLayer[3]) }
func (gdClass CanvasLayer) Show()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[4]) }
func (gdClass CanvasLayer) Hide()  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[5]) }
func (gdClass CanvasLayer) SetTransform(transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[6], &transform) }
func (gdClass CanvasLayer) GetTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCanvasLayer[7]) }
func (gdClass CanvasLayer) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[8], &offset) }
func (gdClass CanvasLayer) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCanvasLayer[9]) }
func (gdClass CanvasLayer) SetRotation(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[10], &radians) }
func (gdClass CanvasLayer) GetRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodCanvasLayer[11]) }
func (gdClass CanvasLayer) SetScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[12], &scale) }
func (gdClass CanvasLayer) GetScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCanvasLayer[13]) }
func (gdClass CanvasLayer) SetFollowViewport(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[14], &enable) }
func (gdClass CanvasLayer) IsFollowingViewport() bool { return methodCall[bool](gdClass.obj.get(), methodCanvasLayer[15]) }
func (gdClass CanvasLayer) SetFollowViewportScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[16], &scale) }
func (gdClass CanvasLayer) GetFollowViewportScale() float64 { return methodCall[float64](gdClass.obj.get(), methodCanvasLayer[17]) }
func (gdClass CanvasLayer) SetCustomViewport(viewport Node)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasLayer[18], &viewport) }
func (gdClass CanvasLayer) GetCustomViewport() Node { return methodCall[Node](gdClass.obj.get(), methodCanvasLayer[19]) }
func (gdClass CanvasLayer) GetCanvas() RID { return methodCall[RID](gdClass.obj.get(), methodCanvasLayer[20]) }

type CanvasModulate struct{self *CanvasModulate; obj safeObject }
func NewCanvasModulate(ctx Context, at *CanvasModulate) CanvasModulate { if at == nil { at = new(CanvasModulate) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CanvasModulate) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasModulate) owner() cObject { return gdClass.obj.get() }
func (CanvasModulate) class() string { return "CanvasModulate\000" }

func (gdClass CanvasModulate) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCanvasModulate [2]cMethodBind
func (gdClass CanvasModulate) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CanvasModulate) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasModulate[0], &color) }
func (gdClass CanvasModulate) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodCanvasModulate[1]) }

type CanvasTexture struct{self *CanvasTexture; obj safeObject }
func NewCanvasTexture(ctx Context, at *CanvasTexture) CanvasTexture { if at == nil { at = new(CanvasTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CanvasTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CanvasTexture) owner() cObject { return gdClass.obj.get() }
func (CanvasTexture) class() string { return "CanvasTexture\000" }

func (gdClass CanvasTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodCanvasTexture [14]cMethodBind
func (gdClass CanvasTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass CanvasTexture) SetDiffuseTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[0], &texture) }
func (gdClass CanvasTexture) GetDiffuseTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodCanvasTexture[1]) }
func (gdClass CanvasTexture) SetNormalTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[2], &texture) }
func (gdClass CanvasTexture) GetNormalTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodCanvasTexture[3]) }
func (gdClass CanvasTexture) SetSpecularTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[4], &texture) }
func (gdClass CanvasTexture) GetSpecularTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodCanvasTexture[5]) }
func (gdClass CanvasTexture) SetSpecularColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[6], &color) }
func (gdClass CanvasTexture) GetSpecularColor() Color { return methodCall[Color](gdClass.obj.get(), methodCanvasTexture[7]) }
func (gdClass CanvasTexture) SetSpecularShininess(shininess float64)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[8], &shininess) }
func (gdClass CanvasTexture) GetSpecularShininess() float64 { return methodCall[float64](gdClass.obj.get(), methodCanvasTexture[9]) }
func (gdClass CanvasTexture) SetTextureFilter(filter CanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[10], &filter) }
func (gdClass CanvasTexture) GetTextureFilter() CanvasItemTextureFilter { return methodCall[CanvasItemTextureFilter](gdClass.obj.get(), methodCanvasTexture[11]) }
func (gdClass CanvasTexture) SetTextureRepeat(repeat CanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodCanvasTexture[12], &repeat) }
func (gdClass CanvasTexture) GetTextureRepeat() CanvasItemTextureRepeat { return methodCall[CanvasItemTextureRepeat](gdClass.obj.get(), methodCanvasTexture[13]) }

type CapsuleMesh struct{self *CapsuleMesh; obj safeObject }
func NewCapsuleMesh(ctx Context, at *CapsuleMesh) CapsuleMesh { if at == nil { at = new(CapsuleMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CapsuleMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CapsuleMesh) owner() cObject { return gdClass.obj.get() }
func (CapsuleMesh) class() string { return "CapsuleMesh\000" }

func (gdClass CapsuleMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodCapsuleMesh [8]cMethodBind
func (gdClass CapsuleMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass CapsuleMesh) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleMesh[0], &radius) }
func (gdClass CapsuleMesh) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleMesh[1]) }
func (gdClass CapsuleMesh) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleMesh[2], &height) }
func (gdClass CapsuleMesh) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleMesh[3]) }
func (gdClass CapsuleMesh) SetRadialSegments(segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleMesh[4], &segments) }
func (gdClass CapsuleMesh) GetRadialSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodCapsuleMesh[5]) }
func (gdClass CapsuleMesh) SetRings(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleMesh[6], &rings) }
func (gdClass CapsuleMesh) GetRings() int64 { return methodCall[int64](gdClass.obj.get(), methodCapsuleMesh[7]) }

type CapsuleShape2D struct{self *CapsuleShape2D; obj safeObject }
func NewCapsuleShape2D(ctx Context, at *CapsuleShape2D) CapsuleShape2D { if at == nil { at = new(CapsuleShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CapsuleShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CapsuleShape2D) owner() cObject { return gdClass.obj.get() }
func (CapsuleShape2D) class() string { return "CapsuleShape2D\000" }

func (gdClass CapsuleShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodCapsuleShape2D [4]cMethodBind
func (gdClass CapsuleShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass CapsuleShape2D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleShape2D[0], &radius) }
func (gdClass CapsuleShape2D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleShape2D[1]) }
func (gdClass CapsuleShape2D) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleShape2D[2], &height) }
func (gdClass CapsuleShape2D) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleShape2D[3]) }

type CapsuleShape3D struct{self *CapsuleShape3D; obj safeObject }
func NewCapsuleShape3D(ctx Context, at *CapsuleShape3D) CapsuleShape3D { if at == nil { at = new(CapsuleShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CapsuleShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CapsuleShape3D) owner() cObject { return gdClass.obj.get() }
func (CapsuleShape3D) class() string { return "CapsuleShape3D\000" }

func (gdClass CapsuleShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodCapsuleShape3D [4]cMethodBind
func (gdClass CapsuleShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass CapsuleShape3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleShape3D[0], &radius) }
func (gdClass CapsuleShape3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleShape3D[1]) }
func (gdClass CapsuleShape3D) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCapsuleShape3D[2], &height) }
func (gdClass CapsuleShape3D) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCapsuleShape3D[3]) }

type CenterContainer struct{self *CenterContainer; obj safeObject }
func NewCenterContainer(ctx Context, at *CenterContainer) CenterContainer { if at == nil { at = new(CenterContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CenterContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CenterContainer) owner() cObject { return gdClass.obj.get() }
func (CenterContainer) class() string { return "CenterContainer\000" }

func (gdClass CenterContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodCenterContainer [2]cMethodBind
func (gdClass CenterContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass CenterContainer) SetUseTopLeft(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCenterContainer[0], &enable) }
func (gdClass CenterContainer) IsUsingTopLeft() bool { return methodCall[bool](gdClass.obj.get(), methodCenterContainer[1]) }

type CharFXTransform struct{self *CharFXTransform; obj safeObject }
func NewCharFXTransform(ctx Context, at *CharFXTransform) CharFXTransform { if at == nil { at = new(CharFXTransform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CharFXTransform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CharFXTransform) owner() cObject { return gdClass.obj.get() }
func (CharFXTransform) class() string { return "CharFXTransform\000" }

func (gdClass CharFXTransform) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodCharFXTransform [22]cMethodBind
func (gdClass CharFXTransform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass CharFXTransform) GetRange() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodCharFXTransform[0]) }
func (gdClass CharFXTransform) SetRange(arange Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[1], &arange) }
func (gdClass CharFXTransform) GetElapsedTime() float64 { return methodCall[float64](gdClass.obj.get(), methodCharFXTransform[2]) }
func (gdClass CharFXTransform) SetElapsedTime(time float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[3], &time) }
func (gdClass CharFXTransform) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodCharFXTransform[4]) }
func (gdClass CharFXTransform) SetVisibility(visibility bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[5], &visibility) }
func (gdClass CharFXTransform) IsOutline() bool { return methodCall[bool](gdClass.obj.get(), methodCharFXTransform[6]) }
func (gdClass CharFXTransform) SetOutline(outline bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[7], &outline) }
func (gdClass CharFXTransform) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharFXTransform[8]) }
func (gdClass CharFXTransform) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[9], &offset) }
func (gdClass CharFXTransform) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodCharFXTransform[10]) }
func (gdClass CharFXTransform) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[11], &color) }
func (gdClass CharFXTransform) GetEnvironment() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCharFXTransform[12]) }
func (gdClass CharFXTransform) SetEnvironment(environment Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[13], &environment) }
func (gdClass CharFXTransform) GetGlyphIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodCharFXTransform[14]) }
func (gdClass CharFXTransform) SetGlyphIndex(glyph_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[15], &glyph_index) }
func (gdClass CharFXTransform) GetGlyphCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCharFXTransform[16]) }
func (gdClass CharFXTransform) SetGlyphCount(glyph_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[17], &glyph_count) }
func (gdClass CharFXTransform) GetGlyphFlags() int64 { return methodCall[int64](gdClass.obj.get(), methodCharFXTransform[18]) }
func (gdClass CharFXTransform) SetGlyphFlags(glyph_flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[19], &glyph_flags) }
func (gdClass CharFXTransform) GetFont() RID { return methodCall[RID](gdClass.obj.get(), methodCharFXTransform[20]) }
func (gdClass CharFXTransform) SetFont(font RID)  { methodCall[struct{}](gdClass.obj.get(), methodCharFXTransform[21], &font) }

type CharacterBody2DMotionMode int64

const (
	CharacterBody2DMotionModeGrounded CharacterBody2DMotionMode = 0
	CharacterBody2DMotionModeFloating CharacterBody2DMotionMode = 1
)

type CharacterBody2DPlatformOnLeave int64

const (
	CharacterBody2DPlatformOnLeaveAddVelocity CharacterBody2DPlatformOnLeave = 0
	CharacterBody2DPlatformOnLeaveAddUpwardVelocity CharacterBody2DPlatformOnLeave = 1
	CharacterBody2DPlatformOnLeaveDoNothing CharacterBody2DPlatformOnLeave = 2
)

type CharacterBody2D struct{self *CharacterBody2D; obj safeObject }
func NewCharacterBody2D(ctx Context, at *CharacterBody2D) CharacterBody2D { if at == nil { at = new(CharacterBody2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CharacterBody2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CharacterBody2D) owner() cObject { return gdClass.obj.get() }
func (CharacterBody2D) class() string { return "CharacterBody2D\000" }

func (gdClass CharacterBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D{obj:gdClass.obj} }

var methodCharacterBody2D [47]cMethodBind
func (gdClass CharacterBody2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsBody2D().virtual(rtype, name)
}
func (gdClass CharacterBody2D) MoveAndSlide() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[0]) }
func (gdClass CharacterBody2D) SetVelocity(velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[1], &velocity) }
func (gdClass CharacterBody2D) GetVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[2]) }
func (gdClass CharacterBody2D) SetSafeMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[3], &margin) }
func (gdClass CharacterBody2D) GetSafeMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody2D[4]) }
func (gdClass CharacterBody2D) IsFloorStopOnSlopeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[5]) }
func (gdClass CharacterBody2D) SetFloorStopOnSlopeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[6], &enabled) }
func (gdClass CharacterBody2D) SetFloorConstantSpeedEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[7], &enabled) }
func (gdClass CharacterBody2D) IsFloorConstantSpeedEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[8]) }
func (gdClass CharacterBody2D) SetFloorBlockOnWallEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[9], &enabled) }
func (gdClass CharacterBody2D) IsFloorBlockOnWallEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[10]) }
func (gdClass CharacterBody2D) SetSlideOnCeilingEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[11], &enabled) }
func (gdClass CharacterBody2D) IsSlideOnCeilingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[12]) }
func (gdClass CharacterBody2D) SetPlatformFloorLayers(exclude_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[13], &exclude_layer) }
func (gdClass CharacterBody2D) GetPlatformFloorLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody2D[14]) }
func (gdClass CharacterBody2D) SetPlatformWallLayers(exclude_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[15], &exclude_layer) }
func (gdClass CharacterBody2D) GetPlatformWallLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody2D[16]) }
func (gdClass CharacterBody2D) GetMaxSlides() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody2D[17]) }
func (gdClass CharacterBody2D) SetMaxSlides(max_slides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[18], &max_slides) }
func (gdClass CharacterBody2D) GetFloorMaxAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody2D[19]) }
func (gdClass CharacterBody2D) SetFloorMaxAngle(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[20], &radians) }
func (gdClass CharacterBody2D) GetFloorSnapLength() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody2D[21]) }
func (gdClass CharacterBody2D) SetFloorSnapLength(floor_snap_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[22], &floor_snap_length) }
func (gdClass CharacterBody2D) GetWallMinSlideAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody2D[23]) }
func (gdClass CharacterBody2D) SetWallMinSlideAngle(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[24], &radians) }
func (gdClass CharacterBody2D) GetUpDirection() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[25]) }
func (gdClass CharacterBody2D) SetUpDirection(up_direction Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[26], &up_direction) }
func (gdClass CharacterBody2D) SetMotionMode(mode CharacterBody2DMotionMode)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[27], &mode) }
func (gdClass CharacterBody2D) GetMotionMode() CharacterBody2DMotionMode { return methodCall[CharacterBody2DMotionMode](gdClass.obj.get(), methodCharacterBody2D[28]) }
func (gdClass CharacterBody2D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody2DPlatformOnLeave)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody2D[29], &on_leave_apply_velocity) }
func (gdClass CharacterBody2D) GetPlatformOnLeave() CharacterBody2DPlatformOnLeave { return methodCall[CharacterBody2DPlatformOnLeave](gdClass.obj.get(), methodCharacterBody2D[30]) }
func (gdClass CharacterBody2D) IsOnFloor() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[31]) }
func (gdClass CharacterBody2D) IsOnFloorOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[32]) }
func (gdClass CharacterBody2D) IsOnCeiling() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[33]) }
func (gdClass CharacterBody2D) IsOnCeilingOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[34]) }
func (gdClass CharacterBody2D) IsOnWall() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[35]) }
func (gdClass CharacterBody2D) IsOnWallOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody2D[36]) }
func (gdClass CharacterBody2D) GetFloorNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[37]) }
func (gdClass CharacterBody2D) GetWallNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[38]) }
func (gdClass CharacterBody2D) GetLastMotion() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[39]) }
func (gdClass CharacterBody2D) GetPositionDelta() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[40]) }
func (gdClass CharacterBody2D) GetRealVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[41]) }
func (gdClass CharacterBody2D) GetFloorAngle(up_direction Vector2) float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody2D[42], &up_direction) }
func (gdClass CharacterBody2D) GetPlatformVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCharacterBody2D[43]) }
func (gdClass CharacterBody2D) GetSlideCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody2D[44]) }
func (gdClass CharacterBody2D) GetSlideCollision(slide_idx int64) KinematicCollision2D { return methodCall[KinematicCollision2D](gdClass.obj.get(), methodCharacterBody2D[45], &slide_idx) }
func (gdClass CharacterBody2D) GetLastSlideCollision() KinematicCollision2D { return methodCall[KinematicCollision2D](gdClass.obj.get(), methodCharacterBody2D[46]) }

type CharacterBody3DMotionMode int64

const (
	CharacterBody3DMotionModeGrounded CharacterBody3DMotionMode = 0
	CharacterBody3DMotionModeFloating CharacterBody3DMotionMode = 1
)

type CharacterBody3DPlatformOnLeave int64

const (
	CharacterBody3DPlatformOnLeaveAddVelocity CharacterBody3DPlatformOnLeave = 0
	CharacterBody3DPlatformOnLeaveAddUpwardVelocity CharacterBody3DPlatformOnLeave = 1
	CharacterBody3DPlatformOnLeaveDoNothing CharacterBody3DPlatformOnLeave = 2
)

type CharacterBody3D struct{self *CharacterBody3D; obj safeObject }
func NewCharacterBody3D(ctx Context, at *CharacterBody3D) CharacterBody3D { if at == nil { at = new(CharacterBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CharacterBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CharacterBody3D) owner() cObject { return gdClass.obj.get() }
func (CharacterBody3D) class() string { return "CharacterBody3D\000" }

func (gdClass CharacterBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D{obj:gdClass.obj} }

var methodCharacterBody3D [47]cMethodBind
func (gdClass CharacterBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsBody3D().virtual(rtype, name)
}
func (gdClass CharacterBody3D) MoveAndSlide() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[0]) }
func (gdClass CharacterBody3D) SetVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[1], &velocity) }
func (gdClass CharacterBody3D) GetVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[2]) }
func (gdClass CharacterBody3D) SetSafeMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[3], &margin) }
func (gdClass CharacterBody3D) GetSafeMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody3D[4]) }
func (gdClass CharacterBody3D) IsFloorStopOnSlopeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[5]) }
func (gdClass CharacterBody3D) SetFloorStopOnSlopeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[6], &enabled) }
func (gdClass CharacterBody3D) SetFloorConstantSpeedEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[7], &enabled) }
func (gdClass CharacterBody3D) IsFloorConstantSpeedEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[8]) }
func (gdClass CharacterBody3D) SetFloorBlockOnWallEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[9], &enabled) }
func (gdClass CharacterBody3D) IsFloorBlockOnWallEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[10]) }
func (gdClass CharacterBody3D) SetSlideOnCeilingEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[11], &enabled) }
func (gdClass CharacterBody3D) IsSlideOnCeilingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[12]) }
func (gdClass CharacterBody3D) SetPlatformFloorLayers(exclude_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[13], &exclude_layer) }
func (gdClass CharacterBody3D) GetPlatformFloorLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody3D[14]) }
func (gdClass CharacterBody3D) SetPlatformWallLayers(exclude_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[15], &exclude_layer) }
func (gdClass CharacterBody3D) GetPlatformWallLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody3D[16]) }
func (gdClass CharacterBody3D) GetMaxSlides() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody3D[17]) }
func (gdClass CharacterBody3D) SetMaxSlides(max_slides int64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[18], &max_slides) }
func (gdClass CharacterBody3D) GetFloorMaxAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody3D[19]) }
func (gdClass CharacterBody3D) SetFloorMaxAngle(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[20], &radians) }
func (gdClass CharacterBody3D) GetFloorSnapLength() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody3D[21]) }
func (gdClass CharacterBody3D) SetFloorSnapLength(floor_snap_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[22], &floor_snap_length) }
func (gdClass CharacterBody3D) GetWallMinSlideAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody3D[23]) }
func (gdClass CharacterBody3D) SetWallMinSlideAngle(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[24], &radians) }
func (gdClass CharacterBody3D) GetUpDirection() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[25]) }
func (gdClass CharacterBody3D) SetUpDirection(up_direction Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[26], &up_direction) }
func (gdClass CharacterBody3D) SetMotionMode(mode CharacterBody3DMotionMode)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[27], &mode) }
func (gdClass CharacterBody3D) GetMotionMode() CharacterBody3DMotionMode { return methodCall[CharacterBody3DMotionMode](gdClass.obj.get(), methodCharacterBody3D[28]) }
func (gdClass CharacterBody3D) SetPlatformOnLeave(on_leave_apply_velocity CharacterBody3DPlatformOnLeave)  { methodCall[struct{}](gdClass.obj.get(), methodCharacterBody3D[29], &on_leave_apply_velocity) }
func (gdClass CharacterBody3D) GetPlatformOnLeave() CharacterBody3DPlatformOnLeave { return methodCall[CharacterBody3DPlatformOnLeave](gdClass.obj.get(), methodCharacterBody3D[30]) }
func (gdClass CharacterBody3D) IsOnFloor() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[31]) }
func (gdClass CharacterBody3D) IsOnFloorOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[32]) }
func (gdClass CharacterBody3D) IsOnCeiling() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[33]) }
func (gdClass CharacterBody3D) IsOnCeilingOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[34]) }
func (gdClass CharacterBody3D) IsOnWall() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[35]) }
func (gdClass CharacterBody3D) IsOnWallOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCharacterBody3D[36]) }
func (gdClass CharacterBody3D) GetFloorNormal() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[37]) }
func (gdClass CharacterBody3D) GetWallNormal() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[38]) }
func (gdClass CharacterBody3D) GetLastMotion() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[39]) }
func (gdClass CharacterBody3D) GetPositionDelta() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[40]) }
func (gdClass CharacterBody3D) GetRealVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[41]) }
func (gdClass CharacterBody3D) GetFloorAngle(up_direction Vector3) float64 { return methodCall[float64](gdClass.obj.get(), methodCharacterBody3D[42], &up_direction) }
func (gdClass CharacterBody3D) GetPlatformVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCharacterBody3D[43]) }
func (gdClass CharacterBody3D) GetSlideCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCharacterBody3D[44]) }
func (gdClass CharacterBody3D) GetSlideCollision(slide_idx int64) KinematicCollision3D { return methodCall[KinematicCollision3D](gdClass.obj.get(), methodCharacterBody3D[45], &slide_idx) }
func (gdClass CharacterBody3D) GetLastSlideCollision() KinematicCollision3D { return methodCall[KinematicCollision3D](gdClass.obj.get(), methodCharacterBody3D[46]) }

type CheckBox struct{self *CheckBox; obj safeObject }
func NewCheckBox(ctx Context, at *CheckBox) CheckBox { if at == nil { at = new(CheckBox) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CheckBox) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CheckBox) owner() cObject { return gdClass.obj.get() }
func (CheckBox) class() string { return "CheckBox\000" }

func (gdClass CheckBox) Button() Button { return Button{obj:gdClass.obj} }

func (gdClass CheckBox) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Button().virtual(rtype, name)
}

type CheckButton struct{self *CheckButton; obj safeObject }
func NewCheckButton(ctx Context, at *CheckButton) CheckButton { if at == nil { at = new(CheckButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CheckButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CheckButton) owner() cObject { return gdClass.obj.get() }
func (CheckButton) class() string { return "CheckButton\000" }

func (gdClass CheckButton) Button() Button { return Button{obj:gdClass.obj} }

func (gdClass CheckButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Button().virtual(rtype, name)
}

type CircleShape2D struct{self *CircleShape2D; obj safeObject }
func NewCircleShape2D(ctx Context, at *CircleShape2D) CircleShape2D { if at == nil { at = new(CircleShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CircleShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CircleShape2D) owner() cObject { return gdClass.obj.get() }
func (CircleShape2D) class() string { return "CircleShape2D\000" }

func (gdClass CircleShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodCircleShape2D [2]cMethodBind
func (gdClass CircleShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass CircleShape2D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCircleShape2D[0], &radius) }
func (gdClass CircleShape2D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCircleShape2D[1]) }
var ClassDB ClassDBSingleton

type ClassDBSingleton struct{self *ClassDBSingleton; obj safeObject }
func NewClassDBSingleton(ctx Context, at *ClassDBSingleton) ClassDBSingleton { if at == nil { at = new(ClassDBSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ClassDBSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ClassDBSingleton) owner() cObject { return gdClass.obj.get() }
func (ClassDBSingleton) class() string { return "ClassDBSingleton\000" }

func (gdClass ClassDBSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodClassDBSingleton [23]cMethodBind
func (gdClass ClassDBSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass ClassDBSingleton) GetClassList() []string { return methodCall[[]string](gdClass.obj.get(), methodClassDBSingleton[0]) }
func (gdClass ClassDBSingleton) GetInheritersFromClass(class Name) []string { return methodCall[[]string](gdClass.obj.get(), methodClassDBSingleton[1], &class) }
func (gdClass ClassDBSingleton) GetParentClass(class Name) Name { return methodCall[Name](gdClass.obj.get(), methodClassDBSingleton[2], &class) }
func (gdClass ClassDBSingleton) ClassExists(class Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[3], &class) }
func (gdClass ClassDBSingleton) IsParentClass(class Name, inherits Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[4], &class, &inherits) }
func (gdClass ClassDBSingleton) CanInstantiate(class Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[5], &class) }
func (gdClass ClassDBSingleton) Instantiate(class Name) any { return methodCall[any](gdClass.obj.get(), methodClassDBSingleton[6], &class) }
func (gdClass ClassDBSingleton) ClassHasSignal(class Name, signal Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[7], &class, &signal) }
func (gdClass ClassDBSingleton) ClassGetSignal(class Name, signal Name) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodClassDBSingleton[8], &class, &signal) }
func (gdClass ClassDBSingleton) ClassGetSignalList(class Name, no_inheritance bool) Array { return methodCall[Array](gdClass.obj.get(), methodClassDBSingleton[9], &class, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetPropertyList(class Name, no_inheritance bool) Array { return methodCall[Array](gdClass.obj.get(), methodClassDBSingleton[10], &class, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetProperty(object Object, property Name) any { return methodCall[any](gdClass.obj.get(), methodClassDBSingleton[11], &object, &property) }
func (gdClass ClassDBSingleton) ClassSetProperty(object Object, property Name, value any) int64 { return methodCall[int64](gdClass.obj.get(), methodClassDBSingleton[12], &object, &property, &value) }
func (gdClass ClassDBSingleton) ClassHasMethod(class Name, method Name, no_inheritance bool) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[13], &class, &method, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetMethodList(class Name, no_inheritance bool) Array { return methodCall[Array](gdClass.obj.get(), methodClassDBSingleton[14], &class, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetIntegerConstantList(class Name, no_inheritance bool) []string { return methodCall[[]string](gdClass.obj.get(), methodClassDBSingleton[15], &class, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassHasIntegerConstant(class Name, name Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[16], &class, &name) }
func (gdClass ClassDBSingleton) ClassGetIntegerConstant(class Name, name Name) int64 { return methodCall[int64](gdClass.obj.get(), methodClassDBSingleton[17], &class, &name) }
func (gdClass ClassDBSingleton) ClassHasEnum(class Name, name Name, no_inheritance bool) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[18], &class, &name, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetEnumList(class Name, no_inheritance bool) []string { return methodCall[[]string](gdClass.obj.get(), methodClassDBSingleton[19], &class, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetEnumConstants(class Name, enum Name, no_inheritance bool) []string { return methodCall[[]string](gdClass.obj.get(), methodClassDBSingleton[20], &class, &enum, &no_inheritance) }
func (gdClass ClassDBSingleton) ClassGetIntegerConstantEnum(class Name, name Name, no_inheritance bool) Name { return methodCall[Name](gdClass.obj.get(), methodClassDBSingleton[21], &class, &name, &no_inheritance) }
func (gdClass ClassDBSingleton) IsClassEnabled(class Name) bool { return methodCall[bool](gdClass.obj.get(), methodClassDBSingleton[22], &class) }

type CodeEditCodeCompletionKind int64

const (
	CodeEditKindClass CodeEditCodeCompletionKind = 0
	CodeEditKindFunction CodeEditCodeCompletionKind = 1
	CodeEditKindSignal CodeEditCodeCompletionKind = 2
	CodeEditKindVariable CodeEditCodeCompletionKind = 3
	CodeEditKindMember CodeEditCodeCompletionKind = 4
	CodeEditKindEnum CodeEditCodeCompletionKind = 5
	CodeEditKindConstant CodeEditCodeCompletionKind = 6
	CodeEditKindNodePath CodeEditCodeCompletionKind = 7
	CodeEditKindFilePath CodeEditCodeCompletionKind = 8
	CodeEditKindPlainText CodeEditCodeCompletionKind = 9
)

type CodeEdit struct{self *CodeEdit; obj safeObject }
func NewCodeEdit(ctx Context, at *CodeEdit) CodeEdit { if at == nil { at = new(CodeEdit) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CodeEdit) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CodeEdit) owner() cObject { return gdClass.obj.get() }
func (CodeEdit) class() string { return "CodeEdit\000" }

func (gdClass CodeEdit) TextEdit() TextEdit { return TextEdit{obj:gdClass.obj} }

var methodCodeEdit [96]cMethodBind
func (gdClass CodeEdit) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_confirm_code_completion":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConfirmCodeCompletion(replace bool)  }{}).Elem()) {
			return rtype.MethodByName(`ConfirmCodeCompletion`)
		}
		return
	case "_request_code_completion":
		if rtype.Implements(reflect.TypeOf([0]interface{ RequestCodeCompletion(force bool)  }{}).Elem()) {
			return rtype.MethodByName(`RequestCodeCompletion`)
		}
		return
	case "_filter_code_completion_candidates":
		if rtype.Implements(reflect.TypeOf([0]interface{ FilterCodeCompletionCandidates(candidates Array) Array }{}).Elem()) {
			return rtype.MethodByName(`FilterCodeCompletionCandidates`)
		}
		return
	}
	return gdClass.TextEdit().virtual(rtype, name)
}
func (gdClass CodeEdit) SetIndentSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[0], &size) }
func (gdClass CodeEdit) GetIndentSize() int64 { return methodCall[int64](gdClass.obj.get(), methodCodeEdit[1]) }
func (gdClass CodeEdit) SetIndentUsingSpaces(use_spaces bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[2], &use_spaces) }
func (gdClass CodeEdit) IsIndentUsingSpaces() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[3]) }
func (gdClass CodeEdit) SetAutoIndentEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[4], &enable) }
func (gdClass CodeEdit) IsAutoIndentEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[5]) }
func (gdClass CodeEdit) SetAutoIndentPrefixes(prefixes Array)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[6], &prefixes) }
func (gdClass CodeEdit) GetAutoIndentPrefixes() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[7]) }
func (gdClass CodeEdit) DoIndent()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[8]) }
func (gdClass CodeEdit) DoUnindent()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[9]) }
func (gdClass CodeEdit) IndentLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[10]) }
func (gdClass CodeEdit) UnindentLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[11]) }
func (gdClass CodeEdit) SetAutoBraceCompletionEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[12], &enable) }
func (gdClass CodeEdit) IsAutoBraceCompletionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[13]) }
func (gdClass CodeEdit) SetHighlightMatchingBracesEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[14], &enable) }
func (gdClass CodeEdit) IsHighlightMatchingBracesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[15]) }
func (gdClass CodeEdit) AddAutoBraceCompletionPair(start_key string, end_key string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[16], &start_key, &end_key) }
func (gdClass CodeEdit) SetAutoBraceCompletionPairs(pairs Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[17], &pairs) }
func (gdClass CodeEdit) GetAutoBraceCompletionPairs() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCodeEdit[18]) }
func (gdClass CodeEdit) HasAutoBraceCompletionOpenKey(open_key string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[19], &open_key) }
func (gdClass CodeEdit) HasAutoBraceCompletionCloseKey(close_key string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[20], &close_key) }
func (gdClass CodeEdit) GetAutoBraceCompletionCloseKey(open_key string) string { return methodCall[string](gdClass.obj.get(), methodCodeEdit[21], &open_key) }
func (gdClass CodeEdit) SetDrawBreakpointsGutter(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[22], &enable) }
func (gdClass CodeEdit) IsDrawingBreakpointsGutter() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[23]) }
func (gdClass CodeEdit) SetDrawBookmarksGutter(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[24], &enable) }
func (gdClass CodeEdit) IsDrawingBookmarksGutter() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[25]) }
func (gdClass CodeEdit) SetDrawExecutingLinesGutter(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[26], &enable) }
func (gdClass CodeEdit) IsDrawingExecutingLinesGutter() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[27]) }
func (gdClass CodeEdit) SetLineAsBreakpoint(line int64, breakpointed bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[28], &line, &breakpointed) }
func (gdClass CodeEdit) IsLineBreakpointed(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[29], &line) }
func (gdClass CodeEdit) ClearBreakpointedLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[30]) }
func (gdClass CodeEdit) GetBreakpointedLines() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodCodeEdit[31]) }
func (gdClass CodeEdit) SetLineAsBookmarked(line int64, bookmarked bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[32], &line, &bookmarked) }
func (gdClass CodeEdit) IsLineBookmarked(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[33], &line) }
func (gdClass CodeEdit) ClearBookmarkedLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[34]) }
func (gdClass CodeEdit) GetBookmarkedLines() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodCodeEdit[35]) }
func (gdClass CodeEdit) SetLineAsExecuting(line int64, executing bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[36], &line, &executing) }
func (gdClass CodeEdit) IsLineExecuting(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[37], &line) }
func (gdClass CodeEdit) ClearExecutingLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[38]) }
func (gdClass CodeEdit) GetExecutingLines() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodCodeEdit[39]) }
func (gdClass CodeEdit) SetDrawLineNumbers(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[40], &enable) }
func (gdClass CodeEdit) IsDrawLineNumbersEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[41]) }
func (gdClass CodeEdit) SetLineNumbersZeroPadded(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[42], &enable) }
func (gdClass CodeEdit) IsLineNumbersZeroPadded() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[43]) }
func (gdClass CodeEdit) SetDrawFoldGutter(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[44], &enable) }
func (gdClass CodeEdit) IsDrawingFoldGutter() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[45]) }
func (gdClass CodeEdit) SetLineFoldingEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[46], &enabled) }
func (gdClass CodeEdit) IsLineFoldingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[47]) }
func (gdClass CodeEdit) CanFoldLine(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[48], &line) }
func (gdClass CodeEdit) FoldLine(line int64)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[49], &line) }
func (gdClass CodeEdit) UnfoldLine(line int64)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[50], &line) }
func (gdClass CodeEdit) FoldAllLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[51]) }
func (gdClass CodeEdit) UnfoldAllLines()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[52]) }
func (gdClass CodeEdit) ToggleFoldableLine(line int64)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[53], &line) }
func (gdClass CodeEdit) IsLineFolded(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[54], &line) }
func (gdClass CodeEdit) GetFoldedLines() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[55]) }
func (gdClass CodeEdit) AddStringDelimiter(start_key string, end_key string, line_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[56], &start_key, &end_key, &line_only) }
func (gdClass CodeEdit) RemoveStringDelimiter(start_key string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[57], &start_key) }
func (gdClass CodeEdit) HasStringDelimiter(start_key string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[58], &start_key) }
func (gdClass CodeEdit) SetStringDelimiters(string_delimiters Array)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[59], &string_delimiters) }
func (gdClass CodeEdit) ClearStringDelimiters()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[60]) }
func (gdClass CodeEdit) GetStringDelimiters() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[61]) }
func (gdClass CodeEdit) IsInString(line int64, column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCodeEdit[62], &line, &column) }
func (gdClass CodeEdit) AddCommentDelimiter(start_key string, end_key string, line_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[63], &start_key, &end_key, &line_only) }
func (gdClass CodeEdit) RemoveCommentDelimiter(start_key string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[64], &start_key) }
func (gdClass CodeEdit) HasCommentDelimiter(start_key string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[65], &start_key) }
func (gdClass CodeEdit) SetCommentDelimiters(comment_delimiters Array)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[66], &comment_delimiters) }
func (gdClass CodeEdit) ClearCommentDelimiters()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[67]) }
func (gdClass CodeEdit) GetCommentDelimiters() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[68]) }
func (gdClass CodeEdit) IsInComment(line int64, column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCodeEdit[69], &line, &column) }
func (gdClass CodeEdit) GetDelimiterStartKey(delimiter_index int64) string { return methodCall[string](gdClass.obj.get(), methodCodeEdit[70], &delimiter_index) }
func (gdClass CodeEdit) GetDelimiterEndKey(delimiter_index int64) string { return methodCall[string](gdClass.obj.get(), methodCodeEdit[71], &delimiter_index) }
func (gdClass CodeEdit) GetDelimiterStartPosition(line int64, column int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCodeEdit[72], &line, &column) }
func (gdClass CodeEdit) GetDelimiterEndPosition(line int64, column int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCodeEdit[73], &line, &column) }
func (gdClass CodeEdit) SetCodeHint(code_hint string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[74], &code_hint) }
func (gdClass CodeEdit) SetCodeHintDrawBelow(draw_below bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[75], &draw_below) }
func (gdClass CodeEdit) GetTextForCodeCompletion() string { return methodCall[string](gdClass.obj.get(), methodCodeEdit[76]) }
func (gdClass CodeEdit) RequestCodeCompletion(force bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[77], &force) }
func (gdClass CodeEdit) AddCodeCompletionOption(atype CodeEditCodeCompletionKind, display_text string, insert_text string, text_color Color, icon Resource, value any)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[78], &atype, &display_text, &insert_text, &text_color, &icon, &value) }
func (gdClass CodeEdit) UpdateCodeCompletionOptions(force bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[79], &force) }
func (gdClass CodeEdit) GetCodeCompletionOptions() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[80]) }
func (gdClass CodeEdit) GetCodeCompletionOption(index int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCodeEdit[81], &index) }
func (gdClass CodeEdit) GetCodeCompletionSelectedIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodCodeEdit[82]) }
func (gdClass CodeEdit) SetCodeCompletionSelectedIndex(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[83], &index) }
func (gdClass CodeEdit) ConfirmCodeCompletion(replace bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[84], &replace) }
func (gdClass CodeEdit) CancelCodeCompletion()  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[85]) }
func (gdClass CodeEdit) SetCodeCompletionEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[86], &enable) }
func (gdClass CodeEdit) IsCodeCompletionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[87]) }
func (gdClass CodeEdit) SetCodeCompletionPrefixes(prefixes Array)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[88], &prefixes) }
func (gdClass CodeEdit) GetCodeComletionPrefixes() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[89]) }
func (gdClass CodeEdit) SetLineLengthGuidelines(guideline_columns Array)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[90], &guideline_columns) }
func (gdClass CodeEdit) GetLineLengthGuidelines() Array { return methodCall[Array](gdClass.obj.get(), methodCodeEdit[91]) }
func (gdClass CodeEdit) SetSymbolLookupOnClickEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[92], &enable) }
func (gdClass CodeEdit) IsSymbolLookupOnClickEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCodeEdit[93]) }
func (gdClass CodeEdit) GetTextForSymbolLookup() string { return methodCall[string](gdClass.obj.get(), methodCodeEdit[94]) }
func (gdClass CodeEdit) SetSymbolLookupWordAsValid(valid bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeEdit[95], &valid) }

type CodeHighlighter struct{self *CodeHighlighter; obj safeObject }
func NewCodeHighlighter(ctx Context, at *CodeHighlighter) CodeHighlighter { if at == nil { at = new(CodeHighlighter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CodeHighlighter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CodeHighlighter) owner() cObject { return gdClass.obj.get() }
func (CodeHighlighter) class() string { return "CodeHighlighter\000" }

func (gdClass CodeHighlighter) SyntaxHighlighter() SyntaxHighlighter { return SyntaxHighlighter{obj:gdClass.obj} }

var methodCodeHighlighter [28]cMethodBind
func (gdClass CodeHighlighter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SyntaxHighlighter().virtual(rtype, name)
}
func (gdClass CodeHighlighter) AddKeywordColor(keyword string, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[0], &keyword, &color) }
func (gdClass CodeHighlighter) RemoveKeywordColor(keyword string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[1], &keyword) }
func (gdClass CodeHighlighter) HasKeywordColor(keyword string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeHighlighter[2], &keyword) }
func (gdClass CodeHighlighter) GetKeywordColor(keyword string) Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[3], &keyword) }
func (gdClass CodeHighlighter) SetKeywordColors(keywords Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[4], &keywords) }
func (gdClass CodeHighlighter) ClearKeywordColors()  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[5]) }
func (gdClass CodeHighlighter) GetKeywordColors() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCodeHighlighter[6]) }
func (gdClass CodeHighlighter) AddMemberKeywordColor(member_keyword string, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[7], &member_keyword, &color) }
func (gdClass CodeHighlighter) RemoveMemberKeywordColor(member_keyword string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[8], &member_keyword) }
func (gdClass CodeHighlighter) HasMemberKeywordColor(member_keyword string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeHighlighter[9], &member_keyword) }
func (gdClass CodeHighlighter) GetMemberKeywordColor(member_keyword string) Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[10], &member_keyword) }
func (gdClass CodeHighlighter) SetMemberKeywordColors(member_keyword Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[11], &member_keyword) }
func (gdClass CodeHighlighter) ClearMemberKeywordColors()  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[12]) }
func (gdClass CodeHighlighter) GetMemberKeywordColors() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCodeHighlighter[13]) }
func (gdClass CodeHighlighter) AddColorRegion(start_key string, end_key string, color Color, line_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[14], &start_key, &end_key, &color, &line_only) }
func (gdClass CodeHighlighter) RemoveColorRegion(start_key string)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[15], &start_key) }
func (gdClass CodeHighlighter) HasColorRegion(start_key string) bool { return methodCall[bool](gdClass.obj.get(), methodCodeHighlighter[16], &start_key) }
func (gdClass CodeHighlighter) SetColorRegions(color_regions Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[17], &color_regions) }
func (gdClass CodeHighlighter) ClearColorRegions()  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[18]) }
func (gdClass CodeHighlighter) GetColorRegions() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodCodeHighlighter[19]) }
func (gdClass CodeHighlighter) SetFunctionColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[20], &color) }
func (gdClass CodeHighlighter) GetFunctionColor() Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[21]) }
func (gdClass CodeHighlighter) SetNumberColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[22], &color) }
func (gdClass CodeHighlighter) GetNumberColor() Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[23]) }
func (gdClass CodeHighlighter) SetSymbolColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[24], &color) }
func (gdClass CodeHighlighter) GetSymbolColor() Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[25]) }
func (gdClass CodeHighlighter) SetMemberVariableColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodCodeHighlighter[26], &color) }
func (gdClass CodeHighlighter) GetMemberVariableColor() Color { return methodCall[Color](gdClass.obj.get(), methodCodeHighlighter[27]) }

type CollisionObject2DDisableMode int64

const (
	CollisionObject2DDisableModeRemove CollisionObject2DDisableMode = 0
	CollisionObject2DDisableModeMakeStatic CollisionObject2DDisableMode = 1
	CollisionObject2DDisableModeKeepActive CollisionObject2DDisableMode = 2
)

type CollisionObject2D struct{self *CollisionObject2D; obj safeObject }
func NewCollisionObject2D(ctx Context, at *CollisionObject2D) CollisionObject2D { if at == nil { at = new(CollisionObject2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionObject2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionObject2D) owner() cObject { return gdClass.obj.get() }
func (CollisionObject2D) class() string { return "CollisionObject2D\000" }

func (gdClass CollisionObject2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCollisionObject2D [34]cMethodBind
func (gdClass CollisionObject2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_input_event":
		if rtype.Implements(reflect.TypeOf([0]interface{ InputEvent(viewport Viewport, event InputEvent, shape_idx int64)  }{}).Elem()) {
			return rtype.MethodByName(`InputEvent`)
		}
		return
	}
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CollisionObject2D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodCollisionObject2D[0]) }
func (gdClass CollisionObject2D) SetCollisionLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[1], &layer) }
func (gdClass CollisionObject2D) GetCollisionLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[2]) }
func (gdClass CollisionObject2D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[3], &mask) }
func (gdClass CollisionObject2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[4]) }
func (gdClass CollisionObject2D) SetCollisionLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[5], &layer_number, &value) }
func (gdClass CollisionObject2D) GetCollisionLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject2D[6], &layer_number) }
func (gdClass CollisionObject2D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[7], &layer_number, &value) }
func (gdClass CollisionObject2D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject2D[8], &layer_number) }
func (gdClass CollisionObject2D) SetCollisionPriority(priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[9], &priority) }
func (gdClass CollisionObject2D) GetCollisionPriority() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionObject2D[10]) }
func (gdClass CollisionObject2D) SetDisableMode(mode CollisionObject2DDisableMode)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[11], &mode) }
func (gdClass CollisionObject2D) GetDisableMode() CollisionObject2DDisableMode { return methodCall[CollisionObject2DDisableMode](gdClass.obj.get(), methodCollisionObject2D[12]) }
func (gdClass CollisionObject2D) SetPickable(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[13], &enabled) }
func (gdClass CollisionObject2D) IsPickable() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject2D[14]) }
func (gdClass CollisionObject2D) CreateShapeOwner(owner Object) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[15], &owner) }
func (gdClass CollisionObject2D) RemoveShapeOwner(owner_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[16], &owner_id) }
func (gdClass CollisionObject2D) GetShapeOwners() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodCollisionObject2D[17]) }
func (gdClass CollisionObject2D) ShapeOwnerSetTransform(owner_id int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[18], &owner_id, &transform) }
func (gdClass CollisionObject2D) ShapeOwnerGetTransform(owner_id int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodCollisionObject2D[19], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetOwner(owner_id int64) Object { return methodCall[Object](gdClass.obj.get(), methodCollisionObject2D[20], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[21], &owner_id, &disabled) }
func (gdClass CollisionObject2D) IsShapeOwnerDisabled(owner_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject2D[22], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollision(owner_id int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[23], &owner_id, &enable) }
func (gdClass CollisionObject2D) IsShapeOwnerOneWayCollisionEnabled(owner_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject2D[24], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerSetOneWayCollisionMargin(owner_id int64, margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[25], &owner_id, &margin) }
func (gdClass CollisionObject2D) GetShapeOwnerOneWayCollisionMargin(owner_id int64) float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionObject2D[26], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerAddShape(owner_id int64, shape Shape2D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[27], &owner_id, &shape) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[28], &owner_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape2D { return methodCall[Shape2D](gdClass.obj.get(), methodCollisionObject2D[29], &owner_id, &shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[30], &owner_id, &shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[31], &owner_id, &shape_id) }
func (gdClass CollisionObject2D) ShapeOwnerClearShapes(owner_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject2D[32], &owner_id) }
func (gdClass CollisionObject2D) ShapeFindOwner(shape_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject2D[33], &shape_index) }

type CollisionObject3DDisableMode int64

const (
	CollisionObject3DDisableModeRemove CollisionObject3DDisableMode = 0
	CollisionObject3DDisableModeMakeStatic CollisionObject3DDisableMode = 1
	CollisionObject3DDisableModeKeepActive CollisionObject3DDisableMode = 2
)

type CollisionObject3D struct{self *CollisionObject3D; obj safeObject }
func NewCollisionObject3D(ctx Context, at *CollisionObject3D) CollisionObject3D { if at == nil { at = new(CollisionObject3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionObject3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionObject3D) owner() cObject { return gdClass.obj.get() }
func (CollisionObject3D) class() string { return "CollisionObject3D\000" }

func (gdClass CollisionObject3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodCollisionObject3D [32]cMethodBind
func (gdClass CollisionObject3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_input_event":
		if rtype.Implements(reflect.TypeOf([0]interface{ InputEvent(camera Camera3D, event InputEvent, position Vector3, normal Vector3, shape_idx int64)  }{}).Elem()) {
			return rtype.MethodByName(`InputEvent`)
		}
		return
	}
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass CollisionObject3D) SetCollisionLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[0], &layer) }
func (gdClass CollisionObject3D) GetCollisionLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[1]) }
func (gdClass CollisionObject3D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[2], &mask) }
func (gdClass CollisionObject3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[3]) }
func (gdClass CollisionObject3D) SetCollisionLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[4], &layer_number, &value) }
func (gdClass CollisionObject3D) GetCollisionLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject3D[5], &layer_number) }
func (gdClass CollisionObject3D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[6], &layer_number, &value) }
func (gdClass CollisionObject3D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject3D[7], &layer_number) }
func (gdClass CollisionObject3D) SetCollisionPriority(priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[8], &priority) }
func (gdClass CollisionObject3D) GetCollisionPriority() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionObject3D[9]) }
func (gdClass CollisionObject3D) SetDisableMode(mode CollisionObject3DDisableMode)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[10], &mode) }
func (gdClass CollisionObject3D) GetDisableMode() CollisionObject3DDisableMode { return methodCall[CollisionObject3DDisableMode](gdClass.obj.get(), methodCollisionObject3D[11]) }
func (gdClass CollisionObject3D) SetRayPickable(ray_pickable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[12], &ray_pickable) }
func (gdClass CollisionObject3D) IsRayPickable() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject3D[13]) }
func (gdClass CollisionObject3D) SetCaptureInputOnDrag(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[14], &enable) }
func (gdClass CollisionObject3D) GetCaptureInputOnDrag() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject3D[15]) }
func (gdClass CollisionObject3D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodCollisionObject3D[16]) }
func (gdClass CollisionObject3D) CreateShapeOwner(owner Object) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[17], &owner) }
func (gdClass CollisionObject3D) RemoveShapeOwner(owner_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[18], &owner_id) }
func (gdClass CollisionObject3D) GetShapeOwners() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodCollisionObject3D[19]) }
func (gdClass CollisionObject3D) ShapeOwnerSetTransform(owner_id int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[20], &owner_id, &transform) }
func (gdClass CollisionObject3D) ShapeOwnerGetTransform(owner_id int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodCollisionObject3D[21], &owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetOwner(owner_id int64) Object { return methodCall[Object](gdClass.obj.get(), methodCollisionObject3D[22], &owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerSetDisabled(owner_id int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[23], &owner_id, &disabled) }
func (gdClass CollisionObject3D) IsShapeOwnerDisabled(owner_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodCollisionObject3D[24], &owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerAddShape(owner_id int64, shape Shape3D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[25], &owner_id, &shape) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeCount(owner_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[26], &owner_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShape(owner_id int64, shape_id int64) Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodCollisionObject3D[27], &owner_id, &shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerGetShapeIndex(owner_id int64, shape_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[28], &owner_id, &shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerRemoveShape(owner_id int64, shape_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[29], &owner_id, &shape_id) }
func (gdClass CollisionObject3D) ShapeOwnerClearShapes(owner_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionObject3D[30], &owner_id) }
func (gdClass CollisionObject3D) ShapeFindOwner(shape_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodCollisionObject3D[31], &shape_index) }

type CollisionPolygon2DBuildMode int64

const (
	CollisionPolygon2DBuildSolids CollisionPolygon2DBuildMode = 0
	CollisionPolygon2DBuildSegments CollisionPolygon2DBuildMode = 1
)

type CollisionPolygon2D struct{self *CollisionPolygon2D; obj safeObject }
func NewCollisionPolygon2D(ctx Context, at *CollisionPolygon2D) CollisionPolygon2D { if at == nil { at = new(CollisionPolygon2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionPolygon2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionPolygon2D) owner() cObject { return gdClass.obj.get() }
func (CollisionPolygon2D) class() string { return "CollisionPolygon2D\000" }

func (gdClass CollisionPolygon2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCollisionPolygon2D [10]cMethodBind
func (gdClass CollisionPolygon2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CollisionPolygon2D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon2D[0], &polygon) }
func (gdClass CollisionPolygon2D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCollisionPolygon2D[1]) }
func (gdClass CollisionPolygon2D) SetBuildMode(build_mode CollisionPolygon2DBuildMode)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon2D[2], &build_mode) }
func (gdClass CollisionPolygon2D) GetBuildMode() CollisionPolygon2DBuildMode { return methodCall[CollisionPolygon2DBuildMode](gdClass.obj.get(), methodCollisionPolygon2D[3]) }
func (gdClass CollisionPolygon2D) SetDisabled(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon2D[4], &disabled) }
func (gdClass CollisionPolygon2D) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionPolygon2D[5]) }
func (gdClass CollisionPolygon2D) SetOneWayCollision(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon2D[6], &enabled) }
func (gdClass CollisionPolygon2D) IsOneWayCollisionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionPolygon2D[7]) }
func (gdClass CollisionPolygon2D) SetOneWayCollisionMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon2D[8], &margin) }
func (gdClass CollisionPolygon2D) GetOneWayCollisionMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionPolygon2D[9]) }

type CollisionPolygon3D struct{self *CollisionPolygon3D; obj safeObject }
func NewCollisionPolygon3D(ctx Context, at *CollisionPolygon3D) CollisionPolygon3D { if at == nil { at = new(CollisionPolygon3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionPolygon3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionPolygon3D) owner() cObject { return gdClass.obj.get() }
func (CollisionPolygon3D) class() string { return "CollisionPolygon3D\000" }

func (gdClass CollisionPolygon3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodCollisionPolygon3D [8]cMethodBind
func (gdClass CollisionPolygon3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass CollisionPolygon3D) SetDepth(depth float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon3D[0], &depth) }
func (gdClass CollisionPolygon3D) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionPolygon3D[1]) }
func (gdClass CollisionPolygon3D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon3D[2], &polygon) }
func (gdClass CollisionPolygon3D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCollisionPolygon3D[3]) }
func (gdClass CollisionPolygon3D) SetDisabled(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon3D[4], &disabled) }
func (gdClass CollisionPolygon3D) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionPolygon3D[5]) }
func (gdClass CollisionPolygon3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionPolygon3D[6], &margin) }
func (gdClass CollisionPolygon3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionPolygon3D[7]) }

type CollisionShape2D struct{self *CollisionShape2D; obj safeObject }
func NewCollisionShape2D(ctx Context, at *CollisionShape2D) CollisionShape2D { if at == nil { at = new(CollisionShape2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionShape2D) owner() cObject { return gdClass.obj.get() }
func (CollisionShape2D) class() string { return "CollisionShape2D\000" }

func (gdClass CollisionShape2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodCollisionShape2D [8]cMethodBind
func (gdClass CollisionShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass CollisionShape2D) SetShape(shape Shape2D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape2D[0], &shape) }
func (gdClass CollisionShape2D) GetShape() Shape2D { return methodCall[Shape2D](gdClass.obj.get(), methodCollisionShape2D[1]) }
func (gdClass CollisionShape2D) SetDisabled(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape2D[2], &disabled) }
func (gdClass CollisionShape2D) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionShape2D[3]) }
func (gdClass CollisionShape2D) SetOneWayCollision(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape2D[4], &enabled) }
func (gdClass CollisionShape2D) IsOneWayCollisionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionShape2D[5]) }
func (gdClass CollisionShape2D) SetOneWayCollisionMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape2D[6], &margin) }
func (gdClass CollisionShape2D) GetOneWayCollisionMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodCollisionShape2D[7]) }

type CollisionShape3D struct{self *CollisionShape3D; obj safeObject }
func NewCollisionShape3D(ctx Context, at *CollisionShape3D) CollisionShape3D { if at == nil { at = new(CollisionShape3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass CollisionShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CollisionShape3D) owner() cObject { return gdClass.obj.get() }
func (CollisionShape3D) class() string { return "CollisionShape3D\000" }

func (gdClass CollisionShape3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodCollisionShape3D [6]cMethodBind
func (gdClass CollisionShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass CollisionShape3D) ResourceChanged(resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape3D[0], &resource) }
func (gdClass CollisionShape3D) SetShape(shape Shape3D)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape3D[1], &shape) }
func (gdClass CollisionShape3D) GetShape() Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodCollisionShape3D[2]) }
func (gdClass CollisionShape3D) SetDisabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape3D[3], &enable) }
func (gdClass CollisionShape3D) IsDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodCollisionShape3D[4]) }
func (gdClass CollisionShape3D) MakeConvexFromSiblings()  { methodCall[struct{}](gdClass.obj.get(), methodCollisionShape3D[5]) }

type ColorPickerColorModeType int64

const (
	ColorPickerModeRgb ColorPickerColorModeType = 0
	ColorPickerModeHsv ColorPickerColorModeType = 1
	ColorPickerModeRaw ColorPickerColorModeType = 2
	ColorPickerModeOkhsl ColorPickerColorModeType = 3
)

type ColorPickerPickerShapeType int64

const (
	ColorPickerShapeHsvRectangle ColorPickerPickerShapeType = 0
	ColorPickerShapeHsvWheel ColorPickerPickerShapeType = 1
	ColorPickerShapeVhsCircle ColorPickerPickerShapeType = 2
	ColorPickerShapeOkhslCircle ColorPickerPickerShapeType = 3
)

type ColorPicker struct{self *ColorPicker; obj safeObject }
func NewColorPicker(ctx Context, at *ColorPicker) ColorPicker { if at == nil { at = new(ColorPicker) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ColorPicker) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ColorPicker) owner() cObject { return gdClass.obj.get() }
func (ColorPicker) class() string { return "ColorPicker\000" }

func (gdClass ColorPicker) BoxContainer() BoxContainer { return BoxContainer{obj:gdClass.obj} }

var methodColorPicker [17]cMethodBind
func (gdClass ColorPicker) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BoxContainer().virtual(rtype, name)
}
func (gdClass ColorPicker) SetPickColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[0], &color) }
func (gdClass ColorPicker) GetPickColor() Color { return methodCall[Color](gdClass.obj.get(), methodColorPicker[1]) }
func (gdClass ColorPicker) SetDeferredMode(mode bool)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[2], &mode) }
func (gdClass ColorPicker) IsDeferredMode() bool { return methodCall[bool](gdClass.obj.get(), methodColorPicker[3]) }
func (gdClass ColorPicker) SetColorMode(color_mode ColorPickerColorModeType)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[4], &color_mode) }
func (gdClass ColorPicker) GetColorMode() ColorPickerColorModeType { return methodCall[ColorPickerColorModeType](gdClass.obj.get(), methodColorPicker[5]) }
func (gdClass ColorPicker) SetEditAlpha(show bool)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[6], &show) }
func (gdClass ColorPicker) IsEditingAlpha() bool { return methodCall[bool](gdClass.obj.get(), methodColorPicker[7]) }
func (gdClass ColorPicker) SetPresetsEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[8], &enabled) }
func (gdClass ColorPicker) ArePresetsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodColorPicker[9]) }
func (gdClass ColorPicker) SetPresetsVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[10], &visible) }
func (gdClass ColorPicker) ArePresetsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodColorPicker[11]) }
func (gdClass ColorPicker) AddPreset(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[12], &color) }
func (gdClass ColorPicker) ErasePreset(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[13], &color) }
func (gdClass ColorPicker) GetPresets() []Color { return methodCall[[]Color](gdClass.obj.get(), methodColorPicker[14]) }
func (gdClass ColorPicker) SetPickerShape(shape ColorPickerPickerShapeType)  { methodCall[struct{}](gdClass.obj.get(), methodColorPicker[15], &shape) }
func (gdClass ColorPicker) GetPickerShape() ColorPickerPickerShapeType { return methodCall[ColorPickerPickerShapeType](gdClass.obj.get(), methodColorPicker[16]) }

type ColorPickerButton struct{self *ColorPickerButton; obj safeObject }
func NewColorPickerButton(ctx Context, at *ColorPickerButton) ColorPickerButton { if at == nil { at = new(ColorPickerButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ColorPickerButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ColorPickerButton) owner() cObject { return gdClass.obj.get() }
func (ColorPickerButton) class() string { return "ColorPickerButton\000" }

func (gdClass ColorPickerButton) Button() Button { return Button{obj:gdClass.obj} }

var methodColorPickerButton [6]cMethodBind
func (gdClass ColorPickerButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Button().virtual(rtype, name)
}
func (gdClass ColorPickerButton) SetPickColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodColorPickerButton[0], &color) }
func (gdClass ColorPickerButton) GetPickColor() Color { return methodCall[Color](gdClass.obj.get(), methodColorPickerButton[1]) }
func (gdClass ColorPickerButton) GetPicker() ColorPicker { return methodCall[ColorPicker](gdClass.obj.get(), methodColorPickerButton[2]) }
func (gdClass ColorPickerButton) GetPopup() PopupPanel { return methodCall[PopupPanel](gdClass.obj.get(), methodColorPickerButton[3]) }
func (gdClass ColorPickerButton) SetEditAlpha(show bool)  { methodCall[struct{}](gdClass.obj.get(), methodColorPickerButton[4], &show) }
func (gdClass ColorPickerButton) IsEditingAlpha() bool { return methodCall[bool](gdClass.obj.get(), methodColorPickerButton[5]) }

type ColorRect struct{self *ColorRect; obj safeObject }
func NewColorRect(ctx Context, at *ColorRect) ColorRect { if at == nil { at = new(ColorRect) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ColorRect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ColorRect) owner() cObject { return gdClass.obj.get() }
func (ColorRect) class() string { return "ColorRect\000" }

func (gdClass ColorRect) Control() Control { return Control{obj:gdClass.obj} }

var methodColorRect [2]cMethodBind
func (gdClass ColorRect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass ColorRect) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodColorRect[0], &color) }
func (gdClass ColorRect) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodColorRect[1]) }

type CompressedCubemap struct{self *CompressedCubemap; obj safeObject }
func NewCompressedCubemap(ctx Context, at *CompressedCubemap) CompressedCubemap { if at == nil { at = new(CompressedCubemap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedCubemap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedCubemap) owner() cObject { return gdClass.obj.get() }
func (CompressedCubemap) class() string { return "CompressedCubemap\000" }

func (gdClass CompressedCubemap) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered{obj:gdClass.obj} }

func (gdClass CompressedCubemap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CompressedTextureLayered().virtual(rtype, name)
}

type CompressedCubemapArray struct{self *CompressedCubemapArray; obj safeObject }
func NewCompressedCubemapArray(ctx Context, at *CompressedCubemapArray) CompressedCubemapArray { if at == nil { at = new(CompressedCubemapArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedCubemapArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedCubemapArray) owner() cObject { return gdClass.obj.get() }
func (CompressedCubemapArray) class() string { return "CompressedCubemapArray\000" }

func (gdClass CompressedCubemapArray) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered{obj:gdClass.obj} }

func (gdClass CompressedCubemapArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CompressedTextureLayered().virtual(rtype, name)
}

type CompressedTexture2D struct{self *CompressedTexture2D; obj safeObject }
func NewCompressedTexture2D(ctx Context, at *CompressedTexture2D) CompressedTexture2D { if at == nil { at = new(CompressedTexture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedTexture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedTexture2D) owner() cObject { return gdClass.obj.get() }
func (CompressedTexture2D) class() string { return "CompressedTexture2D\000" }

func (gdClass CompressedTexture2D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodCompressedTexture2D [2]cMethodBind
func (gdClass CompressedTexture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass CompressedTexture2D) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodCompressedTexture2D[0], &path) }
func (gdClass CompressedTexture2D) GetLoadPath() string { return methodCall[string](gdClass.obj.get(), methodCompressedTexture2D[1]) }

type CompressedTexture2DArray struct{self *CompressedTexture2DArray; obj safeObject }
func NewCompressedTexture2DArray(ctx Context, at *CompressedTexture2DArray) CompressedTexture2DArray { if at == nil { at = new(CompressedTexture2DArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedTexture2DArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedTexture2DArray) owner() cObject { return gdClass.obj.get() }
func (CompressedTexture2DArray) class() string { return "CompressedTexture2DArray\000" }

func (gdClass CompressedTexture2DArray) CompressedTextureLayered() CompressedTextureLayered { return CompressedTextureLayered{obj:gdClass.obj} }

func (gdClass CompressedTexture2DArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CompressedTextureLayered().virtual(rtype, name)
}

type CompressedTexture3D struct{self *CompressedTexture3D; obj safeObject }
func NewCompressedTexture3D(ctx Context, at *CompressedTexture3D) CompressedTexture3D { if at == nil { at = new(CompressedTexture3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedTexture3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedTexture3D) owner() cObject { return gdClass.obj.get() }
func (CompressedTexture3D) class() string { return "CompressedTexture3D\000" }

func (gdClass CompressedTexture3D) Texture3D() Texture3D { return Texture3D{obj:gdClass.obj} }

var methodCompressedTexture3D [2]cMethodBind
func (gdClass CompressedTexture3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture3D().virtual(rtype, name)
}
func (gdClass CompressedTexture3D) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodCompressedTexture3D[0], &path) }
func (gdClass CompressedTexture3D) GetLoadPath() string { return methodCall[string](gdClass.obj.get(), methodCompressedTexture3D[1]) }

type CompressedTextureLayered struct{self *CompressedTextureLayered; obj safeObject }
func NewCompressedTextureLayered(ctx Context, at *CompressedTextureLayered) CompressedTextureLayered { if at == nil { at = new(CompressedTextureLayered) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CompressedTextureLayered) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CompressedTextureLayered) owner() cObject { return gdClass.obj.get() }
func (CompressedTextureLayered) class() string { return "CompressedTextureLayered\000" }

func (gdClass CompressedTextureLayered) TextureLayered() TextureLayered { return TextureLayered{obj:gdClass.obj} }

var methodCompressedTextureLayered [2]cMethodBind
func (gdClass CompressedTextureLayered) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TextureLayered().virtual(rtype, name)
}
func (gdClass CompressedTextureLayered) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodCompressedTextureLayered[0], &path) }
func (gdClass CompressedTextureLayered) GetLoadPath() string { return methodCall[string](gdClass.obj.get(), methodCompressedTextureLayered[1]) }

type ConcavePolygonShape2D struct{self *ConcavePolygonShape2D; obj safeObject }
func NewConcavePolygonShape2D(ctx Context, at *ConcavePolygonShape2D) ConcavePolygonShape2D { if at == nil { at = new(ConcavePolygonShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ConcavePolygonShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConcavePolygonShape2D) owner() cObject { return gdClass.obj.get() }
func (ConcavePolygonShape2D) class() string { return "ConcavePolygonShape2D\000" }

func (gdClass ConcavePolygonShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodConcavePolygonShape2D [2]cMethodBind
func (gdClass ConcavePolygonShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass ConcavePolygonShape2D) SetSegments(segments []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodConcavePolygonShape2D[0], &segments) }
func (gdClass ConcavePolygonShape2D) GetSegments() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodConcavePolygonShape2D[1]) }

type ConcavePolygonShape3D struct{self *ConcavePolygonShape3D; obj safeObject }
func NewConcavePolygonShape3D(ctx Context, at *ConcavePolygonShape3D) ConcavePolygonShape3D { if at == nil { at = new(ConcavePolygonShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ConcavePolygonShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConcavePolygonShape3D) owner() cObject { return gdClass.obj.get() }
func (ConcavePolygonShape3D) class() string { return "ConcavePolygonShape3D\000" }

func (gdClass ConcavePolygonShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodConcavePolygonShape3D [4]cMethodBind
func (gdClass ConcavePolygonShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass ConcavePolygonShape3D) SetFaces(faces []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodConcavePolygonShape3D[0], &faces) }
func (gdClass ConcavePolygonShape3D) GetFaces() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodConcavePolygonShape3D[1]) }
func (gdClass ConcavePolygonShape3D) SetBackfaceCollisionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodConcavePolygonShape3D[2], &enabled) }
func (gdClass ConcavePolygonShape3D) IsBackfaceCollisionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodConcavePolygonShape3D[3]) }

type ConeTwistJoint3DParam int64

const (
	ConeTwistJoint3DParamSwingSpan ConeTwistJoint3DParam = 0
	ConeTwistJoint3DParamTwistSpan ConeTwistJoint3DParam = 1
	ConeTwistJoint3DParamBias ConeTwistJoint3DParam = 2
	ConeTwistJoint3DParamSoftness ConeTwistJoint3DParam = 3
	ConeTwistJoint3DParamRelaxation ConeTwistJoint3DParam = 4
	ConeTwistJoint3DParamMax ConeTwistJoint3DParam = 5
)

type ConeTwistJoint3D struct{self *ConeTwistJoint3D; obj safeObject }
func NewConeTwistJoint3D(ctx Context, at *ConeTwistJoint3D) ConeTwistJoint3D { if at == nil { at = new(ConeTwistJoint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ConeTwistJoint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConeTwistJoint3D) owner() cObject { return gdClass.obj.get() }
func (ConeTwistJoint3D) class() string { return "ConeTwistJoint3D\000" }

func (gdClass ConeTwistJoint3D) Joint3D() Joint3D { return Joint3D{obj:gdClass.obj} }

var methodConeTwistJoint3D [2]cMethodBind
func (gdClass ConeTwistJoint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint3D().virtual(rtype, name)
}
func (gdClass ConeTwistJoint3D) SetParam(param ConeTwistJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodConeTwistJoint3D[0], &param, &value) }
func (gdClass ConeTwistJoint3D) GetParam(param ConeTwistJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodConeTwistJoint3D[1], &param) }

type ConfigFile struct{self *ConfigFile; obj safeObject }
func NewConfigFile(ctx Context, at *ConfigFile) ConfigFile { if at == nil { at = new(ConfigFile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ConfigFile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConfigFile) owner() cObject { return gdClass.obj.get() }
func (ConfigFile) class() string { return "ConfigFile\000" }

func (gdClass ConfigFile) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodConfigFile [16]cMethodBind
func (gdClass ConfigFile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass ConfigFile) SetValue(section string, key string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodConfigFile[0], &section, &key, &value) }
func (gdClass ConfigFile) GetValue(section string, key string, def any) any { return methodCall[any](gdClass.obj.get(), methodConfigFile[1], &section, &key, &def) }
func (gdClass ConfigFile) HasSection(section string) bool { return methodCall[bool](gdClass.obj.get(), methodConfigFile[2], &section) }
func (gdClass ConfigFile) HasSectionKey(section string, key string) bool { return methodCall[bool](gdClass.obj.get(), methodConfigFile[3], &section, &key) }
func (gdClass ConfigFile) GetSections() []string { return methodCall[[]string](gdClass.obj.get(), methodConfigFile[4]) }
func (gdClass ConfigFile) GetSectionKeys(section string) []string { return methodCall[[]string](gdClass.obj.get(), methodConfigFile[5], &section) }
func (gdClass ConfigFile) EraseSection(section string)  { methodCall[struct{}](gdClass.obj.get(), methodConfigFile[6], &section) }
func (gdClass ConfigFile) EraseSectionKey(section string, key string)  { methodCall[struct{}](gdClass.obj.get(), methodConfigFile[7], &section, &key) }
func (gdClass ConfigFile) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[8], &path) }
func (gdClass ConfigFile) Parse(data string) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[9], &data) }
func (gdClass ConfigFile) Save(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[10], &path) }
func (gdClass ConfigFile) LoadEncrypted(path string, key []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[11], &path, &key) }
func (gdClass ConfigFile) LoadEncryptedPass(path string, password string) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[12], &path, &password) }
func (gdClass ConfigFile) SaveEncrypted(path string, key []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[13], &path, &key) }
func (gdClass ConfigFile) SaveEncryptedPass(path string, password string) int64 { return methodCall[int64](gdClass.obj.get(), methodConfigFile[14], &path, &password) }
func (gdClass ConfigFile) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodConfigFile[15]) }

type ConfirmationDialog struct{self *ConfirmationDialog; obj safeObject }
func NewConfirmationDialog(ctx Context, at *ConfirmationDialog) ConfirmationDialog { if at == nil { at = new(ConfirmationDialog) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ConfirmationDialog) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConfirmationDialog) owner() cObject { return gdClass.obj.get() }
func (ConfirmationDialog) class() string { return "ConfirmationDialog\000" }

func (gdClass ConfirmationDialog) AcceptDialog() AcceptDialog { return AcceptDialog{obj:gdClass.obj} }

var methodConfirmationDialog [3]cMethodBind
func (gdClass ConfirmationDialog) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.AcceptDialog().virtual(rtype, name)
}
func (gdClass ConfirmationDialog) GetCancelButton() Button { return methodCall[Button](gdClass.obj.get(), methodConfirmationDialog[0]) }
func (gdClass ConfirmationDialog) SetCancelButtonText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodConfirmationDialog[1], &text) }
func (gdClass ConfirmationDialog) GetCancelButtonText() string { return methodCall[string](gdClass.obj.get(), methodConfirmationDialog[2]) }

type Container struct{self *Container; obj safeObject }
func NewContainer(ctx Context, at *Container) Container { if at == nil { at = new(Container) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Container) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Container) owner() cObject { return gdClass.obj.get() }
func (Container) class() string { return "Container\000" }

func (gdClass Container) Control() Control { return Control{obj:gdClass.obj} }

var methodContainer [2]cMethodBind
func (gdClass Container) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_allowed_size_flags_horizontal":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAllowedSizeFlagsHorizontal() []int32 }{}).Elem()) {
			return rtype.MethodByName(`GetAllowedSizeFlagsHorizontal`)
		}
		return
	case "_get_allowed_size_flags_vertical":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAllowedSizeFlagsVertical() []int32 }{}).Elem()) {
			return rtype.MethodByName(`GetAllowedSizeFlagsVertical`)
		}
		return
	}
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass Container) QueueSort()  { methodCall[struct{}](gdClass.obj.get(), methodContainer[0]) }
func (gdClass Container) FitChildInRect(child Control, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodContainer[1], &child, &rect) }

type ControlFocusMode int64

const (
	ControlFocusNone ControlFocusMode = 0
	ControlFocusClick ControlFocusMode = 1
	ControlFocusAll ControlFocusMode = 2
)

type ControlCursorShape int64

const (
	ControlCursorArrow ControlCursorShape = 0
	ControlCursorIbeam ControlCursorShape = 1
	ControlCursorPointingHand ControlCursorShape = 2
	ControlCursorCross ControlCursorShape = 3
	ControlCursorWait ControlCursorShape = 4
	ControlCursorBusy ControlCursorShape = 5
	ControlCursorDrag ControlCursorShape = 6
	ControlCursorCanDrop ControlCursorShape = 7
	ControlCursorForbidden ControlCursorShape = 8
	ControlCursorVsize ControlCursorShape = 9
	ControlCursorHsize ControlCursorShape = 10
	ControlCursorBdiagsize ControlCursorShape = 11
	ControlCursorFdiagsize ControlCursorShape = 12
	ControlCursorMove ControlCursorShape = 13
	ControlCursorVsplit ControlCursorShape = 14
	ControlCursorHsplit ControlCursorShape = 15
	ControlCursorHelp ControlCursorShape = 16
)

type ControlLayoutPreset int64

const (
	ControlPresetTopLeft ControlLayoutPreset = 0
	ControlPresetTopRight ControlLayoutPreset = 1
	ControlPresetBottomLeft ControlLayoutPreset = 2
	ControlPresetBottomRight ControlLayoutPreset = 3
	ControlPresetCenterLeft ControlLayoutPreset = 4
	ControlPresetCenterTop ControlLayoutPreset = 5
	ControlPresetCenterRight ControlLayoutPreset = 6
	ControlPresetCenterBottom ControlLayoutPreset = 7
	ControlPresetCenter ControlLayoutPreset = 8
	ControlPresetLeftWide ControlLayoutPreset = 9
	ControlPresetTopWide ControlLayoutPreset = 10
	ControlPresetRightWide ControlLayoutPreset = 11
	ControlPresetBottomWide ControlLayoutPreset = 12
	ControlPresetVcenterWide ControlLayoutPreset = 13
	ControlPresetHcenterWide ControlLayoutPreset = 14
	ControlPresetFullRect ControlLayoutPreset = 15
)

type ControlLayoutPresetMode int64

const (
	ControlPresetModeMinsize ControlLayoutPresetMode = 0
	ControlPresetModeKeepWidth ControlLayoutPresetMode = 1
	ControlPresetModeKeepHeight ControlLayoutPresetMode = 2
	ControlPresetModeKeepSize ControlLayoutPresetMode = 3
)

type ControlSizeFlags int64

const (
	ControlSizeShrinkBegin ControlSizeFlags = 0
	ControlSizeFill ControlSizeFlags = 1
	ControlSizeExpand ControlSizeFlags = 2
	ControlSizeExpandFill ControlSizeFlags = 3
	ControlSizeShrinkCenter ControlSizeFlags = 4
	ControlSizeShrinkEnd ControlSizeFlags = 8
)

type ControlMouseFilter int64

const (
	ControlMouseFilterStop ControlMouseFilter = 0
	ControlMouseFilterPass ControlMouseFilter = 1
	ControlMouseFilterIgnore ControlMouseFilter = 2
)

type ControlGrowDirection int64

const (
	ControlGrowDirectionBegin ControlGrowDirection = 0
	ControlGrowDirectionEnd ControlGrowDirection = 1
	ControlGrowDirectionBoth ControlGrowDirection = 2
)

type ControlAnchor int64

const (
	ControlAnchorBegin ControlAnchor = 0
	ControlAnchorEnd ControlAnchor = 1
)

type ControlLayoutDirection int64

const (
	ControlLayoutDirectionInherited ControlLayoutDirection = 0
	ControlLayoutDirectionLocale ControlLayoutDirection = 1
	ControlLayoutDirectionLtr ControlLayoutDirection = 2
	ControlLayoutDirectionRtl ControlLayoutDirection = 3
)

type ControlTextDirection int64

const (
	ControlTextDirectionInherited ControlTextDirection = 3
	ControlTextDirectionAuto ControlTextDirection = 0
	ControlTextDirectionLtr ControlTextDirection = 1
	ControlTextDirectionRtl ControlTextDirection = 2
)

type Control struct{self *Control; obj safeObject }
func NewControl(ctx Context, at *Control) Control { if at == nil { at = new(Control) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Control) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Control) owner() cObject { return gdClass.obj.get() }
func (Control) class() string { return "Control\000" }

func (gdClass Control) CanvasItem() CanvasItem { return CanvasItem{obj:gdClass.obj} }

var methodControl [120]cMethodBind
func (gdClass Control) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_has_point":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasPoint(position Vector2) bool }{}).Elem()) {
			return rtype.MethodByName(`HasPoint`)
		}
		return
	case "_structured_text_parser":
		if rtype.Implements(reflect.TypeOf([0]interface{ StructuredTextParser(args Array, text string) Array }{}).Elem()) {
			return rtype.MethodByName(`StructuredTextParser`)
		}
		return
	case "_get_minimum_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMinimumSize() Vector2 }{}).Elem()) {
			return rtype.MethodByName(`GetMinimumSize`)
		}
		return
	case "_get_drag_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDragData(at_position Vector2) any }{}).Elem()) {
			return rtype.MethodByName(`GetDragData`)
		}
		return
	case "_can_drop_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanDropData(at_position Vector2, data any) bool }{}).Elem()) {
			return rtype.MethodByName(`CanDropData`)
		}
		return
	case "_drop_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ DropData(at_position Vector2, data any)  }{}).Elem()) {
			return rtype.MethodByName(`DropData`)
		}
		return
	case "_make_custom_tooltip":
		if rtype.Implements(reflect.TypeOf([0]interface{ MakeCustomTooltip(for_text string) Object }{}).Elem()) {
			return rtype.MethodByName(`MakeCustomTooltip`)
		}
		return
	case "_gui_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ GuiInput(event InputEvent)  }{}).Elem()) {
			return rtype.MethodByName(`GuiInput`)
		}
		return
	}
	return gdClass.CanvasItem().virtual(rtype, name)
}
func (gdClass Control) AcceptEvent()  { methodCall[struct{}](gdClass.obj.get(), methodControl[0]) }
func (gdClass Control) GetMinimumSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[1]) }
func (gdClass Control) GetCombinedMinimumSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[2]) }
func (gdClass Control) SetAnchorsPreset(preset ControlLayoutPreset, keep_offsets bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[3], &preset, &keep_offsets) }
func (gdClass Control) SetOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[4], &preset, &resize_mode, &margin) }
func (gdClass Control) SetAnchorsAndOffsetsPreset(preset ControlLayoutPreset, resize_mode ControlLayoutPresetMode, margin int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[5], &preset, &resize_mode, &margin) }
func (gdClass Control) SetAnchor(side Side, anchor float64, keep_offset bool, push_opposite_anchor bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[6], &side, &anchor, &keep_offset, &push_opposite_anchor) }
func (gdClass Control) GetAnchor(side Side) float64 { return methodCall[float64](gdClass.obj.get(), methodControl[7], &side) }
func (gdClass Control) SetOffset(side Side, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[8], &side, &offset) }
func (gdClass Control) GetOffset(offset Side) float64 { return methodCall[float64](gdClass.obj.get(), methodControl[9], &offset) }
func (gdClass Control) SetAnchorAndOffset(side Side, anchor float64, offset float64, push_opposite_anchor bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[10], &side, &anchor, &offset, &push_opposite_anchor) }
func (gdClass Control) SetBegin(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[11], &position) }
func (gdClass Control) SetEnd(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[12], &position) }
func (gdClass Control) SetPosition(position Vector2, keep_offsets bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[13], &position, &keep_offsets) }
func (gdClass Control) SetSize(size Vector2, keep_offsets bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[14], &size, &keep_offsets) }
func (gdClass Control) ResetSize()  { methodCall[struct{}](gdClass.obj.get(), methodControl[15]) }
func (gdClass Control) SetCustomMinimumSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[16], &size) }
func (gdClass Control) SetGlobalPosition(position Vector2, keep_offsets bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[17], &position, &keep_offsets) }
func (gdClass Control) SetRotation(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[18], &radians) }
func (gdClass Control) SetScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[19], &scale) }
func (gdClass Control) SetPivotOffset(pivot_offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[20], &pivot_offset) }
func (gdClass Control) GetBegin() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[21]) }
func (gdClass Control) GetEnd() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[22]) }
func (gdClass Control) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[23]) }
func (gdClass Control) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[24]) }
func (gdClass Control) GetRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodControl[25]) }
func (gdClass Control) GetScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[26]) }
func (gdClass Control) GetPivotOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[27]) }
func (gdClass Control) GetCustomMinimumSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[28]) }
func (gdClass Control) GetParentAreaSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[29]) }
func (gdClass Control) GetGlobalPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[30]) }
func (gdClass Control) GetScreenPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodControl[31]) }
func (gdClass Control) GetRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodControl[32]) }
func (gdClass Control) GetGlobalRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodControl[33]) }
func (gdClass Control) SetFocusMode(mode ControlFocusMode)  { methodCall[struct{}](gdClass.obj.get(), methodControl[34], &mode) }
func (gdClass Control) GetFocusMode() ControlFocusMode { return methodCall[ControlFocusMode](gdClass.obj.get(), methodControl[35]) }
func (gdClass Control) HasFocus() bool { return methodCall[bool](gdClass.obj.get(), methodControl[36]) }
func (gdClass Control) GrabFocus()  { methodCall[struct{}](gdClass.obj.get(), methodControl[37]) }
func (gdClass Control) ReleaseFocus()  { methodCall[struct{}](gdClass.obj.get(), methodControl[38]) }
func (gdClass Control) FindPrevValidFocus() Control { return methodCall[Control](gdClass.obj.get(), methodControl[39]) }
func (gdClass Control) FindNextValidFocus() Control { return methodCall[Control](gdClass.obj.get(), methodControl[40]) }
func (gdClass Control) SetHSizeFlags(flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[41], &flags) }
func (gdClass Control) GetHSizeFlags() int64 { return methodCall[int64](gdClass.obj.get(), methodControl[42]) }
func (gdClass Control) SetStretchRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[43], &ratio) }
func (gdClass Control) GetStretchRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodControl[44]) }
func (gdClass Control) SetVSizeFlags(flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[45], &flags) }
func (gdClass Control) GetVSizeFlags() int64 { return methodCall[int64](gdClass.obj.get(), methodControl[46]) }
func (gdClass Control) SetTheme(theme Theme)  { methodCall[struct{}](gdClass.obj.get(), methodControl[47], &theme) }
func (gdClass Control) GetTheme() Theme { return methodCall[Theme](gdClass.obj.get(), methodControl[48]) }
func (gdClass Control) SetThemeTypeVariation(theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[49], &theme_type) }
func (gdClass Control) GetThemeTypeVariation() Name { return methodCall[Name](gdClass.obj.get(), methodControl[50]) }
func (gdClass Control) BeginBulkThemeOverride()  { methodCall[struct{}](gdClass.obj.get(), methodControl[51]) }
func (gdClass Control) EndBulkThemeOverride()  { methodCall[struct{}](gdClass.obj.get(), methodControl[52]) }
func (gdClass Control) AddThemeIconOverride(name Name, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodControl[53], &name, &texture) }
func (gdClass Control) AddThemeStyleboxOverride(name Name, stylebox StyleBox)  { methodCall[struct{}](gdClass.obj.get(), methodControl[54], &name, &stylebox) }
func (gdClass Control) AddThemeFontOverride(name Name, font Font)  { methodCall[struct{}](gdClass.obj.get(), methodControl[55], &name, &font) }
func (gdClass Control) AddThemeFontSizeOverride(name Name, font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[56], &name, &font_size) }
func (gdClass Control) AddThemeColorOverride(name Name, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodControl[57], &name, &color) }
func (gdClass Control) AddThemeConstantOverride(name Name, constant int64)  { methodCall[struct{}](gdClass.obj.get(), methodControl[58], &name, &constant) }
func (gdClass Control) RemoveThemeIconOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[59], &name) }
func (gdClass Control) RemoveThemeStyleboxOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[60], &name) }
func (gdClass Control) RemoveThemeFontOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[61], &name) }
func (gdClass Control) RemoveThemeFontSizeOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[62], &name) }
func (gdClass Control) RemoveThemeColorOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[63], &name) }
func (gdClass Control) RemoveThemeConstantOverride(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodControl[64], &name) }
func (gdClass Control) GetThemeIcon(name Name, theme_type Name) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodControl[65], &name, &theme_type) }
func (gdClass Control) GetThemeStylebox(name Name, theme_type Name) StyleBox { return methodCall[StyleBox](gdClass.obj.get(), methodControl[66], &name, &theme_type) }
func (gdClass Control) GetThemeFont(name Name, theme_type Name) Font { return methodCall[Font](gdClass.obj.get(), methodControl[67], &name, &theme_type) }
func (gdClass Control) GetThemeFontSize(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodControl[68], &name, &theme_type) }
func (gdClass Control) GetThemeColor(name Name, theme_type Name) Color { return methodCall[Color](gdClass.obj.get(), methodControl[69], &name, &theme_type) }
func (gdClass Control) GetThemeConstant(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodControl[70], &name, &theme_type) }
func (gdClass Control) HasThemeIconOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[71], &name) }
func (gdClass Control) HasThemeStyleboxOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[72], &name) }
func (gdClass Control) HasThemeFontOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[73], &name) }
func (gdClass Control) HasThemeFontSizeOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[74], &name) }
func (gdClass Control) HasThemeColorOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[75], &name) }
func (gdClass Control) HasThemeConstantOverride(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[76], &name) }
func (gdClass Control) HasThemeIcon(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[77], &name, &theme_type) }
func (gdClass Control) HasThemeStylebox(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[78], &name, &theme_type) }
func (gdClass Control) HasThemeFont(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[79], &name, &theme_type) }
func (gdClass Control) HasThemeFontSize(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[80], &name, &theme_type) }
func (gdClass Control) HasThemeColor(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[81], &name, &theme_type) }
func (gdClass Control) HasThemeConstant(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodControl[82], &name, &theme_type) }
func (gdClass Control) GetThemeDefaultBaseScale() float64 { return methodCall[float64](gdClass.obj.get(), methodControl[83]) }
func (gdClass Control) GetThemeDefaultFont() Font { return methodCall[Font](gdClass.obj.get(), methodControl[84]) }
func (gdClass Control) GetThemeDefaultFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodControl[85]) }
func (gdClass Control) GetParentControl() Control { return methodCall[Control](gdClass.obj.get(), methodControl[86]) }
func (gdClass Control) SetHGrowDirection(direction ControlGrowDirection)  { methodCall[struct{}](gdClass.obj.get(), methodControl[87], &direction) }
func (gdClass Control) GetHGrowDirection() ControlGrowDirection { return methodCall[ControlGrowDirection](gdClass.obj.get(), methodControl[88]) }
func (gdClass Control) SetVGrowDirection(direction ControlGrowDirection)  { methodCall[struct{}](gdClass.obj.get(), methodControl[89], &direction) }
func (gdClass Control) GetVGrowDirection() ControlGrowDirection { return methodCall[ControlGrowDirection](gdClass.obj.get(), methodControl[90]) }
func (gdClass Control) SetTooltip(tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodControl[91], &tooltip) }
func (gdClass Control) GetTooltip(at_position Vector2) string { return methodCall[string](gdClass.obj.get(), methodControl[92], &at_position) }
func (gdClass Control) SetDefaultCursorShape(shape ControlCursorShape)  { methodCall[struct{}](gdClass.obj.get(), methodControl[93], &shape) }
func (gdClass Control) GetDefaultCursorShape() ControlCursorShape { return methodCall[ControlCursorShape](gdClass.obj.get(), methodControl[94]) }
func (gdClass Control) GetCursorShape(position Vector2) ControlCursorShape { return methodCall[ControlCursorShape](gdClass.obj.get(), methodControl[95], &position) }
func (gdClass Control) SetFocusNeighbor(side Side, neighbor NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodControl[96], &side, &neighbor) }
func (gdClass Control) GetFocusNeighbor(side Side) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodControl[97], &side) }
func (gdClass Control) SetFocusNext(next NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodControl[98], &next) }
func (gdClass Control) GetFocusNext() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodControl[99]) }
func (gdClass Control) SetFocusPrevious(previous NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodControl[100], &previous) }
func (gdClass Control) GetFocusPrevious() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodControl[101]) }
func (gdClass Control) ForceDrag(data any, preview Control)  { methodCall[struct{}](gdClass.obj.get(), methodControl[102], &data, &preview) }
func (gdClass Control) SetMouseFilter(filter ControlMouseFilter)  { methodCall[struct{}](gdClass.obj.get(), methodControl[103], &filter) }
func (gdClass Control) GetMouseFilter() ControlMouseFilter { return methodCall[ControlMouseFilter](gdClass.obj.get(), methodControl[104]) }
func (gdClass Control) SetForcePassScrollEvents(force_pass_scroll_events bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[105], &force_pass_scroll_events) }
func (gdClass Control) IsForcePassScrollEvents() bool { return methodCall[bool](gdClass.obj.get(), methodControl[106]) }
func (gdClass Control) SetClipContents(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[107], &enable) }
func (gdClass Control) IsClippingContents() bool { return methodCall[bool](gdClass.obj.get(), methodControl[108]) }
func (gdClass Control) GrabClickFocus()  { methodCall[struct{}](gdClass.obj.get(), methodControl[109]) }
func (gdClass Control) SetDragForwarding(target Object)  { methodCall[struct{}](gdClass.obj.get(), methodControl[110], &target) }
func (gdClass Control) SetDragPreview(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodControl[111], &control) }
func (gdClass Control) IsDragSuccessful() bool { return methodCall[bool](gdClass.obj.get(), methodControl[112]) }
func (gdClass Control) WarpMouse(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodControl[113], &position) }
func (gdClass Control) UpdateMinimumSize()  { methodCall[struct{}](gdClass.obj.get(), methodControl[114]) }
func (gdClass Control) SetLayoutDirection(direction ControlLayoutDirection)  { methodCall[struct{}](gdClass.obj.get(), methodControl[115], &direction) }
func (gdClass Control) GetLayoutDirection() ControlLayoutDirection { return methodCall[ControlLayoutDirection](gdClass.obj.get(), methodControl[116]) }
func (gdClass Control) IsLayoutRtl() bool { return methodCall[bool](gdClass.obj.get(), methodControl[117]) }
func (gdClass Control) SetAutoTranslate(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodControl[118], &enable) }
func (gdClass Control) IsAutoTranslating() bool { return methodCall[bool](gdClass.obj.get(), methodControl[119]) }

type ConvexPolygonShape2D struct{self *ConvexPolygonShape2D; obj safeObject }
func NewConvexPolygonShape2D(ctx Context, at *ConvexPolygonShape2D) ConvexPolygonShape2D { if at == nil { at = new(ConvexPolygonShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ConvexPolygonShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConvexPolygonShape2D) owner() cObject { return gdClass.obj.get() }
func (ConvexPolygonShape2D) class() string { return "ConvexPolygonShape2D\000" }

func (gdClass ConvexPolygonShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodConvexPolygonShape2D [3]cMethodBind
func (gdClass ConvexPolygonShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass ConvexPolygonShape2D) SetPointCloud(point_cloud []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodConvexPolygonShape2D[0], &point_cloud) }
func (gdClass ConvexPolygonShape2D) SetPoints(points []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodConvexPolygonShape2D[1], &points) }
func (gdClass ConvexPolygonShape2D) GetPoints() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodConvexPolygonShape2D[2]) }

type ConvexPolygonShape3D struct{self *ConvexPolygonShape3D; obj safeObject }
func NewConvexPolygonShape3D(ctx Context, at *ConvexPolygonShape3D) ConvexPolygonShape3D { if at == nil { at = new(ConvexPolygonShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ConvexPolygonShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ConvexPolygonShape3D) owner() cObject { return gdClass.obj.get() }
func (ConvexPolygonShape3D) class() string { return "ConvexPolygonShape3D\000" }

func (gdClass ConvexPolygonShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodConvexPolygonShape3D [2]cMethodBind
func (gdClass ConvexPolygonShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass ConvexPolygonShape3D) SetPoints(points []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodConvexPolygonShape3D[0], &points) }
func (gdClass ConvexPolygonShape3D) GetPoints() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodConvexPolygonShape3D[1]) }

type Crypto struct{self *Crypto; obj safeObject }
func NewCrypto(ctx Context, at *Crypto) Crypto { if at == nil { at = new(Crypto) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Crypto) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Crypto) owner() cObject { return gdClass.obj.get() }
func (Crypto) class() string { return "Crypto\000" }

func (gdClass Crypto) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodCrypto [9]cMethodBind
func (gdClass Crypto) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Crypto) GenerateRandomBytes(size int64) []byte { return methodCall[[]byte](gdClass.obj.get(), methodCrypto[0], &size) }
func (gdClass Crypto) GenerateRsa(size int64) CryptoKey { return methodCall[CryptoKey](gdClass.obj.get(), methodCrypto[1], &size) }
func (gdClass Crypto) GenerateSelfSignedCertificate(key CryptoKey, issuer_name string, not_before string, not_after string) X509Certificate { return methodCall[X509Certificate](gdClass.obj.get(), methodCrypto[2], &key, &issuer_name, &not_before, &not_after) }
func (gdClass Crypto) Sign(hash_type HashingContextHashType, hash []byte, key CryptoKey) []byte { return methodCall[[]byte](gdClass.obj.get(), methodCrypto[3], &hash_type, &hash, &key) }
func (gdClass Crypto) Verify(hash_type HashingContextHashType, hash []byte, signature []byte, key CryptoKey) bool { return methodCall[bool](gdClass.obj.get(), methodCrypto[4], &hash_type, &hash, &signature, &key) }
func (gdClass Crypto) Encrypt(key CryptoKey, plaintext []byte) []byte { return methodCall[[]byte](gdClass.obj.get(), methodCrypto[5], &key, &plaintext) }
func (gdClass Crypto) Decrypt(key CryptoKey, ciphertext []byte) []byte { return methodCall[[]byte](gdClass.obj.get(), methodCrypto[6], &key, &ciphertext) }
func (gdClass Crypto) HmacDigest(hash_type HashingContextHashType, key []byte, msg []byte) []byte { return methodCall[[]byte](gdClass.obj.get(), methodCrypto[7], &hash_type, &key, &msg) }
func (gdClass Crypto) ConstantTimeCompare(trusted []byte, received []byte) bool { return methodCall[bool](gdClass.obj.get(), methodCrypto[8], &trusted, &received) }

type CryptoKey struct{self *CryptoKey; obj safeObject }
func NewCryptoKey(ctx Context, at *CryptoKey) CryptoKey { if at == nil { at = new(CryptoKey) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CryptoKey) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CryptoKey) owner() cObject { return gdClass.obj.get() }
func (CryptoKey) class() string { return "CryptoKey\000" }

func (gdClass CryptoKey) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodCryptoKey [5]cMethodBind
func (gdClass CryptoKey) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass CryptoKey) Save(path string, public_only bool) int64 { return methodCall[int64](gdClass.obj.get(), methodCryptoKey[0], &path, &public_only) }
func (gdClass CryptoKey) Load(path string, public_only bool) int64 { return methodCall[int64](gdClass.obj.get(), methodCryptoKey[1], &path, &public_only) }
func (gdClass CryptoKey) IsPublicOnly() bool { return methodCall[bool](gdClass.obj.get(), methodCryptoKey[2]) }
func (gdClass CryptoKey) SaveToString(public_only bool) string { return methodCall[string](gdClass.obj.get(), methodCryptoKey[3], &public_only) }
func (gdClass CryptoKey) LoadFromString(string_key string, public_only bool) int64 { return methodCall[int64](gdClass.obj.get(), methodCryptoKey[4], &string_key, &public_only) }

type Cubemap struct{self *Cubemap; obj safeObject }
func NewCubemap(ctx Context, at *Cubemap) Cubemap { if at == nil { at = new(Cubemap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Cubemap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Cubemap) owner() cObject { return gdClass.obj.get() }
func (Cubemap) class() string { return "Cubemap\000" }

func (gdClass Cubemap) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered{obj:gdClass.obj} }

func (gdClass Cubemap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ImageTextureLayered().virtual(rtype, name)
}

type CubemapArray struct{self *CubemapArray; obj safeObject }
func NewCubemapArray(ctx Context, at *CubemapArray) CubemapArray { if at == nil { at = new(CubemapArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CubemapArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CubemapArray) owner() cObject { return gdClass.obj.get() }
func (CubemapArray) class() string { return "CubemapArray\000" }

func (gdClass CubemapArray) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered{obj:gdClass.obj} }

func (gdClass CubemapArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ImageTextureLayered().virtual(rtype, name)
}

type CurveTangentMode int64

const (
	CurveTangentFree CurveTangentMode = 0
	CurveTangentLinear CurveTangentMode = 1
	CurveTangentModeCount CurveTangentMode = 2
)

type Curve struct{self *Curve; obj safeObject }
func NewCurve(ctx Context, at *Curve) Curve { if at == nil { at = new(Curve) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Curve) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Curve) owner() cObject { return gdClass.obj.get() }
func (Curve) class() string { return "Curve\000" }

func (gdClass Curve) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodCurve [26]cMethodBind
func (gdClass Curve) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Curve) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCurve[0]) }
func (gdClass Curve) SetPointCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[1], &count) }
func (gdClass Curve) AddPoint(position Vector2, left_tangent float64, right_tangent float64, left_mode CurveTangentMode, right_mode CurveTangentMode) int64 { return methodCall[int64](gdClass.obj.get(), methodCurve[2], &position, &left_tangent, &right_tangent, &left_mode, &right_mode) }
func (gdClass Curve) RemovePoint(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[3], &index) }
func (gdClass Curve) ClearPoints()  { methodCall[struct{}](gdClass.obj.get(), methodCurve[4]) }
func (gdClass Curve) GetPointPosition(index int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve[5], &index) }
func (gdClass Curve) SetPointValue(index int64, y float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[6], &index, &y) }
func (gdClass Curve) SetPointOffset(index int64, offset float64) int64 { return methodCall[int64](gdClass.obj.get(), methodCurve[7], &index, &offset) }
func (gdClass Curve) Interpolate(offset float64) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[8], &offset) }
func (gdClass Curve) InterpolateBaked(offset float64) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[9], &offset) }
func (gdClass Curve) GetPointLeftTangent(index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[10], &index) }
func (gdClass Curve) GetPointRightTangent(index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[11], &index) }
func (gdClass Curve) GetPointLeftMode(index int64) CurveTangentMode { return methodCall[CurveTangentMode](gdClass.obj.get(), methodCurve[12], &index) }
func (gdClass Curve) GetPointRightMode(index int64) CurveTangentMode { return methodCall[CurveTangentMode](gdClass.obj.get(), methodCurve[13], &index) }
func (gdClass Curve) SetPointLeftTangent(index int64, tangent float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[14], &index, &tangent) }
func (gdClass Curve) SetPointRightTangent(index int64, tangent float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[15], &index, &tangent) }
func (gdClass Curve) SetPointLeftMode(index int64, mode CurveTangentMode)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[16], &index, &mode) }
func (gdClass Curve) SetPointRightMode(index int64, mode CurveTangentMode)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[17], &index, &mode) }
func (gdClass Curve) GetMinValue() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[18]) }
func (gdClass Curve) SetMinValue(min float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[19], &min) }
func (gdClass Curve) GetMaxValue() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve[20]) }
func (gdClass Curve) SetMaxValue(max float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[21], &max) }
func (gdClass Curve) CleanDupes()  { methodCall[struct{}](gdClass.obj.get(), methodCurve[22]) }
func (gdClass Curve) Bake()  { methodCall[struct{}](gdClass.obj.get(), methodCurve[23]) }
func (gdClass Curve) GetBakeResolution() int64 { return methodCall[int64](gdClass.obj.get(), methodCurve[24]) }
func (gdClass Curve) SetBakeResolution(resolution int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve[25], &resolution) }

type Curve2D struct{self *Curve2D; obj safeObject }
func NewCurve2D(ctx Context, at *Curve2D) Curve2D { if at == nil { at = new(Curve2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Curve2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Curve2D) owner() cObject { return gdClass.obj.get() }
func (Curve2D) class() string { return "Curve2D\000" }

func (gdClass Curve2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodCurve2D [21]cMethodBind
func (gdClass Curve2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Curve2D) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCurve2D[0]) }
func (gdClass Curve2D) SetPointCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[1], &count) }
func (gdClass Curve2D) AddPoint(position Vector2, in Vector2, out Vector2, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[2], &position, &in, &out, &index) }
func (gdClass Curve2D) SetPointPosition(idx int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[3], &idx, &position) }
func (gdClass Curve2D) GetPointPosition(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[4], &idx) }
func (gdClass Curve2D) SetPointIn(idx int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[5], &idx, &position) }
func (gdClass Curve2D) GetPointIn(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[6], &idx) }
func (gdClass Curve2D) SetPointOut(idx int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[7], &idx, &position) }
func (gdClass Curve2D) GetPointOut(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[8], &idx) }
func (gdClass Curve2D) RemovePoint(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[9], &idx) }
func (gdClass Curve2D) ClearPoints()  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[10]) }
func (gdClass Curve2D) Interpolate(idx int64, t float64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[11], &idx, &t) }
func (gdClass Curve2D) Interpolatef(fofs float64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[12], &fofs) }
func (gdClass Curve2D) SetBakeInterval(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve2D[13], &distance) }
func (gdClass Curve2D) GetBakeInterval() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve2D[14]) }
func (gdClass Curve2D) GetBakedLength() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve2D[15]) }
func (gdClass Curve2D) InterpolateBaked(offset float64, cubic bool) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[16], &offset, &cubic) }
func (gdClass Curve2D) GetBakedPoints() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCurve2D[17]) }
func (gdClass Curve2D) GetClosestPoint(to_point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodCurve2D[18], &to_point) }
func (gdClass Curve2D) GetClosestOffset(to_point Vector2) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve2D[19], &to_point) }
func (gdClass Curve2D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodCurve2D[20], &max_stages, &tolerance_degrees) }

type Curve3D struct{self *Curve3D; obj safeObject }
func NewCurve3D(ctx Context, at *Curve3D) Curve3D { if at == nil { at = new(Curve3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Curve3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Curve3D) owner() cObject { return gdClass.obj.get() }
func (Curve3D) class() string { return "Curve3D\000" }

func (gdClass Curve3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodCurve3D [28]cMethodBind
func (gdClass Curve3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Curve3D) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodCurve3D[0]) }
func (gdClass Curve3D) SetPointCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[1], &count) }
func (gdClass Curve3D) AddPoint(position Vector3, in Vector3, out Vector3, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[2], &position, &in, &out, &index) }
func (gdClass Curve3D) SetPointPosition(idx int64, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[3], &idx, &position) }
func (gdClass Curve3D) GetPointPosition(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[4], &idx) }
func (gdClass Curve3D) SetPointTilt(idx int64, tilt float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[5], &idx, &tilt) }
func (gdClass Curve3D) GetPointTilt(idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve3D[6], &idx) }
func (gdClass Curve3D) SetPointIn(idx int64, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[7], &idx, &position) }
func (gdClass Curve3D) GetPointIn(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[8], &idx) }
func (gdClass Curve3D) SetPointOut(idx int64, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[9], &idx, &position) }
func (gdClass Curve3D) GetPointOut(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[10], &idx) }
func (gdClass Curve3D) RemovePoint(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[11], &idx) }
func (gdClass Curve3D) ClearPoints()  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[12]) }
func (gdClass Curve3D) Interpolate(idx int64, t float64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[13], &idx, &t) }
func (gdClass Curve3D) Interpolatef(fofs float64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[14], &fofs) }
func (gdClass Curve3D) SetBakeInterval(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[15], &distance) }
func (gdClass Curve3D) GetBakeInterval() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve3D[16]) }
func (gdClass Curve3D) SetUpVectorEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodCurve3D[17], &enable) }
func (gdClass Curve3D) IsUpVectorEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodCurve3D[18]) }
func (gdClass Curve3D) GetBakedLength() float64 { return methodCall[float64](gdClass.obj.get(), methodCurve3D[19]) }
func (gdClass Curve3D) InterpolateBaked(offset float64, cubic bool) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[20], &offset, &cubic) }
func (gdClass Curve3D) InterpolateBakedUpVector(offset float64, apply_tilt bool) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[21], &offset, &apply_tilt) }
func (gdClass Curve3D) GetBakedPoints() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodCurve3D[22]) }
func (gdClass Curve3D) GetBakedTilts() []float32 { return methodCall[[]float32](gdClass.obj.get(), methodCurve3D[23]) }
func (gdClass Curve3D) GetBakedUpVectors() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodCurve3D[24]) }
func (gdClass Curve3D) GetClosestPoint(to_point Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodCurve3D[25], &to_point) }
func (gdClass Curve3D) GetClosestOffset(to_point Vector3) float64 { return methodCall[float64](gdClass.obj.get(), methodCurve3D[26], &to_point) }
func (gdClass Curve3D) Tessellate(max_stages int64, tolerance_degrees float64) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodCurve3D[27], &max_stages, &tolerance_degrees) }

type CurveTextureTextureMode int64

const (
	CurveTextureTextureModeRgb CurveTextureTextureMode = 0
	CurveTextureTextureModeRed CurveTextureTextureMode = 1
)

type CurveTexture struct{self *CurveTexture; obj safeObject }
func NewCurveTexture(ctx Context, at *CurveTexture) CurveTexture { if at == nil { at = new(CurveTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CurveTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CurveTexture) owner() cObject { return gdClass.obj.get() }
func (CurveTexture) class() string { return "CurveTexture\000" }

func (gdClass CurveTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodCurveTexture [5]cMethodBind
func (gdClass CurveTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass CurveTexture) SetWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurveTexture[0], &width) }
func (gdClass CurveTexture) SetCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCurveTexture[1], &curve) }
func (gdClass CurveTexture) GetCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodCurveTexture[2]) }
func (gdClass CurveTexture) SetTextureMode(texture_mode CurveTextureTextureMode)  { methodCall[struct{}](gdClass.obj.get(), methodCurveTexture[3], &texture_mode) }
func (gdClass CurveTexture) GetTextureMode() CurveTextureTextureMode { return methodCall[CurveTextureTextureMode](gdClass.obj.get(), methodCurveTexture[4]) }

type CurveXYZTexture struct{self *CurveXYZTexture; obj safeObject }
func NewCurveXYZTexture(ctx Context, at *CurveXYZTexture) CurveXYZTexture { if at == nil { at = new(CurveXYZTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CurveXYZTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CurveXYZTexture) owner() cObject { return gdClass.obj.get() }
func (CurveXYZTexture) class() string { return "CurveXYZTexture\000" }

func (gdClass CurveXYZTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodCurveXYZTexture [7]cMethodBind
func (gdClass CurveXYZTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass CurveXYZTexture) SetWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodCurveXYZTexture[0], &width) }
func (gdClass CurveXYZTexture) SetCurveX(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCurveXYZTexture[1], &curve) }
func (gdClass CurveXYZTexture) GetCurveX() Curve { return methodCall[Curve](gdClass.obj.get(), methodCurveXYZTexture[2]) }
func (gdClass CurveXYZTexture) SetCurveY(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCurveXYZTexture[3], &curve) }
func (gdClass CurveXYZTexture) GetCurveY() Curve { return methodCall[Curve](gdClass.obj.get(), methodCurveXYZTexture[4]) }
func (gdClass CurveXYZTexture) SetCurveZ(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodCurveXYZTexture[5], &curve) }
func (gdClass CurveXYZTexture) GetCurveZ() Curve { return methodCall[Curve](gdClass.obj.get(), methodCurveXYZTexture[6]) }

type CylinderMesh struct{self *CylinderMesh; obj safeObject }
func NewCylinderMesh(ctx Context, at *CylinderMesh) CylinderMesh { if at == nil { at = new(CylinderMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CylinderMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CylinderMesh) owner() cObject { return gdClass.obj.get() }
func (CylinderMesh) class() string { return "CylinderMesh\000" }

func (gdClass CylinderMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodCylinderMesh [14]cMethodBind
func (gdClass CylinderMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass CylinderMesh) SetTopRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[0], &radius) }
func (gdClass CylinderMesh) GetTopRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCylinderMesh[1]) }
func (gdClass CylinderMesh) SetBottomRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[2], &radius) }
func (gdClass CylinderMesh) GetBottomRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCylinderMesh[3]) }
func (gdClass CylinderMesh) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[4], &height) }
func (gdClass CylinderMesh) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCylinderMesh[5]) }
func (gdClass CylinderMesh) SetRadialSegments(segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[6], &segments) }
func (gdClass CylinderMesh) GetRadialSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodCylinderMesh[7]) }
func (gdClass CylinderMesh) SetRings(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[8], &rings) }
func (gdClass CylinderMesh) GetRings() int64 { return methodCall[int64](gdClass.obj.get(), methodCylinderMesh[9]) }
func (gdClass CylinderMesh) SetCapTop(cap_top bool)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[10], &cap_top) }
func (gdClass CylinderMesh) IsCapTop() bool { return methodCall[bool](gdClass.obj.get(), methodCylinderMesh[11]) }
func (gdClass CylinderMesh) SetCapBottom(cap_bottom bool)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderMesh[12], &cap_bottom) }
func (gdClass CylinderMesh) IsCapBottom() bool { return methodCall[bool](gdClass.obj.get(), methodCylinderMesh[13]) }

type CylinderShape3D struct{self *CylinderShape3D; obj safeObject }
func NewCylinderShape3D(ctx Context, at *CylinderShape3D) CylinderShape3D { if at == nil { at = new(CylinderShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass CylinderShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass CylinderShape3D) owner() cObject { return gdClass.obj.get() }
func (CylinderShape3D) class() string { return "CylinderShape3D\000" }

func (gdClass CylinderShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodCylinderShape3D [4]cMethodBind
func (gdClass CylinderShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass CylinderShape3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderShape3D[0], &radius) }
func (gdClass CylinderShape3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodCylinderShape3D[1]) }
func (gdClass CylinderShape3D) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodCylinderShape3D[2], &height) }
func (gdClass CylinderShape3D) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodCylinderShape3D[3]) }

type DTLSServer struct{self *DTLSServer; obj safeObject }
func NewDTLSServer(ctx Context, at *DTLSServer) DTLSServer { if at == nil { at = new(DTLSServer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass DTLSServer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass DTLSServer) owner() cObject { return gdClass.obj.get() }
func (DTLSServer) class() string { return "DTLSServer\000" }

func (gdClass DTLSServer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodDTLSServer [2]cMethodBind
func (gdClass DTLSServer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass DTLSServer) Setup(key CryptoKey, certificate X509Certificate, chain X509Certificate) int64 { return methodCall[int64](gdClass.obj.get(), methodDTLSServer[0], &key, &certificate, &chain) }
func (gdClass DTLSServer) TakeConnection(udp_peer PacketPeerUDP) PacketPeerDTLS { return methodCall[PacketPeerDTLS](gdClass.obj.get(), methodDTLSServer[1], &udp_peer) }

type DampedSpringJoint2D struct{self *DampedSpringJoint2D; obj safeObject }
func NewDampedSpringJoint2D(ctx Context, at *DampedSpringJoint2D) DampedSpringJoint2D { if at == nil { at = new(DampedSpringJoint2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass DampedSpringJoint2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass DampedSpringJoint2D) owner() cObject { return gdClass.obj.get() }
func (DampedSpringJoint2D) class() string { return "DampedSpringJoint2D\000" }

func (gdClass DampedSpringJoint2D) Joint2D() Joint2D { return Joint2D{obj:gdClass.obj} }

var methodDampedSpringJoint2D [8]cMethodBind
func (gdClass DampedSpringJoint2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint2D().virtual(rtype, name)
}
func (gdClass DampedSpringJoint2D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodDampedSpringJoint2D[0], &length) }
func (gdClass DampedSpringJoint2D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodDampedSpringJoint2D[1]) }
func (gdClass DampedSpringJoint2D) SetRestLength(rest_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodDampedSpringJoint2D[2], &rest_length) }
func (gdClass DampedSpringJoint2D) GetRestLength() float64 { return methodCall[float64](gdClass.obj.get(), methodDampedSpringJoint2D[3]) }
func (gdClass DampedSpringJoint2D) SetStiffness(stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodDampedSpringJoint2D[4], &stiffness) }
func (gdClass DampedSpringJoint2D) GetStiffness() float64 { return methodCall[float64](gdClass.obj.get(), methodDampedSpringJoint2D[5]) }
func (gdClass DampedSpringJoint2D) SetDamping(damping float64)  { methodCall[struct{}](gdClass.obj.get(), methodDampedSpringJoint2D[6], &damping) }
func (gdClass DampedSpringJoint2D) GetDamping() float64 { return methodCall[float64](gdClass.obj.get(), methodDampedSpringJoint2D[7]) }

type DecalDecalTexture int64

const (
	DecalTextureAlbedo DecalDecalTexture = 0
	DecalTextureNormal DecalDecalTexture = 1
	DecalTextureOrm DecalDecalTexture = 2
	DecalTextureEmission DecalDecalTexture = 3
	DecalTextureMax DecalDecalTexture = 4
)

type Decal struct{self *Decal; obj safeObject }
func NewDecal(ctx Context, at *Decal) Decal { if at == nil { at = new(Decal) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Decal) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Decal) owner() cObject { return gdClass.obj.get() }
func (Decal) class() string { return "Decal\000" }

func (gdClass Decal) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodDecal [24]cMethodBind
func (gdClass Decal) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass Decal) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[0], &extents) }
func (gdClass Decal) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodDecal[1]) }
func (gdClass Decal) SetTexture(atype DecalDecalTexture, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[2], &atype, &texture) }
func (gdClass Decal) GetTexture(atype DecalDecalTexture) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodDecal[3], &atype) }
func (gdClass Decal) SetEmissionEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[4], &energy) }
func (gdClass Decal) GetEmissionEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[5]) }
func (gdClass Decal) SetAlbedoMix(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[6], &energy) }
func (gdClass Decal) GetAlbedoMix() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[7]) }
func (gdClass Decal) SetModulate(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[8], &color) }
func (gdClass Decal) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodDecal[9]) }
func (gdClass Decal) SetUpperFade(fade float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[10], &fade) }
func (gdClass Decal) GetUpperFade() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[11]) }
func (gdClass Decal) SetLowerFade(fade float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[12], &fade) }
func (gdClass Decal) GetLowerFade() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[13]) }
func (gdClass Decal) SetNormalFade(fade float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[14], &fade) }
func (gdClass Decal) GetNormalFade() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[15]) }
func (gdClass Decal) SetEnableDistanceFade(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[16], &enable) }
func (gdClass Decal) IsDistanceFadeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodDecal[17]) }
func (gdClass Decal) SetDistanceFadeBegin(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[18], &distance) }
func (gdClass Decal) GetDistanceFadeBegin() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[19]) }
func (gdClass Decal) SetDistanceFadeLength(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[20], &distance) }
func (gdClass Decal) GetDistanceFadeLength() float64 { return methodCall[float64](gdClass.obj.get(), methodDecal[21]) }
func (gdClass Decal) SetCullMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodDecal[22], &mask) }
func (gdClass Decal) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodDecal[23]) }

type DirectionalLight2D struct{self *DirectionalLight2D; obj safeObject }
func NewDirectionalLight2D(ctx Context, at *DirectionalLight2D) DirectionalLight2D { if at == nil { at = new(DirectionalLight2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass DirectionalLight2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass DirectionalLight2D) owner() cObject { return gdClass.obj.get() }
func (DirectionalLight2D) class() string { return "DirectionalLight2D\000" }

func (gdClass DirectionalLight2D) Light2D() Light2D { return Light2D{obj:gdClass.obj} }

var methodDirectionalLight2D [2]cMethodBind
func (gdClass DirectionalLight2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Light2D().virtual(rtype, name)
}
func (gdClass DirectionalLight2D) SetMaxDistance(pixels float64)  { methodCall[struct{}](gdClass.obj.get(), methodDirectionalLight2D[0], &pixels) }
func (gdClass DirectionalLight2D) GetMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodDirectionalLight2D[1]) }

type DirectionalLight3DShadowMode int64

const (
	DirectionalLight3DShadowOrthogonal DirectionalLight3DShadowMode = 0
	DirectionalLight3DShadowParallel2Splits DirectionalLight3DShadowMode = 1
	DirectionalLight3DShadowParallel4Splits DirectionalLight3DShadowMode = 2
)

type DirectionalLight3DSkyMode int64

const (
	DirectionalLight3DSkyModeLightAndSky DirectionalLight3DSkyMode = 0
	DirectionalLight3DSkyModeLightOnly DirectionalLight3DSkyMode = 1
	DirectionalLight3DSkyModeSkyOnly DirectionalLight3DSkyMode = 2
)

type DirectionalLight3D struct{self *DirectionalLight3D; obj safeObject }
func NewDirectionalLight3D(ctx Context, at *DirectionalLight3D) DirectionalLight3D { if at == nil { at = new(DirectionalLight3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass DirectionalLight3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass DirectionalLight3D) owner() cObject { return gdClass.obj.get() }
func (DirectionalLight3D) class() string { return "DirectionalLight3D\000" }

func (gdClass DirectionalLight3D) Light3D() Light3D { return Light3D{obj:gdClass.obj} }

var methodDirectionalLight3D [6]cMethodBind
func (gdClass DirectionalLight3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Light3D().virtual(rtype, name)
}
func (gdClass DirectionalLight3D) SetShadowMode(mode DirectionalLight3DShadowMode)  { methodCall[struct{}](gdClass.obj.get(), methodDirectionalLight3D[0], &mode) }
func (gdClass DirectionalLight3D) GetShadowMode() DirectionalLight3DShadowMode { return methodCall[DirectionalLight3DShadowMode](gdClass.obj.get(), methodDirectionalLight3D[1]) }
func (gdClass DirectionalLight3D) SetBlendSplits(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodDirectionalLight3D[2], &enabled) }
func (gdClass DirectionalLight3D) IsBlendSplitsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodDirectionalLight3D[3]) }
func (gdClass DirectionalLight3D) SetSkyMode(mode DirectionalLight3DSkyMode)  { methodCall[struct{}](gdClass.obj.get(), methodDirectionalLight3D[4], &mode) }
func (gdClass DirectionalLight3D) GetSkyMode() DirectionalLight3DSkyMode { return methodCall[DirectionalLight3DSkyMode](gdClass.obj.get(), methodDirectionalLight3D[5]) }

type Directory struct{self *Directory; obj safeObject }
func NewDirectory(ctx Context, at *Directory) Directory { if at == nil { at = new(Directory) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Directory) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Directory) owner() cObject { return gdClass.obj.get() }
func (Directory) class() string { return "Directory\000" }

func (gdClass Directory) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodDirectory [24]cMethodBind
func (gdClass Directory) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Directory) Open(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[0], &path) }
func (gdClass Directory) ListDirBegin() int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[1]) }
func (gdClass Directory) GetNext() string { return methodCall[string](gdClass.obj.get(), methodDirectory[2]) }
func (gdClass Directory) CurrentIsDir() bool { return methodCall[bool](gdClass.obj.get(), methodDirectory[3]) }
func (gdClass Directory) ListDirEnd()  { methodCall[struct{}](gdClass.obj.get(), methodDirectory[4]) }
func (gdClass Directory) GetFiles() []string { return methodCall[[]string](gdClass.obj.get(), methodDirectory[5]) }
func (gdClass Directory) GetDirectories() []string { return methodCall[[]string](gdClass.obj.get(), methodDirectory[6]) }
func (gdClass Directory) GetDriveCount() int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[7]) }
func (gdClass Directory) GetDrive(idx int64) string { return methodCall[string](gdClass.obj.get(), methodDirectory[8], &idx) }
func (gdClass Directory) GetCurrentDrive() int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[9]) }
func (gdClass Directory) ChangeDir(todir string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[10], &todir) }
func (gdClass Directory) GetCurrentDir() string { return methodCall[string](gdClass.obj.get(), methodDirectory[11]) }
func (gdClass Directory) MakeDir(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[12], &path) }
func (gdClass Directory) MakeDirRecursive(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[13], &path) }
func (gdClass Directory) FileExists(path string) bool { return methodCall[bool](gdClass.obj.get(), methodDirectory[14], &path) }
func (gdClass Directory) DirExists(path string) bool { return methodCall[bool](gdClass.obj.get(), methodDirectory[15], &path) }
func (gdClass Directory) GetSpaceLeft() int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[16]) }
func (gdClass Directory) Copy(from string, to string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[17], &from, &to) }
func (gdClass Directory) Rename(from string, to string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[18], &from, &to) }
func (gdClass Directory) Remove(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodDirectory[19], &path) }
func (gdClass Directory) SetIncludeNavigational(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDirectory[20], &enable) }
func (gdClass Directory) GetIncludeNavigational() bool { return methodCall[bool](gdClass.obj.get(), methodDirectory[21]) }
func (gdClass Directory) SetIncludeHidden(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDirectory[22], &enable) }
func (gdClass Directory) GetIncludeHidden() bool { return methodCall[bool](gdClass.obj.get(), methodDirectory[23]) }

type DisplayServerFeature int64

const (
	DisplayServerFeatureGlobalMenu DisplayServerFeature = 0
	DisplayServerFeatureSubwindows DisplayServerFeature = 1
	DisplayServerFeatureTouchscreen DisplayServerFeature = 2
	DisplayServerFeatureMouse DisplayServerFeature = 3
	DisplayServerFeatureMouseWarp DisplayServerFeature = 4
	DisplayServerFeatureClipboard DisplayServerFeature = 5
	DisplayServerFeatureVirtualKeyboard DisplayServerFeature = 6
	DisplayServerFeatureCursorShape DisplayServerFeature = 7
	DisplayServerFeatureCustomCursorShape DisplayServerFeature = 8
	DisplayServerFeatureNativeDialog DisplayServerFeature = 9
	DisplayServerFeatureIme DisplayServerFeature = 10
	DisplayServerFeatureWindowTransparency DisplayServerFeature = 11
	DisplayServerFeatureHidpi DisplayServerFeature = 12
	DisplayServerFeatureIcon DisplayServerFeature = 13
	DisplayServerFeatureNativeIcon DisplayServerFeature = 14
	DisplayServerFeatureOrientation DisplayServerFeature = 15
	DisplayServerFeatureSwapBuffers DisplayServerFeature = 16
	DisplayServerFeatureClipboardPrimary DisplayServerFeature = 18
	DisplayServerFeatureTextToSpeech DisplayServerFeature = 19
	DisplayServerFeatureExtendToTitle DisplayServerFeature = 20
)

type DisplayServerMouseMode int64

const (
	DisplayServerMouseModeVisible DisplayServerMouseMode = 0
	DisplayServerMouseModeHidden DisplayServerMouseMode = 1
	DisplayServerMouseModeCaptured DisplayServerMouseMode = 2
	DisplayServerMouseModeConfined DisplayServerMouseMode = 3
	DisplayServerMouseModeConfinedHidden DisplayServerMouseMode = 4
)

type DisplayServerScreenOrientation int64

const (
	DisplayServerScreenLandscape DisplayServerScreenOrientation = 0
	DisplayServerScreenPortrait DisplayServerScreenOrientation = 1
	DisplayServerScreenReverseLandscape DisplayServerScreenOrientation = 2
	DisplayServerScreenReversePortrait DisplayServerScreenOrientation = 3
	DisplayServerScreenSensorLandscape DisplayServerScreenOrientation = 4
	DisplayServerScreenSensorPortrait DisplayServerScreenOrientation = 5
	DisplayServerScreenSensor DisplayServerScreenOrientation = 6
)

type DisplayServerVirtualKeyboardType int64

const (
	DisplayServerKeyboardTypeDefault DisplayServerVirtualKeyboardType = 0
	DisplayServerKeyboardTypeMultiline DisplayServerVirtualKeyboardType = 1
	DisplayServerKeyboardTypeNumber DisplayServerVirtualKeyboardType = 2
	DisplayServerKeyboardTypeNumberDecimal DisplayServerVirtualKeyboardType = 3
	DisplayServerKeyboardTypePhone DisplayServerVirtualKeyboardType = 4
	DisplayServerKeyboardTypeEmailAddress DisplayServerVirtualKeyboardType = 5
	DisplayServerKeyboardTypePassword DisplayServerVirtualKeyboardType = 6
	DisplayServerKeyboardTypeUrl DisplayServerVirtualKeyboardType = 7
)

type DisplayServerCursorShape int64

const (
	DisplayServerCursorArrow DisplayServerCursorShape = 0
	DisplayServerCursorIbeam DisplayServerCursorShape = 1
	DisplayServerCursorPointingHand DisplayServerCursorShape = 2
	DisplayServerCursorCross DisplayServerCursorShape = 3
	DisplayServerCursorWait DisplayServerCursorShape = 4
	DisplayServerCursorBusy DisplayServerCursorShape = 5
	DisplayServerCursorDrag DisplayServerCursorShape = 6
	DisplayServerCursorCanDrop DisplayServerCursorShape = 7
	DisplayServerCursorForbidden DisplayServerCursorShape = 8
	DisplayServerCursorVsize DisplayServerCursorShape = 9
	DisplayServerCursorHsize DisplayServerCursorShape = 10
	DisplayServerCursorBdiagsize DisplayServerCursorShape = 11
	DisplayServerCursorFdiagsize DisplayServerCursorShape = 12
	DisplayServerCursorMove DisplayServerCursorShape = 13
	DisplayServerCursorVsplit DisplayServerCursorShape = 14
	DisplayServerCursorHsplit DisplayServerCursorShape = 15
	DisplayServerCursorHelp DisplayServerCursorShape = 16
	DisplayServerCursorMax DisplayServerCursorShape = 17
)

type DisplayServerWindowMode int64

const (
	DisplayServerWindowModeWindowed DisplayServerWindowMode = 0
	DisplayServerWindowModeMinimized DisplayServerWindowMode = 1
	DisplayServerWindowModeMaximized DisplayServerWindowMode = 2
	DisplayServerWindowModeFullscreen DisplayServerWindowMode = 3
	DisplayServerWindowModeExclusiveFullscreen DisplayServerWindowMode = 4
)

type DisplayServerWindowFlags int64

const (
	DisplayServerWindowFlagResizeDisabled DisplayServerWindowFlags = 0
	DisplayServerWindowFlagBorderless DisplayServerWindowFlags = 1
	DisplayServerWindowFlagAlwaysOnTop DisplayServerWindowFlags = 2
	DisplayServerWindowFlagTransparent DisplayServerWindowFlags = 3
	DisplayServerWindowFlagNoFocus DisplayServerWindowFlags = 4
	DisplayServerWindowFlagPopup DisplayServerWindowFlags = 5
	DisplayServerWindowFlagExtendToTitle DisplayServerWindowFlags = 6
	DisplayServerWindowFlagMax DisplayServerWindowFlags = 7
)

type DisplayServerWindowEvent int64

const (
	DisplayServerWindowEventMouseEnter DisplayServerWindowEvent = 0
	DisplayServerWindowEventMouseExit DisplayServerWindowEvent = 1
	DisplayServerWindowEventFocusIn DisplayServerWindowEvent = 2
	DisplayServerWindowEventFocusOut DisplayServerWindowEvent = 3
	DisplayServerWindowEventCloseRequest DisplayServerWindowEvent = 4
	DisplayServerWindowEventGoBackRequest DisplayServerWindowEvent = 5
	DisplayServerWindowEventDpiChange DisplayServerWindowEvent = 6
)

type DisplayServerVSyncMode int64

const (
	DisplayServerVsyncDisabled DisplayServerVSyncMode = 0
	DisplayServerVsyncEnabled DisplayServerVSyncMode = 1
	DisplayServerVsyncAdaptive DisplayServerVSyncMode = 2
	DisplayServerVsyncMailbox DisplayServerVSyncMode = 3
)

type DisplayServerHandleType int64

const (
	DisplayServerDisplayHandle DisplayServerHandleType = 0
	DisplayServerWindowHandle DisplayServerHandleType = 1
	DisplayServerWindowView DisplayServerHandleType = 2
)

type DisplayServerTTSUtteranceEvent int64

const (
	DisplayServerTtsUtteranceStarted DisplayServerTTSUtteranceEvent = 0
	DisplayServerTtsUtteranceEnded DisplayServerTTSUtteranceEvent = 1
	DisplayServerTtsUtteranceCanceled DisplayServerTTSUtteranceEvent = 2
	DisplayServerTtsUtteranceBoundary DisplayServerTTSUtteranceEvent = 3
)
var DisplayServer DisplayServerSingleton

type DisplayServerSingleton struct{self *DisplayServerSingleton; obj safeObject }
func NewDisplayServerSingleton(ctx Context, at *DisplayServerSingleton) DisplayServerSingleton { if at == nil { at = new(DisplayServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass DisplayServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass DisplayServerSingleton) owner() cObject { return gdClass.obj.get() }
func (DisplayServerSingleton) class() string { return "DisplayServerSingleton\000" }

func (gdClass DisplayServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodDisplayServerSingleton [147]cMethodBind
func (gdClass DisplayServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass DisplayServerSingleton) HasFeature(feature DisplayServerFeature) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[0], &feature) }
func (gdClass DisplayServerSingleton) GetName() string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[1]) }
func (gdClass DisplayServerSingleton) GlobalMenuAddItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[2], &menu_root, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[3], &menu_root, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddIconItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[4], &menu_root, &icon, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddIconCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[5], &menu_root, &icon, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddRadioCheckItem(menu_root string, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[6], &menu_root, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddIconRadioCheckItem(menu_root string, icon Texture2D, label string, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[7], &menu_root, &icon, &label, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddMultistateItem(menu_root string, labe string, max_states int64, default_state int64, callback Callable, tag any, accelerator Key, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[8], &menu_root, &labe, &max_states, &default_state, &callback, &tag, &accelerator, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddSubmenuItem(menu_root string, label string, submenu string, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[9], &menu_root, &label, &submenu, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuAddSeparator(menu_root string, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[10], &menu_root, &index) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemIndexFromText(menu_root string, text string) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[11], &menu_root, &text) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemIndexFromTag(menu_root string, tag any) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[12], &menu_root, &tag) }
func (gdClass DisplayServerSingleton) GlobalMenuIsItemChecked(menu_root string, idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[13], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuIsItemCheckable(menu_root string, idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[14], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuIsItemRadioCheckable(menu_root string, idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[15], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemCallback(menu_root string, idx int64) Callable { return methodCall[Callable](gdClass.obj.get(), methodDisplayServerSingleton[16], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemTag(menu_root string, idx int64) any { return methodCall[any](gdClass.obj.get(), methodDisplayServerSingleton[17], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemText(menu_root string, idx int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[18], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemSubmenu(menu_root string, idx int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[19], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemAccelerator(menu_root string, idx int64) Key { return methodCall[Key](gdClass.obj.get(), methodDisplayServerSingleton[20], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuIsItemDisabled(menu_root string, idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[21], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemTooltip(menu_root string, idx int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[22], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemState(menu_root string, idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[23], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemMaxStates(menu_root string, idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[24], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemIcon(menu_root string, idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodDisplayServerSingleton[25], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuGetItemIndentationLevel(menu_root string, idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[26], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemChecked(menu_root string, idx int64, checked bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[27], &menu_root, &idx, &checked) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemCheckable(menu_root string, idx int64, checkable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[28], &menu_root, &idx, &checkable) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemRadioCheckable(menu_root string, idx int64, checkable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[29], &menu_root, &idx, &checkable) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemCallback(menu_root string, idx int64, callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[30], &menu_root, &idx, &callback) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemTag(menu_root string, idx int64, tag any)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[31], &menu_root, &idx, &tag) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemText(menu_root string, idx int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[32], &menu_root, &idx, &text) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemSubmenu(menu_root string, idx int64, submenu string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[33], &menu_root, &idx, &submenu) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemAccelerator(menu_root string, idx int64, keycode Key)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[34], &menu_root, &idx, &keycode) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemDisabled(menu_root string, idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[35], &menu_root, &idx, &disabled) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemTooltip(menu_root string, idx int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[36], &menu_root, &idx, &tooltip) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemState(menu_root string, idx int64, state int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[37], &menu_root, &idx, &state) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemMaxStates(menu_root string, idx int64, max_states int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[38], &menu_root, &idx, &max_states) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemIcon(menu_root string, idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[39], &menu_root, &idx, &icon) }
func (gdClass DisplayServerSingleton) GlobalMenuSetItemIndentationLevel(menu_root string, idx int64, level int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[40], &menu_root, &idx, &level) }
func (gdClass DisplayServerSingleton) GlobalMenuRemoveItem(menu_root string, idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[41], &menu_root, &idx) }
func (gdClass DisplayServerSingleton) GlobalMenuClear(menu_root string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[42], &menu_root) }
func (gdClass DisplayServerSingleton) TtsIsSpeaking() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[43]) }
func (gdClass DisplayServerSingleton) TtsIsPaused() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[44]) }
func (gdClass DisplayServerSingleton) TtsGetVoices() Array { return methodCall[Array](gdClass.obj.get(), methodDisplayServerSingleton[45]) }
func (gdClass DisplayServerSingleton) TtsGetVoicesForLanguage(language string) []string { return methodCall[[]string](gdClass.obj.get(), methodDisplayServerSingleton[46], &language) }
func (gdClass DisplayServerSingleton) TtsSpeak(text string, voice string, volume int64, pitch float64, rate float64, utterance_id int64, interrupt bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[47], &text, &voice, &volume, &pitch, &rate, &utterance_id, &interrupt) }
func (gdClass DisplayServerSingleton) TtsPause()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[48]) }
func (gdClass DisplayServerSingleton) TtsResume()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[49]) }
func (gdClass DisplayServerSingleton) TtsStop()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[50]) }
func (gdClass DisplayServerSingleton) TtsSetUtteranceCallback(event DisplayServerTTSUtteranceEvent, callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[51], &event, &callable) }
func (gdClass DisplayServerSingleton) MouseSetMode(mouse_mode DisplayServerMouseMode)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[52], &mouse_mode) }
func (gdClass DisplayServerSingleton) MouseGetMode() DisplayServerMouseMode { return methodCall[DisplayServerMouseMode](gdClass.obj.get(), methodDisplayServerSingleton[53]) }
func (gdClass DisplayServerSingleton) WarpMouse(position Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[54], &position) }
func (gdClass DisplayServerSingleton) MouseGetPosition() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[55]) }
func (gdClass DisplayServerSingleton) MouseGetButtonState() MouseButton { return methodCall[MouseButton](gdClass.obj.get(), methodDisplayServerSingleton[56]) }
func (gdClass DisplayServerSingleton) ClipboardSet(clipboard string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[57], &clipboard) }
func (gdClass DisplayServerSingleton) ClipboardGet() string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[58]) }
func (gdClass DisplayServerSingleton) ClipboardHas() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[59]) }
func (gdClass DisplayServerSingleton) ClipboardSetPrimary(clipboard_primary string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[60], &clipboard_primary) }
func (gdClass DisplayServerSingleton) ClipboardGetPrimary() string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[61]) }
func (gdClass DisplayServerSingleton) GetDisplayCutouts() Array { return methodCall[Array](gdClass.obj.get(), methodDisplayServerSingleton[62]) }
func (gdClass DisplayServerSingleton) GetDisplaySafeArea() Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodDisplayServerSingleton[63]) }
func (gdClass DisplayServerSingleton) GetScreenCount() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[64]) }
func (gdClass DisplayServerSingleton) ScreenGetPosition(screen int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[65], &screen) }
func (gdClass DisplayServerSingleton) ScreenGetSize(screen int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[66], &screen) }
func (gdClass DisplayServerSingleton) ScreenGetUsableRect(screen int64) Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodDisplayServerSingleton[67], &screen) }
func (gdClass DisplayServerSingleton) ScreenGetDpi(screen int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[68], &screen) }
func (gdClass DisplayServerSingleton) ScreenGetScale(screen int64) float64 { return methodCall[float64](gdClass.obj.get(), methodDisplayServerSingleton[69], &screen) }
func (gdClass DisplayServerSingleton) ScreenIsTouchscreen(screen int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[70], &screen) }
func (gdClass DisplayServerSingleton) ScreenGetMaxScale() float64 { return methodCall[float64](gdClass.obj.get(), methodDisplayServerSingleton[71]) }
func (gdClass DisplayServerSingleton) ScreenGetRefreshRate(screen int64) float64 { return methodCall[float64](gdClass.obj.get(), methodDisplayServerSingleton[72], &screen) }
func (gdClass DisplayServerSingleton) ScreenSetOrientation(orientation DisplayServerScreenOrientation, screen int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[73], &orientation, &screen) }
func (gdClass DisplayServerSingleton) ScreenGetOrientation(screen int64) DisplayServerScreenOrientation { return methodCall[DisplayServerScreenOrientation](gdClass.obj.get(), methodDisplayServerSingleton[74], &screen) }
func (gdClass DisplayServerSingleton) ScreenSetKeepOn(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[75], &enable) }
func (gdClass DisplayServerSingleton) ScreenIsKeptOn() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[76]) }
func (gdClass DisplayServerSingleton) GetWindowList() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodDisplayServerSingleton[77]) }
func (gdClass DisplayServerSingleton) GetWindowAtScreenPosition(position Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[78], &position) }
func (gdClass DisplayServerSingleton) CreateSubWindow(mode DisplayServerWindowMode, vsync_mode DisplayServerVSyncMode, flags int64, rect Rect2i) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[79], &mode, &vsync_mode, &flags, &rect) }
func (gdClass DisplayServerSingleton) DeleteSubWindow(window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[80], &window_id) }
func (gdClass DisplayServerSingleton) WindowGetNativeHandle(handle_type DisplayServerHandleType, window_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[81], &handle_type, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetActivePopup() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[82]) }
func (gdClass DisplayServerSingleton) WindowSetPopupSafeRect(window int64, rect Rect2i)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[83], &window, &rect) }
func (gdClass DisplayServerSingleton) WindowGetPopupSafeRect(window int64) Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodDisplayServerSingleton[84], &window) }
func (gdClass DisplayServerSingleton) WindowSetTitle(title string, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[85], &title, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetMousePassthrough(region []Vector2, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[86], &region, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetCurrentScreen(window_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[87], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetCurrentScreen(screen int64, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[88], &screen, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetPosition(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[89], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetPosition(position Vector2i, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[90], &position, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetSize(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[91], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetSize(size Vector2i, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[92], &size, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetRectChangedCallback(callback Callable, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[93], &callback, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetWindowEventCallback(callback Callable, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[94], &callback, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetInputEventCallback(callback Callable, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[95], &callback, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetInputTextCallback(callback Callable, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[96], &callback, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetDropFilesCallback(callback Callable, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[97], &callback, &window_id) }
func (gdClass DisplayServerSingleton) WindowAttachInstanceId(instance_id int64, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[98], &instance_id, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetAttachedInstanceId(window_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[99], &window_id) }
func (gdClass DisplayServerSingleton) WindowGetMaxSize(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[100], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetMaxSize(max_size Vector2i, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[101], &max_size, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetMinSize(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[102], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetMinSize(min_size Vector2i, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[103], &min_size, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetRealSize(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[104], &window_id) }
func (gdClass DisplayServerSingleton) WindowGetMode(window_id int64) DisplayServerWindowMode { return methodCall[DisplayServerWindowMode](gdClass.obj.get(), methodDisplayServerSingleton[105], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetMode(mode DisplayServerWindowMode, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[106], &mode, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetFlag(flag DisplayServerWindowFlags, enabled bool, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[107], &flag, &enabled, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetFlag(flag DisplayServerWindowFlags, window_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[108], &flag, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetSafeTitleMargins(window_id int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[109], &window_id) }
func (gdClass DisplayServerSingleton) WindowRequestAttention(window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[110], &window_id) }
func (gdClass DisplayServerSingleton) WindowMoveToForeground(window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[111], &window_id) }
func (gdClass DisplayServerSingleton) WindowCanDraw(window_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[112], &window_id) }
func (gdClass DisplayServerSingleton) WindowSetTransient(window_id int64, parent_window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[113], &window_id, &parent_window_id) }
func (gdClass DisplayServerSingleton) WindowSetExclusive(window_id int64, exclusive bool)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[114], &window_id, &exclusive) }
func (gdClass DisplayServerSingleton) WindowSetImeActive(active bool, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[115], &active, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetImePosition(position Vector2i, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[116], &position, &window_id) }
func (gdClass DisplayServerSingleton) WindowSetVsyncMode(vsync_mode DisplayServerVSyncMode, window_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[117], &vsync_mode, &window_id) }
func (gdClass DisplayServerSingleton) WindowGetVsyncMode(window_id int64) DisplayServerVSyncMode { return methodCall[DisplayServerVSyncMode](gdClass.obj.get(), methodDisplayServerSingleton[118], &window_id) }
func (gdClass DisplayServerSingleton) WindowMaximizeOnTitleDblClick() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[119]) }
func (gdClass DisplayServerSingleton) WindowMinimizeOnTitleDblClick() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[120]) }
func (gdClass DisplayServerSingleton) ImeGetSelection() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodDisplayServerSingleton[121]) }
func (gdClass DisplayServerSingleton) ImeGetText() string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[122]) }
func (gdClass DisplayServerSingleton) VirtualKeyboardShow(existing_text string, position Rect2, atype DisplayServerVirtualKeyboardType, max_length int64, cursor_start int64, cursor_end int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[123], &existing_text, &position, &atype, &max_length, &cursor_start, &cursor_end) }
func (gdClass DisplayServerSingleton) VirtualKeyboardHide()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[124]) }
func (gdClass DisplayServerSingleton) VirtualKeyboardGetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[125]) }
func (gdClass DisplayServerSingleton) CursorSetShape(shape DisplayServerCursorShape)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[126], &shape) }
func (gdClass DisplayServerSingleton) CursorGetShape() DisplayServerCursorShape { return methodCall[DisplayServerCursorShape](gdClass.obj.get(), methodDisplayServerSingleton[127]) }
func (gdClass DisplayServerSingleton) CursorSetCustomImage(cursor Resource, shape DisplayServerCursorShape, hotspot Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[128], &cursor, &shape, &hotspot) }
func (gdClass DisplayServerSingleton) GetSwapCancelOk() bool { return methodCall[bool](gdClass.obj.get(), methodDisplayServerSingleton[129]) }
func (gdClass DisplayServerSingleton) EnableForStealingFocus(process_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[130], &process_id) }
func (gdClass DisplayServerSingleton) DialogShow(title string, description string, buttons []string, callback Callable) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[131], &title, &description, &buttons, &callback) }
func (gdClass DisplayServerSingleton) DialogInputText(title string, description string, existing_text string, callback Callable) int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[132], &title, &description, &existing_text, &callback) }
func (gdClass DisplayServerSingleton) KeyboardGetLayoutCount() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[133]) }
func (gdClass DisplayServerSingleton) KeyboardGetCurrentLayout() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[134]) }
func (gdClass DisplayServerSingleton) KeyboardSetCurrentLayout(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[135], &index) }
func (gdClass DisplayServerSingleton) KeyboardGetLayoutLanguage(index int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[136], &index) }
func (gdClass DisplayServerSingleton) KeyboardGetLayoutName(index int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[137], &index) }
func (gdClass DisplayServerSingleton) KeyboardGetKeycodeFromPhysical(keycode Key) Key { return methodCall[Key](gdClass.obj.get(), methodDisplayServerSingleton[138], &keycode) }
func (gdClass DisplayServerSingleton) ProcessEvents()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[139]) }
func (gdClass DisplayServerSingleton) ForceProcessAndDropEvents()  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[140]) }
func (gdClass DisplayServerSingleton) SetNativeIcon(filename string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[141], &filename) }
func (gdClass DisplayServerSingleton) SetIcon(image Image)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[142], &image) }
func (gdClass DisplayServerSingleton) TabletGetDriverCount() int64 { return methodCall[int64](gdClass.obj.get(), methodDisplayServerSingleton[143]) }
func (gdClass DisplayServerSingleton) TabletGetDriverName(idx int64) string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[144], &idx) }
func (gdClass DisplayServerSingleton) TabletGetCurrentDriver() string { return methodCall[string](gdClass.obj.get(), methodDisplayServerSingleton[145]) }
func (gdClass DisplayServerSingleton) TabletSetCurrentDriver(name string)  { methodCall[struct{}](gdClass.obj.get(), methodDisplayServerSingleton[146], &name) }

type ENetConnectionCompressionMode int64

const (
	ENetConnectionCompressNone ENetConnectionCompressionMode = 0
	ENetConnectionCompressRangeCoder ENetConnectionCompressionMode = 1
	ENetConnectionCompressFastlz ENetConnectionCompressionMode = 2
	ENetConnectionCompressZlib ENetConnectionCompressionMode = 3
	ENetConnectionCompressZstd ENetConnectionCompressionMode = 4
)

type ENetConnectionEventType int64

const (
	ENetConnectionEventError ENetConnectionEventType = -1
	ENetConnectionEventNone ENetConnectionEventType = 0
	ENetConnectionEventConnect ENetConnectionEventType = 1
	ENetConnectionEventDisconnect ENetConnectionEventType = 2
	ENetConnectionEventReceive ENetConnectionEventType = 3
)

type ENetConnectionHostStatistic int64

const (
	ENetConnectionHostTotalSentData ENetConnectionHostStatistic = 0
	ENetConnectionHostTotalSentPackets ENetConnectionHostStatistic = 1
	ENetConnectionHostTotalReceivedData ENetConnectionHostStatistic = 2
	ENetConnectionHostTotalReceivedPackets ENetConnectionHostStatistic = 3
)

type ENetConnection struct{self *ENetConnection; obj safeObject }
func NewENetConnection(ctx Context, at *ENetConnection) ENetConnection { if at == nil { at = new(ENetConnection) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ENetConnection) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ENetConnection) owner() cObject { return gdClass.obj.get() }
func (ENetConnection) class() string { return "ENetConnection\000" }

func (gdClass ENetConnection) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodENetConnection [17]cMethodBind
func (gdClass ENetConnection) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass ENetConnection) CreateHostBound(bind_address string, bind_port int64, max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[0], &bind_address, &bind_port, &max_peers, &max_channels, &in_bandwidth, &out_bandwidth) }
func (gdClass ENetConnection) CreateHost(max_peers int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[1], &max_peers, &max_channels, &in_bandwidth, &out_bandwidth) }
func (gdClass ENetConnection) Destroy()  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[2]) }
func (gdClass ENetConnection) ConnectToHost(address string, port int64, channels int64, data int64) ENetPacketPeer { return methodCall[ENetPacketPeer](gdClass.obj.get(), methodENetConnection[3], &address, &port, &channels, &data) }
func (gdClass ENetConnection) Service(timeout int64) Array { return methodCall[Array](gdClass.obj.get(), methodENetConnection[4], &timeout) }
func (gdClass ENetConnection) Flush()  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[5]) }
func (gdClass ENetConnection) BandwidthLimit(in_bandwidth int64, out_bandwidth int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[6], &in_bandwidth, &out_bandwidth) }
func (gdClass ENetConnection) ChannelLimit(limit int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[7], &limit) }
func (gdClass ENetConnection) Broadcast(channel int64, packet []byte, flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[8], &channel, &packet, &flags) }
func (gdClass ENetConnection) Compress(mode ENetConnectionCompressionMode)  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[9], &mode) }
func (gdClass ENetConnection) DtlsServerSetup(key CryptoKey, certificate X509Certificate) int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[10], &key, &certificate) }
func (gdClass ENetConnection) DtlsClientSetup(certificate X509Certificate, hostname string, verify bool) int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[11], &certificate, &hostname, &verify) }
func (gdClass ENetConnection) RefuseNewConnections(refuse bool)  { methodCall[struct{}](gdClass.obj.get(), methodENetConnection[12], &refuse) }
func (gdClass ENetConnection) PopStatistic(statistic ENetConnectionHostStatistic) float64 { return methodCall[float64](gdClass.obj.get(), methodENetConnection[13], &statistic) }
func (gdClass ENetConnection) GetMaxChannels() int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[14]) }
func (gdClass ENetConnection) GetLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodENetConnection[15]) }
func (gdClass ENetConnection) GetPeers() Array { return methodCall[Array](gdClass.obj.get(), methodENetConnection[16]) }

type ENetMultiplayerPeer struct{self *ENetMultiplayerPeer; obj safeObject }
func NewENetMultiplayerPeer(ctx Context, at *ENetMultiplayerPeer) ENetMultiplayerPeer { if at == nil { at = new(ENetMultiplayerPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ENetMultiplayerPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ENetMultiplayerPeer) owner() cObject { return gdClass.obj.get() }
func (ENetMultiplayerPeer) class() string { return "ENetMultiplayerPeer\000" }

func (gdClass ENetMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer{obj:gdClass.obj} }

var methodENetMultiplayerPeer [10]cMethodBind
func (gdClass ENetMultiplayerPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MultiplayerPeer().virtual(rtype, name)
}
func (gdClass ENetMultiplayerPeer) CreateServer(port int64, max_clients int64, max_channels int64, in_bandwidth int64, out_bandwidth int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetMultiplayerPeer[0], &port, &max_clients, &max_channels, &in_bandwidth, &out_bandwidth) }
func (gdClass ENetMultiplayerPeer) CreateClient(address string, port int64, channel_count int64, in_bandwidth int64, out_bandwidth int64, local_port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetMultiplayerPeer[1], &address, &port, &channel_count, &in_bandwidth, &out_bandwidth, &local_port) }
func (gdClass ENetMultiplayerPeer) CreateMesh(unique_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetMultiplayerPeer[2], &unique_id) }
func (gdClass ENetMultiplayerPeer) AddMeshPeer(peer_id int64, host ENetConnection) int64 { return methodCall[int64](gdClass.obj.get(), methodENetMultiplayerPeer[3], &peer_id, &host) }
func (gdClass ENetMultiplayerPeer) CloseConnection(wait_usec int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetMultiplayerPeer[4], &wait_usec) }
func (gdClass ENetMultiplayerPeer) SetBindIp(ip string)  { methodCall[struct{}](gdClass.obj.get(), methodENetMultiplayerPeer[5], &ip) }
func (gdClass ENetMultiplayerPeer) SetServerRelayEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodENetMultiplayerPeer[6], &enabled) }
func (gdClass ENetMultiplayerPeer) IsServerRelayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodENetMultiplayerPeer[7]) }
func (gdClass ENetMultiplayerPeer) GetHost() ENetConnection { return methodCall[ENetConnection](gdClass.obj.get(), methodENetMultiplayerPeer[8]) }
func (gdClass ENetMultiplayerPeer) GetPeer(id int64) ENetPacketPeer { return methodCall[ENetPacketPeer](gdClass.obj.get(), methodENetMultiplayerPeer[9], &id) }

type ENetPacketPeerPeerState int64

const (
	ENetPacketPeerStateDisconnected ENetPacketPeerPeerState = 0
	ENetPacketPeerStateConnecting ENetPacketPeerPeerState = 1
	ENetPacketPeerStateAcknowledgingConnect ENetPacketPeerPeerState = 2
	ENetPacketPeerStateConnectionPending ENetPacketPeerPeerState = 3
	ENetPacketPeerStateConnectionSucceeded ENetPacketPeerPeerState = 4
	ENetPacketPeerStateConnected ENetPacketPeerPeerState = 5
	ENetPacketPeerStateDisconnectLater ENetPacketPeerPeerState = 6
	ENetPacketPeerStateDisconnecting ENetPacketPeerPeerState = 7
	ENetPacketPeerStateAcknowledgingDisconnect ENetPacketPeerPeerState = 8
	ENetPacketPeerStateZombie ENetPacketPeerPeerState = 9
)

type ENetPacketPeerPeerStatistic int64

const (
	ENetPacketPeerPeerPacketLoss ENetPacketPeerPeerStatistic = 0
	ENetPacketPeerPeerPacketLossVariance ENetPacketPeerPeerStatistic = 1
	ENetPacketPeerPeerPacketLossEpoch ENetPacketPeerPeerStatistic = 2
	ENetPacketPeerPeerRoundTripTime ENetPacketPeerPeerStatistic = 3
	ENetPacketPeerPeerRoundTripTimeVariance ENetPacketPeerPeerStatistic = 4
	ENetPacketPeerPeerLastRoundTripTime ENetPacketPeerPeerStatistic = 5
	ENetPacketPeerPeerLastRoundTripTimeVariance ENetPacketPeerPeerStatistic = 6
	ENetPacketPeerPeerPacketThrottle ENetPacketPeerPeerStatistic = 7
	ENetPacketPeerPeerPacketThrottleLimit ENetPacketPeerPeerStatistic = 8
	ENetPacketPeerPeerPacketThrottleCounter ENetPacketPeerPeerStatistic = 9
	ENetPacketPeerPeerPacketThrottleEpoch ENetPacketPeerPeerStatistic = 10
	ENetPacketPeerPeerPacketThrottleAcceleration ENetPacketPeerPeerStatistic = 11
	ENetPacketPeerPeerPacketThrottleDeceleration ENetPacketPeerPeerStatistic = 12
	ENetPacketPeerPeerPacketThrottleInterval ENetPacketPeerPeerStatistic = 13
)

type ENetPacketPeer struct{self *ENetPacketPeer; obj safeObject }
func NewENetPacketPeer(ctx Context, at *ENetPacketPeer) ENetPacketPeer { if at == nil { at = new(ENetPacketPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ENetPacketPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ENetPacketPeer) owner() cObject { return gdClass.obj.get() }
func (ENetPacketPeer) class() string { return "ENetPacketPeer\000" }

func (gdClass ENetPacketPeer) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodENetPacketPeer [15]cMethodBind
func (gdClass ENetPacketPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass ENetPacketPeer) PeerDisconnect(data int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[0], &data) }
func (gdClass ENetPacketPeer) PeerDisconnectLater(data int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[1], &data) }
func (gdClass ENetPacketPeer) PeerDisconnectNow(data int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[2], &data) }
func (gdClass ENetPacketPeer) Ping()  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[3]) }
func (gdClass ENetPacketPeer) PingInterval(ping_interval int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[4], &ping_interval) }
func (gdClass ENetPacketPeer) Reset()  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[5]) }
func (gdClass ENetPacketPeer) Send(channel int64, packet []byte, flags int64) int64 { return methodCall[int64](gdClass.obj.get(), methodENetPacketPeer[6], &channel, &packet, &flags) }
func (gdClass ENetPacketPeer) ThrottleConfigure(interval int64, acceleration int64, deceleration int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[7], &interval, &acceleration, &deceleration) }
func (gdClass ENetPacketPeer) SetTimeout(timeout int64, timeout_min int64, timeout_max int64)  { methodCall[struct{}](gdClass.obj.get(), methodENetPacketPeer[8], &timeout, &timeout_min, &timeout_max) }
func (gdClass ENetPacketPeer) GetRemoteAddress() string { return methodCall[string](gdClass.obj.get(), methodENetPacketPeer[9]) }
func (gdClass ENetPacketPeer) GetRemotePort() int64 { return methodCall[int64](gdClass.obj.get(), methodENetPacketPeer[10]) }
func (gdClass ENetPacketPeer) GetStatistic(statistic ENetPacketPeerPeerStatistic) float64 { return methodCall[float64](gdClass.obj.get(), methodENetPacketPeer[11], &statistic) }
func (gdClass ENetPacketPeer) GetState() ENetPacketPeerPeerState { return methodCall[ENetPacketPeerPeerState](gdClass.obj.get(), methodENetPacketPeer[12]) }
func (gdClass ENetPacketPeer) GetChannels() int64 { return methodCall[int64](gdClass.obj.get(), methodENetPacketPeer[13]) }
func (gdClass ENetPacketPeer) IsActive() bool { return methodCall[bool](gdClass.obj.get(), methodENetPacketPeer[14]) }

type EditorCommandPalette struct{self *EditorCommandPalette; obj safeObject }
func NewEditorCommandPalette(ctx Context, at *EditorCommandPalette) EditorCommandPalette { if at == nil { at = new(EditorCommandPalette) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorCommandPalette) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorCommandPalette) owner() cObject { return gdClass.obj.get() }
func (EditorCommandPalette) class() string { return "EditorCommandPalette\000" }

func (gdClass EditorCommandPalette) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog{obj:gdClass.obj} }

var methodEditorCommandPalette [2]cMethodBind
func (gdClass EditorCommandPalette) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ConfirmationDialog().virtual(rtype, name)
}
func (gdClass EditorCommandPalette) AddCommand(command_name string, key_name string, binded_callable Callable, shortcut_text string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorCommandPalette[0], &command_name, &key_name, &binded_callable, &shortcut_text) }
func (gdClass EditorCommandPalette) RemoveCommand(key_name string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorCommandPalette[1], &key_name) }

type EditorDebuggerPlugin struct{self *EditorDebuggerPlugin; obj safeObject }
func NewEditorDebuggerPlugin(ctx Context, at *EditorDebuggerPlugin) EditorDebuggerPlugin { if at == nil { at = new(EditorDebuggerPlugin) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorDebuggerPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorDebuggerPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorDebuggerPlugin) class() string { return "EditorDebuggerPlugin\000" }

func (gdClass EditorDebuggerPlugin) Control() Control { return Control{obj:gdClass.obj} }

var methodEditorDebuggerPlugin [7]cMethodBind
func (gdClass EditorDebuggerPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass EditorDebuggerPlugin) SendMessage(message string, data Array)  { methodCall[struct{}](gdClass.obj.get(), methodEditorDebuggerPlugin[0], &message, &data) }
func (gdClass EditorDebuggerPlugin) RegisterMessageCapture(name Name, callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodEditorDebuggerPlugin[1], &name, &callable) }
func (gdClass EditorDebuggerPlugin) UnregisterMessageCapture(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodEditorDebuggerPlugin[2], &name) }
func (gdClass EditorDebuggerPlugin) HasCapture(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEditorDebuggerPlugin[3], &name) }
func (gdClass EditorDebuggerPlugin) IsBreaked() bool { return methodCall[bool](gdClass.obj.get(), methodEditorDebuggerPlugin[4]) }
func (gdClass EditorDebuggerPlugin) IsDebuggable() bool { return methodCall[bool](gdClass.obj.get(), methodEditorDebuggerPlugin[5]) }
func (gdClass EditorDebuggerPlugin) IsSessionActive() bool { return methodCall[bool](gdClass.obj.get(), methodEditorDebuggerPlugin[6]) }

type EditorExportPlugin struct{self *EditorExportPlugin; obj safeObject }
func NewEditorExportPlugin(ctx Context, at *EditorExportPlugin) EditorExportPlugin { if at == nil { at = new(EditorExportPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorExportPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorExportPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorExportPlugin) class() string { return "EditorExportPlugin\000" }

func (gdClass EditorExportPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorExportPlugin [11]cMethodBind
func (gdClass EditorExportPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_export_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportFile(path string, atype string, features []string)  }{}).Elem()) {
			return rtype.MethodByName(`ExportFile`)
		}
		return
	case "_export_begin":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportBegin(features []string, is_debug bool, path string, flags int64)  }{}).Elem()) {
			return rtype.MethodByName(`ExportBegin`)
		}
		return
	case "_export_end":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportEnd()  }{}).Elem()) {
			return rtype.MethodByName(`ExportEnd`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorExportPlugin) AddSharedObject(path string, tags []string, target string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[0], &path, &tags, &target) }
func (gdClass EditorExportPlugin) AddIosProjectStaticLib(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[1], &path) }
func (gdClass EditorExportPlugin) AddFile(path string, file []byte, remap bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[2], &path, &file, &remap) }
func (gdClass EditorExportPlugin) AddIosFramework(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[3], &path) }
func (gdClass EditorExportPlugin) AddIosEmbeddedFramework(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[4], &path) }
func (gdClass EditorExportPlugin) AddIosPlistContent(plist_content string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[5], &plist_content) }
func (gdClass EditorExportPlugin) AddIosLinkerFlags(flags string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[6], &flags) }
func (gdClass EditorExportPlugin) AddIosBundleFile(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[7], &path) }
func (gdClass EditorExportPlugin) AddIosCppCode(code string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[8], &code) }
func (gdClass EditorExportPlugin) AddMacosPluginFile(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[9], &path) }
func (gdClass EditorExportPlugin) Skip()  { methodCall[struct{}](gdClass.obj.get(), methodEditorExportPlugin[10]) }

type EditorFeatureProfileFeature int64

const (
	EditorFeatureProfileFeature3d EditorFeatureProfileFeature = 0
	EditorFeatureProfileFeatureScript EditorFeatureProfileFeature = 1
	EditorFeatureProfileFeatureAssetLib EditorFeatureProfileFeature = 2
	EditorFeatureProfileFeatureSceneTree EditorFeatureProfileFeature = 3
	EditorFeatureProfileFeatureNodeDock EditorFeatureProfileFeature = 4
	EditorFeatureProfileFeatureFilesystemDock EditorFeatureProfileFeature = 5
	EditorFeatureProfileFeatureImportDock EditorFeatureProfileFeature = 6
	EditorFeatureProfileFeatureMax EditorFeatureProfileFeature = 7
)

type EditorFeatureProfile struct{self *EditorFeatureProfile; obj safeObject }
func NewEditorFeatureProfile(ctx Context, at *EditorFeatureProfile) EditorFeatureProfile { if at == nil { at = new(EditorFeatureProfile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorFeatureProfile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorFeatureProfile) owner() cObject { return gdClass.obj.get() }
func (EditorFeatureProfile) class() string { return "EditorFeatureProfile\000" }

func (gdClass EditorFeatureProfile) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorFeatureProfile [11]cMethodBind
func (gdClass EditorFeatureProfile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorFeatureProfile) SetDisableClass(class_name Name, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFeatureProfile[0], &class_name, &disable) }
func (gdClass EditorFeatureProfile) IsClassDisabled(class_name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEditorFeatureProfile[1], &class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassEditor(class_name Name, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFeatureProfile[2], &class_name, &disable) }
func (gdClass EditorFeatureProfile) IsClassEditorDisabled(class_name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEditorFeatureProfile[3], &class_name) }
func (gdClass EditorFeatureProfile) SetDisableClassProperty(class_name Name, property Name, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFeatureProfile[4], &class_name, &property, &disable) }
func (gdClass EditorFeatureProfile) IsClassPropertyDisabled(class_name Name, property Name) bool { return methodCall[bool](gdClass.obj.get(), methodEditorFeatureProfile[5], &class_name, &property) }
func (gdClass EditorFeatureProfile) SetDisableFeature(feature EditorFeatureProfileFeature, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFeatureProfile[6], &feature, &disable) }
func (gdClass EditorFeatureProfile) IsFeatureDisabled(feature EditorFeatureProfileFeature) bool { return methodCall[bool](gdClass.obj.get(), methodEditorFeatureProfile[7], &feature) }
func (gdClass EditorFeatureProfile) GetFeatureName(feature EditorFeatureProfileFeature) string { return methodCall[string](gdClass.obj.get(), methodEditorFeatureProfile[8], &feature) }
func (gdClass EditorFeatureProfile) SaveToFile(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFeatureProfile[9], &path) }
func (gdClass EditorFeatureProfile) LoadFromFile(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFeatureProfile[10], &path) }

type EditorFileDialogFileMode int64

const (
	EditorFileDialogFileModeOpenFile EditorFileDialogFileMode = 0
	EditorFileDialogFileModeOpenFiles EditorFileDialogFileMode = 1
	EditorFileDialogFileModeOpenDir EditorFileDialogFileMode = 2
	EditorFileDialogFileModeOpenAny EditorFileDialogFileMode = 3
	EditorFileDialogFileModeSaveFile EditorFileDialogFileMode = 4
)

type EditorFileDialogAccess int64

const (
	EditorFileDialogAccessResources EditorFileDialogAccess = 0
	EditorFileDialogAccessUserdata EditorFileDialogAccess = 1
	EditorFileDialogAccessFilesystem EditorFileDialogAccess = 2
)

type EditorFileDialogDisplayMode int64

const (
	EditorFileDialogDisplayThumbnails EditorFileDialogDisplayMode = 0
	EditorFileDialogDisplayList EditorFileDialogDisplayMode = 1
)

type EditorFileDialog struct{self *EditorFileDialog; obj safeObject }
func NewEditorFileDialog(ctx Context, at *EditorFileDialog) EditorFileDialog { if at == nil { at = new(EditorFileDialog) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorFileDialog) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorFileDialog) owner() cObject { return gdClass.obj.get() }
func (EditorFileDialog) class() string { return "EditorFileDialog\000" }

func (gdClass EditorFileDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog{obj:gdClass.obj} }

var methodEditorFileDialog [20]cMethodBind
func (gdClass EditorFileDialog) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ConfirmationDialog().virtual(rtype, name)
}
func (gdClass EditorFileDialog) ClearFilters()  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[0]) }
func (gdClass EditorFileDialog) AddFilter(filter string, description string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[1], &filter, &description) }
func (gdClass EditorFileDialog) GetCurrentDir() string { return methodCall[string](gdClass.obj.get(), methodEditorFileDialog[2]) }
func (gdClass EditorFileDialog) GetCurrentFile() string { return methodCall[string](gdClass.obj.get(), methodEditorFileDialog[3]) }
func (gdClass EditorFileDialog) GetCurrentPath() string { return methodCall[string](gdClass.obj.get(), methodEditorFileDialog[4]) }
func (gdClass EditorFileDialog) SetCurrentDir(dir string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[5], &dir) }
func (gdClass EditorFileDialog) SetCurrentFile(file string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[6], &file) }
func (gdClass EditorFileDialog) SetCurrentPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[7], &path) }
func (gdClass EditorFileDialog) SetFileMode(mode EditorFileDialogFileMode)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[8], &mode) }
func (gdClass EditorFileDialog) GetFileMode() EditorFileDialogFileMode { return methodCall[EditorFileDialogFileMode](gdClass.obj.get(), methodEditorFileDialog[9]) }
func (gdClass EditorFileDialog) GetVbox() VBoxContainer { return methodCall[VBoxContainer](gdClass.obj.get(), methodEditorFileDialog[10]) }
func (gdClass EditorFileDialog) SetAccess(access EditorFileDialogAccess)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[11], &access) }
func (gdClass EditorFileDialog) GetAccess() EditorFileDialogAccess { return methodCall[EditorFileDialogAccess](gdClass.obj.get(), methodEditorFileDialog[12]) }
func (gdClass EditorFileDialog) SetShowHiddenFiles(show bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[13], &show) }
func (gdClass EditorFileDialog) IsShowingHiddenFiles() bool { return methodCall[bool](gdClass.obj.get(), methodEditorFileDialog[14]) }
func (gdClass EditorFileDialog) SetDisplayMode(mode EditorFileDialogDisplayMode)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[15], &mode) }
func (gdClass EditorFileDialog) GetDisplayMode() EditorFileDialogDisplayMode { return methodCall[EditorFileDialogDisplayMode](gdClass.obj.get(), methodEditorFileDialog[16]) }
func (gdClass EditorFileDialog) SetDisableOverwriteWarning(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[17], &disable) }
func (gdClass EditorFileDialog) IsOverwriteWarningDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodEditorFileDialog[18]) }
func (gdClass EditorFileDialog) Invalidate()  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileDialog[19]) }

type EditorFileSystem struct{self *EditorFileSystem; obj safeObject }
func NewEditorFileSystem(ctx Context, at *EditorFileSystem) EditorFileSystem { if at == nil { at = new(EditorFileSystem) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorFileSystem) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorFileSystem) owner() cObject { return gdClass.obj.get() }
func (EditorFileSystem) class() string { return "EditorFileSystem\000" }

func (gdClass EditorFileSystem) Node() Node { return Node{obj:gdClass.obj} }

var methodEditorFileSystem [10]cMethodBind
func (gdClass EditorFileSystem) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass EditorFileSystem) GetFilesystem() EditorFileSystemDirectory { return methodCall[EditorFileSystemDirectory](gdClass.obj.get(), methodEditorFileSystem[0]) }
func (gdClass EditorFileSystem) IsScanning() bool { return methodCall[bool](gdClass.obj.get(), methodEditorFileSystem[1]) }
func (gdClass EditorFileSystem) GetScanningProgress() float64 { return methodCall[float64](gdClass.obj.get(), methodEditorFileSystem[2]) }
func (gdClass EditorFileSystem) Scan()  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileSystem[3]) }
func (gdClass EditorFileSystem) ScanSources()  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileSystem[4]) }
func (gdClass EditorFileSystem) UpdateFile(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileSystem[5], &path) }
func (gdClass EditorFileSystem) GetFilesystemPath(path string) EditorFileSystemDirectory { return methodCall[EditorFileSystemDirectory](gdClass.obj.get(), methodEditorFileSystem[6], &path) }
func (gdClass EditorFileSystem) GetFileType(path string) string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystem[7], &path) }
func (gdClass EditorFileSystem) UpdateScriptClasses()  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileSystem[8]) }
func (gdClass EditorFileSystem) ReimportFiles(files []string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorFileSystem[9], &files) }

type EditorFileSystemDirectory struct{self *EditorFileSystemDirectory; obj safeObject }
func NewEditorFileSystemDirectory(ctx Context, at *EditorFileSystemDirectory) EditorFileSystemDirectory { if at == nil { at = new(EditorFileSystemDirectory) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorFileSystemDirectory) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorFileSystemDirectory) owner() cObject { return gdClass.obj.get() }
func (EditorFileSystemDirectory) class() string { return "EditorFileSystemDirectory\000" }

func (gdClass EditorFileSystemDirectory) Object() Object { return Object{obj:gdClass.obj} }

var methodEditorFileSystemDirectory [14]cMethodBind
func (gdClass EditorFileSystemDirectory) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EditorFileSystemDirectory) GetSubdirCount() int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFileSystemDirectory[0]) }
func (gdClass EditorFileSystemDirectory) GetSubdir(idx int64) EditorFileSystemDirectory { return methodCall[EditorFileSystemDirectory](gdClass.obj.get(), methodEditorFileSystemDirectory[1], &idx) }
func (gdClass EditorFileSystemDirectory) GetFileCount() int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFileSystemDirectory[2]) }
func (gdClass EditorFileSystemDirectory) GetFile(idx int64) string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[3], &idx) }
func (gdClass EditorFileSystemDirectory) GetFilePath(idx int64) string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[4], &idx) }
func (gdClass EditorFileSystemDirectory) GetFileType(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodEditorFileSystemDirectory[5], &idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassName(idx int64) string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[6], &idx) }
func (gdClass EditorFileSystemDirectory) GetFileScriptClassExtends(idx int64) string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[7], &idx) }
func (gdClass EditorFileSystemDirectory) GetFileImportIsValid(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodEditorFileSystemDirectory[8], &idx) }
func (gdClass EditorFileSystemDirectory) GetName() string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[9]) }
func (gdClass EditorFileSystemDirectory) GetPath() string { return methodCall[string](gdClass.obj.get(), methodEditorFileSystemDirectory[10]) }
func (gdClass EditorFileSystemDirectory) GetParent() EditorFileSystemDirectory { return methodCall[EditorFileSystemDirectory](gdClass.obj.get(), methodEditorFileSystemDirectory[11]) }
func (gdClass EditorFileSystemDirectory) FindFileIndex(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFileSystemDirectory[12], &name) }
func (gdClass EditorFileSystemDirectory) FindDirIndex(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodEditorFileSystemDirectory[13], &name) }

type EditorFileSystemImportFormatSupportQuery struct{self *EditorFileSystemImportFormatSupportQuery; obj safeObject }
func NewEditorFileSystemImportFormatSupportQuery(ctx Context, at *EditorFileSystemImportFormatSupportQuery) EditorFileSystemImportFormatSupportQuery { if at == nil { at = new(EditorFileSystemImportFormatSupportQuery) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorFileSystemImportFormatSupportQuery) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorFileSystemImportFormatSupportQuery) owner() cObject { return gdClass.obj.get() }
func (EditorFileSystemImportFormatSupportQuery) class() string { return "EditorFileSystemImportFormatSupportQuery\000" }

func (gdClass EditorFileSystemImportFormatSupportQuery) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EditorFileSystemImportFormatSupportQuery) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_is_active":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsActive() bool }{}).Elem()) {
			return rtype.MethodByName(`IsActive`)
		}
		return
	case "_get_file_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetFileExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetFileExtensions`)
		}
		return
	case "_query":
		if rtype.Implements(reflect.TypeOf([0]interface{ Query() bool }{}).Elem()) {
			return rtype.MethodByName(`Query`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EditorImportPlugin struct{self *EditorImportPlugin; obj safeObject }
func NewEditorImportPlugin(ctx Context, at *EditorImportPlugin) EditorImportPlugin { if at == nil { at = new(EditorImportPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorImportPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorImportPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorImportPlugin) class() string { return "EditorImportPlugin\000" }

func (gdClass EditorImportPlugin) ResourceImporter() ResourceImporter { return ResourceImporter{obj:gdClass.obj} }

func (gdClass EditorImportPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_importer_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImporterName() string }{}).Elem()) {
			return rtype.MethodByName(`GetImporterName`)
		}
		return
	case "_get_visible_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetVisibleName() string }{}).Elem()) {
			return rtype.MethodByName(`GetVisibleName`)
		}
		return
	case "_get_preset_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPresetCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPresetCount`)
		}
		return
	case "_get_preset_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPresetName(preset_index int64) string }{}).Elem()) {
			return rtype.MethodByName(`GetPresetName`)
		}
		return
	case "_get_recognized_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRecognizedExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetRecognizedExtensions`)
		}
		return
	case "_get_import_options":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImportOptions(path string, preset_index int64) Array }{}).Elem()) {
			return rtype.MethodByName(`GetImportOptions`)
		}
		return
	case "_get_save_extension":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSaveExtension() string }{}).Elem()) {
			return rtype.MethodByName(`GetSaveExtension`)
		}
		return
	case "_get_resource_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetResourceType() string }{}).Elem()) {
			return rtype.MethodByName(`GetResourceType`)
		}
		return
	case "_get_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPriority() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetPriority`)
		}
		return
	case "_get_import_order":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImportOrder() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetImportOrder`)
		}
		return
	case "_get_option_visibility":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOptionVisibility(path string, option_name Name, options Dictionary) bool }{}).Elem()) {
			return rtype.MethodByName(`GetOptionVisibility`)
		}
		return
	case "_import":
		if rtype.Implements(reflect.TypeOf([0]interface{ Import(source_file string, save_path string, options Dictionary, platform_variants Array, gen_files Array) int64 }{}).Elem()) {
			return rtype.MethodByName(`Import`)
		}
		return
	}
	return gdClass.ResourceImporter().virtual(rtype, name)
}

type EditorInspector struct{self *EditorInspector; obj safeObject }
func NewEditorInspector(ctx Context, at *EditorInspector) EditorInspector { if at == nil { at = new(EditorInspector) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorInspector) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorInspector) owner() cObject { return gdClass.obj.get() }
func (EditorInspector) class() string { return "EditorInspector\000" }

func (gdClass EditorInspector) ScrollContainer() ScrollContainer { return ScrollContainer{obj:gdClass.obj} }

func (gdClass EditorInspector) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ScrollContainer().virtual(rtype, name)
}

type EditorInspectorPlugin struct{self *EditorInspectorPlugin; obj safeObject }
func NewEditorInspectorPlugin(ctx Context, at *EditorInspectorPlugin) EditorInspectorPlugin { if at == nil { at = new(EditorInspectorPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorInspectorPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorInspectorPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorInspectorPlugin) class() string { return "EditorInspectorPlugin\000" }

func (gdClass EditorInspectorPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorInspectorPlugin [3]cMethodBind
func (gdClass EditorInspectorPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_can_handle":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanHandle(object any) bool }{}).Elem()) {
			return rtype.MethodByName(`CanHandle`)
		}
		return
	case "_parse_begin":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseBegin(object Object)  }{}).Elem()) {
			return rtype.MethodByName(`ParseBegin`)
		}
		return
	case "_parse_category":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseCategory(object Object, category string)  }{}).Elem()) {
			return rtype.MethodByName(`ParseCategory`)
		}
		return
	case "_parse_group":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseGroup(object Object, group string)  }{}).Elem()) {
			return rtype.MethodByName(`ParseGroup`)
		}
		return
	case "_parse_property":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseProperty(object Object, atype int64, name string, hint_type int64, hint_string string, usage_flags int64, wide bool) bool }{}).Elem()) {
			return rtype.MethodByName(`ParseProperty`)
		}
		return
	case "_parse_end":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseEnd(object Object)  }{}).Elem()) {
			return rtype.MethodByName(`ParseEnd`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorInspectorPlugin) AddCustomControl(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInspectorPlugin[0], &control) }
func (gdClass EditorInspectorPlugin) AddPropertyEditor(property string, editor Control, add_to_end bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInspectorPlugin[1], &property, &editor, &add_to_end) }
func (gdClass EditorInspectorPlugin) AddPropertyEditorForMultipleProperties(label string, properties []string, editor Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInspectorPlugin[2], &label, &properties, &editor) }

type EditorInterface struct{self *EditorInterface; obj safeObject }
func NewEditorInterface(ctx Context, at *EditorInterface) EditorInterface { if at == nil { at = new(EditorInterface) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorInterface) owner() cObject { return gdClass.obj.get() }
func (EditorInterface) class() string { return "EditorInterface\000" }

func (gdClass EditorInterface) Node() Node { return Node{obj:gdClass.obj} }

var methodEditorInterface [38]cMethodBind
func (gdClass EditorInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass EditorInterface) InspectObject(object Object, for_property string, inspector_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[0], &object, &for_property, &inspector_only) }
func (gdClass EditorInterface) GetSelection() EditorSelection { return methodCall[EditorSelection](gdClass.obj.get(), methodEditorInterface[1]) }
func (gdClass EditorInterface) GetEditorSettings() EditorSettings { return methodCall[EditorSettings](gdClass.obj.get(), methodEditorInterface[2]) }
func (gdClass EditorInterface) GetScriptEditor() ScriptEditor { return methodCall[ScriptEditor](gdClass.obj.get(), methodEditorInterface[3]) }
func (gdClass EditorInterface) GetBaseControl() Control { return methodCall[Control](gdClass.obj.get(), methodEditorInterface[4]) }
func (gdClass EditorInterface) GetEditorScale() float64 { return methodCall[float64](gdClass.obj.get(), methodEditorInterface[5]) }
func (gdClass EditorInterface) EditResource(resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[6], &resource) }
func (gdClass EditorInterface) EditNode(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[7], &node) }
func (gdClass EditorInterface) EditScript(script Script, line int64, column int64, grab_focus bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[8], &script, &line, &column, &grab_focus) }
func (gdClass EditorInterface) OpenSceneFromPath(scene_filepath string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[9], &scene_filepath) }
func (gdClass EditorInterface) ReloadSceneFromPath(scene_filepath string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[10], &scene_filepath) }
func (gdClass EditorInterface) PlayMainScene()  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[11]) }
func (gdClass EditorInterface) PlayCurrentScene()  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[12]) }
func (gdClass EditorInterface) PlayCustomScene(scene_filepath string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[13], &scene_filepath) }
func (gdClass EditorInterface) StopPlayingScene()  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[14]) }
func (gdClass EditorInterface) IsPlayingScene() bool { return methodCall[bool](gdClass.obj.get(), methodEditorInterface[15]) }
func (gdClass EditorInterface) GetPlayingScene() string { return methodCall[string](gdClass.obj.get(), methodEditorInterface[16]) }
func (gdClass EditorInterface) GetOpenScenes() []string { return methodCall[[]string](gdClass.obj.get(), methodEditorInterface[17]) }
func (gdClass EditorInterface) GetEditedSceneRoot() Node { return methodCall[Node](gdClass.obj.get(), methodEditorInterface[18]) }
func (gdClass EditorInterface) GetResourcePreviewer() EditorResourcePreview { return methodCall[EditorResourcePreview](gdClass.obj.get(), methodEditorInterface[19]) }
func (gdClass EditorInterface) GetResourceFilesystem() EditorFileSystem { return methodCall[EditorFileSystem](gdClass.obj.get(), methodEditorInterface[20]) }
func (gdClass EditorInterface) GetEditorMainControl() Control { return methodCall[Control](gdClass.obj.get(), methodEditorInterface[21]) }
func (gdClass EditorInterface) MakeMeshPreviews(meshes Array, preview_size int64) Array { return methodCall[Array](gdClass.obj.get(), methodEditorInterface[22], &meshes, &preview_size) }
func (gdClass EditorInterface) SelectFile(file string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[23], &file) }
func (gdClass EditorInterface) GetSelectedPath() string { return methodCall[string](gdClass.obj.get(), methodEditorInterface[24]) }
func (gdClass EditorInterface) GetCurrentPath() string { return methodCall[string](gdClass.obj.get(), methodEditorInterface[25]) }
func (gdClass EditorInterface) GetFileSystemDock() FileSystemDock { return methodCall[FileSystemDock](gdClass.obj.get(), methodEditorInterface[26]) }
func (gdClass EditorInterface) GetEditorPaths() EditorPaths { return methodCall[EditorPaths](gdClass.obj.get(), methodEditorInterface[27]) }
func (gdClass EditorInterface) GetCommandPalette() EditorCommandPalette { return methodCall[EditorCommandPalette](gdClass.obj.get(), methodEditorInterface[28]) }
func (gdClass EditorInterface) SetPluginEnabled(plugin string, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[29], &plugin, &enabled) }
func (gdClass EditorInterface) IsPluginEnabled(plugin string) bool { return methodCall[bool](gdClass.obj.get(), methodEditorInterface[30], &plugin) }
func (gdClass EditorInterface) GetInspector() EditorInspector { return methodCall[EditorInspector](gdClass.obj.get(), methodEditorInterface[31]) }
func (gdClass EditorInterface) SaveScene() int64 { return methodCall[int64](gdClass.obj.get(), methodEditorInterface[32]) }
func (gdClass EditorInterface) SaveSceneAs(path string, with_preview bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[33], &path, &with_preview) }
func (gdClass EditorInterface) RestartEditor(save bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[34], &save) }
func (gdClass EditorInterface) SetMainScreenEditor(name string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[35], &name) }
func (gdClass EditorInterface) SetDistractionFreeMode(enter bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorInterface[36], &enter) }
func (gdClass EditorInterface) IsDistractionFreeModeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEditorInterface[37]) }

type EditorNode3DGizmo struct{self *EditorNode3DGizmo; obj safeObject }
func NewEditorNode3DGizmo(ctx Context, at *EditorNode3DGizmo) EditorNode3DGizmo { if at == nil { at = new(EditorNode3DGizmo) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorNode3DGizmo) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorNode3DGizmo) owner() cObject { return gdClass.obj.get() }
func (EditorNode3DGizmo) class() string { return "EditorNode3DGizmo\000" }

func (gdClass EditorNode3DGizmo) Node3DGizmo() Node3DGizmo { return Node3DGizmo{obj:gdClass.obj} }

var methodEditorNode3DGizmo [13]cMethodBind
func (gdClass EditorNode3DGizmo) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_redraw":
		if rtype.Implements(reflect.TypeOf([0]interface{ Redraw()  }{}).Elem()) {
			return rtype.MethodByName(`Redraw`)
		}
		return
	case "_get_handle_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHandleName(id int64, secondary bool) string }{}).Elem()) {
			return rtype.MethodByName(`GetHandleName`)
		}
		return
	case "_is_handle_highlighted":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsHandleHighlighted(id int64, secondary bool) bool }{}).Elem()) {
			return rtype.MethodByName(`IsHandleHighlighted`)
		}
		return
	case "_get_handle_value":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHandleValue(id int64, secondary bool) any }{}).Elem()) {
			return rtype.MethodByName(`GetHandleValue`)
		}
		return
	case "_set_handle":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetHandle(id int64, secondary bool, camera Camera3D, point Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`SetHandle`)
		}
		return
	case "_commit_handle":
		if rtype.Implements(reflect.TypeOf([0]interface{ CommitHandle(id int64, secondary bool, restore any, cancel bool)  }{}).Elem()) {
			return rtype.MethodByName(`CommitHandle`)
		}
		return
	case "_subgizmos_intersect_ray":
		if rtype.Implements(reflect.TypeOf([0]interface{ SubgizmosIntersectRay(camera Camera3D, point Vector2) int64 }{}).Elem()) {
			return rtype.MethodByName(`SubgizmosIntersectRay`)
		}
		return
	case "_subgizmos_intersect_frustum":
		if rtype.Implements(reflect.TypeOf([0]interface{ SubgizmosIntersectFrustum(camera Camera3D, frustum Array) []int32 }{}).Elem()) {
			return rtype.MethodByName(`SubgizmosIntersectFrustum`)
		}
		return
	case "_set_subgizmo_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetSubgizmoTransform(id int64, transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`SetSubgizmoTransform`)
		}
		return
	case "_get_subgizmo_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSubgizmoTransform(id int64) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`GetSubgizmoTransform`)
		}
		return
	case "_commit_subgizmos":
		if rtype.Implements(reflect.TypeOf([0]interface{ CommitSubgizmos(ids []int32, restores Array, cancel bool)  }{}).Elem()) {
			return rtype.MethodByName(`CommitSubgizmos`)
		}
		return
	}
	return gdClass.Node3DGizmo().virtual(rtype, name)
}
func (gdClass EditorNode3DGizmo) AddLines(lines []Vector3, material Material, billboard bool, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[0], &lines, &material, &billboard, &modulate) }
func (gdClass EditorNode3DGizmo) AddMesh(mesh Mesh, material Material, transform Transform3D, skeleton SkinReference)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[1], &mesh, &material, &transform, &skeleton) }
func (gdClass EditorNode3DGizmo) AddCollisionSegments(segments []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[2], &segments) }
func (gdClass EditorNode3DGizmo) AddCollisionTriangles(triangles TriangleMesh)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[3], &triangles) }
func (gdClass EditorNode3DGizmo) AddUnscaledBillboard(material Material, default_scale float64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[4], &material, &default_scale, &modulate) }
func (gdClass EditorNode3DGizmo) AddHandles(handles []Vector3, material Material, ids []int32, billboard bool, secondary bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[5], &handles, &material, &ids, &billboard, &secondary) }
func (gdClass EditorNode3DGizmo) SetSpatialNode(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[6], &node) }
func (gdClass EditorNode3DGizmo) GetSpatialNode() Node3D { return methodCall[Node3D](gdClass.obj.get(), methodEditorNode3DGizmo[7]) }
func (gdClass EditorNode3DGizmo) GetPlugin() EditorNode3DGizmoPlugin { return methodCall[EditorNode3DGizmoPlugin](gdClass.obj.get(), methodEditorNode3DGizmo[8]) }
func (gdClass EditorNode3DGizmo) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[9]) }
func (gdClass EditorNode3DGizmo) SetHidden(hidden bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmo[10], &hidden) }
func (gdClass EditorNode3DGizmo) IsSubgizmoSelected(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodEditorNode3DGizmo[11], &id) }
func (gdClass EditorNode3DGizmo) GetSubgizmoSelection() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodEditorNode3DGizmo[12]) }

type EditorNode3DGizmoPlugin struct{self *EditorNode3DGizmoPlugin; obj safeObject }
func NewEditorNode3DGizmoPlugin(ctx Context, at *EditorNode3DGizmoPlugin) EditorNode3DGizmoPlugin { if at == nil { at = new(EditorNode3DGizmoPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorNode3DGizmoPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorNode3DGizmoPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorNode3DGizmoPlugin) class() string { return "EditorNode3DGizmoPlugin\000" }

func (gdClass EditorNode3DGizmoPlugin) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodEditorNode3DGizmoPlugin [5]cMethodBind
func (gdClass EditorNode3DGizmoPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_has_gizmo":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasGizmo(for_node_3d Node3D) bool }{}).Elem()) {
			return rtype.MethodByName(`HasGizmo`)
		}
		return
	case "_create_gizmo":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateGizmo(for_node_3d Node3D) EditorNode3DGizmo }{}).Elem()) {
			return rtype.MethodByName(`CreateGizmo`)
		}
		return
	case "_get_gizmo_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetGizmoName() string }{}).Elem()) {
			return rtype.MethodByName(`GetGizmoName`)
		}
		return
	case "_get_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPriority() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPriority`)
		}
		return
	case "_can_be_hidden":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanBeHidden() bool }{}).Elem()) {
			return rtype.MethodByName(`CanBeHidden`)
		}
		return
	case "_is_selectable_when_hidden":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsSelectableWhenHidden() bool }{}).Elem()) {
			return rtype.MethodByName(`IsSelectableWhenHidden`)
		}
		return
	case "_redraw":
		if rtype.Implements(reflect.TypeOf([0]interface{ Redraw(gizmo EditorNode3DGizmo)  }{}).Elem()) {
			return rtype.MethodByName(`Redraw`)
		}
		return
	case "_get_handle_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHandleName(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) string }{}).Elem()) {
			return rtype.MethodByName(`GetHandleName`)
		}
		return
	case "_is_handle_highlighted":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsHandleHighlighted(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) bool }{}).Elem()) {
			return rtype.MethodByName(`IsHandleHighlighted`)
		}
		return
	case "_get_handle_value":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHandleValue(gizmo EditorNode3DGizmo, handle_id int64, secondary bool) any }{}).Elem()) {
			return rtype.MethodByName(`GetHandleValue`)
		}
		return
	case "_set_handle":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetHandle(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, camera Camera3D, screen_pos Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`SetHandle`)
		}
		return
	case "_commit_handle":
		if rtype.Implements(reflect.TypeOf([0]interface{ CommitHandle(gizmo EditorNode3DGizmo, handle_id int64, secondary bool, restore any, cancel bool)  }{}).Elem()) {
			return rtype.MethodByName(`CommitHandle`)
		}
		return
	case "_subgizmos_intersect_ray":
		if rtype.Implements(reflect.TypeOf([0]interface{ SubgizmosIntersectRay(gizmo EditorNode3DGizmo, camera Camera3D, screen_pos Vector2) int64 }{}).Elem()) {
			return rtype.MethodByName(`SubgizmosIntersectRay`)
		}
		return
	case "_subgizmos_intersect_frustum":
		if rtype.Implements(reflect.TypeOf([0]interface{ SubgizmosIntersectFrustum(gizmo EditorNode3DGizmo, camera Camera3D, frustum_planes Array) []int32 }{}).Elem()) {
			return rtype.MethodByName(`SubgizmosIntersectFrustum`)
		}
		return
	case "_get_subgizmo_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSubgizmoTransform(gizmo EditorNode3DGizmo, subgizmo_id int64) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`GetSubgizmoTransform`)
		}
		return
	case "_set_subgizmo_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetSubgizmoTransform(gizmo EditorNode3DGizmo, subgizmo_id int64, transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`SetSubgizmoTransform`)
		}
		return
	case "_commit_subgizmos":
		if rtype.Implements(reflect.TypeOf([0]interface{ CommitSubgizmos(gizmo EditorNode3DGizmo, ids []int32, restores Array, cancel bool)  }{}).Elem()) {
			return rtype.MethodByName(`CommitSubgizmos`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass EditorNode3DGizmoPlugin) CreateMaterial(name string, color Color, billboard bool, on_top bool, use_vertex_color bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmoPlugin[0], &name, &color, &billboard, &on_top, &use_vertex_color) }
func (gdClass EditorNode3DGizmoPlugin) CreateIconMaterial(name string, texture Texture2D, on_top bool, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmoPlugin[1], &name, &texture, &on_top, &color) }
func (gdClass EditorNode3DGizmoPlugin) CreateHandleMaterial(name string, billboard bool, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmoPlugin[2], &name, &billboard, &texture) }
func (gdClass EditorNode3DGizmoPlugin) AddMaterial(name string, material StandardMaterial3D)  { methodCall[struct{}](gdClass.obj.get(), methodEditorNode3DGizmoPlugin[3], &name, &material) }
func (gdClass EditorNode3DGizmoPlugin) GetMaterial(name string, gizmo EditorNode3DGizmo) StandardMaterial3D { return methodCall[StandardMaterial3D](gdClass.obj.get(), methodEditorNode3DGizmoPlugin[4], &name, &gizmo) }

type EditorPaths struct{self *EditorPaths; obj safeObject }
func NewEditorPaths(ctx Context, at *EditorPaths) EditorPaths { if at == nil { at = new(EditorPaths) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorPaths) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorPaths) owner() cObject { return gdClass.obj.get() }
func (EditorPaths) class() string { return "EditorPaths\000" }

func (gdClass EditorPaths) Object() Object { return Object{obj:gdClass.obj} }

var methodEditorPaths [6]cMethodBind
func (gdClass EditorPaths) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EditorPaths) GetDataDir() string { return methodCall[string](gdClass.obj.get(), methodEditorPaths[0]) }
func (gdClass EditorPaths) GetConfigDir() string { return methodCall[string](gdClass.obj.get(), methodEditorPaths[1]) }
func (gdClass EditorPaths) GetCacheDir() string { return methodCall[string](gdClass.obj.get(), methodEditorPaths[2]) }
func (gdClass EditorPaths) IsSelfContained() bool { return methodCall[bool](gdClass.obj.get(), methodEditorPaths[3]) }
func (gdClass EditorPaths) GetSelfContainedFile() string { return methodCall[string](gdClass.obj.get(), methodEditorPaths[4]) }
func (gdClass EditorPaths) GetProjectSettingsDir() string { return methodCall[string](gdClass.obj.get(), methodEditorPaths[5]) }

type EditorPluginCustomControlContainer int64

const (
	EditorPluginContainerToolbar EditorPluginCustomControlContainer = 0
	EditorPluginContainerSpatialEditorMenu EditorPluginCustomControlContainer = 1
	EditorPluginContainerSpatialEditorSideLeft EditorPluginCustomControlContainer = 2
	EditorPluginContainerSpatialEditorSideRight EditorPluginCustomControlContainer = 3
	EditorPluginContainerSpatialEditorBottom EditorPluginCustomControlContainer = 4
	EditorPluginContainerCanvasEditorMenu EditorPluginCustomControlContainer = 5
	EditorPluginContainerCanvasEditorSideLeft EditorPluginCustomControlContainer = 6
	EditorPluginContainerCanvasEditorSideRight EditorPluginCustomControlContainer = 7
	EditorPluginContainerCanvasEditorBottom EditorPluginCustomControlContainer = 8
	EditorPluginContainerInspectorBottom EditorPluginCustomControlContainer = 9
	EditorPluginContainerProjectSettingTabLeft EditorPluginCustomControlContainer = 10
	EditorPluginContainerProjectSettingTabRight EditorPluginCustomControlContainer = 11
)

type EditorPluginDockSlot int64

const (
	EditorPluginDockSlotLeftUl EditorPluginDockSlot = 0
	EditorPluginDockSlotLeftBl EditorPluginDockSlot = 1
	EditorPluginDockSlotLeftUr EditorPluginDockSlot = 2
	EditorPluginDockSlotLeftBr EditorPluginDockSlot = 3
	EditorPluginDockSlotRightUl EditorPluginDockSlot = 4
	EditorPluginDockSlotRightBl EditorPluginDockSlot = 5
	EditorPluginDockSlotRightUr EditorPluginDockSlot = 6
	EditorPluginDockSlotRightBr EditorPluginDockSlot = 7
	EditorPluginDockSlotMax EditorPluginDockSlot = 8
)

type EditorPlugin struct{self *EditorPlugin; obj safeObject }
func NewEditorPlugin(ctx Context, at *EditorPlugin) EditorPlugin { if at == nil { at = new(EditorPlugin) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorPlugin) class() string { return "EditorPlugin\000" }

func (gdClass EditorPlugin) Node() Node { return Node{obj:gdClass.obj} }

var methodEditorPlugin [41]cMethodBind
func (gdClass EditorPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_forward_canvas_gui_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ ForwardCanvasGuiInput(event InputEvent) bool }{}).Elem()) {
			return rtype.MethodByName(`ForwardCanvasGuiInput`)
		}
		return
	case "_forward_canvas_draw_over_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ ForwardCanvasDrawOverViewport(viewport_control Control)  }{}).Elem()) {
			return rtype.MethodByName(`ForwardCanvasDrawOverViewport`)
		}
		return
	case "_forward_canvas_force_draw_over_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ ForwardCanvasForceDrawOverViewport(viewport_control Control)  }{}).Elem()) {
			return rtype.MethodByName(`ForwardCanvasForceDrawOverViewport`)
		}
		return
	case "_forward_3d_gui_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ Forward3dGuiInput(viewport_camera Camera3D, event InputEvent) int64 }{}).Elem()) {
			return rtype.MethodByName(`Forward3dGuiInput`)
		}
		return
	case "_forward_3d_draw_over_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ Forward3dDrawOverViewport(viewport_control Control)  }{}).Elem()) {
			return rtype.MethodByName(`Forward3dDrawOverViewport`)
		}
		return
	case "_forward_3d_force_draw_over_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ Forward3dForceDrawOverViewport(viewport_control Control)  }{}).Elem()) {
			return rtype.MethodByName(`Forward3dForceDrawOverViewport`)
		}
		return
	case "_get_plugin_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPluginName() string }{}).Elem()) {
			return rtype.MethodByName(`GetPluginName`)
		}
		return
	case "_get_plugin_icon":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPluginIcon() Texture2D }{}).Elem()) {
			return rtype.MethodByName(`GetPluginIcon`)
		}
		return
	case "_has_main_screen":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasMainScreen() bool }{}).Elem()) {
			return rtype.MethodByName(`HasMainScreen`)
		}
		return
	case "_make_visible":
		if rtype.Implements(reflect.TypeOf([0]interface{ MakeVisible(visible bool)  }{}).Elem()) {
			return rtype.MethodByName(`MakeVisible`)
		}
		return
	case "_edit":
		if rtype.Implements(reflect.TypeOf([0]interface{ Edit(object any)  }{}).Elem()) {
			return rtype.MethodByName(`Edit`)
		}
		return
	case "_handles":
		if rtype.Implements(reflect.TypeOf([0]interface{ Handles(object any) bool }{}).Elem()) {
			return rtype.MethodByName(`Handles`)
		}
		return
	case "_get_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetState() Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetState`)
		}
		return
	case "_set_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetState(state Dictionary)  }{}).Elem()) {
			return rtype.MethodByName(`SetState`)
		}
		return
	case "_clear":
		if rtype.Implements(reflect.TypeOf([0]interface{ Clear()  }{}).Elem()) {
			return rtype.MethodByName(`Clear`)
		}
		return
	case "_save_external_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ SaveExternalData()  }{}).Elem()) {
			return rtype.MethodByName(`SaveExternalData`)
		}
		return
	case "_apply_changes":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyChanges()  }{}).Elem()) {
			return rtype.MethodByName(`ApplyChanges`)
		}
		return
	case "_get_breakpoints":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBreakpoints() []string }{}).Elem()) {
			return rtype.MethodByName(`GetBreakpoints`)
		}
		return
	case "_set_window_layout":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetWindowLayout(configuration ConfigFile)  }{}).Elem()) {
			return rtype.MethodByName(`SetWindowLayout`)
		}
		return
	case "_get_window_layout":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetWindowLayout(configuration ConfigFile)  }{}).Elem()) {
			return rtype.MethodByName(`GetWindowLayout`)
		}
		return
	case "_build":
		if rtype.Implements(reflect.TypeOf([0]interface{ Build() bool }{}).Elem()) {
			return rtype.MethodByName(`Build`)
		}
		return
	case "_enable_plugin":
		if rtype.Implements(reflect.TypeOf([0]interface{ EnablePlugin()  }{}).Elem()) {
			return rtype.MethodByName(`EnablePlugin`)
		}
		return
	case "_disable_plugin":
		if rtype.Implements(reflect.TypeOf([0]interface{ DisablePlugin()  }{}).Elem()) {
			return rtype.MethodByName(`DisablePlugin`)
		}
		return
	}
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass EditorPlugin) AddControlToContainer(container EditorPluginCustomControlContainer, control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[0], &container, &control) }
func (gdClass EditorPlugin) AddControlToBottomPanel(control Control, title string) Button { return methodCall[Button](gdClass.obj.get(), methodEditorPlugin[1], &control, &title) }
func (gdClass EditorPlugin) AddControlToDock(slot EditorPluginDockSlot, control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[2], &slot, &control) }
func (gdClass EditorPlugin) RemoveControlFromDocks(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[3], &control) }
func (gdClass EditorPlugin) RemoveControlFromBottomPanel(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[4], &control) }
func (gdClass EditorPlugin) RemoveControlFromContainer(container EditorPluginCustomControlContainer, control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[5], &container, &control) }
func (gdClass EditorPlugin) AddToolMenuItem(name string, callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[6], &name, &callable) }
func (gdClass EditorPlugin) AddToolSubmenuItem(name string, submenu PopupMenu)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[7], &name, &submenu) }
func (gdClass EditorPlugin) RemoveToolMenuItem(name string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[8], &name) }
func (gdClass EditorPlugin) GetExportAsMenu() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodEditorPlugin[9]) }
func (gdClass EditorPlugin) AddCustomType(atype string, base string, script Script, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[10], &atype, &base, &script, &icon) }
func (gdClass EditorPlugin) RemoveCustomType(atype string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[11], &atype) }
func (gdClass EditorPlugin) AddAutoloadSingleton(name string, path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[12], &name, &path) }
func (gdClass EditorPlugin) RemoveAutoloadSingleton(name string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[13], &name) }
func (gdClass EditorPlugin) UpdateOverlays() int64 { return methodCall[int64](gdClass.obj.get(), methodEditorPlugin[14]) }
func (gdClass EditorPlugin) MakeBottomPanelItemVisible(item Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[15], &item) }
func (gdClass EditorPlugin) HideBottomPanel()  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[16]) }
func (gdClass EditorPlugin) GetUndoRedo() EditorUndoRedoManager { return methodCall[EditorUndoRedoManager](gdClass.obj.get(), methodEditorPlugin[17]) }
func (gdClass EditorPlugin) AddUndoRedoInspectorHookCallback(callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[18], &callable) }
func (gdClass EditorPlugin) RemoveUndoRedoInspectorHookCallback(callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[19], &callable) }
func (gdClass EditorPlugin) QueueSaveLayout()  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[20]) }
func (gdClass EditorPlugin) AddTranslationParserPlugin(parser EditorTranslationParserPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[21], &parser) }
func (gdClass EditorPlugin) RemoveTranslationParserPlugin(parser EditorTranslationParserPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[22], &parser) }
func (gdClass EditorPlugin) AddImportPlugin(importer EditorImportPlugin, first_priority bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[23], &importer, &first_priority) }
func (gdClass EditorPlugin) RemoveImportPlugin(importer EditorImportPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[24], &importer) }
func (gdClass EditorPlugin) AddSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter, first_priority bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[25], &scene_format_importer, &first_priority) }
func (gdClass EditorPlugin) RemoveSceneFormatImporterPlugin(scene_format_importer EditorSceneFormatImporter)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[26], &scene_format_importer) }
func (gdClass EditorPlugin) AddScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin, first_priority bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[27], &scene_import_plugin, &first_priority) }
func (gdClass EditorPlugin) RemoveScenePostImportPlugin(scene_import_plugin EditorScenePostImportPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[28], &scene_import_plugin) }
func (gdClass EditorPlugin) AddExportPlugin(plugin EditorExportPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[29], &plugin) }
func (gdClass EditorPlugin) RemoveExportPlugin(plugin EditorExportPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[30], &plugin) }
func (gdClass EditorPlugin) AddSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[31], &plugin) }
func (gdClass EditorPlugin) RemoveSpatialGizmoPlugin(plugin EditorNode3DGizmoPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[32], &plugin) }
func (gdClass EditorPlugin) AddInspectorPlugin(plugin EditorInspectorPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[33], &plugin) }
func (gdClass EditorPlugin) RemoveInspectorPlugin(plugin EditorInspectorPlugin)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[34], &plugin) }
func (gdClass EditorPlugin) SetInputEventForwardingAlwaysEnabled()  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[35]) }
func (gdClass EditorPlugin) SetForceDrawOverForwardingEnabled()  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[36]) }
func (gdClass EditorPlugin) GetEditorInterface() EditorInterface { return methodCall[EditorInterface](gdClass.obj.get(), methodEditorPlugin[37]) }
func (gdClass EditorPlugin) GetScriptCreateDialog() ScriptCreateDialog { return methodCall[ScriptCreateDialog](gdClass.obj.get(), methodEditorPlugin[38]) }
func (gdClass EditorPlugin) AddDebuggerPlugin(script Script)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[39], &script) }
func (gdClass EditorPlugin) RemoveDebuggerPlugin(script Script)  { methodCall[struct{}](gdClass.obj.get(), methodEditorPlugin[40], &script) }

type EditorProperty struct{self *EditorProperty; obj safeObject }
func NewEditorProperty(ctx Context, at *EditorProperty) EditorProperty { if at == nil { at = new(EditorProperty) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorProperty) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorProperty) owner() cObject { return gdClass.obj.get() }
func (EditorProperty) class() string { return "EditorProperty\000" }

func (gdClass EditorProperty) Container() Container { return Container{obj:gdClass.obj} }

var methodEditorProperty [20]cMethodBind
func (gdClass EditorProperty) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_update_property":
		if rtype.Implements(reflect.TypeOf([0]interface{ UpdateProperty()  }{}).Elem()) {
			return rtype.MethodByName(`UpdateProperty`)
		}
		return
	}
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass EditorProperty) SetLabel(text string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[0], &text) }
func (gdClass EditorProperty) GetLabel() string { return methodCall[string](gdClass.obj.get(), methodEditorProperty[1]) }
func (gdClass EditorProperty) SetReadOnly(read_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[2], &read_only) }
func (gdClass EditorProperty) IsReadOnly() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[3]) }
func (gdClass EditorProperty) SetCheckable(checkable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[4], &checkable) }
func (gdClass EditorProperty) IsCheckable() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[5]) }
func (gdClass EditorProperty) SetChecked(checked bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[6], &checked) }
func (gdClass EditorProperty) IsChecked() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[7]) }
func (gdClass EditorProperty) SetDrawWarning(draw_warning bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[8], &draw_warning) }
func (gdClass EditorProperty) IsDrawWarning() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[9]) }
func (gdClass EditorProperty) SetKeying(keying bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[10], &keying) }
func (gdClass EditorProperty) IsKeying() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[11]) }
func (gdClass EditorProperty) SetDeletable(deletable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[12], &deletable) }
func (gdClass EditorProperty) IsDeletable() bool { return methodCall[bool](gdClass.obj.get(), methodEditorProperty[13]) }
func (gdClass EditorProperty) GetEditedProperty() Name { return methodCall[Name](gdClass.obj.get(), methodEditorProperty[14]) }
func (gdClass EditorProperty) GetEditedObject() Object { return methodCall[Object](gdClass.obj.get(), methodEditorProperty[15]) }
func (gdClass EditorProperty) UpdateProperty()  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[16]) }
func (gdClass EditorProperty) AddFocusable(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[17], &control) }
func (gdClass EditorProperty) SetBottomEditor(editor Control)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[18], &editor) }
func (gdClass EditorProperty) EmitChanged(property Name, value any, field Name, changing bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorProperty[19], &property, &value, &field, &changing) }

type EditorResourceConversionPlugin struct{self *EditorResourceConversionPlugin; obj safeObject }
func NewEditorResourceConversionPlugin(ctx Context, at *EditorResourceConversionPlugin) EditorResourceConversionPlugin { if at == nil { at = new(EditorResourceConversionPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorResourceConversionPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorResourceConversionPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorResourceConversionPlugin) class() string { return "EditorResourceConversionPlugin\000" }

func (gdClass EditorResourceConversionPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EditorResourceConversionPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_converts_to":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConvertsTo() string }{}).Elem()) {
			return rtype.MethodByName(`ConvertsTo`)
		}
		return
	case "_handles":
		if rtype.Implements(reflect.TypeOf([0]interface{ Handles(resource Resource) bool }{}).Elem()) {
			return rtype.MethodByName(`Handles`)
		}
		return
	case "_convert":
		if rtype.Implements(reflect.TypeOf([0]interface{ Convert(resource Resource) Resource }{}).Elem()) {
			return rtype.MethodByName(`Convert`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EditorResourcePicker struct{self *EditorResourcePicker; obj safeObject }
func NewEditorResourcePicker(ctx Context, at *EditorResourcePicker) EditorResourcePicker { if at == nil { at = new(EditorResourcePicker) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorResourcePicker) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorResourcePicker) owner() cObject { return gdClass.obj.get() }
func (EditorResourcePicker) class() string { return "EditorResourcePicker\000" }

func (gdClass EditorResourcePicker) HBoxContainer() HBoxContainer { return HBoxContainer{obj:gdClass.obj} }

var methodEditorResourcePicker [10]cMethodBind
func (gdClass EditorResourcePicker) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_set_create_options":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetCreateOptions(menu_node Object)  }{}).Elem()) {
			return rtype.MethodByName(`SetCreateOptions`)
		}
		return
	case "_handle_menu_selected":
		if rtype.Implements(reflect.TypeOf([0]interface{ HandleMenuSelected(id int64) bool }{}).Elem()) {
			return rtype.MethodByName(`HandleMenuSelected`)
		}
		return
	}
	return gdClass.HBoxContainer().virtual(rtype, name)
}
func (gdClass EditorResourcePicker) SetBaseType(base_type string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePicker[0], &base_type) }
func (gdClass EditorResourcePicker) GetBaseType() string { return methodCall[string](gdClass.obj.get(), methodEditorResourcePicker[1]) }
func (gdClass EditorResourcePicker) GetAllowedTypes() []string { return methodCall[[]string](gdClass.obj.get(), methodEditorResourcePicker[2]) }
func (gdClass EditorResourcePicker) SetEditedResource(resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePicker[3], &resource) }
func (gdClass EditorResourcePicker) GetEditedResource() Resource { return methodCall[Resource](gdClass.obj.get(), methodEditorResourcePicker[4]) }
func (gdClass EditorResourcePicker) SetToggleMode(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePicker[5], &enable) }
func (gdClass EditorResourcePicker) IsToggleMode() bool { return methodCall[bool](gdClass.obj.get(), methodEditorResourcePicker[6]) }
func (gdClass EditorResourcePicker) SetTogglePressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePicker[7], &pressed) }
func (gdClass EditorResourcePicker) SetEditable(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePicker[8], &enable) }
func (gdClass EditorResourcePicker) IsEditable() bool { return methodCall[bool](gdClass.obj.get(), methodEditorResourcePicker[9]) }

type EditorResourcePreview struct{self *EditorResourcePreview; obj safeObject }
func NewEditorResourcePreview(ctx Context, at *EditorResourcePreview) EditorResourcePreview { if at == nil { at = new(EditorResourcePreview) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorResourcePreview) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorResourcePreview) owner() cObject { return gdClass.obj.get() }
func (EditorResourcePreview) class() string { return "EditorResourcePreview\000" }

func (gdClass EditorResourcePreview) Node() Node { return Node{obj:gdClass.obj} }

var methodEditorResourcePreview [5]cMethodBind
func (gdClass EditorResourcePreview) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass EditorResourcePreview) QueueResourcePreview(path string, receiver Object, receiver_func Name, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePreview[0], &path, &receiver, &receiver_func, &userdata) }
func (gdClass EditorResourcePreview) QueueEditedResourcePreview(resource Resource, receiver Object, receiver_func Name, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePreview[1], &resource, &receiver, &receiver_func, &userdata) }
func (gdClass EditorResourcePreview) AddPreviewGenerator(generator EditorResourcePreviewGenerator)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePreview[2], &generator) }
func (gdClass EditorResourcePreview) RemovePreviewGenerator(generator EditorResourcePreviewGenerator)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePreview[3], &generator) }
func (gdClass EditorResourcePreview) CheckForInvalidation(path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorResourcePreview[4], &path) }

type EditorResourcePreviewGenerator struct{self *EditorResourcePreviewGenerator; obj safeObject }
func NewEditorResourcePreviewGenerator(ctx Context, at *EditorResourcePreviewGenerator) EditorResourcePreviewGenerator { if at == nil { at = new(EditorResourcePreviewGenerator) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorResourcePreviewGenerator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorResourcePreviewGenerator) owner() cObject { return gdClass.obj.get() }
func (EditorResourcePreviewGenerator) class() string { return "EditorResourcePreviewGenerator\000" }

func (gdClass EditorResourcePreviewGenerator) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EditorResourcePreviewGenerator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_handles":
		if rtype.Implements(reflect.TypeOf([0]interface{ Handles(atype string) bool }{}).Elem()) {
			return rtype.MethodByName(`Handles`)
		}
		return
	case "_generate":
		if rtype.Implements(reflect.TypeOf([0]interface{ Generate(resource Resource, size Vector2i) Texture2D }{}).Elem()) {
			return rtype.MethodByName(`Generate`)
		}
		return
	case "_generate_from_path":
		if rtype.Implements(reflect.TypeOf([0]interface{ GenerateFromPath(path string, size Vector2i) Texture2D }{}).Elem()) {
			return rtype.MethodByName(`GenerateFromPath`)
		}
		return
	case "_generate_small_preview_automatically":
		if rtype.Implements(reflect.TypeOf([0]interface{ GenerateSmallPreviewAutomatically() bool }{}).Elem()) {
			return rtype.MethodByName(`GenerateSmallPreviewAutomatically`)
		}
		return
	case "_can_generate_small_preview":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanGenerateSmallPreview() bool }{}).Elem()) {
			return rtype.MethodByName(`CanGenerateSmallPreview`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EditorSceneFormatImporter struct{self *EditorSceneFormatImporter; obj safeObject }
func NewEditorSceneFormatImporter(ctx Context, at *EditorSceneFormatImporter) EditorSceneFormatImporter { if at == nil { at = new(EditorSceneFormatImporter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSceneFormatImporter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSceneFormatImporter) owner() cObject { return gdClass.obj.get() }
func (EditorSceneFormatImporter) class() string { return "EditorSceneFormatImporter\000" }

func (gdClass EditorSceneFormatImporter) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EditorSceneFormatImporter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_import_flags":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImportFlags() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetImportFlags`)
		}
		return
	case "_get_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetExtensions`)
		}
		return
	case "_import_scene":
		if rtype.Implements(reflect.TypeOf([0]interface{ ImportScene(path string, flags int64, options Dictionary, bake_fps int64) Object }{}).Elem()) {
			return rtype.MethodByName(`ImportScene`)
		}
		return
	case "_get_import_options":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImportOptions(path string)  }{}).Elem()) {
			return rtype.MethodByName(`GetImportOptions`)
		}
		return
	case "_get_option_visibility":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOptionVisibility(path string, for_animation bool, option string) any }{}).Elem()) {
			return rtype.MethodByName(`GetOptionVisibility`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EditorSceneFormatImporterBlend struct{self *EditorSceneFormatImporterBlend; obj safeObject }
func NewEditorSceneFormatImporterBlend(ctx Context, at *EditorSceneFormatImporterBlend) EditorSceneFormatImporterBlend { if at == nil { at = new(EditorSceneFormatImporterBlend) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSceneFormatImporterBlend) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSceneFormatImporterBlend) owner() cObject { return gdClass.obj.get() }
func (EditorSceneFormatImporterBlend) class() string { return "EditorSceneFormatImporterBlend\000" }

func (gdClass EditorSceneFormatImporterBlend) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter{obj:gdClass.obj} }

func (gdClass EditorSceneFormatImporterBlend) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.EditorSceneFormatImporter().virtual(rtype, name)
}

type EditorSceneFormatImporterFBX struct{self *EditorSceneFormatImporterFBX; obj safeObject }
func NewEditorSceneFormatImporterFBX(ctx Context, at *EditorSceneFormatImporterFBX) EditorSceneFormatImporterFBX { if at == nil { at = new(EditorSceneFormatImporterFBX) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSceneFormatImporterFBX) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSceneFormatImporterFBX) owner() cObject { return gdClass.obj.get() }
func (EditorSceneFormatImporterFBX) class() string { return "EditorSceneFormatImporterFBX\000" }

func (gdClass EditorSceneFormatImporterFBX) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter{obj:gdClass.obj} }

func (gdClass EditorSceneFormatImporterFBX) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.EditorSceneFormatImporter().virtual(rtype, name)
}

type EditorSceneFormatImporterGLTF struct{self *EditorSceneFormatImporterGLTF; obj safeObject }
func NewEditorSceneFormatImporterGLTF(ctx Context, at *EditorSceneFormatImporterGLTF) EditorSceneFormatImporterGLTF { if at == nil { at = new(EditorSceneFormatImporterGLTF) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSceneFormatImporterGLTF) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSceneFormatImporterGLTF) owner() cObject { return gdClass.obj.get() }
func (EditorSceneFormatImporterGLTF) class() string { return "EditorSceneFormatImporterGLTF\000" }

func (gdClass EditorSceneFormatImporterGLTF) EditorSceneFormatImporter() EditorSceneFormatImporter { return EditorSceneFormatImporter{obj:gdClass.obj} }

func (gdClass EditorSceneFormatImporterGLTF) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.EditorSceneFormatImporter().virtual(rtype, name)
}

type EditorScenePostImport struct{self *EditorScenePostImport; obj safeObject }
func NewEditorScenePostImport(ctx Context, at *EditorScenePostImport) EditorScenePostImport { if at == nil { at = new(EditorScenePostImport) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorScenePostImport) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorScenePostImport) owner() cObject { return gdClass.obj.get() }
func (EditorScenePostImport) class() string { return "EditorScenePostImport\000" }

func (gdClass EditorScenePostImport) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorScenePostImport [1]cMethodBind
func (gdClass EditorScenePostImport) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_post_import":
		if rtype.Implements(reflect.TypeOf([0]interface{ PostImport(scene Node) Object }{}).Elem()) {
			return rtype.MethodByName(`PostImport`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorScenePostImport) GetSourceFile() string { return methodCall[string](gdClass.obj.get(), methodEditorScenePostImport[0]) }

type EditorScenePostImportPluginInternalImportCategory int64

const (
	EditorScenePostImportPluginInternalImportCategoryNode EditorScenePostImportPluginInternalImportCategory = 0
	EditorScenePostImportPluginInternalImportCategoryMesh3dNode EditorScenePostImportPluginInternalImportCategory = 1
	EditorScenePostImportPluginInternalImportCategoryMesh EditorScenePostImportPluginInternalImportCategory = 2
	EditorScenePostImportPluginInternalImportCategoryMaterial EditorScenePostImportPluginInternalImportCategory = 3
	EditorScenePostImportPluginInternalImportCategoryAnimation EditorScenePostImportPluginInternalImportCategory = 4
	EditorScenePostImportPluginInternalImportCategoryAnimationNode EditorScenePostImportPluginInternalImportCategory = 5
	EditorScenePostImportPluginInternalImportCategorySkeleton3dNode EditorScenePostImportPluginInternalImportCategory = 6
	EditorScenePostImportPluginInternalImportCategoryMax EditorScenePostImportPluginInternalImportCategory = 7
)

type EditorScenePostImportPlugin struct{self *EditorScenePostImportPlugin; obj safeObject }
func NewEditorScenePostImportPlugin(ctx Context, at *EditorScenePostImportPlugin) EditorScenePostImportPlugin { if at == nil { at = new(EditorScenePostImportPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorScenePostImportPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorScenePostImportPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorScenePostImportPlugin) class() string { return "EditorScenePostImportPlugin\000" }

func (gdClass EditorScenePostImportPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorScenePostImportPlugin [3]cMethodBind
func (gdClass EditorScenePostImportPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_internal_import_options":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInternalImportOptions(category int64)  }{}).Elem()) {
			return rtype.MethodByName(`GetInternalImportOptions`)
		}
		return
	case "_get_internal_option_visibility":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInternalOptionVisibility(category int64, for_animation bool, option string) any }{}).Elem()) {
			return rtype.MethodByName(`GetInternalOptionVisibility`)
		}
		return
	case "_get_internal_option_update_view_required":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInternalOptionUpdateViewRequired(category int64, option string) any }{}).Elem()) {
			return rtype.MethodByName(`GetInternalOptionUpdateViewRequired`)
		}
		return
	case "_internal_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ InternalProcess(category int64, base_node Node, node Node, resource Resource)  }{}).Elem()) {
			return rtype.MethodByName(`InternalProcess`)
		}
		return
	case "_get_import_options":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetImportOptions(path string)  }{}).Elem()) {
			return rtype.MethodByName(`GetImportOptions`)
		}
		return
	case "_get_option_visibility":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOptionVisibility(path string, for_animation bool, option string) any }{}).Elem()) {
			return rtype.MethodByName(`GetOptionVisibility`)
		}
		return
	case "_pre_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ PreProcess(scene Node)  }{}).Elem()) {
			return rtype.MethodByName(`PreProcess`)
		}
		return
	case "_post_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ PostProcess(scene Node)  }{}).Elem()) {
			return rtype.MethodByName(`PostProcess`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorScenePostImportPlugin) GetOptionValue(name Name) any { return methodCall[any](gdClass.obj.get(), methodEditorScenePostImportPlugin[0], &name) }
func (gdClass EditorScenePostImportPlugin) AddImportOption(name string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorScenePostImportPlugin[1], &name, &value) }
func (gdClass EditorScenePostImportPlugin) AddImportOptionAdvanced(atype VariantType, name string, default_value any, hint PropertyHint, hint_string string, usage_flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodEditorScenePostImportPlugin[2], &atype, &name, &default_value, &hint, &hint_string, &usage_flags) }

type EditorScript struct{self *EditorScript; obj safeObject }
func NewEditorScript(ctx Context, at *EditorScript) EditorScript { if at == nil { at = new(EditorScript) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorScript) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorScript) owner() cObject { return gdClass.obj.get() }
func (EditorScript) class() string { return "EditorScript\000" }

func (gdClass EditorScript) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorScript [3]cMethodBind
func (gdClass EditorScript) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_run":
		if rtype.Implements(reflect.TypeOf([0]interface{ Run()  }{}).Elem()) {
			return rtype.MethodByName(`Run`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorScript) AddRootNode(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorScript[0], &node) }
func (gdClass EditorScript) GetScene() Node { return methodCall[Node](gdClass.obj.get(), methodEditorScript[1]) }
func (gdClass EditorScript) GetEditorInterface() EditorInterface { return methodCall[EditorInterface](gdClass.obj.get(), methodEditorScript[2]) }

type EditorScriptPicker struct{self *EditorScriptPicker; obj safeObject }
func NewEditorScriptPicker(ctx Context, at *EditorScriptPicker) EditorScriptPicker { if at == nil { at = new(EditorScriptPicker) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorScriptPicker) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorScriptPicker) owner() cObject { return gdClass.obj.get() }
func (EditorScriptPicker) class() string { return "EditorScriptPicker\000" }

func (gdClass EditorScriptPicker) EditorResourcePicker() EditorResourcePicker { return EditorResourcePicker{obj:gdClass.obj} }

var methodEditorScriptPicker [2]cMethodBind
func (gdClass EditorScriptPicker) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.EditorResourcePicker().virtual(rtype, name)
}
func (gdClass EditorScriptPicker) SetScriptOwner(owner_node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorScriptPicker[0], &owner_node) }
func (gdClass EditorScriptPicker) GetScriptOwner() Node { return methodCall[Node](gdClass.obj.get(), methodEditorScriptPicker[1]) }

type EditorSelection struct{self *EditorSelection; obj safeObject }
func NewEditorSelection(ctx Context, at *EditorSelection) EditorSelection { if at == nil { at = new(EditorSelection) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorSelection) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSelection) owner() cObject { return gdClass.obj.get() }
func (EditorSelection) class() string { return "EditorSelection\000" }

func (gdClass EditorSelection) Object() Object { return Object{obj:gdClass.obj} }

var methodEditorSelection [5]cMethodBind
func (gdClass EditorSelection) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EditorSelection) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodEditorSelection[0]) }
func (gdClass EditorSelection) AddNode(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSelection[1], &node) }
func (gdClass EditorSelection) RemoveNode(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSelection[2], &node) }
func (gdClass EditorSelection) GetSelectedNodes() Array { return methodCall[Array](gdClass.obj.get(), methodEditorSelection[3]) }
func (gdClass EditorSelection) GetTransformableSelectedNodes() Array { return methodCall[Array](gdClass.obj.get(), methodEditorSelection[4]) }

type EditorSettings struct{self *EditorSettings; obj safeObject }
func NewEditorSettings(ctx Context, at *EditorSettings) EditorSettings { if at == nil { at = new(EditorSettings) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSettings) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSettings) owner() cObject { return gdClass.obj.get() }
func (EditorSettings) class() string { return "EditorSettings\000" }

func (gdClass EditorSettings) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodEditorSettings [16]cMethodBind
func (gdClass EditorSettings) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass EditorSettings) HasSetting(name string) bool { return methodCall[bool](gdClass.obj.get(), methodEditorSettings[0], &name) }
func (gdClass EditorSettings) SetSetting(name string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[1], &name, &value) }
func (gdClass EditorSettings) GetSetting(name string) any { return methodCall[any](gdClass.obj.get(), methodEditorSettings[2], &name) }
func (gdClass EditorSettings) Erase(property string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[3], &property) }
func (gdClass EditorSettings) SetInitialValue(name Name, value any, update_current bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[4], &name, &value, &update_current) }
func (gdClass EditorSettings) AddPropertyInfo(info Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[5], &info) }
func (gdClass EditorSettings) SetProjectMetadata(section string, key string, data any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[6], &section, &key, &data) }
func (gdClass EditorSettings) GetProjectMetadata(section string, key string, def any) any { return methodCall[any](gdClass.obj.get(), methodEditorSettings[7], &section, &key, &def) }
func (gdClass EditorSettings) SetFavorites(dirs []string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[8], &dirs) }
func (gdClass EditorSettings) GetFavorites() []string { return methodCall[[]string](gdClass.obj.get(), methodEditorSettings[9]) }
func (gdClass EditorSettings) SetRecentDirs(dirs []string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[10], &dirs) }
func (gdClass EditorSettings) GetRecentDirs() []string { return methodCall[[]string](gdClass.obj.get(), methodEditorSettings[11]) }
func (gdClass EditorSettings) SetBuiltinActionOverride(name string, actions_list Array)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[12], &name, &actions_list) }
func (gdClass EditorSettings) CheckChangedSettingsInGroup(setting_prefix string) bool { return methodCall[bool](gdClass.obj.get(), methodEditorSettings[13], &setting_prefix) }
func (gdClass EditorSettings) GetChangedSettings() []string { return methodCall[[]string](gdClass.obj.get(), methodEditorSettings[14]) }
func (gdClass EditorSettings) MarkSettingChanged(setting string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSettings[15], &setting) }

type EditorSpinSlider struct{self *EditorSpinSlider; obj safeObject }
func NewEditorSpinSlider(ctx Context, at *EditorSpinSlider) EditorSpinSlider { if at == nil { at = new(EditorSpinSlider) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorSpinSlider) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSpinSlider) owner() cObject { return gdClass.obj.get() }
func (EditorSpinSlider) class() string { return "EditorSpinSlider\000" }

func (gdClass EditorSpinSlider) Range() Range { return Range{obj:gdClass.obj} }

var methodEditorSpinSlider [10]cMethodBind
func (gdClass EditorSpinSlider) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass EditorSpinSlider) SetLabel(label string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSpinSlider[0], &label) }
func (gdClass EditorSpinSlider) GetLabel() string { return methodCall[string](gdClass.obj.get(), methodEditorSpinSlider[1]) }
func (gdClass EditorSpinSlider) SetSuffix(suffix string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSpinSlider[2], &suffix) }
func (gdClass EditorSpinSlider) GetSuffix() string { return methodCall[string](gdClass.obj.get(), methodEditorSpinSlider[3]) }
func (gdClass EditorSpinSlider) SetReadOnly(read_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSpinSlider[4], &read_only) }
func (gdClass EditorSpinSlider) IsReadOnly() bool { return methodCall[bool](gdClass.obj.get(), methodEditorSpinSlider[5]) }
func (gdClass EditorSpinSlider) SetFlat(flat bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSpinSlider[6], &flat) }
func (gdClass EditorSpinSlider) IsFlat() bool { return methodCall[bool](gdClass.obj.get(), methodEditorSpinSlider[7]) }
func (gdClass EditorSpinSlider) SetHideSlider(hide_slider bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorSpinSlider[8], &hide_slider) }
func (gdClass EditorSpinSlider) IsHidingSlider() bool { return methodCall[bool](gdClass.obj.get(), methodEditorSpinSlider[9]) }

type EditorSyntaxHighlighter struct{self *EditorSyntaxHighlighter; obj safeObject }
func NewEditorSyntaxHighlighter(ctx Context, at *EditorSyntaxHighlighter) EditorSyntaxHighlighter { if at == nil { at = new(EditorSyntaxHighlighter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorSyntaxHighlighter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorSyntaxHighlighter) owner() cObject { return gdClass.obj.get() }
func (EditorSyntaxHighlighter) class() string { return "EditorSyntaxHighlighter\000" }

func (gdClass EditorSyntaxHighlighter) SyntaxHighlighter() SyntaxHighlighter { return SyntaxHighlighter{obj:gdClass.obj} }

func (gdClass EditorSyntaxHighlighter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetName() string }{}).Elem()) {
			return rtype.MethodByName(`GetName`)
		}
		return
	case "_get_supported_languages":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSupportedLanguages() []string }{}).Elem()) {
			return rtype.MethodByName(`GetSupportedLanguages`)
		}
		return
	}
	return gdClass.SyntaxHighlighter().virtual(rtype, name)
}

type EditorTranslationParserPlugin struct{self *EditorTranslationParserPlugin; obj safeObject }
func NewEditorTranslationParserPlugin(ctx Context, at *EditorTranslationParserPlugin) EditorTranslationParserPlugin { if at == nil { at = new(EditorTranslationParserPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorTranslationParserPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorTranslationParserPlugin) owner() cObject { return gdClass.obj.get() }
func (EditorTranslationParserPlugin) class() string { return "EditorTranslationParserPlugin\000" }

func (gdClass EditorTranslationParserPlugin) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EditorTranslationParserPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_parse_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseFile(path string, msgids Array, msgids_context_plural Array)  }{}).Elem()) {
			return rtype.MethodByName(`ParseFile`)
		}
		return
	case "_get_recognized_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRecognizedExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetRecognizedExtensions`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EditorUndoRedoManagerSpecialHistory int64

const (
	EditorUndoRedoManagerGlobalHistory EditorUndoRedoManagerSpecialHistory = 0
	EditorUndoRedoManagerInvalidHistory EditorUndoRedoManagerSpecialHistory = -99
)

type EditorUndoRedoManager struct{self *EditorUndoRedoManager; obj safeObject }
func NewEditorUndoRedoManager(ctx Context, at *EditorUndoRedoManager) EditorUndoRedoManager { if at == nil { at = new(EditorUndoRedoManager) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EditorUndoRedoManager) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorUndoRedoManager) owner() cObject { return gdClass.obj.get() }
func (EditorUndoRedoManager) class() string { return "EditorUndoRedoManager\000" }

func (gdClass EditorUndoRedoManager) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEditorUndoRedoManager [11]cMethodBind
func (gdClass EditorUndoRedoManager) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EditorUndoRedoManager) CreateAction(name string, merge_mode UndoRedoMergeMode, custom_context Object)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[0], &name, &merge_mode, &custom_context) }
func (gdClass EditorUndoRedoManager) CommitAction(execute bool)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[1], &execute) }
func (gdClass EditorUndoRedoManager) IsCommittingAction() bool { return methodCall[bool](gdClass.obj.get(), methodEditorUndoRedoManager[2]) }
func (gdClass EditorUndoRedoManager) AddDoMethod(object Object, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[3], &object, &method) }
func (gdClass EditorUndoRedoManager) AddUndoMethod(object Object, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[4], &object, &method) }
func (gdClass EditorUndoRedoManager) AddDoProperty(object Object, property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[5], &object, &property, &value) }
func (gdClass EditorUndoRedoManager) AddUndoProperty(object Object, property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[6], &object, &property, &value) }
func (gdClass EditorUndoRedoManager) AddDoReference(object Object)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[7], &object) }
func (gdClass EditorUndoRedoManager) AddUndoReference(object Object)  { methodCall[struct{}](gdClass.obj.get(), methodEditorUndoRedoManager[8], &object) }
func (gdClass EditorUndoRedoManager) GetObjectHistoryId(object Object) int64 { return methodCall[int64](gdClass.obj.get(), methodEditorUndoRedoManager[9], &object) }
func (gdClass EditorUndoRedoManager) GetHistoryUndoRedo(id int64) UndoRedo { return methodCall[UndoRedo](gdClass.obj.get(), methodEditorUndoRedoManager[10], &id) }

type EditorVCSInterface struct{self *EditorVCSInterface; obj safeObject }
func NewEditorVCSInterface(ctx Context, at *EditorVCSInterface) EditorVCSInterface { if at == nil { at = new(EditorVCSInterface) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EditorVCSInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EditorVCSInterface) owner() cObject { return gdClass.obj.get() }
func (EditorVCSInterface) class() string { return "EditorVCSInterface\000" }

func (gdClass EditorVCSInterface) Object() Object { return Object{obj:gdClass.obj} }

var methodEditorVCSInterface [11]cMethodBind
func (gdClass EditorVCSInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EditorVCSInterface) IsAddonReady() bool { return methodCall[bool](gdClass.obj.get(), methodEditorVCSInterface[0]) }
func (gdClass EditorVCSInterface) Initialize(project_root_path string) bool { return methodCall[bool](gdClass.obj.get(), methodEditorVCSInterface[1], &project_root_path) }
func (gdClass EditorVCSInterface) IsVcsInitialized() bool { return methodCall[bool](gdClass.obj.get(), methodEditorVCSInterface[2]) }
func (gdClass EditorVCSInterface) GetModifiedFilesData() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodEditorVCSInterface[3]) }
func (gdClass EditorVCSInterface) StageFile(file_path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorVCSInterface[4], &file_path) }
func (gdClass EditorVCSInterface) UnstageFile(file_path string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorVCSInterface[5], &file_path) }
func (gdClass EditorVCSInterface) Commit(msg string)  { methodCall[struct{}](gdClass.obj.get(), methodEditorVCSInterface[6], &msg) }
func (gdClass EditorVCSInterface) GetFileDiff(file_path string) Array { return methodCall[Array](gdClass.obj.get(), methodEditorVCSInterface[7], &file_path) }
func (gdClass EditorVCSInterface) ShutDown() bool { return methodCall[bool](gdClass.obj.get(), methodEditorVCSInterface[8]) }
func (gdClass EditorVCSInterface) GetProjectName() string { return methodCall[string](gdClass.obj.get(), methodEditorVCSInterface[9]) }
func (gdClass EditorVCSInterface) GetVcsName() string { return methodCall[string](gdClass.obj.get(), methodEditorVCSInterface[10]) }

type EncodedObjectAsID struct{self *EncodedObjectAsID; obj safeObject }
func NewEncodedObjectAsID(ctx Context, at *EncodedObjectAsID) EncodedObjectAsID { if at == nil { at = new(EncodedObjectAsID) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EncodedObjectAsID) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EncodedObjectAsID) owner() cObject { return gdClass.obj.get() }
func (EncodedObjectAsID) class() string { return "EncodedObjectAsID\000" }

func (gdClass EncodedObjectAsID) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodEncodedObjectAsID [2]cMethodBind
func (gdClass EncodedObjectAsID) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass EncodedObjectAsID) SetObjectId(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodEncodedObjectAsID[0], &id) }
func (gdClass EncodedObjectAsID) GetObjectId() int64 { return methodCall[int64](gdClass.obj.get(), methodEncodedObjectAsID[1]) }
var Engine EngineSingleton

type EngineSingleton struct{self *EngineSingleton; obj safeObject }
func NewEngineSingleton(ctx Context, at *EngineSingleton) EngineSingleton { if at == nil { at = new(EngineSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EngineSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EngineSingleton) owner() cObject { return gdClass.obj.get() }
func (EngineSingleton) class() string { return "EngineSingleton\000" }

func (gdClass EngineSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodEngineSingleton [34]cMethodBind
func (gdClass EngineSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EngineSingleton) SetPhysicsTicksPerSecond(physics_ticks_per_second int64)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[0], &physics_ticks_per_second) }
func (gdClass EngineSingleton) GetPhysicsTicksPerSecond() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[1]) }
func (gdClass EngineSingleton) SetPhysicsJitterFix(physics_jitter_fix float64)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[2], &physics_jitter_fix) }
func (gdClass EngineSingleton) GetPhysicsJitterFix() float64 { return methodCall[float64](gdClass.obj.get(), methodEngineSingleton[3]) }
func (gdClass EngineSingleton) GetPhysicsInterpolationFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodEngineSingleton[4]) }
func (gdClass EngineSingleton) SetTargetFps(target_fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[5], &target_fps) }
func (gdClass EngineSingleton) GetTargetFps() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[6]) }
func (gdClass EngineSingleton) SetTimeScale(time_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[7], &time_scale) }
func (gdClass EngineSingleton) GetTimeScale() float64 { return methodCall[float64](gdClass.obj.get(), methodEngineSingleton[8]) }
func (gdClass EngineSingleton) GetFramesDrawn() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[9]) }
func (gdClass EngineSingleton) GetFramesPerSecond() float64 { return methodCall[float64](gdClass.obj.get(), methodEngineSingleton[10]) }
func (gdClass EngineSingleton) GetPhysicsFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[11]) }
func (gdClass EngineSingleton) GetProcessFrames() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[12]) }
func (gdClass EngineSingleton) GetMainLoop() MainLoop { return methodCall[MainLoop](gdClass.obj.get(), methodEngineSingleton[13]) }
func (gdClass EngineSingleton) GetVersionInfo() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodEngineSingleton[14]) }
func (gdClass EngineSingleton) GetAuthorInfo() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodEngineSingleton[15]) }
func (gdClass EngineSingleton) GetCopyrightInfo() Array { return methodCall[Array](gdClass.obj.get(), methodEngineSingleton[16]) }
func (gdClass EngineSingleton) GetDonorInfo() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodEngineSingleton[17]) }
func (gdClass EngineSingleton) GetLicenseInfo() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodEngineSingleton[18]) }
func (gdClass EngineSingleton) GetLicenseText() string { return methodCall[string](gdClass.obj.get(), methodEngineSingleton[19]) }
func (gdClass EngineSingleton) GetArchitectureName() string { return methodCall[string](gdClass.obj.get(), methodEngineSingleton[20]) }
func (gdClass EngineSingleton) IsInPhysicsFrame() bool { return methodCall[bool](gdClass.obj.get(), methodEngineSingleton[21]) }
func (gdClass EngineSingleton) HasSingleton(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEngineSingleton[22], &name) }
func (gdClass EngineSingleton) GetSingleton(name Name) Object { return methodCall[Object](gdClass.obj.get(), methodEngineSingleton[23], &name) }
func (gdClass EngineSingleton) RegisterSingleton(name Name, instance Object)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[24], &name, &instance) }
func (gdClass EngineSingleton) UnregisterSingleton(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[25], &name) }
func (gdClass EngineSingleton) GetSingletonList() []string { return methodCall[[]string](gdClass.obj.get(), methodEngineSingleton[26]) }
func (gdClass EngineSingleton) RegisterScriptLanguage(language ScriptLanguage)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[27], &language) }
func (gdClass EngineSingleton) GetScriptLanguageCount() int64 { return methodCall[int64](gdClass.obj.get(), methodEngineSingleton[28]) }
func (gdClass EngineSingleton) GetScriptLanguage(index int64) ScriptLanguage { return methodCall[ScriptLanguage](gdClass.obj.get(), methodEngineSingleton[29], &index) }
func (gdClass EngineSingleton) IsEditorHint() bool { return methodCall[bool](gdClass.obj.get(), methodEngineSingleton[30]) }
func (gdClass EngineSingleton) GetWriteMoviePath() string { return methodCall[string](gdClass.obj.get(), methodEngineSingleton[31]) }
func (gdClass EngineSingleton) SetPrintErrorMessages(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEngineSingleton[32], &enabled) }
func (gdClass EngineSingleton) IsPrintingErrorMessages() bool { return methodCall[bool](gdClass.obj.get(), methodEngineSingleton[33]) }
var EngineDebugger EngineDebuggerSingleton

type EngineDebuggerSingleton struct{self *EngineDebuggerSingleton; obj safeObject }
func NewEngineDebuggerSingleton(ctx Context, at *EngineDebuggerSingleton) EngineDebuggerSingleton { if at == nil { at = new(EngineDebuggerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass EngineDebuggerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EngineDebuggerSingleton) owner() cObject { return gdClass.obj.get() }
func (EngineDebuggerSingleton) class() string { return "EngineDebuggerSingleton\000" }

func (gdClass EngineDebuggerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodEngineDebuggerSingleton [11]cMethodBind
func (gdClass EngineDebuggerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass EngineDebuggerSingleton) IsActive() bool { return methodCall[bool](gdClass.obj.get(), methodEngineDebuggerSingleton[0]) }
func (gdClass EngineDebuggerSingleton) RegisterProfiler(name Name, profiler EngineProfiler)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[1], &name, &profiler) }
func (gdClass EngineDebuggerSingleton) UnregisterProfiler(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[2], &name) }
func (gdClass EngineDebuggerSingleton) IsProfiling(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEngineDebuggerSingleton[3], &name) }
func (gdClass EngineDebuggerSingleton) HasProfiler(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEngineDebuggerSingleton[4], &name) }
func (gdClass EngineDebuggerSingleton) ProfilerAddFrameData(name Name, data Array)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[5], &name, &data) }
func (gdClass EngineDebuggerSingleton) ProfilerEnable(name Name, enable bool, arguments Array)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[6], &name, &enable, &arguments) }
func (gdClass EngineDebuggerSingleton) RegisterMessageCapture(name Name, callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[7], &name, &callable) }
func (gdClass EngineDebuggerSingleton) UnregisterMessageCapture(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[8], &name) }
func (gdClass EngineDebuggerSingleton) HasCapture(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodEngineDebuggerSingleton[9], &name) }
func (gdClass EngineDebuggerSingleton) SendMessage(message string, data Array)  { methodCall[struct{}](gdClass.obj.get(), methodEngineDebuggerSingleton[10], &message, &data) }

type EngineProfiler struct{self *EngineProfiler; obj safeObject }
func NewEngineProfiler(ctx Context, at *EngineProfiler) EngineProfiler { if at == nil { at = new(EngineProfiler) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass EngineProfiler) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass EngineProfiler) owner() cObject { return gdClass.obj.get() }
func (EngineProfiler) class() string { return "EngineProfiler\000" }

func (gdClass EngineProfiler) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass EngineProfiler) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_toggle":
		if rtype.Implements(reflect.TypeOf([0]interface{ Toggle(enable bool, options Array)  }{}).Elem()) {
			return rtype.MethodByName(`Toggle`)
		}
		return
	case "_add_frame":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddFrame(data Array)  }{}).Elem()) {
			return rtype.MethodByName(`AddFrame`)
		}
		return
	case "_tick":
		if rtype.Implements(reflect.TypeOf([0]interface{ Tick(frame_time float64, process_time float64, physics_time float64, physics_frame_time float64)  }{}).Elem()) {
			return rtype.MethodByName(`Tick`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type EnvironmentBGMode int64

const (
	EnvironmentBgClearColor EnvironmentBGMode = 0
	EnvironmentBgColor EnvironmentBGMode = 1
	EnvironmentBgSky EnvironmentBGMode = 2
	EnvironmentBgCanvas EnvironmentBGMode = 3
	EnvironmentBgKeep EnvironmentBGMode = 4
	EnvironmentBgCameraFeed EnvironmentBGMode = 5
	EnvironmentBgMax EnvironmentBGMode = 6
)

type EnvironmentAmbientSource int64

const (
	EnvironmentAmbientSourceBg EnvironmentAmbientSource = 0
	EnvironmentAmbientSourceDisabled EnvironmentAmbientSource = 1
	EnvironmentAmbientSourceColor EnvironmentAmbientSource = 2
	EnvironmentAmbientSourceSky EnvironmentAmbientSource = 3
)

type EnvironmentReflectionSource int64

const (
	EnvironmentReflectionSourceBg EnvironmentReflectionSource = 0
	EnvironmentReflectionSourceDisabled EnvironmentReflectionSource = 1
	EnvironmentReflectionSourceSky EnvironmentReflectionSource = 2
)

type EnvironmentToneMapper int64

const (
	EnvironmentToneMapperLinear EnvironmentToneMapper = 0
	EnvironmentToneMapperReinhardt EnvironmentToneMapper = 1
	EnvironmentToneMapperFilmic EnvironmentToneMapper = 2
	EnvironmentToneMapperAces EnvironmentToneMapper = 3
)

type EnvironmentGlowBlendMode int64

const (
	EnvironmentGlowBlendModeAdditive EnvironmentGlowBlendMode = 0
	EnvironmentGlowBlendModeScreen EnvironmentGlowBlendMode = 1
	EnvironmentGlowBlendModeSoftlight EnvironmentGlowBlendMode = 2
	EnvironmentGlowBlendModeReplace EnvironmentGlowBlendMode = 3
	EnvironmentGlowBlendModeMix EnvironmentGlowBlendMode = 4
)

type EnvironmentSDFGIYScale int64

const (
	EnvironmentSdfgiYScale50Percent EnvironmentSDFGIYScale = 0
	EnvironmentSdfgiYScale75Percent EnvironmentSDFGIYScale = 1
	EnvironmentSdfgiYScale100Percent EnvironmentSDFGIYScale = 2
)

type Environment struct{self *Environment; obj safeObject }
func NewEnvironment(ctx Context, at *Environment) Environment { if at == nil { at = new(Environment) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Environment) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Environment) owner() cObject { return gdClass.obj.get() }
func (Environment) class() string { return "Environment\000" }

func (gdClass Environment) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodEnvironment [180]cMethodBind
func (gdClass Environment) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Environment) SetBackground(mode EnvironmentBGMode)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[0], &mode) }
func (gdClass Environment) GetBackground() EnvironmentBGMode { return methodCall[EnvironmentBGMode](gdClass.obj.get(), methodEnvironment[1]) }
func (gdClass Environment) SetSky(sky Sky)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[2], &sky) }
func (gdClass Environment) GetSky() Sky { return methodCall[Sky](gdClass.obj.get(), methodEnvironment[3]) }
func (gdClass Environment) SetSkyCustomFov(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[4], &scale) }
func (gdClass Environment) GetSkyCustomFov() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[5]) }
func (gdClass Environment) SetSkyRotation(euler_radians Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[6], &euler_radians) }
func (gdClass Environment) GetSkyRotation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodEnvironment[7]) }
func (gdClass Environment) SetBgColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[8], &color) }
func (gdClass Environment) GetBgColor() Color { return methodCall[Color](gdClass.obj.get(), methodEnvironment[9]) }
func (gdClass Environment) SetBgEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[10], &energy) }
func (gdClass Environment) GetBgEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[11]) }
func (gdClass Environment) SetCanvasMaxLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[12], &layer) }
func (gdClass Environment) GetCanvasMaxLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodEnvironment[13]) }
func (gdClass Environment) SetCameraFeedId(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[14], &id) }
func (gdClass Environment) GetCameraFeedId() int64 { return methodCall[int64](gdClass.obj.get(), methodEnvironment[15]) }
func (gdClass Environment) SetAmbientLightColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[16], &color) }
func (gdClass Environment) GetAmbientLightColor() Color { return methodCall[Color](gdClass.obj.get(), methodEnvironment[17]) }
func (gdClass Environment) SetAmbientSource(source EnvironmentAmbientSource)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[18], &source) }
func (gdClass Environment) GetAmbientSource() EnvironmentAmbientSource { return methodCall[EnvironmentAmbientSource](gdClass.obj.get(), methodEnvironment[19]) }
func (gdClass Environment) SetAmbientLightEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[20], &energy) }
func (gdClass Environment) GetAmbientLightEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[21]) }
func (gdClass Environment) SetAmbientLightSkyContribution(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[22], &ratio) }
func (gdClass Environment) GetAmbientLightSkyContribution() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[23]) }
func (gdClass Environment) SetReflectionSource(source EnvironmentReflectionSource)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[24], &source) }
func (gdClass Environment) GetReflectionSource() EnvironmentReflectionSource { return methodCall[EnvironmentReflectionSource](gdClass.obj.get(), methodEnvironment[25]) }
func (gdClass Environment) SetTonemapper(mode EnvironmentToneMapper)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[26], &mode) }
func (gdClass Environment) GetTonemapper() EnvironmentToneMapper { return methodCall[EnvironmentToneMapper](gdClass.obj.get(), methodEnvironment[27]) }
func (gdClass Environment) SetTonemapExposure(exposure float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[28], &exposure) }
func (gdClass Environment) GetTonemapExposure() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[29]) }
func (gdClass Environment) SetTonemapWhite(white float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[30], &white) }
func (gdClass Environment) GetTonemapWhite() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[31]) }
func (gdClass Environment) SetTonemapAutoExposureEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[32], &enabled) }
func (gdClass Environment) IsTonemapAutoExposureEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[33]) }
func (gdClass Environment) SetTonemapAutoExposureMax(exposure_max float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[34], &exposure_max) }
func (gdClass Environment) GetTonemapAutoExposureMax() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[35]) }
func (gdClass Environment) SetTonemapAutoExposureMin(exposure_min float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[36], &exposure_min) }
func (gdClass Environment) GetTonemapAutoExposureMin() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[37]) }
func (gdClass Environment) SetTonemapAutoExposureSpeed(exposure_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[38], &exposure_speed) }
func (gdClass Environment) GetTonemapAutoExposureSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[39]) }
func (gdClass Environment) SetTonemapAutoExposureGrey(exposure_grey float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[40], &exposure_grey) }
func (gdClass Environment) GetTonemapAutoExposureGrey() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[41]) }
func (gdClass Environment) SetSsrEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[42], &enabled) }
func (gdClass Environment) IsSsrEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[43]) }
func (gdClass Environment) SetSsrMaxSteps(max_steps int64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[44], &max_steps) }
func (gdClass Environment) GetSsrMaxSteps() int64 { return methodCall[int64](gdClass.obj.get(), methodEnvironment[45]) }
func (gdClass Environment) SetSsrFadeIn(fade_in float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[46], &fade_in) }
func (gdClass Environment) GetSsrFadeIn() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[47]) }
func (gdClass Environment) SetSsrFadeOut(fade_out float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[48], &fade_out) }
func (gdClass Environment) GetSsrFadeOut() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[49]) }
func (gdClass Environment) SetSsrDepthTolerance(depth_tolerance float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[50], &depth_tolerance) }
func (gdClass Environment) GetSsrDepthTolerance() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[51]) }
func (gdClass Environment) SetSsaoEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[52], &enabled) }
func (gdClass Environment) IsSsaoEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[53]) }
func (gdClass Environment) SetSsaoRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[54], &radius) }
func (gdClass Environment) GetSsaoRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[55]) }
func (gdClass Environment) SetSsaoIntensity(intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[56], &intensity) }
func (gdClass Environment) GetSsaoIntensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[57]) }
func (gdClass Environment) SetSsaoPower(power float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[58], &power) }
func (gdClass Environment) GetSsaoPower() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[59]) }
func (gdClass Environment) SetSsaoDetail(detail float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[60], &detail) }
func (gdClass Environment) GetSsaoDetail() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[61]) }
func (gdClass Environment) SetSsaoHorizon(horizon float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[62], &horizon) }
func (gdClass Environment) GetSsaoHorizon() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[63]) }
func (gdClass Environment) SetSsaoSharpness(sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[64], &sharpness) }
func (gdClass Environment) GetSsaoSharpness() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[65]) }
func (gdClass Environment) SetSsaoDirectLightAffect(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[66], &amount) }
func (gdClass Environment) GetSsaoDirectLightAffect() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[67]) }
func (gdClass Environment) SetSsaoAoChannelAffect(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[68], &amount) }
func (gdClass Environment) GetSsaoAoChannelAffect() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[69]) }
func (gdClass Environment) SetSsilEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[70], &enabled) }
func (gdClass Environment) IsSsilEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[71]) }
func (gdClass Environment) SetSsilRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[72], &radius) }
func (gdClass Environment) GetSsilRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[73]) }
func (gdClass Environment) SetSsilIntensity(intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[74], &intensity) }
func (gdClass Environment) GetSsilIntensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[75]) }
func (gdClass Environment) SetSsilSharpness(sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[76], &sharpness) }
func (gdClass Environment) GetSsilSharpness() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[77]) }
func (gdClass Environment) SetSsilNormalRejection(normal_rejection float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[78], &normal_rejection) }
func (gdClass Environment) GetSsilNormalRejection() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[79]) }
func (gdClass Environment) SetSdfgiEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[80], &enabled) }
func (gdClass Environment) IsSdfgiEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[81]) }
func (gdClass Environment) SetSdfgiCascades(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[82], &amount) }
func (gdClass Environment) GetSdfgiCascades() int64 { return methodCall[int64](gdClass.obj.get(), methodEnvironment[83]) }
func (gdClass Environment) SetSdfgiMinCellSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[84], &size) }
func (gdClass Environment) GetSdfgiMinCellSize() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[85]) }
func (gdClass Environment) SetSdfgiMaxDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[86], &distance) }
func (gdClass Environment) GetSdfgiMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[87]) }
func (gdClass Environment) SetSdfgiCascade0Distance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[88], &distance) }
func (gdClass Environment) GetSdfgiCascade0Distance() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[89]) }
func (gdClass Environment) SetSdfgiYScale(scale EnvironmentSDFGIYScale)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[90], &scale) }
func (gdClass Environment) GetSdfgiYScale() EnvironmentSDFGIYScale { return methodCall[EnvironmentSDFGIYScale](gdClass.obj.get(), methodEnvironment[91]) }
func (gdClass Environment) SetSdfgiUseOcclusion(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[92], &enable) }
func (gdClass Environment) IsSdfgiUsingOcclusion() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[93]) }
func (gdClass Environment) SetSdfgiBounceFeedback(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[94], &amount) }
func (gdClass Environment) GetSdfgiBounceFeedback() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[95]) }
func (gdClass Environment) SetSdfgiReadSkyLight(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[96], &enable) }
func (gdClass Environment) IsSdfgiReadingSkyLight() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[97]) }
func (gdClass Environment) SetSdfgiEnergy(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[98], &amount) }
func (gdClass Environment) GetSdfgiEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[99]) }
func (gdClass Environment) SetSdfgiNormalBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[100], &bias) }
func (gdClass Environment) GetSdfgiNormalBias() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[101]) }
func (gdClass Environment) SetSdfgiProbeBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[102], &bias) }
func (gdClass Environment) GetSdfgiProbeBias() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[103]) }
func (gdClass Environment) SetGlowEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[104], &enabled) }
func (gdClass Environment) IsGlowEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[105]) }
func (gdClass Environment) SetGlowLevel(idx int64, intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[106], &idx, &intensity) }
func (gdClass Environment) GetGlowLevel(idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[107], &idx) }
func (gdClass Environment) SetGlowNormalized(normalize bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[108], &normalize) }
func (gdClass Environment) IsGlowNormalized() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[109]) }
func (gdClass Environment) SetGlowIntensity(intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[110], &intensity) }
func (gdClass Environment) GetGlowIntensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[111]) }
func (gdClass Environment) SetGlowStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[112], &strength) }
func (gdClass Environment) GetGlowStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[113]) }
func (gdClass Environment) SetGlowMix(mix float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[114], &mix) }
func (gdClass Environment) GetGlowMix() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[115]) }
func (gdClass Environment) SetGlowBloom(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[116], &amount) }
func (gdClass Environment) GetGlowBloom() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[117]) }
func (gdClass Environment) SetGlowBlendMode(mode EnvironmentGlowBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[118], &mode) }
func (gdClass Environment) GetGlowBlendMode() EnvironmentGlowBlendMode { return methodCall[EnvironmentGlowBlendMode](gdClass.obj.get(), methodEnvironment[119]) }
func (gdClass Environment) SetGlowHdrBleedThreshold(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[120], &threshold) }
func (gdClass Environment) GetGlowHdrBleedThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[121]) }
func (gdClass Environment) SetGlowHdrBleedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[122], &scale) }
func (gdClass Environment) GetGlowHdrBleedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[123]) }
func (gdClass Environment) SetGlowHdrLuminanceCap(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[124], &amount) }
func (gdClass Environment) GetGlowHdrLuminanceCap() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[125]) }
func (gdClass Environment) SetGlowMapStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[126], &strength) }
func (gdClass Environment) GetGlowMapStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[127]) }
func (gdClass Environment) SetGlowMap(mode Texture)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[128], &mode) }
func (gdClass Environment) GetGlowMap() Texture { return methodCall[Texture](gdClass.obj.get(), methodEnvironment[129]) }
func (gdClass Environment) SetFogEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[130], &enabled) }
func (gdClass Environment) IsFogEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[131]) }
func (gdClass Environment) SetFogLightColor(light_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[132], &light_color) }
func (gdClass Environment) GetFogLightColor() Color { return methodCall[Color](gdClass.obj.get(), methodEnvironment[133]) }
func (gdClass Environment) SetFogLightEnergy(light_energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[134], &light_energy) }
func (gdClass Environment) GetFogLightEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[135]) }
func (gdClass Environment) SetFogSunScatter(sun_scatter float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[136], &sun_scatter) }
func (gdClass Environment) GetFogSunScatter() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[137]) }
func (gdClass Environment) SetFogDensity(density float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[138], &density) }
func (gdClass Environment) GetFogDensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[139]) }
func (gdClass Environment) SetFogHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[140], &height) }
func (gdClass Environment) GetFogHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[141]) }
func (gdClass Environment) SetFogHeightDensity(height_density float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[142], &height_density) }
func (gdClass Environment) GetFogHeightDensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[143]) }
func (gdClass Environment) SetFogAerialPerspective(aerial_perspective float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[144], &aerial_perspective) }
func (gdClass Environment) GetFogAerialPerspective() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[145]) }
func (gdClass Environment) SetVolumetricFogEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[146], &enabled) }
func (gdClass Environment) IsVolumetricFogEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[147]) }
func (gdClass Environment) SetVolumetricFogEmission(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[148], &color) }
func (gdClass Environment) GetVolumetricFogEmission() Color { return methodCall[Color](gdClass.obj.get(), methodEnvironment[149]) }
func (gdClass Environment) SetVolumetricFogAlbedo(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[150], &color) }
func (gdClass Environment) GetVolumetricFogAlbedo() Color { return methodCall[Color](gdClass.obj.get(), methodEnvironment[151]) }
func (gdClass Environment) SetVolumetricFogDensity(density float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[152], &density) }
func (gdClass Environment) GetVolumetricFogDensity() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[153]) }
func (gdClass Environment) SetVolumetricFogEmissionEnergy(begin float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[154], &begin) }
func (gdClass Environment) GetVolumetricFogEmissionEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[155]) }
func (gdClass Environment) SetVolumetricFogAnisotropy(anisotropy float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[156], &anisotropy) }
func (gdClass Environment) GetVolumetricFogAnisotropy() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[157]) }
func (gdClass Environment) SetVolumetricFogLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[158], &length) }
func (gdClass Environment) GetVolumetricFogLength() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[159]) }
func (gdClass Environment) SetVolumetricFogDetailSpread(detail_spread float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[160], &detail_spread) }
func (gdClass Environment) GetVolumetricFogDetailSpread() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[161]) }
func (gdClass Environment) SetVolumetricFogGiInject(gi_inject float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[162], &gi_inject) }
func (gdClass Environment) GetVolumetricFogGiInject() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[163]) }
func (gdClass Environment) SetVolumetricFogAmbientInject(enabled float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[164], &enabled) }
func (gdClass Environment) GetVolumetricFogAmbientInject() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[165]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[166], &enabled) }
func (gdClass Environment) IsVolumetricFogTemporalReprojectionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[167]) }
func (gdClass Environment) SetVolumetricFogTemporalReprojectionAmount(temporal_reprojection_amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[168], &temporal_reprojection_amount) }
func (gdClass Environment) GetVolumetricFogTemporalReprojectionAmount() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[169]) }
func (gdClass Environment) SetAdjustmentEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[170], &enabled) }
func (gdClass Environment) IsAdjustmentEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodEnvironment[171]) }
func (gdClass Environment) SetAdjustmentBrightness(brightness float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[172], &brightness) }
func (gdClass Environment) GetAdjustmentBrightness() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[173]) }
func (gdClass Environment) SetAdjustmentContrast(contrast float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[174], &contrast) }
func (gdClass Environment) GetAdjustmentContrast() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[175]) }
func (gdClass Environment) SetAdjustmentSaturation(saturation float64)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[176], &saturation) }
func (gdClass Environment) GetAdjustmentSaturation() float64 { return methodCall[float64](gdClass.obj.get(), methodEnvironment[177]) }
func (gdClass Environment) SetAdjustmentColorCorrection(color_correction Texture)  { methodCall[struct{}](gdClass.obj.get(), methodEnvironment[178], &color_correction) }
func (gdClass Environment) GetAdjustmentColorCorrection() Texture { return methodCall[Texture](gdClass.obj.get(), methodEnvironment[179]) }

type Expression struct{self *Expression; obj safeObject }
func NewExpression(ctx Context, at *Expression) Expression { if at == nil { at = new(Expression) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Expression) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Expression) owner() cObject { return gdClass.obj.get() }
func (Expression) class() string { return "Expression\000" }

func (gdClass Expression) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodExpression [4]cMethodBind
func (gdClass Expression) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Expression) Parse(expression string, input_names []string) int64 { return methodCall[int64](gdClass.obj.get(), methodExpression[0], &expression, &input_names) }
func (gdClass Expression) Execute(inputs Array, base_instance Object, show_error bool, const_calls_only bool) any { return methodCall[any](gdClass.obj.get(), methodExpression[1], &inputs, &base_instance, &show_error, &const_calls_only) }
func (gdClass Expression) HasExecuteFailed() bool { return methodCall[bool](gdClass.obj.get(), methodExpression[2]) }
func (gdClass Expression) GetErrorText() string { return methodCall[string](gdClass.obj.get(), methodExpression[3]) }

type FastNoiseLiteNoiseType int64

const (
	FastNoiseLiteTypeValue FastNoiseLiteNoiseType = 5
	FastNoiseLiteTypeValueCubic FastNoiseLiteNoiseType = 4
	FastNoiseLiteTypePerlin FastNoiseLiteNoiseType = 3
	FastNoiseLiteTypeCellular FastNoiseLiteNoiseType = 2
	FastNoiseLiteTypeSimplex FastNoiseLiteNoiseType = 0
	FastNoiseLiteTypeSimplexSmooth FastNoiseLiteNoiseType = 1
)

type FastNoiseLiteFractalType int64

const (
	FastNoiseLiteFractalNone FastNoiseLiteFractalType = 0
	FastNoiseLiteFractalFbm FastNoiseLiteFractalType = 1
	FastNoiseLiteFractalRidged FastNoiseLiteFractalType = 2
	FastNoiseLiteFractalPingPong FastNoiseLiteFractalType = 3
)

type FastNoiseLiteCellularDistanceFunction int64

const (
	FastNoiseLiteDistanceEuclidean FastNoiseLiteCellularDistanceFunction = 0
	FastNoiseLiteDistanceEuclideanSquared FastNoiseLiteCellularDistanceFunction = 1
	FastNoiseLiteDistanceManhattan FastNoiseLiteCellularDistanceFunction = 2
	FastNoiseLiteDistanceHybrid FastNoiseLiteCellularDistanceFunction = 3
)

type FastNoiseLiteCellularReturnType int64

const (
	FastNoiseLiteReturnCellValue FastNoiseLiteCellularReturnType = 0
	FastNoiseLiteReturnDistance FastNoiseLiteCellularReturnType = 1
	FastNoiseLiteReturnDistance2 FastNoiseLiteCellularReturnType = 2
	FastNoiseLiteReturnDistance2Add FastNoiseLiteCellularReturnType = 3
	FastNoiseLiteReturnDistance2Sub FastNoiseLiteCellularReturnType = 4
	FastNoiseLiteReturnDistance2Mul FastNoiseLiteCellularReturnType = 5
	FastNoiseLiteReturnDistance2Div FastNoiseLiteCellularReturnType = 6
)

type FastNoiseLiteDomainWarpType int64

const (
	FastNoiseLiteDomainWarpSimplex FastNoiseLiteDomainWarpType = 0
	FastNoiseLiteDomainWarpSimplexReduced FastNoiseLiteDomainWarpType = 1
	FastNoiseLiteDomainWarpBasicGrid FastNoiseLiteDomainWarpType = 2
)

type FastNoiseLiteDomainWarpFractalType int64

const (
	FastNoiseLiteDomainWarpFractalNone FastNoiseLiteDomainWarpFractalType = 0
	FastNoiseLiteDomainWarpFractalProgressive FastNoiseLiteDomainWarpFractalType = 1
	FastNoiseLiteDomainWarpFractalIndependent FastNoiseLiteDomainWarpFractalType = 2
)

type FastNoiseLite struct{self *FastNoiseLite; obj safeObject }
func NewFastNoiseLite(ctx Context, at *FastNoiseLite) FastNoiseLite { if at == nil { at = new(FastNoiseLite) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass FastNoiseLite) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FastNoiseLite) owner() cObject { return gdClass.obj.get() }
func (FastNoiseLite) class() string { return "FastNoiseLite\000" }

func (gdClass FastNoiseLite) Noise() Noise { return Noise{obj:gdClass.obj} }

var methodFastNoiseLite [42]cMethodBind
func (gdClass FastNoiseLite) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Noise().virtual(rtype, name)
}
func (gdClass FastNoiseLite) SetNoiseType(atype FastNoiseLiteNoiseType)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[0], &atype) }
func (gdClass FastNoiseLite) GetNoiseType() FastNoiseLiteNoiseType { return methodCall[FastNoiseLiteNoiseType](gdClass.obj.get(), methodFastNoiseLite[1]) }
func (gdClass FastNoiseLite) SetSeed(seed int64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[2], &seed) }
func (gdClass FastNoiseLite) GetSeed() int64 { return methodCall[int64](gdClass.obj.get(), methodFastNoiseLite[3]) }
func (gdClass FastNoiseLite) SetFrequency(freq float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[4], &freq) }
func (gdClass FastNoiseLite) GetFrequency() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[5]) }
func (gdClass FastNoiseLite) SetOffset(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[6], &offset) }
func (gdClass FastNoiseLite) GetOffset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodFastNoiseLite[7]) }
func (gdClass FastNoiseLite) SetFractalType(atype FastNoiseLiteFractalType)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[8], &atype) }
func (gdClass FastNoiseLite) GetFractalType() FastNoiseLiteFractalType { return methodCall[FastNoiseLiteFractalType](gdClass.obj.get(), methodFastNoiseLite[9]) }
func (gdClass FastNoiseLite) SetFractalOctaves(octave_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[10], &octave_count) }
func (gdClass FastNoiseLite) GetFractalOctaves() int64 { return methodCall[int64](gdClass.obj.get(), methodFastNoiseLite[11]) }
func (gdClass FastNoiseLite) SetFractalLacunarity(lacunarity float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[12], &lacunarity) }
func (gdClass FastNoiseLite) GetFractalLacunarity() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[13]) }
func (gdClass FastNoiseLite) SetFractalGain(gain float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[14], &gain) }
func (gdClass FastNoiseLite) GetFractalGain() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[15]) }
func (gdClass FastNoiseLite) SetFractalWeightedStrength(weighted_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[16], &weighted_strength) }
func (gdClass FastNoiseLite) GetFractalWeightedStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[17]) }
func (gdClass FastNoiseLite) SetFractalPingPongStrength(ping_pong_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[18], &ping_pong_strength) }
func (gdClass FastNoiseLite) GetFractalPingPongStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[19]) }
func (gdClass FastNoiseLite) SetCellularDistanceFunction(fn FastNoiseLiteCellularDistanceFunction)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[20], &fn) }
func (gdClass FastNoiseLite) GetCellularDistanceFunction() FastNoiseLiteCellularDistanceFunction { return methodCall[FastNoiseLiteCellularDistanceFunction](gdClass.obj.get(), methodFastNoiseLite[21]) }
func (gdClass FastNoiseLite) SetCellularJitter(jitter float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[22], &jitter) }
func (gdClass FastNoiseLite) GetCellularJitter() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[23]) }
func (gdClass FastNoiseLite) SetCellularReturnType(ret FastNoiseLiteCellularReturnType)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[24], &ret) }
func (gdClass FastNoiseLite) GetCellularReturnType() FastNoiseLiteCellularReturnType { return methodCall[FastNoiseLiteCellularReturnType](gdClass.obj.get(), methodFastNoiseLite[25]) }
func (gdClass FastNoiseLite) SetDomainWarpEnabled(domain_warp_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[26], &domain_warp_enabled) }
func (gdClass FastNoiseLite) IsDomainWarpEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodFastNoiseLite[27]) }
func (gdClass FastNoiseLite) SetDomainWarpType(domain_warp_type FastNoiseLiteDomainWarpType)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[28], &domain_warp_type) }
func (gdClass FastNoiseLite) GetDomainWarpType() FastNoiseLiteDomainWarpType { return methodCall[FastNoiseLiteDomainWarpType](gdClass.obj.get(), methodFastNoiseLite[29]) }
func (gdClass FastNoiseLite) SetDomainWarpAmplitude(domain_warp_amplitude float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[30], &domain_warp_amplitude) }
func (gdClass FastNoiseLite) GetDomainWarpAmplitude() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[31]) }
func (gdClass FastNoiseLite) SetDomainWarpFrequency(domain_warp_frequency float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[32], &domain_warp_frequency) }
func (gdClass FastNoiseLite) GetDomainWarpFrequency() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[33]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalType(domain_warp_fractal_type FastNoiseLiteDomainWarpFractalType)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[34], &domain_warp_fractal_type) }
func (gdClass FastNoiseLite) GetDomainWarpFractalType() FastNoiseLiteDomainWarpFractalType { return methodCall[FastNoiseLiteDomainWarpFractalType](gdClass.obj.get(), methodFastNoiseLite[35]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalOctaves(domain_warp_octave_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[36], &domain_warp_octave_count) }
func (gdClass FastNoiseLite) GetDomainWarpFractalOctaves() int64 { return methodCall[int64](gdClass.obj.get(), methodFastNoiseLite[37]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalLacunarity(domain_warp_lacunarity float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[38], &domain_warp_lacunarity) }
func (gdClass FastNoiseLite) GetDomainWarpFractalLacunarity() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[39]) }
func (gdClass FastNoiseLite) SetDomainWarpFractalGain(domain_warp_gain float64)  { methodCall[struct{}](gdClass.obj.get(), methodFastNoiseLite[40], &domain_warp_gain) }
func (gdClass FastNoiseLite) GetDomainWarpFractalGain() float64 { return methodCall[float64](gdClass.obj.get(), methodFastNoiseLite[41]) }

type FileModeFlags int64

const (
	FileRead FileModeFlags = 1
	FileWrite FileModeFlags = 2
	FileReadWrite FileModeFlags = 3
	FileWriteRead FileModeFlags = 7
)

type FileCompressionMode int64

const (
	FileCompressionFastlz FileCompressionMode = 0
	FileCompressionDeflate FileCompressionMode = 1
	FileCompressionZstd FileCompressionMode = 2
	FileCompressionGzip FileCompressionMode = 3
)

type File struct{self *File; obj safeObject }
func NewFile(ctx Context, at *File) File { if at == nil { at = new(File) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass File) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass File) owner() cObject { return gdClass.obj.get() }
func (File) class() string { return "File\000" }

func (gdClass File) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodFile [47]cMethodBind
func (gdClass File) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass File) OpenEncrypted(path string, mode_flags FileModeFlags, key []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodFile[0], &path, &mode_flags, &key) }
func (gdClass File) OpenEncryptedWithPass(path string, mode_flags FileModeFlags, pass string) int64 { return methodCall[int64](gdClass.obj.get(), methodFile[1], &path, &mode_flags, &pass) }
func (gdClass File) OpenCompressed(path string, mode_flags FileModeFlags, compression_mode FileCompressionMode) int64 { return methodCall[int64](gdClass.obj.get(), methodFile[2], &path, &mode_flags, &compression_mode) }
func (gdClass File) Open(path string, flags FileModeFlags) int64 { return methodCall[int64](gdClass.obj.get(), methodFile[3], &path, &flags) }
func (gdClass File) Flush()  { methodCall[struct{}](gdClass.obj.get(), methodFile[4]) }
func (gdClass File) Close()  { methodCall[struct{}](gdClass.obj.get(), methodFile[5]) }
func (gdClass File) GetPath() string { return methodCall[string](gdClass.obj.get(), methodFile[6]) }
func (gdClass File) GetPathAbsolute() string { return methodCall[string](gdClass.obj.get(), methodFile[7]) }
func (gdClass File) IsOpen() bool { return methodCall[bool](gdClass.obj.get(), methodFile[8]) }
func (gdClass File) SeekTo(position int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[9], &position) }
func (gdClass File) SeekEnd(position int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[10], &position) }
func (gdClass File) GetPosition() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[11]) }
func (gdClass File) GetLength() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[12]) }
func (gdClass File) EofReached() bool { return methodCall[bool](gdClass.obj.get(), methodFile[13]) }
func (gdClass File) Get8() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[14]) }
func (gdClass File) Get16() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[15]) }
func (gdClass File) Get32() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[16]) }
func (gdClass File) Get64() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[17]) }
func (gdClass File) GetFloat() float64 { return methodCall[float64](gdClass.obj.get(), methodFile[18]) }
func (gdClass File) GetDouble() float64 { return methodCall[float64](gdClass.obj.get(), methodFile[19]) }
func (gdClass File) GetReal() float64 { return methodCall[float64](gdClass.obj.get(), methodFile[20]) }
func (gdClass File) GetBuffer(length int64) []byte { return methodCall[[]byte](gdClass.obj.get(), methodFile[21], &length) }
func (gdClass File) GetLine() string { return methodCall[string](gdClass.obj.get(), methodFile[22]) }
func (gdClass File) GetCsvLine(delim string) []string { return methodCall[[]string](gdClass.obj.get(), methodFile[23], &delim) }
func (gdClass File) GetAsText(skip_cr bool) string { return methodCall[string](gdClass.obj.get(), methodFile[24], &skip_cr) }
func (gdClass File) GetMd5(path string) string { return methodCall[string](gdClass.obj.get(), methodFile[25], &path) }
func (gdClass File) GetSha256(path string) string { return methodCall[string](gdClass.obj.get(), methodFile[26], &path) }
func (gdClass File) IsBigEndian() bool { return methodCall[bool](gdClass.obj.get(), methodFile[27]) }
func (gdClass File) SetBigEndian(big_endian bool)  { methodCall[struct{}](gdClass.obj.get(), methodFile[28], &big_endian) }
func (gdClass File) GetError() int64 { return methodCall[int64](gdClass.obj.get(), methodFile[29]) }
func (gdClass File) GetVar(allow_objects bool) any { return methodCall[any](gdClass.obj.get(), methodFile[30], &allow_objects) }
func (gdClass File) Store8(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[31], &value) }
func (gdClass File) Store16(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[32], &value) }
func (gdClass File) Store32(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[33], &value) }
func (gdClass File) Store64(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[34], &value) }
func (gdClass File) StoreFloat(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[35], &value) }
func (gdClass File) StoreDouble(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[36], &value) }
func (gdClass File) StoreReal(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodFile[37], &value) }
func (gdClass File) StoreBuffer(buffer []byte)  { methodCall[struct{}](gdClass.obj.get(), methodFile[38], &buffer) }
func (gdClass File) StoreLine(line string)  { methodCall[struct{}](gdClass.obj.get(), methodFile[39], &line) }
func (gdClass File) StoreCsvLine(values []string, delim string)  { methodCall[struct{}](gdClass.obj.get(), methodFile[40], &values, &delim) }
func (gdClass File) StoreString(s string)  { methodCall[struct{}](gdClass.obj.get(), methodFile[41], &s) }
func (gdClass File) StoreVar(value any, full_objects bool)  { methodCall[struct{}](gdClass.obj.get(), methodFile[42], &value, &full_objects) }
func (gdClass File) StorePascalString(s string)  { methodCall[struct{}](gdClass.obj.get(), methodFile[43], &s) }
func (gdClass File) GetPascalString() string { return methodCall[string](gdClass.obj.get(), methodFile[44]) }
func (gdClass File) FileExists(path string) bool { return methodCall[bool](gdClass.obj.get(), methodFile[45], &path) }
func (gdClass File) GetModifiedTime(file string) int64 { return methodCall[int64](gdClass.obj.get(), methodFile[46], &file) }

type FileDialogFileMode int64

const (
	FileDialogFileModeOpenFile FileDialogFileMode = 0
	FileDialogFileModeOpenFiles FileDialogFileMode = 1
	FileDialogFileModeOpenDir FileDialogFileMode = 2
	FileDialogFileModeOpenAny FileDialogFileMode = 3
	FileDialogFileModeSaveFile FileDialogFileMode = 4
)

type FileDialogAccess int64

const (
	FileDialogAccessResources FileDialogAccess = 0
	FileDialogAccessUserdata FileDialogAccess = 1
	FileDialogAccessFilesystem FileDialogAccess = 2
)

type FileDialog struct{self *FileDialog; obj safeObject }
func NewFileDialog(ctx Context, at *FileDialog) FileDialog { if at == nil { at = new(FileDialog) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass FileDialog) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FileDialog) owner() cObject { return gdClass.obj.get() }
func (FileDialog) class() string { return "FileDialog\000" }

func (gdClass FileDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog{obj:gdClass.obj} }

var methodFileDialog [24]cMethodBind
func (gdClass FileDialog) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ConfirmationDialog().virtual(rtype, name)
}
func (gdClass FileDialog) ClearFilters()  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[0]) }
func (gdClass FileDialog) AddFilter(filter string, description string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[1], &filter, &description) }
func (gdClass FileDialog) SetFilters(filters []string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[2], &filters) }
func (gdClass FileDialog) GetFilters() []string { return methodCall[[]string](gdClass.obj.get(), methodFileDialog[3]) }
func (gdClass FileDialog) GetCurrentDir() string { return methodCall[string](gdClass.obj.get(), methodFileDialog[4]) }
func (gdClass FileDialog) GetCurrentFile() string { return methodCall[string](gdClass.obj.get(), methodFileDialog[5]) }
func (gdClass FileDialog) GetCurrentPath() string { return methodCall[string](gdClass.obj.get(), methodFileDialog[6]) }
func (gdClass FileDialog) SetCurrentDir(dir string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[7], &dir) }
func (gdClass FileDialog) SetCurrentFile(file string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[8], &file) }
func (gdClass FileDialog) SetCurrentPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[9], &path) }
func (gdClass FileDialog) SetModeOverridesTitle(override bool)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[10], &override) }
func (gdClass FileDialog) IsModeOverridingTitle() bool { return methodCall[bool](gdClass.obj.get(), methodFileDialog[11]) }
func (gdClass FileDialog) SetFileMode(mode FileDialogFileMode)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[12], &mode) }
func (gdClass FileDialog) GetFileMode() FileDialogFileMode { return methodCall[FileDialogFileMode](gdClass.obj.get(), methodFileDialog[13]) }
func (gdClass FileDialog) GetVbox() VBoxContainer { return methodCall[VBoxContainer](gdClass.obj.get(), methodFileDialog[14]) }
func (gdClass FileDialog) GetLineEdit() LineEdit { return methodCall[LineEdit](gdClass.obj.get(), methodFileDialog[15]) }
func (gdClass FileDialog) SetAccess(access FileDialogAccess)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[16], &access) }
func (gdClass FileDialog) GetAccess() FileDialogAccess { return methodCall[FileDialogAccess](gdClass.obj.get(), methodFileDialog[17]) }
func (gdClass FileDialog) SetRootSubfolder(dir string)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[18], &dir) }
func (gdClass FileDialog) GetRootSubfolder() string { return methodCall[string](gdClass.obj.get(), methodFileDialog[19]) }
func (gdClass FileDialog) SetShowHiddenFiles(show bool)  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[20], &show) }
func (gdClass FileDialog) IsShowingHiddenFiles() bool { return methodCall[bool](gdClass.obj.get(), methodFileDialog[21]) }
func (gdClass FileDialog) DeselectAll()  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[22]) }
func (gdClass FileDialog) Invalidate()  { methodCall[struct{}](gdClass.obj.get(), methodFileDialog[23]) }

type FileSystemDock struct{self *FileSystemDock; obj safeObject }
func NewFileSystemDock(ctx Context, at *FileSystemDock) FileSystemDock { if at == nil { at = new(FileSystemDock) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass FileSystemDock) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FileSystemDock) owner() cObject { return gdClass.obj.get() }
func (FileSystemDock) class() string { return "FileSystemDock\000" }

func (gdClass FileSystemDock) VBoxContainer() VBoxContainer { return VBoxContainer{obj:gdClass.obj} }

var methodFileSystemDock [1]cMethodBind
func (gdClass FileSystemDock) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VBoxContainer().virtual(rtype, name)
}
func (gdClass FileSystemDock) NavigateToPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodFileSystemDock[0], &path) }

type FlowContainer struct{self *FlowContainer; obj safeObject }
func NewFlowContainer(ctx Context, at *FlowContainer) FlowContainer { if at == nil { at = new(FlowContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass FlowContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FlowContainer) owner() cObject { return gdClass.obj.get() }
func (FlowContainer) class() string { return "FlowContainer\000" }

func (gdClass FlowContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodFlowContainer [1]cMethodBind
func (gdClass FlowContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass FlowContainer) GetLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodFlowContainer[0]) }

type FogMaterial struct{self *FogMaterial; obj safeObject }
func NewFogMaterial(ctx Context, at *FogMaterial) FogMaterial { if at == nil { at = new(FogMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass FogMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FogMaterial) owner() cObject { return gdClass.obj.get() }
func (FogMaterial) class() string { return "FogMaterial\000" }

func (gdClass FogMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodFogMaterial [12]cMethodBind
func (gdClass FogMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass FogMaterial) SetDensity(density float64)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[0], &density) }
func (gdClass FogMaterial) GetDensity() float64 { return methodCall[float64](gdClass.obj.get(), methodFogMaterial[1]) }
func (gdClass FogMaterial) SetAlbedo(albedo Color)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[2], &albedo) }
func (gdClass FogMaterial) GetAlbedo() Color { return methodCall[Color](gdClass.obj.get(), methodFogMaterial[3]) }
func (gdClass FogMaterial) SetEmission(emission Color)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[4], &emission) }
func (gdClass FogMaterial) GetEmission() Color { return methodCall[Color](gdClass.obj.get(), methodFogMaterial[5]) }
func (gdClass FogMaterial) SetHeightFalloff(height_falloff float64)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[6], &height_falloff) }
func (gdClass FogMaterial) GetHeightFalloff() float64 { return methodCall[float64](gdClass.obj.get(), methodFogMaterial[7]) }
func (gdClass FogMaterial) SetEdgeFade(edge_fade float64)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[8], &edge_fade) }
func (gdClass FogMaterial) GetEdgeFade() float64 { return methodCall[float64](gdClass.obj.get(), methodFogMaterial[9]) }
func (gdClass FogMaterial) SetDensityTexture(density_texture Texture3D)  { methodCall[struct{}](gdClass.obj.get(), methodFogMaterial[10], &density_texture) }
func (gdClass FogMaterial) GetDensityTexture() Texture3D { return methodCall[Texture3D](gdClass.obj.get(), methodFogMaterial[11]) }

type FogVolume struct{self *FogVolume; obj safeObject }
func NewFogVolume(ctx Context, at *FogVolume) FogVolume { if at == nil { at = new(FogVolume) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass FogVolume) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FogVolume) owner() cObject { return gdClass.obj.get() }
func (FogVolume) class() string { return "FogVolume\000" }

func (gdClass FogVolume) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodFogVolume [6]cMethodBind
func (gdClass FogVolume) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass FogVolume) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodFogVolume[0], &extents) }
func (gdClass FogVolume) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodFogVolume[1]) }
func (gdClass FogVolume) SetShape(shape RenderingServerFogVolumeShape)  { methodCall[struct{}](gdClass.obj.get(), methodFogVolume[2], &shape) }
func (gdClass FogVolume) GetShape() RenderingServerFogVolumeShape { return methodCall[RenderingServerFogVolumeShape](gdClass.obj.get(), methodFogVolume[3]) }
func (gdClass FogVolume) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodFogVolume[4], &material) }
func (gdClass FogVolume) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodFogVolume[5]) }

type Font struct{self *Font; obj safeObject }
func NewFont(ctx Context, at *Font) Font { if at == nil { at = new(Font) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Font) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Font) owner() cObject { return gdClass.obj.get() }
func (Font) class() string { return "Font\000" }

func (gdClass Font) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodFont [31]cMethodBind
func (gdClass Font) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Font) SetFallbacks(fallbacks Array)  { methodCall[struct{}](gdClass.obj.get(), methodFont[0], &fallbacks) }
func (gdClass Font) GetFallbacks() Array { return methodCall[Array](gdClass.obj.get(), methodFont[1]) }
func (gdClass Font) FindVariation(variation_coordinates Dictionary, face_index int64, strength float64, transform Transform2D) RID { return methodCall[RID](gdClass.obj.get(), methodFont[2], &variation_coordinates, &face_index, &strength, &transform) }
func (gdClass Font) GetRids() Array { return methodCall[Array](gdClass.obj.get(), methodFont[3]) }
func (gdClass Font) GetHeight(font_size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[4], &font_size) }
func (gdClass Font) GetAscent(font_size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[5], &font_size) }
func (gdClass Font) GetDescent(font_size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[6], &font_size) }
func (gdClass Font) GetUnderlinePosition(font_size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[7], &font_size) }
func (gdClass Font) GetUnderlineThickness(font_size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[8], &font_size) }
func (gdClass Font) GetFontName() string { return methodCall[string](gdClass.obj.get(), methodFont[9]) }
func (gdClass Font) GetFontStyleName() string { return methodCall[string](gdClass.obj.get(), methodFont[10]) }
func (gdClass Font) GetFontStyle() TextServerFontStyle { return methodCall[TextServerFontStyle](gdClass.obj.get(), methodFont[11]) }
func (gdClass Font) GetSpacing(spacing TextServerSpacingType) int64 { return methodCall[int64](gdClass.obj.get(), methodFont[12], &spacing) }
func (gdClass Font) GetOpentypeFeatures() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFont[13]) }
func (gdClass Font) SetCacheCapacity(single_line int64, multi_line int64)  { methodCall[struct{}](gdClass.obj.get(), methodFont[14], &single_line, &multi_line) }
func (gdClass Font) GetStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFont[15], &text, &alignment, &width, &font_size, &jst_flags, &direction, &orientation) }
func (gdClass Font) GetMultilineStringSize(text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFont[16], &text, &alignment, &width, &font_size, &max_lines, &brk_flags, &jst_flags, &direction, &orientation) }
func (gdClass Font) DrawString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodFont[17], &canvas_item, &pos, &text, &alignment, &width, &font_size, &modulate, &jst_flags, &direction, &orientation) }
func (gdClass Font) DrawMultilineString(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodFont[18], &canvas_item, &pos, &text, &alignment, &width, &font_size, &max_lines, &modulate, &brk_flags, &jst_flags, &direction, &orientation) }
func (gdClass Font) DrawStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, size int64, modulate Color, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodFont[19], &canvas_item, &pos, &text, &alignment, &width, &font_size, &size, &modulate, &jst_flags, &direction, &orientation) }
func (gdClass Font) DrawMultilineStringOutline(canvas_item RID, pos Vector2, text string, alignment HorizontalAlignment, width float64, font_size int64, max_lines int64, size int64, modulate Color, brk_flags TextServerLineBreakFlag, jst_flags TextServerJustificationFlag, direction TextServerDirection, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodFont[20], &canvas_item, &pos, &text, &alignment, &width, &font_size, &max_lines, &size, &modulate, &brk_flags, &jst_flags, &direction, &orientation) }
func (gdClass Font) GetCharSize(char int64, font_size int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFont[21], &char, &font_size) }
func (gdClass Font) DrawChar(canvas_item RID, pos Vector2, char int64, font_size int64, modulate Color) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[22], &canvas_item, &pos, &char, &font_size, &modulate) }
func (gdClass Font) DrawCharOutline(canvas_item RID, pos Vector2, char int64, font_size int64, size int64, modulate Color) float64 { return methodCall[float64](gdClass.obj.get(), methodFont[23], &canvas_item, &pos, &char, &font_size, &size, &modulate) }
func (gdClass Font) HasChar(char int64) bool { return methodCall[bool](gdClass.obj.get(), methodFont[24], &char) }
func (gdClass Font) GetSupportedChars() string { return methodCall[string](gdClass.obj.get(), methodFont[25]) }
func (gdClass Font) IsLanguageSupported(language string) bool { return methodCall[bool](gdClass.obj.get(), methodFont[26], &language) }
func (gdClass Font) IsScriptSupported(script string) bool { return methodCall[bool](gdClass.obj.get(), methodFont[27], &script) }
func (gdClass Font) GetSupportedFeatureList() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFont[28]) }
func (gdClass Font) GetSupportedVariationList() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFont[29]) }
func (gdClass Font) GetFaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodFont[30]) }

type FontFile struct{self *FontFile; obj safeObject }
func NewFontFile(ctx Context, at *FontFile) FontFile { if at == nil { at = new(FontFile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass FontFile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FontFile) owner() cObject { return gdClass.obj.get() }
func (FontFile) class() string { return "FontFile\000" }

func (gdClass FontFile) Font() Font { return Font{obj:gdClass.obj} }

var methodFontFile [89]cMethodBind
func (gdClass FontFile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Font().virtual(rtype, name)
}
func (gdClass FontFile) LoadBitmapFont(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[0], &path) }
func (gdClass FontFile) LoadDynamicFont(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[1], &path) }
func (gdClass FontFile) SetData(data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[2], &data) }
func (gdClass FontFile) GetData() []byte { return methodCall[[]byte](gdClass.obj.get(), methodFontFile[3]) }
func (gdClass FontFile) SetFontName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[4], &name) }
func (gdClass FontFile) SetFontStyleName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[5], &name) }
func (gdClass FontFile) SetFontStyle(style TextServerFontStyle)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[6], &style) }
func (gdClass FontFile) SetAntialiasing(antialiasing TextServerFontAntialiasing)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[7], &antialiasing) }
func (gdClass FontFile) GetAntialiasing() TextServerFontAntialiasing { return methodCall[TextServerFontAntialiasing](gdClass.obj.get(), methodFontFile[8]) }
func (gdClass FontFile) SetGenerateMipmaps(generate_mipmaps bool)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[9], &generate_mipmaps) }
func (gdClass FontFile) GetGenerateMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodFontFile[10]) }
func (gdClass FontFile) SetMultichannelSignedDistanceField(msdf bool)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[11], &msdf) }
func (gdClass FontFile) IsMultichannelSignedDistanceField() bool { return methodCall[bool](gdClass.obj.get(), methodFontFile[12]) }
func (gdClass FontFile) SetMsdfPixelRange(msdf_pixel_range int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[13], &msdf_pixel_range) }
func (gdClass FontFile) GetMsdfPixelRange() int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[14]) }
func (gdClass FontFile) SetMsdfSize(msdf_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[15], &msdf_size) }
func (gdClass FontFile) GetMsdfSize() int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[16]) }
func (gdClass FontFile) SetFixedSize(fixed_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[17], &fixed_size) }
func (gdClass FontFile) GetFixedSize() int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[18]) }
func (gdClass FontFile) SetForceAutohinter(force_autohinter bool)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[19], &force_autohinter) }
func (gdClass FontFile) IsForceAutohinter() bool { return methodCall[bool](gdClass.obj.get(), methodFontFile[20]) }
func (gdClass FontFile) SetHinting(hinting TextServerHinting)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[21], &hinting) }
func (gdClass FontFile) GetHinting() TextServerHinting { return methodCall[TextServerHinting](gdClass.obj.get(), methodFontFile[22]) }
func (gdClass FontFile) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[23], &subpixel_positioning) }
func (gdClass FontFile) GetSubpixelPositioning() TextServerSubpixelPositioning { return methodCall[TextServerSubpixelPositioning](gdClass.obj.get(), methodFontFile[24]) }
func (gdClass FontFile) SetOversampling(oversampling float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[25], &oversampling) }
func (gdClass FontFile) GetOversampling() float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[26]) }
func (gdClass FontFile) GetCacheCount() int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[27]) }
func (gdClass FontFile) ClearCache()  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[28]) }
func (gdClass FontFile) RemoveCache(cache_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[29], &cache_index) }
func (gdClass FontFile) GetSizeCacheList(cache_index int64) Array { return methodCall[Array](gdClass.obj.get(), methodFontFile[30], &cache_index) }
func (gdClass FontFile) ClearSizeCache(cache_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[31], &cache_index) }
func (gdClass FontFile) RemoveSizeCache(cache_index int64, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[32], &cache_index, &size) }
func (gdClass FontFile) SetVariationCoordinates(cache_index int64, variation_coordinates Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[33], &cache_index, &variation_coordinates) }
func (gdClass FontFile) GetVariationCoordinates(cache_index int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFontFile[34], &cache_index) }
func (gdClass FontFile) SetEmbolden(cache_index int64, strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[35], &cache_index, &strength) }
func (gdClass FontFile) GetEmbolden(cache_index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[36], &cache_index) }
func (gdClass FontFile) SetTransform(cache_index int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[37], &cache_index, &transform) }
func (gdClass FontFile) GetTransform(cache_index int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodFontFile[38], &cache_index) }
func (gdClass FontFile) SetFaceIndex(cache_index int64, face_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[39], &cache_index, &face_index) }
func (gdClass FontFile) GetFaceIndex(cache_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[40], &cache_index) }
func (gdClass FontFile) SetCacheAscent(cache_index int64, size int64, ascent float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[41], &cache_index, &size, &ascent) }
func (gdClass FontFile) GetCacheAscent(cache_index int64, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[42], &cache_index, &size) }
func (gdClass FontFile) SetCacheDescent(cache_index int64, size int64, descent float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[43], &cache_index, &size, &descent) }
func (gdClass FontFile) GetCacheDescent(cache_index int64, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[44], &cache_index, &size) }
func (gdClass FontFile) SetCacheUnderlinePosition(cache_index int64, size int64, underline_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[45], &cache_index, &size, &underline_position) }
func (gdClass FontFile) GetCacheUnderlinePosition(cache_index int64, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[46], &cache_index, &size) }
func (gdClass FontFile) SetCacheUnderlineThickness(cache_index int64, size int64, underline_thickness float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[47], &cache_index, &size, &underline_thickness) }
func (gdClass FontFile) GetCacheUnderlineThickness(cache_index int64, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[48], &cache_index, &size) }
func (gdClass FontFile) SetCacheScale(cache_index int64, size int64, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[49], &cache_index, &size, &scale) }
func (gdClass FontFile) GetCacheScale(cache_index int64, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodFontFile[50], &cache_index, &size) }
func (gdClass FontFile) GetTextureCount(cache_index int64, size Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[51], &cache_index, &size) }
func (gdClass FontFile) ClearTextures(cache_index int64, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[52], &cache_index, &size) }
func (gdClass FontFile) RemoveTexture(cache_index int64, size Vector2i, texture_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[53], &cache_index, &size, &texture_index) }
func (gdClass FontFile) SetTextureImage(cache_index int64, size Vector2i, texture_index int64, image Image)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[54], &cache_index, &size, &texture_index, &image) }
func (gdClass FontFile) GetTextureImage(cache_index int64, size Vector2i, texture_index int64) Image { return methodCall[Image](gdClass.obj.get(), methodFontFile[55], &cache_index, &size, &texture_index) }
func (gdClass FontFile) SetTextureOffsets(cache_index int64, size Vector2i, texture_index int64, offset []int32)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[56], &cache_index, &size, &texture_index, &offset) }
func (gdClass FontFile) GetTextureOffsets(cache_index int64, size Vector2i, texture_index int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodFontFile[57], &cache_index, &size, &texture_index) }
func (gdClass FontFile) GetGlyphList(cache_index int64, size Vector2i) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodFontFile[58], &cache_index, &size) }
func (gdClass FontFile) ClearGlyphs(cache_index int64, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[59], &cache_index, &size) }
func (gdClass FontFile) RemoveGlyph(cache_index int64, size Vector2i, glyph int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[60], &cache_index, &size, &glyph) }
func (gdClass FontFile) SetGlyphAdvance(cache_index int64, size int64, glyph int64, advance Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[61], &cache_index, &size, &glyph, &advance) }
func (gdClass FontFile) GetGlyphAdvance(cache_index int64, size int64, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFontFile[62], &cache_index, &size, &glyph) }
func (gdClass FontFile) SetGlyphOffset(cache_index int64, size Vector2i, glyph int64, offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[63], &cache_index, &size, &glyph, &offset) }
func (gdClass FontFile) GetGlyphOffset(cache_index int64, size Vector2i, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFontFile[64], &cache_index, &size, &glyph) }
func (gdClass FontFile) SetGlyphSize(cache_index int64, size Vector2i, glyph int64, gl_size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[65], &cache_index, &size, &glyph, &gl_size) }
func (gdClass FontFile) GetGlyphSize(cache_index int64, size Vector2i, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFontFile[66], &cache_index, &size, &glyph) }
func (gdClass FontFile) SetGlyphUvRect(cache_index int64, size Vector2i, glyph int64, uv_rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[67], &cache_index, &size, &glyph, &uv_rect) }
func (gdClass FontFile) GetGlyphUvRect(cache_index int64, size Vector2i, glyph int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodFontFile[68], &cache_index, &size, &glyph) }
func (gdClass FontFile) SetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64, texture_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[69], &cache_index, &size, &glyph, &texture_idx) }
func (gdClass FontFile) GetGlyphTextureIdx(cache_index int64, size Vector2i, glyph int64) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[70], &cache_index, &size, &glyph) }
func (gdClass FontFile) GetKerningList(cache_index int64, size int64) Array { return methodCall[Array](gdClass.obj.get(), methodFontFile[71], &cache_index, &size) }
func (gdClass FontFile) ClearKerningMap(cache_index int64, size int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[72], &cache_index, &size) }
func (gdClass FontFile) RemoveKerning(cache_index int64, size int64, glyph_pair Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[73], &cache_index, &size, &glyph_pair) }
func (gdClass FontFile) SetKerning(cache_index int64, size int64, glyph_pair Vector2i, kerning Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[74], &cache_index, &size, &glyph_pair, &kerning) }
func (gdClass FontFile) GetKerning(cache_index int64, size int64, glyph_pair Vector2i) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodFontFile[75], &cache_index, &size, &glyph_pair) }
func (gdClass FontFile) RenderRange(cache_index int64, size Vector2i, start int64, end int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[76], &cache_index, &size, &start, &end) }
func (gdClass FontFile) RenderGlyph(cache_index int64, size Vector2i, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[77], &cache_index, &size, &index) }
func (gdClass FontFile) SetLanguageSupportOverride(language string, supported bool)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[78], &language, &supported) }
func (gdClass FontFile) GetLanguageSupportOverride(language string) bool { return methodCall[bool](gdClass.obj.get(), methodFontFile[79], &language) }
func (gdClass FontFile) RemoveLanguageSupportOverride(language string)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[80], &language) }
func (gdClass FontFile) GetLanguageSupportOverrides() []string { return methodCall[[]string](gdClass.obj.get(), methodFontFile[81]) }
func (gdClass FontFile) SetScriptSupportOverride(script string, supported bool)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[82], &script, &supported) }
func (gdClass FontFile) GetScriptSupportOverride(script string) bool { return methodCall[bool](gdClass.obj.get(), methodFontFile[83], &script) }
func (gdClass FontFile) RemoveScriptSupportOverride(script string)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[84], &script) }
func (gdClass FontFile) GetScriptSupportOverrides() []string { return methodCall[[]string](gdClass.obj.get(), methodFontFile[85]) }
func (gdClass FontFile) SetOpentypeFeatureOverrides(overrides Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodFontFile[86], &overrides) }
func (gdClass FontFile) GetOpentypeFeatureOverrides() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFontFile[87]) }
func (gdClass FontFile) GetGlyphIndex(size int64, char int64, variation_selector int64) int64 { return methodCall[int64](gdClass.obj.get(), methodFontFile[88], &size, &char, &variation_selector) }

type FontVariation struct{self *FontVariation; obj safeObject }
func NewFontVariation(ctx Context, at *FontVariation) FontVariation { if at == nil { at = new(FontVariation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass FontVariation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FontVariation) owner() cObject { return gdClass.obj.get() }
func (FontVariation) class() string { return "FontVariation\000" }

func (gdClass FontVariation) Font() Font { return Font{obj:gdClass.obj} }

var methodFontVariation [12]cMethodBind
func (gdClass FontVariation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Font().virtual(rtype, name)
}
func (gdClass FontVariation) SetBaseFont(font Font)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[0], &font) }
func (gdClass FontVariation) GetBaseFont() Font { return methodCall[Font](gdClass.obj.get(), methodFontVariation[1]) }
func (gdClass FontVariation) SetVariationOpentype(coords Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[2], &coords) }
func (gdClass FontVariation) GetVariationOpentype() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodFontVariation[3]) }
func (gdClass FontVariation) SetVariationEmbolden(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[4], &strength) }
func (gdClass FontVariation) GetVariationEmbolden() float64 { return methodCall[float64](gdClass.obj.get(), methodFontVariation[5]) }
func (gdClass FontVariation) SetVariationFaceIndex(face_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[6], &face_index) }
func (gdClass FontVariation) GetVariationFaceIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodFontVariation[7]) }
func (gdClass FontVariation) SetVariationTransform(transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[8], &transform) }
func (gdClass FontVariation) GetVariationTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodFontVariation[9]) }
func (gdClass FontVariation) SetOpentypeFeatures(features Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[10], &features) }
func (gdClass FontVariation) SetSpacing(spacing TextServerSpacingType, value int64)  { methodCall[struct{}](gdClass.obj.get(), methodFontVariation[11], &spacing, &value) }

type FramebufferCacheRD struct{self *FramebufferCacheRD; obj safeObject }
func NewFramebufferCacheRD(ctx Context, at *FramebufferCacheRD) FramebufferCacheRD { if at == nil { at = new(FramebufferCacheRD) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass FramebufferCacheRD) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass FramebufferCacheRD) owner() cObject { return gdClass.obj.get() }
func (FramebufferCacheRD) class() string { return "FramebufferCacheRD\000" }

func (gdClass FramebufferCacheRD) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass FramebufferCacheRD) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}

type GDScript struct{self *GDScript; obj safeObject }
func NewGDScript(ctx Context, at *GDScript) GDScript { if at == nil { at = new(GDScript) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GDScript) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GDScript) owner() cObject { return gdClass.obj.get() }
func (GDScript) class() string { return "GDScript\000" }

func (gdClass GDScript) Script() Script { return Script{obj:gdClass.obj} }

var methodGDScript [2]cMethodBind
func (gdClass GDScript) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Script().virtual(rtype, name)
}
func (gdClass GDScript) New() any { return methodCall[any](gdClass.obj.get(), methodGDScript[0]) }
func (gdClass GDScript) GetAsByteCode() []byte { return methodCall[[]byte](gdClass.obj.get(), methodGDScript[1]) }

type GDScriptEditorTranslationParserPlugin struct{self *GDScriptEditorTranslationParserPlugin; obj safeObject }
func NewGDScriptEditorTranslationParserPlugin(ctx Context, at *GDScriptEditorTranslationParserPlugin) GDScriptEditorTranslationParserPlugin { if at == nil { at = new(GDScriptEditorTranslationParserPlugin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GDScriptEditorTranslationParserPlugin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GDScriptEditorTranslationParserPlugin) owner() cObject { return gdClass.obj.get() }
func (GDScriptEditorTranslationParserPlugin) class() string { return "GDScriptEditorTranslationParserPlugin\000" }

func (gdClass GDScriptEditorTranslationParserPlugin) EditorTranslationParserPlugin() EditorTranslationParserPlugin { return EditorTranslationParserPlugin{obj:gdClass.obj} }

func (gdClass GDScriptEditorTranslationParserPlugin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.EditorTranslationParserPlugin().virtual(rtype, name)
}

type GDScriptNativeClass struct{self *GDScriptNativeClass; obj safeObject }
func NewGDScriptNativeClass(ctx Context, at *GDScriptNativeClass) GDScriptNativeClass { if at == nil { at = new(GDScriptNativeClass) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GDScriptNativeClass) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GDScriptNativeClass) owner() cObject { return gdClass.obj.get() }
func (GDScriptNativeClass) class() string { return "GDScriptNativeClass\000" }

func (gdClass GDScriptNativeClass) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodGDScriptNativeClass [1]cMethodBind
func (gdClass GDScriptNativeClass) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass GDScriptNativeClass) New() any { return methodCall[any](gdClass.obj.get(), methodGDScriptNativeClass[0]) }

type GLTFAccessor struct{self *GLTFAccessor; obj safeObject }
func NewGLTFAccessor(ctx Context, at *GLTFAccessor) GLTFAccessor { if at == nil { at = new(GLTFAccessor) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFAccessor) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFAccessor) owner() cObject { return gdClass.obj.get() }
func (GLTFAccessor) class() string { return "GLTFAccessor\000" }

func (gdClass GLTFAccessor) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFAccessor [28]cMethodBind
func (gdClass GLTFAccessor) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFAccessor) GetBufferView() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[0]) }
func (gdClass GLTFAccessor) SetBufferView(buffer_view int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[1], &buffer_view) }
func (gdClass GLTFAccessor) GetByteOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[2]) }
func (gdClass GLTFAccessor) SetByteOffset(byte_offset int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[3], &byte_offset) }
func (gdClass GLTFAccessor) GetComponentType() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[4]) }
func (gdClass GLTFAccessor) SetComponentType(component_type int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[5], &component_type) }
func (gdClass GLTFAccessor) GetNormalized() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFAccessor[6]) }
func (gdClass GLTFAccessor) SetNormalized(normalized bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[7], &normalized) }
func (gdClass GLTFAccessor) GetCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[8]) }
func (gdClass GLTFAccessor) SetCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[9], &count) }
func (gdClass GLTFAccessor) GetType() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[10]) }
func (gdClass GLTFAccessor) SetType(atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[11], &atype) }
func (gdClass GLTFAccessor) GetMin() []float64 { return methodCall[[]float64](gdClass.obj.get(), methodGLTFAccessor[12]) }
func (gdClass GLTFAccessor) SetMin(min []float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[13], &min) }
func (gdClass GLTFAccessor) GetMax() []float64 { return methodCall[[]float64](gdClass.obj.get(), methodGLTFAccessor[14]) }
func (gdClass GLTFAccessor) SetMax(max []float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[15], &max) }
func (gdClass GLTFAccessor) GetSparseCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[16]) }
func (gdClass GLTFAccessor) SetSparseCount(sparse_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[17], &sparse_count) }
func (gdClass GLTFAccessor) GetSparseIndicesBufferView() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[18]) }
func (gdClass GLTFAccessor) SetSparseIndicesBufferView(sparse_indices_buffer_view int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[19], &sparse_indices_buffer_view) }
func (gdClass GLTFAccessor) GetSparseIndicesByteOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[20]) }
func (gdClass GLTFAccessor) SetSparseIndicesByteOffset(sparse_indices_byte_offset int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[21], &sparse_indices_byte_offset) }
func (gdClass GLTFAccessor) GetSparseIndicesComponentType() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[22]) }
func (gdClass GLTFAccessor) SetSparseIndicesComponentType(sparse_indices_component_type int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[23], &sparse_indices_component_type) }
func (gdClass GLTFAccessor) GetSparseValuesBufferView() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[24]) }
func (gdClass GLTFAccessor) SetSparseValuesBufferView(sparse_values_buffer_view int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[25], &sparse_values_buffer_view) }
func (gdClass GLTFAccessor) GetSparseValuesByteOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFAccessor[26]) }
func (gdClass GLTFAccessor) SetSparseValuesByteOffset(sparse_values_byte_offset int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAccessor[27], &sparse_values_byte_offset) }

type GLTFAnimation struct{self *GLTFAnimation; obj safeObject }
func NewGLTFAnimation(ctx Context, at *GLTFAnimation) GLTFAnimation { if at == nil { at = new(GLTFAnimation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFAnimation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFAnimation) owner() cObject { return gdClass.obj.get() }
func (GLTFAnimation) class() string { return "GLTFAnimation\000" }

func (gdClass GLTFAnimation) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFAnimation [2]cMethodBind
func (gdClass GLTFAnimation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFAnimation) GetLoop() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFAnimation[0]) }
func (gdClass GLTFAnimation) SetLoop(loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFAnimation[1], &loop) }

type GLTFBufferView struct{self *GLTFBufferView; obj safeObject }
func NewGLTFBufferView(ctx Context, at *GLTFBufferView) GLTFBufferView { if at == nil { at = new(GLTFBufferView) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFBufferView) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFBufferView) owner() cObject { return gdClass.obj.get() }
func (GLTFBufferView) class() string { return "GLTFBufferView\000" }

func (gdClass GLTFBufferView) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFBufferView [10]cMethodBind
func (gdClass GLTFBufferView) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFBufferView) GetBuffer() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFBufferView[0]) }
func (gdClass GLTFBufferView) SetBuffer(buffer int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFBufferView[1], &buffer) }
func (gdClass GLTFBufferView) GetByteOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFBufferView[2]) }
func (gdClass GLTFBufferView) SetByteOffset(byte_offset int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFBufferView[3], &byte_offset) }
func (gdClass GLTFBufferView) GetByteLength() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFBufferView[4]) }
func (gdClass GLTFBufferView) SetByteLength(byte_length int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFBufferView[5], &byte_length) }
func (gdClass GLTFBufferView) GetByteStride() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFBufferView[6]) }
func (gdClass GLTFBufferView) SetByteStride(byte_stride int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFBufferView[7], &byte_stride) }
func (gdClass GLTFBufferView) GetIndices() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFBufferView[8]) }
func (gdClass GLTFBufferView) SetIndices(indices bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFBufferView[9], &indices) }

type GLTFCamera struct{self *GLTFCamera; obj safeObject }
func NewGLTFCamera(ctx Context, at *GLTFCamera) GLTFCamera { if at == nil { at = new(GLTFCamera) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFCamera) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFCamera) owner() cObject { return gdClass.obj.get() }
func (GLTFCamera) class() string { return "GLTFCamera\000" }

func (gdClass GLTFCamera) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFCamera [10]cMethodBind
func (gdClass GLTFCamera) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFCamera) GetPerspective() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFCamera[0]) }
func (gdClass GLTFCamera) SetPerspective(perspective bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFCamera[1], &perspective) }
func (gdClass GLTFCamera) GetFov() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFCamera[2]) }
func (gdClass GLTFCamera) SetFov(fov float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFCamera[3], &fov) }
func (gdClass GLTFCamera) GetSizeMag() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFCamera[4]) }
func (gdClass GLTFCamera) SetSizeMag(size_mag float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFCamera[5], &size_mag) }
func (gdClass GLTFCamera) GetDepthFar() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFCamera[6]) }
func (gdClass GLTFCamera) SetDepthFar(zdepth_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFCamera[7], &zdepth_far) }
func (gdClass GLTFCamera) GetDepthNear() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFCamera[8]) }
func (gdClass GLTFCamera) SetDepthNear(zdepth_near float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFCamera[9], &zdepth_near) }

type GLTFDocument struct{self *GLTFDocument; obj safeObject }
func NewGLTFDocument(ctx Context, at *GLTFDocument) GLTFDocument { if at == nil { at = new(GLTFDocument) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFDocument) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFDocument) owner() cObject { return gdClass.obj.get() }
func (GLTFDocument) class() string { return "GLTFDocument\000" }

func (gdClass GLTFDocument) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFDocument [8]cMethodBind
func (gdClass GLTFDocument) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFDocument) AppendFromFile(path string, state GLTFState, flags int64, bake_fps int64, base_path string) int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFDocument[0], &path, &state, &flags, &bake_fps, &base_path) }
func (gdClass GLTFDocument) AppendFromBuffer(bytes []byte, base_path string, state GLTFState, flags int64, bake_fps int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFDocument[1], &bytes, &base_path, &state, &flags, &bake_fps) }
func (gdClass GLTFDocument) AppendFromScene(node Node, state GLTFState, flags int64, bake_fps int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFDocument[2], &node, &state, &flags, &bake_fps) }
func (gdClass GLTFDocument) GenerateScene(state GLTFState, bake_fps int64) Node { return methodCall[Node](gdClass.obj.get(), methodGLTFDocument[3], &state, &bake_fps) }
func (gdClass GLTFDocument) GenerateBuffer(state GLTFState) []byte { return methodCall[[]byte](gdClass.obj.get(), methodGLTFDocument[4], &state) }
func (gdClass GLTFDocument) WriteToFilesystem(state GLTFState, path string) int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFDocument[5], &state, &path) }
func (gdClass GLTFDocument) SetExtensions(extensions Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFDocument[6], &extensions) }
func (gdClass GLTFDocument) GetExtensions() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFDocument[7]) }

type GLTFDocumentExtension struct{self *GLTFDocumentExtension; obj safeObject }
func NewGLTFDocumentExtension(ctx Context, at *GLTFDocumentExtension) GLTFDocumentExtension { if at == nil { at = new(GLTFDocumentExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFDocumentExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFDocumentExtension) owner() cObject { return gdClass.obj.get() }
func (GLTFDocumentExtension) class() string { return "GLTFDocumentExtension\000" }

func (gdClass GLTFDocumentExtension) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass GLTFDocumentExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_import_preflight":
		if rtype.Implements(reflect.TypeOf([0]interface{ ImportPreflight(state GLTFState) int64 }{}).Elem()) {
			return rtype.MethodByName(`ImportPreflight`)
		}
		return
	case "_import_post_parse":
		if rtype.Implements(reflect.TypeOf([0]interface{ ImportPostParse(state GLTFState) int64 }{}).Elem()) {
			return rtype.MethodByName(`ImportPostParse`)
		}
		return
	case "_import_node":
		if rtype.Implements(reflect.TypeOf([0]interface{ ImportNode(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 }{}).Elem()) {
			return rtype.MethodByName(`ImportNode`)
		}
		return
	case "_import_post":
		if rtype.Implements(reflect.TypeOf([0]interface{ ImportPost(state GLTFState, root Node) int64 }{}).Elem()) {
			return rtype.MethodByName(`ImportPost`)
		}
		return
	case "_export_preflight":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportPreflight(root Node) int64 }{}).Elem()) {
			return rtype.MethodByName(`ExportPreflight`)
		}
		return
	case "_export_node":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportNode(state GLTFState, gltf_node GLTFNode, json Dictionary, node Node) int64 }{}).Elem()) {
			return rtype.MethodByName(`ExportNode`)
		}
		return
	case "_export_post":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExportPost(state GLTFState) int64 }{}).Elem()) {
			return rtype.MethodByName(`ExportPost`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}

type GLTFDocumentExtensionConvertImporterMesh struct{self *GLTFDocumentExtensionConvertImporterMesh; obj safeObject }
func NewGLTFDocumentExtensionConvertImporterMesh(ctx Context, at *GLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtensionConvertImporterMesh { if at == nil { at = new(GLTFDocumentExtensionConvertImporterMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFDocumentExtensionConvertImporterMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFDocumentExtensionConvertImporterMesh) owner() cObject { return gdClass.obj.get() }
func (GLTFDocumentExtensionConvertImporterMesh) class() string { return "GLTFDocumentExtensionConvertImporterMesh\000" }

func (gdClass GLTFDocumentExtensionConvertImporterMesh) GLTFDocumentExtension() GLTFDocumentExtension { return GLTFDocumentExtension{obj:gdClass.obj} }

func (gdClass GLTFDocumentExtensionConvertImporterMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GLTFDocumentExtension().virtual(rtype, name)
}

type GLTFLight struct{self *GLTFLight; obj safeObject }
func NewGLTFLight(ctx Context, at *GLTFLight) GLTFLight { if at == nil { at = new(GLTFLight) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFLight) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFLight) owner() cObject { return gdClass.obj.get() }
func (GLTFLight) class() string { return "GLTFLight\000" }

func (gdClass GLTFLight) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFLight [12]cMethodBind
func (gdClass GLTFLight) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFLight) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodGLTFLight[0]) }
func (gdClass GLTFLight) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[1], &color) }
func (gdClass GLTFLight) GetIntensity() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFLight[2]) }
func (gdClass GLTFLight) SetIntensity(intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[3], &intensity) }
func (gdClass GLTFLight) GetLightType() string { return methodCall[string](gdClass.obj.get(), methodGLTFLight[4]) }
func (gdClass GLTFLight) SetLightType(light_type string)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[5], &light_type) }
func (gdClass GLTFLight) GetRange() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFLight[6]) }
func (gdClass GLTFLight) SetRange(arange float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[7], &arange) }
func (gdClass GLTFLight) GetInnerConeAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFLight[8]) }
func (gdClass GLTFLight) SetInnerConeAngle(inner_cone_angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[9], &inner_cone_angle) }
func (gdClass GLTFLight) GetOuterConeAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFLight[10]) }
func (gdClass GLTFLight) SetOuterConeAngle(outer_cone_angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFLight[11], &outer_cone_angle) }

type GLTFMesh struct{self *GLTFMesh; obj safeObject }
func NewGLTFMesh(ctx Context, at *GLTFMesh) GLTFMesh { if at == nil { at = new(GLTFMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFMesh) owner() cObject { return gdClass.obj.get() }
func (GLTFMesh) class() string { return "GLTFMesh\000" }

func (gdClass GLTFMesh) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFMesh [6]cMethodBind
func (gdClass GLTFMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFMesh) GetMesh() ImporterMesh { return methodCall[ImporterMesh](gdClass.obj.get(), methodGLTFMesh[0]) }
func (gdClass GLTFMesh) SetMesh(mesh ImporterMesh)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFMesh[1], &mesh) }
func (gdClass GLTFMesh) GetBlendWeights() []float32 { return methodCall[[]float32](gdClass.obj.get(), methodGLTFMesh[2]) }
func (gdClass GLTFMesh) SetBlendWeights(blend_weights []float32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFMesh[3], &blend_weights) }
func (gdClass GLTFMesh) GetInstanceMaterials() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFMesh[4]) }
func (gdClass GLTFMesh) SetInstanceMaterials(instance_materials Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFMesh[5], &instance_materials) }

type GLTFNode struct{self *GLTFNode; obj safeObject }
func NewGLTFNode(ctx Context, at *GLTFNode) GLTFNode { if at == nil { at = new(GLTFNode) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFNode) owner() cObject { return gdClass.obj.get() }
func (GLTFNode) class() string { return "GLTFNode\000" }

func (gdClass GLTFNode) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFNode [26]cMethodBind
func (gdClass GLTFNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFNode) GetParent() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[0]) }
func (gdClass GLTFNode) SetParent(parent int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[1], &parent) }
func (gdClass GLTFNode) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[2]) }
func (gdClass GLTFNode) SetHeight(height int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[3], &height) }
func (gdClass GLTFNode) GetXform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodGLTFNode[4]) }
func (gdClass GLTFNode) SetXform(xform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[5], &xform) }
func (gdClass GLTFNode) GetMesh() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[6]) }
func (gdClass GLTFNode) SetMesh(mesh int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[7], &mesh) }
func (gdClass GLTFNode) GetCamera() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[8]) }
func (gdClass GLTFNode) SetCamera(camera int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[9], &camera) }
func (gdClass GLTFNode) GetSkin() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[10]) }
func (gdClass GLTFNode) SetSkin(skin int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[11], &skin) }
func (gdClass GLTFNode) GetSkeleton() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[12]) }
func (gdClass GLTFNode) SetSkeleton(skeleton int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[13], &skeleton) }
func (gdClass GLTFNode) GetJoint() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFNode[14]) }
func (gdClass GLTFNode) SetJoint(joint bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[15], &joint) }
func (gdClass GLTFNode) GetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGLTFNode[16]) }
func (gdClass GLTFNode) SetPosition(position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[17], &position) }
func (gdClass GLTFNode) GetRotation() Quaternion { return methodCall[Quaternion](gdClass.obj.get(), methodGLTFNode[18]) }
func (gdClass GLTFNode) SetRotation(rotation Quaternion)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[19], &rotation) }
func (gdClass GLTFNode) GetScale() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGLTFNode[20]) }
func (gdClass GLTFNode) SetScale(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[21], &scale) }
func (gdClass GLTFNode) GetChildren() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFNode[22]) }
func (gdClass GLTFNode) SetChildren(children []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[23], &children) }
func (gdClass GLTFNode) GetLight() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFNode[24]) }
func (gdClass GLTFNode) SetLight(light int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFNode[25], &light) }

type GLTFSkeleton struct{self *GLTFSkeleton; obj safeObject }
func NewGLTFSkeleton(ctx Context, at *GLTFSkeleton) GLTFSkeleton { if at == nil { at = new(GLTFSkeleton) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFSkeleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFSkeleton) owner() cObject { return gdClass.obj.get() }
func (GLTFSkeleton) class() string { return "GLTFSkeleton\000" }

func (gdClass GLTFSkeleton) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFSkeleton [11]cMethodBind
func (gdClass GLTFSkeleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFSkeleton) GetJoints() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkeleton[0]) }
func (gdClass GLTFSkeleton) SetJoints(joints []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkeleton[1], &joints) }
func (gdClass GLTFSkeleton) GetRoots() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkeleton[2]) }
func (gdClass GLTFSkeleton) SetRoots(roots []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkeleton[3], &roots) }
func (gdClass GLTFSkeleton) GetGodotSkeleton() Skeleton3D { return methodCall[Skeleton3D](gdClass.obj.get(), methodGLTFSkeleton[4]) }
func (gdClass GLTFSkeleton) GetUniqueNames() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFSkeleton[5]) }
func (gdClass GLTFSkeleton) SetUniqueNames(unique_names Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkeleton[6], &unique_names) }
func (gdClass GLTFSkeleton) GetGodotBoneNode() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGLTFSkeleton[7]) }
func (gdClass GLTFSkeleton) SetGodotBoneNode(godot_bone_node Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkeleton[8], &godot_bone_node) }
func (gdClass GLTFSkeleton) GetBoneAttachmentCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFSkeleton[9]) }
func (gdClass GLTFSkeleton) GetBoneAttachment(idx int64) BoneAttachment3D { return methodCall[BoneAttachment3D](gdClass.obj.get(), methodGLTFSkeleton[10], &idx) }

type GLTFSkin struct{self *GLTFSkin; obj safeObject }
func NewGLTFSkin(ctx Context, at *GLTFSkin) GLTFSkin { if at == nil { at = new(GLTFSkin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFSkin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFSkin) owner() cObject { return gdClass.obj.get() }
func (GLTFSkin) class() string { return "GLTFSkin\000" }

func (gdClass GLTFSkin) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFSkin [20]cMethodBind
func (gdClass GLTFSkin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFSkin) GetSkinRoot() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFSkin[0]) }
func (gdClass GLTFSkin) SetSkinRoot(skin_root int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[1], &skin_root) }
func (gdClass GLTFSkin) GetJointsOriginal() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkin[2]) }
func (gdClass GLTFSkin) SetJointsOriginal(joints_original []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[3], &joints_original) }
func (gdClass GLTFSkin) GetInverseBinds() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFSkin[4]) }
func (gdClass GLTFSkin) SetInverseBinds(inverse_binds Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[5], &inverse_binds) }
func (gdClass GLTFSkin) GetJoints() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkin[6]) }
func (gdClass GLTFSkin) SetJoints(joints []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[7], &joints) }
func (gdClass GLTFSkin) GetNonJoints() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkin[8]) }
func (gdClass GLTFSkin) SetNonJoints(non_joints []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[9], &non_joints) }
func (gdClass GLTFSkin) GetRoots() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFSkin[10]) }
func (gdClass GLTFSkin) SetRoots(roots []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[11], &roots) }
func (gdClass GLTFSkin) GetSkeleton() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFSkin[12]) }
func (gdClass GLTFSkin) SetSkeleton(skeleton int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[13], &skeleton) }
func (gdClass GLTFSkin) GetJointIToBoneI() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGLTFSkin[14]) }
func (gdClass GLTFSkin) SetJointIToBoneI(joint_i_to_bone_i Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[15], &joint_i_to_bone_i) }
func (gdClass GLTFSkin) GetJointIToName() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGLTFSkin[16]) }
func (gdClass GLTFSkin) SetJointIToName(joint_i_to_name Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[17], &joint_i_to_name) }
func (gdClass GLTFSkin) GetGodotSkin() Skin { return methodCall[Skin](gdClass.obj.get(), methodGLTFSkin[18]) }
func (gdClass GLTFSkin) SetGodotSkin(godot_skin Skin)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSkin[19], &godot_skin) }

type GLTFSpecGloss struct{self *GLTFSpecGloss; obj safeObject }
func NewGLTFSpecGloss(ctx Context, at *GLTFSpecGloss) GLTFSpecGloss { if at == nil { at = new(GLTFSpecGloss) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFSpecGloss) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFSpecGloss) owner() cObject { return gdClass.obj.get() }
func (GLTFSpecGloss) class() string { return "GLTFSpecGloss\000" }

func (gdClass GLTFSpecGloss) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFSpecGloss [10]cMethodBind
func (gdClass GLTFSpecGloss) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFSpecGloss) GetDiffuseImg() Image { return methodCall[Image](gdClass.obj.get(), methodGLTFSpecGloss[0]) }
func (gdClass GLTFSpecGloss) SetDiffuseImg(diffuse_img Image)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSpecGloss[1], &diffuse_img) }
func (gdClass GLTFSpecGloss) GetDiffuseFactor() Color { return methodCall[Color](gdClass.obj.get(), methodGLTFSpecGloss[2]) }
func (gdClass GLTFSpecGloss) SetDiffuseFactor(diffuse_factor Color)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSpecGloss[3], &diffuse_factor) }
func (gdClass GLTFSpecGloss) GetGlossFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodGLTFSpecGloss[4]) }
func (gdClass GLTFSpecGloss) SetGlossFactor(gloss_factor float64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSpecGloss[5], &gloss_factor) }
func (gdClass GLTFSpecGloss) GetSpecularFactor() Color { return methodCall[Color](gdClass.obj.get(), methodGLTFSpecGloss[6]) }
func (gdClass GLTFSpecGloss) SetSpecularFactor(specular_factor Color)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSpecGloss[7], &specular_factor) }
func (gdClass GLTFSpecGloss) GetSpecGlossImg() Image { return methodCall[Image](gdClass.obj.get(), methodGLTFSpecGloss[8]) }
func (gdClass GLTFSpecGloss) SetSpecGlossImg(spec_gloss_img Image)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFSpecGloss[9], &spec_gloss_img) }

type GLTFState struct{self *GLTFState; obj safeObject }
func NewGLTFState(ctx Context, at *GLTFState) GLTFState { if at == nil { at = new(GLTFState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFState) owner() cObject { return gdClass.obj.get() }
func (GLTFState) class() string { return "GLTFState\000" }

func (gdClass GLTFState) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFState [53]cMethodBind
func (gdClass GLTFState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFState) GetJson() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGLTFState[0]) }
func (gdClass GLTFState) SetJson(json Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[1], &json) }
func (gdClass GLTFState) GetMajorVersion() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFState[2]) }
func (gdClass GLTFState) SetMajorVersion(major_version int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[3], &major_version) }
func (gdClass GLTFState) GetMinorVersion() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFState[4]) }
func (gdClass GLTFState) SetMinorVersion(minor_version int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[5], &minor_version) }
func (gdClass GLTFState) GetGlbData() []byte { return methodCall[[]byte](gdClass.obj.get(), methodGLTFState[6]) }
func (gdClass GLTFState) SetGlbData(glb_data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[7], &glb_data) }
func (gdClass GLTFState) GetUseNamedSkinBinds() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFState[8]) }
func (gdClass GLTFState) SetUseNamedSkinBinds(use_named_skin_binds bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[9], &use_named_skin_binds) }
func (gdClass GLTFState) GetNodes() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[10]) }
func (gdClass GLTFState) SetNodes(nodes Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[11], &nodes) }
func (gdClass GLTFState) GetBuffers() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[12]) }
func (gdClass GLTFState) SetBuffers(buffers Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[13], &buffers) }
func (gdClass GLTFState) GetBufferViews() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[14]) }
func (gdClass GLTFState) SetBufferViews(buffer_views Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[15], &buffer_views) }
func (gdClass GLTFState) GetAccessors() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[16]) }
func (gdClass GLTFState) SetAccessors(accessors Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[17], &accessors) }
func (gdClass GLTFState) GetMeshes() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[18]) }
func (gdClass GLTFState) SetMeshes(meshes Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[19], &meshes) }
func (gdClass GLTFState) GetAnimationPlayersCount(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFState[20], &idx) }
func (gdClass GLTFState) GetAnimationPlayer(idx int64) AnimationPlayer { return methodCall[AnimationPlayer](gdClass.obj.get(), methodGLTFState[21], &idx) }
func (gdClass GLTFState) GetMaterials() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[22]) }
func (gdClass GLTFState) SetMaterials(materials Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[23], &materials) }
func (gdClass GLTFState) GetSceneName() string { return methodCall[string](gdClass.obj.get(), methodGLTFState[24]) }
func (gdClass GLTFState) SetSceneName(scene_name string)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[25], &scene_name) }
func (gdClass GLTFState) GetBasePath() string { return methodCall[string](gdClass.obj.get(), methodGLTFState[26]) }
func (gdClass GLTFState) SetBasePath(base_path string)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[27], &base_path) }
func (gdClass GLTFState) GetRootNodes() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGLTFState[28]) }
func (gdClass GLTFState) SetRootNodes(root_nodes []int32)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[29], &root_nodes) }
func (gdClass GLTFState) GetTextures() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[30]) }
func (gdClass GLTFState) SetTextures(textures Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[31], &textures) }
func (gdClass GLTFState) GetImages() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[32]) }
func (gdClass GLTFState) SetImages(images Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[33], &images) }
func (gdClass GLTFState) GetSkins() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[34]) }
func (gdClass GLTFState) SetSkins(skins Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[35], &skins) }
func (gdClass GLTFState) GetCameras() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[36]) }
func (gdClass GLTFState) SetCameras(cameras Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[37], &cameras) }
func (gdClass GLTFState) GetLights() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[38]) }
func (gdClass GLTFState) SetLights(lights Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[39], &lights) }
func (gdClass GLTFState) GetUniqueNames() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[40]) }
func (gdClass GLTFState) SetUniqueNames(unique_names Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[41], &unique_names) }
func (gdClass GLTFState) GetUniqueAnimationNames() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[42]) }
func (gdClass GLTFState) SetUniqueAnimationNames(unique_animation_names Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[43], &unique_animation_names) }
func (gdClass GLTFState) GetSkeletons() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[44]) }
func (gdClass GLTFState) SetSkeletons(skeletons Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[45], &skeletons) }
func (gdClass GLTFState) GetSkeletonToNode() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGLTFState[46]) }
func (gdClass GLTFState) SetSkeletonToNode(skeleton_to_node Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[47], &skeleton_to_node) }
func (gdClass GLTFState) GetCreateAnimations() bool { return methodCall[bool](gdClass.obj.get(), methodGLTFState[48]) }
func (gdClass GLTFState) SetCreateAnimations(create_animations bool)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[49], &create_animations) }
func (gdClass GLTFState) GetAnimations() Array { return methodCall[Array](gdClass.obj.get(), methodGLTFState[50]) }
func (gdClass GLTFState) SetAnimations(animations Array)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFState[51], &animations) }
func (gdClass GLTFState) GetSceneNode(idx int64) Node { return methodCall[Node](gdClass.obj.get(), methodGLTFState[52], &idx) }

type GLTFTexture struct{self *GLTFTexture; obj safeObject }
func NewGLTFTexture(ctx Context, at *GLTFTexture) GLTFTexture { if at == nil { at = new(GLTFTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GLTFTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GLTFTexture) owner() cObject { return gdClass.obj.get() }
func (GLTFTexture) class() string { return "GLTFTexture\000" }

func (gdClass GLTFTexture) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGLTFTexture [2]cMethodBind
func (gdClass GLTFTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass GLTFTexture) GetSrcImage() int64 { return methodCall[int64](gdClass.obj.get(), methodGLTFTexture[0]) }
func (gdClass GLTFTexture) SetSrcImage(src_image int64)  { methodCall[struct{}](gdClass.obj.get(), methodGLTFTexture[1], &src_image) }

type GPUParticles2DDrawOrder int64

const (
	GPUParticles2DDrawOrderIndex GPUParticles2DDrawOrder = 0
	GPUParticles2DDrawOrderLifetime GPUParticles2DDrawOrder = 1
	GPUParticles2DDrawOrderReverseLifetime GPUParticles2DDrawOrder = 2
)

type GPUParticles2DEmitFlags int64

const (
	GPUParticles2DEmitFlagPosition GPUParticles2DEmitFlags = 1
	GPUParticles2DEmitFlagRotationScale GPUParticles2DEmitFlags = 2
	GPUParticles2DEmitFlagVelocity GPUParticles2DEmitFlags = 4
	GPUParticles2DEmitFlagColor GPUParticles2DEmitFlags = 8
	GPUParticles2DEmitFlagCustom GPUParticles2DEmitFlags = 16
)

type GPUParticles2D struct{self *GPUParticles2D; obj safeObject }
func NewGPUParticles2D(ctx Context, at *GPUParticles2D) GPUParticles2D { if at == nil { at = new(GPUParticles2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticles2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticles2D) owner() cObject { return gdClass.obj.get() }
func (GPUParticles2D) class() string { return "GPUParticles2D\000" }

func (gdClass GPUParticles2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodGPUParticles2D [47]cMethodBind
func (gdClass GPUParticles2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass GPUParticles2D) SetEmitting(emitting bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[0], &emitting) }
func (gdClass GPUParticles2D) SetAmount(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[1], &amount) }
func (gdClass GPUParticles2D) SetLifetime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[2], &secs) }
func (gdClass GPUParticles2D) SetOneShot(secs bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[3], &secs) }
func (gdClass GPUParticles2D) SetPreProcessTime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[4], &secs) }
func (gdClass GPUParticles2D) SetExplosivenessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[5], &ratio) }
func (gdClass GPUParticles2D) SetRandomnessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[6], &ratio) }
func (gdClass GPUParticles2D) SetVisibilityRect(visibility_rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[7], &visibility_rect) }
func (gdClass GPUParticles2D) SetUseLocalCoordinates(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[8], &enable) }
func (gdClass GPUParticles2D) SetFixedFps(fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[9], &fps) }
func (gdClass GPUParticles2D) SetFractionalDelta(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[10], &enable) }
func (gdClass GPUParticles2D) SetInterpolate(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[11], &enable) }
func (gdClass GPUParticles2D) SetProcessMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[12], &material) }
func (gdClass GPUParticles2D) SetSpeedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[13], &scale) }
func (gdClass GPUParticles2D) SetCollisionBaseSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[14], &size) }
func (gdClass GPUParticles2D) IsEmitting() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[15]) }
func (gdClass GPUParticles2D) GetAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles2D[16]) }
func (gdClass GPUParticles2D) GetLifetime() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[17]) }
func (gdClass GPUParticles2D) GetOneShot() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[18]) }
func (gdClass GPUParticles2D) GetPreProcessTime() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[19]) }
func (gdClass GPUParticles2D) GetExplosivenessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[20]) }
func (gdClass GPUParticles2D) GetRandomnessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[21]) }
func (gdClass GPUParticles2D) GetVisibilityRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodGPUParticles2D[22]) }
func (gdClass GPUParticles2D) GetUseLocalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[23]) }
func (gdClass GPUParticles2D) GetFixedFps() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles2D[24]) }
func (gdClass GPUParticles2D) GetFractionalDelta() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[25]) }
func (gdClass GPUParticles2D) GetInterpolate() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[26]) }
func (gdClass GPUParticles2D) GetProcessMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodGPUParticles2D[27]) }
func (gdClass GPUParticles2D) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[28]) }
func (gdClass GPUParticles2D) GetCollisionBaseSize() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[29]) }
func (gdClass GPUParticles2D) SetDrawOrder(order GPUParticles2DDrawOrder)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[30], &order) }
func (gdClass GPUParticles2D) GetDrawOrder() GPUParticles2DDrawOrder { return methodCall[GPUParticles2DDrawOrder](gdClass.obj.get(), methodGPUParticles2D[31]) }
func (gdClass GPUParticles2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[32], &texture) }
func (gdClass GPUParticles2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodGPUParticles2D[33]) }
func (gdClass GPUParticles2D) CaptureRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodGPUParticles2D[34]) }
func (gdClass GPUParticles2D) Restart()  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[35]) }
func (gdClass GPUParticles2D) SetSubEmitter(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[36], &path) }
func (gdClass GPUParticles2D) GetSubEmitter() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodGPUParticles2D[37]) }
func (gdClass GPUParticles2D) EmitParticle(xform Transform2D, velocity Vector2, color Color, custom Color, flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[38], &xform, &velocity, &color, &custom, &flags) }
func (gdClass GPUParticles2D) SetTrailEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[39], &enabled) }
func (gdClass GPUParticles2D) SetTrailLength(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[40], &secs) }
func (gdClass GPUParticles2D) IsTrailEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles2D[41]) }
func (gdClass GPUParticles2D) GetTrailLength() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles2D[42]) }
func (gdClass GPUParticles2D) SetTrailSections(sections int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[43], &sections) }
func (gdClass GPUParticles2D) GetTrailSections() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles2D[44]) }
func (gdClass GPUParticles2D) SetTrailSectionSubdivisions(subdivisions int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles2D[45], &subdivisions) }
func (gdClass GPUParticles2D) GetTrailSectionSubdivisions() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles2D[46]) }

type GPUParticles3DDrawOrder int64

const (
	GPUParticles3DDrawOrderIndex GPUParticles3DDrawOrder = 0
	GPUParticles3DDrawOrderLifetime GPUParticles3DDrawOrder = 1
	GPUParticles3DDrawOrderReverseLifetime GPUParticles3DDrawOrder = 2
	GPUParticles3DDrawOrderViewDepth GPUParticles3DDrawOrder = 3
)

type GPUParticles3DEmitFlags int64

const (
	GPUParticles3DEmitFlagPosition GPUParticles3DEmitFlags = 1
	GPUParticles3DEmitFlagRotationScale GPUParticles3DEmitFlags = 2
	GPUParticles3DEmitFlagVelocity GPUParticles3DEmitFlags = 4
	GPUParticles3DEmitFlagColor GPUParticles3DEmitFlags = 8
	GPUParticles3DEmitFlagCustom GPUParticles3DEmitFlags = 16
)

type GPUParticles3DTransformAlign int64

const (
	GPUParticles3DTransformAlignDisabled GPUParticles3DTransformAlign = 0
	GPUParticles3DTransformAlignZBillboard GPUParticles3DTransformAlign = 1
	GPUParticles3DTransformAlignYToVelocity GPUParticles3DTransformAlign = 2
	GPUParticles3DTransformAlignZBillboardYToVelocity GPUParticles3DTransformAlign = 3
)

type GPUParticles3D struct{self *GPUParticles3D; obj safeObject }
func NewGPUParticles3D(ctx Context, at *GPUParticles3D) GPUParticles3D { if at == nil { at = new(GPUParticles3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticles3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticles3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticles3D) class() string { return "GPUParticles3D\000" }

func (gdClass GPUParticles3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodGPUParticles3D [49]cMethodBind
func (gdClass GPUParticles3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass GPUParticles3D) SetEmitting(emitting bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[0], &emitting) }
func (gdClass GPUParticles3D) SetAmount(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[1], &amount) }
func (gdClass GPUParticles3D) SetLifetime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[2], &secs) }
func (gdClass GPUParticles3D) SetOneShot(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[3], &enable) }
func (gdClass GPUParticles3D) SetPreProcessTime(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[4], &secs) }
func (gdClass GPUParticles3D) SetExplosivenessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[5], &ratio) }
func (gdClass GPUParticles3D) SetRandomnessRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[6], &ratio) }
func (gdClass GPUParticles3D) SetVisibilityAabb(aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[7], &aabb) }
func (gdClass GPUParticles3D) SetUseLocalCoordinates(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[8], &enable) }
func (gdClass GPUParticles3D) SetFixedFps(fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[9], &fps) }
func (gdClass GPUParticles3D) SetFractionalDelta(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[10], &enable) }
func (gdClass GPUParticles3D) SetInterpolate(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[11], &enable) }
func (gdClass GPUParticles3D) SetProcessMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[12], &material) }
func (gdClass GPUParticles3D) SetSpeedScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[13], &scale) }
func (gdClass GPUParticles3D) SetCollisionBaseSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[14], &size) }
func (gdClass GPUParticles3D) IsEmitting() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[15]) }
func (gdClass GPUParticles3D) GetAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles3D[16]) }
func (gdClass GPUParticles3D) GetLifetime() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[17]) }
func (gdClass GPUParticles3D) GetOneShot() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[18]) }
func (gdClass GPUParticles3D) GetPreProcessTime() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[19]) }
func (gdClass GPUParticles3D) GetExplosivenessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[20]) }
func (gdClass GPUParticles3D) GetRandomnessRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[21]) }
func (gdClass GPUParticles3D) GetVisibilityAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodGPUParticles3D[22]) }
func (gdClass GPUParticles3D) GetUseLocalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[23]) }
func (gdClass GPUParticles3D) GetFixedFps() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles3D[24]) }
func (gdClass GPUParticles3D) GetFractionalDelta() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[25]) }
func (gdClass GPUParticles3D) GetInterpolate() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[26]) }
func (gdClass GPUParticles3D) GetProcessMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodGPUParticles3D[27]) }
func (gdClass GPUParticles3D) GetSpeedScale() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[28]) }
func (gdClass GPUParticles3D) GetCollisionBaseSize() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[29]) }
func (gdClass GPUParticles3D) SetDrawOrder(order GPUParticles3DDrawOrder)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[30], &order) }
func (gdClass GPUParticles3D) GetDrawOrder() GPUParticles3DDrawOrder { return methodCall[GPUParticles3DDrawOrder](gdClass.obj.get(), methodGPUParticles3D[31]) }
func (gdClass GPUParticles3D) SetDrawPasses(passes int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[32], &passes) }
func (gdClass GPUParticles3D) SetDrawPassMesh(pass int64, mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[33], &pass, &mesh) }
func (gdClass GPUParticles3D) GetDrawPasses() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticles3D[34]) }
func (gdClass GPUParticles3D) GetDrawPassMesh(pass int64) Mesh { return methodCall[Mesh](gdClass.obj.get(), methodGPUParticles3D[35], &pass) }
func (gdClass GPUParticles3D) SetSkin(skin Skin)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[36], &skin) }
func (gdClass GPUParticles3D) GetSkin() Skin { return methodCall[Skin](gdClass.obj.get(), methodGPUParticles3D[37]) }
func (gdClass GPUParticles3D) Restart()  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[38]) }
func (gdClass GPUParticles3D) CaptureAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodGPUParticles3D[39]) }
func (gdClass GPUParticles3D) SetSubEmitter(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[40], &path) }
func (gdClass GPUParticles3D) GetSubEmitter() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodGPUParticles3D[41]) }
func (gdClass GPUParticles3D) EmitParticle(xform Transform3D, velocity Vector3, color Color, custom Color, flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[42], &xform, &velocity, &color, &custom, &flags) }
func (gdClass GPUParticles3D) SetTrailEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[43], &enabled) }
func (gdClass GPUParticles3D) SetTrailLength(secs float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[44], &secs) }
func (gdClass GPUParticles3D) IsTrailEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticles3D[45]) }
func (gdClass GPUParticles3D) GetTrailLength() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticles3D[46]) }
func (gdClass GPUParticles3D) SetTransformAlign(align GPUParticles3DTransformAlign)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticles3D[47], &align) }
func (gdClass GPUParticles3D) GetTransformAlign() GPUParticles3DTransformAlign { return methodCall[GPUParticles3DTransformAlign](gdClass.obj.get(), methodGPUParticles3D[48]) }

type GPUParticlesAttractor3D struct{self *GPUParticlesAttractor3D; obj safeObject }
func NewGPUParticlesAttractor3D(ctx Context, at *GPUParticlesAttractor3D) GPUParticlesAttractor3D { if at == nil { at = new(GPUParticlesAttractor3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesAttractor3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesAttractor3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesAttractor3D) class() string { return "GPUParticlesAttractor3D\000" }

func (gdClass GPUParticlesAttractor3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodGPUParticlesAttractor3D [8]cMethodBind
func (gdClass GPUParticlesAttractor3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass GPUParticlesAttractor3D) SetCullMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractor3D[0], &mask) }
func (gdClass GPUParticlesAttractor3D) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticlesAttractor3D[1]) }
func (gdClass GPUParticlesAttractor3D) SetStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractor3D[2], &strength) }
func (gdClass GPUParticlesAttractor3D) GetStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesAttractor3D[3]) }
func (gdClass GPUParticlesAttractor3D) SetAttenuation(attenuation float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractor3D[4], &attenuation) }
func (gdClass GPUParticlesAttractor3D) GetAttenuation() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesAttractor3D[5]) }
func (gdClass GPUParticlesAttractor3D) SetDirectionality(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractor3D[6], &amount) }
func (gdClass GPUParticlesAttractor3D) GetDirectionality() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesAttractor3D[7]) }

type GPUParticlesAttractorBox3D struct{self *GPUParticlesAttractorBox3D; obj safeObject }
func NewGPUParticlesAttractorBox3D(ctx Context, at *GPUParticlesAttractorBox3D) GPUParticlesAttractorBox3D { if at == nil { at = new(GPUParticlesAttractorBox3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesAttractorBox3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesAttractorBox3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesAttractorBox3D) class() string { return "GPUParticlesAttractorBox3D\000" }

func (gdClass GPUParticlesAttractorBox3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D{obj:gdClass.obj} }

var methodGPUParticlesAttractorBox3D [2]cMethodBind
func (gdClass GPUParticlesAttractorBox3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesAttractor3D().virtual(rtype, name)
}
func (gdClass GPUParticlesAttractorBox3D) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractorBox3D[0], &extents) }
func (gdClass GPUParticlesAttractorBox3D) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGPUParticlesAttractorBox3D[1]) }

type GPUParticlesAttractorSphere3D struct{self *GPUParticlesAttractorSphere3D; obj safeObject }
func NewGPUParticlesAttractorSphere3D(ctx Context, at *GPUParticlesAttractorSphere3D) GPUParticlesAttractorSphere3D { if at == nil { at = new(GPUParticlesAttractorSphere3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesAttractorSphere3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesAttractorSphere3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesAttractorSphere3D) class() string { return "GPUParticlesAttractorSphere3D\000" }

func (gdClass GPUParticlesAttractorSphere3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D{obj:gdClass.obj} }

var methodGPUParticlesAttractorSphere3D [2]cMethodBind
func (gdClass GPUParticlesAttractorSphere3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesAttractor3D().virtual(rtype, name)
}
func (gdClass GPUParticlesAttractorSphere3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractorSphere3D[0], &radius) }
func (gdClass GPUParticlesAttractorSphere3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesAttractorSphere3D[1]) }

type GPUParticlesAttractorVectorField3D struct{self *GPUParticlesAttractorVectorField3D; obj safeObject }
func NewGPUParticlesAttractorVectorField3D(ctx Context, at *GPUParticlesAttractorVectorField3D) GPUParticlesAttractorVectorField3D { if at == nil { at = new(GPUParticlesAttractorVectorField3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesAttractorVectorField3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesAttractorVectorField3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesAttractorVectorField3D) class() string { return "GPUParticlesAttractorVectorField3D\000" }

func (gdClass GPUParticlesAttractorVectorField3D) GPUParticlesAttractor3D() GPUParticlesAttractor3D { return GPUParticlesAttractor3D{obj:gdClass.obj} }

var methodGPUParticlesAttractorVectorField3D [4]cMethodBind
func (gdClass GPUParticlesAttractorVectorField3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesAttractor3D().virtual(rtype, name)
}
func (gdClass GPUParticlesAttractorVectorField3D) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractorVectorField3D[0], &extents) }
func (gdClass GPUParticlesAttractorVectorField3D) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGPUParticlesAttractorVectorField3D[1]) }
func (gdClass GPUParticlesAttractorVectorField3D) SetTexture(texture Texture3D)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesAttractorVectorField3D[2], &texture) }
func (gdClass GPUParticlesAttractorVectorField3D) GetTexture() Texture3D { return methodCall[Texture3D](gdClass.obj.get(), methodGPUParticlesAttractorVectorField3D[3]) }

type GPUParticlesCollision3D struct{self *GPUParticlesCollision3D; obj safeObject }
func NewGPUParticlesCollision3D(ctx Context, at *GPUParticlesCollision3D) GPUParticlesCollision3D { if at == nil { at = new(GPUParticlesCollision3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesCollision3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesCollision3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesCollision3D) class() string { return "GPUParticlesCollision3D\000" }

func (gdClass GPUParticlesCollision3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodGPUParticlesCollision3D [2]cMethodBind
func (gdClass GPUParticlesCollision3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass GPUParticlesCollision3D) SetCullMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollision3D[0], &mask) }
func (gdClass GPUParticlesCollision3D) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticlesCollision3D[1]) }

type GPUParticlesCollisionBox3D struct{self *GPUParticlesCollisionBox3D; obj safeObject }
func NewGPUParticlesCollisionBox3D(ctx Context, at *GPUParticlesCollisionBox3D) GPUParticlesCollisionBox3D { if at == nil { at = new(GPUParticlesCollisionBox3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesCollisionBox3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesCollisionBox3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesCollisionBox3D) class() string { return "GPUParticlesCollisionBox3D\000" }

func (gdClass GPUParticlesCollisionBox3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D{obj:gdClass.obj} }

var methodGPUParticlesCollisionBox3D [2]cMethodBind
func (gdClass GPUParticlesCollisionBox3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesCollision3D().virtual(rtype, name)
}
func (gdClass GPUParticlesCollisionBox3D) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionBox3D[0], &extents) }
func (gdClass GPUParticlesCollisionBox3D) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGPUParticlesCollisionBox3D[1]) }

type GPUParticlesCollisionHeightField3DResolution int64

const (
	GPUParticlesCollisionHeightField3DResolution256 GPUParticlesCollisionHeightField3DResolution = 0
	GPUParticlesCollisionHeightField3DResolution512 GPUParticlesCollisionHeightField3DResolution = 1
	GPUParticlesCollisionHeightField3DResolution1024 GPUParticlesCollisionHeightField3DResolution = 2
	GPUParticlesCollisionHeightField3DResolution2048 GPUParticlesCollisionHeightField3DResolution = 3
	GPUParticlesCollisionHeightField3DResolution4096 GPUParticlesCollisionHeightField3DResolution = 4
	GPUParticlesCollisionHeightField3DResolution8192 GPUParticlesCollisionHeightField3DResolution = 5
	GPUParticlesCollisionHeightField3DResolutionMax GPUParticlesCollisionHeightField3DResolution = 6
)

type GPUParticlesCollisionHeightField3DUpdateMode int64

const (
	GPUParticlesCollisionHeightField3DUpdateModeWhenMoved GPUParticlesCollisionHeightField3DUpdateMode = 0
	GPUParticlesCollisionHeightField3DUpdateModeAlways GPUParticlesCollisionHeightField3DUpdateMode = 1
)

type GPUParticlesCollisionHeightField3D struct{self *GPUParticlesCollisionHeightField3D; obj safeObject }
func NewGPUParticlesCollisionHeightField3D(ctx Context, at *GPUParticlesCollisionHeightField3D) GPUParticlesCollisionHeightField3D { if at == nil { at = new(GPUParticlesCollisionHeightField3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesCollisionHeightField3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesCollisionHeightField3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesCollisionHeightField3D) class() string { return "GPUParticlesCollisionHeightField3D\000" }

func (gdClass GPUParticlesCollisionHeightField3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D{obj:gdClass.obj} }

var methodGPUParticlesCollisionHeightField3D [8]cMethodBind
func (gdClass GPUParticlesCollisionHeightField3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesCollision3D().virtual(rtype, name)
}
func (gdClass GPUParticlesCollisionHeightField3D) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[0], &extents) }
func (gdClass GPUParticlesCollisionHeightField3D) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[1]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetResolution(resolution GPUParticlesCollisionHeightField3DResolution)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[2], &resolution) }
func (gdClass GPUParticlesCollisionHeightField3D) GetResolution() GPUParticlesCollisionHeightField3DResolution { return methodCall[GPUParticlesCollisionHeightField3DResolution](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[3]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetUpdateMode(update_mode GPUParticlesCollisionHeightField3DUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[4], &update_mode) }
func (gdClass GPUParticlesCollisionHeightField3D) GetUpdateMode() GPUParticlesCollisionHeightField3DUpdateMode { return methodCall[GPUParticlesCollisionHeightField3DUpdateMode](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[5]) }
func (gdClass GPUParticlesCollisionHeightField3D) SetFollowCameraEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[6], &enabled) }
func (gdClass GPUParticlesCollisionHeightField3D) IsFollowCameraEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticlesCollisionHeightField3D[7]) }

type GPUParticlesCollisionSDF3DResolution int64

const (
	GPUParticlesCollisionSDF3DResolution16 GPUParticlesCollisionSDF3DResolution = 0
	GPUParticlesCollisionSDF3DResolution32 GPUParticlesCollisionSDF3DResolution = 1
	GPUParticlesCollisionSDF3DResolution64 GPUParticlesCollisionSDF3DResolution = 2
	GPUParticlesCollisionSDF3DResolution128 GPUParticlesCollisionSDF3DResolution = 3
	GPUParticlesCollisionSDF3DResolution256 GPUParticlesCollisionSDF3DResolution = 4
	GPUParticlesCollisionSDF3DResolution512 GPUParticlesCollisionSDF3DResolution = 5
	GPUParticlesCollisionSDF3DResolutionMax GPUParticlesCollisionSDF3DResolution = 6
)

type GPUParticlesCollisionSDF3D struct{self *GPUParticlesCollisionSDF3D; obj safeObject }
func NewGPUParticlesCollisionSDF3D(ctx Context, at *GPUParticlesCollisionSDF3D) GPUParticlesCollisionSDF3D { if at == nil { at = new(GPUParticlesCollisionSDF3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesCollisionSDF3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesCollisionSDF3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesCollisionSDF3D) class() string { return "GPUParticlesCollisionSDF3D\000" }

func (gdClass GPUParticlesCollisionSDF3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D{obj:gdClass.obj} }

var methodGPUParticlesCollisionSDF3D [12]cMethodBind
func (gdClass GPUParticlesCollisionSDF3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesCollision3D().virtual(rtype, name)
}
func (gdClass GPUParticlesCollisionSDF3D) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[0], &extents) }
func (gdClass GPUParticlesCollisionSDF3D) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[1]) }
func (gdClass GPUParticlesCollisionSDF3D) SetResolution(resolution GPUParticlesCollisionSDF3DResolution)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[2], &resolution) }
func (gdClass GPUParticlesCollisionSDF3D) GetResolution() GPUParticlesCollisionSDF3DResolution { return methodCall[GPUParticlesCollisionSDF3DResolution](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[3]) }
func (gdClass GPUParticlesCollisionSDF3D) SetTexture(texture Texture3D)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[4], &texture) }
func (gdClass GPUParticlesCollisionSDF3D) GetTexture() Texture3D { return methodCall[Texture3D](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[5]) }
func (gdClass GPUParticlesCollisionSDF3D) SetThickness(thickness float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[6], &thickness) }
func (gdClass GPUParticlesCollisionSDF3D) GetThickness() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[7]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[8], &mask) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMask() int64 { return methodCall[int64](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[9]) }
func (gdClass GPUParticlesCollisionSDF3D) SetBakeMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[10], &layer_number, &value) }
func (gdClass GPUParticlesCollisionSDF3D) GetBakeMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodGPUParticlesCollisionSDF3D[11], &layer_number) }

type GPUParticlesCollisionSphere3D struct{self *GPUParticlesCollisionSphere3D; obj safeObject }
func NewGPUParticlesCollisionSphere3D(ctx Context, at *GPUParticlesCollisionSphere3D) GPUParticlesCollisionSphere3D { if at == nil { at = new(GPUParticlesCollisionSphere3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GPUParticlesCollisionSphere3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GPUParticlesCollisionSphere3D) owner() cObject { return gdClass.obj.get() }
func (GPUParticlesCollisionSphere3D) class() string { return "GPUParticlesCollisionSphere3D\000" }

func (gdClass GPUParticlesCollisionSphere3D) GPUParticlesCollision3D() GPUParticlesCollision3D { return GPUParticlesCollision3D{obj:gdClass.obj} }

var methodGPUParticlesCollisionSphere3D [2]cMethodBind
func (gdClass GPUParticlesCollisionSphere3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GPUParticlesCollision3D().virtual(rtype, name)
}
func (gdClass GPUParticlesCollisionSphere3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodGPUParticlesCollisionSphere3D[0], &radius) }
func (gdClass GPUParticlesCollisionSphere3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodGPUParticlesCollisionSphere3D[1]) }

type Generic6DOFJoint3DParam int64

const (
	Generic6DOFJoint3DParamLinearLowerLimit Generic6DOFJoint3DParam = 0
	Generic6DOFJoint3DParamLinearUpperLimit Generic6DOFJoint3DParam = 1
	Generic6DOFJoint3DParamLinearLimitSoftness Generic6DOFJoint3DParam = 2
	Generic6DOFJoint3DParamLinearRestitution Generic6DOFJoint3DParam = 3
	Generic6DOFJoint3DParamLinearDamping Generic6DOFJoint3DParam = 4
	Generic6DOFJoint3DParamLinearMotorTargetVelocity Generic6DOFJoint3DParam = 5
	Generic6DOFJoint3DParamLinearMotorForceLimit Generic6DOFJoint3DParam = 6
	Generic6DOFJoint3DParamLinearSpringStiffness Generic6DOFJoint3DParam = 7
	Generic6DOFJoint3DParamLinearSpringDamping Generic6DOFJoint3DParam = 8
	Generic6DOFJoint3DParamLinearSpringEquilibriumPoint Generic6DOFJoint3DParam = 9
	Generic6DOFJoint3DParamAngularLowerLimit Generic6DOFJoint3DParam = 10
	Generic6DOFJoint3DParamAngularUpperLimit Generic6DOFJoint3DParam = 11
	Generic6DOFJoint3DParamAngularLimitSoftness Generic6DOFJoint3DParam = 12
	Generic6DOFJoint3DParamAngularDamping Generic6DOFJoint3DParam = 13
	Generic6DOFJoint3DParamAngularRestitution Generic6DOFJoint3DParam = 14
	Generic6DOFJoint3DParamAngularForceLimit Generic6DOFJoint3DParam = 15
	Generic6DOFJoint3DParamAngularErp Generic6DOFJoint3DParam = 16
	Generic6DOFJoint3DParamAngularMotorTargetVelocity Generic6DOFJoint3DParam = 17
	Generic6DOFJoint3DParamAngularMotorForceLimit Generic6DOFJoint3DParam = 18
	Generic6DOFJoint3DParamAngularSpringStiffness Generic6DOFJoint3DParam = 19
	Generic6DOFJoint3DParamAngularSpringDamping Generic6DOFJoint3DParam = 20
	Generic6DOFJoint3DParamAngularSpringEquilibriumPoint Generic6DOFJoint3DParam = 21
	Generic6DOFJoint3DParamMax Generic6DOFJoint3DParam = 22
)

type Generic6DOFJoint3DFlag int64

const (
	Generic6DOFJoint3DFlagEnableLinearLimit Generic6DOFJoint3DFlag = 0
	Generic6DOFJoint3DFlagEnableAngularLimit Generic6DOFJoint3DFlag = 1
	Generic6DOFJoint3DFlagEnableLinearSpring Generic6DOFJoint3DFlag = 3
	Generic6DOFJoint3DFlagEnableAngularSpring Generic6DOFJoint3DFlag = 2
	Generic6DOFJoint3DFlagEnableMotor Generic6DOFJoint3DFlag = 4
	Generic6DOFJoint3DFlagEnableLinearMotor Generic6DOFJoint3DFlag = 5
	Generic6DOFJoint3DFlagMax Generic6DOFJoint3DFlag = 6
)

type Generic6DOFJoint3D struct{self *Generic6DOFJoint3D; obj safeObject }
func NewGeneric6DOFJoint3D(ctx Context, at *Generic6DOFJoint3D) Generic6DOFJoint3D { if at == nil { at = new(Generic6DOFJoint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Generic6DOFJoint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Generic6DOFJoint3D) owner() cObject { return gdClass.obj.get() }
func (Generic6DOFJoint3D) class() string { return "Generic6DOFJoint3D\000" }

func (gdClass Generic6DOFJoint3D) Joint3D() Joint3D { return Joint3D{obj:gdClass.obj} }

var methodGeneric6DOFJoint3D [12]cMethodBind
func (gdClass Generic6DOFJoint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint3D().virtual(rtype, name)
}
func (gdClass Generic6DOFJoint3D) SetParamX(param Generic6DOFJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[0], &param, &value) }
func (gdClass Generic6DOFJoint3D) GetParamX(param Generic6DOFJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodGeneric6DOFJoint3D[1], &param) }
func (gdClass Generic6DOFJoint3D) SetParamY(param Generic6DOFJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[2], &param, &value) }
func (gdClass Generic6DOFJoint3D) GetParamY(param Generic6DOFJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodGeneric6DOFJoint3D[3], &param) }
func (gdClass Generic6DOFJoint3D) SetParamZ(param Generic6DOFJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[4], &param, &value) }
func (gdClass Generic6DOFJoint3D) GetParamZ(param Generic6DOFJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodGeneric6DOFJoint3D[5], &param) }
func (gdClass Generic6DOFJoint3D) SetFlagX(flag Generic6DOFJoint3DFlag, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[6], &flag, &value) }
func (gdClass Generic6DOFJoint3D) GetFlagX(flag Generic6DOFJoint3DFlag) bool { return methodCall[bool](gdClass.obj.get(), methodGeneric6DOFJoint3D[7], &flag) }
func (gdClass Generic6DOFJoint3D) SetFlagY(flag Generic6DOFJoint3DFlag, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[8], &flag, &value) }
func (gdClass Generic6DOFJoint3D) GetFlagY(flag Generic6DOFJoint3DFlag) bool { return methodCall[bool](gdClass.obj.get(), methodGeneric6DOFJoint3D[9], &flag) }
func (gdClass Generic6DOFJoint3D) SetFlagZ(flag Generic6DOFJoint3DFlag, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGeneric6DOFJoint3D[10], &flag, &value) }
func (gdClass Generic6DOFJoint3D) GetFlagZ(flag Generic6DOFJoint3DFlag) bool { return methodCall[bool](gdClass.obj.get(), methodGeneric6DOFJoint3D[11], &flag) }

type Geometry2DPolyBooleanOperation int64

const (
	Geometry2DOperationUnion Geometry2DPolyBooleanOperation = 0
	Geometry2DOperationDifference Geometry2DPolyBooleanOperation = 1
	Geometry2DOperationIntersection Geometry2DPolyBooleanOperation = 2
	Geometry2DOperationXor Geometry2DPolyBooleanOperation = 3
)

type Geometry2DPolyJoinType int64

const (
	Geometry2DJoinSquare Geometry2DPolyJoinType = 0
	Geometry2DJoinRound Geometry2DPolyJoinType = 1
	Geometry2DJoinMiter Geometry2DPolyJoinType = 2
)

type Geometry2DPolyEndType int64

const (
	Geometry2DEndPolygon Geometry2DPolyEndType = 0
	Geometry2DEndJoined Geometry2DPolyEndType = 1
	Geometry2DEndButt Geometry2DPolyEndType = 2
	Geometry2DEndSquare Geometry2DPolyEndType = 3
	Geometry2DEndRound Geometry2DPolyEndType = 4
)
var Geometry2D Geometry2DSingleton

type Geometry2DSingleton struct{self *Geometry2DSingleton; obj safeObject }
func NewGeometry2DSingleton(ctx Context, at *Geometry2DSingleton) Geometry2DSingleton { if at == nil { at = new(Geometry2DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Geometry2DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Geometry2DSingleton) owner() cObject { return gdClass.obj.get() }
func (Geometry2DSingleton) class() string { return "Geometry2DSingleton\000" }

func (gdClass Geometry2DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodGeometry2DSingleton [22]cMethodBind
func (gdClass Geometry2DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass Geometry2DSingleton) IsPointInCircle(point Vector2, circle_position Vector2, circle_radius float64) bool { return methodCall[bool](gdClass.obj.get(), methodGeometry2DSingleton[0], &point, &circle_position, &circle_radius) }
func (gdClass Geometry2DSingleton) SegmentIntersectsCircle(segment_from Vector2, segment_to Vector2, circle_position Vector2, circle_radius float64) float64 { return methodCall[float64](gdClass.obj.get(), methodGeometry2DSingleton[1], &segment_from, &segment_to, &circle_position, &circle_radius) }
func (gdClass Geometry2DSingleton) SegmentIntersectsSegment(from_a Vector2, to_a Vector2, from_b Vector2, to_b Vector2) any { return methodCall[any](gdClass.obj.get(), methodGeometry2DSingleton[2], &from_a, &to_a, &from_b, &to_b) }
func (gdClass Geometry2DSingleton) LineIntersectsLine(from_a Vector2, dir_a Vector2, from_b Vector2, dir_b Vector2) any { return methodCall[any](gdClass.obj.get(), methodGeometry2DSingleton[3], &from_a, &dir_a, &from_b, &dir_b) }
func (gdClass Geometry2DSingleton) GetClosestPointsBetweenSegments(p1 Vector2, q1 Vector2, p2 Vector2, q2 Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodGeometry2DSingleton[4], &p1, &q1, &p2, &q2) }
func (gdClass Geometry2DSingleton) GetClosestPointToSegment(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGeometry2DSingleton[5], &point, &s1, &s2) }
func (gdClass Geometry2DSingleton) GetClosestPointToSegmentUncapped(point Vector2, s1 Vector2, s2 Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGeometry2DSingleton[6], &point, &s1, &s2) }
func (gdClass Geometry2DSingleton) PointIsInsideTriangle(point Vector2, a Vector2, b Vector2, c Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodGeometry2DSingleton[7], &point, &a, &b, &c) }
func (gdClass Geometry2DSingleton) IsPolygonClockwise(polygon []Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodGeometry2DSingleton[8], &polygon) }
func (gdClass Geometry2DSingleton) IsPointInPolygon(point Vector2, polygon []Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodGeometry2DSingleton[9], &point, &polygon) }
func (gdClass Geometry2DSingleton) TriangulatePolygon(polygon []Vector2) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGeometry2DSingleton[10], &polygon) }
func (gdClass Geometry2DSingleton) TriangulateDelaunay(points []Vector2) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodGeometry2DSingleton[11], &points) }
func (gdClass Geometry2DSingleton) ConvexHull(points []Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodGeometry2DSingleton[12], &points) }
func (gdClass Geometry2DSingleton) MergePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[13], &polygon_a, &polygon_b) }
func (gdClass Geometry2DSingleton) ClipPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[14], &polygon_a, &polygon_b) }
func (gdClass Geometry2DSingleton) IntersectPolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[15], &polygon_a, &polygon_b) }
func (gdClass Geometry2DSingleton) ExcludePolygons(polygon_a []Vector2, polygon_b []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[16], &polygon_a, &polygon_b) }
func (gdClass Geometry2DSingleton) ClipPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[17], &polyline, &polygon) }
func (gdClass Geometry2DSingleton) IntersectPolylineWithPolygon(polyline []Vector2, polygon []Vector2) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[18], &polyline, &polygon) }
func (gdClass Geometry2DSingleton) OffsetPolygon(polygon []Vector2, delta float64, join_type Geometry2DPolyJoinType) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[19], &polygon, &delta, &join_type) }
func (gdClass Geometry2DSingleton) OffsetPolyline(polyline []Vector2, delta float64, join_type Geometry2DPolyJoinType, end_type Geometry2DPolyEndType) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry2DSingleton[20], &polyline, &delta, &join_type, &end_type) }
func (gdClass Geometry2DSingleton) MakeAtlas(sizes []Vector2) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodGeometry2DSingleton[21], &sizes) }
var Geometry3D Geometry3DSingleton

type Geometry3DSingleton struct{self *Geometry3DSingleton; obj safeObject }
func NewGeometry3DSingleton(ctx Context, at *Geometry3DSingleton) Geometry3DSingleton { if at == nil { at = new(Geometry3DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Geometry3DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Geometry3DSingleton) owner() cObject { return gdClass.obj.get() }
func (Geometry3DSingleton) class() string { return "Geometry3DSingleton\000" }

func (gdClass Geometry3DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodGeometry3DSingleton [12]cMethodBind
func (gdClass Geometry3DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass Geometry3DSingleton) BuildBoxPlanes(extents Vector3) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry3DSingleton[0], &extents) }
func (gdClass Geometry3DSingleton) BuildCylinderPlanes(radius float64, height float64, sides int64, axis Vector3Axis) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry3DSingleton[1], &radius, &height, &sides, &axis) }
func (gdClass Geometry3DSingleton) BuildCapsulePlanes(radius float64, height float64, sides int64, lats int64, axis Vector3Axis) Array { return methodCall[Array](gdClass.obj.get(), methodGeometry3DSingleton[2], &radius, &height, &sides, &lats, &axis) }
func (gdClass Geometry3DSingleton) GetClosestPointsBetweenSegments(p1 Vector3, p2 Vector3, q1 Vector3, q2 Vector3) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodGeometry3DSingleton[3], &p1, &p2, &q1, &q2) }
func (gdClass Geometry3DSingleton) GetClosestPointToSegment(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGeometry3DSingleton[4], &point, &s1, &s2) }
func (gdClass Geometry3DSingleton) GetClosestPointToSegmentUncapped(point Vector3, s1 Vector3, s2 Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGeometry3DSingleton[5], &point, &s1, &s2) }
func (gdClass Geometry3DSingleton) RayIntersectsTriangle(from Vector3, dir Vector3, a Vector3, b Vector3, c Vector3) any { return methodCall[any](gdClass.obj.get(), methodGeometry3DSingleton[6], &from, &dir, &a, &b, &c) }
func (gdClass Geometry3DSingleton) SegmentIntersectsTriangle(from Vector3, to Vector3, a Vector3, b Vector3, c Vector3) any { return methodCall[any](gdClass.obj.get(), methodGeometry3DSingleton[7], &from, &to, &a, &b, &c) }
func (gdClass Geometry3DSingleton) SegmentIntersectsSphere(from Vector3, to Vector3, sphere_position Vector3, sphere_radius float64) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodGeometry3DSingleton[8], &from, &to, &sphere_position, &sphere_radius) }
func (gdClass Geometry3DSingleton) SegmentIntersectsCylinder(from Vector3, to Vector3, height float64, radius float64) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodGeometry3DSingleton[9], &from, &to, &height, &radius) }
func (gdClass Geometry3DSingleton) SegmentIntersectsConvex(from Vector3, to Vector3, planes Array) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodGeometry3DSingleton[10], &from, &to, &planes) }
func (gdClass Geometry3DSingleton) ClipPolygon(points []Vector3, plane Plane) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodGeometry3DSingleton[11], &points, &plane) }

type GeometryInstance3DShadowCastingSetting int64

const (
	GeometryInstance3DShadowCastingSettingOff GeometryInstance3DShadowCastingSetting = 0
	GeometryInstance3DShadowCastingSettingOn GeometryInstance3DShadowCastingSetting = 1
	GeometryInstance3DShadowCastingSettingDoubleSided GeometryInstance3DShadowCastingSetting = 2
	GeometryInstance3DShadowCastingSettingShadowsOnly GeometryInstance3DShadowCastingSetting = 3
)

type GeometryInstance3DGIMode int64

const (
	GeometryInstance3DGiModeDisabled GeometryInstance3DGIMode = 0
	GeometryInstance3DGiModeStatic GeometryInstance3DGIMode = 1
	GeometryInstance3DGiModeDynamic GeometryInstance3DGIMode = 2
)

type GeometryInstance3DLightmapScale int64

const (
	GeometryInstance3DLightmapScale1x GeometryInstance3DLightmapScale = 0
	GeometryInstance3DLightmapScale2x GeometryInstance3DLightmapScale = 1
	GeometryInstance3DLightmapScale4x GeometryInstance3DLightmapScale = 2
	GeometryInstance3DLightmapScale8x GeometryInstance3DLightmapScale = 3
	GeometryInstance3DLightmapScaleMax GeometryInstance3DLightmapScale = 4
)

type GeometryInstance3DVisibilityRangeFadeMode int64

const (
	GeometryInstance3DVisibilityRangeFadeDisabled GeometryInstance3DVisibilityRangeFadeMode = 0
	GeometryInstance3DVisibilityRangeFadeSelf GeometryInstance3DVisibilityRangeFadeMode = 1
	GeometryInstance3DVisibilityRangeFadeDependencies GeometryInstance3DVisibilityRangeFadeMode = 2
)

type GeometryInstance3D struct{self *GeometryInstance3D; obj safeObject }
func NewGeometryInstance3D(ctx Context, at *GeometryInstance3D) GeometryInstance3D { if at == nil { at = new(GeometryInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GeometryInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GeometryInstance3D) owner() cObject { return gdClass.obj.get() }
func (GeometryInstance3D) class() string { return "GeometryInstance3D\000" }

func (gdClass GeometryInstance3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodGeometryInstance3D [31]cMethodBind
func (gdClass GeometryInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass GeometryInstance3D) SetMaterialOverride(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[0], &material) }
func (gdClass GeometryInstance3D) GetMaterialOverride() Material { return methodCall[Material](gdClass.obj.get(), methodGeometryInstance3D[1]) }
func (gdClass GeometryInstance3D) SetMaterialOverlay(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[2], &material) }
func (gdClass GeometryInstance3D) GetMaterialOverlay() Material { return methodCall[Material](gdClass.obj.get(), methodGeometryInstance3D[3]) }
func (gdClass GeometryInstance3D) SetCastShadowsSetting(shadow_casting_setting GeometryInstance3DShadowCastingSetting)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[4], &shadow_casting_setting) }
func (gdClass GeometryInstance3D) GetCastShadowsSetting() GeometryInstance3DShadowCastingSetting { return methodCall[GeometryInstance3DShadowCastingSetting](gdClass.obj.get(), methodGeometryInstance3D[5]) }
func (gdClass GeometryInstance3D) SetLodBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[6], &bias) }
func (gdClass GeometryInstance3D) GetLodBias() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[7]) }
func (gdClass GeometryInstance3D) SetTransparency(transparency float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[8], &transparency) }
func (gdClass GeometryInstance3D) GetTransparency() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[9]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEndMargin(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[10], &distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEndMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[11]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeEnd(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[12], &distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeEnd() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[13]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBeginMargin(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[14], &distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBeginMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[15]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeBegin(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[16], &distance) }
func (gdClass GeometryInstance3D) GetVisibilityRangeBegin() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[17]) }
func (gdClass GeometryInstance3D) SetVisibilityRangeFadeMode(mode GeometryInstance3DVisibilityRangeFadeMode)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[18], &mode) }
func (gdClass GeometryInstance3D) GetVisibilityRangeFadeMode() GeometryInstance3DVisibilityRangeFadeMode { return methodCall[GeometryInstance3DVisibilityRangeFadeMode](gdClass.obj.get(), methodGeometryInstance3D[19]) }
func (gdClass GeometryInstance3D) SetInstanceShaderUniform(uniform Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[20], &uniform, &value) }
func (gdClass GeometryInstance3D) GetInstanceShaderUniform(uniform Name) any { return methodCall[any](gdClass.obj.get(), methodGeometryInstance3D[21], &uniform) }
func (gdClass GeometryInstance3D) SetExtraCullMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[22], &margin) }
func (gdClass GeometryInstance3D) GetExtraCullMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodGeometryInstance3D[23]) }
func (gdClass GeometryInstance3D) SetLightmapScale(scale GeometryInstance3DLightmapScale)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[24], &scale) }
func (gdClass GeometryInstance3D) GetLightmapScale() GeometryInstance3DLightmapScale { return methodCall[GeometryInstance3DLightmapScale](gdClass.obj.get(), methodGeometryInstance3D[25]) }
func (gdClass GeometryInstance3D) SetGiMode(mode GeometryInstance3DGIMode)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[26], &mode) }
func (gdClass GeometryInstance3D) GetGiMode() GeometryInstance3DGIMode { return methodCall[GeometryInstance3DGIMode](gdClass.obj.get(), methodGeometryInstance3D[27]) }
func (gdClass GeometryInstance3D) SetIgnoreOcclusionCulling(ignore_culling bool)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[28], &ignore_culling) }
func (gdClass GeometryInstance3D) IsIgnoringOcclusionCulling() bool { return methodCall[bool](gdClass.obj.get(), methodGeometryInstance3D[29]) }
func (gdClass GeometryInstance3D) SetCustomAabb(aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodGeometryInstance3D[30], &aabb) }

type GodotPhysicsServer2D struct{self *GodotPhysicsServer2D; obj safeObject }
func NewGodotPhysicsServer2D(ctx Context, at *GodotPhysicsServer2D) GodotPhysicsServer2D { if at == nil { at = new(GodotPhysicsServer2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GodotPhysicsServer2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GodotPhysicsServer2D) owner() cObject { return gdClass.obj.get() }
func (GodotPhysicsServer2D) class() string { return "GodotPhysicsServer2D\000" }

func (gdClass GodotPhysicsServer2D) PhysicsServer2DSingleton() PhysicsServer2DSingleton { return PhysicsServer2DSingleton{obj:gdClass.obj} }

func (gdClass GodotPhysicsServer2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsServer2DSingleton().virtual(rtype, name)
}

type GodotPhysicsServer3D struct{self *GodotPhysicsServer3D; obj safeObject }
func NewGodotPhysicsServer3D(ctx Context, at *GodotPhysicsServer3D) GodotPhysicsServer3D { if at == nil { at = new(GodotPhysicsServer3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GodotPhysicsServer3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GodotPhysicsServer3D) owner() cObject { return gdClass.obj.get() }
func (GodotPhysicsServer3D) class() string { return "GodotPhysicsServer3D\000" }

func (gdClass GodotPhysicsServer3D) PhysicsServer3DSingleton() PhysicsServer3DSingleton { return PhysicsServer3DSingleton{obj:gdClass.obj} }

func (gdClass GodotPhysicsServer3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsServer3DSingleton().virtual(rtype, name)
}

type GradientInterpolationMode int64

const (
	GradientGradientInterpolateLinear GradientInterpolationMode = 0
	GradientGradientInterpolateConstant GradientInterpolationMode = 1
	GradientGradientInterpolateCubic GradientInterpolationMode = 2
)

type Gradient struct{self *Gradient; obj safeObject }
func NewGradient(ctx Context, at *Gradient) Gradient { if at == nil { at = new(Gradient) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Gradient) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Gradient) owner() cObject { return gdClass.obj.get() }
func (Gradient) class() string { return "Gradient\000" }

func (gdClass Gradient) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodGradient [15]cMethodBind
func (gdClass Gradient) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Gradient) AddPoint(offset float64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[0], &offset, &color) }
func (gdClass Gradient) RemovePoint(point int64)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[1], &point) }
func (gdClass Gradient) SetOffset(point int64, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[2], &point, &offset) }
func (gdClass Gradient) GetOffset(point int64) float64 { return methodCall[float64](gdClass.obj.get(), methodGradient[3], &point) }
func (gdClass Gradient) Reverse()  { methodCall[struct{}](gdClass.obj.get(), methodGradient[4]) }
func (gdClass Gradient) SetColor(point int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[5], &point, &color) }
func (gdClass Gradient) GetColor(point int64) Color { return methodCall[Color](gdClass.obj.get(), methodGradient[6], &point) }
func (gdClass Gradient) Interpolate(offset float64) Color { return methodCall[Color](gdClass.obj.get(), methodGradient[7], &offset) }
func (gdClass Gradient) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGradient[8]) }
func (gdClass Gradient) SetOffsets(offsets []float32)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[9], &offsets) }
func (gdClass Gradient) GetOffsets() []float32 { return methodCall[[]float32](gdClass.obj.get(), methodGradient[10]) }
func (gdClass Gradient) SetColors(colors []Color)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[11], &colors) }
func (gdClass Gradient) GetColors() []Color { return methodCall[[]Color](gdClass.obj.get(), methodGradient[12]) }
func (gdClass Gradient) SetInterpolationMode(interpolation_mode GradientInterpolationMode)  { methodCall[struct{}](gdClass.obj.get(), methodGradient[13], &interpolation_mode) }
func (gdClass Gradient) GetInterpolationMode() GradientInterpolationMode { return methodCall[GradientInterpolationMode](gdClass.obj.get(), methodGradient[14]) }

type GradientTexture1D struct{self *GradientTexture1D; obj safeObject }
func NewGradientTexture1D(ctx Context, at *GradientTexture1D) GradientTexture1D { if at == nil { at = new(GradientTexture1D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GradientTexture1D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GradientTexture1D) owner() cObject { return gdClass.obj.get() }
func (GradientTexture1D) class() string { return "GradientTexture1D\000" }

func (gdClass GradientTexture1D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodGradientTexture1D [5]cMethodBind
func (gdClass GradientTexture1D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass GradientTexture1D) SetGradient(gradient Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture1D[0], &gradient) }
func (gdClass GradientTexture1D) GetGradient() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodGradientTexture1D[1]) }
func (gdClass GradientTexture1D) SetWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture1D[2], &width) }
func (gdClass GradientTexture1D) SetUseHdr(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture1D[3], &enabled) }
func (gdClass GradientTexture1D) IsUsingHdr() bool { return methodCall[bool](gdClass.obj.get(), methodGradientTexture1D[4]) }

type GradientTexture2DFill int64

const (
	GradientTexture2DFillLinear GradientTexture2DFill = 0
	GradientTexture2DFillRadial GradientTexture2DFill = 1
)

type GradientTexture2DRepeat int64

const (
	GradientTexture2DRepeatNone GradientTexture2DRepeat = 0
	GradientTexture2DRepeatDefault GradientTexture2DRepeat = 1
	GradientTexture2DRepeatMirror GradientTexture2DRepeat = 2
)

type GradientTexture2D struct{self *GradientTexture2D; obj safeObject }
func NewGradientTexture2D(ctx Context, at *GradientTexture2D) GradientTexture2D { if at == nil { at = new(GradientTexture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass GradientTexture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GradientTexture2D) owner() cObject { return gdClass.obj.get() }
func (GradientTexture2D) class() string { return "GradientTexture2D\000" }

func (gdClass GradientTexture2D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodGradientTexture2D [14]cMethodBind
func (gdClass GradientTexture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass GradientTexture2D) SetGradient(gradient Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[0], &gradient) }
func (gdClass GradientTexture2D) GetGradient() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodGradientTexture2D[1]) }
func (gdClass GradientTexture2D) SetWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[2], &width) }
func (gdClass GradientTexture2D) SetHeight(height int64)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[3], &height) }
func (gdClass GradientTexture2D) SetUseHdr(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[4], &enabled) }
func (gdClass GradientTexture2D) IsUsingHdr() bool { return methodCall[bool](gdClass.obj.get(), methodGradientTexture2D[5]) }
func (gdClass GradientTexture2D) SetFill(fill GradientTexture2DFill)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[6], &fill) }
func (gdClass GradientTexture2D) GetFill() GradientTexture2DFill { return methodCall[GradientTexture2DFill](gdClass.obj.get(), methodGradientTexture2D[7]) }
func (gdClass GradientTexture2D) SetFillFrom(fill_from Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[8], &fill_from) }
func (gdClass GradientTexture2D) GetFillFrom() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGradientTexture2D[9]) }
func (gdClass GradientTexture2D) SetFillTo(fill_to Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[10], &fill_to) }
func (gdClass GradientTexture2D) GetFillTo() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGradientTexture2D[11]) }
func (gdClass GradientTexture2D) SetRepeat(repeat GradientTexture2DRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodGradientTexture2D[12], &repeat) }
func (gdClass GradientTexture2D) GetRepeat() GradientTexture2DRepeat { return methodCall[GradientTexture2DRepeat](gdClass.obj.get(), methodGradientTexture2D[13]) }

type GraphEditPanningScheme int64

const (
	GraphEditScrollZooms GraphEditPanningScheme = 0
	GraphEditScrollPans GraphEditPanningScheme = 1
)

type GraphEdit struct{self *GraphEdit; obj safeObject }
func NewGraphEdit(ctx Context, at *GraphEdit) GraphEdit { if at == nil { at = new(GraphEdit) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GraphEdit) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GraphEdit) owner() cObject { return gdClass.obj.get() }
func (GraphEdit) class() string { return "GraphEdit\000" }

func (gdClass GraphEdit) Control() Control { return Control{obj:gdClass.obj} }

var methodGraphEdit [52]cMethodBind
func (gdClass GraphEdit) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_is_in_input_hotzone":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsInInputHotzone(graph_node Object, slot_index int64, mouse_position Vector2) bool }{}).Elem()) {
			return rtype.MethodByName(`IsInInputHotzone`)
		}
		return
	case "_is_in_output_hotzone":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsInOutputHotzone(graph_node Object, slot_index int64, mouse_position Vector2) bool }{}).Elem()) {
			return rtype.MethodByName(`IsInOutputHotzone`)
		}
		return
	case "_get_connection_line":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConnectionLine(from Vector2, to Vector2) []Vector2 }{}).Elem()) {
			return rtype.MethodByName(`GetConnectionLine`)
		}
		return
	case "_is_node_hover_valid":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsNodeHoverValid(from Name, from_slot int64, to Name, to_slot int64) bool }{}).Elem()) {
			return rtype.MethodByName(`IsNodeHoverValid`)
		}
		return
	}
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass GraphEdit) ConnectNode(from Name, from_port int64, to Name, to_port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphEdit[0], &from, &from_port, &to, &to_port) }
func (gdClass GraphEdit) IsNodeConnected(from Name, from_port int64, to Name, to_port int64) bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[1], &from, &from_port, &to, &to_port) }
func (gdClass GraphEdit) DisconnectNode(from Name, from_port int64, to Name, to_port int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[2], &from, &from_port, &to, &to_port) }
func (gdClass GraphEdit) SetConnectionActivity(from Name, from_port int64, to Name, to_port int64, amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[3], &from, &from_port, &to, &to_port, &amount) }
func (gdClass GraphEdit) GetConnectionList() Array { return methodCall[Array](gdClass.obj.get(), methodGraphEdit[4]) }
func (gdClass GraphEdit) ClearConnections()  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[5]) }
func (gdClass GraphEdit) ForceConnectionDragEnd()  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[6]) }
func (gdClass GraphEdit) GetScrollOfs() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGraphEdit[7]) }
func (gdClass GraphEdit) SetScrollOfs(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[8], &offset) }
func (gdClass GraphEdit) AddValidRightDisconnectType(atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[9], &atype) }
func (gdClass GraphEdit) RemoveValidRightDisconnectType(atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[10], &atype) }
func (gdClass GraphEdit) AddValidLeftDisconnectType(atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[11], &atype) }
func (gdClass GraphEdit) RemoveValidLeftDisconnectType(atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[12], &atype) }
func (gdClass GraphEdit) AddValidConnectionType(from_type int64, to_type int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[13], &from_type, &to_type) }
func (gdClass GraphEdit) RemoveValidConnectionType(from_type int64, to_type int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[14], &from_type, &to_type) }
func (gdClass GraphEdit) IsValidConnectionType(from_type int64, to_type int64) bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[15], &from_type, &to_type) }
func (gdClass GraphEdit) GetConnectionLine(from Vector2, to Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodGraphEdit[16], &from, &to) }
func (gdClass GraphEdit) SetPanningScheme(scheme GraphEditPanningScheme)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[17], &scheme) }
func (gdClass GraphEdit) GetPanningScheme() GraphEditPanningScheme { return methodCall[GraphEditPanningScheme](gdClass.obj.get(), methodGraphEdit[18]) }
func (gdClass GraphEdit) SetZoom(zoom float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[19], &zoom) }
func (gdClass GraphEdit) GetZoom() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[20]) }
func (gdClass GraphEdit) SetZoomMin(zoom_min float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[21], &zoom_min) }
func (gdClass GraphEdit) GetZoomMin() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[22]) }
func (gdClass GraphEdit) SetZoomMax(zoom_max float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[23], &zoom_max) }
func (gdClass GraphEdit) GetZoomMax() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[24]) }
func (gdClass GraphEdit) SetZoomStep(zoom_step float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[25], &zoom_step) }
func (gdClass GraphEdit) GetZoomStep() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[26]) }
func (gdClass GraphEdit) SetShowZoomLabel(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[27], &enable) }
func (gdClass GraphEdit) IsShowingZoomLabel() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[28]) }
func (gdClass GraphEdit) SetSnap(pixels int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[29], &pixels) }
func (gdClass GraphEdit) GetSnap() int64 { return methodCall[int64](gdClass.obj.get(), methodGraphEdit[30]) }
func (gdClass GraphEdit) SetUseSnap(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[31], &enable) }
func (gdClass GraphEdit) IsUsingSnap() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[32]) }
func (gdClass GraphEdit) SetConnectionLinesCurvature(curvature float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[33], &curvature) }
func (gdClass GraphEdit) GetConnectionLinesCurvature() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[34]) }
func (gdClass GraphEdit) SetConnectionLinesThickness(pixels float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[35], &pixels) }
func (gdClass GraphEdit) GetConnectionLinesThickness() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[36]) }
func (gdClass GraphEdit) SetConnectionLinesAntialiased(pixels bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[37], &pixels) }
func (gdClass GraphEdit) IsConnectionLinesAntialiased() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[38]) }
func (gdClass GraphEdit) SetMinimapSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[39], &size) }
func (gdClass GraphEdit) GetMinimapSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGraphEdit[40]) }
func (gdClass GraphEdit) SetMinimapOpacity(opacity float64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[41], &opacity) }
func (gdClass GraphEdit) GetMinimapOpacity() float64 { return methodCall[float64](gdClass.obj.get(), methodGraphEdit[42]) }
func (gdClass GraphEdit) SetMinimapEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[43], &enable) }
func (gdClass GraphEdit) IsMinimapEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[44]) }
func (gdClass GraphEdit) SetArrangeNodesButtonHidden(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[45], &enable) }
func (gdClass GraphEdit) IsArrangeNodesButtonHidden() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[46]) }
func (gdClass GraphEdit) SetRightDisconnects(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[47], &enable) }
func (gdClass GraphEdit) IsRightDisconnectsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodGraphEdit[48]) }
func (gdClass GraphEdit) GetZoomHbox() HBoxContainer { return methodCall[HBoxContainer](gdClass.obj.get(), methodGraphEdit[49]) }
func (gdClass GraphEdit) ArrangeNodes()  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[50]) }
func (gdClass GraphEdit) SetSelected(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodGraphEdit[51], &node) }

type GraphNodeOverlay int64

const (
	GraphNodeOverlayDisabled GraphNodeOverlay = 0
	GraphNodeOverlayBreakpoint GraphNodeOverlay = 1
	GraphNodeOverlayPosition GraphNodeOverlay = 2
)

type GraphNode struct{self *GraphNode; obj safeObject }
func NewGraphNode(ctx Context, at *GraphNode) GraphNode { if at == nil { at = new(GraphNode) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GraphNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GraphNode) owner() cObject { return gdClass.obj.get() }
func (GraphNode) class() string { return "GraphNode\000" }

func (gdClass GraphNode) Container() Container { return Container{obj:gdClass.obj} }

var methodGraphNode [49]cMethodBind
func (gdClass GraphNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass GraphNode) SetTitle(title string)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[0], &title) }
func (gdClass GraphNode) GetTitle() string { return methodCall[string](gdClass.obj.get(), methodGraphNode[1]) }
func (gdClass GraphNode) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[2], &direction) }
func (gdClass GraphNode) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodGraphNode[3]) }
func (gdClass GraphNode) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[4], &language) }
func (gdClass GraphNode) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodGraphNode[5]) }
func (gdClass GraphNode) SetSlot(idx int64, enable_left bool, type_left int64, color_left Color, enable_right bool, type_right int64, color_right Color, custom_left Texture2D, custom_right Texture2D, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[6], &idx, &enable_left, &type_left, &color_left, &enable_right, &type_right, &color_right, &custom_left, &custom_right, &enable) }
func (gdClass GraphNode) ClearSlot(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[7], &idx) }
func (gdClass GraphNode) ClearAllSlots()  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[8]) }
func (gdClass GraphNode) IsSlotEnabledLeft(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[9], &idx) }
func (gdClass GraphNode) SetSlotEnabledLeft(idx int64, enable_left bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[10], &idx, &enable_left) }
func (gdClass GraphNode) SetSlotTypeLeft(idx int64, type_left int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[11], &idx, &type_left) }
func (gdClass GraphNode) GetSlotTypeLeft(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[12], &idx) }
func (gdClass GraphNode) SetSlotColorLeft(idx int64, color_left Color)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[13], &idx, &color_left) }
func (gdClass GraphNode) GetSlotColorLeft(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodGraphNode[14], &idx) }
func (gdClass GraphNode) IsSlotEnabledRight(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[15], &idx) }
func (gdClass GraphNode) SetSlotEnabledRight(idx int64, enable_right bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[16], &idx, &enable_right) }
func (gdClass GraphNode) SetSlotTypeRight(idx int64, type_right int64)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[17], &idx, &type_right) }
func (gdClass GraphNode) GetSlotTypeRight(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[18], &idx) }
func (gdClass GraphNode) SetSlotColorRight(idx int64, color_right Color)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[19], &idx, &color_right) }
func (gdClass GraphNode) GetSlotColorRight(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodGraphNode[20], &idx) }
func (gdClass GraphNode) IsSlotDrawStylebox(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[21], &idx) }
func (gdClass GraphNode) SetSlotDrawStylebox(idx int64, draw_stylebox bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[22], &idx, &draw_stylebox) }
func (gdClass GraphNode) SetPositionOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[23], &offset) }
func (gdClass GraphNode) GetPositionOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGraphNode[24]) }
func (gdClass GraphNode) SetComment(comment bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[25], &comment) }
func (gdClass GraphNode) IsComment() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[26]) }
func (gdClass GraphNode) SetResizable(resizable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[27], &resizable) }
func (gdClass GraphNode) IsResizable() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[28]) }
func (gdClass GraphNode) SetDraggable(draggable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[29], &draggable) }
func (gdClass GraphNode) IsDraggable() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[30]) }
func (gdClass GraphNode) SetSelectable(selectable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[31], &selectable) }
func (gdClass GraphNode) IsSelectable() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[32]) }
func (gdClass GraphNode) SetSelected(selected bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[33], &selected) }
func (gdClass GraphNode) IsSelected() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[34]) }
func (gdClass GraphNode) GetConnectionInputCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[35]) }
func (gdClass GraphNode) GetConnectionInputHeight(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[36], &idx) }
func (gdClass GraphNode) GetConnectionInputPosition(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGraphNode[37], &idx) }
func (gdClass GraphNode) GetConnectionInputType(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[38], &idx) }
func (gdClass GraphNode) GetConnectionInputColor(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodGraphNode[39], &idx) }
func (gdClass GraphNode) GetConnectionOutputCount() int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[40]) }
func (gdClass GraphNode) GetConnectionOutputHeight(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[41], &idx) }
func (gdClass GraphNode) GetConnectionOutputPosition(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodGraphNode[42], &idx) }
func (gdClass GraphNode) GetConnectionOutputType(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodGraphNode[43], &idx) }
func (gdClass GraphNode) GetConnectionOutputColor(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodGraphNode[44], &idx) }
func (gdClass GraphNode) SetShowCloseButton(show bool)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[45], &show) }
func (gdClass GraphNode) IsCloseButtonVisible() bool { return methodCall[bool](gdClass.obj.get(), methodGraphNode[46]) }
func (gdClass GraphNode) SetOverlay(overlay GraphNodeOverlay)  { methodCall[struct{}](gdClass.obj.get(), methodGraphNode[47], &overlay) }
func (gdClass GraphNode) GetOverlay() GraphNodeOverlay { return methodCall[GraphNodeOverlay](gdClass.obj.get(), methodGraphNode[48]) }

type GridContainer struct{self *GridContainer; obj safeObject }
func NewGridContainer(ctx Context, at *GridContainer) GridContainer { if at == nil { at = new(GridContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GridContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GridContainer) owner() cObject { return gdClass.obj.get() }
func (GridContainer) class() string { return "GridContainer\000" }

func (gdClass GridContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodGridContainer [2]cMethodBind
func (gdClass GridContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass GridContainer) SetColumns(columns int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridContainer[0], &columns) }
func (gdClass GridContainer) GetColumns() int64 { return methodCall[int64](gdClass.obj.get(), methodGridContainer[1]) }

type GridMap struct{self *GridMap; obj safeObject }
func NewGridMap(ctx Context, at *GridMap) GridMap { if at == nil { at = new(GridMap) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GridMap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GridMap) owner() cObject { return gdClass.obj.get() }
func (GridMap) class() string { return "GridMap\000" }

func (gdClass GridMap) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodGridMap [47]cMethodBind
func (gdClass GridMap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass GridMap) SetCollisionLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[0], &layer) }
func (gdClass GridMap) GetCollisionLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[1]) }
func (gdClass GridMap) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[2], &mask) }
func (gdClass GridMap) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[3]) }
func (gdClass GridMap) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[4], &layer_number, &value) }
func (gdClass GridMap) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[5], &layer_number) }
func (gdClass GridMap) SetCollisionLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[6], &layer_number, &value) }
func (gdClass GridMap) GetCollisionLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[7], &layer_number) }
func (gdClass GridMap) SetPhysicsMaterial(material PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[8], &material) }
func (gdClass GridMap) GetPhysicsMaterial() PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodGridMap[9]) }
func (gdClass GridMap) SetBakeNavigation(bake_navigation bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[10], &bake_navigation) }
func (gdClass GridMap) IsBakingNavigation() bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[11]) }
func (gdClass GridMap) SetNavigationLayers(layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[12], &layers) }
func (gdClass GridMap) GetNavigationLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[13]) }
func (gdClass GridMap) SetNavigationLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[14], &layer_number, &value) }
func (gdClass GridMap) GetNavigationLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[15], &layer_number) }
func (gdClass GridMap) SetMeshLibrary(mesh_library MeshLibrary)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[16], &mesh_library) }
func (gdClass GridMap) GetMeshLibrary() MeshLibrary { return methodCall[MeshLibrary](gdClass.obj.get(), methodGridMap[17]) }
func (gdClass GridMap) SetCellSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[18], &size) }
func (gdClass GridMap) GetCellSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGridMap[19]) }
func (gdClass GridMap) SetCellScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[20], &scale) }
func (gdClass GridMap) GetCellScale() float64 { return methodCall[float64](gdClass.obj.get(), methodGridMap[21]) }
func (gdClass GridMap) SetOctantSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[22], &size) }
func (gdClass GridMap) GetOctantSize() int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[23]) }
func (gdClass GridMap) SetCellItem(position Vector3i, item int64, orientation int64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[24], &position, &item, &orientation) }
func (gdClass GridMap) GetCellItem(position Vector3i) int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[25], &position) }
func (gdClass GridMap) GetCellItemOrientation(position Vector3i) int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[26], &position) }
func (gdClass GridMap) GetCellItemBasis(position Vector3i) Basis { return methodCall[Basis](gdClass.obj.get(), methodGridMap[27], &position) }
func (gdClass GridMap) GetBasisWithOrthogonalIndex(index int64) Basis { return methodCall[Basis](gdClass.obj.get(), methodGridMap[28], &index) }
func (gdClass GridMap) GetOrthogonalIndexFromBasis(basis Basis) int64 { return methodCall[int64](gdClass.obj.get(), methodGridMap[29], &basis) }
func (gdClass GridMap) WorldToMap(world_position Vector3) Vector3i { return methodCall[Vector3i](gdClass.obj.get(), methodGridMap[30], &world_position) }
func (gdClass GridMap) MapToWorld(map_position Vector3i) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodGridMap[31], &map_position) }
func (gdClass GridMap) ResourceChanged(resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[32], &resource) }
func (gdClass GridMap) SetCenterX(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[33], &enable) }
func (gdClass GridMap) GetCenterX() bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[34]) }
func (gdClass GridMap) SetCenterY(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[35], &enable) }
func (gdClass GridMap) GetCenterY() bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[36]) }
func (gdClass GridMap) SetCenterZ(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[37], &enable) }
func (gdClass GridMap) GetCenterZ() bool { return methodCall[bool](gdClass.obj.get(), methodGridMap[38]) }
func (gdClass GridMap) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[39]) }
func (gdClass GridMap) GetUsedCells() Array { return methodCall[Array](gdClass.obj.get(), methodGridMap[40]) }
func (gdClass GridMap) GetUsedCellsByItem(item int64) Array { return methodCall[Array](gdClass.obj.get(), methodGridMap[41], &item) }
func (gdClass GridMap) GetMeshes() Array { return methodCall[Array](gdClass.obj.get(), methodGridMap[42]) }
func (gdClass GridMap) GetBakeMeshes() Array { return methodCall[Array](gdClass.obj.get(), methodGridMap[43]) }
func (gdClass GridMap) GetBakeMeshInstance(idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodGridMap[44], &idx) }
func (gdClass GridMap) ClearBakedMeshes()  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[45]) }
func (gdClass GridMap) MakeBakedMeshes(gen_lightmap_uv bool, lightmap_uv_texel_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodGridMap[46], &gen_lightmap_uv, &lightmap_uv_texel_size) }

type GrooveJoint2D struct{self *GrooveJoint2D; obj safeObject }
func NewGrooveJoint2D(ctx Context, at *GrooveJoint2D) GrooveJoint2D { if at == nil { at = new(GrooveJoint2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass GrooveJoint2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass GrooveJoint2D) owner() cObject { return gdClass.obj.get() }
func (GrooveJoint2D) class() string { return "GrooveJoint2D\000" }

func (gdClass GrooveJoint2D) Joint2D() Joint2D { return Joint2D{obj:gdClass.obj} }

var methodGrooveJoint2D [4]cMethodBind
func (gdClass GrooveJoint2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint2D().virtual(rtype, name)
}
func (gdClass GrooveJoint2D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodGrooveJoint2D[0], &length) }
func (gdClass GrooveJoint2D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodGrooveJoint2D[1]) }
func (gdClass GrooveJoint2D) SetInitialOffset(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodGrooveJoint2D[2], &offset) }
func (gdClass GrooveJoint2D) GetInitialOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodGrooveJoint2D[3]) }

type HBoxContainer struct{self *HBoxContainer; obj safeObject }
func NewHBoxContainer(ctx Context, at *HBoxContainer) HBoxContainer { if at == nil { at = new(HBoxContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HBoxContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HBoxContainer) owner() cObject { return gdClass.obj.get() }
func (HBoxContainer) class() string { return "HBoxContainer\000" }

func (gdClass HBoxContainer) BoxContainer() BoxContainer { return BoxContainer{obj:gdClass.obj} }

func (gdClass HBoxContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BoxContainer().virtual(rtype, name)
}

type HFlowContainer struct{self *HFlowContainer; obj safeObject }
func NewHFlowContainer(ctx Context, at *HFlowContainer) HFlowContainer { if at == nil { at = new(HFlowContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HFlowContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HFlowContainer) owner() cObject { return gdClass.obj.get() }
func (HFlowContainer) class() string { return "HFlowContainer\000" }

func (gdClass HFlowContainer) FlowContainer() FlowContainer { return FlowContainer{obj:gdClass.obj} }

func (gdClass HFlowContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.FlowContainer().virtual(rtype, name)
}

type HMACContext struct{self *HMACContext; obj safeObject }
func NewHMACContext(ctx Context, at *HMACContext) HMACContext { if at == nil { at = new(HMACContext) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass HMACContext) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HMACContext) owner() cObject { return gdClass.obj.get() }
func (HMACContext) class() string { return "HMACContext\000" }

func (gdClass HMACContext) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodHMACContext [3]cMethodBind
func (gdClass HMACContext) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass HMACContext) Start(hash_type HashingContextHashType, key []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodHMACContext[0], &hash_type, &key) }
func (gdClass HMACContext) Update(data []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodHMACContext[1], &data) }
func (gdClass HMACContext) Finish() []byte { return methodCall[[]byte](gdClass.obj.get(), methodHMACContext[2]) }

type HScrollBar struct{self *HScrollBar; obj safeObject }
func NewHScrollBar(ctx Context, at *HScrollBar) HScrollBar { if at == nil { at = new(HScrollBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HScrollBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HScrollBar) owner() cObject { return gdClass.obj.get() }
func (HScrollBar) class() string { return "HScrollBar\000" }

func (gdClass HScrollBar) ScrollBar() ScrollBar { return ScrollBar{obj:gdClass.obj} }

func (gdClass HScrollBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ScrollBar().virtual(rtype, name)
}

type HSeparator struct{self *HSeparator; obj safeObject }
func NewHSeparator(ctx Context, at *HSeparator) HSeparator { if at == nil { at = new(HSeparator) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HSeparator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HSeparator) owner() cObject { return gdClass.obj.get() }
func (HSeparator) class() string { return "HSeparator\000" }

func (gdClass HSeparator) Separator() Separator { return Separator{obj:gdClass.obj} }

func (gdClass HSeparator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Separator().virtual(rtype, name)
}

type HSlider struct{self *HSlider; obj safeObject }
func NewHSlider(ctx Context, at *HSlider) HSlider { if at == nil { at = new(HSlider) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HSlider) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HSlider) owner() cObject { return gdClass.obj.get() }
func (HSlider) class() string { return "HSlider\000" }

func (gdClass HSlider) Slider() Slider { return Slider{obj:gdClass.obj} }

func (gdClass HSlider) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Slider().virtual(rtype, name)
}

type HSplitContainer struct{self *HSplitContainer; obj safeObject }
func NewHSplitContainer(ctx Context, at *HSplitContainer) HSplitContainer { if at == nil { at = new(HSplitContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HSplitContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HSplitContainer) owner() cObject { return gdClass.obj.get() }
func (HSplitContainer) class() string { return "HSplitContainer\000" }

func (gdClass HSplitContainer) SplitContainer() SplitContainer { return SplitContainer{obj:gdClass.obj} }

func (gdClass HSplitContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SplitContainer().virtual(rtype, name)
}

type HTTPClientMethod int64

const (
	HTTPClientMethodGet HTTPClientMethod = 0
	HTTPClientMethodHead HTTPClientMethod = 1
	HTTPClientMethodPost HTTPClientMethod = 2
	HTTPClientMethodPut HTTPClientMethod = 3
	HTTPClientMethodDelete HTTPClientMethod = 4
	HTTPClientMethodOptions HTTPClientMethod = 5
	HTTPClientMethodTrace HTTPClientMethod = 6
	HTTPClientMethodConnect HTTPClientMethod = 7
	HTTPClientMethodPatch HTTPClientMethod = 8
	HTTPClientMethodMax HTTPClientMethod = 9
)

type HTTPClientStatus int64

const (
	HTTPClientStatusDisconnected HTTPClientStatus = 0
	HTTPClientStatusResolving HTTPClientStatus = 1
	HTTPClientStatusCantResolve HTTPClientStatus = 2
	HTTPClientStatusConnecting HTTPClientStatus = 3
	HTTPClientStatusCantConnect HTTPClientStatus = 4
	HTTPClientStatusConnected HTTPClientStatus = 5
	HTTPClientStatusRequesting HTTPClientStatus = 6
	HTTPClientStatusBody HTTPClientStatus = 7
	HTTPClientStatusConnectionError HTTPClientStatus = 8
	HTTPClientStatusSslHandshakeError HTTPClientStatus = 9
)

type HTTPClientResponseCode int64

const (
	HTTPClientResponseContinue HTTPClientResponseCode = 100
	HTTPClientResponseSwitchingProtocols HTTPClientResponseCode = 101
	HTTPClientResponseProcessing HTTPClientResponseCode = 102
	HTTPClientResponseOk HTTPClientResponseCode = 200
	HTTPClientResponseCreated HTTPClientResponseCode = 201
	HTTPClientResponseAccepted HTTPClientResponseCode = 202
	HTTPClientResponseNonAuthoritativeInformation HTTPClientResponseCode = 203
	HTTPClientResponseNoContent HTTPClientResponseCode = 204
	HTTPClientResponseResetContent HTTPClientResponseCode = 205
	HTTPClientResponsePartialContent HTTPClientResponseCode = 206
	HTTPClientResponseMultiStatus HTTPClientResponseCode = 207
	HTTPClientResponseAlreadyReported HTTPClientResponseCode = 208
	HTTPClientResponseImUsed HTTPClientResponseCode = 226
	HTTPClientResponseMultipleChoices HTTPClientResponseCode = 300
	HTTPClientResponseMovedPermanently HTTPClientResponseCode = 301
	HTTPClientResponseFound HTTPClientResponseCode = 302
	HTTPClientResponseSeeOther HTTPClientResponseCode = 303
	HTTPClientResponseNotModified HTTPClientResponseCode = 304
	HTTPClientResponseUseProxy HTTPClientResponseCode = 305
	HTTPClientResponseSwitchProxy HTTPClientResponseCode = 306
	HTTPClientResponseTemporaryRedirect HTTPClientResponseCode = 307
	HTTPClientResponsePermanentRedirect HTTPClientResponseCode = 308
	HTTPClientResponseBadRequest HTTPClientResponseCode = 400
	HTTPClientResponseUnauthorized HTTPClientResponseCode = 401
	HTTPClientResponsePaymentRequired HTTPClientResponseCode = 402
	HTTPClientResponseForbidden HTTPClientResponseCode = 403
	HTTPClientResponseNotFound HTTPClientResponseCode = 404
	HTTPClientResponseMethodNotAllowed HTTPClientResponseCode = 405
	HTTPClientResponseNotAcceptable HTTPClientResponseCode = 406
	HTTPClientResponseProxyAuthenticationRequired HTTPClientResponseCode = 407
	HTTPClientResponseRequestTimeout HTTPClientResponseCode = 408
	HTTPClientResponseConflict HTTPClientResponseCode = 409
	HTTPClientResponseGone HTTPClientResponseCode = 410
	HTTPClientResponseLengthRequired HTTPClientResponseCode = 411
	HTTPClientResponsePreconditionFailed HTTPClientResponseCode = 412
	HTTPClientResponseRequestEntityTooLarge HTTPClientResponseCode = 413
	HTTPClientResponseRequestUriTooLong HTTPClientResponseCode = 414
	HTTPClientResponseUnsupportedMediaType HTTPClientResponseCode = 415
	HTTPClientResponseRequestedRangeNotSatisfiable HTTPClientResponseCode = 416
	HTTPClientResponseExpectationFailed HTTPClientResponseCode = 417
	HTTPClientResponseImATeapot HTTPClientResponseCode = 418
	HTTPClientResponseMisdirectedRequest HTTPClientResponseCode = 421
	HTTPClientResponseUnprocessableEntity HTTPClientResponseCode = 422
	HTTPClientResponseLocked HTTPClientResponseCode = 423
	HTTPClientResponseFailedDependency HTTPClientResponseCode = 424
	HTTPClientResponseUpgradeRequired HTTPClientResponseCode = 426
	HTTPClientResponsePreconditionRequired HTTPClientResponseCode = 428
	HTTPClientResponseTooManyRequests HTTPClientResponseCode = 429
	HTTPClientResponseRequestHeaderFieldsTooLarge HTTPClientResponseCode = 431
	HTTPClientResponseUnavailableForLegalReasons HTTPClientResponseCode = 451
	HTTPClientResponseInternalServerError HTTPClientResponseCode = 500
	HTTPClientResponseNotImplemented HTTPClientResponseCode = 501
	HTTPClientResponseBadGateway HTTPClientResponseCode = 502
	HTTPClientResponseServiceUnavailable HTTPClientResponseCode = 503
	HTTPClientResponseGatewayTimeout HTTPClientResponseCode = 504
	HTTPClientResponseHttpVersionNotSupported HTTPClientResponseCode = 505
	HTTPClientResponseVariantAlsoNegotiates HTTPClientResponseCode = 506
	HTTPClientResponseInsufficientStorage HTTPClientResponseCode = 507
	HTTPClientResponseLoopDetected HTTPClientResponseCode = 508
	HTTPClientResponseNotExtended HTTPClientResponseCode = 510
	HTTPClientResponseNetworkAuthRequired HTTPClientResponseCode = 511
)

type HTTPClient struct{self *HTTPClient; obj safeObject }
func NewHTTPClient(ctx Context, at *HTTPClient) HTTPClient { if at == nil { at = new(HTTPClient) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass HTTPClient) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HTTPClient) owner() cObject { return gdClass.obj.get() }
func (HTTPClient) class() string { return "HTTPClient\000" }

func (gdClass HTTPClient) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodHTTPClient [22]cMethodBind
func (gdClass HTTPClient) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass HTTPClient) ConnectToHost(host string, port int64, use_ssl bool, verify_host bool) int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[0], &host, &port, &use_ssl, &verify_host) }
func (gdClass HTTPClient) SetConnection(connection StreamPeer)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[1], &connection) }
func (gdClass HTTPClient) GetConnection() StreamPeer { return methodCall[StreamPeer](gdClass.obj.get(), methodHTTPClient[2]) }
func (gdClass HTTPClient) RequestRaw(method HTTPClientMethod, url string, headers []string, body []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[3], &method, &url, &headers, &body) }
func (gdClass HTTPClient) Request(method HTTPClientMethod, url string, headers []string, body string) int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[4], &method, &url, &headers, &body) }
func (gdClass HTTPClient) Close()  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[5]) }
func (gdClass HTTPClient) HasResponse() bool { return methodCall[bool](gdClass.obj.get(), methodHTTPClient[6]) }
func (gdClass HTTPClient) IsResponseChunked() bool { return methodCall[bool](gdClass.obj.get(), methodHTTPClient[7]) }
func (gdClass HTTPClient) GetResponseCode() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[8]) }
func (gdClass HTTPClient) GetResponseHeaders() []string { return methodCall[[]string](gdClass.obj.get(), methodHTTPClient[9]) }
func (gdClass HTTPClient) GetResponseHeadersAsDictionary() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodHTTPClient[10]) }
func (gdClass HTTPClient) GetResponseBodyLength() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[11]) }
func (gdClass HTTPClient) ReadResponseBodyChunk() []byte { return methodCall[[]byte](gdClass.obj.get(), methodHTTPClient[12]) }
func (gdClass HTTPClient) SetReadChunkSize(bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[13], &bytes) }
func (gdClass HTTPClient) GetReadChunkSize() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[14]) }
func (gdClass HTTPClient) SetBlockingMode(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[15], &enabled) }
func (gdClass HTTPClient) IsBlockingModeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodHTTPClient[16]) }
func (gdClass HTTPClient) GetStatus() HTTPClientStatus { return methodCall[HTTPClientStatus](gdClass.obj.get(), methodHTTPClient[17]) }
func (gdClass HTTPClient) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPClient[18]) }
func (gdClass HTTPClient) SetHttpProxy(host string, port int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[19], &host, &port) }
func (gdClass HTTPClient) SetHttpsProxy(host string, port int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPClient[20], &host, &port) }
func (gdClass HTTPClient) QueryStringFromDict(fields Dictionary) string { return methodCall[string](gdClass.obj.get(), methodHTTPClient[21], &fields) }

type HTTPRequestResult int64

const (
	HTTPRequestResultSuccess HTTPRequestResult = 0
	HTTPRequestResultChunkedBodySizeMismatch HTTPRequestResult = 1
	HTTPRequestResultCantConnect HTTPRequestResult = 2
	HTTPRequestResultCantResolve HTTPRequestResult = 3
	HTTPRequestResultConnectionError HTTPRequestResult = 4
	HTTPRequestResultSslHandshakeError HTTPRequestResult = 5
	HTTPRequestResultNoResponse HTTPRequestResult = 6
	HTTPRequestResultBodySizeLimitExceeded HTTPRequestResult = 7
	HTTPRequestResultBodyDecompressFailed HTTPRequestResult = 8
	HTTPRequestResultRequestFailed HTTPRequestResult = 9
	HTTPRequestResultDownloadFileCantOpen HTTPRequestResult = 10
	HTTPRequestResultDownloadFileWriteError HTTPRequestResult = 11
	HTTPRequestResultRedirectLimitReached HTTPRequestResult = 12
	HTTPRequestResultTimeout HTTPRequestResult = 13
)

type HTTPRequest struct{self *HTTPRequest; obj safeObject }
func NewHTTPRequest(ctx Context, at *HTTPRequest) HTTPRequest { if at == nil { at = new(HTTPRequest) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HTTPRequest) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HTTPRequest) owner() cObject { return gdClass.obj.get() }
func (HTTPRequest) class() string { return "HTTPRequest\000" }

func (gdClass HTTPRequest) Node() Node { return Node{obj:gdClass.obj} }

var methodHTTPRequest [22]cMethodBind
func (gdClass HTTPRequest) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass HTTPRequest) Request(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data string) int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[0], &url, &custom_headers, &ssl_validate_domain, &method, &request_data) }
func (gdClass HTTPRequest) RequestRaw(url string, custom_headers []string, ssl_validate_domain bool, method HTTPClientMethod, request_data_raw []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[1], &url, &custom_headers, &ssl_validate_domain, &method, &request_data_raw) }
func (gdClass HTTPRequest) CancelRequest()  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[2]) }
func (gdClass HTTPRequest) GetHttpClientStatus() HTTPClientStatus { return methodCall[HTTPClientStatus](gdClass.obj.get(), methodHTTPRequest[3]) }
func (gdClass HTTPRequest) SetUseThreads(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[4], &enable) }
func (gdClass HTTPRequest) IsUsingThreads() bool { return methodCall[bool](gdClass.obj.get(), methodHTTPRequest[5]) }
func (gdClass HTTPRequest) SetAcceptGzip(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[6], &enable) }
func (gdClass HTTPRequest) IsAcceptingGzip() bool { return methodCall[bool](gdClass.obj.get(), methodHTTPRequest[7]) }
func (gdClass HTTPRequest) SetBodySizeLimit(bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[8], &bytes) }
func (gdClass HTTPRequest) GetBodySizeLimit() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[9]) }
func (gdClass HTTPRequest) SetMaxRedirects(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[10], &amount) }
func (gdClass HTTPRequest) GetMaxRedirects() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[11]) }
func (gdClass HTTPRequest) SetDownloadFile(path string)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[12], &path) }
func (gdClass HTTPRequest) GetDownloadFile() string { return methodCall[string](gdClass.obj.get(), methodHTTPRequest[13]) }
func (gdClass HTTPRequest) GetDownloadedBytes() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[14]) }
func (gdClass HTTPRequest) GetBodySize() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[15]) }
func (gdClass HTTPRequest) SetTimeout(timeout float64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[16], &timeout) }
func (gdClass HTTPRequest) GetTimeout() float64 { return methodCall[float64](gdClass.obj.get(), methodHTTPRequest[17]) }
func (gdClass HTTPRequest) SetDownloadChunkSize(chunk_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[18], &chunk_size) }
func (gdClass HTTPRequest) GetDownloadChunkSize() int64 { return methodCall[int64](gdClass.obj.get(), methodHTTPRequest[19]) }
func (gdClass HTTPRequest) SetHttpProxy(host string, port int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[20], &host, &port) }
func (gdClass HTTPRequest) SetHttpsProxy(host string, port int64)  { methodCall[struct{}](gdClass.obj.get(), methodHTTPRequest[21], &host, &port) }

type HashingContextHashType int64

const (
	HashingContextHashMd5 HashingContextHashType = 0
	HashingContextHashSha1 HashingContextHashType = 1
	HashingContextHashSha256 HashingContextHashType = 2
)

type HashingContext struct{self *HashingContext; obj safeObject }
func NewHashingContext(ctx Context, at *HashingContext) HashingContext { if at == nil { at = new(HashingContext) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass HashingContext) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HashingContext) owner() cObject { return gdClass.obj.get() }
func (HashingContext) class() string { return "HashingContext\000" }

func (gdClass HashingContext) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodHashingContext [3]cMethodBind
func (gdClass HashingContext) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass HashingContext) Start(atype HashingContextHashType) int64 { return methodCall[int64](gdClass.obj.get(), methodHashingContext[0], &atype) }
func (gdClass HashingContext) Update(chunk []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodHashingContext[1], &chunk) }
func (gdClass HashingContext) Finish() []byte { return methodCall[[]byte](gdClass.obj.get(), methodHashingContext[2]) }

type HeightMapShape3D struct{self *HeightMapShape3D; obj safeObject }
func NewHeightMapShape3D(ctx Context, at *HeightMapShape3D) HeightMapShape3D { if at == nil { at = new(HeightMapShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass HeightMapShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HeightMapShape3D) owner() cObject { return gdClass.obj.get() }
func (HeightMapShape3D) class() string { return "HeightMapShape3D\000" }

func (gdClass HeightMapShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodHeightMapShape3D [6]cMethodBind
func (gdClass HeightMapShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass HeightMapShape3D) SetMapWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodHeightMapShape3D[0], &width) }
func (gdClass HeightMapShape3D) GetMapWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodHeightMapShape3D[1]) }
func (gdClass HeightMapShape3D) SetMapDepth(height int64)  { methodCall[struct{}](gdClass.obj.get(), methodHeightMapShape3D[2], &height) }
func (gdClass HeightMapShape3D) GetMapDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodHeightMapShape3D[3]) }
func (gdClass HeightMapShape3D) SetMapData(data []float32)  { methodCall[struct{}](gdClass.obj.get(), methodHeightMapShape3D[4], &data) }
func (gdClass HeightMapShape3D) GetMapData() []float32 { return methodCall[[]float32](gdClass.obj.get(), methodHeightMapShape3D[5]) }

type HingeJoint3DParam int64

const (
	HingeJoint3DParamBias HingeJoint3DParam = 0
	HingeJoint3DParamLimitUpper HingeJoint3DParam = 1
	HingeJoint3DParamLimitLower HingeJoint3DParam = 2
	HingeJoint3DParamLimitBias HingeJoint3DParam = 3
	HingeJoint3DParamLimitSoftness HingeJoint3DParam = 4
	HingeJoint3DParamLimitRelaxation HingeJoint3DParam = 5
	HingeJoint3DParamMotorTargetVelocity HingeJoint3DParam = 6
	HingeJoint3DParamMotorMaxImpulse HingeJoint3DParam = 7
	HingeJoint3DParamMax HingeJoint3DParam = 8
)

type HingeJoint3DFlag int64

const (
	HingeJoint3DFlagUseLimit HingeJoint3DFlag = 0
	HingeJoint3DFlagEnableMotor HingeJoint3DFlag = 1
	HingeJoint3DFlagMax HingeJoint3DFlag = 2
)

type HingeJoint3D struct{self *HingeJoint3D; obj safeObject }
func NewHingeJoint3D(ctx Context, at *HingeJoint3D) HingeJoint3D { if at == nil { at = new(HingeJoint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass HingeJoint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass HingeJoint3D) owner() cObject { return gdClass.obj.get() }
func (HingeJoint3D) class() string { return "HingeJoint3D\000" }

func (gdClass HingeJoint3D) Joint3D() Joint3D { return Joint3D{obj:gdClass.obj} }

var methodHingeJoint3D [4]cMethodBind
func (gdClass HingeJoint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint3D().virtual(rtype, name)
}
func (gdClass HingeJoint3D) SetParam(param HingeJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodHingeJoint3D[0], &param, &value) }
func (gdClass HingeJoint3D) GetParam(param HingeJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodHingeJoint3D[1], &param) }
func (gdClass HingeJoint3D) SetFlag(flag HingeJoint3DFlag, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodHingeJoint3D[2], &flag, &enabled) }
func (gdClass HingeJoint3D) GetFlag(flag HingeJoint3DFlag) bool { return methodCall[bool](gdClass.obj.get(), methodHingeJoint3D[3], &flag) }

type IPResolverStatus int64

const (
	IPResolverStatusNone IPResolverStatus = 0
	IPResolverStatusWaiting IPResolverStatus = 1
	IPResolverStatusDone IPResolverStatus = 2
	IPResolverStatusError IPResolverStatus = 3
)

type IPType int64

const (
	IPTypeNone IPType = 0
	IPTypeIpv4 IPType = 1
	IPTypeIpv6 IPType = 2
	IPTypeAny IPType = 3
)
var IP IPSingleton

type IPSingleton struct{self *IPSingleton; obj safeObject }
func NewIPSingleton(ctx Context, at *IPSingleton) IPSingleton { if at == nil { at = new(IPSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass IPSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass IPSingleton) owner() cObject { return gdClass.obj.get() }
func (IPSingleton) class() string { return "IPSingleton\000" }

func (gdClass IPSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodIPSingleton [10]cMethodBind
func (gdClass IPSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass IPSingleton) ResolveHostname(host string, ip_type IPType) string { return methodCall[string](gdClass.obj.get(), methodIPSingleton[0], &host, &ip_type) }
func (gdClass IPSingleton) ResolveHostnameAddresses(host string, ip_type IPType) []string { return methodCall[[]string](gdClass.obj.get(), methodIPSingleton[1], &host, &ip_type) }
func (gdClass IPSingleton) ResolveHostnameQueueItem(host string, ip_type IPType) int64 { return methodCall[int64](gdClass.obj.get(), methodIPSingleton[2], &host, &ip_type) }
func (gdClass IPSingleton) GetResolveItemStatus(id int64) IPResolverStatus { return methodCall[IPResolverStatus](gdClass.obj.get(), methodIPSingleton[3], &id) }
func (gdClass IPSingleton) GetResolveItemAddress(id int64) string { return methodCall[string](gdClass.obj.get(), methodIPSingleton[4], &id) }
func (gdClass IPSingleton) GetResolveItemAddresses(id int64) Array { return methodCall[Array](gdClass.obj.get(), methodIPSingleton[5], &id) }
func (gdClass IPSingleton) EraseResolveItem(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodIPSingleton[6], &id) }
func (gdClass IPSingleton) GetLocalAddresses() []string { return methodCall[[]string](gdClass.obj.get(), methodIPSingleton[7]) }
func (gdClass IPSingleton) GetLocalInterfaces() Array { return methodCall[Array](gdClass.obj.get(), methodIPSingleton[8]) }
func (gdClass IPSingleton) ClearCache(hostname string)  { methodCall[struct{}](gdClass.obj.get(), methodIPSingleton[9], &hostname) }

type IPUnix struct{self *IPUnix; obj safeObject }
func NewIPUnix(ctx Context, at *IPUnix) IPUnix { if at == nil { at = new(IPUnix) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass IPUnix) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass IPUnix) owner() cObject { return gdClass.obj.get() }
func (IPUnix) class() string { return "IPUnix\000" }

func (gdClass IPUnix) IPSingleton() IPSingleton { return IPSingleton{obj:gdClass.obj} }

func (gdClass IPUnix) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.IPSingleton().virtual(rtype, name)
}

type ImageFormat int64

const (
	ImageFormatL8 ImageFormat = 0
	ImageFormatLa8 ImageFormat = 1
	ImageFormatR8 ImageFormat = 2
	ImageFormatRg8 ImageFormat = 3
	ImageFormatRgb8 ImageFormat = 4
	ImageFormatRgba8 ImageFormat = 5
	ImageFormatRgba4444 ImageFormat = 6
	ImageFormatRgb565 ImageFormat = 7
	ImageFormatRf ImageFormat = 8
	ImageFormatRgf ImageFormat = 9
	ImageFormatRgbf ImageFormat = 10
	ImageFormatRgbaf ImageFormat = 11
	ImageFormatRh ImageFormat = 12
	ImageFormatRgh ImageFormat = 13
	ImageFormatRgbh ImageFormat = 14
	ImageFormatRgbah ImageFormat = 15
	ImageFormatRgbe9995 ImageFormat = 16
	ImageFormatDxt1 ImageFormat = 17
	ImageFormatDxt3 ImageFormat = 18
	ImageFormatDxt5 ImageFormat = 19
	ImageFormatRgtcR ImageFormat = 20
	ImageFormatRgtcRg ImageFormat = 21
	ImageFormatBptcRgba ImageFormat = 22
	ImageFormatBptcRgbf ImageFormat = 23
	ImageFormatBptcRgbfu ImageFormat = 24
	ImageFormatEtc ImageFormat = 25
	ImageFormatEtc2R11 ImageFormat = 26
	ImageFormatEtc2R11s ImageFormat = 27
	ImageFormatEtc2Rg11 ImageFormat = 28
	ImageFormatEtc2Rg11s ImageFormat = 29
	ImageFormatEtc2Rgb8 ImageFormat = 30
	ImageFormatEtc2Rgba8 ImageFormat = 31
	ImageFormatEtc2Rgb8a1 ImageFormat = 32
	ImageFormatEtc2RaAsRg ImageFormat = 33
	ImageFormatDxt5RaAsRg ImageFormat = 34
	ImageFormatMax ImageFormat = 35
)

type ImageInterpolation int64

const (
	ImageInterpolateNearest ImageInterpolation = 0
	ImageInterpolateBilinear ImageInterpolation = 1
	ImageInterpolateCubic ImageInterpolation = 2
	ImageInterpolateTrilinear ImageInterpolation = 3
	ImageInterpolateLanczos ImageInterpolation = 4
)

type ImageAlphaMode int64

const (
	ImageAlphaNone ImageAlphaMode = 0
	ImageAlphaBit ImageAlphaMode = 1
	ImageAlphaBlend ImageAlphaMode = 2
)

type ImageCompressMode int64

const (
	ImageCompressS3tc ImageCompressMode = 0
	ImageCompressEtc ImageCompressMode = 1
	ImageCompressEtc2 ImageCompressMode = 2
	ImageCompressBptc ImageCompressMode = 3
)

type ImageUsedChannels int64

const (
	ImageUsedChannelsL ImageUsedChannels = 0
	ImageUsedChannelsLa ImageUsedChannels = 1
	ImageUsedChannelsR ImageUsedChannels = 2
	ImageUsedChannelsRg ImageUsedChannels = 3
	ImageUsedChannelsRgb ImageUsedChannels = 4
	ImageUsedChannelsRgba ImageUsedChannels = 5
)

type ImageCompressSource int64

const (
	ImageCompressSourceGeneric ImageCompressSource = 0
	ImageCompressSourceSrgb ImageCompressSource = 1
	ImageCompressSourceNormal ImageCompressSource = 2
)

type Image struct{self *Image; obj safeObject }
func NewImage(ctx Context, at *Image) Image { if at == nil { at = new(Image) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Image) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Image) owner() cObject { return gdClass.obj.get() }
func (Image) class() string { return "Image\000" }

func (gdClass Image) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodImage [64]cMethodBind
func (gdClass Image) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Image) GetWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodImage[0]) }
func (gdClass Image) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodImage[1]) }
func (gdClass Image) GetSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodImage[2]) }
func (gdClass Image) HasMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodImage[3]) }
func (gdClass Image) GetFormat() ImageFormat { return methodCall[ImageFormat](gdClass.obj.get(), methodImage[4]) }
func (gdClass Image) GetData() []byte { return methodCall[[]byte](gdClass.obj.get(), methodImage[5]) }
func (gdClass Image) Convert(format ImageFormat)  { methodCall[struct{}](gdClass.obj.get(), methodImage[6], &format) }
func (gdClass Image) GetMipmapOffset(mipmap int64) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[7], &mipmap) }
func (gdClass Image) ResizeToPo2(square bool, interpolation ImageInterpolation)  { methodCall[struct{}](gdClass.obj.get(), methodImage[8], &square, &interpolation) }
func (gdClass Image) Resize(width int64, height int64, interpolation ImageInterpolation)  { methodCall[struct{}](gdClass.obj.get(), methodImage[9], &width, &height, &interpolation) }
func (gdClass Image) ShrinkX2()  { methodCall[struct{}](gdClass.obj.get(), methodImage[10]) }
func (gdClass Image) Crop(width int64, height int64)  { methodCall[struct{}](gdClass.obj.get(), methodImage[11], &width, &height) }
func (gdClass Image) FlipX()  { methodCall[struct{}](gdClass.obj.get(), methodImage[12]) }
func (gdClass Image) FlipY()  { methodCall[struct{}](gdClass.obj.get(), methodImage[13]) }
func (gdClass Image) GenerateMipmaps(renormalize bool) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[14], &renormalize) }
func (gdClass Image) ClearMipmaps()  { methodCall[struct{}](gdClass.obj.get(), methodImage[15]) }
func (gdClass Image) Create(width int64, height int64, use_mipmaps bool, format ImageFormat)  { methodCall[struct{}](gdClass.obj.get(), methodImage[16], &width, &height, &use_mipmaps, &format) }
func (gdClass Image) CreateFromData(width int64, height int64, use_mipmaps bool, format ImageFormat, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodImage[17], &width, &height, &use_mipmaps, &format, &data) }
func (gdClass Image) IsEmpty() bool { return methodCall[bool](gdClass.obj.get(), methodImage[18]) }
func (gdClass Image) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[19], &path) }
func (gdClass Image) LoadFromFile(path string) Image { return methodCall[Image](gdClass.obj.get(), methodImage[20], &path) }
func (gdClass Image) SavePng(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[21], &path) }
func (gdClass Image) SavePngToBuffer() []byte { return methodCall[[]byte](gdClass.obj.get(), methodImage[22]) }
func (gdClass Image) SaveJpg(path string, quality float64) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[23], &path, &quality) }
func (gdClass Image) SaveJpgToBuffer(quality float64) []byte { return methodCall[[]byte](gdClass.obj.get(), methodImage[24], &quality) }
func (gdClass Image) SaveExr(path string, grayscale bool) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[25], &path, &grayscale) }
func (gdClass Image) SaveExrToBuffer(grayscale bool) []byte { return methodCall[[]byte](gdClass.obj.get(), methodImage[26], &grayscale) }
func (gdClass Image) SaveWebp(path string, lossy bool, quality float64) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[27], &path, &lossy, &quality) }
func (gdClass Image) SaveWebpToBuffer(lossy bool, quality float64) []byte { return methodCall[[]byte](gdClass.obj.get(), methodImage[28], &lossy, &quality) }
func (gdClass Image) DetectAlpha() ImageAlphaMode { return methodCall[ImageAlphaMode](gdClass.obj.get(), methodImage[29]) }
func (gdClass Image) IsInvisible() bool { return methodCall[bool](gdClass.obj.get(), methodImage[30]) }
func (gdClass Image) DetectUsedChannels(source ImageCompressSource) ImageUsedChannels { return methodCall[ImageUsedChannels](gdClass.obj.get(), methodImage[31], &source) }
func (gdClass Image) Compress(mode ImageCompressMode, source ImageCompressSource, lossy_quality float64) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[32], &mode, &source, &lossy_quality) }
func (gdClass Image) CompressFromChannels(mode ImageCompressMode, channels ImageUsedChannels, lossy_quality float64) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[33], &mode, &channels, &lossy_quality) }
func (gdClass Image) Decompress() int64 { return methodCall[int64](gdClass.obj.get(), methodImage[34]) }
func (gdClass Image) IsCompressed() bool { return methodCall[bool](gdClass.obj.get(), methodImage[35]) }
func (gdClass Image) Rotate90(direction ClockDirection)  { methodCall[struct{}](gdClass.obj.get(), methodImage[36], &direction) }
func (gdClass Image) Rotate180()  { methodCall[struct{}](gdClass.obj.get(), methodImage[37]) }
func (gdClass Image) FixAlphaEdges()  { methodCall[struct{}](gdClass.obj.get(), methodImage[38]) }
func (gdClass Image) PremultiplyAlpha()  { methodCall[struct{}](gdClass.obj.get(), methodImage[39]) }
func (gdClass Image) SrgbToLinear()  { methodCall[struct{}](gdClass.obj.get(), methodImage[40]) }
func (gdClass Image) NormalMapToXy()  { methodCall[struct{}](gdClass.obj.get(), methodImage[41]) }
func (gdClass Image) RgbeToSrgb() Image { return methodCall[Image](gdClass.obj.get(), methodImage[42]) }
func (gdClass Image) BumpMapToNormalMap(bump_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodImage[43], &bump_scale) }
func (gdClass Image) ComputeImageMetrics(compared_image Image, use_luma bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodImage[44], &compared_image, &use_luma) }
func (gdClass Image) BlitRect(src Image, src_rect Rect2i, dst Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImage[45], &src, &src_rect, &dst) }
func (gdClass Image) BlitRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImage[46], &src, &mask, &src_rect, &dst) }
func (gdClass Image) BlendRect(src Image, src_rect Rect2i, dst Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImage[47], &src, &src_rect, &dst) }
func (gdClass Image) BlendRectMask(src Image, mask Image, src_rect Rect2i, dst Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImage[48], &src, &mask, &src_rect, &dst) }
func (gdClass Image) Fill(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodImage[49], &color) }
func (gdClass Image) FillRect(rect Rect2i, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodImage[50], &rect, &color) }
func (gdClass Image) GetUsedRect() Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodImage[51]) }
func (gdClass Image) GetRect(rect Rect2i) Image { return methodCall[Image](gdClass.obj.get(), methodImage[52], &rect) }
func (gdClass Image) CopyFrom(src Image)  { methodCall[struct{}](gdClass.obj.get(), methodImage[53], &src) }
func (gdClass Image) GetPixelv(point Vector2i) Color { return methodCall[Color](gdClass.obj.get(), methodImage[54], &point) }
func (gdClass Image) GetPixel(x int64, y int64) Color { return methodCall[Color](gdClass.obj.get(), methodImage[55], &x, &y) }
func (gdClass Image) SetPixelv(point Vector2i, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodImage[56], &point, &color) }
func (gdClass Image) SetPixel(x int64, y int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodImage[57], &x, &y, &color) }
func (gdClass Image) AdjustBcs(brightness float64, contrast float64, saturation float64)  { methodCall[struct{}](gdClass.obj.get(), methodImage[58], &brightness, &contrast, &saturation) }
func (gdClass Image) LoadPngFromBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[59], &buffer) }
func (gdClass Image) LoadJpgFromBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[60], &buffer) }
func (gdClass Image) LoadWebpFromBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[61], &buffer) }
func (gdClass Image) LoadTgaFromBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[62], &buffer) }
func (gdClass Image) LoadBmpFromBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodImage[63], &buffer) }

type ImageTexture struct{self *ImageTexture; obj safeObject }
func NewImageTexture(ctx Context, at *ImageTexture) ImageTexture { if at == nil { at = new(ImageTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ImageTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImageTexture) owner() cObject { return gdClass.obj.get() }
func (ImageTexture) class() string { return "ImageTexture\000" }

func (gdClass ImageTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodImageTexture [5]cMethodBind
func (gdClass ImageTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass ImageTexture) CreateFromImage(image Image) ImageTexture { return methodCall[ImageTexture](gdClass.obj.get(), methodImageTexture[0], &image) }
func (gdClass ImageTexture) GetFormat() ImageFormat { return methodCall[ImageFormat](gdClass.obj.get(), methodImageTexture[1]) }
func (gdClass ImageTexture) SetImage(image Image)  { methodCall[struct{}](gdClass.obj.get(), methodImageTexture[2], &image) }
func (gdClass ImageTexture) Update(image Image)  { methodCall[struct{}](gdClass.obj.get(), methodImageTexture[3], &image) }
func (gdClass ImageTexture) SetSizeOverride(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImageTexture[4], &size) }

type ImageTexture3D struct{self *ImageTexture3D; obj safeObject }
func NewImageTexture3D(ctx Context, at *ImageTexture3D) ImageTexture3D { if at == nil { at = new(ImageTexture3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ImageTexture3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImageTexture3D) owner() cObject { return gdClass.obj.get() }
func (ImageTexture3D) class() string { return "ImageTexture3D\000" }

func (gdClass ImageTexture3D) Texture3D() Texture3D { return Texture3D{obj:gdClass.obj} }

var methodImageTexture3D [2]cMethodBind
func (gdClass ImageTexture3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture3D().virtual(rtype, name)
}
func (gdClass ImageTexture3D) Create(format ImageFormat, width int64, height int64, depth int64, use_mipmaps bool, data Array) int64 { return methodCall[int64](gdClass.obj.get(), methodImageTexture3D[0], &format, &width, &height, &depth, &use_mipmaps, &data) }
func (gdClass ImageTexture3D) Update(data Array)  { methodCall[struct{}](gdClass.obj.get(), methodImageTexture3D[1], &data) }

type ImageTextureLayered struct{self *ImageTextureLayered; obj safeObject }
func NewImageTextureLayered(ctx Context, at *ImageTextureLayered) ImageTextureLayered { if at == nil { at = new(ImageTextureLayered) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ImageTextureLayered) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImageTextureLayered) owner() cObject { return gdClass.obj.get() }
func (ImageTextureLayered) class() string { return "ImageTextureLayered\000" }

func (gdClass ImageTextureLayered) TextureLayered() TextureLayered { return TextureLayered{obj:gdClass.obj} }

var methodImageTextureLayered [2]cMethodBind
func (gdClass ImageTextureLayered) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TextureLayered().virtual(rtype, name)
}
func (gdClass ImageTextureLayered) CreateFromImages(images Array) int64 { return methodCall[int64](gdClass.obj.get(), methodImageTextureLayered[0], &images) }
func (gdClass ImageTextureLayered) UpdateLayer(image Image, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodImageTextureLayered[1], &image, &layer) }

type ImmediateMesh struct{self *ImmediateMesh; obj safeObject }
func NewImmediateMesh(ctx Context, at *ImmediateMesh) ImmediateMesh { if at == nil { at = new(ImmediateMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ImmediateMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImmediateMesh) owner() cObject { return gdClass.obj.get() }
func (ImmediateMesh) class() string { return "ImmediateMesh\000" }

func (gdClass ImmediateMesh) Mesh() Mesh { return Mesh{obj:gdClass.obj} }

var methodImmediateMesh [10]cMethodBind
func (gdClass ImmediateMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Mesh().virtual(rtype, name)
}
func (gdClass ImmediateMesh) SurfaceBegin(primitive MeshPrimitiveType, material Material)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[0], &primitive, &material) }
func (gdClass ImmediateMesh) SurfaceSetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[1], &color) }
func (gdClass ImmediateMesh) SurfaceSetNormal(normal Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[2], &normal) }
func (gdClass ImmediateMesh) SurfaceSetTangent(tangent Plane)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[3], &tangent) }
func (gdClass ImmediateMesh) SurfaceSetUv(uv Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[4], &uv) }
func (gdClass ImmediateMesh) SurfaceSetUv2(uv2 Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[5], &uv2) }
func (gdClass ImmediateMesh) SurfaceAddVertex(vertex Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[6], &vertex) }
func (gdClass ImmediateMesh) SurfaceAddVertex2d(vertex Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[7], &vertex) }
func (gdClass ImmediateMesh) SurfaceEnd()  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[8]) }
func (gdClass ImmediateMesh) ClearSurfaces()  { methodCall[struct{}](gdClass.obj.get(), methodImmediateMesh[9]) }

type ImporterMesh struct{self *ImporterMesh; obj safeObject }
func NewImporterMesh(ctx Context, at *ImporterMesh) ImporterMesh { if at == nil { at = new(ImporterMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ImporterMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImporterMesh) owner() cObject { return gdClass.obj.get() }
func (ImporterMesh) class() string { return "ImporterMesh\000" }

func (gdClass ImporterMesh) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodImporterMesh [23]cMethodBind
func (gdClass ImporterMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass ImporterMesh) AddBlendShape(name string)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[0], &name) }
func (gdClass ImporterMesh) GetBlendShapeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodImporterMesh[1]) }
func (gdClass ImporterMesh) GetBlendShapeName(blend_shape_idx int64) string { return methodCall[string](gdClass.obj.get(), methodImporterMesh[2], &blend_shape_idx) }
func (gdClass ImporterMesh) SetBlendShapeMode(mode MeshBlendShapeMode)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[3], &mode) }
func (gdClass ImporterMesh) GetBlendShapeMode() MeshBlendShapeMode { return methodCall[MeshBlendShapeMode](gdClass.obj.get(), methodImporterMesh[4]) }
func (gdClass ImporterMesh) AddSurface(primitive MeshPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, material Material, name string, flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[5], &primitive, &arrays, &blend_shapes, &lods, &material, &name, &flags) }
func (gdClass ImporterMesh) GetSurfaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodImporterMesh[6]) }
func (gdClass ImporterMesh) GetSurfacePrimitiveType(surface_idx int64) MeshPrimitiveType { return methodCall[MeshPrimitiveType](gdClass.obj.get(), methodImporterMesh[7], &surface_idx) }
func (gdClass ImporterMesh) GetSurfaceName(surface_idx int64) string { return methodCall[string](gdClass.obj.get(), methodImporterMesh[8], &surface_idx) }
func (gdClass ImporterMesh) GetSurfaceArrays(surface_idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodImporterMesh[9], &surface_idx) }
func (gdClass ImporterMesh) GetSurfaceBlendShapeArrays(surface_idx int64, blend_shape_idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodImporterMesh[10], &surface_idx, &blend_shape_idx) }
func (gdClass ImporterMesh) GetSurfaceLodCount(surface_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodImporterMesh[11], &surface_idx) }
func (gdClass ImporterMesh) GetSurfaceLodSize(surface_idx int64, lod_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodImporterMesh[12], &surface_idx, &lod_idx) }
func (gdClass ImporterMesh) GetSurfaceLodIndices(surface_idx int64, lod_idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodImporterMesh[13], &surface_idx, &lod_idx) }
func (gdClass ImporterMesh) GetSurfaceMaterial(surface_idx int64) Material { return methodCall[Material](gdClass.obj.get(), methodImporterMesh[14], &surface_idx) }
func (gdClass ImporterMesh) GetSurfaceFormat(surface_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodImporterMesh[15], &surface_idx) }
func (gdClass ImporterMesh) SetSurfaceName(surface_idx int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[16], &surface_idx, &name) }
func (gdClass ImporterMesh) SetSurfaceMaterial(surface_idx int64, material Material)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[17], &surface_idx, &material) }
func (gdClass ImporterMesh) GenerateLods(normal_merge_angle float64, normal_split_angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[18], &normal_merge_angle, &normal_split_angle) }
func (gdClass ImporterMesh) GetMesh(base_mesh ArrayMesh) ArrayMesh { return methodCall[ArrayMesh](gdClass.obj.get(), methodImporterMesh[19], &base_mesh) }
func (gdClass ImporterMesh) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[20]) }
func (gdClass ImporterMesh) SetLightmapSizeHint(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMesh[21], &size) }
func (gdClass ImporterMesh) GetLightmapSizeHint() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodImporterMesh[22]) }

type ImporterMeshInstance3D struct{self *ImporterMeshInstance3D; obj safeObject }
func NewImporterMeshInstance3D(ctx Context, at *ImporterMeshInstance3D) ImporterMeshInstance3D { if at == nil { at = new(ImporterMeshInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ImporterMeshInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ImporterMeshInstance3D) owner() cObject { return gdClass.obj.get() }
func (ImporterMeshInstance3D) class() string { return "ImporterMeshInstance3D\000" }

func (gdClass ImporterMeshInstance3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodImporterMeshInstance3D [6]cMethodBind
func (gdClass ImporterMeshInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass ImporterMeshInstance3D) SetMesh(mesh ImporterMesh)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMeshInstance3D[0], &mesh) }
func (gdClass ImporterMeshInstance3D) GetMesh() ImporterMesh { return methodCall[ImporterMesh](gdClass.obj.get(), methodImporterMeshInstance3D[1]) }
func (gdClass ImporterMeshInstance3D) SetSkin(skin Skin)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMeshInstance3D[2], &skin) }
func (gdClass ImporterMeshInstance3D) GetSkin() Skin { return methodCall[Skin](gdClass.obj.get(), methodImporterMeshInstance3D[3]) }
func (gdClass ImporterMeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodImporterMeshInstance3D[4], &skeleton_path) }
func (gdClass ImporterMeshInstance3D) GetSkeletonPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodImporterMeshInstance3D[5]) }

type InputMouseMode int64

const (
	InputMouseModeVisible InputMouseMode = 0
	InputMouseModeHidden InputMouseMode = 1
	InputMouseModeCaptured InputMouseMode = 2
	InputMouseModeConfined InputMouseMode = 3
	InputMouseModeConfinedHidden InputMouseMode = 4
)

type InputCursorShape int64

const (
	InputCursorArrow InputCursorShape = 0
	InputCursorIbeam InputCursorShape = 1
	InputCursorPointingHand InputCursorShape = 2
	InputCursorCross InputCursorShape = 3
	InputCursorWait InputCursorShape = 4
	InputCursorBusy InputCursorShape = 5
	InputCursorDrag InputCursorShape = 6
	InputCursorCanDrop InputCursorShape = 7
	InputCursorForbidden InputCursorShape = 8
	InputCursorVsize InputCursorShape = 9
	InputCursorHsize InputCursorShape = 10
	InputCursorBdiagsize InputCursorShape = 11
	InputCursorFdiagsize InputCursorShape = 12
	InputCursorMove InputCursorShape = 13
	InputCursorVsplit InputCursorShape = 14
	InputCursorHsplit InputCursorShape = 15
	InputCursorHelp InputCursorShape = 16
)
var Input InputSingleton

type InputSingleton struct{self *InputSingleton; obj safeObject }
func NewInputSingleton(ctx Context, at *InputSingleton) InputSingleton { if at == nil { at = new(InputSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass InputSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputSingleton) owner() cObject { return gdClass.obj.get() }
func (InputSingleton) class() string { return "InputSingleton\000" }

func (gdClass InputSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodInputSingleton [46]cMethodBind
func (gdClass InputSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass InputSingleton) IsAnythingPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[0]) }
func (gdClass InputSingleton) IsKeyPressed(keycode Key) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[1], &keycode) }
func (gdClass InputSingleton) IsPhysicalKeyPressed(keycode Key) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[2], &keycode) }
func (gdClass InputSingleton) IsMouseButtonPressed(button MouseButton) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[3], &button) }
func (gdClass InputSingleton) IsJoyButtonPressed(device int64, button JoyButton) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[4], &device, &button) }
func (gdClass InputSingleton) IsActionPressed(action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[5], &action, &exact_match) }
func (gdClass InputSingleton) IsActionJustPressed(action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[6], &action, &exact_match) }
func (gdClass InputSingleton) IsActionJustReleased(action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[7], &action, &exact_match) }
func (gdClass InputSingleton) GetActionStrength(action Name, exact_match bool) float64 { return methodCall[float64](gdClass.obj.get(), methodInputSingleton[8], &action, &exact_match) }
func (gdClass InputSingleton) GetActionRawStrength(action Name, exact_match bool) float64 { return methodCall[float64](gdClass.obj.get(), methodInputSingleton[9], &action, &exact_match) }
func (gdClass InputSingleton) GetAxis(negative_action Name, positive_action Name) float64 { return methodCall[float64](gdClass.obj.get(), methodInputSingleton[10], &negative_action, &positive_action) }
func (gdClass InputSingleton) GetVector(negative_x Name, positive_x Name, negative_y Name, positive_y Name, deadzone float64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputSingleton[11], &negative_x, &positive_x, &negative_y, &positive_y, &deadzone) }
func (gdClass InputSingleton) AddJoyMapping(mapping string, update_existing bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[12], &mapping, &update_existing) }
func (gdClass InputSingleton) RemoveJoyMapping(guid string)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[13], &guid) }
func (gdClass InputSingleton) IsJoyKnown(device int64) bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[14], &device) }
func (gdClass InputSingleton) GetJoyAxis(device int64, axis JoyAxis) float64 { return methodCall[float64](gdClass.obj.get(), methodInputSingleton[15], &device, &axis) }
func (gdClass InputSingleton) GetJoyName(device int64) string { return methodCall[string](gdClass.obj.get(), methodInputSingleton[16], &device) }
func (gdClass InputSingleton) GetJoyGuid(device int64) string { return methodCall[string](gdClass.obj.get(), methodInputSingleton[17], &device) }
func (gdClass InputSingleton) GetConnectedJoypads() Array { return methodCall[Array](gdClass.obj.get(), methodInputSingleton[18]) }
func (gdClass InputSingleton) GetJoyVibrationStrength(device int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputSingleton[19], &device) }
func (gdClass InputSingleton) GetJoyVibrationDuration(device int64) float64 { return methodCall[float64](gdClass.obj.get(), methodInputSingleton[20], &device) }
func (gdClass InputSingleton) StartJoyVibration(device int64, weak_magnitude float64, strong_magnitude float64, duration float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[21], &device, &weak_magnitude, &strong_magnitude, &duration) }
func (gdClass InputSingleton) StopJoyVibration(device int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[22], &device) }
func (gdClass InputSingleton) VibrateHandheld(duration_ms int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[23], &duration_ms) }
func (gdClass InputSingleton) GetGravity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodInputSingleton[24]) }
func (gdClass InputSingleton) GetAccelerometer() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodInputSingleton[25]) }
func (gdClass InputSingleton) GetMagnetometer() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodInputSingleton[26]) }
func (gdClass InputSingleton) GetGyroscope() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodInputSingleton[27]) }
func (gdClass InputSingleton) SetGravity(value Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[28], &value) }
func (gdClass InputSingleton) SetAccelerometer(value Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[29], &value) }
func (gdClass InputSingleton) SetMagnetometer(value Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[30], &value) }
func (gdClass InputSingleton) SetGyroscope(value Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[31], &value) }
func (gdClass InputSingleton) GetLastMouseVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputSingleton[32]) }
func (gdClass InputSingleton) GetMouseButtonMask() MouseButton { return methodCall[MouseButton](gdClass.obj.get(), methodInputSingleton[33]) }
func (gdClass InputSingleton) SetMouseMode(mode InputMouseMode)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[34], &mode) }
func (gdClass InputSingleton) GetMouseMode() InputMouseMode { return methodCall[InputMouseMode](gdClass.obj.get(), methodInputSingleton[35]) }
func (gdClass InputSingleton) WarpMouse(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[36], &position) }
func (gdClass InputSingleton) ActionPress(action Name, strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[37], &action, &strength) }
func (gdClass InputSingleton) ActionRelease(action Name)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[38], &action) }
func (gdClass InputSingleton) SetDefaultCursorShape(shape InputCursorShape)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[39], &shape) }
func (gdClass InputSingleton) GetCurrentCursorShape() InputCursorShape { return methodCall[InputCursorShape](gdClass.obj.get(), methodInputSingleton[40]) }
func (gdClass InputSingleton) SetCustomMouseCursor(image Resource, shape InputCursorShape, hotspot Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[41], &image, &shape, &hotspot) }
func (gdClass InputSingleton) ParseInputEvent(event InputEvent)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[42], &event) }
func (gdClass InputSingleton) SetUseAccumulatedInput(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[43], &enable) }
func (gdClass InputSingleton) IsUsingAccumulatedInput() bool { return methodCall[bool](gdClass.obj.get(), methodInputSingleton[44]) }
func (gdClass InputSingleton) FlushBufferedEvents()  { methodCall[struct{}](gdClass.obj.get(), methodInputSingleton[45]) }

type InputEvent struct{self *InputEvent; obj safeObject }
func NewInputEvent(ctx Context, at *InputEvent) InputEvent { if at == nil { at = new(InputEvent) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEvent) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEvent) owner() cObject { return gdClass.obj.get() }
func (InputEvent) class() string { return "InputEvent\000" }

func (gdClass InputEvent) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodInputEvent [13]cMethodBind
func (gdClass InputEvent) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass InputEvent) SetDevice(device int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEvent[0], &device) }
func (gdClass InputEvent) GetDevice() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEvent[1]) }
func (gdClass InputEvent) IsAction(action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[2], &action, &exact_match) }
func (gdClass InputEvent) IsActionPressed(action Name, allow_echo bool, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[3], &action, &allow_echo, &exact_match) }
func (gdClass InputEvent) IsActionReleased(action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[4], &action, &exact_match) }
func (gdClass InputEvent) GetActionStrength(action Name, exact_match bool) float64 { return methodCall[float64](gdClass.obj.get(), methodInputEvent[5], &action, &exact_match) }
func (gdClass InputEvent) IsPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[6]) }
func (gdClass InputEvent) IsEcho() bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[7]) }
func (gdClass InputEvent) AsText() string { return methodCall[string](gdClass.obj.get(), methodInputEvent[8]) }
func (gdClass InputEvent) IsMatch(event InputEvent, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[9], &event, &exact_match) }
func (gdClass InputEvent) IsActionType() bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[10]) }
func (gdClass InputEvent) Accumulate(with_event InputEvent) bool { return methodCall[bool](gdClass.obj.get(), methodInputEvent[11], &with_event) }
func (gdClass InputEvent) XformedBy(xform Transform2D, local_ofs Vector2) InputEvent { return methodCall[InputEvent](gdClass.obj.get(), methodInputEvent[12], &xform, &local_ofs) }

type InputEventAction struct{self *InputEventAction; obj safeObject }
func NewInputEventAction(ctx Context, at *InputEventAction) InputEventAction { if at == nil { at = new(InputEventAction) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventAction) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventAction) owner() cObject { return gdClass.obj.get() }
func (InputEventAction) class() string { return "InputEventAction\000" }

func (gdClass InputEventAction) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventAction [5]cMethodBind
func (gdClass InputEventAction) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventAction) SetAction(action Name)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventAction[0], &action) }
func (gdClass InputEventAction) GetAction() Name { return methodCall[Name](gdClass.obj.get(), methodInputEventAction[1]) }
func (gdClass InputEventAction) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventAction[2], &pressed) }
func (gdClass InputEventAction) SetStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventAction[3], &strength) }
func (gdClass InputEventAction) GetStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventAction[4]) }

type InputEventFromWindow struct{self *InputEventFromWindow; obj safeObject }
func NewInputEventFromWindow(ctx Context, at *InputEventFromWindow) InputEventFromWindow { if at == nil { at = new(InputEventFromWindow) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventFromWindow) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventFromWindow) owner() cObject { return gdClass.obj.get() }
func (InputEventFromWindow) class() string { return "InputEventFromWindow\000" }

func (gdClass InputEventFromWindow) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventFromWindow [2]cMethodBind
func (gdClass InputEventFromWindow) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventFromWindow) SetWindowId(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventFromWindow[0], &id) }
func (gdClass InputEventFromWindow) GetWindowId() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventFromWindow[1]) }

type InputEventGesture struct{self *InputEventGesture; obj safeObject }
func NewInputEventGesture(ctx Context, at *InputEventGesture) InputEventGesture { if at == nil { at = new(InputEventGesture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventGesture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventGesture) owner() cObject { return gdClass.obj.get() }
func (InputEventGesture) class() string { return "InputEventGesture\000" }

func (gdClass InputEventGesture) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers{obj:gdClass.obj} }

var methodInputEventGesture [2]cMethodBind
func (gdClass InputEventGesture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventWithModifiers().virtual(rtype, name)
}
func (gdClass InputEventGesture) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventGesture[0], &position) }
func (gdClass InputEventGesture) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventGesture[1]) }

type InputEventJoypadButton struct{self *InputEventJoypadButton; obj safeObject }
func NewInputEventJoypadButton(ctx Context, at *InputEventJoypadButton) InputEventJoypadButton { if at == nil { at = new(InputEventJoypadButton) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventJoypadButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventJoypadButton) owner() cObject { return gdClass.obj.get() }
func (InputEventJoypadButton) class() string { return "InputEventJoypadButton\000" }

func (gdClass InputEventJoypadButton) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventJoypadButton [5]cMethodBind
func (gdClass InputEventJoypadButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventJoypadButton) SetButtonIndex(button_index JoyButton)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventJoypadButton[0], &button_index) }
func (gdClass InputEventJoypadButton) GetButtonIndex() JoyButton { return methodCall[JoyButton](gdClass.obj.get(), methodInputEventJoypadButton[1]) }
func (gdClass InputEventJoypadButton) SetPressure(pressure float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventJoypadButton[2], &pressure) }
func (gdClass InputEventJoypadButton) GetPressure() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventJoypadButton[3]) }
func (gdClass InputEventJoypadButton) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventJoypadButton[4], &pressed) }

type InputEventJoypadMotion struct{self *InputEventJoypadMotion; obj safeObject }
func NewInputEventJoypadMotion(ctx Context, at *InputEventJoypadMotion) InputEventJoypadMotion { if at == nil { at = new(InputEventJoypadMotion) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventJoypadMotion) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventJoypadMotion) owner() cObject { return gdClass.obj.get() }
func (InputEventJoypadMotion) class() string { return "InputEventJoypadMotion\000" }

func (gdClass InputEventJoypadMotion) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventJoypadMotion [4]cMethodBind
func (gdClass InputEventJoypadMotion) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventJoypadMotion) SetAxis(axis JoyAxis)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventJoypadMotion[0], &axis) }
func (gdClass InputEventJoypadMotion) GetAxis() JoyAxis { return methodCall[JoyAxis](gdClass.obj.get(), methodInputEventJoypadMotion[1]) }
func (gdClass InputEventJoypadMotion) SetAxisValue(axis_value float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventJoypadMotion[2], &axis_value) }
func (gdClass InputEventJoypadMotion) GetAxisValue() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventJoypadMotion[3]) }

type InputEventKey struct{self *InputEventKey; obj safeObject }
func NewInputEventKey(ctx Context, at *InputEventKey) InputEventKey { if at == nil { at = new(InputEventKey) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventKey) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventKey) owner() cObject { return gdClass.obj.get() }
func (InputEventKey) class() string { return "InputEventKey\000" }

func (gdClass InputEventKey) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers{obj:gdClass.obj} }

var methodInputEventKey [10]cMethodBind
func (gdClass InputEventKey) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventWithModifiers().virtual(rtype, name)
}
func (gdClass InputEventKey) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventKey[0], &pressed) }
func (gdClass InputEventKey) SetKeycode(keycode Key)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventKey[1], &keycode) }
func (gdClass InputEventKey) GetKeycode() Key { return methodCall[Key](gdClass.obj.get(), methodInputEventKey[2]) }
func (gdClass InputEventKey) SetPhysicalKeycode(physical_keycode Key)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventKey[3], &physical_keycode) }
func (gdClass InputEventKey) GetPhysicalKeycode() Key { return methodCall[Key](gdClass.obj.get(), methodInputEventKey[4]) }
func (gdClass InputEventKey) SetUnicode(unicode int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventKey[5], &unicode) }
func (gdClass InputEventKey) GetUnicode() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventKey[6]) }
func (gdClass InputEventKey) SetEcho(echo bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventKey[7], &echo) }
func (gdClass InputEventKey) GetKeycodeWithModifiers() Key { return methodCall[Key](gdClass.obj.get(), methodInputEventKey[8]) }
func (gdClass InputEventKey) GetPhysicalKeycodeWithModifiers() Key { return methodCall[Key](gdClass.obj.get(), methodInputEventKey[9]) }

type InputEventMIDI struct{self *InputEventMIDI; obj safeObject }
func NewInputEventMIDI(ctx Context, at *InputEventMIDI) InputEventMIDI { if at == nil { at = new(InputEventMIDI) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventMIDI) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventMIDI) owner() cObject { return gdClass.obj.get() }
func (InputEventMIDI) class() string { return "InputEventMIDI\000" }

func (gdClass InputEventMIDI) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventMIDI [16]cMethodBind
func (gdClass InputEventMIDI) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventMIDI) SetChannel(channel int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[0], &channel) }
func (gdClass InputEventMIDI) GetChannel() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[1]) }
func (gdClass InputEventMIDI) SetMessage(message MIDIMessage)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[2], &message) }
func (gdClass InputEventMIDI) GetMessage() MIDIMessage { return methodCall[MIDIMessage](gdClass.obj.get(), methodInputEventMIDI[3]) }
func (gdClass InputEventMIDI) SetPitch(pitch int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[4], &pitch) }
func (gdClass InputEventMIDI) GetPitch() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[5]) }
func (gdClass InputEventMIDI) SetVelocity(velocity int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[6], &velocity) }
func (gdClass InputEventMIDI) GetVelocity() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[7]) }
func (gdClass InputEventMIDI) SetInstrument(instrument int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[8], &instrument) }
func (gdClass InputEventMIDI) GetInstrument() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[9]) }
func (gdClass InputEventMIDI) SetPressure(pressure int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[10], &pressure) }
func (gdClass InputEventMIDI) GetPressure() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[11]) }
func (gdClass InputEventMIDI) SetControllerNumber(controller_number int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[12], &controller_number) }
func (gdClass InputEventMIDI) GetControllerNumber() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[13]) }
func (gdClass InputEventMIDI) SetControllerValue(controller_value int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMIDI[14], &controller_value) }
func (gdClass InputEventMIDI) GetControllerValue() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventMIDI[15]) }

type InputEventMagnifyGesture struct{self *InputEventMagnifyGesture; obj safeObject }
func NewInputEventMagnifyGesture(ctx Context, at *InputEventMagnifyGesture) InputEventMagnifyGesture { if at == nil { at = new(InputEventMagnifyGesture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventMagnifyGesture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventMagnifyGesture) owner() cObject { return gdClass.obj.get() }
func (InputEventMagnifyGesture) class() string { return "InputEventMagnifyGesture\000" }

func (gdClass InputEventMagnifyGesture) InputEventGesture() InputEventGesture { return InputEventGesture{obj:gdClass.obj} }

var methodInputEventMagnifyGesture [2]cMethodBind
func (gdClass InputEventMagnifyGesture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventGesture().virtual(rtype, name)
}
func (gdClass InputEventMagnifyGesture) SetFactor(factor float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMagnifyGesture[0], &factor) }
func (gdClass InputEventMagnifyGesture) GetFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventMagnifyGesture[1]) }

type InputEventMouse struct{self *InputEventMouse; obj safeObject }
func NewInputEventMouse(ctx Context, at *InputEventMouse) InputEventMouse { if at == nil { at = new(InputEventMouse) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventMouse) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventMouse) owner() cObject { return gdClass.obj.get() }
func (InputEventMouse) class() string { return "InputEventMouse\000" }

func (gdClass InputEventMouse) InputEventWithModifiers() InputEventWithModifiers { return InputEventWithModifiers{obj:gdClass.obj} }

var methodInputEventMouse [6]cMethodBind
func (gdClass InputEventMouse) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventWithModifiers().virtual(rtype, name)
}
func (gdClass InputEventMouse) SetButtonMask(button_mask MouseButton)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouse[0], &button_mask) }
func (gdClass InputEventMouse) GetButtonMask() MouseButton { return methodCall[MouseButton](gdClass.obj.get(), methodInputEventMouse[1]) }
func (gdClass InputEventMouse) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouse[2], &position) }
func (gdClass InputEventMouse) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventMouse[3]) }
func (gdClass InputEventMouse) SetGlobalPosition(global_position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouse[4], &global_position) }
func (gdClass InputEventMouse) GetGlobalPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventMouse[5]) }

type InputEventMouseButton struct{self *InputEventMouseButton; obj safeObject }
func NewInputEventMouseButton(ctx Context, at *InputEventMouseButton) InputEventMouseButton { if at == nil { at = new(InputEventMouseButton) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventMouseButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventMouseButton) owner() cObject { return gdClass.obj.get() }
func (InputEventMouseButton) class() string { return "InputEventMouseButton\000" }

func (gdClass InputEventMouseButton) InputEventMouse() InputEventMouse { return InputEventMouse{obj:gdClass.obj} }

var methodInputEventMouseButton [7]cMethodBind
func (gdClass InputEventMouseButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventMouse().virtual(rtype, name)
}
func (gdClass InputEventMouseButton) SetFactor(factor float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseButton[0], &factor) }
func (gdClass InputEventMouseButton) GetFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventMouseButton[1]) }
func (gdClass InputEventMouseButton) SetButtonIndex(button_index MouseButton)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseButton[2], &button_index) }
func (gdClass InputEventMouseButton) GetButtonIndex() MouseButton { return methodCall[MouseButton](gdClass.obj.get(), methodInputEventMouseButton[3]) }
func (gdClass InputEventMouseButton) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseButton[4], &pressed) }
func (gdClass InputEventMouseButton) SetDoubleClick(double_click bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseButton[5], &double_click) }
func (gdClass InputEventMouseButton) IsDoubleClick() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventMouseButton[6]) }

type InputEventMouseMotion struct{self *InputEventMouseMotion; obj safeObject }
func NewInputEventMouseMotion(ctx Context, at *InputEventMouseMotion) InputEventMouseMotion { if at == nil { at = new(InputEventMouseMotion) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventMouseMotion) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventMouseMotion) owner() cObject { return gdClass.obj.get() }
func (InputEventMouseMotion) class() string { return "InputEventMouseMotion\000" }

func (gdClass InputEventMouseMotion) InputEventMouse() InputEventMouse { return InputEventMouse{obj:gdClass.obj} }

var methodInputEventMouseMotion [10]cMethodBind
func (gdClass InputEventMouseMotion) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventMouse().virtual(rtype, name)
}
func (gdClass InputEventMouseMotion) SetTilt(tilt Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseMotion[0], &tilt) }
func (gdClass InputEventMouseMotion) GetTilt() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventMouseMotion[1]) }
func (gdClass InputEventMouseMotion) SetPressure(pressure float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseMotion[2], &pressure) }
func (gdClass InputEventMouseMotion) GetPressure() float64 { return methodCall[float64](gdClass.obj.get(), methodInputEventMouseMotion[3]) }
func (gdClass InputEventMouseMotion) SetPenInverted(pen_inverted bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseMotion[4], &pen_inverted) }
func (gdClass InputEventMouseMotion) GetPenInverted() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventMouseMotion[5]) }
func (gdClass InputEventMouseMotion) SetRelative(relative Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseMotion[6], &relative) }
func (gdClass InputEventMouseMotion) GetRelative() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventMouseMotion[7]) }
func (gdClass InputEventMouseMotion) SetVelocity(velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventMouseMotion[8], &velocity) }
func (gdClass InputEventMouseMotion) GetVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventMouseMotion[9]) }

type InputEventPanGesture struct{self *InputEventPanGesture; obj safeObject }
func NewInputEventPanGesture(ctx Context, at *InputEventPanGesture) InputEventPanGesture { if at == nil { at = new(InputEventPanGesture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventPanGesture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventPanGesture) owner() cObject { return gdClass.obj.get() }
func (InputEventPanGesture) class() string { return "InputEventPanGesture\000" }

func (gdClass InputEventPanGesture) InputEventGesture() InputEventGesture { return InputEventGesture{obj:gdClass.obj} }

var methodInputEventPanGesture [2]cMethodBind
func (gdClass InputEventPanGesture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventGesture().virtual(rtype, name)
}
func (gdClass InputEventPanGesture) SetDelta(delta Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventPanGesture[0], &delta) }
func (gdClass InputEventPanGesture) GetDelta() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventPanGesture[1]) }

type InputEventScreenDrag struct{self *InputEventScreenDrag; obj safeObject }
func NewInputEventScreenDrag(ctx Context, at *InputEventScreenDrag) InputEventScreenDrag { if at == nil { at = new(InputEventScreenDrag) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventScreenDrag) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventScreenDrag) owner() cObject { return gdClass.obj.get() }
func (InputEventScreenDrag) class() string { return "InputEventScreenDrag\000" }

func (gdClass InputEventScreenDrag) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow{obj:gdClass.obj} }

var methodInputEventScreenDrag [8]cMethodBind
func (gdClass InputEventScreenDrag) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventFromWindow().virtual(rtype, name)
}
func (gdClass InputEventScreenDrag) SetIndex(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenDrag[0], &index) }
func (gdClass InputEventScreenDrag) GetIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventScreenDrag[1]) }
func (gdClass InputEventScreenDrag) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenDrag[2], &position) }
func (gdClass InputEventScreenDrag) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventScreenDrag[3]) }
func (gdClass InputEventScreenDrag) SetRelative(relative Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenDrag[4], &relative) }
func (gdClass InputEventScreenDrag) GetRelative() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventScreenDrag[5]) }
func (gdClass InputEventScreenDrag) SetVelocity(velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenDrag[6], &velocity) }
func (gdClass InputEventScreenDrag) GetVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventScreenDrag[7]) }

type InputEventScreenTouch struct{self *InputEventScreenTouch; obj safeObject }
func NewInputEventScreenTouch(ctx Context, at *InputEventScreenTouch) InputEventScreenTouch { if at == nil { at = new(InputEventScreenTouch) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventScreenTouch) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventScreenTouch) owner() cObject { return gdClass.obj.get() }
func (InputEventScreenTouch) class() string { return "InputEventScreenTouch\000" }

func (gdClass InputEventScreenTouch) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow{obj:gdClass.obj} }

var methodInputEventScreenTouch [5]cMethodBind
func (gdClass InputEventScreenTouch) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventFromWindow().virtual(rtype, name)
}
func (gdClass InputEventScreenTouch) SetIndex(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenTouch[0], &index) }
func (gdClass InputEventScreenTouch) GetIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodInputEventScreenTouch[1]) }
func (gdClass InputEventScreenTouch) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenTouch[2], &position) }
func (gdClass InputEventScreenTouch) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodInputEventScreenTouch[3]) }
func (gdClass InputEventScreenTouch) SetPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventScreenTouch[4], &pressed) }

type InputEventShortcut struct{self *InputEventShortcut; obj safeObject }
func NewInputEventShortcut(ctx Context, at *InputEventShortcut) InputEventShortcut { if at == nil { at = new(InputEventShortcut) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventShortcut) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventShortcut) owner() cObject { return gdClass.obj.get() }
func (InputEventShortcut) class() string { return "InputEventShortcut\000" }

func (gdClass InputEventShortcut) InputEvent() InputEvent { return InputEvent{obj:gdClass.obj} }

var methodInputEventShortcut [2]cMethodBind
func (gdClass InputEventShortcut) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEvent().virtual(rtype, name)
}
func (gdClass InputEventShortcut) SetShortcut(shortcut Shortcut)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventShortcut[0], &shortcut) }
func (gdClass InputEventShortcut) GetShortcut() Shortcut { return methodCall[Shortcut](gdClass.obj.get(), methodInputEventShortcut[1]) }

type InputEventWithModifiers struct{self *InputEventWithModifiers; obj safeObject }
func NewInputEventWithModifiers(ctx Context, at *InputEventWithModifiers) InputEventWithModifiers { if at == nil { at = new(InputEventWithModifiers) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass InputEventWithModifiers) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputEventWithModifiers) owner() cObject { return gdClass.obj.get() }
func (InputEventWithModifiers) class() string { return "InputEventWithModifiers\000" }

func (gdClass InputEventWithModifiers) InputEventFromWindow() InputEventFromWindow { return InputEventFromWindow{obj:gdClass.obj} }

var methodInputEventWithModifiers [12]cMethodBind
func (gdClass InputEventWithModifiers) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.InputEventFromWindow().virtual(rtype, name)
}
func (gdClass InputEventWithModifiers) SetStoreCommand(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[0], &enable) }
func (gdClass InputEventWithModifiers) IsStoringCommand() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[1]) }
func (gdClass InputEventWithModifiers) SetAltPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[2], &pressed) }
func (gdClass InputEventWithModifiers) IsAltPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[3]) }
func (gdClass InputEventWithModifiers) SetShiftPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[4], &pressed) }
func (gdClass InputEventWithModifiers) IsShiftPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[5]) }
func (gdClass InputEventWithModifiers) SetCtrlPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[6], &pressed) }
func (gdClass InputEventWithModifiers) IsCtrlPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[7]) }
func (gdClass InputEventWithModifiers) SetMetaPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[8], &pressed) }
func (gdClass InputEventWithModifiers) IsMetaPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[9]) }
func (gdClass InputEventWithModifiers) SetCommandPressed(pressed bool)  { methodCall[struct{}](gdClass.obj.get(), methodInputEventWithModifiers[10], &pressed) }
func (gdClass InputEventWithModifiers) IsCommandPressed() bool { return methodCall[bool](gdClass.obj.get(), methodInputEventWithModifiers[11]) }
var InputMap InputMapSingleton

type InputMapSingleton struct{self *InputMapSingleton; obj safeObject }
func NewInputMapSingleton(ctx Context, at *InputMapSingleton) InputMapSingleton { if at == nil { at = new(InputMapSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass InputMapSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InputMapSingleton) owner() cObject { return gdClass.obj.get() }
func (InputMapSingleton) class() string { return "InputMapSingleton\000" }

func (gdClass InputMapSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodInputMapSingleton [13]cMethodBind
func (gdClass InputMapSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass InputMapSingleton) HasAction(action Name) bool { return methodCall[bool](gdClass.obj.get(), methodInputMapSingleton[0], &action) }
func (gdClass InputMapSingleton) GetActions() Array { return methodCall[Array](gdClass.obj.get(), methodInputMapSingleton[1]) }
func (gdClass InputMapSingleton) AddAction(action Name, deadzone float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[2], &action, &deadzone) }
func (gdClass InputMapSingleton) EraseAction(action Name)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[3], &action) }
func (gdClass InputMapSingleton) ActionSetDeadzone(action Name, deadzone float64)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[4], &action, &deadzone) }
func (gdClass InputMapSingleton) ActionGetDeadzone(action Name) float64 { return methodCall[float64](gdClass.obj.get(), methodInputMapSingleton[5], &action) }
func (gdClass InputMapSingleton) ActionAddEvent(action Name, event InputEvent)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[6], &action, &event) }
func (gdClass InputMapSingleton) ActionHasEvent(action Name, event InputEvent) bool { return methodCall[bool](gdClass.obj.get(), methodInputMapSingleton[7], &action, &event) }
func (gdClass InputMapSingleton) ActionEraseEvent(action Name, event InputEvent)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[8], &action, &event) }
func (gdClass InputMapSingleton) ActionEraseEvents(action Name)  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[9], &action) }
func (gdClass InputMapSingleton) ActionGetEvents(action Name) Array { return methodCall[Array](gdClass.obj.get(), methodInputMapSingleton[10], &action) }
func (gdClass InputMapSingleton) EventIsAction(event InputEvent, action Name, exact_match bool) bool { return methodCall[bool](gdClass.obj.get(), methodInputMapSingleton[11], &event, &action, &exact_match) }
func (gdClass InputMapSingleton) LoadFromProjectSettings()  { methodCall[struct{}](gdClass.obj.get(), methodInputMapSingleton[12]) }

type InstancePlaceholder struct{self *InstancePlaceholder; obj safeObject }
func NewInstancePlaceholder(ctx Context, at *InstancePlaceholder) InstancePlaceholder { if at == nil { at = new(InstancePlaceholder) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass InstancePlaceholder) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass InstancePlaceholder) owner() cObject { return gdClass.obj.get() }
func (InstancePlaceholder) class() string { return "InstancePlaceholder\000" }

func (gdClass InstancePlaceholder) Node() Node { return Node{obj:gdClass.obj} }

var methodInstancePlaceholder [3]cMethodBind
func (gdClass InstancePlaceholder) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass InstancePlaceholder) GetStoredValues(with_order bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodInstancePlaceholder[0], &with_order) }
func (gdClass InstancePlaceholder) CreateInstance(replace bool, custom_scene PackedScene) Node { return methodCall[Node](gdClass.obj.get(), methodInstancePlaceholder[1], &replace, &custom_scene) }
func (gdClass InstancePlaceholder) GetInstancePath() string { return methodCall[string](gdClass.obj.get(), methodInstancePlaceholder[2]) }

type IntervalTweener struct{self *IntervalTweener; obj safeObject }
func NewIntervalTweener(ctx Context, at *IntervalTweener) IntervalTweener { if at == nil { at = new(IntervalTweener) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass IntervalTweener) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass IntervalTweener) owner() cObject { return gdClass.obj.get() }
func (IntervalTweener) class() string { return "IntervalTweener\000" }

func (gdClass IntervalTweener) Tweener() Tweener { return Tweener{obj:gdClass.obj} }

func (gdClass IntervalTweener) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Tweener().virtual(rtype, name)
}

type ItemListIconMode int64

const (
	ItemListIconModeTop ItemListIconMode = 0
	ItemListIconModeLeft ItemListIconMode = 1
)

type ItemListSelectMode int64

const (
	ItemListSelectSingle ItemListSelectMode = 0
	ItemListSelectMulti ItemListSelectMode = 1
)

type ItemList struct{self *ItemList; obj safeObject }
func NewItemList(ctx Context, at *ItemList) ItemList { if at == nil { at = new(ItemList) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ItemList) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ItemList) owner() cObject { return gdClass.obj.get() }
func (ItemList) class() string { return "ItemList\000" }

func (gdClass ItemList) Control() Control { return Control{obj:gdClass.obj} }

var methodItemList [69]cMethodBind
func (gdClass ItemList) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass ItemList) AddItem(text string, icon Texture2D, selectable bool) int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[0], &text, &icon, &selectable) }
func (gdClass ItemList) AddIconItem(icon Texture2D, selectable bool) int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[1], &icon, &selectable) }
func (gdClass ItemList) SetItemText(idx int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[2], &idx, &text) }
func (gdClass ItemList) GetItemText(idx int64) string { return methodCall[string](gdClass.obj.get(), methodItemList[3], &idx) }
func (gdClass ItemList) SetItemIcon(idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[4], &idx, &icon) }
func (gdClass ItemList) GetItemIcon(idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodItemList[5], &idx) }
func (gdClass ItemList) SetItemTextDirection(idx int64, direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[6], &idx, &direction) }
func (gdClass ItemList) GetItemTextDirection(idx int64) ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodItemList[7], &idx) }
func (gdClass ItemList) SetItemLanguage(idx int64, language string)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[8], &idx, &language) }
func (gdClass ItemList) GetItemLanguage(idx int64) string { return methodCall[string](gdClass.obj.get(), methodItemList[9], &idx) }
func (gdClass ItemList) SetItemIconTransposed(idx int64, transposed bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[10], &idx, &transposed) }
func (gdClass ItemList) IsItemIconTransposed(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodItemList[11], &idx) }
func (gdClass ItemList) SetItemIconRegion(idx int64, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[12], &idx, &rect) }
func (gdClass ItemList) GetItemIconRegion(idx int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodItemList[13], &idx) }
func (gdClass ItemList) SetItemIconModulate(idx int64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[14], &idx, &modulate) }
func (gdClass ItemList) GetItemIconModulate(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodItemList[15], &idx) }
func (gdClass ItemList) SetItemSelectable(idx int64, selectable bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[16], &idx, &selectable) }
func (gdClass ItemList) IsItemSelectable(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodItemList[17], &idx) }
func (gdClass ItemList) SetItemDisabled(idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[18], &idx, &disabled) }
func (gdClass ItemList) IsItemDisabled(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodItemList[19], &idx) }
func (gdClass ItemList) SetItemMetadata(idx int64, metadata any)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[20], &idx, &metadata) }
func (gdClass ItemList) GetItemMetadata(idx int64) any { return methodCall[any](gdClass.obj.get(), methodItemList[21], &idx) }
func (gdClass ItemList) SetItemCustomBgColor(idx int64, custom_bg_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[22], &idx, &custom_bg_color) }
func (gdClass ItemList) GetItemCustomBgColor(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodItemList[23], &idx) }
func (gdClass ItemList) SetItemCustomFgColor(idx int64, custom_fg_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[24], &idx, &custom_fg_color) }
func (gdClass ItemList) GetItemCustomFgColor(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodItemList[25], &idx) }
func (gdClass ItemList) SetItemTooltipEnabled(idx int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[26], &idx, &enable) }
func (gdClass ItemList) IsItemTooltipEnabled(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodItemList[27], &idx) }
func (gdClass ItemList) SetItemTooltip(idx int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[28], &idx, &tooltip) }
func (gdClass ItemList) GetItemTooltip(idx int64) string { return methodCall[string](gdClass.obj.get(), methodItemList[29], &idx) }
func (gdClass ItemList) Select(idx int64, single bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[30], &idx, &single) }
func (gdClass ItemList) Deselect(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[31], &idx) }
func (gdClass ItemList) DeselectAll()  { methodCall[struct{}](gdClass.obj.get(), methodItemList[32]) }
func (gdClass ItemList) IsSelected(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodItemList[33], &idx) }
func (gdClass ItemList) GetSelectedItems() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodItemList[34]) }
func (gdClass ItemList) MoveItem(from_idx int64, to_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[35], &from_idx, &to_idx) }
func (gdClass ItemList) SetItemCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[36], &count) }
func (gdClass ItemList) GetItemCount() int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[37]) }
func (gdClass ItemList) RemoveItem(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[38], &idx) }
func (gdClass ItemList) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodItemList[39]) }
func (gdClass ItemList) SortItemsByText()  { methodCall[struct{}](gdClass.obj.get(), methodItemList[40]) }
func (gdClass ItemList) SetFixedColumnWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[41], &width) }
func (gdClass ItemList) GetFixedColumnWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[42]) }
func (gdClass ItemList) SetSameColumnWidth(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[43], &enable) }
func (gdClass ItemList) IsSameColumnWidth() bool { return methodCall[bool](gdClass.obj.get(), methodItemList[44]) }
func (gdClass ItemList) SetMaxTextLines(lines int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[45], &lines) }
func (gdClass ItemList) GetMaxTextLines() int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[46]) }
func (gdClass ItemList) SetMaxColumns(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[47], &amount) }
func (gdClass ItemList) GetMaxColumns() int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[48]) }
func (gdClass ItemList) SetSelectMode(mode ItemListSelectMode)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[49], &mode) }
func (gdClass ItemList) GetSelectMode() ItemListSelectMode { return methodCall[ItemListSelectMode](gdClass.obj.get(), methodItemList[50]) }
func (gdClass ItemList) SetIconMode(mode ItemListIconMode)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[51], &mode) }
func (gdClass ItemList) GetIconMode() ItemListIconMode { return methodCall[ItemListIconMode](gdClass.obj.get(), methodItemList[52]) }
func (gdClass ItemList) SetFixedIconSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[53], &size) }
func (gdClass ItemList) GetFixedIconSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodItemList[54]) }
func (gdClass ItemList) SetIconScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[55], &scale) }
func (gdClass ItemList) GetIconScale() float64 { return methodCall[float64](gdClass.obj.get(), methodItemList[56]) }
func (gdClass ItemList) SetAllowRmbSelect(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[57], &allow) }
func (gdClass ItemList) GetAllowRmbSelect() bool { return methodCall[bool](gdClass.obj.get(), methodItemList[58]) }
func (gdClass ItemList) SetAllowReselect(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[59], &allow) }
func (gdClass ItemList) GetAllowReselect() bool { return methodCall[bool](gdClass.obj.get(), methodItemList[60]) }
func (gdClass ItemList) SetAutoHeight(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[61], &enable) }
func (gdClass ItemList) HasAutoHeight() bool { return methodCall[bool](gdClass.obj.get(), methodItemList[62]) }
func (gdClass ItemList) IsAnythingSelected() bool { return methodCall[bool](gdClass.obj.get(), methodItemList[63]) }
func (gdClass ItemList) GetItemAtPosition(position Vector2, exact bool) int64 { return methodCall[int64](gdClass.obj.get(), methodItemList[64], &position, &exact) }
func (gdClass ItemList) EnsureCurrentIsVisible()  { methodCall[struct{}](gdClass.obj.get(), methodItemList[65]) }
func (gdClass ItemList) GetVScrollBar() VScrollBar { return methodCall[VScrollBar](gdClass.obj.get(), methodItemList[66]) }
func (gdClass ItemList) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodItemList[67], &overrun_behavior) }
func (gdClass ItemList) GetTextOverrunBehavior() TextServerOverrunBehavior { return methodCall[TextServerOverrunBehavior](gdClass.obj.get(), methodItemList[68]) }

type JNISingleton struct{self *JNISingleton; obj safeObject }
func NewJNISingleton(ctx Context, at *JNISingleton) JNISingleton { if at == nil { at = new(JNISingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass JNISingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JNISingleton) owner() cObject { return gdClass.obj.get() }
func (JNISingleton) class() string { return "JNISingleton\000" }

func (gdClass JNISingleton) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass JNISingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}

type JSON struct{self *JSON; obj safeObject }
func NewJSON(ctx Context, at *JSON) JSON { if at == nil { at = new(JSON) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass JSON) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JSON) owner() cObject { return gdClass.obj.get() }
func (JSON) class() string { return "JSON\000" }

func (gdClass JSON) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodJSON [6]cMethodBind
func (gdClass JSON) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass JSON) Stringify(data any, indent string, sort_keys bool, full_precision bool) string { return methodCall[string](gdClass.obj.get(), methodJSON[0], &data, &indent, &sort_keys, &full_precision) }
func (gdClass JSON) ParseString(json_string string) any { return methodCall[any](gdClass.obj.get(), methodJSON[1], &json_string) }
func (gdClass JSON) Parse(json_string string) int64 { return methodCall[int64](gdClass.obj.get(), methodJSON[2], &json_string) }
func (gdClass JSON) GetData() any { return methodCall[any](gdClass.obj.get(), methodJSON[3]) }
func (gdClass JSON) GetErrorLine() int64 { return methodCall[int64](gdClass.obj.get(), methodJSON[4]) }
func (gdClass JSON) GetErrorMessage() string { return methodCall[string](gdClass.obj.get(), methodJSON[5]) }

type JSONRPCErrorCode int64

const (
	JSONRPCParseError JSONRPCErrorCode = -32700
	JSONRPCInvalidRequest JSONRPCErrorCode = -32600
	JSONRPCMethodNotFound JSONRPCErrorCode = -32601
	JSONRPCInvalidParams JSONRPCErrorCode = -32602
	JSONRPCInternalError JSONRPCErrorCode = -32603
)

type JSONRPC struct{self *JSONRPC; obj safeObject }
func NewJSONRPC(ctx Context, at *JSONRPC) JSONRPC { if at == nil { at = new(JSONRPC) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass JSONRPC) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JSONRPC) owner() cObject { return gdClass.obj.get() }
func (JSONRPC) class() string { return "JSONRPC\000" }

func (gdClass JSONRPC) Object() Object { return Object{obj:gdClass.obj} }

var methodJSONRPC [7]cMethodBind
func (gdClass JSONRPC) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass JSONRPC) SetScope(scope string, target Object)  { methodCall[struct{}](gdClass.obj.get(), methodJSONRPC[0], &scope, &target) }
func (gdClass JSONRPC) ProcessAction(action any, recurse bool) any { return methodCall[any](gdClass.obj.get(), methodJSONRPC[1], &action, &recurse) }
func (gdClass JSONRPC) ProcessString(action string) string { return methodCall[string](gdClass.obj.get(), methodJSONRPC[2], &action) }
func (gdClass JSONRPC) MakeRequest(method string, params any, id any) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodJSONRPC[3], &method, &params, &id) }
func (gdClass JSONRPC) MakeResponse(result any, id any) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodJSONRPC[4], &result, &id) }
func (gdClass JSONRPC) MakeNotification(method string, params any) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodJSONRPC[5], &method, &params) }
func (gdClass JSONRPC) MakeResponseError(code int64, message string, id any) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodJSONRPC[6], &code, &message, &id) }

type JavaClass struct{self *JavaClass; obj safeObject }
func NewJavaClass(ctx Context, at *JavaClass) JavaClass { if at == nil { at = new(JavaClass) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass JavaClass) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JavaClass) owner() cObject { return gdClass.obj.get() }
func (JavaClass) class() string { return "JavaClass\000" }

func (gdClass JavaClass) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass JavaClass) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
var JavaClassWrapper JavaClassWrapperSingleton

type JavaClassWrapperSingleton struct{self *JavaClassWrapperSingleton; obj safeObject }
func NewJavaClassWrapperSingleton(ctx Context, at *JavaClassWrapperSingleton) JavaClassWrapperSingleton { if at == nil { at = new(JavaClassWrapperSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass JavaClassWrapperSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JavaClassWrapperSingleton) owner() cObject { return gdClass.obj.get() }
func (JavaClassWrapperSingleton) class() string { return "JavaClassWrapperSingleton\000" }

func (gdClass JavaClassWrapperSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodJavaClassWrapperSingleton [1]cMethodBind
func (gdClass JavaClassWrapperSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass JavaClassWrapperSingleton) Wrap(name string) JavaClass { return methodCall[JavaClass](gdClass.obj.get(), methodJavaClassWrapperSingleton[0], &name) }
var JavaScript JavaScriptSingleton

type JavaScriptSingleton struct{self *JavaScriptSingleton; obj safeObject }
func NewJavaScriptSingleton(ctx Context, at *JavaScriptSingleton) JavaScriptSingleton { if at == nil { at = new(JavaScriptSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass JavaScriptSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JavaScriptSingleton) owner() cObject { return gdClass.obj.get() }
func (JavaScriptSingleton) class() string { return "JavaScriptSingleton\000" }

func (gdClass JavaScriptSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodJavaScriptSingleton [7]cMethodBind
func (gdClass JavaScriptSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass JavaScriptSingleton) Eval(code string, use_global_execution_context bool) any { return methodCall[any](gdClass.obj.get(), methodJavaScriptSingleton[0], &code, &use_global_execution_context) }
func (gdClass JavaScriptSingleton) GetInterface(intf string) JavaScriptObject { return methodCall[JavaScriptObject](gdClass.obj.get(), methodJavaScriptSingleton[1], &intf) }
func (gdClass JavaScriptSingleton) CreateCallback(callable Callable) JavaScriptObject { return methodCall[JavaScriptObject](gdClass.obj.get(), methodJavaScriptSingleton[2], &callable) }
func (gdClass JavaScriptSingleton) CreateObject(object string) any { return methodCall[any](gdClass.obj.get(), methodJavaScriptSingleton[3], &object) }
func (gdClass JavaScriptSingleton) DownloadBuffer(buffer []byte, name string, mime string)  { methodCall[struct{}](gdClass.obj.get(), methodJavaScriptSingleton[4], &buffer, &name, &mime) }
func (gdClass JavaScriptSingleton) PwaNeedsUpdate() bool { return methodCall[bool](gdClass.obj.get(), methodJavaScriptSingleton[5]) }
func (gdClass JavaScriptSingleton) PwaUpdate() int64 { return methodCall[int64](gdClass.obj.get(), methodJavaScriptSingleton[6]) }

type JavaScriptObject struct{self *JavaScriptObject; obj safeObject }
func NewJavaScriptObject(ctx Context, at *JavaScriptObject) JavaScriptObject { if at == nil { at = new(JavaScriptObject) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass JavaScriptObject) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass JavaScriptObject) owner() cObject { return gdClass.obj.get() }
func (JavaScriptObject) class() string { return "JavaScriptObject\000" }

func (gdClass JavaScriptObject) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass JavaScriptObject) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type Joint2D struct{self *Joint2D; obj safeObject }
func NewJoint2D(ctx Context, at *Joint2D) Joint2D { if at == nil { at = new(Joint2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Joint2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Joint2D) owner() cObject { return gdClass.obj.get() }
func (Joint2D) class() string { return "Joint2D\000" }

func (gdClass Joint2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodJoint2D [8]cMethodBind
func (gdClass Joint2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Joint2D) SetNodeA(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodJoint2D[0], &node) }
func (gdClass Joint2D) GetNodeA() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodJoint2D[1]) }
func (gdClass Joint2D) SetNodeB(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodJoint2D[2], &node) }
func (gdClass Joint2D) GetNodeB() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodJoint2D[3]) }
func (gdClass Joint2D) SetBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodJoint2D[4], &bias) }
func (gdClass Joint2D) GetBias() float64 { return methodCall[float64](gdClass.obj.get(), methodJoint2D[5]) }
func (gdClass Joint2D) SetExcludeNodesFromCollision(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodJoint2D[6], &enable) }
func (gdClass Joint2D) GetExcludeNodesFromCollision() bool { return methodCall[bool](gdClass.obj.get(), methodJoint2D[7]) }

type Joint3D struct{self *Joint3D; obj safeObject }
func NewJoint3D(ctx Context, at *Joint3D) Joint3D { if at == nil { at = new(Joint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Joint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Joint3D) owner() cObject { return gdClass.obj.get() }
func (Joint3D) class() string { return "Joint3D\000" }

func (gdClass Joint3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodJoint3D [8]cMethodBind
func (gdClass Joint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass Joint3D) SetNodeA(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodJoint3D[0], &node) }
func (gdClass Joint3D) GetNodeA() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodJoint3D[1]) }
func (gdClass Joint3D) SetNodeB(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodJoint3D[2], &node) }
func (gdClass Joint3D) GetNodeB() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodJoint3D[3]) }
func (gdClass Joint3D) SetSolverPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodJoint3D[4], &priority) }
func (gdClass Joint3D) GetSolverPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodJoint3D[5]) }
func (gdClass Joint3D) SetExcludeNodesFromCollision(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodJoint3D[6], &enable) }
func (gdClass Joint3D) GetExcludeNodesFromCollision() bool { return methodCall[bool](gdClass.obj.get(), methodJoint3D[7]) }

type KinematicCollision2D struct{self *KinematicCollision2D; obj safeObject }
func NewKinematicCollision2D(ctx Context, at *KinematicCollision2D) KinematicCollision2D { if at == nil { at = new(KinematicCollision2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass KinematicCollision2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass KinematicCollision2D) owner() cObject { return gdClass.obj.get() }
func (KinematicCollision2D) class() string { return "KinematicCollision2D\000" }

func (gdClass KinematicCollision2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodKinematicCollision2D [13]cMethodBind
func (gdClass KinematicCollision2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass KinematicCollision2D) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodKinematicCollision2D[0]) }
func (gdClass KinematicCollision2D) GetNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodKinematicCollision2D[1]) }
func (gdClass KinematicCollision2D) GetTravel() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodKinematicCollision2D[2]) }
func (gdClass KinematicCollision2D) GetRemainder() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodKinematicCollision2D[3]) }
func (gdClass KinematicCollision2D) GetAngle(up_direction Vector2) float64 { return methodCall[float64](gdClass.obj.get(), methodKinematicCollision2D[4], &up_direction) }
func (gdClass KinematicCollision2D) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodKinematicCollision2D[5]) }
func (gdClass KinematicCollision2D) GetLocalShape() Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision2D[6]) }
func (gdClass KinematicCollision2D) GetCollider() Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision2D[7]) }
func (gdClass KinematicCollision2D) GetColliderId() int64 { return methodCall[int64](gdClass.obj.get(), methodKinematicCollision2D[8]) }
func (gdClass KinematicCollision2D) GetColliderRid() RID { return methodCall[RID](gdClass.obj.get(), methodKinematicCollision2D[9]) }
func (gdClass KinematicCollision2D) GetColliderShape() Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision2D[10]) }
func (gdClass KinematicCollision2D) GetColliderShapeIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodKinematicCollision2D[11]) }
func (gdClass KinematicCollision2D) GetColliderVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodKinematicCollision2D[12]) }

type KinematicCollision3D struct{self *KinematicCollision3D; obj safeObject }
func NewKinematicCollision3D(ctx Context, at *KinematicCollision3D) KinematicCollision3D { if at == nil { at = new(KinematicCollision3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass KinematicCollision3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass KinematicCollision3D) owner() cObject { return gdClass.obj.get() }
func (KinematicCollision3D) class() string { return "KinematicCollision3D\000" }

func (gdClass KinematicCollision3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodKinematicCollision3D [14]cMethodBind
func (gdClass KinematicCollision3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass KinematicCollision3D) GetTravel() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodKinematicCollision3D[0]) }
func (gdClass KinematicCollision3D) GetRemainder() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodKinematicCollision3D[1]) }
func (gdClass KinematicCollision3D) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodKinematicCollision3D[2]) }
func (gdClass KinematicCollision3D) GetCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodKinematicCollision3D[3]) }
func (gdClass KinematicCollision3D) GetPosition(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodKinematicCollision3D[4], &collision_index) }
func (gdClass KinematicCollision3D) GetNormal(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodKinematicCollision3D[5], &collision_index) }
func (gdClass KinematicCollision3D) GetAngle(collision_index int64, up_direction Vector3) float64 { return methodCall[float64](gdClass.obj.get(), methodKinematicCollision3D[6], &collision_index, &up_direction) }
func (gdClass KinematicCollision3D) GetLocalShape(collision_index int64) Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision3D[7], &collision_index) }
func (gdClass KinematicCollision3D) GetCollider(collision_index int64) Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision3D[8], &collision_index) }
func (gdClass KinematicCollision3D) GetColliderId(collision_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodKinematicCollision3D[9], &collision_index) }
func (gdClass KinematicCollision3D) GetColliderRid(collision_index int64) RID { return methodCall[RID](gdClass.obj.get(), methodKinematicCollision3D[10], &collision_index) }
func (gdClass KinematicCollision3D) GetColliderShape(collision_index int64) Object { return methodCall[Object](gdClass.obj.get(), methodKinematicCollision3D[11], &collision_index) }
func (gdClass KinematicCollision3D) GetColliderShapeIndex(collision_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodKinematicCollision3D[12], &collision_index) }
func (gdClass KinematicCollision3D) GetColliderVelocity(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodKinematicCollision3D[13], &collision_index) }

type Label struct{self *Label; obj safeObject }
func NewLabel(ctx Context, at *Label) Label { if at == nil { at = new(Label) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Label) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Label) owner() cObject { return gdClass.obj.get() }
func (Label) class() string { return "Label\000" }

func (gdClass Label) Control() Control { return Control{obj:gdClass.obj} }

var methodLabel [38]cMethodBind
func (gdClass Label) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass Label) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[0], &alignment) }
func (gdClass Label) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodLabel[1]) }
func (gdClass Label) SetVerticalAlignment(alignment VerticalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[2], &alignment) }
func (gdClass Label) GetVerticalAlignment() VerticalAlignment { return methodCall[VerticalAlignment](gdClass.obj.get(), methodLabel[3]) }
func (gdClass Label) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[4], &text) }
func (gdClass Label) GetText() string { return methodCall[string](gdClass.obj.get(), methodLabel[5]) }
func (gdClass Label) SetLabelSettings(settings LabelSettings)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[6], &settings) }
func (gdClass Label) GetLabelSettings() LabelSettings { return methodCall[LabelSettings](gdClass.obj.get(), methodLabel[7]) }
func (gdClass Label) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[8], &direction) }
func (gdClass Label) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodLabel[9]) }
func (gdClass Label) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[10], &language) }
func (gdClass Label) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodLabel[11]) }
func (gdClass Label) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[12], &autowrap_mode) }
func (gdClass Label) GetAutowrapMode() TextServerAutowrapMode { return methodCall[TextServerAutowrapMode](gdClass.obj.get(), methodLabel[13]) }
func (gdClass Label) SetClipText(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[14], &enable) }
func (gdClass Label) IsClippingText() bool { return methodCall[bool](gdClass.obj.get(), methodLabel[15]) }
func (gdClass Label) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[16], &overrun_behavior) }
func (gdClass Label) GetTextOverrunBehavior() TextServerOverrunBehavior { return methodCall[TextServerOverrunBehavior](gdClass.obj.get(), methodLabel[17]) }
func (gdClass Label) SetUppercase(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[18], &enable) }
func (gdClass Label) IsUppercase() bool { return methodCall[bool](gdClass.obj.get(), methodLabel[19]) }
func (gdClass Label) GetLineHeight(line int64) int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[20], &line) }
func (gdClass Label) GetLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[21]) }
func (gdClass Label) GetVisibleLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[22]) }
func (gdClass Label) GetTotalCharacterCount() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[23]) }
func (gdClass Label) SetVisibleCharacters(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[24], &amount) }
func (gdClass Label) GetVisibleCharacters() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[25]) }
func (gdClass Label) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return methodCall[TextServerVisibleCharactersBehavior](gdClass.obj.get(), methodLabel[26]) }
func (gdClass Label) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[27], &behavior) }
func (gdClass Label) SetVisibleRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[28], &ratio) }
func (gdClass Label) GetVisibleRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodLabel[29]) }
func (gdClass Label) SetLinesSkipped(lines_skipped int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[30], &lines_skipped) }
func (gdClass Label) GetLinesSkipped() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[31]) }
func (gdClass Label) SetMaxLinesVisible(lines_visible int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[32], &lines_visible) }
func (gdClass Label) GetMaxLinesVisible() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel[33]) }
func (gdClass Label) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[34], &parser) }
func (gdClass Label) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodLabel[35]) }
func (gdClass Label) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodLabel[36], &args) }
func (gdClass Label) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodLabel[37]) }

type Label3DDrawFlags int64

const (
	Label3DFlagShaded Label3DDrawFlags = 0
	Label3DFlagDoubleSided Label3DDrawFlags = 1
	Label3DFlagDisableDepthTest Label3DDrawFlags = 2
	Label3DFlagFixedSize Label3DDrawFlags = 3
	Label3DFlagMax Label3DDrawFlags = 4
)

type Label3DAlphaCutMode int64

const (
	Label3DAlphaCutDisabled Label3DAlphaCutMode = 0
	Label3DAlphaCutDiscard Label3DAlphaCutMode = 1
	Label3DAlphaCutOpaquePrepass Label3DAlphaCutMode = 2
)

type Label3D struct{self *Label3D; obj safeObject }
func NewLabel3D(ctx Context, at *Label3D) Label3D { if at == nil { at = new(Label3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Label3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Label3D) owner() cObject { return gdClass.obj.get() }
func (Label3D) class() string { return "Label3D\000" }

func (gdClass Label3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodLabel3D [51]cMethodBind
func (gdClass Label3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass Label3D) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[0], &alignment) }
func (gdClass Label3D) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodLabel3D[1]) }
func (gdClass Label3D) SetVerticalAlignment(alignment VerticalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[2], &alignment) }
func (gdClass Label3D) GetVerticalAlignment() VerticalAlignment { return methodCall[VerticalAlignment](gdClass.obj.get(), methodLabel3D[3]) }
func (gdClass Label3D) SetModulate(modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[4], &modulate) }
func (gdClass Label3D) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodLabel3D[5]) }
func (gdClass Label3D) SetOutlineModulate(modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[6], &modulate) }
func (gdClass Label3D) GetOutlineModulate() Color { return methodCall[Color](gdClass.obj.get(), methodLabel3D[7]) }
func (gdClass Label3D) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[8], &text) }
func (gdClass Label3D) GetText() string { return methodCall[string](gdClass.obj.get(), methodLabel3D[9]) }
func (gdClass Label3D) SetTextDirection(direction TextServerDirection)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[10], &direction) }
func (gdClass Label3D) GetTextDirection() TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodLabel3D[11]) }
func (gdClass Label3D) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[12], &language) }
func (gdClass Label3D) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodLabel3D[13]) }
func (gdClass Label3D) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[14], &parser) }
func (gdClass Label3D) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodLabel3D[15]) }
func (gdClass Label3D) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[16], &args) }
func (gdClass Label3D) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodLabel3D[17]) }
func (gdClass Label3D) SetUppercase(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[18], &enable) }
func (gdClass Label3D) IsUppercase() bool { return methodCall[bool](gdClass.obj.get(), methodLabel3D[19]) }
func (gdClass Label3D) SetRenderPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[20], &priority) }
func (gdClass Label3D) GetRenderPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel3D[21]) }
func (gdClass Label3D) SetOutlineRenderPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[22], &priority) }
func (gdClass Label3D) GetOutlineRenderPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel3D[23]) }
func (gdClass Label3D) SetFont(font Font)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[24], &font) }
func (gdClass Label3D) GetFont() Font { return methodCall[Font](gdClass.obj.get(), methodLabel3D[25]) }
func (gdClass Label3D) SetFontSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[26], &size) }
func (gdClass Label3D) GetFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel3D[27]) }
func (gdClass Label3D) SetOutlineSize(outline_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[28], &outline_size) }
func (gdClass Label3D) GetOutlineSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLabel3D[29]) }
func (gdClass Label3D) SetLineSpacing(line_spacing float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[30], &line_spacing) }
func (gdClass Label3D) GetLineSpacing() float64 { return methodCall[float64](gdClass.obj.get(), methodLabel3D[31]) }
func (gdClass Label3D) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[32], &autowrap_mode) }
func (gdClass Label3D) GetAutowrapMode() TextServerAutowrapMode { return methodCall[TextServerAutowrapMode](gdClass.obj.get(), methodLabel3D[33]) }
func (gdClass Label3D) SetWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[34], &width) }
func (gdClass Label3D) GetWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodLabel3D[35]) }
func (gdClass Label3D) SetPixelSize(pixel_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[36], &pixel_size) }
func (gdClass Label3D) GetPixelSize() float64 { return methodCall[float64](gdClass.obj.get(), methodLabel3D[37]) }
func (gdClass Label3D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[38], &offset) }
func (gdClass Label3D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodLabel3D[39]) }
func (gdClass Label3D) SetDrawFlag(flag Label3DDrawFlags, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[40], &flag, &enabled) }
func (gdClass Label3D) GetDrawFlag(flag Label3DDrawFlags) bool { return methodCall[bool](gdClass.obj.get(), methodLabel3D[41], &flag) }
func (gdClass Label3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[42], &mode) }
func (gdClass Label3D) GetBillboardMode() BaseMaterial3DBillboardMode { return methodCall[BaseMaterial3DBillboardMode](gdClass.obj.get(), methodLabel3D[43]) }
func (gdClass Label3D) SetAlphaCutMode(mode Label3DAlphaCutMode)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[44], &mode) }
func (gdClass Label3D) GetAlphaCutMode() Label3DAlphaCutMode { return methodCall[Label3DAlphaCutMode](gdClass.obj.get(), methodLabel3D[45]) }
func (gdClass Label3D) SetAlphaScissorThreshold(threshold float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[46], &threshold) }
func (gdClass Label3D) GetAlphaScissorThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodLabel3D[47]) }
func (gdClass Label3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodLabel3D[48], &mode) }
func (gdClass Label3D) GetTextureFilter() BaseMaterial3DTextureFilter { return methodCall[BaseMaterial3DTextureFilter](gdClass.obj.get(), methodLabel3D[49]) }
func (gdClass Label3D) GenerateTriangleMesh() TriangleMesh { return methodCall[TriangleMesh](gdClass.obj.get(), methodLabel3D[50]) }

type LabelSettings struct{self *LabelSettings; obj safeObject }
func NewLabelSettings(ctx Context, at *LabelSettings) LabelSettings { if at == nil { at = new(LabelSettings) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass LabelSettings) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LabelSettings) owner() cObject { return gdClass.obj.get() }
func (LabelSettings) class() string { return "LabelSettings\000" }

func (gdClass LabelSettings) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodLabelSettings [18]cMethodBind
func (gdClass LabelSettings) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass LabelSettings) SetLineSpacing(spacing float64)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[0], &spacing) }
func (gdClass LabelSettings) GetLineSpacing() float64 { return methodCall[float64](gdClass.obj.get(), methodLabelSettings[1]) }
func (gdClass LabelSettings) SetFont(font Font)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[2], &font) }
func (gdClass LabelSettings) GetFont() Font { return methodCall[Font](gdClass.obj.get(), methodLabelSettings[3]) }
func (gdClass LabelSettings) SetFontSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[4], &size) }
func (gdClass LabelSettings) GetFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLabelSettings[5]) }
func (gdClass LabelSettings) SetFontColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[6], &color) }
func (gdClass LabelSettings) GetFontColor() Color { return methodCall[Color](gdClass.obj.get(), methodLabelSettings[7]) }
func (gdClass LabelSettings) SetOutlineSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[8], &size) }
func (gdClass LabelSettings) GetOutlineSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLabelSettings[9]) }
func (gdClass LabelSettings) SetOutlineColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[10], &color) }
func (gdClass LabelSettings) GetOutlineColor() Color { return methodCall[Color](gdClass.obj.get(), methodLabelSettings[11]) }
func (gdClass LabelSettings) SetShadowSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[12], &size) }
func (gdClass LabelSettings) GetShadowSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLabelSettings[13]) }
func (gdClass LabelSettings) SetShadowColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[14], &color) }
func (gdClass LabelSettings) GetShadowColor() Color { return methodCall[Color](gdClass.obj.get(), methodLabelSettings[15]) }
func (gdClass LabelSettings) SetShadowOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodLabelSettings[16], &offset) }
func (gdClass LabelSettings) GetShadowOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodLabelSettings[17]) }

type Light2DShadowFilter int64

const (
	Light2DShadowFilterNone Light2DShadowFilter = 0
	Light2DShadowFilterPcf5 Light2DShadowFilter = 1
	Light2DShadowFilterPcf13 Light2DShadowFilter = 2
)

type Light2DBlendMode int64

const (
	Light2DBlendModeAdd Light2DBlendMode = 0
	Light2DBlendModeSub Light2DBlendMode = 1
	Light2DBlendModeMix Light2DBlendMode = 2
)

type Light2D struct{self *Light2D; obj safeObject }
func NewLight2D(ctx Context, at *Light2D) Light2D { if at == nil { at = new(Light2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Light2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Light2D) owner() cObject { return gdClass.obj.get() }
func (Light2D) class() string { return "Light2D\000" }

func (gdClass Light2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodLight2D [32]cMethodBind
func (gdClass Light2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Light2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[0], &enabled) }
func (gdClass Light2D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLight2D[1]) }
func (gdClass Light2D) SetEditorOnly(editor_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[2], &editor_only) }
func (gdClass Light2D) IsEditorOnly() bool { return methodCall[bool](gdClass.obj.get(), methodLight2D[3]) }
func (gdClass Light2D) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[4], &color) }
func (gdClass Light2D) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodLight2D[5]) }
func (gdClass Light2D) SetEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[6], &energy) }
func (gdClass Light2D) GetEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodLight2D[7]) }
func (gdClass Light2D) SetZRangeMin(z int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[8], &z) }
func (gdClass Light2D) GetZRangeMin() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[9]) }
func (gdClass Light2D) SetZRangeMax(z int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[10], &z) }
func (gdClass Light2D) GetZRangeMax() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[11]) }
func (gdClass Light2D) SetLayerRangeMin(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[12], &layer) }
func (gdClass Light2D) GetLayerRangeMin() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[13]) }
func (gdClass Light2D) SetLayerRangeMax(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[14], &layer) }
func (gdClass Light2D) GetLayerRangeMax() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[15]) }
func (gdClass Light2D) SetItemCullMask(item_cull_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[16], &item_cull_mask) }
func (gdClass Light2D) GetItemCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[17]) }
func (gdClass Light2D) SetItemShadowCullMask(item_shadow_cull_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[18], &item_shadow_cull_mask) }
func (gdClass Light2D) GetItemShadowCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodLight2D[19]) }
func (gdClass Light2D) SetShadowEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[20], &enabled) }
func (gdClass Light2D) IsShadowEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLight2D[21]) }
func (gdClass Light2D) SetShadowSmooth(smooth float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[22], &smooth) }
func (gdClass Light2D) GetShadowSmooth() float64 { return methodCall[float64](gdClass.obj.get(), methodLight2D[23]) }
func (gdClass Light2D) SetShadowFilter(filter Light2DShadowFilter)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[24], &filter) }
func (gdClass Light2D) GetShadowFilter() Light2DShadowFilter { return methodCall[Light2DShadowFilter](gdClass.obj.get(), methodLight2D[25]) }
func (gdClass Light2D) SetShadowColor(shadow_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[26], &shadow_color) }
func (gdClass Light2D) GetShadowColor() Color { return methodCall[Color](gdClass.obj.get(), methodLight2D[27]) }
func (gdClass Light2D) SetBlendMode(mode Light2DBlendMode)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[28], &mode) }
func (gdClass Light2D) GetBlendMode() Light2DBlendMode { return methodCall[Light2DBlendMode](gdClass.obj.get(), methodLight2D[29]) }
func (gdClass Light2D) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight2D[30], &height) }
func (gdClass Light2D) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodLight2D[31]) }

type Light3DParam int64

const (
	Light3DParamEnergy Light3DParam = 0
	Light3DParamIndirectEnergy Light3DParam = 1
	Light3DParamSpecular Light3DParam = 2
	Light3DParamRange Light3DParam = 3
	Light3DParamSize Light3DParam = 4
	Light3DParamAttenuation Light3DParam = 5
	Light3DParamSpotAngle Light3DParam = 6
	Light3DParamSpotAttenuation Light3DParam = 7
	Light3DParamShadowMaxDistance Light3DParam = 8
	Light3DParamShadowSplit1Offset Light3DParam = 9
	Light3DParamShadowSplit2Offset Light3DParam = 10
	Light3DParamShadowSplit3Offset Light3DParam = 11
	Light3DParamShadowFadeStart Light3DParam = 12
	Light3DParamShadowNormalBias Light3DParam = 13
	Light3DParamShadowBias Light3DParam = 14
	Light3DParamShadowPancakeSize Light3DParam = 15
	Light3DParamShadowOpacity Light3DParam = 16
	Light3DParamShadowBlur Light3DParam = 17
	Light3DParamShadowVolumetricFogFade Light3DParam = 18
	Light3DParamTransmittanceBias Light3DParam = 19
	Light3DParamMax Light3DParam = 20
)

type Light3DBakeMode int64

const (
	Light3DBakeDisabled Light3DBakeMode = 0
	Light3DBakeStatic Light3DBakeMode = 1
	Light3DBakeDynamic Light3DBakeMode = 2
)

type Light3D struct{self *Light3D; obj safeObject }
func NewLight3D(ctx Context, at *Light3D) Light3D { if at == nil { at = new(Light3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Light3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Light3D) owner() cObject { return gdClass.obj.get() }
func (Light3D) class() string { return "Light3D\000" }

func (gdClass Light3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodLight3D [26]cMethodBind
func (gdClass Light3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass Light3D) SetEditorOnly(editor_only bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[0], &editor_only) }
func (gdClass Light3D) IsEditorOnly() bool { return methodCall[bool](gdClass.obj.get(), methodLight3D[1]) }
func (gdClass Light3D) SetParam(param Light3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[2], &param, &value) }
func (gdClass Light3D) GetParam(param Light3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodLight3D[3], &param) }
func (gdClass Light3D) SetShadow(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[4], &enabled) }
func (gdClass Light3D) HasShadow() bool { return methodCall[bool](gdClass.obj.get(), methodLight3D[5]) }
func (gdClass Light3D) SetNegative(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[6], &enabled) }
func (gdClass Light3D) IsNegative() bool { return methodCall[bool](gdClass.obj.get(), methodLight3D[7]) }
func (gdClass Light3D) SetCullMask(cull_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[8], &cull_mask) }
func (gdClass Light3D) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodLight3D[9]) }
func (gdClass Light3D) SetEnableDistanceFade(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[10], &enable) }
func (gdClass Light3D) IsDistanceFadeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLight3D[11]) }
func (gdClass Light3D) SetDistanceFadeBegin(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[12], &distance) }
func (gdClass Light3D) GetDistanceFadeBegin() float64 { return methodCall[float64](gdClass.obj.get(), methodLight3D[13]) }
func (gdClass Light3D) SetDistanceFadeShadow(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[14], &distance) }
func (gdClass Light3D) GetDistanceFadeShadow() float64 { return methodCall[float64](gdClass.obj.get(), methodLight3D[15]) }
func (gdClass Light3D) SetDistanceFadeLength(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[16], &distance) }
func (gdClass Light3D) GetDistanceFadeLength() float64 { return methodCall[float64](gdClass.obj.get(), methodLight3D[17]) }
func (gdClass Light3D) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[18], &color) }
func (gdClass Light3D) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodLight3D[19]) }
func (gdClass Light3D) SetShadowReverseCullFace(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[20], &enable) }
func (gdClass Light3D) GetShadowReverseCullFace() bool { return methodCall[bool](gdClass.obj.get(), methodLight3D[21]) }
func (gdClass Light3D) SetBakeMode(bake_mode Light3DBakeMode)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[22], &bake_mode) }
func (gdClass Light3D) GetBakeMode() Light3DBakeMode { return methodCall[Light3DBakeMode](gdClass.obj.get(), methodLight3D[23]) }
func (gdClass Light3D) SetProjector(projector Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodLight3D[24], &projector) }
func (gdClass Light3D) GetProjector() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodLight3D[25]) }

type LightOccluder2D struct{self *LightOccluder2D; obj safeObject }
func NewLightOccluder2D(ctx Context, at *LightOccluder2D) LightOccluder2D { if at == nil { at = new(LightOccluder2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass LightOccluder2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LightOccluder2D) owner() cObject { return gdClass.obj.get() }
func (LightOccluder2D) class() string { return "LightOccluder2D\000" }

func (gdClass LightOccluder2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodLightOccluder2D [6]cMethodBind
func (gdClass LightOccluder2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass LightOccluder2D) SetOccluderPolygon(polygon OccluderPolygon2D)  { methodCall[struct{}](gdClass.obj.get(), methodLightOccluder2D[0], &polygon) }
func (gdClass LightOccluder2D) GetOccluderPolygon() OccluderPolygon2D { return methodCall[OccluderPolygon2D](gdClass.obj.get(), methodLightOccluder2D[1]) }
func (gdClass LightOccluder2D) SetOccluderLightMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodLightOccluder2D[2], &mask) }
func (gdClass LightOccluder2D) GetOccluderLightMask() int64 { return methodCall[int64](gdClass.obj.get(), methodLightOccluder2D[3]) }
func (gdClass LightOccluder2D) SetAsSdfCollision(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLightOccluder2D[4], &enable) }
func (gdClass LightOccluder2D) IsSetAsSdfCollision() bool { return methodCall[bool](gdClass.obj.get(), methodLightOccluder2D[5]) }

type LightmapGIBakeQuality int64

const (
	LightmapGIBakeQualityLow LightmapGIBakeQuality = 0
	LightmapGIBakeQualityMedium LightmapGIBakeQuality = 1
	LightmapGIBakeQualityHigh LightmapGIBakeQuality = 2
	LightmapGIBakeQualityUltra LightmapGIBakeQuality = 3
)

type LightmapGIGenerateProbes int64

const (
	LightmapGIGenerateProbesDisabled LightmapGIGenerateProbes = 0
	LightmapGIGenerateProbesSubdiv4 LightmapGIGenerateProbes = 1
	LightmapGIGenerateProbesSubdiv8 LightmapGIGenerateProbes = 2
	LightmapGIGenerateProbesSubdiv16 LightmapGIGenerateProbes = 3
	LightmapGIGenerateProbesSubdiv32 LightmapGIGenerateProbes = 4
)

type LightmapGIBakeError int64

const (
	LightmapGIBakeErrorOk LightmapGIBakeError = 0
	LightmapGIBakeErrorNoLightmapper LightmapGIBakeError = 1
	LightmapGIBakeErrorNoSavePath LightmapGIBakeError = 2
	LightmapGIBakeErrorNoMeshes LightmapGIBakeError = 3
	LightmapGIBakeErrorMeshesInvalid LightmapGIBakeError = 4
	LightmapGIBakeErrorCantCreateImage LightmapGIBakeError = 5
	LightmapGIBakeErrorUserAborted LightmapGIBakeError = 6
)

type LightmapGIEnvironmentMode int64

const (
	LightmapGIEnvironmentModeDisabled LightmapGIEnvironmentMode = 0
	LightmapGIEnvironmentModeScene LightmapGIEnvironmentMode = 1
	LightmapGIEnvironmentModeCustomSky LightmapGIEnvironmentMode = 2
	LightmapGIEnvironmentModeCustomColor LightmapGIEnvironmentMode = 3
)

type LightmapGI struct{self *LightmapGI; obj safeObject }
func NewLightmapGI(ctx Context, at *LightmapGI) LightmapGI { if at == nil { at = new(LightmapGI) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass LightmapGI) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LightmapGI) owner() cObject { return gdClass.obj.get() }
func (LightmapGI) class() string { return "LightmapGI\000" }

func (gdClass LightmapGI) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodLightmapGI [26]cMethodBind
func (gdClass LightmapGI) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass LightmapGI) SetLightData(data LightmapGIData)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[0], &data) }
func (gdClass LightmapGI) GetLightData() LightmapGIData { return methodCall[LightmapGIData](gdClass.obj.get(), methodLightmapGI[1]) }
func (gdClass LightmapGI) SetBakeQuality(bake_quality LightmapGIBakeQuality)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[2], &bake_quality) }
func (gdClass LightmapGI) GetBakeQuality() LightmapGIBakeQuality { return methodCall[LightmapGIBakeQuality](gdClass.obj.get(), methodLightmapGI[3]) }
func (gdClass LightmapGI) SetBounces(bounces int64)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[4], &bounces) }
func (gdClass LightmapGI) GetBounces() int64 { return methodCall[int64](gdClass.obj.get(), methodLightmapGI[5]) }
func (gdClass LightmapGI) SetGenerateProbes(subdivision LightmapGIGenerateProbes)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[6], &subdivision) }
func (gdClass LightmapGI) GetGenerateProbes() LightmapGIGenerateProbes { return methodCall[LightmapGIGenerateProbes](gdClass.obj.get(), methodLightmapGI[7]) }
func (gdClass LightmapGI) SetBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[8], &bias) }
func (gdClass LightmapGI) GetBias() float64 { return methodCall[float64](gdClass.obj.get(), methodLightmapGI[9]) }
func (gdClass LightmapGI) SetEnvironmentMode(mode LightmapGIEnvironmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[10], &mode) }
func (gdClass LightmapGI) GetEnvironmentMode() LightmapGIEnvironmentMode { return methodCall[LightmapGIEnvironmentMode](gdClass.obj.get(), methodLightmapGI[11]) }
func (gdClass LightmapGI) SetEnvironmentCustomSky(sky Sky)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[12], &sky) }
func (gdClass LightmapGI) GetEnvironmentCustomSky() Sky { return methodCall[Sky](gdClass.obj.get(), methodLightmapGI[13]) }
func (gdClass LightmapGI) SetEnvironmentCustomColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[14], &color) }
func (gdClass LightmapGI) GetEnvironmentCustomColor() Color { return methodCall[Color](gdClass.obj.get(), methodLightmapGI[15]) }
func (gdClass LightmapGI) SetEnvironmentCustomEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[16], &energy) }
func (gdClass LightmapGI) GetEnvironmentCustomEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodLightmapGI[17]) }
func (gdClass LightmapGI) SetMaxTextureSize(max_texture_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[18], &max_texture_size) }
func (gdClass LightmapGI) GetMaxTextureSize() int64 { return methodCall[int64](gdClass.obj.get(), methodLightmapGI[19]) }
func (gdClass LightmapGI) SetUseDenoiser(use_denoiser bool)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[20], &use_denoiser) }
func (gdClass LightmapGI) IsUsingDenoiser() bool { return methodCall[bool](gdClass.obj.get(), methodLightmapGI[21]) }
func (gdClass LightmapGI) SetInterior(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[22], &enable) }
func (gdClass LightmapGI) IsInterior() bool { return methodCall[bool](gdClass.obj.get(), methodLightmapGI[23]) }
func (gdClass LightmapGI) SetDirectional(directional bool)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGI[24], &directional) }
func (gdClass LightmapGI) IsDirectional() bool { return methodCall[bool](gdClass.obj.get(), methodLightmapGI[25]) }

type LightmapGIData struct{self *LightmapGIData; obj safeObject }
func NewLightmapGIData(ctx Context, at *LightmapGIData) LightmapGIData { if at == nil { at = new(LightmapGIData) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass LightmapGIData) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LightmapGIData) owner() cObject { return gdClass.obj.get() }
func (LightmapGIData) class() string { return "LightmapGIData\000" }

func (gdClass LightmapGIData) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodLightmapGIData [8]cMethodBind
func (gdClass LightmapGIData) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass LightmapGIData) SetLightTexture(light_texture TextureLayered)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGIData[0], &light_texture) }
func (gdClass LightmapGIData) GetLightTexture() TextureLayered { return methodCall[TextureLayered](gdClass.obj.get(), methodLightmapGIData[1]) }
func (gdClass LightmapGIData) SetUsesSphericalHarmonics(uses_spherical_harmonics bool)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGIData[2], &uses_spherical_harmonics) }
func (gdClass LightmapGIData) IsUsingSphericalHarmonics() bool { return methodCall[bool](gdClass.obj.get(), methodLightmapGIData[3]) }
func (gdClass LightmapGIData) AddUser(path NodePath, uv_scale Rect2, slice_index int64, sub_instance int64)  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGIData[4], &path, &uv_scale, &slice_index, &sub_instance) }
func (gdClass LightmapGIData) GetUserCount() int64 { return methodCall[int64](gdClass.obj.get(), methodLightmapGIData[5]) }
func (gdClass LightmapGIData) GetUserPath(user_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodLightmapGIData[6], &user_idx) }
func (gdClass LightmapGIData) ClearUsers()  { methodCall[struct{}](gdClass.obj.get(), methodLightmapGIData[7]) }

type LightmapProbe struct{self *LightmapProbe; obj safeObject }
func NewLightmapProbe(ctx Context, at *LightmapProbe) LightmapProbe { if at == nil { at = new(LightmapProbe) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass LightmapProbe) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LightmapProbe) owner() cObject { return gdClass.obj.get() }
func (LightmapProbe) class() string { return "LightmapProbe\000" }

func (gdClass LightmapProbe) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

func (gdClass LightmapProbe) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}

type Lightmapper struct{self *Lightmapper; obj safeObject }
func NewLightmapper(ctx Context, at *Lightmapper) Lightmapper { if at == nil { at = new(Lightmapper) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Lightmapper) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Lightmapper) owner() cObject { return gdClass.obj.get() }
func (Lightmapper) class() string { return "Lightmapper\000" }

func (gdClass Lightmapper) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass Lightmapper) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type LightmapperRD struct{self *LightmapperRD; obj safeObject }
func NewLightmapperRD(ctx Context, at *LightmapperRD) LightmapperRD { if at == nil { at = new(LightmapperRD) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass LightmapperRD) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LightmapperRD) owner() cObject { return gdClass.obj.get() }
func (LightmapperRD) class() string { return "LightmapperRD\000" }

func (gdClass LightmapperRD) Lightmapper() Lightmapper { return Lightmapper{obj:gdClass.obj} }

func (gdClass LightmapperRD) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Lightmapper().virtual(rtype, name)
}

type Line2DLineJointMode int64

const (
	Line2DLineJointSharp Line2DLineJointMode = 0
	Line2DLineJointBevel Line2DLineJointMode = 1
	Line2DLineJointRound Line2DLineJointMode = 2
)

type Line2DLineCapMode int64

const (
	Line2DLineCapNone Line2DLineCapMode = 0
	Line2DLineCapBox Line2DLineCapMode = 1
	Line2DLineCapRound Line2DLineCapMode = 2
)

type Line2DLineTextureMode int64

const (
	Line2DLineTextureNone Line2DLineTextureMode = 0
	Line2DLineTextureTile Line2DLineTextureMode = 1
	Line2DLineTextureStretch Line2DLineTextureMode = 2
)

type Line2D struct{self *Line2D; obj safeObject }
func NewLine2D(ctx Context, at *Line2D) Line2D { if at == nil { at = new(Line2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Line2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Line2D) owner() cObject { return gdClass.obj.get() }
func (Line2D) class() string { return "Line2D\000" }

func (gdClass Line2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodLine2D [32]cMethodBind
func (gdClass Line2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Line2D) SetPoints(points []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[0], &points) }
func (gdClass Line2D) GetPoints() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodLine2D[1]) }
func (gdClass Line2D) SetPointPosition(index int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[2], &index, &position) }
func (gdClass Line2D) GetPointPosition(index int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodLine2D[3], &index) }
func (gdClass Line2D) GetPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodLine2D[4]) }
func (gdClass Line2D) AddPoint(position Vector2, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[5], &position, &index) }
func (gdClass Line2D) RemovePoint(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[6], &index) }
func (gdClass Line2D) ClearPoints()  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[7]) }
func (gdClass Line2D) SetWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[8], &width) }
func (gdClass Line2D) GetWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodLine2D[9]) }
func (gdClass Line2D) SetCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[10], &curve) }
func (gdClass Line2D) GetCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodLine2D[11]) }
func (gdClass Line2D) SetDefaultColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[12], &color) }
func (gdClass Line2D) GetDefaultColor() Color { return methodCall[Color](gdClass.obj.get(), methodLine2D[13]) }
func (gdClass Line2D) SetGradient(color Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[14], &color) }
func (gdClass Line2D) GetGradient() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodLine2D[15]) }
func (gdClass Line2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[16], &texture) }
func (gdClass Line2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodLine2D[17]) }
func (gdClass Line2D) SetTextureMode(mode Line2DLineTextureMode)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[18], &mode) }
func (gdClass Line2D) GetTextureMode() Line2DLineTextureMode { return methodCall[Line2DLineTextureMode](gdClass.obj.get(), methodLine2D[19]) }
func (gdClass Line2D) SetJointMode(mode Line2DLineJointMode)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[20], &mode) }
func (gdClass Line2D) GetJointMode() Line2DLineJointMode { return methodCall[Line2DLineJointMode](gdClass.obj.get(), methodLine2D[21]) }
func (gdClass Line2D) SetBeginCapMode(mode Line2DLineCapMode)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[22], &mode) }
func (gdClass Line2D) GetBeginCapMode() Line2DLineCapMode { return methodCall[Line2DLineCapMode](gdClass.obj.get(), methodLine2D[23]) }
func (gdClass Line2D) SetEndCapMode(mode Line2DLineCapMode)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[24], &mode) }
func (gdClass Line2D) GetEndCapMode() Line2DLineCapMode { return methodCall[Line2DLineCapMode](gdClass.obj.get(), methodLine2D[25]) }
func (gdClass Line2D) SetSharpLimit(limit float64)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[26], &limit) }
func (gdClass Line2D) GetSharpLimit() float64 { return methodCall[float64](gdClass.obj.get(), methodLine2D[27]) }
func (gdClass Line2D) SetRoundPrecision(precision int64)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[28], &precision) }
func (gdClass Line2D) GetRoundPrecision() int64 { return methodCall[int64](gdClass.obj.get(), methodLine2D[29]) }
func (gdClass Line2D) SetAntialiased(antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodLine2D[30], &antialiased) }
func (gdClass Line2D) GetAntialiased() bool { return methodCall[bool](gdClass.obj.get(), methodLine2D[31]) }

type LineEditMenuItems int64

const (
	LineEditMenuCut LineEditMenuItems = 0
	LineEditMenuCopy LineEditMenuItems = 1
	LineEditMenuPaste LineEditMenuItems = 2
	LineEditMenuClear LineEditMenuItems = 3
	LineEditMenuSelectAll LineEditMenuItems = 4
	LineEditMenuUndo LineEditMenuItems = 5
	LineEditMenuRedo LineEditMenuItems = 6
	LineEditMenuDirInherited LineEditMenuItems = 7
	LineEditMenuDirAuto LineEditMenuItems = 8
	LineEditMenuDirLtr LineEditMenuItems = 9
	LineEditMenuDirRtl LineEditMenuItems = 10
	LineEditMenuDisplayUcc LineEditMenuItems = 11
	LineEditMenuInsertLrm LineEditMenuItems = 12
	LineEditMenuInsertRlm LineEditMenuItems = 13
	LineEditMenuInsertLre LineEditMenuItems = 14
	LineEditMenuInsertRle LineEditMenuItems = 15
	LineEditMenuInsertLro LineEditMenuItems = 16
	LineEditMenuInsertRlo LineEditMenuItems = 17
	LineEditMenuInsertPdf LineEditMenuItems = 18
	LineEditMenuInsertAlm LineEditMenuItems = 19
	LineEditMenuInsertLri LineEditMenuItems = 20
	LineEditMenuInsertRli LineEditMenuItems = 21
	LineEditMenuInsertFsi LineEditMenuItems = 22
	LineEditMenuInsertPdi LineEditMenuItems = 23
	LineEditMenuInsertZwj LineEditMenuItems = 24
	LineEditMenuInsertZwnj LineEditMenuItems = 25
	LineEditMenuInsertWj LineEditMenuItems = 26
	LineEditMenuInsertShy LineEditMenuItems = 27
	LineEditMenuMax LineEditMenuItems = 28
)

type LineEditVirtualKeyboardType int64

const (
	LineEditKeyboardTypeDefault LineEditVirtualKeyboardType = 0
	LineEditKeyboardTypeMultiline LineEditVirtualKeyboardType = 1
	LineEditKeyboardTypeNumber LineEditVirtualKeyboardType = 2
	LineEditKeyboardTypeNumberDecimal LineEditVirtualKeyboardType = 3
	LineEditKeyboardTypePhone LineEditVirtualKeyboardType = 4
	LineEditKeyboardTypeEmailAddress LineEditVirtualKeyboardType = 5
	LineEditKeyboardTypePassword LineEditVirtualKeyboardType = 6
	LineEditKeyboardTypeUrl LineEditVirtualKeyboardType = 7
)

type LineEdit struct{self *LineEdit; obj safeObject }
func NewLineEdit(ctx Context, at *LineEdit) LineEdit { if at == nil { at = new(LineEdit) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass LineEdit) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LineEdit) owner() cObject { return gdClass.obj.get() }
func (LineEdit) class() string { return "LineEdit\000" }

func (gdClass LineEdit) Control() Control { return Control{obj:gdClass.obj} }

var methodLineEdit [70]cMethodBind
func (gdClass LineEdit) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass LineEdit) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[0], &alignment) }
func (gdClass LineEdit) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodLineEdit[1]) }
func (gdClass LineEdit) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[2]) }
func (gdClass LineEdit) Select(from int64, to int64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[3], &from, &to) }
func (gdClass LineEdit) SelectAll()  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[4]) }
func (gdClass LineEdit) Deselect()  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[5]) }
func (gdClass LineEdit) HasSelection() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[6]) }
func (gdClass LineEdit) GetSelectionFromColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodLineEdit[7]) }
func (gdClass LineEdit) GetSelectionToColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodLineEdit[8]) }
func (gdClass LineEdit) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[9], &text) }
func (gdClass LineEdit) GetText() string { return methodCall[string](gdClass.obj.get(), methodLineEdit[10]) }
func (gdClass LineEdit) GetDrawControlChars() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[11]) }
func (gdClass LineEdit) SetDrawControlChars(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[12], &enable) }
func (gdClass LineEdit) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[13], &direction) }
func (gdClass LineEdit) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodLineEdit[14]) }
func (gdClass LineEdit) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[15], &language) }
func (gdClass LineEdit) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodLineEdit[16]) }
func (gdClass LineEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[17], &parser) }
func (gdClass LineEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodLineEdit[18]) }
func (gdClass LineEdit) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[19], &args) }
func (gdClass LineEdit) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodLineEdit[20]) }
func (gdClass LineEdit) SetPlaceholder(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[21], &text) }
func (gdClass LineEdit) GetPlaceholder() string { return methodCall[string](gdClass.obj.get(), methodLineEdit[22]) }
func (gdClass LineEdit) SetCaretColumn(position int64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[23], &position) }
func (gdClass LineEdit) GetCaretColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodLineEdit[24]) }
func (gdClass LineEdit) GetScrollOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodLineEdit[25]) }
func (gdClass LineEdit) SetExpandToTextLengthEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[26], &enabled) }
func (gdClass LineEdit) IsExpandToTextLengthEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[27]) }
func (gdClass LineEdit) SetCaretBlinkEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[28], &enabled) }
func (gdClass LineEdit) IsCaretBlinkEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[29]) }
func (gdClass LineEdit) SetCaretMidGraphemeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[30], &enabled) }
func (gdClass LineEdit) IsCaretMidGraphemeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[31]) }
func (gdClass LineEdit) SetCaretForceDisplayed(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[32], &enabled) }
func (gdClass LineEdit) IsCaretForceDisplayed() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[33]) }
func (gdClass LineEdit) SetCaretBlinkSpeed(blink_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[34], &blink_speed) }
func (gdClass LineEdit) GetCaretBlinkSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodLineEdit[35]) }
func (gdClass LineEdit) SetMaxLength(chars int64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[36], &chars) }
func (gdClass LineEdit) GetMaxLength() int64 { return methodCall[int64](gdClass.obj.get(), methodLineEdit[37]) }
func (gdClass LineEdit) InsertTextAtCaret(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[38], &text) }
func (gdClass LineEdit) DeleteCharAtCaret()  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[39]) }
func (gdClass LineEdit) DeleteText(from_column int64, to_column int64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[40], &from_column, &to_column) }
func (gdClass LineEdit) SetEditable(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[41], &enabled) }
func (gdClass LineEdit) IsEditable() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[42]) }
func (gdClass LineEdit) SetSecret(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[43], &enabled) }
func (gdClass LineEdit) IsSecret() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[44]) }
func (gdClass LineEdit) SetSecretCharacter(character string)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[45], &character) }
func (gdClass LineEdit) GetSecretCharacter() string { return methodCall[string](gdClass.obj.get(), methodLineEdit[46]) }
func (gdClass LineEdit) MenuOption(option int64)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[47], &option) }
func (gdClass LineEdit) GetMenu() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodLineEdit[48]) }
func (gdClass LineEdit) IsMenuVisible() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[49]) }
func (gdClass LineEdit) SetContextMenuEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[50], &enable) }
func (gdClass LineEdit) IsContextMenuEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[51]) }
func (gdClass LineEdit) SetVirtualKeyboardEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[52], &enable) }
func (gdClass LineEdit) IsVirtualKeyboardEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[53]) }
func (gdClass LineEdit) SetVirtualKeyboardType(atype LineEditVirtualKeyboardType)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[54], &atype) }
func (gdClass LineEdit) GetVirtualKeyboardType() LineEditVirtualKeyboardType { return methodCall[LineEditVirtualKeyboardType](gdClass.obj.get(), methodLineEdit[55]) }
func (gdClass LineEdit) SetClearButtonEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[56], &enable) }
func (gdClass LineEdit) IsClearButtonEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[57]) }
func (gdClass LineEdit) SetShortcutKeysEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[58], &enable) }
func (gdClass LineEdit) IsShortcutKeysEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[59]) }
func (gdClass LineEdit) SetMiddleMousePasteEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[60], &enable) }
func (gdClass LineEdit) IsMiddleMousePasteEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[61]) }
func (gdClass LineEdit) SetSelectingEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[62], &enable) }
func (gdClass LineEdit) IsSelectingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[63]) }
func (gdClass LineEdit) SetDeselectOnFocusLossEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[64], &enable) }
func (gdClass LineEdit) IsDeselectOnFocusLossEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[65]) }
func (gdClass LineEdit) SetRightIcon(icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[66], &icon) }
func (gdClass LineEdit) GetRightIcon() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodLineEdit[67]) }
func (gdClass LineEdit) SetFlat(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodLineEdit[68], &enabled) }
func (gdClass LineEdit) IsFlat() bool { return methodCall[bool](gdClass.obj.get(), methodLineEdit[69]) }

type LinkButtonUnderlineMode int64

const (
	LinkButtonUnderlineModeAlways LinkButtonUnderlineMode = 0
	LinkButtonUnderlineModeOnHover LinkButtonUnderlineMode = 1
	LinkButtonUnderlineModeNever LinkButtonUnderlineMode = 2
)

type LinkButton struct{self *LinkButton; obj safeObject }
func NewLinkButton(ctx Context, at *LinkButton) LinkButton { if at == nil { at = new(LinkButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass LinkButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass LinkButton) owner() cObject { return gdClass.obj.get() }
func (LinkButton) class() string { return "LinkButton\000" }

func (gdClass LinkButton) BaseButton() BaseButton { return BaseButton{obj:gdClass.obj} }

var methodLinkButton [12]cMethodBind
func (gdClass LinkButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BaseButton().virtual(rtype, name)
}
func (gdClass LinkButton) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[0], &text) }
func (gdClass LinkButton) GetText() string { return methodCall[string](gdClass.obj.get(), methodLinkButton[1]) }
func (gdClass LinkButton) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[2], &direction) }
func (gdClass LinkButton) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodLinkButton[3]) }
func (gdClass LinkButton) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[4], &language) }
func (gdClass LinkButton) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodLinkButton[5]) }
func (gdClass LinkButton) SetUnderlineMode(underline_mode LinkButtonUnderlineMode)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[6], &underline_mode) }
func (gdClass LinkButton) GetUnderlineMode() LinkButtonUnderlineMode { return methodCall[LinkButtonUnderlineMode](gdClass.obj.get(), methodLinkButton[7]) }
func (gdClass LinkButton) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[8], &parser) }
func (gdClass LinkButton) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodLinkButton[9]) }
func (gdClass LinkButton) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodLinkButton[10], &args) }
func (gdClass LinkButton) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodLinkButton[11]) }

type MainLoop struct{self *MainLoop; obj safeObject }
func NewMainLoop(ctx Context, at *MainLoop) MainLoop { if at == nil { at = new(MainLoop) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MainLoop) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MainLoop) owner() cObject { return gdClass.obj.get() }
func (MainLoop) class() string { return "MainLoop\000" }

func (gdClass MainLoop) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass MainLoop) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_initialize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Initialize()  }{}).Elem()) {
			return rtype.MethodByName(`Initialize`)
		}
		return
	case "_physics_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ PhysicsProcess(delta float64) bool }{}).Elem()) {
			return rtype.MethodByName(`PhysicsProcess`)
		}
		return
	case "_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ Process(delta float64) bool }{}).Elem()) {
			return rtype.MethodByName(`Process`)
		}
		return
	case "_finalize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Finalize()  }{}).Elem()) {
			return rtype.MethodByName(`Finalize`)
		}
		return
	}
	return gdClass.Object().virtual(rtype, name)
}

type MarginContainer struct{self *MarginContainer; obj safeObject }
func NewMarginContainer(ctx Context, at *MarginContainer) MarginContainer { if at == nil { at = new(MarginContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MarginContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MarginContainer) owner() cObject { return gdClass.obj.get() }
func (MarginContainer) class() string { return "MarginContainer\000" }

func (gdClass MarginContainer) Container() Container { return Container{obj:gdClass.obj} }

func (gdClass MarginContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}

type Marker2D struct{self *Marker2D; obj safeObject }
func NewMarker2D(ctx Context, at *Marker2D) Marker2D { if at == nil { at = new(Marker2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Marker2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Marker2D) owner() cObject { return gdClass.obj.get() }
func (Marker2D) class() string { return "Marker2D\000" }

func (gdClass Marker2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodMarker2D [2]cMethodBind
func (gdClass Marker2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Marker2D) SetGizmoExtents(extents float64)  { methodCall[struct{}](gdClass.obj.get(), methodMarker2D[0], &extents) }
func (gdClass Marker2D) GetGizmoExtents() float64 { return methodCall[float64](gdClass.obj.get(), methodMarker2D[1]) }

type Marker3D struct{self *Marker3D; obj safeObject }
func NewMarker3D(ctx Context, at *Marker3D) Marker3D { if at == nil { at = new(Marker3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Marker3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Marker3D) owner() cObject { return gdClass.obj.get() }
func (Marker3D) class() string { return "Marker3D\000" }

func (gdClass Marker3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

func (gdClass Marker3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
var Marshalls MarshallsSingleton

type MarshallsSingleton struct{self *MarshallsSingleton; obj safeObject }
func NewMarshallsSingleton(ctx Context, at *MarshallsSingleton) MarshallsSingleton { if at == nil { at = new(MarshallsSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MarshallsSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MarshallsSingleton) owner() cObject { return gdClass.obj.get() }
func (MarshallsSingleton) class() string { return "MarshallsSingleton\000" }

func (gdClass MarshallsSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodMarshallsSingleton [6]cMethodBind
func (gdClass MarshallsSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass MarshallsSingleton) VariantToBase64(variant any, full_objects bool) string { return methodCall[string](gdClass.obj.get(), methodMarshallsSingleton[0], &variant, &full_objects) }
func (gdClass MarshallsSingleton) Base64ToVariant(base64_str string, allow_objects bool) any { return methodCall[any](gdClass.obj.get(), methodMarshallsSingleton[1], &base64_str, &allow_objects) }
func (gdClass MarshallsSingleton) RawToBase64(array []byte) string { return methodCall[string](gdClass.obj.get(), methodMarshallsSingleton[2], &array) }
func (gdClass MarshallsSingleton) Base64ToRaw(base64_str string) []byte { return methodCall[[]byte](gdClass.obj.get(), methodMarshallsSingleton[3], &base64_str) }
func (gdClass MarshallsSingleton) Utf8ToBase64(utf8_str string) string { return methodCall[string](gdClass.obj.get(), methodMarshallsSingleton[4], &utf8_str) }
func (gdClass MarshallsSingleton) Base64ToUtf8(base64_str string) string { return methodCall[string](gdClass.obj.get(), methodMarshallsSingleton[5], &base64_str) }

type Material struct{self *Material; obj safeObject }
func NewMaterial(ctx Context, at *Material) Material { if at == nil { at = new(Material) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Material) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Material) owner() cObject { return gdClass.obj.get() }
func (Material) class() string { return "Material\000" }

func (gdClass Material) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodMaterial [5]cMethodBind
func (gdClass Material) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_shader_rid":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetShaderRid() RID }{}).Elem()) {
			return rtype.MethodByName(`GetShaderRid`)
		}
		return
	case "_get_shader_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetShaderMode() ShaderMode }{}).Elem()) {
			return rtype.MethodByName(`GetShaderMode`)
		}
		return
	case "_can_do_next_pass":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanDoNextPass() bool }{}).Elem()) {
			return rtype.MethodByName(`CanDoNextPass`)
		}
		return
	case "_can_use_render_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanUseRenderPriority() bool }{}).Elem()) {
			return rtype.MethodByName(`CanUseRenderPriority`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Material) SetNextPass(next_pass Material)  { methodCall[struct{}](gdClass.obj.get(), methodMaterial[0], &next_pass) }
func (gdClass Material) GetNextPass() Material { return methodCall[Material](gdClass.obj.get(), methodMaterial[1]) }
func (gdClass Material) SetRenderPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodMaterial[2], &priority) }
func (gdClass Material) GetRenderPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodMaterial[3]) }
func (gdClass Material) InspectNativeShaderCode()  { methodCall[struct{}](gdClass.obj.get(), methodMaterial[4]) }

type MenuBar struct{self *MenuBar; obj safeObject }
func NewMenuBar(ctx Context, at *MenuBar) MenuBar { if at == nil { at = new(MenuBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MenuBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MenuBar) owner() cObject { return gdClass.obj.get() }
func (MenuBar) class() string { return "MenuBar\000" }

func (gdClass MenuBar) Control() Control { return Control{obj:gdClass.obj} }

var methodMenuBar [26]cMethodBind
func (gdClass MenuBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass MenuBar) SetSwitchOnHover(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[0], &enable) }
func (gdClass MenuBar) IsSwitchOnHover() bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[1]) }
func (gdClass MenuBar) SetDisableShortcuts(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[2], &disabled) }
func (gdClass MenuBar) SetPreferGlobalMenu(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[3], &enabled) }
func (gdClass MenuBar) IsPreferGlobalMenu() bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[4]) }
func (gdClass MenuBar) IsNativeMenu() bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[5]) }
func (gdClass MenuBar) GetMenuCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMenuBar[6]) }
func (gdClass MenuBar) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[7], &direction) }
func (gdClass MenuBar) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodMenuBar[8]) }
func (gdClass MenuBar) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[9], &language) }
func (gdClass MenuBar) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodMenuBar[10]) }
func (gdClass MenuBar) SetFlat(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[11], &enabled) }
func (gdClass MenuBar) IsFlat() bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[12]) }
func (gdClass MenuBar) SetStartIndex(enabled int64)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[13], &enabled) }
func (gdClass MenuBar) GetStartIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodMenuBar[14]) }
func (gdClass MenuBar) SetMenuTitle(menu int64, title string)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[15], &menu, &title) }
func (gdClass MenuBar) GetMenuTitle(menu int64) string { return methodCall[string](gdClass.obj.get(), methodMenuBar[16], &menu) }
func (gdClass MenuBar) SetMenuTooltip(menu int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[17], &menu, &tooltip) }
func (gdClass MenuBar) GetMenuTooltip(menu int64) string { return methodCall[string](gdClass.obj.get(), methodMenuBar[18], &menu) }
func (gdClass MenuBar) SetMenuDisabled(menu int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[19], &menu, &disabled) }
func (gdClass MenuBar) IsMenuDisabled(menu int64) bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[20], &menu) }
func (gdClass MenuBar) SetMenuHidden(menu int64, hidden bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[21], &menu, &hidden) }
func (gdClass MenuBar) IsMenuHidden(menu int64) bool { return methodCall[bool](gdClass.obj.get(), methodMenuBar[22], &menu) }
func (gdClass MenuBar) SetShortcutContext(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodMenuBar[23], &node) }
func (gdClass MenuBar) GetShortcutContext() Node { return methodCall[Node](gdClass.obj.get(), methodMenuBar[24]) }
func (gdClass MenuBar) GetMenuPopup(menu int64) PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodMenuBar[25], &menu) }

type MenuButton struct{self *MenuButton; obj safeObject }
func NewMenuButton(ctx Context, at *MenuButton) MenuButton { if at == nil { at = new(MenuButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MenuButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MenuButton) owner() cObject { return gdClass.obj.get() }
func (MenuButton) class() string { return "MenuButton\000" }

func (gdClass MenuButton) Button() Button { return Button{obj:gdClass.obj} }

var methodMenuButton [6]cMethodBind
func (gdClass MenuButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Button().virtual(rtype, name)
}
func (gdClass MenuButton) GetPopup() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodMenuButton[0]) }
func (gdClass MenuButton) SetSwitchOnHover(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuButton[1], &enable) }
func (gdClass MenuButton) IsSwitchOnHover() bool { return methodCall[bool](gdClass.obj.get(), methodMenuButton[2]) }
func (gdClass MenuButton) SetDisableShortcuts(disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodMenuButton[3], &disabled) }
func (gdClass MenuButton) SetItemCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodMenuButton[4], &count) }
func (gdClass MenuButton) GetItemCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMenuButton[5]) }

type MeshPrimitiveType int64

const (
	MeshPrimitivePoints MeshPrimitiveType = 0
	MeshPrimitiveLines MeshPrimitiveType = 1
	MeshPrimitiveLineStrip MeshPrimitiveType = 2
	MeshPrimitiveTriangles MeshPrimitiveType = 3
	MeshPrimitiveTriangleStrip MeshPrimitiveType = 4
)

type MeshArrayType int64

const (
	MeshArrayVertex MeshArrayType = 0
	MeshArrayNormal MeshArrayType = 1
	MeshArrayTangent MeshArrayType = 2
	MeshArrayColor MeshArrayType = 3
	MeshArrayTexUv MeshArrayType = 4
	MeshArrayTexUv2 MeshArrayType = 5
	MeshArrayCustom0 MeshArrayType = 6
	MeshArrayCustom1 MeshArrayType = 7
	MeshArrayCustom2 MeshArrayType = 8
	MeshArrayCustom3 MeshArrayType = 9
	MeshArrayBones MeshArrayType = 10
	MeshArrayWeights MeshArrayType = 11
	MeshArrayIndex MeshArrayType = 12
	MeshArrayMax MeshArrayType = 13
)

type MeshArrayCustomFormat int64

const (
	MeshArrayCustomRgba8Unorm MeshArrayCustomFormat = 0
	MeshArrayCustomRgba8Snorm MeshArrayCustomFormat = 1
	MeshArrayCustomRgHalf MeshArrayCustomFormat = 2
	MeshArrayCustomRgbaHalf MeshArrayCustomFormat = 3
	MeshArrayCustomRFloat MeshArrayCustomFormat = 4
	MeshArrayCustomRgFloat MeshArrayCustomFormat = 5
	MeshArrayCustomRgbFloat MeshArrayCustomFormat = 6
	MeshArrayCustomRgbaFloat MeshArrayCustomFormat = 7
	MeshArrayCustomMax MeshArrayCustomFormat = 8
)

type MeshArrayFormat int64

const (
	MeshArrayFormatVertex MeshArrayFormat = 1
	MeshArrayFormatNormal MeshArrayFormat = 2
	MeshArrayFormatTangent MeshArrayFormat = 4
	MeshArrayFormatColor MeshArrayFormat = 8
	MeshArrayFormatTexUv MeshArrayFormat = 16
	MeshArrayFormatTexUv2 MeshArrayFormat = 32
	MeshArrayFormatCustom0 MeshArrayFormat = 64
	MeshArrayFormatCustom1 MeshArrayFormat = 128
	MeshArrayFormatCustom2 MeshArrayFormat = 256
	MeshArrayFormatCustom3 MeshArrayFormat = 512
	MeshArrayFormatBones MeshArrayFormat = 1024
	MeshArrayFormatWeights MeshArrayFormat = 2048
	MeshArrayFormatIndex MeshArrayFormat = 4096
	MeshArrayFormatBlendShapeMask MeshArrayFormat = 7
	MeshArrayFormatCustomBase MeshArrayFormat = 13
	MeshArrayFormatCustomBits MeshArrayFormat = 3
	MeshArrayFormatCustom0Shift MeshArrayFormat = 13
	MeshArrayFormatCustom1Shift MeshArrayFormat = 16
	MeshArrayFormatCustom2Shift MeshArrayFormat = 19
	MeshArrayFormatCustom3Shift MeshArrayFormat = 22
	MeshArrayFormatCustomMask MeshArrayFormat = 7
	MeshArrayCompressFlagsBase MeshArrayFormat = 25
	MeshArrayFlagUse2dVertices MeshArrayFormat = 33554432
	MeshArrayFlagUseDynamicUpdate MeshArrayFormat = 67108864
	MeshArrayFlagUse8BoneWeights MeshArrayFormat = 134217728
)

type MeshBlendShapeMode int64

const (
	MeshBlendShapeModeNormalized MeshBlendShapeMode = 0
	MeshBlendShapeModeRelative MeshBlendShapeMode = 1
)

type Mesh struct{self *Mesh; obj safeObject }
func NewMesh(ctx Context, at *Mesh) Mesh { if at == nil { at = new(Mesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Mesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Mesh) owner() cObject { return gdClass.obj.get() }
func (Mesh) class() string { return "Mesh\000" }

func (gdClass Mesh) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodMesh [13]cMethodBind
func (gdClass Mesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_surface_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSurfaceCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetSurfaceCount`)
		}
		return
	case "_surface_get_array_len":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetArrayLen(index int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetArrayLen`)
		}
		return
	case "_surface_get_array_index_len":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetArrayIndexLen(index int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetArrayIndexLen`)
		}
		return
	case "_surface_get_arrays":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetArrays(index int64) Array }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetArrays`)
		}
		return
	case "_surface_get_blend_shape_arrays":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetBlendShapeArrays(index int64) Array }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetBlendShapeArrays`)
		}
		return
	case "_surface_get_lods":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetLods(index int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetLods`)
		}
		return
	case "_surface_get_format":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetFormat(index int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetFormat`)
		}
		return
	case "_surface_get_primitive_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetPrimitiveType(index int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetPrimitiveType`)
		}
		return
	case "_surface_set_material":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceSetMaterial(index int64, material Material)  }{}).Elem()) {
			return rtype.MethodByName(`SurfaceSetMaterial`)
		}
		return
	case "_surface_get_material":
		if rtype.Implements(reflect.TypeOf([0]interface{ SurfaceGetMaterial(index int64) Material }{}).Elem()) {
			return rtype.MethodByName(`SurfaceGetMaterial`)
		}
		return
	case "_get_blend_shape_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBlendShapeCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetBlendShapeCount`)
		}
		return
	case "_get_blend_shape_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBlendShapeName(index int64) Name }{}).Elem()) {
			return rtype.MethodByName(`GetBlendShapeName`)
		}
		return
	case "_set_blend_shape_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetBlendShapeName(index int64, name Name)  }{}).Elem()) {
			return rtype.MethodByName(`SetBlendShapeName`)
		}
		return
	case "_get_aabb":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAabb() AABB }{}).Elem()) {
			return rtype.MethodByName(`GetAabb`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Mesh) SetLightmapSizeHint(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodMesh[0], &size) }
func (gdClass Mesh) GetLightmapSizeHint() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodMesh[1]) }
func (gdClass Mesh) GetAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodMesh[2]) }
func (gdClass Mesh) GetSurfaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMesh[3]) }
func (gdClass Mesh) SurfaceGetArrays(surf_idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodMesh[4], &surf_idx) }
func (gdClass Mesh) SurfaceGetBlendShapeArrays(surf_idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodMesh[5], &surf_idx) }
func (gdClass Mesh) SurfaceSetMaterial(surf_idx int64, material Material)  { methodCall[struct{}](gdClass.obj.get(), methodMesh[6], &surf_idx, &material) }
func (gdClass Mesh) SurfaceGetMaterial(surf_idx int64) Material { return methodCall[Material](gdClass.obj.get(), methodMesh[7], &surf_idx) }
func (gdClass Mesh) CreateTrimeshShape() Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodMesh[8]) }
func (gdClass Mesh) CreateConvexShape(clean bool, simplify bool) Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodMesh[9], &clean, &simplify) }
func (gdClass Mesh) CreateOutline(margin float64) Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMesh[10], &margin) }
func (gdClass Mesh) GetFaces() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodMesh[11]) }
func (gdClass Mesh) GenerateTriangleMesh() TriangleMesh { return methodCall[TriangleMesh](gdClass.obj.get(), methodMesh[12]) }

type MeshDataTool struct{self *MeshDataTool; obj safeObject }
func NewMeshDataTool(ctx Context, at *MeshDataTool) MeshDataTool { if at == nil { at = new(MeshDataTool) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MeshDataTool) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MeshDataTool) owner() cObject { return gdClass.obj.get() }
func (MeshDataTool) class() string { return "MeshDataTool\000" }

func (gdClass MeshDataTool) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodMeshDataTool [38]cMethodBind
func (gdClass MeshDataTool) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass MeshDataTool) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[0]) }
func (gdClass MeshDataTool) CreateFromSurface(mesh ArrayMesh, surface int64) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[1], &mesh, &surface) }
func (gdClass MeshDataTool) CommitToSurface(mesh ArrayMesh) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[2], &mesh) }
func (gdClass MeshDataTool) GetFormat() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[3]) }
func (gdClass MeshDataTool) GetVertexCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[4]) }
func (gdClass MeshDataTool) GetEdgeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[5]) }
func (gdClass MeshDataTool) GetFaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[6]) }
func (gdClass MeshDataTool) SetVertex(idx int64, vertex Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[7], &idx, &vertex) }
func (gdClass MeshDataTool) GetVertex(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodMeshDataTool[8], &idx) }
func (gdClass MeshDataTool) SetVertexNormal(idx int64, normal Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[9], &idx, &normal) }
func (gdClass MeshDataTool) GetVertexNormal(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodMeshDataTool[10], &idx) }
func (gdClass MeshDataTool) SetVertexTangent(idx int64, tangent Plane)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[11], &idx, &tangent) }
func (gdClass MeshDataTool) GetVertexTangent(idx int64) Plane { return methodCall[Plane](gdClass.obj.get(), methodMeshDataTool[12], &idx) }
func (gdClass MeshDataTool) SetVertexUv(idx int64, uv Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[13], &idx, &uv) }
func (gdClass MeshDataTool) GetVertexUv(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodMeshDataTool[14], &idx) }
func (gdClass MeshDataTool) SetVertexUv2(idx int64, uv2 Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[15], &idx, &uv2) }
func (gdClass MeshDataTool) GetVertexUv2(idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodMeshDataTool[16], &idx) }
func (gdClass MeshDataTool) SetVertexColor(idx int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[17], &idx, &color) }
func (gdClass MeshDataTool) GetVertexColor(idx int64) Color { return methodCall[Color](gdClass.obj.get(), methodMeshDataTool[18], &idx) }
func (gdClass MeshDataTool) SetVertexBones(idx int64, bones []int32)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[19], &idx, &bones) }
func (gdClass MeshDataTool) GetVertexBones(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMeshDataTool[20], &idx) }
func (gdClass MeshDataTool) SetVertexWeights(idx int64, weights []float32)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[21], &idx, &weights) }
func (gdClass MeshDataTool) GetVertexWeights(idx int64) []float32 { return methodCall[[]float32](gdClass.obj.get(), methodMeshDataTool[22], &idx) }
func (gdClass MeshDataTool) SetVertexMeta(idx int64, meta any)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[23], &idx, &meta) }
func (gdClass MeshDataTool) GetVertexMeta(idx int64) any { return methodCall[any](gdClass.obj.get(), methodMeshDataTool[24], &idx) }
func (gdClass MeshDataTool) GetVertexEdges(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMeshDataTool[25], &idx) }
func (gdClass MeshDataTool) GetVertexFaces(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMeshDataTool[26], &idx) }
func (gdClass MeshDataTool) GetEdgeVertex(idx int64, vertex int64) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[27], &idx, &vertex) }
func (gdClass MeshDataTool) GetEdgeFaces(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMeshDataTool[28], &idx) }
func (gdClass MeshDataTool) SetEdgeMeta(idx int64, meta any)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[29], &idx, &meta) }
func (gdClass MeshDataTool) GetEdgeMeta(idx int64) any { return methodCall[any](gdClass.obj.get(), methodMeshDataTool[30], &idx) }
func (gdClass MeshDataTool) GetFaceVertex(idx int64, vertex int64) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[31], &idx, &vertex) }
func (gdClass MeshDataTool) GetFaceEdge(idx int64, edge int64) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshDataTool[32], &idx, &edge) }
func (gdClass MeshDataTool) SetFaceMeta(idx int64, meta any)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[33], &idx, &meta) }
func (gdClass MeshDataTool) GetFaceMeta(idx int64) any { return methodCall[any](gdClass.obj.get(), methodMeshDataTool[34], &idx) }
func (gdClass MeshDataTool) GetFaceNormal(idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodMeshDataTool[35], &idx) }
func (gdClass MeshDataTool) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodMeshDataTool[36], &material) }
func (gdClass MeshDataTool) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodMeshDataTool[37]) }

type MeshInstance2D struct{self *MeshInstance2D; obj safeObject }
func NewMeshInstance2D(ctx Context, at *MeshInstance2D) MeshInstance2D { if at == nil { at = new(MeshInstance2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MeshInstance2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MeshInstance2D) owner() cObject { return gdClass.obj.get() }
func (MeshInstance2D) class() string { return "MeshInstance2D\000" }

func (gdClass MeshInstance2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodMeshInstance2D [6]cMethodBind
func (gdClass MeshInstance2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass MeshInstance2D) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance2D[0], &mesh) }
func (gdClass MeshInstance2D) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMeshInstance2D[1]) }
func (gdClass MeshInstance2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance2D[2], &texture) }
func (gdClass MeshInstance2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMeshInstance2D[3]) }
func (gdClass MeshInstance2D) SetNormalMap(normal_map Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance2D[4], &normal_map) }
func (gdClass MeshInstance2D) GetNormalMap() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMeshInstance2D[5]) }

type MeshInstance3D struct{self *MeshInstance3D; obj safeObject }
func NewMeshInstance3D(ctx Context, at *MeshInstance3D) MeshInstance3D { if at == nil { at = new(MeshInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MeshInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MeshInstance3D) owner() cObject { return gdClass.obj.get() }
func (MeshInstance3D) class() string { return "MeshInstance3D\000" }

func (gdClass MeshInstance3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodMeshInstance3D [18]cMethodBind
func (gdClass MeshInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass MeshInstance3D) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[0], &mesh) }
func (gdClass MeshInstance3D) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMeshInstance3D[1]) }
func (gdClass MeshInstance3D) SetSkeletonPath(skeleton_path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[2], &skeleton_path) }
func (gdClass MeshInstance3D) GetSkeletonPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodMeshInstance3D[3]) }
func (gdClass MeshInstance3D) SetSkin(skin Skin)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[4], &skin) }
func (gdClass MeshInstance3D) GetSkin() Skin { return methodCall[Skin](gdClass.obj.get(), methodMeshInstance3D[5]) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterialCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshInstance3D[6]) }
func (gdClass MeshInstance3D) SetSurfaceOverrideMaterial(surface int64, material Material)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[7], &surface, &material) }
func (gdClass MeshInstance3D) GetSurfaceOverrideMaterial(surface int64) Material { return methodCall[Material](gdClass.obj.get(), methodMeshInstance3D[8], &surface) }
func (gdClass MeshInstance3D) GetActiveMaterial(surface int64) Material { return methodCall[Material](gdClass.obj.get(), methodMeshInstance3D[9], &surface) }
func (gdClass MeshInstance3D) CreateTrimeshCollision()  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[10]) }
func (gdClass MeshInstance3D) CreateConvexCollision(clean bool, simplify bool)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[11], &clean, &simplify) }
func (gdClass MeshInstance3D) CreateMultipleConvexCollisions()  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[12]) }
func (gdClass MeshInstance3D) GetBlendShapeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshInstance3D[13]) }
func (gdClass MeshInstance3D) FindBlendShapeByName(name Name) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshInstance3D[14], &name) }
func (gdClass MeshInstance3D) GetBlendShapeValue(blend_shape_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodMeshInstance3D[15], &blend_shape_idx) }
func (gdClass MeshInstance3D) SetBlendShapeValue(blend_shape_idx int64, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[16], &blend_shape_idx, &value) }
func (gdClass MeshInstance3D) CreateDebugTangents()  { methodCall[struct{}](gdClass.obj.get(), methodMeshInstance3D[17]) }

type MeshLibrary struct{self *MeshLibrary; obj safeObject }
func NewMeshLibrary(ctx Context, at *MeshLibrary) MeshLibrary { if at == nil { at = new(MeshLibrary) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MeshLibrary) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MeshLibrary) owner() cObject { return gdClass.obj.get() }
func (MeshLibrary) class() string { return "MeshLibrary\000" }

func (gdClass MeshLibrary) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodMeshLibrary [20]cMethodBind
func (gdClass MeshLibrary) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass MeshLibrary) CreateItem(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[0], &id) }
func (gdClass MeshLibrary) SetItemName(id int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[1], &id, &name) }
func (gdClass MeshLibrary) SetItemMesh(id int64, mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[2], &id, &mesh) }
func (gdClass MeshLibrary) SetItemMeshTransform(id int64, mesh_transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[3], &id, &mesh_transform) }
func (gdClass MeshLibrary) SetItemNavmesh(id int64, navmesh NavigationMesh)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[4], &id, &navmesh) }
func (gdClass MeshLibrary) SetItemNavmeshTransform(id int64, navmesh Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[5], &id, &navmesh) }
func (gdClass MeshLibrary) SetItemShapes(id int64, shapes Array)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[6], &id, &shapes) }
func (gdClass MeshLibrary) SetItemPreview(id int64, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[7], &id, &texture) }
func (gdClass MeshLibrary) GetItemName(id int64) string { return methodCall[string](gdClass.obj.get(), methodMeshLibrary[8], &id) }
func (gdClass MeshLibrary) GetItemMesh(id int64) Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMeshLibrary[9], &id) }
func (gdClass MeshLibrary) GetItemMeshTransform(id int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodMeshLibrary[10], &id) }
func (gdClass MeshLibrary) GetItemNavmesh(id int64) NavigationMesh { return methodCall[NavigationMesh](gdClass.obj.get(), methodMeshLibrary[11], &id) }
func (gdClass MeshLibrary) GetItemNavmeshTransform(id int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodMeshLibrary[12], &id) }
func (gdClass MeshLibrary) GetItemShapes(id int64) Array { return methodCall[Array](gdClass.obj.get(), methodMeshLibrary[13], &id) }
func (gdClass MeshLibrary) GetItemPreview(id int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMeshLibrary[14], &id) }
func (gdClass MeshLibrary) RemoveItem(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[15], &id) }
func (gdClass MeshLibrary) FindItemByName(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodMeshLibrary[16], &name) }
func (gdClass MeshLibrary) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodMeshLibrary[17]) }
func (gdClass MeshLibrary) GetItemList() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMeshLibrary[18]) }
func (gdClass MeshLibrary) GetLastUnusedItemId() int64 { return methodCall[int64](gdClass.obj.get(), methodMeshLibrary[19]) }

type MeshTexture struct{self *MeshTexture; obj safeObject }
func NewMeshTexture(ctx Context, at *MeshTexture) MeshTexture { if at == nil { at = new(MeshTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MeshTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MeshTexture) owner() cObject { return gdClass.obj.get() }
func (MeshTexture) class() string { return "MeshTexture\000" }

func (gdClass MeshTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodMeshTexture [6]cMethodBind
func (gdClass MeshTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass MeshTexture) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodMeshTexture[0], &mesh) }
func (gdClass MeshTexture) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMeshTexture[1]) }
func (gdClass MeshTexture) SetImageSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodMeshTexture[2], &size) }
func (gdClass MeshTexture) GetImageSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodMeshTexture[3]) }
func (gdClass MeshTexture) SetBaseTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMeshTexture[4], &texture) }
func (gdClass MeshTexture) GetBaseTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMeshTexture[5]) }

type MethodTweener struct{self *MethodTweener; obj safeObject }
func NewMethodTweener(ctx Context, at *MethodTweener) MethodTweener { if at == nil { at = new(MethodTweener) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MethodTweener) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MethodTweener) owner() cObject { return gdClass.obj.get() }
func (MethodTweener) class() string { return "MethodTweener\000" }

func (gdClass MethodTweener) Tweener() Tweener { return Tweener{obj:gdClass.obj} }

var methodMethodTweener [3]cMethodBind
func (gdClass MethodTweener) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Tweener().virtual(rtype, name)
}
func (gdClass MethodTweener) SetDelay(delay float64) MethodTweener { return methodCall[MethodTweener](gdClass.obj.get(), methodMethodTweener[0], &delay) }
func (gdClass MethodTweener) SetTrans(trans TweenTransitionType) MethodTweener { return methodCall[MethodTweener](gdClass.obj.get(), methodMethodTweener[1], &trans) }
func (gdClass MethodTweener) SetEase(ease TweenEaseType) MethodTweener { return methodCall[MethodTweener](gdClass.obj.get(), methodMethodTweener[2], &ease) }

type MissingNode struct{self *MissingNode; obj safeObject }
func NewMissingNode(ctx Context, at *MissingNode) MissingNode { if at == nil { at = new(MissingNode) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MissingNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MissingNode) owner() cObject { return gdClass.obj.get() }
func (MissingNode) class() string { return "MissingNode\000" }

func (gdClass MissingNode) Node() Node { return Node{obj:gdClass.obj} }

var methodMissingNode [4]cMethodBind
func (gdClass MissingNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass MissingNode) SetOriginalClass(name string)  { methodCall[struct{}](gdClass.obj.get(), methodMissingNode[0], &name) }
func (gdClass MissingNode) GetOriginalClass() string { return methodCall[string](gdClass.obj.get(), methodMissingNode[1]) }
func (gdClass MissingNode) SetRecordingProperties(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMissingNode[2], &enable) }
func (gdClass MissingNode) IsRecordingProperties() bool { return methodCall[bool](gdClass.obj.get(), methodMissingNode[3]) }

type MissingResource struct{self *MissingResource; obj safeObject }
func NewMissingResource(ctx Context, at *MissingResource) MissingResource { if at == nil { at = new(MissingResource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MissingResource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MissingResource) owner() cObject { return gdClass.obj.get() }
func (MissingResource) class() string { return "MissingResource\000" }

func (gdClass MissingResource) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodMissingResource [4]cMethodBind
func (gdClass MissingResource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass MissingResource) SetOriginalClass(name string)  { methodCall[struct{}](gdClass.obj.get(), methodMissingResource[0], &name) }
func (gdClass MissingResource) GetOriginalClass() string { return methodCall[string](gdClass.obj.get(), methodMissingResource[1]) }
func (gdClass MissingResource) SetRecordingProperties(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMissingResource[2], &enable) }
func (gdClass MissingResource) IsRecordingProperties() bool { return methodCall[bool](gdClass.obj.get(), methodMissingResource[3]) }

type MobileVRInterface struct{self *MobileVRInterface; obj safeObject }
func NewMobileVRInterface(ctx Context, at *MobileVRInterface) MobileVRInterface { if at == nil { at = new(MobileVRInterface) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MobileVRInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MobileVRInterface) owner() cObject { return gdClass.obj.get() }
func (MobileVRInterface) class() string { return "MobileVRInterface\000" }

func (gdClass MobileVRInterface) XRInterface() XRInterface { return XRInterface{obj:gdClass.obj} }

var methodMobileVRInterface [14]cMethodBind
func (gdClass MobileVRInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.XRInterface().virtual(rtype, name)
}
func (gdClass MobileVRInterface) SetEyeHeight(eye_height float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[0], &eye_height) }
func (gdClass MobileVRInterface) GetEyeHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[1]) }
func (gdClass MobileVRInterface) SetIod(iod float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[2], &iod) }
func (gdClass MobileVRInterface) GetIod() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[3]) }
func (gdClass MobileVRInterface) SetDisplayWidth(display_width float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[4], &display_width) }
func (gdClass MobileVRInterface) GetDisplayWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[5]) }
func (gdClass MobileVRInterface) SetDisplayToLens(display_to_lens float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[6], &display_to_lens) }
func (gdClass MobileVRInterface) GetDisplayToLens() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[7]) }
func (gdClass MobileVRInterface) SetOversample(oversample float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[8], &oversample) }
func (gdClass MobileVRInterface) GetOversample() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[9]) }
func (gdClass MobileVRInterface) SetK1(k float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[10], &k) }
func (gdClass MobileVRInterface) GetK1() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[11]) }
func (gdClass MobileVRInterface) SetK2(k float64)  { methodCall[struct{}](gdClass.obj.get(), methodMobileVRInterface[12], &k) }
func (gdClass MobileVRInterface) GetK2() float64 { return methodCall[float64](gdClass.obj.get(), methodMobileVRInterface[13]) }

type MovieWriter struct{self *MovieWriter; obj safeObject }
func NewMovieWriter(ctx Context, at *MovieWriter) MovieWriter { if at == nil { at = new(MovieWriter) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MovieWriter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MovieWriter) owner() cObject { return gdClass.obj.get() }
func (MovieWriter) class() string { return "MovieWriter\000" }

func (gdClass MovieWriter) Object() Object { return Object{obj:gdClass.obj} }

var methodMovieWriter [1]cMethodBind
func (gdClass MovieWriter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_audio_mix_rate":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAudioMixRate() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetAudioMixRate`)
		}
		return
	case "_get_audio_speaker_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAudioSpeakerMode() AudioServerSpeakerMode }{}).Elem()) {
			return rtype.MethodByName(`GetAudioSpeakerMode`)
		}
		return
	case "_handles_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ HandlesFile(path string) bool }{}).Elem()) {
			return rtype.MethodByName(`HandlesFile`)
		}
		return
	case "_write_begin":
		if rtype.Implements(reflect.TypeOf([0]interface{ WriteBegin(movie_size Vector2i, fps int64, base_path string) int64 }{}).Elem()) {
			return rtype.MethodByName(`WriteBegin`)
		}
		return
	case "_write_frame":
		if rtype.Implements(reflect.TypeOf([0]interface{ WriteFrame(frame_image Image, audio_frame_block []byte) int64 }{}).Elem()) {
			return rtype.MethodByName(`WriteFrame`)
		}
		return
	case "_write_end":
		if rtype.Implements(reflect.TypeOf([0]interface{ WriteEnd()  }{}).Elem()) {
			return rtype.MethodByName(`WriteEnd`)
		}
		return
	}
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass MovieWriter) AddWriter(writer MovieWriter)  { methodCall[struct{}](gdClass.obj.get(), methodMovieWriter[0], &writer) }

type MovieWriterMJPEG struct{self *MovieWriterMJPEG; obj safeObject }
func NewMovieWriterMJPEG(ctx Context, at *MovieWriterMJPEG) MovieWriterMJPEG { if at == nil { at = new(MovieWriterMJPEG) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MovieWriterMJPEG) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MovieWriterMJPEG) owner() cObject { return gdClass.obj.get() }
func (MovieWriterMJPEG) class() string { return "MovieWriterMJPEG\000" }

func (gdClass MovieWriterMJPEG) MovieWriter() MovieWriter { return MovieWriter{obj:gdClass.obj} }

func (gdClass MovieWriterMJPEG) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MovieWriter().virtual(rtype, name)
}

type MovieWriterPNGWAV struct{self *MovieWriterPNGWAV; obj safeObject }
func NewMovieWriterPNGWAV(ctx Context, at *MovieWriterPNGWAV) MovieWriterPNGWAV { if at == nil { at = new(MovieWriterPNGWAV) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MovieWriterPNGWAV) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MovieWriterPNGWAV) owner() cObject { return gdClass.obj.get() }
func (MovieWriterPNGWAV) class() string { return "MovieWriterPNGWAV\000" }

func (gdClass MovieWriterPNGWAV) MovieWriter() MovieWriter { return MovieWriter{obj:gdClass.obj} }

func (gdClass MovieWriterPNGWAV) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MovieWriter().virtual(rtype, name)
}

type MultiMeshTransformFormat int64

const (
	MultiMeshTransform2d MultiMeshTransformFormat = 0
	MultiMeshTransform3d MultiMeshTransformFormat = 1
)

type MultiMesh struct{self *MultiMesh; obj safeObject }
func NewMultiMesh(ctx Context, at *MultiMesh) MultiMesh { if at == nil { at = new(MultiMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MultiMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiMesh) owner() cObject { return gdClass.obj.get() }
func (MultiMesh) class() string { return "MultiMesh\000" }

func (gdClass MultiMesh) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodMultiMesh [23]cMethodBind
func (gdClass MultiMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass MultiMesh) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[0], &mesh) }
func (gdClass MultiMesh) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodMultiMesh[1]) }
func (gdClass MultiMesh) SetUseColors(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[2], &enable) }
func (gdClass MultiMesh) IsUsingColors() bool { return methodCall[bool](gdClass.obj.get(), methodMultiMesh[3]) }
func (gdClass MultiMesh) SetUseCustomData(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[4], &enable) }
func (gdClass MultiMesh) IsUsingCustomData() bool { return methodCall[bool](gdClass.obj.get(), methodMultiMesh[5]) }
func (gdClass MultiMesh) SetTransformFormat(format MultiMeshTransformFormat)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[6], &format) }
func (gdClass MultiMesh) GetTransformFormat() MultiMeshTransformFormat { return methodCall[MultiMeshTransformFormat](gdClass.obj.get(), methodMultiMesh[7]) }
func (gdClass MultiMesh) SetInstanceCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[8], &count) }
func (gdClass MultiMesh) GetInstanceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiMesh[9]) }
func (gdClass MultiMesh) SetVisibleInstanceCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[10], &count) }
func (gdClass MultiMesh) GetVisibleInstanceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiMesh[11]) }
func (gdClass MultiMesh) SetInstanceTransform(instance int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[12], &instance, &transform) }
func (gdClass MultiMesh) SetInstanceTransform2d(instance int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[13], &instance, &transform) }
func (gdClass MultiMesh) GetInstanceTransform(instance int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodMultiMesh[14], &instance) }
func (gdClass MultiMesh) GetInstanceTransform2d(instance int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodMultiMesh[15], &instance) }
func (gdClass MultiMesh) SetInstanceColor(instance int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[16], &instance, &color) }
func (gdClass MultiMesh) GetInstanceColor(instance int64) Color { return methodCall[Color](gdClass.obj.get(), methodMultiMesh[17], &instance) }
func (gdClass MultiMesh) SetInstanceCustomData(instance int64, custom_data Color)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[18], &instance, &custom_data) }
func (gdClass MultiMesh) GetInstanceCustomData(instance int64) Color { return methodCall[Color](gdClass.obj.get(), methodMultiMesh[19], &instance) }
func (gdClass MultiMesh) GetAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodMultiMesh[20]) }
func (gdClass MultiMesh) GetBuffer() []float32 { return methodCall[[]float32](gdClass.obj.get(), methodMultiMesh[21]) }
func (gdClass MultiMesh) SetBuffer(buffer []float32)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMesh[22], &buffer) }

type MultiMeshInstance2D struct{self *MultiMeshInstance2D; obj safeObject }
func NewMultiMeshInstance2D(ctx Context, at *MultiMeshInstance2D) MultiMeshInstance2D { if at == nil { at = new(MultiMeshInstance2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MultiMeshInstance2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiMeshInstance2D) owner() cObject { return gdClass.obj.get() }
func (MultiMeshInstance2D) class() string { return "MultiMeshInstance2D\000" }

func (gdClass MultiMeshInstance2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodMultiMeshInstance2D [6]cMethodBind
func (gdClass MultiMeshInstance2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass MultiMeshInstance2D) SetMultimesh(multimesh MultiMesh)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMeshInstance2D[0], &multimesh) }
func (gdClass MultiMeshInstance2D) GetMultimesh() MultiMesh { return methodCall[MultiMesh](gdClass.obj.get(), methodMultiMeshInstance2D[1]) }
func (gdClass MultiMeshInstance2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMeshInstance2D[2], &texture) }
func (gdClass MultiMeshInstance2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMultiMeshInstance2D[3]) }
func (gdClass MultiMeshInstance2D) SetNormalMap(normal_map Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMeshInstance2D[4], &normal_map) }
func (gdClass MultiMeshInstance2D) GetNormalMap() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodMultiMeshInstance2D[5]) }

type MultiMeshInstance3D struct{self *MultiMeshInstance3D; obj safeObject }
func NewMultiMeshInstance3D(ctx Context, at *MultiMeshInstance3D) MultiMeshInstance3D { if at == nil { at = new(MultiMeshInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MultiMeshInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiMeshInstance3D) owner() cObject { return gdClass.obj.get() }
func (MultiMeshInstance3D) class() string { return "MultiMeshInstance3D\000" }

func (gdClass MultiMeshInstance3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodMultiMeshInstance3D [2]cMethodBind
func (gdClass MultiMeshInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass MultiMeshInstance3D) SetMultimesh(multimesh MultiMesh)  { methodCall[struct{}](gdClass.obj.get(), methodMultiMeshInstance3D[0], &multimesh) }
func (gdClass MultiMeshInstance3D) GetMultimesh() MultiMesh { return methodCall[MultiMesh](gdClass.obj.get(), methodMultiMeshInstance3D[1]) }

type MultiplayerAPIRPCMode int64

const (
	MultiplayerAPIRpcModeDisabled MultiplayerAPIRPCMode = 0
	MultiplayerAPIRpcModeAnyPeer MultiplayerAPIRPCMode = 1
	MultiplayerAPIRpcModeAuthority MultiplayerAPIRPCMode = 2
)

type MultiplayerAPI struct{self *MultiplayerAPI; obj safeObject }
func NewMultiplayerAPI(ctx Context, at *MultiplayerAPI) MultiplayerAPI { if at == nil { at = new(MultiplayerAPI) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MultiplayerAPI) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerAPI) owner() cObject { return gdClass.obj.get() }
func (MultiplayerAPI) class() string { return "MultiplayerAPI\000" }

func (gdClass MultiplayerAPI) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodMultiplayerAPI [14]cMethodBind
func (gdClass MultiplayerAPI) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass MultiplayerAPI) HasMultiplayerPeer() bool { return methodCall[bool](gdClass.obj.get(), methodMultiplayerAPI[0]) }
func (gdClass MultiplayerAPI) GetMultiplayerPeer() MultiplayerPeer { return methodCall[MultiplayerPeer](gdClass.obj.get(), methodMultiplayerAPI[1]) }
func (gdClass MultiplayerAPI) SetMultiplayerPeer(peer MultiplayerPeer)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerAPI[2], &peer) }
func (gdClass MultiplayerAPI) GetUniqueId() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[3]) }
func (gdClass MultiplayerAPI) IsServer() bool { return methodCall[bool](gdClass.obj.get(), methodMultiplayerAPI[4]) }
func (gdClass MultiplayerAPI) GetRemoteSenderId() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[5]) }
func (gdClass MultiplayerAPI) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[6]) }
func (gdClass MultiplayerAPI) Rpc(peer int64, object Object, method Name, arguments Array) int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[7], &peer, &object, &method, &arguments) }
func (gdClass MultiplayerAPI) ObjectConfigurationAdd(object Object, configuration any) int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[8], &object, &configuration) }
func (gdClass MultiplayerAPI) ObjectConfigurationRemove(object Object, configuration any) int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerAPI[9], &object, &configuration) }
func (gdClass MultiplayerAPI) GetPeers() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodMultiplayerAPI[10]) }
func (gdClass MultiplayerAPI) SetDefaultInterface(interface_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerAPI[11], &interface_name) }
func (gdClass MultiplayerAPI) GetDefaultInterface() Name { return methodCall[Name](gdClass.obj.get(), methodMultiplayerAPI[12]) }
func (gdClass MultiplayerAPI) CreateDefaultInterface() MultiplayerAPI { return methodCall[MultiplayerAPI](gdClass.obj.get(), methodMultiplayerAPI[13]) }

type MultiplayerAPIExtension struct{self *MultiplayerAPIExtension; obj safeObject }
func NewMultiplayerAPIExtension(ctx Context, at *MultiplayerAPIExtension) MultiplayerAPIExtension { if at == nil { at = new(MultiplayerAPIExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MultiplayerAPIExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerAPIExtension) owner() cObject { return gdClass.obj.get() }
func (MultiplayerAPIExtension) class() string { return "MultiplayerAPIExtension\000" }

func (gdClass MultiplayerAPIExtension) MultiplayerAPI() MultiplayerAPI { return MultiplayerAPI{obj:gdClass.obj} }

func (gdClass MultiplayerAPIExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_poll":
		if rtype.Implements(reflect.TypeOf([0]interface{ Poll() int64 }{}).Elem()) {
			return rtype.MethodByName(`Poll`)
		}
		return
	case "_set_multiplayer_peer":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetMultiplayerPeer(multiplayer_peer MultiplayerPeer)  }{}).Elem()) {
			return rtype.MethodByName(`SetMultiplayerPeer`)
		}
		return
	case "_get_multiplayer_peer":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMultiplayerPeer() MultiplayerPeer }{}).Elem()) {
			return rtype.MethodByName(`GetMultiplayerPeer`)
		}
		return
	case "_get_unique_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetUniqueId() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetUniqueId`)
		}
		return
	case "_get_peer_ids":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPeerIds() []int32 }{}).Elem()) {
			return rtype.MethodByName(`GetPeerIds`)
		}
		return
	case "_rpc":
		if rtype.Implements(reflect.TypeOf([0]interface{ Rpc(peer int64, object Object, method Name, args Array) int64 }{}).Elem()) {
			return rtype.MethodByName(`Rpc`)
		}
		return
	case "_get_remote_sender_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRemoteSenderId() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetRemoteSenderId`)
		}
		return
	case "_object_configuration_add":
		if rtype.Implements(reflect.TypeOf([0]interface{ ObjectConfigurationAdd(object Object, configuration any) int64 }{}).Elem()) {
			return rtype.MethodByName(`ObjectConfigurationAdd`)
		}
		return
	case "_object_configuration_remove":
		if rtype.Implements(reflect.TypeOf([0]interface{ ObjectConfigurationRemove(object Object, configuration any) int64 }{}).Elem()) {
			return rtype.MethodByName(`ObjectConfigurationRemove`)
		}
		return
	}
	return gdClass.MultiplayerAPI().virtual(rtype, name)
}

type MultiplayerPeerConnectionStatus int64

const (
	MultiplayerPeerConnectionDisconnected MultiplayerPeerConnectionStatus = 0
	MultiplayerPeerConnectionConnecting MultiplayerPeerConnectionStatus = 1
	MultiplayerPeerConnectionConnected MultiplayerPeerConnectionStatus = 2
)

type MultiplayerPeerTransferMode int64

const (
	MultiplayerPeerTransferModeUnreliable MultiplayerPeerTransferMode = 0
	MultiplayerPeerTransferModeUnreliableOrdered MultiplayerPeerTransferMode = 1
	MultiplayerPeerTransferModeReliable MultiplayerPeerTransferMode = 2
)

type MultiplayerPeer struct{self *MultiplayerPeer; obj safeObject }
func NewMultiplayerPeer(ctx Context, at *MultiplayerPeer) MultiplayerPeer { if at == nil { at = new(MultiplayerPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MultiplayerPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerPeer) owner() cObject { return gdClass.obj.get() }
func (MultiplayerPeer) class() string { return "MultiplayerPeer\000" }

func (gdClass MultiplayerPeer) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodMultiplayerPeer [12]cMethodBind
func (gdClass MultiplayerPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass MultiplayerPeer) SetTransferChannel(channel int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerPeer[0], &channel) }
func (gdClass MultiplayerPeer) GetTransferChannel() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerPeer[1]) }
func (gdClass MultiplayerPeer) SetTransferMode(mode MultiplayerPeerTransferMode)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerPeer[2], &mode) }
func (gdClass MultiplayerPeer) GetTransferMode() MultiplayerPeerTransferMode { return methodCall[MultiplayerPeerTransferMode](gdClass.obj.get(), methodMultiplayerPeer[3]) }
func (gdClass MultiplayerPeer) SetTargetPeer(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerPeer[4], &id) }
func (gdClass MultiplayerPeer) GetPacketPeer() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerPeer[5]) }
func (gdClass MultiplayerPeer) Poll()  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerPeer[6]) }
func (gdClass MultiplayerPeer) GetConnectionStatus() MultiplayerPeerConnectionStatus { return methodCall[MultiplayerPeerConnectionStatus](gdClass.obj.get(), methodMultiplayerPeer[7]) }
func (gdClass MultiplayerPeer) GetUniqueId() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerPeer[8]) }
func (gdClass MultiplayerPeer) GenerateUniqueId() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerPeer[9]) }
func (gdClass MultiplayerPeer) SetRefuseNewConnections(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerPeer[10], &enable) }
func (gdClass MultiplayerPeer) IsRefusingNewConnections() bool { return methodCall[bool](gdClass.obj.get(), methodMultiplayerPeer[11]) }

type MultiplayerPeerExtension struct{self *MultiplayerPeerExtension; obj safeObject }
func NewMultiplayerPeerExtension(ctx Context, at *MultiplayerPeerExtension) MultiplayerPeerExtension { if at == nil { at = new(MultiplayerPeerExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass MultiplayerPeerExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerPeerExtension) owner() cObject { return gdClass.obj.get() }
func (MultiplayerPeerExtension) class() string { return "MultiplayerPeerExtension\000" }

func (gdClass MultiplayerPeerExtension) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer{obj:gdClass.obj} }

func (gdClass MultiplayerPeerExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPacket`)
		}
		return
	case "_put_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutPacket`)
		}
		return
	case "_get_available_packet_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAvailablePacketCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetAvailablePacketCount`)
		}
		return
	case "_get_max_packet_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMaxPacketSize() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMaxPacketSize`)
		}
		return
	case "_get_packet_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPacketScript() []byte }{}).Elem()) {
			return rtype.MethodByName(`GetPacketScript`)
		}
		return
	case "_put_packet_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutPacketScript(p_buffer []byte) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutPacketScript`)
		}
		return
	case "_set_transfer_channel":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetTransferChannel(p_channel int64)  }{}).Elem()) {
			return rtype.MethodByName(`SetTransferChannel`)
		}
		return
	case "_get_transfer_channel":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTransferChannel() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetTransferChannel`)
		}
		return
	case "_set_transfer_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetTransferMode(p_mode int64)  }{}).Elem()) {
			return rtype.MethodByName(`SetTransferMode`)
		}
		return
	case "_get_transfer_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTransferMode() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetTransferMode`)
		}
		return
	case "_set_target_peer":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetTargetPeer(p_peer int64)  }{}).Elem()) {
			return rtype.MethodByName(`SetTargetPeer`)
		}
		return
	case "_get_packet_peer":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPacketPeer() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPacketPeer`)
		}
		return
	case "_is_server":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsServer() bool }{}).Elem()) {
			return rtype.MethodByName(`IsServer`)
		}
		return
	case "_poll":
		if rtype.Implements(reflect.TypeOf([0]interface{ Poll() int64 }{}).Elem()) {
			return rtype.MethodByName(`Poll`)
		}
		return
	case "_get_unique_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetUniqueId() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetUniqueId`)
		}
		return
	case "_set_refuse_new_connections":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetRefuseNewConnections(p_enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`SetRefuseNewConnections`)
		}
		return
	case "_is_refusing_new_connections":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsRefusingNewConnections() bool }{}).Elem()) {
			return rtype.MethodByName(`IsRefusingNewConnections`)
		}
		return
	case "_get_connection_status":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConnectionStatus() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetConnectionStatus`)
		}
		return
	}
	return gdClass.MultiplayerPeer().virtual(rtype, name)
}

type MultiplayerSpawner struct{self *MultiplayerSpawner; obj safeObject }
func NewMultiplayerSpawner(ctx Context, at *MultiplayerSpawner) MultiplayerSpawner { if at == nil { at = new(MultiplayerSpawner) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MultiplayerSpawner) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerSpawner) owner() cObject { return gdClass.obj.get() }
func (MultiplayerSpawner) class() string { return "MultiplayerSpawner\000" }

func (gdClass MultiplayerSpawner) Node() Node { return Node{obj:gdClass.obj} }

var methodMultiplayerSpawner [9]cMethodBind
func (gdClass MultiplayerSpawner) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_spawn_custom":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpawnCustom(data any) Node }{}).Elem()) {
			return rtype.MethodByName(`SpawnCustom`)
		}
		return
	}
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass MultiplayerSpawner) AddSpawnableScene(path string)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSpawner[0], &path) }
func (gdClass MultiplayerSpawner) GetSpawnableSceneCount() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerSpawner[1]) }
func (gdClass MultiplayerSpawner) GetSpawnableScene(index int64) string { return methodCall[string](gdClass.obj.get(), methodMultiplayerSpawner[2], &index) }
func (gdClass MultiplayerSpawner) ClearSpawnableScenes()  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSpawner[3]) }
func (gdClass MultiplayerSpawner) Spawn(data any) Node { return methodCall[Node](gdClass.obj.get(), methodMultiplayerSpawner[4], &data) }
func (gdClass MultiplayerSpawner) GetSpawnPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodMultiplayerSpawner[5]) }
func (gdClass MultiplayerSpawner) SetSpawnPath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSpawner[6], &path) }
func (gdClass MultiplayerSpawner) GetSpawnLimit() int64 { return methodCall[int64](gdClass.obj.get(), methodMultiplayerSpawner[7]) }
func (gdClass MultiplayerSpawner) SetSpawnLimit(limit int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSpawner[8], &limit) }

type MultiplayerSynchronizerVisibilityUpdateMode int64

const (
	MultiplayerSynchronizerVisibilityProcessIdle MultiplayerSynchronizerVisibilityUpdateMode = 0
	MultiplayerSynchronizerVisibilityProcessPhysics MultiplayerSynchronizerVisibilityUpdateMode = 1
	MultiplayerSynchronizerVisibilityProcessNone MultiplayerSynchronizerVisibilityUpdateMode = 2
)

type MultiplayerSynchronizer struct{self *MultiplayerSynchronizer; obj safeObject }
func NewMultiplayerSynchronizer(ctx Context, at *MultiplayerSynchronizer) MultiplayerSynchronizer { if at == nil { at = new(MultiplayerSynchronizer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass MultiplayerSynchronizer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass MultiplayerSynchronizer) owner() cObject { return gdClass.obj.get() }
func (MultiplayerSynchronizer) class() string { return "MultiplayerSynchronizer\000" }

func (gdClass MultiplayerSynchronizer) Node() Node { return Node{obj:gdClass.obj} }

var methodMultiplayerSynchronizer [15]cMethodBind
func (gdClass MultiplayerSynchronizer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass MultiplayerSynchronizer) SetRootPath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[0], &path) }
func (gdClass MultiplayerSynchronizer) GetRootPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodMultiplayerSynchronizer[1]) }
func (gdClass MultiplayerSynchronizer) SetReplicationInterval(milliseconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[2], &milliseconds) }
func (gdClass MultiplayerSynchronizer) GetReplicationInterval() float64 { return methodCall[float64](gdClass.obj.get(), methodMultiplayerSynchronizer[3]) }
func (gdClass MultiplayerSynchronizer) SetReplicationConfig(config SceneReplicationConfig)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[4], &config) }
func (gdClass MultiplayerSynchronizer) GetReplicationConfig() SceneReplicationConfig { return methodCall[SceneReplicationConfig](gdClass.obj.get(), methodMultiplayerSynchronizer[5]) }
func (gdClass MultiplayerSynchronizer) SetVisibilityUpdateMode(mode MultiplayerSynchronizerVisibilityUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[6], &mode) }
func (gdClass MultiplayerSynchronizer) GetVisibilityUpdateMode() MultiplayerSynchronizerVisibilityUpdateMode { return methodCall[MultiplayerSynchronizerVisibilityUpdateMode](gdClass.obj.get(), methodMultiplayerSynchronizer[7]) }
func (gdClass MultiplayerSynchronizer) UpdateVisibility(for_peer int64)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[8], &for_peer) }
func (gdClass MultiplayerSynchronizer) SetVisibilityPublic(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[9], &visible) }
func (gdClass MultiplayerSynchronizer) IsVisibilityPublic() bool { return methodCall[bool](gdClass.obj.get(), methodMultiplayerSynchronizer[10]) }
func (gdClass MultiplayerSynchronizer) AddVisibilityFilter(filter Callable)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[11], &filter) }
func (gdClass MultiplayerSynchronizer) RemoveVisibilityFilter(filter Callable)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[12], &filter) }
func (gdClass MultiplayerSynchronizer) SetVisibilityFor(peer int64, visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodMultiplayerSynchronizer[13], &peer, &visible) }
func (gdClass MultiplayerSynchronizer) GetVisibilityFor(peer int64) bool { return methodCall[bool](gdClass.obj.get(), methodMultiplayerSynchronizer[14], &peer) }

type Mutex struct{self *Mutex; obj safeObject }
func NewMutex(ctx Context, at *Mutex) Mutex { if at == nil { at = new(Mutex) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Mutex) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Mutex) owner() cObject { return gdClass.obj.get() }
func (Mutex) class() string { return "Mutex\000" }

func (gdClass Mutex) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodMutex [3]cMethodBind
func (gdClass Mutex) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Mutex) Lock()  { methodCall[struct{}](gdClass.obj.get(), methodMutex[0]) }
func (gdClass Mutex) TryLock() int64 { return methodCall[int64](gdClass.obj.get(), methodMutex[1]) }
func (gdClass Mutex) Unlock()  { methodCall[struct{}](gdClass.obj.get(), methodMutex[2]) }

type NativeExtensionInitializationLevel int64

const (
	NativeExtensionInitializationLevelCore NativeExtensionInitializationLevel = 0
	NativeExtensionInitializationLevelServers NativeExtensionInitializationLevel = 1
	NativeExtensionInitializationLevelScene NativeExtensionInitializationLevel = 2
	NativeExtensionInitializationLevelEditor NativeExtensionInitializationLevel = 3
)

type NativeExtension struct{self *NativeExtension; obj safeObject }
func NewNativeExtension(ctx Context, at *NativeExtension) NativeExtension { if at == nil { at = new(NativeExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass NativeExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NativeExtension) owner() cObject { return gdClass.obj.get() }
func (NativeExtension) class() string { return "NativeExtension\000" }

func (gdClass NativeExtension) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodNativeExtension [5]cMethodBind
func (gdClass NativeExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass NativeExtension) OpenLibrary(path string, entry_symbol string) int64 { return methodCall[int64](gdClass.obj.get(), methodNativeExtension[0], &path, &entry_symbol) }
func (gdClass NativeExtension) CloseLibrary()  { methodCall[struct{}](gdClass.obj.get(), methodNativeExtension[1]) }
func (gdClass NativeExtension) IsLibraryOpen() bool { return methodCall[bool](gdClass.obj.get(), methodNativeExtension[2]) }
func (gdClass NativeExtension) GetMinimumLibraryInitializationLevel() NativeExtensionInitializationLevel { return methodCall[NativeExtensionInitializationLevel](gdClass.obj.get(), methodNativeExtension[3]) }
func (gdClass NativeExtension) InitializeLibrary(level NativeExtensionInitializationLevel)  { methodCall[struct{}](gdClass.obj.get(), methodNativeExtension[4], &level) }

type NativeExtensionManagerLoadStatus int64

const (
	NativeExtensionManagerLoadStatusOk NativeExtensionManagerLoadStatus = 0
	NativeExtensionManagerLoadStatusFailed NativeExtensionManagerLoadStatus = 1
	NativeExtensionManagerLoadStatusAlreadyLoaded NativeExtensionManagerLoadStatus = 2
	NativeExtensionManagerLoadStatusNotLoaded NativeExtensionManagerLoadStatus = 3
	NativeExtensionManagerLoadStatusNeedsRestart NativeExtensionManagerLoadStatus = 4
)
var NativeExtensionManager NativeExtensionManagerSingleton

type NativeExtensionManagerSingleton struct{self *NativeExtensionManagerSingleton; obj safeObject }
func NewNativeExtensionManagerSingleton(ctx Context, at *NativeExtensionManagerSingleton) NativeExtensionManagerSingleton { if at == nil { at = new(NativeExtensionManagerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NativeExtensionManagerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NativeExtensionManagerSingleton) owner() cObject { return gdClass.obj.get() }
func (NativeExtensionManagerSingleton) class() string { return "NativeExtensionManagerSingleton\000" }

func (gdClass NativeExtensionManagerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodNativeExtensionManagerSingleton [6]cMethodBind
func (gdClass NativeExtensionManagerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass NativeExtensionManagerSingleton) LoadExtension(path string) NativeExtensionManagerLoadStatus { return methodCall[NativeExtensionManagerLoadStatus](gdClass.obj.get(), methodNativeExtensionManagerSingleton[0], &path) }
func (gdClass NativeExtensionManagerSingleton) ReloadExtension(path string) NativeExtensionManagerLoadStatus { return methodCall[NativeExtensionManagerLoadStatus](gdClass.obj.get(), methodNativeExtensionManagerSingleton[1], &path) }
func (gdClass NativeExtensionManagerSingleton) UnloadExtension(path string) NativeExtensionManagerLoadStatus { return methodCall[NativeExtensionManagerLoadStatus](gdClass.obj.get(), methodNativeExtensionManagerSingleton[2], &path) }
func (gdClass NativeExtensionManagerSingleton) IsExtensionLoaded(path string) bool { return methodCall[bool](gdClass.obj.get(), methodNativeExtensionManagerSingleton[3], &path) }
func (gdClass NativeExtensionManagerSingleton) GetLoadedExtensions() []string { return methodCall[[]string](gdClass.obj.get(), methodNativeExtensionManagerSingleton[4]) }
func (gdClass NativeExtensionManagerSingleton) GetExtension(path string) NativeExtension { return methodCall[NativeExtension](gdClass.obj.get(), methodNativeExtensionManagerSingleton[5], &path) }

type NavigationAgent2D struct{self *NavigationAgent2D; obj safeObject }
func NewNavigationAgent2D(ctx Context, at *NavigationAgent2D) NavigationAgent2D { if at == nil { at = new(NavigationAgent2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationAgent2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationAgent2D) owner() cObject { return gdClass.obj.get() }
func (NavigationAgent2D) class() string { return "NavigationAgent2D\000" }

func (gdClass NavigationAgent2D) Node() Node { return Node{obj:gdClass.obj} }

var methodNavigationAgent2D [36]cMethodBind
func (gdClass NavigationAgent2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass NavigationAgent2D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationAgent2D[0]) }
func (gdClass NavigationAgent2D) SetAvoidanceEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[1], &enabled) }
func (gdClass NavigationAgent2D) GetAvoidanceEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent2D[2]) }
func (gdClass NavigationAgent2D) SetPathDesiredDistance(desired_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[3], &desired_distance) }
func (gdClass NavigationAgent2D) GetPathDesiredDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[4]) }
func (gdClass NavigationAgent2D) SetTargetDesiredDistance(desired_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[5], &desired_distance) }
func (gdClass NavigationAgent2D) GetTargetDesiredDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[6]) }
func (gdClass NavigationAgent2D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[7], &radius) }
func (gdClass NavigationAgent2D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[8]) }
func (gdClass NavigationAgent2D) SetNeighborDistance(neighbor_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[9], &neighbor_distance) }
func (gdClass NavigationAgent2D) GetNeighborDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[10]) }
func (gdClass NavigationAgent2D) SetMaxNeighbors(max_neighbors int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[11], &max_neighbors) }
func (gdClass NavigationAgent2D) GetMaxNeighbors() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent2D[12]) }
func (gdClass NavigationAgent2D) SetTimeHorizon(time_horizon float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[13], &time_horizon) }
func (gdClass NavigationAgent2D) GetTimeHorizon() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[14]) }
func (gdClass NavigationAgent2D) SetMaxSpeed(max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[15], &max_speed) }
func (gdClass NavigationAgent2D) GetMaxSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[16]) }
func (gdClass NavigationAgent2D) SetPathMaxDistance(max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[17], &max_speed) }
func (gdClass NavigationAgent2D) GetPathMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[18]) }
func (gdClass NavigationAgent2D) SetNavigationLayers(navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[19], &navigation_layers) }
func (gdClass NavigationAgent2D) GetNavigationLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent2D[20]) }
func (gdClass NavigationAgent2D) SetNavigationLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[21], &layer_number, &value) }
func (gdClass NavigationAgent2D) GetNavigationLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent2D[22], &layer_number) }
func (gdClass NavigationAgent2D) SetNavigationMap(navigation_map RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[23], &navigation_map) }
func (gdClass NavigationAgent2D) GetNavigationMap() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationAgent2D[24]) }
func (gdClass NavigationAgent2D) SetTargetLocation(location Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[25], &location) }
func (gdClass NavigationAgent2D) GetTargetLocation() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationAgent2D[26]) }
func (gdClass NavigationAgent2D) GetNextLocation() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationAgent2D[27]) }
func (gdClass NavigationAgent2D) DistanceToTarget() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent2D[28]) }
func (gdClass NavigationAgent2D) SetVelocity(velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent2D[29], &velocity) }
func (gdClass NavigationAgent2D) GetNavPath() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodNavigationAgent2D[30]) }
func (gdClass NavigationAgent2D) GetNavPathIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent2D[31]) }
func (gdClass NavigationAgent2D) IsTargetReached() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent2D[32]) }
func (gdClass NavigationAgent2D) IsTargetReachable() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent2D[33]) }
func (gdClass NavigationAgent2D) IsNavigationFinished() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent2D[34]) }
func (gdClass NavigationAgent2D) GetFinalLocation() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationAgent2D[35]) }

type NavigationAgent3D struct{self *NavigationAgent3D; obj safeObject }
func NewNavigationAgent3D(ctx Context, at *NavigationAgent3D) NavigationAgent3D { if at == nil { at = new(NavigationAgent3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationAgent3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationAgent3D) owner() cObject { return gdClass.obj.get() }
func (NavigationAgent3D) class() string { return "NavigationAgent3D\000" }

func (gdClass NavigationAgent3D) Node() Node { return Node{obj:gdClass.obj} }

var methodNavigationAgent3D [40]cMethodBind
func (gdClass NavigationAgent3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass NavigationAgent3D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationAgent3D[0]) }
func (gdClass NavigationAgent3D) SetAvoidanceEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[1], &enabled) }
func (gdClass NavigationAgent3D) GetAvoidanceEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[2]) }
func (gdClass NavigationAgent3D) SetPathDesiredDistance(desired_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[3], &desired_distance) }
func (gdClass NavigationAgent3D) GetPathDesiredDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[4]) }
func (gdClass NavigationAgent3D) SetTargetDesiredDistance(desired_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[5], &desired_distance) }
func (gdClass NavigationAgent3D) GetTargetDesiredDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[6]) }
func (gdClass NavigationAgent3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[7], &radius) }
func (gdClass NavigationAgent3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[8]) }
func (gdClass NavigationAgent3D) SetAgentHeightOffset(agent_height_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[9], &agent_height_offset) }
func (gdClass NavigationAgent3D) GetAgentHeightOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[10]) }
func (gdClass NavigationAgent3D) SetIgnoreY(ignore bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[11], &ignore) }
func (gdClass NavigationAgent3D) GetIgnoreY() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[12]) }
func (gdClass NavigationAgent3D) SetNeighborDistance(neighbor_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[13], &neighbor_distance) }
func (gdClass NavigationAgent3D) GetNeighborDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[14]) }
func (gdClass NavigationAgent3D) SetMaxNeighbors(max_neighbors int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[15], &max_neighbors) }
func (gdClass NavigationAgent3D) GetMaxNeighbors() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent3D[16]) }
func (gdClass NavigationAgent3D) SetTimeHorizon(time_horizon float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[17], &time_horizon) }
func (gdClass NavigationAgent3D) GetTimeHorizon() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[18]) }
func (gdClass NavigationAgent3D) SetMaxSpeed(max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[19], &max_speed) }
func (gdClass NavigationAgent3D) GetMaxSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[20]) }
func (gdClass NavigationAgent3D) SetPathMaxDistance(max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[21], &max_speed) }
func (gdClass NavigationAgent3D) GetPathMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[22]) }
func (gdClass NavigationAgent3D) SetNavigationLayers(navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[23], &navigation_layers) }
func (gdClass NavigationAgent3D) GetNavigationLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent3D[24]) }
func (gdClass NavigationAgent3D) SetNavigationLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[25], &layer_number, &value) }
func (gdClass NavigationAgent3D) GetNavigationLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[26], &layer_number) }
func (gdClass NavigationAgent3D) SetNavigationMap(navigation_map RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[27], &navigation_map) }
func (gdClass NavigationAgent3D) GetNavigationMap() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationAgent3D[28]) }
func (gdClass NavigationAgent3D) SetTargetLocation(location Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[29], &location) }
func (gdClass NavigationAgent3D) GetTargetLocation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationAgent3D[30]) }
func (gdClass NavigationAgent3D) GetNextLocation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationAgent3D[31]) }
func (gdClass NavigationAgent3D) DistanceToTarget() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationAgent3D[32]) }
func (gdClass NavigationAgent3D) SetVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationAgent3D[33], &velocity) }
func (gdClass NavigationAgent3D) GetNavPath() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodNavigationAgent3D[34]) }
func (gdClass NavigationAgent3D) GetNavPathIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationAgent3D[35]) }
func (gdClass NavigationAgent3D) IsTargetReached() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[36]) }
func (gdClass NavigationAgent3D) IsTargetReachable() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[37]) }
func (gdClass NavigationAgent3D) IsNavigationFinished() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationAgent3D[38]) }
func (gdClass NavigationAgent3D) GetFinalLocation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationAgent3D[39]) }

type NavigationMeshSamplePartitionType int64

const (
	NavigationMeshSamplePartitionWatershed NavigationMeshSamplePartitionType = 0
	NavigationMeshSamplePartitionMonotone NavigationMeshSamplePartitionType = 1
	NavigationMeshSamplePartitionLayers NavigationMeshSamplePartitionType = 2
	NavigationMeshSamplePartitionMax NavigationMeshSamplePartitionType = 3
)

type NavigationMeshParsedGeometryType int64

const (
	NavigationMeshParsedGeometryMeshInstances NavigationMeshParsedGeometryType = 0
	NavigationMeshParsedGeometryStaticColliders NavigationMeshParsedGeometryType = 1
	NavigationMeshParsedGeometryBoth NavigationMeshParsedGeometryType = 2
	NavigationMeshParsedGeometryMax NavigationMeshParsedGeometryType = 3
)

type NavigationMeshSourceGeometryMode int64

const (
	NavigationMeshSourceGeometryNavmeshChildren NavigationMeshSourceGeometryMode = 0
	NavigationMeshSourceGeometryGroupsWithChildren NavigationMeshSourceGeometryMode = 1
	NavigationMeshSourceGeometryGroupsExplicit NavigationMeshSourceGeometryMode = 2
	NavigationMeshSourceGeometryMax NavigationMeshSourceGeometryMode = 3
)

type NavigationMesh struct{self *NavigationMesh; obj safeObject }
func NewNavigationMesh(ctx Context, at *NavigationMesh) NavigationMesh { if at == nil { at = new(NavigationMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass NavigationMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationMesh) owner() cObject { return gdClass.obj.get() }
func (NavigationMesh) class() string { return "NavigationMesh\000" }

func (gdClass NavigationMesh) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodNavigationMesh [55]cMethodBind
func (gdClass NavigationMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass NavigationMesh) SetSamplePartitionType(sample_partition_type NavigationMeshSamplePartitionType)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[0], &sample_partition_type) }
func (gdClass NavigationMesh) GetSamplePartitionType() NavigationMeshSamplePartitionType { return methodCall[NavigationMeshSamplePartitionType](gdClass.obj.get(), methodNavigationMesh[1]) }
func (gdClass NavigationMesh) SetParsedGeometryType(geometry_type NavigationMeshParsedGeometryType)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[2], &geometry_type) }
func (gdClass NavigationMesh) GetParsedGeometryType() NavigationMeshParsedGeometryType { return methodCall[NavigationMeshParsedGeometryType](gdClass.obj.get(), methodNavigationMesh[3]) }
func (gdClass NavigationMesh) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[4], &mask) }
func (gdClass NavigationMesh) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationMesh[5]) }
func (gdClass NavigationMesh) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[6], &layer_number, &value) }
func (gdClass NavigationMesh) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationMesh[7], &layer_number) }
func (gdClass NavigationMesh) SetSourceGeometryMode(mask NavigationMeshSourceGeometryMode)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[8], &mask) }
func (gdClass NavigationMesh) GetSourceGeometryMode() NavigationMeshSourceGeometryMode { return methodCall[NavigationMeshSourceGeometryMode](gdClass.obj.get(), methodNavigationMesh[9]) }
func (gdClass NavigationMesh) SetSourceGroupName(mask Name)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[10], &mask) }
func (gdClass NavigationMesh) GetSourceGroupName() Name { return methodCall[Name](gdClass.obj.get(), methodNavigationMesh[11]) }
func (gdClass NavigationMesh) SetCellSize(cell_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[12], &cell_size) }
func (gdClass NavigationMesh) GetCellSize() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[13]) }
func (gdClass NavigationMesh) SetCellHeight(cell_height float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[14], &cell_height) }
func (gdClass NavigationMesh) GetCellHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[15]) }
func (gdClass NavigationMesh) SetAgentHeight(agent_height float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[16], &agent_height) }
func (gdClass NavigationMesh) GetAgentHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[17]) }
func (gdClass NavigationMesh) SetAgentRadius(agent_radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[18], &agent_radius) }
func (gdClass NavigationMesh) GetAgentRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[19]) }
func (gdClass NavigationMesh) SetAgentMaxClimb(agent_max_climb float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[20], &agent_max_climb) }
func (gdClass NavigationMesh) GetAgentMaxClimb() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[21]) }
func (gdClass NavigationMesh) SetAgentMaxSlope(agent_max_slope float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[22], &agent_max_slope) }
func (gdClass NavigationMesh) GetAgentMaxSlope() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[23]) }
func (gdClass NavigationMesh) SetRegionMinSize(region_min_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[24], &region_min_size) }
func (gdClass NavigationMesh) GetRegionMinSize() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[25]) }
func (gdClass NavigationMesh) SetRegionMergeSize(region_merge_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[26], &region_merge_size) }
func (gdClass NavigationMesh) GetRegionMergeSize() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[27]) }
func (gdClass NavigationMesh) SetEdgeMaxLength(edge_max_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[28], &edge_max_length) }
func (gdClass NavigationMesh) GetEdgeMaxLength() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[29]) }
func (gdClass NavigationMesh) SetEdgeMaxError(edge_max_error float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[30], &edge_max_error) }
func (gdClass NavigationMesh) GetEdgeMaxError() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[31]) }
func (gdClass NavigationMesh) SetVertsPerPoly(verts_per_poly float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[32], &verts_per_poly) }
func (gdClass NavigationMesh) GetVertsPerPoly() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[33]) }
func (gdClass NavigationMesh) SetDetailSampleDistance(detail_sample_dist float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[34], &detail_sample_dist) }
func (gdClass NavigationMesh) GetDetailSampleDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[35]) }
func (gdClass NavigationMesh) SetDetailSampleMaxError(detail_sample_max_error float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[36], &detail_sample_max_error) }
func (gdClass NavigationMesh) GetDetailSampleMaxError() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationMesh[37]) }
func (gdClass NavigationMesh) SetFilterLowHangingObstacles(filter_low_hanging_obstacles bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[38], &filter_low_hanging_obstacles) }
func (gdClass NavigationMesh) GetFilterLowHangingObstacles() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationMesh[39]) }
func (gdClass NavigationMesh) SetFilterLedgeSpans(filter_ledge_spans bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[40], &filter_ledge_spans) }
func (gdClass NavigationMesh) GetFilterLedgeSpans() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationMesh[41]) }
func (gdClass NavigationMesh) SetFilterWalkableLowHeightSpans(filter_walkable_low_height_spans bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[42], &filter_walkable_low_height_spans) }
func (gdClass NavigationMesh) GetFilterWalkableLowHeightSpans() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationMesh[43]) }
func (gdClass NavigationMesh) SetFilterBakingAabb(baking_aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[44], &baking_aabb) }
func (gdClass NavigationMesh) GetFilterBakingAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodNavigationMesh[45]) }
func (gdClass NavigationMesh) SetFilterBakingAabbOffset(baking_aabb_offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[46], &baking_aabb_offset) }
func (gdClass NavigationMesh) GetFilterBakingAabbOffset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationMesh[47]) }
func (gdClass NavigationMesh) SetVertices(vertices []Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[48], &vertices) }
func (gdClass NavigationMesh) GetVertices() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodNavigationMesh[49]) }
func (gdClass NavigationMesh) AddPolygon(polygon []int32)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[50], &polygon) }
func (gdClass NavigationMesh) GetPolygonCount() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationMesh[51]) }
func (gdClass NavigationMesh) GetPolygon(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodNavigationMesh[52], &idx) }
func (gdClass NavigationMesh) ClearPolygons()  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[53]) }
func (gdClass NavigationMesh) CreateFromMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMesh[54], &mesh) }
var NavigationMeshGenerator NavigationMeshGeneratorSingleton

type NavigationMeshGeneratorSingleton struct{self *NavigationMeshGeneratorSingleton; obj safeObject }
func NewNavigationMeshGeneratorSingleton(ctx Context, at *NavigationMeshGeneratorSingleton) NavigationMeshGeneratorSingleton { if at == nil { at = new(NavigationMeshGeneratorSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationMeshGeneratorSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationMeshGeneratorSingleton) owner() cObject { return gdClass.obj.get() }
func (NavigationMeshGeneratorSingleton) class() string { return "NavigationMeshGeneratorSingleton\000" }

func (gdClass NavigationMeshGeneratorSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodNavigationMeshGeneratorSingleton [2]cMethodBind
func (gdClass NavigationMeshGeneratorSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass NavigationMeshGeneratorSingleton) Bake(nav_mesh NavigationMesh, root_node Node)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMeshGeneratorSingleton[0], &nav_mesh, &root_node) }
func (gdClass NavigationMeshGeneratorSingleton) Clear(nav_mesh NavigationMesh)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationMeshGeneratorSingleton[1], &nav_mesh) }

type NavigationObstacle2D struct{self *NavigationObstacle2D; obj safeObject }
func NewNavigationObstacle2D(ctx Context, at *NavigationObstacle2D) NavigationObstacle2D { if at == nil { at = new(NavigationObstacle2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationObstacle2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationObstacle2D) owner() cObject { return gdClass.obj.get() }
func (NavigationObstacle2D) class() string { return "NavigationObstacle2D\000" }

func (gdClass NavigationObstacle2D) Node() Node { return Node{obj:gdClass.obj} }

var methodNavigationObstacle2D [5]cMethodBind
func (gdClass NavigationObstacle2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass NavigationObstacle2D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationObstacle2D[0]) }
func (gdClass NavigationObstacle2D) SetEstimateRadius(estimate_radius bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationObstacle2D[1], &estimate_radius) }
func (gdClass NavigationObstacle2D) IsRadiusEstimated() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationObstacle2D[2]) }
func (gdClass NavigationObstacle2D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationObstacle2D[3], &radius) }
func (gdClass NavigationObstacle2D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationObstacle2D[4]) }

type NavigationObstacle3D struct{self *NavigationObstacle3D; obj safeObject }
func NewNavigationObstacle3D(ctx Context, at *NavigationObstacle3D) NavigationObstacle3D { if at == nil { at = new(NavigationObstacle3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationObstacle3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationObstacle3D) owner() cObject { return gdClass.obj.get() }
func (NavigationObstacle3D) class() string { return "NavigationObstacle3D\000" }

func (gdClass NavigationObstacle3D) Node() Node { return Node{obj:gdClass.obj} }

var methodNavigationObstacle3D [5]cMethodBind
func (gdClass NavigationObstacle3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass NavigationObstacle3D) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationObstacle3D[0]) }
func (gdClass NavigationObstacle3D) SetEstimateRadius(estimate_radius bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationObstacle3D[1], &estimate_radius) }
func (gdClass NavigationObstacle3D) IsRadiusEstimated() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationObstacle3D[2]) }
func (gdClass NavigationObstacle3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationObstacle3D[3], &radius) }
func (gdClass NavigationObstacle3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationObstacle3D[4]) }

type NavigationPolygon struct{self *NavigationPolygon; obj safeObject }
func NewNavigationPolygon(ctx Context, at *NavigationPolygon) NavigationPolygon { if at == nil { at = new(NavigationPolygon) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass NavigationPolygon) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationPolygon) owner() cObject { return gdClass.obj.get() }
func (NavigationPolygon) class() string { return "NavigationPolygon\000" }

func (gdClass NavigationPolygon) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodNavigationPolygon [15]cMethodBind
func (gdClass NavigationPolygon) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass NavigationPolygon) SetVertices(vertices []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[0], &vertices) }
func (gdClass NavigationPolygon) GetVertices() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodNavigationPolygon[1]) }
func (gdClass NavigationPolygon) AddPolygon(polygon []int32)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[2], &polygon) }
func (gdClass NavigationPolygon) GetPolygonCount() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationPolygon[3]) }
func (gdClass NavigationPolygon) GetPolygon(idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodNavigationPolygon[4], &idx) }
func (gdClass NavigationPolygon) ClearPolygons()  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[5]) }
func (gdClass NavigationPolygon) GetMesh() NavigationMesh { return methodCall[NavigationMesh](gdClass.obj.get(), methodNavigationPolygon[6]) }
func (gdClass NavigationPolygon) AddOutline(outline []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[7], &outline) }
func (gdClass NavigationPolygon) AddOutlineAtIndex(outline []Vector2, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[8], &outline, &index) }
func (gdClass NavigationPolygon) GetOutlineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationPolygon[9]) }
func (gdClass NavigationPolygon) SetOutline(idx int64, outline []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[10], &idx, &outline) }
func (gdClass NavigationPolygon) GetOutline(idx int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodNavigationPolygon[11], &idx) }
func (gdClass NavigationPolygon) RemoveOutline(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[12], &idx) }
func (gdClass NavigationPolygon) ClearOutlines()  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[13]) }
func (gdClass NavigationPolygon) MakePolygonsFromOutlines()  { methodCall[struct{}](gdClass.obj.get(), methodNavigationPolygon[14]) }

type NavigationRegion2D struct{self *NavigationRegion2D; obj safeObject }
func NewNavigationRegion2D(ctx Context, at *NavigationRegion2D) NavigationRegion2D { if at == nil { at = new(NavigationRegion2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationRegion2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationRegion2D) owner() cObject { return gdClass.obj.get() }
func (NavigationRegion2D) class() string { return "NavigationRegion2D\000" }

func (gdClass NavigationRegion2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodNavigationRegion2D [13]cMethodBind
func (gdClass NavigationRegion2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass NavigationRegion2D) SetNavigationPolygon(navpoly NavigationPolygon)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[0], &navpoly) }
func (gdClass NavigationRegion2D) GetNavigationPolygon() NavigationPolygon { return methodCall[NavigationPolygon](gdClass.obj.get(), methodNavigationRegion2D[1]) }
func (gdClass NavigationRegion2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[2], &enabled) }
func (gdClass NavigationRegion2D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationRegion2D[3]) }
func (gdClass NavigationRegion2D) SetNavigationLayers(navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[4], &navigation_layers) }
func (gdClass NavigationRegion2D) GetNavigationLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationRegion2D[5]) }
func (gdClass NavigationRegion2D) SetNavigationLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[6], &layer_number, &value) }
func (gdClass NavigationRegion2D) GetNavigationLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationRegion2D[7], &layer_number) }
func (gdClass NavigationRegion2D) GetRegionRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationRegion2D[8]) }
func (gdClass NavigationRegion2D) SetEnterCost(enter_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[9], &enter_cost) }
func (gdClass NavigationRegion2D) GetEnterCost() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationRegion2D[10]) }
func (gdClass NavigationRegion2D) SetTravelCost(travel_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion2D[11], &travel_cost) }
func (gdClass NavigationRegion2D) GetTravelCost() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationRegion2D[12]) }

type NavigationRegion3D struct{self *NavigationRegion3D; obj safeObject }
func NewNavigationRegion3D(ctx Context, at *NavigationRegion3D) NavigationRegion3D { if at == nil { at = new(NavigationRegion3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationRegion3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationRegion3D) owner() cObject { return gdClass.obj.get() }
func (NavigationRegion3D) class() string { return "NavigationRegion3D\000" }

func (gdClass NavigationRegion3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodNavigationRegion3D [14]cMethodBind
func (gdClass NavigationRegion3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass NavigationRegion3D) SetNavigationMesh(navmesh NavigationMesh)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[0], &navmesh) }
func (gdClass NavigationRegion3D) GetNavigationMesh() NavigationMesh { return methodCall[NavigationMesh](gdClass.obj.get(), methodNavigationRegion3D[1]) }
func (gdClass NavigationRegion3D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[2], &enabled) }
func (gdClass NavigationRegion3D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNavigationRegion3D[3]) }
func (gdClass NavigationRegion3D) SetNavigationLayers(navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[4], &navigation_layers) }
func (gdClass NavigationRegion3D) GetNavigationLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationRegion3D[5]) }
func (gdClass NavigationRegion3D) SetNavigationLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[6], &layer_number, &value) }
func (gdClass NavigationRegion3D) GetNavigationLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationRegion3D[7], &layer_number) }
func (gdClass NavigationRegion3D) GetRegionRid() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationRegion3D[8]) }
func (gdClass NavigationRegion3D) SetEnterCost(enter_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[9], &enter_cost) }
func (gdClass NavigationRegion3D) GetEnterCost() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationRegion3D[10]) }
func (gdClass NavigationRegion3D) SetTravelCost(travel_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[11], &travel_cost) }
func (gdClass NavigationRegion3D) GetTravelCost() float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationRegion3D[12]) }
func (gdClass NavigationRegion3D) BakeNavigationMesh(on_thread bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationRegion3D[13], &on_thread) }
var NavigationServer2D NavigationServer2DSingleton

type NavigationServer2DSingleton struct{self *NavigationServer2DSingleton; obj safeObject }
func NewNavigationServer2DSingleton(ctx Context, at *NavigationServer2DSingleton) NavigationServer2DSingleton { if at == nil { at = new(NavigationServer2DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationServer2DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationServer2DSingleton) owner() cObject { return gdClass.obj.get() }
func (NavigationServer2DSingleton) class() string { return "NavigationServer2DSingleton\000" }

func (gdClass NavigationServer2DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodNavigationServer2DSingleton [43]cMethodBind
func (gdClass NavigationServer2DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass NavigationServer2DSingleton) GetMaps() Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer2DSingleton[0]) }
func (gdClass NavigationServer2DSingleton) MapCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[1]) }
func (gdClass NavigationServer2DSingleton) MapSetActive(mapping RID, active bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[2], &mapping, &active) }
func (gdClass NavigationServer2DSingleton) MapIsActive(mapping RID) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer2DSingleton[3], &mapping) }
func (gdClass NavigationServer2DSingleton) MapSetCellSize(mapping RID, cell_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[4], &mapping, &cell_size) }
func (gdClass NavigationServer2DSingleton) MapGetCellSize(mapping RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer2DSingleton[5], &mapping) }
func (gdClass NavigationServer2DSingleton) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[6], &mapping, &margin) }
func (gdClass NavigationServer2DSingleton) MapGetEdgeConnectionMargin(mapping RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer2DSingleton[7], &mapping) }
func (gdClass NavigationServer2DSingleton) MapGetPath(mapping RID, origin Vector2, destination Vector2, optimize bool, navigation_layers int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodNavigationServer2DSingleton[8], &mapping, &origin, &destination, &optimize, &navigation_layers) }
func (gdClass NavigationServer2DSingleton) MapGetClosestPoint(mapping RID, to_point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationServer2DSingleton[9], &mapping, &to_point) }
func (gdClass NavigationServer2DSingleton) MapGetClosestPointOwner(mapping RID, to_point Vector2) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[10], &mapping, &to_point) }
func (gdClass NavigationServer2DSingleton) MapGetRegions(mapping RID) Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer2DSingleton[11], &mapping) }
func (gdClass NavigationServer2DSingleton) MapGetAgents(mapping RID) Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer2DSingleton[12], &mapping) }
func (gdClass NavigationServer2DSingleton) MapForceUpdate(mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[13], &mapping) }
func (gdClass NavigationServer2DSingleton) RegionCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[14]) }
func (gdClass NavigationServer2DSingleton) RegionSetEnterCost(region RID, enter_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[15], &region, &enter_cost) }
func (gdClass NavigationServer2DSingleton) RegionGetEnterCost(region RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer2DSingleton[16], &region) }
func (gdClass NavigationServer2DSingleton) RegionSetTravelCost(region RID, travel_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[17], &region, &travel_cost) }
func (gdClass NavigationServer2DSingleton) RegionGetTravelCost(region RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer2DSingleton[18], &region) }
func (gdClass NavigationServer2DSingleton) RegionOwnsPoint(region RID, point Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer2DSingleton[19], &region, &point) }
func (gdClass NavigationServer2DSingleton) RegionSetMap(region RID, mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[20], &region, &mapping) }
func (gdClass NavigationServer2DSingleton) RegionGetMap(region RID) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[21], &region) }
func (gdClass NavigationServer2DSingleton) RegionSetNavigationLayers(region RID, navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[22], &region, &navigation_layers) }
func (gdClass NavigationServer2DSingleton) RegionGetNavigationLayers(region RID) int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationServer2DSingleton[23], &region) }
func (gdClass NavigationServer2DSingleton) RegionSetTransform(region RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[24], &region, &transform) }
func (gdClass NavigationServer2DSingleton) RegionSetNavpoly(region RID, nav_poly NavigationPolygon)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[25], &region, &nav_poly) }
func (gdClass NavigationServer2DSingleton) RegionGetConnectionsCount(region RID) int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationServer2DSingleton[26], &region) }
func (gdClass NavigationServer2DSingleton) RegionGetConnectionPathwayStart(region RID, connection int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationServer2DSingleton[27], &region, &connection) }
func (gdClass NavigationServer2DSingleton) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNavigationServer2DSingleton[28], &region, &connection) }
func (gdClass NavigationServer2DSingleton) AgentCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[29]) }
func (gdClass NavigationServer2DSingleton) AgentSetMap(agent RID, mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[30], &agent, &mapping) }
func (gdClass NavigationServer2DSingleton) AgentGetMap(agent RID) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer2DSingleton[31], &agent) }
func (gdClass NavigationServer2DSingleton) AgentSetNeighborDistance(agent RID, distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[32], &agent, &distance) }
func (gdClass NavigationServer2DSingleton) AgentSetMaxNeighbors(agent RID, count int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[33], &agent, &count) }
func (gdClass NavigationServer2DSingleton) AgentSetTimeHorizon(agent RID, time float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[34], &agent, &time) }
func (gdClass NavigationServer2DSingleton) AgentSetRadius(agent RID, radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[35], &agent, &radius) }
func (gdClass NavigationServer2DSingleton) AgentSetMaxSpeed(agent RID, max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[36], &agent, &max_speed) }
func (gdClass NavigationServer2DSingleton) AgentSetVelocity(agent RID, velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[37], &agent, &velocity) }
func (gdClass NavigationServer2DSingleton) AgentSetTargetVelocity(agent RID, target_velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[38], &agent, &target_velocity) }
func (gdClass NavigationServer2DSingleton) AgentSetPosition(agent RID, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[39], &agent, &position) }
func (gdClass NavigationServer2DSingleton) AgentIsMapChanged(agent RID) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer2DSingleton[40], &agent) }
func (gdClass NavigationServer2DSingleton) AgentSetCallback(agent RID, receiver Object, method Name, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[41], &agent, &receiver, &method, &userdata) }
func (gdClass NavigationServer2DSingleton) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer2DSingleton[42], &rid) }
var NavigationServer3D NavigationServer3DSingleton

type NavigationServer3DSingleton struct{self *NavigationServer3DSingleton; obj safeObject }
func NewNavigationServer3DSingleton(ctx Context, at *NavigationServer3DSingleton) NavigationServer3DSingleton { if at == nil { at = new(NavigationServer3DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NavigationServer3DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NavigationServer3DSingleton) owner() cObject { return gdClass.obj.get() }
func (NavigationServer3DSingleton) class() string { return "NavigationServer3DSingleton\000" }

func (gdClass NavigationServer3DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodNavigationServer3DSingleton [50]cMethodBind
func (gdClass NavigationServer3DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass NavigationServer3DSingleton) GetMaps() Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer3DSingleton[0]) }
func (gdClass NavigationServer3DSingleton) MapCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[1]) }
func (gdClass NavigationServer3DSingleton) MapSetActive(mapping RID, active bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[2], &mapping, &active) }
func (gdClass NavigationServer3DSingleton) MapIsActive(mapping RID) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer3DSingleton[3], &mapping) }
func (gdClass NavigationServer3DSingleton) MapSetUp(mapping RID, up Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[4], &mapping, &up) }
func (gdClass NavigationServer3DSingleton) MapGetUp(mapping RID) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[5], &mapping) }
func (gdClass NavigationServer3DSingleton) MapSetCellSize(mapping RID, cell_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[6], &mapping, &cell_size) }
func (gdClass NavigationServer3DSingleton) MapGetCellSize(mapping RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer3DSingleton[7], &mapping) }
func (gdClass NavigationServer3DSingleton) MapSetEdgeConnectionMargin(mapping RID, margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[8], &mapping, &margin) }
func (gdClass NavigationServer3DSingleton) MapGetEdgeConnectionMargin(mapping RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer3DSingleton[9], &mapping) }
func (gdClass NavigationServer3DSingleton) MapGetPath(mapping RID, origin Vector3, destination Vector3, optimize bool, navigation_layers int64) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[10], &mapping, &origin, &destination, &optimize, &navigation_layers) }
func (gdClass NavigationServer3DSingleton) MapGetClosestPointToSegment(mapping RID, start Vector3, end Vector3, use_collision bool) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[11], &mapping, &start, &end, &use_collision) }
func (gdClass NavigationServer3DSingleton) MapGetClosestPoint(mapping RID, to_point Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[12], &mapping, &to_point) }
func (gdClass NavigationServer3DSingleton) MapGetClosestPointNormal(mapping RID, to_point Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[13], &mapping, &to_point) }
func (gdClass NavigationServer3DSingleton) MapGetClosestPointOwner(mapping RID, to_point Vector3) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[14], &mapping, &to_point) }
func (gdClass NavigationServer3DSingleton) MapGetRegions(mapping RID) Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer3DSingleton[15], &mapping) }
func (gdClass NavigationServer3DSingleton) MapGetAgents(mapping RID) Array { return methodCall[Array](gdClass.obj.get(), methodNavigationServer3DSingleton[16], &mapping) }
func (gdClass NavigationServer3DSingleton) MapForceUpdate(mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[17], &mapping) }
func (gdClass NavigationServer3DSingleton) RegionCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[18]) }
func (gdClass NavigationServer3DSingleton) RegionSetEnterCost(region RID, enter_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[19], &region, &enter_cost) }
func (gdClass NavigationServer3DSingleton) RegionGetEnterCost(region RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer3DSingleton[20], &region) }
func (gdClass NavigationServer3DSingleton) RegionSetTravelCost(region RID, travel_cost float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[21], &region, &travel_cost) }
func (gdClass NavigationServer3DSingleton) RegionGetTravelCost(region RID) float64 { return methodCall[float64](gdClass.obj.get(), methodNavigationServer3DSingleton[22], &region) }
func (gdClass NavigationServer3DSingleton) RegionOwnsPoint(region RID, point Vector3) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer3DSingleton[23], &region, &point) }
func (gdClass NavigationServer3DSingleton) RegionSetMap(region RID, mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[24], &region, &mapping) }
func (gdClass NavigationServer3DSingleton) RegionGetMap(region RID) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[25], &region) }
func (gdClass NavigationServer3DSingleton) RegionSetNavigationLayers(region RID, navigation_layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[26], &region, &navigation_layers) }
func (gdClass NavigationServer3DSingleton) RegionGetNavigationLayers(region RID) int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationServer3DSingleton[27], &region) }
func (gdClass NavigationServer3DSingleton) RegionSetTransform(region RID, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[28], &region, &transform) }
func (gdClass NavigationServer3DSingleton) RegionSetNavmesh(region RID, nav_mesh NavigationMesh)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[29], &region, &nav_mesh) }
func (gdClass NavigationServer3DSingleton) RegionBakeNavmesh(mesh NavigationMesh, node Node)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[30], &mesh, &node) }
func (gdClass NavigationServer3DSingleton) RegionGetConnectionsCount(region RID) int64 { return methodCall[int64](gdClass.obj.get(), methodNavigationServer3DSingleton[31], &region) }
func (gdClass NavigationServer3DSingleton) RegionGetConnectionPathwayStart(region RID, connection int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[32], &region, &connection) }
func (gdClass NavigationServer3DSingleton) RegionGetConnectionPathwayEnd(region RID, connection int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNavigationServer3DSingleton[33], &region, &connection) }
func (gdClass NavigationServer3DSingleton) AgentCreate() RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[34]) }
func (gdClass NavigationServer3DSingleton) AgentSetMap(agent RID, mapping RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[35], &agent, &mapping) }
func (gdClass NavigationServer3DSingleton) AgentGetMap(agent RID) RID { return methodCall[RID](gdClass.obj.get(), methodNavigationServer3DSingleton[36], &agent) }
func (gdClass NavigationServer3DSingleton) AgentSetNeighborDistance(agent RID, distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[37], &agent, &distance) }
func (gdClass NavigationServer3DSingleton) AgentSetMaxNeighbors(agent RID, count int64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[38], &agent, &count) }
func (gdClass NavigationServer3DSingleton) AgentSetTimeHorizon(agent RID, time float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[39], &agent, &time) }
func (gdClass NavigationServer3DSingleton) AgentSetRadius(agent RID, radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[40], &agent, &radius) }
func (gdClass NavigationServer3DSingleton) AgentSetMaxSpeed(agent RID, max_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[41], &agent, &max_speed) }
func (gdClass NavigationServer3DSingleton) AgentSetVelocity(agent RID, velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[42], &agent, &velocity) }
func (gdClass NavigationServer3DSingleton) AgentSetTargetVelocity(agent RID, target_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[43], &agent, &target_velocity) }
func (gdClass NavigationServer3DSingleton) AgentSetPosition(agent RID, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[44], &agent, &position) }
func (gdClass NavigationServer3DSingleton) AgentIsMapChanged(agent RID) bool { return methodCall[bool](gdClass.obj.get(), methodNavigationServer3DSingleton[45], &agent) }
func (gdClass NavigationServer3DSingleton) AgentSetCallback(agent RID, receiver Object, method Name, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[46], &agent, &receiver, &method, &userdata) }
func (gdClass NavigationServer3DSingleton) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[47], &rid) }
func (gdClass NavigationServer3DSingleton) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[48], &active) }
func (gdClass NavigationServer3DSingleton) Process(delta_time float64)  { methodCall[struct{}](gdClass.obj.get(), methodNavigationServer3DSingleton[49], &delta_time) }

type NinePatchRectAxisStretchMode int64

const (
	NinePatchRectAxisStretchModeStretch NinePatchRectAxisStretchMode = 0
	NinePatchRectAxisStretchModeTile NinePatchRectAxisStretchMode = 1
	NinePatchRectAxisStretchModeTileFit NinePatchRectAxisStretchMode = 2
)

type NinePatchRect struct{self *NinePatchRect; obj safeObject }
func NewNinePatchRect(ctx Context, at *NinePatchRect) NinePatchRect { if at == nil { at = new(NinePatchRect) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass NinePatchRect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NinePatchRect) owner() cObject { return gdClass.obj.get() }
func (NinePatchRect) class() string { return "NinePatchRect\000" }

func (gdClass NinePatchRect) Control() Control { return Control{obj:gdClass.obj} }

var methodNinePatchRect [12]cMethodBind
func (gdClass NinePatchRect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass NinePatchRect) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[0], &texture) }
func (gdClass NinePatchRect) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodNinePatchRect[1]) }
func (gdClass NinePatchRect) SetPatchMargin(margin Side, value int64)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[2], &margin, &value) }
func (gdClass NinePatchRect) GetPatchMargin(margin Side) int64 { return methodCall[int64](gdClass.obj.get(), methodNinePatchRect[3], &margin) }
func (gdClass NinePatchRect) SetRegionRect(rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[4], &rect) }
func (gdClass NinePatchRect) GetRegionRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodNinePatchRect[5]) }
func (gdClass NinePatchRect) SetDrawCenter(draw_center bool)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[6], &draw_center) }
func (gdClass NinePatchRect) IsDrawCenterEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNinePatchRect[7]) }
func (gdClass NinePatchRect) SetHAxisStretchMode(mode NinePatchRectAxisStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[8], &mode) }
func (gdClass NinePatchRect) GetHAxisStretchMode() NinePatchRectAxisStretchMode { return methodCall[NinePatchRectAxisStretchMode](gdClass.obj.get(), methodNinePatchRect[9]) }
func (gdClass NinePatchRect) SetVAxisStretchMode(mode NinePatchRectAxisStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodNinePatchRect[10], &mode) }
func (gdClass NinePatchRect) GetVAxisStretchMode() NinePatchRectAxisStretchMode { return methodCall[NinePatchRectAxisStretchMode](gdClass.obj.get(), methodNinePatchRect[11]) }

type NodeProcessMode int64

const (
	NodeProcessModeInherit NodeProcessMode = 0
	NodeProcessModePausable NodeProcessMode = 1
	NodeProcessModeWhenPaused NodeProcessMode = 2
	NodeProcessModeAlways NodeProcessMode = 3
	NodeProcessModeDisabled NodeProcessMode = 4
)

type NodeDuplicateFlags int64

const (
	NodeDuplicateSignals NodeDuplicateFlags = 1
	NodeDuplicateGroups NodeDuplicateFlags = 2
	NodeDuplicateScripts NodeDuplicateFlags = 4
	NodeDuplicateUseInstancing NodeDuplicateFlags = 8
)

type NodeInternalMode int64

const (
	NodeInternalModeDisabled NodeInternalMode = 0
	NodeInternalModeFront NodeInternalMode = 1
	NodeInternalModeBack NodeInternalMode = 2
)

type Node struct{self *Node; obj safeObject }
func NewNode(ctx Context, at *Node) Node { if at == nil { at = new(Node) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Node) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Node) owner() cObject { return gdClass.obj.get() }
func (Node) class() string { return "Node\000" }

func (gdClass Node) Object() Object { return Object{obj:gdClass.obj} }

var methodNode [87]cMethodBind
func (gdClass Node) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ Process(delta float64)  }{}).Elem()) {
			return rtype.MethodByName(`Process`)
		}
		return
	case "_physics_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ PhysicsProcess(delta float64)  }{}).Elem()) {
			return rtype.MethodByName(`PhysicsProcess`)
		}
		return
	case "_enter_tree":
		if rtype.Implements(reflect.TypeOf([0]interface{ EnterTree()  }{}).Elem()) {
			return rtype.MethodByName(`EnterTree`)
		}
		return
	case "_exit_tree":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExitTree()  }{}).Elem()) {
			return rtype.MethodByName(`ExitTree`)
		}
		return
	case "_ready":
		if rtype.Implements(reflect.TypeOf([0]interface{ Ready()  }{}).Elem()) {
			return rtype.MethodByName(`Ready`)
		}
		return
	case "_get_configuration_warnings":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConfigurationWarnings() []string }{}).Elem()) {
			return rtype.MethodByName(`GetConfigurationWarnings`)
		}
		return
	case "_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ Input(event InputEvent)  }{}).Elem()) {
			return rtype.MethodByName(`Input`)
		}
		return
	case "_shortcut_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShortcutInput(event InputEvent)  }{}).Elem()) {
			return rtype.MethodByName(`ShortcutInput`)
		}
		return
	case "_unhandled_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ UnhandledInput(event InputEvent)  }{}).Elem()) {
			return rtype.MethodByName(`UnhandledInput`)
		}
		return
	case "_unhandled_key_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ UnhandledKeyInput(event InputEvent)  }{}).Elem()) {
			return rtype.MethodByName(`UnhandledKeyInput`)
		}
		return
	}
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass Node) AddSibling(sibling Node, legible_unique_name bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[0], &sibling, &legible_unique_name) }
func (gdClass Node) SetName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodNode[1], &name) }
func (gdClass Node) GetName() Name { return methodCall[Name](gdClass.obj.get(), methodNode[2]) }
func (gdClass Node) AddChild(node Node, legible_unique_name bool, internal NodeInternalMode)  { methodCall[struct{}](gdClass.obj.get(), methodNode[3], &node, &legible_unique_name, &internal) }
func (gdClass Node) RemoveChild(node Node)  { methodCall[struct{}](gdClass.obj.get(), methodNode[4], &node) }
func (gdClass Node) GetChildCount(include_internal bool) int64 { return methodCall[int64](gdClass.obj.get(), methodNode[5], &include_internal) }
func (gdClass Node) GetChildren(include_internal bool) Array { return methodCall[Array](gdClass.obj.get(), methodNode[6], &include_internal) }
func (gdClass Node) GetChild(idx int64, include_internal bool) Node { return methodCall[Node](gdClass.obj.get(), methodNode[7], &idx, &include_internal) }
func (gdClass Node) HasNode(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodNode[8], &path) }
func (gdClass Node) GetNode(path NodePath) Node { return methodCall[Node](gdClass.obj.get(), methodNode[9], &path) }
func (gdClass Node) GetNodeOrNull(path NodePath) Node { return methodCall[Node](gdClass.obj.get(), methodNode[10], &path) }
func (gdClass Node) GetParent() Node { return methodCall[Node](gdClass.obj.get(), methodNode[11]) }
func (gdClass Node) FindChild(pattern string, recursive bool, owned bool) Node { return methodCall[Node](gdClass.obj.get(), methodNode[12], &pattern, &recursive, &owned) }
func (gdClass Node) FindChildren(pattern string, atype string, recursive bool, owned bool) Array { return methodCall[Array](gdClass.obj.get(), methodNode[13], &pattern, &atype, &recursive, &owned) }
func (gdClass Node) FindParent(pattern string) Node { return methodCall[Node](gdClass.obj.get(), methodNode[14], &pattern) }
func (gdClass Node) HasNodeAndResource(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodNode[15], &path) }
func (gdClass Node) GetNodeAndResource(path NodePath) Array { return methodCall[Array](gdClass.obj.get(), methodNode[16], &path) }
func (gdClass Node) IsInsideTree() bool { return methodCall[bool](gdClass.obj.get(), methodNode[17]) }
func (gdClass Node) IsAncestorOf(node Node) bool { return methodCall[bool](gdClass.obj.get(), methodNode[18], &node) }
func (gdClass Node) IsGreaterThan(node Node) bool { return methodCall[bool](gdClass.obj.get(), methodNode[19], &node) }
func (gdClass Node) GetPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodNode[20]) }
func (gdClass Node) GetPathTo(node Node) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodNode[21], &node) }
func (gdClass Node) AddToGroup(group Name, persistent bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[22], &group, &persistent) }
func (gdClass Node) RemoveFromGroup(group Name)  { methodCall[struct{}](gdClass.obj.get(), methodNode[23], &group) }
func (gdClass Node) IsInGroup(group Name) bool { return methodCall[bool](gdClass.obj.get(), methodNode[24], &group) }
func (gdClass Node) MoveChild(child_node Node, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodNode[25], &child_node, &to_position) }
func (gdClass Node) GetGroups() Array { return methodCall[Array](gdClass.obj.get(), methodNode[26]) }
func (gdClass Node) Raise()  { methodCall[struct{}](gdClass.obj.get(), methodNode[27]) }
func (gdClass Node) SetOwner(owner Node)  { methodCall[struct{}](gdClass.obj.get(), methodNode[28], &owner) }
func (gdClass Node) GetOwner() Node { return methodCall[Node](gdClass.obj.get(), methodNode[29]) }
func (gdClass Node) RemoveAndSkip()  { methodCall[struct{}](gdClass.obj.get(), methodNode[30]) }
func (gdClass Node) GetIndex(include_internal bool) int64 { return methodCall[int64](gdClass.obj.get(), methodNode[31], &include_internal) }
func (gdClass Node) PrintTree()  { methodCall[struct{}](gdClass.obj.get(), methodNode[32]) }
func (gdClass Node) PrintTreePretty()  { methodCall[struct{}](gdClass.obj.get(), methodNode[33]) }
func (gdClass Node) SetSceneFilePath(scene_file_path string)  { methodCall[struct{}](gdClass.obj.get(), methodNode[34], &scene_file_path) }
func (gdClass Node) GetSceneFilePath() string { return methodCall[string](gdClass.obj.get(), methodNode[35]) }
func (gdClass Node) PropagateNotification(what int64)  { methodCall[struct{}](gdClass.obj.get(), methodNode[36], &what) }
func (gdClass Node) PropagateCall(method Name, args Array, parent_first bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[37], &method, &args, &parent_first) }
func (gdClass Node) SetPhysicsProcess(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[38], &enable) }
func (gdClass Node) GetPhysicsProcessDeltaTime() float64 { return methodCall[float64](gdClass.obj.get(), methodNode[39]) }
func (gdClass Node) IsPhysicsProcessing() bool { return methodCall[bool](gdClass.obj.get(), methodNode[40]) }
func (gdClass Node) GetProcessDeltaTime() float64 { return methodCall[float64](gdClass.obj.get(), methodNode[41]) }
func (gdClass Node) SetProcess(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[42], &enable) }
func (gdClass Node) SetProcessPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodNode[43], &priority) }
func (gdClass Node) GetProcessPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodNode[44]) }
func (gdClass Node) IsProcessing() bool { return methodCall[bool](gdClass.obj.get(), methodNode[45]) }
func (gdClass Node) SetProcessInput(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[46], &enable) }
func (gdClass Node) IsProcessingInput() bool { return methodCall[bool](gdClass.obj.get(), methodNode[47]) }
func (gdClass Node) SetProcessShortcutInput(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[48], &enable) }
func (gdClass Node) IsProcessingShortcutInput() bool { return methodCall[bool](gdClass.obj.get(), methodNode[49]) }
func (gdClass Node) SetProcessUnhandledInput(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[50], &enable) }
func (gdClass Node) IsProcessingUnhandledInput() bool { return methodCall[bool](gdClass.obj.get(), methodNode[51]) }
func (gdClass Node) SetProcessUnhandledKeyInput(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[52], &enable) }
func (gdClass Node) IsProcessingUnhandledKeyInput() bool { return methodCall[bool](gdClass.obj.get(), methodNode[53]) }
func (gdClass Node) SetProcessMode(mode NodeProcessMode)  { methodCall[struct{}](gdClass.obj.get(), methodNode[54], &mode) }
func (gdClass Node) GetProcessMode() NodeProcessMode { return methodCall[NodeProcessMode](gdClass.obj.get(), methodNode[55]) }
func (gdClass Node) CanProcess() bool { return methodCall[bool](gdClass.obj.get(), methodNode[56]) }
func (gdClass Node) PrintOrphanNodes()  { methodCall[struct{}](gdClass.obj.get(), methodNode[57]) }
func (gdClass Node) SetDisplayFolded(fold bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[58], &fold) }
func (gdClass Node) IsDisplayedFolded() bool { return methodCall[bool](gdClass.obj.get(), methodNode[59]) }
func (gdClass Node) SetProcessInternal(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[60], &enable) }
func (gdClass Node) IsProcessingInternal() bool { return methodCall[bool](gdClass.obj.get(), methodNode[61]) }
func (gdClass Node) SetPhysicsProcessInternal(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[62], &enable) }
func (gdClass Node) IsPhysicsProcessingInternal() bool { return methodCall[bool](gdClass.obj.get(), methodNode[63]) }
func (gdClass Node) GetTree() SceneTree { return methodCall[SceneTree](gdClass.obj.get(), methodNode[64]) }
func (gdClass Node) CreateTween() Tween { return methodCall[Tween](gdClass.obj.get(), methodNode[65]) }
func (gdClass Node) Duplicate(flags int64) Node { return methodCall[Node](gdClass.obj.get(), methodNode[66], &flags) }
func (gdClass Node) ReplaceBy(node Node, keep_groups bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[67], &node, &keep_groups) }
func (gdClass Node) SetSceneInstanceLoadPlaceholder(load_placeholder bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[68], &load_placeholder) }
func (gdClass Node) GetSceneInstanceLoadPlaceholder() bool { return methodCall[bool](gdClass.obj.get(), methodNode[69]) }
func (gdClass Node) SetEditableInstance(node Node, is_editable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[70], &node, &is_editable) }
func (gdClass Node) IsEditableInstance(node Node) bool { return methodCall[bool](gdClass.obj.get(), methodNode[71], &node) }
func (gdClass Node) GetViewport() Viewport { return methodCall[Viewport](gdClass.obj.get(), methodNode[72]) }
func (gdClass Node) QueueFree()  { methodCall[struct{}](gdClass.obj.get(), methodNode[73]) }
func (gdClass Node) RequestReady()  { methodCall[struct{}](gdClass.obj.get(), methodNode[74]) }
func (gdClass Node) SetMultiplayerAuthority(id int64, recursive bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[75], &id, &recursive) }
func (gdClass Node) GetMultiplayerAuthority() int64 { return methodCall[int64](gdClass.obj.get(), methodNode[76]) }
func (gdClass Node) IsMultiplayerAuthority() bool { return methodCall[bool](gdClass.obj.get(), methodNode[77]) }
func (gdClass Node) GetMultiplayer() MultiplayerAPI { return methodCall[MultiplayerAPI](gdClass.obj.get(), methodNode[78]) }
func (gdClass Node) RpcConfig(method Name, config any)  { methodCall[struct{}](gdClass.obj.get(), methodNode[79], &method, &config) }
func (gdClass Node) SetEditorDescription(editor_description string)  { methodCall[struct{}](gdClass.obj.get(), methodNode[80], &editor_description) }
func (gdClass Node) GetEditorDescription() string { return methodCall[string](gdClass.obj.get(), methodNode[81]) }
func (gdClass Node) SetUniqueNameInOwner(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode[82], &enable) }
func (gdClass Node) IsUniqueNameInOwner() bool { return methodCall[bool](gdClass.obj.get(), methodNode[83]) }
func (gdClass Node) Rpc(method Name) int64 { return methodCall[int64](gdClass.obj.get(), methodNode[84], &method) }
func (gdClass Node) RpcId(peer_id int64, method Name) int64 { return methodCall[int64](gdClass.obj.get(), methodNode[85], &peer_id, &method) }
func (gdClass Node) UpdateConfigurationWarnings()  { methodCall[struct{}](gdClass.obj.get(), methodNode[86]) }

type Node2D struct{self *Node2D; obj safeObject }
func NewNode2D(ctx Context, at *Node2D) Node2D { if at == nil { at = new(Node2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Node2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Node2D) owner() cObject { return gdClass.obj.get() }
func (Node2D) class() string { return "Node2D\000" }

func (gdClass Node2D) CanvasItem() CanvasItem { return CanvasItem{obj:gdClass.obj} }

var methodNode2D [35]cMethodBind
func (gdClass Node2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CanvasItem().virtual(rtype, name)
}
func (gdClass Node2D) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[0], &position) }
func (gdClass Node2D) SetRotation(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[1], &radians) }
func (gdClass Node2D) SetSkew(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[2], &radians) }
func (gdClass Node2D) SetScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[3], &scale) }
func (gdClass Node2D) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[4]) }
func (gdClass Node2D) GetRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodNode2D[5]) }
func (gdClass Node2D) GetSkew() float64 { return methodCall[float64](gdClass.obj.get(), methodNode2D[6]) }
func (gdClass Node2D) GetScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[7]) }
func (gdClass Node2D) Rotate(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[8], &radians) }
func (gdClass Node2D) MoveLocalX(delta float64, scaled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[9], &delta, &scaled) }
func (gdClass Node2D) MoveLocalY(delta float64, scaled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[10], &delta, &scaled) }
func (gdClass Node2D) Translate(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[11], &offset) }
func (gdClass Node2D) GlobalTranslate(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[12], &offset) }
func (gdClass Node2D) ApplyScale(ratio Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[13], &ratio) }
func (gdClass Node2D) SetGlobalPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[14], &position) }
func (gdClass Node2D) GetGlobalPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[15]) }
func (gdClass Node2D) SetGlobalRotation(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[16], &radians) }
func (gdClass Node2D) GetGlobalRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodNode2D[17]) }
func (gdClass Node2D) SetGlobalSkew(radians float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[18], &radians) }
func (gdClass Node2D) GetGlobalSkew() float64 { return methodCall[float64](gdClass.obj.get(), methodNode2D[19]) }
func (gdClass Node2D) SetGlobalScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[20], &scale) }
func (gdClass Node2D) GetGlobalScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[21]) }
func (gdClass Node2D) SetTransform(xform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[22], &xform) }
func (gdClass Node2D) SetGlobalTransform(xform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[23], &xform) }
func (gdClass Node2D) LookAt(point Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[24], &point) }
func (gdClass Node2D) GetAngleTo(point Vector2) float64 { return methodCall[float64](gdClass.obj.get(), methodNode2D[25], &point) }
func (gdClass Node2D) ToLocal(global_point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[26], &global_point) }
func (gdClass Node2D) ToGlobal(local_point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodNode2D[27], &local_point) }
func (gdClass Node2D) SetZIndex(z_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[28], &z_index) }
func (gdClass Node2D) GetZIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodNode2D[29]) }
func (gdClass Node2D) SetZAsRelative(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[30], &enable) }
func (gdClass Node2D) IsZRelative() bool { return methodCall[bool](gdClass.obj.get(), methodNode2D[31]) }
func (gdClass Node2D) SetYSortEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode2D[32], &enabled) }
func (gdClass Node2D) IsYSortEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNode2D[33]) }
func (gdClass Node2D) GetRelativeTransformToParent(parent Node) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodNode2D[34], &parent) }

type Node3DRotationEditMode int64

const (
	Node3DRotationEditModeEuler Node3DRotationEditMode = 0
	Node3DRotationEditModeQuaternion Node3DRotationEditMode = 1
	Node3DRotationEditModeBasis Node3DRotationEditMode = 2
)

type Node3DRotationOrder int64

const (
	Node3DRotationOrderXyz Node3DRotationOrder = 0
	Node3DRotationOrderXzy Node3DRotationOrder = 1
	Node3DRotationOrderYxz Node3DRotationOrder = 2
	Node3DRotationOrderYzx Node3DRotationOrder = 3
	Node3DRotationOrderZxy Node3DRotationOrder = 4
	Node3DRotationOrderZyx Node3DRotationOrder = 5
)

type Node3D struct{self *Node3D; obj safeObject }
func NewNode3D(ctx Context, at *Node3D) Node3D { if at == nil { at = new(Node3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Node3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Node3D) owner() cObject { return gdClass.obj.get() }
func (Node3D) class() string { return "Node3D\000" }

func (gdClass Node3D) Node() Node { return Node{obj:gdClass.obj} }

var methodNode3D [64]cMethodBind
func (gdClass Node3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass Node3D) SetTransform(local Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[0], &local) }
func (gdClass Node3D) GetTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodNode3D[1]) }
func (gdClass Node3D) SetPosition(position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[2], &position) }
func (gdClass Node3D) GetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[3]) }
func (gdClass Node3D) SetRotation(euler Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[4], &euler) }
func (gdClass Node3D) GetRotation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[5]) }
func (gdClass Node3D) SetRotationOrder(order Node3DRotationOrder)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[6], &order) }
func (gdClass Node3D) GetRotationOrder() Node3DRotationOrder { return methodCall[Node3DRotationOrder](gdClass.obj.get(), methodNode3D[7]) }
func (gdClass Node3D) SetRotationEditMode(edit_mode Node3DRotationEditMode)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[8], &edit_mode) }
func (gdClass Node3D) GetRotationEditMode() Node3DRotationEditMode { return methodCall[Node3DRotationEditMode](gdClass.obj.get(), methodNode3D[9]) }
func (gdClass Node3D) SetScale(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[10], &scale) }
func (gdClass Node3D) GetScale() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[11]) }
func (gdClass Node3D) SetQuaternion(quaternion Quaternion)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[12], &quaternion) }
func (gdClass Node3D) GetQuaternion() Quaternion { return methodCall[Quaternion](gdClass.obj.get(), methodNode3D[13]) }
func (gdClass Node3D) SetBasis(basis Basis)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[14], &basis) }
func (gdClass Node3D) GetBasis() Basis { return methodCall[Basis](gdClass.obj.get(), methodNode3D[15]) }
func (gdClass Node3D) SetGlobalTransform(global Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[16], &global) }
func (gdClass Node3D) GetGlobalTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodNode3D[17]) }
func (gdClass Node3D) SetGlobalPosition(position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[18], &position) }
func (gdClass Node3D) GetGlobalPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[19]) }
func (gdClass Node3D) SetGlobalRotation(radians Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[20], &radians) }
func (gdClass Node3D) GetGlobalRotation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[21]) }
func (gdClass Node3D) GetParentNode3d() Node3D { return methodCall[Node3D](gdClass.obj.get(), methodNode3D[22]) }
func (gdClass Node3D) SetIgnoreTransformNotification(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[23], &enabled) }
func (gdClass Node3D) SetAsTopLevel(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[24], &enable) }
func (gdClass Node3D) IsSetAsTopLevel() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[25]) }
func (gdClass Node3D) SetDisableScale(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[26], &disable) }
func (gdClass Node3D) IsScaleDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[27]) }
func (gdClass Node3D) GetWorld3d() World3D { return methodCall[World3D](gdClass.obj.get(), methodNode3D[28]) }
func (gdClass Node3D) ForceUpdateTransform()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[29]) }
func (gdClass Node3D) SetVisibilityParent(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[30], &path) }
func (gdClass Node3D) GetVisibilityParent() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodNode3D[31]) }
func (gdClass Node3D) UpdateGizmos()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[32]) }
func (gdClass Node3D) AddGizmo(gizmo Node3DGizmo)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[33], &gizmo) }
func (gdClass Node3D) GetGizmos() Array { return methodCall[Array](gdClass.obj.get(), methodNode3D[34]) }
func (gdClass Node3D) ClearGizmos()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[35]) }
func (gdClass Node3D) SetSubgizmoSelection(gizmo Node3DGizmo, id int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[36], &gizmo, &id, &transform) }
func (gdClass Node3D) ClearSubgizmoSelection()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[37]) }
func (gdClass Node3D) SetVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[38], &visible) }
func (gdClass Node3D) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[39]) }
func (gdClass Node3D) IsVisibleInTree() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[40]) }
func (gdClass Node3D) Show()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[41]) }
func (gdClass Node3D) Hide()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[42]) }
func (gdClass Node3D) SetNotifyLocalTransform(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[43], &enable) }
func (gdClass Node3D) IsLocalTransformNotificationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[44]) }
func (gdClass Node3D) SetNotifyTransform(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[45], &enable) }
func (gdClass Node3D) IsTransformNotificationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodNode3D[46]) }
func (gdClass Node3D) Rotate(axis Vector3, angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[47], &axis, &angle) }
func (gdClass Node3D) GlobalRotate(axis Vector3, angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[48], &axis, &angle) }
func (gdClass Node3D) GlobalScale(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[49], &scale) }
func (gdClass Node3D) GlobalTranslate(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[50], &offset) }
func (gdClass Node3D) RotateObjectLocal(axis Vector3, angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[51], &axis, &angle) }
func (gdClass Node3D) ScaleObjectLocal(scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[52], &scale) }
func (gdClass Node3D) TranslateObjectLocal(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[53], &offset) }
func (gdClass Node3D) RotateX(angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[54], &angle) }
func (gdClass Node3D) RotateY(angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[55], &angle) }
func (gdClass Node3D) RotateZ(angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[56], &angle) }
func (gdClass Node3D) Translate(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[57], &offset) }
func (gdClass Node3D) Orthonormalize()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[58]) }
func (gdClass Node3D) SetIdentity()  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[59]) }
func (gdClass Node3D) LookAt(target Vector3, up Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[60], &target, &up) }
func (gdClass Node3D) LookAtFromPosition(position Vector3, target Vector3, up Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodNode3D[61], &position, &target, &up) }
func (gdClass Node3D) ToLocal(global_point Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[62], &global_point) }
func (gdClass Node3D) ToGlobal(local_point Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodNode3D[63], &local_point) }

type Node3DGizmo struct{self *Node3DGizmo; obj safeObject }
func NewNode3DGizmo(ctx Context, at *Node3DGizmo) Node3DGizmo { if at == nil { at = new(Node3DGizmo) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Node3DGizmo) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Node3DGizmo) owner() cObject { return gdClass.obj.get() }
func (Node3DGizmo) class() string { return "Node3DGizmo\000" }

func (gdClass Node3DGizmo) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass Node3DGizmo) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type Noise struct{self *Noise; obj safeObject }
func NewNoise(ctx Context, at *Noise) Noise { if at == nil { at = new(Noise) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Noise) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Noise) owner() cObject { return gdClass.obj.get() }
func (Noise) class() string { return "Noise\000" }

func (gdClass Noise) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodNoise [7]cMethodBind
func (gdClass Noise) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Noise) GetNoise1d(x float64) float64 { return methodCall[float64](gdClass.obj.get(), methodNoise[0], &x) }
func (gdClass Noise) GetNoise2d(x float64, y float64) float64 { return methodCall[float64](gdClass.obj.get(), methodNoise[1], &x, &y) }
func (gdClass Noise) GetNoise2dv(v Vector2) float64 { return methodCall[float64](gdClass.obj.get(), methodNoise[2], &v) }
func (gdClass Noise) GetNoise3d(x float64, y float64, z float64) float64 { return methodCall[float64](gdClass.obj.get(), methodNoise[3], &x, &y, &z) }
func (gdClass Noise) GetNoise3dv(v Vector3) float64 { return methodCall[float64](gdClass.obj.get(), methodNoise[4], &v) }
func (gdClass Noise) GetImage(width int64, height int64, invert bool, in_3d_space bool) Image { return methodCall[Image](gdClass.obj.get(), methodNoise[5], &width, &height, &invert, &in_3d_space) }
func (gdClass Noise) GetSeamlessImage(width int64, height int64, invert bool, in_3d_space bool, skirt float64) Image { return methodCall[Image](gdClass.obj.get(), methodNoise[6], &width, &height, &invert, &in_3d_space, &skirt) }

type NoiseTexture2D struct{self *NoiseTexture2D; obj safeObject }
func NewNoiseTexture2D(ctx Context, at *NoiseTexture2D) NoiseTexture2D { if at == nil { at = new(NoiseTexture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass NoiseTexture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass NoiseTexture2D) owner() cObject { return gdClass.obj.get() }
func (NoiseTexture2D) class() string { return "NoiseTexture2D\000" }

func (gdClass NoiseTexture2D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodNoiseTexture2D [20]cMethodBind
func (gdClass NoiseTexture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass NoiseTexture2D) SetWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[0], &width) }
func (gdClass NoiseTexture2D) SetHeight(height int64)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[1], &height) }
func (gdClass NoiseTexture2D) SetInvert(invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[2], &invert) }
func (gdClass NoiseTexture2D) GetInvert() bool { return methodCall[bool](gdClass.obj.get(), methodNoiseTexture2D[3]) }
func (gdClass NoiseTexture2D) SetIn3dSpace(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[4], &enable) }
func (gdClass NoiseTexture2D) IsIn3dSpace() bool { return methodCall[bool](gdClass.obj.get(), methodNoiseTexture2D[5]) }
func (gdClass NoiseTexture2D) SetGenerateMipmaps(invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[6], &invert) }
func (gdClass NoiseTexture2D) IsGeneratingMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodNoiseTexture2D[7]) }
func (gdClass NoiseTexture2D) SetSeamless(seamless bool)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[8], &seamless) }
func (gdClass NoiseTexture2D) GetSeamless() bool { return methodCall[bool](gdClass.obj.get(), methodNoiseTexture2D[9]) }
func (gdClass NoiseTexture2D) SetSeamlessBlendSkirt(seamless_blend_skirt float64)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[10], &seamless_blend_skirt) }
func (gdClass NoiseTexture2D) GetSeamlessBlendSkirt() float64 { return methodCall[float64](gdClass.obj.get(), methodNoiseTexture2D[11]) }
func (gdClass NoiseTexture2D) SetAsNormalMap(as_normal_map bool)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[12], &as_normal_map) }
func (gdClass NoiseTexture2D) IsNormalMap() bool { return methodCall[bool](gdClass.obj.get(), methodNoiseTexture2D[13]) }
func (gdClass NoiseTexture2D) SetBumpStrength(bump_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[14], &bump_strength) }
func (gdClass NoiseTexture2D) GetBumpStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodNoiseTexture2D[15]) }
func (gdClass NoiseTexture2D) SetColorRamp(gradient Gradient)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[16], &gradient) }
func (gdClass NoiseTexture2D) GetColorRamp() Gradient { return methodCall[Gradient](gdClass.obj.get(), methodNoiseTexture2D[17]) }
func (gdClass NoiseTexture2D) SetNoise(noise Noise)  { methodCall[struct{}](gdClass.obj.get(), methodNoiseTexture2D[18], &noise) }
func (gdClass NoiseTexture2D) GetNoise() Noise { return methodCall[Noise](gdClass.obj.get(), methodNoiseTexture2D[19]) }

type ORMMaterial3D struct{self *ORMMaterial3D; obj safeObject }
func NewORMMaterial3D(ctx Context, at *ORMMaterial3D) ORMMaterial3D { if at == nil { at = new(ORMMaterial3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ORMMaterial3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ORMMaterial3D) owner() cObject { return gdClass.obj.get() }
func (ORMMaterial3D) class() string { return "ORMMaterial3D\000" }

func (gdClass ORMMaterial3D) BaseMaterial3D() BaseMaterial3D { return BaseMaterial3D{obj:gdClass.obj} }

func (gdClass ORMMaterial3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BaseMaterial3D().virtual(rtype, name)
}

type OSVideoDriver int64

const (
	OSVideoDriverVulkan OSVideoDriver = 0
	OSVideoDriverOpengl3 OSVideoDriver = 1
)

type OSWeekday int64

const (
	OSDaySunday OSWeekday = 0
	OSDayMonday OSWeekday = 1
	OSDayTuesday OSWeekday = 2
	OSDayWednesday OSWeekday = 3
	OSDayThursday OSWeekday = 4
	OSDayFriday OSWeekday = 5
	OSDaySaturday OSWeekday = 6
)

type OSMonth int64

const (
	OSMonthJanuary OSMonth = 1
	OSMonthFebruary OSMonth = 2
	OSMonthMarch OSMonth = 3
	OSMonthApril OSMonth = 4
	OSMonthMay OSMonth = 5
	OSMonthJune OSMonth = 6
	OSMonthJuly OSMonth = 7
	OSMonthAugust OSMonth = 8
	OSMonthSeptember OSMonth = 9
	OSMonthOctober OSMonth = 10
	OSMonthNovember OSMonth = 11
	OSMonthDecember OSMonth = 12
)

type OSSystemDir int64

const (
	OSSystemDirDesktop OSSystemDir = 0
	OSSystemDirDcim OSSystemDir = 1
	OSSystemDirDocuments OSSystemDir = 2
	OSSystemDirDownloads OSSystemDir = 3
	OSSystemDirMovies OSSystemDir = 4
	OSSystemDirMusic OSSystemDir = 5
	OSSystemDirPictures OSSystemDir = 6
	OSSystemDirRingtones OSSystemDir = 7
)
var OS OSSingleton

type OSSingleton struct{self *OSSingleton; obj safeObject }
func NewOSSingleton(ctx Context, at *OSSingleton) OSSingleton { if at == nil { at = new(OSSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass OSSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OSSingleton) owner() cObject { return gdClass.obj.get() }
func (OSSingleton) class() string { return "OSSingleton\000" }

func (gdClass OSSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodOSSingleton [64]cMethodBind
func (gdClass OSSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass OSSingleton) GetConnectedMidiInputs() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[0]) }
func (gdClass OSSingleton) OpenMidiInputs()  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[1]) }
func (gdClass OSSingleton) CloseMidiInputs()  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[2]) }
func (gdClass OSSingleton) Alert(text string, title string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[3], &text, &title) }
func (gdClass OSSingleton) Crash(message string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[4], &message) }
func (gdClass OSSingleton) SetLowProcessorUsageMode(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[5], &enable) }
func (gdClass OSSingleton) IsInLowProcessorUsageMode() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[6]) }
func (gdClass OSSingleton) SetLowProcessorUsageModeSleepUsec(usec int64)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[7], &usec) }
func (gdClass OSSingleton) GetLowProcessorUsageModeSleepUsec() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[8]) }
func (gdClass OSSingleton) GetProcessorCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[9]) }
func (gdClass OSSingleton) GetProcessorName() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[10]) }
func (gdClass OSSingleton) GetSystemFonts() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[11]) }
func (gdClass OSSingleton) GetSystemFontPath(font_name string, bold bool, italic bool) string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[12], &font_name, &bold, &italic) }
func (gdClass OSSingleton) GetExecutablePath() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[13]) }
func (gdClass OSSingleton) Execute(path string, arguments []string, output Array, read_stderr bool, open_console bool) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[14], &path, &arguments, &output, &read_stderr, &open_console) }
func (gdClass OSSingleton) CreateProcess(path string, arguments []string, open_console bool) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[15], &path, &arguments, &open_console) }
func (gdClass OSSingleton) CreateInstance(arguments []string) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[16], &arguments) }
func (gdClass OSSingleton) Kill(pid int64) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[17], &pid) }
func (gdClass OSSingleton) ShellOpen(uri string) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[18], &uri) }
func (gdClass OSSingleton) IsProcessRunning(pid int64) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[19], &pid) }
func (gdClass OSSingleton) GetProcessId() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[20]) }
func (gdClass OSSingleton) GetEnvironment(variable string) string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[21], &variable) }
func (gdClass OSSingleton) SetEnvironment(variable string, value string) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[22], &variable, &value) }
func (gdClass OSSingleton) HasEnvironment(variable string) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[23], &variable) }
func (gdClass OSSingleton) GetName() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[24]) }
func (gdClass OSSingleton) GetCmdlineArgs() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[25]) }
func (gdClass OSSingleton) GetCmdlineUserArgs() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[26]) }
func (gdClass OSSingleton) SetRestartOnExit(restart bool, arguments []string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[27], &restart, &arguments) }
func (gdClass OSSingleton) IsRestartOnExitSet() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[28]) }
func (gdClass OSSingleton) GetRestartOnExitArguments() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[29]) }
func (gdClass OSSingleton) DelayUsec(usec int64)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[30], &usec) }
func (gdClass OSSingleton) DelayMsec(msec int64)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[31], &msec) }
func (gdClass OSSingleton) GetLocale() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[32]) }
func (gdClass OSSingleton) GetLocaleLanguage() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[33]) }
func (gdClass OSSingleton) GetModelName() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[34]) }
func (gdClass OSSingleton) IsUserfsPersistent() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[35]) }
func (gdClass OSSingleton) IsStdoutVerbose() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[36]) }
func (gdClass OSSingleton) CanUseThreads() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[37]) }
func (gdClass OSSingleton) IsDebugBuild() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[38]) }
func (gdClass OSSingleton) DumpResourcesToFile(file string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[39], &file) }
func (gdClass OSSingleton) PrintResourcesInUse(short bool)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[40], &short) }
func (gdClass OSSingleton) PrintAllResources(tofile string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[41], &tofile) }
func (gdClass OSSingleton) GetStaticMemoryUsage() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[42]) }
func (gdClass OSSingleton) GetStaticMemoryPeakUsage() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[43]) }
func (gdClass OSSingleton) MoveToTrash(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[44], &path) }
func (gdClass OSSingleton) GetUserDataDir() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[45]) }
func (gdClass OSSingleton) GetSystemDir(dir OSSystemDir, shared_storage bool) string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[46], &dir, &shared_storage) }
func (gdClass OSSingleton) GetConfigDir() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[47]) }
func (gdClass OSSingleton) GetDataDir() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[48]) }
func (gdClass OSSingleton) GetCacheDir() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[49]) }
func (gdClass OSSingleton) GetUniqueId() string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[50]) }
func (gdClass OSSingleton) PrintAllTexturesBySize()  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[51]) }
func (gdClass OSSingleton) PrintResourcesByType(types []string)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[52], &types) }
func (gdClass OSSingleton) GetKeycodeString(code Key) string { return methodCall[string](gdClass.obj.get(), methodOSSingleton[53], &code) }
func (gdClass OSSingleton) IsKeycodeUnicode(code int64) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[54], &code) }
func (gdClass OSSingleton) FindKeycodeFromString(s string) Key { return methodCall[Key](gdClass.obj.get(), methodOSSingleton[55], &s) }
func (gdClass OSSingleton) SetUseFileAccessSaveAndSwap(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodOSSingleton[56], &enabled) }
func (gdClass OSSingleton) SetThreadName(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[57], &name) }
func (gdClass OSSingleton) GetThreadCallerId() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[58]) }
func (gdClass OSSingleton) GetMainThreadId() int64 { return methodCall[int64](gdClass.obj.get(), methodOSSingleton[59]) }
func (gdClass OSSingleton) HasFeature(tag_name string) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[60], &tag_name) }
func (gdClass OSSingleton) RequestPermission(name string) bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[61], &name) }
func (gdClass OSSingleton) RequestPermissions() bool { return methodCall[bool](gdClass.obj.get(), methodOSSingleton[62]) }
func (gdClass OSSingleton) GetGrantedPermissions() []string { return methodCall[[]string](gdClass.obj.get(), methodOSSingleton[63]) }

type ObjectConnectFlags int64

const (
	ObjectConnectDeferred ObjectConnectFlags = 1
	ObjectConnectPersist ObjectConnectFlags = 2
	ObjectConnectOneshot ObjectConnectFlags = 4
	ObjectConnectReferenceCounted ObjectConnectFlags = 8
)

func NewObject(ctx Context, at *Object) Object { if at == nil { at = new(Object) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Object) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Object) owner() cObject { return gdClass.obj.get() }
func (Object) class() string { return "Object\000" }

var methodObject [41]cMethodBind
func (gdClass Object) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return
}
func (gdClass Object) GetClass() string { return methodCall[string](gdClass.obj.get(), methodObject[0]) }
func (gdClass Object) IsClass(class string) bool { return methodCall[bool](gdClass.obj.get(), methodObject[1], &class) }
func (gdClass Object) Set(property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodObject[2], &property, &value) }
func (gdClass Object) Get(property Name) any { return methodCall[any](gdClass.obj.get(), methodObject[3], &property) }
func (gdClass Object) SetIndexed(property NodePath, value any)  { methodCall[struct{}](gdClass.obj.get(), methodObject[4], &property, &value) }
func (gdClass Object) GetIndexed(property NodePath) any { return methodCall[any](gdClass.obj.get(), methodObject[5], &property) }
func (gdClass Object) GetPropertyList() Array { return methodCall[Array](gdClass.obj.get(), methodObject[6]) }
func (gdClass Object) GetMethodList() Array { return methodCall[Array](gdClass.obj.get(), methodObject[7]) }
func (gdClass Object) Notification(what int64, reversed bool)  { methodCall[struct{}](gdClass.obj.get(), methodObject[8], &what, &reversed) }
func (gdClass Object) ToString() string { return methodCall[string](gdClass.obj.get(), methodObject[9]) }
func (gdClass Object) GetInstanceId() int64 { return methodCall[int64](gdClass.obj.get(), methodObject[10]) }
func (gdClass Object) SetScript(script any)  { methodCall[struct{}](gdClass.obj.get(), methodObject[11], &script) }
func (gdClass Object) GetScript() any { return methodCall[any](gdClass.obj.get(), methodObject[12]) }
func (gdClass Object) SetMeta(name Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodObject[13], &name, &value) }
func (gdClass Object) RemoveMeta(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodObject[14], &name) }
func (gdClass Object) GetMeta(name Name, def any) any { return methodCall[any](gdClass.obj.get(), methodObject[15], &name, &def) }
func (gdClass Object) HasMeta(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodObject[16], &name) }
func (gdClass Object) GetMetaList() []string { return methodCall[[]string](gdClass.obj.get(), methodObject[17]) }
func (gdClass Object) AddUserSignal(signal string, arguments Array)  { methodCall[struct{}](gdClass.obj.get(), methodObject[18], &signal, &arguments) }
func (gdClass Object) HasUserSignal(signal Name) bool { return methodCall[bool](gdClass.obj.get(), methodObject[19], &signal) }
func (gdClass Object) EmitSignal(signal Name) int64 { return methodCall[int64](gdClass.obj.get(), methodObject[20], &signal) }
func (gdClass Object) Call(method Name) any { return methodCall[any](gdClass.obj.get(), methodObject[21], &method) }
func (gdClass Object) CallDeferred(method Name) any { return methodCall[any](gdClass.obj.get(), methodObject[22], &method) }
func (gdClass Object) SetDeferred(property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodObject[23], &property, &value) }
func (gdClass Object) Callv(method Name, arg_array Array) any { return methodCall[any](gdClass.obj.get(), methodObject[24], &method, &arg_array) }
func (gdClass Object) HasMethod(method Name) bool { return methodCall[bool](gdClass.obj.get(), methodObject[25], &method) }
func (gdClass Object) HasSignal(signal Name) bool { return methodCall[bool](gdClass.obj.get(), methodObject[26], &signal) }
func (gdClass Object) GetSignalList() Array { return methodCall[Array](gdClass.obj.get(), methodObject[27]) }
func (gdClass Object) GetSignalConnectionList(signal Name) Array { return methodCall[Array](gdClass.obj.get(), methodObject[28], &signal) }
func (gdClass Object) GetIncomingConnections() Array { return methodCall[Array](gdClass.obj.get(), methodObject[29]) }
func (gdClass Object) Connect(signal Name, callable Callable, flags int64) int64 { return methodCall[int64](gdClass.obj.get(), methodObject[30], &signal, &callable, &flags) }
func (gdClass Object) Disconnect(signal Name, callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodObject[31], &signal, &callable) }
func (gdClass Object) IsConnected(signal Name, callable Callable) bool { return methodCall[bool](gdClass.obj.get(), methodObject[32], &signal, &callable) }
func (gdClass Object) SetBlockSignals(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodObject[33], &enable) }
func (gdClass Object) IsBlockingSignals() bool { return methodCall[bool](gdClass.obj.get(), methodObject[34]) }
func (gdClass Object) NotifyPropertyListChanged()  { methodCall[struct{}](gdClass.obj.get(), methodObject[35]) }
func (gdClass Object) SetMessageTranslation(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodObject[36], &enable) }
func (gdClass Object) CanTranslateMessages() bool { return methodCall[bool](gdClass.obj.get(), methodObject[37]) }
func (gdClass Object) Tr(message Name, context Name) string { return methodCall[string](gdClass.obj.get(), methodObject[38], &message, &context) }
func (gdClass Object) TrN(message Name, plural_message Name, n int64, context Name) string { return methodCall[string](gdClass.obj.get(), methodObject[39], &message, &plural_message, &n, &context) }
func (gdClass Object) IsQueuedForDeletion() bool { return methodCall[bool](gdClass.obj.get(), methodObject[40]) }

type Occluder3D struct{self *Occluder3D; obj safeObject }
func NewOccluder3D(ctx Context, at *Occluder3D) Occluder3D { if at == nil { at = new(Occluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Occluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Occluder3D) owner() cObject { return gdClass.obj.get() }
func (Occluder3D) class() string { return "Occluder3D\000" }

func (gdClass Occluder3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOccluder3D [2]cMethodBind
func (gdClass Occluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Occluder3D) GetVertices() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodOccluder3D[0]) }
func (gdClass Occluder3D) GetIndices() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodOccluder3D[1]) }

type OccluderInstance3D struct{self *OccluderInstance3D; obj safeObject }
func NewOccluderInstance3D(ctx Context, at *OccluderInstance3D) OccluderInstance3D { if at == nil { at = new(OccluderInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass OccluderInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OccluderInstance3D) owner() cObject { return gdClass.obj.get() }
func (OccluderInstance3D) class() string { return "OccluderInstance3D\000" }

func (gdClass OccluderInstance3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodOccluderInstance3D [8]cMethodBind
func (gdClass OccluderInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass OccluderInstance3D) SetBakeMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderInstance3D[0], &mask) }
func (gdClass OccluderInstance3D) GetBakeMask() int64 { return methodCall[int64](gdClass.obj.get(), methodOccluderInstance3D[1]) }
func (gdClass OccluderInstance3D) SetBakeMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderInstance3D[2], &layer_number, &value) }
func (gdClass OccluderInstance3D) GetBakeMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodOccluderInstance3D[3], &layer_number) }
func (gdClass OccluderInstance3D) SetBakeSimplificationDistance(simplification_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderInstance3D[4], &simplification_distance) }
func (gdClass OccluderInstance3D) GetBakeSimplificationDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodOccluderInstance3D[5]) }
func (gdClass OccluderInstance3D) SetOccluder(occluder Occluder3D)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderInstance3D[6], &occluder) }
func (gdClass OccluderInstance3D) GetOccluder() Occluder3D { return methodCall[Occluder3D](gdClass.obj.get(), methodOccluderInstance3D[7]) }

type OccluderPolygon2DCullMode int64

const (
	OccluderPolygon2DCullDisabled OccluderPolygon2DCullMode = 0
	OccluderPolygon2DCullClockwise OccluderPolygon2DCullMode = 1
	OccluderPolygon2DCullCounterClockwise OccluderPolygon2DCullMode = 2
)

type OccluderPolygon2D struct{self *OccluderPolygon2D; obj safeObject }
func NewOccluderPolygon2D(ctx Context, at *OccluderPolygon2D) OccluderPolygon2D { if at == nil { at = new(OccluderPolygon2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OccluderPolygon2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OccluderPolygon2D) owner() cObject { return gdClass.obj.get() }
func (OccluderPolygon2D) class() string { return "OccluderPolygon2D\000" }

func (gdClass OccluderPolygon2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOccluderPolygon2D [6]cMethodBind
func (gdClass OccluderPolygon2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OccluderPolygon2D) SetClosed(closed bool)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderPolygon2D[0], &closed) }
func (gdClass OccluderPolygon2D) IsClosed() bool { return methodCall[bool](gdClass.obj.get(), methodOccluderPolygon2D[1]) }
func (gdClass OccluderPolygon2D) SetCullMode(cull_mode OccluderPolygon2DCullMode)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderPolygon2D[2], &cull_mode) }
func (gdClass OccluderPolygon2D) GetCullMode() OccluderPolygon2DCullMode { return methodCall[OccluderPolygon2DCullMode](gdClass.obj.get(), methodOccluderPolygon2D[3]) }
func (gdClass OccluderPolygon2D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodOccluderPolygon2D[4], &polygon) }
func (gdClass OccluderPolygon2D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodOccluderPolygon2D[5]) }

type OggPacketSequence struct{self *OggPacketSequence; obj safeObject }
func NewOggPacketSequence(ctx Context, at *OggPacketSequence) OggPacketSequence { if at == nil { at = new(OggPacketSequence) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OggPacketSequence) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OggPacketSequence) owner() cObject { return gdClass.obj.get() }
func (OggPacketSequence) class() string { return "OggPacketSequence\000" }

func (gdClass OggPacketSequence) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOggPacketSequence [7]cMethodBind
func (gdClass OggPacketSequence) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OggPacketSequence) SetPacketData(packet_data Array)  { methodCall[struct{}](gdClass.obj.get(), methodOggPacketSequence[0], &packet_data) }
func (gdClass OggPacketSequence) GetPacketData() Array { return methodCall[Array](gdClass.obj.get(), methodOggPacketSequence[1]) }
func (gdClass OggPacketSequence) SetPacketGranulePositions(granule_positions Array)  { methodCall[struct{}](gdClass.obj.get(), methodOggPacketSequence[2], &granule_positions) }
func (gdClass OggPacketSequence) GetPacketGranulePositions() Array { return methodCall[Array](gdClass.obj.get(), methodOggPacketSequence[3]) }
func (gdClass OggPacketSequence) SetSamplingRate(sampling_rate float64)  { methodCall[struct{}](gdClass.obj.get(), methodOggPacketSequence[4], &sampling_rate) }
func (gdClass OggPacketSequence) GetSamplingRate() float64 { return methodCall[float64](gdClass.obj.get(), methodOggPacketSequence[5]) }
func (gdClass OggPacketSequence) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodOggPacketSequence[6]) }

type OggPacketSequencePlayback struct{self *OggPacketSequencePlayback; obj safeObject }
func NewOggPacketSequencePlayback(ctx Context, at *OggPacketSequencePlayback) OggPacketSequencePlayback { if at == nil { at = new(OggPacketSequencePlayback) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OggPacketSequencePlayback) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OggPacketSequencePlayback) owner() cObject { return gdClass.obj.get() }
func (OggPacketSequencePlayback) class() string { return "OggPacketSequencePlayback\000" }

func (gdClass OggPacketSequencePlayback) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass OggPacketSequencePlayback) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type OmniLight3DShadowMode int64

const (
	OmniLight3DShadowDualParaboloid OmniLight3DShadowMode = 0
	OmniLight3DShadowCube OmniLight3DShadowMode = 1
)

type OmniLight3D struct{self *OmniLight3D; obj safeObject }
func NewOmniLight3D(ctx Context, at *OmniLight3D) OmniLight3D { if at == nil { at = new(OmniLight3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass OmniLight3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OmniLight3D) owner() cObject { return gdClass.obj.get() }
func (OmniLight3D) class() string { return "OmniLight3D\000" }

func (gdClass OmniLight3D) Light3D() Light3D { return Light3D{obj:gdClass.obj} }

var methodOmniLight3D [2]cMethodBind
func (gdClass OmniLight3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Light3D().virtual(rtype, name)
}
func (gdClass OmniLight3D) SetShadowMode(mode OmniLight3DShadowMode)  { methodCall[struct{}](gdClass.obj.get(), methodOmniLight3D[0], &mode) }
func (gdClass OmniLight3D) GetShadowMode() OmniLight3DShadowMode { return methodCall[OmniLight3DShadowMode](gdClass.obj.get(), methodOmniLight3D[1]) }

type OpenXRActionActionType int64

const (
	OpenXRActionOpenxrActionBool OpenXRActionActionType = 0
	OpenXRActionOpenxrActionFloat OpenXRActionActionType = 1
	OpenXRActionOpenxrActionVector2 OpenXRActionActionType = 2
	OpenXRActionOpenxrActionPose OpenXRActionActionType = 3
)

type OpenXRAction struct{self *OpenXRAction; obj safeObject }
func NewOpenXRAction(ctx Context, at *OpenXRAction) OpenXRAction { if at == nil { at = new(OpenXRAction) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRAction) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRAction) owner() cObject { return gdClass.obj.get() }
func (OpenXRAction) class() string { return "OpenXRAction\000" }

func (gdClass OpenXRAction) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOpenXRAction [6]cMethodBind
func (gdClass OpenXRAction) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OpenXRAction) SetLocalizedName(localized_name string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRAction[0], &localized_name) }
func (gdClass OpenXRAction) GetLocalizedName() string { return methodCall[string](gdClass.obj.get(), methodOpenXRAction[1]) }
func (gdClass OpenXRAction) SetActionType(action_type OpenXRActionActionType)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRAction[2], &action_type) }
func (gdClass OpenXRAction) GetActionType() OpenXRActionActionType { return methodCall[OpenXRActionActionType](gdClass.obj.get(), methodOpenXRAction[3]) }
func (gdClass OpenXRAction) SetToplevelPaths(toplevel_paths []string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRAction[4], &toplevel_paths) }
func (gdClass OpenXRAction) GetToplevelPaths() []string { return methodCall[[]string](gdClass.obj.get(), methodOpenXRAction[5]) }

type OpenXRActionMap struct{self *OpenXRActionMap; obj safeObject }
func NewOpenXRActionMap(ctx Context, at *OpenXRActionMap) OpenXRActionMap { if at == nil { at = new(OpenXRActionMap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRActionMap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRActionMap) owner() cObject { return gdClass.obj.get() }
func (OpenXRActionMap) class() string { return "OpenXRActionMap\000" }

func (gdClass OpenXRActionMap) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOpenXRActionMap [15]cMethodBind
func (gdClass OpenXRActionMap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OpenXRActionMap) SetActionSets(action_sets Array)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[0], &action_sets) }
func (gdClass OpenXRActionMap) GetActionSets() Array { return methodCall[Array](gdClass.obj.get(), methodOpenXRActionMap[1]) }
func (gdClass OpenXRActionMap) GetActionSetCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRActionMap[2]) }
func (gdClass OpenXRActionMap) FindActionSet(name string) OpenXRActionSet { return methodCall[OpenXRActionSet](gdClass.obj.get(), methodOpenXRActionMap[3], &name) }
func (gdClass OpenXRActionMap) GetActionSet(idx int64) OpenXRActionSet { return methodCall[OpenXRActionSet](gdClass.obj.get(), methodOpenXRActionMap[4], &idx) }
func (gdClass OpenXRActionMap) AddActionSet(action_set OpenXRActionSet)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[5], &action_set) }
func (gdClass OpenXRActionMap) RemoveActionSet(action_set OpenXRActionSet)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[6], &action_set) }
func (gdClass OpenXRActionMap) SetInteractionProfiles(interaction_profiles Array)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[7], &interaction_profiles) }
func (gdClass OpenXRActionMap) GetInteractionProfiles() Array { return methodCall[Array](gdClass.obj.get(), methodOpenXRActionMap[8]) }
func (gdClass OpenXRActionMap) GetInteractionProfileCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRActionMap[9]) }
func (gdClass OpenXRActionMap) FindInteractionProfile(name string) OpenXRInteractionProfile { return methodCall[OpenXRInteractionProfile](gdClass.obj.get(), methodOpenXRActionMap[10], &name) }
func (gdClass OpenXRActionMap) GetInteractionProfile(idx int64) OpenXRInteractionProfile { return methodCall[OpenXRInteractionProfile](gdClass.obj.get(), methodOpenXRActionMap[11], &idx) }
func (gdClass OpenXRActionMap) AddInteractionProfile(interaction_profile OpenXRInteractionProfile)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[12], &interaction_profile) }
func (gdClass OpenXRActionMap) RemoveInteractionProfile(interaction_profile OpenXRInteractionProfile)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[13], &interaction_profile) }
func (gdClass OpenXRActionMap) CreateDefaultActionSets()  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionMap[14]) }

type OpenXRActionSet struct{self *OpenXRActionSet; obj safeObject }
func NewOpenXRActionSet(ctx Context, at *OpenXRActionSet) OpenXRActionSet { if at == nil { at = new(OpenXRActionSet) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRActionSet) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRActionSet) owner() cObject { return gdClass.obj.get() }
func (OpenXRActionSet) class() string { return "OpenXRActionSet\000" }

func (gdClass OpenXRActionSet) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOpenXRActionSet [9]cMethodBind
func (gdClass OpenXRActionSet) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OpenXRActionSet) SetLocalizedName(localized_name string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionSet[0], &localized_name) }
func (gdClass OpenXRActionSet) GetLocalizedName() string { return methodCall[string](gdClass.obj.get(), methodOpenXRActionSet[1]) }
func (gdClass OpenXRActionSet) SetPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionSet[2], &priority) }
func (gdClass OpenXRActionSet) GetPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRActionSet[3]) }
func (gdClass OpenXRActionSet) GetActionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRActionSet[4]) }
func (gdClass OpenXRActionSet) SetActions(actions Array)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionSet[5], &actions) }
func (gdClass OpenXRActionSet) GetActions() Array { return methodCall[Array](gdClass.obj.get(), methodOpenXRActionSet[6]) }
func (gdClass OpenXRActionSet) AddAction(action OpenXRAction)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionSet[7], &action) }
func (gdClass OpenXRActionSet) RemoveAction(action OpenXRAction)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRActionSet[8], &action) }

type OpenXRIPBinding struct{self *OpenXRIPBinding; obj safeObject }
func NewOpenXRIPBinding(ctx Context, at *OpenXRIPBinding) OpenXRIPBinding { if at == nil { at = new(OpenXRIPBinding) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRIPBinding) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRIPBinding) owner() cObject { return gdClass.obj.get() }
func (OpenXRIPBinding) class() string { return "OpenXRIPBinding\000" }

func (gdClass OpenXRIPBinding) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOpenXRIPBinding [8]cMethodBind
func (gdClass OpenXRIPBinding) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OpenXRIPBinding) SetAction(action OpenXRAction)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRIPBinding[0], &action) }
func (gdClass OpenXRIPBinding) GetAction() OpenXRAction { return methodCall[OpenXRAction](gdClass.obj.get(), methodOpenXRIPBinding[1]) }
func (gdClass OpenXRIPBinding) GetPathCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRIPBinding[2]) }
func (gdClass OpenXRIPBinding) SetPaths(paths []string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRIPBinding[3], &paths) }
func (gdClass OpenXRIPBinding) GetPaths() []string { return methodCall[[]string](gdClass.obj.get(), methodOpenXRIPBinding[4]) }
func (gdClass OpenXRIPBinding) HasPath(path string) bool { return methodCall[bool](gdClass.obj.get(), methodOpenXRIPBinding[5], &path) }
func (gdClass OpenXRIPBinding) AddPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRIPBinding[6], &path) }
func (gdClass OpenXRIPBinding) RemovePath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRIPBinding[7], &path) }

type OpenXRInteractionProfile struct{self *OpenXRInteractionProfile; obj safeObject }
func NewOpenXRInteractionProfile(ctx Context, at *OpenXRInteractionProfile) OpenXRInteractionProfile { if at == nil { at = new(OpenXRInteractionProfile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRInteractionProfile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRInteractionProfile) owner() cObject { return gdClass.obj.get() }
func (OpenXRInteractionProfile) class() string { return "OpenXRInteractionProfile\000" }

func (gdClass OpenXRInteractionProfile) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodOpenXRInteractionProfile [6]cMethodBind
func (gdClass OpenXRInteractionProfile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass OpenXRInteractionProfile) SetInteractionProfilePath(interaction_profile_path string)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRInteractionProfile[0], &interaction_profile_path) }
func (gdClass OpenXRInteractionProfile) GetInteractionProfilePath() string { return methodCall[string](gdClass.obj.get(), methodOpenXRInteractionProfile[1]) }
func (gdClass OpenXRInteractionProfile) GetBindingCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOpenXRInteractionProfile[2]) }
func (gdClass OpenXRInteractionProfile) GetBinding(index int64) OpenXRIPBinding { return methodCall[OpenXRIPBinding](gdClass.obj.get(), methodOpenXRInteractionProfile[3], &index) }
func (gdClass OpenXRInteractionProfile) SetBindings(bindings Array)  { methodCall[struct{}](gdClass.obj.get(), methodOpenXRInteractionProfile[4], &bindings) }
func (gdClass OpenXRInteractionProfile) GetBindings() Array { return methodCall[Array](gdClass.obj.get(), methodOpenXRInteractionProfile[5]) }

type OpenXRInterface struct{self *OpenXRInterface; obj safeObject }
func NewOpenXRInterface(ctx Context, at *OpenXRInterface) OpenXRInterface { if at == nil { at = new(OpenXRInterface) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OpenXRInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OpenXRInterface) owner() cObject { return gdClass.obj.get() }
func (OpenXRInterface) class() string { return "OpenXRInterface\000" }

func (gdClass OpenXRInterface) XRInterface() XRInterface { return XRInterface{obj:gdClass.obj} }

func (gdClass OpenXRInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.XRInterface().virtual(rtype, name)
}

type OptimizedTranslation struct{self *OptimizedTranslation; obj safeObject }
func NewOptimizedTranslation(ctx Context, at *OptimizedTranslation) OptimizedTranslation { if at == nil { at = new(OptimizedTranslation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass OptimizedTranslation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OptimizedTranslation) owner() cObject { return gdClass.obj.get() }
func (OptimizedTranslation) class() string { return "OptimizedTranslation\000" }

func (gdClass OptimizedTranslation) Translation() Translation { return Translation{obj:gdClass.obj} }

var methodOptimizedTranslation [1]cMethodBind
func (gdClass OptimizedTranslation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Translation().virtual(rtype, name)
}
func (gdClass OptimizedTranslation) Generate(from Translation)  { methodCall[struct{}](gdClass.obj.get(), methodOptimizedTranslation[0], &from) }

type OptionButton struct{self *OptionButton; obj safeObject }
func NewOptionButton(ctx Context, at *OptionButton) OptionButton { if at == nil { at = new(OptionButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass OptionButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass OptionButton) owner() cObject { return gdClass.obj.get() }
func (OptionButton) class() string { return "OptionButton\000" }

func (gdClass OptionButton) Button() Button { return Button{obj:gdClass.obj} }

var methodOptionButton [30]cMethodBind
func (gdClass OptionButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Button().virtual(rtype, name)
}
func (gdClass OptionButton) AddItem(label string, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[0], &label, &id) }
func (gdClass OptionButton) AddIconItem(texture Texture2D, label string, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[1], &texture, &label, &id) }
func (gdClass OptionButton) SetItemText(idx int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[2], &idx, &text) }
func (gdClass OptionButton) SetItemIcon(idx int64, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[3], &idx, &texture) }
func (gdClass OptionButton) SetItemDisabled(idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[4], &idx, &disabled) }
func (gdClass OptionButton) SetItemId(idx int64, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[5], &idx, &id) }
func (gdClass OptionButton) SetItemMetadata(idx int64, metadata any)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[6], &idx, &metadata) }
func (gdClass OptionButton) SetItemTooltip(idx int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[7], &idx, &tooltip) }
func (gdClass OptionButton) GetItemText(idx int64) string { return methodCall[string](gdClass.obj.get(), methodOptionButton[8], &idx) }
func (gdClass OptionButton) GetItemIcon(idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodOptionButton[9], &idx) }
func (gdClass OptionButton) GetItemId(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[10], &idx) }
func (gdClass OptionButton) GetItemIndex(id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[11], &id) }
func (gdClass OptionButton) GetItemMetadata(idx int64) any { return methodCall[any](gdClass.obj.get(), methodOptionButton[12], &idx) }
func (gdClass OptionButton) GetItemTooltip(idx int64) string { return methodCall[string](gdClass.obj.get(), methodOptionButton[13], &idx) }
func (gdClass OptionButton) IsItemDisabled(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodOptionButton[14], &idx) }
func (gdClass OptionButton) IsItemSeparator(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodOptionButton[15], &idx) }
func (gdClass OptionButton) AddSeparator(text string)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[16], &text) }
func (gdClass OptionButton) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[17]) }
func (gdClass OptionButton) Select(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[18], &idx) }
func (gdClass OptionButton) GetSelected() int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[19]) }
func (gdClass OptionButton) GetSelectedId() int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[20]) }
func (gdClass OptionButton) GetSelectedMetadata() any { return methodCall[any](gdClass.obj.get(), methodOptionButton[21]) }
func (gdClass OptionButton) RemoveItem(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[22], &idx) }
func (gdClass OptionButton) GetPopup() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodOptionButton[23]) }
func (gdClass OptionButton) SetItemCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[24], &count) }
func (gdClass OptionButton) GetItemCount() int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[25]) }
func (gdClass OptionButton) HasSelectableItems() bool { return methodCall[bool](gdClass.obj.get(), methodOptionButton[26]) }
func (gdClass OptionButton) GetSelectableItem(from_last bool) int64 { return methodCall[int64](gdClass.obj.get(), methodOptionButton[27], &from_last) }
func (gdClass OptionButton) SetFitToLongestItem(fit bool)  { methodCall[struct{}](gdClass.obj.get(), methodOptionButton[28], &fit) }
func (gdClass OptionButton) IsFitToLongestItem() bool { return methodCall[bool](gdClass.obj.get(), methodOptionButton[29]) }

type PCKPacker struct{self *PCKPacker; obj safeObject }
func NewPCKPacker(ctx Context, at *PCKPacker) PCKPacker { if at == nil { at = new(PCKPacker) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PCKPacker) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PCKPacker) owner() cObject { return gdClass.obj.get() }
func (PCKPacker) class() string { return "PCKPacker\000" }

func (gdClass PCKPacker) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPCKPacker [3]cMethodBind
func (gdClass PCKPacker) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PCKPacker) PckStart(pck_name string, alignment int64, key string, encrypt_directory bool) int64 { return methodCall[int64](gdClass.obj.get(), methodPCKPacker[0], &pck_name, &alignment, &key, &encrypt_directory) }
func (gdClass PCKPacker) AddFile(pck_path string, source_path string, encrypt bool) int64 { return methodCall[int64](gdClass.obj.get(), methodPCKPacker[1], &pck_path, &source_path, &encrypt) }
func (gdClass PCKPacker) Flush(verbose bool) int64 { return methodCall[int64](gdClass.obj.get(), methodPCKPacker[2], &verbose) }

type PackedDataContainer struct{self *PackedDataContainer; obj safeObject }
func NewPackedDataContainer(ctx Context, at *PackedDataContainer) PackedDataContainer { if at == nil { at = new(PackedDataContainer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PackedDataContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PackedDataContainer) owner() cObject { return gdClass.obj.get() }
func (PackedDataContainer) class() string { return "PackedDataContainer\000" }

func (gdClass PackedDataContainer) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodPackedDataContainer [2]cMethodBind
func (gdClass PackedDataContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass PackedDataContainer) Pack(value any) int64 { return methodCall[int64](gdClass.obj.get(), methodPackedDataContainer[0], &value) }
func (gdClass PackedDataContainer) Size() int64 { return methodCall[int64](gdClass.obj.get(), methodPackedDataContainer[1]) }

type PackedDataContainerRef struct{self *PackedDataContainerRef; obj safeObject }
func NewPackedDataContainerRef(ctx Context, at *PackedDataContainerRef) PackedDataContainerRef { if at == nil { at = new(PackedDataContainerRef) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PackedDataContainerRef) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PackedDataContainerRef) owner() cObject { return gdClass.obj.get() }
func (PackedDataContainerRef) class() string { return "PackedDataContainerRef\000" }

func (gdClass PackedDataContainerRef) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPackedDataContainerRef [1]cMethodBind
func (gdClass PackedDataContainerRef) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PackedDataContainerRef) Size() int64 { return methodCall[int64](gdClass.obj.get(), methodPackedDataContainerRef[0]) }

type PackedSceneGenEditState int64

const (
	PackedSceneGenEditStateDisabled PackedSceneGenEditState = 0
	PackedSceneGenEditStateInstance PackedSceneGenEditState = 1
	PackedSceneGenEditStateMain PackedSceneGenEditState = 2
	PackedSceneGenEditStateMainInherited PackedSceneGenEditState = 3
)

type PackedScene struct{self *PackedScene; obj safeObject }
func NewPackedScene(ctx Context, at *PackedScene) PackedScene { if at == nil { at = new(PackedScene) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PackedScene) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PackedScene) owner() cObject { return gdClass.obj.get() }
func (PackedScene) class() string { return "PackedScene\000" }

func (gdClass PackedScene) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodPackedScene [4]cMethodBind
func (gdClass PackedScene) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass PackedScene) Pack(path Node) int64 { return methodCall[int64](gdClass.obj.get(), methodPackedScene[0], &path) }
func (gdClass PackedScene) Instantiate(edit_state PackedSceneGenEditState) Node { return methodCall[Node](gdClass.obj.get(), methodPackedScene[1], &edit_state) }
func (gdClass PackedScene) CanInstantiate() bool { return methodCall[bool](gdClass.obj.get(), methodPackedScene[2]) }
func (gdClass PackedScene) GetState() SceneState { return methodCall[SceneState](gdClass.obj.get(), methodPackedScene[3]) }

type PacketPeer struct{self *PacketPeer; obj safeObject }
func NewPacketPeer(ctx Context, at *PacketPeer) PacketPeer { if at == nil { at = new(PacketPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PacketPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PacketPeer) owner() cObject { return gdClass.obj.get() }
func (PacketPeer) class() string { return "PacketPeer\000" }

func (gdClass PacketPeer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPacketPeer [8]cMethodBind
func (gdClass PacketPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PacketPeer) GetVar(allow_objects bool) any { return methodCall[any](gdClass.obj.get(), methodPacketPeer[0], &allow_objects) }
func (gdClass PacketPeer) PutVar(v any, full_objects bool) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeer[1], &v, &full_objects) }
func (gdClass PacketPeer) GetPacket() []byte { return methodCall[[]byte](gdClass.obj.get(), methodPacketPeer[2]) }
func (gdClass PacketPeer) PutPacket(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeer[3], &buffer) }
func (gdClass PacketPeer) GetPacketError() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeer[4]) }
func (gdClass PacketPeer) GetAvailablePacketCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeer[5]) }
func (gdClass PacketPeer) GetEncodeBufferMaxSize() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeer[6]) }
func (gdClass PacketPeer) SetEncodeBufferMaxSize(max_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeer[7], &max_size) }

type PacketPeerDTLSStatus int64

const (
	PacketPeerDTLSStatusDisconnected PacketPeerDTLSStatus = 0
	PacketPeerDTLSStatusHandshaking PacketPeerDTLSStatus = 1
	PacketPeerDTLSStatusConnected PacketPeerDTLSStatus = 2
	PacketPeerDTLSStatusError PacketPeerDTLSStatus = 3
	PacketPeerDTLSStatusErrorHostnameMismatch PacketPeerDTLSStatus = 4
)

type PacketPeerDTLS struct{self *PacketPeerDTLS; obj safeObject }
func NewPacketPeerDTLS(ctx Context, at *PacketPeerDTLS) PacketPeerDTLS { if at == nil { at = new(PacketPeerDTLS) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PacketPeerDTLS) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PacketPeerDTLS) owner() cObject { return gdClass.obj.get() }
func (PacketPeerDTLS) class() string { return "PacketPeerDTLS\000" }

func (gdClass PacketPeerDTLS) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodPacketPeerDTLS [4]cMethodBind
func (gdClass PacketPeerDTLS) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass PacketPeerDTLS) Poll()  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerDTLS[0]) }
func (gdClass PacketPeerDTLS) ConnectToPeer(packet_peer PacketPeerUDP, validate_certs bool, for_hostname string, valid_certificate X509Certificate) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerDTLS[1], &packet_peer, &validate_certs, &for_hostname, &valid_certificate) }
func (gdClass PacketPeerDTLS) GetStatus() PacketPeerDTLSStatus { return methodCall[PacketPeerDTLSStatus](gdClass.obj.get(), methodPacketPeerDTLS[2]) }
func (gdClass PacketPeerDTLS) DisconnectFromPeer()  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerDTLS[3]) }

type PacketPeerExtension struct{self *PacketPeerExtension; obj safeObject }
func NewPacketPeerExtension(ctx Context, at *PacketPeerExtension) PacketPeerExtension { if at == nil { at = new(PacketPeerExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PacketPeerExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PacketPeerExtension) owner() cObject { return gdClass.obj.get() }
func (PacketPeerExtension) class() string { return "PacketPeerExtension\000" }

func (gdClass PacketPeerExtension) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

func (gdClass PacketPeerExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPacket`)
		}
		return
	case "_put_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutPacket`)
		}
		return
	case "_get_available_packet_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAvailablePacketCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetAvailablePacketCount`)
		}
		return
	case "_get_max_packet_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMaxPacketSize() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMaxPacketSize`)
		}
		return
	}
	return gdClass.PacketPeer().virtual(rtype, name)
}

type PacketPeerStream struct{self *PacketPeerStream; obj safeObject }
func NewPacketPeerStream(ctx Context, at *PacketPeerStream) PacketPeerStream { if at == nil { at = new(PacketPeerStream) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PacketPeerStream) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PacketPeerStream) owner() cObject { return gdClass.obj.get() }
func (PacketPeerStream) class() string { return "PacketPeerStream\000" }

func (gdClass PacketPeerStream) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodPacketPeerStream [6]cMethodBind
func (gdClass PacketPeerStream) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass PacketPeerStream) SetStreamPeer(peer StreamPeer)  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerStream[0], &peer) }
func (gdClass PacketPeerStream) GetStreamPeer() StreamPeer { return methodCall[StreamPeer](gdClass.obj.get(), methodPacketPeerStream[1]) }
func (gdClass PacketPeerStream) SetInputBufferMaxSize(max_size_bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerStream[2], &max_size_bytes) }
func (gdClass PacketPeerStream) SetOutputBufferMaxSize(max_size_bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerStream[3], &max_size_bytes) }
func (gdClass PacketPeerStream) GetInputBufferMaxSize() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerStream[4]) }
func (gdClass PacketPeerStream) GetOutputBufferMaxSize() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerStream[5]) }

type PacketPeerUDP struct{self *PacketPeerUDP; obj safeObject }
func NewPacketPeerUDP(ctx Context, at *PacketPeerUDP) PacketPeerUDP { if at == nil { at = new(PacketPeerUDP) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PacketPeerUDP) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PacketPeerUDP) owner() cObject { return gdClass.obj.get() }
func (PacketPeerUDP) class() string { return "PacketPeerUDP\000" }

func (gdClass PacketPeerUDP) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodPacketPeerUDP [13]cMethodBind
func (gdClass PacketPeerUDP) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass PacketPeerUDP) Bind(port int64, bind_address string, recv_buf_size int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[0], &port, &bind_address, &recv_buf_size) }
func (gdClass PacketPeerUDP) Close()  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerUDP[1]) }
func (gdClass PacketPeerUDP) Wait() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[2]) }
func (gdClass PacketPeerUDP) IsBound() bool { return methodCall[bool](gdClass.obj.get(), methodPacketPeerUDP[3]) }
func (gdClass PacketPeerUDP) ConnectToHost(host string, port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[4], &host, &port) }
func (gdClass PacketPeerUDP) IsSocketConnected() bool { return methodCall[bool](gdClass.obj.get(), methodPacketPeerUDP[5]) }
func (gdClass PacketPeerUDP) GetPacketIp() string { return methodCall[string](gdClass.obj.get(), methodPacketPeerUDP[6]) }
func (gdClass PacketPeerUDP) GetPacketPort() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[7]) }
func (gdClass PacketPeerUDP) GetLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[8]) }
func (gdClass PacketPeerUDP) SetDestAddress(host string, port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[9], &host, &port) }
func (gdClass PacketPeerUDP) SetBroadcastEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPacketPeerUDP[10], &enabled) }
func (gdClass PacketPeerUDP) JoinMulticastGroup(multicast_address string, interface_name string) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[11], &multicast_address, &interface_name) }
func (gdClass PacketPeerUDP) LeaveMulticastGroup(multicast_address string, interface_name string) int64 { return methodCall[int64](gdClass.obj.get(), methodPacketPeerUDP[12], &multicast_address, &interface_name) }

type Panel struct{self *Panel; obj safeObject }
func NewPanel(ctx Context, at *Panel) Panel { if at == nil { at = new(Panel) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Panel) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Panel) owner() cObject { return gdClass.obj.get() }
func (Panel) class() string { return "Panel\000" }

func (gdClass Panel) Control() Control { return Control{obj:gdClass.obj} }

func (gdClass Panel) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}

type PanelContainer struct{self *PanelContainer; obj safeObject }
func NewPanelContainer(ctx Context, at *PanelContainer) PanelContainer { if at == nil { at = new(PanelContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PanelContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PanelContainer) owner() cObject { return gdClass.obj.get() }
func (PanelContainer) class() string { return "PanelContainer\000" }

func (gdClass PanelContainer) Container() Container { return Container{obj:gdClass.obj} }

func (gdClass PanelContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}

type PanoramaSkyMaterial struct{self *PanoramaSkyMaterial; obj safeObject }
func NewPanoramaSkyMaterial(ctx Context, at *PanoramaSkyMaterial) PanoramaSkyMaterial { if at == nil { at = new(PanoramaSkyMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PanoramaSkyMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PanoramaSkyMaterial) owner() cObject { return gdClass.obj.get() }
func (PanoramaSkyMaterial) class() string { return "PanoramaSkyMaterial\000" }

func (gdClass PanoramaSkyMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodPanoramaSkyMaterial [4]cMethodBind
func (gdClass PanoramaSkyMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass PanoramaSkyMaterial) SetPanorama(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodPanoramaSkyMaterial[0], &texture) }
func (gdClass PanoramaSkyMaterial) GetPanorama() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodPanoramaSkyMaterial[1]) }
func (gdClass PanoramaSkyMaterial) SetFilteringEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPanoramaSkyMaterial[2], &enabled) }
func (gdClass PanoramaSkyMaterial) IsFilteringEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPanoramaSkyMaterial[3]) }

type ParallaxBackground struct{self *ParallaxBackground; obj safeObject }
func NewParallaxBackground(ctx Context, at *ParallaxBackground) ParallaxBackground { if at == nil { at = new(ParallaxBackground) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ParallaxBackground) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ParallaxBackground) owner() cObject { return gdClass.obj.get() }
func (ParallaxBackground) class() string { return "ParallaxBackground\000" }

func (gdClass ParallaxBackground) CanvasLayer() CanvasLayer { return CanvasLayer{obj:gdClass.obj} }

var methodParallaxBackground [12]cMethodBind
func (gdClass ParallaxBackground) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CanvasLayer().virtual(rtype, name)
}
func (gdClass ParallaxBackground) SetScrollOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[0], &offset) }
func (gdClass ParallaxBackground) GetScrollOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxBackground[1]) }
func (gdClass ParallaxBackground) SetScrollBaseOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[2], &offset) }
func (gdClass ParallaxBackground) GetScrollBaseOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxBackground[3]) }
func (gdClass ParallaxBackground) SetScrollBaseScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[4], &scale) }
func (gdClass ParallaxBackground) GetScrollBaseScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxBackground[5]) }
func (gdClass ParallaxBackground) SetLimitBegin(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[6], &offset) }
func (gdClass ParallaxBackground) GetLimitBegin() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxBackground[7]) }
func (gdClass ParallaxBackground) SetLimitEnd(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[8], &offset) }
func (gdClass ParallaxBackground) GetLimitEnd() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxBackground[9]) }
func (gdClass ParallaxBackground) SetIgnoreCameraZoom(ignore bool)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxBackground[10], &ignore) }
func (gdClass ParallaxBackground) IsIgnoreCameraZoom() bool { return methodCall[bool](gdClass.obj.get(), methodParallaxBackground[11]) }

type ParallaxLayer struct{self *ParallaxLayer; obj safeObject }
func NewParallaxLayer(ctx Context, at *ParallaxLayer) ParallaxLayer { if at == nil { at = new(ParallaxLayer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ParallaxLayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ParallaxLayer) owner() cObject { return gdClass.obj.get() }
func (ParallaxLayer) class() string { return "ParallaxLayer\000" }

func (gdClass ParallaxLayer) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodParallaxLayer [6]cMethodBind
func (gdClass ParallaxLayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass ParallaxLayer) SetMotionScale(scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxLayer[0], &scale) }
func (gdClass ParallaxLayer) GetMotionScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxLayer[1]) }
func (gdClass ParallaxLayer) SetMotionOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxLayer[2], &offset) }
func (gdClass ParallaxLayer) GetMotionOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxLayer[3]) }
func (gdClass ParallaxLayer) SetMirroring(mirror Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodParallaxLayer[4], &mirror) }
func (gdClass ParallaxLayer) GetMirroring() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodParallaxLayer[5]) }

type ParticleProcessMaterialParameter int64

const (
	ParticleProcessMaterialParamInitialLinearVelocity ParticleProcessMaterialParameter = 0
	ParticleProcessMaterialParamAngularVelocity ParticleProcessMaterialParameter = 1
	ParticleProcessMaterialParamOrbitVelocity ParticleProcessMaterialParameter = 2
	ParticleProcessMaterialParamLinearAccel ParticleProcessMaterialParameter = 3
	ParticleProcessMaterialParamRadialAccel ParticleProcessMaterialParameter = 4
	ParticleProcessMaterialParamTangentialAccel ParticleProcessMaterialParameter = 5
	ParticleProcessMaterialParamDamping ParticleProcessMaterialParameter = 6
	ParticleProcessMaterialParamAngle ParticleProcessMaterialParameter = 7
	ParticleProcessMaterialParamScale ParticleProcessMaterialParameter = 8
	ParticleProcessMaterialParamHueVariation ParticleProcessMaterialParameter = 9
	ParticleProcessMaterialParamAnimSpeed ParticleProcessMaterialParameter = 10
	ParticleProcessMaterialParamAnimOffset ParticleProcessMaterialParameter = 11
	ParticleProcessMaterialParamMax ParticleProcessMaterialParameter = 15
	ParticleProcessMaterialParamTurbVelInfluence ParticleProcessMaterialParameter = 13
	ParticleProcessMaterialParamTurbInitDisplacement ParticleProcessMaterialParameter = 14
	ParticleProcessMaterialParamTurbInfluenceOverLife ParticleProcessMaterialParameter = 12
)

type ParticleProcessMaterialParticleFlags int64

const (
	ParticleProcessMaterialParticleFlagAlignYToVelocity ParticleProcessMaterialParticleFlags = 0
	ParticleProcessMaterialParticleFlagRotateY ParticleProcessMaterialParticleFlags = 1
	ParticleProcessMaterialParticleFlagDisableZ ParticleProcessMaterialParticleFlags = 2
	ParticleProcessMaterialParticleFlagMax ParticleProcessMaterialParticleFlags = 3
)

type ParticleProcessMaterialEmissionShape int64

const (
	ParticleProcessMaterialEmissionShapePoint ParticleProcessMaterialEmissionShape = 0
	ParticleProcessMaterialEmissionShapeSphere ParticleProcessMaterialEmissionShape = 1
	ParticleProcessMaterialEmissionShapeSphereSurface ParticleProcessMaterialEmissionShape = 2
	ParticleProcessMaterialEmissionShapeBox ParticleProcessMaterialEmissionShape = 3
	ParticleProcessMaterialEmissionShapePoints ParticleProcessMaterialEmissionShape = 4
	ParticleProcessMaterialEmissionShapeDirectedPoints ParticleProcessMaterialEmissionShape = 5
	ParticleProcessMaterialEmissionShapeRing ParticleProcessMaterialEmissionShape = 6
	ParticleProcessMaterialEmissionShapeMax ParticleProcessMaterialEmissionShape = 7
)

type ParticleProcessMaterialSubEmitterMode int64

const (
	ParticleProcessMaterialSubEmitterDisabled ParticleProcessMaterialSubEmitterMode = 0
	ParticleProcessMaterialSubEmitterConstant ParticleProcessMaterialSubEmitterMode = 1
	ParticleProcessMaterialSubEmitterAtEnd ParticleProcessMaterialSubEmitterMode = 2
	ParticleProcessMaterialSubEmitterAtCollision ParticleProcessMaterialSubEmitterMode = 3
	ParticleProcessMaterialSubEmitterMax ParticleProcessMaterialSubEmitterMode = 4
)

type ParticleProcessMaterialCollisionMode int64

const (
	ParticleProcessMaterialCollisionDisabled ParticleProcessMaterialCollisionMode = 0
	ParticleProcessMaterialCollisionRigid ParticleProcessMaterialCollisionMode = 1
	ParticleProcessMaterialCollisionHideOnContact ParticleProcessMaterialCollisionMode = 2
	ParticleProcessMaterialCollisionMax ParticleProcessMaterialCollisionMode = 3
)

type ParticleProcessMaterial struct{self *ParticleProcessMaterial; obj safeObject }
func NewParticleProcessMaterial(ctx Context, at *ParticleProcessMaterial) ParticleProcessMaterial { if at == nil { at = new(ParticleProcessMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ParticleProcessMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ParticleProcessMaterial) owner() cObject { return gdClass.obj.get() }
func (ParticleProcessMaterial) class() string { return "ParticleProcessMaterial\000" }

func (gdClass ParticleProcessMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodParticleProcessMaterial [74]cMethodBind
func (gdClass ParticleProcessMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass ParticleProcessMaterial) SetDirection(degrees Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[0], &degrees) }
func (gdClass ParticleProcessMaterial) GetDirection() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodParticleProcessMaterial[1]) }
func (gdClass ParticleProcessMaterial) SetSpread(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[2], &degrees) }
func (gdClass ParticleProcessMaterial) GetSpread() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[3]) }
func (gdClass ParticleProcessMaterial) SetFlatness(amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[4], &amount) }
func (gdClass ParticleProcessMaterial) GetFlatness() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[5]) }
func (gdClass ParticleProcessMaterial) SetParamMin(param ParticleProcessMaterialParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[6], &param, &value) }
func (gdClass ParticleProcessMaterial) GetParamMin(param ParticleProcessMaterialParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[7], &param) }
func (gdClass ParticleProcessMaterial) SetParamMax(param ParticleProcessMaterialParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[8], &param, &value) }
func (gdClass ParticleProcessMaterial) GetParamMax(param ParticleProcessMaterialParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[9], &param) }
func (gdClass ParticleProcessMaterial) SetParamTexture(param ParticleProcessMaterialParameter, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[10], &param, &texture) }
func (gdClass ParticleProcessMaterial) GetParamTexture(param ParticleProcessMaterialParameter) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[11], &param) }
func (gdClass ParticleProcessMaterial) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[12], &color) }
func (gdClass ParticleProcessMaterial) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodParticleProcessMaterial[13]) }
func (gdClass ParticleProcessMaterial) SetColorRamp(ramp Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[14], &ramp) }
func (gdClass ParticleProcessMaterial) GetColorRamp() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[15]) }
func (gdClass ParticleProcessMaterial) SetColorInitialRamp(ramp Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[16], &ramp) }
func (gdClass ParticleProcessMaterial) GetColorInitialRamp() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[17]) }
func (gdClass ParticleProcessMaterial) SetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[18], &particle_flag, &enable) }
func (gdClass ParticleProcessMaterial) GetParticleFlag(particle_flag ParticleProcessMaterialParticleFlags) bool { return methodCall[bool](gdClass.obj.get(), methodParticleProcessMaterial[19], &particle_flag) }
func (gdClass ParticleProcessMaterial) SetEmissionShape(shape ParticleProcessMaterialEmissionShape)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[20], &shape) }
func (gdClass ParticleProcessMaterial) GetEmissionShape() ParticleProcessMaterialEmissionShape { return methodCall[ParticleProcessMaterialEmissionShape](gdClass.obj.get(), methodParticleProcessMaterial[21]) }
func (gdClass ParticleProcessMaterial) SetEmissionSphereRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[22], &radius) }
func (gdClass ParticleProcessMaterial) GetEmissionSphereRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[23]) }
func (gdClass ParticleProcessMaterial) SetEmissionBoxExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[24], &extents) }
func (gdClass ParticleProcessMaterial) GetEmissionBoxExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodParticleProcessMaterial[25]) }
func (gdClass ParticleProcessMaterial) SetEmissionPointTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[26], &texture) }
func (gdClass ParticleProcessMaterial) GetEmissionPointTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[27]) }
func (gdClass ParticleProcessMaterial) SetEmissionNormalTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[28], &texture) }
func (gdClass ParticleProcessMaterial) GetEmissionNormalTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[29]) }
func (gdClass ParticleProcessMaterial) SetEmissionColorTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[30], &texture) }
func (gdClass ParticleProcessMaterial) GetEmissionColorTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodParticleProcessMaterial[31]) }
func (gdClass ParticleProcessMaterial) SetEmissionPointCount(point_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[32], &point_count) }
func (gdClass ParticleProcessMaterial) GetEmissionPointCount() int64 { return methodCall[int64](gdClass.obj.get(), methodParticleProcessMaterial[33]) }
func (gdClass ParticleProcessMaterial) SetEmissionRingAxis(axis Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[34], &axis) }
func (gdClass ParticleProcessMaterial) GetEmissionRingAxis() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodParticleProcessMaterial[35]) }
func (gdClass ParticleProcessMaterial) SetEmissionRingHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[36], &height) }
func (gdClass ParticleProcessMaterial) GetEmissionRingHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[37]) }
func (gdClass ParticleProcessMaterial) SetEmissionRingRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[38], &radius) }
func (gdClass ParticleProcessMaterial) GetEmissionRingRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[39]) }
func (gdClass ParticleProcessMaterial) SetEmissionRingInnerRadius(inner_radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[40], &inner_radius) }
func (gdClass ParticleProcessMaterial) GetEmissionRingInnerRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[41]) }
func (gdClass ParticleProcessMaterial) GetTurbulenceEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodParticleProcessMaterial[42]) }
func (gdClass ParticleProcessMaterial) SetTurbulenceEnabled(turbulence_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[43], &turbulence_enabled) }
func (gdClass ParticleProcessMaterial) GetTurbulenceNoiseStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[44]) }
func (gdClass ParticleProcessMaterial) SetTurbulenceNoiseStrength(turbulence_noise_strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[45], &turbulence_noise_strength) }
func (gdClass ParticleProcessMaterial) GetTurbulenceNoiseScale() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[46]) }
func (gdClass ParticleProcessMaterial) SetTurbulenceNoiseScale(turbulence_noise_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[47], &turbulence_noise_scale) }
func (gdClass ParticleProcessMaterial) GetTurbulenceNoiseSpeedRandom() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[48]) }
func (gdClass ParticleProcessMaterial) SetTurbulenceNoiseSpeedRandom(turbulence_noise_speed_random float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[49], &turbulence_noise_speed_random) }
func (gdClass ParticleProcessMaterial) GetTurbulenceNoiseSpeed() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodParticleProcessMaterial[50]) }
func (gdClass ParticleProcessMaterial) SetTurbulenceNoiseSpeed(turbulence_noise_speed Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[51], &turbulence_noise_speed) }
func (gdClass ParticleProcessMaterial) GetGravity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodParticleProcessMaterial[52]) }
func (gdClass ParticleProcessMaterial) SetGravity(accel_vec Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[53], &accel_vec) }
func (gdClass ParticleProcessMaterial) SetLifetimeRandomness(randomness float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[54], &randomness) }
func (gdClass ParticleProcessMaterial) GetLifetimeRandomness() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[55]) }
func (gdClass ParticleProcessMaterial) GetSubEmitterMode() ParticleProcessMaterialSubEmitterMode { return methodCall[ParticleProcessMaterialSubEmitterMode](gdClass.obj.get(), methodParticleProcessMaterial[56]) }
func (gdClass ParticleProcessMaterial) SetSubEmitterMode(mode ParticleProcessMaterialSubEmitterMode)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[57], &mode) }
func (gdClass ParticleProcessMaterial) GetSubEmitterFrequency() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[58]) }
func (gdClass ParticleProcessMaterial) SetSubEmitterFrequency(hz float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[59], &hz) }
func (gdClass ParticleProcessMaterial) GetSubEmitterAmountAtEnd() int64 { return methodCall[int64](gdClass.obj.get(), methodParticleProcessMaterial[60]) }
func (gdClass ParticleProcessMaterial) SetSubEmitterAmountAtEnd(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[61], &amount) }
func (gdClass ParticleProcessMaterial) GetSubEmitterKeepVelocity() bool { return methodCall[bool](gdClass.obj.get(), methodParticleProcessMaterial[62]) }
func (gdClass ParticleProcessMaterial) SetSubEmitterKeepVelocity(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[63], &enable) }
func (gdClass ParticleProcessMaterial) SetAttractorInteractionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[64], &enabled) }
func (gdClass ParticleProcessMaterial) IsAttractorInteractionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodParticleProcessMaterial[65]) }
func (gdClass ParticleProcessMaterial) SetCollisionMode(mode ParticleProcessMaterialCollisionMode)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[66], &mode) }
func (gdClass ParticleProcessMaterial) GetCollisionMode() ParticleProcessMaterialCollisionMode { return methodCall[ParticleProcessMaterialCollisionMode](gdClass.obj.get(), methodParticleProcessMaterial[67]) }
func (gdClass ParticleProcessMaterial) SetCollisionUseScale(radius bool)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[68], &radius) }
func (gdClass ParticleProcessMaterial) IsCollisionUsingScale() bool { return methodCall[bool](gdClass.obj.get(), methodParticleProcessMaterial[69]) }
func (gdClass ParticleProcessMaterial) SetCollisionFriction(friction float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[70], &friction) }
func (gdClass ParticleProcessMaterial) GetCollisionFriction() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[71]) }
func (gdClass ParticleProcessMaterial) SetCollisionBounce(bounce float64)  { methodCall[struct{}](gdClass.obj.get(), methodParticleProcessMaterial[72], &bounce) }
func (gdClass ParticleProcessMaterial) GetCollisionBounce() float64 { return methodCall[float64](gdClass.obj.get(), methodParticleProcessMaterial[73]) }

type Path2D struct{self *Path2D; obj safeObject }
func NewPath2D(ctx Context, at *Path2D) Path2D { if at == nil { at = new(Path2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Path2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Path2D) owner() cObject { return gdClass.obj.get() }
func (Path2D) class() string { return "Path2D\000" }

func (gdClass Path2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodPath2D [2]cMethodBind
func (gdClass Path2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Path2D) SetCurve(curve Curve2D)  { methodCall[struct{}](gdClass.obj.get(), methodPath2D[0], &curve) }
func (gdClass Path2D) GetCurve() Curve2D { return methodCall[Curve2D](gdClass.obj.get(), methodPath2D[1]) }

type Path3D struct{self *Path3D; obj safeObject }
func NewPath3D(ctx Context, at *Path3D) Path3D { if at == nil { at = new(Path3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Path3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Path3D) owner() cObject { return gdClass.obj.get() }
func (Path3D) class() string { return "Path3D\000" }

func (gdClass Path3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodPath3D [2]cMethodBind
func (gdClass Path3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass Path3D) SetCurve(curve Curve3D)  { methodCall[struct{}](gdClass.obj.get(), methodPath3D[0], &curve) }
func (gdClass Path3D) GetCurve() Curve3D { return methodCall[Curve3D](gdClass.obj.get(), methodPath3D[1]) }

type PathFollow2D struct{self *PathFollow2D; obj safeObject }
func NewPathFollow2D(ctx Context, at *PathFollow2D) PathFollow2D { if at == nil { at = new(PathFollow2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PathFollow2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PathFollow2D) owner() cObject { return gdClass.obj.get() }
func (PathFollow2D) class() string { return "PathFollow2D\000" }

func (gdClass PathFollow2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodPathFollow2D [16]cMethodBind
func (gdClass PathFollow2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass PathFollow2D) SetProgress(progress float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[0], &progress) }
func (gdClass PathFollow2D) GetProgress() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow2D[1]) }
func (gdClass PathFollow2D) SetHOffset(h_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[2], &h_offset) }
func (gdClass PathFollow2D) GetHOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow2D[3]) }
func (gdClass PathFollow2D) SetVOffset(v_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[4], &v_offset) }
func (gdClass PathFollow2D) GetVOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow2D[5]) }
func (gdClass PathFollow2D) SetProgressRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[6], &ratio) }
func (gdClass PathFollow2D) GetProgressRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow2D[7]) }
func (gdClass PathFollow2D) SetRotates(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[8], &enable) }
func (gdClass PathFollow2D) IsRotating() bool { return methodCall[bool](gdClass.obj.get(), methodPathFollow2D[9]) }
func (gdClass PathFollow2D) SetCubicInterpolation(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[10], &enable) }
func (gdClass PathFollow2D) GetCubicInterpolation() bool { return methodCall[bool](gdClass.obj.get(), methodPathFollow2D[11]) }
func (gdClass PathFollow2D) SetLoop(loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[12], &loop) }
func (gdClass PathFollow2D) HasLoop() bool { return methodCall[bool](gdClass.obj.get(), methodPathFollow2D[13]) }
func (gdClass PathFollow2D) SetLookahead(lookahead float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow2D[14], &lookahead) }
func (gdClass PathFollow2D) GetLookahead() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow2D[15]) }

type PathFollow3DRotationMode int64

const (
	PathFollow3DRotationNone PathFollow3DRotationMode = 0
	PathFollow3DRotationY PathFollow3DRotationMode = 1
	PathFollow3DRotationXy PathFollow3DRotationMode = 2
	PathFollow3DRotationXyz PathFollow3DRotationMode = 3
	PathFollow3DRotationOriented PathFollow3DRotationMode = 4
)

type PathFollow3D struct{self *PathFollow3D; obj safeObject }
func NewPathFollow3D(ctx Context, at *PathFollow3D) PathFollow3D { if at == nil { at = new(PathFollow3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PathFollow3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PathFollow3D) owner() cObject { return gdClass.obj.get() }
func (PathFollow3D) class() string { return "PathFollow3D\000" }

func (gdClass PathFollow3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodPathFollow3D [14]cMethodBind
func (gdClass PathFollow3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass PathFollow3D) SetProgress(progress float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[0], &progress) }
func (gdClass PathFollow3D) GetProgress() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow3D[1]) }
func (gdClass PathFollow3D) SetHOffset(h_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[2], &h_offset) }
func (gdClass PathFollow3D) GetHOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow3D[3]) }
func (gdClass PathFollow3D) SetVOffset(v_offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[4], &v_offset) }
func (gdClass PathFollow3D) GetVOffset() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow3D[5]) }
func (gdClass PathFollow3D) SetProgressRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[6], &ratio) }
func (gdClass PathFollow3D) GetProgressRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodPathFollow3D[7]) }
func (gdClass PathFollow3D) SetRotationMode(rotation_mode PathFollow3DRotationMode)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[8], &rotation_mode) }
func (gdClass PathFollow3D) GetRotationMode() PathFollow3DRotationMode { return methodCall[PathFollow3DRotationMode](gdClass.obj.get(), methodPathFollow3D[9]) }
func (gdClass PathFollow3D) SetCubicInterpolation(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[10], &enable) }
func (gdClass PathFollow3D) GetCubicInterpolation() bool { return methodCall[bool](gdClass.obj.get(), methodPathFollow3D[11]) }
func (gdClass PathFollow3D) SetLoop(loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodPathFollow3D[12], &loop) }
func (gdClass PathFollow3D) HasLoop() bool { return methodCall[bool](gdClass.obj.get(), methodPathFollow3D[13]) }

type PerformanceMonitor int64

const (
	PerformanceTimeFps PerformanceMonitor = 0
	PerformanceTimeProcess PerformanceMonitor = 1
	PerformanceTimePhysicsProcess PerformanceMonitor = 2
	PerformanceMemoryStatic PerformanceMonitor = 3
	PerformanceMemoryStaticMax PerformanceMonitor = 4
	PerformanceMemoryMessageBufferMax PerformanceMonitor = 5
	PerformanceObjectCount PerformanceMonitor = 6
	PerformanceObjectResourceCount PerformanceMonitor = 7
	PerformanceObjectNodeCount PerformanceMonitor = 8
	PerformanceObjectOrphanNodeCount PerformanceMonitor = 9
	PerformanceRenderTotalObjectsInFrame PerformanceMonitor = 10
	PerformanceRenderTotalPrimitivesInFrame PerformanceMonitor = 11
	PerformanceRenderTotalDrawCallsInFrame PerformanceMonitor = 12
	PerformanceRenderVideoMemUsed PerformanceMonitor = 13
	PerformanceRenderTextureMemUsed PerformanceMonitor = 14
	PerformanceRenderBufferMemUsed PerformanceMonitor = 15
	PerformancePhysics2dActiveObjects PerformanceMonitor = 16
	PerformancePhysics2dCollisionPairs PerformanceMonitor = 17
	PerformancePhysics2dIslandCount PerformanceMonitor = 18
	PerformancePhysics3dActiveObjects PerformanceMonitor = 19
	PerformancePhysics3dCollisionPairs PerformanceMonitor = 20
	PerformancePhysics3dIslandCount PerformanceMonitor = 21
	PerformanceAudioOutputLatency PerformanceMonitor = 22
	PerformanceMonitorMax PerformanceMonitor = 23
)
var Performance PerformanceSingleton

type PerformanceSingleton struct{self *PerformanceSingleton; obj safeObject }
func NewPerformanceSingleton(ctx Context, at *PerformanceSingleton) PerformanceSingleton { if at == nil { at = new(PerformanceSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PerformanceSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PerformanceSingleton) owner() cObject { return gdClass.obj.get() }
func (PerformanceSingleton) class() string { return "PerformanceSingleton\000" }

func (gdClass PerformanceSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodPerformanceSingleton [7]cMethodBind
func (gdClass PerformanceSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PerformanceSingleton) GetMonitor(monitor PerformanceMonitor) float64 { return methodCall[float64](gdClass.obj.get(), methodPerformanceSingleton[0], &monitor) }
func (gdClass PerformanceSingleton) AddCustomMonitor(id Name, callable Callable, arguments Array)  { methodCall[struct{}](gdClass.obj.get(), methodPerformanceSingleton[1], &id, &callable, &arguments) }
func (gdClass PerformanceSingleton) RemoveCustomMonitor(id Name)  { methodCall[struct{}](gdClass.obj.get(), methodPerformanceSingleton[2], &id) }
func (gdClass PerformanceSingleton) HasCustomMonitor(id Name) bool { return methodCall[bool](gdClass.obj.get(), methodPerformanceSingleton[3], &id) }
func (gdClass PerformanceSingleton) GetCustomMonitor(id Name) any { return methodCall[any](gdClass.obj.get(), methodPerformanceSingleton[4], &id) }
func (gdClass PerformanceSingleton) GetMonitorModificationTime() int64 { return methodCall[int64](gdClass.obj.get(), methodPerformanceSingleton[5]) }
func (gdClass PerformanceSingleton) GetCustomMonitorNames() Array { return methodCall[Array](gdClass.obj.get(), methodPerformanceSingleton[6]) }

type PhysicalBone2D struct{self *PhysicalBone2D; obj safeObject }
func NewPhysicalBone2D(ctx Context, at *PhysicalBone2D) PhysicalBone2D { if at == nil { at = new(PhysicalBone2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicalBone2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicalBone2D) owner() cObject { return gdClass.obj.get() }
func (PhysicalBone2D) class() string { return "PhysicalBone2D\000" }

func (gdClass PhysicalBone2D) RigidBody2D() RigidBody2D { return RigidBody2D{obj:gdClass.obj} }

var methodPhysicalBone2D [12]cMethodBind
func (gdClass PhysicalBone2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RigidBody2D().virtual(rtype, name)
}
func (gdClass PhysicalBone2D) GetJoint() Joint2D { return methodCall[Joint2D](gdClass.obj.get(), methodPhysicalBone2D[0]) }
func (gdClass PhysicalBone2D) GetAutoConfigureJoint() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone2D[1]) }
func (gdClass PhysicalBone2D) SetAutoConfigureJoint(auto_configure_joint bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone2D[2], &auto_configure_joint) }
func (gdClass PhysicalBone2D) SetSimulatePhysics(simulate_physics bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone2D[3], &simulate_physics) }
func (gdClass PhysicalBone2D) GetSimulatePhysics() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone2D[4]) }
func (gdClass PhysicalBone2D) IsSimulatingPhysics() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone2D[5]) }
func (gdClass PhysicalBone2D) SetBone2dNodepath(nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone2D[6], &nodepath) }
func (gdClass PhysicalBone2D) GetBone2dNodepath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodPhysicalBone2D[7]) }
func (gdClass PhysicalBone2D) SetBone2dIndex(bone_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone2D[8], &bone_index) }
func (gdClass PhysicalBone2D) GetBone2dIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicalBone2D[9]) }
func (gdClass PhysicalBone2D) SetFollowBoneWhenSimulating(follow_bone bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone2D[10], &follow_bone) }
func (gdClass PhysicalBone2D) GetFollowBoneWhenSimulating() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone2D[11]) }

type PhysicalBone3DDampMode int64

const (
	PhysicalBone3DDampModeCombine PhysicalBone3DDampMode = 0
	PhysicalBone3DDampModeReplace PhysicalBone3DDampMode = 1
)

type PhysicalBone3DJointType int64

const (
	PhysicalBone3DJointTypeNone PhysicalBone3DJointType = 0
	PhysicalBone3DJointTypePin PhysicalBone3DJointType = 1
	PhysicalBone3DJointTypeCone PhysicalBone3DJointType = 2
	PhysicalBone3DJointTypeHinge PhysicalBone3DJointType = 3
	PhysicalBone3DJointTypeSlider PhysicalBone3DJointType = 4
	PhysicalBone3DJointType6dof PhysicalBone3DJointType = 5
)

type PhysicalBone3D struct{self *PhysicalBone3D; obj safeObject }
func NewPhysicalBone3D(ctx Context, at *PhysicalBone3D) PhysicalBone3D { if at == nil { at = new(PhysicalBone3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicalBone3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicalBone3D) owner() cObject { return gdClass.obj.get() }
func (PhysicalBone3D) class() string { return "PhysicalBone3D\000" }

func (gdClass PhysicalBone3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D{obj:gdClass.obj} }

var methodPhysicalBone3D [37]cMethodBind
func (gdClass PhysicalBone3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_integrate_forces":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntegrateForces(state PhysicsDirectBodyState3D)  }{}).Elem()) {
			return rtype.MethodByName(`IntegrateForces`)
		}
		return
	}
	return gdClass.PhysicsBody3D().virtual(rtype, name)
}
func (gdClass PhysicalBone3D) ApplyCentralImpulse(impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[0], &impulse) }
func (gdClass PhysicalBone3D) ApplyImpulse(impulse Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[1], &impulse, &position) }
func (gdClass PhysicalBone3D) SetJointType(joint_type PhysicalBone3DJointType)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[2], &joint_type) }
func (gdClass PhysicalBone3D) GetJointType() PhysicalBone3DJointType { return methodCall[PhysicalBone3DJointType](gdClass.obj.get(), methodPhysicalBone3D[3]) }
func (gdClass PhysicalBone3D) SetJointOffset(offset Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[4], &offset) }
func (gdClass PhysicalBone3D) GetJointOffset() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicalBone3D[5]) }
func (gdClass PhysicalBone3D) SetJointRotation(euler Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[6], &euler) }
func (gdClass PhysicalBone3D) GetJointRotation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicalBone3D[7]) }
func (gdClass PhysicalBone3D) SetBodyOffset(offset Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[8], &offset) }
func (gdClass PhysicalBone3D) GetBodyOffset() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicalBone3D[9]) }
func (gdClass PhysicalBone3D) GetSimulatePhysics() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone3D[10]) }
func (gdClass PhysicalBone3D) IsSimulatingPhysics() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone3D[11]) }
func (gdClass PhysicalBone3D) GetBoneId() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicalBone3D[12]) }
func (gdClass PhysicalBone3D) SetMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[13], &mass) }
func (gdClass PhysicalBone3D) GetMass() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[14]) }
func (gdClass PhysicalBone3D) SetFriction(friction float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[15], &friction) }
func (gdClass PhysicalBone3D) GetFriction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[16]) }
func (gdClass PhysicalBone3D) SetBounce(bounce float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[17], &bounce) }
func (gdClass PhysicalBone3D) GetBounce() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[18]) }
func (gdClass PhysicalBone3D) SetGravityScale(gravity_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[19], &gravity_scale) }
func (gdClass PhysicalBone3D) GetGravityScale() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[20]) }
func (gdClass PhysicalBone3D) SetLinearDampMode(linear_damp_mode PhysicalBone3DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[21], &linear_damp_mode) }
func (gdClass PhysicalBone3D) GetLinearDampMode() PhysicalBone3DDampMode { return methodCall[PhysicalBone3DDampMode](gdClass.obj.get(), methodPhysicalBone3D[22]) }
func (gdClass PhysicalBone3D) SetAngularDampMode(angular_damp_mode PhysicalBone3DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[23], &angular_damp_mode) }
func (gdClass PhysicalBone3D) GetAngularDampMode() PhysicalBone3DDampMode { return methodCall[PhysicalBone3DDampMode](gdClass.obj.get(), methodPhysicalBone3D[24]) }
func (gdClass PhysicalBone3D) SetLinearDamp(linear_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[25], &linear_damp) }
func (gdClass PhysicalBone3D) GetLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[26]) }
func (gdClass PhysicalBone3D) SetAngularDamp(angular_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[27], &angular_damp) }
func (gdClass PhysicalBone3D) GetAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalBone3D[28]) }
func (gdClass PhysicalBone3D) SetLinearVelocity(linear_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[29], &linear_velocity) }
func (gdClass PhysicalBone3D) GetLinearVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicalBone3D[30]) }
func (gdClass PhysicalBone3D) SetAngularVelocity(angular_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[31], &angular_velocity) }
func (gdClass PhysicalBone3D) GetAngularVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicalBone3D[32]) }
func (gdClass PhysicalBone3D) SetUseCustomIntegrator(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[33], &enable) }
func (gdClass PhysicalBone3D) IsUsingCustomIntegrator() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone3D[34]) }
func (gdClass PhysicalBone3D) SetCanSleep(able_to_sleep bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalBone3D[35], &able_to_sleep) }
func (gdClass PhysicalBone3D) IsAbleToSleep() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalBone3D[36]) }

type PhysicalSkyMaterial struct{self *PhysicalSkyMaterial; obj safeObject }
func NewPhysicalSkyMaterial(ctx Context, at *PhysicalSkyMaterial) PhysicalSkyMaterial { if at == nil { at = new(PhysicalSkyMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicalSkyMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicalSkyMaterial) owner() cObject { return gdClass.obj.get() }
func (PhysicalSkyMaterial) class() string { return "PhysicalSkyMaterial\000" }

func (gdClass PhysicalSkyMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodPhysicalSkyMaterial [22]cMethodBind
func (gdClass PhysicalSkyMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass PhysicalSkyMaterial) SetRayleighCoefficient(rayleigh float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[0], &rayleigh) }
func (gdClass PhysicalSkyMaterial) GetRayleighCoefficient() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[1]) }
func (gdClass PhysicalSkyMaterial) SetRayleighColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[2], &color) }
func (gdClass PhysicalSkyMaterial) GetRayleighColor() Color { return methodCall[Color](gdClass.obj.get(), methodPhysicalSkyMaterial[3]) }
func (gdClass PhysicalSkyMaterial) SetMieCoefficient(mie float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[4], &mie) }
func (gdClass PhysicalSkyMaterial) GetMieCoefficient() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[5]) }
func (gdClass PhysicalSkyMaterial) SetMieEccentricity(eccentricity float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[6], &eccentricity) }
func (gdClass PhysicalSkyMaterial) GetMieEccentricity() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[7]) }
func (gdClass PhysicalSkyMaterial) SetMieColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[8], &color) }
func (gdClass PhysicalSkyMaterial) GetMieColor() Color { return methodCall[Color](gdClass.obj.get(), methodPhysicalSkyMaterial[9]) }
func (gdClass PhysicalSkyMaterial) SetTurbidity(turbidity float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[10], &turbidity) }
func (gdClass PhysicalSkyMaterial) GetTurbidity() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[11]) }
func (gdClass PhysicalSkyMaterial) SetSunDiskScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[12], &scale) }
func (gdClass PhysicalSkyMaterial) GetSunDiskScale() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[13]) }
func (gdClass PhysicalSkyMaterial) SetGroundColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[14], &color) }
func (gdClass PhysicalSkyMaterial) GetGroundColor() Color { return methodCall[Color](gdClass.obj.get(), methodPhysicalSkyMaterial[15]) }
func (gdClass PhysicalSkyMaterial) SetExposure(exposure float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[16], &exposure) }
func (gdClass PhysicalSkyMaterial) GetExposure() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicalSkyMaterial[17]) }
func (gdClass PhysicalSkyMaterial) SetUseDebanding(use_debanding bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[18], &use_debanding) }
func (gdClass PhysicalSkyMaterial) GetUseDebanding() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicalSkyMaterial[19]) }
func (gdClass PhysicalSkyMaterial) SetNightSky(night_sky Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicalSkyMaterial[20], &night_sky) }
func (gdClass PhysicalSkyMaterial) GetNightSky() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodPhysicalSkyMaterial[21]) }

type PhysicsBody2D struct{self *PhysicsBody2D; obj safeObject }
func NewPhysicsBody2D(ctx Context, at *PhysicsBody2D) PhysicsBody2D { if at == nil { at = new(PhysicsBody2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsBody2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsBody2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsBody2D) class() string { return "PhysicsBody2D\000" }

func (gdClass PhysicsBody2D) CollisionObject2D() CollisionObject2D { return CollisionObject2D{obj:gdClass.obj} }

var methodPhysicsBody2D [5]cMethodBind
func (gdClass PhysicsBody2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CollisionObject2D().virtual(rtype, name)
}
func (gdClass PhysicsBody2D) MoveAndCollide(distance Vector2, test_only bool, safe_margin float64) KinematicCollision2D { return methodCall[KinematicCollision2D](gdClass.obj.get(), methodPhysicsBody2D[0], &distance, &test_only, &safe_margin) }
func (gdClass PhysicsBody2D) TestMove(from Transform2D, distance Vector2, collision KinematicCollision2D, safe_margin float64) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsBody2D[1], &from, &distance, &collision, &safe_margin) }
func (gdClass PhysicsBody2D) GetCollisionExceptions() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsBody2D[2]) }
func (gdClass PhysicsBody2D) AddCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsBody2D[3], &body) }
func (gdClass PhysicsBody2D) RemoveCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsBody2D[4], &body) }

type PhysicsBody3D struct{self *PhysicsBody3D; obj safeObject }
func NewPhysicsBody3D(ctx Context, at *PhysicsBody3D) PhysicsBody3D { if at == nil { at = new(PhysicsBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsBody3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsBody3D) class() string { return "PhysicsBody3D\000" }

func (gdClass PhysicsBody3D) CollisionObject3D() CollisionObject3D { return CollisionObject3D{obj:gdClass.obj} }

var methodPhysicsBody3D [7]cMethodBind
func (gdClass PhysicsBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.CollisionObject3D().virtual(rtype, name)
}
func (gdClass PhysicsBody3D) MoveAndCollide(distance Vector3, test_only bool, safe_margin float64, max_collisions int64) KinematicCollision3D { return methodCall[KinematicCollision3D](gdClass.obj.get(), methodPhysicsBody3D[0], &distance, &test_only, &safe_margin, &max_collisions) }
func (gdClass PhysicsBody3D) TestMove(from Transform3D, distance Vector3, collision KinematicCollision3D, safe_margin float64, max_collisions int64) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsBody3D[1], &from, &distance, &collision, &safe_margin, &max_collisions) }
func (gdClass PhysicsBody3D) SetAxisLock(axis PhysicsServer3DBodyAxis, lock bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsBody3D[2], &axis, &lock) }
func (gdClass PhysicsBody3D) GetAxisLock(axis PhysicsServer3DBodyAxis) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsBody3D[3], &axis) }
func (gdClass PhysicsBody3D) GetCollisionExceptions() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsBody3D[4]) }
func (gdClass PhysicsBody3D) AddCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsBody3D[5], &body) }
func (gdClass PhysicsBody3D) RemoveCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsBody3D[6], &body) }

type PhysicsDirectBodyState2D struct{self *PhysicsDirectBodyState2D; obj safeObject }
func NewPhysicsDirectBodyState2D(ctx Context, at *PhysicsDirectBodyState2D) PhysicsDirectBodyState2D { if at == nil { at = new(PhysicsDirectBodyState2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectBodyState2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectBodyState2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectBodyState2D) class() string { return "PhysicsDirectBodyState2D\000" }

func (gdClass PhysicsDirectBodyState2D) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsDirectBodyState2D [42]cMethodBind
func (gdClass PhysicsDirectBodyState2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsDirectBodyState2D) GetTotalGravity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[0]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[1]) }
func (gdClass PhysicsDirectBodyState2D) GetTotalAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[2]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMass() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[3]) }
func (gdClass PhysicsDirectBodyState2D) GetCenterOfMassLocal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[4]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseMass() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[5]) }
func (gdClass PhysicsDirectBodyState2D) GetInverseInertia() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[6]) }
func (gdClass PhysicsDirectBodyState2D) SetLinearVelocity(velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[7], &velocity) }
func (gdClass PhysicsDirectBodyState2D) GetLinearVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[8]) }
func (gdClass PhysicsDirectBodyState2D) SetAngularVelocity(velocity float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[9], &velocity) }
func (gdClass PhysicsDirectBodyState2D) GetAngularVelocity() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[10]) }
func (gdClass PhysicsDirectBodyState2D) SetTransform(transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[11], &transform) }
func (gdClass PhysicsDirectBodyState2D) GetTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsDirectBodyState2D[12]) }
func (gdClass PhysicsDirectBodyState2D) GetVelocityAtLocalPosition(local_position Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[13], &local_position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralImpulse(impulse Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[14], &impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorqueImpulse(impulse float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[15], &impulse) }
func (gdClass PhysicsDirectBodyState2D) ApplyImpulse(impulse Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[16], &impulse, &position) }
func (gdClass PhysicsDirectBodyState2D) ApplyCentralForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[17], &force) }
func (gdClass PhysicsDirectBodyState2D) ApplyForce(force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[18], &force, &position) }
func (gdClass PhysicsDirectBodyState2D) ApplyTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[19], &torque) }
func (gdClass PhysicsDirectBodyState2D) AddConstantCentralForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[20], &force) }
func (gdClass PhysicsDirectBodyState2D) AddConstantForce(force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[21], &force, &position) }
func (gdClass PhysicsDirectBodyState2D) AddConstantTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[22], &torque) }
func (gdClass PhysicsDirectBodyState2D) SetConstantForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[23], &force) }
func (gdClass PhysicsDirectBodyState2D) GetConstantForce() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[24]) }
func (gdClass PhysicsDirectBodyState2D) SetConstantTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[25], &torque) }
func (gdClass PhysicsDirectBodyState2D) GetConstantTorque() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[26]) }
func (gdClass PhysicsDirectBodyState2D) SetSleepState(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[27], &enabled) }
func (gdClass PhysicsDirectBodyState2D) IsSleeping() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsDirectBodyState2D[28]) }
func (gdClass PhysicsDirectBodyState2D) GetContactCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[29]) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalPosition(contact_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[30], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalNormal(contact_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[31], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactLocalShape(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[32], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactCollider(contact_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsDirectBodyState2D[33], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderPosition(contact_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[34], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderId(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[35], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderObject(contact_idx int64) Object { return methodCall[Object](gdClass.obj.get(), methodPhysicsDirectBodyState2D[36], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderShape(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[37], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsDirectBodyState2D[38], &contact_idx) }
func (gdClass PhysicsDirectBodyState2D) GetStep() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState2D[39]) }
func (gdClass PhysicsDirectBodyState2D) IntegrateForces()  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState2D[40]) }
func (gdClass PhysicsDirectBodyState2D) GetSpaceState() PhysicsDirectSpaceState2D { return methodCall[PhysicsDirectSpaceState2D](gdClass.obj.get(), methodPhysicsDirectBodyState2D[41]) }

type PhysicsDirectBodyState3D struct{self *PhysicsDirectBodyState3D; obj safeObject }
func NewPhysicsDirectBodyState3D(ctx Context, at *PhysicsDirectBodyState3D) PhysicsDirectBodyState3D { if at == nil { at = new(PhysicsDirectBodyState3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectBodyState3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectBodyState3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectBodyState3D) class() string { return "PhysicsDirectBodyState3D\000" }

func (gdClass PhysicsDirectBodyState3D) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsDirectBodyState3D [44]cMethodBind
func (gdClass PhysicsDirectBodyState3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsDirectBodyState3D) GetTotalGravity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[0]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[1]) }
func (gdClass PhysicsDirectBodyState3D) GetTotalAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[2]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMass() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[3]) }
func (gdClass PhysicsDirectBodyState3D) GetCenterOfMassLocal() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[4]) }
func (gdClass PhysicsDirectBodyState3D) GetPrincipalInertiaAxes() Basis { return methodCall[Basis](gdClass.obj.get(), methodPhysicsDirectBodyState3D[5]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseMass() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[6]) }
func (gdClass PhysicsDirectBodyState3D) GetInverseInertia() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[7]) }
func (gdClass PhysicsDirectBodyState3D) SetLinearVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[8], &velocity) }
func (gdClass PhysicsDirectBodyState3D) GetLinearVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[9]) }
func (gdClass PhysicsDirectBodyState3D) SetAngularVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[10], &velocity) }
func (gdClass PhysicsDirectBodyState3D) GetAngularVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[11]) }
func (gdClass PhysicsDirectBodyState3D) SetTransform(transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[12], &transform) }
func (gdClass PhysicsDirectBodyState3D) GetTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsDirectBodyState3D[13]) }
func (gdClass PhysicsDirectBodyState3D) GetVelocityAtLocalPosition(local_position Vector3) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[14], &local_position) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralImpulse(impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[15], &impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyImpulse(impulse Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[16], &impulse, &position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorqueImpulse(impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[17], &impulse) }
func (gdClass PhysicsDirectBodyState3D) ApplyCentralForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[18], &force) }
func (gdClass PhysicsDirectBodyState3D) ApplyForce(force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[19], &force, &position) }
func (gdClass PhysicsDirectBodyState3D) ApplyTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[20], &torque) }
func (gdClass PhysicsDirectBodyState3D) AddConstantCentralForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[21], &force) }
func (gdClass PhysicsDirectBodyState3D) AddConstantForce(force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[22], &force, &position) }
func (gdClass PhysicsDirectBodyState3D) AddConstantTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[23], &torque) }
func (gdClass PhysicsDirectBodyState3D) SetConstantForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[24], &force) }
func (gdClass PhysicsDirectBodyState3D) GetConstantForce() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[25]) }
func (gdClass PhysicsDirectBodyState3D) SetConstantTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[26], &torque) }
func (gdClass PhysicsDirectBodyState3D) GetConstantTorque() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[27]) }
func (gdClass PhysicsDirectBodyState3D) SetSleepState(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[28], &enabled) }
func (gdClass PhysicsDirectBodyState3D) IsSleeping() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsDirectBodyState3D[29]) }
func (gdClass PhysicsDirectBodyState3D) GetContactCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[30]) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalPosition(contact_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[31], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalNormal(contact_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[32], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactImpulse(contact_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[33], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactLocalShape(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[34], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactCollider(contact_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsDirectBodyState3D[35], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderPosition(contact_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[36], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderId(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[37], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderObject(contact_idx int64) Object { return methodCall[Object](gdClass.obj.get(), methodPhysicsDirectBodyState3D[38], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderShape(contact_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[39], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsDirectBodyState3D[40], &contact_idx) }
func (gdClass PhysicsDirectBodyState3D) GetStep() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsDirectBodyState3D[41]) }
func (gdClass PhysicsDirectBodyState3D) IntegrateForces()  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsDirectBodyState3D[42]) }
func (gdClass PhysicsDirectBodyState3D) GetSpaceState() PhysicsDirectSpaceState3D { return methodCall[PhysicsDirectSpaceState3D](gdClass.obj.get(), methodPhysicsDirectBodyState3D[43]) }

type PhysicsDirectBodyState3DExtension struct{self *PhysicsDirectBodyState3DExtension; obj safeObject }
func NewPhysicsDirectBodyState3DExtension(ctx Context, at *PhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3DExtension { if at == nil { at = new(PhysicsDirectBodyState3DExtension) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectBodyState3DExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectBodyState3DExtension) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectBodyState3DExtension) class() string { return "PhysicsDirectBodyState3DExtension\000" }

func (gdClass PhysicsDirectBodyState3DExtension) PhysicsDirectBodyState3D() PhysicsDirectBodyState3D { return PhysicsDirectBodyState3D{obj:gdClass.obj} }

func (gdClass PhysicsDirectBodyState3DExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_total_gravity":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTotalGravity() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetTotalGravity`)
		}
		return
	case "_get_total_linear_damp":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTotalLinearDamp() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetTotalLinearDamp`)
		}
		return
	case "_get_total_angular_damp":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTotalAngularDamp() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetTotalAngularDamp`)
		}
		return
	case "_get_center_of_mass":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCenterOfMass() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetCenterOfMass`)
		}
		return
	case "_get_center_of_mass_local":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCenterOfMassLocal() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetCenterOfMassLocal`)
		}
		return
	case "_get_principal_inertia_axes":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPrincipalInertiaAxes() Basis }{}).Elem()) {
			return rtype.MethodByName(`GetPrincipalInertiaAxes`)
		}
		return
	case "_get_inverse_mass":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInverseMass() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetInverseMass`)
		}
		return
	case "_get_inverse_inertia":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInverseInertia() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetInverseInertia`)
		}
		return
	case "_set_linear_velocity":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetLinearVelocity(velocity Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`SetLinearVelocity`)
		}
		return
	case "_get_linear_velocity":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLinearVelocity() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetLinearVelocity`)
		}
		return
	case "_set_angular_velocity":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetAngularVelocity(velocity Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`SetAngularVelocity`)
		}
		return
	case "_get_angular_velocity":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAngularVelocity() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetAngularVelocity`)
		}
		return
	case "_set_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetTransform(transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`SetTransform`)
		}
		return
	case "_get_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTransform() Transform3D }{}).Elem()) {
			return rtype.MethodByName(`GetTransform`)
		}
		return
	case "_get_velocity_at_local_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetVelocityAtLocalPosition(local_position Vector3) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetVelocityAtLocalPosition`)
		}
		return
	case "_apply_central_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyCentralImpulse(impulse Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyCentralImpulse`)
		}
		return
	case "_apply_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyImpulse(impulse Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyImpulse`)
		}
		return
	case "_apply_torque_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyTorqueImpulse(impulse Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyTorqueImpulse`)
		}
		return
	case "_apply_central_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyCentralForce(force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyCentralForce`)
		}
		return
	case "_apply_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyForce(force Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyForce`)
		}
		return
	case "_apply_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ ApplyTorque(torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`ApplyTorque`)
		}
		return
	case "_add_constant_central_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddConstantCentralForce(force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`AddConstantCentralForce`)
		}
		return
	case "_add_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddConstantForce(force Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`AddConstantForce`)
		}
		return
	case "_add_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddConstantTorque(torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`AddConstantTorque`)
		}
		return
	case "_set_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetConstantForce(force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`SetConstantForce`)
		}
		return
	case "_get_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConstantForce() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetConstantForce`)
		}
		return
	case "_set_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetConstantTorque(torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`SetConstantTorque`)
		}
		return
	case "_get_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConstantTorque() Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetConstantTorque`)
		}
		return
	case "_set_sleep_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetSleepState(enabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`SetSleepState`)
		}
		return
	case "_is_sleeping":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsSleeping() bool }{}).Elem()) {
			return rtype.MethodByName(`IsSleeping`)
		}
		return
	case "_get_contact_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetContactCount`)
		}
		return
	case "_get_contact_local_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactLocalPosition(contact_idx int64) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetContactLocalPosition`)
		}
		return
	case "_get_contact_local_normal":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactLocalNormal(contact_idx int64) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetContactLocalNormal`)
		}
		return
	case "_get_contact_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactImpulse(contact_idx int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`GetContactImpulse`)
		}
		return
	case "_get_contact_local_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactLocalShape(contact_idx int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetContactLocalShape`)
		}
		return
	case "_get_contact_collider":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactCollider(contact_idx int64) RID }{}).Elem()) {
			return rtype.MethodByName(`GetContactCollider`)
		}
		return
	case "_get_contact_collider_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactColliderPosition(contact_idx int64) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetContactColliderPosition`)
		}
		return
	case "_get_contact_collider_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactColliderId(contact_idx int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetContactColliderId`)
		}
		return
	case "_get_contact_collider_object":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactColliderObject(contact_idx int64) Object }{}).Elem()) {
			return rtype.MethodByName(`GetContactColliderObject`)
		}
		return
	case "_get_contact_collider_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactColliderShape(contact_idx int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetContactColliderShape`)
		}
		return
	case "_get_contact_collider_velocity_at_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetContactColliderVelocityAtPosition(contact_idx int64) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetContactColliderVelocityAtPosition`)
		}
		return
	case "_get_step":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetStep() float64 }{}).Elem()) {
			return rtype.MethodByName(`GetStep`)
		}
		return
	case "_integrate_forces":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntegrateForces()  }{}).Elem()) {
			return rtype.MethodByName(`IntegrateForces`)
		}
		return
	case "_get_space_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSpaceState() PhysicsDirectSpaceState3D }{}).Elem()) {
			return rtype.MethodByName(`GetSpaceState`)
		}
		return
	}
	return gdClass.PhysicsDirectBodyState3D().virtual(rtype, name)
}

type PhysicsDirectSpaceState2D struct{self *PhysicsDirectSpaceState2D; obj safeObject }
func NewPhysicsDirectSpaceState2D(ctx Context, at *PhysicsDirectSpaceState2D) PhysicsDirectSpaceState2D { if at == nil { at = new(PhysicsDirectSpaceState2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectSpaceState2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectSpaceState2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectSpaceState2D) class() string { return "PhysicsDirectSpaceState2D\000" }

func (gdClass PhysicsDirectSpaceState2D) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsDirectSpaceState2D [6]cMethodBind
func (gdClass PhysicsDirectSpaceState2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsDirectSpaceState2D) IntersectPoint(parameters PhysicsPointQueryParameters2D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[0], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState2D) IntersectRay(parameters PhysicsRayQueryParameters2D) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[1], &parameters) }
func (gdClass PhysicsDirectSpaceState2D) IntersectShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[2], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState2D) CastMotion(parameters PhysicsShapeQueryParameters2D) []float32 { return methodCall[[]float32](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[3], &parameters) }
func (gdClass PhysicsDirectSpaceState2D) CollideShape(parameters PhysicsShapeQueryParameters2D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[4], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState2D) GetRestInfo(parameters PhysicsShapeQueryParameters2D) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodPhysicsDirectSpaceState2D[5], &parameters) }

type PhysicsDirectSpaceState3D struct{self *PhysicsDirectSpaceState3D; obj safeObject }
func NewPhysicsDirectSpaceState3D(ctx Context, at *PhysicsDirectSpaceState3D) PhysicsDirectSpaceState3D { if at == nil { at = new(PhysicsDirectSpaceState3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectSpaceState3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectSpaceState3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectSpaceState3D) class() string { return "PhysicsDirectSpaceState3D\000" }

func (gdClass PhysicsDirectSpaceState3D) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsDirectSpaceState3D [6]cMethodBind
func (gdClass PhysicsDirectSpaceState3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsDirectSpaceState3D) IntersectPoint(parameters PhysicsPointQueryParameters3D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[0], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState3D) IntersectRay(parameters PhysicsRayQueryParameters3D) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[1], &parameters) }
func (gdClass PhysicsDirectSpaceState3D) IntersectShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[2], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState3D) CastMotion(parameters PhysicsShapeQueryParameters3D) []float32 { return methodCall[[]float32](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[3], &parameters) }
func (gdClass PhysicsDirectSpaceState3D) CollideShape(parameters PhysicsShapeQueryParameters3D, max_results int64) Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[4], &parameters, &max_results) }
func (gdClass PhysicsDirectSpaceState3D) GetRestInfo(parameters PhysicsShapeQueryParameters3D) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodPhysicsDirectSpaceState3D[5], &parameters) }

type PhysicsDirectSpaceState3DExtension struct{self *PhysicsDirectSpaceState3DExtension; obj safeObject }
func NewPhysicsDirectSpaceState3DExtension(ctx Context, at *PhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3DExtension { if at == nil { at = new(PhysicsDirectSpaceState3DExtension) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsDirectSpaceState3DExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsDirectSpaceState3DExtension) owner() cObject { return gdClass.obj.get() }
func (PhysicsDirectSpaceState3DExtension) class() string { return "PhysicsDirectSpaceState3DExtension\000" }

func (gdClass PhysicsDirectSpaceState3DExtension) PhysicsDirectSpaceState3D() PhysicsDirectSpaceState3D { return PhysicsDirectSpaceState3D{obj:gdClass.obj} }

func (gdClass PhysicsDirectSpaceState3DExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_intersect_ray":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntersectRay(from Vector3, to Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, hit_from_inside bool, hit_back_faces bool, result *PhysicsServer3DExtensionRayResult) bool }{}).Elem()) {
			return rtype.MethodByName(`IntersectRay`)
		}
		return
	case "_intersect_point":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntersectPoint(position Vector3, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results *PhysicsServer3DExtensionShapeResult, max_results int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`IntersectPoint`)
		}
		return
	case "_intersect_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntersectShape(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, result_count *PhysicsServer3DExtensionShapeResult, max_results int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`IntersectShape`)
		}
		return
	case "_cast_motion":
		if rtype.Implements(reflect.TypeOf([0]interface{ CastMotion(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, closest_safe *float64, closest_unsafe *float64, info *PhysicsServer3DExtensionShapeRestInfo) bool }{}).Elem()) {
			return rtype.MethodByName(`CastMotion`)
		}
		return
	case "_collide_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ CollideShape(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, results []byte, max_results int64, result_count *int32) bool }{}).Elem()) {
			return rtype.MethodByName(`CollideShape`)
		}
		return
	case "_rest_info":
		if rtype.Implements(reflect.TypeOf([0]interface{ RestInfo(shape_rid RID, transform Transform3D, motion Vector3, margin float64, collision_mask int64, collide_with_bodies bool, collide_with_areas bool, rest_info *PhysicsServer3DExtensionShapeRestInfo) bool }{}).Elem()) {
			return rtype.MethodByName(`RestInfo`)
		}
		return
	case "_get_closest_point_to_object_volume":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetClosestPointToObjectVolume(object RID, point Vector3) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetClosestPointToObjectVolume`)
		}
		return
	}
	return gdClass.PhysicsDirectSpaceState3D().virtual(rtype, name)
}

type PhysicsMaterial struct{self *PhysicsMaterial; obj safeObject }
func NewPhysicsMaterial(ctx Context, at *PhysicsMaterial) PhysicsMaterial { if at == nil { at = new(PhysicsMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsMaterial) owner() cObject { return gdClass.obj.get() }
func (PhysicsMaterial) class() string { return "PhysicsMaterial\000" }

func (gdClass PhysicsMaterial) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodPhysicsMaterial [8]cMethodBind
func (gdClass PhysicsMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass PhysicsMaterial) SetFriction(friction float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsMaterial[0], &friction) }
func (gdClass PhysicsMaterial) GetFriction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsMaterial[1]) }
func (gdClass PhysicsMaterial) SetRough(rough bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsMaterial[2], &rough) }
func (gdClass PhysicsMaterial) IsRough() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsMaterial[3]) }
func (gdClass PhysicsMaterial) SetBounce(bounce float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsMaterial[4], &bounce) }
func (gdClass PhysicsMaterial) GetBounce() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsMaterial[5]) }
func (gdClass PhysicsMaterial) SetAbsorbent(absorbent bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsMaterial[6], &absorbent) }
func (gdClass PhysicsMaterial) IsAbsorbent() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsMaterial[7]) }

type PhysicsPointQueryParameters2D struct{self *PhysicsPointQueryParameters2D; obj safeObject }
func NewPhysicsPointQueryParameters2D(ctx Context, at *PhysicsPointQueryParameters2D) PhysicsPointQueryParameters2D { if at == nil { at = new(PhysicsPointQueryParameters2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsPointQueryParameters2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsPointQueryParameters2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsPointQueryParameters2D) class() string { return "PhysicsPointQueryParameters2D\000" }

func (gdClass PhysicsPointQueryParameters2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsPointQueryParameters2D [12]cMethodBind
func (gdClass PhysicsPointQueryParameters2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsPointQueryParameters2D) SetPosition(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[0], &position) }
func (gdClass PhysicsPointQueryParameters2D) GetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[1]) }
func (gdClass PhysicsPointQueryParameters2D) SetCanvasInstanceId(canvas_instance_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[2], &canvas_instance_id) }
func (gdClass PhysicsPointQueryParameters2D) GetCanvasInstanceId() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[3]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[4], &collision_mask) }
func (gdClass PhysicsPointQueryParameters2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[5]) }
func (gdClass PhysicsPointQueryParameters2D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[6], &exclude) }
func (gdClass PhysicsPointQueryParameters2D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[7]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[8], &enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[9]) }
func (gdClass PhysicsPointQueryParameters2D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[10], &enable) }
func (gdClass PhysicsPointQueryParameters2D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsPointQueryParameters2D[11]) }

type PhysicsPointQueryParameters3D struct{self *PhysicsPointQueryParameters3D; obj safeObject }
func NewPhysicsPointQueryParameters3D(ctx Context, at *PhysicsPointQueryParameters3D) PhysicsPointQueryParameters3D { if at == nil { at = new(PhysicsPointQueryParameters3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsPointQueryParameters3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsPointQueryParameters3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsPointQueryParameters3D) class() string { return "PhysicsPointQueryParameters3D\000" }

func (gdClass PhysicsPointQueryParameters3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsPointQueryParameters3D [10]cMethodBind
func (gdClass PhysicsPointQueryParameters3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsPointQueryParameters3D) SetPosition(position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[0], &position) }
func (gdClass PhysicsPointQueryParameters3D) GetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[1]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[2], &collision_mask) }
func (gdClass PhysicsPointQueryParameters3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[3]) }
func (gdClass PhysicsPointQueryParameters3D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[4], &exclude) }
func (gdClass PhysicsPointQueryParameters3D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[5]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[6], &enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[7]) }
func (gdClass PhysicsPointQueryParameters3D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[8], &enable) }
func (gdClass PhysicsPointQueryParameters3D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsPointQueryParameters3D[9]) }

type PhysicsRayQueryParameters2D struct{self *PhysicsRayQueryParameters2D; obj safeObject }
func NewPhysicsRayQueryParameters2D(ctx Context, at *PhysicsRayQueryParameters2D) PhysicsRayQueryParameters2D { if at == nil { at = new(PhysicsRayQueryParameters2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsRayQueryParameters2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsRayQueryParameters2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsRayQueryParameters2D) class() string { return "PhysicsRayQueryParameters2D\000" }

func (gdClass PhysicsRayQueryParameters2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsRayQueryParameters2D [15]cMethodBind
func (gdClass PhysicsRayQueryParameters2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsRayQueryParameters2D) Create(from Vector2, to Vector2, collision_mask int64, exclude Array) PhysicsRayQueryParameters2D { return methodCall[PhysicsRayQueryParameters2D](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[0], &from, &to, &collision_mask, &exclude) }
func (gdClass PhysicsRayQueryParameters2D) SetFrom(from Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[1], &from) }
func (gdClass PhysicsRayQueryParameters2D) GetFrom() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[2]) }
func (gdClass PhysicsRayQueryParameters2D) SetTo(to Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[3], &to) }
func (gdClass PhysicsRayQueryParameters2D) GetTo() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[4]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[5], &collision_mask) }
func (gdClass PhysicsRayQueryParameters2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[6]) }
func (gdClass PhysicsRayQueryParameters2D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[7], &exclude) }
func (gdClass PhysicsRayQueryParameters2D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[8]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[9], &enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[10]) }
func (gdClass PhysicsRayQueryParameters2D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[11], &enable) }
func (gdClass PhysicsRayQueryParameters2D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[12]) }
func (gdClass PhysicsRayQueryParameters2D) SetHitFromInside(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[13], &enable) }
func (gdClass PhysicsRayQueryParameters2D) IsHitFromInsideEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters2D[14]) }

type PhysicsRayQueryParameters3D struct{self *PhysicsRayQueryParameters3D; obj safeObject }
func NewPhysicsRayQueryParameters3D(ctx Context, at *PhysicsRayQueryParameters3D) PhysicsRayQueryParameters3D { if at == nil { at = new(PhysicsRayQueryParameters3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsRayQueryParameters3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsRayQueryParameters3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsRayQueryParameters3D) class() string { return "PhysicsRayQueryParameters3D\000" }

func (gdClass PhysicsRayQueryParameters3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsRayQueryParameters3D [17]cMethodBind
func (gdClass PhysicsRayQueryParameters3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsRayQueryParameters3D) Create(from Vector3, to Vector3, collision_mask int64, exclude Array) PhysicsRayQueryParameters3D { return methodCall[PhysicsRayQueryParameters3D](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[0], &from, &to, &collision_mask, &exclude) }
func (gdClass PhysicsRayQueryParameters3D) SetFrom(from Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[1], &from) }
func (gdClass PhysicsRayQueryParameters3D) GetFrom() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[2]) }
func (gdClass PhysicsRayQueryParameters3D) SetTo(to Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[3], &to) }
func (gdClass PhysicsRayQueryParameters3D) GetTo() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[4]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[5], &collision_mask) }
func (gdClass PhysicsRayQueryParameters3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[6]) }
func (gdClass PhysicsRayQueryParameters3D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[7], &exclude) }
func (gdClass PhysicsRayQueryParameters3D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[8]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[9], &enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[10]) }
func (gdClass PhysicsRayQueryParameters3D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[11], &enable) }
func (gdClass PhysicsRayQueryParameters3D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[12]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitFromInside(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[13], &enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitFromInsideEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[14]) }
func (gdClass PhysicsRayQueryParameters3D) SetHitBackFaces(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[15], &enable) }
func (gdClass PhysicsRayQueryParameters3D) IsHitBackFacesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsRayQueryParameters3D[16]) }

type PhysicsServer2DSpaceParameter int64

const (
	PhysicsServer2DSpaceParamContactRecycleRadius PhysicsServer2DSpaceParameter = 0
	PhysicsServer2DSpaceParamContactMaxSeparation PhysicsServer2DSpaceParameter = 1
	PhysicsServer2DSpaceParamContactMaxAllowedPenetration PhysicsServer2DSpaceParameter = 2
	PhysicsServer2DSpaceParamContactDefaultBias PhysicsServer2DSpaceParameter = 3
	PhysicsServer2DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer2DSpaceParameter = 4
	PhysicsServer2DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer2DSpaceParameter = 5
	PhysicsServer2DSpaceParamBodyTimeToSleep PhysicsServer2DSpaceParameter = 6
	PhysicsServer2DSpaceParamConstraintDefaultBias PhysicsServer2DSpaceParameter = 7
	PhysicsServer2DSpaceParamSolverIterations PhysicsServer2DSpaceParameter = 8
)

type PhysicsServer2DShapeType int64

const (
	PhysicsServer2DShapeWorldBoundary PhysicsServer2DShapeType = 0
	PhysicsServer2DShapeSeparationRay PhysicsServer2DShapeType = 1
	PhysicsServer2DShapeSegment PhysicsServer2DShapeType = 2
	PhysicsServer2DShapeCircle PhysicsServer2DShapeType = 3
	PhysicsServer2DShapeRectangle PhysicsServer2DShapeType = 4
	PhysicsServer2DShapeCapsule PhysicsServer2DShapeType = 5
	PhysicsServer2DShapeConvexPolygon PhysicsServer2DShapeType = 6
	PhysicsServer2DShapeConcavePolygon PhysicsServer2DShapeType = 7
	PhysicsServer2DShapeCustom PhysicsServer2DShapeType = 8
)

type PhysicsServer2DAreaParameter int64

const (
	PhysicsServer2DAreaParamGravityOverrideMode PhysicsServer2DAreaParameter = 0
	PhysicsServer2DAreaParamGravity PhysicsServer2DAreaParameter = 1
	PhysicsServer2DAreaParamGravityVector PhysicsServer2DAreaParameter = 2
	PhysicsServer2DAreaParamGravityIsPoint PhysicsServer2DAreaParameter = 3
	PhysicsServer2DAreaParamGravityDistanceScale PhysicsServer2DAreaParameter = 4
	PhysicsServer2DAreaParamGravityPointAttenuation PhysicsServer2DAreaParameter = 5
	PhysicsServer2DAreaParamLinearDampOverrideMode PhysicsServer2DAreaParameter = 6
	PhysicsServer2DAreaParamLinearDamp PhysicsServer2DAreaParameter = 7
	PhysicsServer2DAreaParamAngularDampOverrideMode PhysicsServer2DAreaParameter = 8
	PhysicsServer2DAreaParamAngularDamp PhysicsServer2DAreaParameter = 9
	PhysicsServer2DAreaParamPriority PhysicsServer2DAreaParameter = 10
)

type PhysicsServer2DAreaSpaceOverrideMode int64

const (
	PhysicsServer2DAreaSpaceOverrideDisabled PhysicsServer2DAreaSpaceOverrideMode = 0
	PhysicsServer2DAreaSpaceOverrideCombine PhysicsServer2DAreaSpaceOverrideMode = 1
	PhysicsServer2DAreaSpaceOverrideCombineReplace PhysicsServer2DAreaSpaceOverrideMode = 2
	PhysicsServer2DAreaSpaceOverrideReplace PhysicsServer2DAreaSpaceOverrideMode = 3
	PhysicsServer2DAreaSpaceOverrideReplaceCombine PhysicsServer2DAreaSpaceOverrideMode = 4
)

type PhysicsServer2DBodyMode int64

const (
	PhysicsServer2DBodyModeStatic PhysicsServer2DBodyMode = 0
	PhysicsServer2DBodyModeKinematic PhysicsServer2DBodyMode = 1
	PhysicsServer2DBodyModeRigid PhysicsServer2DBodyMode = 2
	PhysicsServer2DBodyModeRigidLinear PhysicsServer2DBodyMode = 3
)

type PhysicsServer2DBodyParameter int64

const (
	PhysicsServer2DBodyParamBounce PhysicsServer2DBodyParameter = 0
	PhysicsServer2DBodyParamFriction PhysicsServer2DBodyParameter = 1
	PhysicsServer2DBodyParamMass PhysicsServer2DBodyParameter = 2
	PhysicsServer2DBodyParamInertia PhysicsServer2DBodyParameter = 3
	PhysicsServer2DBodyParamCenterOfMass PhysicsServer2DBodyParameter = 4
	PhysicsServer2DBodyParamGravityScale PhysicsServer2DBodyParameter = 5
	PhysicsServer2DBodyParamLinearDampMode PhysicsServer2DBodyParameter = 6
	PhysicsServer2DBodyParamAngularDampMode PhysicsServer2DBodyParameter = 7
	PhysicsServer2DBodyParamLinearDamp PhysicsServer2DBodyParameter = 8
	PhysicsServer2DBodyParamAngularDamp PhysicsServer2DBodyParameter = 9
	PhysicsServer2DBodyParamMax PhysicsServer2DBodyParameter = 10
)

type PhysicsServer2DBodyDampMode int64

const (
	PhysicsServer2DBodyDampModeCombine PhysicsServer2DBodyDampMode = 0
	PhysicsServer2DBodyDampModeReplace PhysicsServer2DBodyDampMode = 1
)

type PhysicsServer2DBodyState int64

const (
	PhysicsServer2DBodyStateTransform PhysicsServer2DBodyState = 0
	PhysicsServer2DBodyStateLinearVelocity PhysicsServer2DBodyState = 1
	PhysicsServer2DBodyStateAngularVelocity PhysicsServer2DBodyState = 2
	PhysicsServer2DBodyStateSleeping PhysicsServer2DBodyState = 3
	PhysicsServer2DBodyStateCanSleep PhysicsServer2DBodyState = 4
)

type PhysicsServer2DJointType int64

const (
	PhysicsServer2DJointTypePin PhysicsServer2DJointType = 0
	PhysicsServer2DJointTypeGroove PhysicsServer2DJointType = 1
	PhysicsServer2DJointTypeDampedSpring PhysicsServer2DJointType = 2
	PhysicsServer2DJointTypeMax PhysicsServer2DJointType = 3
)

type PhysicsServer2DJointParam int64

const (
	PhysicsServer2DJointParamBias PhysicsServer2DJointParam = 0
	PhysicsServer2DJointParamMaxBias PhysicsServer2DJointParam = 1
	PhysicsServer2DJointParamMaxForce PhysicsServer2DJointParam = 2
)

type PhysicsServer2DDampedSpringParam int64

const (
	PhysicsServer2DDampedSpringRestLength PhysicsServer2DDampedSpringParam = 0
	PhysicsServer2DDampedSpringStiffness PhysicsServer2DDampedSpringParam = 1
	PhysicsServer2DDampedSpringDamping PhysicsServer2DDampedSpringParam = 2
)

type PhysicsServer2DCCDMode int64

const (
	PhysicsServer2DCcdModeDisabled PhysicsServer2DCCDMode = 0
	PhysicsServer2DCcdModeCastRay PhysicsServer2DCCDMode = 1
	PhysicsServer2DCcdModeCastShape PhysicsServer2DCCDMode = 2
)

type PhysicsServer2DAreaBodyStatus int64

const (
	PhysicsServer2DAreaBodyAdded PhysicsServer2DAreaBodyStatus = 0
	PhysicsServer2DAreaBodyRemoved PhysicsServer2DAreaBodyStatus = 1
)

type PhysicsServer2DProcessInfo int64

const (
	PhysicsServer2DInfoActiveObjects PhysicsServer2DProcessInfo = 0
	PhysicsServer2DInfoCollisionPairs PhysicsServer2DProcessInfo = 1
	PhysicsServer2DInfoIslandCount PhysicsServer2DProcessInfo = 2
)
var PhysicsServer2D PhysicsServer2DSingleton

type PhysicsServer2DSingleton struct{self *PhysicsServer2DSingleton; obj safeObject }
func NewPhysicsServer2DSingleton(ctx Context, at *PhysicsServer2DSingleton) PhysicsServer2DSingleton { if at == nil { at = new(PhysicsServer2DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsServer2DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsServer2DSingleton) owner() cObject { return gdClass.obj.get() }
func (PhysicsServer2DSingleton) class() string { return "PhysicsServer2DSingleton\000" }

func (gdClass PhysicsServer2DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsServer2DSingleton [110]cMethodBind
func (gdClass PhysicsServer2DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsServer2DSingleton) WorldBoundaryShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[0]) }
func (gdClass PhysicsServer2DSingleton) SeparationRayShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[1]) }
func (gdClass PhysicsServer2DSingleton) SegmentShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[2]) }
func (gdClass PhysicsServer2DSingleton) CircleShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[3]) }
func (gdClass PhysicsServer2DSingleton) RectangleShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[4]) }
func (gdClass PhysicsServer2DSingleton) CapsuleShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[5]) }
func (gdClass PhysicsServer2DSingleton) ConvexPolygonShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[6]) }
func (gdClass PhysicsServer2DSingleton) ConcavePolygonShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[7]) }
func (gdClass PhysicsServer2DSingleton) ShapeSetData(shape RID, data any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[8], &shape, &data) }
func (gdClass PhysicsServer2DSingleton) ShapeGetType(shape RID) PhysicsServer2DShapeType { return methodCall[PhysicsServer2DShapeType](gdClass.obj.get(), methodPhysicsServer2DSingleton[9], &shape) }
func (gdClass PhysicsServer2DSingleton) ShapeGetData(shape RID) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer2DSingleton[10], &shape) }
func (gdClass PhysicsServer2DSingleton) SpaceCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[11]) }
func (gdClass PhysicsServer2DSingleton) SpaceSetActive(space RID, active bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[12], &space, &active) }
func (gdClass PhysicsServer2DSingleton) SpaceIsActive(space RID) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer2DSingleton[13], &space) }
func (gdClass PhysicsServer2DSingleton) SpaceSetParam(space RID, param PhysicsServer2DSpaceParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[14], &space, &param, &value) }
func (gdClass PhysicsServer2DSingleton) SpaceGetParam(space RID, param PhysicsServer2DSpaceParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer2DSingleton[15], &space, &param) }
func (gdClass PhysicsServer2DSingleton) SpaceGetDirectState(space RID) PhysicsDirectSpaceState2D { return methodCall[PhysicsDirectSpaceState2D](gdClass.obj.get(), methodPhysicsServer2DSingleton[16], &space) }
func (gdClass PhysicsServer2DSingleton) AreaCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[17]) }
func (gdClass PhysicsServer2DSingleton) AreaSetSpace(area RID, space RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[18], &area, &space) }
func (gdClass PhysicsServer2DSingleton) AreaGetSpace(area RID) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[19], &area) }
func (gdClass PhysicsServer2DSingleton) AreaAddShape(area RID, shape RID, transform Transform2D, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[20], &area, &shape, &transform, &disabled) }
func (gdClass PhysicsServer2DSingleton) AreaSetShape(area RID, shape_idx int64, shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[21], &area, &shape_idx, &shape) }
func (gdClass PhysicsServer2DSingleton) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[22], &area, &shape_idx, &transform) }
func (gdClass PhysicsServer2DSingleton) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[23], &area, &shape_idx, &disabled) }
func (gdClass PhysicsServer2DSingleton) AreaGetShapeCount(area RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[24], &area) }
func (gdClass PhysicsServer2DSingleton) AreaGetShape(area RID, shape_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[25], &area, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) AreaGetShapeTransform(area RID, shape_idx int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsServer2DSingleton[26], &area, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) AreaRemoveShape(area RID, shape_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[27], &area, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) AreaClearShapes(area RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[28], &area) }
func (gdClass PhysicsServer2DSingleton) AreaSetCollisionLayer(area RID, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[29], &area, &layer) }
func (gdClass PhysicsServer2DSingleton) AreaSetCollisionMask(area RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[30], &area, &mask) }
func (gdClass PhysicsServer2DSingleton) AreaSetParam(area RID, param PhysicsServer2DAreaParameter, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[31], &area, &param, &value) }
func (gdClass PhysicsServer2DSingleton) AreaSetTransform(area RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[32], &area, &transform) }
func (gdClass PhysicsServer2DSingleton) AreaGetParam(area RID, param PhysicsServer2DAreaParameter) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer2DSingleton[33], &area, &param) }
func (gdClass PhysicsServer2DSingleton) AreaGetTransform(area RID) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsServer2DSingleton[34], &area) }
func (gdClass PhysicsServer2DSingleton) AreaAttachObjectInstanceId(area RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[35], &area, &id) }
func (gdClass PhysicsServer2DSingleton) AreaGetObjectInstanceId(area RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[36], &area) }
func (gdClass PhysicsServer2DSingleton) AreaAttachCanvasInstanceId(area RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[37], &area, &id) }
func (gdClass PhysicsServer2DSingleton) AreaGetCanvasInstanceId(area RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[38], &area) }
func (gdClass PhysicsServer2DSingleton) AreaSetMonitorCallback(area RID, callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[39], &area, &callback) }
func (gdClass PhysicsServer2DSingleton) AreaSetAreaMonitorCallback(area RID, callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[40], &area, &callback) }
func (gdClass PhysicsServer2DSingleton) AreaSetMonitorable(area RID, monitorable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[41], &area, &monitorable) }
func (gdClass PhysicsServer2DSingleton) BodyCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[42]) }
func (gdClass PhysicsServer2DSingleton) BodySetSpace(body RID, space RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[43], &body, &space) }
func (gdClass PhysicsServer2DSingleton) BodyGetSpace(body RID) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[44], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetMode(body RID, mode PhysicsServer2DBodyMode)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[45], &body, &mode) }
func (gdClass PhysicsServer2DSingleton) BodyGetMode(body RID) PhysicsServer2DBodyMode { return methodCall[PhysicsServer2DBodyMode](gdClass.obj.get(), methodPhysicsServer2DSingleton[46], &body) }
func (gdClass PhysicsServer2DSingleton) BodyAddShape(body RID, shape RID, transform Transform2D, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[47], &body, &shape, &transform, &disabled) }
func (gdClass PhysicsServer2DSingleton) BodySetShape(body RID, shape_idx int64, shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[48], &body, &shape_idx, &shape) }
func (gdClass PhysicsServer2DSingleton) BodySetShapeTransform(body RID, shape_idx int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[49], &body, &shape_idx, &transform) }
func (gdClass PhysicsServer2DSingleton) BodyGetShapeCount(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[50], &body) }
func (gdClass PhysicsServer2DSingleton) BodyGetShape(body RID, shape_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[51], &body, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) BodyGetShapeTransform(body RID, shape_idx int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsServer2DSingleton[52], &body, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) BodyRemoveShape(body RID, shape_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[53], &body, &shape_idx) }
func (gdClass PhysicsServer2DSingleton) BodyClearShapes(body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[54], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[55], &body, &shape_idx, &disabled) }
func (gdClass PhysicsServer2DSingleton) BodySetShapeAsOneWayCollision(body RID, shape_idx int64, enable bool, margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[56], &body, &shape_idx, &enable, &margin) }
func (gdClass PhysicsServer2DSingleton) BodyAttachObjectInstanceId(body RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[57], &body, &id) }
func (gdClass PhysicsServer2DSingleton) BodyGetObjectInstanceId(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[58], &body) }
func (gdClass PhysicsServer2DSingleton) BodyAttachCanvasInstanceId(body RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[59], &body, &id) }
func (gdClass PhysicsServer2DSingleton) BodyGetCanvasInstanceId(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[60], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetContinuousCollisionDetectionMode(body RID, mode PhysicsServer2DCCDMode)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[61], &body, &mode) }
func (gdClass PhysicsServer2DSingleton) BodyGetContinuousCollisionDetectionMode(body RID) PhysicsServer2DCCDMode { return methodCall[PhysicsServer2DCCDMode](gdClass.obj.get(), methodPhysicsServer2DSingleton[62], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetCollisionLayer(body RID, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[63], &body, &layer) }
func (gdClass PhysicsServer2DSingleton) BodyGetCollisionLayer(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[64], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetCollisionMask(body RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[65], &body, &mask) }
func (gdClass PhysicsServer2DSingleton) BodyGetCollisionMask(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[66], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetCollisionPriority(body RID, priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[67], &body, &priority) }
func (gdClass PhysicsServer2DSingleton) BodyGetCollisionPriority(body RID) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer2DSingleton[68], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetParam(body RID, param PhysicsServer2DBodyParameter, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[69], &body, &param, &value) }
func (gdClass PhysicsServer2DSingleton) BodyGetParam(body RID, param PhysicsServer2DBodyParameter) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer2DSingleton[70], &body, &param) }
func (gdClass PhysicsServer2DSingleton) BodyResetMassProperties(body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[71], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetState(body RID, state PhysicsServer2DBodyState, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[72], &body, &state, &value) }
func (gdClass PhysicsServer2DSingleton) BodyGetState(body RID, state PhysicsServer2DBodyState) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer2DSingleton[73], &body, &state) }
func (gdClass PhysicsServer2DSingleton) BodyApplyCentralImpulse(body RID, impulse Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[74], &body, &impulse) }
func (gdClass PhysicsServer2DSingleton) BodyApplyTorqueImpulse(body RID, impulse float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[75], &body, &impulse) }
func (gdClass PhysicsServer2DSingleton) BodyApplyImpulse(body RID, impulse Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[76], &body, &impulse, &position) }
func (gdClass PhysicsServer2DSingleton) BodyApplyCentralForce(body RID, force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[77], &body, &force) }
func (gdClass PhysicsServer2DSingleton) BodyApplyForce(body RID, force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[78], &body, &force, &position) }
func (gdClass PhysicsServer2DSingleton) BodyApplyTorque(body RID, torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[79], &body, &torque) }
func (gdClass PhysicsServer2DSingleton) BodyAddConstantCentralForce(body RID, force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[80], &body, &force) }
func (gdClass PhysicsServer2DSingleton) BodyAddConstantForce(body RID, force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[81], &body, &force, &position) }
func (gdClass PhysicsServer2DSingleton) BodyAddConstantTorque(body RID, torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[82], &body, &torque) }
func (gdClass PhysicsServer2DSingleton) BodySetConstantForce(body RID, force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[83], &body, &force) }
func (gdClass PhysicsServer2DSingleton) BodyGetConstantForce(body RID) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsServer2DSingleton[84], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetConstantTorque(body RID, torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[85], &body, &torque) }
func (gdClass PhysicsServer2DSingleton) BodyGetConstantTorque(body RID) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer2DSingleton[86], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetAxisVelocity(body RID, axis_velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[87], &body, &axis_velocity) }
func (gdClass PhysicsServer2DSingleton) BodyAddCollisionException(body RID, excepted_body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[88], &body, &excepted_body) }
func (gdClass PhysicsServer2DSingleton) BodyRemoveCollisionException(body RID, excepted_body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[89], &body, &excepted_body) }
func (gdClass PhysicsServer2DSingleton) BodySetMaxContactsReported(body RID, amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[90], &body, &amount) }
func (gdClass PhysicsServer2DSingleton) BodyGetMaxContactsReported(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[91], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetOmitForceIntegration(body RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[92], &body, &enable) }
func (gdClass PhysicsServer2DSingleton) BodyIsOmittingForceIntegration(body RID) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer2DSingleton[93], &body) }
func (gdClass PhysicsServer2DSingleton) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[94], &body, &callable, &userdata) }
func (gdClass PhysicsServer2DSingleton) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters2D, result PhysicsTestMotionResult2D) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer2DSingleton[95], &body, &parameters, &result) }
func (gdClass PhysicsServer2DSingleton) BodyGetDirectState(body RID) PhysicsDirectBodyState2D { return methodCall[PhysicsDirectBodyState2D](gdClass.obj.get(), methodPhysicsServer2DSingleton[96], &body) }
func (gdClass PhysicsServer2DSingleton) JointCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer2DSingleton[97]) }
func (gdClass PhysicsServer2DSingleton) JointClear(joint RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[98], &joint) }
func (gdClass PhysicsServer2DSingleton) JointSetParam(joint RID, param PhysicsServer2DJointParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[99], &joint, &param, &value) }
func (gdClass PhysicsServer2DSingleton) JointGetParam(joint RID, param PhysicsServer2DJointParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer2DSingleton[100], &joint, &param) }
func (gdClass PhysicsServer2DSingleton) JointMakePin(joint RID, anchor Vector2, body_a RID, body_b RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[101], &joint, &anchor, &body_a, &body_b) }
func (gdClass PhysicsServer2DSingleton) JointMakeGroove(joint RID, groove1_a Vector2, groove2_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[102], &joint, &groove1_a, &groove2_a, &anchor_b, &body_a, &body_b) }
func (gdClass PhysicsServer2DSingleton) JointMakeDampedSpring(joint RID, anchor_a Vector2, anchor_b Vector2, body_a RID, body_b RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[103], &joint, &anchor_a, &anchor_b, &body_a, &body_b) }
func (gdClass PhysicsServer2DSingleton) DampedSpringJointSetParam(joint RID, param PhysicsServer2DDampedSpringParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[104], &joint, &param, &value) }
func (gdClass PhysicsServer2DSingleton) DampedSpringJointGetParam(joint RID, param PhysicsServer2DDampedSpringParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer2DSingleton[105], &joint, &param) }
func (gdClass PhysicsServer2DSingleton) JointGetType(joint RID) PhysicsServer2DJointType { return methodCall[PhysicsServer2DJointType](gdClass.obj.get(), methodPhysicsServer2DSingleton[106], &joint) }
func (gdClass PhysicsServer2DSingleton) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[107], &rid) }
func (gdClass PhysicsServer2DSingleton) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer2DSingleton[108], &active) }
func (gdClass PhysicsServer2DSingleton) GetProcessInfo(process_info PhysicsServer2DProcessInfo) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer2DSingleton[109], &process_info) }

type PhysicsServer3DJointType int64

const (
	PhysicsServer3DJointTypePin PhysicsServer3DJointType = 0
	PhysicsServer3DJointTypeHinge PhysicsServer3DJointType = 1
	PhysicsServer3DJointTypeSlider PhysicsServer3DJointType = 2
	PhysicsServer3DJointTypeConeTwist PhysicsServer3DJointType = 3
	PhysicsServer3DJointType6dof PhysicsServer3DJointType = 4
	PhysicsServer3DJointTypeMax PhysicsServer3DJointType = 5
)

type PhysicsServer3DPinJointParam int64

const (
	PhysicsServer3DPinJointBias PhysicsServer3DPinJointParam = 0
	PhysicsServer3DPinJointDamping PhysicsServer3DPinJointParam = 1
	PhysicsServer3DPinJointImpulseClamp PhysicsServer3DPinJointParam = 2
)

type PhysicsServer3DHingeJointParam int64

const (
	PhysicsServer3DHingeJointBias PhysicsServer3DHingeJointParam = 0
	PhysicsServer3DHingeJointLimitUpper PhysicsServer3DHingeJointParam = 1
	PhysicsServer3DHingeJointLimitLower PhysicsServer3DHingeJointParam = 2
	PhysicsServer3DHingeJointLimitBias PhysicsServer3DHingeJointParam = 3
	PhysicsServer3DHingeJointLimitSoftness PhysicsServer3DHingeJointParam = 4
	PhysicsServer3DHingeJointLimitRelaxation PhysicsServer3DHingeJointParam = 5
	PhysicsServer3DHingeJointMotorTargetVelocity PhysicsServer3DHingeJointParam = 6
	PhysicsServer3DHingeJointMotorMaxImpulse PhysicsServer3DHingeJointParam = 7
)

type PhysicsServer3DHingeJointFlag int64

const (
	PhysicsServer3DHingeJointFlagUseLimit PhysicsServer3DHingeJointFlag = 0
	PhysicsServer3DHingeJointFlagEnableMotor PhysicsServer3DHingeJointFlag = 1
)

type PhysicsServer3DSliderJointParam int64

const (
	PhysicsServer3DSliderJointLinearLimitUpper PhysicsServer3DSliderJointParam = 0
	PhysicsServer3DSliderJointLinearLimitLower PhysicsServer3DSliderJointParam = 1
	PhysicsServer3DSliderJointLinearLimitSoftness PhysicsServer3DSliderJointParam = 2
	PhysicsServer3DSliderJointLinearLimitRestitution PhysicsServer3DSliderJointParam = 3
	PhysicsServer3DSliderJointLinearLimitDamping PhysicsServer3DSliderJointParam = 4
	PhysicsServer3DSliderJointLinearMotionSoftness PhysicsServer3DSliderJointParam = 5
	PhysicsServer3DSliderJointLinearMotionRestitution PhysicsServer3DSliderJointParam = 6
	PhysicsServer3DSliderJointLinearMotionDamping PhysicsServer3DSliderJointParam = 7
	PhysicsServer3DSliderJointLinearOrthogonalSoftness PhysicsServer3DSliderJointParam = 8
	PhysicsServer3DSliderJointLinearOrthogonalRestitution PhysicsServer3DSliderJointParam = 9
	PhysicsServer3DSliderJointLinearOrthogonalDamping PhysicsServer3DSliderJointParam = 10
	PhysicsServer3DSliderJointAngularLimitUpper PhysicsServer3DSliderJointParam = 11
	PhysicsServer3DSliderJointAngularLimitLower PhysicsServer3DSliderJointParam = 12
	PhysicsServer3DSliderJointAngularLimitSoftness PhysicsServer3DSliderJointParam = 13
	PhysicsServer3DSliderJointAngularLimitRestitution PhysicsServer3DSliderJointParam = 14
	PhysicsServer3DSliderJointAngularLimitDamping PhysicsServer3DSliderJointParam = 15
	PhysicsServer3DSliderJointAngularMotionSoftness PhysicsServer3DSliderJointParam = 16
	PhysicsServer3DSliderJointAngularMotionRestitution PhysicsServer3DSliderJointParam = 17
	PhysicsServer3DSliderJointAngularMotionDamping PhysicsServer3DSliderJointParam = 18
	PhysicsServer3DSliderJointAngularOrthogonalSoftness PhysicsServer3DSliderJointParam = 19
	PhysicsServer3DSliderJointAngularOrthogonalRestitution PhysicsServer3DSliderJointParam = 20
	PhysicsServer3DSliderJointAngularOrthogonalDamping PhysicsServer3DSliderJointParam = 21
	PhysicsServer3DSliderJointMax PhysicsServer3DSliderJointParam = 22
)

type PhysicsServer3DConeTwistJointParam int64

const (
	PhysicsServer3DConeTwistJointSwingSpan PhysicsServer3DConeTwistJointParam = 0
	PhysicsServer3DConeTwistJointTwistSpan PhysicsServer3DConeTwistJointParam = 1
	PhysicsServer3DConeTwistJointBias PhysicsServer3DConeTwistJointParam = 2
	PhysicsServer3DConeTwistJointSoftness PhysicsServer3DConeTwistJointParam = 3
	PhysicsServer3DConeTwistJointRelaxation PhysicsServer3DConeTwistJointParam = 4
)

type PhysicsServer3DG6DOFJointAxisParam int64

const (
	PhysicsServer3DG6dofJointLinearLowerLimit PhysicsServer3DG6DOFJointAxisParam = 0
	PhysicsServer3DG6dofJointLinearUpperLimit PhysicsServer3DG6DOFJointAxisParam = 1
	PhysicsServer3DG6dofJointLinearLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 2
	PhysicsServer3DG6dofJointLinearRestitution PhysicsServer3DG6DOFJointAxisParam = 3
	PhysicsServer3DG6dofJointLinearDamping PhysicsServer3DG6DOFJointAxisParam = 4
	PhysicsServer3DG6dofJointLinearMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 5
	PhysicsServer3DG6dofJointLinearMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 6
	PhysicsServer3DG6dofJointAngularLowerLimit PhysicsServer3DG6DOFJointAxisParam = 10
	PhysicsServer3DG6dofJointAngularUpperLimit PhysicsServer3DG6DOFJointAxisParam = 11
	PhysicsServer3DG6dofJointAngularLimitSoftness PhysicsServer3DG6DOFJointAxisParam = 12
	PhysicsServer3DG6dofJointAngularDamping PhysicsServer3DG6DOFJointAxisParam = 13
	PhysicsServer3DG6dofJointAngularRestitution PhysicsServer3DG6DOFJointAxisParam = 14
	PhysicsServer3DG6dofJointAngularForceLimit PhysicsServer3DG6DOFJointAxisParam = 15
	PhysicsServer3DG6dofJointAngularErp PhysicsServer3DG6DOFJointAxisParam = 16
	PhysicsServer3DG6dofJointAngularMotorTargetVelocity PhysicsServer3DG6DOFJointAxisParam = 17
	PhysicsServer3DG6dofJointAngularMotorForceLimit PhysicsServer3DG6DOFJointAxisParam = 18
)

type PhysicsServer3DG6DOFJointAxisFlag int64

const (
	PhysicsServer3DG6dofJointFlagEnableLinearLimit PhysicsServer3DG6DOFJointAxisFlag = 0
	PhysicsServer3DG6dofJointFlagEnableAngularLimit PhysicsServer3DG6DOFJointAxisFlag = 1
	PhysicsServer3DG6dofJointFlagEnableMotor PhysicsServer3DG6DOFJointAxisFlag = 4
	PhysicsServer3DG6dofJointFlagEnableLinearMotor PhysicsServer3DG6DOFJointAxisFlag = 5
)

type PhysicsServer3DShapeType int64

const (
	PhysicsServer3DShapeWorldBoundary PhysicsServer3DShapeType = 0
	PhysicsServer3DShapeSeparationRay PhysicsServer3DShapeType = 1
	PhysicsServer3DShapeSphere PhysicsServer3DShapeType = 2
	PhysicsServer3DShapeBox PhysicsServer3DShapeType = 3
	PhysicsServer3DShapeCapsule PhysicsServer3DShapeType = 4
	PhysicsServer3DShapeCylinder PhysicsServer3DShapeType = 5
	PhysicsServer3DShapeConvexPolygon PhysicsServer3DShapeType = 6
	PhysicsServer3DShapeConcavePolygon PhysicsServer3DShapeType = 7
	PhysicsServer3DShapeHeightmap PhysicsServer3DShapeType = 8
	PhysicsServer3DShapeSoftBody PhysicsServer3DShapeType = 9
	PhysicsServer3DShapeCustom PhysicsServer3DShapeType = 10
)

type PhysicsServer3DAreaParameter int64

const (
	PhysicsServer3DAreaParamGravityOverrideMode PhysicsServer3DAreaParameter = 0
	PhysicsServer3DAreaParamGravity PhysicsServer3DAreaParameter = 1
	PhysicsServer3DAreaParamGravityVector PhysicsServer3DAreaParameter = 2
	PhysicsServer3DAreaParamGravityIsPoint PhysicsServer3DAreaParameter = 3
	PhysicsServer3DAreaParamGravityDistanceScale PhysicsServer3DAreaParameter = 4
	PhysicsServer3DAreaParamGravityPointAttenuation PhysicsServer3DAreaParameter = 5
	PhysicsServer3DAreaParamLinearDampOverrideMode PhysicsServer3DAreaParameter = 6
	PhysicsServer3DAreaParamLinearDamp PhysicsServer3DAreaParameter = 7
	PhysicsServer3DAreaParamAngularDampOverrideMode PhysicsServer3DAreaParameter = 8
	PhysicsServer3DAreaParamAngularDamp PhysicsServer3DAreaParameter = 9
	PhysicsServer3DAreaParamPriority PhysicsServer3DAreaParameter = 10
	PhysicsServer3DAreaParamWindForceMagnitude PhysicsServer3DAreaParameter = 11
	PhysicsServer3DAreaParamWindSource PhysicsServer3DAreaParameter = 12
	PhysicsServer3DAreaParamWindDirection PhysicsServer3DAreaParameter = 13
	PhysicsServer3DAreaParamWindAttenuationFactor PhysicsServer3DAreaParameter = 14
)

type PhysicsServer3DAreaSpaceOverrideMode int64

const (
	PhysicsServer3DAreaSpaceOverrideDisabled PhysicsServer3DAreaSpaceOverrideMode = 0
	PhysicsServer3DAreaSpaceOverrideCombine PhysicsServer3DAreaSpaceOverrideMode = 1
	PhysicsServer3DAreaSpaceOverrideCombineReplace PhysicsServer3DAreaSpaceOverrideMode = 2
	PhysicsServer3DAreaSpaceOverrideReplace PhysicsServer3DAreaSpaceOverrideMode = 3
	PhysicsServer3DAreaSpaceOverrideReplaceCombine PhysicsServer3DAreaSpaceOverrideMode = 4
)

type PhysicsServer3DBodyMode int64

const (
	PhysicsServer3DBodyModeStatic PhysicsServer3DBodyMode = 0
	PhysicsServer3DBodyModeKinematic PhysicsServer3DBodyMode = 1
	PhysicsServer3DBodyModeRigid PhysicsServer3DBodyMode = 2
	PhysicsServer3DBodyModeRigidLinear PhysicsServer3DBodyMode = 3
)

type PhysicsServer3DBodyParameter int64

const (
	PhysicsServer3DBodyParamBounce PhysicsServer3DBodyParameter = 0
	PhysicsServer3DBodyParamFriction PhysicsServer3DBodyParameter = 1
	PhysicsServer3DBodyParamMass PhysicsServer3DBodyParameter = 2
	PhysicsServer3DBodyParamInertia PhysicsServer3DBodyParameter = 3
	PhysicsServer3DBodyParamCenterOfMass PhysicsServer3DBodyParameter = 4
	PhysicsServer3DBodyParamGravityScale PhysicsServer3DBodyParameter = 5
	PhysicsServer3DBodyParamLinearDampMode PhysicsServer3DBodyParameter = 6
	PhysicsServer3DBodyParamAngularDampMode PhysicsServer3DBodyParameter = 7
	PhysicsServer3DBodyParamLinearDamp PhysicsServer3DBodyParameter = 8
	PhysicsServer3DBodyParamAngularDamp PhysicsServer3DBodyParameter = 9
	PhysicsServer3DBodyParamMax PhysicsServer3DBodyParameter = 10
)

type PhysicsServer3DBodyDampMode int64

const (
	PhysicsServer3DBodyDampModeCombine PhysicsServer3DBodyDampMode = 0
	PhysicsServer3DBodyDampModeReplace PhysicsServer3DBodyDampMode = 1
)

type PhysicsServer3DBodyState int64

const (
	PhysicsServer3DBodyStateTransform PhysicsServer3DBodyState = 0
	PhysicsServer3DBodyStateLinearVelocity PhysicsServer3DBodyState = 1
	PhysicsServer3DBodyStateAngularVelocity PhysicsServer3DBodyState = 2
	PhysicsServer3DBodyStateSleeping PhysicsServer3DBodyState = 3
	PhysicsServer3DBodyStateCanSleep PhysicsServer3DBodyState = 4
)

type PhysicsServer3DAreaBodyStatus int64

const (
	PhysicsServer3DAreaBodyAdded PhysicsServer3DAreaBodyStatus = 0
	PhysicsServer3DAreaBodyRemoved PhysicsServer3DAreaBodyStatus = 1
)

type PhysicsServer3DProcessInfo int64

const (
	PhysicsServer3DInfoActiveObjects PhysicsServer3DProcessInfo = 0
	PhysicsServer3DInfoCollisionPairs PhysicsServer3DProcessInfo = 1
	PhysicsServer3DInfoIslandCount PhysicsServer3DProcessInfo = 2
)

type PhysicsServer3DSpaceParameter int64

const (
	PhysicsServer3DSpaceParamContactRecycleRadius PhysicsServer3DSpaceParameter = 0
	PhysicsServer3DSpaceParamContactMaxSeparation PhysicsServer3DSpaceParameter = 1
	PhysicsServer3DSpaceParamContactMaxAllowedPenetration PhysicsServer3DSpaceParameter = 2
	PhysicsServer3DSpaceParamContactDefaultBias PhysicsServer3DSpaceParameter = 3
	PhysicsServer3DSpaceParamBodyLinearVelocitySleepThreshold PhysicsServer3DSpaceParameter = 4
	PhysicsServer3DSpaceParamBodyAngularVelocitySleepThreshold PhysicsServer3DSpaceParameter = 5
	PhysicsServer3DSpaceParamBodyTimeToSleep PhysicsServer3DSpaceParameter = 6
	PhysicsServer3DSpaceParamSolverIterations PhysicsServer3DSpaceParameter = 7
)

type PhysicsServer3DBodyAxis int64

const (
	PhysicsServer3DBodyAxisLinearX PhysicsServer3DBodyAxis = 1
	PhysicsServer3DBodyAxisLinearY PhysicsServer3DBodyAxis = 2
	PhysicsServer3DBodyAxisLinearZ PhysicsServer3DBodyAxis = 4
	PhysicsServer3DBodyAxisAngularX PhysicsServer3DBodyAxis = 8
	PhysicsServer3DBodyAxisAngularY PhysicsServer3DBodyAxis = 16
	PhysicsServer3DBodyAxisAngularZ PhysicsServer3DBodyAxis = 32
)
var PhysicsServer3D PhysicsServer3DSingleton

type PhysicsServer3DSingleton struct{self *PhysicsServer3DSingleton; obj safeObject }
func NewPhysicsServer3DSingleton(ctx Context, at *PhysicsServer3DSingleton) PhysicsServer3DSingleton { if at == nil { at = new(PhysicsServer3DSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsServer3DSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsServer3DSingleton) owner() cObject { return gdClass.obj.get() }
func (PhysicsServer3DSingleton) class() string { return "PhysicsServer3DSingleton\000" }

func (gdClass PhysicsServer3DSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodPhysicsServer3DSingleton [130]cMethodBind
func (gdClass PhysicsServer3DSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass PhysicsServer3DSingleton) WorldBoundaryShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[0]) }
func (gdClass PhysicsServer3DSingleton) SeparationRayShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[1]) }
func (gdClass PhysicsServer3DSingleton) SphereShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[2]) }
func (gdClass PhysicsServer3DSingleton) BoxShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[3]) }
func (gdClass PhysicsServer3DSingleton) CapsuleShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[4]) }
func (gdClass PhysicsServer3DSingleton) CylinderShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[5]) }
func (gdClass PhysicsServer3DSingleton) ConvexPolygonShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[6]) }
func (gdClass PhysicsServer3DSingleton) ConcavePolygonShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[7]) }
func (gdClass PhysicsServer3DSingleton) HeightmapShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[8]) }
func (gdClass PhysicsServer3DSingleton) CustomShapeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[9]) }
func (gdClass PhysicsServer3DSingleton) ShapeSetData(shape RID, data any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[10], &shape, &data) }
func (gdClass PhysicsServer3DSingleton) ShapeGetType(shape RID) PhysicsServer3DShapeType { return methodCall[PhysicsServer3DShapeType](gdClass.obj.get(), methodPhysicsServer3DSingleton[11], &shape) }
func (gdClass PhysicsServer3DSingleton) ShapeGetData(shape RID) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer3DSingleton[12], &shape) }
func (gdClass PhysicsServer3DSingleton) SpaceCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[13]) }
func (gdClass PhysicsServer3DSingleton) SpaceSetActive(space RID, active bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[14], &space, &active) }
func (gdClass PhysicsServer3DSingleton) SpaceIsActive(space RID) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[15], &space) }
func (gdClass PhysicsServer3DSingleton) SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[16], &space, &param, &value) }
func (gdClass PhysicsServer3DSingleton) SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[17], &space, &param) }
func (gdClass PhysicsServer3DSingleton) SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D { return methodCall[PhysicsDirectSpaceState3D](gdClass.obj.get(), methodPhysicsServer3DSingleton[18], &space) }
func (gdClass PhysicsServer3DSingleton) AreaCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[19]) }
func (gdClass PhysicsServer3DSingleton) AreaSetSpace(area RID, space RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[20], &area, &space) }
func (gdClass PhysicsServer3DSingleton) AreaGetSpace(area RID) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[21], &area) }
func (gdClass PhysicsServer3DSingleton) AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[22], &area, &shape, &transform, &disabled) }
func (gdClass PhysicsServer3DSingleton) AreaSetShape(area RID, shape_idx int64, shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[23], &area, &shape_idx, &shape) }
func (gdClass PhysicsServer3DSingleton) AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[24], &area, &shape_idx, &transform) }
func (gdClass PhysicsServer3DSingleton) AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[25], &area, &shape_idx, &disabled) }
func (gdClass PhysicsServer3DSingleton) AreaGetShapeCount(area RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[26], &area) }
func (gdClass PhysicsServer3DSingleton) AreaGetShape(area RID, shape_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[27], &area, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) AreaGetShapeTransform(area RID, shape_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsServer3DSingleton[28], &area, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) AreaRemoveShape(area RID, shape_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[29], &area, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) AreaClearShapes(area RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[30], &area) }
func (gdClass PhysicsServer3DSingleton) AreaSetCollisionLayer(area RID, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[31], &area, &layer) }
func (gdClass PhysicsServer3DSingleton) AreaSetCollisionMask(area RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[32], &area, &mask) }
func (gdClass PhysicsServer3DSingleton) AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[33], &area, &param, &value) }
func (gdClass PhysicsServer3DSingleton) AreaSetTransform(area RID, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[34], &area, &transform) }
func (gdClass PhysicsServer3DSingleton) AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer3DSingleton[35], &area, &param) }
func (gdClass PhysicsServer3DSingleton) AreaGetTransform(area RID) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsServer3DSingleton[36], &area) }
func (gdClass PhysicsServer3DSingleton) AreaAttachObjectInstanceId(area RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[37], &area, &id) }
func (gdClass PhysicsServer3DSingleton) AreaGetObjectInstanceId(area RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[38], &area) }
func (gdClass PhysicsServer3DSingleton) AreaSetMonitorCallback(area RID, callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[39], &area, &callback) }
func (gdClass PhysicsServer3DSingleton) AreaSetAreaMonitorCallback(area RID, callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[40], &area, &callback) }
func (gdClass PhysicsServer3DSingleton) AreaSetMonitorable(area RID, monitorable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[41], &area, &monitorable) }
func (gdClass PhysicsServer3DSingleton) AreaSetRayPickable(area RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[42], &area, &enable) }
func (gdClass PhysicsServer3DSingleton) BodyCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[43]) }
func (gdClass PhysicsServer3DSingleton) BodySetSpace(body RID, space RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[44], &body, &space) }
func (gdClass PhysicsServer3DSingleton) BodyGetSpace(body RID) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[45], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetMode(body RID, mode PhysicsServer3DBodyMode)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[46], &body, &mode) }
func (gdClass PhysicsServer3DSingleton) BodyGetMode(body RID) PhysicsServer3DBodyMode { return methodCall[PhysicsServer3DBodyMode](gdClass.obj.get(), methodPhysicsServer3DSingleton[47], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetCollisionLayer(body RID, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[48], &body, &layer) }
func (gdClass PhysicsServer3DSingleton) BodyGetCollisionLayer(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[49], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetCollisionMask(body RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[50], &body, &mask) }
func (gdClass PhysicsServer3DSingleton) BodyGetCollisionMask(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[51], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetCollisionPriority(body RID, priority float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[52], &body, &priority) }
func (gdClass PhysicsServer3DSingleton) BodyGetCollisionPriority(body RID) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[53], &body) }
func (gdClass PhysicsServer3DSingleton) BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[54], &body, &shape, &transform, &disabled) }
func (gdClass PhysicsServer3DSingleton) BodySetShape(body RID, shape_idx int64, shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[55], &body, &shape_idx, &shape) }
func (gdClass PhysicsServer3DSingleton) BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[56], &body, &shape_idx, &transform) }
func (gdClass PhysicsServer3DSingleton) BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[57], &body, &shape_idx, &disabled) }
func (gdClass PhysicsServer3DSingleton) BodyGetShapeCount(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[58], &body) }
func (gdClass PhysicsServer3DSingleton) BodyGetShape(body RID, shape_idx int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[59], &body, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) BodyGetShapeTransform(body RID, shape_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsServer3DSingleton[60], &body, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) BodyRemoveShape(body RID, shape_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[61], &body, &shape_idx) }
func (gdClass PhysicsServer3DSingleton) BodyClearShapes(body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[62], &body) }
func (gdClass PhysicsServer3DSingleton) BodyAttachObjectInstanceId(body RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[63], &body, &id) }
func (gdClass PhysicsServer3DSingleton) BodyGetObjectInstanceId(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[64], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetEnableContinuousCollisionDetection(body RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[65], &body, &enable) }
func (gdClass PhysicsServer3DSingleton) BodyIsContinuousCollisionDetectionEnabled(body RID) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[66], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[67], &body, &param, &value) }
func (gdClass PhysicsServer3DSingleton) BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer3DSingleton[68], &body, &param) }
func (gdClass PhysicsServer3DSingleton) BodyResetMassProperties(body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[69], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetState(body RID, state PhysicsServer3DBodyState, value any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[70], &body, &state, &value) }
func (gdClass PhysicsServer3DSingleton) BodyGetState(body RID, state PhysicsServer3DBodyState) any { return methodCall[any](gdClass.obj.get(), methodPhysicsServer3DSingleton[71], &body, &state) }
func (gdClass PhysicsServer3DSingleton) BodyApplyCentralImpulse(body RID, impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[72], &body, &impulse) }
func (gdClass PhysicsServer3DSingleton) BodyApplyImpulse(body RID, impulse Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[73], &body, &impulse, &position) }
func (gdClass PhysicsServer3DSingleton) BodyApplyTorqueImpulse(body RID, impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[74], &body, &impulse) }
func (gdClass PhysicsServer3DSingleton) BodyApplyCentralForce(body RID, force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[75], &body, &force) }
func (gdClass PhysicsServer3DSingleton) BodyApplyForce(body RID, force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[76], &body, &force, &position) }
func (gdClass PhysicsServer3DSingleton) BodyApplyTorque(body RID, torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[77], &body, &torque) }
func (gdClass PhysicsServer3DSingleton) BodyAddConstantCentralForce(body RID, force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[78], &body, &force) }
func (gdClass PhysicsServer3DSingleton) BodyAddConstantForce(body RID, force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[79], &body, &force, &position) }
func (gdClass PhysicsServer3DSingleton) BodyAddConstantTorque(body RID, torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[80], &body, &torque) }
func (gdClass PhysicsServer3DSingleton) BodySetConstantForce(body RID, force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[81], &body, &force) }
func (gdClass PhysicsServer3DSingleton) BodyGetConstantForce(body RID) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsServer3DSingleton[82], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetConstantTorque(body RID, torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[83], &body, &torque) }
func (gdClass PhysicsServer3DSingleton) BodyGetConstantTorque(body RID) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsServer3DSingleton[84], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetAxisVelocity(body RID, axis_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[85], &body, &axis_velocity) }
func (gdClass PhysicsServer3DSingleton) BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[86], &body, &axis, &lock) }
func (gdClass PhysicsServer3DSingleton) BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[87], &body, &axis) }
func (gdClass PhysicsServer3DSingleton) BodyAddCollisionException(body RID, excepted_body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[88], &body, &excepted_body) }
func (gdClass PhysicsServer3DSingleton) BodyRemoveCollisionException(body RID, excepted_body RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[89], &body, &excepted_body) }
func (gdClass PhysicsServer3DSingleton) BodySetMaxContactsReported(body RID, amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[90], &body, &amount) }
func (gdClass PhysicsServer3DSingleton) BodyGetMaxContactsReported(body RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[91], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetOmitForceIntegration(body RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[92], &body, &enable) }
func (gdClass PhysicsServer3DSingleton) BodyIsOmittingForceIntegration(body RID) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[93], &body) }
func (gdClass PhysicsServer3DSingleton) BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[94], &body, &callable, &userdata) }
func (gdClass PhysicsServer3DSingleton) BodySetRayPickable(body RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[95], &body, &enable) }
func (gdClass PhysicsServer3DSingleton) BodyTestMotion(body RID, parameters PhysicsTestMotionParameters3D, result PhysicsTestMotionResult3D) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[96], &body, &parameters, &result) }
func (gdClass PhysicsServer3DSingleton) BodyGetDirectState(body RID) PhysicsDirectBodyState3D { return methodCall[PhysicsDirectBodyState3D](gdClass.obj.get(), methodPhysicsServer3DSingleton[97], &body) }
func (gdClass PhysicsServer3DSingleton) SoftBodyGetBounds(body RID) AABB { return methodCall[AABB](gdClass.obj.get(), methodPhysicsServer3DSingleton[98], &body) }
func (gdClass PhysicsServer3DSingleton) JointCreate() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsServer3DSingleton[99]) }
func (gdClass PhysicsServer3DSingleton) JointClear(joint RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[100], &joint) }
func (gdClass PhysicsServer3DSingleton) JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[101], &joint, &body_A, &local_A, &body_B, &local_B) }
func (gdClass PhysicsServer3DSingleton) PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[102], &joint, &param, &value) }
func (gdClass PhysicsServer3DSingleton) PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[103], &joint, &param) }
func (gdClass PhysicsServer3DSingleton) PinJointSetLocalA(joint RID, local_A Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[104], &joint, &local_A) }
func (gdClass PhysicsServer3DSingleton) PinJointGetLocalA(joint RID) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsServer3DSingleton[105], &joint) }
func (gdClass PhysicsServer3DSingleton) PinJointSetLocalB(joint RID, local_B Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[106], &joint, &local_B) }
func (gdClass PhysicsServer3DSingleton) PinJointGetLocalB(joint RID) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsServer3DSingleton[107], &joint) }
func (gdClass PhysicsServer3DSingleton) JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[108], &joint, &body_A, &hinge_A, &body_B, &hinge_B) }
func (gdClass PhysicsServer3DSingleton) HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[109], &joint, &param, &value) }
func (gdClass PhysicsServer3DSingleton) HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[110], &joint, &param) }
func (gdClass PhysicsServer3DSingleton) HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[111], &joint, &flag, &enabled) }
func (gdClass PhysicsServer3DSingleton) HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[112], &joint, &flag) }
func (gdClass PhysicsServer3DSingleton) JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[113], &joint, &body_A, &local_ref_A, &body_B, &local_ref_B) }
func (gdClass PhysicsServer3DSingleton) SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[114], &joint, &param, &value) }
func (gdClass PhysicsServer3DSingleton) SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[115], &joint, &param) }
func (gdClass PhysicsServer3DSingleton) JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[116], &joint, &body_A, &local_ref_A, &body_B, &local_ref_B) }
func (gdClass PhysicsServer3DSingleton) ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[117], &joint, &param, &value) }
func (gdClass PhysicsServer3DSingleton) ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[118], &joint, &param) }
func (gdClass PhysicsServer3DSingleton) JointGetType(joint RID) PhysicsServer3DJointType { return methodCall[PhysicsServer3DJointType](gdClass.obj.get(), methodPhysicsServer3DSingleton[119], &joint) }
func (gdClass PhysicsServer3DSingleton) JointSetSolverPriority(joint RID, priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[120], &joint, &priority) }
func (gdClass PhysicsServer3DSingleton) JointGetSolverPriority(joint RID) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[121], &joint) }
func (gdClass PhysicsServer3DSingleton) JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[122], &joint, &body_A, &local_ref_A, &body_B, &local_ref_B) }
func (gdClass PhysicsServer3DSingleton) Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[123], &joint, &axis, &param, &value) }
func (gdClass PhysicsServer3DSingleton) Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsServer3DSingleton[124], &joint, &axis, &param) }
func (gdClass PhysicsServer3DSingleton) Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[125], &joint, &axis, &flag, &enable) }
func (gdClass PhysicsServer3DSingleton) Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsServer3DSingleton[126], &joint, &axis, &flag) }
func (gdClass PhysicsServer3DSingleton) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[127], &rid) }
func (gdClass PhysicsServer3DSingleton) SetActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsServer3DSingleton[128], &active) }
func (gdClass PhysicsServer3DSingleton) GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsServer3DSingleton[129], &process_info) }

type PhysicsServer3DExtension struct{self *PhysicsServer3DExtension; obj safeObject }
func NewPhysicsServer3DExtension(ctx Context, at *PhysicsServer3DExtension) PhysicsServer3DExtension { if at == nil { at = new(PhysicsServer3DExtension) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsServer3DExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsServer3DExtension) owner() cObject { return gdClass.obj.get() }
func (PhysicsServer3DExtension) class() string { return "PhysicsServer3DExtension\000" }

func (gdClass PhysicsServer3DExtension) PhysicsServer3DSingleton() PhysicsServer3DSingleton { return PhysicsServer3DSingleton{obj:gdClass.obj} }

func (gdClass PhysicsServer3DExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_world_boundary_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ WorldBoundaryShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`WorldBoundaryShapeCreate`)
		}
		return
	case "_separation_ray_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ SeparationRayShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`SeparationRayShapeCreate`)
		}
		return
	case "_sphere_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ SphereShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`SphereShapeCreate`)
		}
		return
	case "_box_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ BoxShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`BoxShapeCreate`)
		}
		return
	case "_capsule_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ CapsuleShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`CapsuleShapeCreate`)
		}
		return
	case "_cylinder_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ CylinderShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`CylinderShapeCreate`)
		}
		return
	case "_convex_polygon_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConvexPolygonShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`ConvexPolygonShapeCreate`)
		}
		return
	case "_concave_polygon_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConcavePolygonShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`ConcavePolygonShapeCreate`)
		}
		return
	case "_heightmap_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ HeightmapShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`HeightmapShapeCreate`)
		}
		return
	case "_custom_shape_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ CustomShapeCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`CustomShapeCreate`)
		}
		return
	case "_shape_set_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapeSetData(shape RID, data any)  }{}).Elem()) {
			return rtype.MethodByName(`ShapeSetData`)
		}
		return
	case "_shape_get_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapeGetType(shape RID) PhysicsServer3DShapeType }{}).Elem()) {
			return rtype.MethodByName(`ShapeGetType`)
		}
		return
	case "_shape_get_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapeGetData(shape RID) any }{}).Elem()) {
			return rtype.MethodByName(`ShapeGetData`)
		}
		return
	case "_space_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`SpaceCreate`)
		}
		return
	case "_space_set_active":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceSetActive(space RID, active bool)  }{}).Elem()) {
			return rtype.MethodByName(`SpaceSetActive`)
		}
		return
	case "_space_is_active":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceIsActive(space RID) bool }{}).Elem()) {
			return rtype.MethodByName(`SpaceIsActive`)
		}
		return
	case "_space_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceSetParam(space RID, param PhysicsServer3DSpaceParameter, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`SpaceSetParam`)
		}
		return
	case "_space_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceGetParam(space RID, param PhysicsServer3DSpaceParameter) float64 }{}).Elem()) {
			return rtype.MethodByName(`SpaceGetParam`)
		}
		return
	case "_space_get_direct_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpaceGetDirectState(space RID) PhysicsDirectSpaceState3D }{}).Elem()) {
			return rtype.MethodByName(`SpaceGetDirectState`)
		}
		return
	case "_area_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`AreaCreate`)
		}
		return
	case "_area_set_space":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetSpace(area RID, space RID)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetSpace`)
		}
		return
	case "_area_get_space":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetSpace(area RID) RID }{}).Elem()) {
			return rtype.MethodByName(`AreaGetSpace`)
		}
		return
	case "_area_add_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaAddShape(area RID, shape RID, transform Transform3D, disabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`AreaAddShape`)
		}
		return
	case "_area_set_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetShape(area RID, shape_idx int64, shape RID)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetShape`)
		}
		return
	case "_area_set_shape_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetShapeTransform(area RID, shape_idx int64, transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetShapeTransform`)
		}
		return
	case "_area_set_shape_disabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetShapeDisabled(area RID, shape_idx int64, disabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetShapeDisabled`)
		}
		return
	case "_area_get_shape_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetShapeCount(area RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`AreaGetShapeCount`)
		}
		return
	case "_area_get_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetShape(area RID, shape_idx int64) RID }{}).Elem()) {
			return rtype.MethodByName(`AreaGetShape`)
		}
		return
	case "_area_get_shape_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetShapeTransform(area RID, shape_idx int64) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`AreaGetShapeTransform`)
		}
		return
	case "_area_remove_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaRemoveShape(area RID, shape_idx int64)  }{}).Elem()) {
			return rtype.MethodByName(`AreaRemoveShape`)
		}
		return
	case "_area_clear_shapes":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaClearShapes(area RID)  }{}).Elem()) {
			return rtype.MethodByName(`AreaClearShapes`)
		}
		return
	case "_area_set_collision_layer":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetCollisionLayer(area RID, layer int64)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetCollisionLayer`)
		}
		return
	case "_area_set_collision_mask":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetCollisionMask(area RID, mask int64)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetCollisionMask`)
		}
		return
	case "_area_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetParam(area RID, param PhysicsServer3DAreaParameter, value any)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetParam`)
		}
		return
	case "_area_set_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetTransform(area RID, transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetTransform`)
		}
		return
	case "_area_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetParam(area RID, param PhysicsServer3DAreaParameter) any }{}).Elem()) {
			return rtype.MethodByName(`AreaGetParam`)
		}
		return
	case "_area_get_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetTransform(area RID) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`AreaGetTransform`)
		}
		return
	case "_area_attach_object_instance_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaAttachObjectInstanceId(area RID, id int64)  }{}).Elem()) {
			return rtype.MethodByName(`AreaAttachObjectInstanceId`)
		}
		return
	case "_area_get_object_instance_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaGetObjectInstanceId(area RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`AreaGetObjectInstanceId`)
		}
		return
	case "_area_set_monitor_callback":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetMonitorCallback(area RID, callback Callable)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetMonitorCallback`)
		}
		return
	case "_area_set_area_monitor_callback":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetAreaMonitorCallback(area RID, callback Callable)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetAreaMonitorCallback`)
		}
		return
	case "_area_set_monitorable":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetMonitorable(area RID, monitorable bool)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetMonitorable`)
		}
		return
	case "_area_set_ray_pickable":
		if rtype.Implements(reflect.TypeOf([0]interface{ AreaSetRayPickable(area RID, enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`AreaSetRayPickable`)
		}
		return
	case "_body_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`BodyCreate`)
		}
		return
	case "_body_set_space":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetSpace(body RID, space RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetSpace`)
		}
		return
	case "_body_get_space":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetSpace(body RID) RID }{}).Elem()) {
			return rtype.MethodByName(`BodyGetSpace`)
		}
		return
	case "_body_set_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetMode(body RID, mode PhysicsServer3DBodyMode)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetMode`)
		}
		return
	case "_body_get_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetMode(body RID) PhysicsServer3DBodyMode }{}).Elem()) {
			return rtype.MethodByName(`BodyGetMode`)
		}
		return
	case "_body_set_collision_layer":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetCollisionLayer(body RID, layer int64)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetCollisionLayer`)
		}
		return
	case "_body_get_collision_layer":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetCollisionLayer(body RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetCollisionLayer`)
		}
		return
	case "_body_set_collision_mask":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetCollisionMask(body RID, mask int64)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetCollisionMask`)
		}
		return
	case "_body_get_collision_mask":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetCollisionMask(body RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetCollisionMask`)
		}
		return
	case "_body_set_collision_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetCollisionPriority(body RID, priority float64)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetCollisionPriority`)
		}
		return
	case "_body_get_collision_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetCollisionPriority(body RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetCollisionPriority`)
		}
		return
	case "_body_add_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAddShape(body RID, shape RID, transform Transform3D, disabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAddShape`)
		}
		return
	case "_body_set_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetShape(body RID, shape_idx int64, shape RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetShape`)
		}
		return
	case "_body_set_shape_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetShapeTransform(body RID, shape_idx int64, transform Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetShapeTransform`)
		}
		return
	case "_body_set_shape_disabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetShapeDisabled(body RID, shape_idx int64, disabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetShapeDisabled`)
		}
		return
	case "_body_get_shape_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetShapeCount(body RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetShapeCount`)
		}
		return
	case "_body_get_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetShape(body RID, shape_idx int64) RID }{}).Elem()) {
			return rtype.MethodByName(`BodyGetShape`)
		}
		return
	case "_body_get_shape_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetShapeTransform(body RID, shape_idx int64) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`BodyGetShapeTransform`)
		}
		return
	case "_body_remove_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyRemoveShape(body RID, shape_idx int64)  }{}).Elem()) {
			return rtype.MethodByName(`BodyRemoveShape`)
		}
		return
	case "_body_clear_shapes":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyClearShapes(body RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodyClearShapes`)
		}
		return
	case "_body_attach_object_instance_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAttachObjectInstanceId(body RID, id int64)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAttachObjectInstanceId`)
		}
		return
	case "_body_get_object_instance_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetObjectInstanceId(body RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetObjectInstanceId`)
		}
		return
	case "_body_set_enable_continuous_collision_detection":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetEnableContinuousCollisionDetection(body RID, enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetEnableContinuousCollisionDetection`)
		}
		return
	case "_body_is_continuous_collision_detection_enabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyIsContinuousCollisionDetectionEnabled(body RID) bool }{}).Elem()) {
			return rtype.MethodByName(`BodyIsContinuousCollisionDetectionEnabled`)
		}
		return
	case "_body_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetParam(body RID, param PhysicsServer3DBodyParameter, value any)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetParam`)
		}
		return
	case "_body_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetParam(body RID, param PhysicsServer3DBodyParameter) any }{}).Elem()) {
			return rtype.MethodByName(`BodyGetParam`)
		}
		return
	case "_body_reset_mass_properties":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyResetMassProperties(body RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodyResetMassProperties`)
		}
		return
	case "_body_set_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetState(body RID, state PhysicsServer3DBodyState, value any)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetState`)
		}
		return
	case "_body_get_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetState(body RID, state PhysicsServer3DBodyState) any }{}).Elem()) {
			return rtype.MethodByName(`BodyGetState`)
		}
		return
	case "_body_apply_central_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyCentralImpulse(body RID, impulse Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyCentralImpulse`)
		}
		return
	case "_body_apply_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyImpulse(body RID, impulse Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyImpulse`)
		}
		return
	case "_body_apply_torque_impulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyTorqueImpulse(body RID, impulse Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyTorqueImpulse`)
		}
		return
	case "_body_apply_central_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyCentralForce(body RID, force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyCentralForce`)
		}
		return
	case "_body_apply_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyForce(body RID, force Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyForce`)
		}
		return
	case "_body_apply_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyApplyTorque(body RID, torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyApplyTorque`)
		}
		return
	case "_body_add_constant_central_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAddConstantCentralForce(body RID, force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAddConstantCentralForce`)
		}
		return
	case "_body_add_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAddConstantForce(body RID, force Vector3, position Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAddConstantForce`)
		}
		return
	case "_body_add_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAddConstantTorque(body RID, torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAddConstantTorque`)
		}
		return
	case "_body_set_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetConstantForce(body RID, force Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetConstantForce`)
		}
		return
	case "_body_get_constant_force":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetConstantForce(body RID) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetConstantForce`)
		}
		return
	case "_body_set_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetConstantTorque(body RID, torque Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetConstantTorque`)
		}
		return
	case "_body_get_constant_torque":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetConstantTorque(body RID) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetConstantTorque`)
		}
		return
	case "_body_set_axis_velocity":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetAxisVelocity(body RID, axis_velocity Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetAxisVelocity`)
		}
		return
	case "_body_set_axis_lock":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetAxisLock(body RID, axis PhysicsServer3DBodyAxis, lock bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetAxisLock`)
		}
		return
	case "_body_is_axis_locked":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyIsAxisLocked(body RID, axis PhysicsServer3DBodyAxis) bool }{}).Elem()) {
			return rtype.MethodByName(`BodyIsAxisLocked`)
		}
		return
	case "_body_add_collision_exception":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyAddCollisionException(body RID, excepted_body RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodyAddCollisionException`)
		}
		return
	case "_body_remove_collision_exception":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyRemoveCollisionException(body RID, excepted_body RID)  }{}).Elem()) {
			return rtype.MethodByName(`BodyRemoveCollisionException`)
		}
		return
	case "_body_set_max_contacts_reported":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetMaxContactsReported(body RID, amount int64)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetMaxContactsReported`)
		}
		return
	case "_body_get_max_contacts_reported":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetMaxContactsReported(body RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`BodyGetMaxContactsReported`)
		}
		return
	case "_body_set_omit_force_integration":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetOmitForceIntegration(body RID, enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetOmitForceIntegration`)
		}
		return
	case "_body_is_omitting_force_integration":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyIsOmittingForceIntegration(body RID) bool }{}).Elem()) {
			return rtype.MethodByName(`BodyIsOmittingForceIntegration`)
		}
		return
	case "_body_set_force_integration_callback":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetForceIntegrationCallback(body RID, callable Callable, userdata any)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetForceIntegrationCallback`)
		}
		return
	case "_body_set_ray_pickable":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodySetRayPickable(body RID, enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`BodySetRayPickable`)
		}
		return
	case "_body_test_motion":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyTestMotion(body RID, from Transform3D, motion Vector3, margin float64, max_collisions int64, collide_separation_ray bool, result *PhysicsServer3DExtensionMotionResult) bool }{}).Elem()) {
			return rtype.MethodByName(`BodyTestMotion`)
		}
		return
	case "_body_get_direct_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ BodyGetDirectState(body RID) PhysicsDirectBodyState3D }{}).Elem()) {
			return rtype.MethodByName(`BodyGetDirectState`)
		}
		return
	case "_soft_body_get_bounds":
		if rtype.Implements(reflect.TypeOf([0]interface{ SoftBodyGetBounds(body RID) AABB }{}).Elem()) {
			return rtype.MethodByName(`SoftBodyGetBounds`)
		}
		return
	case "_joint_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointCreate() RID }{}).Elem()) {
			return rtype.MethodByName(`JointCreate`)
		}
		return
	case "_joint_clear":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointClear(joint RID)  }{}).Elem()) {
			return rtype.MethodByName(`JointClear`)
		}
		return
	case "_joint_make_pin":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointMakePin(joint RID, body_A RID, local_A Vector3, body_B RID, local_B Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`JointMakePin`)
		}
		return
	case "_pin_joint_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointSetParam(joint RID, param PhysicsServer3DPinJointParam, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`PinJointSetParam`)
		}
		return
	case "_pin_joint_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointGetParam(joint RID, param PhysicsServer3DPinJointParam) float64 }{}).Elem()) {
			return rtype.MethodByName(`PinJointGetParam`)
		}
		return
	case "_pin_joint_set_local_a":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointSetLocalA(joint RID, local_A Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`PinJointSetLocalA`)
		}
		return
	case "_pin_joint_get_local_a":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointGetLocalA(joint RID) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`PinJointGetLocalA`)
		}
		return
	case "_pin_joint_set_local_b":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointSetLocalB(joint RID, local_B Vector3)  }{}).Elem()) {
			return rtype.MethodByName(`PinJointSetLocalB`)
		}
		return
	case "_pin_joint_get_local_b":
		if rtype.Implements(reflect.TypeOf([0]interface{ PinJointGetLocalB(joint RID) Vector3 }{}).Elem()) {
			return rtype.MethodByName(`PinJointGetLocalB`)
		}
		return
	case "_joint_make_hinge":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointMakeHinge(joint RID, body_A RID, hinge_A Transform3D, body_B RID, hinge_B Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`JointMakeHinge`)
		}
		return
	case "_hinge_joint_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ HingeJointSetParam(joint RID, param PhysicsServer3DHingeJointParam, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`HingeJointSetParam`)
		}
		return
	case "_hinge_joint_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ HingeJointGetParam(joint RID, param PhysicsServer3DHingeJointParam) float64 }{}).Elem()) {
			return rtype.MethodByName(`HingeJointGetParam`)
		}
		return
	case "_hinge_joint_set_flag":
		if rtype.Implements(reflect.TypeOf([0]interface{ HingeJointSetFlag(joint RID, flag PhysicsServer3DHingeJointFlag, enabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`HingeJointSetFlag`)
		}
		return
	case "_hinge_joint_get_flag":
		if rtype.Implements(reflect.TypeOf([0]interface{ HingeJointGetFlag(joint RID, flag PhysicsServer3DHingeJointFlag) bool }{}).Elem()) {
			return rtype.MethodByName(`HingeJointGetFlag`)
		}
		return
	case "_joint_make_slider":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointMakeSlider(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`JointMakeSlider`)
		}
		return
	case "_slider_joint_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ SliderJointSetParam(joint RID, param PhysicsServer3DSliderJointParam, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`SliderJointSetParam`)
		}
		return
	case "_slider_joint_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ SliderJointGetParam(joint RID, param PhysicsServer3DSliderJointParam) float64 }{}).Elem()) {
			return rtype.MethodByName(`SliderJointGetParam`)
		}
		return
	case "_joint_make_cone_twist":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointMakeConeTwist(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`JointMakeConeTwist`)
		}
		return
	case "_cone_twist_joint_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConeTwistJointSetParam(joint RID, param PhysicsServer3DConeTwistJointParam, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`ConeTwistJointSetParam`)
		}
		return
	case "_cone_twist_joint_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ ConeTwistJointGetParam(joint RID, param PhysicsServer3DConeTwistJointParam) float64 }{}).Elem()) {
			return rtype.MethodByName(`ConeTwistJointGetParam`)
		}
		return
	case "_joint_get_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointGetType(joint RID) PhysicsServer3DJointType }{}).Elem()) {
			return rtype.MethodByName(`JointGetType`)
		}
		return
	case "_joint_set_solver_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointSetSolverPriority(joint RID, priority int64)  }{}).Elem()) {
			return rtype.MethodByName(`JointSetSolverPriority`)
		}
		return
	case "_joint_get_solver_priority":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointGetSolverPriority(joint RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`JointGetSolverPriority`)
		}
		return
	case "_joint_make_generic_6dof":
		if rtype.Implements(reflect.TypeOf([0]interface{ JointMakeGeneric6dof(joint RID, body_A RID, local_ref_A Transform3D, body_B RID, local_ref_B Transform3D)  }{}).Elem()) {
			return rtype.MethodByName(`JointMakeGeneric6dof`)
		}
		return
	case "_generic_6dof_joint_set_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ Generic6dofJointSetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam, value float64)  }{}).Elem()) {
			return rtype.MethodByName(`Generic6dofJointSetParam`)
		}
		return
	case "_generic_6dof_joint_get_param":
		if rtype.Implements(reflect.TypeOf([0]interface{ Generic6dofJointGetParam(joint RID, axis Vector3Axis, param PhysicsServer3DG6DOFJointAxisParam) float64 }{}).Elem()) {
			return rtype.MethodByName(`Generic6dofJointGetParam`)
		}
		return
	case "_generic_6dof_joint_set_flag":
		if rtype.Implements(reflect.TypeOf([0]interface{ Generic6dofJointSetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag, enable bool)  }{}).Elem()) {
			return rtype.MethodByName(`Generic6dofJointSetFlag`)
		}
		return
	case "_generic_6dof_joint_get_flag":
		if rtype.Implements(reflect.TypeOf([0]interface{ Generic6dofJointGetFlag(joint RID, axis Vector3Axis, flag PhysicsServer3DG6DOFJointAxisFlag) bool }{}).Elem()) {
			return rtype.MethodByName(`Generic6dofJointGetFlag`)
		}
		return
	case "_free_rid":
		if rtype.Implements(reflect.TypeOf([0]interface{ FreeRid(rid RID)  }{}).Elem()) {
			return rtype.MethodByName(`FreeRid`)
		}
		return
	case "_set_active":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetActive(active bool)  }{}).Elem()) {
			return rtype.MethodByName(`SetActive`)
		}
		return
	case "_get_process_info":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetProcessInfo(process_info PhysicsServer3DProcessInfo) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetProcessInfo`)
		}
		return
	}
	return gdClass.PhysicsServer3DSingleton().virtual(rtype, name)
}

type PhysicsServer3DRenderingServerHandler struct{self *PhysicsServer3DRenderingServerHandler; obj safeObject }
func NewPhysicsServer3DRenderingServerHandler(ctx Context, at *PhysicsServer3DRenderingServerHandler) PhysicsServer3DRenderingServerHandler { if at == nil { at = new(PhysicsServer3DRenderingServerHandler) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PhysicsServer3DRenderingServerHandler) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsServer3DRenderingServerHandler) owner() cObject { return gdClass.obj.get() }
func (PhysicsServer3DRenderingServerHandler) class() string { return "PhysicsServer3DRenderingServerHandler\000" }

func (gdClass PhysicsServer3DRenderingServerHandler) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass PhysicsServer3DRenderingServerHandler) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_set_vertex":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetVertex(vertex_id int64, vertices []byte)  }{}).Elem()) {
			return rtype.MethodByName(`SetVertex`)
		}
		return
	case "_set_normal":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetNormal(vertex_id int64, normals []byte)  }{}).Elem()) {
			return rtype.MethodByName(`SetNormal`)
		}
		return
	case "_set_aabb":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetAabb(aabb AABB)  }{}).Elem()) {
			return rtype.MethodByName(`SetAabb`)
		}
		return
	}
	return gdClass.Object().virtual(rtype, name)
}

type PhysicsShapeQueryParameters2D struct{self *PhysicsShapeQueryParameters2D; obj safeObject }
func NewPhysicsShapeQueryParameters2D(ctx Context, at *PhysicsShapeQueryParameters2D) PhysicsShapeQueryParameters2D { if at == nil { at = new(PhysicsShapeQueryParameters2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsShapeQueryParameters2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsShapeQueryParameters2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsShapeQueryParameters2D) class() string { return "PhysicsShapeQueryParameters2D\000" }

func (gdClass PhysicsShapeQueryParameters2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsShapeQueryParameters2D [18]cMethodBind
func (gdClass PhysicsShapeQueryParameters2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsShapeQueryParameters2D) SetShape(shape Resource)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[0], &shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShape() Resource { return methodCall[Resource](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[1]) }
func (gdClass PhysicsShapeQueryParameters2D) SetShapeRid(shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[2], &shape) }
func (gdClass PhysicsShapeQueryParameters2D) GetShapeRid() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[3]) }
func (gdClass PhysicsShapeQueryParameters2D) SetTransform(transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[4], &transform) }
func (gdClass PhysicsShapeQueryParameters2D) GetTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[5]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMotion(motion Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[6], &motion) }
func (gdClass PhysicsShapeQueryParameters2D) GetMotion() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[7]) }
func (gdClass PhysicsShapeQueryParameters2D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[8], &margin) }
func (gdClass PhysicsShapeQueryParameters2D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[9]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[10], &collision_mask) }
func (gdClass PhysicsShapeQueryParameters2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[11]) }
func (gdClass PhysicsShapeQueryParameters2D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[12], &exclude) }
func (gdClass PhysicsShapeQueryParameters2D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[13]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[14], &enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[15]) }
func (gdClass PhysicsShapeQueryParameters2D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[16], &enable) }
func (gdClass PhysicsShapeQueryParameters2D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsShapeQueryParameters2D[17]) }

type PhysicsShapeQueryParameters3D struct{self *PhysicsShapeQueryParameters3D; obj safeObject }
func NewPhysicsShapeQueryParameters3D(ctx Context, at *PhysicsShapeQueryParameters3D) PhysicsShapeQueryParameters3D { if at == nil { at = new(PhysicsShapeQueryParameters3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsShapeQueryParameters3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsShapeQueryParameters3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsShapeQueryParameters3D) class() string { return "PhysicsShapeQueryParameters3D\000" }

func (gdClass PhysicsShapeQueryParameters3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsShapeQueryParameters3D [18]cMethodBind
func (gdClass PhysicsShapeQueryParameters3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsShapeQueryParameters3D) SetShape(shape Resource)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[0], &shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShape() Resource { return methodCall[Resource](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[1]) }
func (gdClass PhysicsShapeQueryParameters3D) SetShapeRid(shape RID)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[2], &shape) }
func (gdClass PhysicsShapeQueryParameters3D) GetShapeRid() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[3]) }
func (gdClass PhysicsShapeQueryParameters3D) SetTransform(transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[4], &transform) }
func (gdClass PhysicsShapeQueryParameters3D) GetTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[5]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMotion(motion Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[6], &motion) }
func (gdClass PhysicsShapeQueryParameters3D) GetMotion() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[7]) }
func (gdClass PhysicsShapeQueryParameters3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[8], &margin) }
func (gdClass PhysicsShapeQueryParameters3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[9]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[10], &collision_mask) }
func (gdClass PhysicsShapeQueryParameters3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[11]) }
func (gdClass PhysicsShapeQueryParameters3D) SetExclude(exclude Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[12], &exclude) }
func (gdClass PhysicsShapeQueryParameters3D) GetExclude() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[13]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[14], &enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[15]) }
func (gdClass PhysicsShapeQueryParameters3D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[16], &enable) }
func (gdClass PhysicsShapeQueryParameters3D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsShapeQueryParameters3D[17]) }

type PhysicsTestMotionParameters2D struct{self *PhysicsTestMotionParameters2D; obj safeObject }
func NewPhysicsTestMotionParameters2D(ctx Context, at *PhysicsTestMotionParameters2D) PhysicsTestMotionParameters2D { if at == nil { at = new(PhysicsTestMotionParameters2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsTestMotionParameters2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsTestMotionParameters2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsTestMotionParameters2D) class() string { return "PhysicsTestMotionParameters2D\000" }

func (gdClass PhysicsTestMotionParameters2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsTestMotionParameters2D [14]cMethodBind
func (gdClass PhysicsTestMotionParameters2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsTestMotionParameters2D) GetFrom() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[0]) }
func (gdClass PhysicsTestMotionParameters2D) SetFrom(from Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[1], &from) }
func (gdClass PhysicsTestMotionParameters2D) GetMotion() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[2]) }
func (gdClass PhysicsTestMotionParameters2D) SetMotion(motion Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[3], &motion) }
func (gdClass PhysicsTestMotionParameters2D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[4]) }
func (gdClass PhysicsTestMotionParameters2D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[5], &margin) }
func (gdClass PhysicsTestMotionParameters2D) IsCollideSeparationRayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[6]) }
func (gdClass PhysicsTestMotionParameters2D) SetCollideSeparationRayEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[7], &enabled) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeBodies() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[8]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeBodies(exclude_list Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[9], &exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) GetExcludeObjects() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[10]) }
func (gdClass PhysicsTestMotionParameters2D) SetExcludeObjects(exclude_list Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[11], &exclude_list) }
func (gdClass PhysicsTestMotionParameters2D) IsRecoveryAsCollisionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[12]) }
func (gdClass PhysicsTestMotionParameters2D) SetRecoveryAsCollisionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters2D[13], &enabled) }

type PhysicsTestMotionParameters3D struct{self *PhysicsTestMotionParameters3D; obj safeObject }
func NewPhysicsTestMotionParameters3D(ctx Context, at *PhysicsTestMotionParameters3D) PhysicsTestMotionParameters3D { if at == nil { at = new(PhysicsTestMotionParameters3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsTestMotionParameters3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsTestMotionParameters3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsTestMotionParameters3D) class() string { return "PhysicsTestMotionParameters3D\000" }

func (gdClass PhysicsTestMotionParameters3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsTestMotionParameters3D [16]cMethodBind
func (gdClass PhysicsTestMotionParameters3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsTestMotionParameters3D) GetFrom() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[0]) }
func (gdClass PhysicsTestMotionParameters3D) SetFrom(from Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[1], &from) }
func (gdClass PhysicsTestMotionParameters3D) GetMotion() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[2]) }
func (gdClass PhysicsTestMotionParameters3D) SetMotion(motion Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[3], &motion) }
func (gdClass PhysicsTestMotionParameters3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[4]) }
func (gdClass PhysicsTestMotionParameters3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[5], &margin) }
func (gdClass PhysicsTestMotionParameters3D) GetMaxCollisions() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[6]) }
func (gdClass PhysicsTestMotionParameters3D) SetMaxCollisions(max_collisions int64)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[7], &max_collisions) }
func (gdClass PhysicsTestMotionParameters3D) IsCollideSeparationRayEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[8]) }
func (gdClass PhysicsTestMotionParameters3D) SetCollideSeparationRayEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[9], &enabled) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeBodies() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[10]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeBodies(exclude_list Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[11], &exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) GetExcludeObjects() Array { return methodCall[Array](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[12]) }
func (gdClass PhysicsTestMotionParameters3D) SetExcludeObjects(exclude_list Array)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[13], &exclude_list) }
func (gdClass PhysicsTestMotionParameters3D) IsRecoveryAsCollisionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[14]) }
func (gdClass PhysicsTestMotionParameters3D) SetRecoveryAsCollisionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPhysicsTestMotionParameters3D[15], &enabled) }

type PhysicsTestMotionResult2D struct{self *PhysicsTestMotionResult2D; obj safeObject }
func NewPhysicsTestMotionResult2D(ctx Context, at *PhysicsTestMotionResult2D) PhysicsTestMotionResult2D { if at == nil { at = new(PhysicsTestMotionResult2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsTestMotionResult2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsTestMotionResult2D) owner() cObject { return gdClass.obj.get() }
func (PhysicsTestMotionResult2D) class() string { return "PhysicsTestMotionResult2D\000" }

func (gdClass PhysicsTestMotionResult2D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsTestMotionResult2D [13]cMethodBind
func (gdClass PhysicsTestMotionResult2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsTestMotionResult2D) GetTravel() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionResult2D[0]) }
func (gdClass PhysicsTestMotionResult2D) GetRemainder() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionResult2D[1]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionPoint() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionResult2D[2]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionResult2D[3]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPhysicsTestMotionResult2D[4]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderId() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[5]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderRid() RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsTestMotionResult2D[6]) }
func (gdClass PhysicsTestMotionResult2D) GetCollider() Object { return methodCall[Object](gdClass.obj.get(), methodPhysicsTestMotionResult2D[7]) }
func (gdClass PhysicsTestMotionResult2D) GetColliderShape() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[8]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionLocalShape() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[9]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[10]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionSafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[11]) }
func (gdClass PhysicsTestMotionResult2D) GetCollisionUnsafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult2D[12]) }

type PhysicsTestMotionResult3D struct{self *PhysicsTestMotionResult3D; obj safeObject }
func NewPhysicsTestMotionResult3D(ctx Context, at *PhysicsTestMotionResult3D) PhysicsTestMotionResult3D { if at == nil { at = new(PhysicsTestMotionResult3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PhysicsTestMotionResult3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PhysicsTestMotionResult3D) owner() cObject { return gdClass.obj.get() }
func (PhysicsTestMotionResult3D) class() string { return "PhysicsTestMotionResult3D\000" }

func (gdClass PhysicsTestMotionResult3D) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodPhysicsTestMotionResult3D [14]cMethodBind
func (gdClass PhysicsTestMotionResult3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass PhysicsTestMotionResult3D) GetTravel() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionResult3D[0]) }
func (gdClass PhysicsTestMotionResult3D) GetRemainder() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionResult3D[1]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionSafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[2]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionUnsafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[3]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[4]) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionPoint(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionResult3D[5], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionNormal(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionResult3D[6], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderVelocity(collision_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPhysicsTestMotionResult3D[7], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderId(collision_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[8], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderRid(collision_index int64) RID { return methodCall[RID](gdClass.obj.get(), methodPhysicsTestMotionResult3D[9], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollider(collision_index int64) Object { return methodCall[Object](gdClass.obj.get(), methodPhysicsTestMotionResult3D[10], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetColliderShape(collision_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[11], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionLocalShape(collision_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[12], &collision_index) }
func (gdClass PhysicsTestMotionResult3D) GetCollisionDepth(collision_index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodPhysicsTestMotionResult3D[13], &collision_index) }

type PinJoint2D struct{self *PinJoint2D; obj safeObject }
func NewPinJoint2D(ctx Context, at *PinJoint2D) PinJoint2D { if at == nil { at = new(PinJoint2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PinJoint2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PinJoint2D) owner() cObject { return gdClass.obj.get() }
func (PinJoint2D) class() string { return "PinJoint2D\000" }

func (gdClass PinJoint2D) Joint2D() Joint2D { return Joint2D{obj:gdClass.obj} }

var methodPinJoint2D [2]cMethodBind
func (gdClass PinJoint2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint2D().virtual(rtype, name)
}
func (gdClass PinJoint2D) SetSoftness(softness float64)  { methodCall[struct{}](gdClass.obj.get(), methodPinJoint2D[0], &softness) }
func (gdClass PinJoint2D) GetSoftness() float64 { return methodCall[float64](gdClass.obj.get(), methodPinJoint2D[1]) }

type PinJoint3DParam int64

const (
	PinJoint3DParamBias PinJoint3DParam = 0
	PinJoint3DParamDamping PinJoint3DParam = 1
	PinJoint3DParamImpulseClamp PinJoint3DParam = 2
)

type PinJoint3D struct{self *PinJoint3D; obj safeObject }
func NewPinJoint3D(ctx Context, at *PinJoint3D) PinJoint3D { if at == nil { at = new(PinJoint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PinJoint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PinJoint3D) owner() cObject { return gdClass.obj.get() }
func (PinJoint3D) class() string { return "PinJoint3D\000" }

func (gdClass PinJoint3D) Joint3D() Joint3D { return Joint3D{obj:gdClass.obj} }

var methodPinJoint3D [2]cMethodBind
func (gdClass PinJoint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint3D().virtual(rtype, name)
}
func (gdClass PinJoint3D) SetParam(param PinJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodPinJoint3D[0], &param, &value) }
func (gdClass PinJoint3D) GetParam(param PinJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodPinJoint3D[1], &param) }

type PlaceholderCubemap struct{self *PlaceholderCubemap; obj safeObject }
func NewPlaceholderCubemap(ctx Context, at *PlaceholderCubemap) PlaceholderCubemap { if at == nil { at = new(PlaceholderCubemap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderCubemap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderCubemap) owner() cObject { return gdClass.obj.get() }
func (PlaceholderCubemap) class() string { return "PlaceholderCubemap\000" }

func (gdClass PlaceholderCubemap) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered{obj:gdClass.obj} }

func (gdClass PlaceholderCubemap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PlaceholderTextureLayered().virtual(rtype, name)
}

type PlaceholderCubemapArray struct{self *PlaceholderCubemapArray; obj safeObject }
func NewPlaceholderCubemapArray(ctx Context, at *PlaceholderCubemapArray) PlaceholderCubemapArray { if at == nil { at = new(PlaceholderCubemapArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderCubemapArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderCubemapArray) owner() cObject { return gdClass.obj.get() }
func (PlaceholderCubemapArray) class() string { return "PlaceholderCubemapArray\000" }

func (gdClass PlaceholderCubemapArray) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered{obj:gdClass.obj} }

func (gdClass PlaceholderCubemapArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PlaceholderTextureLayered().virtual(rtype, name)
}

type PlaceholderMaterial struct{self *PlaceholderMaterial; obj safeObject }
func NewPlaceholderMaterial(ctx Context, at *PlaceholderMaterial) PlaceholderMaterial { if at == nil { at = new(PlaceholderMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderMaterial) owner() cObject { return gdClass.obj.get() }
func (PlaceholderMaterial) class() string { return "PlaceholderMaterial\000" }

func (gdClass PlaceholderMaterial) Material() Material { return Material{obj:gdClass.obj} }

func (gdClass PlaceholderMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}

type PlaceholderMesh struct{self *PlaceholderMesh; obj safeObject }
func NewPlaceholderMesh(ctx Context, at *PlaceholderMesh) PlaceholderMesh { if at == nil { at = new(PlaceholderMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderMesh) owner() cObject { return gdClass.obj.get() }
func (PlaceholderMesh) class() string { return "PlaceholderMesh\000" }

func (gdClass PlaceholderMesh) Mesh() Mesh { return Mesh{obj:gdClass.obj} }

var methodPlaceholderMesh [1]cMethodBind
func (gdClass PlaceholderMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Mesh().virtual(rtype, name)
}
func (gdClass PlaceholderMesh) SetAabb(aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodPlaceholderMesh[0], &aabb) }

type PlaceholderTexture2D struct{self *PlaceholderTexture2D; obj safeObject }
func NewPlaceholderTexture2D(ctx Context, at *PlaceholderTexture2D) PlaceholderTexture2D { if at == nil { at = new(PlaceholderTexture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderTexture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderTexture2D) owner() cObject { return gdClass.obj.get() }
func (PlaceholderTexture2D) class() string { return "PlaceholderTexture2D\000" }

func (gdClass PlaceholderTexture2D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodPlaceholderTexture2D [1]cMethodBind
func (gdClass PlaceholderTexture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass PlaceholderTexture2D) SetSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPlaceholderTexture2D[0], &size) }

type PlaceholderTexture2DArray struct{self *PlaceholderTexture2DArray; obj safeObject }
func NewPlaceholderTexture2DArray(ctx Context, at *PlaceholderTexture2DArray) PlaceholderTexture2DArray { if at == nil { at = new(PlaceholderTexture2DArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderTexture2DArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderTexture2DArray) owner() cObject { return gdClass.obj.get() }
func (PlaceholderTexture2DArray) class() string { return "PlaceholderTexture2DArray\000" }

func (gdClass PlaceholderTexture2DArray) PlaceholderTextureLayered() PlaceholderTextureLayered { return PlaceholderTextureLayered{obj:gdClass.obj} }

func (gdClass PlaceholderTexture2DArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PlaceholderTextureLayered().virtual(rtype, name)
}

type PlaceholderTexture3D struct{self *PlaceholderTexture3D; obj safeObject }
func NewPlaceholderTexture3D(ctx Context, at *PlaceholderTexture3D) PlaceholderTexture3D { if at == nil { at = new(PlaceholderTexture3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderTexture3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderTexture3D) owner() cObject { return gdClass.obj.get() }
func (PlaceholderTexture3D) class() string { return "PlaceholderTexture3D\000" }

func (gdClass PlaceholderTexture3D) Texture3D() Texture3D { return Texture3D{obj:gdClass.obj} }

var methodPlaceholderTexture3D [2]cMethodBind
func (gdClass PlaceholderTexture3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture3D().virtual(rtype, name)
}
func (gdClass PlaceholderTexture3D) SetSize(size Vector3i)  { methodCall[struct{}](gdClass.obj.get(), methodPlaceholderTexture3D[0], &size) }
func (gdClass PlaceholderTexture3D) GetSize() Vector3i { return methodCall[Vector3i](gdClass.obj.get(), methodPlaceholderTexture3D[1]) }

type PlaceholderTextureLayered struct{self *PlaceholderTextureLayered; obj safeObject }
func NewPlaceholderTextureLayered(ctx Context, at *PlaceholderTextureLayered) PlaceholderTextureLayered { if at == nil { at = new(PlaceholderTextureLayered) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaceholderTextureLayered) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaceholderTextureLayered) owner() cObject { return gdClass.obj.get() }
func (PlaceholderTextureLayered) class() string { return "PlaceholderTextureLayered\000" }

func (gdClass PlaceholderTextureLayered) TextureLayered() TextureLayered { return TextureLayered{obj:gdClass.obj} }

var methodPlaceholderTextureLayered [3]cMethodBind
func (gdClass PlaceholderTextureLayered) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TextureLayered().virtual(rtype, name)
}
func (gdClass PlaceholderTextureLayered) SetSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodPlaceholderTextureLayered[0], &size) }
func (gdClass PlaceholderTextureLayered) GetSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodPlaceholderTextureLayered[1]) }
func (gdClass PlaceholderTextureLayered) SetLayers(layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodPlaceholderTextureLayered[2], &layers) }

type PlaneMeshOrientation int64

const (
	PlaneMeshFaceX PlaneMeshOrientation = 0
	PlaneMeshFaceY PlaneMeshOrientation = 1
	PlaneMeshFaceZ PlaneMeshOrientation = 2
)

type PlaneMesh struct{self *PlaneMesh; obj safeObject }
func NewPlaneMesh(ctx Context, at *PlaneMesh) PlaneMesh { if at == nil { at = new(PlaneMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PlaneMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PlaneMesh) owner() cObject { return gdClass.obj.get() }
func (PlaneMesh) class() string { return "PlaneMesh\000" }

func (gdClass PlaneMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodPlaneMesh [10]cMethodBind
func (gdClass PlaneMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass PlaneMesh) SetSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPlaneMesh[0], &size) }
func (gdClass PlaneMesh) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPlaneMesh[1]) }
func (gdClass PlaneMesh) SetSubdivideWidth(subdivide int64)  { methodCall[struct{}](gdClass.obj.get(), methodPlaneMesh[2], &subdivide) }
func (gdClass PlaneMesh) GetSubdivideWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodPlaneMesh[3]) }
func (gdClass PlaneMesh) SetSubdivideDepth(subdivide int64)  { methodCall[struct{}](gdClass.obj.get(), methodPlaneMesh[4], &subdivide) }
func (gdClass PlaneMesh) GetSubdivideDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodPlaneMesh[5]) }
func (gdClass PlaneMesh) SetCenterOffset(offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPlaneMesh[6], &offset) }
func (gdClass PlaneMesh) GetCenterOffset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPlaneMesh[7]) }
func (gdClass PlaneMesh) SetOrientation(orientation PlaneMeshOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodPlaneMesh[8], &orientation) }
func (gdClass PlaneMesh) GetOrientation() PlaneMeshOrientation { return methodCall[PlaneMeshOrientation](gdClass.obj.get(), methodPlaneMesh[9]) }

type PointLight2D struct{self *PointLight2D; obj safeObject }
func NewPointLight2D(ctx Context, at *PointLight2D) PointLight2D { if at == nil { at = new(PointLight2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PointLight2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PointLight2D) owner() cObject { return gdClass.obj.get() }
func (PointLight2D) class() string { return "PointLight2D\000" }

func (gdClass PointLight2D) Light2D() Light2D { return Light2D{obj:gdClass.obj} }

var methodPointLight2D [6]cMethodBind
func (gdClass PointLight2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Light2D().virtual(rtype, name)
}
func (gdClass PointLight2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodPointLight2D[0], &texture) }
func (gdClass PointLight2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodPointLight2D[1]) }
func (gdClass PointLight2D) SetTextureOffset(texture_offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPointLight2D[2], &texture_offset) }
func (gdClass PointLight2D) GetTextureOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPointLight2D[3]) }
func (gdClass PointLight2D) SetTextureScale(texture_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodPointLight2D[4], &texture_scale) }
func (gdClass PointLight2D) GetTextureScale() float64 { return methodCall[float64](gdClass.obj.get(), methodPointLight2D[5]) }

type PointMesh struct{self *PointMesh; obj safeObject }
func NewPointMesh(ctx Context, at *PointMesh) PointMesh { if at == nil { at = new(PointMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PointMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PointMesh) owner() cObject { return gdClass.obj.get() }
func (PointMesh) class() string { return "PointMesh\000" }

func (gdClass PointMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

func (gdClass PointMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}

type Polygon2D struct{self *Polygon2D; obj safeObject }
func NewPolygon2D(ctx Context, at *Polygon2D) Polygon2D { if at == nil { at = new(Polygon2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Polygon2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Polygon2D) owner() cObject { return gdClass.obj.get() }
func (Polygon2D) class() string { return "Polygon2D\000" }

func (gdClass Polygon2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodPolygon2D [38]cMethodBind
func (gdClass Polygon2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Polygon2D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[0], &polygon) }
func (gdClass Polygon2D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodPolygon2D[1]) }
func (gdClass Polygon2D) SetUv(uv []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[2], &uv) }
func (gdClass Polygon2D) GetUv() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodPolygon2D[3]) }
func (gdClass Polygon2D) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[4], &color) }
func (gdClass Polygon2D) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodPolygon2D[5]) }
func (gdClass Polygon2D) SetPolygons(polygons Array)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[6], &polygons) }
func (gdClass Polygon2D) GetPolygons() Array { return methodCall[Array](gdClass.obj.get(), methodPolygon2D[7]) }
func (gdClass Polygon2D) SetVertexColors(vertex_colors []Color)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[8], &vertex_colors) }
func (gdClass Polygon2D) GetVertexColors() []Color { return methodCall[[]Color](gdClass.obj.get(), methodPolygon2D[9]) }
func (gdClass Polygon2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[10], &texture) }
func (gdClass Polygon2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodPolygon2D[11]) }
func (gdClass Polygon2D) SetTextureOffset(texture_offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[12], &texture_offset) }
func (gdClass Polygon2D) GetTextureOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPolygon2D[13]) }
func (gdClass Polygon2D) SetTextureRotation(texture_rotation float64)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[14], &texture_rotation) }
func (gdClass Polygon2D) GetTextureRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodPolygon2D[15]) }
func (gdClass Polygon2D) SetTextureScale(texture_scale Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[16], &texture_scale) }
func (gdClass Polygon2D) GetTextureScale() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPolygon2D[17]) }
func (gdClass Polygon2D) SetInvertEnabled(invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[18], &invert) }
func (gdClass Polygon2D) GetInvertEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodPolygon2D[19]) }
func (gdClass Polygon2D) SetAntialiased(antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[20], &antialiased) }
func (gdClass Polygon2D) GetAntialiased() bool { return methodCall[bool](gdClass.obj.get(), methodPolygon2D[21]) }
func (gdClass Polygon2D) SetInvertBorder(invert_border float64)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[22], &invert_border) }
func (gdClass Polygon2D) GetInvertBorder() float64 { return methodCall[float64](gdClass.obj.get(), methodPolygon2D[23]) }
func (gdClass Polygon2D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[24], &offset) }
func (gdClass Polygon2D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPolygon2D[25]) }
func (gdClass Polygon2D) AddBone(path NodePath, weights []float32)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[26], &path, &weights) }
func (gdClass Polygon2D) GetBoneCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPolygon2D[27]) }
func (gdClass Polygon2D) GetBonePath(index int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodPolygon2D[28], &index) }
func (gdClass Polygon2D) GetBoneWeights(index int64) []float32 { return methodCall[[]float32](gdClass.obj.get(), methodPolygon2D[29], &index) }
func (gdClass Polygon2D) EraseBone(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[30], &index) }
func (gdClass Polygon2D) ClearBones()  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[31]) }
func (gdClass Polygon2D) SetBonePath(index int64, path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[32], &index, &path) }
func (gdClass Polygon2D) SetBoneWeights(index int64, weights []float32)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[33], &index, &weights) }
func (gdClass Polygon2D) SetSkeleton(skeleton NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[34], &skeleton) }
func (gdClass Polygon2D) GetSkeleton() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodPolygon2D[35]) }
func (gdClass Polygon2D) SetInternalVertexCount(internal_vertex_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodPolygon2D[36], &internal_vertex_count) }
func (gdClass Polygon2D) GetInternalVertexCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPolygon2D[37]) }

type PolygonOccluder3D struct{self *PolygonOccluder3D; obj safeObject }
func NewPolygonOccluder3D(ctx Context, at *PolygonOccluder3D) PolygonOccluder3D { if at == nil { at = new(PolygonOccluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PolygonOccluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PolygonOccluder3D) owner() cObject { return gdClass.obj.get() }
func (PolygonOccluder3D) class() string { return "PolygonOccluder3D\000" }

func (gdClass PolygonOccluder3D) Occluder3D() Occluder3D { return Occluder3D{obj:gdClass.obj} }

var methodPolygonOccluder3D [2]cMethodBind
func (gdClass PolygonOccluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Occluder3D().virtual(rtype, name)
}
func (gdClass PolygonOccluder3D) SetPolygon(polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPolygonOccluder3D[0], &polygon) }
func (gdClass PolygonOccluder3D) GetPolygon() []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodPolygonOccluder3D[1]) }

type PolygonPathFinder struct{self *PolygonPathFinder; obj safeObject }
func NewPolygonPathFinder(ctx Context, at *PolygonPathFinder) PolygonPathFinder { if at == nil { at = new(PolygonPathFinder) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PolygonPathFinder) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PolygonPathFinder) owner() cObject { return gdClass.obj.get() }
func (PolygonPathFinder) class() string { return "PolygonPathFinder\000" }

func (gdClass PolygonPathFinder) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodPolygonPathFinder [8]cMethodBind
func (gdClass PolygonPathFinder) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass PolygonPathFinder) Setup(points []Vector2, connections []int32)  { methodCall[struct{}](gdClass.obj.get(), methodPolygonPathFinder[0], &points, &connections) }
func (gdClass PolygonPathFinder) FindPath(from Vector2, to Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodPolygonPathFinder[1], &from, &to) }
func (gdClass PolygonPathFinder) GetIntersections(from Vector2, to Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodPolygonPathFinder[2], &from, &to) }
func (gdClass PolygonPathFinder) GetClosestPoint(point Vector2) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPolygonPathFinder[3], &point) }
func (gdClass PolygonPathFinder) IsPointInside(point Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodPolygonPathFinder[4], &point) }
func (gdClass PolygonPathFinder) SetPointPenalty(idx int64, penalty float64)  { methodCall[struct{}](gdClass.obj.get(), methodPolygonPathFinder[5], &idx, &penalty) }
func (gdClass PolygonPathFinder) GetPointPenalty(idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodPolygonPathFinder[6], &idx) }
func (gdClass PolygonPathFinder) GetBounds() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodPolygonPathFinder[7]) }

type Popup struct{self *Popup; obj safeObject }
func NewPopup(ctx Context, at *Popup) Popup { if at == nil { at = new(Popup) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Popup) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Popup) owner() cObject { return gdClass.obj.get() }
func (Popup) class() string { return "Popup\000" }

func (gdClass Popup) Window() Window { return Window{obj:gdClass.obj} }

func (gdClass Popup) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Window().virtual(rtype, name)
}

type PopupMenu struct{self *PopupMenu; obj safeObject }
func NewPopupMenu(ctx Context, at *PopupMenu) PopupMenu { if at == nil { at = new(PopupMenu) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PopupMenu) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PopupMenu) owner() cObject { return gdClass.obj.get() }
func (PopupMenu) class() string { return "PopupMenu\000" }

func (gdClass PopupMenu) Popup() Popup { return Popup{obj:gdClass.obj} }

var methodPopupMenu [70]cMethodBind
func (gdClass PopupMenu) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Popup().virtual(rtype, name)
}
func (gdClass PopupMenu) AddItem(label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[0], &label, &id, &accel) }
func (gdClass PopupMenu) AddIconItem(texture Texture2D, label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[1], &texture, &label, &id, &accel) }
func (gdClass PopupMenu) AddCheckItem(label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[2], &label, &id, &accel) }
func (gdClass PopupMenu) AddIconCheckItem(texture Texture2D, label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[3], &texture, &label, &id, &accel) }
func (gdClass PopupMenu) AddRadioCheckItem(label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[4], &label, &id, &accel) }
func (gdClass PopupMenu) AddIconRadioCheckItem(texture Texture2D, label string, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[5], &texture, &label, &id, &accel) }
func (gdClass PopupMenu) AddMultistateItem(label string, max_states int64, default_state int64, id int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[6], &label, &max_states, &default_state, &id, &accel) }
func (gdClass PopupMenu) AddShortcut(shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[7], &shortcut, &id, &global) }
func (gdClass PopupMenu) AddIconShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[8], &texture, &shortcut, &id, &global) }
func (gdClass PopupMenu) AddCheckShortcut(shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[9], &shortcut, &id, &global) }
func (gdClass PopupMenu) AddIconCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[10], &texture, &shortcut, &id, &global) }
func (gdClass PopupMenu) AddRadioCheckShortcut(shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[11], &shortcut, &id, &global) }
func (gdClass PopupMenu) AddIconRadioCheckShortcut(texture Texture2D, shortcut Shortcut, id int64, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[12], &texture, &shortcut, &id, &global) }
func (gdClass PopupMenu) AddSubmenuItem(label string, submenu string, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[13], &label, &submenu, &id) }
func (gdClass PopupMenu) SetItemText(index int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[14], &index, &text) }
func (gdClass PopupMenu) SetItemTextDirection(index int64, direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[15], &index, &direction) }
func (gdClass PopupMenu) SetItemLanguage(index int64, language string)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[16], &index, &language) }
func (gdClass PopupMenu) SetItemIcon(index int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[17], &index, &icon) }
func (gdClass PopupMenu) SetItemChecked(index int64, checked bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[18], &index, &checked) }
func (gdClass PopupMenu) SetItemId(index int64, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[19], &index, &id) }
func (gdClass PopupMenu) SetItemAccelerator(index int64, accel Key)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[20], &index, &accel) }
func (gdClass PopupMenu) SetItemMetadata(index int64, metadata any)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[21], &index, &metadata) }
func (gdClass PopupMenu) SetItemDisabled(index int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[22], &index, &disabled) }
func (gdClass PopupMenu) SetItemSubmenu(index int64, submenu string)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[23], &index, &submenu) }
func (gdClass PopupMenu) SetItemAsSeparator(index int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[24], &index, &enable) }
func (gdClass PopupMenu) SetItemAsCheckable(index int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[25], &index, &enable) }
func (gdClass PopupMenu) SetItemAsRadioCheckable(index int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[26], &index, &enable) }
func (gdClass PopupMenu) SetItemTooltip(index int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[27], &index, &tooltip) }
func (gdClass PopupMenu) SetItemShortcut(index int64, shortcut Shortcut, global bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[28], &index, &shortcut, &global) }
func (gdClass PopupMenu) SetItemIndent(index int64, indent int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[29], &index, &indent) }
func (gdClass PopupMenu) SetItemMultistate(index int64, state int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[30], &index, &state) }
func (gdClass PopupMenu) SetItemShortcutDisabled(index int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[31], &index, &disabled) }
func (gdClass PopupMenu) ToggleItemChecked(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[32], &index) }
func (gdClass PopupMenu) ToggleItemMultistate(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[33], &index) }
func (gdClass PopupMenu) GetItemText(index int64) string { return methodCall[string](gdClass.obj.get(), methodPopupMenu[34], &index) }
func (gdClass PopupMenu) GetItemTextDirection(index int64) ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodPopupMenu[35], &index) }
func (gdClass PopupMenu) GetItemLanguage(index int64) string { return methodCall[string](gdClass.obj.get(), methodPopupMenu[36], &index) }
func (gdClass PopupMenu) GetItemIcon(index int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodPopupMenu[37], &index) }
func (gdClass PopupMenu) IsItemChecked(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[38], &index) }
func (gdClass PopupMenu) GetItemId(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPopupMenu[39], &index) }
func (gdClass PopupMenu) GetItemIndex(id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPopupMenu[40], &id) }
func (gdClass PopupMenu) GetItemAccelerator(index int64) Key { return methodCall[Key](gdClass.obj.get(), methodPopupMenu[41], &index) }
func (gdClass PopupMenu) GetItemMetadata(index int64) any { return methodCall[any](gdClass.obj.get(), methodPopupMenu[42], &index) }
func (gdClass PopupMenu) IsItemDisabled(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[43], &index) }
func (gdClass PopupMenu) GetItemSubmenu(index int64) string { return methodCall[string](gdClass.obj.get(), methodPopupMenu[44], &index) }
func (gdClass PopupMenu) IsItemSeparator(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[45], &index) }
func (gdClass PopupMenu) IsItemCheckable(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[46], &index) }
func (gdClass PopupMenu) IsItemRadioCheckable(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[47], &index) }
func (gdClass PopupMenu) IsItemShortcutDisabled(index int64) bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[48], &index) }
func (gdClass PopupMenu) GetItemTooltip(index int64) string { return methodCall[string](gdClass.obj.get(), methodPopupMenu[49], &index) }
func (gdClass PopupMenu) GetItemShortcut(index int64) Shortcut { return methodCall[Shortcut](gdClass.obj.get(), methodPopupMenu[50], &index) }
func (gdClass PopupMenu) GetItemIndent(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodPopupMenu[51], &index) }
func (gdClass PopupMenu) SetCurrentIndex(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[52], &index) }
func (gdClass PopupMenu) GetCurrentIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodPopupMenu[53]) }
func (gdClass PopupMenu) SetItemCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[54], &count) }
func (gdClass PopupMenu) GetItemCount() int64 { return methodCall[int64](gdClass.obj.get(), methodPopupMenu[55]) }
func (gdClass PopupMenu) ScrollToItem(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[56], &index) }
func (gdClass PopupMenu) RemoveItem(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[57], &index) }
func (gdClass PopupMenu) AddSeparator(label string, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[58], &label, &id) }
func (gdClass PopupMenu) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[59]) }
func (gdClass PopupMenu) SetHideOnItemSelection(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[60], &enable) }
func (gdClass PopupMenu) IsHideOnItemSelection() bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[61]) }
func (gdClass PopupMenu) SetHideOnCheckableItemSelection(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[62], &enable) }
func (gdClass PopupMenu) IsHideOnCheckableItemSelection() bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[63]) }
func (gdClass PopupMenu) SetHideOnStateItemSelection(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[64], &enable) }
func (gdClass PopupMenu) IsHideOnStateItemSelection() bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[65]) }
func (gdClass PopupMenu) SetSubmenuPopupDelay(seconds float64)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[66], &seconds) }
func (gdClass PopupMenu) GetSubmenuPopupDelay() float64 { return methodCall[float64](gdClass.obj.get(), methodPopupMenu[67]) }
func (gdClass PopupMenu) SetAllowSearch(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodPopupMenu[68], &allow) }
func (gdClass PopupMenu) GetAllowSearch() bool { return methodCall[bool](gdClass.obj.get(), methodPopupMenu[69]) }

type PopupPanel struct{self *PopupPanel; obj safeObject }
func NewPopupPanel(ctx Context, at *PopupPanel) PopupPanel { if at == nil { at = new(PopupPanel) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass PopupPanel) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PopupPanel) owner() cObject { return gdClass.obj.get() }
func (PopupPanel) class() string { return "PopupPanel\000" }

func (gdClass PopupPanel) Popup() Popup { return Popup{obj:gdClass.obj} }

func (gdClass PopupPanel) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Popup().virtual(rtype, name)
}

type PortableCompressedTexture2DCompressionMode int64

const (
	PortableCompressedTexture2DCompressionModeLossless PortableCompressedTexture2DCompressionMode = 0
	PortableCompressedTexture2DCompressionModeLossy PortableCompressedTexture2DCompressionMode = 1
	PortableCompressedTexture2DCompressionModeBasisUniversal PortableCompressedTexture2DCompressionMode = 2
	PortableCompressedTexture2DCompressionModeS3tc PortableCompressedTexture2DCompressionMode = 3
	PortableCompressedTexture2DCompressionModeEtc2 PortableCompressedTexture2DCompressionMode = 4
	PortableCompressedTexture2DCompressionModeBptc PortableCompressedTexture2DCompressionMode = 5
)

type PortableCompressedTexture2D struct{self *PortableCompressedTexture2D; obj safeObject }
func NewPortableCompressedTexture2D(ctx Context, at *PortableCompressedTexture2D) PortableCompressedTexture2D { if at == nil { at = new(PortableCompressedTexture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PortableCompressedTexture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PortableCompressedTexture2D) owner() cObject { return gdClass.obj.get() }
func (PortableCompressedTexture2D) class() string { return "PortableCompressedTexture2D\000" }

func (gdClass PortableCompressedTexture2D) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodPortableCompressedTexture2D [9]cMethodBind
func (gdClass PortableCompressedTexture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass PortableCompressedTexture2D) CreateFromImage(image Image, compression_mode PortableCompressedTexture2DCompressionMode, normal_map bool, lossy_quality float64)  { methodCall[struct{}](gdClass.obj.get(), methodPortableCompressedTexture2D[0], &image, &compression_mode, &normal_map, &lossy_quality) }
func (gdClass PortableCompressedTexture2D) GetFormat() ImageFormat { return methodCall[ImageFormat](gdClass.obj.get(), methodPortableCompressedTexture2D[1]) }
func (gdClass PortableCompressedTexture2D) GetCompressionMode() PortableCompressedTexture2DCompressionMode { return methodCall[PortableCompressedTexture2DCompressionMode](gdClass.obj.get(), methodPortableCompressedTexture2D[2]) }
func (gdClass PortableCompressedTexture2D) SetSizeOverride(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodPortableCompressedTexture2D[3], &size) }
func (gdClass PortableCompressedTexture2D) GetSizeOverride() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodPortableCompressedTexture2D[4]) }
func (gdClass PortableCompressedTexture2D) SetKeepCompressedBuffer(keep bool)  { methodCall[struct{}](gdClass.obj.get(), methodPortableCompressedTexture2D[5], &keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingCompressedBuffer() bool { return methodCall[bool](gdClass.obj.get(), methodPortableCompressedTexture2D[6]) }
func (gdClass PortableCompressedTexture2D) SetKeepAllCompressedBuffers(keep bool)  { methodCall[struct{}](gdClass.obj.get(), methodPortableCompressedTexture2D[7], &keep) }
func (gdClass PortableCompressedTexture2D) IsKeepingAllCompressedBuffers() bool { return methodCall[bool](gdClass.obj.get(), methodPortableCompressedTexture2D[8]) }

type PrimitiveMesh struct{self *PrimitiveMesh; obj safeObject }
func NewPrimitiveMesh(ctx Context, at *PrimitiveMesh) PrimitiveMesh { if at == nil { at = new(PrimitiveMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PrimitiveMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PrimitiveMesh) owner() cObject { return gdClass.obj.get() }
func (PrimitiveMesh) class() string { return "PrimitiveMesh\000" }

func (gdClass PrimitiveMesh) Mesh() Mesh { return Mesh{obj:gdClass.obj} }

var methodPrimitiveMesh [7]cMethodBind
func (gdClass PrimitiveMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_create_mesh_array":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateMeshArray() Array }{}).Elem()) {
			return rtype.MethodByName(`CreateMeshArray`)
		}
		return
	}
	return gdClass.Mesh().virtual(rtype, name)
}
func (gdClass PrimitiveMesh) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodPrimitiveMesh[0], &material) }
func (gdClass PrimitiveMesh) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodPrimitiveMesh[1]) }
func (gdClass PrimitiveMesh) GetMeshArrays() Array { return methodCall[Array](gdClass.obj.get(), methodPrimitiveMesh[2]) }
func (gdClass PrimitiveMesh) SetCustomAabb(aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodPrimitiveMesh[3], &aabb) }
func (gdClass PrimitiveMesh) GetCustomAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodPrimitiveMesh[4]) }
func (gdClass PrimitiveMesh) SetFlipFaces(flip_faces bool)  { methodCall[struct{}](gdClass.obj.get(), methodPrimitiveMesh[5], &flip_faces) }
func (gdClass PrimitiveMesh) GetFlipFaces() bool { return methodCall[bool](gdClass.obj.get(), methodPrimitiveMesh[6]) }

type PrismMesh struct{self *PrismMesh; obj safeObject }
func NewPrismMesh(ctx Context, at *PrismMesh) PrismMesh { if at == nil { at = new(PrismMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PrismMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PrismMesh) owner() cObject { return gdClass.obj.get() }
func (PrismMesh) class() string { return "PrismMesh\000" }

func (gdClass PrismMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodPrismMesh [10]cMethodBind
func (gdClass PrismMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass PrismMesh) SetLeftToRight(left_to_right float64)  { methodCall[struct{}](gdClass.obj.get(), methodPrismMesh[0], &left_to_right) }
func (gdClass PrismMesh) GetLeftToRight() float64 { return methodCall[float64](gdClass.obj.get(), methodPrismMesh[1]) }
func (gdClass PrismMesh) SetSize(size Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodPrismMesh[2], &size) }
func (gdClass PrismMesh) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodPrismMesh[3]) }
func (gdClass PrismMesh) SetSubdivideWidth(segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodPrismMesh[4], &segments) }
func (gdClass PrismMesh) GetSubdivideWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodPrismMesh[5]) }
func (gdClass PrismMesh) SetSubdivideHeight(segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodPrismMesh[6], &segments) }
func (gdClass PrismMesh) GetSubdivideHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodPrismMesh[7]) }
func (gdClass PrismMesh) SetSubdivideDepth(segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodPrismMesh[8], &segments) }
func (gdClass PrismMesh) GetSubdivideDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodPrismMesh[9]) }

type ProceduralSkyMaterial struct{self *ProceduralSkyMaterial; obj safeObject }
func NewProceduralSkyMaterial(ctx Context, at *ProceduralSkyMaterial) ProceduralSkyMaterial { if at == nil { at = new(ProceduralSkyMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ProceduralSkyMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ProceduralSkyMaterial) owner() cObject { return gdClass.obj.get() }
func (ProceduralSkyMaterial) class() string { return "ProceduralSkyMaterial\000" }

func (gdClass ProceduralSkyMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodProceduralSkyMaterial [26]cMethodBind
func (gdClass ProceduralSkyMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass ProceduralSkyMaterial) SetSkyTopColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[0], &color) }
func (gdClass ProceduralSkyMaterial) GetSkyTopColor() Color { return methodCall[Color](gdClass.obj.get(), methodProceduralSkyMaterial[1]) }
func (gdClass ProceduralSkyMaterial) SetSkyHorizonColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[2], &color) }
func (gdClass ProceduralSkyMaterial) GetSkyHorizonColor() Color { return methodCall[Color](gdClass.obj.get(), methodProceduralSkyMaterial[3]) }
func (gdClass ProceduralSkyMaterial) SetSkyCurve(curve float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[4], &curve) }
func (gdClass ProceduralSkyMaterial) GetSkyCurve() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[5]) }
func (gdClass ProceduralSkyMaterial) SetSkyEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[6], &energy) }
func (gdClass ProceduralSkyMaterial) GetSkyEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[7]) }
func (gdClass ProceduralSkyMaterial) SetSkyCover(sky_cover Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[8], &sky_cover) }
func (gdClass ProceduralSkyMaterial) GetSkyCover() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodProceduralSkyMaterial[9]) }
func (gdClass ProceduralSkyMaterial) SetSkyCoverModulate(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[10], &color) }
func (gdClass ProceduralSkyMaterial) GetSkyCoverModulate() Color { return methodCall[Color](gdClass.obj.get(), methodProceduralSkyMaterial[11]) }
func (gdClass ProceduralSkyMaterial) SetGroundBottomColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[12], &color) }
func (gdClass ProceduralSkyMaterial) GetGroundBottomColor() Color { return methodCall[Color](gdClass.obj.get(), methodProceduralSkyMaterial[13]) }
func (gdClass ProceduralSkyMaterial) SetGroundHorizonColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[14], &color) }
func (gdClass ProceduralSkyMaterial) GetGroundHorizonColor() Color { return methodCall[Color](gdClass.obj.get(), methodProceduralSkyMaterial[15]) }
func (gdClass ProceduralSkyMaterial) SetGroundCurve(curve float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[16], &curve) }
func (gdClass ProceduralSkyMaterial) GetGroundCurve() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[17]) }
func (gdClass ProceduralSkyMaterial) SetGroundEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[18], &energy) }
func (gdClass ProceduralSkyMaterial) GetGroundEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[19]) }
func (gdClass ProceduralSkyMaterial) SetSunAngleMax(degrees float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[20], &degrees) }
func (gdClass ProceduralSkyMaterial) GetSunAngleMax() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[21]) }
func (gdClass ProceduralSkyMaterial) SetSunCurve(curve float64)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[22], &curve) }
func (gdClass ProceduralSkyMaterial) GetSunCurve() float64 { return methodCall[float64](gdClass.obj.get(), methodProceduralSkyMaterial[23]) }
func (gdClass ProceduralSkyMaterial) SetUseDebanding(use_debanding bool)  { methodCall[struct{}](gdClass.obj.get(), methodProceduralSkyMaterial[24], &use_debanding) }
func (gdClass ProceduralSkyMaterial) GetUseDebanding() bool { return methodCall[bool](gdClass.obj.get(), methodProceduralSkyMaterial[25]) }

type ProgressBarFillMode int64

const (
	ProgressBarFillBeginToEnd ProgressBarFillMode = 0
	ProgressBarFillEndToBegin ProgressBarFillMode = 1
	ProgressBarFillTopToBottom ProgressBarFillMode = 2
	ProgressBarFillBottomToTop ProgressBarFillMode = 3
)

type ProgressBar struct{self *ProgressBar; obj safeObject }
func NewProgressBar(ctx Context, at *ProgressBar) ProgressBar { if at == nil { at = new(ProgressBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ProgressBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ProgressBar) owner() cObject { return gdClass.obj.get() }
func (ProgressBar) class() string { return "ProgressBar\000" }

func (gdClass ProgressBar) Range() Range { return Range{obj:gdClass.obj} }

var methodProgressBar [4]cMethodBind
func (gdClass ProgressBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass ProgressBar) SetFillMode(mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodProgressBar[0], &mode) }
func (gdClass ProgressBar) GetFillMode() int64 { return methodCall[int64](gdClass.obj.get(), methodProgressBar[1]) }
func (gdClass ProgressBar) SetPercentVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodProgressBar[2], &visible) }
func (gdClass ProgressBar) IsPercentVisible() bool { return methodCall[bool](gdClass.obj.get(), methodProgressBar[3]) }
var ProjectSettings ProjectSettingsSingleton

type ProjectSettingsSingleton struct{self *ProjectSettingsSingleton; obj safeObject }
func NewProjectSettingsSingleton(ctx Context, at *ProjectSettingsSingleton) ProjectSettingsSingleton { if at == nil { at = new(ProjectSettingsSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ProjectSettingsSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ProjectSettingsSingleton) owner() cObject { return gdClass.obj.get() }
func (ProjectSettingsSingleton) class() string { return "ProjectSettingsSingleton\000" }

func (gdClass ProjectSettingsSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodProjectSettingsSingleton [13]cMethodBind
func (gdClass ProjectSettingsSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass ProjectSettingsSingleton) HasSetting(name string) bool { return methodCall[bool](gdClass.obj.get(), methodProjectSettingsSingleton[0], &name) }
func (gdClass ProjectSettingsSingleton) SetSetting(name string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodProjectSettingsSingleton[1], &name, &value) }
func (gdClass ProjectSettingsSingleton) GetSetting(name string) any { return methodCall[any](gdClass.obj.get(), methodProjectSettingsSingleton[2], &name) }
func (gdClass ProjectSettingsSingleton) SetOrder(name string, position int64)  { methodCall[struct{}](gdClass.obj.get(), methodProjectSettingsSingleton[3], &name, &position) }
func (gdClass ProjectSettingsSingleton) GetOrder(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodProjectSettingsSingleton[4], &name) }
func (gdClass ProjectSettingsSingleton) SetInitialValue(name string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodProjectSettingsSingleton[5], &name, &value) }
func (gdClass ProjectSettingsSingleton) AddPropertyInfo(hint Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodProjectSettingsSingleton[6], &hint) }
func (gdClass ProjectSettingsSingleton) Clear(name string)  { methodCall[struct{}](gdClass.obj.get(), methodProjectSettingsSingleton[7], &name) }
func (gdClass ProjectSettingsSingleton) LocalizePath(path string) string { return methodCall[string](gdClass.obj.get(), methodProjectSettingsSingleton[8], &path) }
func (gdClass ProjectSettingsSingleton) GlobalizePath(path string) string { return methodCall[string](gdClass.obj.get(), methodProjectSettingsSingleton[9], &path) }
func (gdClass ProjectSettingsSingleton) Save() int64 { return methodCall[int64](gdClass.obj.get(), methodProjectSettingsSingleton[10]) }
func (gdClass ProjectSettingsSingleton) LoadResourcePack(pack string, replace_files bool, offset int64) bool { return methodCall[bool](gdClass.obj.get(), methodProjectSettingsSingleton[11], &pack, &replace_files, &offset) }
func (gdClass ProjectSettingsSingleton) SaveCustom(file string) int64 { return methodCall[int64](gdClass.obj.get(), methodProjectSettingsSingleton[12], &file) }

type PropertyTweener struct{self *PropertyTweener; obj safeObject }
func NewPropertyTweener(ctx Context, at *PropertyTweener) PropertyTweener { if at == nil { at = new(PropertyTweener) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass PropertyTweener) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass PropertyTweener) owner() cObject { return gdClass.obj.get() }
func (PropertyTweener) class() string { return "PropertyTweener\000" }

func (gdClass PropertyTweener) Tweener() Tweener { return Tweener{obj:gdClass.obj} }

var methodPropertyTweener [6]cMethodBind
func (gdClass PropertyTweener) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Tweener().virtual(rtype, name)
}
func (gdClass PropertyTweener) From(value any) PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[0], &value) }
func (gdClass PropertyTweener) FromCurrent() PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[1]) }
func (gdClass PropertyTweener) AsRelative() PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[2]) }
func (gdClass PropertyTweener) SetTrans(trans TweenTransitionType) PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[3], &trans) }
func (gdClass PropertyTweener) SetEase(ease TweenEaseType) PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[4], &ease) }
func (gdClass PropertyTweener) SetDelay(delay float64) PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodPropertyTweener[5], &delay) }

type QuadOccluder3D struct{self *QuadOccluder3D; obj safeObject }
func NewQuadOccluder3D(ctx Context, at *QuadOccluder3D) QuadOccluder3D { if at == nil { at = new(QuadOccluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass QuadOccluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass QuadOccluder3D) owner() cObject { return gdClass.obj.get() }
func (QuadOccluder3D) class() string { return "QuadOccluder3D\000" }

func (gdClass QuadOccluder3D) Occluder3D() Occluder3D { return Occluder3D{obj:gdClass.obj} }

var methodQuadOccluder3D [2]cMethodBind
func (gdClass QuadOccluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Occluder3D().virtual(rtype, name)
}
func (gdClass QuadOccluder3D) SetSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodQuadOccluder3D[0], &size) }
func (gdClass QuadOccluder3D) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodQuadOccluder3D[1]) }

type RDAttachmentFormat struct{self *RDAttachmentFormat; obj safeObject }
func NewRDAttachmentFormat(ctx Context, at *RDAttachmentFormat) RDAttachmentFormat { if at == nil { at = new(RDAttachmentFormat) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDAttachmentFormat) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDAttachmentFormat) owner() cObject { return gdClass.obj.get() }
func (RDAttachmentFormat) class() string { return "RDAttachmentFormat\000" }

func (gdClass RDAttachmentFormat) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDAttachmentFormat [6]cMethodBind
func (gdClass RDAttachmentFormat) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDAttachmentFormat) SetFormat(p_member RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDAttachmentFormat[0], &p_member) }
func (gdClass RDAttachmentFormat) GetFormat() RenderingDeviceDataFormat { return methodCall[RenderingDeviceDataFormat](gdClass.obj.get(), methodRDAttachmentFormat[1]) }
func (gdClass RDAttachmentFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { methodCall[struct{}](gdClass.obj.get(), methodRDAttachmentFormat[2], &p_member) }
func (gdClass RDAttachmentFormat) GetSamples() RenderingDeviceTextureSamples { return methodCall[RenderingDeviceTextureSamples](gdClass.obj.get(), methodRDAttachmentFormat[3]) }
func (gdClass RDAttachmentFormat) SetUsageFlags(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDAttachmentFormat[4], &p_member) }
func (gdClass RDAttachmentFormat) GetUsageFlags() int64 { return methodCall[int64](gdClass.obj.get(), methodRDAttachmentFormat[5]) }

type RDFramebufferPass struct{self *RDFramebufferPass; obj safeObject }
func NewRDFramebufferPass(ctx Context, at *RDFramebufferPass) RDFramebufferPass { if at == nil { at = new(RDFramebufferPass) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDFramebufferPass) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDFramebufferPass) owner() cObject { return gdClass.obj.get() }
func (RDFramebufferPass) class() string { return "RDFramebufferPass\000" }

func (gdClass RDFramebufferPass) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDFramebufferPass [10]cMethodBind
func (gdClass RDFramebufferPass) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDFramebufferPass) SetColorAttachments(p_member []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRDFramebufferPass[0], &p_member) }
func (gdClass RDFramebufferPass) GetColorAttachments() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRDFramebufferPass[1]) }
func (gdClass RDFramebufferPass) SetInputAttachments(p_member []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRDFramebufferPass[2], &p_member) }
func (gdClass RDFramebufferPass) GetInputAttachments() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRDFramebufferPass[3]) }
func (gdClass RDFramebufferPass) SetResolveAttachments(p_member []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRDFramebufferPass[4], &p_member) }
func (gdClass RDFramebufferPass) GetResolveAttachments() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRDFramebufferPass[5]) }
func (gdClass RDFramebufferPass) SetPreserveAttachments(p_member []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRDFramebufferPass[6], &p_member) }
func (gdClass RDFramebufferPass) GetPreserveAttachments() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRDFramebufferPass[7]) }
func (gdClass RDFramebufferPass) SetDepthAttachment(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDFramebufferPass[8], &p_member) }
func (gdClass RDFramebufferPass) GetDepthAttachment() int64 { return methodCall[int64](gdClass.obj.get(), methodRDFramebufferPass[9]) }

type RDPipelineColorBlendState struct{self *RDPipelineColorBlendState; obj safeObject }
func NewRDPipelineColorBlendState(ctx Context, at *RDPipelineColorBlendState) RDPipelineColorBlendState { if at == nil { at = new(RDPipelineColorBlendState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineColorBlendState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineColorBlendState) owner() cObject { return gdClass.obj.get() }
func (RDPipelineColorBlendState) class() string { return "RDPipelineColorBlendState\000" }

func (gdClass RDPipelineColorBlendState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineColorBlendState [8]cMethodBind
func (gdClass RDPipelineColorBlendState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineColorBlendState) SetEnableLogicOp(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendState[0], &p_member) }
func (gdClass RDPipelineColorBlendState) GetEnableLogicOp() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendState[1]) }
func (gdClass RDPipelineColorBlendState) SetLogicOp(p_member RenderingDeviceLogicOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendState[2], &p_member) }
func (gdClass RDPipelineColorBlendState) GetLogicOp() RenderingDeviceLogicOperation { return methodCall[RenderingDeviceLogicOperation](gdClass.obj.get(), methodRDPipelineColorBlendState[3]) }
func (gdClass RDPipelineColorBlendState) SetBlendConstant(p_member Color)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendState[4], &p_member) }
func (gdClass RDPipelineColorBlendState) GetBlendConstant() Color { return methodCall[Color](gdClass.obj.get(), methodRDPipelineColorBlendState[5]) }
func (gdClass RDPipelineColorBlendState) SetAttachments(attachments Array)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendState[6], &attachments) }
func (gdClass RDPipelineColorBlendState) GetAttachments() Array { return methodCall[Array](gdClass.obj.get(), methodRDPipelineColorBlendState[7]) }

type RDPipelineColorBlendStateAttachment struct{self *RDPipelineColorBlendStateAttachment; obj safeObject }
func NewRDPipelineColorBlendStateAttachment(ctx Context, at *RDPipelineColorBlendStateAttachment) RDPipelineColorBlendStateAttachment { if at == nil { at = new(RDPipelineColorBlendStateAttachment) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineColorBlendStateAttachment) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineColorBlendStateAttachment) owner() cObject { return gdClass.obj.get() }
func (RDPipelineColorBlendStateAttachment) class() string { return "RDPipelineColorBlendStateAttachment\000" }

func (gdClass RDPipelineColorBlendStateAttachment) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineColorBlendStateAttachment [23]cMethodBind
func (gdClass RDPipelineColorBlendStateAttachment) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineColorBlendStateAttachment) SetAsMix()  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[0]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetEnableBlend(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[1], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetEnableBlend() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[2]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcColorBlendFactor(p_member RenderingDeviceBlendFactor)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[3], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcColorBlendFactor() RenderingDeviceBlendFactor { return methodCall[RenderingDeviceBlendFactor](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[4]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstColorBlendFactor(p_member RenderingDeviceBlendFactor)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[5], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstColorBlendFactor() RenderingDeviceBlendFactor { return methodCall[RenderingDeviceBlendFactor](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[6]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetColorBlendOp(p_member RenderingDeviceBlendOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[7], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetColorBlendOp() RenderingDeviceBlendOperation { return methodCall[RenderingDeviceBlendOperation](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[8]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetSrcAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[9], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetSrcAlphaBlendFactor() RenderingDeviceBlendFactor { return methodCall[RenderingDeviceBlendFactor](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[10]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetDstAlphaBlendFactor(p_member RenderingDeviceBlendFactor)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[11], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetDstAlphaBlendFactor() RenderingDeviceBlendFactor { return methodCall[RenderingDeviceBlendFactor](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[12]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetAlphaBlendOp(p_member RenderingDeviceBlendOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[13], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetAlphaBlendOp() RenderingDeviceBlendOperation { return methodCall[RenderingDeviceBlendOperation](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[14]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteR(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[15], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteR() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[16]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteG(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[17], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteG() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[18]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteB(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[19], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteB() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[20]) }
func (gdClass RDPipelineColorBlendStateAttachment) SetWriteA(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[21], &p_member) }
func (gdClass RDPipelineColorBlendStateAttachment) GetWriteA() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineColorBlendStateAttachment[22]) }

type RDPipelineDepthStencilState struct{self *RDPipelineDepthStencilState; obj safeObject }
func NewRDPipelineDepthStencilState(ctx Context, at *RDPipelineDepthStencilState) RDPipelineDepthStencilState { if at == nil { at = new(RDPipelineDepthStencilState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineDepthStencilState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineDepthStencilState) owner() cObject { return gdClass.obj.get() }
func (RDPipelineDepthStencilState) class() string { return "RDPipelineDepthStencilState\000" }

func (gdClass RDPipelineDepthStencilState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineDepthStencilState [42]cMethodBind
func (gdClass RDPipelineDepthStencilState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineDepthStencilState) SetEnableDepthTest(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[0], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthTest() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineDepthStencilState[1]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthWrite(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[2], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthWrite() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineDepthStencilState[3]) }
func (gdClass RDPipelineDepthStencilState) SetDepthCompareOperator(p_member RenderingDeviceCompareOperator)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[4], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthCompareOperator() RenderingDeviceCompareOperator { return methodCall[RenderingDeviceCompareOperator](gdClass.obj.get(), methodRDPipelineDepthStencilState[5]) }
func (gdClass RDPipelineDepthStencilState) SetEnableDepthRange(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[6], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableDepthRange() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineDepthStencilState[7]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMin(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[8], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMin() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineDepthStencilState[9]) }
func (gdClass RDPipelineDepthStencilState) SetDepthRangeMax(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[10], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetDepthRangeMax() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineDepthStencilState[11]) }
func (gdClass RDPipelineDepthStencilState) SetEnableStencil(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[12], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetEnableStencil() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineDepthStencilState[13]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpFail(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[14], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpFail() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[15]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpPass(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[16], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpPass() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[17]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpDepthFail(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[18], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpDepthFail() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[19]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompare(p_member RenderingDeviceCompareOperator)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[20], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompare() RenderingDeviceCompareOperator { return methodCall[RenderingDeviceCompareOperator](gdClass.obj.get(), methodRDPipelineDepthStencilState[21]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpCompareMask(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[22], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpCompareMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[23]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpWriteMask(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[24], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpWriteMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[25]) }
func (gdClass RDPipelineDepthStencilState) SetFrontOpReference(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[26], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetFrontOpReference() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[27]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpFail(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[28], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpFail() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[29]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpPass(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[30], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpPass() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[31]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpDepthFail(p_member RenderingDeviceStencilOperation)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[32], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpDepthFail() RenderingDeviceStencilOperation { return methodCall[RenderingDeviceStencilOperation](gdClass.obj.get(), methodRDPipelineDepthStencilState[33]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompare(p_member RenderingDeviceCompareOperator)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[34], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompare() RenderingDeviceCompareOperator { return methodCall[RenderingDeviceCompareOperator](gdClass.obj.get(), methodRDPipelineDepthStencilState[35]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpCompareMask(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[36], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpCompareMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[37]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpWriteMask(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[38], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpWriteMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[39]) }
func (gdClass RDPipelineDepthStencilState) SetBackOpReference(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineDepthStencilState[40], &p_member) }
func (gdClass RDPipelineDepthStencilState) GetBackOpReference() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineDepthStencilState[41]) }

type RDPipelineMultisampleState struct{self *RDPipelineMultisampleState; obj safeObject }
func NewRDPipelineMultisampleState(ctx Context, at *RDPipelineMultisampleState) RDPipelineMultisampleState { if at == nil { at = new(RDPipelineMultisampleState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineMultisampleState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineMultisampleState) owner() cObject { return gdClass.obj.get() }
func (RDPipelineMultisampleState) class() string { return "RDPipelineMultisampleState\000" }

func (gdClass RDPipelineMultisampleState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineMultisampleState [12]cMethodBind
func (gdClass RDPipelineMultisampleState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineMultisampleState) SetSampleCount(p_member RenderingDeviceTextureSamples)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[0], &p_member) }
func (gdClass RDPipelineMultisampleState) GetSampleCount() RenderingDeviceTextureSamples { return methodCall[RenderingDeviceTextureSamples](gdClass.obj.get(), methodRDPipelineMultisampleState[1]) }
func (gdClass RDPipelineMultisampleState) SetEnableSampleShading(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[2], &p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableSampleShading() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineMultisampleState[3]) }
func (gdClass RDPipelineMultisampleState) SetMinSampleShading(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[4], &p_member) }
func (gdClass RDPipelineMultisampleState) GetMinSampleShading() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineMultisampleState[5]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToCoverage(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[6], &p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToCoverage() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineMultisampleState[7]) }
func (gdClass RDPipelineMultisampleState) SetEnableAlphaToOne(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[8], &p_member) }
func (gdClass RDPipelineMultisampleState) GetEnableAlphaToOne() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineMultisampleState[9]) }
func (gdClass RDPipelineMultisampleState) SetSampleMasks(masks Array)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineMultisampleState[10], &masks) }
func (gdClass RDPipelineMultisampleState) GetSampleMasks() Array { return methodCall[Array](gdClass.obj.get(), methodRDPipelineMultisampleState[11]) }

type RDPipelineRasterizationState struct{self *RDPipelineRasterizationState; obj safeObject }
func NewRDPipelineRasterizationState(ctx Context, at *RDPipelineRasterizationState) RDPipelineRasterizationState { if at == nil { at = new(RDPipelineRasterizationState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineRasterizationState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineRasterizationState) owner() cObject { return gdClass.obj.get() }
func (RDPipelineRasterizationState) class() string { return "RDPipelineRasterizationState\000" }

func (gdClass RDPipelineRasterizationState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineRasterizationState [22]cMethodBind
func (gdClass RDPipelineRasterizationState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineRasterizationState) SetEnableDepthClamp(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[0], &p_member) }
func (gdClass RDPipelineRasterizationState) GetEnableDepthClamp() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineRasterizationState[1]) }
func (gdClass RDPipelineRasterizationState) SetDiscardPrimitives(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[2], &p_member) }
func (gdClass RDPipelineRasterizationState) GetDiscardPrimitives() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineRasterizationState[3]) }
func (gdClass RDPipelineRasterizationState) SetWireframe(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[4], &p_member) }
func (gdClass RDPipelineRasterizationState) GetWireframe() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineRasterizationState[5]) }
func (gdClass RDPipelineRasterizationState) SetCullMode(p_member RenderingDevicePolygonCullMode)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[6], &p_member) }
func (gdClass RDPipelineRasterizationState) GetCullMode() RenderingDevicePolygonCullMode { return methodCall[RenderingDevicePolygonCullMode](gdClass.obj.get(), methodRDPipelineRasterizationState[7]) }
func (gdClass RDPipelineRasterizationState) SetFrontFace(p_member RenderingDevicePolygonFrontFace)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[8], &p_member) }
func (gdClass RDPipelineRasterizationState) GetFrontFace() RenderingDevicePolygonFrontFace { return methodCall[RenderingDevicePolygonFrontFace](gdClass.obj.get(), methodRDPipelineRasterizationState[9]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasEnable(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[10], &p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasEnable() bool { return methodCall[bool](gdClass.obj.get(), methodRDPipelineRasterizationState[11]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasConstantFactor(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[12], &p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasConstantFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineRasterizationState[13]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasClamp(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[14], &p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasClamp() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineRasterizationState[15]) }
func (gdClass RDPipelineRasterizationState) SetDepthBiasSlopeFactor(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[16], &p_member) }
func (gdClass RDPipelineRasterizationState) GetDepthBiasSlopeFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineRasterizationState[17]) }
func (gdClass RDPipelineRasterizationState) SetLineWidth(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[18], &p_member) }
func (gdClass RDPipelineRasterizationState) GetLineWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodRDPipelineRasterizationState[19]) }
func (gdClass RDPipelineRasterizationState) SetPatchControlPoints(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineRasterizationState[20], &p_member) }
func (gdClass RDPipelineRasterizationState) GetPatchControlPoints() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineRasterizationState[21]) }

type RDPipelineSpecializationConstant struct{self *RDPipelineSpecializationConstant; obj safeObject }
func NewRDPipelineSpecializationConstant(ctx Context, at *RDPipelineSpecializationConstant) RDPipelineSpecializationConstant { if at == nil { at = new(RDPipelineSpecializationConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDPipelineSpecializationConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDPipelineSpecializationConstant) owner() cObject { return gdClass.obj.get() }
func (RDPipelineSpecializationConstant) class() string { return "RDPipelineSpecializationConstant\000" }

func (gdClass RDPipelineSpecializationConstant) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDPipelineSpecializationConstant [4]cMethodBind
func (gdClass RDPipelineSpecializationConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDPipelineSpecializationConstant) SetValue(value any)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineSpecializationConstant[0], &value) }
func (gdClass RDPipelineSpecializationConstant) GetValue() any { return methodCall[any](gdClass.obj.get(), methodRDPipelineSpecializationConstant[1]) }
func (gdClass RDPipelineSpecializationConstant) SetConstantId(constant_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDPipelineSpecializationConstant[2], &constant_id) }
func (gdClass RDPipelineSpecializationConstant) GetConstantId() int64 { return methodCall[int64](gdClass.obj.get(), methodRDPipelineSpecializationConstant[3]) }

type RDSamplerState struct{self *RDSamplerState; obj safeObject }
func NewRDSamplerState(ctx Context, at *RDSamplerState) RDSamplerState { if at == nil { at = new(RDSamplerState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDSamplerState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDSamplerState) owner() cObject { return gdClass.obj.get() }
func (RDSamplerState) class() string { return "RDSamplerState\000" }

func (gdClass RDSamplerState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDSamplerState [30]cMethodBind
func (gdClass RDSamplerState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDSamplerState) SetMagFilter(p_member RenderingDeviceSamplerFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[0], &p_member) }
func (gdClass RDSamplerState) GetMagFilter() RenderingDeviceSamplerFilter { return methodCall[RenderingDeviceSamplerFilter](gdClass.obj.get(), methodRDSamplerState[1]) }
func (gdClass RDSamplerState) SetMinFilter(p_member RenderingDeviceSamplerFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[2], &p_member) }
func (gdClass RDSamplerState) GetMinFilter() RenderingDeviceSamplerFilter { return methodCall[RenderingDeviceSamplerFilter](gdClass.obj.get(), methodRDSamplerState[3]) }
func (gdClass RDSamplerState) SetMipFilter(p_member RenderingDeviceSamplerFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[4], &p_member) }
func (gdClass RDSamplerState) GetMipFilter() RenderingDeviceSamplerFilter { return methodCall[RenderingDeviceSamplerFilter](gdClass.obj.get(), methodRDSamplerState[5]) }
func (gdClass RDSamplerState) SetRepeatU(p_member RenderingDeviceSamplerRepeatMode)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[6], &p_member) }
func (gdClass RDSamplerState) GetRepeatU() RenderingDeviceSamplerRepeatMode { return methodCall[RenderingDeviceSamplerRepeatMode](gdClass.obj.get(), methodRDSamplerState[7]) }
func (gdClass RDSamplerState) SetRepeatV(p_member RenderingDeviceSamplerRepeatMode)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[8], &p_member) }
func (gdClass RDSamplerState) GetRepeatV() RenderingDeviceSamplerRepeatMode { return methodCall[RenderingDeviceSamplerRepeatMode](gdClass.obj.get(), methodRDSamplerState[9]) }
func (gdClass RDSamplerState) SetRepeatW(p_member RenderingDeviceSamplerRepeatMode)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[10], &p_member) }
func (gdClass RDSamplerState) GetRepeatW() RenderingDeviceSamplerRepeatMode { return methodCall[RenderingDeviceSamplerRepeatMode](gdClass.obj.get(), methodRDSamplerState[11]) }
func (gdClass RDSamplerState) SetLodBias(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[12], &p_member) }
func (gdClass RDSamplerState) GetLodBias() float64 { return methodCall[float64](gdClass.obj.get(), methodRDSamplerState[13]) }
func (gdClass RDSamplerState) SetUseAnisotropy(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[14], &p_member) }
func (gdClass RDSamplerState) GetUseAnisotropy() bool { return methodCall[bool](gdClass.obj.get(), methodRDSamplerState[15]) }
func (gdClass RDSamplerState) SetAnisotropyMax(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[16], &p_member) }
func (gdClass RDSamplerState) GetAnisotropyMax() float64 { return methodCall[float64](gdClass.obj.get(), methodRDSamplerState[17]) }
func (gdClass RDSamplerState) SetEnableCompare(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[18], &p_member) }
func (gdClass RDSamplerState) GetEnableCompare() bool { return methodCall[bool](gdClass.obj.get(), methodRDSamplerState[19]) }
func (gdClass RDSamplerState) SetCompareOp(p_member RenderingDeviceCompareOperator)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[20], &p_member) }
func (gdClass RDSamplerState) GetCompareOp() RenderingDeviceCompareOperator { return methodCall[RenderingDeviceCompareOperator](gdClass.obj.get(), methodRDSamplerState[21]) }
func (gdClass RDSamplerState) SetMinLod(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[22], &p_member) }
func (gdClass RDSamplerState) GetMinLod() float64 { return methodCall[float64](gdClass.obj.get(), methodRDSamplerState[23]) }
func (gdClass RDSamplerState) SetMaxLod(p_member float64)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[24], &p_member) }
func (gdClass RDSamplerState) GetMaxLod() float64 { return methodCall[float64](gdClass.obj.get(), methodRDSamplerState[25]) }
func (gdClass RDSamplerState) SetBorderColor(p_member RenderingDeviceSamplerBorderColor)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[26], &p_member) }
func (gdClass RDSamplerState) GetBorderColor() RenderingDeviceSamplerBorderColor { return methodCall[RenderingDeviceSamplerBorderColor](gdClass.obj.get(), methodRDSamplerState[27]) }
func (gdClass RDSamplerState) SetUnnormalizedUvw(p_member bool)  { methodCall[struct{}](gdClass.obj.get(), methodRDSamplerState[28], &p_member) }
func (gdClass RDSamplerState) GetUnnormalizedUvw() bool { return methodCall[bool](gdClass.obj.get(), methodRDSamplerState[29]) }

type RDShaderFile struct{self *RDShaderFile; obj safeObject }
func NewRDShaderFile(ctx Context, at *RDShaderFile) RDShaderFile { if at == nil { at = new(RDShaderFile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDShaderFile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDShaderFile) owner() cObject { return gdClass.obj.get() }
func (RDShaderFile) class() string { return "RDShaderFile\000" }

func (gdClass RDShaderFile) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodRDShaderFile [5]cMethodBind
func (gdClass RDShaderFile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass RDShaderFile) SetBytecode(bytecode RDShaderSPIRV, version Name)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderFile[0], &bytecode, &version) }
func (gdClass RDShaderFile) GetSpirv(version Name) RDShaderSPIRV { return methodCall[RDShaderSPIRV](gdClass.obj.get(), methodRDShaderFile[1], &version) }
func (gdClass RDShaderFile) GetVersionList() []string { return methodCall[[]string](gdClass.obj.get(), methodRDShaderFile[2]) }
func (gdClass RDShaderFile) SetBaseError(error string)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderFile[3], &error) }
func (gdClass RDShaderFile) GetBaseError() string { return methodCall[string](gdClass.obj.get(), methodRDShaderFile[4]) }

type RDShaderSPIRV struct{self *RDShaderSPIRV; obj safeObject }
func NewRDShaderSPIRV(ctx Context, at *RDShaderSPIRV) RDShaderSPIRV { if at == nil { at = new(RDShaderSPIRV) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDShaderSPIRV) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDShaderSPIRV) owner() cObject { return gdClass.obj.get() }
func (RDShaderSPIRV) class() string { return "RDShaderSPIRV\000" }

func (gdClass RDShaderSPIRV) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodRDShaderSPIRV [4]cMethodBind
func (gdClass RDShaderSPIRV) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass RDShaderSPIRV) SetStageBytecode(stage RenderingDeviceShaderStage, bytecode []byte)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderSPIRV[0], &stage, &bytecode) }
func (gdClass RDShaderSPIRV) GetStageBytecode(stage RenderingDeviceShaderStage) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRDShaderSPIRV[1], &stage) }
func (gdClass RDShaderSPIRV) SetStageCompileError(stage RenderingDeviceShaderStage, compile_error string)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderSPIRV[2], &stage, &compile_error) }
func (gdClass RDShaderSPIRV) GetStageCompileError(stage RenderingDeviceShaderStage) string { return methodCall[string](gdClass.obj.get(), methodRDShaderSPIRV[3], &stage) }

type RDShaderSource struct{self *RDShaderSource; obj safeObject }
func NewRDShaderSource(ctx Context, at *RDShaderSource) RDShaderSource { if at == nil { at = new(RDShaderSource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDShaderSource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDShaderSource) owner() cObject { return gdClass.obj.get() }
func (RDShaderSource) class() string { return "RDShaderSource\000" }

func (gdClass RDShaderSource) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDShaderSource [4]cMethodBind
func (gdClass RDShaderSource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDShaderSource) SetStageSource(stage RenderingDeviceShaderStage, source string)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderSource[0], &stage, &source) }
func (gdClass RDShaderSource) GetStageSource(stage RenderingDeviceShaderStage) string { return methodCall[string](gdClass.obj.get(), methodRDShaderSource[1], &stage) }
func (gdClass RDShaderSource) SetLanguage(language RenderingDeviceShaderLanguage)  { methodCall[struct{}](gdClass.obj.get(), methodRDShaderSource[2], &language) }
func (gdClass RDShaderSource) GetLanguage() RenderingDeviceShaderLanguage { return methodCall[RenderingDeviceShaderLanguage](gdClass.obj.get(), methodRDShaderSource[3]) }

type RDTextureFormat struct{self *RDTextureFormat; obj safeObject }
func NewRDTextureFormat(ctx Context, at *RDTextureFormat) RDTextureFormat { if at == nil { at = new(RDTextureFormat) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDTextureFormat) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDTextureFormat) owner() cObject { return gdClass.obj.get() }
func (RDTextureFormat) class() string { return "RDTextureFormat\000" }

func (gdClass RDTextureFormat) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDTextureFormat [20]cMethodBind
func (gdClass RDTextureFormat) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDTextureFormat) SetFormat(p_member RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[0], &p_member) }
func (gdClass RDTextureFormat) GetFormat() RenderingDeviceDataFormat { return methodCall[RenderingDeviceDataFormat](gdClass.obj.get(), methodRDTextureFormat[1]) }
func (gdClass RDTextureFormat) SetWidth(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[2], &p_member) }
func (gdClass RDTextureFormat) GetWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[3]) }
func (gdClass RDTextureFormat) SetHeight(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[4], &p_member) }
func (gdClass RDTextureFormat) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[5]) }
func (gdClass RDTextureFormat) SetDepth(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[6], &p_member) }
func (gdClass RDTextureFormat) GetDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[7]) }
func (gdClass RDTextureFormat) SetArrayLayers(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[8], &p_member) }
func (gdClass RDTextureFormat) GetArrayLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[9]) }
func (gdClass RDTextureFormat) SetMipmaps(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[10], &p_member) }
func (gdClass RDTextureFormat) GetMipmaps() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[11]) }
func (gdClass RDTextureFormat) SetTextureType(p_member RenderingDeviceTextureType)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[12], &p_member) }
func (gdClass RDTextureFormat) GetTextureType() RenderingDeviceTextureType { return methodCall[RenderingDeviceTextureType](gdClass.obj.get(), methodRDTextureFormat[13]) }
func (gdClass RDTextureFormat) SetSamples(p_member RenderingDeviceTextureSamples)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[14], &p_member) }
func (gdClass RDTextureFormat) GetSamples() RenderingDeviceTextureSamples { return methodCall[RenderingDeviceTextureSamples](gdClass.obj.get(), methodRDTextureFormat[15]) }
func (gdClass RDTextureFormat) SetUsageBits(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[16], &p_member) }
func (gdClass RDTextureFormat) GetUsageBits() int64 { return methodCall[int64](gdClass.obj.get(), methodRDTextureFormat[17]) }
func (gdClass RDTextureFormat) AddShareableFormat(format RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[18], &format) }
func (gdClass RDTextureFormat) RemoveShareableFormat(format RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureFormat[19], &format) }

type RDTextureView struct{self *RDTextureView; obj safeObject }
func NewRDTextureView(ctx Context, at *RDTextureView) RDTextureView { if at == nil { at = new(RDTextureView) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDTextureView) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDTextureView) owner() cObject { return gdClass.obj.get() }
func (RDTextureView) class() string { return "RDTextureView\000" }

func (gdClass RDTextureView) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDTextureView [10]cMethodBind
func (gdClass RDTextureView) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDTextureView) SetFormatOverride(p_member RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureView[0], &p_member) }
func (gdClass RDTextureView) GetFormatOverride() RenderingDeviceDataFormat { return methodCall[RenderingDeviceDataFormat](gdClass.obj.get(), methodRDTextureView[1]) }
func (gdClass RDTextureView) SetSwizzleR(p_member RenderingDeviceTextureSwizzle)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureView[2], &p_member) }
func (gdClass RDTextureView) GetSwizzleR() RenderingDeviceTextureSwizzle { return methodCall[RenderingDeviceTextureSwizzle](gdClass.obj.get(), methodRDTextureView[3]) }
func (gdClass RDTextureView) SetSwizzleG(p_member RenderingDeviceTextureSwizzle)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureView[4], &p_member) }
func (gdClass RDTextureView) GetSwizzleG() RenderingDeviceTextureSwizzle { return methodCall[RenderingDeviceTextureSwizzle](gdClass.obj.get(), methodRDTextureView[5]) }
func (gdClass RDTextureView) SetSwizzleB(p_member RenderingDeviceTextureSwizzle)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureView[6], &p_member) }
func (gdClass RDTextureView) GetSwizzleB() RenderingDeviceTextureSwizzle { return methodCall[RenderingDeviceTextureSwizzle](gdClass.obj.get(), methodRDTextureView[7]) }
func (gdClass RDTextureView) SetSwizzleA(p_member RenderingDeviceTextureSwizzle)  { methodCall[struct{}](gdClass.obj.get(), methodRDTextureView[8], &p_member) }
func (gdClass RDTextureView) GetSwizzleA() RenderingDeviceTextureSwizzle { return methodCall[RenderingDeviceTextureSwizzle](gdClass.obj.get(), methodRDTextureView[9]) }

type RDUniform struct{self *RDUniform; obj safeObject }
func NewRDUniform(ctx Context, at *RDUniform) RDUniform { if at == nil { at = new(RDUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDUniform) owner() cObject { return gdClass.obj.get() }
func (RDUniform) class() string { return "RDUniform\000" }

func (gdClass RDUniform) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDUniform [7]cMethodBind
func (gdClass RDUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDUniform) SetUniformType(p_member RenderingDeviceUniformType)  { methodCall[struct{}](gdClass.obj.get(), methodRDUniform[0], &p_member) }
func (gdClass RDUniform) GetUniformType() RenderingDeviceUniformType { return methodCall[RenderingDeviceUniformType](gdClass.obj.get(), methodRDUniform[1]) }
func (gdClass RDUniform) SetBinding(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDUniform[2], &p_member) }
func (gdClass RDUniform) GetBinding() int64 { return methodCall[int64](gdClass.obj.get(), methodRDUniform[3]) }
func (gdClass RDUniform) AddId(id RID)  { methodCall[struct{}](gdClass.obj.get(), methodRDUniform[4], &id) }
func (gdClass RDUniform) ClearIds()  { methodCall[struct{}](gdClass.obj.get(), methodRDUniform[5]) }
func (gdClass RDUniform) GetIds() Array { return methodCall[Array](gdClass.obj.get(), methodRDUniform[6]) }

type RDVertexAttribute struct{self *RDVertexAttribute; obj safeObject }
func NewRDVertexAttribute(ctx Context, at *RDVertexAttribute) RDVertexAttribute { if at == nil { at = new(RDVertexAttribute) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RDVertexAttribute) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RDVertexAttribute) owner() cObject { return gdClass.obj.get() }
func (RDVertexAttribute) class() string { return "RDVertexAttribute\000" }

func (gdClass RDVertexAttribute) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRDVertexAttribute [10]cMethodBind
func (gdClass RDVertexAttribute) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RDVertexAttribute) SetLocation(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDVertexAttribute[0], &p_member) }
func (gdClass RDVertexAttribute) GetLocation() int64 { return methodCall[int64](gdClass.obj.get(), methodRDVertexAttribute[1]) }
func (gdClass RDVertexAttribute) SetOffset(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDVertexAttribute[2], &p_member) }
func (gdClass RDVertexAttribute) GetOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodRDVertexAttribute[3]) }
func (gdClass RDVertexAttribute) SetFormat(p_member RenderingDeviceDataFormat)  { methodCall[struct{}](gdClass.obj.get(), methodRDVertexAttribute[4], &p_member) }
func (gdClass RDVertexAttribute) GetFormat() RenderingDeviceDataFormat { return methodCall[RenderingDeviceDataFormat](gdClass.obj.get(), methodRDVertexAttribute[5]) }
func (gdClass RDVertexAttribute) SetStride(p_member int64)  { methodCall[struct{}](gdClass.obj.get(), methodRDVertexAttribute[6], &p_member) }
func (gdClass RDVertexAttribute) GetStride() int64 { return methodCall[int64](gdClass.obj.get(), methodRDVertexAttribute[7]) }
func (gdClass RDVertexAttribute) SetFrequency(p_member RenderingDeviceVertexFrequency)  { methodCall[struct{}](gdClass.obj.get(), methodRDVertexAttribute[8], &p_member) }
func (gdClass RDVertexAttribute) GetFrequency() RenderingDeviceVertexFrequency { return methodCall[RenderingDeviceVertexFrequency](gdClass.obj.get(), methodRDVertexAttribute[9]) }

type RandomNumberGenerator struct{self *RandomNumberGenerator; obj safeObject }
func NewRandomNumberGenerator(ctx Context, at *RandomNumberGenerator) RandomNumberGenerator { if at == nil { at = new(RandomNumberGenerator) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RandomNumberGenerator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RandomNumberGenerator) owner() cObject { return gdClass.obj.get() }
func (RandomNumberGenerator) class() string { return "RandomNumberGenerator\000" }

func (gdClass RandomNumberGenerator) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRandomNumberGenerator [10]cMethodBind
func (gdClass RandomNumberGenerator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RandomNumberGenerator) SetSeed(seed int64)  { methodCall[struct{}](gdClass.obj.get(), methodRandomNumberGenerator[0], &seed) }
func (gdClass RandomNumberGenerator) GetSeed() int64 { return methodCall[int64](gdClass.obj.get(), methodRandomNumberGenerator[1]) }
func (gdClass RandomNumberGenerator) SetState(state int64)  { methodCall[struct{}](gdClass.obj.get(), methodRandomNumberGenerator[2], &state) }
func (gdClass RandomNumberGenerator) GetState() int64 { return methodCall[int64](gdClass.obj.get(), methodRandomNumberGenerator[3]) }
func (gdClass RandomNumberGenerator) Randi() int64 { return methodCall[int64](gdClass.obj.get(), methodRandomNumberGenerator[4]) }
func (gdClass RandomNumberGenerator) Randf() float64 { return methodCall[float64](gdClass.obj.get(), methodRandomNumberGenerator[5]) }
func (gdClass RandomNumberGenerator) Randfn(mean float64, deviation float64) float64 { return methodCall[float64](gdClass.obj.get(), methodRandomNumberGenerator[6], &mean, &deviation) }
func (gdClass RandomNumberGenerator) RandfRange(from float64, to float64) float64 { return methodCall[float64](gdClass.obj.get(), methodRandomNumberGenerator[7], &from, &to) }
func (gdClass RandomNumberGenerator) RandiRange(from int64, to int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRandomNumberGenerator[8], &from, &to) }
func (gdClass RandomNumberGenerator) Randomize()  { methodCall[struct{}](gdClass.obj.get(), methodRandomNumberGenerator[9]) }

type Range struct{self *Range; obj safeObject }
func NewRange(ctx Context, at *Range) Range { if at == nil { at = new(Range) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Range) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Range) owner() cObject { return gdClass.obj.get() }
func (Range) class() string { return "Range\000" }

func (gdClass Range) Control() Control { return Control{obj:gdClass.obj} }

var methodRange [22]cMethodBind
func (gdClass Range) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_value_changed":
		if rtype.Implements(reflect.TypeOf([0]interface{ ValueChanged(new_value float64)  }{}).Elem()) {
			return rtype.MethodByName(`ValueChanged`)
		}
		return
	}
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass Range) GetValue() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[0]) }
func (gdClass Range) GetMin() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[1]) }
func (gdClass Range) GetMax() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[2]) }
func (gdClass Range) GetStep() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[3]) }
func (gdClass Range) GetPage() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[4]) }
func (gdClass Range) GetAsRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodRange[5]) }
func (gdClass Range) SetValue(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[6], &value) }
func (gdClass Range) SetMin(minimum float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[7], &minimum) }
func (gdClass Range) SetMax(maximum float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[8], &maximum) }
func (gdClass Range) SetStep(step float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[9], &step) }
func (gdClass Range) SetPage(pagesize float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[10], &pagesize) }
func (gdClass Range) SetAsRatio(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodRange[11], &value) }
func (gdClass Range) SetUseRoundedValues(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRange[12], &enabled) }
func (gdClass Range) IsUsingRoundedValues() bool { return methodCall[bool](gdClass.obj.get(), methodRange[13]) }
func (gdClass Range) SetExpRatio(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRange[14], &enabled) }
func (gdClass Range) IsRatioExp() bool { return methodCall[bool](gdClass.obj.get(), methodRange[15]) }
func (gdClass Range) SetAllowGreater(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodRange[16], &allow) }
func (gdClass Range) IsGreaterAllowed() bool { return methodCall[bool](gdClass.obj.get(), methodRange[17]) }
func (gdClass Range) SetAllowLesser(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodRange[18], &allow) }
func (gdClass Range) IsLesserAllowed() bool { return methodCall[bool](gdClass.obj.get(), methodRange[19]) }
func (gdClass Range) Share(with Node)  { methodCall[struct{}](gdClass.obj.get(), methodRange[20], &with) }
func (gdClass Range) Unshare()  { methodCall[struct{}](gdClass.obj.get(), methodRange[21]) }

type RayCast2D struct{self *RayCast2D; obj safeObject }
func NewRayCast2D(ctx Context, at *RayCast2D) RayCast2D { if at == nil { at = new(RayCast2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RayCast2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RayCast2D) owner() cObject { return gdClass.obj.get() }
func (RayCast2D) class() string { return "RayCast2D\000" }

func (gdClass RayCast2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodRayCast2D [28]cMethodBind
func (gdClass RayCast2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass RayCast2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[0], &enabled) }
func (gdClass RayCast2D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[1]) }
func (gdClass RayCast2D) SetTargetPosition(local_point Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[2], &local_point) }
func (gdClass RayCast2D) GetTargetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRayCast2D[3]) }
func (gdClass RayCast2D) IsColliding() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[4]) }
func (gdClass RayCast2D) ForceRaycastUpdate()  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[5]) }
func (gdClass RayCast2D) GetCollider() Object { return methodCall[Object](gdClass.obj.get(), methodRayCast2D[6]) }
func (gdClass RayCast2D) GetColliderRid() RID { return methodCall[RID](gdClass.obj.get(), methodRayCast2D[7]) }
func (gdClass RayCast2D) GetColliderShape() int64 { return methodCall[int64](gdClass.obj.get(), methodRayCast2D[8]) }
func (gdClass RayCast2D) GetCollisionPoint() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRayCast2D[9]) }
func (gdClass RayCast2D) GetCollisionNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRayCast2D[10]) }
func (gdClass RayCast2D) AddExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[11], &rid) }
func (gdClass RayCast2D) AddException(node CollisionObject2D)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[12], &node) }
func (gdClass RayCast2D) RemoveExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[13], &rid) }
func (gdClass RayCast2D) RemoveException(node CollisionObject2D)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[14], &node) }
func (gdClass RayCast2D) ClearExceptions()  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[15]) }
func (gdClass RayCast2D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[16], &mask) }
func (gdClass RayCast2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRayCast2D[17]) }
func (gdClass RayCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[18], &layer_number, &value) }
func (gdClass RayCast2D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[19], &layer_number) }
func (gdClass RayCast2D) SetExcludeParentBody(mask bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[20], &mask) }
func (gdClass RayCast2D) GetExcludeParentBody() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[21]) }
func (gdClass RayCast2D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[22], &enable) }
func (gdClass RayCast2D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[23]) }
func (gdClass RayCast2D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[24], &enable) }
func (gdClass RayCast2D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[25]) }
func (gdClass RayCast2D) SetHitFromInside(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast2D[26], &enable) }
func (gdClass RayCast2D) IsHitFromInsideEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast2D[27]) }

type RayCast3D struct{self *RayCast3D; obj safeObject }
func NewRayCast3D(ctx Context, at *RayCast3D) RayCast3D { if at == nil { at = new(RayCast3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RayCast3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RayCast3D) owner() cObject { return gdClass.obj.get() }
func (RayCast3D) class() string { return "RayCast3D\000" }

func (gdClass RayCast3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodRayCast3D [32]cMethodBind
func (gdClass RayCast3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass RayCast3D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[0], &enabled) }
func (gdClass RayCast3D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[1]) }
func (gdClass RayCast3D) SetTargetPosition(local_point Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[2], &local_point) }
func (gdClass RayCast3D) GetTargetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRayCast3D[3]) }
func (gdClass RayCast3D) IsColliding() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[4]) }
func (gdClass RayCast3D) ForceRaycastUpdate()  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[5]) }
func (gdClass RayCast3D) GetCollider() Object { return methodCall[Object](gdClass.obj.get(), methodRayCast3D[6]) }
func (gdClass RayCast3D) GetColliderRid() RID { return methodCall[RID](gdClass.obj.get(), methodRayCast3D[7]) }
func (gdClass RayCast3D) GetColliderShape() int64 { return methodCall[int64](gdClass.obj.get(), methodRayCast3D[8]) }
func (gdClass RayCast3D) GetCollisionPoint() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRayCast3D[9]) }
func (gdClass RayCast3D) GetCollisionNormal() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRayCast3D[10]) }
func (gdClass RayCast3D) AddExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[11], &rid) }
func (gdClass RayCast3D) AddException(node CollisionObject3D)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[12], &node) }
func (gdClass RayCast3D) RemoveExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[13], &rid) }
func (gdClass RayCast3D) RemoveException(node CollisionObject3D)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[14], &node) }
func (gdClass RayCast3D) ClearExceptions()  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[15]) }
func (gdClass RayCast3D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[16], &mask) }
func (gdClass RayCast3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodRayCast3D[17]) }
func (gdClass RayCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[18], &layer_number, &value) }
func (gdClass RayCast3D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[19], &layer_number) }
func (gdClass RayCast3D) SetExcludeParentBody(mask bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[20], &mask) }
func (gdClass RayCast3D) GetExcludeParentBody() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[21]) }
func (gdClass RayCast3D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[22], &enable) }
func (gdClass RayCast3D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[23]) }
func (gdClass RayCast3D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[24], &enable) }
func (gdClass RayCast3D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[25]) }
func (gdClass RayCast3D) SetHitFromInside(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[26], &enable) }
func (gdClass RayCast3D) IsHitFromInsideEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRayCast3D[27]) }
func (gdClass RayCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[28], &debug_shape_custom_color) }
func (gdClass RayCast3D) GetDebugShapeCustomColor() Color { return methodCall[Color](gdClass.obj.get(), methodRayCast3D[29]) }
func (gdClass RayCast3D) SetDebugShapeThickness(debug_shape_thickness int64)  { methodCall[struct{}](gdClass.obj.get(), methodRayCast3D[30], &debug_shape_thickness) }
func (gdClass RayCast3D) GetDebugShapeThickness() int64 { return methodCall[int64](gdClass.obj.get(), methodRayCast3D[31]) }

type RectangleShape2D struct{self *RectangleShape2D; obj safeObject }
func NewRectangleShape2D(ctx Context, at *RectangleShape2D) RectangleShape2D { if at == nil { at = new(RectangleShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RectangleShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RectangleShape2D) owner() cObject { return gdClass.obj.get() }
func (RectangleShape2D) class() string { return "RectangleShape2D\000" }

func (gdClass RectangleShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodRectangleShape2D [2]cMethodBind
func (gdClass RectangleShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass RectangleShape2D) SetSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRectangleShape2D[0], &size) }
func (gdClass RectangleShape2D) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRectangleShape2D[1]) }

type ReferenceRect struct{self *ReferenceRect; obj safeObject }
func NewReferenceRect(ctx Context, at *ReferenceRect) ReferenceRect { if at == nil { at = new(ReferenceRect) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ReferenceRect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ReferenceRect) owner() cObject { return gdClass.obj.get() }
func (ReferenceRect) class() string { return "ReferenceRect\000" }

func (gdClass ReferenceRect) Control() Control { return Control{obj:gdClass.obj} }

var methodReferenceRect [6]cMethodBind
func (gdClass ReferenceRect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass ReferenceRect) GetBorderColor() Color { return methodCall[Color](gdClass.obj.get(), methodReferenceRect[0]) }
func (gdClass ReferenceRect) SetBorderColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodReferenceRect[1], &color) }
func (gdClass ReferenceRect) GetBorderWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodReferenceRect[2]) }
func (gdClass ReferenceRect) SetBorderWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodReferenceRect[3], &width) }
func (gdClass ReferenceRect) GetEditorOnly() bool { return methodCall[bool](gdClass.obj.get(), methodReferenceRect[4]) }
func (gdClass ReferenceRect) SetEditorOnly(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodReferenceRect[5], &enabled) }

type ReflectionProbeUpdateMode int64

const (
	ReflectionProbeUpdateOnce ReflectionProbeUpdateMode = 0
	ReflectionProbeUpdateAlways ReflectionProbeUpdateMode = 1
)

type ReflectionProbeAmbientMode int64

const (
	ReflectionProbeAmbientDisabled ReflectionProbeAmbientMode = 0
	ReflectionProbeAmbientEnvironment ReflectionProbeAmbientMode = 1
	ReflectionProbeAmbientColor ReflectionProbeAmbientMode = 2
)

type ReflectionProbe struct{self *ReflectionProbe; obj safeObject }
func NewReflectionProbe(ctx Context, at *ReflectionProbe) ReflectionProbe { if at == nil { at = new(ReflectionProbe) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ReflectionProbe) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ReflectionProbe) owner() cObject { return gdClass.obj.get() }
func (ReflectionProbe) class() string { return "ReflectionProbe\000" }

func (gdClass ReflectionProbe) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodReflectionProbe [26]cMethodBind
func (gdClass ReflectionProbe) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass ReflectionProbe) SetIntensity(intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[0], &intensity) }
func (gdClass ReflectionProbe) GetIntensity() float64 { return methodCall[float64](gdClass.obj.get(), methodReflectionProbe[1]) }
func (gdClass ReflectionProbe) SetAmbientMode(ambient ReflectionProbeAmbientMode)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[2], &ambient) }
func (gdClass ReflectionProbe) GetAmbientMode() ReflectionProbeAmbientMode { return methodCall[ReflectionProbeAmbientMode](gdClass.obj.get(), methodReflectionProbe[3]) }
func (gdClass ReflectionProbe) SetAmbientColor(ambient Color)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[4], &ambient) }
func (gdClass ReflectionProbe) GetAmbientColor() Color { return methodCall[Color](gdClass.obj.get(), methodReflectionProbe[5]) }
func (gdClass ReflectionProbe) SetAmbientColorEnergy(ambient_energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[6], &ambient_energy) }
func (gdClass ReflectionProbe) GetAmbientColorEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodReflectionProbe[7]) }
func (gdClass ReflectionProbe) SetMaxDistance(max_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[8], &max_distance) }
func (gdClass ReflectionProbe) GetMaxDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodReflectionProbe[9]) }
func (gdClass ReflectionProbe) SetMeshLodThreshold(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[10], &ratio) }
func (gdClass ReflectionProbe) GetMeshLodThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodReflectionProbe[11]) }
func (gdClass ReflectionProbe) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[12], &extents) }
func (gdClass ReflectionProbe) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodReflectionProbe[13]) }
func (gdClass ReflectionProbe) SetOriginOffset(origin_offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[14], &origin_offset) }
func (gdClass ReflectionProbe) GetOriginOffset() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodReflectionProbe[15]) }
func (gdClass ReflectionProbe) SetAsInterior(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[16], &enable) }
func (gdClass ReflectionProbe) IsSetAsInterior() bool { return methodCall[bool](gdClass.obj.get(), methodReflectionProbe[17]) }
func (gdClass ReflectionProbe) SetEnableBoxProjection(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[18], &enable) }
func (gdClass ReflectionProbe) IsBoxProjectionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodReflectionProbe[19]) }
func (gdClass ReflectionProbe) SetEnableShadows(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[20], &enable) }
func (gdClass ReflectionProbe) AreShadowsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodReflectionProbe[21]) }
func (gdClass ReflectionProbe) SetCullMask(layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[22], &layers) }
func (gdClass ReflectionProbe) GetCullMask() int64 { return methodCall[int64](gdClass.obj.get(), methodReflectionProbe[23]) }
func (gdClass ReflectionProbe) SetUpdateMode(mode ReflectionProbeUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodReflectionProbe[24], &mode) }
func (gdClass ReflectionProbe) GetUpdateMode() ReflectionProbeUpdateMode { return methodCall[ReflectionProbeUpdateMode](gdClass.obj.get(), methodReflectionProbe[25]) }

type RegEx struct{self *RegEx; obj safeObject }
func NewRegEx(ctx Context, at *RegEx) RegEx { if at == nil { at = new(RegEx) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RegEx) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RegEx) owner() cObject { return gdClass.obj.get() }
func (RegEx) class() string { return "RegEx\000" }

func (gdClass RegEx) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRegEx [10]cMethodBind
func (gdClass RegEx) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RegEx) CreateFromString(pattern string) RegEx { return methodCall[RegEx](gdClass.obj.get(), methodRegEx[0], &pattern) }
func (gdClass RegEx) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodRegEx[1]) }
func (gdClass RegEx) Compile(pattern string) int64 { return methodCall[int64](gdClass.obj.get(), methodRegEx[2], &pattern) }
func (gdClass RegEx) Search(subject string, offset int64, end int64) RegExMatch { return methodCall[RegExMatch](gdClass.obj.get(), methodRegEx[3], &subject, &offset, &end) }
func (gdClass RegEx) SearchAll(subject string, offset int64, end int64) Array { return methodCall[Array](gdClass.obj.get(), methodRegEx[4], &subject, &offset, &end) }
func (gdClass RegEx) Sub(subject string, replacement string, all bool, offset int64, end int64) string { return methodCall[string](gdClass.obj.get(), methodRegEx[5], &subject, &replacement, &all, &offset, &end) }
func (gdClass RegEx) IsValid() bool { return methodCall[bool](gdClass.obj.get(), methodRegEx[6]) }
func (gdClass RegEx) GetPattern() string { return methodCall[string](gdClass.obj.get(), methodRegEx[7]) }
func (gdClass RegEx) GetGroupCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRegEx[8]) }
func (gdClass RegEx) GetNames() []string { return methodCall[[]string](gdClass.obj.get(), methodRegEx[9]) }

type RegExMatch struct{self *RegExMatch; obj safeObject }
func NewRegExMatch(ctx Context, at *RegExMatch) RegExMatch { if at == nil { at = new(RegExMatch) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RegExMatch) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RegExMatch) owner() cObject { return gdClass.obj.get() }
func (RegExMatch) class() string { return "RegExMatch\000" }

func (gdClass RegExMatch) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodRegExMatch [7]cMethodBind
func (gdClass RegExMatch) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass RegExMatch) GetSubject() string { return methodCall[string](gdClass.obj.get(), methodRegExMatch[0]) }
func (gdClass RegExMatch) GetGroupCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRegExMatch[1]) }
func (gdClass RegExMatch) GetNames() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodRegExMatch[2]) }
func (gdClass RegExMatch) GetStrings() Array { return methodCall[Array](gdClass.obj.get(), methodRegExMatch[3]) }
func (gdClass RegExMatch) GetString(name any) string { return methodCall[string](gdClass.obj.get(), methodRegExMatch[4], &name) }
func (gdClass RegExMatch) GetStart(name any) int64 { return methodCall[int64](gdClass.obj.get(), methodRegExMatch[5], &name) }
func (gdClass RegExMatch) GetEnd(name any) int64 { return methodCall[int64](gdClass.obj.get(), methodRegExMatch[6], &name) }

type RemoteTransform2D struct{self *RemoteTransform2D; obj safeObject }
func NewRemoteTransform2D(ctx Context, at *RemoteTransform2D) RemoteTransform2D { if at == nil { at = new(RemoteTransform2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RemoteTransform2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RemoteTransform2D) owner() cObject { return gdClass.obj.get() }
func (RemoteTransform2D) class() string { return "RemoteTransform2D\000" }

func (gdClass RemoteTransform2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodRemoteTransform2D [11]cMethodBind
func (gdClass RemoteTransform2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass RemoteTransform2D) SetRemoteNode(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[0], &path) }
func (gdClass RemoteTransform2D) GetRemoteNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodRemoteTransform2D[1]) }
func (gdClass RemoteTransform2D) ForceUpdateCache()  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[2]) }
func (gdClass RemoteTransform2D) SetUseGlobalCoordinates(use_global_coordinates bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[3], &use_global_coordinates) }
func (gdClass RemoteTransform2D) GetUseGlobalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform2D[4]) }
func (gdClass RemoteTransform2D) SetUpdatePosition(update_remote_position bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[5], &update_remote_position) }
func (gdClass RemoteTransform2D) GetUpdatePosition() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform2D[6]) }
func (gdClass RemoteTransform2D) SetUpdateRotation(update_remote_rotation bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[7], &update_remote_rotation) }
func (gdClass RemoteTransform2D) GetUpdateRotation() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform2D[8]) }
func (gdClass RemoteTransform2D) SetUpdateScale(update_remote_scale bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform2D[9], &update_remote_scale) }
func (gdClass RemoteTransform2D) GetUpdateScale() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform2D[10]) }

type RemoteTransform3D struct{self *RemoteTransform3D; obj safeObject }
func NewRemoteTransform3D(ctx Context, at *RemoteTransform3D) RemoteTransform3D { if at == nil { at = new(RemoteTransform3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RemoteTransform3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RemoteTransform3D) owner() cObject { return gdClass.obj.get() }
func (RemoteTransform3D) class() string { return "RemoteTransform3D\000" }

func (gdClass RemoteTransform3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodRemoteTransform3D [11]cMethodBind
func (gdClass RemoteTransform3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass RemoteTransform3D) SetRemoteNode(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[0], &path) }
func (gdClass RemoteTransform3D) GetRemoteNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodRemoteTransform3D[1]) }
func (gdClass RemoteTransform3D) ForceUpdateCache()  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[2]) }
func (gdClass RemoteTransform3D) SetUseGlobalCoordinates(use_global_coordinates bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[3], &use_global_coordinates) }
func (gdClass RemoteTransform3D) GetUseGlobalCoordinates() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform3D[4]) }
func (gdClass RemoteTransform3D) SetUpdatePosition(update_remote_position bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[5], &update_remote_position) }
func (gdClass RemoteTransform3D) GetUpdatePosition() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform3D[6]) }
func (gdClass RemoteTransform3D) SetUpdateRotation(update_remote_rotation bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[7], &update_remote_rotation) }
func (gdClass RemoteTransform3D) GetUpdateRotation() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform3D[8]) }
func (gdClass RemoteTransform3D) SetUpdateScale(update_remote_scale bool)  { methodCall[struct{}](gdClass.obj.get(), methodRemoteTransform3D[9], &update_remote_scale) }
func (gdClass RemoteTransform3D) GetUpdateScale() bool { return methodCall[bool](gdClass.obj.get(), methodRemoteTransform3D[10]) }

type RenderingDeviceDeviceType int64

const (
	RenderingDeviceDeviceTypeOther RenderingDeviceDeviceType = 0
	RenderingDeviceDeviceTypeIntegratedGpu RenderingDeviceDeviceType = 1
	RenderingDeviceDeviceTypeDiscreteGpu RenderingDeviceDeviceType = 2
	RenderingDeviceDeviceTypeVirtualGpu RenderingDeviceDeviceType = 3
	RenderingDeviceDeviceTypeCpu RenderingDeviceDeviceType = 4
	RenderingDeviceDeviceTypeMax RenderingDeviceDeviceType = 5
)

type RenderingDeviceDriverResource int64

const (
	RenderingDeviceDriverResourceVulkanDevice RenderingDeviceDriverResource = 0
	RenderingDeviceDriverResourceVulkanPhysicalDevice RenderingDeviceDriverResource = 1
	RenderingDeviceDriverResourceVulkanInstance RenderingDeviceDriverResource = 2
	RenderingDeviceDriverResourceVulkanQueue RenderingDeviceDriverResource = 3
	RenderingDeviceDriverResourceVulkanQueueFamilyIndex RenderingDeviceDriverResource = 4
	RenderingDeviceDriverResourceVulkanImage RenderingDeviceDriverResource = 5
	RenderingDeviceDriverResourceVulkanImageView RenderingDeviceDriverResource = 6
	RenderingDeviceDriverResourceVulkanImageNativeTextureFormat RenderingDeviceDriverResource = 7
	RenderingDeviceDriverResourceVulkanSampler RenderingDeviceDriverResource = 8
	RenderingDeviceDriverResourceVulkanDescriptorSet RenderingDeviceDriverResource = 9
	RenderingDeviceDriverResourceVulkanBuffer RenderingDeviceDriverResource = 10
	RenderingDeviceDriverResourceVulkanComputePipeline RenderingDeviceDriverResource = 11
	RenderingDeviceDriverResourceVulkanRenderPipeline RenderingDeviceDriverResource = 12
)

type RenderingDeviceDataFormat int64

const (
	RenderingDeviceDataFormatR4g4UnormPack8 RenderingDeviceDataFormat = 0
	RenderingDeviceDataFormatR4g4b4a4UnormPack16 RenderingDeviceDataFormat = 1
	RenderingDeviceDataFormatB4g4r4a4UnormPack16 RenderingDeviceDataFormat = 2
	RenderingDeviceDataFormatR5g6b5UnormPack16 RenderingDeviceDataFormat = 3
	RenderingDeviceDataFormatB5g6r5UnormPack16 RenderingDeviceDataFormat = 4
	RenderingDeviceDataFormatR5g5b5a1UnormPack16 RenderingDeviceDataFormat = 5
	RenderingDeviceDataFormatB5g5r5a1UnormPack16 RenderingDeviceDataFormat = 6
	RenderingDeviceDataFormatA1r5g5b5UnormPack16 RenderingDeviceDataFormat = 7
	RenderingDeviceDataFormatR8Unorm RenderingDeviceDataFormat = 8
	RenderingDeviceDataFormatR8Snorm RenderingDeviceDataFormat = 9
	RenderingDeviceDataFormatR8Uscaled RenderingDeviceDataFormat = 10
	RenderingDeviceDataFormatR8Sscaled RenderingDeviceDataFormat = 11
	RenderingDeviceDataFormatR8Uint RenderingDeviceDataFormat = 12
	RenderingDeviceDataFormatR8Sint RenderingDeviceDataFormat = 13
	RenderingDeviceDataFormatR8Srgb RenderingDeviceDataFormat = 14
	RenderingDeviceDataFormatR8g8Unorm RenderingDeviceDataFormat = 15
	RenderingDeviceDataFormatR8g8Snorm RenderingDeviceDataFormat = 16
	RenderingDeviceDataFormatR8g8Uscaled RenderingDeviceDataFormat = 17
	RenderingDeviceDataFormatR8g8Sscaled RenderingDeviceDataFormat = 18
	RenderingDeviceDataFormatR8g8Uint RenderingDeviceDataFormat = 19
	RenderingDeviceDataFormatR8g8Sint RenderingDeviceDataFormat = 20
	RenderingDeviceDataFormatR8g8Srgb RenderingDeviceDataFormat = 21
	RenderingDeviceDataFormatR8g8b8Unorm RenderingDeviceDataFormat = 22
	RenderingDeviceDataFormatR8g8b8Snorm RenderingDeviceDataFormat = 23
	RenderingDeviceDataFormatR8g8b8Uscaled RenderingDeviceDataFormat = 24
	RenderingDeviceDataFormatR8g8b8Sscaled RenderingDeviceDataFormat = 25
	RenderingDeviceDataFormatR8g8b8Uint RenderingDeviceDataFormat = 26
	RenderingDeviceDataFormatR8g8b8Sint RenderingDeviceDataFormat = 27
	RenderingDeviceDataFormatR8g8b8Srgb RenderingDeviceDataFormat = 28
	RenderingDeviceDataFormatB8g8r8Unorm RenderingDeviceDataFormat = 29
	RenderingDeviceDataFormatB8g8r8Snorm RenderingDeviceDataFormat = 30
	RenderingDeviceDataFormatB8g8r8Uscaled RenderingDeviceDataFormat = 31
	RenderingDeviceDataFormatB8g8r8Sscaled RenderingDeviceDataFormat = 32
	RenderingDeviceDataFormatB8g8r8Uint RenderingDeviceDataFormat = 33
	RenderingDeviceDataFormatB8g8r8Sint RenderingDeviceDataFormat = 34
	RenderingDeviceDataFormatB8g8r8Srgb RenderingDeviceDataFormat = 35
	RenderingDeviceDataFormatR8g8b8a8Unorm RenderingDeviceDataFormat = 36
	RenderingDeviceDataFormatR8g8b8a8Snorm RenderingDeviceDataFormat = 37
	RenderingDeviceDataFormatR8g8b8a8Uscaled RenderingDeviceDataFormat = 38
	RenderingDeviceDataFormatR8g8b8a8Sscaled RenderingDeviceDataFormat = 39
	RenderingDeviceDataFormatR8g8b8a8Uint RenderingDeviceDataFormat = 40
	RenderingDeviceDataFormatR8g8b8a8Sint RenderingDeviceDataFormat = 41
	RenderingDeviceDataFormatR8g8b8a8Srgb RenderingDeviceDataFormat = 42
	RenderingDeviceDataFormatB8g8r8a8Unorm RenderingDeviceDataFormat = 43
	RenderingDeviceDataFormatB8g8r8a8Snorm RenderingDeviceDataFormat = 44
	RenderingDeviceDataFormatB8g8r8a8Uscaled RenderingDeviceDataFormat = 45
	RenderingDeviceDataFormatB8g8r8a8Sscaled RenderingDeviceDataFormat = 46
	RenderingDeviceDataFormatB8g8r8a8Uint RenderingDeviceDataFormat = 47
	RenderingDeviceDataFormatB8g8r8a8Sint RenderingDeviceDataFormat = 48
	RenderingDeviceDataFormatB8g8r8a8Srgb RenderingDeviceDataFormat = 49
	RenderingDeviceDataFormatA8b8g8r8UnormPack32 RenderingDeviceDataFormat = 50
	RenderingDeviceDataFormatA8b8g8r8SnormPack32 RenderingDeviceDataFormat = 51
	RenderingDeviceDataFormatA8b8g8r8UscaledPack32 RenderingDeviceDataFormat = 52
	RenderingDeviceDataFormatA8b8g8r8SscaledPack32 RenderingDeviceDataFormat = 53
	RenderingDeviceDataFormatA8b8g8r8UintPack32 RenderingDeviceDataFormat = 54
	RenderingDeviceDataFormatA8b8g8r8SintPack32 RenderingDeviceDataFormat = 55
	RenderingDeviceDataFormatA8b8g8r8SrgbPack32 RenderingDeviceDataFormat = 56
	RenderingDeviceDataFormatA2r10g10b10UnormPack32 RenderingDeviceDataFormat = 57
	RenderingDeviceDataFormatA2r10g10b10SnormPack32 RenderingDeviceDataFormat = 58
	RenderingDeviceDataFormatA2r10g10b10UscaledPack32 RenderingDeviceDataFormat = 59
	RenderingDeviceDataFormatA2r10g10b10SscaledPack32 RenderingDeviceDataFormat = 60
	RenderingDeviceDataFormatA2r10g10b10UintPack32 RenderingDeviceDataFormat = 61
	RenderingDeviceDataFormatA2r10g10b10SintPack32 RenderingDeviceDataFormat = 62
	RenderingDeviceDataFormatA2b10g10r10UnormPack32 RenderingDeviceDataFormat = 63
	RenderingDeviceDataFormatA2b10g10r10SnormPack32 RenderingDeviceDataFormat = 64
	RenderingDeviceDataFormatA2b10g10r10UscaledPack32 RenderingDeviceDataFormat = 65
	RenderingDeviceDataFormatA2b10g10r10SscaledPack32 RenderingDeviceDataFormat = 66
	RenderingDeviceDataFormatA2b10g10r10UintPack32 RenderingDeviceDataFormat = 67
	RenderingDeviceDataFormatA2b10g10r10SintPack32 RenderingDeviceDataFormat = 68
	RenderingDeviceDataFormatR16Unorm RenderingDeviceDataFormat = 69
	RenderingDeviceDataFormatR16Snorm RenderingDeviceDataFormat = 70
	RenderingDeviceDataFormatR16Uscaled RenderingDeviceDataFormat = 71
	RenderingDeviceDataFormatR16Sscaled RenderingDeviceDataFormat = 72
	RenderingDeviceDataFormatR16Uint RenderingDeviceDataFormat = 73
	RenderingDeviceDataFormatR16Sint RenderingDeviceDataFormat = 74
	RenderingDeviceDataFormatR16Sfloat RenderingDeviceDataFormat = 75
	RenderingDeviceDataFormatR16g16Unorm RenderingDeviceDataFormat = 76
	RenderingDeviceDataFormatR16g16Snorm RenderingDeviceDataFormat = 77
	RenderingDeviceDataFormatR16g16Uscaled RenderingDeviceDataFormat = 78
	RenderingDeviceDataFormatR16g16Sscaled RenderingDeviceDataFormat = 79
	RenderingDeviceDataFormatR16g16Uint RenderingDeviceDataFormat = 80
	RenderingDeviceDataFormatR16g16Sint RenderingDeviceDataFormat = 81
	RenderingDeviceDataFormatR16g16Sfloat RenderingDeviceDataFormat = 82
	RenderingDeviceDataFormatR16g16b16Unorm RenderingDeviceDataFormat = 83
	RenderingDeviceDataFormatR16g16b16Snorm RenderingDeviceDataFormat = 84
	RenderingDeviceDataFormatR16g16b16Uscaled RenderingDeviceDataFormat = 85
	RenderingDeviceDataFormatR16g16b16Sscaled RenderingDeviceDataFormat = 86
	RenderingDeviceDataFormatR16g16b16Uint RenderingDeviceDataFormat = 87
	RenderingDeviceDataFormatR16g16b16Sint RenderingDeviceDataFormat = 88
	RenderingDeviceDataFormatR16g16b16Sfloat RenderingDeviceDataFormat = 89
	RenderingDeviceDataFormatR16g16b16a16Unorm RenderingDeviceDataFormat = 90
	RenderingDeviceDataFormatR16g16b16a16Snorm RenderingDeviceDataFormat = 91
	RenderingDeviceDataFormatR16g16b16a16Uscaled RenderingDeviceDataFormat = 92
	RenderingDeviceDataFormatR16g16b16a16Sscaled RenderingDeviceDataFormat = 93
	RenderingDeviceDataFormatR16g16b16a16Uint RenderingDeviceDataFormat = 94
	RenderingDeviceDataFormatR16g16b16a16Sint RenderingDeviceDataFormat = 95
	RenderingDeviceDataFormatR16g16b16a16Sfloat RenderingDeviceDataFormat = 96
	RenderingDeviceDataFormatR32Uint RenderingDeviceDataFormat = 97
	RenderingDeviceDataFormatR32Sint RenderingDeviceDataFormat = 98
	RenderingDeviceDataFormatR32Sfloat RenderingDeviceDataFormat = 99
	RenderingDeviceDataFormatR32g32Uint RenderingDeviceDataFormat = 100
	RenderingDeviceDataFormatR32g32Sint RenderingDeviceDataFormat = 101
	RenderingDeviceDataFormatR32g32Sfloat RenderingDeviceDataFormat = 102
	RenderingDeviceDataFormatR32g32b32Uint RenderingDeviceDataFormat = 103
	RenderingDeviceDataFormatR32g32b32Sint RenderingDeviceDataFormat = 104
	RenderingDeviceDataFormatR32g32b32Sfloat RenderingDeviceDataFormat = 105
	RenderingDeviceDataFormatR32g32b32a32Uint RenderingDeviceDataFormat = 106
	RenderingDeviceDataFormatR32g32b32a32Sint RenderingDeviceDataFormat = 107
	RenderingDeviceDataFormatR32g32b32a32Sfloat RenderingDeviceDataFormat = 108
	RenderingDeviceDataFormatR64Uint RenderingDeviceDataFormat = 109
	RenderingDeviceDataFormatR64Sint RenderingDeviceDataFormat = 110
	RenderingDeviceDataFormatR64Sfloat RenderingDeviceDataFormat = 111
	RenderingDeviceDataFormatR64g64Uint RenderingDeviceDataFormat = 112
	RenderingDeviceDataFormatR64g64Sint RenderingDeviceDataFormat = 113
	RenderingDeviceDataFormatR64g64Sfloat RenderingDeviceDataFormat = 114
	RenderingDeviceDataFormatR64g64b64Uint RenderingDeviceDataFormat = 115
	RenderingDeviceDataFormatR64g64b64Sint RenderingDeviceDataFormat = 116
	RenderingDeviceDataFormatR64g64b64Sfloat RenderingDeviceDataFormat = 117
	RenderingDeviceDataFormatR64g64b64a64Uint RenderingDeviceDataFormat = 118
	RenderingDeviceDataFormatR64g64b64a64Sint RenderingDeviceDataFormat = 119
	RenderingDeviceDataFormatR64g64b64a64Sfloat RenderingDeviceDataFormat = 120
	RenderingDeviceDataFormatB10g11r11UfloatPack32 RenderingDeviceDataFormat = 121
	RenderingDeviceDataFormatE5b9g9r9UfloatPack32 RenderingDeviceDataFormat = 122
	RenderingDeviceDataFormatD16Unorm RenderingDeviceDataFormat = 123
	RenderingDeviceDataFormatX8D24UnormPack32 RenderingDeviceDataFormat = 124
	RenderingDeviceDataFormatD32Sfloat RenderingDeviceDataFormat = 125
	RenderingDeviceDataFormatS8Uint RenderingDeviceDataFormat = 126
	RenderingDeviceDataFormatD16UnormS8Uint RenderingDeviceDataFormat = 127
	RenderingDeviceDataFormatD24UnormS8Uint RenderingDeviceDataFormat = 128
	RenderingDeviceDataFormatD32SfloatS8Uint RenderingDeviceDataFormat = 129
	RenderingDeviceDataFormatBc1RgbUnormBlock RenderingDeviceDataFormat = 130
	RenderingDeviceDataFormatBc1RgbSrgbBlock RenderingDeviceDataFormat = 131
	RenderingDeviceDataFormatBc1RgbaUnormBlock RenderingDeviceDataFormat = 132
	RenderingDeviceDataFormatBc1RgbaSrgbBlock RenderingDeviceDataFormat = 133
	RenderingDeviceDataFormatBc2UnormBlock RenderingDeviceDataFormat = 134
	RenderingDeviceDataFormatBc2SrgbBlock RenderingDeviceDataFormat = 135
	RenderingDeviceDataFormatBc3UnormBlock RenderingDeviceDataFormat = 136
	RenderingDeviceDataFormatBc3SrgbBlock RenderingDeviceDataFormat = 137
	RenderingDeviceDataFormatBc4UnormBlock RenderingDeviceDataFormat = 138
	RenderingDeviceDataFormatBc4SnormBlock RenderingDeviceDataFormat = 139
	RenderingDeviceDataFormatBc5UnormBlock RenderingDeviceDataFormat = 140
	RenderingDeviceDataFormatBc5SnormBlock RenderingDeviceDataFormat = 141
	RenderingDeviceDataFormatBc6hUfloatBlock RenderingDeviceDataFormat = 142
	RenderingDeviceDataFormatBc6hSfloatBlock RenderingDeviceDataFormat = 143
	RenderingDeviceDataFormatBc7UnormBlock RenderingDeviceDataFormat = 144
	RenderingDeviceDataFormatBc7SrgbBlock RenderingDeviceDataFormat = 145
	RenderingDeviceDataFormatEtc2R8g8b8UnormBlock RenderingDeviceDataFormat = 146
	RenderingDeviceDataFormatEtc2R8g8b8SrgbBlock RenderingDeviceDataFormat = 147
	RenderingDeviceDataFormatEtc2R8g8b8a1UnormBlock RenderingDeviceDataFormat = 148
	RenderingDeviceDataFormatEtc2R8g8b8a1SrgbBlock RenderingDeviceDataFormat = 149
	RenderingDeviceDataFormatEtc2R8g8b8a8UnormBlock RenderingDeviceDataFormat = 150
	RenderingDeviceDataFormatEtc2R8g8b8a8SrgbBlock RenderingDeviceDataFormat = 151
	RenderingDeviceDataFormatEacR11UnormBlock RenderingDeviceDataFormat = 152
	RenderingDeviceDataFormatEacR11SnormBlock RenderingDeviceDataFormat = 153
	RenderingDeviceDataFormatEacR11g11UnormBlock RenderingDeviceDataFormat = 154
	RenderingDeviceDataFormatEacR11g11SnormBlock RenderingDeviceDataFormat = 155
	RenderingDeviceDataFormatAstc4x4UnormBlock RenderingDeviceDataFormat = 156
	RenderingDeviceDataFormatAstc4x4SrgbBlock RenderingDeviceDataFormat = 157
	RenderingDeviceDataFormatAstc5x4UnormBlock RenderingDeviceDataFormat = 158
	RenderingDeviceDataFormatAstc5x4SrgbBlock RenderingDeviceDataFormat = 159
	RenderingDeviceDataFormatAstc5x5UnormBlock RenderingDeviceDataFormat = 160
	RenderingDeviceDataFormatAstc5x5SrgbBlock RenderingDeviceDataFormat = 161
	RenderingDeviceDataFormatAstc6x5UnormBlock RenderingDeviceDataFormat = 162
	RenderingDeviceDataFormatAstc6x5SrgbBlock RenderingDeviceDataFormat = 163
	RenderingDeviceDataFormatAstc6x6UnormBlock RenderingDeviceDataFormat = 164
	RenderingDeviceDataFormatAstc6x6SrgbBlock RenderingDeviceDataFormat = 165
	RenderingDeviceDataFormatAstc8x5UnormBlock RenderingDeviceDataFormat = 166
	RenderingDeviceDataFormatAstc8x5SrgbBlock RenderingDeviceDataFormat = 167
	RenderingDeviceDataFormatAstc8x6UnormBlock RenderingDeviceDataFormat = 168
	RenderingDeviceDataFormatAstc8x6SrgbBlock RenderingDeviceDataFormat = 169
	RenderingDeviceDataFormatAstc8x8UnormBlock RenderingDeviceDataFormat = 170
	RenderingDeviceDataFormatAstc8x8SrgbBlock RenderingDeviceDataFormat = 171
	RenderingDeviceDataFormatAstc10x5UnormBlock RenderingDeviceDataFormat = 172
	RenderingDeviceDataFormatAstc10x5SrgbBlock RenderingDeviceDataFormat = 173
	RenderingDeviceDataFormatAstc10x6UnormBlock RenderingDeviceDataFormat = 174
	RenderingDeviceDataFormatAstc10x6SrgbBlock RenderingDeviceDataFormat = 175
	RenderingDeviceDataFormatAstc10x8UnormBlock RenderingDeviceDataFormat = 176
	RenderingDeviceDataFormatAstc10x8SrgbBlock RenderingDeviceDataFormat = 177
	RenderingDeviceDataFormatAstc10x10UnormBlock RenderingDeviceDataFormat = 178
	RenderingDeviceDataFormatAstc10x10SrgbBlock RenderingDeviceDataFormat = 179
	RenderingDeviceDataFormatAstc12x10UnormBlock RenderingDeviceDataFormat = 180
	RenderingDeviceDataFormatAstc12x10SrgbBlock RenderingDeviceDataFormat = 181
	RenderingDeviceDataFormatAstc12x12UnormBlock RenderingDeviceDataFormat = 182
	RenderingDeviceDataFormatAstc12x12SrgbBlock RenderingDeviceDataFormat = 183
	RenderingDeviceDataFormatG8b8g8r8422Unorm RenderingDeviceDataFormat = 184
	RenderingDeviceDataFormatB8g8r8g8422Unorm RenderingDeviceDataFormat = 185
	RenderingDeviceDataFormatG8B8R83plane420Unorm RenderingDeviceDataFormat = 186
	RenderingDeviceDataFormatG8B8r82plane420Unorm RenderingDeviceDataFormat = 187
	RenderingDeviceDataFormatG8B8R83plane422Unorm RenderingDeviceDataFormat = 188
	RenderingDeviceDataFormatG8B8r82plane422Unorm RenderingDeviceDataFormat = 189
	RenderingDeviceDataFormatG8B8R83plane444Unorm RenderingDeviceDataFormat = 190
	RenderingDeviceDataFormatR10x6UnormPack16 RenderingDeviceDataFormat = 191
	RenderingDeviceDataFormatR10x6g10x6Unorm2pack16 RenderingDeviceDataFormat = 192
	RenderingDeviceDataFormatR10x6g10x6b10x6a10x6Unorm4pack16 RenderingDeviceDataFormat = 193
	RenderingDeviceDataFormatG10x6b10x6g10x6r10x6422Unorm4pack16 RenderingDeviceDataFormat = 194
	RenderingDeviceDataFormatB10x6g10x6r10x6g10x6422Unorm4pack16 RenderingDeviceDataFormat = 195
	RenderingDeviceDataFormatG10x6B10x6R10x63plane420Unorm3pack16 RenderingDeviceDataFormat = 196
	RenderingDeviceDataFormatG10x6B10x6r10x62plane420Unorm3pack16 RenderingDeviceDataFormat = 197
	RenderingDeviceDataFormatG10x6B10x6R10x63plane422Unorm3pack16 RenderingDeviceDataFormat = 198
	RenderingDeviceDataFormatG10x6B10x6r10x62plane422Unorm3pack16 RenderingDeviceDataFormat = 199
	RenderingDeviceDataFormatG10x6B10x6R10x63plane444Unorm3pack16 RenderingDeviceDataFormat = 200
	RenderingDeviceDataFormatR12x4UnormPack16 RenderingDeviceDataFormat = 201
	RenderingDeviceDataFormatR12x4g12x4Unorm2pack16 RenderingDeviceDataFormat = 202
	RenderingDeviceDataFormatR12x4g12x4b12x4a12x4Unorm4pack16 RenderingDeviceDataFormat = 203
	RenderingDeviceDataFormatG12x4b12x4g12x4r12x4422Unorm4pack16 RenderingDeviceDataFormat = 204
	RenderingDeviceDataFormatB12x4g12x4r12x4g12x4422Unorm4pack16 RenderingDeviceDataFormat = 205
	RenderingDeviceDataFormatG12x4B12x4R12x43plane420Unorm3pack16 RenderingDeviceDataFormat = 206
	RenderingDeviceDataFormatG12x4B12x4r12x42plane420Unorm3pack16 RenderingDeviceDataFormat = 207
	RenderingDeviceDataFormatG12x4B12x4R12x43plane422Unorm3pack16 RenderingDeviceDataFormat = 208
	RenderingDeviceDataFormatG12x4B12x4r12x42plane422Unorm3pack16 RenderingDeviceDataFormat = 209
	RenderingDeviceDataFormatG12x4B12x4R12x43plane444Unorm3pack16 RenderingDeviceDataFormat = 210
	RenderingDeviceDataFormatG16b16g16r16422Unorm RenderingDeviceDataFormat = 211
	RenderingDeviceDataFormatB16g16r16g16422Unorm RenderingDeviceDataFormat = 212
	RenderingDeviceDataFormatG16B16R163plane420Unorm RenderingDeviceDataFormat = 213
	RenderingDeviceDataFormatG16B16r162plane420Unorm RenderingDeviceDataFormat = 214
	RenderingDeviceDataFormatG16B16R163plane422Unorm RenderingDeviceDataFormat = 215
	RenderingDeviceDataFormatG16B16r162plane422Unorm RenderingDeviceDataFormat = 216
	RenderingDeviceDataFormatG16B16R163plane444Unorm RenderingDeviceDataFormat = 217
	RenderingDeviceDataFormatMax RenderingDeviceDataFormat = 218
)

type RenderingDeviceTextureType int64

const (
	RenderingDeviceTextureType1d RenderingDeviceTextureType = 0
	RenderingDeviceTextureType2d RenderingDeviceTextureType = 1
	RenderingDeviceTextureType3d RenderingDeviceTextureType = 2
	RenderingDeviceTextureTypeCube RenderingDeviceTextureType = 3
	RenderingDeviceTextureType1dArray RenderingDeviceTextureType = 4
	RenderingDeviceTextureType2dArray RenderingDeviceTextureType = 5
	RenderingDeviceTextureTypeCubeArray RenderingDeviceTextureType = 6
	RenderingDeviceTextureTypeMax RenderingDeviceTextureType = 7
)

type RenderingDeviceTextureSamples int64

const (
	RenderingDeviceTextureSamples1 RenderingDeviceTextureSamples = 0
	RenderingDeviceTextureSamples2 RenderingDeviceTextureSamples = 1
	RenderingDeviceTextureSamples4 RenderingDeviceTextureSamples = 2
	RenderingDeviceTextureSamples8 RenderingDeviceTextureSamples = 3
	RenderingDeviceTextureSamples16 RenderingDeviceTextureSamples = 4
	RenderingDeviceTextureSamples32 RenderingDeviceTextureSamples = 5
	RenderingDeviceTextureSamples64 RenderingDeviceTextureSamples = 6
	RenderingDeviceTextureSamplesMax RenderingDeviceTextureSamples = 7
)

type RenderingDeviceTextureUsageBits int64

const (
	RenderingDeviceTextureUsageSamplingBit RenderingDeviceTextureUsageBits = 1
	RenderingDeviceTextureUsageColorAttachmentBit RenderingDeviceTextureUsageBits = 2
	RenderingDeviceTextureUsageDepthStencilAttachmentBit RenderingDeviceTextureUsageBits = 4
	RenderingDeviceTextureUsageStorageBit RenderingDeviceTextureUsageBits = 8
	RenderingDeviceTextureUsageStorageAtomicBit RenderingDeviceTextureUsageBits = 16
	RenderingDeviceTextureUsageCpuReadBit RenderingDeviceTextureUsageBits = 32
	RenderingDeviceTextureUsageCanUpdateBit RenderingDeviceTextureUsageBits = 64
	RenderingDeviceTextureUsageCanCopyFromBit RenderingDeviceTextureUsageBits = 128
	RenderingDeviceTextureUsageCanCopyToBit RenderingDeviceTextureUsageBits = 256
	RenderingDeviceTextureUsageInputAttachmentBit RenderingDeviceTextureUsageBits = 512
)

type RenderingDeviceTextureSwizzle int64

const (
	RenderingDeviceTextureSwizzleIdentity RenderingDeviceTextureSwizzle = 0
	RenderingDeviceTextureSwizzleZero RenderingDeviceTextureSwizzle = 1
	RenderingDeviceTextureSwizzleOne RenderingDeviceTextureSwizzle = 2
	RenderingDeviceTextureSwizzleR RenderingDeviceTextureSwizzle = 3
	RenderingDeviceTextureSwizzleG RenderingDeviceTextureSwizzle = 4
	RenderingDeviceTextureSwizzleB RenderingDeviceTextureSwizzle = 5
	RenderingDeviceTextureSwizzleA RenderingDeviceTextureSwizzle = 6
	RenderingDeviceTextureSwizzleMax RenderingDeviceTextureSwizzle = 7
)

type RenderingDeviceTextureSliceType int64

const (
	RenderingDeviceTextureSlice2d RenderingDeviceTextureSliceType = 0
	RenderingDeviceTextureSliceCubemap RenderingDeviceTextureSliceType = 1
	RenderingDeviceTextureSlice3d RenderingDeviceTextureSliceType = 2
)

type RenderingDeviceSamplerFilter int64

const (
	RenderingDeviceSamplerFilterNearest RenderingDeviceSamplerFilter = 0
	RenderingDeviceSamplerFilterLinear RenderingDeviceSamplerFilter = 1
)

type RenderingDeviceSamplerRepeatMode int64

const (
	RenderingDeviceSamplerRepeatModeRepeat RenderingDeviceSamplerRepeatMode = 0
	RenderingDeviceSamplerRepeatModeMirroredRepeat RenderingDeviceSamplerRepeatMode = 1
	RenderingDeviceSamplerRepeatModeClampToEdge RenderingDeviceSamplerRepeatMode = 2
	RenderingDeviceSamplerRepeatModeClampToBorder RenderingDeviceSamplerRepeatMode = 3
	RenderingDeviceSamplerRepeatModeMirrorClampToEdge RenderingDeviceSamplerRepeatMode = 4
	RenderingDeviceSamplerRepeatModeMax RenderingDeviceSamplerRepeatMode = 5
)

type RenderingDeviceSamplerBorderColor int64

const (
	RenderingDeviceSamplerBorderColorFloatTransparentBlack RenderingDeviceSamplerBorderColor = 0
	RenderingDeviceSamplerBorderColorIntTransparentBlack RenderingDeviceSamplerBorderColor = 1
	RenderingDeviceSamplerBorderColorFloatOpaqueBlack RenderingDeviceSamplerBorderColor = 2
	RenderingDeviceSamplerBorderColorIntOpaqueBlack RenderingDeviceSamplerBorderColor = 3
	RenderingDeviceSamplerBorderColorFloatOpaqueWhite RenderingDeviceSamplerBorderColor = 4
	RenderingDeviceSamplerBorderColorIntOpaqueWhite RenderingDeviceSamplerBorderColor = 5
	RenderingDeviceSamplerBorderColorMax RenderingDeviceSamplerBorderColor = 6
)

type RenderingDeviceVertexFrequency int64

const (
	RenderingDeviceVertexFrequencyVertex RenderingDeviceVertexFrequency = 0
	RenderingDeviceVertexFrequencyInstance RenderingDeviceVertexFrequency = 1
)

type RenderingDeviceIndexBufferFormat int64

const (
	RenderingDeviceIndexBufferFormatUint16 RenderingDeviceIndexBufferFormat = 0
	RenderingDeviceIndexBufferFormatUint32 RenderingDeviceIndexBufferFormat = 1
)

type RenderingDeviceStorageBufferUsage int64

const (
	RenderingDeviceStorageBufferUsageDispatchIndirect RenderingDeviceStorageBufferUsage = 1
)

type RenderingDeviceUniformType int64

const (
	RenderingDeviceUniformTypeSampler RenderingDeviceUniformType = 0
	RenderingDeviceUniformTypeSamplerWithTexture RenderingDeviceUniformType = 1
	RenderingDeviceUniformTypeTexture RenderingDeviceUniformType = 2
	RenderingDeviceUniformTypeImage RenderingDeviceUniformType = 3
	RenderingDeviceUniformTypeTextureBuffer RenderingDeviceUniformType = 4
	RenderingDeviceUniformTypeSamplerWithTextureBuffer RenderingDeviceUniformType = 5
	RenderingDeviceUniformTypeImageBuffer RenderingDeviceUniformType = 6
	RenderingDeviceUniformTypeUniformBuffer RenderingDeviceUniformType = 7
	RenderingDeviceUniformTypeStorageBuffer RenderingDeviceUniformType = 8
	RenderingDeviceUniformTypeInputAttachment RenderingDeviceUniformType = 9
	RenderingDeviceUniformTypeMax RenderingDeviceUniformType = 10
)

type RenderingDeviceRenderPrimitive int64

const (
	RenderingDeviceRenderPrimitivePoints RenderingDeviceRenderPrimitive = 0
	RenderingDeviceRenderPrimitiveLines RenderingDeviceRenderPrimitive = 1
	RenderingDeviceRenderPrimitiveLinesWithAdjacency RenderingDeviceRenderPrimitive = 2
	RenderingDeviceRenderPrimitiveLinestrips RenderingDeviceRenderPrimitive = 3
	RenderingDeviceRenderPrimitiveLinestripsWithAdjacency RenderingDeviceRenderPrimitive = 4
	RenderingDeviceRenderPrimitiveTriangles RenderingDeviceRenderPrimitive = 5
	RenderingDeviceRenderPrimitiveTrianglesWithAdjacency RenderingDeviceRenderPrimitive = 6
	RenderingDeviceRenderPrimitiveTriangleStrips RenderingDeviceRenderPrimitive = 7
	RenderingDeviceRenderPrimitiveTriangleStripsWithAjacency RenderingDeviceRenderPrimitive = 8
	RenderingDeviceRenderPrimitiveTriangleStripsWithRestartIndex RenderingDeviceRenderPrimitive = 9
	RenderingDeviceRenderPrimitiveTesselationPatch RenderingDeviceRenderPrimitive = 10
	RenderingDeviceRenderPrimitiveMax RenderingDeviceRenderPrimitive = 11
)

type RenderingDevicePolygonCullMode int64

const (
	RenderingDevicePolygonCullDisabled RenderingDevicePolygonCullMode = 0
	RenderingDevicePolygonCullFront RenderingDevicePolygonCullMode = 1
	RenderingDevicePolygonCullBack RenderingDevicePolygonCullMode = 2
)

type RenderingDevicePolygonFrontFace int64

const (
	RenderingDevicePolygonFrontFaceClockwise RenderingDevicePolygonFrontFace = 0
	RenderingDevicePolygonFrontFaceCounterClockwise RenderingDevicePolygonFrontFace = 1
)

type RenderingDeviceStencilOperation int64

const (
	RenderingDeviceStencilOpKeep RenderingDeviceStencilOperation = 0
	RenderingDeviceStencilOpZero RenderingDeviceStencilOperation = 1
	RenderingDeviceStencilOpReplace RenderingDeviceStencilOperation = 2
	RenderingDeviceStencilOpIncrementAndClamp RenderingDeviceStencilOperation = 3
	RenderingDeviceStencilOpDecrementAndClamp RenderingDeviceStencilOperation = 4
	RenderingDeviceStencilOpInvert RenderingDeviceStencilOperation = 5
	RenderingDeviceStencilOpIncrementAndWrap RenderingDeviceStencilOperation = 6
	RenderingDeviceStencilOpDecrementAndWrap RenderingDeviceStencilOperation = 7
	RenderingDeviceStencilOpMax RenderingDeviceStencilOperation = 8
)

type RenderingDeviceCompareOperator int64

const (
	RenderingDeviceCompareOpNever RenderingDeviceCompareOperator = 0
	RenderingDeviceCompareOpLess RenderingDeviceCompareOperator = 1
	RenderingDeviceCompareOpEqual RenderingDeviceCompareOperator = 2
	RenderingDeviceCompareOpLessOrEqual RenderingDeviceCompareOperator = 3
	RenderingDeviceCompareOpGreater RenderingDeviceCompareOperator = 4
	RenderingDeviceCompareOpNotEqual RenderingDeviceCompareOperator = 5
	RenderingDeviceCompareOpGreaterOrEqual RenderingDeviceCompareOperator = 6
	RenderingDeviceCompareOpAlways RenderingDeviceCompareOperator = 7
	RenderingDeviceCompareOpMax RenderingDeviceCompareOperator = 8
)

type RenderingDeviceLogicOperation int64

const (
	RenderingDeviceLogicOpClear RenderingDeviceLogicOperation = 0
	RenderingDeviceLogicOpAnd RenderingDeviceLogicOperation = 1
	RenderingDeviceLogicOpAndReverse RenderingDeviceLogicOperation = 2
	RenderingDeviceLogicOpCopy RenderingDeviceLogicOperation = 3
	RenderingDeviceLogicOpAndInverted RenderingDeviceLogicOperation = 4
	RenderingDeviceLogicOpNoOp RenderingDeviceLogicOperation = 5
	RenderingDeviceLogicOpXor RenderingDeviceLogicOperation = 6
	RenderingDeviceLogicOpOr RenderingDeviceLogicOperation = 7
	RenderingDeviceLogicOpNor RenderingDeviceLogicOperation = 8
	RenderingDeviceLogicOpEquivalent RenderingDeviceLogicOperation = 9
	RenderingDeviceLogicOpInvert RenderingDeviceLogicOperation = 10
	RenderingDeviceLogicOpOrReverse RenderingDeviceLogicOperation = 11
	RenderingDeviceLogicOpCopyInverted RenderingDeviceLogicOperation = 12
	RenderingDeviceLogicOpOrInverted RenderingDeviceLogicOperation = 13
	RenderingDeviceLogicOpNand RenderingDeviceLogicOperation = 14
	RenderingDeviceLogicOpSet RenderingDeviceLogicOperation = 15
	RenderingDeviceLogicOpMax RenderingDeviceLogicOperation = 16
)

type RenderingDeviceBlendFactor int64

const (
	RenderingDeviceBlendFactorZero RenderingDeviceBlendFactor = 0
	RenderingDeviceBlendFactorOne RenderingDeviceBlendFactor = 1
	RenderingDeviceBlendFactorSrcColor RenderingDeviceBlendFactor = 2
	RenderingDeviceBlendFactorOneMinusSrcColor RenderingDeviceBlendFactor = 3
	RenderingDeviceBlendFactorDstColor RenderingDeviceBlendFactor = 4
	RenderingDeviceBlendFactorOneMinusDstColor RenderingDeviceBlendFactor = 5
	RenderingDeviceBlendFactorSrcAlpha RenderingDeviceBlendFactor = 6
	RenderingDeviceBlendFactorOneMinusSrcAlpha RenderingDeviceBlendFactor = 7
	RenderingDeviceBlendFactorDstAlpha RenderingDeviceBlendFactor = 8
	RenderingDeviceBlendFactorOneMinusDstAlpha RenderingDeviceBlendFactor = 9
	RenderingDeviceBlendFactorConstantColor RenderingDeviceBlendFactor = 10
	RenderingDeviceBlendFactorOneMinusConstantColor RenderingDeviceBlendFactor = 11
	RenderingDeviceBlendFactorConstantAlpha RenderingDeviceBlendFactor = 12
	RenderingDeviceBlendFactorOneMinusConstantAlpha RenderingDeviceBlendFactor = 13
	RenderingDeviceBlendFactorSrcAlphaSaturate RenderingDeviceBlendFactor = 14
	RenderingDeviceBlendFactorSrc1Color RenderingDeviceBlendFactor = 15
	RenderingDeviceBlendFactorOneMinusSrc1Color RenderingDeviceBlendFactor = 16
	RenderingDeviceBlendFactorSrc1Alpha RenderingDeviceBlendFactor = 17
	RenderingDeviceBlendFactorOneMinusSrc1Alpha RenderingDeviceBlendFactor = 18
	RenderingDeviceBlendFactorMax RenderingDeviceBlendFactor = 19
)

type RenderingDeviceBlendOperation int64

const (
	RenderingDeviceBlendOpAdd RenderingDeviceBlendOperation = 0
	RenderingDeviceBlendOpSubtract RenderingDeviceBlendOperation = 1
	RenderingDeviceBlendOpReverseSubtract RenderingDeviceBlendOperation = 2
	RenderingDeviceBlendOpMinimum RenderingDeviceBlendOperation = 3
	RenderingDeviceBlendOpMaximum RenderingDeviceBlendOperation = 4
	RenderingDeviceBlendOpMax RenderingDeviceBlendOperation = 5
)

type RenderingDevicePipelineDynamicStateFlags int64

const (
	RenderingDeviceDynamicStateLineWidth RenderingDevicePipelineDynamicStateFlags = 1
	RenderingDeviceDynamicStateDepthBias RenderingDevicePipelineDynamicStateFlags = 2
	RenderingDeviceDynamicStateBlendConstants RenderingDevicePipelineDynamicStateFlags = 4
	RenderingDeviceDynamicStateDepthBounds RenderingDevicePipelineDynamicStateFlags = 8
	RenderingDeviceDynamicStateStencilCompareMask RenderingDevicePipelineDynamicStateFlags = 16
	RenderingDeviceDynamicStateStencilWriteMask RenderingDevicePipelineDynamicStateFlags = 32
	RenderingDeviceDynamicStateStencilReference RenderingDevicePipelineDynamicStateFlags = 64
)

type RenderingDeviceInitialAction int64

const (
	RenderingDeviceInitialActionClear RenderingDeviceInitialAction = 0
	RenderingDeviceInitialActionClearRegion RenderingDeviceInitialAction = 1
	RenderingDeviceInitialActionClearRegionContinue RenderingDeviceInitialAction = 2
	RenderingDeviceInitialActionKeep RenderingDeviceInitialAction = 3
	RenderingDeviceInitialActionDrop RenderingDeviceInitialAction = 4
	RenderingDeviceInitialActionContinue RenderingDeviceInitialAction = 5
	RenderingDeviceInitialActionMax RenderingDeviceInitialAction = 6
)

type RenderingDeviceFinalAction int64

const (
	RenderingDeviceFinalActionRead RenderingDeviceFinalAction = 0
	RenderingDeviceFinalActionDiscard RenderingDeviceFinalAction = 1
	RenderingDeviceFinalActionContinue RenderingDeviceFinalAction = 2
	RenderingDeviceFinalActionMax RenderingDeviceFinalAction = 3
)

type RenderingDeviceShaderStage int64

const (
	RenderingDeviceShaderStageVertex RenderingDeviceShaderStage = 0
	RenderingDeviceShaderStageFragment RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageTesselationControl RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationEvaluation RenderingDeviceShaderStage = 3
	RenderingDeviceShaderStageCompute RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageMax RenderingDeviceShaderStage = 5
	RenderingDeviceShaderStageVertexBit RenderingDeviceShaderStage = 1
	RenderingDeviceShaderStageFragmentBit RenderingDeviceShaderStage = 2
	RenderingDeviceShaderStageTesselationControlBit RenderingDeviceShaderStage = 4
	RenderingDeviceShaderStageTesselationEvaluationBit RenderingDeviceShaderStage = 8
	RenderingDeviceShaderStageComputeBit RenderingDeviceShaderStage = 16
)

type RenderingDeviceShaderLanguage int64

const (
	RenderingDeviceShaderLanguageGlsl RenderingDeviceShaderLanguage = 0
	RenderingDeviceShaderLanguageHlsl RenderingDeviceShaderLanguage = 1
)

type RenderingDevicePipelineSpecializationConstantType int64

const (
	RenderingDevicePipelineSpecializationConstantTypeBool RenderingDevicePipelineSpecializationConstantType = 0
	RenderingDevicePipelineSpecializationConstantTypeInt RenderingDevicePipelineSpecializationConstantType = 1
	RenderingDevicePipelineSpecializationConstantTypeFloat RenderingDevicePipelineSpecializationConstantType = 2
)

type RenderingDeviceLimit int64

const (
	RenderingDeviceLimitMaxBoundUniformSets RenderingDeviceLimit = 0
	RenderingDeviceLimitMaxFramebufferColorAttachments RenderingDeviceLimit = 1
	RenderingDeviceLimitMaxTexturesPerUniformSet RenderingDeviceLimit = 2
	RenderingDeviceLimitMaxSamplersPerUniformSet RenderingDeviceLimit = 3
	RenderingDeviceLimitMaxStorageBuffersPerUniformSet RenderingDeviceLimit = 4
	RenderingDeviceLimitMaxStorageImagesPerUniformSet RenderingDeviceLimit = 5
	RenderingDeviceLimitMaxUniformBuffersPerUniformSet RenderingDeviceLimit = 6
	RenderingDeviceLimitMaxDrawIndexedIndex RenderingDeviceLimit = 7
	RenderingDeviceLimitMaxFramebufferHeight RenderingDeviceLimit = 8
	RenderingDeviceLimitMaxFramebufferWidth RenderingDeviceLimit = 9
	RenderingDeviceLimitMaxTextureArrayLayers RenderingDeviceLimit = 10
	RenderingDeviceLimitMaxTextureSize1d RenderingDeviceLimit = 11
	RenderingDeviceLimitMaxTextureSize2d RenderingDeviceLimit = 12
	RenderingDeviceLimitMaxTextureSize3d RenderingDeviceLimit = 13
	RenderingDeviceLimitMaxTextureSizeCube RenderingDeviceLimit = 14
	RenderingDeviceLimitMaxTexturesPerShaderStage RenderingDeviceLimit = 15
	RenderingDeviceLimitMaxSamplersPerShaderStage RenderingDeviceLimit = 16
	RenderingDeviceLimitMaxStorageBuffersPerShaderStage RenderingDeviceLimit = 17
	RenderingDeviceLimitMaxStorageImagesPerShaderStage RenderingDeviceLimit = 18
	RenderingDeviceLimitMaxUniformBuffersPerShaderStage RenderingDeviceLimit = 19
	RenderingDeviceLimitMaxPushConstantSize RenderingDeviceLimit = 20
	RenderingDeviceLimitMaxUniformBufferSize RenderingDeviceLimit = 21
	RenderingDeviceLimitMaxVertexInputAttributeOffset RenderingDeviceLimit = 22
	RenderingDeviceLimitMaxVertexInputAttributes RenderingDeviceLimit = 23
	RenderingDeviceLimitMaxVertexInputBindings RenderingDeviceLimit = 24
	RenderingDeviceLimitMaxVertexInputBindingStride RenderingDeviceLimit = 25
	RenderingDeviceLimitMinUniformBufferOffsetAlignment RenderingDeviceLimit = 26
	RenderingDeviceLimitMaxComputeSharedMemorySize RenderingDeviceLimit = 27
	RenderingDeviceLimitMaxComputeWorkgroupCountX RenderingDeviceLimit = 28
	RenderingDeviceLimitMaxComputeWorkgroupCountY RenderingDeviceLimit = 29
	RenderingDeviceLimitMaxComputeWorkgroupCountZ RenderingDeviceLimit = 30
	RenderingDeviceLimitMaxComputeWorkgroupInvocations RenderingDeviceLimit = 31
	RenderingDeviceLimitMaxComputeWorkgroupSizeX RenderingDeviceLimit = 32
	RenderingDeviceLimitMaxComputeWorkgroupSizeY RenderingDeviceLimit = 33
	RenderingDeviceLimitMaxComputeWorkgroupSizeZ RenderingDeviceLimit = 34
)

type RenderingDeviceMemoryType int64

const (
	RenderingDeviceMemoryTextures RenderingDeviceMemoryType = 0
	RenderingDeviceMemoryBuffers RenderingDeviceMemoryType = 1
	RenderingDeviceMemoryTotal RenderingDeviceMemoryType = 2
)

type RenderingDevice struct{self *RenderingDevice; obj safeObject }
func NewRenderingDevice(ctx Context, at *RenderingDevice) RenderingDevice { if at == nil { at = new(RenderingDevice) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RenderingDevice) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RenderingDevice) owner() cObject { return gdClass.obj.get() }
func (RenderingDevice) class() string { return "RenderingDevice\000" }

func (gdClass RenderingDevice) Object() Object { return Object{obj:gdClass.obj} }

var methodRenderingDevice [90]cMethodBind
func (gdClass RenderingDevice) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass RenderingDevice) TextureCreate(format RDTextureFormat, view RDTextureView, data Array) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[0], &format, &view, &data) }
func (gdClass RenderingDevice) TextureCreateShared(view RDTextureView, with_texture RID) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[1], &view, &with_texture) }
func (gdClass RenderingDevice) TextureCreateSharedFromSlice(view RDTextureView, with_texture RID, layer int64, mipmap int64, mipmaps int64, slice_type RenderingDeviceTextureSliceType) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[2], &view, &with_texture, &layer, &mipmap, &mipmaps, &slice_type) }
func (gdClass RenderingDevice) TextureUpdate(texture RID, layer int64, data []byte, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[3], &texture, &layer, &data, &post_barrier) }
func (gdClass RenderingDevice) TextureGetData(texture RID, layer int64) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingDevice[4], &texture, &layer) }
func (gdClass RenderingDevice) TextureIsFormatSupportedForUsage(format RenderingDeviceDataFormat, usage_flags int64) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[5], &format, &usage_flags) }
func (gdClass RenderingDevice) TextureIsShared(texture RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[6], &texture) }
func (gdClass RenderingDevice) TextureIsValid(texture RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[7], &texture) }
func (gdClass RenderingDevice) TextureCopy(from_texture RID, to_texture RID, from_pos Vector3, to_pos Vector3, size Vector3, src_mipmap int64, dst_mipmap int64, src_layer int64, dst_layer int64, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[8], &from_texture, &to_texture, &from_pos, &to_pos, &size, &src_mipmap, &dst_mipmap, &src_layer, &dst_layer, &post_barrier) }
func (gdClass RenderingDevice) TextureClear(texture RID, color Color, base_mipmap int64, mipmap_count int64, base_layer int64, layer_count int64, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[9], &texture, &color, &base_mipmap, &mipmap_count, &base_layer, &layer_count, &post_barrier) }
func (gdClass RenderingDevice) TextureResolveMultisample(from_texture RID, to_texture RID, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[10], &from_texture, &to_texture, &post_barrier) }
func (gdClass RenderingDevice) FramebufferFormatCreate(attachments Array, view_count int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[11], &attachments, &view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateMultipass(attachments Array, passes Array, view_count int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[12], &attachments, &passes, &view_count) }
func (gdClass RenderingDevice) FramebufferFormatCreateEmpty(samples RenderingDeviceTextureSamples) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[13], &samples) }
func (gdClass RenderingDevice) FramebufferFormatGetTextureSamples(format int64, render_pass int64) RenderingDeviceTextureSamples { return methodCall[RenderingDeviceTextureSamples](gdClass.obj.get(), methodRenderingDevice[14], &format, &render_pass) }
func (gdClass RenderingDevice) FramebufferCreate(textures Array, validate_with_format int64, view_count int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[15], &textures, &validate_with_format, &view_count) }
func (gdClass RenderingDevice) FramebufferCreateMultipass(textures Array, passes Array, validate_with_format int64, view_count int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[16], &textures, &passes, &validate_with_format, &view_count) }
func (gdClass RenderingDevice) FramebufferCreateEmpty(size Vector2i, samples RenderingDeviceTextureSamples, validate_with_format int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[17], &size, &samples, &validate_with_format) }
func (gdClass RenderingDevice) FramebufferGetFormat(framebuffer RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[18], &framebuffer) }
func (gdClass RenderingDevice) FramebufferIsValid(framebuffer RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[19], &framebuffer) }
func (gdClass RenderingDevice) SamplerCreate(state RDSamplerState) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[20], &state) }
func (gdClass RenderingDevice) VertexBufferCreate(size_bytes int64, data []byte, use_as_storage bool) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[21], &size_bytes, &data, &use_as_storage) }
func (gdClass RenderingDevice) VertexFormatCreate(vertex_descriptions Array) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[22], &vertex_descriptions) }
func (gdClass RenderingDevice) IndexBufferCreate(size_indices int64, format RenderingDeviceIndexBufferFormat, data []byte, use_restart_indices bool) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[23], &size_indices, &format, &data, &use_restart_indices) }
func (gdClass RenderingDevice) IndexArrayCreate(index_buffer RID, index_offset int64, index_count int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[24], &index_buffer, &index_offset, &index_count) }
func (gdClass RenderingDevice) ShaderCompileSpirvFromSource(shader_source RDShaderSource, allow_cache bool) RDShaderSPIRV { return methodCall[RDShaderSPIRV](gdClass.obj.get(), methodRenderingDevice[25], &shader_source, &allow_cache) }
func (gdClass RenderingDevice) ShaderCompileBinaryFromSpirv(spirv_data RDShaderSPIRV, name string) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingDevice[26], &spirv_data, &name) }
func (gdClass RenderingDevice) ShaderCreateFromSpirv(spirv_data RDShaderSPIRV, name string) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[27], &spirv_data, &name) }
func (gdClass RenderingDevice) ShaderCreateFromBytecode(binary_data []byte) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[28], &binary_data) }
func (gdClass RenderingDevice) ShaderGetVertexInputAttributeMask(shader RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[29], &shader) }
func (gdClass RenderingDevice) UniformBufferCreate(size_bytes int64, data []byte) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[30], &size_bytes, &data) }
func (gdClass RenderingDevice) StorageBufferCreate(size_bytes int64, data []byte, usage int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[31], &size_bytes, &data, &usage) }
func (gdClass RenderingDevice) TextureBufferCreate(size_bytes int64, format RenderingDeviceDataFormat, data []byte) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[32], &size_bytes, &format, &data) }
func (gdClass RenderingDevice) UniformSetCreate(uniforms Array, shader RID, shader_set int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[33], &uniforms, &shader, &shader_set) }
func (gdClass RenderingDevice) UniformSetIsValid(uniform_set RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[34], &uniform_set) }
func (gdClass RenderingDevice) BufferUpdate(buffer RID, offset int64, size_bytes int64, data []byte, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[35], &buffer, &offset, &size_bytes, &data, &post_barrier) }
func (gdClass RenderingDevice) BufferClear(buffer RID, offset int64, size_bytes int64, post_barrier int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[36], &buffer, &offset, &size_bytes, &post_barrier) }
func (gdClass RenderingDevice) BufferGetData(buffer RID) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingDevice[37], &buffer) }
func (gdClass RenderingDevice) RenderPipelineCreate(shader RID, framebuffer_format int64, vertex_format int64, primitive RenderingDeviceRenderPrimitive, rasterization_state RDPipelineRasterizationState, multisample_state RDPipelineMultisampleState, stencil_state RDPipelineDepthStencilState, color_blend_state RDPipelineColorBlendState, dynamic_state_flags int64, for_render_pass int64, specialization_constants Array) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[38], &shader, &framebuffer_format, &vertex_format, &primitive, &rasterization_state, &multisample_state, &stencil_state, &color_blend_state, &dynamic_state_flags, &for_render_pass, &specialization_constants) }
func (gdClass RenderingDevice) RenderPipelineIsValid(render_pipeline RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[39], &render_pipeline) }
func (gdClass RenderingDevice) ComputePipelineCreate(shader RID, specialization_constants Array) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingDevice[40], &shader, &specialization_constants) }
func (gdClass RenderingDevice) ComputePipelineIsValid(compute_pieline RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingDevice[41], &compute_pieline) }
func (gdClass RenderingDevice) ScreenGetWidth(screen int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[42], &screen) }
func (gdClass RenderingDevice) ScreenGetHeight(screen int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[43], &screen) }
func (gdClass RenderingDevice) ScreenGetFramebufferFormat() int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[44]) }
func (gdClass RenderingDevice) DrawListBeginForScreen(screen int64, clear_color Color) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[45], &screen, &clear_color) }
func (gdClass RenderingDevice) DrawListBegin(framebuffer RID, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[46], &framebuffer, &initial_color_action, &final_color_action, &initial_depth_action, &final_depth_action, &clear_color_values, &clear_depth, &clear_stencil, &region, &storage_textures) }
func (gdClass RenderingDevice) DrawListBeginSplit(framebuffer RID, splits int64, initial_color_action RenderingDeviceInitialAction, final_color_action RenderingDeviceFinalAction, initial_depth_action RenderingDeviceInitialAction, final_depth_action RenderingDeviceFinalAction, clear_color_values []Color, clear_depth float64, clear_stencil int64, region Rect2, storage_textures Array) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodRenderingDevice[47], &framebuffer, &splits, &initial_color_action, &final_color_action, &initial_depth_action, &final_depth_action, &clear_color_values, &clear_depth, &clear_stencil, &region, &storage_textures) }
func (gdClass RenderingDevice) DrawListSetBlendConstants(draw_list int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[48], &draw_list, &color) }
func (gdClass RenderingDevice) DrawListBindRenderPipeline(draw_list int64, render_pipeline RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[49], &draw_list, &render_pipeline) }
func (gdClass RenderingDevice) DrawListBindUniformSet(draw_list int64, uniform_set RID, set_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[50], &draw_list, &uniform_set, &set_index) }
func (gdClass RenderingDevice) DrawListBindVertexArray(draw_list int64, vertex_array RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[51], &draw_list, &vertex_array) }
func (gdClass RenderingDevice) DrawListBindIndexArray(draw_list int64, index_array RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[52], &draw_list, &index_array) }
func (gdClass RenderingDevice) DrawListSetPushConstant(draw_list int64, buffer []byte, size_bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[53], &draw_list, &buffer, &size_bytes) }
func (gdClass RenderingDevice) DrawListDraw(draw_list int64, use_indices bool, instances int64, procedural_vertex_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[54], &draw_list, &use_indices, &instances, &procedural_vertex_count) }
func (gdClass RenderingDevice) DrawListEnableScissor(draw_list int64, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[55], &draw_list, &rect) }
func (gdClass RenderingDevice) DrawListDisableScissor(draw_list int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[56], &draw_list) }
func (gdClass RenderingDevice) DrawListSwitchToNextPass() int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[57]) }
func (gdClass RenderingDevice) DrawListSwitchToNextPassSplit(splits int64) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodRenderingDevice[58], &splits) }
func (gdClass RenderingDevice) DrawListEnd(post_barrier int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[59], &post_barrier) }
func (gdClass RenderingDevice) ComputeListBegin(allow_draw_overlap bool) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[60], &allow_draw_overlap) }
func (gdClass RenderingDevice) ComputeListBindComputePipeline(compute_list int64, compute_pipeline RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[61], &compute_list, &compute_pipeline) }
func (gdClass RenderingDevice) ComputeListSetPushConstant(compute_list int64, buffer []byte, size_bytes int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[62], &compute_list, &buffer, &size_bytes) }
func (gdClass RenderingDevice) ComputeListBindUniformSet(compute_list int64, uniform_set RID, set_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[63], &compute_list, &uniform_set, &set_index) }
func (gdClass RenderingDevice) ComputeListDispatch(compute_list int64, x_groups int64, y_groups int64, z_groups int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[64], &compute_list, &x_groups, &y_groups, &z_groups) }
func (gdClass RenderingDevice) ComputeListAddBarrier(compute_list int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[65], &compute_list) }
func (gdClass RenderingDevice) ComputeListEnd(post_barrier int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[66], &post_barrier) }
func (gdClass RenderingDevice) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[67], &rid) }
func (gdClass RenderingDevice) CaptureTimestamp(name string)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[68], &name) }
func (gdClass RenderingDevice) GetCapturedTimestampsCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[69]) }
func (gdClass RenderingDevice) GetCapturedTimestampsFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[70]) }
func (gdClass RenderingDevice) GetCapturedTimestampGpuTime(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[71], &index) }
func (gdClass RenderingDevice) GetCapturedTimestampCpuTime(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[72], &index) }
func (gdClass RenderingDevice) GetCapturedTimestampName(index int64) string { return methodCall[string](gdClass.obj.get(), methodRenderingDevice[73], &index) }
func (gdClass RenderingDevice) LimitGet(limit RenderingDeviceLimit) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[74], &limit) }
func (gdClass RenderingDevice) GetFrameDelay() int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[75]) }
func (gdClass RenderingDevice) Submit()  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[76]) }
func (gdClass RenderingDevice) Sync()  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[77]) }
func (gdClass RenderingDevice) Barrier(from int64, to int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[78], &from, &to) }
func (gdClass RenderingDevice) FullBarrier()  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[79]) }
func (gdClass RenderingDevice) CreateLocalDevice() RenderingDevice { return methodCall[RenderingDevice](gdClass.obj.get(), methodRenderingDevice[80]) }
func (gdClass RenderingDevice) SetResourceName(id RID, name string)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[81], &id, &name) }
func (gdClass RenderingDevice) DrawCommandBeginLabel(name string, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[82], &name, &color) }
func (gdClass RenderingDevice) DrawCommandInsertLabel(name string, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[83], &name, &color) }
func (gdClass RenderingDevice) DrawCommandEndLabel()  { methodCall[struct{}](gdClass.obj.get(), methodRenderingDevice[84]) }
func (gdClass RenderingDevice) GetDeviceVendorName() string { return methodCall[string](gdClass.obj.get(), methodRenderingDevice[85]) }
func (gdClass RenderingDevice) GetDeviceName() string { return methodCall[string](gdClass.obj.get(), methodRenderingDevice[86]) }
func (gdClass RenderingDevice) GetDevicePipelineCacheUuid() string { return methodCall[string](gdClass.obj.get(), methodRenderingDevice[87]) }
func (gdClass RenderingDevice) GetMemoryUsage(atype RenderingDeviceMemoryType) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[88], &atype) }
func (gdClass RenderingDevice) GetDriverResource(resource RenderingDeviceDriverResource, rid RID, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingDevice[89], &resource, &rid, &index) }

type RenderingServerTextureLayeredType int64

const (
	RenderingServerTextureLayered2dArray RenderingServerTextureLayeredType = 0
	RenderingServerTextureLayeredCubemap RenderingServerTextureLayeredType = 1
	RenderingServerTextureLayeredCubemapArray RenderingServerTextureLayeredType = 2
)

type RenderingServerCubeMapLayer int64

const (
	RenderingServerCubemapLayerLeft RenderingServerCubeMapLayer = 0
	RenderingServerCubemapLayerRight RenderingServerCubeMapLayer = 1
	RenderingServerCubemapLayerBottom RenderingServerCubeMapLayer = 2
	RenderingServerCubemapLayerTop RenderingServerCubeMapLayer = 3
	RenderingServerCubemapLayerFront RenderingServerCubeMapLayer = 4
	RenderingServerCubemapLayerBack RenderingServerCubeMapLayer = 5
)

type RenderingServerShaderMode int64

const (
	RenderingServerShaderSpatial RenderingServerShaderMode = 0
	RenderingServerShaderCanvasItem RenderingServerShaderMode = 1
	RenderingServerShaderParticles RenderingServerShaderMode = 2
	RenderingServerShaderSky RenderingServerShaderMode = 3
	RenderingServerShaderFog RenderingServerShaderMode = 4
	RenderingServerShaderMax RenderingServerShaderMode = 5
)

type RenderingServerArrayType int64

const (
	RenderingServerArrayVertex RenderingServerArrayType = 0
	RenderingServerArrayNormal RenderingServerArrayType = 1
	RenderingServerArrayTangent RenderingServerArrayType = 2
	RenderingServerArrayColor RenderingServerArrayType = 3
	RenderingServerArrayTexUv RenderingServerArrayType = 4
	RenderingServerArrayTexUv2 RenderingServerArrayType = 5
	RenderingServerArrayCustom0 RenderingServerArrayType = 6
	RenderingServerArrayCustom1 RenderingServerArrayType = 7
	RenderingServerArrayCustom2 RenderingServerArrayType = 8
	RenderingServerArrayCustom3 RenderingServerArrayType = 9
	RenderingServerArrayBones RenderingServerArrayType = 10
	RenderingServerArrayWeights RenderingServerArrayType = 11
	RenderingServerArrayIndex RenderingServerArrayType = 12
	RenderingServerArrayMax RenderingServerArrayType = 13
)

type RenderingServerArrayCustomFormat int64

const (
	RenderingServerArrayCustomRgba8Unorm RenderingServerArrayCustomFormat = 0
	RenderingServerArrayCustomRgba8Snorm RenderingServerArrayCustomFormat = 1
	RenderingServerArrayCustomRgHalf RenderingServerArrayCustomFormat = 2
	RenderingServerArrayCustomRgbaHalf RenderingServerArrayCustomFormat = 3
	RenderingServerArrayCustomRFloat RenderingServerArrayCustomFormat = 4
	RenderingServerArrayCustomRgFloat RenderingServerArrayCustomFormat = 5
	RenderingServerArrayCustomRgbFloat RenderingServerArrayCustomFormat = 6
	RenderingServerArrayCustomRgbaFloat RenderingServerArrayCustomFormat = 7
	RenderingServerArrayCustomMax RenderingServerArrayCustomFormat = 8
)

type RenderingServerArrayFormat int64

const (
	RenderingServerArrayFormatVertex RenderingServerArrayFormat = 1
	RenderingServerArrayFormatNormal RenderingServerArrayFormat = 2
	RenderingServerArrayFormatTangent RenderingServerArrayFormat = 4
	RenderingServerArrayFormatColor RenderingServerArrayFormat = 8
	RenderingServerArrayFormatTexUv RenderingServerArrayFormat = 16
	RenderingServerArrayFormatTexUv2 RenderingServerArrayFormat = 32
	RenderingServerArrayFormatCustom0 RenderingServerArrayFormat = 64
	RenderingServerArrayFormatCustom1 RenderingServerArrayFormat = 128
	RenderingServerArrayFormatCustom2 RenderingServerArrayFormat = 256
	RenderingServerArrayFormatCustom3 RenderingServerArrayFormat = 512
	RenderingServerArrayFormatBones RenderingServerArrayFormat = 1024
	RenderingServerArrayFormatWeights RenderingServerArrayFormat = 2048
	RenderingServerArrayFormatIndex RenderingServerArrayFormat = 4096
	RenderingServerArrayFormatBlendShapeMask RenderingServerArrayFormat = 7
	RenderingServerArrayFormatCustomBase RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustomBits RenderingServerArrayFormat = 3
	RenderingServerArrayFormatCustom0Shift RenderingServerArrayFormat = 13
	RenderingServerArrayFormatCustom1Shift RenderingServerArrayFormat = 16
	RenderingServerArrayFormatCustom2Shift RenderingServerArrayFormat = 19
	RenderingServerArrayFormatCustom3Shift RenderingServerArrayFormat = 22
	RenderingServerArrayFormatCustomMask RenderingServerArrayFormat = 7
	RenderingServerArrayCompressFlagsBase RenderingServerArrayFormat = 25
	RenderingServerArrayFlagUse2dVertices RenderingServerArrayFormat = 33554432
	RenderingServerArrayFlagUseDynamicUpdate RenderingServerArrayFormat = 67108864
	RenderingServerArrayFlagUse8BoneWeights RenderingServerArrayFormat = 134217728
)

type RenderingServerPrimitiveType int64

const (
	RenderingServerPrimitivePoints RenderingServerPrimitiveType = 0
	RenderingServerPrimitiveLines RenderingServerPrimitiveType = 1
	RenderingServerPrimitiveLineStrip RenderingServerPrimitiveType = 2
	RenderingServerPrimitiveTriangles RenderingServerPrimitiveType = 3
	RenderingServerPrimitiveTriangleStrip RenderingServerPrimitiveType = 4
	RenderingServerPrimitiveMax RenderingServerPrimitiveType = 5
)

type RenderingServerBlendShapeMode int64

const (
	RenderingServerBlendShapeModeNormalized RenderingServerBlendShapeMode = 0
	RenderingServerBlendShapeModeRelative RenderingServerBlendShapeMode = 1
)

type RenderingServerMultimeshTransformFormat int64

const (
	RenderingServerMultimeshTransform2d RenderingServerMultimeshTransformFormat = 0
	RenderingServerMultimeshTransform3d RenderingServerMultimeshTransformFormat = 1
)

type RenderingServerLightProjectorFilter int64

const (
	RenderingServerLightProjectorFilterNearest RenderingServerLightProjectorFilter = 0
	RenderingServerLightProjectorFilterLinear RenderingServerLightProjectorFilter = 1
	RenderingServerLightProjectorFilterNearestMipmaps RenderingServerLightProjectorFilter = 2
	RenderingServerLightProjectorFilterLinearMipmaps RenderingServerLightProjectorFilter = 3
	RenderingServerLightProjectorFilterNearestMipmapsAnisotropic RenderingServerLightProjectorFilter = 4
	RenderingServerLightProjectorFilterLinearMipmapsAnisotropic RenderingServerLightProjectorFilter = 5
)

type RenderingServerLightType int64

const (
	RenderingServerLightDirectional RenderingServerLightType = 0
	RenderingServerLightOmni RenderingServerLightType = 1
	RenderingServerLightSpot RenderingServerLightType = 2
)

type RenderingServerLightParam int64

const (
	RenderingServerLightParamEnergy RenderingServerLightParam = 0
	RenderingServerLightParamIndirectEnergy RenderingServerLightParam = 1
	RenderingServerLightParamSpecular RenderingServerLightParam = 2
	RenderingServerLightParamRange RenderingServerLightParam = 3
	RenderingServerLightParamSize RenderingServerLightParam = 4
	RenderingServerLightParamAttenuation RenderingServerLightParam = 5
	RenderingServerLightParamSpotAngle RenderingServerLightParam = 6
	RenderingServerLightParamSpotAttenuation RenderingServerLightParam = 7
	RenderingServerLightParamShadowMaxDistance RenderingServerLightParam = 8
	RenderingServerLightParamShadowSplit1Offset RenderingServerLightParam = 9
	RenderingServerLightParamShadowSplit2Offset RenderingServerLightParam = 10
	RenderingServerLightParamShadowSplit3Offset RenderingServerLightParam = 11
	RenderingServerLightParamShadowFadeStart RenderingServerLightParam = 12
	RenderingServerLightParamShadowNormalBias RenderingServerLightParam = 13
	RenderingServerLightParamShadowBias RenderingServerLightParam = 14
	RenderingServerLightParamShadowPancakeSize RenderingServerLightParam = 15
	RenderingServerLightParamShadowOpacity RenderingServerLightParam = 16
	RenderingServerLightParamShadowBlur RenderingServerLightParam = 17
	RenderingServerLightParamShadowVolumetricFogFade RenderingServerLightParam = 18
	RenderingServerLightParamTransmittanceBias RenderingServerLightParam = 19
	RenderingServerLightParamMax RenderingServerLightParam = 20
)

type RenderingServerLightBakeMode int64

const (
	RenderingServerLightBakeDisabled RenderingServerLightBakeMode = 0
	RenderingServerLightBakeStatic RenderingServerLightBakeMode = 1
	RenderingServerLightBakeDynamic RenderingServerLightBakeMode = 2
)

type RenderingServerLightOmniShadowMode int64

const (
	RenderingServerLightOmniShadowDualParaboloid RenderingServerLightOmniShadowMode = 0
	RenderingServerLightOmniShadowCube RenderingServerLightOmniShadowMode = 1
)

type RenderingServerLightDirectionalShadowMode int64

const (
	RenderingServerLightDirectionalShadowOrthogonal RenderingServerLightDirectionalShadowMode = 0
	RenderingServerLightDirectionalShadowParallel2Splits RenderingServerLightDirectionalShadowMode = 1
	RenderingServerLightDirectionalShadowParallel4Splits RenderingServerLightDirectionalShadowMode = 2
)

type RenderingServerLightDirectionalSkyMode int64

const (
	RenderingServerLightDirectionalSkyModeLightAndSky RenderingServerLightDirectionalSkyMode = 0
	RenderingServerLightDirectionalSkyModeLightOnly RenderingServerLightDirectionalSkyMode = 1
	RenderingServerLightDirectionalSkyModeSkyOnly RenderingServerLightDirectionalSkyMode = 2
)

type RenderingServerShadowQuality int64

const (
	RenderingServerShadowQualityHard RenderingServerShadowQuality = 0
	RenderingServerShadowQualitySoftVeryLow RenderingServerShadowQuality = 1
	RenderingServerShadowQualitySoftLow RenderingServerShadowQuality = 2
	RenderingServerShadowQualitySoftMedium RenderingServerShadowQuality = 3
	RenderingServerShadowQualitySoftHigh RenderingServerShadowQuality = 4
	RenderingServerShadowQualitySoftUltra RenderingServerShadowQuality = 5
	RenderingServerShadowQualityMax RenderingServerShadowQuality = 6
)

type RenderingServerReflectionProbeUpdateMode int64

const (
	RenderingServerReflectionProbeUpdateOnce RenderingServerReflectionProbeUpdateMode = 0
	RenderingServerReflectionProbeUpdateAlways RenderingServerReflectionProbeUpdateMode = 1
)

type RenderingServerReflectionProbeAmbientMode int64

const (
	RenderingServerReflectionProbeAmbientDisabled RenderingServerReflectionProbeAmbientMode = 0
	RenderingServerReflectionProbeAmbientEnvironment RenderingServerReflectionProbeAmbientMode = 1
	RenderingServerReflectionProbeAmbientColor RenderingServerReflectionProbeAmbientMode = 2
)

type RenderingServerDecalTexture int64

const (
	RenderingServerDecalTextureAlbedo RenderingServerDecalTexture = 0
	RenderingServerDecalTextureNormal RenderingServerDecalTexture = 1
	RenderingServerDecalTextureOrm RenderingServerDecalTexture = 2
	RenderingServerDecalTextureEmission RenderingServerDecalTexture = 3
	RenderingServerDecalTextureMax RenderingServerDecalTexture = 4
)

type RenderingServerDecalFilter int64

const (
	RenderingServerDecalFilterNearest RenderingServerDecalFilter = 0
	RenderingServerDecalFilterLinear RenderingServerDecalFilter = 1
	RenderingServerDecalFilterNearestMipmaps RenderingServerDecalFilter = 2
	RenderingServerDecalFilterLinearMipmaps RenderingServerDecalFilter = 3
	RenderingServerDecalFilterNearestMipmapsAnisotropic RenderingServerDecalFilter = 4
	RenderingServerDecalFilterLinearMipmapsAnisotropic RenderingServerDecalFilter = 5
)

type RenderingServerVoxelGIQuality int64

const (
	RenderingServerVoxelGiQualityLow RenderingServerVoxelGIQuality = 0
	RenderingServerVoxelGiQualityHigh RenderingServerVoxelGIQuality = 1
)

type RenderingServerParticlesMode int64

const (
	RenderingServerParticlesMode2d RenderingServerParticlesMode = 0
	RenderingServerParticlesMode3d RenderingServerParticlesMode = 1
)

type RenderingServerParticlesTransformAlign int64

const (
	RenderingServerParticlesTransformAlignDisabled RenderingServerParticlesTransformAlign = 0
	RenderingServerParticlesTransformAlignZBillboard RenderingServerParticlesTransformAlign = 1
	RenderingServerParticlesTransformAlignYToVelocity RenderingServerParticlesTransformAlign = 2
	RenderingServerParticlesTransformAlignZBillboardYToVelocity RenderingServerParticlesTransformAlign = 3
)

type RenderingServerParticlesDrawOrder int64

const (
	RenderingServerParticlesDrawOrderIndex RenderingServerParticlesDrawOrder = 0
	RenderingServerParticlesDrawOrderLifetime RenderingServerParticlesDrawOrder = 1
	RenderingServerParticlesDrawOrderReverseLifetime RenderingServerParticlesDrawOrder = 2
	RenderingServerParticlesDrawOrderViewDepth RenderingServerParticlesDrawOrder = 3
)

type RenderingServerParticlesCollisionType int64

const (
	RenderingServerParticlesCollisionTypeSphereAttract RenderingServerParticlesCollisionType = 0
	RenderingServerParticlesCollisionTypeBoxAttract RenderingServerParticlesCollisionType = 1
	RenderingServerParticlesCollisionTypeVectorFieldAttract RenderingServerParticlesCollisionType = 2
	RenderingServerParticlesCollisionTypeSphereCollide RenderingServerParticlesCollisionType = 3
	RenderingServerParticlesCollisionTypeBoxCollide RenderingServerParticlesCollisionType = 4
	RenderingServerParticlesCollisionTypeSdfCollide RenderingServerParticlesCollisionType = 5
	RenderingServerParticlesCollisionTypeHeightfieldCollide RenderingServerParticlesCollisionType = 6
)

type RenderingServerParticlesCollisionHeightfieldResolution int64

const (
	RenderingServerParticlesCollisionHeightfieldResolution256 RenderingServerParticlesCollisionHeightfieldResolution = 0
	RenderingServerParticlesCollisionHeightfieldResolution512 RenderingServerParticlesCollisionHeightfieldResolution = 1
	RenderingServerParticlesCollisionHeightfieldResolution1024 RenderingServerParticlesCollisionHeightfieldResolution = 2
	RenderingServerParticlesCollisionHeightfieldResolution2048 RenderingServerParticlesCollisionHeightfieldResolution = 3
	RenderingServerParticlesCollisionHeightfieldResolution4096 RenderingServerParticlesCollisionHeightfieldResolution = 4
	RenderingServerParticlesCollisionHeightfieldResolution8192 RenderingServerParticlesCollisionHeightfieldResolution = 5
	RenderingServerParticlesCollisionHeightfieldResolutionMax RenderingServerParticlesCollisionHeightfieldResolution = 6
)

type RenderingServerFogVolumeShape int64

const (
	RenderingServerFogVolumeShapeEllipsoid RenderingServerFogVolumeShape = 0
	RenderingServerFogVolumeShapeCone RenderingServerFogVolumeShape = 1
	RenderingServerFogVolumeShapeCylinder RenderingServerFogVolumeShape = 2
	RenderingServerFogVolumeShapeBox RenderingServerFogVolumeShape = 3
	RenderingServerFogVolumeShapeWorld RenderingServerFogVolumeShape = 4
	RenderingServerFogVolumeShapeMax RenderingServerFogVolumeShape = 5
)

type RenderingServerViewportScaling3DMode int64

const (
	RenderingServerViewportScaling3dModeBilinear RenderingServerViewportScaling3DMode = 0
	RenderingServerViewportScaling3dModeFsr RenderingServerViewportScaling3DMode = 1
	RenderingServerViewportScaling3dModeMax RenderingServerViewportScaling3DMode = 2
)

type RenderingServerViewportUpdateMode int64

const (
	RenderingServerViewportUpdateDisabled RenderingServerViewportUpdateMode = 0
	RenderingServerViewportUpdateOnce RenderingServerViewportUpdateMode = 1
	RenderingServerViewportUpdateWhenVisible RenderingServerViewportUpdateMode = 2
	RenderingServerViewportUpdateWhenParentVisible RenderingServerViewportUpdateMode = 3
	RenderingServerViewportUpdateAlways RenderingServerViewportUpdateMode = 4
)

type RenderingServerViewportClearMode int64

const (
	RenderingServerViewportClearAlways RenderingServerViewportClearMode = 0
	RenderingServerViewportClearNever RenderingServerViewportClearMode = 1
	RenderingServerViewportClearOnlyNextFrame RenderingServerViewportClearMode = 2
)

type RenderingServerViewportSDFOversize int64

const (
	RenderingServerViewportSdfOversize100Percent RenderingServerViewportSDFOversize = 0
	RenderingServerViewportSdfOversize120Percent RenderingServerViewportSDFOversize = 1
	RenderingServerViewportSdfOversize150Percent RenderingServerViewportSDFOversize = 2
	RenderingServerViewportSdfOversize200Percent RenderingServerViewportSDFOversize = 3
	RenderingServerViewportSdfOversizeMax RenderingServerViewportSDFOversize = 4
)

type RenderingServerViewportSDFScale int64

const (
	RenderingServerViewportSdfScale100Percent RenderingServerViewportSDFScale = 0
	RenderingServerViewportSdfScale50Percent RenderingServerViewportSDFScale = 1
	RenderingServerViewportSdfScale25Percent RenderingServerViewportSDFScale = 2
	RenderingServerViewportSdfScaleMax RenderingServerViewportSDFScale = 3
)

type RenderingServerViewportMSAA int64

const (
	RenderingServerViewportMsaaDisabled RenderingServerViewportMSAA = 0
	RenderingServerViewportMsaa2x RenderingServerViewportMSAA = 1
	RenderingServerViewportMsaa4x RenderingServerViewportMSAA = 2
	RenderingServerViewportMsaa8x RenderingServerViewportMSAA = 3
	RenderingServerViewportMsaaMax RenderingServerViewportMSAA = 4
)

type RenderingServerViewportScreenSpaceAA int64

const (
	RenderingServerViewportScreenSpaceAaDisabled RenderingServerViewportScreenSpaceAA = 0
	RenderingServerViewportScreenSpaceAaFxaa RenderingServerViewportScreenSpaceAA = 1
	RenderingServerViewportScreenSpaceAaMax RenderingServerViewportScreenSpaceAA = 2
)

type RenderingServerViewportOcclusionCullingBuildQuality int64

const (
	RenderingServerViewportOcclusionBuildQualityLow RenderingServerViewportOcclusionCullingBuildQuality = 0
	RenderingServerViewportOcclusionBuildQualityMedium RenderingServerViewportOcclusionCullingBuildQuality = 1
	RenderingServerViewportOcclusionBuildQualityHigh RenderingServerViewportOcclusionCullingBuildQuality = 2
)

type RenderingServerViewportRenderInfo int64

const (
	RenderingServerViewportRenderInfoObjectsInFrame RenderingServerViewportRenderInfo = 0
	RenderingServerViewportRenderInfoPrimitivesInFrame RenderingServerViewportRenderInfo = 1
	RenderingServerViewportRenderInfoDrawCallsInFrame RenderingServerViewportRenderInfo = 2
	RenderingServerViewportRenderInfoMax RenderingServerViewportRenderInfo = 3
)

type RenderingServerViewportRenderInfoType int64

const (
	RenderingServerViewportRenderInfoTypeVisible RenderingServerViewportRenderInfoType = 0
	RenderingServerViewportRenderInfoTypeShadow RenderingServerViewportRenderInfoType = 1
	RenderingServerViewportRenderInfoTypeMax RenderingServerViewportRenderInfoType = 2
)

type RenderingServerViewportDebugDraw int64

const (
	RenderingServerViewportDebugDrawDisabled RenderingServerViewportDebugDraw = 0
	RenderingServerViewportDebugDrawUnshaded RenderingServerViewportDebugDraw = 1
	RenderingServerViewportDebugDrawLighting RenderingServerViewportDebugDraw = 2
	RenderingServerViewportDebugDrawOverdraw RenderingServerViewportDebugDraw = 3
	RenderingServerViewportDebugDrawWireframe RenderingServerViewportDebugDraw = 4
	RenderingServerViewportDebugDrawNormalBuffer RenderingServerViewportDebugDraw = 5
	RenderingServerViewportDebugDrawVoxelGiAlbedo RenderingServerViewportDebugDraw = 6
	RenderingServerViewportDebugDrawVoxelGiLighting RenderingServerViewportDebugDraw = 7
	RenderingServerViewportDebugDrawVoxelGiEmission RenderingServerViewportDebugDraw = 8
	RenderingServerViewportDebugDrawShadowAtlas RenderingServerViewportDebugDraw = 9
	RenderingServerViewportDebugDrawDirectionalShadowAtlas RenderingServerViewportDebugDraw = 10
	RenderingServerViewportDebugDrawSceneLuminance RenderingServerViewportDebugDraw = 11
	RenderingServerViewportDebugDrawSsao RenderingServerViewportDebugDraw = 12
	RenderingServerViewportDebugDrawSsil RenderingServerViewportDebugDraw = 13
	RenderingServerViewportDebugDrawPssmSplits RenderingServerViewportDebugDraw = 14
	RenderingServerViewportDebugDrawDecalAtlas RenderingServerViewportDebugDraw = 15
	RenderingServerViewportDebugDrawSdfgi RenderingServerViewportDebugDraw = 16
	RenderingServerViewportDebugDrawSdfgiProbes RenderingServerViewportDebugDraw = 17
	RenderingServerViewportDebugDrawGiBuffer RenderingServerViewportDebugDraw = 18
	RenderingServerViewportDebugDrawDisableLod RenderingServerViewportDebugDraw = 19
	RenderingServerViewportDebugDrawClusterOmniLights RenderingServerViewportDebugDraw = 20
	RenderingServerViewportDebugDrawClusterSpotLights RenderingServerViewportDebugDraw = 21
	RenderingServerViewportDebugDrawClusterDecals RenderingServerViewportDebugDraw = 22
	RenderingServerViewportDebugDrawClusterReflectionProbes RenderingServerViewportDebugDraw = 23
	RenderingServerViewportDebugDrawOccluders RenderingServerViewportDebugDraw = 24
	RenderingServerViewportDebugDrawMotionVectors RenderingServerViewportDebugDraw = 25
)

type RenderingServerViewportVRSMode int64

const (
	RenderingServerViewportVrsDisabled RenderingServerViewportVRSMode = 0
	RenderingServerViewportVrsTexture RenderingServerViewportVRSMode = 1
	RenderingServerViewportVrsXr RenderingServerViewportVRSMode = 2
	RenderingServerViewportVrsMax RenderingServerViewportVRSMode = 3
)

type RenderingServerSkyMode int64

const (
	RenderingServerSkyModeAutomatic RenderingServerSkyMode = 0
	RenderingServerSkyModeQuality RenderingServerSkyMode = 1
	RenderingServerSkyModeIncremental RenderingServerSkyMode = 2
	RenderingServerSkyModeRealtime RenderingServerSkyMode = 3
)

type RenderingServerEnvironmentBG int64

const (
	RenderingServerEnvBgClearColor RenderingServerEnvironmentBG = 0
	RenderingServerEnvBgColor RenderingServerEnvironmentBG = 1
	RenderingServerEnvBgSky RenderingServerEnvironmentBG = 2
	RenderingServerEnvBgCanvas RenderingServerEnvironmentBG = 3
	RenderingServerEnvBgKeep RenderingServerEnvironmentBG = 4
	RenderingServerEnvBgCameraFeed RenderingServerEnvironmentBG = 5
	RenderingServerEnvBgMax RenderingServerEnvironmentBG = 6
)

type RenderingServerEnvironmentAmbientSource int64

const (
	RenderingServerEnvAmbientSourceBg RenderingServerEnvironmentAmbientSource = 0
	RenderingServerEnvAmbientSourceDisabled RenderingServerEnvironmentAmbientSource = 1
	RenderingServerEnvAmbientSourceColor RenderingServerEnvironmentAmbientSource = 2
	RenderingServerEnvAmbientSourceSky RenderingServerEnvironmentAmbientSource = 3
)

type RenderingServerEnvironmentReflectionSource int64

const (
	RenderingServerEnvReflectionSourceBg RenderingServerEnvironmentReflectionSource = 0
	RenderingServerEnvReflectionSourceDisabled RenderingServerEnvironmentReflectionSource = 1
	RenderingServerEnvReflectionSourceSky RenderingServerEnvironmentReflectionSource = 2
)

type RenderingServerEnvironmentGlowBlendMode int64

const (
	RenderingServerEnvGlowBlendModeAdditive RenderingServerEnvironmentGlowBlendMode = 0
	RenderingServerEnvGlowBlendModeScreen RenderingServerEnvironmentGlowBlendMode = 1
	RenderingServerEnvGlowBlendModeSoftlight RenderingServerEnvironmentGlowBlendMode = 2
	RenderingServerEnvGlowBlendModeReplace RenderingServerEnvironmentGlowBlendMode = 3
	RenderingServerEnvGlowBlendModeMix RenderingServerEnvironmentGlowBlendMode = 4
)

type RenderingServerEnvironmentToneMapper int64

const (
	RenderingServerEnvToneMapperLinear RenderingServerEnvironmentToneMapper = 0
	RenderingServerEnvToneMapperReinhard RenderingServerEnvironmentToneMapper = 1
	RenderingServerEnvToneMapperFilmic RenderingServerEnvironmentToneMapper = 2
	RenderingServerEnvToneMapperAces RenderingServerEnvironmentToneMapper = 3
)

type RenderingServerEnvironmentSSRRoughnessQuality int64

const (
	RenderingServerEnvSsrRoughnessQualityDisabled RenderingServerEnvironmentSSRRoughnessQuality = 0
	RenderingServerEnvSsrRoughnessQualityLow RenderingServerEnvironmentSSRRoughnessQuality = 1
	RenderingServerEnvSsrRoughnessQualityMedium RenderingServerEnvironmentSSRRoughnessQuality = 2
	RenderingServerEnvSsrRoughnessQualityHigh RenderingServerEnvironmentSSRRoughnessQuality = 3
)

type RenderingServerEnvironmentSSAOQuality int64

const (
	RenderingServerEnvSsaoQualityVeryLow RenderingServerEnvironmentSSAOQuality = 0
	RenderingServerEnvSsaoQualityLow RenderingServerEnvironmentSSAOQuality = 1
	RenderingServerEnvSsaoQualityMedium RenderingServerEnvironmentSSAOQuality = 2
	RenderingServerEnvSsaoQualityHigh RenderingServerEnvironmentSSAOQuality = 3
	RenderingServerEnvSsaoQualityUltra RenderingServerEnvironmentSSAOQuality = 4
)

type RenderingServerEnvironmentSSILQuality int64

const (
	RenderingServerEnvSsilQualityVeryLow RenderingServerEnvironmentSSILQuality = 0
	RenderingServerEnvSsilQualityLow RenderingServerEnvironmentSSILQuality = 1
	RenderingServerEnvSsilQualityMedium RenderingServerEnvironmentSSILQuality = 2
	RenderingServerEnvSsilQualityHigh RenderingServerEnvironmentSSILQuality = 3
	RenderingServerEnvSsilQualityUltra RenderingServerEnvironmentSSILQuality = 4
)

type RenderingServerEnvironmentSDFGIYScale int64

const (
	RenderingServerEnvSdfgiYScale50Percent RenderingServerEnvironmentSDFGIYScale = 0
	RenderingServerEnvSdfgiYScale75Percent RenderingServerEnvironmentSDFGIYScale = 1
	RenderingServerEnvSdfgiYScale100Percent RenderingServerEnvironmentSDFGIYScale = 2
)

type RenderingServerEnvironmentSDFGIRayCount int64

const (
	RenderingServerEnvSdfgiRayCount4 RenderingServerEnvironmentSDFGIRayCount = 0
	RenderingServerEnvSdfgiRayCount8 RenderingServerEnvironmentSDFGIRayCount = 1
	RenderingServerEnvSdfgiRayCount16 RenderingServerEnvironmentSDFGIRayCount = 2
	RenderingServerEnvSdfgiRayCount32 RenderingServerEnvironmentSDFGIRayCount = 3
	RenderingServerEnvSdfgiRayCount64 RenderingServerEnvironmentSDFGIRayCount = 4
	RenderingServerEnvSdfgiRayCount96 RenderingServerEnvironmentSDFGIRayCount = 5
	RenderingServerEnvSdfgiRayCount128 RenderingServerEnvironmentSDFGIRayCount = 6
	RenderingServerEnvSdfgiRayCountMax RenderingServerEnvironmentSDFGIRayCount = 7
)

type RenderingServerEnvironmentSDFGIFramesToConverge int64

const (
	RenderingServerEnvSdfgiConvergeIn5Frames RenderingServerEnvironmentSDFGIFramesToConverge = 0
	RenderingServerEnvSdfgiConvergeIn10Frames RenderingServerEnvironmentSDFGIFramesToConverge = 1
	RenderingServerEnvSdfgiConvergeIn15Frames RenderingServerEnvironmentSDFGIFramesToConverge = 2
	RenderingServerEnvSdfgiConvergeIn20Frames RenderingServerEnvironmentSDFGIFramesToConverge = 3
	RenderingServerEnvSdfgiConvergeIn25Frames RenderingServerEnvironmentSDFGIFramesToConverge = 4
	RenderingServerEnvSdfgiConvergeIn30Frames RenderingServerEnvironmentSDFGIFramesToConverge = 5
	RenderingServerEnvSdfgiConvergeMax RenderingServerEnvironmentSDFGIFramesToConverge = 6
)

type RenderingServerEnvironmentSDFGIFramesToUpdateLight int64

const (
	RenderingServerEnvSdfgiUpdateLightIn1Frame RenderingServerEnvironmentSDFGIFramesToUpdateLight = 0
	RenderingServerEnvSdfgiUpdateLightIn2Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 1
	RenderingServerEnvSdfgiUpdateLightIn4Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 2
	RenderingServerEnvSdfgiUpdateLightIn8Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 3
	RenderingServerEnvSdfgiUpdateLightIn16Frames RenderingServerEnvironmentSDFGIFramesToUpdateLight = 4
	RenderingServerEnvSdfgiUpdateLightMax RenderingServerEnvironmentSDFGIFramesToUpdateLight = 5
)

type RenderingServerSubSurfaceScatteringQuality int64

const (
	RenderingServerSubSurfaceScatteringQualityDisabled RenderingServerSubSurfaceScatteringQuality = 0
	RenderingServerSubSurfaceScatteringQualityLow RenderingServerSubSurfaceScatteringQuality = 1
	RenderingServerSubSurfaceScatteringQualityMedium RenderingServerSubSurfaceScatteringQuality = 2
	RenderingServerSubSurfaceScatteringQualityHigh RenderingServerSubSurfaceScatteringQuality = 3
)

type RenderingServerDOFBokehShape int64

const (
	RenderingServerDofBokehBox RenderingServerDOFBokehShape = 0
	RenderingServerDofBokehHexagon RenderingServerDOFBokehShape = 1
	RenderingServerDofBokehCircle RenderingServerDOFBokehShape = 2
)

type RenderingServerDOFBlurQuality int64

const (
	RenderingServerDofBlurQualityVeryLow RenderingServerDOFBlurQuality = 0
	RenderingServerDofBlurQualityLow RenderingServerDOFBlurQuality = 1
	RenderingServerDofBlurQualityMedium RenderingServerDOFBlurQuality = 2
	RenderingServerDofBlurQualityHigh RenderingServerDOFBlurQuality = 3
)

type RenderingServerInstanceType int64

const (
	RenderingServerInstanceNone RenderingServerInstanceType = 0
	RenderingServerInstanceMesh RenderingServerInstanceType = 1
	RenderingServerInstanceMultimesh RenderingServerInstanceType = 2
	RenderingServerInstanceParticles RenderingServerInstanceType = 3
	RenderingServerInstanceParticlesCollision RenderingServerInstanceType = 4
	RenderingServerInstanceLight RenderingServerInstanceType = 5
	RenderingServerInstanceReflectionProbe RenderingServerInstanceType = 6
	RenderingServerInstanceDecal RenderingServerInstanceType = 7
	RenderingServerInstanceVoxelGi RenderingServerInstanceType = 8
	RenderingServerInstanceLightmap RenderingServerInstanceType = 9
	RenderingServerInstanceOccluder RenderingServerInstanceType = 10
	RenderingServerInstanceVisiblityNotifier RenderingServerInstanceType = 11
	RenderingServerInstanceFogVolume RenderingServerInstanceType = 12
	RenderingServerInstanceMax RenderingServerInstanceType = 13
	RenderingServerInstanceGeometryMask RenderingServerInstanceType = 14
)

type RenderingServerInstanceFlags int64

const (
	RenderingServerInstanceFlagUseBakedLight RenderingServerInstanceFlags = 0
	RenderingServerInstanceFlagUseDynamicGi RenderingServerInstanceFlags = 1
	RenderingServerInstanceFlagDrawNextFrameIfVisible RenderingServerInstanceFlags = 2
	RenderingServerInstanceFlagIgnoreOcclusionCulling RenderingServerInstanceFlags = 3
	RenderingServerInstanceFlagMax RenderingServerInstanceFlags = 4
)

type RenderingServerShadowCastingSetting int64

const (
	RenderingServerShadowCastingSettingOff RenderingServerShadowCastingSetting = 0
	RenderingServerShadowCastingSettingOn RenderingServerShadowCastingSetting = 1
	RenderingServerShadowCastingSettingDoubleSided RenderingServerShadowCastingSetting = 2
	RenderingServerShadowCastingSettingShadowsOnly RenderingServerShadowCastingSetting = 3
)

type RenderingServerVisibilityRangeFadeMode int64

const (
	RenderingServerVisibilityRangeFadeDisabled RenderingServerVisibilityRangeFadeMode = 0
	RenderingServerVisibilityRangeFadeSelf RenderingServerVisibilityRangeFadeMode = 1
	RenderingServerVisibilityRangeFadeDependencies RenderingServerVisibilityRangeFadeMode = 2
)

type RenderingServerBakeChannels int64

const (
	RenderingServerBakeChannelAlbedoAlpha RenderingServerBakeChannels = 0
	RenderingServerBakeChannelNormal RenderingServerBakeChannels = 1
	RenderingServerBakeChannelOrm RenderingServerBakeChannels = 2
	RenderingServerBakeChannelEmission RenderingServerBakeChannels = 3
)

type RenderingServerCanvasTextureChannel int64

const (
	RenderingServerCanvasTextureChannelDiffuse RenderingServerCanvasTextureChannel = 0
	RenderingServerCanvasTextureChannelNormal RenderingServerCanvasTextureChannel = 1
	RenderingServerCanvasTextureChannelSpecular RenderingServerCanvasTextureChannel = 2
)

type RenderingServerNinePatchAxisMode int64

const (
	RenderingServerNinePatchStretch RenderingServerNinePatchAxisMode = 0
	RenderingServerNinePatchTile RenderingServerNinePatchAxisMode = 1
	RenderingServerNinePatchTileFit RenderingServerNinePatchAxisMode = 2
)

type RenderingServerCanvasItemTextureFilter int64

const (
	RenderingServerCanvasItemTextureFilterDefault RenderingServerCanvasItemTextureFilter = 0
	RenderingServerCanvasItemTextureFilterNearest RenderingServerCanvasItemTextureFilter = 1
	RenderingServerCanvasItemTextureFilterLinear RenderingServerCanvasItemTextureFilter = 2
	RenderingServerCanvasItemTextureFilterNearestWithMipmaps RenderingServerCanvasItemTextureFilter = 3
	RenderingServerCanvasItemTextureFilterLinearWithMipmaps RenderingServerCanvasItemTextureFilter = 4
	RenderingServerCanvasItemTextureFilterNearestWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 5
	RenderingServerCanvasItemTextureFilterLinearWithMipmapsAnisotropic RenderingServerCanvasItemTextureFilter = 6
	RenderingServerCanvasItemTextureFilterMax RenderingServerCanvasItemTextureFilter = 7
)

type RenderingServerCanvasItemTextureRepeat int64

const (
	RenderingServerCanvasItemTextureRepeatDefault RenderingServerCanvasItemTextureRepeat = 0
	RenderingServerCanvasItemTextureRepeatDisabled RenderingServerCanvasItemTextureRepeat = 1
	RenderingServerCanvasItemTextureRepeatEnabled RenderingServerCanvasItemTextureRepeat = 2
	RenderingServerCanvasItemTextureRepeatMirror RenderingServerCanvasItemTextureRepeat = 3
	RenderingServerCanvasItemTextureRepeatMax RenderingServerCanvasItemTextureRepeat = 4
)

type RenderingServerCanvasGroupMode int64

const (
	RenderingServerCanvasGroupModeDisabled RenderingServerCanvasGroupMode = 0
	RenderingServerCanvasGroupModeOpaque RenderingServerCanvasGroupMode = 1
	RenderingServerCanvasGroupModeTransparent RenderingServerCanvasGroupMode = 2
)

type RenderingServerCanvasLightMode int64

const (
	RenderingServerCanvasLightModePoint RenderingServerCanvasLightMode = 0
	RenderingServerCanvasLightModeDirectional RenderingServerCanvasLightMode = 1
)

type RenderingServerCanvasLightBlendMode int64

const (
	RenderingServerCanvasLightBlendModeAdd RenderingServerCanvasLightBlendMode = 0
	RenderingServerCanvasLightBlendModeSub RenderingServerCanvasLightBlendMode = 1
	RenderingServerCanvasLightBlendModeMix RenderingServerCanvasLightBlendMode = 2
)

type RenderingServerCanvasLightShadowFilter int64

const (
	RenderingServerCanvasLightFilterNone RenderingServerCanvasLightShadowFilter = 0
	RenderingServerCanvasLightFilterPcf5 RenderingServerCanvasLightShadowFilter = 1
	RenderingServerCanvasLightFilterPcf13 RenderingServerCanvasLightShadowFilter = 2
	RenderingServerCanvasLightFilterMax RenderingServerCanvasLightShadowFilter = 3
)

type RenderingServerCanvasOccluderPolygonCullMode int64

const (
	RenderingServerCanvasOccluderPolygonCullDisabled RenderingServerCanvasOccluderPolygonCullMode = 0
	RenderingServerCanvasOccluderPolygonCullClockwise RenderingServerCanvasOccluderPolygonCullMode = 1
	RenderingServerCanvasOccluderPolygonCullCounterClockwise RenderingServerCanvasOccluderPolygonCullMode = 2
)

type RenderingServerGlobalShaderUniformType int64

const (
	RenderingServerGlobalVarTypeBool RenderingServerGlobalShaderUniformType = 0
	RenderingServerGlobalVarTypeBvec2 RenderingServerGlobalShaderUniformType = 1
	RenderingServerGlobalVarTypeBvec3 RenderingServerGlobalShaderUniformType = 2
	RenderingServerGlobalVarTypeBvec4 RenderingServerGlobalShaderUniformType = 3
	RenderingServerGlobalVarTypeInt RenderingServerGlobalShaderUniformType = 4
	RenderingServerGlobalVarTypeIvec2 RenderingServerGlobalShaderUniformType = 5
	RenderingServerGlobalVarTypeIvec3 RenderingServerGlobalShaderUniformType = 6
	RenderingServerGlobalVarTypeIvec4 RenderingServerGlobalShaderUniformType = 7
	RenderingServerGlobalVarTypeRect2i RenderingServerGlobalShaderUniformType = 8
	RenderingServerGlobalVarTypeUint RenderingServerGlobalShaderUniformType = 9
	RenderingServerGlobalVarTypeUvec2 RenderingServerGlobalShaderUniformType = 10
	RenderingServerGlobalVarTypeUvec3 RenderingServerGlobalShaderUniformType = 11
	RenderingServerGlobalVarTypeUvec4 RenderingServerGlobalShaderUniformType = 12
	RenderingServerGlobalVarTypeFloat RenderingServerGlobalShaderUniformType = 13
	RenderingServerGlobalVarTypeVec2 RenderingServerGlobalShaderUniformType = 14
	RenderingServerGlobalVarTypeVec3 RenderingServerGlobalShaderUniformType = 15
	RenderingServerGlobalVarTypeVec4 RenderingServerGlobalShaderUniformType = 16
	RenderingServerGlobalVarTypeColor RenderingServerGlobalShaderUniformType = 17
	RenderingServerGlobalVarTypeRect2 RenderingServerGlobalShaderUniformType = 18
	RenderingServerGlobalVarTypeMat2 RenderingServerGlobalShaderUniformType = 19
	RenderingServerGlobalVarTypeMat3 RenderingServerGlobalShaderUniformType = 20
	RenderingServerGlobalVarTypeMat4 RenderingServerGlobalShaderUniformType = 21
	RenderingServerGlobalVarTypeTransform2d RenderingServerGlobalShaderUniformType = 22
	RenderingServerGlobalVarTypeTransform RenderingServerGlobalShaderUniformType = 23
	RenderingServerGlobalVarTypeSampler2d RenderingServerGlobalShaderUniformType = 24
	RenderingServerGlobalVarTypeSampler2darray RenderingServerGlobalShaderUniformType = 25
	RenderingServerGlobalVarTypeSampler3d RenderingServerGlobalShaderUniformType = 26
	RenderingServerGlobalVarTypeSamplercube RenderingServerGlobalShaderUniformType = 27
	RenderingServerGlobalVarTypeMax RenderingServerGlobalShaderUniformType = 28
)

type RenderingServerRenderingInfo int64

const (
	RenderingServerRenderingInfoTotalObjectsInFrame RenderingServerRenderingInfo = 0
	RenderingServerRenderingInfoTotalPrimitivesInFrame RenderingServerRenderingInfo = 1
	RenderingServerRenderingInfoTotalDrawCallsInFrame RenderingServerRenderingInfo = 2
	RenderingServerRenderingInfoTextureMemUsed RenderingServerRenderingInfo = 3
	RenderingServerRenderingInfoBufferMemUsed RenderingServerRenderingInfo = 4
	RenderingServerRenderingInfoVideoMemUsed RenderingServerRenderingInfo = 5
)

type RenderingServerFeatures int64

const (
	RenderingServerFeatureShaders RenderingServerFeatures = 0
	RenderingServerFeatureMultithreaded RenderingServerFeatures = 1
)
var RenderingServer RenderingServerSingleton

type RenderingServerSingleton struct{self *RenderingServerSingleton; obj safeObject }
func NewRenderingServerSingleton(ctx Context, at *RenderingServerSingleton) RenderingServerSingleton { if at == nil { at = new(RenderingServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RenderingServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RenderingServerSingleton) owner() cObject { return gdClass.obj.get() }
func (RenderingServerSingleton) class() string { return "RenderingServerSingleton\000" }

func (gdClass RenderingServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodRenderingServerSingleton [449]cMethodBind
func (gdClass RenderingServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass RenderingServerSingleton) Texture2dCreate(image Image) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[0], &image) }
func (gdClass RenderingServerSingleton) Texture2dLayeredCreate(layers Array, layered_type RenderingServerTextureLayeredType) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[1], &layers, &layered_type) }
func (gdClass RenderingServerSingleton) Texture3dCreate(format ImageFormat, width int64, height int64, depth int64, mipmaps bool, data Array) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[2], &format, &width, &height, &depth, &mipmaps, &data) }
func (gdClass RenderingServerSingleton) TextureProxyCreate(base RID) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[3], &base) }
func (gdClass RenderingServerSingleton) Texture2dUpdate(texture RID, image Image, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[4], &texture, &image, &layer) }
func (gdClass RenderingServerSingleton) Texture3dUpdate(texture RID, data Array)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[5], &texture, &data) }
func (gdClass RenderingServerSingleton) TextureProxyUpdate(texture RID, proxy_to RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[6], &texture, &proxy_to) }
func (gdClass RenderingServerSingleton) Texture2dPlaceholderCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[7]) }
func (gdClass RenderingServerSingleton) Texture2dLayeredPlaceholderCreate(layered_type RenderingServerTextureLayeredType) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[8], &layered_type) }
func (gdClass RenderingServerSingleton) Texture3dPlaceholderCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[9]) }
func (gdClass RenderingServerSingleton) Texture2dGet(texture RID) Image { return methodCall[Image](gdClass.obj.get(), methodRenderingServerSingleton[10], &texture) }
func (gdClass RenderingServerSingleton) Texture2dLayerGet(texture RID, layer int64) Image { return methodCall[Image](gdClass.obj.get(), methodRenderingServerSingleton[11], &texture, &layer) }
func (gdClass RenderingServerSingleton) Texture3dGet(texture RID) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[12], &texture) }
func (gdClass RenderingServerSingleton) TextureReplace(texture RID, by_texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[13], &texture, &by_texture) }
func (gdClass RenderingServerSingleton) TextureSetSizeOverride(texture RID, width int64, height int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[14], &texture, &width, &height) }
func (gdClass RenderingServerSingleton) TextureSetPath(texture RID, path string)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[15], &texture, &path) }
func (gdClass RenderingServerSingleton) TextureGetPath(texture RID) string { return methodCall[string](gdClass.obj.get(), methodRenderingServerSingleton[16], &texture) }
func (gdClass RenderingServerSingleton) TextureSetForceRedrawIfVisible(texture RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[17], &texture, &enable) }
func (gdClass RenderingServerSingleton) ShaderCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[18]) }
func (gdClass RenderingServerSingleton) ShaderSetCode(shader RID, code string)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[19], &shader, &code) }
func (gdClass RenderingServerSingleton) ShaderSetPathHint(shader RID, path string)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[20], &shader, &path) }
func (gdClass RenderingServerSingleton) ShaderGetCode(shader RID) string { return methodCall[string](gdClass.obj.get(), methodRenderingServerSingleton[21], &shader) }
func (gdClass RenderingServerSingleton) ShaderGetShaderUniformList(shader RID) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[22], &shader) }
func (gdClass RenderingServerSingleton) ShaderGetParamDefault(shader RID, param Name) any { return methodCall[any](gdClass.obj.get(), methodRenderingServerSingleton[23], &shader, &param) }
func (gdClass RenderingServerSingleton) ShaderSetDefaultTextureParam(shader RID, param Name, texture RID, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[24], &shader, &param, &texture, &index) }
func (gdClass RenderingServerSingleton) ShaderGetDefaultTextureParam(shader RID, param Name, index int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[25], &shader, &param, &index) }
func (gdClass RenderingServerSingleton) MaterialCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[26]) }
func (gdClass RenderingServerSingleton) MaterialSetShader(shader_material RID, shader RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[27], &shader_material, &shader) }
func (gdClass RenderingServerSingleton) MaterialSetParam(material RID, parameter Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[28], &material, &parameter, &value) }
func (gdClass RenderingServerSingleton) MaterialGetParam(material RID, parameter Name) any { return methodCall[any](gdClass.obj.get(), methodRenderingServerSingleton[29], &material, &parameter) }
func (gdClass RenderingServerSingleton) MaterialSetRenderPriority(material RID, priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[30], &material, &priority) }
func (gdClass RenderingServerSingleton) MaterialSetNextPass(material RID, next_material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[31], &material, &next_material) }
func (gdClass RenderingServerSingleton) MeshCreateFromSurfaces(surfaces Array, blend_shape_count int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[32], &surfaces, &blend_shape_count) }
func (gdClass RenderingServerSingleton) MeshCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[33]) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetFormatOffset(format int64, vertex_count int64, array_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[34], &format, &vertex_count, &array_index) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetFormatVertexStride(format int64, vertex_count int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[35], &format, &vertex_count) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetFormatAttributeStride(format int64, vertex_count int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[36], &format, &vertex_count) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetFormatSkinStride(format int64, vertex_count int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[37], &format, &vertex_count) }
func (gdClass RenderingServerSingleton) MeshAddSurface(mesh RID, surface Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[38], &mesh, &surface) }
func (gdClass RenderingServerSingleton) MeshAddSurfaceFromArrays(mesh RID, primitive RenderingServerPrimitiveType, arrays Array, blend_shapes Array, lods Dictionary, compress_format int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[39], &mesh, &primitive, &arrays, &blend_shapes, &lods, &compress_format) }
func (gdClass RenderingServerSingleton) MeshGetBlendShapeCount(mesh RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[40], &mesh) }
func (gdClass RenderingServerSingleton) MeshSetBlendShapeMode(mesh RID, mode RenderingServerBlendShapeMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[41], &mesh, &mode) }
func (gdClass RenderingServerSingleton) MeshGetBlendShapeMode(mesh RID) RenderingServerBlendShapeMode { return methodCall[RenderingServerBlendShapeMode](gdClass.obj.get(), methodRenderingServerSingleton[42], &mesh) }
func (gdClass RenderingServerSingleton) MeshSurfaceSetMaterial(mesh RID, surface int64, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[43], &mesh, &surface, &material) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetMaterial(mesh RID, surface int64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[44], &mesh, &surface) }
func (gdClass RenderingServerSingleton) MeshGetSurface(mesh RID, surface int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodRenderingServerSingleton[45], &mesh, &surface) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetArrays(mesh RID, surface int64) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[46], &mesh, &surface) }
func (gdClass RenderingServerSingleton) MeshSurfaceGetBlendShapeArrays(mesh RID, surface int64) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[47], &mesh, &surface) }
func (gdClass RenderingServerSingleton) MeshGetSurfaceCount(mesh RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[48], &mesh) }
func (gdClass RenderingServerSingleton) MeshSetCustomAabb(mesh RID, aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[49], &mesh, &aabb) }
func (gdClass RenderingServerSingleton) MeshGetCustomAabb(mesh RID) AABB { return methodCall[AABB](gdClass.obj.get(), methodRenderingServerSingleton[50], &mesh) }
func (gdClass RenderingServerSingleton) MeshClear(mesh RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[51], &mesh) }
func (gdClass RenderingServerSingleton) MeshSurfaceUpdateVertexRegion(mesh RID, surface int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[52], &mesh, &surface, &offset, &data) }
func (gdClass RenderingServerSingleton) MeshSurfaceUpdateAttributeRegion(mesh RID, surface int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[53], &mesh, &surface, &offset, &data) }
func (gdClass RenderingServerSingleton) MeshSurfaceUpdateSkinRegion(mesh RID, surface int64, offset int64, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[54], &mesh, &surface, &offset, &data) }
func (gdClass RenderingServerSingleton) MeshSetShadowMesh(mesh RID, shadow_mesh RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[55], &mesh, &shadow_mesh) }
func (gdClass RenderingServerSingleton) MultimeshCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[56]) }
func (gdClass RenderingServerSingleton) MultimeshAllocateData(multimesh RID, instances int64, transform_format RenderingServerMultimeshTransformFormat, color_format bool, custom_data_format bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[57], &multimesh, &instances, &transform_format, &color_format, &custom_data_format) }
func (gdClass RenderingServerSingleton) MultimeshGetInstanceCount(multimesh RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[58], &multimesh) }
func (gdClass RenderingServerSingleton) MultimeshSetMesh(multimesh RID, mesh RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[59], &multimesh, &mesh) }
func (gdClass RenderingServerSingleton) MultimeshInstanceSetTransform(multimesh RID, index int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[60], &multimesh, &index, &transform) }
func (gdClass RenderingServerSingleton) MultimeshInstanceSetTransform2d(multimesh RID, index int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[61], &multimesh, &index, &transform) }
func (gdClass RenderingServerSingleton) MultimeshInstanceSetColor(multimesh RID, index int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[62], &multimesh, &index, &color) }
func (gdClass RenderingServerSingleton) MultimeshInstanceSetCustomData(multimesh RID, index int64, custom_data Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[63], &multimesh, &index, &custom_data) }
func (gdClass RenderingServerSingleton) MultimeshGetMesh(multimesh RID) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[64], &multimesh) }
func (gdClass RenderingServerSingleton) MultimeshGetAabb(multimesh RID) AABB { return methodCall[AABB](gdClass.obj.get(), methodRenderingServerSingleton[65], &multimesh) }
func (gdClass RenderingServerSingleton) MultimeshInstanceGetTransform(multimesh RID, index int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodRenderingServerSingleton[66], &multimesh, &index) }
func (gdClass RenderingServerSingleton) MultimeshInstanceGetTransform2d(multimesh RID, index int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodRenderingServerSingleton[67], &multimesh, &index) }
func (gdClass RenderingServerSingleton) MultimeshInstanceGetColor(multimesh RID, index int64) Color { return methodCall[Color](gdClass.obj.get(), methodRenderingServerSingleton[68], &multimesh, &index) }
func (gdClass RenderingServerSingleton) MultimeshInstanceGetCustomData(multimesh RID, index int64) Color { return methodCall[Color](gdClass.obj.get(), methodRenderingServerSingleton[69], &multimesh, &index) }
func (gdClass RenderingServerSingleton) MultimeshSetVisibleInstances(multimesh RID, visible int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[70], &multimesh, &visible) }
func (gdClass RenderingServerSingleton) MultimeshGetVisibleInstances(multimesh RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[71], &multimesh) }
func (gdClass RenderingServerSingleton) MultimeshSetBuffer(multimesh RID, buffer []float32)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[72], &multimesh, &buffer) }
func (gdClass RenderingServerSingleton) MultimeshGetBuffer(multimesh RID) []float32 { return methodCall[[]float32](gdClass.obj.get(), methodRenderingServerSingleton[73], &multimesh) }
func (gdClass RenderingServerSingleton) SkeletonCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[74]) }
func (gdClass RenderingServerSingleton) SkeletonAllocateData(skeleton RID, bones int64, is_2d_skeleton bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[75], &skeleton, &bones, &is_2d_skeleton) }
func (gdClass RenderingServerSingleton) SkeletonGetBoneCount(skeleton RID) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[76], &skeleton) }
func (gdClass RenderingServerSingleton) SkeletonBoneSetTransform(skeleton RID, bone int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[77], &skeleton, &bone, &transform) }
func (gdClass RenderingServerSingleton) SkeletonBoneGetTransform(skeleton RID, bone int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodRenderingServerSingleton[78], &skeleton, &bone) }
func (gdClass RenderingServerSingleton) SkeletonBoneSetTransform2d(skeleton RID, bone int64, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[79], &skeleton, &bone, &transform) }
func (gdClass RenderingServerSingleton) SkeletonBoneGetTransform2d(skeleton RID, bone int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodRenderingServerSingleton[80], &skeleton, &bone) }
func (gdClass RenderingServerSingleton) SkeletonSetBaseTransform2d(skeleton RID, base_transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[81], &skeleton, &base_transform) }
func (gdClass RenderingServerSingleton) DirectionalLightCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[82]) }
func (gdClass RenderingServerSingleton) OmniLightCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[83]) }
func (gdClass RenderingServerSingleton) SpotLightCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[84]) }
func (gdClass RenderingServerSingleton) LightSetColor(light RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[85], &light, &color) }
func (gdClass RenderingServerSingleton) LightSetParam(light RID, param RenderingServerLightParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[86], &light, &param, &value) }
func (gdClass RenderingServerSingleton) LightSetShadow(light RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[87], &light, &enabled) }
func (gdClass RenderingServerSingleton) LightSetProjector(light RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[88], &light, &texture) }
func (gdClass RenderingServerSingleton) LightSetNegative(light RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[89], &light, &enable) }
func (gdClass RenderingServerSingleton) LightSetCullMask(light RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[90], &light, &mask) }
func (gdClass RenderingServerSingleton) LightSetDistanceFade(decal RID, enabled bool, begin float64, shadow float64, length float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[91], &decal, &enabled, &begin, &shadow, &length) }
func (gdClass RenderingServerSingleton) LightSetReverseCullFaceMode(light RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[92], &light, &enabled) }
func (gdClass RenderingServerSingleton) LightSetBakeMode(light RID, bake_mode RenderingServerLightBakeMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[93], &light, &bake_mode) }
func (gdClass RenderingServerSingleton) LightSetMaxSdfgiCascade(light RID, cascade int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[94], &light, &cascade) }
func (gdClass RenderingServerSingleton) LightOmniSetShadowMode(light RID, mode RenderingServerLightOmniShadowMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[95], &light, &mode) }
func (gdClass RenderingServerSingleton) LightDirectionalSetShadowMode(light RID, mode RenderingServerLightDirectionalShadowMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[96], &light, &mode) }
func (gdClass RenderingServerSingleton) LightDirectionalSetBlendSplits(light RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[97], &light, &enable) }
func (gdClass RenderingServerSingleton) LightDirectionalSetSkyMode(light RID, mode RenderingServerLightDirectionalSkyMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[98], &light, &mode) }
func (gdClass RenderingServerSingleton) LightProjectorsSetFilter(filter RenderingServerLightProjectorFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[99], &filter) }
func (gdClass RenderingServerSingleton) PositionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[100], &quality) }
func (gdClass RenderingServerSingleton) DirectionalSoftShadowFilterSetQuality(quality RenderingServerShadowQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[101], &quality) }
func (gdClass RenderingServerSingleton) DirectionalShadowAtlasSetSize(size int64, is_16bits bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[102], &size, &is_16bits) }
func (gdClass RenderingServerSingleton) ReflectionProbeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[103]) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetUpdateMode(probe RID, mode RenderingServerReflectionProbeUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[104], &probe, &mode) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetIntensity(probe RID, intensity float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[105], &probe, &intensity) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetAmbientMode(probe RID, mode RenderingServerReflectionProbeAmbientMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[106], &probe, &mode) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetAmbientColor(probe RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[107], &probe, &color) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetAmbientEnergy(probe RID, energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[108], &probe, &energy) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetMaxDistance(probe RID, distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[109], &probe, &distance) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetExtents(probe RID, extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[110], &probe, &extents) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetOriginOffset(probe RID, offset Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[111], &probe, &offset) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetAsInterior(probe RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[112], &probe, &enable) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetEnableBoxProjection(probe RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[113], &probe, &enable) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetEnableShadows(probe RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[114], &probe, &enable) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetCullMask(probe RID, layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[115], &probe, &layers) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetResolution(probe RID, resolution int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[116], &probe, &resolution) }
func (gdClass RenderingServerSingleton) ReflectionProbeSetMeshLodThreshold(probe RID, pixels float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[117], &probe, &pixels) }
func (gdClass RenderingServerSingleton) DecalCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[118]) }
func (gdClass RenderingServerSingleton) DecalSetExtents(decal RID, extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[119], &decal, &extents) }
func (gdClass RenderingServerSingleton) DecalSetTexture(decal RID, atype RenderingServerDecalTexture, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[120], &decal, &atype, &texture) }
func (gdClass RenderingServerSingleton) DecalSetEmissionEnergy(decal RID, energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[121], &decal, &energy) }
func (gdClass RenderingServerSingleton) DecalSetAlbedoMix(decal RID, albedo_mix float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[122], &decal, &albedo_mix) }
func (gdClass RenderingServerSingleton) DecalSetModulate(decal RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[123], &decal, &color) }
func (gdClass RenderingServerSingleton) DecalSetCullMask(decal RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[124], &decal, &mask) }
func (gdClass RenderingServerSingleton) DecalSetDistanceFade(decal RID, enabled bool, begin float64, length float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[125], &decal, &enabled, &begin, &length) }
func (gdClass RenderingServerSingleton) DecalSetFade(decal RID, above float64, below float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[126], &decal, &above, &below) }
func (gdClass RenderingServerSingleton) DecalSetNormalFade(decal RID, fade float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[127], &decal, &fade) }
func (gdClass RenderingServerSingleton) DecalsSetFilter(filter RenderingServerDecalFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[128], &filter) }
func (gdClass RenderingServerSingleton) GiSetUseHalfResolution(half_resolution bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[129], &half_resolution) }
func (gdClass RenderingServerSingleton) VoxelGiCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[130]) }
func (gdClass RenderingServerSingleton) VoxelGiAllocateData(voxel_gi RID, to_cell_xform Transform3D, aabb AABB, octree_size Vector3i, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[131], &voxel_gi, &to_cell_xform, &aabb, &octree_size, &octree_cells, &data_cells, &distance_field, &level_counts) }
func (gdClass RenderingServerSingleton) VoxelGiGetOctreeSize(voxel_gi RID) Vector3i { return methodCall[Vector3i](gdClass.obj.get(), methodRenderingServerSingleton[132], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiGetOctreeCells(voxel_gi RID) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingServerSingleton[133], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiGetDataCells(voxel_gi RID) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingServerSingleton[134], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiGetDistanceField(voxel_gi RID) []byte { return methodCall[[]byte](gdClass.obj.get(), methodRenderingServerSingleton[135], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiGetLevelCounts(voxel_gi RID) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRenderingServerSingleton[136], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiGetToCellXform(voxel_gi RID) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodRenderingServerSingleton[137], &voxel_gi) }
func (gdClass RenderingServerSingleton) VoxelGiSetDynamicRange(voxel_gi RID, arange float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[138], &voxel_gi, &arange) }
func (gdClass RenderingServerSingleton) VoxelGiSetPropagation(voxel_gi RID, amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[139], &voxel_gi, &amount) }
func (gdClass RenderingServerSingleton) VoxelGiSetEnergy(voxel_gi RID, energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[140], &voxel_gi, &energy) }
func (gdClass RenderingServerSingleton) VoxelGiSetBias(voxel_gi RID, bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[141], &voxel_gi, &bias) }
func (gdClass RenderingServerSingleton) VoxelGiSetNormalBias(voxel_gi RID, bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[142], &voxel_gi, &bias) }
func (gdClass RenderingServerSingleton) VoxelGiSetInterior(voxel_gi RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[143], &voxel_gi, &enable) }
func (gdClass RenderingServerSingleton) VoxelGiSetUseTwoBounces(voxel_gi RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[144], &voxel_gi, &enable) }
func (gdClass RenderingServerSingleton) VoxelGiSetQuality(quality RenderingServerVoxelGIQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[145], &quality) }
func (gdClass RenderingServerSingleton) LightmapCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[146]) }
func (gdClass RenderingServerSingleton) LightmapSetTextures(lightmap RID, light RID, uses_sh bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[147], &lightmap, &light, &uses_sh) }
func (gdClass RenderingServerSingleton) LightmapSetProbeBounds(lightmap RID, bounds AABB)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[148], &lightmap, &bounds) }
func (gdClass RenderingServerSingleton) LightmapSetProbeInterior(lightmap RID, interior bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[149], &lightmap, &interior) }
func (gdClass RenderingServerSingleton) LightmapSetProbeCaptureData(lightmap RID, points []Vector3, point_sh []Color, tetrahedra []int32, bsp_tree []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[150], &lightmap, &points, &point_sh, &tetrahedra, &bsp_tree) }
func (gdClass RenderingServerSingleton) LightmapGetProbeCapturePoints(lightmap RID) []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodRenderingServerSingleton[151], &lightmap) }
func (gdClass RenderingServerSingleton) LightmapGetProbeCaptureSh(lightmap RID) []Color { return methodCall[[]Color](gdClass.obj.get(), methodRenderingServerSingleton[152], &lightmap) }
func (gdClass RenderingServerSingleton) LightmapGetProbeCaptureTetrahedra(lightmap RID) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRenderingServerSingleton[153], &lightmap) }
func (gdClass RenderingServerSingleton) LightmapGetProbeCaptureBspTree(lightmap RID) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodRenderingServerSingleton[154], &lightmap) }
func (gdClass RenderingServerSingleton) LightmapSetProbeCaptureUpdateSpeed(speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[155], &speed) }
func (gdClass RenderingServerSingleton) ParticlesCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[156]) }
func (gdClass RenderingServerSingleton) ParticlesSetMode(particles RID, mode RenderingServerParticlesMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[157], &particles, &mode) }
func (gdClass RenderingServerSingleton) ParticlesSetEmitting(particles RID, emitting bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[158], &particles, &emitting) }
func (gdClass RenderingServerSingleton) ParticlesGetEmitting(particles RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[159], &particles) }
func (gdClass RenderingServerSingleton) ParticlesSetAmount(particles RID, amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[160], &particles, &amount) }
func (gdClass RenderingServerSingleton) ParticlesSetLifetime(particles RID, lifetime float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[161], &particles, &lifetime) }
func (gdClass RenderingServerSingleton) ParticlesSetOneShot(particles RID, one_shot bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[162], &particles, &one_shot) }
func (gdClass RenderingServerSingleton) ParticlesSetPreProcessTime(particles RID, time float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[163], &particles, &time) }
func (gdClass RenderingServerSingleton) ParticlesSetExplosivenessRatio(particles RID, ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[164], &particles, &ratio) }
func (gdClass RenderingServerSingleton) ParticlesSetRandomnessRatio(particles RID, ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[165], &particles, &ratio) }
func (gdClass RenderingServerSingleton) ParticlesSetCustomAabb(particles RID, aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[166], &particles, &aabb) }
func (gdClass RenderingServerSingleton) ParticlesSetSpeedScale(particles RID, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[167], &particles, &scale) }
func (gdClass RenderingServerSingleton) ParticlesSetUseLocalCoordinates(particles RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[168], &particles, &enable) }
func (gdClass RenderingServerSingleton) ParticlesSetProcessMaterial(particles RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[169], &particles, &material) }
func (gdClass RenderingServerSingleton) ParticlesSetFixedFps(particles RID, fps int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[170], &particles, &fps) }
func (gdClass RenderingServerSingleton) ParticlesSetInterpolate(particles RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[171], &particles, &enable) }
func (gdClass RenderingServerSingleton) ParticlesSetFractionalDelta(particles RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[172], &particles, &enable) }
func (gdClass RenderingServerSingleton) ParticlesSetCollisionBaseSize(particles RID, size float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[173], &particles, &size) }
func (gdClass RenderingServerSingleton) ParticlesSetTransformAlign(particles RID, align RenderingServerParticlesTransformAlign)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[174], &particles, &align) }
func (gdClass RenderingServerSingleton) ParticlesSetTrails(particles RID, enable bool, length_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[175], &particles, &enable, &length_sec) }
func (gdClass RenderingServerSingleton) ParticlesSetTrailBindPoses(particles RID, bind_poses Array)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[176], &particles, &bind_poses) }
func (gdClass RenderingServerSingleton) ParticlesIsInactive(particles RID) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[177], &particles) }
func (gdClass RenderingServerSingleton) ParticlesRequestProcess(particles RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[178], &particles) }
func (gdClass RenderingServerSingleton) ParticlesRestart(particles RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[179], &particles) }
func (gdClass RenderingServerSingleton) ParticlesSetSubemitter(particles RID, subemitter_particles RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[180], &particles, &subemitter_particles) }
func (gdClass RenderingServerSingleton) ParticlesEmit(particles RID, transform Transform3D, velocity Vector3, color Color, custom Color, emit_flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[181], &particles, &transform, &velocity, &color, &custom, &emit_flags) }
func (gdClass RenderingServerSingleton) ParticlesSetDrawOrder(particles RID, order RenderingServerParticlesDrawOrder)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[182], &particles, &order) }
func (gdClass RenderingServerSingleton) ParticlesSetDrawPasses(particles RID, count int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[183], &particles, &count) }
func (gdClass RenderingServerSingleton) ParticlesSetDrawPassMesh(particles RID, pass int64, mesh RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[184], &particles, &pass, &mesh) }
func (gdClass RenderingServerSingleton) ParticlesGetCurrentAabb(particles RID) AABB { return methodCall[AABB](gdClass.obj.get(), methodRenderingServerSingleton[185], &particles) }
func (gdClass RenderingServerSingleton) ParticlesSetEmissionTransform(particles RID, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[186], &particles, &transform) }
func (gdClass RenderingServerSingleton) ParticlesCollisionCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[187]) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetCollisionType(particles_collision RID, atype RenderingServerParticlesCollisionType)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[188], &particles_collision, &atype) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetCullMask(particles_collision RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[189], &particles_collision, &mask) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetSphereRadius(particles_collision RID, radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[190], &particles_collision, &radius) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetBoxExtents(particles_collision RID, extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[191], &particles_collision, &extents) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetAttractorStrength(particles_collision RID, setrngth float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[192], &particles_collision, &setrngth) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetAttractorDirectionality(particles_collision RID, amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[193], &particles_collision, &amount) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetAttractorAttenuation(particles_collision RID, curve float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[194], &particles_collision, &curve) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetFieldTexture(particles_collision RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[195], &particles_collision, &texture) }
func (gdClass RenderingServerSingleton) ParticlesCollisionHeightFieldUpdate(particles_collision RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[196], &particles_collision) }
func (gdClass RenderingServerSingleton) ParticlesCollisionSetHeightFieldResolution(particles_collision RID, resolution RenderingServerParticlesCollisionHeightfieldResolution)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[197], &particles_collision, &resolution) }
func (gdClass RenderingServerSingleton) FogVolumeCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[198]) }
func (gdClass RenderingServerSingleton) FogVolumeSetShape(fog_volume RID, shape RenderingServerFogVolumeShape)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[199], &fog_volume, &shape) }
func (gdClass RenderingServerSingleton) FogVolumeSetExtents(fog_volume RID, extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[200], &fog_volume, &extents) }
func (gdClass RenderingServerSingleton) FogVolumeSetMaterial(fog_volume RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[201], &fog_volume, &material) }
func (gdClass RenderingServerSingleton) VisibilityNotifierCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[202]) }
func (gdClass RenderingServerSingleton) VisibilityNotifierSetAabb(notifier RID, aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[203], &notifier, &aabb) }
func (gdClass RenderingServerSingleton) VisibilityNotifierSetCallbacks(notifier RID, enter_callable Callable, exit_callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[204], &notifier, &enter_callable, &exit_callable) }
func (gdClass RenderingServerSingleton) OccluderCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[205]) }
func (gdClass RenderingServerSingleton) OccluderSetMesh(occluder RID, vertices []Vector3, indices []int32)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[206], &occluder, &vertices, &indices) }
func (gdClass RenderingServerSingleton) CameraCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[207]) }
func (gdClass RenderingServerSingleton) CameraSetPerspective(camera RID, fovy_degrees float64, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[208], &camera, &fovy_degrees, &z_near, &z_far) }
func (gdClass RenderingServerSingleton) CameraSetOrthogonal(camera RID, size float64, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[209], &camera, &size, &z_near, &z_far) }
func (gdClass RenderingServerSingleton) CameraSetFrustum(camera RID, size float64, offset Vector2, z_near float64, z_far float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[210], &camera, &size, &offset, &z_near, &z_far) }
func (gdClass RenderingServerSingleton) CameraSetTransform(camera RID, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[211], &camera, &transform) }
func (gdClass RenderingServerSingleton) CameraSetCullMask(camera RID, layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[212], &camera, &layers) }
func (gdClass RenderingServerSingleton) CameraSetEnvironment(camera RID, env RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[213], &camera, &env) }
func (gdClass RenderingServerSingleton) CameraSetCameraEffects(camera RID, effects RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[214], &camera, &effects) }
func (gdClass RenderingServerSingleton) CameraSetUseVerticalAspect(camera RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[215], &camera, &enable) }
func (gdClass RenderingServerSingleton) ViewportCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[216]) }
func (gdClass RenderingServerSingleton) ViewportSetUseXr(viewport RID, use_xr bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[217], &viewport, &use_xr) }
func (gdClass RenderingServerSingleton) ViewportSetSize(viewport RID, width int64, height int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[218], &viewport, &width, &height) }
func (gdClass RenderingServerSingleton) ViewportSetActive(viewport RID, active bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[219], &viewport, &active) }
func (gdClass RenderingServerSingleton) ViewportSetParentViewport(viewport RID, parent_viewport RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[220], &viewport, &parent_viewport) }
func (gdClass RenderingServerSingleton) ViewportAttachToScreen(viewport RID, rect Rect2, screen int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[221], &viewport, &rect, &screen) }
func (gdClass RenderingServerSingleton) ViewportSetRenderDirectToScreen(viewport RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[222], &viewport, &enabled) }
func (gdClass RenderingServerSingleton) ViewportSetScaling3dMode(viewport RID, scaling_3d_mode RenderingServerViewportScaling3DMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[223], &viewport, &scaling_3d_mode) }
func (gdClass RenderingServerSingleton) ViewportSetScaling3dScale(viewport RID, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[224], &viewport, &scale) }
func (gdClass RenderingServerSingleton) ViewportSetFsrSharpness(viewport RID, sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[225], &viewport, &sharpness) }
func (gdClass RenderingServerSingleton) ViewportSetTextureMipmapBias(viewport RID, mipmap_bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[226], &viewport, &mipmap_bias) }
func (gdClass RenderingServerSingleton) ViewportSetUpdateMode(viewport RID, update_mode RenderingServerViewportUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[227], &viewport, &update_mode) }
func (gdClass RenderingServerSingleton) ViewportSetClearMode(viewport RID, clear_mode RenderingServerViewportClearMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[228], &viewport, &clear_mode) }
func (gdClass RenderingServerSingleton) ViewportGetTexture(viewport RID) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[229], &viewport) }
func (gdClass RenderingServerSingleton) ViewportSetDisable3d(viewport RID, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[230], &viewport, &disable) }
func (gdClass RenderingServerSingleton) ViewportSetDisable2d(viewport RID, disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[231], &viewport, &disable) }
func (gdClass RenderingServerSingleton) ViewportSetDisableEnvironment(viewport RID, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[232], &viewport, &disabled) }
func (gdClass RenderingServerSingleton) ViewportAttachCamera(viewport RID, camera RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[233], &viewport, &camera) }
func (gdClass RenderingServerSingleton) ViewportSetScenario(viewport RID, scenario RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[234], &viewport, &scenario) }
func (gdClass RenderingServerSingleton) ViewportAttachCanvas(viewport RID, canvas RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[235], &viewport, &canvas) }
func (gdClass RenderingServerSingleton) ViewportRemoveCanvas(viewport RID, canvas RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[236], &viewport, &canvas) }
func (gdClass RenderingServerSingleton) ViewportSetSnap2dTransformsToPixel(viewport RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[237], &viewport, &enabled) }
func (gdClass RenderingServerSingleton) ViewportSetSnap2dVerticesToPixel(viewport RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[238], &viewport, &enabled) }
func (gdClass RenderingServerSingleton) ViewportSetDefaultCanvasItemTextureFilter(viewport RID, filter RenderingServerCanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[239], &viewport, &filter) }
func (gdClass RenderingServerSingleton) ViewportSetDefaultCanvasItemTextureRepeat(viewport RID, repeat RenderingServerCanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[240], &viewport, &repeat) }
func (gdClass RenderingServerSingleton) ViewportSetCanvasTransform(viewport RID, canvas RID, offset Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[241], &viewport, &canvas, &offset) }
func (gdClass RenderingServerSingleton) ViewportSetCanvasStacking(viewport RID, canvas RID, layer int64, sublayer int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[242], &viewport, &canvas, &layer, &sublayer) }
func (gdClass RenderingServerSingleton) ViewportSetTransparentBackground(viewport RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[243], &viewport, &enabled) }
func (gdClass RenderingServerSingleton) ViewportSetGlobalCanvasTransform(viewport RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[244], &viewport, &transform) }
func (gdClass RenderingServerSingleton) ViewportSetSdfOversizeAndScale(viewport RID, oversize RenderingServerViewportSDFOversize, scale RenderingServerViewportSDFScale)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[245], &viewport, &oversize, &scale) }
func (gdClass RenderingServerSingleton) ViewportSetPositionalShadowAtlasSize(viewport RID, size int64, use_16_bits bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[246], &viewport, &size, &use_16_bits) }
func (gdClass RenderingServerSingleton) ViewportSetPositionalShadowAtlasQuadrantSubdivision(viewport RID, quadrant int64, subdivision int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[247], &viewport, &quadrant, &subdivision) }
func (gdClass RenderingServerSingleton) ViewportSetMsaa(viewport RID, msaa RenderingServerViewportMSAA)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[248], &viewport, &msaa) }
func (gdClass RenderingServerSingleton) ViewportSetScreenSpaceAa(viewport RID, mode RenderingServerViewportScreenSpaceAA)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[249], &viewport, &mode) }
func (gdClass RenderingServerSingleton) ViewportSetUseTaa(viewport RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[250], &viewport, &enable) }
func (gdClass RenderingServerSingleton) ViewportSetUseDebanding(viewport RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[251], &viewport, &enable) }
func (gdClass RenderingServerSingleton) ViewportSetUseOcclusionCulling(viewport RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[252], &viewport, &enable) }
func (gdClass RenderingServerSingleton) ViewportSetOcclusionRaysPerThread(rays_per_thread int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[253], &rays_per_thread) }
func (gdClass RenderingServerSingleton) ViewportSetOcclusionCullingBuildQuality(quality RenderingServerViewportOcclusionCullingBuildQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[254], &quality) }
func (gdClass RenderingServerSingleton) ViewportGetRenderInfo(viewport RID, atype RenderingServerViewportRenderInfoType, info RenderingServerViewportRenderInfo) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[255], &viewport, &atype, &info) }
func (gdClass RenderingServerSingleton) ViewportSetDebugDraw(viewport RID, draw RenderingServerViewportDebugDraw)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[256], &viewport, &draw) }
func (gdClass RenderingServerSingleton) ViewportSetMeasureRenderTime(viewport RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[257], &viewport, &enable) }
func (gdClass RenderingServerSingleton) ViewportGetMeasuredRenderTimeCpu(viewport RID) float64 { return methodCall[float64](gdClass.obj.get(), methodRenderingServerSingleton[258], &viewport) }
func (gdClass RenderingServerSingleton) ViewportGetMeasuredRenderTimeGpu(viewport RID) float64 { return methodCall[float64](gdClass.obj.get(), methodRenderingServerSingleton[259], &viewport) }
func (gdClass RenderingServerSingleton) ViewportSetVrsMode(viewport RID, mode RenderingServerViewportVRSMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[260], &viewport, &mode) }
func (gdClass RenderingServerSingleton) ViewportSetVrsTexture(viewport RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[261], &viewport, &texture) }
func (gdClass RenderingServerSingleton) SkyCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[262]) }
func (gdClass RenderingServerSingleton) SkySetRadianceSize(sky RID, radiance_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[263], &sky, &radiance_size) }
func (gdClass RenderingServerSingleton) SkySetMode(sky RID, mode RenderingServerSkyMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[264], &sky, &mode) }
func (gdClass RenderingServerSingleton) SkySetMaterial(sky RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[265], &sky, &material) }
func (gdClass RenderingServerSingleton) SkyBakePanorama(sky RID, energy float64, bake_irradiance bool, size Vector2i) Image { return methodCall[Image](gdClass.obj.get(), methodRenderingServerSingleton[266], &sky, &energy, &bake_irradiance, &size) }
func (gdClass RenderingServerSingleton) EnvironmentCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[267]) }
func (gdClass RenderingServerSingleton) EnvironmentSetBackground(env RID, bg RenderingServerEnvironmentBG)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[268], &env, &bg) }
func (gdClass RenderingServerSingleton) EnvironmentSetSky(env RID, sky RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[269], &env, &sky) }
func (gdClass RenderingServerSingleton) EnvironmentSetSkyCustomFov(env RID, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[270], &env, &scale) }
func (gdClass RenderingServerSingleton) EnvironmentSetSkyOrientation(env RID, orientation Basis)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[271], &env, &orientation) }
func (gdClass RenderingServerSingleton) EnvironmentSetBgColor(env RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[272], &env, &color) }
func (gdClass RenderingServerSingleton) EnvironmentSetBgEnergy(env RID, energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[273], &env, &energy) }
func (gdClass RenderingServerSingleton) EnvironmentSetCanvasMaxLayer(env RID, max_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[274], &env, &max_layer) }
func (gdClass RenderingServerSingleton) EnvironmentSetAmbientLight(env RID, color Color, ambient RenderingServerEnvironmentAmbientSource, energy float64, sky_contibution float64, reflection_source RenderingServerEnvironmentReflectionSource)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[275], &env, &color, &ambient, &energy, &sky_contibution, &reflection_source) }
func (gdClass RenderingServerSingleton) EnvironmentSetGlow(env RID, enable bool, levels []float32, intensity float64, strength float64, mix float64, bloom_threshold float64, blend_mode RenderingServerEnvironmentGlowBlendMode, hdr_bleed_threshold float64, hdr_bleed_scale float64, hdr_luminance_cap float64, glow_map_strength float64, glow_map RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[276], &env, &enable, &levels, &intensity, &strength, &mix, &bloom_threshold, &blend_mode, &hdr_bleed_threshold, &hdr_bleed_scale, &hdr_luminance_cap, &glow_map_strength, &glow_map) }
func (gdClass RenderingServerSingleton) EnvironmentSetTonemap(env RID, tone_mapper RenderingServerEnvironmentToneMapper, exposure float64, white float64, auto_exposure bool, min_luminance float64, max_luminance float64, auto_exp_speed float64, auto_exp_grey float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[277], &env, &tone_mapper, &exposure, &white, &auto_exposure, &min_luminance, &max_luminance, &auto_exp_speed, &auto_exp_grey) }
func (gdClass RenderingServerSingleton) EnvironmentSetAdjustment(env RID, enable bool, brightness float64, contrast float64, saturation float64, use_1d_color_correction bool, color_correction RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[278], &env, &enable, &brightness, &contrast, &saturation, &use_1d_color_correction, &color_correction) }
func (gdClass RenderingServerSingleton) EnvironmentSetSsr(env RID, enable bool, max_steps int64, fade_in float64, fade_out float64, depth_tolerance float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[279], &env, &enable, &max_steps, &fade_in, &fade_out, &depth_tolerance) }
func (gdClass RenderingServerSingleton) EnvironmentSetSsao(env RID, enable bool, radius float64, intensity float64, power float64, detail float64, horizon float64, sharpness float64, light_affect float64, ao_channel_affect float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[280], &env, &enable, &radius, &intensity, &power, &detail, &horizon, &sharpness, &light_affect, &ao_channel_affect) }
func (gdClass RenderingServerSingleton) EnvironmentSetFog(env RID, enable bool, light_color Color, light_energy float64, sun_scatter float64, density float64, height float64, height_density float64, aerial_perspective float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[281], &env, &enable, &light_color, &light_energy, &sun_scatter, &density, &height, &height_density, &aerial_perspective) }
func (gdClass RenderingServerSingleton) EnvironmentSetSdfgi(env RID, enable bool, cascades int64, min_cell_size float64, y_scale RenderingServerEnvironmentSDFGIYScale, use_occlusion bool, bounce_feedback float64, read_sky bool, energy float64, normal_bias float64, probe_bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[282], &env, &enable, &cascades, &min_cell_size, &y_scale, &use_occlusion, &bounce_feedback, &read_sky, &energy, &normal_bias, &probe_bias) }
func (gdClass RenderingServerSingleton) EnvironmentSetVolumetricFog(env RID, enable bool, density float64, albedo Color, emission Color, emission_energy float64, anisotropy float64, length float64, p_detail_spread float64, gi_inject float64, temporal_reprojection bool, temporal_reprojection_amount float64, ambient_inject float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[283], &env, &enable, &density, &albedo, &emission, &emission_energy, &anisotropy, &length, &p_detail_spread, &gi_inject, &temporal_reprojection, &temporal_reprojection_amount, &ambient_inject) }
func (gdClass RenderingServerSingleton) EnvironmentGlowSetUseBicubicUpscale(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[284], &enable) }
func (gdClass RenderingServerSingleton) EnvironmentGlowSetUseHighQuality(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[285], &enable) }
func (gdClass RenderingServerSingleton) EnvironmentSetSsrRoughnessQuality(quality RenderingServerEnvironmentSSRRoughnessQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[286], &quality) }
func (gdClass RenderingServerSingleton) EnvironmentSetSsaoQuality(quality RenderingServerEnvironmentSSAOQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[287], &quality, &half_size, &adaptive_target, &blur_passes, &fadeout_from, &fadeout_to) }
func (gdClass RenderingServerSingleton) EnvironmentSetSsilQuality(quality RenderingServerEnvironmentSSILQuality, half_size bool, adaptive_target float64, blur_passes int64, fadeout_from float64, fadeout_to float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[288], &quality, &half_size, &adaptive_target, &blur_passes, &fadeout_from, &fadeout_to) }
func (gdClass RenderingServerSingleton) EnvironmentSetSdfgiRayCount(ray_count RenderingServerEnvironmentSDFGIRayCount)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[289], &ray_count) }
func (gdClass RenderingServerSingleton) EnvironmentSetSdfgiFramesToConverge(frames RenderingServerEnvironmentSDFGIFramesToConverge)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[290], &frames) }
func (gdClass RenderingServerSingleton) EnvironmentSetSdfgiFramesToUpdateLight(frames RenderingServerEnvironmentSDFGIFramesToUpdateLight)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[291], &frames) }
func (gdClass RenderingServerSingleton) EnvironmentSetVolumetricFogVolumeSize(size int64, depth int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[292], &size, &depth) }
func (gdClass RenderingServerSingleton) EnvironmentSetVolumetricFogFilterActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[293], &active) }
func (gdClass RenderingServerSingleton) EnvironmentBakePanorama(environment RID, bake_irradiance bool, size Vector2i) Image { return methodCall[Image](gdClass.obj.get(), methodRenderingServerSingleton[294], &environment, &bake_irradiance, &size) }
func (gdClass RenderingServerSingleton) ScreenSpaceRoughnessLimiterSetActive(enable bool, amount float64, limit float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[295], &enable, &amount, &limit) }
func (gdClass RenderingServerSingleton) SubSurfaceScatteringSetQuality(quality RenderingServerSubSurfaceScatteringQuality)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[296], &quality) }
func (gdClass RenderingServerSingleton) SubSurfaceScatteringSetScale(scale float64, depth_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[297], &scale, &depth_scale) }
func (gdClass RenderingServerSingleton) CameraEffectsCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[298]) }
func (gdClass RenderingServerSingleton) CameraEffectsSetDofBlurQuality(quality RenderingServerDOFBlurQuality, use_jitter bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[299], &quality, &use_jitter) }
func (gdClass RenderingServerSingleton) CameraEffectsSetDofBlurBokehShape(shape RenderingServerDOFBokehShape)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[300], &shape) }
func (gdClass RenderingServerSingleton) CameraEffectsSetDofBlur(camera_effects RID, far_enable bool, far_distance float64, far_transition float64, near_enable bool, near_distance float64, near_transition float64, amount float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[301], &camera_effects, &far_enable, &far_distance, &far_transition, &near_enable, &near_distance, &near_transition, &amount) }
func (gdClass RenderingServerSingleton) CameraEffectsSetCustomExposure(camera_effects RID, enable bool, exposure float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[302], &camera_effects, &enable, &exposure) }
func (gdClass RenderingServerSingleton) ScenarioCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[303]) }
func (gdClass RenderingServerSingleton) ScenarioSetEnvironment(scenario RID, environment RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[304], &scenario, &environment) }
func (gdClass RenderingServerSingleton) ScenarioSetFallbackEnvironment(scenario RID, environment RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[305], &scenario, &environment) }
func (gdClass RenderingServerSingleton) ScenarioSetCameraEffects(scenario RID, effects RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[306], &scenario, &effects) }
func (gdClass RenderingServerSingleton) InstanceCreate2(base RID, scenario RID) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[307], &base, &scenario) }
func (gdClass RenderingServerSingleton) InstanceCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[308]) }
func (gdClass RenderingServerSingleton) InstanceSetBase(instance RID, base RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[309], &instance, &base) }
func (gdClass RenderingServerSingleton) InstanceSetScenario(instance RID, scenario RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[310], &instance, &scenario) }
func (gdClass RenderingServerSingleton) InstanceSetLayerMask(instance RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[311], &instance, &mask) }
func (gdClass RenderingServerSingleton) InstanceSetTransform(instance RID, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[312], &instance, &transform) }
func (gdClass RenderingServerSingleton) InstanceAttachObjectInstanceId(instance RID, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[313], &instance, &id) }
func (gdClass RenderingServerSingleton) InstanceSetBlendShapeWeight(instance RID, shape int64, weight float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[314], &instance, &shape, &weight) }
func (gdClass RenderingServerSingleton) InstanceSetSurfaceOverrideMaterial(instance RID, surface int64, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[315], &instance, &surface, &material) }
func (gdClass RenderingServerSingleton) InstanceSetVisible(instance RID, visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[316], &instance, &visible) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetTransparency(instance RID, transparency float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[317], &instance, &transparency) }
func (gdClass RenderingServerSingleton) InstanceSetCustomAabb(instance RID, aabb AABB)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[318], &instance, &aabb) }
func (gdClass RenderingServerSingleton) InstanceAttachSkeleton(instance RID, skeleton RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[319], &instance, &skeleton) }
func (gdClass RenderingServerSingleton) InstanceSetExtraVisibilityMargin(instance RID, margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[320], &instance, &margin) }
func (gdClass RenderingServerSingleton) InstanceSetVisibilityParent(instance RID, parent RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[321], &instance, &parent) }
func (gdClass RenderingServerSingleton) InstanceSetIgnoreCulling(instance RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[322], &instance, &enabled) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetFlag(instance RID, flag RenderingServerInstanceFlags, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[323], &instance, &flag, &enabled) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetCastShadowsSetting(instance RID, shadow_casting_setting RenderingServerShadowCastingSetting)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[324], &instance, &shadow_casting_setting) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetMaterialOverride(instance RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[325], &instance, &material) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetMaterialOverlay(instance RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[326], &instance, &material) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetVisibilityRange(instance RID, min float64, max float64, min_margin float64, max_margin float64, fade_mode RenderingServerVisibilityRangeFadeMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[327], &instance, &min, &max, &min_margin, &max_margin, &fade_mode) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetLightmap(instance RID, lightmap RID, lightmap_uv_scale Rect2, lightmap_slice int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[328], &instance, &lightmap, &lightmap_uv_scale, &lightmap_slice) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetLodBias(instance RID, lod_bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[329], &instance, &lod_bias) }
func (gdClass RenderingServerSingleton) InstanceGeometrySetShaderUniform(instance RID, parameter Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[330], &instance, &parameter, &value) }
func (gdClass RenderingServerSingleton) InstanceGeometryGetShaderUniform(instance RID, parameter Name) any { return methodCall[any](gdClass.obj.get(), methodRenderingServerSingleton[331], &instance, &parameter) }
func (gdClass RenderingServerSingleton) InstanceGeometryGetShaderUniformDefaultValue(instance RID, parameter Name) any { return methodCall[any](gdClass.obj.get(), methodRenderingServerSingleton[332], &instance, &parameter) }
func (gdClass RenderingServerSingleton) InstanceGeometryGetShaderUniformList(instance RID) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[333], &instance) }
func (gdClass RenderingServerSingleton) InstancesCullAabb(aabb AABB, scenario RID) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodRenderingServerSingleton[334], &aabb, &scenario) }
func (gdClass RenderingServerSingleton) InstancesCullRay(from Vector3, to Vector3, scenario RID) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodRenderingServerSingleton[335], &from, &to, &scenario) }
func (gdClass RenderingServerSingleton) InstancesCullConvex(convex Array, scenario RID) []int64 { return methodCall[[]int64](gdClass.obj.get(), methodRenderingServerSingleton[336], &convex, &scenario) }
func (gdClass RenderingServerSingleton) BakeRenderUv2(base RID, material_overrides Array, image_size Vector2i) Array { return methodCall[Array](gdClass.obj.get(), methodRenderingServerSingleton[337], &base, &material_overrides, &image_size) }
func (gdClass RenderingServerSingleton) CanvasCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[338]) }
func (gdClass RenderingServerSingleton) CanvasSetItemMirroring(canvas RID, item RID, mirroring Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[339], &canvas, &item, &mirroring) }
func (gdClass RenderingServerSingleton) CanvasSetModulate(canvas RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[340], &canvas, &color) }
func (gdClass RenderingServerSingleton) CanvasSetDisableScale(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[341], &disable) }
func (gdClass RenderingServerSingleton) CanvasTextureCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[342]) }
func (gdClass RenderingServerSingleton) CanvasTextureSetChannel(canvas_texture RID, channel RenderingServerCanvasTextureChannel, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[343], &canvas_texture, &channel, &texture) }
func (gdClass RenderingServerSingleton) CanvasTextureSetShadingParameters(canvas_texture RID, base_color Color, shininess float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[344], &canvas_texture, &base_color, &shininess) }
func (gdClass RenderingServerSingleton) CanvasTextureSetTextureFilter(canvas_texture RID, filter RenderingServerCanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[345], &canvas_texture, &filter) }
func (gdClass RenderingServerSingleton) CanvasTextureSetTextureRepeat(canvas_texture RID, repeat RenderingServerCanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[346], &canvas_texture, &repeat) }
func (gdClass RenderingServerSingleton) CanvasItemCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[347]) }
func (gdClass RenderingServerSingleton) CanvasItemSetParent(item RID, parent RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[348], &item, &parent) }
func (gdClass RenderingServerSingleton) CanvasItemSetDefaultTextureFilter(item RID, filter RenderingServerCanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[349], &item, &filter) }
func (gdClass RenderingServerSingleton) CanvasItemSetDefaultTextureRepeat(item RID, repeat RenderingServerCanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[350], &item, &repeat) }
func (gdClass RenderingServerSingleton) CanvasItemSetVisible(item RID, visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[351], &item, &visible) }
func (gdClass RenderingServerSingleton) CanvasItemSetLightMask(item RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[352], &item, &mask) }
func (gdClass RenderingServerSingleton) CanvasItemSetTransform(item RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[353], &item, &transform) }
func (gdClass RenderingServerSingleton) CanvasItemSetClip(item RID, clip bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[354], &item, &clip) }
func (gdClass RenderingServerSingleton) CanvasItemSetDistanceFieldMode(item RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[355], &item, &enabled) }
func (gdClass RenderingServerSingleton) CanvasItemSetCustomRect(item RID, use_custom_rect bool, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[356], &item, &use_custom_rect, &rect) }
func (gdClass RenderingServerSingleton) CanvasItemSetModulate(item RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[357], &item, &color) }
func (gdClass RenderingServerSingleton) CanvasItemSetSelfModulate(item RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[358], &item, &color) }
func (gdClass RenderingServerSingleton) CanvasItemSetDrawBehindParent(item RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[359], &item, &enabled) }
func (gdClass RenderingServerSingleton) CanvasItemAddLine(item RID, from Vector2, to Vector2, color Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[360], &item, &from, &to, &color, &width, &antialiased) }
func (gdClass RenderingServerSingleton) CanvasItemAddPolyline(item RID, points []Vector2, colors []Color, width float64, antialiased bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[361], &item, &points, &colors, &width, &antialiased) }
func (gdClass RenderingServerSingleton) CanvasItemAddRect(item RID, rect Rect2, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[362], &item, &rect, &color) }
func (gdClass RenderingServerSingleton) CanvasItemAddCircle(item RID, pos Vector2, radius float64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[363], &item, &pos, &radius, &color) }
func (gdClass RenderingServerSingleton) CanvasItemAddTextureRect(item RID, rect Rect2, texture RID, tile bool, modulate Color, transpose bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[364], &item, &rect, &texture, &tile, &modulate, &transpose) }
func (gdClass RenderingServerSingleton) CanvasItemAddMsdfTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, outline_size int64, px_range float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[365], &item, &rect, &texture, &src_rect, &modulate, &outline_size, &px_range) }
func (gdClass RenderingServerSingleton) CanvasItemAddLcdTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[366], &item, &rect, &texture, &src_rect, &modulate) }
func (gdClass RenderingServerSingleton) CanvasItemAddTextureRectRegion(item RID, rect Rect2, texture RID, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[367], &item, &rect, &texture, &src_rect, &modulate, &transpose, &clip_uv) }
func (gdClass RenderingServerSingleton) CanvasItemAddNinePatch(item RID, rect Rect2, source Rect2, texture RID, topleft Vector2, bottomright Vector2, x_axis_mode RenderingServerNinePatchAxisMode, y_axis_mode RenderingServerNinePatchAxisMode, draw_center bool, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[368], &item, &rect, &source, &texture, &topleft, &bottomright, &x_axis_mode, &y_axis_mode, &draw_center, &modulate) }
func (gdClass RenderingServerSingleton) CanvasItemAddPrimitive(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID, width float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[369], &item, &points, &colors, &uvs, &texture, &width) }
func (gdClass RenderingServerSingleton) CanvasItemAddPolygon(item RID, points []Vector2, colors []Color, uvs []Vector2, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[370], &item, &points, &colors, &uvs, &texture) }
func (gdClass RenderingServerSingleton) CanvasItemAddTriangleArray(item RID, indices []int32, points []Vector2, colors []Color, uvs []Vector2, bones []int32, weights []float32, texture RID, count int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[371], &item, &indices, &points, &colors, &uvs, &bones, &weights, &texture, &count) }
func (gdClass RenderingServerSingleton) CanvasItemAddMesh(item RID, mesh RID, transform Transform2D, modulate Color, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[372], &item, &mesh, &transform, &modulate, &texture) }
func (gdClass RenderingServerSingleton) CanvasItemAddMultimesh(item RID, mesh RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[373], &item, &mesh, &texture) }
func (gdClass RenderingServerSingleton) CanvasItemAddParticles(item RID, particles RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[374], &item, &particles, &texture) }
func (gdClass RenderingServerSingleton) CanvasItemAddSetTransform(item RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[375], &item, &transform) }
func (gdClass RenderingServerSingleton) CanvasItemAddClipIgnore(item RID, ignore bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[376], &item, &ignore) }
func (gdClass RenderingServerSingleton) CanvasItemAddAnimationSlice(item RID, animation_length float64, slice_begin float64, slice_end float64, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[377], &item, &animation_length, &slice_begin, &slice_end, &offset) }
func (gdClass RenderingServerSingleton) CanvasItemSetSortChildrenByY(item RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[378], &item, &enabled) }
func (gdClass RenderingServerSingleton) CanvasItemSetZIndex(item RID, z_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[379], &item, &z_index) }
func (gdClass RenderingServerSingleton) CanvasItemSetZAsRelativeToParent(item RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[380], &item, &enabled) }
func (gdClass RenderingServerSingleton) CanvasItemSetCopyToBackbuffer(item RID, enabled bool, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[381], &item, &enabled, &rect) }
func (gdClass RenderingServerSingleton) CanvasItemClear(item RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[382], &item) }
func (gdClass RenderingServerSingleton) CanvasItemSetDrawIndex(item RID, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[383], &item, &index) }
func (gdClass RenderingServerSingleton) CanvasItemSetMaterial(item RID, material RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[384], &item, &material) }
func (gdClass RenderingServerSingleton) CanvasItemSetUseParentMaterial(item RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[385], &item, &enabled) }
func (gdClass RenderingServerSingleton) CanvasItemSetVisibilityNotifier(item RID, enable bool, area Rect2, enter_callable Callable, exit_callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[386], &item, &enable, &area, &enter_callable, &exit_callable) }
func (gdClass RenderingServerSingleton) CanvasItemSetCanvasGroupMode(item RID, mode RenderingServerCanvasGroupMode, clear_margin float64, fit_empty bool, fit_margin float64, blur_mipmaps bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[387], &item, &mode, &clear_margin, &fit_empty, &fit_margin, &blur_mipmaps) }
func (gdClass RenderingServerSingleton) CanvasLightCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[388]) }
func (gdClass RenderingServerSingleton) CanvasLightAttachToCanvas(light RID, canvas RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[389], &light, &canvas) }
func (gdClass RenderingServerSingleton) CanvasLightSetEnabled(light RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[390], &light, &enabled) }
func (gdClass RenderingServerSingleton) CanvasLightSetTextureScale(light RID, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[391], &light, &scale) }
func (gdClass RenderingServerSingleton) CanvasLightSetTransform(light RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[392], &light, &transform) }
func (gdClass RenderingServerSingleton) CanvasLightSetTexture(light RID, texture RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[393], &light, &texture) }
func (gdClass RenderingServerSingleton) CanvasLightSetTextureOffset(light RID, offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[394], &light, &offset) }
func (gdClass RenderingServerSingleton) CanvasLightSetColor(light RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[395], &light, &color) }
func (gdClass RenderingServerSingleton) CanvasLightSetHeight(light RID, height float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[396], &light, &height) }
func (gdClass RenderingServerSingleton) CanvasLightSetEnergy(light RID, energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[397], &light, &energy) }
func (gdClass RenderingServerSingleton) CanvasLightSetZRange(light RID, min_z int64, max_z int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[398], &light, &min_z, &max_z) }
func (gdClass RenderingServerSingleton) CanvasLightSetLayerRange(light RID, min_layer int64, max_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[399], &light, &min_layer, &max_layer) }
func (gdClass RenderingServerSingleton) CanvasLightSetItemCullMask(light RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[400], &light, &mask) }
func (gdClass RenderingServerSingleton) CanvasLightSetItemShadowCullMask(light RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[401], &light, &mask) }
func (gdClass RenderingServerSingleton) CanvasLightSetMode(light RID, mode RenderingServerCanvasLightMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[402], &light, &mode) }
func (gdClass RenderingServerSingleton) CanvasLightSetShadowEnabled(light RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[403], &light, &enabled) }
func (gdClass RenderingServerSingleton) CanvasLightSetShadowFilter(light RID, filter RenderingServerCanvasLightShadowFilter)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[404], &light, &filter) }
func (gdClass RenderingServerSingleton) CanvasLightSetShadowColor(light RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[405], &light, &color) }
func (gdClass RenderingServerSingleton) CanvasLightSetShadowSmooth(light RID, smooth float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[406], &light, &smooth) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[407]) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderAttachToCanvas(occluder RID, canvas RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[408], &occluder, &canvas) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderSetEnabled(occluder RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[409], &occluder, &enabled) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderSetPolygon(occluder RID, polygon RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[410], &occluder, &polygon) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderSetAsSdfCollision(occluder RID, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[411], &occluder, &enable) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderSetTransform(occluder RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[412], &occluder, &transform) }
func (gdClass RenderingServerSingleton) CanvasLightOccluderSetLightMask(occluder RID, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[413], &occluder, &mask) }
func (gdClass RenderingServerSingleton) CanvasOccluderPolygonCreate() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[414]) }
func (gdClass RenderingServerSingleton) CanvasOccluderPolygonSetShape(occluder_polygon RID, shape []Vector2, closed bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[415], &occluder_polygon, &shape, &closed) }
func (gdClass RenderingServerSingleton) CanvasOccluderPolygonSetCullMode(occluder_polygon RID, mode RenderingServerCanvasOccluderPolygonCullMode)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[416], &occluder_polygon, &mode) }
func (gdClass RenderingServerSingleton) CanvasSetShadowTextureSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[417], &size) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformAdd(name Name, atype RenderingServerGlobalShaderUniformType, default_value any)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[418], &name, &atype, &default_value) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformRemove(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[419], &name) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformGetList() []string { return methodCall[[]string](gdClass.obj.get(), methodRenderingServerSingleton[420]) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformSet(name Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[421], &name, &value) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformSetOverride(name Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[422], &name, &value) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformGet(name Name) any { return methodCall[any](gdClass.obj.get(), methodRenderingServerSingleton[423], &name) }
func (gdClass RenderingServerSingleton) GlobalShaderUniformGetType(name Name) RenderingServerGlobalShaderUniformType { return methodCall[RenderingServerGlobalShaderUniformType](gdClass.obj.get(), methodRenderingServerSingleton[424], &name) }
func (gdClass RenderingServerSingleton) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[425], &rid) }
func (gdClass RenderingServerSingleton) RequestFrameDrawnCallback(callable Callable)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[426], &callable) }
func (gdClass RenderingServerSingleton) HasChanged() bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[427]) }
func (gdClass RenderingServerSingleton) GetRenderingInfo(info RenderingServerRenderingInfo) int64 { return methodCall[int64](gdClass.obj.get(), methodRenderingServerSingleton[428], &info) }
func (gdClass RenderingServerSingleton) GetVideoAdapterName() string { return methodCall[string](gdClass.obj.get(), methodRenderingServerSingleton[429]) }
func (gdClass RenderingServerSingleton) GetVideoAdapterVendor() string { return methodCall[string](gdClass.obj.get(), methodRenderingServerSingleton[430]) }
func (gdClass RenderingServerSingleton) GetVideoAdapterType() RenderingDeviceDeviceType { return methodCall[RenderingDeviceDeviceType](gdClass.obj.get(), methodRenderingServerSingleton[431]) }
func (gdClass RenderingServerSingleton) GetVideoAdapterApiVersion() string { return methodCall[string](gdClass.obj.get(), methodRenderingServerSingleton[432]) }
func (gdClass RenderingServerSingleton) MakeSphereMesh(latitudes int64, longitudes int64, radius float64) RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[433], &latitudes, &longitudes, &radius) }
func (gdClass RenderingServerSingleton) GetTestCube() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[434]) }
func (gdClass RenderingServerSingleton) GetTestTexture() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[435]) }
func (gdClass RenderingServerSingleton) GetWhiteTexture() RID { return methodCall[RID](gdClass.obj.get(), methodRenderingServerSingleton[436]) }
func (gdClass RenderingServerSingleton) SetBootImage(image Image, color Color, scale bool, use_filter bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[437], &image, &color, &scale, &use_filter) }
func (gdClass RenderingServerSingleton) SetDefaultClearColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[438], &color) }
func (gdClass RenderingServerSingleton) HasFeature(feature RenderingServerFeatures) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[439], &feature) }
func (gdClass RenderingServerSingleton) HasOsFeature(feature string) bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[440], &feature) }
func (gdClass RenderingServerSingleton) SetDebugGenerateWireframes(generate bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[441], &generate) }
func (gdClass RenderingServerSingleton) IsRenderLoopEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRenderingServerSingleton[442]) }
func (gdClass RenderingServerSingleton) SetRenderLoopEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[443], &enabled) }
func (gdClass RenderingServerSingleton) GetFrameSetupTimeCpu() float64 { return methodCall[float64](gdClass.obj.get(), methodRenderingServerSingleton[444]) }
func (gdClass RenderingServerSingleton) ForceSync()  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[445]) }
func (gdClass RenderingServerSingleton) ForceDraw(swap_buffers bool, frame_step float64)  { methodCall[struct{}](gdClass.obj.get(), methodRenderingServerSingleton[446], &swap_buffers, &frame_step) }
func (gdClass RenderingServerSingleton) GetRenderingDevice() RenderingDevice { return methodCall[RenderingDevice](gdClass.obj.get(), methodRenderingServerSingleton[447]) }
func (gdClass RenderingServerSingleton) CreateLocalRenderingDevice() RenderingDevice { return methodCall[RenderingDevice](gdClass.obj.get(), methodRenderingServerSingleton[448]) }

type Resource struct{self *Resource; obj safeObject }
func NewResource(ctx Context, at *Resource) Resource { if at == nil { at = new(Resource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Resource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Resource) owner() cObject { return gdClass.obj.get() }
func (Resource) class() string { return "Resource\000" }

func (gdClass Resource) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodResource [12]cMethodBind
func (gdClass Resource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Resource) SetPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodResource[0], &path) }
func (gdClass Resource) TakeOverPath(path string)  { methodCall[struct{}](gdClass.obj.get(), methodResource[1], &path) }
func (gdClass Resource) GetPath() string { return methodCall[string](gdClass.obj.get(), methodResource[2]) }
func (gdClass Resource) SetName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodResource[3], &name) }
func (gdClass Resource) GetName() string { return methodCall[string](gdClass.obj.get(), methodResource[4]) }
func (gdClass Resource) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodResource[5]) }
func (gdClass Resource) SetLocalToScene(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodResource[6], &enable) }
func (gdClass Resource) IsLocalToScene() bool { return methodCall[bool](gdClass.obj.get(), methodResource[7]) }
func (gdClass Resource) GetLocalScene() Node { return methodCall[Node](gdClass.obj.get(), methodResource[8]) }
func (gdClass Resource) SetupLocalToScene()  { methodCall[struct{}](gdClass.obj.get(), methodResource[9]) }
func (gdClass Resource) EmitChanged()  { methodCall[struct{}](gdClass.obj.get(), methodResource[10]) }
func (gdClass Resource) Duplicate(subresources bool) Resource { return methodCall[Resource](gdClass.obj.get(), methodResource[11], &subresources) }

type ResourceFormatLoaderCacheMode int64

const (
	ResourceFormatLoaderCacheModeIgnore ResourceFormatLoaderCacheMode = 0
	ResourceFormatLoaderCacheModeReuse ResourceFormatLoaderCacheMode = 1
	ResourceFormatLoaderCacheModeReplace ResourceFormatLoaderCacheMode = 2
)

type ResourceFormatLoader struct{self *ResourceFormatLoader; obj safeObject }
func NewResourceFormatLoader(ctx Context, at *ResourceFormatLoader) ResourceFormatLoader { if at == nil { at = new(ResourceFormatLoader) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ResourceFormatLoader) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceFormatLoader) owner() cObject { return gdClass.obj.get() }
func (ResourceFormatLoader) class() string { return "ResourceFormatLoader\000" }

func (gdClass ResourceFormatLoader) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass ResourceFormatLoader) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_recognized_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRecognizedExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetRecognizedExtensions`)
		}
		return
	case "_handles_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ HandlesType(atype Name) bool }{}).Elem()) {
			return rtype.MethodByName(`HandlesType`)
		}
		return
	case "_get_resource_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetResourceType(path string) string }{}).Elem()) {
			return rtype.MethodByName(`GetResourceType`)
		}
		return
	case "_get_resource_uid":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetResourceUid(path string) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetResourceUid`)
		}
		return
	case "_get_dependencies":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDependencies(path string, add_types bool) []string }{}).Elem()) {
			return rtype.MethodByName(`GetDependencies`)
		}
		return
	case "_rename_dependencies":
		if rtype.Implements(reflect.TypeOf([0]interface{ RenameDependencies(path string, renames Dictionary) int64 }{}).Elem()) {
			return rtype.MethodByName(`RenameDependencies`)
		}
		return
	case "_exists":
		if rtype.Implements(reflect.TypeOf([0]interface{ Exists(path string) bool }{}).Elem()) {
			return rtype.MethodByName(`Exists`)
		}
		return
	case "_get_classes_used":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetClassesUsed(path string) []string }{}).Elem()) {
			return rtype.MethodByName(`GetClassesUsed`)
		}
		return
	case "_load":
		if rtype.Implements(reflect.TypeOf([0]interface{ Load(path string, original_path string, use_sub_threads bool, cache_mode int64) any }{}).Elem()) {
			return rtype.MethodByName(`Load`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type ResourceFormatSaver struct{self *ResourceFormatSaver; obj safeObject }
func NewResourceFormatSaver(ctx Context, at *ResourceFormatSaver) ResourceFormatSaver { if at == nil { at = new(ResourceFormatSaver) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ResourceFormatSaver) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceFormatSaver) owner() cObject { return gdClass.obj.get() }
func (ResourceFormatSaver) class() string { return "ResourceFormatSaver\000" }

func (gdClass ResourceFormatSaver) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass ResourceFormatSaver) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_save":
		if rtype.Implements(reflect.TypeOf([0]interface{ Save(resource Resource, path string, flags int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`Save`)
		}
		return
	case "_recognize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Recognize(resource Resource) bool }{}).Elem()) {
			return rtype.MethodByName(`Recognize`)
		}
		return
	case "_get_recognized_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRecognizedExtensions(resource Resource) []string }{}).Elem()) {
			return rtype.MethodByName(`GetRecognizedExtensions`)
		}
		return
	}
	return gdClass.RefCounted().virtual(rtype, name)
}

type ResourceImporterImportOrder int64

const (
	ResourceImporterImportOrderDefault ResourceImporterImportOrder = 0
	ResourceImporterImportOrderScene ResourceImporterImportOrder = 100
)

type ResourceImporter struct{self *ResourceImporter; obj safeObject }
func NewResourceImporter(ctx Context, at *ResourceImporter) ResourceImporter { if at == nil { at = new(ResourceImporter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ResourceImporter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceImporter) owner() cObject { return gdClass.obj.get() }
func (ResourceImporter) class() string { return "ResourceImporter\000" }

func (gdClass ResourceImporter) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass ResourceImporter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type ResourceLoaderThreadLoadStatus int64

const (
	ResourceLoaderThreadLoadInvalidResource ResourceLoaderThreadLoadStatus = 0
	ResourceLoaderThreadLoadInProgress ResourceLoaderThreadLoadStatus = 1
	ResourceLoaderThreadLoadFailed ResourceLoaderThreadLoadStatus = 2
	ResourceLoaderThreadLoadLoaded ResourceLoaderThreadLoadStatus = 3
)

type ResourceLoaderCacheMode int64

const (
	ResourceLoaderCacheModeIgnore ResourceLoaderCacheMode = 0
	ResourceLoaderCacheModeReuse ResourceLoaderCacheMode = 1
	ResourceLoaderCacheModeReplace ResourceLoaderCacheMode = 2
)
var ResourceLoader ResourceLoaderSingleton

type ResourceLoaderSingleton struct{self *ResourceLoaderSingleton; obj safeObject }
func NewResourceLoaderSingleton(ctx Context, at *ResourceLoaderSingleton) ResourceLoaderSingleton { if at == nil { at = new(ResourceLoaderSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ResourceLoaderSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceLoaderSingleton) owner() cObject { return gdClass.obj.get() }
func (ResourceLoaderSingleton) class() string { return "ResourceLoaderSingleton\000" }

func (gdClass ResourceLoaderSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodResourceLoaderSingleton [12]cMethodBind
func (gdClass ResourceLoaderSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass ResourceLoaderSingleton) LoadThreadedRequest(path string, type_hint string, use_sub_threads bool, cache_mode ResourceLoaderCacheMode) int64 { return methodCall[int64](gdClass.obj.get(), methodResourceLoaderSingleton[0], &path, &type_hint, &use_sub_threads, &cache_mode) }
func (gdClass ResourceLoaderSingleton) LoadThreadedGetStatus(path string, progress Array) ResourceLoaderThreadLoadStatus { return methodCall[ResourceLoaderThreadLoadStatus](gdClass.obj.get(), methodResourceLoaderSingleton[1], &path, &progress) }
func (gdClass ResourceLoaderSingleton) LoadThreadedGet(path string) Resource { return methodCall[Resource](gdClass.obj.get(), methodResourceLoaderSingleton[2], &path) }
func (gdClass ResourceLoaderSingleton) Load(path string, type_hint string, cache_mode ResourceLoaderCacheMode) Resource { return methodCall[Resource](gdClass.obj.get(), methodResourceLoaderSingleton[3], &path, &type_hint, &cache_mode) }
func (gdClass ResourceLoaderSingleton) GetRecognizedExtensionsForType(atype string) []string { return methodCall[[]string](gdClass.obj.get(), methodResourceLoaderSingleton[4], &atype) }
func (gdClass ResourceLoaderSingleton) AddResourceFormatLoader(format_loader ResourceFormatLoader, at_front bool)  { methodCall[struct{}](gdClass.obj.get(), methodResourceLoaderSingleton[5], &format_loader, &at_front) }
func (gdClass ResourceLoaderSingleton) RemoveResourceFormatLoader(format_loader ResourceFormatLoader)  { methodCall[struct{}](gdClass.obj.get(), methodResourceLoaderSingleton[6], &format_loader) }
func (gdClass ResourceLoaderSingleton) SetAbortOnMissingResources(abort bool)  { methodCall[struct{}](gdClass.obj.get(), methodResourceLoaderSingleton[7], &abort) }
func (gdClass ResourceLoaderSingleton) GetDependencies(path string) []string { return methodCall[[]string](gdClass.obj.get(), methodResourceLoaderSingleton[8], &path) }
func (gdClass ResourceLoaderSingleton) HasCached(path string) bool { return methodCall[bool](gdClass.obj.get(), methodResourceLoaderSingleton[9], &path) }
func (gdClass ResourceLoaderSingleton) Exists(path string, type_hint string) bool { return methodCall[bool](gdClass.obj.get(), methodResourceLoaderSingleton[10], &path, &type_hint) }
func (gdClass ResourceLoaderSingleton) GetResourceUid(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodResourceLoaderSingleton[11], &path) }

type ResourcePreloader struct{self *ResourcePreloader; obj safeObject }
func NewResourcePreloader(ctx Context, at *ResourcePreloader) ResourcePreloader { if at == nil { at = new(ResourcePreloader) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ResourcePreloader) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourcePreloader) owner() cObject { return gdClass.obj.get() }
func (ResourcePreloader) class() string { return "ResourcePreloader\000" }

func (gdClass ResourcePreloader) Node() Node { return Node{obj:gdClass.obj} }

var methodResourcePreloader [6]cMethodBind
func (gdClass ResourcePreloader) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass ResourcePreloader) AddResource(name Name, resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodResourcePreloader[0], &name, &resource) }
func (gdClass ResourcePreloader) RemoveResource(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodResourcePreloader[1], &name) }
func (gdClass ResourcePreloader) RenameResource(name Name, newname Name)  { methodCall[struct{}](gdClass.obj.get(), methodResourcePreloader[2], &name, &newname) }
func (gdClass ResourcePreloader) HasResource(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodResourcePreloader[3], &name) }
func (gdClass ResourcePreloader) GetResource(name Name) Resource { return methodCall[Resource](gdClass.obj.get(), methodResourcePreloader[4], &name) }
func (gdClass ResourcePreloader) GetResourceList() []string { return methodCall[[]string](gdClass.obj.get(), methodResourcePreloader[5]) }

type ResourceSaverSaverFlags int64

const (
	ResourceSaverFlagNone ResourceSaverSaverFlags = 0
	ResourceSaverFlagRelativePaths ResourceSaverSaverFlags = 1
	ResourceSaverFlagBundleResources ResourceSaverSaverFlags = 2
	ResourceSaverFlagChangePath ResourceSaverSaverFlags = 4
	ResourceSaverFlagOmitEditorProperties ResourceSaverSaverFlags = 8
	ResourceSaverFlagSaveBigEndian ResourceSaverSaverFlags = 16
	ResourceSaverFlagCompress ResourceSaverSaverFlags = 32
	ResourceSaverFlagReplaceSubresourcePaths ResourceSaverSaverFlags = 64
)
var ResourceSaver ResourceSaverSingleton

type ResourceSaverSingleton struct{self *ResourceSaverSingleton; obj safeObject }
func NewResourceSaverSingleton(ctx Context, at *ResourceSaverSingleton) ResourceSaverSingleton { if at == nil { at = new(ResourceSaverSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ResourceSaverSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceSaverSingleton) owner() cObject { return gdClass.obj.get() }
func (ResourceSaverSingleton) class() string { return "ResourceSaverSingleton\000" }

func (gdClass ResourceSaverSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodResourceSaverSingleton [4]cMethodBind
func (gdClass ResourceSaverSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass ResourceSaverSingleton) Save(resource Resource, path string, flags ResourceSaverSaverFlags) int64 { return methodCall[int64](gdClass.obj.get(), methodResourceSaverSingleton[0], &resource, &path, &flags) }
func (gdClass ResourceSaverSingleton) GetRecognizedExtensions(atype Resource) []string { return methodCall[[]string](gdClass.obj.get(), methodResourceSaverSingleton[1], &atype) }
func (gdClass ResourceSaverSingleton) AddResourceFormatSaver(format_saver ResourceFormatSaver, at_front bool)  { methodCall[struct{}](gdClass.obj.get(), methodResourceSaverSingleton[2], &format_saver, &at_front) }
func (gdClass ResourceSaverSingleton) RemoveResourceFormatSaver(format_saver ResourceFormatSaver)  { methodCall[struct{}](gdClass.obj.get(), methodResourceSaverSingleton[3], &format_saver) }
var ResourceUID ResourceUIDSingleton

type ResourceUIDSingleton struct{self *ResourceUIDSingleton; obj safeObject }
func NewResourceUIDSingleton(ctx Context, at *ResourceUIDSingleton) ResourceUIDSingleton { if at == nil { at = new(ResourceUIDSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ResourceUIDSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ResourceUIDSingleton) owner() cObject { return gdClass.obj.get() }
func (ResourceUIDSingleton) class() string { return "ResourceUIDSingleton\000" }

func (gdClass ResourceUIDSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodResourceUIDSingleton [8]cMethodBind
func (gdClass ResourceUIDSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass ResourceUIDSingleton) IdToText(id int64) string { return methodCall[string](gdClass.obj.get(), methodResourceUIDSingleton[0], &id) }
func (gdClass ResourceUIDSingleton) TextToId(text_id string) int64 { return methodCall[int64](gdClass.obj.get(), methodResourceUIDSingleton[1], &text_id) }
func (gdClass ResourceUIDSingleton) CreateId() int64 { return methodCall[int64](gdClass.obj.get(), methodResourceUIDSingleton[2]) }
func (gdClass ResourceUIDSingleton) HasId(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodResourceUIDSingleton[3], &id) }
func (gdClass ResourceUIDSingleton) AddId(id int64, path string)  { methodCall[struct{}](gdClass.obj.get(), methodResourceUIDSingleton[4], &id, &path) }
func (gdClass ResourceUIDSingleton) SetId(id int64, path string)  { methodCall[struct{}](gdClass.obj.get(), methodResourceUIDSingleton[5], &id, &path) }
func (gdClass ResourceUIDSingleton) GetIdPath(id int64) string { return methodCall[string](gdClass.obj.get(), methodResourceUIDSingleton[6], &id) }
func (gdClass ResourceUIDSingleton) RemoveId(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodResourceUIDSingleton[7], &id) }

type RibbonTrailMeshShape int64

const (
	RibbonTrailMeshShapeFlat RibbonTrailMeshShape = 0
	RibbonTrailMeshShapeCross RibbonTrailMeshShape = 1
)

type RibbonTrailMesh struct{self *RibbonTrailMesh; obj safeObject }
func NewRibbonTrailMesh(ctx Context, at *RibbonTrailMesh) RibbonTrailMesh { if at == nil { at = new(RibbonTrailMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RibbonTrailMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RibbonTrailMesh) owner() cObject { return gdClass.obj.get() }
func (RibbonTrailMesh) class() string { return "RibbonTrailMesh\000" }

func (gdClass RibbonTrailMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodRibbonTrailMesh [12]cMethodBind
func (gdClass RibbonTrailMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass RibbonTrailMesh) SetSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[0], &size) }
func (gdClass RibbonTrailMesh) GetSize() float64 { return methodCall[float64](gdClass.obj.get(), methodRibbonTrailMesh[1]) }
func (gdClass RibbonTrailMesh) SetSections(sections int64)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[2], &sections) }
func (gdClass RibbonTrailMesh) GetSections() int64 { return methodCall[int64](gdClass.obj.get(), methodRibbonTrailMesh[3]) }
func (gdClass RibbonTrailMesh) SetSectionLength(section_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[4], &section_length) }
func (gdClass RibbonTrailMesh) GetSectionLength() float64 { return methodCall[float64](gdClass.obj.get(), methodRibbonTrailMesh[5]) }
func (gdClass RibbonTrailMesh) SetSectionSegments(section_segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[6], &section_segments) }
func (gdClass RibbonTrailMesh) GetSectionSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodRibbonTrailMesh[7]) }
func (gdClass RibbonTrailMesh) SetCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[8], &curve) }
func (gdClass RibbonTrailMesh) GetCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodRibbonTrailMesh[9]) }
func (gdClass RibbonTrailMesh) SetShape(shape RibbonTrailMeshShape)  { methodCall[struct{}](gdClass.obj.get(), methodRibbonTrailMesh[10], &shape) }
func (gdClass RibbonTrailMesh) GetShape() RibbonTrailMeshShape { return methodCall[RibbonTrailMeshShape](gdClass.obj.get(), methodRibbonTrailMesh[11]) }

type RichTextEffect struct{self *RichTextEffect; obj safeObject }
func NewRichTextEffect(ctx Context, at *RichTextEffect) RichTextEffect { if at == nil { at = new(RichTextEffect) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass RichTextEffect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RichTextEffect) owner() cObject { return gdClass.obj.get() }
func (RichTextEffect) class() string { return "RichTextEffect\000" }

func (gdClass RichTextEffect) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass RichTextEffect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_process_custom_fx":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProcessCustomFx(char_fx CharFXTransform) bool }{}).Elem()) {
			return rtype.MethodByName(`ProcessCustomFx`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}

type RichTextLabelListType int64

const (
	RichTextLabelListNumbers RichTextLabelListType = 0
	RichTextLabelListLetters RichTextLabelListType = 1
	RichTextLabelListRoman RichTextLabelListType = 2
	RichTextLabelListDots RichTextLabelListType = 3
)

type RichTextLabelItemType int64

const (
	RichTextLabelItemFrame RichTextLabelItemType = 0
	RichTextLabelItemText RichTextLabelItemType = 1
	RichTextLabelItemImage RichTextLabelItemType = 2
	RichTextLabelItemNewline RichTextLabelItemType = 3
	RichTextLabelItemFont RichTextLabelItemType = 4
	RichTextLabelItemFontSize RichTextLabelItemType = 5
	RichTextLabelItemFontFeatures RichTextLabelItemType = 6
	RichTextLabelItemColor RichTextLabelItemType = 7
	RichTextLabelItemOutlineSize RichTextLabelItemType = 8
	RichTextLabelItemOutlineColor RichTextLabelItemType = 9
	RichTextLabelItemUnderline RichTextLabelItemType = 10
	RichTextLabelItemStrikethrough RichTextLabelItemType = 11
	RichTextLabelItemParagraph RichTextLabelItemType = 12
	RichTextLabelItemIndent RichTextLabelItemType = 13
	RichTextLabelItemList RichTextLabelItemType = 14
	RichTextLabelItemTable RichTextLabelItemType = 15
	RichTextLabelItemFade RichTextLabelItemType = 16
	RichTextLabelItemShake RichTextLabelItemType = 17
	RichTextLabelItemWave RichTextLabelItemType = 18
	RichTextLabelItemTornado RichTextLabelItemType = 19
	RichTextLabelItemRainbow RichTextLabelItemType = 20
	RichTextLabelItemBgcolor RichTextLabelItemType = 21
	RichTextLabelItemFgcolor RichTextLabelItemType = 22
	RichTextLabelItemMeta RichTextLabelItemType = 23
	RichTextLabelItemHint RichTextLabelItemType = 24
	RichTextLabelItemDropcap RichTextLabelItemType = 25
	RichTextLabelItemCustomfx RichTextLabelItemType = 26
)

type RichTextLabel struct{self *RichTextLabel; obj safeObject }
func NewRichTextLabel(ctx Context, at *RichTextLabel) RichTextLabel { if at == nil { at = new(RichTextLabel) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RichTextLabel) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RichTextLabel) owner() cObject { return gdClass.obj.get() }
func (RichTextLabel) class() string { return "RichTextLabel\000" }

func (gdClass RichTextLabel) Control() Control { return Control{obj:gdClass.obj} }

var methodRichTextLabel [108]cMethodBind
func (gdClass RichTextLabel) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass RichTextLabel) GetParsedText() string { return methodCall[string](gdClass.obj.get(), methodRichTextLabel[0]) }
func (gdClass RichTextLabel) AddText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[1], &text) }
func (gdClass RichTextLabel) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[2], &text) }
func (gdClass RichTextLabel) AddImage(image Texture2D, width int64, height int64, color Color, inline_align InlineAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[3], &image, &width, &height, &color, &inline_align) }
func (gdClass RichTextLabel) Newline()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[4]) }
func (gdClass RichTextLabel) RemoveLine(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[5], &line) }
func (gdClass RichTextLabel) PushFont(font Font, font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[6], &font, &font_size) }
func (gdClass RichTextLabel) PushFontSize(font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[7], &font_size) }
func (gdClass RichTextLabel) PushNormal()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[8]) }
func (gdClass RichTextLabel) PushBold()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[9]) }
func (gdClass RichTextLabel) PushBoldItalics()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[10]) }
func (gdClass RichTextLabel) PushItalics()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[11]) }
func (gdClass RichTextLabel) PushMono()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[12]) }
func (gdClass RichTextLabel) PushColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[13], &color) }
func (gdClass RichTextLabel) PushOutlineSize(outline_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[14], &outline_size) }
func (gdClass RichTextLabel) PushOutlineColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[15], &color) }
func (gdClass RichTextLabel) PushParagraph(alignment HorizontalAlignment, base_direction ControlTextDirection, language string, st_parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[16], &alignment, &base_direction, &language, &st_parser) }
func (gdClass RichTextLabel) PushIndent(level int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[17], &level) }
func (gdClass RichTextLabel) PushList(level int64, atype RichTextLabelListType, capitalize bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[18], &level, &atype, &capitalize) }
func (gdClass RichTextLabel) PushMeta(data any)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[19], &data) }
func (gdClass RichTextLabel) PushHint(description string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[20], &description) }
func (gdClass RichTextLabel) PushUnderline()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[21]) }
func (gdClass RichTextLabel) PushStrikethrough()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[22]) }
func (gdClass RichTextLabel) PushTable(columns int64, inline_align InlineAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[23], &columns, &inline_align) }
func (gdClass RichTextLabel) PushDropcap(s string, font Font, size int64, dropcap_margins Rect2, color Color, outline_size int64, outline_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[24], &s, &font, &size, &dropcap_margins, &color, &outline_size, &outline_color) }
func (gdClass RichTextLabel) SetTableColumnExpand(column int64, expand bool, ratio int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[25], &column, &expand, &ratio) }
func (gdClass RichTextLabel) SetCellRowBackgroundColor(odd_row_bg Color, even_row_bg Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[26], &odd_row_bg, &even_row_bg) }
func (gdClass RichTextLabel) SetCellBorderColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[27], &color) }
func (gdClass RichTextLabel) SetCellSizeOverride(min_size Vector2, max_size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[28], &min_size, &max_size) }
func (gdClass RichTextLabel) SetCellPadding(padding Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[29], &padding) }
func (gdClass RichTextLabel) PushCell()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[30]) }
func (gdClass RichTextLabel) PushFgcolor(fgcolor Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[31], &fgcolor) }
func (gdClass RichTextLabel) PushBgcolor(bgcolor Color)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[32], &bgcolor) }
func (gdClass RichTextLabel) Pop()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[33]) }
func (gdClass RichTextLabel) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[34]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[35], &parser) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodRichTextLabel[36]) }
func (gdClass RichTextLabel) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[37], &args) }
func (gdClass RichTextLabel) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodRichTextLabel[38]) }
func (gdClass RichTextLabel) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[39], &direction) }
func (gdClass RichTextLabel) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodRichTextLabel[40]) }
func (gdClass RichTextLabel) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[41], &language) }
func (gdClass RichTextLabel) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodRichTextLabel[42]) }
func (gdClass RichTextLabel) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[43], &autowrap_mode) }
func (gdClass RichTextLabel) GetAutowrapMode() TextServerAutowrapMode { return methodCall[TextServerAutowrapMode](gdClass.obj.get(), methodRichTextLabel[44]) }
func (gdClass RichTextLabel) SetMetaUnderline(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[45], &enable) }
func (gdClass RichTextLabel) IsMetaUnderlined() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[46]) }
func (gdClass RichTextLabel) SetHintUnderline(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[47], &enable) }
func (gdClass RichTextLabel) IsHintUnderlined() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[48]) }
func (gdClass RichTextLabel) SetOverrideSelectedFontColor(override bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[49], &override) }
func (gdClass RichTextLabel) IsOverridingSelectedFontColor() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[50]) }
func (gdClass RichTextLabel) SetScrollActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[51], &active) }
func (gdClass RichTextLabel) IsScrollActive() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[52]) }
func (gdClass RichTextLabel) SetScrollFollow(follow bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[53], &follow) }
func (gdClass RichTextLabel) IsScrollFollowing() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[54]) }
func (gdClass RichTextLabel) GetVScrollBar() VScrollBar { return methodCall[VScrollBar](gdClass.obj.get(), methodRichTextLabel[55]) }
func (gdClass RichTextLabel) ScrollToLine(line int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[56], &line) }
func (gdClass RichTextLabel) ScrollToParagraph(paragraph int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[57], &paragraph) }
func (gdClass RichTextLabel) SetTabSize(spaces int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[58], &spaces) }
func (gdClass RichTextLabel) GetTabSize() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[59]) }
func (gdClass RichTextLabel) SetFitContentHeight(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[60], &enabled) }
func (gdClass RichTextLabel) IsFitContentHeightEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[61]) }
func (gdClass RichTextLabel) SetSelectionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[62], &enabled) }
func (gdClass RichTextLabel) IsSelectionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[63]) }
func (gdClass RichTextLabel) SetContextMenuEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[64], &enabled) }
func (gdClass RichTextLabel) IsContextMenuEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[65]) }
func (gdClass RichTextLabel) SetShortcutKeysEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[66], &enabled) }
func (gdClass RichTextLabel) IsShortcutKeysEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[67]) }
func (gdClass RichTextLabel) SetDeselectOnFocusLossEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[68], &enable) }
func (gdClass RichTextLabel) IsDeselectOnFocusLossEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[69]) }
func (gdClass RichTextLabel) GetSelectionFrom() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[70]) }
func (gdClass RichTextLabel) GetSelectionTo() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[71]) }
func (gdClass RichTextLabel) SelectAll()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[72]) }
func (gdClass RichTextLabel) GetSelectedText() string { return methodCall[string](gdClass.obj.get(), methodRichTextLabel[73]) }
func (gdClass RichTextLabel) Deselect()  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[74]) }
func (gdClass RichTextLabel) ParseBbcode(bbcode string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[75], &bbcode) }
func (gdClass RichTextLabel) AppendText(bbcode string)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[76], &bbcode) }
func (gdClass RichTextLabel) GetText() string { return methodCall[string](gdClass.obj.get(), methodRichTextLabel[77]) }
func (gdClass RichTextLabel) IsReady() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[78]) }
func (gdClass RichTextLabel) SetThreaded(threaded bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[79], &threaded) }
func (gdClass RichTextLabel) IsThreaded() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[80]) }
func (gdClass RichTextLabel) SetProgressBarDelay(delay_ms int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[81], &delay_ms) }
func (gdClass RichTextLabel) GetProgressBarDelay() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[82]) }
func (gdClass RichTextLabel) SetVisibleCharacters(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[83], &amount) }
func (gdClass RichTextLabel) GetVisibleCharacters() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[84]) }
func (gdClass RichTextLabel) GetVisibleCharactersBehavior() TextServerVisibleCharactersBehavior { return methodCall[TextServerVisibleCharactersBehavior](gdClass.obj.get(), methodRichTextLabel[85]) }
func (gdClass RichTextLabel) SetVisibleCharactersBehavior(behavior TextServerVisibleCharactersBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[86], &behavior) }
func (gdClass RichTextLabel) SetVisibleRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[87], &ratio) }
func (gdClass RichTextLabel) GetVisibleRatio() float64 { return methodCall[float64](gdClass.obj.get(), methodRichTextLabel[88]) }
func (gdClass RichTextLabel) GetCharacterLine(character int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[89], &character) }
func (gdClass RichTextLabel) GetCharacterParagraph(character int64) int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[90], &character) }
func (gdClass RichTextLabel) GetTotalCharacterCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[91]) }
func (gdClass RichTextLabel) SetUseBbcode(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[92], &enable) }
func (gdClass RichTextLabel) IsUsingBbcode() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[93]) }
func (gdClass RichTextLabel) GetLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[94]) }
func (gdClass RichTextLabel) GetVisibleLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[95]) }
func (gdClass RichTextLabel) GetParagraphCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[96]) }
func (gdClass RichTextLabel) GetVisibleParagraphCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[97]) }
func (gdClass RichTextLabel) GetContentHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[98]) }
func (gdClass RichTextLabel) GetContentWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodRichTextLabel[99]) }
func (gdClass RichTextLabel) GetLineOffset(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodRichTextLabel[100], &line) }
func (gdClass RichTextLabel) GetParagraphOffset(paragraph int64) float64 { return methodCall[float64](gdClass.obj.get(), methodRichTextLabel[101], &paragraph) }
func (gdClass RichTextLabel) ParseExpressionsForValues(expressions []string) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodRichTextLabel[102], &expressions) }
func (gdClass RichTextLabel) SetEffects(effects Array)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[103], &effects) }
func (gdClass RichTextLabel) GetEffects() Array { return methodCall[Array](gdClass.obj.get(), methodRichTextLabel[104]) }
func (gdClass RichTextLabel) InstallEffect(effect any)  { methodCall[struct{}](gdClass.obj.get(), methodRichTextLabel[105], &effect) }
func (gdClass RichTextLabel) GetMenu() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodRichTextLabel[106]) }
func (gdClass RichTextLabel) IsMenuVisible() bool { return methodCall[bool](gdClass.obj.get(), methodRichTextLabel[107]) }

type RigidBody2DFreezeMode int64

const (
	RigidBody2DFreezeModeStatic RigidBody2DFreezeMode = 0
	RigidBody2DFreezeModeKinematic RigidBody2DFreezeMode = 1
)

type RigidBody2DCenterOfMassMode int64

const (
	RigidBody2DCenterOfMassModeAuto RigidBody2DCenterOfMassMode = 0
	RigidBody2DCenterOfMassModeCustom RigidBody2DCenterOfMassMode = 1
)

type RigidBody2DDampMode int64

const (
	RigidBody2DDampModeCombine RigidBody2DDampMode = 0
	RigidBody2DDampModeReplace RigidBody2DDampMode = 1
)

type RigidBody2DCCDMode int64

const (
	RigidBody2DCcdModeDisabled RigidBody2DCCDMode = 0
	RigidBody2DCcdModeCastRay RigidBody2DCCDMode = 1
	RigidBody2DCcdModeCastShape RigidBody2DCCDMode = 2
)

type RigidBody2D struct{self *RigidBody2D; obj safeObject }
func NewRigidBody2D(ctx Context, at *RigidBody2D) RigidBody2D { if at == nil { at = new(RigidBody2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RigidBody2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RigidBody2D) owner() cObject { return gdClass.obj.get() }
func (RigidBody2D) class() string { return "RigidBody2D\000" }

func (gdClass RigidBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D{obj:gdClass.obj} }

var methodRigidBody2D [58]cMethodBind
func (gdClass RigidBody2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_integrate_forces":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntegrateForces(state PhysicsDirectBodyState2D)  }{}).Elem()) {
			return rtype.MethodByName(`IntegrateForces`)
		}
		return
	}
	return gdClass.PhysicsBody2D().virtual(rtype, name)
}
func (gdClass RigidBody2D) SetMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[0], &mass) }
func (gdClass RigidBody2D) GetMass() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[1]) }
func (gdClass RigidBody2D) GetInertia() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[2]) }
func (gdClass RigidBody2D) SetInertia(inertia float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[3], &inertia) }
func (gdClass RigidBody2D) SetCenterOfMassMode(mode RigidBody2DCenterOfMassMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[4], &mode) }
func (gdClass RigidBody2D) GetCenterOfMassMode() RigidBody2DCenterOfMassMode { return methodCall[RigidBody2DCenterOfMassMode](gdClass.obj.get(), methodRigidBody2D[5]) }
func (gdClass RigidBody2D) SetCenterOfMass(center_of_mass Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[6], &center_of_mass) }
func (gdClass RigidBody2D) GetCenterOfMass() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRigidBody2D[7]) }
func (gdClass RigidBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[8], &physics_material_override) }
func (gdClass RigidBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodRigidBody2D[9]) }
func (gdClass RigidBody2D) SetGravityScale(gravity_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[10], &gravity_scale) }
func (gdClass RigidBody2D) GetGravityScale() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[11]) }
func (gdClass RigidBody2D) SetLinearDampMode(linear_damp_mode RigidBody2DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[12], &linear_damp_mode) }
func (gdClass RigidBody2D) GetLinearDampMode() RigidBody2DDampMode { return methodCall[RigidBody2DDampMode](gdClass.obj.get(), methodRigidBody2D[13]) }
func (gdClass RigidBody2D) SetAngularDampMode(angular_damp_mode RigidBody2DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[14], &angular_damp_mode) }
func (gdClass RigidBody2D) GetAngularDampMode() RigidBody2DDampMode { return methodCall[RigidBody2DDampMode](gdClass.obj.get(), methodRigidBody2D[15]) }
func (gdClass RigidBody2D) SetLinearDamp(linear_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[16], &linear_damp) }
func (gdClass RigidBody2D) GetLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[17]) }
func (gdClass RigidBody2D) SetAngularDamp(angular_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[18], &angular_damp) }
func (gdClass RigidBody2D) GetAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[19]) }
func (gdClass RigidBody2D) SetLinearVelocity(linear_velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[20], &linear_velocity) }
func (gdClass RigidBody2D) GetLinearVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRigidBody2D[21]) }
func (gdClass RigidBody2D) SetAngularVelocity(angular_velocity float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[22], &angular_velocity) }
func (gdClass RigidBody2D) GetAngularVelocity() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[23]) }
func (gdClass RigidBody2D) SetMaxContactsReported(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[24], &amount) }
func (gdClass RigidBody2D) GetMaxContactsReported() int64 { return methodCall[int64](gdClass.obj.get(), methodRigidBody2D[25]) }
func (gdClass RigidBody2D) GetContactCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRigidBody2D[26]) }
func (gdClass RigidBody2D) SetUseCustomIntegrator(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[27], &enable) }
func (gdClass RigidBody2D) IsUsingCustomIntegrator() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[28]) }
func (gdClass RigidBody2D) SetContactMonitor(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[29], &enabled) }
func (gdClass RigidBody2D) IsContactMonitorEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[30]) }
func (gdClass RigidBody2D) SetContinuousCollisionDetectionMode(mode RigidBody2DCCDMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[31], &mode) }
func (gdClass RigidBody2D) GetContinuousCollisionDetectionMode() RigidBody2DCCDMode { return methodCall[RigidBody2DCCDMode](gdClass.obj.get(), methodRigidBody2D[32]) }
func (gdClass RigidBody2D) SetAxisVelocity(axis_velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[33], &axis_velocity) }
func (gdClass RigidBody2D) ApplyCentralImpulse(impulse Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[34], &impulse) }
func (gdClass RigidBody2D) ApplyImpulse(impulse Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[35], &impulse, &position) }
func (gdClass RigidBody2D) ApplyTorqueImpulse(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[36], &torque) }
func (gdClass RigidBody2D) ApplyCentralForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[37], &force) }
func (gdClass RigidBody2D) ApplyForce(force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[38], &force, &position) }
func (gdClass RigidBody2D) ApplyTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[39], &torque) }
func (gdClass RigidBody2D) AddConstantCentralForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[40], &force) }
func (gdClass RigidBody2D) AddConstantForce(force Vector2, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[41], &force, &position) }
func (gdClass RigidBody2D) AddConstantTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[42], &torque) }
func (gdClass RigidBody2D) SetConstantForce(force Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[43], &force) }
func (gdClass RigidBody2D) GetConstantForce() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodRigidBody2D[44]) }
func (gdClass RigidBody2D) SetConstantTorque(torque float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[45], &torque) }
func (gdClass RigidBody2D) GetConstantTorque() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody2D[46]) }
func (gdClass RigidBody2D) SetSleeping(sleeping bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[47], &sleeping) }
func (gdClass RigidBody2D) IsSleeping() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[48]) }
func (gdClass RigidBody2D) SetCanSleep(able_to_sleep bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[49], &able_to_sleep) }
func (gdClass RigidBody2D) IsAbleToSleep() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[50]) }
func (gdClass RigidBody2D) SetLockRotationEnabled(lock_rotation bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[51], &lock_rotation) }
func (gdClass RigidBody2D) IsLockRotationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[52]) }
func (gdClass RigidBody2D) SetFreezeEnabled(freeze_mode bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[53], &freeze_mode) }
func (gdClass RigidBody2D) IsFreezeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody2D[54]) }
func (gdClass RigidBody2D) SetFreezeMode(freeze_mode RigidBody2DFreezeMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody2D[55], &freeze_mode) }
func (gdClass RigidBody2D) GetFreezeMode() RigidBody2DFreezeMode { return methodCall[RigidBody2DFreezeMode](gdClass.obj.get(), methodRigidBody2D[56]) }
func (gdClass RigidBody2D) GetCollidingBodies() Array { return methodCall[Array](gdClass.obj.get(), methodRigidBody2D[57]) }

type RigidBody3DFreezeMode int64

const (
	RigidBody3DFreezeModeStatic RigidBody3DFreezeMode = 0
	RigidBody3DFreezeModeKinematic RigidBody3DFreezeMode = 1
)

type RigidBody3DCenterOfMassMode int64

const (
	RigidBody3DCenterOfMassModeAuto RigidBody3DCenterOfMassMode = 0
	RigidBody3DCenterOfMassModeCustom RigidBody3DCenterOfMassMode = 1
)

type RigidBody3DDampMode int64

const (
	RigidBody3DDampModeCombine RigidBody3DDampMode = 0
	RigidBody3DDampModeReplace RigidBody3DDampMode = 1
)

type RigidBody3D struct{self *RigidBody3D; obj safeObject }
func NewRigidBody3D(ctx Context, at *RigidBody3D) RigidBody3D { if at == nil { at = new(RigidBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RigidBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RigidBody3D) owner() cObject { return gdClass.obj.get() }
func (RigidBody3D) class() string { return "RigidBody3D\000" }

func (gdClass RigidBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D{obj:gdClass.obj} }

var methodRigidBody3D [59]cMethodBind
func (gdClass RigidBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_integrate_forces":
		if rtype.Implements(reflect.TypeOf([0]interface{ IntegrateForces(state PhysicsDirectBodyState3D)  }{}).Elem()) {
			return rtype.MethodByName(`IntegrateForces`)
		}
		return
	}
	return gdClass.PhysicsBody3D().virtual(rtype, name)
}
func (gdClass RigidBody3D) SetMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[0], &mass) }
func (gdClass RigidBody3D) GetMass() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody3D[1]) }
func (gdClass RigidBody3D) SetInertia(inertia Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[2], &inertia) }
func (gdClass RigidBody3D) GetInertia() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[3]) }
func (gdClass RigidBody3D) SetCenterOfMassMode(mode RigidBody3DCenterOfMassMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[4], &mode) }
func (gdClass RigidBody3D) GetCenterOfMassMode() RigidBody3DCenterOfMassMode { return methodCall[RigidBody3DCenterOfMassMode](gdClass.obj.get(), methodRigidBody3D[5]) }
func (gdClass RigidBody3D) SetCenterOfMass(center_of_mass Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[6], &center_of_mass) }
func (gdClass RigidBody3D) GetCenterOfMass() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[7]) }
func (gdClass RigidBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[8], &physics_material_override) }
func (gdClass RigidBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodRigidBody3D[9]) }
func (gdClass RigidBody3D) SetLinearVelocity(linear_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[10], &linear_velocity) }
func (gdClass RigidBody3D) GetLinearVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[11]) }
func (gdClass RigidBody3D) SetAngularVelocity(angular_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[12], &angular_velocity) }
func (gdClass RigidBody3D) GetAngularVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[13]) }
func (gdClass RigidBody3D) GetInverseInertiaTensor() Basis { return methodCall[Basis](gdClass.obj.get(), methodRigidBody3D[14]) }
func (gdClass RigidBody3D) SetGravityScale(gravity_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[15], &gravity_scale) }
func (gdClass RigidBody3D) GetGravityScale() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody3D[16]) }
func (gdClass RigidBody3D) SetLinearDampMode(linear_damp_mode RigidBody3DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[17], &linear_damp_mode) }
func (gdClass RigidBody3D) GetLinearDampMode() RigidBody3DDampMode { return methodCall[RigidBody3DDampMode](gdClass.obj.get(), methodRigidBody3D[18]) }
func (gdClass RigidBody3D) SetAngularDampMode(angular_damp_mode RigidBody3DDampMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[19], &angular_damp_mode) }
func (gdClass RigidBody3D) GetAngularDampMode() RigidBody3DDampMode { return methodCall[RigidBody3DDampMode](gdClass.obj.get(), methodRigidBody3D[20]) }
func (gdClass RigidBody3D) SetLinearDamp(linear_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[21], &linear_damp) }
func (gdClass RigidBody3D) GetLinearDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody3D[22]) }
func (gdClass RigidBody3D) SetAngularDamp(angular_damp float64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[23], &angular_damp) }
func (gdClass RigidBody3D) GetAngularDamp() float64 { return methodCall[float64](gdClass.obj.get(), methodRigidBody3D[24]) }
func (gdClass RigidBody3D) SetMaxContactsReported(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[25], &amount) }
func (gdClass RigidBody3D) GetMaxContactsReported() int64 { return methodCall[int64](gdClass.obj.get(), methodRigidBody3D[26]) }
func (gdClass RigidBody3D) GetContactCount() int64 { return methodCall[int64](gdClass.obj.get(), methodRigidBody3D[27]) }
func (gdClass RigidBody3D) SetUseCustomIntegrator(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[28], &enable) }
func (gdClass RigidBody3D) IsUsingCustomIntegrator() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[29]) }
func (gdClass RigidBody3D) SetContactMonitor(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[30], &enabled) }
func (gdClass RigidBody3D) IsContactMonitorEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[31]) }
func (gdClass RigidBody3D) SetUseContinuousCollisionDetection(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[32], &enable) }
func (gdClass RigidBody3D) IsUsingContinuousCollisionDetection() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[33]) }
func (gdClass RigidBody3D) SetAxisVelocity(axis_velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[34], &axis_velocity) }
func (gdClass RigidBody3D) ApplyCentralImpulse(impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[35], &impulse) }
func (gdClass RigidBody3D) ApplyImpulse(impulse Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[36], &impulse, &position) }
func (gdClass RigidBody3D) ApplyTorqueImpulse(impulse Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[37], &impulse) }
func (gdClass RigidBody3D) ApplyCentralForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[38], &force) }
func (gdClass RigidBody3D) ApplyForce(force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[39], &force, &position) }
func (gdClass RigidBody3D) ApplyTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[40], &torque) }
func (gdClass RigidBody3D) AddConstantCentralForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[41], &force) }
func (gdClass RigidBody3D) AddConstantForce(force Vector3, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[42], &force, &position) }
func (gdClass RigidBody3D) AddConstantTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[43], &torque) }
func (gdClass RigidBody3D) SetConstantForce(force Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[44], &force) }
func (gdClass RigidBody3D) GetConstantForce() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[45]) }
func (gdClass RigidBody3D) SetConstantTorque(torque Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[46], &torque) }
func (gdClass RigidBody3D) GetConstantTorque() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodRigidBody3D[47]) }
func (gdClass RigidBody3D) SetSleeping(sleeping bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[48], &sleeping) }
func (gdClass RigidBody3D) IsSleeping() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[49]) }
func (gdClass RigidBody3D) SetCanSleep(able_to_sleep bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[50], &able_to_sleep) }
func (gdClass RigidBody3D) IsAbleToSleep() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[51]) }
func (gdClass RigidBody3D) SetLockRotationEnabled(lock_rotation bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[52], &lock_rotation) }
func (gdClass RigidBody3D) IsLockRotationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[53]) }
func (gdClass RigidBody3D) SetFreezeEnabled(freeze_mode bool)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[54], &freeze_mode) }
func (gdClass RigidBody3D) IsFreezeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodRigidBody3D[55]) }
func (gdClass RigidBody3D) SetFreezeMode(freeze_mode RigidBody3DFreezeMode)  { methodCall[struct{}](gdClass.obj.get(), methodRigidBody3D[56], &freeze_mode) }
func (gdClass RigidBody3D) GetFreezeMode() RigidBody3DFreezeMode { return methodCall[RigidBody3DFreezeMode](gdClass.obj.get(), methodRigidBody3D[57]) }
func (gdClass RigidBody3D) GetCollidingBodies() Array { return methodCall[Array](gdClass.obj.get(), methodRigidBody3D[58]) }

type RootMotionView struct{self *RootMotionView; obj safeObject }
func NewRootMotionView(ctx Context, at *RootMotionView) RootMotionView { if at == nil { at = new(RootMotionView) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass RootMotionView) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass RootMotionView) owner() cObject { return gdClass.obj.get() }
func (RootMotionView) class() string { return "RootMotionView\000" }

func (gdClass RootMotionView) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodRootMotionView [10]cMethodBind
func (gdClass RootMotionView) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass RootMotionView) SetAnimationPath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodRootMotionView[0], &path) }
func (gdClass RootMotionView) GetAnimationPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodRootMotionView[1]) }
func (gdClass RootMotionView) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodRootMotionView[2], &color) }
func (gdClass RootMotionView) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodRootMotionView[3]) }
func (gdClass RootMotionView) SetCellSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodRootMotionView[4], &size) }
func (gdClass RootMotionView) GetCellSize() float64 { return methodCall[float64](gdClass.obj.get(), methodRootMotionView[5]) }
func (gdClass RootMotionView) SetRadius(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodRootMotionView[6], &size) }
func (gdClass RootMotionView) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodRootMotionView[7]) }
func (gdClass RootMotionView) SetZeroY(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodRootMotionView[8], &enable) }
func (gdClass RootMotionView) GetZeroY() bool { return methodCall[bool](gdClass.obj.get(), methodRootMotionView[9]) }

type SceneMultiplayer struct{self *SceneMultiplayer; obj safeObject }
func NewSceneMultiplayer(ctx Context, at *SceneMultiplayer) SceneMultiplayer { if at == nil { at = new(SceneMultiplayer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SceneMultiplayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SceneMultiplayer) owner() cObject { return gdClass.obj.get() }
func (SceneMultiplayer) class() string { return "SceneMultiplayer\000" }

func (gdClass SceneMultiplayer) MultiplayerAPI() MultiplayerAPI { return MultiplayerAPI{obj:gdClass.obj} }

var methodSceneMultiplayer [8]cMethodBind
func (gdClass SceneMultiplayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MultiplayerAPI().virtual(rtype, name)
}
func (gdClass SceneMultiplayer) SetRootPath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSceneMultiplayer[0], &path) }
func (gdClass SceneMultiplayer) GetRootPath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSceneMultiplayer[1]) }
func (gdClass SceneMultiplayer) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodSceneMultiplayer[2]) }
func (gdClass SceneMultiplayer) SetRefuseNewConnections(refuse bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneMultiplayer[3], &refuse) }
func (gdClass SceneMultiplayer) IsRefusingNewConnections() bool { return methodCall[bool](gdClass.obj.get(), methodSceneMultiplayer[4]) }
func (gdClass SceneMultiplayer) SetAllowObjectDecoding(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneMultiplayer[5], &enable) }
func (gdClass SceneMultiplayer) IsObjectDecodingAllowed() bool { return methodCall[bool](gdClass.obj.get(), methodSceneMultiplayer[6]) }
func (gdClass SceneMultiplayer) SendBytes(bytes []byte, id int64, mode MultiplayerPeerTransferMode, channel int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneMultiplayer[7], &bytes, &id, &mode, &channel) }

type SceneReplicationConfig struct{self *SceneReplicationConfig; obj safeObject }
func NewSceneReplicationConfig(ctx Context, at *SceneReplicationConfig) SceneReplicationConfig { if at == nil { at = new(SceneReplicationConfig) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SceneReplicationConfig) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SceneReplicationConfig) owner() cObject { return gdClass.obj.get() }
func (SceneReplicationConfig) class() string { return "SceneReplicationConfig\000" }

func (gdClass SceneReplicationConfig) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSceneReplicationConfig [9]cMethodBind
func (gdClass SceneReplicationConfig) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SceneReplicationConfig) GetProperties() Array { return methodCall[Array](gdClass.obj.get(), methodSceneReplicationConfig[0]) }
func (gdClass SceneReplicationConfig) AddProperty(path NodePath, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodSceneReplicationConfig[1], &path, &index) }
func (gdClass SceneReplicationConfig) HasProperty(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodSceneReplicationConfig[2], &path) }
func (gdClass SceneReplicationConfig) RemoveProperty(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSceneReplicationConfig[3], &path) }
func (gdClass SceneReplicationConfig) PropertyGetIndex(path NodePath) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneReplicationConfig[4], &path) }
func (gdClass SceneReplicationConfig) PropertyGetSpawn(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodSceneReplicationConfig[5], &path) }
func (gdClass SceneReplicationConfig) PropertySetSpawn(path NodePath, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneReplicationConfig[6], &path, &enabled) }
func (gdClass SceneReplicationConfig) PropertyGetSync(path NodePath) bool { return methodCall[bool](gdClass.obj.get(), methodSceneReplicationConfig[7], &path) }
func (gdClass SceneReplicationConfig) PropertySetSync(path NodePath, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneReplicationConfig[8], &path, &enabled) }

type SceneStateGenEditState int64

const (
	SceneStateGenEditStateDisabled SceneStateGenEditState = 0
	SceneStateGenEditStateInstance SceneStateGenEditState = 1
	SceneStateGenEditStateMain SceneStateGenEditState = 2
	SceneStateGenEditStateMainInherited SceneStateGenEditState = 3
)

type SceneState struct{self *SceneState; obj safeObject }
func NewSceneState(ctx Context, at *SceneState) SceneState { if at == nil { at = new(SceneState) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SceneState) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SceneState) owner() cObject { return gdClass.obj.get() }
func (SceneState) class() string { return "SceneState\000" }

func (gdClass SceneState) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodSceneState [21]cMethodBind
func (gdClass SceneState) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass SceneState) GetNodeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[0]) }
func (gdClass SceneState) GetNodeType(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSceneState[1], &idx) }
func (gdClass SceneState) GetNodeName(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSceneState[2], &idx) }
func (gdClass SceneState) GetNodePath(idx int64, for_parent bool) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSceneState[3], &idx, &for_parent) }
func (gdClass SceneState) GetNodeOwnerPath(idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSceneState[4], &idx) }
func (gdClass SceneState) IsNodeInstancePlaceholder(idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSceneState[5], &idx) }
func (gdClass SceneState) GetNodeInstancePlaceholder(idx int64) string { return methodCall[string](gdClass.obj.get(), methodSceneState[6], &idx) }
func (gdClass SceneState) GetNodeInstance(idx int64) PackedScene { return methodCall[PackedScene](gdClass.obj.get(), methodSceneState[7], &idx) }
func (gdClass SceneState) GetNodeGroups(idx int64) []string { return methodCall[[]string](gdClass.obj.get(), methodSceneState[8], &idx) }
func (gdClass SceneState) GetNodeIndex(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[9], &idx) }
func (gdClass SceneState) GetNodePropertyCount(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[10], &idx) }
func (gdClass SceneState) GetNodePropertyName(idx int64, prop_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSceneState[11], &idx, &prop_idx) }
func (gdClass SceneState) GetNodePropertyValue(idx int64, prop_idx int64) any { return methodCall[any](gdClass.obj.get(), methodSceneState[12], &idx, &prop_idx) }
func (gdClass SceneState) GetConnectionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[13]) }
func (gdClass SceneState) GetConnectionSource(idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSceneState[14], &idx) }
func (gdClass SceneState) GetConnectionSignal(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSceneState[15], &idx) }
func (gdClass SceneState) GetConnectionTarget(idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSceneState[16], &idx) }
func (gdClass SceneState) GetConnectionMethod(idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSceneState[17], &idx) }
func (gdClass SceneState) GetConnectionFlags(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[18], &idx) }
func (gdClass SceneState) GetConnectionBinds(idx int64) Array { return methodCall[Array](gdClass.obj.get(), methodSceneState[19], &idx) }
func (gdClass SceneState) GetConnectionUnbinds(idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneState[20], &idx) }

type SceneTreeGroupCallFlags int64

const (
	SceneTreeGroupCallDefault SceneTreeGroupCallFlags = 0
	SceneTreeGroupCallReverse SceneTreeGroupCallFlags = 1
	SceneTreeGroupCallDeferred SceneTreeGroupCallFlags = 2
	SceneTreeGroupCallUnique SceneTreeGroupCallFlags = 4
)

type SceneTree struct{self *SceneTree; obj safeObject }
func NewSceneTree(ctx Context, at *SceneTree) SceneTree { if at == nil { at = new(SceneTree) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SceneTree) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SceneTree) owner() cObject { return gdClass.obj.get() }
func (SceneTree) class() string { return "SceneTree\000" }

func (gdClass SceneTree) MainLoop() MainLoop { return MainLoop{obj:gdClass.obj} }

var methodSceneTree [40]cMethodBind
func (gdClass SceneTree) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MainLoop().virtual(rtype, name)
}
func (gdClass SceneTree) GetRoot() Window { return methodCall[Window](gdClass.obj.get(), methodSceneTree[0]) }
func (gdClass SceneTree) HasGroup(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[1], &name) }
func (gdClass SceneTree) IsAutoAcceptQuit() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[2]) }
func (gdClass SceneTree) SetAutoAcceptQuit(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[3], &enabled) }
func (gdClass SceneTree) IsQuitOnGoBack() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[4]) }
func (gdClass SceneTree) SetQuitOnGoBack(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[5], &enabled) }
func (gdClass SceneTree) SetDebugCollisionsHint(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[6], &enable) }
func (gdClass SceneTree) IsDebuggingCollisionsHint() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[7]) }
func (gdClass SceneTree) SetDebugPathsHint(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[8], &enable) }
func (gdClass SceneTree) IsDebuggingPathsHint() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[9]) }
func (gdClass SceneTree) SetDebugNavigationHint(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[10], &enable) }
func (gdClass SceneTree) IsDebuggingNavigationHint() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[11]) }
func (gdClass SceneTree) SetEditedSceneRoot(scene Node)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[12], &scene) }
func (gdClass SceneTree) GetEditedSceneRoot() Node { return methodCall[Node](gdClass.obj.get(), methodSceneTree[13]) }
func (gdClass SceneTree) SetPause(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[14], &enable) }
func (gdClass SceneTree) IsPaused() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[15]) }
func (gdClass SceneTree) CreateTimer(time_sec float64, process_always bool) SceneTreeTimer { return methodCall[SceneTreeTimer](gdClass.obj.get(), methodSceneTree[16], &time_sec, &process_always) }
func (gdClass SceneTree) CreateTween() Tween { return methodCall[Tween](gdClass.obj.get(), methodSceneTree[17]) }
func (gdClass SceneTree) GetProcessedTweens() Array { return methodCall[Array](gdClass.obj.get(), methodSceneTree[18]) }
func (gdClass SceneTree) GetNodeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSceneTree[19]) }
func (gdClass SceneTree) GetFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodSceneTree[20]) }
func (gdClass SceneTree) Quit(exit_code int64)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[21], &exit_code) }
func (gdClass SceneTree) QueueDelete(obj Object)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[22], &obj) }
func (gdClass SceneTree) CallGroupFlags(flags int64, group Name, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[23], &flags, &group, &method) }
func (gdClass SceneTree) NotifyGroupFlags(call_flags int64, group Name, notification int64)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[24], &call_flags, &group, &notification) }
func (gdClass SceneTree) SetGroupFlags(call_flags int64, group Name, property string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[25], &call_flags, &group, &property, &value) }
func (gdClass SceneTree) CallGroup(group Name, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[26], &group, &method) }
func (gdClass SceneTree) NotifyGroup(group Name, notification int64)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[27], &group, &notification) }
func (gdClass SceneTree) SetGroup(group Name, property string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[28], &group, &property, &value) }
func (gdClass SceneTree) GetNodesInGroup(group Name) Array { return methodCall[Array](gdClass.obj.get(), methodSceneTree[29], &group) }
func (gdClass SceneTree) GetFirstNodeInGroup(group Name) Node { return methodCall[Node](gdClass.obj.get(), methodSceneTree[30], &group) }
func (gdClass SceneTree) SetCurrentScene(child_node Node)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[31], &child_node) }
func (gdClass SceneTree) GetCurrentScene() Node { return methodCall[Node](gdClass.obj.get(), methodSceneTree[32]) }
func (gdClass SceneTree) ChangeScene(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneTree[33], &path) }
func (gdClass SceneTree) ChangeSceneTo(packed_scene PackedScene) int64 { return methodCall[int64](gdClass.obj.get(), methodSceneTree[34], &packed_scene) }
func (gdClass SceneTree) ReloadCurrentScene() int64 { return methodCall[int64](gdClass.obj.get(), methodSceneTree[35]) }
func (gdClass SceneTree) SetMultiplayer(multiplayer MultiplayerAPI, root_path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[36], &multiplayer, &root_path) }
func (gdClass SceneTree) GetMultiplayer(for_path NodePath) MultiplayerAPI { return methodCall[MultiplayerAPI](gdClass.obj.get(), methodSceneTree[37], &for_path) }
func (gdClass SceneTree) SetMultiplayerPollEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTree[38], &enabled) }
func (gdClass SceneTree) IsMultiplayerPollEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSceneTree[39]) }

type SceneTreeTimer struct{self *SceneTreeTimer; obj safeObject }
func NewSceneTreeTimer(ctx Context, at *SceneTreeTimer) SceneTreeTimer { if at == nil { at = new(SceneTreeTimer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SceneTreeTimer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SceneTreeTimer) owner() cObject { return gdClass.obj.get() }
func (SceneTreeTimer) class() string { return "SceneTreeTimer\000" }

func (gdClass SceneTreeTimer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodSceneTreeTimer [2]cMethodBind
func (gdClass SceneTreeTimer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass SceneTreeTimer) SetTimeLeft(time float64)  { methodCall[struct{}](gdClass.obj.get(), methodSceneTreeTimer[0], &time) }
func (gdClass SceneTreeTimer) GetTimeLeft() float64 { return methodCall[float64](gdClass.obj.get(), methodSceneTreeTimer[1]) }

type Script struct{self *Script; obj safeObject }
func NewScript(ctx Context, at *Script) Script { if at == nil { at = new(Script) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Script) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Script) owner() cObject { return gdClass.obj.get() }
func (Script) class() string { return "Script\000" }

func (gdClass Script) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodScript [15]cMethodBind
func (gdClass Script) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Script) CanInstantiate() bool { return methodCall[bool](gdClass.obj.get(), methodScript[0]) }
func (gdClass Script) InstanceHas(base_object Object) bool { return methodCall[bool](gdClass.obj.get(), methodScript[1], &base_object) }
func (gdClass Script) HasSourceCode() bool { return methodCall[bool](gdClass.obj.get(), methodScript[2]) }
func (gdClass Script) GetSourceCode() string { return methodCall[string](gdClass.obj.get(), methodScript[3]) }
func (gdClass Script) SetSourceCode(source string)  { methodCall[struct{}](gdClass.obj.get(), methodScript[4], &source) }
func (gdClass Script) Reload(keep_state bool) int64 { return methodCall[int64](gdClass.obj.get(), methodScript[5], &keep_state) }
func (gdClass Script) GetBaseScript() Script { return methodCall[Script](gdClass.obj.get(), methodScript[6]) }
func (gdClass Script) GetInstanceBaseType() Name { return methodCall[Name](gdClass.obj.get(), methodScript[7]) }
func (gdClass Script) HasScriptSignal(signal_name Name) bool { return methodCall[bool](gdClass.obj.get(), methodScript[8], &signal_name) }
func (gdClass Script) GetScriptPropertyList() Array { return methodCall[Array](gdClass.obj.get(), methodScript[9]) }
func (gdClass Script) GetScriptMethodList() Array { return methodCall[Array](gdClass.obj.get(), methodScript[10]) }
func (gdClass Script) GetScriptSignalList() Array { return methodCall[Array](gdClass.obj.get(), methodScript[11]) }
func (gdClass Script) GetScriptConstantMap() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodScript[12]) }
func (gdClass Script) GetPropertyDefaultValue(property Name) any { return methodCall[any](gdClass.obj.get(), methodScript[13], &property) }
func (gdClass Script) IsTool() bool { return methodCall[bool](gdClass.obj.get(), methodScript[14]) }

type ScriptCreateDialog struct{self *ScriptCreateDialog; obj safeObject }
func NewScriptCreateDialog(ctx Context, at *ScriptCreateDialog) ScriptCreateDialog { if at == nil { at = new(ScriptCreateDialog) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScriptCreateDialog) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptCreateDialog) owner() cObject { return gdClass.obj.get() }
func (ScriptCreateDialog) class() string { return "ScriptCreateDialog\000" }

func (gdClass ScriptCreateDialog) ConfirmationDialog() ConfirmationDialog { return ConfirmationDialog{obj:gdClass.obj} }

var methodScriptCreateDialog [1]cMethodBind
func (gdClass ScriptCreateDialog) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ConfirmationDialog().virtual(rtype, name)
}
func (gdClass ScriptCreateDialog) Config(inherits string, path string, built_in_enabled bool, load_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodScriptCreateDialog[0], &inherits, &path, &built_in_enabled, &load_enabled) }

type ScriptEditor struct{self *ScriptEditor; obj safeObject }
func NewScriptEditor(ctx Context, at *ScriptEditor) ScriptEditor { if at == nil { at = new(ScriptEditor) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScriptEditor) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptEditor) owner() cObject { return gdClass.obj.get() }
func (ScriptEditor) class() string { return "ScriptEditor\000" }

func (gdClass ScriptEditor) PanelContainer() PanelContainer { return PanelContainer{obj:gdClass.obj} }

var methodScriptEditor [8]cMethodBind
func (gdClass ScriptEditor) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PanelContainer().virtual(rtype, name)
}
func (gdClass ScriptEditor) GetCurrentEditor() ScriptEditorBase { return methodCall[ScriptEditorBase](gdClass.obj.get(), methodScriptEditor[0]) }
func (gdClass ScriptEditor) GetOpenScriptEditors() Array { return methodCall[Array](gdClass.obj.get(), methodScriptEditor[1]) }
func (gdClass ScriptEditor) RegisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { methodCall[struct{}](gdClass.obj.get(), methodScriptEditor[2], &syntax_highlighter) }
func (gdClass ScriptEditor) UnregisterSyntaxHighlighter(syntax_highlighter EditorSyntaxHighlighter)  { methodCall[struct{}](gdClass.obj.get(), methodScriptEditor[3], &syntax_highlighter) }
func (gdClass ScriptEditor) GotoLine(line_number int64)  { methodCall[struct{}](gdClass.obj.get(), methodScriptEditor[4], &line_number) }
func (gdClass ScriptEditor) GetCurrentScript() Script { return methodCall[Script](gdClass.obj.get(), methodScriptEditor[5]) }
func (gdClass ScriptEditor) GetOpenScripts() Array { return methodCall[Array](gdClass.obj.get(), methodScriptEditor[6]) }
func (gdClass ScriptEditor) OpenScriptCreateDialog(base_name string, base_path string)  { methodCall[struct{}](gdClass.obj.get(), methodScriptEditor[7], &base_name, &base_path) }

type ScriptEditorBase struct{self *ScriptEditorBase; obj safeObject }
func NewScriptEditorBase(ctx Context, at *ScriptEditorBase) ScriptEditorBase { if at == nil { at = new(ScriptEditorBase) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScriptEditorBase) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptEditorBase) owner() cObject { return gdClass.obj.get() }
func (ScriptEditorBase) class() string { return "ScriptEditorBase\000" }

func (gdClass ScriptEditorBase) VBoxContainer() VBoxContainer { return VBoxContainer{obj:gdClass.obj} }

var methodScriptEditorBase [2]cMethodBind
func (gdClass ScriptEditorBase) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VBoxContainer().virtual(rtype, name)
}
func (gdClass ScriptEditorBase) GetBaseEditor() Control { return methodCall[Control](gdClass.obj.get(), methodScriptEditorBase[0]) }
func (gdClass ScriptEditorBase) AddSyntaxHighlighter(highlighter EditorSyntaxHighlighter)  { methodCall[struct{}](gdClass.obj.get(), methodScriptEditorBase[1], &highlighter) }

type ScriptExtension struct{self *ScriptExtension; obj safeObject }
func NewScriptExtension(ctx Context, at *ScriptExtension) ScriptExtension { if at == nil { at = new(ScriptExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ScriptExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptExtension) owner() cObject { return gdClass.obj.get() }
func (ScriptExtension) class() string { return "ScriptExtension\000" }

func (gdClass ScriptExtension) Script() Script { return Script{obj:gdClass.obj} }

func (gdClass ScriptExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_editor_can_reload_from_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ EditorCanReloadFromFile() bool }{}).Elem()) {
			return rtype.MethodByName(`EditorCanReloadFromFile`)
		}
		return
	case "_placeholder_erased":
		if rtype.Implements(reflect.TypeOf([0]interface{ PlaceholderErased(placeholder []byte)  }{}).Elem()) {
			return rtype.MethodByName(`PlaceholderErased`)
		}
		return
	case "_can_instantiate":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanInstantiate() bool }{}).Elem()) {
			return rtype.MethodByName(`CanInstantiate`)
		}
		return
	case "_get_base_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBaseScript() Script }{}).Elem()) {
			return rtype.MethodByName(`GetBaseScript`)
		}
		return
	case "_inherits_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ InheritsScript(script Script) bool }{}).Elem()) {
			return rtype.MethodByName(`InheritsScript`)
		}
		return
	case "_get_instance_base_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInstanceBaseType() Name }{}).Elem()) {
			return rtype.MethodByName(`GetInstanceBaseType`)
		}
		return
	case "_instance_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ InstanceCreate(for_object Object) []byte }{}).Elem()) {
			return rtype.MethodByName(`InstanceCreate`)
		}
		return
	case "_placeholder_instance_create":
		if rtype.Implements(reflect.TypeOf([0]interface{ PlaceholderInstanceCreate(for_object Object) []byte }{}).Elem()) {
			return rtype.MethodByName(`PlaceholderInstanceCreate`)
		}
		return
	case "_instance_has":
		if rtype.Implements(reflect.TypeOf([0]interface{ InstanceHas(object Object) bool }{}).Elem()) {
			return rtype.MethodByName(`InstanceHas`)
		}
		return
	case "_has_source_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasSourceCode() bool }{}).Elem()) {
			return rtype.MethodByName(`HasSourceCode`)
		}
		return
	case "_get_source_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSourceCode() string }{}).Elem()) {
			return rtype.MethodByName(`GetSourceCode`)
		}
		return
	case "_set_source_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetSourceCode(code string)  }{}).Elem()) {
			return rtype.MethodByName(`SetSourceCode`)
		}
		return
	case "_reload":
		if rtype.Implements(reflect.TypeOf([0]interface{ Reload(keep_state bool) int64 }{}).Elem()) {
			return rtype.MethodByName(`Reload`)
		}
		return
	case "_get_documentation":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDocumentation() Array }{}).Elem()) {
			return rtype.MethodByName(`GetDocumentation`)
		}
		return
	case "_has_method":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasMethod(method Name) bool }{}).Elem()) {
			return rtype.MethodByName(`HasMethod`)
		}
		return
	case "_get_method_info":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMethodInfo(method Name) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetMethodInfo`)
		}
		return
	case "_is_tool":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsTool() bool }{}).Elem()) {
			return rtype.MethodByName(`IsTool`)
		}
		return
	case "_is_valid":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsValid() bool }{}).Elem()) {
			return rtype.MethodByName(`IsValid`)
		}
		return
	case "_get_language":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLanguage() ScriptLanguage }{}).Elem()) {
			return rtype.MethodByName(`GetLanguage`)
		}
		return
	case "_has_script_signal":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasScriptSignal(signal Name) bool }{}).Elem()) {
			return rtype.MethodByName(`HasScriptSignal`)
		}
		return
	case "_get_script_signal_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetScriptSignalList() Array }{}).Elem()) {
			return rtype.MethodByName(`GetScriptSignalList`)
		}
		return
	case "_has_property_default_value":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasPropertyDefaultValue(property Name) bool }{}).Elem()) {
			return rtype.MethodByName(`HasPropertyDefaultValue`)
		}
		return
	case "_get_property_default_value":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPropertyDefaultValue(property Name) any }{}).Elem()) {
			return rtype.MethodByName(`GetPropertyDefaultValue`)
		}
		return
	case "_update_exports":
		if rtype.Implements(reflect.TypeOf([0]interface{ UpdateExports()  }{}).Elem()) {
			return rtype.MethodByName(`UpdateExports`)
		}
		return
	case "_get_script_method_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetScriptMethodList() Array }{}).Elem()) {
			return rtype.MethodByName(`GetScriptMethodList`)
		}
		return
	case "_get_script_property_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetScriptPropertyList() Array }{}).Elem()) {
			return rtype.MethodByName(`GetScriptPropertyList`)
		}
		return
	case "_get_member_line":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMemberLine(member Name) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMemberLine`)
		}
		return
	case "_get_constants":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConstants() Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetConstants`)
		}
		return
	case "_get_members":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMembers() Array }{}).Elem()) {
			return rtype.MethodByName(`GetMembers`)
		}
		return
	case "_is_placeholder_fallback_enabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsPlaceholderFallbackEnabled() bool }{}).Elem()) {
			return rtype.MethodByName(`IsPlaceholderFallbackEnabled`)
		}
		return
	case "_get_rpc_config":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRpcConfig() any }{}).Elem()) {
			return rtype.MethodByName(`GetRpcConfig`)
		}
		return
	}
	return gdClass.Script().virtual(rtype, name)
}

type ScriptLanguage struct{self *ScriptLanguage; obj safeObject }
func NewScriptLanguage(ctx Context, at *ScriptLanguage) ScriptLanguage { if at == nil { at = new(ScriptLanguage) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScriptLanguage) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptLanguage) owner() cObject { return gdClass.obj.get() }
func (ScriptLanguage) class() string { return "ScriptLanguage\000" }

func (gdClass ScriptLanguage) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass ScriptLanguage) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}

type ScriptLanguageExtensionLookupResultType int64

const (
	ScriptLanguageExtensionLookupResultScriptLocation ScriptLanguageExtensionLookupResultType = 0
	ScriptLanguageExtensionLookupResultClass ScriptLanguageExtensionLookupResultType = 1
	ScriptLanguageExtensionLookupResultClassConstant ScriptLanguageExtensionLookupResultType = 2
	ScriptLanguageExtensionLookupResultClassProperty ScriptLanguageExtensionLookupResultType = 3
	ScriptLanguageExtensionLookupResultClassMethod ScriptLanguageExtensionLookupResultType = 4
	ScriptLanguageExtensionLookupResultClassSignal ScriptLanguageExtensionLookupResultType = 5
	ScriptLanguageExtensionLookupResultClassEnum ScriptLanguageExtensionLookupResultType = 6
	ScriptLanguageExtensionLookupResultClassTbdGlobalscope ScriptLanguageExtensionLookupResultType = 7
	ScriptLanguageExtensionLookupResultClassAnnotation ScriptLanguageExtensionLookupResultType = 8
	ScriptLanguageExtensionLookupResultMax ScriptLanguageExtensionLookupResultType = 9
)

type ScriptLanguageExtensionCodeCompletionLocation int64

const (
	ScriptLanguageExtensionLocationLocal ScriptLanguageExtensionCodeCompletionLocation = 0
	ScriptLanguageExtensionLocationParentMask ScriptLanguageExtensionCodeCompletionLocation = 256
	ScriptLanguageExtensionLocationOtherUserCode ScriptLanguageExtensionCodeCompletionLocation = 512
	ScriptLanguageExtensionLocationOther ScriptLanguageExtensionCodeCompletionLocation = 1024
)

type ScriptLanguageExtensionCodeCompletionKind int64

const (
	ScriptLanguageExtensionCodeCompletionKindClass ScriptLanguageExtensionCodeCompletionKind = 0
	ScriptLanguageExtensionCodeCompletionKindFunction ScriptLanguageExtensionCodeCompletionKind = 1
	ScriptLanguageExtensionCodeCompletionKindSignal ScriptLanguageExtensionCodeCompletionKind = 2
	ScriptLanguageExtensionCodeCompletionKindVariable ScriptLanguageExtensionCodeCompletionKind = 3
	ScriptLanguageExtensionCodeCompletionKindMember ScriptLanguageExtensionCodeCompletionKind = 4
	ScriptLanguageExtensionCodeCompletionKindEnum ScriptLanguageExtensionCodeCompletionKind = 5
	ScriptLanguageExtensionCodeCompletionKindConstant ScriptLanguageExtensionCodeCompletionKind = 6
	ScriptLanguageExtensionCodeCompletionKindNodePath ScriptLanguageExtensionCodeCompletionKind = 7
	ScriptLanguageExtensionCodeCompletionKindFilePath ScriptLanguageExtensionCodeCompletionKind = 8
	ScriptLanguageExtensionCodeCompletionKindPlainText ScriptLanguageExtensionCodeCompletionKind = 9
	ScriptLanguageExtensionCodeCompletionKindMax ScriptLanguageExtensionCodeCompletionKind = 10
)

type ScriptLanguageExtension struct{self *ScriptLanguageExtension; obj safeObject }
func NewScriptLanguageExtension(ctx Context, at *ScriptLanguageExtension) ScriptLanguageExtension { if at == nil { at = new(ScriptLanguageExtension) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScriptLanguageExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScriptLanguageExtension) owner() cObject { return gdClass.obj.get() }
func (ScriptLanguageExtension) class() string { return "ScriptLanguageExtension\000" }

func (gdClass ScriptLanguageExtension) ScriptLanguage() ScriptLanguage { return ScriptLanguage{obj:gdClass.obj} }

func (gdClass ScriptLanguageExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetName() string }{}).Elem()) {
			return rtype.MethodByName(`GetName`)
		}
		return
	case "_init":
		if rtype.Implements(reflect.TypeOf([0]interface{ Init()  }{}).Elem()) {
			return rtype.MethodByName(`Init`)
		}
		return
	case "_get_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetType() string }{}).Elem()) {
			return rtype.MethodByName(`GetType`)
		}
		return
	case "_get_extension":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetExtension() string }{}).Elem()) {
			return rtype.MethodByName(`GetExtension`)
		}
		return
	case "_execute_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ ExecuteFile(path string) int64 }{}).Elem()) {
			return rtype.MethodByName(`ExecuteFile`)
		}
		return
	case "_finish":
		if rtype.Implements(reflect.TypeOf([0]interface{ Finish()  }{}).Elem()) {
			return rtype.MethodByName(`Finish`)
		}
		return
	case "_get_reserved_words":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetReservedWords() []string }{}).Elem()) {
			return rtype.MethodByName(`GetReservedWords`)
		}
		return
	case "_is_control_flow_keyword":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsControlFlowKeyword(keyword string) bool }{}).Elem()) {
			return rtype.MethodByName(`IsControlFlowKeyword`)
		}
		return
	case "_get_comment_delimiters":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCommentDelimiters() []string }{}).Elem()) {
			return rtype.MethodByName(`GetCommentDelimiters`)
		}
		return
	case "_get_string_delimiters":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetStringDelimiters() []string }{}).Elem()) {
			return rtype.MethodByName(`GetStringDelimiters`)
		}
		return
	case "_make_template":
		if rtype.Implements(reflect.TypeOf([0]interface{ MakeTemplate(template string, class_name string, base_class_name string) Script }{}).Elem()) {
			return rtype.MethodByName(`MakeTemplate`)
		}
		return
	case "_get_built_in_templates":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBuiltInTemplates(object Name) Array }{}).Elem()) {
			return rtype.MethodByName(`GetBuiltInTemplates`)
		}
		return
	case "_is_using_templates":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsUsingTemplates() bool }{}).Elem()) {
			return rtype.MethodByName(`IsUsingTemplates`)
		}
		return
	case "_validate":
		if rtype.Implements(reflect.TypeOf([0]interface{ Validate(script string, path string, validate_functions bool, validate_errors bool, validate_warnings bool, validate_safe_lines bool) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`Validate`)
		}
		return
	case "_validate_path":
		if rtype.Implements(reflect.TypeOf([0]interface{ ValidatePath(path string) string }{}).Elem()) {
			return rtype.MethodByName(`ValidatePath`)
		}
		return
	case "_create_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateScript() Object }{}).Elem()) {
			return rtype.MethodByName(`CreateScript`)
		}
		return
	case "_has_named_classes":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasNamedClasses() bool }{}).Elem()) {
			return rtype.MethodByName(`HasNamedClasses`)
		}
		return
	case "_supports_builtin_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ SupportsBuiltinMode() bool }{}).Elem()) {
			return rtype.MethodByName(`SupportsBuiltinMode`)
		}
		return
	case "_supports_documentation":
		if rtype.Implements(reflect.TypeOf([0]interface{ SupportsDocumentation() bool }{}).Elem()) {
			return rtype.MethodByName(`SupportsDocumentation`)
		}
		return
	case "_can_inherit_from_file":
		if rtype.Implements(reflect.TypeOf([0]interface{ CanInheritFromFile() bool }{}).Elem()) {
			return rtype.MethodByName(`CanInheritFromFile`)
		}
		return
	case "_find_function":
		if rtype.Implements(reflect.TypeOf([0]interface{ FindFunction(class_name string, function_name string) int64 }{}).Elem()) {
			return rtype.MethodByName(`FindFunction`)
		}
		return
	case "_make_function":
		if rtype.Implements(reflect.TypeOf([0]interface{ MakeFunction(class_name string, function_name string, function_args []string) string }{}).Elem()) {
			return rtype.MethodByName(`MakeFunction`)
		}
		return
	case "_open_in_external_editor":
		if rtype.Implements(reflect.TypeOf([0]interface{ OpenInExternalEditor(script Script, line int64, column int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`OpenInExternalEditor`)
		}
		return
	case "_overrides_external_editor":
		if rtype.Implements(reflect.TypeOf([0]interface{ OverridesExternalEditor() bool }{}).Elem()) {
			return rtype.MethodByName(`OverridesExternalEditor`)
		}
		return
	case "_complete_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ CompleteCode(code string, path string, owner Object) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`CompleteCode`)
		}
		return
	case "_lookup_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ LookupCode(code string, symbol string, path string, owner Object) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`LookupCode`)
		}
		return
	case "_auto_indent_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ AutoIndentCode(code string, from_line int64, to_line int64) string }{}).Elem()) {
			return rtype.MethodByName(`AutoIndentCode`)
		}
		return
	case "_add_global_constant":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddGlobalConstant(name Name, value any)  }{}).Elem()) {
			return rtype.MethodByName(`AddGlobalConstant`)
		}
		return
	case "_add_named_global_constant":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddNamedGlobalConstant(name Name, value any)  }{}).Elem()) {
			return rtype.MethodByName(`AddNamedGlobalConstant`)
		}
		return
	case "_remove_named_global_constant":
		if rtype.Implements(reflect.TypeOf([0]interface{ RemoveNamedGlobalConstant(name Name)  }{}).Elem()) {
			return rtype.MethodByName(`RemoveNamedGlobalConstant`)
		}
		return
	case "_thread_enter":
		if rtype.Implements(reflect.TypeOf([0]interface{ ThreadEnter()  }{}).Elem()) {
			return rtype.MethodByName(`ThreadEnter`)
		}
		return
	case "_thread_exit":
		if rtype.Implements(reflect.TypeOf([0]interface{ ThreadExit()  }{}).Elem()) {
			return rtype.MethodByName(`ThreadExit`)
		}
		return
	case "_debug_get_error":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetError() string }{}).Elem()) {
			return rtype.MethodByName(`DebugGetError`)
		}
		return
	case "_debug_get_stack_level_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelCount`)
		}
		return
	case "_debug_get_stack_level_line":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelLine(level int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelLine`)
		}
		return
	case "_debug_get_stack_level_function":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelFunction(level int64) string }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelFunction`)
		}
		return
	case "_debug_get_stack_level_locals":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelLocals(level int64, max_subitems int64, max_depth int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelLocals`)
		}
		return
	case "_debug_get_stack_level_members":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelMembers(level int64, max_subitems int64, max_depth int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelMembers`)
		}
		return
	case "_debug_get_stack_level_instance":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetStackLevelInstance(level int64) []byte }{}).Elem()) {
			return rtype.MethodByName(`DebugGetStackLevelInstance`)
		}
		return
	case "_debug_get_globals":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetGlobals(max_subitems int64, max_depth int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`DebugGetGlobals`)
		}
		return
	case "_debug_parse_stack_level_expression":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugParseStackLevelExpression(level int64, expression string, max_subitems int64, max_depth int64) string }{}).Elem()) {
			return rtype.MethodByName(`DebugParseStackLevelExpression`)
		}
		return
	case "_debug_get_current_stack_info":
		if rtype.Implements(reflect.TypeOf([0]interface{ DebugGetCurrentStackInfo() Array }{}).Elem()) {
			return rtype.MethodByName(`DebugGetCurrentStackInfo`)
		}
		return
	case "_reload_all_scripts":
		if rtype.Implements(reflect.TypeOf([0]interface{ ReloadAllScripts()  }{}).Elem()) {
			return rtype.MethodByName(`ReloadAllScripts`)
		}
		return
	case "_reload_tool_script":
		if rtype.Implements(reflect.TypeOf([0]interface{ ReloadToolScript(script Script, soft_reload bool)  }{}).Elem()) {
			return rtype.MethodByName(`ReloadToolScript`)
		}
		return
	case "_get_recognized_extensions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRecognizedExtensions() []string }{}).Elem()) {
			return rtype.MethodByName(`GetRecognizedExtensions`)
		}
		return
	case "_get_public_functions":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPublicFunctions() Array }{}).Elem()) {
			return rtype.MethodByName(`GetPublicFunctions`)
		}
		return
	case "_get_public_constants":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPublicConstants() Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetPublicConstants`)
		}
		return
	case "_get_public_annotations":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPublicAnnotations() Array }{}).Elem()) {
			return rtype.MethodByName(`GetPublicAnnotations`)
		}
		return
	case "_profiling_start":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProfilingStart()  }{}).Elem()) {
			return rtype.MethodByName(`ProfilingStart`)
		}
		return
	case "_profiling_stop":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProfilingStop()  }{}).Elem()) {
			return rtype.MethodByName(`ProfilingStop`)
		}
		return
	case "_profiling_get_accumulated_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProfilingGetAccumulatedData(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ProfilingGetAccumulatedData`)
		}
		return
	case "_profiling_get_frame_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ ProfilingGetFrameData(info_array *ScriptLanguageExtensionProfilingInfo, info_max int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ProfilingGetFrameData`)
		}
		return
	case "_alloc_instance_binding_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ AllocInstanceBindingData(object Object) []byte }{}).Elem()) {
			return rtype.MethodByName(`AllocInstanceBindingData`)
		}
		return
	case "_free_instance_binding_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ FreeInstanceBindingData(data []byte)  }{}).Elem()) {
			return rtype.MethodByName(`FreeInstanceBindingData`)
		}
		return
	case "_refcount_incremented_instance_binding":
		if rtype.Implements(reflect.TypeOf([0]interface{ RefcountIncrementedInstanceBinding(object Object)  }{}).Elem()) {
			return rtype.MethodByName(`RefcountIncrementedInstanceBinding`)
		}
		return
	case "_refcount_decremented_instance_binding":
		if rtype.Implements(reflect.TypeOf([0]interface{ RefcountDecrementedInstanceBinding(object Object) bool }{}).Elem()) {
			return rtype.MethodByName(`RefcountDecrementedInstanceBinding`)
		}
		return
	case "_frame":
		if rtype.Implements(reflect.TypeOf([0]interface{ Frame()  }{}).Elem()) {
			return rtype.MethodByName(`Frame`)
		}
		return
	case "_handles_global_class_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ HandlesGlobalClassType(atype string) bool }{}).Elem()) {
			return rtype.MethodByName(`HandlesGlobalClassType`)
		}
		return
	case "_get_global_class_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetGlobalClassName(path string) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetGlobalClassName`)
		}
		return
	}
	return gdClass.ScriptLanguage().virtual(rtype, name)
}

type ScrollBar struct{self *ScrollBar; obj safeObject }
func NewScrollBar(ctx Context, at *ScrollBar) ScrollBar { if at == nil { at = new(ScrollBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScrollBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScrollBar) owner() cObject { return gdClass.obj.get() }
func (ScrollBar) class() string { return "ScrollBar\000" }

func (gdClass ScrollBar) Range() Range { return Range{obj:gdClass.obj} }

var methodScrollBar [2]cMethodBind
func (gdClass ScrollBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass ScrollBar) SetCustomStep(step float64)  { methodCall[struct{}](gdClass.obj.get(), methodScrollBar[0], &step) }
func (gdClass ScrollBar) GetCustomStep() float64 { return methodCall[float64](gdClass.obj.get(), methodScrollBar[1]) }

type ScrollContainerScrollMode int64

const (
	ScrollContainerScrollModeDisabled ScrollContainerScrollMode = 0
	ScrollContainerScrollModeAuto ScrollContainerScrollMode = 1
	ScrollContainerScrollModeShowAlways ScrollContainerScrollMode = 2
	ScrollContainerScrollModeShowNever ScrollContainerScrollMode = 3
)

type ScrollContainer struct{self *ScrollContainer; obj safeObject }
func NewScrollContainer(ctx Context, at *ScrollContainer) ScrollContainer { if at == nil { at = new(ScrollContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ScrollContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ScrollContainer) owner() cObject { return gdClass.obj.get() }
func (ScrollContainer) class() string { return "ScrollContainer\000" }

func (gdClass ScrollContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodScrollContainer [15]cMethodBind
func (gdClass ScrollContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass ScrollContainer) SetHScroll(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[0], &value) }
func (gdClass ScrollContainer) GetHScroll() int64 { return methodCall[int64](gdClass.obj.get(), methodScrollContainer[1]) }
func (gdClass ScrollContainer) SetVScroll(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[2], &value) }
func (gdClass ScrollContainer) GetVScroll() int64 { return methodCall[int64](gdClass.obj.get(), methodScrollContainer[3]) }
func (gdClass ScrollContainer) SetHorizontalScrollMode(enable ScrollContainerScrollMode)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[4], &enable) }
func (gdClass ScrollContainer) GetHorizontalScrollMode() ScrollContainerScrollMode { return methodCall[ScrollContainerScrollMode](gdClass.obj.get(), methodScrollContainer[5]) }
func (gdClass ScrollContainer) SetVerticalScrollMode(enable ScrollContainerScrollMode)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[6], &enable) }
func (gdClass ScrollContainer) GetVerticalScrollMode() ScrollContainerScrollMode { return methodCall[ScrollContainerScrollMode](gdClass.obj.get(), methodScrollContainer[7]) }
func (gdClass ScrollContainer) SetDeadzone(deadzone int64)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[8], &deadzone) }
func (gdClass ScrollContainer) GetDeadzone() int64 { return methodCall[int64](gdClass.obj.get(), methodScrollContainer[9]) }
func (gdClass ScrollContainer) SetFollowFocus(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[10], &enabled) }
func (gdClass ScrollContainer) IsFollowingFocus() bool { return methodCall[bool](gdClass.obj.get(), methodScrollContainer[11]) }
func (gdClass ScrollContainer) GetHScrollBar() HScrollBar { return methodCall[HScrollBar](gdClass.obj.get(), methodScrollContainer[12]) }
func (gdClass ScrollContainer) GetVScrollBar() VScrollBar { return methodCall[VScrollBar](gdClass.obj.get(), methodScrollContainer[13]) }
func (gdClass ScrollContainer) EnsureControlVisible(control Control)  { methodCall[struct{}](gdClass.obj.get(), methodScrollContainer[14], &control) }

type SegmentShape2D struct{self *SegmentShape2D; obj safeObject }
func NewSegmentShape2D(ctx Context, at *SegmentShape2D) SegmentShape2D { if at == nil { at = new(SegmentShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SegmentShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SegmentShape2D) owner() cObject { return gdClass.obj.get() }
func (SegmentShape2D) class() string { return "SegmentShape2D\000" }

func (gdClass SegmentShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodSegmentShape2D [4]cMethodBind
func (gdClass SegmentShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass SegmentShape2D) SetA(a Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSegmentShape2D[0], &a) }
func (gdClass SegmentShape2D) GetA() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSegmentShape2D[1]) }
func (gdClass SegmentShape2D) SetB(b Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSegmentShape2D[2], &b) }
func (gdClass SegmentShape2D) GetB() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSegmentShape2D[3]) }

type Semaphore struct{self *Semaphore; obj safeObject }
func NewSemaphore(ctx Context, at *Semaphore) Semaphore { if at == nil { at = new(Semaphore) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Semaphore) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Semaphore) owner() cObject { return gdClass.obj.get() }
func (Semaphore) class() string { return "Semaphore\000" }

func (gdClass Semaphore) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodSemaphore [3]cMethodBind
func (gdClass Semaphore) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Semaphore) Wait()  { methodCall[struct{}](gdClass.obj.get(), methodSemaphore[0]) }
func (gdClass Semaphore) TryWait() int64 { return methodCall[int64](gdClass.obj.get(), methodSemaphore[1]) }
func (gdClass Semaphore) Post()  { methodCall[struct{}](gdClass.obj.get(), methodSemaphore[2]) }

type SeparationRayShape2D struct{self *SeparationRayShape2D; obj safeObject }
func NewSeparationRayShape2D(ctx Context, at *SeparationRayShape2D) SeparationRayShape2D { if at == nil { at = new(SeparationRayShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SeparationRayShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SeparationRayShape2D) owner() cObject { return gdClass.obj.get() }
func (SeparationRayShape2D) class() string { return "SeparationRayShape2D\000" }

func (gdClass SeparationRayShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodSeparationRayShape2D [4]cMethodBind
func (gdClass SeparationRayShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass SeparationRayShape2D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSeparationRayShape2D[0], &length) }
func (gdClass SeparationRayShape2D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSeparationRayShape2D[1]) }
func (gdClass SeparationRayShape2D) SetSlideOnSlope(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodSeparationRayShape2D[2], &active) }
func (gdClass SeparationRayShape2D) GetSlideOnSlope() bool { return methodCall[bool](gdClass.obj.get(), methodSeparationRayShape2D[3]) }

type SeparationRayShape3D struct{self *SeparationRayShape3D; obj safeObject }
func NewSeparationRayShape3D(ctx Context, at *SeparationRayShape3D) SeparationRayShape3D { if at == nil { at = new(SeparationRayShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SeparationRayShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SeparationRayShape3D) owner() cObject { return gdClass.obj.get() }
func (SeparationRayShape3D) class() string { return "SeparationRayShape3D\000" }

func (gdClass SeparationRayShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodSeparationRayShape3D [4]cMethodBind
func (gdClass SeparationRayShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass SeparationRayShape3D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSeparationRayShape3D[0], &length) }
func (gdClass SeparationRayShape3D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSeparationRayShape3D[1]) }
func (gdClass SeparationRayShape3D) SetSlideOnSlope(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodSeparationRayShape3D[2], &active) }
func (gdClass SeparationRayShape3D) GetSlideOnSlope() bool { return methodCall[bool](gdClass.obj.get(), methodSeparationRayShape3D[3]) }

type Separator struct{self *Separator; obj safeObject }
func NewSeparator(ctx Context, at *Separator) Separator { if at == nil { at = new(Separator) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Separator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Separator) owner() cObject { return gdClass.obj.get() }
func (Separator) class() string { return "Separator\000" }

func (gdClass Separator) Control() Control { return Control{obj:gdClass.obj} }

func (gdClass Separator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}

type ShaderMode int64

const (
	ShaderModeSpatial ShaderMode = 0
	ShaderModeCanvasItem ShaderMode = 1
	ShaderModeParticles ShaderMode = 2
	ShaderModeSky ShaderMode = 3
	ShaderModeFog ShaderMode = 4
)

type Shader struct{self *Shader; obj safeObject }
func NewShader(ctx Context, at *Shader) Shader { if at == nil { at = new(Shader) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Shader) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Shader) owner() cObject { return gdClass.obj.get() }
func (Shader) class() string { return "Shader\000" }

func (gdClass Shader) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodShader [6]cMethodBind
func (gdClass Shader) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Shader) GetMode() ShaderMode { return methodCall[ShaderMode](gdClass.obj.get(), methodShader[0]) }
func (gdClass Shader) SetCode(code string)  { methodCall[struct{}](gdClass.obj.get(), methodShader[1], &code) }
func (gdClass Shader) GetCode() string { return methodCall[string](gdClass.obj.get(), methodShader[2]) }
func (gdClass Shader) SetDefaultTextureParam(param Name, texture Texture2D, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodShader[3], &param, &texture, &index) }
func (gdClass Shader) GetDefaultTextureParam(param Name, index int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodShader[4], &param, &index) }
func (gdClass Shader) HasUniform(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodShader[5], &name) }

type ShaderGlobalsOverride struct{self *ShaderGlobalsOverride; obj safeObject }
func NewShaderGlobalsOverride(ctx Context, at *ShaderGlobalsOverride) ShaderGlobalsOverride { if at == nil { at = new(ShaderGlobalsOverride) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ShaderGlobalsOverride) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ShaderGlobalsOverride) owner() cObject { return gdClass.obj.get() }
func (ShaderGlobalsOverride) class() string { return "ShaderGlobalsOverride\000" }

func (gdClass ShaderGlobalsOverride) Node() Node { return Node{obj:gdClass.obj} }

func (gdClass ShaderGlobalsOverride) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}

type ShaderInclude struct{self *ShaderInclude; obj safeObject }
func NewShaderInclude(ctx Context, at *ShaderInclude) ShaderInclude { if at == nil { at = new(ShaderInclude) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ShaderInclude) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ShaderInclude) owner() cObject { return gdClass.obj.get() }
func (ShaderInclude) class() string { return "ShaderInclude\000" }

func (gdClass ShaderInclude) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodShaderInclude [2]cMethodBind
func (gdClass ShaderInclude) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass ShaderInclude) SetCode(code string)  { methodCall[struct{}](gdClass.obj.get(), methodShaderInclude[0], &code) }
func (gdClass ShaderInclude) GetCode() string { return methodCall[string](gdClass.obj.get(), methodShaderInclude[1]) }

type ShaderMaterial struct{self *ShaderMaterial; obj safeObject }
func NewShaderMaterial(ctx Context, at *ShaderMaterial) ShaderMaterial { if at == nil { at = new(ShaderMaterial) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ShaderMaterial) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ShaderMaterial) owner() cObject { return gdClass.obj.get() }
func (ShaderMaterial) class() string { return "ShaderMaterial\000" }

func (gdClass ShaderMaterial) Material() Material { return Material{obj:gdClass.obj} }

var methodShaderMaterial [4]cMethodBind
func (gdClass ShaderMaterial) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Material().virtual(rtype, name)
}
func (gdClass ShaderMaterial) SetShader(shader Shader)  { methodCall[struct{}](gdClass.obj.get(), methodShaderMaterial[0], &shader) }
func (gdClass ShaderMaterial) GetShader() Shader { return methodCall[Shader](gdClass.obj.get(), methodShaderMaterial[1]) }
func (gdClass ShaderMaterial) SetShaderUniform(param Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodShaderMaterial[2], &param, &value) }
func (gdClass ShaderMaterial) GetShaderUniform(param Name) any { return methodCall[any](gdClass.obj.get(), methodShaderMaterial[3], &param) }

type Shape2D struct{self *Shape2D; obj safeObject }
func NewShape2D(ctx Context, at *Shape2D) Shape2D { if at == nil { at = new(Shape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Shape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Shape2D) owner() cObject { return gdClass.obj.get() }
func (Shape2D) class() string { return "Shape2D\000" }

func (gdClass Shape2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodShape2D [7]cMethodBind
func (gdClass Shape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Shape2D) SetCustomSolverBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodShape2D[0], &bias) }
func (gdClass Shape2D) GetCustomSolverBias() float64 { return methodCall[float64](gdClass.obj.get(), methodShape2D[1]) }
func (gdClass Shape2D) Collide(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) bool { return methodCall[bool](gdClass.obj.get(), methodShape2D[2], &local_xform, &with_shape, &shape_xform) }
func (gdClass Shape2D) CollideWithMotion(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodShape2D[3], &local_xform, &local_motion, &with_shape, &shape_xform, &shape_motion) }
func (gdClass Shape2D) CollideAndGetContacts(local_xform Transform2D, with_shape Shape2D, shape_xform Transform2D) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodShape2D[4], &local_xform, &with_shape, &shape_xform) }
func (gdClass Shape2D) CollideWithMotionAndGetContacts(local_xform Transform2D, local_motion Vector2, with_shape Shape2D, shape_xform Transform2D, shape_motion Vector2) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodShape2D[5], &local_xform, &local_motion, &with_shape, &shape_xform, &shape_motion) }
func (gdClass Shape2D) Draw(canvas_item RID, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodShape2D[6], &canvas_item, &color) }

type Shape3D struct{self *Shape3D; obj safeObject }
func NewShape3D(ctx Context, at *Shape3D) Shape3D { if at == nil { at = new(Shape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Shape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Shape3D) owner() cObject { return gdClass.obj.get() }
func (Shape3D) class() string { return "Shape3D\000" }

func (gdClass Shape3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodShape3D [5]cMethodBind
func (gdClass Shape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Shape3D) SetCustomSolverBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodShape3D[0], &bias) }
func (gdClass Shape3D) GetCustomSolverBias() float64 { return methodCall[float64](gdClass.obj.get(), methodShape3D[1]) }
func (gdClass Shape3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodShape3D[2], &margin) }
func (gdClass Shape3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodShape3D[3]) }
func (gdClass Shape3D) GetDebugMesh() ArrayMesh { return methodCall[ArrayMesh](gdClass.obj.get(), methodShape3D[4]) }

type ShapeCast2D struct{self *ShapeCast2D; obj safeObject }
func NewShapeCast2D(ctx Context, at *ShapeCast2D) ShapeCast2D { if at == nil { at = new(ShapeCast2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ShapeCast2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ShapeCast2D) owner() cObject { return gdClass.obj.get() }
func (ShapeCast2D) class() string { return "ShapeCast2D\000" }

func (gdClass ShapeCast2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodShapeCast2D [34]cMethodBind
func (gdClass ShapeCast2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass ShapeCast2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[0], &enabled) }
func (gdClass ShapeCast2D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[1]) }
func (gdClass ShapeCast2D) SetShape(shape Shape2D)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[2], &shape) }
func (gdClass ShapeCast2D) GetShape() Shape2D { return methodCall[Shape2D](gdClass.obj.get(), methodShapeCast2D[3]) }
func (gdClass ShapeCast2D) SetTargetPosition(local_point Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[4], &local_point) }
func (gdClass ShapeCast2D) GetTargetPosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodShapeCast2D[5]) }
func (gdClass ShapeCast2D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[6], &margin) }
func (gdClass ShapeCast2D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast2D[7]) }
func (gdClass ShapeCast2D) SetMaxResults(max_results int64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[8], &max_results) }
func (gdClass ShapeCast2D) GetMaxResults() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast2D[9]) }
func (gdClass ShapeCast2D) IsColliding() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[10]) }
func (gdClass ShapeCast2D) GetCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast2D[11]) }
func (gdClass ShapeCast2D) ForceShapecastUpdate()  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[12]) }
func (gdClass ShapeCast2D) GetCollider(index int64) Object { return methodCall[Object](gdClass.obj.get(), methodShapeCast2D[13], &index) }
func (gdClass ShapeCast2D) GetColliderShape(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast2D[14], &index) }
func (gdClass ShapeCast2D) GetCollisionPoint(index int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodShapeCast2D[15], &index) }
func (gdClass ShapeCast2D) GetCollisionNormal(index int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodShapeCast2D[16], &index) }
func (gdClass ShapeCast2D) GetClosestCollisionSafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast2D[17]) }
func (gdClass ShapeCast2D) GetClosestCollisionUnsafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast2D[18]) }
func (gdClass ShapeCast2D) AddExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[19], &rid) }
func (gdClass ShapeCast2D) AddException(node CollisionObject2D)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[20], &node) }
func (gdClass ShapeCast2D) RemoveExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[21], &rid) }
func (gdClass ShapeCast2D) RemoveException(node CollisionObject2D)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[22], &node) }
func (gdClass ShapeCast2D) ClearExceptions()  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[23]) }
func (gdClass ShapeCast2D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[24], &mask) }
func (gdClass ShapeCast2D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast2D[25]) }
func (gdClass ShapeCast2D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[26], &layer_number, &value) }
func (gdClass ShapeCast2D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[27], &layer_number) }
func (gdClass ShapeCast2D) SetExcludeParentBody(mask bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[28], &mask) }
func (gdClass ShapeCast2D) GetExcludeParentBody() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[29]) }
func (gdClass ShapeCast2D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[30], &enable) }
func (gdClass ShapeCast2D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[31]) }
func (gdClass ShapeCast2D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast2D[32], &enable) }
func (gdClass ShapeCast2D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast2D[33]) }

type ShapeCast3D struct{self *ShapeCast3D; obj safeObject }
func NewShapeCast3D(ctx Context, at *ShapeCast3D) ShapeCast3D { if at == nil { at = new(ShapeCast3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass ShapeCast3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ShapeCast3D) owner() cObject { return gdClass.obj.get() }
func (ShapeCast3D) class() string { return "ShapeCast3D\000" }

func (gdClass ShapeCast3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodShapeCast3D [37]cMethodBind
func (gdClass ShapeCast3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass ShapeCast3D) ResourceChanged(resource Resource)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[0], &resource) }
func (gdClass ShapeCast3D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[1], &enabled) }
func (gdClass ShapeCast3D) IsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[2]) }
func (gdClass ShapeCast3D) SetShape(shape Shape3D)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[3], &shape) }
func (gdClass ShapeCast3D) GetShape() Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodShapeCast3D[4]) }
func (gdClass ShapeCast3D) SetTargetPosition(local_point Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[5], &local_point) }
func (gdClass ShapeCast3D) GetTargetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodShapeCast3D[6]) }
func (gdClass ShapeCast3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[7], &margin) }
func (gdClass ShapeCast3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast3D[8]) }
func (gdClass ShapeCast3D) SetMaxResults(max_results int64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[9], &max_results) }
func (gdClass ShapeCast3D) GetMaxResults() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast3D[10]) }
func (gdClass ShapeCast3D) IsColliding() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[11]) }
func (gdClass ShapeCast3D) GetCollisionCount() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast3D[12]) }
func (gdClass ShapeCast3D) ForceShapecastUpdate()  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[13]) }
func (gdClass ShapeCast3D) GetCollider(index int64) Object { return methodCall[Object](gdClass.obj.get(), methodShapeCast3D[14], &index) }
func (gdClass ShapeCast3D) GetColliderShape(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast3D[15], &index) }
func (gdClass ShapeCast3D) GetCollisionPoint(index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodShapeCast3D[16], &index) }
func (gdClass ShapeCast3D) GetCollisionNormal(index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodShapeCast3D[17], &index) }
func (gdClass ShapeCast3D) GetClosestCollisionSafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast3D[18]) }
func (gdClass ShapeCast3D) GetClosestCollisionUnsafeFraction() float64 { return methodCall[float64](gdClass.obj.get(), methodShapeCast3D[19]) }
func (gdClass ShapeCast3D) AddExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[20], &rid) }
func (gdClass ShapeCast3D) AddException(node Object)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[21], &node) }
func (gdClass ShapeCast3D) RemoveExceptionRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[22], &rid) }
func (gdClass ShapeCast3D) RemoveException(node Object)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[23], &node) }
func (gdClass ShapeCast3D) ClearExceptions()  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[24]) }
func (gdClass ShapeCast3D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[25], &mask) }
func (gdClass ShapeCast3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodShapeCast3D[26]) }
func (gdClass ShapeCast3D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[27], &layer_number, &value) }
func (gdClass ShapeCast3D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[28], &layer_number) }
func (gdClass ShapeCast3D) SetExcludeParentBody(mask bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[29], &mask) }
func (gdClass ShapeCast3D) GetExcludeParentBody() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[30]) }
func (gdClass ShapeCast3D) SetCollideWithAreas(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[31], &enable) }
func (gdClass ShapeCast3D) IsCollideWithAreasEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[32]) }
func (gdClass ShapeCast3D) SetCollideWithBodies(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[33], &enable) }
func (gdClass ShapeCast3D) IsCollideWithBodiesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodShapeCast3D[34]) }
func (gdClass ShapeCast3D) SetDebugShapeCustomColor(debug_shape_custom_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodShapeCast3D[35], &debug_shape_custom_color) }
func (gdClass ShapeCast3D) GetDebugShapeCustomColor() Color { return methodCall[Color](gdClass.obj.get(), methodShapeCast3D[36]) }

type Shortcut struct{self *Shortcut; obj safeObject }
func NewShortcut(ctx Context, at *Shortcut) Shortcut { if at == nil { at = new(Shortcut) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Shortcut) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Shortcut) owner() cObject { return gdClass.obj.get() }
func (Shortcut) class() string { return "Shortcut\000" }

func (gdClass Shortcut) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodShortcut [5]cMethodBind
func (gdClass Shortcut) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Shortcut) SetEvents(events Array)  { methodCall[struct{}](gdClass.obj.get(), methodShortcut[0], &events) }
func (gdClass Shortcut) GetEvents() Array { return methodCall[Array](gdClass.obj.get(), methodShortcut[1]) }
func (gdClass Shortcut) HasValidEvent() bool { return methodCall[bool](gdClass.obj.get(), methodShortcut[2]) }
func (gdClass Shortcut) MatchesEvent(event InputEvent) bool { return methodCall[bool](gdClass.obj.get(), methodShortcut[3], &event) }
func (gdClass Shortcut) GetAsText() string { return methodCall[string](gdClass.obj.get(), methodShortcut[4]) }

type Skeleton2D struct{self *Skeleton2D; obj safeObject }
func NewSkeleton2D(ctx Context, at *Skeleton2D) Skeleton2D { if at == nil { at = new(Skeleton2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Skeleton2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Skeleton2D) owner() cObject { return gdClass.obj.get() }
func (Skeleton2D) class() string { return "Skeleton2D\000" }

func (gdClass Skeleton2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodSkeleton2D [8]cMethodBind
func (gdClass Skeleton2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Skeleton2D) GetBoneCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeleton2D[0]) }
func (gdClass Skeleton2D) GetBone(idx int64) Bone2D { return methodCall[Bone2D](gdClass.obj.get(), methodSkeleton2D[1], &idx) }
func (gdClass Skeleton2D) GetSkeleton() RID { return methodCall[RID](gdClass.obj.get(), methodSkeleton2D[2]) }
func (gdClass Skeleton2D) SetModificationStack(modification_stack SkeletonModificationStack2D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton2D[3], &modification_stack) }
func (gdClass Skeleton2D) GetModificationStack() SkeletonModificationStack2D { return methodCall[SkeletonModificationStack2D](gdClass.obj.get(), methodSkeleton2D[4]) }
func (gdClass Skeleton2D) ExecuteModifications(delta float64, execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton2D[5], &delta, &execution_mode) }
func (gdClass Skeleton2D) SetBoneLocalPoseOverride(bone_idx int64, override_pose Transform2D, strength float64, persistent bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton2D[6], &bone_idx, &override_pose, &strength, &persistent) }
func (gdClass Skeleton2D) GetBoneLocalPoseOverride(bone_idx int64) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodSkeleton2D[7], &bone_idx) }

type Skeleton3D struct{self *Skeleton3D; obj safeObject }
func NewSkeleton3D(ctx Context, at *Skeleton3D) Skeleton3D { if at == nil { at = new(Skeleton3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Skeleton3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Skeleton3D) owner() cObject { return gdClass.obj.get() }
func (Skeleton3D) class() string { return "Skeleton3D\000" }

func (gdClass Skeleton3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodSkeleton3D [56]cMethodBind
func (gdClass Skeleton3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass Skeleton3D) AddBone(name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[0], &name) }
func (gdClass Skeleton3D) FindBone(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeleton3D[1], &name) }
func (gdClass Skeleton3D) GetBoneName(bone_idx int64) string { return methodCall[string](gdClass.obj.get(), methodSkeleton3D[2], &bone_idx) }
func (gdClass Skeleton3D) SetBoneName(bone_idx int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[3], &bone_idx, &name) }
func (gdClass Skeleton3D) GetBoneParent(bone_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeleton3D[4], &bone_idx) }
func (gdClass Skeleton3D) SetBoneParent(bone_idx int64, parent_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[5], &bone_idx, &parent_idx) }
func (gdClass Skeleton3D) GetBoneCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeleton3D[6]) }
func (gdClass Skeleton3D) UnparentBoneAndRest(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[7], &bone_idx) }
func (gdClass Skeleton3D) GetBoneChildren(bone_idx int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodSkeleton3D[8], &bone_idx) }
func (gdClass Skeleton3D) GetParentlessBones() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodSkeleton3D[9]) }
func (gdClass Skeleton3D) GetBoneRest(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[10], &bone_idx) }
func (gdClass Skeleton3D) SetBoneRest(bone_idx int64, rest Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[11], &bone_idx, &rest) }
func (gdClass Skeleton3D) GetBoneGlobalRest(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[12], &bone_idx) }
func (gdClass Skeleton3D) CreateSkinFromRestTransforms() Skin { return methodCall[Skin](gdClass.obj.get(), methodSkeleton3D[13]) }
func (gdClass Skeleton3D) RegisterSkin(skin Skin) SkinReference { return methodCall[SkinReference](gdClass.obj.get(), methodSkeleton3D[14], &skin) }
func (gdClass Skeleton3D) LocalizeRests()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[15]) }
func (gdClass Skeleton3D) ClearBones()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[16]) }
func (gdClass Skeleton3D) GetBonePose(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[17], &bone_idx) }
func (gdClass Skeleton3D) SetBonePosePosition(bone_idx int64, position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[18], &bone_idx, &position) }
func (gdClass Skeleton3D) SetBonePoseRotation(bone_idx int64, rotation Quaternion)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[19], &bone_idx, &rotation) }
func (gdClass Skeleton3D) SetBonePoseScale(bone_idx int64, scale Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[20], &bone_idx, &scale) }
func (gdClass Skeleton3D) GetBonePosePosition(bone_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeleton3D[21], &bone_idx) }
func (gdClass Skeleton3D) GetBonePoseRotation(bone_idx int64) Quaternion { return methodCall[Quaternion](gdClass.obj.get(), methodSkeleton3D[22], &bone_idx) }
func (gdClass Skeleton3D) GetBonePoseScale(bone_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeleton3D[23], &bone_idx) }
func (gdClass Skeleton3D) ResetBonePose(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[24], &bone_idx) }
func (gdClass Skeleton3D) ResetBonePoses()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[25]) }
func (gdClass Skeleton3D) IsBoneEnabled(bone_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeleton3D[26], &bone_idx) }
func (gdClass Skeleton3D) SetBoneEnabled(bone_idx int64, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[27], &bone_idx, &enabled) }
func (gdClass Skeleton3D) ClearBonesGlobalPoseOverride()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[28]) }
func (gdClass Skeleton3D) SetBoneGlobalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[29], &bone_idx, &pose, &amount, &persistent) }
func (gdClass Skeleton3D) GetBoneGlobalPoseOverride(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[30], &bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPose(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[31], &bone_idx) }
func (gdClass Skeleton3D) GetBoneGlobalPoseNoOverride(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[32], &bone_idx) }
func (gdClass Skeleton3D) ClearBonesLocalPoseOverride()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[33]) }
func (gdClass Skeleton3D) SetBoneLocalPoseOverride(bone_idx int64, pose Transform3D, amount float64, persistent bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[34], &bone_idx, &pose, &amount, &persistent) }
func (gdClass Skeleton3D) GetBoneLocalPoseOverride(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[35], &bone_idx) }
func (gdClass Skeleton3D) ForceUpdateAllBoneTransforms()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[36]) }
func (gdClass Skeleton3D) ForceUpdateBoneChildTransform(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[37], &bone_idx) }
func (gdClass Skeleton3D) SetMotionScale(motion_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[38], &motion_scale) }
func (gdClass Skeleton3D) GetMotionScale() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeleton3D[39]) }
func (gdClass Skeleton3D) GlobalPoseToWorldTransform(global_pose Transform3D) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[40], &global_pose) }
func (gdClass Skeleton3D) WorldTransformToGlobalPose(world_transform Transform3D) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[41], &world_transform) }
func (gdClass Skeleton3D) GlobalPoseToLocalPose(bone_idx int64, global_pose Transform3D) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[42], &bone_idx, &global_pose) }
func (gdClass Skeleton3D) LocalPoseToGlobalPose(bone_idx int64, local_pose Transform3D) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeleton3D[43], &bone_idx, &local_pose) }
func (gdClass Skeleton3D) GlobalPoseZForwardToBoneForward(bone_idx int64, basis Basis) Basis { return methodCall[Basis](gdClass.obj.get(), methodSkeleton3D[44], &bone_idx, &basis) }
func (gdClass Skeleton3D) SetShowRestOnly(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[45], &enabled) }
func (gdClass Skeleton3D) IsShowRestOnly() bool { return methodCall[bool](gdClass.obj.get(), methodSkeleton3D[46]) }
func (gdClass Skeleton3D) SetAnimatePhysicalBones(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[47], &enabled) }
func (gdClass Skeleton3D) GetAnimatePhysicalBones() bool { return methodCall[bool](gdClass.obj.get(), methodSkeleton3D[48]) }
func (gdClass Skeleton3D) PhysicalBonesStopSimulation()  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[49]) }
func (gdClass Skeleton3D) PhysicalBonesStartSimulation(bones Array)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[50], &bones) }
func (gdClass Skeleton3D) PhysicalBonesAddCollisionException(exception RID)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[51], &exception) }
func (gdClass Skeleton3D) PhysicalBonesRemoveCollisionException(exception RID)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[52], &exception) }
func (gdClass Skeleton3D) SetModificationStack(modification_stack SkeletonModificationStack3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[53], &modification_stack) }
func (gdClass Skeleton3D) GetModificationStack() SkeletonModificationStack3D { return methodCall[SkeletonModificationStack3D](gdClass.obj.get(), methodSkeleton3D[54]) }
func (gdClass Skeleton3D) ExecuteModifications(delta float64, execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeleton3D[55], &delta, &execution_mode) }

type SkeletonIK3D struct{self *SkeletonIK3D; obj safeObject }
func NewSkeletonIK3D(ctx Context, at *SkeletonIK3D) SkeletonIK3D { if at == nil { at = new(SkeletonIK3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SkeletonIK3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonIK3D) owner() cObject { return gdClass.obj.get() }
func (SkeletonIK3D) class() string { return "SkeletonIK3D\000" }

func (gdClass SkeletonIK3D) Node() Node { return Node{obj:gdClass.obj} }

var methodSkeletonIK3D [24]cMethodBind
func (gdClass SkeletonIK3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass SkeletonIK3D) SetRootBone(root_bone Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[0], &root_bone) }
func (gdClass SkeletonIK3D) GetRootBone() Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonIK3D[1]) }
func (gdClass SkeletonIK3D) SetTipBone(tip_bone Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[2], &tip_bone) }
func (gdClass SkeletonIK3D) GetTipBone() Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonIK3D[3]) }
func (gdClass SkeletonIK3D) SetInterpolation(interpolation float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[4], &interpolation) }
func (gdClass SkeletonIK3D) GetInterpolation() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonIK3D[5]) }
func (gdClass SkeletonIK3D) SetTargetTransform(target Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[6], &target) }
func (gdClass SkeletonIK3D) GetTargetTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeletonIK3D[7]) }
func (gdClass SkeletonIK3D) SetTargetNode(node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[8], &node) }
func (gdClass SkeletonIK3D) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonIK3D[9]) }
func (gdClass SkeletonIK3D) SetOverrideTipBasis(override bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[10], &override) }
func (gdClass SkeletonIK3D) IsOverrideTipBasis() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonIK3D[11]) }
func (gdClass SkeletonIK3D) SetUseMagnet(use bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[12], &use) }
func (gdClass SkeletonIK3D) IsUsingMagnet() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonIK3D[13]) }
func (gdClass SkeletonIK3D) SetMagnetPosition(local_position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[14], &local_position) }
func (gdClass SkeletonIK3D) GetMagnetPosition() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeletonIK3D[15]) }
func (gdClass SkeletonIK3D) GetParentSkeleton() Skeleton3D { return methodCall[Skeleton3D](gdClass.obj.get(), methodSkeletonIK3D[16]) }
func (gdClass SkeletonIK3D) IsRunning() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonIK3D[17]) }
func (gdClass SkeletonIK3D) SetMinDistance(min_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[18], &min_distance) }
func (gdClass SkeletonIK3D) GetMinDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonIK3D[19]) }
func (gdClass SkeletonIK3D) SetMaxIterations(iterations int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[20], &iterations) }
func (gdClass SkeletonIK3D) GetMaxIterations() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonIK3D[21]) }
func (gdClass SkeletonIK3D) Start(one_time bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[22], &one_time) }
func (gdClass SkeletonIK3D) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonIK3D[23]) }

type SkeletonModification2D struct{self *SkeletonModification2D; obj safeObject }
func NewSkeletonModification2D(ctx Context, at *SkeletonModification2D) SkeletonModification2D { if at == nil { at = new(SkeletonModification2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2D) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2D) class() string { return "SkeletonModification2D\000" }

func (gdClass SkeletonModification2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkeletonModification2D [10]cMethodBind
func (gdClass SkeletonModification2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_execute":
		if rtype.Implements(reflect.TypeOf([0]interface{ Execute(delta float64)  }{}).Elem()) {
			return rtype.MethodByName(`Execute`)
		}
		return
	case "_setup_modification":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetupModification(modification_stack SkeletonModificationStack2D)  }{}).Elem()) {
			return rtype.MethodByName(`SetupModification`)
		}
		return
	case "_draw_editor_gizmo":
		if rtype.Implements(reflect.TypeOf([0]interface{ DrawEditorGizmo()  }{}).Elem()) {
			return rtype.MethodByName(`DrawEditorGizmo`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SkeletonModification2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2D[0], &enabled) }
func (gdClass SkeletonModification2D) GetEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2D[1]) }
func (gdClass SkeletonModification2D) GetModificationStack() SkeletonModificationStack2D { return methodCall[SkeletonModificationStack2D](gdClass.obj.get(), methodSkeletonModification2D[2]) }
func (gdClass SkeletonModification2D) SetIsSetup(is_setup bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2D[3], &is_setup) }
func (gdClass SkeletonModification2D) GetIsSetup() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2D[4]) }
func (gdClass SkeletonModification2D) SetExecutionMode(execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2D[5], &execution_mode) }
func (gdClass SkeletonModification2D) GetExecutionMode() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2D[6]) }
func (gdClass SkeletonModification2D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2D[7], &angle, &min, &max, &invert) }
func (gdClass SkeletonModification2D) SetEditorDrawGizmo(draw_gizmo bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2D[8], &draw_gizmo) }
func (gdClass SkeletonModification2D) GetEditorDrawGizmo() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2D[9]) }

type SkeletonModification2DCCDIK struct{self *SkeletonModification2DCCDIK; obj safeObject }
func NewSkeletonModification2DCCDIK(ctx Context, at *SkeletonModification2DCCDIK) SkeletonModification2DCCDIK { if at == nil { at = new(SkeletonModification2DCCDIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DCCDIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DCCDIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DCCDIK) class() string { return "SkeletonModification2DCCDIK\000" }

func (gdClass SkeletonModification2DCCDIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DCCDIK [20]cMethodBind
func (gdClass SkeletonModification2DCCDIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DCCDIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[0], &target_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DCCDIK[1]) }
func (gdClass SkeletonModification2DCCDIK) SetTipNode(tip_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[2], &tip_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetTipNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DCCDIK[3]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[4], &length) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DCCDIK[5]) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[6], &joint_idx, &bone2d_nodepath) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBone2dNode(joint_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DCCDIK[7], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[8], &joint_idx, &bone_idx) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DCCDIK[9], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointRotateFromJoint(joint_idx int64, rotate_from_joint bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[10], &joint_idx, &rotate_from_joint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointRotateFromJoint(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DCCDIK[11], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointEnableConstraint(joint_idx int64, enable_constraint bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[12], &joint_idx, &enable_constraint) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointEnableConstraint(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DCCDIK[13], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, angle_min float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[14], &joint_idx, &angle_min) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DCCDIK[15], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, angle_max float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[16], &joint_idx, &angle_max) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DCCDIK[17], &joint_idx) }
func (gdClass SkeletonModification2DCCDIK) SetCcdikJointConstraintAngleInvert(joint_idx int64, invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DCCDIK[18], &joint_idx, &invert) }
func (gdClass SkeletonModification2DCCDIK) GetCcdikJointConstraintAngleInvert(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DCCDIK[19], &joint_idx) }

type SkeletonModification2DFABRIK struct{self *SkeletonModification2DFABRIK; obj safeObject }
func NewSkeletonModification2DFABRIK(ctx Context, at *SkeletonModification2DFABRIK) SkeletonModification2DFABRIK { if at == nil { at = new(SkeletonModification2DFABRIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DFABRIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DFABRIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DFABRIK) class() string { return "SkeletonModification2DFABRIK\000" }

func (gdClass SkeletonModification2DFABRIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DFABRIK [12]cMethodBind
func (gdClass SkeletonModification2DFABRIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DFABRIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[0], &target_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DFABRIK[1]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[2], &length) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DFABRIK[3]) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBone2dNode(joint_idx int64, bone2d_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[4], &joint_idx, &bone2d_nodepath) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBone2dNode(joint_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DFABRIK[5], &joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[6], &joint_idx, &bone_idx) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DFABRIK[7], &joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointMagnetPosition(joint_idx int64, magnet_position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[8], &joint_idx, &magnet_position) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointMagnetPosition(joint_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSkeletonModification2DFABRIK[9], &joint_idx) }
func (gdClass SkeletonModification2DFABRIK) SetFabrikJointUseTargetRotation(joint_idx int64, use_target_rotation bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DFABRIK[10], &joint_idx, &use_target_rotation) }
func (gdClass SkeletonModification2DFABRIK) GetFabrikJointUseTargetRotation(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DFABRIK[11], &joint_idx) }

type SkeletonModification2DJiggle struct{self *SkeletonModification2DJiggle; obj safeObject }
func NewSkeletonModification2DJiggle(ctx Context, at *SkeletonModification2DJiggle) SkeletonModification2DJiggle { if at == nil { at = new(SkeletonModification2DJiggle) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DJiggle) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DJiggle) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DJiggle) class() string { return "SkeletonModification2DJiggle\000" }

func (gdClass SkeletonModification2DJiggle) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DJiggle [34]cMethodBind
func (gdClass SkeletonModification2DJiggle) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DJiggle) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[0], &target_nodepath) }
func (gdClass SkeletonModification2DJiggle) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DJiggle[1]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[2], &length) }
func (gdClass SkeletonModification2DJiggle) GetJiggleDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DJiggle[3]) }
func (gdClass SkeletonModification2DJiggle) SetStiffness(stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[4], &stiffness) }
func (gdClass SkeletonModification2DJiggle) GetStiffness() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[5]) }
func (gdClass SkeletonModification2DJiggle) SetMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[6], &mass) }
func (gdClass SkeletonModification2DJiggle) GetMass() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[7]) }
func (gdClass SkeletonModification2DJiggle) SetDamping(damping float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[8], &damping) }
func (gdClass SkeletonModification2DJiggle) GetDamping() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[9]) }
func (gdClass SkeletonModification2DJiggle) SetUseGravity(use_gravity bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[10], &use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetUseGravity() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DJiggle[11]) }
func (gdClass SkeletonModification2DJiggle) SetGravity(gravity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[12], &gravity) }
func (gdClass SkeletonModification2DJiggle) GetGravity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSkeletonModification2DJiggle[13]) }
func (gdClass SkeletonModification2DJiggle) SetUseColliders(use_colliders bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[14], &use_colliders) }
func (gdClass SkeletonModification2DJiggle) GetUseColliders() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DJiggle[15]) }
func (gdClass SkeletonModification2DJiggle) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[16], &collision_mask) }
func (gdClass SkeletonModification2DJiggle) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DJiggle[17]) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBone2dNode(joint_idx int64, bone2d_node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[18], &joint_idx, &bone2d_node) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBone2dNode(joint_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DJiggle[19], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[20], &joint_idx, &bone_idx) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DJiggle[21], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[22], &joint_idx, &override) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DJiggle[23], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[24], &joint_idx, &stiffness) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[25], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[26], &joint_idx, &mass) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[27], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[28], &joint_idx, &damping) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DJiggle[29], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[30], &joint_idx, &use_gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DJiggle[31], &joint_idx) }
func (gdClass SkeletonModification2DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DJiggle[32], &joint_idx, &gravity) }
func (gdClass SkeletonModification2DJiggle) GetJiggleJointGravity(joint_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSkeletonModification2DJiggle[33], &joint_idx) }

type SkeletonModification2DLookAt struct{self *SkeletonModification2DLookAt; obj safeObject }
func NewSkeletonModification2DLookAt(ctx Context, at *SkeletonModification2DLookAt) SkeletonModification2DLookAt { if at == nil { at = new(SkeletonModification2DLookAt) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DLookAt) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DLookAt) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DLookAt) class() string { return "SkeletonModification2DLookAt\000" }

func (gdClass SkeletonModification2DLookAt) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DLookAt [16]cMethodBind
func (gdClass SkeletonModification2DLookAt) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DLookAt) SetBone2dNode(bone2d_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[0], &bone2d_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetBone2dNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DLookAt[1]) }
func (gdClass SkeletonModification2DLookAt) SetBoneIndex(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[2], &bone_idx) }
func (gdClass SkeletonModification2DLookAt) GetBoneIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DLookAt[3]) }
func (gdClass SkeletonModification2DLookAt) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[4], &target_nodepath) }
func (gdClass SkeletonModification2DLookAt) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DLookAt[5]) }
func (gdClass SkeletonModification2DLookAt) SetAdditionalRotation(rotation float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[6], &rotation) }
func (gdClass SkeletonModification2DLookAt) GetAdditionalRotation() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DLookAt[7]) }
func (gdClass SkeletonModification2DLookAt) SetEnableConstraint(enable_constraint bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[8], &enable_constraint) }
func (gdClass SkeletonModification2DLookAt) GetEnableConstraint() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DLookAt[9]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMin(angle_min float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[10], &angle_min) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMin() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DLookAt[11]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleMax(angle_max float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[12], &angle_max) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleMax() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DLookAt[13]) }
func (gdClass SkeletonModification2DLookAt) SetConstraintAngleInvert(invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DLookAt[14], &invert) }
func (gdClass SkeletonModification2DLookAt) GetConstraintAngleInvert() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DLookAt[15]) }

type SkeletonModification2DPhysicalBones struct{self *SkeletonModification2DPhysicalBones; obj safeObject }
func NewSkeletonModification2DPhysicalBones(ctx Context, at *SkeletonModification2DPhysicalBones) SkeletonModification2DPhysicalBones { if at == nil { at = new(SkeletonModification2DPhysicalBones) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DPhysicalBones) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DPhysicalBones) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DPhysicalBones) class() string { return "SkeletonModification2DPhysicalBones\000" }

func (gdClass SkeletonModification2DPhysicalBones) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DPhysicalBones [7]cMethodBind
func (gdClass SkeletonModification2DPhysicalBones) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[0], &length) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[1]) }
func (gdClass SkeletonModification2DPhysicalBones) SetPhysicalBoneNode(joint_idx int64, physicalbone2d_node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[2], &joint_idx, &physicalbone2d_node) }
func (gdClass SkeletonModification2DPhysicalBones) GetPhysicalBoneNode(joint_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[3], &joint_idx) }
func (gdClass SkeletonModification2DPhysicalBones) FetchPhysicalBones()  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[4]) }
func (gdClass SkeletonModification2DPhysicalBones) StartSimulation(bones Array)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[5], &bones) }
func (gdClass SkeletonModification2DPhysicalBones) StopSimulation(bones Array)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DPhysicalBones[6], &bones) }

type SkeletonModification2DStackHolder struct{self *SkeletonModification2DStackHolder; obj safeObject }
func NewSkeletonModification2DStackHolder(ctx Context, at *SkeletonModification2DStackHolder) SkeletonModification2DStackHolder { if at == nil { at = new(SkeletonModification2DStackHolder) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DStackHolder) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DStackHolder) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DStackHolder) class() string { return "SkeletonModification2DStackHolder\000" }

func (gdClass SkeletonModification2DStackHolder) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DStackHolder [2]cMethodBind
func (gdClass SkeletonModification2DStackHolder) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack2D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DStackHolder[0], &held_modification_stack) }
func (gdClass SkeletonModification2DStackHolder) GetHeldModificationStack() SkeletonModificationStack2D { return methodCall[SkeletonModificationStack2D](gdClass.obj.get(), methodSkeletonModification2DStackHolder[1]) }

type SkeletonModification2DTwoBoneIK struct{self *SkeletonModification2DTwoBoneIK; obj safeObject }
func NewSkeletonModification2DTwoBoneIK(ctx Context, at *SkeletonModification2DTwoBoneIK) SkeletonModification2DTwoBoneIK { if at == nil { at = new(SkeletonModification2DTwoBoneIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification2DTwoBoneIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification2DTwoBoneIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification2DTwoBoneIK) class() string { return "SkeletonModification2DTwoBoneIK\000" }

func (gdClass SkeletonModification2DTwoBoneIK) SkeletonModification2D() SkeletonModification2D { return SkeletonModification2D{obj:gdClass.obj} }

var methodSkeletonModification2DTwoBoneIK [16]cMethodBind
func (gdClass SkeletonModification2DTwoBoneIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification2D().virtual(rtype, name)
}
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[0], &target_nodepath) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[1]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMinimumDistance(minimum_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[2], &minimum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMinimumDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[3]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetTargetMaximumDistance(maximum_distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[4], &maximum_distance) }
func (gdClass SkeletonModification2DTwoBoneIK) GetTargetMaximumDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[5]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetFlipBendDirection(flip_direction bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[6], &flip_direction) }
func (gdClass SkeletonModification2DTwoBoneIK) GetFlipBendDirection() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[7]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBone2dNode(bone2d_node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[8], &bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBone2dNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[9]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[10], &bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointOneBoneIdx() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[11]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBone2dNode(bone2d_node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[12], &bone2d_node) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBone2dNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[13]) }
func (gdClass SkeletonModification2DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[14], &bone_idx) }
func (gdClass SkeletonModification2DTwoBoneIK) GetJointTwoBoneIdx() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification2DTwoBoneIK[15]) }

type SkeletonModification3D struct{self *SkeletonModification3D; obj safeObject }
func NewSkeletonModification3D(ctx Context, at *SkeletonModification3D) SkeletonModification3D { if at == nil { at = new(SkeletonModification3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3D) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3D) class() string { return "SkeletonModification3D\000" }

func (gdClass SkeletonModification3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkeletonModification3D [8]cMethodBind
func (gdClass SkeletonModification3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_execute":
		if rtype.Implements(reflect.TypeOf([0]interface{ Execute(delta float64)  }{}).Elem()) {
			return rtype.MethodByName(`Execute`)
		}
		return
	case "_setup_modification":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetupModification(modification_stack SkeletonModificationStack3D)  }{}).Elem()) {
			return rtype.MethodByName(`SetupModification`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SkeletonModification3D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3D[0], &enabled) }
func (gdClass SkeletonModification3D) GetEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3D[1]) }
func (gdClass SkeletonModification3D) GetModificationStack() SkeletonModificationStack3D { return methodCall[SkeletonModificationStack3D](gdClass.obj.get(), methodSkeletonModification3D[2]) }
func (gdClass SkeletonModification3D) SetIsSetup(is_setup bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3D[3], &is_setup) }
func (gdClass SkeletonModification3D) GetIsSetup() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3D[4]) }
func (gdClass SkeletonModification3D) SetExecutionMode(execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3D[5], &execution_mode) }
func (gdClass SkeletonModification3D) GetExecutionMode() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3D[6]) }
func (gdClass SkeletonModification3D) ClampAngle(angle float64, min float64, max float64, invert bool) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3D[7], &angle, &min, &max, &invert) }

type SkeletonModification3DCCDIK struct{self *SkeletonModification3DCCDIK; obj safeObject }
func NewSkeletonModification3DCCDIK(ctx Context, at *SkeletonModification3DCCDIK) SkeletonModification3DCCDIK { if at == nil { at = new(SkeletonModification3DCCDIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DCCDIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DCCDIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DCCDIK) class() string { return "SkeletonModification3DCCDIK\000" }

func (gdClass SkeletonModification3DCCDIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DCCDIK [22]cMethodBind
func (gdClass SkeletonModification3DCCDIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DCCDIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[0], &target_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DCCDIK[1]) }
func (gdClass SkeletonModification3DCCDIK) SetTipNode(tip_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[2], &tip_nodepath) }
func (gdClass SkeletonModification3DCCDIK) GetTipNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DCCDIK[3]) }
func (gdClass SkeletonModification3DCCDIK) SetUseHighQualitySolve(high_quality_solve bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[4], &high_quality_solve) }
func (gdClass SkeletonModification3DCCDIK) GetUseHighQualitySolve() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DCCDIK[5]) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneName(joint_idx int64) string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DCCDIK[6], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneName(joint_idx int64, bone_name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[7], &joint_idx, &bone_name) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DCCDIK[8], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointBoneIndex(joint_idx int64, bone_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[9], &joint_idx, &bone_index) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointCcdikAxis(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DCCDIK[10], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointCcdikAxis(joint_idx int64, axis int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[11], &joint_idx, &axis) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointEnableJointConstraint(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DCCDIK[12], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointEnableJointConstraint(joint_idx int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[13], &joint_idx, &enable) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMin(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DCCDIK[14], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMin(joint_idx int64, min_angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[15], &joint_idx, &min_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintAngleMax(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DCCDIK[16], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintAngleMax(joint_idx int64, max_angle float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[17], &joint_idx, &max_angle) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikJointConstraintInvert(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DCCDIK[18], &joint_idx) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikJointConstraintInvert(joint_idx int64, invert bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[19], &joint_idx, &invert) }
func (gdClass SkeletonModification3DCCDIK) SetCcdikDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DCCDIK[20], &length) }
func (gdClass SkeletonModification3DCCDIK) GetCcdikDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DCCDIK[21]) }

type SkeletonModification3DFABRIK struct{self *SkeletonModification3DFABRIK; obj safeObject }
func NewSkeletonModification3DFABRIK(ctx Context, at *SkeletonModification3DFABRIK) SkeletonModification3DFABRIK { if at == nil { at = new(SkeletonModification3DFABRIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DFABRIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DFABRIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DFABRIK) class() string { return "SkeletonModification3DFABRIK\000" }

func (gdClass SkeletonModification3DFABRIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DFABRIK [25]cMethodBind
func (gdClass SkeletonModification3DFABRIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DFABRIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[0], &target_nodepath) }
func (gdClass SkeletonModification3DFABRIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DFABRIK[1]) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[2], &length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DFABRIK[3]) }
func (gdClass SkeletonModification3DFABRIK) SetChainTolerance(tolerance float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[4], &tolerance) }
func (gdClass SkeletonModification3DFABRIK) GetChainTolerance() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DFABRIK[5]) }
func (gdClass SkeletonModification3DFABRIK) SetChainMaxIterations(max_iterations int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[6], &max_iterations) }
func (gdClass SkeletonModification3DFABRIK) GetChainMaxIterations() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DFABRIK[7]) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneName(joint_idx int64) string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DFABRIK[8], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneName(joint_idx int64, bone_name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[9], &joint_idx, &bone_name) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DFABRIK[10], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointBoneIndex(joint_idx int64, bone_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[11], &joint_idx, &bone_index) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointLength(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DFABRIK[12], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointLength(joint_idx int64, length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[13], &joint_idx, &length) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointMagnet(joint_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeletonModification3DFABRIK[14], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointMagnet(joint_idx int64, magnet_position Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[15], &joint_idx, &magnet_position) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointAutoCalculateLength(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DFABRIK[16], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointAutoCalculateLength(joint_idx int64, auto_calculate_length bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[17], &joint_idx, &auto_calculate_length) }
func (gdClass SkeletonModification3DFABRIK) FabrikJointAutoCalculateLength(joint_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[18], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTipNode(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DFABRIK[19], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTipNode(joint_idx int64, use_tip_node bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[20], &joint_idx, &use_tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointTipNode(joint_idx int64) NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DFABRIK[21], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointTipNode(joint_idx int64, tip_node NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[22], &joint_idx, &tip_node) }
func (gdClass SkeletonModification3DFABRIK) GetFabrikJointUseTargetBasis(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DFABRIK[23], &joint_idx) }
func (gdClass SkeletonModification3DFABRIK) SetFabrikJointUseTargetBasis(joint_idx int64, use_target_basis bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DFABRIK[24], &joint_idx, &use_target_basis) }

type SkeletonModification3DJiggle struct{self *SkeletonModification3DJiggle; obj safeObject }
func NewSkeletonModification3DJiggle(ctx Context, at *SkeletonModification3DJiggle) SkeletonModification3DJiggle { if at == nil { at = new(SkeletonModification3DJiggle) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DJiggle) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DJiggle) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DJiggle) class() string { return "SkeletonModification3DJiggle\000" }

func (gdClass SkeletonModification3DJiggle) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DJiggle [36]cMethodBind
func (gdClass SkeletonModification3DJiggle) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DJiggle) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[0], &target_nodepath) }
func (gdClass SkeletonModification3DJiggle) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DJiggle[1]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleDataChainLength(length int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[2], &length) }
func (gdClass SkeletonModification3DJiggle) GetJiggleDataChainLength() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DJiggle[3]) }
func (gdClass SkeletonModification3DJiggle) SetStiffness(stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[4], &stiffness) }
func (gdClass SkeletonModification3DJiggle) GetStiffness() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[5]) }
func (gdClass SkeletonModification3DJiggle) SetMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[6], &mass) }
func (gdClass SkeletonModification3DJiggle) GetMass() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[7]) }
func (gdClass SkeletonModification3DJiggle) SetDamping(damping float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[8], &damping) }
func (gdClass SkeletonModification3DJiggle) GetDamping() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[9]) }
func (gdClass SkeletonModification3DJiggle) SetUseGravity(use_gravity bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[10], &use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetUseGravity() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DJiggle[11]) }
func (gdClass SkeletonModification3DJiggle) SetGravity(gravity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[12], &gravity) }
func (gdClass SkeletonModification3DJiggle) GetGravity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeletonModification3DJiggle[13]) }
func (gdClass SkeletonModification3DJiggle) SetUseColliders(use_colliders bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[14], &use_colliders) }
func (gdClass SkeletonModification3DJiggle) GetUseColliders() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DJiggle[15]) }
func (gdClass SkeletonModification3DJiggle) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[16], &mask) }
func (gdClass SkeletonModification3DJiggle) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DJiggle[17]) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneName(joint_idx int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[18], &joint_idx, &name) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneName(joint_idx int64) string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DJiggle[19], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointBoneIndex(joint_idx int64, bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[20], &joint_idx, &bone_idx) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointBoneIndex(joint_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DJiggle[21], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointOverride(joint_idx int64, override bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[22], &joint_idx, &override) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointOverride(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DJiggle[23], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointStiffness(joint_idx int64, stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[24], &joint_idx, &stiffness) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointStiffness(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[25], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointMass(joint_idx int64, mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[26], &joint_idx, &mass) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointMass(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[27], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointDamping(joint_idx int64, damping float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[28], &joint_idx, &damping) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointDamping(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[29], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointUseGravity(joint_idx int64, use_gravity bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[30], &joint_idx, &use_gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointUseGravity(joint_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DJiggle[31], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointGravity(joint_idx int64, gravity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[32], &joint_idx, &gravity) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointGravity(joint_idx int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeletonModification3DJiggle[33], &joint_idx) }
func (gdClass SkeletonModification3DJiggle) SetJiggleJointRoll(joint_idx int64, roll float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DJiggle[34], &joint_idx, &roll) }
func (gdClass SkeletonModification3DJiggle) GetJiggleJointRoll(joint_idx int64) float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DJiggle[35], &joint_idx) }

type SkeletonModification3DLookAt struct{self *SkeletonModification3DLookAt; obj safeObject }
func NewSkeletonModification3DLookAt(ctx Context, at *SkeletonModification3DLookAt) SkeletonModification3DLookAt { if at == nil { at = new(SkeletonModification3DLookAt) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DLookAt) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DLookAt) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DLookAt) class() string { return "SkeletonModification3DLookAt\000" }

func (gdClass SkeletonModification3DLookAt) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DLookAt [12]cMethodBind
func (gdClass SkeletonModification3DLookAt) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DLookAt) SetBoneName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[0], &name) }
func (gdClass SkeletonModification3DLookAt) GetBoneName() string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DLookAt[1]) }
func (gdClass SkeletonModification3DLookAt) SetBoneIndex(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[2], &bone_idx) }
func (gdClass SkeletonModification3DLookAt) GetBoneIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DLookAt[3]) }
func (gdClass SkeletonModification3DLookAt) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[4], &target_nodepath) }
func (gdClass SkeletonModification3DLookAt) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DLookAt[5]) }
func (gdClass SkeletonModification3DLookAt) SetAdditionalRotation(additional_rotation Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[6], &additional_rotation) }
func (gdClass SkeletonModification3DLookAt) GetAdditionalRotation() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSkeletonModification3DLookAt[7]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationToPlane(lock_to_plane bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[8], &lock_to_plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationToPlane() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DLookAt[9]) }
func (gdClass SkeletonModification3DLookAt) SetLockRotationPlane(plane int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DLookAt[10], &plane) }
func (gdClass SkeletonModification3DLookAt) GetLockRotationPlane() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DLookAt[11]) }

type SkeletonModification3DStackHolder struct{self *SkeletonModification3DStackHolder; obj safeObject }
func NewSkeletonModification3DStackHolder(ctx Context, at *SkeletonModification3DStackHolder) SkeletonModification3DStackHolder { if at == nil { at = new(SkeletonModification3DStackHolder) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DStackHolder) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DStackHolder) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DStackHolder) class() string { return "SkeletonModification3DStackHolder\000" }

func (gdClass SkeletonModification3DStackHolder) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DStackHolder [2]cMethodBind
func (gdClass SkeletonModification3DStackHolder) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DStackHolder) SetHeldModificationStack(held_modification_stack SkeletonModificationStack3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DStackHolder[0], &held_modification_stack) }
func (gdClass SkeletonModification3DStackHolder) GetHeldModificationStack() SkeletonModificationStack3D { return methodCall[SkeletonModificationStack3D](gdClass.obj.get(), methodSkeletonModification3DStackHolder[1]) }

type SkeletonModification3DTwoBoneIK struct{self *SkeletonModification3DTwoBoneIK; obj safeObject }
func NewSkeletonModification3DTwoBoneIK(ctx Context, at *SkeletonModification3DTwoBoneIK) SkeletonModification3DTwoBoneIK { if at == nil { at = new(SkeletonModification3DTwoBoneIK) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModification3DTwoBoneIK) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModification3DTwoBoneIK) owner() cObject { return gdClass.obj.get() }
func (SkeletonModification3DTwoBoneIK) class() string { return "SkeletonModification3DTwoBoneIK\000" }

func (gdClass SkeletonModification3DTwoBoneIK) SkeletonModification3D() SkeletonModification3D { return SkeletonModification3D{obj:gdClass.obj} }

var methodSkeletonModification3DTwoBoneIK [28]cMethodBind
func (gdClass SkeletonModification3DTwoBoneIK) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonModification3D().virtual(rtype, name)
}
func (gdClass SkeletonModification3DTwoBoneIK) SetTargetNode(target_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[0], &target_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTargetNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[1]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUsePoleNode(use_pole_node bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[2], &use_pole_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUsePoleNode() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[3]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetPoleNode(pole_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[4], &pole_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetPoleNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[5]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetUseTipNode(use_tip_node bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[6], &use_tip_node) }
func (gdClass SkeletonModification3DTwoBoneIK) GetUseTipNode() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[7]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetTipNode(tip_nodepath NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[8], &tip_nodepath) }
func (gdClass SkeletonModification3DTwoBoneIK) GetTipNode() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[9]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetAutoCalculateJointLength(auto_calculate_joint_length bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[10], &auto_calculate_joint_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetAutoCalculateJointLength() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[11]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneName(bone_name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[12], &bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneName() string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[13]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneBoneIdx(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[14], &bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneBoneIdx() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[15]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneLength(bone_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[16], &bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[17]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneName(bone_name string)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[18], &bone_name) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneName() string { return methodCall[string](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[19]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoBoneIdx(bone_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[20], &bone_idx) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoBoneIdx() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[21]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoLength(bone_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[22], &bone_length) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[23]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointOneRoll(roll float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[24], &roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointOneRoll() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[25]) }
func (gdClass SkeletonModification3DTwoBoneIK) SetJointTwoRoll(roll float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[26], &roll) }
func (gdClass SkeletonModification3DTwoBoneIK) GetJointTwoRoll() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModification3DTwoBoneIK[27]) }

type SkeletonModificationStack2D struct{self *SkeletonModificationStack2D; obj safeObject }
func NewSkeletonModificationStack2D(ctx Context, at *SkeletonModificationStack2D) SkeletonModificationStack2D { if at == nil { at = new(SkeletonModificationStack2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModificationStack2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModificationStack2D) owner() cObject { return gdClass.obj.get() }
func (SkeletonModificationStack2D) class() string { return "SkeletonModificationStack2D\000" }

func (gdClass SkeletonModificationStack2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkeletonModificationStack2D [15]cMethodBind
func (gdClass SkeletonModificationStack2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SkeletonModificationStack2D) Setup()  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[0]) }
func (gdClass SkeletonModificationStack2D) Execute(delta float64, execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[1], &delta, &execution_mode) }
func (gdClass SkeletonModificationStack2D) EnableAllModifications(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[2], &enabled) }
func (gdClass SkeletonModificationStack2D) GetModification(mod_idx int64) SkeletonModification2D { return methodCall[SkeletonModification2D](gdClass.obj.get(), methodSkeletonModificationStack2D[3], &mod_idx) }
func (gdClass SkeletonModificationStack2D) AddModification(modification SkeletonModification2D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[4], &modification) }
func (gdClass SkeletonModificationStack2D) DeleteModification(mod_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[5], &mod_idx) }
func (gdClass SkeletonModificationStack2D) SetModification(mod_idx int64, modification SkeletonModification2D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[6], &mod_idx, &modification) }
func (gdClass SkeletonModificationStack2D) SetModificationCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[7], &count) }
func (gdClass SkeletonModificationStack2D) GetModificationCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModificationStack2D[8]) }
func (gdClass SkeletonModificationStack2D) GetIsSetup() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModificationStack2D[9]) }
func (gdClass SkeletonModificationStack2D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[10], &enabled) }
func (gdClass SkeletonModificationStack2D) GetEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModificationStack2D[11]) }
func (gdClass SkeletonModificationStack2D) SetStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack2D[12], &strength) }
func (gdClass SkeletonModificationStack2D) GetStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModificationStack2D[13]) }
func (gdClass SkeletonModificationStack2D) GetSkeleton() Skeleton2D { return methodCall[Skeleton2D](gdClass.obj.get(), methodSkeletonModificationStack2D[14]) }

type SkeletonModificationStack3D struct{self *SkeletonModificationStack3D; obj safeObject }
func NewSkeletonModificationStack3D(ctx Context, at *SkeletonModificationStack3D) SkeletonModificationStack3D { if at == nil { at = new(SkeletonModificationStack3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonModificationStack3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonModificationStack3D) owner() cObject { return gdClass.obj.get() }
func (SkeletonModificationStack3D) class() string { return "SkeletonModificationStack3D\000" }

func (gdClass SkeletonModificationStack3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkeletonModificationStack3D [15]cMethodBind
func (gdClass SkeletonModificationStack3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SkeletonModificationStack3D) Setup()  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[0]) }
func (gdClass SkeletonModificationStack3D) Execute(delta float64, execution_mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[1], &delta, &execution_mode) }
func (gdClass SkeletonModificationStack3D) EnableAllModifications(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[2], &enabled) }
func (gdClass SkeletonModificationStack3D) GetModification(mod_idx int64) SkeletonModification3D { return methodCall[SkeletonModification3D](gdClass.obj.get(), methodSkeletonModificationStack3D[3], &mod_idx) }
func (gdClass SkeletonModificationStack3D) AddModification(modification SkeletonModification3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[4], &modification) }
func (gdClass SkeletonModificationStack3D) DeleteModification(mod_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[5], &mod_idx) }
func (gdClass SkeletonModificationStack3D) SetModification(mod_idx int64, modification SkeletonModification3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[6], &mod_idx, &modification) }
func (gdClass SkeletonModificationStack3D) SetModificationCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[7], &count) }
func (gdClass SkeletonModificationStack3D) GetModificationCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonModificationStack3D[8]) }
func (gdClass SkeletonModificationStack3D) GetIsSetup() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModificationStack3D[9]) }
func (gdClass SkeletonModificationStack3D) SetEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[10], &enabled) }
func (gdClass SkeletonModificationStack3D) GetEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSkeletonModificationStack3D[11]) }
func (gdClass SkeletonModificationStack3D) SetStrength(strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonModificationStack3D[12], &strength) }
func (gdClass SkeletonModificationStack3D) GetStrength() float64 { return methodCall[float64](gdClass.obj.get(), methodSkeletonModificationStack3D[13]) }
func (gdClass SkeletonModificationStack3D) GetSkeleton() Skeleton3D { return methodCall[Skeleton3D](gdClass.obj.get(), methodSkeletonModificationStack3D[14]) }

type SkeletonProfileTailDirection int64

const (
	SkeletonProfileTailDirectionAverageChildren SkeletonProfileTailDirection = 0
	SkeletonProfileTailDirectionSpecificChild SkeletonProfileTailDirection = 1
	SkeletonProfileTailDirectionEnd SkeletonProfileTailDirection = 2
)

type SkeletonProfile struct{self *SkeletonProfile; obj safeObject }
func NewSkeletonProfile(ctx Context, at *SkeletonProfile) SkeletonProfile { if at == nil { at = new(SkeletonProfile) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonProfile) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonProfile) owner() cObject { return gdClass.obj.get() }
func (SkeletonProfile) class() string { return "SkeletonProfile\000" }

func (gdClass SkeletonProfile) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkeletonProfile [27]cMethodBind
func (gdClass SkeletonProfile) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SkeletonProfile) SetRootBone(bone_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[0], &bone_name) }
func (gdClass SkeletonProfile) GetRootBone() Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[1]) }
func (gdClass SkeletonProfile) SetScaleBaseBone(bone_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[2], &bone_name) }
func (gdClass SkeletonProfile) GetScaleBaseBone() Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[3]) }
func (gdClass SkeletonProfile) SetGroupSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[4], &size) }
func (gdClass SkeletonProfile) GetGroupSize() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonProfile[5]) }
func (gdClass SkeletonProfile) GetGroupName(group_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[6], &group_idx) }
func (gdClass SkeletonProfile) SetGroupName(group_idx int64, group_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[7], &group_idx, &group_name) }
func (gdClass SkeletonProfile) GetTexture(group_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodSkeletonProfile[8], &group_idx) }
func (gdClass SkeletonProfile) SetTexture(group_idx int64, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[9], &group_idx, &texture) }
func (gdClass SkeletonProfile) SetBoneSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[10], &size) }
func (gdClass SkeletonProfile) GetBoneSize() int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonProfile[11]) }
func (gdClass SkeletonProfile) FindBone(bone_name Name) int64 { return methodCall[int64](gdClass.obj.get(), methodSkeletonProfile[12], &bone_name) }
func (gdClass SkeletonProfile) GetBoneName(bone_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[13], &bone_idx) }
func (gdClass SkeletonProfile) SetBoneName(bone_idx int64, bone_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[14], &bone_idx, &bone_name) }
func (gdClass SkeletonProfile) GetBoneParent(bone_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[15], &bone_idx) }
func (gdClass SkeletonProfile) SetBoneParent(bone_idx int64, bone_parent Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[16], &bone_idx, &bone_parent) }
func (gdClass SkeletonProfile) GetTailDirection(bone_idx int64) SkeletonProfileTailDirection { return methodCall[SkeletonProfileTailDirection](gdClass.obj.get(), methodSkeletonProfile[17], &bone_idx) }
func (gdClass SkeletonProfile) SetTailDirection(bone_idx int64, tail_direction SkeletonProfileTailDirection)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[18], &bone_idx, &tail_direction) }
func (gdClass SkeletonProfile) GetBoneTail(bone_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[19], &bone_idx) }
func (gdClass SkeletonProfile) SetBoneTail(bone_idx int64, bone_tail Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[20], &bone_idx, &bone_tail) }
func (gdClass SkeletonProfile) GetReferencePose(bone_idx int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkeletonProfile[21], &bone_idx) }
func (gdClass SkeletonProfile) SetReferencePose(bone_idx int64, bone_name Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[22], &bone_idx, &bone_name) }
func (gdClass SkeletonProfile) GetHandleOffset(bone_idx int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSkeletonProfile[23], &bone_idx) }
func (gdClass SkeletonProfile) SetHandleOffset(bone_idx int64, handle_offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[24], &bone_idx, &handle_offset) }
func (gdClass SkeletonProfile) GetGroup(bone_idx int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkeletonProfile[25], &bone_idx) }
func (gdClass SkeletonProfile) SetGroup(bone_idx int64, group Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkeletonProfile[26], &bone_idx, &group) }

type SkeletonProfileHumanoid struct{self *SkeletonProfileHumanoid; obj safeObject }
func NewSkeletonProfileHumanoid(ctx Context, at *SkeletonProfileHumanoid) SkeletonProfileHumanoid { if at == nil { at = new(SkeletonProfileHumanoid) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkeletonProfileHumanoid) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkeletonProfileHumanoid) owner() cObject { return gdClass.obj.get() }
func (SkeletonProfileHumanoid) class() string { return "SkeletonProfileHumanoid\000" }

func (gdClass SkeletonProfileHumanoid) SkeletonProfile() SkeletonProfile { return SkeletonProfile{obj:gdClass.obj} }

func (gdClass SkeletonProfileHumanoid) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SkeletonProfile().virtual(rtype, name)
}

type Skin struct{self *Skin; obj safeObject }
func NewSkin(ctx Context, at *Skin) Skin { if at == nil { at = new(Skin) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Skin) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Skin) owner() cObject { return gdClass.obj.get() }
func (Skin) class() string { return "Skin\000" }

func (gdClass Skin) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSkin [11]cMethodBind
func (gdClass Skin) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Skin) SetBindCount(bind_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[0], &bind_count) }
func (gdClass Skin) GetBindCount() int64 { return methodCall[int64](gdClass.obj.get(), methodSkin[1]) }
func (gdClass Skin) AddBind(bone int64, pose Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[2], &bone, &pose) }
func (gdClass Skin) AddNamedBind(name string, pose Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[3], &name, &pose) }
func (gdClass Skin) SetBindPose(bind_index int64, pose Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[4], &bind_index, &pose) }
func (gdClass Skin) GetBindPose(bind_index int64) Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodSkin[5], &bind_index) }
func (gdClass Skin) SetBindName(bind_index int64, name Name)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[6], &bind_index, &name) }
func (gdClass Skin) GetBindName(bind_index int64) Name { return methodCall[Name](gdClass.obj.get(), methodSkin[7], &bind_index) }
func (gdClass Skin) SetBindBone(bind_index int64, bone int64)  { methodCall[struct{}](gdClass.obj.get(), methodSkin[8], &bind_index, &bone) }
func (gdClass Skin) GetBindBone(bind_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodSkin[9], &bind_index) }
func (gdClass Skin) ClearBinds()  { methodCall[struct{}](gdClass.obj.get(), methodSkin[10]) }

type SkinReference struct{self *SkinReference; obj safeObject }
func NewSkinReference(ctx Context, at *SkinReference) SkinReference { if at == nil { at = new(SkinReference) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SkinReference) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SkinReference) owner() cObject { return gdClass.obj.get() }
func (SkinReference) class() string { return "SkinReference\000" }

func (gdClass SkinReference) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodSkinReference [2]cMethodBind
func (gdClass SkinReference) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass SkinReference) GetSkeleton() RID { return methodCall[RID](gdClass.obj.get(), methodSkinReference[0]) }
func (gdClass SkinReference) GetSkin() Skin { return methodCall[Skin](gdClass.obj.get(), methodSkinReference[1]) }

type SkyRadianceSize int64

const (
	SkyRadianceSize32 SkyRadianceSize = 0
	SkyRadianceSize64 SkyRadianceSize = 1
	SkyRadianceSize128 SkyRadianceSize = 2
	SkyRadianceSize256 SkyRadianceSize = 3
	SkyRadianceSize512 SkyRadianceSize = 4
	SkyRadianceSize1024 SkyRadianceSize = 5
	SkyRadianceSize2048 SkyRadianceSize = 6
	SkyRadianceSizeMax SkyRadianceSize = 7
)

type SkyProcessMode int64

const (
	SkyProcessModeAutomatic SkyProcessMode = 0
	SkyProcessModeQuality SkyProcessMode = 1
	SkyProcessModeIncremental SkyProcessMode = 2
	SkyProcessModeRealtime SkyProcessMode = 3
)

type Sky struct{self *Sky; obj safeObject }
func NewSky(ctx Context, at *Sky) Sky { if at == nil { at = new(Sky) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Sky) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Sky) owner() cObject { return gdClass.obj.get() }
func (Sky) class() string { return "Sky\000" }

func (gdClass Sky) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSky [6]cMethodBind
func (gdClass Sky) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Sky) SetRadianceSize(size SkyRadianceSize)  { methodCall[struct{}](gdClass.obj.get(), methodSky[0], &size) }
func (gdClass Sky) GetRadianceSize() SkyRadianceSize { return methodCall[SkyRadianceSize](gdClass.obj.get(), methodSky[1]) }
func (gdClass Sky) SetProcessMode(mode SkyProcessMode)  { methodCall[struct{}](gdClass.obj.get(), methodSky[2], &mode) }
func (gdClass Sky) GetProcessMode() SkyProcessMode { return methodCall[SkyProcessMode](gdClass.obj.get(), methodSky[3]) }
func (gdClass Sky) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodSky[4], &material) }
func (gdClass Sky) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodSky[5]) }

type Slider struct{self *Slider; obj safeObject }
func NewSlider(ctx Context, at *Slider) Slider { if at == nil { at = new(Slider) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Slider) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Slider) owner() cObject { return gdClass.obj.get() }
func (Slider) class() string { return "Slider\000" }

func (gdClass Slider) Range() Range { return Range{obj:gdClass.obj} }

var methodSlider [8]cMethodBind
func (gdClass Slider) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass Slider) SetTicks(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodSlider[0], &count) }
func (gdClass Slider) GetTicks() int64 { return methodCall[int64](gdClass.obj.get(), methodSlider[1]) }
func (gdClass Slider) GetTicksOnBorders() bool { return methodCall[bool](gdClass.obj.get(), methodSlider[2]) }
func (gdClass Slider) SetTicksOnBorders(ticks_on_border bool)  { methodCall[struct{}](gdClass.obj.get(), methodSlider[3], &ticks_on_border) }
func (gdClass Slider) SetEditable(editable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSlider[4], &editable) }
func (gdClass Slider) IsEditable() bool { return methodCall[bool](gdClass.obj.get(), methodSlider[5]) }
func (gdClass Slider) SetScrollable(scrollable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSlider[6], &scrollable) }
func (gdClass Slider) IsScrollable() bool { return methodCall[bool](gdClass.obj.get(), methodSlider[7]) }

type SliderJoint3DParam int64

const (
	SliderJoint3DParamLinearLimitUpper SliderJoint3DParam = 0
	SliderJoint3DParamLinearLimitLower SliderJoint3DParam = 1
	SliderJoint3DParamLinearLimitSoftness SliderJoint3DParam = 2
	SliderJoint3DParamLinearLimitRestitution SliderJoint3DParam = 3
	SliderJoint3DParamLinearLimitDamping SliderJoint3DParam = 4
	SliderJoint3DParamLinearMotionSoftness SliderJoint3DParam = 5
	SliderJoint3DParamLinearMotionRestitution SliderJoint3DParam = 6
	SliderJoint3DParamLinearMotionDamping SliderJoint3DParam = 7
	SliderJoint3DParamLinearOrthogonalSoftness SliderJoint3DParam = 8
	SliderJoint3DParamLinearOrthogonalRestitution SliderJoint3DParam = 9
	SliderJoint3DParamLinearOrthogonalDamping SliderJoint3DParam = 10
	SliderJoint3DParamAngularLimitUpper SliderJoint3DParam = 11
	SliderJoint3DParamAngularLimitLower SliderJoint3DParam = 12
	SliderJoint3DParamAngularLimitSoftness SliderJoint3DParam = 13
	SliderJoint3DParamAngularLimitRestitution SliderJoint3DParam = 14
	SliderJoint3DParamAngularLimitDamping SliderJoint3DParam = 15
	SliderJoint3DParamAngularMotionSoftness SliderJoint3DParam = 16
	SliderJoint3DParamAngularMotionRestitution SliderJoint3DParam = 17
	SliderJoint3DParamAngularMotionDamping SliderJoint3DParam = 18
	SliderJoint3DParamAngularOrthogonalSoftness SliderJoint3DParam = 19
	SliderJoint3DParamAngularOrthogonalRestitution SliderJoint3DParam = 20
	SliderJoint3DParamAngularOrthogonalDamping SliderJoint3DParam = 21
	SliderJoint3DParamMax SliderJoint3DParam = 22
)

type SliderJoint3D struct{self *SliderJoint3D; obj safeObject }
func NewSliderJoint3D(ctx Context, at *SliderJoint3D) SliderJoint3D { if at == nil { at = new(SliderJoint3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SliderJoint3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SliderJoint3D) owner() cObject { return gdClass.obj.get() }
func (SliderJoint3D) class() string { return "SliderJoint3D\000" }

func (gdClass SliderJoint3D) Joint3D() Joint3D { return Joint3D{obj:gdClass.obj} }

var methodSliderJoint3D [2]cMethodBind
func (gdClass SliderJoint3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Joint3D().virtual(rtype, name)
}
func (gdClass SliderJoint3D) SetParam(param SliderJoint3DParam, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodSliderJoint3D[0], &param, &value) }
func (gdClass SliderJoint3D) GetParam(param SliderJoint3DParam) float64 { return methodCall[float64](gdClass.obj.get(), methodSliderJoint3D[1], &param) }

type SoftBody3DDisableMode int64

const (
	SoftBody3DDisableModeRemove SoftBody3DDisableMode = 0
	SoftBody3DDisableModeKeepActive SoftBody3DDisableMode = 1
)

type SoftBody3D struct{self *SoftBody3D; obj safeObject }
func NewSoftBody3D(ctx Context, at *SoftBody3D) SoftBody3D { if at == nil { at = new(SoftBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SoftBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SoftBody3D) owner() cObject { return gdClass.obj.get() }
func (SoftBody3D) class() string { return "SoftBody3D\000" }

func (gdClass SoftBody3D) MeshInstance3D() MeshInstance3D { return MeshInstance3D{obj:gdClass.obj} }

var methodSoftBody3D [33]cMethodBind
func (gdClass SoftBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MeshInstance3D().virtual(rtype, name)
}
func (gdClass SoftBody3D) GetPhysicsRid() RID { return methodCall[RID](gdClass.obj.get(), methodSoftBody3D[0]) }
func (gdClass SoftBody3D) SetCollisionMask(collision_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[1], &collision_mask) }
func (gdClass SoftBody3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodSoftBody3D[2]) }
func (gdClass SoftBody3D) SetCollisionLayer(collision_layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[3], &collision_layer) }
func (gdClass SoftBody3D) GetCollisionLayer() int64 { return methodCall[int64](gdClass.obj.get(), methodSoftBody3D[4]) }
func (gdClass SoftBody3D) SetCollisionMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[5], &layer_number, &value) }
func (gdClass SoftBody3D) GetCollisionMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodSoftBody3D[6], &layer_number) }
func (gdClass SoftBody3D) SetCollisionLayerValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[7], &layer_number, &value) }
func (gdClass SoftBody3D) GetCollisionLayerValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodSoftBody3D[8], &layer_number) }
func (gdClass SoftBody3D) SetParentCollisionIgnore(parent_collision_ignore NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[9], &parent_collision_ignore) }
func (gdClass SoftBody3D) GetParentCollisionIgnore() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodSoftBody3D[10]) }
func (gdClass SoftBody3D) SetDisableMode(mode SoftBody3DDisableMode)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[11], &mode) }
func (gdClass SoftBody3D) GetDisableMode() SoftBody3DDisableMode { return methodCall[SoftBody3DDisableMode](gdClass.obj.get(), methodSoftBody3D[12]) }
func (gdClass SoftBody3D) GetCollisionExceptions() Array { return methodCall[Array](gdClass.obj.get(), methodSoftBody3D[13]) }
func (gdClass SoftBody3D) AddCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[14], &body) }
func (gdClass SoftBody3D) RemoveCollisionExceptionWith(body Node)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[15], &body) }
func (gdClass SoftBody3D) SetSimulationPrecision(simulation_precision int64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[16], &simulation_precision) }
func (gdClass SoftBody3D) GetSimulationPrecision() int64 { return methodCall[int64](gdClass.obj.get(), methodSoftBody3D[17]) }
func (gdClass SoftBody3D) SetTotalMass(mass float64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[18], &mass) }
func (gdClass SoftBody3D) GetTotalMass() float64 { return methodCall[float64](gdClass.obj.get(), methodSoftBody3D[19]) }
func (gdClass SoftBody3D) SetLinearStiffness(linear_stiffness float64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[20], &linear_stiffness) }
func (gdClass SoftBody3D) GetLinearStiffness() float64 { return methodCall[float64](gdClass.obj.get(), methodSoftBody3D[21]) }
func (gdClass SoftBody3D) SetPressureCoefficient(pressure_coefficient float64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[22], &pressure_coefficient) }
func (gdClass SoftBody3D) GetPressureCoefficient() float64 { return methodCall[float64](gdClass.obj.get(), methodSoftBody3D[23]) }
func (gdClass SoftBody3D) SetDampingCoefficient(damping_coefficient float64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[24], &damping_coefficient) }
func (gdClass SoftBody3D) GetDampingCoefficient() float64 { return methodCall[float64](gdClass.obj.get(), methodSoftBody3D[25]) }
func (gdClass SoftBody3D) SetDragCoefficient(drag_coefficient float64)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[26], &drag_coefficient) }
func (gdClass SoftBody3D) GetDragCoefficient() float64 { return methodCall[float64](gdClass.obj.get(), methodSoftBody3D[27]) }
func (gdClass SoftBody3D) GetPointTransform(point_index int64) Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodSoftBody3D[28], &point_index) }
func (gdClass SoftBody3D) SetPointPinned(point_index int64, pinned bool, attachment_path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[29], &point_index, &pinned, &attachment_path) }
func (gdClass SoftBody3D) IsPointPinned(point_index int64) bool { return methodCall[bool](gdClass.obj.get(), methodSoftBody3D[30], &point_index) }
func (gdClass SoftBody3D) SetRayPickable(ray_pickable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSoftBody3D[31], &ray_pickable) }
func (gdClass SoftBody3D) IsRayPickable() bool { return methodCall[bool](gdClass.obj.get(), methodSoftBody3D[32]) }

type SphereMesh struct{self *SphereMesh; obj safeObject }
func NewSphereMesh(ctx Context, at *SphereMesh) SphereMesh { if at == nil { at = new(SphereMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SphereMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SphereMesh) owner() cObject { return gdClass.obj.get() }
func (SphereMesh) class() string { return "SphereMesh\000" }

func (gdClass SphereMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodSphereMesh [10]cMethodBind
func (gdClass SphereMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass SphereMesh) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereMesh[0], &radius) }
func (gdClass SphereMesh) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodSphereMesh[1]) }
func (gdClass SphereMesh) SetHeight(height float64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereMesh[2], &height) }
func (gdClass SphereMesh) GetHeight() float64 { return methodCall[float64](gdClass.obj.get(), methodSphereMesh[3]) }
func (gdClass SphereMesh) SetRadialSegments(radial_segments int64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereMesh[4], &radial_segments) }
func (gdClass SphereMesh) GetRadialSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodSphereMesh[5]) }
func (gdClass SphereMesh) SetRings(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereMesh[6], &rings) }
func (gdClass SphereMesh) GetRings() int64 { return methodCall[int64](gdClass.obj.get(), methodSphereMesh[7]) }
func (gdClass SphereMesh) SetIsHemisphere(is_hemisphere bool)  { methodCall[struct{}](gdClass.obj.get(), methodSphereMesh[8], &is_hemisphere) }
func (gdClass SphereMesh) GetIsHemisphere() bool { return methodCall[bool](gdClass.obj.get(), methodSphereMesh[9]) }

type SphereOccluder3D struct{self *SphereOccluder3D; obj safeObject }
func NewSphereOccluder3D(ctx Context, at *SphereOccluder3D) SphereOccluder3D { if at == nil { at = new(SphereOccluder3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SphereOccluder3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SphereOccluder3D) owner() cObject { return gdClass.obj.get() }
func (SphereOccluder3D) class() string { return "SphereOccluder3D\000" }

func (gdClass SphereOccluder3D) Occluder3D() Occluder3D { return Occluder3D{obj:gdClass.obj} }

var methodSphereOccluder3D [2]cMethodBind
func (gdClass SphereOccluder3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Occluder3D().virtual(rtype, name)
}
func (gdClass SphereOccluder3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereOccluder3D[0], &radius) }
func (gdClass SphereOccluder3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodSphereOccluder3D[1]) }

type SphereShape3D struct{self *SphereShape3D; obj safeObject }
func NewSphereShape3D(ctx Context, at *SphereShape3D) SphereShape3D { if at == nil { at = new(SphereShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SphereShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SphereShape3D) owner() cObject { return gdClass.obj.get() }
func (SphereShape3D) class() string { return "SphereShape3D\000" }

func (gdClass SphereShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodSphereShape3D [2]cMethodBind
func (gdClass SphereShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass SphereShape3D) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodSphereShape3D[0], &radius) }
func (gdClass SphereShape3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodSphereShape3D[1]) }

type SpinBox struct{self *SpinBox; obj safeObject }
func NewSpinBox(ctx Context, at *SpinBox) SpinBox { if at == nil { at = new(SpinBox) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SpinBox) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SpinBox) owner() cObject { return gdClass.obj.get() }
func (SpinBox) class() string { return "SpinBox\000" }

func (gdClass SpinBox) Range() Range { return Range{obj:gdClass.obj} }

var methodSpinBox [14]cMethodBind
func (gdClass SpinBox) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass SpinBox) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[0], &alignment) }
func (gdClass SpinBox) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodSpinBox[1]) }
func (gdClass SpinBox) SetSuffix(suffix string)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[2], &suffix) }
func (gdClass SpinBox) GetSuffix() string { return methodCall[string](gdClass.obj.get(), methodSpinBox[3]) }
func (gdClass SpinBox) SetPrefix(prefix string)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[4], &prefix) }
func (gdClass SpinBox) GetPrefix() string { return methodCall[string](gdClass.obj.get(), methodSpinBox[5]) }
func (gdClass SpinBox) SetEditable(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[6], &enabled) }
func (gdClass SpinBox) SetCustomArrowStep(arrow_step float64)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[7], &arrow_step) }
func (gdClass SpinBox) GetCustomArrowStep() float64 { return methodCall[float64](gdClass.obj.get(), methodSpinBox[8]) }
func (gdClass SpinBox) IsEditable() bool { return methodCall[bool](gdClass.obj.get(), methodSpinBox[9]) }
func (gdClass SpinBox) SetUpdateOnTextChanged(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[10], &enabled) }
func (gdClass SpinBox) GetUpdateOnTextChanged() bool { return methodCall[bool](gdClass.obj.get(), methodSpinBox[11]) }
func (gdClass SpinBox) Apply()  { methodCall[struct{}](gdClass.obj.get(), methodSpinBox[12]) }
func (gdClass SpinBox) GetLineEdit() LineEdit { return methodCall[LineEdit](gdClass.obj.get(), methodSpinBox[13]) }

type SplitContainerDraggerVisibility int64

const (
	SplitContainerDraggerVisible SplitContainerDraggerVisibility = 0
	SplitContainerDraggerHidden SplitContainerDraggerVisibility = 1
	SplitContainerDraggerHiddenCollapsed SplitContainerDraggerVisibility = 2
)

type SplitContainer struct{self *SplitContainer; obj safeObject }
func NewSplitContainer(ctx Context, at *SplitContainer) SplitContainer { if at == nil { at = new(SplitContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SplitContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SplitContainer) owner() cObject { return gdClass.obj.get() }
func (SplitContainer) class() string { return "SplitContainer\000" }

func (gdClass SplitContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodSplitContainer [7]cMethodBind
func (gdClass SplitContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass SplitContainer) SetSplitOffset(offset int64)  { methodCall[struct{}](gdClass.obj.get(), methodSplitContainer[0], &offset) }
func (gdClass SplitContainer) GetSplitOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodSplitContainer[1]) }
func (gdClass SplitContainer) ClampSplitOffset()  { methodCall[struct{}](gdClass.obj.get(), methodSplitContainer[2]) }
func (gdClass SplitContainer) SetCollapsed(collapsed bool)  { methodCall[struct{}](gdClass.obj.get(), methodSplitContainer[3], &collapsed) }
func (gdClass SplitContainer) IsCollapsed() bool { return methodCall[bool](gdClass.obj.get(), methodSplitContainer[4]) }
func (gdClass SplitContainer) SetDraggerVisibility(mode SplitContainerDraggerVisibility)  { methodCall[struct{}](gdClass.obj.get(), methodSplitContainer[5], &mode) }
func (gdClass SplitContainer) GetDraggerVisibility() SplitContainerDraggerVisibility { return methodCall[SplitContainerDraggerVisibility](gdClass.obj.get(), methodSplitContainer[6]) }

type SpotLight3D struct{self *SpotLight3D; obj safeObject }
func NewSpotLight3D(ctx Context, at *SpotLight3D) SpotLight3D { if at == nil { at = new(SpotLight3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SpotLight3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SpotLight3D) owner() cObject { return gdClass.obj.get() }
func (SpotLight3D) class() string { return "SpotLight3D\000" }

func (gdClass SpotLight3D) Light3D() Light3D { return Light3D{obj:gdClass.obj} }

func (gdClass SpotLight3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Light3D().virtual(rtype, name)
}

type SpringArm3D struct{self *SpringArm3D; obj safeObject }
func NewSpringArm3D(ctx Context, at *SpringArm3D) SpringArm3D { if at == nil { at = new(SpringArm3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SpringArm3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SpringArm3D) owner() cObject { return gdClass.obj.get() }
func (SpringArm3D) class() string { return "SpringArm3D\000" }

func (gdClass SpringArm3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodSpringArm3D [12]cMethodBind
func (gdClass SpringArm3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass SpringArm3D) GetHitLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSpringArm3D[0]) }
func (gdClass SpringArm3D) SetLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[1], &length) }
func (gdClass SpringArm3D) GetLength() float64 { return methodCall[float64](gdClass.obj.get(), methodSpringArm3D[2]) }
func (gdClass SpringArm3D) SetShape(shape Shape3D)  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[3], &shape) }
func (gdClass SpringArm3D) GetShape() Shape3D { return methodCall[Shape3D](gdClass.obj.get(), methodSpringArm3D[4]) }
func (gdClass SpringArm3D) AddExcludedObject(RID RID)  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[5], &RID) }
func (gdClass SpringArm3D) RemoveExcludedObject(RID RID) bool { return methodCall[bool](gdClass.obj.get(), methodSpringArm3D[6], &RID) }
func (gdClass SpringArm3D) ClearExcludedObjects()  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[7]) }
func (gdClass SpringArm3D) SetCollisionMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[8], &mask) }
func (gdClass SpringArm3D) GetCollisionMask() int64 { return methodCall[int64](gdClass.obj.get(), methodSpringArm3D[9]) }
func (gdClass SpringArm3D) SetMargin(margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodSpringArm3D[10], &margin) }
func (gdClass SpringArm3D) GetMargin() float64 { return methodCall[float64](gdClass.obj.get(), methodSpringArm3D[11]) }

type Sprite2D struct{self *Sprite2D; obj safeObject }
func NewSprite2D(ctx Context, at *Sprite2D) Sprite2D { if at == nil { at = new(Sprite2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Sprite2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Sprite2D) owner() cObject { return gdClass.obj.get() }
func (Sprite2D) class() string { return "Sprite2D\000" }

func (gdClass Sprite2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodSprite2D [26]cMethodBind
func (gdClass Sprite2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass Sprite2D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[0], &texture) }
func (gdClass Sprite2D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodSprite2D[1]) }
func (gdClass Sprite2D) SetCentered(centered bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[2], &centered) }
func (gdClass Sprite2D) IsCentered() bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[3]) }
func (gdClass Sprite2D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[4], &offset) }
func (gdClass Sprite2D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSprite2D[5]) }
func (gdClass Sprite2D) SetFlipH(flip_h bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[6], &flip_h) }
func (gdClass Sprite2D) IsFlippedH() bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[7]) }
func (gdClass Sprite2D) SetFlipV(flip_v bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[8], &flip_v) }
func (gdClass Sprite2D) IsFlippedV() bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[9]) }
func (gdClass Sprite2D) SetRegionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[10], &enabled) }
func (gdClass Sprite2D) IsRegionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[11]) }
func (gdClass Sprite2D) IsPixelOpaque(pos Vector2) bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[12], &pos) }
func (gdClass Sprite2D) SetRegionRect(rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[13], &rect) }
func (gdClass Sprite2D) GetRegionRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodSprite2D[14]) }
func (gdClass Sprite2D) SetRegionFilterClipEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[15], &enabled) }
func (gdClass Sprite2D) IsRegionFilterClipEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSprite2D[16]) }
func (gdClass Sprite2D) SetFrame(frame int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[17], &frame) }
func (gdClass Sprite2D) GetFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite2D[18]) }
func (gdClass Sprite2D) SetFrameCoords(coords Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[19], &coords) }
func (gdClass Sprite2D) GetFrameCoords() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodSprite2D[20]) }
func (gdClass Sprite2D) SetVframes(vframes int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[21], &vframes) }
func (gdClass Sprite2D) GetVframes() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite2D[22]) }
func (gdClass Sprite2D) SetHframes(hframes int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite2D[23], &hframes) }
func (gdClass Sprite2D) GetHframes() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite2D[24]) }
func (gdClass Sprite2D) GetRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodSprite2D[25]) }

type Sprite3D struct{self *Sprite3D; obj safeObject }
func NewSprite3D(ctx Context, at *Sprite3D) Sprite3D { if at == nil { at = new(Sprite3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Sprite3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Sprite3D) owner() cObject { return gdClass.obj.get() }
func (Sprite3D) class() string { return "Sprite3D\000" }

func (gdClass Sprite3D) SpriteBase3D() SpriteBase3D { return SpriteBase3D{obj:gdClass.obj} }

var methodSprite3D [14]cMethodBind
func (gdClass Sprite3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SpriteBase3D().virtual(rtype, name)
}
func (gdClass Sprite3D) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[0], &texture) }
func (gdClass Sprite3D) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodSprite3D[1]) }
func (gdClass Sprite3D) SetRegionEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[2], &enabled) }
func (gdClass Sprite3D) IsRegionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSprite3D[3]) }
func (gdClass Sprite3D) SetRegionRect(rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[4], &rect) }
func (gdClass Sprite3D) GetRegionRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodSprite3D[5]) }
func (gdClass Sprite3D) SetFrame(frame int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[6], &frame) }
func (gdClass Sprite3D) GetFrame() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite3D[7]) }
func (gdClass Sprite3D) SetFrameCoords(coords Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[8], &coords) }
func (gdClass Sprite3D) GetFrameCoords() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodSprite3D[9]) }
func (gdClass Sprite3D) SetVframes(vframes int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[10], &vframes) }
func (gdClass Sprite3D) GetVframes() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite3D[11]) }
func (gdClass Sprite3D) SetHframes(hframes int64)  { methodCall[struct{}](gdClass.obj.get(), methodSprite3D[12], &hframes) }
func (gdClass Sprite3D) GetHframes() int64 { return methodCall[int64](gdClass.obj.get(), methodSprite3D[13]) }

type SpriteBase3DDrawFlags int64

const (
	SpriteBase3DFlagTransparent SpriteBase3DDrawFlags = 0
	SpriteBase3DFlagShaded SpriteBase3DDrawFlags = 1
	SpriteBase3DFlagDoubleSided SpriteBase3DDrawFlags = 2
	SpriteBase3DFlagDisableDepthTest SpriteBase3DDrawFlags = 3
	SpriteBase3DFlagFixedSize SpriteBase3DDrawFlags = 4
	SpriteBase3DFlagMax SpriteBase3DDrawFlags = 5
)

type SpriteBase3DAlphaCutMode int64

const (
	SpriteBase3DAlphaCutDisabled SpriteBase3DAlphaCutMode = 0
	SpriteBase3DAlphaCutDiscard SpriteBase3DAlphaCutMode = 1
	SpriteBase3DAlphaCutOpaquePrepass SpriteBase3DAlphaCutMode = 2
)

type SpriteBase3D struct{self *SpriteBase3D; obj safeObject }
func NewSpriteBase3D(ctx Context, at *SpriteBase3D) SpriteBase3D { if at == nil { at = new(SpriteBase3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SpriteBase3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SpriteBase3D) owner() cObject { return gdClass.obj.get() }
func (SpriteBase3D) class() string { return "SpriteBase3D\000" }

func (gdClass SpriteBase3D) GeometryInstance3D() GeometryInstance3D { return GeometryInstance3D{obj:gdClass.obj} }

var methodSpriteBase3D [26]cMethodBind
func (gdClass SpriteBase3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.GeometryInstance3D().virtual(rtype, name)
}
func (gdClass SpriteBase3D) SetCentered(centered bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[0], &centered) }
func (gdClass SpriteBase3D) IsCentered() bool { return methodCall[bool](gdClass.obj.get(), methodSpriteBase3D[1]) }
func (gdClass SpriteBase3D) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[2], &offset) }
func (gdClass SpriteBase3D) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodSpriteBase3D[3]) }
func (gdClass SpriteBase3D) SetFlipH(flip_h bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[4], &flip_h) }
func (gdClass SpriteBase3D) IsFlippedH() bool { return methodCall[bool](gdClass.obj.get(), methodSpriteBase3D[5]) }
func (gdClass SpriteBase3D) SetFlipV(flip_v bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[6], &flip_v) }
func (gdClass SpriteBase3D) IsFlippedV() bool { return methodCall[bool](gdClass.obj.get(), methodSpriteBase3D[7]) }
func (gdClass SpriteBase3D) SetModulate(modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[8], &modulate) }
func (gdClass SpriteBase3D) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodSpriteBase3D[9]) }
func (gdClass SpriteBase3D) SetRenderPriority(priority int64)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[10], &priority) }
func (gdClass SpriteBase3D) GetRenderPriority() int64 { return methodCall[int64](gdClass.obj.get(), methodSpriteBase3D[11]) }
func (gdClass SpriteBase3D) SetPixelSize(pixel_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[12], &pixel_size) }
func (gdClass SpriteBase3D) GetPixelSize() float64 { return methodCall[float64](gdClass.obj.get(), methodSpriteBase3D[13]) }
func (gdClass SpriteBase3D) SetAxis(axis Vector3Axis)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[14], &axis) }
func (gdClass SpriteBase3D) GetAxis() Vector3Axis { return methodCall[Vector3Axis](gdClass.obj.get(), methodSpriteBase3D[15]) }
func (gdClass SpriteBase3D) SetDrawFlag(flag SpriteBase3DDrawFlags, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[16], &flag, &enabled) }
func (gdClass SpriteBase3D) GetDrawFlag(flag SpriteBase3DDrawFlags) bool { return methodCall[bool](gdClass.obj.get(), methodSpriteBase3D[17], &flag) }
func (gdClass SpriteBase3D) SetAlphaCutMode(mode SpriteBase3DAlphaCutMode)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[18], &mode) }
func (gdClass SpriteBase3D) GetAlphaCutMode() SpriteBase3DAlphaCutMode { return methodCall[SpriteBase3DAlphaCutMode](gdClass.obj.get(), methodSpriteBase3D[19]) }
func (gdClass SpriteBase3D) SetBillboardMode(mode BaseMaterial3DBillboardMode)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[20], &mode) }
func (gdClass SpriteBase3D) GetBillboardMode() BaseMaterial3DBillboardMode { return methodCall[BaseMaterial3DBillboardMode](gdClass.obj.get(), methodSpriteBase3D[21]) }
func (gdClass SpriteBase3D) SetTextureFilter(mode BaseMaterial3DTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteBase3D[22], &mode) }
func (gdClass SpriteBase3D) GetTextureFilter() BaseMaterial3DTextureFilter { return methodCall[BaseMaterial3DTextureFilter](gdClass.obj.get(), methodSpriteBase3D[23]) }
func (gdClass SpriteBase3D) GetItemRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodSpriteBase3D[24]) }
func (gdClass SpriteBase3D) GenerateTriangleMesh() TriangleMesh { return methodCall[TriangleMesh](gdClass.obj.get(), methodSpriteBase3D[25]) }

type SpriteFrames struct{self *SpriteFrames; obj safeObject }
func NewSpriteFrames(ctx Context, at *SpriteFrames) SpriteFrames { if at == nil { at = new(SpriteFrames) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SpriteFrames) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SpriteFrames) owner() cObject { return gdClass.obj.get() }
func (SpriteFrames) class() string { return "SpriteFrames\000" }

func (gdClass SpriteFrames) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSpriteFrames [16]cMethodBind
func (gdClass SpriteFrames) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SpriteFrames) AddAnimation(anim Name)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[0], &anim) }
func (gdClass SpriteFrames) HasAnimation(anim Name) bool { return methodCall[bool](gdClass.obj.get(), methodSpriteFrames[1], &anim) }
func (gdClass SpriteFrames) RemoveAnimation(anim Name)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[2], &anim) }
func (gdClass SpriteFrames) RenameAnimation(anim Name, newname Name)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[3], &anim, &newname) }
func (gdClass SpriteFrames) GetAnimationNames() []string { return methodCall[[]string](gdClass.obj.get(), methodSpriteFrames[4]) }
func (gdClass SpriteFrames) SetAnimationSpeed(anim Name, speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[5], &anim, &speed) }
func (gdClass SpriteFrames) GetAnimationSpeed(anim Name) float64 { return methodCall[float64](gdClass.obj.get(), methodSpriteFrames[6], &anim) }
func (gdClass SpriteFrames) SetAnimationLoop(anim Name, loop bool)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[7], &anim, &loop) }
func (gdClass SpriteFrames) GetAnimationLoop(anim Name) bool { return methodCall[bool](gdClass.obj.get(), methodSpriteFrames[8], &anim) }
func (gdClass SpriteFrames) AddFrame(anim Name, frame Texture2D, at_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[9], &anim, &frame, &at_position) }
func (gdClass SpriteFrames) GetFrameCount(anim Name) int64 { return methodCall[int64](gdClass.obj.get(), methodSpriteFrames[10], &anim) }
func (gdClass SpriteFrames) GetFrame(anim Name, idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodSpriteFrames[11], &anim, &idx) }
func (gdClass SpriteFrames) SetFrame(anim Name, idx int64, txt Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[12], &anim, &idx, &txt) }
func (gdClass SpriteFrames) RemoveFrame(anim Name, idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[13], &anim, &idx) }
func (gdClass SpriteFrames) Clear(anim Name)  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[14], &anim) }
func (gdClass SpriteFrames) ClearAll()  { methodCall[struct{}](gdClass.obj.get(), methodSpriteFrames[15]) }

type StandardMaterial3D struct{self *StandardMaterial3D; obj safeObject }
func NewStandardMaterial3D(ctx Context, at *StandardMaterial3D) StandardMaterial3D { if at == nil { at = new(StandardMaterial3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StandardMaterial3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StandardMaterial3D) owner() cObject { return gdClass.obj.get() }
func (StandardMaterial3D) class() string { return "StandardMaterial3D\000" }

func (gdClass StandardMaterial3D) BaseMaterial3D() BaseMaterial3D { return BaseMaterial3D{obj:gdClass.obj} }

func (gdClass StandardMaterial3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BaseMaterial3D().virtual(rtype, name)
}

type StaticBody2D struct{self *StaticBody2D; obj safeObject }
func NewStaticBody2D(ctx Context, at *StaticBody2D) StaticBody2D { if at == nil { at = new(StaticBody2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass StaticBody2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StaticBody2D) owner() cObject { return gdClass.obj.get() }
func (StaticBody2D) class() string { return "StaticBody2D\000" }

func (gdClass StaticBody2D) PhysicsBody2D() PhysicsBody2D { return PhysicsBody2D{obj:gdClass.obj} }

var methodStaticBody2D [6]cMethodBind
func (gdClass StaticBody2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsBody2D().virtual(rtype, name)
}
func (gdClass StaticBody2D) SetConstantLinearVelocity(vel Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody2D[0], &vel) }
func (gdClass StaticBody2D) SetConstantAngularVelocity(vel float64)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody2D[1], &vel) }
func (gdClass StaticBody2D) GetConstantLinearVelocity() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStaticBody2D[2]) }
func (gdClass StaticBody2D) GetConstantAngularVelocity() float64 { return methodCall[float64](gdClass.obj.get(), methodStaticBody2D[3]) }
func (gdClass StaticBody2D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody2D[4], &physics_material_override) }
func (gdClass StaticBody2D) GetPhysicsMaterialOverride() PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodStaticBody2D[5]) }

type StaticBody3D struct{self *StaticBody3D; obj safeObject }
func NewStaticBody3D(ctx Context, at *StaticBody3D) StaticBody3D { if at == nil { at = new(StaticBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass StaticBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StaticBody3D) owner() cObject { return gdClass.obj.get() }
func (StaticBody3D) class() string { return "StaticBody3D\000" }

func (gdClass StaticBody3D) PhysicsBody3D() PhysicsBody3D { return PhysicsBody3D{obj:gdClass.obj} }

var methodStaticBody3D [6]cMethodBind
func (gdClass StaticBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PhysicsBody3D().virtual(rtype, name)
}
func (gdClass StaticBody3D) SetConstantLinearVelocity(vel Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody3D[0], &vel) }
func (gdClass StaticBody3D) SetConstantAngularVelocity(vel Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody3D[1], &vel) }
func (gdClass StaticBody3D) GetConstantLinearVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodStaticBody3D[2]) }
func (gdClass StaticBody3D) GetConstantAngularVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodStaticBody3D[3]) }
func (gdClass StaticBody3D) SetPhysicsMaterialOverride(physics_material_override PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodStaticBody3D[4], &physics_material_override) }
func (gdClass StaticBody3D) GetPhysicsMaterialOverride() PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodStaticBody3D[5]) }

type StreamPeer struct{self *StreamPeer; obj safeObject }
func NewStreamPeer(ctx Context, at *StreamPeer) StreamPeer { if at == nil { at = new(StreamPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StreamPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StreamPeer) owner() cObject { return gdClass.obj.get() }
func (StreamPeer) class() string { return "StreamPeer\000" }

func (gdClass StreamPeer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodStreamPeer [33]cMethodBind
func (gdClass StreamPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass StreamPeer) PutData(data []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[0], &data) }
func (gdClass StreamPeer) PutPartialData(data []byte) Array { return methodCall[Array](gdClass.obj.get(), methodStreamPeer[1], &data) }
func (gdClass StreamPeer) GetData(bytes int64) Array { return methodCall[Array](gdClass.obj.get(), methodStreamPeer[2], &bytes) }
func (gdClass StreamPeer) GetPartialData(bytes int64) Array { return methodCall[Array](gdClass.obj.get(), methodStreamPeer[3], &bytes) }
func (gdClass StreamPeer) GetAvailableBytes() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[4]) }
func (gdClass StreamPeer) SetBigEndian(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[5], &enable) }
func (gdClass StreamPeer) IsBigEndianEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodStreamPeer[6]) }
func (gdClass StreamPeer) Put8(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[7], &value) }
func (gdClass StreamPeer) PutU8(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[8], &value) }
func (gdClass StreamPeer) Put16(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[9], &value) }
func (gdClass StreamPeer) PutU16(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[10], &value) }
func (gdClass StreamPeer) Put32(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[11], &value) }
func (gdClass StreamPeer) PutU32(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[12], &value) }
func (gdClass StreamPeer) Put64(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[13], &value) }
func (gdClass StreamPeer) PutU64(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[14], &value) }
func (gdClass StreamPeer) PutFloat(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[15], &value) }
func (gdClass StreamPeer) PutDouble(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[16], &value) }
func (gdClass StreamPeer) PutString(value string)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[17], &value) }
func (gdClass StreamPeer) PutUtf8String(value string)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[18], &value) }
func (gdClass StreamPeer) PutVar(value any, full_objects bool)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeer[19], &value, &full_objects) }
func (gdClass StreamPeer) Get8() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[20]) }
func (gdClass StreamPeer) GetU8() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[21]) }
func (gdClass StreamPeer) Get16() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[22]) }
func (gdClass StreamPeer) GetU16() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[23]) }
func (gdClass StreamPeer) Get32() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[24]) }
func (gdClass StreamPeer) GetU32() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[25]) }
func (gdClass StreamPeer) Get64() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[26]) }
func (gdClass StreamPeer) GetU64() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeer[27]) }
func (gdClass StreamPeer) GetFloat() float64 { return methodCall[float64](gdClass.obj.get(), methodStreamPeer[28]) }
func (gdClass StreamPeer) GetDouble() float64 { return methodCall[float64](gdClass.obj.get(), methodStreamPeer[29]) }
func (gdClass StreamPeer) GetString(bytes int64) string { return methodCall[string](gdClass.obj.get(), methodStreamPeer[30], &bytes) }
func (gdClass StreamPeer) GetUtf8String(bytes int64) string { return methodCall[string](gdClass.obj.get(), methodStreamPeer[31], &bytes) }
func (gdClass StreamPeer) GetVar(allow_objects bool) any { return methodCall[any](gdClass.obj.get(), methodStreamPeer[32], &allow_objects) }

type StreamPeerBuffer struct{self *StreamPeerBuffer; obj safeObject }
func NewStreamPeerBuffer(ctx Context, at *StreamPeerBuffer) StreamPeerBuffer { if at == nil { at = new(StreamPeerBuffer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StreamPeerBuffer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StreamPeerBuffer) owner() cObject { return gdClass.obj.get() }
func (StreamPeerBuffer) class() string { return "StreamPeerBuffer\000" }

func (gdClass StreamPeerBuffer) StreamPeer() StreamPeer { return StreamPeer{obj:gdClass.obj} }

var methodStreamPeerBuffer [8]cMethodBind
func (gdClass StreamPeerBuffer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StreamPeer().virtual(rtype, name)
}
func (gdClass StreamPeerBuffer) SeekTo(position int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerBuffer[0], &position) }
func (gdClass StreamPeerBuffer) GetSize() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerBuffer[1]) }
func (gdClass StreamPeerBuffer) GetPosition() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerBuffer[2]) }
func (gdClass StreamPeerBuffer) Resize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerBuffer[3], &size) }
func (gdClass StreamPeerBuffer) SetDataArray(data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerBuffer[4], &data) }
func (gdClass StreamPeerBuffer) GetDataArray() []byte { return methodCall[[]byte](gdClass.obj.get(), methodStreamPeerBuffer[5]) }
func (gdClass StreamPeerBuffer) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerBuffer[6]) }
func (gdClass StreamPeerBuffer) Duplicate() StreamPeerBuffer { return methodCall[StreamPeerBuffer](gdClass.obj.get(), methodStreamPeerBuffer[7]) }

type StreamPeerExtension struct{self *StreamPeerExtension; obj safeObject }
func NewStreamPeerExtension(ctx Context, at *StreamPeerExtension) StreamPeerExtension { if at == nil { at = new(StreamPeerExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StreamPeerExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StreamPeerExtension) owner() cObject { return gdClass.obj.get() }
func (StreamPeerExtension) class() string { return "StreamPeerExtension\000" }

func (gdClass StreamPeerExtension) StreamPeer() StreamPeer { return StreamPeer{obj:gdClass.obj} }

func (gdClass StreamPeerExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetData(r_buffer []byte, r_bytes int64, r_received *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetData`)
		}
		return
	case "_get_partial_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPartialData(r_buffer []byte, r_bytes int64, r_received *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPartialData`)
		}
		return
	case "_put_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutData(p_data []byte, p_bytes int64, r_sent *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutData`)
		}
		return
	case "_put_partial_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutPartialData(p_data []byte, p_bytes int64, r_sent *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutPartialData`)
		}
		return
	case "_get_available_bytes":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAvailableBytes() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetAvailableBytes`)
		}
		return
	}
	return gdClass.StreamPeer().virtual(rtype, name)
}

type StreamPeerSSLStatus int64

const (
	StreamPeerSSLStatusDisconnected StreamPeerSSLStatus = 0
	StreamPeerSSLStatusHandshaking StreamPeerSSLStatus = 1
	StreamPeerSSLStatusConnected StreamPeerSSLStatus = 2
	StreamPeerSSLStatusError StreamPeerSSLStatus = 3
	StreamPeerSSLStatusErrorHostnameMismatch StreamPeerSSLStatus = 4
)

type StreamPeerSSL struct{self *StreamPeerSSL; obj safeObject }
func NewStreamPeerSSL(ctx Context, at *StreamPeerSSL) StreamPeerSSL { if at == nil { at = new(StreamPeerSSL) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StreamPeerSSL) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StreamPeerSSL) owner() cObject { return gdClass.obj.get() }
func (StreamPeerSSL) class() string { return "StreamPeerSSL\000" }

func (gdClass StreamPeerSSL) StreamPeer() StreamPeer { return StreamPeer{obj:gdClass.obj} }

var methodStreamPeerSSL [8]cMethodBind
func (gdClass StreamPeerSSL) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StreamPeer().virtual(rtype, name)
}
func (gdClass StreamPeerSSL) Poll()  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerSSL[0]) }
func (gdClass StreamPeerSSL) AcceptStream(stream StreamPeer, private_key CryptoKey, certificate X509Certificate, chain X509Certificate) int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerSSL[1], &stream, &private_key, &certificate, &chain) }
func (gdClass StreamPeerSSL) ConnectToStream(stream StreamPeer, validate_certs bool, for_hostname string, valid_certificate X509Certificate) int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerSSL[2], &stream, &validate_certs, &for_hostname, &valid_certificate) }
func (gdClass StreamPeerSSL) GetStatus() StreamPeerSSLStatus { return methodCall[StreamPeerSSLStatus](gdClass.obj.get(), methodStreamPeerSSL[3]) }
func (gdClass StreamPeerSSL) GetStream() StreamPeer { return methodCall[StreamPeer](gdClass.obj.get(), methodStreamPeerSSL[4]) }
func (gdClass StreamPeerSSL) DisconnectFromStream()  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerSSL[5]) }
func (gdClass StreamPeerSSL) SetBlockingHandshakeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerSSL[6], &enabled) }
func (gdClass StreamPeerSSL) IsBlockingHandshakeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodStreamPeerSSL[7]) }

type StreamPeerTCPStatus int64

const (
	StreamPeerTCPStatusNone StreamPeerTCPStatus = 0
	StreamPeerTCPStatusConnecting StreamPeerTCPStatus = 1
	StreamPeerTCPStatusConnected StreamPeerTCPStatus = 2
	StreamPeerTCPStatusError StreamPeerTCPStatus = 3
)

type StreamPeerTCP struct{self *StreamPeerTCP; obj safeObject }
func NewStreamPeerTCP(ctx Context, at *StreamPeerTCP) StreamPeerTCP { if at == nil { at = new(StreamPeerTCP) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StreamPeerTCP) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StreamPeerTCP) owner() cObject { return gdClass.obj.get() }
func (StreamPeerTCP) class() string { return "StreamPeerTCP\000" }

func (gdClass StreamPeerTCP) StreamPeer() StreamPeer { return StreamPeer{obj:gdClass.obj} }

var methodStreamPeerTCP [9]cMethodBind
func (gdClass StreamPeerTCP) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StreamPeer().virtual(rtype, name)
}
func (gdClass StreamPeerTCP) Bind(port int64, host string) int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerTCP[0], &port, &host) }
func (gdClass StreamPeerTCP) ConnectToHost(host string, port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerTCP[1], &host, &port) }
func (gdClass StreamPeerTCP) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerTCP[2]) }
func (gdClass StreamPeerTCP) GetStatus() StreamPeerTCPStatus { return methodCall[StreamPeerTCPStatus](gdClass.obj.get(), methodStreamPeerTCP[3]) }
func (gdClass StreamPeerTCP) GetConnectedHost() string { return methodCall[string](gdClass.obj.get(), methodStreamPeerTCP[4]) }
func (gdClass StreamPeerTCP) GetConnectedPort() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerTCP[5]) }
func (gdClass StreamPeerTCP) GetLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodStreamPeerTCP[6]) }
func (gdClass StreamPeerTCP) DisconnectFromHost()  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerTCP[7]) }
func (gdClass StreamPeerTCP) SetNoDelay(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodStreamPeerTCP[8], &enabled) }

type StyleBox struct{self *StyleBox; obj safeObject }
func NewStyleBox(ctx Context, at *StyleBox) StyleBox { if at == nil { at = new(StyleBox) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StyleBox) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StyleBox) owner() cObject { return gdClass.obj.get() }
func (StyleBox) class() string { return "StyleBox\000" }

func (gdClass StyleBox) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodStyleBox [9]cMethodBind
func (gdClass StyleBox) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_style_margin":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetStyleMargin(side Side) float64 }{}).Elem()) {
			return rtype.MethodByName(`GetStyleMargin`)
		}
		return
	case "_test_mask":
		if rtype.Implements(reflect.TypeOf([0]interface{ TestMask(point Vector2, rect Rect2) bool }{}).Elem()) {
			return rtype.MethodByName(`TestMask`)
		}
		return
	case "_get_center_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCenterSize() Vector2 }{}).Elem()) {
			return rtype.MethodByName(`GetCenterSize`)
		}
		return
	case "_get_draw_rect":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDrawRect(rect Rect2) Rect2 }{}).Elem()) {
			return rtype.MethodByName(`GetDrawRect`)
		}
		return
	case "_draw":
		if rtype.Implements(reflect.TypeOf([0]interface{ Draw(to_canvas_item RID, rect Rect2)  }{}).Elem()) {
			return rtype.MethodByName(`Draw`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass StyleBox) TestMask(point Vector2, rect Rect2) bool { return methodCall[bool](gdClass.obj.get(), methodStyleBox[0], &point, &rect) }
func (gdClass StyleBox) SetDefaultMargin(margin Side, offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBox[1], &margin, &offset) }
func (gdClass StyleBox) GetDefaultMargin(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBox[2], &margin) }
func (gdClass StyleBox) GetMargin(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBox[3], &margin) }
func (gdClass StyleBox) GetMinimumSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStyleBox[4]) }
func (gdClass StyleBox) GetCenterSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStyleBox[5]) }
func (gdClass StyleBox) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStyleBox[6]) }
func (gdClass StyleBox) GetCurrentItemDrawn() CanvasItem { return methodCall[CanvasItem](gdClass.obj.get(), methodStyleBox[7]) }
func (gdClass StyleBox) Draw(canvas_item RID, rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBox[8], &canvas_item, &rect) }

type StyleBoxEmpty struct{self *StyleBoxEmpty; obj safeObject }
func NewStyleBoxEmpty(ctx Context, at *StyleBoxEmpty) StyleBoxEmpty { if at == nil { at = new(StyleBoxEmpty) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StyleBoxEmpty) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StyleBoxEmpty) owner() cObject { return gdClass.obj.get() }
func (StyleBoxEmpty) class() string { return "StyleBoxEmpty\000" }

func (gdClass StyleBoxEmpty) StyleBox() StyleBox { return StyleBox{obj:gdClass.obj} }

func (gdClass StyleBoxEmpty) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StyleBox().virtual(rtype, name)
}

type StyleBoxFlat struct{self *StyleBoxFlat; obj safeObject }
func NewStyleBoxFlat(ctx Context, at *StyleBoxFlat) StyleBoxFlat { if at == nil { at = new(StyleBoxFlat) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StyleBoxFlat) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StyleBoxFlat) owner() cObject { return gdClass.obj.get() }
func (StyleBoxFlat) class() string { return "StyleBoxFlat\000" }

func (gdClass StyleBoxFlat) StyleBox() StyleBox { return StyleBox{obj:gdClass.obj} }

var methodStyleBoxFlat [34]cMethodBind
func (gdClass StyleBoxFlat) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StyleBox().virtual(rtype, name)
}
func (gdClass StyleBoxFlat) SetBgColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[0], &color) }
func (gdClass StyleBoxFlat) GetBgColor() Color { return methodCall[Color](gdClass.obj.get(), methodStyleBoxFlat[1]) }
func (gdClass StyleBoxFlat) SetBorderColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[2], &color) }
func (gdClass StyleBoxFlat) GetBorderColor() Color { return methodCall[Color](gdClass.obj.get(), methodStyleBoxFlat[3]) }
func (gdClass StyleBoxFlat) SetBorderWidthAll(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[4], &width) }
func (gdClass StyleBoxFlat) GetBorderWidthMin() int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxFlat[5]) }
func (gdClass StyleBoxFlat) SetBorderWidth(margin Side, width int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[6], &margin, &width) }
func (gdClass StyleBoxFlat) GetBorderWidth(margin Side) int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxFlat[7], &margin) }
func (gdClass StyleBoxFlat) SetBorderBlend(blend bool)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[8], &blend) }
func (gdClass StyleBoxFlat) GetBorderBlend() bool { return methodCall[bool](gdClass.obj.get(), methodStyleBoxFlat[9]) }
func (gdClass StyleBoxFlat) SetCornerRadiusIndividual(radius_top_left int64, radius_top_right int64, radius_bottom_right int64, radius_bottom_left int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[10], &radius_top_left, &radius_top_right, &radius_bottom_right, &radius_bottom_left) }
func (gdClass StyleBoxFlat) SetCornerRadiusAll(radius int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[11], &radius) }
func (gdClass StyleBoxFlat) SetCornerRadius(corner Corner, radius int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[12], &corner, &radius) }
func (gdClass StyleBoxFlat) GetCornerRadius(corner Corner) int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxFlat[13], &corner) }
func (gdClass StyleBoxFlat) SetExpandMargin(margin Side, size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[14], &margin, &size) }
func (gdClass StyleBoxFlat) SetExpandMarginAll(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[15], &size) }
func (gdClass StyleBoxFlat) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[16], &size_left, &size_top, &size_right, &size_bottom) }
func (gdClass StyleBoxFlat) GetExpandMargin(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxFlat[17], &margin) }
func (gdClass StyleBoxFlat) SetDrawCenter(draw_center bool)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[18], &draw_center) }
func (gdClass StyleBoxFlat) IsDrawCenterEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodStyleBoxFlat[19]) }
func (gdClass StyleBoxFlat) SetSkew(skew Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[20], &skew) }
func (gdClass StyleBoxFlat) GetSkew() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStyleBoxFlat[21]) }
func (gdClass StyleBoxFlat) SetShadowColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[22], &color) }
func (gdClass StyleBoxFlat) GetShadowColor() Color { return methodCall[Color](gdClass.obj.get(), methodStyleBoxFlat[23]) }
func (gdClass StyleBoxFlat) SetShadowSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[24], &size) }
func (gdClass StyleBoxFlat) GetShadowSize() int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxFlat[25]) }
func (gdClass StyleBoxFlat) SetShadowOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[26], &offset) }
func (gdClass StyleBoxFlat) GetShadowOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodStyleBoxFlat[27]) }
func (gdClass StyleBoxFlat) SetAntiAliased(anti_aliased bool)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[28], &anti_aliased) }
func (gdClass StyleBoxFlat) IsAntiAliased() bool { return methodCall[bool](gdClass.obj.get(), methodStyleBoxFlat[29]) }
func (gdClass StyleBoxFlat) SetAaSize(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[30], &size) }
func (gdClass StyleBoxFlat) GetAaSize() float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxFlat[31]) }
func (gdClass StyleBoxFlat) SetCornerDetail(detail int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxFlat[32], &detail) }
func (gdClass StyleBoxFlat) GetCornerDetail() int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxFlat[33]) }

type StyleBoxLine struct{self *StyleBoxLine; obj safeObject }
func NewStyleBoxLine(ctx Context, at *StyleBoxLine) StyleBoxLine { if at == nil { at = new(StyleBoxLine) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StyleBoxLine) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StyleBoxLine) owner() cObject { return gdClass.obj.get() }
func (StyleBoxLine) class() string { return "StyleBoxLine\000" }

func (gdClass StyleBoxLine) StyleBox() StyleBox { return StyleBox{obj:gdClass.obj} }

var methodStyleBoxLine [10]cMethodBind
func (gdClass StyleBoxLine) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StyleBox().virtual(rtype, name)
}
func (gdClass StyleBoxLine) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxLine[0], &color) }
func (gdClass StyleBoxLine) GetColor() Color { return methodCall[Color](gdClass.obj.get(), methodStyleBoxLine[1]) }
func (gdClass StyleBoxLine) SetThickness(thickness int64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxLine[2], &thickness) }
func (gdClass StyleBoxLine) GetThickness() int64 { return methodCall[int64](gdClass.obj.get(), methodStyleBoxLine[3]) }
func (gdClass StyleBoxLine) SetGrowBegin(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxLine[4], &offset) }
func (gdClass StyleBoxLine) GetGrowBegin() float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxLine[5]) }
func (gdClass StyleBoxLine) SetGrowEnd(offset float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxLine[6], &offset) }
func (gdClass StyleBoxLine) GetGrowEnd() float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxLine[7]) }
func (gdClass StyleBoxLine) SetVertical(vertical bool)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxLine[8], &vertical) }
func (gdClass StyleBoxLine) IsVertical() bool { return methodCall[bool](gdClass.obj.get(), methodStyleBoxLine[9]) }

type StyleBoxTextureAxisStretchMode int64

const (
	StyleBoxTextureAxisStretchModeStretch StyleBoxTextureAxisStretchMode = 0
	StyleBoxTextureAxisStretchModeTile StyleBoxTextureAxisStretchMode = 1
	StyleBoxTextureAxisStretchModeTileFit StyleBoxTextureAxisStretchMode = 2
)

type StyleBoxTexture struct{self *StyleBoxTexture; obj safeObject }
func NewStyleBoxTexture(ctx Context, at *StyleBoxTexture) StyleBoxTexture { if at == nil { at = new(StyleBoxTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass StyleBoxTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass StyleBoxTexture) owner() cObject { return gdClass.obj.get() }
func (StyleBoxTexture) class() string { return "StyleBoxTexture\000" }

func (gdClass StyleBoxTexture) StyleBox() StyleBox { return StyleBox{obj:gdClass.obj} }

var methodStyleBoxTexture [18]cMethodBind
func (gdClass StyleBoxTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.StyleBox().virtual(rtype, name)
}
func (gdClass StyleBoxTexture) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[0], &texture) }
func (gdClass StyleBoxTexture) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodStyleBoxTexture[1]) }
func (gdClass StyleBoxTexture) SetMarginSize(margin Side, size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[2], &margin, &size) }
func (gdClass StyleBoxTexture) GetMarginSize(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxTexture[3], &margin) }
func (gdClass StyleBoxTexture) SetExpandMarginSize(margin Side, size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[4], &margin, &size) }
func (gdClass StyleBoxTexture) SetExpandMarginAll(size float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[5], &size) }
func (gdClass StyleBoxTexture) SetExpandMarginIndividual(size_left float64, size_top float64, size_right float64, size_bottom float64)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[6], &size_left, &size_top, &size_right, &size_bottom) }
func (gdClass StyleBoxTexture) GetExpandMarginSize(margin Side) float64 { return methodCall[float64](gdClass.obj.get(), methodStyleBoxTexture[7], &margin) }
func (gdClass StyleBoxTexture) SetRegionRect(region Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[8], &region) }
func (gdClass StyleBoxTexture) GetRegionRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodStyleBoxTexture[9]) }
func (gdClass StyleBoxTexture) SetDrawCenter(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[10], &enable) }
func (gdClass StyleBoxTexture) IsDrawCenterEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodStyleBoxTexture[11]) }
func (gdClass StyleBoxTexture) SetModulate(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[12], &color) }
func (gdClass StyleBoxTexture) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodStyleBoxTexture[13]) }
func (gdClass StyleBoxTexture) SetHAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[14], &mode) }
func (gdClass StyleBoxTexture) GetHAxisStretchMode() StyleBoxTextureAxisStretchMode { return methodCall[StyleBoxTextureAxisStretchMode](gdClass.obj.get(), methodStyleBoxTexture[15]) }
func (gdClass StyleBoxTexture) SetVAxisStretchMode(mode StyleBoxTextureAxisStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodStyleBoxTexture[16], &mode) }
func (gdClass StyleBoxTexture) GetVAxisStretchMode() StyleBoxTextureAxisStretchMode { return methodCall[StyleBoxTextureAxisStretchMode](gdClass.obj.get(), methodStyleBoxTexture[17]) }

type SubViewportClearMode int64

const (
	SubViewportClearModeAlways SubViewportClearMode = 0
	SubViewportClearModeNever SubViewportClearMode = 1
	SubViewportClearModeOnce SubViewportClearMode = 2
)

type SubViewportUpdateMode int64

const (
	SubViewportUpdateDisabled SubViewportUpdateMode = 0
	SubViewportUpdateOnce SubViewportUpdateMode = 1
	SubViewportUpdateWhenVisible SubViewportUpdateMode = 2
	SubViewportUpdateWhenParentVisible SubViewportUpdateMode = 3
	SubViewportUpdateAlways SubViewportUpdateMode = 4
)

type SubViewport struct{self *SubViewport; obj safeObject }
func NewSubViewport(ctx Context, at *SubViewport) SubViewport { if at == nil { at = new(SubViewport) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SubViewport) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SubViewport) owner() cObject { return gdClass.obj.get() }
func (SubViewport) class() string { return "SubViewport\000" }

func (gdClass SubViewport) Viewport() Viewport { return Viewport{obj:gdClass.obj} }

var methodSubViewport [10]cMethodBind
func (gdClass SubViewport) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Viewport().virtual(rtype, name)
}
func (gdClass SubViewport) SetSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewport[0], &size) }
func (gdClass SubViewport) GetSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodSubViewport[1]) }
func (gdClass SubViewport) SetSize2dOverride(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewport[2], &size) }
func (gdClass SubViewport) GetSize2dOverride() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodSubViewport[3]) }
func (gdClass SubViewport) SetSize2dOverrideStretch(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewport[4], &enable) }
func (gdClass SubViewport) IsSize2dOverrideStretchEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSubViewport[5]) }
func (gdClass SubViewport) SetUpdateMode(mode SubViewportUpdateMode)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewport[6], &mode) }
func (gdClass SubViewport) GetUpdateMode() SubViewportUpdateMode { return methodCall[SubViewportUpdateMode](gdClass.obj.get(), methodSubViewport[7]) }
func (gdClass SubViewport) SetClearMode(mode SubViewportClearMode)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewport[8], &mode) }
func (gdClass SubViewport) GetClearMode() SubViewportClearMode { return methodCall[SubViewportClearMode](gdClass.obj.get(), methodSubViewport[9]) }

type SubViewportContainer struct{self *SubViewportContainer; obj safeObject }
func NewSubViewportContainer(ctx Context, at *SubViewportContainer) SubViewportContainer { if at == nil { at = new(SubViewportContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass SubViewportContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SubViewportContainer) owner() cObject { return gdClass.obj.get() }
func (SubViewportContainer) class() string { return "SubViewportContainer\000" }

func (gdClass SubViewportContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodSubViewportContainer [4]cMethodBind
func (gdClass SubViewportContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass SubViewportContainer) SetStretch(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewportContainer[0], &enable) }
func (gdClass SubViewportContainer) IsStretchEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodSubViewportContainer[1]) }
func (gdClass SubViewportContainer) SetStretchShrink(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodSubViewportContainer[2], &amount) }
func (gdClass SubViewportContainer) GetStretchShrink() int64 { return methodCall[int64](gdClass.obj.get(), methodSubViewportContainer[3]) }

type SurfaceToolCustomFormat int64

const (
	SurfaceToolCustomRgba8Unorm SurfaceToolCustomFormat = 0
	SurfaceToolCustomRgba8Snorm SurfaceToolCustomFormat = 1
	SurfaceToolCustomRgHalf SurfaceToolCustomFormat = 2
	SurfaceToolCustomRgbaHalf SurfaceToolCustomFormat = 3
	SurfaceToolCustomRFloat SurfaceToolCustomFormat = 4
	SurfaceToolCustomRgFloat SurfaceToolCustomFormat = 5
	SurfaceToolCustomRgbFloat SurfaceToolCustomFormat = 6
	SurfaceToolCustomRgbaFloat SurfaceToolCustomFormat = 7
	SurfaceToolCustomMax SurfaceToolCustomFormat = 8
)

type SurfaceToolSkinWeightCount int64

const (
	SurfaceToolSkin4Weights SurfaceToolSkinWeightCount = 0
	SurfaceToolSkin8Weights SurfaceToolSkinWeightCount = 1
)

type SurfaceTool struct{self *SurfaceTool; obj safeObject }
func NewSurfaceTool(ctx Context, at *SurfaceTool) SurfaceTool { if at == nil { at = new(SurfaceTool) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SurfaceTool) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SurfaceTool) owner() cObject { return gdClass.obj.get() }
func (SurfaceTool) class() string { return "SurfaceTool\000" }

func (gdClass SurfaceTool) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodSurfaceTool [32]cMethodBind
func (gdClass SurfaceTool) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass SurfaceTool) SetSkinWeightCount(count SurfaceToolSkinWeightCount)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[0], &count) }
func (gdClass SurfaceTool) GetSkinWeightCount() SurfaceToolSkinWeightCount { return methodCall[SurfaceToolSkinWeightCount](gdClass.obj.get(), methodSurfaceTool[1]) }
func (gdClass SurfaceTool) SetCustomFormat(channel_index int64, format SurfaceToolCustomFormat)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[2], &channel_index, &format) }
func (gdClass SurfaceTool) GetCustomFormat(channel_index int64) SurfaceToolCustomFormat { return methodCall[SurfaceToolCustomFormat](gdClass.obj.get(), methodSurfaceTool[3], &channel_index) }
func (gdClass SurfaceTool) Begin(primitive MeshPrimitiveType)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[4], &primitive) }
func (gdClass SurfaceTool) AddVertex(vertex Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[5], &vertex) }
func (gdClass SurfaceTool) SetColor(color Color)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[6], &color) }
func (gdClass SurfaceTool) SetNormal(normal Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[7], &normal) }
func (gdClass SurfaceTool) SetTangent(tangent Plane)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[8], &tangent) }
func (gdClass SurfaceTool) SetUv(uv Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[9], &uv) }
func (gdClass SurfaceTool) SetUv2(uv2 Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[10], &uv2) }
func (gdClass SurfaceTool) SetBones(bones []int32)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[11], &bones) }
func (gdClass SurfaceTool) SetWeights(weights []float32)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[12], &weights) }
func (gdClass SurfaceTool) SetCustom(channel_index int64, custom_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[13], &channel_index, &custom_color) }
func (gdClass SurfaceTool) SetSmoothGroup(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[14], &index) }
func (gdClass SurfaceTool) AddTriangleFan(vertices []Vector3, uvs []Vector2, colors []Color, uv2s []Vector2, normals []Vector3, tangents Array)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[15], &vertices, &uvs, &colors, &uv2s, &normals, &tangents) }
func (gdClass SurfaceTool) AddIndex(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[16], &index) }
func (gdClass SurfaceTool) Index()  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[17]) }
func (gdClass SurfaceTool) Deindex()  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[18]) }
func (gdClass SurfaceTool) GenerateNormals(flip bool)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[19], &flip) }
func (gdClass SurfaceTool) GenerateTangents()  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[20]) }
func (gdClass SurfaceTool) OptimizeIndicesForCache()  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[21]) }
func (gdClass SurfaceTool) GetAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodSurfaceTool[22]) }
func (gdClass SurfaceTool) GenerateLod(nd_threshold float64, target_index_count int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodSurfaceTool[23], &nd_threshold, &target_index_count) }
func (gdClass SurfaceTool) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[24], &material) }
func (gdClass SurfaceTool) GetPrimitiveType() MeshPrimitiveType { return methodCall[MeshPrimitiveType](gdClass.obj.get(), methodSurfaceTool[25]) }
func (gdClass SurfaceTool) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[26]) }
func (gdClass SurfaceTool) CreateFrom(existing Mesh, surface int64)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[27], &existing, &surface) }
func (gdClass SurfaceTool) CreateFromBlendShape(existing Mesh, surface int64, blend_shape string)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[28], &existing, &surface, &blend_shape) }
func (gdClass SurfaceTool) AppendFrom(existing Mesh, surface int64, transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodSurfaceTool[29], &existing, &surface, &transform) }
func (gdClass SurfaceTool) Commit(existing ArrayMesh, flags int64) ArrayMesh { return methodCall[ArrayMesh](gdClass.obj.get(), methodSurfaceTool[30], &existing, &flags) }
func (gdClass SurfaceTool) CommitToArrays() Array { return methodCall[Array](gdClass.obj.get(), methodSurfaceTool[31]) }

type SyntaxHighlighter struct{self *SyntaxHighlighter; obj safeObject }
func NewSyntaxHighlighter(ctx Context, at *SyntaxHighlighter) SyntaxHighlighter { if at == nil { at = new(SyntaxHighlighter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SyntaxHighlighter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SyntaxHighlighter) owner() cObject { return gdClass.obj.get() }
func (SyntaxHighlighter) class() string { return "SyntaxHighlighter\000" }

func (gdClass SyntaxHighlighter) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodSyntaxHighlighter [4]cMethodBind
func (gdClass SyntaxHighlighter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_line_syntax_highlighting":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLineSyntaxHighlighting(line int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`GetLineSyntaxHighlighting`)
		}
		return
	case "_clear_highlighting_cache":
		if rtype.Implements(reflect.TypeOf([0]interface{ ClearHighlightingCache()  }{}).Elem()) {
			return rtype.MethodByName(`ClearHighlightingCache`)
		}
		return
	case "_update_cache":
		if rtype.Implements(reflect.TypeOf([0]interface{ UpdateCache()  }{}).Elem()) {
			return rtype.MethodByName(`UpdateCache`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass SyntaxHighlighter) GetLineSyntaxHighlighting(line int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodSyntaxHighlighter[0], &line) }
func (gdClass SyntaxHighlighter) UpdateCache()  { methodCall[struct{}](gdClass.obj.get(), methodSyntaxHighlighter[1]) }
func (gdClass SyntaxHighlighter) ClearHighlightingCache()  { methodCall[struct{}](gdClass.obj.get(), methodSyntaxHighlighter[2]) }
func (gdClass SyntaxHighlighter) GetTextEdit() TextEdit { return methodCall[TextEdit](gdClass.obj.get(), methodSyntaxHighlighter[3]) }

type SystemFont struct{self *SystemFont; obj safeObject }
func NewSystemFont(ctx Context, at *SystemFont) SystemFont { if at == nil { at = new(SystemFont) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass SystemFont) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass SystemFont) owner() cObject { return gdClass.obj.get() }
func (SystemFont) class() string { return "SystemFont\000" }

func (gdClass SystemFont) Font() Font { return Font{obj:gdClass.obj} }

var methodSystemFont [17]cMethodBind
func (gdClass SystemFont) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Font().virtual(rtype, name)
}
func (gdClass SystemFont) SetAntialiasing(antialiasing TextServerFontAntialiasing)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[0], &antialiasing) }
func (gdClass SystemFont) GetAntialiasing() TextServerFontAntialiasing { return methodCall[TextServerFontAntialiasing](gdClass.obj.get(), methodSystemFont[1]) }
func (gdClass SystemFont) SetGenerateMipmaps(generate_mipmaps bool)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[2], &generate_mipmaps) }
func (gdClass SystemFont) GetGenerateMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodSystemFont[3]) }
func (gdClass SystemFont) SetForceAutohinter(force_autohinter bool)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[4], &force_autohinter) }
func (gdClass SystemFont) IsForceAutohinter() bool { return methodCall[bool](gdClass.obj.get(), methodSystemFont[5]) }
func (gdClass SystemFont) SetHinting(hinting TextServerHinting)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[6], &hinting) }
func (gdClass SystemFont) GetHinting() TextServerHinting { return methodCall[TextServerHinting](gdClass.obj.get(), methodSystemFont[7]) }
func (gdClass SystemFont) SetSubpixelPositioning(subpixel_positioning TextServerSubpixelPositioning)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[8], &subpixel_positioning) }
func (gdClass SystemFont) GetSubpixelPositioning() TextServerSubpixelPositioning { return methodCall[TextServerSubpixelPositioning](gdClass.obj.get(), methodSystemFont[9]) }
func (gdClass SystemFont) SetMultichannelSignedDistanceField(msdf bool)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[10], &msdf) }
func (gdClass SystemFont) IsMultichannelSignedDistanceField() bool { return methodCall[bool](gdClass.obj.get(), methodSystemFont[11]) }
func (gdClass SystemFont) SetOversampling(oversampling float64)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[12], &oversampling) }
func (gdClass SystemFont) GetOversampling() float64 { return methodCall[float64](gdClass.obj.get(), methodSystemFont[13]) }
func (gdClass SystemFont) GetFontNames() []string { return methodCall[[]string](gdClass.obj.get(), methodSystemFont[14]) }
func (gdClass SystemFont) SetFontNames(names []string)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[15], &names) }
func (gdClass SystemFont) SetFontStyle(style TextServerFontStyle)  { methodCall[struct{}](gdClass.obj.get(), methodSystemFont[16], &style) }

type TCPServer struct{self *TCPServer; obj safeObject }
func NewTCPServer(ctx Context, at *TCPServer) TCPServer { if at == nil { at = new(TCPServer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TCPServer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TCPServer) owner() cObject { return gdClass.obj.get() }
func (TCPServer) class() string { return "TCPServer\000" }

func (gdClass TCPServer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodTCPServer [6]cMethodBind
func (gdClass TCPServer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass TCPServer) Listen(port int64, bind_address string) int64 { return methodCall[int64](gdClass.obj.get(), methodTCPServer[0], &port, &bind_address) }
func (gdClass TCPServer) IsConnectionAvailable() bool { return methodCall[bool](gdClass.obj.get(), methodTCPServer[1]) }
func (gdClass TCPServer) IsListening() bool { return methodCall[bool](gdClass.obj.get(), methodTCPServer[2]) }
func (gdClass TCPServer) GetLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodTCPServer[3]) }
func (gdClass TCPServer) TakeConnection() StreamPeerTCP { return methodCall[StreamPeerTCP](gdClass.obj.get(), methodTCPServer[4]) }
func (gdClass TCPServer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodTCPServer[5]) }

type TabBarAlignmentMode int64

const (
	TabBarAlignmentLeft TabBarAlignmentMode = 0
	TabBarAlignmentCenter TabBarAlignmentMode = 1
	TabBarAlignmentRight TabBarAlignmentMode = 2
	TabBarAlignmentMax TabBarAlignmentMode = 3
)

type TabBarCloseButtonDisplayPolicy int64

const (
	TabBarCloseButtonShowNever TabBarCloseButtonDisplayPolicy = 0
	TabBarCloseButtonShowActiveOnly TabBarCloseButtonDisplayPolicy = 1
	TabBarCloseButtonShowAlways TabBarCloseButtonDisplayPolicy = 2
	TabBarCloseButtonMax TabBarCloseButtonDisplayPolicy = 3
)

type TabBar struct{self *TabBar; obj safeObject }
func NewTabBar(ctx Context, at *TabBar) TabBar { if at == nil { at = new(TabBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TabBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TabBar) owner() cObject { return gdClass.obj.get() }
func (TabBar) class() string { return "TabBar\000" }

func (gdClass TabBar) Control() Control { return Control{obj:gdClass.obj} }

var methodTabBar [45]cMethodBind
func (gdClass TabBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass TabBar) SetTabCount(count int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[0], &count) }
func (gdClass TabBar) GetTabCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[1]) }
func (gdClass TabBar) SetCurrentTab(tab_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[2], &tab_idx) }
func (gdClass TabBar) GetCurrentTab() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[3]) }
func (gdClass TabBar) GetPreviousTab() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[4]) }
func (gdClass TabBar) SetTabTitle(tab_idx int64, title string)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[5], &tab_idx, &title) }
func (gdClass TabBar) GetTabTitle(tab_idx int64) string { return methodCall[string](gdClass.obj.get(), methodTabBar[6], &tab_idx) }
func (gdClass TabBar) SetTabTextDirection(tab_idx int64, direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[7], &tab_idx, &direction) }
func (gdClass TabBar) GetTabTextDirection(tab_idx int64) ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodTabBar[8], &tab_idx) }
func (gdClass TabBar) SetTabLanguage(tab_idx int64, language string)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[9], &tab_idx, &language) }
func (gdClass TabBar) GetTabLanguage(tab_idx int64) string { return methodCall[string](gdClass.obj.get(), methodTabBar[10], &tab_idx) }
func (gdClass TabBar) SetTabIcon(tab_idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[11], &tab_idx, &icon) }
func (gdClass TabBar) GetTabIcon(tab_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTabBar[12], &tab_idx) }
func (gdClass TabBar) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[13], &tab_idx, &icon) }
func (gdClass TabBar) GetTabButtonIcon(tab_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTabBar[14], &tab_idx) }
func (gdClass TabBar) SetTabDisabled(tab_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[15], &tab_idx, &disabled) }
func (gdClass TabBar) IsTabDisabled(tab_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[16], &tab_idx) }
func (gdClass TabBar) SetTabHidden(tab_idx int64, hidden bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[17], &tab_idx, &hidden) }
func (gdClass TabBar) IsTabHidden(tab_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[18], &tab_idx) }
func (gdClass TabBar) RemoveTab(tab_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[19], &tab_idx) }
func (gdClass TabBar) AddTab(title string, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[20], &title, &icon) }
func (gdClass TabBar) GetTabIdxAtPoint(point Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[21], &point) }
func (gdClass TabBar) SetTabAlignment(alignment TabBarAlignmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[22], &alignment) }
func (gdClass TabBar) GetTabAlignment() TabBarAlignmentMode { return methodCall[TabBarAlignmentMode](gdClass.obj.get(), methodTabBar[23]) }
func (gdClass TabBar) SetClipTabs(clip_tabs bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[24], &clip_tabs) }
func (gdClass TabBar) GetClipTabs() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[25]) }
func (gdClass TabBar) GetTabOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[26]) }
func (gdClass TabBar) GetOffsetButtonsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[27]) }
func (gdClass TabBar) EnsureTabVisible(idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[28], &idx) }
func (gdClass TabBar) GetTabRect(tab_idx int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTabBar[29], &tab_idx) }
func (gdClass TabBar) MoveTab(from int64, to int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[30], &from, &to) }
func (gdClass TabBar) SetTabCloseDisplayPolicy(policy TabBarCloseButtonDisplayPolicy)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[31], &policy) }
func (gdClass TabBar) GetTabCloseDisplayPolicy() TabBarCloseButtonDisplayPolicy { return methodCall[TabBarCloseButtonDisplayPolicy](gdClass.obj.get(), methodTabBar[32]) }
func (gdClass TabBar) SetMaxTabWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[33], &width) }
func (gdClass TabBar) GetMaxTabWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[34]) }
func (gdClass TabBar) SetScrollingEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[35], &enabled) }
func (gdClass TabBar) GetScrollingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[36]) }
func (gdClass TabBar) SetDragToRearrangeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[37], &enabled) }
func (gdClass TabBar) GetDragToRearrangeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[38]) }
func (gdClass TabBar) SetTabsRearrangeGroup(group_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[39], &group_id) }
func (gdClass TabBar) GetTabsRearrangeGroup() int64 { return methodCall[int64](gdClass.obj.get(), methodTabBar[40]) }
func (gdClass TabBar) SetScrollToSelected(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[41], &enabled) }
func (gdClass TabBar) GetScrollToSelected() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[42]) }
func (gdClass TabBar) SetSelectWithRmb(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabBar[43], &enabled) }
func (gdClass TabBar) GetSelectWithRmb() bool { return methodCall[bool](gdClass.obj.get(), methodTabBar[44]) }

type TabContainer struct{self *TabContainer; obj safeObject }
func NewTabContainer(ctx Context, at *TabContainer) TabContainer { if at == nil { at = new(TabContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TabContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TabContainer) owner() cObject { return gdClass.obj.get() }
func (TabContainer) class() string { return "TabContainer\000" }

func (gdClass TabContainer) Container() Container { return Container{obj:gdClass.obj} }

var methodTabContainer [34]cMethodBind
func (gdClass TabContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Container().virtual(rtype, name)
}
func (gdClass TabContainer) GetTabCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[0]) }
func (gdClass TabContainer) SetCurrentTab(tab_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[1], &tab_idx) }
func (gdClass TabContainer) GetCurrentTab() int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[2]) }
func (gdClass TabContainer) GetPreviousTab() int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[3]) }
func (gdClass TabContainer) GetCurrentTabControl() Control { return methodCall[Control](gdClass.obj.get(), methodTabContainer[4]) }
func (gdClass TabContainer) GetTabControl(tab_idx int64) Control { return methodCall[Control](gdClass.obj.get(), methodTabContainer[5], &tab_idx) }
func (gdClass TabContainer) SetTabAlignment(alignment TabBarAlignmentMode)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[6], &alignment) }
func (gdClass TabContainer) GetTabAlignment() TabBarAlignmentMode { return methodCall[TabBarAlignmentMode](gdClass.obj.get(), methodTabContainer[7]) }
func (gdClass TabContainer) SetClipTabs(clip_tabs bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[8], &clip_tabs) }
func (gdClass TabContainer) GetClipTabs() bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[9]) }
func (gdClass TabContainer) SetTabsVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[10], &visible) }
func (gdClass TabContainer) AreTabsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[11]) }
func (gdClass TabContainer) SetAllTabsInFront(is_front bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[12], &is_front) }
func (gdClass TabContainer) IsAllTabsInFront() bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[13]) }
func (gdClass TabContainer) SetTabTitle(tab_idx int64, title string)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[14], &tab_idx, &title) }
func (gdClass TabContainer) GetTabTitle(tab_idx int64) string { return methodCall[string](gdClass.obj.get(), methodTabContainer[15], &tab_idx) }
func (gdClass TabContainer) SetTabIcon(tab_idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[16], &tab_idx, &icon) }
func (gdClass TabContainer) GetTabIcon(tab_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTabContainer[17], &tab_idx) }
func (gdClass TabContainer) SetTabDisabled(tab_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[18], &tab_idx, &disabled) }
func (gdClass TabContainer) IsTabDisabled(tab_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[19], &tab_idx) }
func (gdClass TabContainer) SetTabHidden(tab_idx int64, hidden bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[20], &tab_idx, &hidden) }
func (gdClass TabContainer) IsTabHidden(tab_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[21], &tab_idx) }
func (gdClass TabContainer) SetTabButtonIcon(tab_idx int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[22], &tab_idx, &icon) }
func (gdClass TabContainer) GetTabButtonIcon(tab_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTabContainer[23], &tab_idx) }
func (gdClass TabContainer) GetTabIdxAtPoint(point Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[24], &point) }
func (gdClass TabContainer) GetTabIdxFromControl(control Control) int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[25], &control) }
func (gdClass TabContainer) SetPopup(popup Node)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[26], &popup) }
func (gdClass TabContainer) GetPopup() Popup { return methodCall[Popup](gdClass.obj.get(), methodTabContainer[27]) }
func (gdClass TabContainer) SetDragToRearrangeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[28], &enabled) }
func (gdClass TabContainer) GetDragToRearrangeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[29]) }
func (gdClass TabContainer) SetTabsRearrangeGroup(group_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[30], &group_id) }
func (gdClass TabContainer) GetTabsRearrangeGroup() int64 { return methodCall[int64](gdClass.obj.get(), methodTabContainer[31]) }
func (gdClass TabContainer) SetUseHiddenTabsForMinSize(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTabContainer[32], &enabled) }
func (gdClass TabContainer) GetUseHiddenTabsForMinSize() bool { return methodCall[bool](gdClass.obj.get(), methodTabContainer[33]) }

type TextEditMenuItems int64

const (
	TextEditMenuCut TextEditMenuItems = 0
	TextEditMenuCopy TextEditMenuItems = 1
	TextEditMenuPaste TextEditMenuItems = 2
	TextEditMenuClear TextEditMenuItems = 3
	TextEditMenuSelectAll TextEditMenuItems = 4
	TextEditMenuUndo TextEditMenuItems = 5
	TextEditMenuRedo TextEditMenuItems = 6
	TextEditMenuDirInherited TextEditMenuItems = 7
	TextEditMenuDirAuto TextEditMenuItems = 8
	TextEditMenuDirLtr TextEditMenuItems = 9
	TextEditMenuDirRtl TextEditMenuItems = 10
	TextEditMenuDisplayUcc TextEditMenuItems = 11
	TextEditMenuInsertLrm TextEditMenuItems = 12
	TextEditMenuInsertRlm TextEditMenuItems = 13
	TextEditMenuInsertLre TextEditMenuItems = 14
	TextEditMenuInsertRle TextEditMenuItems = 15
	TextEditMenuInsertLro TextEditMenuItems = 16
	TextEditMenuInsertRlo TextEditMenuItems = 17
	TextEditMenuInsertPdf TextEditMenuItems = 18
	TextEditMenuInsertAlm TextEditMenuItems = 19
	TextEditMenuInsertLri TextEditMenuItems = 20
	TextEditMenuInsertRli TextEditMenuItems = 21
	TextEditMenuInsertFsi TextEditMenuItems = 22
	TextEditMenuInsertPdi TextEditMenuItems = 23
	TextEditMenuInsertZwj TextEditMenuItems = 24
	TextEditMenuInsertZwnj TextEditMenuItems = 25
	TextEditMenuInsertWj TextEditMenuItems = 26
	TextEditMenuInsertShy TextEditMenuItems = 27
	TextEditMenuMax TextEditMenuItems = 28
)

type TextEditSearchFlags int64

const (
	TextEditSearchMatchCase TextEditSearchFlags = 1
	TextEditSearchWholeWords TextEditSearchFlags = 2
	TextEditSearchBackwards TextEditSearchFlags = 4
)

type TextEditCaretType int64

const (
	TextEditCaretTypeLine TextEditCaretType = 0
	TextEditCaretTypeBlock TextEditCaretType = 1
)

type TextEditSelectionMode int64

const (
	TextEditSelectionModeNone TextEditSelectionMode = 0
	TextEditSelectionModeShift TextEditSelectionMode = 1
	TextEditSelectionModePointer TextEditSelectionMode = 2
	TextEditSelectionModeWord TextEditSelectionMode = 3
	TextEditSelectionModeLine TextEditSelectionMode = 4
)

type TextEditLineWrappingMode int64

const (
	TextEditLineWrappingNone TextEditLineWrappingMode = 0
	TextEditLineWrappingBoundary TextEditLineWrappingMode = 1
)

type TextEditGutterType int64

const (
	TextEditGutterTypeString TextEditGutterType = 0
	TextEditGutterTypeIcon TextEditGutterType = 1
	TextEditGutterTypeCustom TextEditGutterType = 2
)

type TextEdit struct{self *TextEdit; obj safeObject }
func NewTextEdit(ctx Context, at *TextEdit) TextEdit { if at == nil { at = new(TextEdit) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TextEdit) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextEdit) owner() cObject { return gdClass.obj.get() }
func (TextEdit) class() string { return "TextEdit\000" }

func (gdClass TextEdit) Control() Control { return Control{obj:gdClass.obj} }

var methodTextEdit [189]cMethodBind
func (gdClass TextEdit) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_handle_unicode_input":
		if rtype.Implements(reflect.TypeOf([0]interface{ HandleUnicodeInput(unicode_char int64)  }{}).Elem()) {
			return rtype.MethodByName(`HandleUnicodeInput`)
		}
		return
	case "_backspace":
		if rtype.Implements(reflect.TypeOf([0]interface{ Backspace()  }{}).Elem()) {
			return rtype.MethodByName(`Backspace`)
		}
		return
	case "_cut":
		if rtype.Implements(reflect.TypeOf([0]interface{ Cut()  }{}).Elem()) {
			return rtype.MethodByName(`Cut`)
		}
		return
	case "_copy":
		if rtype.Implements(reflect.TypeOf([0]interface{ Copy()  }{}).Elem()) {
			return rtype.MethodByName(`Copy`)
		}
		return
	case "_paste":
		if rtype.Implements(reflect.TypeOf([0]interface{ Paste()  }{}).Elem()) {
			return rtype.MethodByName(`Paste`)
		}
		return
	case "_paste_primary_clipboard":
		if rtype.Implements(reflect.TypeOf([0]interface{ PastePrimaryClipboard()  }{}).Elem()) {
			return rtype.MethodByName(`PastePrimaryClipboard`)
		}
		return
	}
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass TextEdit) HasImeText() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[0]) }
func (gdClass TextEdit) SetEditable(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[1], &enabled) }
func (gdClass TextEdit) IsEditable() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[2]) }
func (gdClass TextEdit) SetTextDirection(direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[3], &direction) }
func (gdClass TextEdit) GetTextDirection() ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodTextEdit[4]) }
func (gdClass TextEdit) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[5], &language) }
func (gdClass TextEdit) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodTextEdit[6]) }
func (gdClass TextEdit) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[7], &parser) }
func (gdClass TextEdit) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodTextEdit[8]) }
func (gdClass TextEdit) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[9], &args) }
func (gdClass TextEdit) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodTextEdit[10]) }
func (gdClass TextEdit) SetTabSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[11], &size) }
func (gdClass TextEdit) GetTabSize() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[12]) }
func (gdClass TextEdit) SetOvertypeModeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[13], &enabled) }
func (gdClass TextEdit) IsOvertypeModeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[14]) }
func (gdClass TextEdit) SetContextMenuEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[15], &enabled) }
func (gdClass TextEdit) IsContextMenuEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[16]) }
func (gdClass TextEdit) SetShortcutKeysEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[17], &enabled) }
func (gdClass TextEdit) IsShortcutKeysEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[18]) }
func (gdClass TextEdit) SetVirtualKeyboardEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[19], &enabled) }
func (gdClass TextEdit) IsVirtualKeyboardEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[20]) }
func (gdClass TextEdit) SetMiddleMousePasteEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[21], &enabled) }
func (gdClass TextEdit) IsMiddleMousePasteEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[22]) }
func (gdClass TextEdit) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[23]) }
func (gdClass TextEdit) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[24], &text) }
func (gdClass TextEdit) GetText() string { return methodCall[string](gdClass.obj.get(), methodTextEdit[25]) }
func (gdClass TextEdit) GetLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[26]) }
func (gdClass TextEdit) SetPlaceholder(text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[27], &text) }
func (gdClass TextEdit) GetPlaceholder() string { return methodCall[string](gdClass.obj.get(), methodTextEdit[28]) }
func (gdClass TextEdit) SetLine(line int64, new_text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[29], &line, &new_text) }
func (gdClass TextEdit) GetLine(line int64) string { return methodCall[string](gdClass.obj.get(), methodTextEdit[30], &line) }
func (gdClass TextEdit) GetLineWidth(line int64, wrap_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[31], &line, &wrap_index) }
func (gdClass TextEdit) GetLineHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[32]) }
func (gdClass TextEdit) GetIndentLevel(line int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[33], &line) }
func (gdClass TextEdit) GetFirstNonWhitespaceColumn(line int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[34], &line) }
func (gdClass TextEdit) SwapLines(from_line int64, to_line int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[35], &from_line, &to_line) }
func (gdClass TextEdit) InsertLineAt(line int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[36], &line, &text) }
func (gdClass TextEdit) InsertTextAtCaret(text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[37], &text) }
func (gdClass TextEdit) RemoveText(from_line int64, from_column int64, to_line int64, to_column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[38], &from_line, &from_column, &to_line, &to_column) }
func (gdClass TextEdit) GetLastUnhiddenLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[39]) }
func (gdClass TextEdit) GetNextVisibleLineOffsetFrom(line int64, visible_amount int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[40], &line, &visible_amount) }
func (gdClass TextEdit) GetNextVisibleLineIndexOffsetFrom(line int64, wrap_index int64, visible_amount int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextEdit[41], &line, &wrap_index, &visible_amount) }
func (gdClass TextEdit) Backspace()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[42]) }
func (gdClass TextEdit) Cut()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[43]) }
func (gdClass TextEdit) Copy()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[44]) }
func (gdClass TextEdit) Paste()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[45]) }
func (gdClass TextEdit) BeginComplexOperation()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[46]) }
func (gdClass TextEdit) EndComplexOperation()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[47]) }
func (gdClass TextEdit) HasUndo() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[48]) }
func (gdClass TextEdit) HasRedo() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[49]) }
func (gdClass TextEdit) Undo()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[50]) }
func (gdClass TextEdit) Redo()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[51]) }
func (gdClass TextEdit) ClearUndoHistory()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[52]) }
func (gdClass TextEdit) TagSavedVersion()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[53]) }
func (gdClass TextEdit) GetVersion() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[54]) }
func (gdClass TextEdit) GetSavedVersion() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[55]) }
func (gdClass TextEdit) SetSearchText(search_text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[56], &search_text) }
func (gdClass TextEdit) SetSearchFlags(flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[57], &flags) }
func (gdClass TextEdit) Search(text string, flags int64, from_line int64, from_colum int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextEdit[58], &text, &flags, &from_line, &from_colum) }
func (gdClass TextEdit) SetTooltipRequestFunc(callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[59], &callback) }
func (gdClass TextEdit) GetLocalMousePos() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextEdit[60]) }
func (gdClass TextEdit) GetWordAtPos(position Vector2) string { return methodCall[string](gdClass.obj.get(), methodTextEdit[61], &position) }
func (gdClass TextEdit) GetLineColumnAtPos(position Vector2i, allow_out_of_bounds bool) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextEdit[62], &position, &allow_out_of_bounds) }
func (gdClass TextEdit) GetPosAtLineColumn(line int64, column int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextEdit[63], &line, &column) }
func (gdClass TextEdit) GetRectAtLineColumn(line int64, column int64) Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodTextEdit[64], &line, &column) }
func (gdClass TextEdit) GetMinimapLineAtPos(position Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[65], &position) }
func (gdClass TextEdit) IsDraggingCursor() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[66]) }
func (gdClass TextEdit) IsMouseOverSelection(edges bool) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[67], &edges) }
func (gdClass TextEdit) SetCaretType(atype TextEditCaretType)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[68], &atype) }
func (gdClass TextEdit) GetCaretType() TextEditCaretType { return methodCall[TextEditCaretType](gdClass.obj.get(), methodTextEdit[69]) }
func (gdClass TextEdit) SetCaretBlinkEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[70], &enable) }
func (gdClass TextEdit) IsCaretBlinkEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[71]) }
func (gdClass TextEdit) SetCaretBlinkSpeed(blink_speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[72], &blink_speed) }
func (gdClass TextEdit) GetCaretBlinkSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodTextEdit[73]) }
func (gdClass TextEdit) SetMoveCaretOnRightClickEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[74], &enable) }
func (gdClass TextEdit) IsMoveCaretOnRightClickEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[75]) }
func (gdClass TextEdit) SetCaretMidGraphemeEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[76], &enabled) }
func (gdClass TextEdit) IsCaretMidGraphemeEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[77]) }
func (gdClass TextEdit) IsCaretVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[78]) }
func (gdClass TextEdit) GetCaretDrawPos() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextEdit[79]) }
func (gdClass TextEdit) SetCaretLine(line int64, adjust_viewport bool, can_be_hidden bool, wrap_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[80], &line, &adjust_viewport, &can_be_hidden, &wrap_index) }
func (gdClass TextEdit) GetCaretLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[81]) }
func (gdClass TextEdit) SetCaretColumn(column int64, adjust_viewport bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[82], &column, &adjust_viewport) }
func (gdClass TextEdit) GetCaretColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[83]) }
func (gdClass TextEdit) GetCaretWrapIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[84]) }
func (gdClass TextEdit) GetWordUnderCaret() string { return methodCall[string](gdClass.obj.get(), methodTextEdit[85]) }
func (gdClass TextEdit) SetSelectingEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[86], &enable) }
func (gdClass TextEdit) IsSelectingEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[87]) }
func (gdClass TextEdit) SetDeselectOnFocusLossEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[88], &enable) }
func (gdClass TextEdit) IsDeselectOnFocusLossEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[89]) }
func (gdClass TextEdit) SetDragAndDropSelectionEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[90], &enable) }
func (gdClass TextEdit) IsDragAndDropSelectionEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[91]) }
func (gdClass TextEdit) SetOverrideSelectedFontColor(override bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[92], &override) }
func (gdClass TextEdit) IsOverridingSelectedFontColor() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[93]) }
func (gdClass TextEdit) SetSelectionMode(mode TextEditSelectionMode, line int64, column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[94], &mode, &line, &column) }
func (gdClass TextEdit) GetSelectionMode() TextEditSelectionMode { return methodCall[TextEditSelectionMode](gdClass.obj.get(), methodTextEdit[95]) }
func (gdClass TextEdit) SelectAll()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[96]) }
func (gdClass TextEdit) SelectWordUnderCaret()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[97]) }
func (gdClass TextEdit) Select(from_line int64, from_column int64, to_line int64, to_column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[98], &from_line, &from_column, &to_line, &to_column) }
func (gdClass TextEdit) HasSelection() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[99]) }
func (gdClass TextEdit) GetSelectedText() string { return methodCall[string](gdClass.obj.get(), methodTextEdit[100]) }
func (gdClass TextEdit) GetSelectionLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[101]) }
func (gdClass TextEdit) GetSelectionColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[102]) }
func (gdClass TextEdit) GetSelectionFromLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[103]) }
func (gdClass TextEdit) GetSelectionFromColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[104]) }
func (gdClass TextEdit) GetSelectionToLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[105]) }
func (gdClass TextEdit) GetSelectionToColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[106]) }
func (gdClass TextEdit) Deselect()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[107]) }
func (gdClass TextEdit) DeleteSelection()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[108]) }
func (gdClass TextEdit) SetLineWrappingMode(mode TextEditLineWrappingMode)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[109], &mode) }
func (gdClass TextEdit) GetLineWrappingMode() TextEditLineWrappingMode { return methodCall[TextEditLineWrappingMode](gdClass.obj.get(), methodTextEdit[110]) }
func (gdClass TextEdit) IsLineWrapped(line int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[111], &line) }
func (gdClass TextEdit) GetLineWrapCount(line int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[112], &line) }
func (gdClass TextEdit) GetLineWrapIndexAtColumn(line int64, column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[113], &line, &column) }
func (gdClass TextEdit) GetLineWrappedText(line int64) []string { return methodCall[[]string](gdClass.obj.get(), methodTextEdit[114], &line) }
func (gdClass TextEdit) SetSmoothScrollEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[115], &enable) }
func (gdClass TextEdit) IsSmoothScrollEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[116]) }
func (gdClass TextEdit) SetVScroll(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[117], &value) }
func (gdClass TextEdit) GetVScroll() float64 { return methodCall[float64](gdClass.obj.get(), methodTextEdit[118]) }
func (gdClass TextEdit) SetHScroll(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[119], &value) }
func (gdClass TextEdit) GetHScroll() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[120]) }
func (gdClass TextEdit) SetScrollPastEndOfFileEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[121], &enable) }
func (gdClass TextEdit) IsScrollPastEndOfFileEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[122]) }
func (gdClass TextEdit) SetVScrollSpeed(speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[123], &speed) }
func (gdClass TextEdit) GetVScrollSpeed() float64 { return methodCall[float64](gdClass.obj.get(), methodTextEdit[124]) }
func (gdClass TextEdit) SetFitContentHeightEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[125], &enabled) }
func (gdClass TextEdit) IsFitContentHeightEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[126]) }
func (gdClass TextEdit) GetScrollPosForLine(line int64, wrap_index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextEdit[127], &line, &wrap_index) }
func (gdClass TextEdit) SetLineAsFirstVisible(line int64, wrap_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[128], &line, &wrap_index) }
func (gdClass TextEdit) GetFirstVisibleLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[129]) }
func (gdClass TextEdit) SetLineAsCenterVisible(line int64, wrap_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[130], &line, &wrap_index) }
func (gdClass TextEdit) SetLineAsLastVisible(line int64, wrap_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[131], &line, &wrap_index) }
func (gdClass TextEdit) GetLastFullVisibleLine() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[132]) }
func (gdClass TextEdit) GetLastFullVisibleLineWrapIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[133]) }
func (gdClass TextEdit) GetVisibleLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[134]) }
func (gdClass TextEdit) GetVisibleLineCountInRange(from_line int64, to_line int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[135], &from_line, &to_line) }
func (gdClass TextEdit) GetTotalVisibleLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[136]) }
func (gdClass TextEdit) AdjustViewportToCaret()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[137]) }
func (gdClass TextEdit) CenterViewportToCaret()  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[138]) }
func (gdClass TextEdit) SetDrawMinimap(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[139], &enabled) }
func (gdClass TextEdit) IsDrawingMinimap() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[140]) }
func (gdClass TextEdit) SetMinimapWidth(width int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[141], &width) }
func (gdClass TextEdit) GetMinimapWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[142]) }
func (gdClass TextEdit) GetMinimapVisibleLines() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[143]) }
func (gdClass TextEdit) AddGutter(at int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[144], &at) }
func (gdClass TextEdit) RemoveGutter(gutter int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[145], &gutter) }
func (gdClass TextEdit) GetGutterCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[146]) }
func (gdClass TextEdit) SetGutterName(gutter int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[147], &gutter, &name) }
func (gdClass TextEdit) GetGutterName(gutter int64) string { return methodCall[string](gdClass.obj.get(), methodTextEdit[148], &gutter) }
func (gdClass TextEdit) SetGutterType(gutter int64, atype TextEditGutterType)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[149], &gutter, &atype) }
func (gdClass TextEdit) GetGutterType(gutter int64) TextEditGutterType { return methodCall[TextEditGutterType](gdClass.obj.get(), methodTextEdit[150], &gutter) }
func (gdClass TextEdit) SetGutterWidth(gutter int64, width int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[151], &gutter, &width) }
func (gdClass TextEdit) GetGutterWidth(gutter int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[152], &gutter) }
func (gdClass TextEdit) SetGutterDraw(gutter int64, draw bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[153], &gutter, &draw) }
func (gdClass TextEdit) IsGutterDrawn(gutter int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[154], &gutter) }
func (gdClass TextEdit) SetGutterClickable(gutter int64, clickable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[155], &gutter, &clickable) }
func (gdClass TextEdit) IsGutterClickable(gutter int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[156], &gutter) }
func (gdClass TextEdit) SetGutterOverwritable(gutter int64, overwritable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[157], &gutter, &overwritable) }
func (gdClass TextEdit) IsGutterOverwritable(gutter int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[158], &gutter) }
func (gdClass TextEdit) MergeGutters(from_line int64, to_line int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[159], &from_line, &to_line) }
func (gdClass TextEdit) SetGutterCustomDraw(column int64, draw_callback Callable)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[160], &column, &draw_callback) }
func (gdClass TextEdit) GetTotalGutterWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTextEdit[161]) }
func (gdClass TextEdit) SetLineGutterMetadata(line int64, gutter int64, metadata any)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[162], &line, &gutter, &metadata) }
func (gdClass TextEdit) GetLineGutterMetadata(line int64, gutter int64) any { return methodCall[any](gdClass.obj.get(), methodTextEdit[163], &line, &gutter) }
func (gdClass TextEdit) SetLineGutterText(line int64, gutter int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[164], &line, &gutter, &text) }
func (gdClass TextEdit) GetLineGutterText(line int64, gutter int64) string { return methodCall[string](gdClass.obj.get(), methodTextEdit[165], &line, &gutter) }
func (gdClass TextEdit) SetLineGutterIcon(line int64, gutter int64, icon Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[166], &line, &gutter, &icon) }
func (gdClass TextEdit) GetLineGutterIcon(line int64, gutter int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextEdit[167], &line, &gutter) }
func (gdClass TextEdit) SetLineGutterItemColor(line int64, gutter int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[168], &line, &gutter, &color) }
func (gdClass TextEdit) GetLineGutterItemColor(line int64, gutter int64) Color { return methodCall[Color](gdClass.obj.get(), methodTextEdit[169], &line, &gutter) }
func (gdClass TextEdit) SetLineGutterClickable(line int64, gutter int64, clickable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[170], &line, &gutter, &clickable) }
func (gdClass TextEdit) IsLineGutterClickable(line int64, gutter int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[171], &line, &gutter) }
func (gdClass TextEdit) SetLineBackgroundColor(line int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[172], &line, &color) }
func (gdClass TextEdit) GetLineBackgroundColor(line int64) Color { return methodCall[Color](gdClass.obj.get(), methodTextEdit[173], &line) }
func (gdClass TextEdit) SetSyntaxHighlighter(syntax_highlighter SyntaxHighlighter)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[174], &syntax_highlighter) }
func (gdClass TextEdit) GetSyntaxHighlighter() SyntaxHighlighter { return methodCall[SyntaxHighlighter](gdClass.obj.get(), methodTextEdit[175]) }
func (gdClass TextEdit) SetHighlightCurrentLine(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[176], &enabled) }
func (gdClass TextEdit) IsHighlightCurrentLineEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[177]) }
func (gdClass TextEdit) SetHighlightAllOccurrences(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[178], &enabled) }
func (gdClass TextEdit) IsHighlightAllOccurrencesEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[179]) }
func (gdClass TextEdit) GetDrawControlChars() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[180]) }
func (gdClass TextEdit) SetDrawControlChars(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[181], &enabled) }
func (gdClass TextEdit) SetDrawTabs(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[182], &enabled) }
func (gdClass TextEdit) IsDrawingTabs() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[183]) }
func (gdClass TextEdit) SetDrawSpaces(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[184], &enabled) }
func (gdClass TextEdit) IsDrawingSpaces() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[185]) }
func (gdClass TextEdit) GetMenu() PopupMenu { return methodCall[PopupMenu](gdClass.obj.get(), methodTextEdit[186]) }
func (gdClass TextEdit) IsMenuVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTextEdit[187]) }
func (gdClass TextEdit) MenuOption(option int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextEdit[188], &option) }

type TextLine struct{self *TextLine; obj safeObject }
func NewTextLine(ctx Context, at *TextLine) TextLine { if at == nil { at = new(TextLine) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextLine) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextLine) owner() cObject { return gdClass.obj.get() }
func (TextLine) class() string { return "TextLine\000" }

func (gdClass TextLine) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodTextLine [34]cMethodBind
func (gdClass TextLine) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass TextLine) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[0]) }
func (gdClass TextLine) SetDirection(direction TextServerDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[1], &direction) }
func (gdClass TextLine) GetDirection() TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextLine[2]) }
func (gdClass TextLine) SetOrientation(orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[3], &orientation) }
func (gdClass TextLine) GetOrientation() TextServerOrientation { return methodCall[TextServerOrientation](gdClass.obj.get(), methodTextLine[4]) }
func (gdClass TextLine) SetPreserveInvalid(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[5], &enabled) }
func (gdClass TextLine) GetPreserveInvalid() bool { return methodCall[bool](gdClass.obj.get(), methodTextLine[6]) }
func (gdClass TextLine) SetPreserveControl(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[7], &enabled) }
func (gdClass TextLine) GetPreserveControl() bool { return methodCall[bool](gdClass.obj.get(), methodTextLine[8]) }
func (gdClass TextLine) SetBidiOverride(override Array)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[9], &override) }
func (gdClass TextLine) AddString(text string, font Font, font_size int64, language string, meta any) bool { return methodCall[bool](gdClass.obj.get(), methodTextLine[10], &text, &font, &font_size, &language, &meta) }
func (gdClass TextLine) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextLine[11], &key, &size, &inline_align, &length) }
func (gdClass TextLine) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return methodCall[bool](gdClass.obj.get(), methodTextLine[12], &key, &size, &inline_align) }
func (gdClass TextLine) SetWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[13], &width) }
func (gdClass TextLine) GetWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[14]) }
func (gdClass TextLine) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[15], &alignment) }
func (gdClass TextLine) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodTextLine[16]) }
func (gdClass TextLine) TabAlign(tab_stops []float32)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[17], &tab_stops) }
func (gdClass TextLine) SetFlags(flags TextServerJustificationFlag)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[18], &flags) }
func (gdClass TextLine) GetFlags() TextServerJustificationFlag { return methodCall[TextServerJustificationFlag](gdClass.obj.get(), methodTextLine[19]) }
func (gdClass TextLine) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[20], &overrun_behavior) }
func (gdClass TextLine) GetTextOverrunBehavior() TextServerOverrunBehavior { return methodCall[TextServerOverrunBehavior](gdClass.obj.get(), methodTextLine[21]) }
func (gdClass TextLine) GetObjects() Array { return methodCall[Array](gdClass.obj.get(), methodTextLine[22]) }
func (gdClass TextLine) GetObjectRect(key any) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTextLine[23], &key) }
func (gdClass TextLine) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextLine[24]) }
func (gdClass TextLine) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodTextLine[25]) }
func (gdClass TextLine) GetLineAscent() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[26]) }
func (gdClass TextLine) GetLineDescent() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[27]) }
func (gdClass TextLine) GetLineWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[28]) }
func (gdClass TextLine) GetLineUnderlinePosition() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[29]) }
func (gdClass TextLine) GetLineUnderlineThickness() float64 { return methodCall[float64](gdClass.obj.get(), methodTextLine[30]) }
func (gdClass TextLine) Draw(canvas RID, pos Vector2, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[31], &canvas, &pos, &color) }
func (gdClass TextLine) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextLine[32], &canvas, &pos, &outline_size, &color) }
func (gdClass TextLine) HitTest(coords float64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextLine[33], &coords) }

type TextMesh struct{self *TextMesh; obj safeObject }
func NewTextMesh(ctx Context, at *TextMesh) TextMesh { if at == nil { at = new(TextMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextMesh) owner() cObject { return gdClass.obj.get() }
func (TextMesh) class() string { return "TextMesh\000" }

func (gdClass TextMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodTextMesh [34]cMethodBind
func (gdClass TextMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass TextMesh) SetHorizontalAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[0], &alignment) }
func (gdClass TextMesh) GetHorizontalAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodTextMesh[1]) }
func (gdClass TextMesh) SetVerticalAlignment(alignment VerticalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[2], &alignment) }
func (gdClass TextMesh) GetVerticalAlignment() VerticalAlignment { return methodCall[VerticalAlignment](gdClass.obj.get(), methodTextMesh[3]) }
func (gdClass TextMesh) SetText(text string)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[4], &text) }
func (gdClass TextMesh) GetText() string { return methodCall[string](gdClass.obj.get(), methodTextMesh[5]) }
func (gdClass TextMesh) SetFont(font Font)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[6], &font) }
func (gdClass TextMesh) GetFont() Font { return methodCall[Font](gdClass.obj.get(), methodTextMesh[7]) }
func (gdClass TextMesh) SetFontSize(font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[8], &font_size) }
func (gdClass TextMesh) GetFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodTextMesh[9]) }
func (gdClass TextMesh) SetLineSpacing(line_spacing float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[10], &line_spacing) }
func (gdClass TextMesh) GetLineSpacing() float64 { return methodCall[float64](gdClass.obj.get(), methodTextMesh[11]) }
func (gdClass TextMesh) SetAutowrapMode(autowrap_mode TextServerAutowrapMode)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[12], &autowrap_mode) }
func (gdClass TextMesh) GetAutowrapMode() TextServerAutowrapMode { return methodCall[TextServerAutowrapMode](gdClass.obj.get(), methodTextMesh[13]) }
func (gdClass TextMesh) SetDepth(depth float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[14], &depth) }
func (gdClass TextMesh) GetDepth() float64 { return methodCall[float64](gdClass.obj.get(), methodTextMesh[15]) }
func (gdClass TextMesh) SetWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[16], &width) }
func (gdClass TextMesh) GetWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodTextMesh[17]) }
func (gdClass TextMesh) SetPixelSize(pixel_size float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[18], &pixel_size) }
func (gdClass TextMesh) GetPixelSize() float64 { return methodCall[float64](gdClass.obj.get(), methodTextMesh[19]) }
func (gdClass TextMesh) SetOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[20], &offset) }
func (gdClass TextMesh) GetOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextMesh[21]) }
func (gdClass TextMesh) SetCurveStep(curve_step float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[22], &curve_step) }
func (gdClass TextMesh) GetCurveStep() float64 { return methodCall[float64](gdClass.obj.get(), methodTextMesh[23]) }
func (gdClass TextMesh) SetTextDirection(direction TextServerDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[24], &direction) }
func (gdClass TextMesh) GetTextDirection() TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextMesh[25]) }
func (gdClass TextMesh) SetLanguage(language string)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[26], &language) }
func (gdClass TextMesh) GetLanguage() string { return methodCall[string](gdClass.obj.get(), methodTextMesh[27]) }
func (gdClass TextMesh) SetStructuredTextBidiOverride(parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[28], &parser) }
func (gdClass TextMesh) GetStructuredTextBidiOverride() TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodTextMesh[29]) }
func (gdClass TextMesh) SetStructuredTextBidiOverrideOptions(args Array)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[30], &args) }
func (gdClass TextMesh) GetStructuredTextBidiOverrideOptions() Array { return methodCall[Array](gdClass.obj.get(), methodTextMesh[31]) }
func (gdClass TextMesh) SetUppercase(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextMesh[32], &enable) }
func (gdClass TextMesh) IsUppercase() bool { return methodCall[bool](gdClass.obj.get(), methodTextMesh[33]) }

type TextParagraph struct{self *TextParagraph; obj safeObject }
func NewTextParagraph(ctx Context, at *TextParagraph) TextParagraph { if at == nil { at = new(TextParagraph) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextParagraph) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextParagraph) owner() cObject { return gdClass.obj.get() }
func (TextParagraph) class() string { return "TextParagraph\000" }

func (gdClass TextParagraph) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodTextParagraph [54]cMethodBind
func (gdClass TextParagraph) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass TextParagraph) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[0]) }
func (gdClass TextParagraph) SetDirection(direction TextServerDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[1], &direction) }
func (gdClass TextParagraph) GetDirection() TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextParagraph[2]) }
func (gdClass TextParagraph) SetCustomPunctuation(custom_punctuation string)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[3], &custom_punctuation) }
func (gdClass TextParagraph) GetCustomPunctuation() string { return methodCall[string](gdClass.obj.get(), methodTextParagraph[4]) }
func (gdClass TextParagraph) SetOrientation(orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[5], &orientation) }
func (gdClass TextParagraph) GetOrientation() TextServerOrientation { return methodCall[TextServerOrientation](gdClass.obj.get(), methodTextParagraph[6]) }
func (gdClass TextParagraph) SetPreserveInvalid(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[7], &enabled) }
func (gdClass TextParagraph) GetPreserveInvalid() bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[8]) }
func (gdClass TextParagraph) SetPreserveControl(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[9], &enabled) }
func (gdClass TextParagraph) GetPreserveControl() bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[10]) }
func (gdClass TextParagraph) SetBidiOverride(override Array)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[11], &override) }
func (gdClass TextParagraph) SetDropcap(text string, font Font, font_size int64, dropcap_margins Rect2, language string) bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[12], &text, &font, &font_size, &dropcap_margins, &language) }
func (gdClass TextParagraph) ClearDropcap()  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[13]) }
func (gdClass TextParagraph) AddString(text string, font Font, font_size int64, language string, meta any) bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[14], &text, &font, &font_size, &language, &meta) }
func (gdClass TextParagraph) AddObject(key any, size Vector2, inline_align InlineAlignment, length int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[15], &key, &size, &inline_align, &length) }
func (gdClass TextParagraph) ResizeObject(key any, size Vector2, inline_align InlineAlignment) bool { return methodCall[bool](gdClass.obj.get(), methodTextParagraph[16], &key, &size, &inline_align) }
func (gdClass TextParagraph) SetAlignment(alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[17], &alignment) }
func (gdClass TextParagraph) GetAlignment() HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodTextParagraph[18]) }
func (gdClass TextParagraph) TabAlign(tab_stops []float32)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[19], &tab_stops) }
func (gdClass TextParagraph) SetBreakFlags(flags TextServerLineBreakFlag)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[20], &flags) }
func (gdClass TextParagraph) GetBreakFlags() TextServerLineBreakFlag { return methodCall[TextServerLineBreakFlag](gdClass.obj.get(), methodTextParagraph[21]) }
func (gdClass TextParagraph) SetJustificationFlags(flags TextServerJustificationFlag)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[22], &flags) }
func (gdClass TextParagraph) GetJustificationFlags() TextServerJustificationFlag { return methodCall[TextServerJustificationFlag](gdClass.obj.get(), methodTextParagraph[23]) }
func (gdClass TextParagraph) SetTextOverrunBehavior(overrun_behavior TextServerOverrunBehavior)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[24], &overrun_behavior) }
func (gdClass TextParagraph) GetTextOverrunBehavior() TextServerOverrunBehavior { return methodCall[TextServerOverrunBehavior](gdClass.obj.get(), methodTextParagraph[25]) }
func (gdClass TextParagraph) SetWidth(width float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[26], &width) }
func (gdClass TextParagraph) GetWidth() float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[27]) }
func (gdClass TextParagraph) GetNonWrappedSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextParagraph[28]) }
func (gdClass TextParagraph) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextParagraph[29]) }
func (gdClass TextParagraph) GetRid() RID { return methodCall[RID](gdClass.obj.get(), methodTextParagraph[30]) }
func (gdClass TextParagraph) GetLineRid(line int64) RID { return methodCall[RID](gdClass.obj.get(), methodTextParagraph[31], &line) }
func (gdClass TextParagraph) GetDropcapRid() RID { return methodCall[RID](gdClass.obj.get(), methodTextParagraph[32]) }
func (gdClass TextParagraph) GetLineCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextParagraph[33]) }
func (gdClass TextParagraph) SetMaxLinesVisible(max_lines_visible int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[34], &max_lines_visible) }
func (gdClass TextParagraph) GetMaxLinesVisible() int64 { return methodCall[int64](gdClass.obj.get(), methodTextParagraph[35]) }
func (gdClass TextParagraph) GetLineObjects(line int64) Array { return methodCall[Array](gdClass.obj.get(), methodTextParagraph[36], &line) }
func (gdClass TextParagraph) GetLineObjectRect(line int64, key any) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTextParagraph[37], &line, &key) }
func (gdClass TextParagraph) GetLineSize(line int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextParagraph[38], &line) }
func (gdClass TextParagraph) GetLineRange(line int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextParagraph[39], &line) }
func (gdClass TextParagraph) GetLineAscent(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[40], &line) }
func (gdClass TextParagraph) GetLineDescent(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[41], &line) }
func (gdClass TextParagraph) GetLineWidth(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[42], &line) }
func (gdClass TextParagraph) GetLineUnderlinePosition(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[43], &line) }
func (gdClass TextParagraph) GetLineUnderlineThickness(line int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextParagraph[44], &line) }
func (gdClass TextParagraph) GetDropcapSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextParagraph[45]) }
func (gdClass TextParagraph) GetDropcapLines() int64 { return methodCall[int64](gdClass.obj.get(), methodTextParagraph[46]) }
func (gdClass TextParagraph) Draw(canvas RID, pos Vector2, color Color, dc_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[47], &canvas, &pos, &color, &dc_color) }
func (gdClass TextParagraph) DrawOutline(canvas RID, pos Vector2, outline_size int64, color Color, dc_color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[48], &canvas, &pos, &outline_size, &color, &dc_color) }
func (gdClass TextParagraph) DrawLine(canvas RID, pos Vector2, line int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[49], &canvas, &pos, &line, &color) }
func (gdClass TextParagraph) DrawLineOutline(canvas RID, pos Vector2, line int64, outline_size int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[50], &canvas, &pos, &line, &outline_size, &color) }
func (gdClass TextParagraph) DrawDropcap(canvas RID, pos Vector2, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[51], &canvas, &pos, &color) }
func (gdClass TextParagraph) DrawDropcapOutline(canvas RID, pos Vector2, outline_size int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextParagraph[52], &canvas, &pos, &outline_size, &color) }
func (gdClass TextParagraph) HitTest(coords Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTextParagraph[53], &coords) }

type TextServerFontAntialiasing int64

const (
	TextServerFontAntialiasingNone TextServerFontAntialiasing = 0
	TextServerFontAntialiasingGray TextServerFontAntialiasing = 1
	TextServerFontAntialiasingLcd TextServerFontAntialiasing = 2
)

type TextServerFontLCDSubpixelLayout int64

const (
	TextServerFontLcdSubpixelLayoutNone TextServerFontLCDSubpixelLayout = 0
	TextServerFontLcdSubpixelLayoutHrgb TextServerFontLCDSubpixelLayout = 1
	TextServerFontLcdSubpixelLayoutHbgr TextServerFontLCDSubpixelLayout = 2
	TextServerFontLcdSubpixelLayoutVrgb TextServerFontLCDSubpixelLayout = 3
	TextServerFontLcdSubpixelLayoutVbgr TextServerFontLCDSubpixelLayout = 4
)

type TextServerDirection int64

const (
	TextServerDirectionAuto TextServerDirection = 0
	TextServerDirectionLtr TextServerDirection = 1
	TextServerDirectionRtl TextServerDirection = 2
)

type TextServerOrientation int64

const (
	TextServerOrientationHorizontal TextServerOrientation = 0
	TextServerOrientationVertical TextServerOrientation = 1
)

type TextServerJustificationFlag int64

const (
	TextServerJustificationNone TextServerJustificationFlag = 0
	TextServerJustificationKashida TextServerJustificationFlag = 1
	TextServerJustificationWordBound TextServerJustificationFlag = 2
	TextServerJustificationTrimEdgeSpaces TextServerJustificationFlag = 4
	TextServerJustificationAfterLastTab TextServerJustificationFlag = 8
	TextServerJustificationConstrainEllipsis TextServerJustificationFlag = 16
)

type TextServerAutowrapMode int64

const (
	TextServerAutowrapOff TextServerAutowrapMode = 0
	TextServerAutowrapArbitrary TextServerAutowrapMode = 1
	TextServerAutowrapWord TextServerAutowrapMode = 2
	TextServerAutowrapWordSmart TextServerAutowrapMode = 3
)

type TextServerLineBreakFlag int64

const (
	TextServerBreakNone TextServerLineBreakFlag = 0
	TextServerBreakMandatory TextServerLineBreakFlag = 1
	TextServerBreakWordBound TextServerLineBreakFlag = 2
	TextServerBreakGraphemeBound TextServerLineBreakFlag = 4
	TextServerBreakAdaptive TextServerLineBreakFlag = 8
)

type TextServerVisibleCharactersBehavior int64

const (
	TextServerVcCharsBeforeShaping TextServerVisibleCharactersBehavior = 0
	TextServerVcCharsAfterShaping TextServerVisibleCharactersBehavior = 1
	TextServerVcGlyphsAuto TextServerVisibleCharactersBehavior = 2
	TextServerVcGlyphsLtr TextServerVisibleCharactersBehavior = 3
	TextServerVcGlyphsRtl TextServerVisibleCharactersBehavior = 4
)

type TextServerOverrunBehavior int64

const (
	TextServerOverrunNoTrimming TextServerOverrunBehavior = 0
	TextServerOverrunTrimChar TextServerOverrunBehavior = 1
	TextServerOverrunTrimWord TextServerOverrunBehavior = 2
	TextServerOverrunTrimEllipsis TextServerOverrunBehavior = 3
	TextServerOverrunTrimWordEllipsis TextServerOverrunBehavior = 4
)

type TextServerTextOverrunFlag int64

const (
	TextServerOverrunNoTrim TextServerTextOverrunFlag = 0
	TextServerOverrunTrim TextServerTextOverrunFlag = 1
	TextServerOverrunTrimWordOnly TextServerTextOverrunFlag = 2
	TextServerOverrunAddEllipsis TextServerTextOverrunFlag = 4
	TextServerOverrunEnforceEllipsis TextServerTextOverrunFlag = 8
	TextServerOverrunJustificationAware TextServerTextOverrunFlag = 16
)

type TextServerGraphemeFlag int64

const (
	TextServerGraphemeIsValid TextServerGraphemeFlag = 1
	TextServerGraphemeIsRtl TextServerGraphemeFlag = 2
	TextServerGraphemeIsVirtual TextServerGraphemeFlag = 4
	TextServerGraphemeIsSpace TextServerGraphemeFlag = 8
	TextServerGraphemeIsBreakHard TextServerGraphemeFlag = 16
	TextServerGraphemeIsBreakSoft TextServerGraphemeFlag = 32
	TextServerGraphemeIsTab TextServerGraphemeFlag = 64
	TextServerGraphemeIsElongation TextServerGraphemeFlag = 128
	TextServerGraphemeIsPunctuation TextServerGraphemeFlag = 256
	TextServerGraphemeIsUnderscore TextServerGraphemeFlag = 512
	TextServerGraphemeIsConnected TextServerGraphemeFlag = 1024
	TextServerGraphemeIsSafeToInsertTatweel TextServerGraphemeFlag = 2048
)

type TextServerHinting int64

const (
	TextServerHintingNone TextServerHinting = 0
	TextServerHintingLight TextServerHinting = 1
	TextServerHintingNormal TextServerHinting = 2
)

type TextServerSubpixelPositioning int64

const (
	TextServerSubpixelPositioningDisabled TextServerSubpixelPositioning = 0
	TextServerSubpixelPositioningAuto TextServerSubpixelPositioning = 1
	TextServerSubpixelPositioningOneHalf TextServerSubpixelPositioning = 2
	TextServerSubpixelPositioningOneQuarter TextServerSubpixelPositioning = 3
	TextServerSubpixelPositioningOneHalfMaxSize TextServerSubpixelPositioning = 20
	TextServerSubpixelPositioningOneQuarterMaxSize TextServerSubpixelPositioning = 16
)

type TextServerFeature int64

const (
	TextServerFeatureSimpleLayout TextServerFeature = 1
	TextServerFeatureBidiLayout TextServerFeature = 2
	TextServerFeatureVerticalLayout TextServerFeature = 4
	TextServerFeatureShaping TextServerFeature = 8
	TextServerFeatureKashidaJustification TextServerFeature = 16
	TextServerFeatureBreakIterators TextServerFeature = 32
	TextServerFeatureFontBitmap TextServerFeature = 64
	TextServerFeatureFontDynamic TextServerFeature = 128
	TextServerFeatureFontMsdf TextServerFeature = 256
	TextServerFeatureFontSystem TextServerFeature = 512
	TextServerFeatureFontVariable TextServerFeature = 1024
	TextServerFeatureContextSensitiveCaseConversion TextServerFeature = 2048
	TextServerFeatureUseSupportData TextServerFeature = 4096
	TextServerFeatureUnicodeIdentifiers TextServerFeature = 8192
	TextServerFeatureUnicodeSecurity TextServerFeature = 16384
)

type TextServerContourPointTag int64

const (
	TextServerContourCurveTagOn TextServerContourPointTag = 1
	TextServerContourCurveTagOffConic TextServerContourPointTag = 0
	TextServerContourCurveTagOffCubic TextServerContourPointTag = 2
)

type TextServerSpacingType int64

const (
	TextServerSpacingGlyph TextServerSpacingType = 0
	TextServerSpacingSpace TextServerSpacingType = 1
	TextServerSpacingTop TextServerSpacingType = 2
	TextServerSpacingBottom TextServerSpacingType = 3
	TextServerSpacingMax TextServerSpacingType = 4
)

type TextServerFontStyle int64

const (
	TextServerFontBold TextServerFontStyle = 1
	TextServerFontItalic TextServerFontStyle = 2
	TextServerFontFixedWidth TextServerFontStyle = 4
)

type TextServerStructuredTextParser int64

const (
	TextServerStructuredTextDefault TextServerStructuredTextParser = 0
	TextServerStructuredTextUri TextServerStructuredTextParser = 1
	TextServerStructuredTextFile TextServerStructuredTextParser = 2
	TextServerStructuredTextEmail TextServerStructuredTextParser = 3
	TextServerStructuredTextList TextServerStructuredTextParser = 4
	TextServerStructuredTextNone TextServerStructuredTextParser = 5
	TextServerStructuredTextCustom TextServerStructuredTextParser = 6
)

type TextServer struct{self *TextServer; obj safeObject }
func NewTextServer(ctx Context, at *TextServer) TextServer { if at == nil { at = new(TextServer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextServer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextServer) owner() cObject { return gdClass.obj.get() }
func (TextServer) class() string { return "TextServer\000" }

func (gdClass TextServer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodTextServer [184]cMethodBind
func (gdClass TextServer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass TextServer) HasFeature(feature TextServerFeature) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[0], &feature) }
func (gdClass TextServer) GetName() string { return methodCall[string](gdClass.obj.get(), methodTextServer[1]) }
func (gdClass TextServer) GetFeatures() int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[2]) }
func (gdClass TextServer) LoadSupportData(filename string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[3], &filename) }
func (gdClass TextServer) GetSupportDataFilename() string { return methodCall[string](gdClass.obj.get(), methodTextServer[4]) }
func (gdClass TextServer) GetSupportDataInfo() string { return methodCall[string](gdClass.obj.get(), methodTextServer[5]) }
func (gdClass TextServer) SaveSupportData(filename string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[6], &filename) }
func (gdClass TextServer) IsLocaleRightToLeft(locale string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[7], &locale) }
func (gdClass TextServer) NameToTag(name string) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[8], &name) }
func (gdClass TextServer) TagToName(tag int64) string { return methodCall[string](gdClass.obj.get(), methodTextServer[9], &tag) }
func (gdClass TextServer) Has(rid RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[10], &rid) }
func (gdClass TextServer) FreeRid(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[11], &rid) }
func (gdClass TextServer) CreateFont() RID { return methodCall[RID](gdClass.obj.get(), methodTextServer[12]) }
func (gdClass TextServer) FontSetData(font_rid RID, data []byte)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[13], &font_rid, &data) }
func (gdClass TextServer) FontSetFaceIndex(font_rid RID, face_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[14], &font_rid, &face_index) }
func (gdClass TextServer) FontGetFaceIndex(font_rid RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[15], &font_rid) }
func (gdClass TextServer) FontGetFaceCount(font_rid RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[16], &font_rid) }
func (gdClass TextServer) FontSetStyle(font_rid RID, style TextServerFontStyle)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[17], &font_rid, &style) }
func (gdClass TextServer) FontGetStyle(font_rid RID) TextServerFontStyle { return methodCall[TextServerFontStyle](gdClass.obj.get(), methodTextServer[18], &font_rid) }
func (gdClass TextServer) FontSetName(font_rid RID, name string)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[19], &font_rid, &name) }
func (gdClass TextServer) FontGetName(font_rid RID) string { return methodCall[string](gdClass.obj.get(), methodTextServer[20], &font_rid) }
func (gdClass TextServer) FontSetStyleName(font_rid RID, name string)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[21], &font_rid, &name) }
func (gdClass TextServer) FontGetStyleName(font_rid RID) string { return methodCall[string](gdClass.obj.get(), methodTextServer[22], &font_rid) }
func (gdClass TextServer) FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[23], &font_rid, &antialiasing) }
func (gdClass TextServer) FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing { return methodCall[TextServerFontAntialiasing](gdClass.obj.get(), methodTextServer[24], &font_rid) }
func (gdClass TextServer) FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[25], &font_rid, &generate_mipmaps) }
func (gdClass TextServer) FontGetGenerateMipmaps(font_rid RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[26], &font_rid) }
func (gdClass TextServer) FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[27], &font_rid, &msdf) }
func (gdClass TextServer) FontIsMultichannelSignedDistanceField(font_rid RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[28], &font_rid) }
func (gdClass TextServer) FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[29], &font_rid, &msdf_pixel_range) }
func (gdClass TextServer) FontGetMsdfPixelRange(font_rid RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[30], &font_rid) }
func (gdClass TextServer) FontSetMsdfSize(font_rid RID, msdf_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[31], &font_rid, &msdf_size) }
func (gdClass TextServer) FontGetMsdfSize(font_rid RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[32], &font_rid) }
func (gdClass TextServer) FontSetFixedSize(font_rid RID, fixed_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[33], &font_rid, &fixed_size) }
func (gdClass TextServer) FontGetFixedSize(font_rid RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[34], &font_rid) }
func (gdClass TextServer) FontSetForceAutohinter(font_rid RID, force_autohinter bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[35], &font_rid, &force_autohinter) }
func (gdClass TextServer) FontIsForceAutohinter(font_rid RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[36], &font_rid) }
func (gdClass TextServer) FontSetHinting(font_rid RID, hinting TextServerHinting)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[37], &font_rid, &hinting) }
func (gdClass TextServer) FontGetHinting(font_rid RID) TextServerHinting { return methodCall[TextServerHinting](gdClass.obj.get(), methodTextServer[38], &font_rid) }
func (gdClass TextServer) FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[39], &font_rid, &subpixel_positioning) }
func (gdClass TextServer) FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning { return methodCall[TextServerSubpixelPositioning](gdClass.obj.get(), methodTextServer[40], &font_rid) }
func (gdClass TextServer) FontSetEmbolden(font_rid RID, strength float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[41], &font_rid, &strength) }
func (gdClass TextServer) FontGetEmbolden(font_rid RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[42], &font_rid) }
func (gdClass TextServer) FontSetTransform(font_rid RID, transform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[43], &font_rid, &transform) }
func (gdClass TextServer) FontGetTransform(font_rid RID) Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodTextServer[44], &font_rid) }
func (gdClass TextServer) FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[45], &font_rid, &variation_coordinates) }
func (gdClass TextServer) FontGetVariationCoordinates(font_rid RID) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[46], &font_rid) }
func (gdClass TextServer) FontSetOversampling(font_rid RID, oversampling float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[47], &font_rid, &oversampling) }
func (gdClass TextServer) FontGetOversampling(font_rid RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[48], &font_rid) }
func (gdClass TextServer) FontGetSizeCacheList(font_rid RID) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[49], &font_rid) }
func (gdClass TextServer) FontClearSizeCache(font_rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[50], &font_rid) }
func (gdClass TextServer) FontRemoveSizeCache(font_rid RID, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[51], &font_rid, &size) }
func (gdClass TextServer) FontSetAscent(font_rid RID, size int64, ascent float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[52], &font_rid, &size, &ascent) }
func (gdClass TextServer) FontGetAscent(font_rid RID, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[53], &font_rid, &size) }
func (gdClass TextServer) FontSetDescent(font_rid RID, size int64, descent float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[54], &font_rid, &size, &descent) }
func (gdClass TextServer) FontGetDescent(font_rid RID, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[55], &font_rid, &size) }
func (gdClass TextServer) FontSetUnderlinePosition(font_rid RID, size int64, underline_position float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[56], &font_rid, &size, &underline_position) }
func (gdClass TextServer) FontGetUnderlinePosition(font_rid RID, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[57], &font_rid, &size) }
func (gdClass TextServer) FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[58], &font_rid, &size, &underline_thickness) }
func (gdClass TextServer) FontGetUnderlineThickness(font_rid RID, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[59], &font_rid, &size) }
func (gdClass TextServer) FontSetScale(font_rid RID, size int64, scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[60], &font_rid, &size, &scale) }
func (gdClass TextServer) FontGetScale(font_rid RID, size int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[61], &font_rid, &size) }
func (gdClass TextServer) FontGetTextureCount(font_rid RID, size Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[62], &font_rid, &size) }
func (gdClass TextServer) FontClearTextures(font_rid RID, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[63], &font_rid, &size) }
func (gdClass TextServer) FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[64], &font_rid, &size, &texture_index) }
func (gdClass TextServer) FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[65], &font_rid, &size, &texture_index, &image) }
func (gdClass TextServer) FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image { return methodCall[Image](gdClass.obj.get(), methodTextServer[66], &font_rid, &size, &texture_index) }
func (gdClass TextServer) FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset []int32)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[67], &font_rid, &size, &texture_index, &offset) }
func (gdClass TextServer) FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[68], &font_rid, &size, &texture_index) }
func (gdClass TextServer) FontGetGlyphList(font_rid RID, size Vector2i) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[69], &font_rid, &size) }
func (gdClass TextServer) FontClearGlyphs(font_rid RID, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[70], &font_rid, &size) }
func (gdClass TextServer) FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[71], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[72], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[73], &font_rid, &size, &glyph, &advance) }
func (gdClass TextServer) FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[74], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[75], &font_rid, &size, &glyph, &offset) }
func (gdClass TextServer) FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[76], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[77], &font_rid, &size, &glyph, &gl_size) }
func (gdClass TextServer) FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTextServer[78], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[79], &font_rid, &size, &glyph, &uv_rect) }
func (gdClass TextServer) FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[80], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[81], &font_rid, &size, &glyph, &texture_idx) }
func (gdClass TextServer) FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID { return methodCall[RID](gdClass.obj.get(), methodTextServer[82], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[83], &font_rid, &size, &glyph) }
func (gdClass TextServer) FontGetGlyphContours(font RID, size int64, index int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[84], &font, &size, &index) }
func (gdClass TextServer) FontGetKerningList(font_rid RID, size int64) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[85], &font_rid, &size) }
func (gdClass TextServer) FontClearKerningMap(font_rid RID, size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[86], &font_rid, &size) }
func (gdClass TextServer) FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[87], &font_rid, &size, &glyph_pair) }
func (gdClass TextServer) FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[88], &font_rid, &size, &glyph_pair, &kerning) }
func (gdClass TextServer) FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[89], &font_rid, &size, &glyph_pair) }
func (gdClass TextServer) FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[90], &font_rid, &size, &char, &variation_selector) }
func (gdClass TextServer) FontHasChar(font_rid RID, char int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[91], &font_rid, &char) }
func (gdClass TextServer) FontGetSupportedChars(font_rid RID) string { return methodCall[string](gdClass.obj.get(), methodTextServer[92], &font_rid) }
func (gdClass TextServer) FontRenderRange(font_rid RID, size Vector2i, start int64, end int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[93], &font_rid, &size, &start, &end) }
func (gdClass TextServer) FontRenderGlyph(font_rid RID, size Vector2i, index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[94], &font_rid, &size, &index) }
func (gdClass TextServer) FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[95], &font_rid, &canvas, &size, &pos, &index, &color) }
func (gdClass TextServer) FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[96], &font_rid, &canvas, &size, &outline_size, &pos, &index, &color) }
func (gdClass TextServer) FontIsLanguageSupported(font_rid RID, language string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[97], &font_rid, &language) }
func (gdClass TextServer) FontSetLanguageSupportOverride(font_rid RID, language string, supported bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[98], &font_rid, &language, &supported) }
func (gdClass TextServer) FontGetLanguageSupportOverride(font_rid RID, language string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[99], &font_rid, &language) }
func (gdClass TextServer) FontRemoveLanguageSupportOverride(font_rid RID, language string)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[100], &font_rid, &language) }
func (gdClass TextServer) FontGetLanguageSupportOverrides(font_rid RID) []string { return methodCall[[]string](gdClass.obj.get(), methodTextServer[101], &font_rid) }
func (gdClass TextServer) FontIsScriptSupported(font_rid RID, script string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[102], &font_rid, &script) }
func (gdClass TextServer) FontSetScriptSupportOverride(font_rid RID, script string, supported bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[103], &font_rid, &script, &supported) }
func (gdClass TextServer) FontGetScriptSupportOverride(font_rid RID, script string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[104], &font_rid, &script) }
func (gdClass TextServer) FontRemoveScriptSupportOverride(font_rid RID, script string)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[105], &font_rid, &script) }
func (gdClass TextServer) FontGetScriptSupportOverrides(font_rid RID) []string { return methodCall[[]string](gdClass.obj.get(), methodTextServer[106], &font_rid) }
func (gdClass TextServer) FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[107], &font_rid, &overrides) }
func (gdClass TextServer) FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[108], &font_rid) }
func (gdClass TextServer) FontSupportedFeatureList(font_rid RID) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[109], &font_rid) }
func (gdClass TextServer) FontSupportedVariationList(font_rid RID) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[110], &font_rid) }
func (gdClass TextServer) FontGetGlobalOversampling() float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[111]) }
func (gdClass TextServer) FontSetGlobalOversampling(oversampling float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[112], &oversampling) }
func (gdClass TextServer) GetHexCodeBoxSize(size int64, index int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[113], &size, &index) }
func (gdClass TextServer) DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[114], &canvas, &size, &pos, &index, &color) }
func (gdClass TextServer) CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID { return methodCall[RID](gdClass.obj.get(), methodTextServer[115], &direction, &orientation) }
func (gdClass TextServer) ShapedTextClear(rid RID)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[116], &rid) }
func (gdClass TextServer) ShapedTextSetDirection(shaped RID, direction TextServerDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[117], &shaped, &direction) }
func (gdClass TextServer) ShapedTextGetDirection(shaped RID) TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextServer[118], &shaped) }
func (gdClass TextServer) ShapedTextGetInferredDirection(shaped RID) TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextServer[119], &shaped) }
func (gdClass TextServer) ShapedTextSetBidiOverride(shaped RID, override Array)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[120], &shaped, &override) }
func (gdClass TextServer) ShapedTextSetCustomPunctuation(shaped RID, punct string)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[121], &shaped, &punct) }
func (gdClass TextServer) ShapedTextGetCustomPunctuation(shaped RID) string { return methodCall[string](gdClass.obj.get(), methodTextServer[122], &shaped) }
func (gdClass TextServer) ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[123], &shaped, &orientation) }
func (gdClass TextServer) ShapedTextGetOrientation(shaped RID) TextServerOrientation { return methodCall[TextServerOrientation](gdClass.obj.get(), methodTextServer[124], &shaped) }
func (gdClass TextServer) ShapedTextSetPreserveInvalid(shaped RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[125], &shaped, &enabled) }
func (gdClass TextServer) ShapedTextGetPreserveInvalid(shaped RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[126], &shaped) }
func (gdClass TextServer) ShapedTextSetPreserveControl(shaped RID, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[127], &shaped, &enabled) }
func (gdClass TextServer) ShapedTextGetPreserveControl(shaped RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[128], &shaped) }
func (gdClass TextServer) ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[129], &shaped, &spacing, &value) }
func (gdClass TextServer) ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[130], &shaped, &spacing) }
func (gdClass TextServer) ShapedTextAddString(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[131], &shaped, &text, &fonts, &size, &opentype_features, &language, &meta) }
func (gdClass TextServer) ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[132], &shaped, &key, &size, &inline_align, &length) }
func (gdClass TextServer) ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[133], &shaped, &key, &size, &inline_align) }
func (gdClass TextServer) ShapedGetSpanCount(shaped RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[134], &shaped) }
func (gdClass TextServer) ShapedGetSpanMeta(shaped RID, index int64) any { return methodCall[any](gdClass.obj.get(), methodTextServer[135], &shaped, &index) }
func (gdClass TextServer) ShapedSetSpanUpdateFont(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[136], &shaped, &index, &fonts, &size, &opentype_features) }
func (gdClass TextServer) ShapedTextSubstr(shaped RID, start int64, length int64) RID { return methodCall[RID](gdClass.obj.get(), methodTextServer[137], &shaped, &start, &length) }
func (gdClass TextServer) ShapedTextGetParent(shaped RID) RID { return methodCall[RID](gdClass.obj.get(), methodTextServer[138], &shaped) }
func (gdClass TextServer) ShapedTextFitToWidth(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[139], &shaped, &width, &jst_flags) }
func (gdClass TextServer) ShapedTextTabAlign(shaped RID, tab_stops []float32) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[140], &shaped, &tab_stops) }
func (gdClass TextServer) ShapedTextShape(shaped RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[141], &shaped) }
func (gdClass TextServer) ShapedTextIsReady(shaped RID) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[142], &shaped) }
func (gdClass TextServer) ShapedTextGetGlyphs(shaped RID) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[143], &shaped) }
func (gdClass TextServer) ShapedTextSortLogical(shaped RID) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[144], &shaped) }
func (gdClass TextServer) ShapedTextGetGlyphCount(shaped RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[145], &shaped) }
func (gdClass TextServer) ShapedTextGetRange(shaped RID) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTextServer[146], &shaped) }
func (gdClass TextServer) ShapedTextGetLineBreaksAdv(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[147], &shaped, &width, &start, &once, &break_flags) }
func (gdClass TextServer) ShapedTextGetLineBreaks(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[148], &shaped, &width, &start, &break_flags) }
func (gdClass TextServer) ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[149], &shaped, &grapheme_flags) }
func (gdClass TextServer) ShapedTextGetTrimPos(shaped RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[150], &shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisPos(shaped RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[151], &shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphs(shaped RID) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[152], &shaped) }
func (gdClass TextServer) ShapedTextGetEllipsisGlyphCount(shaped RID) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[153], &shaped) }
func (gdClass TextServer) ShapedTextOverrunTrimToWidth(shaped RID, width float64, overrun_trim_flags TextServerTextOverrunFlag)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[154], &shaped, &width, &overrun_trim_flags) }
func (gdClass TextServer) ShapedTextGetObjects(shaped RID) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[155], &shaped) }
func (gdClass TextServer) ShapedTextGetObjectRect(shaped RID, key any) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTextServer[156], &shaped, &key) }
func (gdClass TextServer) ShapedTextGetSize(shaped RID) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[157], &shaped) }
func (gdClass TextServer) ShapedTextGetAscent(shaped RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[158], &shaped) }
func (gdClass TextServer) ShapedTextGetDescent(shaped RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[159], &shaped) }
func (gdClass TextServer) ShapedTextGetWidth(shaped RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[160], &shaped) }
func (gdClass TextServer) ShapedTextGetUnderlinePosition(shaped RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[161], &shaped) }
func (gdClass TextServer) ShapedTextGetUnderlineThickness(shaped RID) float64 { return methodCall[float64](gdClass.obj.get(), methodTextServer[162], &shaped) }
func (gdClass TextServer) ShapedTextGetCarets(shaped RID, position int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTextServer[163], &shaped, &position) }
func (gdClass TextServer) ShapedTextGetSelection(shaped RID, start int64, end int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodTextServer[164], &shaped, &start, &end) }
func (gdClass TextServer) ShapedTextHitTestGrapheme(shaped RID, coords float64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[165], &shaped, &coords) }
func (gdClass TextServer) ShapedTextHitTestPosition(shaped RID, coords float64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[166], &shaped, &coords) }
func (gdClass TextServer) ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextServer[167], &shaped, &pos) }
func (gdClass TextServer) ShapedTextNextGraphemePos(shaped RID, pos int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[168], &shaped, &pos) }
func (gdClass TextServer) ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[169], &shaped, &pos) }
func (gdClass TextServer) ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[170], &shaped, &canvas, &pos, &clip_l, &clip_r, &color) }
func (gdClass TextServer) ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextServer[171], &shaped, &canvas, &pos, &clip_l, &clip_r, &outline_size, &color) }
func (gdClass TextServer) ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) TextServerDirection { return methodCall[TextServerDirection](gdClass.obj.get(), methodTextServer[172], &shaped, &start, &end) }
func (gdClass TextServer) FormatNumber(number string, language string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[173], &number, &language) }
func (gdClass TextServer) ParseNumber(number string, language string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[174], &number, &language) }
func (gdClass TextServer) PercentSign(language string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[175], &language) }
func (gdClass TextServer) StringGetWordBreaks(s string, language string) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodTextServer[176], &s, &language) }
func (gdClass TextServer) IsConfusable(s string, dict []string) int64 { return methodCall[int64](gdClass.obj.get(), methodTextServer[177], &s, &dict) }
func (gdClass TextServer) SpoofCheck(s string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[178], &s) }
func (gdClass TextServer) StripDiacritics(s string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[179], &s) }
func (gdClass TextServer) IsValidIdentifier(s string) bool { return methodCall[bool](gdClass.obj.get(), methodTextServer[180], &s) }
func (gdClass TextServer) StringToUpper(s string, language string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[181], &s, &language) }
func (gdClass TextServer) StringToLower(s string, language string) string { return methodCall[string](gdClass.obj.get(), methodTextServer[182], &s, &language) }
func (gdClass TextServer) ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) Array { return methodCall[Array](gdClass.obj.get(), methodTextServer[183], &parser_type, &args, &text) }

type TextServerAdvanced struct{self *TextServerAdvanced; obj safeObject }
func NewTextServerAdvanced(ctx Context, at *TextServerAdvanced) TextServerAdvanced { if at == nil { at = new(TextServerAdvanced) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextServerAdvanced) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextServerAdvanced) owner() cObject { return gdClass.obj.get() }
func (TextServerAdvanced) class() string { return "TextServerAdvanced\000" }

func (gdClass TextServerAdvanced) TextServerExtension() TextServerExtension { return TextServerExtension{obj:gdClass.obj} }

func (gdClass TextServerAdvanced) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TextServerExtension().virtual(rtype, name)
}

type TextServerDummy struct{self *TextServerDummy; obj safeObject }
func NewTextServerDummy(ctx Context, at *TextServerDummy) TextServerDummy { if at == nil { at = new(TextServerDummy) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextServerDummy) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextServerDummy) owner() cObject { return gdClass.obj.get() }
func (TextServerDummy) class() string { return "TextServerDummy\000" }

func (gdClass TextServerDummy) TextServerExtension() TextServerExtension { return TextServerExtension{obj:gdClass.obj} }

func (gdClass TextServerDummy) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TextServerExtension().virtual(rtype, name)
}

type TextServerExtension struct{self *TextServerExtension; obj safeObject }
func NewTextServerExtension(ctx Context, at *TextServerExtension) TextServerExtension { if at == nil { at = new(TextServerExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextServerExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextServerExtension) owner() cObject { return gdClass.obj.get() }
func (TextServerExtension) class() string { return "TextServerExtension\000" }

func (gdClass TextServerExtension) TextServer() TextServer { return TextServer{obj:gdClass.obj} }

func (gdClass TextServerExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "has_feature":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasFeature(feature TextServerFeature) bool }{}).Elem()) {
			return rtype.MethodByName(`HasFeature`)
		}
		return
	case "get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetName() string }{}).Elem()) {
			return rtype.MethodByName(`GetName`)
		}
		return
	case "get_features":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetFeatures() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetFeatures`)
		}
		return
	case "free_rid":
		if rtype.Implements(reflect.TypeOf([0]interface{ FreeRid(rid RID)  }{}).Elem()) {
			return rtype.MethodByName(`FreeRid`)
		}
		return
	case "has":
		if rtype.Implements(reflect.TypeOf([0]interface{ Has(rid RID) bool }{}).Elem()) {
			return rtype.MethodByName(`Has`)
		}
		return
	case "load_support_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ LoadSupportData(filename string) bool }{}).Elem()) {
			return rtype.MethodByName(`LoadSupportData`)
		}
		return
	case "get_support_data_filename":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSupportDataFilename() string }{}).Elem()) {
			return rtype.MethodByName(`GetSupportDataFilename`)
		}
		return
	case "get_support_data_info":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSupportDataInfo() string }{}).Elem()) {
			return rtype.MethodByName(`GetSupportDataInfo`)
		}
		return
	case "save_support_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ SaveSupportData(filename string) bool }{}).Elem()) {
			return rtype.MethodByName(`SaveSupportData`)
		}
		return
	case "is_locale_right_to_left":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsLocaleRightToLeft(locale string) bool }{}).Elem()) {
			return rtype.MethodByName(`IsLocaleRightToLeft`)
		}
		return
	case "name_to_tag":
		if rtype.Implements(reflect.TypeOf([0]interface{ NameToTag(name string) int64 }{}).Elem()) {
			return rtype.MethodByName(`NameToTag`)
		}
		return
	case "tag_to_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ TagToName(tag int64) string }{}).Elem()) {
			return rtype.MethodByName(`TagToName`)
		}
		return
	case "create_font":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateFont() RID }{}).Elem()) {
			return rtype.MethodByName(`CreateFont`)
		}
		return
	case "font_set_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetData(font_rid RID, data []byte)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetData`)
		}
		return
	case "font_set_data_ptr":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetDataPtr(font_rid RID, data_ptr []byte, data_size int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetDataPtr`)
		}
		return
	case "font_set_face_index":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetFaceIndex(font_rid RID, face_index int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetFaceIndex`)
		}
		return
	case "font_get_face_index":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetFaceIndex(font_rid RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetFaceIndex`)
		}
		return
	case "font_get_face_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetFaceCount(font_rid RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetFaceCount`)
		}
		return
	case "font_set_style":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetStyle(font_rid RID, style TextServerFontStyle)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetStyle`)
		}
		return
	case "font_get_style":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetStyle(font_rid RID) TextServerFontStyle }{}).Elem()) {
			return rtype.MethodByName(`FontGetStyle`)
		}
		return
	case "font_set_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetName(font_rid RID, name string)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetName`)
		}
		return
	case "font_get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetName(font_rid RID) string }{}).Elem()) {
			return rtype.MethodByName(`FontGetName`)
		}
		return
	case "font_set_style_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetStyleName(font_rid RID, name_style string)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetStyleName`)
		}
		return
	case "font_get_style_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetStyleName(font_rid RID) string }{}).Elem()) {
			return rtype.MethodByName(`FontGetStyleName`)
		}
		return
	case "font_set_antialiasing":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetAntialiasing(font_rid RID, antialiasing TextServerFontAntialiasing)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetAntialiasing`)
		}
		return
	case "font_get_antialiasing":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetAntialiasing(font_rid RID) TextServerFontAntialiasing }{}).Elem()) {
			return rtype.MethodByName(`FontGetAntialiasing`)
		}
		return
	case "font_set_generate_mipmaps":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGenerateMipmaps(font_rid RID, generate_mipmaps bool)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGenerateMipmaps`)
		}
		return
	case "font_get_generate_mipmaps":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGenerateMipmaps(font_rid RID) bool }{}).Elem()) {
			return rtype.MethodByName(`FontGetGenerateMipmaps`)
		}
		return
	case "font_set_multichannel_signed_distance_field":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetMultichannelSignedDistanceField(font_rid RID, msdf bool)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetMultichannelSignedDistanceField`)
		}
		return
	case "font_is_multichannel_signed_distance_field":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontIsMultichannelSignedDistanceField(font_rid RID) bool }{}).Elem()) {
			return rtype.MethodByName(`FontIsMultichannelSignedDistanceField`)
		}
		return
	case "font_set_msdf_pixel_range":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetMsdfPixelRange(font_rid RID, msdf_pixel_range int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetMsdfPixelRange`)
		}
		return
	case "font_get_msdf_pixel_range":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetMsdfPixelRange(font_rid RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetMsdfPixelRange`)
		}
		return
	case "font_set_msdf_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetMsdfSize(font_rid RID, msdf_size int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetMsdfSize`)
		}
		return
	case "font_get_msdf_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetMsdfSize(font_rid RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetMsdfSize`)
		}
		return
	case "font_set_fixed_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetFixedSize(font_rid RID, fixed_size int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetFixedSize`)
		}
		return
	case "font_get_fixed_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetFixedSize(font_rid RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetFixedSize`)
		}
		return
	case "font_set_force_autohinter":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetForceAutohinter(font_rid RID, force_autohinter bool)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetForceAutohinter`)
		}
		return
	case "font_is_force_autohinter":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontIsForceAutohinter(font_rid RID) bool }{}).Elem()) {
			return rtype.MethodByName(`FontIsForceAutohinter`)
		}
		return
	case "font_set_hinting":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetHinting(font_rid RID, hinting TextServerHinting)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetHinting`)
		}
		return
	case "font_get_hinting":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetHinting(font_rid RID) TextServerHinting }{}).Elem()) {
			return rtype.MethodByName(`FontGetHinting`)
		}
		return
	case "font_set_subpixel_positioning":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetSubpixelPositioning(font_rid RID, subpixel_positioning TextServerSubpixelPositioning)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetSubpixelPositioning`)
		}
		return
	case "font_get_subpixel_positioning":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetSubpixelPositioning(font_rid RID) TextServerSubpixelPositioning }{}).Elem()) {
			return rtype.MethodByName(`FontGetSubpixelPositioning`)
		}
		return
	case "font_set_embolden":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetEmbolden(font_rid RID, strength float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetEmbolden`)
		}
		return
	case "font_get_embolden":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetEmbolden(font_rid RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetEmbolden`)
		}
		return
	case "font_set_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetTransform(font_rid RID, transform Transform2D)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetTransform`)
		}
		return
	case "font_get_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetTransform(font_rid RID) Transform2D }{}).Elem()) {
			return rtype.MethodByName(`FontGetTransform`)
		}
		return
	case "font_set_variation_coordinates":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetVariationCoordinates(font_rid RID, variation_coordinates Dictionary)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetVariationCoordinates`)
		}
		return
	case "font_get_variation_coordinates":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetVariationCoordinates(font_rid RID) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`FontGetVariationCoordinates`)
		}
		return
	case "font_set_oversampling":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetOversampling(font_rid RID, oversampling float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetOversampling`)
		}
		return
	case "font_get_oversampling":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetOversampling(font_rid RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetOversampling`)
		}
		return
	case "font_get_size_cache_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetSizeCacheList(font_rid RID) Array }{}).Elem()) {
			return rtype.MethodByName(`FontGetSizeCacheList`)
		}
		return
	case "font_clear_size_cache":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontClearSizeCache(font_rid RID)  }{}).Elem()) {
			return rtype.MethodByName(`FontClearSizeCache`)
		}
		return
	case "font_remove_size_cache":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveSizeCache(font_rid RID, size Vector2i)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveSizeCache`)
		}
		return
	case "font_set_ascent":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetAscent(font_rid RID, size int64, ascent float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetAscent`)
		}
		return
	case "font_get_ascent":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetAscent(font_rid RID, size int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetAscent`)
		}
		return
	case "font_set_descent":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetDescent(font_rid RID, size int64, descent float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetDescent`)
		}
		return
	case "font_get_descent":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetDescent(font_rid RID, size int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetDescent`)
		}
		return
	case "font_set_underline_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetUnderlinePosition(font_rid RID, size int64, underline_position float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetUnderlinePosition`)
		}
		return
	case "font_get_underline_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetUnderlinePosition(font_rid RID, size int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetUnderlinePosition`)
		}
		return
	case "font_set_underline_thickness":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetUnderlineThickness(font_rid RID, size int64, underline_thickness float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetUnderlineThickness`)
		}
		return
	case "font_get_underline_thickness":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetUnderlineThickness(font_rid RID, size int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetUnderlineThickness`)
		}
		return
	case "font_set_scale":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetScale(font_rid RID, size int64, scale float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetScale`)
		}
		return
	case "font_get_scale":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetScale(font_rid RID, size int64) float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetScale`)
		}
		return
	case "font_get_texture_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetTextureCount(font_rid RID, size Vector2i) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetTextureCount`)
		}
		return
	case "font_clear_textures":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontClearTextures(font_rid RID, size Vector2i)  }{}).Elem()) {
			return rtype.MethodByName(`FontClearTextures`)
		}
		return
	case "font_remove_texture":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveTexture(font_rid RID, size Vector2i, texture_index int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveTexture`)
		}
		return
	case "font_set_texture_image":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetTextureImage(font_rid RID, size Vector2i, texture_index int64, image Image)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetTextureImage`)
		}
		return
	case "font_get_texture_image":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetTextureImage(font_rid RID, size Vector2i, texture_index int64) Image }{}).Elem()) {
			return rtype.MethodByName(`FontGetTextureImage`)
		}
		return
	case "font_set_texture_offsets":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetTextureOffsets(font_rid RID, size Vector2i, texture_index int64, offset []int32)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetTextureOffsets`)
		}
		return
	case "font_get_texture_offsets":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetTextureOffsets(font_rid RID, size Vector2i, texture_index int64) []int32 }{}).Elem()) {
			return rtype.MethodByName(`FontGetTextureOffsets`)
		}
		return
	case "font_get_glyph_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphList(font_rid RID, size Vector2i) []int32 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphList`)
		}
		return
	case "font_clear_glyphs":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontClearGlyphs(font_rid RID, size Vector2i)  }{}).Elem()) {
			return rtype.MethodByName(`FontClearGlyphs`)
		}
		return
	case "font_remove_glyph":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveGlyph(font_rid RID, size Vector2i, glyph int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveGlyph`)
		}
		return
	case "font_get_glyph_advance":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphAdvance(font_rid RID, size int64, glyph int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphAdvance`)
		}
		return
	case "font_set_glyph_advance":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlyphAdvance(font_rid RID, size int64, glyph int64, advance Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlyphAdvance`)
		}
		return
	case "font_get_glyph_offset":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphOffset(font_rid RID, size Vector2i, glyph int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphOffset`)
		}
		return
	case "font_set_glyph_offset":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlyphOffset(font_rid RID, size Vector2i, glyph int64, offset Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlyphOffset`)
		}
		return
	case "font_get_glyph_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphSize(font_rid RID, size Vector2i, glyph int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphSize`)
		}
		return
	case "font_set_glyph_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlyphSize(font_rid RID, size Vector2i, glyph int64, gl_size Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlyphSize`)
		}
		return
	case "font_get_glyph_uv_rect":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphUvRect(font_rid RID, size Vector2i, glyph int64) Rect2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphUvRect`)
		}
		return
	case "font_set_glyph_uv_rect":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlyphUvRect(font_rid RID, size Vector2i, glyph int64, uv_rect Rect2)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlyphUvRect`)
		}
		return
	case "font_get_glyph_texture_idx":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphTextureIdx`)
		}
		return
	case "font_set_glyph_texture_idx":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlyphTextureIdx(font_rid RID, size Vector2i, glyph int64, texture_idx int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlyphTextureIdx`)
		}
		return
	case "font_get_glyph_texture_rid":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphTextureRid(font_rid RID, size Vector2i, glyph int64) RID }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphTextureRid`)
		}
		return
	case "font_get_glyph_texture_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphTextureSize(font_rid RID, size Vector2i, glyph int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphTextureSize`)
		}
		return
	case "font_get_glyph_contours":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphContours(font_rid RID, size int64, index int64) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphContours`)
		}
		return
	case "font_get_kerning_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetKerningList(font_rid RID, size int64) Array }{}).Elem()) {
			return rtype.MethodByName(`FontGetKerningList`)
		}
		return
	case "font_clear_kerning_map":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontClearKerningMap(font_rid RID, size int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontClearKerningMap`)
		}
		return
	case "font_remove_kerning":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveKerning(font_rid RID, size int64, glyph_pair Vector2i)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveKerning`)
		}
		return
	case "font_set_kerning":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetKerning(font_rid RID, size int64, glyph_pair Vector2i, kerning Vector2)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetKerning`)
		}
		return
	case "font_get_kerning":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetKerning(font_rid RID, size int64, glyph_pair Vector2i) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`FontGetKerning`)
		}
		return
	case "font_get_glyph_index":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlyphIndex(font_rid RID, size int64, char int64, variation_selector int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlyphIndex`)
		}
		return
	case "font_has_char":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontHasChar(font_rid RID, char int64) bool }{}).Elem()) {
			return rtype.MethodByName(`FontHasChar`)
		}
		return
	case "font_get_supported_chars":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetSupportedChars(font_rid RID) string }{}).Elem()) {
			return rtype.MethodByName(`FontGetSupportedChars`)
		}
		return
	case "font_render_range":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRenderRange(font_rid RID, size Vector2i, start int64, end int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontRenderRange`)
		}
		return
	case "font_render_glyph":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRenderGlyph(font_rid RID, size Vector2i, index int64)  }{}).Elem()) {
			return rtype.MethodByName(`FontRenderGlyph`)
		}
		return
	case "font_draw_glyph":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontDrawGlyph(font_rid RID, canvas RID, size int64, pos Vector2, index int64, color Color)  }{}).Elem()) {
			return rtype.MethodByName(`FontDrawGlyph`)
		}
		return
	case "font_draw_glyph_outline":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontDrawGlyphOutline(font_rid RID, canvas RID, size int64, outline_size int64, pos Vector2, index int64, color Color)  }{}).Elem()) {
			return rtype.MethodByName(`FontDrawGlyphOutline`)
		}
		return
	case "font_is_language_supported":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontIsLanguageSupported(font_rid RID, language string) bool }{}).Elem()) {
			return rtype.MethodByName(`FontIsLanguageSupported`)
		}
		return
	case "font_set_language_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetLanguageSupportOverride(font_rid RID, language string, supported bool)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetLanguageSupportOverride`)
		}
		return
	case "font_get_language_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetLanguageSupportOverride(font_rid RID, language string) bool }{}).Elem()) {
			return rtype.MethodByName(`FontGetLanguageSupportOverride`)
		}
		return
	case "font_remove_language_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveLanguageSupportOverride(font_rid RID, language string)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveLanguageSupportOverride`)
		}
		return
	case "font_get_language_support_overrides":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetLanguageSupportOverrides(font_rid RID) []string }{}).Elem()) {
			return rtype.MethodByName(`FontGetLanguageSupportOverrides`)
		}
		return
	case "font_is_script_supported":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontIsScriptSupported(font_rid RID, script string) bool }{}).Elem()) {
			return rtype.MethodByName(`FontIsScriptSupported`)
		}
		return
	case "font_set_script_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetScriptSupportOverride(font_rid RID, script string, supported bool)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetScriptSupportOverride`)
		}
		return
	case "font_get_script_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetScriptSupportOverride(font_rid RID, script string) bool }{}).Elem()) {
			return rtype.MethodByName(`FontGetScriptSupportOverride`)
		}
		return
	case "font_remove_script_support_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontRemoveScriptSupportOverride(font_rid RID, script string)  }{}).Elem()) {
			return rtype.MethodByName(`FontRemoveScriptSupportOverride`)
		}
		return
	case "font_get_script_support_overrides":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetScriptSupportOverrides(font_rid RID) []string }{}).Elem()) {
			return rtype.MethodByName(`FontGetScriptSupportOverrides`)
		}
		return
	case "font_set_opentype_feature_overrides":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetOpentypeFeatureOverrides(font_rid RID, overrides Dictionary)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetOpentypeFeatureOverrides`)
		}
		return
	case "font_get_opentype_feature_overrides":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetOpentypeFeatureOverrides(font_rid RID) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`FontGetOpentypeFeatureOverrides`)
		}
		return
	case "font_supported_feature_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSupportedFeatureList(font_rid RID) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`FontSupportedFeatureList`)
		}
		return
	case "font_supported_variation_list":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSupportedVariationList(font_rid RID) Dictionary }{}).Elem()) {
			return rtype.MethodByName(`FontSupportedVariationList`)
		}
		return
	case "font_get_global_oversampling":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontGetGlobalOversampling() float64 }{}).Elem()) {
			return rtype.MethodByName(`FontGetGlobalOversampling`)
		}
		return
	case "font_set_global_oversampling":
		if rtype.Implements(reflect.TypeOf([0]interface{ FontSetGlobalOversampling(oversampling float64)  }{}).Elem()) {
			return rtype.MethodByName(`FontSetGlobalOversampling`)
		}
		return
	case "get_hex_code_box_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHexCodeBoxSize(size int64, index int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`GetHexCodeBoxSize`)
		}
		return
	case "draw_hex_code_box":
		if rtype.Implements(reflect.TypeOf([0]interface{ DrawHexCodeBox(canvas RID, size int64, pos Vector2, index int64, color Color)  }{}).Elem()) {
			return rtype.MethodByName(`DrawHexCodeBox`)
		}
		return
	case "create_shaped_text":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateShapedText(direction TextServerDirection, orientation TextServerOrientation) RID }{}).Elem()) {
			return rtype.MethodByName(`CreateShapedText`)
		}
		return
	case "shaped_text_clear":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextClear(shaped RID)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextClear`)
		}
		return
	case "shaped_text_set_direction":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetDirection(shaped RID, direction TextServerDirection)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetDirection`)
		}
		return
	case "shaped_text_get_direction":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetDirection(shaped RID) TextServerDirection }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetDirection`)
		}
		return
	case "shaped_text_get_inferred_direction":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetInferredDirection(shaped RID) TextServerDirection }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetInferredDirection`)
		}
		return
	case "shaped_text_set_bidi_override":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetBidiOverride(shaped RID, override Array)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetBidiOverride`)
		}
		return
	case "shaped_text_set_custom_punctuation":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetCustomPunctuation(shaped RID, punct string)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetCustomPunctuation`)
		}
		return
	case "shaped_text_get_custom_punctuation":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetCustomPunctuation(shaped RID) string }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetCustomPunctuation`)
		}
		return
	case "shaped_text_set_orientation":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetOrientation(shaped RID, orientation TextServerOrientation)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetOrientation`)
		}
		return
	case "shaped_text_get_orientation":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetOrientation(shaped RID) TextServerOrientation }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetOrientation`)
		}
		return
	case "shaped_text_set_preserve_invalid":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetPreserveInvalid(shaped RID, enabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetPreserveInvalid`)
		}
		return
	case "shaped_text_get_preserve_invalid":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetPreserveInvalid(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetPreserveInvalid`)
		}
		return
	case "shaped_text_set_preserve_control":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetPreserveControl(shaped RID, enabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetPreserveControl`)
		}
		return
	case "shaped_text_get_preserve_control":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetPreserveControl(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetPreserveControl`)
		}
		return
	case "shaped_text_set_spacing":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSetSpacing(shaped RID, spacing TextServerSpacingType, value int64)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSetSpacing`)
		}
		return
	case "shaped_text_get_spacing":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetSpacing(shaped RID, spacing TextServerSpacingType) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetSpacing`)
		}
		return
	case "shaped_text_add_string":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextAddString(shaped RID, text string, fonts Array, size int64, opentype_features Dictionary, language string, meta any) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextAddString`)
		}
		return
	case "shaped_text_add_object":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextAddObject(shaped RID, key any, size Vector2, inline_align InlineAlignment, length int64) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextAddObject`)
		}
		return
	case "shaped_text_resize_object":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextResizeObject(shaped RID, key any, size Vector2, inline_align InlineAlignment) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextResizeObject`)
		}
		return
	case "shaped_get_span_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedGetSpanCount(shaped RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedGetSpanCount`)
		}
		return
	case "shaped_get_span_meta":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedGetSpanMeta(shaped RID, index int64) any }{}).Elem()) {
			return rtype.MethodByName(`ShapedGetSpanMeta`)
		}
		return
	case "shaped_set_span_update_font":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedSetSpanUpdateFont(shaped RID, index int64, fonts Array, size int64, opentype_features Dictionary)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedSetSpanUpdateFont`)
		}
		return
	case "shaped_text_substr":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSubstr(shaped RID, start int64, length int64) RID }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSubstr`)
		}
		return
	case "shaped_text_get_parent":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetParent(shaped RID) RID }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetParent`)
		}
		return
	case "shaped_text_fit_to_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextFitToWidth(shaped RID, width float64, jst_flags TextServerJustificationFlag) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextFitToWidth`)
		}
		return
	case "shaped_text_tab_align":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextTabAlign(shaped RID, tab_stops []float32) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextTabAlign`)
		}
		return
	case "shaped_text_shape":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextShape(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextShape`)
		}
		return
	case "shaped_text_update_breaks":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextUpdateBreaks(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextUpdateBreaks`)
		}
		return
	case "shaped_text_update_justification_ops":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextUpdateJustificationOps(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextUpdateJustificationOps`)
		}
		return
	case "shaped_text_is_ready":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextIsReady(shaped RID) bool }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextIsReady`)
		}
		return
	case "shaped_text_get_glyphs":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetGlyphs(shaped RID) * Glyph }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetGlyphs`)
		}
		return
	case "shaped_text_sort_logical":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextSortLogical(shaped RID) * Glyph }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextSortLogical`)
		}
		return
	case "shaped_text_get_glyph_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetGlyphCount(shaped RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetGlyphCount`)
		}
		return
	case "shaped_text_get_range":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetRange(shaped RID) Vector2i }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetRange`)
		}
		return
	case "shaped_text_get_line_breaks_adv":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetLineBreaksAdv(shaped RID, width []float32, start int64, once bool, break_flags TextServerLineBreakFlag) []int32 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetLineBreaksAdv`)
		}
		return
	case "shaped_text_get_line_breaks":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetLineBreaks(shaped RID, width float64, start int64, break_flags TextServerLineBreakFlag) []int32 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetLineBreaks`)
		}
		return
	case "shaped_text_get_word_breaks":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetWordBreaks(shaped RID, grapheme_flags TextServerGraphemeFlag) []int32 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetWordBreaks`)
		}
		return
	case "shaped_text_get_trim_pos":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetTrimPos(shaped RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetTrimPos`)
		}
		return
	case "shaped_text_get_ellipsis_pos":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetEllipsisPos(shaped RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetEllipsisPos`)
		}
		return
	case "shaped_text_get_ellipsis_glyph_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetEllipsisGlyphCount(shaped RID) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetEllipsisGlyphCount`)
		}
		return
	case "shaped_text_get_ellipsis_glyphs":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetEllipsisGlyphs(shaped RID) * Glyph }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetEllipsisGlyphs`)
		}
		return
	case "shaped_text_overrun_trim_to_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextOverrunTrimToWidth(shaped RID, width float64, trim_flags TextServerTextOverrunFlag)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextOverrunTrimToWidth`)
		}
		return
	case "shaped_text_get_objects":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetObjects(shaped RID) Array }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetObjects`)
		}
		return
	case "shaped_text_get_object_rect":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetObjectRect(shaped RID, key any) Rect2 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetObjectRect`)
		}
		return
	case "shaped_text_get_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetSize(shaped RID) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetSize`)
		}
		return
	case "shaped_text_get_ascent":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetAscent(shaped RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetAscent`)
		}
		return
	case "shaped_text_get_descent":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetDescent(shaped RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetDescent`)
		}
		return
	case "shaped_text_get_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetWidth(shaped RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetWidth`)
		}
		return
	case "shaped_text_get_underline_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetUnderlinePosition(shaped RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetUnderlinePosition`)
		}
		return
	case "shaped_text_get_underline_thickness":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetUnderlineThickness(shaped RID) float64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetUnderlineThickness`)
		}
		return
	case "shaped_text_get_dominant_direction_in_range":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetDominantDirectionInRange(shaped RID, start int64, end int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetDominantDirectionInRange`)
		}
		return
	case "shaped_text_get_carets":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetCarets(shaped RID, position int64, caret *CaretInfo)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetCarets`)
		}
		return
	case "shaped_text_get_selection":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetSelection(shaped RID, start int64, end int64) []Vector2 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetSelection`)
		}
		return
	case "shaped_text_hit_test_grapheme":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextHitTestGrapheme(shaped RID, coord float64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextHitTestGrapheme`)
		}
		return
	case "shaped_text_hit_test_position":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextHitTestPosition(shaped RID, coord float64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextHitTestPosition`)
		}
		return
	case "shaped_text_draw":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextDraw(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, color Color)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextDraw`)
		}
		return
	case "shaped_text_draw_outline":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextDrawOutline(shaped RID, canvas RID, pos Vector2, clip_l float64, clip_r float64, outline_size int64, color Color)  }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextDrawOutline`)
		}
		return
	case "shaped_text_get_grapheme_bounds":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextGetGraphemeBounds(shaped RID, pos int64) Vector2 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextGetGraphemeBounds`)
		}
		return
	case "shaped_text_next_grapheme_pos":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextNextGraphemePos(shaped RID, pos int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextNextGraphemePos`)
		}
		return
	case "shaped_text_prev_grapheme_pos":
		if rtype.Implements(reflect.TypeOf([0]interface{ ShapedTextPrevGraphemePos(shaped RID, pos int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`ShapedTextPrevGraphemePos`)
		}
		return
	case "format_number":
		if rtype.Implements(reflect.TypeOf([0]interface{ FormatNumber(s string, language string) string }{}).Elem()) {
			return rtype.MethodByName(`FormatNumber`)
		}
		return
	case "parse_number":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseNumber(s string, language string) string }{}).Elem()) {
			return rtype.MethodByName(`ParseNumber`)
		}
		return
	case "percent_sign":
		if rtype.Implements(reflect.TypeOf([0]interface{ PercentSign(language string) string }{}).Elem()) {
			return rtype.MethodByName(`PercentSign`)
		}
		return
	case "strip_diacritics":
		if rtype.Implements(reflect.TypeOf([0]interface{ StripDiacritics(s string) string }{}).Elem()) {
			return rtype.MethodByName(`StripDiacritics`)
		}
		return
	case "is_valid_identifier":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsValidIdentifier(s string) bool }{}).Elem()) {
			return rtype.MethodByName(`IsValidIdentifier`)
		}
		return
	case "string_get_word_breaks":
		if rtype.Implements(reflect.TypeOf([0]interface{ StringGetWordBreaks(s string, language string) []int32 }{}).Elem()) {
			return rtype.MethodByName(`StringGetWordBreaks`)
		}
		return
	case "is_confusable":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsConfusable(s string, dict []string) int64 }{}).Elem()) {
			return rtype.MethodByName(`IsConfusable`)
		}
		return
	case "spoof_check":
		if rtype.Implements(reflect.TypeOf([0]interface{ SpoofCheck(s string) bool }{}).Elem()) {
			return rtype.MethodByName(`SpoofCheck`)
		}
		return
	case "string_to_upper":
		if rtype.Implements(reflect.TypeOf([0]interface{ StringToUpper(s string, language string) string }{}).Elem()) {
			return rtype.MethodByName(`StringToUpper`)
		}
		return
	case "string_to_lower":
		if rtype.Implements(reflect.TypeOf([0]interface{ StringToLower(s string, language string) string }{}).Elem()) {
			return rtype.MethodByName(`StringToLower`)
		}
		return
	case "parse_structured_text":
		if rtype.Implements(reflect.TypeOf([0]interface{ ParseStructuredText(parser_type TextServerStructuredTextParser, args Array, text string) Array }{}).Elem()) {
			return rtype.MethodByName(`ParseStructuredText`)
		}
		return
	}
	return gdClass.TextServer().virtual(rtype, name)
}
var TextServerManager TextServerManagerSingleton

type TextServerManagerSingleton struct{self *TextServerManagerSingleton; obj safeObject }
func NewTextServerManagerSingleton(ctx Context, at *TextServerManagerSingleton) TextServerManagerSingleton { if at == nil { at = new(TextServerManagerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TextServerManagerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextServerManagerSingleton) owner() cObject { return gdClass.obj.get() }
func (TextServerManagerSingleton) class() string { return "TextServerManagerSingleton\000" }

func (gdClass TextServerManagerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodTextServerManagerSingleton [8]cMethodBind
func (gdClass TextServerManagerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass TextServerManagerSingleton) AddInterface(intf TextServer)  { methodCall[struct{}](gdClass.obj.get(), methodTextServerManagerSingleton[0], &intf) }
func (gdClass TextServerManagerSingleton) GetInterfaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTextServerManagerSingleton[1]) }
func (gdClass TextServerManagerSingleton) RemoveInterface(intf TextServer)  { methodCall[struct{}](gdClass.obj.get(), methodTextServerManagerSingleton[2], &intf) }
func (gdClass TextServerManagerSingleton) GetInterface(idx int64) TextServer { return methodCall[TextServer](gdClass.obj.get(), methodTextServerManagerSingleton[3], &idx) }
func (gdClass TextServerManagerSingleton) GetInterfaces() Array { return methodCall[Array](gdClass.obj.get(), methodTextServerManagerSingleton[4]) }
func (gdClass TextServerManagerSingleton) FindInterface(name string) TextServer { return methodCall[TextServer](gdClass.obj.get(), methodTextServerManagerSingleton[5], &name) }
func (gdClass TextServerManagerSingleton) SetPrimaryInterface(index TextServer)  { methodCall[struct{}](gdClass.obj.get(), methodTextServerManagerSingleton[6], &index) }
func (gdClass TextServerManagerSingleton) GetPrimaryInterface() TextServer { return methodCall[TextServer](gdClass.obj.get(), methodTextServerManagerSingleton[7]) }

type Texture struct{self *Texture; obj safeObject }
func NewTexture(ctx Context, at *Texture) Texture { if at == nil { at = new(Texture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Texture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Texture) owner() cObject { return gdClass.obj.get() }
func (Texture) class() string { return "Texture\000" }

func (gdClass Texture) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass Texture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}

type Texture2D struct{self *Texture2D; obj safeObject }
func NewTexture2D(ctx Context, at *Texture2D) Texture2D { if at == nil { at = new(Texture2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Texture2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Texture2D) owner() cObject { return gdClass.obj.get() }
func (Texture2D) class() string { return "Texture2D\000" }

func (gdClass Texture2D) Texture() Texture { return Texture{obj:gdClass.obj} }

var methodTexture2D [8]cMethodBind
func (gdClass Texture2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetWidth() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetWidth`)
		}
		return
	case "_get_height":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHeight() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetHeight`)
		}
		return
	case "_is_pixel_opaque":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsPixelOpaque(x int64, y int64) bool }{}).Elem()) {
			return rtype.MethodByName(`IsPixelOpaque`)
		}
		return
	case "_has_alpha":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasAlpha() bool }{}).Elem()) {
			return rtype.MethodByName(`HasAlpha`)
		}
		return
	case "_draw":
		if rtype.Implements(reflect.TypeOf([0]interface{ Draw(to_canvas_item RID, pos Vector2, modulate Color, transpose bool)  }{}).Elem()) {
			return rtype.MethodByName(`Draw`)
		}
		return
	case "_draw_rect":
		if rtype.Implements(reflect.TypeOf([0]interface{ DrawRect(to_canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  }{}).Elem()) {
			return rtype.MethodByName(`DrawRect`)
		}
		return
	case "_draw_rect_region":
		if rtype.Implements(reflect.TypeOf([0]interface{ DrawRectRegion(tp_canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  }{}).Elem()) {
			return rtype.MethodByName(`DrawRectRegion`)
		}
		return
	}
	return gdClass.Texture().virtual(rtype, name)
}
func (gdClass Texture2D) GetWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTexture2D[0]) }
func (gdClass Texture2D) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodTexture2D[1]) }
func (gdClass Texture2D) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTexture2D[2]) }
func (gdClass Texture2D) HasAlpha() bool { return methodCall[bool](gdClass.obj.get(), methodTexture2D[3]) }
func (gdClass Texture2D) Draw(canvas_item RID, position Vector2, modulate Color, transpose bool)  { methodCall[struct{}](gdClass.obj.get(), methodTexture2D[4], &canvas_item, &position, &modulate, &transpose) }
func (gdClass Texture2D) DrawRect(canvas_item RID, rect Rect2, tile bool, modulate Color, transpose bool)  { methodCall[struct{}](gdClass.obj.get(), methodTexture2D[5], &canvas_item, &rect, &tile, &modulate, &transpose) }
func (gdClass Texture2D) DrawRectRegion(canvas_item RID, rect Rect2, src_rect Rect2, modulate Color, transpose bool, clip_uv bool)  { methodCall[struct{}](gdClass.obj.get(), methodTexture2D[6], &canvas_item, &rect, &src_rect, &modulate, &transpose, &clip_uv) }
func (gdClass Texture2D) GetImage() Image { return methodCall[Image](gdClass.obj.get(), methodTexture2D[7]) }

type Texture2DArray struct{self *Texture2DArray; obj safeObject }
func NewTexture2DArray(ctx Context, at *Texture2DArray) Texture2DArray { if at == nil { at = new(Texture2DArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Texture2DArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Texture2DArray) owner() cObject { return gdClass.obj.get() }
func (Texture2DArray) class() string { return "Texture2DArray\000" }

func (gdClass Texture2DArray) ImageTextureLayered() ImageTextureLayered { return ImageTextureLayered{obj:gdClass.obj} }

func (gdClass Texture2DArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ImageTextureLayered().virtual(rtype, name)
}

type Texture3D struct{self *Texture3D; obj safeObject }
func NewTexture3D(ctx Context, at *Texture3D) Texture3D { if at == nil { at = new(Texture3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Texture3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Texture3D) owner() cObject { return gdClass.obj.get() }
func (Texture3D) class() string { return "Texture3D\000" }

func (gdClass Texture3D) Texture() Texture { return Texture{obj:gdClass.obj} }

var methodTexture3D [6]cMethodBind
func (gdClass Texture3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_format":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetFormat() ImageFormat }{}).Elem()) {
			return rtype.MethodByName(`GetFormat`)
		}
		return
	case "_get_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetWidth() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetWidth`)
		}
		return
	case "_get_height":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHeight() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetHeight`)
		}
		return
	case "_get_depth":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDepth() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetDepth`)
		}
		return
	case "_has_mipmaps":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasMipmaps() bool }{}).Elem()) {
			return rtype.MethodByName(`HasMipmaps`)
		}
		return
	case "_get_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetData() Array }{}).Elem()) {
			return rtype.MethodByName(`GetData`)
		}
		return
	}
	return gdClass.Texture().virtual(rtype, name)
}
func (gdClass Texture3D) GetFormat() ImageFormat { return methodCall[ImageFormat](gdClass.obj.get(), methodTexture3D[0]) }
func (gdClass Texture3D) GetWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTexture3D[1]) }
func (gdClass Texture3D) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodTexture3D[2]) }
func (gdClass Texture3D) GetDepth() int64 { return methodCall[int64](gdClass.obj.get(), methodTexture3D[3]) }
func (gdClass Texture3D) HasMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodTexture3D[4]) }
func (gdClass Texture3D) GetData() Array { return methodCall[Array](gdClass.obj.get(), methodTexture3D[5]) }

type TextureButtonStretchMode int64

const (
	TextureButtonStretchScale TextureButtonStretchMode = 0
	TextureButtonStretchTile TextureButtonStretchMode = 1
	TextureButtonStretchKeep TextureButtonStretchMode = 2
	TextureButtonStretchKeepCentered TextureButtonStretchMode = 3
	TextureButtonStretchKeepAspect TextureButtonStretchMode = 4
	TextureButtonStretchKeepAspectCentered TextureButtonStretchMode = 5
	TextureButtonStretchKeepAspectCovered TextureButtonStretchMode = 6
)

type TextureButton struct{self *TextureButton; obj safeObject }
func NewTextureButton(ctx Context, at *TextureButton) TextureButton { if at == nil { at = new(TextureButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TextureButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextureButton) owner() cObject { return gdClass.obj.get() }
func (TextureButton) class() string { return "TextureButton\000" }

func (gdClass TextureButton) BaseButton() BaseButton { return BaseButton{obj:gdClass.obj} }

var methodTextureButton [20]cMethodBind
func (gdClass TextureButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BaseButton().virtual(rtype, name)
}
func (gdClass TextureButton) SetNormalTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[0], &texture) }
func (gdClass TextureButton) SetPressedTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[1], &texture) }
func (gdClass TextureButton) SetHoverTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[2], &texture) }
func (gdClass TextureButton) SetDisabledTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[3], &texture) }
func (gdClass TextureButton) SetFocusedTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[4], &texture) }
func (gdClass TextureButton) SetClickMask(mask BitMap)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[5], &mask) }
func (gdClass TextureButton) SetIgnoreTextureSize(ignore bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[6], &ignore) }
func (gdClass TextureButton) SetStretchMode(mode TextureButtonStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[7], &mode) }
func (gdClass TextureButton) SetFlipH(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[8], &enable) }
func (gdClass TextureButton) IsFlippedH() bool { return methodCall[bool](gdClass.obj.get(), methodTextureButton[9]) }
func (gdClass TextureButton) SetFlipV(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureButton[10], &enable) }
func (gdClass TextureButton) IsFlippedV() bool { return methodCall[bool](gdClass.obj.get(), methodTextureButton[11]) }
func (gdClass TextureButton) GetNormalTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureButton[12]) }
func (gdClass TextureButton) GetPressedTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureButton[13]) }
func (gdClass TextureButton) GetHoverTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureButton[14]) }
func (gdClass TextureButton) GetDisabledTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureButton[15]) }
func (gdClass TextureButton) GetFocusedTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureButton[16]) }
func (gdClass TextureButton) GetClickMask() BitMap { return methodCall[BitMap](gdClass.obj.get(), methodTextureButton[17]) }
func (gdClass TextureButton) GetIgnoreTextureSize() bool { return methodCall[bool](gdClass.obj.get(), methodTextureButton[18]) }
func (gdClass TextureButton) GetStretchMode() TextureButtonStretchMode { return methodCall[TextureButtonStretchMode](gdClass.obj.get(), methodTextureButton[19]) }

type TextureLayeredLayeredType int64

const (
	TextureLayeredLayeredType2dArray TextureLayeredLayeredType = 0
	TextureLayeredLayeredTypeCubemap TextureLayeredLayeredType = 1
	TextureLayeredLayeredTypeCubemapArray TextureLayeredLayeredType = 2
)

type TextureLayered struct{self *TextureLayered; obj safeObject }
func NewTextureLayered(ctx Context, at *TextureLayered) TextureLayered { if at == nil { at = new(TextureLayered) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TextureLayered) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextureLayered) owner() cObject { return gdClass.obj.get() }
func (TextureLayered) class() string { return "TextureLayered\000" }

func (gdClass TextureLayered) Texture() Texture { return Texture{obj:gdClass.obj} }

var methodTextureLayered [7]cMethodBind
func (gdClass TextureLayered) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_format":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetFormat() ImageFormat }{}).Elem()) {
			return rtype.MethodByName(`GetFormat`)
		}
		return
	case "_get_layered_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLayeredType() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetLayeredType`)
		}
		return
	case "_get_width":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetWidth() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetWidth`)
		}
		return
	case "_get_height":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetHeight() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetHeight`)
		}
		return
	case "_get_layers":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLayers() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetLayers`)
		}
		return
	case "_has_mipmaps":
		if rtype.Implements(reflect.TypeOf([0]interface{ HasMipmaps() bool }{}).Elem()) {
			return rtype.MethodByName(`HasMipmaps`)
		}
		return
	case "_get_layer_data":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLayerData(layer_index int64) Image }{}).Elem()) {
			return rtype.MethodByName(`GetLayerData`)
		}
		return
	}
	return gdClass.Texture().virtual(rtype, name)
}
func (gdClass TextureLayered) GetFormat() ImageFormat { return methodCall[ImageFormat](gdClass.obj.get(), methodTextureLayered[0]) }
func (gdClass TextureLayered) GetLayeredType() TextureLayeredLayeredType { return methodCall[TextureLayeredLayeredType](gdClass.obj.get(), methodTextureLayered[1]) }
func (gdClass TextureLayered) GetWidth() int64 { return methodCall[int64](gdClass.obj.get(), methodTextureLayered[2]) }
func (gdClass TextureLayered) GetHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodTextureLayered[3]) }
func (gdClass TextureLayered) GetLayers() int64 { return methodCall[int64](gdClass.obj.get(), methodTextureLayered[4]) }
func (gdClass TextureLayered) HasMipmaps() bool { return methodCall[bool](gdClass.obj.get(), methodTextureLayered[5]) }
func (gdClass TextureLayered) GetLayerData(layer int64) Image { return methodCall[Image](gdClass.obj.get(), methodTextureLayered[6], &layer) }

type TextureProgressBarFillMode int64

const (
	TextureProgressBarFillLeftToRight TextureProgressBarFillMode = 0
	TextureProgressBarFillRightToLeft TextureProgressBarFillMode = 1
	TextureProgressBarFillTopToBottom TextureProgressBarFillMode = 2
	TextureProgressBarFillBottomToTop TextureProgressBarFillMode = 3
	TextureProgressBarFillClockwise TextureProgressBarFillMode = 4
	TextureProgressBarFillCounterClockwise TextureProgressBarFillMode = 5
	TextureProgressBarFillBilinearLeftAndRight TextureProgressBarFillMode = 6
	TextureProgressBarFillBilinearTopAndBottom TextureProgressBarFillMode = 7
	TextureProgressBarFillClockwiseAndCounterClockwise TextureProgressBarFillMode = 8
)

type TextureProgressBar struct{self *TextureProgressBar; obj safeObject }
func NewTextureProgressBar(ctx Context, at *TextureProgressBar) TextureProgressBar { if at == nil { at = new(TextureProgressBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TextureProgressBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextureProgressBar) owner() cObject { return gdClass.obj.get() }
func (TextureProgressBar) class() string { return "TextureProgressBar\000" }

func (gdClass TextureProgressBar) Range() Range { return Range{obj:gdClass.obj} }

var methodTextureProgressBar [26]cMethodBind
func (gdClass TextureProgressBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Range().virtual(rtype, name)
}
func (gdClass TextureProgressBar) SetUnderTexture(tex Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[0], &tex) }
func (gdClass TextureProgressBar) GetUnderTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureProgressBar[1]) }
func (gdClass TextureProgressBar) SetProgressTexture(tex Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[2], &tex) }
func (gdClass TextureProgressBar) GetProgressTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureProgressBar[3]) }
func (gdClass TextureProgressBar) SetOverTexture(tex Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[4], &tex) }
func (gdClass TextureProgressBar) GetOverTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureProgressBar[5]) }
func (gdClass TextureProgressBar) SetFillMode(mode int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[6], &mode) }
func (gdClass TextureProgressBar) GetFillMode() int64 { return methodCall[int64](gdClass.obj.get(), methodTextureProgressBar[7]) }
func (gdClass TextureProgressBar) SetTintUnder(tint Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[8], &tint) }
func (gdClass TextureProgressBar) GetTintUnder() Color { return methodCall[Color](gdClass.obj.get(), methodTextureProgressBar[9]) }
func (gdClass TextureProgressBar) SetTintProgress(tint Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[10], &tint) }
func (gdClass TextureProgressBar) GetTintProgress() Color { return methodCall[Color](gdClass.obj.get(), methodTextureProgressBar[11]) }
func (gdClass TextureProgressBar) SetTintOver(tint Color)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[12], &tint) }
func (gdClass TextureProgressBar) GetTintOver() Color { return methodCall[Color](gdClass.obj.get(), methodTextureProgressBar[13]) }
func (gdClass TextureProgressBar) SetTextureProgressOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[14], &offset) }
func (gdClass TextureProgressBar) GetTextureProgressOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextureProgressBar[15]) }
func (gdClass TextureProgressBar) SetRadialInitialAngle(mode float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[16], &mode) }
func (gdClass TextureProgressBar) GetRadialInitialAngle() float64 { return methodCall[float64](gdClass.obj.get(), methodTextureProgressBar[17]) }
func (gdClass TextureProgressBar) SetRadialCenterOffset(mode Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[18], &mode) }
func (gdClass TextureProgressBar) GetRadialCenterOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTextureProgressBar[19]) }
func (gdClass TextureProgressBar) SetFillDegrees(mode float64)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[20], &mode) }
func (gdClass TextureProgressBar) GetFillDegrees() float64 { return methodCall[float64](gdClass.obj.get(), methodTextureProgressBar[21]) }
func (gdClass TextureProgressBar) SetStretchMargin(margin Side, value int64)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[22], &margin, &value) }
func (gdClass TextureProgressBar) GetStretchMargin(margin Side) int64 { return methodCall[int64](gdClass.obj.get(), methodTextureProgressBar[23], &margin) }
func (gdClass TextureProgressBar) SetNinePatchStretch(stretch bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureProgressBar[24], &stretch) }
func (gdClass TextureProgressBar) GetNinePatchStretch() bool { return methodCall[bool](gdClass.obj.get(), methodTextureProgressBar[25]) }

type TextureRectStretchMode int64

const (
	TextureRectStretchScale TextureRectStretchMode = 0
	TextureRectStretchTile TextureRectStretchMode = 1
	TextureRectStretchKeep TextureRectStretchMode = 2
	TextureRectStretchKeepCentered TextureRectStretchMode = 3
	TextureRectStretchKeepAspect TextureRectStretchMode = 4
	TextureRectStretchKeepAspectCentered TextureRectStretchMode = 5
	TextureRectStretchKeepAspectCovered TextureRectStretchMode = 6
)

type TextureRect struct{self *TextureRect; obj safeObject }
func NewTextureRect(ctx Context, at *TextureRect) TextureRect { if at == nil { at = new(TextureRect) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TextureRect) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TextureRect) owner() cObject { return gdClass.obj.get() }
func (TextureRect) class() string { return "TextureRect\000" }

func (gdClass TextureRect) Control() Control { return Control{obj:gdClass.obj} }

var methodTextureRect [10]cMethodBind
func (gdClass TextureRect) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass TextureRect) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTextureRect[0], &texture) }
func (gdClass TextureRect) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTextureRect[1]) }
func (gdClass TextureRect) SetIgnoreTextureSize(ignore bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureRect[2], &ignore) }
func (gdClass TextureRect) GetIgnoreTextureSize() bool { return methodCall[bool](gdClass.obj.get(), methodTextureRect[3]) }
func (gdClass TextureRect) SetFlipH(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureRect[4], &enable) }
func (gdClass TextureRect) IsFlippedH() bool { return methodCall[bool](gdClass.obj.get(), methodTextureRect[5]) }
func (gdClass TextureRect) SetFlipV(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTextureRect[6], &enable) }
func (gdClass TextureRect) IsFlippedV() bool { return methodCall[bool](gdClass.obj.get(), methodTextureRect[7]) }
func (gdClass TextureRect) SetStretchMode(stretch_mode TextureRectStretchMode)  { methodCall[struct{}](gdClass.obj.get(), methodTextureRect[8], &stretch_mode) }
func (gdClass TextureRect) GetStretchMode() TextureRectStretchMode { return methodCall[TextureRectStretchMode](gdClass.obj.get(), methodTextureRect[9]) }

type ThemeDataType int64

const (
	ThemeDataTypeColor ThemeDataType = 0
	ThemeDataTypeConstant ThemeDataType = 1
	ThemeDataTypeFont ThemeDataType = 2
	ThemeDataTypeFontSize ThemeDataType = 3
	ThemeDataTypeIcon ThemeDataType = 4
	ThemeDataTypeStylebox ThemeDataType = 5
	ThemeDataTypeMax ThemeDataType = 6
)

type Theme struct{self *Theme; obj safeObject }
func NewTheme(ctx Context, at *Theme) Theme { if at == nil { at = new(Theme) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Theme) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Theme) owner() cObject { return gdClass.obj.get() }
func (Theme) class() string { return "Theme\000" }

func (gdClass Theme) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodTheme [68]cMethodBind
func (gdClass Theme) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Theme) SetIcon(name Name, theme_type Name, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[0], &name, &theme_type, &texture) }
func (gdClass Theme) GetIcon(name Name, theme_type Name) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTheme[1], &name, &theme_type) }
func (gdClass Theme) HasIcon(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[2], &name, &theme_type) }
func (gdClass Theme) RenameIcon(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[3], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearIcon(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[4], &name, &theme_type) }
func (gdClass Theme) GetIconList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[5], &theme_type) }
func (gdClass Theme) GetIconTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[6]) }
func (gdClass Theme) SetStylebox(name Name, theme_type Name, texture StyleBox)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[7], &name, &theme_type, &texture) }
func (gdClass Theme) GetStylebox(name Name, theme_type Name) StyleBox { return methodCall[StyleBox](gdClass.obj.get(), methodTheme[8], &name, &theme_type) }
func (gdClass Theme) HasStylebox(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[9], &name, &theme_type) }
func (gdClass Theme) RenameStylebox(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[10], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearStylebox(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[11], &name, &theme_type) }
func (gdClass Theme) GetStyleboxList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[12], &theme_type) }
func (gdClass Theme) GetStyleboxTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[13]) }
func (gdClass Theme) SetFont(name Name, theme_type Name, font Font)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[14], &name, &theme_type, &font) }
func (gdClass Theme) GetFont(name Name, theme_type Name) Font { return methodCall[Font](gdClass.obj.get(), methodTheme[15], &name, &theme_type) }
func (gdClass Theme) HasFont(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[16], &name, &theme_type) }
func (gdClass Theme) RenameFont(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[17], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearFont(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[18], &name, &theme_type) }
func (gdClass Theme) GetFontList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[19], &theme_type) }
func (gdClass Theme) GetFontTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[20]) }
func (gdClass Theme) SetFontSize(name Name, theme_type Name, font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[21], &name, &theme_type, &font_size) }
func (gdClass Theme) GetFontSize(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodTheme[22], &name, &theme_type) }
func (gdClass Theme) HasFontSize(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[23], &name, &theme_type) }
func (gdClass Theme) RenameFontSize(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[24], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearFontSize(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[25], &name, &theme_type) }
func (gdClass Theme) GetFontSizeList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[26], &theme_type) }
func (gdClass Theme) GetFontSizeTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[27]) }
func (gdClass Theme) SetColor(name Name, theme_type Name, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[28], &name, &theme_type, &color) }
func (gdClass Theme) GetColor(name Name, theme_type Name) Color { return methodCall[Color](gdClass.obj.get(), methodTheme[29], &name, &theme_type) }
func (gdClass Theme) HasColor(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[30], &name, &theme_type) }
func (gdClass Theme) RenameColor(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[31], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearColor(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[32], &name, &theme_type) }
func (gdClass Theme) GetColorList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[33], &theme_type) }
func (gdClass Theme) GetColorTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[34]) }
func (gdClass Theme) SetConstant(name Name, theme_type Name, constant int64)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[35], &name, &theme_type, &constant) }
func (gdClass Theme) GetConstant(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodTheme[36], &name, &theme_type) }
func (gdClass Theme) HasConstant(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[37], &name, &theme_type) }
func (gdClass Theme) RenameConstant(old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[38], &old_name, &name, &theme_type) }
func (gdClass Theme) ClearConstant(name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[39], &name, &theme_type) }
func (gdClass Theme) GetConstantList(theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[40], &theme_type) }
func (gdClass Theme) GetConstantTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[41]) }
func (gdClass Theme) SetDefaultBaseScale(base_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[42], &base_scale) }
func (gdClass Theme) GetDefaultBaseScale() float64 { return methodCall[float64](gdClass.obj.get(), methodTheme[43]) }
func (gdClass Theme) HasDefaultBaseScale() bool { return methodCall[bool](gdClass.obj.get(), methodTheme[44]) }
func (gdClass Theme) SetDefaultFont(font Font)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[45], &font) }
func (gdClass Theme) GetDefaultFont() Font { return methodCall[Font](gdClass.obj.get(), methodTheme[46]) }
func (gdClass Theme) HasDefaultFont() bool { return methodCall[bool](gdClass.obj.get(), methodTheme[47]) }
func (gdClass Theme) SetDefaultFontSize(font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[48], &font_size) }
func (gdClass Theme) GetDefaultFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodTheme[49]) }
func (gdClass Theme) HasDefaultFontSize() bool { return methodCall[bool](gdClass.obj.get(), methodTheme[50]) }
func (gdClass Theme) SetThemeItem(data_type ThemeDataType, name Name, theme_type Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[51], &data_type, &name, &theme_type, &value) }
func (gdClass Theme) GetThemeItem(data_type ThemeDataType, name Name, theme_type Name) any { return methodCall[any](gdClass.obj.get(), methodTheme[52], &data_type, &name, &theme_type) }
func (gdClass Theme) HasThemeItem(data_type ThemeDataType, name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[53], &data_type, &name, &theme_type) }
func (gdClass Theme) RenameThemeItem(data_type ThemeDataType, old_name Name, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[54], &data_type, &old_name, &name, &theme_type) }
func (gdClass Theme) ClearThemeItem(data_type ThemeDataType, name Name, theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[55], &data_type, &name, &theme_type) }
func (gdClass Theme) GetThemeItemList(data_type ThemeDataType, theme_type string) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[56], &data_type, &theme_type) }
func (gdClass Theme) GetThemeItemTypeList(data_type ThemeDataType) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[57], &data_type) }
func (gdClass Theme) SetTypeVariation(theme_type Name, base_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[58], &theme_type, &base_type) }
func (gdClass Theme) IsTypeVariation(theme_type Name, base_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodTheme[59], &theme_type, &base_type) }
func (gdClass Theme) ClearTypeVariation(theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[60], &theme_type) }
func (gdClass Theme) GetTypeVariationBase(theme_type Name) Name { return methodCall[Name](gdClass.obj.get(), methodTheme[61], &theme_type) }
func (gdClass Theme) GetTypeVariationList(base_type Name) []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[62], &base_type) }
func (gdClass Theme) AddType(theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[63], &theme_type) }
func (gdClass Theme) RemoveType(theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[64], &theme_type) }
func (gdClass Theme) GetTypeList() []string { return methodCall[[]string](gdClass.obj.get(), methodTheme[65]) }
func (gdClass Theme) MergeWith(other Theme)  { methodCall[struct{}](gdClass.obj.get(), methodTheme[66], &other) }
func (gdClass Theme) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTheme[67]) }

type ThreadPriority int64

const (
	ThreadPriorityLow ThreadPriority = 0
	ThreadPriorityNormal ThreadPriority = 1
	ThreadPriorityHigh ThreadPriority = 2
)

type Thread struct{self *Thread; obj safeObject }
func NewThread(ctx Context, at *Thread) Thread { if at == nil { at = new(Thread) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Thread) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Thread) owner() cObject { return gdClass.obj.get() }
func (Thread) class() string { return "Thread\000" }

func (gdClass Thread) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodThread [5]cMethodBind
func (gdClass Thread) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Thread) Start(callable Callable, priority ThreadPriority) int64 { return methodCall[int64](gdClass.obj.get(), methodThread[0], &callable, &priority) }
func (gdClass Thread) GetId() string { return methodCall[string](gdClass.obj.get(), methodThread[1]) }
func (gdClass Thread) IsStarted() bool { return methodCall[bool](gdClass.obj.get(), methodThread[2]) }
func (gdClass Thread) IsAlive() bool { return methodCall[bool](gdClass.obj.get(), methodThread[3]) }
func (gdClass Thread) WaitToFinish() any { return methodCall[any](gdClass.obj.get(), methodThread[4]) }

type TileData struct{self *TileData; obj safeObject }
func NewTileData(ctx Context, at *TileData) TileData { if at == nil { at = new(TileData) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TileData) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileData) owner() cObject { return gdClass.obj.get() }
func (TileData) class() string { return "TileData\000" }

func (gdClass TileData) Object() Object { return Object{obj:gdClass.obj} }

var methodTileData [46]cMethodBind
func (gdClass TileData) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass TileData) SetFlipH(flip_h bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[0], &flip_h) }
func (gdClass TileData) GetFlipH() bool { return methodCall[bool](gdClass.obj.get(), methodTileData[1]) }
func (gdClass TileData) SetFlipV(flip_v bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[2], &flip_v) }
func (gdClass TileData) GetFlipV() bool { return methodCall[bool](gdClass.obj.get(), methodTileData[3]) }
func (gdClass TileData) SetTranspose(transpose bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[4], &transpose) }
func (gdClass TileData) GetTranspose() bool { return methodCall[bool](gdClass.obj.get(), methodTileData[5]) }
func (gdClass TileData) SetMaterial(material Material)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[6], &material) }
func (gdClass TileData) GetMaterial() Material { return methodCall[Material](gdClass.obj.get(), methodTileData[7]) }
func (gdClass TileData) SetTextureOffset(texture_offset Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[8], &texture_offset) }
func (gdClass TileData) GetTextureOffset() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileData[9]) }
func (gdClass TileData) SetModulate(modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[10], &modulate) }
func (gdClass TileData) GetModulate() Color { return methodCall[Color](gdClass.obj.get(), methodTileData[11]) }
func (gdClass TileData) SetZIndex(z_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[12], &z_index) }
func (gdClass TileData) GetZIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[13]) }
func (gdClass TileData) SetYSortOrigin(y_sort_origin int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[14], &y_sort_origin) }
func (gdClass TileData) GetYSortOrigin() int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[15]) }
func (gdClass TileData) SetOccluder(layer_id int64, occluder_polygon OccluderPolygon2D)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[16], &layer_id, &occluder_polygon) }
func (gdClass TileData) GetOccluder(layer_id int64) OccluderPolygon2D { return methodCall[OccluderPolygon2D](gdClass.obj.get(), methodTileData[17], &layer_id) }
func (gdClass TileData) SetConstantLinearVelocity(layer_id int64, velocity Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[18], &layer_id, &velocity) }
func (gdClass TileData) GetConstantLinearVelocity(layer_id int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTileData[19], &layer_id) }
func (gdClass TileData) SetConstantAngularVelocity(layer_id int64, velocity float64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[20], &layer_id, &velocity) }
func (gdClass TileData) GetConstantAngularVelocity(layer_id int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTileData[21], &layer_id) }
func (gdClass TileData) SetCollisionPolygonsCount(layer_id int64, polygons_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[22], &layer_id, &polygons_count) }
func (gdClass TileData) GetCollisionPolygonsCount(layer_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[23], &layer_id) }
func (gdClass TileData) AddCollisionPolygon(layer_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[24], &layer_id) }
func (gdClass TileData) RemoveCollisionPolygon(layer_id int64, polygon_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[25], &layer_id, &polygon_index) }
func (gdClass TileData) SetCollisionPolygonPoints(layer_id int64, polygon_index int64, polygon []Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[26], &layer_id, &polygon_index, &polygon) }
func (gdClass TileData) GetCollisionPolygonPoints(layer_id int64, polygon_index int64) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodTileData[27], &layer_id, &polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWay(layer_id int64, polygon_index int64, one_way bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[28], &layer_id, &polygon_index, &one_way) }
func (gdClass TileData) IsCollisionPolygonOneWay(layer_id int64, polygon_index int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileData[29], &layer_id, &polygon_index) }
func (gdClass TileData) SetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64, one_way_margin float64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[30], &layer_id, &polygon_index, &one_way_margin) }
func (gdClass TileData) GetCollisionPolygonOneWayMargin(layer_id int64, polygon_index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTileData[31], &layer_id, &polygon_index) }
func (gdClass TileData) SetTerrainSet(terrain_set int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[32], &terrain_set) }
func (gdClass TileData) GetTerrainSet() int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[33]) }
func (gdClass TileData) SetTerrain(terrain int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[34], &terrain) }
func (gdClass TileData) GetTerrain() int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[35]) }
func (gdClass TileData) SetTerrainPeeringBit(peering_bit TileSetCellNeighbor, terrain int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[36], &peering_bit, &terrain) }
func (gdClass TileData) GetTerrainPeeringBit(peering_bit TileSetCellNeighbor) int64 { return methodCall[int64](gdClass.obj.get(), methodTileData[37], &peering_bit) }
func (gdClass TileData) SetNavigationPolygon(layer_id int64, navigation_polygon NavigationPolygon)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[38], &layer_id, &navigation_polygon) }
func (gdClass TileData) GetNavigationPolygon(layer_id int64) NavigationPolygon { return methodCall[NavigationPolygon](gdClass.obj.get(), methodTileData[39], &layer_id) }
func (gdClass TileData) SetProbability(probability float64)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[40], &probability) }
func (gdClass TileData) GetProbability() float64 { return methodCall[float64](gdClass.obj.get(), methodTileData[41]) }
func (gdClass TileData) SetCustomData(layer_name string, value any)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[42], &layer_name, &value) }
func (gdClass TileData) GetCustomData(layer_name string) any { return methodCall[any](gdClass.obj.get(), methodTileData[43], &layer_name) }
func (gdClass TileData) SetCustomDataByLayerId(layer_id int64, value any)  { methodCall[struct{}](gdClass.obj.get(), methodTileData[44], &layer_id, &value) }
func (gdClass TileData) GetCustomDataByLayerId(layer_id int64) any { return methodCall[any](gdClass.obj.get(), methodTileData[45], &layer_id) }

type TileMapVisibilityMode int64

const (
	TileMapVisibilityModeDefault TileMapVisibilityMode = 0
	TileMapVisibilityModeForceHide TileMapVisibilityMode = 2
	TileMapVisibilityModeForceShow TileMapVisibilityMode = 1
)

type TileMap struct{self *TileMap; obj safeObject }
func NewTileMap(ctx Context, at *TileMap) TileMap { if at == nil { at = new(TileMap) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TileMap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileMap) owner() cObject { return gdClass.obj.get() }
func (TileMap) class() string { return "TileMap\000" }

func (gdClass TileMap) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodTileMap [48]cMethodBind
func (gdClass TileMap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_use_tile_data_runtime_update":
		if rtype.Implements(reflect.TypeOf([0]interface{ UseTileDataRuntimeUpdate(layer int64, coords Vector2i) bool }{}).Elem()) {
			return rtype.MethodByName(`UseTileDataRuntimeUpdate`)
		}
		return
	case "_tile_data_runtime_update":
		if rtype.Implements(reflect.TypeOf([0]interface{ TileDataRuntimeUpdate(layer int64, coords Vector2i, tile_data TileData)  }{}).Elem()) {
			return rtype.MethodByName(`TileDataRuntimeUpdate`)
		}
		return
	}
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass TileMap) SetTileset(tileset TileSet)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[0], &tileset) }
func (gdClass TileMap) GetTileset() TileSet { return methodCall[TileSet](gdClass.obj.get(), methodTileMap[1]) }
func (gdClass TileMap) SetQuadrantSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[2], &size) }
func (gdClass TileMap) GetQuadrantSize() int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[3]) }
func (gdClass TileMap) GetLayersCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[4]) }
func (gdClass TileMap) AddLayer(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[5], &to_position) }
func (gdClass TileMap) MoveLayer(layer int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[6], &layer, &to_position) }
func (gdClass TileMap) RemoveLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[7], &layer) }
func (gdClass TileMap) SetLayerName(layer int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[8], &layer, &name) }
func (gdClass TileMap) GetLayerName(layer int64) string { return methodCall[string](gdClass.obj.get(), methodTileMap[9], &layer) }
func (gdClass TileMap) SetLayerEnabled(layer int64, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[10], &layer, &enabled) }
func (gdClass TileMap) IsLayerEnabled(layer int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileMap[11], &layer) }
func (gdClass TileMap) SetLayerModulate(layer int64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[12], &layer, &modulate) }
func (gdClass TileMap) GetLayerModulate(layer int64) Color { return methodCall[Color](gdClass.obj.get(), methodTileMap[13], &layer) }
func (gdClass TileMap) SetLayerYSortEnabled(layer int64, y_sort_enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[14], &layer, &y_sort_enabled) }
func (gdClass TileMap) IsLayerYSortEnabled(layer int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileMap[15], &layer) }
func (gdClass TileMap) SetLayerYSortOrigin(layer int64, y_sort_origin int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[16], &layer, &y_sort_origin) }
func (gdClass TileMap) GetLayerYSortOrigin(layer int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[17], &layer) }
func (gdClass TileMap) SetLayerZIndex(layer int64, z_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[18], &layer, &z_index) }
func (gdClass TileMap) GetLayerZIndex(layer int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[19], &layer) }
func (gdClass TileMap) SetCollisionAnimatable(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[20], &enabled) }
func (gdClass TileMap) IsCollisionAnimatable() bool { return methodCall[bool](gdClass.obj.get(), methodTileMap[21]) }
func (gdClass TileMap) SetCollisionVisibilityMode(collision_visibility_mode TileMapVisibilityMode)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[22], &collision_visibility_mode) }
func (gdClass TileMap) GetCollisionVisibilityMode() TileMapVisibilityMode { return methodCall[TileMapVisibilityMode](gdClass.obj.get(), methodTileMap[23]) }
func (gdClass TileMap) SetNavigationVisibilityMode(navigation_visibility_mode TileMapVisibilityMode)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[24], &navigation_visibility_mode) }
func (gdClass TileMap) GetNavigationVisibilityMode() TileMapVisibilityMode { return methodCall[TileMapVisibilityMode](gdClass.obj.get(), methodTileMap[25]) }
func (gdClass TileMap) SetCell(layer int64, coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[26], &layer, &coords, &source_id, &atlas_coords, &alternative_tile) }
func (gdClass TileMap) EraseCell(layer int64, coords Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[27], &layer, &coords) }
func (gdClass TileMap) GetCellSourceId(layer int64, coords Vector2i, use_proxies bool) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[28], &layer, &coords, &use_proxies) }
func (gdClass TileMap) GetCellAtlasCoords(layer int64, coords Vector2i, use_proxies bool) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMap[29], &layer, &coords, &use_proxies) }
func (gdClass TileMap) GetCellAlternativeTile(layer int64, coords Vector2i, use_proxies bool) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMap[30], &layer, &coords, &use_proxies) }
func (gdClass TileMap) GetCellTileData(layer int64, coords Vector2i, use_proxies bool) TileData { return methodCall[TileData](gdClass.obj.get(), methodTileMap[31], &layer, &coords, &use_proxies) }
func (gdClass TileMap) GetCoordsForBodyRid(body RID) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMap[32], &body) }
func (gdClass TileMap) GetPattern(layer int64, coords_array Array) TileMapPattern { return methodCall[TileMapPattern](gdClass.obj.get(), methodTileMap[33], &layer, &coords_array) }
func (gdClass TileMap) MapPattern(position_in_tilemap Vector2i, coords_in_pattern Vector2i, pattern TileMapPattern) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMap[34], &position_in_tilemap, &coords_in_pattern, &pattern) }
func (gdClass TileMap) SetPattern(layer int64, position Vector2i, pattern TileMapPattern)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[35], &layer, &position, &pattern) }
func (gdClass TileMap) SetCellsTerrainConnect(layer int64, cells Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[36], &layer, &cells, &terrain_set, &terrain, &ignore_empty_terrains) }
func (gdClass TileMap) SetCellsTerrainPath(layer int64, path Array, terrain_set int64, terrain int64, ignore_empty_terrains bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[37], &layer, &path, &terrain_set, &terrain, &ignore_empty_terrains) }
func (gdClass TileMap) FixInvalidTiles()  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[38]) }
func (gdClass TileMap) ClearLayer(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[39], &layer) }
func (gdClass TileMap) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[40]) }
func (gdClass TileMap) ForceUpdate(layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMap[41], &layer) }
func (gdClass TileMap) GetSurroundingTiles(coords Vector2i) Array { return methodCall[Array](gdClass.obj.get(), methodTileMap[42], &coords) }
func (gdClass TileMap) GetUsedCells(layer int64) Array { return methodCall[Array](gdClass.obj.get(), methodTileMap[43], &layer) }
func (gdClass TileMap) GetUsedRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTileMap[44]) }
func (gdClass TileMap) MapToWorld(map_position Vector2i) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTileMap[45], &map_position) }
func (gdClass TileMap) WorldToMap(world_position Vector2) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMap[46], &world_position) }
func (gdClass TileMap) GetNeighborCell(coords Vector2i, neighbor TileSetCellNeighbor) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMap[47], &coords, &neighbor) }

type TileMapPattern struct{self *TileMapPattern; obj safeObject }
func NewTileMapPattern(ctx Context, at *TileMapPattern) TileMapPattern { if at == nil { at = new(TileMapPattern) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TileMapPattern) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileMapPattern) owner() cObject { return gdClass.obj.get() }
func (TileMapPattern) class() string { return "TileMapPattern\000" }

func (gdClass TileMapPattern) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodTileMapPattern [10]cMethodBind
func (gdClass TileMapPattern) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass TileMapPattern) SetCell(coords Vector2i, source_id int64, atlas_coords Vector2i, alternative_tile int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileMapPattern[0], &coords, &source_id, &atlas_coords, &alternative_tile) }
func (gdClass TileMapPattern) HasCell(coords Vector2i) bool { return methodCall[bool](gdClass.obj.get(), methodTileMapPattern[1], &coords) }
func (gdClass TileMapPattern) RemoveCell(coords Vector2i, update_size bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileMapPattern[2], &coords, &update_size) }
func (gdClass TileMapPattern) GetCellSourceId(coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMapPattern[3], &coords) }
func (gdClass TileMapPattern) GetCellAtlasCoords(coords Vector2i) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMapPattern[4], &coords) }
func (gdClass TileMapPattern) GetCellAlternativeTile(coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileMapPattern[5], &coords) }
func (gdClass TileMapPattern) GetUsedCells() Array { return methodCall[Array](gdClass.obj.get(), methodTileMapPattern[6]) }
func (gdClass TileMapPattern) GetSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileMapPattern[7]) }
func (gdClass TileMapPattern) SetSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileMapPattern[8], &size) }
func (gdClass TileMapPattern) IsEmpty() bool { return methodCall[bool](gdClass.obj.get(), methodTileMapPattern[9]) }

type TileSetTileShape int64

const (
	TileSetTileShapeSquare TileSetTileShape = 0
	TileSetTileShapeIsometric TileSetTileShape = 1
	TileSetTileShapeHalfOffsetSquare TileSetTileShape = 2
	TileSetTileShapeHexagon TileSetTileShape = 3
)

type TileSetTileLayout int64

const (
	TileSetTileLayoutStacked TileSetTileLayout = 0
	TileSetTileLayoutStackedOffset TileSetTileLayout = 1
	TileSetTileLayoutStairsRight TileSetTileLayout = 2
	TileSetTileLayoutStairsDown TileSetTileLayout = 3
	TileSetTileLayoutDiamondRight TileSetTileLayout = 4
	TileSetTileLayoutDiamondDown TileSetTileLayout = 5
)

type TileSetTileOffsetAxis int64

const (
	TileSetTileOffsetAxisHorizontal TileSetTileOffsetAxis = 0
	TileSetTileOffsetAxisVertical TileSetTileOffsetAxis = 1
)

type TileSetCellNeighbor int64

const (
	TileSetCellNeighborRightSide TileSetCellNeighbor = 0
	TileSetCellNeighborRightCorner TileSetCellNeighbor = 1
	TileSetCellNeighborBottomRightSide TileSetCellNeighbor = 2
	TileSetCellNeighborBottomRightCorner TileSetCellNeighbor = 3
	TileSetCellNeighborBottomSide TileSetCellNeighbor = 4
	TileSetCellNeighborBottomCorner TileSetCellNeighbor = 5
	TileSetCellNeighborBottomLeftSide TileSetCellNeighbor = 6
	TileSetCellNeighborBottomLeftCorner TileSetCellNeighbor = 7
	TileSetCellNeighborLeftSide TileSetCellNeighbor = 8
	TileSetCellNeighborLeftCorner TileSetCellNeighbor = 9
	TileSetCellNeighborTopLeftSide TileSetCellNeighbor = 10
	TileSetCellNeighborTopLeftCorner TileSetCellNeighbor = 11
	TileSetCellNeighborTopSide TileSetCellNeighbor = 12
	TileSetCellNeighborTopCorner TileSetCellNeighbor = 13
	TileSetCellNeighborTopRightSide TileSetCellNeighbor = 14
	TileSetCellNeighborTopRightCorner TileSetCellNeighbor = 15
)

type TileSetTerrainMode int64

const (
	TileSetTerrainModeMatchCornersAndSides TileSetTerrainMode = 0
	TileSetTerrainModeMatchCorners TileSetTerrainMode = 1
	TileSetTerrainModeMatchSides TileSetTerrainMode = 2
)

type TileSet struct{self *TileSet; obj safeObject }
func NewTileSet(ctx Context, at *TileSet) TileSet { if at == nil { at = new(TileSet) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TileSet) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileSet) owner() cObject { return gdClass.obj.get() }
func (TileSet) class() string { return "TileSet\000" }

func (gdClass TileSet) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodTileSet [84]cMethodBind
func (gdClass TileSet) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass TileSet) GetNextSourceId() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[0]) }
func (gdClass TileSet) AddSource(source TileSetSource, atlas_source_id_override int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[1], &source, &atlas_source_id_override) }
func (gdClass TileSet) RemoveSource(source_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[2], &source_id) }
func (gdClass TileSet) SetSourceId(source_id int64, new_source_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[3], &source_id, &new_source_id) }
func (gdClass TileSet) GetSourceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[4]) }
func (gdClass TileSet) GetSourceId(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[5], &index) }
func (gdClass TileSet) HasSource(source_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[6], &source_id) }
func (gdClass TileSet) GetSource(source_id int64) TileSetSource { return methodCall[TileSetSource](gdClass.obj.get(), methodTileSet[7], &source_id) }
func (gdClass TileSet) SetTileShape(shape TileSetTileShape)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[8], &shape) }
func (gdClass TileSet) GetTileShape() TileSetTileShape { return methodCall[TileSetTileShape](gdClass.obj.get(), methodTileSet[9]) }
func (gdClass TileSet) SetTileLayout(layout TileSetTileLayout)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[10], &layout) }
func (gdClass TileSet) GetTileLayout() TileSetTileLayout { return methodCall[TileSetTileLayout](gdClass.obj.get(), methodTileSet[11]) }
func (gdClass TileSet) SetTileOffsetAxis(alignment TileSetTileOffsetAxis)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[12], &alignment) }
func (gdClass TileSet) GetTileOffsetAxis() TileSetTileOffsetAxis { return methodCall[TileSetTileOffsetAxis](gdClass.obj.get(), methodTileSet[13]) }
func (gdClass TileSet) SetTileSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[14], &size) }
func (gdClass TileSet) GetTileSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSet[15]) }
func (gdClass TileSet) SetUvClipping(uv_clipping bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[16], &uv_clipping) }
func (gdClass TileSet) IsUvClipping() bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[17]) }
func (gdClass TileSet) GetOcclusionLayersCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[18]) }
func (gdClass TileSet) AddOcclusionLayer(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[19], &to_position) }
func (gdClass TileSet) MoveOcclusionLayer(layer_index int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[20], &layer_index, &to_position) }
func (gdClass TileSet) RemoveOcclusionLayer(layer_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[21], &layer_index) }
func (gdClass TileSet) SetOcclusionLayerLightMask(layer_index int64, light_mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[22], &layer_index, &light_mask) }
func (gdClass TileSet) GetOcclusionLayerLightMask(layer_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[23], &layer_index) }
func (gdClass TileSet) SetOcclusionLayerSdfCollision(layer_index int64, sdf_collision bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[24], &layer_index, &sdf_collision) }
func (gdClass TileSet) GetOcclusionLayerSdfCollision(layer_index int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[25], &layer_index) }
func (gdClass TileSet) GetPhysicsLayersCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[26]) }
func (gdClass TileSet) AddPhysicsLayer(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[27], &to_position) }
func (gdClass TileSet) MovePhysicsLayer(layer_index int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[28], &layer_index, &to_position) }
func (gdClass TileSet) RemovePhysicsLayer(layer_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[29], &layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionLayer(layer_index int64, layer int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[30], &layer_index, &layer) }
func (gdClass TileSet) GetPhysicsLayerCollisionLayer(layer_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[31], &layer_index) }
func (gdClass TileSet) SetPhysicsLayerCollisionMask(layer_index int64, mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[32], &layer_index, &mask) }
func (gdClass TileSet) GetPhysicsLayerCollisionMask(layer_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[33], &layer_index) }
func (gdClass TileSet) SetPhysicsLayerPhysicsMaterial(layer_index int64, physics_material PhysicsMaterial)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[34], &layer_index, &physics_material) }
func (gdClass TileSet) GetPhysicsLayerPhysicsMaterial(layer_index int64) PhysicsMaterial { return methodCall[PhysicsMaterial](gdClass.obj.get(), methodTileSet[35], &layer_index) }
func (gdClass TileSet) GetTerrainSetsCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[36]) }
func (gdClass TileSet) AddTerrainSet(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[37], &to_position) }
func (gdClass TileSet) MoveTerrainSet(terrain_set int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[38], &terrain_set, &to_position) }
func (gdClass TileSet) RemoveTerrainSet(terrain_set int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[39], &terrain_set) }
func (gdClass TileSet) SetTerrainSetMode(terrain_set int64, mode TileSetTerrainMode)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[40], &terrain_set, &mode) }
func (gdClass TileSet) GetTerrainSetMode(terrain_set int64) TileSetTerrainMode { return methodCall[TileSetTerrainMode](gdClass.obj.get(), methodTileSet[41], &terrain_set) }
func (gdClass TileSet) GetTerrainsCount(terrain_set int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[42], &terrain_set) }
func (gdClass TileSet) AddTerrain(terrain_set int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[43], &terrain_set, &to_position) }
func (gdClass TileSet) MoveTerrain(terrain_set int64, terrain_index int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[44], &terrain_set, &terrain_index, &to_position) }
func (gdClass TileSet) RemoveTerrain(terrain_set int64, terrain_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[45], &terrain_set, &terrain_index) }
func (gdClass TileSet) SetTerrainName(terrain_set int64, terrain_index int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[46], &terrain_set, &terrain_index, &name) }
func (gdClass TileSet) GetTerrainName(terrain_set int64, terrain_index int64) string { return methodCall[string](gdClass.obj.get(), methodTileSet[47], &terrain_set, &terrain_index) }
func (gdClass TileSet) SetTerrainColor(terrain_set int64, terrain_index int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[48], &terrain_set, &terrain_index, &color) }
func (gdClass TileSet) GetTerrainColor(terrain_set int64, terrain_index int64) Color { return methodCall[Color](gdClass.obj.get(), methodTileSet[49], &terrain_set, &terrain_index) }
func (gdClass TileSet) GetNavigationLayersCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[50]) }
func (gdClass TileSet) AddNavigationLayer(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[51], &to_position) }
func (gdClass TileSet) MoveNavigationLayer(layer_index int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[52], &layer_index, &to_position) }
func (gdClass TileSet) RemoveNavigationLayer(layer_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[53], &layer_index) }
func (gdClass TileSet) SetNavigationLayerLayers(layer_index int64, layers int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[54], &layer_index, &layers) }
func (gdClass TileSet) GetNavigationLayerLayers(layer_index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[55], &layer_index) }
func (gdClass TileSet) GetCustomDataLayersCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[56]) }
func (gdClass TileSet) AddCustomDataLayer(to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[57], &to_position) }
func (gdClass TileSet) MoveCustomDataLayer(layer_index int64, to_position int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[58], &layer_index, &to_position) }
func (gdClass TileSet) RemoveCustomDataLayer(layer_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[59], &layer_index) }
func (gdClass TileSet) GetCustomDataLayerByName(layer_name string) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[60], &layer_name) }
func (gdClass TileSet) SetCustomDataLayerName(layer_index int64, layer_name string)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[61], &layer_index, &layer_name) }
func (gdClass TileSet) GetCustomDataLayerName(layer_index int64) string { return methodCall[string](gdClass.obj.get(), methodTileSet[62], &layer_index) }
func (gdClass TileSet) SetCustomDataLayerType(layer_index int64, layer_type VariantType)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[63], &layer_index, &layer_type) }
func (gdClass TileSet) GetCustomDataLayerType(layer_index int64) VariantType { return methodCall[VariantType](gdClass.obj.get(), methodTileSet[64], &layer_index) }
func (gdClass TileSet) SetSourceLevelTileProxy(source_from int64, source_to int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[65], &source_from, &source_to) }
func (gdClass TileSet) GetSourceLevelTileProxy(source_from int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[66], &source_from) }
func (gdClass TileSet) HasSourceLevelTileProxy(source_from int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[67], &source_from) }
func (gdClass TileSet) RemoveSourceLevelTileProxy(source_from int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[68], &source_from) }
func (gdClass TileSet) SetCoordsLevelTileProxy(p_source_from int64, coords_from Vector2i, source_to int64, coords_to Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[69], &p_source_from, &coords_from, &source_to, &coords_to) }
func (gdClass TileSet) GetCoordsLevelTileProxy(source_from int64, coords_from Vector2i) Array { return methodCall[Array](gdClass.obj.get(), methodTileSet[70], &source_from, &coords_from) }
func (gdClass TileSet) HasCoordsLevelTileProxy(source_from int64, coords_from Vector2i) bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[71], &source_from, &coords_from) }
func (gdClass TileSet) RemoveCoordsLevelTileProxy(source_from int64, coords_from Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[72], &source_from, &coords_from) }
func (gdClass TileSet) SetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64, source_to int64, coords_to Vector2i, alternative_to int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[73], &source_from, &coords_from, &alternative_from, &source_to, &coords_to, &alternative_to) }
func (gdClass TileSet) GetAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return methodCall[Array](gdClass.obj.get(), methodTileSet[74], &source_from, &coords_from, &alternative_from) }
func (gdClass TileSet) HasAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSet[75], &source_from, &coords_from, &alternative_from) }
func (gdClass TileSet) RemoveAlternativeLevelTileProxy(source_from int64, coords_from Vector2i, alternative_from int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[76], &source_from, &coords_from, &alternative_from) }
func (gdClass TileSet) MapTileProxy(source_from int64, coords_from Vector2i, alternative_from int64) Array { return methodCall[Array](gdClass.obj.get(), methodTileSet[77], &source_from, &coords_from, &alternative_from) }
func (gdClass TileSet) CleanupInvalidTileProxies()  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[78]) }
func (gdClass TileSet) ClearTileProxies()  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[79]) }
func (gdClass TileSet) AddPattern(pattern TileMapPattern, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[80], &pattern, &index) }
func (gdClass TileSet) GetPattern(index int64) TileMapPattern { return methodCall[TileMapPattern](gdClass.obj.get(), methodTileSet[81], &index) }
func (gdClass TileSet) RemovePattern(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSet[82], &index) }
func (gdClass TileSet) GetPatternsCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSet[83]) }

type TileSetAtlasSource struct{self *TileSetAtlasSource; obj safeObject }
func NewTileSetAtlasSource(ctx Context, at *TileSetAtlasSource) TileSetAtlasSource { if at == nil { at = new(TileSetAtlasSource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TileSetAtlasSource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileSetAtlasSource) owner() cObject { return gdClass.obj.get() }
func (TileSetAtlasSource) class() string { return "TileSetAtlasSource\000" }

func (gdClass TileSetAtlasSource) TileSetSource() TileSetSource { return TileSetSource{obj:gdClass.obj} }

var methodTileSetAtlasSource [37]cMethodBind
func (gdClass TileSetAtlasSource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TileSetSource().virtual(rtype, name)
}
func (gdClass TileSetAtlasSource) SetTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[0], &texture) }
func (gdClass TileSetAtlasSource) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTileSetAtlasSource[1]) }
func (gdClass TileSetAtlasSource) SetMargins(margins Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[2], &margins) }
func (gdClass TileSetAtlasSource) GetMargins() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[3]) }
func (gdClass TileSetAtlasSource) SetSeparation(separation Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[4], &separation) }
func (gdClass TileSetAtlasSource) GetSeparation() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[5]) }
func (gdClass TileSetAtlasSource) SetTextureRegionSize(texture_region_size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[6], &texture_region_size) }
func (gdClass TileSetAtlasSource) GetTextureRegionSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[7]) }
func (gdClass TileSetAtlasSource) SetUseTexturePadding(use_texture_padding bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[8], &use_texture_padding) }
func (gdClass TileSetAtlasSource) GetUseTexturePadding() bool { return methodCall[bool](gdClass.obj.get(), methodTileSetAtlasSource[9]) }
func (gdClass TileSetAtlasSource) CreateTile(atlas_coords Vector2i, size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[10], &atlas_coords, &size) }
func (gdClass TileSetAtlasSource) RemoveTile(atlas_coords Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[11], &atlas_coords) }
func (gdClass TileSetAtlasSource) MoveTileInAtlas(atlas_coords Vector2i, new_atlas_coords Vector2i, new_size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[12], &atlas_coords, &new_atlas_coords, &new_size) }
func (gdClass TileSetAtlasSource) GetTileSizeInAtlas(atlas_coords Vector2i) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[13], &atlas_coords) }
func (gdClass TileSetAtlasSource) HasRoomForTile(atlas_coords Vector2i, size Vector2i, animation_columns int64, animation_separation Vector2i, frames_count int64, ignored_tile Vector2i) bool { return methodCall[bool](gdClass.obj.get(), methodTileSetAtlasSource[14], &atlas_coords, &size, &animation_columns, &animation_separation, &frames_count, &ignored_tile) }
func (gdClass TileSetAtlasSource) GetTilesToBeRemovedOnChange(texture Texture2D, margins Vector2i, separation Vector2i, texture_region_size Vector2i) []Vector2 { return methodCall[[]Vector2](gdClass.obj.get(), methodTileSetAtlasSource[15], &texture, &margins, &separation, &texture_region_size) }
func (gdClass TileSetAtlasSource) GetTileAtCoords(atlas_coords Vector2i) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[16], &atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationColumns(atlas_coords Vector2i, frame_columns int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[17], &atlas_coords, &frame_columns) }
func (gdClass TileSetAtlasSource) GetTileAnimationColumns(atlas_coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetAtlasSource[18], &atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSeparation(atlas_coords Vector2i, separation Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[19], &atlas_coords, &separation) }
func (gdClass TileSetAtlasSource) GetTileAnimationSeparation(atlas_coords Vector2i) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[20], &atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationSpeed(atlas_coords Vector2i, speed float64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[21], &atlas_coords, &speed) }
func (gdClass TileSetAtlasSource) GetTileAnimationSpeed(atlas_coords Vector2i) float64 { return methodCall[float64](gdClass.obj.get(), methodTileSetAtlasSource[22], &atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFramesCount(atlas_coords Vector2i, frames_count int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[23], &atlas_coords, &frames_count) }
func (gdClass TileSetAtlasSource) GetTileAnimationFramesCount(atlas_coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetAtlasSource[24], &atlas_coords) }
func (gdClass TileSetAtlasSource) SetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64, duration float64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[25], &atlas_coords, &frame_index, &duration) }
func (gdClass TileSetAtlasSource) GetTileAnimationFrameDuration(atlas_coords Vector2i, frame_index int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTileSetAtlasSource[26], &atlas_coords, &frame_index) }
func (gdClass TileSetAtlasSource) GetTileAnimationTotalDuration(atlas_coords Vector2i) float64 { return methodCall[float64](gdClass.obj.get(), methodTileSetAtlasSource[27], &atlas_coords) }
func (gdClass TileSetAtlasSource) CreateAlternativeTile(atlas_coords Vector2i, alternative_id_override int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetAtlasSource[28], &atlas_coords, &alternative_id_override) }
func (gdClass TileSetAtlasSource) RemoveAlternativeTile(atlas_coords Vector2i, alternative_tile int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[29], &atlas_coords, &alternative_tile) }
func (gdClass TileSetAtlasSource) SetAlternativeTileId(atlas_coords Vector2i, alternative_tile int64, new_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetAtlasSource[30], &atlas_coords, &alternative_tile, &new_id) }
func (gdClass TileSetAtlasSource) GetNextAlternativeTileId(atlas_coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetAtlasSource[31], &atlas_coords) }
func (gdClass TileSetAtlasSource) GetTileData(atlas_coords Vector2i, alternative_tile int64) TileData { return methodCall[TileData](gdClass.obj.get(), methodTileSetAtlasSource[32], &atlas_coords, &alternative_tile) }
func (gdClass TileSetAtlasSource) GetAtlasGridSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetAtlasSource[33]) }
func (gdClass TileSetAtlasSource) GetTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodTileSetAtlasSource[34], &atlas_coords, &frame) }
func (gdClass TileSetAtlasSource) GetRuntimeTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTileSetAtlasSource[35]) }
func (gdClass TileSetAtlasSource) GetRuntimeTileTextureRegion(atlas_coords Vector2i, frame int64) Rect2i { return methodCall[Rect2i](gdClass.obj.get(), methodTileSetAtlasSource[36], &atlas_coords, &frame) }

type TileSetScenesCollectionSource struct{self *TileSetScenesCollectionSource; obj safeObject }
func NewTileSetScenesCollectionSource(ctx Context, at *TileSetScenesCollectionSource) TileSetScenesCollectionSource { if at == nil { at = new(TileSetScenesCollectionSource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TileSetScenesCollectionSource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileSetScenesCollectionSource) owner() cObject { return gdClass.obj.get() }
func (TileSetScenesCollectionSource) class() string { return "TileSetScenesCollectionSource\000" }

func (gdClass TileSetScenesCollectionSource) TileSetSource() TileSetSource { return TileSetSource{obj:gdClass.obj} }

var methodTileSetScenesCollectionSource [11]cMethodBind
func (gdClass TileSetScenesCollectionSource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.TileSetSource().virtual(rtype, name)
}
func (gdClass TileSetScenesCollectionSource) GetSceneTilesCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetScenesCollectionSource[0]) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileId(index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetScenesCollectionSource[1], &index) }
func (gdClass TileSetScenesCollectionSource) HasSceneTileId(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSetScenesCollectionSource[2], &id) }
func (gdClass TileSetScenesCollectionSource) CreateSceneTile(packed_scene PackedScene, id_override int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetScenesCollectionSource[3], &packed_scene, &id_override) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileId(id int64, new_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetScenesCollectionSource[4], &id, &new_id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileScene(id int64, packed_scene PackedScene)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetScenesCollectionSource[5], &id, &packed_scene) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileScene(id int64) PackedScene { return methodCall[PackedScene](gdClass.obj.get(), methodTileSetScenesCollectionSource[6], &id) }
func (gdClass TileSetScenesCollectionSource) SetSceneTileDisplayPlaceholder(id int64, display_placeholder bool)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetScenesCollectionSource[7], &id, &display_placeholder) }
func (gdClass TileSetScenesCollectionSource) GetSceneTileDisplayPlaceholder(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSetScenesCollectionSource[8], &id) }
func (gdClass TileSetScenesCollectionSource) RemoveSceneTile(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodTileSetScenesCollectionSource[9], &id) }
func (gdClass TileSetScenesCollectionSource) GetNextSceneTileId() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetScenesCollectionSource[10]) }

type TileSetSource struct{self *TileSetSource; obj safeObject }
func NewTileSetSource(ctx Context, at *TileSetSource) TileSetSource { if at == nil { at = new(TileSetSource) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TileSetSource) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TileSetSource) owner() cObject { return gdClass.obj.get() }
func (TileSetSource) class() string { return "TileSetSource\000" }

func (gdClass TileSetSource) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodTileSetSource [6]cMethodBind
func (gdClass TileSetSource) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass TileSetSource) GetTilesCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetSource[0]) }
func (gdClass TileSetSource) GetTileId(index int64) Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodTileSetSource[1], &index) }
func (gdClass TileSetSource) HasTile(atlas_coords Vector2i) bool { return methodCall[bool](gdClass.obj.get(), methodTileSetSource[2], &atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTilesCount(atlas_coords Vector2i) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetSource[3], &atlas_coords) }
func (gdClass TileSetSource) GetAlternativeTileId(atlas_coords Vector2i, index int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTileSetSource[4], &atlas_coords, &index) }
func (gdClass TileSetSource) HasAlternativeTile(atlas_coords Vector2i, alternative_tile int64) bool { return methodCall[bool](gdClass.obj.get(), methodTileSetSource[5], &atlas_coords, &alternative_tile) }

type TimeMonth int64

const (
	TimeMonthJanuary TimeMonth = 1
	TimeMonthFebruary TimeMonth = 2
	TimeMonthMarch TimeMonth = 3
	TimeMonthApril TimeMonth = 4
	TimeMonthMay TimeMonth = 5
	TimeMonthJune TimeMonth = 6
	TimeMonthJuly TimeMonth = 7
	TimeMonthAugust TimeMonth = 8
	TimeMonthSeptember TimeMonth = 9
	TimeMonthOctober TimeMonth = 10
	TimeMonthNovember TimeMonth = 11
	TimeMonthDecember TimeMonth = 12
)

type TimeWeekday int64

const (
	TimeWeekdaySunday TimeWeekday = 0
	TimeWeekdayMonday TimeWeekday = 1
	TimeWeekdayTuesday TimeWeekday = 2
	TimeWeekdayWednesday TimeWeekday = 3
	TimeWeekdayThursday TimeWeekday = 4
	TimeWeekdayFriday TimeWeekday = 5
	TimeWeekdaySaturday TimeWeekday = 6
)
var Time TimeSingleton

type TimeSingleton struct{self *TimeSingleton; obj safeObject }
func NewTimeSingleton(ctx Context, at *TimeSingleton) TimeSingleton { if at == nil { at = new(TimeSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TimeSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TimeSingleton) owner() cObject { return gdClass.obj.get() }
func (TimeSingleton) class() string { return "TimeSingleton\000" }

func (gdClass TimeSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodTimeSingleton [21]cMethodBind
func (gdClass TimeSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass TimeSingleton) GetDatetimeDictFromUnixTime(unix_time_val int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[0], &unix_time_val) }
func (gdClass TimeSingleton) GetDateDictFromUnixTime(unix_time_val int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[1], &unix_time_val) }
func (gdClass TimeSingleton) GetTimeDictFromUnixTime(unix_time_val int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[2], &unix_time_val) }
func (gdClass TimeSingleton) GetDatetimeStringFromUnixTime(unix_time_val int64, use_space bool) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[3], &unix_time_val, &use_space) }
func (gdClass TimeSingleton) GetDateStringFromUnixTime(unix_time_val int64) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[4], &unix_time_val) }
func (gdClass TimeSingleton) GetTimeStringFromUnixTime(unix_time_val int64) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[5], &unix_time_val) }
func (gdClass TimeSingleton) GetDatetimeDictFromDatetimeString(datetime string, weekday bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[6], &datetime, &weekday) }
func (gdClass TimeSingleton) GetDatetimeStringFromDatetimeDict(datetime Dictionary, use_space bool) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[7], &datetime, &use_space) }
func (gdClass TimeSingleton) GetUnixTimeFromDatetimeDict(datetime Dictionary) int64 { return methodCall[int64](gdClass.obj.get(), methodTimeSingleton[8], &datetime) }
func (gdClass TimeSingleton) GetUnixTimeFromDatetimeString(datetime string) int64 { return methodCall[int64](gdClass.obj.get(), methodTimeSingleton[9], &datetime) }
func (gdClass TimeSingleton) GetOffsetStringFromOffsetMinutes(offset_minutes int64) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[10], &offset_minutes) }
func (gdClass TimeSingleton) GetDatetimeDictFromSystem(utc bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[11], &utc) }
func (gdClass TimeSingleton) GetDateDictFromSystem(utc bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[12], &utc) }
func (gdClass TimeSingleton) GetTimeDictFromSystem(utc bool) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[13], &utc) }
func (gdClass TimeSingleton) GetDatetimeStringFromSystem(utc bool, use_space bool) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[14], &utc, &use_space) }
func (gdClass TimeSingleton) GetDateStringFromSystem(utc bool) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[15], &utc) }
func (gdClass TimeSingleton) GetTimeStringFromSystem(utc bool) string { return methodCall[string](gdClass.obj.get(), methodTimeSingleton[16], &utc) }
func (gdClass TimeSingleton) GetTimeZoneFromSystem() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTimeSingleton[17]) }
func (gdClass TimeSingleton) GetUnixTimeFromSystem() float64 { return methodCall[float64](gdClass.obj.get(), methodTimeSingleton[18]) }
func (gdClass TimeSingleton) GetTicksMsec() int64 { return methodCall[int64](gdClass.obj.get(), methodTimeSingleton[19]) }
func (gdClass TimeSingleton) GetTicksUsec() int64 { return methodCall[int64](gdClass.obj.get(), methodTimeSingleton[20]) }

type TimerTimerProcessCallback int64

const (
	TimerTimerProcessPhysics TimerTimerProcessCallback = 0
	TimerTimerProcessIdle TimerTimerProcessCallback = 1
)

type Timer struct{self *Timer; obj safeObject }
func NewTimer(ctx Context, at *Timer) Timer { if at == nil { at = new(Timer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Timer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Timer) owner() cObject { return gdClass.obj.get() }
func (Timer) class() string { return "Timer\000" }

func (gdClass Timer) Node() Node { return Node{obj:gdClass.obj} }

var methodTimer [14]cMethodBind
func (gdClass Timer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass Timer) SetWaitTime(time_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[0], &time_sec) }
func (gdClass Timer) GetWaitTime() float64 { return methodCall[float64](gdClass.obj.get(), methodTimer[1]) }
func (gdClass Timer) SetOneShot(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[2], &enable) }
func (gdClass Timer) IsOneShot() bool { return methodCall[bool](gdClass.obj.get(), methodTimer[3]) }
func (gdClass Timer) SetAutostart(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[4], &enable) }
func (gdClass Timer) HasAutostart() bool { return methodCall[bool](gdClass.obj.get(), methodTimer[5]) }
func (gdClass Timer) Start(time_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[6], &time_sec) }
func (gdClass Timer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodTimer[7]) }
func (gdClass Timer) SetPaused(paused bool)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[8], &paused) }
func (gdClass Timer) IsPaused() bool { return methodCall[bool](gdClass.obj.get(), methodTimer[9]) }
func (gdClass Timer) IsStopped() bool { return methodCall[bool](gdClass.obj.get(), methodTimer[10]) }
func (gdClass Timer) GetTimeLeft() float64 { return methodCall[float64](gdClass.obj.get(), methodTimer[11]) }
func (gdClass Timer) SetTimerProcessCallback(callback TimerTimerProcessCallback)  { methodCall[struct{}](gdClass.obj.get(), methodTimer[12], &callback) }
func (gdClass Timer) GetTimerProcessCallback() TimerTimerProcessCallback { return methodCall[TimerTimerProcessCallback](gdClass.obj.get(), methodTimer[13]) }

type TorusMesh struct{self *TorusMesh; obj safeObject }
func NewTorusMesh(ctx Context, at *TorusMesh) TorusMesh { if at == nil { at = new(TorusMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TorusMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TorusMesh) owner() cObject { return gdClass.obj.get() }
func (TorusMesh) class() string { return "TorusMesh\000" }

func (gdClass TorusMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodTorusMesh [8]cMethodBind
func (gdClass TorusMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass TorusMesh) SetInnerRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodTorusMesh[0], &radius) }
func (gdClass TorusMesh) GetInnerRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodTorusMesh[1]) }
func (gdClass TorusMesh) SetOuterRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodTorusMesh[2], &radius) }
func (gdClass TorusMesh) GetOuterRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodTorusMesh[3]) }
func (gdClass TorusMesh) SetRings(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodTorusMesh[4], &rings) }
func (gdClass TorusMesh) GetRings() int64 { return methodCall[int64](gdClass.obj.get(), methodTorusMesh[5]) }
func (gdClass TorusMesh) SetRingSegments(rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodTorusMesh[6], &rings) }
func (gdClass TorusMesh) GetRingSegments() int64 { return methodCall[int64](gdClass.obj.get(), methodTorusMesh[7]) }

type TouchScreenButtonVisibilityMode int64

const (
	TouchScreenButtonVisibilityAlways TouchScreenButtonVisibilityMode = 0
	TouchScreenButtonVisibilityTouchscreenOnly TouchScreenButtonVisibilityMode = 1
)

type TouchScreenButton struct{self *TouchScreenButton; obj safeObject }
func NewTouchScreenButton(ctx Context, at *TouchScreenButton) TouchScreenButton { if at == nil { at = new(TouchScreenButton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TouchScreenButton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TouchScreenButton) owner() cObject { return gdClass.obj.get() }
func (TouchScreenButton) class() string { return "TouchScreenButton\000" }

func (gdClass TouchScreenButton) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodTouchScreenButton [19]cMethodBind
func (gdClass TouchScreenButton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass TouchScreenButton) SetTextureNormal(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[0], &texture) }
func (gdClass TouchScreenButton) GetTextureNormal() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTouchScreenButton[1]) }
func (gdClass TouchScreenButton) SetTexturePressed(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[2], &texture) }
func (gdClass TouchScreenButton) GetTexturePressed() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTouchScreenButton[3]) }
func (gdClass TouchScreenButton) SetBitmask(bitmask BitMap)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[4], &bitmask) }
func (gdClass TouchScreenButton) GetBitmask() BitMap { return methodCall[BitMap](gdClass.obj.get(), methodTouchScreenButton[5]) }
func (gdClass TouchScreenButton) SetShape(shape Shape2D)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[6], &shape) }
func (gdClass TouchScreenButton) GetShape() Shape2D { return methodCall[Shape2D](gdClass.obj.get(), methodTouchScreenButton[7]) }
func (gdClass TouchScreenButton) SetShapeCentered(bool bool)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[8], &bool) }
func (gdClass TouchScreenButton) IsShapeCentered() bool { return methodCall[bool](gdClass.obj.get(), methodTouchScreenButton[9]) }
func (gdClass TouchScreenButton) SetShapeVisible(bool bool)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[10], &bool) }
func (gdClass TouchScreenButton) IsShapeVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTouchScreenButton[11]) }
func (gdClass TouchScreenButton) SetAction(action string)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[12], &action) }
func (gdClass TouchScreenButton) GetAction() string { return methodCall[string](gdClass.obj.get(), methodTouchScreenButton[13]) }
func (gdClass TouchScreenButton) SetVisibilityMode(mode TouchScreenButtonVisibilityMode)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[14], &mode) }
func (gdClass TouchScreenButton) GetVisibilityMode() TouchScreenButtonVisibilityMode { return methodCall[TouchScreenButtonVisibilityMode](gdClass.obj.get(), methodTouchScreenButton[15]) }
func (gdClass TouchScreenButton) SetPassbyPress(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTouchScreenButton[16], &enabled) }
func (gdClass TouchScreenButton) IsPassbyPressEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTouchScreenButton[17]) }
func (gdClass TouchScreenButton) IsPressed() bool { return methodCall[bool](gdClass.obj.get(), methodTouchScreenButton[18]) }

type Translation struct{self *Translation; obj safeObject }
func NewTranslation(ctx Context, at *Translation) Translation { if at == nil { at = new(Translation) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Translation) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Translation) owner() cObject { return gdClass.obj.get() }
func (Translation) class() string { return "Translation\000" }

func (gdClass Translation) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodTranslation [9]cMethodBind
func (gdClass Translation) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_plural_message":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPluralMessage(src_message Name, src_plural_message Name, n int64, context Name) Name }{}).Elem()) {
			return rtype.MethodByName(`GetPluralMessage`)
		}
		return
	case "_get_message":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMessage(src_message Name, context Name) Name }{}).Elem()) {
			return rtype.MethodByName(`GetMessage`)
		}
		return
	}
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass Translation) SetLocale(locale string)  { methodCall[struct{}](gdClass.obj.get(), methodTranslation[0], &locale) }
func (gdClass Translation) GetLocale() string { return methodCall[string](gdClass.obj.get(), methodTranslation[1]) }
func (gdClass Translation) AddMessage(src_message Name, xlated_message Name, context Name)  { methodCall[struct{}](gdClass.obj.get(), methodTranslation[2], &src_message, &xlated_message, &context) }
func (gdClass Translation) AddPluralMessage(src_message Name, xlated_messages []string, context Name)  { methodCall[struct{}](gdClass.obj.get(), methodTranslation[3], &src_message, &xlated_messages, &context) }
func (gdClass Translation) GetMessage(src_message Name, context Name) Name { return methodCall[Name](gdClass.obj.get(), methodTranslation[4], &src_message, &context) }
func (gdClass Translation) GetPluralMessage(src_message Name, src_plural_message Name, n int64, context Name) Name { return methodCall[Name](gdClass.obj.get(), methodTranslation[5], &src_message, &src_plural_message, &n, &context) }
func (gdClass Translation) EraseMessage(src_message Name, context Name)  { methodCall[struct{}](gdClass.obj.get(), methodTranslation[6], &src_message, &context) }
func (gdClass Translation) GetMessageList() []string { return methodCall[[]string](gdClass.obj.get(), methodTranslation[7]) }
func (gdClass Translation) GetMessageCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTranslation[8]) }
var TranslationServer TranslationServerSingleton

type TranslationServerSingleton struct{self *TranslationServerSingleton; obj safeObject }
func NewTranslationServerSingleton(ctx Context, at *TranslationServerSingleton) TranslationServerSingleton { if at == nil { at = new(TranslationServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TranslationServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TranslationServerSingleton) owner() cObject { return gdClass.obj.get() }
func (TranslationServerSingleton) class() string { return "TranslationServerSingleton\000" }

func (gdClass TranslationServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodTranslationServerSingleton [23]cMethodBind
func (gdClass TranslationServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass TranslationServerSingleton) SetLocale(locale string)  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[0], &locale) }
func (gdClass TranslationServerSingleton) GetLocale() string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[1]) }
func (gdClass TranslationServerSingleton) GetToolLocale() string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[2]) }
func (gdClass TranslationServerSingleton) CompareLocales(locale_a string, locale_b string) int64 { return methodCall[int64](gdClass.obj.get(), methodTranslationServerSingleton[3], &locale_a, &locale_b) }
func (gdClass TranslationServerSingleton) StandardizeLocale(locale string) string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[4], &locale) }
func (gdClass TranslationServerSingleton) GetAllLanguages() []string { return methodCall[[]string](gdClass.obj.get(), methodTranslationServerSingleton[5]) }
func (gdClass TranslationServerSingleton) GetLanguageName(language string) string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[6], &language) }
func (gdClass TranslationServerSingleton) GetAllScripts() []string { return methodCall[[]string](gdClass.obj.get(), methodTranslationServerSingleton[7]) }
func (gdClass TranslationServerSingleton) GetScriptName(script string) string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[8], &script) }
func (gdClass TranslationServerSingleton) GetAllCountries() []string { return methodCall[[]string](gdClass.obj.get(), methodTranslationServerSingleton[9]) }
func (gdClass TranslationServerSingleton) GetCountryName(country string) string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[10], &country) }
func (gdClass TranslationServerSingleton) GetLocaleName(locale string) string { return methodCall[string](gdClass.obj.get(), methodTranslationServerSingleton[11], &locale) }
func (gdClass TranslationServerSingleton) Translate(message Name, context Name) Name { return methodCall[Name](gdClass.obj.get(), methodTranslationServerSingleton[12], &message, &context) }
func (gdClass TranslationServerSingleton) TranslatePlural(message Name, plural_message Name, n int64, context Name) Name { return methodCall[Name](gdClass.obj.get(), methodTranslationServerSingleton[13], &message, &plural_message, &n, &context) }
func (gdClass TranslationServerSingleton) AddTranslation(translation Translation)  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[14], &translation) }
func (gdClass TranslationServerSingleton) RemoveTranslation(translation Translation)  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[15], &translation) }
func (gdClass TranslationServerSingleton) GetTranslationObject(locale string) Translation { return methodCall[Translation](gdClass.obj.get(), methodTranslationServerSingleton[16], &locale) }
func (gdClass TranslationServerSingleton) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[17]) }
func (gdClass TranslationServerSingleton) GetLoadedLocales() []string { return methodCall[[]string](gdClass.obj.get(), methodTranslationServerSingleton[18]) }
func (gdClass TranslationServerSingleton) IsPseudolocalizationEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTranslationServerSingleton[19]) }
func (gdClass TranslationServerSingleton) SetPseudolocalizationEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[20], &enabled) }
func (gdClass TranslationServerSingleton) ReloadPseudolocalization()  { methodCall[struct{}](gdClass.obj.get(), methodTranslationServerSingleton[21]) }
func (gdClass TranslationServerSingleton) Pseudolocalize(message Name) Name { return methodCall[Name](gdClass.obj.get(), methodTranslationServerSingleton[22], &message) }

type TreeSelectMode int64

const (
	TreeSelectSingle TreeSelectMode = 0
	TreeSelectRow TreeSelectMode = 1
	TreeSelectMulti TreeSelectMode = 2
)

type TreeDropModeFlags int64

const (
	TreeDropModeDisabled TreeDropModeFlags = 0
	TreeDropModeOnItem TreeDropModeFlags = 1
	TreeDropModeInbetween TreeDropModeFlags = 2
)

type Tree struct{self *Tree; obj safeObject }
func NewTree(ctx Context, at *Tree) Tree { if at == nil { at = new(Tree) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Tree) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Tree) owner() cObject { return gdClass.obj.get() }
func (Tree) class() string { return "Tree\000" }

func (gdClass Tree) Control() Control { return Control{obj:gdClass.obj} }

var methodTree [53]cMethodBind
func (gdClass Tree) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass Tree) Clear()  { methodCall[struct{}](gdClass.obj.get(), methodTree[0]) }
func (gdClass Tree) CreateItem(parent TreeItem, idx int64) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[1], &parent, &idx) }
func (gdClass Tree) GetRoot() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[2]) }
func (gdClass Tree) SetColumnCustomMinimumWidth(column int64, min_width int64)  { methodCall[struct{}](gdClass.obj.get(), methodTree[3], &column, &min_width) }
func (gdClass Tree) SetColumnExpand(column int64, expand bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[4], &column, &expand) }
func (gdClass Tree) SetColumnExpandRatio(column int64, ratio int64)  { methodCall[struct{}](gdClass.obj.get(), methodTree[5], &column, &ratio) }
func (gdClass Tree) SetColumnClipContent(column int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[6], &column, &enable) }
func (gdClass Tree) IsColumnExpanding(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTree[7], &column) }
func (gdClass Tree) IsColumnClippingContent(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTree[8], &column) }
func (gdClass Tree) GetColumnExpandRatio(column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTree[9], &column) }
func (gdClass Tree) GetColumnWidth(column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTree[10], &column) }
func (gdClass Tree) SetHideRoot(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[11], &enable) }
func (gdClass Tree) IsRootHidden() bool { return methodCall[bool](gdClass.obj.get(), methodTree[12]) }
func (gdClass Tree) GetNextSelected(from TreeItem) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[13], &from) }
func (gdClass Tree) GetSelected() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[14]) }
func (gdClass Tree) GetSelectedColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTree[15]) }
func (gdClass Tree) GetPressedButton() int64 { return methodCall[int64](gdClass.obj.get(), methodTree[16]) }
func (gdClass Tree) SetSelectMode(mode TreeSelectMode)  { methodCall[struct{}](gdClass.obj.get(), methodTree[17], &mode) }
func (gdClass Tree) GetSelectMode() TreeSelectMode { return methodCall[TreeSelectMode](gdClass.obj.get(), methodTree[18]) }
func (gdClass Tree) SetColumns(amount int64)  { methodCall[struct{}](gdClass.obj.get(), methodTree[19], &amount) }
func (gdClass Tree) GetColumns() int64 { return methodCall[int64](gdClass.obj.get(), methodTree[20]) }
func (gdClass Tree) GetEdited() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[21]) }
func (gdClass Tree) GetEditedColumn() int64 { return methodCall[int64](gdClass.obj.get(), methodTree[22]) }
func (gdClass Tree) EditSelected() bool { return methodCall[bool](gdClass.obj.get(), methodTree[23]) }
func (gdClass Tree) GetCustomPopupRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTree[24]) }
func (gdClass Tree) GetItemAreaRect(item TreeItem, column int64, button_index int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTree[25], &item, &column, &button_index) }
func (gdClass Tree) GetItemAtPosition(position Vector2) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTree[26], &position) }
func (gdClass Tree) GetColumnAtPosition(position Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTree[27], &position) }
func (gdClass Tree) GetDropSectionAtPosition(position Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTree[28], &position) }
func (gdClass Tree) GetButtonIdAtPosition(position Vector2) int64 { return methodCall[int64](gdClass.obj.get(), methodTree[29], &position) }
func (gdClass Tree) EnsureCursorIsVisible()  { methodCall[struct{}](gdClass.obj.get(), methodTree[30]) }
func (gdClass Tree) SetColumnTitlesVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[31], &visible) }
func (gdClass Tree) AreColumnTitlesVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTree[32]) }
func (gdClass Tree) SetColumnTitle(column int64, title string)  { methodCall[struct{}](gdClass.obj.get(), methodTree[33], &column, &title) }
func (gdClass Tree) GetColumnTitle(column int64) string { return methodCall[string](gdClass.obj.get(), methodTree[34], &column) }
func (gdClass Tree) SetColumnTitleDirection(column int64, direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTree[35], &column, &direction) }
func (gdClass Tree) GetColumnTitleDirection(column int64) ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodTree[36], &column) }
func (gdClass Tree) SetColumnTitleLanguage(column int64, language string)  { methodCall[struct{}](gdClass.obj.get(), methodTree[37], &column, &language) }
func (gdClass Tree) GetColumnTitleLanguage(column int64) string { return methodCall[string](gdClass.obj.get(), methodTree[38], &column) }
func (gdClass Tree) GetScroll() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodTree[39]) }
func (gdClass Tree) ScrollToItem(item TreeItem, center_on_item bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[40], &item, &center_on_item) }
func (gdClass Tree) SetHScrollEnabled(h_scroll bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[41], &h_scroll) }
func (gdClass Tree) IsHScrollEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTree[42]) }
func (gdClass Tree) SetVScrollEnabled(h_scroll bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[43], &h_scroll) }
func (gdClass Tree) IsVScrollEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodTree[44]) }
func (gdClass Tree) SetHideFolding(hide bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[45], &hide) }
func (gdClass Tree) IsFoldingHidden() bool { return methodCall[bool](gdClass.obj.get(), methodTree[46]) }
func (gdClass Tree) SetDropModeFlags(flags int64)  { methodCall[struct{}](gdClass.obj.get(), methodTree[47], &flags) }
func (gdClass Tree) GetDropModeFlags() int64 { return methodCall[int64](gdClass.obj.get(), methodTree[48]) }
func (gdClass Tree) SetAllowRmbSelect(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[49], &allow) }
func (gdClass Tree) GetAllowRmbSelect() bool { return methodCall[bool](gdClass.obj.get(), methodTree[50]) }
func (gdClass Tree) SetAllowReselect(allow bool)  { methodCall[struct{}](gdClass.obj.get(), methodTree[51], &allow) }
func (gdClass Tree) GetAllowReselect() bool { return methodCall[bool](gdClass.obj.get(), methodTree[52]) }

type TreeItemTreeCellMode int64

const (
	TreeItemCellModeString TreeItemTreeCellMode = 0
	TreeItemCellModeCheck TreeItemTreeCellMode = 1
	TreeItemCellModeRange TreeItemTreeCellMode = 2
	TreeItemCellModeIcon TreeItemTreeCellMode = 3
	TreeItemCellModeCustom TreeItemTreeCellMode = 4
)

type TreeItem struct{self *TreeItem; obj safeObject }
func NewTreeItem(ctx Context, at *TreeItem) TreeItem { if at == nil { at = new(TreeItem) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass TreeItem) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TreeItem) owner() cObject { return gdClass.obj.get() }
func (TreeItem) class() string { return "TreeItem\000" }

func (gdClass TreeItem) Object() Object { return Object{obj:gdClass.obj} }

var methodTreeItem [94]cMethodBind
func (gdClass TreeItem) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass TreeItem) SetCellMode(column int64, mode TreeItemTreeCellMode)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[0], &column, &mode) }
func (gdClass TreeItem) GetCellMode(column int64) TreeItemTreeCellMode { return methodCall[TreeItemTreeCellMode](gdClass.obj.get(), methodTreeItem[1], &column) }
func (gdClass TreeItem) SetChecked(column int64, checked bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[2], &column, &checked) }
func (gdClass TreeItem) SetIndeterminate(column int64, indeterminate bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[3], &column, &indeterminate) }
func (gdClass TreeItem) IsChecked(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[4], &column) }
func (gdClass TreeItem) IsIndeterminate(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[5], &column) }
func (gdClass TreeItem) PropagateCheck(column int64, emit_signal bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[6], &column, &emit_signal) }
func (gdClass TreeItem) SetText(column int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[7], &column, &text) }
func (gdClass TreeItem) GetText(column int64) string { return methodCall[string](gdClass.obj.get(), methodTreeItem[8], &column) }
func (gdClass TreeItem) SetTextDirection(column int64, direction ControlTextDirection)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[9], &column, &direction) }
func (gdClass TreeItem) GetTextDirection(column int64) ControlTextDirection { return methodCall[ControlTextDirection](gdClass.obj.get(), methodTreeItem[10], &column) }
func (gdClass TreeItem) SetStructuredTextBidiOverride(column int64, parser TextServerStructuredTextParser)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[11], &column, &parser) }
func (gdClass TreeItem) GetStructuredTextBidiOverride(column int64) TextServerStructuredTextParser { return methodCall[TextServerStructuredTextParser](gdClass.obj.get(), methodTreeItem[12], &column) }
func (gdClass TreeItem) SetStructuredTextBidiOverrideOptions(column int64, args Array)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[13], &column, &args) }
func (gdClass TreeItem) GetStructuredTextBidiOverrideOptions(column int64) Array { return methodCall[Array](gdClass.obj.get(), methodTreeItem[14], &column) }
func (gdClass TreeItem) SetLanguage(column int64, language string)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[15], &column, &language) }
func (gdClass TreeItem) GetLanguage(column int64) string { return methodCall[string](gdClass.obj.get(), methodTreeItem[16], &column) }
func (gdClass TreeItem) SetSuffix(column int64, text string)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[17], &column, &text) }
func (gdClass TreeItem) GetSuffix(column int64) string { return methodCall[string](gdClass.obj.get(), methodTreeItem[18], &column) }
func (gdClass TreeItem) SetIcon(column int64, texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[19], &column, &texture) }
func (gdClass TreeItem) GetIcon(column int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTreeItem[20], &column) }
func (gdClass TreeItem) SetIconRegion(column int64, region Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[21], &column, &region) }
func (gdClass TreeItem) GetIconRegion(column int64) Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodTreeItem[22], &column) }
func (gdClass TreeItem) SetIconMaxWidth(column int64, width int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[23], &column, &width) }
func (gdClass TreeItem) GetIconMaxWidth(column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[24], &column) }
func (gdClass TreeItem) SetIconModulate(column int64, modulate Color)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[25], &column, &modulate) }
func (gdClass TreeItem) GetIconModulate(column int64) Color { return methodCall[Color](gdClass.obj.get(), methodTreeItem[26], &column) }
func (gdClass TreeItem) SetRange(column int64, value float64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[27], &column, &value) }
func (gdClass TreeItem) GetRange(column int64) float64 { return methodCall[float64](gdClass.obj.get(), methodTreeItem[28], &column) }
func (gdClass TreeItem) SetRangeConfig(column int64, min float64, max float64, step float64, expr bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[29], &column, &min, &max, &step, &expr) }
func (gdClass TreeItem) GetRangeConfig(column int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodTreeItem[30], &column) }
func (gdClass TreeItem) SetMetadata(column int64, meta any)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[31], &column, &meta) }
func (gdClass TreeItem) GetMetadata(column int64) any { return methodCall[any](gdClass.obj.get(), methodTreeItem[32], &column) }
func (gdClass TreeItem) SetCustomDraw(column int64, object Object, callback Name)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[33], &column, &object, &callback) }
func (gdClass TreeItem) SetCollapsed(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[34], &enable) }
func (gdClass TreeItem) IsCollapsed() bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[35]) }
func (gdClass TreeItem) SetVisible(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[36], &enable) }
func (gdClass TreeItem) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[37]) }
func (gdClass TreeItem) UncollapseTree()  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[38]) }
func (gdClass TreeItem) SetCustomMinimumHeight(height int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[39], &height) }
func (gdClass TreeItem) GetCustomMinimumHeight() int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[40]) }
func (gdClass TreeItem) SetSelectable(column int64, selectable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[41], &column, &selectable) }
func (gdClass TreeItem) IsSelectable(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[42], &column) }
func (gdClass TreeItem) IsSelected(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[43], &column) }
func (gdClass TreeItem) Select(column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[44], &column) }
func (gdClass TreeItem) Deselect(column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[45], &column) }
func (gdClass TreeItem) SetEditable(column int64, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[46], &column, &enabled) }
func (gdClass TreeItem) IsEditable(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[47], &column) }
func (gdClass TreeItem) SetCustomColor(column int64, color Color)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[48], &column, &color) }
func (gdClass TreeItem) GetCustomColor(column int64) Color { return methodCall[Color](gdClass.obj.get(), methodTreeItem[49], &column) }
func (gdClass TreeItem) ClearCustomColor(column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[50], &column) }
func (gdClass TreeItem) SetCustomFont(column int64, font Font)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[51], &column, &font) }
func (gdClass TreeItem) GetCustomFont(column int64) Font { return methodCall[Font](gdClass.obj.get(), methodTreeItem[52], &column) }
func (gdClass TreeItem) SetCustomFontSize(column int64, font_size int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[53], &column, &font_size) }
func (gdClass TreeItem) GetCustomFontSize(column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[54], &column) }
func (gdClass TreeItem) SetCustomBgColor(column int64, color Color, just_outline bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[55], &column, &color, &just_outline) }
func (gdClass TreeItem) ClearCustomBgColor(column int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[56], &column) }
func (gdClass TreeItem) GetCustomBgColor(column int64) Color { return methodCall[Color](gdClass.obj.get(), methodTreeItem[57], &column) }
func (gdClass TreeItem) SetCustomAsButton(column int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[58], &column, &enable) }
func (gdClass TreeItem) IsCustomSetAsButton(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[59], &column) }
func (gdClass TreeItem) AddButton(column int64, button Texture2D, id int64, disabled bool, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[60], &column, &button, &id, &disabled, &tooltip) }
func (gdClass TreeItem) GetButtonCount(column int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[61], &column) }
func (gdClass TreeItem) GetButtonTooltip(column int64, button_idx int64) string { return methodCall[string](gdClass.obj.get(), methodTreeItem[62], &column, &button_idx) }
func (gdClass TreeItem) GetButtonId(column int64, button_idx int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[63], &column, &button_idx) }
func (gdClass TreeItem) GetButtonById(column int64, id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[64], &column, &id) }
func (gdClass TreeItem) GetButton(column int64, button_idx int64) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodTreeItem[65], &column, &button_idx) }
func (gdClass TreeItem) SetButton(column int64, button_idx int64, button Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[66], &column, &button_idx, &button) }
func (gdClass TreeItem) EraseButton(column int64, button_idx int64)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[67], &column, &button_idx) }
func (gdClass TreeItem) SetButtonDisabled(column int64, button_idx int64, disabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[68], &column, &button_idx, &disabled) }
func (gdClass TreeItem) IsButtonDisabled(column int64, button_idx int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[69], &column, &button_idx) }
func (gdClass TreeItem) SetTooltip(column int64, tooltip string)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[70], &column, &tooltip) }
func (gdClass TreeItem) GetTooltip(column int64) string { return methodCall[string](gdClass.obj.get(), methodTreeItem[71], &column) }
func (gdClass TreeItem) SetTextAlignment(column int64, text_alignment HorizontalAlignment)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[72], &column, &text_alignment) }
func (gdClass TreeItem) GetTextAlignment(column int64) HorizontalAlignment { return methodCall[HorizontalAlignment](gdClass.obj.get(), methodTreeItem[73], &column) }
func (gdClass TreeItem) SetExpandRight(column int64, enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[74], &column, &enable) }
func (gdClass TreeItem) GetExpandRight(column int64) bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[75], &column) }
func (gdClass TreeItem) SetDisableFolding(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[76], &disable) }
func (gdClass TreeItem) IsFoldingDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodTreeItem[77]) }
func (gdClass TreeItem) CreateChild(idx int64) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[78], &idx) }
func (gdClass TreeItem) GetTree() Tree { return methodCall[Tree](gdClass.obj.get(), methodTreeItem[79]) }
func (gdClass TreeItem) GetNext() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[80]) }
func (gdClass TreeItem) GetPrev() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[81]) }
func (gdClass TreeItem) GetParent() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[82]) }
func (gdClass TreeItem) GetFirstChild() TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[83]) }
func (gdClass TreeItem) GetNextVisible(wrap bool) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[84], &wrap) }
func (gdClass TreeItem) GetPrevVisible(wrap bool) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[85], &wrap) }
func (gdClass TreeItem) GetChild(idx int64) TreeItem { return methodCall[TreeItem](gdClass.obj.get(), methodTreeItem[86], &idx) }
func (gdClass TreeItem) GetChildCount() int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[87]) }
func (gdClass TreeItem) GetChildren() Array { return methodCall[Array](gdClass.obj.get(), methodTreeItem[88]) }
func (gdClass TreeItem) GetIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodTreeItem[89]) }
func (gdClass TreeItem) MoveBefore(item TreeItem)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[90], &item) }
func (gdClass TreeItem) MoveAfter(item TreeItem)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[91], &item) }
func (gdClass TreeItem) RemoveChild(child TreeItem)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[92], &child) }
func (gdClass TreeItem) CallRecursive(method Name)  { methodCall[struct{}](gdClass.obj.get(), methodTreeItem[93], &method) }

type TriangleMesh struct{self *TriangleMesh; obj safeObject }
func NewTriangleMesh(ctx Context, at *TriangleMesh) TriangleMesh { if at == nil { at = new(TriangleMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TriangleMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TriangleMesh) owner() cObject { return gdClass.obj.get() }
func (TriangleMesh) class() string { return "TriangleMesh\000" }

func (gdClass TriangleMesh) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass TriangleMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type TubeTrailMesh struct{self *TubeTrailMesh; obj safeObject }
func NewTubeTrailMesh(ctx Context, at *TubeTrailMesh) TubeTrailMesh { if at == nil { at = new(TubeTrailMesh) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass TubeTrailMesh) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass TubeTrailMesh) owner() cObject { return gdClass.obj.get() }
func (TubeTrailMesh) class() string { return "TubeTrailMesh\000" }

func (gdClass TubeTrailMesh) PrimitiveMesh() PrimitiveMesh { return PrimitiveMesh{obj:gdClass.obj} }

var methodTubeTrailMesh [12]cMethodBind
func (gdClass TubeTrailMesh) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PrimitiveMesh().virtual(rtype, name)
}
func (gdClass TubeTrailMesh) SetRadius(radius float64)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[0], &radius) }
func (gdClass TubeTrailMesh) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodTubeTrailMesh[1]) }
func (gdClass TubeTrailMesh) SetRadialSteps(radial_steps int64)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[2], &radial_steps) }
func (gdClass TubeTrailMesh) GetRadialSteps() int64 { return methodCall[int64](gdClass.obj.get(), methodTubeTrailMesh[3]) }
func (gdClass TubeTrailMesh) SetSections(sections int64)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[4], &sections) }
func (gdClass TubeTrailMesh) GetSections() int64 { return methodCall[int64](gdClass.obj.get(), methodTubeTrailMesh[5]) }
func (gdClass TubeTrailMesh) SetSectionLength(section_length float64)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[6], &section_length) }
func (gdClass TubeTrailMesh) GetSectionLength() float64 { return methodCall[float64](gdClass.obj.get(), methodTubeTrailMesh[7]) }
func (gdClass TubeTrailMesh) SetSectionRings(section_rings int64)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[8], &section_rings) }
func (gdClass TubeTrailMesh) GetSectionRings() int64 { return methodCall[int64](gdClass.obj.get(), methodTubeTrailMesh[9]) }
func (gdClass TubeTrailMesh) SetCurve(curve Curve)  { methodCall[struct{}](gdClass.obj.get(), methodTubeTrailMesh[10], &curve) }
func (gdClass TubeTrailMesh) GetCurve() Curve { return methodCall[Curve](gdClass.obj.get(), methodTubeTrailMesh[11]) }

type TweenTweenProcessMode int64

const (
	TweenTweenProcessPhysics TweenTweenProcessMode = 0
	TweenTweenProcessIdle TweenTweenProcessMode = 1
)

type TweenTweenPauseMode int64

const (
	TweenTweenPauseBound TweenTweenPauseMode = 0
	TweenTweenPauseStop TweenTweenPauseMode = 1
	TweenTweenPauseProcess TweenTweenPauseMode = 2
)

type TweenTransitionType int64

const (
	TweenTransLinear TweenTransitionType = 0
	TweenTransSine TweenTransitionType = 1
	TweenTransQuint TweenTransitionType = 2
	TweenTransQuart TweenTransitionType = 3
	TweenTransQuad TweenTransitionType = 4
	TweenTransExpo TweenTransitionType = 5
	TweenTransElastic TweenTransitionType = 6
	TweenTransCubic TweenTransitionType = 7
	TweenTransCirc TweenTransitionType = 8
	TweenTransBounce TweenTransitionType = 9
	TweenTransBack TweenTransitionType = 10
)

type TweenEaseType int64

const (
	TweenEaseIn TweenEaseType = 0
	TweenEaseOut TweenEaseType = 1
	TweenEaseInOut TweenEaseType = 2
	TweenEaseOutIn TweenEaseType = 3
)

type Tween struct{self *Tween; obj safeObject }
func NewTween(ctx Context, at *Tween) Tween { if at == nil { at = new(Tween) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Tween) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Tween) owner() cObject { return gdClass.obj.get() }
func (Tween) class() string { return "Tween\000" }

func (gdClass Tween) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodTween [23]cMethodBind
func (gdClass Tween) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass Tween) TweenProperty(object Object, property NodePath, final_val any, duration float64) PropertyTweener { return methodCall[PropertyTweener](gdClass.obj.get(), methodTween[0], &object, &property, &final_val, &duration) }
func (gdClass Tween) TweenInterval(time float64) IntervalTweener { return methodCall[IntervalTweener](gdClass.obj.get(), methodTween[1], &time) }
func (gdClass Tween) TweenCallback(callback Callable) CallbackTweener { return methodCall[CallbackTweener](gdClass.obj.get(), methodTween[2], &callback) }
func (gdClass Tween) TweenMethod(method Callable, from any, to any, duration float64) MethodTweener { return methodCall[MethodTweener](gdClass.obj.get(), methodTween[3], &method, &from, &to, &duration) }
func (gdClass Tween) CustomStep(delta float64) bool { return methodCall[bool](gdClass.obj.get(), methodTween[4], &delta) }
func (gdClass Tween) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodTween[5]) }
func (gdClass Tween) Pause()  { methodCall[struct{}](gdClass.obj.get(), methodTween[6]) }
func (gdClass Tween) Play()  { methodCall[struct{}](gdClass.obj.get(), methodTween[7]) }
func (gdClass Tween) Kill()  { methodCall[struct{}](gdClass.obj.get(), methodTween[8]) }
func (gdClass Tween) GetTotalElapsedTime() float64 { return methodCall[float64](gdClass.obj.get(), methodTween[9]) }
func (gdClass Tween) IsRunning() bool { return methodCall[bool](gdClass.obj.get(), methodTween[10]) }
func (gdClass Tween) IsValid() bool { return methodCall[bool](gdClass.obj.get(), methodTween[11]) }
func (gdClass Tween) BindNode(node Node) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[12], &node) }
func (gdClass Tween) SetProcessMode(mode TweenTweenProcessMode) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[13], &mode) }
func (gdClass Tween) SetPauseMode(mode TweenTweenPauseMode) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[14], &mode) }
func (gdClass Tween) SetParallel(parallel bool) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[15], &parallel) }
func (gdClass Tween) SetLoops(loops int64) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[16], &loops) }
func (gdClass Tween) SetSpeedScale(speed float64) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[17], &speed) }
func (gdClass Tween) SetTrans(trans TweenTransitionType) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[18], &trans) }
func (gdClass Tween) SetEase(ease TweenEaseType) Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[19], &ease) }
func (gdClass Tween) Parallel() Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[20]) }
func (gdClass Tween) Chain() Tween { return methodCall[Tween](gdClass.obj.get(), methodTween[21]) }
func (gdClass Tween) InterpolateValue(initial_value any, delta_value any, elapsed_time float64, duration float64, trans_type TweenTransitionType, ease_type TweenEaseType) any { return methodCall[any](gdClass.obj.get(), methodTween[22], &initial_value, &delta_value, &elapsed_time, &duration, &trans_type, &ease_type) }

type Tweener struct{self *Tweener; obj safeObject }
func NewTweener(ctx Context, at *Tweener) Tweener { if at == nil { at = new(Tweener) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass Tweener) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Tweener) owner() cObject { return gdClass.obj.get() }
func (Tweener) class() string { return "Tweener\000" }

func (gdClass Tweener) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

func (gdClass Tweener) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}

type UDPServer struct{self *UDPServer; obj safeObject }
func NewUDPServer(ctx Context, at *UDPServer) UDPServer { if at == nil { at = new(UDPServer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass UDPServer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass UDPServer) owner() cObject { return gdClass.obj.get() }
func (UDPServer) class() string { return "UDPServer\000" }

func (gdClass UDPServer) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodUDPServer [9]cMethodBind
func (gdClass UDPServer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass UDPServer) Listen(port int64, bind_address string) int64 { return methodCall[int64](gdClass.obj.get(), methodUDPServer[0], &port, &bind_address) }
func (gdClass UDPServer) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodUDPServer[1]) }
func (gdClass UDPServer) IsConnectionAvailable() bool { return methodCall[bool](gdClass.obj.get(), methodUDPServer[2]) }
func (gdClass UDPServer) GetLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodUDPServer[3]) }
func (gdClass UDPServer) IsListening() bool { return methodCall[bool](gdClass.obj.get(), methodUDPServer[4]) }
func (gdClass UDPServer) TakeConnection() PacketPeerUDP { return methodCall[PacketPeerUDP](gdClass.obj.get(), methodUDPServer[5]) }
func (gdClass UDPServer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodUDPServer[6]) }
func (gdClass UDPServer) SetMaxPendingConnections(max_pending_connections int64)  { methodCall[struct{}](gdClass.obj.get(), methodUDPServer[7], &max_pending_connections) }
func (gdClass UDPServer) GetMaxPendingConnections() int64 { return methodCall[int64](gdClass.obj.get(), methodUDPServer[8]) }

type UPNPUPNPResult int64

const (
	UPNPUpnpResultSuccess UPNPUPNPResult = 0
	UPNPUpnpResultNotAuthorized UPNPUPNPResult = 1
	UPNPUpnpResultPortMappingNotFound UPNPUPNPResult = 2
	UPNPUpnpResultInconsistentParameters UPNPUPNPResult = 3
	UPNPUpnpResultNoSuchEntryInArray UPNPUPNPResult = 4
	UPNPUpnpResultActionFailed UPNPUPNPResult = 5
	UPNPUpnpResultSrcIpWildcardNotPermitted UPNPUPNPResult = 6
	UPNPUpnpResultExtPortWildcardNotPermitted UPNPUPNPResult = 7
	UPNPUpnpResultIntPortWildcardNotPermitted UPNPUPNPResult = 8
	UPNPUpnpResultRemoteHostMustBeWildcard UPNPUPNPResult = 9
	UPNPUpnpResultExtPortMustBeWildcard UPNPUPNPResult = 10
	UPNPUpnpResultNoPortMapsAvailable UPNPUPNPResult = 11
	UPNPUpnpResultConflictWithOtherMechanism UPNPUPNPResult = 12
	UPNPUpnpResultConflictWithOtherMapping UPNPUPNPResult = 13
	UPNPUpnpResultSamePortValuesRequired UPNPUPNPResult = 14
	UPNPUpnpResultOnlyPermanentLeaseSupported UPNPUPNPResult = 15
	UPNPUpnpResultInvalidGateway UPNPUPNPResult = 16
	UPNPUpnpResultInvalidPort UPNPUPNPResult = 17
	UPNPUpnpResultInvalidProtocol UPNPUPNPResult = 18
	UPNPUpnpResultInvalidDuration UPNPUPNPResult = 19
	UPNPUpnpResultInvalidArgs UPNPUPNPResult = 20
	UPNPUpnpResultInvalidResponse UPNPUPNPResult = 21
	UPNPUpnpResultInvalidParam UPNPUPNPResult = 22
	UPNPUpnpResultHttpError UPNPUPNPResult = 23
	UPNPUpnpResultSocketError UPNPUPNPResult = 24
	UPNPUpnpResultMemAllocError UPNPUPNPResult = 25
	UPNPUpnpResultNoGateway UPNPUPNPResult = 26
	UPNPUpnpResultNoDevices UPNPUPNPResult = 27
	UPNPUpnpResultUnknownError UPNPUPNPResult = 28
)

type UPNP struct{self *UPNP; obj safeObject }
func NewUPNP(ctx Context, at *UPNP) UPNP { if at == nil { at = new(UPNP) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass UPNP) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass UPNP) owner() cObject { return gdClass.obj.get() }
func (UPNP) class() string { return "UPNP\000" }

func (gdClass UPNP) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodUPNP [17]cMethodBind
func (gdClass UPNP) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass UPNP) GetDeviceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodUPNP[0]) }
func (gdClass UPNP) GetDevice(index int64) UPNPDevice { return methodCall[UPNPDevice](gdClass.obj.get(), methodUPNP[1], &index) }
func (gdClass UPNP) AddDevice(device UPNPDevice)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[2], &device) }
func (gdClass UPNP) SetDevice(index int64, device UPNPDevice)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[3], &index, &device) }
func (gdClass UPNP) RemoveDevice(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[4], &index) }
func (gdClass UPNP) ClearDevices()  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[5]) }
func (gdClass UPNP) GetGateway() UPNPDevice { return methodCall[UPNPDevice](gdClass.obj.get(), methodUPNP[6]) }
func (gdClass UPNP) Discover(timeout int64, ttl int64, device_filter string) int64 { return methodCall[int64](gdClass.obj.get(), methodUPNP[7], &timeout, &ttl, &device_filter) }
func (gdClass UPNP) QueryExternalAddress() string { return methodCall[string](gdClass.obj.get(), methodUPNP[8]) }
func (gdClass UPNP) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return methodCall[int64](gdClass.obj.get(), methodUPNP[9], &port, &port_internal, &desc, &proto, &duration) }
func (gdClass UPNP) DeletePortMapping(port int64, proto string) int64 { return methodCall[int64](gdClass.obj.get(), methodUPNP[10], &port, &proto) }
func (gdClass UPNP) SetDiscoverMulticastIf(m_if string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[11], &m_if) }
func (gdClass UPNP) GetDiscoverMulticastIf() string { return methodCall[string](gdClass.obj.get(), methodUPNP[12]) }
func (gdClass UPNP) SetDiscoverLocalPort(port int64)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[13], &port) }
func (gdClass UPNP) GetDiscoverLocalPort() int64 { return methodCall[int64](gdClass.obj.get(), methodUPNP[14]) }
func (gdClass UPNP) SetDiscoverIpv6(ipv6 bool)  { methodCall[struct{}](gdClass.obj.get(), methodUPNP[15], &ipv6) }
func (gdClass UPNP) IsDiscoverIpv6() bool { return methodCall[bool](gdClass.obj.get(), methodUPNP[16]) }

type UPNPDeviceIGDStatus int64

const (
	UPNPDeviceIgdStatusOk UPNPDeviceIGDStatus = 0
	UPNPDeviceIgdStatusHttpError UPNPDeviceIGDStatus = 1
	UPNPDeviceIgdStatusHttpEmpty UPNPDeviceIGDStatus = 2
	UPNPDeviceIgdStatusNoUrls UPNPDeviceIGDStatus = 3
	UPNPDeviceIgdStatusNoIgd UPNPDeviceIGDStatus = 4
	UPNPDeviceIgdStatusDisconnected UPNPDeviceIGDStatus = 5
	UPNPDeviceIgdStatusUnknownDevice UPNPDeviceIGDStatus = 6
	UPNPDeviceIgdStatusInvalidControl UPNPDeviceIGDStatus = 7
	UPNPDeviceIgdStatusMallocError UPNPDeviceIGDStatus = 8
	UPNPDeviceIgdStatusUnknownError UPNPDeviceIGDStatus = 9
)

type UPNPDevice struct{self *UPNPDevice; obj safeObject }
func NewUPNPDevice(ctx Context, at *UPNPDevice) UPNPDevice { if at == nil { at = new(UPNPDevice) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass UPNPDevice) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass UPNPDevice) owner() cObject { return gdClass.obj.get() }
func (UPNPDevice) class() string { return "UPNPDevice\000" }

func (gdClass UPNPDevice) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodUPNPDevice [16]cMethodBind
func (gdClass UPNPDevice) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass UPNPDevice) IsValidGateway() bool { return methodCall[bool](gdClass.obj.get(), methodUPNPDevice[0]) }
func (gdClass UPNPDevice) QueryExternalAddress() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[1]) }
func (gdClass UPNPDevice) AddPortMapping(port int64, port_internal int64, desc string, proto string, duration int64) int64 { return methodCall[int64](gdClass.obj.get(), methodUPNPDevice[2], &port, &port_internal, &desc, &proto, &duration) }
func (gdClass UPNPDevice) DeletePortMapping(port int64, proto string) int64 { return methodCall[int64](gdClass.obj.get(), methodUPNPDevice[3], &port, &proto) }
func (gdClass UPNPDevice) SetDescriptionUrl(url string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[4], &url) }
func (gdClass UPNPDevice) GetDescriptionUrl() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[5]) }
func (gdClass UPNPDevice) SetServiceType(atype string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[6], &atype) }
func (gdClass UPNPDevice) GetServiceType() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[7]) }
func (gdClass UPNPDevice) SetIgdControlUrl(url string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[8], &url) }
func (gdClass UPNPDevice) GetIgdControlUrl() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[9]) }
func (gdClass UPNPDevice) SetIgdServiceType(atype string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[10], &atype) }
func (gdClass UPNPDevice) GetIgdServiceType() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[11]) }
func (gdClass UPNPDevice) SetIgdOurAddr(addr string)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[12], &addr) }
func (gdClass UPNPDevice) GetIgdOurAddr() string { return methodCall[string](gdClass.obj.get(), methodUPNPDevice[13]) }
func (gdClass UPNPDevice) SetIgdStatus(status UPNPDeviceIGDStatus)  { methodCall[struct{}](gdClass.obj.get(), methodUPNPDevice[14], &status) }
func (gdClass UPNPDevice) GetIgdStatus() UPNPDeviceIGDStatus { return methodCall[UPNPDeviceIGDStatus](gdClass.obj.get(), methodUPNPDevice[15]) }

type UndoRedoMergeMode int64

const (
	UndoRedoMergeDisable UndoRedoMergeMode = 0
	UndoRedoMergeEnds UndoRedoMergeMode = 1
	UndoRedoMergeAll UndoRedoMergeMode = 2
)

type UndoRedo struct{self *UndoRedo; obj safeObject }
func NewUndoRedo(ctx Context, at *UndoRedo) UndoRedo { if at == nil { at = new(UndoRedo) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass UndoRedo) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass UndoRedo) owner() cObject { return gdClass.obj.get() }
func (UndoRedo) class() string { return "UndoRedo\000" }

func (gdClass UndoRedo) Object() Object { return Object{obj:gdClass.obj} }

var methodUndoRedo [21]cMethodBind
func (gdClass UndoRedo) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass UndoRedo) CreateAction(name string, merge_mode UndoRedoMergeMode)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[0], &name, &merge_mode) }
func (gdClass UndoRedo) CommitAction(execute bool)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[1], &execute) }
func (gdClass UndoRedo) IsCommittingAction() bool { return methodCall[bool](gdClass.obj.get(), methodUndoRedo[2]) }
func (gdClass UndoRedo) AddDoMethod(object Object, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[3], &object, &method) }
func (gdClass UndoRedo) AddUndoMethod(object Object, method Name)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[4], &object, &method) }
func (gdClass UndoRedo) AddDoProperty(object Object, property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[5], &object, &property, &value) }
func (gdClass UndoRedo) AddUndoProperty(object Object, property Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[6], &object, &property, &value) }
func (gdClass UndoRedo) AddDoReference(object Object)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[7], &object) }
func (gdClass UndoRedo) AddUndoReference(object Object)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[8], &object) }
func (gdClass UndoRedo) StartForceKeepInMergeEnds()  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[9]) }
func (gdClass UndoRedo) EndForceKeepInMergeEnds()  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[10]) }
func (gdClass UndoRedo) GetHistoryCount() int64 { return methodCall[int64](gdClass.obj.get(), methodUndoRedo[11]) }
func (gdClass UndoRedo) GetCurrentAction() int64 { return methodCall[int64](gdClass.obj.get(), methodUndoRedo[12]) }
func (gdClass UndoRedo) GetActionName(id int64) string { return methodCall[string](gdClass.obj.get(), methodUndoRedo[13], &id) }
func (gdClass UndoRedo) ClearHistory(increase_version bool)  { methodCall[struct{}](gdClass.obj.get(), methodUndoRedo[14], &increase_version) }
func (gdClass UndoRedo) GetCurrentActionName() string { return methodCall[string](gdClass.obj.get(), methodUndoRedo[15]) }
func (gdClass UndoRedo) HasUndo() bool { return methodCall[bool](gdClass.obj.get(), methodUndoRedo[16]) }
func (gdClass UndoRedo) HasRedo() bool { return methodCall[bool](gdClass.obj.get(), methodUndoRedo[17]) }
func (gdClass UndoRedo) GetVersion() int64 { return methodCall[int64](gdClass.obj.get(), methodUndoRedo[18]) }
func (gdClass UndoRedo) Redo() bool { return methodCall[bool](gdClass.obj.get(), methodUndoRedo[19]) }
func (gdClass UndoRedo) Undo() bool { return methodCall[bool](gdClass.obj.get(), methodUndoRedo[20]) }

type UniformSetCacheRD struct{self *UniformSetCacheRD; obj safeObject }
func NewUniformSetCacheRD(ctx Context, at *UniformSetCacheRD) UniformSetCacheRD { if at == nil { at = new(UniformSetCacheRD) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass UniformSetCacheRD) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass UniformSetCacheRD) owner() cObject { return gdClass.obj.get() }
func (UniformSetCacheRD) class() string { return "UniformSetCacheRD\000" }

func (gdClass UniformSetCacheRD) Object() Object { return Object{obj:gdClass.obj} }

func (gdClass UniformSetCacheRD) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}

type VBoxContainer struct{self *VBoxContainer; obj safeObject }
func NewVBoxContainer(ctx Context, at *VBoxContainer) VBoxContainer { if at == nil { at = new(VBoxContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VBoxContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VBoxContainer) owner() cObject { return gdClass.obj.get() }
func (VBoxContainer) class() string { return "VBoxContainer\000" }

func (gdClass VBoxContainer) BoxContainer() BoxContainer { return BoxContainer{obj:gdClass.obj} }

func (gdClass VBoxContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.BoxContainer().virtual(rtype, name)
}

type VFlowContainer struct{self *VFlowContainer; obj safeObject }
func NewVFlowContainer(ctx Context, at *VFlowContainer) VFlowContainer { if at == nil { at = new(VFlowContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VFlowContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VFlowContainer) owner() cObject { return gdClass.obj.get() }
func (VFlowContainer) class() string { return "VFlowContainer\000" }

func (gdClass VFlowContainer) FlowContainer() FlowContainer { return FlowContainer{obj:gdClass.obj} }

func (gdClass VFlowContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.FlowContainer().virtual(rtype, name)
}

type VScrollBar struct{self *VScrollBar; obj safeObject }
func NewVScrollBar(ctx Context, at *VScrollBar) VScrollBar { if at == nil { at = new(VScrollBar) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VScrollBar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VScrollBar) owner() cObject { return gdClass.obj.get() }
func (VScrollBar) class() string { return "VScrollBar\000" }

func (gdClass VScrollBar) ScrollBar() ScrollBar { return ScrollBar{obj:gdClass.obj} }

func (gdClass VScrollBar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.ScrollBar().virtual(rtype, name)
}

type VSeparator struct{self *VSeparator; obj safeObject }
func NewVSeparator(ctx Context, at *VSeparator) VSeparator { if at == nil { at = new(VSeparator) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VSeparator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VSeparator) owner() cObject { return gdClass.obj.get() }
func (VSeparator) class() string { return "VSeparator\000" }

func (gdClass VSeparator) Separator() Separator { return Separator{obj:gdClass.obj} }

func (gdClass VSeparator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Separator().virtual(rtype, name)
}

type VSlider struct{self *VSlider; obj safeObject }
func NewVSlider(ctx Context, at *VSlider) VSlider { if at == nil { at = new(VSlider) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VSlider) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VSlider) owner() cObject { return gdClass.obj.get() }
func (VSlider) class() string { return "VSlider\000" }

func (gdClass VSlider) Slider() Slider { return Slider{obj:gdClass.obj} }

func (gdClass VSlider) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Slider().virtual(rtype, name)
}

type VSplitContainer struct{self *VSplitContainer; obj safeObject }
func NewVSplitContainer(ctx Context, at *VSplitContainer) VSplitContainer { if at == nil { at = new(VSplitContainer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VSplitContainer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VSplitContainer) owner() cObject { return gdClass.obj.get() }
func (VSplitContainer) class() string { return "VSplitContainer\000" }

func (gdClass VSplitContainer) SplitContainer() SplitContainer { return SplitContainer{obj:gdClass.obj} }

func (gdClass VSplitContainer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.SplitContainer().virtual(rtype, name)
}

type VehicleBody3D struct{self *VehicleBody3D; obj safeObject }
func NewVehicleBody3D(ctx Context, at *VehicleBody3D) VehicleBody3D { if at == nil { at = new(VehicleBody3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VehicleBody3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VehicleBody3D) owner() cObject { return gdClass.obj.get() }
func (VehicleBody3D) class() string { return "VehicleBody3D\000" }

func (gdClass VehicleBody3D) RigidBody3D() RigidBody3D { return RigidBody3D{obj:gdClass.obj} }

var methodVehicleBody3D [6]cMethodBind
func (gdClass VehicleBody3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RigidBody3D().virtual(rtype, name)
}
func (gdClass VehicleBody3D) SetEngineForce(engine_force float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleBody3D[0], &engine_force) }
func (gdClass VehicleBody3D) GetEngineForce() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleBody3D[1]) }
func (gdClass VehicleBody3D) SetBrake(brake float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleBody3D[2], &brake) }
func (gdClass VehicleBody3D) GetBrake() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleBody3D[3]) }
func (gdClass VehicleBody3D) SetSteering(steering float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleBody3D[4], &steering) }
func (gdClass VehicleBody3D) GetSteering() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleBody3D[5]) }

type VehicleWheel3D struct{self *VehicleWheel3D; obj safeObject }
func NewVehicleWheel3D(ctx Context, at *VehicleWheel3D) VehicleWheel3D { if at == nil { at = new(VehicleWheel3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VehicleWheel3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VehicleWheel3D) owner() cObject { return gdClass.obj.get() }
func (VehicleWheel3D) class() string { return "VehicleWheel3D\000" }

func (gdClass VehicleWheel3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodVehicleWheel3D [32]cMethodBind
func (gdClass VehicleWheel3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass VehicleWheel3D) SetRadius(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[0], &length) }
func (gdClass VehicleWheel3D) GetRadius() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[1]) }
func (gdClass VehicleWheel3D) SetSuspensionRestLength(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[2], &length) }
func (gdClass VehicleWheel3D) GetSuspensionRestLength() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[3]) }
func (gdClass VehicleWheel3D) SetSuspensionTravel(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[4], &length) }
func (gdClass VehicleWheel3D) GetSuspensionTravel() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[5]) }
func (gdClass VehicleWheel3D) SetSuspensionStiffness(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[6], &length) }
func (gdClass VehicleWheel3D) GetSuspensionStiffness() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[7]) }
func (gdClass VehicleWheel3D) SetSuspensionMaxForce(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[8], &length) }
func (gdClass VehicleWheel3D) GetSuspensionMaxForce() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[9]) }
func (gdClass VehicleWheel3D) SetDampingCompression(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[10], &length) }
func (gdClass VehicleWheel3D) GetDampingCompression() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[11]) }
func (gdClass VehicleWheel3D) SetDampingRelaxation(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[12], &length) }
func (gdClass VehicleWheel3D) GetDampingRelaxation() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[13]) }
func (gdClass VehicleWheel3D) SetUseAsTraction(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[14], &enable) }
func (gdClass VehicleWheel3D) IsUsedAsTraction() bool { return methodCall[bool](gdClass.obj.get(), methodVehicleWheel3D[15]) }
func (gdClass VehicleWheel3D) SetUseAsSteering(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[16], &enable) }
func (gdClass VehicleWheel3D) IsUsedAsSteering() bool { return methodCall[bool](gdClass.obj.get(), methodVehicleWheel3D[17]) }
func (gdClass VehicleWheel3D) SetFrictionSlip(length float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[18], &length) }
func (gdClass VehicleWheel3D) GetFrictionSlip() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[19]) }
func (gdClass VehicleWheel3D) IsInContact() bool { return methodCall[bool](gdClass.obj.get(), methodVehicleWheel3D[20]) }
func (gdClass VehicleWheel3D) GetContactBody() Node3D { return methodCall[Node3D](gdClass.obj.get(), methodVehicleWheel3D[21]) }
func (gdClass VehicleWheel3D) SetRollInfluence(roll_influence float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[22], &roll_influence) }
func (gdClass VehicleWheel3D) GetRollInfluence() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[23]) }
func (gdClass VehicleWheel3D) GetSkidinfo() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[24]) }
func (gdClass VehicleWheel3D) GetRpm() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[25]) }
func (gdClass VehicleWheel3D) SetEngineForce(engine_force float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[26], &engine_force) }
func (gdClass VehicleWheel3D) GetEngineForce() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[27]) }
func (gdClass VehicleWheel3D) SetBrake(brake float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[28], &brake) }
func (gdClass VehicleWheel3D) GetBrake() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[29]) }
func (gdClass VehicleWheel3D) SetSteering(steering float64)  { methodCall[struct{}](gdClass.obj.get(), methodVehicleWheel3D[30], &steering) }
func (gdClass VehicleWheel3D) GetSteering() float64 { return methodCall[float64](gdClass.obj.get(), methodVehicleWheel3D[31]) }

type VideoStream struct{self *VideoStream; obj safeObject }
func NewVideoStream(ctx Context, at *VideoStream) VideoStream { if at == nil { at = new(VideoStream) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VideoStream) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VideoStream) owner() cObject { return gdClass.obj.get() }
func (VideoStream) class() string { return "VideoStream\000" }

func (gdClass VideoStream) Resource() Resource { return Resource{obj:gdClass.obj} }

func (gdClass VideoStream) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}

type VideoStreamPlayer struct{self *VideoStreamPlayer; obj safeObject }
func NewVideoStreamPlayer(ctx Context, at *VideoStreamPlayer) VideoStreamPlayer { if at == nil { at = new(VideoStreamPlayer) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VideoStreamPlayer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VideoStreamPlayer) owner() cObject { return gdClass.obj.get() }
func (VideoStreamPlayer) class() string { return "VideoStreamPlayer\000" }

func (gdClass VideoStreamPlayer) Control() Control { return Control{obj:gdClass.obj} }

var methodVideoStreamPlayer [25]cMethodBind
func (gdClass VideoStreamPlayer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Control().virtual(rtype, name)
}
func (gdClass VideoStreamPlayer) SetStream(stream VideoStream)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[0], &stream) }
func (gdClass VideoStreamPlayer) GetStream() VideoStream { return methodCall[VideoStream](gdClass.obj.get(), methodVideoStreamPlayer[1]) }
func (gdClass VideoStreamPlayer) Play()  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[2]) }
func (gdClass VideoStreamPlayer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[3]) }
func (gdClass VideoStreamPlayer) IsPlaying() bool { return methodCall[bool](gdClass.obj.get(), methodVideoStreamPlayer[4]) }
func (gdClass VideoStreamPlayer) SetPaused(paused bool)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[5], &paused) }
func (gdClass VideoStreamPlayer) IsPaused() bool { return methodCall[bool](gdClass.obj.get(), methodVideoStreamPlayer[6]) }
func (gdClass VideoStreamPlayer) SetVolume(volume float64)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[7], &volume) }
func (gdClass VideoStreamPlayer) GetVolume() float64 { return methodCall[float64](gdClass.obj.get(), methodVideoStreamPlayer[8]) }
func (gdClass VideoStreamPlayer) SetVolumeDb(db float64)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[9], &db) }
func (gdClass VideoStreamPlayer) GetVolumeDb() float64 { return methodCall[float64](gdClass.obj.get(), methodVideoStreamPlayer[10]) }
func (gdClass VideoStreamPlayer) SetAudioTrack(track int64)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[11], &track) }
func (gdClass VideoStreamPlayer) GetAudioTrack() int64 { return methodCall[int64](gdClass.obj.get(), methodVideoStreamPlayer[12]) }
func (gdClass VideoStreamPlayer) GetStreamName() string { return methodCall[string](gdClass.obj.get(), methodVideoStreamPlayer[13]) }
func (gdClass VideoStreamPlayer) SetStreamPosition(position float64)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[14], &position) }
func (gdClass VideoStreamPlayer) GetStreamPosition() float64 { return methodCall[float64](gdClass.obj.get(), methodVideoStreamPlayer[15]) }
func (gdClass VideoStreamPlayer) SetAutoplay(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[16], &enabled) }
func (gdClass VideoStreamPlayer) HasAutoplay() bool { return methodCall[bool](gdClass.obj.get(), methodVideoStreamPlayer[17]) }
func (gdClass VideoStreamPlayer) SetExpand(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[18], &enable) }
func (gdClass VideoStreamPlayer) HasExpand() bool { return methodCall[bool](gdClass.obj.get(), methodVideoStreamPlayer[19]) }
func (gdClass VideoStreamPlayer) SetBufferingMsec(msec int64)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[20], &msec) }
func (gdClass VideoStreamPlayer) GetBufferingMsec() int64 { return methodCall[int64](gdClass.obj.get(), methodVideoStreamPlayer[21]) }
func (gdClass VideoStreamPlayer) SetBus(bus Name)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamPlayer[22], &bus) }
func (gdClass VideoStreamPlayer) GetBus() Name { return methodCall[Name](gdClass.obj.get(), methodVideoStreamPlayer[23]) }
func (gdClass VideoStreamPlayer) GetVideoTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodVideoStreamPlayer[24]) }

type VideoStreamTheora struct{self *VideoStreamTheora; obj safeObject }
func NewVideoStreamTheora(ctx Context, at *VideoStreamTheora) VideoStreamTheora { if at == nil { at = new(VideoStreamTheora) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VideoStreamTheora) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VideoStreamTheora) owner() cObject { return gdClass.obj.get() }
func (VideoStreamTheora) class() string { return "VideoStreamTheora\000" }

func (gdClass VideoStreamTheora) VideoStream() VideoStream { return VideoStream{obj:gdClass.obj} }

var methodVideoStreamTheora [2]cMethodBind
func (gdClass VideoStreamTheora) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VideoStream().virtual(rtype, name)
}
func (gdClass VideoStreamTheora) SetFile(file string)  { methodCall[struct{}](gdClass.obj.get(), methodVideoStreamTheora[0], &file) }
func (gdClass VideoStreamTheora) GetFile() string { return methodCall[string](gdClass.obj.get(), methodVideoStreamTheora[1]) }

type ViewportPositionalShadowAtlasQuadrantSubdiv int64

const (
	ViewportShadowAtlasQuadrantSubdivDisabled ViewportPositionalShadowAtlasQuadrantSubdiv = 0
	ViewportShadowAtlasQuadrantSubdiv1 ViewportPositionalShadowAtlasQuadrantSubdiv = 1
	ViewportShadowAtlasQuadrantSubdiv4 ViewportPositionalShadowAtlasQuadrantSubdiv = 2
	ViewportShadowAtlasQuadrantSubdiv16 ViewportPositionalShadowAtlasQuadrantSubdiv = 3
	ViewportShadowAtlasQuadrantSubdiv64 ViewportPositionalShadowAtlasQuadrantSubdiv = 4
	ViewportShadowAtlasQuadrantSubdiv256 ViewportPositionalShadowAtlasQuadrantSubdiv = 5
	ViewportShadowAtlasQuadrantSubdiv1024 ViewportPositionalShadowAtlasQuadrantSubdiv = 6
	ViewportShadowAtlasQuadrantSubdivMax ViewportPositionalShadowAtlasQuadrantSubdiv = 7
)

type ViewportScaling3DMode int64

const (
	ViewportScaling3dModeBilinear ViewportScaling3DMode = 0
	ViewportScaling3dModeFsr ViewportScaling3DMode = 1
	ViewportScaling3dModeMax ViewportScaling3DMode = 2
)

type ViewportMSAA int64

const (
	ViewportMsaaDisabled ViewportMSAA = 0
	ViewportMsaa2x ViewportMSAA = 1
	ViewportMsaa4x ViewportMSAA = 2
	ViewportMsaa8x ViewportMSAA = 3
	ViewportMsaaMax ViewportMSAA = 4
)

type ViewportScreenSpaceAA int64

const (
	ViewportScreenSpaceAaDisabled ViewportScreenSpaceAA = 0
	ViewportScreenSpaceAaFxaa ViewportScreenSpaceAA = 1
	ViewportScreenSpaceAaMax ViewportScreenSpaceAA = 2
)

type ViewportRenderInfo int64

const (
	ViewportRenderInfoObjectsInFrame ViewportRenderInfo = 0
	ViewportRenderInfoPrimitivesInFrame ViewportRenderInfo = 1
	ViewportRenderInfoDrawCallsInFrame ViewportRenderInfo = 2
	ViewportRenderInfoMax ViewportRenderInfo = 3
)

type ViewportRenderInfoType int64

const (
	ViewportRenderInfoTypeVisible ViewportRenderInfoType = 0
	ViewportRenderInfoTypeShadow ViewportRenderInfoType = 1
	ViewportRenderInfoTypeMax ViewportRenderInfoType = 2
)

type ViewportDebugDraw int64

const (
	ViewportDebugDrawDisabled ViewportDebugDraw = 0
	ViewportDebugDrawUnshaded ViewportDebugDraw = 1
	ViewportDebugDrawLighting ViewportDebugDraw = 2
	ViewportDebugDrawOverdraw ViewportDebugDraw = 3
	ViewportDebugDrawWireframe ViewportDebugDraw = 4
	ViewportDebugDrawNormalBuffer ViewportDebugDraw = 5
	ViewportDebugDrawVoxelGiAlbedo ViewportDebugDraw = 6
	ViewportDebugDrawVoxelGiLighting ViewportDebugDraw = 7
	ViewportDebugDrawVoxelGiEmission ViewportDebugDraw = 8
	ViewportDebugDrawShadowAtlas ViewportDebugDraw = 9
	ViewportDebugDrawDirectionalShadowAtlas ViewportDebugDraw = 10
	ViewportDebugDrawSceneLuminance ViewportDebugDraw = 11
	ViewportDebugDrawSsao ViewportDebugDraw = 12
	ViewportDebugDrawSsil ViewportDebugDraw = 13
	ViewportDebugDrawPssmSplits ViewportDebugDraw = 14
	ViewportDebugDrawDecalAtlas ViewportDebugDraw = 15
	ViewportDebugDrawSdfgi ViewportDebugDraw = 16
	ViewportDebugDrawSdfgiProbes ViewportDebugDraw = 17
	ViewportDebugDrawGiBuffer ViewportDebugDraw = 18
	ViewportDebugDrawDisableLod ViewportDebugDraw = 19
	ViewportDebugDrawClusterOmniLights ViewportDebugDraw = 20
	ViewportDebugDrawClusterSpotLights ViewportDebugDraw = 21
	ViewportDebugDrawClusterDecals ViewportDebugDraw = 22
	ViewportDebugDrawClusterReflectionProbes ViewportDebugDraw = 23
	ViewportDebugDrawOccluders ViewportDebugDraw = 24
	ViewportDebugDrawMotionVectors ViewportDebugDraw = 25
)

type ViewportDefaultCanvasItemTextureFilter int64

const (
	ViewportDefaultCanvasItemTextureFilterNearest ViewportDefaultCanvasItemTextureFilter = 0
	ViewportDefaultCanvasItemTextureFilterLinear ViewportDefaultCanvasItemTextureFilter = 1
	ViewportDefaultCanvasItemTextureFilterLinearWithMipmaps ViewportDefaultCanvasItemTextureFilter = 2
	ViewportDefaultCanvasItemTextureFilterNearestWithMipmaps ViewportDefaultCanvasItemTextureFilter = 3
	ViewportDefaultCanvasItemTextureFilterMax ViewportDefaultCanvasItemTextureFilter = 4
)

type ViewportDefaultCanvasItemTextureRepeat int64

const (
	ViewportDefaultCanvasItemTextureRepeatDisabled ViewportDefaultCanvasItemTextureRepeat = 0
	ViewportDefaultCanvasItemTextureRepeatEnabled ViewportDefaultCanvasItemTextureRepeat = 1
	ViewportDefaultCanvasItemTextureRepeatMirror ViewportDefaultCanvasItemTextureRepeat = 2
	ViewportDefaultCanvasItemTextureRepeatMax ViewportDefaultCanvasItemTextureRepeat = 3
)

type ViewportSDFOversize int64

const (
	ViewportSdfOversize100Percent ViewportSDFOversize = 0
	ViewportSdfOversize120Percent ViewportSDFOversize = 1
	ViewportSdfOversize150Percent ViewportSDFOversize = 2
	ViewportSdfOversize200Percent ViewportSDFOversize = 3
	ViewportSdfOversizeMax ViewportSDFOversize = 4
)

type ViewportSDFScale int64

const (
	ViewportSdfScale100Percent ViewportSDFScale = 0
	ViewportSdfScale50Percent ViewportSDFScale = 1
	ViewportSdfScale25Percent ViewportSDFScale = 2
	ViewportSdfScaleMax ViewportSDFScale = 3
)

type ViewportVRSMode int64

const (
	ViewportVrsDisabled ViewportVRSMode = 0
	ViewportVrsTexture ViewportVRSMode = 1
	ViewportVrsXr ViewportVRSMode = 2
	ViewportVrsMax ViewportVRSMode = 3
)

type Viewport struct{self *Viewport; obj safeObject }
func NewViewport(ctx Context, at *Viewport) Viewport { if at == nil { at = new(Viewport) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Viewport) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Viewport) owner() cObject { return gdClass.obj.get() }
func (Viewport) class() string { return "Viewport\000" }

func (gdClass Viewport) Node() Node { return Node{obj:gdClass.obj} }

var methodViewport [95]cMethodBind
func (gdClass Viewport) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass Viewport) SetWorld2d(world_2d World2D)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[0], &world_2d) }
func (gdClass Viewport) GetWorld2d() World2D { return methodCall[World2D](gdClass.obj.get(), methodViewport[1]) }
func (gdClass Viewport) FindWorld2d() World2D { return methodCall[World2D](gdClass.obj.get(), methodViewport[2]) }
func (gdClass Viewport) SetCanvasTransform(xform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[3], &xform) }
func (gdClass Viewport) GetCanvasTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodViewport[4]) }
func (gdClass Viewport) SetGlobalCanvasTransform(xform Transform2D)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[5], &xform) }
func (gdClass Viewport) GetGlobalCanvasTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodViewport[6]) }
func (gdClass Viewport) GetFinalTransform() Transform2D { return methodCall[Transform2D](gdClass.obj.get(), methodViewport[7]) }
func (gdClass Viewport) GetVisibleRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodViewport[8]) }
func (gdClass Viewport) SetTransparentBackground(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[9], &enable) }
func (gdClass Viewport) HasTransparentBackground() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[10]) }
func (gdClass Viewport) SetMsaa(msaa ViewportMSAA)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[11], &msaa) }
func (gdClass Viewport) GetMsaa() ViewportMSAA { return methodCall[ViewportMSAA](gdClass.obj.get(), methodViewport[12]) }
func (gdClass Viewport) SetScreenSpaceAa(screen_space_aa ViewportScreenSpaceAA)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[13], &screen_space_aa) }
func (gdClass Viewport) GetScreenSpaceAa() ViewportScreenSpaceAA { return methodCall[ViewportScreenSpaceAA](gdClass.obj.get(), methodViewport[14]) }
func (gdClass Viewport) SetUseTaa(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[15], &enable) }
func (gdClass Viewport) IsUsingTaa() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[16]) }
func (gdClass Viewport) SetUseDebanding(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[17], &enable) }
func (gdClass Viewport) IsUsingDebanding() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[18]) }
func (gdClass Viewport) SetUseOcclusionCulling(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[19], &enable) }
func (gdClass Viewport) IsUsingOcclusionCulling() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[20]) }
func (gdClass Viewport) SetDebugDraw(debug_draw ViewportDebugDraw)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[21], &debug_draw) }
func (gdClass Viewport) GetDebugDraw() ViewportDebugDraw { return methodCall[ViewportDebugDraw](gdClass.obj.get(), methodViewport[22]) }
func (gdClass Viewport) GetRenderInfo(atype ViewportRenderInfoType, info ViewportRenderInfo) int64 { return methodCall[int64](gdClass.obj.get(), methodViewport[23], &atype, &info) }
func (gdClass Viewport) GetTexture() ViewportTexture { return methodCall[ViewportTexture](gdClass.obj.get(), methodViewport[24]) }
func (gdClass Viewport) SetPhysicsObjectPicking(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[25], &enable) }
func (gdClass Viewport) GetPhysicsObjectPicking() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[26]) }
func (gdClass Viewport) GetViewportRid() RID { return methodCall[RID](gdClass.obj.get(), methodViewport[27]) }
func (gdClass Viewport) PushTextInput(text string)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[28], &text) }
func (gdClass Viewport) PushInput(event InputEvent, in_local_coords bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[29], &event, &in_local_coords) }
func (gdClass Viewport) PushUnhandledInput(event InputEvent, in_local_coords bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[30], &event, &in_local_coords) }
func (gdClass Viewport) GetCamera2d() Camera2D { return methodCall[Camera2D](gdClass.obj.get(), methodViewport[31]) }
func (gdClass Viewport) SetAsAudioListener2d(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[32], &enable) }
func (gdClass Viewport) IsAudioListener2d() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[33]) }
func (gdClass Viewport) GetMousePosition() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodViewport[34]) }
func (gdClass Viewport) WarpMouse(position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[35], &position) }
func (gdClass Viewport) GuiGetDragData() any { return methodCall[any](gdClass.obj.get(), methodViewport[36]) }
func (gdClass Viewport) GuiIsDragging() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[37]) }
func (gdClass Viewport) GuiIsDragSuccessful() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[38]) }
func (gdClass Viewport) GuiReleaseFocus()  { methodCall[struct{}](gdClass.obj.get(), methodViewport[39]) }
func (gdClass Viewport) GuiGetFocusOwner() Control { return methodCall[Control](gdClass.obj.get(), methodViewport[40]) }
func (gdClass Viewport) SetDisableInput(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[41], &disable) }
func (gdClass Viewport) IsInputDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[42]) }
func (gdClass Viewport) SetPositionalShadowAtlasSize(size int64)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[43], &size) }
func (gdClass Viewport) GetPositionalShadowAtlasSize() int64 { return methodCall[int64](gdClass.obj.get(), methodViewport[44]) }
func (gdClass Viewport) SetPositionalShadowAtlas16Bits(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[45], &enable) }
func (gdClass Viewport) GetPositionalShadowAtlas16Bits() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[46]) }
func (gdClass Viewport) SetSnapControlsToPixels(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[47], &enabled) }
func (gdClass Viewport) IsSnapControlsToPixelsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[48]) }
func (gdClass Viewport) SetSnap2dTransformsToPixel(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[49], &enabled) }
func (gdClass Viewport) IsSnap2dTransformsToPixelEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[50]) }
func (gdClass Viewport) SetSnap2dVerticesToPixel(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[51], &enabled) }
func (gdClass Viewport) IsSnap2dVerticesToPixelEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[52]) }
func (gdClass Viewport) SetPositionalShadowAtlasQuadrantSubdiv(quadrant int64, subdiv ViewportPositionalShadowAtlasQuadrantSubdiv)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[53], &quadrant, &subdiv) }
func (gdClass Viewport) GetPositionalShadowAtlasQuadrantSubdiv(quadrant int64) ViewportPositionalShadowAtlasQuadrantSubdiv { return methodCall[ViewportPositionalShadowAtlasQuadrantSubdiv](gdClass.obj.get(), methodViewport[54], &quadrant) }
func (gdClass Viewport) SetInputAsHandled()  { methodCall[struct{}](gdClass.obj.get(), methodViewport[55]) }
func (gdClass Viewport) IsInputHandled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[56]) }
func (gdClass Viewport) SetHandleInputLocally(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[57], &enable) }
func (gdClass Viewport) IsHandlingInputLocally() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[58]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureFilter(mode ViewportDefaultCanvasItemTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[59], &mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureFilter() ViewportDefaultCanvasItemTextureFilter { return methodCall[ViewportDefaultCanvasItemTextureFilter](gdClass.obj.get(), methodViewport[60]) }
func (gdClass Viewport) SetEmbeddingSubwindows(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[61], &enable) }
func (gdClass Viewport) IsEmbeddingSubwindows() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[62]) }
func (gdClass Viewport) SetDefaultCanvasItemTextureRepeat(mode ViewportDefaultCanvasItemTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[63], &mode) }
func (gdClass Viewport) GetDefaultCanvasItemTextureRepeat() ViewportDefaultCanvasItemTextureRepeat { return methodCall[ViewportDefaultCanvasItemTextureRepeat](gdClass.obj.get(), methodViewport[64]) }
func (gdClass Viewport) SetSdfOversize(oversize ViewportSDFOversize)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[65], &oversize) }
func (gdClass Viewport) GetSdfOversize() ViewportSDFOversize { return methodCall[ViewportSDFOversize](gdClass.obj.get(), methodViewport[66]) }
func (gdClass Viewport) SetSdfScale(scale ViewportSDFScale)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[67], &scale) }
func (gdClass Viewport) GetSdfScale() ViewportSDFScale { return methodCall[ViewportSDFScale](gdClass.obj.get(), methodViewport[68]) }
func (gdClass Viewport) SetMeshLodThreshold(pixels float64)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[69], &pixels) }
func (gdClass Viewport) GetMeshLodThreshold() float64 { return methodCall[float64](gdClass.obj.get(), methodViewport[70]) }
func (gdClass Viewport) SetWorld3d(world_3d World3D)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[71], &world_3d) }
func (gdClass Viewport) GetWorld3d() World3D { return methodCall[World3D](gdClass.obj.get(), methodViewport[72]) }
func (gdClass Viewport) FindWorld3d() World3D { return methodCall[World3D](gdClass.obj.get(), methodViewport[73]) }
func (gdClass Viewport) SetUseOwnWorld3d(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[74], &enable) }
func (gdClass Viewport) IsUsingOwnWorld3d() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[75]) }
func (gdClass Viewport) GetCamera3d() Camera3D { return methodCall[Camera3D](gdClass.obj.get(), methodViewport[76]) }
func (gdClass Viewport) SetAsAudioListener3d(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[77], &enable) }
func (gdClass Viewport) IsAudioListener3d() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[78]) }
func (gdClass Viewport) SetDisable3d(disable bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[79], &disable) }
func (gdClass Viewport) Is3dDisabled() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[80]) }
func (gdClass Viewport) SetUseXr(use bool)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[81], &use) }
func (gdClass Viewport) IsUsingXr() bool { return methodCall[bool](gdClass.obj.get(), methodViewport[82]) }
func (gdClass Viewport) SetScaling3dMode(scaling_3d_mode ViewportScaling3DMode)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[83], &scaling_3d_mode) }
func (gdClass Viewport) GetScaling3dMode() ViewportScaling3DMode { return methodCall[ViewportScaling3DMode](gdClass.obj.get(), methodViewport[84]) }
func (gdClass Viewport) SetScaling3dScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[85], &scale) }
func (gdClass Viewport) GetScaling3dScale() float64 { return methodCall[float64](gdClass.obj.get(), methodViewport[86]) }
func (gdClass Viewport) SetFsrSharpness(fsr_sharpness float64)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[87], &fsr_sharpness) }
func (gdClass Viewport) GetFsrSharpness() float64 { return methodCall[float64](gdClass.obj.get(), methodViewport[88]) }
func (gdClass Viewport) SetTextureMipmapBias(texture_mipmap_bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[89], &texture_mipmap_bias) }
func (gdClass Viewport) GetTextureMipmapBias() float64 { return methodCall[float64](gdClass.obj.get(), methodViewport[90]) }
func (gdClass Viewport) SetVrsMode(mode ViewportVRSMode)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[91], &mode) }
func (gdClass Viewport) GetVrsMode() ViewportVRSMode { return methodCall[ViewportVRSMode](gdClass.obj.get(), methodViewport[92]) }
func (gdClass Viewport) SetVrsTexture(texture Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodViewport[93], &texture) }
func (gdClass Viewport) GetVrsTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodViewport[94]) }

type ViewportTexture struct{self *ViewportTexture; obj safeObject }
func NewViewportTexture(ctx Context, at *ViewportTexture) ViewportTexture { if at == nil { at = new(ViewportTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass ViewportTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass ViewportTexture) owner() cObject { return gdClass.obj.get() }
func (ViewportTexture) class() string { return "ViewportTexture\000" }

func (gdClass ViewportTexture) Texture2D() Texture2D { return Texture2D{obj:gdClass.obj} }

var methodViewportTexture [2]cMethodBind
func (gdClass ViewportTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Texture2D().virtual(rtype, name)
}
func (gdClass ViewportTexture) SetViewportPathInScene(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodViewportTexture[0], &path) }
func (gdClass ViewportTexture) GetViewportPathInScene() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodViewportTexture[1]) }

type VisibleOnScreenEnabler2DEnableMode int64

const (
	VisibleOnScreenEnabler2DEnableModeInherit VisibleOnScreenEnabler2DEnableMode = 0
	VisibleOnScreenEnabler2DEnableModeAlways VisibleOnScreenEnabler2DEnableMode = 1
	VisibleOnScreenEnabler2DEnableModeWhenPaused VisibleOnScreenEnabler2DEnableMode = 2
)

type VisibleOnScreenEnabler2D struct{self *VisibleOnScreenEnabler2D; obj safeObject }
func NewVisibleOnScreenEnabler2D(ctx Context, at *VisibleOnScreenEnabler2D) VisibleOnScreenEnabler2D { if at == nil { at = new(VisibleOnScreenEnabler2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VisibleOnScreenEnabler2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisibleOnScreenEnabler2D) owner() cObject { return gdClass.obj.get() }
func (VisibleOnScreenEnabler2D) class() string { return "VisibleOnScreenEnabler2D\000" }

func (gdClass VisibleOnScreenEnabler2D) VisibleOnScreenNotifier2D() VisibleOnScreenNotifier2D { return VisibleOnScreenNotifier2D{obj:gdClass.obj} }

var methodVisibleOnScreenEnabler2D [4]cMethodBind
func (gdClass VisibleOnScreenEnabler2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisibleOnScreenNotifier2D().virtual(rtype, name)
}
func (gdClass VisibleOnScreenEnabler2D) SetEnableMode(mode VisibleOnScreenEnabler2DEnableMode)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenEnabler2D[0], &mode) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableMode() VisibleOnScreenEnabler2DEnableMode { return methodCall[VisibleOnScreenEnabler2DEnableMode](gdClass.obj.get(), methodVisibleOnScreenEnabler2D[1]) }
func (gdClass VisibleOnScreenEnabler2D) SetEnableNodePath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenEnabler2D[2], &path) }
func (gdClass VisibleOnScreenEnabler2D) GetEnableNodePath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodVisibleOnScreenEnabler2D[3]) }

type VisibleOnScreenEnabler3DEnableMode int64

const (
	VisibleOnScreenEnabler3DEnableModeInherit VisibleOnScreenEnabler3DEnableMode = 0
	VisibleOnScreenEnabler3DEnableModeAlways VisibleOnScreenEnabler3DEnableMode = 1
	VisibleOnScreenEnabler3DEnableModeWhenPaused VisibleOnScreenEnabler3DEnableMode = 2
)

type VisibleOnScreenEnabler3D struct{self *VisibleOnScreenEnabler3D; obj safeObject }
func NewVisibleOnScreenEnabler3D(ctx Context, at *VisibleOnScreenEnabler3D) VisibleOnScreenEnabler3D { if at == nil { at = new(VisibleOnScreenEnabler3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VisibleOnScreenEnabler3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisibleOnScreenEnabler3D) owner() cObject { return gdClass.obj.get() }
func (VisibleOnScreenEnabler3D) class() string { return "VisibleOnScreenEnabler3D\000" }

func (gdClass VisibleOnScreenEnabler3D) VisibleOnScreenNotifier3D() VisibleOnScreenNotifier3D { return VisibleOnScreenNotifier3D{obj:gdClass.obj} }

var methodVisibleOnScreenEnabler3D [4]cMethodBind
func (gdClass VisibleOnScreenEnabler3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisibleOnScreenNotifier3D().virtual(rtype, name)
}
func (gdClass VisibleOnScreenEnabler3D) SetEnableMode(mode VisibleOnScreenEnabler3DEnableMode)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenEnabler3D[0], &mode) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableMode() VisibleOnScreenEnabler3DEnableMode { return methodCall[VisibleOnScreenEnabler3DEnableMode](gdClass.obj.get(), methodVisibleOnScreenEnabler3D[1]) }
func (gdClass VisibleOnScreenEnabler3D) SetEnableNodePath(path NodePath)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenEnabler3D[2], &path) }
func (gdClass VisibleOnScreenEnabler3D) GetEnableNodePath() NodePath { return methodCall[NodePath](gdClass.obj.get(), methodVisibleOnScreenEnabler3D[3]) }

type VisibleOnScreenNotifier2D struct{self *VisibleOnScreenNotifier2D; obj safeObject }
func NewVisibleOnScreenNotifier2D(ctx Context, at *VisibleOnScreenNotifier2D) VisibleOnScreenNotifier2D { if at == nil { at = new(VisibleOnScreenNotifier2D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VisibleOnScreenNotifier2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisibleOnScreenNotifier2D) owner() cObject { return gdClass.obj.get() }
func (VisibleOnScreenNotifier2D) class() string { return "VisibleOnScreenNotifier2D\000" }

func (gdClass VisibleOnScreenNotifier2D) Node2D() Node2D { return Node2D{obj:gdClass.obj} }

var methodVisibleOnScreenNotifier2D [3]cMethodBind
func (gdClass VisibleOnScreenNotifier2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node2D().virtual(rtype, name)
}
func (gdClass VisibleOnScreenNotifier2D) SetRect(rect Rect2)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenNotifier2D[0], &rect) }
func (gdClass VisibleOnScreenNotifier2D) GetRect() Rect2 { return methodCall[Rect2](gdClass.obj.get(), methodVisibleOnScreenNotifier2D[1]) }
func (gdClass VisibleOnScreenNotifier2D) IsOnScreen() bool { return methodCall[bool](gdClass.obj.get(), methodVisibleOnScreenNotifier2D[2]) }

type VisibleOnScreenNotifier3D struct{self *VisibleOnScreenNotifier3D; obj safeObject }
func NewVisibleOnScreenNotifier3D(ctx Context, at *VisibleOnScreenNotifier3D) VisibleOnScreenNotifier3D { if at == nil { at = new(VisibleOnScreenNotifier3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VisibleOnScreenNotifier3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisibleOnScreenNotifier3D) owner() cObject { return gdClass.obj.get() }
func (VisibleOnScreenNotifier3D) class() string { return "VisibleOnScreenNotifier3D\000" }

func (gdClass VisibleOnScreenNotifier3D) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodVisibleOnScreenNotifier3D [2]cMethodBind
func (gdClass VisibleOnScreenNotifier3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass VisibleOnScreenNotifier3D) SetAabb(rect AABB)  { methodCall[struct{}](gdClass.obj.get(), methodVisibleOnScreenNotifier3D[0], &rect) }
func (gdClass VisibleOnScreenNotifier3D) IsOnScreen() bool { return methodCall[bool](gdClass.obj.get(), methodVisibleOnScreenNotifier3D[1]) }

type VisualInstance3D struct{self *VisualInstance3D; obj safeObject }
func NewVisualInstance3D(ctx Context, at *VisualInstance3D) VisualInstance3D { if at == nil { at = new(VisualInstance3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VisualInstance3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualInstance3D) owner() cObject { return gdClass.obj.get() }
func (VisualInstance3D) class() string { return "VisualInstance3D\000" }

func (gdClass VisualInstance3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodVisualInstance3D [9]cMethodBind
func (gdClass VisualInstance3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_aabb":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAabb() AABB }{}).Elem()) {
			return rtype.MethodByName(`GetAabb`)
		}
		return
	}
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass VisualInstance3D) SetBase(base RID)  { methodCall[struct{}](gdClass.obj.get(), methodVisualInstance3D[0], &base) }
func (gdClass VisualInstance3D) GetBase() RID { return methodCall[RID](gdClass.obj.get(), methodVisualInstance3D[1]) }
func (gdClass VisualInstance3D) GetInstance() RID { return methodCall[RID](gdClass.obj.get(), methodVisualInstance3D[2]) }
func (gdClass VisualInstance3D) SetLayerMask(mask int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualInstance3D[3], &mask) }
func (gdClass VisualInstance3D) GetLayerMask() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualInstance3D[4]) }
func (gdClass VisualInstance3D) SetLayerMaskValue(layer_number int64, value bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualInstance3D[5], &layer_number, &value) }
func (gdClass VisualInstance3D) GetLayerMaskValue(layer_number int64) bool { return methodCall[bool](gdClass.obj.get(), methodVisualInstance3D[6], &layer_number) }
func (gdClass VisualInstance3D) GetTransformedAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodVisualInstance3D[7]) }
func (gdClass VisualInstance3D) GetAabb() AABB { return methodCall[AABB](gdClass.obj.get(), methodVisualInstance3D[8]) }

type VisualShaderType int64

const (
	VisualShaderTypeVertex VisualShaderType = 0
	VisualShaderTypeFragment VisualShaderType = 1
	VisualShaderTypeLight VisualShaderType = 2
	VisualShaderTypeStart VisualShaderType = 3
	VisualShaderTypeProcess VisualShaderType = 4
	VisualShaderTypeCollide VisualShaderType = 5
	VisualShaderTypeStartCustom VisualShaderType = 6
	VisualShaderTypeProcessCustom VisualShaderType = 7
	VisualShaderTypeSky VisualShaderType = 8
	VisualShaderTypeFog VisualShaderType = 9
	VisualShaderTypeMax VisualShaderType = 10
)

type VisualShaderVaryingMode int64

const (
	VisualShaderVaryingModeVertexToFragLight VisualShaderVaryingMode = 0
	VisualShaderVaryingModeFragToLight VisualShaderVaryingMode = 1
	VisualShaderVaryingModeMax VisualShaderVaryingMode = 2
)

type VisualShaderVaryingType int64

const (
	VisualShaderVaryingTypeFloat VisualShaderVaryingType = 0
	VisualShaderVaryingTypeInt VisualShaderVaryingType = 1
	VisualShaderVaryingTypeVector2d VisualShaderVaryingType = 2
	VisualShaderVaryingTypeVector3d VisualShaderVaryingType = 3
	VisualShaderVaryingTypeVector4d VisualShaderVaryingType = 4
	VisualShaderVaryingTypeBoolean VisualShaderVaryingType = 5
	VisualShaderVaryingTypeTransform VisualShaderVaryingType = 6
	VisualShaderVaryingTypeMax VisualShaderVaryingType = 7
)

type VisualShader struct{self *VisualShader; obj safeObject }
func NewVisualShader(ctx Context, at *VisualShader) VisualShader { if at == nil { at = new(VisualShader) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShader) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShader) owner() cObject { return gdClass.obj.get() }
func (VisualShader) class() string { return "VisualShader\000" }

func (gdClass VisualShader) Shader() Shader { return Shader{obj:gdClass.obj} }

var methodVisualShader [20]cMethodBind
func (gdClass VisualShader) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shader().virtual(rtype, name)
}
func (gdClass VisualShader) SetMode(mode ShaderMode)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[0], &mode) }
func (gdClass VisualShader) AddNode(atype VisualShaderType, node VisualShaderNode, position Vector2, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[1], &atype, &node, &position, &id) }
func (gdClass VisualShader) GetNode(atype VisualShaderType, id int64) VisualShaderNode { return methodCall[VisualShaderNode](gdClass.obj.get(), methodVisualShader[2], &atype, &id) }
func (gdClass VisualShader) SetNodePosition(atype VisualShaderType, id int64, position Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[3], &atype, &id, &position) }
func (gdClass VisualShader) GetNodePosition(atype VisualShaderType, id int64) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodVisualShader[4], &atype, &id) }
func (gdClass VisualShader) GetNodeList(atype VisualShaderType) []int32 { return methodCall[[]int32](gdClass.obj.get(), methodVisualShader[5], &atype) }
func (gdClass VisualShader) GetValidNodeId(atype VisualShaderType) int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShader[6], &atype) }
func (gdClass VisualShader) RemoveNode(atype VisualShaderType, id int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[7], &atype, &id) }
func (gdClass VisualShader) ReplaceNode(atype VisualShaderType, id int64, new_class Name)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[8], &atype, &id, &new_class) }
func (gdClass VisualShader) IsNodeConnection(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShader[9], &atype, &from_node, &from_port, &to_node, &to_port) }
func (gdClass VisualShader) CanConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShader[10], &atype, &from_node, &from_port, &to_node, &to_port) }
func (gdClass VisualShader) ConnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64) int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShader[11], &atype, &from_node, &from_port, &to_node, &to_port) }
func (gdClass VisualShader) DisconnectNodes(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[12], &atype, &from_node, &from_port, &to_node, &to_port) }
func (gdClass VisualShader) ConnectNodesForced(atype VisualShaderType, from_node int64, from_port int64, to_node int64, to_port int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[13], &atype, &from_node, &from_port, &to_node, &to_port) }
func (gdClass VisualShader) GetNodeConnections(atype VisualShaderType) Array { return methodCall[Array](gdClass.obj.get(), methodVisualShader[14], &atype) }
func (gdClass VisualShader) SetGraphOffset(offset Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[15], &offset) }
func (gdClass VisualShader) GetGraphOffset() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodVisualShader[16]) }
func (gdClass VisualShader) AddVarying(name string, mode VisualShaderVaryingMode, atype VisualShaderVaryingType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[17], &name, &mode, &atype) }
func (gdClass VisualShader) RemoveVarying(name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShader[18], &name) }
func (gdClass VisualShader) HasVarying(name string) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShader[19], &name) }

type VisualShaderNodePortType int64

const (
	VisualShaderNodePortTypeScalar VisualShaderNodePortType = 0
	VisualShaderNodePortTypeScalarInt VisualShaderNodePortType = 1
	VisualShaderNodePortTypeVector2d VisualShaderNodePortType = 2
	VisualShaderNodePortTypeVector3d VisualShaderNodePortType = 3
	VisualShaderNodePortTypeVector4d VisualShaderNodePortType = 4
	VisualShaderNodePortTypeBoolean VisualShaderNodePortType = 5
	VisualShaderNodePortTypeTransform VisualShaderNodePortType = 6
	VisualShaderNodePortTypeSampler VisualShaderNodePortType = 7
	VisualShaderNodePortTypeMax VisualShaderNodePortType = 8
)

type VisualShaderNode struct{self *VisualShaderNode; obj safeObject }
func NewVisualShaderNode(ctx Context, at *VisualShaderNode) VisualShaderNode { if at == nil { at = new(VisualShaderNode) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNode) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNode) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNode) class() string { return "VisualShaderNode\000" }

func (gdClass VisualShaderNode) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodVisualShaderNode [8]cMethodBind
func (gdClass VisualShaderNode) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass VisualShaderNode) SetOutputPortForPreview(port int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNode[0], &port) }
func (gdClass VisualShaderNode) GetOutputPortForPreview() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNode[1]) }
func (gdClass VisualShaderNode) SetInputPortDefaultValue(port int64, value any, prev_value any)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNode[2], &port, &value, &prev_value) }
func (gdClass VisualShaderNode) GetInputPortDefaultValue(port int64) any { return methodCall[any](gdClass.obj.get(), methodVisualShaderNode[3], &port) }
func (gdClass VisualShaderNode) RemoveInputPortDefaultValue(port int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNode[4], &port) }
func (gdClass VisualShaderNode) ClearDefaultInputValues()  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNode[5]) }
func (gdClass VisualShaderNode) SetDefaultInputValues(values Array)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNode[6], &values) }
func (gdClass VisualShaderNode) GetDefaultInputValues() Array { return methodCall[Array](gdClass.obj.get(), methodVisualShaderNode[7]) }

type VisualShaderNodeBillboardBillboardType int64

const (
	VisualShaderNodeBillboardBillboardTypeDisabled VisualShaderNodeBillboardBillboardType = 0
	VisualShaderNodeBillboardBillboardTypeEnabled VisualShaderNodeBillboardBillboardType = 1
	VisualShaderNodeBillboardBillboardTypeFixedY VisualShaderNodeBillboardBillboardType = 2
	VisualShaderNodeBillboardBillboardTypeParticles VisualShaderNodeBillboardBillboardType = 3
	VisualShaderNodeBillboardBillboardTypeMax VisualShaderNodeBillboardBillboardType = 4
)

type VisualShaderNodeBillboard struct{self *VisualShaderNodeBillboard; obj safeObject }
func NewVisualShaderNodeBillboard(ctx Context, at *VisualShaderNodeBillboard) VisualShaderNodeBillboard { if at == nil { at = new(VisualShaderNodeBillboard) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeBillboard) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeBillboard) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeBillboard) class() string { return "VisualShaderNodeBillboard\000" }

func (gdClass VisualShaderNodeBillboard) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeBillboard [4]cMethodBind
func (gdClass VisualShaderNodeBillboard) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeBillboard) SetBillboardType(billboard_type VisualShaderNodeBillboardBillboardType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeBillboard[0], &billboard_type) }
func (gdClass VisualShaderNodeBillboard) GetBillboardType() VisualShaderNodeBillboardBillboardType { return methodCall[VisualShaderNodeBillboardBillboardType](gdClass.obj.get(), methodVisualShaderNodeBillboard[1]) }
func (gdClass VisualShaderNodeBillboard) SetKeepScaleEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeBillboard[2], &enabled) }
func (gdClass VisualShaderNodeBillboard) IsKeepScaleEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeBillboard[3]) }

type VisualShaderNodeBooleanConstant struct{self *VisualShaderNodeBooleanConstant; obj safeObject }
func NewVisualShaderNodeBooleanConstant(ctx Context, at *VisualShaderNodeBooleanConstant) VisualShaderNodeBooleanConstant { if at == nil { at = new(VisualShaderNodeBooleanConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeBooleanConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeBooleanConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeBooleanConstant) class() string { return "VisualShaderNodeBooleanConstant\000" }

func (gdClass VisualShaderNodeBooleanConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeBooleanConstant [2]cMethodBind
func (gdClass VisualShaderNodeBooleanConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeBooleanConstant) SetConstant(constant bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeBooleanConstant[0], &constant) }
func (gdClass VisualShaderNodeBooleanConstant) GetConstant() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeBooleanConstant[1]) }

type VisualShaderNodeBooleanUniform struct{self *VisualShaderNodeBooleanUniform; obj safeObject }
func NewVisualShaderNodeBooleanUniform(ctx Context, at *VisualShaderNodeBooleanUniform) VisualShaderNodeBooleanUniform { if at == nil { at = new(VisualShaderNodeBooleanUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeBooleanUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeBooleanUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeBooleanUniform) class() string { return "VisualShaderNodeBooleanUniform\000" }

func (gdClass VisualShaderNodeBooleanUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeBooleanUniform [4]cMethodBind
func (gdClass VisualShaderNodeBooleanUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeBooleanUniform[0], &enabled) }
func (gdClass VisualShaderNodeBooleanUniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeBooleanUniform[1]) }
func (gdClass VisualShaderNodeBooleanUniform) SetDefaultValue(value bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeBooleanUniform[2], &value) }
func (gdClass VisualShaderNodeBooleanUniform) GetDefaultValue() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeBooleanUniform[3]) }

type VisualShaderNodeClampOpType int64

const (
	VisualShaderNodeClampOpTypeFloat VisualShaderNodeClampOpType = 0
	VisualShaderNodeClampOpTypeInt VisualShaderNodeClampOpType = 1
	VisualShaderNodeClampOpTypeVector2d VisualShaderNodeClampOpType = 2
	VisualShaderNodeClampOpTypeVector3d VisualShaderNodeClampOpType = 3
	VisualShaderNodeClampOpTypeVector4d VisualShaderNodeClampOpType = 4
	VisualShaderNodeClampOpTypeMax VisualShaderNodeClampOpType = 5
)

type VisualShaderNodeClamp struct{self *VisualShaderNodeClamp; obj safeObject }
func NewVisualShaderNodeClamp(ctx Context, at *VisualShaderNodeClamp) VisualShaderNodeClamp { if at == nil { at = new(VisualShaderNodeClamp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeClamp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeClamp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeClamp) class() string { return "VisualShaderNodeClamp\000" }

func (gdClass VisualShaderNodeClamp) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeClamp [2]cMethodBind
func (gdClass VisualShaderNodeClamp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeClamp) SetOpType(op_type VisualShaderNodeClampOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeClamp[0], &op_type) }
func (gdClass VisualShaderNodeClamp) GetOpType() VisualShaderNodeClampOpType { return methodCall[VisualShaderNodeClampOpType](gdClass.obj.get(), methodVisualShaderNodeClamp[1]) }

type VisualShaderNodeColorConstant struct{self *VisualShaderNodeColorConstant; obj safeObject }
func NewVisualShaderNodeColorConstant(ctx Context, at *VisualShaderNodeColorConstant) VisualShaderNodeColorConstant { if at == nil { at = new(VisualShaderNodeColorConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeColorConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeColorConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeColorConstant) class() string { return "VisualShaderNodeColorConstant\000" }

func (gdClass VisualShaderNodeColorConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeColorConstant [2]cMethodBind
func (gdClass VisualShaderNodeColorConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeColorConstant) SetConstant(constant Color)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeColorConstant[0], &constant) }
func (gdClass VisualShaderNodeColorConstant) GetConstant() Color { return methodCall[Color](gdClass.obj.get(), methodVisualShaderNodeColorConstant[1]) }

type VisualShaderNodeColorFuncFunction int64

const (
	VisualShaderNodeColorFuncFuncGrayscale VisualShaderNodeColorFuncFunction = 0
	VisualShaderNodeColorFuncFuncHsv2rgb VisualShaderNodeColorFuncFunction = 1
	VisualShaderNodeColorFuncFuncRgb2hsv VisualShaderNodeColorFuncFunction = 2
	VisualShaderNodeColorFuncFuncSepia VisualShaderNodeColorFuncFunction = 3
	VisualShaderNodeColorFuncFuncMax VisualShaderNodeColorFuncFunction = 4
)

type VisualShaderNodeColorFunc struct{self *VisualShaderNodeColorFunc; obj safeObject }
func NewVisualShaderNodeColorFunc(ctx Context, at *VisualShaderNodeColorFunc) VisualShaderNodeColorFunc { if at == nil { at = new(VisualShaderNodeColorFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeColorFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeColorFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeColorFunc) class() string { return "VisualShaderNodeColorFunc\000" }

func (gdClass VisualShaderNodeColorFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeColorFunc [2]cMethodBind
func (gdClass VisualShaderNodeColorFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeColorFunc) SetFunction(fn VisualShaderNodeColorFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeColorFunc[0], &fn) }
func (gdClass VisualShaderNodeColorFunc) GetFunction() VisualShaderNodeColorFuncFunction { return methodCall[VisualShaderNodeColorFuncFunction](gdClass.obj.get(), methodVisualShaderNodeColorFunc[1]) }

type VisualShaderNodeColorOpOperator int64

const (
	VisualShaderNodeColorOpOpScreen VisualShaderNodeColorOpOperator = 0
	VisualShaderNodeColorOpOpDifference VisualShaderNodeColorOpOperator = 1
	VisualShaderNodeColorOpOpDarken VisualShaderNodeColorOpOperator = 2
	VisualShaderNodeColorOpOpLighten VisualShaderNodeColorOpOperator = 3
	VisualShaderNodeColorOpOpOverlay VisualShaderNodeColorOpOperator = 4
	VisualShaderNodeColorOpOpDodge VisualShaderNodeColorOpOperator = 5
	VisualShaderNodeColorOpOpBurn VisualShaderNodeColorOpOperator = 6
	VisualShaderNodeColorOpOpSoftLight VisualShaderNodeColorOpOperator = 7
	VisualShaderNodeColorOpOpHardLight VisualShaderNodeColorOpOperator = 8
	VisualShaderNodeColorOpOpMax VisualShaderNodeColorOpOperator = 9
)

type VisualShaderNodeColorOp struct{self *VisualShaderNodeColorOp; obj safeObject }
func NewVisualShaderNodeColorOp(ctx Context, at *VisualShaderNodeColorOp) VisualShaderNodeColorOp { if at == nil { at = new(VisualShaderNodeColorOp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeColorOp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeColorOp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeColorOp) class() string { return "VisualShaderNodeColorOp\000" }

func (gdClass VisualShaderNodeColorOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeColorOp [2]cMethodBind
func (gdClass VisualShaderNodeColorOp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeColorOp) SetOperator(op VisualShaderNodeColorOpOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeColorOp[0], &op) }
func (gdClass VisualShaderNodeColorOp) GetOperator() VisualShaderNodeColorOpOperator { return methodCall[VisualShaderNodeColorOpOperator](gdClass.obj.get(), methodVisualShaderNodeColorOp[1]) }

type VisualShaderNodeColorUniform struct{self *VisualShaderNodeColorUniform; obj safeObject }
func NewVisualShaderNodeColorUniform(ctx Context, at *VisualShaderNodeColorUniform) VisualShaderNodeColorUniform { if at == nil { at = new(VisualShaderNodeColorUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeColorUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeColorUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeColorUniform) class() string { return "VisualShaderNodeColorUniform\000" }

func (gdClass VisualShaderNodeColorUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeColorUniform [4]cMethodBind
func (gdClass VisualShaderNodeColorUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeColorUniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeColorUniform[0], &enabled) }
func (gdClass VisualShaderNodeColorUniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeColorUniform[1]) }
func (gdClass VisualShaderNodeColorUniform) SetDefaultValue(value Color)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeColorUniform[2], &value) }
func (gdClass VisualShaderNodeColorUniform) GetDefaultValue() Color { return methodCall[Color](gdClass.obj.get(), methodVisualShaderNodeColorUniform[3]) }

type VisualShaderNodeComment struct{self *VisualShaderNodeComment; obj safeObject }
func NewVisualShaderNodeComment(ctx Context, at *VisualShaderNodeComment) VisualShaderNodeComment { if at == nil { at = new(VisualShaderNodeComment) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeComment) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeComment) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeComment) class() string { return "VisualShaderNodeComment\000" }

func (gdClass VisualShaderNodeComment) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase{obj:gdClass.obj} }

var methodVisualShaderNodeComment [4]cMethodBind
func (gdClass VisualShaderNodeComment) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeResizableBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeComment) SetTitle(title string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeComment[0], &title) }
func (gdClass VisualShaderNodeComment) GetTitle() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeComment[1]) }
func (gdClass VisualShaderNodeComment) SetDescription(description string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeComment[2], &description) }
func (gdClass VisualShaderNodeComment) GetDescription() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeComment[3]) }

type VisualShaderNodeCompareComparisonType int64

const (
	VisualShaderNodeCompareCtypeScalar VisualShaderNodeCompareComparisonType = 0
	VisualShaderNodeCompareCtypeScalarInt VisualShaderNodeCompareComparisonType = 1
	VisualShaderNodeCompareCtypeVector2d VisualShaderNodeCompareComparisonType = 2
	VisualShaderNodeCompareCtypeVector3d VisualShaderNodeCompareComparisonType = 3
	VisualShaderNodeCompareCtypeVector4d VisualShaderNodeCompareComparisonType = 4
	VisualShaderNodeCompareCtypeBoolean VisualShaderNodeCompareComparisonType = 5
	VisualShaderNodeCompareCtypeTransform VisualShaderNodeCompareComparisonType = 6
	VisualShaderNodeCompareCtypeMax VisualShaderNodeCompareComparisonType = 7
)

type VisualShaderNodeCompareFunction int64

const (
	VisualShaderNodeCompareFuncEqual VisualShaderNodeCompareFunction = 0
	VisualShaderNodeCompareFuncNotEqual VisualShaderNodeCompareFunction = 1
	VisualShaderNodeCompareFuncGreaterThan VisualShaderNodeCompareFunction = 2
	VisualShaderNodeCompareFuncGreaterThanEqual VisualShaderNodeCompareFunction = 3
	VisualShaderNodeCompareFuncLessThan VisualShaderNodeCompareFunction = 4
	VisualShaderNodeCompareFuncLessThanEqual VisualShaderNodeCompareFunction = 5
	VisualShaderNodeCompareFuncMax VisualShaderNodeCompareFunction = 6
)

type VisualShaderNodeCompareCondition int64

const (
	VisualShaderNodeCompareCondAll VisualShaderNodeCompareCondition = 0
	VisualShaderNodeCompareCondAny VisualShaderNodeCompareCondition = 1
	VisualShaderNodeCompareCondMax VisualShaderNodeCompareCondition = 2
)

type VisualShaderNodeCompare struct{self *VisualShaderNodeCompare; obj safeObject }
func NewVisualShaderNodeCompare(ctx Context, at *VisualShaderNodeCompare) VisualShaderNodeCompare { if at == nil { at = new(VisualShaderNodeCompare) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCompare) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCompare) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCompare) class() string { return "VisualShaderNodeCompare\000" }

func (gdClass VisualShaderNodeCompare) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeCompare [6]cMethodBind
func (gdClass VisualShaderNodeCompare) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeCompare) SetComparisonType(atype VisualShaderNodeCompareComparisonType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCompare[0], &atype) }
func (gdClass VisualShaderNodeCompare) GetComparisonType() VisualShaderNodeCompareComparisonType { return methodCall[VisualShaderNodeCompareComparisonType](gdClass.obj.get(), methodVisualShaderNodeCompare[1]) }
func (gdClass VisualShaderNodeCompare) SetFunction(fn VisualShaderNodeCompareFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCompare[2], &fn) }
func (gdClass VisualShaderNodeCompare) GetFunction() VisualShaderNodeCompareFunction { return methodCall[VisualShaderNodeCompareFunction](gdClass.obj.get(), methodVisualShaderNodeCompare[3]) }
func (gdClass VisualShaderNodeCompare) SetCondition(condition VisualShaderNodeCompareCondition)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCompare[4], &condition) }
func (gdClass VisualShaderNodeCompare) GetCondition() VisualShaderNodeCompareCondition { return methodCall[VisualShaderNodeCompareCondition](gdClass.obj.get(), methodVisualShaderNodeCompare[5]) }

type VisualShaderNodeConstant struct{self *VisualShaderNodeConstant; obj safeObject }
func NewVisualShaderNodeConstant(ctx Context, at *VisualShaderNodeConstant) VisualShaderNodeConstant { if at == nil { at = new(VisualShaderNodeConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeConstant) class() string { return "VisualShaderNodeConstant\000" }

func (gdClass VisualShaderNodeConstant) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeCubemapSource int64

const (
	VisualShaderNodeCubemapSourceTexture VisualShaderNodeCubemapSource = 0
	VisualShaderNodeCubemapSourcePort VisualShaderNodeCubemapSource = 1
	VisualShaderNodeCubemapSourceMax VisualShaderNodeCubemapSource = 2
)

type VisualShaderNodeCubemapTextureType int64

const (
	VisualShaderNodeCubemapTypeData VisualShaderNodeCubemapTextureType = 0
	VisualShaderNodeCubemapTypeColor VisualShaderNodeCubemapTextureType = 1
	VisualShaderNodeCubemapTypeNormalMap VisualShaderNodeCubemapTextureType = 2
	VisualShaderNodeCubemapTypeMax VisualShaderNodeCubemapTextureType = 3
)

type VisualShaderNodeCubemap struct{self *VisualShaderNodeCubemap; obj safeObject }
func NewVisualShaderNodeCubemap(ctx Context, at *VisualShaderNodeCubemap) VisualShaderNodeCubemap { if at == nil { at = new(VisualShaderNodeCubemap) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCubemap) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCubemap) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCubemap) class() string { return "VisualShaderNodeCubemap\000" }

func (gdClass VisualShaderNodeCubemap) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeCubemap [6]cMethodBind
func (gdClass VisualShaderNodeCubemap) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeCubemap) SetSource(value VisualShaderNodeCubemapSource)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCubemap[0], &value) }
func (gdClass VisualShaderNodeCubemap) GetSource() VisualShaderNodeCubemapSource { return methodCall[VisualShaderNodeCubemapSource](gdClass.obj.get(), methodVisualShaderNodeCubemap[1]) }
func (gdClass VisualShaderNodeCubemap) SetCubeMap(value Cubemap)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCubemap[2], &value) }
func (gdClass VisualShaderNodeCubemap) GetCubeMap() Cubemap { return methodCall[Cubemap](gdClass.obj.get(), methodVisualShaderNodeCubemap[3]) }
func (gdClass VisualShaderNodeCubemap) SetTextureType(value VisualShaderNodeCubemapTextureType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCubemap[4], &value) }
func (gdClass VisualShaderNodeCubemap) GetTextureType() VisualShaderNodeCubemapTextureType { return methodCall[VisualShaderNodeCubemapTextureType](gdClass.obj.get(), methodVisualShaderNodeCubemap[5]) }

type VisualShaderNodeCubemapUniform struct{self *VisualShaderNodeCubemapUniform; obj safeObject }
func NewVisualShaderNodeCubemapUniform(ctx Context, at *VisualShaderNodeCubemapUniform) VisualShaderNodeCubemapUniform { if at == nil { at = new(VisualShaderNodeCubemapUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCubemapUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCubemapUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCubemapUniform) class() string { return "VisualShaderNodeCubemapUniform\000" }

func (gdClass VisualShaderNodeCubemapUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform{obj:gdClass.obj} }

func (gdClass VisualShaderNodeCubemapUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeTextureUniform().virtual(rtype, name)
}

type VisualShaderNodeCurveTexture struct{self *VisualShaderNodeCurveTexture; obj safeObject }
func NewVisualShaderNodeCurveTexture(ctx Context, at *VisualShaderNodeCurveTexture) VisualShaderNodeCurveTexture { if at == nil { at = new(VisualShaderNodeCurveTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCurveTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCurveTexture) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCurveTexture) class() string { return "VisualShaderNodeCurveTexture\000" }

func (gdClass VisualShaderNodeCurveTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase{obj:gdClass.obj} }

var methodVisualShaderNodeCurveTexture [2]cMethodBind
func (gdClass VisualShaderNodeCurveTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeResizableBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeCurveTexture) SetTexture(texture CurveTexture)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCurveTexture[0], &texture) }
func (gdClass VisualShaderNodeCurveTexture) GetTexture() CurveTexture { return methodCall[CurveTexture](gdClass.obj.get(), methodVisualShaderNodeCurveTexture[1]) }

type VisualShaderNodeCurveXYZTexture struct{self *VisualShaderNodeCurveXYZTexture; obj safeObject }
func NewVisualShaderNodeCurveXYZTexture(ctx Context, at *VisualShaderNodeCurveXYZTexture) VisualShaderNodeCurveXYZTexture { if at == nil { at = new(VisualShaderNodeCurveXYZTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCurveXYZTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCurveXYZTexture) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCurveXYZTexture) class() string { return "VisualShaderNodeCurveXYZTexture\000" }

func (gdClass VisualShaderNodeCurveXYZTexture) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase{obj:gdClass.obj} }

var methodVisualShaderNodeCurveXYZTexture [2]cMethodBind
func (gdClass VisualShaderNodeCurveXYZTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeResizableBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeCurveXYZTexture) SetTexture(texture CurveXYZTexture)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeCurveXYZTexture[0], &texture) }
func (gdClass VisualShaderNodeCurveXYZTexture) GetTexture() CurveXYZTexture { return methodCall[CurveXYZTexture](gdClass.obj.get(), methodVisualShaderNodeCurveXYZTexture[1]) }

type VisualShaderNodeCustom struct{self *VisualShaderNodeCustom; obj safeObject }
func NewVisualShaderNodeCustom(ctx Context, at *VisualShaderNodeCustom) VisualShaderNodeCustom { if at == nil { at = new(VisualShaderNodeCustom) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeCustom) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeCustom) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeCustom) class() string { return "VisualShaderNodeCustom\000" }

func (gdClass VisualShaderNodeCustom) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeCustom) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetName() string }{}).Elem()) {
			return rtype.MethodByName(`GetName`)
		}
		return
	case "_get_description":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetDescription() string }{}).Elem()) {
			return rtype.MethodByName(`GetDescription`)
		}
		return
	case "_get_category":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCategory() string }{}).Elem()) {
			return rtype.MethodByName(`GetCategory`)
		}
		return
	case "_get_return_icon_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetReturnIconType() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetReturnIconType`)
		}
		return
	case "_get_input_port_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInputPortCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetInputPortCount`)
		}
		return
	case "_get_input_port_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInputPortType(port int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetInputPortType`)
		}
		return
	case "_get_input_port_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetInputPortName(port int64) string }{}).Elem()) {
			return rtype.MethodByName(`GetInputPortName`)
		}
		return
	case "_get_output_port_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOutputPortCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetOutputPortCount`)
		}
		return
	case "_get_output_port_type":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOutputPortType(port int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetOutputPortType`)
		}
		return
	case "_get_output_port_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetOutputPortName(port int64) string }{}).Elem()) {
			return rtype.MethodByName(`GetOutputPortName`)
		}
		return
	case "_get_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCode(input_vars Array, output_vars Array, mode ShaderMode, atype VisualShaderType) string }{}).Elem()) {
			return rtype.MethodByName(`GetCode`)
		}
		return
	case "_get_func_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetFuncCode(mode ShaderMode, atype VisualShaderType) string }{}).Elem()) {
			return rtype.MethodByName(`GetFuncCode`)
		}
		return
	case "_get_global_code":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetGlobalCode(mode ShaderMode) string }{}).Elem()) {
			return rtype.MethodByName(`GetGlobalCode`)
		}
		return
	case "_is_highend":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsHighend() bool }{}).Elem()) {
			return rtype.MethodByName(`IsHighend`)
		}
		return
	case "_is_available":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsAvailable(mode ShaderMode, atype VisualShaderType) bool }{}).Elem()) {
			return rtype.MethodByName(`IsAvailable`)
		}
		return
	}
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeDerivativeFuncOpType int64

const (
	VisualShaderNodeDerivativeFuncOpTypeScalar VisualShaderNodeDerivativeFuncOpType = 0
	VisualShaderNodeDerivativeFuncOpTypeVector2d VisualShaderNodeDerivativeFuncOpType = 1
	VisualShaderNodeDerivativeFuncOpTypeVector3d VisualShaderNodeDerivativeFuncOpType = 2
	VisualShaderNodeDerivativeFuncOpTypeVector4d VisualShaderNodeDerivativeFuncOpType = 3
	VisualShaderNodeDerivativeFuncOpTypeMax VisualShaderNodeDerivativeFuncOpType = 4
)

type VisualShaderNodeDerivativeFuncFunction int64

const (
	VisualShaderNodeDerivativeFuncFuncSum VisualShaderNodeDerivativeFuncFunction = 0
	VisualShaderNodeDerivativeFuncFuncX VisualShaderNodeDerivativeFuncFunction = 1
	VisualShaderNodeDerivativeFuncFuncY VisualShaderNodeDerivativeFuncFunction = 2
	VisualShaderNodeDerivativeFuncFuncMax VisualShaderNodeDerivativeFuncFunction = 3
)

type VisualShaderNodeDerivativeFunc struct{self *VisualShaderNodeDerivativeFunc; obj safeObject }
func NewVisualShaderNodeDerivativeFunc(ctx Context, at *VisualShaderNodeDerivativeFunc) VisualShaderNodeDerivativeFunc { if at == nil { at = new(VisualShaderNodeDerivativeFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeDerivativeFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeDerivativeFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeDerivativeFunc) class() string { return "VisualShaderNodeDerivativeFunc\000" }

func (gdClass VisualShaderNodeDerivativeFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeDerivativeFunc [4]cMethodBind
func (gdClass VisualShaderNodeDerivativeFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeDerivativeFunc) SetOpType(atype VisualShaderNodeDerivativeFuncOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeDerivativeFunc[0], &atype) }
func (gdClass VisualShaderNodeDerivativeFunc) GetOpType() VisualShaderNodeDerivativeFuncOpType { return methodCall[VisualShaderNodeDerivativeFuncOpType](gdClass.obj.get(), methodVisualShaderNodeDerivativeFunc[1]) }
func (gdClass VisualShaderNodeDerivativeFunc) SetFunction(fn VisualShaderNodeDerivativeFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeDerivativeFunc[2], &fn) }
func (gdClass VisualShaderNodeDerivativeFunc) GetFunction() VisualShaderNodeDerivativeFuncFunction { return methodCall[VisualShaderNodeDerivativeFuncFunction](gdClass.obj.get(), methodVisualShaderNodeDerivativeFunc[3]) }

type VisualShaderNodeDeterminant struct{self *VisualShaderNodeDeterminant; obj safeObject }
func NewVisualShaderNodeDeterminant(ctx Context, at *VisualShaderNodeDeterminant) VisualShaderNodeDeterminant { if at == nil { at = new(VisualShaderNodeDeterminant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeDeterminant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeDeterminant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeDeterminant) class() string { return "VisualShaderNodeDeterminant\000" }

func (gdClass VisualShaderNodeDeterminant) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeDeterminant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeDotProduct struct{self *VisualShaderNodeDotProduct; obj safeObject }
func NewVisualShaderNodeDotProduct(ctx Context, at *VisualShaderNodeDotProduct) VisualShaderNodeDotProduct { if at == nil { at = new(VisualShaderNodeDotProduct) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeDotProduct) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeDotProduct) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeDotProduct) class() string { return "VisualShaderNodeDotProduct\000" }

func (gdClass VisualShaderNodeDotProduct) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeDotProduct) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeExpression struct{self *VisualShaderNodeExpression; obj safeObject }
func NewVisualShaderNodeExpression(ctx Context, at *VisualShaderNodeExpression) VisualShaderNodeExpression { if at == nil { at = new(VisualShaderNodeExpression) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeExpression) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeExpression) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeExpression) class() string { return "VisualShaderNodeExpression\000" }

func (gdClass VisualShaderNodeExpression) VisualShaderNodeGroupBase() VisualShaderNodeGroupBase { return VisualShaderNodeGroupBase{obj:gdClass.obj} }

var methodVisualShaderNodeExpression [2]cMethodBind
func (gdClass VisualShaderNodeExpression) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeGroupBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeExpression) SetExpression(expression string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeExpression[0], &expression) }
func (gdClass VisualShaderNodeExpression) GetExpression() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeExpression[1]) }

type VisualShaderNodeFaceForward struct{self *VisualShaderNodeFaceForward; obj safeObject }
func NewVisualShaderNodeFaceForward(ctx Context, at *VisualShaderNodeFaceForward) VisualShaderNodeFaceForward { if at == nil { at = new(VisualShaderNodeFaceForward) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFaceForward) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFaceForward) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFaceForward) class() string { return "VisualShaderNodeFaceForward\000" }

func (gdClass VisualShaderNodeFaceForward) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeFaceForward) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VisualShaderNodeFloatConstant struct{self *VisualShaderNodeFloatConstant; obj safeObject }
func NewVisualShaderNodeFloatConstant(ctx Context, at *VisualShaderNodeFloatConstant) VisualShaderNodeFloatConstant { if at == nil { at = new(VisualShaderNodeFloatConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFloatConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFloatConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFloatConstant) class() string { return "VisualShaderNodeFloatConstant\000" }

func (gdClass VisualShaderNodeFloatConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeFloatConstant [2]cMethodBind
func (gdClass VisualShaderNodeFloatConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeFloatConstant) SetConstant(constant float64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatConstant[0], &constant) }
func (gdClass VisualShaderNodeFloatConstant) GetConstant() float64 { return methodCall[float64](gdClass.obj.get(), methodVisualShaderNodeFloatConstant[1]) }

type VisualShaderNodeFloatFuncFunction int64

const (
	VisualShaderNodeFloatFuncFuncSin VisualShaderNodeFloatFuncFunction = 0
	VisualShaderNodeFloatFuncFuncCos VisualShaderNodeFloatFuncFunction = 1
	VisualShaderNodeFloatFuncFuncTan VisualShaderNodeFloatFuncFunction = 2
	VisualShaderNodeFloatFuncFuncAsin VisualShaderNodeFloatFuncFunction = 3
	VisualShaderNodeFloatFuncFuncAcos VisualShaderNodeFloatFuncFunction = 4
	VisualShaderNodeFloatFuncFuncAtan VisualShaderNodeFloatFuncFunction = 5
	VisualShaderNodeFloatFuncFuncSinh VisualShaderNodeFloatFuncFunction = 6
	VisualShaderNodeFloatFuncFuncCosh VisualShaderNodeFloatFuncFunction = 7
	VisualShaderNodeFloatFuncFuncTanh VisualShaderNodeFloatFuncFunction = 8
	VisualShaderNodeFloatFuncFuncLog VisualShaderNodeFloatFuncFunction = 9
	VisualShaderNodeFloatFuncFuncExp VisualShaderNodeFloatFuncFunction = 10
	VisualShaderNodeFloatFuncFuncSqrt VisualShaderNodeFloatFuncFunction = 11
	VisualShaderNodeFloatFuncFuncAbs VisualShaderNodeFloatFuncFunction = 12
	VisualShaderNodeFloatFuncFuncSign VisualShaderNodeFloatFuncFunction = 13
	VisualShaderNodeFloatFuncFuncFloor VisualShaderNodeFloatFuncFunction = 14
	VisualShaderNodeFloatFuncFuncRound VisualShaderNodeFloatFuncFunction = 15
	VisualShaderNodeFloatFuncFuncCeil VisualShaderNodeFloatFuncFunction = 16
	VisualShaderNodeFloatFuncFuncFract VisualShaderNodeFloatFuncFunction = 17
	VisualShaderNodeFloatFuncFuncSaturate VisualShaderNodeFloatFuncFunction = 18
	VisualShaderNodeFloatFuncFuncNegate VisualShaderNodeFloatFuncFunction = 19
	VisualShaderNodeFloatFuncFuncAcosh VisualShaderNodeFloatFuncFunction = 20
	VisualShaderNodeFloatFuncFuncAsinh VisualShaderNodeFloatFuncFunction = 21
	VisualShaderNodeFloatFuncFuncAtanh VisualShaderNodeFloatFuncFunction = 22
	VisualShaderNodeFloatFuncFuncDegrees VisualShaderNodeFloatFuncFunction = 23
	VisualShaderNodeFloatFuncFuncExp2 VisualShaderNodeFloatFuncFunction = 24
	VisualShaderNodeFloatFuncFuncInverseSqrt VisualShaderNodeFloatFuncFunction = 25
	VisualShaderNodeFloatFuncFuncLog2 VisualShaderNodeFloatFuncFunction = 26
	VisualShaderNodeFloatFuncFuncRadians VisualShaderNodeFloatFuncFunction = 27
	VisualShaderNodeFloatFuncFuncReciprocal VisualShaderNodeFloatFuncFunction = 28
	VisualShaderNodeFloatFuncFuncRoundeven VisualShaderNodeFloatFuncFunction = 29
	VisualShaderNodeFloatFuncFuncTrunc VisualShaderNodeFloatFuncFunction = 30
	VisualShaderNodeFloatFuncFuncOneminus VisualShaderNodeFloatFuncFunction = 31
	VisualShaderNodeFloatFuncFuncMax VisualShaderNodeFloatFuncFunction = 32
)

type VisualShaderNodeFloatFunc struct{self *VisualShaderNodeFloatFunc; obj safeObject }
func NewVisualShaderNodeFloatFunc(ctx Context, at *VisualShaderNodeFloatFunc) VisualShaderNodeFloatFunc { if at == nil { at = new(VisualShaderNodeFloatFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFloatFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFloatFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFloatFunc) class() string { return "VisualShaderNodeFloatFunc\000" }

func (gdClass VisualShaderNodeFloatFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeFloatFunc [2]cMethodBind
func (gdClass VisualShaderNodeFloatFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeFloatFunc) SetFunction(fn VisualShaderNodeFloatFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatFunc[0], &fn) }
func (gdClass VisualShaderNodeFloatFunc) GetFunction() VisualShaderNodeFloatFuncFunction { return methodCall[VisualShaderNodeFloatFuncFunction](gdClass.obj.get(), methodVisualShaderNodeFloatFunc[1]) }

type VisualShaderNodeFloatOpOperator int64

const (
	VisualShaderNodeFloatOpOpAdd VisualShaderNodeFloatOpOperator = 0
	VisualShaderNodeFloatOpOpSub VisualShaderNodeFloatOpOperator = 1
	VisualShaderNodeFloatOpOpMul VisualShaderNodeFloatOpOperator = 2
	VisualShaderNodeFloatOpOpDiv VisualShaderNodeFloatOpOperator = 3
	VisualShaderNodeFloatOpOpMod VisualShaderNodeFloatOpOperator = 4
	VisualShaderNodeFloatOpOpPow VisualShaderNodeFloatOpOperator = 5
	VisualShaderNodeFloatOpOpMax VisualShaderNodeFloatOpOperator = 6
	VisualShaderNodeFloatOpOpMin VisualShaderNodeFloatOpOperator = 7
	VisualShaderNodeFloatOpOpAtan2 VisualShaderNodeFloatOpOperator = 8
	VisualShaderNodeFloatOpOpStep VisualShaderNodeFloatOpOperator = 9
	VisualShaderNodeFloatOpOpEnumSize VisualShaderNodeFloatOpOperator = 10
)

type VisualShaderNodeFloatOp struct{self *VisualShaderNodeFloatOp; obj safeObject }
func NewVisualShaderNodeFloatOp(ctx Context, at *VisualShaderNodeFloatOp) VisualShaderNodeFloatOp { if at == nil { at = new(VisualShaderNodeFloatOp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFloatOp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFloatOp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFloatOp) class() string { return "VisualShaderNodeFloatOp\000" }

func (gdClass VisualShaderNodeFloatOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeFloatOp [2]cMethodBind
func (gdClass VisualShaderNodeFloatOp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeFloatOp) SetOperator(op VisualShaderNodeFloatOpOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatOp[0], &op) }
func (gdClass VisualShaderNodeFloatOp) GetOperator() VisualShaderNodeFloatOpOperator { return methodCall[VisualShaderNodeFloatOpOperator](gdClass.obj.get(), methodVisualShaderNodeFloatOp[1]) }

type VisualShaderNodeFloatUniformHint int64

const (
	VisualShaderNodeFloatUniformHintNone VisualShaderNodeFloatUniformHint = 0
	VisualShaderNodeFloatUniformHintRange VisualShaderNodeFloatUniformHint = 1
	VisualShaderNodeFloatUniformHintRangeStep VisualShaderNodeFloatUniformHint = 2
	VisualShaderNodeFloatUniformHintMax VisualShaderNodeFloatUniformHint = 3
)

type VisualShaderNodeFloatUniform struct{self *VisualShaderNodeFloatUniform; obj safeObject }
func NewVisualShaderNodeFloatUniform(ctx Context, at *VisualShaderNodeFloatUniform) VisualShaderNodeFloatUniform { if at == nil { at = new(VisualShaderNodeFloatUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFloatUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFloatUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFloatUniform) class() string { return "VisualShaderNodeFloatUniform\000" }

func (gdClass VisualShaderNodeFloatUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeFloatUniform [12]cMethodBind
func (gdClass VisualShaderNodeFloatUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeFloatUniform) SetHint(hint VisualShaderNodeFloatUniformHint)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[0], &hint) }
func (gdClass VisualShaderNodeFloatUniform) GetHint() VisualShaderNodeFloatUniformHint { return methodCall[VisualShaderNodeFloatUniformHint](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[1]) }
func (gdClass VisualShaderNodeFloatUniform) SetMin(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[2], &value) }
func (gdClass VisualShaderNodeFloatUniform) GetMin() float64 { return methodCall[float64](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[3]) }
func (gdClass VisualShaderNodeFloatUniform) SetMax(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[4], &value) }
func (gdClass VisualShaderNodeFloatUniform) GetMax() float64 { return methodCall[float64](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[5]) }
func (gdClass VisualShaderNodeFloatUniform) SetStep(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[6], &value) }
func (gdClass VisualShaderNodeFloatUniform) GetStep() float64 { return methodCall[float64](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[7]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[8], &enabled) }
func (gdClass VisualShaderNodeFloatUniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[9]) }
func (gdClass VisualShaderNodeFloatUniform) SetDefaultValue(value float64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[10], &value) }
func (gdClass VisualShaderNodeFloatUniform) GetDefaultValue() float64 { return methodCall[float64](gdClass.obj.get(), methodVisualShaderNodeFloatUniform[11]) }

type VisualShaderNodeFresnel struct{self *VisualShaderNodeFresnel; obj safeObject }
func NewVisualShaderNodeFresnel(ctx Context, at *VisualShaderNodeFresnel) VisualShaderNodeFresnel { if at == nil { at = new(VisualShaderNodeFresnel) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeFresnel) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeFresnel) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeFresnel) class() string { return "VisualShaderNodeFresnel\000" }

func (gdClass VisualShaderNodeFresnel) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeFresnel) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeGlobalExpression struct{self *VisualShaderNodeGlobalExpression; obj safeObject }
func NewVisualShaderNodeGlobalExpression(ctx Context, at *VisualShaderNodeGlobalExpression) VisualShaderNodeGlobalExpression { if at == nil { at = new(VisualShaderNodeGlobalExpression) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeGlobalExpression) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeGlobalExpression) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeGlobalExpression) class() string { return "VisualShaderNodeGlobalExpression\000" }

func (gdClass VisualShaderNodeGlobalExpression) VisualShaderNodeExpression() VisualShaderNodeExpression { return VisualShaderNodeExpression{obj:gdClass.obj} }

func (gdClass VisualShaderNodeGlobalExpression) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeExpression().virtual(rtype, name)
}

type VisualShaderNodeGroupBase struct{self *VisualShaderNodeGroupBase; obj safeObject }
func NewVisualShaderNodeGroupBase(ctx Context, at *VisualShaderNodeGroupBase) VisualShaderNodeGroupBase { if at == nil { at = new(VisualShaderNodeGroupBase) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeGroupBase) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeGroupBase) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeGroupBase) class() string { return "VisualShaderNodeGroupBase\000" }

func (gdClass VisualShaderNodeGroupBase) VisualShaderNodeResizableBase() VisualShaderNodeResizableBase { return VisualShaderNodeResizableBase{obj:gdClass.obj} }

var methodVisualShaderNodeGroupBase [21]cMethodBind
func (gdClass VisualShaderNodeGroupBase) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeResizableBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeGroupBase) SetInputs(inputs string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[0], &inputs) }
func (gdClass VisualShaderNodeGroupBase) GetInputs() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeGroupBase[1]) }
func (gdClass VisualShaderNodeGroupBase) SetOutputs(outputs string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[2], &outputs) }
func (gdClass VisualShaderNodeGroupBase) GetOutputs() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeGroupBase[3]) }
func (gdClass VisualShaderNodeGroupBase) IsValidPortName(name string) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeGroupBase[4], &name) }
func (gdClass VisualShaderNodeGroupBase) AddInputPort(id int64, atype int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[5], &id, &atype, &name) }
func (gdClass VisualShaderNodeGroupBase) RemoveInputPort(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[6], &id) }
func (gdClass VisualShaderNodeGroupBase) GetInputPortCount() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeGroupBase[7]) }
func (gdClass VisualShaderNodeGroupBase) HasInputPort(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeGroupBase[8], &id) }
func (gdClass VisualShaderNodeGroupBase) ClearInputPorts()  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[9]) }
func (gdClass VisualShaderNodeGroupBase) AddOutputPort(id int64, atype int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[10], &id, &atype, &name) }
func (gdClass VisualShaderNodeGroupBase) RemoveOutputPort(id int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[11], &id) }
func (gdClass VisualShaderNodeGroupBase) GetOutputPortCount() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeGroupBase[12]) }
func (gdClass VisualShaderNodeGroupBase) HasOutputPort(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeGroupBase[13], &id) }
func (gdClass VisualShaderNodeGroupBase) ClearOutputPorts()  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[14]) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortName(id int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[15], &id, &name) }
func (gdClass VisualShaderNodeGroupBase) SetInputPortType(id int64, atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[16], &id, &atype) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortName(id int64, name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[17], &id, &name) }
func (gdClass VisualShaderNodeGroupBase) SetOutputPortType(id int64, atype int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeGroupBase[18], &id, &atype) }
func (gdClass VisualShaderNodeGroupBase) GetFreeInputPortId() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeGroupBase[19]) }
func (gdClass VisualShaderNodeGroupBase) GetFreeOutputPortId() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeGroupBase[20]) }

type VisualShaderNodeIf struct{self *VisualShaderNodeIf; obj safeObject }
func NewVisualShaderNodeIf(ctx Context, at *VisualShaderNodeIf) VisualShaderNodeIf { if at == nil { at = new(VisualShaderNodeIf) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIf) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIf) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIf) class() string { return "VisualShaderNodeIf\000" }

func (gdClass VisualShaderNodeIf) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeIf) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeInput struct{self *VisualShaderNodeInput; obj safeObject }
func NewVisualShaderNodeInput(ctx Context, at *VisualShaderNodeInput) VisualShaderNodeInput { if at == nil { at = new(VisualShaderNodeInput) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeInput) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeInput) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeInput) class() string { return "VisualShaderNodeInput\000" }

func (gdClass VisualShaderNodeInput) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeInput [3]cMethodBind
func (gdClass VisualShaderNodeInput) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeInput) SetInputName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeInput[0], &name) }
func (gdClass VisualShaderNodeInput) GetInputName() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeInput[1]) }
func (gdClass VisualShaderNodeInput) GetInputRealName() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeInput[2]) }

type VisualShaderNodeIntConstant struct{self *VisualShaderNodeIntConstant; obj safeObject }
func NewVisualShaderNodeIntConstant(ctx Context, at *VisualShaderNodeIntConstant) VisualShaderNodeIntConstant { if at == nil { at = new(VisualShaderNodeIntConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIntConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIntConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIntConstant) class() string { return "VisualShaderNodeIntConstant\000" }

func (gdClass VisualShaderNodeIntConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeIntConstant [2]cMethodBind
func (gdClass VisualShaderNodeIntConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeIntConstant) SetConstant(constant int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntConstant[0], &constant) }
func (gdClass VisualShaderNodeIntConstant) GetConstant() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeIntConstant[1]) }

type VisualShaderNodeIntFuncFunction int64

const (
	VisualShaderNodeIntFuncFuncAbs VisualShaderNodeIntFuncFunction = 0
	VisualShaderNodeIntFuncFuncNegate VisualShaderNodeIntFuncFunction = 1
	VisualShaderNodeIntFuncFuncSign VisualShaderNodeIntFuncFunction = 2
	VisualShaderNodeIntFuncFuncBitwiseNot VisualShaderNodeIntFuncFunction = 3
	VisualShaderNodeIntFuncFuncMax VisualShaderNodeIntFuncFunction = 4
)

type VisualShaderNodeIntFunc struct{self *VisualShaderNodeIntFunc; obj safeObject }
func NewVisualShaderNodeIntFunc(ctx Context, at *VisualShaderNodeIntFunc) VisualShaderNodeIntFunc { if at == nil { at = new(VisualShaderNodeIntFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIntFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIntFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIntFunc) class() string { return "VisualShaderNodeIntFunc\000" }

func (gdClass VisualShaderNodeIntFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeIntFunc [2]cMethodBind
func (gdClass VisualShaderNodeIntFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeIntFunc) SetFunction(fn VisualShaderNodeIntFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntFunc[0], &fn) }
func (gdClass VisualShaderNodeIntFunc) GetFunction() VisualShaderNodeIntFuncFunction { return methodCall[VisualShaderNodeIntFuncFunction](gdClass.obj.get(), methodVisualShaderNodeIntFunc[1]) }

type VisualShaderNodeIntOpOperator int64

const (
	VisualShaderNodeIntOpOpAdd VisualShaderNodeIntOpOperator = 0
	VisualShaderNodeIntOpOpSub VisualShaderNodeIntOpOperator = 1
	VisualShaderNodeIntOpOpMul VisualShaderNodeIntOpOperator = 2
	VisualShaderNodeIntOpOpDiv VisualShaderNodeIntOpOperator = 3
	VisualShaderNodeIntOpOpMod VisualShaderNodeIntOpOperator = 4
	VisualShaderNodeIntOpOpMax VisualShaderNodeIntOpOperator = 5
	VisualShaderNodeIntOpOpMin VisualShaderNodeIntOpOperator = 6
	VisualShaderNodeIntOpOpBitwiseAnd VisualShaderNodeIntOpOperator = 7
	VisualShaderNodeIntOpOpBitwiseOr VisualShaderNodeIntOpOperator = 8
	VisualShaderNodeIntOpOpBitwiseXor VisualShaderNodeIntOpOperator = 9
	VisualShaderNodeIntOpOpBitwiseLeftShift VisualShaderNodeIntOpOperator = 10
	VisualShaderNodeIntOpOpBitwiseRightShift VisualShaderNodeIntOpOperator = 11
	VisualShaderNodeIntOpOpEnumSize VisualShaderNodeIntOpOperator = 12
)

type VisualShaderNodeIntOp struct{self *VisualShaderNodeIntOp; obj safeObject }
func NewVisualShaderNodeIntOp(ctx Context, at *VisualShaderNodeIntOp) VisualShaderNodeIntOp { if at == nil { at = new(VisualShaderNodeIntOp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIntOp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIntOp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIntOp) class() string { return "VisualShaderNodeIntOp\000" }

func (gdClass VisualShaderNodeIntOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeIntOp [2]cMethodBind
func (gdClass VisualShaderNodeIntOp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeIntOp) SetOperator(op VisualShaderNodeIntOpOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntOp[0], &op) }
func (gdClass VisualShaderNodeIntOp) GetOperator() VisualShaderNodeIntOpOperator { return methodCall[VisualShaderNodeIntOpOperator](gdClass.obj.get(), methodVisualShaderNodeIntOp[1]) }

type VisualShaderNodeIntUniformHint int64

const (
	VisualShaderNodeIntUniformHintNone VisualShaderNodeIntUniformHint = 0
	VisualShaderNodeIntUniformHintRange VisualShaderNodeIntUniformHint = 1
	VisualShaderNodeIntUniformHintRangeStep VisualShaderNodeIntUniformHint = 2
	VisualShaderNodeIntUniformHintMax VisualShaderNodeIntUniformHint = 3
)

type VisualShaderNodeIntUniform struct{self *VisualShaderNodeIntUniform; obj safeObject }
func NewVisualShaderNodeIntUniform(ctx Context, at *VisualShaderNodeIntUniform) VisualShaderNodeIntUniform { if at == nil { at = new(VisualShaderNodeIntUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIntUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIntUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIntUniform) class() string { return "VisualShaderNodeIntUniform\000" }

func (gdClass VisualShaderNodeIntUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeIntUniform [12]cMethodBind
func (gdClass VisualShaderNodeIntUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeIntUniform) SetHint(hint VisualShaderNodeIntUniformHint)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[0], &hint) }
func (gdClass VisualShaderNodeIntUniform) GetHint() VisualShaderNodeIntUniformHint { return methodCall[VisualShaderNodeIntUniformHint](gdClass.obj.get(), methodVisualShaderNodeIntUniform[1]) }
func (gdClass VisualShaderNodeIntUniform) SetMin(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[2], &value) }
func (gdClass VisualShaderNodeIntUniform) GetMin() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeIntUniform[3]) }
func (gdClass VisualShaderNodeIntUniform) SetMax(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[4], &value) }
func (gdClass VisualShaderNodeIntUniform) GetMax() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeIntUniform[5]) }
func (gdClass VisualShaderNodeIntUniform) SetStep(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[6], &value) }
func (gdClass VisualShaderNodeIntUniform) GetStep() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeIntUniform[7]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[8], &enabled) }
func (gdClass VisualShaderNodeIntUniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeIntUniform[9]) }
func (gdClass VisualShaderNodeIntUniform) SetDefaultValue(value int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIntUniform[10], &value) }
func (gdClass VisualShaderNodeIntUniform) GetDefaultValue() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeIntUniform[11]) }

type VisualShaderNodeIsFunction int64

const (
	VisualShaderNodeIsFuncIsInf VisualShaderNodeIsFunction = 0
	VisualShaderNodeIsFuncIsNan VisualShaderNodeIsFunction = 1
	VisualShaderNodeIsFuncMax VisualShaderNodeIsFunction = 2
)

type VisualShaderNodeIs struct{self *VisualShaderNodeIs; obj safeObject }
func NewVisualShaderNodeIs(ctx Context, at *VisualShaderNodeIs) VisualShaderNodeIs { if at == nil { at = new(VisualShaderNodeIs) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeIs) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeIs) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeIs) class() string { return "VisualShaderNodeIs\000" }

func (gdClass VisualShaderNodeIs) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeIs [2]cMethodBind
func (gdClass VisualShaderNodeIs) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeIs) SetFunction(fn VisualShaderNodeIsFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeIs[0], &fn) }
func (gdClass VisualShaderNodeIs) GetFunction() VisualShaderNodeIsFunction { return methodCall[VisualShaderNodeIsFunction](gdClass.obj.get(), methodVisualShaderNodeIs[1]) }

type VisualShaderNodeMixOpType int64

const (
	VisualShaderNodeMixOpTypeScalar VisualShaderNodeMixOpType = 0
	VisualShaderNodeMixOpTypeVector2d VisualShaderNodeMixOpType = 1
	VisualShaderNodeMixOpTypeVector2dScalar VisualShaderNodeMixOpType = 2
	VisualShaderNodeMixOpTypeVector3d VisualShaderNodeMixOpType = 3
	VisualShaderNodeMixOpTypeVector3dScalar VisualShaderNodeMixOpType = 4
	VisualShaderNodeMixOpTypeVector4d VisualShaderNodeMixOpType = 5
	VisualShaderNodeMixOpTypeVector4dScalar VisualShaderNodeMixOpType = 6
	VisualShaderNodeMixOpTypeMax VisualShaderNodeMixOpType = 7
)

type VisualShaderNodeMix struct{self *VisualShaderNodeMix; obj safeObject }
func NewVisualShaderNodeMix(ctx Context, at *VisualShaderNodeMix) VisualShaderNodeMix { if at == nil { at = new(VisualShaderNodeMix) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeMix) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeMix) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeMix) class() string { return "VisualShaderNodeMix\000" }

func (gdClass VisualShaderNodeMix) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeMix [2]cMethodBind
func (gdClass VisualShaderNodeMix) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeMix) SetOpType(op_type VisualShaderNodeMixOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeMix[0], &op_type) }
func (gdClass VisualShaderNodeMix) GetOpType() VisualShaderNodeMixOpType { return methodCall[VisualShaderNodeMixOpType](gdClass.obj.get(), methodVisualShaderNodeMix[1]) }

type VisualShaderNodeMultiplyAddOpType int64

const (
	VisualShaderNodeMultiplyAddOpTypeScalar VisualShaderNodeMultiplyAddOpType = 0
	VisualShaderNodeMultiplyAddOpTypeVector2d VisualShaderNodeMultiplyAddOpType = 1
	VisualShaderNodeMultiplyAddOpTypeVector3d VisualShaderNodeMultiplyAddOpType = 2
	VisualShaderNodeMultiplyAddOpTypeVector4d VisualShaderNodeMultiplyAddOpType = 3
	VisualShaderNodeMultiplyAddOpTypeMax VisualShaderNodeMultiplyAddOpType = 4
)

type VisualShaderNodeMultiplyAdd struct{self *VisualShaderNodeMultiplyAdd; obj safeObject }
func NewVisualShaderNodeMultiplyAdd(ctx Context, at *VisualShaderNodeMultiplyAdd) VisualShaderNodeMultiplyAdd { if at == nil { at = new(VisualShaderNodeMultiplyAdd) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeMultiplyAdd) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeMultiplyAdd) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeMultiplyAdd) class() string { return "VisualShaderNodeMultiplyAdd\000" }

func (gdClass VisualShaderNodeMultiplyAdd) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeMultiplyAdd [2]cMethodBind
func (gdClass VisualShaderNodeMultiplyAdd) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeMultiplyAdd) SetOpType(atype VisualShaderNodeMultiplyAddOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeMultiplyAdd[0], &atype) }
func (gdClass VisualShaderNodeMultiplyAdd) GetOpType() VisualShaderNodeMultiplyAddOpType { return methodCall[VisualShaderNodeMultiplyAddOpType](gdClass.obj.get(), methodVisualShaderNodeMultiplyAdd[1]) }

type VisualShaderNodeOuterProduct struct{self *VisualShaderNodeOuterProduct; obj safeObject }
func NewVisualShaderNodeOuterProduct(ctx Context, at *VisualShaderNodeOuterProduct) VisualShaderNodeOuterProduct { if at == nil { at = new(VisualShaderNodeOuterProduct) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeOuterProduct) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeOuterProduct) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeOuterProduct) class() string { return "VisualShaderNodeOuterProduct\000" }

func (gdClass VisualShaderNodeOuterProduct) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeOuterProduct) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeOutput struct{self *VisualShaderNodeOutput; obj safeObject }
func NewVisualShaderNodeOutput(ctx Context, at *VisualShaderNodeOutput) VisualShaderNodeOutput { if at == nil { at = new(VisualShaderNodeOutput) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeOutput) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeOutput) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeOutput) class() string { return "VisualShaderNodeOutput\000" }

func (gdClass VisualShaderNodeOutput) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeOutput) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeParticleAcceleratorMode int64

const (
	VisualShaderNodeParticleAcceleratorModeLinear VisualShaderNodeParticleAcceleratorMode = 0
	VisualShaderNodeParticleAcceleratorModeRadial VisualShaderNodeParticleAcceleratorMode = 1
	VisualShaderNodeParticleAcceleratorModeTangential VisualShaderNodeParticleAcceleratorMode = 2
	VisualShaderNodeParticleAcceleratorModeMax VisualShaderNodeParticleAcceleratorMode = 3
)

type VisualShaderNodeParticleAccelerator struct{self *VisualShaderNodeParticleAccelerator; obj safeObject }
func NewVisualShaderNodeParticleAccelerator(ctx Context, at *VisualShaderNodeParticleAccelerator) VisualShaderNodeParticleAccelerator { if at == nil { at = new(VisualShaderNodeParticleAccelerator) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleAccelerator) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleAccelerator) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleAccelerator) class() string { return "VisualShaderNodeParticleAccelerator\000" }

func (gdClass VisualShaderNodeParticleAccelerator) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeParticleAccelerator [2]cMethodBind
func (gdClass VisualShaderNodeParticleAccelerator) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleAccelerator) SetMode(mode VisualShaderNodeParticleAcceleratorMode)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleAccelerator[0], &mode) }
func (gdClass VisualShaderNodeParticleAccelerator) GetMode() VisualShaderNodeParticleAcceleratorMode { return methodCall[VisualShaderNodeParticleAcceleratorMode](gdClass.obj.get(), methodVisualShaderNodeParticleAccelerator[1]) }

type VisualShaderNodeParticleBoxEmitter struct{self *VisualShaderNodeParticleBoxEmitter; obj safeObject }
func NewVisualShaderNodeParticleBoxEmitter(ctx Context, at *VisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleBoxEmitter { if at == nil { at = new(VisualShaderNodeParticleBoxEmitter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleBoxEmitter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleBoxEmitter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleBoxEmitter) class() string { return "VisualShaderNodeParticleBoxEmitter\000" }

func (gdClass VisualShaderNodeParticleBoxEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter{obj:gdClass.obj} }

func (gdClass VisualShaderNodeParticleBoxEmitter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeParticleEmitter().virtual(rtype, name)
}

type VisualShaderNodeParticleConeVelocity struct{self *VisualShaderNodeParticleConeVelocity; obj safeObject }
func NewVisualShaderNodeParticleConeVelocity(ctx Context, at *VisualShaderNodeParticleConeVelocity) VisualShaderNodeParticleConeVelocity { if at == nil { at = new(VisualShaderNodeParticleConeVelocity) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleConeVelocity) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleConeVelocity) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleConeVelocity) class() string { return "VisualShaderNodeParticleConeVelocity\000" }

func (gdClass VisualShaderNodeParticleConeVelocity) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeParticleConeVelocity) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeParticleEmitEmitFlags int64

const (
	VisualShaderNodeParticleEmitEmitFlagPosition VisualShaderNodeParticleEmitEmitFlags = 1
	VisualShaderNodeParticleEmitEmitFlagRotScale VisualShaderNodeParticleEmitEmitFlags = 2
	VisualShaderNodeParticleEmitEmitFlagVelocity VisualShaderNodeParticleEmitEmitFlags = 4
	VisualShaderNodeParticleEmitEmitFlagColor VisualShaderNodeParticleEmitEmitFlags = 8
	VisualShaderNodeParticleEmitEmitFlagCustom VisualShaderNodeParticleEmitEmitFlags = 16
)

type VisualShaderNodeParticleEmit struct{self *VisualShaderNodeParticleEmit; obj safeObject }
func NewVisualShaderNodeParticleEmit(ctx Context, at *VisualShaderNodeParticleEmit) VisualShaderNodeParticleEmit { if at == nil { at = new(VisualShaderNodeParticleEmit) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleEmit) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleEmit) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleEmit) class() string { return "VisualShaderNodeParticleEmit\000" }

func (gdClass VisualShaderNodeParticleEmit) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeParticleEmit [2]cMethodBind
func (gdClass VisualShaderNodeParticleEmit) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleEmit) SetFlags(flags VisualShaderNodeParticleEmitEmitFlags)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleEmit[0], &flags) }
func (gdClass VisualShaderNodeParticleEmit) GetFlags() VisualShaderNodeParticleEmitEmitFlags { return methodCall[VisualShaderNodeParticleEmitEmitFlags](gdClass.obj.get(), methodVisualShaderNodeParticleEmit[1]) }

type VisualShaderNodeParticleEmitter struct{self *VisualShaderNodeParticleEmitter; obj safeObject }
func NewVisualShaderNodeParticleEmitter(ctx Context, at *VisualShaderNodeParticleEmitter) VisualShaderNodeParticleEmitter { if at == nil { at = new(VisualShaderNodeParticleEmitter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleEmitter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleEmitter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleEmitter) class() string { return "VisualShaderNodeParticleEmitter\000" }

func (gdClass VisualShaderNodeParticleEmitter) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeParticleEmitter [2]cMethodBind
func (gdClass VisualShaderNodeParticleEmitter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleEmitter) SetMode2d(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleEmitter[0], &enabled) }
func (gdClass VisualShaderNodeParticleEmitter) IsMode2d() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeParticleEmitter[1]) }

type VisualShaderNodeParticleMeshEmitter struct{self *VisualShaderNodeParticleMeshEmitter; obj safeObject }
func NewVisualShaderNodeParticleMeshEmitter(ctx Context, at *VisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleMeshEmitter { if at == nil { at = new(VisualShaderNodeParticleMeshEmitter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleMeshEmitter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleMeshEmitter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleMeshEmitter) class() string { return "VisualShaderNodeParticleMeshEmitter\000" }

func (gdClass VisualShaderNodeParticleMeshEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter{obj:gdClass.obj} }

var methodVisualShaderNodeParticleMeshEmitter [6]cMethodBind
func (gdClass VisualShaderNodeParticleMeshEmitter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeParticleEmitter().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleMeshEmitter) SetMesh(mesh Mesh)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[0], &mesh) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetMesh() Mesh { return methodCall[Mesh](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[1]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetUseAllSurfaces(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[2], &enabled) }
func (gdClass VisualShaderNodeParticleMeshEmitter) IsUseAllSurfaces() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[3]) }
func (gdClass VisualShaderNodeParticleMeshEmitter) SetSurfaceIndex(surface_index int64)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[4], &surface_index) }
func (gdClass VisualShaderNodeParticleMeshEmitter) GetSurfaceIndex() int64 { return methodCall[int64](gdClass.obj.get(), methodVisualShaderNodeParticleMeshEmitter[5]) }

type VisualShaderNodeParticleMultiplyByAxisAngle struct{self *VisualShaderNodeParticleMultiplyByAxisAngle; obj safeObject }
func NewVisualShaderNodeParticleMultiplyByAxisAngle(ctx Context, at *VisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNodeParticleMultiplyByAxisAngle { if at == nil { at = new(VisualShaderNodeParticleMultiplyByAxisAngle) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleMultiplyByAxisAngle) class() string { return "VisualShaderNodeParticleMultiplyByAxisAngle\000" }

func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeParticleMultiplyByAxisAngle [2]cMethodBind
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) SetDegreesMode(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleMultiplyByAxisAngle[0], &enabled) }
func (gdClass VisualShaderNodeParticleMultiplyByAxisAngle) IsDegreesMode() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeParticleMultiplyByAxisAngle[1]) }

type VisualShaderNodeParticleOutput struct{self *VisualShaderNodeParticleOutput; obj safeObject }
func NewVisualShaderNodeParticleOutput(ctx Context, at *VisualShaderNodeParticleOutput) VisualShaderNodeParticleOutput { if at == nil { at = new(VisualShaderNodeParticleOutput) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleOutput) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleOutput) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleOutput) class() string { return "VisualShaderNodeParticleOutput\000" }

func (gdClass VisualShaderNodeParticleOutput) VisualShaderNodeOutput() VisualShaderNodeOutput { return VisualShaderNodeOutput{obj:gdClass.obj} }

func (gdClass VisualShaderNodeParticleOutput) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeOutput().virtual(rtype, name)
}

type VisualShaderNodeParticleRandomnessOpType int64

const (
	VisualShaderNodeParticleRandomnessOpTypeScalar VisualShaderNodeParticleRandomnessOpType = 0
	VisualShaderNodeParticleRandomnessOpTypeVector2d VisualShaderNodeParticleRandomnessOpType = 1
	VisualShaderNodeParticleRandomnessOpTypeVector3d VisualShaderNodeParticleRandomnessOpType = 2
	VisualShaderNodeParticleRandomnessOpTypeMax VisualShaderNodeParticleRandomnessOpType = 3
)

type VisualShaderNodeParticleRandomness struct{self *VisualShaderNodeParticleRandomness; obj safeObject }
func NewVisualShaderNodeParticleRandomness(ctx Context, at *VisualShaderNodeParticleRandomness) VisualShaderNodeParticleRandomness { if at == nil { at = new(VisualShaderNodeParticleRandomness) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleRandomness) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleRandomness) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleRandomness) class() string { return "VisualShaderNodeParticleRandomness\000" }

func (gdClass VisualShaderNodeParticleRandomness) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeParticleRandomness [2]cMethodBind
func (gdClass VisualShaderNodeParticleRandomness) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeParticleRandomness) SetOpType(atype VisualShaderNodeParticleRandomnessOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeParticleRandomness[0], &atype) }
func (gdClass VisualShaderNodeParticleRandomness) GetOpType() VisualShaderNodeParticleRandomnessOpType { return methodCall[VisualShaderNodeParticleRandomnessOpType](gdClass.obj.get(), methodVisualShaderNodeParticleRandomness[1]) }

type VisualShaderNodeParticleRingEmitter struct{self *VisualShaderNodeParticleRingEmitter; obj safeObject }
func NewVisualShaderNodeParticleRingEmitter(ctx Context, at *VisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleRingEmitter { if at == nil { at = new(VisualShaderNodeParticleRingEmitter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleRingEmitter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleRingEmitter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleRingEmitter) class() string { return "VisualShaderNodeParticleRingEmitter\000" }

func (gdClass VisualShaderNodeParticleRingEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter{obj:gdClass.obj} }

func (gdClass VisualShaderNodeParticleRingEmitter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeParticleEmitter().virtual(rtype, name)
}

type VisualShaderNodeParticleSphereEmitter struct{self *VisualShaderNodeParticleSphereEmitter; obj safeObject }
func NewVisualShaderNodeParticleSphereEmitter(ctx Context, at *VisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleSphereEmitter { if at == nil { at = new(VisualShaderNodeParticleSphereEmitter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeParticleSphereEmitter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeParticleSphereEmitter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeParticleSphereEmitter) class() string { return "VisualShaderNodeParticleSphereEmitter\000" }

func (gdClass VisualShaderNodeParticleSphereEmitter) VisualShaderNodeParticleEmitter() VisualShaderNodeParticleEmitter { return VisualShaderNodeParticleEmitter{obj:gdClass.obj} }

func (gdClass VisualShaderNodeParticleSphereEmitter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeParticleEmitter().virtual(rtype, name)
}

type VisualShaderNodeResizableBase struct{self *VisualShaderNodeResizableBase; obj safeObject }
func NewVisualShaderNodeResizableBase(ctx Context, at *VisualShaderNodeResizableBase) VisualShaderNodeResizableBase { if at == nil { at = new(VisualShaderNodeResizableBase) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeResizableBase) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeResizableBase) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeResizableBase) class() string { return "VisualShaderNodeResizableBase\000" }

func (gdClass VisualShaderNodeResizableBase) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeResizableBase [2]cMethodBind
func (gdClass VisualShaderNodeResizableBase) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeResizableBase) SetSize(size Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeResizableBase[0], &size) }
func (gdClass VisualShaderNodeResizableBase) GetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodVisualShaderNodeResizableBase[1]) }

type VisualShaderNodeSDFRaymarch struct{self *VisualShaderNodeSDFRaymarch; obj safeObject }
func NewVisualShaderNodeSDFRaymarch(ctx Context, at *VisualShaderNodeSDFRaymarch) VisualShaderNodeSDFRaymarch { if at == nil { at = new(VisualShaderNodeSDFRaymarch) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeSDFRaymarch) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeSDFRaymarch) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeSDFRaymarch) class() string { return "VisualShaderNodeSDFRaymarch\000" }

func (gdClass VisualShaderNodeSDFRaymarch) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeSDFRaymarch) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeSDFToScreenUV struct{self *VisualShaderNodeSDFToScreenUV; obj safeObject }
func NewVisualShaderNodeSDFToScreenUV(ctx Context, at *VisualShaderNodeSDFToScreenUV) VisualShaderNodeSDFToScreenUV { if at == nil { at = new(VisualShaderNodeSDFToScreenUV) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeSDFToScreenUV) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeSDFToScreenUV) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeSDFToScreenUV) class() string { return "VisualShaderNodeSDFToScreenUV\000" }

func (gdClass VisualShaderNodeSDFToScreenUV) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeSDFToScreenUV) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeSample3DSource int64

const (
	VisualShaderNodeSample3DSourceTexture VisualShaderNodeSample3DSource = 0
	VisualShaderNodeSample3DSourcePort VisualShaderNodeSample3DSource = 1
	VisualShaderNodeSample3DSourceMax VisualShaderNodeSample3DSource = 2
)

type VisualShaderNodeSample3D struct{self *VisualShaderNodeSample3D; obj safeObject }
func NewVisualShaderNodeSample3D(ctx Context, at *VisualShaderNodeSample3D) VisualShaderNodeSample3D { if at == nil { at = new(VisualShaderNodeSample3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeSample3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeSample3D) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeSample3D) class() string { return "VisualShaderNodeSample3D\000" }

func (gdClass VisualShaderNodeSample3D) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeSample3D [2]cMethodBind
func (gdClass VisualShaderNodeSample3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeSample3D) SetSource(value VisualShaderNodeSample3DSource)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeSample3D[0], &value) }
func (gdClass VisualShaderNodeSample3D) GetSource() VisualShaderNodeSample3DSource { return methodCall[VisualShaderNodeSample3DSource](gdClass.obj.get(), methodVisualShaderNodeSample3D[1]) }

type VisualShaderNodeScreenUVToSDF struct{self *VisualShaderNodeScreenUVToSDF; obj safeObject }
func NewVisualShaderNodeScreenUVToSDF(ctx Context, at *VisualShaderNodeScreenUVToSDF) VisualShaderNodeScreenUVToSDF { if at == nil { at = new(VisualShaderNodeScreenUVToSDF) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeScreenUVToSDF) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeScreenUVToSDF) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeScreenUVToSDF) class() string { return "VisualShaderNodeScreenUVToSDF\000" }

func (gdClass VisualShaderNodeScreenUVToSDF) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeScreenUVToSDF) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeSmoothStepOpType int64

const (
	VisualShaderNodeSmoothStepOpTypeScalar VisualShaderNodeSmoothStepOpType = 0
	VisualShaderNodeSmoothStepOpTypeVector2d VisualShaderNodeSmoothStepOpType = 1
	VisualShaderNodeSmoothStepOpTypeVector2dScalar VisualShaderNodeSmoothStepOpType = 2
	VisualShaderNodeSmoothStepOpTypeVector3d VisualShaderNodeSmoothStepOpType = 3
	VisualShaderNodeSmoothStepOpTypeVector3dScalar VisualShaderNodeSmoothStepOpType = 4
	VisualShaderNodeSmoothStepOpTypeVector4d VisualShaderNodeSmoothStepOpType = 5
	VisualShaderNodeSmoothStepOpTypeVector4dScalar VisualShaderNodeSmoothStepOpType = 6
	VisualShaderNodeSmoothStepOpTypeMax VisualShaderNodeSmoothStepOpType = 7
)

type VisualShaderNodeSmoothStep struct{self *VisualShaderNodeSmoothStep; obj safeObject }
func NewVisualShaderNodeSmoothStep(ctx Context, at *VisualShaderNodeSmoothStep) VisualShaderNodeSmoothStep { if at == nil { at = new(VisualShaderNodeSmoothStep) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeSmoothStep) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeSmoothStep) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeSmoothStep) class() string { return "VisualShaderNodeSmoothStep\000" }

func (gdClass VisualShaderNodeSmoothStep) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeSmoothStep [2]cMethodBind
func (gdClass VisualShaderNodeSmoothStep) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeSmoothStep) SetOpType(op_type VisualShaderNodeSmoothStepOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeSmoothStep[0], &op_type) }
func (gdClass VisualShaderNodeSmoothStep) GetOpType() VisualShaderNodeSmoothStepOpType { return methodCall[VisualShaderNodeSmoothStepOpType](gdClass.obj.get(), methodVisualShaderNodeSmoothStep[1]) }

type VisualShaderNodeStepOpType int64

const (
	VisualShaderNodeStepOpTypeScalar VisualShaderNodeStepOpType = 0
	VisualShaderNodeStepOpTypeVector2d VisualShaderNodeStepOpType = 1
	VisualShaderNodeStepOpTypeVector2dScalar VisualShaderNodeStepOpType = 2
	VisualShaderNodeStepOpTypeVector3d VisualShaderNodeStepOpType = 3
	VisualShaderNodeStepOpTypeVector3dScalar VisualShaderNodeStepOpType = 4
	VisualShaderNodeStepOpTypeVector4d VisualShaderNodeStepOpType = 5
	VisualShaderNodeStepOpTypeVector4dScalar VisualShaderNodeStepOpType = 6
	VisualShaderNodeStepOpTypeMax VisualShaderNodeStepOpType = 7
)

type VisualShaderNodeStep struct{self *VisualShaderNodeStep; obj safeObject }
func NewVisualShaderNodeStep(ctx Context, at *VisualShaderNodeStep) VisualShaderNodeStep { if at == nil { at = new(VisualShaderNodeStep) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeStep) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeStep) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeStep) class() string { return "VisualShaderNodeStep\000" }

func (gdClass VisualShaderNodeStep) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeStep [2]cMethodBind
func (gdClass VisualShaderNodeStep) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeStep) SetOpType(op_type VisualShaderNodeStepOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeStep[0], &op_type) }
func (gdClass VisualShaderNodeStep) GetOpType() VisualShaderNodeStepOpType { return methodCall[VisualShaderNodeStepOpType](gdClass.obj.get(), methodVisualShaderNodeStep[1]) }

type VisualShaderNodeSwitchOpType int64

const (
	VisualShaderNodeSwitchOpTypeFloat VisualShaderNodeSwitchOpType = 0
	VisualShaderNodeSwitchOpTypeInt VisualShaderNodeSwitchOpType = 1
	VisualShaderNodeSwitchOpTypeVector2d VisualShaderNodeSwitchOpType = 2
	VisualShaderNodeSwitchOpTypeVector3d VisualShaderNodeSwitchOpType = 3
	VisualShaderNodeSwitchOpTypeVector4d VisualShaderNodeSwitchOpType = 4
	VisualShaderNodeSwitchOpTypeBoolean VisualShaderNodeSwitchOpType = 5
	VisualShaderNodeSwitchOpTypeTransform VisualShaderNodeSwitchOpType = 6
	VisualShaderNodeSwitchOpTypeMax VisualShaderNodeSwitchOpType = 7
)

type VisualShaderNodeSwitch struct{self *VisualShaderNodeSwitch; obj safeObject }
func NewVisualShaderNodeSwitch(ctx Context, at *VisualShaderNodeSwitch) VisualShaderNodeSwitch { if at == nil { at = new(VisualShaderNodeSwitch) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeSwitch) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeSwitch) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeSwitch) class() string { return "VisualShaderNodeSwitch\000" }

func (gdClass VisualShaderNodeSwitch) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeSwitch [2]cMethodBind
func (gdClass VisualShaderNodeSwitch) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeSwitch) SetOpType(atype VisualShaderNodeSwitchOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeSwitch[0], &atype) }
func (gdClass VisualShaderNodeSwitch) GetOpType() VisualShaderNodeSwitchOpType { return methodCall[VisualShaderNodeSwitchOpType](gdClass.obj.get(), methodVisualShaderNodeSwitch[1]) }

type VisualShaderNodeTextureSource int64

const (
	VisualShaderNodeTextureSourceTexture VisualShaderNodeTextureSource = 0
	VisualShaderNodeTextureSourceScreen VisualShaderNodeTextureSource = 1
	VisualShaderNodeTextureSource2dTexture VisualShaderNodeTextureSource = 2
	VisualShaderNodeTextureSource2dNormal VisualShaderNodeTextureSource = 3
	VisualShaderNodeTextureSourceDepth VisualShaderNodeTextureSource = 4
	VisualShaderNodeTextureSourcePort VisualShaderNodeTextureSource = 5
	VisualShaderNodeTextureSourceMax VisualShaderNodeTextureSource = 6
)

type VisualShaderNodeTextureTextureType int64

const (
	VisualShaderNodeTextureTypeData VisualShaderNodeTextureTextureType = 0
	VisualShaderNodeTextureTypeColor VisualShaderNodeTextureTextureType = 1
	VisualShaderNodeTextureTypeNormalMap VisualShaderNodeTextureTextureType = 2
	VisualShaderNodeTextureTypeMax VisualShaderNodeTextureTextureType = 3
)

type VisualShaderNodeTexture struct{self *VisualShaderNodeTexture; obj safeObject }
func NewVisualShaderNodeTexture(ctx Context, at *VisualShaderNodeTexture) VisualShaderNodeTexture { if at == nil { at = new(VisualShaderNodeTexture) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTexture) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTexture) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTexture) class() string { return "VisualShaderNodeTexture\000" }

func (gdClass VisualShaderNodeTexture) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeTexture [6]cMethodBind
func (gdClass VisualShaderNodeTexture) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTexture) SetSource(value VisualShaderNodeTextureSource)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTexture[0], &value) }
func (gdClass VisualShaderNodeTexture) GetSource() VisualShaderNodeTextureSource { return methodCall[VisualShaderNodeTextureSource](gdClass.obj.get(), methodVisualShaderNodeTexture[1]) }
func (gdClass VisualShaderNodeTexture) SetTexture(value Texture2D)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTexture[2], &value) }
func (gdClass VisualShaderNodeTexture) GetTexture() Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodVisualShaderNodeTexture[3]) }
func (gdClass VisualShaderNodeTexture) SetTextureType(value VisualShaderNodeTextureTextureType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTexture[4], &value) }
func (gdClass VisualShaderNodeTexture) GetTextureType() VisualShaderNodeTextureTextureType { return methodCall[VisualShaderNodeTextureTextureType](gdClass.obj.get(), methodVisualShaderNodeTexture[5]) }

type VisualShaderNodeTexture2DArray struct{self *VisualShaderNodeTexture2DArray; obj safeObject }
func NewVisualShaderNodeTexture2DArray(ctx Context, at *VisualShaderNodeTexture2DArray) VisualShaderNodeTexture2DArray { if at == nil { at = new(VisualShaderNodeTexture2DArray) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTexture2DArray) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTexture2DArray) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTexture2DArray) class() string { return "VisualShaderNodeTexture2DArray\000" }

func (gdClass VisualShaderNodeTexture2DArray) VisualShaderNodeSample3D() VisualShaderNodeSample3D { return VisualShaderNodeSample3D{obj:gdClass.obj} }

var methodVisualShaderNodeTexture2DArray [2]cMethodBind
func (gdClass VisualShaderNodeTexture2DArray) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeSample3D().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTexture2DArray) SetTextureArray(value Texture2DArray)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTexture2DArray[0], &value) }
func (gdClass VisualShaderNodeTexture2DArray) GetTextureArray() Texture2DArray { return methodCall[Texture2DArray](gdClass.obj.get(), methodVisualShaderNodeTexture2DArray[1]) }

type VisualShaderNodeTexture2DArrayUniform struct{self *VisualShaderNodeTexture2DArrayUniform; obj safeObject }
func NewVisualShaderNodeTexture2DArrayUniform(ctx Context, at *VisualShaderNodeTexture2DArrayUniform) VisualShaderNodeTexture2DArrayUniform { if at == nil { at = new(VisualShaderNodeTexture2DArrayUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTexture2DArrayUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTexture2DArrayUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTexture2DArrayUniform) class() string { return "VisualShaderNodeTexture2DArrayUniform\000" }

func (gdClass VisualShaderNodeTexture2DArrayUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTexture2DArrayUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeTextureUniform().virtual(rtype, name)
}

type VisualShaderNodeTexture3D struct{self *VisualShaderNodeTexture3D; obj safeObject }
func NewVisualShaderNodeTexture3D(ctx Context, at *VisualShaderNodeTexture3D) VisualShaderNodeTexture3D { if at == nil { at = new(VisualShaderNodeTexture3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTexture3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTexture3D) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTexture3D) class() string { return "VisualShaderNodeTexture3D\000" }

func (gdClass VisualShaderNodeTexture3D) VisualShaderNodeSample3D() VisualShaderNodeSample3D { return VisualShaderNodeSample3D{obj:gdClass.obj} }

var methodVisualShaderNodeTexture3D [2]cMethodBind
func (gdClass VisualShaderNodeTexture3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeSample3D().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTexture3D) SetTexture(value Texture3D)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTexture3D[0], &value) }
func (gdClass VisualShaderNodeTexture3D) GetTexture() Texture3D { return methodCall[Texture3D](gdClass.obj.get(), methodVisualShaderNodeTexture3D[1]) }

type VisualShaderNodeTexture3DUniform struct{self *VisualShaderNodeTexture3DUniform; obj safeObject }
func NewVisualShaderNodeTexture3DUniform(ctx Context, at *VisualShaderNodeTexture3DUniform) VisualShaderNodeTexture3DUniform { if at == nil { at = new(VisualShaderNodeTexture3DUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTexture3DUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTexture3DUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTexture3DUniform) class() string { return "VisualShaderNodeTexture3DUniform\000" }

func (gdClass VisualShaderNodeTexture3DUniform) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTexture3DUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeTextureUniform().virtual(rtype, name)
}

type VisualShaderNodeTextureSDF struct{self *VisualShaderNodeTextureSDF; obj safeObject }
func NewVisualShaderNodeTextureSDF(ctx Context, at *VisualShaderNodeTextureSDF) VisualShaderNodeTextureSDF { if at == nil { at = new(VisualShaderNodeTextureSDF) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTextureSDF) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTextureSDF) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTextureSDF) class() string { return "VisualShaderNodeTextureSDF\000" }

func (gdClass VisualShaderNodeTextureSDF) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTextureSDF) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeTextureSDFNormal struct{self *VisualShaderNodeTextureSDFNormal; obj safeObject }
func NewVisualShaderNodeTextureSDFNormal(ctx Context, at *VisualShaderNodeTextureSDFNormal) VisualShaderNodeTextureSDFNormal { if at == nil { at = new(VisualShaderNodeTextureSDFNormal) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTextureSDFNormal) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTextureSDFNormal) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTextureSDFNormal) class() string { return "VisualShaderNodeTextureSDFNormal\000" }

func (gdClass VisualShaderNodeTextureSDFNormal) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTextureSDFNormal) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeTextureUniformTextureType int64

const (
	VisualShaderNodeTextureUniformTypeData VisualShaderNodeTextureUniformTextureType = 0
	VisualShaderNodeTextureUniformTypeColor VisualShaderNodeTextureUniformTextureType = 1
	VisualShaderNodeTextureUniformTypeNormalMap VisualShaderNodeTextureUniformTextureType = 2
	VisualShaderNodeTextureUniformTypeAnisotropy VisualShaderNodeTextureUniformTextureType = 3
	VisualShaderNodeTextureUniformTypeMax VisualShaderNodeTextureUniformTextureType = 4
)

type VisualShaderNodeTextureUniformColorDefault int64

const (
	VisualShaderNodeTextureUniformColorDefaultWhite VisualShaderNodeTextureUniformColorDefault = 0
	VisualShaderNodeTextureUniformColorDefaultBlack VisualShaderNodeTextureUniformColorDefault = 1
	VisualShaderNodeTextureUniformColorDefaultTransparent VisualShaderNodeTextureUniformColorDefault = 2
	VisualShaderNodeTextureUniformColorDefaultMax VisualShaderNodeTextureUniformColorDefault = 3
)

type VisualShaderNodeTextureUniformTextureFilter int64

const (
	VisualShaderNodeTextureUniformFilterDefault VisualShaderNodeTextureUniformTextureFilter = 0
	VisualShaderNodeTextureUniformFilterNearest VisualShaderNodeTextureUniformTextureFilter = 1
	VisualShaderNodeTextureUniformFilterLinear VisualShaderNodeTextureUniformTextureFilter = 2
	VisualShaderNodeTextureUniformFilterNearestMipmap VisualShaderNodeTextureUniformTextureFilter = 3
	VisualShaderNodeTextureUniformFilterLinearMipmap VisualShaderNodeTextureUniformTextureFilter = 4
	VisualShaderNodeTextureUniformFilterNearestMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 5
	VisualShaderNodeTextureUniformFilterLinearMipmapAnisotropic VisualShaderNodeTextureUniformTextureFilter = 6
	VisualShaderNodeTextureUniformFilterMax VisualShaderNodeTextureUniformTextureFilter = 7
)

type VisualShaderNodeTextureUniformTextureRepeat int64

const (
	VisualShaderNodeTextureUniformRepeatDefault VisualShaderNodeTextureUniformTextureRepeat = 0
	VisualShaderNodeTextureUniformRepeatEnabled VisualShaderNodeTextureUniformTextureRepeat = 1
	VisualShaderNodeTextureUniformRepeatDisabled VisualShaderNodeTextureUniformTextureRepeat = 2
	VisualShaderNodeTextureUniformRepeatMax VisualShaderNodeTextureUniformTextureRepeat = 3
)

type VisualShaderNodeTextureUniform struct{self *VisualShaderNodeTextureUniform; obj safeObject }
func NewVisualShaderNodeTextureUniform(ctx Context, at *VisualShaderNodeTextureUniform) VisualShaderNodeTextureUniform { if at == nil { at = new(VisualShaderNodeTextureUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTextureUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTextureUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTextureUniform) class() string { return "VisualShaderNodeTextureUniform\000" }

func (gdClass VisualShaderNodeTextureUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeTextureUniform [8]cMethodBind
func (gdClass VisualShaderNodeTextureUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTextureUniform) SetTextureType(atype VisualShaderNodeTextureUniformTextureType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[0], &atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureType() VisualShaderNodeTextureUniformTextureType { return methodCall[VisualShaderNodeTextureUniformTextureType](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[1]) }
func (gdClass VisualShaderNodeTextureUniform) SetColorDefault(atype VisualShaderNodeTextureUniformColorDefault)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[2], &atype) }
func (gdClass VisualShaderNodeTextureUniform) GetColorDefault() VisualShaderNodeTextureUniformColorDefault { return methodCall[VisualShaderNodeTextureUniformColorDefault](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[3]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureFilter(filter VisualShaderNodeTextureUniformTextureFilter)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[4], &filter) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureFilter() VisualShaderNodeTextureUniformTextureFilter { return methodCall[VisualShaderNodeTextureUniformTextureFilter](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[5]) }
func (gdClass VisualShaderNodeTextureUniform) SetTextureRepeat(atype VisualShaderNodeTextureUniformTextureRepeat)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[6], &atype) }
func (gdClass VisualShaderNodeTextureUniform) GetTextureRepeat() VisualShaderNodeTextureUniformTextureRepeat { return methodCall[VisualShaderNodeTextureUniformTextureRepeat](gdClass.obj.get(), methodVisualShaderNodeTextureUniform[7]) }

type VisualShaderNodeTextureUniformTriplanar struct{self *VisualShaderNodeTextureUniformTriplanar; obj safeObject }
func NewVisualShaderNodeTextureUniformTriplanar(ctx Context, at *VisualShaderNodeTextureUniformTriplanar) VisualShaderNodeTextureUniformTriplanar { if at == nil { at = new(VisualShaderNodeTextureUniformTriplanar) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTextureUniformTriplanar) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTextureUniformTriplanar) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTextureUniformTriplanar) class() string { return "VisualShaderNodeTextureUniformTriplanar\000" }

func (gdClass VisualShaderNodeTextureUniformTriplanar) VisualShaderNodeTextureUniform() VisualShaderNodeTextureUniform { return VisualShaderNodeTextureUniform{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTextureUniformTriplanar) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeTextureUniform().virtual(rtype, name)
}

type VisualShaderNodeTransformCompose struct{self *VisualShaderNodeTransformCompose; obj safeObject }
func NewVisualShaderNodeTransformCompose(ctx Context, at *VisualShaderNodeTransformCompose) VisualShaderNodeTransformCompose { if at == nil { at = new(VisualShaderNodeTransformCompose) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformCompose) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformCompose) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformCompose) class() string { return "VisualShaderNodeTransformCompose\000" }

func (gdClass VisualShaderNodeTransformCompose) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTransformCompose) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeTransformConstant struct{self *VisualShaderNodeTransformConstant; obj safeObject }
func NewVisualShaderNodeTransformConstant(ctx Context, at *VisualShaderNodeTransformConstant) VisualShaderNodeTransformConstant { if at == nil { at = new(VisualShaderNodeTransformConstant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformConstant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformConstant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformConstant) class() string { return "VisualShaderNodeTransformConstant\000" }

func (gdClass VisualShaderNodeTransformConstant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeTransformConstant [2]cMethodBind
func (gdClass VisualShaderNodeTransformConstant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTransformConstant) SetConstant(constant Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformConstant[0], &constant) }
func (gdClass VisualShaderNodeTransformConstant) GetConstant() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodVisualShaderNodeTransformConstant[1]) }

type VisualShaderNodeTransformDecompose struct{self *VisualShaderNodeTransformDecompose; obj safeObject }
func NewVisualShaderNodeTransformDecompose(ctx Context, at *VisualShaderNodeTransformDecompose) VisualShaderNodeTransformDecompose { if at == nil { at = new(VisualShaderNodeTransformDecompose) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformDecompose) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformDecompose) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformDecompose) class() string { return "VisualShaderNodeTransformDecompose\000" }

func (gdClass VisualShaderNodeTransformDecompose) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

func (gdClass VisualShaderNodeTransformDecompose) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}

type VisualShaderNodeTransformFuncFunction int64

const (
	VisualShaderNodeTransformFuncFuncInverse VisualShaderNodeTransformFuncFunction = 0
	VisualShaderNodeTransformFuncFuncTranspose VisualShaderNodeTransformFuncFunction = 1
	VisualShaderNodeTransformFuncFuncMax VisualShaderNodeTransformFuncFunction = 2
)

type VisualShaderNodeTransformFunc struct{self *VisualShaderNodeTransformFunc; obj safeObject }
func NewVisualShaderNodeTransformFunc(ctx Context, at *VisualShaderNodeTransformFunc) VisualShaderNodeTransformFunc { if at == nil { at = new(VisualShaderNodeTransformFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformFunc) class() string { return "VisualShaderNodeTransformFunc\000" }

func (gdClass VisualShaderNodeTransformFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeTransformFunc [2]cMethodBind
func (gdClass VisualShaderNodeTransformFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTransformFunc) SetFunction(fn VisualShaderNodeTransformFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformFunc[0], &fn) }
func (gdClass VisualShaderNodeTransformFunc) GetFunction() VisualShaderNodeTransformFuncFunction { return methodCall[VisualShaderNodeTransformFuncFunction](gdClass.obj.get(), methodVisualShaderNodeTransformFunc[1]) }

type VisualShaderNodeTransformOpOperator int64

const (
	VisualShaderNodeTransformOpOpAxb VisualShaderNodeTransformOpOperator = 0
	VisualShaderNodeTransformOpOpBxa VisualShaderNodeTransformOpOperator = 1
	VisualShaderNodeTransformOpOpAxbComp VisualShaderNodeTransformOpOperator = 2
	VisualShaderNodeTransformOpOpBxaComp VisualShaderNodeTransformOpOperator = 3
	VisualShaderNodeTransformOpOpAdd VisualShaderNodeTransformOpOperator = 4
	VisualShaderNodeTransformOpOpAMinusB VisualShaderNodeTransformOpOperator = 5
	VisualShaderNodeTransformOpOpBMinusA VisualShaderNodeTransformOpOperator = 6
	VisualShaderNodeTransformOpOpADivB VisualShaderNodeTransformOpOperator = 7
	VisualShaderNodeTransformOpOpBDivA VisualShaderNodeTransformOpOperator = 8
	VisualShaderNodeTransformOpOpMax VisualShaderNodeTransformOpOperator = 9
)

type VisualShaderNodeTransformOp struct{self *VisualShaderNodeTransformOp; obj safeObject }
func NewVisualShaderNodeTransformOp(ctx Context, at *VisualShaderNodeTransformOp) VisualShaderNodeTransformOp { if at == nil { at = new(VisualShaderNodeTransformOp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformOp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformOp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformOp) class() string { return "VisualShaderNodeTransformOp\000" }

func (gdClass VisualShaderNodeTransformOp) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeTransformOp [2]cMethodBind
func (gdClass VisualShaderNodeTransformOp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTransformOp) SetOperator(op VisualShaderNodeTransformOpOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformOp[0], &op) }
func (gdClass VisualShaderNodeTransformOp) GetOperator() VisualShaderNodeTransformOpOperator { return methodCall[VisualShaderNodeTransformOpOperator](gdClass.obj.get(), methodVisualShaderNodeTransformOp[1]) }

type VisualShaderNodeTransformUniform struct{self *VisualShaderNodeTransformUniform; obj safeObject }
func NewVisualShaderNodeTransformUniform(ctx Context, at *VisualShaderNodeTransformUniform) VisualShaderNodeTransformUniform { if at == nil { at = new(VisualShaderNodeTransformUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformUniform) class() string { return "VisualShaderNodeTransformUniform\000" }

func (gdClass VisualShaderNodeTransformUniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeTransformUniform [4]cMethodBind
func (gdClass VisualShaderNodeTransformUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformUniform[0], &enabled) }
func (gdClass VisualShaderNodeTransformUniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeTransformUniform[1]) }
func (gdClass VisualShaderNodeTransformUniform) SetDefaultValue(value Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformUniform[2], &value) }
func (gdClass VisualShaderNodeTransformUniform) GetDefaultValue() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodVisualShaderNodeTransformUniform[3]) }

type VisualShaderNodeTransformVecMultOperator int64

const (
	VisualShaderNodeTransformVecMultOpAxb VisualShaderNodeTransformVecMultOperator = 0
	VisualShaderNodeTransformVecMultOpBxa VisualShaderNodeTransformVecMultOperator = 1
	VisualShaderNodeTransformVecMultOp3x3Axb VisualShaderNodeTransformVecMultOperator = 2
	VisualShaderNodeTransformVecMultOp3x3Bxa VisualShaderNodeTransformVecMultOperator = 3
	VisualShaderNodeTransformVecMultOpMax VisualShaderNodeTransformVecMultOperator = 4
)

type VisualShaderNodeTransformVecMult struct{self *VisualShaderNodeTransformVecMult; obj safeObject }
func NewVisualShaderNodeTransformVecMult(ctx Context, at *VisualShaderNodeTransformVecMult) VisualShaderNodeTransformVecMult { if at == nil { at = new(VisualShaderNodeTransformVecMult) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeTransformVecMult) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeTransformVecMult) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeTransformVecMult) class() string { return "VisualShaderNodeTransformVecMult\000" }

func (gdClass VisualShaderNodeTransformVecMult) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeTransformVecMult [2]cMethodBind
func (gdClass VisualShaderNodeTransformVecMult) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeTransformVecMult) SetOperator(op VisualShaderNodeTransformVecMultOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeTransformVecMult[0], &op) }
func (gdClass VisualShaderNodeTransformVecMult) GetOperator() VisualShaderNodeTransformVecMultOperator { return methodCall[VisualShaderNodeTransformVecMultOperator](gdClass.obj.get(), methodVisualShaderNodeTransformVecMult[1]) }

type VisualShaderNodeUVFuncFunction int64

const (
	VisualShaderNodeUVFuncFuncPanning VisualShaderNodeUVFuncFunction = 0
	VisualShaderNodeUVFuncFuncScaling VisualShaderNodeUVFuncFunction = 1
	VisualShaderNodeUVFuncFuncMax VisualShaderNodeUVFuncFunction = 2
)

type VisualShaderNodeUVFunc struct{self *VisualShaderNodeUVFunc; obj safeObject }
func NewVisualShaderNodeUVFunc(ctx Context, at *VisualShaderNodeUVFunc) VisualShaderNodeUVFunc { if at == nil { at = new(VisualShaderNodeUVFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeUVFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeUVFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeUVFunc) class() string { return "VisualShaderNodeUVFunc\000" }

func (gdClass VisualShaderNodeUVFunc) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeUVFunc [2]cMethodBind
func (gdClass VisualShaderNodeUVFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeUVFunc) SetFunction(fn VisualShaderNodeUVFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeUVFunc[0], &fn) }
func (gdClass VisualShaderNodeUVFunc) GetFunction() VisualShaderNodeUVFuncFunction { return methodCall[VisualShaderNodeUVFuncFunction](gdClass.obj.get(), methodVisualShaderNodeUVFunc[1]) }

type VisualShaderNodeUniformQualifier int64

const (
	VisualShaderNodeUniformQualNone VisualShaderNodeUniformQualifier = 0
	VisualShaderNodeUniformQualGlobal VisualShaderNodeUniformQualifier = 1
	VisualShaderNodeUniformQualInstance VisualShaderNodeUniformQualifier = 2
	VisualShaderNodeUniformQualMax VisualShaderNodeUniformQualifier = 3
)

type VisualShaderNodeUniform struct{self *VisualShaderNodeUniform; obj safeObject }
func NewVisualShaderNodeUniform(ctx Context, at *VisualShaderNodeUniform) VisualShaderNodeUniform { if at == nil { at = new(VisualShaderNodeUniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeUniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeUniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeUniform) class() string { return "VisualShaderNodeUniform\000" }

func (gdClass VisualShaderNodeUniform) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeUniform [4]cMethodBind
func (gdClass VisualShaderNodeUniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeUniform) SetUniformName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeUniform[0], &name) }
func (gdClass VisualShaderNodeUniform) GetUniformName() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeUniform[1]) }
func (gdClass VisualShaderNodeUniform) SetQualifier(qualifier VisualShaderNodeUniformQualifier)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeUniform[2], &qualifier) }
func (gdClass VisualShaderNodeUniform) GetQualifier() VisualShaderNodeUniformQualifier { return methodCall[VisualShaderNodeUniformQualifier](gdClass.obj.get(), methodVisualShaderNodeUniform[3]) }

type VisualShaderNodeUniformRef struct{self *VisualShaderNodeUniformRef; obj safeObject }
func NewVisualShaderNodeUniformRef(ctx Context, at *VisualShaderNodeUniformRef) VisualShaderNodeUniformRef { if at == nil { at = new(VisualShaderNodeUniformRef) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeUniformRef) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeUniformRef) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeUniformRef) class() string { return "VisualShaderNodeUniformRef\000" }

func (gdClass VisualShaderNodeUniformRef) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeUniformRef [2]cMethodBind
func (gdClass VisualShaderNodeUniformRef) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeUniformRef) SetUniformName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeUniformRef[0], &name) }
func (gdClass VisualShaderNodeUniformRef) GetUniformName() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeUniformRef[1]) }

type VisualShaderNodeVarying struct{self *VisualShaderNodeVarying; obj safeObject }
func NewVisualShaderNodeVarying(ctx Context, at *VisualShaderNodeVarying) VisualShaderNodeVarying { if at == nil { at = new(VisualShaderNodeVarying) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVarying) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVarying) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVarying) class() string { return "VisualShaderNodeVarying\000" }

func (gdClass VisualShaderNodeVarying) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeVarying [4]cMethodBind
func (gdClass VisualShaderNodeVarying) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVarying) SetVaryingName(name string)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVarying[0], &name) }
func (gdClass VisualShaderNodeVarying) GetVaryingName() string { return methodCall[string](gdClass.obj.get(), methodVisualShaderNodeVarying[1]) }
func (gdClass VisualShaderNodeVarying) SetVaryingType(atype VisualShaderVaryingType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVarying[2], &atype) }
func (gdClass VisualShaderNodeVarying) GetVaryingType() VisualShaderVaryingType { return methodCall[VisualShaderVaryingType](gdClass.obj.get(), methodVisualShaderNodeVarying[3]) }

type VisualShaderNodeVaryingGetter struct{self *VisualShaderNodeVaryingGetter; obj safeObject }
func NewVisualShaderNodeVaryingGetter(ctx Context, at *VisualShaderNodeVaryingGetter) VisualShaderNodeVaryingGetter { if at == nil { at = new(VisualShaderNodeVaryingGetter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVaryingGetter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVaryingGetter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVaryingGetter) class() string { return "VisualShaderNodeVaryingGetter\000" }

func (gdClass VisualShaderNodeVaryingGetter) VisualShaderNodeVarying() VisualShaderNodeVarying { return VisualShaderNodeVarying{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVaryingGetter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVarying().virtual(rtype, name)
}

type VisualShaderNodeVaryingSetter struct{self *VisualShaderNodeVaryingSetter; obj safeObject }
func NewVisualShaderNodeVaryingSetter(ctx Context, at *VisualShaderNodeVaryingSetter) VisualShaderNodeVaryingSetter { if at == nil { at = new(VisualShaderNodeVaryingSetter) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVaryingSetter) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVaryingSetter) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVaryingSetter) class() string { return "VisualShaderNodeVaryingSetter\000" }

func (gdClass VisualShaderNodeVaryingSetter) VisualShaderNodeVarying() VisualShaderNodeVarying { return VisualShaderNodeVarying{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVaryingSetter) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVarying().virtual(rtype, name)
}

type VisualShaderNodeVec2Constant struct{self *VisualShaderNodeVec2Constant; obj safeObject }
func NewVisualShaderNodeVec2Constant(ctx Context, at *VisualShaderNodeVec2Constant) VisualShaderNodeVec2Constant { if at == nil { at = new(VisualShaderNodeVec2Constant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec2Constant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec2Constant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec2Constant) class() string { return "VisualShaderNodeVec2Constant\000" }

func (gdClass VisualShaderNodeVec2Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeVec2Constant [2]cMethodBind
func (gdClass VisualShaderNodeVec2Constant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec2Constant) SetConstant(constant Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec2Constant[0], &constant) }
func (gdClass VisualShaderNodeVec2Constant) GetConstant() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodVisualShaderNodeVec2Constant[1]) }

type VisualShaderNodeVec2Uniform struct{self *VisualShaderNodeVec2Uniform; obj safeObject }
func NewVisualShaderNodeVec2Uniform(ctx Context, at *VisualShaderNodeVec2Uniform) VisualShaderNodeVec2Uniform { if at == nil { at = new(VisualShaderNodeVec2Uniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec2Uniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec2Uniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec2Uniform) class() string { return "VisualShaderNodeVec2Uniform\000" }

func (gdClass VisualShaderNodeVec2Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeVec2Uniform [4]cMethodBind
func (gdClass VisualShaderNodeVec2Uniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec2Uniform[0], &enabled) }
func (gdClass VisualShaderNodeVec2Uniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeVec2Uniform[1]) }
func (gdClass VisualShaderNodeVec2Uniform) SetDefaultValue(value Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec2Uniform[2], &value) }
func (gdClass VisualShaderNodeVec2Uniform) GetDefaultValue() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodVisualShaderNodeVec2Uniform[3]) }

type VisualShaderNodeVec3Constant struct{self *VisualShaderNodeVec3Constant; obj safeObject }
func NewVisualShaderNodeVec3Constant(ctx Context, at *VisualShaderNodeVec3Constant) VisualShaderNodeVec3Constant { if at == nil { at = new(VisualShaderNodeVec3Constant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec3Constant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec3Constant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec3Constant) class() string { return "VisualShaderNodeVec3Constant\000" }

func (gdClass VisualShaderNodeVec3Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeVec3Constant [2]cMethodBind
func (gdClass VisualShaderNodeVec3Constant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec3Constant) SetConstant(constant Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec3Constant[0], &constant) }
func (gdClass VisualShaderNodeVec3Constant) GetConstant() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodVisualShaderNodeVec3Constant[1]) }

type VisualShaderNodeVec3Uniform struct{self *VisualShaderNodeVec3Uniform; obj safeObject }
func NewVisualShaderNodeVec3Uniform(ctx Context, at *VisualShaderNodeVec3Uniform) VisualShaderNodeVec3Uniform { if at == nil { at = new(VisualShaderNodeVec3Uniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec3Uniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec3Uniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec3Uniform) class() string { return "VisualShaderNodeVec3Uniform\000" }

func (gdClass VisualShaderNodeVec3Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeVec3Uniform [4]cMethodBind
func (gdClass VisualShaderNodeVec3Uniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec3Uniform[0], &enabled) }
func (gdClass VisualShaderNodeVec3Uniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeVec3Uniform[1]) }
func (gdClass VisualShaderNodeVec3Uniform) SetDefaultValue(value Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec3Uniform[2], &value) }
func (gdClass VisualShaderNodeVec3Uniform) GetDefaultValue() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodVisualShaderNodeVec3Uniform[3]) }

type VisualShaderNodeVec4Constant struct{self *VisualShaderNodeVec4Constant; obj safeObject }
func NewVisualShaderNodeVec4Constant(ctx Context, at *VisualShaderNodeVec4Constant) VisualShaderNodeVec4Constant { if at == nil { at = new(VisualShaderNodeVec4Constant) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec4Constant) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec4Constant) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec4Constant) class() string { return "VisualShaderNodeVec4Constant\000" }

func (gdClass VisualShaderNodeVec4Constant) VisualShaderNodeConstant() VisualShaderNodeConstant { return VisualShaderNodeConstant{obj:gdClass.obj} }

var methodVisualShaderNodeVec4Constant [2]cMethodBind
func (gdClass VisualShaderNodeVec4Constant) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeConstant().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec4Constant) SetConstant(constant Quaternion)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec4Constant[0], &constant) }
func (gdClass VisualShaderNodeVec4Constant) GetConstant() Quaternion { return methodCall[Quaternion](gdClass.obj.get(), methodVisualShaderNodeVec4Constant[1]) }

type VisualShaderNodeVec4Uniform struct{self *VisualShaderNodeVec4Uniform; obj safeObject }
func NewVisualShaderNodeVec4Uniform(ctx Context, at *VisualShaderNodeVec4Uniform) VisualShaderNodeVec4Uniform { if at == nil { at = new(VisualShaderNodeVec4Uniform) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVec4Uniform) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVec4Uniform) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVec4Uniform) class() string { return "VisualShaderNodeVec4Uniform\000" }

func (gdClass VisualShaderNodeVec4Uniform) VisualShaderNodeUniform() VisualShaderNodeUniform { return VisualShaderNodeUniform{obj:gdClass.obj} }

var methodVisualShaderNodeVec4Uniform [4]cMethodBind
func (gdClass VisualShaderNodeVec4Uniform) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeUniform().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValueEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec4Uniform[0], &enabled) }
func (gdClass VisualShaderNodeVec4Uniform) IsDefaultValueEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodVisualShaderNodeVec4Uniform[1]) }
func (gdClass VisualShaderNodeVec4Uniform) SetDefaultValue(value Quaternion)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVec4Uniform[2], &value) }
func (gdClass VisualShaderNodeVec4Uniform) GetDefaultValue() Quaternion { return methodCall[Quaternion](gdClass.obj.get(), methodVisualShaderNodeVec4Uniform[3]) }

type VisualShaderNodeVectorBaseOpType int64

const (
	VisualShaderNodeVectorBaseOpTypeVector2d VisualShaderNodeVectorBaseOpType = 0
	VisualShaderNodeVectorBaseOpTypeVector3d VisualShaderNodeVectorBaseOpType = 1
	VisualShaderNodeVectorBaseOpTypeVector4d VisualShaderNodeVectorBaseOpType = 2
	VisualShaderNodeVectorBaseOpTypeMax VisualShaderNodeVectorBaseOpType = 3
)

type VisualShaderNodeVectorBase struct{self *VisualShaderNodeVectorBase; obj safeObject }
func NewVisualShaderNodeVectorBase(ctx Context, at *VisualShaderNodeVectorBase) VisualShaderNodeVectorBase { if at == nil { at = new(VisualShaderNodeVectorBase) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorBase) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorBase) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorBase) class() string { return "VisualShaderNodeVectorBase\000" }

func (gdClass VisualShaderNodeVectorBase) VisualShaderNode() VisualShaderNode { return VisualShaderNode{obj:gdClass.obj} }

var methodVisualShaderNodeVectorBase [2]cMethodBind
func (gdClass VisualShaderNodeVectorBase) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNode().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVectorBase) SetOpType(atype VisualShaderNodeVectorBaseOpType)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVectorBase[0], &atype) }
func (gdClass VisualShaderNodeVectorBase) GetOpType() VisualShaderNodeVectorBaseOpType { return methodCall[VisualShaderNodeVectorBaseOpType](gdClass.obj.get(), methodVisualShaderNodeVectorBase[1]) }

type VisualShaderNodeVectorCompose struct{self *VisualShaderNodeVectorCompose; obj safeObject }
func NewVisualShaderNodeVectorCompose(ctx Context, at *VisualShaderNodeVectorCompose) VisualShaderNodeVectorCompose { if at == nil { at = new(VisualShaderNodeVectorCompose) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorCompose) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorCompose) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorCompose) class() string { return "VisualShaderNodeVectorCompose\000" }

func (gdClass VisualShaderNodeVectorCompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVectorCompose) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VisualShaderNodeVectorDecompose struct{self *VisualShaderNodeVectorDecompose; obj safeObject }
func NewVisualShaderNodeVectorDecompose(ctx Context, at *VisualShaderNodeVectorDecompose) VisualShaderNodeVectorDecompose { if at == nil { at = new(VisualShaderNodeVectorDecompose) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorDecompose) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorDecompose) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorDecompose) class() string { return "VisualShaderNodeVectorDecompose\000" }

func (gdClass VisualShaderNodeVectorDecompose) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVectorDecompose) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VisualShaderNodeVectorDistance struct{self *VisualShaderNodeVectorDistance; obj safeObject }
func NewVisualShaderNodeVectorDistance(ctx Context, at *VisualShaderNodeVectorDistance) VisualShaderNodeVectorDistance { if at == nil { at = new(VisualShaderNodeVectorDistance) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorDistance) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorDistance) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorDistance) class() string { return "VisualShaderNodeVectorDistance\000" }

func (gdClass VisualShaderNodeVectorDistance) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVectorDistance) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VisualShaderNodeVectorFuncFunction int64

const (
	VisualShaderNodeVectorFuncFuncNormalize VisualShaderNodeVectorFuncFunction = 0
	VisualShaderNodeVectorFuncFuncSaturate VisualShaderNodeVectorFuncFunction = 1
	VisualShaderNodeVectorFuncFuncNegate VisualShaderNodeVectorFuncFunction = 2
	VisualShaderNodeVectorFuncFuncReciprocal VisualShaderNodeVectorFuncFunction = 3
	VisualShaderNodeVectorFuncFuncAbs VisualShaderNodeVectorFuncFunction = 4
	VisualShaderNodeVectorFuncFuncAcos VisualShaderNodeVectorFuncFunction = 5
	VisualShaderNodeVectorFuncFuncAcosh VisualShaderNodeVectorFuncFunction = 6
	VisualShaderNodeVectorFuncFuncAsin VisualShaderNodeVectorFuncFunction = 7
	VisualShaderNodeVectorFuncFuncAsinh VisualShaderNodeVectorFuncFunction = 8
	VisualShaderNodeVectorFuncFuncAtan VisualShaderNodeVectorFuncFunction = 9
	VisualShaderNodeVectorFuncFuncAtanh VisualShaderNodeVectorFuncFunction = 10
	VisualShaderNodeVectorFuncFuncCeil VisualShaderNodeVectorFuncFunction = 11
	VisualShaderNodeVectorFuncFuncCos VisualShaderNodeVectorFuncFunction = 12
	VisualShaderNodeVectorFuncFuncCosh VisualShaderNodeVectorFuncFunction = 13
	VisualShaderNodeVectorFuncFuncDegrees VisualShaderNodeVectorFuncFunction = 14
	VisualShaderNodeVectorFuncFuncExp VisualShaderNodeVectorFuncFunction = 15
	VisualShaderNodeVectorFuncFuncExp2 VisualShaderNodeVectorFuncFunction = 16
	VisualShaderNodeVectorFuncFuncFloor VisualShaderNodeVectorFuncFunction = 17
	VisualShaderNodeVectorFuncFuncFract VisualShaderNodeVectorFuncFunction = 18
	VisualShaderNodeVectorFuncFuncInverseSqrt VisualShaderNodeVectorFuncFunction = 19
	VisualShaderNodeVectorFuncFuncLog VisualShaderNodeVectorFuncFunction = 20
	VisualShaderNodeVectorFuncFuncLog2 VisualShaderNodeVectorFuncFunction = 21
	VisualShaderNodeVectorFuncFuncRadians VisualShaderNodeVectorFuncFunction = 22
	VisualShaderNodeVectorFuncFuncRound VisualShaderNodeVectorFuncFunction = 23
	VisualShaderNodeVectorFuncFuncRoundeven VisualShaderNodeVectorFuncFunction = 24
	VisualShaderNodeVectorFuncFuncSign VisualShaderNodeVectorFuncFunction = 25
	VisualShaderNodeVectorFuncFuncSin VisualShaderNodeVectorFuncFunction = 26
	VisualShaderNodeVectorFuncFuncSinh VisualShaderNodeVectorFuncFunction = 27
	VisualShaderNodeVectorFuncFuncSqrt VisualShaderNodeVectorFuncFunction = 28
	VisualShaderNodeVectorFuncFuncTan VisualShaderNodeVectorFuncFunction = 29
	VisualShaderNodeVectorFuncFuncTanh VisualShaderNodeVectorFuncFunction = 30
	VisualShaderNodeVectorFuncFuncTrunc VisualShaderNodeVectorFuncFunction = 31
	VisualShaderNodeVectorFuncFuncOneminus VisualShaderNodeVectorFuncFunction = 32
	VisualShaderNodeVectorFuncFuncMax VisualShaderNodeVectorFuncFunction = 33
)

type VisualShaderNodeVectorFunc struct{self *VisualShaderNodeVectorFunc; obj safeObject }
func NewVisualShaderNodeVectorFunc(ctx Context, at *VisualShaderNodeVectorFunc) VisualShaderNodeVectorFunc { if at == nil { at = new(VisualShaderNodeVectorFunc) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorFunc) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorFunc) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorFunc) class() string { return "VisualShaderNodeVectorFunc\000" }

func (gdClass VisualShaderNodeVectorFunc) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

var methodVisualShaderNodeVectorFunc [2]cMethodBind
func (gdClass VisualShaderNodeVectorFunc) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVectorFunc) SetFunction(fn VisualShaderNodeVectorFuncFunction)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVectorFunc[0], &fn) }
func (gdClass VisualShaderNodeVectorFunc) GetFunction() VisualShaderNodeVectorFuncFunction { return methodCall[VisualShaderNodeVectorFuncFunction](gdClass.obj.get(), methodVisualShaderNodeVectorFunc[1]) }

type VisualShaderNodeVectorLen struct{self *VisualShaderNodeVectorLen; obj safeObject }
func NewVisualShaderNodeVectorLen(ctx Context, at *VisualShaderNodeVectorLen) VisualShaderNodeVectorLen { if at == nil { at = new(VisualShaderNodeVectorLen) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorLen) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorLen) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorLen) class() string { return "VisualShaderNodeVectorLen\000" }

func (gdClass VisualShaderNodeVectorLen) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVectorLen) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VisualShaderNodeVectorOpOperator int64

const (
	VisualShaderNodeVectorOpOpAdd VisualShaderNodeVectorOpOperator = 0
	VisualShaderNodeVectorOpOpSub VisualShaderNodeVectorOpOperator = 1
	VisualShaderNodeVectorOpOpMul VisualShaderNodeVectorOpOperator = 2
	VisualShaderNodeVectorOpOpDiv VisualShaderNodeVectorOpOperator = 3
	VisualShaderNodeVectorOpOpMod VisualShaderNodeVectorOpOperator = 4
	VisualShaderNodeVectorOpOpPow VisualShaderNodeVectorOpOperator = 5
	VisualShaderNodeVectorOpOpMax VisualShaderNodeVectorOpOperator = 6
	VisualShaderNodeVectorOpOpMin VisualShaderNodeVectorOpOperator = 7
	VisualShaderNodeVectorOpOpCross VisualShaderNodeVectorOpOperator = 8
	VisualShaderNodeVectorOpOpAtan2 VisualShaderNodeVectorOpOperator = 9
	VisualShaderNodeVectorOpOpReflect VisualShaderNodeVectorOpOperator = 10
	VisualShaderNodeVectorOpOpStep VisualShaderNodeVectorOpOperator = 11
	VisualShaderNodeVectorOpOpEnumSize VisualShaderNodeVectorOpOperator = 12
)

type VisualShaderNodeVectorOp struct{self *VisualShaderNodeVectorOp; obj safeObject }
func NewVisualShaderNodeVectorOp(ctx Context, at *VisualShaderNodeVectorOp) VisualShaderNodeVectorOp { if at == nil { at = new(VisualShaderNodeVectorOp) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorOp) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorOp) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorOp) class() string { return "VisualShaderNodeVectorOp\000" }

func (gdClass VisualShaderNodeVectorOp) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

var methodVisualShaderNodeVectorOp [2]cMethodBind
func (gdClass VisualShaderNodeVectorOp) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}
func (gdClass VisualShaderNodeVectorOp) SetOperator(op VisualShaderNodeVectorOpOperator)  { methodCall[struct{}](gdClass.obj.get(), methodVisualShaderNodeVectorOp[0], &op) }
func (gdClass VisualShaderNodeVectorOp) GetOperator() VisualShaderNodeVectorOpOperator { return methodCall[VisualShaderNodeVectorOpOperator](gdClass.obj.get(), methodVisualShaderNodeVectorOp[1]) }

type VisualShaderNodeVectorRefract struct{self *VisualShaderNodeVectorRefract; obj safeObject }
func NewVisualShaderNodeVectorRefract(ctx Context, at *VisualShaderNodeVectorRefract) VisualShaderNodeVectorRefract { if at == nil { at = new(VisualShaderNodeVectorRefract) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VisualShaderNodeVectorRefract) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VisualShaderNodeVectorRefract) owner() cObject { return gdClass.obj.get() }
func (VisualShaderNodeVectorRefract) class() string { return "VisualShaderNodeVectorRefract\000" }

func (gdClass VisualShaderNodeVectorRefract) VisualShaderNodeVectorBase() VisualShaderNodeVectorBase { return VisualShaderNodeVectorBase{obj:gdClass.obj} }

func (gdClass VisualShaderNodeVectorRefract) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualShaderNodeVectorBase().virtual(rtype, name)
}

type VoxelGISubdiv int64

const (
	VoxelGISubdiv64 VoxelGISubdiv = 0
	VoxelGISubdiv128 VoxelGISubdiv = 1
	VoxelGISubdiv256 VoxelGISubdiv = 2
	VoxelGISubdiv512 VoxelGISubdiv = 3
	VoxelGISubdivMax VoxelGISubdiv = 4
)

type VoxelGI struct{self *VoxelGI; obj safeObject }
func NewVoxelGI(ctx Context, at *VoxelGI) VoxelGI { if at == nil { at = new(VoxelGI) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass VoxelGI) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VoxelGI) owner() cObject { return gdClass.obj.get() }
func (VoxelGI) class() string { return "VoxelGI\000" }

func (gdClass VoxelGI) VisualInstance3D() VisualInstance3D { return VisualInstance3D{obj:gdClass.obj} }

var methodVoxelGI [8]cMethodBind
func (gdClass VoxelGI) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.VisualInstance3D().virtual(rtype, name)
}
func (gdClass VoxelGI) SetProbeData(data VoxelGIData)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGI[0], &data) }
func (gdClass VoxelGI) GetProbeData() VoxelGIData { return methodCall[VoxelGIData](gdClass.obj.get(), methodVoxelGI[1]) }
func (gdClass VoxelGI) SetSubdiv(subdiv VoxelGISubdiv)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGI[2], &subdiv) }
func (gdClass VoxelGI) GetSubdiv() VoxelGISubdiv { return methodCall[VoxelGISubdiv](gdClass.obj.get(), methodVoxelGI[3]) }
func (gdClass VoxelGI) SetExtents(extents Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGI[4], &extents) }
func (gdClass VoxelGI) GetExtents() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodVoxelGI[5]) }
func (gdClass VoxelGI) Bake(from_node Node, create_visual_debug bool)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGI[6], &from_node, &create_visual_debug) }
func (gdClass VoxelGI) DebugBake()  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGI[7]) }

type VoxelGIData struct{self *VoxelGIData; obj safeObject }
func NewVoxelGIData(ctx Context, at *VoxelGIData) VoxelGIData { if at == nil { at = new(VoxelGIData) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass VoxelGIData) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass VoxelGIData) owner() cObject { return gdClass.obj.get() }
func (VoxelGIData) class() string { return "VoxelGIData\000" }

func (gdClass VoxelGIData) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodVoxelGIData [21]cMethodBind
func (gdClass VoxelGIData) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass VoxelGIData) Allocate(to_cell_xform Transform3D, aabb AABB, octree_size Vector3, octree_cells []byte, data_cells []byte, distance_field []byte, level_counts []int32)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[0], &to_cell_xform, &aabb, &octree_size, &octree_cells, &data_cells, &distance_field, &level_counts) }
func (gdClass VoxelGIData) GetBounds() AABB { return methodCall[AABB](gdClass.obj.get(), methodVoxelGIData[1]) }
func (gdClass VoxelGIData) GetOctreeSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodVoxelGIData[2]) }
func (gdClass VoxelGIData) GetToCellXform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodVoxelGIData[3]) }
func (gdClass VoxelGIData) GetOctreeCells() []byte { return methodCall[[]byte](gdClass.obj.get(), methodVoxelGIData[4]) }
func (gdClass VoxelGIData) GetDataCells() []byte { return methodCall[[]byte](gdClass.obj.get(), methodVoxelGIData[5]) }
func (gdClass VoxelGIData) GetLevelCounts() []int32 { return methodCall[[]int32](gdClass.obj.get(), methodVoxelGIData[6]) }
func (gdClass VoxelGIData) SetDynamicRange(dynamic_range float64)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[7], &dynamic_range) }
func (gdClass VoxelGIData) GetDynamicRange() float64 { return methodCall[float64](gdClass.obj.get(), methodVoxelGIData[8]) }
func (gdClass VoxelGIData) SetEnergy(energy float64)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[9], &energy) }
func (gdClass VoxelGIData) GetEnergy() float64 { return methodCall[float64](gdClass.obj.get(), methodVoxelGIData[10]) }
func (gdClass VoxelGIData) SetBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[11], &bias) }
func (gdClass VoxelGIData) GetBias() float64 { return methodCall[float64](gdClass.obj.get(), methodVoxelGIData[12]) }
func (gdClass VoxelGIData) SetNormalBias(bias float64)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[13], &bias) }
func (gdClass VoxelGIData) GetNormalBias() float64 { return methodCall[float64](gdClass.obj.get(), methodVoxelGIData[14]) }
func (gdClass VoxelGIData) SetPropagation(propagation float64)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[15], &propagation) }
func (gdClass VoxelGIData) GetPropagation() float64 { return methodCall[float64](gdClass.obj.get(), methodVoxelGIData[16]) }
func (gdClass VoxelGIData) SetInterior(interior bool)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[17], &interior) }
func (gdClass VoxelGIData) IsInterior() bool { return methodCall[bool](gdClass.obj.get(), methodVoxelGIData[18]) }
func (gdClass VoxelGIData) SetUseTwoBounces(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodVoxelGIData[19], &enable) }
func (gdClass VoxelGIData) IsUsingTwoBounces() bool { return methodCall[bool](gdClass.obj.get(), methodVoxelGIData[20]) }

type WeakRef struct{self *WeakRef; obj safeObject }
func NewWeakRef(ctx Context, at *WeakRef) WeakRef { if at == nil { at = new(WeakRef) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WeakRef) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WeakRef) owner() cObject { return gdClass.obj.get() }
func (WeakRef) class() string { return "WeakRef\000" }

func (gdClass WeakRef) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodWeakRef [1]cMethodBind
func (gdClass WeakRef) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass WeakRef) GetRef() any { return methodCall[any](gdClass.obj.get(), methodWeakRef[0]) }

type WebRTCDataChannelWriteMode int64

const (
	WebRTCDataChannelWriteModeText WebRTCDataChannelWriteMode = 0
	WebRTCDataChannelWriteModeBinary WebRTCDataChannelWriteMode = 1
)

type WebRTCDataChannelChannelState int64

const (
	WebRTCDataChannelStateConnecting WebRTCDataChannelChannelState = 0
	WebRTCDataChannelStateOpen WebRTCDataChannelChannelState = 1
	WebRTCDataChannelStateClosing WebRTCDataChannelChannelState = 2
	WebRTCDataChannelStateClosed WebRTCDataChannelChannelState = 3
)

type WebRTCDataChannel struct{self *WebRTCDataChannel; obj safeObject }
func NewWebRTCDataChannel(ctx Context, at *WebRTCDataChannel) WebRTCDataChannel { if at == nil { at = new(WebRTCDataChannel) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebRTCDataChannel) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebRTCDataChannel) owner() cObject { return gdClass.obj.get() }
func (WebRTCDataChannel) class() string { return "WebRTCDataChannel\000" }

func (gdClass WebRTCDataChannel) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodWebRTCDataChannel [14]cMethodBind
func (gdClass WebRTCDataChannel) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass WebRTCDataChannel) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCDataChannel[0]) }
func (gdClass WebRTCDataChannel) Close()  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCDataChannel[1]) }
func (gdClass WebRTCDataChannel) WasStringPacket() bool { return methodCall[bool](gdClass.obj.get(), methodWebRTCDataChannel[2]) }
func (gdClass WebRTCDataChannel) SetWriteMode(write_mode WebRTCDataChannelWriteMode)  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCDataChannel[3], &write_mode) }
func (gdClass WebRTCDataChannel) GetWriteMode() WebRTCDataChannelWriteMode { return methodCall[WebRTCDataChannelWriteMode](gdClass.obj.get(), methodWebRTCDataChannel[4]) }
func (gdClass WebRTCDataChannel) GetReadyState() WebRTCDataChannelChannelState { return methodCall[WebRTCDataChannelChannelState](gdClass.obj.get(), methodWebRTCDataChannel[5]) }
func (gdClass WebRTCDataChannel) GetLabel() string { return methodCall[string](gdClass.obj.get(), methodWebRTCDataChannel[6]) }
func (gdClass WebRTCDataChannel) IsOrdered() bool { return methodCall[bool](gdClass.obj.get(), methodWebRTCDataChannel[7]) }
func (gdClass WebRTCDataChannel) GetId() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCDataChannel[8]) }
func (gdClass WebRTCDataChannel) GetMaxPacketLifeTime() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCDataChannel[9]) }
func (gdClass WebRTCDataChannel) GetMaxRetransmits() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCDataChannel[10]) }
func (gdClass WebRTCDataChannel) GetProtocol() string { return methodCall[string](gdClass.obj.get(), methodWebRTCDataChannel[11]) }
func (gdClass WebRTCDataChannel) IsNegotiated() bool { return methodCall[bool](gdClass.obj.get(), methodWebRTCDataChannel[12]) }
func (gdClass WebRTCDataChannel) GetBufferedAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCDataChannel[13]) }

type WebRTCDataChannelExtension struct{self *WebRTCDataChannelExtension; obj safeObject }
func NewWebRTCDataChannelExtension(ctx Context, at *WebRTCDataChannelExtension) WebRTCDataChannelExtension { if at == nil { at = new(WebRTCDataChannelExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebRTCDataChannelExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebRTCDataChannelExtension) owner() cObject { return gdClass.obj.get() }
func (WebRTCDataChannelExtension) class() string { return "WebRTCDataChannelExtension\000" }

func (gdClass WebRTCDataChannelExtension) WebRTCDataChannel() WebRTCDataChannel { return WebRTCDataChannel{obj:gdClass.obj} }

func (gdClass WebRTCDataChannelExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPacket(r_buffer *[]byte, r_buffer_size *int32) int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPacket`)
		}
		return
	case "_put_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ PutPacket(p_buffer []byte, p_buffer_size int64) int64 }{}).Elem()) {
			return rtype.MethodByName(`PutPacket`)
		}
		return
	case "_get_available_packet_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAvailablePacketCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetAvailablePacketCount`)
		}
		return
	case "_get_max_packet_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMaxPacketSize() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMaxPacketSize`)
		}
		return
	case "_poll":
		if rtype.Implements(reflect.TypeOf([0]interface{ Poll() int64 }{}).Elem()) {
			return rtype.MethodByName(`Poll`)
		}
		return
	case "_close":
		if rtype.Implements(reflect.TypeOf([0]interface{ Close()  }{}).Elem()) {
			return rtype.MethodByName(`Close`)
		}
		return
	case "_set_write_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetWriteMode(p_write_mode int64)  }{}).Elem()) {
			return rtype.MethodByName(`SetWriteMode`)
		}
		return
	case "_get_write_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetWriteMode() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetWriteMode`)
		}
		return
	case "_was_string_packet":
		if rtype.Implements(reflect.TypeOf([0]interface{ WasStringPacket() bool }{}).Elem()) {
			return rtype.MethodByName(`WasStringPacket`)
		}
		return
	case "_get_ready_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetReadyState() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetReadyState`)
		}
		return
	case "_get_label":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetLabel() string }{}).Elem()) {
			return rtype.MethodByName(`GetLabel`)
		}
		return
	case "_is_ordered":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsOrdered() bool }{}).Elem()) {
			return rtype.MethodByName(`IsOrdered`)
		}
		return
	case "_get_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetId() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetId`)
		}
		return
	case "_get_max_packet_life_time":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMaxPacketLifeTime() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMaxPacketLifeTime`)
		}
		return
	case "_get_max_retransmits":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetMaxRetransmits() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetMaxRetransmits`)
		}
		return
	case "_get_protocol":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetProtocol() string }{}).Elem()) {
			return rtype.MethodByName(`GetProtocol`)
		}
		return
	case "_is_negotiated":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsNegotiated() bool }{}).Elem()) {
			return rtype.MethodByName(`IsNegotiated`)
		}
		return
	case "_get_buffered_amount":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetBufferedAmount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetBufferedAmount`)
		}
		return
	}
	return gdClass.WebRTCDataChannel().virtual(rtype, name)
}

type WebRTCMultiplayerPeer struct{self *WebRTCMultiplayerPeer; obj safeObject }
func NewWebRTCMultiplayerPeer(ctx Context, at *WebRTCMultiplayerPeer) WebRTCMultiplayerPeer { if at == nil { at = new(WebRTCMultiplayerPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebRTCMultiplayerPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebRTCMultiplayerPeer) owner() cObject { return gdClass.obj.get() }
func (WebRTCMultiplayerPeer) class() string { return "WebRTCMultiplayerPeer\000" }

func (gdClass WebRTCMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer{obj:gdClass.obj} }

var methodWebRTCMultiplayerPeer [7]cMethodBind
func (gdClass WebRTCMultiplayerPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MultiplayerPeer().virtual(rtype, name)
}
func (gdClass WebRTCMultiplayerPeer) Initialize(peer_id int64, server_compatibility bool, channels_config Array) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCMultiplayerPeer[0], &peer_id, &server_compatibility, &channels_config) }
func (gdClass WebRTCMultiplayerPeer) AddPeer(peer WebRTCPeerConnection, peer_id int64, unreliable_lifetime int64) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCMultiplayerPeer[1], &peer, &peer_id, &unreliable_lifetime) }
func (gdClass WebRTCMultiplayerPeer) RemovePeer(peer_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCMultiplayerPeer[2], &peer_id) }
func (gdClass WebRTCMultiplayerPeer) HasPeer(peer_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodWebRTCMultiplayerPeer[3], &peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeer(peer_id int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodWebRTCMultiplayerPeer[4], &peer_id) }
func (gdClass WebRTCMultiplayerPeer) GetPeers() Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodWebRTCMultiplayerPeer[5]) }
func (gdClass WebRTCMultiplayerPeer) Close()  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCMultiplayerPeer[6]) }

type WebRTCPeerConnectionConnectionState int64

const (
	WebRTCPeerConnectionStateNew WebRTCPeerConnectionConnectionState = 0
	WebRTCPeerConnectionStateConnecting WebRTCPeerConnectionConnectionState = 1
	WebRTCPeerConnectionStateConnected WebRTCPeerConnectionConnectionState = 2
	WebRTCPeerConnectionStateDisconnected WebRTCPeerConnectionConnectionState = 3
	WebRTCPeerConnectionStateFailed WebRTCPeerConnectionConnectionState = 4
	WebRTCPeerConnectionStateClosed WebRTCPeerConnectionConnectionState = 5
)

type WebRTCPeerConnection struct{self *WebRTCPeerConnection; obj safeObject }
func NewWebRTCPeerConnection(ctx Context, at *WebRTCPeerConnection) WebRTCPeerConnection { if at == nil { at = new(WebRTCPeerConnection) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebRTCPeerConnection) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebRTCPeerConnection) owner() cObject { return gdClass.obj.get() }
func (WebRTCPeerConnection) class() string { return "WebRTCPeerConnection\000" }

func (gdClass WebRTCPeerConnection) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodWebRTCPeerConnection [10]cMethodBind
func (gdClass WebRTCPeerConnection) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass WebRTCPeerConnection) SetDefaultExtension(extension_class Name)  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCPeerConnection[0], &extension_class) }
func (gdClass WebRTCPeerConnection) Initialize(configuration Dictionary) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[1], &configuration) }
func (gdClass WebRTCPeerConnection) CreateDataChannel(label string, options Dictionary) WebRTCDataChannel { return methodCall[WebRTCDataChannel](gdClass.obj.get(), methodWebRTCPeerConnection[2], &label, &options) }
func (gdClass WebRTCPeerConnection) CreateOffer() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[3]) }
func (gdClass WebRTCPeerConnection) SetLocalDescription(atype string, sdp string) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[4], &atype, &sdp) }
func (gdClass WebRTCPeerConnection) SetRemoteDescription(atype string, sdp string) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[5], &atype, &sdp) }
func (gdClass WebRTCPeerConnection) AddIceCandidate(media string, index int64, name string) int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[6], &media, &index, &name) }
func (gdClass WebRTCPeerConnection) Poll() int64 { return methodCall[int64](gdClass.obj.get(), methodWebRTCPeerConnection[7]) }
func (gdClass WebRTCPeerConnection) Close()  { methodCall[struct{}](gdClass.obj.get(), methodWebRTCPeerConnection[8]) }
func (gdClass WebRTCPeerConnection) GetConnectionState() WebRTCPeerConnectionConnectionState { return methodCall[WebRTCPeerConnectionConnectionState](gdClass.obj.get(), methodWebRTCPeerConnection[9]) }

type WebRTCPeerConnectionExtension struct{self *WebRTCPeerConnectionExtension; obj safeObject }
func NewWebRTCPeerConnectionExtension(ctx Context, at *WebRTCPeerConnectionExtension) WebRTCPeerConnectionExtension { if at == nil { at = new(WebRTCPeerConnectionExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebRTCPeerConnectionExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebRTCPeerConnectionExtension) owner() cObject { return gdClass.obj.get() }
func (WebRTCPeerConnectionExtension) class() string { return "WebRTCPeerConnectionExtension\000" }

func (gdClass WebRTCPeerConnectionExtension) WebRTCPeerConnection() WebRTCPeerConnection { return WebRTCPeerConnection{obj:gdClass.obj} }

func (gdClass WebRTCPeerConnectionExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_connection_state":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetConnectionState() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetConnectionState`)
		}
		return
	case "_initialize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Initialize(p_config Dictionary) int64 }{}).Elem()) {
			return rtype.MethodByName(`Initialize`)
		}
		return
	case "_create_data_channel":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateDataChannel(p_label string, p_config Dictionary) Object }{}).Elem()) {
			return rtype.MethodByName(`CreateDataChannel`)
		}
		return
	case "_create_offer":
		if rtype.Implements(reflect.TypeOf([0]interface{ CreateOffer() int64 }{}).Elem()) {
			return rtype.MethodByName(`CreateOffer`)
		}
		return
	case "_set_remote_description":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetRemoteDescription(p_type string, p_sdp string) int64 }{}).Elem()) {
			return rtype.MethodByName(`SetRemoteDescription`)
		}
		return
	case "_set_local_description":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetLocalDescription(p_type string, p_sdp string) int64 }{}).Elem()) {
			return rtype.MethodByName(`SetLocalDescription`)
		}
		return
	case "_add_ice_candidate":
		if rtype.Implements(reflect.TypeOf([0]interface{ AddIceCandidate(p_sdp_mid_name string, p_sdp_mline_index int64, p_sdp_name string) int64 }{}).Elem()) {
			return rtype.MethodByName(`AddIceCandidate`)
		}
		return
	case "_poll":
		if rtype.Implements(reflect.TypeOf([0]interface{ Poll() int64 }{}).Elem()) {
			return rtype.MethodByName(`Poll`)
		}
		return
	case "_close":
		if rtype.Implements(reflect.TypeOf([0]interface{ Close()  }{}).Elem()) {
			return rtype.MethodByName(`Close`)
		}
		return
	}
	return gdClass.WebRTCPeerConnection().virtual(rtype, name)
}

type WebSocketClient struct{self *WebSocketClient; obj safeObject }
func NewWebSocketClient(ctx Context, at *WebSocketClient) WebSocketClient { if at == nil { at = new(WebSocketClient) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebSocketClient) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebSocketClient) owner() cObject { return gdClass.obj.get() }
func (WebSocketClient) class() string { return "WebSocketClient\000" }

func (gdClass WebSocketClient) WebSocketMultiplayerPeer() WebSocketMultiplayerPeer { return WebSocketMultiplayerPeer{obj:gdClass.obj} }

var methodWebSocketClient [8]cMethodBind
func (gdClass WebSocketClient) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.WebSocketMultiplayerPeer().virtual(rtype, name)
}
func (gdClass WebSocketClient) ConnectToUrl(url string, protocols []string, gd_mp_api bool, custom_headers []string) int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketClient[0], &url, &protocols, &gd_mp_api, &custom_headers) }
func (gdClass WebSocketClient) DisconnectFromHost(code int64, reason string)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketClient[1], &code, &reason) }
func (gdClass WebSocketClient) GetConnectedHost() string { return methodCall[string](gdClass.obj.get(), methodWebSocketClient[2]) }
func (gdClass WebSocketClient) GetConnectedPort() int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketClient[3]) }
func (gdClass WebSocketClient) SetVerifySslEnabled(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketClient[4], &enabled) }
func (gdClass WebSocketClient) IsVerifySslEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodWebSocketClient[5]) }
func (gdClass WebSocketClient) GetTrustedSslCertificate() X509Certificate { return methodCall[X509Certificate](gdClass.obj.get(), methodWebSocketClient[6]) }
func (gdClass WebSocketClient) SetTrustedSslCertificate(cert X509Certificate)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketClient[7], &cert) }

type WebSocketMultiplayerPeer struct{self *WebSocketMultiplayerPeer; obj safeObject }
func NewWebSocketMultiplayerPeer(ctx Context, at *WebSocketMultiplayerPeer) WebSocketMultiplayerPeer { if at == nil { at = new(WebSocketMultiplayerPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebSocketMultiplayerPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebSocketMultiplayerPeer) owner() cObject { return gdClass.obj.get() }
func (WebSocketMultiplayerPeer) class() string { return "WebSocketMultiplayerPeer\000" }

func (gdClass WebSocketMultiplayerPeer) MultiplayerPeer() MultiplayerPeer { return MultiplayerPeer{obj:gdClass.obj} }

var methodWebSocketMultiplayerPeer [2]cMethodBind
func (gdClass WebSocketMultiplayerPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.MultiplayerPeer().virtual(rtype, name)
}
func (gdClass WebSocketMultiplayerPeer) SetBuffers(input_buffer_size_kb int64, input_max_packets int64, output_buffer_size_kb int64, output_max_packets int64) int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketMultiplayerPeer[0], &input_buffer_size_kb, &input_max_packets, &output_buffer_size_kb, &output_max_packets) }
func (gdClass WebSocketMultiplayerPeer) GetPeer(peer_id int64) WebSocketPeer { return methodCall[WebSocketPeer](gdClass.obj.get(), methodWebSocketMultiplayerPeer[1], &peer_id) }

type WebSocketPeerWriteMode int64

const (
	WebSocketPeerWriteModeText WebSocketPeerWriteMode = 0
	WebSocketPeerWriteModeBinary WebSocketPeerWriteMode = 1
)

type WebSocketPeer struct{self *WebSocketPeer; obj safeObject }
func NewWebSocketPeer(ctx Context, at *WebSocketPeer) WebSocketPeer { if at == nil { at = new(WebSocketPeer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebSocketPeer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebSocketPeer) owner() cObject { return gdClass.obj.get() }
func (WebSocketPeer) class() string { return "WebSocketPeer\000" }

func (gdClass WebSocketPeer) PacketPeer() PacketPeer { return PacketPeer{obj:gdClass.obj} }

var methodWebSocketPeer [9]cMethodBind
func (gdClass WebSocketPeer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.PacketPeer().virtual(rtype, name)
}
func (gdClass WebSocketPeer) GetWriteMode() WebSocketPeerWriteMode { return methodCall[WebSocketPeerWriteMode](gdClass.obj.get(), methodWebSocketPeer[0]) }
func (gdClass WebSocketPeer) SetWriteMode(mode WebSocketPeerWriteMode)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketPeer[1], &mode) }
func (gdClass WebSocketPeer) IsConnectedToHost() bool { return methodCall[bool](gdClass.obj.get(), methodWebSocketPeer[2]) }
func (gdClass WebSocketPeer) WasStringPacket() bool { return methodCall[bool](gdClass.obj.get(), methodWebSocketPeer[3]) }
func (gdClass WebSocketPeer) Close(code int64, reason string)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketPeer[4], &code, &reason) }
func (gdClass WebSocketPeer) GetConnectedHost() string { return methodCall[string](gdClass.obj.get(), methodWebSocketPeer[5]) }
func (gdClass WebSocketPeer) GetConnectedPort() int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketPeer[6]) }
func (gdClass WebSocketPeer) SetNoDelay(enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketPeer[7], &enabled) }
func (gdClass WebSocketPeer) GetCurrentOutboundBufferedAmount() int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketPeer[8]) }

type WebSocketServer struct{self *WebSocketServer; obj safeObject }
func NewWebSocketServer(ctx Context, at *WebSocketServer) WebSocketServer { if at == nil { at = new(WebSocketServer) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebSocketServer) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebSocketServer) owner() cObject { return gdClass.obj.get() }
func (WebSocketServer) class() string { return "WebSocketServer\000" }

func (gdClass WebSocketServer) WebSocketMultiplayerPeer() WebSocketMultiplayerPeer { return WebSocketMultiplayerPeer{obj:gdClass.obj} }

var methodWebSocketServer [18]cMethodBind
func (gdClass WebSocketServer) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.WebSocketMultiplayerPeer().virtual(rtype, name)
}
func (gdClass WebSocketServer) IsListening() bool { return methodCall[bool](gdClass.obj.get(), methodWebSocketServer[0]) }
func (gdClass WebSocketServer) SetExtraHeaders(headers []string)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[1], &headers) }
func (gdClass WebSocketServer) Listen(port int64, protocols []string, gd_mp_api bool) int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketServer[2], &port, &protocols, &gd_mp_api) }
func (gdClass WebSocketServer) Stop()  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[3]) }
func (gdClass WebSocketServer) HasPeer(id int64) bool { return methodCall[bool](gdClass.obj.get(), methodWebSocketServer[4], &id) }
func (gdClass WebSocketServer) GetPeerAddress(id int64) string { return methodCall[string](gdClass.obj.get(), methodWebSocketServer[5], &id) }
func (gdClass WebSocketServer) GetPeerPort(id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodWebSocketServer[6], &id) }
func (gdClass WebSocketServer) DisconnectPeer(id int64, code int64, reason string)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[7], &id, &code, &reason) }
func (gdClass WebSocketServer) GetBindIp() string { return methodCall[string](gdClass.obj.get(), methodWebSocketServer[8]) }
func (gdClass WebSocketServer) SetBindIp(ip string)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[9], &ip) }
func (gdClass WebSocketServer) GetPrivateKey() CryptoKey { return methodCall[CryptoKey](gdClass.obj.get(), methodWebSocketServer[10]) }
func (gdClass WebSocketServer) SetPrivateKey(key CryptoKey)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[11], &key) }
func (gdClass WebSocketServer) GetSslCertificate() X509Certificate { return methodCall[X509Certificate](gdClass.obj.get(), methodWebSocketServer[12]) }
func (gdClass WebSocketServer) SetSslCertificate(cert X509Certificate)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[13], &cert) }
func (gdClass WebSocketServer) GetCaChain() X509Certificate { return methodCall[X509Certificate](gdClass.obj.get(), methodWebSocketServer[14]) }
func (gdClass WebSocketServer) SetCaChain(ca_chain X509Certificate)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[15], &ca_chain) }
func (gdClass WebSocketServer) GetHandshakeTimeout() float64 { return methodCall[float64](gdClass.obj.get(), methodWebSocketServer[16]) }
func (gdClass WebSocketServer) SetHandshakeTimeout(timeout float64)  { methodCall[struct{}](gdClass.obj.get(), methodWebSocketServer[17], &timeout) }

type WebXRInterface struct{self *WebXRInterface; obj safeObject }
func NewWebXRInterface(ctx Context, at *WebXRInterface) WebXRInterface { if at == nil { at = new(WebXRInterface) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WebXRInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WebXRInterface) owner() cObject { return gdClass.obj.get() }
func (WebXRInterface) class() string { return "WebXRInterface\000" }

func (gdClass WebXRInterface) XRInterface() XRInterface { return XRInterface{obj:gdClass.obj} }

var methodWebXRInterface [13]cMethodBind
func (gdClass WebXRInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.XRInterface().virtual(rtype, name)
}
func (gdClass WebXRInterface) IsSessionSupported(session_mode string)  { methodCall[struct{}](gdClass.obj.get(), methodWebXRInterface[0], &session_mode) }
func (gdClass WebXRInterface) SetSessionMode(session_mode string)  { methodCall[struct{}](gdClass.obj.get(), methodWebXRInterface[1], &session_mode) }
func (gdClass WebXRInterface) GetSessionMode() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[2]) }
func (gdClass WebXRInterface) SetRequiredFeatures(required_features string)  { methodCall[struct{}](gdClass.obj.get(), methodWebXRInterface[3], &required_features) }
func (gdClass WebXRInterface) GetRequiredFeatures() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[4]) }
func (gdClass WebXRInterface) SetOptionalFeatures(optional_features string)  { methodCall[struct{}](gdClass.obj.get(), methodWebXRInterface[5], &optional_features) }
func (gdClass WebXRInterface) GetOptionalFeatures() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[6]) }
func (gdClass WebXRInterface) GetReferenceSpaceType() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[7]) }
func (gdClass WebXRInterface) SetRequestedReferenceSpaceTypes(requested_reference_space_types string)  { methodCall[struct{}](gdClass.obj.get(), methodWebXRInterface[8], &requested_reference_space_types) }
func (gdClass WebXRInterface) GetRequestedReferenceSpaceTypes() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[9]) }
func (gdClass WebXRInterface) GetController(controller_id int64) XRPositionalTracker { return methodCall[XRPositionalTracker](gdClass.obj.get(), methodWebXRInterface[10], &controller_id) }
func (gdClass WebXRInterface) GetVisibilityState() string { return methodCall[string](gdClass.obj.get(), methodWebXRInterface[11]) }
func (gdClass WebXRInterface) GetBoundsGeometry() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodWebXRInterface[12]) }

type WindowMode int64

const (
	WindowModeWindowed WindowMode = 0
	WindowModeMinimized WindowMode = 1
	WindowModeMaximized WindowMode = 2
	WindowModeFullscreen WindowMode = 3
	WindowModeExclusiveFullscreen WindowMode = 4
)

type WindowFlags int64

const (
	WindowFlagResizeDisabled WindowFlags = 0
	WindowFlagBorderless WindowFlags = 1
	WindowFlagAlwaysOnTop WindowFlags = 2
	WindowFlagTransparent WindowFlags = 3
	WindowFlagNoFocus WindowFlags = 4
	WindowFlagPopup WindowFlags = 5
	WindowFlagExtendToTitle WindowFlags = 6
	WindowFlagMax WindowFlags = 7
)

type WindowContentScaleMode int64

const (
	WindowContentScaleModeDisabled WindowContentScaleMode = 0
	WindowContentScaleModeCanvasItems WindowContentScaleMode = 1
	WindowContentScaleModeViewport WindowContentScaleMode = 2
)

type WindowContentScaleAspect int64

const (
	WindowContentScaleAspectIgnore WindowContentScaleAspect = 0
	WindowContentScaleAspectKeep WindowContentScaleAspect = 1
	WindowContentScaleAspectKeepWidth WindowContentScaleAspect = 2
	WindowContentScaleAspectKeepHeight WindowContentScaleAspect = 3
	WindowContentScaleAspectExpand WindowContentScaleAspect = 4
)

type WindowLayoutDirection int64

const (
	WindowLayoutDirectionInherited WindowLayoutDirection = 0
	WindowLayoutDirectionLocale WindowLayoutDirection = 1
	WindowLayoutDirectionLtr WindowLayoutDirection = 2
	WindowLayoutDirectionRtl WindowLayoutDirection = 3
)

type Window struct{self *Window; obj safeObject }
func NewWindow(ctx Context, at *Window) Window { if at == nil { at = new(Window) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass Window) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass Window) owner() cObject { return gdClass.obj.get() }
func (Window) class() string { return "Window\000" }

func (gdClass Window) Viewport() Viewport { return Viewport{obj:gdClass.obj} }

var methodWindow [78]cMethodBind
func (gdClass Window) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Viewport().virtual(rtype, name)
}
func (gdClass Window) SetTitle(title string)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[0], &title) }
func (gdClass Window) GetTitle() string { return methodCall[string](gdClass.obj.get(), methodWindow[1]) }
func (gdClass Window) SetCurrentScreen(index int64)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[2], &index) }
func (gdClass Window) GetCurrentScreen() int64 { return methodCall[int64](gdClass.obj.get(), methodWindow[3]) }
func (gdClass Window) SetPosition(position Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[4], &position) }
func (gdClass Window) GetPosition() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[5]) }
func (gdClass Window) SetSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[6], &size) }
func (gdClass Window) GetSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[7]) }
func (gdClass Window) ResetSize()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[8]) }
func (gdClass Window) GetRealSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[9]) }
func (gdClass Window) SetMaxSize(max_size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[10], &max_size) }
func (gdClass Window) GetMaxSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[11]) }
func (gdClass Window) SetMinSize(min_size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[12], &min_size) }
func (gdClass Window) GetMinSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[13]) }
func (gdClass Window) SetMode(mode WindowMode)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[14], &mode) }
func (gdClass Window) GetMode() WindowMode { return methodCall[WindowMode](gdClass.obj.get(), methodWindow[15]) }
func (gdClass Window) SetFlag(flag WindowFlags, enabled bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[16], &flag, &enabled) }
func (gdClass Window) GetFlag(flag WindowFlags) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[17], &flag) }
func (gdClass Window) IsMaximizeAllowed() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[18]) }
func (gdClass Window) RequestAttention()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[19]) }
func (gdClass Window) MoveToForeground()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[20]) }
func (gdClass Window) SetVisible(visible bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[21], &visible) }
func (gdClass Window) IsVisible() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[22]) }
func (gdClass Window) Hide()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[23]) }
func (gdClass Window) Show()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[24]) }
func (gdClass Window) SetTransient(transient bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[25], &transient) }
func (gdClass Window) IsTransient() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[26]) }
func (gdClass Window) SetExclusive(exclusive bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[27], &exclusive) }
func (gdClass Window) IsExclusive() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[28]) }
func (gdClass Window) CanDraw() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[29]) }
func (gdClass Window) HasFocus() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[30]) }
func (gdClass Window) GrabFocus()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[31]) }
func (gdClass Window) SetImeActive(active bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[32], &active) }
func (gdClass Window) SetImePosition(position Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[33], &position) }
func (gdClass Window) IsEmbedded() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[34]) }
func (gdClass Window) GetContentsMinimumSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodWindow[35]) }
func (gdClass Window) SetContentScaleSize(size Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[36], &size) }
func (gdClass Window) GetContentScaleSize() Vector2i { return methodCall[Vector2i](gdClass.obj.get(), methodWindow[37]) }
func (gdClass Window) SetContentScaleMode(mode WindowContentScaleMode)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[38], &mode) }
func (gdClass Window) GetContentScaleMode() WindowContentScaleMode { return methodCall[WindowContentScaleMode](gdClass.obj.get(), methodWindow[39]) }
func (gdClass Window) SetContentScaleAspect(aspect WindowContentScaleAspect)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[40], &aspect) }
func (gdClass Window) GetContentScaleAspect() WindowContentScaleAspect { return methodCall[WindowContentScaleAspect](gdClass.obj.get(), methodWindow[41]) }
func (gdClass Window) SetContentScaleFactor(factor float64)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[42], &factor) }
func (gdClass Window) GetContentScaleFactor() float64 { return methodCall[float64](gdClass.obj.get(), methodWindow[43]) }
func (gdClass Window) SetUseFontOversampling(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[44], &enable) }
func (gdClass Window) IsUsingFontOversampling() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[45]) }
func (gdClass Window) SetWrapControls(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[46], &enable) }
func (gdClass Window) IsWrappingControls() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[47]) }
func (gdClass Window) ChildControlsChanged()  { methodCall[struct{}](gdClass.obj.get(), methodWindow[48]) }
func (gdClass Window) SetTheme(theme Theme)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[49], &theme) }
func (gdClass Window) GetTheme() Theme { return methodCall[Theme](gdClass.obj.get(), methodWindow[50]) }
func (gdClass Window) SetThemeTypeVariation(theme_type Name)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[51], &theme_type) }
func (gdClass Window) GetThemeTypeVariation() Name { return methodCall[Name](gdClass.obj.get(), methodWindow[52]) }
func (gdClass Window) GetThemeIcon(name Name, theme_type Name) Texture2D { return methodCall[Texture2D](gdClass.obj.get(), methodWindow[53], &name, &theme_type) }
func (gdClass Window) GetThemeStylebox(name Name, theme_type Name) StyleBox { return methodCall[StyleBox](gdClass.obj.get(), methodWindow[54], &name, &theme_type) }
func (gdClass Window) GetThemeFont(name Name, theme_type Name) Font { return methodCall[Font](gdClass.obj.get(), methodWindow[55], &name, &theme_type) }
func (gdClass Window) GetThemeFontSize(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodWindow[56], &name, &theme_type) }
func (gdClass Window) GetThemeColor(name Name, theme_type Name) Color { return methodCall[Color](gdClass.obj.get(), methodWindow[57], &name, &theme_type) }
func (gdClass Window) GetThemeConstant(name Name, theme_type Name) int64 { return methodCall[int64](gdClass.obj.get(), methodWindow[58], &name, &theme_type) }
func (gdClass Window) HasThemeIcon(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[59], &name, &theme_type) }
func (gdClass Window) HasThemeStylebox(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[60], &name, &theme_type) }
func (gdClass Window) HasThemeFont(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[61], &name, &theme_type) }
func (gdClass Window) HasThemeFontSize(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[62], &name, &theme_type) }
func (gdClass Window) HasThemeColor(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[63], &name, &theme_type) }
func (gdClass Window) HasThemeConstant(name Name, theme_type Name) bool { return methodCall[bool](gdClass.obj.get(), methodWindow[64], &name, &theme_type) }
func (gdClass Window) GetThemeDefaultBaseScale() float64 { return methodCall[float64](gdClass.obj.get(), methodWindow[65]) }
func (gdClass Window) GetThemeDefaultFont() Font { return methodCall[Font](gdClass.obj.get(), methodWindow[66]) }
func (gdClass Window) GetThemeDefaultFontSize() int64 { return methodCall[int64](gdClass.obj.get(), methodWindow[67]) }
func (gdClass Window) SetLayoutDirection(direction WindowLayoutDirection)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[68], &direction) }
func (gdClass Window) GetLayoutDirection() WindowLayoutDirection { return methodCall[WindowLayoutDirection](gdClass.obj.get(), methodWindow[69]) }
func (gdClass Window) IsLayoutRtl() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[70]) }
func (gdClass Window) SetAutoTranslate(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[71], &enable) }
func (gdClass Window) IsAutoTranslating() bool { return methodCall[bool](gdClass.obj.get(), methodWindow[72]) }
func (gdClass Window) Popup(rect Rect2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[73], &rect) }
func (gdClass Window) PopupOnParent(parent_rect Rect2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[74], &parent_rect) }
func (gdClass Window) PopupCenteredRatio(ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[75], &ratio) }
func (gdClass Window) PopupCentered(minsize Vector2i)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[76], &minsize) }
func (gdClass Window) PopupCenteredClamped(minsize Vector2i, fallback_ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodWindow[77], &minsize, &fallback_ratio) }
var WorkerThreadPool WorkerThreadPoolSingleton

type WorkerThreadPoolSingleton struct{self *WorkerThreadPoolSingleton; obj safeObject }
func NewWorkerThreadPoolSingleton(ctx Context, at *WorkerThreadPoolSingleton) WorkerThreadPoolSingleton { if at == nil { at = new(WorkerThreadPoolSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass WorkerThreadPoolSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WorkerThreadPoolSingleton) owner() cObject { return gdClass.obj.get() }
func (WorkerThreadPoolSingleton) class() string { return "WorkerThreadPoolSingleton\000" }

func (gdClass WorkerThreadPoolSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodWorkerThreadPoolSingleton [7]cMethodBind
func (gdClass WorkerThreadPoolSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass WorkerThreadPoolSingleton) AddTask(action Callable, high_priority bool, description string) int64 { return methodCall[int64](gdClass.obj.get(), methodWorkerThreadPoolSingleton[0], &action, &high_priority, &description) }
func (gdClass WorkerThreadPoolSingleton) IsTaskCompleted(task_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodWorkerThreadPoolSingleton[1], &task_id) }
func (gdClass WorkerThreadPoolSingleton) WaitForTaskCompletion(task_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodWorkerThreadPoolSingleton[2], &task_id) }
func (gdClass WorkerThreadPoolSingleton) AddGroupTask(action Callable, elements int64, tasks_needed int64, high_priority bool, description string) int64 { return methodCall[int64](gdClass.obj.get(), methodWorkerThreadPoolSingleton[3], &action, &elements, &tasks_needed, &high_priority, &description) }
func (gdClass WorkerThreadPoolSingleton) IsGroupTaskCompleted(group_id int64) bool { return methodCall[bool](gdClass.obj.get(), methodWorkerThreadPoolSingleton[4], &group_id) }
func (gdClass WorkerThreadPoolSingleton) GetGroupProcessedElementCount(group_id int64) int64 { return methodCall[int64](gdClass.obj.get(), methodWorkerThreadPoolSingleton[5], &group_id) }
func (gdClass WorkerThreadPoolSingleton) WaitForGroupTaskCompletion(group_id int64)  { methodCall[struct{}](gdClass.obj.get(), methodWorkerThreadPoolSingleton[6], &group_id) }

type World2D struct{self *World2D; obj safeObject }
func NewWorld2D(ctx Context, at *World2D) World2D { if at == nil { at = new(World2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass World2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass World2D) owner() cObject { return gdClass.obj.get() }
func (World2D) class() string { return "World2D\000" }

func (gdClass World2D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodWorld2D [4]cMethodBind
func (gdClass World2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass World2D) GetCanvas() RID { return methodCall[RID](gdClass.obj.get(), methodWorld2D[0]) }
func (gdClass World2D) GetSpace() RID { return methodCall[RID](gdClass.obj.get(), methodWorld2D[1]) }
func (gdClass World2D) GetNavigationMap() RID { return methodCall[RID](gdClass.obj.get(), methodWorld2D[2]) }
func (gdClass World2D) GetDirectSpaceState() PhysicsDirectSpaceState2D { return methodCall[PhysicsDirectSpaceState2D](gdClass.obj.get(), methodWorld2D[3]) }

type World3D struct{self *World3D; obj safeObject }
func NewWorld3D(ctx Context, at *World3D) World3D { if at == nil { at = new(World3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass World3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass World3D) owner() cObject { return gdClass.obj.get() }
func (World3D) class() string { return "World3D\000" }

func (gdClass World3D) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodWorld3D [10]cMethodBind
func (gdClass World3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass World3D) GetSpace() RID { return methodCall[RID](gdClass.obj.get(), methodWorld3D[0]) }
func (gdClass World3D) GetNavigationMap() RID { return methodCall[RID](gdClass.obj.get(), methodWorld3D[1]) }
func (gdClass World3D) GetScenario() RID { return methodCall[RID](gdClass.obj.get(), methodWorld3D[2]) }
func (gdClass World3D) SetEnvironment(env Environment)  { methodCall[struct{}](gdClass.obj.get(), methodWorld3D[3], &env) }
func (gdClass World3D) GetEnvironment() Environment { return methodCall[Environment](gdClass.obj.get(), methodWorld3D[4]) }
func (gdClass World3D) SetFallbackEnvironment(env Environment)  { methodCall[struct{}](gdClass.obj.get(), methodWorld3D[5], &env) }
func (gdClass World3D) GetFallbackEnvironment() Environment { return methodCall[Environment](gdClass.obj.get(), methodWorld3D[6]) }
func (gdClass World3D) SetCameraEffects(effects CameraEffects)  { methodCall[struct{}](gdClass.obj.get(), methodWorld3D[7], &effects) }
func (gdClass World3D) GetCameraEffects() CameraEffects { return methodCall[CameraEffects](gdClass.obj.get(), methodWorld3D[8]) }
func (gdClass World3D) GetDirectSpaceState() PhysicsDirectSpaceState3D { return methodCall[PhysicsDirectSpaceState3D](gdClass.obj.get(), methodWorld3D[9]) }

type WorldBoundaryShape2D struct{self *WorldBoundaryShape2D; obj safeObject }
func NewWorldBoundaryShape2D(ctx Context, at *WorldBoundaryShape2D) WorldBoundaryShape2D { if at == nil { at = new(WorldBoundaryShape2D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WorldBoundaryShape2D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WorldBoundaryShape2D) owner() cObject { return gdClass.obj.get() }
func (WorldBoundaryShape2D) class() string { return "WorldBoundaryShape2D\000" }

func (gdClass WorldBoundaryShape2D) Shape2D() Shape2D { return Shape2D{obj:gdClass.obj} }

var methodWorldBoundaryShape2D [4]cMethodBind
func (gdClass WorldBoundaryShape2D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape2D().virtual(rtype, name)
}
func (gdClass WorldBoundaryShape2D) SetNormal(normal Vector2)  { methodCall[struct{}](gdClass.obj.get(), methodWorldBoundaryShape2D[0], &normal) }
func (gdClass WorldBoundaryShape2D) GetNormal() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodWorldBoundaryShape2D[1]) }
func (gdClass WorldBoundaryShape2D) SetDistance(distance float64)  { methodCall[struct{}](gdClass.obj.get(), methodWorldBoundaryShape2D[2], &distance) }
func (gdClass WorldBoundaryShape2D) GetDistance() float64 { return methodCall[float64](gdClass.obj.get(), methodWorldBoundaryShape2D[3]) }

type WorldBoundaryShape3D struct{self *WorldBoundaryShape3D; obj safeObject }
func NewWorldBoundaryShape3D(ctx Context, at *WorldBoundaryShape3D) WorldBoundaryShape3D { if at == nil { at = new(WorldBoundaryShape3D) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass WorldBoundaryShape3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WorldBoundaryShape3D) owner() cObject { return gdClass.obj.get() }
func (WorldBoundaryShape3D) class() string { return "WorldBoundaryShape3D\000" }

func (gdClass WorldBoundaryShape3D) Shape3D() Shape3D { return Shape3D{obj:gdClass.obj} }

var methodWorldBoundaryShape3D [2]cMethodBind
func (gdClass WorldBoundaryShape3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Shape3D().virtual(rtype, name)
}
func (gdClass WorldBoundaryShape3D) SetPlane(plane Plane)  { methodCall[struct{}](gdClass.obj.get(), methodWorldBoundaryShape3D[0], &plane) }
func (gdClass WorldBoundaryShape3D) GetPlane() Plane { return methodCall[Plane](gdClass.obj.get(), methodWorldBoundaryShape3D[1]) }

type WorldEnvironment struct{self *WorldEnvironment; obj safeObject }
func NewWorldEnvironment(ctx Context, at *WorldEnvironment) WorldEnvironment { if at == nil { at = new(WorldEnvironment) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass WorldEnvironment) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass WorldEnvironment) owner() cObject { return gdClass.obj.get() }
func (WorldEnvironment) class() string { return "WorldEnvironment\000" }

func (gdClass WorldEnvironment) Node() Node { return Node{obj:gdClass.obj} }

var methodWorldEnvironment [4]cMethodBind
func (gdClass WorldEnvironment) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node().virtual(rtype, name)
}
func (gdClass WorldEnvironment) SetEnvironment(env Environment)  { methodCall[struct{}](gdClass.obj.get(), methodWorldEnvironment[0], &env) }
func (gdClass WorldEnvironment) GetEnvironment() Environment { return methodCall[Environment](gdClass.obj.get(), methodWorldEnvironment[1]) }
func (gdClass WorldEnvironment) SetCameraEffects(env CameraEffects)  { methodCall[struct{}](gdClass.obj.get(), methodWorldEnvironment[2], &env) }
func (gdClass WorldEnvironment) GetCameraEffects() CameraEffects { return methodCall[CameraEffects](gdClass.obj.get(), methodWorldEnvironment[3]) }

type X509Certificate struct{self *X509Certificate; obj safeObject }
func NewX509Certificate(ctx Context, at *X509Certificate) X509Certificate { if at == nil { at = new(X509Certificate) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass X509Certificate) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass X509Certificate) owner() cObject { return gdClass.obj.get() }
func (X509Certificate) class() string { return "X509Certificate\000" }

func (gdClass X509Certificate) Resource() Resource { return Resource{obj:gdClass.obj} }

var methodX509Certificate [2]cMethodBind
func (gdClass X509Certificate) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Resource().virtual(rtype, name)
}
func (gdClass X509Certificate) Save(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodX509Certificate[0], &path) }
func (gdClass X509Certificate) Load(path string) int64 { return methodCall[int64](gdClass.obj.get(), methodX509Certificate[1], &path) }

type XMLParserNodeType int64

const (
	XMLParserNodeNone XMLParserNodeType = 0
	XMLParserNodeElement XMLParserNodeType = 1
	XMLParserNodeElementEnd XMLParserNodeType = 2
	XMLParserNodeText XMLParserNodeType = 3
	XMLParserNodeComment XMLParserNodeType = 4
	XMLParserNodeCdata XMLParserNodeType = 5
	XMLParserNodeUnknown XMLParserNodeType = 6
)

type XMLParser struct{self *XMLParser; obj safeObject }
func NewXMLParser(ctx Context, at *XMLParser) XMLParser { if at == nil { at = new(XMLParser) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass XMLParser) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XMLParser) owner() cObject { return gdClass.obj.get() }
func (XMLParser) class() string { return "XMLParser\000" }

func (gdClass XMLParser) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodXMLParser [17]cMethodBind
func (gdClass XMLParser) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass XMLParser) Read() int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[0]) }
func (gdClass XMLParser) GetNodeType() XMLParserNodeType { return methodCall[XMLParserNodeType](gdClass.obj.get(), methodXMLParser[1]) }
func (gdClass XMLParser) GetNodeName() string { return methodCall[string](gdClass.obj.get(), methodXMLParser[2]) }
func (gdClass XMLParser) GetNodeData() string { return methodCall[string](gdClass.obj.get(), methodXMLParser[3]) }
func (gdClass XMLParser) GetNodeOffset() int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[4]) }
func (gdClass XMLParser) GetAttributeCount() int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[5]) }
func (gdClass XMLParser) GetAttributeName(idx int64) string { return methodCall[string](gdClass.obj.get(), methodXMLParser[6], &idx) }
func (gdClass XMLParser) GetAttributeValue(idx int64) string { return methodCall[string](gdClass.obj.get(), methodXMLParser[7], &idx) }
func (gdClass XMLParser) HasAttribute(name string) bool { return methodCall[bool](gdClass.obj.get(), methodXMLParser[8], &name) }
func (gdClass XMLParser) GetNamedAttributeValue(name string) string { return methodCall[string](gdClass.obj.get(), methodXMLParser[9], &name) }
func (gdClass XMLParser) GetNamedAttributeValueSafe(name string) string { return methodCall[string](gdClass.obj.get(), methodXMLParser[10], &name) }
func (gdClass XMLParser) IsEmpty() bool { return methodCall[bool](gdClass.obj.get(), methodXMLParser[11]) }
func (gdClass XMLParser) GetCurrentLine() int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[12]) }
func (gdClass XMLParser) SkipSection()  { methodCall[struct{}](gdClass.obj.get(), methodXMLParser[13]) }
func (gdClass XMLParser) SeekTo(position int64) int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[14], &position) }
func (gdClass XMLParser) Open(file string) int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[15], &file) }
func (gdClass XMLParser) OpenBuffer(buffer []byte) int64 { return methodCall[int64](gdClass.obj.get(), methodXMLParser[16], &buffer) }

type XRAnchor3D struct{self *XRAnchor3D; obj safeObject }
func NewXRAnchor3D(ctx Context, at *XRAnchor3D) XRAnchor3D { if at == nil { at = new(XRAnchor3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XRAnchor3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRAnchor3D) owner() cObject { return gdClass.obj.get() }
func (XRAnchor3D) class() string { return "XRAnchor3D\000" }

func (gdClass XRAnchor3D) XRNode3D() XRNode3D { return XRNode3D{obj:gdClass.obj} }

var methodXRAnchor3D [2]cMethodBind
func (gdClass XRAnchor3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.XRNode3D().virtual(rtype, name)
}
func (gdClass XRAnchor3D) GetSize() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodXRAnchor3D[0]) }
func (gdClass XRAnchor3D) GetPlane() Plane { return methodCall[Plane](gdClass.obj.get(), methodXRAnchor3D[1]) }

type XRCamera3D struct{self *XRCamera3D; obj safeObject }
func NewXRCamera3D(ctx Context, at *XRCamera3D) XRCamera3D { if at == nil { at = new(XRCamera3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XRCamera3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRCamera3D) owner() cObject { return gdClass.obj.get() }
func (XRCamera3D) class() string { return "XRCamera3D\000" }

func (gdClass XRCamera3D) Camera3D() Camera3D { return Camera3D{obj:gdClass.obj} }

func (gdClass XRCamera3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Camera3D().virtual(rtype, name)
}

type XRController3D struct{self *XRController3D; obj safeObject }
func NewXRController3D(ctx Context, at *XRController3D) XRController3D { if at == nil { at = new(XRController3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XRController3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRController3D) owner() cObject { return gdClass.obj.get() }
func (XRController3D) class() string { return "XRController3D\000" }

func (gdClass XRController3D) XRNode3D() XRNode3D { return XRNode3D{obj:gdClass.obj} }

var methodXRController3D [4]cMethodBind
func (gdClass XRController3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.XRNode3D().virtual(rtype, name)
}
func (gdClass XRController3D) IsButtonPressed(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodXRController3D[0], &name) }
func (gdClass XRController3D) GetValue(name Name) float64 { return methodCall[float64](gdClass.obj.get(), methodXRController3D[1], &name) }
func (gdClass XRController3D) GetAxis(name Name) Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodXRController3D[2], &name) }
func (gdClass XRController3D) GetTrackerHand() XRPositionalTrackerTrackerHand { return methodCall[XRPositionalTrackerTrackerHand](gdClass.obj.get(), methodXRController3D[3]) }

type XRInterfaceCapabilities int64

const (
	XRInterfaceXrNone XRInterfaceCapabilities = 0
	XRInterfaceXrMono XRInterfaceCapabilities = 1
	XRInterfaceXrStereo XRInterfaceCapabilities = 2
	XRInterfaceXrQuad XRInterfaceCapabilities = 4
	XRInterfaceXrVr XRInterfaceCapabilities = 8
	XRInterfaceXrAr XRInterfaceCapabilities = 16
	XRInterfaceXrExternal XRInterfaceCapabilities = 32
)

type XRInterfaceTrackingStatus int64

const (
	XRInterfaceXrNormalTracking XRInterfaceTrackingStatus = 0
	XRInterfaceXrExcessiveMotion XRInterfaceTrackingStatus = 1
	XRInterfaceXrInsufficientFeatures XRInterfaceTrackingStatus = 2
	XRInterfaceXrUnknownTracking XRInterfaceTrackingStatus = 3
	XRInterfaceXrNotTracking XRInterfaceTrackingStatus = 4
)

type XRInterfacePlayAreaMode int64

const (
	XRInterfaceXrPlayAreaUnknown XRInterfacePlayAreaMode = 0
	XRInterfaceXrPlayArea3dof XRInterfacePlayAreaMode = 1
	XRInterfaceXrPlayAreaSitting XRInterfacePlayAreaMode = 2
	XRInterfaceXrPlayAreaRoomscale XRInterfacePlayAreaMode = 3
	XRInterfaceXrPlayAreaStage XRInterfacePlayAreaMode = 4
)

type XRInterface struct{self *XRInterface; obj safeObject }
func NewXRInterface(ctx Context, at *XRInterface) XRInterface { if at == nil { at = new(XRInterface) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass XRInterface) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRInterface) owner() cObject { return gdClass.obj.get() }
func (XRInterface) class() string { return "XRInterface\000" }

func (gdClass XRInterface) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodXRInterface [18]cMethodBind
func (gdClass XRInterface) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass XRInterface) GetName() Name { return methodCall[Name](gdClass.obj.get(), methodXRInterface[0]) }
func (gdClass XRInterface) GetCapabilities() int64 { return methodCall[int64](gdClass.obj.get(), methodXRInterface[1]) }
func (gdClass XRInterface) IsPrimary() bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[2]) }
func (gdClass XRInterface) SetPrimary(primary bool)  { methodCall[struct{}](gdClass.obj.get(), methodXRInterface[3], &primary) }
func (gdClass XRInterface) IsInitialized() bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[4]) }
func (gdClass XRInterface) Initialize() bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[5]) }
func (gdClass XRInterface) Uninitialize()  { methodCall[struct{}](gdClass.obj.get(), methodXRInterface[6]) }
func (gdClass XRInterface) GetTrackingStatus() XRInterfaceTrackingStatus { return methodCall[XRInterfaceTrackingStatus](gdClass.obj.get(), methodXRInterface[7]) }
func (gdClass XRInterface) GetRenderTargetSize() Vector2 { return methodCall[Vector2](gdClass.obj.get(), methodXRInterface[8]) }
func (gdClass XRInterface) GetViewCount() int64 { return methodCall[int64](gdClass.obj.get(), methodXRInterface[9]) }
func (gdClass XRInterface) TriggerHapticPulse(action_name string, tracker_name Name, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodXRInterface[10], &action_name, &tracker_name, &frequency, &amplitude, &duration_sec, &delay_sec) }
func (gdClass XRInterface) SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[11], &mode) }
func (gdClass XRInterface) GetPlayAreaMode() XRInterfacePlayAreaMode { return methodCall[XRInterfacePlayAreaMode](gdClass.obj.get(), methodXRInterface[12]) }
func (gdClass XRInterface) SetPlayAreaMode(mode XRInterfacePlayAreaMode) bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[13], &mode) }
func (gdClass XRInterface) GetPlayArea() []Vector3 { return methodCall[[]Vector3](gdClass.obj.get(), methodXRInterface[14]) }
func (gdClass XRInterface) GetAnchorDetectionIsEnabled() bool { return methodCall[bool](gdClass.obj.get(), methodXRInterface[15]) }
func (gdClass XRInterface) SetAnchorDetectionIsEnabled(enable bool)  { methodCall[struct{}](gdClass.obj.get(), methodXRInterface[16], &enable) }
func (gdClass XRInterface) GetCameraFeedId() int64 { return methodCall[int64](gdClass.obj.get(), methodXRInterface[17]) }

type XRInterfaceExtension struct{self *XRInterfaceExtension; obj safeObject }
func NewXRInterfaceExtension(ctx Context, at *XRInterfaceExtension) XRInterfaceExtension { if at == nil { at = new(XRInterfaceExtension) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass XRInterfaceExtension) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRInterfaceExtension) owner() cObject { return gdClass.obj.get() }
func (XRInterfaceExtension) class() string { return "XRInterfaceExtension\000" }

func (gdClass XRInterfaceExtension) XRInterface() XRInterface { return XRInterface{obj:gdClass.obj} }

var methodXRInterfaceExtension [2]cMethodBind
func (gdClass XRInterfaceExtension) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	switch name {
	case "_get_name":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetName() Name }{}).Elem()) {
			return rtype.MethodByName(`GetName`)
		}
		return
	case "_get_capabilities":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCapabilities() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetCapabilities`)
		}
		return
	case "_is_initialized":
		if rtype.Implements(reflect.TypeOf([0]interface{ IsInitialized() bool }{}).Elem()) {
			return rtype.MethodByName(`IsInitialized`)
		}
		return
	case "_initialize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Initialize() bool }{}).Elem()) {
			return rtype.MethodByName(`Initialize`)
		}
		return
	case "_uninitialize":
		if rtype.Implements(reflect.TypeOf([0]interface{ Uninitialize()  }{}).Elem()) {
			return rtype.MethodByName(`Uninitialize`)
		}
		return
	case "_supports_play_area_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ SupportsPlayAreaMode(mode XRInterfacePlayAreaMode) bool }{}).Elem()) {
			return rtype.MethodByName(`SupportsPlayAreaMode`)
		}
		return
	case "_get_play_area_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPlayAreaMode() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetPlayAreaMode`)
		}
		return
	case "_set_play_area_mode":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetPlayAreaMode(mode int64) bool }{}).Elem()) {
			return rtype.MethodByName(`SetPlayAreaMode`)
		}
		return
	case "_get_play_area":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetPlayArea() []Vector3 }{}).Elem()) {
			return rtype.MethodByName(`GetPlayArea`)
		}
		return
	case "_get_render_target_size":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetRenderTargetSize() Vector2 }{}).Elem()) {
			return rtype.MethodByName(`GetRenderTargetSize`)
		}
		return
	case "_get_view_count":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetViewCount() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetViewCount`)
		}
		return
	case "_get_camera_transform":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCameraTransform() Transform3D }{}).Elem()) {
			return rtype.MethodByName(`GetCameraTransform`)
		}
		return
	case "_get_transform_for_view":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTransformForView(view int64, cam_transform Transform3D) Transform3D }{}).Elem()) {
			return rtype.MethodByName(`GetTransformForView`)
		}
		return
	case "_get_projection_for_view":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetProjectionForView(view int64, aspect float64, z_near float64, z_far float64) []float64 }{}).Elem()) {
			return rtype.MethodByName(`GetProjectionForView`)
		}
		return
	case "_get_vrs_texture":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetVrsTexture() RID }{}).Elem()) {
			return rtype.MethodByName(`GetVrsTexture`)
		}
		return
	case "_process":
		if rtype.Implements(reflect.TypeOf([0]interface{ Process()  }{}).Elem()) {
			return rtype.MethodByName(`Process`)
		}
		return
	case "_pre_render":
		if rtype.Implements(reflect.TypeOf([0]interface{ PreRender()  }{}).Elem()) {
			return rtype.MethodByName(`PreRender`)
		}
		return
	case "_pre_draw_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ PreDrawViewport(render_target RID) bool }{}).Elem()) {
			return rtype.MethodByName(`PreDrawViewport`)
		}
		return
	case "_post_draw_viewport":
		if rtype.Implements(reflect.TypeOf([0]interface{ PostDrawViewport(render_target RID, screen_rect Rect2)  }{}).Elem()) {
			return rtype.MethodByName(`PostDrawViewport`)
		}
		return
	case "_end_frame":
		if rtype.Implements(reflect.TypeOf([0]interface{ EndFrame()  }{}).Elem()) {
			return rtype.MethodByName(`EndFrame`)
		}
		return
	case "_notification":
		if rtype.Implements(reflect.TypeOf([0]interface{ Notification(what int64)  }{}).Elem()) {
			return rtype.MethodByName(`Notification`)
		}
		return
	case "_get_suggested_tracker_names":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSuggestedTrackerNames() []string }{}).Elem()) {
			return rtype.MethodByName(`GetSuggestedTrackerNames`)
		}
		return
	case "_get_suggested_pose_names":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetSuggestedPoseNames(tracker_name Name) []string }{}).Elem()) {
			return rtype.MethodByName(`GetSuggestedPoseNames`)
		}
		return
	case "_get_tracking_status":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetTrackingStatus() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetTrackingStatus`)
		}
		return
	case "_trigger_haptic_pulse":
		if rtype.Implements(reflect.TypeOf([0]interface{ TriggerHapticPulse(action_name string, tracker_name Name, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  }{}).Elem()) {
			return rtype.MethodByName(`TriggerHapticPulse`)
		}
		return
	case "_get_anchor_detection_is_enabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetAnchorDetectionIsEnabled() bool }{}).Elem()) {
			return rtype.MethodByName(`GetAnchorDetectionIsEnabled`)
		}
		return
	case "_set_anchor_detection_is_enabled":
		if rtype.Implements(reflect.TypeOf([0]interface{ SetAnchorDetectionIsEnabled(enabled bool)  }{}).Elem()) {
			return rtype.MethodByName(`SetAnchorDetectionIsEnabled`)
		}
		return
	case "_get_camera_feed_id":
		if rtype.Implements(reflect.TypeOf([0]interface{ GetCameraFeedId() int64 }{}).Elem()) {
			return rtype.MethodByName(`GetCameraFeedId`)
		}
		return
	}
	return gdClass.XRInterface().virtual(rtype, name)
}
func (gdClass XRInterfaceExtension) AddBlit(render_target RID, src_rect Rect2, dst_rect Rect2i, use_layer bool, layer int64, apply_lens_distortion bool, eye_center Vector2, k1 float64, k2 float64, upscale float64, aspect_ratio float64)  { methodCall[struct{}](gdClass.obj.get(), methodXRInterfaceExtension[0], &render_target, &src_rect, &dst_rect, &use_layer, &layer, &apply_lens_distortion, &eye_center, &k1, &k2, &upscale, &aspect_ratio) }
func (gdClass XRInterfaceExtension) GetRenderTargetTexture(render_target RID) RID { return methodCall[RID](gdClass.obj.get(), methodXRInterfaceExtension[1], &render_target) }

type XRNode3D struct{self *XRNode3D; obj safeObject }
func NewXRNode3D(ctx Context, at *XRNode3D) XRNode3D { if at == nil { at = new(XRNode3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XRNode3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRNode3D) owner() cObject { return gdClass.obj.get() }
func (XRNode3D) class() string { return "XRNode3D\000" }

func (gdClass XRNode3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodXRNode3D [8]cMethodBind
func (gdClass XRNode3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass XRNode3D) SetTracker(tracker_name Name)  { methodCall[struct{}](gdClass.obj.get(), methodXRNode3D[0], &tracker_name) }
func (gdClass XRNode3D) GetTracker() Name { return methodCall[Name](gdClass.obj.get(), methodXRNode3D[1]) }
func (gdClass XRNode3D) SetPoseName(pose Name)  { methodCall[struct{}](gdClass.obj.get(), methodXRNode3D[2], &pose) }
func (gdClass XRNode3D) GetPoseName() Name { return methodCall[Name](gdClass.obj.get(), methodXRNode3D[3]) }
func (gdClass XRNode3D) GetIsActive() bool { return methodCall[bool](gdClass.obj.get(), methodXRNode3D[4]) }
func (gdClass XRNode3D) GetHasTrackingData() bool { return methodCall[bool](gdClass.obj.get(), methodXRNode3D[5]) }
func (gdClass XRNode3D) GetPose() XRPose { return methodCall[XRPose](gdClass.obj.get(), methodXRNode3D[6]) }
func (gdClass XRNode3D) TriggerHapticPulse(action_name string, frequency float64, amplitude float64, duration_sec float64, delay_sec float64)  { methodCall[struct{}](gdClass.obj.get(), methodXRNode3D[7], &action_name, &frequency, &amplitude, &duration_sec, &delay_sec) }

type XROrigin3D struct{self *XROrigin3D; obj safeObject }
func NewXROrigin3D(ctx Context, at *XROrigin3D) XROrigin3D { if at == nil { at = new(XROrigin3D) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XROrigin3D) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XROrigin3D) owner() cObject { return gdClass.obj.get() }
func (XROrigin3D) class() string { return "XROrigin3D\000" }

func (gdClass XROrigin3D) Node3D() Node3D { return Node3D{obj:gdClass.obj} }

var methodXROrigin3D [2]cMethodBind
func (gdClass XROrigin3D) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Node3D().virtual(rtype, name)
}
func (gdClass XROrigin3D) SetWorldScale(world_scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodXROrigin3D[0], &world_scale) }
func (gdClass XROrigin3D) GetWorldScale() float64 { return methodCall[float64](gdClass.obj.get(), methodXROrigin3D[1]) }

type XRPoseTrackingConfidence int64

const (
	XRPoseXrTrackingConfidenceNone XRPoseTrackingConfidence = 0
	XRPoseXrTrackingConfidenceLow XRPoseTrackingConfidence = 1
	XRPoseXrTrackingConfidenceHigh XRPoseTrackingConfidence = 2
)

type XRPose struct{self *XRPose; obj safeObject }
func NewXRPose(ctx Context, at *XRPose) XRPose { if at == nil { at = new(XRPose) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass XRPose) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRPose) owner() cObject { return gdClass.obj.get() }
func (XRPose) class() string { return "XRPose\000" }

func (gdClass XRPose) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodXRPose [13]cMethodBind
func (gdClass XRPose) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass XRPose) SetHasTrackingData(has_tracking_data bool)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[0], &has_tracking_data) }
func (gdClass XRPose) GetHasTrackingData() bool { return methodCall[bool](gdClass.obj.get(), methodXRPose[1]) }
func (gdClass XRPose) SetName(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[2], &name) }
func (gdClass XRPose) GetName() Name { return methodCall[Name](gdClass.obj.get(), methodXRPose[3]) }
func (gdClass XRPose) SetTransform(transform Transform3D)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[4], &transform) }
func (gdClass XRPose) GetTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodXRPose[5]) }
func (gdClass XRPose) GetAdjustedTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodXRPose[6]) }
func (gdClass XRPose) SetLinearVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[7], &velocity) }
func (gdClass XRPose) GetLinearVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodXRPose[8]) }
func (gdClass XRPose) SetAngularVelocity(velocity Vector3)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[9], &velocity) }
func (gdClass XRPose) GetAngularVelocity() Vector3 { return methodCall[Vector3](gdClass.obj.get(), methodXRPose[10]) }
func (gdClass XRPose) SetTrackingConfidence(tracking_confidence XRPoseTrackingConfidence)  { methodCall[struct{}](gdClass.obj.get(), methodXRPose[11], &tracking_confidence) }
func (gdClass XRPose) GetTrackingConfidence() XRPoseTrackingConfidence { return methodCall[XRPoseTrackingConfidence](gdClass.obj.get(), methodXRPose[12]) }

type XRPositionalTrackerTrackerHand int64

const (
	XRPositionalTrackerTrackerHandUnknown XRPositionalTrackerTrackerHand = 0
	XRPositionalTrackerTrackerHandLeft XRPositionalTrackerTrackerHand = 1
	XRPositionalTrackerTrackerHandRight XRPositionalTrackerTrackerHand = 2
)

type XRPositionalTracker struct{self *XRPositionalTracker; obj safeObject }
func NewXRPositionalTracker(ctx Context, at *XRPositionalTracker) XRPositionalTracker { if at == nil { at = new(XRPositionalTracker) }; at.obj.new(ctx, at.class(), true); return *at }
func (gdClass XRPositionalTracker) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRPositionalTracker) owner() cObject { return gdClass.obj.get() }
func (XRPositionalTracker) class() string { return "XRPositionalTracker\000" }

func (gdClass XRPositionalTracker) RefCounted() RefCounted { return RefCounted{obj:gdClass.obj} }

var methodXRPositionalTracker [16]cMethodBind
func (gdClass XRPositionalTracker) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.RefCounted().virtual(rtype, name)
}
func (gdClass XRPositionalTracker) GetTrackerType() XRServerTrackerType { return methodCall[XRServerTrackerType](gdClass.obj.get(), methodXRPositionalTracker[0]) }
func (gdClass XRPositionalTracker) SetTrackerType(atype XRServerTrackerType)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[1], &atype) }
func (gdClass XRPositionalTracker) GetTrackerName() Name { return methodCall[Name](gdClass.obj.get(), methodXRPositionalTracker[2]) }
func (gdClass XRPositionalTracker) SetTrackerName(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[3], &name) }
func (gdClass XRPositionalTracker) GetTrackerDesc() string { return methodCall[string](gdClass.obj.get(), methodXRPositionalTracker[4]) }
func (gdClass XRPositionalTracker) SetTrackerDesc(description string)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[5], &description) }
func (gdClass XRPositionalTracker) GetTrackerProfile() string { return methodCall[string](gdClass.obj.get(), methodXRPositionalTracker[6]) }
func (gdClass XRPositionalTracker) SetTrackerProfile(profile string)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[7], &profile) }
func (gdClass XRPositionalTracker) GetTrackerHand() XRPositionalTrackerTrackerHand { return methodCall[XRPositionalTrackerTrackerHand](gdClass.obj.get(), methodXRPositionalTracker[8]) }
func (gdClass XRPositionalTracker) SetTrackerHand(hand XRPositionalTrackerTrackerHand)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[9], &hand) }
func (gdClass XRPositionalTracker) HasPose(name Name) bool { return methodCall[bool](gdClass.obj.get(), methodXRPositionalTracker[10], &name) }
func (gdClass XRPositionalTracker) GetPose(name Name) XRPose { return methodCall[XRPose](gdClass.obj.get(), methodXRPositionalTracker[11], &name) }
func (gdClass XRPositionalTracker) InvalidatePose(name Name)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[12], &name) }
func (gdClass XRPositionalTracker) SetPose(name Name, transform Transform3D, linear_velocity Vector3, angular_velocity Vector3, tracking_confidence XRPoseTrackingConfidence)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[13], &name, &transform, &linear_velocity, &angular_velocity, &tracking_confidence) }
func (gdClass XRPositionalTracker) GetInput(name Name) any { return methodCall[any](gdClass.obj.get(), methodXRPositionalTracker[14], &name) }
func (gdClass XRPositionalTracker) SetInput(name Name, value any)  { methodCall[struct{}](gdClass.obj.get(), methodXRPositionalTracker[15], &name, &value) }

type XRServerTrackerType int64

const (
	XRServerTrackerHead XRServerTrackerType = 1
	XRServerTrackerController XRServerTrackerType = 2
	XRServerTrackerBasestation XRServerTrackerType = 4
	XRServerTrackerAnchor XRServerTrackerType = 8
	XRServerTrackerAnyKnown XRServerTrackerType = 127
	XRServerTrackerUnknown XRServerTrackerType = 128
	XRServerTrackerAny XRServerTrackerType = 255
)

type XRServerRotationMode int64

const (
	XRServerResetFullRotation XRServerRotationMode = 0
	XRServerResetButKeepTilt XRServerRotationMode = 1
	XRServerDontResetRotation XRServerRotationMode = 2
)
var XRServer XRServerSingleton

type XRServerSingleton struct{self *XRServerSingleton; obj safeObject }
func NewXRServerSingleton(ctx Context, at *XRServerSingleton) XRServerSingleton { if at == nil { at = new(XRServerSingleton) }; at.obj.new(ctx, at.class(), false); return *at }
func (gdClass XRServerSingleton) Free(ctx Context) { gdClass.obj.free(ctx) }
func (gdClass XRServerSingleton) owner() cObject { return gdClass.obj.get() }
func (XRServerSingleton) class() string { return "XRServerSingleton\000" }

func (gdClass XRServerSingleton) Object() Object { return Object{obj:gdClass.obj} }

var methodXRServerSingleton [17]cMethodBind
func (gdClass XRServerSingleton) virtual(rtype reflect.Type, name string) (method reflect.Method, ok bool) {
	return gdClass.Object().virtual(rtype, name)
}
func (gdClass XRServerSingleton) GetWorldScale() float64 { return methodCall[float64](gdClass.obj.get(), methodXRServerSingleton[0]) }
func (gdClass XRServerSingleton) SetWorldScale(scale float64)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[1], &scale) }
func (gdClass XRServerSingleton) GetReferenceFrame() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodXRServerSingleton[2]) }
func (gdClass XRServerSingleton) CenterOnHmd(rotation_mode XRServerRotationMode, keep_height bool)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[3], &rotation_mode, &keep_height) }
func (gdClass XRServerSingleton) GetHmdTransform() Transform3D { return methodCall[Transform3D](gdClass.obj.get(), methodXRServerSingleton[4]) }
func (gdClass XRServerSingleton) AddInterface(intf XRInterface)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[5], &intf) }
func (gdClass XRServerSingleton) GetInterfaceCount() int64 { return methodCall[int64](gdClass.obj.get(), methodXRServerSingleton[6]) }
func (gdClass XRServerSingleton) RemoveInterface(intf XRInterface)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[7], &intf) }
func (gdClass XRServerSingleton) GetInterface(idx int64) XRInterface { return methodCall[XRInterface](gdClass.obj.get(), methodXRServerSingleton[8], &idx) }
func (gdClass XRServerSingleton) GetInterfaces() Array { return methodCall[Array](gdClass.obj.get(), methodXRServerSingleton[9]) }
func (gdClass XRServerSingleton) FindInterface(name string) XRInterface { return methodCall[XRInterface](gdClass.obj.get(), methodXRServerSingleton[10], &name) }
func (gdClass XRServerSingleton) AddTracker(tracker XRPositionalTracker)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[11], &tracker) }
func (gdClass XRServerSingleton) RemoveTracker(tracker XRPositionalTracker)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[12], &tracker) }
func (gdClass XRServerSingleton) GetTrackers(tracker_types int64) Dictionary { return methodCall[Dictionary](gdClass.obj.get(), methodXRServerSingleton[13], &tracker_types) }
func (gdClass XRServerSingleton) GetTracker(tracker_name Name) XRPositionalTracker { return methodCall[XRPositionalTracker](gdClass.obj.get(), methodXRServerSingleton[14], &tracker_name) }
func (gdClass XRServerSingleton) GetPrimaryInterface() XRInterface { return methodCall[XRInterface](gdClass.obj.get(), methodXRServerSingleton[15]) }
func (gdClass XRServerSingleton) SetPrimaryInterface(intf XRInterface)  { methodCall[struct{}](gdClass.obj.get(), methodXRServerSingleton[16], &intf) }

func init() {	cOnLoad = func() {
Performance.obj.hold(global_get_singleton(`Performance`))
TextServerManager.obj.hold(global_get_singleton(`TextServerManager`))
NavigationMeshGenerator.obj.hold(global_get_singleton(`NavigationMeshGenerator`))
ProjectSettings.obj.hold(global_get_singleton(`ProjectSettings`))
IP.obj.hold(global_get_singleton(`IP`))
Geometry2D.obj.hold(global_get_singleton(`Geometry2D`))
Geometry3D.obj.hold(global_get_singleton(`Geometry3D`))
ResourceLoader.obj.hold(global_get_singleton(`ResourceLoader`))
ResourceSaver.obj.hold(global_get_singleton(`ResourceSaver`))
OS.obj.hold(global_get_singleton(`OS`))
Engine.obj.hold(global_get_singleton(`Engine`))
ClassDB.obj.hold(global_get_singleton(`ClassDB`))
Marshalls.obj.hold(global_get_singleton(`Marshalls`))
TranslationServer.obj.hold(global_get_singleton(`TranslationServer`))
Input.obj.hold(global_get_singleton(`Input`))
InputMap.obj.hold(global_get_singleton(`InputMap`))
EngineDebugger.obj.hold(global_get_singleton(`EngineDebugger`))
Time.obj.hold(global_get_singleton(`Time`))
NativeExtensionManager.obj.hold(global_get_singleton(`NativeExtensionManager`))
ResourceUID.obj.hold(global_get_singleton(`ResourceUID`))
WorkerThreadPool.obj.hold(global_get_singleton(`WorkerThreadPool`))
JavaClassWrapper.obj.hold(global_get_singleton(`JavaClassWrapper`))
JavaScript.obj.hold(global_get_singleton(`JavaScript`))
DisplayServer.obj.hold(global_get_singleton(`DisplayServer`))
RenderingServer.obj.hold(global_get_singleton(`RenderingServer`))
AudioServer.obj.hold(global_get_singleton(`AudioServer`))
PhysicsServer2D.obj.hold(global_get_singleton(`PhysicsServer2D`))
PhysicsServer3D.obj.hold(global_get_singleton(`PhysicsServer3D`))
NavigationServer2D.obj.hold(global_get_singleton(`NavigationServer2D`))
NavigationServer3D.obj.hold(global_get_singleton(`NavigationServer3D`))
XRServer.obj.hold(global_get_singleton(`XRServer`))
CameraServer.obj.hold(global_get_singleton(`CameraServer`))
		utilities[0] = get_utility_function("sin\000", 2140049587)
		utilities[1] = get_utility_function("cos\000", 2140049587)
		utilities[2] = get_utility_function("tan\000", 2140049587)
		utilities[3] = get_utility_function("sinh\000", 2140049587)
		utilities[4] = get_utility_function("cosh\000", 2140049587)
		utilities[5] = get_utility_function("tanh\000", 2140049587)
		utilities[6] = get_utility_function("asin\000", 2140049587)
		utilities[7] = get_utility_function("acos\000", 2140049587)
		utilities[8] = get_utility_function("atan\000", 2140049587)
		utilities[9] = get_utility_function("atan2\000", 92296394)
		utilities[10] = get_utility_function("sqrt\000", 2140049587)
		utilities[11] = get_utility_function("fmod\000", 92296394)
		utilities[12] = get_utility_function("fposmod\000", 92296394)
		utilities[13] = get_utility_function("posmod\000", 3133453818)
		utilities[14] = get_utility_function("floor\000", 4776452)
		utilities[15] = get_utility_function("floorf\000", 2140049587)
		utilities[16] = get_utility_function("floori\000", 2780425386)
		utilities[17] = get_utility_function("ceil\000", 4776452)
		utilities[18] = get_utility_function("ceilf\000", 2140049587)
		utilities[19] = get_utility_function("ceili\000", 2780425386)
		utilities[20] = get_utility_function("round\000", 4776452)
		utilities[21] = get_utility_function("roundf\000", 2140049587)
		utilities[22] = get_utility_function("roundi\000", 2780425386)
		utilities[23] = get_utility_function("abs\000", 4776452)
		utilities[24] = get_utility_function("absf\000", 2140049587)
		utilities[25] = get_utility_function("absi\000", 2157319888)
		utilities[26] = get_utility_function("sign\000", 4776452)
		utilities[27] = get_utility_function("signf\000", 2140049587)
		utilities[28] = get_utility_function("signi\000", 2157319888)
		utilities[29] = get_utility_function("pow\000", 92296394)
		utilities[30] = get_utility_function("log\000", 2140049587)
		utilities[31] = get_utility_function("exp\000", 2140049587)
		utilities[32] = get_utility_function("is_nan\000", 3569215213)
		utilities[33] = get_utility_function("is_inf\000", 3569215213)
		utilities[34] = get_utility_function("is_equal_approx\000", 1400789633)
		utilities[35] = get_utility_function("is_zero_approx\000", 3569215213)
		utilities[36] = get_utility_function("ease\000", 92296394)
		utilities[37] = get_utility_function("step_decimals\000", 2780425386)
		utilities[38] = get_utility_function("snapped\000", 92296394)
		utilities[39] = get_utility_function("lerp\000", 3389874542)
		utilities[40] = get_utility_function("lerpf\000", 998901048)
		utilities[41] = get_utility_function("cubic_interpolate\000", 1090965791)
		utilities[42] = get_utility_function("cubic_interpolate_angle\000", 1090965791)
		utilities[43] = get_utility_function("cubic_interpolate_in_time\000", 388121036)
		utilities[44] = get_utility_function("cubic_interpolate_angle_in_time\000", 388121036)
		utilities[45] = get_utility_function("bezier_interpolate\000", 1090965791)
		utilities[46] = get_utility_function("lerp_angle\000", 998901048)
		utilities[47] = get_utility_function("inverse_lerp\000", 998901048)
		utilities[48] = get_utility_function("range_lerp\000", 1090965791)
		utilities[49] = get_utility_function("smoothstep\000", 998901048)
		utilities[50] = get_utility_function("move_toward\000", 998901048)
		utilities[51] = get_utility_function("deg_to_rad\000", 2140049587)
		utilities[52] = get_utility_function("rad_to_deg\000", 2140049587)
		utilities[53] = get_utility_function("linear_to_db\000", 2140049587)
		utilities[54] = get_utility_function("db_to_linear\000", 2140049587)
		utilities[55] = get_utility_function("wrap\000", 3389874542)
		utilities[56] = get_utility_function("wrapi\000", 650295447)
		utilities[57] = get_utility_function("wrapf\000", 998901048)
		utilities[58] = get_utility_function("max\000", 3896050336)
		utilities[59] = get_utility_function("maxi\000", 3133453818)
		utilities[60] = get_utility_function("maxf\000", 92296394)
		utilities[61] = get_utility_function("min\000", 3896050336)
		utilities[62] = get_utility_function("mini\000", 3133453818)
		utilities[63] = get_utility_function("minf\000", 92296394)
		utilities[64] = get_utility_function("clamp\000", 3389874542)
		utilities[65] = get_utility_function("clampi\000", 650295447)
		utilities[66] = get_utility_function("clampf\000", 998901048)
		utilities[67] = get_utility_function("nearest_po2\000", 2157319888)
		utilities[68] = get_utility_function("pingpong\000", 92296394)
		utilities[69] = get_utility_function("randomize\000", 1691721052)
		utilities[70] = get_utility_function("randi\000", 701202648)
		utilities[71] = get_utility_function("randf\000", 2086227845)
		utilities[72] = get_utility_function("randi_range\000", 3133453818)
		utilities[73] = get_utility_function("randf_range\000", 92296394)
		utilities[74] = get_utility_function("randfn\000", 92296394)
		utilities[75] = get_utility_function("seed\000", 382931173)
		utilities[76] = get_utility_function("rand_from_seed\000", 1391063685)
		utilities[77] = get_utility_function("weakref\000", 4776452)
		utilities[78] = get_utility_function("typeof\000", 326422594)
		utilities[79] = get_utility_function("str\000", 32569176)
		utilities[80] = get_utility_function("error_string\000", 942708242)
		utilities[81] = get_utility_function("print\000", 2648703342)
		utilities[82] = get_utility_function("print_rich\000", 2648703342)
		utilities[83] = get_utility_function("printerr\000", 2648703342)
		utilities[84] = get_utility_function("printt\000", 2648703342)
		utilities[85] = get_utility_function("prints\000", 2648703342)
		utilities[86] = get_utility_function("printraw\000", 2648703342)
		utilities[87] = get_utility_function("print_verbose\000", 2648703342)
		utilities[88] = get_utility_function("push_error\000", 2648703342)
		utilities[89] = get_utility_function("push_warning\000", 2648703342)
		utilities[90] = get_utility_function("var_to_str\000", 866625479)
		utilities[91] = get_utility_function("str_to_var\000", 1891498491)
		utilities[92] = get_utility_function("var_to_bytes\000", 2947269930)
		utilities[93] = get_utility_function("bytes_to_var\000", 4249819452)
		utilities[94] = get_utility_function("var_to_bytes_with_objects\000", 2947269930)
		utilities[95] = get_utility_function("bytes_to_var_with_objects\000", 4249819452)
		utilities[96] = get_utility_function("hash\000", 326422594)
		utilities[97] = get_utility_function("instance_from_id\000", 1156694636)
		utilities[98] = get_utility_function("is_instance_id_valid\000", 2232439758)
		utilities[99] = get_utility_function("is_instance_valid\000", 996128841)
		utilities[100] = get_utility_function("rid_allocate_id\000", 701202648)
		utilities[101] = get_utility_function("rid_from_int64\000", 3426892196)
		methodVector2[0] = cVariantTypeVector2.get_builtin_method("angle\000", 466405837)
		methodVector2[1] = cVariantTypeVector2.get_builtin_method("angle_to\000", 3819070308)
		methodVector2[2] = cVariantTypeVector2.get_builtin_method("angle_to_point\000", 3819070308)
		methodVector2[3] = cVariantTypeVector2.get_builtin_method("direction_to\000", 2026743667)
		methodVector2[4] = cVariantTypeVector2.get_builtin_method("distance_to\000", 3819070308)
		methodVector2[5] = cVariantTypeVector2.get_builtin_method("distance_squared_to\000", 3819070308)
		methodVector2[6] = cVariantTypeVector2.get_builtin_method("length\000", 466405837)
		methodVector2[7] = cVariantTypeVector2.get_builtin_method("length_squared\000", 466405837)
		methodVector2[8] = cVariantTypeVector2.get_builtin_method("limit_length\000", 2544004089)
		methodVector2[9] = cVariantTypeVector2.get_builtin_method("normalized\000", 2428350749)
		methodVector2[10] = cVariantTypeVector2.get_builtin_method("is_normalized\000", 3918633141)
		methodVector2[11] = cVariantTypeVector2.get_builtin_method("is_equal_approx\000", 3190634762)
		methodVector2[12] = cVariantTypeVector2.get_builtin_method("posmod\000", 2544004089)
		methodVector2[13] = cVariantTypeVector2.get_builtin_method("posmodv\000", 2026743667)
		methodVector2[14] = cVariantTypeVector2.get_builtin_method("project\000", 2026743667)
		methodVector2[15] = cVariantTypeVector2.get_builtin_method("lerp\000", 4250033116)
		methodVector2[16] = cVariantTypeVector2.get_builtin_method("slerp\000", 4250033116)
		methodVector2[17] = cVariantTypeVector2.get_builtin_method("cubic_interpolate\000", 193522989)
		methodVector2[18] = cVariantTypeVector2.get_builtin_method("cubic_interpolate_in_time\000", 1957055074)
		methodVector2[19] = cVariantTypeVector2.get_builtin_method("bezier_interpolate\000", 193522989)
		methodVector2[20] = cVariantTypeVector2.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector2[21] = cVariantTypeVector2.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector2[22] = cVariantTypeVector2.get_builtin_method("move_toward\000", 4250033116)
		methodVector2[23] = cVariantTypeVector2.get_builtin_method("rotated\000", 2544004089)
		methodVector2[24] = cVariantTypeVector2.get_builtin_method("orthogonal\000", 2428350749)
		methodVector2[25] = cVariantTypeVector2.get_builtin_method("floor\000", 2428350749)
		methodVector2[26] = cVariantTypeVector2.get_builtin_method("ceil\000", 2428350749)
		methodVector2[27] = cVariantTypeVector2.get_builtin_method("round\000", 2428350749)
		methodVector2[28] = cVariantTypeVector2.get_builtin_method("aspect\000", 466405837)
		methodVector2[29] = cVariantTypeVector2.get_builtin_method("dot\000", 3819070308)
		methodVector2[30] = cVariantTypeVector2.get_builtin_method("slide\000", 2026743667)
		methodVector2[31] = cVariantTypeVector2.get_builtin_method("bounce\000", 2026743667)
		methodVector2[32] = cVariantTypeVector2.get_builtin_method("reflect\000", 2026743667)
		methodVector2[33] = cVariantTypeVector2.get_builtin_method("cross\000", 3819070308)
		methodVector2[34] = cVariantTypeVector2.get_builtin_method("abs\000", 2428350749)
		methodVector2[35] = cVariantTypeVector2.get_builtin_method("sign\000", 2428350749)
		methodVector2[36] = cVariantTypeVector2.get_builtin_method("clamp\000", 318031021)
		methodVector2[37] = cVariantTypeVector2.get_builtin_method("snapped\000", 2026743667)
		methodVector2[38] = cVariantTypeVector2.get_builtin_method("from_angle\000", 889263119)
		methodVector2i[0] = cVariantTypeVector2i.get_builtin_method("aspect\000", 466405837)
		methodVector2i[1] = cVariantTypeVector2i.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector2i[2] = cVariantTypeVector2i.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector2i[3] = cVariantTypeVector2i.get_builtin_method("length\000", 466405837)
		methodVector2i[4] = cVariantTypeVector2i.get_builtin_method("length_squared\000", 3173160232)
		methodVector2i[5] = cVariantTypeVector2i.get_builtin_method("sign\000", 3444277866)
		methodVector2i[6] = cVariantTypeVector2i.get_builtin_method("abs\000", 3444277866)
		methodVector2i[7] = cVariantTypeVector2i.get_builtin_method("clamp\000", 186568249)
		methodRect2[0] = cVariantTypeRect2.get_builtin_method("get_center\000", 2428350749)
		methodRect2[1] = cVariantTypeRect2.get_builtin_method("get_area\000", 466405837)
		methodRect2[2] = cVariantTypeRect2.get_builtin_method("has_no_area\000", 3918633141)
		methodRect2[3] = cVariantTypeRect2.get_builtin_method("has_point\000", 3190634762)
		methodRect2[4] = cVariantTypeRect2.get_builtin_method("is_equal_approx\000", 1908192260)
		methodRect2[5] = cVariantTypeRect2.get_builtin_method("intersects\000", 819294880)
		methodRect2[6] = cVariantTypeRect2.get_builtin_method("encloses\000", 1908192260)
		methodRect2[7] = cVariantTypeRect2.get_builtin_method("intersection\000", 2282977743)
		methodRect2[8] = cVariantTypeRect2.get_builtin_method("merge\000", 2282977743)
		methodRect2[9] = cVariantTypeRect2.get_builtin_method("expand\000", 293272265)
		methodRect2[10] = cVariantTypeRect2.get_builtin_method("grow\000", 39664498)
		methodRect2[11] = cVariantTypeRect2.get_builtin_method("grow_side\000", 4177736158)
		methodRect2[12] = cVariantTypeRect2.get_builtin_method("grow_individual\000", 3203390369)
		methodRect2[13] = cVariantTypeRect2.get_builtin_method("abs\000", 3107653634)
		methodRect2i[0] = cVariantTypeRect2i.get_builtin_method("get_center\000", 3444277866)
		methodRect2i[1] = cVariantTypeRect2i.get_builtin_method("get_area\000", 3173160232)
		methodRect2i[2] = cVariantTypeRect2i.get_builtin_method("has_no_area\000", 3918633141)
		methodRect2i[3] = cVariantTypeRect2i.get_builtin_method("has_point\000", 328189994)
		methodRect2i[4] = cVariantTypeRect2i.get_builtin_method("intersects\000", 3434691493)
		methodRect2i[5] = cVariantTypeRect2i.get_builtin_method("encloses\000", 3434691493)
		methodRect2i[6] = cVariantTypeRect2i.get_builtin_method("intersection\000", 717431873)
		methodRect2i[7] = cVariantTypeRect2i.get_builtin_method("merge\000", 717431873)
		methodRect2i[8] = cVariantTypeRect2i.get_builtin_method("expand\000", 1355196872)
		methodRect2i[9] = cVariantTypeRect2i.get_builtin_method("grow\000", 1578070074)
		methodRect2i[10] = cVariantTypeRect2i.get_builtin_method("grow_side\000", 3191154199)
		methodRect2i[11] = cVariantTypeRect2i.get_builtin_method("grow_individual\000", 1893743416)
		methodRect2i[12] = cVariantTypeRect2i.get_builtin_method("abs\000", 1469025700)
		methodVector3[0] = cVariantTypeVector3.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector3[1] = cVariantTypeVector3.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector3[2] = cVariantTypeVector3.get_builtin_method("angle_to\000", 1047977935)
		methodVector3[3] = cVariantTypeVector3.get_builtin_method("signed_angle_to\000", 2781412522)
		methodVector3[4] = cVariantTypeVector3.get_builtin_method("direction_to\000", 2923479887)
		methodVector3[5] = cVariantTypeVector3.get_builtin_method("distance_to\000", 1047977935)
		methodVector3[6] = cVariantTypeVector3.get_builtin_method("distance_squared_to\000", 1047977935)
		methodVector3[7] = cVariantTypeVector3.get_builtin_method("length\000", 466405837)
		methodVector3[8] = cVariantTypeVector3.get_builtin_method("length_squared\000", 466405837)
		methodVector3[9] = cVariantTypeVector3.get_builtin_method("limit_length\000", 514930144)
		methodVector3[10] = cVariantTypeVector3.get_builtin_method("normalized\000", 1776574132)
		methodVector3[11] = cVariantTypeVector3.get_builtin_method("is_normalized\000", 3918633141)
		methodVector3[12] = cVariantTypeVector3.get_builtin_method("is_equal_approx\000", 1749054343)
		methodVector3[13] = cVariantTypeVector3.get_builtin_method("inverse\000", 1776574132)
		methodVector3[14] = cVariantTypeVector3.get_builtin_method("clamp\000", 4145107892)
		methodVector3[15] = cVariantTypeVector3.get_builtin_method("snapped\000", 2923479887)
		methodVector3[16] = cVariantTypeVector3.get_builtin_method("rotated\000", 1682608829)
		methodVector3[17] = cVariantTypeVector3.get_builtin_method("lerp\000", 1682608829)
		methodVector3[18] = cVariantTypeVector3.get_builtin_method("slerp\000", 1682608829)
		methodVector3[19] = cVariantTypeVector3.get_builtin_method("cubic_interpolate\000", 2597922253)
		methodVector3[20] = cVariantTypeVector3.get_builtin_method("cubic_interpolate_in_time\000", 3256682901)
		methodVector3[21] = cVariantTypeVector3.get_builtin_method("bezier_interpolate\000", 2597922253)
		methodVector3[22] = cVariantTypeVector3.get_builtin_method("move_toward\000", 1682608829)
		methodVector3[23] = cVariantTypeVector3.get_builtin_method("dot\000", 1047977935)
		methodVector3[24] = cVariantTypeVector3.get_builtin_method("cross\000", 2923479887)
		methodVector3[25] = cVariantTypeVector3.get_builtin_method("outer\000", 3934786792)
		methodVector3[26] = cVariantTypeVector3.get_builtin_method("abs\000", 1776574132)
		methodVector3[27] = cVariantTypeVector3.get_builtin_method("floor\000", 1776574132)
		methodVector3[28] = cVariantTypeVector3.get_builtin_method("ceil\000", 1776574132)
		methodVector3[29] = cVariantTypeVector3.get_builtin_method("round\000", 1776574132)
		methodVector3[30] = cVariantTypeVector3.get_builtin_method("posmod\000", 514930144)
		methodVector3[31] = cVariantTypeVector3.get_builtin_method("posmodv\000", 2923479887)
		methodVector3[32] = cVariantTypeVector3.get_builtin_method("project\000", 2923479887)
		methodVector3[33] = cVariantTypeVector3.get_builtin_method("slide\000", 2923479887)
		methodVector3[34] = cVariantTypeVector3.get_builtin_method("bounce\000", 2923479887)
		methodVector3[35] = cVariantTypeVector3.get_builtin_method("reflect\000", 2923479887)
		methodVector3[36] = cVariantTypeVector3.get_builtin_method("sign\000", 1776574132)
		methodVector3[37] = cVariantTypeVector3.get_builtin_method("octahedron_encode\000", 2428350749)
		methodVector3[38] = cVariantTypeVector3.get_builtin_method("octahedron_decode\000", 3991820552)
		methodVector3i[0] = cVariantTypeVector3i.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector3i[1] = cVariantTypeVector3i.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector3i[2] = cVariantTypeVector3i.get_builtin_method("length\000", 466405837)
		methodVector3i[3] = cVariantTypeVector3i.get_builtin_method("length_squared\000", 3173160232)
		methodVector3i[4] = cVariantTypeVector3i.get_builtin_method("sign\000", 3729604559)
		methodVector3i[5] = cVariantTypeVector3i.get_builtin_method("abs\000", 3729604559)
		methodVector3i[6] = cVariantTypeVector3i.get_builtin_method("clamp\000", 1086892323)
		methodTransform2D[0] = cVariantTypeTransform2D.get_builtin_method("inverse\000", 1420440541)
		methodTransform2D[1] = cVariantTypeTransform2D.get_builtin_method("affine_inverse\000", 1420440541)
		methodTransform2D[2] = cVariantTypeTransform2D.get_builtin_method("get_rotation\000", 466405837)
		methodTransform2D[3] = cVariantTypeTransform2D.get_builtin_method("get_origin\000", 2428350749)
		methodTransform2D[4] = cVariantTypeTransform2D.get_builtin_method("get_scale\000", 2428350749)
		methodTransform2D[5] = cVariantTypeTransform2D.get_builtin_method("get_skew\000", 466405837)
		methodTransform2D[6] = cVariantTypeTransform2D.get_builtin_method("orthonormalized\000", 1420440541)
		methodTransform2D[7] = cVariantTypeTransform2D.get_builtin_method("rotated\000", 729597514)
		methodTransform2D[8] = cVariantTypeTransform2D.get_builtin_method("rotated_local\000", 729597514)
		methodTransform2D[9] = cVariantTypeTransform2D.get_builtin_method("scaled\000", 1446323263)
		methodTransform2D[10] = cVariantTypeTransform2D.get_builtin_method("scaled_local\000", 1446323263)
		methodTransform2D[11] = cVariantTypeTransform2D.get_builtin_method("translated\000", 1446323263)
		methodTransform2D[12] = cVariantTypeTransform2D.get_builtin_method("translated_local\000", 1446323263)
		methodTransform2D[13] = cVariantTypeTransform2D.get_builtin_method("basis_xform\000", 2026743667)
		methodTransform2D[14] = cVariantTypeTransform2D.get_builtin_method("basis_xform_inv\000", 2026743667)
		methodTransform2D[15] = cVariantTypeTransform2D.get_builtin_method("interpolate_with\000", 359399686)
		methodTransform2D[16] = cVariantTypeTransform2D.get_builtin_method("is_equal_approx\000", 3837431929)
		methodTransform2D[17] = cVariantTypeTransform2D.get_builtin_method("set_rotation\000", 833936903)
		methodTransform2D[18] = cVariantTypeTransform2D.get_builtin_method("set_scale\000", 3790411178)
		methodTransform2D[19] = cVariantTypeTransform2D.get_builtin_method("set_skew\000", 833936903)
		methodTransform2D[20] = cVariantTypeTransform2D.get_builtin_method("looking_at\000", 1446323263)
		methodVector4[0] = cVariantTypeVector4.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector4[1] = cVariantTypeVector4.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector4[2] = cVariantTypeVector4.get_builtin_method("length\000", 466405837)
		methodVector4[3] = cVariantTypeVector4.get_builtin_method("length_squared\000", 466405837)
		methodVector4[4] = cVariantTypeVector4.get_builtin_method("abs\000", 80860099)
		methodVector4[5] = cVariantTypeVector4.get_builtin_method("sign\000", 80860099)
		methodVector4[6] = cVariantTypeVector4.get_builtin_method("floor\000", 80860099)
		methodVector4[7] = cVariantTypeVector4.get_builtin_method("ceil\000", 80860099)
		methodVector4[8] = cVariantTypeVector4.get_builtin_method("round\000", 80860099)
		methodVector4[9] = cVariantTypeVector4.get_builtin_method("lerp\000", 2329757942)
		methodVector4[10] = cVariantTypeVector4.get_builtin_method("cubic_interpolate\000", 726768410)
		methodVector4[11] = cVariantTypeVector4.get_builtin_method("cubic_interpolate_in_time\000", 681631873)
		methodVector4[12] = cVariantTypeVector4.get_builtin_method("posmod\000", 3129671720)
		methodVector4[13] = cVariantTypeVector4.get_builtin_method("posmodv\000", 2031281584)
		methodVector4[14] = cVariantTypeVector4.get_builtin_method("snapped\000", 2031281584)
		methodVector4[15] = cVariantTypeVector4.get_builtin_method("clamp\000", 823915692)
		methodVector4[16] = cVariantTypeVector4.get_builtin_method("normalized\000", 80860099)
		methodVector4[17] = cVariantTypeVector4.get_builtin_method("is_normalized\000", 3918633141)
		methodVector4[18] = cVariantTypeVector4.get_builtin_method("direction_to\000", 2031281584)
		methodVector4[19] = cVariantTypeVector4.get_builtin_method("distance_to\000", 3770801042)
		methodVector4[20] = cVariantTypeVector4.get_builtin_method("distance_squared_to\000", 3770801042)
		methodVector4[21] = cVariantTypeVector4.get_builtin_method("dot\000", 3770801042)
		methodVector4[22] = cVariantTypeVector4.get_builtin_method("inverse\000", 80860099)
		methodVector4[23] = cVariantTypeVector4.get_builtin_method("is_equal_approx\000", 88913544)
		methodVector4i[0] = cVariantTypeVector4i.get_builtin_method("min_axis_index\000", 3173160232)
		methodVector4i[1] = cVariantTypeVector4i.get_builtin_method("max_axis_index\000", 3173160232)
		methodVector4i[2] = cVariantTypeVector4i.get_builtin_method("length\000", 466405837)
		methodVector4i[3] = cVariantTypeVector4i.get_builtin_method("length_squared\000", 3173160232)
		methodVector4i[4] = cVariantTypeVector4i.get_builtin_method("sign\000", 4134919947)
		methodVector4i[5] = cVariantTypeVector4i.get_builtin_method("abs\000", 4134919947)
		methodVector4i[6] = cVariantTypeVector4i.get_builtin_method("clamp\000", 3046490913)
		methodPlane[0] = cVariantTypePlane.get_builtin_method("normalized\000", 1051796340)
		methodPlane[1] = cVariantTypePlane.get_builtin_method("center\000", 1776574132)
		methodPlane[2] = cVariantTypePlane.get_builtin_method("is_equal_approx\000", 1150170233)
		methodPlane[3] = cVariantTypePlane.get_builtin_method("is_point_over\000", 1749054343)
		methodPlane[4] = cVariantTypePlane.get_builtin_method("distance_to\000", 1047977935)
		methodPlane[5] = cVariantTypePlane.get_builtin_method("has_point\000", 1258189072)
		methodPlane[6] = cVariantTypePlane.get_builtin_method("project\000", 2923479887)
		methodPlane[7] = cVariantTypePlane.get_builtin_method("intersect_3\000", 2012052692)
		methodPlane[8] = cVariantTypePlane.get_builtin_method("intersects_ray\000", 2048133369)
		methodPlane[9] = cVariantTypePlane.get_builtin_method("intersects_segment\000", 2048133369)
		methodQuaternion[0] = cVariantTypeQuaternion.get_builtin_method("length\000", 466405837)
		methodQuaternion[1] = cVariantTypeQuaternion.get_builtin_method("length_squared\000", 466405837)
		methodQuaternion[2] = cVariantTypeQuaternion.get_builtin_method("normalized\000", 4274879941)
		methodQuaternion[3] = cVariantTypeQuaternion.get_builtin_method("is_normalized\000", 3918633141)
		methodQuaternion[4] = cVariantTypeQuaternion.get_builtin_method("is_equal_approx\000", 1682156903)
		methodQuaternion[5] = cVariantTypeQuaternion.get_builtin_method("inverse\000", 4274879941)
		methodQuaternion[6] = cVariantTypeQuaternion.get_builtin_method("log\000", 4274879941)
		methodQuaternion[7] = cVariantTypeQuaternion.get_builtin_method("exp\000", 4274879941)
		methodQuaternion[8] = cVariantTypeQuaternion.get_builtin_method("angle_to\000", 3244682419)
		methodQuaternion[9] = cVariantTypeQuaternion.get_builtin_method("dot\000", 3244682419)
		methodQuaternion[10] = cVariantTypeQuaternion.get_builtin_method("slerp\000", 1773590316)
		methodQuaternion[11] = cVariantTypeQuaternion.get_builtin_method("slerpni\000", 1773590316)
		methodQuaternion[12] = cVariantTypeQuaternion.get_builtin_method("spherical_cubic_interpolate\000", 2150967576)
		methodQuaternion[13] = cVariantTypeQuaternion.get_builtin_method("spherical_cubic_interpolate_in_time\000", 1436023539)
		methodQuaternion[14] = cVariantTypeQuaternion.get_builtin_method("get_euler\000", 1776574132)
		methodQuaternion[15] = cVariantTypeQuaternion.get_builtin_method("get_axis\000", 1776574132)
		methodQuaternion[16] = cVariantTypeQuaternion.get_builtin_method("get_angle\000", 466405837)
		methodAABB[0] = cVariantTypeAABB.get_builtin_method("abs\000", 1576868580)
		methodAABB[1] = cVariantTypeAABB.get_builtin_method("get_center\000", 1776574132)
		methodAABB[2] = cVariantTypeAABB.get_builtin_method("get_volume\000", 466405837)
		methodAABB[3] = cVariantTypeAABB.get_builtin_method("has_no_volume\000", 3918633141)
		methodAABB[4] = cVariantTypeAABB.get_builtin_method("has_no_surface\000", 3918633141)
		methodAABB[5] = cVariantTypeAABB.get_builtin_method("has_point\000", 1749054343)
		methodAABB[6] = cVariantTypeAABB.get_builtin_method("is_equal_approx\000", 299946684)
		methodAABB[7] = cVariantTypeAABB.get_builtin_method("intersects\000", 299946684)
		methodAABB[8] = cVariantTypeAABB.get_builtin_method("encloses\000", 299946684)
		methodAABB[9] = cVariantTypeAABB.get_builtin_method("intersects_plane\000", 1150170233)
		methodAABB[10] = cVariantTypeAABB.get_builtin_method("intersection\000", 1271470306)
		methodAABB[11] = cVariantTypeAABB.get_builtin_method("merge\000", 1271470306)
		methodAABB[12] = cVariantTypeAABB.get_builtin_method("expand\000", 2851643018)
		methodAABB[13] = cVariantTypeAABB.get_builtin_method("grow\000", 239217291)
		methodAABB[14] = cVariantTypeAABB.get_builtin_method("get_support\000", 2923479887)
		methodAABB[15] = cVariantTypeAABB.get_builtin_method("get_longest_axis\000", 1776574132)
		methodAABB[16] = cVariantTypeAABB.get_builtin_method("get_longest_axis_index\000", 3173160232)
		methodAABB[17] = cVariantTypeAABB.get_builtin_method("get_longest_axis_size\000", 466405837)
		methodAABB[18] = cVariantTypeAABB.get_builtin_method("get_shortest_axis\000", 1776574132)
		methodAABB[19] = cVariantTypeAABB.get_builtin_method("get_shortest_axis_index\000", 3173160232)
		methodAABB[20] = cVariantTypeAABB.get_builtin_method("get_shortest_axis_size\000", 466405837)
		methodAABB[21] = cVariantTypeAABB.get_builtin_method("get_endpoint\000", 1394941017)
		methodAABB[22] = cVariantTypeAABB.get_builtin_method("intersects_segment\000", 2048133369)
		methodAABB[23] = cVariantTypeAABB.get_builtin_method("intersects_ray\000", 2048133369)
		methodBasis[0] = cVariantTypeBasis.get_builtin_method("inverse\000", 594669093)
		methodBasis[1] = cVariantTypeBasis.get_builtin_method("transposed\000", 594669093)
		methodBasis[2] = cVariantTypeBasis.get_builtin_method("orthonormalized\000", 594669093)
		methodBasis[3] = cVariantTypeBasis.get_builtin_method("determinant\000", 466405837)
		methodBasis[4] = cVariantTypeBasis.get_builtin_method("rotated\000", 1998708965)
		methodBasis[5] = cVariantTypeBasis.get_builtin_method("scaled\000", 3934786792)
		methodBasis[6] = cVariantTypeBasis.get_builtin_method("get_scale\000", 1776574132)
		methodBasis[7] = cVariantTypeBasis.get_builtin_method("get_euler\000", 1394941017)
		methodBasis[8] = cVariantTypeBasis.get_builtin_method("tdotx\000", 1047977935)
		methodBasis[9] = cVariantTypeBasis.get_builtin_method("tdoty\000", 1047977935)
		methodBasis[10] = cVariantTypeBasis.get_builtin_method("tdotz\000", 1047977935)
		methodBasis[11] = cVariantTypeBasis.get_builtin_method("slerp\000", 3118673011)
		methodBasis[12] = cVariantTypeBasis.get_builtin_method("is_equal_approx\000", 3165333982)
		methodBasis[13] = cVariantTypeBasis.get_builtin_method("get_rotation_quaternion\000", 4274879941)
		methodBasis[14] = cVariantTypeBasis.get_builtin_method("looking_at\000", 419916660)
		methodBasis[15] = cVariantTypeBasis.get_builtin_method("from_scale\000", 3703240166)
		methodBasis[16] = cVariantTypeBasis.get_builtin_method("from_euler\000", 2802321791)
		methodTransform3D[0] = cVariantTypeTransform3D.get_builtin_method("inverse\000", 3816817146)
		methodTransform3D[1] = cVariantTypeTransform3D.get_builtin_method("affine_inverse\000", 3816817146)
		methodTransform3D[2] = cVariantTypeTransform3D.get_builtin_method("orthonormalized\000", 3816817146)
		methodTransform3D[3] = cVariantTypeTransform3D.get_builtin_method("rotated\000", 1563203923)
		methodTransform3D[4] = cVariantTypeTransform3D.get_builtin_method("rotated_local\000", 1563203923)
		methodTransform3D[5] = cVariantTypeTransform3D.get_builtin_method("scaled\000", 1405596198)
		methodTransform3D[6] = cVariantTypeTransform3D.get_builtin_method("scaled_local\000", 1405596198)
		methodTransform3D[7] = cVariantTypeTransform3D.get_builtin_method("translated\000", 1405596198)
		methodTransform3D[8] = cVariantTypeTransform3D.get_builtin_method("translated_local\000", 1405596198)
		methodTransform3D[9] = cVariantTypeTransform3D.get_builtin_method("looking_at\000", 806929180)
		methodTransform3D[10] = cVariantTypeTransform3D.get_builtin_method("spherical_interpolate_with\000", 1786453358)
		methodTransform3D[11] = cVariantTypeTransform3D.get_builtin_method("interpolate_with\000", 1786453358)
		methodTransform3D[12] = cVariantTypeTransform3D.get_builtin_method("is_equal_approx\000", 696001652)
		methodProjection[0] = cVariantTypeProjection.get_builtin_method("create_depth_correction\000", 1228516048)
		methodProjection[1] = cVariantTypeProjection.get_builtin_method("create_light_atlas_rect\000", 2654950662)
		methodProjection[2] = cVariantTypeProjection.get_builtin_method("create_perspective\000", 390915442)
		methodProjection[3] = cVariantTypeProjection.get_builtin_method("create_perspective_hmd\000", 2857674800)
		methodProjection[4] = cVariantTypeProjection.get_builtin_method("create_for_hmd\000", 4184144994)
		methodProjection[5] = cVariantTypeProjection.get_builtin_method("create_orthogonal\000", 3707929169)
		methodProjection[6] = cVariantTypeProjection.get_builtin_method("create_orthogonal_aspect\000", 390915442)
		methodProjection[7] = cVariantTypeProjection.get_builtin_method("create_frustum\000", 3707929169)
		methodProjection[8] = cVariantTypeProjection.get_builtin_method("create_frustum_aspect\000", 1535076251)
		methodProjection[9] = cVariantTypeProjection.get_builtin_method("create_fit_aabb\000", 2264694907)
		methodProjection[10] = cVariantTypeProjection.get_builtin_method("determinant\000", 466405837)
		methodProjection[11] = cVariantTypeProjection.get_builtin_method("perspective_znear_adjusted\000", 3584785443)
		methodProjection[12] = cVariantTypeProjection.get_builtin_method("get_projection_plane\000", 1551184160)
		methodProjection[13] = cVariantTypeProjection.get_builtin_method("flipped_y\000", 4212530932)
		methodProjection[14] = cVariantTypeProjection.get_builtin_method("jitter_offseted\000", 2448438599)
		methodProjection[15] = cVariantTypeProjection.get_builtin_method("get_fovy\000", 3514207532)
		methodProjection[16] = cVariantTypeProjection.get_builtin_method("get_z_far\000", 466405837)
		methodProjection[17] = cVariantTypeProjection.get_builtin_method("get_z_near\000", 466405837)
		methodProjection[18] = cVariantTypeProjection.get_builtin_method("get_aspect\000", 466405837)
		methodProjection[19] = cVariantTypeProjection.get_builtin_method("get_fov\000", 466405837)
		methodProjection[20] = cVariantTypeProjection.get_builtin_method("is_orthogonal\000", 3918633141)
		methodProjection[21] = cVariantTypeProjection.get_builtin_method("get_viewport_half_extents\000", 2428350749)
		methodProjection[22] = cVariantTypeProjection.get_builtin_method("get_far_plane_half_extents\000", 2428350749)
		methodProjection[23] = cVariantTypeProjection.get_builtin_method("inverse\000", 4212530932)
		methodProjection[24] = cVariantTypeProjection.get_builtin_method("get_pixels_per_meter\000", 4103005248)
		methodProjection[25] = cVariantTypeProjection.get_builtin_method("get_lod_multiplier\000", 466405837)
		methodColor[0] = cVariantTypeColor.get_builtin_method("to_argb32\000", 3173160232)
		methodColor[1] = cVariantTypeColor.get_builtin_method("to_abgr32\000", 3173160232)
		methodColor[2] = cVariantTypeColor.get_builtin_method("to_rgba32\000", 3173160232)
		methodColor[3] = cVariantTypeColor.get_builtin_method("to_argb64\000", 3173160232)
		methodColor[4] = cVariantTypeColor.get_builtin_method("to_abgr64\000", 3173160232)
		methodColor[5] = cVariantTypeColor.get_builtin_method("to_rgba64\000", 3173160232)
		methodColor[6] = cVariantTypeColor.get_builtin_method("to_html\000", 3429816538)
		methodColor[7] = cVariantTypeColor.get_builtin_method("clamp\000", 105651410)
		methodColor[8] = cVariantTypeColor.get_builtin_method("inverted\000", 3334027602)
		methodColor[9] = cVariantTypeColor.get_builtin_method("lerp\000", 402949615)
		methodColor[10] = cVariantTypeColor.get_builtin_method("lightened\000", 1466039168)
		methodColor[11] = cVariantTypeColor.get_builtin_method("darkened\000", 1466039168)
		methodColor[12] = cVariantTypeColor.get_builtin_method("blend\000", 3803690977)
		methodColor[13] = cVariantTypeColor.get_builtin_method("get_luminance\000", 466405837)
		methodColor[14] = cVariantTypeColor.get_builtin_method("srgb_to_linear\000", 3334027602)
		methodColor[15] = cVariantTypeColor.get_builtin_method("linear_to_srgb\000", 3334027602)
		methodColor[16] = cVariantTypeColor.get_builtin_method("is_equal_approx\000", 3167426256)
		methodColor[17] = cVariantTypeColor.get_builtin_method("hex\000", 351421375)
		methodColor[18] = cVariantTypeColor.get_builtin_method("hex64\000", 351421375)
		methodColor[19] = cVariantTypeColor.get_builtin_method("html\000", 2500054655)
		methodColor[20] = cVariantTypeColor.get_builtin_method("html_is_valid\000", 2942997125)
		methodColor[21] = cVariantTypeColor.get_builtin_method("find_named_color\000", 1116350977)
		methodColor[22] = cVariantTypeColor.get_builtin_method("get_named_color_count\000", 911363434)
		methodColor[23] = cVariantTypeColor.get_builtin_method("get_named_color_name\000", 897497541)
		methodColor[24] = cVariantTypeColor.get_builtin_method("get_named_color\000", 351421375)
		methodColor[25] = cVariantTypeColor.get_builtin_method("from_string\000", 3755044230)
		methodColor[26] = cVariantTypeColor.get_builtin_method("from_hsv\000", 1573799446)
		methodColor[27] = cVariantTypeColor.get_builtin_method("from_ok_hsl\000", 1573799446)
		methodColor[28] = cVariantTypeColor.get_builtin_method("from_rgbe9995\000", 351421375)
		methodName[0] = cVariantTypeStringName.get_builtin_method("hash\000", 3173160232)
		methodNodePath[0] = cVariantTypeNodePath.get_builtin_method("is_absolute\000", 3918633141)
		methodNodePath[1] = cVariantTypeNodePath.get_builtin_method("get_name_count\000", 3173160232)
		methodNodePath[2] = cVariantTypeNodePath.get_builtin_method("get_name\000", 2948586938)
		methodNodePath[3] = cVariantTypeNodePath.get_builtin_method("get_subname_count\000", 3173160232)
		methodNodePath[4] = cVariantTypeNodePath.get_builtin_method("hash\000", 3173160232)
		methodNodePath[5] = cVariantTypeNodePath.get_builtin_method("get_subname\000", 2948586938)
		methodNodePath[6] = cVariantTypeNodePath.get_builtin_method("get_concatenated_names\000", 1825232092)
		methodNodePath[7] = cVariantTypeNodePath.get_builtin_method("get_concatenated_subnames\000", 1825232092)
		methodNodePath[8] = cVariantTypeNodePath.get_builtin_method("get_as_property_path\000", 1598598043)
		methodNodePath[9] = cVariantTypeNodePath.get_builtin_method("is_empty\000", 3918633141)
		methodRID[0] = cVariantTypeRID.get_builtin_method("is_valid\000", 3918633141)
		methodRID[1] = cVariantTypeRID.get_builtin_method("get_id\000", 3173160232)
		methodCallable[0] = cVariantTypeCallable.get_builtin_method("is_null\000", 3918633141)
		methodCallable[1] = cVariantTypeCallable.get_builtin_method("is_custom\000", 3918633141)
		methodCallable[2] = cVariantTypeCallable.get_builtin_method("is_standard\000", 3918633141)
		methodCallable[3] = cVariantTypeCallable.get_builtin_method("is_valid\000", 3918633141)
		methodCallable[4] = cVariantTypeCallable.get_builtin_method("get_object\000", 4008621732)
		methodCallable[5] = cVariantTypeCallable.get_builtin_method("get_object_id\000", 3173160232)
		methodCallable[6] = cVariantTypeCallable.get_builtin_method("get_method\000", 1825232092)
		methodCallable[7] = cVariantTypeCallable.get_builtin_method("hash\000", 3173160232)
		methodCallable[8] = cVariantTypeCallable.get_builtin_method("unbind\000", 755001590)
		methodCallable[9] = cVariantTypeCallable.get_builtin_method("call\000", 3643564216)
		methodCallable[10] = cVariantTypeCallable.get_builtin_method("call_deferred\000", 3286317445)
		methodCallable[11] = cVariantTypeCallable.get_builtin_method("rpc\000", 3286317445)
		methodCallable[12] = cVariantTypeCallable.get_builtin_method("rpc_id\000", 2270047679)
		methodCallable[13] = cVariantTypeCallable.get_builtin_method("bind\000", 3224143119)
		methodSignal[0] = cVariantTypeSignal.get_builtin_method("is_null\000", 3918633141)
		methodSignal[1] = cVariantTypeSignal.get_builtin_method("get_object\000", 4008621732)
		methodSignal[2] = cVariantTypeSignal.get_builtin_method("get_object_id\000", 3173160232)
		methodSignal[3] = cVariantTypeSignal.get_builtin_method("get_name\000", 1825232092)
		methodSignal[4] = cVariantTypeSignal.get_builtin_method("connect\000", 979702392)
		methodSignal[5] = cVariantTypeSignal.get_builtin_method("disconnect\000", 3470848906)
		methodSignal[6] = cVariantTypeSignal.get_builtin_method("is_connected\000", 4129521963)
		methodSignal[7] = cVariantTypeSignal.get_builtin_method("get_connections\000", 4144163970)
		methodSignal[8] = cVariantTypeSignal.get_builtin_method("emit\000", 3286317445)
		methodDictionary[0] = cVariantTypeDictionary.get_builtin_method("size\000", 3173160232)
		methodDictionary[1] = cVariantTypeDictionary.get_builtin_method("is_empty\000", 3918633141)
		methodDictionary[2] = cVariantTypeDictionary.get_builtin_method("clear\000", 3218959716)
		methodDictionary[3] = cVariantTypeDictionary.get_builtin_method("merge\000", 2079548978)
		methodDictionary[4] = cVariantTypeDictionary.get_builtin_method("has\000", 3680194679)
		methodDictionary[5] = cVariantTypeDictionary.get_builtin_method("has_all\000", 2988181878)
		methodDictionary[6] = cVariantTypeDictionary.get_builtin_method("erase\000", 1776646889)
		methodDictionary[7] = cVariantTypeDictionary.get_builtin_method("hash\000", 3173160232)
		methodDictionary[8] = cVariantTypeDictionary.get_builtin_method("keys\000", 4144163970)
		methodDictionary[9] = cVariantTypeDictionary.get_builtin_method("values\000", 4144163970)
		methodDictionary[10] = cVariantTypeDictionary.get_builtin_method("duplicate\000", 830099069)
		methodDictionary[11] = cVariantTypeDictionary.get_builtin_method("get\000", 2205440559)
		methodArray[0] = cVariantTypeArray.get_builtin_method("size\000", 3173160232)
		methodArray[1] = cVariantTypeArray.get_builtin_method("is_empty\000", 3918633141)
		methodArray[2] = cVariantTypeArray.get_builtin_method("clear\000", 3218959716)
		methodArray[3] = cVariantTypeArray.get_builtin_method("hash\000", 3173160232)
		methodArray[4] = cVariantTypeArray.get_builtin_method("push_back\000", 3316032543)
		methodArray[5] = cVariantTypeArray.get_builtin_method("push_front\000", 3316032543)
		methodArray[6] = cVariantTypeArray.get_builtin_method("append\000", 3316032543)
		methodArray[7] = cVariantTypeArray.get_builtin_method("append_array\000", 2307260970)
		methodArray[8] = cVariantTypeArray.get_builtin_method("resize\000", 848867239)
		methodArray[9] = cVariantTypeArray.get_builtin_method("insert\000", 3176316662)
		methodArray[10] = cVariantTypeArray.get_builtin_method("remove_at\000", 2823966027)
		methodArray[11] = cVariantTypeArray.get_builtin_method("fill\000", 3316032543)
		methodArray[12] = cVariantTypeArray.get_builtin_method("erase\000", 3316032543)
		methodArray[13] = cVariantTypeArray.get_builtin_method("front\000", 1460142086)
		methodArray[14] = cVariantTypeArray.get_builtin_method("back\000", 1460142086)
		methodArray[15] = cVariantTypeArray.get_builtin_method("find\000", 2336346817)
		methodArray[16] = cVariantTypeArray.get_builtin_method("rfind\000", 2336346817)
		methodArray[17] = cVariantTypeArray.get_builtin_method("find_last\000", 1481661226)
		methodArray[18] = cVariantTypeArray.get_builtin_method("count\000", 1481661226)
		methodArray[19] = cVariantTypeArray.get_builtin_method("has\000", 3680194679)
		methodArray[20] = cVariantTypeArray.get_builtin_method("pop_back\000", 1321915136)
		methodArray[21] = cVariantTypeArray.get_builtin_method("pop_front\000", 1321915136)
		methodArray[22] = cVariantTypeArray.get_builtin_method("pop_at\000", 3518259424)
		methodArray[23] = cVariantTypeArray.get_builtin_method("sort\000", 3218959716)
		methodArray[24] = cVariantTypeArray.get_builtin_method("sort_custom\000", 3470848906)
		methodArray[25] = cVariantTypeArray.get_builtin_method("shuffle\000", 3218959716)
		methodArray[26] = cVariantTypeArray.get_builtin_method("bsearch\000", 2634019015)
		methodArray[27] = cVariantTypeArray.get_builtin_method("bsearch_custom\000", 135832563)
		methodArray[28] = cVariantTypeArray.get_builtin_method("reverse\000", 3218959716)
		methodArray[29] = cVariantTypeArray.get_builtin_method("duplicate\000", 636440122)
		methodArray[30] = cVariantTypeArray.get_builtin_method("slice\000", 1393718243)
		methodArray[31] = cVariantTypeArray.get_builtin_method("filter\000", 4075186556)
		methodArray[32] = cVariantTypeArray.get_builtin_method("map\000", 4075186556)
		methodArray[33] = cVariantTypeArray.get_builtin_method("reduce\000", 4272450342)
		methodArray[34] = cVariantTypeArray.get_builtin_method("any\000", 4129521963)
		methodArray[35] = cVariantTypeArray.get_builtin_method("all\000", 4129521963)
		methodArray[36] = cVariantTypeArray.get_builtin_method("max\000", 1460142086)
		methodArray[37] = cVariantTypeArray.get_builtin_method("min\000", 1460142086)
		methodAESContext[0] = classDB.get_method_bind("AESContext\000", "start\000", 3167574919)
		methodAESContext[1] = classDB.get_method_bind("AESContext\000", "update\000", 527836100)
		methodAESContext[2] = classDB.get_method_bind("AESContext\000", "get_iv_state\000", 2115431945)
		methodAESContext[3] = classDB.get_method_bind("AESContext\000", "finish\000", 3218959716)
		methodAStar2D[0] = classDB.get_method_bind("AStar2D\000", "get_available_point_id\000", 3905245786)
		methodAStar2D[1] = classDB.get_method_bind("AStar2D\000", "add_point\000", 3370185124)
		methodAStar2D[2] = classDB.get_method_bind("AStar2D\000", "get_point_position\000", 2299179447)
		methodAStar2D[3] = classDB.get_method_bind("AStar2D\000", "set_point_position\000", 163021252)
		methodAStar2D[4] = classDB.get_method_bind("AStar2D\000", "get_point_weight_scale\000", 2339986948)
		methodAStar2D[5] = classDB.get_method_bind("AStar2D\000", "set_point_weight_scale\000", 1602489585)
		methodAStar2D[6] = classDB.get_method_bind("AStar2D\000", "remove_point\000", 1286410249)
		methodAStar2D[7] = classDB.get_method_bind("AStar2D\000", "has_point\000", 1116898809)
		methodAStar2D[8] = classDB.get_method_bind("AStar2D\000", "get_point_connections\000", 2865087369)
		methodAStar2D[9] = classDB.get_method_bind("AStar2D\000", "get_point_ids\000", 3851388692)
		methodAStar2D[10] = classDB.get_method_bind("AStar2D\000", "set_point_disabled\000", 4023243586)
		methodAStar2D[11] = classDB.get_method_bind("AStar2D\000", "is_point_disabled\000", 1116898809)
		methodAStar2D[12] = classDB.get_method_bind("AStar2D\000", "connect_points\000", 3785370599)
		methodAStar2D[13] = classDB.get_method_bind("AStar2D\000", "disconnect_points\000", 3785370599)
		methodAStar2D[14] = classDB.get_method_bind("AStar2D\000", "are_points_connected\000", 4063588998)
		methodAStar2D[15] = classDB.get_method_bind("AStar2D\000", "get_point_count\000", 3905245786)
		methodAStar2D[16] = classDB.get_method_bind("AStar2D\000", "get_point_capacity\000", 3905245786)
		methodAStar2D[17] = classDB.get_method_bind("AStar2D\000", "reserve_space\000", 1286410249)
		methodAStar2D[18] = classDB.get_method_bind("AStar2D\000", "clear\000", 3218959716)
		methodAStar2D[19] = classDB.get_method_bind("AStar2D\000", "get_closest_point\000", 2300324924)
		methodAStar2D[20] = classDB.get_method_bind("AStar2D\000", "get_closest_position_in_segment\000", 2656412154)
		methodAStar2D[21] = classDB.get_method_bind("AStar2D\000", "get_point_path\000", 281625055)
		methodAStar2D[22] = classDB.get_method_bind("AStar2D\000", "get_id_path\000", 3404614526)
		methodAStar3D[0] = classDB.get_method_bind("AStar3D\000", "get_available_point_id\000", 3905245786)
		methodAStar3D[1] = classDB.get_method_bind("AStar3D\000", "add_point\000", 2920922839)
		methodAStar3D[2] = classDB.get_method_bind("AStar3D\000", "get_point_position\000", 711720468)
		methodAStar3D[3] = classDB.get_method_bind("AStar3D\000", "set_point_position\000", 1530502735)
		methodAStar3D[4] = classDB.get_method_bind("AStar3D\000", "get_point_weight_scale\000", 2339986948)
		methodAStar3D[5] = classDB.get_method_bind("AStar3D\000", "set_point_weight_scale\000", 1602489585)
		methodAStar3D[6] = classDB.get_method_bind("AStar3D\000", "remove_point\000", 1286410249)
		methodAStar3D[7] = classDB.get_method_bind("AStar3D\000", "has_point\000", 1116898809)
		methodAStar3D[8] = classDB.get_method_bind("AStar3D\000", "get_point_connections\000", 2865087369)
		methodAStar3D[9] = classDB.get_method_bind("AStar3D\000", "get_point_ids\000", 3851388692)
		methodAStar3D[10] = classDB.get_method_bind("AStar3D\000", "set_point_disabled\000", 4023243586)
		methodAStar3D[11] = classDB.get_method_bind("AStar3D\000", "is_point_disabled\000", 1116898809)
		methodAStar3D[12] = classDB.get_method_bind("AStar3D\000", "connect_points\000", 3785370599)
		methodAStar3D[13] = classDB.get_method_bind("AStar3D\000", "disconnect_points\000", 3785370599)
		methodAStar3D[14] = classDB.get_method_bind("AStar3D\000", "are_points_connected\000", 4063588998)
		methodAStar3D[15] = classDB.get_method_bind("AStar3D\000", "get_point_count\000", 3905245786)
		methodAStar3D[16] = classDB.get_method_bind("AStar3D\000", "get_point_capacity\000", 3905245786)
		methodAStar3D[17] = classDB.get_method_bind("AStar3D\000", "reserve_space\000", 1286410249)
		methodAStar3D[18] = classDB.get_method_bind("AStar3D\000", "clear\000", 3218959716)
		methodAStar3D[19] = classDB.get_method_bind("AStar3D\000", "get_closest_point\000", 3241074317)
		methodAStar3D[20] = classDB.get_method_bind("AStar3D\000", "get_closest_position_in_segment\000", 192990374)
		methodAStar3D[21] = classDB.get_method_bind("AStar3D\000", "get_point_path\000", 880819742)
		methodAStar3D[22] = classDB.get_method_bind("AStar3D\000", "get_id_path\000", 3404614526)
		methodAcceptDialog[0] = classDB.get_method_bind("AcceptDialog\000", "get_ok_button\000", 1856205918)
		methodAcceptDialog[1] = classDB.get_method_bind("AcceptDialog\000", "get_label\000", 566733104)
		methodAcceptDialog[2] = classDB.get_method_bind("AcceptDialog\000", "set_hide_on_ok\000", 2586408642)
		methodAcceptDialog[3] = classDB.get_method_bind("AcceptDialog\000", "get_hide_on_ok\000", 36873697)
		methodAcceptDialog[4] = classDB.get_method_bind("AcceptDialog\000", "set_close_on_escape\000", 2586408642)
		methodAcceptDialog[5] = classDB.get_method_bind("AcceptDialog\000", "get_close_on_escape\000", 36873697)
		methodAcceptDialog[6] = classDB.get_method_bind("AcceptDialog\000", "add_button\000", 4158837846)
		methodAcceptDialog[7] = classDB.get_method_bind("AcceptDialog\000", "add_cancel_button\000", 242045556)
		methodAcceptDialog[8] = classDB.get_method_bind("AcceptDialog\000", "remove_button\000", 1496901182)
		methodAcceptDialog[9] = classDB.get_method_bind("AcceptDialog\000", "register_text_enter\000", 1496901182)
		methodAcceptDialog[10] = classDB.get_method_bind("AcceptDialog\000", "set_text\000", 83702148)
		methodAcceptDialog[11] = classDB.get_method_bind("AcceptDialog\000", "get_text\000", 201670096)
		methodAcceptDialog[12] = classDB.get_method_bind("AcceptDialog\000", "set_autowrap\000", 2586408642)
		methodAcceptDialog[13] = classDB.get_method_bind("AcceptDialog\000", "has_autowrap\000", 2240911060)
		methodAcceptDialog[14] = classDB.get_method_bind("AcceptDialog\000", "set_ok_button_text\000", 83702148)
		methodAcceptDialog[15] = classDB.get_method_bind("AcceptDialog\000", "get_ok_button_text\000", 201670096)
		methodAnimatableBody2D[0] = classDB.get_method_bind("AnimatableBody2D\000", "set_sync_to_physics\000", 2586408642)
		methodAnimatableBody2D[1] = classDB.get_method_bind("AnimatableBody2D\000", "is_sync_to_physics_enabled\000", 36873697)
		methodAnimatableBody3D[0] = classDB.get_method_bind("AnimatableBody3D\000", "set_sync_to_physics\000", 2586408642)
		methodAnimatableBody3D[1] = classDB.get_method_bind("AnimatableBody3D\000", "is_sync_to_physics_enabled\000", 36873697)
		methodAnimatedSprite2D[0] = classDB.get_method_bind("AnimatedSprite2D\000", "set_sprite_frames\000", 905781144)
		methodAnimatedSprite2D[1] = classDB.get_method_bind("AnimatedSprite2D\000", "get_sprite_frames\000", 3804851214)
		methodAnimatedSprite2D[2] = classDB.get_method_bind("AnimatedSprite2D\000", "set_animation\000", 3304788590)
		methodAnimatedSprite2D[3] = classDB.get_method_bind("AnimatedSprite2D\000", "get_animation\000", 2002593661)
		methodAnimatedSprite2D[4] = classDB.get_method_bind("AnimatedSprite2D\000", "set_playing\000", 2586408642)
		methodAnimatedSprite2D[5] = classDB.get_method_bind("AnimatedSprite2D\000", "is_playing\000", 36873697)
		methodAnimatedSprite2D[6] = classDB.get_method_bind("AnimatedSprite2D\000", "play\000", 1975901163)
		methodAnimatedSprite2D[7] = classDB.get_method_bind("AnimatedSprite2D\000", "stop\000", 3218959716)
		methodAnimatedSprite2D[8] = classDB.get_method_bind("AnimatedSprite2D\000", "set_centered\000", 2586408642)
		methodAnimatedSprite2D[9] = classDB.get_method_bind("AnimatedSprite2D\000", "is_centered\000", 36873697)
		methodAnimatedSprite2D[10] = classDB.get_method_bind("AnimatedSprite2D\000", "set_offset\000", 743155724)
		methodAnimatedSprite2D[11] = classDB.get_method_bind("AnimatedSprite2D\000", "get_offset\000", 3341600327)
		methodAnimatedSprite2D[12] = classDB.get_method_bind("AnimatedSprite2D\000", "set_flip_h\000", 2586408642)
		methodAnimatedSprite2D[13] = classDB.get_method_bind("AnimatedSprite2D\000", "is_flipped_h\000", 36873697)
		methodAnimatedSprite2D[14] = classDB.get_method_bind("AnimatedSprite2D\000", "set_flip_v\000", 2586408642)
		methodAnimatedSprite2D[15] = classDB.get_method_bind("AnimatedSprite2D\000", "is_flipped_v\000", 36873697)
		methodAnimatedSprite2D[16] = classDB.get_method_bind("AnimatedSprite2D\000", "set_frame\000", 1286410249)
		methodAnimatedSprite2D[17] = classDB.get_method_bind("AnimatedSprite2D\000", "get_frame\000", 3905245786)
		methodAnimatedSprite2D[18] = classDB.get_method_bind("AnimatedSprite2D\000", "set_speed_scale\000", 373806689)
		methodAnimatedSprite2D[19] = classDB.get_method_bind("AnimatedSprite2D\000", "get_speed_scale\000", 1740695150)
		methodAnimatedSprite3D[0] = classDB.get_method_bind("AnimatedSprite3D\000", "set_sprite_frames\000", 905781144)
		methodAnimatedSprite3D[1] = classDB.get_method_bind("AnimatedSprite3D\000", "get_sprite_frames\000", 3804851214)
		methodAnimatedSprite3D[2] = classDB.get_method_bind("AnimatedSprite3D\000", "set_animation\000", 3304788590)
		methodAnimatedSprite3D[3] = classDB.get_method_bind("AnimatedSprite3D\000", "get_animation\000", 2002593661)
		methodAnimatedSprite3D[4] = classDB.get_method_bind("AnimatedSprite3D\000", "play\000", 1421762485)
		methodAnimatedSprite3D[5] = classDB.get_method_bind("AnimatedSprite3D\000", "stop\000", 3218959716)
		methodAnimatedSprite3D[6] = classDB.get_method_bind("AnimatedSprite3D\000", "is_playing\000", 36873697)
		methodAnimatedSprite3D[7] = classDB.get_method_bind("AnimatedSprite3D\000", "set_frame\000", 1286410249)
		methodAnimatedSprite3D[8] = classDB.get_method_bind("AnimatedSprite3D\000", "get_frame\000", 3905245786)
		methodAnimatedTexture[0] = classDB.get_method_bind("AnimatedTexture\000", "set_frames\000", 1286410249)
		methodAnimatedTexture[1] = classDB.get_method_bind("AnimatedTexture\000", "get_frames\000", 3905245786)
		methodAnimatedTexture[2] = classDB.get_method_bind("AnimatedTexture\000", "set_current_frame\000", 1286410249)
		methodAnimatedTexture[3] = classDB.get_method_bind("AnimatedTexture\000", "get_current_frame\000", 3905245786)
		methodAnimatedTexture[4] = classDB.get_method_bind("AnimatedTexture\000", "set_pause\000", 2586408642)
		methodAnimatedTexture[5] = classDB.get_method_bind("AnimatedTexture\000", "get_pause\000", 36873697)
		methodAnimatedTexture[6] = classDB.get_method_bind("AnimatedTexture\000", "set_oneshot\000", 2586408642)
		methodAnimatedTexture[7] = classDB.get_method_bind("AnimatedTexture\000", "get_oneshot\000", 36873697)
		methodAnimatedTexture[8] = classDB.get_method_bind("AnimatedTexture\000", "set_fps\000", 373806689)
		methodAnimatedTexture[9] = classDB.get_method_bind("AnimatedTexture\000", "get_fps\000", 1740695150)
		methodAnimatedTexture[10] = classDB.get_method_bind("AnimatedTexture\000", "set_frame_texture\000", 666127730)
		methodAnimatedTexture[11] = classDB.get_method_bind("AnimatedTexture\000", "get_frame_texture\000", 3536238170)
		methodAnimatedTexture[12] = classDB.get_method_bind("AnimatedTexture\000", "set_frame_delay\000", 1602489585)
		methodAnimatedTexture[13] = classDB.get_method_bind("AnimatedTexture\000", "get_frame_delay\000", 2339986948)
		methodAnimation[0] = classDB.get_method_bind("Animation\000", "add_track\000", 2393815928)
		methodAnimation[1] = classDB.get_method_bind("Animation\000", "remove_track\000", 1286410249)
		methodAnimation[2] = classDB.get_method_bind("Animation\000", "get_track_count\000", 3905245786)
		methodAnimation[3] = classDB.get_method_bind("Animation\000", "track_get_type\000", 3445944217)
		methodAnimation[4] = classDB.get_method_bind("Animation\000", "track_get_path\000", 408788394)
		methodAnimation[5] = classDB.get_method_bind("Animation\000", "track_set_path\000", 2761262315)
		methodAnimation[6] = classDB.get_method_bind("Animation\000", "find_track\000", 245376003)
		methodAnimation[7] = classDB.get_method_bind("Animation\000", "track_move_up\000", 1286410249)
		methodAnimation[8] = classDB.get_method_bind("Animation\000", "track_move_down\000", 1286410249)
		methodAnimation[9] = classDB.get_method_bind("Animation\000", "track_move_to\000", 3937882851)
		methodAnimation[10] = classDB.get_method_bind("Animation\000", "track_swap\000", 3937882851)
		methodAnimation[11] = classDB.get_method_bind("Animation\000", "track_set_imported\000", 300928843)
		methodAnimation[12] = classDB.get_method_bind("Animation\000", "track_is_imported\000", 1116898809)
		methodAnimation[13] = classDB.get_method_bind("Animation\000", "track_set_enabled\000", 300928843)
		methodAnimation[14] = classDB.get_method_bind("Animation\000", "track_is_enabled\000", 1116898809)
		methodAnimation[15] = classDB.get_method_bind("Animation\000", "position_track_insert_key\000", 2540608232)
		methodAnimation[16] = classDB.get_method_bind("Animation\000", "rotation_track_insert_key\000", 4165004800)
		methodAnimation[17] = classDB.get_method_bind("Animation\000", "scale_track_insert_key\000", 2540608232)
		methodAnimation[18] = classDB.get_method_bind("Animation\000", "blend_shape_track_insert_key\000", 1534913637)
		methodAnimation[19] = classDB.get_method_bind("Animation\000", "track_insert_key\000", 1985425300)
		methodAnimation[20] = classDB.get_method_bind("Animation\000", "track_remove_key\000", 3937882851)
		methodAnimation[21] = classDB.get_method_bind("Animation\000", "track_remove_key_at_time\000", 1602489585)
		methodAnimation[22] = classDB.get_method_bind("Animation\000", "track_set_key_value\000", 2060538656)
		methodAnimation[23] = classDB.get_method_bind("Animation\000", "track_set_key_transition\000", 3506521499)
		methodAnimation[24] = classDB.get_method_bind("Animation\000", "track_set_key_time\000", 3506521499)
		methodAnimation[25] = classDB.get_method_bind("Animation\000", "track_get_key_transition\000", 3085491603)
		methodAnimation[26] = classDB.get_method_bind("Animation\000", "track_get_key_count\000", 923996154)
		methodAnimation[27] = classDB.get_method_bind("Animation\000", "track_get_key_value\000", 678354945)
		methodAnimation[28] = classDB.get_method_bind("Animation\000", "track_get_key_time\000", 3085491603)
		methodAnimation[29] = classDB.get_method_bind("Animation\000", "track_find_key\000", 2119071283)
		methodAnimation[30] = classDB.get_method_bind("Animation\000", "track_set_interpolation_type\000", 4112932513)
		methodAnimation[31] = classDB.get_method_bind("Animation\000", "track_get_interpolation_type\000", 1530756894)
		methodAnimation[32] = classDB.get_method_bind("Animation\000", "track_set_interpolation_loop_wrap\000", 300928843)
		methodAnimation[33] = classDB.get_method_bind("Animation\000", "track_get_interpolation_loop_wrap\000", 1116898809)
		methodAnimation[34] = classDB.get_method_bind("Animation\000", "track_is_compressed\000", 1116898809)
		methodAnimation[35] = classDB.get_method_bind("Animation\000", "value_track_set_update_mode\000", 2854058312)
		methodAnimation[36] = classDB.get_method_bind("Animation\000", "value_track_get_update_mode\000", 1440326473)
		methodAnimation[37] = classDB.get_method_bind("Animation\000", "value_track_get_key_indices\000", 139121918)
		methodAnimation[38] = classDB.get_method_bind("Animation\000", "value_track_interpolate\000", 491147702)
		methodAnimation[39] = classDB.get_method_bind("Animation\000", "method_track_get_key_indices\000", 139121918)
		methodAnimation[40] = classDB.get_method_bind("Animation\000", "method_track_get_name\000", 351665558)
		methodAnimation[41] = classDB.get_method_bind("Animation\000", "method_track_get_params\000", 2345056839)
		methodAnimation[42] = classDB.get_method_bind("Animation\000", "bezier_track_insert_key\000", 1057544502)
		methodAnimation[43] = classDB.get_method_bind("Animation\000", "bezier_track_set_key_value\000", 3506521499)
		methodAnimation[44] = classDB.get_method_bind("Animation\000", "bezier_track_set_key_in_handle\000", 1028302688)
		methodAnimation[45] = classDB.get_method_bind("Animation\000", "bezier_track_set_key_out_handle\000", 1028302688)
		methodAnimation[46] = classDB.get_method_bind("Animation\000", "bezier_track_get_key_value\000", 3085491603)
		methodAnimation[47] = classDB.get_method_bind("Animation\000", "bezier_track_get_key_in_handle\000", 3016396712)
		methodAnimation[48] = classDB.get_method_bind("Animation\000", "bezier_track_get_key_out_handle\000", 3016396712)
		methodAnimation[49] = classDB.get_method_bind("Animation\000", "bezier_track_interpolate\000", 1900462983)
		methodAnimation[50] = classDB.get_method_bind("Animation\000", "audio_track_insert_key\000", 3489962123)
		methodAnimation[51] = classDB.get_method_bind("Animation\000", "audio_track_set_key_stream\000", 3886397084)
		methodAnimation[52] = classDB.get_method_bind("Animation\000", "audio_track_set_key_start_offset\000", 3506521499)
		methodAnimation[53] = classDB.get_method_bind("Animation\000", "audio_track_set_key_end_offset\000", 3506521499)
		methodAnimation[54] = classDB.get_method_bind("Animation\000", "audio_track_get_key_stream\000", 635277205)
		methodAnimation[55] = classDB.get_method_bind("Animation\000", "audio_track_get_key_start_offset\000", 3085491603)
		methodAnimation[56] = classDB.get_method_bind("Animation\000", "audio_track_get_key_end_offset\000", 3085491603)
		methodAnimation[57] = classDB.get_method_bind("Animation\000", "animation_track_insert_key\000", 158676774)
		methodAnimation[58] = classDB.get_method_bind("Animation\000", "animation_track_set_key_animation\000", 117615382)
		methodAnimation[59] = classDB.get_method_bind("Animation\000", "animation_track_get_key_animation\000", 351665558)
		methodAnimation[60] = classDB.get_method_bind("Animation\000", "set_length\000", 373806689)
		methodAnimation[61] = classDB.get_method_bind("Animation\000", "get_length\000", 1740695150)
		methodAnimation[62] = classDB.get_method_bind("Animation\000", "set_loop_mode\000", 3155355575)
		methodAnimation[63] = classDB.get_method_bind("Animation\000", "get_loop_mode\000", 1988889481)
		methodAnimation[64] = classDB.get_method_bind("Animation\000", "set_step\000", 373806689)
		methodAnimation[65] = classDB.get_method_bind("Animation\000", "get_step\000", 1740695150)
		methodAnimation[66] = classDB.get_method_bind("Animation\000", "clear\000", 3218959716)
		methodAnimation[67] = classDB.get_method_bind("Animation\000", "copy_track\000", 148001024)
		methodAnimation[68] = classDB.get_method_bind("Animation\000", "compress\000", 1804059263)
		methodAnimationLibrary[0] = classDB.get_method_bind("AnimationLibrary\000", "add_animation\000", 1811855551)
		methodAnimationLibrary[1] = classDB.get_method_bind("AnimationLibrary\000", "remove_animation\000", 3304788590)
		methodAnimationLibrary[2] = classDB.get_method_bind("AnimationLibrary\000", "rename_animation\000", 3740211285)
		methodAnimationLibrary[3] = classDB.get_method_bind("AnimationLibrary\000", "has_animation\000", 2619796661)
		methodAnimationLibrary[4] = classDB.get_method_bind("AnimationLibrary\000", "get_animation\000", 2933122410)
		methodAnimationLibrary[5] = classDB.get_method_bind("AnimationLibrary\000", "get_animation_list\000", 3995934104)
		methodAnimationNode[0] = classDB.get_method_bind("AnimationNode\000", "get_input_count\000", 3905245786)
		methodAnimationNode[1] = classDB.get_method_bind("AnimationNode\000", "get_input_name\000", 990163283)
		methodAnimationNode[2] = classDB.get_method_bind("AnimationNode\000", "add_input\000", 83702148)
		methodAnimationNode[3] = classDB.get_method_bind("AnimationNode\000", "remove_input\000", 1286410249)
		methodAnimationNode[4] = classDB.get_method_bind("AnimationNode\000", "set_filter_path\000", 3868023870)
		methodAnimationNode[5] = classDB.get_method_bind("AnimationNode\000", "is_path_filtered\000", 861721659)
		methodAnimationNode[6] = classDB.get_method_bind("AnimationNode\000", "set_filter_enabled\000", 2586408642)
		methodAnimationNode[7] = classDB.get_method_bind("AnimationNode\000", "is_filter_enabled\000", 36873697)
		methodAnimationNode[8] = classDB.get_method_bind("AnimationNode\000", "blend_animation\000", 592042552)
		methodAnimationNode[9] = classDB.get_method_bind("AnimationNode\000", "blend_node\000", 308530085)
		methodAnimationNode[10] = classDB.get_method_bind("AnimationNode\000", "blend_input\000", 1365393708)
		methodAnimationNode[11] = classDB.get_method_bind("AnimationNode\000", "set_parameter\000", 3776071444)
		methodAnimationNode[12] = classDB.get_method_bind("AnimationNode\000", "get_parameter\000", 2760726917)
		methodAnimationNodeAnimation[0] = classDB.get_method_bind("AnimationNodeAnimation\000", "set_animation\000", 3304788590)
		methodAnimationNodeAnimation[1] = classDB.get_method_bind("AnimationNodeAnimation\000", "get_animation\000", 2002593661)
		methodAnimationNodeAnimation[2] = classDB.get_method_bind("AnimationNodeAnimation\000", "set_play_mode\000", 3347718873)
		methodAnimationNodeAnimation[3] = classDB.get_method_bind("AnimationNodeAnimation\000", "get_play_mode\000", 2061244637)
		methodAnimationNodeBlendSpace1D[0] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "add_blend_point\000", 4069484420)
		methodAnimationNodeBlendSpace1D[1] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_blend_point_position\000", 1602489585)
		methodAnimationNodeBlendSpace1D[2] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_blend_point_position\000", 2339986948)
		methodAnimationNodeBlendSpace1D[3] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_blend_point_node\000", 4240341528)
		methodAnimationNodeBlendSpace1D[4] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_blend_point_node\000", 665599029)
		methodAnimationNodeBlendSpace1D[5] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "remove_blend_point\000", 1286410249)
		methodAnimationNodeBlendSpace1D[6] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_blend_point_count\000", 3905245786)
		methodAnimationNodeBlendSpace1D[7] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_min_space\000", 373806689)
		methodAnimationNodeBlendSpace1D[8] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_min_space\000", 1740695150)
		methodAnimationNodeBlendSpace1D[9] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_max_space\000", 373806689)
		methodAnimationNodeBlendSpace1D[10] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_max_space\000", 1740695150)
		methodAnimationNodeBlendSpace1D[11] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_snap\000", 373806689)
		methodAnimationNodeBlendSpace1D[12] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_snap\000", 1740695150)
		methodAnimationNodeBlendSpace1D[13] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_value_label\000", 83702148)
		methodAnimationNodeBlendSpace1D[14] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "get_value_label\000", 201670096)
		methodAnimationNodeBlendSpace1D[15] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeBlendSpace1D[16] = classDB.get_method_bind("AnimationNodeBlendSpace1D\000", "is_using_sync\000", 36873697)
		methodAnimationNodeBlendSpace2D[0] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "add_blend_point\000", 1533588937)
		methodAnimationNodeBlendSpace2D[1] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_blend_point_position\000", 163021252)
		methodAnimationNodeBlendSpace2D[2] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_blend_point_position\000", 2299179447)
		methodAnimationNodeBlendSpace2D[3] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_blend_point_node\000", 4240341528)
		methodAnimationNodeBlendSpace2D[4] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_blend_point_node\000", 665599029)
		methodAnimationNodeBlendSpace2D[5] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "remove_blend_point\000", 1286410249)
		methodAnimationNodeBlendSpace2D[6] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_blend_point_count\000", 3905245786)
		methodAnimationNodeBlendSpace2D[7] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "add_triangle\000", 642454959)
		methodAnimationNodeBlendSpace2D[8] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_triangle_point\000", 50157827)
		methodAnimationNodeBlendSpace2D[9] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "remove_triangle\000", 1286410249)
		methodAnimationNodeBlendSpace2D[10] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_triangle_count\000", 3905245786)
		methodAnimationNodeBlendSpace2D[11] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_min_space\000", 743155724)
		methodAnimationNodeBlendSpace2D[12] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_min_space\000", 3341600327)
		methodAnimationNodeBlendSpace2D[13] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_max_space\000", 743155724)
		methodAnimationNodeBlendSpace2D[14] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_max_space\000", 3341600327)
		methodAnimationNodeBlendSpace2D[15] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_snap\000", 743155724)
		methodAnimationNodeBlendSpace2D[16] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_snap\000", 3341600327)
		methodAnimationNodeBlendSpace2D[17] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_x_label\000", 83702148)
		methodAnimationNodeBlendSpace2D[18] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_x_label\000", 201670096)
		methodAnimationNodeBlendSpace2D[19] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_y_label\000", 83702148)
		methodAnimationNodeBlendSpace2D[20] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_y_label\000", 201670096)
		methodAnimationNodeBlendSpace2D[21] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_auto_triangles\000", 2586408642)
		methodAnimationNodeBlendSpace2D[22] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_auto_triangles\000", 36873697)
		methodAnimationNodeBlendSpace2D[23] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_blend_mode\000", 81193520)
		methodAnimationNodeBlendSpace2D[24] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "get_blend_mode\000", 1398433632)
		methodAnimationNodeBlendSpace2D[25] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeBlendSpace2D[26] = classDB.get_method_bind("AnimationNodeBlendSpace2D\000", "is_using_sync\000", 36873697)
		methodAnimationNodeBlendTree[0] = classDB.get_method_bind("AnimationNodeBlendTree\000", "add_node\000", 2055804584)
		methodAnimationNodeBlendTree[1] = classDB.get_method_bind("AnimationNodeBlendTree\000", "get_node\000", 625644256)
		methodAnimationNodeBlendTree[2] = classDB.get_method_bind("AnimationNodeBlendTree\000", "remove_node\000", 3304788590)
		methodAnimationNodeBlendTree[3] = classDB.get_method_bind("AnimationNodeBlendTree\000", "rename_node\000", 3740211285)
		methodAnimationNodeBlendTree[4] = classDB.get_method_bind("AnimationNodeBlendTree\000", "has_node\000", 2619796661)
		methodAnimationNodeBlendTree[5] = classDB.get_method_bind("AnimationNodeBlendTree\000", "connect_node\000", 2168001410)
		methodAnimationNodeBlendTree[6] = classDB.get_method_bind("AnimationNodeBlendTree\000", "disconnect_node\000", 2415702435)
		methodAnimationNodeBlendTree[7] = classDB.get_method_bind("AnimationNodeBlendTree\000", "set_node_position\000", 1999414630)
		methodAnimationNodeBlendTree[8] = classDB.get_method_bind("AnimationNodeBlendTree\000", "get_node_position\000", 3100822709)
		methodAnimationNodeBlendTree[9] = classDB.get_method_bind("AnimationNodeBlendTree\000", "set_graph_offset\000", 743155724)
		methodAnimationNodeBlendTree[10] = classDB.get_method_bind("AnimationNodeBlendTree\000", "get_graph_offset\000", 3341600327)
		methodAnimationNodeOneShot[0] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_fadein_time\000", 373806689)
		methodAnimationNodeOneShot[1] = classDB.get_method_bind("AnimationNodeOneShot\000", "get_fadein_time\000", 1740695150)
		methodAnimationNodeOneShot[2] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_fadeout_time\000", 373806689)
		methodAnimationNodeOneShot[3] = classDB.get_method_bind("AnimationNodeOneShot\000", "get_fadeout_time\000", 1740695150)
		methodAnimationNodeOneShot[4] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_autorestart\000", 2586408642)
		methodAnimationNodeOneShot[5] = classDB.get_method_bind("AnimationNodeOneShot\000", "has_autorestart\000", 36873697)
		methodAnimationNodeOneShot[6] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_autorestart_delay\000", 373806689)
		methodAnimationNodeOneShot[7] = classDB.get_method_bind("AnimationNodeOneShot\000", "get_autorestart_delay\000", 1740695150)
		methodAnimationNodeOneShot[8] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_autorestart_random_delay\000", 373806689)
		methodAnimationNodeOneShot[9] = classDB.get_method_bind("AnimationNodeOneShot\000", "get_autorestart_random_delay\000", 1740695150)
		methodAnimationNodeOneShot[10] = classDB.get_method_bind("AnimationNodeOneShot\000", "set_mix_mode\000", 1018899799)
		methodAnimationNodeOneShot[11] = classDB.get_method_bind("AnimationNodeOneShot\000", "get_mix_mode\000", 3076550526)
		methodAnimationNodeStateMachine[0] = classDB.get_method_bind("AnimationNodeStateMachine\000", "add_node\000", 2055804584)
		methodAnimationNodeStateMachine[1] = classDB.get_method_bind("AnimationNodeStateMachine\000", "replace_node\000", 2559412862)
		methodAnimationNodeStateMachine[2] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_node\000", 625644256)
		methodAnimationNodeStateMachine[3] = classDB.get_method_bind("AnimationNodeStateMachine\000", "remove_node\000", 3304788590)
		methodAnimationNodeStateMachine[4] = classDB.get_method_bind("AnimationNodeStateMachine\000", "rename_node\000", 3740211285)
		methodAnimationNodeStateMachine[5] = classDB.get_method_bind("AnimationNodeStateMachine\000", "has_node\000", 2619796661)
		methodAnimationNodeStateMachine[6] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_node_name\000", 739213945)
		methodAnimationNodeStateMachine[7] = classDB.get_method_bind("AnimationNodeStateMachine\000", "set_node_position\000", 1999414630)
		methodAnimationNodeStateMachine[8] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_node_position\000", 3100822709)
		methodAnimationNodeStateMachine[9] = classDB.get_method_bind("AnimationNodeStateMachine\000", "has_transition\000", 471820014)
		methodAnimationNodeStateMachine[10] = classDB.get_method_bind("AnimationNodeStateMachine\000", "add_transition\000", 795486887)
		methodAnimationNodeStateMachine[11] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_transition\000", 4192381260)
		methodAnimationNodeStateMachine[12] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_transition_from\000", 659327637)
		methodAnimationNodeStateMachine[13] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_transition_to\000", 659327637)
		methodAnimationNodeStateMachine[14] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_transition_count\000", 3905245786)
		methodAnimationNodeStateMachine[15] = classDB.get_method_bind("AnimationNodeStateMachine\000", "remove_transition_by_index\000", 1286410249)
		methodAnimationNodeStateMachine[16] = classDB.get_method_bind("AnimationNodeStateMachine\000", "remove_transition\000", 3740211285)
		methodAnimationNodeStateMachine[17] = classDB.get_method_bind("AnimationNodeStateMachine\000", "set_graph_offset\000", 743155724)
		methodAnimationNodeStateMachine[18] = classDB.get_method_bind("AnimationNodeStateMachine\000", "get_graph_offset\000", 3341600327)
		methodAnimationNodeStateMachinePlayback[0] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "travel\000", 3304788590)
		methodAnimationNodeStateMachinePlayback[1] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "start\000", 3304788590)
		methodAnimationNodeStateMachinePlayback[2] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "stop\000", 3218959716)
		methodAnimationNodeStateMachinePlayback[3] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "is_playing\000", 36873697)
		methodAnimationNodeStateMachinePlayback[4] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "get_current_node\000", 2002593661)
		methodAnimationNodeStateMachinePlayback[5] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "get_current_play_position\000", 1740695150)
		methodAnimationNodeStateMachinePlayback[6] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "get_current_length\000", 1740695150)
		methodAnimationNodeStateMachinePlayback[7] = classDB.get_method_bind("AnimationNodeStateMachinePlayback\000", "get_travel_path\000", 1139954409)
		methodAnimationNodeStateMachineTransition[0] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_switch_mode\000", 2074906633)
		methodAnimationNodeStateMachineTransition[1] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_switch_mode\000", 2138562085)
		methodAnimationNodeStateMachineTransition[2] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_auto_advance\000", 2586408642)
		methodAnimationNodeStateMachineTransition[3] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "has_auto_advance\000", 36873697)
		methodAnimationNodeStateMachineTransition[4] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_advance_condition\000", 3304788590)
		methodAnimationNodeStateMachineTransition[5] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_advance_condition\000", 2002593661)
		methodAnimationNodeStateMachineTransition[6] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_xfade_time\000", 373806689)
		methodAnimationNodeStateMachineTransition[7] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_xfade_time\000", 1740695150)
		methodAnimationNodeStateMachineTransition[8] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_xfade_curve\000", 270443179)
		methodAnimationNodeStateMachineTransition[9] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_xfade_curve\000", 2460114913)
		methodAnimationNodeStateMachineTransition[10] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_disabled\000", 2586408642)
		methodAnimationNodeStateMachineTransition[11] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "is_disabled\000", 36873697)
		methodAnimationNodeStateMachineTransition[12] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_priority\000", 1286410249)
		methodAnimationNodeStateMachineTransition[13] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_priority\000", 3905245786)
		methodAnimationNodeStateMachineTransition[14] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_advance_expression\000", 83702148)
		methodAnimationNodeStateMachineTransition[15] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_advance_expression\000", 201670096)
		methodAnimationNodeStateMachineTransition[16] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "set_advance_expression_base_node\000", 1348162250)
		methodAnimationNodeStateMachineTransition[17] = classDB.get_method_bind("AnimationNodeStateMachineTransition\000", "get_advance_expression_base_node\000", 4075236667)
		methodAnimationNodeSync[0] = classDB.get_method_bind("AnimationNodeSync\000", "set_use_sync\000", 2586408642)
		methodAnimationNodeSync[1] = classDB.get_method_bind("AnimationNodeSync\000", "is_using_sync\000", 36873697)
		methodAnimationNodeTransition[0] = classDB.get_method_bind("AnimationNodeTransition\000", "set_enabled_inputs\000", 1286410249)
		methodAnimationNodeTransition[1] = classDB.get_method_bind("AnimationNodeTransition\000", "get_enabled_inputs\000", 2455072627)
		methodAnimationNodeTransition[2] = classDB.get_method_bind("AnimationNodeTransition\000", "set_input_as_auto_advance\000", 300928843)
		methodAnimationNodeTransition[3] = classDB.get_method_bind("AnimationNodeTransition\000", "is_input_set_as_auto_advance\000", 1116898809)
		methodAnimationNodeTransition[4] = classDB.get_method_bind("AnimationNodeTransition\000", "set_input_caption\000", 501894301)
		methodAnimationNodeTransition[5] = classDB.get_method_bind("AnimationNodeTransition\000", "get_input_caption\000", 844755477)
		methodAnimationNodeTransition[6] = classDB.get_method_bind("AnimationNodeTransition\000", "set_xfade_time\000", 373806689)
		methodAnimationNodeTransition[7] = classDB.get_method_bind("AnimationNodeTransition\000", "get_xfade_time\000", 1740695150)
		methodAnimationNodeTransition[8] = classDB.get_method_bind("AnimationNodeTransition\000", "set_xfade_curve\000", 270443179)
		methodAnimationNodeTransition[9] = classDB.get_method_bind("AnimationNodeTransition\000", "get_xfade_curve\000", 2460114913)
		methodAnimationNodeTransition[10] = classDB.get_method_bind("AnimationNodeTransition\000", "set_from_start\000", 2586408642)
		methodAnimationNodeTransition[11] = classDB.get_method_bind("AnimationNodeTransition\000", "is_from_start\000", 36873697)
		methodAnimationPlayer[0] = classDB.get_method_bind("AnimationPlayer\000", "add_animation_library\000", 618909818)
		methodAnimationPlayer[1] = classDB.get_method_bind("AnimationPlayer\000", "remove_animation_library\000", 3304788590)
		methodAnimationPlayer[2] = classDB.get_method_bind("AnimationPlayer\000", "rename_animation_library\000", 3740211285)
		methodAnimationPlayer[3] = classDB.get_method_bind("AnimationPlayer\000", "has_animation_library\000", 2619796661)
		methodAnimationPlayer[4] = classDB.get_method_bind("AnimationPlayer\000", "get_animation_library\000", 147342321)
		methodAnimationPlayer[5] = classDB.get_method_bind("AnimationPlayer\000", "get_animation_library_list\000", 3995934104)
		methodAnimationPlayer[6] = classDB.get_method_bind("AnimationPlayer\000", "has_animation\000", 2619796661)
		methodAnimationPlayer[7] = classDB.get_method_bind("AnimationPlayer\000", "get_animation\000", 2933122410)
		methodAnimationPlayer[8] = classDB.get_method_bind("AnimationPlayer\000", "get_animation_list\000", 1139954409)
		methodAnimationPlayer[9] = classDB.get_method_bind("AnimationPlayer\000", "animation_set_next\000", 3740211285)
		methodAnimationPlayer[10] = classDB.get_method_bind("AnimationPlayer\000", "animation_get_next\000", 1965194235)
		methodAnimationPlayer[11] = classDB.get_method_bind("AnimationPlayer\000", "set_blend_time\000", 3231131886)
		methodAnimationPlayer[12] = classDB.get_method_bind("AnimationPlayer\000", "get_blend_time\000", 1958752504)
		methodAnimationPlayer[13] = classDB.get_method_bind("AnimationPlayer\000", "set_default_blend_time\000", 373806689)
		methodAnimationPlayer[14] = classDB.get_method_bind("AnimationPlayer\000", "get_default_blend_time\000", 1740695150)
		methodAnimationPlayer[15] = classDB.get_method_bind("AnimationPlayer\000", "play\000", 2221377757)
		methodAnimationPlayer[16] = classDB.get_method_bind("AnimationPlayer\000", "play_backwards\000", 2787282401)
		methodAnimationPlayer[17] = classDB.get_method_bind("AnimationPlayer\000", "stop\000", 3216645846)
		methodAnimationPlayer[18] = classDB.get_method_bind("AnimationPlayer\000", "is_playing\000", 36873697)
		methodAnimationPlayer[19] = classDB.get_method_bind("AnimationPlayer\000", "set_current_animation\000", 83702148)
		methodAnimationPlayer[20] = classDB.get_method_bind("AnimationPlayer\000", "get_current_animation\000", 201670096)
		methodAnimationPlayer[21] = classDB.get_method_bind("AnimationPlayer\000", "set_assigned_animation\000", 83702148)
		methodAnimationPlayer[22] = classDB.get_method_bind("AnimationPlayer\000", "get_assigned_animation\000", 201670096)
		methodAnimationPlayer[23] = classDB.get_method_bind("AnimationPlayer\000", "queue\000", 3304788590)
		methodAnimationPlayer[24] = classDB.get_method_bind("AnimationPlayer\000", "get_queue\000", 2981934095)
		methodAnimationPlayer[25] = classDB.get_method_bind("AnimationPlayer\000", "clear_queue\000", 3218959716)
		methodAnimationPlayer[26] = classDB.get_method_bind("AnimationPlayer\000", "set_active\000", 2586408642)
		methodAnimationPlayer[27] = classDB.get_method_bind("AnimationPlayer\000", "is_active\000", 36873697)
		methodAnimationPlayer[28] = classDB.get_method_bind("AnimationPlayer\000", "set_speed_scale\000", 373806689)
		methodAnimationPlayer[29] = classDB.get_method_bind("AnimationPlayer\000", "get_speed_scale\000", 1740695150)
		methodAnimationPlayer[30] = classDB.get_method_bind("AnimationPlayer\000", "get_playing_speed\000", 1740695150)
		methodAnimationPlayer[31] = classDB.get_method_bind("AnimationPlayer\000", "set_autoplay\000", 83702148)
		methodAnimationPlayer[32] = classDB.get_method_bind("AnimationPlayer\000", "get_autoplay\000", 201670096)
		methodAnimationPlayer[33] = classDB.get_method_bind("AnimationPlayer\000", "set_reset_on_save_enabled\000", 2586408642)
		methodAnimationPlayer[34] = classDB.get_method_bind("AnimationPlayer\000", "is_reset_on_save_enabled\000", 36873697)
		methodAnimationPlayer[35] = classDB.get_method_bind("AnimationPlayer\000", "set_root\000", 1348162250)
		methodAnimationPlayer[36] = classDB.get_method_bind("AnimationPlayer\000", "get_root\000", 4075236667)
		methodAnimationPlayer[37] = classDB.get_method_bind("AnimationPlayer\000", "find_animation\000", 1559484580)
		methodAnimationPlayer[38] = classDB.get_method_bind("AnimationPlayer\000", "find_animation_library\000", 1559484580)
		methodAnimationPlayer[39] = classDB.get_method_bind("AnimationPlayer\000", "clear_caches\000", 3218959716)
		methodAnimationPlayer[40] = classDB.get_method_bind("AnimationPlayer\000", "set_process_callback\000", 1663839457)
		methodAnimationPlayer[41] = classDB.get_method_bind("AnimationPlayer\000", "get_process_callback\000", 4207496604)
		methodAnimationPlayer[42] = classDB.get_method_bind("AnimationPlayer\000", "set_method_call_mode\000", 3413514846)
		methodAnimationPlayer[43] = classDB.get_method_bind("AnimationPlayer\000", "get_method_call_mode\000", 3583380054)
		methodAnimationPlayer[44] = classDB.get_method_bind("AnimationPlayer\000", "set_movie_quit_on_finish_enabled\000", 2586408642)
		methodAnimationPlayer[45] = classDB.get_method_bind("AnimationPlayer\000", "is_movie_quit_on_finish_enabled\000", 36873697)
		methodAnimationPlayer[46] = classDB.get_method_bind("AnimationPlayer\000", "get_current_animation_position\000", 1740695150)
		methodAnimationPlayer[47] = classDB.get_method_bind("AnimationPlayer\000", "get_current_animation_length\000", 1740695150)
		methodAnimationPlayer[48] = classDB.get_method_bind("AnimationPlayer\000", "seek\000", 2087892650)
		methodAnimationPlayer[49] = classDB.get_method_bind("AnimationPlayer\000", "advance\000", 373806689)
		methodAnimationTree[0] = classDB.get_method_bind("AnimationTree\000", "set_active\000", 2586408642)
		methodAnimationTree[1] = classDB.get_method_bind("AnimationTree\000", "is_active\000", 36873697)
		methodAnimationTree[2] = classDB.get_method_bind("AnimationTree\000", "set_tree_root\000", 712869711)
		methodAnimationTree[3] = classDB.get_method_bind("AnimationTree\000", "get_tree_root\000", 1462070895)
		methodAnimationTree[4] = classDB.get_method_bind("AnimationTree\000", "set_process_callback\000", 1723352826)
		methodAnimationTree[5] = classDB.get_method_bind("AnimationTree\000", "get_process_callback\000", 891317132)
		methodAnimationTree[6] = classDB.get_method_bind("AnimationTree\000", "set_animation_player\000", 1348162250)
		methodAnimationTree[7] = classDB.get_method_bind("AnimationTree\000", "get_animation_player\000", 4075236667)
		methodAnimationTree[8] = classDB.get_method_bind("AnimationTree\000", "set_advance_expression_base_node\000", 1348162250)
		methodAnimationTree[9] = classDB.get_method_bind("AnimationTree\000", "get_advance_expression_base_node\000", 4075236667)
		methodAnimationTree[10] = classDB.get_method_bind("AnimationTree\000", "set_root_motion_track\000", 1348162250)
		methodAnimationTree[11] = classDB.get_method_bind("AnimationTree\000", "get_root_motion_track\000", 4075236667)
		methodAnimationTree[12] = classDB.get_method_bind("AnimationTree\000", "get_root_motion_transform\000", 3229777777)
		methodAnimationTree[13] = classDB.get_method_bind("AnimationTree\000", "rename_parameter\000", 3186203200)
		methodAnimationTree[14] = classDB.get_method_bind("AnimationTree\000", "advance\000", 373806689)
		methodArea2D[0] = classDB.get_method_bind("Area2D\000", "set_gravity_space_override_mode\000", 2879900038)
		methodArea2D[1] = classDB.get_method_bind("Area2D\000", "get_gravity_space_override_mode\000", 3990256304)
		methodArea2D[2] = classDB.get_method_bind("Area2D\000", "set_gravity_is_point\000", 2586408642)
		methodArea2D[3] = classDB.get_method_bind("Area2D\000", "is_gravity_a_point\000", 36873697)
		methodArea2D[4] = classDB.get_method_bind("Area2D\000", "set_gravity_point_distance_scale\000", 373806689)
		methodArea2D[5] = classDB.get_method_bind("Area2D\000", "get_gravity_point_distance_scale\000", 1740695150)
		methodArea2D[6] = classDB.get_method_bind("Area2D\000", "set_gravity_point_center\000", 743155724)
		methodArea2D[7] = classDB.get_method_bind("Area2D\000", "get_gravity_point_center\000", 3341600327)
		methodArea2D[8] = classDB.get_method_bind("Area2D\000", "set_gravity_direction\000", 743155724)
		methodArea2D[9] = classDB.get_method_bind("Area2D\000", "get_gravity_direction\000", 3341600327)
		methodArea2D[10] = classDB.get_method_bind("Area2D\000", "set_gravity\000", 373806689)
		methodArea2D[11] = classDB.get_method_bind("Area2D\000", "get_gravity\000", 1740695150)
		methodArea2D[12] = classDB.get_method_bind("Area2D\000", "set_linear_damp_space_override_mode\000", 2879900038)
		methodArea2D[13] = classDB.get_method_bind("Area2D\000", "get_linear_damp_space_override_mode\000", 3990256304)
		methodArea2D[14] = classDB.get_method_bind("Area2D\000", "set_angular_damp_space_override_mode\000", 2879900038)
		methodArea2D[15] = classDB.get_method_bind("Area2D\000", "get_angular_damp_space_override_mode\000", 3990256304)
		methodArea2D[16] = classDB.get_method_bind("Area2D\000", "set_linear_damp\000", 373806689)
		methodArea2D[17] = classDB.get_method_bind("Area2D\000", "get_linear_damp\000", 1740695150)
		methodArea2D[18] = classDB.get_method_bind("Area2D\000", "set_angular_damp\000", 373806689)
		methodArea2D[19] = classDB.get_method_bind("Area2D\000", "get_angular_damp\000", 1740695150)
		methodArea2D[20] = classDB.get_method_bind("Area2D\000", "set_priority\000", 373806689)
		methodArea2D[21] = classDB.get_method_bind("Area2D\000", "get_priority\000", 1740695150)
		methodArea2D[22] = classDB.get_method_bind("Area2D\000", "set_monitoring\000", 2586408642)
		methodArea2D[23] = classDB.get_method_bind("Area2D\000", "is_monitoring\000", 36873697)
		methodArea2D[24] = classDB.get_method_bind("Area2D\000", "set_monitorable\000", 2586408642)
		methodArea2D[25] = classDB.get_method_bind("Area2D\000", "is_monitorable\000", 36873697)
		methodArea2D[26] = classDB.get_method_bind("Area2D\000", "get_overlapping_bodies\000", 3995934104)
		methodArea2D[27] = classDB.get_method_bind("Area2D\000", "get_overlapping_areas\000", 3995934104)
		methodArea2D[28] = classDB.get_method_bind("Area2D\000", "overlaps_body\000", 3093956946)
		methodArea2D[29] = classDB.get_method_bind("Area2D\000", "overlaps_area\000", 3093956946)
		methodArea2D[30] = classDB.get_method_bind("Area2D\000", "set_audio_bus_name\000", 3304788590)
		methodArea2D[31] = classDB.get_method_bind("Area2D\000", "get_audio_bus_name\000", 2002593661)
		methodArea2D[32] = classDB.get_method_bind("Area2D\000", "set_audio_bus_override\000", 2586408642)
		methodArea2D[33] = classDB.get_method_bind("Area2D\000", "is_overriding_audio_bus\000", 36873697)
		methodArea3D[0] = classDB.get_method_bind("Area3D\000", "set_gravity_space_override_mode\000", 2311433571)
		methodArea3D[1] = classDB.get_method_bind("Area3D\000", "get_gravity_space_override_mode\000", 958191869)
		methodArea3D[2] = classDB.get_method_bind("Area3D\000", "set_gravity_is_point\000", 2586408642)
		methodArea3D[3] = classDB.get_method_bind("Area3D\000", "is_gravity_a_point\000", 36873697)
		methodArea3D[4] = classDB.get_method_bind("Area3D\000", "set_gravity_point_distance_scale\000", 373806689)
		methodArea3D[5] = classDB.get_method_bind("Area3D\000", "get_gravity_point_distance_scale\000", 1740695150)
		methodArea3D[6] = classDB.get_method_bind("Area3D\000", "set_gravity_point_center\000", 3460891852)
		methodArea3D[7] = classDB.get_method_bind("Area3D\000", "get_gravity_point_center\000", 3360562783)
		methodArea3D[8] = classDB.get_method_bind("Area3D\000", "set_gravity_direction\000", 3460891852)
		methodArea3D[9] = classDB.get_method_bind("Area3D\000", "get_gravity_direction\000", 3360562783)
		methodArea3D[10] = classDB.get_method_bind("Area3D\000", "set_gravity\000", 373806689)
		methodArea3D[11] = classDB.get_method_bind("Area3D\000", "get_gravity\000", 1740695150)
		methodArea3D[12] = classDB.get_method_bind("Area3D\000", "set_linear_damp_space_override_mode\000", 2311433571)
		methodArea3D[13] = classDB.get_method_bind("Area3D\000", "get_linear_damp_space_override_mode\000", 958191869)
		methodArea3D[14] = classDB.get_method_bind("Area3D\000", "set_angular_damp_space_override_mode\000", 2311433571)
		methodArea3D[15] = classDB.get_method_bind("Area3D\000", "get_angular_damp_space_override_mode\000", 958191869)
		methodArea3D[16] = classDB.get_method_bind("Area3D\000", "set_angular_damp\000", 373806689)
		methodArea3D[17] = classDB.get_method_bind("Area3D\000", "get_angular_damp\000", 1740695150)
		methodArea3D[18] = classDB.get_method_bind("Area3D\000", "set_linear_damp\000", 373806689)
		methodArea3D[19] = classDB.get_method_bind("Area3D\000", "get_linear_damp\000", 1740695150)
		methodArea3D[20] = classDB.get_method_bind("Area3D\000", "set_priority\000", 373806689)
		methodArea3D[21] = classDB.get_method_bind("Area3D\000", "get_priority\000", 1740695150)
		methodArea3D[22] = classDB.get_method_bind("Area3D\000", "set_wind_force_magnitude\000", 373806689)
		methodArea3D[23] = classDB.get_method_bind("Area3D\000", "get_wind_force_magnitude\000", 1740695150)
		methodArea3D[24] = classDB.get_method_bind("Area3D\000", "set_wind_attenuation_factor\000", 373806689)
		methodArea3D[25] = classDB.get_method_bind("Area3D\000", "get_wind_attenuation_factor\000", 1740695150)
		methodArea3D[26] = classDB.get_method_bind("Area3D\000", "set_wind_source_path\000", 1348162250)
		methodArea3D[27] = classDB.get_method_bind("Area3D\000", "get_wind_source_path\000", 4075236667)
		methodArea3D[28] = classDB.get_method_bind("Area3D\000", "set_monitorable\000", 2586408642)
		methodArea3D[29] = classDB.get_method_bind("Area3D\000", "is_monitorable\000", 36873697)
		methodArea3D[30] = classDB.get_method_bind("Area3D\000", "set_monitoring\000", 2586408642)
		methodArea3D[31] = classDB.get_method_bind("Area3D\000", "is_monitoring\000", 36873697)
		methodArea3D[32] = classDB.get_method_bind("Area3D\000", "get_overlapping_bodies\000", 3995934104)
		methodArea3D[33] = classDB.get_method_bind("Area3D\000", "get_overlapping_areas\000", 3995934104)
		methodArea3D[34] = classDB.get_method_bind("Area3D\000", "overlaps_body\000", 3093956946)
		methodArea3D[35] = classDB.get_method_bind("Area3D\000", "overlaps_area\000", 3093956946)
		methodArea3D[36] = classDB.get_method_bind("Area3D\000", "set_audio_bus_override\000", 2586408642)
		methodArea3D[37] = classDB.get_method_bind("Area3D\000", "is_overriding_audio_bus\000", 36873697)
		methodArea3D[38] = classDB.get_method_bind("Area3D\000", "set_audio_bus_name\000", 3304788590)
		methodArea3D[39] = classDB.get_method_bind("Area3D\000", "get_audio_bus_name\000", 2002593661)
		methodArea3D[40] = classDB.get_method_bind("Area3D\000", "set_use_reverb_bus\000", 2586408642)
		methodArea3D[41] = classDB.get_method_bind("Area3D\000", "is_using_reverb_bus\000", 36873697)
		methodArea3D[42] = classDB.get_method_bind("Area3D\000", "set_reverb_bus\000", 3304788590)
		methodArea3D[43] = classDB.get_method_bind("Area3D\000", "get_reverb_bus\000", 2002593661)
		methodArea3D[44] = classDB.get_method_bind("Area3D\000", "set_reverb_amount\000", 373806689)
		methodArea3D[45] = classDB.get_method_bind("Area3D\000", "get_reverb_amount\000", 1740695150)
		methodArea3D[46] = classDB.get_method_bind("Area3D\000", "set_reverb_uniformity\000", 373806689)
		methodArea3D[47] = classDB.get_method_bind("Area3D\000", "get_reverb_uniformity\000", 1740695150)
		methodArrayMesh[0] = classDB.get_method_bind("ArrayMesh\000", "add_blend_shape\000", 3304788590)
		methodArrayMesh[1] = classDB.get_method_bind("ArrayMesh\000", "get_blend_shape_count\000", 3905245786)
		methodArrayMesh[2] = classDB.get_method_bind("ArrayMesh\000", "get_blend_shape_name\000", 659327637)
		methodArrayMesh[3] = classDB.get_method_bind("ArrayMesh\000", "set_blend_shape_name\000", 3780747571)
		methodArrayMesh[4] = classDB.get_method_bind("ArrayMesh\000", "clear_blend_shapes\000", 3218959716)
		methodArrayMesh[5] = classDB.get_method_bind("ArrayMesh\000", "set_blend_shape_mode\000", 227983991)
		methodArrayMesh[6] = classDB.get_method_bind("ArrayMesh\000", "get_blend_shape_mode\000", 836485024)
		methodArrayMesh[7] = classDB.get_method_bind("ArrayMesh\000", "add_surface_from_arrays\000", 2970484840)
		methodArrayMesh[8] = classDB.get_method_bind("ArrayMesh\000", "clear_surfaces\000", 3218959716)
		methodArrayMesh[9] = classDB.get_method_bind("ArrayMesh\000", "surface_update_vertex_region\000", 3837166854)
		methodArrayMesh[10] = classDB.get_method_bind("ArrayMesh\000", "surface_update_attribute_region\000", 3837166854)
		methodArrayMesh[11] = classDB.get_method_bind("ArrayMesh\000", "surface_update_skin_region\000", 3837166854)
		methodArrayMesh[12] = classDB.get_method_bind("ArrayMesh\000", "surface_get_array_len\000", 923996154)
		methodArrayMesh[13] = classDB.get_method_bind("ArrayMesh\000", "surface_get_array_index_len\000", 923996154)
		methodArrayMesh[14] = classDB.get_method_bind("ArrayMesh\000", "surface_get_format\000", 923996154)
		methodArrayMesh[15] = classDB.get_method_bind("ArrayMesh\000", "surface_get_primitive_type\000", 4141943888)
		methodArrayMesh[16] = classDB.get_method_bind("ArrayMesh\000", "surface_find_by_name\000", 1321353865)
		methodArrayMesh[17] = classDB.get_method_bind("ArrayMesh\000", "surface_set_name\000", 501894301)
		methodArrayMesh[18] = classDB.get_method_bind("ArrayMesh\000", "surface_get_name\000", 844755477)
		methodArrayMesh[19] = classDB.get_method_bind("ArrayMesh\000", "regen_normal_maps\000", 3218959716)
		methodArrayMesh[20] = classDB.get_method_bind("ArrayMesh\000", "lightmap_unwrap\000", 1476641071)
		methodArrayMesh[21] = classDB.get_method_bind("ArrayMesh\000", "set_custom_aabb\000", 259215842)
		methodArrayMesh[22] = classDB.get_method_bind("ArrayMesh\000", "get_custom_aabb\000", 1068685055)
		methodArrayMesh[23] = classDB.get_method_bind("ArrayMesh\000", "set_shadow_mesh\000", 3377897901)
		methodArrayMesh[24] = classDB.get_method_bind("ArrayMesh\000", "get_shadow_mesh\000", 3206942465)
		methodArrayOccluder3D[0] = classDB.get_method_bind("ArrayOccluder3D\000", "set_arrays\000", 3233972621)
		methodArrayOccluder3D[1] = classDB.get_method_bind("ArrayOccluder3D\000", "set_vertices\000", 334873810)
		methodArrayOccluder3D[2] = classDB.get_method_bind("ArrayOccluder3D\000", "set_indices\000", 3614634198)
		methodAspectRatioContainer[0] = classDB.get_method_bind("AspectRatioContainer\000", "set_ratio\000", 373806689)
		methodAspectRatioContainer[1] = classDB.get_method_bind("AspectRatioContainer\000", "get_ratio\000", 1740695150)
		methodAspectRatioContainer[2] = classDB.get_method_bind("AspectRatioContainer\000", "set_stretch_mode\000", 1876743467)
		methodAspectRatioContainer[3] = classDB.get_method_bind("AspectRatioContainer\000", "get_stretch_mode\000", 3416449033)
		methodAspectRatioContainer[4] = classDB.get_method_bind("AspectRatioContainer\000", "set_alignment_horizontal\000", 2147829016)
		methodAspectRatioContainer[5] = classDB.get_method_bind("AspectRatioContainer\000", "get_alignment_horizontal\000", 3838875429)
		methodAspectRatioContainer[6] = classDB.get_method_bind("AspectRatioContainer\000", "set_alignment_vertical\000", 2147829016)
		methodAspectRatioContainer[7] = classDB.get_method_bind("AspectRatioContainer\000", "get_alignment_vertical\000", 3838875429)
		methodAtlasTexture[0] = classDB.get_method_bind("AtlasTexture\000", "set_atlas\000", 4051416890)
		methodAtlasTexture[1] = classDB.get_method_bind("AtlasTexture\000", "get_atlas\000", 3635182373)
		methodAtlasTexture[2] = classDB.get_method_bind("AtlasTexture\000", "set_region\000", 2046264180)
		methodAtlasTexture[3] = classDB.get_method_bind("AtlasTexture\000", "get_region\000", 1639390495)
		methodAtlasTexture[4] = classDB.get_method_bind("AtlasTexture\000", "set_margin\000", 2046264180)
		methodAtlasTexture[5] = classDB.get_method_bind("AtlasTexture\000", "get_margin\000", 1639390495)
		methodAtlasTexture[6] = classDB.get_method_bind("AtlasTexture\000", "set_filter_clip\000", 2586408642)
		methodAtlasTexture[7] = classDB.get_method_bind("AtlasTexture\000", "has_filter_clip\000", 36873697)
		methodAudioEffectAmplify[0] = classDB.get_method_bind("AudioEffectAmplify\000", "set_volume_db\000", 373806689)
		methodAudioEffectAmplify[1] = classDB.get_method_bind("AudioEffectAmplify\000", "get_volume_db\000", 1740695150)
		methodAudioEffectCapture[0] = classDB.get_method_bind("AudioEffectCapture\000", "can_get_buffer\000", 1116898809)
		methodAudioEffectCapture[1] = classDB.get_method_bind("AudioEffectCapture\000", "get_buffer\000", 2649534757)
		methodAudioEffectCapture[2] = classDB.get_method_bind("AudioEffectCapture\000", "clear_buffer\000", 3218959716)
		methodAudioEffectCapture[3] = classDB.get_method_bind("AudioEffectCapture\000", "set_buffer_length\000", 373806689)
		methodAudioEffectCapture[4] = classDB.get_method_bind("AudioEffectCapture\000", "get_buffer_length\000", 191475506)
		methodAudioEffectCapture[5] = classDB.get_method_bind("AudioEffectCapture\000", "get_frames_available\000", 3905245786)
		methodAudioEffectCapture[6] = classDB.get_method_bind("AudioEffectCapture\000", "get_discarded_frames\000", 3905245786)
		methodAudioEffectCapture[7] = classDB.get_method_bind("AudioEffectCapture\000", "get_buffer_length_frames\000", 3905245786)
		methodAudioEffectCapture[8] = classDB.get_method_bind("AudioEffectCapture\000", "get_pushed_frames\000", 3905245786)
		methodAudioEffectChorus[0] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_count\000", 1286410249)
		methodAudioEffectChorus[1] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_count\000", 3905245786)
		methodAudioEffectChorus[2] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_delay_ms\000", 1602489585)
		methodAudioEffectChorus[3] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_delay_ms\000", 2339986948)
		methodAudioEffectChorus[4] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_rate_hz\000", 1602489585)
		methodAudioEffectChorus[5] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_rate_hz\000", 2339986948)
		methodAudioEffectChorus[6] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_depth_ms\000", 1602489585)
		methodAudioEffectChorus[7] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_depth_ms\000", 2339986948)
		methodAudioEffectChorus[8] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_level_db\000", 1602489585)
		methodAudioEffectChorus[9] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_level_db\000", 2339986948)
		methodAudioEffectChorus[10] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_cutoff_hz\000", 1602489585)
		methodAudioEffectChorus[11] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_cutoff_hz\000", 2339986948)
		methodAudioEffectChorus[12] = classDB.get_method_bind("AudioEffectChorus\000", "set_voice_pan\000", 1602489585)
		methodAudioEffectChorus[13] = classDB.get_method_bind("AudioEffectChorus\000", "get_voice_pan\000", 2339986948)
		methodAudioEffectChorus[14] = classDB.get_method_bind("AudioEffectChorus\000", "set_wet\000", 373806689)
		methodAudioEffectChorus[15] = classDB.get_method_bind("AudioEffectChorus\000", "get_wet\000", 1740695150)
		methodAudioEffectChorus[16] = classDB.get_method_bind("AudioEffectChorus\000", "set_dry\000", 373806689)
		methodAudioEffectChorus[17] = classDB.get_method_bind("AudioEffectChorus\000", "get_dry\000", 1740695150)
		methodAudioEffectCompressor[0] = classDB.get_method_bind("AudioEffectCompressor\000", "set_threshold\000", 373806689)
		methodAudioEffectCompressor[1] = classDB.get_method_bind("AudioEffectCompressor\000", "get_threshold\000", 1740695150)
		methodAudioEffectCompressor[2] = classDB.get_method_bind("AudioEffectCompressor\000", "set_ratio\000", 373806689)
		methodAudioEffectCompressor[3] = classDB.get_method_bind("AudioEffectCompressor\000", "get_ratio\000", 1740695150)
		methodAudioEffectCompressor[4] = classDB.get_method_bind("AudioEffectCompressor\000", "set_gain\000", 373806689)
		methodAudioEffectCompressor[5] = classDB.get_method_bind("AudioEffectCompressor\000", "get_gain\000", 1740695150)
		methodAudioEffectCompressor[6] = classDB.get_method_bind("AudioEffectCompressor\000", "set_attack_us\000", 373806689)
		methodAudioEffectCompressor[7] = classDB.get_method_bind("AudioEffectCompressor\000", "get_attack_us\000", 1740695150)
		methodAudioEffectCompressor[8] = classDB.get_method_bind("AudioEffectCompressor\000", "set_release_ms\000", 373806689)
		methodAudioEffectCompressor[9] = classDB.get_method_bind("AudioEffectCompressor\000", "get_release_ms\000", 1740695150)
		methodAudioEffectCompressor[10] = classDB.get_method_bind("AudioEffectCompressor\000", "set_mix\000", 373806689)
		methodAudioEffectCompressor[11] = classDB.get_method_bind("AudioEffectCompressor\000", "get_mix\000", 1740695150)
		methodAudioEffectCompressor[12] = classDB.get_method_bind("AudioEffectCompressor\000", "set_sidechain\000", 3304788590)
		methodAudioEffectCompressor[13] = classDB.get_method_bind("AudioEffectCompressor\000", "get_sidechain\000", 2002593661)
		methodAudioEffectDelay[0] = classDB.get_method_bind("AudioEffectDelay\000", "set_dry\000", 373806689)
		methodAudioEffectDelay[1] = classDB.get_method_bind("AudioEffectDelay\000", "get_dry\000", 191475506)
		methodAudioEffectDelay[2] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap1_active\000", 2586408642)
		methodAudioEffectDelay[3] = classDB.get_method_bind("AudioEffectDelay\000", "is_tap1_active\000", 36873697)
		methodAudioEffectDelay[4] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap1_delay_ms\000", 373806689)
		methodAudioEffectDelay[5] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap1_delay_ms\000", 1740695150)
		methodAudioEffectDelay[6] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap1_level_db\000", 373806689)
		methodAudioEffectDelay[7] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap1_level_db\000", 1740695150)
		methodAudioEffectDelay[8] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap1_pan\000", 373806689)
		methodAudioEffectDelay[9] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap1_pan\000", 1740695150)
		methodAudioEffectDelay[10] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap2_active\000", 2586408642)
		methodAudioEffectDelay[11] = classDB.get_method_bind("AudioEffectDelay\000", "is_tap2_active\000", 36873697)
		methodAudioEffectDelay[12] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap2_delay_ms\000", 373806689)
		methodAudioEffectDelay[13] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap2_delay_ms\000", 1740695150)
		methodAudioEffectDelay[14] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap2_level_db\000", 373806689)
		methodAudioEffectDelay[15] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap2_level_db\000", 1740695150)
		methodAudioEffectDelay[16] = classDB.get_method_bind("AudioEffectDelay\000", "set_tap2_pan\000", 373806689)
		methodAudioEffectDelay[17] = classDB.get_method_bind("AudioEffectDelay\000", "get_tap2_pan\000", 1740695150)
		methodAudioEffectDelay[18] = classDB.get_method_bind("AudioEffectDelay\000", "set_feedback_active\000", 2586408642)
		methodAudioEffectDelay[19] = classDB.get_method_bind("AudioEffectDelay\000", "is_feedback_active\000", 36873697)
		methodAudioEffectDelay[20] = classDB.get_method_bind("AudioEffectDelay\000", "set_feedback_delay_ms\000", 373806689)
		methodAudioEffectDelay[21] = classDB.get_method_bind("AudioEffectDelay\000", "get_feedback_delay_ms\000", 1740695150)
		methodAudioEffectDelay[22] = classDB.get_method_bind("AudioEffectDelay\000", "set_feedback_level_db\000", 373806689)
		methodAudioEffectDelay[23] = classDB.get_method_bind("AudioEffectDelay\000", "get_feedback_level_db\000", 1740695150)
		methodAudioEffectDelay[24] = classDB.get_method_bind("AudioEffectDelay\000", "set_feedback_lowpass\000", 373806689)
		methodAudioEffectDelay[25] = classDB.get_method_bind("AudioEffectDelay\000", "get_feedback_lowpass\000", 1740695150)
		methodAudioEffectDistortion[0] = classDB.get_method_bind("AudioEffectDistortion\000", "set_mode\000", 1314744793)
		methodAudioEffectDistortion[1] = classDB.get_method_bind("AudioEffectDistortion\000", "get_mode\000", 809118343)
		methodAudioEffectDistortion[2] = classDB.get_method_bind("AudioEffectDistortion\000", "set_pre_gain\000", 373806689)
		methodAudioEffectDistortion[3] = classDB.get_method_bind("AudioEffectDistortion\000", "get_pre_gain\000", 1740695150)
		methodAudioEffectDistortion[4] = classDB.get_method_bind("AudioEffectDistortion\000", "set_keep_hf_hz\000", 373806689)
		methodAudioEffectDistortion[5] = classDB.get_method_bind("AudioEffectDistortion\000", "get_keep_hf_hz\000", 1740695150)
		methodAudioEffectDistortion[6] = classDB.get_method_bind("AudioEffectDistortion\000", "set_drive\000", 373806689)
		methodAudioEffectDistortion[7] = classDB.get_method_bind("AudioEffectDistortion\000", "get_drive\000", 1740695150)
		methodAudioEffectDistortion[8] = classDB.get_method_bind("AudioEffectDistortion\000", "set_post_gain\000", 373806689)
		methodAudioEffectDistortion[9] = classDB.get_method_bind("AudioEffectDistortion\000", "get_post_gain\000", 1740695150)
		methodAudioEffectEQ[0] = classDB.get_method_bind("AudioEffectEQ\000", "set_band_gain_db\000", 1602489585)
		methodAudioEffectEQ[1] = classDB.get_method_bind("AudioEffectEQ\000", "get_band_gain_db\000", 2339986948)
		methodAudioEffectEQ[2] = classDB.get_method_bind("AudioEffectEQ\000", "get_band_count\000", 3905245786)
		methodAudioEffectFilter[0] = classDB.get_method_bind("AudioEffectFilter\000", "set_cutoff\000", 373806689)
		methodAudioEffectFilter[1] = classDB.get_method_bind("AudioEffectFilter\000", "get_cutoff\000", 1740695150)
		methodAudioEffectFilter[2] = classDB.get_method_bind("AudioEffectFilter\000", "set_resonance\000", 373806689)
		methodAudioEffectFilter[3] = classDB.get_method_bind("AudioEffectFilter\000", "get_resonance\000", 1740695150)
		methodAudioEffectFilter[4] = classDB.get_method_bind("AudioEffectFilter\000", "set_gain\000", 373806689)
		methodAudioEffectFilter[5] = classDB.get_method_bind("AudioEffectFilter\000", "get_gain\000", 1740695150)
		methodAudioEffectFilter[6] = classDB.get_method_bind("AudioEffectFilter\000", "set_db\000", 771740901)
		methodAudioEffectFilter[7] = classDB.get_method_bind("AudioEffectFilter\000", "get_db\000", 3981721890)
		methodAudioEffectLimiter[0] = classDB.get_method_bind("AudioEffectLimiter\000", "set_ceiling_db\000", 373806689)
		methodAudioEffectLimiter[1] = classDB.get_method_bind("AudioEffectLimiter\000", "get_ceiling_db\000", 1740695150)
		methodAudioEffectLimiter[2] = classDB.get_method_bind("AudioEffectLimiter\000", "set_threshold_db\000", 373806689)
		methodAudioEffectLimiter[3] = classDB.get_method_bind("AudioEffectLimiter\000", "get_threshold_db\000", 1740695150)
		methodAudioEffectLimiter[4] = classDB.get_method_bind("AudioEffectLimiter\000", "set_soft_clip_db\000", 373806689)
		methodAudioEffectLimiter[5] = classDB.get_method_bind("AudioEffectLimiter\000", "get_soft_clip_db\000", 1740695150)
		methodAudioEffectLimiter[6] = classDB.get_method_bind("AudioEffectLimiter\000", "set_soft_clip_ratio\000", 373806689)
		methodAudioEffectLimiter[7] = classDB.get_method_bind("AudioEffectLimiter\000", "get_soft_clip_ratio\000", 1740695150)
		methodAudioEffectPanner[0] = classDB.get_method_bind("AudioEffectPanner\000", "set_pan\000", 373806689)
		methodAudioEffectPanner[1] = classDB.get_method_bind("AudioEffectPanner\000", "get_pan\000", 1740695150)
		methodAudioEffectPhaser[0] = classDB.get_method_bind("AudioEffectPhaser\000", "set_range_min_hz\000", 373806689)
		methodAudioEffectPhaser[1] = classDB.get_method_bind("AudioEffectPhaser\000", "get_range_min_hz\000", 1740695150)
		methodAudioEffectPhaser[2] = classDB.get_method_bind("AudioEffectPhaser\000", "set_range_max_hz\000", 373806689)
		methodAudioEffectPhaser[3] = classDB.get_method_bind("AudioEffectPhaser\000", "get_range_max_hz\000", 1740695150)
		methodAudioEffectPhaser[4] = classDB.get_method_bind("AudioEffectPhaser\000", "set_rate_hz\000", 373806689)
		methodAudioEffectPhaser[5] = classDB.get_method_bind("AudioEffectPhaser\000", "get_rate_hz\000", 1740695150)
		methodAudioEffectPhaser[6] = classDB.get_method_bind("AudioEffectPhaser\000", "set_feedback\000", 373806689)
		methodAudioEffectPhaser[7] = classDB.get_method_bind("AudioEffectPhaser\000", "get_feedback\000", 1740695150)
		methodAudioEffectPhaser[8] = classDB.get_method_bind("AudioEffectPhaser\000", "set_depth\000", 373806689)
		methodAudioEffectPhaser[9] = classDB.get_method_bind("AudioEffectPhaser\000", "get_depth\000", 1740695150)
		methodAudioEffectPitchShift[0] = classDB.get_method_bind("AudioEffectPitchShift\000", "set_pitch_scale\000", 373806689)
		methodAudioEffectPitchShift[1] = classDB.get_method_bind("AudioEffectPitchShift\000", "get_pitch_scale\000", 1740695150)
		methodAudioEffectPitchShift[2] = classDB.get_method_bind("AudioEffectPitchShift\000", "set_oversampling\000", 1286410249)
		methodAudioEffectPitchShift[3] = classDB.get_method_bind("AudioEffectPitchShift\000", "get_oversampling\000", 3905245786)
		methodAudioEffectPitchShift[4] = classDB.get_method_bind("AudioEffectPitchShift\000", "set_fft_size\000", 2323518741)
		methodAudioEffectPitchShift[5] = classDB.get_method_bind("AudioEffectPitchShift\000", "get_fft_size\000", 2361246789)
		methodAudioEffectRecord[0] = classDB.get_method_bind("AudioEffectRecord\000", "set_recording_active\000", 2586408642)
		methodAudioEffectRecord[1] = classDB.get_method_bind("AudioEffectRecord\000", "is_recording_active\000", 36873697)
		methodAudioEffectRecord[2] = classDB.get_method_bind("AudioEffectRecord\000", "set_format\000", 60648488)
		methodAudioEffectRecord[3] = classDB.get_method_bind("AudioEffectRecord\000", "get_format\000", 3151724922)
		methodAudioEffectRecord[4] = classDB.get_method_bind("AudioEffectRecord\000", "get_recording\000", 2964110865)
		methodAudioEffectReverb[0] = classDB.get_method_bind("AudioEffectReverb\000", "set_predelay_msec\000", 373806689)
		methodAudioEffectReverb[1] = classDB.get_method_bind("AudioEffectReverb\000", "get_predelay_msec\000", 1740695150)
		methodAudioEffectReverb[2] = classDB.get_method_bind("AudioEffectReverb\000", "set_predelay_feedback\000", 373806689)
		methodAudioEffectReverb[3] = classDB.get_method_bind("AudioEffectReverb\000", "get_predelay_feedback\000", 1740695150)
		methodAudioEffectReverb[4] = classDB.get_method_bind("AudioEffectReverb\000", "set_room_size\000", 373806689)
		methodAudioEffectReverb[5] = classDB.get_method_bind("AudioEffectReverb\000", "get_room_size\000", 1740695150)
		methodAudioEffectReverb[6] = classDB.get_method_bind("AudioEffectReverb\000", "set_damping\000", 373806689)
		methodAudioEffectReverb[7] = classDB.get_method_bind("AudioEffectReverb\000", "get_damping\000", 1740695150)
		methodAudioEffectReverb[8] = classDB.get_method_bind("AudioEffectReverb\000", "set_spread\000", 373806689)
		methodAudioEffectReverb[9] = classDB.get_method_bind("AudioEffectReverb\000", "get_spread\000", 1740695150)
		methodAudioEffectReverb[10] = classDB.get_method_bind("AudioEffectReverb\000", "set_dry\000", 373806689)
		methodAudioEffectReverb[11] = classDB.get_method_bind("AudioEffectReverb\000", "get_dry\000", 1740695150)
		methodAudioEffectReverb[12] = classDB.get_method_bind("AudioEffectReverb\000", "set_wet\000", 373806689)
		methodAudioEffectReverb[13] = classDB.get_method_bind("AudioEffectReverb\000", "get_wet\000", 1740695150)
		methodAudioEffectReverb[14] = classDB.get_method_bind("AudioEffectReverb\000", "set_hpf\000", 373806689)
		methodAudioEffectReverb[15] = classDB.get_method_bind("AudioEffectReverb\000", "get_hpf\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[0] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "set_buffer_length\000", 373806689)
		methodAudioEffectSpectrumAnalyzer[1] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "get_buffer_length\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[2] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "set_tap_back_pos\000", 373806689)
		methodAudioEffectSpectrumAnalyzer[3] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "get_tap_back_pos\000", 1740695150)
		methodAudioEffectSpectrumAnalyzer[4] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "set_fft_size\000", 1202879215)
		methodAudioEffectSpectrumAnalyzer[5] = classDB.get_method_bind("AudioEffectSpectrumAnalyzer\000", "get_fft_size\000", 3925405343)
		methodAudioEffectSpectrumAnalyzerInstance[0] = classDB.get_method_bind("AudioEffectSpectrumAnalyzerInstance\000", "get_magnitude_for_frequency_range\000", 2693213071)
		methodAudioEffectStereoEnhance[0] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "set_pan_pullout\000", 373806689)
		methodAudioEffectStereoEnhance[1] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "get_pan_pullout\000", 1740695150)
		methodAudioEffectStereoEnhance[2] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "set_time_pullout\000", 373806689)
		methodAudioEffectStereoEnhance[3] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "get_time_pullout\000", 1740695150)
		methodAudioEffectStereoEnhance[4] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "set_surround\000", 373806689)
		methodAudioEffectStereoEnhance[5] = classDB.get_method_bind("AudioEffectStereoEnhance\000", "get_surround\000", 1740695150)
		methodAudioListener2D[0] = classDB.get_method_bind("AudioListener2D\000", "make_current\000", 3218959716)
		methodAudioListener2D[1] = classDB.get_method_bind("AudioListener2D\000", "clear_current\000", 3218959716)
		methodAudioListener2D[2] = classDB.get_method_bind("AudioListener2D\000", "is_current\000", 36873697)
		methodAudioListener3D[0] = classDB.get_method_bind("AudioListener3D\000", "make_current\000", 3218959716)
		methodAudioListener3D[1] = classDB.get_method_bind("AudioListener3D\000", "clear_current\000", 3218959716)
		methodAudioListener3D[2] = classDB.get_method_bind("AudioListener3D\000", "is_current\000", 36873697)
		methodAudioListener3D[3] = classDB.get_method_bind("AudioListener3D\000", "get_listener_transform\000", 3229777777)
		methodAudioServerSingleton[0] = classDB.get_method_bind("AudioServer\000", "set_bus_count\000", 1286410249)
		methodAudioServerSingleton[1] = classDB.get_method_bind("AudioServer\000", "get_bus_count\000", 3905245786)
		methodAudioServerSingleton[2] = classDB.get_method_bind("AudioServer\000", "remove_bus\000", 1286410249)
		methodAudioServerSingleton[3] = classDB.get_method_bind("AudioServer\000", "add_bus\000", 1025054187)
		methodAudioServerSingleton[4] = classDB.get_method_bind("AudioServer\000", "move_bus\000", 3937882851)
		methodAudioServerSingleton[5] = classDB.get_method_bind("AudioServer\000", "set_bus_name\000", 501894301)
		methodAudioServerSingleton[6] = classDB.get_method_bind("AudioServer\000", "get_bus_name\000", 844755477)
		methodAudioServerSingleton[7] = classDB.get_method_bind("AudioServer\000", "get_bus_index\000", 2458036349)
		methodAudioServerSingleton[8] = classDB.get_method_bind("AudioServer\000", "get_bus_channels\000", 923996154)
		methodAudioServerSingleton[9] = classDB.get_method_bind("AudioServer\000", "set_bus_volume_db\000", 1602489585)
		methodAudioServerSingleton[10] = classDB.get_method_bind("AudioServer\000", "get_bus_volume_db\000", 2339986948)
		methodAudioServerSingleton[11] = classDB.get_method_bind("AudioServer\000", "set_bus_send\000", 3780747571)
		methodAudioServerSingleton[12] = classDB.get_method_bind("AudioServer\000", "get_bus_send\000", 659327637)
		methodAudioServerSingleton[13] = classDB.get_method_bind("AudioServer\000", "set_bus_solo\000", 300928843)
		methodAudioServerSingleton[14] = classDB.get_method_bind("AudioServer\000", "is_bus_solo\000", 1116898809)
		methodAudioServerSingleton[15] = classDB.get_method_bind("AudioServer\000", "set_bus_mute\000", 300928843)
		methodAudioServerSingleton[16] = classDB.get_method_bind("AudioServer\000", "is_bus_mute\000", 1116898809)
		methodAudioServerSingleton[17] = classDB.get_method_bind("AudioServer\000", "set_bus_bypass_effects\000", 300928843)
		methodAudioServerSingleton[18] = classDB.get_method_bind("AudioServer\000", "is_bus_bypassing_effects\000", 1116898809)
		methodAudioServerSingleton[19] = classDB.get_method_bind("AudioServer\000", "add_bus_effect\000", 4147765248)
		methodAudioServerSingleton[20] = classDB.get_method_bind("AudioServer\000", "remove_bus_effect\000", 3937882851)
		methodAudioServerSingleton[21] = classDB.get_method_bind("AudioServer\000", "get_bus_effect_count\000", 3744713108)
		methodAudioServerSingleton[22] = classDB.get_method_bind("AudioServer\000", "get_bus_effect\000", 726064442)
		methodAudioServerSingleton[23] = classDB.get_method_bind("AudioServer\000", "get_bus_effect_instance\000", 2887144608)
		methodAudioServerSingleton[24] = classDB.get_method_bind("AudioServer\000", "swap_bus_effects\000", 1649997291)
		methodAudioServerSingleton[25] = classDB.get_method_bind("AudioServer\000", "set_bus_effect_enabled\000", 1383440665)
		methodAudioServerSingleton[26] = classDB.get_method_bind("AudioServer\000", "is_bus_effect_enabled\000", 2522259332)
		methodAudioServerSingleton[27] = classDB.get_method_bind("AudioServer\000", "get_bus_peak_volume_left_db\000", 3085491603)
		methodAudioServerSingleton[28] = classDB.get_method_bind("AudioServer\000", "get_bus_peak_volume_right_db\000", 3085491603)
		methodAudioServerSingleton[29] = classDB.get_method_bind("AudioServer\000", "set_playback_speed_scale\000", 373806689)
		methodAudioServerSingleton[30] = classDB.get_method_bind("AudioServer\000", "get_playback_speed_scale\000", 1740695150)
		methodAudioServerSingleton[31] = classDB.get_method_bind("AudioServer\000", "lock\000", 3218959716)
		methodAudioServerSingleton[32] = classDB.get_method_bind("AudioServer\000", "unlock\000", 3218959716)
		methodAudioServerSingleton[33] = classDB.get_method_bind("AudioServer\000", "get_speaker_mode\000", 2549190337)
		methodAudioServerSingleton[34] = classDB.get_method_bind("AudioServer\000", "get_mix_rate\000", 1740695150)
		methodAudioServerSingleton[35] = classDB.get_method_bind("AudioServer\000", "get_device_list\000", 2981934095)
		methodAudioServerSingleton[36] = classDB.get_method_bind("AudioServer\000", "get_device\000", 2841200299)
		methodAudioServerSingleton[37] = classDB.get_method_bind("AudioServer\000", "set_device\000", 83702148)
		methodAudioServerSingleton[38] = classDB.get_method_bind("AudioServer\000", "get_time_to_next_mix\000", 1740695150)
		methodAudioServerSingleton[39] = classDB.get_method_bind("AudioServer\000", "get_time_since_last_mix\000", 1740695150)
		methodAudioServerSingleton[40] = classDB.get_method_bind("AudioServer\000", "get_output_latency\000", 1740695150)
		methodAudioServerSingleton[41] = classDB.get_method_bind("AudioServer\000", "capture_get_device_list\000", 2981934095)
		methodAudioServerSingleton[42] = classDB.get_method_bind("AudioServer\000", "capture_get_device\000", 2841200299)
		methodAudioServerSingleton[43] = classDB.get_method_bind("AudioServer\000", "capture_set_device\000", 83702148)
		methodAudioServerSingleton[44] = classDB.get_method_bind("AudioServer\000", "set_bus_layout\000", 3319058824)
		methodAudioServerSingleton[45] = classDB.get_method_bind("AudioServer\000", "generate_bus_layout\000", 3769973890)
		methodAudioServerSingleton[46] = classDB.get_method_bind("AudioServer\000", "set_enable_tagging_used_audio_streams\000", 2586408642)
		methodAudioStream[0] = classDB.get_method_bind("AudioStream\000", "get_length\000", 1740695150)
		methodAudioStream[1] = classDB.get_method_bind("AudioStream\000", "is_monophonic\000", 36873697)
		methodAudioStream[2] = classDB.get_method_bind("AudioStream\000", "instantiate_playback\000", 210135309)
		methodAudioStreamGenerator[0] = classDB.get_method_bind("AudioStreamGenerator\000", "set_mix_rate\000", 373806689)
		methodAudioStreamGenerator[1] = classDB.get_method_bind("AudioStreamGenerator\000", "get_mix_rate\000", 1740695150)
		methodAudioStreamGenerator[2] = classDB.get_method_bind("AudioStreamGenerator\000", "set_buffer_length\000", 373806689)
		methodAudioStreamGenerator[3] = classDB.get_method_bind("AudioStreamGenerator\000", "get_buffer_length\000", 1740695150)
		methodAudioStreamGeneratorPlayback[0] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "push_frame\000", 3975407249)
		methodAudioStreamGeneratorPlayback[1] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "can_push_buffer\000", 1116898809)
		methodAudioStreamGeneratorPlayback[2] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "push_buffer\000", 1361156557)
		methodAudioStreamGeneratorPlayback[3] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "get_frames_available\000", 3905245786)
		methodAudioStreamGeneratorPlayback[4] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "get_skips\000", 3905245786)
		methodAudioStreamGeneratorPlayback[5] = classDB.get_method_bind("AudioStreamGeneratorPlayback\000", "clear_buffer\000", 3218959716)
		methodAudioStreamMP3[0] = classDB.get_method_bind("AudioStreamMP3\000", "set_data\000", 2971499966)
		methodAudioStreamMP3[1] = classDB.get_method_bind("AudioStreamMP3\000", "get_data\000", 2362200018)
		methodAudioStreamMP3[2] = classDB.get_method_bind("AudioStreamMP3\000", "set_loop\000", 2586408642)
		methodAudioStreamMP3[3] = classDB.get_method_bind("AudioStreamMP3\000", "has_loop\000", 36873697)
		methodAudioStreamMP3[4] = classDB.get_method_bind("AudioStreamMP3\000", "set_loop_offset\000", 373806689)
		methodAudioStreamMP3[5] = classDB.get_method_bind("AudioStreamMP3\000", "get_loop_offset\000", 1740695150)
		methodAudioStreamMP3[6] = classDB.get_method_bind("AudioStreamMP3\000", "set_bpm\000", 373806689)
		methodAudioStreamMP3[7] = classDB.get_method_bind("AudioStreamMP3\000", "get_bpm\000", 1740695150)
		methodAudioStreamMP3[8] = classDB.get_method_bind("AudioStreamMP3\000", "set_beat_count\000", 1286410249)
		methodAudioStreamMP3[9] = classDB.get_method_bind("AudioStreamMP3\000", "get_beat_count\000", 3905245786)
		methodAudioStreamMP3[10] = classDB.get_method_bind("AudioStreamMP3\000", "set_bar_beats\000", 1286410249)
		methodAudioStreamMP3[11] = classDB.get_method_bind("AudioStreamMP3\000", "get_bar_beats\000", 3905245786)
		methodAudioStreamOggVorbis[0] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_packet_sequence\000", 438882457)
		methodAudioStreamOggVorbis[1] = classDB.get_method_bind("AudioStreamOggVorbis\000", "get_packet_sequence\000", 2801636033)
		methodAudioStreamOggVorbis[2] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_loop\000", 2586408642)
		methodAudioStreamOggVorbis[3] = classDB.get_method_bind("AudioStreamOggVorbis\000", "has_loop\000", 36873697)
		methodAudioStreamOggVorbis[4] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_loop_offset\000", 373806689)
		methodAudioStreamOggVorbis[5] = classDB.get_method_bind("AudioStreamOggVorbis\000", "get_loop_offset\000", 1740695150)
		methodAudioStreamOggVorbis[6] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_bpm\000", 373806689)
		methodAudioStreamOggVorbis[7] = classDB.get_method_bind("AudioStreamOggVorbis\000", "get_bpm\000", 1740695150)
		methodAudioStreamOggVorbis[8] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_beat_count\000", 1286410249)
		methodAudioStreamOggVorbis[9] = classDB.get_method_bind("AudioStreamOggVorbis\000", "get_beat_count\000", 3905245786)
		methodAudioStreamOggVorbis[10] = classDB.get_method_bind("AudioStreamOggVorbis\000", "set_bar_beats\000", 1286410249)
		methodAudioStreamOggVorbis[11] = classDB.get_method_bind("AudioStreamOggVorbis\000", "get_bar_beats\000", 3905245786)
		methodAudioStreamPlaybackResampled[0] = classDB.get_method_bind("AudioStreamPlaybackResampled\000", "begin_resample\000", 3218959716)
		methodAudioStreamPlayer[0] = classDB.get_method_bind("AudioStreamPlayer\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer[1] = classDB.get_method_bind("AudioStreamPlayer\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer[2] = classDB.get_method_bind("AudioStreamPlayer\000", "set_volume_db\000", 373806689)
		methodAudioStreamPlayer[3] = classDB.get_method_bind("AudioStreamPlayer\000", "get_volume_db\000", 1740695150)
		methodAudioStreamPlayer[4] = classDB.get_method_bind("AudioStreamPlayer\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer[5] = classDB.get_method_bind("AudioStreamPlayer\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer[6] = classDB.get_method_bind("AudioStreamPlayer\000", "play\000", 3041634712)
		methodAudioStreamPlayer[7] = classDB.get_method_bind("AudioStreamPlayer\000", "seek\000", 373806689)
		methodAudioStreamPlayer[8] = classDB.get_method_bind("AudioStreamPlayer\000", "stop\000", 3218959716)
		methodAudioStreamPlayer[9] = classDB.get_method_bind("AudioStreamPlayer\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer[10] = classDB.get_method_bind("AudioStreamPlayer\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer[11] = classDB.get_method_bind("AudioStreamPlayer\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer[12] = classDB.get_method_bind("AudioStreamPlayer\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer[13] = classDB.get_method_bind("AudioStreamPlayer\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer[14] = classDB.get_method_bind("AudioStreamPlayer\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer[15] = classDB.get_method_bind("AudioStreamPlayer\000", "set_mix_target\000", 2300306138)
		methodAudioStreamPlayer[16] = classDB.get_method_bind("AudioStreamPlayer\000", "get_mix_target\000", 172807476)
		methodAudioStreamPlayer[17] = classDB.get_method_bind("AudioStreamPlayer\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer[18] = classDB.get_method_bind("AudioStreamPlayer\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer[19] = classDB.get_method_bind("AudioStreamPlayer\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer[20] = classDB.get_method_bind("AudioStreamPlayer\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer[21] = classDB.get_method_bind("AudioStreamPlayer\000", "get_stream_playback\000", 210135309)
		methodAudioStreamPlayer2D[0] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer2D[1] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer2D[2] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_volume_db\000", 373806689)
		methodAudioStreamPlayer2D[3] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_volume_db\000", 1740695150)
		methodAudioStreamPlayer2D[4] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer2D[5] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer2D[6] = classDB.get_method_bind("AudioStreamPlayer2D\000", "play\000", 3041634712)
		methodAudioStreamPlayer2D[7] = classDB.get_method_bind("AudioStreamPlayer2D\000", "seek\000", 373806689)
		methodAudioStreamPlayer2D[8] = classDB.get_method_bind("AudioStreamPlayer2D\000", "stop\000", 3218959716)
		methodAudioStreamPlayer2D[9] = classDB.get_method_bind("AudioStreamPlayer2D\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer2D[10] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer2D[11] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer2D[12] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer2D[13] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer2D[14] = classDB.get_method_bind("AudioStreamPlayer2D\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer2D[15] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_max_distance\000", 373806689)
		methodAudioStreamPlayer2D[16] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_max_distance\000", 1740695150)
		methodAudioStreamPlayer2D[17] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_attenuation\000", 373806689)
		methodAudioStreamPlayer2D[18] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_attenuation\000", 1740695150)
		methodAudioStreamPlayer2D[19] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_area_mask\000", 1286410249)
		methodAudioStreamPlayer2D[20] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_area_mask\000", 3905245786)
		methodAudioStreamPlayer2D[21] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer2D[22] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer2D[23] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer2D[24] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer2D[25] = classDB.get_method_bind("AudioStreamPlayer2D\000", "set_panning_strength\000", 373806689)
		methodAudioStreamPlayer2D[26] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_panning_strength\000", 1740695150)
		methodAudioStreamPlayer2D[27] = classDB.get_method_bind("AudioStreamPlayer2D\000", "get_stream_playback\000", 210135309)
		methodAudioStreamPlayer3D[0] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_stream\000", 2210767741)
		methodAudioStreamPlayer3D[1] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_stream\000", 160907539)
		methodAudioStreamPlayer3D[2] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_unit_db\000", 373806689)
		methodAudioStreamPlayer3D[3] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_unit_db\000", 1740695150)
		methodAudioStreamPlayer3D[4] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_unit_size\000", 373806689)
		methodAudioStreamPlayer3D[5] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_unit_size\000", 1740695150)
		methodAudioStreamPlayer3D[6] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_max_db\000", 373806689)
		methodAudioStreamPlayer3D[7] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_max_db\000", 1740695150)
		methodAudioStreamPlayer3D[8] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_pitch_scale\000", 373806689)
		methodAudioStreamPlayer3D[9] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_pitch_scale\000", 1740695150)
		methodAudioStreamPlayer3D[10] = classDB.get_method_bind("AudioStreamPlayer3D\000", "play\000", 3041634712)
		methodAudioStreamPlayer3D[11] = classDB.get_method_bind("AudioStreamPlayer3D\000", "seek\000", 373806689)
		methodAudioStreamPlayer3D[12] = classDB.get_method_bind("AudioStreamPlayer3D\000", "stop\000", 3218959716)
		methodAudioStreamPlayer3D[13] = classDB.get_method_bind("AudioStreamPlayer3D\000", "is_playing\000", 36873697)
		methodAudioStreamPlayer3D[14] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_playback_position\000", 191475506)
		methodAudioStreamPlayer3D[15] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_bus\000", 3304788590)
		methodAudioStreamPlayer3D[16] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_bus\000", 2002593661)
		methodAudioStreamPlayer3D[17] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_autoplay\000", 2586408642)
		methodAudioStreamPlayer3D[18] = classDB.get_method_bind("AudioStreamPlayer3D\000", "is_autoplay_enabled\000", 2240911060)
		methodAudioStreamPlayer3D[19] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_max_distance\000", 373806689)
		methodAudioStreamPlayer3D[20] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_max_distance\000", 1740695150)
		methodAudioStreamPlayer3D[21] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_area_mask\000", 1286410249)
		methodAudioStreamPlayer3D[22] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_area_mask\000", 3905245786)
		methodAudioStreamPlayer3D[23] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_emission_angle\000", 373806689)
		methodAudioStreamPlayer3D[24] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_emission_angle\000", 1740695150)
		methodAudioStreamPlayer3D[25] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_emission_angle_enabled\000", 2586408642)
		methodAudioStreamPlayer3D[26] = classDB.get_method_bind("AudioStreamPlayer3D\000", "is_emission_angle_enabled\000", 36873697)
		methodAudioStreamPlayer3D[27] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_emission_angle_filter_attenuation_db\000", 373806689)
		methodAudioStreamPlayer3D[28] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_emission_angle_filter_attenuation_db\000", 1740695150)
		methodAudioStreamPlayer3D[29] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_attenuation_filter_cutoff_hz\000", 373806689)
		methodAudioStreamPlayer3D[30] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_attenuation_filter_cutoff_hz\000", 1740695150)
		methodAudioStreamPlayer3D[31] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_attenuation_filter_db\000", 373806689)
		methodAudioStreamPlayer3D[32] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_attenuation_filter_db\000", 1740695150)
		methodAudioStreamPlayer3D[33] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_attenuation_model\000", 2988086229)
		methodAudioStreamPlayer3D[34] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_attenuation_model\000", 3035106060)
		methodAudioStreamPlayer3D[35] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_doppler_tracking\000", 3968161450)
		methodAudioStreamPlayer3D[36] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_doppler_tracking\000", 1702418664)
		methodAudioStreamPlayer3D[37] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_stream_paused\000", 2586408642)
		methodAudioStreamPlayer3D[38] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_stream_paused\000", 36873697)
		methodAudioStreamPlayer3D[39] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_max_polyphony\000", 1286410249)
		methodAudioStreamPlayer3D[40] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_max_polyphony\000", 3905245786)
		methodAudioStreamPlayer3D[41] = classDB.get_method_bind("AudioStreamPlayer3D\000", "set_panning_strength\000", 373806689)
		methodAudioStreamPlayer3D[42] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_panning_strength\000", 1740695150)
		methodAudioStreamPlayer3D[43] = classDB.get_method_bind("AudioStreamPlayer3D\000", "get_stream_playback\000", 210135309)
		methodAudioStreamRandomizer[0] = classDB.get_method_bind("AudioStreamRandomizer\000", "add_stream\000", 1286410249)
		methodAudioStreamRandomizer[1] = classDB.get_method_bind("AudioStreamRandomizer\000", "move_stream\000", 3937882851)
		methodAudioStreamRandomizer[2] = classDB.get_method_bind("AudioStreamRandomizer\000", "remove_stream\000", 1286410249)
		methodAudioStreamRandomizer[3] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_stream\000", 111075094)
		methodAudioStreamRandomizer[4] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_stream\000", 2739380747)
		methodAudioStreamRandomizer[5] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_stream_probability_weight\000", 1602489585)
		methodAudioStreamRandomizer[6] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_stream_probability_weight\000", 2339986948)
		methodAudioStreamRandomizer[7] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_streams_count\000", 1286410249)
		methodAudioStreamRandomizer[8] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_streams_count\000", 3905245786)
		methodAudioStreamRandomizer[9] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_random_pitch\000", 373806689)
		methodAudioStreamRandomizer[10] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_random_pitch\000", 1740695150)
		methodAudioStreamRandomizer[11] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_random_volume_offset_db\000", 373806689)
		methodAudioStreamRandomizer[12] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_random_volume_offset_db\000", 1740695150)
		methodAudioStreamRandomizer[13] = classDB.get_method_bind("AudioStreamRandomizer\000", "set_playback_mode\000", 3950967023)
		methodAudioStreamRandomizer[14] = classDB.get_method_bind("AudioStreamRandomizer\000", "get_playback_mode\000", 3943055077)
		methodAudioStreamWAV[0] = classDB.get_method_bind("AudioStreamWAV\000", "set_data\000", 2971499966)
		methodAudioStreamWAV[1] = classDB.get_method_bind("AudioStreamWAV\000", "get_data\000", 2362200018)
		methodAudioStreamWAV[2] = classDB.get_method_bind("AudioStreamWAV\000", "set_format\000", 60648488)
		methodAudioStreamWAV[3] = classDB.get_method_bind("AudioStreamWAV\000", "get_format\000", 3151724922)
		methodAudioStreamWAV[4] = classDB.get_method_bind("AudioStreamWAV\000", "set_loop_mode\000", 2444882972)
		methodAudioStreamWAV[5] = classDB.get_method_bind("AudioStreamWAV\000", "get_loop_mode\000", 393560655)
		methodAudioStreamWAV[6] = classDB.get_method_bind("AudioStreamWAV\000", "set_loop_begin\000", 1286410249)
		methodAudioStreamWAV[7] = classDB.get_method_bind("AudioStreamWAV\000", "get_loop_begin\000", 3905245786)
		methodAudioStreamWAV[8] = classDB.get_method_bind("AudioStreamWAV\000", "set_loop_end\000", 1286410249)
		methodAudioStreamWAV[9] = classDB.get_method_bind("AudioStreamWAV\000", "get_loop_end\000", 3905245786)
		methodAudioStreamWAV[10] = classDB.get_method_bind("AudioStreamWAV\000", "set_mix_rate\000", 1286410249)
		methodAudioStreamWAV[11] = classDB.get_method_bind("AudioStreamWAV\000", "get_mix_rate\000", 3905245786)
		methodAudioStreamWAV[12] = classDB.get_method_bind("AudioStreamWAV\000", "set_stereo\000", 2586408642)
		methodAudioStreamWAV[13] = classDB.get_method_bind("AudioStreamWAV\000", "is_stereo\000", 36873697)
		methodAudioStreamWAV[14] = classDB.get_method_bind("AudioStreamWAV\000", "save_to_wav\000", 166001499)
		methodBackBufferCopy[0] = classDB.get_method_bind("BackBufferCopy\000", "set_rect\000", 2046264180)
		methodBackBufferCopy[1] = classDB.get_method_bind("BackBufferCopy\000", "get_rect\000", 1639390495)
		methodBackBufferCopy[2] = classDB.get_method_bind("BackBufferCopy\000", "set_copy_mode\000", 1713538590)
		methodBackBufferCopy[3] = classDB.get_method_bind("BackBufferCopy\000", "get_copy_mode\000", 3271169440)
		methodBaseButton[0] = classDB.get_method_bind("BaseButton\000", "set_pressed\000", 2586408642)
		methodBaseButton[1] = classDB.get_method_bind("BaseButton\000", "is_pressed\000", 36873697)
		methodBaseButton[2] = classDB.get_method_bind("BaseButton\000", "set_pressed_no_signal\000", 2586408642)
		methodBaseButton[3] = classDB.get_method_bind("BaseButton\000", "is_hovered\000", 36873697)
		methodBaseButton[4] = classDB.get_method_bind("BaseButton\000", "set_toggle_mode\000", 2586408642)
		methodBaseButton[5] = classDB.get_method_bind("BaseButton\000", "is_toggle_mode\000", 36873697)
		methodBaseButton[6] = classDB.get_method_bind("BaseButton\000", "set_shortcut_in_tooltip\000", 2586408642)
		methodBaseButton[7] = classDB.get_method_bind("BaseButton\000", "is_shortcut_in_tooltip_enabled\000", 36873697)
		methodBaseButton[8] = classDB.get_method_bind("BaseButton\000", "set_disabled\000", 2586408642)
		methodBaseButton[9] = classDB.get_method_bind("BaseButton\000", "is_disabled\000", 36873697)
		methodBaseButton[10] = classDB.get_method_bind("BaseButton\000", "set_action_mode\000", 1985162088)
		methodBaseButton[11] = classDB.get_method_bind("BaseButton\000", "get_action_mode\000", 2589712189)
		methodBaseButton[12] = classDB.get_method_bind("BaseButton\000", "set_button_mask\000", 3624991109)
		methodBaseButton[13] = classDB.get_method_bind("BaseButton\000", "get_button_mask\000", 1132662608)
		methodBaseButton[14] = classDB.get_method_bind("BaseButton\000", "get_draw_mode\000", 2492721305)
		methodBaseButton[15] = classDB.get_method_bind("BaseButton\000", "set_keep_pressed_outside\000", 2586408642)
		methodBaseButton[16] = classDB.get_method_bind("BaseButton\000", "is_keep_pressed_outside\000", 36873697)
		methodBaseButton[17] = classDB.get_method_bind("BaseButton\000", "set_shortcut\000", 857163497)
		methodBaseButton[18] = classDB.get_method_bind("BaseButton\000", "get_shortcut\000", 3415666916)
		methodBaseButton[19] = classDB.get_method_bind("BaseButton\000", "set_button_group\000", 1794463739)
		methodBaseButton[20] = classDB.get_method_bind("BaseButton\000", "get_button_group\000", 281644053)
		methodBaseButton[21] = classDB.get_method_bind("BaseButton\000", "set_shortcut_context\000", 1078189570)
		methodBaseButton[22] = classDB.get_method_bind("BaseButton\000", "get_shortcut_context\000", 3160264692)
		methodBaseMaterial3D[0] = classDB.get_method_bind("BaseMaterial3D\000", "set_albedo\000", 2920490490)
		methodBaseMaterial3D[1] = classDB.get_method_bind("BaseMaterial3D\000", "get_albedo\000", 3444240500)
		methodBaseMaterial3D[2] = classDB.get_method_bind("BaseMaterial3D\000", "set_transparency\000", 3435651667)
		methodBaseMaterial3D[3] = classDB.get_method_bind("BaseMaterial3D\000", "get_transparency\000", 990903061)
		methodBaseMaterial3D[4] = classDB.get_method_bind("BaseMaterial3D\000", "set_alpha_antialiasing\000", 3212649852)
		methodBaseMaterial3D[5] = classDB.get_method_bind("BaseMaterial3D\000", "get_alpha_antialiasing\000", 2889939400)
		methodBaseMaterial3D[6] = classDB.get_method_bind("BaseMaterial3D\000", "set_alpha_antialiasing_edge\000", 373806689)
		methodBaseMaterial3D[7] = classDB.get_method_bind("BaseMaterial3D\000", "get_alpha_antialiasing_edge\000", 1740695150)
		methodBaseMaterial3D[8] = classDB.get_method_bind("BaseMaterial3D\000", "set_shading_mode\000", 3368750322)
		methodBaseMaterial3D[9] = classDB.get_method_bind("BaseMaterial3D\000", "get_shading_mode\000", 2132070559)
		methodBaseMaterial3D[10] = classDB.get_method_bind("BaseMaterial3D\000", "set_specular\000", 373806689)
		methodBaseMaterial3D[11] = classDB.get_method_bind("BaseMaterial3D\000", "get_specular\000", 1740695150)
		methodBaseMaterial3D[12] = classDB.get_method_bind("BaseMaterial3D\000", "set_metallic\000", 373806689)
		methodBaseMaterial3D[13] = classDB.get_method_bind("BaseMaterial3D\000", "get_metallic\000", 1740695150)
		methodBaseMaterial3D[14] = classDB.get_method_bind("BaseMaterial3D\000", "set_roughness\000", 373806689)
		methodBaseMaterial3D[15] = classDB.get_method_bind("BaseMaterial3D\000", "get_roughness\000", 1740695150)
		methodBaseMaterial3D[16] = classDB.get_method_bind("BaseMaterial3D\000", "set_emission\000", 2920490490)
		methodBaseMaterial3D[17] = classDB.get_method_bind("BaseMaterial3D\000", "get_emission\000", 3444240500)
		methodBaseMaterial3D[18] = classDB.get_method_bind("BaseMaterial3D\000", "set_emission_energy\000", 373806689)
		methodBaseMaterial3D[19] = classDB.get_method_bind("BaseMaterial3D\000", "get_emission_energy\000", 1740695150)
		methodBaseMaterial3D[20] = classDB.get_method_bind("BaseMaterial3D\000", "set_normal_scale\000", 373806689)
		methodBaseMaterial3D[21] = classDB.get_method_bind("BaseMaterial3D\000", "get_normal_scale\000", 1740695150)
		methodBaseMaterial3D[22] = classDB.get_method_bind("BaseMaterial3D\000", "set_rim\000", 373806689)
		methodBaseMaterial3D[23] = classDB.get_method_bind("BaseMaterial3D\000", "get_rim\000", 1740695150)
		methodBaseMaterial3D[24] = classDB.get_method_bind("BaseMaterial3D\000", "set_rim_tint\000", 373806689)
		methodBaseMaterial3D[25] = classDB.get_method_bind("BaseMaterial3D\000", "get_rim_tint\000", 1740695150)
		methodBaseMaterial3D[26] = classDB.get_method_bind("BaseMaterial3D\000", "set_clearcoat\000", 373806689)
		methodBaseMaterial3D[27] = classDB.get_method_bind("BaseMaterial3D\000", "get_clearcoat\000", 1740695150)
		methodBaseMaterial3D[28] = classDB.get_method_bind("BaseMaterial3D\000", "set_clearcoat_roughness\000", 373806689)
		methodBaseMaterial3D[29] = classDB.get_method_bind("BaseMaterial3D\000", "get_clearcoat_roughness\000", 1740695150)
		methodBaseMaterial3D[30] = classDB.get_method_bind("BaseMaterial3D\000", "set_anisotropy\000", 373806689)
		methodBaseMaterial3D[31] = classDB.get_method_bind("BaseMaterial3D\000", "get_anisotropy\000", 1740695150)
		methodBaseMaterial3D[32] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_scale\000", 373806689)
		methodBaseMaterial3D[33] = classDB.get_method_bind("BaseMaterial3D\000", "get_heightmap_scale\000", 1740695150)
		methodBaseMaterial3D[34] = classDB.get_method_bind("BaseMaterial3D\000", "set_subsurface_scattering_strength\000", 373806689)
		methodBaseMaterial3D[35] = classDB.get_method_bind("BaseMaterial3D\000", "get_subsurface_scattering_strength\000", 1740695150)
		methodBaseMaterial3D[36] = classDB.get_method_bind("BaseMaterial3D\000", "set_transmittance_color\000", 2920490490)
		methodBaseMaterial3D[37] = classDB.get_method_bind("BaseMaterial3D\000", "get_transmittance_color\000", 3444240500)
		methodBaseMaterial3D[38] = classDB.get_method_bind("BaseMaterial3D\000", "set_transmittance_depth\000", 373806689)
		methodBaseMaterial3D[39] = classDB.get_method_bind("BaseMaterial3D\000", "get_transmittance_depth\000", 1740695150)
		methodBaseMaterial3D[40] = classDB.get_method_bind("BaseMaterial3D\000", "set_transmittance_boost\000", 373806689)
		methodBaseMaterial3D[41] = classDB.get_method_bind("BaseMaterial3D\000", "get_transmittance_boost\000", 1740695150)
		methodBaseMaterial3D[42] = classDB.get_method_bind("BaseMaterial3D\000", "set_backlight\000", 2920490490)
		methodBaseMaterial3D[43] = classDB.get_method_bind("BaseMaterial3D\000", "get_backlight\000", 3444240500)
		methodBaseMaterial3D[44] = classDB.get_method_bind("BaseMaterial3D\000", "set_refraction\000", 373806689)
		methodBaseMaterial3D[45] = classDB.get_method_bind("BaseMaterial3D\000", "get_refraction\000", 1740695150)
		methodBaseMaterial3D[46] = classDB.get_method_bind("BaseMaterial3D\000", "set_point_size\000", 373806689)
		methodBaseMaterial3D[47] = classDB.get_method_bind("BaseMaterial3D\000", "get_point_size\000", 1740695150)
		methodBaseMaterial3D[48] = classDB.get_method_bind("BaseMaterial3D\000", "set_detail_uv\000", 456801921)
		methodBaseMaterial3D[49] = classDB.get_method_bind("BaseMaterial3D\000", "get_detail_uv\000", 2306920512)
		methodBaseMaterial3D[50] = classDB.get_method_bind("BaseMaterial3D\000", "set_blend_mode\000", 2830186259)
		methodBaseMaterial3D[51] = classDB.get_method_bind("BaseMaterial3D\000", "get_blend_mode\000", 4022690962)
		methodBaseMaterial3D[52] = classDB.get_method_bind("BaseMaterial3D\000", "set_depth_draw_mode\000", 1456584748)
		methodBaseMaterial3D[53] = classDB.get_method_bind("BaseMaterial3D\000", "get_depth_draw_mode\000", 2578197639)
		methodBaseMaterial3D[54] = classDB.get_method_bind("BaseMaterial3D\000", "set_cull_mode\000", 2338909218)
		methodBaseMaterial3D[55] = classDB.get_method_bind("BaseMaterial3D\000", "get_cull_mode\000", 1941499586)
		methodBaseMaterial3D[56] = classDB.get_method_bind("BaseMaterial3D\000", "set_diffuse_mode\000", 1045299638)
		methodBaseMaterial3D[57] = classDB.get_method_bind("BaseMaterial3D\000", "get_diffuse_mode\000", 3973617136)
		methodBaseMaterial3D[58] = classDB.get_method_bind("BaseMaterial3D\000", "set_specular_mode\000", 584737147)
		methodBaseMaterial3D[59] = classDB.get_method_bind("BaseMaterial3D\000", "get_specular_mode\000", 2569953298)
		methodBaseMaterial3D[60] = classDB.get_method_bind("BaseMaterial3D\000", "set_flag\000", 3070159527)
		methodBaseMaterial3D[61] = classDB.get_method_bind("BaseMaterial3D\000", "get_flag\000", 1286410065)
		methodBaseMaterial3D[62] = classDB.get_method_bind("BaseMaterial3D\000", "set_texture_filter\000", 22904437)
		methodBaseMaterial3D[63] = classDB.get_method_bind("BaseMaterial3D\000", "get_texture_filter\000", 3289213076)
		methodBaseMaterial3D[64] = classDB.get_method_bind("BaseMaterial3D\000", "set_feature\000", 2819288693)
		methodBaseMaterial3D[65] = classDB.get_method_bind("BaseMaterial3D\000", "get_feature\000", 1965241794)
		methodBaseMaterial3D[66] = classDB.get_method_bind("BaseMaterial3D\000", "set_texture\000", 464208135)
		methodBaseMaterial3D[67] = classDB.get_method_bind("BaseMaterial3D\000", "get_texture\000", 329605813)
		methodBaseMaterial3D[68] = classDB.get_method_bind("BaseMaterial3D\000", "set_detail_blend_mode\000", 2830186259)
		methodBaseMaterial3D[69] = classDB.get_method_bind("BaseMaterial3D\000", "get_detail_blend_mode\000", 4022690962)
		methodBaseMaterial3D[70] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv1_scale\000", 3460891852)
		methodBaseMaterial3D[71] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv1_scale\000", 3360562783)
		methodBaseMaterial3D[72] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv1_offset\000", 3460891852)
		methodBaseMaterial3D[73] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv1_offset\000", 3360562783)
		methodBaseMaterial3D[74] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv1_triplanar_blend_sharpness\000", 373806689)
		methodBaseMaterial3D[75] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv1_triplanar_blend_sharpness\000", 1740695150)
		methodBaseMaterial3D[76] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv2_scale\000", 3460891852)
		methodBaseMaterial3D[77] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv2_scale\000", 3360562783)
		methodBaseMaterial3D[78] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv2_offset\000", 3460891852)
		methodBaseMaterial3D[79] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv2_offset\000", 3360562783)
		methodBaseMaterial3D[80] = classDB.get_method_bind("BaseMaterial3D\000", "set_uv2_triplanar_blend_sharpness\000", 373806689)
		methodBaseMaterial3D[81] = classDB.get_method_bind("BaseMaterial3D\000", "get_uv2_triplanar_blend_sharpness\000", 1740695150)
		methodBaseMaterial3D[82] = classDB.get_method_bind("BaseMaterial3D\000", "set_billboard_mode\000", 4202036497)
		methodBaseMaterial3D[83] = classDB.get_method_bind("BaseMaterial3D\000", "get_billboard_mode\000", 1283840139)
		methodBaseMaterial3D[84] = classDB.get_method_bind("BaseMaterial3D\000", "set_particles_anim_h_frames\000", 1286410249)
		methodBaseMaterial3D[85] = classDB.get_method_bind("BaseMaterial3D\000", "get_particles_anim_h_frames\000", 3905245786)
		methodBaseMaterial3D[86] = classDB.get_method_bind("BaseMaterial3D\000", "set_particles_anim_v_frames\000", 1286410249)
		methodBaseMaterial3D[87] = classDB.get_method_bind("BaseMaterial3D\000", "get_particles_anim_v_frames\000", 3905245786)
		methodBaseMaterial3D[88] = classDB.get_method_bind("BaseMaterial3D\000", "set_particles_anim_loop\000", 2586408642)
		methodBaseMaterial3D[89] = classDB.get_method_bind("BaseMaterial3D\000", "get_particles_anim_loop\000", 36873697)
		methodBaseMaterial3D[90] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_deep_parallax\000", 2586408642)
		methodBaseMaterial3D[91] = classDB.get_method_bind("BaseMaterial3D\000", "is_heightmap_deep_parallax_enabled\000", 36873697)
		methodBaseMaterial3D[92] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_deep_parallax_min_layers\000", 1286410249)
		methodBaseMaterial3D[93] = classDB.get_method_bind("BaseMaterial3D\000", "get_heightmap_deep_parallax_min_layers\000", 3905245786)
		methodBaseMaterial3D[94] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_deep_parallax_max_layers\000", 1286410249)
		methodBaseMaterial3D[95] = classDB.get_method_bind("BaseMaterial3D\000", "get_heightmap_deep_parallax_max_layers\000", 3905245786)
		methodBaseMaterial3D[96] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_deep_parallax_flip_tangent\000", 2586408642)
		methodBaseMaterial3D[97] = classDB.get_method_bind("BaseMaterial3D\000", "get_heightmap_deep_parallax_flip_tangent\000", 36873697)
		methodBaseMaterial3D[98] = classDB.get_method_bind("BaseMaterial3D\000", "set_heightmap_deep_parallax_flip_binormal\000", 2586408642)
		methodBaseMaterial3D[99] = classDB.get_method_bind("BaseMaterial3D\000", "get_heightmap_deep_parallax_flip_binormal\000", 36873697)
		methodBaseMaterial3D[100] = classDB.get_method_bind("BaseMaterial3D\000", "set_grow\000", 373806689)
		methodBaseMaterial3D[101] = classDB.get_method_bind("BaseMaterial3D\000", "get_grow\000", 1740695150)
		methodBaseMaterial3D[102] = classDB.get_method_bind("BaseMaterial3D\000", "set_emission_operator\000", 3825128922)
		methodBaseMaterial3D[103] = classDB.get_method_bind("BaseMaterial3D\000", "get_emission_operator\000", 974205018)
		methodBaseMaterial3D[104] = classDB.get_method_bind("BaseMaterial3D\000", "set_ao_light_affect\000", 373806689)
		methodBaseMaterial3D[105] = classDB.get_method_bind("BaseMaterial3D\000", "get_ao_light_affect\000", 1740695150)
		methodBaseMaterial3D[106] = classDB.get_method_bind("BaseMaterial3D\000", "set_alpha_scissor_threshold\000", 373806689)
		methodBaseMaterial3D[107] = classDB.get_method_bind("BaseMaterial3D\000", "get_alpha_scissor_threshold\000", 1740695150)
		methodBaseMaterial3D[108] = classDB.get_method_bind("BaseMaterial3D\000", "set_alpha_hash_scale\000", 373806689)
		methodBaseMaterial3D[109] = classDB.get_method_bind("BaseMaterial3D\000", "get_alpha_hash_scale\000", 1740695150)
		methodBaseMaterial3D[110] = classDB.get_method_bind("BaseMaterial3D\000", "set_grow_enabled\000", 2586408642)
		methodBaseMaterial3D[111] = classDB.get_method_bind("BaseMaterial3D\000", "is_grow_enabled\000", 36873697)
		methodBaseMaterial3D[112] = classDB.get_method_bind("BaseMaterial3D\000", "set_metallic_texture_channel\000", 744167988)
		methodBaseMaterial3D[113] = classDB.get_method_bind("BaseMaterial3D\000", "get_metallic_texture_channel\000", 568133867)
		methodBaseMaterial3D[114] = classDB.get_method_bind("BaseMaterial3D\000", "set_roughness_texture_channel\000", 744167988)
		methodBaseMaterial3D[115] = classDB.get_method_bind("BaseMaterial3D\000", "get_roughness_texture_channel\000", 568133867)
		methodBaseMaterial3D[116] = classDB.get_method_bind("BaseMaterial3D\000", "set_ao_texture_channel\000", 744167988)
		methodBaseMaterial3D[117] = classDB.get_method_bind("BaseMaterial3D\000", "get_ao_texture_channel\000", 568133867)
		methodBaseMaterial3D[118] = classDB.get_method_bind("BaseMaterial3D\000", "set_refraction_texture_channel\000", 744167988)
		methodBaseMaterial3D[119] = classDB.get_method_bind("BaseMaterial3D\000", "get_refraction_texture_channel\000", 568133867)
		methodBaseMaterial3D[120] = classDB.get_method_bind("BaseMaterial3D\000", "set_proximity_fade\000", 2586408642)
		methodBaseMaterial3D[121] = classDB.get_method_bind("BaseMaterial3D\000", "is_proximity_fade_enabled\000", 36873697)
		methodBaseMaterial3D[122] = classDB.get_method_bind("BaseMaterial3D\000", "set_proximity_fade_distance\000", 373806689)
		methodBaseMaterial3D[123] = classDB.get_method_bind("BaseMaterial3D\000", "get_proximity_fade_distance\000", 1740695150)
		methodBaseMaterial3D[124] = classDB.get_method_bind("BaseMaterial3D\000", "set_msdf_pixel_range\000", 373806689)
		methodBaseMaterial3D[125] = classDB.get_method_bind("BaseMaterial3D\000", "get_msdf_pixel_range\000", 1740695150)
		methodBaseMaterial3D[126] = classDB.get_method_bind("BaseMaterial3D\000", "set_msdf_outline_size\000", 373806689)
		methodBaseMaterial3D[127] = classDB.get_method_bind("BaseMaterial3D\000", "get_msdf_outline_size\000", 1740695150)
		methodBaseMaterial3D[128] = classDB.get_method_bind("BaseMaterial3D\000", "set_distance_fade\000", 1379478617)
		methodBaseMaterial3D[129] = classDB.get_method_bind("BaseMaterial3D\000", "get_distance_fade\000", 2694575734)
		methodBaseMaterial3D[130] = classDB.get_method_bind("BaseMaterial3D\000", "set_distance_fade_max_distance\000", 373806689)
		methodBaseMaterial3D[131] = classDB.get_method_bind("BaseMaterial3D\000", "get_distance_fade_max_distance\000", 1740695150)
		methodBaseMaterial3D[132] = classDB.get_method_bind("BaseMaterial3D\000", "set_distance_fade_min_distance\000", 373806689)
		methodBaseMaterial3D[133] = classDB.get_method_bind("BaseMaterial3D\000", "get_distance_fade_min_distance\000", 1740695150)
		methodBitMap[0] = classDB.get_method_bind("BitMap\000", "create\000", 743155724)
		methodBitMap[1] = classDB.get_method_bind("BitMap\000", "create_from_image_alpha\000", 505265891)
		methodBitMap[2] = classDB.get_method_bind("BitMap\000", "set_bit\000", 979101055)
		methodBitMap[3] = classDB.get_method_bind("BitMap\000", "get_bit\000", 556197845)
		methodBitMap[4] = classDB.get_method_bind("BitMap\000", "set_bit_rect\000", 1453796981)
		methodBitMap[5] = classDB.get_method_bind("BitMap\000", "get_true_bit_count\000", 3905245786)
		methodBitMap[6] = classDB.get_method_bind("BitMap\000", "get_size\000", 3341600327)
		methodBitMap[7] = classDB.get_method_bind("BitMap\000", "resize\000", 743155724)
		methodBitMap[8] = classDB.get_method_bind("BitMap\000", "grow_mask\000", 1356297692)
		methodBitMap[9] = classDB.get_method_bind("BitMap\000", "convert_to_image\000", 4190603485)
		methodBitMap[10] = classDB.get_method_bind("BitMap\000", "opaque_to_polygons\000", 88560356)
		methodBone2D[0] = classDB.get_method_bind("Bone2D\000", "set_rest\000", 2761652528)
		methodBone2D[1] = classDB.get_method_bind("Bone2D\000", "get_rest\000", 3814499831)
		methodBone2D[2] = classDB.get_method_bind("Bone2D\000", "apply_rest\000", 3218959716)
		methodBone2D[3] = classDB.get_method_bind("Bone2D\000", "get_skeleton_rest\000", 3814499831)
		methodBone2D[4] = classDB.get_method_bind("Bone2D\000", "get_index_in_skeleton\000", 3905245786)
		methodBone2D[5] = classDB.get_method_bind("Bone2D\000", "set_default_length\000", 373806689)
		methodBone2D[6] = classDB.get_method_bind("Bone2D\000", "get_default_length\000", 1740695150)
		methodBone2D[7] = classDB.get_method_bind("Bone2D\000", "set_autocalculate_length_and_angle\000", 2586408642)
		methodBone2D[8] = classDB.get_method_bind("Bone2D\000", "get_autocalculate_length_and_angle\000", 36873697)
		methodBone2D[9] = classDB.get_method_bind("Bone2D\000", "set_length\000", 373806689)
		methodBone2D[10] = classDB.get_method_bind("Bone2D\000", "get_length\000", 1740695150)
		methodBone2D[11] = classDB.get_method_bind("Bone2D\000", "set_bone_angle\000", 373806689)
		methodBone2D[12] = classDB.get_method_bind("Bone2D\000", "get_bone_angle\000", 1740695150)
		methodBoneAttachment3D[0] = classDB.get_method_bind("BoneAttachment3D\000", "set_bone_name\000", 83702148)
		methodBoneAttachment3D[1] = classDB.get_method_bind("BoneAttachment3D\000", "get_bone_name\000", 201670096)
		methodBoneAttachment3D[2] = classDB.get_method_bind("BoneAttachment3D\000", "set_bone_idx\000", 1286410249)
		methodBoneAttachment3D[3] = classDB.get_method_bind("BoneAttachment3D\000", "get_bone_idx\000", 3905245786)
		methodBoneAttachment3D[4] = classDB.get_method_bind("BoneAttachment3D\000", "on_bone_pose_update\000", 1286410249)
		methodBoneAttachment3D[5] = classDB.get_method_bind("BoneAttachment3D\000", "set_override_pose\000", 2586408642)
		methodBoneAttachment3D[6] = classDB.get_method_bind("BoneAttachment3D\000", "get_override_pose\000", 36873697)
		methodBoneAttachment3D[7] = classDB.get_method_bind("BoneAttachment3D\000", "set_override_mode\000", 1286410249)
		methodBoneAttachment3D[8] = classDB.get_method_bind("BoneAttachment3D\000", "get_override_mode\000", 3905245786)
		methodBoneAttachment3D[9] = classDB.get_method_bind("BoneAttachment3D\000", "set_use_external_skeleton\000", 2586408642)
		methodBoneAttachment3D[10] = classDB.get_method_bind("BoneAttachment3D\000", "get_use_external_skeleton\000", 36873697)
		methodBoneAttachment3D[11] = classDB.get_method_bind("BoneAttachment3D\000", "set_external_skeleton\000", 1348162250)
		methodBoneAttachment3D[12] = classDB.get_method_bind("BoneAttachment3D\000", "get_external_skeleton\000", 4075236667)
		methodBoneMap[0] = classDB.get_method_bind("BoneMap\000", "get_profile\000", 4291782652)
		methodBoneMap[1] = classDB.get_method_bind("BoneMap\000", "set_profile\000", 3870374136)
		methodBoneMap[2] = classDB.get_method_bind("BoneMap\000", "get_skeleton_bone_name\000", 1965194235)
		methodBoneMap[3] = classDB.get_method_bind("BoneMap\000", "set_skeleton_bone_name\000", 3740211285)
		methodBoneMap[4] = classDB.get_method_bind("BoneMap\000", "find_profile_bone_name\000", 1965194235)
		methodBoxContainer[0] = classDB.get_method_bind("BoxContainer\000", "add_spacer\000", 1326660695)
		methodBoxContainer[1] = classDB.get_method_bind("BoxContainer\000", "get_alignment\000", 1915476527)
		methodBoxContainer[2] = classDB.get_method_bind("BoxContainer\000", "set_alignment\000", 2456745134)
		methodBoxMesh[0] = classDB.get_method_bind("BoxMesh\000", "set_size\000", 3460891852)
		methodBoxMesh[1] = classDB.get_method_bind("BoxMesh\000", "get_size\000", 3360562783)
		methodBoxMesh[2] = classDB.get_method_bind("BoxMesh\000", "set_subdivide_width\000", 1286410249)
		methodBoxMesh[3] = classDB.get_method_bind("BoxMesh\000", "get_subdivide_width\000", 3905245786)
		methodBoxMesh[4] = classDB.get_method_bind("BoxMesh\000", "set_subdivide_height\000", 1286410249)
		methodBoxMesh[5] = classDB.get_method_bind("BoxMesh\000", "get_subdivide_height\000", 3905245786)
		methodBoxMesh[6] = classDB.get_method_bind("BoxMesh\000", "set_subdivide_depth\000", 1286410249)
		methodBoxMesh[7] = classDB.get_method_bind("BoxMesh\000", "get_subdivide_depth\000", 3905245786)
		methodBoxOccluder3D[0] = classDB.get_method_bind("BoxOccluder3D\000", "set_size\000", 3460891852)
		methodBoxOccluder3D[1] = classDB.get_method_bind("BoxOccluder3D\000", "get_size\000", 3360562783)
		methodBoxShape3D[0] = classDB.get_method_bind("BoxShape3D\000", "set_size\000", 3460891852)
		methodBoxShape3D[1] = classDB.get_method_bind("BoxShape3D\000", "get_size\000", 3360562783)
		methodButton[0] = classDB.get_method_bind("Button\000", "set_text\000", 83702148)
		methodButton[1] = classDB.get_method_bind("Button\000", "get_text\000", 201670096)
		methodButton[2] = classDB.get_method_bind("Button\000", "set_text_overrun_behavior\000", 1008890932)
		methodButton[3] = classDB.get_method_bind("Button\000", "get_text_overrun_behavior\000", 3779142101)
		methodButton[4] = classDB.get_method_bind("Button\000", "set_text_direction\000", 119160795)
		methodButton[5] = classDB.get_method_bind("Button\000", "get_text_direction\000", 797257663)
		methodButton[6] = classDB.get_method_bind("Button\000", "set_language\000", 83702148)
		methodButton[7] = classDB.get_method_bind("Button\000", "get_language\000", 201670096)
		methodButton[8] = classDB.get_method_bind("Button\000", "set_button_icon\000", 4051416890)
		methodButton[9] = classDB.get_method_bind("Button\000", "get_button_icon\000", 3635182373)
		methodButton[10] = classDB.get_method_bind("Button\000", "set_flat\000", 2586408642)
		methodButton[11] = classDB.get_method_bind("Button\000", "is_flat\000", 36873697)
		methodButton[12] = classDB.get_method_bind("Button\000", "set_clip_text\000", 2586408642)
		methodButton[13] = classDB.get_method_bind("Button\000", "get_clip_text\000", 36873697)
		methodButton[14] = classDB.get_method_bind("Button\000", "set_text_alignment\000", 2312603777)
		methodButton[15] = classDB.get_method_bind("Button\000", "get_text_alignment\000", 341400642)
		methodButton[16] = classDB.get_method_bind("Button\000", "set_icon_alignment\000", 2312603777)
		methodButton[17] = classDB.get_method_bind("Button\000", "get_icon_alignment\000", 341400642)
		methodButton[18] = classDB.get_method_bind("Button\000", "set_expand_icon\000", 2586408642)
		methodButton[19] = classDB.get_method_bind("Button\000", "is_expand_icon\000", 36873697)
		methodButtonGroup[0] = classDB.get_method_bind("ButtonGroup\000", "get_pressed_button\000", 3886434893)
		methodButtonGroup[1] = classDB.get_method_bind("ButtonGroup\000", "get_buttons\000", 2915620761)
		methodCPUParticles2D[0] = classDB.get_method_bind("CPUParticles2D\000", "set_emitting\000", 2586408642)
		methodCPUParticles2D[1] = classDB.get_method_bind("CPUParticles2D\000", "set_amount\000", 1286410249)
		methodCPUParticles2D[2] = classDB.get_method_bind("CPUParticles2D\000", "set_lifetime\000", 373806689)
		methodCPUParticles2D[3] = classDB.get_method_bind("CPUParticles2D\000", "set_one_shot\000", 2586408642)
		methodCPUParticles2D[4] = classDB.get_method_bind("CPUParticles2D\000", "set_pre_process_time\000", 373806689)
		methodCPUParticles2D[5] = classDB.get_method_bind("CPUParticles2D\000", "set_explosiveness_ratio\000", 373806689)
		methodCPUParticles2D[6] = classDB.get_method_bind("CPUParticles2D\000", "set_randomness_ratio\000", 373806689)
		methodCPUParticles2D[7] = classDB.get_method_bind("CPUParticles2D\000", "set_lifetime_randomness\000", 373806689)
		methodCPUParticles2D[8] = classDB.get_method_bind("CPUParticles2D\000", "set_use_local_coordinates\000", 2586408642)
		methodCPUParticles2D[9] = classDB.get_method_bind("CPUParticles2D\000", "set_fixed_fps\000", 1286410249)
		methodCPUParticles2D[10] = classDB.get_method_bind("CPUParticles2D\000", "set_fractional_delta\000", 2586408642)
		methodCPUParticles2D[11] = classDB.get_method_bind("CPUParticles2D\000", "set_speed_scale\000", 373806689)
		methodCPUParticles2D[12] = classDB.get_method_bind("CPUParticles2D\000", "is_emitting\000", 36873697)
		methodCPUParticles2D[13] = classDB.get_method_bind("CPUParticles2D\000", "get_amount\000", 3905245786)
		methodCPUParticles2D[14] = classDB.get_method_bind("CPUParticles2D\000", "get_lifetime\000", 1740695150)
		methodCPUParticles2D[15] = classDB.get_method_bind("CPUParticles2D\000", "get_one_shot\000", 36873697)
		methodCPUParticles2D[16] = classDB.get_method_bind("CPUParticles2D\000", "get_pre_process_time\000", 1740695150)
		methodCPUParticles2D[17] = classDB.get_method_bind("CPUParticles2D\000", "get_explosiveness_ratio\000", 1740695150)
		methodCPUParticles2D[18] = classDB.get_method_bind("CPUParticles2D\000", "get_randomness_ratio\000", 1740695150)
		methodCPUParticles2D[19] = classDB.get_method_bind("CPUParticles2D\000", "get_lifetime_randomness\000", 1740695150)
		methodCPUParticles2D[20] = classDB.get_method_bind("CPUParticles2D\000", "get_use_local_coordinates\000", 36873697)
		methodCPUParticles2D[21] = classDB.get_method_bind("CPUParticles2D\000", "get_fixed_fps\000", 3905245786)
		methodCPUParticles2D[22] = classDB.get_method_bind("CPUParticles2D\000", "get_fractional_delta\000", 36873697)
		methodCPUParticles2D[23] = classDB.get_method_bind("CPUParticles2D\000", "get_speed_scale\000", 1740695150)
		methodCPUParticles2D[24] = classDB.get_method_bind("CPUParticles2D\000", "set_draw_order\000", 4183193490)
		methodCPUParticles2D[25] = classDB.get_method_bind("CPUParticles2D\000", "get_draw_order\000", 1668655735)
		methodCPUParticles2D[26] = classDB.get_method_bind("CPUParticles2D\000", "set_texture\000", 4051416890)
		methodCPUParticles2D[27] = classDB.get_method_bind("CPUParticles2D\000", "get_texture\000", 3635182373)
		methodCPUParticles2D[28] = classDB.get_method_bind("CPUParticles2D\000", "restart\000", 3218959716)
		methodCPUParticles2D[29] = classDB.get_method_bind("CPUParticles2D\000", "set_direction\000", 743155724)
		methodCPUParticles2D[30] = classDB.get_method_bind("CPUParticles2D\000", "get_direction\000", 3341600327)
		methodCPUParticles2D[31] = classDB.get_method_bind("CPUParticles2D\000", "set_spread\000", 373806689)
		methodCPUParticles2D[32] = classDB.get_method_bind("CPUParticles2D\000", "get_spread\000", 1740695150)
		methodCPUParticles2D[33] = classDB.get_method_bind("CPUParticles2D\000", "set_param_min\000", 3320615296)
		methodCPUParticles2D[34] = classDB.get_method_bind("CPUParticles2D\000", "get_param_min\000", 2038050600)
		methodCPUParticles2D[35] = classDB.get_method_bind("CPUParticles2D\000", "set_param_max\000", 3320615296)
		methodCPUParticles2D[36] = classDB.get_method_bind("CPUParticles2D\000", "get_param_max\000", 2038050600)
		methodCPUParticles2D[37] = classDB.get_method_bind("CPUParticles2D\000", "set_param_curve\000", 2959350143)
		methodCPUParticles2D[38] = classDB.get_method_bind("CPUParticles2D\000", "get_param_curve\000", 2603158474)
		methodCPUParticles2D[39] = classDB.get_method_bind("CPUParticles2D\000", "set_color\000", 2920490490)
		methodCPUParticles2D[40] = classDB.get_method_bind("CPUParticles2D\000", "get_color\000", 3444240500)
		methodCPUParticles2D[41] = classDB.get_method_bind("CPUParticles2D\000", "set_color_ramp\000", 2756054477)
		methodCPUParticles2D[42] = classDB.get_method_bind("CPUParticles2D\000", "get_color_ramp\000", 132272999)
		methodCPUParticles2D[43] = classDB.get_method_bind("CPUParticles2D\000", "set_color_initial_ramp\000", 2756054477)
		methodCPUParticles2D[44] = classDB.get_method_bind("CPUParticles2D\000", "get_color_initial_ramp\000", 132272999)
		methodCPUParticles2D[45] = classDB.get_method_bind("CPUParticles2D\000", "set_particle_flag\000", 4178137949)
		methodCPUParticles2D[46] = classDB.get_method_bind("CPUParticles2D\000", "get_particle_flag\000", 2829976507)
		methodCPUParticles2D[47] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_shape\000", 393763892)
		methodCPUParticles2D[48] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_shape\000", 1740246024)
		methodCPUParticles2D[49] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_sphere_radius\000", 373806689)
		methodCPUParticles2D[50] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_sphere_radius\000", 1740695150)
		methodCPUParticles2D[51] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_rect_extents\000", 743155724)
		methodCPUParticles2D[52] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_rect_extents\000", 3341600327)
		methodCPUParticles2D[53] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_points\000", 1509147220)
		methodCPUParticles2D[54] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_points\000", 2961356807)
		methodCPUParticles2D[55] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_normals\000", 1509147220)
		methodCPUParticles2D[56] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_normals\000", 2961356807)
		methodCPUParticles2D[57] = classDB.get_method_bind("CPUParticles2D\000", "set_emission_colors\000", 3546319833)
		methodCPUParticles2D[58] = classDB.get_method_bind("CPUParticles2D\000", "get_emission_colors\000", 1392750486)
		methodCPUParticles2D[59] = classDB.get_method_bind("CPUParticles2D\000", "get_gravity\000", 3341600327)
		methodCPUParticles2D[60] = classDB.get_method_bind("CPUParticles2D\000", "set_gravity\000", 743155724)
		methodCPUParticles2D[61] = classDB.get_method_bind("CPUParticles2D\000", "get_split_scale\000", 2240911060)
		methodCPUParticles2D[62] = classDB.get_method_bind("CPUParticles2D\000", "set_split_scale\000", 2586408642)
		methodCPUParticles2D[63] = classDB.get_method_bind("CPUParticles2D\000", "get_scale_curve_x\000", 2460114913)
		methodCPUParticles2D[64] = classDB.get_method_bind("CPUParticles2D\000", "set_scale_curve_x\000", 270443179)
		methodCPUParticles2D[65] = classDB.get_method_bind("CPUParticles2D\000", "get_scale_curve_y\000", 2460114913)
		methodCPUParticles2D[66] = classDB.get_method_bind("CPUParticles2D\000", "set_scale_curve_y\000", 270443179)
		methodCPUParticles2D[67] = classDB.get_method_bind("CPUParticles2D\000", "convert_from_particles\000", 1078189570)
		methodCPUParticles3D[0] = classDB.get_method_bind("CPUParticles3D\000", "set_emitting\000", 2586408642)
		methodCPUParticles3D[1] = classDB.get_method_bind("CPUParticles3D\000", "set_amount\000", 1286410249)
		methodCPUParticles3D[2] = classDB.get_method_bind("CPUParticles3D\000", "set_lifetime\000", 373806689)
		methodCPUParticles3D[3] = classDB.get_method_bind("CPUParticles3D\000", "set_one_shot\000", 2586408642)
		methodCPUParticles3D[4] = classDB.get_method_bind("CPUParticles3D\000", "set_pre_process_time\000", 373806689)
		methodCPUParticles3D[5] = classDB.get_method_bind("CPUParticles3D\000", "set_explosiveness_ratio\000", 373806689)
		methodCPUParticles3D[6] = classDB.get_method_bind("CPUParticles3D\000", "set_randomness_ratio\000", 373806689)
		methodCPUParticles3D[7] = classDB.get_method_bind("CPUParticles3D\000", "set_lifetime_randomness\000", 373806689)
		methodCPUParticles3D[8] = classDB.get_method_bind("CPUParticles3D\000", "set_use_local_coordinates\000", 2586408642)
		methodCPUParticles3D[9] = classDB.get_method_bind("CPUParticles3D\000", "set_fixed_fps\000", 1286410249)
		methodCPUParticles3D[10] = classDB.get_method_bind("CPUParticles3D\000", "set_fractional_delta\000", 2586408642)
		methodCPUParticles3D[11] = classDB.get_method_bind("CPUParticles3D\000", "set_speed_scale\000", 373806689)
		methodCPUParticles3D[12] = classDB.get_method_bind("CPUParticles3D\000", "is_emitting\000", 36873697)
		methodCPUParticles3D[13] = classDB.get_method_bind("CPUParticles3D\000", "get_amount\000", 3905245786)
		methodCPUParticles3D[14] = classDB.get_method_bind("CPUParticles3D\000", "get_lifetime\000", 1740695150)
		methodCPUParticles3D[15] = classDB.get_method_bind("CPUParticles3D\000", "get_one_shot\000", 36873697)
		methodCPUParticles3D[16] = classDB.get_method_bind("CPUParticles3D\000", "get_pre_process_time\000", 1740695150)
		methodCPUParticles3D[17] = classDB.get_method_bind("CPUParticles3D\000", "get_explosiveness_ratio\000", 1740695150)
		methodCPUParticles3D[18] = classDB.get_method_bind("CPUParticles3D\000", "get_randomness_ratio\000", 1740695150)
		methodCPUParticles3D[19] = classDB.get_method_bind("CPUParticles3D\000", "get_lifetime_randomness\000", 1740695150)
		methodCPUParticles3D[20] = classDB.get_method_bind("CPUParticles3D\000", "get_use_local_coordinates\000", 36873697)
		methodCPUParticles3D[21] = classDB.get_method_bind("CPUParticles3D\000", "get_fixed_fps\000", 3905245786)
		methodCPUParticles3D[22] = classDB.get_method_bind("CPUParticles3D\000", "get_fractional_delta\000", 36873697)
		methodCPUParticles3D[23] = classDB.get_method_bind("CPUParticles3D\000", "get_speed_scale\000", 1740695150)
		methodCPUParticles3D[24] = classDB.get_method_bind("CPUParticles3D\000", "set_draw_order\000", 1427401774)
		methodCPUParticles3D[25] = classDB.get_method_bind("CPUParticles3D\000", "get_draw_order\000", 1321900776)
		methodCPUParticles3D[26] = classDB.get_method_bind("CPUParticles3D\000", "set_mesh\000", 194775623)
		methodCPUParticles3D[27] = classDB.get_method_bind("CPUParticles3D\000", "get_mesh\000", 1808005922)
		methodCPUParticles3D[28] = classDB.get_method_bind("CPUParticles3D\000", "restart\000", 3218959716)
		methodCPUParticles3D[29] = classDB.get_method_bind("CPUParticles3D\000", "set_direction\000", 3460891852)
		methodCPUParticles3D[30] = classDB.get_method_bind("CPUParticles3D\000", "get_direction\000", 3360562783)
		methodCPUParticles3D[31] = classDB.get_method_bind("CPUParticles3D\000", "set_spread\000", 373806689)
		methodCPUParticles3D[32] = classDB.get_method_bind("CPUParticles3D\000", "get_spread\000", 1740695150)
		methodCPUParticles3D[33] = classDB.get_method_bind("CPUParticles3D\000", "set_flatness\000", 373806689)
		methodCPUParticles3D[34] = classDB.get_method_bind("CPUParticles3D\000", "get_flatness\000", 1740695150)
		methodCPUParticles3D[35] = classDB.get_method_bind("CPUParticles3D\000", "set_param_min\000", 557936109)
		methodCPUParticles3D[36] = classDB.get_method_bind("CPUParticles3D\000", "get_param_min\000", 597646162)
		methodCPUParticles3D[37] = classDB.get_method_bind("CPUParticles3D\000", "set_param_max\000", 557936109)
		methodCPUParticles3D[38] = classDB.get_method_bind("CPUParticles3D\000", "get_param_max\000", 597646162)
		methodCPUParticles3D[39] = classDB.get_method_bind("CPUParticles3D\000", "set_param_curve\000", 4044142537)
		methodCPUParticles3D[40] = classDB.get_method_bind("CPUParticles3D\000", "get_param_curve\000", 4132790277)
		methodCPUParticles3D[41] = classDB.get_method_bind("CPUParticles3D\000", "set_color\000", 2920490490)
		methodCPUParticles3D[42] = classDB.get_method_bind("CPUParticles3D\000", "get_color\000", 3444240500)
		methodCPUParticles3D[43] = classDB.get_method_bind("CPUParticles3D\000", "set_color_ramp\000", 2756054477)
		methodCPUParticles3D[44] = classDB.get_method_bind("CPUParticles3D\000", "get_color_ramp\000", 132272999)
		methodCPUParticles3D[45] = classDB.get_method_bind("CPUParticles3D\000", "set_color_initial_ramp\000", 2756054477)
		methodCPUParticles3D[46] = classDB.get_method_bind("CPUParticles3D\000", "get_color_initial_ramp\000", 132272999)
		methodCPUParticles3D[47] = classDB.get_method_bind("CPUParticles3D\000", "set_particle_flag\000", 3515406498)
		methodCPUParticles3D[48] = classDB.get_method_bind("CPUParticles3D\000", "get_particle_flag\000", 2845201987)
		methodCPUParticles3D[49] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_shape\000", 491823814)
		methodCPUParticles3D[50] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_shape\000", 2961454842)
		methodCPUParticles3D[51] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_sphere_radius\000", 373806689)
		methodCPUParticles3D[52] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_sphere_radius\000", 1740695150)
		methodCPUParticles3D[53] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_box_extents\000", 3460891852)
		methodCPUParticles3D[54] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_box_extents\000", 3360562783)
		methodCPUParticles3D[55] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_points\000", 334873810)
		methodCPUParticles3D[56] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_points\000", 497664490)
		methodCPUParticles3D[57] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_normals\000", 334873810)
		methodCPUParticles3D[58] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_normals\000", 497664490)
		methodCPUParticles3D[59] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_colors\000", 3546319833)
		methodCPUParticles3D[60] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_colors\000", 1392750486)
		methodCPUParticles3D[61] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_ring_axis\000", 3460891852)
		methodCPUParticles3D[62] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_ring_axis\000", 3360562783)
		methodCPUParticles3D[63] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_ring_height\000", 373806689)
		methodCPUParticles3D[64] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_ring_height\000", 1740695150)
		methodCPUParticles3D[65] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_ring_radius\000", 373806689)
		methodCPUParticles3D[66] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_ring_radius\000", 1740695150)
		methodCPUParticles3D[67] = classDB.get_method_bind("CPUParticles3D\000", "set_emission_ring_inner_radius\000", 373806689)
		methodCPUParticles3D[68] = classDB.get_method_bind("CPUParticles3D\000", "get_emission_ring_inner_radius\000", 1740695150)
		methodCPUParticles3D[69] = classDB.get_method_bind("CPUParticles3D\000", "get_gravity\000", 3360562783)
		methodCPUParticles3D[70] = classDB.get_method_bind("CPUParticles3D\000", "set_gravity\000", 3460891852)
		methodCPUParticles3D[71] = classDB.get_method_bind("CPUParticles3D\000", "get_split_scale\000", 2240911060)
		methodCPUParticles3D[72] = classDB.get_method_bind("CPUParticles3D\000", "set_split_scale\000", 2586408642)
		methodCPUParticles3D[73] = classDB.get_method_bind("CPUParticles3D\000", "get_scale_curve_x\000", 2460114913)
		methodCPUParticles3D[74] = classDB.get_method_bind("CPUParticles3D\000", "set_scale_curve_x\000", 270443179)
		methodCPUParticles3D[75] = classDB.get_method_bind("CPUParticles3D\000", "get_scale_curve_y\000", 2460114913)
		methodCPUParticles3D[76] = classDB.get_method_bind("CPUParticles3D\000", "set_scale_curve_y\000", 270443179)
		methodCPUParticles3D[77] = classDB.get_method_bind("CPUParticles3D\000", "get_scale_curve_z\000", 2460114913)
		methodCPUParticles3D[78] = classDB.get_method_bind("CPUParticles3D\000", "set_scale_curve_z\000", 270443179)
		methodCPUParticles3D[79] = classDB.get_method_bind("CPUParticles3D\000", "convert_from_particles\000", 1078189570)
		methodCSGBox3D[0] = classDB.get_method_bind("CSGBox3D\000", "set_size\000", 3460891852)
		methodCSGBox3D[1] = classDB.get_method_bind("CSGBox3D\000", "get_size\000", 3360562783)
		methodCSGBox3D[2] = classDB.get_method_bind("CSGBox3D\000", "set_material\000", 2757459619)
		methodCSGBox3D[3] = classDB.get_method_bind("CSGBox3D\000", "get_material\000", 5934680)
		methodCSGCylinder3D[0] = classDB.get_method_bind("CSGCylinder3D\000", "set_radius\000", 373806689)
		methodCSGCylinder3D[1] = classDB.get_method_bind("CSGCylinder3D\000", "get_radius\000", 1740695150)
		methodCSGCylinder3D[2] = classDB.get_method_bind("CSGCylinder3D\000", "set_height\000", 373806689)
		methodCSGCylinder3D[3] = classDB.get_method_bind("CSGCylinder3D\000", "get_height\000", 1740695150)
		methodCSGCylinder3D[4] = classDB.get_method_bind("CSGCylinder3D\000", "set_sides\000", 1286410249)
		methodCSGCylinder3D[5] = classDB.get_method_bind("CSGCylinder3D\000", "get_sides\000", 3905245786)
		methodCSGCylinder3D[6] = classDB.get_method_bind("CSGCylinder3D\000", "set_cone\000", 2586408642)
		methodCSGCylinder3D[7] = classDB.get_method_bind("CSGCylinder3D\000", "is_cone\000", 36873697)
		methodCSGCylinder3D[8] = classDB.get_method_bind("CSGCylinder3D\000", "set_material\000", 2757459619)
		methodCSGCylinder3D[9] = classDB.get_method_bind("CSGCylinder3D\000", "get_material\000", 5934680)
		methodCSGCylinder3D[10] = classDB.get_method_bind("CSGCylinder3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGCylinder3D[11] = classDB.get_method_bind("CSGCylinder3D\000", "get_smooth_faces\000", 36873697)
		methodCSGMesh3D[0] = classDB.get_method_bind("CSGMesh3D\000", "set_mesh\000", 194775623)
		methodCSGMesh3D[1] = classDB.get_method_bind("CSGMesh3D\000", "get_mesh\000", 4081188045)
		methodCSGMesh3D[2] = classDB.get_method_bind("CSGMesh3D\000", "set_material\000", 2757459619)
		methodCSGMesh3D[3] = classDB.get_method_bind("CSGMesh3D\000", "get_material\000", 5934680)
		methodCSGPolygon3D[0] = classDB.get_method_bind("CSGPolygon3D\000", "set_polygon\000", 1509147220)
		methodCSGPolygon3D[1] = classDB.get_method_bind("CSGPolygon3D\000", "get_polygon\000", 2961356807)
		methodCSGPolygon3D[2] = classDB.get_method_bind("CSGPolygon3D\000", "set_mode\000", 3158377035)
		methodCSGPolygon3D[3] = classDB.get_method_bind("CSGPolygon3D\000", "get_mode\000", 1201612222)
		methodCSGPolygon3D[4] = classDB.get_method_bind("CSGPolygon3D\000", "set_depth\000", 373806689)
		methodCSGPolygon3D[5] = classDB.get_method_bind("CSGPolygon3D\000", "get_depth\000", 1740695150)
		methodCSGPolygon3D[6] = classDB.get_method_bind("CSGPolygon3D\000", "set_spin_degrees\000", 373806689)
		methodCSGPolygon3D[7] = classDB.get_method_bind("CSGPolygon3D\000", "get_spin_degrees\000", 1740695150)
		methodCSGPolygon3D[8] = classDB.get_method_bind("CSGPolygon3D\000", "set_spin_sides\000", 1286410249)
		methodCSGPolygon3D[9] = classDB.get_method_bind("CSGPolygon3D\000", "get_spin_sides\000", 3905245786)
		methodCSGPolygon3D[10] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_node\000", 1348162250)
		methodCSGPolygon3D[11] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_node\000", 4075236667)
		methodCSGPolygon3D[12] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_interval_type\000", 3744240707)
		methodCSGPolygon3D[13] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_interval_type\000", 3434618397)
		methodCSGPolygon3D[14] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_interval\000", 373806689)
		methodCSGPolygon3D[15] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_interval\000", 1740695150)
		methodCSGPolygon3D[16] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_simplify_angle\000", 373806689)
		methodCSGPolygon3D[17] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_simplify_angle\000", 1740695150)
		methodCSGPolygon3D[18] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_rotation\000", 1412947288)
		methodCSGPolygon3D[19] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_rotation\000", 647219346)
		methodCSGPolygon3D[20] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_local\000", 2586408642)
		methodCSGPolygon3D[21] = classDB.get_method_bind("CSGPolygon3D\000", "is_path_local\000", 36873697)
		methodCSGPolygon3D[22] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_continuous_u\000", 2586408642)
		methodCSGPolygon3D[23] = classDB.get_method_bind("CSGPolygon3D\000", "is_path_continuous_u\000", 36873697)
		methodCSGPolygon3D[24] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_u_distance\000", 373806689)
		methodCSGPolygon3D[25] = classDB.get_method_bind("CSGPolygon3D\000", "get_path_u_distance\000", 1740695150)
		methodCSGPolygon3D[26] = classDB.get_method_bind("CSGPolygon3D\000", "set_path_joined\000", 2586408642)
		methodCSGPolygon3D[27] = classDB.get_method_bind("CSGPolygon3D\000", "is_path_joined\000", 36873697)
		methodCSGPolygon3D[28] = classDB.get_method_bind("CSGPolygon3D\000", "set_material\000", 2757459619)
		methodCSGPolygon3D[29] = classDB.get_method_bind("CSGPolygon3D\000", "get_material\000", 5934680)
		methodCSGPolygon3D[30] = classDB.get_method_bind("CSGPolygon3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGPolygon3D[31] = classDB.get_method_bind("CSGPolygon3D\000", "get_smooth_faces\000", 36873697)
		methodCSGPrimitive3D[0] = classDB.get_method_bind("CSGPrimitive3D\000", "set_flip_faces\000", 2586408642)
		methodCSGPrimitive3D[1] = classDB.get_method_bind("CSGPrimitive3D\000", "get_flip_faces\000", 2240911060)
		methodCSGShape3D[0] = classDB.get_method_bind("CSGShape3D\000", "is_root_shape\000", 36873697)
		methodCSGShape3D[1] = classDB.get_method_bind("CSGShape3D\000", "set_operation\000", 811425055)
		methodCSGShape3D[2] = classDB.get_method_bind("CSGShape3D\000", "get_operation\000", 2662425879)
		methodCSGShape3D[3] = classDB.get_method_bind("CSGShape3D\000", "set_snap\000", 373806689)
		methodCSGShape3D[4] = classDB.get_method_bind("CSGShape3D\000", "get_snap\000", 1740695150)
		methodCSGShape3D[5] = classDB.get_method_bind("CSGShape3D\000", "set_use_collision\000", 2586408642)
		methodCSGShape3D[6] = classDB.get_method_bind("CSGShape3D\000", "is_using_collision\000", 36873697)
		methodCSGShape3D[7] = classDB.get_method_bind("CSGShape3D\000", "set_collision_layer\000", 1286410249)
		methodCSGShape3D[8] = classDB.get_method_bind("CSGShape3D\000", "get_collision_layer\000", 3905245786)
		methodCSGShape3D[9] = classDB.get_method_bind("CSGShape3D\000", "set_collision_mask\000", 1286410249)
		methodCSGShape3D[10] = classDB.get_method_bind("CSGShape3D\000", "get_collision_mask\000", 3905245786)
		methodCSGShape3D[11] = classDB.get_method_bind("CSGShape3D\000", "set_collision_mask_value\000", 300928843)
		methodCSGShape3D[12] = classDB.get_method_bind("CSGShape3D\000", "get_collision_mask_value\000", 1116898809)
		methodCSGShape3D[13] = classDB.get_method_bind("CSGShape3D\000", "set_collision_layer_value\000", 300928843)
		methodCSGShape3D[14] = classDB.get_method_bind("CSGShape3D\000", "get_collision_layer_value\000", 1116898809)
		methodCSGShape3D[15] = classDB.get_method_bind("CSGShape3D\000", "set_collision_priority\000", 373806689)
		methodCSGShape3D[16] = classDB.get_method_bind("CSGShape3D\000", "get_collision_priority\000", 1740695150)
		methodCSGShape3D[17] = classDB.get_method_bind("CSGShape3D\000", "set_calculate_tangents\000", 2586408642)
		methodCSGShape3D[18] = classDB.get_method_bind("CSGShape3D\000", "is_calculating_tangents\000", 36873697)
		methodCSGShape3D[19] = classDB.get_method_bind("CSGShape3D\000", "get_meshes\000", 3995934104)
		methodCSGSphere3D[0] = classDB.get_method_bind("CSGSphere3D\000", "set_radius\000", 373806689)
		methodCSGSphere3D[1] = classDB.get_method_bind("CSGSphere3D\000", "get_radius\000", 1740695150)
		methodCSGSphere3D[2] = classDB.get_method_bind("CSGSphere3D\000", "set_radial_segments\000", 1286410249)
		methodCSGSphere3D[3] = classDB.get_method_bind("CSGSphere3D\000", "get_radial_segments\000", 3905245786)
		methodCSGSphere3D[4] = classDB.get_method_bind("CSGSphere3D\000", "set_rings\000", 1286410249)
		methodCSGSphere3D[5] = classDB.get_method_bind("CSGSphere3D\000", "get_rings\000", 3905245786)
		methodCSGSphere3D[6] = classDB.get_method_bind("CSGSphere3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGSphere3D[7] = classDB.get_method_bind("CSGSphere3D\000", "get_smooth_faces\000", 36873697)
		methodCSGSphere3D[8] = classDB.get_method_bind("CSGSphere3D\000", "set_material\000", 2757459619)
		methodCSGSphere3D[9] = classDB.get_method_bind("CSGSphere3D\000", "get_material\000", 5934680)
		methodCSGTorus3D[0] = classDB.get_method_bind("CSGTorus3D\000", "set_inner_radius\000", 373806689)
		methodCSGTorus3D[1] = classDB.get_method_bind("CSGTorus3D\000", "get_inner_radius\000", 1740695150)
		methodCSGTorus3D[2] = classDB.get_method_bind("CSGTorus3D\000", "set_outer_radius\000", 373806689)
		methodCSGTorus3D[3] = classDB.get_method_bind("CSGTorus3D\000", "get_outer_radius\000", 1740695150)
		methodCSGTorus3D[4] = classDB.get_method_bind("CSGTorus3D\000", "set_sides\000", 1286410249)
		methodCSGTorus3D[5] = classDB.get_method_bind("CSGTorus3D\000", "get_sides\000", 3905245786)
		methodCSGTorus3D[6] = classDB.get_method_bind("CSGTorus3D\000", "set_ring_sides\000", 1286410249)
		methodCSGTorus3D[7] = classDB.get_method_bind("CSGTorus3D\000", "get_ring_sides\000", 3905245786)
		methodCSGTorus3D[8] = classDB.get_method_bind("CSGTorus3D\000", "set_material\000", 2757459619)
		methodCSGTorus3D[9] = classDB.get_method_bind("CSGTorus3D\000", "get_material\000", 5934680)
		methodCSGTorus3D[10] = classDB.get_method_bind("CSGTorus3D\000", "set_smooth_faces\000", 2586408642)
		methodCSGTorus3D[11] = classDB.get_method_bind("CSGTorus3D\000", "get_smooth_faces\000", 36873697)
		methodCallbackTweener[0] = classDB.get_method_bind("CallbackTweener\000", "set_delay\000", 3008182292)
		methodCamera2D[0] = classDB.get_method_bind("Camera2D\000", "set_offset\000", 743155724)
		methodCamera2D[1] = classDB.get_method_bind("Camera2D\000", "get_offset\000", 3341600327)
		methodCamera2D[2] = classDB.get_method_bind("Camera2D\000", "set_anchor_mode\000", 2050398218)
		methodCamera2D[3] = classDB.get_method_bind("Camera2D\000", "get_anchor_mode\000", 155978067)
		methodCamera2D[4] = classDB.get_method_bind("Camera2D\000", "set_rotating\000", 2586408642)
		methodCamera2D[5] = classDB.get_method_bind("Camera2D\000", "is_rotating\000", 36873697)
		methodCamera2D[6] = classDB.get_method_bind("Camera2D\000", "set_process_callback\000", 4201947462)
		methodCamera2D[7] = classDB.get_method_bind("Camera2D\000", "get_process_callback\000", 2325344499)
		methodCamera2D[8] = classDB.get_method_bind("Camera2D\000", "set_current\000", 2586408642)
		methodCamera2D[9] = classDB.get_method_bind("Camera2D\000", "is_current\000", 36873697)
		methodCamera2D[10] = classDB.get_method_bind("Camera2D\000", "set_limit\000", 437707142)
		methodCamera2D[11] = classDB.get_method_bind("Camera2D\000", "get_limit\000", 1983885014)
		methodCamera2D[12] = classDB.get_method_bind("Camera2D\000", "set_limit_smoothing_enabled\000", 2586408642)
		methodCamera2D[13] = classDB.get_method_bind("Camera2D\000", "is_limit_smoothing_enabled\000", 36873697)
		methodCamera2D[14] = classDB.get_method_bind("Camera2D\000", "set_drag_vertical_enabled\000", 2586408642)
		methodCamera2D[15] = classDB.get_method_bind("Camera2D\000", "is_drag_vertical_enabled\000", 36873697)
		methodCamera2D[16] = classDB.get_method_bind("Camera2D\000", "set_drag_horizontal_enabled\000", 2586408642)
		methodCamera2D[17] = classDB.get_method_bind("Camera2D\000", "is_drag_horizontal_enabled\000", 36873697)
		methodCamera2D[18] = classDB.get_method_bind("Camera2D\000", "set_drag_vertical_offset\000", 373806689)
		methodCamera2D[19] = classDB.get_method_bind("Camera2D\000", "get_drag_vertical_offset\000", 1740695150)
		methodCamera2D[20] = classDB.get_method_bind("Camera2D\000", "set_drag_horizontal_offset\000", 373806689)
		methodCamera2D[21] = classDB.get_method_bind("Camera2D\000", "get_drag_horizontal_offset\000", 1740695150)
		methodCamera2D[22] = classDB.get_method_bind("Camera2D\000", "set_drag_margin\000", 4290182280)
		methodCamera2D[23] = classDB.get_method_bind("Camera2D\000", "get_drag_margin\000", 2869120046)
		methodCamera2D[24] = classDB.get_method_bind("Camera2D\000", "get_camera_position\000", 3341600327)
		methodCamera2D[25] = classDB.get_method_bind("Camera2D\000", "get_camera_screen_center\000", 3341600327)
		methodCamera2D[26] = classDB.get_method_bind("Camera2D\000", "set_zoom\000", 743155724)
		methodCamera2D[27] = classDB.get_method_bind("Camera2D\000", "get_zoom\000", 3341600327)
		methodCamera2D[28] = classDB.get_method_bind("Camera2D\000", "set_custom_viewport\000", 1078189570)
		methodCamera2D[29] = classDB.get_method_bind("Camera2D\000", "get_custom_viewport\000", 3160264692)
		methodCamera2D[30] = classDB.get_method_bind("Camera2D\000", "set_follow_smoothing\000", 373806689)
		methodCamera2D[31] = classDB.get_method_bind("Camera2D\000", "get_follow_smoothing\000", 1740695150)
		methodCamera2D[32] = classDB.get_method_bind("Camera2D\000", "set_enable_follow_smoothing\000", 2586408642)
		methodCamera2D[33] = classDB.get_method_bind("Camera2D\000", "is_follow_smoothing_enabled\000", 36873697)
		methodCamera2D[34] = classDB.get_method_bind("Camera2D\000", "force_update_scroll\000", 3218959716)
		methodCamera2D[35] = classDB.get_method_bind("Camera2D\000", "reset_smoothing\000", 3218959716)
		methodCamera2D[36] = classDB.get_method_bind("Camera2D\000", "align\000", 3218959716)
		methodCamera2D[37] = classDB.get_method_bind("Camera2D\000", "set_screen_drawing_enabled\000", 2586408642)
		methodCamera2D[38] = classDB.get_method_bind("Camera2D\000", "is_screen_drawing_enabled\000", 36873697)
		methodCamera2D[39] = classDB.get_method_bind("Camera2D\000", "set_limit_drawing_enabled\000", 2586408642)
		methodCamera2D[40] = classDB.get_method_bind("Camera2D\000", "is_limit_drawing_enabled\000", 36873697)
		methodCamera2D[41] = classDB.get_method_bind("Camera2D\000", "set_margin_drawing_enabled\000", 2586408642)
		methodCamera2D[42] = classDB.get_method_bind("Camera2D\000", "is_margin_drawing_enabled\000", 36873697)
		methodCamera3D[0] = classDB.get_method_bind("Camera3D\000", "project_ray_normal\000", 1718073306)
		methodCamera3D[1] = classDB.get_method_bind("Camera3D\000", "project_local_ray_normal\000", 1718073306)
		methodCamera3D[2] = classDB.get_method_bind("Camera3D\000", "project_ray_origin\000", 1718073306)
		methodCamera3D[3] = classDB.get_method_bind("Camera3D\000", "unproject_position\000", 3758901831)
		methodCamera3D[4] = classDB.get_method_bind("Camera3D\000", "is_position_behind\000", 3108956480)
		methodCamera3D[5] = classDB.get_method_bind("Camera3D\000", "project_position\000", 2171975744)
		methodCamera3D[6] = classDB.get_method_bind("Camera3D\000", "set_perspective\000", 2385087082)
		methodCamera3D[7] = classDB.get_method_bind("Camera3D\000", "set_orthogonal\000", 2385087082)
		methodCamera3D[8] = classDB.get_method_bind("Camera3D\000", "set_frustum\000", 354890663)
		methodCamera3D[9] = classDB.get_method_bind("Camera3D\000", "make_current\000", 3218959716)
		methodCamera3D[10] = classDB.get_method_bind("Camera3D\000", "clear_current\000", 3216645846)
		methodCamera3D[11] = classDB.get_method_bind("Camera3D\000", "set_current\000", 2586408642)
		methodCamera3D[12] = classDB.get_method_bind("Camera3D\000", "is_current\000", 36873697)
		methodCamera3D[13] = classDB.get_method_bind("Camera3D\000", "get_camera_transform\000", 3229777777)
		methodCamera3D[14] = classDB.get_method_bind("Camera3D\000", "get_fov\000", 1740695150)
		methodCamera3D[15] = classDB.get_method_bind("Camera3D\000", "get_frustum_offset\000", 3341600327)
		methodCamera3D[16] = classDB.get_method_bind("Camera3D\000", "get_size\000", 1740695150)
		methodCamera3D[17] = classDB.get_method_bind("Camera3D\000", "get_far\000", 1740695150)
		methodCamera3D[18] = classDB.get_method_bind("Camera3D\000", "get_near\000", 1740695150)
		methodCamera3D[19] = classDB.get_method_bind("Camera3D\000", "set_fov\000", 373806689)
		methodCamera3D[20] = classDB.get_method_bind("Camera3D\000", "set_frustum_offset\000", 743155724)
		methodCamera3D[21] = classDB.get_method_bind("Camera3D\000", "set_size\000", 373806689)
		methodCamera3D[22] = classDB.get_method_bind("Camera3D\000", "set_far\000", 373806689)
		methodCamera3D[23] = classDB.get_method_bind("Camera3D\000", "set_near\000", 373806689)
		methodCamera3D[24] = classDB.get_method_bind("Camera3D\000", "get_projection\000", 2624185235)
		methodCamera3D[25] = classDB.get_method_bind("Camera3D\000", "set_projection\000", 4218540108)
		methodCamera3D[26] = classDB.get_method_bind("Camera3D\000", "set_h_offset\000", 373806689)
		methodCamera3D[27] = classDB.get_method_bind("Camera3D\000", "get_h_offset\000", 1740695150)
		methodCamera3D[28] = classDB.get_method_bind("Camera3D\000", "set_v_offset\000", 373806689)
		methodCamera3D[29] = classDB.get_method_bind("Camera3D\000", "get_v_offset\000", 1740695150)
		methodCamera3D[30] = classDB.get_method_bind("Camera3D\000", "set_cull_mask\000", 1286410249)
		methodCamera3D[31] = classDB.get_method_bind("Camera3D\000", "get_cull_mask\000", 3905245786)
		methodCamera3D[32] = classDB.get_method_bind("Camera3D\000", "set_environment\000", 4143518816)
		methodCamera3D[33] = classDB.get_method_bind("Camera3D\000", "get_environment\000", 3082064660)
		methodCamera3D[34] = classDB.get_method_bind("Camera3D\000", "set_effects\000", 1711096158)
		methodCamera3D[35] = classDB.get_method_bind("Camera3D\000", "get_effects\000", 2213573967)
		methodCamera3D[36] = classDB.get_method_bind("Camera3D\000", "set_keep_aspect_mode\000", 1740651252)
		methodCamera3D[37] = classDB.get_method_bind("Camera3D\000", "get_keep_aspect_mode\000", 2790278316)
		methodCamera3D[38] = classDB.get_method_bind("Camera3D\000", "set_doppler_tracking\000", 3109431270)
		methodCamera3D[39] = classDB.get_method_bind("Camera3D\000", "get_doppler_tracking\000", 1584483649)
		methodCamera3D[40] = classDB.get_method_bind("Camera3D\000", "get_frustum\000", 3995934104)
		methodCamera3D[41] = classDB.get_method_bind("Camera3D\000", "is_position_in_frustum\000", 3108956480)
		methodCamera3D[42] = classDB.get_method_bind("Camera3D\000", "get_camera_rid\000", 2944877500)
		methodCamera3D[43] = classDB.get_method_bind("Camera3D\000", "get_pyramid_shape_rid\000", 529393457)
		methodCamera3D[44] = classDB.get_method_bind("Camera3D\000", "set_cull_mask_value\000", 300928843)
		methodCamera3D[45] = classDB.get_method_bind("Camera3D\000", "get_cull_mask_value\000", 1116898809)
		methodCameraEffects[0] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_far_enabled\000", 2586408642)
		methodCameraEffects[1] = classDB.get_method_bind("CameraEffects\000", "is_dof_blur_far_enabled\000", 36873697)
		methodCameraEffects[2] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_far_distance\000", 373806689)
		methodCameraEffects[3] = classDB.get_method_bind("CameraEffects\000", "get_dof_blur_far_distance\000", 1740695150)
		methodCameraEffects[4] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_far_transition\000", 373806689)
		methodCameraEffects[5] = classDB.get_method_bind("CameraEffects\000", "get_dof_blur_far_transition\000", 1740695150)
		methodCameraEffects[6] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_near_enabled\000", 2586408642)
		methodCameraEffects[7] = classDB.get_method_bind("CameraEffects\000", "is_dof_blur_near_enabled\000", 36873697)
		methodCameraEffects[8] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_near_distance\000", 373806689)
		methodCameraEffects[9] = classDB.get_method_bind("CameraEffects\000", "get_dof_blur_near_distance\000", 1740695150)
		methodCameraEffects[10] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_near_transition\000", 373806689)
		methodCameraEffects[11] = classDB.get_method_bind("CameraEffects\000", "get_dof_blur_near_transition\000", 1740695150)
		methodCameraEffects[12] = classDB.get_method_bind("CameraEffects\000", "set_dof_blur_amount\000", 373806689)
		methodCameraEffects[13] = classDB.get_method_bind("CameraEffects\000", "get_dof_blur_amount\000", 1740695150)
		methodCameraEffects[14] = classDB.get_method_bind("CameraEffects\000", "set_override_exposure_enabled\000", 2586408642)
		methodCameraEffects[15] = classDB.get_method_bind("CameraEffects\000", "is_override_exposure_enabled\000", 36873697)
		methodCameraEffects[16] = classDB.get_method_bind("CameraEffects\000", "set_override_exposure\000", 373806689)
		methodCameraEffects[17] = classDB.get_method_bind("CameraEffects\000", "get_override_exposure\000", 1740695150)
		methodCameraFeed[0] = classDB.get_method_bind("CameraFeed\000", "get_id\000", 3905245786)
		methodCameraFeed[1] = classDB.get_method_bind("CameraFeed\000", "is_active\000", 36873697)
		methodCameraFeed[2] = classDB.get_method_bind("CameraFeed\000", "set_active\000", 2586408642)
		methodCameraFeed[3] = classDB.get_method_bind("CameraFeed\000", "get_name\000", 201670096)
		methodCameraFeed[4] = classDB.get_method_bind("CameraFeed\000", "get_position\000", 2711679033)
		methodCameraFeed[5] = classDB.get_method_bind("CameraFeed\000", "get_transform\000", 3814499831)
		methodCameraFeed[6] = classDB.get_method_bind("CameraFeed\000", "set_transform\000", 2761652528)
		methodCameraFeed[7] = classDB.get_method_bind("CameraFeed\000", "get_datatype\000", 1477782850)
		methodCameraServerSingleton[0] = classDB.get_method_bind("CameraServer\000", "get_feed\000", 361927068)
		methodCameraServerSingleton[1] = classDB.get_method_bind("CameraServer\000", "get_feed_count\000", 2455072627)
		methodCameraServerSingleton[2] = classDB.get_method_bind("CameraServer\000", "feeds\000", 2915620761)
		methodCameraServerSingleton[3] = classDB.get_method_bind("CameraServer\000", "add_feed\000", 3204782488)
		methodCameraServerSingleton[4] = classDB.get_method_bind("CameraServer\000", "remove_feed\000", 3204782488)
		methodCameraTexture[0] = classDB.get_method_bind("CameraTexture\000", "set_camera_feed_id\000", 1286410249)
		methodCameraTexture[1] = classDB.get_method_bind("CameraTexture\000", "get_camera_feed_id\000", 3905245786)
		methodCameraTexture[2] = classDB.get_method_bind("CameraTexture\000", "set_which_feed\000", 1595299230)
		methodCameraTexture[3] = classDB.get_method_bind("CameraTexture\000", "get_which_feed\000", 91039457)
		methodCameraTexture[4] = classDB.get_method_bind("CameraTexture\000", "set_camera_active\000", 2586408642)
		methodCameraTexture[5] = classDB.get_method_bind("CameraTexture\000", "get_camera_active\000", 36873697)
		methodCanvasGroup[0] = classDB.get_method_bind("CanvasGroup\000", "set_fit_margin\000", 373806689)
		methodCanvasGroup[1] = classDB.get_method_bind("CanvasGroup\000", "get_fit_margin\000", 1740695150)
		methodCanvasGroup[2] = classDB.get_method_bind("CanvasGroup\000", "set_clear_margin\000", 373806689)
		methodCanvasGroup[3] = classDB.get_method_bind("CanvasGroup\000", "get_clear_margin\000", 1740695150)
		methodCanvasGroup[4] = classDB.get_method_bind("CanvasGroup\000", "set_use_mipmaps\000", 2586408642)
		methodCanvasGroup[5] = classDB.get_method_bind("CanvasGroup\000", "is_using_mipmaps\000", 36873697)
		methodCanvasItem[0] = classDB.get_method_bind("CanvasItem\000", "get_canvas_item\000", 2944877500)
		methodCanvasItem[1] = classDB.get_method_bind("CanvasItem\000", "set_visible\000", 2586408642)
		methodCanvasItem[2] = classDB.get_method_bind("CanvasItem\000", "is_visible\000", 36873697)
		methodCanvasItem[3] = classDB.get_method_bind("CanvasItem\000", "is_visible_in_tree\000", 36873697)
		methodCanvasItem[4] = classDB.get_method_bind("CanvasItem\000", "show\000", 3218959716)
		methodCanvasItem[5] = classDB.get_method_bind("CanvasItem\000", "hide\000", 3218959716)
		methodCanvasItem[6] = classDB.get_method_bind("CanvasItem\000", "update\000", 3218959716)
		methodCanvasItem[7] = classDB.get_method_bind("CanvasItem\000", "set_as_top_level\000", 2586408642)
		methodCanvasItem[8] = classDB.get_method_bind("CanvasItem\000", "is_set_as_top_level\000", 36873697)
		methodCanvasItem[9] = classDB.get_method_bind("CanvasItem\000", "set_light_mask\000", 1286410249)
		methodCanvasItem[10] = classDB.get_method_bind("CanvasItem\000", "get_light_mask\000", 3905245786)
		methodCanvasItem[11] = classDB.get_method_bind("CanvasItem\000", "set_modulate\000", 2920490490)
		methodCanvasItem[12] = classDB.get_method_bind("CanvasItem\000", "get_modulate\000", 3444240500)
		methodCanvasItem[13] = classDB.get_method_bind("CanvasItem\000", "set_self_modulate\000", 2920490490)
		methodCanvasItem[14] = classDB.get_method_bind("CanvasItem\000", "get_self_modulate\000", 3444240500)
		methodCanvasItem[15] = classDB.get_method_bind("CanvasItem\000", "set_draw_behind_parent\000", 2586408642)
		methodCanvasItem[16] = classDB.get_method_bind("CanvasItem\000", "is_draw_behind_parent_enabled\000", 36873697)
		methodCanvasItem[17] = classDB.get_method_bind("CanvasItem\000", "draw_line\000", 2516941890)
		methodCanvasItem[18] = classDB.get_method_bind("CanvasItem\000", "draw_dashed_line\000", 3655830234)
		methodCanvasItem[19] = classDB.get_method_bind("CanvasItem\000", "draw_polyline\000", 4175878946)
		methodCanvasItem[20] = classDB.get_method_bind("CanvasItem\000", "draw_polyline_colors\000", 2239164197)
		methodCanvasItem[21] = classDB.get_method_bind("CanvasItem\000", "draw_arc\000", 3486841771)
		methodCanvasItem[22] = classDB.get_method_bind("CanvasItem\000", "draw_multiline\000", 4230657331)
		methodCanvasItem[23] = classDB.get_method_bind("CanvasItem\000", "draw_multiline_colors\000", 235933050)
		methodCanvasItem[24] = classDB.get_method_bind("CanvasItem\000", "draw_rect\000", 84391229)
		methodCanvasItem[25] = classDB.get_method_bind("CanvasItem\000", "draw_circle\000", 3063020269)
		methodCanvasItem[26] = classDB.get_method_bind("CanvasItem\000", "draw_texture\000", 1695860435)
		methodCanvasItem[27] = classDB.get_method_bind("CanvasItem\000", "draw_texture_rect\000", 3204081724)
		methodCanvasItem[28] = classDB.get_method_bind("CanvasItem\000", "draw_texture_rect_region\000", 3196597532)
		methodCanvasItem[29] = classDB.get_method_bind("CanvasItem\000", "draw_msdf_texture_rect_region\000", 1246729963)
		methodCanvasItem[30] = classDB.get_method_bind("CanvasItem\000", "draw_lcd_texture_rect_region\000", 169610548)
		methodCanvasItem[31] = classDB.get_method_bind("CanvasItem\000", "draw_style_box\000", 388176283)
		methodCanvasItem[32] = classDB.get_method_bind("CanvasItem\000", "draw_primitive\000", 3548136561)
		methodCanvasItem[33] = classDB.get_method_bind("CanvasItem\000", "draw_polygon\000", 2683625537)
		methodCanvasItem[34] = classDB.get_method_bind("CanvasItem\000", "draw_colored_polygon\000", 1659099617)
		methodCanvasItem[35] = classDB.get_method_bind("CanvasItem\000", "draw_string\000", 2552080639)
		methodCanvasItem[36] = classDB.get_method_bind("CanvasItem\000", "draw_multiline_string\000", 4002645436)
		methodCanvasItem[37] = classDB.get_method_bind("CanvasItem\000", "draw_string_outline\000", 850005221)
		methodCanvasItem[38] = classDB.get_method_bind("CanvasItem\000", "draw_multiline_string_outline\000", 3717870722)
		methodCanvasItem[39] = classDB.get_method_bind("CanvasItem\000", "draw_char\000", 2329089032)
		methodCanvasItem[40] = classDB.get_method_bind("CanvasItem\000", "draw_char_outline\000", 419453826)
		methodCanvasItem[41] = classDB.get_method_bind("CanvasItem\000", "draw_mesh\000", 1634855856)
		methodCanvasItem[42] = classDB.get_method_bind("CanvasItem\000", "draw_multimesh\000", 937992368)
		methodCanvasItem[43] = classDB.get_method_bind("CanvasItem\000", "draw_set_transform\000", 4181505845)
		methodCanvasItem[44] = classDB.get_method_bind("CanvasItem\000", "draw_set_transform_matrix\000", 2761652528)
		methodCanvasItem[45] = classDB.get_method_bind("CanvasItem\000", "draw_animation_slice\000", 2295343543)
		methodCanvasItem[46] = classDB.get_method_bind("CanvasItem\000", "draw_end_animation\000", 3218959716)
		methodCanvasItem[47] = classDB.get_method_bind("CanvasItem\000", "get_transform\000", 3814499831)
		methodCanvasItem[48] = classDB.get_method_bind("CanvasItem\000", "get_global_transform\000", 3814499831)
		methodCanvasItem[49] = classDB.get_method_bind("CanvasItem\000", "get_global_transform_with_canvas\000", 3814499831)
		methodCanvasItem[50] = classDB.get_method_bind("CanvasItem\000", "get_viewport_transform\000", 3814499831)
		methodCanvasItem[51] = classDB.get_method_bind("CanvasItem\000", "get_viewport_rect\000", 1639390495)
		methodCanvasItem[52] = classDB.get_method_bind("CanvasItem\000", "get_canvas_transform\000", 3814499831)
		methodCanvasItem[53] = classDB.get_method_bind("CanvasItem\000", "get_screen_transform\000", 3814499831)
		methodCanvasItem[54] = classDB.get_method_bind("CanvasItem\000", "get_local_mouse_position\000", 3341600327)
		methodCanvasItem[55] = classDB.get_method_bind("CanvasItem\000", "get_global_mouse_position\000", 3341600327)
		methodCanvasItem[56] = classDB.get_method_bind("CanvasItem\000", "get_canvas\000", 2944877500)
		methodCanvasItem[57] = classDB.get_method_bind("CanvasItem\000", "get_world_2d\000", 2339128592)
		methodCanvasItem[58] = classDB.get_method_bind("CanvasItem\000", "set_material\000", 2757459619)
		methodCanvasItem[59] = classDB.get_method_bind("CanvasItem\000", "get_material\000", 5934680)
		methodCanvasItem[60] = classDB.get_method_bind("CanvasItem\000", "set_use_parent_material\000", 2586408642)
		methodCanvasItem[61] = classDB.get_method_bind("CanvasItem\000", "get_use_parent_material\000", 36873697)
		methodCanvasItem[62] = classDB.get_method_bind("CanvasItem\000", "set_notify_local_transform\000", 2586408642)
		methodCanvasItem[63] = classDB.get_method_bind("CanvasItem\000", "is_local_transform_notification_enabled\000", 36873697)
		methodCanvasItem[64] = classDB.get_method_bind("CanvasItem\000", "set_notify_transform\000", 2586408642)
		methodCanvasItem[65] = classDB.get_method_bind("CanvasItem\000", "is_transform_notification_enabled\000", 36873697)
		methodCanvasItem[66] = classDB.get_method_bind("CanvasItem\000", "force_update_transform\000", 3218959716)
		methodCanvasItem[67] = classDB.get_method_bind("CanvasItem\000", "make_canvas_position_local\000", 2656412154)
		methodCanvasItem[68] = classDB.get_method_bind("CanvasItem\000", "make_input_local\000", 811130057)
		methodCanvasItem[69] = classDB.get_method_bind("CanvasItem\000", "set_texture_filter\000", 1037999706)
		methodCanvasItem[70] = classDB.get_method_bind("CanvasItem\000", "get_texture_filter\000", 121960042)
		methodCanvasItem[71] = classDB.get_method_bind("CanvasItem\000", "set_texture_repeat\000", 1716472974)
		methodCanvasItem[72] = classDB.get_method_bind("CanvasItem\000", "get_texture_repeat\000", 2667158319)
		methodCanvasItem[73] = classDB.get_method_bind("CanvasItem\000", "set_clip_children\000", 2586408642)
		methodCanvasItem[74] = classDB.get_method_bind("CanvasItem\000", "is_clipping_children\000", 36873697)
		methodCanvasItemMaterial[0] = classDB.get_method_bind("CanvasItemMaterial\000", "set_blend_mode\000", 1786054936)
		methodCanvasItemMaterial[1] = classDB.get_method_bind("CanvasItemMaterial\000", "get_blend_mode\000", 3318684035)
		methodCanvasItemMaterial[2] = classDB.get_method_bind("CanvasItemMaterial\000", "set_light_mode\000", 628074070)
		methodCanvasItemMaterial[3] = classDB.get_method_bind("CanvasItemMaterial\000", "get_light_mode\000", 3863292382)
		methodCanvasItemMaterial[4] = classDB.get_method_bind("CanvasItemMaterial\000", "set_particles_animation\000", 2586408642)
		methodCanvasItemMaterial[5] = classDB.get_method_bind("CanvasItemMaterial\000", "get_particles_animation\000", 36873697)
		methodCanvasItemMaterial[6] = classDB.get_method_bind("CanvasItemMaterial\000", "set_particles_anim_h_frames\000", 1286410249)
		methodCanvasItemMaterial[7] = classDB.get_method_bind("CanvasItemMaterial\000", "get_particles_anim_h_frames\000", 3905245786)
		methodCanvasItemMaterial[8] = classDB.get_method_bind("CanvasItemMaterial\000", "set_particles_anim_v_frames\000", 1286410249)
		methodCanvasItemMaterial[9] = classDB.get_method_bind("CanvasItemMaterial\000", "get_particles_anim_v_frames\000", 3905245786)
		methodCanvasItemMaterial[10] = classDB.get_method_bind("CanvasItemMaterial\000", "set_particles_anim_loop\000", 2586408642)
		methodCanvasItemMaterial[11] = classDB.get_method_bind("CanvasItemMaterial\000", "get_particles_anim_loop\000", 36873697)
		methodCanvasLayer[0] = classDB.get_method_bind("CanvasLayer\000", "set_layer\000", 1286410249)
		methodCanvasLayer[1] = classDB.get_method_bind("CanvasLayer\000", "get_layer\000", 3905245786)
		methodCanvasLayer[2] = classDB.get_method_bind("CanvasLayer\000", "set_visible\000", 2586408642)
		methodCanvasLayer[3] = classDB.get_method_bind("CanvasLayer\000", "is_visible\000", 36873697)
		methodCanvasLayer[4] = classDB.get_method_bind("CanvasLayer\000", "show\000", 3218959716)
		methodCanvasLayer[5] = classDB.get_method_bind("CanvasLayer\000", "hide\000", 3218959716)
		methodCanvasLayer[6] = classDB.get_method_bind("CanvasLayer\000", "set_transform\000", 2761652528)
		methodCanvasLayer[7] = classDB.get_method_bind("CanvasLayer\000", "get_transform\000", 3814499831)
		methodCanvasLayer[8] = classDB.get_method_bind("CanvasLayer\000", "set_offset\000", 743155724)
		methodCanvasLayer[9] = classDB.get_method_bind("CanvasLayer\000", "get_offset\000", 3341600327)
		methodCanvasLayer[10] = classDB.get_method_bind("CanvasLayer\000", "set_rotation\000", 373806689)
		methodCanvasLayer[11] = classDB.get_method_bind("CanvasLayer\000", "get_rotation\000", 1740695150)
		methodCanvasLayer[12] = classDB.get_method_bind("CanvasLayer\000", "set_scale\000", 743155724)
		methodCanvasLayer[13] = classDB.get_method_bind("CanvasLayer\000", "get_scale\000", 3341600327)
		methodCanvasLayer[14] = classDB.get_method_bind("CanvasLayer\000", "set_follow_viewport\000", 2586408642)
		methodCanvasLayer[15] = classDB.get_method_bind("CanvasLayer\000", "is_following_viewport\000", 36873697)
		methodCanvasLayer[16] = classDB.get_method_bind("CanvasLayer\000", "set_follow_viewport_scale\000", 373806689)
		methodCanvasLayer[17] = classDB.get_method_bind("CanvasLayer\000", "get_follow_viewport_scale\000", 1740695150)
		methodCanvasLayer[18] = classDB.get_method_bind("CanvasLayer\000", "set_custom_viewport\000", 1078189570)
		methodCanvasLayer[19] = classDB.get_method_bind("CanvasLayer\000", "get_custom_viewport\000", 3160264692)
		methodCanvasLayer[20] = classDB.get_method_bind("CanvasLayer\000", "get_canvas\000", 2944877500)
		methodCanvasModulate[0] = classDB.get_method_bind("CanvasModulate\000", "set_color\000", 2920490490)
		methodCanvasModulate[1] = classDB.get_method_bind("CanvasModulate\000", "get_color\000", 3444240500)
		methodCanvasTexture[0] = classDB.get_method_bind("CanvasTexture\000", "set_diffuse_texture\000", 4051416890)
		methodCanvasTexture[1] = classDB.get_method_bind("CanvasTexture\000", "get_diffuse_texture\000", 3635182373)
		methodCanvasTexture[2] = classDB.get_method_bind("CanvasTexture\000", "set_normal_texture\000", 4051416890)
		methodCanvasTexture[3] = classDB.get_method_bind("CanvasTexture\000", "get_normal_texture\000", 3635182373)
		methodCanvasTexture[4] = classDB.get_method_bind("CanvasTexture\000", "set_specular_texture\000", 4051416890)
		methodCanvasTexture[5] = classDB.get_method_bind("CanvasTexture\000", "get_specular_texture\000", 3635182373)
		methodCanvasTexture[6] = classDB.get_method_bind("CanvasTexture\000", "set_specular_color\000", 2920490490)
		methodCanvasTexture[7] = classDB.get_method_bind("CanvasTexture\000", "get_specular_color\000", 3444240500)
		methodCanvasTexture[8] = classDB.get_method_bind("CanvasTexture\000", "set_specular_shininess\000", 373806689)
		methodCanvasTexture[9] = classDB.get_method_bind("CanvasTexture\000", "get_specular_shininess\000", 1740695150)
		methodCanvasTexture[10] = classDB.get_method_bind("CanvasTexture\000", "set_texture_filter\000", 1037999706)
		methodCanvasTexture[11] = classDB.get_method_bind("CanvasTexture\000", "get_texture_filter\000", 121960042)
		methodCanvasTexture[12] = classDB.get_method_bind("CanvasTexture\000", "set_texture_repeat\000", 1716472974)
		methodCanvasTexture[13] = classDB.get_method_bind("CanvasTexture\000", "get_texture_repeat\000", 2667158319)
		methodCapsuleMesh[0] = classDB.get_method_bind("CapsuleMesh\000", "set_radius\000", 373806689)
		methodCapsuleMesh[1] = classDB.get_method_bind("CapsuleMesh\000", "get_radius\000", 1740695150)
		methodCapsuleMesh[2] = classDB.get_method_bind("CapsuleMesh\000", "set_height\000", 373806689)
		methodCapsuleMesh[3] = classDB.get_method_bind("CapsuleMesh\000", "get_height\000", 1740695150)
		methodCapsuleMesh[4] = classDB.get_method_bind("CapsuleMesh\000", "set_radial_segments\000", 1286410249)
		methodCapsuleMesh[5] = classDB.get_method_bind("CapsuleMesh\000", "get_radial_segments\000", 3905245786)
		methodCapsuleMesh[6] = classDB.get_method_bind("CapsuleMesh\000", "set_rings\000", 1286410249)
		methodCapsuleMesh[7] = classDB.get_method_bind("CapsuleMesh\000", "get_rings\000", 3905245786)
		methodCapsuleShape2D[0] = classDB.get_method_bind("CapsuleShape2D\000", "set_radius\000", 373806689)
		methodCapsuleShape2D[1] = classDB.get_method_bind("CapsuleShape2D\000", "get_radius\000", 1740695150)
		methodCapsuleShape2D[2] = classDB.get_method_bind("CapsuleShape2D\000", "set_height\000", 373806689)
		methodCapsuleShape2D[3] = classDB.get_method_bind("CapsuleShape2D\000", "get_height\000", 1740695150)
		methodCapsuleShape3D[0] = classDB.get_method_bind("CapsuleShape3D\000", "set_radius\000", 373806689)
		methodCapsuleShape3D[1] = classDB.get_method_bind("CapsuleShape3D\000", "get_radius\000", 1740695150)
		methodCapsuleShape3D[2] = classDB.get_method_bind("CapsuleShape3D\000", "set_height\000", 373806689)
		methodCapsuleShape3D[3] = classDB.get_method_bind("CapsuleShape3D\000", "get_height\000", 1740695150)
		methodCenterContainer[0] = classDB.get_method_bind("CenterContainer\000", "set_use_top_left\000", 2586408642)
		methodCenterContainer[1] = classDB.get_method_bind("CenterContainer\000", "is_using_top_left\000", 36873697)
		methodCharFXTransform[0] = classDB.get_method_bind("CharFXTransform\000", "get_range\000", 2741790807)
		methodCharFXTransform[1] = classDB.get_method_bind("CharFXTransform\000", "set_range\000", 1130785943)
		methodCharFXTransform[2] = classDB.get_method_bind("CharFXTransform\000", "get_elapsed_time\000", 191475506)
		methodCharFXTransform[3] = classDB.get_method_bind("CharFXTransform\000", "set_elapsed_time\000", 373806689)
		methodCharFXTransform[4] = classDB.get_method_bind("CharFXTransform\000", "is_visible\000", 2240911060)
		methodCharFXTransform[5] = classDB.get_method_bind("CharFXTransform\000", "set_visibility\000", 2586408642)
		methodCharFXTransform[6] = classDB.get_method_bind("CharFXTransform\000", "is_outline\000", 2240911060)
		methodCharFXTransform[7] = classDB.get_method_bind("CharFXTransform\000", "set_outline\000", 2586408642)
		methodCharFXTransform[8] = classDB.get_method_bind("CharFXTransform\000", "get_offset\000", 1497962370)
		methodCharFXTransform[9] = classDB.get_method_bind("CharFXTransform\000", "set_offset\000", 743155724)
		methodCharFXTransform[10] = classDB.get_method_bind("CharFXTransform\000", "get_color\000", 3200896285)
		methodCharFXTransform[11] = classDB.get_method_bind("CharFXTransform\000", "set_color\000", 2920490490)
		methodCharFXTransform[12] = classDB.get_method_bind("CharFXTransform\000", "get_environment\000", 2382534195)
		methodCharFXTransform[13] = classDB.get_method_bind("CharFXTransform\000", "set_environment\000", 4155329257)
		methodCharFXTransform[14] = classDB.get_method_bind("CharFXTransform\000", "get_glyph_index\000", 3905245786)
		methodCharFXTransform[15] = classDB.get_method_bind("CharFXTransform\000", "set_glyph_index\000", 1286410249)
		methodCharFXTransform[16] = classDB.get_method_bind("CharFXTransform\000", "get_glyph_count\000", 3905245786)
		methodCharFXTransform[17] = classDB.get_method_bind("CharFXTransform\000", "set_glyph_count\000", 1286410249)
		methodCharFXTransform[18] = classDB.get_method_bind("CharFXTransform\000", "get_glyph_flags\000", 3905245786)
		methodCharFXTransform[19] = classDB.get_method_bind("CharFXTransform\000", "set_glyph_flags\000", 1286410249)
		methodCharFXTransform[20] = classDB.get_method_bind("CharFXTransform\000", "get_font\000", 2944877500)
		methodCharFXTransform[21] = classDB.get_method_bind("CharFXTransform\000", "set_font\000", 2722037293)
		methodCharacterBody2D[0] = classDB.get_method_bind("CharacterBody2D\000", "move_and_slide\000", 2240911060)
		methodCharacterBody2D[1] = classDB.get_method_bind("CharacterBody2D\000", "set_velocity\000", 743155724)
		methodCharacterBody2D[2] = classDB.get_method_bind("CharacterBody2D\000", "get_velocity\000", 3341600327)
		methodCharacterBody2D[3] = classDB.get_method_bind("CharacterBody2D\000", "set_safe_margin\000", 373806689)
		methodCharacterBody2D[4] = classDB.get_method_bind("CharacterBody2D\000", "get_safe_margin\000", 1740695150)
		methodCharacterBody2D[5] = classDB.get_method_bind("CharacterBody2D\000", "is_floor_stop_on_slope_enabled\000", 36873697)
		methodCharacterBody2D[6] = classDB.get_method_bind("CharacterBody2D\000", "set_floor_stop_on_slope_enabled\000", 2586408642)
		methodCharacterBody2D[7] = classDB.get_method_bind("CharacterBody2D\000", "set_floor_constant_speed_enabled\000", 2586408642)
		methodCharacterBody2D[8] = classDB.get_method_bind("CharacterBody2D\000", "is_floor_constant_speed_enabled\000", 36873697)
		methodCharacterBody2D[9] = classDB.get_method_bind("CharacterBody2D\000", "set_floor_block_on_wall_enabled\000", 2586408642)
		methodCharacterBody2D[10] = classDB.get_method_bind("CharacterBody2D\000", "is_floor_block_on_wall_enabled\000", 36873697)
		methodCharacterBody2D[11] = classDB.get_method_bind("CharacterBody2D\000", "set_slide_on_ceiling_enabled\000", 2586408642)
		methodCharacterBody2D[12] = classDB.get_method_bind("CharacterBody2D\000", "is_slide_on_ceiling_enabled\000", 36873697)
		methodCharacterBody2D[13] = classDB.get_method_bind("CharacterBody2D\000", "set_platform_floor_layers\000", 1286410249)
		methodCharacterBody2D[14] = classDB.get_method_bind("CharacterBody2D\000", "get_platform_floor_layers\000", 3905245786)
		methodCharacterBody2D[15] = classDB.get_method_bind("CharacterBody2D\000", "set_platform_wall_layers\000", 1286410249)
		methodCharacterBody2D[16] = classDB.get_method_bind("CharacterBody2D\000", "get_platform_wall_layers\000", 3905245786)
		methodCharacterBody2D[17] = classDB.get_method_bind("CharacterBody2D\000", "get_max_slides\000", 3905245786)
		methodCharacterBody2D[18] = classDB.get_method_bind("CharacterBody2D\000", "set_max_slides\000", 1286410249)
		methodCharacterBody2D[19] = classDB.get_method_bind("CharacterBody2D\000", "get_floor_max_angle\000", 1740695150)
		methodCharacterBody2D[20] = classDB.get_method_bind("CharacterBody2D\000", "set_floor_max_angle\000", 373806689)
		methodCharacterBody2D[21] = classDB.get_method_bind("CharacterBody2D\000", "get_floor_snap_length\000", 191475506)
		methodCharacterBody2D[22] = classDB.get_method_bind("CharacterBody2D\000", "set_floor_snap_length\000", 373806689)
		methodCharacterBody2D[23] = classDB.get_method_bind("CharacterBody2D\000", "get_wall_min_slide_angle\000", 1740695150)
		methodCharacterBody2D[24] = classDB.get_method_bind("CharacterBody2D\000", "set_wall_min_slide_angle\000", 373806689)
		methodCharacterBody2D[25] = classDB.get_method_bind("CharacterBody2D\000", "get_up_direction\000", 3341600327)
		methodCharacterBody2D[26] = classDB.get_method_bind("CharacterBody2D\000", "set_up_direction\000", 743155724)
		methodCharacterBody2D[27] = classDB.get_method_bind("CharacterBody2D\000", "set_motion_mode\000", 1224392233)
		methodCharacterBody2D[28] = classDB.get_method_bind("CharacterBody2D\000", "get_motion_mode\000", 1160151236)
		methodCharacterBody2D[29] = classDB.get_method_bind("CharacterBody2D\000", "set_platform_on_leave\000", 2423324375)
		methodCharacterBody2D[30] = classDB.get_method_bind("CharacterBody2D\000", "get_platform_on_leave\000", 4054324341)
		methodCharacterBody2D[31] = classDB.get_method_bind("CharacterBody2D\000", "is_on_floor\000", 36873697)
		methodCharacterBody2D[32] = classDB.get_method_bind("CharacterBody2D\000", "is_on_floor_only\000", 36873697)
		methodCharacterBody2D[33] = classDB.get_method_bind("CharacterBody2D\000", "is_on_ceiling\000", 36873697)
		methodCharacterBody2D[34] = classDB.get_method_bind("CharacterBody2D\000", "is_on_ceiling_only\000", 36873697)
		methodCharacterBody2D[35] = classDB.get_method_bind("CharacterBody2D\000", "is_on_wall\000", 36873697)
		methodCharacterBody2D[36] = classDB.get_method_bind("CharacterBody2D\000", "is_on_wall_only\000", 36873697)
		methodCharacterBody2D[37] = classDB.get_method_bind("CharacterBody2D\000", "get_floor_normal\000", 3341600327)
		methodCharacterBody2D[38] = classDB.get_method_bind("CharacterBody2D\000", "get_wall_normal\000", 3341600327)
		methodCharacterBody2D[39] = classDB.get_method_bind("CharacterBody2D\000", "get_last_motion\000", 3341600327)
		methodCharacterBody2D[40] = classDB.get_method_bind("CharacterBody2D\000", "get_position_delta\000", 3341600327)
		methodCharacterBody2D[41] = classDB.get_method_bind("CharacterBody2D\000", "get_real_velocity\000", 3341600327)
		methodCharacterBody2D[42] = classDB.get_method_bind("CharacterBody2D\000", "get_floor_angle\000", 2841063350)
		methodCharacterBody2D[43] = classDB.get_method_bind("CharacterBody2D\000", "get_platform_velocity\000", 3341600327)
		methodCharacterBody2D[44] = classDB.get_method_bind("CharacterBody2D\000", "get_slide_collision_count\000", 3905245786)
		methodCharacterBody2D[45] = classDB.get_method_bind("CharacterBody2D\000", "get_slide_collision\000", 860659811)
		methodCharacterBody2D[46] = classDB.get_method_bind("CharacterBody2D\000", "get_last_slide_collision\000", 2161834755)
		methodCharacterBody3D[0] = classDB.get_method_bind("CharacterBody3D\000", "move_and_slide\000", 2240911060)
		methodCharacterBody3D[1] = classDB.get_method_bind("CharacterBody3D\000", "set_velocity\000", 3460891852)
		methodCharacterBody3D[2] = classDB.get_method_bind("CharacterBody3D\000", "get_velocity\000", 3360562783)
		methodCharacterBody3D[3] = classDB.get_method_bind("CharacterBody3D\000", "set_safe_margin\000", 373806689)
		methodCharacterBody3D[4] = classDB.get_method_bind("CharacterBody3D\000", "get_safe_margin\000", 1740695150)
		methodCharacterBody3D[5] = classDB.get_method_bind("CharacterBody3D\000", "is_floor_stop_on_slope_enabled\000", 36873697)
		methodCharacterBody3D[6] = classDB.get_method_bind("CharacterBody3D\000", "set_floor_stop_on_slope_enabled\000", 2586408642)
		methodCharacterBody3D[7] = classDB.get_method_bind("CharacterBody3D\000", "set_floor_constant_speed_enabled\000", 2586408642)
		methodCharacterBody3D[8] = classDB.get_method_bind("CharacterBody3D\000", "is_floor_constant_speed_enabled\000", 36873697)
		methodCharacterBody3D[9] = classDB.get_method_bind("CharacterBody3D\000", "set_floor_block_on_wall_enabled\000", 2586408642)
		methodCharacterBody3D[10] = classDB.get_method_bind("CharacterBody3D\000", "is_floor_block_on_wall_enabled\000", 36873697)
		methodCharacterBody3D[11] = classDB.get_method_bind("CharacterBody3D\000", "set_slide_on_ceiling_enabled\000", 2586408642)
		methodCharacterBody3D[12] = classDB.get_method_bind("CharacterBody3D\000", "is_slide_on_ceiling_enabled\000", 36873697)
		methodCharacterBody3D[13] = classDB.get_method_bind("CharacterBody3D\000", "set_platform_floor_layers\000", 1286410249)
		methodCharacterBody3D[14] = classDB.get_method_bind("CharacterBody3D\000", "get_platform_floor_layers\000", 3905245786)
		methodCharacterBody3D[15] = classDB.get_method_bind("CharacterBody3D\000", "set_platform_wall_layers\000", 1286410249)
		methodCharacterBody3D[16] = classDB.get_method_bind("CharacterBody3D\000", "get_platform_wall_layers\000", 3905245786)
		methodCharacterBody3D[17] = classDB.get_method_bind("CharacterBody3D\000", "get_max_slides\000", 3905245786)
		methodCharacterBody3D[18] = classDB.get_method_bind("CharacterBody3D\000", "set_max_slides\000", 1286410249)
		methodCharacterBody3D[19] = classDB.get_method_bind("CharacterBody3D\000", "get_floor_max_angle\000", 1740695150)
		methodCharacterBody3D[20] = classDB.get_method_bind("CharacterBody3D\000", "set_floor_max_angle\000", 373806689)
		methodCharacterBody3D[21] = classDB.get_method_bind("CharacterBody3D\000", "get_floor_snap_length\000", 191475506)
		methodCharacterBody3D[22] = classDB.get_method_bind("CharacterBody3D\000", "set_floor_snap_length\000", 373806689)
		methodCharacterBody3D[23] = classDB.get_method_bind("CharacterBody3D\000", "get_wall_min_slide_angle\000", 1740695150)
		methodCharacterBody3D[24] = classDB.get_method_bind("CharacterBody3D\000", "set_wall_min_slide_angle\000", 373806689)
		methodCharacterBody3D[25] = classDB.get_method_bind("CharacterBody3D\000", "get_up_direction\000", 3360562783)
		methodCharacterBody3D[26] = classDB.get_method_bind("CharacterBody3D\000", "set_up_direction\000", 3460891852)
		methodCharacterBody3D[27] = classDB.get_method_bind("CharacterBody3D\000", "set_motion_mode\000", 2690739026)
		methodCharacterBody3D[28] = classDB.get_method_bind("CharacterBody3D\000", "get_motion_mode\000", 3529553604)
		methodCharacterBody3D[29] = classDB.get_method_bind("CharacterBody3D\000", "set_platform_on_leave\000", 1459986142)
		methodCharacterBody3D[30] = classDB.get_method_bind("CharacterBody3D\000", "get_platform_on_leave\000", 996491171)
		methodCharacterBody3D[31] = classDB.get_method_bind("CharacterBody3D\000", "is_on_floor\000", 36873697)
		methodCharacterBody3D[32] = classDB.get_method_bind("CharacterBody3D\000", "is_on_floor_only\000", 36873697)
		methodCharacterBody3D[33] = classDB.get_method_bind("CharacterBody3D\000", "is_on_ceiling\000", 36873697)
		methodCharacterBody3D[34] = classDB.get_method_bind("CharacterBody3D\000", "is_on_ceiling_only\000", 36873697)
		methodCharacterBody3D[35] = classDB.get_method_bind("CharacterBody3D\000", "is_on_wall\000", 36873697)
		methodCharacterBody3D[36] = classDB.get_method_bind("CharacterBody3D\000", "is_on_wall_only\000", 36873697)
		methodCharacterBody3D[37] = classDB.get_method_bind("CharacterBody3D\000", "get_floor_normal\000", 3360562783)
		methodCharacterBody3D[38] = classDB.get_method_bind("CharacterBody3D\000", "get_wall_normal\000", 3360562783)
		methodCharacterBody3D[39] = classDB.get_method_bind("CharacterBody3D\000", "get_last_motion\000", 3360562783)
		methodCharacterBody3D[40] = classDB.get_method_bind("CharacterBody3D\000", "get_position_delta\000", 3360562783)
		methodCharacterBody3D[41] = classDB.get_method_bind("CharacterBody3D\000", "get_real_velocity\000", 3360562783)
		methodCharacterBody3D[42] = classDB.get_method_bind("CharacterBody3D\000", "get_floor_angle\000", 2906300789)
		methodCharacterBody3D[43] = classDB.get_method_bind("CharacterBody3D\000", "get_platform_velocity\000", 3360562783)
		methodCharacterBody3D[44] = classDB.get_method_bind("CharacterBody3D\000", "get_slide_collision_count\000", 3905245786)
		methodCharacterBody3D[45] = classDB.get_method_bind("CharacterBody3D\000", "get_slide_collision\000", 107003663)
		methodCharacterBody3D[46] = classDB.get_method_bind("CharacterBody3D\000", "get_last_slide_collision\000", 186875014)
		methodCircleShape2D[0] = classDB.get_method_bind("CircleShape2D\000", "set_radius\000", 373806689)
		methodCircleShape2D[1] = classDB.get_method_bind("CircleShape2D\000", "get_radius\000", 1740695150)
		methodClassDBSingleton[0] = classDB.get_method_bind("ClassDB\000", "get_class_list\000", 1139954409)
		methodClassDBSingleton[1] = classDB.get_method_bind("ClassDB\000", "get_inheriters_from_class\000", 1761182771)
		methodClassDBSingleton[2] = classDB.get_method_bind("ClassDB\000", "get_parent_class\000", 1965194235)
		methodClassDBSingleton[3] = classDB.get_method_bind("ClassDB\000", "class_exists\000", 2619796661)
		methodClassDBSingleton[4] = classDB.get_method_bind("ClassDB\000", "is_parent_class\000", 471820014)
		methodClassDBSingleton[5] = classDB.get_method_bind("ClassDB\000", "can_instantiate\000", 2619796661)
		methodClassDBSingleton[6] = classDB.get_method_bind("ClassDB\000", "instantiate\000", 2760726917)
		methodClassDBSingleton[7] = classDB.get_method_bind("ClassDB\000", "class_has_signal\000", 471820014)
		methodClassDBSingleton[8] = classDB.get_method_bind("ClassDB\000", "class_get_signal\000", 3061114238)
		methodClassDBSingleton[9] = classDB.get_method_bind("ClassDB\000", "class_get_signal_list\000", 3504980660)
		methodClassDBSingleton[10] = classDB.get_method_bind("ClassDB\000", "class_get_property_list\000", 3504980660)
		methodClassDBSingleton[11] = classDB.get_method_bind("ClassDB\000", "class_get_property\000", 2498641674)
		methodClassDBSingleton[12] = classDB.get_method_bind("ClassDB\000", "class_set_property\000", 1690314931)
		methodClassDBSingleton[13] = classDB.get_method_bind("ClassDB\000", "class_has_method\000", 3860701026)
		methodClassDBSingleton[14] = classDB.get_method_bind("ClassDB\000", "class_get_method_list\000", 3504980660)
		methodClassDBSingleton[15] = classDB.get_method_bind("ClassDB\000", "class_get_integer_constant_list\000", 3031669221)
		methodClassDBSingleton[16] = classDB.get_method_bind("ClassDB\000", "class_has_integer_constant\000", 471820014)
		methodClassDBSingleton[17] = classDB.get_method_bind("ClassDB\000", "class_get_integer_constant\000", 2419549490)
		methodClassDBSingleton[18] = classDB.get_method_bind("ClassDB\000", "class_has_enum\000", 3860701026)
		methodClassDBSingleton[19] = classDB.get_method_bind("ClassDB\000", "class_get_enum_list\000", 3031669221)
		methodClassDBSingleton[20] = classDB.get_method_bind("ClassDB\000", "class_get_enum_constants\000", 661528303)
		methodClassDBSingleton[21] = classDB.get_method_bind("ClassDB\000", "class_get_integer_constant_enum\000", 2457504236)
		methodClassDBSingleton[22] = classDB.get_method_bind("ClassDB\000", "is_class_enabled\000", 2619796661)
		methodCodeEdit[0] = classDB.get_method_bind("CodeEdit\000", "set_indent_size\000", 1286410249)
		methodCodeEdit[1] = classDB.get_method_bind("CodeEdit\000", "get_indent_size\000", 3905245786)
		methodCodeEdit[2] = classDB.get_method_bind("CodeEdit\000", "set_indent_using_spaces\000", 2586408642)
		methodCodeEdit[3] = classDB.get_method_bind("CodeEdit\000", "is_indent_using_spaces\000", 36873697)
		methodCodeEdit[4] = classDB.get_method_bind("CodeEdit\000", "set_auto_indent_enabled\000", 2586408642)
		methodCodeEdit[5] = classDB.get_method_bind("CodeEdit\000", "is_auto_indent_enabled\000", 36873697)
		methodCodeEdit[6] = classDB.get_method_bind("CodeEdit\000", "set_auto_indent_prefixes\000", 381264803)
		methodCodeEdit[7] = classDB.get_method_bind("CodeEdit\000", "get_auto_indent_prefixes\000", 3995934104)
		methodCodeEdit[8] = classDB.get_method_bind("CodeEdit\000", "do_indent\000", 3218959716)
		methodCodeEdit[9] = classDB.get_method_bind("CodeEdit\000", "do_unindent\000", 3218959716)
		methodCodeEdit[10] = classDB.get_method_bind("CodeEdit\000", "indent_lines\000", 3218959716)
		methodCodeEdit[11] = classDB.get_method_bind("CodeEdit\000", "unindent_lines\000", 3218959716)
		methodCodeEdit[12] = classDB.get_method_bind("CodeEdit\000", "set_auto_brace_completion_enabled\000", 2586408642)
		methodCodeEdit[13] = classDB.get_method_bind("CodeEdit\000", "is_auto_brace_completion_enabled\000", 36873697)
		methodCodeEdit[14] = classDB.get_method_bind("CodeEdit\000", "set_highlight_matching_braces_enabled\000", 2586408642)
		methodCodeEdit[15] = classDB.get_method_bind("CodeEdit\000", "is_highlight_matching_braces_enabled\000", 36873697)
		methodCodeEdit[16] = classDB.get_method_bind("CodeEdit\000", "add_auto_brace_completion_pair\000", 3186203200)
		methodCodeEdit[17] = classDB.get_method_bind("CodeEdit\000", "set_auto_brace_completion_pairs\000", 4155329257)
		methodCodeEdit[18] = classDB.get_method_bind("CodeEdit\000", "get_auto_brace_completion_pairs\000", 3102165223)
		methodCodeEdit[19] = classDB.get_method_bind("CodeEdit\000", "has_auto_brace_completion_open_key\000", 3927539163)
		methodCodeEdit[20] = classDB.get_method_bind("CodeEdit\000", "has_auto_brace_completion_close_key\000", 3927539163)
		methodCodeEdit[21] = classDB.get_method_bind("CodeEdit\000", "get_auto_brace_completion_close_key\000", 3135753539)
		methodCodeEdit[22] = classDB.get_method_bind("CodeEdit\000", "set_draw_breakpoints_gutter\000", 2586408642)
		methodCodeEdit[23] = classDB.get_method_bind("CodeEdit\000", "is_drawing_breakpoints_gutter\000", 36873697)
		methodCodeEdit[24] = classDB.get_method_bind("CodeEdit\000", "set_draw_bookmarks_gutter\000", 2586408642)
		methodCodeEdit[25] = classDB.get_method_bind("CodeEdit\000", "is_drawing_bookmarks_gutter\000", 36873697)
		methodCodeEdit[26] = classDB.get_method_bind("CodeEdit\000", "set_draw_executing_lines_gutter\000", 2586408642)
		methodCodeEdit[27] = classDB.get_method_bind("CodeEdit\000", "is_drawing_executing_lines_gutter\000", 36873697)
		methodCodeEdit[28] = classDB.get_method_bind("CodeEdit\000", "set_line_as_breakpoint\000", 300928843)
		methodCodeEdit[29] = classDB.get_method_bind("CodeEdit\000", "is_line_breakpointed\000", 1116898809)
		methodCodeEdit[30] = classDB.get_method_bind("CodeEdit\000", "clear_breakpointed_lines\000", 3218959716)
		methodCodeEdit[31] = classDB.get_method_bind("CodeEdit\000", "get_breakpointed_lines\000", 1930428628)
		methodCodeEdit[32] = classDB.get_method_bind("CodeEdit\000", "set_line_as_bookmarked\000", 300928843)
		methodCodeEdit[33] = classDB.get_method_bind("CodeEdit\000", "is_line_bookmarked\000", 1116898809)
		methodCodeEdit[34] = classDB.get_method_bind("CodeEdit\000", "clear_bookmarked_lines\000", 3218959716)
		methodCodeEdit[35] = classDB.get_method_bind("CodeEdit\000", "get_bookmarked_lines\000", 1930428628)
		methodCodeEdit[36] = classDB.get_method_bind("CodeEdit\000", "set_line_as_executing\000", 300928843)
		methodCodeEdit[37] = classDB.get_method_bind("CodeEdit\000", "is_line_executing\000", 1116898809)
		methodCodeEdit[38] = classDB.get_method_bind("CodeEdit\000", "clear_executing_lines\000", 3218959716)
		methodCodeEdit[39] = classDB.get_method_bind("CodeEdit\000", "get_executing_lines\000", 1930428628)
		methodCodeEdit[40] = classDB.get_method_bind("CodeEdit\000", "set_draw_line_numbers\000", 2586408642)
		methodCodeEdit[41] = classDB.get_method_bind("CodeEdit\000", "is_draw_line_numbers_enabled\000", 36873697)
		methodCodeEdit[42] = classDB.get_method_bind("CodeEdit\000", "set_line_numbers_zero_padded\000", 2586408642)
		methodCodeEdit[43] = classDB.get_method_bind("CodeEdit\000", "is_line_numbers_zero_padded\000", 36873697)
		methodCodeEdit[44] = classDB.get_method_bind("CodeEdit\000", "set_draw_fold_gutter\000", 2586408642)
		methodCodeEdit[45] = classDB.get_method_bind("CodeEdit\000", "is_drawing_fold_gutter\000", 36873697)
		methodCodeEdit[46] = classDB.get_method_bind("CodeEdit\000", "set_line_folding_enabled\000", 2586408642)
		methodCodeEdit[47] = classDB.get_method_bind("CodeEdit\000", "is_line_folding_enabled\000", 36873697)
		methodCodeEdit[48] = classDB.get_method_bind("CodeEdit\000", "can_fold_line\000", 1116898809)
		methodCodeEdit[49] = classDB.get_method_bind("CodeEdit\000", "fold_line\000", 1286410249)
		methodCodeEdit[50] = classDB.get_method_bind("CodeEdit\000", "unfold_line\000", 1286410249)
		methodCodeEdit[51] = classDB.get_method_bind("CodeEdit\000", "fold_all_lines\000", 3218959716)
		methodCodeEdit[52] = classDB.get_method_bind("CodeEdit\000", "unfold_all_lines\000", 3218959716)
		methodCodeEdit[53] = classDB.get_method_bind("CodeEdit\000", "toggle_foldable_line\000", 1286410249)
		methodCodeEdit[54] = classDB.get_method_bind("CodeEdit\000", "is_line_folded\000", 1116898809)
		methodCodeEdit[55] = classDB.get_method_bind("CodeEdit\000", "get_folded_lines\000", 3995934104)
		methodCodeEdit[56] = classDB.get_method_bind("CodeEdit\000", "add_string_delimiter\000", 3146098955)
		methodCodeEdit[57] = classDB.get_method_bind("CodeEdit\000", "remove_string_delimiter\000", 83702148)
		methodCodeEdit[58] = classDB.get_method_bind("CodeEdit\000", "has_string_delimiter\000", 3927539163)
		methodCodeEdit[59] = classDB.get_method_bind("CodeEdit\000", "set_string_delimiters\000", 381264803)
		methodCodeEdit[60] = classDB.get_method_bind("CodeEdit\000", "clear_string_delimiters\000", 3218959716)
		methodCodeEdit[61] = classDB.get_method_bind("CodeEdit\000", "get_string_delimiters\000", 3995934104)
		methodCodeEdit[62] = classDB.get_method_bind("CodeEdit\000", "is_in_string\000", 3294126239)
		methodCodeEdit[63] = classDB.get_method_bind("CodeEdit\000", "add_comment_delimiter\000", 3146098955)
		methodCodeEdit[64] = classDB.get_method_bind("CodeEdit\000", "remove_comment_delimiter\000", 83702148)
		methodCodeEdit[65] = classDB.get_method_bind("CodeEdit\000", "has_comment_delimiter\000", 3927539163)
		methodCodeEdit[66] = classDB.get_method_bind("CodeEdit\000", "set_comment_delimiters\000", 381264803)
		methodCodeEdit[67] = classDB.get_method_bind("CodeEdit\000", "clear_comment_delimiters\000", 3218959716)
		methodCodeEdit[68] = classDB.get_method_bind("CodeEdit\000", "get_comment_delimiters\000", 3995934104)
		methodCodeEdit[69] = classDB.get_method_bind("CodeEdit\000", "is_in_comment\000", 3294126239)
		methodCodeEdit[70] = classDB.get_method_bind("CodeEdit\000", "get_delimiter_start_key\000", 844755477)
		methodCodeEdit[71] = classDB.get_method_bind("CodeEdit\000", "get_delimiter_end_key\000", 844755477)
		methodCodeEdit[72] = classDB.get_method_bind("CodeEdit\000", "get_delimiter_start_position\000", 3016396712)
		methodCodeEdit[73] = classDB.get_method_bind("CodeEdit\000", "get_delimiter_end_position\000", 3016396712)
		methodCodeEdit[74] = classDB.get_method_bind("CodeEdit\000", "set_code_hint\000", 83702148)
		methodCodeEdit[75] = classDB.get_method_bind("CodeEdit\000", "set_code_hint_draw_below\000", 2586408642)
		methodCodeEdit[76] = classDB.get_method_bind("CodeEdit\000", "get_text_for_code_completion\000", 201670096)
		methodCodeEdit[77] = classDB.get_method_bind("CodeEdit\000", "request_code_completion\000", 107499316)
		methodCodeEdit[78] = classDB.get_method_bind("CodeEdit\000", "add_code_completion_option\000", 3965792804)
		methodCodeEdit[79] = classDB.get_method_bind("CodeEdit\000", "update_code_completion_options\000", 2586408642)
		methodCodeEdit[80] = classDB.get_method_bind("CodeEdit\000", "get_code_completion_options\000", 3995934104)
		methodCodeEdit[81] = classDB.get_method_bind("CodeEdit\000", "get_code_completion_option\000", 3485342025)
		methodCodeEdit[82] = classDB.get_method_bind("CodeEdit\000", "get_code_completion_selected_index\000", 3905245786)
		methodCodeEdit[83] = classDB.get_method_bind("CodeEdit\000", "set_code_completion_selected_index\000", 1286410249)
		methodCodeEdit[84] = classDB.get_method_bind("CodeEdit\000", "confirm_code_completion\000", 107499316)
		methodCodeEdit[85] = classDB.get_method_bind("CodeEdit\000", "cancel_code_completion\000", 3218959716)
		methodCodeEdit[86] = classDB.get_method_bind("CodeEdit\000", "set_code_completion_enabled\000", 2586408642)
		methodCodeEdit[87] = classDB.get_method_bind("CodeEdit\000", "is_code_completion_enabled\000", 36873697)
		methodCodeEdit[88] = classDB.get_method_bind("CodeEdit\000", "set_code_completion_prefixes\000", 381264803)
		methodCodeEdit[89] = classDB.get_method_bind("CodeEdit\000", "get_code_comletion_prefixes\000", 3995934104)
		methodCodeEdit[90] = classDB.get_method_bind("CodeEdit\000", "set_line_length_guidelines\000", 381264803)
		methodCodeEdit[91] = classDB.get_method_bind("CodeEdit\000", "get_line_length_guidelines\000", 3995934104)
		methodCodeEdit[92] = classDB.get_method_bind("CodeEdit\000", "set_symbol_lookup_on_click_enabled\000", 2586408642)
		methodCodeEdit[93] = classDB.get_method_bind("CodeEdit\000", "is_symbol_lookup_on_click_enabled\000", 36873697)
		methodCodeEdit[94] = classDB.get_method_bind("CodeEdit\000", "get_text_for_symbol_lookup\000", 2841200299)
		methodCodeEdit[95] = classDB.get_method_bind("CodeEdit\000", "set_symbol_lookup_word_as_valid\000", 2586408642)
		methodCodeHighlighter[0] = classDB.get_method_bind("CodeHighlighter\000", "add_keyword_color\000", 1636512886)
		methodCodeHighlighter[1] = classDB.get_method_bind("CodeHighlighter\000", "remove_keyword_color\000", 83702148)
		methodCodeHighlighter[2] = classDB.get_method_bind("CodeHighlighter\000", "has_keyword_color\000", 3927539163)
		methodCodeHighlighter[3] = classDB.get_method_bind("CodeHighlighter\000", "get_keyword_color\000", 3855908743)
		methodCodeHighlighter[4] = classDB.get_method_bind("CodeHighlighter\000", "set_keyword_colors\000", 4155329257)
		methodCodeHighlighter[5] = classDB.get_method_bind("CodeHighlighter\000", "clear_keyword_colors\000", 3218959716)
		methodCodeHighlighter[6] = classDB.get_method_bind("CodeHighlighter\000", "get_keyword_colors\000", 3102165223)
		methodCodeHighlighter[7] = classDB.get_method_bind("CodeHighlighter\000", "add_member_keyword_color\000", 1636512886)
		methodCodeHighlighter[8] = classDB.get_method_bind("CodeHighlighter\000", "remove_member_keyword_color\000", 83702148)
		methodCodeHighlighter[9] = classDB.get_method_bind("CodeHighlighter\000", "has_member_keyword_color\000", 3927539163)
		methodCodeHighlighter[10] = classDB.get_method_bind("CodeHighlighter\000", "get_member_keyword_color\000", 3855908743)
		methodCodeHighlighter[11] = classDB.get_method_bind("CodeHighlighter\000", "set_member_keyword_colors\000", 4155329257)
		methodCodeHighlighter[12] = classDB.get_method_bind("CodeHighlighter\000", "clear_member_keyword_colors\000", 3218959716)
		methodCodeHighlighter[13] = classDB.get_method_bind("CodeHighlighter\000", "get_member_keyword_colors\000", 3102165223)
		methodCodeHighlighter[14] = classDB.get_method_bind("CodeHighlighter\000", "add_color_region\000", 2924977451)
		methodCodeHighlighter[15] = classDB.get_method_bind("CodeHighlighter\000", "remove_color_region\000", 83702148)
		methodCodeHighlighter[16] = classDB.get_method_bind("CodeHighlighter\000", "has_color_region\000", 3927539163)
		methodCodeHighlighter[17] = classDB.get_method_bind("CodeHighlighter\000", "set_color_regions\000", 4155329257)
		methodCodeHighlighter[18] = classDB.get_method_bind("CodeHighlighter\000", "clear_color_regions\000", 3218959716)
		methodCodeHighlighter[19] = classDB.get_method_bind("CodeHighlighter\000", "get_color_regions\000", 3102165223)
		methodCodeHighlighter[20] = classDB.get_method_bind("CodeHighlighter\000", "set_function_color\000", 2920490490)
		methodCodeHighlighter[21] = classDB.get_method_bind("CodeHighlighter\000", "get_function_color\000", 3444240500)
		methodCodeHighlighter[22] = classDB.get_method_bind("CodeHighlighter\000", "set_number_color\000", 2920490490)
		methodCodeHighlighter[23] = classDB.get_method_bind("CodeHighlighter\000", "get_number_color\000", 3444240500)
		methodCodeHighlighter[24] = classDB.get_method_bind("CodeHighlighter\000", "set_symbol_color\000", 2920490490)
		methodCodeHighlighter[25] = classDB.get_method_bind("CodeHighlighter\000", "get_symbol_color\000", 3444240500)
		methodCodeHighlighter[26] = classDB.get_method_bind("CodeHighlighter\000", "set_member_variable_color\000", 2920490490)
		methodCodeHighlighter[27] = classDB.get_method_bind("CodeHighlighter\000", "get_member_variable_color\000", 3444240500)
		methodCollisionObject2D[0] = classDB.get_method_bind("CollisionObject2D\000", "get_rid\000", 2944877500)
		methodCollisionObject2D[1] = classDB.get_method_bind("CollisionObject2D\000", "set_collision_layer\000", 1286410249)
		methodCollisionObject2D[2] = classDB.get_method_bind("CollisionObject2D\000", "get_collision_layer\000", 3905245786)
		methodCollisionObject2D[3] = classDB.get_method_bind("CollisionObject2D\000", "set_collision_mask\000", 1286410249)
		methodCollisionObject2D[4] = classDB.get_method_bind("CollisionObject2D\000", "get_collision_mask\000", 3905245786)
		methodCollisionObject2D[5] = classDB.get_method_bind("CollisionObject2D\000", "set_collision_layer_value\000", 300928843)
		methodCollisionObject2D[6] = classDB.get_method_bind("CollisionObject2D\000", "get_collision_layer_value\000", 1116898809)
		methodCollisionObject2D[7] = classDB.get_method_bind("CollisionObject2D\000", "set_collision_mask_value\000", 300928843)
		methodCollisionObject2D[8] = classDB.get_method_bind("CollisionObject2D\000", "get_collision_mask_value\000", 1116898809)
		methodCollisionObject2D[9] = classDB.get_method_bind("CollisionObject2D\000", "set_collision_priority\000", 373806689)
		methodCollisionObject2D[10] = classDB.get_method_bind("CollisionObject2D\000", "get_collision_priority\000", 1740695150)
		methodCollisionObject2D[11] = classDB.get_method_bind("CollisionObject2D\000", "set_disable_mode\000", 1919204045)
		methodCollisionObject2D[12] = classDB.get_method_bind("CollisionObject2D\000", "get_disable_mode\000", 3172846349)
		methodCollisionObject2D[13] = classDB.get_method_bind("CollisionObject2D\000", "set_pickable\000", 2586408642)
		methodCollisionObject2D[14] = classDB.get_method_bind("CollisionObject2D\000", "is_pickable\000", 36873697)
		methodCollisionObject2D[15] = classDB.get_method_bind("CollisionObject2D\000", "create_shape_owner\000", 3429307534)
		methodCollisionObject2D[16] = classDB.get_method_bind("CollisionObject2D\000", "remove_shape_owner\000", 1286410249)
		methodCollisionObject2D[17] = classDB.get_method_bind("CollisionObject2D\000", "get_shape_owners\000", 969006518)
		methodCollisionObject2D[18] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_set_transform\000", 30160968)
		methodCollisionObject2D[19] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_get_transform\000", 3836996910)
		methodCollisionObject2D[20] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_get_owner\000", 3332903315)
		methodCollisionObject2D[21] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_set_disabled\000", 300928843)
		methodCollisionObject2D[22] = classDB.get_method_bind("CollisionObject2D\000", "is_shape_owner_disabled\000", 1116898809)
		methodCollisionObject2D[23] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_set_one_way_collision\000", 300928843)
		methodCollisionObject2D[24] = classDB.get_method_bind("CollisionObject2D\000", "is_shape_owner_one_way_collision_enabled\000", 1116898809)
		methodCollisionObject2D[25] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_set_one_way_collision_margin\000", 1602489585)
		methodCollisionObject2D[26] = classDB.get_method_bind("CollisionObject2D\000", "get_shape_owner_one_way_collision_margin\000", 2339986948)
		methodCollisionObject2D[27] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_add_shape\000", 2077425081)
		methodCollisionObject2D[28] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_get_shape_count\000", 923996154)
		methodCollisionObject2D[29] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_get_shape\000", 3106725749)
		methodCollisionObject2D[30] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_get_shape_index\000", 3175239445)
		methodCollisionObject2D[31] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_remove_shape\000", 3937882851)
		methodCollisionObject2D[32] = classDB.get_method_bind("CollisionObject2D\000", "shape_owner_clear_shapes\000", 1286410249)
		methodCollisionObject2D[33] = classDB.get_method_bind("CollisionObject2D\000", "shape_find_owner\000", 923996154)
		methodCollisionObject3D[0] = classDB.get_method_bind("CollisionObject3D\000", "set_collision_layer\000", 1286410249)
		methodCollisionObject3D[1] = classDB.get_method_bind("CollisionObject3D\000", "get_collision_layer\000", 3905245786)
		methodCollisionObject3D[2] = classDB.get_method_bind("CollisionObject3D\000", "set_collision_mask\000", 1286410249)
		methodCollisionObject3D[3] = classDB.get_method_bind("CollisionObject3D\000", "get_collision_mask\000", 3905245786)
		methodCollisionObject3D[4] = classDB.get_method_bind("CollisionObject3D\000", "set_collision_layer_value\000", 300928843)
		methodCollisionObject3D[5] = classDB.get_method_bind("CollisionObject3D\000", "get_collision_layer_value\000", 1116898809)
		methodCollisionObject3D[6] = classDB.get_method_bind("CollisionObject3D\000", "set_collision_mask_value\000", 300928843)
		methodCollisionObject3D[7] = classDB.get_method_bind("CollisionObject3D\000", "get_collision_mask_value\000", 1116898809)
		methodCollisionObject3D[8] = classDB.get_method_bind("CollisionObject3D\000", "set_collision_priority\000", 373806689)
		methodCollisionObject3D[9] = classDB.get_method_bind("CollisionObject3D\000", "get_collision_priority\000", 1740695150)
		methodCollisionObject3D[10] = classDB.get_method_bind("CollisionObject3D\000", "set_disable_mode\000", 1623620376)
		methodCollisionObject3D[11] = classDB.get_method_bind("CollisionObject3D\000", "get_disable_mode\000", 410164780)
		methodCollisionObject3D[12] = classDB.get_method_bind("CollisionObject3D\000", "set_ray_pickable\000", 2586408642)
		methodCollisionObject3D[13] = classDB.get_method_bind("CollisionObject3D\000", "is_ray_pickable\000", 36873697)
		methodCollisionObject3D[14] = classDB.get_method_bind("CollisionObject3D\000", "set_capture_input_on_drag\000", 2586408642)
		methodCollisionObject3D[15] = classDB.get_method_bind("CollisionObject3D\000", "get_capture_input_on_drag\000", 36873697)
		methodCollisionObject3D[16] = classDB.get_method_bind("CollisionObject3D\000", "get_rid\000", 2944877500)
		methodCollisionObject3D[17] = classDB.get_method_bind("CollisionObject3D\000", "create_shape_owner\000", 3429307534)
		methodCollisionObject3D[18] = classDB.get_method_bind("CollisionObject3D\000", "remove_shape_owner\000", 1286410249)
		methodCollisionObject3D[19] = classDB.get_method_bind("CollisionObject3D\000", "get_shape_owners\000", 969006518)
		methodCollisionObject3D[20] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_set_transform\000", 3616898986)
		methodCollisionObject3D[21] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_get_transform\000", 1965739696)
		methodCollisionObject3D[22] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_get_owner\000", 3332903315)
		methodCollisionObject3D[23] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_set_disabled\000", 300928843)
		methodCollisionObject3D[24] = classDB.get_method_bind("CollisionObject3D\000", "is_shape_owner_disabled\000", 1116898809)
		methodCollisionObject3D[25] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_add_shape\000", 2566676345)
		methodCollisionObject3D[26] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_get_shape_count\000", 923996154)
		methodCollisionObject3D[27] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_get_shape\000", 4015519174)
		methodCollisionObject3D[28] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_get_shape_index\000", 3175239445)
		methodCollisionObject3D[29] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_remove_shape\000", 3937882851)
		methodCollisionObject3D[30] = classDB.get_method_bind("CollisionObject3D\000", "shape_owner_clear_shapes\000", 1286410249)
		methodCollisionObject3D[31] = classDB.get_method_bind("CollisionObject3D\000", "shape_find_owner\000", 923996154)
		methodCollisionPolygon2D[0] = classDB.get_method_bind("CollisionPolygon2D\000", "set_polygon\000", 1509147220)
		methodCollisionPolygon2D[1] = classDB.get_method_bind("CollisionPolygon2D\000", "get_polygon\000", 2961356807)
		methodCollisionPolygon2D[2] = classDB.get_method_bind("CollisionPolygon2D\000", "set_build_mode\000", 2780803135)
		methodCollisionPolygon2D[3] = classDB.get_method_bind("CollisionPolygon2D\000", "get_build_mode\000", 3044948800)
		methodCollisionPolygon2D[4] = classDB.get_method_bind("CollisionPolygon2D\000", "set_disabled\000", 2586408642)
		methodCollisionPolygon2D[5] = classDB.get_method_bind("CollisionPolygon2D\000", "is_disabled\000", 36873697)
		methodCollisionPolygon2D[6] = classDB.get_method_bind("CollisionPolygon2D\000", "set_one_way_collision\000", 2586408642)
		methodCollisionPolygon2D[7] = classDB.get_method_bind("CollisionPolygon2D\000", "is_one_way_collision_enabled\000", 36873697)
		methodCollisionPolygon2D[8] = classDB.get_method_bind("CollisionPolygon2D\000", "set_one_way_collision_margin\000", 373806689)
		methodCollisionPolygon2D[9] = classDB.get_method_bind("CollisionPolygon2D\000", "get_one_way_collision_margin\000", 1740695150)
		methodCollisionPolygon3D[0] = classDB.get_method_bind("CollisionPolygon3D\000", "set_depth\000", 373806689)
		methodCollisionPolygon3D[1] = classDB.get_method_bind("CollisionPolygon3D\000", "get_depth\000", 1740695150)
		methodCollisionPolygon3D[2] = classDB.get_method_bind("CollisionPolygon3D\000", "set_polygon\000", 1509147220)
		methodCollisionPolygon3D[3] = classDB.get_method_bind("CollisionPolygon3D\000", "get_polygon\000", 2961356807)
		methodCollisionPolygon3D[4] = classDB.get_method_bind("CollisionPolygon3D\000", "set_disabled\000", 2586408642)
		methodCollisionPolygon3D[5] = classDB.get_method_bind("CollisionPolygon3D\000", "is_disabled\000", 36873697)
		methodCollisionPolygon3D[6] = classDB.get_method_bind("CollisionPolygon3D\000", "set_margin\000", 373806689)
		methodCollisionPolygon3D[7] = classDB.get_method_bind("CollisionPolygon3D\000", "get_margin\000", 1740695150)
		methodCollisionShape2D[0] = classDB.get_method_bind("CollisionShape2D\000", "set_shape\000", 771364740)
		methodCollisionShape2D[1] = classDB.get_method_bind("CollisionShape2D\000", "get_shape\000", 522005891)
		methodCollisionShape2D[2] = classDB.get_method_bind("CollisionShape2D\000", "set_disabled\000", 2586408642)
		methodCollisionShape2D[3] = classDB.get_method_bind("CollisionShape2D\000", "is_disabled\000", 36873697)
		methodCollisionShape2D[4] = classDB.get_method_bind("CollisionShape2D\000", "set_one_way_collision\000", 2586408642)
		methodCollisionShape2D[5] = classDB.get_method_bind("CollisionShape2D\000", "is_one_way_collision_enabled\000", 36873697)
		methodCollisionShape2D[6] = classDB.get_method_bind("CollisionShape2D\000", "set_one_way_collision_margin\000", 373806689)
		methodCollisionShape2D[7] = classDB.get_method_bind("CollisionShape2D\000", "get_one_way_collision_margin\000", 1740695150)
		methodCollisionShape3D[0] = classDB.get_method_bind("CollisionShape3D\000", "resource_changed\000", 968641751)
		methodCollisionShape3D[1] = classDB.get_method_bind("CollisionShape3D\000", "set_shape\000", 1549710052)
		methodCollisionShape3D[2] = classDB.get_method_bind("CollisionShape3D\000", "get_shape\000", 3214262478)
		methodCollisionShape3D[3] = classDB.get_method_bind("CollisionShape3D\000", "set_disabled\000", 2586408642)
		methodCollisionShape3D[4] = classDB.get_method_bind("CollisionShape3D\000", "is_disabled\000", 36873697)
		methodCollisionShape3D[5] = classDB.get_method_bind("CollisionShape3D\000", "make_convex_from_siblings\000", 3218959716)
		methodColorPicker[0] = classDB.get_method_bind("ColorPicker\000", "set_pick_color\000", 2920490490)
		methodColorPicker[1] = classDB.get_method_bind("ColorPicker\000", "get_pick_color\000", 3444240500)
		methodColorPicker[2] = classDB.get_method_bind("ColorPicker\000", "set_deferred_mode\000", 2586408642)
		methodColorPicker[3] = classDB.get_method_bind("ColorPicker\000", "is_deferred_mode\000", 36873697)
		methodColorPicker[4] = classDB.get_method_bind("ColorPicker\000", "set_color_mode\000", 1579114136)
		methodColorPicker[5] = classDB.get_method_bind("ColorPicker\000", "get_color_mode\000", 392907674)
		methodColorPicker[6] = classDB.get_method_bind("ColorPicker\000", "set_edit_alpha\000", 2586408642)
		methodColorPicker[7] = classDB.get_method_bind("ColorPicker\000", "is_editing_alpha\000", 36873697)
		methodColorPicker[8] = classDB.get_method_bind("ColorPicker\000", "set_presets_enabled\000", 2586408642)
		methodColorPicker[9] = classDB.get_method_bind("ColorPicker\000", "are_presets_enabled\000", 36873697)
		methodColorPicker[10] = classDB.get_method_bind("ColorPicker\000", "set_presets_visible\000", 2586408642)
		methodColorPicker[11] = classDB.get_method_bind("ColorPicker\000", "are_presets_visible\000", 36873697)
		methodColorPicker[12] = classDB.get_method_bind("ColorPicker\000", "add_preset\000", 2920490490)
		methodColorPicker[13] = classDB.get_method_bind("ColorPicker\000", "erase_preset\000", 2920490490)
		methodColorPicker[14] = classDB.get_method_bind("ColorPicker\000", "get_presets\000", 1392750486)
		methodColorPicker[15] = classDB.get_method_bind("ColorPicker\000", "set_picker_shape\000", 3981373861)
		methodColorPicker[16] = classDB.get_method_bind("ColorPicker\000", "get_picker_shape\000", 1143229889)
		methodColorPickerButton[0] = classDB.get_method_bind("ColorPickerButton\000", "set_pick_color\000", 2920490490)
		methodColorPickerButton[1] = classDB.get_method_bind("ColorPickerButton\000", "get_pick_color\000", 3444240500)
		methodColorPickerButton[2] = classDB.get_method_bind("ColorPickerButton\000", "get_picker\000", 331835996)
		methodColorPickerButton[3] = classDB.get_method_bind("ColorPickerButton\000", "get_popup\000", 1322440207)
		methodColorPickerButton[4] = classDB.get_method_bind("ColorPickerButton\000", "set_edit_alpha\000", 2586408642)
		methodColorPickerButton[5] = classDB.get_method_bind("ColorPickerButton\000", "is_editing_alpha\000", 36873697)
		methodColorRect[0] = classDB.get_method_bind("ColorRect\000", "set_color\000", 2920490490)
		methodColorRect[1] = classDB.get_method_bind("ColorRect\000", "get_color\000", 3444240500)
		methodCompressedTexture2D[0] = classDB.get_method_bind("CompressedTexture2D\000", "load\000", 166001499)
		methodCompressedTexture2D[1] = classDB.get_method_bind("CompressedTexture2D\000", "get_load_path\000", 201670096)
		methodCompressedTexture3D[0] = classDB.get_method_bind("CompressedTexture3D\000", "load\000", 166001499)
		methodCompressedTexture3D[1] = classDB.get_method_bind("CompressedTexture3D\000", "get_load_path\000", 201670096)
		methodCompressedTextureLayered[0] = classDB.get_method_bind("CompressedTextureLayered\000", "load\000", 166001499)
		methodCompressedTextureLayered[1] = classDB.get_method_bind("CompressedTextureLayered\000", "get_load_path\000", 201670096)
		methodConcavePolygonShape2D[0] = classDB.get_method_bind("ConcavePolygonShape2D\000", "set_segments\000", 1509147220)
		methodConcavePolygonShape2D[1] = classDB.get_method_bind("ConcavePolygonShape2D\000", "get_segments\000", 2961356807)
		methodConcavePolygonShape3D[0] = classDB.get_method_bind("ConcavePolygonShape3D\000", "set_faces\000", 334873810)
		methodConcavePolygonShape3D[1] = classDB.get_method_bind("ConcavePolygonShape3D\000", "get_faces\000", 497664490)
		methodConcavePolygonShape3D[2] = classDB.get_method_bind("ConcavePolygonShape3D\000", "set_backface_collision_enabled\000", 2586408642)
		methodConcavePolygonShape3D[3] = classDB.get_method_bind("ConcavePolygonShape3D\000", "is_backface_collision_enabled\000", 36873697)
		methodConeTwistJoint3D[0] = classDB.get_method_bind("ConeTwistJoint3D\000", "set_param\000", 1062470226)
		methodConeTwistJoint3D[1] = classDB.get_method_bind("ConeTwistJoint3D\000", "get_param\000", 2928790850)
		methodConfigFile[0] = classDB.get_method_bind("ConfigFile\000", "set_value\000", 2504492430)
		methodConfigFile[1] = classDB.get_method_bind("ConfigFile\000", "get_value\000", 89809366)
		methodConfigFile[2] = classDB.get_method_bind("ConfigFile\000", "has_section\000", 3927539163)
		methodConfigFile[3] = classDB.get_method_bind("ConfigFile\000", "has_section_key\000", 820780508)
		methodConfigFile[4] = classDB.get_method_bind("ConfigFile\000", "get_sections\000", 1139954409)
		methodConfigFile[5] = classDB.get_method_bind("ConfigFile\000", "get_section_keys\000", 4291131558)
		methodConfigFile[6] = classDB.get_method_bind("ConfigFile\000", "erase_section\000", 83702148)
		methodConfigFile[7] = classDB.get_method_bind("ConfigFile\000", "erase_section_key\000", 3186203200)
		methodConfigFile[8] = classDB.get_method_bind("ConfigFile\000", "load\000", 166001499)
		methodConfigFile[9] = classDB.get_method_bind("ConfigFile\000", "parse\000", 166001499)
		methodConfigFile[10] = classDB.get_method_bind("ConfigFile\000", "save\000", 166001499)
		methodConfigFile[11] = classDB.get_method_bind("ConfigFile\000", "load_encrypted\000", 887037711)
		methodConfigFile[12] = classDB.get_method_bind("ConfigFile\000", "load_encrypted_pass\000", 852856452)
		methodConfigFile[13] = classDB.get_method_bind("ConfigFile\000", "save_encrypted\000", 887037711)
		methodConfigFile[14] = classDB.get_method_bind("ConfigFile\000", "save_encrypted_pass\000", 852856452)
		methodConfigFile[15] = classDB.get_method_bind("ConfigFile\000", "clear\000", 3218959716)
		methodConfirmationDialog[0] = classDB.get_method_bind("ConfirmationDialog\000", "get_cancel_button\000", 1856205918)
		methodConfirmationDialog[1] = classDB.get_method_bind("ConfirmationDialog\000", "set_cancel_button_text\000", 83702148)
		methodConfirmationDialog[2] = classDB.get_method_bind("ConfirmationDialog\000", "get_cancel_button_text\000", 201670096)
		methodContainer[0] = classDB.get_method_bind("Container\000", "queue_sort\000", 3218959716)
		methodContainer[1] = classDB.get_method_bind("Container\000", "fit_child_in_rect\000", 1993438598)
		methodControl[0] = classDB.get_method_bind("Control\000", "accept_event\000", 3218959716)
		methodControl[1] = classDB.get_method_bind("Control\000", "get_minimum_size\000", 3341600327)
		methodControl[2] = classDB.get_method_bind("Control\000", "get_combined_minimum_size\000", 3341600327)
		methodControl[3] = classDB.get_method_bind("Control\000", "set_anchors_preset\000", 509135270)
		methodControl[4] = classDB.get_method_bind("Control\000", "set_offsets_preset\000", 3651818904)
		methodControl[5] = classDB.get_method_bind("Control\000", "set_anchors_and_offsets_preset\000", 3651818904)
		methodControl[6] = classDB.get_method_bind("Control\000", "set_anchor\000", 2589937826)
		methodControl[7] = classDB.get_method_bind("Control\000", "get_anchor\000", 2869120046)
		methodControl[8] = classDB.get_method_bind("Control\000", "set_offset\000", 4290182280)
		methodControl[9] = classDB.get_method_bind("Control\000", "get_offset\000", 2869120046)
		methodControl[10] = classDB.get_method_bind("Control\000", "set_anchor_and_offset\000", 4031722181)
		methodControl[11] = classDB.get_method_bind("Control\000", "set_begin\000", 743155724)
		methodControl[12] = classDB.get_method_bind("Control\000", "set_end\000", 743155724)
		methodControl[13] = classDB.get_method_bind("Control\000", "set_position\000", 2436320129)
		methodControl[14] = classDB.get_method_bind("Control\000", "set_size\000", 2436320129)
		methodControl[15] = classDB.get_method_bind("Control\000", "reset_size\000", 3218959716)
		methodControl[16] = classDB.get_method_bind("Control\000", "set_custom_minimum_size\000", 743155724)
		methodControl[17] = classDB.get_method_bind("Control\000", "set_global_position\000", 2436320129)
		methodControl[18] = classDB.get_method_bind("Control\000", "set_rotation\000", 373806689)
		methodControl[19] = classDB.get_method_bind("Control\000", "set_scale\000", 743155724)
		methodControl[20] = classDB.get_method_bind("Control\000", "set_pivot_offset\000", 743155724)
		methodControl[21] = classDB.get_method_bind("Control\000", "get_begin\000", 3341600327)
		methodControl[22] = classDB.get_method_bind("Control\000", "get_end\000", 3341600327)
		methodControl[23] = classDB.get_method_bind("Control\000", "get_position\000", 3341600327)
		methodControl[24] = classDB.get_method_bind("Control\000", "get_size\000", 3341600327)
		methodControl[25] = classDB.get_method_bind("Control\000", "get_rotation\000", 1740695150)
		methodControl[26] = classDB.get_method_bind("Control\000", "get_scale\000", 3341600327)
		methodControl[27] = classDB.get_method_bind("Control\000", "get_pivot_offset\000", 3341600327)
		methodControl[28] = classDB.get_method_bind("Control\000", "get_custom_minimum_size\000", 3341600327)
		methodControl[29] = classDB.get_method_bind("Control\000", "get_parent_area_size\000", 3341600327)
		methodControl[30] = classDB.get_method_bind("Control\000", "get_global_position\000", 3341600327)
		methodControl[31] = classDB.get_method_bind("Control\000", "get_screen_position\000", 3341600327)
		methodControl[32] = classDB.get_method_bind("Control\000", "get_rect\000", 1639390495)
		methodControl[33] = classDB.get_method_bind("Control\000", "get_global_rect\000", 1639390495)
		methodControl[34] = classDB.get_method_bind("Control\000", "set_focus_mode\000", 3232914922)
		methodControl[35] = classDB.get_method_bind("Control\000", "get_focus_mode\000", 2132829277)
		methodControl[36] = classDB.get_method_bind("Control\000", "has_focus\000", 36873697)
		methodControl[37] = classDB.get_method_bind("Control\000", "grab_focus\000", 3218959716)
		methodControl[38] = classDB.get_method_bind("Control\000", "release_focus\000", 3218959716)
		methodControl[39] = classDB.get_method_bind("Control\000", "find_prev_valid_focus\000", 2783021301)
		methodControl[40] = classDB.get_method_bind("Control\000", "find_next_valid_focus\000", 2783021301)
		methodControl[41] = classDB.get_method_bind("Control\000", "set_h_size_flags\000", 1286410249)
		methodControl[42] = classDB.get_method_bind("Control\000", "get_h_size_flags\000", 3905245786)
		methodControl[43] = classDB.get_method_bind("Control\000", "set_stretch_ratio\000", 373806689)
		methodControl[44] = classDB.get_method_bind("Control\000", "get_stretch_ratio\000", 1740695150)
		methodControl[45] = classDB.get_method_bind("Control\000", "set_v_size_flags\000", 1286410249)
		methodControl[46] = classDB.get_method_bind("Control\000", "get_v_size_flags\000", 3905245786)
		methodControl[47] = classDB.get_method_bind("Control\000", "set_theme\000", 2326690814)
		methodControl[48] = classDB.get_method_bind("Control\000", "get_theme\000", 3846893731)
		methodControl[49] = classDB.get_method_bind("Control\000", "set_theme_type_variation\000", 3304788590)
		methodControl[50] = classDB.get_method_bind("Control\000", "get_theme_type_variation\000", 2002593661)
		methodControl[51] = classDB.get_method_bind("Control\000", "begin_bulk_theme_override\000", 3218959716)
		methodControl[52] = classDB.get_method_bind("Control\000", "end_bulk_theme_override\000", 3218959716)
		methodControl[53] = classDB.get_method_bind("Control\000", "add_theme_icon_override\000", 1373065600)
		methodControl[54] = classDB.get_method_bind("Control\000", "add_theme_stylebox_override\000", 4188838905)
		methodControl[55] = classDB.get_method_bind("Control\000", "add_theme_font_override\000", 3518018674)
		methodControl[56] = classDB.get_method_bind("Control\000", "add_theme_font_size_override\000", 2415702435)
		methodControl[57] = classDB.get_method_bind("Control\000", "add_theme_color_override\000", 4260178595)
		methodControl[58] = classDB.get_method_bind("Control\000", "add_theme_constant_override\000", 2415702435)
		methodControl[59] = classDB.get_method_bind("Control\000", "remove_theme_icon_override\000", 3304788590)
		methodControl[60] = classDB.get_method_bind("Control\000", "remove_theme_stylebox_override\000", 3304788590)
		methodControl[61] = classDB.get_method_bind("Control\000", "remove_theme_font_override\000", 3304788590)
		methodControl[62] = classDB.get_method_bind("Control\000", "remove_theme_font_size_override\000", 3304788590)
		methodControl[63] = classDB.get_method_bind("Control\000", "remove_theme_color_override\000", 3304788590)
		methodControl[64] = classDB.get_method_bind("Control\000", "remove_theme_constant_override\000", 3304788590)
		methodControl[65] = classDB.get_method_bind("Control\000", "get_theme_icon\000", 2336455395)
		methodControl[66] = classDB.get_method_bind("Control\000", "get_theme_stylebox\000", 2759935355)
		methodControl[67] = classDB.get_method_bind("Control\000", "get_theme_font\000", 387378635)
		methodControl[68] = classDB.get_method_bind("Control\000", "get_theme_font_size\000", 229578101)
		methodControl[69] = classDB.get_method_bind("Control\000", "get_theme_color\000", 2377051548)
		methodControl[70] = classDB.get_method_bind("Control\000", "get_theme_constant\000", 229578101)
		methodControl[71] = classDB.get_method_bind("Control\000", "has_theme_icon_override\000", 2619796661)
		methodControl[72] = classDB.get_method_bind("Control\000", "has_theme_stylebox_override\000", 2619796661)
		methodControl[73] = classDB.get_method_bind("Control\000", "has_theme_font_override\000", 2619796661)
		methodControl[74] = classDB.get_method_bind("Control\000", "has_theme_font_size_override\000", 2619796661)
		methodControl[75] = classDB.get_method_bind("Control\000", "has_theme_color_override\000", 2619796661)
		methodControl[76] = classDB.get_method_bind("Control\000", "has_theme_constant_override\000", 2619796661)
		methodControl[77] = classDB.get_method_bind("Control\000", "has_theme_icon\000", 1187511791)
		methodControl[78] = classDB.get_method_bind("Control\000", "has_theme_stylebox\000", 1187511791)
		methodControl[79] = classDB.get_method_bind("Control\000", "has_theme_font\000", 1187511791)
		methodControl[80] = classDB.get_method_bind("Control\000", "has_theme_font_size\000", 1187511791)
		methodControl[81] = classDB.get_method_bind("Control\000", "has_theme_color\000", 1187511791)
		methodControl[82] = classDB.get_method_bind("Control\000", "has_theme_constant\000", 1187511791)
		methodControl[83] = classDB.get_method_bind("Control\000", "get_theme_default_base_scale\000", 1740695150)
		methodControl[84] = classDB.get_method_bind("Control\000", "get_theme_default_font\000", 3229501585)
		methodControl[85] = classDB.get_method_bind("Control\000", "get_theme_default_font_size\000", 3905245786)
		methodControl[86] = classDB.get_method_bind("Control\000", "get_parent_control\000", 2783021301)
		methodControl[87] = classDB.get_method_bind("Control\000", "set_h_grow_direction\000", 2022385301)
		methodControl[88] = classDB.get_method_bind("Control\000", "get_h_grow_direction\000", 3635610155)
		methodControl[89] = classDB.get_method_bind("Control\000", "set_v_grow_direction\000", 2022385301)
		methodControl[90] = classDB.get_method_bind("Control\000", "get_v_grow_direction\000", 3635610155)
		methodControl[91] = classDB.get_method_bind("Control\000", "set_tooltip\000", 83702148)
		methodControl[92] = classDB.get_method_bind("Control\000", "get_tooltip\000", 2895288280)
		methodControl[93] = classDB.get_method_bind("Control\000", "set_default_cursor_shape\000", 217062046)
		methodControl[94] = classDB.get_method_bind("Control\000", "get_default_cursor_shape\000", 2359535750)
		methodControl[95] = classDB.get_method_bind("Control\000", "get_cursor_shape\000", 1395773853)
		methodControl[96] = classDB.get_method_bind("Control\000", "set_focus_neighbor\000", 2024461774)
		methodControl[97] = classDB.get_method_bind("Control\000", "get_focus_neighbor\000", 2757935761)
		methodControl[98] = classDB.get_method_bind("Control\000", "set_focus_next\000", 1348162250)
		methodControl[99] = classDB.get_method_bind("Control\000", "get_focus_next\000", 4075236667)
		methodControl[100] = classDB.get_method_bind("Control\000", "set_focus_previous\000", 1348162250)
		methodControl[101] = classDB.get_method_bind("Control\000", "get_focus_previous\000", 4075236667)
		methodControl[102] = classDB.get_method_bind("Control\000", "force_drag\000", 3191844692)
		methodControl[103] = classDB.get_method_bind("Control\000", "set_mouse_filter\000", 3891156122)
		methodControl[104] = classDB.get_method_bind("Control\000", "get_mouse_filter\000", 1572545674)
		methodControl[105] = classDB.get_method_bind("Control\000", "set_force_pass_scroll_events\000", 2586408642)
		methodControl[106] = classDB.get_method_bind("Control\000", "is_force_pass_scroll_events\000", 36873697)
		methodControl[107] = classDB.get_method_bind("Control\000", "set_clip_contents\000", 2586408642)
		methodControl[108] = classDB.get_method_bind("Control\000", "is_clipping_contents\000", 2240911060)
		methodControl[109] = classDB.get_method_bind("Control\000", "grab_click_focus\000", 3218959716)
		methodControl[110] = classDB.get_method_bind("Control\000", "set_drag_forwarding\000", 3975164845)
		methodControl[111] = classDB.get_method_bind("Control\000", "set_drag_preview\000", 1496901182)
		methodControl[112] = classDB.get_method_bind("Control\000", "is_drag_successful\000", 36873697)
		methodControl[113] = classDB.get_method_bind("Control\000", "warp_mouse\000", 743155724)
		methodControl[114] = classDB.get_method_bind("Control\000", "update_minimum_size\000", 3218959716)
		methodControl[115] = classDB.get_method_bind("Control\000", "set_layout_direction\000", 3310692370)
		methodControl[116] = classDB.get_method_bind("Control\000", "get_layout_direction\000", 1546772008)
		methodControl[117] = classDB.get_method_bind("Control\000", "is_layout_rtl\000", 36873697)
		methodControl[118] = classDB.get_method_bind("Control\000", "set_auto_translate\000", 2586408642)
		methodControl[119] = classDB.get_method_bind("Control\000", "is_auto_translating\000", 36873697)
		methodConvexPolygonShape2D[0] = classDB.get_method_bind("ConvexPolygonShape2D\000", "set_point_cloud\000", 1509147220)
		methodConvexPolygonShape2D[1] = classDB.get_method_bind("ConvexPolygonShape2D\000", "set_points\000", 1509147220)
		methodConvexPolygonShape2D[2] = classDB.get_method_bind("ConvexPolygonShape2D\000", "get_points\000", 2961356807)
		methodConvexPolygonShape3D[0] = classDB.get_method_bind("ConvexPolygonShape3D\000", "set_points\000", 334873810)
		methodConvexPolygonShape3D[1] = classDB.get_method_bind("ConvexPolygonShape3D\000", "get_points\000", 497664490)
		methodCrypto[0] = classDB.get_method_bind("Crypto\000", "generate_random_bytes\000", 47165747)
		methodCrypto[1] = classDB.get_method_bind("Crypto\000", "generate_rsa\000", 1237515462)
		methodCrypto[2] = classDB.get_method_bind("Crypto\000", "generate_self_signed_certificate\000", 947314696)
		methodCrypto[3] = classDB.get_method_bind("Crypto\000", "sign\000", 1673662703)
		methodCrypto[4] = classDB.get_method_bind("Crypto\000", "verify\000", 2805902225)
		methodCrypto[5] = classDB.get_method_bind("Crypto\000", "encrypt\000", 2361793670)
		methodCrypto[6] = classDB.get_method_bind("Crypto\000", "decrypt\000", 2361793670)
		methodCrypto[7] = classDB.get_method_bind("Crypto\000", "hmac_digest\000", 2368951203)
		methodCrypto[8] = classDB.get_method_bind("Crypto\000", "constant_time_compare\000", 1024142237)
		methodCryptoKey[0] = classDB.get_method_bind("CryptoKey\000", "save\000", 885841341)
		methodCryptoKey[1] = classDB.get_method_bind("CryptoKey\000", "load\000", 885841341)
		methodCryptoKey[2] = classDB.get_method_bind("CryptoKey\000", "is_public_only\000", 36873697)
		methodCryptoKey[3] = classDB.get_method_bind("CryptoKey\000", "save_to_string\000", 32795936)
		methodCryptoKey[4] = classDB.get_method_bind("CryptoKey\000", "load_from_string\000", 885841341)
		methodCurve[0] = classDB.get_method_bind("Curve\000", "get_point_count\000", 3905245786)
		methodCurve[1] = classDB.get_method_bind("Curve\000", "set_point_count\000", 1286410249)
		methodCurve[2] = classDB.get_method_bind("Curve\000", "add_point\000", 2766148617)
		methodCurve[3] = classDB.get_method_bind("Curve\000", "remove_point\000", 1286410249)
		methodCurve[4] = classDB.get_method_bind("Curve\000", "clear_points\000", 3218959716)
		methodCurve[5] = classDB.get_method_bind("Curve\000", "get_point_position\000", 2299179447)
		methodCurve[6] = classDB.get_method_bind("Curve\000", "set_point_value\000", 1602489585)
		methodCurve[7] = classDB.get_method_bind("Curve\000", "set_point_offset\000", 3780573764)
		methodCurve[8] = classDB.get_method_bind("Curve\000", "interpolate\000", 3919130443)
		methodCurve[9] = classDB.get_method_bind("Curve\000", "interpolate_baked\000", 3919130443)
		methodCurve[10] = classDB.get_method_bind("Curve\000", "get_point_left_tangent\000", 2339986948)
		methodCurve[11] = classDB.get_method_bind("Curve\000", "get_point_right_tangent\000", 2339986948)
		methodCurve[12] = classDB.get_method_bind("Curve\000", "get_point_left_mode\000", 426950354)
		methodCurve[13] = classDB.get_method_bind("Curve\000", "get_point_right_mode\000", 426950354)
		methodCurve[14] = classDB.get_method_bind("Curve\000", "set_point_left_tangent\000", 1602489585)
		methodCurve[15] = classDB.get_method_bind("Curve\000", "set_point_right_tangent\000", 1602489585)
		methodCurve[16] = classDB.get_method_bind("Curve\000", "set_point_left_mode\000", 1217242874)
		methodCurve[17] = classDB.get_method_bind("Curve\000", "set_point_right_mode\000", 1217242874)
		methodCurve[18] = classDB.get_method_bind("Curve\000", "get_min_value\000", 1740695150)
		methodCurve[19] = classDB.get_method_bind("Curve\000", "set_min_value\000", 373806689)
		methodCurve[20] = classDB.get_method_bind("Curve\000", "get_max_value\000", 1740695150)
		methodCurve[21] = classDB.get_method_bind("Curve\000", "set_max_value\000", 373806689)
		methodCurve[22] = classDB.get_method_bind("Curve\000", "clean_dupes\000", 3218959716)
		methodCurve[23] = classDB.get_method_bind("Curve\000", "bake\000", 3218959716)
		methodCurve[24] = classDB.get_method_bind("Curve\000", "get_bake_resolution\000", 3905245786)
		methodCurve[25] = classDB.get_method_bind("Curve\000", "set_bake_resolution\000", 1286410249)
		methodCurve2D[0] = classDB.get_method_bind("Curve2D\000", "get_point_count\000", 3905245786)
		methodCurve2D[1] = classDB.get_method_bind("Curve2D\000", "set_point_count\000", 1286410249)
		methodCurve2D[2] = classDB.get_method_bind("Curve2D\000", "add_point\000", 2437345566)
		methodCurve2D[3] = classDB.get_method_bind("Curve2D\000", "set_point_position\000", 163021252)
		methodCurve2D[4] = classDB.get_method_bind("Curve2D\000", "get_point_position\000", 2299179447)
		methodCurve2D[5] = classDB.get_method_bind("Curve2D\000", "set_point_in\000", 163021252)
		methodCurve2D[6] = classDB.get_method_bind("Curve2D\000", "get_point_in\000", 2299179447)
		methodCurve2D[7] = classDB.get_method_bind("Curve2D\000", "set_point_out\000", 163021252)
		methodCurve2D[8] = classDB.get_method_bind("Curve2D\000", "get_point_out\000", 2299179447)
		methodCurve2D[9] = classDB.get_method_bind("Curve2D\000", "remove_point\000", 1286410249)
		methodCurve2D[10] = classDB.get_method_bind("Curve2D\000", "clear_points\000", 3218959716)
		methodCurve2D[11] = classDB.get_method_bind("Curve2D\000", "interpolate\000", 26514310)
		methodCurve2D[12] = classDB.get_method_bind("Curve2D\000", "interpolatef\000", 3588506812)
		methodCurve2D[13] = classDB.get_method_bind("Curve2D\000", "set_bake_interval\000", 373806689)
		methodCurve2D[14] = classDB.get_method_bind("Curve2D\000", "get_bake_interval\000", 1740695150)
		methodCurve2D[15] = classDB.get_method_bind("Curve2D\000", "get_baked_length\000", 1740695150)
		methodCurve2D[16] = classDB.get_method_bind("Curve2D\000", "interpolate_baked\000", 674850128)
		methodCurve2D[17] = classDB.get_method_bind("Curve2D\000", "get_baked_points\000", 2961356807)
		methodCurve2D[18] = classDB.get_method_bind("Curve2D\000", "get_closest_point\000", 2656412154)
		methodCurve2D[19] = classDB.get_method_bind("Curve2D\000", "get_closest_offset\000", 2276447920)
		methodCurve2D[20] = classDB.get_method_bind("Curve2D\000", "tessellate\000", 958145977)
		methodCurve3D[0] = classDB.get_method_bind("Curve3D\000", "get_point_count\000", 3905245786)
		methodCurve3D[1] = classDB.get_method_bind("Curve3D\000", "set_point_count\000", 1286410249)
		methodCurve3D[2] = classDB.get_method_bind("Curve3D\000", "add_point\000", 3836314258)
		methodCurve3D[3] = classDB.get_method_bind("Curve3D\000", "set_point_position\000", 1530502735)
		methodCurve3D[4] = classDB.get_method_bind("Curve3D\000", "get_point_position\000", 711720468)
		methodCurve3D[5] = classDB.get_method_bind("Curve3D\000", "set_point_tilt\000", 1602489585)
		methodCurve3D[6] = classDB.get_method_bind("Curve3D\000", "get_point_tilt\000", 2339986948)
		methodCurve3D[7] = classDB.get_method_bind("Curve3D\000", "set_point_in\000", 1530502735)
		methodCurve3D[8] = classDB.get_method_bind("Curve3D\000", "get_point_in\000", 711720468)
		methodCurve3D[9] = classDB.get_method_bind("Curve3D\000", "set_point_out\000", 1530502735)
		methodCurve3D[10] = classDB.get_method_bind("Curve3D\000", "get_point_out\000", 711720468)
		methodCurve3D[11] = classDB.get_method_bind("Curve3D\000", "remove_point\000", 1286410249)
		methodCurve3D[12] = classDB.get_method_bind("Curve3D\000", "clear_points\000", 3218959716)
		methodCurve3D[13] = classDB.get_method_bind("Curve3D\000", "interpolate\000", 3285246857)
		methodCurve3D[14] = classDB.get_method_bind("Curve3D\000", "interpolatef\000", 2553580215)
		methodCurve3D[15] = classDB.get_method_bind("Curve3D\000", "set_bake_interval\000", 373806689)
		methodCurve3D[16] = classDB.get_method_bind("Curve3D\000", "get_bake_interval\000", 1740695150)
		methodCurve3D[17] = classDB.get_method_bind("Curve3D\000", "set_up_vector_enabled\000", 2586408642)
		methodCurve3D[18] = classDB.get_method_bind("Curve3D\000", "is_up_vector_enabled\000", 36873697)
		methodCurve3D[19] = classDB.get_method_bind("Curve3D\000", "get_baked_length\000", 1740695150)
		methodCurve3D[20] = classDB.get_method_bind("Curve3D\000", "interpolate_baked\000", 1362627031)
		methodCurve3D[21] = classDB.get_method_bind("Curve3D\000", "interpolate_baked_up_vector\000", 1362627031)
		methodCurve3D[22] = classDB.get_method_bind("Curve3D\000", "get_baked_points\000", 497664490)
		methodCurve3D[23] = classDB.get_method_bind("Curve3D\000", "get_baked_tilts\000", 675695659)
		methodCurve3D[24] = classDB.get_method_bind("Curve3D\000", "get_baked_up_vectors\000", 497664490)
		methodCurve3D[25] = classDB.get_method_bind("Curve3D\000", "get_closest_point\000", 192990374)
		methodCurve3D[26] = classDB.get_method_bind("Curve3D\000", "get_closest_offset\000", 1109078154)
		methodCurve3D[27] = classDB.get_method_bind("Curve3D\000", "tessellate\000", 1519759391)
		methodCurveTexture[0] = classDB.get_method_bind("CurveTexture\000", "set_width\000", 1286410249)
		methodCurveTexture[1] = classDB.get_method_bind("CurveTexture\000", "set_curve\000", 270443179)
		methodCurveTexture[2] = classDB.get_method_bind("CurveTexture\000", "get_curve\000", 2460114913)
		methodCurveTexture[3] = classDB.get_method_bind("CurveTexture\000", "set_texture_mode\000", 1321955367)
		methodCurveTexture[4] = classDB.get_method_bind("CurveTexture\000", "get_texture_mode\000", 715756376)
		methodCurveXYZTexture[0] = classDB.get_method_bind("CurveXYZTexture\000", "set_width\000", 1286410249)
		methodCurveXYZTexture[1] = classDB.get_method_bind("CurveXYZTexture\000", "set_curve_x\000", 270443179)
		methodCurveXYZTexture[2] = classDB.get_method_bind("CurveXYZTexture\000", "get_curve_x\000", 2460114913)
		methodCurveXYZTexture[3] = classDB.get_method_bind("CurveXYZTexture\000", "set_curve_y\000", 270443179)
		methodCurveXYZTexture[4] = classDB.get_method_bind("CurveXYZTexture\000", "get_curve_y\000", 2460114913)
		methodCurveXYZTexture[5] = classDB.get_method_bind("CurveXYZTexture\000", "set_curve_z\000", 270443179)
		methodCurveXYZTexture[6] = classDB.get_method_bind("CurveXYZTexture\000", "get_curve_z\000", 2460114913)
		methodCylinderMesh[0] = classDB.get_method_bind("CylinderMesh\000", "set_top_radius\000", 373806689)
		methodCylinderMesh[1] = classDB.get_method_bind("CylinderMesh\000", "get_top_radius\000", 1740695150)
		methodCylinderMesh[2] = classDB.get_method_bind("CylinderMesh\000", "set_bottom_radius\000", 373806689)
		methodCylinderMesh[3] = classDB.get_method_bind("CylinderMesh\000", "get_bottom_radius\000", 1740695150)
		methodCylinderMesh[4] = classDB.get_method_bind("CylinderMesh\000", "set_height\000", 373806689)
		methodCylinderMesh[5] = classDB.get_method_bind("CylinderMesh\000", "get_height\000", 1740695150)
		methodCylinderMesh[6] = classDB.get_method_bind("CylinderMesh\000", "set_radial_segments\000", 1286410249)
		methodCylinderMesh[7] = classDB.get_method_bind("CylinderMesh\000", "get_radial_segments\000", 3905245786)
		methodCylinderMesh[8] = classDB.get_method_bind("CylinderMesh\000", "set_rings\000", 1286410249)
		methodCylinderMesh[9] = classDB.get_method_bind("CylinderMesh\000", "get_rings\000", 3905245786)
		methodCylinderMesh[10] = classDB.get_method_bind("CylinderMesh\000", "set_cap_top\000", 2586408642)
		methodCylinderMesh[11] = classDB.get_method_bind("CylinderMesh\000", "is_cap_top\000", 36873697)
		methodCylinderMesh[12] = classDB.get_method_bind("CylinderMesh\000", "set_cap_bottom\000", 2586408642)
		methodCylinderMesh[13] = classDB.get_method_bind("CylinderMesh\000", "is_cap_bottom\000", 36873697)
		methodCylinderShape3D[0] = classDB.get_method_bind("CylinderShape3D\000", "set_radius\000", 373806689)
		methodCylinderShape3D[1] = classDB.get_method_bind("CylinderShape3D\000", "get_radius\000", 1740695150)
		methodCylinderShape3D[2] = classDB.get_method_bind("CylinderShape3D\000", "set_height\000", 373806689)
		methodCylinderShape3D[3] = classDB.get_method_bind("CylinderShape3D\000", "get_height\000", 1740695150)
		methodDTLSServer[0] = classDB.get_method_bind("DTLSServer\000", "setup\000", 3871247334)
		methodDTLSServer[1] = classDB.get_method_bind("DTLSServer\000", "take_connection\000", 3946580474)
		methodDampedSpringJoint2D[0] = classDB.get_method_bind("DampedSpringJoint2D\000", "set_length\000", 373806689)
		methodDampedSpringJoint2D[1] = classDB.get_method_bind("DampedSpringJoint2D\000", "get_length\000", 1740695150)
		methodDampedSpringJoint2D[2] = classDB.get_method_bind("DampedSpringJoint2D\000", "set_rest_length\000", 373806689)
		methodDampedSpringJoint2D[3] = classDB.get_method_bind("DampedSpringJoint2D\000", "get_rest_length\000", 1740695150)
		methodDampedSpringJoint2D[4] = classDB.get_method_bind("DampedSpringJoint2D\000", "set_stiffness\000", 373806689)
		methodDampedSpringJoint2D[5] = classDB.get_method_bind("DampedSpringJoint2D\000", "get_stiffness\000", 1740695150)
		methodDampedSpringJoint2D[6] = classDB.get_method_bind("DampedSpringJoint2D\000", "set_damping\000", 373806689)
		methodDampedSpringJoint2D[7] = classDB.get_method_bind("DampedSpringJoint2D\000", "get_damping\000", 1740695150)
		methodDecal[0] = classDB.get_method_bind("Decal\000", "set_extents\000", 3460891852)
		methodDecal[1] = classDB.get_method_bind("Decal\000", "get_extents\000", 3360562783)
		methodDecal[2] = classDB.get_method_bind("Decal\000", "set_texture\000", 2086764391)
		methodDecal[3] = classDB.get_method_bind("Decal\000", "get_texture\000", 3244119503)
		methodDecal[4] = classDB.get_method_bind("Decal\000", "set_emission_energy\000", 373806689)
		methodDecal[5] = classDB.get_method_bind("Decal\000", "get_emission_energy\000", 1740695150)
		methodDecal[6] = classDB.get_method_bind("Decal\000", "set_albedo_mix\000", 373806689)
		methodDecal[7] = classDB.get_method_bind("Decal\000", "get_albedo_mix\000", 1740695150)
		methodDecal[8] = classDB.get_method_bind("Decal\000", "set_modulate\000", 2920490490)
		methodDecal[9] = classDB.get_method_bind("Decal\000", "get_modulate\000", 3444240500)
		methodDecal[10] = classDB.get_method_bind("Decal\000", "set_upper_fade\000", 373806689)
		methodDecal[11] = classDB.get_method_bind("Decal\000", "get_upper_fade\000", 1740695150)
		methodDecal[12] = classDB.get_method_bind("Decal\000", "set_lower_fade\000", 373806689)
		methodDecal[13] = classDB.get_method_bind("Decal\000", "get_lower_fade\000", 1740695150)
		methodDecal[14] = classDB.get_method_bind("Decal\000", "set_normal_fade\000", 373806689)
		methodDecal[15] = classDB.get_method_bind("Decal\000", "get_normal_fade\000", 1740695150)
		methodDecal[16] = classDB.get_method_bind("Decal\000", "set_enable_distance_fade\000", 2586408642)
		methodDecal[17] = classDB.get_method_bind("Decal\000", "is_distance_fade_enabled\000", 36873697)
		methodDecal[18] = classDB.get_method_bind("Decal\000", "set_distance_fade_begin\000", 373806689)
		methodDecal[19] = classDB.get_method_bind("Decal\000", "get_distance_fade_begin\000", 1740695150)
		methodDecal[20] = classDB.get_method_bind("Decal\000", "set_distance_fade_length\000", 373806689)
		methodDecal[21] = classDB.get_method_bind("Decal\000", "get_distance_fade_length\000", 1740695150)
		methodDecal[22] = classDB.get_method_bind("Decal\000", "set_cull_mask\000", 1286410249)
		methodDecal[23] = classDB.get_method_bind("Decal\000", "get_cull_mask\000", 3905245786)
		methodDirectionalLight2D[0] = classDB.get_method_bind("DirectionalLight2D\000", "set_max_distance\000", 373806689)
		methodDirectionalLight2D[1] = classDB.get_method_bind("DirectionalLight2D\000", "get_max_distance\000", 1740695150)
		methodDirectionalLight3D[0] = classDB.get_method_bind("DirectionalLight3D\000", "set_shadow_mode\000", 1261211726)
		methodDirectionalLight3D[1] = classDB.get_method_bind("DirectionalLight3D\000", "get_shadow_mode\000", 2765228544)
		methodDirectionalLight3D[2] = classDB.get_method_bind("DirectionalLight3D\000", "set_blend_splits\000", 2586408642)
		methodDirectionalLight3D[3] = classDB.get_method_bind("DirectionalLight3D\000", "is_blend_splits_enabled\000", 36873697)
		methodDirectionalLight3D[4] = classDB.get_method_bind("DirectionalLight3D\000", "set_sky_mode\000", 2691194817)
		methodDirectionalLight3D[5] = classDB.get_method_bind("DirectionalLight3D\000", "get_sky_mode\000", 3819982774)
		methodDirectory[0] = classDB.get_method_bind("Directory\000", "open\000", 166001499)
		methodDirectory[1] = classDB.get_method_bind("Directory\000", "list_dir_begin\000", 2018049411)
		methodDirectory[2] = classDB.get_method_bind("Directory\000", "get_next\000", 2841200299)
		methodDirectory[3] = classDB.get_method_bind("Directory\000", "current_is_dir\000", 36873697)
		methodDirectory[4] = classDB.get_method_bind("Directory\000", "list_dir_end\000", 3218959716)
		methodDirectory[5] = classDB.get_method_bind("Directory\000", "get_files\000", 2981934095)
		methodDirectory[6] = classDB.get_method_bind("Directory\000", "get_directories\000", 2981934095)
		methodDirectory[7] = classDB.get_method_bind("Directory\000", "get_drive_count\000", 2455072627)
		methodDirectory[8] = classDB.get_method_bind("Directory\000", "get_drive\000", 990163283)
		methodDirectory[9] = classDB.get_method_bind("Directory\000", "get_current_drive\000", 2455072627)
		methodDirectory[10] = classDB.get_method_bind("Directory\000", "change_dir\000", 166001499)
		methodDirectory[11] = classDB.get_method_bind("Directory\000", "get_current_dir\000", 2841200299)
		methodDirectory[12] = classDB.get_method_bind("Directory\000", "make_dir\000", 166001499)
		methodDirectory[13] = classDB.get_method_bind("Directory\000", "make_dir_recursive\000", 166001499)
		methodDirectory[14] = classDB.get_method_bind("Directory\000", "file_exists\000", 2323990056)
		methodDirectory[15] = classDB.get_method_bind("Directory\000", "dir_exists\000", 2323990056)
		methodDirectory[16] = classDB.get_method_bind("Directory\000", "get_space_left\000", 2455072627)
		methodDirectory[17] = classDB.get_method_bind("Directory\000", "copy\000", 852856452)
		methodDirectory[18] = classDB.get_method_bind("Directory\000", "rename\000", 852856452)
		methodDirectory[19] = classDB.get_method_bind("Directory\000", "remove\000", 166001499)
		methodDirectory[20] = classDB.get_method_bind("Directory\000", "set_include_navigational\000", 2586408642)
		methodDirectory[21] = classDB.get_method_bind("Directory\000", "get_include_navigational\000", 36873697)
		methodDirectory[22] = classDB.get_method_bind("Directory\000", "set_include_hidden\000", 2586408642)
		methodDirectory[23] = classDB.get_method_bind("Directory\000", "get_include_hidden\000", 36873697)
		methodDisplayServerSingleton[0] = classDB.get_method_bind("DisplayServer\000", "has_feature\000", 334065950)
		methodDisplayServerSingleton[1] = classDB.get_method_bind("DisplayServer\000", "get_name\000", 201670096)
		methodDisplayServerSingleton[2] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_item\000", 1343835725)
		methodDisplayServerSingleton[3] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_check_item\000", 1343835725)
		methodDisplayServerSingleton[4] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_icon_item\000", 129300587)
		methodDisplayServerSingleton[5] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_icon_check_item\000", 129300587)
		methodDisplayServerSingleton[6] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_radio_check_item\000", 1343835725)
		methodDisplayServerSingleton[7] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_icon_radio_check_item\000", 129300587)
		methodDisplayServerSingleton[8] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_multistate_item\000", 2051878499)
		methodDisplayServerSingleton[9] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_submenu_item\000", 3806306913)
		methodDisplayServerSingleton[10] = classDB.get_method_bind("DisplayServer\000", "global_menu_add_separator\000", 1041533178)
		methodDisplayServerSingleton[11] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_index_from_text\000", 2878152881)
		methodDisplayServerSingleton[12] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_index_from_tag\000", 2941063483)
		methodDisplayServerSingleton[13] = classDB.get_method_bind("DisplayServer\000", "global_menu_is_item_checked\000", 3511468594)
		methodDisplayServerSingleton[14] = classDB.get_method_bind("DisplayServer\000", "global_menu_is_item_checkable\000", 3511468594)
		methodDisplayServerSingleton[15] = classDB.get_method_bind("DisplayServer\000", "global_menu_is_item_radio_checkable\000", 3511468594)
		methodDisplayServerSingleton[16] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_callback\000", 748666903)
		methodDisplayServerSingleton[17] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_tag\000", 330672633)
		methodDisplayServerSingleton[18] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_text\000", 591067909)
		methodDisplayServerSingleton[19] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_submenu\000", 591067909)
		methodDisplayServerSingleton[20] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_accelerator\000", 936065394)
		methodDisplayServerSingleton[21] = classDB.get_method_bind("DisplayServer\000", "global_menu_is_item_disabled\000", 3511468594)
		methodDisplayServerSingleton[22] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_tooltip\000", 591067909)
		methodDisplayServerSingleton[23] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_state\000", 3422818498)
		methodDisplayServerSingleton[24] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_max_states\000", 3422818498)
		methodDisplayServerSingleton[25] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_icon\000", 3591713183)
		methodDisplayServerSingleton[26] = classDB.get_method_bind("DisplayServer\000", "global_menu_get_item_indentation_level\000", 3422818498)
		methodDisplayServerSingleton[27] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_checked\000", 4108344793)
		methodDisplayServerSingleton[28] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_checkable\000", 4108344793)
		methodDisplayServerSingleton[29] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_radio_checkable\000", 4108344793)
		methodDisplayServerSingleton[30] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_callback\000", 3809915389)
		methodDisplayServerSingleton[31] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_tag\000", 453659863)
		methodDisplayServerSingleton[32] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_text\000", 965966136)
		methodDisplayServerSingleton[33] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_submenu\000", 965966136)
		methodDisplayServerSingleton[34] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_accelerator\000", 566943293)
		methodDisplayServerSingleton[35] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_disabled\000", 4108344793)
		methodDisplayServerSingleton[36] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_tooltip\000", 965966136)
		methodDisplayServerSingleton[37] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_state\000", 3474840532)
		methodDisplayServerSingleton[38] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_max_states\000", 3474840532)
		methodDisplayServerSingleton[39] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_icon\000", 3201338066)
		methodDisplayServerSingleton[40] = classDB.get_method_bind("DisplayServer\000", "global_menu_set_item_indentation_level\000", 3474840532)
		methodDisplayServerSingleton[41] = classDB.get_method_bind("DisplayServer\000", "global_menu_remove_item\000", 2956805083)
		methodDisplayServerSingleton[42] = classDB.get_method_bind("DisplayServer\000", "global_menu_clear\000", 83702148)
		methodDisplayServerSingleton[43] = classDB.get_method_bind("DisplayServer\000", "tts_is_speaking\000", 36873697)
		methodDisplayServerSingleton[44] = classDB.get_method_bind("DisplayServer\000", "tts_is_paused\000", 36873697)
		methodDisplayServerSingleton[45] = classDB.get_method_bind("DisplayServer\000", "tts_get_voices\000", 3995934104)
		methodDisplayServerSingleton[46] = classDB.get_method_bind("DisplayServer\000", "tts_get_voices_for_language\000", 4291131558)
		methodDisplayServerSingleton[47] = classDB.get_method_bind("DisplayServer\000", "tts_speak\000", 3723082199)
		methodDisplayServerSingleton[48] = classDB.get_method_bind("DisplayServer\000", "tts_pause\000", 3218959716)
		methodDisplayServerSingleton[49] = classDB.get_method_bind("DisplayServer\000", "tts_resume\000", 3218959716)
		methodDisplayServerSingleton[50] = classDB.get_method_bind("DisplayServer\000", "tts_stop\000", 3218959716)
		methodDisplayServerSingleton[51] = classDB.get_method_bind("DisplayServer\000", "tts_set_utterance_callback\000", 109679083)
		methodDisplayServerSingleton[52] = classDB.get_method_bind("DisplayServer\000", "mouse_set_mode\000", 348288463)
		methodDisplayServerSingleton[53] = classDB.get_method_bind("DisplayServer\000", "mouse_get_mode\000", 1353961651)
		methodDisplayServerSingleton[54] = classDB.get_method_bind("DisplayServer\000", "warp_mouse\000", 1130785943)
		methodDisplayServerSingleton[55] = classDB.get_method_bind("DisplayServer\000", "mouse_get_position\000", 3690982128)
		methodDisplayServerSingleton[56] = classDB.get_method_bind("DisplayServer\000", "mouse_get_button_state\000", 1132662608)
		methodDisplayServerSingleton[57] = classDB.get_method_bind("DisplayServer\000", "clipboard_set\000", 83702148)
		methodDisplayServerSingleton[58] = classDB.get_method_bind("DisplayServer\000", "clipboard_get\000", 201670096)
		methodDisplayServerSingleton[59] = classDB.get_method_bind("DisplayServer\000", "clipboard_has\000", 36873697)
		methodDisplayServerSingleton[60] = classDB.get_method_bind("DisplayServer\000", "clipboard_set_primary\000", 83702148)
		methodDisplayServerSingleton[61] = classDB.get_method_bind("DisplayServer\000", "clipboard_get_primary\000", 201670096)
		methodDisplayServerSingleton[62] = classDB.get_method_bind("DisplayServer\000", "get_display_cutouts\000", 3995934104)
		methodDisplayServerSingleton[63] = classDB.get_method_bind("DisplayServer\000", "get_display_safe_area\000", 410525958)
		methodDisplayServerSingleton[64] = classDB.get_method_bind("DisplayServer\000", "get_screen_count\000", 3905245786)
		methodDisplayServerSingleton[65] = classDB.get_method_bind("DisplayServer\000", "screen_get_position\000", 1725937825)
		methodDisplayServerSingleton[66] = classDB.get_method_bind("DisplayServer\000", "screen_get_size\000", 1725937825)
		methodDisplayServerSingleton[67] = classDB.get_method_bind("DisplayServer\000", "screen_get_usable_rect\000", 2439012528)
		methodDisplayServerSingleton[68] = classDB.get_method_bind("DisplayServer\000", "screen_get_dpi\000", 181039630)
		methodDisplayServerSingleton[69] = classDB.get_method_bind("DisplayServer\000", "screen_get_scale\000", 909105437)
		methodDisplayServerSingleton[70] = classDB.get_method_bind("DisplayServer\000", "screen_is_touchscreen\000", 2824505868)
		methodDisplayServerSingleton[71] = classDB.get_method_bind("DisplayServer\000", "screen_get_max_scale\000", 1740695150)
		methodDisplayServerSingleton[72] = classDB.get_method_bind("DisplayServer\000", "screen_get_refresh_rate\000", 909105437)
		methodDisplayServerSingleton[73] = classDB.get_method_bind("DisplayServer\000", "screen_set_orientation\000", 2629526904)
		methodDisplayServerSingleton[74] = classDB.get_method_bind("DisplayServer\000", "screen_get_orientation\000", 133818562)
		methodDisplayServerSingleton[75] = classDB.get_method_bind("DisplayServer\000", "screen_set_keep_on\000", 2586408642)
		methodDisplayServerSingleton[76] = classDB.get_method_bind("DisplayServer\000", "screen_is_kept_on\000", 36873697)
		methodDisplayServerSingleton[77] = classDB.get_method_bind("DisplayServer\000", "get_window_list\000", 1930428628)
		methodDisplayServerSingleton[78] = classDB.get_method_bind("DisplayServer\000", "get_window_at_screen_position\000", 2485466453)
		methodDisplayServerSingleton[79] = classDB.get_method_bind("DisplayServer\000", "create_sub_window\000", 1993979852)
		methodDisplayServerSingleton[80] = classDB.get_method_bind("DisplayServer\000", "delete_sub_window\000", 1286410249)
		methodDisplayServerSingleton[81] = classDB.get_method_bind("DisplayServer\000", "window_get_native_handle\000", 2709193271)
		methodDisplayServerSingleton[82] = classDB.get_method_bind("DisplayServer\000", "window_get_active_popup\000", 3905245786)
		methodDisplayServerSingleton[83] = classDB.get_method_bind("DisplayServer\000", "window_set_popup_safe_rect\000", 3317281434)
		methodDisplayServerSingleton[84] = classDB.get_method_bind("DisplayServer\000", "window_get_popup_safe_rect\000", 2161169500)
		methodDisplayServerSingleton[85] = classDB.get_method_bind("DisplayServer\000", "window_set_title\000", 3043792800)
		methodDisplayServerSingleton[86] = classDB.get_method_bind("DisplayServer\000", "window_set_mouse_passthrough\000", 3958815166)
		methodDisplayServerSingleton[87] = classDB.get_method_bind("DisplayServer\000", "window_get_current_screen\000", 1591665591)
		methodDisplayServerSingleton[88] = classDB.get_method_bind("DisplayServer\000", "window_set_current_screen\000", 3023605688)
		methodDisplayServerSingleton[89] = classDB.get_method_bind("DisplayServer\000", "window_get_position\000", 763922886)
		methodDisplayServerSingleton[90] = classDB.get_method_bind("DisplayServer\000", "window_set_position\000", 3614040015)
		methodDisplayServerSingleton[91] = classDB.get_method_bind("DisplayServer\000", "window_get_size\000", 763922886)
		methodDisplayServerSingleton[92] = classDB.get_method_bind("DisplayServer\000", "window_set_size\000", 3614040015)
		methodDisplayServerSingleton[93] = classDB.get_method_bind("DisplayServer\000", "window_set_rect_changed_callback\000", 3653650673)
		methodDisplayServerSingleton[94] = classDB.get_method_bind("DisplayServer\000", "window_set_window_event_callback\000", 3653650673)
		methodDisplayServerSingleton[95] = classDB.get_method_bind("DisplayServer\000", "window_set_input_event_callback\000", 3653650673)
		methodDisplayServerSingleton[96] = classDB.get_method_bind("DisplayServer\000", "window_set_input_text_callback\000", 3653650673)
		methodDisplayServerSingleton[97] = classDB.get_method_bind("DisplayServer\000", "window_set_drop_files_callback\000", 3653650673)
		methodDisplayServerSingleton[98] = classDB.get_method_bind("DisplayServer\000", "window_attach_instance_id\000", 3023605688)
		methodDisplayServerSingleton[99] = classDB.get_method_bind("DisplayServer\000", "window_get_attached_instance_id\000", 1591665591)
		methodDisplayServerSingleton[100] = classDB.get_method_bind("DisplayServer\000", "window_get_max_size\000", 763922886)
		methodDisplayServerSingleton[101] = classDB.get_method_bind("DisplayServer\000", "window_set_max_size\000", 3614040015)
		methodDisplayServerSingleton[102] = classDB.get_method_bind("DisplayServer\000", "window_get_min_size\000", 763922886)
		methodDisplayServerSingleton[103] = classDB.get_method_bind("DisplayServer\000", "window_set_min_size\000", 3614040015)
		methodDisplayServerSingleton[104] = classDB.get_method_bind("DisplayServer\000", "window_get_real_size\000", 763922886)
		methodDisplayServerSingleton[105] = classDB.get_method_bind("DisplayServer\000", "window_get_mode\000", 2185728461)
		methodDisplayServerSingleton[106] = classDB.get_method_bind("DisplayServer\000", "window_set_mode\000", 2942569511)
		methodDisplayServerSingleton[107] = classDB.get_method_bind("DisplayServer\000", "window_set_flag\000", 3971592565)
		methodDisplayServerSingleton[108] = classDB.get_method_bind("DisplayServer\000", "window_get_flag\000", 2662949986)
		methodDisplayServerSingleton[109] = classDB.get_method_bind("DisplayServer\000", "window_get_safe_title_margins\000", 763922886)
		methodDisplayServerSingleton[110] = classDB.get_method_bind("DisplayServer\000", "window_request_attention\000", 1995695955)
		methodDisplayServerSingleton[111] = classDB.get_method_bind("DisplayServer\000", "window_move_to_foreground\000", 1995695955)
		methodDisplayServerSingleton[112] = classDB.get_method_bind("DisplayServer\000", "window_can_draw\000", 1051549951)
		methodDisplayServerSingleton[113] = classDB.get_method_bind("DisplayServer\000", "window_set_transient\000", 3937882851)
		methodDisplayServerSingleton[114] = classDB.get_method_bind("DisplayServer\000", "window_set_exclusive\000", 300928843)
		methodDisplayServerSingleton[115] = classDB.get_method_bind("DisplayServer\000", "window_set_ime_active\000", 450484987)
		methodDisplayServerSingleton[116] = classDB.get_method_bind("DisplayServer\000", "window_set_ime_position\000", 3614040015)
		methodDisplayServerSingleton[117] = classDB.get_method_bind("DisplayServer\000", "window_set_vsync_mode\000", 1708924624)
		methodDisplayServerSingleton[118] = classDB.get_method_bind("DisplayServer\000", "window_get_vsync_mode\000", 578873795)
		methodDisplayServerSingleton[119] = classDB.get_method_bind("DisplayServer\000", "window_maximize_on_title_dbl_click\000", 36873697)
		methodDisplayServerSingleton[120] = classDB.get_method_bind("DisplayServer\000", "window_minimize_on_title_dbl_click\000", 36873697)
		methodDisplayServerSingleton[121] = classDB.get_method_bind("DisplayServer\000", "ime_get_selection\000", 3690982128)
		methodDisplayServerSingleton[122] = classDB.get_method_bind("DisplayServer\000", "ime_get_text\000", 201670096)
		methodDisplayServerSingleton[123] = classDB.get_method_bind("DisplayServer\000", "virtual_keyboard_show\000", 860410478)
		methodDisplayServerSingleton[124] = classDB.get_method_bind("DisplayServer\000", "virtual_keyboard_hide\000", 3218959716)
		methodDisplayServerSingleton[125] = classDB.get_method_bind("DisplayServer\000", "virtual_keyboard_get_height\000", 3905245786)
		methodDisplayServerSingleton[126] = classDB.get_method_bind("DisplayServer\000", "cursor_set_shape\000", 2026291549)
		methodDisplayServerSingleton[127] = classDB.get_method_bind("DisplayServer\000", "cursor_get_shape\000", 1087724927)
		methodDisplayServerSingleton[128] = classDB.get_method_bind("DisplayServer\000", "cursor_set_custom_image\000", 1358907026)
		methodDisplayServerSingleton[129] = classDB.get_method_bind("DisplayServer\000", "get_swap_cancel_ok\000", 2240911060)
		methodDisplayServerSingleton[130] = classDB.get_method_bind("DisplayServer\000", "enable_for_stealing_focus\000", 1286410249)
		methodDisplayServerSingleton[131] = classDB.get_method_bind("DisplayServer\000", "dialog_show\000", 4115553226)
		methodDisplayServerSingleton[132] = classDB.get_method_bind("DisplayServer\000", "dialog_input_text\000", 3088703427)
		methodDisplayServerSingleton[133] = classDB.get_method_bind("DisplayServer\000", "keyboard_get_layout_count\000", 3905245786)
		methodDisplayServerSingleton[134] = classDB.get_method_bind("DisplayServer\000", "keyboard_get_current_layout\000", 3905245786)
		methodDisplayServerSingleton[135] = classDB.get_method_bind("DisplayServer\000", "keyboard_set_current_layout\000", 1286410249)
		methodDisplayServerSingleton[136] = classDB.get_method_bind("DisplayServer\000", "keyboard_get_layout_language\000", 844755477)
		methodDisplayServerSingleton[137] = classDB.get_method_bind("DisplayServer\000", "keyboard_get_layout_name\000", 844755477)
		methodDisplayServerSingleton[138] = classDB.get_method_bind("DisplayServer\000", "keyboard_get_keycode_from_physical\000", 3447613187)
		methodDisplayServerSingleton[139] = classDB.get_method_bind("DisplayServer\000", "process_events\000", 3218959716)
		methodDisplayServerSingleton[140] = classDB.get_method_bind("DisplayServer\000", "force_process_and_drop_events\000", 3218959716)
		methodDisplayServerSingleton[141] = classDB.get_method_bind("DisplayServer\000", "set_native_icon\000", 83702148)
		methodDisplayServerSingleton[142] = classDB.get_method_bind("DisplayServer\000", "set_icon\000", 532598488)
		methodDisplayServerSingleton[143] = classDB.get_method_bind("DisplayServer\000", "tablet_get_driver_count\000", 3905245786)
		methodDisplayServerSingleton[144] = classDB.get_method_bind("DisplayServer\000", "tablet_get_driver_name\000", 844755477)
		methodDisplayServerSingleton[145] = classDB.get_method_bind("DisplayServer\000", "tablet_get_current_driver\000", 201670096)
		methodDisplayServerSingleton[146] = classDB.get_method_bind("DisplayServer\000", "tablet_set_current_driver\000", 83702148)
		methodENetConnection[0] = classDB.get_method_bind("ENetConnection\000", "create_host_bound\000", 866250949)
		methodENetConnection[1] = classDB.get_method_bind("ENetConnection\000", "create_host\000", 117198950)
		methodENetConnection[2] = classDB.get_method_bind("ENetConnection\000", "destroy\000", 3218959716)
		methodENetConnection[3] = classDB.get_method_bind("ENetConnection\000", "connect_to_host\000", 385984708)
		methodENetConnection[4] = classDB.get_method_bind("ENetConnection\000", "service\000", 2402345344)
		methodENetConnection[5] = classDB.get_method_bind("ENetConnection\000", "flush\000", 3218959716)
		methodENetConnection[6] = classDB.get_method_bind("ENetConnection\000", "bandwidth_limit\000", 2302169788)
		methodENetConnection[7] = classDB.get_method_bind("ENetConnection\000", "channel_limit\000", 1286410249)
		methodENetConnection[8] = classDB.get_method_bind("ENetConnection\000", "broadcast\000", 2772371345)
		methodENetConnection[9] = classDB.get_method_bind("ENetConnection\000", "compress\000", 2660215187)
		methodENetConnection[10] = classDB.get_method_bind("ENetConnection\000", "dtls_server_setup\000", 3447544237)
		methodENetConnection[11] = classDB.get_method_bind("ENetConnection\000", "dtls_client_setup\000", 2959136280)
		methodENetConnection[12] = classDB.get_method_bind("ENetConnection\000", "refuse_new_connections\000", 2586408642)
		methodENetConnection[13] = classDB.get_method_bind("ENetConnection\000", "pop_statistic\000", 2166904170)
		methodENetConnection[14] = classDB.get_method_bind("ENetConnection\000", "get_max_channels\000", 3905245786)
		methodENetConnection[15] = classDB.get_method_bind("ENetConnection\000", "get_local_port\000", 3905245786)
		methodENetConnection[16] = classDB.get_method_bind("ENetConnection\000", "get_peers\000", 2915620761)
		methodENetMultiplayerPeer[0] = classDB.get_method_bind("ENetMultiplayerPeer\000", "create_server\000", 1616151701)
		methodENetMultiplayerPeer[1] = classDB.get_method_bind("ENetMultiplayerPeer\000", "create_client\000", 920217784)
		methodENetMultiplayerPeer[2] = classDB.get_method_bind("ENetMultiplayerPeer\000", "create_mesh\000", 844576869)
		methodENetMultiplayerPeer[3] = classDB.get_method_bind("ENetMultiplayerPeer\000", "add_mesh_peer\000", 1293458335)
		methodENetMultiplayerPeer[4] = classDB.get_method_bind("ENetMultiplayerPeer\000", "close_connection\000", 2886164389)
		methodENetMultiplayerPeer[5] = classDB.get_method_bind("ENetMultiplayerPeer\000", "set_bind_ip\000", 83702148)
		methodENetMultiplayerPeer[6] = classDB.get_method_bind("ENetMultiplayerPeer\000", "set_server_relay_enabled\000", 2586408642)
		methodENetMultiplayerPeer[7] = classDB.get_method_bind("ENetMultiplayerPeer\000", "is_server_relay_enabled\000", 36873697)
		methodENetMultiplayerPeer[8] = classDB.get_method_bind("ENetMultiplayerPeer\000", "get_host\000", 4103238886)
		methodENetMultiplayerPeer[9] = classDB.get_method_bind("ENetMultiplayerPeer\000", "get_peer\000", 3793311544)
		methodENetPacketPeer[0] = classDB.get_method_bind("ENetPacketPeer\000", "peer_disconnect\000", 1995695955)
		methodENetPacketPeer[1] = classDB.get_method_bind("ENetPacketPeer\000", "peer_disconnect_later\000", 1995695955)
		methodENetPacketPeer[2] = classDB.get_method_bind("ENetPacketPeer\000", "peer_disconnect_now\000", 1995695955)
		methodENetPacketPeer[3] = classDB.get_method_bind("ENetPacketPeer\000", "ping\000", 3218959716)
		methodENetPacketPeer[4] = classDB.get_method_bind("ENetPacketPeer\000", "ping_interval\000", 1286410249)
		methodENetPacketPeer[5] = classDB.get_method_bind("ENetPacketPeer\000", "reset\000", 3218959716)
		methodENetPacketPeer[6] = classDB.get_method_bind("ENetPacketPeer\000", "send\000", 120522849)
		methodENetPacketPeer[7] = classDB.get_method_bind("ENetPacketPeer\000", "throttle_configure\000", 1649997291)
		methodENetPacketPeer[8] = classDB.get_method_bind("ENetPacketPeer\000", "set_timeout\000", 1649997291)
		methodENetPacketPeer[9] = classDB.get_method_bind("ENetPacketPeer\000", "get_remote_address\000", 201670096)
		methodENetPacketPeer[10] = classDB.get_method_bind("ENetPacketPeer\000", "get_remote_port\000", 3905245786)
		methodENetPacketPeer[11] = classDB.get_method_bind("ENetPacketPeer\000", "get_statistic\000", 1642578323)
		methodENetPacketPeer[12] = classDB.get_method_bind("ENetPacketPeer\000", "get_state\000", 711068532)
		methodENetPacketPeer[13] = classDB.get_method_bind("ENetPacketPeer\000", "get_channels\000", 3905245786)
		methodENetPacketPeer[14] = classDB.get_method_bind("ENetPacketPeer\000", "is_active\000", 36873697)
		methodEditorCommandPalette[0] = classDB.get_method_bind("EditorCommandPalette\000", "add_command\000", 3664614892)
		methodEditorCommandPalette[1] = classDB.get_method_bind("EditorCommandPalette\000", "remove_command\000", 83702148)
		methodEditorDebuggerPlugin[0] = classDB.get_method_bind("EditorDebuggerPlugin\000", "send_message\000", 1209351045)
		methodEditorDebuggerPlugin[1] = classDB.get_method_bind("EditorDebuggerPlugin\000", "register_message_capture\000", 1874754934)
		methodEditorDebuggerPlugin[2] = classDB.get_method_bind("EditorDebuggerPlugin\000", "unregister_message_capture\000", 3304788590)
		methodEditorDebuggerPlugin[3] = classDB.get_method_bind("EditorDebuggerPlugin\000", "has_capture\000", 2041966384)
		methodEditorDebuggerPlugin[4] = classDB.get_method_bind("EditorDebuggerPlugin\000", "is_breaked\000", 2240911060)
		methodEditorDebuggerPlugin[5] = classDB.get_method_bind("EditorDebuggerPlugin\000", "is_debuggable\000", 2240911060)
		methodEditorDebuggerPlugin[6] = classDB.get_method_bind("EditorDebuggerPlugin\000", "is_session_active\000", 2240911060)
		methodEditorExportPlugin[0] = classDB.get_method_bind("EditorExportPlugin\000", "add_shared_object\000", 3098291045)
		methodEditorExportPlugin[1] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_project_static_lib\000", 83702148)
		methodEditorExportPlugin[2] = classDB.get_method_bind("EditorExportPlugin\000", "add_file\000", 527928637)
		methodEditorExportPlugin[3] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_framework\000", 83702148)
		methodEditorExportPlugin[4] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_embedded_framework\000", 83702148)
		methodEditorExportPlugin[5] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_plist_content\000", 83702148)
		methodEditorExportPlugin[6] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_linker_flags\000", 83702148)
		methodEditorExportPlugin[7] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_bundle_file\000", 83702148)
		methodEditorExportPlugin[8] = classDB.get_method_bind("EditorExportPlugin\000", "add_ios_cpp_code\000", 83702148)
		methodEditorExportPlugin[9] = classDB.get_method_bind("EditorExportPlugin\000", "add_macos_plugin_file\000", 83702148)
		methodEditorExportPlugin[10] = classDB.get_method_bind("EditorExportPlugin\000", "skip\000", 3218959716)
		methodEditorFeatureProfile[0] = classDB.get_method_bind("EditorFeatureProfile\000", "set_disable_class\000", 2524380260)
		methodEditorFeatureProfile[1] = classDB.get_method_bind("EditorFeatureProfile\000", "is_class_disabled\000", 2619796661)
		methodEditorFeatureProfile[2] = classDB.get_method_bind("EditorFeatureProfile\000", "set_disable_class_editor\000", 2524380260)
		methodEditorFeatureProfile[3] = classDB.get_method_bind("EditorFeatureProfile\000", "is_class_editor_disabled\000", 2619796661)
		methodEditorFeatureProfile[4] = classDB.get_method_bind("EditorFeatureProfile\000", "set_disable_class_property\000", 865197084)
		methodEditorFeatureProfile[5] = classDB.get_method_bind("EditorFeatureProfile\000", "is_class_property_disabled\000", 471820014)
		methodEditorFeatureProfile[6] = classDB.get_method_bind("EditorFeatureProfile\000", "set_disable_feature\000", 1884871044)
		methodEditorFeatureProfile[7] = classDB.get_method_bind("EditorFeatureProfile\000", "is_feature_disabled\000", 2974403161)
		methodEditorFeatureProfile[8] = classDB.get_method_bind("EditorFeatureProfile\000", "get_feature_name\000", 3401335809)
		methodEditorFeatureProfile[9] = classDB.get_method_bind("EditorFeatureProfile\000", "save_to_file\000", 166001499)
		methodEditorFeatureProfile[10] = classDB.get_method_bind("EditorFeatureProfile\000", "load_from_file\000", 166001499)
		methodEditorFileDialog[0] = classDB.get_method_bind("EditorFileDialog\000", "clear_filters\000", 3218959716)
		methodEditorFileDialog[1] = classDB.get_method_bind("EditorFileDialog\000", "add_filter\000", 233059325)
		methodEditorFileDialog[2] = classDB.get_method_bind("EditorFileDialog\000", "get_current_dir\000", 201670096)
		methodEditorFileDialog[3] = classDB.get_method_bind("EditorFileDialog\000", "get_current_file\000", 201670096)
		methodEditorFileDialog[4] = classDB.get_method_bind("EditorFileDialog\000", "get_current_path\000", 201670096)
		methodEditorFileDialog[5] = classDB.get_method_bind("EditorFileDialog\000", "set_current_dir\000", 83702148)
		methodEditorFileDialog[6] = classDB.get_method_bind("EditorFileDialog\000", "set_current_file\000", 83702148)
		methodEditorFileDialog[7] = classDB.get_method_bind("EditorFileDialog\000", "set_current_path\000", 83702148)
		methodEditorFileDialog[8] = classDB.get_method_bind("EditorFileDialog\000", "set_file_mode\000", 274150415)
		methodEditorFileDialog[9] = classDB.get_method_bind("EditorFileDialog\000", "get_file_mode\000", 2681044145)
		methodEditorFileDialog[10] = classDB.get_method_bind("EditorFileDialog\000", "get_vbox\000", 915758477)
		methodEditorFileDialog[11] = classDB.get_method_bind("EditorFileDialog\000", "set_access\000", 3882893764)
		methodEditorFileDialog[12] = classDB.get_method_bind("EditorFileDialog\000", "get_access\000", 778734016)
		methodEditorFileDialog[13] = classDB.get_method_bind("EditorFileDialog\000", "set_show_hidden_files\000", 2586408642)
		methodEditorFileDialog[14] = classDB.get_method_bind("EditorFileDialog\000", "is_showing_hidden_files\000", 36873697)
		methodEditorFileDialog[15] = classDB.get_method_bind("EditorFileDialog\000", "set_display_mode\000", 3049004050)
		methodEditorFileDialog[16] = classDB.get_method_bind("EditorFileDialog\000", "get_display_mode\000", 3517174669)
		methodEditorFileDialog[17] = classDB.get_method_bind("EditorFileDialog\000", "set_disable_overwrite_warning\000", 2586408642)
		methodEditorFileDialog[18] = classDB.get_method_bind("EditorFileDialog\000", "is_overwrite_warning_disabled\000", 36873697)
		methodEditorFileDialog[19] = classDB.get_method_bind("EditorFileDialog\000", "invalidate\000", 3218959716)
		methodEditorFileSystem[0] = classDB.get_method_bind("EditorFileSystem\000", "get_filesystem\000", 842323275)
		methodEditorFileSystem[1] = classDB.get_method_bind("EditorFileSystem\000", "is_scanning\000", 36873697)
		methodEditorFileSystem[2] = classDB.get_method_bind("EditorFileSystem\000", "get_scanning_progress\000", 1740695150)
		methodEditorFileSystem[3] = classDB.get_method_bind("EditorFileSystem\000", "scan\000", 3218959716)
		methodEditorFileSystem[4] = classDB.get_method_bind("EditorFileSystem\000", "scan_sources\000", 3218959716)
		methodEditorFileSystem[5] = classDB.get_method_bind("EditorFileSystem\000", "update_file\000", 83702148)
		methodEditorFileSystem[6] = classDB.get_method_bind("EditorFileSystem\000", "get_filesystem_path\000", 3188521125)
		methodEditorFileSystem[7] = classDB.get_method_bind("EditorFileSystem\000", "get_file_type\000", 3135753539)
		methodEditorFileSystem[8] = classDB.get_method_bind("EditorFileSystem\000", "update_script_classes\000", 3218959716)
		methodEditorFileSystem[9] = classDB.get_method_bind("EditorFileSystem\000", "reimport_files\000", 4015028928)
		methodEditorFileSystemDirectory[0] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_subdir_count\000", 3905245786)
		methodEditorFileSystemDirectory[1] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_subdir\000", 2330964164)
		methodEditorFileSystemDirectory[2] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_count\000", 3905245786)
		methodEditorFileSystemDirectory[3] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file\000", 844755477)
		methodEditorFileSystemDirectory[4] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_path\000", 844755477)
		methodEditorFileSystemDirectory[5] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_type\000", 659327637)
		methodEditorFileSystemDirectory[6] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_script_class_name\000", 844755477)
		methodEditorFileSystemDirectory[7] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_script_class_extends\000", 844755477)
		methodEditorFileSystemDirectory[8] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_file_import_is_valid\000", 1116898809)
		methodEditorFileSystemDirectory[9] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_name\000", 2841200299)
		methodEditorFileSystemDirectory[10] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_path\000", 201670096)
		methodEditorFileSystemDirectory[11] = classDB.get_method_bind("EditorFileSystemDirectory\000", "get_parent\000", 842323275)
		methodEditorFileSystemDirectory[12] = classDB.get_method_bind("EditorFileSystemDirectory\000", "find_file_index\000", 1321353865)
		methodEditorFileSystemDirectory[13] = classDB.get_method_bind("EditorFileSystemDirectory\000", "find_dir_index\000", 1321353865)
		methodEditorInspectorPlugin[0] = classDB.get_method_bind("EditorInspectorPlugin\000", "add_custom_control\000", 1496901182)
		methodEditorInspectorPlugin[1] = classDB.get_method_bind("EditorInspectorPlugin\000", "add_property_editor\000", 3406284123)
		methodEditorInspectorPlugin[2] = classDB.get_method_bind("EditorInspectorPlugin\000", "add_property_editor_for_multiple_properties\000", 788598683)
		methodEditorInterface[0] = classDB.get_method_bind("EditorInterface\000", "inspect_object\000", 2564140749)
		methodEditorInterface[1] = classDB.get_method_bind("EditorInterface\000", "get_selection\000", 50507531)
		methodEditorInterface[2] = classDB.get_method_bind("EditorInterface\000", "get_editor_settings\000", 2469088558)
		methodEditorInterface[3] = classDB.get_method_bind("EditorInterface\000", "get_script_editor\000", 3947407316)
		methodEditorInterface[4] = classDB.get_method_bind("EditorInterface\000", "get_base_control\000", 829782337)
		methodEditorInterface[5] = classDB.get_method_bind("EditorInterface\000", "get_editor_scale\000", 1740695150)
		methodEditorInterface[6] = classDB.get_method_bind("EditorInterface\000", "edit_resource\000", 968641751)
		methodEditorInterface[7] = classDB.get_method_bind("EditorInterface\000", "edit_node\000", 1078189570)
		methodEditorInterface[8] = classDB.get_method_bind("EditorInterface\000", "edit_script\000", 3664508569)
		methodEditorInterface[9] = classDB.get_method_bind("EditorInterface\000", "open_scene_from_path\000", 83702148)
		methodEditorInterface[10] = classDB.get_method_bind("EditorInterface\000", "reload_scene_from_path\000", 83702148)
		methodEditorInterface[11] = classDB.get_method_bind("EditorInterface\000", "play_main_scene\000", 3218959716)
		methodEditorInterface[12] = classDB.get_method_bind("EditorInterface\000", "play_current_scene\000", 3218959716)
		methodEditorInterface[13] = classDB.get_method_bind("EditorInterface\000", "play_custom_scene\000", 83702148)
		methodEditorInterface[14] = classDB.get_method_bind("EditorInterface\000", "stop_playing_scene\000", 3218959716)
		methodEditorInterface[15] = classDB.get_method_bind("EditorInterface\000", "is_playing_scene\000", 36873697)
		methodEditorInterface[16] = classDB.get_method_bind("EditorInterface\000", "get_playing_scene\000", 201670096)
		methodEditorInterface[17] = classDB.get_method_bind("EditorInterface\000", "get_open_scenes\000", 1139954409)
		methodEditorInterface[18] = classDB.get_method_bind("EditorInterface\000", "get_edited_scene_root\000", 1818953479)
		methodEditorInterface[19] = classDB.get_method_bind("EditorInterface\000", "get_resource_previewer\000", 1578506115)
		methodEditorInterface[20] = classDB.get_method_bind("EditorInterface\000", "get_resource_filesystem\000", 492575303)
		methodEditorInterface[21] = classDB.get_method_bind("EditorInterface\000", "get_editor_main_control\000", 829782337)
		methodEditorInterface[22] = classDB.get_method_bind("EditorInterface\000", "make_mesh_previews\000", 878078554)
		methodEditorInterface[23] = classDB.get_method_bind("EditorInterface\000", "select_file\000", 83702148)
		methodEditorInterface[24] = classDB.get_method_bind("EditorInterface\000", "get_selected_path\000", 201670096)
		methodEditorInterface[25] = classDB.get_method_bind("EditorInterface\000", "get_current_path\000", 201670096)
		methodEditorInterface[26] = classDB.get_method_bind("EditorInterface\000", "get_file_system_dock\000", 561123517)
		methodEditorInterface[27] = classDB.get_method_bind("EditorInterface\000", "get_editor_paths\000", 4197665367)
		methodEditorInterface[28] = classDB.get_method_bind("EditorInterface\000", "get_command_palette\000", 2471163807)
		methodEditorInterface[29] = classDB.get_method_bind("EditorInterface\000", "set_plugin_enabled\000", 2678287736)
		methodEditorInterface[30] = classDB.get_method_bind("EditorInterface\000", "is_plugin_enabled\000", 3927539163)
		methodEditorInterface[31] = classDB.get_method_bind("EditorInterface\000", "get_inspector\000", 3517113938)
		methodEditorInterface[32] = classDB.get_method_bind("EditorInterface\000", "save_scene\000", 166280745)
		methodEditorInterface[33] = classDB.get_method_bind("EditorInterface\000", "save_scene_as\000", 1168363258)
		methodEditorInterface[34] = classDB.get_method_bind("EditorInterface\000", "restart_editor\000", 3216645846)
		methodEditorInterface[35] = classDB.get_method_bind("EditorInterface\000", "set_main_screen_editor\000", 83702148)
		methodEditorInterface[36] = classDB.get_method_bind("EditorInterface\000", "set_distraction_free_mode\000", 2586408642)
		methodEditorInterface[37] = classDB.get_method_bind("EditorInterface\000", "is_distraction_free_mode_enabled\000", 36873697)
		methodEditorNode3DGizmo[0] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_lines\000", 302451090)
		methodEditorNode3DGizmo[1] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_mesh\000", 1868867708)
		methodEditorNode3DGizmo[2] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_collision_segments\000", 334873810)
		methodEditorNode3DGizmo[3] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_collision_triangles\000", 54901064)
		methodEditorNode3DGizmo[4] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_unscaled_billboard\000", 3719733075)
		methodEditorNode3DGizmo[5] = classDB.get_method_bind("EditorNode3DGizmo\000", "add_handles\000", 2254560097)
		methodEditorNode3DGizmo[6] = classDB.get_method_bind("EditorNode3DGizmo\000", "set_spatial_node\000", 1078189570)
		methodEditorNode3DGizmo[7] = classDB.get_method_bind("EditorNode3DGizmo\000", "get_spatial_node\000", 151077316)
		methodEditorNode3DGizmo[8] = classDB.get_method_bind("EditorNode3DGizmo\000", "get_plugin\000", 4250544552)
		methodEditorNode3DGizmo[9] = classDB.get_method_bind("EditorNode3DGizmo\000", "clear\000", 3218959716)
		methodEditorNode3DGizmo[10] = classDB.get_method_bind("EditorNode3DGizmo\000", "set_hidden\000", 2586408642)
		methodEditorNode3DGizmo[11] = classDB.get_method_bind("EditorNode3DGizmo\000", "is_subgizmo_selected\000", 1116898809)
		methodEditorNode3DGizmo[12] = classDB.get_method_bind("EditorNode3DGizmo\000", "get_subgizmo_selection\000", 1930428628)
		methodEditorNode3DGizmoPlugin[0] = classDB.get_method_bind("EditorNode3DGizmoPlugin\000", "create_material\000", 3486012546)
		methodEditorNode3DGizmoPlugin[1] = classDB.get_method_bind("EditorNode3DGizmoPlugin\000", "create_icon_material\000", 2976007329)
		methodEditorNode3DGizmoPlugin[2] = classDB.get_method_bind("EditorNode3DGizmoPlugin\000", "create_handle_material\000", 2486475223)
		methodEditorNode3DGizmoPlugin[3] = classDB.get_method_bind("EditorNode3DGizmoPlugin\000", "add_material\000", 1374068695)
		methodEditorNode3DGizmoPlugin[4] = classDB.get_method_bind("EditorNode3DGizmoPlugin\000", "get_material\000", 3501703615)
		methodEditorPaths[0] = classDB.get_method_bind("EditorPaths\000", "get_data_dir\000", 201670096)
		methodEditorPaths[1] = classDB.get_method_bind("EditorPaths\000", "get_config_dir\000", 201670096)
		methodEditorPaths[2] = classDB.get_method_bind("EditorPaths\000", "get_cache_dir\000", 201670096)
		methodEditorPaths[3] = classDB.get_method_bind("EditorPaths\000", "is_self_contained\000", 36873697)
		methodEditorPaths[4] = classDB.get_method_bind("EditorPaths\000", "get_self_contained_file\000", 201670096)
		methodEditorPaths[5] = classDB.get_method_bind("EditorPaths\000", "get_project_settings_dir\000", 201670096)
		methodEditorPlugin[0] = classDB.get_method_bind("EditorPlugin\000", "add_control_to_container\000", 3092750152)
		methodEditorPlugin[1] = classDB.get_method_bind("EditorPlugin\000", "add_control_to_bottom_panel\000", 3526039376)
		methodEditorPlugin[2] = classDB.get_method_bind("EditorPlugin\000", "add_control_to_dock\000", 3354871258)
		methodEditorPlugin[3] = classDB.get_method_bind("EditorPlugin\000", "remove_control_from_docks\000", 1496901182)
		methodEditorPlugin[4] = classDB.get_method_bind("EditorPlugin\000", "remove_control_from_bottom_panel\000", 1496901182)
		methodEditorPlugin[5] = classDB.get_method_bind("EditorPlugin\000", "remove_control_from_container\000", 3092750152)
		methodEditorPlugin[6] = classDB.get_method_bind("EditorPlugin\000", "add_tool_menu_item\000", 2137474292)
		methodEditorPlugin[7] = classDB.get_method_bind("EditorPlugin\000", "add_tool_submenu_item\000", 1019428915)
		methodEditorPlugin[8] = classDB.get_method_bind("EditorPlugin\000", "remove_tool_menu_item\000", 83702148)
		methodEditorPlugin[9] = classDB.get_method_bind("EditorPlugin\000", "get_export_as_menu\000", 1775878644)
		methodEditorPlugin[10] = classDB.get_method_bind("EditorPlugin\000", "add_custom_type\000", 1986814599)
		methodEditorPlugin[11] = classDB.get_method_bind("EditorPlugin\000", "remove_custom_type\000", 83702148)
		methodEditorPlugin[12] = classDB.get_method_bind("EditorPlugin\000", "add_autoload_singleton\000", 3186203200)
		methodEditorPlugin[13] = classDB.get_method_bind("EditorPlugin\000", "remove_autoload_singleton\000", 83702148)
		methodEditorPlugin[14] = classDB.get_method_bind("EditorPlugin\000", "update_overlays\000", 3905245786)
		methodEditorPlugin[15] = classDB.get_method_bind("EditorPlugin\000", "make_bottom_panel_item_visible\000", 1496901182)
		methodEditorPlugin[16] = classDB.get_method_bind("EditorPlugin\000", "hide_bottom_panel\000", 3218959716)
		methodEditorPlugin[17] = classDB.get_method_bind("EditorPlugin\000", "get_undo_redo\000", 773492341)
		methodEditorPlugin[18] = classDB.get_method_bind("EditorPlugin\000", "add_undo_redo_inspector_hook_callback\000", 1611583062)
		methodEditorPlugin[19] = classDB.get_method_bind("EditorPlugin\000", "remove_undo_redo_inspector_hook_callback\000", 1611583062)
		methodEditorPlugin[20] = classDB.get_method_bind("EditorPlugin\000", "queue_save_layout\000", 3218959716)
		methodEditorPlugin[21] = classDB.get_method_bind("EditorPlugin\000", "add_translation_parser_plugin\000", 3116463128)
		methodEditorPlugin[22] = classDB.get_method_bind("EditorPlugin\000", "remove_translation_parser_plugin\000", 3116463128)
		methodEditorPlugin[23] = classDB.get_method_bind("EditorPlugin\000", "add_import_plugin\000", 3113975762)
		methodEditorPlugin[24] = classDB.get_method_bind("EditorPlugin\000", "remove_import_plugin\000", 2312482773)
		methodEditorPlugin[25] = classDB.get_method_bind("EditorPlugin\000", "add_scene_format_importer_plugin\000", 2764104752)
		methodEditorPlugin[26] = classDB.get_method_bind("EditorPlugin\000", "remove_scene_format_importer_plugin\000", 2637776123)
		methodEditorPlugin[27] = classDB.get_method_bind("EditorPlugin\000", "add_scene_post_import_plugin\000", 3492436322)
		methodEditorPlugin[28] = classDB.get_method_bind("EditorPlugin\000", "remove_scene_post_import_plugin\000", 3045178206)
		methodEditorPlugin[29] = classDB.get_method_bind("EditorPlugin\000", "add_export_plugin\000", 4095952207)
		methodEditorPlugin[30] = classDB.get_method_bind("EditorPlugin\000", "remove_export_plugin\000", 4095952207)
		methodEditorPlugin[31] = classDB.get_method_bind("EditorPlugin\000", "add_spatial_gizmo_plugin\000", 1541015022)
		methodEditorPlugin[32] = classDB.get_method_bind("EditorPlugin\000", "remove_spatial_gizmo_plugin\000", 1541015022)
		methodEditorPlugin[33] = classDB.get_method_bind("EditorPlugin\000", "add_inspector_plugin\000", 546395733)
		methodEditorPlugin[34] = classDB.get_method_bind("EditorPlugin\000", "remove_inspector_plugin\000", 546395733)
		methodEditorPlugin[35] = classDB.get_method_bind("EditorPlugin\000", "set_input_event_forwarding_always_enabled\000", 3218959716)
		methodEditorPlugin[36] = classDB.get_method_bind("EditorPlugin\000", "set_force_draw_over_forwarding_enabled\000", 3218959716)
		methodEditorPlugin[37] = classDB.get_method_bind("EditorPlugin\000", "get_editor_interface\000", 4223731786)
		methodEditorPlugin[38] = classDB.get_method_bind("EditorPlugin\000", "get_script_create_dialog\000", 3121871482)
		methodEditorPlugin[39] = classDB.get_method_bind("EditorPlugin\000", "add_debugger_plugin\000", 3657522847)
		methodEditorPlugin[40] = classDB.get_method_bind("EditorPlugin\000", "remove_debugger_plugin\000", 3657522847)
		methodEditorProperty[0] = classDB.get_method_bind("EditorProperty\000", "set_label\000", 83702148)
		methodEditorProperty[1] = classDB.get_method_bind("EditorProperty\000", "get_label\000", 201670096)
		methodEditorProperty[2] = classDB.get_method_bind("EditorProperty\000", "set_read_only\000", 2586408642)
		methodEditorProperty[3] = classDB.get_method_bind("EditorProperty\000", "is_read_only\000", 36873697)
		methodEditorProperty[4] = classDB.get_method_bind("EditorProperty\000", "set_checkable\000", 2586408642)
		methodEditorProperty[5] = classDB.get_method_bind("EditorProperty\000", "is_checkable\000", 36873697)
		methodEditorProperty[6] = classDB.get_method_bind("EditorProperty\000", "set_checked\000", 2586408642)
		methodEditorProperty[7] = classDB.get_method_bind("EditorProperty\000", "is_checked\000", 36873697)
		methodEditorProperty[8] = classDB.get_method_bind("EditorProperty\000", "set_draw_warning\000", 2586408642)
		methodEditorProperty[9] = classDB.get_method_bind("EditorProperty\000", "is_draw_warning\000", 36873697)
		methodEditorProperty[10] = classDB.get_method_bind("EditorProperty\000", "set_keying\000", 2586408642)
		methodEditorProperty[11] = classDB.get_method_bind("EditorProperty\000", "is_keying\000", 36873697)
		methodEditorProperty[12] = classDB.get_method_bind("EditorProperty\000", "set_deletable\000", 2586408642)
		methodEditorProperty[13] = classDB.get_method_bind("EditorProperty\000", "is_deletable\000", 36873697)
		methodEditorProperty[14] = classDB.get_method_bind("EditorProperty\000", "get_edited_property\000", 2002593661)
		methodEditorProperty[15] = classDB.get_method_bind("EditorProperty\000", "get_edited_object\000", 2050059866)
		methodEditorProperty[16] = classDB.get_method_bind("EditorProperty\000", "update_property\000", 3218959716)
		methodEditorProperty[17] = classDB.get_method_bind("EditorProperty\000", "add_focusable\000", 1496901182)
		methodEditorProperty[18] = classDB.get_method_bind("EditorProperty\000", "set_bottom_editor\000", 1496901182)
		methodEditorProperty[19] = classDB.get_method_bind("EditorProperty\000", "emit_changed\000", 3069422438)
		methodEditorResourcePicker[0] = classDB.get_method_bind("EditorResourcePicker\000", "set_base_type\000", 83702148)
		methodEditorResourcePicker[1] = classDB.get_method_bind("EditorResourcePicker\000", "get_base_type\000", 201670096)
		methodEditorResourcePicker[2] = classDB.get_method_bind("EditorResourcePicker\000", "get_allowed_types\000", 1139954409)
		methodEditorResourcePicker[3] = classDB.get_method_bind("EditorResourcePicker\000", "set_edited_resource\000", 968641751)
		methodEditorResourcePicker[4] = classDB.get_method_bind("EditorResourcePicker\000", "get_edited_resource\000", 2674603643)
		methodEditorResourcePicker[5] = classDB.get_method_bind("EditorResourcePicker\000", "set_toggle_mode\000", 2586408642)
		methodEditorResourcePicker[6] = classDB.get_method_bind("EditorResourcePicker\000", "is_toggle_mode\000", 36873697)
		methodEditorResourcePicker[7] = classDB.get_method_bind("EditorResourcePicker\000", "set_toggle_pressed\000", 2586408642)
		methodEditorResourcePicker[8] = classDB.get_method_bind("EditorResourcePicker\000", "set_editable\000", 2586408642)
		methodEditorResourcePicker[9] = classDB.get_method_bind("EditorResourcePicker\000", "is_editable\000", 36873697)
		methodEditorResourcePreview[0] = classDB.get_method_bind("EditorResourcePreview\000", "queue_resource_preview\000", 233177534)
		methodEditorResourcePreview[1] = classDB.get_method_bind("EditorResourcePreview\000", "queue_edited_resource_preview\000", 1608376650)
		methodEditorResourcePreview[2] = classDB.get_method_bind("EditorResourcePreview\000", "add_preview_generator\000", 332288124)
		methodEditorResourcePreview[3] = classDB.get_method_bind("EditorResourcePreview\000", "remove_preview_generator\000", 332288124)
		methodEditorResourcePreview[4] = classDB.get_method_bind("EditorResourcePreview\000", "check_for_invalidation\000", 83702148)
		methodEditorScenePostImport[0] = classDB.get_method_bind("EditorScenePostImport\000", "get_source_file\000", 201670096)
		methodEditorScenePostImportPlugin[0] = classDB.get_method_bind("EditorScenePostImportPlugin\000", "get_option_value\000", 2760726917)
		methodEditorScenePostImportPlugin[1] = classDB.get_method_bind("EditorScenePostImportPlugin\000", "add_import_option\000", 402577236)
		methodEditorScenePostImportPlugin[2] = classDB.get_method_bind("EditorScenePostImportPlugin\000", "add_import_option_advanced\000", 3774155785)
		methodEditorScript[0] = classDB.get_method_bind("EditorScript\000", "add_root_node\000", 1078189570)
		methodEditorScript[1] = classDB.get_method_bind("EditorScript\000", "get_scene\000", 1818953479)
		methodEditorScript[2] = classDB.get_method_bind("EditorScript\000", "get_editor_interface\000", 4223731786)
		methodEditorScriptPicker[0] = classDB.get_method_bind("EditorScriptPicker\000", "set_script_owner\000", 1078189570)
		methodEditorScriptPicker[1] = classDB.get_method_bind("EditorScriptPicker\000", "get_script_owner\000", 3160264692)
		methodEditorSelection[0] = classDB.get_method_bind("EditorSelection\000", "clear\000", 3218959716)
		methodEditorSelection[1] = classDB.get_method_bind("EditorSelection\000", "add_node\000", 1078189570)
		methodEditorSelection[2] = classDB.get_method_bind("EditorSelection\000", "remove_node\000", 1078189570)
		methodEditorSelection[3] = classDB.get_method_bind("EditorSelection\000", "get_selected_nodes\000", 2915620761)
		methodEditorSelection[4] = classDB.get_method_bind("EditorSelection\000", "get_transformable_selected_nodes\000", 2915620761)
		methodEditorSettings[0] = classDB.get_method_bind("EditorSettings\000", "has_setting\000", 3927539163)
		methodEditorSettings[1] = classDB.get_method_bind("EditorSettings\000", "set_setting\000", 402577236)
		methodEditorSettings[2] = classDB.get_method_bind("EditorSettings\000", "get_setting\000", 1868160156)
		methodEditorSettings[3] = classDB.get_method_bind("EditorSettings\000", "erase\000", 83702148)
		methodEditorSettings[4] = classDB.get_method_bind("EditorSettings\000", "set_initial_value\000", 1529169264)
		methodEditorSettings[5] = classDB.get_method_bind("EditorSettings\000", "add_property_info\000", 4155329257)
		methodEditorSettings[6] = classDB.get_method_bind("EditorSettings\000", "set_project_metadata\000", 2504492430)
		methodEditorSettings[7] = classDB.get_method_bind("EditorSettings\000", "get_project_metadata\000", 89809366)
		methodEditorSettings[8] = classDB.get_method_bind("EditorSettings\000", "set_favorites\000", 4015028928)
		methodEditorSettings[9] = classDB.get_method_bind("EditorSettings\000", "get_favorites\000", 1139954409)
		methodEditorSettings[10] = classDB.get_method_bind("EditorSettings\000", "set_recent_dirs\000", 4015028928)
		methodEditorSettings[11] = classDB.get_method_bind("EditorSettings\000", "get_recent_dirs\000", 1139954409)
		methodEditorSettings[12] = classDB.get_method_bind("EditorSettings\000", "set_builtin_action_override\000", 1209351045)
		methodEditorSettings[13] = classDB.get_method_bind("EditorSettings\000", "check_changed_settings_in_group\000", 3927539163)
		methodEditorSettings[14] = classDB.get_method_bind("EditorSettings\000", "get_changed_settings\000", 1139954409)
		methodEditorSettings[15] = classDB.get_method_bind("EditorSettings\000", "mark_setting_changed\000", 83702148)
		methodEditorSpinSlider[0] = classDB.get_method_bind("EditorSpinSlider\000", "set_label\000", 83702148)
		methodEditorSpinSlider[1] = classDB.get_method_bind("EditorSpinSlider\000", "get_label\000", 201670096)
		methodEditorSpinSlider[2] = classDB.get_method_bind("EditorSpinSlider\000", "set_suffix\000", 83702148)
		methodEditorSpinSlider[3] = classDB.get_method_bind("EditorSpinSlider\000", "get_suffix\000", 201670096)
		methodEditorSpinSlider[4] = classDB.get_method_bind("EditorSpinSlider\000", "set_read_only\000", 2586408642)
		methodEditorSpinSlider[5] = classDB.get_method_bind("EditorSpinSlider\000", "is_read_only\000", 36873697)
		methodEditorSpinSlider[6] = classDB.get_method_bind("EditorSpinSlider\000", "set_flat\000", 2586408642)
		methodEditorSpinSlider[7] = classDB.get_method_bind("EditorSpinSlider\000", "is_flat\000", 36873697)
		methodEditorSpinSlider[8] = classDB.get_method_bind("EditorSpinSlider\000", "set_hide_slider\000", 2586408642)
		methodEditorSpinSlider[9] = classDB.get_method_bind("EditorSpinSlider\000", "is_hiding_slider\000", 36873697)
		methodEditorUndoRedoManager[0] = classDB.get_method_bind("EditorUndoRedoManager\000", "create_action\000", 3766330317)
		methodEditorUndoRedoManager[1] = classDB.get_method_bind("EditorUndoRedoManager\000", "commit_action\000", 3216645846)
		methodEditorUndoRedoManager[2] = classDB.get_method_bind("EditorUndoRedoManager\000", "is_committing_action\000", 36873697)
		methodEditorUndoRedoManager[3] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_do_method\000", 1517810467)
		methodEditorUndoRedoManager[4] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_undo_method\000", 1517810467)
		methodEditorUndoRedoManager[5] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_do_property\000", 1017172818)
		methodEditorUndoRedoManager[6] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_undo_property\000", 1017172818)
		methodEditorUndoRedoManager[7] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_do_reference\000", 3975164845)
		methodEditorUndoRedoManager[8] = classDB.get_method_bind("EditorUndoRedoManager\000", "add_undo_reference\000", 3975164845)
		methodEditorUndoRedoManager[9] = classDB.get_method_bind("EditorUndoRedoManager\000", "get_object_history_id\000", 1107568780)
		methodEditorUndoRedoManager[10] = classDB.get_method_bind("EditorUndoRedoManager\000", "get_history_undo_redo\000", 2417974513)
		methodEditorVCSInterface[0] = classDB.get_method_bind("EditorVCSInterface\000", "is_addon_ready\000", 2240911060)
		methodEditorVCSInterface[1] = classDB.get_method_bind("EditorVCSInterface\000", "initialize\000", 2323990056)
		methodEditorVCSInterface[2] = classDB.get_method_bind("EditorVCSInterface\000", "is_vcs_initialized\000", 2240911060)
		methodEditorVCSInterface[3] = classDB.get_method_bind("EditorVCSInterface\000", "get_modified_files_data\000", 2382534195)
		methodEditorVCSInterface[4] = classDB.get_method_bind("EditorVCSInterface\000", "stage_file\000", 83702148)
		methodEditorVCSInterface[5] = classDB.get_method_bind("EditorVCSInterface\000", "unstage_file\000", 83702148)
		methodEditorVCSInterface[6] = classDB.get_method_bind("EditorVCSInterface\000", "commit\000", 83702148)
		methodEditorVCSInterface[7] = classDB.get_method_bind("EditorVCSInterface\000", "get_file_diff\000", 1576865988)
		methodEditorVCSInterface[8] = classDB.get_method_bind("EditorVCSInterface\000", "shut_down\000", 2240911060)
		methodEditorVCSInterface[9] = classDB.get_method_bind("EditorVCSInterface\000", "get_project_name\000", 2841200299)
		methodEditorVCSInterface[10] = classDB.get_method_bind("EditorVCSInterface\000", "get_vcs_name\000", 2841200299)
		methodEncodedObjectAsID[0] = classDB.get_method_bind("EncodedObjectAsID\000", "set_object_id\000", 1286410249)
		methodEncodedObjectAsID[1] = classDB.get_method_bind("EncodedObjectAsID\000", "get_object_id\000", 3905245786)
		methodEngineSingleton[0] = classDB.get_method_bind("Engine\000", "set_physics_ticks_per_second\000", 1286410249)
		methodEngineSingleton[1] = classDB.get_method_bind("Engine\000", "get_physics_ticks_per_second\000", 3905245786)
		methodEngineSingleton[2] = classDB.get_method_bind("Engine\000", "set_physics_jitter_fix\000", 373806689)
		methodEngineSingleton[3] = classDB.get_method_bind("Engine\000", "get_physics_jitter_fix\000", 1740695150)
		methodEngineSingleton[4] = classDB.get_method_bind("Engine\000", "get_physics_interpolation_fraction\000", 1740695150)
		methodEngineSingleton[5] = classDB.get_method_bind("Engine\000", "set_target_fps\000", 1286410249)
		methodEngineSingleton[6] = classDB.get_method_bind("Engine\000", "get_target_fps\000", 3905245786)
		methodEngineSingleton[7] = classDB.get_method_bind("Engine\000", "set_time_scale\000", 373806689)
		methodEngineSingleton[8] = classDB.get_method_bind("Engine\000", "get_time_scale\000", 191475506)
		methodEngineSingleton[9] = classDB.get_method_bind("Engine\000", "get_frames_drawn\000", 2455072627)
		methodEngineSingleton[10] = classDB.get_method_bind("Engine\000", "get_frames_per_second\000", 1740695150)
		methodEngineSingleton[11] = classDB.get_method_bind("Engine\000", "get_physics_frames\000", 3905245786)
		methodEngineSingleton[12] = classDB.get_method_bind("Engine\000", "get_process_frames\000", 3905245786)
		methodEngineSingleton[13] = classDB.get_method_bind("Engine\000", "get_main_loop\000", 1016888095)
		methodEngineSingleton[14] = classDB.get_method_bind("Engine\000", "get_version_info\000", 3102165223)
		methodEngineSingleton[15] = classDB.get_method_bind("Engine\000", "get_author_info\000", 3102165223)
		methodEngineSingleton[16] = classDB.get_method_bind("Engine\000", "get_copyright_info\000", 3995934104)
		methodEngineSingleton[17] = classDB.get_method_bind("Engine\000", "get_donor_info\000", 3102165223)
		methodEngineSingleton[18] = classDB.get_method_bind("Engine\000", "get_license_info\000", 3102165223)
		methodEngineSingleton[19] = classDB.get_method_bind("Engine\000", "get_license_text\000", 201670096)
		methodEngineSingleton[20] = classDB.get_method_bind("Engine\000", "get_architecture_name\000", 201670096)
		methodEngineSingleton[21] = classDB.get_method_bind("Engine\000", "is_in_physics_frame\000", 36873697)
		methodEngineSingleton[22] = classDB.get_method_bind("Engine\000", "has_singleton\000", 2619796661)
		methodEngineSingleton[23] = classDB.get_method_bind("Engine\000", "get_singleton\000", 1371597918)
		methodEngineSingleton[24] = classDB.get_method_bind("Engine\000", "register_singleton\000", 965313290)
		methodEngineSingleton[25] = classDB.get_method_bind("Engine\000", "unregister_singleton\000", 3304788590)
		methodEngineSingleton[26] = classDB.get_method_bind("Engine\000", "get_singleton_list\000", 1139954409)
		methodEngineSingleton[27] = classDB.get_method_bind("Engine\000", "register_script_language\000", 1327703655)
		methodEngineSingleton[28] = classDB.get_method_bind("Engine\000", "get_script_language_count\000", 2455072627)
		methodEngineSingleton[29] = classDB.get_method_bind("Engine\000", "get_script_language\000", 2151255799)
		methodEngineSingleton[30] = classDB.get_method_bind("Engine\000", "is_editor_hint\000", 36873697)
		methodEngineSingleton[31] = classDB.get_method_bind("Engine\000", "get_write_movie_path\000", 201670096)
		methodEngineSingleton[32] = classDB.get_method_bind("Engine\000", "set_print_error_messages\000", 2586408642)
		methodEngineSingleton[33] = classDB.get_method_bind("Engine\000", "is_printing_error_messages\000", 36873697)
		methodEngineDebuggerSingleton[0] = classDB.get_method_bind("EngineDebugger\000", "is_active\000", 2240911060)
		methodEngineDebuggerSingleton[1] = classDB.get_method_bind("EngineDebugger\000", "register_profiler\000", 3651669560)
		methodEngineDebuggerSingleton[2] = classDB.get_method_bind("EngineDebugger\000", "unregister_profiler\000", 3304788590)
		methodEngineDebuggerSingleton[3] = classDB.get_method_bind("EngineDebugger\000", "is_profiling\000", 2041966384)
		methodEngineDebuggerSingleton[4] = classDB.get_method_bind("EngineDebugger\000", "has_profiler\000", 2041966384)
		methodEngineDebuggerSingleton[5] = classDB.get_method_bind("EngineDebugger\000", "profiler_add_frame_data\000", 1895267858)
		methodEngineDebuggerSingleton[6] = classDB.get_method_bind("EngineDebugger\000", "profiler_enable\000", 438160728)
		methodEngineDebuggerSingleton[7] = classDB.get_method_bind("EngineDebugger\000", "register_message_capture\000", 1874754934)
		methodEngineDebuggerSingleton[8] = classDB.get_method_bind("EngineDebugger\000", "unregister_message_capture\000", 3304788590)
		methodEngineDebuggerSingleton[9] = classDB.get_method_bind("EngineDebugger\000", "has_capture\000", 2041966384)
		methodEngineDebuggerSingleton[10] = classDB.get_method_bind("EngineDebugger\000", "send_message\000", 1209351045)
		methodEnvironment[0] = classDB.get_method_bind("Environment\000", "set_background\000", 4071623990)
		methodEnvironment[1] = classDB.get_method_bind("Environment\000", "get_background\000", 1843210413)
		methodEnvironment[2] = classDB.get_method_bind("Environment\000", "set_sky\000", 3336722921)
		methodEnvironment[3] = classDB.get_method_bind("Environment\000", "get_sky\000", 1177136966)
		methodEnvironment[4] = classDB.get_method_bind("Environment\000", "set_sky_custom_fov\000", 373806689)
		methodEnvironment[5] = classDB.get_method_bind("Environment\000", "get_sky_custom_fov\000", 1740695150)
		methodEnvironment[6] = classDB.get_method_bind("Environment\000", "set_sky_rotation\000", 3460891852)
		methodEnvironment[7] = classDB.get_method_bind("Environment\000", "get_sky_rotation\000", 3360562783)
		methodEnvironment[8] = classDB.get_method_bind("Environment\000", "set_bg_color\000", 2920490490)
		methodEnvironment[9] = classDB.get_method_bind("Environment\000", "get_bg_color\000", 3444240500)
		methodEnvironment[10] = classDB.get_method_bind("Environment\000", "set_bg_energy\000", 373806689)
		methodEnvironment[11] = classDB.get_method_bind("Environment\000", "get_bg_energy\000", 1740695150)
		methodEnvironment[12] = classDB.get_method_bind("Environment\000", "set_canvas_max_layer\000", 1286410249)
		methodEnvironment[13] = classDB.get_method_bind("Environment\000", "get_canvas_max_layer\000", 3905245786)
		methodEnvironment[14] = classDB.get_method_bind("Environment\000", "set_camera_feed_id\000", 1286410249)
		methodEnvironment[15] = classDB.get_method_bind("Environment\000", "get_camera_feed_id\000", 3905245786)
		methodEnvironment[16] = classDB.get_method_bind("Environment\000", "set_ambient_light_color\000", 2920490490)
		methodEnvironment[17] = classDB.get_method_bind("Environment\000", "get_ambient_light_color\000", 3444240500)
		methodEnvironment[18] = classDB.get_method_bind("Environment\000", "set_ambient_source\000", 2607780160)
		methodEnvironment[19] = classDB.get_method_bind("Environment\000", "get_ambient_source\000", 67453933)
		methodEnvironment[20] = classDB.get_method_bind("Environment\000", "set_ambient_light_energy\000", 373806689)
		methodEnvironment[21] = classDB.get_method_bind("Environment\000", "get_ambient_light_energy\000", 1740695150)
		methodEnvironment[22] = classDB.get_method_bind("Environment\000", "set_ambient_light_sky_contribution\000", 373806689)
		methodEnvironment[23] = classDB.get_method_bind("Environment\000", "get_ambient_light_sky_contribution\000", 1740695150)
		methodEnvironment[24] = classDB.get_method_bind("Environment\000", "set_reflection_source\000", 299673197)
		methodEnvironment[25] = classDB.get_method_bind("Environment\000", "get_reflection_source\000", 777700713)
		methodEnvironment[26] = classDB.get_method_bind("Environment\000", "set_tonemapper\000", 1509116664)
		methodEnvironment[27] = classDB.get_method_bind("Environment\000", "get_tonemapper\000", 2908408137)
		methodEnvironment[28] = classDB.get_method_bind("Environment\000", "set_tonemap_exposure\000", 373806689)
		methodEnvironment[29] = classDB.get_method_bind("Environment\000", "get_tonemap_exposure\000", 1740695150)
		methodEnvironment[30] = classDB.get_method_bind("Environment\000", "set_tonemap_white\000", 373806689)
		methodEnvironment[31] = classDB.get_method_bind("Environment\000", "get_tonemap_white\000", 1740695150)
		methodEnvironment[32] = classDB.get_method_bind("Environment\000", "set_tonemap_auto_exposure_enabled\000", 2586408642)
		methodEnvironment[33] = classDB.get_method_bind("Environment\000", "is_tonemap_auto_exposure_enabled\000", 36873697)
		methodEnvironment[34] = classDB.get_method_bind("Environment\000", "set_tonemap_auto_exposure_max\000", 373806689)
		methodEnvironment[35] = classDB.get_method_bind("Environment\000", "get_tonemap_auto_exposure_max\000", 1740695150)
		methodEnvironment[36] = classDB.get_method_bind("Environment\000", "set_tonemap_auto_exposure_min\000", 373806689)
		methodEnvironment[37] = classDB.get_method_bind("Environment\000", "get_tonemap_auto_exposure_min\000", 1740695150)
		methodEnvironment[38] = classDB.get_method_bind("Environment\000", "set_tonemap_auto_exposure_speed\000", 373806689)
		methodEnvironment[39] = classDB.get_method_bind("Environment\000", "get_tonemap_auto_exposure_speed\000", 1740695150)
		methodEnvironment[40] = classDB.get_method_bind("Environment\000", "set_tonemap_auto_exposure_grey\000", 373806689)
		methodEnvironment[41] = classDB.get_method_bind("Environment\000", "get_tonemap_auto_exposure_grey\000", 1740695150)
		methodEnvironment[42] = classDB.get_method_bind("Environment\000", "set_ssr_enabled\000", 2586408642)
		methodEnvironment[43] = classDB.get_method_bind("Environment\000", "is_ssr_enabled\000", 36873697)
		methodEnvironment[44] = classDB.get_method_bind("Environment\000", "set_ssr_max_steps\000", 1286410249)
		methodEnvironment[45] = classDB.get_method_bind("Environment\000", "get_ssr_max_steps\000", 3905245786)
		methodEnvironment[46] = classDB.get_method_bind("Environment\000", "set_ssr_fade_in\000", 373806689)
		methodEnvironment[47] = classDB.get_method_bind("Environment\000", "get_ssr_fade_in\000", 1740695150)
		methodEnvironment[48] = classDB.get_method_bind("Environment\000", "set_ssr_fade_out\000", 373806689)
		methodEnvironment[49] = classDB.get_method_bind("Environment\000", "get_ssr_fade_out\000", 1740695150)
		methodEnvironment[50] = classDB.get_method_bind("Environment\000", "set_ssr_depth_tolerance\000", 373806689)
		methodEnvironment[51] = classDB.get_method_bind("Environment\000", "get_ssr_depth_tolerance\000", 1740695150)
		methodEnvironment[52] = classDB.get_method_bind("Environment\000", "set_ssao_enabled\000", 2586408642)
		methodEnvironment[53] = classDB.get_method_bind("Environment\000", "is_ssao_enabled\000", 36873697)
		methodEnvironment[54] = classDB.get_method_bind("Environment\000", "set_ssao_radius\000", 373806689)
		methodEnvironment[55] = classDB.get_method_bind("Environment\000", "get_ssao_radius\000", 1740695150)
		methodEnvironment[56] = classDB.get_method_bind("Environment\000", "set_ssao_intensity\000", 373806689)
		methodEnvironment[57] = classDB.get_method_bind("Environment\000", "get_ssao_intensity\000", 1740695150)
		methodEnvironment[58] = classDB.get_method_bind("Environment\000", "set_ssao_power\000", 373806689)
		methodEnvironment[59] = classDB.get_method_bind("Environment\000", "get_ssao_power\000", 1740695150)
		methodEnvironment[60] = classDB.get_method_bind("Environment\000", "set_ssao_detail\000", 373806689)
		methodEnvironment[61] = classDB.get_method_bind("Environment\000", "get_ssao_detail\000", 1740695150)
		methodEnvironment[62] = classDB.get_method_bind("Environment\000", "set_ssao_horizon\000", 373806689)
		methodEnvironment[63] = classDB.get_method_bind("Environment\000", "get_ssao_horizon\000", 1740695150)
		methodEnvironment[64] = classDB.get_method_bind("Environment\000", "set_ssao_sharpness\000", 373806689)
		methodEnvironment[65] = classDB.get_method_bind("Environment\000", "get_ssao_sharpness\000", 1740695150)
		methodEnvironment[66] = classDB.get_method_bind("Environment\000", "set_ssao_direct_light_affect\000", 373806689)
		methodEnvironment[67] = classDB.get_method_bind("Environment\000", "get_ssao_direct_light_affect\000", 1740695150)
		methodEnvironment[68] = classDB.get_method_bind("Environment\000", "set_ssao_ao_channel_affect\000", 373806689)
		methodEnvironment[69] = classDB.get_method_bind("Environment\000", "get_ssao_ao_channel_affect\000", 1740695150)
		methodEnvironment[70] = classDB.get_method_bind("Environment\000", "set_ssil_enabled\000", 2586408642)
		methodEnvironment[71] = classDB.get_method_bind("Environment\000", "is_ssil_enabled\000", 36873697)
		methodEnvironment[72] = classDB.get_method_bind("Environment\000", "set_ssil_radius\000", 373806689)
		methodEnvironment[73] = classDB.get_method_bind("Environment\000", "get_ssil_radius\000", 1740695150)
		methodEnvironment[74] = classDB.get_method_bind("Environment\000", "set_ssil_intensity\000", 373806689)
		methodEnvironment[75] = classDB.get_method_bind("Environment\000", "get_ssil_intensity\000", 1740695150)
		methodEnvironment[76] = classDB.get_method_bind("Environment\000", "set_ssil_sharpness\000", 373806689)
		methodEnvironment[77] = classDB.get_method_bind("Environment\000", "get_ssil_sharpness\000", 1740695150)
		methodEnvironment[78] = classDB.get_method_bind("Environment\000", "set_ssil_normal_rejection\000", 373806689)
		methodEnvironment[79] = classDB.get_method_bind("Environment\000", "get_ssil_normal_rejection\000", 1740695150)
		methodEnvironment[80] = classDB.get_method_bind("Environment\000", "set_sdfgi_enabled\000", 2586408642)
		methodEnvironment[81] = classDB.get_method_bind("Environment\000", "is_sdfgi_enabled\000", 36873697)
		methodEnvironment[82] = classDB.get_method_bind("Environment\000", "set_sdfgi_cascades\000", 1286410249)
		methodEnvironment[83] = classDB.get_method_bind("Environment\000", "get_sdfgi_cascades\000", 3905245786)
		methodEnvironment[84] = classDB.get_method_bind("Environment\000", "set_sdfgi_min_cell_size\000", 373806689)
		methodEnvironment[85] = classDB.get_method_bind("Environment\000", "get_sdfgi_min_cell_size\000", 1740695150)
		methodEnvironment[86] = classDB.get_method_bind("Environment\000", "set_sdfgi_max_distance\000", 373806689)
		methodEnvironment[87] = classDB.get_method_bind("Environment\000", "get_sdfgi_max_distance\000", 1740695150)
		methodEnvironment[88] = classDB.get_method_bind("Environment\000", "set_sdfgi_cascade0_distance\000", 373806689)
		methodEnvironment[89] = classDB.get_method_bind("Environment\000", "get_sdfgi_cascade0_distance\000", 1740695150)
		methodEnvironment[90] = classDB.get_method_bind("Environment\000", "set_sdfgi_y_scale\000", 3608608372)
		methodEnvironment[91] = classDB.get_method_bind("Environment\000", "get_sdfgi_y_scale\000", 2568002245)
		methodEnvironment[92] = classDB.get_method_bind("Environment\000", "set_sdfgi_use_occlusion\000", 2586408642)
		methodEnvironment[93] = classDB.get_method_bind("Environment\000", "is_sdfgi_using_occlusion\000", 36873697)
		methodEnvironment[94] = classDB.get_method_bind("Environment\000", "set_sdfgi_bounce_feedback\000", 373806689)
		methodEnvironment[95] = classDB.get_method_bind("Environment\000", "get_sdfgi_bounce_feedback\000", 1740695150)
		methodEnvironment[96] = classDB.get_method_bind("Environment\000", "set_sdfgi_read_sky_light\000", 2586408642)
		methodEnvironment[97] = classDB.get_method_bind("Environment\000", "is_sdfgi_reading_sky_light\000", 36873697)
		methodEnvironment[98] = classDB.get_method_bind("Environment\000", "set_sdfgi_energy\000", 373806689)
		methodEnvironment[99] = classDB.get_method_bind("Environment\000", "get_sdfgi_energy\000", 1740695150)
		methodEnvironment[100] = classDB.get_method_bind("Environment\000", "set_sdfgi_normal_bias\000", 373806689)
		methodEnvironment[101] = classDB.get_method_bind("Environment\000", "get_sdfgi_normal_bias\000", 1740695150)
		methodEnvironment[102] = classDB.get_method_bind("Environment\000", "set_sdfgi_probe_bias\000", 373806689)
		methodEnvironment[103] = classDB.get_method_bind("Environment\000", "get_sdfgi_probe_bias\000", 1740695150)
		methodEnvironment[104] = classDB.get_method_bind("Environment\000", "set_glow_enabled\000", 2586408642)
		methodEnvironment[105] = classDB.get_method_bind("Environment\000", "is_glow_enabled\000", 36873697)
		methodEnvironment[106] = classDB.get_method_bind("Environment\000", "set_glow_level\000", 1602489585)
		methodEnvironment[107] = classDB.get_method_bind("Environment\000", "get_glow_level\000", 2339986948)
		methodEnvironment[108] = classDB.get_method_bind("Environment\000", "set_glow_normalized\000", 2586408642)
		methodEnvironment[109] = classDB.get_method_bind("Environment\000", "is_glow_normalized\000", 36873697)
		methodEnvironment[110] = classDB.get_method_bind("Environment\000", "set_glow_intensity\000", 373806689)
		methodEnvironment[111] = classDB.get_method_bind("Environment\000", "get_glow_intensity\000", 1740695150)
		methodEnvironment[112] = classDB.get_method_bind("Environment\000", "set_glow_strength\000", 373806689)
		methodEnvironment[113] = classDB.get_method_bind("Environment\000", "get_glow_strength\000", 1740695150)
		methodEnvironment[114] = classDB.get_method_bind("Environment\000", "set_glow_mix\000", 373806689)
		methodEnvironment[115] = classDB.get_method_bind("Environment\000", "get_glow_mix\000", 1740695150)
		methodEnvironment[116] = classDB.get_method_bind("Environment\000", "set_glow_bloom\000", 373806689)
		methodEnvironment[117] = classDB.get_method_bind("Environment\000", "get_glow_bloom\000", 1740695150)
		methodEnvironment[118] = classDB.get_method_bind("Environment\000", "set_glow_blend_mode\000", 2561587761)
		methodEnvironment[119] = classDB.get_method_bind("Environment\000", "get_glow_blend_mode\000", 1529667332)
		methodEnvironment[120] = classDB.get_method_bind("Environment\000", "set_glow_hdr_bleed_threshold\000", 373806689)
		methodEnvironment[121] = classDB.get_method_bind("Environment\000", "get_glow_hdr_bleed_threshold\000", 1740695150)
		methodEnvironment[122] = classDB.get_method_bind("Environment\000", "set_glow_hdr_bleed_scale\000", 373806689)
		methodEnvironment[123] = classDB.get_method_bind("Environment\000", "get_glow_hdr_bleed_scale\000", 1740695150)
		methodEnvironment[124] = classDB.get_method_bind("Environment\000", "set_glow_hdr_luminance_cap\000", 373806689)
		methodEnvironment[125] = classDB.get_method_bind("Environment\000", "get_glow_hdr_luminance_cap\000", 1740695150)
		methodEnvironment[126] = classDB.get_method_bind("Environment\000", "set_glow_map_strength\000", 373806689)
		methodEnvironment[127] = classDB.get_method_bind("Environment\000", "get_glow_map_strength\000", 1740695150)
		methodEnvironment[128] = classDB.get_method_bind("Environment\000", "set_glow_map\000", 1790811099)
		methodEnvironment[129] = classDB.get_method_bind("Environment\000", "get_glow_map\000", 4037048985)
		methodEnvironment[130] = classDB.get_method_bind("Environment\000", "set_fog_enabled\000", 2586408642)
		methodEnvironment[131] = classDB.get_method_bind("Environment\000", "is_fog_enabled\000", 36873697)
		methodEnvironment[132] = classDB.get_method_bind("Environment\000", "set_fog_light_color\000", 2920490490)
		methodEnvironment[133] = classDB.get_method_bind("Environment\000", "get_fog_light_color\000", 3444240500)
		methodEnvironment[134] = classDB.get_method_bind("Environment\000", "set_fog_light_energy\000", 373806689)
		methodEnvironment[135] = classDB.get_method_bind("Environment\000", "get_fog_light_energy\000", 1740695150)
		methodEnvironment[136] = classDB.get_method_bind("Environment\000", "set_fog_sun_scatter\000", 373806689)
		methodEnvironment[137] = classDB.get_method_bind("Environment\000", "get_fog_sun_scatter\000", 1740695150)
		methodEnvironment[138] = classDB.get_method_bind("Environment\000", "set_fog_density\000", 373806689)
		methodEnvironment[139] = classDB.get_method_bind("Environment\000", "get_fog_density\000", 1740695150)
		methodEnvironment[140] = classDB.get_method_bind("Environment\000", "set_fog_height\000", 373806689)
		methodEnvironment[141] = classDB.get_method_bind("Environment\000", "get_fog_height\000", 1740695150)
		methodEnvironment[142] = classDB.get_method_bind("Environment\000", "set_fog_height_density\000", 373806689)
		methodEnvironment[143] = classDB.get_method_bind("Environment\000", "get_fog_height_density\000", 1740695150)
		methodEnvironment[144] = classDB.get_method_bind("Environment\000", "set_fog_aerial_perspective\000", 373806689)
		methodEnvironment[145] = classDB.get_method_bind("Environment\000", "get_fog_aerial_perspective\000", 1740695150)
		methodEnvironment[146] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_enabled\000", 2586408642)
		methodEnvironment[147] = classDB.get_method_bind("Environment\000", "is_volumetric_fog_enabled\000", 36873697)
		methodEnvironment[148] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_emission\000", 2920490490)
		methodEnvironment[149] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_emission\000", 3444240500)
		methodEnvironment[150] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_albedo\000", 2920490490)
		methodEnvironment[151] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_albedo\000", 3444240500)
		methodEnvironment[152] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_density\000", 373806689)
		methodEnvironment[153] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_density\000", 1740695150)
		methodEnvironment[154] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_emission_energy\000", 373806689)
		methodEnvironment[155] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_emission_energy\000", 1740695150)
		methodEnvironment[156] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_anisotropy\000", 373806689)
		methodEnvironment[157] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_anisotropy\000", 1740695150)
		methodEnvironment[158] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_length\000", 373806689)
		methodEnvironment[159] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_length\000", 1740695150)
		methodEnvironment[160] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_detail_spread\000", 373806689)
		methodEnvironment[161] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_detail_spread\000", 1740695150)
		methodEnvironment[162] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_gi_inject\000", 373806689)
		methodEnvironment[163] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_gi_inject\000", 1740695150)
		methodEnvironment[164] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_ambient_inject\000", 373806689)
		methodEnvironment[165] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_ambient_inject\000", 1740695150)
		methodEnvironment[166] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_temporal_reprojection_enabled\000", 2586408642)
		methodEnvironment[167] = classDB.get_method_bind("Environment\000", "is_volumetric_fog_temporal_reprojection_enabled\000", 36873697)
		methodEnvironment[168] = classDB.get_method_bind("Environment\000", "set_volumetric_fog_temporal_reprojection_amount\000", 373806689)
		methodEnvironment[169] = classDB.get_method_bind("Environment\000", "get_volumetric_fog_temporal_reprojection_amount\000", 1740695150)
		methodEnvironment[170] = classDB.get_method_bind("Environment\000", "set_adjustment_enabled\000", 2586408642)
		methodEnvironment[171] = classDB.get_method_bind("Environment\000", "is_adjustment_enabled\000", 36873697)
		methodEnvironment[172] = classDB.get_method_bind("Environment\000", "set_adjustment_brightness\000", 373806689)
		methodEnvironment[173] = classDB.get_method_bind("Environment\000", "get_adjustment_brightness\000", 1740695150)
		methodEnvironment[174] = classDB.get_method_bind("Environment\000", "set_adjustment_contrast\000", 373806689)
		methodEnvironment[175] = classDB.get_method_bind("Environment\000", "get_adjustment_contrast\000", 1740695150)
		methodEnvironment[176] = classDB.get_method_bind("Environment\000", "set_adjustment_saturation\000", 373806689)
		methodEnvironment[177] = classDB.get_method_bind("Environment\000", "get_adjustment_saturation\000", 1740695150)
		methodEnvironment[178] = classDB.get_method_bind("Environment\000", "set_adjustment_color_correction\000", 1790811099)
		methodEnvironment[179] = classDB.get_method_bind("Environment\000", "get_adjustment_color_correction\000", 4037048985)
		methodExpression[0] = classDB.get_method_bind("Expression\000", "parse\000", 3658149758)
		methodExpression[1] = classDB.get_method_bind("Expression\000", "execute\000", 3712471238)
		methodExpression[2] = classDB.get_method_bind("Expression\000", "has_execute_failed\000", 36873697)
		methodExpression[3] = classDB.get_method_bind("Expression\000", "get_error_text\000", 201670096)
		methodFastNoiseLite[0] = classDB.get_method_bind("FastNoiseLite\000", "set_noise_type\000", 2624461392)
		methodFastNoiseLite[1] = classDB.get_method_bind("FastNoiseLite\000", "get_noise_type\000", 1458108610)
		methodFastNoiseLite[2] = classDB.get_method_bind("FastNoiseLite\000", "set_seed\000", 1286410249)
		methodFastNoiseLite[3] = classDB.get_method_bind("FastNoiseLite\000", "get_seed\000", 3905245786)
		methodFastNoiseLite[4] = classDB.get_method_bind("FastNoiseLite\000", "set_frequency\000", 373806689)
		methodFastNoiseLite[5] = classDB.get_method_bind("FastNoiseLite\000", "get_frequency\000", 1740695150)
		methodFastNoiseLite[6] = classDB.get_method_bind("FastNoiseLite\000", "set_offset\000", 3460891852)
		methodFastNoiseLite[7] = classDB.get_method_bind("FastNoiseLite\000", "get_offset\000", 3360562783)
		methodFastNoiseLite[8] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_type\000", 4132731174)
		methodFastNoiseLite[9] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_type\000", 1036889279)
		methodFastNoiseLite[10] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_octaves\000", 1286410249)
		methodFastNoiseLite[11] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_octaves\000", 3905245786)
		methodFastNoiseLite[12] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_lacunarity\000", 373806689)
		methodFastNoiseLite[13] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_lacunarity\000", 1740695150)
		methodFastNoiseLite[14] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_gain\000", 373806689)
		methodFastNoiseLite[15] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_gain\000", 1740695150)
		methodFastNoiseLite[16] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_weighted_strength\000", 373806689)
		methodFastNoiseLite[17] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_weighted_strength\000", 1740695150)
		methodFastNoiseLite[18] = classDB.get_method_bind("FastNoiseLite\000", "set_fractal_ping_pong_strength\000", 373806689)
		methodFastNoiseLite[19] = classDB.get_method_bind("FastNoiseLite\000", "get_fractal_ping_pong_strength\000", 1740695150)
		methodFastNoiseLite[20] = classDB.get_method_bind("FastNoiseLite\000", "set_cellular_distance_function\000", 1006013267)
		methodFastNoiseLite[21] = classDB.get_method_bind("FastNoiseLite\000", "get_cellular_distance_function\000", 2021274088)
		methodFastNoiseLite[22] = classDB.get_method_bind("FastNoiseLite\000", "set_cellular_jitter\000", 373806689)
		methodFastNoiseLite[23] = classDB.get_method_bind("FastNoiseLite\000", "get_cellular_jitter\000", 1740695150)
		methodFastNoiseLite[24] = classDB.get_method_bind("FastNoiseLite\000", "set_cellular_return_type\000", 2654169698)
		methodFastNoiseLite[25] = classDB.get_method_bind("FastNoiseLite\000", "get_cellular_return_type\000", 3699796343)
		methodFastNoiseLite[26] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_enabled\000", 2586408642)
		methodFastNoiseLite[27] = classDB.get_method_bind("FastNoiseLite\000", "is_domain_warp_enabled\000", 36873697)
		methodFastNoiseLite[28] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_type\000", 3629692980)
		methodFastNoiseLite[29] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_type\000", 2980162020)
		methodFastNoiseLite[30] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_amplitude\000", 373806689)
		methodFastNoiseLite[31] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_amplitude\000", 1740695150)
		methodFastNoiseLite[32] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_frequency\000", 373806689)
		methodFastNoiseLite[33] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_frequency\000", 1740695150)
		methodFastNoiseLite[34] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_fractal_type\000", 3999408287)
		methodFastNoiseLite[35] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_fractal_type\000", 407716934)
		methodFastNoiseLite[36] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_fractal_octaves\000", 1286410249)
		methodFastNoiseLite[37] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_fractal_octaves\000", 3905245786)
		methodFastNoiseLite[38] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_fractal_lacunarity\000", 373806689)
		methodFastNoiseLite[39] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_fractal_lacunarity\000", 1740695150)
		methodFastNoiseLite[40] = classDB.get_method_bind("FastNoiseLite\000", "set_domain_warp_fractal_gain\000", 373806689)
		methodFastNoiseLite[41] = classDB.get_method_bind("FastNoiseLite\000", "get_domain_warp_fractal_gain\000", 1740695150)
		methodFile[0] = classDB.get_method_bind("File\000", "open_encrypted\000", 1337424764)
		methodFile[1] = classDB.get_method_bind("File\000", "open_encrypted_with_pass\000", 1053231221)
		methodFile[2] = classDB.get_method_bind("File\000", "open_compressed\000", 2636971738)
		methodFile[3] = classDB.get_method_bind("File\000", "open\000", 985763342)
		methodFile[4] = classDB.get_method_bind("File\000", "flush\000", 3218959716)
		methodFile[5] = classDB.get_method_bind("File\000", "close\000", 3218959716)
		methodFile[6] = classDB.get_method_bind("File\000", "get_path\000", 201670096)
		methodFile[7] = classDB.get_method_bind("File\000", "get_path_absolute\000", 201670096)
		methodFile[8] = classDB.get_method_bind("File\000", "is_open\000", 36873697)
		methodFile[9] = classDB.get_method_bind("File\000", "seek\000", 1286410249)
		methodFile[10] = classDB.get_method_bind("File\000", "seek_end\000", 1995695955)
		methodFile[11] = classDB.get_method_bind("File\000", "get_position\000", 3905245786)
		methodFile[12] = classDB.get_method_bind("File\000", "get_length\000", 3905245786)
		methodFile[13] = classDB.get_method_bind("File\000", "eof_reached\000", 36873697)
		methodFile[14] = classDB.get_method_bind("File\000", "get_8\000", 3905245786)
		methodFile[15] = classDB.get_method_bind("File\000", "get_16\000", 3905245786)
		methodFile[16] = classDB.get_method_bind("File\000", "get_32\000", 3905245786)
		methodFile[17] = classDB.get_method_bind("File\000", "get_64\000", 3905245786)
		methodFile[18] = classDB.get_method_bind("File\000", "get_float\000", 1740695150)
		methodFile[19] = classDB.get_method_bind("File\000", "get_double\000", 1740695150)
		methodFile[20] = classDB.get_method_bind("File\000", "get_real\000", 1740695150)
		methodFile[21] = classDB.get_method_bind("File\000", "get_buffer\000", 4131300905)
		methodFile[22] = classDB.get_method_bind("File\000", "get_line\000", 201670096)
		methodFile[23] = classDB.get_method_bind("File\000", "get_csv_line\000", 2358116058)
		methodFile[24] = classDB.get_method_bind("File\000", "get_as_text\000", 1162154673)
		methodFile[25] = classDB.get_method_bind("File\000", "get_md5\000", 3135753539)
		methodFile[26] = classDB.get_method_bind("File\000", "get_sha256\000", 3135753539)
		methodFile[27] = classDB.get_method_bind("File\000", "is_big_endian\000", 2240911060)
		methodFile[28] = classDB.get_method_bind("File\000", "set_big_endian\000", 2586408642)
		methodFile[29] = classDB.get_method_bind("File\000", "get_error\000", 3185525595)
		methodFile[30] = classDB.get_method_bind("File\000", "get_var\000", 189129690)
		methodFile[31] = classDB.get_method_bind("File\000", "store_8\000", 1286410249)
		methodFile[32] = classDB.get_method_bind("File\000", "store_16\000", 1286410249)
		methodFile[33] = classDB.get_method_bind("File\000", "store_32\000", 1286410249)
		methodFile[34] = classDB.get_method_bind("File\000", "store_64\000", 1286410249)
		methodFile[35] = classDB.get_method_bind("File\000", "store_float\000", 373806689)
		methodFile[36] = classDB.get_method_bind("File\000", "store_double\000", 373806689)
		methodFile[37] = classDB.get_method_bind("File\000", "store_real\000", 373806689)
		methodFile[38] = classDB.get_method_bind("File\000", "store_buffer\000", 2971499966)
		methodFile[39] = classDB.get_method_bind("File\000", "store_line\000", 83702148)
		methodFile[40] = classDB.get_method_bind("File\000", "store_csv_line\000", 2217842308)
		methodFile[41] = classDB.get_method_bind("File\000", "store_string\000", 83702148)
		methodFile[42] = classDB.get_method_bind("File\000", "store_var\000", 738511890)
		methodFile[43] = classDB.get_method_bind("File\000", "store_pascal_string\000", 83702148)
		methodFile[44] = classDB.get_method_bind("File\000", "get_pascal_string\000", 2841200299)
		methodFile[45] = classDB.get_method_bind("File\000", "file_exists\000", 2323990056)
		methodFile[46] = classDB.get_method_bind("File\000", "get_modified_time\000", 1321353865)
		methodFileDialog[0] = classDB.get_method_bind("FileDialog\000", "clear_filters\000", 3218959716)
		methodFileDialog[1] = classDB.get_method_bind("FileDialog\000", "add_filter\000", 233059325)
		methodFileDialog[2] = classDB.get_method_bind("FileDialog\000", "set_filters\000", 4015028928)
		methodFileDialog[3] = classDB.get_method_bind("FileDialog\000", "get_filters\000", 1139954409)
		methodFileDialog[4] = classDB.get_method_bind("FileDialog\000", "get_current_dir\000", 201670096)
		methodFileDialog[5] = classDB.get_method_bind("FileDialog\000", "get_current_file\000", 201670096)
		methodFileDialog[6] = classDB.get_method_bind("FileDialog\000", "get_current_path\000", 201670096)
		methodFileDialog[7] = classDB.get_method_bind("FileDialog\000", "set_current_dir\000", 83702148)
		methodFileDialog[8] = classDB.get_method_bind("FileDialog\000", "set_current_file\000", 83702148)
		methodFileDialog[9] = classDB.get_method_bind("FileDialog\000", "set_current_path\000", 83702148)
		methodFileDialog[10] = classDB.get_method_bind("FileDialog\000", "set_mode_overrides_title\000", 2586408642)
		methodFileDialog[11] = classDB.get_method_bind("FileDialog\000", "is_mode_overriding_title\000", 36873697)
		methodFileDialog[12] = classDB.get_method_bind("FileDialog\000", "set_file_mode\000", 3654936397)
		methodFileDialog[13] = classDB.get_method_bind("FileDialog\000", "get_file_mode\000", 4074825319)
		methodFileDialog[14] = classDB.get_method_bind("FileDialog\000", "get_vbox\000", 915758477)
		methodFileDialog[15] = classDB.get_method_bind("FileDialog\000", "get_line_edit\000", 4071694264)
		methodFileDialog[16] = classDB.get_method_bind("FileDialog\000", "set_access\000", 4104413466)
		methodFileDialog[17] = classDB.get_method_bind("FileDialog\000", "get_access\000", 3344081076)
		methodFileDialog[18] = classDB.get_method_bind("FileDialog\000", "set_root_subfolder\000", 83702148)
		methodFileDialog[19] = classDB.get_method_bind("FileDialog\000", "get_root_subfolder\000", 201670096)
		methodFileDialog[20] = classDB.get_method_bind("FileDialog\000", "set_show_hidden_files\000", 2586408642)
		methodFileDialog[21] = classDB.get_method_bind("FileDialog\000", "is_showing_hidden_files\000", 36873697)
		methodFileDialog[22] = classDB.get_method_bind("FileDialog\000", "deselect_all\000", 3218959716)
		methodFileDialog[23] = classDB.get_method_bind("FileDialog\000", "invalidate\000", 3218959716)
		methodFileSystemDock[0] = classDB.get_method_bind("FileSystemDock\000", "navigate_to_path\000", 83702148)
		methodFlowContainer[0] = classDB.get_method_bind("FlowContainer\000", "get_line_count\000", 3905245786)
		methodFogMaterial[0] = classDB.get_method_bind("FogMaterial\000", "set_density\000", 373806689)
		methodFogMaterial[1] = classDB.get_method_bind("FogMaterial\000", "get_density\000", 1740695150)
		methodFogMaterial[2] = classDB.get_method_bind("FogMaterial\000", "set_albedo\000", 2920490490)
		methodFogMaterial[3] = classDB.get_method_bind("FogMaterial\000", "get_albedo\000", 3444240500)
		methodFogMaterial[4] = classDB.get_method_bind("FogMaterial\000", "set_emission\000", 2920490490)
		methodFogMaterial[5] = classDB.get_method_bind("FogMaterial\000", "get_emission\000", 3444240500)
		methodFogMaterial[6] = classDB.get_method_bind("FogMaterial\000", "set_height_falloff\000", 373806689)
		methodFogMaterial[7] = classDB.get_method_bind("FogMaterial\000", "get_height_falloff\000", 1740695150)
		methodFogMaterial[8] = classDB.get_method_bind("FogMaterial\000", "set_edge_fade\000", 373806689)
		methodFogMaterial[9] = classDB.get_method_bind("FogMaterial\000", "get_edge_fade\000", 1740695150)
		methodFogMaterial[10] = classDB.get_method_bind("FogMaterial\000", "set_density_texture\000", 1188404210)
		methodFogMaterial[11] = classDB.get_method_bind("FogMaterial\000", "get_density_texture\000", 373985333)
		methodFogVolume[0] = classDB.get_method_bind("FogVolume\000", "set_extents\000", 3460891852)
		methodFogVolume[1] = classDB.get_method_bind("FogVolume\000", "get_extents\000", 3360562783)
		methodFogVolume[2] = classDB.get_method_bind("FogVolume\000", "set_shape\000", 1416323362)
		methodFogVolume[3] = classDB.get_method_bind("FogVolume\000", "get_shape\000", 3920334604)
		methodFogVolume[4] = classDB.get_method_bind("FogVolume\000", "set_material\000", 2757459619)
		methodFogVolume[5] = classDB.get_method_bind("FogVolume\000", "get_material\000", 5934680)
		methodFont[0] = classDB.get_method_bind("Font\000", "set_fallbacks\000", 381264803)
		methodFont[1] = classDB.get_method_bind("Font\000", "get_fallbacks\000", 3995934104)
		methodFont[2] = classDB.get_method_bind("Font\000", "find_variation\000", 3705324482)
		methodFont[3] = classDB.get_method_bind("Font\000", "get_rids\000", 3995934104)
		methodFont[4] = classDB.get_method_bind("Font\000", "get_height\000", 378113874)
		methodFont[5] = classDB.get_method_bind("Font\000", "get_ascent\000", 378113874)
		methodFont[6] = classDB.get_method_bind("Font\000", "get_descent\000", 378113874)
		methodFont[7] = classDB.get_method_bind("Font\000", "get_underline_position\000", 378113874)
		methodFont[8] = classDB.get_method_bind("Font\000", "get_underline_thickness\000", 378113874)
		methodFont[9] = classDB.get_method_bind("Font\000", "get_font_name\000", 201670096)
		methodFont[10] = classDB.get_method_bind("Font\000", "get_font_style_name\000", 201670096)
		methodFont[11] = classDB.get_method_bind("Font\000", "get_font_style\000", 2520224254)
		methodFont[12] = classDB.get_method_bind("Font\000", "get_spacing\000", 1310880908)
		methodFont[13] = classDB.get_method_bind("Font\000", "get_opentype_features\000", 3102165223)
		methodFont[14] = classDB.get_method_bind("Font\000", "set_cache_capacity\000", 3937882851)
		methodFont[15] = classDB.get_method_bind("Font\000", "get_string_size\000", 3678918099)
		methodFont[16] = classDB.get_method_bind("Font\000", "get_multiline_string_size\000", 2427690650)
		methodFont[17] = classDB.get_method_bind("Font\000", "draw_string\000", 2565402639)
		methodFont[18] = classDB.get_method_bind("Font\000", "draw_multiline_string\000", 348869189)
		methodFont[19] = classDB.get_method_bind("Font\000", "draw_string_outline\000", 657875837)
		methodFont[20] = classDB.get_method_bind("Font\000", "draw_multiline_string_outline\000", 1649790182)
		methodFont[21] = classDB.get_method_bind("Font\000", "get_char_size\000", 3016396712)
		methodFont[22] = classDB.get_method_bind("Font\000", "draw_char\000", 1462476057)
		methodFont[23] = classDB.get_method_bind("Font\000", "draw_char_outline\000", 4161008124)
		methodFont[24] = classDB.get_method_bind("Font\000", "has_char\000", 1116898809)
		methodFont[25] = classDB.get_method_bind("Font\000", "get_supported_chars\000", 201670096)
		methodFont[26] = classDB.get_method_bind("Font\000", "is_language_supported\000", 3927539163)
		methodFont[27] = classDB.get_method_bind("Font\000", "is_script_supported\000", 3927539163)
		methodFont[28] = classDB.get_method_bind("Font\000", "get_supported_feature_list\000", 3102165223)
		methodFont[29] = classDB.get_method_bind("Font\000", "get_supported_variation_list\000", 3102165223)
		methodFont[30] = classDB.get_method_bind("Font\000", "get_face_count\000", 3905245786)
		methodFontFile[0] = classDB.get_method_bind("FontFile\000", "load_bitmap_font\000", 166001499)
		methodFontFile[1] = classDB.get_method_bind("FontFile\000", "load_dynamic_font\000", 166001499)
		methodFontFile[2] = classDB.get_method_bind("FontFile\000", "set_data\000", 2971499966)
		methodFontFile[3] = classDB.get_method_bind("FontFile\000", "get_data\000", 2362200018)
		methodFontFile[4] = classDB.get_method_bind("FontFile\000", "set_font_name\000", 83702148)
		methodFontFile[5] = classDB.get_method_bind("FontFile\000", "set_font_style_name\000", 83702148)
		methodFontFile[6] = classDB.get_method_bind("FontFile\000", "set_font_style\000", 918070724)
		methodFontFile[7] = classDB.get_method_bind("FontFile\000", "set_antialiasing\000", 1669900)
		methodFontFile[8] = classDB.get_method_bind("FontFile\000", "get_antialiasing\000", 4262718649)
		methodFontFile[9] = classDB.get_method_bind("FontFile\000", "set_generate_mipmaps\000", 2586408642)
		methodFontFile[10] = classDB.get_method_bind("FontFile\000", "get_generate_mipmaps\000", 36873697)
		methodFontFile[11] = classDB.get_method_bind("FontFile\000", "set_multichannel_signed_distance_field\000", 2586408642)
		methodFontFile[12] = classDB.get_method_bind("FontFile\000", "is_multichannel_signed_distance_field\000", 36873697)
		methodFontFile[13] = classDB.get_method_bind("FontFile\000", "set_msdf_pixel_range\000", 1286410249)
		methodFontFile[14] = classDB.get_method_bind("FontFile\000", "get_msdf_pixel_range\000", 3905245786)
		methodFontFile[15] = classDB.get_method_bind("FontFile\000", "set_msdf_size\000", 1286410249)
		methodFontFile[16] = classDB.get_method_bind("FontFile\000", "get_msdf_size\000", 3905245786)
		methodFontFile[17] = classDB.get_method_bind("FontFile\000", "set_fixed_size\000", 1286410249)
		methodFontFile[18] = classDB.get_method_bind("FontFile\000", "get_fixed_size\000", 3905245786)
		methodFontFile[19] = classDB.get_method_bind("FontFile\000", "set_force_autohinter\000", 2586408642)
		methodFontFile[20] = classDB.get_method_bind("FontFile\000", "is_force_autohinter\000", 36873697)
		methodFontFile[21] = classDB.get_method_bind("FontFile\000", "set_hinting\000", 1827459492)
		methodFontFile[22] = classDB.get_method_bind("FontFile\000", "get_hinting\000", 3683214614)
		methodFontFile[23] = classDB.get_method_bind("FontFile\000", "set_subpixel_positioning\000", 4225742182)
		methodFontFile[24] = classDB.get_method_bind("FontFile\000", "get_subpixel_positioning\000", 1069238588)
		methodFontFile[25] = classDB.get_method_bind("FontFile\000", "set_oversampling\000", 373806689)
		methodFontFile[26] = classDB.get_method_bind("FontFile\000", "get_oversampling\000", 1740695150)
		methodFontFile[27] = classDB.get_method_bind("FontFile\000", "get_cache_count\000", 3905245786)
		methodFontFile[28] = classDB.get_method_bind("FontFile\000", "clear_cache\000", 3218959716)
		methodFontFile[29] = classDB.get_method_bind("FontFile\000", "remove_cache\000", 1286410249)
		methodFontFile[30] = classDB.get_method_bind("FontFile\000", "get_size_cache_list\000", 663333327)
		methodFontFile[31] = classDB.get_method_bind("FontFile\000", "clear_size_cache\000", 1286410249)
		methodFontFile[32] = classDB.get_method_bind("FontFile\000", "remove_size_cache\000", 2311374912)
		methodFontFile[33] = classDB.get_method_bind("FontFile\000", "set_variation_coordinates\000", 64545446)
		methodFontFile[34] = classDB.get_method_bind("FontFile\000", "get_variation_coordinates\000", 3485342025)
		methodFontFile[35] = classDB.get_method_bind("FontFile\000", "set_embolden\000", 1602489585)
		methodFontFile[36] = classDB.get_method_bind("FontFile\000", "get_embolden\000", 2339986948)
		methodFontFile[37] = classDB.get_method_bind("FontFile\000", "set_transform\000", 30160968)
		methodFontFile[38] = classDB.get_method_bind("FontFile\000", "get_transform\000", 3836996910)
		methodFontFile[39] = classDB.get_method_bind("FontFile\000", "set_face_index\000", 3937882851)
		methodFontFile[40] = classDB.get_method_bind("FontFile\000", "get_face_index\000", 923996154)
		methodFontFile[41] = classDB.get_method_bind("FontFile\000", "set_cache_ascent\000", 3506521499)
		methodFontFile[42] = classDB.get_method_bind("FontFile\000", "get_cache_ascent\000", 3085491603)
		methodFontFile[43] = classDB.get_method_bind("FontFile\000", "set_cache_descent\000", 3506521499)
		methodFontFile[44] = classDB.get_method_bind("FontFile\000", "get_cache_descent\000", 3085491603)
		methodFontFile[45] = classDB.get_method_bind("FontFile\000", "set_cache_underline_position\000", 3506521499)
		methodFontFile[46] = classDB.get_method_bind("FontFile\000", "get_cache_underline_position\000", 3085491603)
		methodFontFile[47] = classDB.get_method_bind("FontFile\000", "set_cache_underline_thickness\000", 3506521499)
		methodFontFile[48] = classDB.get_method_bind("FontFile\000", "get_cache_underline_thickness\000", 3085491603)
		methodFontFile[49] = classDB.get_method_bind("FontFile\000", "set_cache_scale\000", 3506521499)
		methodFontFile[50] = classDB.get_method_bind("FontFile\000", "get_cache_scale\000", 3085491603)
		methodFontFile[51] = classDB.get_method_bind("FontFile\000", "get_texture_count\000", 1987661582)
		methodFontFile[52] = classDB.get_method_bind("FontFile\000", "clear_textures\000", 2311374912)
		methodFontFile[53] = classDB.get_method_bind("FontFile\000", "remove_texture\000", 2328951467)
		methodFontFile[54] = classDB.get_method_bind("FontFile\000", "set_texture_image\000", 4157974066)
		methodFontFile[55] = classDB.get_method_bind("FontFile\000", "get_texture_image\000", 3878418953)
		methodFontFile[56] = classDB.get_method_bind("FontFile\000", "set_texture_offsets\000", 2849993437)
		methodFontFile[57] = classDB.get_method_bind("FontFile\000", "get_texture_offsets\000", 3703444828)
		methodFontFile[58] = classDB.get_method_bind("FontFile\000", "get_glyph_list\000", 681709689)
		methodFontFile[59] = classDB.get_method_bind("FontFile\000", "clear_glyphs\000", 2311374912)
		methodFontFile[60] = classDB.get_method_bind("FontFile\000", "remove_glyph\000", 2328951467)
		methodFontFile[61] = classDB.get_method_bind("FontFile\000", "set_glyph_advance\000", 947991729)
		methodFontFile[62] = classDB.get_method_bind("FontFile\000", "get_glyph_advance\000", 1601573536)
		methodFontFile[63] = classDB.get_method_bind("FontFile\000", "set_glyph_offset\000", 921719850)
		methodFontFile[64] = classDB.get_method_bind("FontFile\000", "get_glyph_offset\000", 3205412300)
		methodFontFile[65] = classDB.get_method_bind("FontFile\000", "set_glyph_size\000", 921719850)
		methodFontFile[66] = classDB.get_method_bind("FontFile\000", "get_glyph_size\000", 3205412300)
		methodFontFile[67] = classDB.get_method_bind("FontFile\000", "set_glyph_uv_rect\000", 3821620992)
		methodFontFile[68] = classDB.get_method_bind("FontFile\000", "get_glyph_uv_rect\000", 3927917900)
		methodFontFile[69] = classDB.get_method_bind("FontFile\000", "set_glyph_texture_idx\000", 355564111)
		methodFontFile[70] = classDB.get_method_bind("FontFile\000", "get_glyph_texture_idx\000", 1629411054)
		methodFontFile[71] = classDB.get_method_bind("FontFile\000", "get_kerning_list\000", 2345056839)
		methodFontFile[72] = classDB.get_method_bind("FontFile\000", "clear_kerning_map\000", 3937882851)
		methodFontFile[73] = classDB.get_method_bind("FontFile\000", "remove_kerning\000", 3930204747)
		methodFontFile[74] = classDB.get_method_bind("FontFile\000", "set_kerning\000", 3182200918)
		methodFontFile[75] = classDB.get_method_bind("FontFile\000", "get_kerning\000", 1611912865)
		methodFontFile[76] = classDB.get_method_bind("FontFile\000", "render_range\000", 355564111)
		methodFontFile[77] = classDB.get_method_bind("FontFile\000", "render_glyph\000", 2328951467)
		methodFontFile[78] = classDB.get_method_bind("FontFile\000", "set_language_support_override\000", 2678287736)
		methodFontFile[79] = classDB.get_method_bind("FontFile\000", "get_language_support_override\000", 3927539163)
		methodFontFile[80] = classDB.get_method_bind("FontFile\000", "remove_language_support_override\000", 83702148)
		methodFontFile[81] = classDB.get_method_bind("FontFile\000", "get_language_support_overrides\000", 1139954409)
		methodFontFile[82] = classDB.get_method_bind("FontFile\000", "set_script_support_override\000", 2678287736)
		methodFontFile[83] = classDB.get_method_bind("FontFile\000", "get_script_support_override\000", 3927539163)
		methodFontFile[84] = classDB.get_method_bind("FontFile\000", "remove_script_support_override\000", 83702148)
		methodFontFile[85] = classDB.get_method_bind("FontFile\000", "get_script_support_overrides\000", 1139954409)
		methodFontFile[86] = classDB.get_method_bind("FontFile\000", "set_opentype_feature_overrides\000", 4155329257)
		methodFontFile[87] = classDB.get_method_bind("FontFile\000", "get_opentype_feature_overrides\000", 3102165223)
		methodFontFile[88] = classDB.get_method_bind("FontFile\000", "get_glyph_index\000", 864943070)
		methodFontVariation[0] = classDB.get_method_bind("FontVariation\000", "set_base_font\000", 1262170328)
		methodFontVariation[1] = classDB.get_method_bind("FontVariation\000", "get_base_font\000", 3229501585)
		methodFontVariation[2] = classDB.get_method_bind("FontVariation\000", "set_variation_opentype\000", 4155329257)
		methodFontVariation[3] = classDB.get_method_bind("FontVariation\000", "get_variation_opentype\000", 3102165223)
		methodFontVariation[4] = classDB.get_method_bind("FontVariation\000", "set_variation_embolden\000", 373806689)
		methodFontVariation[5] = classDB.get_method_bind("FontVariation\000", "get_variation_embolden\000", 1740695150)
		methodFontVariation[6] = classDB.get_method_bind("FontVariation\000", "set_variation_face_index\000", 1286410249)
		methodFontVariation[7] = classDB.get_method_bind("FontVariation\000", "get_variation_face_index\000", 3905245786)
		methodFontVariation[8] = classDB.get_method_bind("FontVariation\000", "set_variation_transform\000", 2761652528)
		methodFontVariation[9] = classDB.get_method_bind("FontVariation\000", "get_variation_transform\000", 3814499831)
		methodFontVariation[10] = classDB.get_method_bind("FontVariation\000", "set_opentype_features\000", 4155329257)
		methodFontVariation[11] = classDB.get_method_bind("FontVariation\000", "set_spacing\000", 3122339690)
		methodGDScript[0] = classDB.get_method_bind("GDScript\000", "new\000", 1545262638)
		methodGDScript[1] = classDB.get_method_bind("GDScript\000", "get_as_byte_code\000", 2362200018)
		methodGLTFAccessor[0] = classDB.get_method_bind("GLTFAccessor\000", "get_buffer_view\000", 2455072627)
		methodGLTFAccessor[1] = classDB.get_method_bind("GLTFAccessor\000", "set_buffer_view\000", 1286410249)
		methodGLTFAccessor[2] = classDB.get_method_bind("GLTFAccessor\000", "get_byte_offset\000", 2455072627)
		methodGLTFAccessor[3] = classDB.get_method_bind("GLTFAccessor\000", "set_byte_offset\000", 1286410249)
		methodGLTFAccessor[4] = classDB.get_method_bind("GLTFAccessor\000", "get_component_type\000", 2455072627)
		methodGLTFAccessor[5] = classDB.get_method_bind("GLTFAccessor\000", "set_component_type\000", 1286410249)
		methodGLTFAccessor[6] = classDB.get_method_bind("GLTFAccessor\000", "get_normalized\000", 2240911060)
		methodGLTFAccessor[7] = classDB.get_method_bind("GLTFAccessor\000", "set_normalized\000", 2586408642)
		methodGLTFAccessor[8] = classDB.get_method_bind("GLTFAccessor\000", "get_count\000", 2455072627)
		methodGLTFAccessor[9] = classDB.get_method_bind("GLTFAccessor\000", "set_count\000", 1286410249)
		methodGLTFAccessor[10] = classDB.get_method_bind("GLTFAccessor\000", "get_type\000", 2455072627)
		methodGLTFAccessor[11] = classDB.get_method_bind("GLTFAccessor\000", "set_type\000", 1286410249)
		methodGLTFAccessor[12] = classDB.get_method_bind("GLTFAccessor\000", "get_min\000", 148677866)
		methodGLTFAccessor[13] = classDB.get_method_bind("GLTFAccessor\000", "set_min\000", 2576592201)
		methodGLTFAccessor[14] = classDB.get_method_bind("GLTFAccessor\000", "get_max\000", 148677866)
		methodGLTFAccessor[15] = classDB.get_method_bind("GLTFAccessor\000", "set_max\000", 2576592201)
		methodGLTFAccessor[16] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_count\000", 2455072627)
		methodGLTFAccessor[17] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_count\000", 1286410249)
		methodGLTFAccessor[18] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_indices_buffer_view\000", 2455072627)
		methodGLTFAccessor[19] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_indices_buffer_view\000", 1286410249)
		methodGLTFAccessor[20] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_indices_byte_offset\000", 2455072627)
		methodGLTFAccessor[21] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_indices_byte_offset\000", 1286410249)
		methodGLTFAccessor[22] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_indices_component_type\000", 2455072627)
		methodGLTFAccessor[23] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_indices_component_type\000", 1286410249)
		methodGLTFAccessor[24] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_values_buffer_view\000", 2455072627)
		methodGLTFAccessor[25] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_values_buffer_view\000", 1286410249)
		methodGLTFAccessor[26] = classDB.get_method_bind("GLTFAccessor\000", "get_sparse_values_byte_offset\000", 2455072627)
		methodGLTFAccessor[27] = classDB.get_method_bind("GLTFAccessor\000", "set_sparse_values_byte_offset\000", 1286410249)
		methodGLTFAnimation[0] = classDB.get_method_bind("GLTFAnimation\000", "get_loop\000", 36873697)
		methodGLTFAnimation[1] = classDB.get_method_bind("GLTFAnimation\000", "set_loop\000", 2586408642)
		methodGLTFBufferView[0] = classDB.get_method_bind("GLTFBufferView\000", "get_buffer\000", 2455072627)
		methodGLTFBufferView[1] = classDB.get_method_bind("GLTFBufferView\000", "set_buffer\000", 1286410249)
		methodGLTFBufferView[2] = classDB.get_method_bind("GLTFBufferView\000", "get_byte_offset\000", 2455072627)
		methodGLTFBufferView[3] = classDB.get_method_bind("GLTFBufferView\000", "set_byte_offset\000", 1286410249)
		methodGLTFBufferView[4] = classDB.get_method_bind("GLTFBufferView\000", "get_byte_length\000", 2455072627)
		methodGLTFBufferView[5] = classDB.get_method_bind("GLTFBufferView\000", "set_byte_length\000", 1286410249)
		methodGLTFBufferView[6] = classDB.get_method_bind("GLTFBufferView\000", "get_byte_stride\000", 2455072627)
		methodGLTFBufferView[7] = classDB.get_method_bind("GLTFBufferView\000", "set_byte_stride\000", 1286410249)
		methodGLTFBufferView[8] = classDB.get_method_bind("GLTFBufferView\000", "get_indices\000", 2240911060)
		methodGLTFBufferView[9] = classDB.get_method_bind("GLTFBufferView\000", "set_indices\000", 2586408642)
		methodGLTFCamera[0] = classDB.get_method_bind("GLTFCamera\000", "get_perspective\000", 36873697)
		methodGLTFCamera[1] = classDB.get_method_bind("GLTFCamera\000", "set_perspective\000", 2586408642)
		methodGLTFCamera[2] = classDB.get_method_bind("GLTFCamera\000", "get_fov\000", 1740695150)
		methodGLTFCamera[3] = classDB.get_method_bind("GLTFCamera\000", "set_fov\000", 373806689)
		methodGLTFCamera[4] = classDB.get_method_bind("GLTFCamera\000", "get_size_mag\000", 1740695150)
		methodGLTFCamera[5] = classDB.get_method_bind("GLTFCamera\000", "set_size_mag\000", 373806689)
		methodGLTFCamera[6] = classDB.get_method_bind("GLTFCamera\000", "get_depth_far\000", 1740695150)
		methodGLTFCamera[7] = classDB.get_method_bind("GLTFCamera\000", "set_depth_far\000", 373806689)
		methodGLTFCamera[8] = classDB.get_method_bind("GLTFCamera\000", "get_depth_near\000", 1740695150)
		methodGLTFCamera[9] = classDB.get_method_bind("GLTFCamera\000", "set_depth_near\000", 373806689)
		methodGLTFDocument[0] = classDB.get_method_bind("GLTFDocument\000", "append_from_file\000", 151088826)
		methodGLTFDocument[1] = classDB.get_method_bind("GLTFDocument\000", "append_from_buffer\000", 3407700015)
		methodGLTFDocument[2] = classDB.get_method_bind("GLTFDocument\000", "append_from_scene\000", 2536678188)
		methodGLTFDocument[3] = classDB.get_method_bind("GLTFDocument\000", "generate_scene\000", 1603623551)
		methodGLTFDocument[4] = classDB.get_method_bind("GLTFDocument\000", "generate_buffer\000", 741783455)
		methodGLTFDocument[5] = classDB.get_method_bind("GLTFDocument\000", "write_to_filesystem\000", 1784551478)
		methodGLTFDocument[6] = classDB.get_method_bind("GLTFDocument\000", "set_extensions\000", 381264803)
		methodGLTFDocument[7] = classDB.get_method_bind("GLTFDocument\000", "get_extensions\000", 3995934104)
		methodGLTFLight[0] = classDB.get_method_bind("GLTFLight\000", "get_color\000", 3200896285)
		methodGLTFLight[1] = classDB.get_method_bind("GLTFLight\000", "set_color\000", 2920490490)
		methodGLTFLight[2] = classDB.get_method_bind("GLTFLight\000", "get_intensity\000", 191475506)
		methodGLTFLight[3] = classDB.get_method_bind("GLTFLight\000", "set_intensity\000", 373806689)
		methodGLTFLight[4] = classDB.get_method_bind("GLTFLight\000", "get_light_type\000", 2841200299)
		methodGLTFLight[5] = classDB.get_method_bind("GLTFLight\000", "set_light_type\000", 83702148)
		methodGLTFLight[6] = classDB.get_method_bind("GLTFLight\000", "get_range\000", 191475506)
		methodGLTFLight[7] = classDB.get_method_bind("GLTFLight\000", "set_range\000", 373806689)
		methodGLTFLight[8] = classDB.get_method_bind("GLTFLight\000", "get_inner_cone_angle\000", 191475506)
		methodGLTFLight[9] = classDB.get_method_bind("GLTFLight\000", "set_inner_cone_angle\000", 373806689)
		methodGLTFLight[10] = classDB.get_method_bind("GLTFLight\000", "get_outer_cone_angle\000", 191475506)
		methodGLTFLight[11] = classDB.get_method_bind("GLTFLight\000", "set_outer_cone_angle\000", 373806689)
		methodGLTFMesh[0] = classDB.get_method_bind("GLTFMesh\000", "get_mesh\000", 3754628756)
		methodGLTFMesh[1] = classDB.get_method_bind("GLTFMesh\000", "set_mesh\000", 2255166972)
		methodGLTFMesh[2] = classDB.get_method_bind("GLTFMesh\000", "get_blend_weights\000", 2445143706)
		methodGLTFMesh[3] = classDB.get_method_bind("GLTFMesh\000", "set_blend_weights\000", 2899603908)
		methodGLTFMesh[4] = classDB.get_method_bind("GLTFMesh\000", "get_instance_materials\000", 2915620761)
		methodGLTFMesh[5] = classDB.get_method_bind("GLTFMesh\000", "set_instance_materials\000", 381264803)
		methodGLTFNode[0] = classDB.get_method_bind("GLTFNode\000", "get_parent\000", 2455072627)
		methodGLTFNode[1] = classDB.get_method_bind("GLTFNode\000", "set_parent\000", 1286410249)
		methodGLTFNode[2] = classDB.get_method_bind("GLTFNode\000", "get_height\000", 2455072627)
		methodGLTFNode[3] = classDB.get_method_bind("GLTFNode\000", "set_height\000", 1286410249)
		methodGLTFNode[4] = classDB.get_method_bind("GLTFNode\000", "get_xform\000", 4183770049)
		methodGLTFNode[5] = classDB.get_method_bind("GLTFNode\000", "set_xform\000", 2952846383)
		methodGLTFNode[6] = classDB.get_method_bind("GLTFNode\000", "get_mesh\000", 2455072627)
		methodGLTFNode[7] = classDB.get_method_bind("GLTFNode\000", "set_mesh\000", 1286410249)
		methodGLTFNode[8] = classDB.get_method_bind("GLTFNode\000", "get_camera\000", 2455072627)
		methodGLTFNode[9] = classDB.get_method_bind("GLTFNode\000", "set_camera\000", 1286410249)
		methodGLTFNode[10] = classDB.get_method_bind("GLTFNode\000", "get_skin\000", 2455072627)
		methodGLTFNode[11] = classDB.get_method_bind("GLTFNode\000", "set_skin\000", 1286410249)
		methodGLTFNode[12] = classDB.get_method_bind("GLTFNode\000", "get_skeleton\000", 2455072627)
		methodGLTFNode[13] = classDB.get_method_bind("GLTFNode\000", "set_skeleton\000", 1286410249)
		methodGLTFNode[14] = classDB.get_method_bind("GLTFNode\000", "get_joint\000", 2240911060)
		methodGLTFNode[15] = classDB.get_method_bind("GLTFNode\000", "set_joint\000", 2586408642)
		methodGLTFNode[16] = classDB.get_method_bind("GLTFNode\000", "get_position\000", 3783033775)
		methodGLTFNode[17] = classDB.get_method_bind("GLTFNode\000", "set_position\000", 3460891852)
		methodGLTFNode[18] = classDB.get_method_bind("GLTFNode\000", "get_rotation\000", 2916281908)
		methodGLTFNode[19] = classDB.get_method_bind("GLTFNode\000", "set_rotation\000", 1727505552)
		methodGLTFNode[20] = classDB.get_method_bind("GLTFNode\000", "get_scale\000", 3783033775)
		methodGLTFNode[21] = classDB.get_method_bind("GLTFNode\000", "set_scale\000", 3460891852)
		methodGLTFNode[22] = classDB.get_method_bind("GLTFNode\000", "get_children\000", 969006518)
		methodGLTFNode[23] = classDB.get_method_bind("GLTFNode\000", "set_children\000", 3614634198)
		methodGLTFNode[24] = classDB.get_method_bind("GLTFNode\000", "get_light\000", 2455072627)
		methodGLTFNode[25] = classDB.get_method_bind("GLTFNode\000", "set_light\000", 1286410249)
		methodGLTFSkeleton[0] = classDB.get_method_bind("GLTFSkeleton\000", "get_joints\000", 969006518)
		methodGLTFSkeleton[1] = classDB.get_method_bind("GLTFSkeleton\000", "set_joints\000", 3614634198)
		methodGLTFSkeleton[2] = classDB.get_method_bind("GLTFSkeleton\000", "get_roots\000", 969006518)
		methodGLTFSkeleton[3] = classDB.get_method_bind("GLTFSkeleton\000", "set_roots\000", 3614634198)
		methodGLTFSkeleton[4] = classDB.get_method_bind("GLTFSkeleton\000", "get_godot_skeleton\000", 1814733083)
		methodGLTFSkeleton[5] = classDB.get_method_bind("GLTFSkeleton\000", "get_unique_names\000", 2915620761)
		methodGLTFSkeleton[6] = classDB.get_method_bind("GLTFSkeleton\000", "set_unique_names\000", 381264803)
		methodGLTFSkeleton[7] = classDB.get_method_bind("GLTFSkeleton\000", "get_godot_bone_node\000", 2382534195)
		methodGLTFSkeleton[8] = classDB.get_method_bind("GLTFSkeleton\000", "set_godot_bone_node\000", 4155329257)
		methodGLTFSkeleton[9] = classDB.get_method_bind("GLTFSkeleton\000", "get_bone_attachment_count\000", 2455072627)
		methodGLTFSkeleton[10] = classDB.get_method_bind("GLTFSkeleton\000", "get_bone_attachment\000", 945440495)
		methodGLTFSkin[0] = classDB.get_method_bind("GLTFSkin\000", "get_skin_root\000", 2455072627)
		methodGLTFSkin[1] = classDB.get_method_bind("GLTFSkin\000", "set_skin_root\000", 1286410249)
		methodGLTFSkin[2] = classDB.get_method_bind("GLTFSkin\000", "get_joints_original\000", 969006518)
		methodGLTFSkin[3] = classDB.get_method_bind("GLTFSkin\000", "set_joints_original\000", 3614634198)
		methodGLTFSkin[4] = classDB.get_method_bind("GLTFSkin\000", "get_inverse_binds\000", 2915620761)
		methodGLTFSkin[5] = classDB.get_method_bind("GLTFSkin\000", "set_inverse_binds\000", 381264803)
		methodGLTFSkin[6] = classDB.get_method_bind("GLTFSkin\000", "get_joints\000", 969006518)
		methodGLTFSkin[7] = classDB.get_method_bind("GLTFSkin\000", "set_joints\000", 3614634198)
		methodGLTFSkin[8] = classDB.get_method_bind("GLTFSkin\000", "get_non_joints\000", 969006518)
		methodGLTFSkin[9] = classDB.get_method_bind("GLTFSkin\000", "set_non_joints\000", 3614634198)
		methodGLTFSkin[10] = classDB.get_method_bind("GLTFSkin\000", "get_roots\000", 969006518)
		methodGLTFSkin[11] = classDB.get_method_bind("GLTFSkin\000", "set_roots\000", 3614634198)
		methodGLTFSkin[12] = classDB.get_method_bind("GLTFSkin\000", "get_skeleton\000", 2455072627)
		methodGLTFSkin[13] = classDB.get_method_bind("GLTFSkin\000", "set_skeleton\000", 1286410249)
		methodGLTFSkin[14] = classDB.get_method_bind("GLTFSkin\000", "get_joint_i_to_bone_i\000", 2382534195)
		methodGLTFSkin[15] = classDB.get_method_bind("GLTFSkin\000", "set_joint_i_to_bone_i\000", 4155329257)
		methodGLTFSkin[16] = classDB.get_method_bind("GLTFSkin\000", "get_joint_i_to_name\000", 2382534195)
		methodGLTFSkin[17] = classDB.get_method_bind("GLTFSkin\000", "set_joint_i_to_name\000", 4155329257)
		methodGLTFSkin[18] = classDB.get_method_bind("GLTFSkin\000", "get_godot_skin\000", 1032037385)
		methodGLTFSkin[19] = classDB.get_method_bind("GLTFSkin\000", "set_godot_skin\000", 3971435618)
		methodGLTFSpecGloss[0] = classDB.get_method_bind("GLTFSpecGloss\000", "get_diffuse_img\000", 564927088)
		methodGLTFSpecGloss[1] = classDB.get_method_bind("GLTFSpecGloss\000", "set_diffuse_img\000", 532598488)
		methodGLTFSpecGloss[2] = classDB.get_method_bind("GLTFSpecGloss\000", "get_diffuse_factor\000", 3200896285)
		methodGLTFSpecGloss[3] = classDB.get_method_bind("GLTFSpecGloss\000", "set_diffuse_factor\000", 2920490490)
		methodGLTFSpecGloss[4] = classDB.get_method_bind("GLTFSpecGloss\000", "get_gloss_factor\000", 191475506)
		methodGLTFSpecGloss[5] = classDB.get_method_bind("GLTFSpecGloss\000", "set_gloss_factor\000", 373806689)
		methodGLTFSpecGloss[6] = classDB.get_method_bind("GLTFSpecGloss\000", "get_specular_factor\000", 3200896285)
		methodGLTFSpecGloss[7] = classDB.get_method_bind("GLTFSpecGloss\000", "set_specular_factor\000", 2920490490)
		methodGLTFSpecGloss[8] = classDB.get_method_bind("GLTFSpecGloss\000", "get_spec_gloss_img\000", 564927088)
		methodGLTFSpecGloss[9] = classDB.get_method_bind("GLTFSpecGloss\000", "set_spec_gloss_img\000", 532598488)
		methodGLTFState[0] = classDB.get_method_bind("GLTFState\000", "get_json\000", 2382534195)
		methodGLTFState[1] = classDB.get_method_bind("GLTFState\000", "set_json\000", 4155329257)
		methodGLTFState[2] = classDB.get_method_bind("GLTFState\000", "get_major_version\000", 2455072627)
		methodGLTFState[3] = classDB.get_method_bind("GLTFState\000", "set_major_version\000", 1286410249)
		methodGLTFState[4] = classDB.get_method_bind("GLTFState\000", "get_minor_version\000", 2455072627)
		methodGLTFState[5] = classDB.get_method_bind("GLTFState\000", "set_minor_version\000", 1286410249)
		methodGLTFState[6] = classDB.get_method_bind("GLTFState\000", "get_glb_data\000", 2115431945)
		methodGLTFState[7] = classDB.get_method_bind("GLTFState\000", "set_glb_data\000", 2971499966)
		methodGLTFState[8] = classDB.get_method_bind("GLTFState\000", "get_use_named_skin_binds\000", 2240911060)
		methodGLTFState[9] = classDB.get_method_bind("GLTFState\000", "set_use_named_skin_binds\000", 2586408642)
		methodGLTFState[10] = classDB.get_method_bind("GLTFState\000", "get_nodes\000", 2915620761)
		methodGLTFState[11] = classDB.get_method_bind("GLTFState\000", "set_nodes\000", 381264803)
		methodGLTFState[12] = classDB.get_method_bind("GLTFState\000", "get_buffers\000", 2915620761)
		methodGLTFState[13] = classDB.get_method_bind("GLTFState\000", "set_buffers\000", 381264803)
		methodGLTFState[14] = classDB.get_method_bind("GLTFState\000", "get_buffer_views\000", 2915620761)
		methodGLTFState[15] = classDB.get_method_bind("GLTFState\000", "set_buffer_views\000", 381264803)
		methodGLTFState[16] = classDB.get_method_bind("GLTFState\000", "get_accessors\000", 2915620761)
		methodGLTFState[17] = classDB.get_method_bind("GLTFState\000", "set_accessors\000", 381264803)
		methodGLTFState[18] = classDB.get_method_bind("GLTFState\000", "get_meshes\000", 2915620761)
		methodGLTFState[19] = classDB.get_method_bind("GLTFState\000", "set_meshes\000", 381264803)
		methodGLTFState[20] = classDB.get_method_bind("GLTFState\000", "get_animation_players_count\000", 3744713108)
		methodGLTFState[21] = classDB.get_method_bind("GLTFState\000", "get_animation_player\000", 925043400)
		methodGLTFState[22] = classDB.get_method_bind("GLTFState\000", "get_materials\000", 2915620761)
		methodGLTFState[23] = classDB.get_method_bind("GLTFState\000", "set_materials\000", 381264803)
		methodGLTFState[24] = classDB.get_method_bind("GLTFState\000", "get_scene_name\000", 2841200299)
		methodGLTFState[25] = classDB.get_method_bind("GLTFState\000", "set_scene_name\000", 83702148)
		methodGLTFState[26] = classDB.get_method_bind("GLTFState\000", "get_base_path\000", 2841200299)
		methodGLTFState[27] = classDB.get_method_bind("GLTFState\000", "set_base_path\000", 83702148)
		methodGLTFState[28] = classDB.get_method_bind("GLTFState\000", "get_root_nodes\000", 969006518)
		methodGLTFState[29] = classDB.get_method_bind("GLTFState\000", "set_root_nodes\000", 3614634198)
		methodGLTFState[30] = classDB.get_method_bind("GLTFState\000", "get_textures\000", 2915620761)
		methodGLTFState[31] = classDB.get_method_bind("GLTFState\000", "set_textures\000", 381264803)
		methodGLTFState[32] = classDB.get_method_bind("GLTFState\000", "get_images\000", 2915620761)
		methodGLTFState[33] = classDB.get_method_bind("GLTFState\000", "set_images\000", 381264803)
		methodGLTFState[34] = classDB.get_method_bind("GLTFState\000", "get_skins\000", 2915620761)
		methodGLTFState[35] = classDB.get_method_bind("GLTFState\000", "set_skins\000", 381264803)
		methodGLTFState[36] = classDB.get_method_bind("GLTFState\000", "get_cameras\000", 2915620761)
		methodGLTFState[37] = classDB.get_method_bind("GLTFState\000", "set_cameras\000", 381264803)
		methodGLTFState[38] = classDB.get_method_bind("GLTFState\000", "get_lights\000", 2915620761)
		methodGLTFState[39] = classDB.get_method_bind("GLTFState\000", "set_lights\000", 381264803)
		methodGLTFState[40] = classDB.get_method_bind("GLTFState\000", "get_unique_names\000", 2915620761)
		methodGLTFState[41] = classDB.get_method_bind("GLTFState\000", "set_unique_names\000", 381264803)
		methodGLTFState[42] = classDB.get_method_bind("GLTFState\000", "get_unique_animation_names\000", 2915620761)
		methodGLTFState[43] = classDB.get_method_bind("GLTFState\000", "set_unique_animation_names\000", 381264803)
		methodGLTFState[44] = classDB.get_method_bind("GLTFState\000", "get_skeletons\000", 2915620761)
		methodGLTFState[45] = classDB.get_method_bind("GLTFState\000", "set_skeletons\000", 381264803)
		methodGLTFState[46] = classDB.get_method_bind("GLTFState\000", "get_skeleton_to_node\000", 2382534195)
		methodGLTFState[47] = classDB.get_method_bind("GLTFState\000", "set_skeleton_to_node\000", 4155329257)
		methodGLTFState[48] = classDB.get_method_bind("GLTFState\000", "get_create_animations\000", 2240911060)
		methodGLTFState[49] = classDB.get_method_bind("GLTFState\000", "set_create_animations\000", 2586408642)
		methodGLTFState[50] = classDB.get_method_bind("GLTFState\000", "get_animations\000", 2915620761)
		methodGLTFState[51] = classDB.get_method_bind("GLTFState\000", "set_animations\000", 381264803)
		methodGLTFState[52] = classDB.get_method_bind("GLTFState\000", "get_scene_node\000", 4253421667)
		methodGLTFTexture[0] = classDB.get_method_bind("GLTFTexture\000", "get_src_image\000", 3905245786)
		methodGLTFTexture[1] = classDB.get_method_bind("GLTFTexture\000", "set_src_image\000", 1286410249)
		methodGPUParticles2D[0] = classDB.get_method_bind("GPUParticles2D\000", "set_emitting\000", 2586408642)
		methodGPUParticles2D[1] = classDB.get_method_bind("GPUParticles2D\000", "set_amount\000", 1286410249)
		methodGPUParticles2D[2] = classDB.get_method_bind("GPUParticles2D\000", "set_lifetime\000", 373806689)
		methodGPUParticles2D[3] = classDB.get_method_bind("GPUParticles2D\000", "set_one_shot\000", 2586408642)
		methodGPUParticles2D[4] = classDB.get_method_bind("GPUParticles2D\000", "set_pre_process_time\000", 373806689)
		methodGPUParticles2D[5] = classDB.get_method_bind("GPUParticles2D\000", "set_explosiveness_ratio\000", 373806689)
		methodGPUParticles2D[6] = classDB.get_method_bind("GPUParticles2D\000", "set_randomness_ratio\000", 373806689)
		methodGPUParticles2D[7] = classDB.get_method_bind("GPUParticles2D\000", "set_visibility_rect\000", 2046264180)
		methodGPUParticles2D[8] = classDB.get_method_bind("GPUParticles2D\000", "set_use_local_coordinates\000", 2586408642)
		methodGPUParticles2D[9] = classDB.get_method_bind("GPUParticles2D\000", "set_fixed_fps\000", 1286410249)
		methodGPUParticles2D[10] = classDB.get_method_bind("GPUParticles2D\000", "set_fractional_delta\000", 2586408642)
		methodGPUParticles2D[11] = classDB.get_method_bind("GPUParticles2D\000", "set_interpolate\000", 2586408642)
		methodGPUParticles2D[12] = classDB.get_method_bind("GPUParticles2D\000", "set_process_material\000", 2757459619)
		methodGPUParticles2D[13] = classDB.get_method_bind("GPUParticles2D\000", "set_speed_scale\000", 373806689)
		methodGPUParticles2D[14] = classDB.get_method_bind("GPUParticles2D\000", "set_collision_base_size\000", 373806689)
		methodGPUParticles2D[15] = classDB.get_method_bind("GPUParticles2D\000", "is_emitting\000", 36873697)
		methodGPUParticles2D[16] = classDB.get_method_bind("GPUParticles2D\000", "get_amount\000", 3905245786)
		methodGPUParticles2D[17] = classDB.get_method_bind("GPUParticles2D\000", "get_lifetime\000", 1740695150)
		methodGPUParticles2D[18] = classDB.get_method_bind("GPUParticles2D\000", "get_one_shot\000", 36873697)
		methodGPUParticles2D[19] = classDB.get_method_bind("GPUParticles2D\000", "get_pre_process_time\000", 1740695150)
		methodGPUParticles2D[20] = classDB.get_method_bind("GPUParticles2D\000", "get_explosiveness_ratio\000", 1740695150)
		methodGPUParticles2D[21] = classDB.get_method_bind("GPUParticles2D\000", "get_randomness_ratio\000", 1740695150)
		methodGPUParticles2D[22] = classDB.get_method_bind("GPUParticles2D\000", "get_visibility_rect\000", 1639390495)
		methodGPUParticles2D[23] = classDB.get_method_bind("GPUParticles2D\000", "get_use_local_coordinates\000", 36873697)
		methodGPUParticles2D[24] = classDB.get_method_bind("GPUParticles2D\000", "get_fixed_fps\000", 3905245786)
		methodGPUParticles2D[25] = classDB.get_method_bind("GPUParticles2D\000", "get_fractional_delta\000", 36873697)
		methodGPUParticles2D[26] = classDB.get_method_bind("GPUParticles2D\000", "get_interpolate\000", 36873697)
		methodGPUParticles2D[27] = classDB.get_method_bind("GPUParticles2D\000", "get_process_material\000", 5934680)
		methodGPUParticles2D[28] = classDB.get_method_bind("GPUParticles2D\000", "get_speed_scale\000", 1740695150)
		methodGPUParticles2D[29] = classDB.get_method_bind("GPUParticles2D\000", "get_collision_base_size\000", 1740695150)
		methodGPUParticles2D[30] = classDB.get_method_bind("GPUParticles2D\000", "set_draw_order\000", 1939677959)
		methodGPUParticles2D[31] = classDB.get_method_bind("GPUParticles2D\000", "get_draw_order\000", 941479095)
		methodGPUParticles2D[32] = classDB.get_method_bind("GPUParticles2D\000", "set_texture\000", 4051416890)
		methodGPUParticles2D[33] = classDB.get_method_bind("GPUParticles2D\000", "get_texture\000", 3635182373)
		methodGPUParticles2D[34] = classDB.get_method_bind("GPUParticles2D\000", "capture_rect\000", 1639390495)
		methodGPUParticles2D[35] = classDB.get_method_bind("GPUParticles2D\000", "restart\000", 3218959716)
		methodGPUParticles2D[36] = classDB.get_method_bind("GPUParticles2D\000", "set_sub_emitter\000", 1348162250)
		methodGPUParticles2D[37] = classDB.get_method_bind("GPUParticles2D\000", "get_sub_emitter\000", 4075236667)
		methodGPUParticles2D[38] = classDB.get_method_bind("GPUParticles2D\000", "emit_particle\000", 2179202058)
		methodGPUParticles2D[39] = classDB.get_method_bind("GPUParticles2D\000", "set_trail_enabled\000", 2586408642)
		methodGPUParticles2D[40] = classDB.get_method_bind("GPUParticles2D\000", "set_trail_length\000", 373806689)
		methodGPUParticles2D[41] = classDB.get_method_bind("GPUParticles2D\000", "is_trail_enabled\000", 36873697)
		methodGPUParticles2D[42] = classDB.get_method_bind("GPUParticles2D\000", "get_trail_length\000", 1740695150)
		methodGPUParticles2D[43] = classDB.get_method_bind("GPUParticles2D\000", "set_trail_sections\000", 1286410249)
		methodGPUParticles2D[44] = classDB.get_method_bind("GPUParticles2D\000", "get_trail_sections\000", 3905245786)
		methodGPUParticles2D[45] = classDB.get_method_bind("GPUParticles2D\000", "set_trail_section_subdivisions\000", 1286410249)
		methodGPUParticles2D[46] = classDB.get_method_bind("GPUParticles2D\000", "get_trail_section_subdivisions\000", 3905245786)
		methodGPUParticles3D[0] = classDB.get_method_bind("GPUParticles3D\000", "set_emitting\000", 2586408642)
		methodGPUParticles3D[1] = classDB.get_method_bind("GPUParticles3D\000", "set_amount\000", 1286410249)
		methodGPUParticles3D[2] = classDB.get_method_bind("GPUParticles3D\000", "set_lifetime\000", 373806689)
		methodGPUParticles3D[3] = classDB.get_method_bind("GPUParticles3D\000", "set_one_shot\000", 2586408642)
		methodGPUParticles3D[4] = classDB.get_method_bind("GPUParticles3D\000", "set_pre_process_time\000", 373806689)
		methodGPUParticles3D[5] = classDB.get_method_bind("GPUParticles3D\000", "set_explosiveness_ratio\000", 373806689)
		methodGPUParticles3D[6] = classDB.get_method_bind("GPUParticles3D\000", "set_randomness_ratio\000", 373806689)
		methodGPUParticles3D[7] = classDB.get_method_bind("GPUParticles3D\000", "set_visibility_aabb\000", 259215842)
		methodGPUParticles3D[8] = classDB.get_method_bind("GPUParticles3D\000", "set_use_local_coordinates\000", 2586408642)
		methodGPUParticles3D[9] = classDB.get_method_bind("GPUParticles3D\000", "set_fixed_fps\000", 1286410249)
		methodGPUParticles3D[10] = classDB.get_method_bind("GPUParticles3D\000", "set_fractional_delta\000", 2586408642)
		methodGPUParticles3D[11] = classDB.get_method_bind("GPUParticles3D\000", "set_interpolate\000", 2586408642)
		methodGPUParticles3D[12] = classDB.get_method_bind("GPUParticles3D\000", "set_process_material\000", 2757459619)
		methodGPUParticles3D[13] = classDB.get_method_bind("GPUParticles3D\000", "set_speed_scale\000", 373806689)
		methodGPUParticles3D[14] = classDB.get_method_bind("GPUParticles3D\000", "set_collision_base_size\000", 373806689)
		methodGPUParticles3D[15] = classDB.get_method_bind("GPUParticles3D\000", "is_emitting\000", 36873697)
		methodGPUParticles3D[16] = classDB.get_method_bind("GPUParticles3D\000", "get_amount\000", 3905245786)
		methodGPUParticles3D[17] = classDB.get_method_bind("GPUParticles3D\000", "get_lifetime\000", 1740695150)
		methodGPUParticles3D[18] = classDB.get_method_bind("GPUParticles3D\000", "get_one_shot\000", 36873697)
		methodGPUParticles3D[19] = classDB.get_method_bind("GPUParticles3D\000", "get_pre_process_time\000", 1740695150)
		methodGPUParticles3D[20] = classDB.get_method_bind("GPUParticles3D\000", "get_explosiveness_ratio\000", 1740695150)
		methodGPUParticles3D[21] = classDB.get_method_bind("GPUParticles3D\000", "get_randomness_ratio\000", 1740695150)
		methodGPUParticles3D[22] = classDB.get_method_bind("GPUParticles3D\000", "get_visibility_aabb\000", 1068685055)
		methodGPUParticles3D[23] = classDB.get_method_bind("GPUParticles3D\000", "get_use_local_coordinates\000", 36873697)
		methodGPUParticles3D[24] = classDB.get_method_bind("GPUParticles3D\000", "get_fixed_fps\000", 3905245786)
		methodGPUParticles3D[25] = classDB.get_method_bind("GPUParticles3D\000", "get_fractional_delta\000", 36873697)
		methodGPUParticles3D[26] = classDB.get_method_bind("GPUParticles3D\000", "get_interpolate\000", 36873697)
		methodGPUParticles3D[27] = classDB.get_method_bind("GPUParticles3D\000", "get_process_material\000", 5934680)
		methodGPUParticles3D[28] = classDB.get_method_bind("GPUParticles3D\000", "get_speed_scale\000", 1740695150)
		methodGPUParticles3D[29] = classDB.get_method_bind("GPUParticles3D\000", "get_collision_base_size\000", 1740695150)
		methodGPUParticles3D[30] = classDB.get_method_bind("GPUParticles3D\000", "set_draw_order\000", 1208074815)
		methodGPUParticles3D[31] = classDB.get_method_bind("GPUParticles3D\000", "get_draw_order\000", 3770381780)
		methodGPUParticles3D[32] = classDB.get_method_bind("GPUParticles3D\000", "set_draw_passes\000", 1286410249)
		methodGPUParticles3D[33] = classDB.get_method_bind("GPUParticles3D\000", "set_draw_pass_mesh\000", 969122797)
		methodGPUParticles3D[34] = classDB.get_method_bind("GPUParticles3D\000", "get_draw_passes\000", 3905245786)
		methodGPUParticles3D[35] = classDB.get_method_bind("GPUParticles3D\000", "get_draw_pass_mesh\000", 1576363275)
		methodGPUParticles3D[36] = classDB.get_method_bind("GPUParticles3D\000", "set_skin\000", 3971435618)
		methodGPUParticles3D[37] = classDB.get_method_bind("GPUParticles3D\000", "get_skin\000", 2074563878)
		methodGPUParticles3D[38] = classDB.get_method_bind("GPUParticles3D\000", "restart\000", 3218959716)
		methodGPUParticles3D[39] = classDB.get_method_bind("GPUParticles3D\000", "capture_aabb\000", 1068685055)
		methodGPUParticles3D[40] = classDB.get_method_bind("GPUParticles3D\000", "set_sub_emitter\000", 1348162250)
		methodGPUParticles3D[41] = classDB.get_method_bind("GPUParticles3D\000", "get_sub_emitter\000", 4075236667)
		methodGPUParticles3D[42] = classDB.get_method_bind("GPUParticles3D\000", "emit_particle\000", 992173727)
		methodGPUParticles3D[43] = classDB.get_method_bind("GPUParticles3D\000", "set_trail_enabled\000", 2586408642)
		methodGPUParticles3D[44] = classDB.get_method_bind("GPUParticles3D\000", "set_trail_length\000", 373806689)
		methodGPUParticles3D[45] = classDB.get_method_bind("GPUParticles3D\000", "is_trail_enabled\000", 36873697)
		methodGPUParticles3D[46] = classDB.get_method_bind("GPUParticles3D\000", "get_trail_length\000", 1740695150)
		methodGPUParticles3D[47] = classDB.get_method_bind("GPUParticles3D\000", "set_transform_align\000", 3892425954)
		methodGPUParticles3D[48] = classDB.get_method_bind("GPUParticles3D\000", "get_transform_align\000", 2100992166)
		methodGPUParticlesAttractor3D[0] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "set_cull_mask\000", 1286410249)
		methodGPUParticlesAttractor3D[1] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "get_cull_mask\000", 3905245786)
		methodGPUParticlesAttractor3D[2] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "set_strength\000", 373806689)
		methodGPUParticlesAttractor3D[3] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "get_strength\000", 1740695150)
		methodGPUParticlesAttractor3D[4] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "set_attenuation\000", 373806689)
		methodGPUParticlesAttractor3D[5] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "get_attenuation\000", 1740695150)
		methodGPUParticlesAttractor3D[6] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "set_directionality\000", 373806689)
		methodGPUParticlesAttractor3D[7] = classDB.get_method_bind("GPUParticlesAttractor3D\000", "get_directionality\000", 1740695150)
		methodGPUParticlesAttractorBox3D[0] = classDB.get_method_bind("GPUParticlesAttractorBox3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesAttractorBox3D[1] = classDB.get_method_bind("GPUParticlesAttractorBox3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesAttractorSphere3D[0] = classDB.get_method_bind("GPUParticlesAttractorSphere3D\000", "set_radius\000", 373806689)
		methodGPUParticlesAttractorSphere3D[1] = classDB.get_method_bind("GPUParticlesAttractorSphere3D\000", "get_radius\000", 1740695150)
		methodGPUParticlesAttractorVectorField3D[0] = classDB.get_method_bind("GPUParticlesAttractorVectorField3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesAttractorVectorField3D[1] = classDB.get_method_bind("GPUParticlesAttractorVectorField3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesAttractorVectorField3D[2] = classDB.get_method_bind("GPUParticlesAttractorVectorField3D\000", "set_texture\000", 1188404210)
		methodGPUParticlesAttractorVectorField3D[3] = classDB.get_method_bind("GPUParticlesAttractorVectorField3D\000", "get_texture\000", 373985333)
		methodGPUParticlesCollision3D[0] = classDB.get_method_bind("GPUParticlesCollision3D\000", "set_cull_mask\000", 1286410249)
		methodGPUParticlesCollision3D[1] = classDB.get_method_bind("GPUParticlesCollision3D\000", "get_cull_mask\000", 3905245786)
		methodGPUParticlesCollisionBox3D[0] = classDB.get_method_bind("GPUParticlesCollisionBox3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionBox3D[1] = classDB.get_method_bind("GPUParticlesCollisionBox3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionHeightField3D[0] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionHeightField3D[1] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionHeightField3D[2] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "set_resolution\000", 1009996517)
		methodGPUParticlesCollisionHeightField3D[3] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "get_resolution\000", 1156065644)
		methodGPUParticlesCollisionHeightField3D[4] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "set_update_mode\000", 673680859)
		methodGPUParticlesCollisionHeightField3D[5] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "get_update_mode\000", 1998141380)
		methodGPUParticlesCollisionHeightField3D[6] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "set_follow_camera_enabled\000", 2586408642)
		methodGPUParticlesCollisionHeightField3D[7] = classDB.get_method_bind("GPUParticlesCollisionHeightField3D\000", "is_follow_camera_enabled\000", 36873697)
		methodGPUParticlesCollisionSDF3D[0] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_extents\000", 3460891852)
		methodGPUParticlesCollisionSDF3D[1] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_extents\000", 3360562783)
		methodGPUParticlesCollisionSDF3D[2] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_resolution\000", 1155629297)
		methodGPUParticlesCollisionSDF3D[3] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_resolution\000", 2919555867)
		methodGPUParticlesCollisionSDF3D[4] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_texture\000", 1188404210)
		methodGPUParticlesCollisionSDF3D[5] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_texture\000", 373985333)
		methodGPUParticlesCollisionSDF3D[6] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_thickness\000", 373806689)
		methodGPUParticlesCollisionSDF3D[7] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_thickness\000", 1740695150)
		methodGPUParticlesCollisionSDF3D[8] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_bake_mask\000", 1286410249)
		methodGPUParticlesCollisionSDF3D[9] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_bake_mask\000", 3905245786)
		methodGPUParticlesCollisionSDF3D[10] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "set_bake_mask_value\000", 300928843)
		methodGPUParticlesCollisionSDF3D[11] = classDB.get_method_bind("GPUParticlesCollisionSDF3D\000", "get_bake_mask_value\000", 1116898809)
		methodGPUParticlesCollisionSphere3D[0] = classDB.get_method_bind("GPUParticlesCollisionSphere3D\000", "set_radius\000", 373806689)
		methodGPUParticlesCollisionSphere3D[1] = classDB.get_method_bind("GPUParticlesCollisionSphere3D\000", "get_radius\000", 1740695150)
		methodGeneric6DOFJoint3D[0] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_param_x\000", 2018184242)
		methodGeneric6DOFJoint3D[1] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_param_x\000", 2599835054)
		methodGeneric6DOFJoint3D[2] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_param_y\000", 2018184242)
		methodGeneric6DOFJoint3D[3] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_param_y\000", 2599835054)
		methodGeneric6DOFJoint3D[4] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_param_z\000", 2018184242)
		methodGeneric6DOFJoint3D[5] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_param_z\000", 2599835054)
		methodGeneric6DOFJoint3D[6] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_flag_x\000", 2451594564)
		methodGeneric6DOFJoint3D[7] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_flag_x\000", 2122427807)
		methodGeneric6DOFJoint3D[8] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_flag_y\000", 2451594564)
		methodGeneric6DOFJoint3D[9] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_flag_y\000", 2122427807)
		methodGeneric6DOFJoint3D[10] = classDB.get_method_bind("Generic6DOFJoint3D\000", "set_flag_z\000", 2451594564)
		methodGeneric6DOFJoint3D[11] = classDB.get_method_bind("Generic6DOFJoint3D\000", "get_flag_z\000", 2122427807)
		methodGeometry2DSingleton[0] = classDB.get_method_bind("Geometry2D\000", "is_point_in_circle\000", 2929491703)
		methodGeometry2DSingleton[1] = classDB.get_method_bind("Geometry2D\000", "segment_intersects_circle\000", 1356928167)
		methodGeometry2DSingleton[2] = classDB.get_method_bind("Geometry2D\000", "segment_intersects_segment\000", 2058025344)
		methodGeometry2DSingleton[3] = classDB.get_method_bind("Geometry2D\000", "line_intersects_line\000", 2058025344)
		methodGeometry2DSingleton[4] = classDB.get_method_bind("Geometry2D\000", "get_closest_points_between_segments\000", 3344690961)
		methodGeometry2DSingleton[5] = classDB.get_method_bind("Geometry2D\000", "get_closest_point_to_segment\000", 4172901909)
		methodGeometry2DSingleton[6] = classDB.get_method_bind("Geometry2D\000", "get_closest_point_to_segment_uncapped\000", 4172901909)
		methodGeometry2DSingleton[7] = classDB.get_method_bind("Geometry2D\000", "point_is_inside_triangle\000", 1025948137)
		methodGeometry2DSingleton[8] = classDB.get_method_bind("Geometry2D\000", "is_polygon_clockwise\000", 1361156557)
		methodGeometry2DSingleton[9] = classDB.get_method_bind("Geometry2D\000", "is_point_in_polygon\000", 738277916)
		methodGeometry2DSingleton[10] = classDB.get_method_bind("Geometry2D\000", "triangulate_polygon\000", 1389921771)
		methodGeometry2DSingleton[11] = classDB.get_method_bind("Geometry2D\000", "triangulate_delaunay\000", 1389921771)
		methodGeometry2DSingleton[12] = classDB.get_method_bind("Geometry2D\000", "convex_hull\000", 2004331998)
		methodGeometry2DSingleton[13] = classDB.get_method_bind("Geometry2D\000", "merge_polygons\000", 3637387053)
		methodGeometry2DSingleton[14] = classDB.get_method_bind("Geometry2D\000", "clip_polygons\000", 3637387053)
		methodGeometry2DSingleton[15] = classDB.get_method_bind("Geometry2D\000", "intersect_polygons\000", 3637387053)
		methodGeometry2DSingleton[16] = classDB.get_method_bind("Geometry2D\000", "exclude_polygons\000", 3637387053)
		methodGeometry2DSingleton[17] = classDB.get_method_bind("Geometry2D\000", "clip_polyline_with_polygon\000", 3637387053)
		methodGeometry2DSingleton[18] = classDB.get_method_bind("Geometry2D\000", "intersect_polyline_with_polygon\000", 3637387053)
		methodGeometry2DSingleton[19] = classDB.get_method_bind("Geometry2D\000", "offset_polygon\000", 3837618924)
		methodGeometry2DSingleton[20] = classDB.get_method_bind("Geometry2D\000", "offset_polyline\000", 328033063)
		methodGeometry2DSingleton[21] = classDB.get_method_bind("Geometry2D\000", "make_atlas\000", 1337682371)
		methodGeometry3DSingleton[0] = classDB.get_method_bind("Geometry3D\000", "build_box_planes\000", 3622277145)
		methodGeometry3DSingleton[1] = classDB.get_method_bind("Geometry3D\000", "build_cylinder_planes\000", 3142160516)
		methodGeometry3DSingleton[2] = classDB.get_method_bind("Geometry3D\000", "build_capsule_planes\000", 410870045)
		methodGeometry3DSingleton[3] = classDB.get_method_bind("Geometry3D\000", "get_closest_points_between_segments\000", 1056373962)
		methodGeometry3DSingleton[4] = classDB.get_method_bind("Geometry3D\000", "get_closest_point_to_segment\000", 2168193209)
		methodGeometry3DSingleton[5] = classDB.get_method_bind("Geometry3D\000", "get_closest_point_to_segment_uncapped\000", 2168193209)
		methodGeometry3DSingleton[6] = classDB.get_method_bind("Geometry3D\000", "ray_intersects_triangle\000", 1718655448)
		methodGeometry3DSingleton[7] = classDB.get_method_bind("Geometry3D\000", "segment_intersects_triangle\000", 1718655448)
		methodGeometry3DSingleton[8] = classDB.get_method_bind("Geometry3D\000", "segment_intersects_sphere\000", 4080141172)
		methodGeometry3DSingleton[9] = classDB.get_method_bind("Geometry3D\000", "segment_intersects_cylinder\000", 2361316491)
		methodGeometry3DSingleton[10] = classDB.get_method_bind("Geometry3D\000", "segment_intersects_convex\000", 537425332)
		methodGeometry3DSingleton[11] = classDB.get_method_bind("Geometry3D\000", "clip_polygon\000", 2603188319)
		methodGeometryInstance3D[0] = classDB.get_method_bind("GeometryInstance3D\000", "set_material_override\000", 2757459619)
		methodGeometryInstance3D[1] = classDB.get_method_bind("GeometryInstance3D\000", "get_material_override\000", 5934680)
		methodGeometryInstance3D[2] = classDB.get_method_bind("GeometryInstance3D\000", "set_material_overlay\000", 2757459619)
		methodGeometryInstance3D[3] = classDB.get_method_bind("GeometryInstance3D\000", "get_material_overlay\000", 5934680)
		methodGeometryInstance3D[4] = classDB.get_method_bind("GeometryInstance3D\000", "set_cast_shadows_setting\000", 856677339)
		methodGeometryInstance3D[5] = classDB.get_method_bind("GeometryInstance3D\000", "get_cast_shadows_setting\000", 3383019359)
		methodGeometryInstance3D[6] = classDB.get_method_bind("GeometryInstance3D\000", "set_lod_bias\000", 373806689)
		methodGeometryInstance3D[7] = classDB.get_method_bind("GeometryInstance3D\000", "get_lod_bias\000", 1740695150)
		methodGeometryInstance3D[8] = classDB.get_method_bind("GeometryInstance3D\000", "set_transparency\000", 373806689)
		methodGeometryInstance3D[9] = classDB.get_method_bind("GeometryInstance3D\000", "get_transparency\000", 1740695150)
		methodGeometryInstance3D[10] = classDB.get_method_bind("GeometryInstance3D\000", "set_visibility_range_end_margin\000", 373806689)
		methodGeometryInstance3D[11] = classDB.get_method_bind("GeometryInstance3D\000", "get_visibility_range_end_margin\000", 1740695150)
		methodGeometryInstance3D[12] = classDB.get_method_bind("GeometryInstance3D\000", "set_visibility_range_end\000", 373806689)
		methodGeometryInstance3D[13] = classDB.get_method_bind("GeometryInstance3D\000", "get_visibility_range_end\000", 1740695150)
		methodGeometryInstance3D[14] = classDB.get_method_bind("GeometryInstance3D\000", "set_visibility_range_begin_margin\000", 373806689)
		methodGeometryInstance3D[15] = classDB.get_method_bind("GeometryInstance3D\000", "get_visibility_range_begin_margin\000", 1740695150)
		methodGeometryInstance3D[16] = classDB.get_method_bind("GeometryInstance3D\000", "set_visibility_range_begin\000", 373806689)
		methodGeometryInstance3D[17] = classDB.get_method_bind("GeometryInstance3D\000", "get_visibility_range_begin\000", 1740695150)
		methodGeometryInstance3D[18] = classDB.get_method_bind("GeometryInstance3D\000", "set_visibility_range_fade_mode\000", 1440117808)
		methodGeometryInstance3D[19] = classDB.get_method_bind("GeometryInstance3D\000", "get_visibility_range_fade_mode\000", 2067221882)
		methodGeometryInstance3D[20] = classDB.get_method_bind("GeometryInstance3D\000", "set_instance_shader_uniform\000", 3776071444)
		methodGeometryInstance3D[21] = classDB.get_method_bind("GeometryInstance3D\000", "get_instance_shader_uniform\000", 2760726917)
		methodGeometryInstance3D[22] = classDB.get_method_bind("GeometryInstance3D\000", "set_extra_cull_margin\000", 373806689)
		methodGeometryInstance3D[23] = classDB.get_method_bind("GeometryInstance3D\000", "get_extra_cull_margin\000", 1740695150)
		methodGeometryInstance3D[24] = classDB.get_method_bind("GeometryInstance3D\000", "set_lightmap_scale\000", 2462696582)
		methodGeometryInstance3D[25] = classDB.get_method_bind("GeometryInstance3D\000", "get_lightmap_scale\000", 798767852)
		methodGeometryInstance3D[26] = classDB.get_method_bind("GeometryInstance3D\000", "set_gi_mode\000", 2548557163)
		methodGeometryInstance3D[27] = classDB.get_method_bind("GeometryInstance3D\000", "get_gi_mode\000", 2188566509)
		methodGeometryInstance3D[28] = classDB.get_method_bind("GeometryInstance3D\000", "set_ignore_occlusion_culling\000", 2586408642)
		methodGeometryInstance3D[29] = classDB.get_method_bind("GeometryInstance3D\000", "is_ignoring_occlusion_culling\000", 2240911060)
		methodGeometryInstance3D[30] = classDB.get_method_bind("GeometryInstance3D\000", "set_custom_aabb\000", 259215842)
		methodGradient[0] = classDB.get_method_bind("Gradient\000", "add_point\000", 3629403827)
		methodGradient[1] = classDB.get_method_bind("Gradient\000", "remove_point\000", 1286410249)
		methodGradient[2] = classDB.get_method_bind("Gradient\000", "set_offset\000", 1602489585)
		methodGradient[3] = classDB.get_method_bind("Gradient\000", "get_offset\000", 4025615559)
		methodGradient[4] = classDB.get_method_bind("Gradient\000", "reverse\000", 3218959716)
		methodGradient[5] = classDB.get_method_bind("Gradient\000", "set_color\000", 2878471219)
		methodGradient[6] = classDB.get_method_bind("Gradient\000", "get_color\000", 2624840992)
		methodGradient[7] = classDB.get_method_bind("Gradient\000", "interpolate\000", 1250405064)
		methodGradient[8] = classDB.get_method_bind("Gradient\000", "get_point_count\000", 3905245786)
		methodGradient[9] = classDB.get_method_bind("Gradient\000", "set_offsets\000", 2899603908)
		methodGradient[10] = classDB.get_method_bind("Gradient\000", "get_offsets\000", 675695659)
		methodGradient[11] = classDB.get_method_bind("Gradient\000", "set_colors\000", 3546319833)
		methodGradient[12] = classDB.get_method_bind("Gradient\000", "get_colors\000", 1392750486)
		methodGradient[13] = classDB.get_method_bind("Gradient\000", "set_interpolation_mode\000", 1971444490)
		methodGradient[14] = classDB.get_method_bind("Gradient\000", "get_interpolation_mode\000", 3674172981)
		methodGradientTexture1D[0] = classDB.get_method_bind("GradientTexture1D\000", "set_gradient\000", 2756054477)
		methodGradientTexture1D[1] = classDB.get_method_bind("GradientTexture1D\000", "get_gradient\000", 132272999)
		methodGradientTexture1D[2] = classDB.get_method_bind("GradientTexture1D\000", "set_width\000", 1286410249)
		methodGradientTexture1D[3] = classDB.get_method_bind("GradientTexture1D\000", "set_use_hdr\000", 2586408642)
		methodGradientTexture1D[4] = classDB.get_method_bind("GradientTexture1D\000", "is_using_hdr\000", 36873697)
		methodGradientTexture2D[0] = classDB.get_method_bind("GradientTexture2D\000", "set_gradient\000", 2756054477)
		methodGradientTexture2D[1] = classDB.get_method_bind("GradientTexture2D\000", "get_gradient\000", 132272999)
		methodGradientTexture2D[2] = classDB.get_method_bind("GradientTexture2D\000", "set_width\000", 1286410249)
		methodGradientTexture2D[3] = classDB.get_method_bind("GradientTexture2D\000", "set_height\000", 1286410249)
		methodGradientTexture2D[4] = classDB.get_method_bind("GradientTexture2D\000", "set_use_hdr\000", 2586408642)
		methodGradientTexture2D[5] = classDB.get_method_bind("GradientTexture2D\000", "is_using_hdr\000", 36873697)
		methodGradientTexture2D[6] = classDB.get_method_bind("GradientTexture2D\000", "set_fill\000", 3623927636)
		methodGradientTexture2D[7] = classDB.get_method_bind("GradientTexture2D\000", "get_fill\000", 1876227217)
		methodGradientTexture2D[8] = classDB.get_method_bind("GradientTexture2D\000", "set_fill_from\000", 743155724)
		methodGradientTexture2D[9] = classDB.get_method_bind("GradientTexture2D\000", "get_fill_from\000", 3341600327)
		methodGradientTexture2D[10] = classDB.get_method_bind("GradientTexture2D\000", "set_fill_to\000", 743155724)
		methodGradientTexture2D[11] = classDB.get_method_bind("GradientTexture2D\000", "get_fill_to\000", 3341600327)
		methodGradientTexture2D[12] = classDB.get_method_bind("GradientTexture2D\000", "set_repeat\000", 1357597002)
		methodGradientTexture2D[13] = classDB.get_method_bind("GradientTexture2D\000", "get_repeat\000", 3351758665)
		methodGraphEdit[0] = classDB.get_method_bind("GraphEdit\000", "connect_node\000", 195065850)
		methodGraphEdit[1] = classDB.get_method_bind("GraphEdit\000", "is_node_connected\000", 4216241294)
		methodGraphEdit[2] = classDB.get_method_bind("GraphEdit\000", "disconnect_node\000", 1933654315)
		methodGraphEdit[3] = classDB.get_method_bind("GraphEdit\000", "set_connection_activity\000", 1141899943)
		methodGraphEdit[4] = classDB.get_method_bind("GraphEdit\000", "get_connection_list\000", 3995934104)
		methodGraphEdit[5] = classDB.get_method_bind("GraphEdit\000", "clear_connections\000", 3218959716)
		methodGraphEdit[6] = classDB.get_method_bind("GraphEdit\000", "force_connection_drag_end\000", 3218959716)
		methodGraphEdit[7] = classDB.get_method_bind("GraphEdit\000", "get_scroll_ofs\000", 3341600327)
		methodGraphEdit[8] = classDB.get_method_bind("GraphEdit\000", "set_scroll_ofs\000", 743155724)
		methodGraphEdit[9] = classDB.get_method_bind("GraphEdit\000", "add_valid_right_disconnect_type\000", 1286410249)
		methodGraphEdit[10] = classDB.get_method_bind("GraphEdit\000", "remove_valid_right_disconnect_type\000", 1286410249)
		methodGraphEdit[11] = classDB.get_method_bind("GraphEdit\000", "add_valid_left_disconnect_type\000", 1286410249)
		methodGraphEdit[12] = classDB.get_method_bind("GraphEdit\000", "remove_valid_left_disconnect_type\000", 1286410249)
		methodGraphEdit[13] = classDB.get_method_bind("GraphEdit\000", "add_valid_connection_type\000", 3937882851)
		methodGraphEdit[14] = classDB.get_method_bind("GraphEdit\000", "remove_valid_connection_type\000", 3937882851)
		methodGraphEdit[15] = classDB.get_method_bind("GraphEdit\000", "is_valid_connection_type\000", 2522259332)
		methodGraphEdit[16] = classDB.get_method_bind("GraphEdit\000", "get_connection_line\000", 1562168077)
		methodGraphEdit[17] = classDB.get_method_bind("GraphEdit\000", "set_panning_scheme\000", 18893313)
		methodGraphEdit[18] = classDB.get_method_bind("GraphEdit\000", "get_panning_scheme\000", 549924446)
		methodGraphEdit[19] = classDB.get_method_bind("GraphEdit\000", "set_zoom\000", 373806689)
		methodGraphEdit[20] = classDB.get_method_bind("GraphEdit\000", "get_zoom\000", 1740695150)
		methodGraphEdit[21] = classDB.get_method_bind("GraphEdit\000", "set_zoom_min\000", 373806689)
		methodGraphEdit[22] = classDB.get_method_bind("GraphEdit\000", "get_zoom_min\000", 1740695150)
		methodGraphEdit[23] = classDB.get_method_bind("GraphEdit\000", "set_zoom_max\000", 373806689)
		methodGraphEdit[24] = classDB.get_method_bind("GraphEdit\000", "get_zoom_max\000", 1740695150)
		methodGraphEdit[25] = classDB.get_method_bind("GraphEdit\000", "set_zoom_step\000", 373806689)
		methodGraphEdit[26] = classDB.get_method_bind("GraphEdit\000", "get_zoom_step\000", 1740695150)
		methodGraphEdit[27] = classDB.get_method_bind("GraphEdit\000", "set_show_zoom_label\000", 2586408642)
		methodGraphEdit[28] = classDB.get_method_bind("GraphEdit\000", "is_showing_zoom_label\000", 36873697)
		methodGraphEdit[29] = classDB.get_method_bind("GraphEdit\000", "set_snap\000", 1286410249)
		methodGraphEdit[30] = classDB.get_method_bind("GraphEdit\000", "get_snap\000", 3905245786)
		methodGraphEdit[31] = classDB.get_method_bind("GraphEdit\000", "set_use_snap\000", 2586408642)
		methodGraphEdit[32] = classDB.get_method_bind("GraphEdit\000", "is_using_snap\000", 36873697)
		methodGraphEdit[33] = classDB.get_method_bind("GraphEdit\000", "set_connection_lines_curvature\000", 373806689)
		methodGraphEdit[34] = classDB.get_method_bind("GraphEdit\000", "get_connection_lines_curvature\000", 1740695150)
		methodGraphEdit[35] = classDB.get_method_bind("GraphEdit\000", "set_connection_lines_thickness\000", 373806689)
		methodGraphEdit[36] = classDB.get_method_bind("GraphEdit\000", "get_connection_lines_thickness\000", 1740695150)
		methodGraphEdit[37] = classDB.get_method_bind("GraphEdit\000", "set_connection_lines_antialiased\000", 2586408642)
		methodGraphEdit[38] = classDB.get_method_bind("GraphEdit\000", "is_connection_lines_antialiased\000", 36873697)
		methodGraphEdit[39] = classDB.get_method_bind("GraphEdit\000", "set_minimap_size\000", 743155724)
		methodGraphEdit[40] = classDB.get_method_bind("GraphEdit\000", "get_minimap_size\000", 3341600327)
		methodGraphEdit[41] = classDB.get_method_bind("GraphEdit\000", "set_minimap_opacity\000", 373806689)
		methodGraphEdit[42] = classDB.get_method_bind("GraphEdit\000", "get_minimap_opacity\000", 1740695150)
		methodGraphEdit[43] = classDB.get_method_bind("GraphEdit\000", "set_minimap_enabled\000", 2586408642)
		methodGraphEdit[44] = classDB.get_method_bind("GraphEdit\000", "is_minimap_enabled\000", 36873697)
		methodGraphEdit[45] = classDB.get_method_bind("GraphEdit\000", "set_arrange_nodes_button_hidden\000", 2586408642)
		methodGraphEdit[46] = classDB.get_method_bind("GraphEdit\000", "is_arrange_nodes_button_hidden\000", 36873697)
		methodGraphEdit[47] = classDB.get_method_bind("GraphEdit\000", "set_right_disconnects\000", 2586408642)
		methodGraphEdit[48] = classDB.get_method_bind("GraphEdit\000", "is_right_disconnects_enabled\000", 36873697)
		methodGraphEdit[49] = classDB.get_method_bind("GraphEdit\000", "get_zoom_hbox\000", 3590609951)
		methodGraphEdit[50] = classDB.get_method_bind("GraphEdit\000", "arrange_nodes\000", 3218959716)
		methodGraphEdit[51] = classDB.get_method_bind("GraphEdit\000", "set_selected\000", 1078189570)
		methodGraphNode[0] = classDB.get_method_bind("GraphNode\000", "set_title\000", 83702148)
		methodGraphNode[1] = classDB.get_method_bind("GraphNode\000", "get_title\000", 201670096)
		methodGraphNode[2] = classDB.get_method_bind("GraphNode\000", "set_text_direction\000", 119160795)
		methodGraphNode[3] = classDB.get_method_bind("GraphNode\000", "get_text_direction\000", 797257663)
		methodGraphNode[4] = classDB.get_method_bind("GraphNode\000", "set_language\000", 83702148)
		methodGraphNode[5] = classDB.get_method_bind("GraphNode\000", "get_language\000", 201670096)
		methodGraphNode[6] = classDB.get_method_bind("GraphNode\000", "set_slot\000", 902131739)
		methodGraphNode[7] = classDB.get_method_bind("GraphNode\000", "clear_slot\000", 1286410249)
		methodGraphNode[8] = classDB.get_method_bind("GraphNode\000", "clear_all_slots\000", 3218959716)
		methodGraphNode[9] = classDB.get_method_bind("GraphNode\000", "is_slot_enabled_left\000", 1116898809)
		methodGraphNode[10] = classDB.get_method_bind("GraphNode\000", "set_slot_enabled_left\000", 300928843)
		methodGraphNode[11] = classDB.get_method_bind("GraphNode\000", "set_slot_type_left\000", 3937882851)
		methodGraphNode[12] = classDB.get_method_bind("GraphNode\000", "get_slot_type_left\000", 923996154)
		methodGraphNode[13] = classDB.get_method_bind("GraphNode\000", "set_slot_color_left\000", 2878471219)
		methodGraphNode[14] = classDB.get_method_bind("GraphNode\000", "get_slot_color_left\000", 3457211756)
		methodGraphNode[15] = classDB.get_method_bind("GraphNode\000", "is_slot_enabled_right\000", 1116898809)
		methodGraphNode[16] = classDB.get_method_bind("GraphNode\000", "set_slot_enabled_right\000", 300928843)
		methodGraphNode[17] = classDB.get_method_bind("GraphNode\000", "set_slot_type_right\000", 3937882851)
		methodGraphNode[18] = classDB.get_method_bind("GraphNode\000", "get_slot_type_right\000", 923996154)
		methodGraphNode[19] = classDB.get_method_bind("GraphNode\000", "set_slot_color_right\000", 2878471219)
		methodGraphNode[20] = classDB.get_method_bind("GraphNode\000", "get_slot_color_right\000", 3457211756)
		methodGraphNode[21] = classDB.get_method_bind("GraphNode\000", "is_slot_draw_stylebox\000", 1116898809)
		methodGraphNode[22] = classDB.get_method_bind("GraphNode\000", "set_slot_draw_stylebox\000", 300928843)
		methodGraphNode[23] = classDB.get_method_bind("GraphNode\000", "set_position_offset\000", 743155724)
		methodGraphNode[24] = classDB.get_method_bind("GraphNode\000", "get_position_offset\000", 3341600327)
		methodGraphNode[25] = classDB.get_method_bind("GraphNode\000", "set_comment\000", 2586408642)
		methodGraphNode[26] = classDB.get_method_bind("GraphNode\000", "is_comment\000", 36873697)
		methodGraphNode[27] = classDB.get_method_bind("GraphNode\000", "set_resizable\000", 2586408642)
		methodGraphNode[28] = classDB.get_method_bind("GraphNode\000", "is_resizable\000", 36873697)
		methodGraphNode[29] = classDB.get_method_bind("GraphNode\000", "set_draggable\000", 2586408642)
		methodGraphNode[30] = classDB.get_method_bind("GraphNode\000", "is_draggable\000", 2240911060)
		methodGraphNode[31] = classDB.get_method_bind("GraphNode\000", "set_selectable\000", 2586408642)
		methodGraphNode[32] = classDB.get_method_bind("GraphNode\000", "is_selectable\000", 2240911060)
		methodGraphNode[33] = classDB.get_method_bind("GraphNode\000", "set_selected\000", 2586408642)
		methodGraphNode[34] = classDB.get_method_bind("GraphNode\000", "is_selected\000", 2240911060)
		methodGraphNode[35] = classDB.get_method_bind("GraphNode\000", "get_connection_input_count\000", 2455072627)
		methodGraphNode[36] = classDB.get_method_bind("GraphNode\000", "get_connection_input_height\000", 3744713108)
		methodGraphNode[37] = classDB.get_method_bind("GraphNode\000", "get_connection_input_position\000", 3114997196)
		methodGraphNode[38] = classDB.get_method_bind("GraphNode\000", "get_connection_input_type\000", 3744713108)
		methodGraphNode[39] = classDB.get_method_bind("GraphNode\000", "get_connection_input_color\000", 2624840992)
		methodGraphNode[40] = classDB.get_method_bind("GraphNode\000", "get_connection_output_count\000", 2455072627)
		methodGraphNode[41] = classDB.get_method_bind("GraphNode\000", "get_connection_output_height\000", 3744713108)
		methodGraphNode[42] = classDB.get_method_bind("GraphNode\000", "get_connection_output_position\000", 3114997196)
		methodGraphNode[43] = classDB.get_method_bind("GraphNode\000", "get_connection_output_type\000", 3744713108)
		methodGraphNode[44] = classDB.get_method_bind("GraphNode\000", "get_connection_output_color\000", 2624840992)
		methodGraphNode[45] = classDB.get_method_bind("GraphNode\000", "set_show_close_button\000", 2586408642)
		methodGraphNode[46] = classDB.get_method_bind("GraphNode\000", "is_close_button_visible\000", 36873697)
		methodGraphNode[47] = classDB.get_method_bind("GraphNode\000", "set_overlay\000", 3144190109)
		methodGraphNode[48] = classDB.get_method_bind("GraphNode\000", "get_overlay\000", 2854257040)
		methodGridContainer[0] = classDB.get_method_bind("GridContainer\000", "set_columns\000", 1286410249)
		methodGridContainer[1] = classDB.get_method_bind("GridContainer\000", "get_columns\000", 3905245786)
		methodGridMap[0] = classDB.get_method_bind("GridMap\000", "set_collision_layer\000", 1286410249)
		methodGridMap[1] = classDB.get_method_bind("GridMap\000", "get_collision_layer\000", 3905245786)
		methodGridMap[2] = classDB.get_method_bind("GridMap\000", "set_collision_mask\000", 1286410249)
		methodGridMap[3] = classDB.get_method_bind("GridMap\000", "get_collision_mask\000", 3905245786)
		methodGridMap[4] = classDB.get_method_bind("GridMap\000", "set_collision_mask_value\000", 300928843)
		methodGridMap[5] = classDB.get_method_bind("GridMap\000", "get_collision_mask_value\000", 1116898809)
		methodGridMap[6] = classDB.get_method_bind("GridMap\000", "set_collision_layer_value\000", 300928843)
		methodGridMap[7] = classDB.get_method_bind("GridMap\000", "get_collision_layer_value\000", 1116898809)
		methodGridMap[8] = classDB.get_method_bind("GridMap\000", "set_physics_material\000", 1784508650)
		methodGridMap[9] = classDB.get_method_bind("GridMap\000", "get_physics_material\000", 2521850424)
		methodGridMap[10] = classDB.get_method_bind("GridMap\000", "set_bake_navigation\000", 2586408642)
		methodGridMap[11] = classDB.get_method_bind("GridMap\000", "is_baking_navigation\000", 2240911060)
		methodGridMap[12] = classDB.get_method_bind("GridMap\000", "set_navigation_layers\000", 1286410249)
		methodGridMap[13] = classDB.get_method_bind("GridMap\000", "get_navigation_layers\000", 3905245786)
		methodGridMap[14] = classDB.get_method_bind("GridMap\000", "set_navigation_layer_value\000", 300928843)
		methodGridMap[15] = classDB.get_method_bind("GridMap\000", "get_navigation_layer_value\000", 1116898809)
		methodGridMap[16] = classDB.get_method_bind("GridMap\000", "set_mesh_library\000", 1488083439)
		methodGridMap[17] = classDB.get_method_bind("GridMap\000", "get_mesh_library\000", 3350993772)
		methodGridMap[18] = classDB.get_method_bind("GridMap\000", "set_cell_size\000", 3460891852)
		methodGridMap[19] = classDB.get_method_bind("GridMap\000", "get_cell_size\000", 3360562783)
		methodGridMap[20] = classDB.get_method_bind("GridMap\000", "set_cell_scale\000", 373806689)
		methodGridMap[21] = classDB.get_method_bind("GridMap\000", "get_cell_scale\000", 1740695150)
		methodGridMap[22] = classDB.get_method_bind("GridMap\000", "set_octant_size\000", 1286410249)
		methodGridMap[23] = classDB.get_method_bind("GridMap\000", "get_octant_size\000", 3905245786)
		methodGridMap[24] = classDB.get_method_bind("GridMap\000", "set_cell_item\000", 4177201334)
		methodGridMap[25] = classDB.get_method_bind("GridMap\000", "get_cell_item\000", 3724960147)
		methodGridMap[26] = classDB.get_method_bind("GridMap\000", "get_cell_item_orientation\000", 3724960147)
		methodGridMap[27] = classDB.get_method_bind("GridMap\000", "get_cell_item_basis\000", 3493604918)
		methodGridMap[28] = classDB.get_method_bind("GridMap\000", "get_basis_with_orthogonal_index\000", 2816196998)
		methodGridMap[29] = classDB.get_method_bind("GridMap\000", "get_orthogonal_index_from_basis\000", 4210359952)
		methodGridMap[30] = classDB.get_method_bind("GridMap\000", "world_to_map\000", 1257687843)
		methodGridMap[31] = classDB.get_method_bind("GridMap\000", "map_to_world\000", 1088329196)
		methodGridMap[32] = classDB.get_method_bind("GridMap\000", "resource_changed\000", 968641751)
		methodGridMap[33] = classDB.get_method_bind("GridMap\000", "set_center_x\000", 2586408642)
		methodGridMap[34] = classDB.get_method_bind("GridMap\000", "get_center_x\000", 36873697)
		methodGridMap[35] = classDB.get_method_bind("GridMap\000", "set_center_y\000", 2586408642)
		methodGridMap[36] = classDB.get_method_bind("GridMap\000", "get_center_y\000", 36873697)
		methodGridMap[37] = classDB.get_method_bind("GridMap\000", "set_center_z\000", 2586408642)
		methodGridMap[38] = classDB.get_method_bind("GridMap\000", "get_center_z\000", 36873697)
		methodGridMap[39] = classDB.get_method_bind("GridMap\000", "clear\000", 3218959716)
		methodGridMap[40] = classDB.get_method_bind("GridMap\000", "get_used_cells\000", 3995934104)
		methodGridMap[41] = classDB.get_method_bind("GridMap\000", "get_used_cells_by_item\000", 663333327)
		methodGridMap[42] = classDB.get_method_bind("GridMap\000", "get_meshes\000", 3995934104)
		methodGridMap[43] = classDB.get_method_bind("GridMap\000", "get_bake_meshes\000", 2915620761)
		methodGridMap[44] = classDB.get_method_bind("GridMap\000", "get_bake_mesh_instance\000", 937000113)
		methodGridMap[45] = classDB.get_method_bind("GridMap\000", "clear_baked_meshes\000", 3218959716)
		methodGridMap[46] = classDB.get_method_bind("GridMap\000", "make_baked_meshes\000", 1135556294)
		methodGrooveJoint2D[0] = classDB.get_method_bind("GrooveJoint2D\000", "set_length\000", 373806689)
		methodGrooveJoint2D[1] = classDB.get_method_bind("GrooveJoint2D\000", "get_length\000", 1740695150)
		methodGrooveJoint2D[2] = classDB.get_method_bind("GrooveJoint2D\000", "set_initial_offset\000", 373806689)
		methodGrooveJoint2D[3] = classDB.get_method_bind("GrooveJoint2D\000", "get_initial_offset\000", 1740695150)
		methodHMACContext[0] = classDB.get_method_bind("HMACContext\000", "start\000", 3537364598)
		methodHMACContext[1] = classDB.get_method_bind("HMACContext\000", "update\000", 680677267)
		methodHMACContext[2] = classDB.get_method_bind("HMACContext\000", "finish\000", 2115431945)
		methodHTTPClient[0] = classDB.get_method_bind("HTTPClient\000", "connect_to_host\000", 2602796911)
		methodHTTPClient[1] = classDB.get_method_bind("HTTPClient\000", "set_connection\000", 3281897016)
		methodHTTPClient[2] = classDB.get_method_bind("HTTPClient\000", "get_connection\000", 2741655269)
		methodHTTPClient[3] = classDB.get_method_bind("HTTPClient\000", "request_raw\000", 540161961)
		methodHTTPClient[4] = classDB.get_method_bind("HTTPClient\000", "request\000", 3249905507)
		methodHTTPClient[5] = classDB.get_method_bind("HTTPClient\000", "close\000", 3218959716)
		methodHTTPClient[6] = classDB.get_method_bind("HTTPClient\000", "has_response\000", 36873697)
		methodHTTPClient[7] = classDB.get_method_bind("HTTPClient\000", "is_response_chunked\000", 36873697)
		methodHTTPClient[8] = classDB.get_method_bind("HTTPClient\000", "get_response_code\000", 3905245786)
		methodHTTPClient[9] = classDB.get_method_bind("HTTPClient\000", "get_response_headers\000", 2981934095)
		methodHTTPClient[10] = classDB.get_method_bind("HTTPClient\000", "get_response_headers_as_dictionary\000", 2382534195)
		methodHTTPClient[11] = classDB.get_method_bind("HTTPClient\000", "get_response_body_length\000", 3905245786)
		methodHTTPClient[12] = classDB.get_method_bind("HTTPClient\000", "read_response_body_chunk\000", 2115431945)
		methodHTTPClient[13] = classDB.get_method_bind("HTTPClient\000", "set_read_chunk_size\000", 1286410249)
		methodHTTPClient[14] = classDB.get_method_bind("HTTPClient\000", "get_read_chunk_size\000", 3905245786)
		methodHTTPClient[15] = classDB.get_method_bind("HTTPClient\000", "set_blocking_mode\000", 2586408642)
		methodHTTPClient[16] = classDB.get_method_bind("HTTPClient\000", "is_blocking_mode_enabled\000", 36873697)
		methodHTTPClient[17] = classDB.get_method_bind("HTTPClient\000", "get_status\000", 1426656811)
		methodHTTPClient[18] = classDB.get_method_bind("HTTPClient\000", "poll\000", 166280745)
		methodHTTPClient[19] = classDB.get_method_bind("HTTPClient\000", "set_http_proxy\000", 2956805083)
		methodHTTPClient[20] = classDB.get_method_bind("HTTPClient\000", "set_https_proxy\000", 2956805083)
		methodHTTPClient[21] = classDB.get_method_bind("HTTPClient\000", "query_string_from_dict\000", 2538086567)
		methodHTTPRequest[0] = classDB.get_method_bind("HTTPRequest\000", "request\000", 1899023990)
		methodHTTPRequest[1] = classDB.get_method_bind("HTTPRequest\000", "request_raw\000", 3236422912)
		methodHTTPRequest[2] = classDB.get_method_bind("HTTPRequest\000", "cancel_request\000", 3218959716)
		methodHTTPRequest[3] = classDB.get_method_bind("HTTPRequest\000", "get_http_client_status\000", 1426656811)
		methodHTTPRequest[4] = classDB.get_method_bind("HTTPRequest\000", "set_use_threads\000", 2586408642)
		methodHTTPRequest[5] = classDB.get_method_bind("HTTPRequest\000", "is_using_threads\000", 36873697)
		methodHTTPRequest[6] = classDB.get_method_bind("HTTPRequest\000", "set_accept_gzip\000", 2586408642)
		methodHTTPRequest[7] = classDB.get_method_bind("HTTPRequest\000", "is_accepting_gzip\000", 36873697)
		methodHTTPRequest[8] = classDB.get_method_bind("HTTPRequest\000", "set_body_size_limit\000", 1286410249)
		methodHTTPRequest[9] = classDB.get_method_bind("HTTPRequest\000", "get_body_size_limit\000", 3905245786)
		methodHTTPRequest[10] = classDB.get_method_bind("HTTPRequest\000", "set_max_redirects\000", 1286410249)
		methodHTTPRequest[11] = classDB.get_method_bind("HTTPRequest\000", "get_max_redirects\000", 3905245786)
		methodHTTPRequest[12] = classDB.get_method_bind("HTTPRequest\000", "set_download_file\000", 83702148)
		methodHTTPRequest[13] = classDB.get_method_bind("HTTPRequest\000", "get_download_file\000", 201670096)
		methodHTTPRequest[14] = classDB.get_method_bind("HTTPRequest\000", "get_downloaded_bytes\000", 3905245786)
		methodHTTPRequest[15] = classDB.get_method_bind("HTTPRequest\000", "get_body_size\000", 3905245786)
		methodHTTPRequest[16] = classDB.get_method_bind("HTTPRequest\000", "set_timeout\000", 373806689)
		methodHTTPRequest[17] = classDB.get_method_bind("HTTPRequest\000", "get_timeout\000", 191475506)
		methodHTTPRequest[18] = classDB.get_method_bind("HTTPRequest\000", "set_download_chunk_size\000", 1286410249)
		methodHTTPRequest[19] = classDB.get_method_bind("HTTPRequest\000", "get_download_chunk_size\000", 3905245786)
		methodHTTPRequest[20] = classDB.get_method_bind("HTTPRequest\000", "set_http_proxy\000", 2956805083)
		methodHTTPRequest[21] = classDB.get_method_bind("HTTPRequest\000", "set_https_proxy\000", 2956805083)
		methodHashingContext[0] = classDB.get_method_bind("HashingContext\000", "start\000", 3940338335)
		methodHashingContext[1] = classDB.get_method_bind("HashingContext\000", "update\000", 680677267)
		methodHashingContext[2] = classDB.get_method_bind("HashingContext\000", "finish\000", 2115431945)
		methodHeightMapShape3D[0] = classDB.get_method_bind("HeightMapShape3D\000", "set_map_width\000", 1286410249)
		methodHeightMapShape3D[1] = classDB.get_method_bind("HeightMapShape3D\000", "get_map_width\000", 3905245786)
		methodHeightMapShape3D[2] = classDB.get_method_bind("HeightMapShape3D\000", "set_map_depth\000", 1286410249)
		methodHeightMapShape3D[3] = classDB.get_method_bind("HeightMapShape3D\000", "get_map_depth\000", 3905245786)
		methodHeightMapShape3D[4] = classDB.get_method_bind("HeightMapShape3D\000", "set_map_data\000", 2899603908)
		methodHeightMapShape3D[5] = classDB.get_method_bind("HeightMapShape3D\000", "get_map_data\000", 675695659)
		methodHingeJoint3D[0] = classDB.get_method_bind("HingeJoint3D\000", "set_param\000", 3082977519)
		methodHingeJoint3D[1] = classDB.get_method_bind("HingeJoint3D\000", "get_param\000", 4066002676)
		methodHingeJoint3D[2] = classDB.get_method_bind("HingeJoint3D\000", "set_flag\000", 1083494620)
		methodHingeJoint3D[3] = classDB.get_method_bind("HingeJoint3D\000", "get_flag\000", 2841369610)
		methodIPSingleton[0] = classDB.get_method_bind("IP\000", "resolve_hostname\000", 396864159)
		methodIPSingleton[1] = classDB.get_method_bind("IP\000", "resolve_hostname_addresses\000", 3462780090)
		methodIPSingleton[2] = classDB.get_method_bind("IP\000", "resolve_hostname_queue_item\000", 3936392508)
		methodIPSingleton[3] = classDB.get_method_bind("IP\000", "get_resolve_item_status\000", 3812250196)
		methodIPSingleton[4] = classDB.get_method_bind("IP\000", "get_resolve_item_address\000", 844755477)
		methodIPSingleton[5] = classDB.get_method_bind("IP\000", "get_resolve_item_addresses\000", 663333327)
		methodIPSingleton[6] = classDB.get_method_bind("IP\000", "erase_resolve_item\000", 1286410249)
		methodIPSingleton[7] = classDB.get_method_bind("IP\000", "get_local_addresses\000", 1139954409)
		methodIPSingleton[8] = classDB.get_method_bind("IP\000", "get_local_interfaces\000", 3995934104)
		methodIPSingleton[9] = classDB.get_method_bind("IP\000", "clear_cache\000", 3005725572)
		methodImage[0] = classDB.get_method_bind("Image\000", "get_width\000", 3905245786)
		methodImage[1] = classDB.get_method_bind("Image\000", "get_height\000", 3905245786)
		methodImage[2] = classDB.get_method_bind("Image\000", "get_size\000", 3690982128)
		methodImage[3] = classDB.get_method_bind("Image\000", "has_mipmaps\000", 36873697)
		methodImage[4] = classDB.get_method_bind("Image\000", "get_format\000", 3847873762)
		methodImage[5] = classDB.get_method_bind("Image\000", "get_data\000", 2362200018)
		methodImage[6] = classDB.get_method_bind("Image\000", "convert\000", 2120693146)
		methodImage[7] = classDB.get_method_bind("Image\000", "get_mipmap_offset\000", 923996154)
		methodImage[8] = classDB.get_method_bind("Image\000", "resize_to_po2\000", 4189212329)
		methodImage[9] = classDB.get_method_bind("Image\000", "resize\000", 2461393748)
		methodImage[10] = classDB.get_method_bind("Image\000", "shrink_x2\000", 3218959716)
		methodImage[11] = classDB.get_method_bind("Image\000", "crop\000", 3937882851)
		methodImage[12] = classDB.get_method_bind("Image\000", "flip_x\000", 3218959716)
		methodImage[13] = classDB.get_method_bind("Image\000", "flip_y\000", 3218959716)
		methodImage[14] = classDB.get_method_bind("Image\000", "generate_mipmaps\000", 1633102583)
		methodImage[15] = classDB.get_method_bind("Image\000", "clear_mipmaps\000", 3218959716)
		methodImage[16] = classDB.get_method_bind("Image\000", "create\000", 2904688759)
		methodImage[17] = classDB.get_method_bind("Image\000", "create_from_data\000", 2740482212)
		methodImage[18] = classDB.get_method_bind("Image\000", "is_empty\000", 36873697)
		methodImage[19] = classDB.get_method_bind("Image\000", "load\000", 166001499)
		methodImage[20] = classDB.get_method_bind("Image\000", "load_from_file\000", 736337515)
		methodImage[21] = classDB.get_method_bind("Image\000", "save_png\000", 2113323047)
		methodImage[22] = classDB.get_method_bind("Image\000", "save_png_to_buffer\000", 2362200018)
		methodImage[23] = classDB.get_method_bind("Image\000", "save_jpg\000", 578836491)
		methodImage[24] = classDB.get_method_bind("Image\000", "save_jpg_to_buffer\000", 310747435)
		methodImage[25] = classDB.get_method_bind("Image\000", "save_exr\000", 3108122999)
		methodImage[26] = classDB.get_method_bind("Image\000", "save_exr_to_buffer\000", 3178917920)
		methodImage[27] = classDB.get_method_bind("Image\000", "save_webp\000", 3594949219)
		methodImage[28] = classDB.get_method_bind("Image\000", "save_webp_to_buffer\000", 1235769281)
		methodImage[29] = classDB.get_method_bind("Image\000", "detect_alpha\000", 2030116505)
		methodImage[30] = classDB.get_method_bind("Image\000", "is_invisible\000", 36873697)
		methodImage[31] = classDB.get_method_bind("Image\000", "detect_used_channels\000", 2703139984)
		methodImage[32] = classDB.get_method_bind("Image\000", "compress\000", 2521880595)
		methodImage[33] = classDB.get_method_bind("Image\000", "compress_from_channels\000", 1815281629)
		methodImage[34] = classDB.get_method_bind("Image\000", "decompress\000", 166280745)
		methodImage[35] = classDB.get_method_bind("Image\000", "is_compressed\000", 36873697)
		methodImage[36] = classDB.get_method_bind("Image\000", "rotate_90\000", 1901204267)
		methodImage[37] = classDB.get_method_bind("Image\000", "rotate_180\000", 3218959716)
		methodImage[38] = classDB.get_method_bind("Image\000", "fix_alpha_edges\000", 3218959716)
		methodImage[39] = classDB.get_method_bind("Image\000", "premultiply_alpha\000", 3218959716)
		methodImage[40] = classDB.get_method_bind("Image\000", "srgb_to_linear\000", 3218959716)
		methodImage[41] = classDB.get_method_bind("Image\000", "normal_map_to_xy\000", 3218959716)
		methodImage[42] = classDB.get_method_bind("Image\000", "rgbe_to_srgb\000", 564927088)
		methodImage[43] = classDB.get_method_bind("Image\000", "bump_map_to_normal_map\000", 336773324)
		methodImage[44] = classDB.get_method_bind("Image\000", "compute_image_metrics\000", 3080961247)
		methodImage[45] = classDB.get_method_bind("Image\000", "blit_rect\000", 2903928755)
		methodImage[46] = classDB.get_method_bind("Image\000", "blit_rect_mask\000", 3383581145)
		methodImage[47] = classDB.get_method_bind("Image\000", "blend_rect\000", 2903928755)
		methodImage[48] = classDB.get_method_bind("Image\000", "blend_rect_mask\000", 3383581145)
		methodImage[49] = classDB.get_method_bind("Image\000", "fill\000", 2920490490)
		methodImage[50] = classDB.get_method_bind("Image\000", "fill_rect\000", 514693913)
		methodImage[51] = classDB.get_method_bind("Image\000", "get_used_rect\000", 410525958)
		methodImage[52] = classDB.get_method_bind("Image\000", "get_rect\000", 2601441065)
		methodImage[53] = classDB.get_method_bind("Image\000", "copy_from\000", 532598488)
		methodImage[54] = classDB.get_method_bind("Image\000", "get_pixelv\000", 1532707496)
		methodImage[55] = classDB.get_method_bind("Image\000", "get_pixel\000", 2165839948)
		methodImage[56] = classDB.get_method_bind("Image\000", "set_pixelv\000", 287851464)
		methodImage[57] = classDB.get_method_bind("Image\000", "set_pixel\000", 3733378741)
		methodImage[58] = classDB.get_method_bind("Image\000", "adjust_bcs\000", 2385087082)
		methodImage[59] = classDB.get_method_bind("Image\000", "load_png_from_buffer\000", 680677267)
		methodImage[60] = classDB.get_method_bind("Image\000", "load_jpg_from_buffer\000", 680677267)
		methodImage[61] = classDB.get_method_bind("Image\000", "load_webp_from_buffer\000", 680677267)
		methodImage[62] = classDB.get_method_bind("Image\000", "load_tga_from_buffer\000", 680677267)
		methodImage[63] = classDB.get_method_bind("Image\000", "load_bmp_from_buffer\000", 680677267)
		methodImageTexture[0] = classDB.get_method_bind("ImageTexture\000", "create_from_image\000", 2775144163)
		methodImageTexture[1] = classDB.get_method_bind("ImageTexture\000", "get_format\000", 3847873762)
		methodImageTexture[2] = classDB.get_method_bind("ImageTexture\000", "set_image\000", 532598488)
		methodImageTexture[3] = classDB.get_method_bind("ImageTexture\000", "update\000", 532598488)
		methodImageTexture[4] = classDB.get_method_bind("ImageTexture\000", "set_size_override\000", 1130785943)
		methodImageTexture3D[0] = classDB.get_method_bind("ImageTexture3D\000", "create\000", 1130379827)
		methodImageTexture3D[1] = classDB.get_method_bind("ImageTexture3D\000", "update\000", 381264803)
		methodImageTextureLayered[0] = classDB.get_method_bind("ImageTextureLayered\000", "create_from_images\000", 2785773503)
		methodImageTextureLayered[1] = classDB.get_method_bind("ImageTextureLayered\000", "update_layer\000", 3331733361)
		methodImmediateMesh[0] = classDB.get_method_bind("ImmediateMesh\000", "surface_begin\000", 3716480242)
		methodImmediateMesh[1] = classDB.get_method_bind("ImmediateMesh\000", "surface_set_color\000", 2920490490)
		methodImmediateMesh[2] = classDB.get_method_bind("ImmediateMesh\000", "surface_set_normal\000", 3460891852)
		methodImmediateMesh[3] = classDB.get_method_bind("ImmediateMesh\000", "surface_set_tangent\000", 3505987427)
		methodImmediateMesh[4] = classDB.get_method_bind("ImmediateMesh\000", "surface_set_uv\000", 743155724)
		methodImmediateMesh[5] = classDB.get_method_bind("ImmediateMesh\000", "surface_set_uv2\000", 743155724)
		methodImmediateMesh[6] = classDB.get_method_bind("ImmediateMesh\000", "surface_add_vertex\000", 3460891852)
		methodImmediateMesh[7] = classDB.get_method_bind("ImmediateMesh\000", "surface_add_vertex_2d\000", 743155724)
		methodImmediateMesh[8] = classDB.get_method_bind("ImmediateMesh\000", "surface_end\000", 3218959716)
		methodImmediateMesh[9] = classDB.get_method_bind("ImmediateMesh\000", "clear_surfaces\000", 3218959716)
		methodImporterMesh[0] = classDB.get_method_bind("ImporterMesh\000", "add_blend_shape\000", 83702148)
		methodImporterMesh[1] = classDB.get_method_bind("ImporterMesh\000", "get_blend_shape_count\000", 3905245786)
		methodImporterMesh[2] = classDB.get_method_bind("ImporterMesh\000", "get_blend_shape_name\000", 844755477)
		methodImporterMesh[3] = classDB.get_method_bind("ImporterMesh\000", "set_blend_shape_mode\000", 227983991)
		methodImporterMesh[4] = classDB.get_method_bind("ImporterMesh\000", "get_blend_shape_mode\000", 836485024)
		methodImporterMesh[5] = classDB.get_method_bind("ImporterMesh\000", "add_surface\000", 4122361985)
		methodImporterMesh[6] = classDB.get_method_bind("ImporterMesh\000", "get_surface_count\000", 3905245786)
		methodImporterMesh[7] = classDB.get_method_bind("ImporterMesh\000", "get_surface_primitive_type\000", 3552571330)
		methodImporterMesh[8] = classDB.get_method_bind("ImporterMesh\000", "get_surface_name\000", 844755477)
		methodImporterMesh[9] = classDB.get_method_bind("ImporterMesh\000", "get_surface_arrays\000", 663333327)
		methodImporterMesh[10] = classDB.get_method_bind("ImporterMesh\000", "get_surface_blend_shape_arrays\000", 2345056839)
		methodImporterMesh[11] = classDB.get_method_bind("ImporterMesh\000", "get_surface_lod_count\000", 923996154)
		methodImporterMesh[12] = classDB.get_method_bind("ImporterMesh\000", "get_surface_lod_size\000", 3085491603)
		methodImporterMesh[13] = classDB.get_method_bind("ImporterMesh\000", "get_surface_lod_indices\000", 1265128013)
		methodImporterMesh[14] = classDB.get_method_bind("ImporterMesh\000", "get_surface_material\000", 2897466400)
		methodImporterMesh[15] = classDB.get_method_bind("ImporterMesh\000", "get_surface_format\000", 923996154)
		methodImporterMesh[16] = classDB.get_method_bind("ImporterMesh\000", "set_surface_name\000", 501894301)
		methodImporterMesh[17] = classDB.get_method_bind("ImporterMesh\000", "set_surface_material\000", 3671737478)
		methodImporterMesh[18] = classDB.get_method_bind("ImporterMesh\000", "generate_lods\000", 1017552074)
		methodImporterMesh[19] = classDB.get_method_bind("ImporterMesh\000", "get_mesh\000", 1457573577)
		methodImporterMesh[20] = classDB.get_method_bind("ImporterMesh\000", "clear\000", 3218959716)
		methodImporterMesh[21] = classDB.get_method_bind("ImporterMesh\000", "set_lightmap_size_hint\000", 1130785943)
		methodImporterMesh[22] = classDB.get_method_bind("ImporterMesh\000", "get_lightmap_size_hint\000", 3690982128)
		methodImporterMeshInstance3D[0] = classDB.get_method_bind("ImporterMeshInstance3D\000", "set_mesh\000", 2255166972)
		methodImporterMeshInstance3D[1] = classDB.get_method_bind("ImporterMeshInstance3D\000", "get_mesh\000", 3161779525)
		methodImporterMeshInstance3D[2] = classDB.get_method_bind("ImporterMeshInstance3D\000", "set_skin\000", 3971435618)
		methodImporterMeshInstance3D[3] = classDB.get_method_bind("ImporterMeshInstance3D\000", "get_skin\000", 2074563878)
		methodImporterMeshInstance3D[4] = classDB.get_method_bind("ImporterMeshInstance3D\000", "set_skeleton_path\000", 1348162250)
		methodImporterMeshInstance3D[5] = classDB.get_method_bind("ImporterMeshInstance3D\000", "get_skeleton_path\000", 4075236667)
		methodInputSingleton[0] = classDB.get_method_bind("Input\000", "is_anything_pressed\000", 36873697)
		methodInputSingleton[1] = classDB.get_method_bind("Input\000", "is_key_pressed\000", 1938909964)
		methodInputSingleton[2] = classDB.get_method_bind("Input\000", "is_physical_key_pressed\000", 1938909964)
		methodInputSingleton[3] = classDB.get_method_bind("Input\000", "is_mouse_button_pressed\000", 1821097125)
		methodInputSingleton[4] = classDB.get_method_bind("Input\000", "is_joy_button_pressed\000", 787208542)
		methodInputSingleton[5] = classDB.get_method_bind("Input\000", "is_action_pressed\000", 1558498928)
		methodInputSingleton[6] = classDB.get_method_bind("Input\000", "is_action_just_pressed\000", 1558498928)
		methodInputSingleton[7] = classDB.get_method_bind("Input\000", "is_action_just_released\000", 1558498928)
		methodInputSingleton[8] = classDB.get_method_bind("Input\000", "get_action_strength\000", 801543509)
		methodInputSingleton[9] = classDB.get_method_bind("Input\000", "get_action_raw_strength\000", 801543509)
		methodInputSingleton[10] = classDB.get_method_bind("Input\000", "get_axis\000", 1958752504)
		methodInputSingleton[11] = classDB.get_method_bind("Input\000", "get_vector\000", 1517139831)
		methodInputSingleton[12] = classDB.get_method_bind("Input\000", "add_joy_mapping\000", 1168363258)
		methodInputSingleton[13] = classDB.get_method_bind("Input\000", "remove_joy_mapping\000", 83702148)
		methodInputSingleton[14] = classDB.get_method_bind("Input\000", "is_joy_known\000", 3067735520)
		methodInputSingleton[15] = classDB.get_method_bind("Input\000", "get_joy_axis\000", 4063175957)
		methodInputSingleton[16] = classDB.get_method_bind("Input\000", "get_joy_name\000", 990163283)
		methodInputSingleton[17] = classDB.get_method_bind("Input\000", "get_joy_guid\000", 844755477)
		methodInputSingleton[18] = classDB.get_method_bind("Input\000", "get_connected_joypads\000", 2915620761)
		methodInputSingleton[19] = classDB.get_method_bind("Input\000", "get_joy_vibration_strength\000", 3114997196)
		methodInputSingleton[20] = classDB.get_method_bind("Input\000", "get_joy_vibration_duration\000", 4025615559)
		methodInputSingleton[21] = classDB.get_method_bind("Input\000", "start_joy_vibration\000", 1890603622)
		methodInputSingleton[22] = classDB.get_method_bind("Input\000", "stop_joy_vibration\000", 1286410249)
		methodInputSingleton[23] = classDB.get_method_bind("Input\000", "vibrate_handheld\000", 955504365)
		methodInputSingleton[24] = classDB.get_method_bind("Input\000", "get_gravity\000", 3360562783)
		methodInputSingleton[25] = classDB.get_method_bind("Input\000", "get_accelerometer\000", 3360562783)
		methodInputSingleton[26] = classDB.get_method_bind("Input\000", "get_magnetometer\000", 3360562783)
		methodInputSingleton[27] = classDB.get_method_bind("Input\000", "get_gyroscope\000", 3360562783)
		methodInputSingleton[28] = classDB.get_method_bind("Input\000", "set_gravity\000", 3460891852)
		methodInputSingleton[29] = classDB.get_method_bind("Input\000", "set_accelerometer\000", 3460891852)
		methodInputSingleton[30] = classDB.get_method_bind("Input\000", "set_magnetometer\000", 3460891852)
		methodInputSingleton[31] = classDB.get_method_bind("Input\000", "set_gyroscope\000", 3460891852)
		methodInputSingleton[32] = classDB.get_method_bind("Input\000", "get_last_mouse_velocity\000", 1497962370)
		methodInputSingleton[33] = classDB.get_method_bind("Input\000", "get_mouse_button_mask\000", 1132662608)
		methodInputSingleton[34] = classDB.get_method_bind("Input\000", "set_mouse_mode\000", 2228490894)
		methodInputSingleton[35] = classDB.get_method_bind("Input\000", "get_mouse_mode\000", 965286182)
		methodInputSingleton[36] = classDB.get_method_bind("Input\000", "warp_mouse\000", 743155724)
		methodInputSingleton[37] = classDB.get_method_bind("Input\000", "action_press\000", 573731101)
		methodInputSingleton[38] = classDB.get_method_bind("Input\000", "action_release\000", 3304788590)
		methodInputSingleton[39] = classDB.get_method_bind("Input\000", "set_default_cursor_shape\000", 2124816902)
		methodInputSingleton[40] = classDB.get_method_bind("Input\000", "get_current_cursor_shape\000", 3455658929)
		methodInputSingleton[41] = classDB.get_method_bind("Input\000", "set_custom_mouse_cursor\000", 3489634142)
		methodInputSingleton[42] = classDB.get_method_bind("Input\000", "parse_input_event\000", 3754044979)
		methodInputSingleton[43] = classDB.get_method_bind("Input\000", "set_use_accumulated_input\000", 2586408642)
		methodInputSingleton[44] = classDB.get_method_bind("Input\000", "is_using_accumulated_input\000", 2240911060)
		methodInputSingleton[45] = classDB.get_method_bind("Input\000", "flush_buffered_events\000", 3218959716)
		methodInputEvent[0] = classDB.get_method_bind("InputEvent\000", "set_device\000", 1286410249)
		methodInputEvent[1] = classDB.get_method_bind("InputEvent\000", "get_device\000", 3905245786)
		methodInputEvent[2] = classDB.get_method_bind("InputEvent\000", "is_action\000", 1558498928)
		methodInputEvent[3] = classDB.get_method_bind("InputEvent\000", "is_action_pressed\000", 1631499404)
		methodInputEvent[4] = classDB.get_method_bind("InputEvent\000", "is_action_released\000", 1558498928)
		methodInputEvent[5] = classDB.get_method_bind("InputEvent\000", "get_action_strength\000", 801543509)
		methodInputEvent[6] = classDB.get_method_bind("InputEvent\000", "is_pressed\000", 36873697)
		methodInputEvent[7] = classDB.get_method_bind("InputEvent\000", "is_echo\000", 36873697)
		methodInputEvent[8] = classDB.get_method_bind("InputEvent\000", "as_text\000", 201670096)
		methodInputEvent[9] = classDB.get_method_bind("InputEvent\000", "is_match\000", 3392494811)
		methodInputEvent[10] = classDB.get_method_bind("InputEvent\000", "is_action_type\000", 36873697)
		methodInputEvent[11] = classDB.get_method_bind("InputEvent\000", "accumulate\000", 1062211774)
		methodInputEvent[12] = classDB.get_method_bind("InputEvent\000", "xformed_by\000", 2747409789)
		methodInputEventAction[0] = classDB.get_method_bind("InputEventAction\000", "set_action\000", 3304788590)
		methodInputEventAction[1] = classDB.get_method_bind("InputEventAction\000", "get_action\000", 2002593661)
		methodInputEventAction[2] = classDB.get_method_bind("InputEventAction\000", "set_pressed\000", 2586408642)
		methodInputEventAction[3] = classDB.get_method_bind("InputEventAction\000", "set_strength\000", 373806689)
		methodInputEventAction[4] = classDB.get_method_bind("InputEventAction\000", "get_strength\000", 1740695150)
		methodInputEventFromWindow[0] = classDB.get_method_bind("InputEventFromWindow\000", "set_window_id\000", 1286410249)
		methodInputEventFromWindow[1] = classDB.get_method_bind("InputEventFromWindow\000", "get_window_id\000", 3905245786)
		methodInputEventGesture[0] = classDB.get_method_bind("InputEventGesture\000", "set_position\000", 743155724)
		methodInputEventGesture[1] = classDB.get_method_bind("InputEventGesture\000", "get_position\000", 3341600327)
		methodInputEventJoypadButton[0] = classDB.get_method_bind("InputEventJoypadButton\000", "set_button_index\000", 1466368136)
		methodInputEventJoypadButton[1] = classDB.get_method_bind("InputEventJoypadButton\000", "get_button_index\000", 595588182)
		methodInputEventJoypadButton[2] = classDB.get_method_bind("InputEventJoypadButton\000", "set_pressure\000", 373806689)
		methodInputEventJoypadButton[3] = classDB.get_method_bind("InputEventJoypadButton\000", "get_pressure\000", 1740695150)
		methodInputEventJoypadButton[4] = classDB.get_method_bind("InputEventJoypadButton\000", "set_pressed\000", 2586408642)
		methodInputEventJoypadMotion[0] = classDB.get_method_bind("InputEventJoypadMotion\000", "set_axis\000", 1332685170)
		methodInputEventJoypadMotion[1] = classDB.get_method_bind("InputEventJoypadMotion\000", "get_axis\000", 4019121683)
		methodInputEventJoypadMotion[2] = classDB.get_method_bind("InputEventJoypadMotion\000", "set_axis_value\000", 373806689)
		methodInputEventJoypadMotion[3] = classDB.get_method_bind("InputEventJoypadMotion\000", "get_axis_value\000", 1740695150)
		methodInputEventKey[0] = classDB.get_method_bind("InputEventKey\000", "set_pressed\000", 2586408642)
		methodInputEventKey[1] = classDB.get_method_bind("InputEventKey\000", "set_keycode\000", 888074362)
		methodInputEventKey[2] = classDB.get_method_bind("InputEventKey\000", "get_keycode\000", 1585896689)
		methodInputEventKey[3] = classDB.get_method_bind("InputEventKey\000", "set_physical_keycode\000", 888074362)
		methodInputEventKey[4] = classDB.get_method_bind("InputEventKey\000", "get_physical_keycode\000", 1585896689)
		methodInputEventKey[5] = classDB.get_method_bind("InputEventKey\000", "set_unicode\000", 1286410249)
		methodInputEventKey[6] = classDB.get_method_bind("InputEventKey\000", "get_unicode\000", 3905245786)
		methodInputEventKey[7] = classDB.get_method_bind("InputEventKey\000", "set_echo\000", 2586408642)
		methodInputEventKey[8] = classDB.get_method_bind("InputEventKey\000", "get_keycode_with_modifiers\000", 1585896689)
		methodInputEventKey[9] = classDB.get_method_bind("InputEventKey\000", "get_physical_keycode_with_modifiers\000", 1585896689)
		methodInputEventMIDI[0] = classDB.get_method_bind("InputEventMIDI\000", "set_channel\000", 1286410249)
		methodInputEventMIDI[1] = classDB.get_method_bind("InputEventMIDI\000", "get_channel\000", 3905245786)
		methodInputEventMIDI[2] = classDB.get_method_bind("InputEventMIDI\000", "set_message\000", 1064271510)
		methodInputEventMIDI[3] = classDB.get_method_bind("InputEventMIDI\000", "get_message\000", 1936512097)
		methodInputEventMIDI[4] = classDB.get_method_bind("InputEventMIDI\000", "set_pitch\000", 1286410249)
		methodInputEventMIDI[5] = classDB.get_method_bind("InputEventMIDI\000", "get_pitch\000", 3905245786)
		methodInputEventMIDI[6] = classDB.get_method_bind("InputEventMIDI\000", "set_velocity\000", 1286410249)
		methodInputEventMIDI[7] = classDB.get_method_bind("InputEventMIDI\000", "get_velocity\000", 3905245786)
		methodInputEventMIDI[8] = classDB.get_method_bind("InputEventMIDI\000", "set_instrument\000", 1286410249)
		methodInputEventMIDI[9] = classDB.get_method_bind("InputEventMIDI\000", "get_instrument\000", 3905245786)
		methodInputEventMIDI[10] = classDB.get_method_bind("InputEventMIDI\000", "set_pressure\000", 1286410249)
		methodInputEventMIDI[11] = classDB.get_method_bind("InputEventMIDI\000", "get_pressure\000", 3905245786)
		methodInputEventMIDI[12] = classDB.get_method_bind("InputEventMIDI\000", "set_controller_number\000", 1286410249)
		methodInputEventMIDI[13] = classDB.get_method_bind("InputEventMIDI\000", "get_controller_number\000", 3905245786)
		methodInputEventMIDI[14] = classDB.get_method_bind("InputEventMIDI\000", "set_controller_value\000", 1286410249)
		methodInputEventMIDI[15] = classDB.get_method_bind("InputEventMIDI\000", "get_controller_value\000", 3905245786)
		methodInputEventMagnifyGesture[0] = classDB.get_method_bind("InputEventMagnifyGesture\000", "set_factor\000", 373806689)
		methodInputEventMagnifyGesture[1] = classDB.get_method_bind("InputEventMagnifyGesture\000", "get_factor\000", 1740695150)
		methodInputEventMouse[0] = classDB.get_method_bind("InputEventMouse\000", "set_button_mask\000", 3624991109)
		methodInputEventMouse[1] = classDB.get_method_bind("InputEventMouse\000", "get_button_mask\000", 1132662608)
		methodInputEventMouse[2] = classDB.get_method_bind("InputEventMouse\000", "set_position\000", 743155724)
		methodInputEventMouse[3] = classDB.get_method_bind("InputEventMouse\000", "get_position\000", 3341600327)
		methodInputEventMouse[4] = classDB.get_method_bind("InputEventMouse\000", "set_global_position\000", 743155724)
		methodInputEventMouse[5] = classDB.get_method_bind("InputEventMouse\000", "get_global_position\000", 3341600327)
		methodInputEventMouseButton[0] = classDB.get_method_bind("InputEventMouseButton\000", "set_factor\000", 373806689)
		methodInputEventMouseButton[1] = classDB.get_method_bind("InputEventMouseButton\000", "get_factor\000", 1740695150)
		methodInputEventMouseButton[2] = classDB.get_method_bind("InputEventMouseButton\000", "set_button_index\000", 3624991109)
		methodInputEventMouseButton[3] = classDB.get_method_bind("InputEventMouseButton\000", "get_button_index\000", 1132662608)
		methodInputEventMouseButton[4] = classDB.get_method_bind("InputEventMouseButton\000", "set_pressed\000", 2586408642)
		methodInputEventMouseButton[5] = classDB.get_method_bind("InputEventMouseButton\000", "set_double_click\000", 2586408642)
		methodInputEventMouseButton[6] = classDB.get_method_bind("InputEventMouseButton\000", "is_double_click\000", 36873697)
		methodInputEventMouseMotion[0] = classDB.get_method_bind("InputEventMouseMotion\000", "set_tilt\000", 743155724)
		methodInputEventMouseMotion[1] = classDB.get_method_bind("InputEventMouseMotion\000", "get_tilt\000", 3341600327)
		methodInputEventMouseMotion[2] = classDB.get_method_bind("InputEventMouseMotion\000", "set_pressure\000", 373806689)
		methodInputEventMouseMotion[3] = classDB.get_method_bind("InputEventMouseMotion\000", "get_pressure\000", 1740695150)
		methodInputEventMouseMotion[4] = classDB.get_method_bind("InputEventMouseMotion\000", "set_pen_inverted\000", 2586408642)
		methodInputEventMouseMotion[5] = classDB.get_method_bind("InputEventMouseMotion\000", "get_pen_inverted\000", 36873697)
		methodInputEventMouseMotion[6] = classDB.get_method_bind("InputEventMouseMotion\000", "set_relative\000", 743155724)
		methodInputEventMouseMotion[7] = classDB.get_method_bind("InputEventMouseMotion\000", "get_relative\000", 3341600327)
		methodInputEventMouseMotion[8] = classDB.get_method_bind("InputEventMouseMotion\000", "set_velocity\000", 743155724)
		methodInputEventMouseMotion[9] = classDB.get_method_bind("InputEventMouseMotion\000", "get_velocity\000", 3341600327)
		methodInputEventPanGesture[0] = classDB.get_method_bind("InputEventPanGesture\000", "set_delta\000", 743155724)
		methodInputEventPanGesture[1] = classDB.get_method_bind("InputEventPanGesture\000", "get_delta\000", 3341600327)
		methodInputEventScreenDrag[0] = classDB.get_method_bind("InputEventScreenDrag\000", "set_index\000", 1286410249)
		methodInputEventScreenDrag[1] = classDB.get_method_bind("InputEventScreenDrag\000", "get_index\000", 3905245786)
		methodInputEventScreenDrag[2] = classDB.get_method_bind("InputEventScreenDrag\000", "set_position\000", 743155724)
		methodInputEventScreenDrag[3] = classDB.get_method_bind("InputEventScreenDrag\000", "get_position\000", 3341600327)
		methodInputEventScreenDrag[4] = classDB.get_method_bind("InputEventScreenDrag\000", "set_relative\000", 743155724)
		methodInputEventScreenDrag[5] = classDB.get_method_bind("InputEventScreenDrag\000", "get_relative\000", 3341600327)
		methodInputEventScreenDrag[6] = classDB.get_method_bind("InputEventScreenDrag\000", "set_velocity\000", 743155724)
		methodInputEventScreenDrag[7] = classDB.get_method_bind("InputEventScreenDrag\000", "get_velocity\000", 3341600327)
		methodInputEventScreenTouch[0] = classDB.get_method_bind("InputEventScreenTouch\000", "set_index\000", 1286410249)
		methodInputEventScreenTouch[1] = classDB.get_method_bind("InputEventScreenTouch\000", "get_index\000", 3905245786)
		methodInputEventScreenTouch[2] = classDB.get_method_bind("InputEventScreenTouch\000", "set_position\000", 743155724)
		methodInputEventScreenTouch[3] = classDB.get_method_bind("InputEventScreenTouch\000", "get_position\000", 3341600327)
		methodInputEventScreenTouch[4] = classDB.get_method_bind("InputEventScreenTouch\000", "set_pressed\000", 2586408642)
		methodInputEventShortcut[0] = classDB.get_method_bind("InputEventShortcut\000", "set_shortcut\000", 857163497)
		methodInputEventShortcut[1] = classDB.get_method_bind("InputEventShortcut\000", "get_shortcut\000", 3766804753)
		methodInputEventWithModifiers[0] = classDB.get_method_bind("InputEventWithModifiers\000", "set_store_command\000", 2586408642)
		methodInputEventWithModifiers[1] = classDB.get_method_bind("InputEventWithModifiers\000", "is_storing_command\000", 36873697)
		methodInputEventWithModifiers[2] = classDB.get_method_bind("InputEventWithModifiers\000", "set_alt_pressed\000", 2586408642)
		methodInputEventWithModifiers[3] = classDB.get_method_bind("InputEventWithModifiers\000", "is_alt_pressed\000", 36873697)
		methodInputEventWithModifiers[4] = classDB.get_method_bind("InputEventWithModifiers\000", "set_shift_pressed\000", 2586408642)
		methodInputEventWithModifiers[5] = classDB.get_method_bind("InputEventWithModifiers\000", "is_shift_pressed\000", 36873697)
		methodInputEventWithModifiers[6] = classDB.get_method_bind("InputEventWithModifiers\000", "set_ctrl_pressed\000", 2586408642)
		methodInputEventWithModifiers[7] = classDB.get_method_bind("InputEventWithModifiers\000", "is_ctrl_pressed\000", 36873697)
		methodInputEventWithModifiers[8] = classDB.get_method_bind("InputEventWithModifiers\000", "set_meta_pressed\000", 2586408642)
		methodInputEventWithModifiers[9] = classDB.get_method_bind("InputEventWithModifiers\000", "is_meta_pressed\000", 36873697)
		methodInputEventWithModifiers[10] = classDB.get_method_bind("InputEventWithModifiers\000", "set_command_pressed\000", 2586408642)
		methodInputEventWithModifiers[11] = classDB.get_method_bind("InputEventWithModifiers\000", "is_command_pressed\000", 36873697)
		methodInputMapSingleton[0] = classDB.get_method_bind("InputMap\000", "has_action\000", 2619796661)
		methodInputMapSingleton[1] = classDB.get_method_bind("InputMap\000", "get_actions\000", 2915620761)
		methodInputMapSingleton[2] = classDB.get_method_bind("InputMap\000", "add_action\000", 573731101)
		methodInputMapSingleton[3] = classDB.get_method_bind("InputMap\000", "erase_action\000", 3304788590)
		methodInputMapSingleton[4] = classDB.get_method_bind("InputMap\000", "action_set_deadzone\000", 4135858297)
		methodInputMapSingleton[5] = classDB.get_method_bind("InputMap\000", "action_get_deadzone\000", 1391627649)
		methodInputMapSingleton[6] = classDB.get_method_bind("InputMap\000", "action_add_event\000", 518302593)
		methodInputMapSingleton[7] = classDB.get_method_bind("InputMap\000", "action_has_event\000", 1185871985)
		methodInputMapSingleton[8] = classDB.get_method_bind("InputMap\000", "action_erase_event\000", 518302593)
		methodInputMapSingleton[9] = classDB.get_method_bind("InputMap\000", "action_erase_events\000", 3304788590)
		methodInputMapSingleton[10] = classDB.get_method_bind("InputMap\000", "action_get_events\000", 689397652)
		methodInputMapSingleton[11] = classDB.get_method_bind("InputMap\000", "event_is_action\000", 3193353650)
		methodInputMapSingleton[12] = classDB.get_method_bind("InputMap\000", "load_from_project_settings\000", 3218959716)
		methodInstancePlaceholder[0] = classDB.get_method_bind("InstancePlaceholder\000", "get_stored_values\000", 2230153369)
		methodInstancePlaceholder[1] = classDB.get_method_bind("InstancePlaceholder\000", "create_instance\000", 3794612210)
		methodInstancePlaceholder[2] = classDB.get_method_bind("InstancePlaceholder\000", "get_instance_path\000", 201670096)
		methodItemList[0] = classDB.get_method_bind("ItemList\000", "add_item\000", 4086250691)
		methodItemList[1] = classDB.get_method_bind("ItemList\000", "add_icon_item\000", 3332687421)
		methodItemList[2] = classDB.get_method_bind("ItemList\000", "set_item_text\000", 501894301)
		methodItemList[3] = classDB.get_method_bind("ItemList\000", "get_item_text\000", 844755477)
		methodItemList[4] = classDB.get_method_bind("ItemList\000", "set_item_icon\000", 666127730)
		methodItemList[5] = classDB.get_method_bind("ItemList\000", "get_item_icon\000", 3536238170)
		methodItemList[6] = classDB.get_method_bind("ItemList\000", "set_item_text_direction\000", 1707680378)
		methodItemList[7] = classDB.get_method_bind("ItemList\000", "get_item_text_direction\000", 4235602388)
		methodItemList[8] = classDB.get_method_bind("ItemList\000", "set_item_language\000", 501894301)
		methodItemList[9] = classDB.get_method_bind("ItemList\000", "get_item_language\000", 844755477)
		methodItemList[10] = classDB.get_method_bind("ItemList\000", "set_item_icon_transposed\000", 300928843)
		methodItemList[11] = classDB.get_method_bind("ItemList\000", "is_item_icon_transposed\000", 1116898809)
		methodItemList[12] = classDB.get_method_bind("ItemList\000", "set_item_icon_region\000", 1356297692)
		methodItemList[13] = classDB.get_method_bind("ItemList\000", "get_item_icon_region\000", 3327874267)
		methodItemList[14] = classDB.get_method_bind("ItemList\000", "set_item_icon_modulate\000", 2878471219)
		methodItemList[15] = classDB.get_method_bind("ItemList\000", "get_item_icon_modulate\000", 3457211756)
		methodItemList[16] = classDB.get_method_bind("ItemList\000", "set_item_selectable\000", 300928843)
		methodItemList[17] = classDB.get_method_bind("ItemList\000", "is_item_selectable\000", 1116898809)
		methodItemList[18] = classDB.get_method_bind("ItemList\000", "set_item_disabled\000", 300928843)
		methodItemList[19] = classDB.get_method_bind("ItemList\000", "is_item_disabled\000", 1116898809)
		methodItemList[20] = classDB.get_method_bind("ItemList\000", "set_item_metadata\000", 2152698145)
		methodItemList[21] = classDB.get_method_bind("ItemList\000", "get_item_metadata\000", 4227898402)
		methodItemList[22] = classDB.get_method_bind("ItemList\000", "set_item_custom_bg_color\000", 2878471219)
		methodItemList[23] = classDB.get_method_bind("ItemList\000", "get_item_custom_bg_color\000", 3457211756)
		methodItemList[24] = classDB.get_method_bind("ItemList\000", "set_item_custom_fg_color\000", 2878471219)
		methodItemList[25] = classDB.get_method_bind("ItemList\000", "get_item_custom_fg_color\000", 3457211756)
		methodItemList[26] = classDB.get_method_bind("ItemList\000", "set_item_tooltip_enabled\000", 300928843)
		methodItemList[27] = classDB.get_method_bind("ItemList\000", "is_item_tooltip_enabled\000", 1116898809)
		methodItemList[28] = classDB.get_method_bind("ItemList\000", "set_item_tooltip\000", 501894301)
		methodItemList[29] = classDB.get_method_bind("ItemList\000", "get_item_tooltip\000", 844755477)
		methodItemList[30] = classDB.get_method_bind("ItemList\000", "select\000", 4023243586)
		methodItemList[31] = classDB.get_method_bind("ItemList\000", "deselect\000", 1286410249)
		methodItemList[32] = classDB.get_method_bind("ItemList\000", "deselect_all\000", 3218959716)
		methodItemList[33] = classDB.get_method_bind("ItemList\000", "is_selected\000", 1116898809)
		methodItemList[34] = classDB.get_method_bind("ItemList\000", "get_selected_items\000", 969006518)
		methodItemList[35] = classDB.get_method_bind("ItemList\000", "move_item\000", 3937882851)
		methodItemList[36] = classDB.get_method_bind("ItemList\000", "set_item_count\000", 1286410249)
		methodItemList[37] = classDB.get_method_bind("ItemList\000", "get_item_count\000", 3905245786)
		methodItemList[38] = classDB.get_method_bind("ItemList\000", "remove_item\000", 1286410249)
		methodItemList[39] = classDB.get_method_bind("ItemList\000", "clear\000", 3218959716)
		methodItemList[40] = classDB.get_method_bind("ItemList\000", "sort_items_by_text\000", 3218959716)
		methodItemList[41] = classDB.get_method_bind("ItemList\000", "set_fixed_column_width\000", 1286410249)
		methodItemList[42] = classDB.get_method_bind("ItemList\000", "get_fixed_column_width\000", 3905245786)
		methodItemList[43] = classDB.get_method_bind("ItemList\000", "set_same_column_width\000", 2586408642)
		methodItemList[44] = classDB.get_method_bind("ItemList\000", "is_same_column_width\000", 36873697)
		methodItemList[45] = classDB.get_method_bind("ItemList\000", "set_max_text_lines\000", 1286410249)
		methodItemList[46] = classDB.get_method_bind("ItemList\000", "get_max_text_lines\000", 3905245786)
		methodItemList[47] = classDB.get_method_bind("ItemList\000", "set_max_columns\000", 1286410249)
		methodItemList[48] = classDB.get_method_bind("ItemList\000", "get_max_columns\000", 3905245786)
		methodItemList[49] = classDB.get_method_bind("ItemList\000", "set_select_mode\000", 928267388)
		methodItemList[50] = classDB.get_method_bind("ItemList\000", "get_select_mode\000", 1191945842)
		methodItemList[51] = classDB.get_method_bind("ItemList\000", "set_icon_mode\000", 2025053633)
		methodItemList[52] = classDB.get_method_bind("ItemList\000", "get_icon_mode\000", 3353929232)
		methodItemList[53] = classDB.get_method_bind("ItemList\000", "set_fixed_icon_size\000", 743155724)
		methodItemList[54] = classDB.get_method_bind("ItemList\000", "get_fixed_icon_size\000", 3341600327)
		methodItemList[55] = classDB.get_method_bind("ItemList\000", "set_icon_scale\000", 373806689)
		methodItemList[56] = classDB.get_method_bind("ItemList\000", "get_icon_scale\000", 1740695150)
		methodItemList[57] = classDB.get_method_bind("ItemList\000", "set_allow_rmb_select\000", 2586408642)
		methodItemList[58] = classDB.get_method_bind("ItemList\000", "get_allow_rmb_select\000", 36873697)
		methodItemList[59] = classDB.get_method_bind("ItemList\000", "set_allow_reselect\000", 2586408642)
		methodItemList[60] = classDB.get_method_bind("ItemList\000", "get_allow_reselect\000", 36873697)
		methodItemList[61] = classDB.get_method_bind("ItemList\000", "set_auto_height\000", 2586408642)
		methodItemList[62] = classDB.get_method_bind("ItemList\000", "has_auto_height\000", 36873697)
		methodItemList[63] = classDB.get_method_bind("ItemList\000", "is_anything_selected\000", 2240911060)
		methodItemList[64] = classDB.get_method_bind("ItemList\000", "get_item_at_position\000", 2300324924)
		methodItemList[65] = classDB.get_method_bind("ItemList\000", "ensure_current_is_visible\000", 3218959716)
		methodItemList[66] = classDB.get_method_bind("ItemList\000", "get_v_scroll_bar\000", 2630340773)
		methodItemList[67] = classDB.get_method_bind("ItemList\000", "set_text_overrun_behavior\000", 1008890932)
		methodItemList[68] = classDB.get_method_bind("ItemList\000", "get_text_overrun_behavior\000", 3779142101)
		methodJSON[0] = classDB.get_method_bind("JSON\000", "stringify\000", 2656701787)
		methodJSON[1] = classDB.get_method_bind("JSON\000", "parse_string\000", 309047738)
		methodJSON[2] = classDB.get_method_bind("JSON\000", "parse\000", 166001499)
		methodJSON[3] = classDB.get_method_bind("JSON\000", "get_data\000", 1214101251)
		methodJSON[4] = classDB.get_method_bind("JSON\000", "get_error_line\000", 3905245786)
		methodJSON[5] = classDB.get_method_bind("JSON\000", "get_error_message\000", 201670096)
		methodJSONRPC[0] = classDB.get_method_bind("JSONRPC\000", "set_scope\000", 2572618360)
		methodJSONRPC[1] = classDB.get_method_bind("JSONRPC\000", "process_action\000", 2963479484)
		methodJSONRPC[2] = classDB.get_method_bind("JSONRPC\000", "process_string\000", 1703090593)
		methodJSONRPC[3] = classDB.get_method_bind("JSONRPC\000", "make_request\000", 3423508980)
		methodJSONRPC[4] = classDB.get_method_bind("JSONRPC\000", "make_response\000", 5053918)
		methodJSONRPC[5] = classDB.get_method_bind("JSONRPC\000", "make_notification\000", 2949127017)
		methodJSONRPC[6] = classDB.get_method_bind("JSONRPC\000", "make_response_error\000", 928596297)
		methodJoint2D[0] = classDB.get_method_bind("Joint2D\000", "set_node_a\000", 1348162250)
		methodJoint2D[1] = classDB.get_method_bind("Joint2D\000", "get_node_a\000", 4075236667)
		methodJoint2D[2] = classDB.get_method_bind("Joint2D\000", "set_node_b\000", 1348162250)
		methodJoint2D[3] = classDB.get_method_bind("Joint2D\000", "get_node_b\000", 4075236667)
		methodJoint2D[4] = classDB.get_method_bind("Joint2D\000", "set_bias\000", 373806689)
		methodJoint2D[5] = classDB.get_method_bind("Joint2D\000", "get_bias\000", 1740695150)
		methodJoint2D[6] = classDB.get_method_bind("Joint2D\000", "set_exclude_nodes_from_collision\000", 2586408642)
		methodJoint2D[7] = classDB.get_method_bind("Joint2D\000", "get_exclude_nodes_from_collision\000", 36873697)
		methodJoint3D[0] = classDB.get_method_bind("Joint3D\000", "set_node_a\000", 1348162250)
		methodJoint3D[1] = classDB.get_method_bind("Joint3D\000", "get_node_a\000", 4075236667)
		methodJoint3D[2] = classDB.get_method_bind("Joint3D\000", "set_node_b\000", 1348162250)
		methodJoint3D[3] = classDB.get_method_bind("Joint3D\000", "get_node_b\000", 4075236667)
		methodJoint3D[4] = classDB.get_method_bind("Joint3D\000", "set_solver_priority\000", 1286410249)
		methodJoint3D[5] = classDB.get_method_bind("Joint3D\000", "get_solver_priority\000", 3905245786)
		methodJoint3D[6] = classDB.get_method_bind("Joint3D\000", "set_exclude_nodes_from_collision\000", 2586408642)
		methodJoint3D[7] = classDB.get_method_bind("Joint3D\000", "get_exclude_nodes_from_collision\000", 36873697)
		methodKinematicCollision2D[0] = classDB.get_method_bind("KinematicCollision2D\000", "get_position\000", 3341600327)
		methodKinematicCollision2D[1] = classDB.get_method_bind("KinematicCollision2D\000", "get_normal\000", 3341600327)
		methodKinematicCollision2D[2] = classDB.get_method_bind("KinematicCollision2D\000", "get_travel\000", 3341600327)
		methodKinematicCollision2D[3] = classDB.get_method_bind("KinematicCollision2D\000", "get_remainder\000", 3341600327)
		methodKinematicCollision2D[4] = classDB.get_method_bind("KinematicCollision2D\000", "get_angle\000", 2841063350)
		methodKinematicCollision2D[5] = classDB.get_method_bind("KinematicCollision2D\000", "get_depth\000", 1740695150)
		methodKinematicCollision2D[6] = classDB.get_method_bind("KinematicCollision2D\000", "get_local_shape\000", 1981248198)
		methodKinematicCollision2D[7] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider\000", 1981248198)
		methodKinematicCollision2D[8] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider_id\000", 3905245786)
		methodKinematicCollision2D[9] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider_rid\000", 2944877500)
		methodKinematicCollision2D[10] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider_shape\000", 1981248198)
		methodKinematicCollision2D[11] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider_shape_index\000", 3905245786)
		methodKinematicCollision2D[12] = classDB.get_method_bind("KinematicCollision2D\000", "get_collider_velocity\000", 3341600327)
		methodKinematicCollision3D[0] = classDB.get_method_bind("KinematicCollision3D\000", "get_travel\000", 3360562783)
		methodKinematicCollision3D[1] = classDB.get_method_bind("KinematicCollision3D\000", "get_remainder\000", 3360562783)
		methodKinematicCollision3D[2] = classDB.get_method_bind("KinematicCollision3D\000", "get_depth\000", 1740695150)
		methodKinematicCollision3D[3] = classDB.get_method_bind("KinematicCollision3D\000", "get_collision_count\000", 3905245786)
		methodKinematicCollision3D[4] = classDB.get_method_bind("KinematicCollision3D\000", "get_position\000", 1914908202)
		methodKinematicCollision3D[5] = classDB.get_method_bind("KinematicCollision3D\000", "get_normal\000", 1914908202)
		methodKinematicCollision3D[6] = classDB.get_method_bind("KinematicCollision3D\000", "get_angle\000", 1242741860)
		methodKinematicCollision3D[7] = classDB.get_method_bind("KinematicCollision3D\000", "get_local_shape\000", 2639523548)
		methodKinematicCollision3D[8] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider\000", 2639523548)
		methodKinematicCollision3D[9] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider_id\000", 1591665591)
		methodKinematicCollision3D[10] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider_rid\000", 1231817359)
		methodKinematicCollision3D[11] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider_shape\000", 2639523548)
		methodKinematicCollision3D[12] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider_shape_index\000", 1591665591)
		methodKinematicCollision3D[13] = classDB.get_method_bind("KinematicCollision3D\000", "get_collider_velocity\000", 1914908202)
		methodLabel[0] = classDB.get_method_bind("Label\000", "set_horizontal_alignment\000", 2312603777)
		methodLabel[1] = classDB.get_method_bind("Label\000", "get_horizontal_alignment\000", 341400642)
		methodLabel[2] = classDB.get_method_bind("Label\000", "set_vertical_alignment\000", 1796458609)
		methodLabel[3] = classDB.get_method_bind("Label\000", "get_vertical_alignment\000", 3274884059)
		methodLabel[4] = classDB.get_method_bind("Label\000", "set_text\000", 83702148)
		methodLabel[5] = classDB.get_method_bind("Label\000", "get_text\000", 201670096)
		methodLabel[6] = classDB.get_method_bind("Label\000", "set_label_settings\000", 1030653839)
		methodLabel[7] = classDB.get_method_bind("Label\000", "get_label_settings\000", 826676056)
		methodLabel[8] = classDB.get_method_bind("Label\000", "set_text_direction\000", 119160795)
		methodLabel[9] = classDB.get_method_bind("Label\000", "get_text_direction\000", 797257663)
		methodLabel[10] = classDB.get_method_bind("Label\000", "set_language\000", 83702148)
		methodLabel[11] = classDB.get_method_bind("Label\000", "get_language\000", 201670096)
		methodLabel[12] = classDB.get_method_bind("Label\000", "set_autowrap_mode\000", 3289138044)
		methodLabel[13] = classDB.get_method_bind("Label\000", "get_autowrap_mode\000", 1549071663)
		methodLabel[14] = classDB.get_method_bind("Label\000", "set_clip_text\000", 2586408642)
		methodLabel[15] = classDB.get_method_bind("Label\000", "is_clipping_text\000", 36873697)
		methodLabel[16] = classDB.get_method_bind("Label\000", "set_text_overrun_behavior\000", 1008890932)
		methodLabel[17] = classDB.get_method_bind("Label\000", "get_text_overrun_behavior\000", 3779142101)
		methodLabel[18] = classDB.get_method_bind("Label\000", "set_uppercase\000", 2586408642)
		methodLabel[19] = classDB.get_method_bind("Label\000", "is_uppercase\000", 36873697)
		methodLabel[20] = classDB.get_method_bind("Label\000", "get_line_height\000", 181039630)
		methodLabel[21] = classDB.get_method_bind("Label\000", "get_line_count\000", 3905245786)
		methodLabel[22] = classDB.get_method_bind("Label\000", "get_visible_line_count\000", 3905245786)
		methodLabel[23] = classDB.get_method_bind("Label\000", "get_total_character_count\000", 3905245786)
		methodLabel[24] = classDB.get_method_bind("Label\000", "set_visible_characters\000", 1286410249)
		methodLabel[25] = classDB.get_method_bind("Label\000", "get_visible_characters\000", 3905245786)
		methodLabel[26] = classDB.get_method_bind("Label\000", "get_visible_characters_behavior\000", 258789322)
		methodLabel[27] = classDB.get_method_bind("Label\000", "set_visible_characters_behavior\000", 3383839701)
		methodLabel[28] = classDB.get_method_bind("Label\000", "set_visible_ratio\000", 373806689)
		methodLabel[29] = classDB.get_method_bind("Label\000", "get_visible_ratio\000", 1740695150)
		methodLabel[30] = classDB.get_method_bind("Label\000", "set_lines_skipped\000", 1286410249)
		methodLabel[31] = classDB.get_method_bind("Label\000", "get_lines_skipped\000", 3905245786)
		methodLabel[32] = classDB.get_method_bind("Label\000", "set_max_lines_visible\000", 1286410249)
		methodLabel[33] = classDB.get_method_bind("Label\000", "get_max_lines_visible\000", 3905245786)
		methodLabel[34] = classDB.get_method_bind("Label\000", "set_structured_text_bidi_override\000", 55961453)
		methodLabel[35] = classDB.get_method_bind("Label\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLabel[36] = classDB.get_method_bind("Label\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLabel[37] = classDB.get_method_bind("Label\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLabel3D[0] = classDB.get_method_bind("Label3D\000", "set_horizontal_alignment\000", 2312603777)
		methodLabel3D[1] = classDB.get_method_bind("Label3D\000", "get_horizontal_alignment\000", 341400642)
		methodLabel3D[2] = classDB.get_method_bind("Label3D\000", "set_vertical_alignment\000", 1796458609)
		methodLabel3D[3] = classDB.get_method_bind("Label3D\000", "get_vertical_alignment\000", 3274884059)
		methodLabel3D[4] = classDB.get_method_bind("Label3D\000", "set_modulate\000", 2920490490)
		methodLabel3D[5] = classDB.get_method_bind("Label3D\000", "get_modulate\000", 3444240500)
		methodLabel3D[6] = classDB.get_method_bind("Label3D\000", "set_outline_modulate\000", 2920490490)
		methodLabel3D[7] = classDB.get_method_bind("Label3D\000", "get_outline_modulate\000", 3444240500)
		methodLabel3D[8] = classDB.get_method_bind("Label3D\000", "set_text\000", 83702148)
		methodLabel3D[9] = classDB.get_method_bind("Label3D\000", "get_text\000", 201670096)
		methodLabel3D[10] = classDB.get_method_bind("Label3D\000", "set_text_direction\000", 1418190634)
		methodLabel3D[11] = classDB.get_method_bind("Label3D\000", "get_text_direction\000", 2516697328)
		methodLabel3D[12] = classDB.get_method_bind("Label3D\000", "set_language\000", 83702148)
		methodLabel3D[13] = classDB.get_method_bind("Label3D\000", "get_language\000", 201670096)
		methodLabel3D[14] = classDB.get_method_bind("Label3D\000", "set_structured_text_bidi_override\000", 55961453)
		methodLabel3D[15] = classDB.get_method_bind("Label3D\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLabel3D[16] = classDB.get_method_bind("Label3D\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLabel3D[17] = classDB.get_method_bind("Label3D\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLabel3D[18] = classDB.get_method_bind("Label3D\000", "set_uppercase\000", 2586408642)
		methodLabel3D[19] = classDB.get_method_bind("Label3D\000", "is_uppercase\000", 36873697)
		methodLabel3D[20] = classDB.get_method_bind("Label3D\000", "set_render_priority\000", 1286410249)
		methodLabel3D[21] = classDB.get_method_bind("Label3D\000", "get_render_priority\000", 3905245786)
		methodLabel3D[22] = classDB.get_method_bind("Label3D\000", "set_outline_render_priority\000", 1286410249)
		methodLabel3D[23] = classDB.get_method_bind("Label3D\000", "get_outline_render_priority\000", 3905245786)
		methodLabel3D[24] = classDB.get_method_bind("Label3D\000", "set_font\000", 1262170328)
		methodLabel3D[25] = classDB.get_method_bind("Label3D\000", "get_font\000", 3229501585)
		methodLabel3D[26] = classDB.get_method_bind("Label3D\000", "set_font_size\000", 1286410249)
		methodLabel3D[27] = classDB.get_method_bind("Label3D\000", "get_font_size\000", 3905245786)
		methodLabel3D[28] = classDB.get_method_bind("Label3D\000", "set_outline_size\000", 1286410249)
		methodLabel3D[29] = classDB.get_method_bind("Label3D\000", "get_outline_size\000", 3905245786)
		methodLabel3D[30] = classDB.get_method_bind("Label3D\000", "set_line_spacing\000", 373806689)
		methodLabel3D[31] = classDB.get_method_bind("Label3D\000", "get_line_spacing\000", 1740695150)
		methodLabel3D[32] = classDB.get_method_bind("Label3D\000", "set_autowrap_mode\000", 3289138044)
		methodLabel3D[33] = classDB.get_method_bind("Label3D\000", "get_autowrap_mode\000", 1549071663)
		methodLabel3D[34] = classDB.get_method_bind("Label3D\000", "set_width\000", 373806689)
		methodLabel3D[35] = classDB.get_method_bind("Label3D\000", "get_width\000", 1740695150)
		methodLabel3D[36] = classDB.get_method_bind("Label3D\000", "set_pixel_size\000", 373806689)
		methodLabel3D[37] = classDB.get_method_bind("Label3D\000", "get_pixel_size\000", 1740695150)
		methodLabel3D[38] = classDB.get_method_bind("Label3D\000", "set_offset\000", 743155724)
		methodLabel3D[39] = classDB.get_method_bind("Label3D\000", "get_offset\000", 3341600327)
		methodLabel3D[40] = classDB.get_method_bind("Label3D\000", "set_draw_flag\000", 1285833066)
		methodLabel3D[41] = classDB.get_method_bind("Label3D\000", "get_draw_flag\000", 259226453)
		methodLabel3D[42] = classDB.get_method_bind("Label3D\000", "set_billboard_mode\000", 4202036497)
		methodLabel3D[43] = classDB.get_method_bind("Label3D\000", "get_billboard_mode\000", 1283840139)
		methodLabel3D[44] = classDB.get_method_bind("Label3D\000", "set_alpha_cut_mode\000", 2549142916)
		methodLabel3D[45] = classDB.get_method_bind("Label3D\000", "get_alpha_cut_mode\000", 219468601)
		methodLabel3D[46] = classDB.get_method_bind("Label3D\000", "set_alpha_scissor_threshold\000", 373806689)
		methodLabel3D[47] = classDB.get_method_bind("Label3D\000", "get_alpha_scissor_threshold\000", 1740695150)
		methodLabel3D[48] = classDB.get_method_bind("Label3D\000", "set_texture_filter\000", 22904437)
		methodLabel3D[49] = classDB.get_method_bind("Label3D\000", "get_texture_filter\000", 3289213076)
		methodLabel3D[50] = classDB.get_method_bind("Label3D\000", "generate_triangle_mesh\000", 3476533166)
		methodLabelSettings[0] = classDB.get_method_bind("LabelSettings\000", "set_line_spacing\000", 373806689)
		methodLabelSettings[1] = classDB.get_method_bind("LabelSettings\000", "get_line_spacing\000", 1740695150)
		methodLabelSettings[2] = classDB.get_method_bind("LabelSettings\000", "set_font\000", 1262170328)
		methodLabelSettings[3] = classDB.get_method_bind("LabelSettings\000", "get_font\000", 3229501585)
		methodLabelSettings[4] = classDB.get_method_bind("LabelSettings\000", "set_font_size\000", 1286410249)
		methodLabelSettings[5] = classDB.get_method_bind("LabelSettings\000", "get_font_size\000", 3905245786)
		methodLabelSettings[6] = classDB.get_method_bind("LabelSettings\000", "set_font_color\000", 2920490490)
		methodLabelSettings[7] = classDB.get_method_bind("LabelSettings\000", "get_font_color\000", 3444240500)
		methodLabelSettings[8] = classDB.get_method_bind("LabelSettings\000", "set_outline_size\000", 1286410249)
		methodLabelSettings[9] = classDB.get_method_bind("LabelSettings\000", "get_outline_size\000", 3905245786)
		methodLabelSettings[10] = classDB.get_method_bind("LabelSettings\000", "set_outline_color\000", 2920490490)
		methodLabelSettings[11] = classDB.get_method_bind("LabelSettings\000", "get_outline_color\000", 3444240500)
		methodLabelSettings[12] = classDB.get_method_bind("LabelSettings\000", "set_shadow_size\000", 1286410249)
		methodLabelSettings[13] = classDB.get_method_bind("LabelSettings\000", "get_shadow_size\000", 3905245786)
		methodLabelSettings[14] = classDB.get_method_bind("LabelSettings\000", "set_shadow_color\000", 2920490490)
		methodLabelSettings[15] = classDB.get_method_bind("LabelSettings\000", "get_shadow_color\000", 3444240500)
		methodLabelSettings[16] = classDB.get_method_bind("LabelSettings\000", "set_shadow_offset\000", 743155724)
		methodLabelSettings[17] = classDB.get_method_bind("LabelSettings\000", "get_shadow_offset\000", 3341600327)
		methodLight2D[0] = classDB.get_method_bind("Light2D\000", "set_enabled\000", 2586408642)
		methodLight2D[1] = classDB.get_method_bind("Light2D\000", "is_enabled\000", 36873697)
		methodLight2D[2] = classDB.get_method_bind("Light2D\000", "set_editor_only\000", 2586408642)
		methodLight2D[3] = classDB.get_method_bind("Light2D\000", "is_editor_only\000", 36873697)
		methodLight2D[4] = classDB.get_method_bind("Light2D\000", "set_color\000", 2920490490)
		methodLight2D[5] = classDB.get_method_bind("Light2D\000", "get_color\000", 3444240500)
		methodLight2D[6] = classDB.get_method_bind("Light2D\000", "set_energy\000", 373806689)
		methodLight2D[7] = classDB.get_method_bind("Light2D\000", "get_energy\000", 1740695150)
		methodLight2D[8] = classDB.get_method_bind("Light2D\000", "set_z_range_min\000", 1286410249)
		methodLight2D[9] = classDB.get_method_bind("Light2D\000", "get_z_range_min\000", 3905245786)
		methodLight2D[10] = classDB.get_method_bind("Light2D\000", "set_z_range_max\000", 1286410249)
		methodLight2D[11] = classDB.get_method_bind("Light2D\000", "get_z_range_max\000", 3905245786)
		methodLight2D[12] = classDB.get_method_bind("Light2D\000", "set_layer_range_min\000", 1286410249)
		methodLight2D[13] = classDB.get_method_bind("Light2D\000", "get_layer_range_min\000", 3905245786)
		methodLight2D[14] = classDB.get_method_bind("Light2D\000", "set_layer_range_max\000", 1286410249)
		methodLight2D[15] = classDB.get_method_bind("Light2D\000", "get_layer_range_max\000", 3905245786)
		methodLight2D[16] = classDB.get_method_bind("Light2D\000", "set_item_cull_mask\000", 1286410249)
		methodLight2D[17] = classDB.get_method_bind("Light2D\000", "get_item_cull_mask\000", 3905245786)
		methodLight2D[18] = classDB.get_method_bind("Light2D\000", "set_item_shadow_cull_mask\000", 1286410249)
		methodLight2D[19] = classDB.get_method_bind("Light2D\000", "get_item_shadow_cull_mask\000", 3905245786)
		methodLight2D[20] = classDB.get_method_bind("Light2D\000", "set_shadow_enabled\000", 2586408642)
		methodLight2D[21] = classDB.get_method_bind("Light2D\000", "is_shadow_enabled\000", 36873697)
		methodLight2D[22] = classDB.get_method_bind("Light2D\000", "set_shadow_smooth\000", 373806689)
		methodLight2D[23] = classDB.get_method_bind("Light2D\000", "get_shadow_smooth\000", 1740695150)
		methodLight2D[24] = classDB.get_method_bind("Light2D\000", "set_shadow_filter\000", 3209356555)
		methodLight2D[25] = classDB.get_method_bind("Light2D\000", "get_shadow_filter\000", 1973619177)
		methodLight2D[26] = classDB.get_method_bind("Light2D\000", "set_shadow_color\000", 2920490490)
		methodLight2D[27] = classDB.get_method_bind("Light2D\000", "get_shadow_color\000", 3444240500)
		methodLight2D[28] = classDB.get_method_bind("Light2D\000", "set_blend_mode\000", 2916638796)
		methodLight2D[29] = classDB.get_method_bind("Light2D\000", "get_blend_mode\000", 936255250)
		methodLight2D[30] = classDB.get_method_bind("Light2D\000", "set_height\000", 373806689)
		methodLight2D[31] = classDB.get_method_bind("Light2D\000", "get_height\000", 1740695150)
		methodLight3D[0] = classDB.get_method_bind("Light3D\000", "set_editor_only\000", 2586408642)
		methodLight3D[1] = classDB.get_method_bind("Light3D\000", "is_editor_only\000", 36873697)
		methodLight3D[2] = classDB.get_method_bind("Light3D\000", "set_param\000", 1722734213)
		methodLight3D[3] = classDB.get_method_bind("Light3D\000", "get_param\000", 1844084987)
		methodLight3D[4] = classDB.get_method_bind("Light3D\000", "set_shadow\000", 2586408642)
		methodLight3D[5] = classDB.get_method_bind("Light3D\000", "has_shadow\000", 36873697)
		methodLight3D[6] = classDB.get_method_bind("Light3D\000", "set_negative\000", 2586408642)
		methodLight3D[7] = classDB.get_method_bind("Light3D\000", "is_negative\000", 36873697)
		methodLight3D[8] = classDB.get_method_bind("Light3D\000", "set_cull_mask\000", 1286410249)
		methodLight3D[9] = classDB.get_method_bind("Light3D\000", "get_cull_mask\000", 3905245786)
		methodLight3D[10] = classDB.get_method_bind("Light3D\000", "set_enable_distance_fade\000", 2586408642)
		methodLight3D[11] = classDB.get_method_bind("Light3D\000", "is_distance_fade_enabled\000", 36873697)
		methodLight3D[12] = classDB.get_method_bind("Light3D\000", "set_distance_fade_begin\000", 373806689)
		methodLight3D[13] = classDB.get_method_bind("Light3D\000", "get_distance_fade_begin\000", 1740695150)
		methodLight3D[14] = classDB.get_method_bind("Light3D\000", "set_distance_fade_shadow\000", 373806689)
		methodLight3D[15] = classDB.get_method_bind("Light3D\000", "get_distance_fade_shadow\000", 1740695150)
		methodLight3D[16] = classDB.get_method_bind("Light3D\000", "set_distance_fade_length\000", 373806689)
		methodLight3D[17] = classDB.get_method_bind("Light3D\000", "get_distance_fade_length\000", 1740695150)
		methodLight3D[18] = classDB.get_method_bind("Light3D\000", "set_color\000", 2920490490)
		methodLight3D[19] = classDB.get_method_bind("Light3D\000", "get_color\000", 3444240500)
		methodLight3D[20] = classDB.get_method_bind("Light3D\000", "set_shadow_reverse_cull_face\000", 2586408642)
		methodLight3D[21] = classDB.get_method_bind("Light3D\000", "get_shadow_reverse_cull_face\000", 36873697)
		methodLight3D[22] = classDB.get_method_bind("Light3D\000", "set_bake_mode\000", 37739303)
		methodLight3D[23] = classDB.get_method_bind("Light3D\000", "get_bake_mode\000", 371737608)
		methodLight3D[24] = classDB.get_method_bind("Light3D\000", "set_projector\000", 4051416890)
		methodLight3D[25] = classDB.get_method_bind("Light3D\000", "get_projector\000", 3635182373)
		methodLightOccluder2D[0] = classDB.get_method_bind("LightOccluder2D\000", "set_occluder_polygon\000", 3258315893)
		methodLightOccluder2D[1] = classDB.get_method_bind("LightOccluder2D\000", "get_occluder_polygon\000", 3962317075)
		methodLightOccluder2D[2] = classDB.get_method_bind("LightOccluder2D\000", "set_occluder_light_mask\000", 1286410249)
		methodLightOccluder2D[3] = classDB.get_method_bind("LightOccluder2D\000", "get_occluder_light_mask\000", 3905245786)
		methodLightOccluder2D[4] = classDB.get_method_bind("LightOccluder2D\000", "set_as_sdf_collision\000", 2586408642)
		methodLightOccluder2D[5] = classDB.get_method_bind("LightOccluder2D\000", "is_set_as_sdf_collision\000", 36873697)
		methodLightmapGI[0] = classDB.get_method_bind("LightmapGI\000", "set_light_data\000", 1790597277)
		methodLightmapGI[1] = classDB.get_method_bind("LightmapGI\000", "get_light_data\000", 290354153)
		methodLightmapGI[2] = classDB.get_method_bind("LightmapGI\000", "set_bake_quality\000", 1192215803)
		methodLightmapGI[3] = classDB.get_method_bind("LightmapGI\000", "get_bake_quality\000", 688832735)
		methodLightmapGI[4] = classDB.get_method_bind("LightmapGI\000", "set_bounces\000", 1286410249)
		methodLightmapGI[5] = classDB.get_method_bind("LightmapGI\000", "get_bounces\000", 3905245786)
		methodLightmapGI[6] = classDB.get_method_bind("LightmapGI\000", "set_generate_probes\000", 549981046)
		methodLightmapGI[7] = classDB.get_method_bind("LightmapGI\000", "get_generate_probes\000", 3930596226)
		methodLightmapGI[8] = classDB.get_method_bind("LightmapGI\000", "set_bias\000", 373806689)
		methodLightmapGI[9] = classDB.get_method_bind("LightmapGI\000", "get_bias\000", 1740695150)
		methodLightmapGI[10] = classDB.get_method_bind("LightmapGI\000", "set_environment_mode\000", 2282650285)
		methodLightmapGI[11] = classDB.get_method_bind("LightmapGI\000", "get_environment_mode\000", 4128646479)
		methodLightmapGI[12] = classDB.get_method_bind("LightmapGI\000", "set_environment_custom_sky\000", 3336722921)
		methodLightmapGI[13] = classDB.get_method_bind("LightmapGI\000", "get_environment_custom_sky\000", 1177136966)
		methodLightmapGI[14] = classDB.get_method_bind("LightmapGI\000", "set_environment_custom_color\000", 2920490490)
		methodLightmapGI[15] = classDB.get_method_bind("LightmapGI\000", "get_environment_custom_color\000", 3444240500)
		methodLightmapGI[16] = classDB.get_method_bind("LightmapGI\000", "set_environment_custom_energy\000", 373806689)
		methodLightmapGI[17] = classDB.get_method_bind("LightmapGI\000", "get_environment_custom_energy\000", 1740695150)
		methodLightmapGI[18] = classDB.get_method_bind("LightmapGI\000", "set_max_texture_size\000", 1286410249)
		methodLightmapGI[19] = classDB.get_method_bind("LightmapGI\000", "get_max_texture_size\000", 3905245786)
		methodLightmapGI[20] = classDB.get_method_bind("LightmapGI\000", "set_use_denoiser\000", 2586408642)
		methodLightmapGI[21] = classDB.get_method_bind("LightmapGI\000", "is_using_denoiser\000", 36873697)
		methodLightmapGI[22] = classDB.get_method_bind("LightmapGI\000", "set_interior\000", 2586408642)
		methodLightmapGI[23] = classDB.get_method_bind("LightmapGI\000", "is_interior\000", 36873697)
		methodLightmapGI[24] = classDB.get_method_bind("LightmapGI\000", "set_directional\000", 2586408642)
		methodLightmapGI[25] = classDB.get_method_bind("LightmapGI\000", "is_directional\000", 36873697)
		methodLightmapGIData[0] = classDB.get_method_bind("LightmapGIData\000", "set_light_texture\000", 1278366092)
		methodLightmapGIData[1] = classDB.get_method_bind("LightmapGIData\000", "get_light_texture\000", 3984243839)
		methodLightmapGIData[2] = classDB.get_method_bind("LightmapGIData\000", "set_uses_spherical_harmonics\000", 2586408642)
		methodLightmapGIData[3] = classDB.get_method_bind("LightmapGIData\000", "is_using_spherical_harmonics\000", 36873697)
		methodLightmapGIData[4] = classDB.get_method_bind("LightmapGIData\000", "add_user\000", 4272570515)
		methodLightmapGIData[5] = classDB.get_method_bind("LightmapGIData\000", "get_user_count\000", 3905245786)
		methodLightmapGIData[6] = classDB.get_method_bind("LightmapGIData\000", "get_user_path\000", 408788394)
		methodLightmapGIData[7] = classDB.get_method_bind("LightmapGIData\000", "clear_users\000", 3218959716)
		methodLine2D[0] = classDB.get_method_bind("Line2D\000", "set_points\000", 1509147220)
		methodLine2D[1] = classDB.get_method_bind("Line2D\000", "get_points\000", 2961356807)
		methodLine2D[2] = classDB.get_method_bind("Line2D\000", "set_point_position\000", 163021252)
		methodLine2D[3] = classDB.get_method_bind("Line2D\000", "get_point_position\000", 2299179447)
		methodLine2D[4] = classDB.get_method_bind("Line2D\000", "get_point_count\000", 3905245786)
		methodLine2D[5] = classDB.get_method_bind("Line2D\000", "add_point\000", 468506575)
		methodLine2D[6] = classDB.get_method_bind("Line2D\000", "remove_point\000", 1286410249)
		methodLine2D[7] = classDB.get_method_bind("Line2D\000", "clear_points\000", 3218959716)
		methodLine2D[8] = classDB.get_method_bind("Line2D\000", "set_width\000", 373806689)
		methodLine2D[9] = classDB.get_method_bind("Line2D\000", "get_width\000", 1740695150)
		methodLine2D[10] = classDB.get_method_bind("Line2D\000", "set_curve\000", 270443179)
		methodLine2D[11] = classDB.get_method_bind("Line2D\000", "get_curve\000", 2460114913)
		methodLine2D[12] = classDB.get_method_bind("Line2D\000", "set_default_color\000", 2920490490)
		methodLine2D[13] = classDB.get_method_bind("Line2D\000", "get_default_color\000", 3444240500)
		methodLine2D[14] = classDB.get_method_bind("Line2D\000", "set_gradient\000", 2756054477)
		methodLine2D[15] = classDB.get_method_bind("Line2D\000", "get_gradient\000", 132272999)
		methodLine2D[16] = classDB.get_method_bind("Line2D\000", "set_texture\000", 4051416890)
		methodLine2D[17] = classDB.get_method_bind("Line2D\000", "get_texture\000", 3635182373)
		methodLine2D[18] = classDB.get_method_bind("Line2D\000", "set_texture_mode\000", 1952559516)
		methodLine2D[19] = classDB.get_method_bind("Line2D\000", "get_texture_mode\000", 2341040722)
		methodLine2D[20] = classDB.get_method_bind("Line2D\000", "set_joint_mode\000", 604292979)
		methodLine2D[21] = classDB.get_method_bind("Line2D\000", "get_joint_mode\000", 2546544037)
		methodLine2D[22] = classDB.get_method_bind("Line2D\000", "set_begin_cap_mode\000", 1669024546)
		methodLine2D[23] = classDB.get_method_bind("Line2D\000", "get_begin_cap_mode\000", 1107511441)
		methodLine2D[24] = classDB.get_method_bind("Line2D\000", "set_end_cap_mode\000", 1669024546)
		methodLine2D[25] = classDB.get_method_bind("Line2D\000", "get_end_cap_mode\000", 1107511441)
		methodLine2D[26] = classDB.get_method_bind("Line2D\000", "set_sharp_limit\000", 373806689)
		methodLine2D[27] = classDB.get_method_bind("Line2D\000", "get_sharp_limit\000", 1740695150)
		methodLine2D[28] = classDB.get_method_bind("Line2D\000", "set_round_precision\000", 1286410249)
		methodLine2D[29] = classDB.get_method_bind("Line2D\000", "get_round_precision\000", 3905245786)
		methodLine2D[30] = classDB.get_method_bind("Line2D\000", "set_antialiased\000", 2586408642)
		methodLine2D[31] = classDB.get_method_bind("Line2D\000", "get_antialiased\000", 36873697)
		methodLineEdit[0] = classDB.get_method_bind("LineEdit\000", "set_horizontal_alignment\000", 2312603777)
		methodLineEdit[1] = classDB.get_method_bind("LineEdit\000", "get_horizontal_alignment\000", 341400642)
		methodLineEdit[2] = classDB.get_method_bind("LineEdit\000", "clear\000", 3218959716)
		methodLineEdit[3] = classDB.get_method_bind("LineEdit\000", "select\000", 1328111411)
		methodLineEdit[4] = classDB.get_method_bind("LineEdit\000", "select_all\000", 3218959716)
		methodLineEdit[5] = classDB.get_method_bind("LineEdit\000", "deselect\000", 3218959716)
		methodLineEdit[6] = classDB.get_method_bind("LineEdit\000", "has_selection\000", 36873697)
		methodLineEdit[7] = classDB.get_method_bind("LineEdit\000", "get_selection_from_column\000", 3905245786)
		methodLineEdit[8] = classDB.get_method_bind("LineEdit\000", "get_selection_to_column\000", 3905245786)
		methodLineEdit[9] = classDB.get_method_bind("LineEdit\000", "set_text\000", 83702148)
		methodLineEdit[10] = classDB.get_method_bind("LineEdit\000", "get_text\000", 201670096)
		methodLineEdit[11] = classDB.get_method_bind("LineEdit\000", "get_draw_control_chars\000", 36873697)
		methodLineEdit[12] = classDB.get_method_bind("LineEdit\000", "set_draw_control_chars\000", 2586408642)
		methodLineEdit[13] = classDB.get_method_bind("LineEdit\000", "set_text_direction\000", 119160795)
		methodLineEdit[14] = classDB.get_method_bind("LineEdit\000", "get_text_direction\000", 797257663)
		methodLineEdit[15] = classDB.get_method_bind("LineEdit\000", "set_language\000", 83702148)
		methodLineEdit[16] = classDB.get_method_bind("LineEdit\000", "get_language\000", 201670096)
		methodLineEdit[17] = classDB.get_method_bind("LineEdit\000", "set_structured_text_bidi_override\000", 55961453)
		methodLineEdit[18] = classDB.get_method_bind("LineEdit\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLineEdit[19] = classDB.get_method_bind("LineEdit\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLineEdit[20] = classDB.get_method_bind("LineEdit\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodLineEdit[21] = classDB.get_method_bind("LineEdit\000", "set_placeholder\000", 83702148)
		methodLineEdit[22] = classDB.get_method_bind("LineEdit\000", "get_placeholder\000", 201670096)
		methodLineEdit[23] = classDB.get_method_bind("LineEdit\000", "set_caret_column\000", 1286410249)
		methodLineEdit[24] = classDB.get_method_bind("LineEdit\000", "get_caret_column\000", 3905245786)
		methodLineEdit[25] = classDB.get_method_bind("LineEdit\000", "get_scroll_offset\000", 1740695150)
		methodLineEdit[26] = classDB.get_method_bind("LineEdit\000", "set_expand_to_text_length_enabled\000", 2586408642)
		methodLineEdit[27] = classDB.get_method_bind("LineEdit\000", "is_expand_to_text_length_enabled\000", 36873697)
		methodLineEdit[28] = classDB.get_method_bind("LineEdit\000", "set_caret_blink_enabled\000", 2586408642)
		methodLineEdit[29] = classDB.get_method_bind("LineEdit\000", "is_caret_blink_enabled\000", 36873697)
		methodLineEdit[30] = classDB.get_method_bind("LineEdit\000", "set_caret_mid_grapheme_enabled\000", 2586408642)
		methodLineEdit[31] = classDB.get_method_bind("LineEdit\000", "is_caret_mid_grapheme_enabled\000", 36873697)
		methodLineEdit[32] = classDB.get_method_bind("LineEdit\000", "set_caret_force_displayed\000", 2586408642)
		methodLineEdit[33] = classDB.get_method_bind("LineEdit\000", "is_caret_force_displayed\000", 36873697)
		methodLineEdit[34] = classDB.get_method_bind("LineEdit\000", "set_caret_blink_speed\000", 373806689)
		methodLineEdit[35] = classDB.get_method_bind("LineEdit\000", "get_caret_blink_speed\000", 1740695150)
		methodLineEdit[36] = classDB.get_method_bind("LineEdit\000", "set_max_length\000", 1286410249)
		methodLineEdit[37] = classDB.get_method_bind("LineEdit\000", "get_max_length\000", 3905245786)
		methodLineEdit[38] = classDB.get_method_bind("LineEdit\000", "insert_text_at_caret\000", 83702148)
		methodLineEdit[39] = classDB.get_method_bind("LineEdit\000", "delete_char_at_caret\000", 3218959716)
		methodLineEdit[40] = classDB.get_method_bind("LineEdit\000", "delete_text\000", 3937882851)
		methodLineEdit[41] = classDB.get_method_bind("LineEdit\000", "set_editable\000", 2586408642)
		methodLineEdit[42] = classDB.get_method_bind("LineEdit\000", "is_editable\000", 36873697)
		methodLineEdit[43] = classDB.get_method_bind("LineEdit\000", "set_secret\000", 2586408642)
		methodLineEdit[44] = classDB.get_method_bind("LineEdit\000", "is_secret\000", 36873697)
		methodLineEdit[45] = classDB.get_method_bind("LineEdit\000", "set_secret_character\000", 83702148)
		methodLineEdit[46] = classDB.get_method_bind("LineEdit\000", "get_secret_character\000", 201670096)
		methodLineEdit[47] = classDB.get_method_bind("LineEdit\000", "menu_option\000", 1286410249)
		methodLineEdit[48] = classDB.get_method_bind("LineEdit\000", "get_menu\000", 229722558)
		methodLineEdit[49] = classDB.get_method_bind("LineEdit\000", "is_menu_visible\000", 36873697)
		methodLineEdit[50] = classDB.get_method_bind("LineEdit\000", "set_context_menu_enabled\000", 2586408642)
		methodLineEdit[51] = classDB.get_method_bind("LineEdit\000", "is_context_menu_enabled\000", 2240911060)
		methodLineEdit[52] = classDB.get_method_bind("LineEdit\000", "set_virtual_keyboard_enabled\000", 2586408642)
		methodLineEdit[53] = classDB.get_method_bind("LineEdit\000", "is_virtual_keyboard_enabled\000", 36873697)
		methodLineEdit[54] = classDB.get_method_bind("LineEdit\000", "set_virtual_keyboard_type\000", 2696893573)
		methodLineEdit[55] = classDB.get_method_bind("LineEdit\000", "get_virtual_keyboard_type\000", 1928699316)
		methodLineEdit[56] = classDB.get_method_bind("LineEdit\000", "set_clear_button_enabled\000", 2586408642)
		methodLineEdit[57] = classDB.get_method_bind("LineEdit\000", "is_clear_button_enabled\000", 36873697)
		methodLineEdit[58] = classDB.get_method_bind("LineEdit\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodLineEdit[59] = classDB.get_method_bind("LineEdit\000", "is_shortcut_keys_enabled\000", 36873697)
		methodLineEdit[60] = classDB.get_method_bind("LineEdit\000", "set_middle_mouse_paste_enabled\000", 2586408642)
		methodLineEdit[61] = classDB.get_method_bind("LineEdit\000", "is_middle_mouse_paste_enabled\000", 36873697)
		methodLineEdit[62] = classDB.get_method_bind("LineEdit\000", "set_selecting_enabled\000", 2586408642)
		methodLineEdit[63] = classDB.get_method_bind("LineEdit\000", "is_selecting_enabled\000", 36873697)
		methodLineEdit[64] = classDB.get_method_bind("LineEdit\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodLineEdit[65] = classDB.get_method_bind("LineEdit\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodLineEdit[66] = classDB.get_method_bind("LineEdit\000", "set_right_icon\000", 4051416890)
		methodLineEdit[67] = classDB.get_method_bind("LineEdit\000", "get_right_icon\000", 255860311)
		methodLineEdit[68] = classDB.get_method_bind("LineEdit\000", "set_flat\000", 2586408642)
		methodLineEdit[69] = classDB.get_method_bind("LineEdit\000", "is_flat\000", 36873697)
		methodLinkButton[0] = classDB.get_method_bind("LinkButton\000", "set_text\000", 83702148)
		methodLinkButton[1] = classDB.get_method_bind("LinkButton\000", "get_text\000", 201670096)
		methodLinkButton[2] = classDB.get_method_bind("LinkButton\000", "set_text_direction\000", 119160795)
		methodLinkButton[3] = classDB.get_method_bind("LinkButton\000", "get_text_direction\000", 797257663)
		methodLinkButton[4] = classDB.get_method_bind("LinkButton\000", "set_language\000", 83702148)
		methodLinkButton[5] = classDB.get_method_bind("LinkButton\000", "get_language\000", 201670096)
		methodLinkButton[6] = classDB.get_method_bind("LinkButton\000", "set_underline_mode\000", 4032947085)
		methodLinkButton[7] = classDB.get_method_bind("LinkButton\000", "get_underline_mode\000", 568343738)
		methodLinkButton[8] = classDB.get_method_bind("LinkButton\000", "set_structured_text_bidi_override\000", 55961453)
		methodLinkButton[9] = classDB.get_method_bind("LinkButton\000", "get_structured_text_bidi_override\000", 3385126229)
		methodLinkButton[10] = classDB.get_method_bind("LinkButton\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodLinkButton[11] = classDB.get_method_bind("LinkButton\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodMarker2D[0] = classDB.get_method_bind("Marker2D\000", "set_gizmo_extents\000", 373806689)
		methodMarker2D[1] = classDB.get_method_bind("Marker2D\000", "get_gizmo_extents\000", 1740695150)
		methodMarshallsSingleton[0] = classDB.get_method_bind("Marshalls\000", "variant_to_base64\000", 3876248563)
		methodMarshallsSingleton[1] = classDB.get_method_bind("Marshalls\000", "base64_to_variant\000", 218087648)
		methodMarshallsSingleton[2] = classDB.get_method_bind("Marshalls\000", "raw_to_base64\000", 3999417757)
		methodMarshallsSingleton[3] = classDB.get_method_bind("Marshalls\000", "base64_to_raw\000", 659035735)
		methodMarshallsSingleton[4] = classDB.get_method_bind("Marshalls\000", "utf8_to_base64\000", 1703090593)
		methodMarshallsSingleton[5] = classDB.get_method_bind("Marshalls\000", "base64_to_utf8\000", 1703090593)
		methodMaterial[0] = classDB.get_method_bind("Material\000", "set_next_pass\000", 2757459619)
		methodMaterial[1] = classDB.get_method_bind("Material\000", "get_next_pass\000", 5934680)
		methodMaterial[2] = classDB.get_method_bind("Material\000", "set_render_priority\000", 1286410249)
		methodMaterial[3] = classDB.get_method_bind("Material\000", "get_render_priority\000", 3905245786)
		methodMaterial[4] = classDB.get_method_bind("Material\000", "inspect_native_shader_code\000", 3218959716)
		methodMenuBar[0] = classDB.get_method_bind("MenuBar\000", "set_switch_on_hover\000", 2586408642)
		methodMenuBar[1] = classDB.get_method_bind("MenuBar\000", "is_switch_on_hover\000", 2240911060)
		methodMenuBar[2] = classDB.get_method_bind("MenuBar\000", "set_disable_shortcuts\000", 2586408642)
		methodMenuBar[3] = classDB.get_method_bind("MenuBar\000", "set_prefer_global_menu\000", 2586408642)
		methodMenuBar[4] = classDB.get_method_bind("MenuBar\000", "is_prefer_global_menu\000", 36873697)
		methodMenuBar[5] = classDB.get_method_bind("MenuBar\000", "is_native_menu\000", 36873697)
		methodMenuBar[6] = classDB.get_method_bind("MenuBar\000", "get_menu_count\000", 3905245786)
		methodMenuBar[7] = classDB.get_method_bind("MenuBar\000", "set_text_direction\000", 119160795)
		methodMenuBar[8] = classDB.get_method_bind("MenuBar\000", "get_text_direction\000", 797257663)
		methodMenuBar[9] = classDB.get_method_bind("MenuBar\000", "set_language\000", 83702148)
		methodMenuBar[10] = classDB.get_method_bind("MenuBar\000", "get_language\000", 201670096)
		methodMenuBar[11] = classDB.get_method_bind("MenuBar\000", "set_flat\000", 2586408642)
		methodMenuBar[12] = classDB.get_method_bind("MenuBar\000", "is_flat\000", 36873697)
		methodMenuBar[13] = classDB.get_method_bind("MenuBar\000", "set_start_index\000", 1286410249)
		methodMenuBar[14] = classDB.get_method_bind("MenuBar\000", "get_start_index\000", 3905245786)
		methodMenuBar[15] = classDB.get_method_bind("MenuBar\000", "set_menu_title\000", 501894301)
		methodMenuBar[16] = classDB.get_method_bind("MenuBar\000", "get_menu_title\000", 844755477)
		methodMenuBar[17] = classDB.get_method_bind("MenuBar\000", "set_menu_tooltip\000", 501894301)
		methodMenuBar[18] = classDB.get_method_bind("MenuBar\000", "get_menu_tooltip\000", 844755477)
		methodMenuBar[19] = classDB.get_method_bind("MenuBar\000", "set_menu_disabled\000", 300928843)
		methodMenuBar[20] = classDB.get_method_bind("MenuBar\000", "is_menu_disabled\000", 1116898809)
		methodMenuBar[21] = classDB.get_method_bind("MenuBar\000", "set_menu_hidden\000", 300928843)
		methodMenuBar[22] = classDB.get_method_bind("MenuBar\000", "is_menu_hidden\000", 1116898809)
		methodMenuBar[23] = classDB.get_method_bind("MenuBar\000", "set_shortcut_context\000", 1078189570)
		methodMenuBar[24] = classDB.get_method_bind("MenuBar\000", "get_shortcut_context\000", 3160264692)
		methodMenuBar[25] = classDB.get_method_bind("MenuBar\000", "get_menu_popup\000", 2100501353)
		methodMenuButton[0] = classDB.get_method_bind("MenuButton\000", "get_popup\000", 229722558)
		methodMenuButton[1] = classDB.get_method_bind("MenuButton\000", "set_switch_on_hover\000", 2586408642)
		methodMenuButton[2] = classDB.get_method_bind("MenuButton\000", "is_switch_on_hover\000", 2240911060)
		methodMenuButton[3] = classDB.get_method_bind("MenuButton\000", "set_disable_shortcuts\000", 2586408642)
		methodMenuButton[4] = classDB.get_method_bind("MenuButton\000", "set_item_count\000", 1286410249)
		methodMenuButton[5] = classDB.get_method_bind("MenuButton\000", "get_item_count\000", 3905245786)
		methodMesh[0] = classDB.get_method_bind("Mesh\000", "set_lightmap_size_hint\000", 1130785943)
		methodMesh[1] = classDB.get_method_bind("Mesh\000", "get_lightmap_size_hint\000", 3690982128)
		methodMesh[2] = classDB.get_method_bind("Mesh\000", "get_aabb\000", 1068685055)
		methodMesh[3] = classDB.get_method_bind("Mesh\000", "get_surface_count\000", 3905245786)
		methodMesh[4] = classDB.get_method_bind("Mesh\000", "surface_get_arrays\000", 663333327)
		methodMesh[5] = classDB.get_method_bind("Mesh\000", "surface_get_blend_shape_arrays\000", 663333327)
		methodMesh[6] = classDB.get_method_bind("Mesh\000", "surface_set_material\000", 3671737478)
		methodMesh[7] = classDB.get_method_bind("Mesh\000", "surface_get_material\000", 2897466400)
		methodMesh[8] = classDB.get_method_bind("Mesh\000", "create_trimesh_shape\000", 3214262478)
		methodMesh[9] = classDB.get_method_bind("Mesh\000", "create_convex_shape\000", 1330343779)
		methodMesh[10] = classDB.get_method_bind("Mesh\000", "create_outline\000", 1208642001)
		methodMesh[11] = classDB.get_method_bind("Mesh\000", "get_faces\000", 497664490)
		methodMesh[12] = classDB.get_method_bind("Mesh\000", "generate_triangle_mesh\000", 3476533166)
		methodMeshDataTool[0] = classDB.get_method_bind("MeshDataTool\000", "clear\000", 3218959716)
		methodMeshDataTool[1] = classDB.get_method_bind("MeshDataTool\000", "create_from_surface\000", 2727020678)
		methodMeshDataTool[2] = classDB.get_method_bind("MeshDataTool\000", "commit_to_surface\000", 3521099812)
		methodMeshDataTool[3] = classDB.get_method_bind("MeshDataTool\000", "get_format\000", 3905245786)
		methodMeshDataTool[4] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_count\000", 3905245786)
		methodMeshDataTool[5] = classDB.get_method_bind("MeshDataTool\000", "get_edge_count\000", 3905245786)
		methodMeshDataTool[6] = classDB.get_method_bind("MeshDataTool\000", "get_face_count\000", 3905245786)
		methodMeshDataTool[7] = classDB.get_method_bind("MeshDataTool\000", "set_vertex\000", 1530502735)
		methodMeshDataTool[8] = classDB.get_method_bind("MeshDataTool\000", "get_vertex\000", 711720468)
		methodMeshDataTool[9] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_normal\000", 1530502735)
		methodMeshDataTool[10] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_normal\000", 711720468)
		methodMeshDataTool[11] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_tangent\000", 1104099133)
		methodMeshDataTool[12] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_tangent\000", 1372055458)
		methodMeshDataTool[13] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_uv\000", 163021252)
		methodMeshDataTool[14] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_uv\000", 2299179447)
		methodMeshDataTool[15] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_uv2\000", 163021252)
		methodMeshDataTool[16] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_uv2\000", 2299179447)
		methodMeshDataTool[17] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_color\000", 2878471219)
		methodMeshDataTool[18] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_color\000", 3457211756)
		methodMeshDataTool[19] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_bones\000", 3500328261)
		methodMeshDataTool[20] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_bones\000", 1706082319)
		methodMeshDataTool[21] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_weights\000", 1345852415)
		methodMeshDataTool[22] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_weights\000", 1542882410)
		methodMeshDataTool[23] = classDB.get_method_bind("MeshDataTool\000", "set_vertex_meta\000", 2152698145)
		methodMeshDataTool[24] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_meta\000", 4227898402)
		methodMeshDataTool[25] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_edges\000", 1706082319)
		methodMeshDataTool[26] = classDB.get_method_bind("MeshDataTool\000", "get_vertex_faces\000", 1706082319)
		methodMeshDataTool[27] = classDB.get_method_bind("MeshDataTool\000", "get_edge_vertex\000", 3175239445)
		methodMeshDataTool[28] = classDB.get_method_bind("MeshDataTool\000", "get_edge_faces\000", 1706082319)
		methodMeshDataTool[29] = classDB.get_method_bind("MeshDataTool\000", "set_edge_meta\000", 2152698145)
		methodMeshDataTool[30] = classDB.get_method_bind("MeshDataTool\000", "get_edge_meta\000", 4227898402)
		methodMeshDataTool[31] = classDB.get_method_bind("MeshDataTool\000", "get_face_vertex\000", 3175239445)
		methodMeshDataTool[32] = classDB.get_method_bind("MeshDataTool\000", "get_face_edge\000", 3175239445)
		methodMeshDataTool[33] = classDB.get_method_bind("MeshDataTool\000", "set_face_meta\000", 2152698145)
		methodMeshDataTool[34] = classDB.get_method_bind("MeshDataTool\000", "get_face_meta\000", 4227898402)
		methodMeshDataTool[35] = classDB.get_method_bind("MeshDataTool\000", "get_face_normal\000", 711720468)
		methodMeshDataTool[36] = classDB.get_method_bind("MeshDataTool\000", "set_material\000", 2757459619)
		methodMeshDataTool[37] = classDB.get_method_bind("MeshDataTool\000", "get_material\000", 5934680)
		methodMeshInstance2D[0] = classDB.get_method_bind("MeshInstance2D\000", "set_mesh\000", 194775623)
		methodMeshInstance2D[1] = classDB.get_method_bind("MeshInstance2D\000", "get_mesh\000", 1808005922)
		methodMeshInstance2D[2] = classDB.get_method_bind("MeshInstance2D\000", "set_texture\000", 4051416890)
		methodMeshInstance2D[3] = classDB.get_method_bind("MeshInstance2D\000", "get_texture\000", 3635182373)
		methodMeshInstance2D[4] = classDB.get_method_bind("MeshInstance2D\000", "set_normal_map\000", 4051416890)
		methodMeshInstance2D[5] = classDB.get_method_bind("MeshInstance2D\000", "get_normal_map\000", 3635182373)
		methodMeshInstance3D[0] = classDB.get_method_bind("MeshInstance3D\000", "set_mesh\000", 194775623)
		methodMeshInstance3D[1] = classDB.get_method_bind("MeshInstance3D\000", "get_mesh\000", 1808005922)
		methodMeshInstance3D[2] = classDB.get_method_bind("MeshInstance3D\000", "set_skeleton_path\000", 1348162250)
		methodMeshInstance3D[3] = classDB.get_method_bind("MeshInstance3D\000", "get_skeleton_path\000", 277076166)
		methodMeshInstance3D[4] = classDB.get_method_bind("MeshInstance3D\000", "set_skin\000", 3971435618)
		methodMeshInstance3D[5] = classDB.get_method_bind("MeshInstance3D\000", "get_skin\000", 2074563878)
		methodMeshInstance3D[6] = classDB.get_method_bind("MeshInstance3D\000", "get_surface_override_material_count\000", 3905245786)
		methodMeshInstance3D[7] = classDB.get_method_bind("MeshInstance3D\000", "set_surface_override_material\000", 3671737478)
		methodMeshInstance3D[8] = classDB.get_method_bind("MeshInstance3D\000", "get_surface_override_material\000", 2897466400)
		methodMeshInstance3D[9] = classDB.get_method_bind("MeshInstance3D\000", "get_active_material\000", 2897466400)
		methodMeshInstance3D[10] = classDB.get_method_bind("MeshInstance3D\000", "create_trimesh_collision\000", 3218959716)
		methodMeshInstance3D[11] = classDB.get_method_bind("MeshInstance3D\000", "create_convex_collision\000", 2751962654)
		methodMeshInstance3D[12] = classDB.get_method_bind("MeshInstance3D\000", "create_multiple_convex_collisions\000", 3218959716)
		methodMeshInstance3D[13] = classDB.get_method_bind("MeshInstance3D\000", "get_blend_shape_count\000", 3905245786)
		methodMeshInstance3D[14] = classDB.get_method_bind("MeshInstance3D\000", "find_blend_shape_by_name\000", 4150868206)
		methodMeshInstance3D[15] = classDB.get_method_bind("MeshInstance3D\000", "get_blend_shape_value\000", 2339986948)
		methodMeshInstance3D[16] = classDB.get_method_bind("MeshInstance3D\000", "set_blend_shape_value\000", 1602489585)
		methodMeshInstance3D[17] = classDB.get_method_bind("MeshInstance3D\000", "create_debug_tangents\000", 3218959716)
		methodMeshLibrary[0] = classDB.get_method_bind("MeshLibrary\000", "create_item\000", 1286410249)
		methodMeshLibrary[1] = classDB.get_method_bind("MeshLibrary\000", "set_item_name\000", 501894301)
		methodMeshLibrary[2] = classDB.get_method_bind("MeshLibrary\000", "set_item_mesh\000", 969122797)
		methodMeshLibrary[3] = classDB.get_method_bind("MeshLibrary\000", "set_item_mesh_transform\000", 3616898986)
		methodMeshLibrary[4] = classDB.get_method_bind("MeshLibrary\000", "set_item_navmesh\000", 3483353960)
		methodMeshLibrary[5] = classDB.get_method_bind("MeshLibrary\000", "set_item_navmesh_transform\000", 3616898986)
		methodMeshLibrary[6] = classDB.get_method_bind("MeshLibrary\000", "set_item_shapes\000", 537221740)
		methodMeshLibrary[7] = classDB.get_method_bind("MeshLibrary\000", "set_item_preview\000", 666127730)
		methodMeshLibrary[8] = classDB.get_method_bind("MeshLibrary\000", "get_item_name\000", 844755477)
		methodMeshLibrary[9] = classDB.get_method_bind("MeshLibrary\000", "get_item_mesh\000", 1576363275)
		methodMeshLibrary[10] = classDB.get_method_bind("MeshLibrary\000", "get_item_mesh_transform\000", 1965739696)
		methodMeshLibrary[11] = classDB.get_method_bind("MeshLibrary\000", "get_item_navmesh\000", 2729647406)
		methodMeshLibrary[12] = classDB.get_method_bind("MeshLibrary\000", "get_item_navmesh_transform\000", 1965739696)
		methodMeshLibrary[13] = classDB.get_method_bind("MeshLibrary\000", "get_item_shapes\000", 663333327)
		methodMeshLibrary[14] = classDB.get_method_bind("MeshLibrary\000", "get_item_preview\000", 3536238170)
		methodMeshLibrary[15] = classDB.get_method_bind("MeshLibrary\000", "remove_item\000", 1286410249)
		methodMeshLibrary[16] = classDB.get_method_bind("MeshLibrary\000", "find_item_by_name\000", 1321353865)
		methodMeshLibrary[17] = classDB.get_method_bind("MeshLibrary\000", "clear\000", 3218959716)
		methodMeshLibrary[18] = classDB.get_method_bind("MeshLibrary\000", "get_item_list\000", 1930428628)
		methodMeshLibrary[19] = classDB.get_method_bind("MeshLibrary\000", "get_last_unused_item_id\000", 3905245786)
		methodMeshTexture[0] = classDB.get_method_bind("MeshTexture\000", "set_mesh\000", 194775623)
		methodMeshTexture[1] = classDB.get_method_bind("MeshTexture\000", "get_mesh\000", 1808005922)
		methodMeshTexture[2] = classDB.get_method_bind("MeshTexture\000", "set_image_size\000", 743155724)
		methodMeshTexture[3] = classDB.get_method_bind("MeshTexture\000", "get_image_size\000", 3341600327)
		methodMeshTexture[4] = classDB.get_method_bind("MeshTexture\000", "set_base_texture\000", 4051416890)
		methodMeshTexture[5] = classDB.get_method_bind("MeshTexture\000", "get_base_texture\000", 3635182373)
		methodMethodTweener[0] = classDB.get_method_bind("MethodTweener\000", "set_delay\000", 266477812)
		methodMethodTweener[1] = classDB.get_method_bind("MethodTweener\000", "set_trans\000", 3740975367)
		methodMethodTweener[2] = classDB.get_method_bind("MethodTweener\000", "set_ease\000", 315540545)
		methodMissingNode[0] = classDB.get_method_bind("MissingNode\000", "set_original_class\000", 83702148)
		methodMissingNode[1] = classDB.get_method_bind("MissingNode\000", "get_original_class\000", 201670096)
		methodMissingNode[2] = classDB.get_method_bind("MissingNode\000", "set_recording_properties\000", 2586408642)
		methodMissingNode[3] = classDB.get_method_bind("MissingNode\000", "is_recording_properties\000", 36873697)
		methodMissingResource[0] = classDB.get_method_bind("MissingResource\000", "set_original_class\000", 83702148)
		methodMissingResource[1] = classDB.get_method_bind("MissingResource\000", "get_original_class\000", 201670096)
		methodMissingResource[2] = classDB.get_method_bind("MissingResource\000", "set_recording_properties\000", 2586408642)
		methodMissingResource[3] = classDB.get_method_bind("MissingResource\000", "is_recording_properties\000", 36873697)
		methodMobileVRInterface[0] = classDB.get_method_bind("MobileVRInterface\000", "set_eye_height\000", 373806689)
		methodMobileVRInterface[1] = classDB.get_method_bind("MobileVRInterface\000", "get_eye_height\000", 1740695150)
		methodMobileVRInterface[2] = classDB.get_method_bind("MobileVRInterface\000", "set_iod\000", 373806689)
		methodMobileVRInterface[3] = classDB.get_method_bind("MobileVRInterface\000", "get_iod\000", 1740695150)
		methodMobileVRInterface[4] = classDB.get_method_bind("MobileVRInterface\000", "set_display_width\000", 373806689)
		methodMobileVRInterface[5] = classDB.get_method_bind("MobileVRInterface\000", "get_display_width\000", 1740695150)
		methodMobileVRInterface[6] = classDB.get_method_bind("MobileVRInterface\000", "set_display_to_lens\000", 373806689)
		methodMobileVRInterface[7] = classDB.get_method_bind("MobileVRInterface\000", "get_display_to_lens\000", 1740695150)
		methodMobileVRInterface[8] = classDB.get_method_bind("MobileVRInterface\000", "set_oversample\000", 373806689)
		methodMobileVRInterface[9] = classDB.get_method_bind("MobileVRInterface\000", "get_oversample\000", 1740695150)
		methodMobileVRInterface[10] = classDB.get_method_bind("MobileVRInterface\000", "set_k1\000", 373806689)
		methodMobileVRInterface[11] = classDB.get_method_bind("MobileVRInterface\000", "get_k1\000", 1740695150)
		methodMobileVRInterface[12] = classDB.get_method_bind("MobileVRInterface\000", "set_k2\000", 373806689)
		methodMobileVRInterface[13] = classDB.get_method_bind("MobileVRInterface\000", "get_k2\000", 1740695150)
		methodMovieWriter[0] = classDB.get_method_bind("MovieWriter\000", "add_writer\000", 4023702871)
		methodMultiMesh[0] = classDB.get_method_bind("MultiMesh\000", "set_mesh\000", 194775623)
		methodMultiMesh[1] = classDB.get_method_bind("MultiMesh\000", "get_mesh\000", 1808005922)
		methodMultiMesh[2] = classDB.get_method_bind("MultiMesh\000", "set_use_colors\000", 2586408642)
		methodMultiMesh[3] = classDB.get_method_bind("MultiMesh\000", "is_using_colors\000", 36873697)
		methodMultiMesh[4] = classDB.get_method_bind("MultiMesh\000", "set_use_custom_data\000", 2586408642)
		methodMultiMesh[5] = classDB.get_method_bind("MultiMesh\000", "is_using_custom_data\000", 36873697)
		methodMultiMesh[6] = classDB.get_method_bind("MultiMesh\000", "set_transform_format\000", 2404750322)
		methodMultiMesh[7] = classDB.get_method_bind("MultiMesh\000", "get_transform_format\000", 2444156481)
		methodMultiMesh[8] = classDB.get_method_bind("MultiMesh\000", "set_instance_count\000", 1286410249)
		methodMultiMesh[9] = classDB.get_method_bind("MultiMesh\000", "get_instance_count\000", 3905245786)
		methodMultiMesh[10] = classDB.get_method_bind("MultiMesh\000", "set_visible_instance_count\000", 1286410249)
		methodMultiMesh[11] = classDB.get_method_bind("MultiMesh\000", "get_visible_instance_count\000", 3905245786)
		methodMultiMesh[12] = classDB.get_method_bind("MultiMesh\000", "set_instance_transform\000", 3616898986)
		methodMultiMesh[13] = classDB.get_method_bind("MultiMesh\000", "set_instance_transform_2d\000", 30160968)
		methodMultiMesh[14] = classDB.get_method_bind("MultiMesh\000", "get_instance_transform\000", 1965739696)
		methodMultiMesh[15] = classDB.get_method_bind("MultiMesh\000", "get_instance_transform_2d\000", 3836996910)
		methodMultiMesh[16] = classDB.get_method_bind("MultiMesh\000", "set_instance_color\000", 2878471219)
		methodMultiMesh[17] = classDB.get_method_bind("MultiMesh\000", "get_instance_color\000", 3457211756)
		methodMultiMesh[18] = classDB.get_method_bind("MultiMesh\000", "set_instance_custom_data\000", 2878471219)
		methodMultiMesh[19] = classDB.get_method_bind("MultiMesh\000", "get_instance_custom_data\000", 3457211756)
		methodMultiMesh[20] = classDB.get_method_bind("MultiMesh\000", "get_aabb\000", 1068685055)
		methodMultiMesh[21] = classDB.get_method_bind("MultiMesh\000", "get_buffer\000", 675695659)
		methodMultiMesh[22] = classDB.get_method_bind("MultiMesh\000", "set_buffer\000", 2899603908)
		methodMultiMeshInstance2D[0] = classDB.get_method_bind("MultiMeshInstance2D\000", "set_multimesh\000", 2246127404)
		methodMultiMeshInstance2D[1] = classDB.get_method_bind("MultiMeshInstance2D\000", "get_multimesh\000", 1385450523)
		methodMultiMeshInstance2D[2] = classDB.get_method_bind("MultiMeshInstance2D\000", "set_texture\000", 4051416890)
		methodMultiMeshInstance2D[3] = classDB.get_method_bind("MultiMeshInstance2D\000", "get_texture\000", 3635182373)
		methodMultiMeshInstance2D[4] = classDB.get_method_bind("MultiMeshInstance2D\000", "set_normal_map\000", 4051416890)
		methodMultiMeshInstance2D[5] = classDB.get_method_bind("MultiMeshInstance2D\000", "get_normal_map\000", 3635182373)
		methodMultiMeshInstance3D[0] = classDB.get_method_bind("MultiMeshInstance3D\000", "set_multimesh\000", 2246127404)
		methodMultiMeshInstance3D[1] = classDB.get_method_bind("MultiMeshInstance3D\000", "get_multimesh\000", 1385450523)
		methodMultiplayerAPI[0] = classDB.get_method_bind("MultiplayerAPI\000", "has_multiplayer_peer\000", 2240911060)
		methodMultiplayerAPI[1] = classDB.get_method_bind("MultiplayerAPI\000", "get_multiplayer_peer\000", 3223692825)
		methodMultiplayerAPI[2] = classDB.get_method_bind("MultiplayerAPI\000", "set_multiplayer_peer\000", 3694835298)
		methodMultiplayerAPI[3] = classDB.get_method_bind("MultiplayerAPI\000", "get_unique_id\000", 2455072627)
		methodMultiplayerAPI[4] = classDB.get_method_bind("MultiplayerAPI\000", "is_server\000", 2240911060)
		methodMultiplayerAPI[5] = classDB.get_method_bind("MultiplayerAPI\000", "get_remote_sender_id\000", 2455072627)
		methodMultiplayerAPI[6] = classDB.get_method_bind("MultiplayerAPI\000", "poll\000", 166280745)
		methodMultiplayerAPI[7] = classDB.get_method_bind("MultiplayerAPI\000", "rpc\000", 1833408346)
		methodMultiplayerAPI[8] = classDB.get_method_bind("MultiplayerAPI\000", "object_configuration_add\000", 1171879464)
		methodMultiplayerAPI[9] = classDB.get_method_bind("MultiplayerAPI\000", "object_configuration_remove\000", 1171879464)
		methodMultiplayerAPI[10] = classDB.get_method_bind("MultiplayerAPI\000", "get_peers\000", 969006518)
		methodMultiplayerAPI[11] = classDB.get_method_bind("MultiplayerAPI\000", "set_default_interface\000", 3304788590)
		methodMultiplayerAPI[12] = classDB.get_method_bind("MultiplayerAPI\000", "get_default_interface\000", 2737447660)
		methodMultiplayerAPI[13] = classDB.get_method_bind("MultiplayerAPI\000", "create_default_interface\000", 3294156723)
		methodMultiplayerPeer[0] = classDB.get_method_bind("MultiplayerPeer\000", "set_transfer_channel\000", 1286410249)
		methodMultiplayerPeer[1] = classDB.get_method_bind("MultiplayerPeer\000", "get_transfer_channel\000", 3905245786)
		methodMultiplayerPeer[2] = classDB.get_method_bind("MultiplayerPeer\000", "set_transfer_mode\000", 950411049)
		methodMultiplayerPeer[3] = classDB.get_method_bind("MultiplayerPeer\000", "get_transfer_mode\000", 3369852622)
		methodMultiplayerPeer[4] = classDB.get_method_bind("MultiplayerPeer\000", "set_target_peer\000", 1286410249)
		methodMultiplayerPeer[5] = classDB.get_method_bind("MultiplayerPeer\000", "get_packet_peer\000", 3905245786)
		methodMultiplayerPeer[6] = classDB.get_method_bind("MultiplayerPeer\000", "poll\000", 3218959716)
		methodMultiplayerPeer[7] = classDB.get_method_bind("MultiplayerPeer\000", "get_connection_status\000", 2147374275)
		methodMultiplayerPeer[8] = classDB.get_method_bind("MultiplayerPeer\000", "get_unique_id\000", 3905245786)
		methodMultiplayerPeer[9] = classDB.get_method_bind("MultiplayerPeer\000", "generate_unique_id\000", 3905245786)
		methodMultiplayerPeer[10] = classDB.get_method_bind("MultiplayerPeer\000", "set_refuse_new_connections\000", 2586408642)
		methodMultiplayerPeer[11] = classDB.get_method_bind("MultiplayerPeer\000", "is_refusing_new_connections\000", 36873697)
		methodMultiplayerSpawner[0] = classDB.get_method_bind("MultiplayerSpawner\000", "add_spawnable_scene\000", 83702148)
		methodMultiplayerSpawner[1] = classDB.get_method_bind("MultiplayerSpawner\000", "get_spawnable_scene_count\000", 3905245786)
		methodMultiplayerSpawner[2] = classDB.get_method_bind("MultiplayerSpawner\000", "get_spawnable_scene\000", 844755477)
		methodMultiplayerSpawner[3] = classDB.get_method_bind("MultiplayerSpawner\000", "clear_spawnable_scenes\000", 3218959716)
		methodMultiplayerSpawner[4] = classDB.get_method_bind("MultiplayerSpawner\000", "spawn\000", 1991184589)
		methodMultiplayerSpawner[5] = classDB.get_method_bind("MultiplayerSpawner\000", "get_spawn_path\000", 4075236667)
		methodMultiplayerSpawner[6] = classDB.get_method_bind("MultiplayerSpawner\000", "set_spawn_path\000", 1348162250)
		methodMultiplayerSpawner[7] = classDB.get_method_bind("MultiplayerSpawner\000", "get_spawn_limit\000", 3905245786)
		methodMultiplayerSpawner[8] = classDB.get_method_bind("MultiplayerSpawner\000", "set_spawn_limit\000", 1286410249)
		methodMultiplayerSynchronizer[0] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_root_path\000", 1348162250)
		methodMultiplayerSynchronizer[1] = classDB.get_method_bind("MultiplayerSynchronizer\000", "get_root_path\000", 4075236667)
		methodMultiplayerSynchronizer[2] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_replication_interval\000", 373806689)
		methodMultiplayerSynchronizer[3] = classDB.get_method_bind("MultiplayerSynchronizer\000", "get_replication_interval\000", 1740695150)
		methodMultiplayerSynchronizer[4] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_replication_config\000", 3889206742)
		methodMultiplayerSynchronizer[5] = classDB.get_method_bind("MultiplayerSynchronizer\000", "get_replication_config\000", 3200254614)
		methodMultiplayerSynchronizer[6] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_visibility_update_mode\000", 3494860300)
		methodMultiplayerSynchronizer[7] = classDB.get_method_bind("MultiplayerSynchronizer\000", "get_visibility_update_mode\000", 3352241418)
		methodMultiplayerSynchronizer[8] = classDB.get_method_bind("MultiplayerSynchronizer\000", "update_visibility\000", 1995695955)
		methodMultiplayerSynchronizer[9] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_visibility_public\000", 2586408642)
		methodMultiplayerSynchronizer[10] = classDB.get_method_bind("MultiplayerSynchronizer\000", "is_visibility_public\000", 36873697)
		methodMultiplayerSynchronizer[11] = classDB.get_method_bind("MultiplayerSynchronizer\000", "add_visibility_filter\000", 1611583062)
		methodMultiplayerSynchronizer[12] = classDB.get_method_bind("MultiplayerSynchronizer\000", "remove_visibility_filter\000", 1611583062)
		methodMultiplayerSynchronizer[13] = classDB.get_method_bind("MultiplayerSynchronizer\000", "set_visibility_for\000", 300928843)
		methodMultiplayerSynchronizer[14] = classDB.get_method_bind("MultiplayerSynchronizer\000", "get_visibility_for\000", 1116898809)
		methodMutex[0] = classDB.get_method_bind("Mutex\000", "lock\000", 3218959716)
		methodMutex[1] = classDB.get_method_bind("Mutex\000", "try_lock\000", 166280745)
		methodMutex[2] = classDB.get_method_bind("Mutex\000", "unlock\000", 3218959716)
		methodNativeExtension[0] = classDB.get_method_bind("NativeExtension\000", "open_library\000", 852856452)
		methodNativeExtension[1] = classDB.get_method_bind("NativeExtension\000", "close_library\000", 3218959716)
		methodNativeExtension[2] = classDB.get_method_bind("NativeExtension\000", "is_library_open\000", 36873697)
		methodNativeExtension[3] = classDB.get_method_bind("NativeExtension\000", "get_minimum_library_initialization_level\000", 3541246554)
		methodNativeExtension[4] = classDB.get_method_bind("NativeExtension\000", "initialize_library\000", 3743496778)
		methodNativeExtensionManagerSingleton[0] = classDB.get_method_bind("NativeExtensionManager\000", "load_extension\000", 3900395898)
		methodNativeExtensionManagerSingleton[1] = classDB.get_method_bind("NativeExtensionManager\000", "reload_extension\000", 3900395898)
		methodNativeExtensionManagerSingleton[2] = classDB.get_method_bind("NativeExtensionManager\000", "unload_extension\000", 3900395898)
		methodNativeExtensionManagerSingleton[3] = classDB.get_method_bind("NativeExtensionManager\000", "is_extension_loaded\000", 3927539163)
		methodNativeExtensionManagerSingleton[4] = classDB.get_method_bind("NativeExtensionManager\000", "get_loaded_extensions\000", 1139954409)
		methodNativeExtensionManagerSingleton[5] = classDB.get_method_bind("NativeExtensionManager\000", "get_extension\000", 3065478200)
		methodNavigationAgent2D[0] = classDB.get_method_bind("NavigationAgent2D\000", "get_rid\000", 2944877500)
		methodNavigationAgent2D[1] = classDB.get_method_bind("NavigationAgent2D\000", "set_avoidance_enabled\000", 2586408642)
		methodNavigationAgent2D[2] = classDB.get_method_bind("NavigationAgent2D\000", "get_avoidance_enabled\000", 36873697)
		methodNavigationAgent2D[3] = classDB.get_method_bind("NavigationAgent2D\000", "set_path_desired_distance\000", 373806689)
		methodNavigationAgent2D[4] = classDB.get_method_bind("NavigationAgent2D\000", "get_path_desired_distance\000", 1740695150)
		methodNavigationAgent2D[5] = classDB.get_method_bind("NavigationAgent2D\000", "set_target_desired_distance\000", 373806689)
		methodNavigationAgent2D[6] = classDB.get_method_bind("NavigationAgent2D\000", "get_target_desired_distance\000", 1740695150)
		methodNavigationAgent2D[7] = classDB.get_method_bind("NavigationAgent2D\000", "set_radius\000", 373806689)
		methodNavigationAgent2D[8] = classDB.get_method_bind("NavigationAgent2D\000", "get_radius\000", 1740695150)
		methodNavigationAgent2D[9] = classDB.get_method_bind("NavigationAgent2D\000", "set_neighbor_distance\000", 373806689)
		methodNavigationAgent2D[10] = classDB.get_method_bind("NavigationAgent2D\000", "get_neighbor_distance\000", 1740695150)
		methodNavigationAgent2D[11] = classDB.get_method_bind("NavigationAgent2D\000", "set_max_neighbors\000", 1286410249)
		methodNavigationAgent2D[12] = classDB.get_method_bind("NavigationAgent2D\000", "get_max_neighbors\000", 3905245786)
		methodNavigationAgent2D[13] = classDB.get_method_bind("NavigationAgent2D\000", "set_time_horizon\000", 373806689)
		methodNavigationAgent2D[14] = classDB.get_method_bind("NavigationAgent2D\000", "get_time_horizon\000", 1740695150)
		methodNavigationAgent2D[15] = classDB.get_method_bind("NavigationAgent2D\000", "set_max_speed\000", 373806689)
		methodNavigationAgent2D[16] = classDB.get_method_bind("NavigationAgent2D\000", "get_max_speed\000", 1740695150)
		methodNavigationAgent2D[17] = classDB.get_method_bind("NavigationAgent2D\000", "set_path_max_distance\000", 373806689)
		methodNavigationAgent2D[18] = classDB.get_method_bind("NavigationAgent2D\000", "get_path_max_distance\000", 191475506)
		methodNavigationAgent2D[19] = classDB.get_method_bind("NavigationAgent2D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationAgent2D[20] = classDB.get_method_bind("NavigationAgent2D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationAgent2D[21] = classDB.get_method_bind("NavigationAgent2D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationAgent2D[22] = classDB.get_method_bind("NavigationAgent2D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationAgent2D[23] = classDB.get_method_bind("NavigationAgent2D\000", "set_navigation_map\000", 2722037293)
		methodNavigationAgent2D[24] = classDB.get_method_bind("NavigationAgent2D\000", "get_navigation_map\000", 2944877500)
		methodNavigationAgent2D[25] = classDB.get_method_bind("NavigationAgent2D\000", "set_target_location\000", 743155724)
		methodNavigationAgent2D[26] = classDB.get_method_bind("NavigationAgent2D\000", "get_target_location\000", 3341600327)
		methodNavigationAgent2D[27] = classDB.get_method_bind("NavigationAgent2D\000", "get_next_location\000", 1497962370)
		methodNavigationAgent2D[28] = classDB.get_method_bind("NavigationAgent2D\000", "distance_to_target\000", 1740695150)
		methodNavigationAgent2D[29] = classDB.get_method_bind("NavigationAgent2D\000", "set_velocity\000", 743155724)
		methodNavigationAgent2D[30] = classDB.get_method_bind("NavigationAgent2D\000", "get_nav_path\000", 2961356807)
		methodNavigationAgent2D[31] = classDB.get_method_bind("NavigationAgent2D\000", "get_nav_path_index\000", 3905245786)
		methodNavigationAgent2D[32] = classDB.get_method_bind("NavigationAgent2D\000", "is_target_reached\000", 36873697)
		methodNavigationAgent2D[33] = classDB.get_method_bind("NavigationAgent2D\000", "is_target_reachable\000", 2240911060)
		methodNavigationAgent2D[34] = classDB.get_method_bind("NavigationAgent2D\000", "is_navigation_finished\000", 2240911060)
		methodNavigationAgent2D[35] = classDB.get_method_bind("NavigationAgent2D\000", "get_final_location\000", 1497962370)
		methodNavigationAgent3D[0] = classDB.get_method_bind("NavigationAgent3D\000", "get_rid\000", 2944877500)
		methodNavigationAgent3D[1] = classDB.get_method_bind("NavigationAgent3D\000", "set_avoidance_enabled\000", 2586408642)
		methodNavigationAgent3D[2] = classDB.get_method_bind("NavigationAgent3D\000", "get_avoidance_enabled\000", 36873697)
		methodNavigationAgent3D[3] = classDB.get_method_bind("NavigationAgent3D\000", "set_path_desired_distance\000", 373806689)
		methodNavigationAgent3D[4] = classDB.get_method_bind("NavigationAgent3D\000", "get_path_desired_distance\000", 1740695150)
		methodNavigationAgent3D[5] = classDB.get_method_bind("NavigationAgent3D\000", "set_target_desired_distance\000", 373806689)
		methodNavigationAgent3D[6] = classDB.get_method_bind("NavigationAgent3D\000", "get_target_desired_distance\000", 1740695150)
		methodNavigationAgent3D[7] = classDB.get_method_bind("NavigationAgent3D\000", "set_radius\000", 373806689)
		methodNavigationAgent3D[8] = classDB.get_method_bind("NavigationAgent3D\000", "get_radius\000", 1740695150)
		methodNavigationAgent3D[9] = classDB.get_method_bind("NavigationAgent3D\000", "set_agent_height_offset\000", 373806689)
		methodNavigationAgent3D[10] = classDB.get_method_bind("NavigationAgent3D\000", "get_agent_height_offset\000", 1740695150)
		methodNavigationAgent3D[11] = classDB.get_method_bind("NavigationAgent3D\000", "set_ignore_y\000", 2586408642)
		methodNavigationAgent3D[12] = classDB.get_method_bind("NavigationAgent3D\000", "get_ignore_y\000", 36873697)
		methodNavigationAgent3D[13] = classDB.get_method_bind("NavigationAgent3D\000", "set_neighbor_distance\000", 373806689)
		methodNavigationAgent3D[14] = classDB.get_method_bind("NavigationAgent3D\000", "get_neighbor_distance\000", 1740695150)
		methodNavigationAgent3D[15] = classDB.get_method_bind("NavigationAgent3D\000", "set_max_neighbors\000", 1286410249)
		methodNavigationAgent3D[16] = classDB.get_method_bind("NavigationAgent3D\000", "get_max_neighbors\000", 3905245786)
		methodNavigationAgent3D[17] = classDB.get_method_bind("NavigationAgent3D\000", "set_time_horizon\000", 373806689)
		methodNavigationAgent3D[18] = classDB.get_method_bind("NavigationAgent3D\000", "get_time_horizon\000", 1740695150)
		methodNavigationAgent3D[19] = classDB.get_method_bind("NavigationAgent3D\000", "set_max_speed\000", 373806689)
		methodNavigationAgent3D[20] = classDB.get_method_bind("NavigationAgent3D\000", "get_max_speed\000", 1740695150)
		methodNavigationAgent3D[21] = classDB.get_method_bind("NavigationAgent3D\000", "set_path_max_distance\000", 373806689)
		methodNavigationAgent3D[22] = classDB.get_method_bind("NavigationAgent3D\000", "get_path_max_distance\000", 191475506)
		methodNavigationAgent3D[23] = classDB.get_method_bind("NavigationAgent3D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationAgent3D[24] = classDB.get_method_bind("NavigationAgent3D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationAgent3D[25] = classDB.get_method_bind("NavigationAgent3D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationAgent3D[26] = classDB.get_method_bind("NavigationAgent3D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationAgent3D[27] = classDB.get_method_bind("NavigationAgent3D\000", "set_navigation_map\000", 2722037293)
		methodNavigationAgent3D[28] = classDB.get_method_bind("NavigationAgent3D\000", "get_navigation_map\000", 2944877500)
		methodNavigationAgent3D[29] = classDB.get_method_bind("NavigationAgent3D\000", "set_target_location\000", 3460891852)
		methodNavigationAgent3D[30] = classDB.get_method_bind("NavigationAgent3D\000", "get_target_location\000", 3360562783)
		methodNavigationAgent3D[31] = classDB.get_method_bind("NavigationAgent3D\000", "get_next_location\000", 3783033775)
		methodNavigationAgent3D[32] = classDB.get_method_bind("NavigationAgent3D\000", "distance_to_target\000", 1740695150)
		methodNavigationAgent3D[33] = classDB.get_method_bind("NavigationAgent3D\000", "set_velocity\000", 3460891852)
		methodNavigationAgent3D[34] = classDB.get_method_bind("NavigationAgent3D\000", "get_nav_path\000", 497664490)
		methodNavigationAgent3D[35] = classDB.get_method_bind("NavigationAgent3D\000", "get_nav_path_index\000", 3905245786)
		methodNavigationAgent3D[36] = classDB.get_method_bind("NavigationAgent3D\000", "is_target_reached\000", 36873697)
		methodNavigationAgent3D[37] = classDB.get_method_bind("NavigationAgent3D\000", "is_target_reachable\000", 2240911060)
		methodNavigationAgent3D[38] = classDB.get_method_bind("NavigationAgent3D\000", "is_navigation_finished\000", 2240911060)
		methodNavigationAgent3D[39] = classDB.get_method_bind("NavigationAgent3D\000", "get_final_location\000", 3783033775)
		methodNavigationMesh[0] = classDB.get_method_bind("NavigationMesh\000", "set_sample_partition_type\000", 2472437533)
		methodNavigationMesh[1] = classDB.get_method_bind("NavigationMesh\000", "get_sample_partition_type\000", 833513918)
		methodNavigationMesh[2] = classDB.get_method_bind("NavigationMesh\000", "set_parsed_geometry_type\000", 3064713163)
		methodNavigationMesh[3] = classDB.get_method_bind("NavigationMesh\000", "get_parsed_geometry_type\000", 3928011953)
		methodNavigationMesh[4] = classDB.get_method_bind("NavigationMesh\000", "set_collision_mask\000", 1286410249)
		methodNavigationMesh[5] = classDB.get_method_bind("NavigationMesh\000", "get_collision_mask\000", 3905245786)
		methodNavigationMesh[6] = classDB.get_method_bind("NavigationMesh\000", "set_collision_mask_value\000", 300928843)
		methodNavigationMesh[7] = classDB.get_method_bind("NavigationMesh\000", "get_collision_mask_value\000", 1116898809)
		methodNavigationMesh[8] = classDB.get_method_bind("NavigationMesh\000", "set_source_geometry_mode\000", 2700825194)
		methodNavigationMesh[9] = classDB.get_method_bind("NavigationMesh\000", "get_source_geometry_mode\000", 2770484141)
		methodNavigationMesh[10] = classDB.get_method_bind("NavigationMesh\000", "set_source_group_name\000", 3304788590)
		methodNavigationMesh[11] = classDB.get_method_bind("NavigationMesh\000", "get_source_group_name\000", 2002593661)
		methodNavigationMesh[12] = classDB.get_method_bind("NavigationMesh\000", "set_cell_size\000", 373806689)
		methodNavigationMesh[13] = classDB.get_method_bind("NavigationMesh\000", "get_cell_size\000", 1740695150)
		methodNavigationMesh[14] = classDB.get_method_bind("NavigationMesh\000", "set_cell_height\000", 373806689)
		methodNavigationMesh[15] = classDB.get_method_bind("NavigationMesh\000", "get_cell_height\000", 1740695150)
		methodNavigationMesh[16] = classDB.get_method_bind("NavigationMesh\000", "set_agent_height\000", 373806689)
		methodNavigationMesh[17] = classDB.get_method_bind("NavigationMesh\000", "get_agent_height\000", 1740695150)
		methodNavigationMesh[18] = classDB.get_method_bind("NavigationMesh\000", "set_agent_radius\000", 373806689)
		methodNavigationMesh[19] = classDB.get_method_bind("NavigationMesh\000", "get_agent_radius\000", 191475506)
		methodNavigationMesh[20] = classDB.get_method_bind("NavigationMesh\000", "set_agent_max_climb\000", 373806689)
		methodNavigationMesh[21] = classDB.get_method_bind("NavigationMesh\000", "get_agent_max_climb\000", 1740695150)
		methodNavigationMesh[22] = classDB.get_method_bind("NavigationMesh\000", "set_agent_max_slope\000", 373806689)
		methodNavigationMesh[23] = classDB.get_method_bind("NavigationMesh\000", "get_agent_max_slope\000", 1740695150)
		methodNavigationMesh[24] = classDB.get_method_bind("NavigationMesh\000", "set_region_min_size\000", 373806689)
		methodNavigationMesh[25] = classDB.get_method_bind("NavigationMesh\000", "get_region_min_size\000", 1740695150)
		methodNavigationMesh[26] = classDB.get_method_bind("NavigationMesh\000", "set_region_merge_size\000", 373806689)
		methodNavigationMesh[27] = classDB.get_method_bind("NavigationMesh\000", "get_region_merge_size\000", 1740695150)
		methodNavigationMesh[28] = classDB.get_method_bind("NavigationMesh\000", "set_edge_max_length\000", 373806689)
		methodNavigationMesh[29] = classDB.get_method_bind("NavigationMesh\000", "get_edge_max_length\000", 1740695150)
		methodNavigationMesh[30] = classDB.get_method_bind("NavigationMesh\000", "set_edge_max_error\000", 373806689)
		methodNavigationMesh[31] = classDB.get_method_bind("NavigationMesh\000", "get_edge_max_error\000", 1740695150)
		methodNavigationMesh[32] = classDB.get_method_bind("NavigationMesh\000", "set_verts_per_poly\000", 373806689)
		methodNavigationMesh[33] = classDB.get_method_bind("NavigationMesh\000", "get_verts_per_poly\000", 1740695150)
		methodNavigationMesh[34] = classDB.get_method_bind("NavigationMesh\000", "set_detail_sample_distance\000", 373806689)
		methodNavigationMesh[35] = classDB.get_method_bind("NavigationMesh\000", "get_detail_sample_distance\000", 1740695150)
		methodNavigationMesh[36] = classDB.get_method_bind("NavigationMesh\000", "set_detail_sample_max_error\000", 373806689)
		methodNavigationMesh[37] = classDB.get_method_bind("NavigationMesh\000", "get_detail_sample_max_error\000", 1740695150)
		methodNavigationMesh[38] = classDB.get_method_bind("NavigationMesh\000", "set_filter_low_hanging_obstacles\000", 2586408642)
		methodNavigationMesh[39] = classDB.get_method_bind("NavigationMesh\000", "get_filter_low_hanging_obstacles\000", 36873697)
		methodNavigationMesh[40] = classDB.get_method_bind("NavigationMesh\000", "set_filter_ledge_spans\000", 2586408642)
		methodNavigationMesh[41] = classDB.get_method_bind("NavigationMesh\000", "get_filter_ledge_spans\000", 36873697)
		methodNavigationMesh[42] = classDB.get_method_bind("NavigationMesh\000", "set_filter_walkable_low_height_spans\000", 2586408642)
		methodNavigationMesh[43] = classDB.get_method_bind("NavigationMesh\000", "get_filter_walkable_low_height_spans\000", 36873697)
		methodNavigationMesh[44] = classDB.get_method_bind("NavigationMesh\000", "set_filter_baking_aabb\000", 259215842)
		methodNavigationMesh[45] = classDB.get_method_bind("NavigationMesh\000", "get_filter_baking_aabb\000", 1068685055)
		methodNavigationMesh[46] = classDB.get_method_bind("NavigationMesh\000", "set_filter_baking_aabb_offset\000", 3460891852)
		methodNavigationMesh[47] = classDB.get_method_bind("NavigationMesh\000", "get_filter_baking_aabb_offset\000", 3360562783)
		methodNavigationMesh[48] = classDB.get_method_bind("NavigationMesh\000", "set_vertices\000", 334873810)
		methodNavigationMesh[49] = classDB.get_method_bind("NavigationMesh\000", "get_vertices\000", 497664490)
		methodNavigationMesh[50] = classDB.get_method_bind("NavigationMesh\000", "add_polygon\000", 3614634198)
		methodNavigationMesh[51] = classDB.get_method_bind("NavigationMesh\000", "get_polygon_count\000", 3905245786)
		methodNavigationMesh[52] = classDB.get_method_bind("NavigationMesh\000", "get_polygon\000", 3668444399)
		methodNavigationMesh[53] = classDB.get_method_bind("NavigationMesh\000", "clear_polygons\000", 3218959716)
		methodNavigationMesh[54] = classDB.get_method_bind("NavigationMesh\000", "create_from_mesh\000", 194775623)
		methodNavigationMeshGeneratorSingleton[0] = classDB.get_method_bind("NavigationMeshGenerator\000", "bake\000", 1401173477)
		methodNavigationMeshGeneratorSingleton[1] = classDB.get_method_bind("NavigationMeshGenerator\000", "clear\000", 2923361153)
		methodNavigationObstacle2D[0] = classDB.get_method_bind("NavigationObstacle2D\000", "get_rid\000", 2944877500)
		methodNavigationObstacle2D[1] = classDB.get_method_bind("NavigationObstacle2D\000", "set_estimate_radius\000", 2586408642)
		methodNavigationObstacle2D[2] = classDB.get_method_bind("NavigationObstacle2D\000", "is_radius_estimated\000", 36873697)
		methodNavigationObstacle2D[3] = classDB.get_method_bind("NavigationObstacle2D\000", "set_radius\000", 373806689)
		methodNavigationObstacle2D[4] = classDB.get_method_bind("NavigationObstacle2D\000", "get_radius\000", 1740695150)
		methodNavigationObstacle3D[0] = classDB.get_method_bind("NavigationObstacle3D\000", "get_rid\000", 2944877500)
		methodNavigationObstacle3D[1] = classDB.get_method_bind("NavigationObstacle3D\000", "set_estimate_radius\000", 2586408642)
		methodNavigationObstacle3D[2] = classDB.get_method_bind("NavigationObstacle3D\000", "is_radius_estimated\000", 36873697)
		methodNavigationObstacle3D[3] = classDB.get_method_bind("NavigationObstacle3D\000", "set_radius\000", 373806689)
		methodNavigationObstacle3D[4] = classDB.get_method_bind("NavigationObstacle3D\000", "get_radius\000", 1740695150)
		methodNavigationPolygon[0] = classDB.get_method_bind("NavigationPolygon\000", "set_vertices\000", 1509147220)
		methodNavigationPolygon[1] = classDB.get_method_bind("NavigationPolygon\000", "get_vertices\000", 2961356807)
		methodNavigationPolygon[2] = classDB.get_method_bind("NavigationPolygon\000", "add_polygon\000", 3614634198)
		methodNavigationPolygon[3] = classDB.get_method_bind("NavigationPolygon\000", "get_polygon_count\000", 3905245786)
		methodNavigationPolygon[4] = classDB.get_method_bind("NavigationPolygon\000", "get_polygon\000", 3668444399)
		methodNavigationPolygon[5] = classDB.get_method_bind("NavigationPolygon\000", "clear_polygons\000", 3218959716)
		methodNavigationPolygon[6] = classDB.get_method_bind("NavigationPolygon\000", "get_mesh\000", 330232164)
		methodNavigationPolygon[7] = classDB.get_method_bind("NavigationPolygon\000", "add_outline\000", 1509147220)
		methodNavigationPolygon[8] = classDB.get_method_bind("NavigationPolygon\000", "add_outline_at_index\000", 1569738947)
		methodNavigationPolygon[9] = classDB.get_method_bind("NavigationPolygon\000", "get_outline_count\000", 3905245786)
		methodNavigationPolygon[10] = classDB.get_method_bind("NavigationPolygon\000", "set_outline\000", 1201971903)
		methodNavigationPolygon[11] = classDB.get_method_bind("NavigationPolygon\000", "get_outline\000", 3946907486)
		methodNavigationPolygon[12] = classDB.get_method_bind("NavigationPolygon\000", "remove_outline\000", 1286410249)
		methodNavigationPolygon[13] = classDB.get_method_bind("NavigationPolygon\000", "clear_outlines\000", 3218959716)
		methodNavigationPolygon[14] = classDB.get_method_bind("NavigationPolygon\000", "make_polygons_from_outlines\000", 3218959716)
		methodNavigationRegion2D[0] = classDB.get_method_bind("NavigationRegion2D\000", "set_navigation_polygon\000", 1515040758)
		methodNavigationRegion2D[1] = classDB.get_method_bind("NavigationRegion2D\000", "get_navigation_polygon\000", 1046532237)
		methodNavigationRegion2D[2] = classDB.get_method_bind("NavigationRegion2D\000", "set_enabled\000", 2586408642)
		methodNavigationRegion2D[3] = classDB.get_method_bind("NavigationRegion2D\000", "is_enabled\000", 36873697)
		methodNavigationRegion2D[4] = classDB.get_method_bind("NavigationRegion2D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationRegion2D[5] = classDB.get_method_bind("NavigationRegion2D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationRegion2D[6] = classDB.get_method_bind("NavigationRegion2D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationRegion2D[7] = classDB.get_method_bind("NavigationRegion2D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationRegion2D[8] = classDB.get_method_bind("NavigationRegion2D\000", "get_region_rid\000", 2944877500)
		methodNavigationRegion2D[9] = classDB.get_method_bind("NavigationRegion2D\000", "set_enter_cost\000", 373806689)
		methodNavigationRegion2D[10] = classDB.get_method_bind("NavigationRegion2D\000", "get_enter_cost\000", 1740695150)
		methodNavigationRegion2D[11] = classDB.get_method_bind("NavigationRegion2D\000", "set_travel_cost\000", 373806689)
		methodNavigationRegion2D[12] = classDB.get_method_bind("NavigationRegion2D\000", "get_travel_cost\000", 1740695150)
		methodNavigationRegion3D[0] = classDB.get_method_bind("NavigationRegion3D\000", "set_navigation_mesh\000", 2923361153)
		methodNavigationRegion3D[1] = classDB.get_method_bind("NavigationRegion3D\000", "get_navigation_mesh\000", 1468720886)
		methodNavigationRegion3D[2] = classDB.get_method_bind("NavigationRegion3D\000", "set_enabled\000", 2586408642)
		methodNavigationRegion3D[3] = classDB.get_method_bind("NavigationRegion3D\000", "is_enabled\000", 36873697)
		methodNavigationRegion3D[4] = classDB.get_method_bind("NavigationRegion3D\000", "set_navigation_layers\000", 1286410249)
		methodNavigationRegion3D[5] = classDB.get_method_bind("NavigationRegion3D\000", "get_navigation_layers\000", 3905245786)
		methodNavigationRegion3D[6] = classDB.get_method_bind("NavigationRegion3D\000", "set_navigation_layer_value\000", 300928843)
		methodNavigationRegion3D[7] = classDB.get_method_bind("NavigationRegion3D\000", "get_navigation_layer_value\000", 1116898809)
		methodNavigationRegion3D[8] = classDB.get_method_bind("NavigationRegion3D\000", "get_region_rid\000", 2944877500)
		methodNavigationRegion3D[9] = classDB.get_method_bind("NavigationRegion3D\000", "set_enter_cost\000", 373806689)
		methodNavigationRegion3D[10] = classDB.get_method_bind("NavigationRegion3D\000", "get_enter_cost\000", 1740695150)
		methodNavigationRegion3D[11] = classDB.get_method_bind("NavigationRegion3D\000", "set_travel_cost\000", 373806689)
		methodNavigationRegion3D[12] = classDB.get_method_bind("NavigationRegion3D\000", "get_travel_cost\000", 1740695150)
		methodNavigationRegion3D[13] = classDB.get_method_bind("NavigationRegion3D\000", "bake_navigation_mesh\000", 3216645846)
		methodNavigationServer2DSingleton[0] = classDB.get_method_bind("NavigationServer2D\000", "get_maps\000", 3995934104)
		methodNavigationServer2DSingleton[1] = classDB.get_method_bind("NavigationServer2D\000", "map_create\000", 2944877500)
		methodNavigationServer2DSingleton[2] = classDB.get_method_bind("NavigationServer2D\000", "map_set_active\000", 453506575)
		methodNavigationServer2DSingleton[3] = classDB.get_method_bind("NavigationServer2D\000", "map_is_active\000", 4155700596)
		methodNavigationServer2DSingleton[4] = classDB.get_method_bind("NavigationServer2D\000", "map_set_cell_size\000", 225571937)
		methodNavigationServer2DSingleton[5] = classDB.get_method_bind("NavigationServer2D\000", "map_get_cell_size\000", 866169185)
		methodNavigationServer2DSingleton[6] = classDB.get_method_bind("NavigationServer2D\000", "map_set_edge_connection_margin\000", 225571937)
		methodNavigationServer2DSingleton[7] = classDB.get_method_bind("NavigationServer2D\000", "map_get_edge_connection_margin\000", 866169185)
		methodNavigationServer2DSingleton[8] = classDB.get_method_bind("NavigationServer2D\000", "map_get_path\000", 56240621)
		methodNavigationServer2DSingleton[9] = classDB.get_method_bind("NavigationServer2D\000", "map_get_closest_point\000", 1358334418)
		methodNavigationServer2DSingleton[10] = classDB.get_method_bind("NavigationServer2D\000", "map_get_closest_point_owner\000", 1353467510)
		methodNavigationServer2DSingleton[11] = classDB.get_method_bind("NavigationServer2D\000", "map_get_regions\000", 2684255073)
		methodNavigationServer2DSingleton[12] = classDB.get_method_bind("NavigationServer2D\000", "map_get_agents\000", 2684255073)
		methodNavigationServer2DSingleton[13] = classDB.get_method_bind("NavigationServer2D\000", "map_force_update\000", 2722037293)
		methodNavigationServer2DSingleton[14] = classDB.get_method_bind("NavigationServer2D\000", "region_create\000", 2944877500)
		methodNavigationServer2DSingleton[15] = classDB.get_method_bind("NavigationServer2D\000", "region_set_enter_cost\000", 225571937)
		methodNavigationServer2DSingleton[16] = classDB.get_method_bind("NavigationServer2D\000", "region_get_enter_cost\000", 866169185)
		methodNavigationServer2DSingleton[17] = classDB.get_method_bind("NavigationServer2D\000", "region_set_travel_cost\000", 225571937)
		methodNavigationServer2DSingleton[18] = classDB.get_method_bind("NavigationServer2D\000", "region_get_travel_cost\000", 866169185)
		methodNavigationServer2DSingleton[19] = classDB.get_method_bind("NavigationServer2D\000", "region_owns_point\000", 219849798)
		methodNavigationServer2DSingleton[20] = classDB.get_method_bind("NavigationServer2D\000", "region_set_map\000", 781978857)
		methodNavigationServer2DSingleton[21] = classDB.get_method_bind("NavigationServer2D\000", "region_get_map\000", 3814569979)
		methodNavigationServer2DSingleton[22] = classDB.get_method_bind("NavigationServer2D\000", "region_set_navigation_layers\000", 286288326)
		methodNavigationServer2DSingleton[23] = classDB.get_method_bind("NavigationServer2D\000", "region_get_navigation_layers\000", 2198884583)
		methodNavigationServer2DSingleton[24] = classDB.get_method_bind("NavigationServer2D\000", "region_set_transform\000", 17342764)
		methodNavigationServer2DSingleton[25] = classDB.get_method_bind("NavigationServer2D\000", "region_set_navpoly\000", 3393715760)
		methodNavigationServer2DSingleton[26] = classDB.get_method_bind("NavigationServer2D\000", "region_get_connections_count\000", 2198884583)
		methodNavigationServer2DSingleton[27] = classDB.get_method_bind("NavigationServer2D\000", "region_get_connection_pathway_start\000", 2546185844)
		methodNavigationServer2DSingleton[28] = classDB.get_method_bind("NavigationServer2D\000", "region_get_connection_pathway_end\000", 2546185844)
		methodNavigationServer2DSingleton[29] = classDB.get_method_bind("NavigationServer2D\000", "agent_create\000", 2944877500)
		methodNavigationServer2DSingleton[30] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_map\000", 781978857)
		methodNavigationServer2DSingleton[31] = classDB.get_method_bind("NavigationServer2D\000", "agent_get_map\000", 3814569979)
		methodNavigationServer2DSingleton[32] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_neighbor_distance\000", 225571937)
		methodNavigationServer2DSingleton[33] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_max_neighbors\000", 286288326)
		methodNavigationServer2DSingleton[34] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_time_horizon\000", 225571937)
		methodNavigationServer2DSingleton[35] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_radius\000", 225571937)
		methodNavigationServer2DSingleton[36] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_max_speed\000", 225571937)
		methodNavigationServer2DSingleton[37] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_velocity\000", 3255841543)
		methodNavigationServer2DSingleton[38] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_target_velocity\000", 3255841543)
		methodNavigationServer2DSingleton[39] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_position\000", 3255841543)
		methodNavigationServer2DSingleton[40] = classDB.get_method_bind("NavigationServer2D\000", "agent_is_map_changed\000", 4155700596)
		methodNavigationServer2DSingleton[41] = classDB.get_method_bind("NavigationServer2D\000", "agent_set_callback\000", 1039455419)
		methodNavigationServer2DSingleton[42] = classDB.get_method_bind("NavigationServer2D\000", "free_rid\000", 145472570)
		methodNavigationServer3DSingleton[0] = classDB.get_method_bind("NavigationServer3D\000", "get_maps\000", 3995934104)
		methodNavigationServer3DSingleton[1] = classDB.get_method_bind("NavigationServer3D\000", "map_create\000", 2944877500)
		methodNavigationServer3DSingleton[2] = classDB.get_method_bind("NavigationServer3D\000", "map_set_active\000", 453506575)
		methodNavigationServer3DSingleton[3] = classDB.get_method_bind("NavigationServer3D\000", "map_is_active\000", 4155700596)
		methodNavigationServer3DSingleton[4] = classDB.get_method_bind("NavigationServer3D\000", "map_set_up\000", 3923919901)
		methodNavigationServer3DSingleton[5] = classDB.get_method_bind("NavigationServer3D\000", "map_get_up\000", 531438156)
		methodNavigationServer3DSingleton[6] = classDB.get_method_bind("NavigationServer3D\000", "map_set_cell_size\000", 225571937)
		methodNavigationServer3DSingleton[7] = classDB.get_method_bind("NavigationServer3D\000", "map_get_cell_size\000", 866169185)
		methodNavigationServer3DSingleton[8] = classDB.get_method_bind("NavigationServer3D\000", "map_set_edge_connection_margin\000", 225571937)
		methodNavigationServer3DSingleton[9] = classDB.get_method_bind("NavigationServer3D\000", "map_get_edge_connection_margin\000", 866169185)
		methodNavigationServer3DSingleton[10] = classDB.get_method_bind("NavigationServer3D\000", "map_get_path\000", 2121045993)
		methodNavigationServer3DSingleton[11] = classDB.get_method_bind("NavigationServer3D\000", "map_get_closest_point_to_segment\000", 3830095642)
		methodNavigationServer3DSingleton[12] = classDB.get_method_bind("NavigationServer3D\000", "map_get_closest_point\000", 2056183332)
		methodNavigationServer3DSingleton[13] = classDB.get_method_bind("NavigationServer3D\000", "map_get_closest_point_normal\000", 2056183332)
		methodNavigationServer3DSingleton[14] = classDB.get_method_bind("NavigationServer3D\000", "map_get_closest_point_owner\000", 553364610)
		methodNavigationServer3DSingleton[15] = classDB.get_method_bind("NavigationServer3D\000", "map_get_regions\000", 2684255073)
		methodNavigationServer3DSingleton[16] = classDB.get_method_bind("NavigationServer3D\000", "map_get_agents\000", 2684255073)
		methodNavigationServer3DSingleton[17] = classDB.get_method_bind("NavigationServer3D\000", "map_force_update\000", 2722037293)
		methodNavigationServer3DSingleton[18] = classDB.get_method_bind("NavigationServer3D\000", "region_create\000", 2944877500)
		methodNavigationServer3DSingleton[19] = classDB.get_method_bind("NavigationServer3D\000", "region_set_enter_cost\000", 225571937)
		methodNavigationServer3DSingleton[20] = classDB.get_method_bind("NavigationServer3D\000", "region_get_enter_cost\000", 866169185)
		methodNavigationServer3DSingleton[21] = classDB.get_method_bind("NavigationServer3D\000", "region_set_travel_cost\000", 225571937)
		methodNavigationServer3DSingleton[22] = classDB.get_method_bind("NavigationServer3D\000", "region_get_travel_cost\000", 866169185)
		methodNavigationServer3DSingleton[23] = classDB.get_method_bind("NavigationServer3D\000", "region_owns_point\000", 2360011153)
		methodNavigationServer3DSingleton[24] = classDB.get_method_bind("NavigationServer3D\000", "region_set_map\000", 781978857)
		methodNavigationServer3DSingleton[25] = classDB.get_method_bind("NavigationServer3D\000", "region_get_map\000", 3814569979)
		methodNavigationServer3DSingleton[26] = classDB.get_method_bind("NavigationServer3D\000", "region_set_navigation_layers\000", 286288326)
		methodNavigationServer3DSingleton[27] = classDB.get_method_bind("NavigationServer3D\000", "region_get_navigation_layers\000", 2198884583)
		methodNavigationServer3DSingleton[28] = classDB.get_method_bind("NavigationServer3D\000", "region_set_transform\000", 2679806994)
		methodNavigationServer3DSingleton[29] = classDB.get_method_bind("NavigationServer3D\000", "region_set_navmesh\000", 4027193260)
		methodNavigationServer3DSingleton[30] = classDB.get_method_bind("NavigationServer3D\000", "region_bake_navmesh\000", 1465939311)
		methodNavigationServer3DSingleton[31] = classDB.get_method_bind("NavigationServer3D\000", "region_get_connections_count\000", 2198884583)
		methodNavigationServer3DSingleton[32] = classDB.get_method_bind("NavigationServer3D\000", "region_get_connection_pathway_start\000", 3440143363)
		methodNavigationServer3DSingleton[33] = classDB.get_method_bind("NavigationServer3D\000", "region_get_connection_pathway_end\000", 3440143363)
		methodNavigationServer3DSingleton[34] = classDB.get_method_bind("NavigationServer3D\000", "agent_create\000", 2944877500)
		methodNavigationServer3DSingleton[35] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_map\000", 781978857)
		methodNavigationServer3DSingleton[36] = classDB.get_method_bind("NavigationServer3D\000", "agent_get_map\000", 3814569979)
		methodNavigationServer3DSingleton[37] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_neighbor_distance\000", 225571937)
		methodNavigationServer3DSingleton[38] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_max_neighbors\000", 286288326)
		methodNavigationServer3DSingleton[39] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_time_horizon\000", 225571937)
		methodNavigationServer3DSingleton[40] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_radius\000", 225571937)
		methodNavigationServer3DSingleton[41] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_max_speed\000", 225571937)
		methodNavigationServer3DSingleton[42] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_velocity\000", 3923919901)
		methodNavigationServer3DSingleton[43] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_target_velocity\000", 3923919901)
		methodNavigationServer3DSingleton[44] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_position\000", 3923919901)
		methodNavigationServer3DSingleton[45] = classDB.get_method_bind("NavigationServer3D\000", "agent_is_map_changed\000", 4155700596)
		methodNavigationServer3DSingleton[46] = classDB.get_method_bind("NavigationServer3D\000", "agent_set_callback\000", 1039455419)
		methodNavigationServer3DSingleton[47] = classDB.get_method_bind("NavigationServer3D\000", "free_rid\000", 145472570)
		methodNavigationServer3DSingleton[48] = classDB.get_method_bind("NavigationServer3D\000", "set_active\000", 1695273946)
		methodNavigationServer3DSingleton[49] = classDB.get_method_bind("NavigationServer3D\000", "process\000", 373806689)
		methodNinePatchRect[0] = classDB.get_method_bind("NinePatchRect\000", "set_texture\000", 4051416890)
		methodNinePatchRect[1] = classDB.get_method_bind("NinePatchRect\000", "get_texture\000", 3635182373)
		methodNinePatchRect[2] = classDB.get_method_bind("NinePatchRect\000", "set_patch_margin\000", 437707142)
		methodNinePatchRect[3] = classDB.get_method_bind("NinePatchRect\000", "get_patch_margin\000", 1983885014)
		methodNinePatchRect[4] = classDB.get_method_bind("NinePatchRect\000", "set_region_rect\000", 2046264180)
		methodNinePatchRect[5] = classDB.get_method_bind("NinePatchRect\000", "get_region_rect\000", 1639390495)
		methodNinePatchRect[6] = classDB.get_method_bind("NinePatchRect\000", "set_draw_center\000", 2586408642)
		methodNinePatchRect[7] = classDB.get_method_bind("NinePatchRect\000", "is_draw_center_enabled\000", 36873697)
		methodNinePatchRect[8] = classDB.get_method_bind("NinePatchRect\000", "set_h_axis_stretch_mode\000", 3219608417)
		methodNinePatchRect[9] = classDB.get_method_bind("NinePatchRect\000", "get_h_axis_stretch_mode\000", 3317113799)
		methodNinePatchRect[10] = classDB.get_method_bind("NinePatchRect\000", "set_v_axis_stretch_mode\000", 3219608417)
		methodNinePatchRect[11] = classDB.get_method_bind("NinePatchRect\000", "get_v_axis_stretch_mode\000", 3317113799)
		methodNode[0] = classDB.get_method_bind("Node\000", "add_sibling\000", 2570952461)
		methodNode[1] = classDB.get_method_bind("Node\000", "set_name\000", 83702148)
		methodNode[2] = classDB.get_method_bind("Node\000", "get_name\000", 2002593661)
		methodNode[3] = classDB.get_method_bind("Node\000", "add_child\000", 3070154285)
		methodNode[4] = classDB.get_method_bind("Node\000", "remove_child\000", 1078189570)
		methodNode[5] = classDB.get_method_bind("Node\000", "get_child_count\000", 894402480)
		methodNode[6] = classDB.get_method_bind("Node\000", "get_children\000", 873284517)
		methodNode[7] = classDB.get_method_bind("Node\000", "get_child\000", 541253412)
		methodNode[8] = classDB.get_method_bind("Node\000", "has_node\000", 861721659)
		methodNode[9] = classDB.get_method_bind("Node\000", "get_node\000", 2734337346)
		methodNode[10] = classDB.get_method_bind("Node\000", "get_node_or_null\000", 2734337346)
		methodNode[11] = classDB.get_method_bind("Node\000", "get_parent\000", 3160264692)
		methodNode[12] = classDB.get_method_bind("Node\000", "find_child\000", 4253159453)
		methodNode[13] = classDB.get_method_bind("Node\000", "find_children\000", 1585018254)
		methodNode[14] = classDB.get_method_bind("Node\000", "find_parent\000", 1140089439)
		methodNode[15] = classDB.get_method_bind("Node\000", "has_node_and_resource\000", 861721659)
		methodNode[16] = classDB.get_method_bind("Node\000", "get_node_and_resource\000", 502563882)
		methodNode[17] = classDB.get_method_bind("Node\000", "is_inside_tree\000", 36873697)
		methodNode[18] = classDB.get_method_bind("Node\000", "is_ancestor_of\000", 3093956946)
		methodNode[19] = classDB.get_method_bind("Node\000", "is_greater_than\000", 3093956946)
		methodNode[20] = classDB.get_method_bind("Node\000", "get_path\000", 4075236667)
		methodNode[21] = classDB.get_method_bind("Node\000", "get_path_to\000", 2147067491)
		methodNode[22] = classDB.get_method_bind("Node\000", "add_to_group\000", 3683006648)
		methodNode[23] = classDB.get_method_bind("Node\000", "remove_from_group\000", 3304788590)
		methodNode[24] = classDB.get_method_bind("Node\000", "is_in_group\000", 2619796661)
		methodNode[25] = classDB.get_method_bind("Node\000", "move_child\000", 3315886247)
		methodNode[26] = classDB.get_method_bind("Node\000", "get_groups\000", 3995934104)
		methodNode[27] = classDB.get_method_bind("Node\000", "raise\000", 3218959716)
		methodNode[28] = classDB.get_method_bind("Node\000", "set_owner\000", 1078189570)
		methodNode[29] = classDB.get_method_bind("Node\000", "get_owner\000", 3160264692)
		methodNode[30] = classDB.get_method_bind("Node\000", "remove_and_skip\000", 3218959716)
		methodNode[31] = classDB.get_method_bind("Node\000", "get_index\000", 894402480)
		methodNode[32] = classDB.get_method_bind("Node\000", "print_tree\000", 3218959716)
		methodNode[33] = classDB.get_method_bind("Node\000", "print_tree_pretty\000", 3218959716)
		methodNode[34] = classDB.get_method_bind("Node\000", "set_scene_file_path\000", 83702148)
		methodNode[35] = classDB.get_method_bind("Node\000", "get_scene_file_path\000", 201670096)
		methodNode[36] = classDB.get_method_bind("Node\000", "propagate_notification\000", 1286410249)
		methodNode[37] = classDB.get_method_bind("Node\000", "propagate_call\000", 1667910434)
		methodNode[38] = classDB.get_method_bind("Node\000", "set_physics_process\000", 2586408642)
		methodNode[39] = classDB.get_method_bind("Node\000", "get_physics_process_delta_time\000", 1740695150)
		methodNode[40] = classDB.get_method_bind("Node\000", "is_physics_processing\000", 36873697)
		methodNode[41] = classDB.get_method_bind("Node\000", "get_process_delta_time\000", 1740695150)
		methodNode[42] = classDB.get_method_bind("Node\000", "set_process\000", 2586408642)
		methodNode[43] = classDB.get_method_bind("Node\000", "set_process_priority\000", 1286410249)
		methodNode[44] = classDB.get_method_bind("Node\000", "get_process_priority\000", 3905245786)
		methodNode[45] = classDB.get_method_bind("Node\000", "is_processing\000", 36873697)
		methodNode[46] = classDB.get_method_bind("Node\000", "set_process_input\000", 2586408642)
		methodNode[47] = classDB.get_method_bind("Node\000", "is_processing_input\000", 36873697)
		methodNode[48] = classDB.get_method_bind("Node\000", "set_process_shortcut_input\000", 2586408642)
		methodNode[49] = classDB.get_method_bind("Node\000", "is_processing_shortcut_input\000", 36873697)
		methodNode[50] = classDB.get_method_bind("Node\000", "set_process_unhandled_input\000", 2586408642)
		methodNode[51] = classDB.get_method_bind("Node\000", "is_processing_unhandled_input\000", 36873697)
		methodNode[52] = classDB.get_method_bind("Node\000", "set_process_unhandled_key_input\000", 2586408642)
		methodNode[53] = classDB.get_method_bind("Node\000", "is_processing_unhandled_key_input\000", 36873697)
		methodNode[54] = classDB.get_method_bind("Node\000", "set_process_mode\000", 1841290486)
		methodNode[55] = classDB.get_method_bind("Node\000", "get_process_mode\000", 739966102)
		methodNode[56] = classDB.get_method_bind("Node\000", "can_process\000", 36873697)
		methodNode[57] = classDB.get_method_bind("Node\000", "print_orphan_nodes\000", 3218959716)
		methodNode[58] = classDB.get_method_bind("Node\000", "set_display_folded\000", 2586408642)
		methodNode[59] = classDB.get_method_bind("Node\000", "is_displayed_folded\000", 36873697)
		methodNode[60] = classDB.get_method_bind("Node\000", "set_process_internal\000", 2586408642)
		methodNode[61] = classDB.get_method_bind("Node\000", "is_processing_internal\000", 36873697)
		methodNode[62] = classDB.get_method_bind("Node\000", "set_physics_process_internal\000", 2586408642)
		methodNode[63] = classDB.get_method_bind("Node\000", "is_physics_processing_internal\000", 36873697)
		methodNode[64] = classDB.get_method_bind("Node\000", "get_tree\000", 2958820483)
		methodNode[65] = classDB.get_method_bind("Node\000", "create_tween\000", 3426978995)
		methodNode[66] = classDB.get_method_bind("Node\000", "duplicate\000", 3511555459)
		methodNode[67] = classDB.get_method_bind("Node\000", "replace_by\000", 2570952461)
		methodNode[68] = classDB.get_method_bind("Node\000", "set_scene_instance_load_placeholder\000", 2586408642)
		methodNode[69] = classDB.get_method_bind("Node\000", "get_scene_instance_load_placeholder\000", 36873697)
		methodNode[70] = classDB.get_method_bind("Node\000", "set_editable_instance\000", 2731852923)
		methodNode[71] = classDB.get_method_bind("Node\000", "is_editable_instance\000", 3093956946)
		methodNode[72] = classDB.get_method_bind("Node\000", "get_viewport\000", 3596683776)
		methodNode[73] = classDB.get_method_bind("Node\000", "queue_free\000", 3218959716)
		methodNode[74] = classDB.get_method_bind("Node\000", "request_ready\000", 3218959716)
		methodNode[75] = classDB.get_method_bind("Node\000", "set_multiplayer_authority\000", 4023243586)
		methodNode[76] = classDB.get_method_bind("Node\000", "get_multiplayer_authority\000", 3905245786)
		methodNode[77] = classDB.get_method_bind("Node\000", "is_multiplayer_authority\000", 36873697)
		methodNode[78] = classDB.get_method_bind("Node\000", "get_multiplayer\000", 406750475)
		methodNode[79] = classDB.get_method_bind("Node\000", "rpc_config\000", 3776071444)
		methodNode[80] = classDB.get_method_bind("Node\000", "set_editor_description\000", 83702148)
		methodNode[81] = classDB.get_method_bind("Node\000", "get_editor_description\000", 201670096)
		methodNode[82] = classDB.get_method_bind("Node\000", "set_unique_name_in_owner\000", 2586408642)
		methodNode[83] = classDB.get_method_bind("Node\000", "is_unique_name_in_owner\000", 36873697)
		methodNode[84] = classDB.get_method_bind("Node\000", "rpc\000", 4047867050)
		methodNode[85] = classDB.get_method_bind("Node\000", "rpc_id\000", 361499283)
		methodNode[86] = classDB.get_method_bind("Node\000", "update_configuration_warnings\000", 3218959716)
		methodNode2D[0] = classDB.get_method_bind("Node2D\000", "set_position\000", 743155724)
		methodNode2D[1] = classDB.get_method_bind("Node2D\000", "set_rotation\000", 373806689)
		methodNode2D[2] = classDB.get_method_bind("Node2D\000", "set_skew\000", 373806689)
		methodNode2D[3] = classDB.get_method_bind("Node2D\000", "set_scale\000", 743155724)
		methodNode2D[4] = classDB.get_method_bind("Node2D\000", "get_position\000", 3341600327)
		methodNode2D[5] = classDB.get_method_bind("Node2D\000", "get_rotation\000", 1740695150)
		methodNode2D[6] = classDB.get_method_bind("Node2D\000", "get_skew\000", 1740695150)
		methodNode2D[7] = classDB.get_method_bind("Node2D\000", "get_scale\000", 3341600327)
		methodNode2D[8] = classDB.get_method_bind("Node2D\000", "rotate\000", 373806689)
		methodNode2D[9] = classDB.get_method_bind("Node2D\000", "move_local_x\000", 2087892650)
		methodNode2D[10] = classDB.get_method_bind("Node2D\000", "move_local_y\000", 2087892650)
		methodNode2D[11] = classDB.get_method_bind("Node2D\000", "translate\000", 743155724)
		methodNode2D[12] = classDB.get_method_bind("Node2D\000", "global_translate\000", 743155724)
		methodNode2D[13] = classDB.get_method_bind("Node2D\000", "apply_scale\000", 743155724)
		methodNode2D[14] = classDB.get_method_bind("Node2D\000", "set_global_position\000", 743155724)
		methodNode2D[15] = classDB.get_method_bind("Node2D\000", "get_global_position\000", 3341600327)
		methodNode2D[16] = classDB.get_method_bind("Node2D\000", "set_global_rotation\000", 373806689)
		methodNode2D[17] = classDB.get_method_bind("Node2D\000", "get_global_rotation\000", 1740695150)
		methodNode2D[18] = classDB.get_method_bind("Node2D\000", "set_global_skew\000", 373806689)
		methodNode2D[19] = classDB.get_method_bind("Node2D\000", "get_global_skew\000", 1740695150)
		methodNode2D[20] = classDB.get_method_bind("Node2D\000", "set_global_scale\000", 743155724)
		methodNode2D[21] = classDB.get_method_bind("Node2D\000", "get_global_scale\000", 3341600327)
		methodNode2D[22] = classDB.get_method_bind("Node2D\000", "set_transform\000", 2761652528)
		methodNode2D[23] = classDB.get_method_bind("Node2D\000", "set_global_transform\000", 2761652528)
		methodNode2D[24] = classDB.get_method_bind("Node2D\000", "look_at\000", 743155724)
		methodNode2D[25] = classDB.get_method_bind("Node2D\000", "get_angle_to\000", 2276447920)
		methodNode2D[26] = classDB.get_method_bind("Node2D\000", "to_local\000", 2656412154)
		methodNode2D[27] = classDB.get_method_bind("Node2D\000", "to_global\000", 2656412154)
		methodNode2D[28] = classDB.get_method_bind("Node2D\000", "set_z_index\000", 1286410249)
		methodNode2D[29] = classDB.get_method_bind("Node2D\000", "get_z_index\000", 3905245786)
		methodNode2D[30] = classDB.get_method_bind("Node2D\000", "set_z_as_relative\000", 2586408642)
		methodNode2D[31] = classDB.get_method_bind("Node2D\000", "is_z_relative\000", 36873697)
		methodNode2D[32] = classDB.get_method_bind("Node2D\000", "set_y_sort_enabled\000", 2586408642)
		methodNode2D[33] = classDB.get_method_bind("Node2D\000", "is_y_sort_enabled\000", 36873697)
		methodNode2D[34] = classDB.get_method_bind("Node2D\000", "get_relative_transform_to_parent\000", 904556875)
		methodNode3D[0] = classDB.get_method_bind("Node3D\000", "set_transform\000", 2952846383)
		methodNode3D[1] = classDB.get_method_bind("Node3D\000", "get_transform\000", 3229777777)
		methodNode3D[2] = classDB.get_method_bind("Node3D\000", "set_position\000", 3460891852)
		methodNode3D[3] = classDB.get_method_bind("Node3D\000", "get_position\000", 3360562783)
		methodNode3D[4] = classDB.get_method_bind("Node3D\000", "set_rotation\000", 3460891852)
		methodNode3D[5] = classDB.get_method_bind("Node3D\000", "get_rotation\000", 3360562783)
		methodNode3D[6] = classDB.get_method_bind("Node3D\000", "set_rotation_order\000", 1415243067)
		methodNode3D[7] = classDB.get_method_bind("Node3D\000", "get_rotation_order\000", 2488981056)
		methodNode3D[8] = classDB.get_method_bind("Node3D\000", "set_rotation_edit_mode\000", 141483330)
		methodNode3D[9] = classDB.get_method_bind("Node3D\000", "get_rotation_edit_mode\000", 1572188370)
		methodNode3D[10] = classDB.get_method_bind("Node3D\000", "set_scale\000", 3460891852)
		methodNode3D[11] = classDB.get_method_bind("Node3D\000", "get_scale\000", 3360562783)
		methodNode3D[12] = classDB.get_method_bind("Node3D\000", "set_quaternion\000", 1727505552)
		methodNode3D[13] = classDB.get_method_bind("Node3D\000", "get_quaternion\000", 1222331677)
		methodNode3D[14] = classDB.get_method_bind("Node3D\000", "set_basis\000", 1055510324)
		methodNode3D[15] = classDB.get_method_bind("Node3D\000", "get_basis\000", 2716978435)
		methodNode3D[16] = classDB.get_method_bind("Node3D\000", "set_global_transform\000", 2952846383)
		methodNode3D[17] = classDB.get_method_bind("Node3D\000", "get_global_transform\000", 3229777777)
		methodNode3D[18] = classDB.get_method_bind("Node3D\000", "set_global_position\000", 3460891852)
		methodNode3D[19] = classDB.get_method_bind("Node3D\000", "get_global_position\000", 3360562783)
		methodNode3D[20] = classDB.get_method_bind("Node3D\000", "set_global_rotation\000", 3460891852)
		methodNode3D[21] = classDB.get_method_bind("Node3D\000", "get_global_rotation\000", 3360562783)
		methodNode3D[22] = classDB.get_method_bind("Node3D\000", "get_parent_node_3d\000", 151077316)
		methodNode3D[23] = classDB.get_method_bind("Node3D\000", "set_ignore_transform_notification\000", 2586408642)
		methodNode3D[24] = classDB.get_method_bind("Node3D\000", "set_as_top_level\000", 2586408642)
		methodNode3D[25] = classDB.get_method_bind("Node3D\000", "is_set_as_top_level\000", 36873697)
		methodNode3D[26] = classDB.get_method_bind("Node3D\000", "set_disable_scale\000", 2586408642)
		methodNode3D[27] = classDB.get_method_bind("Node3D\000", "is_scale_disabled\000", 36873697)
		methodNode3D[28] = classDB.get_method_bind("Node3D\000", "get_world_3d\000", 317588385)
		methodNode3D[29] = classDB.get_method_bind("Node3D\000", "force_update_transform\000", 3218959716)
		methodNode3D[30] = classDB.get_method_bind("Node3D\000", "set_visibility_parent\000", 1348162250)
		methodNode3D[31] = classDB.get_method_bind("Node3D\000", "get_visibility_parent\000", 4075236667)
		methodNode3D[32] = classDB.get_method_bind("Node3D\000", "update_gizmos\000", 3218959716)
		methodNode3D[33] = classDB.get_method_bind("Node3D\000", "add_gizmo\000", 1544533845)
		methodNode3D[34] = classDB.get_method_bind("Node3D\000", "get_gizmos\000", 3995934104)
		methodNode3D[35] = classDB.get_method_bind("Node3D\000", "clear_gizmos\000", 3218959716)
		methodNode3D[36] = classDB.get_method_bind("Node3D\000", "set_subgizmo_selection\000", 3317607635)
		methodNode3D[37] = classDB.get_method_bind("Node3D\000", "clear_subgizmo_selection\000", 3218959716)
		methodNode3D[38] = classDB.get_method_bind("Node3D\000", "set_visible\000", 2586408642)
		methodNode3D[39] = classDB.get_method_bind("Node3D\000", "is_visible\000", 36873697)
		methodNode3D[40] = classDB.get_method_bind("Node3D\000", "is_visible_in_tree\000", 36873697)
		methodNode3D[41] = classDB.get_method_bind("Node3D\000", "show\000", 3218959716)
		methodNode3D[42] = classDB.get_method_bind("Node3D\000", "hide\000", 3218959716)
		methodNode3D[43] = classDB.get_method_bind("Node3D\000", "set_notify_local_transform\000", 2586408642)
		methodNode3D[44] = classDB.get_method_bind("Node3D\000", "is_local_transform_notification_enabled\000", 36873697)
		methodNode3D[45] = classDB.get_method_bind("Node3D\000", "set_notify_transform\000", 2586408642)
		methodNode3D[46] = classDB.get_method_bind("Node3D\000", "is_transform_notification_enabled\000", 36873697)
		methodNode3D[47] = classDB.get_method_bind("Node3D\000", "rotate\000", 3436291937)
		methodNode3D[48] = classDB.get_method_bind("Node3D\000", "global_rotate\000", 3436291937)
		methodNode3D[49] = classDB.get_method_bind("Node3D\000", "global_scale\000", 3460891852)
		methodNode3D[50] = classDB.get_method_bind("Node3D\000", "global_translate\000", 3460891852)
		methodNode3D[51] = classDB.get_method_bind("Node3D\000", "rotate_object_local\000", 3436291937)
		methodNode3D[52] = classDB.get_method_bind("Node3D\000", "scale_object_local\000", 3460891852)
		methodNode3D[53] = classDB.get_method_bind("Node3D\000", "translate_object_local\000", 3460891852)
		methodNode3D[54] = classDB.get_method_bind("Node3D\000", "rotate_x\000", 373806689)
		methodNode3D[55] = classDB.get_method_bind("Node3D\000", "rotate_y\000", 373806689)
		methodNode3D[56] = classDB.get_method_bind("Node3D\000", "rotate_z\000", 373806689)
		methodNode3D[57] = classDB.get_method_bind("Node3D\000", "translate\000", 3460891852)
		methodNode3D[58] = classDB.get_method_bind("Node3D\000", "orthonormalize\000", 3218959716)
		methodNode3D[59] = classDB.get_method_bind("Node3D\000", "set_identity\000", 3218959716)
		methodNode3D[60] = classDB.get_method_bind("Node3D\000", "look_at\000", 1002852006)
		methodNode3D[61] = classDB.get_method_bind("Node3D\000", "look_at_from_position\000", 735115603)
		methodNode3D[62] = classDB.get_method_bind("Node3D\000", "to_local\000", 192990374)
		methodNode3D[63] = classDB.get_method_bind("Node3D\000", "to_global\000", 192990374)
		methodNoise[0] = classDB.get_method_bind("Noise\000", "get_noise_1d\000", 3919130443)
		methodNoise[1] = classDB.get_method_bind("Noise\000", "get_noise_2d\000", 2753205203)
		methodNoise[2] = classDB.get_method_bind("Noise\000", "get_noise_2dv\000", 2276447920)
		methodNoise[3] = classDB.get_method_bind("Noise\000", "get_noise_3d\000", 973811851)
		methodNoise[4] = classDB.get_method_bind("Noise\000", "get_noise_3dv\000", 1109078154)
		methodNoise[5] = classDB.get_method_bind("Noise\000", "get_image\000", 3397462027)
		methodNoise[6] = classDB.get_method_bind("Noise\000", "get_seamless_image\000", 943521238)
		methodNoiseTexture2D[0] = classDB.get_method_bind("NoiseTexture2D\000", "set_width\000", 1286410249)
		methodNoiseTexture2D[1] = classDB.get_method_bind("NoiseTexture2D\000", "set_height\000", 1286410249)
		methodNoiseTexture2D[2] = classDB.get_method_bind("NoiseTexture2D\000", "set_invert\000", 2586408642)
		methodNoiseTexture2D[3] = classDB.get_method_bind("NoiseTexture2D\000", "get_invert\000", 36873697)
		methodNoiseTexture2D[4] = classDB.get_method_bind("NoiseTexture2D\000", "set_in_3d_space\000", 2586408642)
		methodNoiseTexture2D[5] = classDB.get_method_bind("NoiseTexture2D\000", "is_in_3d_space\000", 36873697)
		methodNoiseTexture2D[6] = classDB.get_method_bind("NoiseTexture2D\000", "set_generate_mipmaps\000", 2586408642)
		methodNoiseTexture2D[7] = classDB.get_method_bind("NoiseTexture2D\000", "is_generating_mipmaps\000", 36873697)
		methodNoiseTexture2D[8] = classDB.get_method_bind("NoiseTexture2D\000", "set_seamless\000", 2586408642)
		methodNoiseTexture2D[9] = classDB.get_method_bind("NoiseTexture2D\000", "get_seamless\000", 2240911060)
		methodNoiseTexture2D[10] = classDB.get_method_bind("NoiseTexture2D\000", "set_seamless_blend_skirt\000", 373806689)
		methodNoiseTexture2D[11] = classDB.get_method_bind("NoiseTexture2D\000", "get_seamless_blend_skirt\000", 191475506)
		methodNoiseTexture2D[12] = classDB.get_method_bind("NoiseTexture2D\000", "set_as_normal_map\000", 2586408642)
		methodNoiseTexture2D[13] = classDB.get_method_bind("NoiseTexture2D\000", "is_normal_map\000", 2240911060)
		methodNoiseTexture2D[14] = classDB.get_method_bind("NoiseTexture2D\000", "set_bump_strength\000", 373806689)
		methodNoiseTexture2D[15] = classDB.get_method_bind("NoiseTexture2D\000", "get_bump_strength\000", 191475506)
		methodNoiseTexture2D[16] = classDB.get_method_bind("NoiseTexture2D\000", "set_color_ramp\000", 2756054477)
		methodNoiseTexture2D[17] = classDB.get_method_bind("NoiseTexture2D\000", "get_color_ramp\000", 132272999)
		methodNoiseTexture2D[18] = classDB.get_method_bind("NoiseTexture2D\000", "set_noise\000", 4135492439)
		methodNoiseTexture2D[19] = classDB.get_method_bind("NoiseTexture2D\000", "get_noise\000", 185851837)
		methodOSSingleton[0] = classDB.get_method_bind("OS\000", "get_connected_midi_inputs\000", 2981934095)
		methodOSSingleton[1] = classDB.get_method_bind("OS\000", "open_midi_inputs\000", 3218959716)
		methodOSSingleton[2] = classDB.get_method_bind("OS\000", "close_midi_inputs\000", 3218959716)
		methodOSSingleton[3] = classDB.get_method_bind("OS\000", "alert\000", 233059325)
		methodOSSingleton[4] = classDB.get_method_bind("OS\000", "crash\000", 83702148)
		methodOSSingleton[5] = classDB.get_method_bind("OS\000", "set_low_processor_usage_mode\000", 2586408642)
		methodOSSingleton[6] = classDB.get_method_bind("OS\000", "is_in_low_processor_usage_mode\000", 36873697)
		methodOSSingleton[7] = classDB.get_method_bind("OS\000", "set_low_processor_usage_mode_sleep_usec\000", 1286410249)
		methodOSSingleton[8] = classDB.get_method_bind("OS\000", "get_low_processor_usage_mode_sleep_usec\000", 3905245786)
		methodOSSingleton[9] = classDB.get_method_bind("OS\000", "get_processor_count\000", 3905245786)
		methodOSSingleton[10] = classDB.get_method_bind("OS\000", "get_processor_name\000", 201670096)
		methodOSSingleton[11] = classDB.get_method_bind("OS\000", "get_system_fonts\000", 1139954409)
		methodOSSingleton[12] = classDB.get_method_bind("OS\000", "get_system_font_path\000", 3158716772)
		methodOSSingleton[13] = classDB.get_method_bind("OS\000", "get_executable_path\000", 201670096)
		methodOSSingleton[14] = classDB.get_method_bind("OS\000", "execute\000", 2881709059)
		methodOSSingleton[15] = classDB.get_method_bind("OS\000", "create_process\000", 2903767230)
		methodOSSingleton[16] = classDB.get_method_bind("OS\000", "create_instance\000", 1080601263)
		methodOSSingleton[17] = classDB.get_method_bind("OS\000", "kill\000", 844576869)
		methodOSSingleton[18] = classDB.get_method_bind("OS\000", "shell_open\000", 166001499)
		methodOSSingleton[19] = classDB.get_method_bind("OS\000", "is_process_running\000", 1116898809)
		methodOSSingleton[20] = classDB.get_method_bind("OS\000", "get_process_id\000", 3905245786)
		methodOSSingleton[21] = classDB.get_method_bind("OS\000", "get_environment\000", 3135753539)
		methodOSSingleton[22] = classDB.get_method_bind("OS\000", "set_environment\000", 820780508)
		methodOSSingleton[23] = classDB.get_method_bind("OS\000", "has_environment\000", 3927539163)
		methodOSSingleton[24] = classDB.get_method_bind("OS\000", "get_name\000", 201670096)
		methodOSSingleton[25] = classDB.get_method_bind("OS\000", "get_cmdline_args\000", 2981934095)
		methodOSSingleton[26] = classDB.get_method_bind("OS\000", "get_cmdline_user_args\000", 2981934095)
		methodOSSingleton[27] = classDB.get_method_bind("OS\000", "set_restart_on_exit\000", 611198603)
		methodOSSingleton[28] = classDB.get_method_bind("OS\000", "is_restart_on_exit_set\000", 36873697)
		methodOSSingleton[29] = classDB.get_method_bind("OS\000", "get_restart_on_exit_arguments\000", 1139954409)
		methodOSSingleton[30] = classDB.get_method_bind("OS\000", "delay_usec\000", 998575451)
		methodOSSingleton[31] = classDB.get_method_bind("OS\000", "delay_msec\000", 998575451)
		methodOSSingleton[32] = classDB.get_method_bind("OS\000", "get_locale\000", 201670096)
		methodOSSingleton[33] = classDB.get_method_bind("OS\000", "get_locale_language\000", 201670096)
		methodOSSingleton[34] = classDB.get_method_bind("OS\000", "get_model_name\000", 201670096)
		methodOSSingleton[35] = classDB.get_method_bind("OS\000", "is_userfs_persistent\000", 36873697)
		methodOSSingleton[36] = classDB.get_method_bind("OS\000", "is_stdout_verbose\000", 36873697)
		methodOSSingleton[37] = classDB.get_method_bind("OS\000", "can_use_threads\000", 36873697)
		methodOSSingleton[38] = classDB.get_method_bind("OS\000", "is_debug_build\000", 36873697)
		methodOSSingleton[39] = classDB.get_method_bind("OS\000", "dump_resources_to_file\000", 83702148)
		methodOSSingleton[40] = classDB.get_method_bind("OS\000", "print_resources_in_use\000", 107499316)
		methodOSSingleton[41] = classDB.get_method_bind("OS\000", "print_all_resources\000", 3005725572)
		methodOSSingleton[42] = classDB.get_method_bind("OS\000", "get_static_memory_usage\000", 3905245786)
		methodOSSingleton[43] = classDB.get_method_bind("OS\000", "get_static_memory_peak_usage\000", 3905245786)
		methodOSSingleton[44] = classDB.get_method_bind("OS\000", "move_to_trash\000", 2113323047)
		methodOSSingleton[45] = classDB.get_method_bind("OS\000", "get_user_data_dir\000", 201670096)
		methodOSSingleton[46] = classDB.get_method_bind("OS\000", "get_system_dir\000", 1965199849)
		methodOSSingleton[47] = classDB.get_method_bind("OS\000", "get_config_dir\000", 201670096)
		methodOSSingleton[48] = classDB.get_method_bind("OS\000", "get_data_dir\000", 201670096)
		methodOSSingleton[49] = classDB.get_method_bind("OS\000", "get_cache_dir\000", 201670096)
		methodOSSingleton[50] = classDB.get_method_bind("OS\000", "get_unique_id\000", 201670096)
		methodOSSingleton[51] = classDB.get_method_bind("OS\000", "print_all_textures_by_size\000", 3218959716)
		methodOSSingleton[52] = classDB.get_method_bind("OS\000", "print_resources_by_type\000", 4015028928)
		methodOSSingleton[53] = classDB.get_method_bind("OS\000", "get_keycode_string\000", 2261993717)
		methodOSSingleton[54] = classDB.get_method_bind("OS\000", "is_keycode_unicode\000", 1116898809)
		methodOSSingleton[55] = classDB.get_method_bind("OS\000", "find_keycode_from_string\000", 1084858572)
		methodOSSingleton[56] = classDB.get_method_bind("OS\000", "set_use_file_access_save_and_swap\000", 2586408642)
		methodOSSingleton[57] = classDB.get_method_bind("OS\000", "set_thread_name\000", 166001499)
		methodOSSingleton[58] = classDB.get_method_bind("OS\000", "get_thread_caller_id\000", 3905245786)
		methodOSSingleton[59] = classDB.get_method_bind("OS\000", "get_main_thread_id\000", 3905245786)
		methodOSSingleton[60] = classDB.get_method_bind("OS\000", "has_feature\000", 3927539163)
		methodOSSingleton[61] = classDB.get_method_bind("OS\000", "request_permission\000", 2323990056)
		methodOSSingleton[62] = classDB.get_method_bind("OS\000", "request_permissions\000", 2240911060)
		methodOSSingleton[63] = classDB.get_method_bind("OS\000", "get_granted_permissions\000", 1139954409)
		methodObject[0] = classDB.get_method_bind("Object\000", "get_class\000", 201670096)
		methodObject[1] = classDB.get_method_bind("Object\000", "is_class\000", 3927539163)
		methodObject[2] = classDB.get_method_bind("Object\000", "set\000", 3776071444)
		methodObject[3] = classDB.get_method_bind("Object\000", "get\000", 2760726917)
		methodObject[4] = classDB.get_method_bind("Object\000", "set_indexed\000", 3500910842)
		methodObject[5] = classDB.get_method_bind("Object\000", "get_indexed\000", 4006125091)
		methodObject[6] = classDB.get_method_bind("Object\000", "get_property_list\000", 3995934104)
		methodObject[7] = classDB.get_method_bind("Object\000", "get_method_list\000", 3995934104)
		methodObject[8] = classDB.get_method_bind("Object\000", "notification\000", 4023243586)
		methodObject[9] = classDB.get_method_bind("Object\000", "to_string\000", 2841200299)
		methodObject[10] = classDB.get_method_bind("Object\000", "get_instance_id\000", 3905245786)
		methodObject[11] = classDB.get_method_bind("Object\000", "set_script\000", 1114965689)
		methodObject[12] = classDB.get_method_bind("Object\000", "get_script\000", 1214101251)
		methodObject[13] = classDB.get_method_bind("Object\000", "set_meta\000", 3776071444)
		methodObject[14] = classDB.get_method_bind("Object\000", "remove_meta\000", 3304788590)
		methodObject[15] = classDB.get_method_bind("Object\000", "get_meta\000", 3990617847)
		methodObject[16] = classDB.get_method_bind("Object\000", "has_meta\000", 2619796661)
		methodObject[17] = classDB.get_method_bind("Object\000", "get_meta_list\000", 1139954409)
		methodObject[18] = classDB.get_method_bind("Object\000", "add_user_signal\000", 3780025912)
		methodObject[19] = classDB.get_method_bind("Object\000", "has_user_signal\000", 2619796661)
		methodObject[20] = classDB.get_method_bind("Object\000", "emit_signal\000", 4047867050)
		methodObject[21] = classDB.get_method_bind("Object\000", "call\000", 3400424181)
		methodObject[22] = classDB.get_method_bind("Object\000", "call_deferred\000", 3400424181)
		methodObject[23] = classDB.get_method_bind("Object\000", "set_deferred\000", 3776071444)
		methodObject[24] = classDB.get_method_bind("Object\000", "callv\000", 1260104456)
		methodObject[25] = classDB.get_method_bind("Object\000", "has_method\000", 2619796661)
		methodObject[26] = classDB.get_method_bind("Object\000", "has_signal\000", 2619796661)
		methodObject[27] = classDB.get_method_bind("Object\000", "get_signal_list\000", 3995934104)
		methodObject[28] = classDB.get_method_bind("Object\000", "get_signal_connection_list\000", 3147814860)
		methodObject[29] = classDB.get_method_bind("Object\000", "get_incoming_connections\000", 3995934104)
		methodObject[30] = classDB.get_method_bind("Object\000", "connect\000", 1469446357)
		methodObject[31] = classDB.get_method_bind("Object\000", "disconnect\000", 1874754934)
		methodObject[32] = classDB.get_method_bind("Object\000", "is_connected\000", 768136979)
		methodObject[33] = classDB.get_method_bind("Object\000", "set_block_signals\000", 2586408642)
		methodObject[34] = classDB.get_method_bind("Object\000", "is_blocking_signals\000", 36873697)
		methodObject[35] = classDB.get_method_bind("Object\000", "notify_property_list_changed\000", 3218959716)
		methodObject[36] = classDB.get_method_bind("Object\000", "set_message_translation\000", 2586408642)
		methodObject[37] = classDB.get_method_bind("Object\000", "can_translate_messages\000", 36873697)
		methodObject[38] = classDB.get_method_bind("Object\000", "tr\000", 2475554935)
		methodObject[39] = classDB.get_method_bind("Object\000", "tr_n\000", 4021311862)
		methodObject[40] = classDB.get_method_bind("Object\000", "is_queued_for_deletion\000", 36873697)
		methodOccluder3D[0] = classDB.get_method_bind("Occluder3D\000", "get_vertices\000", 497664490)
		methodOccluder3D[1] = classDB.get_method_bind("Occluder3D\000", "get_indices\000", 1930428628)
		methodOccluderInstance3D[0] = classDB.get_method_bind("OccluderInstance3D\000", "set_bake_mask\000", 1286410249)
		methodOccluderInstance3D[1] = classDB.get_method_bind("OccluderInstance3D\000", "get_bake_mask\000", 3905245786)
		methodOccluderInstance3D[2] = classDB.get_method_bind("OccluderInstance3D\000", "set_bake_mask_value\000", 300928843)
		methodOccluderInstance3D[3] = classDB.get_method_bind("OccluderInstance3D\000", "get_bake_mask_value\000", 1116898809)
		methodOccluderInstance3D[4] = classDB.get_method_bind("OccluderInstance3D\000", "set_bake_simplification_distance\000", 373806689)
		methodOccluderInstance3D[5] = classDB.get_method_bind("OccluderInstance3D\000", "get_bake_simplification_distance\000", 1740695150)
		methodOccluderInstance3D[6] = classDB.get_method_bind("OccluderInstance3D\000", "set_occluder\000", 1664878165)
		methodOccluderInstance3D[7] = classDB.get_method_bind("OccluderInstance3D\000", "get_occluder\000", 1696836198)
		methodOccluderPolygon2D[0] = classDB.get_method_bind("OccluderPolygon2D\000", "set_closed\000", 2586408642)
		methodOccluderPolygon2D[1] = classDB.get_method_bind("OccluderPolygon2D\000", "is_closed\000", 36873697)
		methodOccluderPolygon2D[2] = classDB.get_method_bind("OccluderPolygon2D\000", "set_cull_mode\000", 3500863002)
		methodOccluderPolygon2D[3] = classDB.get_method_bind("OccluderPolygon2D\000", "get_cull_mode\000", 33931036)
		methodOccluderPolygon2D[4] = classDB.get_method_bind("OccluderPolygon2D\000", "set_polygon\000", 1509147220)
		methodOccluderPolygon2D[5] = classDB.get_method_bind("OccluderPolygon2D\000", "get_polygon\000", 2961356807)
		methodOggPacketSequence[0] = classDB.get_method_bind("OggPacketSequence\000", "set_packet_data\000", 381264803)
		methodOggPacketSequence[1] = classDB.get_method_bind("OggPacketSequence\000", "get_packet_data\000", 3995934104)
		methodOggPacketSequence[2] = classDB.get_method_bind("OggPacketSequence\000", "set_packet_granule_positions\000", 381264803)
		methodOggPacketSequence[3] = classDB.get_method_bind("OggPacketSequence\000", "get_packet_granule_positions\000", 3995934104)
		methodOggPacketSequence[4] = classDB.get_method_bind("OggPacketSequence\000", "set_sampling_rate\000", 373806689)
		methodOggPacketSequence[5] = classDB.get_method_bind("OggPacketSequence\000", "get_sampling_rate\000", 1740695150)
		methodOggPacketSequence[6] = classDB.get_method_bind("OggPacketSequence\000", "get_length\000", 1740695150)
		methodOmniLight3D[0] = classDB.get_method_bind("OmniLight3D\000", "set_shadow_mode\000", 121862228)
		methodOmniLight3D[1] = classDB.get_method_bind("OmniLight3D\000", "get_shadow_mode\000", 4181586331)
		methodOpenXRAction[0] = classDB.get_method_bind("OpenXRAction\000", "set_localized_name\000", 83702148)
		methodOpenXRAction[1] = classDB.get_method_bind("OpenXRAction\000", "get_localized_name\000", 201670096)
		methodOpenXRAction[2] = classDB.get_method_bind("OpenXRAction\000", "set_action_type\000", 1675238366)
		methodOpenXRAction[3] = classDB.get_method_bind("OpenXRAction\000", "get_action_type\000", 3536542431)
		methodOpenXRAction[4] = classDB.get_method_bind("OpenXRAction\000", "set_toplevel_paths\000", 4015028928)
		methodOpenXRAction[5] = classDB.get_method_bind("OpenXRAction\000", "get_toplevel_paths\000", 1139954409)
		methodOpenXRActionMap[0] = classDB.get_method_bind("OpenXRActionMap\000", "set_action_sets\000", 381264803)
		methodOpenXRActionMap[1] = classDB.get_method_bind("OpenXRActionMap\000", "get_action_sets\000", 3995934104)
		methodOpenXRActionMap[2] = classDB.get_method_bind("OpenXRActionMap\000", "get_action_set_count\000", 3905245786)
		methodOpenXRActionMap[3] = classDB.get_method_bind("OpenXRActionMap\000", "find_action_set\000", 1888809267)
		methodOpenXRActionMap[4] = classDB.get_method_bind("OpenXRActionMap\000", "get_action_set\000", 1789580336)
		methodOpenXRActionMap[5] = classDB.get_method_bind("OpenXRActionMap\000", "add_action_set\000", 2093310581)
		methodOpenXRActionMap[6] = classDB.get_method_bind("OpenXRActionMap\000", "remove_action_set\000", 2093310581)
		methodOpenXRActionMap[7] = classDB.get_method_bind("OpenXRActionMap\000", "set_interaction_profiles\000", 381264803)
		methodOpenXRActionMap[8] = classDB.get_method_bind("OpenXRActionMap\000", "get_interaction_profiles\000", 3995934104)
		methodOpenXRActionMap[9] = classDB.get_method_bind("OpenXRActionMap\000", "get_interaction_profile_count\000", 3905245786)
		methodOpenXRActionMap[10] = classDB.get_method_bind("OpenXRActionMap\000", "find_interaction_profile\000", 3095875538)
		methodOpenXRActionMap[11] = classDB.get_method_bind("OpenXRActionMap\000", "get_interaction_profile\000", 2546151210)
		methodOpenXRActionMap[12] = classDB.get_method_bind("OpenXRActionMap\000", "add_interaction_profile\000", 2697953512)
		methodOpenXRActionMap[13] = classDB.get_method_bind("OpenXRActionMap\000", "remove_interaction_profile\000", 2697953512)
		methodOpenXRActionMap[14] = classDB.get_method_bind("OpenXRActionMap\000", "create_default_action_sets\000", 3218959716)
		methodOpenXRActionSet[0] = classDB.get_method_bind("OpenXRActionSet\000", "set_localized_name\000", 83702148)
		methodOpenXRActionSet[1] = classDB.get_method_bind("OpenXRActionSet\000", "get_localized_name\000", 201670096)
		methodOpenXRActionSet[2] = classDB.get_method_bind("OpenXRActionSet\000", "set_priority\000", 1286410249)
		methodOpenXRActionSet[3] = classDB.get_method_bind("OpenXRActionSet\000", "get_priority\000", 3905245786)
		methodOpenXRActionSet[4] = classDB.get_method_bind("OpenXRActionSet\000", "get_action_count\000", 3905245786)
		methodOpenXRActionSet[5] = classDB.get_method_bind("OpenXRActionSet\000", "set_actions\000", 381264803)
		methodOpenXRActionSet[6] = classDB.get_method_bind("OpenXRActionSet\000", "get_actions\000", 3995934104)
		methodOpenXRActionSet[7] = classDB.get_method_bind("OpenXRActionSet\000", "add_action\000", 349361333)
		methodOpenXRActionSet[8] = classDB.get_method_bind("OpenXRActionSet\000", "remove_action\000", 349361333)
		methodOpenXRIPBinding[0] = classDB.get_method_bind("OpenXRIPBinding\000", "set_action\000", 349361333)
		methodOpenXRIPBinding[1] = classDB.get_method_bind("OpenXRIPBinding\000", "get_action\000", 4072409085)
		methodOpenXRIPBinding[2] = classDB.get_method_bind("OpenXRIPBinding\000", "get_path_count\000", 3905245786)
		methodOpenXRIPBinding[3] = classDB.get_method_bind("OpenXRIPBinding\000", "set_paths\000", 4015028928)
		methodOpenXRIPBinding[4] = classDB.get_method_bind("OpenXRIPBinding\000", "get_paths\000", 1139954409)
		methodOpenXRIPBinding[5] = classDB.get_method_bind("OpenXRIPBinding\000", "has_path\000", 3927539163)
		methodOpenXRIPBinding[6] = classDB.get_method_bind("OpenXRIPBinding\000", "add_path\000", 83702148)
		methodOpenXRIPBinding[7] = classDB.get_method_bind("OpenXRIPBinding\000", "remove_path\000", 83702148)
		methodOpenXRInteractionProfile[0] = classDB.get_method_bind("OpenXRInteractionProfile\000", "set_interaction_profile_path\000", 83702148)
		methodOpenXRInteractionProfile[1] = classDB.get_method_bind("OpenXRInteractionProfile\000", "get_interaction_profile_path\000", 201670096)
		methodOpenXRInteractionProfile[2] = classDB.get_method_bind("OpenXRInteractionProfile\000", "get_binding_count\000", 3905245786)
		methodOpenXRInteractionProfile[3] = classDB.get_method_bind("OpenXRInteractionProfile\000", "get_binding\000", 3934429652)
		methodOpenXRInteractionProfile[4] = classDB.get_method_bind("OpenXRInteractionProfile\000", "set_bindings\000", 381264803)
		methodOpenXRInteractionProfile[5] = classDB.get_method_bind("OpenXRInteractionProfile\000", "get_bindings\000", 3995934104)
		methodOptimizedTranslation[0] = classDB.get_method_bind("OptimizedTranslation\000", "generate\000", 1466479800)
		methodOptionButton[0] = classDB.get_method_bind("OptionButton\000", "add_item\000", 3043792800)
		methodOptionButton[1] = classDB.get_method_bind("OptionButton\000", "add_icon_item\000", 3944051090)
		methodOptionButton[2] = classDB.get_method_bind("OptionButton\000", "set_item_text\000", 501894301)
		methodOptionButton[3] = classDB.get_method_bind("OptionButton\000", "set_item_icon\000", 666127730)
		methodOptionButton[4] = classDB.get_method_bind("OptionButton\000", "set_item_disabled\000", 300928843)
		methodOptionButton[5] = classDB.get_method_bind("OptionButton\000", "set_item_id\000", 3937882851)
		methodOptionButton[6] = classDB.get_method_bind("OptionButton\000", "set_item_metadata\000", 2152698145)
		methodOptionButton[7] = classDB.get_method_bind("OptionButton\000", "set_item_tooltip\000", 501894301)
		methodOptionButton[8] = classDB.get_method_bind("OptionButton\000", "get_item_text\000", 844755477)
		methodOptionButton[9] = classDB.get_method_bind("OptionButton\000", "get_item_icon\000", 3536238170)
		methodOptionButton[10] = classDB.get_method_bind("OptionButton\000", "get_item_id\000", 923996154)
		methodOptionButton[11] = classDB.get_method_bind("OptionButton\000", "get_item_index\000", 923996154)
		methodOptionButton[12] = classDB.get_method_bind("OptionButton\000", "get_item_metadata\000", 4227898402)
		methodOptionButton[13] = classDB.get_method_bind("OptionButton\000", "get_item_tooltip\000", 844755477)
		methodOptionButton[14] = classDB.get_method_bind("OptionButton\000", "is_item_disabled\000", 1116898809)
		methodOptionButton[15] = classDB.get_method_bind("OptionButton\000", "is_item_separator\000", 1116898809)
		methodOptionButton[16] = classDB.get_method_bind("OptionButton\000", "add_separator\000", 3005725572)
		methodOptionButton[17] = classDB.get_method_bind("OptionButton\000", "clear\000", 3218959716)
		methodOptionButton[18] = classDB.get_method_bind("OptionButton\000", "select\000", 1286410249)
		methodOptionButton[19] = classDB.get_method_bind("OptionButton\000", "get_selected\000", 3905245786)
		methodOptionButton[20] = classDB.get_method_bind("OptionButton\000", "get_selected_id\000", 3905245786)
		methodOptionButton[21] = classDB.get_method_bind("OptionButton\000", "get_selected_metadata\000", 1214101251)
		methodOptionButton[22] = classDB.get_method_bind("OptionButton\000", "remove_item\000", 1286410249)
		methodOptionButton[23] = classDB.get_method_bind("OptionButton\000", "get_popup\000", 229722558)
		methodOptionButton[24] = classDB.get_method_bind("OptionButton\000", "set_item_count\000", 1286410249)
		methodOptionButton[25] = classDB.get_method_bind("OptionButton\000", "get_item_count\000", 3905245786)
		methodOptionButton[26] = classDB.get_method_bind("OptionButton\000", "has_selectable_items\000", 36873697)
		methodOptionButton[27] = classDB.get_method_bind("OptionButton\000", "get_selectable_item\000", 894402480)
		methodOptionButton[28] = classDB.get_method_bind("OptionButton\000", "set_fit_to_longest_item\000", 2586408642)
		methodOptionButton[29] = classDB.get_method_bind("OptionButton\000", "is_fit_to_longest_item\000", 36873697)
		methodPCKPacker[0] = classDB.get_method_bind("PCKPacker\000", "pck_start\000", 3232891339)
		methodPCKPacker[1] = classDB.get_method_bind("PCKPacker\000", "add_file\000", 2215643711)
		methodPCKPacker[2] = classDB.get_method_bind("PCKPacker\000", "flush\000", 1633102583)
		methodPackedDataContainer[0] = classDB.get_method_bind("PackedDataContainer\000", "pack\000", 966674026)
		methodPackedDataContainer[1] = classDB.get_method_bind("PackedDataContainer\000", "size\000", 3905245786)
		methodPackedDataContainerRef[0] = classDB.get_method_bind("PackedDataContainerRef\000", "size\000", 3905245786)
		methodPackedScene[0] = classDB.get_method_bind("PackedScene\000", "pack\000", 2584678054)
		methodPackedScene[1] = classDB.get_method_bind("PackedScene\000", "instantiate\000", 2628778455)
		methodPackedScene[2] = classDB.get_method_bind("PackedScene\000", "can_instantiate\000", 36873697)
		methodPackedScene[3] = classDB.get_method_bind("PackedScene\000", "get_state\000", 3479783971)
		methodPacketPeer[0] = classDB.get_method_bind("PacketPeer\000", "get_var\000", 3442865206)
		methodPacketPeer[1] = classDB.get_method_bind("PacketPeer\000", "put_var\000", 2436251611)
		methodPacketPeer[2] = classDB.get_method_bind("PacketPeer\000", "get_packet\000", 2115431945)
		methodPacketPeer[3] = classDB.get_method_bind("PacketPeer\000", "put_packet\000", 680677267)
		methodPacketPeer[4] = classDB.get_method_bind("PacketPeer\000", "get_packet_error\000", 3185525595)
		methodPacketPeer[5] = classDB.get_method_bind("PacketPeer\000", "get_available_packet_count\000", 3905245786)
		methodPacketPeer[6] = classDB.get_method_bind("PacketPeer\000", "get_encode_buffer_max_size\000", 3905245786)
		methodPacketPeer[7] = classDB.get_method_bind("PacketPeer\000", "set_encode_buffer_max_size\000", 1286410249)
		methodPacketPeerDTLS[0] = classDB.get_method_bind("PacketPeerDTLS\000", "poll\000", 3218959716)
		methodPacketPeerDTLS[1] = classDB.get_method_bind("PacketPeerDTLS\000", "connect_to_peer\000", 293566484)
		methodPacketPeerDTLS[2] = classDB.get_method_bind("PacketPeerDTLS\000", "get_status\000", 3248654679)
		methodPacketPeerDTLS[3] = classDB.get_method_bind("PacketPeerDTLS\000", "disconnect_from_peer\000", 3218959716)
		methodPacketPeerStream[0] = classDB.get_method_bind("PacketPeerStream\000", "set_stream_peer\000", 3281897016)
		methodPacketPeerStream[1] = classDB.get_method_bind("PacketPeerStream\000", "get_stream_peer\000", 2741655269)
		methodPacketPeerStream[2] = classDB.get_method_bind("PacketPeerStream\000", "set_input_buffer_max_size\000", 1286410249)
		methodPacketPeerStream[3] = classDB.get_method_bind("PacketPeerStream\000", "set_output_buffer_max_size\000", 1286410249)
		methodPacketPeerStream[4] = classDB.get_method_bind("PacketPeerStream\000", "get_input_buffer_max_size\000", 3905245786)
		methodPacketPeerStream[5] = classDB.get_method_bind("PacketPeerStream\000", "get_output_buffer_max_size\000", 3905245786)
		methodPacketPeerUDP[0] = classDB.get_method_bind("PacketPeerUDP\000", "bind\000", 4290438434)
		methodPacketPeerUDP[1] = classDB.get_method_bind("PacketPeerUDP\000", "close\000", 3218959716)
		methodPacketPeerUDP[2] = classDB.get_method_bind("PacketPeerUDP\000", "wait\000", 166280745)
		methodPacketPeerUDP[3] = classDB.get_method_bind("PacketPeerUDP\000", "is_bound\000", 36873697)
		methodPacketPeerUDP[4] = classDB.get_method_bind("PacketPeerUDP\000", "connect_to_host\000", 993915709)
		methodPacketPeerUDP[5] = classDB.get_method_bind("PacketPeerUDP\000", "is_socket_connected\000", 36873697)
		methodPacketPeerUDP[6] = classDB.get_method_bind("PacketPeerUDP\000", "get_packet_ip\000", 201670096)
		methodPacketPeerUDP[7] = classDB.get_method_bind("PacketPeerUDP\000", "get_packet_port\000", 3905245786)
		methodPacketPeerUDP[8] = classDB.get_method_bind("PacketPeerUDP\000", "get_local_port\000", 3905245786)
		methodPacketPeerUDP[9] = classDB.get_method_bind("PacketPeerUDP\000", "set_dest_address\000", 993915709)
		methodPacketPeerUDP[10] = classDB.get_method_bind("PacketPeerUDP\000", "set_broadcast_enabled\000", 2586408642)
		methodPacketPeerUDP[11] = classDB.get_method_bind("PacketPeerUDP\000", "join_multicast_group\000", 852856452)
		methodPacketPeerUDP[12] = classDB.get_method_bind("PacketPeerUDP\000", "leave_multicast_group\000", 852856452)
		methodPanoramaSkyMaterial[0] = classDB.get_method_bind("PanoramaSkyMaterial\000", "set_panorama\000", 4051416890)
		methodPanoramaSkyMaterial[1] = classDB.get_method_bind("PanoramaSkyMaterial\000", "get_panorama\000", 3635182373)
		methodPanoramaSkyMaterial[2] = classDB.get_method_bind("PanoramaSkyMaterial\000", "set_filtering_enabled\000", 2586408642)
		methodPanoramaSkyMaterial[3] = classDB.get_method_bind("PanoramaSkyMaterial\000", "is_filtering_enabled\000", 36873697)
		methodParallaxBackground[0] = classDB.get_method_bind("ParallaxBackground\000", "set_scroll_offset\000", 743155724)
		methodParallaxBackground[1] = classDB.get_method_bind("ParallaxBackground\000", "get_scroll_offset\000", 3341600327)
		methodParallaxBackground[2] = classDB.get_method_bind("ParallaxBackground\000", "set_scroll_base_offset\000", 743155724)
		methodParallaxBackground[3] = classDB.get_method_bind("ParallaxBackground\000", "get_scroll_base_offset\000", 3341600327)
		methodParallaxBackground[4] = classDB.get_method_bind("ParallaxBackground\000", "set_scroll_base_scale\000", 743155724)
		methodParallaxBackground[5] = classDB.get_method_bind("ParallaxBackground\000", "get_scroll_base_scale\000", 3341600327)
		methodParallaxBackground[6] = classDB.get_method_bind("ParallaxBackground\000", "set_limit_begin\000", 743155724)
		methodParallaxBackground[7] = classDB.get_method_bind("ParallaxBackground\000", "get_limit_begin\000", 3341600327)
		methodParallaxBackground[8] = classDB.get_method_bind("ParallaxBackground\000", "set_limit_end\000", 743155724)
		methodParallaxBackground[9] = classDB.get_method_bind("ParallaxBackground\000", "get_limit_end\000", 3341600327)
		methodParallaxBackground[10] = classDB.get_method_bind("ParallaxBackground\000", "set_ignore_camera_zoom\000", 2586408642)
		methodParallaxBackground[11] = classDB.get_method_bind("ParallaxBackground\000", "is_ignore_camera_zoom\000", 2240911060)
		methodParallaxLayer[0] = classDB.get_method_bind("ParallaxLayer\000", "set_motion_scale\000", 743155724)
		methodParallaxLayer[1] = classDB.get_method_bind("ParallaxLayer\000", "get_motion_scale\000", 3341600327)
		methodParallaxLayer[2] = classDB.get_method_bind("ParallaxLayer\000", "set_motion_offset\000", 743155724)
		methodParallaxLayer[3] = classDB.get_method_bind("ParallaxLayer\000", "get_motion_offset\000", 3341600327)
		methodParallaxLayer[4] = classDB.get_method_bind("ParallaxLayer\000", "set_mirroring\000", 743155724)
		methodParallaxLayer[5] = classDB.get_method_bind("ParallaxLayer\000", "get_mirroring\000", 3341600327)
		methodParticleProcessMaterial[0] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_direction\000", 3460891852)
		methodParticleProcessMaterial[1] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_direction\000", 3360562783)
		methodParticleProcessMaterial[2] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_spread\000", 373806689)
		methodParticleProcessMaterial[3] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_spread\000", 1740695150)
		methodParticleProcessMaterial[4] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_flatness\000", 373806689)
		methodParticleProcessMaterial[5] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_flatness\000", 1740695150)
		methodParticleProcessMaterial[6] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_param_min\000", 2295964248)
		methodParticleProcessMaterial[7] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_param_min\000", 3903786503)
		methodParticleProcessMaterial[8] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_param_max\000", 2295964248)
		methodParticleProcessMaterial[9] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_param_max\000", 3903786503)
		methodParticleProcessMaterial[10] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_param_texture\000", 526976089)
		methodParticleProcessMaterial[11] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_param_texture\000", 3489372978)
		methodParticleProcessMaterial[12] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_color\000", 2920490490)
		methodParticleProcessMaterial[13] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_color\000", 3444240500)
		methodParticleProcessMaterial[14] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_color_ramp\000", 4051416890)
		methodParticleProcessMaterial[15] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_color_ramp\000", 3635182373)
		methodParticleProcessMaterial[16] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_color_initial_ramp\000", 4051416890)
		methodParticleProcessMaterial[17] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_color_initial_ramp\000", 3635182373)
		methodParticleProcessMaterial[18] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_particle_flag\000", 1711815571)
		methodParticleProcessMaterial[19] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_particle_flag\000", 3895316907)
		methodParticleProcessMaterial[20] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_shape\000", 461501442)
		methodParticleProcessMaterial[21] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_shape\000", 3719733018)
		methodParticleProcessMaterial[22] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_sphere_radius\000", 373806689)
		methodParticleProcessMaterial[23] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_sphere_radius\000", 1740695150)
		methodParticleProcessMaterial[24] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_box_extents\000", 3460891852)
		methodParticleProcessMaterial[25] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_box_extents\000", 3360562783)
		methodParticleProcessMaterial[26] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_point_texture\000", 4051416890)
		methodParticleProcessMaterial[27] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_point_texture\000", 3635182373)
		methodParticleProcessMaterial[28] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_normal_texture\000", 4051416890)
		methodParticleProcessMaterial[29] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_normal_texture\000", 3635182373)
		methodParticleProcessMaterial[30] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_color_texture\000", 4051416890)
		methodParticleProcessMaterial[31] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_color_texture\000", 3635182373)
		methodParticleProcessMaterial[32] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_point_count\000", 1286410249)
		methodParticleProcessMaterial[33] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_point_count\000", 3905245786)
		methodParticleProcessMaterial[34] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_ring_axis\000", 3460891852)
		methodParticleProcessMaterial[35] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_ring_axis\000", 3360562783)
		methodParticleProcessMaterial[36] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_ring_height\000", 373806689)
		methodParticleProcessMaterial[37] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_ring_height\000", 1740695150)
		methodParticleProcessMaterial[38] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_ring_radius\000", 373806689)
		methodParticleProcessMaterial[39] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_ring_radius\000", 1740695150)
		methodParticleProcessMaterial[40] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_emission_ring_inner_radius\000", 373806689)
		methodParticleProcessMaterial[41] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_emission_ring_inner_radius\000", 1740695150)
		methodParticleProcessMaterial[42] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_turbulence_enabled\000", 36873697)
		methodParticleProcessMaterial[43] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_turbulence_enabled\000", 2586408642)
		methodParticleProcessMaterial[44] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_turbulence_noise_strength\000", 1740695150)
		methodParticleProcessMaterial[45] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_turbulence_noise_strength\000", 373806689)
		methodParticleProcessMaterial[46] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_turbulence_noise_scale\000", 1740695150)
		methodParticleProcessMaterial[47] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_turbulence_noise_scale\000", 373806689)
		methodParticleProcessMaterial[48] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_turbulence_noise_speed_random\000", 1740695150)
		methodParticleProcessMaterial[49] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_turbulence_noise_speed_random\000", 373806689)
		methodParticleProcessMaterial[50] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_turbulence_noise_speed\000", 3360562783)
		methodParticleProcessMaterial[51] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_turbulence_noise_speed\000", 3460891852)
		methodParticleProcessMaterial[52] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_gravity\000", 3360562783)
		methodParticleProcessMaterial[53] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_gravity\000", 3460891852)
		methodParticleProcessMaterial[54] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_lifetime_randomness\000", 373806689)
		methodParticleProcessMaterial[55] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_lifetime_randomness\000", 1740695150)
		methodParticleProcessMaterial[56] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_sub_emitter_mode\000", 2399052877)
		methodParticleProcessMaterial[57] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_sub_emitter_mode\000", 2161806672)
		methodParticleProcessMaterial[58] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_sub_emitter_frequency\000", 1740695150)
		methodParticleProcessMaterial[59] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_sub_emitter_frequency\000", 373806689)
		methodParticleProcessMaterial[60] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_sub_emitter_amount_at_end\000", 3905245786)
		methodParticleProcessMaterial[61] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_sub_emitter_amount_at_end\000", 1286410249)
		methodParticleProcessMaterial[62] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_sub_emitter_keep_velocity\000", 36873697)
		methodParticleProcessMaterial[63] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_sub_emitter_keep_velocity\000", 2586408642)
		methodParticleProcessMaterial[64] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_attractor_interaction_enabled\000", 2586408642)
		methodParticleProcessMaterial[65] = classDB.get_method_bind("ParticleProcessMaterial\000", "is_attractor_interaction_enabled\000", 36873697)
		methodParticleProcessMaterial[66] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_collision_mode\000", 653804659)
		methodParticleProcessMaterial[67] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_collision_mode\000", 139371864)
		methodParticleProcessMaterial[68] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_collision_use_scale\000", 2586408642)
		methodParticleProcessMaterial[69] = classDB.get_method_bind("ParticleProcessMaterial\000", "is_collision_using_scale\000", 36873697)
		methodParticleProcessMaterial[70] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_collision_friction\000", 373806689)
		methodParticleProcessMaterial[71] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_collision_friction\000", 1740695150)
		methodParticleProcessMaterial[72] = classDB.get_method_bind("ParticleProcessMaterial\000", "set_collision_bounce\000", 373806689)
		methodParticleProcessMaterial[73] = classDB.get_method_bind("ParticleProcessMaterial\000", "get_collision_bounce\000", 1740695150)
		methodPath2D[0] = classDB.get_method_bind("Path2D\000", "set_curve\000", 659985499)
		methodPath2D[1] = classDB.get_method_bind("Path2D\000", "get_curve\000", 660369445)
		methodPath3D[0] = classDB.get_method_bind("Path3D\000", "set_curve\000", 408955118)
		methodPath3D[1] = classDB.get_method_bind("Path3D\000", "get_curve\000", 4244715212)
		methodPathFollow2D[0] = classDB.get_method_bind("PathFollow2D\000", "set_progress\000", 373806689)
		methodPathFollow2D[1] = classDB.get_method_bind("PathFollow2D\000", "get_progress\000", 1740695150)
		methodPathFollow2D[2] = classDB.get_method_bind("PathFollow2D\000", "set_h_offset\000", 373806689)
		methodPathFollow2D[3] = classDB.get_method_bind("PathFollow2D\000", "get_h_offset\000", 1740695150)
		methodPathFollow2D[4] = classDB.get_method_bind("PathFollow2D\000", "set_v_offset\000", 373806689)
		methodPathFollow2D[5] = classDB.get_method_bind("PathFollow2D\000", "get_v_offset\000", 1740695150)
		methodPathFollow2D[6] = classDB.get_method_bind("PathFollow2D\000", "set_progress_ratio\000", 373806689)
		methodPathFollow2D[7] = classDB.get_method_bind("PathFollow2D\000", "get_progress_ratio\000", 1740695150)
		methodPathFollow2D[8] = classDB.get_method_bind("PathFollow2D\000", "set_rotates\000", 2586408642)
		methodPathFollow2D[9] = classDB.get_method_bind("PathFollow2D\000", "is_rotating\000", 36873697)
		methodPathFollow2D[10] = classDB.get_method_bind("PathFollow2D\000", "set_cubic_interpolation\000", 2586408642)
		methodPathFollow2D[11] = classDB.get_method_bind("PathFollow2D\000", "get_cubic_interpolation\000", 36873697)
		methodPathFollow2D[12] = classDB.get_method_bind("PathFollow2D\000", "set_loop\000", 2586408642)
		methodPathFollow2D[13] = classDB.get_method_bind("PathFollow2D\000", "has_loop\000", 36873697)
		methodPathFollow2D[14] = classDB.get_method_bind("PathFollow2D\000", "set_lookahead\000", 373806689)
		methodPathFollow2D[15] = classDB.get_method_bind("PathFollow2D\000", "get_lookahead\000", 1740695150)
		methodPathFollow3D[0] = classDB.get_method_bind("PathFollow3D\000", "set_progress\000", 373806689)
		methodPathFollow3D[1] = classDB.get_method_bind("PathFollow3D\000", "get_progress\000", 1740695150)
		methodPathFollow3D[2] = classDB.get_method_bind("PathFollow3D\000", "set_h_offset\000", 373806689)
		methodPathFollow3D[3] = classDB.get_method_bind("PathFollow3D\000", "get_h_offset\000", 1740695150)
		methodPathFollow3D[4] = classDB.get_method_bind("PathFollow3D\000", "set_v_offset\000", 373806689)
		methodPathFollow3D[5] = classDB.get_method_bind("PathFollow3D\000", "get_v_offset\000", 1740695150)
		methodPathFollow3D[6] = classDB.get_method_bind("PathFollow3D\000", "set_progress_ratio\000", 373806689)
		methodPathFollow3D[7] = classDB.get_method_bind("PathFollow3D\000", "get_progress_ratio\000", 1740695150)
		methodPathFollow3D[8] = classDB.get_method_bind("PathFollow3D\000", "set_rotation_mode\000", 1640311967)
		methodPathFollow3D[9] = classDB.get_method_bind("PathFollow3D\000", "get_rotation_mode\000", 3814010545)
		methodPathFollow3D[10] = classDB.get_method_bind("PathFollow3D\000", "set_cubic_interpolation\000", 2586408642)
		methodPathFollow3D[11] = classDB.get_method_bind("PathFollow3D\000", "get_cubic_interpolation\000", 36873697)
		methodPathFollow3D[12] = classDB.get_method_bind("PathFollow3D\000", "set_loop\000", 2586408642)
		methodPathFollow3D[13] = classDB.get_method_bind("PathFollow3D\000", "has_loop\000", 36873697)
		methodPerformanceSingleton[0] = classDB.get_method_bind("Performance\000", "get_monitor\000", 1943275655)
		methodPerformanceSingleton[1] = classDB.get_method_bind("Performance\000", "add_custom_monitor\000", 2865980031)
		methodPerformanceSingleton[2] = classDB.get_method_bind("Performance\000", "remove_custom_monitor\000", 3304788590)
		methodPerformanceSingleton[3] = classDB.get_method_bind("Performance\000", "has_custom_monitor\000", 2041966384)
		methodPerformanceSingleton[4] = classDB.get_method_bind("Performance\000", "get_custom_monitor\000", 2138907829)
		methodPerformanceSingleton[5] = classDB.get_method_bind("Performance\000", "get_monitor_modification_time\000", 2455072627)
		methodPerformanceSingleton[6] = classDB.get_method_bind("Performance\000", "get_custom_monitor_names\000", 2915620761)
		methodPhysicalBone2D[0] = classDB.get_method_bind("PhysicalBone2D\000", "get_joint\000", 3582132112)
		methodPhysicalBone2D[1] = classDB.get_method_bind("PhysicalBone2D\000", "get_auto_configure_joint\000", 36873697)
		methodPhysicalBone2D[2] = classDB.get_method_bind("PhysicalBone2D\000", "set_auto_configure_joint\000", 2586408642)
		methodPhysicalBone2D[3] = classDB.get_method_bind("PhysicalBone2D\000", "set_simulate_physics\000", 2586408642)
		methodPhysicalBone2D[4] = classDB.get_method_bind("PhysicalBone2D\000", "get_simulate_physics\000", 36873697)
		methodPhysicalBone2D[5] = classDB.get_method_bind("PhysicalBone2D\000", "is_simulating_physics\000", 36873697)
		methodPhysicalBone2D[6] = classDB.get_method_bind("PhysicalBone2D\000", "set_bone2d_nodepath\000", 1348162250)
		methodPhysicalBone2D[7] = classDB.get_method_bind("PhysicalBone2D\000", "get_bone2d_nodepath\000", 4075236667)
		methodPhysicalBone2D[8] = classDB.get_method_bind("PhysicalBone2D\000", "set_bone2d_index\000", 1286410249)
		methodPhysicalBone2D[9] = classDB.get_method_bind("PhysicalBone2D\000", "get_bone2d_index\000", 3905245786)
		methodPhysicalBone2D[10] = classDB.get_method_bind("PhysicalBone2D\000", "set_follow_bone_when_simulating\000", 2586408642)
		methodPhysicalBone2D[11] = classDB.get_method_bind("PhysicalBone2D\000", "get_follow_bone_when_simulating\000", 36873697)
		methodPhysicalBone3D[0] = classDB.get_method_bind("PhysicalBone3D\000", "apply_central_impulse\000", 3460891852)
		methodPhysicalBone3D[1] = classDB.get_method_bind("PhysicalBone3D\000", "apply_impulse\000", 1002852006)
		methodPhysicalBone3D[2] = classDB.get_method_bind("PhysicalBone3D\000", "set_joint_type\000", 2289552604)
		methodPhysicalBone3D[3] = classDB.get_method_bind("PhysicalBone3D\000", "get_joint_type\000", 931347320)
		methodPhysicalBone3D[4] = classDB.get_method_bind("PhysicalBone3D\000", "set_joint_offset\000", 2952846383)
		methodPhysicalBone3D[5] = classDB.get_method_bind("PhysicalBone3D\000", "get_joint_offset\000", 3229777777)
		methodPhysicalBone3D[6] = classDB.get_method_bind("PhysicalBone3D\000", "set_joint_rotation\000", 3460891852)
		methodPhysicalBone3D[7] = classDB.get_method_bind("PhysicalBone3D\000", "get_joint_rotation\000", 3360562783)
		methodPhysicalBone3D[8] = classDB.get_method_bind("PhysicalBone3D\000", "set_body_offset\000", 2952846383)
		methodPhysicalBone3D[9] = classDB.get_method_bind("PhysicalBone3D\000", "get_body_offset\000", 3229777777)
		methodPhysicalBone3D[10] = classDB.get_method_bind("PhysicalBone3D\000", "get_simulate_physics\000", 2240911060)
		methodPhysicalBone3D[11] = classDB.get_method_bind("PhysicalBone3D\000", "is_simulating_physics\000", 2240911060)
		methodPhysicalBone3D[12] = classDB.get_method_bind("PhysicalBone3D\000", "get_bone_id\000", 3905245786)
		methodPhysicalBone3D[13] = classDB.get_method_bind("PhysicalBone3D\000", "set_mass\000", 373806689)
		methodPhysicalBone3D[14] = classDB.get_method_bind("PhysicalBone3D\000", "get_mass\000", 1740695150)
		methodPhysicalBone3D[15] = classDB.get_method_bind("PhysicalBone3D\000", "set_friction\000", 373806689)
		methodPhysicalBone3D[16] = classDB.get_method_bind("PhysicalBone3D\000", "get_friction\000", 1740695150)
		methodPhysicalBone3D[17] = classDB.get_method_bind("PhysicalBone3D\000", "set_bounce\000", 373806689)
		methodPhysicalBone3D[18] = classDB.get_method_bind("PhysicalBone3D\000", "get_bounce\000", 1740695150)
		methodPhysicalBone3D[19] = classDB.get_method_bind("PhysicalBone3D\000", "set_gravity_scale\000", 373806689)
		methodPhysicalBone3D[20] = classDB.get_method_bind("PhysicalBone3D\000", "get_gravity_scale\000", 1740695150)
		methodPhysicalBone3D[21] = classDB.get_method_bind("PhysicalBone3D\000", "set_linear_damp_mode\000", 1244972221)
		methodPhysicalBone3D[22] = classDB.get_method_bind("PhysicalBone3D\000", "get_linear_damp_mode\000", 205884699)
		methodPhysicalBone3D[23] = classDB.get_method_bind("PhysicalBone3D\000", "set_angular_damp_mode\000", 1244972221)
		methodPhysicalBone3D[24] = classDB.get_method_bind("PhysicalBone3D\000", "get_angular_damp_mode\000", 205884699)
		methodPhysicalBone3D[25] = classDB.get_method_bind("PhysicalBone3D\000", "set_linear_damp\000", 373806689)
		methodPhysicalBone3D[26] = classDB.get_method_bind("PhysicalBone3D\000", "get_linear_damp\000", 1740695150)
		methodPhysicalBone3D[27] = classDB.get_method_bind("PhysicalBone3D\000", "set_angular_damp\000", 373806689)
		methodPhysicalBone3D[28] = classDB.get_method_bind("PhysicalBone3D\000", "get_angular_damp\000", 1740695150)
		methodPhysicalBone3D[29] = classDB.get_method_bind("PhysicalBone3D\000", "set_linear_velocity\000", 3460891852)
		methodPhysicalBone3D[30] = classDB.get_method_bind("PhysicalBone3D\000", "get_linear_velocity\000", 3360562783)
		methodPhysicalBone3D[31] = classDB.get_method_bind("PhysicalBone3D\000", "set_angular_velocity\000", 3460891852)
		methodPhysicalBone3D[32] = classDB.get_method_bind("PhysicalBone3D\000", "get_angular_velocity\000", 3360562783)
		methodPhysicalBone3D[33] = classDB.get_method_bind("PhysicalBone3D\000", "set_use_custom_integrator\000", 2586408642)
		methodPhysicalBone3D[34] = classDB.get_method_bind("PhysicalBone3D\000", "is_using_custom_integrator\000", 2240911060)
		methodPhysicalBone3D[35] = classDB.get_method_bind("PhysicalBone3D\000", "set_can_sleep\000", 2586408642)
		methodPhysicalBone3D[36] = classDB.get_method_bind("PhysicalBone3D\000", "is_able_to_sleep\000", 36873697)
		methodPhysicalSkyMaterial[0] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_rayleigh_coefficient\000", 373806689)
		methodPhysicalSkyMaterial[1] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_rayleigh_coefficient\000", 1740695150)
		methodPhysicalSkyMaterial[2] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_rayleigh_color\000", 2920490490)
		methodPhysicalSkyMaterial[3] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_rayleigh_color\000", 3444240500)
		methodPhysicalSkyMaterial[4] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_mie_coefficient\000", 373806689)
		methodPhysicalSkyMaterial[5] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_mie_coefficient\000", 1740695150)
		methodPhysicalSkyMaterial[6] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_mie_eccentricity\000", 373806689)
		methodPhysicalSkyMaterial[7] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_mie_eccentricity\000", 1740695150)
		methodPhysicalSkyMaterial[8] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_mie_color\000", 2920490490)
		methodPhysicalSkyMaterial[9] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_mie_color\000", 3444240500)
		methodPhysicalSkyMaterial[10] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_turbidity\000", 373806689)
		methodPhysicalSkyMaterial[11] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_turbidity\000", 1740695150)
		methodPhysicalSkyMaterial[12] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_sun_disk_scale\000", 373806689)
		methodPhysicalSkyMaterial[13] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_sun_disk_scale\000", 1740695150)
		methodPhysicalSkyMaterial[14] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_ground_color\000", 2920490490)
		methodPhysicalSkyMaterial[15] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_ground_color\000", 3444240500)
		methodPhysicalSkyMaterial[16] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_exposure\000", 373806689)
		methodPhysicalSkyMaterial[17] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_exposure\000", 1740695150)
		methodPhysicalSkyMaterial[18] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_use_debanding\000", 2586408642)
		methodPhysicalSkyMaterial[19] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_use_debanding\000", 36873697)
		methodPhysicalSkyMaterial[20] = classDB.get_method_bind("PhysicalSkyMaterial\000", "set_night_sky\000", 4051416890)
		methodPhysicalSkyMaterial[21] = classDB.get_method_bind("PhysicalSkyMaterial\000", "get_night_sky\000", 3635182373)
		methodPhysicsBody2D[0] = classDB.get_method_bind("PhysicsBody2D\000", "move_and_collide\000", 1707139212)
		methodPhysicsBody2D[1] = classDB.get_method_bind("PhysicsBody2D\000", "test_move\000", 498344496)
		methodPhysicsBody2D[2] = classDB.get_method_bind("PhysicsBody2D\000", "get_collision_exceptions\000", 2915620761)
		methodPhysicsBody2D[3] = classDB.get_method_bind("PhysicsBody2D\000", "add_collision_exception_with\000", 1078189570)
		methodPhysicsBody2D[4] = classDB.get_method_bind("PhysicsBody2D\000", "remove_collision_exception_with\000", 1078189570)
		methodPhysicsBody3D[0] = classDB.get_method_bind("PhysicsBody3D\000", "move_and_collide\000", 3373113249)
		methodPhysicsBody3D[1] = classDB.get_method_bind("PhysicsBody3D\000", "test_move\000", 3957778045)
		methodPhysicsBody3D[2] = classDB.get_method_bind("PhysicsBody3D\000", "set_axis_lock\000", 1787895195)
		methodPhysicsBody3D[3] = classDB.get_method_bind("PhysicsBody3D\000", "get_axis_lock\000", 2264617709)
		methodPhysicsBody3D[4] = classDB.get_method_bind("PhysicsBody3D\000", "get_collision_exceptions\000", 2915620761)
		methodPhysicsBody3D[5] = classDB.get_method_bind("PhysicsBody3D\000", "add_collision_exception_with\000", 1078189570)
		methodPhysicsBody3D[6] = classDB.get_method_bind("PhysicsBody3D\000", "remove_collision_exception_with\000", 1078189570)
		methodPhysicsDirectBodyState2D[0] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_total_gravity\000", 3341600327)
		methodPhysicsDirectBodyState2D[1] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_total_linear_damp\000", 1740695150)
		methodPhysicsDirectBodyState2D[2] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_total_angular_damp\000", 1740695150)
		methodPhysicsDirectBodyState2D[3] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_center_of_mass\000", 3341600327)
		methodPhysicsDirectBodyState2D[4] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_center_of_mass_local\000", 3341600327)
		methodPhysicsDirectBodyState2D[5] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_inverse_mass\000", 1740695150)
		methodPhysicsDirectBodyState2D[6] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_inverse_inertia\000", 1740695150)
		methodPhysicsDirectBodyState2D[7] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_linear_velocity\000", 743155724)
		methodPhysicsDirectBodyState2D[8] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_linear_velocity\000", 3341600327)
		methodPhysicsDirectBodyState2D[9] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_angular_velocity\000", 373806689)
		methodPhysicsDirectBodyState2D[10] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_angular_velocity\000", 1740695150)
		methodPhysicsDirectBodyState2D[11] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_transform\000", 2761652528)
		methodPhysicsDirectBodyState2D[12] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_transform\000", 3814499831)
		methodPhysicsDirectBodyState2D[13] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_velocity_at_local_position\000", 2656412154)
		methodPhysicsDirectBodyState2D[14] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_central_impulse\000", 743155724)
		methodPhysicsDirectBodyState2D[15] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_torque_impulse\000", 373806689)
		methodPhysicsDirectBodyState2D[16] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_impulse\000", 496058220)
		methodPhysicsDirectBodyState2D[17] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_central_force\000", 3862383994)
		methodPhysicsDirectBodyState2D[18] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_force\000", 496058220)
		methodPhysicsDirectBodyState2D[19] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "apply_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[20] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "add_constant_central_force\000", 3862383994)
		methodPhysicsDirectBodyState2D[21] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "add_constant_force\000", 496058220)
		methodPhysicsDirectBodyState2D[22] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "add_constant_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[23] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_constant_force\000", 743155724)
		methodPhysicsDirectBodyState2D[24] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_constant_force\000", 3341600327)
		methodPhysicsDirectBodyState2D[25] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_constant_torque\000", 373806689)
		methodPhysicsDirectBodyState2D[26] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_constant_torque\000", 1740695150)
		methodPhysicsDirectBodyState2D[27] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "set_sleep_state\000", 2586408642)
		methodPhysicsDirectBodyState2D[28] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "is_sleeping\000", 36873697)
		methodPhysicsDirectBodyState2D[29] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_count\000", 3905245786)
		methodPhysicsDirectBodyState2D[30] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_local_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[31] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_local_normal\000", 2299179447)
		methodPhysicsDirectBodyState2D[32] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_local_shape\000", 923996154)
		methodPhysicsDirectBodyState2D[33] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider\000", 495598643)
		methodPhysicsDirectBodyState2D[34] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[35] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider_id\000", 923996154)
		methodPhysicsDirectBodyState2D[36] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider_object\000", 3332903315)
		methodPhysicsDirectBodyState2D[37] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider_shape\000", 923996154)
		methodPhysicsDirectBodyState2D[38] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_contact_collider_velocity_at_position\000", 2299179447)
		methodPhysicsDirectBodyState2D[39] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_step\000", 1740695150)
		methodPhysicsDirectBodyState2D[40] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "integrate_forces\000", 3218959716)
		methodPhysicsDirectBodyState2D[41] = classDB.get_method_bind("PhysicsDirectBodyState2D\000", "get_space_state\000", 2506717822)
		methodPhysicsDirectBodyState3D[0] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_total_gravity\000", 3360562783)
		methodPhysicsDirectBodyState3D[1] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_total_linear_damp\000", 1740695150)
		methodPhysicsDirectBodyState3D[2] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_total_angular_damp\000", 1740695150)
		methodPhysicsDirectBodyState3D[3] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_center_of_mass\000", 3360562783)
		methodPhysicsDirectBodyState3D[4] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_center_of_mass_local\000", 3360562783)
		methodPhysicsDirectBodyState3D[5] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_principal_inertia_axes\000", 2716978435)
		methodPhysicsDirectBodyState3D[6] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_inverse_mass\000", 1740695150)
		methodPhysicsDirectBodyState3D[7] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_inverse_inertia\000", 3360562783)
		methodPhysicsDirectBodyState3D[8] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_linear_velocity\000", 3460891852)
		methodPhysicsDirectBodyState3D[9] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_linear_velocity\000", 3360562783)
		methodPhysicsDirectBodyState3D[10] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_angular_velocity\000", 3460891852)
		methodPhysicsDirectBodyState3D[11] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_angular_velocity\000", 3360562783)
		methodPhysicsDirectBodyState3D[12] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_transform\000", 2952846383)
		methodPhysicsDirectBodyState3D[13] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_transform\000", 3229777777)
		methodPhysicsDirectBodyState3D[14] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_velocity_at_local_position\000", 192990374)
		methodPhysicsDirectBodyState3D[15] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_central_impulse\000", 2007698547)
		methodPhysicsDirectBodyState3D[16] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_impulse\000", 1002852006)
		methodPhysicsDirectBodyState3D[17] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_torque_impulse\000", 3460891852)
		methodPhysicsDirectBodyState3D[18] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_central_force\000", 2007698547)
		methodPhysicsDirectBodyState3D[19] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_force\000", 1002852006)
		methodPhysicsDirectBodyState3D[20] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "apply_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[21] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "add_constant_central_force\000", 2007698547)
		methodPhysicsDirectBodyState3D[22] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "add_constant_force\000", 1002852006)
		methodPhysicsDirectBodyState3D[23] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "add_constant_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[24] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_constant_force\000", 3460891852)
		methodPhysicsDirectBodyState3D[25] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_constant_force\000", 3360562783)
		methodPhysicsDirectBodyState3D[26] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_constant_torque\000", 3460891852)
		methodPhysicsDirectBodyState3D[27] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_constant_torque\000", 3360562783)
		methodPhysicsDirectBodyState3D[28] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "set_sleep_state\000", 2586408642)
		methodPhysicsDirectBodyState3D[29] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "is_sleeping\000", 36873697)
		methodPhysicsDirectBodyState3D[30] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_count\000", 3905245786)
		methodPhysicsDirectBodyState3D[31] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_local_position\000", 711720468)
		methodPhysicsDirectBodyState3D[32] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_local_normal\000", 711720468)
		methodPhysicsDirectBodyState3D[33] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_impulse\000", 2339986948)
		methodPhysicsDirectBodyState3D[34] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_local_shape\000", 923996154)
		methodPhysicsDirectBodyState3D[35] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider\000", 495598643)
		methodPhysicsDirectBodyState3D[36] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider_position\000", 711720468)
		methodPhysicsDirectBodyState3D[37] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider_id\000", 923996154)
		methodPhysicsDirectBodyState3D[38] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider_object\000", 3332903315)
		methodPhysicsDirectBodyState3D[39] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider_shape\000", 923996154)
		methodPhysicsDirectBodyState3D[40] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_contact_collider_velocity_at_position\000", 711720468)
		methodPhysicsDirectBodyState3D[41] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_step\000", 1740695150)
		methodPhysicsDirectBodyState3D[42] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "integrate_forces\000", 3218959716)
		methodPhysicsDirectBodyState3D[43] = classDB.get_method_bind("PhysicsDirectBodyState3D\000", "get_space_state\000", 2069328350)
		methodPhysicsDirectSpaceState2D[0] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "intersect_point\000", 3278207904)
		methodPhysicsDirectSpaceState2D[1] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "intersect_ray\000", 1590275562)
		methodPhysicsDirectSpaceState2D[2] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "intersect_shape\000", 3803848594)
		methodPhysicsDirectSpaceState2D[3] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "cast_motion\000", 711275086)
		methodPhysicsDirectSpaceState2D[4] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "collide_shape\000", 3803848594)
		methodPhysicsDirectSpaceState2D[5] = classDB.get_method_bind("PhysicsDirectSpaceState2D\000", "get_rest_info\000", 2803666496)
		methodPhysicsDirectSpaceState3D[0] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "intersect_point\000", 45993382)
		methodPhysicsDirectSpaceState3D[1] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "intersect_ray\000", 3957970750)
		methodPhysicsDirectSpaceState3D[2] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "intersect_shape\000", 550215980)
		methodPhysicsDirectSpaceState3D[3] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "cast_motion\000", 1778757334)
		methodPhysicsDirectSpaceState3D[4] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "collide_shape\000", 550215980)
		methodPhysicsDirectSpaceState3D[5] = classDB.get_method_bind("PhysicsDirectSpaceState3D\000", "get_rest_info\000", 1376751592)
		methodPhysicsMaterial[0] = classDB.get_method_bind("PhysicsMaterial\000", "set_friction\000", 373806689)
		methodPhysicsMaterial[1] = classDB.get_method_bind("PhysicsMaterial\000", "get_friction\000", 1740695150)
		methodPhysicsMaterial[2] = classDB.get_method_bind("PhysicsMaterial\000", "set_rough\000", 2586408642)
		methodPhysicsMaterial[3] = classDB.get_method_bind("PhysicsMaterial\000", "is_rough\000", 36873697)
		methodPhysicsMaterial[4] = classDB.get_method_bind("PhysicsMaterial\000", "set_bounce\000", 373806689)
		methodPhysicsMaterial[5] = classDB.get_method_bind("PhysicsMaterial\000", "get_bounce\000", 1740695150)
		methodPhysicsMaterial[6] = classDB.get_method_bind("PhysicsMaterial\000", "set_absorbent\000", 2586408642)
		methodPhysicsMaterial[7] = classDB.get_method_bind("PhysicsMaterial\000", "is_absorbent\000", 36873697)
		methodPhysicsPointQueryParameters2D[0] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_position\000", 743155724)
		methodPhysicsPointQueryParameters2D[1] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "get_position\000", 3341600327)
		methodPhysicsPointQueryParameters2D[2] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_canvas_instance_id\000", 1286410249)
		methodPhysicsPointQueryParameters2D[3] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "get_canvas_instance_id\000", 3905245786)
		methodPhysicsPointQueryParameters2D[4] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsPointQueryParameters2D[5] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsPointQueryParameters2D[6] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsPointQueryParameters2D[7] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsPointQueryParameters2D[8] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsPointQueryParameters2D[9] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsPointQueryParameters2D[10] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsPointQueryParameters2D[11] = classDB.get_method_bind("PhysicsPointQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsPointQueryParameters3D[0] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "set_position\000", 3460891852)
		methodPhysicsPointQueryParameters3D[1] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "get_position\000", 3360562783)
		methodPhysicsPointQueryParameters3D[2] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsPointQueryParameters3D[3] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsPointQueryParameters3D[4] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsPointQueryParameters3D[5] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsPointQueryParameters3D[6] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsPointQueryParameters3D[7] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsPointQueryParameters3D[8] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsPointQueryParameters3D[9] = classDB.get_method_bind("PhysicsPointQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[0] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "create\000", 1118143851)
		methodPhysicsRayQueryParameters2D[1] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_from\000", 743155724)
		methodPhysicsRayQueryParameters2D[2] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "get_from\000", 3341600327)
		methodPhysicsRayQueryParameters2D[3] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_to\000", 743155724)
		methodPhysicsRayQueryParameters2D[4] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "get_to\000", 3341600327)
		methodPhysicsRayQueryParameters2D[5] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsRayQueryParameters2D[6] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsRayQueryParameters2D[7] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsRayQueryParameters2D[8] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsRayQueryParameters2D[9] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsRayQueryParameters2D[10] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[11] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsRayQueryParameters2D[12] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters2D[13] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "set_hit_from_inside\000", 2586408642)
		methodPhysicsRayQueryParameters2D[14] = classDB.get_method_bind("PhysicsRayQueryParameters2D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[0] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "create\000", 680321959)
		methodPhysicsRayQueryParameters3D[1] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_from\000", 3460891852)
		methodPhysicsRayQueryParameters3D[2] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "get_from\000", 3360562783)
		methodPhysicsRayQueryParameters3D[3] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_to\000", 3460891852)
		methodPhysicsRayQueryParameters3D[4] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "get_to\000", 3360562783)
		methodPhysicsRayQueryParameters3D[5] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsRayQueryParameters3D[6] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsRayQueryParameters3D[7] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsRayQueryParameters3D[8] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsRayQueryParameters3D[9] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsRayQueryParameters3D[10] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[11] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsRayQueryParameters3D[12] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[13] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_hit_from_inside\000", 2586408642)
		methodPhysicsRayQueryParameters3D[14] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodPhysicsRayQueryParameters3D[15] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "set_hit_back_faces\000", 2586408642)
		methodPhysicsRayQueryParameters3D[16] = classDB.get_method_bind("PhysicsRayQueryParameters3D\000", "is_hit_back_faces_enabled\000", 36873697)
		methodPhysicsServer2DSingleton[0] = classDB.get_method_bind("PhysicsServer2D\000", "world_boundary_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[1] = classDB.get_method_bind("PhysicsServer2D\000", "separation_ray_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[2] = classDB.get_method_bind("PhysicsServer2D\000", "segment_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[3] = classDB.get_method_bind("PhysicsServer2D\000", "circle_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[4] = classDB.get_method_bind("PhysicsServer2D\000", "rectangle_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[5] = classDB.get_method_bind("PhysicsServer2D\000", "capsule_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[6] = classDB.get_method_bind("PhysicsServer2D\000", "convex_polygon_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[7] = classDB.get_method_bind("PhysicsServer2D\000", "concave_polygon_shape_create\000", 529393457)
		methodPhysicsServer2DSingleton[8] = classDB.get_method_bind("PhysicsServer2D\000", "shape_set_data\000", 3175752987)
		methodPhysicsServer2DSingleton[9] = classDB.get_method_bind("PhysicsServer2D\000", "shape_get_type\000", 1240598777)
		methodPhysicsServer2DSingleton[10] = classDB.get_method_bind("PhysicsServer2D\000", "shape_get_data\000", 4171304767)
		methodPhysicsServer2DSingleton[11] = classDB.get_method_bind("PhysicsServer2D\000", "space_create\000", 529393457)
		methodPhysicsServer2DSingleton[12] = classDB.get_method_bind("PhysicsServer2D\000", "space_set_active\000", 1265174801)
		methodPhysicsServer2DSingleton[13] = classDB.get_method_bind("PhysicsServer2D\000", "space_is_active\000", 4155700596)
		methodPhysicsServer2DSingleton[14] = classDB.get_method_bind("PhysicsServer2D\000", "space_set_param\000", 949194586)
		methodPhysicsServer2DSingleton[15] = classDB.get_method_bind("PhysicsServer2D\000", "space_get_param\000", 874111783)
		methodPhysicsServer2DSingleton[16] = classDB.get_method_bind("PhysicsServer2D\000", "space_get_direct_state\000", 3160173886)
		methodPhysicsServer2DSingleton[17] = classDB.get_method_bind("PhysicsServer2D\000", "area_create\000", 529393457)
		methodPhysicsServer2DSingleton[18] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_space\000", 395945892)
		methodPhysicsServer2DSingleton[19] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_space\000", 3814569979)
		methodPhysicsServer2DSingleton[20] = classDB.get_method_bind("PhysicsServer2D\000", "area_add_shape\000", 754862190)
		methodPhysicsServer2DSingleton[21] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_shape\000", 2310537182)
		methodPhysicsServer2DSingleton[22] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_shape_transform\000", 736082694)
		methodPhysicsServer2DSingleton[23] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_shape_disabled\000", 2658558584)
		methodPhysicsServer2DSingleton[24] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_shape_count\000", 2198884583)
		methodPhysicsServer2DSingleton[25] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_shape\000", 1066463050)
		methodPhysicsServer2DSingleton[26] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_shape_transform\000", 1324854622)
		methodPhysicsServer2DSingleton[27] = classDB.get_method_bind("PhysicsServer2D\000", "area_remove_shape\000", 3411492887)
		methodPhysicsServer2DSingleton[28] = classDB.get_method_bind("PhysicsServer2D\000", "area_clear_shapes\000", 2722037293)
		methodPhysicsServer2DSingleton[29] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_collision_layer\000", 3411492887)
		methodPhysicsServer2DSingleton[30] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_collision_mask\000", 3411492887)
		methodPhysicsServer2DSingleton[31] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_param\000", 1257146028)
		methodPhysicsServer2DSingleton[32] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_transform\000", 1246044741)
		methodPhysicsServer2DSingleton[33] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_param\000", 3047435120)
		methodPhysicsServer2DSingleton[34] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_transform\000", 213527486)
		methodPhysicsServer2DSingleton[35] = classDB.get_method_bind("PhysicsServer2D\000", "area_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer2DSingleton[36] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_object_instance_id\000", 2198884583)
		methodPhysicsServer2DSingleton[37] = classDB.get_method_bind("PhysicsServer2D\000", "area_attach_canvas_instance_id\000", 3411492887)
		methodPhysicsServer2DSingleton[38] = classDB.get_method_bind("PhysicsServer2D\000", "area_get_canvas_instance_id\000", 2198884583)
		methodPhysicsServer2DSingleton[39] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_monitor_callback\000", 3379118538)
		methodPhysicsServer2DSingleton[40] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_area_monitor_callback\000", 3379118538)
		methodPhysicsServer2DSingleton[41] = classDB.get_method_bind("PhysicsServer2D\000", "area_set_monitorable\000", 1265174801)
		methodPhysicsServer2DSingleton[42] = classDB.get_method_bind("PhysicsServer2D\000", "body_create\000", 529393457)
		methodPhysicsServer2DSingleton[43] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_space\000", 395945892)
		methodPhysicsServer2DSingleton[44] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_space\000", 3814569979)
		methodPhysicsServer2DSingleton[45] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_mode\000", 1658067650)
		methodPhysicsServer2DSingleton[46] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_mode\000", 3261702585)
		methodPhysicsServer2DSingleton[47] = classDB.get_method_bind("PhysicsServer2D\000", "body_add_shape\000", 754862190)
		methodPhysicsServer2DSingleton[48] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_shape\000", 2310537182)
		methodPhysicsServer2DSingleton[49] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_shape_transform\000", 736082694)
		methodPhysicsServer2DSingleton[50] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_shape_count\000", 2198884583)
		methodPhysicsServer2DSingleton[51] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_shape\000", 1066463050)
		methodPhysicsServer2DSingleton[52] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_shape_transform\000", 1324854622)
		methodPhysicsServer2DSingleton[53] = classDB.get_method_bind("PhysicsServer2D\000", "body_remove_shape\000", 3411492887)
		methodPhysicsServer2DSingleton[54] = classDB.get_method_bind("PhysicsServer2D\000", "body_clear_shapes\000", 2722037293)
		methodPhysicsServer2DSingleton[55] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_shape_disabled\000", 2658558584)
		methodPhysicsServer2DSingleton[56] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_shape_as_one_way_collision\000", 2556489974)
		methodPhysicsServer2DSingleton[57] = classDB.get_method_bind("PhysicsServer2D\000", "body_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer2DSingleton[58] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_object_instance_id\000", 2198884583)
		methodPhysicsServer2DSingleton[59] = classDB.get_method_bind("PhysicsServer2D\000", "body_attach_canvas_instance_id\000", 3411492887)
		methodPhysicsServer2DSingleton[60] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_canvas_instance_id\000", 2198884583)
		methodPhysicsServer2DSingleton[61] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_continuous_collision_detection_mode\000", 1882257015)
		methodPhysicsServer2DSingleton[62] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_continuous_collision_detection_mode\000", 2661282217)
		methodPhysicsServer2DSingleton[63] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_collision_layer\000", 3411492887)
		methodPhysicsServer2DSingleton[64] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_collision_layer\000", 2198884583)
		methodPhysicsServer2DSingleton[65] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_collision_mask\000", 3411492887)
		methodPhysicsServer2DSingleton[66] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_collision_mask\000", 2198884583)
		methodPhysicsServer2DSingleton[67] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_collision_priority\000", 1794382983)
		methodPhysicsServer2DSingleton[68] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_collision_priority\000", 866169185)
		methodPhysicsServer2DSingleton[69] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_param\000", 2715630609)
		methodPhysicsServer2DSingleton[70] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_param\000", 3208033526)
		methodPhysicsServer2DSingleton[71] = classDB.get_method_bind("PhysicsServer2D\000", "body_reset_mass_properties\000", 2722037293)
		methodPhysicsServer2DSingleton[72] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_state\000", 1706355209)
		methodPhysicsServer2DSingleton[73] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_state\000", 4036367961)
		methodPhysicsServer2DSingleton[74] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_central_impulse\000", 3201125042)
		methodPhysicsServer2DSingleton[75] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_torque_impulse\000", 1794382983)
		methodPhysicsServer2DSingleton[76] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_impulse\000", 34330743)
		methodPhysicsServer2DSingleton[77] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_central_force\000", 3201125042)
		methodPhysicsServer2DSingleton[78] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_force\000", 34330743)
		methodPhysicsServer2DSingleton[79] = classDB.get_method_bind("PhysicsServer2D\000", "body_apply_torque\000", 1794382983)
		methodPhysicsServer2DSingleton[80] = classDB.get_method_bind("PhysicsServer2D\000", "body_add_constant_central_force\000", 3201125042)
		methodPhysicsServer2DSingleton[81] = classDB.get_method_bind("PhysicsServer2D\000", "body_add_constant_force\000", 34330743)
		methodPhysicsServer2DSingleton[82] = classDB.get_method_bind("PhysicsServer2D\000", "body_add_constant_torque\000", 1794382983)
		methodPhysicsServer2DSingleton[83] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_constant_force\000", 3201125042)
		methodPhysicsServer2DSingleton[84] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_constant_force\000", 2440833711)
		methodPhysicsServer2DSingleton[85] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_constant_torque\000", 1794382983)
		methodPhysicsServer2DSingleton[86] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_constant_torque\000", 866169185)
		methodPhysicsServer2DSingleton[87] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_axis_velocity\000", 3201125042)
		methodPhysicsServer2DSingleton[88] = classDB.get_method_bind("PhysicsServer2D\000", "body_add_collision_exception\000", 395945892)
		methodPhysicsServer2DSingleton[89] = classDB.get_method_bind("PhysicsServer2D\000", "body_remove_collision_exception\000", 395945892)
		methodPhysicsServer2DSingleton[90] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_max_contacts_reported\000", 3411492887)
		methodPhysicsServer2DSingleton[91] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_max_contacts_reported\000", 2198884583)
		methodPhysicsServer2DSingleton[92] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_omit_force_integration\000", 1265174801)
		methodPhysicsServer2DSingleton[93] = classDB.get_method_bind("PhysicsServer2D\000", "body_is_omitting_force_integration\000", 4155700596)
		methodPhysicsServer2DSingleton[94] = classDB.get_method_bind("PhysicsServer2D\000", "body_set_force_integration_callback\000", 3059434249)
		methodPhysicsServer2DSingleton[95] = classDB.get_method_bind("PhysicsServer2D\000", "body_test_motion\000", 1699844009)
		methodPhysicsServer2DSingleton[96] = classDB.get_method_bind("PhysicsServer2D\000", "body_get_direct_state\000", 1191931871)
		methodPhysicsServer2DSingleton[97] = classDB.get_method_bind("PhysicsServer2D\000", "joint_create\000", 529393457)
		methodPhysicsServer2DSingleton[98] = classDB.get_method_bind("PhysicsServer2D\000", "joint_clear\000", 2722037293)
		methodPhysicsServer2DSingleton[99] = classDB.get_method_bind("PhysicsServer2D\000", "joint_set_param\000", 3972556514)
		methodPhysicsServer2DSingleton[100] = classDB.get_method_bind("PhysicsServer2D\000", "joint_get_param\000", 4016448949)
		methodPhysicsServer2DSingleton[101] = classDB.get_method_bind("PhysicsServer2D\000", "joint_make_pin\000", 2288600450)
		methodPhysicsServer2DSingleton[102] = classDB.get_method_bind("PhysicsServer2D\000", "joint_make_groove\000", 3573265764)
		methodPhysicsServer2DSingleton[103] = classDB.get_method_bind("PhysicsServer2D\000", "joint_make_damped_spring\000", 206603952)
		methodPhysicsServer2DSingleton[104] = classDB.get_method_bind("PhysicsServer2D\000", "damped_spring_joint_set_param\000", 220564071)
		methodPhysicsServer2DSingleton[105] = classDB.get_method_bind("PhysicsServer2D\000", "damped_spring_joint_get_param\000", 2075871277)
		methodPhysicsServer2DSingleton[106] = classDB.get_method_bind("PhysicsServer2D\000", "joint_get_type\000", 4262502231)
		methodPhysicsServer2DSingleton[107] = classDB.get_method_bind("PhysicsServer2D\000", "free_rid\000", 2722037293)
		methodPhysicsServer2DSingleton[108] = classDB.get_method_bind("PhysicsServer2D\000", "set_active\000", 2586408642)
		methodPhysicsServer2DSingleton[109] = classDB.get_method_bind("PhysicsServer2D\000", "get_process_info\000", 576496006)
		methodPhysicsServer3DSingleton[0] = classDB.get_method_bind("PhysicsServer3D\000", "world_boundary_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[1] = classDB.get_method_bind("PhysicsServer3D\000", "separation_ray_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[2] = classDB.get_method_bind("PhysicsServer3D\000", "sphere_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[3] = classDB.get_method_bind("PhysicsServer3D\000", "box_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[4] = classDB.get_method_bind("PhysicsServer3D\000", "capsule_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[5] = classDB.get_method_bind("PhysicsServer3D\000", "cylinder_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[6] = classDB.get_method_bind("PhysicsServer3D\000", "convex_polygon_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[7] = classDB.get_method_bind("PhysicsServer3D\000", "concave_polygon_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[8] = classDB.get_method_bind("PhysicsServer3D\000", "heightmap_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[9] = classDB.get_method_bind("PhysicsServer3D\000", "custom_shape_create\000", 529393457)
		methodPhysicsServer3DSingleton[10] = classDB.get_method_bind("PhysicsServer3D\000", "shape_set_data\000", 3175752987)
		methodPhysicsServer3DSingleton[11] = classDB.get_method_bind("PhysicsServer3D\000", "shape_get_type\000", 3418923367)
		methodPhysicsServer3DSingleton[12] = classDB.get_method_bind("PhysicsServer3D\000", "shape_get_data\000", 4171304767)
		methodPhysicsServer3DSingleton[13] = classDB.get_method_bind("PhysicsServer3D\000", "space_create\000", 529393457)
		methodPhysicsServer3DSingleton[14] = classDB.get_method_bind("PhysicsServer3D\000", "space_set_active\000", 1265174801)
		methodPhysicsServer3DSingleton[15] = classDB.get_method_bind("PhysicsServer3D\000", "space_is_active\000", 4155700596)
		methodPhysicsServer3DSingleton[16] = classDB.get_method_bind("PhysicsServer3D\000", "space_set_param\000", 2406017470)
		methodPhysicsServer3DSingleton[17] = classDB.get_method_bind("PhysicsServer3D\000", "space_get_param\000", 1523206731)
		methodPhysicsServer3DSingleton[18] = classDB.get_method_bind("PhysicsServer3D\000", "space_get_direct_state\000", 2048616813)
		methodPhysicsServer3DSingleton[19] = classDB.get_method_bind("PhysicsServer3D\000", "area_create\000", 529393457)
		methodPhysicsServer3DSingleton[20] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_space\000", 395945892)
		methodPhysicsServer3DSingleton[21] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_space\000", 3814569979)
		methodPhysicsServer3DSingleton[22] = classDB.get_method_bind("PhysicsServer3D\000", "area_add_shape\000", 4040559639)
		methodPhysicsServer3DSingleton[23] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_shape\000", 2310537182)
		methodPhysicsServer3DSingleton[24] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_shape_transform\000", 675327471)
		methodPhysicsServer3DSingleton[25] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_shape_disabled\000", 2658558584)
		methodPhysicsServer3DSingleton[26] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_shape_count\000", 2198884583)
		methodPhysicsServer3DSingleton[27] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_shape\000", 1066463050)
		methodPhysicsServer3DSingleton[28] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_shape_transform\000", 1050775521)
		methodPhysicsServer3DSingleton[29] = classDB.get_method_bind("PhysicsServer3D\000", "area_remove_shape\000", 3411492887)
		methodPhysicsServer3DSingleton[30] = classDB.get_method_bind("PhysicsServer3D\000", "area_clear_shapes\000", 2722037293)
		methodPhysicsServer3DSingleton[31] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_collision_layer\000", 3411492887)
		methodPhysicsServer3DSingleton[32] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_collision_mask\000", 3411492887)
		methodPhysicsServer3DSingleton[33] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_param\000", 2980114638)
		methodPhysicsServer3DSingleton[34] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_transform\000", 3935195649)
		methodPhysicsServer3DSingleton[35] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_param\000", 890056067)
		methodPhysicsServer3DSingleton[36] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_transform\000", 1128465797)
		methodPhysicsServer3DSingleton[37] = classDB.get_method_bind("PhysicsServer3D\000", "area_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer3DSingleton[38] = classDB.get_method_bind("PhysicsServer3D\000", "area_get_object_instance_id\000", 2198884583)
		methodPhysicsServer3DSingleton[39] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_monitor_callback\000", 3379118538)
		methodPhysicsServer3DSingleton[40] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_area_monitor_callback\000", 3379118538)
		methodPhysicsServer3DSingleton[41] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_monitorable\000", 1265174801)
		methodPhysicsServer3DSingleton[42] = classDB.get_method_bind("PhysicsServer3D\000", "area_set_ray_pickable\000", 1265174801)
		methodPhysicsServer3DSingleton[43] = classDB.get_method_bind("PhysicsServer3D\000", "body_create\000", 529393457)
		methodPhysicsServer3DSingleton[44] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_space\000", 395945892)
		methodPhysicsServer3DSingleton[45] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_space\000", 3814569979)
		methodPhysicsServer3DSingleton[46] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_mode\000", 606803466)
		methodPhysicsServer3DSingleton[47] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_mode\000", 2488819728)
		methodPhysicsServer3DSingleton[48] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_collision_layer\000", 3411492887)
		methodPhysicsServer3DSingleton[49] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_collision_layer\000", 2198884583)
		methodPhysicsServer3DSingleton[50] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_collision_mask\000", 3411492887)
		methodPhysicsServer3DSingleton[51] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_collision_mask\000", 2198884583)
		methodPhysicsServer3DSingleton[52] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_collision_priority\000", 1794382983)
		methodPhysicsServer3DSingleton[53] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_collision_priority\000", 866169185)
		methodPhysicsServer3DSingleton[54] = classDB.get_method_bind("PhysicsServer3D\000", "body_add_shape\000", 4040559639)
		methodPhysicsServer3DSingleton[55] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_shape\000", 2310537182)
		methodPhysicsServer3DSingleton[56] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_shape_transform\000", 675327471)
		methodPhysicsServer3DSingleton[57] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_shape_disabled\000", 2658558584)
		methodPhysicsServer3DSingleton[58] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_shape_count\000", 2198884583)
		methodPhysicsServer3DSingleton[59] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_shape\000", 1066463050)
		methodPhysicsServer3DSingleton[60] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_shape_transform\000", 1050775521)
		methodPhysicsServer3DSingleton[61] = classDB.get_method_bind("PhysicsServer3D\000", "body_remove_shape\000", 3411492887)
		methodPhysicsServer3DSingleton[62] = classDB.get_method_bind("PhysicsServer3D\000", "body_clear_shapes\000", 2722037293)
		methodPhysicsServer3DSingleton[63] = classDB.get_method_bind("PhysicsServer3D\000", "body_attach_object_instance_id\000", 3411492887)
		methodPhysicsServer3DSingleton[64] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_object_instance_id\000", 2198884583)
		methodPhysicsServer3DSingleton[65] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_enable_continuous_collision_detection\000", 1265174801)
		methodPhysicsServer3DSingleton[66] = classDB.get_method_bind("PhysicsServer3D\000", "body_is_continuous_collision_detection_enabled\000", 4155700596)
		methodPhysicsServer3DSingleton[67] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_param\000", 910941953)
		methodPhysicsServer3DSingleton[68] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_param\000", 3385027841)
		methodPhysicsServer3DSingleton[69] = classDB.get_method_bind("PhysicsServer3D\000", "body_reset_mass_properties\000", 2722037293)
		methodPhysicsServer3DSingleton[70] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_state\000", 599977762)
		methodPhysicsServer3DSingleton[71] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_state\000", 1850449534)
		methodPhysicsServer3DSingleton[72] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_central_impulse\000", 3227306858)
		methodPhysicsServer3DSingleton[73] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_impulse\000", 110375048)
		methodPhysicsServer3DSingleton[74] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_torque_impulse\000", 3227306858)
		methodPhysicsServer3DSingleton[75] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_central_force\000", 3227306858)
		methodPhysicsServer3DSingleton[76] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_force\000", 110375048)
		methodPhysicsServer3DSingleton[77] = classDB.get_method_bind("PhysicsServer3D\000", "body_apply_torque\000", 3227306858)
		methodPhysicsServer3DSingleton[78] = classDB.get_method_bind("PhysicsServer3D\000", "body_add_constant_central_force\000", 3227306858)
		methodPhysicsServer3DSingleton[79] = classDB.get_method_bind("PhysicsServer3D\000", "body_add_constant_force\000", 110375048)
		methodPhysicsServer3DSingleton[80] = classDB.get_method_bind("PhysicsServer3D\000", "body_add_constant_torque\000", 3227306858)
		methodPhysicsServer3DSingleton[81] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_constant_force\000", 3227306858)
		methodPhysicsServer3DSingleton[82] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_constant_force\000", 531438156)
		methodPhysicsServer3DSingleton[83] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_constant_torque\000", 3227306858)
		methodPhysicsServer3DSingleton[84] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_constant_torque\000", 531438156)
		methodPhysicsServer3DSingleton[85] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_axis_velocity\000", 3227306858)
		methodPhysicsServer3DSingleton[86] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_axis_lock\000", 2020836892)
		methodPhysicsServer3DSingleton[87] = classDB.get_method_bind("PhysicsServer3D\000", "body_is_axis_locked\000", 587853580)
		methodPhysicsServer3DSingleton[88] = classDB.get_method_bind("PhysicsServer3D\000", "body_add_collision_exception\000", 395945892)
		methodPhysicsServer3DSingleton[89] = classDB.get_method_bind("PhysicsServer3D\000", "body_remove_collision_exception\000", 395945892)
		methodPhysicsServer3DSingleton[90] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_max_contacts_reported\000", 3411492887)
		methodPhysicsServer3DSingleton[91] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_max_contacts_reported\000", 2198884583)
		methodPhysicsServer3DSingleton[92] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_omit_force_integration\000", 1265174801)
		methodPhysicsServer3DSingleton[93] = classDB.get_method_bind("PhysicsServer3D\000", "body_is_omitting_force_integration\000", 4155700596)
		methodPhysicsServer3DSingleton[94] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_force_integration_callback\000", 3059434249)
		methodPhysicsServer3DSingleton[95] = classDB.get_method_bind("PhysicsServer3D\000", "body_set_ray_pickable\000", 1265174801)
		methodPhysicsServer3DSingleton[96] = classDB.get_method_bind("PhysicsServer3D\000", "body_test_motion\000", 1944921792)
		methodPhysicsServer3DSingleton[97] = classDB.get_method_bind("PhysicsServer3D\000", "body_get_direct_state\000", 3029727957)
		methodPhysicsServer3DSingleton[98] = classDB.get_method_bind("PhysicsServer3D\000", "soft_body_get_bounds\000", 974181306)
		methodPhysicsServer3DSingleton[99] = classDB.get_method_bind("PhysicsServer3D\000", "joint_create\000", 529393457)
		methodPhysicsServer3DSingleton[100] = classDB.get_method_bind("PhysicsServer3D\000", "joint_clear\000", 2722037293)
		methodPhysicsServer3DSingleton[101] = classDB.get_method_bind("PhysicsServer3D\000", "joint_make_pin\000", 4280171926)
		methodPhysicsServer3DSingleton[102] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_set_param\000", 810685294)
		methodPhysicsServer3DSingleton[103] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_get_param\000", 2817972347)
		methodPhysicsServer3DSingleton[104] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_set_local_a\000", 3227306858)
		methodPhysicsServer3DSingleton[105] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_get_local_a\000", 531438156)
		methodPhysicsServer3DSingleton[106] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_set_local_b\000", 3227306858)
		methodPhysicsServer3DSingleton[107] = classDB.get_method_bind("PhysicsServer3D\000", "pin_joint_get_local_b\000", 531438156)
		methodPhysicsServer3DSingleton[108] = classDB.get_method_bind("PhysicsServer3D\000", "joint_make_hinge\000", 1684107643)
		methodPhysicsServer3DSingleton[109] = classDB.get_method_bind("PhysicsServer3D\000", "hinge_joint_set_param\000", 3165502333)
		methodPhysicsServer3DSingleton[110] = classDB.get_method_bind("PhysicsServer3D\000", "hinge_joint_get_param\000", 2129207581)
		methodPhysicsServer3DSingleton[111] = classDB.get_method_bind("PhysicsServer3D\000", "hinge_joint_set_flag\000", 1601626188)
		methodPhysicsServer3DSingleton[112] = classDB.get_method_bind("PhysicsServer3D\000", "hinge_joint_get_flag\000", 4165147865)
		methodPhysicsServer3DSingleton[113] = classDB.get_method_bind("PhysicsServer3D\000", "joint_make_slider\000", 1684107643)
		methodPhysicsServer3DSingleton[114] = classDB.get_method_bind("PhysicsServer3D\000", "slider_joint_set_param\000", 2264833593)
		methodPhysicsServer3DSingleton[115] = classDB.get_method_bind("PhysicsServer3D\000", "slider_joint_get_param\000", 3498644957)
		methodPhysicsServer3DSingleton[116] = classDB.get_method_bind("PhysicsServer3D\000", "joint_make_cone_twist\000", 1684107643)
		methodPhysicsServer3DSingleton[117] = classDB.get_method_bind("PhysicsServer3D\000", "cone_twist_joint_set_param\000", 808587618)
		methodPhysicsServer3DSingleton[118] = classDB.get_method_bind("PhysicsServer3D\000", "cone_twist_joint_get_param\000", 1134789658)
		methodPhysicsServer3DSingleton[119] = classDB.get_method_bind("PhysicsServer3D\000", "joint_get_type\000", 4290791900)
		methodPhysicsServer3DSingleton[120] = classDB.get_method_bind("PhysicsServer3D\000", "joint_set_solver_priority\000", 3411492887)
		methodPhysicsServer3DSingleton[121] = classDB.get_method_bind("PhysicsServer3D\000", "joint_get_solver_priority\000", 2198884583)
		methodPhysicsServer3DSingleton[122] = classDB.get_method_bind("PhysicsServer3D\000", "joint_make_generic_6dof\000", 1684107643)
		methodPhysicsServer3DSingleton[123] = classDB.get_method_bind("PhysicsServer3D\000", "generic_6dof_joint_set_param\000", 2600081391)
		methodPhysicsServer3DSingleton[124] = classDB.get_method_bind("PhysicsServer3D\000", "generic_6dof_joint_get_param\000", 467122058)
		methodPhysicsServer3DSingleton[125] = classDB.get_method_bind("PhysicsServer3D\000", "generic_6dof_joint_set_flag\000", 3570926903)
		methodPhysicsServer3DSingleton[126] = classDB.get_method_bind("PhysicsServer3D\000", "generic_6dof_joint_get_flag\000", 4158090196)
		methodPhysicsServer3DSingleton[127] = classDB.get_method_bind("PhysicsServer3D\000", "free_rid\000", 2722037293)
		methodPhysicsServer3DSingleton[128] = classDB.get_method_bind("PhysicsServer3D\000", "set_active\000", 2586408642)
		methodPhysicsServer3DSingleton[129] = classDB.get_method_bind("PhysicsServer3D\000", "get_process_info\000", 1332958745)
		methodPhysicsShapeQueryParameters2D[0] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_shape\000", 968641751)
		methodPhysicsShapeQueryParameters2D[1] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_shape\000", 121922552)
		methodPhysicsShapeQueryParameters2D[2] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_shape_rid\000", 2722037293)
		methodPhysicsShapeQueryParameters2D[3] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_shape_rid\000", 2944877500)
		methodPhysicsShapeQueryParameters2D[4] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_transform\000", 2761652528)
		methodPhysicsShapeQueryParameters2D[5] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_transform\000", 3814499831)
		methodPhysicsShapeQueryParameters2D[6] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_motion\000", 743155724)
		methodPhysicsShapeQueryParameters2D[7] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_motion\000", 3341600327)
		methodPhysicsShapeQueryParameters2D[8] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_margin\000", 373806689)
		methodPhysicsShapeQueryParameters2D[9] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_margin\000", 1740695150)
		methodPhysicsShapeQueryParameters2D[10] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsShapeQueryParameters2D[11] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsShapeQueryParameters2D[12] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_exclude\000", 381264803)
		methodPhysicsShapeQueryParameters2D[13] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "get_exclude\000", 3995934104)
		methodPhysicsShapeQueryParameters2D[14] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsShapeQueryParameters2D[15] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters2D[16] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsShapeQueryParameters2D[17] = classDB.get_method_bind("PhysicsShapeQueryParameters2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters3D[0] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_shape\000", 968641751)
		methodPhysicsShapeQueryParameters3D[1] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_shape\000", 121922552)
		methodPhysicsShapeQueryParameters3D[2] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_shape_rid\000", 2722037293)
		methodPhysicsShapeQueryParameters3D[3] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_shape_rid\000", 2944877500)
		methodPhysicsShapeQueryParameters3D[4] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_transform\000", 2952846383)
		methodPhysicsShapeQueryParameters3D[5] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_transform\000", 3229777777)
		methodPhysicsShapeQueryParameters3D[6] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_motion\000", 3460891852)
		methodPhysicsShapeQueryParameters3D[7] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_motion\000", 3360562783)
		methodPhysicsShapeQueryParameters3D[8] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_margin\000", 373806689)
		methodPhysicsShapeQueryParameters3D[9] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_margin\000", 1740695150)
		methodPhysicsShapeQueryParameters3D[10] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_collision_mask\000", 1286410249)
		methodPhysicsShapeQueryParameters3D[11] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_collision_mask\000", 3905245786)
		methodPhysicsShapeQueryParameters3D[12] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_exclude\000", 381264803)
		methodPhysicsShapeQueryParameters3D[13] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "get_exclude\000", 3995934104)
		methodPhysicsShapeQueryParameters3D[14] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_collide_with_bodies\000", 2586408642)
		methodPhysicsShapeQueryParameters3D[15] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodPhysicsShapeQueryParameters3D[16] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "set_collide_with_areas\000", 2586408642)
		methodPhysicsShapeQueryParameters3D[17] = classDB.get_method_bind("PhysicsShapeQueryParameters3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[0] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "get_from\000", 3814499831)
		methodPhysicsTestMotionParameters2D[1] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_from\000", 2761652528)
		methodPhysicsTestMotionParameters2D[2] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "get_motion\000", 3341600327)
		methodPhysicsTestMotionParameters2D[3] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_motion\000", 743155724)
		methodPhysicsTestMotionParameters2D[4] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "get_margin\000", 1740695150)
		methodPhysicsTestMotionParameters2D[5] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_margin\000", 373806689)
		methodPhysicsTestMotionParameters2D[6] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "is_collide_separation_ray_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[7] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_collide_separation_ray_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters2D[8] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "get_exclude_bodies\000", 3995934104)
		methodPhysicsTestMotionParameters2D[9] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_exclude_bodies\000", 381264803)
		methodPhysicsTestMotionParameters2D[10] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "get_exclude_objects\000", 3995934104)
		methodPhysicsTestMotionParameters2D[11] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_exclude_objects\000", 381264803)
		methodPhysicsTestMotionParameters2D[12] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "is_recovery_as_collision_enabled\000", 36873697)
		methodPhysicsTestMotionParameters2D[13] = classDB.get_method_bind("PhysicsTestMotionParameters2D\000", "set_recovery_as_collision_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters3D[0] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_from\000", 3229777777)
		methodPhysicsTestMotionParameters3D[1] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_from\000", 2952846383)
		methodPhysicsTestMotionParameters3D[2] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_motion\000", 3360562783)
		methodPhysicsTestMotionParameters3D[3] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_motion\000", 3460891852)
		methodPhysicsTestMotionParameters3D[4] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_margin\000", 1740695150)
		methodPhysicsTestMotionParameters3D[5] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_margin\000", 373806689)
		methodPhysicsTestMotionParameters3D[6] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_max_collisions\000", 3905245786)
		methodPhysicsTestMotionParameters3D[7] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_max_collisions\000", 1286410249)
		methodPhysicsTestMotionParameters3D[8] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "is_collide_separation_ray_enabled\000", 36873697)
		methodPhysicsTestMotionParameters3D[9] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_collide_separation_ray_enabled\000", 2586408642)
		methodPhysicsTestMotionParameters3D[10] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_exclude_bodies\000", 3995934104)
		methodPhysicsTestMotionParameters3D[11] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_exclude_bodies\000", 381264803)
		methodPhysicsTestMotionParameters3D[12] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "get_exclude_objects\000", 3995934104)
		methodPhysicsTestMotionParameters3D[13] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_exclude_objects\000", 381264803)
		methodPhysicsTestMotionParameters3D[14] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "is_recovery_as_collision_enabled\000", 36873697)
		methodPhysicsTestMotionParameters3D[15] = classDB.get_method_bind("PhysicsTestMotionParameters3D\000", "set_recovery_as_collision_enabled\000", 2586408642)
		methodPhysicsTestMotionResult2D[0] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_travel\000", 3341600327)
		methodPhysicsTestMotionResult2D[1] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_remainder\000", 3341600327)
		methodPhysicsTestMotionResult2D[2] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_point\000", 3341600327)
		methodPhysicsTestMotionResult2D[3] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_normal\000", 3341600327)
		methodPhysicsTestMotionResult2D[4] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collider_velocity\000", 3341600327)
		methodPhysicsTestMotionResult2D[5] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collider_id\000", 3905245786)
		methodPhysicsTestMotionResult2D[6] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collider_rid\000", 2944877500)
		methodPhysicsTestMotionResult2D[7] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collider\000", 1981248198)
		methodPhysicsTestMotionResult2D[8] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collider_shape\000", 3905245786)
		methodPhysicsTestMotionResult2D[9] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_local_shape\000", 3905245786)
		methodPhysicsTestMotionResult2D[10] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_depth\000", 1740695150)
		methodPhysicsTestMotionResult2D[11] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_safe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult2D[12] = classDB.get_method_bind("PhysicsTestMotionResult2D\000", "get_collision_unsafe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[0] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_travel\000", 3360562783)
		methodPhysicsTestMotionResult3D[1] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_remainder\000", 3360562783)
		methodPhysicsTestMotionResult3D[2] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_safe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[3] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_unsafe_fraction\000", 1740695150)
		methodPhysicsTestMotionResult3D[4] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_count\000", 3905245786)
		methodPhysicsTestMotionResult3D[5] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_point\000", 1914908202)
		methodPhysicsTestMotionResult3D[6] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_normal\000", 1914908202)
		methodPhysicsTestMotionResult3D[7] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collider_velocity\000", 1914908202)
		methodPhysicsTestMotionResult3D[8] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collider_id\000", 1591665591)
		methodPhysicsTestMotionResult3D[9] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collider_rid\000", 1231817359)
		methodPhysicsTestMotionResult3D[10] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collider\000", 2639523548)
		methodPhysicsTestMotionResult3D[11] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collider_shape\000", 1591665591)
		methodPhysicsTestMotionResult3D[12] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_local_shape\000", 1591665591)
		methodPhysicsTestMotionResult3D[13] = classDB.get_method_bind("PhysicsTestMotionResult3D\000", "get_collision_depth\000", 218038398)
		methodPinJoint2D[0] = classDB.get_method_bind("PinJoint2D\000", "set_softness\000", 373806689)
		methodPinJoint2D[1] = classDB.get_method_bind("PinJoint2D\000", "get_softness\000", 1740695150)
		methodPinJoint3D[0] = classDB.get_method_bind("PinJoint3D\000", "set_param\000", 2059913726)
		methodPinJoint3D[1] = classDB.get_method_bind("PinJoint3D\000", "get_param\000", 1758438771)
		methodPlaceholderMesh[0] = classDB.get_method_bind("PlaceholderMesh\000", "set_aabb\000", 259215842)
		methodPlaceholderTexture2D[0] = classDB.get_method_bind("PlaceholderTexture2D\000", "set_size\000", 743155724)
		methodPlaceholderTexture3D[0] = classDB.get_method_bind("PlaceholderTexture3D\000", "set_size\000", 560364750)
		methodPlaceholderTexture3D[1] = classDB.get_method_bind("PlaceholderTexture3D\000", "get_size\000", 2785653706)
		methodPlaceholderTextureLayered[0] = classDB.get_method_bind("PlaceholderTextureLayered\000", "set_size\000", 1130785943)
		methodPlaceholderTextureLayered[1] = classDB.get_method_bind("PlaceholderTextureLayered\000", "get_size\000", 3690982128)
		methodPlaceholderTextureLayered[2] = classDB.get_method_bind("PlaceholderTextureLayered\000", "set_layers\000", 1286410249)
		methodPlaneMesh[0] = classDB.get_method_bind("PlaneMesh\000", "set_size\000", 743155724)
		methodPlaneMesh[1] = classDB.get_method_bind("PlaneMesh\000", "get_size\000", 3341600327)
		methodPlaneMesh[2] = classDB.get_method_bind("PlaneMesh\000", "set_subdivide_width\000", 1286410249)
		methodPlaneMesh[3] = classDB.get_method_bind("PlaneMesh\000", "get_subdivide_width\000", 3905245786)
		methodPlaneMesh[4] = classDB.get_method_bind("PlaneMesh\000", "set_subdivide_depth\000", 1286410249)
		methodPlaneMesh[5] = classDB.get_method_bind("PlaneMesh\000", "get_subdivide_depth\000", 3905245786)
		methodPlaneMesh[6] = classDB.get_method_bind("PlaneMesh\000", "set_center_offset\000", 3460891852)
		methodPlaneMesh[7] = classDB.get_method_bind("PlaneMesh\000", "get_center_offset\000", 3360562783)
		methodPlaneMesh[8] = classDB.get_method_bind("PlaneMesh\000", "set_orientation\000", 2751399687)
		methodPlaneMesh[9] = classDB.get_method_bind("PlaneMesh\000", "get_orientation\000", 3227599250)
		methodPointLight2D[0] = classDB.get_method_bind("PointLight2D\000", "set_texture\000", 4051416890)
		methodPointLight2D[1] = classDB.get_method_bind("PointLight2D\000", "get_texture\000", 3635182373)
		methodPointLight2D[2] = classDB.get_method_bind("PointLight2D\000", "set_texture_offset\000", 743155724)
		methodPointLight2D[3] = classDB.get_method_bind("PointLight2D\000", "get_texture_offset\000", 3341600327)
		methodPointLight2D[4] = classDB.get_method_bind("PointLight2D\000", "set_texture_scale\000", 373806689)
		methodPointLight2D[5] = classDB.get_method_bind("PointLight2D\000", "get_texture_scale\000", 1740695150)
		methodPolygon2D[0] = classDB.get_method_bind("Polygon2D\000", "set_polygon\000", 1509147220)
		methodPolygon2D[1] = classDB.get_method_bind("Polygon2D\000", "get_polygon\000", 2961356807)
		methodPolygon2D[2] = classDB.get_method_bind("Polygon2D\000", "set_uv\000", 1509147220)
		methodPolygon2D[3] = classDB.get_method_bind("Polygon2D\000", "get_uv\000", 2961356807)
		methodPolygon2D[4] = classDB.get_method_bind("Polygon2D\000", "set_color\000", 2920490490)
		methodPolygon2D[5] = classDB.get_method_bind("Polygon2D\000", "get_color\000", 3444240500)
		methodPolygon2D[6] = classDB.get_method_bind("Polygon2D\000", "set_polygons\000", 381264803)
		methodPolygon2D[7] = classDB.get_method_bind("Polygon2D\000", "get_polygons\000", 3995934104)
		methodPolygon2D[8] = classDB.get_method_bind("Polygon2D\000", "set_vertex_colors\000", 3546319833)
		methodPolygon2D[9] = classDB.get_method_bind("Polygon2D\000", "get_vertex_colors\000", 1392750486)
		methodPolygon2D[10] = classDB.get_method_bind("Polygon2D\000", "set_texture\000", 4051416890)
		methodPolygon2D[11] = classDB.get_method_bind("Polygon2D\000", "get_texture\000", 3635182373)
		methodPolygon2D[12] = classDB.get_method_bind("Polygon2D\000", "set_texture_offset\000", 743155724)
		methodPolygon2D[13] = classDB.get_method_bind("Polygon2D\000", "get_texture_offset\000", 3341600327)
		methodPolygon2D[14] = classDB.get_method_bind("Polygon2D\000", "set_texture_rotation\000", 373806689)
		methodPolygon2D[15] = classDB.get_method_bind("Polygon2D\000", "get_texture_rotation\000", 1740695150)
		methodPolygon2D[16] = classDB.get_method_bind("Polygon2D\000", "set_texture_scale\000", 743155724)
		methodPolygon2D[17] = classDB.get_method_bind("Polygon2D\000", "get_texture_scale\000", 3341600327)
		methodPolygon2D[18] = classDB.get_method_bind("Polygon2D\000", "set_invert_enabled\000", 2586408642)
		methodPolygon2D[19] = classDB.get_method_bind("Polygon2D\000", "get_invert_enabled\000", 36873697)
		methodPolygon2D[20] = classDB.get_method_bind("Polygon2D\000", "set_antialiased\000", 2586408642)
		methodPolygon2D[21] = classDB.get_method_bind("Polygon2D\000", "get_antialiased\000", 36873697)
		methodPolygon2D[22] = classDB.get_method_bind("Polygon2D\000", "set_invert_border\000", 373806689)
		methodPolygon2D[23] = classDB.get_method_bind("Polygon2D\000", "get_invert_border\000", 1740695150)
		methodPolygon2D[24] = classDB.get_method_bind("Polygon2D\000", "set_offset\000", 743155724)
		methodPolygon2D[25] = classDB.get_method_bind("Polygon2D\000", "get_offset\000", 3341600327)
		methodPolygon2D[26] = classDB.get_method_bind("Polygon2D\000", "add_bone\000", 703042815)
		methodPolygon2D[27] = classDB.get_method_bind("Polygon2D\000", "get_bone_count\000", 3905245786)
		methodPolygon2D[28] = classDB.get_method_bind("Polygon2D\000", "get_bone_path\000", 408788394)
		methodPolygon2D[29] = classDB.get_method_bind("Polygon2D\000", "get_bone_weights\000", 1542882410)
		methodPolygon2D[30] = classDB.get_method_bind("Polygon2D\000", "erase_bone\000", 1286410249)
		methodPolygon2D[31] = classDB.get_method_bind("Polygon2D\000", "clear_bones\000", 3218959716)
		methodPolygon2D[32] = classDB.get_method_bind("Polygon2D\000", "set_bone_path\000", 2761262315)
		methodPolygon2D[33] = classDB.get_method_bind("Polygon2D\000", "set_bone_weights\000", 1345852415)
		methodPolygon2D[34] = classDB.get_method_bind("Polygon2D\000", "set_skeleton\000", 1348162250)
		methodPolygon2D[35] = classDB.get_method_bind("Polygon2D\000", "get_skeleton\000", 4075236667)
		methodPolygon2D[36] = classDB.get_method_bind("Polygon2D\000", "set_internal_vertex_count\000", 1286410249)
		methodPolygon2D[37] = classDB.get_method_bind("Polygon2D\000", "get_internal_vertex_count\000", 3905245786)
		methodPolygonOccluder3D[0] = classDB.get_method_bind("PolygonOccluder3D\000", "set_polygon\000", 1509147220)
		methodPolygonOccluder3D[1] = classDB.get_method_bind("PolygonOccluder3D\000", "get_polygon\000", 2961356807)
		methodPolygonPathFinder[0] = classDB.get_method_bind("PolygonPathFinder\000", "setup\000", 3251786936)
		methodPolygonPathFinder[1] = classDB.get_method_bind("PolygonPathFinder\000", "find_path\000", 1562168077)
		methodPolygonPathFinder[2] = classDB.get_method_bind("PolygonPathFinder\000", "get_intersections\000", 3932192302)
		methodPolygonPathFinder[3] = classDB.get_method_bind("PolygonPathFinder\000", "get_closest_point\000", 2656412154)
		methodPolygonPathFinder[4] = classDB.get_method_bind("PolygonPathFinder\000", "is_point_inside\000", 556197845)
		methodPolygonPathFinder[5] = classDB.get_method_bind("PolygonPathFinder\000", "set_point_penalty\000", 1602489585)
		methodPolygonPathFinder[6] = classDB.get_method_bind("PolygonPathFinder\000", "get_point_penalty\000", 2339986948)
		methodPolygonPathFinder[7] = classDB.get_method_bind("PolygonPathFinder\000", "get_bounds\000", 1639390495)
		methodPopupMenu[0] = classDB.get_method_bind("PopupMenu\000", "add_item\000", 3224536192)
		methodPopupMenu[1] = classDB.get_method_bind("PopupMenu\000", "add_icon_item\000", 1200674553)
		methodPopupMenu[2] = classDB.get_method_bind("PopupMenu\000", "add_check_item\000", 3224536192)
		methodPopupMenu[3] = classDB.get_method_bind("PopupMenu\000", "add_icon_check_item\000", 1200674553)
		methodPopupMenu[4] = classDB.get_method_bind("PopupMenu\000", "add_radio_check_item\000", 3224536192)
		methodPopupMenu[5] = classDB.get_method_bind("PopupMenu\000", "add_icon_radio_check_item\000", 1200674553)
		methodPopupMenu[6] = classDB.get_method_bind("PopupMenu\000", "add_multistate_item\000", 1585218420)
		methodPopupMenu[7] = classDB.get_method_bind("PopupMenu\000", "add_shortcut\000", 2168272394)
		methodPopupMenu[8] = classDB.get_method_bind("PopupMenu\000", "add_icon_shortcut\000", 68101841)
		methodPopupMenu[9] = classDB.get_method_bind("PopupMenu\000", "add_check_shortcut\000", 2168272394)
		methodPopupMenu[10] = classDB.get_method_bind("PopupMenu\000", "add_icon_check_shortcut\000", 68101841)
		methodPopupMenu[11] = classDB.get_method_bind("PopupMenu\000", "add_radio_check_shortcut\000", 2168272394)
		methodPopupMenu[12] = classDB.get_method_bind("PopupMenu\000", "add_icon_radio_check_shortcut\000", 68101841)
		methodPopupMenu[13] = classDB.get_method_bind("PopupMenu\000", "add_submenu_item\000", 3728518296)
		methodPopupMenu[14] = classDB.get_method_bind("PopupMenu\000", "set_item_text\000", 501894301)
		methodPopupMenu[15] = classDB.get_method_bind("PopupMenu\000", "set_item_text_direction\000", 1707680378)
		methodPopupMenu[16] = classDB.get_method_bind("PopupMenu\000", "set_item_language\000", 501894301)
		methodPopupMenu[17] = classDB.get_method_bind("PopupMenu\000", "set_item_icon\000", 666127730)
		methodPopupMenu[18] = classDB.get_method_bind("PopupMenu\000", "set_item_checked\000", 300928843)
		methodPopupMenu[19] = classDB.get_method_bind("PopupMenu\000", "set_item_id\000", 3937882851)
		methodPopupMenu[20] = classDB.get_method_bind("PopupMenu\000", "set_item_accelerator\000", 2992817551)
		methodPopupMenu[21] = classDB.get_method_bind("PopupMenu\000", "set_item_metadata\000", 2152698145)
		methodPopupMenu[22] = classDB.get_method_bind("PopupMenu\000", "set_item_disabled\000", 300928843)
		methodPopupMenu[23] = classDB.get_method_bind("PopupMenu\000", "set_item_submenu\000", 501894301)
		methodPopupMenu[24] = classDB.get_method_bind("PopupMenu\000", "set_item_as_separator\000", 300928843)
		methodPopupMenu[25] = classDB.get_method_bind("PopupMenu\000", "set_item_as_checkable\000", 300928843)
		methodPopupMenu[26] = classDB.get_method_bind("PopupMenu\000", "set_item_as_radio_checkable\000", 300928843)
		methodPopupMenu[27] = classDB.get_method_bind("PopupMenu\000", "set_item_tooltip\000", 501894301)
		methodPopupMenu[28] = classDB.get_method_bind("PopupMenu\000", "set_item_shortcut\000", 825127832)
		methodPopupMenu[29] = classDB.get_method_bind("PopupMenu\000", "set_item_indent\000", 3937882851)
		methodPopupMenu[30] = classDB.get_method_bind("PopupMenu\000", "set_item_multistate\000", 3937882851)
		methodPopupMenu[31] = classDB.get_method_bind("PopupMenu\000", "set_item_shortcut_disabled\000", 300928843)
		methodPopupMenu[32] = classDB.get_method_bind("PopupMenu\000", "toggle_item_checked\000", 1286410249)
		methodPopupMenu[33] = classDB.get_method_bind("PopupMenu\000", "toggle_item_multistate\000", 1286410249)
		methodPopupMenu[34] = classDB.get_method_bind("PopupMenu\000", "get_item_text\000", 844755477)
		methodPopupMenu[35] = classDB.get_method_bind("PopupMenu\000", "get_item_text_direction\000", 4235602388)
		methodPopupMenu[36] = classDB.get_method_bind("PopupMenu\000", "get_item_language\000", 844755477)
		methodPopupMenu[37] = classDB.get_method_bind("PopupMenu\000", "get_item_icon\000", 3536238170)
		methodPopupMenu[38] = classDB.get_method_bind("PopupMenu\000", "is_item_checked\000", 1116898809)
		methodPopupMenu[39] = classDB.get_method_bind("PopupMenu\000", "get_item_id\000", 923996154)
		methodPopupMenu[40] = classDB.get_method_bind("PopupMenu\000", "get_item_index\000", 923996154)
		methodPopupMenu[41] = classDB.get_method_bind("PopupMenu\000", "get_item_accelerator\000", 253789942)
		methodPopupMenu[42] = classDB.get_method_bind("PopupMenu\000", "get_item_metadata\000", 4227898402)
		methodPopupMenu[43] = classDB.get_method_bind("PopupMenu\000", "is_item_disabled\000", 1116898809)
		methodPopupMenu[44] = classDB.get_method_bind("PopupMenu\000", "get_item_submenu\000", 844755477)
		methodPopupMenu[45] = classDB.get_method_bind("PopupMenu\000", "is_item_separator\000", 1116898809)
		methodPopupMenu[46] = classDB.get_method_bind("PopupMenu\000", "is_item_checkable\000", 1116898809)
		methodPopupMenu[47] = classDB.get_method_bind("PopupMenu\000", "is_item_radio_checkable\000", 1116898809)
		methodPopupMenu[48] = classDB.get_method_bind("PopupMenu\000", "is_item_shortcut_disabled\000", 1116898809)
		methodPopupMenu[49] = classDB.get_method_bind("PopupMenu\000", "get_item_tooltip\000", 844755477)
		methodPopupMenu[50] = classDB.get_method_bind("PopupMenu\000", "get_item_shortcut\000", 1449483325)
		methodPopupMenu[51] = classDB.get_method_bind("PopupMenu\000", "get_item_indent\000", 923996154)
		methodPopupMenu[52] = classDB.get_method_bind("PopupMenu\000", "set_current_index\000", 1286410249)
		methodPopupMenu[53] = classDB.get_method_bind("PopupMenu\000", "get_current_index\000", 3905245786)
		methodPopupMenu[54] = classDB.get_method_bind("PopupMenu\000", "set_item_count\000", 1286410249)
		methodPopupMenu[55] = classDB.get_method_bind("PopupMenu\000", "get_item_count\000", 3905245786)
		methodPopupMenu[56] = classDB.get_method_bind("PopupMenu\000", "scroll_to_item\000", 1286410249)
		methodPopupMenu[57] = classDB.get_method_bind("PopupMenu\000", "remove_item\000", 1286410249)
		methodPopupMenu[58] = classDB.get_method_bind("PopupMenu\000", "add_separator\000", 2266703459)
		methodPopupMenu[59] = classDB.get_method_bind("PopupMenu\000", "clear\000", 3218959716)
		methodPopupMenu[60] = classDB.get_method_bind("PopupMenu\000", "set_hide_on_item_selection\000", 2586408642)
		methodPopupMenu[61] = classDB.get_method_bind("PopupMenu\000", "is_hide_on_item_selection\000", 36873697)
		methodPopupMenu[62] = classDB.get_method_bind("PopupMenu\000", "set_hide_on_checkable_item_selection\000", 2586408642)
		methodPopupMenu[63] = classDB.get_method_bind("PopupMenu\000", "is_hide_on_checkable_item_selection\000", 36873697)
		methodPopupMenu[64] = classDB.get_method_bind("PopupMenu\000", "set_hide_on_state_item_selection\000", 2586408642)
		methodPopupMenu[65] = classDB.get_method_bind("PopupMenu\000", "is_hide_on_state_item_selection\000", 36873697)
		methodPopupMenu[66] = classDB.get_method_bind("PopupMenu\000", "set_submenu_popup_delay\000", 373806689)
		methodPopupMenu[67] = classDB.get_method_bind("PopupMenu\000", "get_submenu_popup_delay\000", 1740695150)
		methodPopupMenu[68] = classDB.get_method_bind("PopupMenu\000", "set_allow_search\000", 2586408642)
		methodPopupMenu[69] = classDB.get_method_bind("PopupMenu\000", "get_allow_search\000", 36873697)
		methodPortableCompressedTexture2D[0] = classDB.get_method_bind("PortableCompressedTexture2D\000", "create_from_image\000", 97251393)
		methodPortableCompressedTexture2D[1] = classDB.get_method_bind("PortableCompressedTexture2D\000", "get_format\000", 3847873762)
		methodPortableCompressedTexture2D[2] = classDB.get_method_bind("PortableCompressedTexture2D\000", "get_compression_mode\000", 3265612739)
		methodPortableCompressedTexture2D[3] = classDB.get_method_bind("PortableCompressedTexture2D\000", "set_size_override\000", 743155724)
		methodPortableCompressedTexture2D[4] = classDB.get_method_bind("PortableCompressedTexture2D\000", "get_size_override\000", 3341600327)
		methodPortableCompressedTexture2D[5] = classDB.get_method_bind("PortableCompressedTexture2D\000", "set_keep_compressed_buffer\000", 2586408642)
		methodPortableCompressedTexture2D[6] = classDB.get_method_bind("PortableCompressedTexture2D\000", "is_keeping_compressed_buffer\000", 36873697)
		methodPortableCompressedTexture2D[7] = classDB.get_method_bind("PortableCompressedTexture2D\000", "set_keep_all_compressed_buffers\000", 2586408642)
		methodPortableCompressedTexture2D[8] = classDB.get_method_bind("PortableCompressedTexture2D\000", "is_keeping_all_compressed_buffers\000", 2240911060)
		methodPrimitiveMesh[0] = classDB.get_method_bind("PrimitiveMesh\000", "set_material\000", 2757459619)
		methodPrimitiveMesh[1] = classDB.get_method_bind("PrimitiveMesh\000", "get_material\000", 5934680)
		methodPrimitiveMesh[2] = classDB.get_method_bind("PrimitiveMesh\000", "get_mesh_arrays\000", 3995934104)
		methodPrimitiveMesh[3] = classDB.get_method_bind("PrimitiveMesh\000", "set_custom_aabb\000", 259215842)
		methodPrimitiveMesh[4] = classDB.get_method_bind("PrimitiveMesh\000", "get_custom_aabb\000", 1068685055)
		methodPrimitiveMesh[5] = classDB.get_method_bind("PrimitiveMesh\000", "set_flip_faces\000", 2586408642)
		methodPrimitiveMesh[6] = classDB.get_method_bind("PrimitiveMesh\000", "get_flip_faces\000", 36873697)
		methodPrismMesh[0] = classDB.get_method_bind("PrismMesh\000", "set_left_to_right\000", 373806689)
		methodPrismMesh[1] = classDB.get_method_bind("PrismMesh\000", "get_left_to_right\000", 1740695150)
		methodPrismMesh[2] = classDB.get_method_bind("PrismMesh\000", "set_size\000", 3460891852)
		methodPrismMesh[3] = classDB.get_method_bind("PrismMesh\000", "get_size\000", 3360562783)
		methodPrismMesh[4] = classDB.get_method_bind("PrismMesh\000", "set_subdivide_width\000", 1286410249)
		methodPrismMesh[5] = classDB.get_method_bind("PrismMesh\000", "get_subdivide_width\000", 3905245786)
		methodPrismMesh[6] = classDB.get_method_bind("PrismMesh\000", "set_subdivide_height\000", 1286410249)
		methodPrismMesh[7] = classDB.get_method_bind("PrismMesh\000", "get_subdivide_height\000", 3905245786)
		methodPrismMesh[8] = classDB.get_method_bind("PrismMesh\000", "set_subdivide_depth\000", 1286410249)
		methodPrismMesh[9] = classDB.get_method_bind("PrismMesh\000", "get_subdivide_depth\000", 3905245786)
		methodProceduralSkyMaterial[0] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_top_color\000", 2920490490)
		methodProceduralSkyMaterial[1] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_top_color\000", 3444240500)
		methodProceduralSkyMaterial[2] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_horizon_color\000", 2920490490)
		methodProceduralSkyMaterial[3] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_horizon_color\000", 3444240500)
		methodProceduralSkyMaterial[4] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_curve\000", 373806689)
		methodProceduralSkyMaterial[5] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_curve\000", 1740695150)
		methodProceduralSkyMaterial[6] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_energy\000", 373806689)
		methodProceduralSkyMaterial[7] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_energy\000", 1740695150)
		methodProceduralSkyMaterial[8] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_cover\000", 4051416890)
		methodProceduralSkyMaterial[9] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_cover\000", 3635182373)
		methodProceduralSkyMaterial[10] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sky_cover_modulate\000", 2920490490)
		methodProceduralSkyMaterial[11] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sky_cover_modulate\000", 3444240500)
		methodProceduralSkyMaterial[12] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_ground_bottom_color\000", 2920490490)
		methodProceduralSkyMaterial[13] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_ground_bottom_color\000", 3444240500)
		methodProceduralSkyMaterial[14] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_ground_horizon_color\000", 2920490490)
		methodProceduralSkyMaterial[15] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_ground_horizon_color\000", 3444240500)
		methodProceduralSkyMaterial[16] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_ground_curve\000", 373806689)
		methodProceduralSkyMaterial[17] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_ground_curve\000", 1740695150)
		methodProceduralSkyMaterial[18] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_ground_energy\000", 373806689)
		methodProceduralSkyMaterial[19] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_ground_energy\000", 1740695150)
		methodProceduralSkyMaterial[20] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sun_angle_max\000", 373806689)
		methodProceduralSkyMaterial[21] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sun_angle_max\000", 1740695150)
		methodProceduralSkyMaterial[22] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_sun_curve\000", 373806689)
		methodProceduralSkyMaterial[23] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_sun_curve\000", 1740695150)
		methodProceduralSkyMaterial[24] = classDB.get_method_bind("ProceduralSkyMaterial\000", "set_use_debanding\000", 2586408642)
		methodProceduralSkyMaterial[25] = classDB.get_method_bind("ProceduralSkyMaterial\000", "get_use_debanding\000", 36873697)
		methodProgressBar[0] = classDB.get_method_bind("ProgressBar\000", "set_fill_mode\000", 1286410249)
		methodProgressBar[1] = classDB.get_method_bind("ProgressBar\000", "get_fill_mode\000", 2455072627)
		methodProgressBar[2] = classDB.get_method_bind("ProgressBar\000", "set_percent_visible\000", 2586408642)
		methodProgressBar[3] = classDB.get_method_bind("ProgressBar\000", "is_percent_visible\000", 36873697)
		methodProjectSettingsSingleton[0] = classDB.get_method_bind("ProjectSettings\000", "has_setting\000", 3927539163)
		methodProjectSettingsSingleton[1] = classDB.get_method_bind("ProjectSettings\000", "set_setting\000", 402577236)
		methodProjectSettingsSingleton[2] = classDB.get_method_bind("ProjectSettings\000", "get_setting\000", 1868160156)
		methodProjectSettingsSingleton[3] = classDB.get_method_bind("ProjectSettings\000", "set_order\000", 2956805083)
		methodProjectSettingsSingleton[4] = classDB.get_method_bind("ProjectSettings\000", "get_order\000", 1321353865)
		methodProjectSettingsSingleton[5] = classDB.get_method_bind("ProjectSettings\000", "set_initial_value\000", 402577236)
		methodProjectSettingsSingleton[6] = classDB.get_method_bind("ProjectSettings\000", "add_property_info\000", 4155329257)
		methodProjectSettingsSingleton[7] = classDB.get_method_bind("ProjectSettings\000", "clear\000", 83702148)
		methodProjectSettingsSingleton[8] = classDB.get_method_bind("ProjectSettings\000", "localize_path\000", 3135753539)
		methodProjectSettingsSingleton[9] = classDB.get_method_bind("ProjectSettings\000", "globalize_path\000", 3135753539)
		methodProjectSettingsSingleton[10] = classDB.get_method_bind("ProjectSettings\000", "save\000", 166280745)
		methodProjectSettingsSingleton[11] = classDB.get_method_bind("ProjectSettings\000", "load_resource_pack\000", 3001721055)
		methodProjectSettingsSingleton[12] = classDB.get_method_bind("ProjectSettings\000", "save_custom\000", 166001499)
		methodPropertyTweener[0] = classDB.get_method_bind("PropertyTweener\000", "from\000", 4190193059)
		methodPropertyTweener[1] = classDB.get_method_bind("PropertyTweener\000", "from_current\000", 4279177709)
		methodPropertyTweener[2] = classDB.get_method_bind("PropertyTweener\000", "as_relative\000", 4279177709)
		methodPropertyTweener[3] = classDB.get_method_bind("PropertyTweener\000", "set_trans\000", 1899107404)
		methodPropertyTweener[4] = classDB.get_method_bind("PropertyTweener\000", "set_ease\000", 1080455622)
		methodPropertyTweener[5] = classDB.get_method_bind("PropertyTweener\000", "set_delay\000", 2171559331)
		methodQuadOccluder3D[0] = classDB.get_method_bind("QuadOccluder3D\000", "set_size\000", 743155724)
		methodQuadOccluder3D[1] = classDB.get_method_bind("QuadOccluder3D\000", "get_size\000", 3341600327)
		methodRDAttachmentFormat[0] = classDB.get_method_bind("RDAttachmentFormat\000", "set_format\000", 565531219)
		methodRDAttachmentFormat[1] = classDB.get_method_bind("RDAttachmentFormat\000", "get_format\000", 2235804183)
		methodRDAttachmentFormat[2] = classDB.get_method_bind("RDAttachmentFormat\000", "set_samples\000", 3774171498)
		methodRDAttachmentFormat[3] = classDB.get_method_bind("RDAttachmentFormat\000", "get_samples\000", 407791724)
		methodRDAttachmentFormat[4] = classDB.get_method_bind("RDAttachmentFormat\000", "set_usage_flags\000", 1286410249)
		methodRDAttachmentFormat[5] = classDB.get_method_bind("RDAttachmentFormat\000", "get_usage_flags\000", 3905245786)
		methodRDFramebufferPass[0] = classDB.get_method_bind("RDFramebufferPass\000", "set_color_attachments\000", 3614634198)
		methodRDFramebufferPass[1] = classDB.get_method_bind("RDFramebufferPass\000", "get_color_attachments\000", 1930428628)
		methodRDFramebufferPass[2] = classDB.get_method_bind("RDFramebufferPass\000", "set_input_attachments\000", 3614634198)
		methodRDFramebufferPass[3] = classDB.get_method_bind("RDFramebufferPass\000", "get_input_attachments\000", 1930428628)
		methodRDFramebufferPass[4] = classDB.get_method_bind("RDFramebufferPass\000", "set_resolve_attachments\000", 3614634198)
		methodRDFramebufferPass[5] = classDB.get_method_bind("RDFramebufferPass\000", "get_resolve_attachments\000", 1930428628)
		methodRDFramebufferPass[6] = classDB.get_method_bind("RDFramebufferPass\000", "set_preserve_attachments\000", 3614634198)
		methodRDFramebufferPass[7] = classDB.get_method_bind("RDFramebufferPass\000", "get_preserve_attachments\000", 1930428628)
		methodRDFramebufferPass[8] = classDB.get_method_bind("RDFramebufferPass\000", "set_depth_attachment\000", 1286410249)
		methodRDFramebufferPass[9] = classDB.get_method_bind("RDFramebufferPass\000", "get_depth_attachment\000", 3905245786)
		methodRDPipelineColorBlendState[0] = classDB.get_method_bind("RDPipelineColorBlendState\000", "set_enable_logic_op\000", 2586408642)
		methodRDPipelineColorBlendState[1] = classDB.get_method_bind("RDPipelineColorBlendState\000", "get_enable_logic_op\000", 36873697)
		methodRDPipelineColorBlendState[2] = classDB.get_method_bind("RDPipelineColorBlendState\000", "set_logic_op\000", 3610841058)
		methodRDPipelineColorBlendState[3] = classDB.get_method_bind("RDPipelineColorBlendState\000", "get_logic_op\000", 988254690)
		methodRDPipelineColorBlendState[4] = classDB.get_method_bind("RDPipelineColorBlendState\000", "set_blend_constant\000", 2920490490)
		methodRDPipelineColorBlendState[5] = classDB.get_method_bind("RDPipelineColorBlendState\000", "get_blend_constant\000", 3444240500)
		methodRDPipelineColorBlendState[6] = classDB.get_method_bind("RDPipelineColorBlendState\000", "set_attachments\000", 381264803)
		methodRDPipelineColorBlendState[7] = classDB.get_method_bind("RDPipelineColorBlendState\000", "get_attachments\000", 3995934104)
		methodRDPipelineColorBlendStateAttachment[0] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_as_mix\000", 3218959716)
		methodRDPipelineColorBlendStateAttachment[1] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_enable_blend\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[2] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_enable_blend\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[3] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_src_color_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[4] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_src_color_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[5] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_dst_color_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[6] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_dst_color_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[7] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_color_blend_op\000", 3073022720)
		methodRDPipelineColorBlendStateAttachment[8] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_color_blend_op\000", 1385093561)
		methodRDPipelineColorBlendStateAttachment[9] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_src_alpha_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[10] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_src_alpha_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[11] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_dst_alpha_blend_factor\000", 2251019273)
		methodRDPipelineColorBlendStateAttachment[12] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_dst_alpha_blend_factor\000", 3691288359)
		methodRDPipelineColorBlendStateAttachment[13] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_alpha_blend_op\000", 3073022720)
		methodRDPipelineColorBlendStateAttachment[14] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_alpha_blend_op\000", 1385093561)
		methodRDPipelineColorBlendStateAttachment[15] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_write_r\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[16] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_write_r\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[17] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_write_g\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[18] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_write_g\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[19] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_write_b\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[20] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_write_b\000", 36873697)
		methodRDPipelineColorBlendStateAttachment[21] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "set_write_a\000", 2586408642)
		methodRDPipelineColorBlendStateAttachment[22] = classDB.get_method_bind("RDPipelineColorBlendStateAttachment\000", "get_write_a\000", 36873697)
		methodRDPipelineDepthStencilState[0] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_enable_depth_test\000", 2586408642)
		methodRDPipelineDepthStencilState[1] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_enable_depth_test\000", 36873697)
		methodRDPipelineDepthStencilState[2] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_enable_depth_write\000", 2586408642)
		methodRDPipelineDepthStencilState[3] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_enable_depth_write\000", 36873697)
		methodRDPipelineDepthStencilState[4] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_depth_compare_operator\000", 2573711505)
		methodRDPipelineDepthStencilState[5] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_depth_compare_operator\000", 269730778)
		methodRDPipelineDepthStencilState[6] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_enable_depth_range\000", 2586408642)
		methodRDPipelineDepthStencilState[7] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_enable_depth_range\000", 36873697)
		methodRDPipelineDepthStencilState[8] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_depth_range_min\000", 373806689)
		methodRDPipelineDepthStencilState[9] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_depth_range_min\000", 1740695150)
		methodRDPipelineDepthStencilState[10] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_depth_range_max\000", 373806689)
		methodRDPipelineDepthStencilState[11] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_depth_range_max\000", 1740695150)
		methodRDPipelineDepthStencilState[12] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_enable_stencil\000", 2586408642)
		methodRDPipelineDepthStencilState[13] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_enable_stencil\000", 36873697)
		methodRDPipelineDepthStencilState[14] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[15] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[16] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_pass\000", 2092799566)
		methodRDPipelineDepthStencilState[17] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_pass\000", 1714732389)
		methodRDPipelineDepthStencilState[18] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_depth_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[19] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_depth_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[20] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_compare\000", 2573711505)
		methodRDPipelineDepthStencilState[21] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_compare\000", 269730778)
		methodRDPipelineDepthStencilState[22] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_compare_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[23] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_compare_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[24] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_write_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[25] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_write_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[26] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_front_op_reference\000", 1286410249)
		methodRDPipelineDepthStencilState[27] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_front_op_reference\000", 3905245786)
		methodRDPipelineDepthStencilState[28] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[29] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[30] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_pass\000", 2092799566)
		methodRDPipelineDepthStencilState[31] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_pass\000", 1714732389)
		methodRDPipelineDepthStencilState[32] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_depth_fail\000", 2092799566)
		methodRDPipelineDepthStencilState[33] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_depth_fail\000", 1714732389)
		methodRDPipelineDepthStencilState[34] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_compare\000", 2573711505)
		methodRDPipelineDepthStencilState[35] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_compare\000", 269730778)
		methodRDPipelineDepthStencilState[36] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_compare_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[37] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_compare_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[38] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_write_mask\000", 1286410249)
		methodRDPipelineDepthStencilState[39] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_write_mask\000", 3905245786)
		methodRDPipelineDepthStencilState[40] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "set_back_op_reference\000", 1286410249)
		methodRDPipelineDepthStencilState[41] = classDB.get_method_bind("RDPipelineDepthStencilState\000", "get_back_op_reference\000", 3905245786)
		methodRDPipelineMultisampleState[0] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_sample_count\000", 3774171498)
		methodRDPipelineMultisampleState[1] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_sample_count\000", 407791724)
		methodRDPipelineMultisampleState[2] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_enable_sample_shading\000", 2586408642)
		methodRDPipelineMultisampleState[3] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_enable_sample_shading\000", 36873697)
		methodRDPipelineMultisampleState[4] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_min_sample_shading\000", 373806689)
		methodRDPipelineMultisampleState[5] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_min_sample_shading\000", 1740695150)
		methodRDPipelineMultisampleState[6] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_enable_alpha_to_coverage\000", 2586408642)
		methodRDPipelineMultisampleState[7] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_enable_alpha_to_coverage\000", 36873697)
		methodRDPipelineMultisampleState[8] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_enable_alpha_to_one\000", 2586408642)
		methodRDPipelineMultisampleState[9] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_enable_alpha_to_one\000", 36873697)
		methodRDPipelineMultisampleState[10] = classDB.get_method_bind("RDPipelineMultisampleState\000", "set_sample_masks\000", 381264803)
		methodRDPipelineMultisampleState[11] = classDB.get_method_bind("RDPipelineMultisampleState\000", "get_sample_masks\000", 3995934104)
		methodRDPipelineRasterizationState[0] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_enable_depth_clamp\000", 2586408642)
		methodRDPipelineRasterizationState[1] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_enable_depth_clamp\000", 36873697)
		methodRDPipelineRasterizationState[2] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_discard_primitives\000", 2586408642)
		methodRDPipelineRasterizationState[3] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_discard_primitives\000", 36873697)
		methodRDPipelineRasterizationState[4] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_wireframe\000", 2586408642)
		methodRDPipelineRasterizationState[5] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_wireframe\000", 36873697)
		methodRDPipelineRasterizationState[6] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_cull_mode\000", 2662586502)
		methodRDPipelineRasterizationState[7] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_cull_mode\000", 2192484313)
		methodRDPipelineRasterizationState[8] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_front_face\000", 2637251213)
		methodRDPipelineRasterizationState[9] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_front_face\000", 708793786)
		methodRDPipelineRasterizationState[10] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_depth_bias_enable\000", 2586408642)
		methodRDPipelineRasterizationState[11] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_depth_bias_enable\000", 36873697)
		methodRDPipelineRasterizationState[12] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_depth_bias_constant_factor\000", 373806689)
		methodRDPipelineRasterizationState[13] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_depth_bias_constant_factor\000", 1740695150)
		methodRDPipelineRasterizationState[14] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_depth_bias_clamp\000", 373806689)
		methodRDPipelineRasterizationState[15] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_depth_bias_clamp\000", 1740695150)
		methodRDPipelineRasterizationState[16] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_depth_bias_slope_factor\000", 373806689)
		methodRDPipelineRasterizationState[17] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_depth_bias_slope_factor\000", 1740695150)
		methodRDPipelineRasterizationState[18] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_line_width\000", 373806689)
		methodRDPipelineRasterizationState[19] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_line_width\000", 1740695150)
		methodRDPipelineRasterizationState[20] = classDB.get_method_bind("RDPipelineRasterizationState\000", "set_patch_control_points\000", 1286410249)
		methodRDPipelineRasterizationState[21] = classDB.get_method_bind("RDPipelineRasterizationState\000", "get_patch_control_points\000", 3905245786)
		methodRDPipelineSpecializationConstant[0] = classDB.get_method_bind("RDPipelineSpecializationConstant\000", "set_value\000", 1114965689)
		methodRDPipelineSpecializationConstant[1] = classDB.get_method_bind("RDPipelineSpecializationConstant\000", "get_value\000", 1214101251)
		methodRDPipelineSpecializationConstant[2] = classDB.get_method_bind("RDPipelineSpecializationConstant\000", "set_constant_id\000", 1286410249)
		methodRDPipelineSpecializationConstant[3] = classDB.get_method_bind("RDPipelineSpecializationConstant\000", "get_constant_id\000", 3905245786)
		methodRDSamplerState[0] = classDB.get_method_bind("RDSamplerState\000", "set_mag_filter\000", 1493420382)
		methodRDSamplerState[1] = classDB.get_method_bind("RDSamplerState\000", "get_mag_filter\000", 2209202801)
		methodRDSamplerState[2] = classDB.get_method_bind("RDSamplerState\000", "set_min_filter\000", 1493420382)
		methodRDSamplerState[3] = classDB.get_method_bind("RDSamplerState\000", "get_min_filter\000", 2209202801)
		methodRDSamplerState[4] = classDB.get_method_bind("RDSamplerState\000", "set_mip_filter\000", 1493420382)
		methodRDSamplerState[5] = classDB.get_method_bind("RDSamplerState\000", "get_mip_filter\000", 2209202801)
		methodRDSamplerState[6] = classDB.get_method_bind("RDSamplerState\000", "set_repeat_u\000", 246127626)
		methodRDSamplerState[7] = classDB.get_method_bind("RDSamplerState\000", "get_repeat_u\000", 3227895872)
		methodRDSamplerState[8] = classDB.get_method_bind("RDSamplerState\000", "set_repeat_v\000", 246127626)
		methodRDSamplerState[9] = classDB.get_method_bind("RDSamplerState\000", "get_repeat_v\000", 3227895872)
		methodRDSamplerState[10] = classDB.get_method_bind("RDSamplerState\000", "set_repeat_w\000", 246127626)
		methodRDSamplerState[11] = classDB.get_method_bind("RDSamplerState\000", "get_repeat_w\000", 3227895872)
		methodRDSamplerState[12] = classDB.get_method_bind("RDSamplerState\000", "set_lod_bias\000", 373806689)
		methodRDSamplerState[13] = classDB.get_method_bind("RDSamplerState\000", "get_lod_bias\000", 1740695150)
		methodRDSamplerState[14] = classDB.get_method_bind("RDSamplerState\000", "set_use_anisotropy\000", 2586408642)
		methodRDSamplerState[15] = classDB.get_method_bind("RDSamplerState\000", "get_use_anisotropy\000", 36873697)
		methodRDSamplerState[16] = classDB.get_method_bind("RDSamplerState\000", "set_anisotropy_max\000", 373806689)
		methodRDSamplerState[17] = classDB.get_method_bind("RDSamplerState\000", "get_anisotropy_max\000", 1740695150)
		methodRDSamplerState[18] = classDB.get_method_bind("RDSamplerState\000", "set_enable_compare\000", 2586408642)
		methodRDSamplerState[19] = classDB.get_method_bind("RDSamplerState\000", "get_enable_compare\000", 36873697)
		methodRDSamplerState[20] = classDB.get_method_bind("RDSamplerState\000", "set_compare_op\000", 2573711505)
		methodRDSamplerState[21] = classDB.get_method_bind("RDSamplerState\000", "get_compare_op\000", 269730778)
		methodRDSamplerState[22] = classDB.get_method_bind("RDSamplerState\000", "set_min_lod\000", 373806689)
		methodRDSamplerState[23] = classDB.get_method_bind("RDSamplerState\000", "get_min_lod\000", 1740695150)
		methodRDSamplerState[24] = classDB.get_method_bind("RDSamplerState\000", "set_max_lod\000", 373806689)
		methodRDSamplerState[25] = classDB.get_method_bind("RDSamplerState\000", "get_max_lod\000", 1740695150)
		methodRDSamplerState[26] = classDB.get_method_bind("RDSamplerState\000", "set_border_color\000", 1115869595)
		methodRDSamplerState[27] = classDB.get_method_bind("RDSamplerState\000", "get_border_color\000", 3514246478)
		methodRDSamplerState[28] = classDB.get_method_bind("RDSamplerState\000", "set_unnormalized_uvw\000", 2586408642)
		methodRDSamplerState[29] = classDB.get_method_bind("RDSamplerState\000", "get_unnormalized_uvw\000", 36873697)
		methodRDShaderFile[0] = classDB.get_method_bind("RDShaderFile\000", "set_bytecode\000", 1558064255)
		methodRDShaderFile[1] = classDB.get_method_bind("RDShaderFile\000", "get_spirv\000", 3340165340)
		methodRDShaderFile[2] = classDB.get_method_bind("RDShaderFile\000", "get_version_list\000", 1139954409)
		methodRDShaderFile[3] = classDB.get_method_bind("RDShaderFile\000", "set_base_error\000", 83702148)
		methodRDShaderFile[4] = classDB.get_method_bind("RDShaderFile\000", "get_base_error\000", 201670096)
		methodRDShaderSPIRV[0] = classDB.get_method_bind("RDShaderSPIRV\000", "set_stage_bytecode\000", 3514097977)
		methodRDShaderSPIRV[1] = classDB.get_method_bind("RDShaderSPIRV\000", "get_stage_bytecode\000", 3816765404)
		methodRDShaderSPIRV[2] = classDB.get_method_bind("RDShaderSPIRV\000", "set_stage_compile_error\000", 620821314)
		methodRDShaderSPIRV[3] = classDB.get_method_bind("RDShaderSPIRV\000", "get_stage_compile_error\000", 3354920045)
		methodRDShaderSource[0] = classDB.get_method_bind("RDShaderSource\000", "set_stage_source\000", 620821314)
		methodRDShaderSource[1] = classDB.get_method_bind("RDShaderSource\000", "get_stage_source\000", 3354920045)
		methodRDShaderSource[2] = classDB.get_method_bind("RDShaderSource\000", "set_language\000", 3422186742)
		methodRDShaderSource[3] = classDB.get_method_bind("RDShaderSource\000", "get_language\000", 1063538261)
		methodRDTextureFormat[0] = classDB.get_method_bind("RDTextureFormat\000", "set_format\000", 565531219)
		methodRDTextureFormat[1] = classDB.get_method_bind("RDTextureFormat\000", "get_format\000", 2235804183)
		methodRDTextureFormat[2] = classDB.get_method_bind("RDTextureFormat\000", "set_width\000", 1286410249)
		methodRDTextureFormat[3] = classDB.get_method_bind("RDTextureFormat\000", "get_width\000", 3905245786)
		methodRDTextureFormat[4] = classDB.get_method_bind("RDTextureFormat\000", "set_height\000", 1286410249)
		methodRDTextureFormat[5] = classDB.get_method_bind("RDTextureFormat\000", "get_height\000", 3905245786)
		methodRDTextureFormat[6] = classDB.get_method_bind("RDTextureFormat\000", "set_depth\000", 1286410249)
		methodRDTextureFormat[7] = classDB.get_method_bind("RDTextureFormat\000", "get_depth\000", 3905245786)
		methodRDTextureFormat[8] = classDB.get_method_bind("RDTextureFormat\000", "set_array_layers\000", 1286410249)
		methodRDTextureFormat[9] = classDB.get_method_bind("RDTextureFormat\000", "get_array_layers\000", 3905245786)
		methodRDTextureFormat[10] = classDB.get_method_bind("RDTextureFormat\000", "set_mipmaps\000", 1286410249)
		methodRDTextureFormat[11] = classDB.get_method_bind("RDTextureFormat\000", "get_mipmaps\000", 3905245786)
		methodRDTextureFormat[12] = classDB.get_method_bind("RDTextureFormat\000", "set_texture_type\000", 652343381)
		methodRDTextureFormat[13] = classDB.get_method_bind("RDTextureFormat\000", "get_texture_type\000", 4036357416)
		methodRDTextureFormat[14] = classDB.get_method_bind("RDTextureFormat\000", "set_samples\000", 3774171498)
		methodRDTextureFormat[15] = classDB.get_method_bind("RDTextureFormat\000", "get_samples\000", 407791724)
		methodRDTextureFormat[16] = classDB.get_method_bind("RDTextureFormat\000", "set_usage_bits\000", 1286410249)
		methodRDTextureFormat[17] = classDB.get_method_bind("RDTextureFormat\000", "get_usage_bits\000", 3905245786)
		methodRDTextureFormat[18] = classDB.get_method_bind("RDTextureFormat\000", "add_shareable_format\000", 565531219)
		methodRDTextureFormat[19] = classDB.get_method_bind("RDTextureFormat\000", "remove_shareable_format\000", 565531219)
		methodRDTextureView[0] = classDB.get_method_bind("RDTextureView\000", "set_format_override\000", 565531219)
		methodRDTextureView[1] = classDB.get_method_bind("RDTextureView\000", "get_format_override\000", 2235804183)
		methodRDTextureView[2] = classDB.get_method_bind("RDTextureView\000", "set_swizzle_r\000", 3833362581)
		methodRDTextureView[3] = classDB.get_method_bind("RDTextureView\000", "get_swizzle_r\000", 4150792614)
		methodRDTextureView[4] = classDB.get_method_bind("RDTextureView\000", "set_swizzle_g\000", 3833362581)
		methodRDTextureView[5] = classDB.get_method_bind("RDTextureView\000", "get_swizzle_g\000", 4150792614)
		methodRDTextureView[6] = classDB.get_method_bind("RDTextureView\000", "set_swizzle_b\000", 3833362581)
		methodRDTextureView[7] = classDB.get_method_bind("RDTextureView\000", "get_swizzle_b\000", 4150792614)
		methodRDTextureView[8] = classDB.get_method_bind("RDTextureView\000", "set_swizzle_a\000", 3833362581)
		methodRDTextureView[9] = classDB.get_method_bind("RDTextureView\000", "get_swizzle_a\000", 4150792614)
		methodRDUniform[0] = classDB.get_method_bind("RDUniform\000", "set_uniform_type\000", 1664894931)
		methodRDUniform[1] = classDB.get_method_bind("RDUniform\000", "get_uniform_type\000", 475470040)
		methodRDUniform[2] = classDB.get_method_bind("RDUniform\000", "set_binding\000", 1286410249)
		methodRDUniform[3] = classDB.get_method_bind("RDUniform\000", "get_binding\000", 3905245786)
		methodRDUniform[4] = classDB.get_method_bind("RDUniform\000", "add_id\000", 2722037293)
		methodRDUniform[5] = classDB.get_method_bind("RDUniform\000", "clear_ids\000", 3218959716)
		methodRDUniform[6] = classDB.get_method_bind("RDUniform\000", "get_ids\000", 3995934104)
		methodRDVertexAttribute[0] = classDB.get_method_bind("RDVertexAttribute\000", "set_location\000", 1286410249)
		methodRDVertexAttribute[1] = classDB.get_method_bind("RDVertexAttribute\000", "get_location\000", 3905245786)
		methodRDVertexAttribute[2] = classDB.get_method_bind("RDVertexAttribute\000", "set_offset\000", 1286410249)
		methodRDVertexAttribute[3] = classDB.get_method_bind("RDVertexAttribute\000", "get_offset\000", 3905245786)
		methodRDVertexAttribute[4] = classDB.get_method_bind("RDVertexAttribute\000", "set_format\000", 565531219)
		methodRDVertexAttribute[5] = classDB.get_method_bind("RDVertexAttribute\000", "get_format\000", 2235804183)
		methodRDVertexAttribute[6] = classDB.get_method_bind("RDVertexAttribute\000", "set_stride\000", 1286410249)
		methodRDVertexAttribute[7] = classDB.get_method_bind("RDVertexAttribute\000", "get_stride\000", 3905245786)
		methodRDVertexAttribute[8] = classDB.get_method_bind("RDVertexAttribute\000", "set_frequency\000", 522141836)
		methodRDVertexAttribute[9] = classDB.get_method_bind("RDVertexAttribute\000", "get_frequency\000", 4154106413)
		methodRandomNumberGenerator[0] = classDB.get_method_bind("RandomNumberGenerator\000", "set_seed\000", 1286410249)
		methodRandomNumberGenerator[1] = classDB.get_method_bind("RandomNumberGenerator\000", "get_seed\000", 2455072627)
		methodRandomNumberGenerator[2] = classDB.get_method_bind("RandomNumberGenerator\000", "set_state\000", 1286410249)
		methodRandomNumberGenerator[3] = classDB.get_method_bind("RandomNumberGenerator\000", "get_state\000", 3905245786)
		methodRandomNumberGenerator[4] = classDB.get_method_bind("RandomNumberGenerator\000", "randi\000", 2455072627)
		methodRandomNumberGenerator[5] = classDB.get_method_bind("RandomNumberGenerator\000", "randf\000", 191475506)
		methodRandomNumberGenerator[6] = classDB.get_method_bind("RandomNumberGenerator\000", "randfn\000", 2207676613)
		methodRandomNumberGenerator[7] = classDB.get_method_bind("RandomNumberGenerator\000", "randf_range\000", 4269894367)
		methodRandomNumberGenerator[8] = classDB.get_method_bind("RandomNumberGenerator\000", "randi_range\000", 50157827)
		methodRandomNumberGenerator[9] = classDB.get_method_bind("RandomNumberGenerator\000", "randomize\000", 3218959716)
		methodRange[0] = classDB.get_method_bind("Range\000", "get_value\000", 1740695150)
		methodRange[1] = classDB.get_method_bind("Range\000", "get_min\000", 1740695150)
		methodRange[2] = classDB.get_method_bind("Range\000", "get_max\000", 1740695150)
		methodRange[3] = classDB.get_method_bind("Range\000", "get_step\000", 1740695150)
		methodRange[4] = classDB.get_method_bind("Range\000", "get_page\000", 1740695150)
		methodRange[5] = classDB.get_method_bind("Range\000", "get_as_ratio\000", 1740695150)
		methodRange[6] = classDB.get_method_bind("Range\000", "set_value\000", 373806689)
		methodRange[7] = classDB.get_method_bind("Range\000", "set_min\000", 373806689)
		methodRange[8] = classDB.get_method_bind("Range\000", "set_max\000", 373806689)
		methodRange[9] = classDB.get_method_bind("Range\000", "set_step\000", 373806689)
		methodRange[10] = classDB.get_method_bind("Range\000", "set_page\000", 373806689)
		methodRange[11] = classDB.get_method_bind("Range\000", "set_as_ratio\000", 373806689)
		methodRange[12] = classDB.get_method_bind("Range\000", "set_use_rounded_values\000", 2586408642)
		methodRange[13] = classDB.get_method_bind("Range\000", "is_using_rounded_values\000", 36873697)
		methodRange[14] = classDB.get_method_bind("Range\000", "set_exp_ratio\000", 2586408642)
		methodRange[15] = classDB.get_method_bind("Range\000", "is_ratio_exp\000", 36873697)
		methodRange[16] = classDB.get_method_bind("Range\000", "set_allow_greater\000", 2586408642)
		methodRange[17] = classDB.get_method_bind("Range\000", "is_greater_allowed\000", 36873697)
		methodRange[18] = classDB.get_method_bind("Range\000", "set_allow_lesser\000", 2586408642)
		methodRange[19] = classDB.get_method_bind("Range\000", "is_lesser_allowed\000", 36873697)
		methodRange[20] = classDB.get_method_bind("Range\000", "share\000", 1078189570)
		methodRange[21] = classDB.get_method_bind("Range\000", "unshare\000", 3218959716)
		methodRayCast2D[0] = classDB.get_method_bind("RayCast2D\000", "set_enabled\000", 2586408642)
		methodRayCast2D[1] = classDB.get_method_bind("RayCast2D\000", "is_enabled\000", 36873697)
		methodRayCast2D[2] = classDB.get_method_bind("RayCast2D\000", "set_target_position\000", 743155724)
		methodRayCast2D[3] = classDB.get_method_bind("RayCast2D\000", "get_target_position\000", 3341600327)
		methodRayCast2D[4] = classDB.get_method_bind("RayCast2D\000", "is_colliding\000", 36873697)
		methodRayCast2D[5] = classDB.get_method_bind("RayCast2D\000", "force_raycast_update\000", 3218959716)
		methodRayCast2D[6] = classDB.get_method_bind("RayCast2D\000", "get_collider\000", 1981248198)
		methodRayCast2D[7] = classDB.get_method_bind("RayCast2D\000", "get_collider_rid\000", 2944877500)
		methodRayCast2D[8] = classDB.get_method_bind("RayCast2D\000", "get_collider_shape\000", 3905245786)
		methodRayCast2D[9] = classDB.get_method_bind("RayCast2D\000", "get_collision_point\000", 3341600327)
		methodRayCast2D[10] = classDB.get_method_bind("RayCast2D\000", "get_collision_normal\000", 3341600327)
		methodRayCast2D[11] = classDB.get_method_bind("RayCast2D\000", "add_exception_rid\000", 2722037293)
		methodRayCast2D[12] = classDB.get_method_bind("RayCast2D\000", "add_exception\000", 3090941106)
		methodRayCast2D[13] = classDB.get_method_bind("RayCast2D\000", "remove_exception_rid\000", 2722037293)
		methodRayCast2D[14] = classDB.get_method_bind("RayCast2D\000", "remove_exception\000", 3090941106)
		methodRayCast2D[15] = classDB.get_method_bind("RayCast2D\000", "clear_exceptions\000", 3218959716)
		methodRayCast2D[16] = classDB.get_method_bind("RayCast2D\000", "set_collision_mask\000", 1286410249)
		methodRayCast2D[17] = classDB.get_method_bind("RayCast2D\000", "get_collision_mask\000", 3905245786)
		methodRayCast2D[18] = classDB.get_method_bind("RayCast2D\000", "set_collision_mask_value\000", 300928843)
		methodRayCast2D[19] = classDB.get_method_bind("RayCast2D\000", "get_collision_mask_value\000", 1116898809)
		methodRayCast2D[20] = classDB.get_method_bind("RayCast2D\000", "set_exclude_parent_body\000", 2586408642)
		methodRayCast2D[21] = classDB.get_method_bind("RayCast2D\000", "get_exclude_parent_body\000", 36873697)
		methodRayCast2D[22] = classDB.get_method_bind("RayCast2D\000", "set_collide_with_areas\000", 2586408642)
		methodRayCast2D[23] = classDB.get_method_bind("RayCast2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodRayCast2D[24] = classDB.get_method_bind("RayCast2D\000", "set_collide_with_bodies\000", 2586408642)
		methodRayCast2D[25] = classDB.get_method_bind("RayCast2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodRayCast2D[26] = classDB.get_method_bind("RayCast2D\000", "set_hit_from_inside\000", 2586408642)
		methodRayCast2D[27] = classDB.get_method_bind("RayCast2D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodRayCast3D[0] = classDB.get_method_bind("RayCast3D\000", "set_enabled\000", 2586408642)
		methodRayCast3D[1] = classDB.get_method_bind("RayCast3D\000", "is_enabled\000", 36873697)
		methodRayCast3D[2] = classDB.get_method_bind("RayCast3D\000", "set_target_position\000", 3460891852)
		methodRayCast3D[3] = classDB.get_method_bind("RayCast3D\000", "get_target_position\000", 3360562783)
		methodRayCast3D[4] = classDB.get_method_bind("RayCast3D\000", "is_colliding\000", 36873697)
		methodRayCast3D[5] = classDB.get_method_bind("RayCast3D\000", "force_raycast_update\000", 3218959716)
		methodRayCast3D[6] = classDB.get_method_bind("RayCast3D\000", "get_collider\000", 1981248198)
		methodRayCast3D[7] = classDB.get_method_bind("RayCast3D\000", "get_collider_rid\000", 2944877500)
		methodRayCast3D[8] = classDB.get_method_bind("RayCast3D\000", "get_collider_shape\000", 3905245786)
		methodRayCast3D[9] = classDB.get_method_bind("RayCast3D\000", "get_collision_point\000", 3360562783)
		methodRayCast3D[10] = classDB.get_method_bind("RayCast3D\000", "get_collision_normal\000", 3360562783)
		methodRayCast3D[11] = classDB.get_method_bind("RayCast3D\000", "add_exception_rid\000", 2722037293)
		methodRayCast3D[12] = classDB.get_method_bind("RayCast3D\000", "add_exception\000", 1976431078)
		methodRayCast3D[13] = classDB.get_method_bind("RayCast3D\000", "remove_exception_rid\000", 2722037293)
		methodRayCast3D[14] = classDB.get_method_bind("RayCast3D\000", "remove_exception\000", 1976431078)
		methodRayCast3D[15] = classDB.get_method_bind("RayCast3D\000", "clear_exceptions\000", 3218959716)
		methodRayCast3D[16] = classDB.get_method_bind("RayCast3D\000", "set_collision_mask\000", 1286410249)
		methodRayCast3D[17] = classDB.get_method_bind("RayCast3D\000", "get_collision_mask\000", 3905245786)
		methodRayCast3D[18] = classDB.get_method_bind("RayCast3D\000", "set_collision_mask_value\000", 300928843)
		methodRayCast3D[19] = classDB.get_method_bind("RayCast3D\000", "get_collision_mask_value\000", 1116898809)
		methodRayCast3D[20] = classDB.get_method_bind("RayCast3D\000", "set_exclude_parent_body\000", 2586408642)
		methodRayCast3D[21] = classDB.get_method_bind("RayCast3D\000", "get_exclude_parent_body\000", 36873697)
		methodRayCast3D[22] = classDB.get_method_bind("RayCast3D\000", "set_collide_with_areas\000", 2586408642)
		methodRayCast3D[23] = classDB.get_method_bind("RayCast3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodRayCast3D[24] = classDB.get_method_bind("RayCast3D\000", "set_collide_with_bodies\000", 2586408642)
		methodRayCast3D[25] = classDB.get_method_bind("RayCast3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodRayCast3D[26] = classDB.get_method_bind("RayCast3D\000", "set_hit_from_inside\000", 2586408642)
		methodRayCast3D[27] = classDB.get_method_bind("RayCast3D\000", "is_hit_from_inside_enabled\000", 36873697)
		methodRayCast3D[28] = classDB.get_method_bind("RayCast3D\000", "set_debug_shape_custom_color\000", 2920490490)
		methodRayCast3D[29] = classDB.get_method_bind("RayCast3D\000", "get_debug_shape_custom_color\000", 3444240500)
		methodRayCast3D[30] = classDB.get_method_bind("RayCast3D\000", "set_debug_shape_thickness\000", 1286410249)
		methodRayCast3D[31] = classDB.get_method_bind("RayCast3D\000", "get_debug_shape_thickness\000", 3905245786)
		methodRectangleShape2D[0] = classDB.get_method_bind("RectangleShape2D\000", "set_size\000", 743155724)
		methodRectangleShape2D[1] = classDB.get_method_bind("RectangleShape2D\000", "get_size\000", 3341600327)
		methodRefCounted[0] = classDB.get_method_bind("RefCounted\000", "init_ref\000", 2240911060)
		methodRefCounted[1] = classDB.get_method_bind("RefCounted\000", "reference\000", 2240911060)
		methodRefCounted[2] = classDB.get_method_bind("RefCounted\000", "unreference\000", 2240911060)
		methodReferenceRect[0] = classDB.get_method_bind("ReferenceRect\000", "get_border_color\000", 3444240500)
		methodReferenceRect[1] = classDB.get_method_bind("ReferenceRect\000", "set_border_color\000", 2920490490)
		methodReferenceRect[2] = classDB.get_method_bind("ReferenceRect\000", "get_border_width\000", 1740695150)
		methodReferenceRect[3] = classDB.get_method_bind("ReferenceRect\000", "set_border_width\000", 373806689)
		methodReferenceRect[4] = classDB.get_method_bind("ReferenceRect\000", "get_editor_only\000", 36873697)
		methodReferenceRect[5] = classDB.get_method_bind("ReferenceRect\000", "set_editor_only\000", 2586408642)
		methodReflectionProbe[0] = classDB.get_method_bind("ReflectionProbe\000", "set_intensity\000", 373806689)
		methodReflectionProbe[1] = classDB.get_method_bind("ReflectionProbe\000", "get_intensity\000", 1740695150)
		methodReflectionProbe[2] = classDB.get_method_bind("ReflectionProbe\000", "set_ambient_mode\000", 1748981278)
		methodReflectionProbe[3] = classDB.get_method_bind("ReflectionProbe\000", "get_ambient_mode\000", 1014607621)
		methodReflectionProbe[4] = classDB.get_method_bind("ReflectionProbe\000", "set_ambient_color\000", 2920490490)
		methodReflectionProbe[5] = classDB.get_method_bind("ReflectionProbe\000", "get_ambient_color\000", 3444240500)
		methodReflectionProbe[6] = classDB.get_method_bind("ReflectionProbe\000", "set_ambient_color_energy\000", 373806689)
		methodReflectionProbe[7] = classDB.get_method_bind("ReflectionProbe\000", "get_ambient_color_energy\000", 1740695150)
		methodReflectionProbe[8] = classDB.get_method_bind("ReflectionProbe\000", "set_max_distance\000", 373806689)
		methodReflectionProbe[9] = classDB.get_method_bind("ReflectionProbe\000", "get_max_distance\000", 1740695150)
		methodReflectionProbe[10] = classDB.get_method_bind("ReflectionProbe\000", "set_mesh_lod_threshold\000", 373806689)
		methodReflectionProbe[11] = classDB.get_method_bind("ReflectionProbe\000", "get_mesh_lod_threshold\000", 1740695150)
		methodReflectionProbe[12] = classDB.get_method_bind("ReflectionProbe\000", "set_extents\000", 3460891852)
		methodReflectionProbe[13] = classDB.get_method_bind("ReflectionProbe\000", "get_extents\000", 3360562783)
		methodReflectionProbe[14] = classDB.get_method_bind("ReflectionProbe\000", "set_origin_offset\000", 3460891852)
		methodReflectionProbe[15] = classDB.get_method_bind("ReflectionProbe\000", "get_origin_offset\000", 3360562783)
		methodReflectionProbe[16] = classDB.get_method_bind("ReflectionProbe\000", "set_as_interior\000", 2586408642)
		methodReflectionProbe[17] = classDB.get_method_bind("ReflectionProbe\000", "is_set_as_interior\000", 36873697)
		methodReflectionProbe[18] = classDB.get_method_bind("ReflectionProbe\000", "set_enable_box_projection\000", 2586408642)
		methodReflectionProbe[19] = classDB.get_method_bind("ReflectionProbe\000", "is_box_projection_enabled\000", 36873697)
		methodReflectionProbe[20] = classDB.get_method_bind("ReflectionProbe\000", "set_enable_shadows\000", 2586408642)
		methodReflectionProbe[21] = classDB.get_method_bind("ReflectionProbe\000", "are_shadows_enabled\000", 36873697)
		methodReflectionProbe[22] = classDB.get_method_bind("ReflectionProbe\000", "set_cull_mask\000", 1286410249)
		methodReflectionProbe[23] = classDB.get_method_bind("ReflectionProbe\000", "get_cull_mask\000", 3905245786)
		methodReflectionProbe[24] = classDB.get_method_bind("ReflectionProbe\000", "set_update_mode\000", 4090221187)
		methodReflectionProbe[25] = classDB.get_method_bind("ReflectionProbe\000", "get_update_mode\000", 2367550552)
		methodRegEx[0] = classDB.get_method_bind("RegEx\000", "create_from_string\000", 2150300909)
		methodRegEx[1] = classDB.get_method_bind("RegEx\000", "clear\000", 3218959716)
		methodRegEx[2] = classDB.get_method_bind("RegEx\000", "compile\000", 166001499)
		methodRegEx[3] = classDB.get_method_bind("RegEx\000", "search\000", 4087180739)
		methodRegEx[4] = classDB.get_method_bind("RegEx\000", "search_all\000", 3354100289)
		methodRegEx[5] = classDB.get_method_bind("RegEx\000", "sub\000", 758293621)
		methodRegEx[6] = classDB.get_method_bind("RegEx\000", "is_valid\000", 36873697)
		methodRegEx[7] = classDB.get_method_bind("RegEx\000", "get_pattern\000", 201670096)
		methodRegEx[8] = classDB.get_method_bind("RegEx\000", "get_group_count\000", 3905245786)
		methodRegEx[9] = classDB.get_method_bind("RegEx\000", "get_names\000", 1139954409)
		methodRegExMatch[0] = classDB.get_method_bind("RegExMatch\000", "get_subject\000", 201670096)
		methodRegExMatch[1] = classDB.get_method_bind("RegExMatch\000", "get_group_count\000", 3905245786)
		methodRegExMatch[2] = classDB.get_method_bind("RegExMatch\000", "get_names\000", 3102165223)
		methodRegExMatch[3] = classDB.get_method_bind("RegExMatch\000", "get_strings\000", 3995934104)
		methodRegExMatch[4] = classDB.get_method_bind("RegExMatch\000", "get_string\000", 687115856)
		methodRegExMatch[5] = classDB.get_method_bind("RegExMatch\000", "get_start\000", 490464691)
		methodRegExMatch[6] = classDB.get_method_bind("RegExMatch\000", "get_end\000", 490464691)
		methodRemoteTransform2D[0] = classDB.get_method_bind("RemoteTransform2D\000", "set_remote_node\000", 1348162250)
		methodRemoteTransform2D[1] = classDB.get_method_bind("RemoteTransform2D\000", "get_remote_node\000", 4075236667)
		methodRemoteTransform2D[2] = classDB.get_method_bind("RemoteTransform2D\000", "force_update_cache\000", 3218959716)
		methodRemoteTransform2D[3] = classDB.get_method_bind("RemoteTransform2D\000", "set_use_global_coordinates\000", 2586408642)
		methodRemoteTransform2D[4] = classDB.get_method_bind("RemoteTransform2D\000", "get_use_global_coordinates\000", 36873697)
		methodRemoteTransform2D[5] = classDB.get_method_bind("RemoteTransform2D\000", "set_update_position\000", 2586408642)
		methodRemoteTransform2D[6] = classDB.get_method_bind("RemoteTransform2D\000", "get_update_position\000", 36873697)
		methodRemoteTransform2D[7] = classDB.get_method_bind("RemoteTransform2D\000", "set_update_rotation\000", 2586408642)
		methodRemoteTransform2D[8] = classDB.get_method_bind("RemoteTransform2D\000", "get_update_rotation\000", 36873697)
		methodRemoteTransform2D[9] = classDB.get_method_bind("RemoteTransform2D\000", "set_update_scale\000", 2586408642)
		methodRemoteTransform2D[10] = classDB.get_method_bind("RemoteTransform2D\000", "get_update_scale\000", 36873697)
		methodRemoteTransform3D[0] = classDB.get_method_bind("RemoteTransform3D\000", "set_remote_node\000", 1348162250)
		methodRemoteTransform3D[1] = classDB.get_method_bind("RemoteTransform3D\000", "get_remote_node\000", 4075236667)
		methodRemoteTransform3D[2] = classDB.get_method_bind("RemoteTransform3D\000", "force_update_cache\000", 3218959716)
		methodRemoteTransform3D[3] = classDB.get_method_bind("RemoteTransform3D\000", "set_use_global_coordinates\000", 2586408642)
		methodRemoteTransform3D[4] = classDB.get_method_bind("RemoteTransform3D\000", "get_use_global_coordinates\000", 36873697)
		methodRemoteTransform3D[5] = classDB.get_method_bind("RemoteTransform3D\000", "set_update_position\000", 2586408642)
		methodRemoteTransform3D[6] = classDB.get_method_bind("RemoteTransform3D\000", "get_update_position\000", 36873697)
		methodRemoteTransform3D[7] = classDB.get_method_bind("RemoteTransform3D\000", "set_update_rotation\000", 2586408642)
		methodRemoteTransform3D[8] = classDB.get_method_bind("RemoteTransform3D\000", "get_update_rotation\000", 36873697)
		methodRemoteTransform3D[9] = classDB.get_method_bind("RemoteTransform3D\000", "set_update_scale\000", 2586408642)
		methodRemoteTransform3D[10] = classDB.get_method_bind("RemoteTransform3D\000", "get_update_scale\000", 36873697)
		methodRenderingDevice[0] = classDB.get_method_bind("RenderingDevice\000", "texture_create\000", 3011278298)
		methodRenderingDevice[1] = classDB.get_method_bind("RenderingDevice\000", "texture_create_shared\000", 3178156134)
		methodRenderingDevice[2] = classDB.get_method_bind("RenderingDevice\000", "texture_create_shared_from_slice\000", 864132525)
		methodRenderingDevice[3] = classDB.get_method_bind("RenderingDevice\000", "texture_update\000", 259041867)
		methodRenderingDevice[4] = classDB.get_method_bind("RenderingDevice\000", "texture_get_data\000", 1859412099)
		methodRenderingDevice[5] = classDB.get_method_bind("RenderingDevice\000", "texture_is_format_supported_for_usage\000", 1616490902)
		methodRenderingDevice[6] = classDB.get_method_bind("RenderingDevice\000", "texture_is_shared\000", 3521089500)
		methodRenderingDevice[7] = classDB.get_method_bind("RenderingDevice\000", "texture_is_valid\000", 3521089500)
		methodRenderingDevice[8] = classDB.get_method_bind("RenderingDevice\000", "texture_copy\000", 4234145050)
		methodRenderingDevice[9] = classDB.get_method_bind("RenderingDevice\000", "texture_clear\000", 1993157964)
		methodRenderingDevice[10] = classDB.get_method_bind("RenderingDevice\000", "texture_resolve_multisample\000", 1429823113)
		methodRenderingDevice[11] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_format_create\000", 2635475316)
		methodRenderingDevice[12] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_format_create_multipass\000", 1992489524)
		methodRenderingDevice[13] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_format_create_empty\000", 555930169)
		methodRenderingDevice[14] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_format_get_texture_samples\000", 1036806638)
		methodRenderingDevice[15] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_create\000", 1884747791)
		methodRenderingDevice[16] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_create_multipass\000", 452534725)
		methodRenderingDevice[17] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_create_empty\000", 382373098)
		methodRenderingDevice[18] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_get_format\000", 3917799429)
		methodRenderingDevice[19] = classDB.get_method_bind("RenderingDevice\000", "framebuffer_is_valid\000", 4155700596)
		methodRenderingDevice[20] = classDB.get_method_bind("RenderingDevice\000", "sampler_create\000", 2327892535)
		methodRenderingDevice[21] = classDB.get_method_bind("RenderingDevice\000", "vertex_buffer_create\000", 3491282828)
		methodRenderingDevice[22] = classDB.get_method_bind("RenderingDevice\000", "vertex_format_create\000", 1242678479)
		methodRenderingDevice[23] = classDB.get_method_bind("RenderingDevice\000", "index_buffer_create\000", 975915977)
		methodRenderingDevice[24] = classDB.get_method_bind("RenderingDevice\000", "index_array_create\000", 2256026069)
		methodRenderingDevice[25] = classDB.get_method_bind("RenderingDevice\000", "shader_compile_spirv_from_source\000", 3459523685)
		methodRenderingDevice[26] = classDB.get_method_bind("RenderingDevice\000", "shader_compile_binary_from_spirv\000", 1395027180)
		methodRenderingDevice[27] = classDB.get_method_bind("RenderingDevice\000", "shader_create_from_spirv\000", 3297482566)
		methodRenderingDevice[28] = classDB.get_method_bind("RenderingDevice\000", "shader_create_from_bytecode\000", 3049171473)
		methodRenderingDevice[29] = classDB.get_method_bind("RenderingDevice\000", "shader_get_vertex_input_attribute_mask\000", 3917799429)
		methodRenderingDevice[30] = classDB.get_method_bind("RenderingDevice\000", "uniform_buffer_create\000", 1453158401)
		methodRenderingDevice[31] = classDB.get_method_bind("RenderingDevice\000", "storage_buffer_create\000", 595994205)
		methodRenderingDevice[32] = classDB.get_method_bind("RenderingDevice\000", "texture_buffer_create\000", 2344087557)
		methodRenderingDevice[33] = classDB.get_method_bind("RenderingDevice\000", "uniform_set_create\000", 2280795797)
		methodRenderingDevice[34] = classDB.get_method_bind("RenderingDevice\000", "uniform_set_is_valid\000", 3521089500)
		methodRenderingDevice[35] = classDB.get_method_bind("RenderingDevice\000", "buffer_update\000", 857091402)
		methodRenderingDevice[36] = classDB.get_method_bind("RenderingDevice\000", "buffer_clear\000", 3627474756)
		methodRenderingDevice[37] = classDB.get_method_bind("RenderingDevice\000", "buffer_get_data\000", 1102329001)
		methodRenderingDevice[38] = classDB.get_method_bind("RenderingDevice\000", "render_pipeline_create\000", 3544722194)
		methodRenderingDevice[39] = classDB.get_method_bind("RenderingDevice\000", "render_pipeline_is_valid\000", 3521089500)
		methodRenderingDevice[40] = classDB.get_method_bind("RenderingDevice\000", "compute_pipeline_create\000", 403593840)
		methodRenderingDevice[41] = classDB.get_method_bind("RenderingDevice\000", "compute_pipeline_is_valid\000", 3521089500)
		methodRenderingDevice[42] = classDB.get_method_bind("RenderingDevice\000", "screen_get_width\000", 1591665591)
		methodRenderingDevice[43] = classDB.get_method_bind("RenderingDevice\000", "screen_get_height\000", 1591665591)
		methodRenderingDevice[44] = classDB.get_method_bind("RenderingDevice\000", "screen_get_framebuffer_format\000", 3905245786)
		methodRenderingDevice[45] = classDB.get_method_bind("RenderingDevice\000", "draw_list_begin_for_screen\000", 3988079995)
		methodRenderingDevice[46] = classDB.get_method_bind("RenderingDevice\000", "draw_list_begin\000", 4252992020)
		methodRenderingDevice[47] = classDB.get_method_bind("RenderingDevice\000", "draw_list_begin_split\000", 832527510)
		methodRenderingDevice[48] = classDB.get_method_bind("RenderingDevice\000", "draw_list_set_blend_constants\000", 2878471219)
		methodRenderingDevice[49] = classDB.get_method_bind("RenderingDevice\000", "draw_list_bind_render_pipeline\000", 4040184819)
		methodRenderingDevice[50] = classDB.get_method_bind("RenderingDevice\000", "draw_list_bind_uniform_set\000", 749655778)
		methodRenderingDevice[51] = classDB.get_method_bind("RenderingDevice\000", "draw_list_bind_vertex_array\000", 4040184819)
		methodRenderingDevice[52] = classDB.get_method_bind("RenderingDevice\000", "draw_list_bind_index_array\000", 4040184819)
		methodRenderingDevice[53] = classDB.get_method_bind("RenderingDevice\000", "draw_list_set_push_constant\000", 2772371345)
		methodRenderingDevice[54] = classDB.get_method_bind("RenderingDevice\000", "draw_list_draw\000", 3710874499)
		methodRenderingDevice[55] = classDB.get_method_bind("RenderingDevice\000", "draw_list_enable_scissor\000", 338791288)
		methodRenderingDevice[56] = classDB.get_method_bind("RenderingDevice\000", "draw_list_disable_scissor\000", 1286410249)
		methodRenderingDevice[57] = classDB.get_method_bind("RenderingDevice\000", "draw_list_switch_to_next_pass\000", 2455072627)
		methodRenderingDevice[58] = classDB.get_method_bind("RenderingDevice\000", "draw_list_switch_to_next_pass_split\000", 2865087369)
		methodRenderingDevice[59] = classDB.get_method_bind("RenderingDevice\000", "draw_list_end\000", 2829508664)
		methodRenderingDevice[60] = classDB.get_method_bind("RenderingDevice\000", "compute_list_begin\000", 968564752)
		methodRenderingDevice[61] = classDB.get_method_bind("RenderingDevice\000", "compute_list_bind_compute_pipeline\000", 4040184819)
		methodRenderingDevice[62] = classDB.get_method_bind("RenderingDevice\000", "compute_list_set_push_constant\000", 2772371345)
		methodRenderingDevice[63] = classDB.get_method_bind("RenderingDevice\000", "compute_list_bind_uniform_set\000", 749655778)
		methodRenderingDevice[64] = classDB.get_method_bind("RenderingDevice\000", "compute_list_dispatch\000", 4275841770)
		methodRenderingDevice[65] = classDB.get_method_bind("RenderingDevice\000", "compute_list_add_barrier\000", 1286410249)
		methodRenderingDevice[66] = classDB.get_method_bind("RenderingDevice\000", "compute_list_end\000", 2829508664)
		methodRenderingDevice[67] = classDB.get_method_bind("RenderingDevice\000", "free_rid\000", 2722037293)
		methodRenderingDevice[68] = classDB.get_method_bind("RenderingDevice\000", "capture_timestamp\000", 83702148)
		methodRenderingDevice[69] = classDB.get_method_bind("RenderingDevice\000", "get_captured_timestamps_count\000", 3905245786)
		methodRenderingDevice[70] = classDB.get_method_bind("RenderingDevice\000", "get_captured_timestamps_frame\000", 3905245786)
		methodRenderingDevice[71] = classDB.get_method_bind("RenderingDevice\000", "get_captured_timestamp_gpu_time\000", 923996154)
		methodRenderingDevice[72] = classDB.get_method_bind("RenderingDevice\000", "get_captured_timestamp_cpu_time\000", 923996154)
		methodRenderingDevice[73] = classDB.get_method_bind("RenderingDevice\000", "get_captured_timestamp_name\000", 844755477)
		methodRenderingDevice[74] = classDB.get_method_bind("RenderingDevice\000", "limit_get\000", 1559202131)
		methodRenderingDevice[75] = classDB.get_method_bind("RenderingDevice\000", "get_frame_delay\000", 3905245786)
		methodRenderingDevice[76] = classDB.get_method_bind("RenderingDevice\000", "submit\000", 3218959716)
		methodRenderingDevice[77] = classDB.get_method_bind("RenderingDevice\000", "sync\000", 3218959716)
		methodRenderingDevice[78] = classDB.get_method_bind("RenderingDevice\000", "barrier\000", 3979627413)
		methodRenderingDevice[79] = classDB.get_method_bind("RenderingDevice\000", "full_barrier\000", 3218959716)
		methodRenderingDevice[80] = classDB.get_method_bind("RenderingDevice\000", "create_local_device\000", 2846302423)
		methodRenderingDevice[81] = classDB.get_method_bind("RenderingDevice\000", "set_resource_name\000", 2726140452)
		methodRenderingDevice[82] = classDB.get_method_bind("RenderingDevice\000", "draw_command_begin_label\000", 1636512886)
		methodRenderingDevice[83] = classDB.get_method_bind("RenderingDevice\000", "draw_command_insert_label\000", 1636512886)
		methodRenderingDevice[84] = classDB.get_method_bind("RenderingDevice\000", "draw_command_end_label\000", 3218959716)
		methodRenderingDevice[85] = classDB.get_method_bind("RenderingDevice\000", "get_device_vendor_name\000", 201670096)
		methodRenderingDevice[86] = classDB.get_method_bind("RenderingDevice\000", "get_device_name\000", 201670096)
		methodRenderingDevice[87] = classDB.get_method_bind("RenderingDevice\000", "get_device_pipeline_cache_uuid\000", 201670096)
		methodRenderingDevice[88] = classDB.get_method_bind("RenderingDevice\000", "get_memory_usage\000", 251690689)
		methodRenderingDevice[89] = classDB.get_method_bind("RenderingDevice\000", "get_driver_resource\000", 501815484)
		methodRenderingServerSingleton[0] = classDB.get_method_bind("RenderingServer\000", "texture_2d_create\000", 2010018390)
		methodRenderingServerSingleton[1] = classDB.get_method_bind("RenderingServer\000", "texture_2d_layered_create\000", 913689023)
		methodRenderingServerSingleton[2] = classDB.get_method_bind("RenderingServer\000", "texture_3d_create\000", 4036838706)
		methodRenderingServerSingleton[3] = classDB.get_method_bind("RenderingServer\000", "texture_proxy_create\000", 41030802)
		methodRenderingServerSingleton[4] = classDB.get_method_bind("RenderingServer\000", "texture_2d_update\000", 999539803)
		methodRenderingServerSingleton[5] = classDB.get_method_bind("RenderingServer\000", "texture_3d_update\000", 684822712)
		methodRenderingServerSingleton[6] = classDB.get_method_bind("RenderingServer\000", "texture_proxy_update\000", 395945892)
		methodRenderingServerSingleton[7] = classDB.get_method_bind("RenderingServer\000", "texture_2d_placeholder_create\000", 529393457)
		methodRenderingServerSingleton[8] = classDB.get_method_bind("RenderingServer\000", "texture_2d_layered_placeholder_create\000", 1394585590)
		methodRenderingServerSingleton[9] = classDB.get_method_bind("RenderingServer\000", "texture_3d_placeholder_create\000", 529393457)
		methodRenderingServerSingleton[10] = classDB.get_method_bind("RenderingServer\000", "texture_2d_get\000", 4206205781)
		methodRenderingServerSingleton[11] = classDB.get_method_bind("RenderingServer\000", "texture_2d_layer_get\000", 2705440895)
		methodRenderingServerSingleton[12] = classDB.get_method_bind("RenderingServer\000", "texture_3d_get\000", 2684255073)
		methodRenderingServerSingleton[13] = classDB.get_method_bind("RenderingServer\000", "texture_replace\000", 395945892)
		methodRenderingServerSingleton[14] = classDB.get_method_bind("RenderingServer\000", "texture_set_size_override\000", 4288446313)
		methodRenderingServerSingleton[15] = classDB.get_method_bind("RenderingServer\000", "texture_set_path\000", 2726140452)
		methodRenderingServerSingleton[16] = classDB.get_method_bind("RenderingServer\000", "texture_get_path\000", 642473191)
		methodRenderingServerSingleton[17] = classDB.get_method_bind("RenderingServer\000", "texture_set_force_redraw_if_visible\000", 1265174801)
		methodRenderingServerSingleton[18] = classDB.get_method_bind("RenderingServer\000", "shader_create\000", 529393457)
		methodRenderingServerSingleton[19] = classDB.get_method_bind("RenderingServer\000", "shader_set_code\000", 2726140452)
		methodRenderingServerSingleton[20] = classDB.get_method_bind("RenderingServer\000", "shader_set_path_hint\000", 2726140452)
		methodRenderingServerSingleton[21] = classDB.get_method_bind("RenderingServer\000", "shader_get_code\000", 642473191)
		methodRenderingServerSingleton[22] = classDB.get_method_bind("RenderingServer\000", "shader_get_shader_uniform_list\000", 2684255073)
		methodRenderingServerSingleton[23] = classDB.get_method_bind("RenderingServer\000", "shader_get_param_default\000", 2621281810)
		methodRenderingServerSingleton[24] = classDB.get_method_bind("RenderingServer\000", "shader_set_default_texture_param\000", 3864903085)
		methodRenderingServerSingleton[25] = classDB.get_method_bind("RenderingServer\000", "shader_get_default_texture_param\000", 2523186822)
		methodRenderingServerSingleton[26] = classDB.get_method_bind("RenderingServer\000", "material_create\000", 529393457)
		methodRenderingServerSingleton[27] = classDB.get_method_bind("RenderingServer\000", "material_set_shader\000", 395945892)
		methodRenderingServerSingleton[28] = classDB.get_method_bind("RenderingServer\000", "material_set_param\000", 3477296213)
		methodRenderingServerSingleton[29] = classDB.get_method_bind("RenderingServer\000", "material_get_param\000", 2621281810)
		methodRenderingServerSingleton[30] = classDB.get_method_bind("RenderingServer\000", "material_set_render_priority\000", 3411492887)
		methodRenderingServerSingleton[31] = classDB.get_method_bind("RenderingServer\000", "material_set_next_pass\000", 395945892)
		methodRenderingServerSingleton[32] = classDB.get_method_bind("RenderingServer\000", "mesh_create_from_surfaces\000", 4007581507)
		methodRenderingServerSingleton[33] = classDB.get_method_bind("RenderingServer\000", "mesh_create\000", 529393457)
		methodRenderingServerSingleton[34] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_format_offset\000", 864943070)
		methodRenderingServerSingleton[35] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_format_vertex_stride\000", 3175239445)
		methodRenderingServerSingleton[36] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_format_attribute_stride\000", 3175239445)
		methodRenderingServerSingleton[37] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_format_skin_stride\000", 3175239445)
		methodRenderingServerSingleton[38] = classDB.get_method_bind("RenderingServer\000", "mesh_add_surface\000", 1217542888)
		methodRenderingServerSingleton[39] = classDB.get_method_bind("RenderingServer\000", "mesh_add_surface_from_arrays\000", 2954797512)
		methodRenderingServerSingleton[40] = classDB.get_method_bind("RenderingServer\000", "mesh_get_blend_shape_count\000", 2198884583)
		methodRenderingServerSingleton[41] = classDB.get_method_bind("RenderingServer\000", "mesh_set_blend_shape_mode\000", 1294662092)
		methodRenderingServerSingleton[42] = classDB.get_method_bind("RenderingServer\000", "mesh_get_blend_shape_mode\000", 4282291819)
		methodRenderingServerSingleton[43] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_set_material\000", 2310537182)
		methodRenderingServerSingleton[44] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_material\000", 1066463050)
		methodRenderingServerSingleton[45] = classDB.get_method_bind("RenderingServer\000", "mesh_get_surface\000", 186674697)
		methodRenderingServerSingleton[46] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_arrays\000", 1778388067)
		methodRenderingServerSingleton[47] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_get_blend_shape_arrays\000", 1778388067)
		methodRenderingServerSingleton[48] = classDB.get_method_bind("RenderingServer\000", "mesh_get_surface_count\000", 2198884583)
		methodRenderingServerSingleton[49] = classDB.get_method_bind("RenderingServer\000", "mesh_set_custom_aabb\000", 3696536120)
		methodRenderingServerSingleton[50] = classDB.get_method_bind("RenderingServer\000", "mesh_get_custom_aabb\000", 974181306)
		methodRenderingServerSingleton[51] = classDB.get_method_bind("RenderingServer\000", "mesh_clear\000", 2722037293)
		methodRenderingServerSingleton[52] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_update_vertex_region\000", 2900195149)
		methodRenderingServerSingleton[53] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_update_attribute_region\000", 2900195149)
		methodRenderingServerSingleton[54] = classDB.get_method_bind("RenderingServer\000", "mesh_surface_update_skin_region\000", 2900195149)
		methodRenderingServerSingleton[55] = classDB.get_method_bind("RenderingServer\000", "mesh_set_shadow_mesh\000", 395945892)
		methodRenderingServerSingleton[56] = classDB.get_method_bind("RenderingServer\000", "multimesh_create\000", 529393457)
		methodRenderingServerSingleton[57] = classDB.get_method_bind("RenderingServer\000", "multimesh_allocate_data\000", 283685892)
		methodRenderingServerSingleton[58] = classDB.get_method_bind("RenderingServer\000", "multimesh_get_instance_count\000", 2198884583)
		methodRenderingServerSingleton[59] = classDB.get_method_bind("RenderingServer\000", "multimesh_set_mesh\000", 395945892)
		methodRenderingServerSingleton[60] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_set_transform\000", 675327471)
		methodRenderingServerSingleton[61] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_set_transform_2d\000", 736082694)
		methodRenderingServerSingleton[62] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_set_color\000", 176975443)
		methodRenderingServerSingleton[63] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_set_custom_data\000", 176975443)
		methodRenderingServerSingleton[64] = classDB.get_method_bind("RenderingServer\000", "multimesh_get_mesh\000", 3814569979)
		methodRenderingServerSingleton[65] = classDB.get_method_bind("RenderingServer\000", "multimesh_get_aabb\000", 974181306)
		methodRenderingServerSingleton[66] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_get_transform\000", 1050775521)
		methodRenderingServerSingleton[67] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_get_transform_2d\000", 1324854622)
		methodRenderingServerSingleton[68] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_get_color\000", 2946315076)
		methodRenderingServerSingleton[69] = classDB.get_method_bind("RenderingServer\000", "multimesh_instance_get_custom_data\000", 2946315076)
		methodRenderingServerSingleton[70] = classDB.get_method_bind("RenderingServer\000", "multimesh_set_visible_instances\000", 3411492887)
		methodRenderingServerSingleton[71] = classDB.get_method_bind("RenderingServer\000", "multimesh_get_visible_instances\000", 2198884583)
		methodRenderingServerSingleton[72] = classDB.get_method_bind("RenderingServer\000", "multimesh_set_buffer\000", 2960552364)
		methodRenderingServerSingleton[73] = classDB.get_method_bind("RenderingServer\000", "multimesh_get_buffer\000", 3964669176)
		methodRenderingServerSingleton[74] = classDB.get_method_bind("RenderingServer\000", "skeleton_create\000", 529393457)
		methodRenderingServerSingleton[75] = classDB.get_method_bind("RenderingServer\000", "skeleton_allocate_data\000", 1904426712)
		methodRenderingServerSingleton[76] = classDB.get_method_bind("RenderingServer\000", "skeleton_get_bone_count\000", 2198884583)
		methodRenderingServerSingleton[77] = classDB.get_method_bind("RenderingServer\000", "skeleton_bone_set_transform\000", 675327471)
		methodRenderingServerSingleton[78] = classDB.get_method_bind("RenderingServer\000", "skeleton_bone_get_transform\000", 1050775521)
		methodRenderingServerSingleton[79] = classDB.get_method_bind("RenderingServer\000", "skeleton_bone_set_transform_2d\000", 736082694)
		methodRenderingServerSingleton[80] = classDB.get_method_bind("RenderingServer\000", "skeleton_bone_get_transform_2d\000", 1324854622)
		methodRenderingServerSingleton[81] = classDB.get_method_bind("RenderingServer\000", "skeleton_set_base_transform_2d\000", 1246044741)
		methodRenderingServerSingleton[82] = classDB.get_method_bind("RenderingServer\000", "directional_light_create\000", 529393457)
		methodRenderingServerSingleton[83] = classDB.get_method_bind("RenderingServer\000", "omni_light_create\000", 529393457)
		methodRenderingServerSingleton[84] = classDB.get_method_bind("RenderingServer\000", "spot_light_create\000", 529393457)
		methodRenderingServerSingleton[85] = classDB.get_method_bind("RenderingServer\000", "light_set_color\000", 2948539648)
		methodRenderingServerSingleton[86] = classDB.get_method_bind("RenderingServer\000", "light_set_param\000", 501936875)
		methodRenderingServerSingleton[87] = classDB.get_method_bind("RenderingServer\000", "light_set_shadow\000", 1265174801)
		methodRenderingServerSingleton[88] = classDB.get_method_bind("RenderingServer\000", "light_set_projector\000", 395945892)
		methodRenderingServerSingleton[89] = classDB.get_method_bind("RenderingServer\000", "light_set_negative\000", 1265174801)
		methodRenderingServerSingleton[90] = classDB.get_method_bind("RenderingServer\000", "light_set_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[91] = classDB.get_method_bind("RenderingServer\000", "light_set_distance_fade\000", 1622292572)
		methodRenderingServerSingleton[92] = classDB.get_method_bind("RenderingServer\000", "light_set_reverse_cull_face_mode\000", 1265174801)
		methodRenderingServerSingleton[93] = classDB.get_method_bind("RenderingServer\000", "light_set_bake_mode\000", 1048525260)
		methodRenderingServerSingleton[94] = classDB.get_method_bind("RenderingServer\000", "light_set_max_sdfgi_cascade\000", 3411492887)
		methodRenderingServerSingleton[95] = classDB.get_method_bind("RenderingServer\000", "light_omni_set_shadow_mode\000", 2552677200)
		methodRenderingServerSingleton[96] = classDB.get_method_bind("RenderingServer\000", "light_directional_set_shadow_mode\000", 380462970)
		methodRenderingServerSingleton[97] = classDB.get_method_bind("RenderingServer\000", "light_directional_set_blend_splits\000", 1265174801)
		methodRenderingServerSingleton[98] = classDB.get_method_bind("RenderingServer\000", "light_directional_set_sky_mode\000", 2559740754)
		methodRenderingServerSingleton[99] = classDB.get_method_bind("RenderingServer\000", "light_projectors_set_filter\000", 43944325)
		methodRenderingServerSingleton[100] = classDB.get_method_bind("RenderingServer\000", "positional_soft_shadow_filter_set_quality\000", 3613045266)
		methodRenderingServerSingleton[101] = classDB.get_method_bind("RenderingServer\000", "directional_soft_shadow_filter_set_quality\000", 3613045266)
		methodRenderingServerSingleton[102] = classDB.get_method_bind("RenderingServer\000", "directional_shadow_atlas_set_size\000", 300928843)
		methodRenderingServerSingleton[103] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_create\000", 529393457)
		methodRenderingServerSingleton[104] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_update_mode\000", 3853670147)
		methodRenderingServerSingleton[105] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_intensity\000", 1794382983)
		methodRenderingServerSingleton[106] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_ambient_mode\000", 184163074)
		methodRenderingServerSingleton[107] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_ambient_color\000", 2948539648)
		methodRenderingServerSingleton[108] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_ambient_energy\000", 1794382983)
		methodRenderingServerSingleton[109] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_max_distance\000", 1794382983)
		methodRenderingServerSingleton[110] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_extents\000", 3227306858)
		methodRenderingServerSingleton[111] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_origin_offset\000", 3227306858)
		methodRenderingServerSingleton[112] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_as_interior\000", 1265174801)
		methodRenderingServerSingleton[113] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_enable_box_projection\000", 1265174801)
		methodRenderingServerSingleton[114] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_enable_shadows\000", 1265174801)
		methodRenderingServerSingleton[115] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[116] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_resolution\000", 3411492887)
		methodRenderingServerSingleton[117] = classDB.get_method_bind("RenderingServer\000", "reflection_probe_set_mesh_lod_threshold\000", 1794382983)
		methodRenderingServerSingleton[118] = classDB.get_method_bind("RenderingServer\000", "decal_create\000", 529393457)
		methodRenderingServerSingleton[119] = classDB.get_method_bind("RenderingServer\000", "decal_set_extents\000", 3227306858)
		methodRenderingServerSingleton[120] = classDB.get_method_bind("RenderingServer\000", "decal_set_texture\000", 3953344054)
		methodRenderingServerSingleton[121] = classDB.get_method_bind("RenderingServer\000", "decal_set_emission_energy\000", 1794382983)
		methodRenderingServerSingleton[122] = classDB.get_method_bind("RenderingServer\000", "decal_set_albedo_mix\000", 1794382983)
		methodRenderingServerSingleton[123] = classDB.get_method_bind("RenderingServer\000", "decal_set_modulate\000", 2948539648)
		methodRenderingServerSingleton[124] = classDB.get_method_bind("RenderingServer\000", "decal_set_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[125] = classDB.get_method_bind("RenderingServer\000", "decal_set_distance_fade\000", 2972769666)
		methodRenderingServerSingleton[126] = classDB.get_method_bind("RenderingServer\000", "decal_set_fade\000", 2513314492)
		methodRenderingServerSingleton[127] = classDB.get_method_bind("RenderingServer\000", "decal_set_normal_fade\000", 1794382983)
		methodRenderingServerSingleton[128] = classDB.get_method_bind("RenderingServer\000", "decals_set_filter\000", 3519875702)
		methodRenderingServerSingleton[129] = classDB.get_method_bind("RenderingServer\000", "gi_set_use_half_resolution\000", 2586408642)
		methodRenderingServerSingleton[130] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_create\000", 529393457)
		methodRenderingServerSingleton[131] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_allocate_data\000", 4108223027)
		methodRenderingServerSingleton[132] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_octree_size\000", 2607699645)
		methodRenderingServerSingleton[133] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_octree_cells\000", 3348040486)
		methodRenderingServerSingleton[134] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_data_cells\000", 3348040486)
		methodRenderingServerSingleton[135] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_distance_field\000", 3348040486)
		methodRenderingServerSingleton[136] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_level_counts\000", 788230395)
		methodRenderingServerSingleton[137] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_get_to_cell_xform\000", 1128465797)
		methodRenderingServerSingleton[138] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_dynamic_range\000", 1794382983)
		methodRenderingServerSingleton[139] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_propagation\000", 1794382983)
		methodRenderingServerSingleton[140] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_energy\000", 1794382983)
		methodRenderingServerSingleton[141] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_bias\000", 1794382983)
		methodRenderingServerSingleton[142] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_normal_bias\000", 1794382983)
		methodRenderingServerSingleton[143] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_interior\000", 1265174801)
		methodRenderingServerSingleton[144] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_use_two_bounces\000", 1265174801)
		methodRenderingServerSingleton[145] = classDB.get_method_bind("RenderingServer\000", "voxel_gi_set_quality\000", 1538689978)
		methodRenderingServerSingleton[146] = classDB.get_method_bind("RenderingServer\000", "lightmap_create\000", 529393457)
		methodRenderingServerSingleton[147] = classDB.get_method_bind("RenderingServer\000", "lightmap_set_textures\000", 2646464759)
		methodRenderingServerSingleton[148] = classDB.get_method_bind("RenderingServer\000", "lightmap_set_probe_bounds\000", 3696536120)
		methodRenderingServerSingleton[149] = classDB.get_method_bind("RenderingServer\000", "lightmap_set_probe_interior\000", 1265174801)
		methodRenderingServerSingleton[150] = classDB.get_method_bind("RenderingServer\000", "lightmap_set_probe_capture_data\000", 3217845880)
		methodRenderingServerSingleton[151] = classDB.get_method_bind("RenderingServer\000", "lightmap_get_probe_capture_points\000", 808965560)
		methodRenderingServerSingleton[152] = classDB.get_method_bind("RenderingServer\000", "lightmap_get_probe_capture_sh\000", 1569415609)
		methodRenderingServerSingleton[153] = classDB.get_method_bind("RenderingServer\000", "lightmap_get_probe_capture_tetrahedra\000", 788230395)
		methodRenderingServerSingleton[154] = classDB.get_method_bind("RenderingServer\000", "lightmap_get_probe_capture_bsp_tree\000", 788230395)
		methodRenderingServerSingleton[155] = classDB.get_method_bind("RenderingServer\000", "lightmap_set_probe_capture_update_speed\000", 373806689)
		methodRenderingServerSingleton[156] = classDB.get_method_bind("RenderingServer\000", "particles_create\000", 529393457)
		methodRenderingServerSingleton[157] = classDB.get_method_bind("RenderingServer\000", "particles_set_mode\000", 3492270028)
		methodRenderingServerSingleton[158] = classDB.get_method_bind("RenderingServer\000", "particles_set_emitting\000", 1265174801)
		methodRenderingServerSingleton[159] = classDB.get_method_bind("RenderingServer\000", "particles_get_emitting\000", 3521089500)
		methodRenderingServerSingleton[160] = classDB.get_method_bind("RenderingServer\000", "particles_set_amount\000", 3411492887)
		methodRenderingServerSingleton[161] = classDB.get_method_bind("RenderingServer\000", "particles_set_lifetime\000", 1794382983)
		methodRenderingServerSingleton[162] = classDB.get_method_bind("RenderingServer\000", "particles_set_one_shot\000", 1265174801)
		methodRenderingServerSingleton[163] = classDB.get_method_bind("RenderingServer\000", "particles_set_pre_process_time\000", 1794382983)
		methodRenderingServerSingleton[164] = classDB.get_method_bind("RenderingServer\000", "particles_set_explosiveness_ratio\000", 1794382983)
		methodRenderingServerSingleton[165] = classDB.get_method_bind("RenderingServer\000", "particles_set_randomness_ratio\000", 1794382983)
		methodRenderingServerSingleton[166] = classDB.get_method_bind("RenderingServer\000", "particles_set_custom_aabb\000", 3696536120)
		methodRenderingServerSingleton[167] = classDB.get_method_bind("RenderingServer\000", "particles_set_speed_scale\000", 1794382983)
		methodRenderingServerSingleton[168] = classDB.get_method_bind("RenderingServer\000", "particles_set_use_local_coordinates\000", 1265174801)
		methodRenderingServerSingleton[169] = classDB.get_method_bind("RenderingServer\000", "particles_set_process_material\000", 395945892)
		methodRenderingServerSingleton[170] = classDB.get_method_bind("RenderingServer\000", "particles_set_fixed_fps\000", 3411492887)
		methodRenderingServerSingleton[171] = classDB.get_method_bind("RenderingServer\000", "particles_set_interpolate\000", 1265174801)
		methodRenderingServerSingleton[172] = classDB.get_method_bind("RenderingServer\000", "particles_set_fractional_delta\000", 1265174801)
		methodRenderingServerSingleton[173] = classDB.get_method_bind("RenderingServer\000", "particles_set_collision_base_size\000", 1794382983)
		methodRenderingServerSingleton[174] = classDB.get_method_bind("RenderingServer\000", "particles_set_transform_align\000", 3264971368)
		methodRenderingServerSingleton[175] = classDB.get_method_bind("RenderingServer\000", "particles_set_trails\000", 2010054925)
		methodRenderingServerSingleton[176] = classDB.get_method_bind("RenderingServer\000", "particles_set_trail_bind_poses\000", 684822712)
		methodRenderingServerSingleton[177] = classDB.get_method_bind("RenderingServer\000", "particles_is_inactive\000", 3521089500)
		methodRenderingServerSingleton[178] = classDB.get_method_bind("RenderingServer\000", "particles_request_process\000", 2722037293)
		methodRenderingServerSingleton[179] = classDB.get_method_bind("RenderingServer\000", "particles_restart\000", 2722037293)
		methodRenderingServerSingleton[180] = classDB.get_method_bind("RenderingServer\000", "particles_set_subemitter\000", 395945892)
		methodRenderingServerSingleton[181] = classDB.get_method_bind("RenderingServer\000", "particles_emit\000", 4043136117)
		methodRenderingServerSingleton[182] = classDB.get_method_bind("RenderingServer\000", "particles_set_draw_order\000", 935028487)
		methodRenderingServerSingleton[183] = classDB.get_method_bind("RenderingServer\000", "particles_set_draw_passes\000", 3411492887)
		methodRenderingServerSingleton[184] = classDB.get_method_bind("RenderingServer\000", "particles_set_draw_pass_mesh\000", 2310537182)
		methodRenderingServerSingleton[185] = classDB.get_method_bind("RenderingServer\000", "particles_get_current_aabb\000", 3952830260)
		methodRenderingServerSingleton[186] = classDB.get_method_bind("RenderingServer\000", "particles_set_emission_transform\000", 3935195649)
		methodRenderingServerSingleton[187] = classDB.get_method_bind("RenderingServer\000", "particles_collision_create\000", 529393457)
		methodRenderingServerSingleton[188] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_collision_type\000", 1497044930)
		methodRenderingServerSingleton[189] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[190] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_sphere_radius\000", 1794382983)
		methodRenderingServerSingleton[191] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_box_extents\000", 3227306858)
		methodRenderingServerSingleton[192] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_attractor_strength\000", 1794382983)
		methodRenderingServerSingleton[193] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_attractor_directionality\000", 1794382983)
		methodRenderingServerSingleton[194] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_attractor_attenuation\000", 1794382983)
		methodRenderingServerSingleton[195] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_field_texture\000", 395945892)
		methodRenderingServerSingleton[196] = classDB.get_method_bind("RenderingServer\000", "particles_collision_height_field_update\000", 2722037293)
		methodRenderingServerSingleton[197] = classDB.get_method_bind("RenderingServer\000", "particles_collision_set_height_field_resolution\000", 962977297)
		methodRenderingServerSingleton[198] = classDB.get_method_bind("RenderingServer\000", "fog_volume_create\000", 529393457)
		methodRenderingServerSingleton[199] = classDB.get_method_bind("RenderingServer\000", "fog_volume_set_shape\000", 3818703106)
		methodRenderingServerSingleton[200] = classDB.get_method_bind("RenderingServer\000", "fog_volume_set_extents\000", 3227306858)
		methodRenderingServerSingleton[201] = classDB.get_method_bind("RenderingServer\000", "fog_volume_set_material\000", 395945892)
		methodRenderingServerSingleton[202] = classDB.get_method_bind("RenderingServer\000", "visibility_notifier_create\000", 529393457)
		methodRenderingServerSingleton[203] = classDB.get_method_bind("RenderingServer\000", "visibility_notifier_set_aabb\000", 3696536120)
		methodRenderingServerSingleton[204] = classDB.get_method_bind("RenderingServer\000", "visibility_notifier_set_callbacks\000", 2689735388)
		methodRenderingServerSingleton[205] = classDB.get_method_bind("RenderingServer\000", "occluder_create\000", 529393457)
		methodRenderingServerSingleton[206] = classDB.get_method_bind("RenderingServer\000", "occluder_set_mesh\000", 3854404263)
		methodRenderingServerSingleton[207] = classDB.get_method_bind("RenderingServer\000", "camera_create\000", 529393457)
		methodRenderingServerSingleton[208] = classDB.get_method_bind("RenderingServer\000", "camera_set_perspective\000", 157498339)
		methodRenderingServerSingleton[209] = classDB.get_method_bind("RenderingServer\000", "camera_set_orthogonal\000", 157498339)
		methodRenderingServerSingleton[210] = classDB.get_method_bind("RenderingServer\000", "camera_set_frustum\000", 1889878953)
		methodRenderingServerSingleton[211] = classDB.get_method_bind("RenderingServer\000", "camera_set_transform\000", 3935195649)
		methodRenderingServerSingleton[212] = classDB.get_method_bind("RenderingServer\000", "camera_set_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[213] = classDB.get_method_bind("RenderingServer\000", "camera_set_environment\000", 395945892)
		methodRenderingServerSingleton[214] = classDB.get_method_bind("RenderingServer\000", "camera_set_camera_effects\000", 395945892)
		methodRenderingServerSingleton[215] = classDB.get_method_bind("RenderingServer\000", "camera_set_use_vertical_aspect\000", 1265174801)
		methodRenderingServerSingleton[216] = classDB.get_method_bind("RenderingServer\000", "viewport_create\000", 529393457)
		methodRenderingServerSingleton[217] = classDB.get_method_bind("RenderingServer\000", "viewport_set_use_xr\000", 1265174801)
		methodRenderingServerSingleton[218] = classDB.get_method_bind("RenderingServer\000", "viewport_set_size\000", 4288446313)
		methodRenderingServerSingleton[219] = classDB.get_method_bind("RenderingServer\000", "viewport_set_active\000", 1265174801)
		methodRenderingServerSingleton[220] = classDB.get_method_bind("RenderingServer\000", "viewport_set_parent_viewport\000", 395945892)
		methodRenderingServerSingleton[221] = classDB.get_method_bind("RenderingServer\000", "viewport_attach_to_screen\000", 1278520651)
		methodRenderingServerSingleton[222] = classDB.get_method_bind("RenderingServer\000", "viewport_set_render_direct_to_screen\000", 1265174801)
		methodRenderingServerSingleton[223] = classDB.get_method_bind("RenderingServer\000", "viewport_set_scaling_3d_mode\000", 2386524376)
		methodRenderingServerSingleton[224] = classDB.get_method_bind("RenderingServer\000", "viewport_set_scaling_3d_scale\000", 1794382983)
		methodRenderingServerSingleton[225] = classDB.get_method_bind("RenderingServer\000", "viewport_set_fsr_sharpness\000", 1794382983)
		methodRenderingServerSingleton[226] = classDB.get_method_bind("RenderingServer\000", "viewport_set_texture_mipmap_bias\000", 1794382983)
		methodRenderingServerSingleton[227] = classDB.get_method_bind("RenderingServer\000", "viewport_set_update_mode\000", 3161116010)
		methodRenderingServerSingleton[228] = classDB.get_method_bind("RenderingServer\000", "viewport_set_clear_mode\000", 3628367896)
		methodRenderingServerSingleton[229] = classDB.get_method_bind("RenderingServer\000", "viewport_get_texture\000", 3814569979)
		methodRenderingServerSingleton[230] = classDB.get_method_bind("RenderingServer\000", "viewport_set_disable_3d\000", 1265174801)
		methodRenderingServerSingleton[231] = classDB.get_method_bind("RenderingServer\000", "viewport_set_disable_2d\000", 1265174801)
		methodRenderingServerSingleton[232] = classDB.get_method_bind("RenderingServer\000", "viewport_set_disable_environment\000", 1265174801)
		methodRenderingServerSingleton[233] = classDB.get_method_bind("RenderingServer\000", "viewport_attach_camera\000", 395945892)
		methodRenderingServerSingleton[234] = classDB.get_method_bind("RenderingServer\000", "viewport_set_scenario\000", 395945892)
		methodRenderingServerSingleton[235] = classDB.get_method_bind("RenderingServer\000", "viewport_attach_canvas\000", 395945892)
		methodRenderingServerSingleton[236] = classDB.get_method_bind("RenderingServer\000", "viewport_remove_canvas\000", 395945892)
		methodRenderingServerSingleton[237] = classDB.get_method_bind("RenderingServer\000", "viewport_set_snap_2d_transforms_to_pixel\000", 1265174801)
		methodRenderingServerSingleton[238] = classDB.get_method_bind("RenderingServer\000", "viewport_set_snap_2d_vertices_to_pixel\000", 1265174801)
		methodRenderingServerSingleton[239] = classDB.get_method_bind("RenderingServer\000", "viewport_set_default_canvas_item_texture_filter\000", 1155129294)
		methodRenderingServerSingleton[240] = classDB.get_method_bind("RenderingServer\000", "viewport_set_default_canvas_item_texture_repeat\000", 1652956681)
		methodRenderingServerSingleton[241] = classDB.get_method_bind("RenderingServer\000", "viewport_set_canvas_transform\000", 3608606053)
		methodRenderingServerSingleton[242] = classDB.get_method_bind("RenderingServer\000", "viewport_set_canvas_stacking\000", 3713930247)
		methodRenderingServerSingleton[243] = classDB.get_method_bind("RenderingServer\000", "viewport_set_transparent_background\000", 1265174801)
		methodRenderingServerSingleton[244] = classDB.get_method_bind("RenderingServer\000", "viewport_set_global_canvas_transform\000", 1246044741)
		methodRenderingServerSingleton[245] = classDB.get_method_bind("RenderingServer\000", "viewport_set_sdf_oversize_and_scale\000", 1329198632)
		methodRenderingServerSingleton[246] = classDB.get_method_bind("RenderingServer\000", "viewport_set_positional_shadow_atlas_size\000", 1904426712)
		methodRenderingServerSingleton[247] = classDB.get_method_bind("RenderingServer\000", "viewport_set_positional_shadow_atlas_quadrant_subdivision\000", 4288446313)
		methodRenderingServerSingleton[248] = classDB.get_method_bind("RenderingServer\000", "viewport_set_msaa\000", 3764433340)
		methodRenderingServerSingleton[249] = classDB.get_method_bind("RenderingServer\000", "viewport_set_screen_space_aa\000", 1447279591)
		methodRenderingServerSingleton[250] = classDB.get_method_bind("RenderingServer\000", "viewport_set_use_taa\000", 1265174801)
		methodRenderingServerSingleton[251] = classDB.get_method_bind("RenderingServer\000", "viewport_set_use_debanding\000", 1265174801)
		methodRenderingServerSingleton[252] = classDB.get_method_bind("RenderingServer\000", "viewport_set_use_occlusion_culling\000", 1265174801)
		methodRenderingServerSingleton[253] = classDB.get_method_bind("RenderingServer\000", "viewport_set_occlusion_rays_per_thread\000", 1286410249)
		methodRenderingServerSingleton[254] = classDB.get_method_bind("RenderingServer\000", "viewport_set_occlusion_culling_build_quality\000", 2069725696)
		methodRenderingServerSingleton[255] = classDB.get_method_bind("RenderingServer\000", "viewport_get_render_info\000", 2041262392)
		methodRenderingServerSingleton[256] = classDB.get_method_bind("RenderingServer\000", "viewport_set_debug_draw\000", 2089420930)
		methodRenderingServerSingleton[257] = classDB.get_method_bind("RenderingServer\000", "viewport_set_measure_render_time\000", 1265174801)
		methodRenderingServerSingleton[258] = classDB.get_method_bind("RenderingServer\000", "viewport_get_measured_render_time_cpu\000", 866169185)
		methodRenderingServerSingleton[259] = classDB.get_method_bind("RenderingServer\000", "viewport_get_measured_render_time_gpu\000", 866169185)
		methodRenderingServerSingleton[260] = classDB.get_method_bind("RenderingServer\000", "viewport_set_vrs_mode\000", 398809874)
		methodRenderingServerSingleton[261] = classDB.get_method_bind("RenderingServer\000", "viewport_set_vrs_texture\000", 395945892)
		methodRenderingServerSingleton[262] = classDB.get_method_bind("RenderingServer\000", "sky_create\000", 529393457)
		methodRenderingServerSingleton[263] = classDB.get_method_bind("RenderingServer\000", "sky_set_radiance_size\000", 3411492887)
		methodRenderingServerSingleton[264] = classDB.get_method_bind("RenderingServer\000", "sky_set_mode\000", 3279019937)
		methodRenderingServerSingleton[265] = classDB.get_method_bind("RenderingServer\000", "sky_set_material\000", 395945892)
		methodRenderingServerSingleton[266] = classDB.get_method_bind("RenderingServer\000", "sky_bake_panorama\000", 3875285818)
		methodRenderingServerSingleton[267] = classDB.get_method_bind("RenderingServer\000", "environment_create\000", 529393457)
		methodRenderingServerSingleton[268] = classDB.get_method_bind("RenderingServer\000", "environment_set_background\000", 3937328877)
		methodRenderingServerSingleton[269] = classDB.get_method_bind("RenderingServer\000", "environment_set_sky\000", 395945892)
		methodRenderingServerSingleton[270] = classDB.get_method_bind("RenderingServer\000", "environment_set_sky_custom_fov\000", 1794382983)
		methodRenderingServerSingleton[271] = classDB.get_method_bind("RenderingServer\000", "environment_set_sky_orientation\000", 1735850857)
		methodRenderingServerSingleton[272] = classDB.get_method_bind("RenderingServer\000", "environment_set_bg_color\000", 2948539648)
		methodRenderingServerSingleton[273] = classDB.get_method_bind("RenderingServer\000", "environment_set_bg_energy\000", 1794382983)
		methodRenderingServerSingleton[274] = classDB.get_method_bind("RenderingServer\000", "environment_set_canvas_max_layer\000", 3411492887)
		methodRenderingServerSingleton[275] = classDB.get_method_bind("RenderingServer\000", "environment_set_ambient_light\000", 362573166)
		methodRenderingServerSingleton[276] = classDB.get_method_bind("RenderingServer\000", "environment_set_glow\000", 2421724940)
		methodRenderingServerSingleton[277] = classDB.get_method_bind("RenderingServer\000", "environment_set_tonemap\000", 2732704897)
		methodRenderingServerSingleton[278] = classDB.get_method_bind("RenderingServer\000", "environment_set_adjustment\000", 876799838)
		methodRenderingServerSingleton[279] = classDB.get_method_bind("RenderingServer\000", "environment_set_ssr\000", 3607294374)
		methodRenderingServerSingleton[280] = classDB.get_method_bind("RenderingServer\000", "environment_set_ssao\000", 3994732740)
		methodRenderingServerSingleton[281] = classDB.get_method_bind("RenderingServer\000", "environment_set_fog\000", 3810560768)
		methodRenderingServerSingleton[282] = classDB.get_method_bind("RenderingServer\000", "environment_set_sdfgi\000", 3519144388)
		methodRenderingServerSingleton[283] = classDB.get_method_bind("RenderingServer\000", "environment_set_volumetric_fog\000", 3689440217)
		methodRenderingServerSingleton[284] = classDB.get_method_bind("RenderingServer\000", "environment_glow_set_use_bicubic_upscale\000", 2586408642)
		methodRenderingServerSingleton[285] = classDB.get_method_bind("RenderingServer\000", "environment_glow_set_use_high_quality\000", 2586408642)
		methodRenderingServerSingleton[286] = classDB.get_method_bind("RenderingServer\000", "environment_set_ssr_roughness_quality\000", 1190026788)
		methodRenderingServerSingleton[287] = classDB.get_method_bind("RenderingServer\000", "environment_set_ssao_quality\000", 189753569)
		methodRenderingServerSingleton[288] = classDB.get_method_bind("RenderingServer\000", "environment_set_ssil_quality\000", 1713836683)
		methodRenderingServerSingleton[289] = classDB.get_method_bind("RenderingServer\000", "environment_set_sdfgi_ray_count\000", 340137951)
		methodRenderingServerSingleton[290] = classDB.get_method_bind("RenderingServer\000", "environment_set_sdfgi_frames_to_converge\000", 2182444374)
		methodRenderingServerSingleton[291] = classDB.get_method_bind("RenderingServer\000", "environment_set_sdfgi_frames_to_update_light\000", 1251144068)
		methodRenderingServerSingleton[292] = classDB.get_method_bind("RenderingServer\000", "environment_set_volumetric_fog_volume_size\000", 3937882851)
		methodRenderingServerSingleton[293] = classDB.get_method_bind("RenderingServer\000", "environment_set_volumetric_fog_filter_active\000", 2586408642)
		methodRenderingServerSingleton[294] = classDB.get_method_bind("RenderingServer\000", "environment_bake_panorama\000", 2452908646)
		methodRenderingServerSingleton[295] = classDB.get_method_bind("RenderingServer\000", "screen_space_roughness_limiter_set_active\000", 916716790)
		methodRenderingServerSingleton[296] = classDB.get_method_bind("RenderingServer\000", "sub_surface_scattering_set_quality\000", 64571803)
		methodRenderingServerSingleton[297] = classDB.get_method_bind("RenderingServer\000", "sub_surface_scattering_set_scale\000", 1017552074)
		methodRenderingServerSingleton[298] = classDB.get_method_bind("RenderingServer\000", "camera_effects_create\000", 529393457)
		methodRenderingServerSingleton[299] = classDB.get_method_bind("RenderingServer\000", "camera_effects_set_dof_blur_quality\000", 2220136795)
		methodRenderingServerSingleton[300] = classDB.get_method_bind("RenderingServer\000", "camera_effects_set_dof_blur_bokeh_shape\000", 1205058394)
		methodRenderingServerSingleton[301] = classDB.get_method_bind("RenderingServer\000", "camera_effects_set_dof_blur\000", 316272616)
		methodRenderingServerSingleton[302] = classDB.get_method_bind("RenderingServer\000", "camera_effects_set_custom_exposure\000", 2010054925)
		methodRenderingServerSingleton[303] = classDB.get_method_bind("RenderingServer\000", "scenario_create\000", 529393457)
		methodRenderingServerSingleton[304] = classDB.get_method_bind("RenderingServer\000", "scenario_set_environment\000", 395945892)
		methodRenderingServerSingleton[305] = classDB.get_method_bind("RenderingServer\000", "scenario_set_fallback_environment\000", 395945892)
		methodRenderingServerSingleton[306] = classDB.get_method_bind("RenderingServer\000", "scenario_set_camera_effects\000", 395945892)
		methodRenderingServerSingleton[307] = classDB.get_method_bind("RenderingServer\000", "instance_create2\000", 746547085)
		methodRenderingServerSingleton[308] = classDB.get_method_bind("RenderingServer\000", "instance_create\000", 529393457)
		methodRenderingServerSingleton[309] = classDB.get_method_bind("RenderingServer\000", "instance_set_base\000", 395945892)
		methodRenderingServerSingleton[310] = classDB.get_method_bind("RenderingServer\000", "instance_set_scenario\000", 395945892)
		methodRenderingServerSingleton[311] = classDB.get_method_bind("RenderingServer\000", "instance_set_layer_mask\000", 3411492887)
		methodRenderingServerSingleton[312] = classDB.get_method_bind("RenderingServer\000", "instance_set_transform\000", 3935195649)
		methodRenderingServerSingleton[313] = classDB.get_method_bind("RenderingServer\000", "instance_attach_object_instance_id\000", 3411492887)
		methodRenderingServerSingleton[314] = classDB.get_method_bind("RenderingServer\000", "instance_set_blend_shape_weight\000", 1892459533)
		methodRenderingServerSingleton[315] = classDB.get_method_bind("RenderingServer\000", "instance_set_surface_override_material\000", 2310537182)
		methodRenderingServerSingleton[316] = classDB.get_method_bind("RenderingServer\000", "instance_set_visible\000", 1265174801)
		methodRenderingServerSingleton[317] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_transparency\000", 1794382983)
		methodRenderingServerSingleton[318] = classDB.get_method_bind("RenderingServer\000", "instance_set_custom_aabb\000", 3696536120)
		methodRenderingServerSingleton[319] = classDB.get_method_bind("RenderingServer\000", "instance_attach_skeleton\000", 395945892)
		methodRenderingServerSingleton[320] = classDB.get_method_bind("RenderingServer\000", "instance_set_extra_visibility_margin\000", 1794382983)
		methodRenderingServerSingleton[321] = classDB.get_method_bind("RenderingServer\000", "instance_set_visibility_parent\000", 395945892)
		methodRenderingServerSingleton[322] = classDB.get_method_bind("RenderingServer\000", "instance_set_ignore_culling\000", 1265174801)
		methodRenderingServerSingleton[323] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_flag\000", 1014989537)
		methodRenderingServerSingleton[324] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_cast_shadows_setting\000", 3768836020)
		methodRenderingServerSingleton[325] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_material_override\000", 395945892)
		methodRenderingServerSingleton[326] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_material_overlay\000", 395945892)
		methodRenderingServerSingleton[327] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_visibility_range\000", 4263925858)
		methodRenderingServerSingleton[328] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_lightmap\000", 536974962)
		methodRenderingServerSingleton[329] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_lod_bias\000", 1794382983)
		methodRenderingServerSingleton[330] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_set_shader_uniform\000", 3477296213)
		methodRenderingServerSingleton[331] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_get_shader_uniform\000", 2621281810)
		methodRenderingServerSingleton[332] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_get_shader_uniform_default_value\000", 2621281810)
		methodRenderingServerSingleton[333] = classDB.get_method_bind("RenderingServer\000", "instance_geometry_get_shader_uniform_list\000", 2684255073)
		methodRenderingServerSingleton[334] = classDB.get_method_bind("RenderingServer\000", "instances_cull_aabb\000", 2031554939)
		methodRenderingServerSingleton[335] = classDB.get_method_bind("RenderingServer\000", "instances_cull_ray\000", 3388524336)
		methodRenderingServerSingleton[336] = classDB.get_method_bind("RenderingServer\000", "instances_cull_convex\000", 3690700105)
		methodRenderingServerSingleton[337] = classDB.get_method_bind("RenderingServer\000", "bake_render_uv2\000", 1904608558)
		methodRenderingServerSingleton[338] = classDB.get_method_bind("RenderingServer\000", "canvas_create\000", 529393457)
		methodRenderingServerSingleton[339] = classDB.get_method_bind("RenderingServer\000", "canvas_set_item_mirroring\000", 2343975398)
		methodRenderingServerSingleton[340] = classDB.get_method_bind("RenderingServer\000", "canvas_set_modulate\000", 2948539648)
		methodRenderingServerSingleton[341] = classDB.get_method_bind("RenderingServer\000", "canvas_set_disable_scale\000", 2586408642)
		methodRenderingServerSingleton[342] = classDB.get_method_bind("RenderingServer\000", "canvas_texture_create\000", 529393457)
		methodRenderingServerSingleton[343] = classDB.get_method_bind("RenderingServer\000", "canvas_texture_set_channel\000", 3822119138)
		methodRenderingServerSingleton[344] = classDB.get_method_bind("RenderingServer\000", "canvas_texture_set_shading_parameters\000", 2124967469)
		methodRenderingServerSingleton[345] = classDB.get_method_bind("RenderingServer\000", "canvas_texture_set_texture_filter\000", 1155129294)
		methodRenderingServerSingleton[346] = classDB.get_method_bind("RenderingServer\000", "canvas_texture_set_texture_repeat\000", 1652956681)
		methodRenderingServerSingleton[347] = classDB.get_method_bind("RenderingServer\000", "canvas_item_create\000", 529393457)
		methodRenderingServerSingleton[348] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_parent\000", 395945892)
		methodRenderingServerSingleton[349] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_default_texture_filter\000", 1155129294)
		methodRenderingServerSingleton[350] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_default_texture_repeat\000", 1652956681)
		methodRenderingServerSingleton[351] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_visible\000", 1265174801)
		methodRenderingServerSingleton[352] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_light_mask\000", 3411492887)
		methodRenderingServerSingleton[353] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_transform\000", 1246044741)
		methodRenderingServerSingleton[354] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_clip\000", 1265174801)
		methodRenderingServerSingleton[355] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_distance_field_mode\000", 1265174801)
		methodRenderingServerSingleton[356] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_custom_rect\000", 2180266943)
		methodRenderingServerSingleton[357] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_modulate\000", 2948539648)
		methodRenderingServerSingleton[358] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_self_modulate\000", 2948539648)
		methodRenderingServerSingleton[359] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_draw_behind_parent\000", 1265174801)
		methodRenderingServerSingleton[360] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_line\000", 2843922985)
		methodRenderingServerSingleton[361] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_polyline\000", 3438017257)
		methodRenderingServerSingleton[362] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_rect\000", 934531857)
		methodRenderingServerSingleton[363] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_circle\000", 2439351960)
		methodRenderingServerSingleton[364] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_texture_rect\000", 3205360868)
		methodRenderingServerSingleton[365] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_msdf_texture_rect_region\000", 4239856677)
		methodRenderingServerSingleton[366] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_lcd_texture_rect_region\000", 359793297)
		methodRenderingServerSingleton[367] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_texture_rect_region\000", 2782979504)
		methodRenderingServerSingleton[368] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_nine_patch\000", 904428547)
		methodRenderingServerSingleton[369] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_primitive\000", 3826547603)
		methodRenderingServerSingleton[370] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_polygon\000", 2907936855)
		methodRenderingServerSingleton[371] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_triangle_array\000", 749685193)
		methodRenderingServerSingleton[372] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_mesh\000", 3548053052)
		methodRenderingServerSingleton[373] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_multimesh\000", 1541595251)
		methodRenderingServerSingleton[374] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_particles\000", 2575754278)
		methodRenderingServerSingleton[375] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_set_transform\000", 1246044741)
		methodRenderingServerSingleton[376] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_clip_ignore\000", 1265174801)
		methodRenderingServerSingleton[377] = classDB.get_method_bind("RenderingServer\000", "canvas_item_add_animation_slice\000", 4107531031)
		methodRenderingServerSingleton[378] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_sort_children_by_y\000", 1265174801)
		methodRenderingServerSingleton[379] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_z_index\000", 3411492887)
		methodRenderingServerSingleton[380] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_z_as_relative_to_parent\000", 1265174801)
		methodRenderingServerSingleton[381] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_copy_to_backbuffer\000", 2429202503)
		methodRenderingServerSingleton[382] = classDB.get_method_bind("RenderingServer\000", "canvas_item_clear\000", 2722037293)
		methodRenderingServerSingleton[383] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_draw_index\000", 3411492887)
		methodRenderingServerSingleton[384] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_material\000", 395945892)
		methodRenderingServerSingleton[385] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_use_parent_material\000", 1265174801)
		methodRenderingServerSingleton[386] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_visibility_notifier\000", 3568945579)
		methodRenderingServerSingleton[387] = classDB.get_method_bind("RenderingServer\000", "canvas_item_set_canvas_group_mode\000", 1568036344)
		methodRenderingServerSingleton[388] = classDB.get_method_bind("RenderingServer\000", "canvas_light_create\000", 529393457)
		methodRenderingServerSingleton[389] = classDB.get_method_bind("RenderingServer\000", "canvas_light_attach_to_canvas\000", 395945892)
		methodRenderingServerSingleton[390] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_enabled\000", 1265174801)
		methodRenderingServerSingleton[391] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_texture_scale\000", 1794382983)
		methodRenderingServerSingleton[392] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_transform\000", 1246044741)
		methodRenderingServerSingleton[393] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_texture\000", 395945892)
		methodRenderingServerSingleton[394] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_texture_offset\000", 3201125042)
		methodRenderingServerSingleton[395] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_color\000", 2948539648)
		methodRenderingServerSingleton[396] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_height\000", 1794382983)
		methodRenderingServerSingleton[397] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_energy\000", 1794382983)
		methodRenderingServerSingleton[398] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_z_range\000", 4288446313)
		methodRenderingServerSingleton[399] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_layer_range\000", 4288446313)
		methodRenderingServerSingleton[400] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_item_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[401] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_item_shadow_cull_mask\000", 3411492887)
		methodRenderingServerSingleton[402] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_mode\000", 2957564891)
		methodRenderingServerSingleton[403] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_shadow_enabled\000", 1265174801)
		methodRenderingServerSingleton[404] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_shadow_filter\000", 393119659)
		methodRenderingServerSingleton[405] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_shadow_color\000", 2948539648)
		methodRenderingServerSingleton[406] = classDB.get_method_bind("RenderingServer\000", "canvas_light_set_shadow_smooth\000", 1794382983)
		methodRenderingServerSingleton[407] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_create\000", 529393457)
		methodRenderingServerSingleton[408] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_attach_to_canvas\000", 395945892)
		methodRenderingServerSingleton[409] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_set_enabled\000", 1265174801)
		methodRenderingServerSingleton[410] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_set_polygon\000", 395945892)
		methodRenderingServerSingleton[411] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_set_as_sdf_collision\000", 1265174801)
		methodRenderingServerSingleton[412] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_set_transform\000", 1246044741)
		methodRenderingServerSingleton[413] = classDB.get_method_bind("RenderingServer\000", "canvas_light_occluder_set_light_mask\000", 3411492887)
		methodRenderingServerSingleton[414] = classDB.get_method_bind("RenderingServer\000", "canvas_occluder_polygon_create\000", 529393457)
		methodRenderingServerSingleton[415] = classDB.get_method_bind("RenderingServer\000", "canvas_occluder_polygon_set_shape\000", 2103882027)
		methodRenderingServerSingleton[416] = classDB.get_method_bind("RenderingServer\000", "canvas_occluder_polygon_set_cull_mode\000", 1839404663)
		methodRenderingServerSingleton[417] = classDB.get_method_bind("RenderingServer\000", "canvas_set_shadow_texture_size\000", 1286410249)
		methodRenderingServerSingleton[418] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_add\000", 2580774935)
		methodRenderingServerSingleton[419] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_remove\000", 3304788590)
		methodRenderingServerSingleton[420] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_get_list\000", 1139954409)
		methodRenderingServerSingleton[421] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_set\000", 3776071444)
		methodRenderingServerSingleton[422] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_set_override\000", 3776071444)
		methodRenderingServerSingleton[423] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_get\000", 2760726917)
		methodRenderingServerSingleton[424] = classDB.get_method_bind("RenderingServer\000", "global_shader_uniform_get_type\000", 1808916393)
		methodRenderingServerSingleton[425] = classDB.get_method_bind("RenderingServer\000", "free_rid\000", 2722037293)
		methodRenderingServerSingleton[426] = classDB.get_method_bind("RenderingServer\000", "request_frame_drawn_callback\000", 1611583062)
		methodRenderingServerSingleton[427] = classDB.get_method_bind("RenderingServer\000", "has_changed\000", 36873697)
		methodRenderingServerSingleton[428] = classDB.get_method_bind("RenderingServer\000", "get_rendering_info\000", 3763192241)
		methodRenderingServerSingleton[429] = classDB.get_method_bind("RenderingServer\000", "get_video_adapter_name\000", 201670096)
		methodRenderingServerSingleton[430] = classDB.get_method_bind("RenderingServer\000", "get_video_adapter_vendor\000", 201670096)
		methodRenderingServerSingleton[431] = classDB.get_method_bind("RenderingServer\000", "get_video_adapter_type\000", 3099547011)
		methodRenderingServerSingleton[432] = classDB.get_method_bind("RenderingServer\000", "get_video_adapter_api_version\000", 201670096)
		methodRenderingServerSingleton[433] = classDB.get_method_bind("RenderingServer\000", "make_sphere_mesh\000", 2251015897)
		methodRenderingServerSingleton[434] = classDB.get_method_bind("RenderingServer\000", "get_test_cube\000", 529393457)
		methodRenderingServerSingleton[435] = classDB.get_method_bind("RenderingServer\000", "get_test_texture\000", 529393457)
		methodRenderingServerSingleton[436] = classDB.get_method_bind("RenderingServer\000", "get_white_texture\000", 529393457)
		methodRenderingServerSingleton[437] = classDB.get_method_bind("RenderingServer\000", "set_boot_image\000", 2244367877)
		methodRenderingServerSingleton[438] = classDB.get_method_bind("RenderingServer\000", "set_default_clear_color\000", 2920490490)
		methodRenderingServerSingleton[439] = classDB.get_method_bind("RenderingServer\000", "has_feature\000", 598462696)
		methodRenderingServerSingleton[440] = classDB.get_method_bind("RenderingServer\000", "has_os_feature\000", 3927539163)
		methodRenderingServerSingleton[441] = classDB.get_method_bind("RenderingServer\000", "set_debug_generate_wireframes\000", 2586408642)
		methodRenderingServerSingleton[442] = classDB.get_method_bind("RenderingServer\000", "is_render_loop_enabled\000", 36873697)
		methodRenderingServerSingleton[443] = classDB.get_method_bind("RenderingServer\000", "set_render_loop_enabled\000", 2586408642)
		methodRenderingServerSingleton[444] = classDB.get_method_bind("RenderingServer\000", "get_frame_setup_time_cpu\000", 1740695150)
		methodRenderingServerSingleton[445] = classDB.get_method_bind("RenderingServer\000", "force_sync\000", 3218959716)
		methodRenderingServerSingleton[446] = classDB.get_method_bind("RenderingServer\000", "force_draw\000", 899045543)
		methodRenderingServerSingleton[447] = classDB.get_method_bind("RenderingServer\000", "get_rendering_device\000", 1405107940)
		methodRenderingServerSingleton[448] = classDB.get_method_bind("RenderingServer\000", "create_local_rendering_device\000", 1405107940)
		methodResource[0] = classDB.get_method_bind("Resource\000", "set_path\000", 83702148)
		methodResource[1] = classDB.get_method_bind("Resource\000", "take_over_path\000", 83702148)
		methodResource[2] = classDB.get_method_bind("Resource\000", "get_path\000", 201670096)
		methodResource[3] = classDB.get_method_bind("Resource\000", "set_name\000", 83702148)
		methodResource[4] = classDB.get_method_bind("Resource\000", "get_name\000", 201670096)
		methodResource[5] = classDB.get_method_bind("Resource\000", "get_rid\000", 2944877500)
		methodResource[6] = classDB.get_method_bind("Resource\000", "set_local_to_scene\000", 2586408642)
		methodResource[7] = classDB.get_method_bind("Resource\000", "is_local_to_scene\000", 36873697)
		methodResource[8] = classDB.get_method_bind("Resource\000", "get_local_scene\000", 3160264692)
		methodResource[9] = classDB.get_method_bind("Resource\000", "setup_local_to_scene\000", 3218959716)
		methodResource[10] = classDB.get_method_bind("Resource\000", "emit_changed\000", 3218959716)
		methodResource[11] = classDB.get_method_bind("Resource\000", "duplicate\000", 482882304)
		methodResourceLoaderSingleton[0] = classDB.get_method_bind("ResourceLoader\000", "load_threaded_request\000", 1939848623)
		methodResourceLoaderSingleton[1] = classDB.get_method_bind("ResourceLoader\000", "load_threaded_get_status\000", 3931021148)
		methodResourceLoaderSingleton[2] = classDB.get_method_bind("ResourceLoader\000", "load_threaded_get\000", 1748875256)
		methodResourceLoaderSingleton[3] = classDB.get_method_bind("ResourceLoader\000", "load\000", 2622212233)
		methodResourceLoaderSingleton[4] = classDB.get_method_bind("ResourceLoader\000", "get_recognized_extensions_for_type\000", 3538744774)
		methodResourceLoaderSingleton[5] = classDB.get_method_bind("ResourceLoader\000", "add_resource_format_loader\000", 2896595483)
		methodResourceLoaderSingleton[6] = classDB.get_method_bind("ResourceLoader\000", "remove_resource_format_loader\000", 405397102)
		methodResourceLoaderSingleton[7] = classDB.get_method_bind("ResourceLoader\000", "set_abort_on_missing_resources\000", 2586408642)
		methodResourceLoaderSingleton[8] = classDB.get_method_bind("ResourceLoader\000", "get_dependencies\000", 3538744774)
		methodResourceLoaderSingleton[9] = classDB.get_method_bind("ResourceLoader\000", "has_cached\000", 2323990056)
		methodResourceLoaderSingleton[10] = classDB.get_method_bind("ResourceLoader\000", "exists\000", 2220807150)
		methodResourceLoaderSingleton[11] = classDB.get_method_bind("ResourceLoader\000", "get_resource_uid\000", 1597066294)
		methodResourcePreloader[0] = classDB.get_method_bind("ResourcePreloader\000", "add_resource\000", 1168801743)
		methodResourcePreloader[1] = classDB.get_method_bind("ResourcePreloader\000", "remove_resource\000", 3304788590)
		methodResourcePreloader[2] = classDB.get_method_bind("ResourcePreloader\000", "rename_resource\000", 3740211285)
		methodResourcePreloader[3] = classDB.get_method_bind("ResourcePreloader\000", "has_resource\000", 2619796661)
		methodResourcePreloader[4] = classDB.get_method_bind("ResourcePreloader\000", "get_resource\000", 3742749261)
		methodResourcePreloader[5] = classDB.get_method_bind("ResourcePreloader\000", "get_resource_list\000", 1139954409)
		methodResourceSaverSingleton[0] = classDB.get_method_bind("ResourceSaver\000", "save\000", 2303056517)
		methodResourceSaverSingleton[1] = classDB.get_method_bind("ResourceSaver\000", "get_recognized_extensions\000", 4223597960)
		methodResourceSaverSingleton[2] = classDB.get_method_bind("ResourceSaver\000", "add_resource_format_saver\000", 362894272)
		methodResourceSaverSingleton[3] = classDB.get_method_bind("ResourceSaver\000", "remove_resource_format_saver\000", 3373026878)
		methodResourceUIDSingleton[0] = classDB.get_method_bind("ResourceUID\000", "id_to_text\000", 844755477)
		methodResourceUIDSingleton[1] = classDB.get_method_bind("ResourceUID\000", "text_to_id\000", 1321353865)
		methodResourceUIDSingleton[2] = classDB.get_method_bind("ResourceUID\000", "create_id\000", 2455072627)
		methodResourceUIDSingleton[3] = classDB.get_method_bind("ResourceUID\000", "has_id\000", 1116898809)
		methodResourceUIDSingleton[4] = classDB.get_method_bind("ResourceUID\000", "add_id\000", 501894301)
		methodResourceUIDSingleton[5] = classDB.get_method_bind("ResourceUID\000", "set_id\000", 501894301)
		methodResourceUIDSingleton[6] = classDB.get_method_bind("ResourceUID\000", "get_id_path\000", 844755477)
		methodResourceUIDSingleton[7] = classDB.get_method_bind("ResourceUID\000", "remove_id\000", 1286410249)
		methodRibbonTrailMesh[0] = classDB.get_method_bind("RibbonTrailMesh\000", "set_size\000", 373806689)
		methodRibbonTrailMesh[1] = classDB.get_method_bind("RibbonTrailMesh\000", "get_size\000", 1740695150)
		methodRibbonTrailMesh[2] = classDB.get_method_bind("RibbonTrailMesh\000", "set_sections\000", 1286410249)
		methodRibbonTrailMesh[3] = classDB.get_method_bind("RibbonTrailMesh\000", "get_sections\000", 3905245786)
		methodRibbonTrailMesh[4] = classDB.get_method_bind("RibbonTrailMesh\000", "set_section_length\000", 373806689)
		methodRibbonTrailMesh[5] = classDB.get_method_bind("RibbonTrailMesh\000", "get_section_length\000", 1740695150)
		methodRibbonTrailMesh[6] = classDB.get_method_bind("RibbonTrailMesh\000", "set_section_segments\000", 1286410249)
		methodRibbonTrailMesh[7] = classDB.get_method_bind("RibbonTrailMesh\000", "get_section_segments\000", 3905245786)
		methodRibbonTrailMesh[8] = classDB.get_method_bind("RibbonTrailMesh\000", "set_curve\000", 270443179)
		methodRibbonTrailMesh[9] = classDB.get_method_bind("RibbonTrailMesh\000", "get_curve\000", 2460114913)
		methodRibbonTrailMesh[10] = classDB.get_method_bind("RibbonTrailMesh\000", "set_shape\000", 1684440262)
		methodRibbonTrailMesh[11] = classDB.get_method_bind("RibbonTrailMesh\000", "get_shape\000", 1317484155)
		methodRichTextLabel[0] = classDB.get_method_bind("RichTextLabel\000", "get_parsed_text\000", 201670096)
		methodRichTextLabel[1] = classDB.get_method_bind("RichTextLabel\000", "add_text\000", 83702148)
		methodRichTextLabel[2] = classDB.get_method_bind("RichTextLabel\000", "set_text\000", 83702148)
		methodRichTextLabel[3] = classDB.get_method_bind("RichTextLabel\000", "add_image\000", 369227336)
		methodRichTextLabel[4] = classDB.get_method_bind("RichTextLabel\000", "newline\000", 3218959716)
		methodRichTextLabel[5] = classDB.get_method_bind("RichTextLabel\000", "remove_line\000", 3067735520)
		methodRichTextLabel[6] = classDB.get_method_bind("RichTextLabel\000", "push_font\000", 3014009009)
		methodRichTextLabel[7] = classDB.get_method_bind("RichTextLabel\000", "push_font_size\000", 1286410249)
		methodRichTextLabel[8] = classDB.get_method_bind("RichTextLabel\000", "push_normal\000", 3218959716)
		methodRichTextLabel[9] = classDB.get_method_bind("RichTextLabel\000", "push_bold\000", 3218959716)
		methodRichTextLabel[10] = classDB.get_method_bind("RichTextLabel\000", "push_bold_italics\000", 3218959716)
		methodRichTextLabel[11] = classDB.get_method_bind("RichTextLabel\000", "push_italics\000", 3218959716)
		methodRichTextLabel[12] = classDB.get_method_bind("RichTextLabel\000", "push_mono\000", 3218959716)
		methodRichTextLabel[13] = classDB.get_method_bind("RichTextLabel\000", "push_color\000", 2920490490)
		methodRichTextLabel[14] = classDB.get_method_bind("RichTextLabel\000", "push_outline_size\000", 1286410249)
		methodRichTextLabel[15] = classDB.get_method_bind("RichTextLabel\000", "push_outline_color\000", 2920490490)
		methodRichTextLabel[16] = classDB.get_method_bind("RichTextLabel\000", "push_paragraph\000", 1037160898)
		methodRichTextLabel[17] = classDB.get_method_bind("RichTextLabel\000", "push_indent\000", 1286410249)
		methodRichTextLabel[18] = classDB.get_method_bind("RichTextLabel\000", "push_list\000", 2241060727)
		methodRichTextLabel[19] = classDB.get_method_bind("RichTextLabel\000", "push_meta\000", 1114965689)
		methodRichTextLabel[20] = classDB.get_method_bind("RichTextLabel\000", "push_hint\000", 83702148)
		methodRichTextLabel[21] = classDB.get_method_bind("RichTextLabel\000", "push_underline\000", 3218959716)
		methodRichTextLabel[22] = classDB.get_method_bind("RichTextLabel\000", "push_strikethrough\000", 3218959716)
		methodRichTextLabel[23] = classDB.get_method_bind("RichTextLabel\000", "push_table\000", 740069725)
		methodRichTextLabel[24] = classDB.get_method_bind("RichTextLabel\000", "push_dropcap\000", 311501835)
		methodRichTextLabel[25] = classDB.get_method_bind("RichTextLabel\000", "set_table_column_expand\000", 4258957458)
		methodRichTextLabel[26] = classDB.get_method_bind("RichTextLabel\000", "set_cell_row_background_color\000", 3465483165)
		methodRichTextLabel[27] = classDB.get_method_bind("RichTextLabel\000", "set_cell_border_color\000", 2920490490)
		methodRichTextLabel[28] = classDB.get_method_bind("RichTextLabel\000", "set_cell_size_override\000", 3108078480)
		methodRichTextLabel[29] = classDB.get_method_bind("RichTextLabel\000", "set_cell_padding\000", 2046264180)
		methodRichTextLabel[30] = classDB.get_method_bind("RichTextLabel\000", "push_cell\000", 3218959716)
		methodRichTextLabel[31] = classDB.get_method_bind("RichTextLabel\000", "push_fgcolor\000", 2920490490)
		methodRichTextLabel[32] = classDB.get_method_bind("RichTextLabel\000", "push_bgcolor\000", 2920490490)
		methodRichTextLabel[33] = classDB.get_method_bind("RichTextLabel\000", "pop\000", 3218959716)
		methodRichTextLabel[34] = classDB.get_method_bind("RichTextLabel\000", "clear\000", 3218959716)
		methodRichTextLabel[35] = classDB.get_method_bind("RichTextLabel\000", "set_structured_text_bidi_override\000", 55961453)
		methodRichTextLabel[36] = classDB.get_method_bind("RichTextLabel\000", "get_structured_text_bidi_override\000", 3385126229)
		methodRichTextLabel[37] = classDB.get_method_bind("RichTextLabel\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodRichTextLabel[38] = classDB.get_method_bind("RichTextLabel\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodRichTextLabel[39] = classDB.get_method_bind("RichTextLabel\000", "set_text_direction\000", 119160795)
		methodRichTextLabel[40] = classDB.get_method_bind("RichTextLabel\000", "get_text_direction\000", 797257663)
		methodRichTextLabel[41] = classDB.get_method_bind("RichTextLabel\000", "set_language\000", 83702148)
		methodRichTextLabel[42] = classDB.get_method_bind("RichTextLabel\000", "get_language\000", 201670096)
		methodRichTextLabel[43] = classDB.get_method_bind("RichTextLabel\000", "set_autowrap_mode\000", 3289138044)
		methodRichTextLabel[44] = classDB.get_method_bind("RichTextLabel\000", "get_autowrap_mode\000", 1549071663)
		methodRichTextLabel[45] = classDB.get_method_bind("RichTextLabel\000", "set_meta_underline\000", 2586408642)
		methodRichTextLabel[46] = classDB.get_method_bind("RichTextLabel\000", "is_meta_underlined\000", 36873697)
		methodRichTextLabel[47] = classDB.get_method_bind("RichTextLabel\000", "set_hint_underline\000", 2586408642)
		methodRichTextLabel[48] = classDB.get_method_bind("RichTextLabel\000", "is_hint_underlined\000", 36873697)
		methodRichTextLabel[49] = classDB.get_method_bind("RichTextLabel\000", "set_override_selected_font_color\000", 2586408642)
		methodRichTextLabel[50] = classDB.get_method_bind("RichTextLabel\000", "is_overriding_selected_font_color\000", 36873697)
		methodRichTextLabel[51] = classDB.get_method_bind("RichTextLabel\000", "set_scroll_active\000", 2586408642)
		methodRichTextLabel[52] = classDB.get_method_bind("RichTextLabel\000", "is_scroll_active\000", 36873697)
		methodRichTextLabel[53] = classDB.get_method_bind("RichTextLabel\000", "set_scroll_follow\000", 2586408642)
		methodRichTextLabel[54] = classDB.get_method_bind("RichTextLabel\000", "is_scroll_following\000", 36873697)
		methodRichTextLabel[55] = classDB.get_method_bind("RichTextLabel\000", "get_v_scroll_bar\000", 2630340773)
		methodRichTextLabel[56] = classDB.get_method_bind("RichTextLabel\000", "scroll_to_line\000", 1286410249)
		methodRichTextLabel[57] = classDB.get_method_bind("RichTextLabel\000", "scroll_to_paragraph\000", 1286410249)
		methodRichTextLabel[58] = classDB.get_method_bind("RichTextLabel\000", "set_tab_size\000", 1286410249)
		methodRichTextLabel[59] = classDB.get_method_bind("RichTextLabel\000", "get_tab_size\000", 3905245786)
		methodRichTextLabel[60] = classDB.get_method_bind("RichTextLabel\000", "set_fit_content_height\000", 2586408642)
		methodRichTextLabel[61] = classDB.get_method_bind("RichTextLabel\000", "is_fit_content_height_enabled\000", 36873697)
		methodRichTextLabel[62] = classDB.get_method_bind("RichTextLabel\000", "set_selection_enabled\000", 2586408642)
		methodRichTextLabel[63] = classDB.get_method_bind("RichTextLabel\000", "is_selection_enabled\000", 36873697)
		methodRichTextLabel[64] = classDB.get_method_bind("RichTextLabel\000", "set_context_menu_enabled\000", 2586408642)
		methodRichTextLabel[65] = classDB.get_method_bind("RichTextLabel\000", "is_context_menu_enabled\000", 36873697)
		methodRichTextLabel[66] = classDB.get_method_bind("RichTextLabel\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodRichTextLabel[67] = classDB.get_method_bind("RichTextLabel\000", "is_shortcut_keys_enabled\000", 36873697)
		methodRichTextLabel[68] = classDB.get_method_bind("RichTextLabel\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodRichTextLabel[69] = classDB.get_method_bind("RichTextLabel\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodRichTextLabel[70] = classDB.get_method_bind("RichTextLabel\000", "get_selection_from\000", 3905245786)
		methodRichTextLabel[71] = classDB.get_method_bind("RichTextLabel\000", "get_selection_to\000", 3905245786)
		methodRichTextLabel[72] = classDB.get_method_bind("RichTextLabel\000", "select_all\000", 3218959716)
		methodRichTextLabel[73] = classDB.get_method_bind("RichTextLabel\000", "get_selected_text\000", 201670096)
		methodRichTextLabel[74] = classDB.get_method_bind("RichTextLabel\000", "deselect\000", 3218959716)
		methodRichTextLabel[75] = classDB.get_method_bind("RichTextLabel\000", "parse_bbcode\000", 83702148)
		methodRichTextLabel[76] = classDB.get_method_bind("RichTextLabel\000", "append_text\000", 83702148)
		methodRichTextLabel[77] = classDB.get_method_bind("RichTextLabel\000", "get_text\000", 201670096)
		methodRichTextLabel[78] = classDB.get_method_bind("RichTextLabel\000", "is_ready\000", 36873697)
		methodRichTextLabel[79] = classDB.get_method_bind("RichTextLabel\000", "set_threaded\000", 2586408642)
		methodRichTextLabel[80] = classDB.get_method_bind("RichTextLabel\000", "is_threaded\000", 36873697)
		methodRichTextLabel[81] = classDB.get_method_bind("RichTextLabel\000", "set_progress_bar_delay\000", 1286410249)
		methodRichTextLabel[82] = classDB.get_method_bind("RichTextLabel\000", "get_progress_bar_delay\000", 3905245786)
		methodRichTextLabel[83] = classDB.get_method_bind("RichTextLabel\000", "set_visible_characters\000", 1286410249)
		methodRichTextLabel[84] = classDB.get_method_bind("RichTextLabel\000", "get_visible_characters\000", 3905245786)
		methodRichTextLabel[85] = classDB.get_method_bind("RichTextLabel\000", "get_visible_characters_behavior\000", 258789322)
		methodRichTextLabel[86] = classDB.get_method_bind("RichTextLabel\000", "set_visible_characters_behavior\000", 3383839701)
		methodRichTextLabel[87] = classDB.get_method_bind("RichTextLabel\000", "set_visible_ratio\000", 373806689)
		methodRichTextLabel[88] = classDB.get_method_bind("RichTextLabel\000", "get_visible_ratio\000", 1740695150)
		methodRichTextLabel[89] = classDB.get_method_bind("RichTextLabel\000", "get_character_line\000", 3744713108)
		methodRichTextLabel[90] = classDB.get_method_bind("RichTextLabel\000", "get_character_paragraph\000", 3744713108)
		methodRichTextLabel[91] = classDB.get_method_bind("RichTextLabel\000", "get_total_character_count\000", 3905245786)
		methodRichTextLabel[92] = classDB.get_method_bind("RichTextLabel\000", "set_use_bbcode\000", 2586408642)
		methodRichTextLabel[93] = classDB.get_method_bind("RichTextLabel\000", "is_using_bbcode\000", 36873697)
		methodRichTextLabel[94] = classDB.get_method_bind("RichTextLabel\000", "get_line_count\000", 3905245786)
		methodRichTextLabel[95] = classDB.get_method_bind("RichTextLabel\000", "get_visible_line_count\000", 3905245786)
		methodRichTextLabel[96] = classDB.get_method_bind("RichTextLabel\000", "get_paragraph_count\000", 3905245786)
		methodRichTextLabel[97] = classDB.get_method_bind("RichTextLabel\000", "get_visible_paragraph_count\000", 3905245786)
		methodRichTextLabel[98] = classDB.get_method_bind("RichTextLabel\000", "get_content_height\000", 3905245786)
		methodRichTextLabel[99] = classDB.get_method_bind("RichTextLabel\000", "get_content_width\000", 3905245786)
		methodRichTextLabel[100] = classDB.get_method_bind("RichTextLabel\000", "get_line_offset\000", 4025615559)
		methodRichTextLabel[101] = classDB.get_method_bind("RichTextLabel\000", "get_paragraph_offset\000", 4025615559)
		methodRichTextLabel[102] = classDB.get_method_bind("RichTextLabel\000", "parse_expressions_for_values\000", 1522900837)
		methodRichTextLabel[103] = classDB.get_method_bind("RichTextLabel\000", "set_effects\000", 381264803)
		methodRichTextLabel[104] = classDB.get_method_bind("RichTextLabel\000", "get_effects\000", 2915620761)
		methodRichTextLabel[105] = classDB.get_method_bind("RichTextLabel\000", "install_effect\000", 1114965689)
		methodRichTextLabel[106] = classDB.get_method_bind("RichTextLabel\000", "get_menu\000", 229722558)
		methodRichTextLabel[107] = classDB.get_method_bind("RichTextLabel\000", "is_menu_visible\000", 36873697)
		methodRigidBody2D[0] = classDB.get_method_bind("RigidBody2D\000", "set_mass\000", 373806689)
		methodRigidBody2D[1] = classDB.get_method_bind("RigidBody2D\000", "get_mass\000", 1740695150)
		methodRigidBody2D[2] = classDB.get_method_bind("RigidBody2D\000", "get_inertia\000", 1740695150)
		methodRigidBody2D[3] = classDB.get_method_bind("RigidBody2D\000", "set_inertia\000", 373806689)
		methodRigidBody2D[4] = classDB.get_method_bind("RigidBody2D\000", "set_center_of_mass_mode\000", 1757235706)
		methodRigidBody2D[5] = classDB.get_method_bind("RigidBody2D\000", "get_center_of_mass_mode\000", 3277132817)
		methodRigidBody2D[6] = classDB.get_method_bind("RigidBody2D\000", "set_center_of_mass\000", 743155724)
		methodRigidBody2D[7] = classDB.get_method_bind("RigidBody2D\000", "get_center_of_mass\000", 3341600327)
		methodRigidBody2D[8] = classDB.get_method_bind("RigidBody2D\000", "set_physics_material_override\000", 1784508650)
		methodRigidBody2D[9] = classDB.get_method_bind("RigidBody2D\000", "get_physics_material_override\000", 2521850424)
		methodRigidBody2D[10] = classDB.get_method_bind("RigidBody2D\000", "set_gravity_scale\000", 373806689)
		methodRigidBody2D[11] = classDB.get_method_bind("RigidBody2D\000", "get_gravity_scale\000", 1740695150)
		methodRigidBody2D[12] = classDB.get_method_bind("RigidBody2D\000", "set_linear_damp_mode\000", 3406533708)
		methodRigidBody2D[13] = classDB.get_method_bind("RigidBody2D\000", "get_linear_damp_mode\000", 2970511462)
		methodRigidBody2D[14] = classDB.get_method_bind("RigidBody2D\000", "set_angular_damp_mode\000", 3406533708)
		methodRigidBody2D[15] = classDB.get_method_bind("RigidBody2D\000", "get_angular_damp_mode\000", 2970511462)
		methodRigidBody2D[16] = classDB.get_method_bind("RigidBody2D\000", "set_linear_damp\000", 373806689)
		methodRigidBody2D[17] = classDB.get_method_bind("RigidBody2D\000", "get_linear_damp\000", 1740695150)
		methodRigidBody2D[18] = classDB.get_method_bind("RigidBody2D\000", "set_angular_damp\000", 373806689)
		methodRigidBody2D[19] = classDB.get_method_bind("RigidBody2D\000", "get_angular_damp\000", 1740695150)
		methodRigidBody2D[20] = classDB.get_method_bind("RigidBody2D\000", "set_linear_velocity\000", 743155724)
		methodRigidBody2D[21] = classDB.get_method_bind("RigidBody2D\000", "get_linear_velocity\000", 3341600327)
		methodRigidBody2D[22] = classDB.get_method_bind("RigidBody2D\000", "set_angular_velocity\000", 373806689)
		methodRigidBody2D[23] = classDB.get_method_bind("RigidBody2D\000", "get_angular_velocity\000", 1740695150)
		methodRigidBody2D[24] = classDB.get_method_bind("RigidBody2D\000", "set_max_contacts_reported\000", 1286410249)
		methodRigidBody2D[25] = classDB.get_method_bind("RigidBody2D\000", "get_max_contacts_reported\000", 3905245786)
		methodRigidBody2D[26] = classDB.get_method_bind("RigidBody2D\000", "get_contact_count\000", 3905245786)
		methodRigidBody2D[27] = classDB.get_method_bind("RigidBody2D\000", "set_use_custom_integrator\000", 2586408642)
		methodRigidBody2D[28] = classDB.get_method_bind("RigidBody2D\000", "is_using_custom_integrator\000", 2240911060)
		methodRigidBody2D[29] = classDB.get_method_bind("RigidBody2D\000", "set_contact_monitor\000", 2586408642)
		methodRigidBody2D[30] = classDB.get_method_bind("RigidBody2D\000", "is_contact_monitor_enabled\000", 36873697)
		methodRigidBody2D[31] = classDB.get_method_bind("RigidBody2D\000", "set_continuous_collision_detection_mode\000", 1000241384)
		methodRigidBody2D[32] = classDB.get_method_bind("RigidBody2D\000", "get_continuous_collision_detection_mode\000", 815214376)
		methodRigidBody2D[33] = classDB.get_method_bind("RigidBody2D\000", "set_axis_velocity\000", 743155724)
		methodRigidBody2D[34] = classDB.get_method_bind("RigidBody2D\000", "apply_central_impulse\000", 3862383994)
		methodRigidBody2D[35] = classDB.get_method_bind("RigidBody2D\000", "apply_impulse\000", 496058220)
		methodRigidBody2D[36] = classDB.get_method_bind("RigidBody2D\000", "apply_torque_impulse\000", 373806689)
		methodRigidBody2D[37] = classDB.get_method_bind("RigidBody2D\000", "apply_central_force\000", 743155724)
		methodRigidBody2D[38] = classDB.get_method_bind("RigidBody2D\000", "apply_force\000", 496058220)
		methodRigidBody2D[39] = classDB.get_method_bind("RigidBody2D\000", "apply_torque\000", 373806689)
		methodRigidBody2D[40] = classDB.get_method_bind("RigidBody2D\000", "add_constant_central_force\000", 743155724)
		methodRigidBody2D[41] = classDB.get_method_bind("RigidBody2D\000", "add_constant_force\000", 496058220)
		methodRigidBody2D[42] = classDB.get_method_bind("RigidBody2D\000", "add_constant_torque\000", 373806689)
		methodRigidBody2D[43] = classDB.get_method_bind("RigidBody2D\000", "set_constant_force\000", 743155724)
		methodRigidBody2D[44] = classDB.get_method_bind("RigidBody2D\000", "get_constant_force\000", 3341600327)
		methodRigidBody2D[45] = classDB.get_method_bind("RigidBody2D\000", "set_constant_torque\000", 373806689)
		methodRigidBody2D[46] = classDB.get_method_bind("RigidBody2D\000", "get_constant_torque\000", 1740695150)
		methodRigidBody2D[47] = classDB.get_method_bind("RigidBody2D\000", "set_sleeping\000", 2586408642)
		methodRigidBody2D[48] = classDB.get_method_bind("RigidBody2D\000", "is_sleeping\000", 36873697)
		methodRigidBody2D[49] = classDB.get_method_bind("RigidBody2D\000", "set_can_sleep\000", 2586408642)
		methodRigidBody2D[50] = classDB.get_method_bind("RigidBody2D\000", "is_able_to_sleep\000", 36873697)
		methodRigidBody2D[51] = classDB.get_method_bind("RigidBody2D\000", "set_lock_rotation_enabled\000", 2586408642)
		methodRigidBody2D[52] = classDB.get_method_bind("RigidBody2D\000", "is_lock_rotation_enabled\000", 36873697)
		methodRigidBody2D[53] = classDB.get_method_bind("RigidBody2D\000", "set_freeze_enabled\000", 2586408642)
		methodRigidBody2D[54] = classDB.get_method_bind("RigidBody2D\000", "is_freeze_enabled\000", 36873697)
		methodRigidBody2D[55] = classDB.get_method_bind("RigidBody2D\000", "set_freeze_mode\000", 1705112154)
		methodRigidBody2D[56] = classDB.get_method_bind("RigidBody2D\000", "get_freeze_mode\000", 2016872314)
		methodRigidBody2D[57] = classDB.get_method_bind("RigidBody2D\000", "get_colliding_bodies\000", 3995934104)
		methodRigidBody3D[0] = classDB.get_method_bind("RigidBody3D\000", "set_mass\000", 373806689)
		methodRigidBody3D[1] = classDB.get_method_bind("RigidBody3D\000", "get_mass\000", 1740695150)
		methodRigidBody3D[2] = classDB.get_method_bind("RigidBody3D\000", "set_inertia\000", 3460891852)
		methodRigidBody3D[3] = classDB.get_method_bind("RigidBody3D\000", "get_inertia\000", 3360562783)
		methodRigidBody3D[4] = classDB.get_method_bind("RigidBody3D\000", "set_center_of_mass_mode\000", 3625866032)
		methodRigidBody3D[5] = classDB.get_method_bind("RigidBody3D\000", "get_center_of_mass_mode\000", 237405040)
		methodRigidBody3D[6] = classDB.get_method_bind("RigidBody3D\000", "set_center_of_mass\000", 3460891852)
		methodRigidBody3D[7] = classDB.get_method_bind("RigidBody3D\000", "get_center_of_mass\000", 3360562783)
		methodRigidBody3D[8] = classDB.get_method_bind("RigidBody3D\000", "set_physics_material_override\000", 1784508650)
		methodRigidBody3D[9] = classDB.get_method_bind("RigidBody3D\000", "get_physics_material_override\000", 2521850424)
		methodRigidBody3D[10] = classDB.get_method_bind("RigidBody3D\000", "set_linear_velocity\000", 3460891852)
		methodRigidBody3D[11] = classDB.get_method_bind("RigidBody3D\000", "get_linear_velocity\000", 3360562783)
		methodRigidBody3D[12] = classDB.get_method_bind("RigidBody3D\000", "set_angular_velocity\000", 3460891852)
		methodRigidBody3D[13] = classDB.get_method_bind("RigidBody3D\000", "get_angular_velocity\000", 3360562783)
		methodRigidBody3D[14] = classDB.get_method_bind("RigidBody3D\000", "get_inverse_inertia_tensor\000", 2716978435)
		methodRigidBody3D[15] = classDB.get_method_bind("RigidBody3D\000", "set_gravity_scale\000", 373806689)
		methodRigidBody3D[16] = classDB.get_method_bind("RigidBody3D\000", "get_gravity_scale\000", 1740695150)
		methodRigidBody3D[17] = classDB.get_method_bind("RigidBody3D\000", "set_linear_damp_mode\000", 1802035050)
		methodRigidBody3D[18] = classDB.get_method_bind("RigidBody3D\000", "get_linear_damp_mode\000", 1366206940)
		methodRigidBody3D[19] = classDB.get_method_bind("RigidBody3D\000", "set_angular_damp_mode\000", 1802035050)
		methodRigidBody3D[20] = classDB.get_method_bind("RigidBody3D\000", "get_angular_damp_mode\000", 1366206940)
		methodRigidBody3D[21] = classDB.get_method_bind("RigidBody3D\000", "set_linear_damp\000", 373806689)
		methodRigidBody3D[22] = classDB.get_method_bind("RigidBody3D\000", "get_linear_damp\000", 1740695150)
		methodRigidBody3D[23] = classDB.get_method_bind("RigidBody3D\000", "set_angular_damp\000", 373806689)
		methodRigidBody3D[24] = classDB.get_method_bind("RigidBody3D\000", "get_angular_damp\000", 1740695150)
		methodRigidBody3D[25] = classDB.get_method_bind("RigidBody3D\000", "set_max_contacts_reported\000", 1286410249)
		methodRigidBody3D[26] = classDB.get_method_bind("RigidBody3D\000", "get_max_contacts_reported\000", 3905245786)
		methodRigidBody3D[27] = classDB.get_method_bind("RigidBody3D\000", "get_contact_count\000", 3905245786)
		methodRigidBody3D[28] = classDB.get_method_bind("RigidBody3D\000", "set_use_custom_integrator\000", 2586408642)
		methodRigidBody3D[29] = classDB.get_method_bind("RigidBody3D\000", "is_using_custom_integrator\000", 2240911060)
		methodRigidBody3D[30] = classDB.get_method_bind("RigidBody3D\000", "set_contact_monitor\000", 2586408642)
		methodRigidBody3D[31] = classDB.get_method_bind("RigidBody3D\000", "is_contact_monitor_enabled\000", 36873697)
		methodRigidBody3D[32] = classDB.get_method_bind("RigidBody3D\000", "set_use_continuous_collision_detection\000", 2586408642)
		methodRigidBody3D[33] = classDB.get_method_bind("RigidBody3D\000", "is_using_continuous_collision_detection\000", 36873697)
		methodRigidBody3D[34] = classDB.get_method_bind("RigidBody3D\000", "set_axis_velocity\000", 3460891852)
		methodRigidBody3D[35] = classDB.get_method_bind("RigidBody3D\000", "apply_central_impulse\000", 3460891852)
		methodRigidBody3D[36] = classDB.get_method_bind("RigidBody3D\000", "apply_impulse\000", 1002852006)
		methodRigidBody3D[37] = classDB.get_method_bind("RigidBody3D\000", "apply_torque_impulse\000", 3460891852)
		methodRigidBody3D[38] = classDB.get_method_bind("RigidBody3D\000", "apply_central_force\000", 3460891852)
		methodRigidBody3D[39] = classDB.get_method_bind("RigidBody3D\000", "apply_force\000", 1002852006)
		methodRigidBody3D[40] = classDB.get_method_bind("RigidBody3D\000", "apply_torque\000", 3460891852)
		methodRigidBody3D[41] = classDB.get_method_bind("RigidBody3D\000", "add_constant_central_force\000", 3460891852)
		methodRigidBody3D[42] = classDB.get_method_bind("RigidBody3D\000", "add_constant_force\000", 1002852006)
		methodRigidBody3D[43] = classDB.get_method_bind("RigidBody3D\000", "add_constant_torque\000", 3460891852)
		methodRigidBody3D[44] = classDB.get_method_bind("RigidBody3D\000", "set_constant_force\000", 3460891852)
		methodRigidBody3D[45] = classDB.get_method_bind("RigidBody3D\000", "get_constant_force\000", 3360562783)
		methodRigidBody3D[46] = classDB.get_method_bind("RigidBody3D\000", "set_constant_torque\000", 3460891852)
		methodRigidBody3D[47] = classDB.get_method_bind("RigidBody3D\000", "get_constant_torque\000", 3360562783)
		methodRigidBody3D[48] = classDB.get_method_bind("RigidBody3D\000", "set_sleeping\000", 2586408642)
		methodRigidBody3D[49] = classDB.get_method_bind("RigidBody3D\000", "is_sleeping\000", 36873697)
		methodRigidBody3D[50] = classDB.get_method_bind("RigidBody3D\000", "set_can_sleep\000", 2586408642)
		methodRigidBody3D[51] = classDB.get_method_bind("RigidBody3D\000", "is_able_to_sleep\000", 36873697)
		methodRigidBody3D[52] = classDB.get_method_bind("RigidBody3D\000", "set_lock_rotation_enabled\000", 2586408642)
		methodRigidBody3D[53] = classDB.get_method_bind("RigidBody3D\000", "is_lock_rotation_enabled\000", 36873697)
		methodRigidBody3D[54] = classDB.get_method_bind("RigidBody3D\000", "set_freeze_enabled\000", 2586408642)
		methodRigidBody3D[55] = classDB.get_method_bind("RigidBody3D\000", "is_freeze_enabled\000", 36873697)
		methodRigidBody3D[56] = classDB.get_method_bind("RigidBody3D\000", "set_freeze_mode\000", 1319914653)
		methodRigidBody3D[57] = classDB.get_method_bind("RigidBody3D\000", "get_freeze_mode\000", 2008423905)
		methodRigidBody3D[58] = classDB.get_method_bind("RigidBody3D\000", "get_colliding_bodies\000", 3995934104)
		methodRootMotionView[0] = classDB.get_method_bind("RootMotionView\000", "set_animation_path\000", 1348162250)
		methodRootMotionView[1] = classDB.get_method_bind("RootMotionView\000", "get_animation_path\000", 4075236667)
		methodRootMotionView[2] = classDB.get_method_bind("RootMotionView\000", "set_color\000", 2920490490)
		methodRootMotionView[3] = classDB.get_method_bind("RootMotionView\000", "get_color\000", 3444240500)
		methodRootMotionView[4] = classDB.get_method_bind("RootMotionView\000", "set_cell_size\000", 373806689)
		methodRootMotionView[5] = classDB.get_method_bind("RootMotionView\000", "get_cell_size\000", 1740695150)
		methodRootMotionView[6] = classDB.get_method_bind("RootMotionView\000", "set_radius\000", 373806689)
		methodRootMotionView[7] = classDB.get_method_bind("RootMotionView\000", "get_radius\000", 1740695150)
		methodRootMotionView[8] = classDB.get_method_bind("RootMotionView\000", "set_zero_y\000", 2586408642)
		methodRootMotionView[9] = classDB.get_method_bind("RootMotionView\000", "get_zero_y\000", 36873697)
		methodSceneMultiplayer[0] = classDB.get_method_bind("SceneMultiplayer\000", "set_root_path\000", 1348162250)
		methodSceneMultiplayer[1] = classDB.get_method_bind("SceneMultiplayer\000", "get_root_path\000", 4075236667)
		methodSceneMultiplayer[2] = classDB.get_method_bind("SceneMultiplayer\000", "clear\000", 3218959716)
		methodSceneMultiplayer[3] = classDB.get_method_bind("SceneMultiplayer\000", "set_refuse_new_connections\000", 2586408642)
		methodSceneMultiplayer[4] = classDB.get_method_bind("SceneMultiplayer\000", "is_refusing_new_connections\000", 36873697)
		methodSceneMultiplayer[5] = classDB.get_method_bind("SceneMultiplayer\000", "set_allow_object_decoding\000", 2586408642)
		methodSceneMultiplayer[6] = classDB.get_method_bind("SceneMultiplayer\000", "is_object_decoding_allowed\000", 36873697)
		methodSceneMultiplayer[7] = classDB.get_method_bind("SceneMultiplayer\000", "send_bytes\000", 2742700601)
		methodSceneReplicationConfig[0] = classDB.get_method_bind("SceneReplicationConfig\000", "get_properties\000", 3995934104)
		methodSceneReplicationConfig[1] = classDB.get_method_bind("SceneReplicationConfig\000", "add_property\000", 3818401521)
		methodSceneReplicationConfig[2] = classDB.get_method_bind("SceneReplicationConfig\000", "has_property\000", 861721659)
		methodSceneReplicationConfig[3] = classDB.get_method_bind("SceneReplicationConfig\000", "remove_property\000", 1348162250)
		methodSceneReplicationConfig[4] = classDB.get_method_bind("SceneReplicationConfig\000", "property_get_index\000", 1382022557)
		methodSceneReplicationConfig[5] = classDB.get_method_bind("SceneReplicationConfig\000", "property_get_spawn\000", 3456846888)
		methodSceneReplicationConfig[6] = classDB.get_method_bind("SceneReplicationConfig\000", "property_set_spawn\000", 3868023870)
		methodSceneReplicationConfig[7] = classDB.get_method_bind("SceneReplicationConfig\000", "property_get_sync\000", 3456846888)
		methodSceneReplicationConfig[8] = classDB.get_method_bind("SceneReplicationConfig\000", "property_set_sync\000", 3868023870)
		methodSceneState[0] = classDB.get_method_bind("SceneState\000", "get_node_count\000", 3905245786)
		methodSceneState[1] = classDB.get_method_bind("SceneState\000", "get_node_type\000", 659327637)
		methodSceneState[2] = classDB.get_method_bind("SceneState\000", "get_node_name\000", 659327637)
		methodSceneState[3] = classDB.get_method_bind("SceneState\000", "get_node_path\000", 2272487792)
		methodSceneState[4] = classDB.get_method_bind("SceneState\000", "get_node_owner_path\000", 408788394)
		methodSceneState[5] = classDB.get_method_bind("SceneState\000", "is_node_instance_placeholder\000", 1116898809)
		methodSceneState[6] = classDB.get_method_bind("SceneState\000", "get_node_instance_placeholder\000", 844755477)
		methodSceneState[7] = classDB.get_method_bind("SceneState\000", "get_node_instance\000", 511017218)
		methodSceneState[8] = classDB.get_method_bind("SceneState\000", "get_node_groups\000", 647634434)
		methodSceneState[9] = classDB.get_method_bind("SceneState\000", "get_node_index\000", 923996154)
		methodSceneState[10] = classDB.get_method_bind("SceneState\000", "get_node_property_count\000", 923996154)
		methodSceneState[11] = classDB.get_method_bind("SceneState\000", "get_node_property_name\000", 351665558)
		methodSceneState[12] = classDB.get_method_bind("SceneState\000", "get_node_property_value\000", 678354945)
		methodSceneState[13] = classDB.get_method_bind("SceneState\000", "get_connection_count\000", 3905245786)
		methodSceneState[14] = classDB.get_method_bind("SceneState\000", "get_connection_source\000", 408788394)
		methodSceneState[15] = classDB.get_method_bind("SceneState\000", "get_connection_signal\000", 659327637)
		methodSceneState[16] = classDB.get_method_bind("SceneState\000", "get_connection_target\000", 408788394)
		methodSceneState[17] = classDB.get_method_bind("SceneState\000", "get_connection_method\000", 659327637)
		methodSceneState[18] = classDB.get_method_bind("SceneState\000", "get_connection_flags\000", 923996154)
		methodSceneState[19] = classDB.get_method_bind("SceneState\000", "get_connection_binds\000", 663333327)
		methodSceneState[20] = classDB.get_method_bind("SceneState\000", "get_connection_unbinds\000", 923996154)
		methodSceneTree[0] = classDB.get_method_bind("SceneTree\000", "get_root\000", 1757182445)
		methodSceneTree[1] = classDB.get_method_bind("SceneTree\000", "has_group\000", 2619796661)
		methodSceneTree[2] = classDB.get_method_bind("SceneTree\000", "is_auto_accept_quit\000", 36873697)
		methodSceneTree[3] = classDB.get_method_bind("SceneTree\000", "set_auto_accept_quit\000", 2586408642)
		methodSceneTree[4] = classDB.get_method_bind("SceneTree\000", "is_quit_on_go_back\000", 36873697)
		methodSceneTree[5] = classDB.get_method_bind("SceneTree\000", "set_quit_on_go_back\000", 2586408642)
		methodSceneTree[6] = classDB.get_method_bind("SceneTree\000", "set_debug_collisions_hint\000", 2586408642)
		methodSceneTree[7] = classDB.get_method_bind("SceneTree\000", "is_debugging_collisions_hint\000", 36873697)
		methodSceneTree[8] = classDB.get_method_bind("SceneTree\000", "set_debug_paths_hint\000", 2586408642)
		methodSceneTree[9] = classDB.get_method_bind("SceneTree\000", "is_debugging_paths_hint\000", 36873697)
		methodSceneTree[10] = classDB.get_method_bind("SceneTree\000", "set_debug_navigation_hint\000", 2586408642)
		methodSceneTree[11] = classDB.get_method_bind("SceneTree\000", "is_debugging_navigation_hint\000", 36873697)
		methodSceneTree[12] = classDB.get_method_bind("SceneTree\000", "set_edited_scene_root\000", 1078189570)
		methodSceneTree[13] = classDB.get_method_bind("SceneTree\000", "get_edited_scene_root\000", 3160264692)
		methodSceneTree[14] = classDB.get_method_bind("SceneTree\000", "set_pause\000", 2586408642)
		methodSceneTree[15] = classDB.get_method_bind("SceneTree\000", "is_paused\000", 36873697)
		methodSceneTree[16] = classDB.get_method_bind("SceneTree\000", "create_timer\000", 826575767)
		methodSceneTree[17] = classDB.get_method_bind("SceneTree\000", "create_tween\000", 3426978995)
		methodSceneTree[18] = classDB.get_method_bind("SceneTree\000", "get_processed_tweens\000", 2915620761)
		methodSceneTree[19] = classDB.get_method_bind("SceneTree\000", "get_node_count\000", 3905245786)
		methodSceneTree[20] = classDB.get_method_bind("SceneTree\000", "get_frame\000", 3905245786)
		methodSceneTree[21] = classDB.get_method_bind("SceneTree\000", "quit\000", 1995695955)
		methodSceneTree[22] = classDB.get_method_bind("SceneTree\000", "queue_delete\000", 3975164845)
		methodSceneTree[23] = classDB.get_method_bind("SceneTree\000", "call_group_flags\000", 1527739229)
		methodSceneTree[24] = classDB.get_method_bind("SceneTree\000", "notify_group_flags\000", 1245489420)
		methodSceneTree[25] = classDB.get_method_bind("SceneTree\000", "set_group_flags\000", 3497599527)
		methodSceneTree[26] = classDB.get_method_bind("SceneTree\000", "call_group\000", 1257962832)
		methodSceneTree[27] = classDB.get_method_bind("SceneTree\000", "notify_group\000", 2415702435)
		methodSceneTree[28] = classDB.get_method_bind("SceneTree\000", "set_group\000", 1279312029)
		methodSceneTree[29] = classDB.get_method_bind("SceneTree\000", "get_nodes_in_group\000", 689397652)
		methodSceneTree[30] = classDB.get_method_bind("SceneTree\000", "get_first_node_in_group\000", 4071044623)
		methodSceneTree[31] = classDB.get_method_bind("SceneTree\000", "set_current_scene\000", 1078189570)
		methodSceneTree[32] = classDB.get_method_bind("SceneTree\000", "get_current_scene\000", 3160264692)
		methodSceneTree[33] = classDB.get_method_bind("SceneTree\000", "change_scene\000", 166001499)
		methodSceneTree[34] = classDB.get_method_bind("SceneTree\000", "change_scene_to\000", 107349098)
		methodSceneTree[35] = classDB.get_method_bind("SceneTree\000", "reload_current_scene\000", 166280745)
		methodSceneTree[36] = classDB.get_method_bind("SceneTree\000", "set_multiplayer\000", 2385607013)
		methodSceneTree[37] = classDB.get_method_bind("SceneTree\000", "get_multiplayer\000", 3453401404)
		methodSceneTree[38] = classDB.get_method_bind("SceneTree\000", "set_multiplayer_poll_enabled\000", 2586408642)
		methodSceneTree[39] = classDB.get_method_bind("SceneTree\000", "is_multiplayer_poll_enabled\000", 36873697)
		methodSceneTreeTimer[0] = classDB.get_method_bind("SceneTreeTimer\000", "set_time_left\000", 373806689)
		methodSceneTreeTimer[1] = classDB.get_method_bind("SceneTreeTimer\000", "get_time_left\000", 1740695150)
		methodScript[0] = classDB.get_method_bind("Script\000", "can_instantiate\000", 36873697)
		methodScript[1] = classDB.get_method_bind("Script\000", "instance_has\000", 397768994)
		methodScript[2] = classDB.get_method_bind("Script\000", "has_source_code\000", 36873697)
		methodScript[3] = classDB.get_method_bind("Script\000", "get_source_code\000", 201670096)
		methodScript[4] = classDB.get_method_bind("Script\000", "set_source_code\000", 83702148)
		methodScript[5] = classDB.get_method_bind("Script\000", "reload\000", 1633102583)
		methodScript[6] = classDB.get_method_bind("Script\000", "get_base_script\000", 278624046)
		methodScript[7] = classDB.get_method_bind("Script\000", "get_instance_base_type\000", 2002593661)
		methodScript[8] = classDB.get_method_bind("Script\000", "has_script_signal\000", 2619796661)
		methodScript[9] = classDB.get_method_bind("Script\000", "get_script_property_list\000", 2915620761)
		methodScript[10] = classDB.get_method_bind("Script\000", "get_script_method_list\000", 2915620761)
		methodScript[11] = classDB.get_method_bind("Script\000", "get_script_signal_list\000", 2915620761)
		methodScript[12] = classDB.get_method_bind("Script\000", "get_script_constant_map\000", 2382534195)
		methodScript[13] = classDB.get_method_bind("Script\000", "get_property_default_value\000", 2138907829)
		methodScript[14] = classDB.get_method_bind("Script\000", "is_tool\000", 36873697)
		methodScriptCreateDialog[0] = classDB.get_method_bind("ScriptCreateDialog\000", "config\000", 4210001628)
		methodScriptEditor[0] = classDB.get_method_bind("ScriptEditor\000", "get_current_editor\000", 1906266726)
		methodScriptEditor[1] = classDB.get_method_bind("ScriptEditor\000", "get_open_script_editors\000", 3995934104)
		methodScriptEditor[2] = classDB.get_method_bind("ScriptEditor\000", "register_syntax_highlighter\000", 1092774468)
		methodScriptEditor[3] = classDB.get_method_bind("ScriptEditor\000", "unregister_syntax_highlighter\000", 1092774468)
		methodScriptEditor[4] = classDB.get_method_bind("ScriptEditor\000", "goto_line\000", 1286410249)
		methodScriptEditor[5] = classDB.get_method_bind("ScriptEditor\000", "get_current_script\000", 2146468882)
		methodScriptEditor[6] = classDB.get_method_bind("ScriptEditor\000", "get_open_scripts\000", 3995934104)
		methodScriptEditor[7] = classDB.get_method_bind("ScriptEditor\000", "open_script_create_dialog\000", 3186203200)
		methodScriptEditorBase[0] = classDB.get_method_bind("ScriptEditorBase\000", "get_base_editor\000", 2783021301)
		methodScriptEditorBase[1] = classDB.get_method_bind("ScriptEditorBase\000", "add_syntax_highlighter\000", 1092774468)
		methodScrollBar[0] = classDB.get_method_bind("ScrollBar\000", "set_custom_step\000", 373806689)
		methodScrollBar[1] = classDB.get_method_bind("ScrollBar\000", "get_custom_step\000", 1740695150)
		methodScrollContainer[0] = classDB.get_method_bind("ScrollContainer\000", "set_h_scroll\000", 1286410249)
		methodScrollContainer[1] = classDB.get_method_bind("ScrollContainer\000", "get_h_scroll\000", 3905245786)
		methodScrollContainer[2] = classDB.get_method_bind("ScrollContainer\000", "set_v_scroll\000", 1286410249)
		methodScrollContainer[3] = classDB.get_method_bind("ScrollContainer\000", "get_v_scroll\000", 3905245786)
		methodScrollContainer[4] = classDB.get_method_bind("ScrollContainer\000", "set_horizontal_scroll_mode\000", 2750506364)
		methodScrollContainer[5] = classDB.get_method_bind("ScrollContainer\000", "get_horizontal_scroll_mode\000", 3987985145)
		methodScrollContainer[6] = classDB.get_method_bind("ScrollContainer\000", "set_vertical_scroll_mode\000", 2750506364)
		methodScrollContainer[7] = classDB.get_method_bind("ScrollContainer\000", "get_vertical_scroll_mode\000", 3987985145)
		methodScrollContainer[8] = classDB.get_method_bind("ScrollContainer\000", "set_deadzone\000", 1286410249)
		methodScrollContainer[9] = classDB.get_method_bind("ScrollContainer\000", "get_deadzone\000", 3905245786)
		methodScrollContainer[10] = classDB.get_method_bind("ScrollContainer\000", "set_follow_focus\000", 2586408642)
		methodScrollContainer[11] = classDB.get_method_bind("ScrollContainer\000", "is_following_focus\000", 36873697)
		methodScrollContainer[12] = classDB.get_method_bind("ScrollContainer\000", "get_h_scroll_bar\000", 4004517983)
		methodScrollContainer[13] = classDB.get_method_bind("ScrollContainer\000", "get_v_scroll_bar\000", 2630340773)
		methodScrollContainer[14] = classDB.get_method_bind("ScrollContainer\000", "ensure_control_visible\000", 1496901182)
		methodSegmentShape2D[0] = classDB.get_method_bind("SegmentShape2D\000", "set_a\000", 743155724)
		methodSegmentShape2D[1] = classDB.get_method_bind("SegmentShape2D\000", "get_a\000", 3341600327)
		methodSegmentShape2D[2] = classDB.get_method_bind("SegmentShape2D\000", "set_b\000", 743155724)
		methodSegmentShape2D[3] = classDB.get_method_bind("SegmentShape2D\000", "get_b\000", 3341600327)
		methodSemaphore[0] = classDB.get_method_bind("Semaphore\000", "wait\000", 3218959716)
		methodSemaphore[1] = classDB.get_method_bind("Semaphore\000", "try_wait\000", 166280745)
		methodSemaphore[2] = classDB.get_method_bind("Semaphore\000", "post\000", 3218959716)
		methodSeparationRayShape2D[0] = classDB.get_method_bind("SeparationRayShape2D\000", "set_length\000", 373806689)
		methodSeparationRayShape2D[1] = classDB.get_method_bind("SeparationRayShape2D\000", "get_length\000", 1740695150)
		methodSeparationRayShape2D[2] = classDB.get_method_bind("SeparationRayShape2D\000", "set_slide_on_slope\000", 2586408642)
		methodSeparationRayShape2D[3] = classDB.get_method_bind("SeparationRayShape2D\000", "get_slide_on_slope\000", 36873697)
		methodSeparationRayShape3D[0] = classDB.get_method_bind("SeparationRayShape3D\000", "set_length\000", 373806689)
		methodSeparationRayShape3D[1] = classDB.get_method_bind("SeparationRayShape3D\000", "get_length\000", 1740695150)
		methodSeparationRayShape3D[2] = classDB.get_method_bind("SeparationRayShape3D\000", "set_slide_on_slope\000", 2586408642)
		methodSeparationRayShape3D[3] = classDB.get_method_bind("SeparationRayShape3D\000", "get_slide_on_slope\000", 36873697)
		methodShader[0] = classDB.get_method_bind("Shader\000", "get_mode\000", 3392948163)
		methodShader[1] = classDB.get_method_bind("Shader\000", "set_code\000", 83702148)
		methodShader[2] = classDB.get_method_bind("Shader\000", "get_code\000", 201670096)
		methodShader[3] = classDB.get_method_bind("Shader\000", "set_default_texture_param\000", 1628453603)
		methodShader[4] = classDB.get_method_bind("Shader\000", "get_default_texture_param\000", 3823812009)
		methodShader[5] = classDB.get_method_bind("Shader\000", "has_uniform\000", 2619796661)
		methodShaderInclude[0] = classDB.get_method_bind("ShaderInclude\000", "set_code\000", 83702148)
		methodShaderInclude[1] = classDB.get_method_bind("ShaderInclude\000", "get_code\000", 201670096)
		methodShaderMaterial[0] = classDB.get_method_bind("ShaderMaterial\000", "set_shader\000", 3341921675)
		methodShaderMaterial[1] = classDB.get_method_bind("ShaderMaterial\000", "get_shader\000", 2078273437)
		methodShaderMaterial[2] = classDB.get_method_bind("ShaderMaterial\000", "set_shader_uniform\000", 3776071444)
		methodShaderMaterial[3] = classDB.get_method_bind("ShaderMaterial\000", "get_shader_uniform\000", 2760726917)
		methodShape2D[0] = classDB.get_method_bind("Shape2D\000", "set_custom_solver_bias\000", 373806689)
		methodShape2D[1] = classDB.get_method_bind("Shape2D\000", "get_custom_solver_bias\000", 1740695150)
		methodShape2D[2] = classDB.get_method_bind("Shape2D\000", "collide\000", 3709843132)
		methodShape2D[3] = classDB.get_method_bind("Shape2D\000", "collide_with_motion\000", 2869556801)
		methodShape2D[4] = classDB.get_method_bind("Shape2D\000", "collide_and_get_contacts\000", 3056932662)
		methodShape2D[5] = classDB.get_method_bind("Shape2D\000", "collide_with_motion_and_get_contacts\000", 3620351573)
		methodShape2D[6] = classDB.get_method_bind("Shape2D\000", "draw\000", 2948539648)
		methodShape3D[0] = classDB.get_method_bind("Shape3D\000", "set_custom_solver_bias\000", 373806689)
		methodShape3D[1] = classDB.get_method_bind("Shape3D\000", "get_custom_solver_bias\000", 1740695150)
		methodShape3D[2] = classDB.get_method_bind("Shape3D\000", "set_margin\000", 373806689)
		methodShape3D[3] = classDB.get_method_bind("Shape3D\000", "get_margin\000", 1740695150)
		methodShape3D[4] = classDB.get_method_bind("Shape3D\000", "get_debug_mesh\000", 1605880883)
		methodShapeCast2D[0] = classDB.get_method_bind("ShapeCast2D\000", "set_enabled\000", 2586408642)
		methodShapeCast2D[1] = classDB.get_method_bind("ShapeCast2D\000", "is_enabled\000", 36873697)
		methodShapeCast2D[2] = classDB.get_method_bind("ShapeCast2D\000", "set_shape\000", 771364740)
		methodShapeCast2D[3] = classDB.get_method_bind("ShapeCast2D\000", "get_shape\000", 522005891)
		methodShapeCast2D[4] = classDB.get_method_bind("ShapeCast2D\000", "set_target_position\000", 743155724)
		methodShapeCast2D[5] = classDB.get_method_bind("ShapeCast2D\000", "get_target_position\000", 3341600327)
		methodShapeCast2D[6] = classDB.get_method_bind("ShapeCast2D\000", "set_margin\000", 373806689)
		methodShapeCast2D[7] = classDB.get_method_bind("ShapeCast2D\000", "get_margin\000", 1740695150)
		methodShapeCast2D[8] = classDB.get_method_bind("ShapeCast2D\000", "set_max_results\000", 1286410249)
		methodShapeCast2D[9] = classDB.get_method_bind("ShapeCast2D\000", "get_max_results\000", 3905245786)
		methodShapeCast2D[10] = classDB.get_method_bind("ShapeCast2D\000", "is_colliding\000", 36873697)
		methodShapeCast2D[11] = classDB.get_method_bind("ShapeCast2D\000", "get_collision_count\000", 3905245786)
		methodShapeCast2D[12] = classDB.get_method_bind("ShapeCast2D\000", "force_shapecast_update\000", 3218959716)
		methodShapeCast2D[13] = classDB.get_method_bind("ShapeCast2D\000", "get_collider\000", 3332903315)
		methodShapeCast2D[14] = classDB.get_method_bind("ShapeCast2D\000", "get_collider_shape\000", 923996154)
		methodShapeCast2D[15] = classDB.get_method_bind("ShapeCast2D\000", "get_collision_point\000", 2299179447)
		methodShapeCast2D[16] = classDB.get_method_bind("ShapeCast2D\000", "get_collision_normal\000", 2299179447)
		methodShapeCast2D[17] = classDB.get_method_bind("ShapeCast2D\000", "get_closest_collision_safe_fraction\000", 1740695150)
		methodShapeCast2D[18] = classDB.get_method_bind("ShapeCast2D\000", "get_closest_collision_unsafe_fraction\000", 1740695150)
		methodShapeCast2D[19] = classDB.get_method_bind("ShapeCast2D\000", "add_exception_rid\000", 2722037293)
		methodShapeCast2D[20] = classDB.get_method_bind("ShapeCast2D\000", "add_exception\000", 3090941106)
		methodShapeCast2D[21] = classDB.get_method_bind("ShapeCast2D\000", "remove_exception_rid\000", 2722037293)
		methodShapeCast2D[22] = classDB.get_method_bind("ShapeCast2D\000", "remove_exception\000", 3090941106)
		methodShapeCast2D[23] = classDB.get_method_bind("ShapeCast2D\000", "clear_exceptions\000", 3218959716)
		methodShapeCast2D[24] = classDB.get_method_bind("ShapeCast2D\000", "set_collision_mask\000", 1286410249)
		methodShapeCast2D[25] = classDB.get_method_bind("ShapeCast2D\000", "get_collision_mask\000", 3905245786)
		methodShapeCast2D[26] = classDB.get_method_bind("ShapeCast2D\000", "set_collision_mask_value\000", 300928843)
		methodShapeCast2D[27] = classDB.get_method_bind("ShapeCast2D\000", "get_collision_mask_value\000", 1116898809)
		methodShapeCast2D[28] = classDB.get_method_bind("ShapeCast2D\000", "set_exclude_parent_body\000", 2586408642)
		methodShapeCast2D[29] = classDB.get_method_bind("ShapeCast2D\000", "get_exclude_parent_body\000", 36873697)
		methodShapeCast2D[30] = classDB.get_method_bind("ShapeCast2D\000", "set_collide_with_areas\000", 2586408642)
		methodShapeCast2D[31] = classDB.get_method_bind("ShapeCast2D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodShapeCast2D[32] = classDB.get_method_bind("ShapeCast2D\000", "set_collide_with_bodies\000", 2586408642)
		methodShapeCast2D[33] = classDB.get_method_bind("ShapeCast2D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodShapeCast3D[0] = classDB.get_method_bind("ShapeCast3D\000", "resource_changed\000", 968641751)
		methodShapeCast3D[1] = classDB.get_method_bind("ShapeCast3D\000", "set_enabled\000", 2586408642)
		methodShapeCast3D[2] = classDB.get_method_bind("ShapeCast3D\000", "is_enabled\000", 36873697)
		methodShapeCast3D[3] = classDB.get_method_bind("ShapeCast3D\000", "set_shape\000", 1549710052)
		methodShapeCast3D[4] = classDB.get_method_bind("ShapeCast3D\000", "get_shape\000", 3214262478)
		methodShapeCast3D[5] = classDB.get_method_bind("ShapeCast3D\000", "set_target_position\000", 3460891852)
		methodShapeCast3D[6] = classDB.get_method_bind("ShapeCast3D\000", "get_target_position\000", 3360562783)
		methodShapeCast3D[7] = classDB.get_method_bind("ShapeCast3D\000", "set_margin\000", 373806689)
		methodShapeCast3D[8] = classDB.get_method_bind("ShapeCast3D\000", "get_margin\000", 1740695150)
		methodShapeCast3D[9] = classDB.get_method_bind("ShapeCast3D\000", "set_max_results\000", 1286410249)
		methodShapeCast3D[10] = classDB.get_method_bind("ShapeCast3D\000", "get_max_results\000", 3905245786)
		methodShapeCast3D[11] = classDB.get_method_bind("ShapeCast3D\000", "is_colliding\000", 36873697)
		methodShapeCast3D[12] = classDB.get_method_bind("ShapeCast3D\000", "get_collision_count\000", 3905245786)
		methodShapeCast3D[13] = classDB.get_method_bind("ShapeCast3D\000", "force_shapecast_update\000", 3218959716)
		methodShapeCast3D[14] = classDB.get_method_bind("ShapeCast3D\000", "get_collider\000", 3332903315)
		methodShapeCast3D[15] = classDB.get_method_bind("ShapeCast3D\000", "get_collider_shape\000", 923996154)
		methodShapeCast3D[16] = classDB.get_method_bind("ShapeCast3D\000", "get_collision_point\000", 711720468)
		methodShapeCast3D[17] = classDB.get_method_bind("ShapeCast3D\000", "get_collision_normal\000", 711720468)
		methodShapeCast3D[18] = classDB.get_method_bind("ShapeCast3D\000", "get_closest_collision_safe_fraction\000", 1740695150)
		methodShapeCast3D[19] = classDB.get_method_bind("ShapeCast3D\000", "get_closest_collision_unsafe_fraction\000", 1740695150)
		methodShapeCast3D[20] = classDB.get_method_bind("ShapeCast3D\000", "add_exception_rid\000", 2722037293)
		methodShapeCast3D[21] = classDB.get_method_bind("ShapeCast3D\000", "add_exception\000", 3975164845)
		methodShapeCast3D[22] = classDB.get_method_bind("ShapeCast3D\000", "remove_exception_rid\000", 2722037293)
		methodShapeCast3D[23] = classDB.get_method_bind("ShapeCast3D\000", "remove_exception\000", 3975164845)
		methodShapeCast3D[24] = classDB.get_method_bind("ShapeCast3D\000", "clear_exceptions\000", 3218959716)
		methodShapeCast3D[25] = classDB.get_method_bind("ShapeCast3D\000", "set_collision_mask\000", 1286410249)
		methodShapeCast3D[26] = classDB.get_method_bind("ShapeCast3D\000", "get_collision_mask\000", 3905245786)
		methodShapeCast3D[27] = classDB.get_method_bind("ShapeCast3D\000", "set_collision_mask_value\000", 300928843)
		methodShapeCast3D[28] = classDB.get_method_bind("ShapeCast3D\000", "get_collision_mask_value\000", 1116898809)
		methodShapeCast3D[29] = classDB.get_method_bind("ShapeCast3D\000", "set_exclude_parent_body\000", 2586408642)
		methodShapeCast3D[30] = classDB.get_method_bind("ShapeCast3D\000", "get_exclude_parent_body\000", 36873697)
		methodShapeCast3D[31] = classDB.get_method_bind("ShapeCast3D\000", "set_collide_with_areas\000", 2586408642)
		methodShapeCast3D[32] = classDB.get_method_bind("ShapeCast3D\000", "is_collide_with_areas_enabled\000", 36873697)
		methodShapeCast3D[33] = classDB.get_method_bind("ShapeCast3D\000", "set_collide_with_bodies\000", 2586408642)
		methodShapeCast3D[34] = classDB.get_method_bind("ShapeCast3D\000", "is_collide_with_bodies_enabled\000", 36873697)
		methodShapeCast3D[35] = classDB.get_method_bind("ShapeCast3D\000", "set_debug_shape_custom_color\000", 2920490490)
		methodShapeCast3D[36] = classDB.get_method_bind("ShapeCast3D\000", "get_debug_shape_custom_color\000", 3444240500)
		methodShortcut[0] = classDB.get_method_bind("Shortcut\000", "set_events\000", 381264803)
		methodShortcut[1] = classDB.get_method_bind("Shortcut\000", "get_events\000", 3995934104)
		methodShortcut[2] = classDB.get_method_bind("Shortcut\000", "has_valid_event\000", 36873697)
		methodShortcut[3] = classDB.get_method_bind("Shortcut\000", "matches_event\000", 3738334489)
		methodShortcut[4] = classDB.get_method_bind("Shortcut\000", "get_as_text\000", 201670096)
		methodSkeleton2D[0] = classDB.get_method_bind("Skeleton2D\000", "get_bone_count\000", 3905245786)
		methodSkeleton2D[1] = classDB.get_method_bind("Skeleton2D\000", "get_bone\000", 2556267111)
		methodSkeleton2D[2] = classDB.get_method_bind("Skeleton2D\000", "get_skeleton\000", 2944877500)
		methodSkeleton2D[3] = classDB.get_method_bind("Skeleton2D\000", "set_modification_stack\000", 3907307132)
		methodSkeleton2D[4] = classDB.get_method_bind("Skeleton2D\000", "get_modification_stack\000", 2107508396)
		methodSkeleton2D[5] = classDB.get_method_bind("Skeleton2D\000", "execute_modifications\000", 1005356550)
		methodSkeleton2D[6] = classDB.get_method_bind("Skeleton2D\000", "set_bone_local_pose_override\000", 555457532)
		methodSkeleton2D[7] = classDB.get_method_bind("Skeleton2D\000", "get_bone_local_pose_override\000", 2995540667)
		methodSkeleton3D[0] = classDB.get_method_bind("Skeleton3D\000", "add_bone\000", 83702148)
		methodSkeleton3D[1] = classDB.get_method_bind("Skeleton3D\000", "find_bone\000", 1321353865)
		methodSkeleton3D[2] = classDB.get_method_bind("Skeleton3D\000", "get_bone_name\000", 844755477)
		methodSkeleton3D[3] = classDB.get_method_bind("Skeleton3D\000", "set_bone_name\000", 501894301)
		methodSkeleton3D[4] = classDB.get_method_bind("Skeleton3D\000", "get_bone_parent\000", 923996154)
		methodSkeleton3D[5] = classDB.get_method_bind("Skeleton3D\000", "set_bone_parent\000", 3937882851)
		methodSkeleton3D[6] = classDB.get_method_bind("Skeleton3D\000", "get_bone_count\000", 3905245786)
		methodSkeleton3D[7] = classDB.get_method_bind("Skeleton3D\000", "unparent_bone_and_rest\000", 1286410249)
		methodSkeleton3D[8] = classDB.get_method_bind("Skeleton3D\000", "get_bone_children\000", 3668444399)
		methodSkeleton3D[9] = classDB.get_method_bind("Skeleton3D\000", "get_parentless_bones\000", 969006518)
		methodSkeleton3D[10] = classDB.get_method_bind("Skeleton3D\000", "get_bone_rest\000", 1965739696)
		methodSkeleton3D[11] = classDB.get_method_bind("Skeleton3D\000", "set_bone_rest\000", 3616898986)
		methodSkeleton3D[12] = classDB.get_method_bind("Skeleton3D\000", "get_bone_global_rest\000", 1965739696)
		methodSkeleton3D[13] = classDB.get_method_bind("Skeleton3D\000", "create_skin_from_rest_transforms\000", 1032037385)
		methodSkeleton3D[14] = classDB.get_method_bind("Skeleton3D\000", "register_skin\000", 3405789568)
		methodSkeleton3D[15] = classDB.get_method_bind("Skeleton3D\000", "localize_rests\000", 3218959716)
		methodSkeleton3D[16] = classDB.get_method_bind("Skeleton3D\000", "clear_bones\000", 3218959716)
		methodSkeleton3D[17] = classDB.get_method_bind("Skeleton3D\000", "get_bone_pose\000", 1965739696)
		methodSkeleton3D[18] = classDB.get_method_bind("Skeleton3D\000", "set_bone_pose_position\000", 1530502735)
		methodSkeleton3D[19] = classDB.get_method_bind("Skeleton3D\000", "set_bone_pose_rotation\000", 2823819782)
		methodSkeleton3D[20] = classDB.get_method_bind("Skeleton3D\000", "set_bone_pose_scale\000", 1530502735)
		methodSkeleton3D[21] = classDB.get_method_bind("Skeleton3D\000", "get_bone_pose_position\000", 711720468)
		methodSkeleton3D[22] = classDB.get_method_bind("Skeleton3D\000", "get_bone_pose_rotation\000", 476865136)
		methodSkeleton3D[23] = classDB.get_method_bind("Skeleton3D\000", "get_bone_pose_scale\000", 711720468)
		methodSkeleton3D[24] = classDB.get_method_bind("Skeleton3D\000", "reset_bone_pose\000", 1286410249)
		methodSkeleton3D[25] = classDB.get_method_bind("Skeleton3D\000", "reset_bone_poses\000", 3218959716)
		methodSkeleton3D[26] = classDB.get_method_bind("Skeleton3D\000", "is_bone_enabled\000", 1116898809)
		methodSkeleton3D[27] = classDB.get_method_bind("Skeleton3D\000", "set_bone_enabled\000", 4023243586)
		methodSkeleton3D[28] = classDB.get_method_bind("Skeleton3D\000", "clear_bones_global_pose_override\000", 3218959716)
		methodSkeleton3D[29] = classDB.get_method_bind("Skeleton3D\000", "set_bone_global_pose_override\000", 3483398371)
		methodSkeleton3D[30] = classDB.get_method_bind("Skeleton3D\000", "get_bone_global_pose_override\000", 1965739696)
		methodSkeleton3D[31] = classDB.get_method_bind("Skeleton3D\000", "get_bone_global_pose\000", 1965739696)
		methodSkeleton3D[32] = classDB.get_method_bind("Skeleton3D\000", "get_bone_global_pose_no_override\000", 1965739696)
		methodSkeleton3D[33] = classDB.get_method_bind("Skeleton3D\000", "clear_bones_local_pose_override\000", 3218959716)
		methodSkeleton3D[34] = classDB.get_method_bind("Skeleton3D\000", "set_bone_local_pose_override\000", 3483398371)
		methodSkeleton3D[35] = classDB.get_method_bind("Skeleton3D\000", "get_bone_local_pose_override\000", 1965739696)
		methodSkeleton3D[36] = classDB.get_method_bind("Skeleton3D\000", "force_update_all_bone_transforms\000", 3218959716)
		methodSkeleton3D[37] = classDB.get_method_bind("Skeleton3D\000", "force_update_bone_child_transform\000", 1286410249)
		methodSkeleton3D[38] = classDB.get_method_bind("Skeleton3D\000", "set_motion_scale\000", 373806689)
		methodSkeleton3D[39] = classDB.get_method_bind("Skeleton3D\000", "get_motion_scale\000", 1740695150)
		methodSkeleton3D[40] = classDB.get_method_bind("Skeleton3D\000", "global_pose_to_world_transform\000", 3396462327)
		methodSkeleton3D[41] = classDB.get_method_bind("Skeleton3D\000", "world_transform_to_global_pose\000", 3396462327)
		methodSkeleton3D[42] = classDB.get_method_bind("Skeleton3D\000", "global_pose_to_local_pose\000", 518934792)
		methodSkeleton3D[43] = classDB.get_method_bind("Skeleton3D\000", "local_pose_to_global_pose\000", 518934792)
		methodSkeleton3D[44] = classDB.get_method_bind("Skeleton3D\000", "global_pose_z_forward_to_bone_forward\000", 97773470)
		methodSkeleton3D[45] = classDB.get_method_bind("Skeleton3D\000", "set_show_rest_only\000", 2586408642)
		methodSkeleton3D[46] = classDB.get_method_bind("Skeleton3D\000", "is_show_rest_only\000", 36873697)
		methodSkeleton3D[47] = classDB.get_method_bind("Skeleton3D\000", "set_animate_physical_bones\000", 2586408642)
		methodSkeleton3D[48] = classDB.get_method_bind("Skeleton3D\000", "get_animate_physical_bones\000", 36873697)
		methodSkeleton3D[49] = classDB.get_method_bind("Skeleton3D\000", "physical_bones_stop_simulation\000", 3218959716)
		methodSkeleton3D[50] = classDB.get_method_bind("Skeleton3D\000", "physical_bones_start_simulation\000", 2787316981)
		methodSkeleton3D[51] = classDB.get_method_bind("Skeleton3D\000", "physical_bones_add_collision_exception\000", 2722037293)
		methodSkeleton3D[52] = classDB.get_method_bind("Skeleton3D\000", "physical_bones_remove_collision_exception\000", 2722037293)
		methodSkeleton3D[53] = classDB.get_method_bind("Skeleton3D\000", "set_modification_stack\000", 3155601425)
		methodSkeleton3D[54] = classDB.get_method_bind("Skeleton3D\000", "get_modification_stack\000", 3888860108)
		methodSkeleton3D[55] = classDB.get_method_bind("Skeleton3D\000", "execute_modifications\000", 1005356550)
		methodSkeletonIK3D[0] = classDB.get_method_bind("SkeletonIK3D\000", "set_root_bone\000", 3304788590)
		methodSkeletonIK3D[1] = classDB.get_method_bind("SkeletonIK3D\000", "get_root_bone\000", 2002593661)
		methodSkeletonIK3D[2] = classDB.get_method_bind("SkeletonIK3D\000", "set_tip_bone\000", 3304788590)
		methodSkeletonIK3D[3] = classDB.get_method_bind("SkeletonIK3D\000", "get_tip_bone\000", 2002593661)
		methodSkeletonIK3D[4] = classDB.get_method_bind("SkeletonIK3D\000", "set_interpolation\000", 373806689)
		methodSkeletonIK3D[5] = classDB.get_method_bind("SkeletonIK3D\000", "get_interpolation\000", 1740695150)
		methodSkeletonIK3D[6] = classDB.get_method_bind("SkeletonIK3D\000", "set_target_transform\000", 2952846383)
		methodSkeletonIK3D[7] = classDB.get_method_bind("SkeletonIK3D\000", "get_target_transform\000", 3229777777)
		methodSkeletonIK3D[8] = classDB.get_method_bind("SkeletonIK3D\000", "set_target_node\000", 1348162250)
		methodSkeletonIK3D[9] = classDB.get_method_bind("SkeletonIK3D\000", "get_target_node\000", 277076166)
		methodSkeletonIK3D[10] = classDB.get_method_bind("SkeletonIK3D\000", "set_override_tip_basis\000", 2586408642)
		methodSkeletonIK3D[11] = classDB.get_method_bind("SkeletonIK3D\000", "is_override_tip_basis\000", 36873697)
		methodSkeletonIK3D[12] = classDB.get_method_bind("SkeletonIK3D\000", "set_use_magnet\000", 2586408642)
		methodSkeletonIK3D[13] = classDB.get_method_bind("SkeletonIK3D\000", "is_using_magnet\000", 36873697)
		methodSkeletonIK3D[14] = classDB.get_method_bind("SkeletonIK3D\000", "set_magnet_position\000", 3460891852)
		methodSkeletonIK3D[15] = classDB.get_method_bind("SkeletonIK3D\000", "get_magnet_position\000", 3360562783)
		methodSkeletonIK3D[16] = classDB.get_method_bind("SkeletonIK3D\000", "get_parent_skeleton\000", 1488626673)
		methodSkeletonIK3D[17] = classDB.get_method_bind("SkeletonIK3D\000", "is_running\000", 2240911060)
		methodSkeletonIK3D[18] = classDB.get_method_bind("SkeletonIK3D\000", "set_min_distance\000", 373806689)
		methodSkeletonIK3D[19] = classDB.get_method_bind("SkeletonIK3D\000", "get_min_distance\000", 1740695150)
		methodSkeletonIK3D[20] = classDB.get_method_bind("SkeletonIK3D\000", "set_max_iterations\000", 1286410249)
		methodSkeletonIK3D[21] = classDB.get_method_bind("SkeletonIK3D\000", "get_max_iterations\000", 3905245786)
		methodSkeletonIK3D[22] = classDB.get_method_bind("SkeletonIK3D\000", "start\000", 107499316)
		methodSkeletonIK3D[23] = classDB.get_method_bind("SkeletonIK3D\000", "stop\000", 3218959716)
		methodSkeletonModification2D[0] = classDB.get_method_bind("SkeletonModification2D\000", "set_enabled\000", 2586408642)
		methodSkeletonModification2D[1] = classDB.get_method_bind("SkeletonModification2D\000", "get_enabled\000", 2240911060)
		methodSkeletonModification2D[2] = classDB.get_method_bind("SkeletonModification2D\000", "get_modification_stack\000", 2137761694)
		methodSkeletonModification2D[3] = classDB.get_method_bind("SkeletonModification2D\000", "set_is_setup\000", 2586408642)
		methodSkeletonModification2D[4] = classDB.get_method_bind("SkeletonModification2D\000", "get_is_setup\000", 36873697)
		methodSkeletonModification2D[5] = classDB.get_method_bind("SkeletonModification2D\000", "set_execution_mode\000", 1286410249)
		methodSkeletonModification2D[6] = classDB.get_method_bind("SkeletonModification2D\000", "get_execution_mode\000", 3905245786)
		methodSkeletonModification2D[7] = classDB.get_method_bind("SkeletonModification2D\000", "clamp_angle\000", 1229502682)
		methodSkeletonModification2D[8] = classDB.get_method_bind("SkeletonModification2D\000", "set_editor_draw_gizmo\000", 2586408642)
		methodSkeletonModification2D[9] = classDB.get_method_bind("SkeletonModification2D\000", "get_editor_draw_gizmo\000", 36873697)
		methodSkeletonModification2DCCDIK[0] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DCCDIK[1] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DCCDIK[2] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification2DCCDIK[3] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification2DCCDIK[4] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_data_chain_length\000", 1286410249)
		methodSkeletonModification2DCCDIK[5] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_data_chain_length\000", 2455072627)
		methodSkeletonModification2DCCDIK[6] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DCCDIK[7] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DCCDIK[8] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DCCDIK[9] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_bone_index\000", 923996154)
		methodSkeletonModification2DCCDIK[10] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_rotate_from_joint\000", 300928843)
		methodSkeletonModification2DCCDIK[11] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_rotate_from_joint\000", 1116898809)
		methodSkeletonModification2DCCDIK[12] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_enable_constraint\000", 300928843)
		methodSkeletonModification2DCCDIK[13] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_enable_constraint\000", 1116898809)
		methodSkeletonModification2DCCDIK[14] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_min\000", 1602489585)
		methodSkeletonModification2DCCDIK[15] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_min\000", 2339986948)
		methodSkeletonModification2DCCDIK[16] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_max\000", 1602489585)
		methodSkeletonModification2DCCDIK[17] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_max\000", 2339986948)
		methodSkeletonModification2DCCDIK[18] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "set_ccdik_joint_constraint_angle_invert\000", 300928843)
		methodSkeletonModification2DCCDIK[19] = classDB.get_method_bind("SkeletonModification2DCCDIK\000", "get_ccdik_joint_constraint_angle_invert\000", 1116898809)
		methodSkeletonModification2DFABRIK[0] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DFABRIK[1] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DFABRIK[2] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_fabrik_data_chain_length\000", 1286410249)
		methodSkeletonModification2DFABRIK[3] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_fabrik_data_chain_length\000", 2455072627)
		methodSkeletonModification2DFABRIK[4] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_fabrik_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DFABRIK[5] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_fabrik_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DFABRIK[6] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_fabrik_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DFABRIK[7] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_fabrik_joint_bone_index\000", 923996154)
		methodSkeletonModification2DFABRIK[8] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_fabrik_joint_magnet_position\000", 163021252)
		methodSkeletonModification2DFABRIK[9] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_fabrik_joint_magnet_position\000", 2299179447)
		methodSkeletonModification2DFABRIK[10] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "set_fabrik_joint_use_target_rotation\000", 300928843)
		methodSkeletonModification2DFABRIK[11] = classDB.get_method_bind("SkeletonModification2DFABRIK\000", "get_fabrik_joint_use_target_rotation\000", 1116898809)
		methodSkeletonModification2DJiggle[0] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DJiggle[1] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DJiggle[2] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_data_chain_length\000", 1286410249)
		methodSkeletonModification2DJiggle[3] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_data_chain_length\000", 2455072627)
		methodSkeletonModification2DJiggle[4] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_stiffness\000", 373806689)
		methodSkeletonModification2DJiggle[5] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_stiffness\000", 1740695150)
		methodSkeletonModification2DJiggle[6] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_mass\000", 373806689)
		methodSkeletonModification2DJiggle[7] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_mass\000", 1740695150)
		methodSkeletonModification2DJiggle[8] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_damping\000", 373806689)
		methodSkeletonModification2DJiggle[9] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_damping\000", 1740695150)
		methodSkeletonModification2DJiggle[10] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_use_gravity\000", 2586408642)
		methodSkeletonModification2DJiggle[11] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_use_gravity\000", 36873697)
		methodSkeletonModification2DJiggle[12] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_gravity\000", 743155724)
		methodSkeletonModification2DJiggle[13] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_gravity\000", 3341600327)
		methodSkeletonModification2DJiggle[14] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_use_colliders\000", 2586408642)
		methodSkeletonModification2DJiggle[15] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_use_colliders\000", 36873697)
		methodSkeletonModification2DJiggle[16] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_collision_mask\000", 1286410249)
		methodSkeletonModification2DJiggle[17] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_collision_mask\000", 3905245786)
		methodSkeletonModification2DJiggle[18] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_bone2d_node\000", 2761262315)
		methodSkeletonModification2DJiggle[19] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_bone2d_node\000", 408788394)
		methodSkeletonModification2DJiggle[20] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_bone_index\000", 3937882851)
		methodSkeletonModification2DJiggle[21] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_bone_index\000", 923996154)
		methodSkeletonModification2DJiggle[22] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_override\000", 300928843)
		methodSkeletonModification2DJiggle[23] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_override\000", 1116898809)
		methodSkeletonModification2DJiggle[24] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_stiffness\000", 1602489585)
		methodSkeletonModification2DJiggle[25] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_stiffness\000", 2339986948)
		methodSkeletonModification2DJiggle[26] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_mass\000", 1602489585)
		methodSkeletonModification2DJiggle[27] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_mass\000", 2339986948)
		methodSkeletonModification2DJiggle[28] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_damping\000", 1602489585)
		methodSkeletonModification2DJiggle[29] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_damping\000", 2339986948)
		methodSkeletonModification2DJiggle[30] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_use_gravity\000", 300928843)
		methodSkeletonModification2DJiggle[31] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_use_gravity\000", 1116898809)
		methodSkeletonModification2DJiggle[32] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "set_jiggle_joint_gravity\000", 163021252)
		methodSkeletonModification2DJiggle[33] = classDB.get_method_bind("SkeletonModification2DJiggle\000", "get_jiggle_joint_gravity\000", 2299179447)
		methodSkeletonModification2DLookAt[0] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_bone2d_node\000", 1348162250)
		methodSkeletonModification2DLookAt[1] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_bone2d_node\000", 4075236667)
		methodSkeletonModification2DLookAt[2] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_bone_index\000", 1286410249)
		methodSkeletonModification2DLookAt[3] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_bone_index\000", 3905245786)
		methodSkeletonModification2DLookAt[4] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DLookAt[5] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DLookAt[6] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_additional_rotation\000", 373806689)
		methodSkeletonModification2DLookAt[7] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_additional_rotation\000", 1740695150)
		methodSkeletonModification2DLookAt[8] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_enable_constraint\000", 2586408642)
		methodSkeletonModification2DLookAt[9] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_enable_constraint\000", 36873697)
		methodSkeletonModification2DLookAt[10] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_constraint_angle_min\000", 373806689)
		methodSkeletonModification2DLookAt[11] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_constraint_angle_min\000", 1740695150)
		methodSkeletonModification2DLookAt[12] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_constraint_angle_max\000", 373806689)
		methodSkeletonModification2DLookAt[13] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_constraint_angle_max\000", 1740695150)
		methodSkeletonModification2DLookAt[14] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "set_constraint_angle_invert\000", 2586408642)
		methodSkeletonModification2DLookAt[15] = classDB.get_method_bind("SkeletonModification2DLookAt\000", "get_constraint_angle_invert\000", 36873697)
		methodSkeletonModification2DPhysicalBones[0] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "set_physical_bone_chain_length\000", 1286410249)
		methodSkeletonModification2DPhysicalBones[1] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "get_physical_bone_chain_length\000", 2455072627)
		methodSkeletonModification2DPhysicalBones[2] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "set_physical_bone_node\000", 2761262315)
		methodSkeletonModification2DPhysicalBones[3] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "get_physical_bone_node\000", 408788394)
		methodSkeletonModification2DPhysicalBones[4] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "fetch_physical_bones\000", 3218959716)
		methodSkeletonModification2DPhysicalBones[5] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "start_simulation\000", 2787316981)
		methodSkeletonModification2DPhysicalBones[6] = classDB.get_method_bind("SkeletonModification2DPhysicalBones\000", "stop_simulation\000", 2787316981)
		methodSkeletonModification2DStackHolder[0] = classDB.get_method_bind("SkeletonModification2DStackHolder\000", "set_held_modification_stack\000", 3907307132)
		methodSkeletonModification2DStackHolder[1] = classDB.get_method_bind("SkeletonModification2DStackHolder\000", "get_held_modification_stack\000", 2107508396)
		methodSkeletonModification2DTwoBoneIK[0] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[1] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[2] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_target_minimum_distance\000", 373806689)
		methodSkeletonModification2DTwoBoneIK[3] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_target_minimum_distance\000", 1740695150)
		methodSkeletonModification2DTwoBoneIK[4] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_target_maximum_distance\000", 373806689)
		methodSkeletonModification2DTwoBoneIK[5] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_target_maximum_distance\000", 1740695150)
		methodSkeletonModification2DTwoBoneIK[6] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_flip_bend_direction\000", 2586408642)
		methodSkeletonModification2DTwoBoneIK[7] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_flip_bend_direction\000", 36873697)
		methodSkeletonModification2DTwoBoneIK[8] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_joint_one_bone2d_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[9] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_joint_one_bone2d_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[10] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_joint_one_bone_idx\000", 1286410249)
		methodSkeletonModification2DTwoBoneIK[11] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_joint_one_bone_idx\000", 3905245786)
		methodSkeletonModification2DTwoBoneIK[12] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_joint_two_bone2d_node\000", 1348162250)
		methodSkeletonModification2DTwoBoneIK[13] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_joint_two_bone2d_node\000", 4075236667)
		methodSkeletonModification2DTwoBoneIK[14] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "set_joint_two_bone_idx\000", 1286410249)
		methodSkeletonModification2DTwoBoneIK[15] = classDB.get_method_bind("SkeletonModification2DTwoBoneIK\000", "get_joint_two_bone_idx\000", 3905245786)
		methodSkeletonModification3D[0] = classDB.get_method_bind("SkeletonModification3D\000", "set_enabled\000", 2586408642)
		methodSkeletonModification3D[1] = classDB.get_method_bind("SkeletonModification3D\000", "get_enabled\000", 2240911060)
		methodSkeletonModification3D[2] = classDB.get_method_bind("SkeletonModification3D\000", "get_modification_stack\000", 3888860108)
		methodSkeletonModification3D[3] = classDB.get_method_bind("SkeletonModification3D\000", "set_is_setup\000", 2586408642)
		methodSkeletonModification3D[4] = classDB.get_method_bind("SkeletonModification3D\000", "get_is_setup\000", 36873697)
		methodSkeletonModification3D[5] = classDB.get_method_bind("SkeletonModification3D\000", "set_execution_mode\000", 1286410249)
		methodSkeletonModification3D[6] = classDB.get_method_bind("SkeletonModification3D\000", "get_execution_mode\000", 3905245786)
		methodSkeletonModification3D[7] = classDB.get_method_bind("SkeletonModification3D\000", "clamp_angle\000", 1229502682)
		methodSkeletonModification3DCCDIK[0] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DCCDIK[1] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DCCDIK[2] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification3DCCDIK[3] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification3DCCDIK[4] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_use_high_quality_solve\000", 2586408642)
		methodSkeletonModification3DCCDIK[5] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_use_high_quality_solve\000", 36873697)
		methodSkeletonModification3DCCDIK[6] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_bone_name\000", 844755477)
		methodSkeletonModification3DCCDIK[7] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_bone_name\000", 501894301)
		methodSkeletonModification3DCCDIK[8] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_bone_index\000", 923996154)
		methodSkeletonModification3DCCDIK[9] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DCCDIK[10] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_ccdik_axis\000", 923996154)
		methodSkeletonModification3DCCDIK[11] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_ccdik_axis\000", 3937882851)
		methodSkeletonModification3DCCDIK[12] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_enable_joint_constraint\000", 1116898809)
		methodSkeletonModification3DCCDIK[13] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_enable_joint_constraint\000", 300928843)
		methodSkeletonModification3DCCDIK[14] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_angle_min\000", 2339986948)
		methodSkeletonModification3DCCDIK[15] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_angle_min\000", 1602489585)
		methodSkeletonModification3DCCDIK[16] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_angle_max\000", 2339986948)
		methodSkeletonModification3DCCDIK[17] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_angle_max\000", 1602489585)
		methodSkeletonModification3DCCDIK[18] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_joint_constraint_invert\000", 1116898809)
		methodSkeletonModification3DCCDIK[19] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_joint_constraint_invert\000", 300928843)
		methodSkeletonModification3DCCDIK[20] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "set_ccdik_data_chain_length\000", 1286410249)
		methodSkeletonModification3DCCDIK[21] = classDB.get_method_bind("SkeletonModification3DCCDIK\000", "get_ccdik_data_chain_length\000", 2455072627)
		methodSkeletonModification3DFABRIK[0] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DFABRIK[1] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DFABRIK[2] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_data_chain_length\000", 1286410249)
		methodSkeletonModification3DFABRIK[3] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_data_chain_length\000", 2455072627)
		methodSkeletonModification3DFABRIK[4] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_chain_tolerance\000", 373806689)
		methodSkeletonModification3DFABRIK[5] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_chain_tolerance\000", 191475506)
		methodSkeletonModification3DFABRIK[6] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_chain_max_iterations\000", 1286410249)
		methodSkeletonModification3DFABRIK[7] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_chain_max_iterations\000", 2455072627)
		methodSkeletonModification3DFABRIK[8] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_bone_name\000", 844755477)
		methodSkeletonModification3DFABRIK[9] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_bone_name\000", 501894301)
		methodSkeletonModification3DFABRIK[10] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_bone_index\000", 923996154)
		methodSkeletonModification3DFABRIK[11] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DFABRIK[12] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_length\000", 2339986948)
		methodSkeletonModification3DFABRIK[13] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_length\000", 1602489585)
		methodSkeletonModification3DFABRIK[14] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_magnet\000", 711720468)
		methodSkeletonModification3DFABRIK[15] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_magnet\000", 1530502735)
		methodSkeletonModification3DFABRIK[16] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_auto_calculate_length\000", 1116898809)
		methodSkeletonModification3DFABRIK[17] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_auto_calculate_length\000", 300928843)
		methodSkeletonModification3DFABRIK[18] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "fabrik_joint_auto_calculate_length\000", 1286410249)
		methodSkeletonModification3DFABRIK[19] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_use_tip_node\000", 1116898809)
		methodSkeletonModification3DFABRIK[20] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_use_tip_node\000", 300928843)
		methodSkeletonModification3DFABRIK[21] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_tip_node\000", 408788394)
		methodSkeletonModification3DFABRIK[22] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_tip_node\000", 2761262315)
		methodSkeletonModification3DFABRIK[23] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "get_fabrik_joint_use_target_basis\000", 1116898809)
		methodSkeletonModification3DFABRIK[24] = classDB.get_method_bind("SkeletonModification3DFABRIK\000", "set_fabrik_joint_use_target_basis\000", 300928843)
		methodSkeletonModification3DJiggle[0] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DJiggle[1] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DJiggle[2] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_data_chain_length\000", 1286410249)
		methodSkeletonModification3DJiggle[3] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_data_chain_length\000", 2455072627)
		methodSkeletonModification3DJiggle[4] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_stiffness\000", 373806689)
		methodSkeletonModification3DJiggle[5] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_stiffness\000", 1740695150)
		methodSkeletonModification3DJiggle[6] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_mass\000", 373806689)
		methodSkeletonModification3DJiggle[7] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_mass\000", 1740695150)
		methodSkeletonModification3DJiggle[8] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_damping\000", 373806689)
		methodSkeletonModification3DJiggle[9] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_damping\000", 1740695150)
		methodSkeletonModification3DJiggle[10] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_use_gravity\000", 2586408642)
		methodSkeletonModification3DJiggle[11] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_use_gravity\000", 36873697)
		methodSkeletonModification3DJiggle[12] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_gravity\000", 3460891852)
		methodSkeletonModification3DJiggle[13] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_gravity\000", 3360562783)
		methodSkeletonModification3DJiggle[14] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_use_colliders\000", 2586408642)
		methodSkeletonModification3DJiggle[15] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_use_colliders\000", 36873697)
		methodSkeletonModification3DJiggle[16] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_collision_mask\000", 1286410249)
		methodSkeletonModification3DJiggle[17] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_collision_mask\000", 3905245786)
		methodSkeletonModification3DJiggle[18] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_bone_name\000", 501894301)
		methodSkeletonModification3DJiggle[19] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_bone_name\000", 844755477)
		methodSkeletonModification3DJiggle[20] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_bone_index\000", 3937882851)
		methodSkeletonModification3DJiggle[21] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_bone_index\000", 923996154)
		methodSkeletonModification3DJiggle[22] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_override\000", 300928843)
		methodSkeletonModification3DJiggle[23] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_override\000", 1116898809)
		methodSkeletonModification3DJiggle[24] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_stiffness\000", 1602489585)
		methodSkeletonModification3DJiggle[25] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_stiffness\000", 2339986948)
		methodSkeletonModification3DJiggle[26] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_mass\000", 1602489585)
		methodSkeletonModification3DJiggle[27] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_mass\000", 2339986948)
		methodSkeletonModification3DJiggle[28] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_damping\000", 1602489585)
		methodSkeletonModification3DJiggle[29] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_damping\000", 2339986948)
		methodSkeletonModification3DJiggle[30] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_use_gravity\000", 300928843)
		methodSkeletonModification3DJiggle[31] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_use_gravity\000", 1116898809)
		methodSkeletonModification3DJiggle[32] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_gravity\000", 1530502735)
		methodSkeletonModification3DJiggle[33] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_gravity\000", 711720468)
		methodSkeletonModification3DJiggle[34] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "set_jiggle_joint_roll\000", 1602489585)
		methodSkeletonModification3DJiggle[35] = classDB.get_method_bind("SkeletonModification3DJiggle\000", "get_jiggle_joint_roll\000", 2339986948)
		methodSkeletonModification3DLookAt[0] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_bone_name\000", 83702148)
		methodSkeletonModification3DLookAt[1] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_bone_name\000", 201670096)
		methodSkeletonModification3DLookAt[2] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_bone_index\000", 1286410249)
		methodSkeletonModification3DLookAt[3] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_bone_index\000", 3905245786)
		methodSkeletonModification3DLookAt[4] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DLookAt[5] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DLookAt[6] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_additional_rotation\000", 3460891852)
		methodSkeletonModification3DLookAt[7] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_additional_rotation\000", 3360562783)
		methodSkeletonModification3DLookAt[8] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_lock_rotation_to_plane\000", 2586408642)
		methodSkeletonModification3DLookAt[9] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_lock_rotation_to_plane\000", 36873697)
		methodSkeletonModification3DLookAt[10] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "set_lock_rotation_plane\000", 1286410249)
		methodSkeletonModification3DLookAt[11] = classDB.get_method_bind("SkeletonModification3DLookAt\000", "get_lock_rotation_plane\000", 3905245786)
		methodSkeletonModification3DStackHolder[0] = classDB.get_method_bind("SkeletonModification3DStackHolder\000", "set_held_modification_stack\000", 3155601425)
		methodSkeletonModification3DStackHolder[1] = classDB.get_method_bind("SkeletonModification3DStackHolder\000", "get_held_modification_stack\000", 3652152314)
		methodSkeletonModification3DTwoBoneIK[0] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_target_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[1] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_target_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[2] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_use_pole_node\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[3] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_use_pole_node\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[4] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_pole_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[5] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_pole_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[6] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_use_tip_node\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[7] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_use_tip_node\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[8] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_tip_node\000", 1348162250)
		methodSkeletonModification3DTwoBoneIK[9] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_tip_node\000", 4075236667)
		methodSkeletonModification3DTwoBoneIK[10] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_auto_calculate_joint_length\000", 2586408642)
		methodSkeletonModification3DTwoBoneIK[11] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_auto_calculate_joint_length\000", 36873697)
		methodSkeletonModification3DTwoBoneIK[12] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_one_bone_name\000", 83702148)
		methodSkeletonModification3DTwoBoneIK[13] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_one_bone_name\000", 201670096)
		methodSkeletonModification3DTwoBoneIK[14] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_one_bone_idx\000", 1286410249)
		methodSkeletonModification3DTwoBoneIK[15] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_one_bone_idx\000", 3905245786)
		methodSkeletonModification3DTwoBoneIK[16] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_one_length\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[17] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_one_length\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[18] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_two_bone_name\000", 83702148)
		methodSkeletonModification3DTwoBoneIK[19] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_two_bone_name\000", 201670096)
		methodSkeletonModification3DTwoBoneIK[20] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_two_bone_idx\000", 1286410249)
		methodSkeletonModification3DTwoBoneIK[21] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_two_bone_idx\000", 3905245786)
		methodSkeletonModification3DTwoBoneIK[22] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_two_length\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[23] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_two_length\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[24] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_one_roll\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[25] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_one_roll\000", 1740695150)
		methodSkeletonModification3DTwoBoneIK[26] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "set_joint_two_roll\000", 373806689)
		methodSkeletonModification3DTwoBoneIK[27] = classDB.get_method_bind("SkeletonModification3DTwoBoneIK\000", "get_joint_two_roll\000", 1740695150)
		methodSkeletonModificationStack2D[0] = classDB.get_method_bind("SkeletonModificationStack2D\000", "setup\000", 3218959716)
		methodSkeletonModificationStack2D[1] = classDB.get_method_bind("SkeletonModificationStack2D\000", "execute\000", 1005356550)
		methodSkeletonModificationStack2D[2] = classDB.get_method_bind("SkeletonModificationStack2D\000", "enable_all_modifications\000", 2586408642)
		methodSkeletonModificationStack2D[3] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_modification\000", 2570274329)
		methodSkeletonModificationStack2D[4] = classDB.get_method_bind("SkeletonModificationStack2D\000", "add_modification\000", 354162120)
		methodSkeletonModificationStack2D[5] = classDB.get_method_bind("SkeletonModificationStack2D\000", "delete_modification\000", 1286410249)
		methodSkeletonModificationStack2D[6] = classDB.get_method_bind("SkeletonModificationStack2D\000", "set_modification\000", 1098262544)
		methodSkeletonModificationStack2D[7] = classDB.get_method_bind("SkeletonModificationStack2D\000", "set_modification_count\000", 1286410249)
		methodSkeletonModificationStack2D[8] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_modification_count\000", 3905245786)
		methodSkeletonModificationStack2D[9] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_is_setup\000", 36873697)
		methodSkeletonModificationStack2D[10] = classDB.get_method_bind("SkeletonModificationStack2D\000", "set_enabled\000", 2586408642)
		methodSkeletonModificationStack2D[11] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_enabled\000", 36873697)
		methodSkeletonModificationStack2D[12] = classDB.get_method_bind("SkeletonModificationStack2D\000", "set_strength\000", 373806689)
		methodSkeletonModificationStack2D[13] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_strength\000", 1740695150)
		methodSkeletonModificationStack2D[14] = classDB.get_method_bind("SkeletonModificationStack2D\000", "get_skeleton\000", 1697361217)
		methodSkeletonModificationStack3D[0] = classDB.get_method_bind("SkeletonModificationStack3D\000", "setup\000", 3218959716)
		methodSkeletonModificationStack3D[1] = classDB.get_method_bind("SkeletonModificationStack3D\000", "execute\000", 1005356550)
		methodSkeletonModificationStack3D[2] = classDB.get_method_bind("SkeletonModificationStack3D\000", "enable_all_modifications\000", 2586408642)
		methodSkeletonModificationStack3D[3] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_modification\000", 4260634309)
		methodSkeletonModificationStack3D[4] = classDB.get_method_bind("SkeletonModificationStack3D\000", "add_modification\000", 2301100674)
		methodSkeletonModificationStack3D[5] = classDB.get_method_bind("SkeletonModificationStack3D\000", "delete_modification\000", 1286410249)
		methodSkeletonModificationStack3D[6] = classDB.get_method_bind("SkeletonModificationStack3D\000", "set_modification\000", 94671383)
		methodSkeletonModificationStack3D[7] = classDB.get_method_bind("SkeletonModificationStack3D\000", "set_modification_count\000", 1286410249)
		methodSkeletonModificationStack3D[8] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_modification_count\000", 3905245786)
		methodSkeletonModificationStack3D[9] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_is_setup\000", 36873697)
		methodSkeletonModificationStack3D[10] = classDB.get_method_bind("SkeletonModificationStack3D\000", "set_enabled\000", 2586408642)
		methodSkeletonModificationStack3D[11] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_enabled\000", 36873697)
		methodSkeletonModificationStack3D[12] = classDB.get_method_bind("SkeletonModificationStack3D\000", "set_strength\000", 373806689)
		methodSkeletonModificationStack3D[13] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_strength\000", 1740695150)
		methodSkeletonModificationStack3D[14] = classDB.get_method_bind("SkeletonModificationStack3D\000", "get_skeleton\000", 1488626673)
		methodSkeletonProfile[0] = classDB.get_method_bind("SkeletonProfile\000", "set_root_bone\000", 3304788590)
		methodSkeletonProfile[1] = classDB.get_method_bind("SkeletonProfile\000", "get_root_bone\000", 2737447660)
		methodSkeletonProfile[2] = classDB.get_method_bind("SkeletonProfile\000", "set_scale_base_bone\000", 3304788590)
		methodSkeletonProfile[3] = classDB.get_method_bind("SkeletonProfile\000", "get_scale_base_bone\000", 2737447660)
		methodSkeletonProfile[4] = classDB.get_method_bind("SkeletonProfile\000", "set_group_size\000", 1286410249)
		methodSkeletonProfile[5] = classDB.get_method_bind("SkeletonProfile\000", "get_group_size\000", 2455072627)
		methodSkeletonProfile[6] = classDB.get_method_bind("SkeletonProfile\000", "get_group_name\000", 659327637)
		methodSkeletonProfile[7] = classDB.get_method_bind("SkeletonProfile\000", "set_group_name\000", 3780747571)
		methodSkeletonProfile[8] = classDB.get_method_bind("SkeletonProfile\000", "get_texture\000", 3536238170)
		methodSkeletonProfile[9] = classDB.get_method_bind("SkeletonProfile\000", "set_texture\000", 666127730)
		methodSkeletonProfile[10] = classDB.get_method_bind("SkeletonProfile\000", "set_bone_size\000", 1286410249)
		methodSkeletonProfile[11] = classDB.get_method_bind("SkeletonProfile\000", "get_bone_size\000", 2455072627)
		methodSkeletonProfile[12] = classDB.get_method_bind("SkeletonProfile\000", "find_bone\000", 2458036349)
		methodSkeletonProfile[13] = classDB.get_method_bind("SkeletonProfile\000", "get_bone_name\000", 659327637)
		methodSkeletonProfile[14] = classDB.get_method_bind("SkeletonProfile\000", "set_bone_name\000", 3780747571)
		methodSkeletonProfile[15] = classDB.get_method_bind("SkeletonProfile\000", "get_bone_parent\000", 659327637)
		methodSkeletonProfile[16] = classDB.get_method_bind("SkeletonProfile\000", "set_bone_parent\000", 3780747571)
		methodSkeletonProfile[17] = classDB.get_method_bind("SkeletonProfile\000", "get_tail_direction\000", 2675997574)
		methodSkeletonProfile[18] = classDB.get_method_bind("SkeletonProfile\000", "set_tail_direction\000", 1231951015)
		methodSkeletonProfile[19] = classDB.get_method_bind("SkeletonProfile\000", "get_bone_tail\000", 659327637)
		methodSkeletonProfile[20] = classDB.get_method_bind("SkeletonProfile\000", "set_bone_tail\000", 3780747571)
		methodSkeletonProfile[21] = classDB.get_method_bind("SkeletonProfile\000", "get_reference_pose\000", 1965739696)
		methodSkeletonProfile[22] = classDB.get_method_bind("SkeletonProfile\000", "set_reference_pose\000", 3616898986)
		methodSkeletonProfile[23] = classDB.get_method_bind("SkeletonProfile\000", "get_handle_offset\000", 2299179447)
		methodSkeletonProfile[24] = classDB.get_method_bind("SkeletonProfile\000", "set_handle_offset\000", 163021252)
		methodSkeletonProfile[25] = classDB.get_method_bind("SkeletonProfile\000", "get_group\000", 659327637)
		methodSkeletonProfile[26] = classDB.get_method_bind("SkeletonProfile\000", "set_group\000", 3780747571)
		methodSkin[0] = classDB.get_method_bind("Skin\000", "set_bind_count\000", 1286410249)
		methodSkin[1] = classDB.get_method_bind("Skin\000", "get_bind_count\000", 3905245786)
		methodSkin[2] = classDB.get_method_bind("Skin\000", "add_bind\000", 3616898986)
		methodSkin[3] = classDB.get_method_bind("Skin\000", "add_named_bind\000", 3154712474)
		methodSkin[4] = classDB.get_method_bind("Skin\000", "set_bind_pose\000", 3616898986)
		methodSkin[5] = classDB.get_method_bind("Skin\000", "get_bind_pose\000", 1965739696)
		methodSkin[6] = classDB.get_method_bind("Skin\000", "set_bind_name\000", 3780747571)
		methodSkin[7] = classDB.get_method_bind("Skin\000", "get_bind_name\000", 659327637)
		methodSkin[8] = classDB.get_method_bind("Skin\000", "set_bind_bone\000", 3937882851)
		methodSkin[9] = classDB.get_method_bind("Skin\000", "get_bind_bone\000", 923996154)
		methodSkin[10] = classDB.get_method_bind("Skin\000", "clear_binds\000", 3218959716)
		methodSkinReference[0] = classDB.get_method_bind("SkinReference\000", "get_skeleton\000", 2944877500)
		methodSkinReference[1] = classDB.get_method_bind("SkinReference\000", "get_skin\000", 2074563878)
		methodSky[0] = classDB.get_method_bind("Sky\000", "set_radiance_size\000", 1512957179)
		methodSky[1] = classDB.get_method_bind("Sky\000", "get_radiance_size\000", 2708733976)
		methodSky[2] = classDB.get_method_bind("Sky\000", "set_process_mode\000", 875986769)
		methodSky[3] = classDB.get_method_bind("Sky\000", "get_process_mode\000", 731245043)
		methodSky[4] = classDB.get_method_bind("Sky\000", "set_material\000", 2757459619)
		methodSky[5] = classDB.get_method_bind("Sky\000", "get_material\000", 5934680)
		methodSlider[0] = classDB.get_method_bind("Slider\000", "set_ticks\000", 1286410249)
		methodSlider[1] = classDB.get_method_bind("Slider\000", "get_ticks\000", 3905245786)
		methodSlider[2] = classDB.get_method_bind("Slider\000", "get_ticks_on_borders\000", 36873697)
		methodSlider[3] = classDB.get_method_bind("Slider\000", "set_ticks_on_borders\000", 2586408642)
		methodSlider[4] = classDB.get_method_bind("Slider\000", "set_editable\000", 2586408642)
		methodSlider[5] = classDB.get_method_bind("Slider\000", "is_editable\000", 36873697)
		methodSlider[6] = classDB.get_method_bind("Slider\000", "set_scrollable\000", 2586408642)
		methodSlider[7] = classDB.get_method_bind("Slider\000", "is_scrollable\000", 36873697)
		methodSliderJoint3D[0] = classDB.get_method_bind("SliderJoint3D\000", "set_param\000", 918243683)
		methodSliderJoint3D[1] = classDB.get_method_bind("SliderJoint3D\000", "get_param\000", 959925627)
		methodSoftBody3D[0] = classDB.get_method_bind("SoftBody3D\000", "get_physics_rid\000", 2944877500)
		methodSoftBody3D[1] = classDB.get_method_bind("SoftBody3D\000", "set_collision_mask\000", 1286410249)
		methodSoftBody3D[2] = classDB.get_method_bind("SoftBody3D\000", "get_collision_mask\000", 3905245786)
		methodSoftBody3D[3] = classDB.get_method_bind("SoftBody3D\000", "set_collision_layer\000", 1286410249)
		methodSoftBody3D[4] = classDB.get_method_bind("SoftBody3D\000", "get_collision_layer\000", 3905245786)
		methodSoftBody3D[5] = classDB.get_method_bind("SoftBody3D\000", "set_collision_mask_value\000", 300928843)
		methodSoftBody3D[6] = classDB.get_method_bind("SoftBody3D\000", "get_collision_mask_value\000", 1116898809)
		methodSoftBody3D[7] = classDB.get_method_bind("SoftBody3D\000", "set_collision_layer_value\000", 300928843)
		methodSoftBody3D[8] = classDB.get_method_bind("SoftBody3D\000", "get_collision_layer_value\000", 1116898809)
		methodSoftBody3D[9] = classDB.get_method_bind("SoftBody3D\000", "set_parent_collision_ignore\000", 1348162250)
		methodSoftBody3D[10] = classDB.get_method_bind("SoftBody3D\000", "get_parent_collision_ignore\000", 4075236667)
		methodSoftBody3D[11] = classDB.get_method_bind("SoftBody3D\000", "set_disable_mode\000", 1104158384)
		methodSoftBody3D[12] = classDB.get_method_bind("SoftBody3D\000", "get_disable_mode\000", 4135042476)
		methodSoftBody3D[13] = classDB.get_method_bind("SoftBody3D\000", "get_collision_exceptions\000", 2915620761)
		methodSoftBody3D[14] = classDB.get_method_bind("SoftBody3D\000", "add_collision_exception_with\000", 1078189570)
		methodSoftBody3D[15] = classDB.get_method_bind("SoftBody3D\000", "remove_collision_exception_with\000", 1078189570)
		methodSoftBody3D[16] = classDB.get_method_bind("SoftBody3D\000", "set_simulation_precision\000", 1286410249)
		methodSoftBody3D[17] = classDB.get_method_bind("SoftBody3D\000", "get_simulation_precision\000", 2455072627)
		methodSoftBody3D[18] = classDB.get_method_bind("SoftBody3D\000", "set_total_mass\000", 373806689)
		methodSoftBody3D[19] = classDB.get_method_bind("SoftBody3D\000", "get_total_mass\000", 191475506)
		methodSoftBody3D[20] = classDB.get_method_bind("SoftBody3D\000", "set_linear_stiffness\000", 373806689)
		methodSoftBody3D[21] = classDB.get_method_bind("SoftBody3D\000", "get_linear_stiffness\000", 191475506)
		methodSoftBody3D[22] = classDB.get_method_bind("SoftBody3D\000", "set_pressure_coefficient\000", 373806689)
		methodSoftBody3D[23] = classDB.get_method_bind("SoftBody3D\000", "get_pressure_coefficient\000", 191475506)
		methodSoftBody3D[24] = classDB.get_method_bind("SoftBody3D\000", "set_damping_coefficient\000", 373806689)
		methodSoftBody3D[25] = classDB.get_method_bind("SoftBody3D\000", "get_damping_coefficient\000", 191475506)
		methodSoftBody3D[26] = classDB.get_method_bind("SoftBody3D\000", "set_drag_coefficient\000", 373806689)
		methodSoftBody3D[27] = classDB.get_method_bind("SoftBody3D\000", "get_drag_coefficient\000", 191475506)
		methodSoftBody3D[28] = classDB.get_method_bind("SoftBody3D\000", "get_point_transform\000", 871989493)
		methodSoftBody3D[29] = classDB.get_method_bind("SoftBody3D\000", "set_point_pinned\000", 3814935226)
		methodSoftBody3D[30] = classDB.get_method_bind("SoftBody3D\000", "is_point_pinned\000", 1116898809)
		methodSoftBody3D[31] = classDB.get_method_bind("SoftBody3D\000", "set_ray_pickable\000", 2586408642)
		methodSoftBody3D[32] = classDB.get_method_bind("SoftBody3D\000", "is_ray_pickable\000", 36873697)
		methodSphereMesh[0] = classDB.get_method_bind("SphereMesh\000", "set_radius\000", 373806689)
		methodSphereMesh[1] = classDB.get_method_bind("SphereMesh\000", "get_radius\000", 1740695150)
		methodSphereMesh[2] = classDB.get_method_bind("SphereMesh\000", "set_height\000", 373806689)
		methodSphereMesh[3] = classDB.get_method_bind("SphereMesh\000", "get_height\000", 1740695150)
		methodSphereMesh[4] = classDB.get_method_bind("SphereMesh\000", "set_radial_segments\000", 1286410249)
		methodSphereMesh[5] = classDB.get_method_bind("SphereMesh\000", "get_radial_segments\000", 3905245786)
		methodSphereMesh[6] = classDB.get_method_bind("SphereMesh\000", "set_rings\000", 1286410249)
		methodSphereMesh[7] = classDB.get_method_bind("SphereMesh\000", "get_rings\000", 3905245786)
		methodSphereMesh[8] = classDB.get_method_bind("SphereMesh\000", "set_is_hemisphere\000", 2586408642)
		methodSphereMesh[9] = classDB.get_method_bind("SphereMesh\000", "get_is_hemisphere\000", 36873697)
		methodSphereOccluder3D[0] = classDB.get_method_bind("SphereOccluder3D\000", "set_radius\000", 373806689)
		methodSphereOccluder3D[1] = classDB.get_method_bind("SphereOccluder3D\000", "get_radius\000", 1740695150)
		methodSphereShape3D[0] = classDB.get_method_bind("SphereShape3D\000", "set_radius\000", 373806689)
		methodSphereShape3D[1] = classDB.get_method_bind("SphereShape3D\000", "get_radius\000", 1740695150)
		methodSpinBox[0] = classDB.get_method_bind("SpinBox\000", "set_horizontal_alignment\000", 2312603777)
		methodSpinBox[1] = classDB.get_method_bind("SpinBox\000", "get_horizontal_alignment\000", 341400642)
		methodSpinBox[2] = classDB.get_method_bind("SpinBox\000", "set_suffix\000", 83702148)
		methodSpinBox[3] = classDB.get_method_bind("SpinBox\000", "get_suffix\000", 201670096)
		methodSpinBox[4] = classDB.get_method_bind("SpinBox\000", "set_prefix\000", 83702148)
		methodSpinBox[5] = classDB.get_method_bind("SpinBox\000", "get_prefix\000", 201670096)
		methodSpinBox[6] = classDB.get_method_bind("SpinBox\000", "set_editable\000", 2586408642)
		methodSpinBox[7] = classDB.get_method_bind("SpinBox\000", "set_custom_arrow_step\000", 373806689)
		methodSpinBox[8] = classDB.get_method_bind("SpinBox\000", "get_custom_arrow_step\000", 1740695150)
		methodSpinBox[9] = classDB.get_method_bind("SpinBox\000", "is_editable\000", 36873697)
		methodSpinBox[10] = classDB.get_method_bind("SpinBox\000", "set_update_on_text_changed\000", 2586408642)
		methodSpinBox[11] = classDB.get_method_bind("SpinBox\000", "get_update_on_text_changed\000", 36873697)
		methodSpinBox[12] = classDB.get_method_bind("SpinBox\000", "apply\000", 3218959716)
		methodSpinBox[13] = classDB.get_method_bind("SpinBox\000", "get_line_edit\000", 4071694264)
		methodSplitContainer[0] = classDB.get_method_bind("SplitContainer\000", "set_split_offset\000", 1286410249)
		methodSplitContainer[1] = classDB.get_method_bind("SplitContainer\000", "get_split_offset\000", 3905245786)
		methodSplitContainer[2] = classDB.get_method_bind("SplitContainer\000", "clamp_split_offset\000", 3218959716)
		methodSplitContainer[3] = classDB.get_method_bind("SplitContainer\000", "set_collapsed\000", 2586408642)
		methodSplitContainer[4] = classDB.get_method_bind("SplitContainer\000", "is_collapsed\000", 36873697)
		methodSplitContainer[5] = classDB.get_method_bind("SplitContainer\000", "set_dragger_visibility\000", 1168273952)
		methodSplitContainer[6] = classDB.get_method_bind("SplitContainer\000", "get_dragger_visibility\000", 967297479)
		methodSpringArm3D[0] = classDB.get_method_bind("SpringArm3D\000", "get_hit_length\000", 191475506)
		methodSpringArm3D[1] = classDB.get_method_bind("SpringArm3D\000", "set_length\000", 373806689)
		methodSpringArm3D[2] = classDB.get_method_bind("SpringArm3D\000", "get_length\000", 1740695150)
		methodSpringArm3D[3] = classDB.get_method_bind("SpringArm3D\000", "set_shape\000", 1549710052)
		methodSpringArm3D[4] = classDB.get_method_bind("SpringArm3D\000", "get_shape\000", 3214262478)
		methodSpringArm3D[5] = classDB.get_method_bind("SpringArm3D\000", "add_excluded_object\000", 2722037293)
		methodSpringArm3D[6] = classDB.get_method_bind("SpringArm3D\000", "remove_excluded_object\000", 3521089500)
		methodSpringArm3D[7] = classDB.get_method_bind("SpringArm3D\000", "clear_excluded_objects\000", 3218959716)
		methodSpringArm3D[8] = classDB.get_method_bind("SpringArm3D\000", "set_collision_mask\000", 1286410249)
		methodSpringArm3D[9] = classDB.get_method_bind("SpringArm3D\000", "get_collision_mask\000", 2455072627)
		methodSpringArm3D[10] = classDB.get_method_bind("SpringArm3D\000", "set_margin\000", 373806689)
		methodSpringArm3D[11] = classDB.get_method_bind("SpringArm3D\000", "get_margin\000", 191475506)
		methodSprite2D[0] = classDB.get_method_bind("Sprite2D\000", "set_texture\000", 4051416890)
		methodSprite2D[1] = classDB.get_method_bind("Sprite2D\000", "get_texture\000", 3635182373)
		methodSprite2D[2] = classDB.get_method_bind("Sprite2D\000", "set_centered\000", 2586408642)
		methodSprite2D[3] = classDB.get_method_bind("Sprite2D\000", "is_centered\000", 36873697)
		methodSprite2D[4] = classDB.get_method_bind("Sprite2D\000", "set_offset\000", 743155724)
		methodSprite2D[5] = classDB.get_method_bind("Sprite2D\000", "get_offset\000", 3341600327)
		methodSprite2D[6] = classDB.get_method_bind("Sprite2D\000", "set_flip_h\000", 2586408642)
		methodSprite2D[7] = classDB.get_method_bind("Sprite2D\000", "is_flipped_h\000", 36873697)
		methodSprite2D[8] = classDB.get_method_bind("Sprite2D\000", "set_flip_v\000", 2586408642)
		methodSprite2D[9] = classDB.get_method_bind("Sprite2D\000", "is_flipped_v\000", 36873697)
		methodSprite2D[10] = classDB.get_method_bind("Sprite2D\000", "set_region_enabled\000", 2586408642)
		methodSprite2D[11] = classDB.get_method_bind("Sprite2D\000", "is_region_enabled\000", 36873697)
		methodSprite2D[12] = classDB.get_method_bind("Sprite2D\000", "is_pixel_opaque\000", 556197845)
		methodSprite2D[13] = classDB.get_method_bind("Sprite2D\000", "set_region_rect\000", 2046264180)
		methodSprite2D[14] = classDB.get_method_bind("Sprite2D\000", "get_region_rect\000", 1639390495)
		methodSprite2D[15] = classDB.get_method_bind("Sprite2D\000", "set_region_filter_clip_enabled\000", 2586408642)
		methodSprite2D[16] = classDB.get_method_bind("Sprite2D\000", "is_region_filter_clip_enabled\000", 36873697)
		methodSprite2D[17] = classDB.get_method_bind("Sprite2D\000", "set_frame\000", 1286410249)
		methodSprite2D[18] = classDB.get_method_bind("Sprite2D\000", "get_frame\000", 3905245786)
		methodSprite2D[19] = classDB.get_method_bind("Sprite2D\000", "set_frame_coords\000", 1130785943)
		methodSprite2D[20] = classDB.get_method_bind("Sprite2D\000", "get_frame_coords\000", 3690982128)
		methodSprite2D[21] = classDB.get_method_bind("Sprite2D\000", "set_vframes\000", 1286410249)
		methodSprite2D[22] = classDB.get_method_bind("Sprite2D\000", "get_vframes\000", 3905245786)
		methodSprite2D[23] = classDB.get_method_bind("Sprite2D\000", "set_hframes\000", 1286410249)
		methodSprite2D[24] = classDB.get_method_bind("Sprite2D\000", "get_hframes\000", 3905245786)
		methodSprite2D[25] = classDB.get_method_bind("Sprite2D\000", "get_rect\000", 1639390495)
		methodSprite3D[0] = classDB.get_method_bind("Sprite3D\000", "set_texture\000", 4051416890)
		methodSprite3D[1] = classDB.get_method_bind("Sprite3D\000", "get_texture\000", 3635182373)
		methodSprite3D[2] = classDB.get_method_bind("Sprite3D\000", "set_region_enabled\000", 2586408642)
		methodSprite3D[3] = classDB.get_method_bind("Sprite3D\000", "is_region_enabled\000", 36873697)
		methodSprite3D[4] = classDB.get_method_bind("Sprite3D\000", "set_region_rect\000", 2046264180)
		methodSprite3D[5] = classDB.get_method_bind("Sprite3D\000", "get_region_rect\000", 1639390495)
		methodSprite3D[6] = classDB.get_method_bind("Sprite3D\000", "set_frame\000", 1286410249)
		methodSprite3D[7] = classDB.get_method_bind("Sprite3D\000", "get_frame\000", 3905245786)
		methodSprite3D[8] = classDB.get_method_bind("Sprite3D\000", "set_frame_coords\000", 1130785943)
		methodSprite3D[9] = classDB.get_method_bind("Sprite3D\000", "get_frame_coords\000", 3690982128)
		methodSprite3D[10] = classDB.get_method_bind("Sprite3D\000", "set_vframes\000", 1286410249)
		methodSprite3D[11] = classDB.get_method_bind("Sprite3D\000", "get_vframes\000", 3905245786)
		methodSprite3D[12] = classDB.get_method_bind("Sprite3D\000", "set_hframes\000", 1286410249)
		methodSprite3D[13] = classDB.get_method_bind("Sprite3D\000", "get_hframes\000", 3905245786)
		methodSpriteBase3D[0] = classDB.get_method_bind("SpriteBase3D\000", "set_centered\000", 2586408642)
		methodSpriteBase3D[1] = classDB.get_method_bind("SpriteBase3D\000", "is_centered\000", 36873697)
		methodSpriteBase3D[2] = classDB.get_method_bind("SpriteBase3D\000", "set_offset\000", 743155724)
		methodSpriteBase3D[3] = classDB.get_method_bind("SpriteBase3D\000", "get_offset\000", 3341600327)
		methodSpriteBase3D[4] = classDB.get_method_bind("SpriteBase3D\000", "set_flip_h\000", 2586408642)
		methodSpriteBase3D[5] = classDB.get_method_bind("SpriteBase3D\000", "is_flipped_h\000", 36873697)
		methodSpriteBase3D[6] = classDB.get_method_bind("SpriteBase3D\000", "set_flip_v\000", 2586408642)
		methodSpriteBase3D[7] = classDB.get_method_bind("SpriteBase3D\000", "is_flipped_v\000", 36873697)
		methodSpriteBase3D[8] = classDB.get_method_bind("SpriteBase3D\000", "set_modulate\000", 2920490490)
		methodSpriteBase3D[9] = classDB.get_method_bind("SpriteBase3D\000", "get_modulate\000", 3444240500)
		methodSpriteBase3D[10] = classDB.get_method_bind("SpriteBase3D\000", "set_render_priority\000", 1286410249)
		methodSpriteBase3D[11] = classDB.get_method_bind("SpriteBase3D\000", "get_render_priority\000", 3905245786)
		methodSpriteBase3D[12] = classDB.get_method_bind("SpriteBase3D\000", "set_pixel_size\000", 373806689)
		methodSpriteBase3D[13] = classDB.get_method_bind("SpriteBase3D\000", "get_pixel_size\000", 1740695150)
		methodSpriteBase3D[14] = classDB.get_method_bind("SpriteBase3D\000", "set_axis\000", 1144690656)
		methodSpriteBase3D[15] = classDB.get_method_bind("SpriteBase3D\000", "get_axis\000", 3050976882)
		methodSpriteBase3D[16] = classDB.get_method_bind("SpriteBase3D\000", "set_draw_flag\000", 1135633219)
		methodSpriteBase3D[17] = classDB.get_method_bind("SpriteBase3D\000", "get_draw_flag\000", 1733036628)
		methodSpriteBase3D[18] = classDB.get_method_bind("SpriteBase3D\000", "set_alpha_cut_mode\000", 227561226)
		methodSpriteBase3D[19] = classDB.get_method_bind("SpriteBase3D\000", "get_alpha_cut_mode\000", 336003791)
		methodSpriteBase3D[20] = classDB.get_method_bind("SpriteBase3D\000", "set_billboard_mode\000", 4202036497)
		methodSpriteBase3D[21] = classDB.get_method_bind("SpriteBase3D\000", "get_billboard_mode\000", 1283840139)
		methodSpriteBase3D[22] = classDB.get_method_bind("SpriteBase3D\000", "set_texture_filter\000", 22904437)
		methodSpriteBase3D[23] = classDB.get_method_bind("SpriteBase3D\000", "get_texture_filter\000", 3289213076)
		methodSpriteBase3D[24] = classDB.get_method_bind("SpriteBase3D\000", "get_item_rect\000", 1639390495)
		methodSpriteBase3D[25] = classDB.get_method_bind("SpriteBase3D\000", "generate_triangle_mesh\000", 3476533166)
		methodSpriteFrames[0] = classDB.get_method_bind("SpriteFrames\000", "add_animation\000", 3304788590)
		methodSpriteFrames[1] = classDB.get_method_bind("SpriteFrames\000", "has_animation\000", 2619796661)
		methodSpriteFrames[2] = classDB.get_method_bind("SpriteFrames\000", "remove_animation\000", 3304788590)
		methodSpriteFrames[3] = classDB.get_method_bind("SpriteFrames\000", "rename_animation\000", 3740211285)
		methodSpriteFrames[4] = classDB.get_method_bind("SpriteFrames\000", "get_animation_names\000", 1139954409)
		methodSpriteFrames[5] = classDB.get_method_bind("SpriteFrames\000", "set_animation_speed\000", 4135858297)
		methodSpriteFrames[6] = classDB.get_method_bind("SpriteFrames\000", "get_animation_speed\000", 2349060816)
		methodSpriteFrames[7] = classDB.get_method_bind("SpriteFrames\000", "set_animation_loop\000", 2524380260)
		methodSpriteFrames[8] = classDB.get_method_bind("SpriteFrames\000", "get_animation_loop\000", 2619796661)
		methodSpriteFrames[9] = classDB.get_method_bind("SpriteFrames\000", "add_frame\000", 1628453603)
		methodSpriteFrames[10] = classDB.get_method_bind("SpriteFrames\000", "get_frame_count\000", 2458036349)
		methodSpriteFrames[11] = classDB.get_method_bind("SpriteFrames\000", "get_frame\000", 2900517879)
		methodSpriteFrames[12] = classDB.get_method_bind("SpriteFrames\000", "set_frame\000", 3435961619)
		methodSpriteFrames[13] = classDB.get_method_bind("SpriteFrames\000", "remove_frame\000", 2415702435)
		methodSpriteFrames[14] = classDB.get_method_bind("SpriteFrames\000", "clear\000", 3304788590)
		methodSpriteFrames[15] = classDB.get_method_bind("SpriteFrames\000", "clear_all\000", 3218959716)
		methodStaticBody2D[0] = classDB.get_method_bind("StaticBody2D\000", "set_constant_linear_velocity\000", 743155724)
		methodStaticBody2D[1] = classDB.get_method_bind("StaticBody2D\000", "set_constant_angular_velocity\000", 373806689)
		methodStaticBody2D[2] = classDB.get_method_bind("StaticBody2D\000", "get_constant_linear_velocity\000", 3341600327)
		methodStaticBody2D[3] = classDB.get_method_bind("StaticBody2D\000", "get_constant_angular_velocity\000", 1740695150)
		methodStaticBody2D[4] = classDB.get_method_bind("StaticBody2D\000", "set_physics_material_override\000", 1784508650)
		methodStaticBody2D[5] = classDB.get_method_bind("StaticBody2D\000", "get_physics_material_override\000", 2521850424)
		methodStaticBody3D[0] = classDB.get_method_bind("StaticBody3D\000", "set_constant_linear_velocity\000", 3460891852)
		methodStaticBody3D[1] = classDB.get_method_bind("StaticBody3D\000", "set_constant_angular_velocity\000", 3460891852)
		methodStaticBody3D[2] = classDB.get_method_bind("StaticBody3D\000", "get_constant_linear_velocity\000", 3360562783)
		methodStaticBody3D[3] = classDB.get_method_bind("StaticBody3D\000", "get_constant_angular_velocity\000", 3360562783)
		methodStaticBody3D[4] = classDB.get_method_bind("StaticBody3D\000", "set_physics_material_override\000", 1784508650)
		methodStaticBody3D[5] = classDB.get_method_bind("StaticBody3D\000", "get_physics_material_override\000", 2521850424)
		methodStreamPeer[0] = classDB.get_method_bind("StreamPeer\000", "put_data\000", 680677267)
		methodStreamPeer[1] = classDB.get_method_bind("StreamPeer\000", "put_partial_data\000", 2934048347)
		methodStreamPeer[2] = classDB.get_method_bind("StreamPeer\000", "get_data\000", 1171824711)
		methodStreamPeer[3] = classDB.get_method_bind("StreamPeer\000", "get_partial_data\000", 1171824711)
		methodStreamPeer[4] = classDB.get_method_bind("StreamPeer\000", "get_available_bytes\000", 3905245786)
		methodStreamPeer[5] = classDB.get_method_bind("StreamPeer\000", "set_big_endian\000", 2586408642)
		methodStreamPeer[6] = classDB.get_method_bind("StreamPeer\000", "is_big_endian_enabled\000", 36873697)
		methodStreamPeer[7] = classDB.get_method_bind("StreamPeer\000", "put_8\000", 1286410249)
		methodStreamPeer[8] = classDB.get_method_bind("StreamPeer\000", "put_u8\000", 1286410249)
		methodStreamPeer[9] = classDB.get_method_bind("StreamPeer\000", "put_16\000", 1286410249)
		methodStreamPeer[10] = classDB.get_method_bind("StreamPeer\000", "put_u16\000", 1286410249)
		methodStreamPeer[11] = classDB.get_method_bind("StreamPeer\000", "put_32\000", 1286410249)
		methodStreamPeer[12] = classDB.get_method_bind("StreamPeer\000", "put_u32\000", 1286410249)
		methodStreamPeer[13] = classDB.get_method_bind("StreamPeer\000", "put_64\000", 1286410249)
		methodStreamPeer[14] = classDB.get_method_bind("StreamPeer\000", "put_u64\000", 1286410249)
		methodStreamPeer[15] = classDB.get_method_bind("StreamPeer\000", "put_float\000", 373806689)
		methodStreamPeer[16] = classDB.get_method_bind("StreamPeer\000", "put_double\000", 373806689)
		methodStreamPeer[17] = classDB.get_method_bind("StreamPeer\000", "put_string\000", 83702148)
		methodStreamPeer[18] = classDB.get_method_bind("StreamPeer\000", "put_utf8_string\000", 83702148)
		methodStreamPeer[19] = classDB.get_method_bind("StreamPeer\000", "put_var\000", 738511890)
		methodStreamPeer[20] = classDB.get_method_bind("StreamPeer\000", "get_8\000", 2455072627)
		methodStreamPeer[21] = classDB.get_method_bind("StreamPeer\000", "get_u8\000", 2455072627)
		methodStreamPeer[22] = classDB.get_method_bind("StreamPeer\000", "get_16\000", 2455072627)
		methodStreamPeer[23] = classDB.get_method_bind("StreamPeer\000", "get_u16\000", 2455072627)
		methodStreamPeer[24] = classDB.get_method_bind("StreamPeer\000", "get_32\000", 2455072627)
		methodStreamPeer[25] = classDB.get_method_bind("StreamPeer\000", "get_u32\000", 2455072627)
		methodStreamPeer[26] = classDB.get_method_bind("StreamPeer\000", "get_64\000", 2455072627)
		methodStreamPeer[27] = classDB.get_method_bind("StreamPeer\000", "get_u64\000", 2455072627)
		methodStreamPeer[28] = classDB.get_method_bind("StreamPeer\000", "get_float\000", 191475506)
		methodStreamPeer[29] = classDB.get_method_bind("StreamPeer\000", "get_double\000", 191475506)
		methodStreamPeer[30] = classDB.get_method_bind("StreamPeer\000", "get_string\000", 2309358862)
		methodStreamPeer[31] = classDB.get_method_bind("StreamPeer\000", "get_utf8_string\000", 2309358862)
		methodStreamPeer[32] = classDB.get_method_bind("StreamPeer\000", "get_var\000", 3442865206)
		methodStreamPeerBuffer[0] = classDB.get_method_bind("StreamPeerBuffer\000", "seek\000", 1286410249)
		methodStreamPeerBuffer[1] = classDB.get_method_bind("StreamPeerBuffer\000", "get_size\000", 3905245786)
		methodStreamPeerBuffer[2] = classDB.get_method_bind("StreamPeerBuffer\000", "get_position\000", 3905245786)
		methodStreamPeerBuffer[3] = classDB.get_method_bind("StreamPeerBuffer\000", "resize\000", 1286410249)
		methodStreamPeerBuffer[4] = classDB.get_method_bind("StreamPeerBuffer\000", "set_data_array\000", 2971499966)
		methodStreamPeerBuffer[5] = classDB.get_method_bind("StreamPeerBuffer\000", "get_data_array\000", 2362200018)
		methodStreamPeerBuffer[6] = classDB.get_method_bind("StreamPeerBuffer\000", "clear\000", 3218959716)
		methodStreamPeerBuffer[7] = classDB.get_method_bind("StreamPeerBuffer\000", "duplicate\000", 2474064677)
		methodStreamPeerSSL[0] = classDB.get_method_bind("StreamPeerSSL\000", "poll\000", 3218959716)
		methodStreamPeerSSL[1] = classDB.get_method_bind("StreamPeerSSL\000", "accept_stream\000", 2359858912)
		methodStreamPeerSSL[2] = classDB.get_method_bind("StreamPeerSSL\000", "connect_to_stream\000", 127827767)
		methodStreamPeerSSL[3] = classDB.get_method_bind("StreamPeerSSL\000", "get_status\000", 524219300)
		methodStreamPeerSSL[4] = classDB.get_method_bind("StreamPeerSSL\000", "get_stream\000", 2741655269)
		methodStreamPeerSSL[5] = classDB.get_method_bind("StreamPeerSSL\000", "disconnect_from_stream\000", 3218959716)
		methodStreamPeerSSL[6] = classDB.get_method_bind("StreamPeerSSL\000", "set_blocking_handshake_enabled\000", 2586408642)
		methodStreamPeerSSL[7] = classDB.get_method_bind("StreamPeerSSL\000", "is_blocking_handshake_enabled\000", 36873697)
		methodStreamPeerTCP[0] = classDB.get_method_bind("StreamPeerTCP\000", "bind\000", 4025329869)
		methodStreamPeerTCP[1] = classDB.get_method_bind("StreamPeerTCP\000", "connect_to_host\000", 993915709)
		methodStreamPeerTCP[2] = classDB.get_method_bind("StreamPeerTCP\000", "poll\000", 166280745)
		methodStreamPeerTCP[3] = classDB.get_method_bind("StreamPeerTCP\000", "get_status\000", 859471121)
		methodStreamPeerTCP[4] = classDB.get_method_bind("StreamPeerTCP\000", "get_connected_host\000", 201670096)
		methodStreamPeerTCP[5] = classDB.get_method_bind("StreamPeerTCP\000", "get_connected_port\000", 3905245786)
		methodStreamPeerTCP[6] = classDB.get_method_bind("StreamPeerTCP\000", "get_local_port\000", 3905245786)
		methodStreamPeerTCP[7] = classDB.get_method_bind("StreamPeerTCP\000", "disconnect_from_host\000", 3218959716)
		methodStreamPeerTCP[8] = classDB.get_method_bind("StreamPeerTCP\000", "set_no_delay\000", 2586408642)
		methodStyleBox[0] = classDB.get_method_bind("StyleBox\000", "test_mask\000", 3735564539)
		methodStyleBox[1] = classDB.get_method_bind("StyleBox\000", "set_default_margin\000", 4290182280)
		methodStyleBox[2] = classDB.get_method_bind("StyleBox\000", "get_default_margin\000", 2869120046)
		methodStyleBox[3] = classDB.get_method_bind("StyleBox\000", "get_margin\000", 2869120046)
		methodStyleBox[4] = classDB.get_method_bind("StyleBox\000", "get_minimum_size\000", 3341600327)
		methodStyleBox[5] = classDB.get_method_bind("StyleBox\000", "get_center_size\000", 3341600327)
		methodStyleBox[6] = classDB.get_method_bind("StyleBox\000", "get_offset\000", 3341600327)
		methodStyleBox[7] = classDB.get_method_bind("StyleBox\000", "get_current_item_drawn\000", 3213695180)
		methodStyleBox[8] = classDB.get_method_bind("StyleBox\000", "draw\000", 2275962004)
		methodStyleBoxFlat[0] = classDB.get_method_bind("StyleBoxFlat\000", "set_bg_color\000", 2920490490)
		methodStyleBoxFlat[1] = classDB.get_method_bind("StyleBoxFlat\000", "get_bg_color\000", 3444240500)
		methodStyleBoxFlat[2] = classDB.get_method_bind("StyleBoxFlat\000", "set_border_color\000", 2920490490)
		methodStyleBoxFlat[3] = classDB.get_method_bind("StyleBoxFlat\000", "get_border_color\000", 3444240500)
		methodStyleBoxFlat[4] = classDB.get_method_bind("StyleBoxFlat\000", "set_border_width_all\000", 1286410249)
		methodStyleBoxFlat[5] = classDB.get_method_bind("StyleBoxFlat\000", "get_border_width_min\000", 3905245786)
		methodStyleBoxFlat[6] = classDB.get_method_bind("StyleBoxFlat\000", "set_border_width\000", 437707142)
		methodStyleBoxFlat[7] = classDB.get_method_bind("StyleBoxFlat\000", "get_border_width\000", 1983885014)
		methodStyleBoxFlat[8] = classDB.get_method_bind("StyleBoxFlat\000", "set_border_blend\000", 2586408642)
		methodStyleBoxFlat[9] = classDB.get_method_bind("StyleBoxFlat\000", "get_border_blend\000", 36873697)
		methodStyleBoxFlat[10] = classDB.get_method_bind("StyleBoxFlat\000", "set_corner_radius_individual\000", 4275841770)
		methodStyleBoxFlat[11] = classDB.get_method_bind("StyleBoxFlat\000", "set_corner_radius_all\000", 1286410249)
		methodStyleBoxFlat[12] = classDB.get_method_bind("StyleBoxFlat\000", "set_corner_radius\000", 2696158768)
		methodStyleBoxFlat[13] = classDB.get_method_bind("StyleBoxFlat\000", "get_corner_radius\000", 3982397690)
		methodStyleBoxFlat[14] = classDB.get_method_bind("StyleBoxFlat\000", "set_expand_margin\000", 4290182280)
		methodStyleBoxFlat[15] = classDB.get_method_bind("StyleBoxFlat\000", "set_expand_margin_all\000", 373806689)
		methodStyleBoxFlat[16] = classDB.get_method_bind("StyleBoxFlat\000", "set_expand_margin_individual\000", 3948312143)
		methodStyleBoxFlat[17] = classDB.get_method_bind("StyleBoxFlat\000", "get_expand_margin\000", 2869120046)
		methodStyleBoxFlat[18] = classDB.get_method_bind("StyleBoxFlat\000", "set_draw_center\000", 2586408642)
		methodStyleBoxFlat[19] = classDB.get_method_bind("StyleBoxFlat\000", "is_draw_center_enabled\000", 36873697)
		methodStyleBoxFlat[20] = classDB.get_method_bind("StyleBoxFlat\000", "set_skew\000", 743155724)
		methodStyleBoxFlat[21] = classDB.get_method_bind("StyleBoxFlat\000", "get_skew\000", 3341600327)
		methodStyleBoxFlat[22] = classDB.get_method_bind("StyleBoxFlat\000", "set_shadow_color\000", 2920490490)
		methodStyleBoxFlat[23] = classDB.get_method_bind("StyleBoxFlat\000", "get_shadow_color\000", 3444240500)
		methodStyleBoxFlat[24] = classDB.get_method_bind("StyleBoxFlat\000", "set_shadow_size\000", 1286410249)
		methodStyleBoxFlat[25] = classDB.get_method_bind("StyleBoxFlat\000", "get_shadow_size\000", 3905245786)
		methodStyleBoxFlat[26] = classDB.get_method_bind("StyleBoxFlat\000", "set_shadow_offset\000", 743155724)
		methodStyleBoxFlat[27] = classDB.get_method_bind("StyleBoxFlat\000", "get_shadow_offset\000", 3341600327)
		methodStyleBoxFlat[28] = classDB.get_method_bind("StyleBoxFlat\000", "set_anti_aliased\000", 2586408642)
		methodStyleBoxFlat[29] = classDB.get_method_bind("StyleBoxFlat\000", "is_anti_aliased\000", 36873697)
		methodStyleBoxFlat[30] = classDB.get_method_bind("StyleBoxFlat\000", "set_aa_size\000", 373806689)
		methodStyleBoxFlat[31] = classDB.get_method_bind("StyleBoxFlat\000", "get_aa_size\000", 1740695150)
		methodStyleBoxFlat[32] = classDB.get_method_bind("StyleBoxFlat\000", "set_corner_detail\000", 1286410249)
		methodStyleBoxFlat[33] = classDB.get_method_bind("StyleBoxFlat\000", "get_corner_detail\000", 3905245786)
		methodStyleBoxLine[0] = classDB.get_method_bind("StyleBoxLine\000", "set_color\000", 2920490490)
		methodStyleBoxLine[1] = classDB.get_method_bind("StyleBoxLine\000", "get_color\000", 3444240500)
		methodStyleBoxLine[2] = classDB.get_method_bind("StyleBoxLine\000", "set_thickness\000", 1286410249)
		methodStyleBoxLine[3] = classDB.get_method_bind("StyleBoxLine\000", "get_thickness\000", 3905245786)
		methodStyleBoxLine[4] = classDB.get_method_bind("StyleBoxLine\000", "set_grow_begin\000", 373806689)
		methodStyleBoxLine[5] = classDB.get_method_bind("StyleBoxLine\000", "get_grow_begin\000", 1740695150)
		methodStyleBoxLine[6] = classDB.get_method_bind("StyleBoxLine\000", "set_grow_end\000", 373806689)
		methodStyleBoxLine[7] = classDB.get_method_bind("StyleBoxLine\000", "get_grow_end\000", 1740695150)
		methodStyleBoxLine[8] = classDB.get_method_bind("StyleBoxLine\000", "set_vertical\000", 2586408642)
		methodStyleBoxLine[9] = classDB.get_method_bind("StyleBoxLine\000", "is_vertical\000", 36873697)
		methodStyleBoxTexture[0] = classDB.get_method_bind("StyleBoxTexture\000", "set_texture\000", 4051416890)
		methodStyleBoxTexture[1] = classDB.get_method_bind("StyleBoxTexture\000", "get_texture\000", 3635182373)
		methodStyleBoxTexture[2] = classDB.get_method_bind("StyleBoxTexture\000", "set_margin_size\000", 4290182280)
		methodStyleBoxTexture[3] = classDB.get_method_bind("StyleBoxTexture\000", "get_margin_size\000", 2869120046)
		methodStyleBoxTexture[4] = classDB.get_method_bind("StyleBoxTexture\000", "set_expand_margin_size\000", 4290182280)
		methodStyleBoxTexture[5] = classDB.get_method_bind("StyleBoxTexture\000", "set_expand_margin_all\000", 373806689)
		methodStyleBoxTexture[6] = classDB.get_method_bind("StyleBoxTexture\000", "set_expand_margin_individual\000", 3948312143)
		methodStyleBoxTexture[7] = classDB.get_method_bind("StyleBoxTexture\000", "get_expand_margin_size\000", 2869120046)
		methodStyleBoxTexture[8] = classDB.get_method_bind("StyleBoxTexture\000", "set_region_rect\000", 2046264180)
		methodStyleBoxTexture[9] = classDB.get_method_bind("StyleBoxTexture\000", "get_region_rect\000", 1639390495)
		methodStyleBoxTexture[10] = classDB.get_method_bind("StyleBoxTexture\000", "set_draw_center\000", 2586408642)
		methodStyleBoxTexture[11] = classDB.get_method_bind("StyleBoxTexture\000", "is_draw_center_enabled\000", 36873697)
		methodStyleBoxTexture[12] = classDB.get_method_bind("StyleBoxTexture\000", "set_modulate\000", 2920490490)
		methodStyleBoxTexture[13] = classDB.get_method_bind("StyleBoxTexture\000", "get_modulate\000", 3444240500)
		methodStyleBoxTexture[14] = classDB.get_method_bind("StyleBoxTexture\000", "set_h_axis_stretch_mode\000", 2965538783)
		methodStyleBoxTexture[15] = classDB.get_method_bind("StyleBoxTexture\000", "get_h_axis_stretch_mode\000", 3807744063)
		methodStyleBoxTexture[16] = classDB.get_method_bind("StyleBoxTexture\000", "set_v_axis_stretch_mode\000", 2965538783)
		methodStyleBoxTexture[17] = classDB.get_method_bind("StyleBoxTexture\000", "get_v_axis_stretch_mode\000", 3807744063)
		methodSubViewport[0] = classDB.get_method_bind("SubViewport\000", "set_size\000", 1130785943)
		methodSubViewport[1] = classDB.get_method_bind("SubViewport\000", "get_size\000", 3690982128)
		methodSubViewport[2] = classDB.get_method_bind("SubViewport\000", "set_size_2d_override\000", 1130785943)
		methodSubViewport[3] = classDB.get_method_bind("SubViewport\000", "get_size_2d_override\000", 3690982128)
		methodSubViewport[4] = classDB.get_method_bind("SubViewport\000", "set_size_2d_override_stretch\000", 2586408642)
		methodSubViewport[5] = classDB.get_method_bind("SubViewport\000", "is_size_2d_override_stretch_enabled\000", 36873697)
		methodSubViewport[6] = classDB.get_method_bind("SubViewport\000", "set_update_mode\000", 1295690030)
		methodSubViewport[7] = classDB.get_method_bind("SubViewport\000", "get_update_mode\000", 2980171553)
		methodSubViewport[8] = classDB.get_method_bind("SubViewport\000", "set_clear_mode\000", 2834454712)
		methodSubViewport[9] = classDB.get_method_bind("SubViewport\000", "get_clear_mode\000", 331324495)
		methodSubViewportContainer[0] = classDB.get_method_bind("SubViewportContainer\000", "set_stretch\000", 2586408642)
		methodSubViewportContainer[1] = classDB.get_method_bind("SubViewportContainer\000", "is_stretch_enabled\000", 36873697)
		methodSubViewportContainer[2] = classDB.get_method_bind("SubViewportContainer\000", "set_stretch_shrink\000", 1286410249)
		methodSubViewportContainer[3] = classDB.get_method_bind("SubViewportContainer\000", "get_stretch_shrink\000", 3905245786)
		methodSurfaceTool[0] = classDB.get_method_bind("SurfaceTool\000", "set_skin_weight_count\000", 618679515)
		methodSurfaceTool[1] = classDB.get_method_bind("SurfaceTool\000", "get_skin_weight_count\000", 1072401130)
		methodSurfaceTool[2] = classDB.get_method_bind("SurfaceTool\000", "set_custom_format\000", 4087759856)
		methodSurfaceTool[3] = classDB.get_method_bind("SurfaceTool\000", "get_custom_format\000", 839863283)
		methodSurfaceTool[4] = classDB.get_method_bind("SurfaceTool\000", "begin\000", 2230304113)
		methodSurfaceTool[5] = classDB.get_method_bind("SurfaceTool\000", "add_vertex\000", 3460891852)
		methodSurfaceTool[6] = classDB.get_method_bind("SurfaceTool\000", "set_color\000", 2920490490)
		methodSurfaceTool[7] = classDB.get_method_bind("SurfaceTool\000", "set_normal\000", 3460891852)
		methodSurfaceTool[8] = classDB.get_method_bind("SurfaceTool\000", "set_tangent\000", 3505987427)
		methodSurfaceTool[9] = classDB.get_method_bind("SurfaceTool\000", "set_uv\000", 743155724)
		methodSurfaceTool[10] = classDB.get_method_bind("SurfaceTool\000", "set_uv2\000", 743155724)
		methodSurfaceTool[11] = classDB.get_method_bind("SurfaceTool\000", "set_bones\000", 3614634198)
		methodSurfaceTool[12] = classDB.get_method_bind("SurfaceTool\000", "set_weights\000", 2899603908)
		methodSurfaceTool[13] = classDB.get_method_bind("SurfaceTool\000", "set_custom\000", 2878471219)
		methodSurfaceTool[14] = classDB.get_method_bind("SurfaceTool\000", "set_smooth_group\000", 1286410249)
		methodSurfaceTool[15] = classDB.get_method_bind("SurfaceTool\000", "add_triangle_fan\000", 297960074)
		methodSurfaceTool[16] = classDB.get_method_bind("SurfaceTool\000", "add_index\000", 1286410249)
		methodSurfaceTool[17] = classDB.get_method_bind("SurfaceTool\000", "index\000", 3218959716)
		methodSurfaceTool[18] = classDB.get_method_bind("SurfaceTool\000", "deindex\000", 3218959716)
		methodSurfaceTool[19] = classDB.get_method_bind("SurfaceTool\000", "generate_normals\000", 107499316)
		methodSurfaceTool[20] = classDB.get_method_bind("SurfaceTool\000", "generate_tangents\000", 3218959716)
		methodSurfaceTool[21] = classDB.get_method_bind("SurfaceTool\000", "optimize_indices_for_cache\000", 3218959716)
		methodSurfaceTool[22] = classDB.get_method_bind("SurfaceTool\000", "get_aabb\000", 1068685055)
		methodSurfaceTool[23] = classDB.get_method_bind("SurfaceTool\000", "generate_lod\000", 1894448909)
		methodSurfaceTool[24] = classDB.get_method_bind("SurfaceTool\000", "set_material\000", 2757459619)
		methodSurfaceTool[25] = classDB.get_method_bind("SurfaceTool\000", "get_primitive_type\000", 768822145)
		methodSurfaceTool[26] = classDB.get_method_bind("SurfaceTool\000", "clear\000", 3218959716)
		methodSurfaceTool[27] = classDB.get_method_bind("SurfaceTool\000", "create_from\000", 1767024570)
		methodSurfaceTool[28] = classDB.get_method_bind("SurfaceTool\000", "create_from_blend_shape\000", 1306185582)
		methodSurfaceTool[29] = classDB.get_method_bind("SurfaceTool\000", "append_from\000", 2217967155)
		methodSurfaceTool[30] = classDB.get_method_bind("SurfaceTool\000", "commit\000", 4107864055)
		methodSurfaceTool[31] = classDB.get_method_bind("SurfaceTool\000", "commit_to_arrays\000", 2915620761)
		methodSyntaxHighlighter[0] = classDB.get_method_bind("SyntaxHighlighter\000", "get_line_syntax_highlighting\000", 3554694381)
		methodSyntaxHighlighter[1] = classDB.get_method_bind("SyntaxHighlighter\000", "update_cache\000", 3218959716)
		methodSyntaxHighlighter[2] = classDB.get_method_bind("SyntaxHighlighter\000", "clear_highlighting_cache\000", 3218959716)
		methodSyntaxHighlighter[3] = classDB.get_method_bind("SyntaxHighlighter\000", "get_text_edit\000", 2185802765)
		methodSystemFont[0] = classDB.get_method_bind("SystemFont\000", "set_antialiasing\000", 1669900)
		methodSystemFont[1] = classDB.get_method_bind("SystemFont\000", "get_antialiasing\000", 4262718649)
		methodSystemFont[2] = classDB.get_method_bind("SystemFont\000", "set_generate_mipmaps\000", 2586408642)
		methodSystemFont[3] = classDB.get_method_bind("SystemFont\000", "get_generate_mipmaps\000", 36873697)
		methodSystemFont[4] = classDB.get_method_bind("SystemFont\000", "set_force_autohinter\000", 2586408642)
		methodSystemFont[5] = classDB.get_method_bind("SystemFont\000", "is_force_autohinter\000", 36873697)
		methodSystemFont[6] = classDB.get_method_bind("SystemFont\000", "set_hinting\000", 1827459492)
		methodSystemFont[7] = classDB.get_method_bind("SystemFont\000", "get_hinting\000", 3683214614)
		methodSystemFont[8] = classDB.get_method_bind("SystemFont\000", "set_subpixel_positioning\000", 4225742182)
		methodSystemFont[9] = classDB.get_method_bind("SystemFont\000", "get_subpixel_positioning\000", 1069238588)
		methodSystemFont[10] = classDB.get_method_bind("SystemFont\000", "set_multichannel_signed_distance_field\000", 2586408642)
		methodSystemFont[11] = classDB.get_method_bind("SystemFont\000", "is_multichannel_signed_distance_field\000", 36873697)
		methodSystemFont[12] = classDB.get_method_bind("SystemFont\000", "set_oversampling\000", 373806689)
		methodSystemFont[13] = classDB.get_method_bind("SystemFont\000", "get_oversampling\000", 1740695150)
		methodSystemFont[14] = classDB.get_method_bind("SystemFont\000", "get_font_names\000", 1139954409)
		methodSystemFont[15] = classDB.get_method_bind("SystemFont\000", "set_font_names\000", 4015028928)
		methodSystemFont[16] = classDB.get_method_bind("SystemFont\000", "set_font_style\000", 918070724)
		methodTCPServer[0] = classDB.get_method_bind("TCPServer\000", "listen\000", 4025329869)
		methodTCPServer[1] = classDB.get_method_bind("TCPServer\000", "is_connection_available\000", 36873697)
		methodTCPServer[2] = classDB.get_method_bind("TCPServer\000", "is_listening\000", 36873697)
		methodTCPServer[3] = classDB.get_method_bind("TCPServer\000", "get_local_port\000", 3905245786)
		methodTCPServer[4] = classDB.get_method_bind("TCPServer\000", "take_connection\000", 30545006)
		methodTCPServer[5] = classDB.get_method_bind("TCPServer\000", "stop\000", 3218959716)
		methodTabBar[0] = classDB.get_method_bind("TabBar\000", "set_tab_count\000", 1286410249)
		methodTabBar[1] = classDB.get_method_bind("TabBar\000", "get_tab_count\000", 3905245786)
		methodTabBar[2] = classDB.get_method_bind("TabBar\000", "set_current_tab\000", 1286410249)
		methodTabBar[3] = classDB.get_method_bind("TabBar\000", "get_current_tab\000", 3905245786)
		methodTabBar[4] = classDB.get_method_bind("TabBar\000", "get_previous_tab\000", 3905245786)
		methodTabBar[5] = classDB.get_method_bind("TabBar\000", "set_tab_title\000", 501894301)
		methodTabBar[6] = classDB.get_method_bind("TabBar\000", "get_tab_title\000", 844755477)
		methodTabBar[7] = classDB.get_method_bind("TabBar\000", "set_tab_text_direction\000", 1707680378)
		methodTabBar[8] = classDB.get_method_bind("TabBar\000", "get_tab_text_direction\000", 4235602388)
		methodTabBar[9] = classDB.get_method_bind("TabBar\000", "set_tab_language\000", 501894301)
		methodTabBar[10] = classDB.get_method_bind("TabBar\000", "get_tab_language\000", 844755477)
		methodTabBar[11] = classDB.get_method_bind("TabBar\000", "set_tab_icon\000", 666127730)
		methodTabBar[12] = classDB.get_method_bind("TabBar\000", "get_tab_icon\000", 3536238170)
		methodTabBar[13] = classDB.get_method_bind("TabBar\000", "set_tab_button_icon\000", 666127730)
		methodTabBar[14] = classDB.get_method_bind("TabBar\000", "get_tab_button_icon\000", 3536238170)
		methodTabBar[15] = classDB.get_method_bind("TabBar\000", "set_tab_disabled\000", 300928843)
		methodTabBar[16] = classDB.get_method_bind("TabBar\000", "is_tab_disabled\000", 1116898809)
		methodTabBar[17] = classDB.get_method_bind("TabBar\000", "set_tab_hidden\000", 300928843)
		methodTabBar[18] = classDB.get_method_bind("TabBar\000", "is_tab_hidden\000", 1116898809)
		methodTabBar[19] = classDB.get_method_bind("TabBar\000", "remove_tab\000", 1286410249)
		methodTabBar[20] = classDB.get_method_bind("TabBar\000", "add_tab\000", 1465444425)
		methodTabBar[21] = classDB.get_method_bind("TabBar\000", "get_tab_idx_at_point\000", 3820158470)
		methodTabBar[22] = classDB.get_method_bind("TabBar\000", "set_tab_alignment\000", 2413632353)
		methodTabBar[23] = classDB.get_method_bind("TabBar\000", "get_tab_alignment\000", 2178122193)
		methodTabBar[24] = classDB.get_method_bind("TabBar\000", "set_clip_tabs\000", 2586408642)
		methodTabBar[25] = classDB.get_method_bind("TabBar\000", "get_clip_tabs\000", 36873697)
		methodTabBar[26] = classDB.get_method_bind("TabBar\000", "get_tab_offset\000", 3905245786)
		methodTabBar[27] = classDB.get_method_bind("TabBar\000", "get_offset_buttons_visible\000", 36873697)
		methodTabBar[28] = classDB.get_method_bind("TabBar\000", "ensure_tab_visible\000", 1286410249)
		methodTabBar[29] = classDB.get_method_bind("TabBar\000", "get_tab_rect\000", 3327874267)
		methodTabBar[30] = classDB.get_method_bind("TabBar\000", "move_tab\000", 3937882851)
		methodTabBar[31] = classDB.get_method_bind("TabBar\000", "set_tab_close_display_policy\000", 2212906737)
		methodTabBar[32] = classDB.get_method_bind("TabBar\000", "get_tab_close_display_policy\000", 2956568028)
		methodTabBar[33] = classDB.get_method_bind("TabBar\000", "set_max_tab_width\000", 1286410249)
		methodTabBar[34] = classDB.get_method_bind("TabBar\000", "get_max_tab_width\000", 3905245786)
		methodTabBar[35] = classDB.get_method_bind("TabBar\000", "set_scrolling_enabled\000", 2586408642)
		methodTabBar[36] = classDB.get_method_bind("TabBar\000", "get_scrolling_enabled\000", 36873697)
		methodTabBar[37] = classDB.get_method_bind("TabBar\000", "set_drag_to_rearrange_enabled\000", 2586408642)
		methodTabBar[38] = classDB.get_method_bind("TabBar\000", "get_drag_to_rearrange_enabled\000", 36873697)
		methodTabBar[39] = classDB.get_method_bind("TabBar\000", "set_tabs_rearrange_group\000", 1286410249)
		methodTabBar[40] = classDB.get_method_bind("TabBar\000", "get_tabs_rearrange_group\000", 3905245786)
		methodTabBar[41] = classDB.get_method_bind("TabBar\000", "set_scroll_to_selected\000", 2586408642)
		methodTabBar[42] = classDB.get_method_bind("TabBar\000", "get_scroll_to_selected\000", 36873697)
		methodTabBar[43] = classDB.get_method_bind("TabBar\000", "set_select_with_rmb\000", 2586408642)
		methodTabBar[44] = classDB.get_method_bind("TabBar\000", "get_select_with_rmb\000", 36873697)
		methodTabContainer[0] = classDB.get_method_bind("TabContainer\000", "get_tab_count\000", 3905245786)
		methodTabContainer[1] = classDB.get_method_bind("TabContainer\000", "set_current_tab\000", 1286410249)
		methodTabContainer[2] = classDB.get_method_bind("TabContainer\000", "get_current_tab\000", 3905245786)
		methodTabContainer[3] = classDB.get_method_bind("TabContainer\000", "get_previous_tab\000", 3905245786)
		methodTabContainer[4] = classDB.get_method_bind("TabContainer\000", "get_current_tab_control\000", 2783021301)
		methodTabContainer[5] = classDB.get_method_bind("TabContainer\000", "get_tab_control\000", 1065994134)
		methodTabContainer[6] = classDB.get_method_bind("TabContainer\000", "set_tab_alignment\000", 2413632353)
		methodTabContainer[7] = classDB.get_method_bind("TabContainer\000", "get_tab_alignment\000", 2178122193)
		methodTabContainer[8] = classDB.get_method_bind("TabContainer\000", "set_clip_tabs\000", 2586408642)
		methodTabContainer[9] = classDB.get_method_bind("TabContainer\000", "get_clip_tabs\000", 36873697)
		methodTabContainer[10] = classDB.get_method_bind("TabContainer\000", "set_tabs_visible\000", 2586408642)
		methodTabContainer[11] = classDB.get_method_bind("TabContainer\000", "are_tabs_visible\000", 36873697)
		methodTabContainer[12] = classDB.get_method_bind("TabContainer\000", "set_all_tabs_in_front\000", 2586408642)
		methodTabContainer[13] = classDB.get_method_bind("TabContainer\000", "is_all_tabs_in_front\000", 36873697)
		methodTabContainer[14] = classDB.get_method_bind("TabContainer\000", "set_tab_title\000", 501894301)
		methodTabContainer[15] = classDB.get_method_bind("TabContainer\000", "get_tab_title\000", 844755477)
		methodTabContainer[16] = classDB.get_method_bind("TabContainer\000", "set_tab_icon\000", 666127730)
		methodTabContainer[17] = classDB.get_method_bind("TabContainer\000", "get_tab_icon\000", 3536238170)
		methodTabContainer[18] = classDB.get_method_bind("TabContainer\000", "set_tab_disabled\000", 300928843)
		methodTabContainer[19] = classDB.get_method_bind("TabContainer\000", "is_tab_disabled\000", 1116898809)
		methodTabContainer[20] = classDB.get_method_bind("TabContainer\000", "set_tab_hidden\000", 300928843)
		methodTabContainer[21] = classDB.get_method_bind("TabContainer\000", "is_tab_hidden\000", 1116898809)
		methodTabContainer[22] = classDB.get_method_bind("TabContainer\000", "set_tab_button_icon\000", 666127730)
		methodTabContainer[23] = classDB.get_method_bind("TabContainer\000", "get_tab_button_icon\000", 3536238170)
		methodTabContainer[24] = classDB.get_method_bind("TabContainer\000", "get_tab_idx_at_point\000", 3820158470)
		methodTabContainer[25] = classDB.get_method_bind("TabContainer\000", "get_tab_idx_from_control\000", 2787397975)
		methodTabContainer[26] = classDB.get_method_bind("TabContainer\000", "set_popup\000", 1078189570)
		methodTabContainer[27] = classDB.get_method_bind("TabContainer\000", "get_popup\000", 111095082)
		methodTabContainer[28] = classDB.get_method_bind("TabContainer\000", "set_drag_to_rearrange_enabled\000", 2586408642)
		methodTabContainer[29] = classDB.get_method_bind("TabContainer\000", "get_drag_to_rearrange_enabled\000", 36873697)
		methodTabContainer[30] = classDB.get_method_bind("TabContainer\000", "set_tabs_rearrange_group\000", 1286410249)
		methodTabContainer[31] = classDB.get_method_bind("TabContainer\000", "get_tabs_rearrange_group\000", 3905245786)
		methodTabContainer[32] = classDB.get_method_bind("TabContainer\000", "set_use_hidden_tabs_for_min_size\000", 2586408642)
		methodTabContainer[33] = classDB.get_method_bind("TabContainer\000", "get_use_hidden_tabs_for_min_size\000", 36873697)
		methodTextEdit[0] = classDB.get_method_bind("TextEdit\000", "has_ime_text\000", 36873697)
		methodTextEdit[1] = classDB.get_method_bind("TextEdit\000", "set_editable\000", 2586408642)
		methodTextEdit[2] = classDB.get_method_bind("TextEdit\000", "is_editable\000", 36873697)
		methodTextEdit[3] = classDB.get_method_bind("TextEdit\000", "set_text_direction\000", 119160795)
		methodTextEdit[4] = classDB.get_method_bind("TextEdit\000", "get_text_direction\000", 797257663)
		methodTextEdit[5] = classDB.get_method_bind("TextEdit\000", "set_language\000", 83702148)
		methodTextEdit[6] = classDB.get_method_bind("TextEdit\000", "get_language\000", 201670096)
		methodTextEdit[7] = classDB.get_method_bind("TextEdit\000", "set_structured_text_bidi_override\000", 55961453)
		methodTextEdit[8] = classDB.get_method_bind("TextEdit\000", "get_structured_text_bidi_override\000", 3385126229)
		methodTextEdit[9] = classDB.get_method_bind("TextEdit\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodTextEdit[10] = classDB.get_method_bind("TextEdit\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodTextEdit[11] = classDB.get_method_bind("TextEdit\000", "set_tab_size\000", 1286410249)
		methodTextEdit[12] = classDB.get_method_bind("TextEdit\000", "get_tab_size\000", 3905245786)
		methodTextEdit[13] = classDB.get_method_bind("TextEdit\000", "set_overtype_mode_enabled\000", 2586408642)
		methodTextEdit[14] = classDB.get_method_bind("TextEdit\000", "is_overtype_mode_enabled\000", 36873697)
		methodTextEdit[15] = classDB.get_method_bind("TextEdit\000", "set_context_menu_enabled\000", 2586408642)
		methodTextEdit[16] = classDB.get_method_bind("TextEdit\000", "is_context_menu_enabled\000", 36873697)
		methodTextEdit[17] = classDB.get_method_bind("TextEdit\000", "set_shortcut_keys_enabled\000", 2586408642)
		methodTextEdit[18] = classDB.get_method_bind("TextEdit\000", "is_shortcut_keys_enabled\000", 36873697)
		methodTextEdit[19] = classDB.get_method_bind("TextEdit\000", "set_virtual_keyboard_enabled\000", 2586408642)
		methodTextEdit[20] = classDB.get_method_bind("TextEdit\000", "is_virtual_keyboard_enabled\000", 36873697)
		methodTextEdit[21] = classDB.get_method_bind("TextEdit\000", "set_middle_mouse_paste_enabled\000", 2586408642)
		methodTextEdit[22] = classDB.get_method_bind("TextEdit\000", "is_middle_mouse_paste_enabled\000", 36873697)
		methodTextEdit[23] = classDB.get_method_bind("TextEdit\000", "clear\000", 3218959716)
		methodTextEdit[24] = classDB.get_method_bind("TextEdit\000", "set_text\000", 83702148)
		methodTextEdit[25] = classDB.get_method_bind("TextEdit\000", "get_text\000", 201670096)
		methodTextEdit[26] = classDB.get_method_bind("TextEdit\000", "get_line_count\000", 3905245786)
		methodTextEdit[27] = classDB.get_method_bind("TextEdit\000", "set_placeholder\000", 83702148)
		methodTextEdit[28] = classDB.get_method_bind("TextEdit\000", "get_placeholder\000", 201670096)
		methodTextEdit[29] = classDB.get_method_bind("TextEdit\000", "set_line\000", 501894301)
		methodTextEdit[30] = classDB.get_method_bind("TextEdit\000", "get_line\000", 844755477)
		methodTextEdit[31] = classDB.get_method_bind("TextEdit\000", "get_line_width\000", 3294126239)
		methodTextEdit[32] = classDB.get_method_bind("TextEdit\000", "get_line_height\000", 3905245786)
		methodTextEdit[33] = classDB.get_method_bind("TextEdit\000", "get_indent_level\000", 923996154)
		methodTextEdit[34] = classDB.get_method_bind("TextEdit\000", "get_first_non_whitespace_column\000", 923996154)
		methodTextEdit[35] = classDB.get_method_bind("TextEdit\000", "swap_lines\000", 3937882851)
		methodTextEdit[36] = classDB.get_method_bind("TextEdit\000", "insert_line_at\000", 501894301)
		methodTextEdit[37] = classDB.get_method_bind("TextEdit\000", "insert_text_at_caret\000", 83702148)
		methodTextEdit[38] = classDB.get_method_bind("TextEdit\000", "remove_text\000", 4275841770)
		methodTextEdit[39] = classDB.get_method_bind("TextEdit\000", "get_last_unhidden_line\000", 3905245786)
		methodTextEdit[40] = classDB.get_method_bind("TextEdit\000", "get_next_visible_line_offset_from\000", 3175239445)
		methodTextEdit[41] = classDB.get_method_bind("TextEdit\000", "get_next_visible_line_index_offset_from\000", 3386475622)
		methodTextEdit[42] = classDB.get_method_bind("TextEdit\000", "backspace\000", 3218959716)
		methodTextEdit[43] = classDB.get_method_bind("TextEdit\000", "cut\000", 3218959716)
		methodTextEdit[44] = classDB.get_method_bind("TextEdit\000", "copy\000", 3218959716)
		methodTextEdit[45] = classDB.get_method_bind("TextEdit\000", "paste\000", 3218959716)
		methodTextEdit[46] = classDB.get_method_bind("TextEdit\000", "begin_complex_operation\000", 3218959716)
		methodTextEdit[47] = classDB.get_method_bind("TextEdit\000", "end_complex_operation\000", 3218959716)
		methodTextEdit[48] = classDB.get_method_bind("TextEdit\000", "has_undo\000", 36873697)
		methodTextEdit[49] = classDB.get_method_bind("TextEdit\000", "has_redo\000", 36873697)
		methodTextEdit[50] = classDB.get_method_bind("TextEdit\000", "undo\000", 3218959716)
		methodTextEdit[51] = classDB.get_method_bind("TextEdit\000", "redo\000", 3218959716)
		methodTextEdit[52] = classDB.get_method_bind("TextEdit\000", "clear_undo_history\000", 3218959716)
		methodTextEdit[53] = classDB.get_method_bind("TextEdit\000", "tag_saved_version\000", 3218959716)
		methodTextEdit[54] = classDB.get_method_bind("TextEdit\000", "get_version\000", 3905245786)
		methodTextEdit[55] = classDB.get_method_bind("TextEdit\000", "get_saved_version\000", 3905245786)
		methodTextEdit[56] = classDB.get_method_bind("TextEdit\000", "set_search_text\000", 83702148)
		methodTextEdit[57] = classDB.get_method_bind("TextEdit\000", "set_search_flags\000", 1286410249)
		methodTextEdit[58] = classDB.get_method_bind("TextEdit\000", "search\000", 1203739136)
		methodTextEdit[59] = classDB.get_method_bind("TextEdit\000", "set_tooltip_request_func\000", 1611583062)
		methodTextEdit[60] = classDB.get_method_bind("TextEdit\000", "get_local_mouse_pos\000", 3341600327)
		methodTextEdit[61] = classDB.get_method_bind("TextEdit\000", "get_word_at_pos\000", 3674420000)
		methodTextEdit[62] = classDB.get_method_bind("TextEdit\000", "get_line_column_at_pos\000", 850652858)
		methodTextEdit[63] = classDB.get_method_bind("TextEdit\000", "get_pos_at_line_column\000", 410388347)
		methodTextEdit[64] = classDB.get_method_bind("TextEdit\000", "get_rect_at_line_column\000", 3256618057)
		methodTextEdit[65] = classDB.get_method_bind("TextEdit\000", "get_minimap_line_at_pos\000", 2485466453)
		methodTextEdit[66] = classDB.get_method_bind("TextEdit\000", "is_dragging_cursor\000", 36873697)
		methodTextEdit[67] = classDB.get_method_bind("TextEdit\000", "is_mouse_over_selection\000", 3135401148)
		methodTextEdit[68] = classDB.get_method_bind("TextEdit\000", "set_caret_type\000", 1211596914)
		methodTextEdit[69] = classDB.get_method_bind("TextEdit\000", "get_caret_type\000", 2830252959)
		methodTextEdit[70] = classDB.get_method_bind("TextEdit\000", "set_caret_blink_enabled\000", 2586408642)
		methodTextEdit[71] = classDB.get_method_bind("TextEdit\000", "is_caret_blink_enabled\000", 36873697)
		methodTextEdit[72] = classDB.get_method_bind("TextEdit\000", "set_caret_blink_speed\000", 373806689)
		methodTextEdit[73] = classDB.get_method_bind("TextEdit\000", "get_caret_blink_speed\000", 1740695150)
		methodTextEdit[74] = classDB.get_method_bind("TextEdit\000", "set_move_caret_on_right_click_enabled\000", 2586408642)
		methodTextEdit[75] = classDB.get_method_bind("TextEdit\000", "is_move_caret_on_right_click_enabled\000", 36873697)
		methodTextEdit[76] = classDB.get_method_bind("TextEdit\000", "set_caret_mid_grapheme_enabled\000", 2586408642)
		methodTextEdit[77] = classDB.get_method_bind("TextEdit\000", "is_caret_mid_grapheme_enabled\000", 36873697)
		methodTextEdit[78] = classDB.get_method_bind("TextEdit\000", "is_caret_visible\000", 36873697)
		methodTextEdit[79] = classDB.get_method_bind("TextEdit\000", "get_caret_draw_pos\000", 3341600327)
		methodTextEdit[80] = classDB.get_method_bind("TextEdit\000", "set_caret_line\000", 3443156988)
		methodTextEdit[81] = classDB.get_method_bind("TextEdit\000", "get_caret_line\000", 3905245786)
		methodTextEdit[82] = classDB.get_method_bind("TextEdit\000", "set_caret_column\000", 4023243586)
		methodTextEdit[83] = classDB.get_method_bind("TextEdit\000", "get_caret_column\000", 3905245786)
		methodTextEdit[84] = classDB.get_method_bind("TextEdit\000", "get_caret_wrap_index\000", 3905245786)
		methodTextEdit[85] = classDB.get_method_bind("TextEdit\000", "get_word_under_caret\000", 201670096)
		methodTextEdit[86] = classDB.get_method_bind("TextEdit\000", "set_selecting_enabled\000", 2586408642)
		methodTextEdit[87] = classDB.get_method_bind("TextEdit\000", "is_selecting_enabled\000", 36873697)
		methodTextEdit[88] = classDB.get_method_bind("TextEdit\000", "set_deselect_on_focus_loss_enabled\000", 2586408642)
		methodTextEdit[89] = classDB.get_method_bind("TextEdit\000", "is_deselect_on_focus_loss_enabled\000", 36873697)
		methodTextEdit[90] = classDB.get_method_bind("TextEdit\000", "set_drag_and_drop_selection_enabled\000", 2586408642)
		methodTextEdit[91] = classDB.get_method_bind("TextEdit\000", "is_drag_and_drop_selection_enabled\000", 36873697)
		methodTextEdit[92] = classDB.get_method_bind("TextEdit\000", "set_override_selected_font_color\000", 2586408642)
		methodTextEdit[93] = classDB.get_method_bind("TextEdit\000", "is_overriding_selected_font_color\000", 36873697)
		methodTextEdit[94] = classDB.get_method_bind("TextEdit\000", "set_selection_mode\000", 2206958594)
		methodTextEdit[95] = classDB.get_method_bind("TextEdit\000", "get_selection_mode\000", 3750106938)
		methodTextEdit[96] = classDB.get_method_bind("TextEdit\000", "select_all\000", 3218959716)
		methodTextEdit[97] = classDB.get_method_bind("TextEdit\000", "select_word_under_caret\000", 3218959716)
		methodTextEdit[98] = classDB.get_method_bind("TextEdit\000", "select\000", 4275841770)
		methodTextEdit[99] = classDB.get_method_bind("TextEdit\000", "has_selection\000", 36873697)
		methodTextEdit[100] = classDB.get_method_bind("TextEdit\000", "get_selected_text\000", 201670096)
		methodTextEdit[101] = classDB.get_method_bind("TextEdit\000", "get_selection_line\000", 3905245786)
		methodTextEdit[102] = classDB.get_method_bind("TextEdit\000", "get_selection_column\000", 3905245786)
		methodTextEdit[103] = classDB.get_method_bind("TextEdit\000", "get_selection_from_line\000", 3905245786)
		methodTextEdit[104] = classDB.get_method_bind("TextEdit\000", "get_selection_from_column\000", 3905245786)
		methodTextEdit[105] = classDB.get_method_bind("TextEdit\000", "get_selection_to_line\000", 3905245786)
		methodTextEdit[106] = classDB.get_method_bind("TextEdit\000", "get_selection_to_column\000", 3905245786)
		methodTextEdit[107] = classDB.get_method_bind("TextEdit\000", "deselect\000", 3218959716)
		methodTextEdit[108] = classDB.get_method_bind("TextEdit\000", "delete_selection\000", 3218959716)
		methodTextEdit[109] = classDB.get_method_bind("TextEdit\000", "set_line_wrapping_mode\000", 2525115309)
		methodTextEdit[110] = classDB.get_method_bind("TextEdit\000", "get_line_wrapping_mode\000", 3562716114)
		methodTextEdit[111] = classDB.get_method_bind("TextEdit\000", "is_line_wrapped\000", 1116898809)
		methodTextEdit[112] = classDB.get_method_bind("TextEdit\000", "get_line_wrap_count\000", 923996154)
		methodTextEdit[113] = classDB.get_method_bind("TextEdit\000", "get_line_wrap_index_at_column\000", 3175239445)
		methodTextEdit[114] = classDB.get_method_bind("TextEdit\000", "get_line_wrapped_text\000", 647634434)
		methodTextEdit[115] = classDB.get_method_bind("TextEdit\000", "set_smooth_scroll_enabled\000", 2586408642)
		methodTextEdit[116] = classDB.get_method_bind("TextEdit\000", "is_smooth_scroll_enabled\000", 36873697)
		methodTextEdit[117] = classDB.get_method_bind("TextEdit\000", "set_v_scroll\000", 373806689)
		methodTextEdit[118] = classDB.get_method_bind("TextEdit\000", "get_v_scroll\000", 1740695150)
		methodTextEdit[119] = classDB.get_method_bind("TextEdit\000", "set_h_scroll\000", 1286410249)
		methodTextEdit[120] = classDB.get_method_bind("TextEdit\000", "get_h_scroll\000", 3905245786)
		methodTextEdit[121] = classDB.get_method_bind("TextEdit\000", "set_scroll_past_end_of_file_enabled\000", 2586408642)
		methodTextEdit[122] = classDB.get_method_bind("TextEdit\000", "is_scroll_past_end_of_file_enabled\000", 36873697)
		methodTextEdit[123] = classDB.get_method_bind("TextEdit\000", "set_v_scroll_speed\000", 373806689)
		methodTextEdit[124] = classDB.get_method_bind("TextEdit\000", "get_v_scroll_speed\000", 1740695150)
		methodTextEdit[125] = classDB.get_method_bind("TextEdit\000", "set_fit_content_height_enabled\000", 2586408642)
		methodTextEdit[126] = classDB.get_method_bind("TextEdit\000", "is_fit_content_height_enabled\000", 36873697)
		methodTextEdit[127] = classDB.get_method_bind("TextEdit\000", "get_scroll_pos_for_line\000", 3274652423)
		methodTextEdit[128] = classDB.get_method_bind("TextEdit\000", "set_line_as_first_visible\000", 3023605688)
		methodTextEdit[129] = classDB.get_method_bind("TextEdit\000", "get_first_visible_line\000", 3905245786)
		methodTextEdit[130] = classDB.get_method_bind("TextEdit\000", "set_line_as_center_visible\000", 3023605688)
		methodTextEdit[131] = classDB.get_method_bind("TextEdit\000", "set_line_as_last_visible\000", 3023605688)
		methodTextEdit[132] = classDB.get_method_bind("TextEdit\000", "get_last_full_visible_line\000", 3905245786)
		methodTextEdit[133] = classDB.get_method_bind("TextEdit\000", "get_last_full_visible_line_wrap_index\000", 3905245786)
		methodTextEdit[134] = classDB.get_method_bind("TextEdit\000", "get_visible_line_count\000", 3905245786)
		methodTextEdit[135] = classDB.get_method_bind("TextEdit\000", "get_visible_line_count_in_range\000", 3175239445)
		methodTextEdit[136] = classDB.get_method_bind("TextEdit\000", "get_total_visible_line_count\000", 3905245786)
		methodTextEdit[137] = classDB.get_method_bind("TextEdit\000", "adjust_viewport_to_caret\000", 3218959716)
		methodTextEdit[138] = classDB.get_method_bind("TextEdit\000", "center_viewport_to_caret\000", 3218959716)
		methodTextEdit[139] = classDB.get_method_bind("TextEdit\000", "set_draw_minimap\000", 2586408642)
		methodTextEdit[140] = classDB.get_method_bind("TextEdit\000", "is_drawing_minimap\000", 36873697)
		methodTextEdit[141] = classDB.get_method_bind("TextEdit\000", "set_minimap_width\000", 1286410249)
		methodTextEdit[142] = classDB.get_method_bind("TextEdit\000", "get_minimap_width\000", 3905245786)
		methodTextEdit[143] = classDB.get_method_bind("TextEdit\000", "get_minimap_visible_lines\000", 3905245786)
		methodTextEdit[144] = classDB.get_method_bind("TextEdit\000", "add_gutter\000", 1025054187)
		methodTextEdit[145] = classDB.get_method_bind("TextEdit\000", "remove_gutter\000", 1286410249)
		methodTextEdit[146] = classDB.get_method_bind("TextEdit\000", "get_gutter_count\000", 3905245786)
		methodTextEdit[147] = classDB.get_method_bind("TextEdit\000", "set_gutter_name\000", 501894301)
		methodTextEdit[148] = classDB.get_method_bind("TextEdit\000", "get_gutter_name\000", 844755477)
		methodTextEdit[149] = classDB.get_method_bind("TextEdit\000", "set_gutter_type\000", 1088959071)
		methodTextEdit[150] = classDB.get_method_bind("TextEdit\000", "get_gutter_type\000", 1159699127)
		methodTextEdit[151] = classDB.get_method_bind("TextEdit\000", "set_gutter_width\000", 3937882851)
		methodTextEdit[152] = classDB.get_method_bind("TextEdit\000", "get_gutter_width\000", 923996154)
		methodTextEdit[153] = classDB.get_method_bind("TextEdit\000", "set_gutter_draw\000", 300928843)
		methodTextEdit[154] = classDB.get_method_bind("TextEdit\000", "is_gutter_drawn\000", 1116898809)
		methodTextEdit[155] = classDB.get_method_bind("TextEdit\000", "set_gutter_clickable\000", 300928843)
		methodTextEdit[156] = classDB.get_method_bind("TextEdit\000", "is_gutter_clickable\000", 1116898809)
		methodTextEdit[157] = classDB.get_method_bind("TextEdit\000", "set_gutter_overwritable\000", 300928843)
		methodTextEdit[158] = classDB.get_method_bind("TextEdit\000", "is_gutter_overwritable\000", 1116898809)
		methodTextEdit[159] = classDB.get_method_bind("TextEdit\000", "merge_gutters\000", 3937882851)
		methodTextEdit[160] = classDB.get_method_bind("TextEdit\000", "set_gutter_custom_draw\000", 957362965)
		methodTextEdit[161] = classDB.get_method_bind("TextEdit\000", "get_total_gutter_width\000", 3905245786)
		methodTextEdit[162] = classDB.get_method_bind("TextEdit\000", "set_line_gutter_metadata\000", 2060538656)
		methodTextEdit[163] = classDB.get_method_bind("TextEdit\000", "get_line_gutter_metadata\000", 678354945)
		methodTextEdit[164] = classDB.get_method_bind("TextEdit\000", "set_line_gutter_text\000", 2285447957)
		methodTextEdit[165] = classDB.get_method_bind("TextEdit\000", "get_line_gutter_text\000", 1391810591)
		methodTextEdit[166] = classDB.get_method_bind("TextEdit\000", "set_line_gutter_icon\000", 176101966)
		methodTextEdit[167] = classDB.get_method_bind("TextEdit\000", "get_line_gutter_icon\000", 2584904275)
		methodTextEdit[168] = classDB.get_method_bind("TextEdit\000", "set_line_gutter_item_color\000", 3733378741)
		methodTextEdit[169] = classDB.get_method_bind("TextEdit\000", "get_line_gutter_item_color\000", 2165839948)
		methodTextEdit[170] = classDB.get_method_bind("TextEdit\000", "set_line_gutter_clickable\000", 1383440665)
		methodTextEdit[171] = classDB.get_method_bind("TextEdit\000", "is_line_gutter_clickable\000", 2522259332)
		methodTextEdit[172] = classDB.get_method_bind("TextEdit\000", "set_line_background_color\000", 2878471219)
		methodTextEdit[173] = classDB.get_method_bind("TextEdit\000", "get_line_background_color\000", 3457211756)
		methodTextEdit[174] = classDB.get_method_bind("TextEdit\000", "set_syntax_highlighter\000", 2765644541)
		methodTextEdit[175] = classDB.get_method_bind("TextEdit\000", "get_syntax_highlighter\000", 2721131626)
		methodTextEdit[176] = classDB.get_method_bind("TextEdit\000", "set_highlight_current_line\000", 2586408642)
		methodTextEdit[177] = classDB.get_method_bind("TextEdit\000", "is_highlight_current_line_enabled\000", 36873697)
		methodTextEdit[178] = classDB.get_method_bind("TextEdit\000", "set_highlight_all_occurrences\000", 2586408642)
		methodTextEdit[179] = classDB.get_method_bind("TextEdit\000", "is_highlight_all_occurrences_enabled\000", 36873697)
		methodTextEdit[180] = classDB.get_method_bind("TextEdit\000", "get_draw_control_chars\000", 36873697)
		methodTextEdit[181] = classDB.get_method_bind("TextEdit\000", "set_draw_control_chars\000", 2586408642)
		methodTextEdit[182] = classDB.get_method_bind("TextEdit\000", "set_draw_tabs\000", 2586408642)
		methodTextEdit[183] = classDB.get_method_bind("TextEdit\000", "is_drawing_tabs\000", 36873697)
		methodTextEdit[184] = classDB.get_method_bind("TextEdit\000", "set_draw_spaces\000", 2586408642)
		methodTextEdit[185] = classDB.get_method_bind("TextEdit\000", "is_drawing_spaces\000", 36873697)
		methodTextEdit[186] = classDB.get_method_bind("TextEdit\000", "get_menu\000", 229722558)
		methodTextEdit[187] = classDB.get_method_bind("TextEdit\000", "is_menu_visible\000", 36873697)
		methodTextEdit[188] = classDB.get_method_bind("TextEdit\000", "menu_option\000", 1286410249)
		methodTextLine[0] = classDB.get_method_bind("TextLine\000", "clear\000", 3218959716)
		methodTextLine[1] = classDB.get_method_bind("TextLine\000", "set_direction\000", 1418190634)
		methodTextLine[2] = classDB.get_method_bind("TextLine\000", "get_direction\000", 2516697328)
		methodTextLine[3] = classDB.get_method_bind("TextLine\000", "set_orientation\000", 42823726)
		methodTextLine[4] = classDB.get_method_bind("TextLine\000", "get_orientation\000", 175768116)
		methodTextLine[5] = classDB.get_method_bind("TextLine\000", "set_preserve_invalid\000", 2586408642)
		methodTextLine[6] = classDB.get_method_bind("TextLine\000", "get_preserve_invalid\000", 36873697)
		methodTextLine[7] = classDB.get_method_bind("TextLine\000", "set_preserve_control\000", 2586408642)
		methodTextLine[8] = classDB.get_method_bind("TextLine\000", "get_preserve_control\000", 36873697)
		methodTextLine[9] = classDB.get_method_bind("TextLine\000", "set_bidi_override\000", 381264803)
		methodTextLine[10] = classDB.get_method_bind("TextLine\000", "add_string\000", 867188035)
		methodTextLine[11] = classDB.get_method_bind("TextLine\000", "add_object\000", 232531617)
		methodTextLine[12] = classDB.get_method_bind("TextLine\000", "resize_object\000", 1241600523)
		methodTextLine[13] = classDB.get_method_bind("TextLine\000", "set_width\000", 373806689)
		methodTextLine[14] = classDB.get_method_bind("TextLine\000", "get_width\000", 1740695150)
		methodTextLine[15] = classDB.get_method_bind("TextLine\000", "set_horizontal_alignment\000", 2312603777)
		methodTextLine[16] = classDB.get_method_bind("TextLine\000", "get_horizontal_alignment\000", 341400642)
		methodTextLine[17] = classDB.get_method_bind("TextLine\000", "tab_align\000", 2899603908)
		methodTextLine[18] = classDB.get_method_bind("TextLine\000", "set_flags\000", 2877345813)
		methodTextLine[19] = classDB.get_method_bind("TextLine\000", "get_flags\000", 1583363614)
		methodTextLine[20] = classDB.get_method_bind("TextLine\000", "set_text_overrun_behavior\000", 1008890932)
		methodTextLine[21] = classDB.get_method_bind("TextLine\000", "get_text_overrun_behavior\000", 3779142101)
		methodTextLine[22] = classDB.get_method_bind("TextLine\000", "get_objects\000", 3995934104)
		methodTextLine[23] = classDB.get_method_bind("TextLine\000", "get_object_rect\000", 1742700391)
		methodTextLine[24] = classDB.get_method_bind("TextLine\000", "get_size\000", 3341600327)
		methodTextLine[25] = classDB.get_method_bind("TextLine\000", "get_rid\000", 2944877500)
		methodTextLine[26] = classDB.get_method_bind("TextLine\000", "get_line_ascent\000", 1740695150)
		methodTextLine[27] = classDB.get_method_bind("TextLine\000", "get_line_descent\000", 1740695150)
		methodTextLine[28] = classDB.get_method_bind("TextLine\000", "get_line_width\000", 1740695150)
		methodTextLine[29] = classDB.get_method_bind("TextLine\000", "get_line_underline_position\000", 1740695150)
		methodTextLine[30] = classDB.get_method_bind("TextLine\000", "get_line_underline_thickness\000", 1740695150)
		methodTextLine[31] = classDB.get_method_bind("TextLine\000", "draw\000", 1164457837)
		methodTextLine[32] = classDB.get_method_bind("TextLine\000", "draw_outline\000", 1364491366)
		methodTextLine[33] = classDB.get_method_bind("TextLine\000", "hit_test\000", 2401831903)
		methodTextMesh[0] = classDB.get_method_bind("TextMesh\000", "set_horizontal_alignment\000", 2312603777)
		methodTextMesh[1] = classDB.get_method_bind("TextMesh\000", "get_horizontal_alignment\000", 341400642)
		methodTextMesh[2] = classDB.get_method_bind("TextMesh\000", "set_vertical_alignment\000", 1796458609)
		methodTextMesh[3] = classDB.get_method_bind("TextMesh\000", "get_vertical_alignment\000", 3274884059)
		methodTextMesh[4] = classDB.get_method_bind("TextMesh\000", "set_text\000", 83702148)
		methodTextMesh[5] = classDB.get_method_bind("TextMesh\000", "get_text\000", 201670096)
		methodTextMesh[6] = classDB.get_method_bind("TextMesh\000", "set_font\000", 1262170328)
		methodTextMesh[7] = classDB.get_method_bind("TextMesh\000", "get_font\000", 3229501585)
		methodTextMesh[8] = classDB.get_method_bind("TextMesh\000", "set_font_size\000", 1286410249)
		methodTextMesh[9] = classDB.get_method_bind("TextMesh\000", "get_font_size\000", 3905245786)
		methodTextMesh[10] = classDB.get_method_bind("TextMesh\000", "set_line_spacing\000", 373806689)
		methodTextMesh[11] = classDB.get_method_bind("TextMesh\000", "get_line_spacing\000", 1740695150)
		methodTextMesh[12] = classDB.get_method_bind("TextMesh\000", "set_autowrap_mode\000", 3289138044)
		methodTextMesh[13] = classDB.get_method_bind("TextMesh\000", "get_autowrap_mode\000", 1549071663)
		methodTextMesh[14] = classDB.get_method_bind("TextMesh\000", "set_depth\000", 373806689)
		methodTextMesh[15] = classDB.get_method_bind("TextMesh\000", "get_depth\000", 1740695150)
		methodTextMesh[16] = classDB.get_method_bind("TextMesh\000", "set_width\000", 373806689)
		methodTextMesh[17] = classDB.get_method_bind("TextMesh\000", "get_width\000", 1740695150)
		methodTextMesh[18] = classDB.get_method_bind("TextMesh\000", "set_pixel_size\000", 373806689)
		methodTextMesh[19] = classDB.get_method_bind("TextMesh\000", "get_pixel_size\000", 1740695150)
		methodTextMesh[20] = classDB.get_method_bind("TextMesh\000", "set_offset\000", 743155724)
		methodTextMesh[21] = classDB.get_method_bind("TextMesh\000", "get_offset\000", 3341600327)
		methodTextMesh[22] = classDB.get_method_bind("TextMesh\000", "set_curve_step\000", 373806689)
		methodTextMesh[23] = classDB.get_method_bind("TextMesh\000", "get_curve_step\000", 1740695150)
		methodTextMesh[24] = classDB.get_method_bind("TextMesh\000", "set_text_direction\000", 1418190634)
		methodTextMesh[25] = classDB.get_method_bind("TextMesh\000", "get_text_direction\000", 2516697328)
		methodTextMesh[26] = classDB.get_method_bind("TextMesh\000", "set_language\000", 83702148)
		methodTextMesh[27] = classDB.get_method_bind("TextMesh\000", "get_language\000", 201670096)
		methodTextMesh[28] = classDB.get_method_bind("TextMesh\000", "set_structured_text_bidi_override\000", 55961453)
		methodTextMesh[29] = classDB.get_method_bind("TextMesh\000", "get_structured_text_bidi_override\000", 3385126229)
		methodTextMesh[30] = classDB.get_method_bind("TextMesh\000", "set_structured_text_bidi_override_options\000", 381264803)
		methodTextMesh[31] = classDB.get_method_bind("TextMesh\000", "get_structured_text_bidi_override_options\000", 3995934104)
		methodTextMesh[32] = classDB.get_method_bind("TextMesh\000", "set_uppercase\000", 2586408642)
		methodTextMesh[33] = classDB.get_method_bind("TextMesh\000", "is_uppercase\000", 36873697)
		methodTextParagraph[0] = classDB.get_method_bind("TextParagraph\000", "clear\000", 3218959716)
		methodTextParagraph[1] = classDB.get_method_bind("TextParagraph\000", "set_direction\000", 1418190634)
		methodTextParagraph[2] = classDB.get_method_bind("TextParagraph\000", "get_direction\000", 2516697328)
		methodTextParagraph[3] = classDB.get_method_bind("TextParagraph\000", "set_custom_punctuation\000", 83702148)
		methodTextParagraph[4] = classDB.get_method_bind("TextParagraph\000", "get_custom_punctuation\000", 201670096)
		methodTextParagraph[5] = classDB.get_method_bind("TextParagraph\000", "set_orientation\000", 42823726)
		methodTextParagraph[6] = classDB.get_method_bind("TextParagraph\000", "get_orientation\000", 175768116)
		methodTextParagraph[7] = classDB.get_method_bind("TextParagraph\000", "set_preserve_invalid\000", 2586408642)
		methodTextParagraph[8] = classDB.get_method_bind("TextParagraph\000", "get_preserve_invalid\000", 36873697)
		methodTextParagraph[9] = classDB.get_method_bind("TextParagraph\000", "set_preserve_control\000", 2586408642)
		methodTextParagraph[10] = classDB.get_method_bind("TextParagraph\000", "get_preserve_control\000", 36873697)
		methodTextParagraph[11] = classDB.get_method_bind("TextParagraph\000", "set_bidi_override\000", 381264803)
		methodTextParagraph[12] = classDB.get_method_bind("TextParagraph\000", "set_dropcap\000", 2613124475)
		methodTextParagraph[13] = classDB.get_method_bind("TextParagraph\000", "clear_dropcap\000", 3218959716)
		methodTextParagraph[14] = classDB.get_method_bind("TextParagraph\000", "add_string\000", 867188035)
		methodTextParagraph[15] = classDB.get_method_bind("TextParagraph\000", "add_object\000", 232531617)
		methodTextParagraph[16] = classDB.get_method_bind("TextParagraph\000", "resize_object\000", 1241600523)
		methodTextParagraph[17] = classDB.get_method_bind("TextParagraph\000", "set_alignment\000", 2312603777)
		methodTextParagraph[18] = classDB.get_method_bind("TextParagraph\000", "get_alignment\000", 341400642)
		methodTextParagraph[19] = classDB.get_method_bind("TextParagraph\000", "tab_align\000", 2899603908)
		methodTextParagraph[20] = classDB.get_method_bind("TextParagraph\000", "set_break_flags\000", 2809697122)
		methodTextParagraph[21] = classDB.get_method_bind("TextParagraph\000", "get_break_flags\000", 2340632602)
		methodTextParagraph[22] = classDB.get_method_bind("TextParagraph\000", "set_justification_flags\000", 2877345813)
		methodTextParagraph[23] = classDB.get_method_bind("TextParagraph\000", "get_justification_flags\000", 1583363614)
		methodTextParagraph[24] = classDB.get_method_bind("TextParagraph\000", "set_text_overrun_behavior\000", 1008890932)
		methodTextParagraph[25] = classDB.get_method_bind("TextParagraph\000", "get_text_overrun_behavior\000", 3779142101)
		methodTextParagraph[26] = classDB.get_method_bind("TextParagraph\000", "set_width\000", 373806689)
		methodTextParagraph[27] = classDB.get_method_bind("TextParagraph\000", "get_width\000", 1740695150)
		methodTextParagraph[28] = classDB.get_method_bind("TextParagraph\000", "get_non_wrapped_size\000", 3341600327)
		methodTextParagraph[29] = classDB.get_method_bind("TextParagraph\000", "get_size\000", 3341600327)
		methodTextParagraph[30] = classDB.get_method_bind("TextParagraph\000", "get_rid\000", 2944877500)
		methodTextParagraph[31] = classDB.get_method_bind("TextParagraph\000", "get_line_rid\000", 495598643)
		methodTextParagraph[32] = classDB.get_method_bind("TextParagraph\000", "get_dropcap_rid\000", 2944877500)
		methodTextParagraph[33] = classDB.get_method_bind("TextParagraph\000", "get_line_count\000", 3905245786)
		methodTextParagraph[34] = classDB.get_method_bind("TextParagraph\000", "set_max_lines_visible\000", 1286410249)
		methodTextParagraph[35] = classDB.get_method_bind("TextParagraph\000", "get_max_lines_visible\000", 3905245786)
		methodTextParagraph[36] = classDB.get_method_bind("TextParagraph\000", "get_line_objects\000", 663333327)
		methodTextParagraph[37] = classDB.get_method_bind("TextParagraph\000", "get_line_object_rect\000", 204315017)
		methodTextParagraph[38] = classDB.get_method_bind("TextParagraph\000", "get_line_size\000", 2299179447)
		methodTextParagraph[39] = classDB.get_method_bind("TextParagraph\000", "get_line_range\000", 880721226)
		methodTextParagraph[40] = classDB.get_method_bind("TextParagraph\000", "get_line_ascent\000", 2339986948)
		methodTextParagraph[41] = classDB.get_method_bind("TextParagraph\000", "get_line_descent\000", 2339986948)
		methodTextParagraph[42] = classDB.get_method_bind("TextParagraph\000", "get_line_width\000", 2339986948)
		methodTextParagraph[43] = classDB.get_method_bind("TextParagraph\000", "get_line_underline_position\000", 2339986948)
		methodTextParagraph[44] = classDB.get_method_bind("TextParagraph\000", "get_line_underline_thickness\000", 2339986948)
		methodTextParagraph[45] = classDB.get_method_bind("TextParagraph\000", "get_dropcap_size\000", 3341600327)
		methodTextParagraph[46] = classDB.get_method_bind("TextParagraph\000", "get_dropcap_lines\000", 3905245786)
		methodTextParagraph[47] = classDB.get_method_bind("TextParagraph\000", "draw\000", 367324453)
		methodTextParagraph[48] = classDB.get_method_bind("TextParagraph\000", "draw_outline\000", 2159523405)
		methodTextParagraph[49] = classDB.get_method_bind("TextParagraph\000", "draw_line\000", 3963848920)
		methodTextParagraph[50] = classDB.get_method_bind("TextParagraph\000", "draw_line_outline\000", 1814903311)
		methodTextParagraph[51] = classDB.get_method_bind("TextParagraph\000", "draw_dropcap\000", 1164457837)
		methodTextParagraph[52] = classDB.get_method_bind("TextParagraph\000", "draw_dropcap_outline\000", 1364491366)
		methodTextParagraph[53] = classDB.get_method_bind("TextParagraph\000", "hit_test\000", 3820158470)
		methodTextServer[0] = classDB.get_method_bind("TextServer\000", "has_feature\000", 3967367083)
		methodTextServer[1] = classDB.get_method_bind("TextServer\000", "get_name\000", 201670096)
		methodTextServer[2] = classDB.get_method_bind("TextServer\000", "get_features\000", 3905245786)
		methodTextServer[3] = classDB.get_method_bind("TextServer\000", "load_support_data\000", 2323990056)
		methodTextServer[4] = classDB.get_method_bind("TextServer\000", "get_support_data_filename\000", 201670096)
		methodTextServer[5] = classDB.get_method_bind("TextServer\000", "get_support_data_info\000", 201670096)
		methodTextServer[6] = classDB.get_method_bind("TextServer\000", "save_support_data\000", 3927539163)
		methodTextServer[7] = classDB.get_method_bind("TextServer\000", "is_locale_right_to_left\000", 3927539163)
		methodTextServer[8] = classDB.get_method_bind("TextServer\000", "name_to_tag\000", 1321353865)
		methodTextServer[9] = classDB.get_method_bind("TextServer\000", "tag_to_name\000", 844755477)
		methodTextServer[10] = classDB.get_method_bind("TextServer\000", "has\000", 3521089500)
		methodTextServer[11] = classDB.get_method_bind("TextServer\000", "free_rid\000", 2722037293)
		methodTextServer[12] = classDB.get_method_bind("TextServer\000", "create_font\000", 529393457)
		methodTextServer[13] = classDB.get_method_bind("TextServer\000", "font_set_data\000", 1355495400)
		methodTextServer[14] = classDB.get_method_bind("TextServer\000", "font_set_face_index\000", 3411492887)
		methodTextServer[15] = classDB.get_method_bind("TextServer\000", "font_get_face_index\000", 2198884583)
		methodTextServer[16] = classDB.get_method_bind("TextServer\000", "font_get_face_count\000", 2198884583)
		methodTextServer[17] = classDB.get_method_bind("TextServer\000", "font_set_style\000", 898466325)
		methodTextServer[18] = classDB.get_method_bind("TextServer\000", "font_get_style\000", 3082502592)
		methodTextServer[19] = classDB.get_method_bind("TextServer\000", "font_set_name\000", 2726140452)
		methodTextServer[20] = classDB.get_method_bind("TextServer\000", "font_get_name\000", 642473191)
		methodTextServer[21] = classDB.get_method_bind("TextServer\000", "font_set_style_name\000", 2726140452)
		methodTextServer[22] = classDB.get_method_bind("TextServer\000", "font_get_style_name\000", 642473191)
		methodTextServer[23] = classDB.get_method_bind("TextServer\000", "font_set_antialiasing\000", 958337235)
		methodTextServer[24] = classDB.get_method_bind("TextServer\000", "font_get_antialiasing\000", 3389420495)
		methodTextServer[25] = classDB.get_method_bind("TextServer\000", "font_set_generate_mipmaps\000", 1265174801)
		methodTextServer[26] = classDB.get_method_bind("TextServer\000", "font_get_generate_mipmaps\000", 4155700596)
		methodTextServer[27] = classDB.get_method_bind("TextServer\000", "font_set_multichannel_signed_distance_field\000", 1265174801)
		methodTextServer[28] = classDB.get_method_bind("TextServer\000", "font_is_multichannel_signed_distance_field\000", 4155700596)
		methodTextServer[29] = classDB.get_method_bind("TextServer\000", "font_set_msdf_pixel_range\000", 3411492887)
		methodTextServer[30] = classDB.get_method_bind("TextServer\000", "font_get_msdf_pixel_range\000", 2198884583)
		methodTextServer[31] = classDB.get_method_bind("TextServer\000", "font_set_msdf_size\000", 3411492887)
		methodTextServer[32] = classDB.get_method_bind("TextServer\000", "font_get_msdf_size\000", 2198884583)
		methodTextServer[33] = classDB.get_method_bind("TextServer\000", "font_set_fixed_size\000", 3411492887)
		methodTextServer[34] = classDB.get_method_bind("TextServer\000", "font_get_fixed_size\000", 2198884583)
		methodTextServer[35] = classDB.get_method_bind("TextServer\000", "font_set_force_autohinter\000", 1265174801)
		methodTextServer[36] = classDB.get_method_bind("TextServer\000", "font_is_force_autohinter\000", 4155700596)
		methodTextServer[37] = classDB.get_method_bind("TextServer\000", "font_set_hinting\000", 1520010864)
		methodTextServer[38] = classDB.get_method_bind("TextServer\000", "font_get_hinting\000", 3971592737)
		methodTextServer[39] = classDB.get_method_bind("TextServer\000", "font_set_subpixel_positioning\000", 3830459669)
		methodTextServer[40] = classDB.get_method_bind("TextServer\000", "font_get_subpixel_positioning\000", 2752233671)
		methodTextServer[41] = classDB.get_method_bind("TextServer\000", "font_set_embolden\000", 1794382983)
		methodTextServer[42] = classDB.get_method_bind("TextServer\000", "font_get_embolden\000", 866169185)
		methodTextServer[43] = classDB.get_method_bind("TextServer\000", "font_set_transform\000", 1246044741)
		methodTextServer[44] = classDB.get_method_bind("TextServer\000", "font_get_transform\000", 213527486)
		methodTextServer[45] = classDB.get_method_bind("TextServer\000", "font_set_variation_coordinates\000", 1217542888)
		methodTextServer[46] = classDB.get_method_bind("TextServer\000", "font_get_variation_coordinates\000", 1882737106)
		methodTextServer[47] = classDB.get_method_bind("TextServer\000", "font_set_oversampling\000", 1794382983)
		methodTextServer[48] = classDB.get_method_bind("TextServer\000", "font_get_oversampling\000", 866169185)
		methodTextServer[49] = classDB.get_method_bind("TextServer\000", "font_get_size_cache_list\000", 2684255073)
		methodTextServer[50] = classDB.get_method_bind("TextServer\000", "font_clear_size_cache\000", 2722037293)
		methodTextServer[51] = classDB.get_method_bind("TextServer\000", "font_remove_size_cache\000", 2450610377)
		methodTextServer[52] = classDB.get_method_bind("TextServer\000", "font_set_ascent\000", 1892459533)
		methodTextServer[53] = classDB.get_method_bind("TextServer\000", "font_get_ascent\000", 755457166)
		methodTextServer[54] = classDB.get_method_bind("TextServer\000", "font_set_descent\000", 1892459533)
		methodTextServer[55] = classDB.get_method_bind("TextServer\000", "font_get_descent\000", 755457166)
		methodTextServer[56] = classDB.get_method_bind("TextServer\000", "font_set_underline_position\000", 1892459533)
		methodTextServer[57] = classDB.get_method_bind("TextServer\000", "font_get_underline_position\000", 755457166)
		methodTextServer[58] = classDB.get_method_bind("TextServer\000", "font_set_underline_thickness\000", 1892459533)
		methodTextServer[59] = classDB.get_method_bind("TextServer\000", "font_get_underline_thickness\000", 755457166)
		methodTextServer[60] = classDB.get_method_bind("TextServer\000", "font_set_scale\000", 1892459533)
		methodTextServer[61] = classDB.get_method_bind("TextServer\000", "font_get_scale\000", 755457166)
		methodTextServer[62] = classDB.get_method_bind("TextServer\000", "font_get_texture_count\000", 1311001310)
		methodTextServer[63] = classDB.get_method_bind("TextServer\000", "font_clear_textures\000", 2450610377)
		methodTextServer[64] = classDB.get_method_bind("TextServer\000", "font_remove_texture\000", 3810512262)
		methodTextServer[65] = classDB.get_method_bind("TextServer\000", "font_set_texture_image\000", 2354485091)
		methodTextServer[66] = classDB.get_method_bind("TextServer\000", "font_get_texture_image\000", 2451761155)
		methodTextServer[67] = classDB.get_method_bind("TextServer\000", "font_set_texture_offsets\000", 3005398047)
		methodTextServer[68] = classDB.get_method_bind("TextServer\000", "font_get_texture_offsets\000", 3420028887)
		methodTextServer[69] = classDB.get_method_bind("TextServer\000", "font_get_glyph_list\000", 46086620)
		methodTextServer[70] = classDB.get_method_bind("TextServer\000", "font_clear_glyphs\000", 2450610377)
		methodTextServer[71] = classDB.get_method_bind("TextServer\000", "font_remove_glyph\000", 3810512262)
		methodTextServer[72] = classDB.get_method_bind("TextServer\000", "font_get_glyph_advance\000", 2555689501)
		methodTextServer[73] = classDB.get_method_bind("TextServer\000", "font_set_glyph_advance\000", 3219397315)
		methodTextServer[74] = classDB.get_method_bind("TextServer\000", "font_get_glyph_offset\000", 513728628)
		methodTextServer[75] = classDB.get_method_bind("TextServer\000", "font_set_glyph_offset\000", 1812632090)
		methodTextServer[76] = classDB.get_method_bind("TextServer\000", "font_get_glyph_size\000", 513728628)
		methodTextServer[77] = classDB.get_method_bind("TextServer\000", "font_set_glyph_size\000", 1812632090)
		methodTextServer[78] = classDB.get_method_bind("TextServer\000", "font_get_glyph_uv_rect\000", 2274268786)
		methodTextServer[79] = classDB.get_method_bind("TextServer\000", "font_set_glyph_uv_rect\000", 1973324081)
		methodTextServer[80] = classDB.get_method_bind("TextServer\000", "font_get_glyph_texture_idx\000", 4292800474)
		methodTextServer[81] = classDB.get_method_bind("TextServer\000", "font_set_glyph_texture_idx\000", 4254580980)
		methodTextServer[82] = classDB.get_method_bind("TextServer\000", "font_get_glyph_texture_rid\000", 1451696141)
		methodTextServer[83] = classDB.get_method_bind("TextServer\000", "font_get_glyph_texture_size\000", 513728628)
		methodTextServer[84] = classDB.get_method_bind("TextServer\000", "font_get_glyph_contours\000", 2903964473)
		methodTextServer[85] = classDB.get_method_bind("TextServer\000", "font_get_kerning_list\000", 1778388067)
		methodTextServer[86] = classDB.get_method_bind("TextServer\000", "font_clear_kerning_map\000", 3411492887)
		methodTextServer[87] = classDB.get_method_bind("TextServer\000", "font_remove_kerning\000", 2141860016)
		methodTextServer[88] = classDB.get_method_bind("TextServer\000", "font_set_kerning\000", 3630965883)
		methodTextServer[89] = classDB.get_method_bind("TextServer\000", "font_get_kerning\000", 1019980169)
		methodTextServer[90] = classDB.get_method_bind("TextServer\000", "font_get_glyph_index\000", 1765635060)
		methodTextServer[91] = classDB.get_method_bind("TextServer\000", "font_has_char\000", 3120086654)
		methodTextServer[92] = classDB.get_method_bind("TextServer\000", "font_get_supported_chars\000", 642473191)
		methodTextServer[93] = classDB.get_method_bind("TextServer\000", "font_render_range\000", 4254580980)
		methodTextServer[94] = classDB.get_method_bind("TextServer\000", "font_render_glyph\000", 3810512262)
		methodTextServer[95] = classDB.get_method_bind("TextServer\000", "font_draw_glyph\000", 1821196351)
		methodTextServer[96] = classDB.get_method_bind("TextServer\000", "font_draw_glyph_outline\000", 1124898203)
		methodTextServer[97] = classDB.get_method_bind("TextServer\000", "font_is_language_supported\000", 3199320846)
		methodTextServer[98] = classDB.get_method_bind("TextServer\000", "font_set_language_support_override\000", 2313957094)
		methodTextServer[99] = classDB.get_method_bind("TextServer\000", "font_get_language_support_override\000", 2829184646)
		methodTextServer[100] = classDB.get_method_bind("TextServer\000", "font_remove_language_support_override\000", 2726140452)
		methodTextServer[101] = classDB.get_method_bind("TextServer\000", "font_get_language_support_overrides\000", 2801473409)
		methodTextServer[102] = classDB.get_method_bind("TextServer\000", "font_is_script_supported\000", 3199320846)
		methodTextServer[103] = classDB.get_method_bind("TextServer\000", "font_set_script_support_override\000", 2313957094)
		methodTextServer[104] = classDB.get_method_bind("TextServer\000", "font_get_script_support_override\000", 2829184646)
		methodTextServer[105] = classDB.get_method_bind("TextServer\000", "font_remove_script_support_override\000", 2726140452)
		methodTextServer[106] = classDB.get_method_bind("TextServer\000", "font_get_script_support_overrides\000", 2801473409)
		methodTextServer[107] = classDB.get_method_bind("TextServer\000", "font_set_opentype_feature_overrides\000", 1217542888)
		methodTextServer[108] = classDB.get_method_bind("TextServer\000", "font_get_opentype_feature_overrides\000", 1882737106)
		methodTextServer[109] = classDB.get_method_bind("TextServer\000", "font_supported_feature_list\000", 1882737106)
		methodTextServer[110] = classDB.get_method_bind("TextServer\000", "font_supported_variation_list\000", 1882737106)
		methodTextServer[111] = classDB.get_method_bind("TextServer\000", "font_get_global_oversampling\000", 1740695150)
		methodTextServer[112] = classDB.get_method_bind("TextServer\000", "font_set_global_oversampling\000", 373806689)
		methodTextServer[113] = classDB.get_method_bind("TextServer\000", "get_hex_code_box_size\000", 3016396712)
		methodTextServer[114] = classDB.get_method_bind("TextServer\000", "draw_hex_code_box\000", 1602046441)
		methodTextServer[115] = classDB.get_method_bind("TextServer\000", "create_shaped_text\000", 1231398698)
		methodTextServer[116] = classDB.get_method_bind("TextServer\000", "shaped_text_clear\000", 2722037293)
		methodTextServer[117] = classDB.get_method_bind("TextServer\000", "shaped_text_set_direction\000", 2616949700)
		methodTextServer[118] = classDB.get_method_bind("TextServer\000", "shaped_text_get_direction\000", 3065904362)
		methodTextServer[119] = classDB.get_method_bind("TextServer\000", "shaped_text_get_inferred_direction\000", 3065904362)
		methodTextServer[120] = classDB.get_method_bind("TextServer\000", "shaped_text_set_bidi_override\000", 684822712)
		methodTextServer[121] = classDB.get_method_bind("TextServer\000", "shaped_text_set_custom_punctuation\000", 2726140452)
		methodTextServer[122] = classDB.get_method_bind("TextServer\000", "shaped_text_get_custom_punctuation\000", 642473191)
		methodTextServer[123] = classDB.get_method_bind("TextServer\000", "shaped_text_set_orientation\000", 104095128)
		methodTextServer[124] = classDB.get_method_bind("TextServer\000", "shaped_text_get_orientation\000", 3142708106)
		methodTextServer[125] = classDB.get_method_bind("TextServer\000", "shaped_text_set_preserve_invalid\000", 1265174801)
		methodTextServer[126] = classDB.get_method_bind("TextServer\000", "shaped_text_get_preserve_invalid\000", 4155700596)
		methodTextServer[127] = classDB.get_method_bind("TextServer\000", "shaped_text_set_preserve_control\000", 1265174801)
		methodTextServer[128] = classDB.get_method_bind("TextServer\000", "shaped_text_get_preserve_control\000", 4155700596)
		methodTextServer[129] = classDB.get_method_bind("TextServer\000", "shaped_text_set_spacing\000", 1307259930)
		methodTextServer[130] = classDB.get_method_bind("TextServer\000", "shaped_text_get_spacing\000", 1213653558)
		methodTextServer[131] = classDB.get_method_bind("TextServer\000", "shaped_text_add_string\000", 2621279422)
		methodTextServer[132] = classDB.get_method_bind("TextServer\000", "shaped_text_add_object\000", 2711351313)
		methodTextServer[133] = classDB.get_method_bind("TextServer\000", "shaped_text_resize_object\000", 3402652107)
		methodTextServer[134] = classDB.get_method_bind("TextServer\000", "shaped_get_span_count\000", 2198884583)
		methodTextServer[135] = classDB.get_method_bind("TextServer\000", "shaped_get_span_meta\000", 4069510997)
		methodTextServer[136] = classDB.get_method_bind("TextServer\000", "shaped_set_span_update_font\000", 1578983057)
		methodTextServer[137] = classDB.get_method_bind("TextServer\000", "shaped_text_substr\000", 1937682086)
		methodTextServer[138] = classDB.get_method_bind("TextServer\000", "shaped_text_get_parent\000", 3814569979)
		methodTextServer[139] = classDB.get_method_bind("TextServer\000", "shaped_text_fit_to_width\000", 603718830)
		methodTextServer[140] = classDB.get_method_bind("TextServer\000", "shaped_text_tab_align\000", 1283669550)
		methodTextServer[141] = classDB.get_method_bind("TextServer\000", "shaped_text_shape\000", 3521089500)
		methodTextServer[142] = classDB.get_method_bind("TextServer\000", "shaped_text_is_ready\000", 4155700596)
		methodTextServer[143] = classDB.get_method_bind("TextServer\000", "shaped_text_get_glyphs\000", 2684255073)
		methodTextServer[144] = classDB.get_method_bind("TextServer\000", "shaped_text_sort_logical\000", 2670461153)
		methodTextServer[145] = classDB.get_method_bind("TextServer\000", "shaped_text_get_glyph_count\000", 2198884583)
		methodTextServer[146] = classDB.get_method_bind("TextServer\000", "shaped_text_get_range\000", 733700038)
		methodTextServer[147] = classDB.get_method_bind("TextServer\000", "shaped_text_get_line_breaks_adv\000", 4206849830)
		methodTextServer[148] = classDB.get_method_bind("TextServer\000", "shaped_text_get_line_breaks\000", 303410369)
		methodTextServer[149] = classDB.get_method_bind("TextServer\000", "shaped_text_get_word_breaks\000", 3299477123)
		methodTextServer[150] = classDB.get_method_bind("TextServer\000", "shaped_text_get_trim_pos\000", 2198884583)
		methodTextServer[151] = classDB.get_method_bind("TextServer\000", "shaped_text_get_ellipsis_pos\000", 2198884583)
		methodTextServer[152] = classDB.get_method_bind("TextServer\000", "shaped_text_get_ellipsis_glyphs\000", 2684255073)
		methodTextServer[153] = classDB.get_method_bind("TextServer\000", "shaped_text_get_ellipsis_glyph_count\000", 2198884583)
		methodTextServer[154] = classDB.get_method_bind("TextServer\000", "shaped_text_overrun_trim_to_width\000", 1572579718)
		methodTextServer[155] = classDB.get_method_bind("TextServer\000", "shaped_text_get_objects\000", 2684255073)
		methodTextServer[156] = classDB.get_method_bind("TextServer\000", "shaped_text_get_object_rect\000", 447978354)
		methodTextServer[157] = classDB.get_method_bind("TextServer\000", "shaped_text_get_size\000", 2440833711)
		methodTextServer[158] = classDB.get_method_bind("TextServer\000", "shaped_text_get_ascent\000", 866169185)
		methodTextServer[159] = classDB.get_method_bind("TextServer\000", "shaped_text_get_descent\000", 866169185)
		methodTextServer[160] = classDB.get_method_bind("TextServer\000", "shaped_text_get_width\000", 866169185)
		methodTextServer[161] = classDB.get_method_bind("TextServer\000", "shaped_text_get_underline_position\000", 866169185)
		methodTextServer[162] = classDB.get_method_bind("TextServer\000", "shaped_text_get_underline_thickness\000", 866169185)
		methodTextServer[163] = classDB.get_method_bind("TextServer\000", "shaped_text_get_carets\000", 1574219346)
		methodTextServer[164] = classDB.get_method_bind("TextServer\000", "shaped_text_get_selection\000", 3714187733)
		methodTextServer[165] = classDB.get_method_bind("TextServer\000", "shaped_text_hit_test_grapheme\000", 3149310417)
		methodTextServer[166] = classDB.get_method_bind("TextServer\000", "shaped_text_hit_test_position\000", 3149310417)
		methodTextServer[167] = classDB.get_method_bind("TextServer\000", "shaped_text_get_grapheme_bounds\000", 2546185844)
		methodTextServer[168] = classDB.get_method_bind("TextServer\000", "shaped_text_next_grapheme_pos\000", 1120910005)
		methodTextServer[169] = classDB.get_method_bind("TextServer\000", "shaped_text_prev_grapheme_pos\000", 1120910005)
		methodTextServer[170] = classDB.get_method_bind("TextServer\000", "shaped_text_draw\000", 70679950)
		methodTextServer[171] = classDB.get_method_bind("TextServer\000", "shaped_text_draw_outline\000", 2673671346)
		methodTextServer[172] = classDB.get_method_bind("TextServer\000", "shaped_text_get_dominant_direction_in_range\000", 3326907668)
		methodTextServer[173] = classDB.get_method_bind("TextServer\000", "format_number\000", 2305636099)
		methodTextServer[174] = classDB.get_method_bind("TextServer\000", "parse_number\000", 2305636099)
		methodTextServer[175] = classDB.get_method_bind("TextServer\000", "percent_sign\000", 993269549)
		methodTextServer[176] = classDB.get_method_bind("TextServer\000", "string_get_word_breaks\000", 1586579831)
		methodTextServer[177] = classDB.get_method_bind("TextServer\000", "is_confusable\000", 1433197768)
		methodTextServer[178] = classDB.get_method_bind("TextServer\000", "spoof_check\000", 3927539163)
		methodTextServer[179] = classDB.get_method_bind("TextServer\000", "strip_diacritics\000", 3135753539)
		methodTextServer[180] = classDB.get_method_bind("TextServer\000", "is_valid_identifier\000", 3927539163)
		methodTextServer[181] = classDB.get_method_bind("TextServer\000", "string_to_upper\000", 2305636099)
		methodTextServer[182] = classDB.get_method_bind("TextServer\000", "string_to_lower\000", 2305636099)
		methodTextServer[183] = classDB.get_method_bind("TextServer\000", "parse_structured_text\000", 3310685015)
		methodTextServerManagerSingleton[0] = classDB.get_method_bind("TextServerManager\000", "add_interface\000", 1799689403)
		methodTextServerManagerSingleton[1] = classDB.get_method_bind("TextServerManager\000", "get_interface_count\000", 3905245786)
		methodTextServerManagerSingleton[2] = classDB.get_method_bind("TextServerManager\000", "remove_interface\000", 1799689403)
		methodTextServerManagerSingleton[3] = classDB.get_method_bind("TextServerManager\000", "get_interface\000", 1672475555)
		methodTextServerManagerSingleton[4] = classDB.get_method_bind("TextServerManager\000", "get_interfaces\000", 3995934104)
		methodTextServerManagerSingleton[5] = classDB.get_method_bind("TextServerManager\000", "find_interface\000", 2240905781)
		methodTextServerManagerSingleton[6] = classDB.get_method_bind("TextServerManager\000", "set_primary_interface\000", 1799689403)
		methodTextServerManagerSingleton[7] = classDB.get_method_bind("TextServerManager\000", "get_primary_interface\000", 905850878)
		methodTexture2D[0] = classDB.get_method_bind("Texture2D\000", "get_width\000", 3905245786)
		methodTexture2D[1] = classDB.get_method_bind("Texture2D\000", "get_height\000", 3905245786)
		methodTexture2D[2] = classDB.get_method_bind("Texture2D\000", "get_size\000", 3341600327)
		methodTexture2D[3] = classDB.get_method_bind("Texture2D\000", "has_alpha\000", 36873697)
		methodTexture2D[4] = classDB.get_method_bind("Texture2D\000", "draw\000", 1115460088)
		methodTexture2D[5] = classDB.get_method_bind("Texture2D\000", "draw_rect\000", 575156982)
		methodTexture2D[6] = classDB.get_method_bind("Texture2D\000", "draw_rect_region\000", 1066564656)
		methodTexture2D[7] = classDB.get_method_bind("Texture2D\000", "get_image\000", 4190603485)
		methodTexture3D[0] = classDB.get_method_bind("Texture3D\000", "get_format\000", 3847873762)
		methodTexture3D[1] = classDB.get_method_bind("Texture3D\000", "get_width\000", 3905245786)
		methodTexture3D[2] = classDB.get_method_bind("Texture3D\000", "get_height\000", 3905245786)
		methodTexture3D[3] = classDB.get_method_bind("Texture3D\000", "get_depth\000", 3905245786)
		methodTexture3D[4] = classDB.get_method_bind("Texture3D\000", "has_mipmaps\000", 36873697)
		methodTexture3D[5] = classDB.get_method_bind("Texture3D\000", "get_data\000", 3995934104)
		methodTextureButton[0] = classDB.get_method_bind("TextureButton\000", "set_normal_texture\000", 4051416890)
		methodTextureButton[1] = classDB.get_method_bind("TextureButton\000", "set_pressed_texture\000", 4051416890)
		methodTextureButton[2] = classDB.get_method_bind("TextureButton\000", "set_hover_texture\000", 4051416890)
		methodTextureButton[3] = classDB.get_method_bind("TextureButton\000", "set_disabled_texture\000", 4051416890)
		methodTextureButton[4] = classDB.get_method_bind("TextureButton\000", "set_focused_texture\000", 4051416890)
		methodTextureButton[5] = classDB.get_method_bind("TextureButton\000", "set_click_mask\000", 698588216)
		methodTextureButton[6] = classDB.get_method_bind("TextureButton\000", "set_ignore_texture_size\000", 2586408642)
		methodTextureButton[7] = classDB.get_method_bind("TextureButton\000", "set_stretch_mode\000", 252530840)
		methodTextureButton[8] = classDB.get_method_bind("TextureButton\000", "set_flip_h\000", 2586408642)
		methodTextureButton[9] = classDB.get_method_bind("TextureButton\000", "is_flipped_h\000", 36873697)
		methodTextureButton[10] = classDB.get_method_bind("TextureButton\000", "set_flip_v\000", 2586408642)
		methodTextureButton[11] = classDB.get_method_bind("TextureButton\000", "is_flipped_v\000", 36873697)
		methodTextureButton[12] = classDB.get_method_bind("TextureButton\000", "get_normal_texture\000", 3635182373)
		methodTextureButton[13] = classDB.get_method_bind("TextureButton\000", "get_pressed_texture\000", 3635182373)
		methodTextureButton[14] = classDB.get_method_bind("TextureButton\000", "get_hover_texture\000", 3635182373)
		methodTextureButton[15] = classDB.get_method_bind("TextureButton\000", "get_disabled_texture\000", 3635182373)
		methodTextureButton[16] = classDB.get_method_bind("TextureButton\000", "get_focused_texture\000", 3635182373)
		methodTextureButton[17] = classDB.get_method_bind("TextureButton\000", "get_click_mask\000", 2459671998)
		methodTextureButton[18] = classDB.get_method_bind("TextureButton\000", "get_ignore_texture_size\000", 36873697)
		methodTextureButton[19] = classDB.get_method_bind("TextureButton\000", "get_stretch_mode\000", 33815122)
		methodTextureLayered[0] = classDB.get_method_bind("TextureLayered\000", "get_format\000", 3847873762)
		methodTextureLayered[1] = classDB.get_method_bind("TextureLayered\000", "get_layered_type\000", 518123893)
		methodTextureLayered[2] = classDB.get_method_bind("TextureLayered\000", "get_width\000", 3905245786)
		methodTextureLayered[3] = classDB.get_method_bind("TextureLayered\000", "get_height\000", 3905245786)
		methodTextureLayered[4] = classDB.get_method_bind("TextureLayered\000", "get_layers\000", 3905245786)
		methodTextureLayered[5] = classDB.get_method_bind("TextureLayered\000", "has_mipmaps\000", 36873697)
		methodTextureLayered[6] = classDB.get_method_bind("TextureLayered\000", "get_layer_data\000", 3655284255)
		methodTextureProgressBar[0] = classDB.get_method_bind("TextureProgressBar\000", "set_under_texture\000", 4051416890)
		methodTextureProgressBar[1] = classDB.get_method_bind("TextureProgressBar\000", "get_under_texture\000", 3635182373)
		methodTextureProgressBar[2] = classDB.get_method_bind("TextureProgressBar\000", "set_progress_texture\000", 4051416890)
		methodTextureProgressBar[3] = classDB.get_method_bind("TextureProgressBar\000", "get_progress_texture\000", 3635182373)
		methodTextureProgressBar[4] = classDB.get_method_bind("TextureProgressBar\000", "set_over_texture\000", 4051416890)
		methodTextureProgressBar[5] = classDB.get_method_bind("TextureProgressBar\000", "get_over_texture\000", 3635182373)
		methodTextureProgressBar[6] = classDB.get_method_bind("TextureProgressBar\000", "set_fill_mode\000", 1286410249)
		methodTextureProgressBar[7] = classDB.get_method_bind("TextureProgressBar\000", "get_fill_mode\000", 2455072627)
		methodTextureProgressBar[8] = classDB.get_method_bind("TextureProgressBar\000", "set_tint_under\000", 2920490490)
		methodTextureProgressBar[9] = classDB.get_method_bind("TextureProgressBar\000", "get_tint_under\000", 3444240500)
		methodTextureProgressBar[10] = classDB.get_method_bind("TextureProgressBar\000", "set_tint_progress\000", 2920490490)
		methodTextureProgressBar[11] = classDB.get_method_bind("TextureProgressBar\000", "get_tint_progress\000", 3444240500)
		methodTextureProgressBar[12] = classDB.get_method_bind("TextureProgressBar\000", "set_tint_over\000", 2920490490)
		methodTextureProgressBar[13] = classDB.get_method_bind("TextureProgressBar\000", "get_tint_over\000", 3444240500)
		methodTextureProgressBar[14] = classDB.get_method_bind("TextureProgressBar\000", "set_texture_progress_offset\000", 743155724)
		methodTextureProgressBar[15] = classDB.get_method_bind("TextureProgressBar\000", "get_texture_progress_offset\000", 3341600327)
		methodTextureProgressBar[16] = classDB.get_method_bind("TextureProgressBar\000", "set_radial_initial_angle\000", 373806689)
		methodTextureProgressBar[17] = classDB.get_method_bind("TextureProgressBar\000", "get_radial_initial_angle\000", 191475506)
		methodTextureProgressBar[18] = classDB.get_method_bind("TextureProgressBar\000", "set_radial_center_offset\000", 743155724)
		methodTextureProgressBar[19] = classDB.get_method_bind("TextureProgressBar\000", "get_radial_center_offset\000", 1497962370)
		methodTextureProgressBar[20] = classDB.get_method_bind("TextureProgressBar\000", "set_fill_degrees\000", 373806689)
		methodTextureProgressBar[21] = classDB.get_method_bind("TextureProgressBar\000", "get_fill_degrees\000", 191475506)
		methodTextureProgressBar[22] = classDB.get_method_bind("TextureProgressBar\000", "set_stretch_margin\000", 437707142)
		methodTextureProgressBar[23] = classDB.get_method_bind("TextureProgressBar\000", "get_stretch_margin\000", 1983885014)
		methodTextureProgressBar[24] = classDB.get_method_bind("TextureProgressBar\000", "set_nine_patch_stretch\000", 2586408642)
		methodTextureProgressBar[25] = classDB.get_method_bind("TextureProgressBar\000", "get_nine_patch_stretch\000", 36873697)
		methodTextureRect[0] = classDB.get_method_bind("TextureRect\000", "set_texture\000", 4051416890)
		methodTextureRect[1] = classDB.get_method_bind("TextureRect\000", "get_texture\000", 3635182373)
		methodTextureRect[2] = classDB.get_method_bind("TextureRect\000", "set_ignore_texture_size\000", 2586408642)
		methodTextureRect[3] = classDB.get_method_bind("TextureRect\000", "get_ignore_texture_size\000", 36873697)
		methodTextureRect[4] = classDB.get_method_bind("TextureRect\000", "set_flip_h\000", 2586408642)
		methodTextureRect[5] = classDB.get_method_bind("TextureRect\000", "is_flipped_h\000", 36873697)
		methodTextureRect[6] = classDB.get_method_bind("TextureRect\000", "set_flip_v\000", 2586408642)
		methodTextureRect[7] = classDB.get_method_bind("TextureRect\000", "is_flipped_v\000", 36873697)
		methodTextureRect[8] = classDB.get_method_bind("TextureRect\000", "set_stretch_mode\000", 58788729)
		methodTextureRect[9] = classDB.get_method_bind("TextureRect\000", "get_stretch_mode\000", 346396079)
		methodTheme[0] = classDB.get_method_bind("Theme\000", "set_icon\000", 2188371082)
		methodTheme[1] = classDB.get_method_bind("Theme\000", "get_icon\000", 934555193)
		methodTheme[2] = classDB.get_method_bind("Theme\000", "has_icon\000", 471820014)
		methodTheme[3] = classDB.get_method_bind("Theme\000", "rename_icon\000", 642128662)
		methodTheme[4] = classDB.get_method_bind("Theme\000", "clear_icon\000", 3740211285)
		methodTheme[5] = classDB.get_method_bind("Theme\000", "get_icon_list\000", 4291131558)
		methodTheme[6] = classDB.get_method_bind("Theme\000", "get_icon_type_list\000", 1139954409)
		methodTheme[7] = classDB.get_method_bind("Theme\000", "set_stylebox\000", 2075907568)
		methodTheme[8] = classDB.get_method_bind("Theme\000", "get_stylebox\000", 3405608165)
		methodTheme[9] = classDB.get_method_bind("Theme\000", "has_stylebox\000", 471820014)
		methodTheme[10] = classDB.get_method_bind("Theme\000", "rename_stylebox\000", 642128662)
		methodTheme[11] = classDB.get_method_bind("Theme\000", "clear_stylebox\000", 3740211285)
		methodTheme[12] = classDB.get_method_bind("Theme\000", "get_stylebox_list\000", 4291131558)
		methodTheme[13] = classDB.get_method_bind("Theme\000", "get_stylebox_type_list\000", 1139954409)
		methodTheme[14] = classDB.get_method_bind("Theme\000", "set_font\000", 177292320)
		methodTheme[15] = classDB.get_method_bind("Theme\000", "get_font\000", 3445063586)
		methodTheme[16] = classDB.get_method_bind("Theme\000", "has_font\000", 471820014)
		methodTheme[17] = classDB.get_method_bind("Theme\000", "rename_font\000", 642128662)
		methodTheme[18] = classDB.get_method_bind("Theme\000", "clear_font\000", 3740211285)
		methodTheme[19] = classDB.get_method_bind("Theme\000", "get_font_list\000", 4291131558)
		methodTheme[20] = classDB.get_method_bind("Theme\000", "get_font_type_list\000", 1139954409)
		methodTheme[21] = classDB.get_method_bind("Theme\000", "set_font_size\000", 281601298)
		methodTheme[22] = classDB.get_method_bind("Theme\000", "get_font_size\000", 2419549490)
		methodTheme[23] = classDB.get_method_bind("Theme\000", "has_font_size\000", 471820014)
		methodTheme[24] = classDB.get_method_bind("Theme\000", "rename_font_size\000", 642128662)
		methodTheme[25] = classDB.get_method_bind("Theme\000", "clear_font_size\000", 3740211285)
		methodTheme[26] = classDB.get_method_bind("Theme\000", "get_font_size_list\000", 4291131558)
		methodTheme[27] = classDB.get_method_bind("Theme\000", "get_font_size_type_list\000", 1139954409)
		methodTheme[28] = classDB.get_method_bind("Theme\000", "set_color\000", 4111215154)
		methodTheme[29] = classDB.get_method_bind("Theme\000", "get_color\000", 2015923404)
		methodTheme[30] = classDB.get_method_bind("Theme\000", "has_color\000", 471820014)
		methodTheme[31] = classDB.get_method_bind("Theme\000", "rename_color\000", 642128662)
		methodTheme[32] = classDB.get_method_bind("Theme\000", "clear_color\000", 3740211285)
		methodTheme[33] = classDB.get_method_bind("Theme\000", "get_color_list\000", 4291131558)
		methodTheme[34] = classDB.get_method_bind("Theme\000", "get_color_type_list\000", 1139954409)
		methodTheme[35] = classDB.get_method_bind("Theme\000", "set_constant\000", 281601298)
		methodTheme[36] = classDB.get_method_bind("Theme\000", "get_constant\000", 2419549490)
		methodTheme[37] = classDB.get_method_bind("Theme\000", "has_constant\000", 471820014)
		methodTheme[38] = classDB.get_method_bind("Theme\000", "rename_constant\000", 642128662)
		methodTheme[39] = classDB.get_method_bind("Theme\000", "clear_constant\000", 3740211285)
		methodTheme[40] = classDB.get_method_bind("Theme\000", "get_constant_list\000", 4291131558)
		methodTheme[41] = classDB.get_method_bind("Theme\000", "get_constant_type_list\000", 1139954409)
		methodTheme[42] = classDB.get_method_bind("Theme\000", "set_default_base_scale\000", 373806689)
		methodTheme[43] = classDB.get_method_bind("Theme\000", "get_default_base_scale\000", 1740695150)
		methodTheme[44] = classDB.get_method_bind("Theme\000", "has_default_base_scale\000", 36873697)
		methodTheme[45] = classDB.get_method_bind("Theme\000", "set_default_font\000", 1262170328)
		methodTheme[46] = classDB.get_method_bind("Theme\000", "get_default_font\000", 3229501585)
		methodTheme[47] = classDB.get_method_bind("Theme\000", "has_default_font\000", 36873697)
		methodTheme[48] = classDB.get_method_bind("Theme\000", "set_default_font_size\000", 1286410249)
		methodTheme[49] = classDB.get_method_bind("Theme\000", "get_default_font_size\000", 3905245786)
		methodTheme[50] = classDB.get_method_bind("Theme\000", "has_default_font_size\000", 36873697)
		methodTheme[51] = classDB.get_method_bind("Theme\000", "set_theme_item\000", 2492983623)
		methodTheme[52] = classDB.get_method_bind("Theme\000", "get_theme_item\000", 2191024021)
		methodTheme[53] = classDB.get_method_bind("Theme\000", "has_theme_item\000", 1739311056)
		methodTheme[54] = classDB.get_method_bind("Theme\000", "rename_theme_item\000", 3900867553)
		methodTheme[55] = classDB.get_method_bind("Theme\000", "clear_theme_item\000", 2965505587)
		methodTheme[56] = classDB.get_method_bind("Theme\000", "get_theme_item_list\000", 3726716710)
		methodTheme[57] = classDB.get_method_bind("Theme\000", "get_theme_item_type_list\000", 1316004935)
		methodTheme[58] = classDB.get_method_bind("Theme\000", "set_type_variation\000", 3740211285)
		methodTheme[59] = classDB.get_method_bind("Theme\000", "is_type_variation\000", 471820014)
		methodTheme[60] = classDB.get_method_bind("Theme\000", "clear_type_variation\000", 3304788590)
		methodTheme[61] = classDB.get_method_bind("Theme\000", "get_type_variation_base\000", 1965194235)
		methodTheme[62] = classDB.get_method_bind("Theme\000", "get_type_variation_list\000", 1761182771)
		methodTheme[63] = classDB.get_method_bind("Theme\000", "add_type\000", 3304788590)
		methodTheme[64] = classDB.get_method_bind("Theme\000", "remove_type\000", 3304788590)
		methodTheme[65] = classDB.get_method_bind("Theme\000", "get_type_list\000", 1139954409)
		methodTheme[66] = classDB.get_method_bind("Theme\000", "merge_with\000", 2326690814)
		methodTheme[67] = classDB.get_method_bind("Theme\000", "clear\000", 3218959716)
		methodThread[0] = classDB.get_method_bind("Thread\000", "start\000", 2779832528)
		methodThread[1] = classDB.get_method_bind("Thread\000", "get_id\000", 201670096)
		methodThread[2] = classDB.get_method_bind("Thread\000", "is_started\000", 36873697)
		methodThread[3] = classDB.get_method_bind("Thread\000", "is_alive\000", 36873697)
		methodThread[4] = classDB.get_method_bind("Thread\000", "wait_to_finish\000", 1460262497)
		methodTileData[0] = classDB.get_method_bind("TileData\000", "set_flip_h\000", 2586408642)
		methodTileData[1] = classDB.get_method_bind("TileData\000", "get_flip_h\000", 36873697)
		methodTileData[2] = classDB.get_method_bind("TileData\000", "set_flip_v\000", 2586408642)
		methodTileData[3] = classDB.get_method_bind("TileData\000", "get_flip_v\000", 36873697)
		methodTileData[4] = classDB.get_method_bind("TileData\000", "set_transpose\000", 2586408642)
		methodTileData[5] = classDB.get_method_bind("TileData\000", "get_transpose\000", 36873697)
		methodTileData[6] = classDB.get_method_bind("TileData\000", "set_material\000", 2757459619)
		methodTileData[7] = classDB.get_method_bind("TileData\000", "get_material\000", 5934680)
		methodTileData[8] = classDB.get_method_bind("TileData\000", "set_texture_offset\000", 1130785943)
		methodTileData[9] = classDB.get_method_bind("TileData\000", "get_texture_offset\000", 3690982128)
		methodTileData[10] = classDB.get_method_bind("TileData\000", "set_modulate\000", 2920490490)
		methodTileData[11] = classDB.get_method_bind("TileData\000", "get_modulate\000", 3444240500)
		methodTileData[12] = classDB.get_method_bind("TileData\000", "set_z_index\000", 1286410249)
		methodTileData[13] = classDB.get_method_bind("TileData\000", "get_z_index\000", 3905245786)
		methodTileData[14] = classDB.get_method_bind("TileData\000", "set_y_sort_origin\000", 1286410249)
		methodTileData[15] = classDB.get_method_bind("TileData\000", "get_y_sort_origin\000", 3905245786)
		methodTileData[16] = classDB.get_method_bind("TileData\000", "set_occluder\000", 914399637)
		methodTileData[17] = classDB.get_method_bind("TileData\000", "get_occluder\000", 2458574231)
		methodTileData[18] = classDB.get_method_bind("TileData\000", "set_constant_linear_velocity\000", 163021252)
		methodTileData[19] = classDB.get_method_bind("TileData\000", "get_constant_linear_velocity\000", 2299179447)
		methodTileData[20] = classDB.get_method_bind("TileData\000", "set_constant_angular_velocity\000", 1602489585)
		methodTileData[21] = classDB.get_method_bind("TileData\000", "get_constant_angular_velocity\000", 2339986948)
		methodTileData[22] = classDB.get_method_bind("TileData\000", "set_collision_polygons_count\000", 3937882851)
		methodTileData[23] = classDB.get_method_bind("TileData\000", "get_collision_polygons_count\000", 923996154)
		methodTileData[24] = classDB.get_method_bind("TileData\000", "add_collision_polygon\000", 1286410249)
		methodTileData[25] = classDB.get_method_bind("TileData\000", "remove_collision_polygon\000", 3937882851)
		methodTileData[26] = classDB.get_method_bind("TileData\000", "set_collision_polygon_points\000", 3230546541)
		methodTileData[27] = classDB.get_method_bind("TileData\000", "get_collision_polygon_points\000", 103942801)
		methodTileData[28] = classDB.get_method_bind("TileData\000", "set_collision_polygon_one_way\000", 1383440665)
		methodTileData[29] = classDB.get_method_bind("TileData\000", "is_collision_polygon_one_way\000", 2522259332)
		methodTileData[30] = classDB.get_method_bind("TileData\000", "set_collision_polygon_one_way_margin\000", 3506521499)
		methodTileData[31] = classDB.get_method_bind("TileData\000", "get_collision_polygon_one_way_margin\000", 3085491603)
		methodTileData[32] = classDB.get_method_bind("TileData\000", "set_terrain_set\000", 1286410249)
		methodTileData[33] = classDB.get_method_bind("TileData\000", "get_terrain_set\000", 3905245786)
		methodTileData[34] = classDB.get_method_bind("TileData\000", "set_terrain\000", 1286410249)
		methodTileData[35] = classDB.get_method_bind("TileData\000", "get_terrain\000", 3905245786)
		methodTileData[36] = classDB.get_method_bind("TileData\000", "set_terrain_peering_bit\000", 1084452308)
		methodTileData[37] = classDB.get_method_bind("TileData\000", "get_terrain_peering_bit\000", 3831796792)
		methodTileData[38] = classDB.get_method_bind("TileData\000", "set_navigation_polygon\000", 2224691167)
		methodTileData[39] = classDB.get_method_bind("TileData\000", "get_navigation_polygon\000", 3991786031)
		methodTileData[40] = classDB.get_method_bind("TileData\000", "set_probability\000", 373806689)
		methodTileData[41] = classDB.get_method_bind("TileData\000", "get_probability\000", 1740695150)
		methodTileData[42] = classDB.get_method_bind("TileData\000", "set_custom_data\000", 402577236)
		methodTileData[43] = classDB.get_method_bind("TileData\000", "get_custom_data\000", 1868160156)
		methodTileData[44] = classDB.get_method_bind("TileData\000", "set_custom_data_by_layer_id\000", 2152698145)
		methodTileData[45] = classDB.get_method_bind("TileData\000", "get_custom_data_by_layer_id\000", 4227898402)
		methodTileMap[0] = classDB.get_method_bind("TileMap\000", "set_tileset\000", 774531446)
		methodTileMap[1] = classDB.get_method_bind("TileMap\000", "get_tileset\000", 2678226422)
		methodTileMap[2] = classDB.get_method_bind("TileMap\000", "set_quadrant_size\000", 1286410249)
		methodTileMap[3] = classDB.get_method_bind("TileMap\000", "get_quadrant_size\000", 3905245786)
		methodTileMap[4] = classDB.get_method_bind("TileMap\000", "get_layers_count\000", 3905245786)
		methodTileMap[5] = classDB.get_method_bind("TileMap\000", "add_layer\000", 1286410249)
		methodTileMap[6] = classDB.get_method_bind("TileMap\000", "move_layer\000", 3937882851)
		methodTileMap[7] = classDB.get_method_bind("TileMap\000", "remove_layer\000", 1286410249)
		methodTileMap[8] = classDB.get_method_bind("TileMap\000", "set_layer_name\000", 501894301)
		methodTileMap[9] = classDB.get_method_bind("TileMap\000", "get_layer_name\000", 844755477)
		methodTileMap[10] = classDB.get_method_bind("TileMap\000", "set_layer_enabled\000", 300928843)
		methodTileMap[11] = classDB.get_method_bind("TileMap\000", "is_layer_enabled\000", 1116898809)
		methodTileMap[12] = classDB.get_method_bind("TileMap\000", "set_layer_modulate\000", 2878471219)
		methodTileMap[13] = classDB.get_method_bind("TileMap\000", "get_layer_modulate\000", 3457211756)
		methodTileMap[14] = classDB.get_method_bind("TileMap\000", "set_layer_y_sort_enabled\000", 300928843)
		methodTileMap[15] = classDB.get_method_bind("TileMap\000", "is_layer_y_sort_enabled\000", 1116898809)
		methodTileMap[16] = classDB.get_method_bind("TileMap\000", "set_layer_y_sort_origin\000", 3937882851)
		methodTileMap[17] = classDB.get_method_bind("TileMap\000", "get_layer_y_sort_origin\000", 923996154)
		methodTileMap[18] = classDB.get_method_bind("TileMap\000", "set_layer_z_index\000", 3937882851)
		methodTileMap[19] = classDB.get_method_bind("TileMap\000", "get_layer_z_index\000", 923996154)
		methodTileMap[20] = classDB.get_method_bind("TileMap\000", "set_collision_animatable\000", 2586408642)
		methodTileMap[21] = classDB.get_method_bind("TileMap\000", "is_collision_animatable\000", 36873697)
		methodTileMap[22] = classDB.get_method_bind("TileMap\000", "set_collision_visibility_mode\000", 3193440636)
		methodTileMap[23] = classDB.get_method_bind("TileMap\000", "get_collision_visibility_mode\000", 2026313073)
		methodTileMap[24] = classDB.get_method_bind("TileMap\000", "set_navigation_visibility_mode\000", 3193440636)
		methodTileMap[25] = classDB.get_method_bind("TileMap\000", "get_navigation_visibility_mode\000", 2026313073)
		methodTileMap[26] = classDB.get_method_bind("TileMap\000", "set_cell\000", 1732664643)
		methodTileMap[27] = classDB.get_method_bind("TileMap\000", "erase_cell\000", 2311374912)
		methodTileMap[28] = classDB.get_method_bind("TileMap\000", "get_cell_source_id\000", 551761942)
		methodTileMap[29] = classDB.get_method_bind("TileMap\000", "get_cell_atlas_coords\000", 1869815066)
		methodTileMap[30] = classDB.get_method_bind("TileMap\000", "get_cell_alternative_tile\000", 551761942)
		methodTileMap[31] = classDB.get_method_bind("TileMap\000", "get_cell_tile_data\000", 2849631287)
		methodTileMap[32] = classDB.get_method_bind("TileMap\000", "get_coords_for_body_rid\000", 291584212)
		methodTileMap[33] = classDB.get_method_bind("TileMap\000", "get_pattern\000", 2833570986)
		methodTileMap[34] = classDB.get_method_bind("TileMap\000", "map_pattern\000", 1864516957)
		methodTileMap[35] = classDB.get_method_bind("TileMap\000", "set_pattern\000", 1195853946)
		methodTileMap[36] = classDB.get_method_bind("TileMap\000", "set_cells_terrain_connect\000", 3072115677)
		methodTileMap[37] = classDB.get_method_bind("TileMap\000", "set_cells_terrain_path\000", 3072115677)
		methodTileMap[38] = classDB.get_method_bind("TileMap\000", "fix_invalid_tiles\000", 3218959716)
		methodTileMap[39] = classDB.get_method_bind("TileMap\000", "clear_layer\000", 1286410249)
		methodTileMap[40] = classDB.get_method_bind("TileMap\000", "clear\000", 3218959716)
		methodTileMap[41] = classDB.get_method_bind("TileMap\000", "force_update\000", 1025054187)
		methodTileMap[42] = classDB.get_method_bind("TileMap\000", "get_surrounding_tiles\000", 2673526557)
		methodTileMap[43] = classDB.get_method_bind("TileMap\000", "get_used_cells\000", 663333327)
		methodTileMap[44] = classDB.get_method_bind("TileMap\000", "get_used_rect\000", 3248174)
		methodTileMap[45] = classDB.get_method_bind("TileMap\000", "map_to_world\000", 108438297)
		methodTileMap[46] = classDB.get_method_bind("TileMap\000", "world_to_map\000", 837806996)
		methodTileMap[47] = classDB.get_method_bind("TileMap\000", "get_neighbor_cell\000", 986575103)
		methodTileMapPattern[0] = classDB.get_method_bind("TileMapPattern\000", "set_cell\000", 634000503)
		methodTileMapPattern[1] = classDB.get_method_bind("TileMapPattern\000", "has_cell\000", 3900751641)
		methodTileMapPattern[2] = classDB.get_method_bind("TileMapPattern\000", "remove_cell\000", 4153096796)
		methodTileMapPattern[3] = classDB.get_method_bind("TileMapPattern\000", "get_cell_source_id\000", 2485466453)
		methodTileMapPattern[4] = classDB.get_method_bind("TileMapPattern\000", "get_cell_atlas_coords\000", 3050897911)
		methodTileMapPattern[5] = classDB.get_method_bind("TileMapPattern\000", "get_cell_alternative_tile\000", 2485466453)
		methodTileMapPattern[6] = classDB.get_method_bind("TileMapPattern\000", "get_used_cells\000", 3995934104)
		methodTileMapPattern[7] = classDB.get_method_bind("TileMapPattern\000", "get_size\000", 3690982128)
		methodTileMapPattern[8] = classDB.get_method_bind("TileMapPattern\000", "set_size\000", 1130785943)
		methodTileMapPattern[9] = classDB.get_method_bind("TileMapPattern\000", "is_empty\000", 36873697)
		methodTileSet[0] = classDB.get_method_bind("TileSet\000", "get_next_source_id\000", 3905245786)
		methodTileSet[1] = classDB.get_method_bind("TileSet\000", "add_source\000", 276991387)
		methodTileSet[2] = classDB.get_method_bind("TileSet\000", "remove_source\000", 1286410249)
		methodTileSet[3] = classDB.get_method_bind("TileSet\000", "set_source_id\000", 3937882851)
		methodTileSet[4] = classDB.get_method_bind("TileSet\000", "get_source_count\000", 3905245786)
		methodTileSet[5] = classDB.get_method_bind("TileSet\000", "get_source_id\000", 923996154)
		methodTileSet[6] = classDB.get_method_bind("TileSet\000", "has_source\000", 1116898809)
		methodTileSet[7] = classDB.get_method_bind("TileSet\000", "get_source\000", 1763540252)
		methodTileSet[8] = classDB.get_method_bind("TileSet\000", "set_tile_shape\000", 2131427112)
		methodTileSet[9] = classDB.get_method_bind("TileSet\000", "get_tile_shape\000", 716918169)
		methodTileSet[10] = classDB.get_method_bind("TileSet\000", "set_tile_layout\000", 1071216679)
		methodTileSet[11] = classDB.get_method_bind("TileSet\000", "get_tile_layout\000", 194628839)
		methodTileSet[12] = classDB.get_method_bind("TileSet\000", "set_tile_offset_axis\000", 3300198521)
		methodTileSet[13] = classDB.get_method_bind("TileSet\000", "get_tile_offset_axis\000", 762494114)
		methodTileSet[14] = classDB.get_method_bind("TileSet\000", "set_tile_size\000", 1130785943)
		methodTileSet[15] = classDB.get_method_bind("TileSet\000", "get_tile_size\000", 3690982128)
		methodTileSet[16] = classDB.get_method_bind("TileSet\000", "set_uv_clipping\000", 2586408642)
		methodTileSet[17] = classDB.get_method_bind("TileSet\000", "is_uv_clipping\000", 36873697)
		methodTileSet[18] = classDB.get_method_bind("TileSet\000", "get_occlusion_layers_count\000", 3905245786)
		methodTileSet[19] = classDB.get_method_bind("TileSet\000", "add_occlusion_layer\000", 1025054187)
		methodTileSet[20] = classDB.get_method_bind("TileSet\000", "move_occlusion_layer\000", 3937882851)
		methodTileSet[21] = classDB.get_method_bind("TileSet\000", "remove_occlusion_layer\000", 1286410249)
		methodTileSet[22] = classDB.get_method_bind("TileSet\000", "set_occlusion_layer_light_mask\000", 3937882851)
		methodTileSet[23] = classDB.get_method_bind("TileSet\000", "get_occlusion_layer_light_mask\000", 923996154)
		methodTileSet[24] = classDB.get_method_bind("TileSet\000", "set_occlusion_layer_sdf_collision\000", 300928843)
		methodTileSet[25] = classDB.get_method_bind("TileSet\000", "get_occlusion_layer_sdf_collision\000", 1116898809)
		methodTileSet[26] = classDB.get_method_bind("TileSet\000", "get_physics_layers_count\000", 3905245786)
		methodTileSet[27] = classDB.get_method_bind("TileSet\000", "add_physics_layer\000", 1025054187)
		methodTileSet[28] = classDB.get_method_bind("TileSet\000", "move_physics_layer\000", 3937882851)
		methodTileSet[29] = classDB.get_method_bind("TileSet\000", "remove_physics_layer\000", 1286410249)
		methodTileSet[30] = classDB.get_method_bind("TileSet\000", "set_physics_layer_collision_layer\000", 3937882851)
		methodTileSet[31] = classDB.get_method_bind("TileSet\000", "get_physics_layer_collision_layer\000", 923996154)
		methodTileSet[32] = classDB.get_method_bind("TileSet\000", "set_physics_layer_collision_mask\000", 3937882851)
		methodTileSet[33] = classDB.get_method_bind("TileSet\000", "get_physics_layer_collision_mask\000", 923996154)
		methodTileSet[34] = classDB.get_method_bind("TileSet\000", "set_physics_layer_physics_material\000", 1018687357)
		methodTileSet[35] = classDB.get_method_bind("TileSet\000", "get_physics_layer_physics_material\000", 788318639)
		methodTileSet[36] = classDB.get_method_bind("TileSet\000", "get_terrain_sets_count\000", 3905245786)
		methodTileSet[37] = classDB.get_method_bind("TileSet\000", "add_terrain_set\000", 1025054187)
		methodTileSet[38] = classDB.get_method_bind("TileSet\000", "move_terrain_set\000", 3937882851)
		methodTileSet[39] = classDB.get_method_bind("TileSet\000", "remove_terrain_set\000", 1286410249)
		methodTileSet[40] = classDB.get_method_bind("TileSet\000", "set_terrain_set_mode\000", 3943003916)
		methodTileSet[41] = classDB.get_method_bind("TileSet\000", "get_terrain_set_mode\000", 2084469411)
		methodTileSet[42] = classDB.get_method_bind("TileSet\000", "get_terrains_count\000", 923996154)
		methodTileSet[43] = classDB.get_method_bind("TileSet\000", "add_terrain\000", 3023605688)
		methodTileSet[44] = classDB.get_method_bind("TileSet\000", "move_terrain\000", 1649997291)
		methodTileSet[45] = classDB.get_method_bind("TileSet\000", "remove_terrain\000", 3937882851)
		methodTileSet[46] = classDB.get_method_bind("TileSet\000", "set_terrain_name\000", 2285447957)
		methodTileSet[47] = classDB.get_method_bind("TileSet\000", "get_terrain_name\000", 1391810591)
		methodTileSet[48] = classDB.get_method_bind("TileSet\000", "set_terrain_color\000", 3733378741)
		methodTileSet[49] = classDB.get_method_bind("TileSet\000", "get_terrain_color\000", 2165839948)
		methodTileSet[50] = classDB.get_method_bind("TileSet\000", "get_navigation_layers_count\000", 3905245786)
		methodTileSet[51] = classDB.get_method_bind("TileSet\000", "add_navigation_layer\000", 1025054187)
		methodTileSet[52] = classDB.get_method_bind("TileSet\000", "move_navigation_layer\000", 3937882851)
		methodTileSet[53] = classDB.get_method_bind("TileSet\000", "remove_navigation_layer\000", 1286410249)
		methodTileSet[54] = classDB.get_method_bind("TileSet\000", "set_navigation_layer_layers\000", 3937882851)
		methodTileSet[55] = classDB.get_method_bind("TileSet\000", "get_navigation_layer_layers\000", 923996154)
		methodTileSet[56] = classDB.get_method_bind("TileSet\000", "get_custom_data_layers_count\000", 3905245786)
		methodTileSet[57] = classDB.get_method_bind("TileSet\000", "add_custom_data_layer\000", 1025054187)
		methodTileSet[58] = classDB.get_method_bind("TileSet\000", "move_custom_data_layer\000", 3937882851)
		methodTileSet[59] = classDB.get_method_bind("TileSet\000", "remove_custom_data_layer\000", 1286410249)
		methodTileSet[60] = classDB.get_method_bind("TileSet\000", "get_custom_data_layer_by_name\000", 1321353865)
		methodTileSet[61] = classDB.get_method_bind("TileSet\000", "set_custom_data_layer_name\000", 501894301)
		methodTileSet[62] = classDB.get_method_bind("TileSet\000", "get_custom_data_layer_name\000", 844755477)
		methodTileSet[63] = classDB.get_method_bind("TileSet\000", "set_custom_data_layer_type\000", 3492912874)
		methodTileSet[64] = classDB.get_method_bind("TileSet\000", "get_custom_data_layer_type\000", 2990820875)
		methodTileSet[65] = classDB.get_method_bind("TileSet\000", "set_source_level_tile_proxy\000", 3937882851)
		methodTileSet[66] = classDB.get_method_bind("TileSet\000", "get_source_level_tile_proxy\000", 3744713108)
		methodTileSet[67] = classDB.get_method_bind("TileSet\000", "has_source_level_tile_proxy\000", 3067735520)
		methodTileSet[68] = classDB.get_method_bind("TileSet\000", "remove_source_level_tile_proxy\000", 1286410249)
		methodTileSet[69] = classDB.get_method_bind("TileSet\000", "set_coords_level_tile_proxy\000", 1769939278)
		methodTileSet[70] = classDB.get_method_bind("TileSet\000", "get_coords_level_tile_proxy\000", 2856536371)
		methodTileSet[71] = classDB.get_method_bind("TileSet\000", "has_coords_level_tile_proxy\000", 3957903770)
		methodTileSet[72] = classDB.get_method_bind("TileSet\000", "remove_coords_level_tile_proxy\000", 2311374912)
		methodTileSet[73] = classDB.get_method_bind("TileSet\000", "set_alternative_level_tile_proxy\000", 3862385460)
		methodTileSet[74] = classDB.get_method_bind("TileSet\000", "get_alternative_level_tile_proxy\000", 2303761075)
		methodTileSet[75] = classDB.get_method_bind("TileSet\000", "has_alternative_level_tile_proxy\000", 180086755)
		methodTileSet[76] = classDB.get_method_bind("TileSet\000", "remove_alternative_level_tile_proxy\000", 2328951467)
		methodTileSet[77] = classDB.get_method_bind("TileSet\000", "map_tile_proxy\000", 4267935328)
		methodTileSet[78] = classDB.get_method_bind("TileSet\000", "cleanup_invalid_tile_proxies\000", 3218959716)
		methodTileSet[79] = classDB.get_method_bind("TileSet\000", "clear_tile_proxies\000", 3218959716)
		methodTileSet[80] = classDB.get_method_bind("TileSet\000", "add_pattern\000", 3009264082)
		methodTileSet[81] = classDB.get_method_bind("TileSet\000", "get_pattern\000", 4207737510)
		methodTileSet[82] = classDB.get_method_bind("TileSet\000", "remove_pattern\000", 1286410249)
		methodTileSet[83] = classDB.get_method_bind("TileSet\000", "get_patterns_count\000", 2455072627)
		methodTileSetAtlasSource[0] = classDB.get_method_bind("TileSetAtlasSource\000", "set_texture\000", 4051416890)
		methodTileSetAtlasSource[1] = classDB.get_method_bind("TileSetAtlasSource\000", "get_texture\000", 3635182373)
		methodTileSetAtlasSource[2] = classDB.get_method_bind("TileSetAtlasSource\000", "set_margins\000", 1130785943)
		methodTileSetAtlasSource[3] = classDB.get_method_bind("TileSetAtlasSource\000", "get_margins\000", 3690982128)
		methodTileSetAtlasSource[4] = classDB.get_method_bind("TileSetAtlasSource\000", "set_separation\000", 1130785943)
		methodTileSetAtlasSource[5] = classDB.get_method_bind("TileSetAtlasSource\000", "get_separation\000", 3690982128)
		methodTileSetAtlasSource[6] = classDB.get_method_bind("TileSetAtlasSource\000", "set_texture_region_size\000", 1130785943)
		methodTileSetAtlasSource[7] = classDB.get_method_bind("TileSetAtlasSource\000", "get_texture_region_size\000", 3690982128)
		methodTileSetAtlasSource[8] = classDB.get_method_bind("TileSetAtlasSource\000", "set_use_texture_padding\000", 2586408642)
		methodTileSetAtlasSource[9] = classDB.get_method_bind("TileSetAtlasSource\000", "get_use_texture_padding\000", 36873697)
		methodTileSetAtlasSource[10] = classDB.get_method_bind("TileSetAtlasSource\000", "create_tile\000", 1583819816)
		methodTileSetAtlasSource[11] = classDB.get_method_bind("TileSetAtlasSource\000", "remove_tile\000", 1130785943)
		methodTileSetAtlasSource[12] = classDB.get_method_bind("TileSetAtlasSource\000", "move_tile_in_atlas\000", 1375626516)
		methodTileSetAtlasSource[13] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_size_in_atlas\000", 3050897911)
		methodTileSetAtlasSource[14] = classDB.get_method_bind("TileSetAtlasSource\000", "has_room_for_tile\000", 4182444377)
		methodTileSetAtlasSource[15] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tiles_to_be_removed_on_change\000", 1240378054)
		methodTileSetAtlasSource[16] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_at_coords\000", 3050897911)
		methodTileSetAtlasSource[17] = classDB.get_method_bind("TileSetAtlasSource\000", "set_tile_animation_columns\000", 3200960707)
		methodTileSetAtlasSource[18] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_columns\000", 2485466453)
		methodTileSetAtlasSource[19] = classDB.get_method_bind("TileSetAtlasSource\000", "set_tile_animation_separation\000", 1941061099)
		methodTileSetAtlasSource[20] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_separation\000", 3050897911)
		methodTileSetAtlasSource[21] = classDB.get_method_bind("TileSetAtlasSource\000", "set_tile_animation_speed\000", 2262553149)
		methodTileSetAtlasSource[22] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_speed\000", 719993801)
		methodTileSetAtlasSource[23] = classDB.get_method_bind("TileSetAtlasSource\000", "set_tile_animation_frames_count\000", 3200960707)
		methodTileSetAtlasSource[24] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_frames_count\000", 2485466453)
		methodTileSetAtlasSource[25] = classDB.get_method_bind("TileSetAtlasSource\000", "set_tile_animation_frame_duration\000", 2843487787)
		methodTileSetAtlasSource[26] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_frame_duration\000", 1802448425)
		methodTileSetAtlasSource[27] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_animation_total_duration\000", 719993801)
		methodTileSetAtlasSource[28] = classDB.get_method_bind("TileSetAtlasSource\000", "create_alternative_tile\000", 3531100812)
		methodTileSetAtlasSource[29] = classDB.get_method_bind("TileSetAtlasSource\000", "remove_alternative_tile\000", 3200960707)
		methodTileSetAtlasSource[30] = classDB.get_method_bind("TileSetAtlasSource\000", "set_alternative_tile_id\000", 1499785778)
		methodTileSetAtlasSource[31] = classDB.get_method_bind("TileSetAtlasSource\000", "get_next_alternative_tile_id\000", 2485466453)
		methodTileSetAtlasSource[32] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_data\000", 3534028207)
		methodTileSetAtlasSource[33] = classDB.get_method_bind("TileSetAtlasSource\000", "get_atlas_grid_size\000", 3690982128)
		methodTileSetAtlasSource[34] = classDB.get_method_bind("TileSetAtlasSource\000", "get_tile_texture_region\000", 1321423751)
		methodTileSetAtlasSource[35] = classDB.get_method_bind("TileSetAtlasSource\000", "get_runtime_texture\000", 3635182373)
		methodTileSetAtlasSource[36] = classDB.get_method_bind("TileSetAtlasSource\000", "get_runtime_tile_texture_region\000", 104874263)
		methodTileSetScenesCollectionSource[0] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "get_scene_tiles_count\000", 2455072627)
		methodTileSetScenesCollectionSource[1] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "get_scene_tile_id\000", 3744713108)
		methodTileSetScenesCollectionSource[2] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "has_scene_tile_id\000", 3067735520)
		methodTileSetScenesCollectionSource[3] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "create_scene_tile\000", 2633389122)
		methodTileSetScenesCollectionSource[4] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "set_scene_tile_id\000", 3937882851)
		methodTileSetScenesCollectionSource[5] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "set_scene_tile_scene\000", 3435852839)
		methodTileSetScenesCollectionSource[6] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "get_scene_tile_scene\000", 511017218)
		methodTileSetScenesCollectionSource[7] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "set_scene_tile_display_placeholder\000", 300928843)
		methodTileSetScenesCollectionSource[8] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "get_scene_tile_display_placeholder\000", 1116898809)
		methodTileSetScenesCollectionSource[9] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "remove_scene_tile\000", 1286410249)
		methodTileSetScenesCollectionSource[10] = classDB.get_method_bind("TileSetScenesCollectionSource\000", "get_next_scene_tile_id\000", 3905245786)
		methodTileSetSource[0] = classDB.get_method_bind("TileSetSource\000", "get_tiles_count\000", 3905245786)
		methodTileSetSource[1] = classDB.get_method_bind("TileSetSource\000", "get_tile_id\000", 880721226)
		methodTileSetSource[2] = classDB.get_method_bind("TileSetSource\000", "has_tile\000", 3900751641)
		methodTileSetSource[3] = classDB.get_method_bind("TileSetSource\000", "get_alternative_tiles_count\000", 2485466453)
		methodTileSetSource[4] = classDB.get_method_bind("TileSetSource\000", "get_alternative_tile_id\000", 89881719)
		methodTileSetSource[5] = classDB.get_method_bind("TileSetSource\000", "has_alternative_tile\000", 1073731340)
		methodTimeSingleton[0] = classDB.get_method_bind("Time\000", "get_datetime_dict_from_unix_time\000", 3485342025)
		methodTimeSingleton[1] = classDB.get_method_bind("Time\000", "get_date_dict_from_unix_time\000", 3485342025)
		methodTimeSingleton[2] = classDB.get_method_bind("Time\000", "get_time_dict_from_unix_time\000", 3485342025)
		methodTimeSingleton[3] = classDB.get_method_bind("Time\000", "get_datetime_string_from_unix_time\000", 2311239925)
		methodTimeSingleton[4] = classDB.get_method_bind("Time\000", "get_date_string_from_unix_time\000", 844755477)
		methodTimeSingleton[5] = classDB.get_method_bind("Time\000", "get_time_string_from_unix_time\000", 844755477)
		methodTimeSingleton[6] = classDB.get_method_bind("Time\000", "get_datetime_dict_from_datetime_string\000", 3253569256)
		methodTimeSingleton[7] = classDB.get_method_bind("Time\000", "get_datetime_string_from_datetime_dict\000", 1898123706)
		methodTimeSingleton[8] = classDB.get_method_bind("Time\000", "get_unix_time_from_datetime_dict\000", 3021115443)
		methodTimeSingleton[9] = classDB.get_method_bind("Time\000", "get_unix_time_from_datetime_string\000", 1321353865)
		methodTimeSingleton[10] = classDB.get_method_bind("Time\000", "get_offset_string_from_offset_minutes\000", 844755477)
		methodTimeSingleton[11] = classDB.get_method_bind("Time\000", "get_datetime_dict_from_system\000", 205769976)
		methodTimeSingleton[12] = classDB.get_method_bind("Time\000", "get_date_dict_from_system\000", 205769976)
		methodTimeSingleton[13] = classDB.get_method_bind("Time\000", "get_time_dict_from_system\000", 205769976)
		methodTimeSingleton[14] = classDB.get_method_bind("Time\000", "get_datetime_string_from_system\000", 1136425492)
		methodTimeSingleton[15] = classDB.get_method_bind("Time\000", "get_date_string_from_system\000", 1162154673)
		methodTimeSingleton[16] = classDB.get_method_bind("Time\000", "get_time_string_from_system\000", 1162154673)
		methodTimeSingleton[17] = classDB.get_method_bind("Time\000", "get_time_zone_from_system\000", 3102165223)
		methodTimeSingleton[18] = classDB.get_method_bind("Time\000", "get_unix_time_from_system\000", 1740695150)
		methodTimeSingleton[19] = classDB.get_method_bind("Time\000", "get_ticks_msec\000", 3905245786)
		methodTimeSingleton[20] = classDB.get_method_bind("Time\000", "get_ticks_usec\000", 3905245786)
		methodTimer[0] = classDB.get_method_bind("Timer\000", "set_wait_time\000", 373806689)
		methodTimer[1] = classDB.get_method_bind("Timer\000", "get_wait_time\000", 1740695150)
		methodTimer[2] = classDB.get_method_bind("Timer\000", "set_one_shot\000", 2586408642)
		methodTimer[3] = classDB.get_method_bind("Timer\000", "is_one_shot\000", 36873697)
		methodTimer[4] = classDB.get_method_bind("Timer\000", "set_autostart\000", 2586408642)
		methodTimer[5] = classDB.get_method_bind("Timer\000", "has_autostart\000", 36873697)
		methodTimer[6] = classDB.get_method_bind("Timer\000", "start\000", 1392008558)
		methodTimer[7] = classDB.get_method_bind("Timer\000", "stop\000", 3218959716)
		methodTimer[8] = classDB.get_method_bind("Timer\000", "set_paused\000", 2586408642)
		methodTimer[9] = classDB.get_method_bind("Timer\000", "is_paused\000", 36873697)
		methodTimer[10] = classDB.get_method_bind("Timer\000", "is_stopped\000", 36873697)
		methodTimer[11] = classDB.get_method_bind("Timer\000", "get_time_left\000", 1740695150)
		methodTimer[12] = classDB.get_method_bind("Timer\000", "set_timer_process_callback\000", 3469495063)
		methodTimer[13] = classDB.get_method_bind("Timer\000", "get_timer_process_callback\000", 2672570227)
		methodTorusMesh[0] = classDB.get_method_bind("TorusMesh\000", "set_inner_radius\000", 373806689)
		methodTorusMesh[1] = classDB.get_method_bind("TorusMesh\000", "get_inner_radius\000", 1740695150)
		methodTorusMesh[2] = classDB.get_method_bind("TorusMesh\000", "set_outer_radius\000", 373806689)
		methodTorusMesh[3] = classDB.get_method_bind("TorusMesh\000", "get_outer_radius\000", 1740695150)
		methodTorusMesh[4] = classDB.get_method_bind("TorusMesh\000", "set_rings\000", 1286410249)
		methodTorusMesh[5] = classDB.get_method_bind("TorusMesh\000", "get_rings\000", 3905245786)
		methodTorusMesh[6] = classDB.get_method_bind("TorusMesh\000", "set_ring_segments\000", 1286410249)
		methodTorusMesh[7] = classDB.get_method_bind("TorusMesh\000", "get_ring_segments\000", 3905245786)
		methodTouchScreenButton[0] = classDB.get_method_bind("TouchScreenButton\000", "set_texture_normal\000", 4051416890)
		methodTouchScreenButton[1] = classDB.get_method_bind("TouchScreenButton\000", "get_texture_normal\000", 3635182373)
		methodTouchScreenButton[2] = classDB.get_method_bind("TouchScreenButton\000", "set_texture_pressed\000", 4051416890)
		methodTouchScreenButton[3] = classDB.get_method_bind("TouchScreenButton\000", "get_texture_pressed\000", 3635182373)
		methodTouchScreenButton[4] = classDB.get_method_bind("TouchScreenButton\000", "set_bitmask\000", 698588216)
		methodTouchScreenButton[5] = classDB.get_method_bind("TouchScreenButton\000", "get_bitmask\000", 2459671998)
		methodTouchScreenButton[6] = classDB.get_method_bind("TouchScreenButton\000", "set_shape\000", 771364740)
		methodTouchScreenButton[7] = classDB.get_method_bind("TouchScreenButton\000", "get_shape\000", 522005891)
		methodTouchScreenButton[8] = classDB.get_method_bind("TouchScreenButton\000", "set_shape_centered\000", 2586408642)
		methodTouchScreenButton[9] = classDB.get_method_bind("TouchScreenButton\000", "is_shape_centered\000", 36873697)
		methodTouchScreenButton[10] = classDB.get_method_bind("TouchScreenButton\000", "set_shape_visible\000", 2586408642)
		methodTouchScreenButton[11] = classDB.get_method_bind("TouchScreenButton\000", "is_shape_visible\000", 36873697)
		methodTouchScreenButton[12] = classDB.get_method_bind("TouchScreenButton\000", "set_action\000", 83702148)
		methodTouchScreenButton[13] = classDB.get_method_bind("TouchScreenButton\000", "get_action\000", 201670096)
		methodTouchScreenButton[14] = classDB.get_method_bind("TouchScreenButton\000", "set_visibility_mode\000", 3031128463)
		methodTouchScreenButton[15] = classDB.get_method_bind("TouchScreenButton\000", "get_visibility_mode\000", 2558996468)
		methodTouchScreenButton[16] = classDB.get_method_bind("TouchScreenButton\000", "set_passby_press\000", 2586408642)
		methodTouchScreenButton[17] = classDB.get_method_bind("TouchScreenButton\000", "is_passby_press_enabled\000", 36873697)
		methodTouchScreenButton[18] = classDB.get_method_bind("TouchScreenButton\000", "is_pressed\000", 36873697)
		methodTranslation[0] = classDB.get_method_bind("Translation\000", "set_locale\000", 83702148)
		methodTranslation[1] = classDB.get_method_bind("Translation\000", "get_locale\000", 201670096)
		methodTranslation[2] = classDB.get_method_bind("Translation\000", "add_message\000", 971803314)
		methodTranslation[3] = classDB.get_method_bind("Translation\000", "add_plural_message\000", 360316719)
		methodTranslation[4] = classDB.get_method_bind("Translation\000", "get_message\000", 58037827)
		methodTranslation[5] = classDB.get_method_bind("Translation\000", "get_plural_message\000", 1333931916)
		methodTranslation[6] = classDB.get_method_bind("Translation\000", "erase_message\000", 3919944288)
		methodTranslation[7] = classDB.get_method_bind("Translation\000", "get_message_list\000", 1139954409)
		methodTranslation[8] = classDB.get_method_bind("Translation\000", "get_message_count\000", 3905245786)
		methodTranslationServerSingleton[0] = classDB.get_method_bind("TranslationServer\000", "set_locale\000", 83702148)
		methodTranslationServerSingleton[1] = classDB.get_method_bind("TranslationServer\000", "get_locale\000", 201670096)
		methodTranslationServerSingleton[2] = classDB.get_method_bind("TranslationServer\000", "get_tool_locale\000", 2841200299)
		methodTranslationServerSingleton[3] = classDB.get_method_bind("TranslationServer\000", "compare_locales\000", 2878152881)
		methodTranslationServerSingleton[4] = classDB.get_method_bind("TranslationServer\000", "standardize_locale\000", 3135753539)
		methodTranslationServerSingleton[5] = classDB.get_method_bind("TranslationServer\000", "get_all_languages\000", 1139954409)
		methodTranslationServerSingleton[6] = classDB.get_method_bind("TranslationServer\000", "get_language_name\000", 3135753539)
		methodTranslationServerSingleton[7] = classDB.get_method_bind("TranslationServer\000", "get_all_scripts\000", 1139954409)
		methodTranslationServerSingleton[8] = classDB.get_method_bind("TranslationServer\000", "get_script_name\000", 3135753539)
		methodTranslationServerSingleton[9] = classDB.get_method_bind("TranslationServer\000", "get_all_countries\000", 1139954409)
		methodTranslationServerSingleton[10] = classDB.get_method_bind("TranslationServer\000", "get_country_name\000", 3135753539)
		methodTranslationServerSingleton[11] = classDB.get_method_bind("TranslationServer\000", "get_locale_name\000", 3135753539)
		methodTranslationServerSingleton[12] = classDB.get_method_bind("TranslationServer\000", "translate\000", 58037827)
		methodTranslationServerSingleton[13] = classDB.get_method_bind("TranslationServer\000", "translate_plural\000", 1333931916)
		methodTranslationServerSingleton[14] = classDB.get_method_bind("TranslationServer\000", "add_translation\000", 1466479800)
		methodTranslationServerSingleton[15] = classDB.get_method_bind("TranslationServer\000", "remove_translation\000", 1466479800)
		methodTranslationServerSingleton[16] = classDB.get_method_bind("TranslationServer\000", "get_translation_object\000", 2065240175)
		methodTranslationServerSingleton[17] = classDB.get_method_bind("TranslationServer\000", "clear\000", 3218959716)
		methodTranslationServerSingleton[18] = classDB.get_method_bind("TranslationServer\000", "get_loaded_locales\000", 1139954409)
		methodTranslationServerSingleton[19] = classDB.get_method_bind("TranslationServer\000", "is_pseudolocalization_enabled\000", 36873697)
		methodTranslationServerSingleton[20] = classDB.get_method_bind("TranslationServer\000", "set_pseudolocalization_enabled\000", 2586408642)
		methodTranslationServerSingleton[21] = classDB.get_method_bind("TranslationServer\000", "reload_pseudolocalization\000", 3218959716)
		methodTranslationServerSingleton[22] = classDB.get_method_bind("TranslationServer\000", "pseudolocalize\000", 1965194235)
		methodTree[0] = classDB.get_method_bind("Tree\000", "clear\000", 3218959716)
		methodTree[1] = classDB.get_method_bind("Tree\000", "create_item\000", 528467046)
		methodTree[2] = classDB.get_method_bind("Tree\000", "get_root\000", 1514277247)
		methodTree[3] = classDB.get_method_bind("Tree\000", "set_column_custom_minimum_width\000", 3937882851)
		methodTree[4] = classDB.get_method_bind("Tree\000", "set_column_expand\000", 300928843)
		methodTree[5] = classDB.get_method_bind("Tree\000", "set_column_expand_ratio\000", 3937882851)
		methodTree[6] = classDB.get_method_bind("Tree\000", "set_column_clip_content\000", 300928843)
		methodTree[7] = classDB.get_method_bind("Tree\000", "is_column_expanding\000", 1116898809)
		methodTree[8] = classDB.get_method_bind("Tree\000", "is_column_clipping_content\000", 1116898809)
		methodTree[9] = classDB.get_method_bind("Tree\000", "get_column_expand_ratio\000", 923996154)
		methodTree[10] = classDB.get_method_bind("Tree\000", "get_column_width\000", 923996154)
		methodTree[11] = classDB.get_method_bind("Tree\000", "set_hide_root\000", 2586408642)
		methodTree[12] = classDB.get_method_bind("Tree\000", "is_root_hidden\000", 36873697)
		methodTree[13] = classDB.get_method_bind("Tree\000", "get_next_selected\000", 873446299)
		methodTree[14] = classDB.get_method_bind("Tree\000", "get_selected\000", 1514277247)
		methodTree[15] = classDB.get_method_bind("Tree\000", "get_selected_column\000", 3905245786)
		methodTree[16] = classDB.get_method_bind("Tree\000", "get_pressed_button\000", 3905245786)
		methodTree[17] = classDB.get_method_bind("Tree\000", "set_select_mode\000", 3223887270)
		methodTree[18] = classDB.get_method_bind("Tree\000", "get_select_mode\000", 100748571)
		methodTree[19] = classDB.get_method_bind("Tree\000", "set_columns\000", 1286410249)
		methodTree[20] = classDB.get_method_bind("Tree\000", "get_columns\000", 3905245786)
		methodTree[21] = classDB.get_method_bind("Tree\000", "get_edited\000", 1514277247)
		methodTree[22] = classDB.get_method_bind("Tree\000", "get_edited_column\000", 3905245786)
		methodTree[23] = classDB.get_method_bind("Tree\000", "edit_selected\000", 2240911060)
		methodTree[24] = classDB.get_method_bind("Tree\000", "get_custom_popup_rect\000", 1639390495)
		methodTree[25] = classDB.get_method_bind("Tree\000", "get_item_area_rect\000", 1235226180)
		methodTree[26] = classDB.get_method_bind("Tree\000", "get_item_at_position\000", 4193340126)
		methodTree[27] = classDB.get_method_bind("Tree\000", "get_column_at_position\000", 3820158470)
		methodTree[28] = classDB.get_method_bind("Tree\000", "get_drop_section_at_position\000", 3820158470)
		methodTree[29] = classDB.get_method_bind("Tree\000", "get_button_id_at_position\000", 3820158470)
		methodTree[30] = classDB.get_method_bind("Tree\000", "ensure_cursor_is_visible\000", 3218959716)
		methodTree[31] = classDB.get_method_bind("Tree\000", "set_column_titles_visible\000", 2586408642)
		methodTree[32] = classDB.get_method_bind("Tree\000", "are_column_titles_visible\000", 36873697)
		methodTree[33] = classDB.get_method_bind("Tree\000", "set_column_title\000", 501894301)
		methodTree[34] = classDB.get_method_bind("Tree\000", "get_column_title\000", 844755477)
		methodTree[35] = classDB.get_method_bind("Tree\000", "set_column_title_direction\000", 1707680378)
		methodTree[36] = classDB.get_method_bind("Tree\000", "get_column_title_direction\000", 4235602388)
		methodTree[37] = classDB.get_method_bind("Tree\000", "set_column_title_language\000", 501894301)
		methodTree[38] = classDB.get_method_bind("Tree\000", "get_column_title_language\000", 844755477)
		methodTree[39] = classDB.get_method_bind("Tree\000", "get_scroll\000", 3341600327)
		methodTree[40] = classDB.get_method_bind("Tree\000", "scroll_to_item\000", 1314737213)
		methodTree[41] = classDB.get_method_bind("Tree\000", "set_h_scroll_enabled\000", 2586408642)
		methodTree[42] = classDB.get_method_bind("Tree\000", "is_h_scroll_enabled\000", 36873697)
		methodTree[43] = classDB.get_method_bind("Tree\000", "set_v_scroll_enabled\000", 2586408642)
		methodTree[44] = classDB.get_method_bind("Tree\000", "is_v_scroll_enabled\000", 36873697)
		methodTree[45] = classDB.get_method_bind("Tree\000", "set_hide_folding\000", 2586408642)
		methodTree[46] = classDB.get_method_bind("Tree\000", "is_folding_hidden\000", 36873697)
		methodTree[47] = classDB.get_method_bind("Tree\000", "set_drop_mode_flags\000", 1286410249)
		methodTree[48] = classDB.get_method_bind("Tree\000", "get_drop_mode_flags\000", 3905245786)
		methodTree[49] = classDB.get_method_bind("Tree\000", "set_allow_rmb_select\000", 2586408642)
		methodTree[50] = classDB.get_method_bind("Tree\000", "get_allow_rmb_select\000", 36873697)
		methodTree[51] = classDB.get_method_bind("Tree\000", "set_allow_reselect\000", 2586408642)
		methodTree[52] = classDB.get_method_bind("Tree\000", "get_allow_reselect\000", 36873697)
		methodTreeItem[0] = classDB.get_method_bind("TreeItem\000", "set_cell_mode\000", 289920701)
		methodTreeItem[1] = classDB.get_method_bind("TreeItem\000", "get_cell_mode\000", 3406114978)
		methodTreeItem[2] = classDB.get_method_bind("TreeItem\000", "set_checked\000", 300928843)
		methodTreeItem[3] = classDB.get_method_bind("TreeItem\000", "set_indeterminate\000", 300928843)
		methodTreeItem[4] = classDB.get_method_bind("TreeItem\000", "is_checked\000", 1116898809)
		methodTreeItem[5] = classDB.get_method_bind("TreeItem\000", "is_indeterminate\000", 1116898809)
		methodTreeItem[6] = classDB.get_method_bind("TreeItem\000", "propagate_check\000", 4023243586)
		methodTreeItem[7] = classDB.get_method_bind("TreeItem\000", "set_text\000", 501894301)
		methodTreeItem[8] = classDB.get_method_bind("TreeItem\000", "get_text\000", 844755477)
		methodTreeItem[9] = classDB.get_method_bind("TreeItem\000", "set_text_direction\000", 1707680378)
		methodTreeItem[10] = classDB.get_method_bind("TreeItem\000", "get_text_direction\000", 4235602388)
		methodTreeItem[11] = classDB.get_method_bind("TreeItem\000", "set_structured_text_bidi_override\000", 868756907)
		methodTreeItem[12] = classDB.get_method_bind("TreeItem\000", "get_structured_text_bidi_override\000", 3377823772)
		methodTreeItem[13] = classDB.get_method_bind("TreeItem\000", "set_structured_text_bidi_override_options\000", 537221740)
		methodTreeItem[14] = classDB.get_method_bind("TreeItem\000", "get_structured_text_bidi_override_options\000", 663333327)
		methodTreeItem[15] = classDB.get_method_bind("TreeItem\000", "set_language\000", 501894301)
		methodTreeItem[16] = classDB.get_method_bind("TreeItem\000", "get_language\000", 844755477)
		methodTreeItem[17] = classDB.get_method_bind("TreeItem\000", "set_suffix\000", 501894301)
		methodTreeItem[18] = classDB.get_method_bind("TreeItem\000", "get_suffix\000", 844755477)
		methodTreeItem[19] = classDB.get_method_bind("TreeItem\000", "set_icon\000", 666127730)
		methodTreeItem[20] = classDB.get_method_bind("TreeItem\000", "get_icon\000", 3536238170)
		methodTreeItem[21] = classDB.get_method_bind("TreeItem\000", "set_icon_region\000", 1356297692)
		methodTreeItem[22] = classDB.get_method_bind("TreeItem\000", "get_icon_region\000", 3327874267)
		methodTreeItem[23] = classDB.get_method_bind("TreeItem\000", "set_icon_max_width\000", 3937882851)
		methodTreeItem[24] = classDB.get_method_bind("TreeItem\000", "get_icon_max_width\000", 923996154)
		methodTreeItem[25] = classDB.get_method_bind("TreeItem\000", "set_icon_modulate\000", 2878471219)
		methodTreeItem[26] = classDB.get_method_bind("TreeItem\000", "get_icon_modulate\000", 3457211756)
		methodTreeItem[27] = classDB.get_method_bind("TreeItem\000", "set_range\000", 1602489585)
		methodTreeItem[28] = classDB.get_method_bind("TreeItem\000", "get_range\000", 2339986948)
		methodTreeItem[29] = classDB.get_method_bind("TreeItem\000", "set_range_config\000", 1547181014)
		methodTreeItem[30] = classDB.get_method_bind("TreeItem\000", "get_range_config\000", 3554694381)
		methodTreeItem[31] = classDB.get_method_bind("TreeItem\000", "set_metadata\000", 2152698145)
		methodTreeItem[32] = classDB.get_method_bind("TreeItem\000", "get_metadata\000", 4227898402)
		methodTreeItem[33] = classDB.get_method_bind("TreeItem\000", "set_custom_draw\000", 272420368)
		methodTreeItem[34] = classDB.get_method_bind("TreeItem\000", "set_collapsed\000", 2586408642)
		methodTreeItem[35] = classDB.get_method_bind("TreeItem\000", "is_collapsed\000", 2240911060)
		methodTreeItem[36] = classDB.get_method_bind("TreeItem\000", "set_visible\000", 2586408642)
		methodTreeItem[37] = classDB.get_method_bind("TreeItem\000", "is_visible\000", 2240911060)
		methodTreeItem[38] = classDB.get_method_bind("TreeItem\000", "uncollapse_tree\000", 3218959716)
		methodTreeItem[39] = classDB.get_method_bind("TreeItem\000", "set_custom_minimum_height\000", 1286410249)
		methodTreeItem[40] = classDB.get_method_bind("TreeItem\000", "get_custom_minimum_height\000", 3905245786)
		methodTreeItem[41] = classDB.get_method_bind("TreeItem\000", "set_selectable\000", 300928843)
		methodTreeItem[42] = classDB.get_method_bind("TreeItem\000", "is_selectable\000", 1116898809)
		methodTreeItem[43] = classDB.get_method_bind("TreeItem\000", "is_selected\000", 3067735520)
		methodTreeItem[44] = classDB.get_method_bind("TreeItem\000", "select\000", 1286410249)
		methodTreeItem[45] = classDB.get_method_bind("TreeItem\000", "deselect\000", 1286410249)
		methodTreeItem[46] = classDB.get_method_bind("TreeItem\000", "set_editable\000", 300928843)
		methodTreeItem[47] = classDB.get_method_bind("TreeItem\000", "is_editable\000", 3067735520)
		methodTreeItem[48] = classDB.get_method_bind("TreeItem\000", "set_custom_color\000", 2878471219)
		methodTreeItem[49] = classDB.get_method_bind("TreeItem\000", "get_custom_color\000", 3457211756)
		methodTreeItem[50] = classDB.get_method_bind("TreeItem\000", "clear_custom_color\000", 1286410249)
		methodTreeItem[51] = classDB.get_method_bind("TreeItem\000", "set_custom_font\000", 2637609184)
		methodTreeItem[52] = classDB.get_method_bind("TreeItem\000", "get_custom_font\000", 4244553094)
		methodTreeItem[53] = classDB.get_method_bind("TreeItem\000", "set_custom_font_size\000", 3937882851)
		methodTreeItem[54] = classDB.get_method_bind("TreeItem\000", "get_custom_font_size\000", 923996154)
		methodTreeItem[55] = classDB.get_method_bind("TreeItem\000", "set_custom_bg_color\000", 894174518)
		methodTreeItem[56] = classDB.get_method_bind("TreeItem\000", "clear_custom_bg_color\000", 1286410249)
		methodTreeItem[57] = classDB.get_method_bind("TreeItem\000", "get_custom_bg_color\000", 3457211756)
		methodTreeItem[58] = classDB.get_method_bind("TreeItem\000", "set_custom_as_button\000", 300928843)
		methodTreeItem[59] = classDB.get_method_bind("TreeItem\000", "is_custom_set_as_button\000", 1116898809)
		methodTreeItem[60] = classDB.get_method_bind("TreeItem\000", "add_button\000", 1507727907)
		methodTreeItem[61] = classDB.get_method_bind("TreeItem\000", "get_button_count\000", 923996154)
		methodTreeItem[62] = classDB.get_method_bind("TreeItem\000", "get_button_tooltip\000", 1391810591)
		methodTreeItem[63] = classDB.get_method_bind("TreeItem\000", "get_button_id\000", 3175239445)
		methodTreeItem[64] = classDB.get_method_bind("TreeItem\000", "get_button_by_id\000", 3175239445)
		methodTreeItem[65] = classDB.get_method_bind("TreeItem\000", "get_button\000", 2584904275)
		methodTreeItem[66] = classDB.get_method_bind("TreeItem\000", "set_button\000", 176101966)
		methodTreeItem[67] = classDB.get_method_bind("TreeItem\000", "erase_button\000", 3937882851)
		methodTreeItem[68] = classDB.get_method_bind("TreeItem\000", "set_button_disabled\000", 1383440665)
		methodTreeItem[69] = classDB.get_method_bind("TreeItem\000", "is_button_disabled\000", 2522259332)
		methodTreeItem[70] = classDB.get_method_bind("TreeItem\000", "set_tooltip\000", 501894301)
		methodTreeItem[71] = classDB.get_method_bind("TreeItem\000", "get_tooltip\000", 844755477)
		methodTreeItem[72] = classDB.get_method_bind("TreeItem\000", "set_text_alignment\000", 3276431499)
		methodTreeItem[73] = classDB.get_method_bind("TreeItem\000", "get_text_alignment\000", 4171562184)
		methodTreeItem[74] = classDB.get_method_bind("TreeItem\000", "set_expand_right\000", 300928843)
		methodTreeItem[75] = classDB.get_method_bind("TreeItem\000", "get_expand_right\000", 1116898809)
		methodTreeItem[76] = classDB.get_method_bind("TreeItem\000", "set_disable_folding\000", 2586408642)
		methodTreeItem[77] = classDB.get_method_bind("TreeItem\000", "is_folding_disabled\000", 36873697)
		methodTreeItem[78] = classDB.get_method_bind("TreeItem\000", "create_child\000", 954243986)
		methodTreeItem[79] = classDB.get_method_bind("TreeItem\000", "get_tree\000", 2243340556)
		methodTreeItem[80] = classDB.get_method_bind("TreeItem\000", "get_next\000", 1514277247)
		methodTreeItem[81] = classDB.get_method_bind("TreeItem\000", "get_prev\000", 2768121250)
		methodTreeItem[82] = classDB.get_method_bind("TreeItem\000", "get_parent\000", 1514277247)
		methodTreeItem[83] = classDB.get_method_bind("TreeItem\000", "get_first_child\000", 1514277247)
		methodTreeItem[84] = classDB.get_method_bind("TreeItem\000", "get_next_visible\000", 1666920593)
		methodTreeItem[85] = classDB.get_method_bind("TreeItem\000", "get_prev_visible\000", 1666920593)
		methodTreeItem[86] = classDB.get_method_bind("TreeItem\000", "get_child\000", 306700752)
		methodTreeItem[87] = classDB.get_method_bind("TreeItem\000", "get_child_count\000", 2455072627)
		methodTreeItem[88] = classDB.get_method_bind("TreeItem\000", "get_children\000", 2915620761)
		methodTreeItem[89] = classDB.get_method_bind("TreeItem\000", "get_index\000", 2455072627)
		methodTreeItem[90] = classDB.get_method_bind("TreeItem\000", "move_before\000", 1819951137)
		methodTreeItem[91] = classDB.get_method_bind("TreeItem\000", "move_after\000", 1819951137)
		methodTreeItem[92] = classDB.get_method_bind("TreeItem\000", "remove_child\000", 1819951137)
		methodTreeItem[93] = classDB.get_method_bind("TreeItem\000", "call_recursive\000", 2866548813)
		methodTubeTrailMesh[0] = classDB.get_method_bind("TubeTrailMesh\000", "set_radius\000", 373806689)
		methodTubeTrailMesh[1] = classDB.get_method_bind("TubeTrailMesh\000", "get_radius\000", 1740695150)
		methodTubeTrailMesh[2] = classDB.get_method_bind("TubeTrailMesh\000", "set_radial_steps\000", 1286410249)
		methodTubeTrailMesh[3] = classDB.get_method_bind("TubeTrailMesh\000", "get_radial_steps\000", 3905245786)
		methodTubeTrailMesh[4] = classDB.get_method_bind("TubeTrailMesh\000", "set_sections\000", 1286410249)
		methodTubeTrailMesh[5] = classDB.get_method_bind("TubeTrailMesh\000", "get_sections\000", 3905245786)
		methodTubeTrailMesh[6] = classDB.get_method_bind("TubeTrailMesh\000", "set_section_length\000", 373806689)
		methodTubeTrailMesh[7] = classDB.get_method_bind("TubeTrailMesh\000", "get_section_length\000", 1740695150)
		methodTubeTrailMesh[8] = classDB.get_method_bind("TubeTrailMesh\000", "set_section_rings\000", 1286410249)
		methodTubeTrailMesh[9] = classDB.get_method_bind("TubeTrailMesh\000", "get_section_rings\000", 3905245786)
		methodTubeTrailMesh[10] = classDB.get_method_bind("TubeTrailMesh\000", "set_curve\000", 270443179)
		methodTubeTrailMesh[11] = classDB.get_method_bind("TubeTrailMesh\000", "get_curve\000", 2460114913)
		methodTween[0] = classDB.get_method_bind("Tween\000", "tween_property\000", 4049770449)
		methodTween[1] = classDB.get_method_bind("Tween\000", "tween_interval\000", 413360199)
		methodTween[2] = classDB.get_method_bind("Tween\000", "tween_callback\000", 1540176488)
		methodTween[3] = classDB.get_method_bind("Tween\000", "tween_method\000", 2337877153)
		methodTween[4] = classDB.get_method_bind("Tween\000", "custom_step\000", 330693286)
		methodTween[5] = classDB.get_method_bind("Tween\000", "stop\000", 3218959716)
		methodTween[6] = classDB.get_method_bind("Tween\000", "pause\000", 3218959716)
		methodTween[7] = classDB.get_method_bind("Tween\000", "play\000", 3218959716)
		methodTween[8] = classDB.get_method_bind("Tween\000", "kill\000", 3218959716)
		methodTween[9] = classDB.get_method_bind("Tween\000", "get_total_elapsed_time\000", 1740695150)
		methodTween[10] = classDB.get_method_bind("Tween\000", "is_running\000", 2240911060)
		methodTween[11] = classDB.get_method_bind("Tween\000", "is_valid\000", 2240911060)
		methodTween[12] = classDB.get_method_bind("Tween\000", "bind_node\000", 2946786331)
		methodTween[13] = classDB.get_method_bind("Tween\000", "set_process_mode\000", 855258840)
		methodTween[14] = classDB.get_method_bind("Tween\000", "set_pause_mode\000", 3363368837)
		methodTween[15] = classDB.get_method_bind("Tween\000", "set_parallel\000", 1942052223)
		methodTween[16] = classDB.get_method_bind("Tween\000", "set_loops\000", 2670836414)
		methodTween[17] = classDB.get_method_bind("Tween\000", "set_speed_scale\000", 3961971106)
		methodTween[18] = classDB.get_method_bind("Tween\000", "set_trans\000", 3965963875)
		methodTween[19] = classDB.get_method_bind("Tween\000", "set_ease\000", 1208117252)
		methodTween[20] = classDB.get_method_bind("Tween\000", "parallel\000", 3426978995)
		methodTween[21] = classDB.get_method_bind("Tween\000", "chain\000", 3426978995)
		methodTween[22] = classDB.get_method_bind("Tween\000", "interpolate_value\000", 3452526450)
		methodUDPServer[0] = classDB.get_method_bind("UDPServer\000", "listen\000", 4025329869)
		methodUDPServer[1] = classDB.get_method_bind("UDPServer\000", "poll\000", 166280745)
		methodUDPServer[2] = classDB.get_method_bind("UDPServer\000", "is_connection_available\000", 36873697)
		methodUDPServer[3] = classDB.get_method_bind("UDPServer\000", "get_local_port\000", 3905245786)
		methodUDPServer[4] = classDB.get_method_bind("UDPServer\000", "is_listening\000", 36873697)
		methodUDPServer[5] = classDB.get_method_bind("UDPServer\000", "take_connection\000", 808734560)
		methodUDPServer[6] = classDB.get_method_bind("UDPServer\000", "stop\000", 3218959716)
		methodUDPServer[7] = classDB.get_method_bind("UDPServer\000", "set_max_pending_connections\000", 1286410249)
		methodUDPServer[8] = classDB.get_method_bind("UDPServer\000", "get_max_pending_connections\000", 3905245786)
		methodUPNP[0] = classDB.get_method_bind("UPNP\000", "get_device_count\000", 3905245786)
		methodUPNP[1] = classDB.get_method_bind("UPNP\000", "get_device\000", 2193290270)
		methodUPNP[2] = classDB.get_method_bind("UPNP\000", "add_device\000", 986715920)
		methodUPNP[3] = classDB.get_method_bind("UPNP\000", "set_device\000", 3015133723)
		methodUPNP[4] = classDB.get_method_bind("UPNP\000", "remove_device\000", 1286410249)
		methodUPNP[5] = classDB.get_method_bind("UPNP\000", "clear_devices\000", 3218959716)
		methodUPNP[6] = classDB.get_method_bind("UPNP\000", "get_gateway\000", 2276800779)
		methodUPNP[7] = classDB.get_method_bind("UPNP\000", "discover\000", 1575334765)
		methodUPNP[8] = classDB.get_method_bind("UPNP\000", "query_external_address\000", 201670096)
		methodUPNP[9] = classDB.get_method_bind("UPNP\000", "add_port_mapping\000", 3358934458)
		methodUPNP[10] = classDB.get_method_bind("UPNP\000", "delete_port_mapping\000", 760296170)
		methodUPNP[11] = classDB.get_method_bind("UPNP\000", "set_discover_multicast_if\000", 83702148)
		methodUPNP[12] = classDB.get_method_bind("UPNP\000", "get_discover_multicast_if\000", 201670096)
		methodUPNP[13] = classDB.get_method_bind("UPNP\000", "set_discover_local_port\000", 1286410249)
		methodUPNP[14] = classDB.get_method_bind("UPNP\000", "get_discover_local_port\000", 3905245786)
		methodUPNP[15] = classDB.get_method_bind("UPNP\000", "set_discover_ipv6\000", 2586408642)
		methodUPNP[16] = classDB.get_method_bind("UPNP\000", "is_discover_ipv6\000", 36873697)
		methodUPNPDevice[0] = classDB.get_method_bind("UPNPDevice\000", "is_valid_gateway\000", 36873697)
		methodUPNPDevice[1] = classDB.get_method_bind("UPNPDevice\000", "query_external_address\000", 201670096)
		methodUPNPDevice[2] = classDB.get_method_bind("UPNPDevice\000", "add_port_mapping\000", 3358934458)
		methodUPNPDevice[3] = classDB.get_method_bind("UPNPDevice\000", "delete_port_mapping\000", 760296170)
		methodUPNPDevice[4] = classDB.get_method_bind("UPNPDevice\000", "set_description_url\000", 83702148)
		methodUPNPDevice[5] = classDB.get_method_bind("UPNPDevice\000", "get_description_url\000", 201670096)
		methodUPNPDevice[6] = classDB.get_method_bind("UPNPDevice\000", "set_service_type\000", 83702148)
		methodUPNPDevice[7] = classDB.get_method_bind("UPNPDevice\000", "get_service_type\000", 201670096)
		methodUPNPDevice[8] = classDB.get_method_bind("UPNPDevice\000", "set_igd_control_url\000", 83702148)
		methodUPNPDevice[9] = classDB.get_method_bind("UPNPDevice\000", "get_igd_control_url\000", 201670096)
		methodUPNPDevice[10] = classDB.get_method_bind("UPNPDevice\000", "set_igd_service_type\000", 83702148)
		methodUPNPDevice[11] = classDB.get_method_bind("UPNPDevice\000", "get_igd_service_type\000", 201670096)
		methodUPNPDevice[12] = classDB.get_method_bind("UPNPDevice\000", "set_igd_our_addr\000", 83702148)
		methodUPNPDevice[13] = classDB.get_method_bind("UPNPDevice\000", "get_igd_our_addr\000", 201670096)
		methodUPNPDevice[14] = classDB.get_method_bind("UPNPDevice\000", "set_igd_status\000", 519504122)
		methodUPNPDevice[15] = classDB.get_method_bind("UPNPDevice\000", "get_igd_status\000", 180887011)
		methodUndoRedo[0] = classDB.get_method_bind("UndoRedo\000", "create_action\000", 183245820)
		methodUndoRedo[1] = classDB.get_method_bind("UndoRedo\000", "commit_action\000", 3216645846)
		methodUndoRedo[2] = classDB.get_method_bind("UndoRedo\000", "is_committing_action\000", 36873697)
		methodUndoRedo[3] = classDB.get_method_bind("UndoRedo\000", "add_do_method\000", 1517810467)
		methodUndoRedo[4] = classDB.get_method_bind("UndoRedo\000", "add_undo_method\000", 1517810467)
		methodUndoRedo[5] = classDB.get_method_bind("UndoRedo\000", "add_do_property\000", 1017172818)
		methodUndoRedo[6] = classDB.get_method_bind("UndoRedo\000", "add_undo_property\000", 1017172818)
		methodUndoRedo[7] = classDB.get_method_bind("UndoRedo\000", "add_do_reference\000", 3975164845)
		methodUndoRedo[8] = classDB.get_method_bind("UndoRedo\000", "add_undo_reference\000", 3975164845)
		methodUndoRedo[9] = classDB.get_method_bind("UndoRedo\000", "start_force_keep_in_merge_ends\000", 3218959716)
		methodUndoRedo[10] = classDB.get_method_bind("UndoRedo\000", "end_force_keep_in_merge_ends\000", 3218959716)
		methodUndoRedo[11] = classDB.get_method_bind("UndoRedo\000", "get_history_count\000", 2455072627)
		methodUndoRedo[12] = classDB.get_method_bind("UndoRedo\000", "get_current_action\000", 2455072627)
		methodUndoRedo[13] = classDB.get_method_bind("UndoRedo\000", "get_action_name\000", 990163283)
		methodUndoRedo[14] = classDB.get_method_bind("UndoRedo\000", "clear_history\000", 3216645846)
		methodUndoRedo[15] = classDB.get_method_bind("UndoRedo\000", "get_current_action_name\000", 201670096)
		methodUndoRedo[16] = classDB.get_method_bind("UndoRedo\000", "has_undo\000", 36873697)
		methodUndoRedo[17] = classDB.get_method_bind("UndoRedo\000", "has_redo\000", 36873697)
		methodUndoRedo[18] = classDB.get_method_bind("UndoRedo\000", "get_version\000", 3905245786)
		methodUndoRedo[19] = classDB.get_method_bind("UndoRedo\000", "redo\000", 2240911060)
		methodUndoRedo[20] = classDB.get_method_bind("UndoRedo\000", "undo\000", 2240911060)
		methodVehicleBody3D[0] = classDB.get_method_bind("VehicleBody3D\000", "set_engine_force\000", 373806689)
		methodVehicleBody3D[1] = classDB.get_method_bind("VehicleBody3D\000", "get_engine_force\000", 1740695150)
		methodVehicleBody3D[2] = classDB.get_method_bind("VehicleBody3D\000", "set_brake\000", 373806689)
		methodVehicleBody3D[3] = classDB.get_method_bind("VehicleBody3D\000", "get_brake\000", 1740695150)
		methodVehicleBody3D[4] = classDB.get_method_bind("VehicleBody3D\000", "set_steering\000", 373806689)
		methodVehicleBody3D[5] = classDB.get_method_bind("VehicleBody3D\000", "get_steering\000", 1740695150)
		methodVehicleWheel3D[0] = classDB.get_method_bind("VehicleWheel3D\000", "set_radius\000", 373806689)
		methodVehicleWheel3D[1] = classDB.get_method_bind("VehicleWheel3D\000", "get_radius\000", 1740695150)
		methodVehicleWheel3D[2] = classDB.get_method_bind("VehicleWheel3D\000", "set_suspension_rest_length\000", 373806689)
		methodVehicleWheel3D[3] = classDB.get_method_bind("VehicleWheel3D\000", "get_suspension_rest_length\000", 1740695150)
		methodVehicleWheel3D[4] = classDB.get_method_bind("VehicleWheel3D\000", "set_suspension_travel\000", 373806689)
		methodVehicleWheel3D[5] = classDB.get_method_bind("VehicleWheel3D\000", "get_suspension_travel\000", 1740695150)
		methodVehicleWheel3D[6] = classDB.get_method_bind("VehicleWheel3D\000", "set_suspension_stiffness\000", 373806689)
		methodVehicleWheel3D[7] = classDB.get_method_bind("VehicleWheel3D\000", "get_suspension_stiffness\000", 1740695150)
		methodVehicleWheel3D[8] = classDB.get_method_bind("VehicleWheel3D\000", "set_suspension_max_force\000", 373806689)
		methodVehicleWheel3D[9] = classDB.get_method_bind("VehicleWheel3D\000", "get_suspension_max_force\000", 1740695150)
		methodVehicleWheel3D[10] = classDB.get_method_bind("VehicleWheel3D\000", "set_damping_compression\000", 373806689)
		methodVehicleWheel3D[11] = classDB.get_method_bind("VehicleWheel3D\000", "get_damping_compression\000", 1740695150)
		methodVehicleWheel3D[12] = classDB.get_method_bind("VehicleWheel3D\000", "set_damping_relaxation\000", 373806689)
		methodVehicleWheel3D[13] = classDB.get_method_bind("VehicleWheel3D\000", "get_damping_relaxation\000", 1740695150)
		methodVehicleWheel3D[14] = classDB.get_method_bind("VehicleWheel3D\000", "set_use_as_traction\000", 2586408642)
		methodVehicleWheel3D[15] = classDB.get_method_bind("VehicleWheel3D\000", "is_used_as_traction\000", 36873697)
		methodVehicleWheel3D[16] = classDB.get_method_bind("VehicleWheel3D\000", "set_use_as_steering\000", 2586408642)
		methodVehicleWheel3D[17] = classDB.get_method_bind("VehicleWheel3D\000", "is_used_as_steering\000", 36873697)
		methodVehicleWheel3D[18] = classDB.get_method_bind("VehicleWheel3D\000", "set_friction_slip\000", 373806689)
		methodVehicleWheel3D[19] = classDB.get_method_bind("VehicleWheel3D\000", "get_friction_slip\000", 1740695150)
		methodVehicleWheel3D[20] = classDB.get_method_bind("VehicleWheel3D\000", "is_in_contact\000", 36873697)
		methodVehicleWheel3D[21] = classDB.get_method_bind("VehicleWheel3D\000", "get_contact_body\000", 151077316)
		methodVehicleWheel3D[22] = classDB.get_method_bind("VehicleWheel3D\000", "set_roll_influence\000", 373806689)
		methodVehicleWheel3D[23] = classDB.get_method_bind("VehicleWheel3D\000", "get_roll_influence\000", 1740695150)
		methodVehicleWheel3D[24] = classDB.get_method_bind("VehicleWheel3D\000", "get_skidinfo\000", 1740695150)
		methodVehicleWheel3D[25] = classDB.get_method_bind("VehicleWheel3D\000", "get_rpm\000", 1740695150)
		methodVehicleWheel3D[26] = classDB.get_method_bind("VehicleWheel3D\000", "set_engine_force\000", 373806689)
		methodVehicleWheel3D[27] = classDB.get_method_bind("VehicleWheel3D\000", "get_engine_force\000", 1740695150)
		methodVehicleWheel3D[28] = classDB.get_method_bind("VehicleWheel3D\000", "set_brake\000", 373806689)
		methodVehicleWheel3D[29] = classDB.get_method_bind("VehicleWheel3D\000", "get_brake\000", 1740695150)
		methodVehicleWheel3D[30] = classDB.get_method_bind("VehicleWheel3D\000", "set_steering\000", 373806689)
		methodVehicleWheel3D[31] = classDB.get_method_bind("VehicleWheel3D\000", "get_steering\000", 1740695150)
		methodVideoStreamPlayer[0] = classDB.get_method_bind("VideoStreamPlayer\000", "set_stream\000", 2317102564)
		methodVideoStreamPlayer[1] = classDB.get_method_bind("VideoStreamPlayer\000", "get_stream\000", 438621487)
		methodVideoStreamPlayer[2] = classDB.get_method_bind("VideoStreamPlayer\000", "play\000", 3218959716)
		methodVideoStreamPlayer[3] = classDB.get_method_bind("VideoStreamPlayer\000", "stop\000", 3218959716)
		methodVideoStreamPlayer[4] = classDB.get_method_bind("VideoStreamPlayer\000", "is_playing\000", 36873697)
		methodVideoStreamPlayer[5] = classDB.get_method_bind("VideoStreamPlayer\000", "set_paused\000", 2586408642)
		methodVideoStreamPlayer[6] = classDB.get_method_bind("VideoStreamPlayer\000", "is_paused\000", 36873697)
		methodVideoStreamPlayer[7] = classDB.get_method_bind("VideoStreamPlayer\000", "set_volume\000", 373806689)
		methodVideoStreamPlayer[8] = classDB.get_method_bind("VideoStreamPlayer\000", "get_volume\000", 1740695150)
		methodVideoStreamPlayer[9] = classDB.get_method_bind("VideoStreamPlayer\000", "set_volume_db\000", 373806689)
		methodVideoStreamPlayer[10] = classDB.get_method_bind("VideoStreamPlayer\000", "get_volume_db\000", 1740695150)
		methodVideoStreamPlayer[11] = classDB.get_method_bind("VideoStreamPlayer\000", "set_audio_track\000", 1286410249)
		methodVideoStreamPlayer[12] = classDB.get_method_bind("VideoStreamPlayer\000", "get_audio_track\000", 3905245786)
		methodVideoStreamPlayer[13] = classDB.get_method_bind("VideoStreamPlayer\000", "get_stream_name\000", 201670096)
		methodVideoStreamPlayer[14] = classDB.get_method_bind("VideoStreamPlayer\000", "set_stream_position\000", 373806689)
		methodVideoStreamPlayer[15] = classDB.get_method_bind("VideoStreamPlayer\000", "get_stream_position\000", 1740695150)
		methodVideoStreamPlayer[16] = classDB.get_method_bind("VideoStreamPlayer\000", "set_autoplay\000", 2586408642)
		methodVideoStreamPlayer[17] = classDB.get_method_bind("VideoStreamPlayer\000", "has_autoplay\000", 36873697)
		methodVideoStreamPlayer[18] = classDB.get_method_bind("VideoStreamPlayer\000", "set_expand\000", 2586408642)
		methodVideoStreamPlayer[19] = classDB.get_method_bind("VideoStreamPlayer\000", "has_expand\000", 36873697)
		methodVideoStreamPlayer[20] = classDB.get_method_bind("VideoStreamPlayer\000", "set_buffering_msec\000", 1286410249)
		methodVideoStreamPlayer[21] = classDB.get_method_bind("VideoStreamPlayer\000", "get_buffering_msec\000", 3905245786)
		methodVideoStreamPlayer[22] = classDB.get_method_bind("VideoStreamPlayer\000", "set_bus\000", 3304788590)
		methodVideoStreamPlayer[23] = classDB.get_method_bind("VideoStreamPlayer\000", "get_bus\000", 2002593661)
		methodVideoStreamPlayer[24] = classDB.get_method_bind("VideoStreamPlayer\000", "get_video_texture\000", 3635182373)
		methodVideoStreamTheora[0] = classDB.get_method_bind("VideoStreamTheora\000", "set_file\000", 83702148)
		methodVideoStreamTheora[1] = classDB.get_method_bind("VideoStreamTheora\000", "get_file\000", 2841200299)
		methodViewport[0] = classDB.get_method_bind("Viewport\000", "set_world_2d\000", 2736080068)
		methodViewport[1] = classDB.get_method_bind("Viewport\000", "get_world_2d\000", 2339128592)
		methodViewport[2] = classDB.get_method_bind("Viewport\000", "find_world_2d\000", 2339128592)
		methodViewport[3] = classDB.get_method_bind("Viewport\000", "set_canvas_transform\000", 2761652528)
		methodViewport[4] = classDB.get_method_bind("Viewport\000", "get_canvas_transform\000", 3814499831)
		methodViewport[5] = classDB.get_method_bind("Viewport\000", "set_global_canvas_transform\000", 2761652528)
		methodViewport[6] = classDB.get_method_bind("Viewport\000", "get_global_canvas_transform\000", 3814499831)
		methodViewport[7] = classDB.get_method_bind("Viewport\000", "get_final_transform\000", 3814499831)
		methodViewport[8] = classDB.get_method_bind("Viewport\000", "get_visible_rect\000", 1639390495)
		methodViewport[9] = classDB.get_method_bind("Viewport\000", "set_transparent_background\000", 2586408642)
		methodViewport[10] = classDB.get_method_bind("Viewport\000", "has_transparent_background\000", 36873697)
		methodViewport[11] = classDB.get_method_bind("Viewport\000", "set_msaa\000", 3330258708)
		methodViewport[12] = classDB.get_method_bind("Viewport\000", "get_msaa\000", 2542055527)
		methodViewport[13] = classDB.get_method_bind("Viewport\000", "set_screen_space_aa\000", 3544169389)
		methodViewport[14] = classDB.get_method_bind("Viewport\000", "get_screen_space_aa\000", 1390814124)
		methodViewport[15] = classDB.get_method_bind("Viewport\000", "set_use_taa\000", 2586408642)
		methodViewport[16] = classDB.get_method_bind("Viewport\000", "is_using_taa\000", 36873697)
		methodViewport[17] = classDB.get_method_bind("Viewport\000", "set_use_debanding\000", 2586408642)
		methodViewport[18] = classDB.get_method_bind("Viewport\000", "is_using_debanding\000", 36873697)
		methodViewport[19] = classDB.get_method_bind("Viewport\000", "set_use_occlusion_culling\000", 2586408642)
		methodViewport[20] = classDB.get_method_bind("Viewport\000", "is_using_occlusion_culling\000", 36873697)
		methodViewport[21] = classDB.get_method_bind("Viewport\000", "set_debug_draw\000", 1970246205)
		methodViewport[22] = classDB.get_method_bind("Viewport\000", "get_debug_draw\000", 579191299)
		methodViewport[23] = classDB.get_method_bind("Viewport\000", "get_render_info\000", 481977019)
		methodViewport[24] = classDB.get_method_bind("Viewport\000", "get_texture\000", 1746695840)
		methodViewport[25] = classDB.get_method_bind("Viewport\000", "set_physics_object_picking\000", 2586408642)
		methodViewport[26] = classDB.get_method_bind("Viewport\000", "get_physics_object_picking\000", 2240911060)
		methodViewport[27] = classDB.get_method_bind("Viewport\000", "get_viewport_rid\000", 2944877500)
		methodViewport[28] = classDB.get_method_bind("Viewport\000", "push_text_input\000", 83702148)
		methodViewport[29] = classDB.get_method_bind("Viewport\000", "push_input\000", 3644664830)
		methodViewport[30] = classDB.get_method_bind("Viewport\000", "push_unhandled_input\000", 3644664830)
		methodViewport[31] = classDB.get_method_bind("Viewport\000", "get_camera_2d\000", 3551466917)
		methodViewport[32] = classDB.get_method_bind("Viewport\000", "set_as_audio_listener_2d\000", 2586408642)
		methodViewport[33] = classDB.get_method_bind("Viewport\000", "is_audio_listener_2d\000", 36873697)
		methodViewport[34] = classDB.get_method_bind("Viewport\000", "get_mouse_position\000", 3341600327)
		methodViewport[35] = classDB.get_method_bind("Viewport\000", "warp_mouse\000", 743155724)
		methodViewport[36] = classDB.get_method_bind("Viewport\000", "gui_get_drag_data\000", 1214101251)
		methodViewport[37] = classDB.get_method_bind("Viewport\000", "gui_is_dragging\000", 36873697)
		methodViewport[38] = classDB.get_method_bind("Viewport\000", "gui_is_drag_successful\000", 36873697)
		methodViewport[39] = classDB.get_method_bind("Viewport\000", "gui_release_focus\000", 3218959716)
		methodViewport[40] = classDB.get_method_bind("Viewport\000", "gui_get_focus_owner\000", 829782337)
		methodViewport[41] = classDB.get_method_bind("Viewport\000", "set_disable_input\000", 2586408642)
		methodViewport[42] = classDB.get_method_bind("Viewport\000", "is_input_disabled\000", 36873697)
		methodViewport[43] = classDB.get_method_bind("Viewport\000", "set_positional_shadow_atlas_size\000", 1286410249)
		methodViewport[44] = classDB.get_method_bind("Viewport\000", "get_positional_shadow_atlas_size\000", 3905245786)
		methodViewport[45] = classDB.get_method_bind("Viewport\000", "set_positional_shadow_atlas_16_bits\000", 2586408642)
		methodViewport[46] = classDB.get_method_bind("Viewport\000", "get_positional_shadow_atlas_16_bits\000", 36873697)
		methodViewport[47] = classDB.get_method_bind("Viewport\000", "set_snap_controls_to_pixels\000", 2586408642)
		methodViewport[48] = classDB.get_method_bind("Viewport\000", "is_snap_controls_to_pixels_enabled\000", 36873697)
		methodViewport[49] = classDB.get_method_bind("Viewport\000", "set_snap_2d_transforms_to_pixel\000", 2586408642)
		methodViewport[50] = classDB.get_method_bind("Viewport\000", "is_snap_2d_transforms_to_pixel_enabled\000", 36873697)
		methodViewport[51] = classDB.get_method_bind("Viewport\000", "set_snap_2d_vertices_to_pixel\000", 2586408642)
		methodViewport[52] = classDB.get_method_bind("Viewport\000", "is_snap_2d_vertices_to_pixel_enabled\000", 36873697)
		methodViewport[53] = classDB.get_method_bind("Viewport\000", "set_positional_shadow_atlas_quadrant_subdiv\000", 2596956071)
		methodViewport[54] = classDB.get_method_bind("Viewport\000", "get_positional_shadow_atlas_quadrant_subdiv\000", 2676778355)
		methodViewport[55] = classDB.get_method_bind("Viewport\000", "set_input_as_handled\000", 3218959716)
		methodViewport[56] = classDB.get_method_bind("Viewport\000", "is_input_handled\000", 36873697)
		methodViewport[57] = classDB.get_method_bind("Viewport\000", "set_handle_input_locally\000", 2586408642)
		methodViewport[58] = classDB.get_method_bind("Viewport\000", "is_handling_input_locally\000", 36873697)
		methodViewport[59] = classDB.get_method_bind("Viewport\000", "set_default_canvas_item_texture_filter\000", 2815160100)
		methodViewport[60] = classDB.get_method_bind("Viewport\000", "get_default_canvas_item_texture_filter\000", 896601198)
		methodViewport[61] = classDB.get_method_bind("Viewport\000", "set_embedding_subwindows\000", 2586408642)
		methodViewport[62] = classDB.get_method_bind("Viewport\000", "is_embedding_subwindows\000", 36873697)
		methodViewport[63] = classDB.get_method_bind("Viewport\000", "set_default_canvas_item_texture_repeat\000", 1658513413)
		methodViewport[64] = classDB.get_method_bind("Viewport\000", "get_default_canvas_item_texture_repeat\000", 4049774160)
		methodViewport[65] = classDB.get_method_bind("Viewport\000", "set_sdf_oversize\000", 2574159017)
		methodViewport[66] = classDB.get_method_bind("Viewport\000", "get_sdf_oversize\000", 2631427510)
		methodViewport[67] = classDB.get_method_bind("Viewport\000", "set_sdf_scale\000", 1402773951)
		methodViewport[68] = classDB.get_method_bind("Viewport\000", "get_sdf_scale\000", 3162688184)
		methodViewport[69] = classDB.get_method_bind("Viewport\000", "set_mesh_lod_threshold\000", 373806689)
		methodViewport[70] = classDB.get_method_bind("Viewport\000", "get_mesh_lod_threshold\000", 1740695150)
		methodViewport[71] = classDB.get_method_bind("Viewport\000", "set_world_3d\000", 1400875337)
		methodViewport[72] = classDB.get_method_bind("Viewport\000", "get_world_3d\000", 317588385)
		methodViewport[73] = classDB.get_method_bind("Viewport\000", "find_world_3d\000", 317588385)
		methodViewport[74] = classDB.get_method_bind("Viewport\000", "set_use_own_world_3d\000", 2586408642)
		methodViewport[75] = classDB.get_method_bind("Viewport\000", "is_using_own_world_3d\000", 36873697)
		methodViewport[76] = classDB.get_method_bind("Viewport\000", "get_camera_3d\000", 2285090890)
		methodViewport[77] = classDB.get_method_bind("Viewport\000", "set_as_audio_listener_3d\000", 2586408642)
		methodViewport[78] = classDB.get_method_bind("Viewport\000", "is_audio_listener_3d\000", 36873697)
		methodViewport[79] = classDB.get_method_bind("Viewport\000", "set_disable_3d\000", 2586408642)
		methodViewport[80] = classDB.get_method_bind("Viewport\000", "is_3d_disabled\000", 36873697)
		methodViewport[81] = classDB.get_method_bind("Viewport\000", "set_use_xr\000", 2586408642)
		methodViewport[82] = classDB.get_method_bind("Viewport\000", "is_using_xr\000", 2240911060)
		methodViewport[83] = classDB.get_method_bind("Viewport\000", "set_scaling_3d_mode\000", 1531597597)
		methodViewport[84] = classDB.get_method_bind("Viewport\000", "get_scaling_3d_mode\000", 2597660574)
		methodViewport[85] = classDB.get_method_bind("Viewport\000", "set_scaling_3d_scale\000", 373806689)
		methodViewport[86] = classDB.get_method_bind("Viewport\000", "get_scaling_3d_scale\000", 1740695150)
		methodViewport[87] = classDB.get_method_bind("Viewport\000", "set_fsr_sharpness\000", 373806689)
		methodViewport[88] = classDB.get_method_bind("Viewport\000", "get_fsr_sharpness\000", 1740695150)
		methodViewport[89] = classDB.get_method_bind("Viewport\000", "set_texture_mipmap_bias\000", 373806689)
		methodViewport[90] = classDB.get_method_bind("Viewport\000", "get_texture_mipmap_bias\000", 1740695150)
		methodViewport[91] = classDB.get_method_bind("Viewport\000", "set_vrs_mode\000", 2749867817)
		methodViewport[92] = classDB.get_method_bind("Viewport\000", "get_vrs_mode\000", 349660525)
		methodViewport[93] = classDB.get_method_bind("Viewport\000", "set_vrs_texture\000", 4051416890)
		methodViewport[94] = classDB.get_method_bind("Viewport\000", "get_vrs_texture\000", 3635182373)
		methodViewportTexture[0] = classDB.get_method_bind("ViewportTexture\000", "set_viewport_path_in_scene\000", 1348162250)
		methodViewportTexture[1] = classDB.get_method_bind("ViewportTexture\000", "get_viewport_path_in_scene\000", 4075236667)
		methodVisibleOnScreenEnabler2D[0] = classDB.get_method_bind("VisibleOnScreenEnabler2D\000", "set_enable_mode\000", 2961788752)
		methodVisibleOnScreenEnabler2D[1] = classDB.get_method_bind("VisibleOnScreenEnabler2D\000", "get_enable_mode\000", 2650445576)
		methodVisibleOnScreenEnabler2D[2] = classDB.get_method_bind("VisibleOnScreenEnabler2D\000", "set_enable_node_path\000", 1348162250)
		methodVisibleOnScreenEnabler2D[3] = classDB.get_method_bind("VisibleOnScreenEnabler2D\000", "get_enable_node_path\000", 277076166)
		methodVisibleOnScreenEnabler3D[0] = classDB.get_method_bind("VisibleOnScreenEnabler3D\000", "set_enable_mode\000", 320303646)
		methodVisibleOnScreenEnabler3D[1] = classDB.get_method_bind("VisibleOnScreenEnabler3D\000", "get_enable_mode\000", 3352990031)
		methodVisibleOnScreenEnabler3D[2] = classDB.get_method_bind("VisibleOnScreenEnabler3D\000", "set_enable_node_path\000", 1348162250)
		methodVisibleOnScreenEnabler3D[3] = classDB.get_method_bind("VisibleOnScreenEnabler3D\000", "get_enable_node_path\000", 277076166)
		methodVisibleOnScreenNotifier2D[0] = classDB.get_method_bind("VisibleOnScreenNotifier2D\000", "set_rect\000", 2046264180)
		methodVisibleOnScreenNotifier2D[1] = classDB.get_method_bind("VisibleOnScreenNotifier2D\000", "get_rect\000", 1639390495)
		methodVisibleOnScreenNotifier2D[2] = classDB.get_method_bind("VisibleOnScreenNotifier2D\000", "is_on_screen\000", 36873697)
		methodVisibleOnScreenNotifier3D[0] = classDB.get_method_bind("VisibleOnScreenNotifier3D\000", "set_aabb\000", 259215842)
		methodVisibleOnScreenNotifier3D[1] = classDB.get_method_bind("VisibleOnScreenNotifier3D\000", "is_on_screen\000", 36873697)
		methodVisualInstance3D[0] = classDB.get_method_bind("VisualInstance3D\000", "set_base\000", 2722037293)
		methodVisualInstance3D[1] = classDB.get_method_bind("VisualInstance3D\000", "get_base\000", 2944877500)
		methodVisualInstance3D[2] = classDB.get_method_bind("VisualInstance3D\000", "get_instance\000", 2944877500)
		methodVisualInstance3D[3] = classDB.get_method_bind("VisualInstance3D\000", "set_layer_mask\000", 1286410249)
		methodVisualInstance3D[4] = classDB.get_method_bind("VisualInstance3D\000", "get_layer_mask\000", 3905245786)
		methodVisualInstance3D[5] = classDB.get_method_bind("VisualInstance3D\000", "set_layer_mask_value\000", 300928843)
		methodVisualInstance3D[6] = classDB.get_method_bind("VisualInstance3D\000", "get_layer_mask_value\000", 1116898809)
		methodVisualInstance3D[7] = classDB.get_method_bind("VisualInstance3D\000", "get_transformed_aabb\000", 1068685055)
		methodVisualInstance3D[8] = classDB.get_method_bind("VisualInstance3D\000", "get_aabb\000", 1068685055)
		methodVisualShader[0] = classDB.get_method_bind("VisualShader\000", "set_mode\000", 3978014962)
		methodVisualShader[1] = classDB.get_method_bind("VisualShader\000", "add_node\000", 1560769431)
		methodVisualShader[2] = classDB.get_method_bind("VisualShader\000", "get_node\000", 3784670312)
		methodVisualShader[3] = classDB.get_method_bind("VisualShader\000", "set_node_position\000", 2726660721)
		methodVisualShader[4] = classDB.get_method_bind("VisualShader\000", "get_node_position\000", 2175036082)
		methodVisualShader[5] = classDB.get_method_bind("VisualShader\000", "get_node_list\000", 2370592410)
		methodVisualShader[6] = classDB.get_method_bind("VisualShader\000", "get_valid_node_id\000", 629467342)
		methodVisualShader[7] = classDB.get_method_bind("VisualShader\000", "remove_node\000", 844050912)
		methodVisualShader[8] = classDB.get_method_bind("VisualShader\000", "replace_node\000", 3144735253)
		methodVisualShader[9] = classDB.get_method_bind("VisualShader\000", "is_node_connection\000", 3922381898)
		methodVisualShader[10] = classDB.get_method_bind("VisualShader\000", "can_connect_nodes\000", 3922381898)
		methodVisualShader[11] = classDB.get_method_bind("VisualShader\000", "connect_nodes\000", 3081049573)
		methodVisualShader[12] = classDB.get_method_bind("VisualShader\000", "disconnect_nodes\000", 2268060358)
		methodVisualShader[13] = classDB.get_method_bind("VisualShader\000", "connect_nodes_forced\000", 2268060358)
		methodVisualShader[14] = classDB.get_method_bind("VisualShader\000", "get_node_connections\000", 1441964831)
		methodVisualShader[15] = classDB.get_method_bind("VisualShader\000", "set_graph_offset\000", 743155724)
		methodVisualShader[16] = classDB.get_method_bind("VisualShader\000", "get_graph_offset\000", 3341600327)
		methodVisualShader[17] = classDB.get_method_bind("VisualShader\000", "add_varying\000", 2084110726)
		methodVisualShader[18] = classDB.get_method_bind("VisualShader\000", "remove_varying\000", 83702148)
		methodVisualShader[19] = classDB.get_method_bind("VisualShader\000", "has_varying\000", 3927539163)
		methodVisualShaderNode[0] = classDB.get_method_bind("VisualShaderNode\000", "set_output_port_for_preview\000", 1286410249)
		methodVisualShaderNode[1] = classDB.get_method_bind("VisualShaderNode\000", "get_output_port_for_preview\000", 3905245786)
		methodVisualShaderNode[2] = classDB.get_method_bind("VisualShaderNode\000", "set_input_port_default_value\000", 150923387)
		methodVisualShaderNode[3] = classDB.get_method_bind("VisualShaderNode\000", "get_input_port_default_value\000", 4227898402)
		methodVisualShaderNode[4] = classDB.get_method_bind("VisualShaderNode\000", "remove_input_port_default_value\000", 1286410249)
		methodVisualShaderNode[5] = classDB.get_method_bind("VisualShaderNode\000", "clear_default_input_values\000", 3218959716)
		methodVisualShaderNode[6] = classDB.get_method_bind("VisualShaderNode\000", "set_default_input_values\000", 381264803)
		methodVisualShaderNode[7] = classDB.get_method_bind("VisualShaderNode\000", "get_default_input_values\000", 3995934104)
		methodVisualShaderNodeBillboard[0] = classDB.get_method_bind("VisualShaderNodeBillboard\000", "set_billboard_type\000", 1227463289)
		methodVisualShaderNodeBillboard[1] = classDB.get_method_bind("VisualShaderNodeBillboard\000", "get_billboard_type\000", 3724188517)
		methodVisualShaderNodeBillboard[2] = classDB.get_method_bind("VisualShaderNodeBillboard\000", "set_keep_scale_enabled\000", 2586408642)
		methodVisualShaderNodeBillboard[3] = classDB.get_method_bind("VisualShaderNodeBillboard\000", "is_keep_scale_enabled\000", 36873697)
		methodVisualShaderNodeBooleanConstant[0] = classDB.get_method_bind("VisualShaderNodeBooleanConstant\000", "set_constant\000", 2586408642)
		methodVisualShaderNodeBooleanConstant[1] = classDB.get_method_bind("VisualShaderNodeBooleanConstant\000", "get_constant\000", 36873697)
		methodVisualShaderNodeBooleanUniform[0] = classDB.get_method_bind("VisualShaderNodeBooleanUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeBooleanUniform[1] = classDB.get_method_bind("VisualShaderNodeBooleanUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeBooleanUniform[2] = classDB.get_method_bind("VisualShaderNodeBooleanUniform\000", "set_default_value\000", 2586408642)
		methodVisualShaderNodeBooleanUniform[3] = classDB.get_method_bind("VisualShaderNodeBooleanUniform\000", "get_default_value\000", 36873697)
		methodVisualShaderNodeClamp[0] = classDB.get_method_bind("VisualShaderNodeClamp\000", "set_op_type\000", 405010749)
		methodVisualShaderNodeClamp[1] = classDB.get_method_bind("VisualShaderNodeClamp\000", "get_op_type\000", 233276050)
		methodVisualShaderNodeColorConstant[0] = classDB.get_method_bind("VisualShaderNodeColorConstant\000", "set_constant\000", 2920490490)
		methodVisualShaderNodeColorConstant[1] = classDB.get_method_bind("VisualShaderNodeColorConstant\000", "get_constant\000", 3444240500)
		methodVisualShaderNodeColorFunc[0] = classDB.get_method_bind("VisualShaderNodeColorFunc\000", "set_function\000", 3973396138)
		methodVisualShaderNodeColorFunc[1] = classDB.get_method_bind("VisualShaderNodeColorFunc\000", "get_function\000", 554863321)
		methodVisualShaderNodeColorOp[0] = classDB.get_method_bind("VisualShaderNodeColorOp\000", "set_operator\000", 4260370673)
		methodVisualShaderNodeColorOp[1] = classDB.get_method_bind("VisualShaderNodeColorOp\000", "get_operator\000", 1950956529)
		methodVisualShaderNodeColorUniform[0] = classDB.get_method_bind("VisualShaderNodeColorUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeColorUniform[1] = classDB.get_method_bind("VisualShaderNodeColorUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeColorUniform[2] = classDB.get_method_bind("VisualShaderNodeColorUniform\000", "set_default_value\000", 2920490490)
		methodVisualShaderNodeColorUniform[3] = classDB.get_method_bind("VisualShaderNodeColorUniform\000", "get_default_value\000", 3444240500)
		methodVisualShaderNodeComment[0] = classDB.get_method_bind("VisualShaderNodeComment\000", "set_title\000", 83702148)
		methodVisualShaderNodeComment[1] = classDB.get_method_bind("VisualShaderNodeComment\000", "get_title\000", 201670096)
		methodVisualShaderNodeComment[2] = classDB.get_method_bind("VisualShaderNodeComment\000", "set_description\000", 83702148)
		methodVisualShaderNodeComment[3] = classDB.get_method_bind("VisualShaderNodeComment\000", "get_description\000", 201670096)
		methodVisualShaderNodeCompare[0] = classDB.get_method_bind("VisualShaderNodeCompare\000", "set_comparison_type\000", 516558320)
		methodVisualShaderNodeCompare[1] = classDB.get_method_bind("VisualShaderNodeCompare\000", "get_comparison_type\000", 3495315961)
		methodVisualShaderNodeCompare[2] = classDB.get_method_bind("VisualShaderNodeCompare\000", "set_function\000", 2370951349)
		methodVisualShaderNodeCompare[3] = classDB.get_method_bind("VisualShaderNodeCompare\000", "get_function\000", 4089164265)
		methodVisualShaderNodeCompare[4] = classDB.get_method_bind("VisualShaderNodeCompare\000", "set_condition\000", 918742392)
		methodVisualShaderNodeCompare[5] = classDB.get_method_bind("VisualShaderNodeCompare\000", "get_condition\000", 3281078941)
		methodVisualShaderNodeCubemap[0] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "set_source\000", 1625400621)
		methodVisualShaderNodeCubemap[1] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "get_source\000", 2222048781)
		methodVisualShaderNodeCubemap[2] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "set_cube_map\000", 2219800736)
		methodVisualShaderNodeCubemap[3] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "get_cube_map\000", 1772111058)
		methodVisualShaderNodeCubemap[4] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "set_texture_type\000", 1899718876)
		methodVisualShaderNodeCubemap[5] = classDB.get_method_bind("VisualShaderNodeCubemap\000", "get_texture_type\000", 3356498888)
		methodVisualShaderNodeCurveTexture[0] = classDB.get_method_bind("VisualShaderNodeCurveTexture\000", "set_texture\000", 181872837)
		methodVisualShaderNodeCurveTexture[1] = classDB.get_method_bind("VisualShaderNodeCurveTexture\000", "get_texture\000", 2800800579)
		methodVisualShaderNodeCurveXYZTexture[0] = classDB.get_method_bind("VisualShaderNodeCurveXYZTexture\000", "set_texture\000", 8031783)
		methodVisualShaderNodeCurveXYZTexture[1] = classDB.get_method_bind("VisualShaderNodeCurveXYZTexture\000", "get_texture\000", 1950275015)
		methodVisualShaderNodeDerivativeFunc[0] = classDB.get_method_bind("VisualShaderNodeDerivativeFunc\000", "set_op_type\000", 377800221)
		methodVisualShaderNodeDerivativeFunc[1] = classDB.get_method_bind("VisualShaderNodeDerivativeFunc\000", "get_op_type\000", 3997800514)
		methodVisualShaderNodeDerivativeFunc[2] = classDB.get_method_bind("VisualShaderNodeDerivativeFunc\000", "set_function\000", 1944704156)
		methodVisualShaderNodeDerivativeFunc[3] = classDB.get_method_bind("VisualShaderNodeDerivativeFunc\000", "get_function\000", 2389093396)
		methodVisualShaderNodeExpression[0] = classDB.get_method_bind("VisualShaderNodeExpression\000", "set_expression\000", 83702148)
		methodVisualShaderNodeExpression[1] = classDB.get_method_bind("VisualShaderNodeExpression\000", "get_expression\000", 201670096)
		methodVisualShaderNodeFloatConstant[0] = classDB.get_method_bind("VisualShaderNodeFloatConstant\000", "set_constant\000", 373806689)
		methodVisualShaderNodeFloatConstant[1] = classDB.get_method_bind("VisualShaderNodeFloatConstant\000", "get_constant\000", 1740695150)
		methodVisualShaderNodeFloatFunc[0] = classDB.get_method_bind("VisualShaderNodeFloatFunc\000", "set_function\000", 536026177)
		methodVisualShaderNodeFloatFunc[1] = classDB.get_method_bind("VisualShaderNodeFloatFunc\000", "get_function\000", 2033948868)
		methodVisualShaderNodeFloatOp[0] = classDB.get_method_bind("VisualShaderNodeFloatOp\000", "set_operator\000", 2488468047)
		methodVisualShaderNodeFloatOp[1] = classDB.get_method_bind("VisualShaderNodeFloatOp\000", "get_operator\000", 1867979390)
		methodVisualShaderNodeFloatUniform[0] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_hint\000", 1381357203)
		methodVisualShaderNodeFloatUniform[1] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "get_hint\000", 569120385)
		methodVisualShaderNodeFloatUniform[2] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_min\000", 373806689)
		methodVisualShaderNodeFloatUniform[3] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "get_min\000", 1740695150)
		methodVisualShaderNodeFloatUniform[4] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_max\000", 373806689)
		methodVisualShaderNodeFloatUniform[5] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "get_max\000", 1740695150)
		methodVisualShaderNodeFloatUniform[6] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_step\000", 373806689)
		methodVisualShaderNodeFloatUniform[7] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "get_step\000", 1740695150)
		methodVisualShaderNodeFloatUniform[8] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeFloatUniform[9] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeFloatUniform[10] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "set_default_value\000", 373806689)
		methodVisualShaderNodeFloatUniform[11] = classDB.get_method_bind("VisualShaderNodeFloatUniform\000", "get_default_value\000", 1740695150)
		methodVisualShaderNodeGroupBase[0] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_inputs\000", 83702148)
		methodVisualShaderNodeGroupBase[1] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_inputs\000", 201670096)
		methodVisualShaderNodeGroupBase[2] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_outputs\000", 83702148)
		methodVisualShaderNodeGroupBase[3] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_outputs\000", 201670096)
		methodVisualShaderNodeGroupBase[4] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "is_valid_port_name\000", 3927539163)
		methodVisualShaderNodeGroupBase[5] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "add_input_port\000", 2285447957)
		methodVisualShaderNodeGroupBase[6] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "remove_input_port\000", 1286410249)
		methodVisualShaderNodeGroupBase[7] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_input_port_count\000", 3905245786)
		methodVisualShaderNodeGroupBase[8] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "has_input_port\000", 1116898809)
		methodVisualShaderNodeGroupBase[9] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "clear_input_ports\000", 3218959716)
		methodVisualShaderNodeGroupBase[10] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "add_output_port\000", 2285447957)
		methodVisualShaderNodeGroupBase[11] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "remove_output_port\000", 1286410249)
		methodVisualShaderNodeGroupBase[12] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_output_port_count\000", 3905245786)
		methodVisualShaderNodeGroupBase[13] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "has_output_port\000", 1116898809)
		methodVisualShaderNodeGroupBase[14] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "clear_output_ports\000", 3218959716)
		methodVisualShaderNodeGroupBase[15] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_input_port_name\000", 501894301)
		methodVisualShaderNodeGroupBase[16] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_input_port_type\000", 3937882851)
		methodVisualShaderNodeGroupBase[17] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_output_port_name\000", 501894301)
		methodVisualShaderNodeGroupBase[18] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "set_output_port_type\000", 3937882851)
		methodVisualShaderNodeGroupBase[19] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_free_input_port_id\000", 3905245786)
		methodVisualShaderNodeGroupBase[20] = classDB.get_method_bind("VisualShaderNodeGroupBase\000", "get_free_output_port_id\000", 3905245786)
		methodVisualShaderNodeInput[0] = classDB.get_method_bind("VisualShaderNodeInput\000", "set_input_name\000", 83702148)
		methodVisualShaderNodeInput[1] = classDB.get_method_bind("VisualShaderNodeInput\000", "get_input_name\000", 201670096)
		methodVisualShaderNodeInput[2] = classDB.get_method_bind("VisualShaderNodeInput\000", "get_input_real_name\000", 201670096)
		methodVisualShaderNodeIntConstant[0] = classDB.get_method_bind("VisualShaderNodeIntConstant\000", "set_constant\000", 1286410249)
		methodVisualShaderNodeIntConstant[1] = classDB.get_method_bind("VisualShaderNodeIntConstant\000", "get_constant\000", 3905245786)
		methodVisualShaderNodeIntFunc[0] = classDB.get_method_bind("VisualShaderNodeIntFunc\000", "set_function\000", 424195284)
		methodVisualShaderNodeIntFunc[1] = classDB.get_method_bind("VisualShaderNodeIntFunc\000", "get_function\000", 2753496911)
		methodVisualShaderNodeIntOp[0] = classDB.get_method_bind("VisualShaderNodeIntOp\000", "set_operator\000", 1677909323)
		methodVisualShaderNodeIntOp[1] = classDB.get_method_bind("VisualShaderNodeIntOp\000", "get_operator\000", 1236987913)
		methodVisualShaderNodeIntUniform[0] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_hint\000", 143686977)
		methodVisualShaderNodeIntUniform[1] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "get_hint\000", 1563206693)
		methodVisualShaderNodeIntUniform[2] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_min\000", 1286410249)
		methodVisualShaderNodeIntUniform[3] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "get_min\000", 3905245786)
		methodVisualShaderNodeIntUniform[4] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_max\000", 1286410249)
		methodVisualShaderNodeIntUniform[5] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "get_max\000", 3905245786)
		methodVisualShaderNodeIntUniform[6] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_step\000", 1286410249)
		methodVisualShaderNodeIntUniform[7] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "get_step\000", 3905245786)
		methodVisualShaderNodeIntUniform[8] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeIntUniform[9] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeIntUniform[10] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "set_default_value\000", 1286410249)
		methodVisualShaderNodeIntUniform[11] = classDB.get_method_bind("VisualShaderNodeIntUniform\000", "get_default_value\000", 3905245786)
		methodVisualShaderNodeIs[0] = classDB.get_method_bind("VisualShaderNodeIs\000", "set_function\000", 1438374690)
		methodVisualShaderNodeIs[1] = classDB.get_method_bind("VisualShaderNodeIs\000", "get_function\000", 580678557)
		methodVisualShaderNodeMix[0] = classDB.get_method_bind("VisualShaderNodeMix\000", "set_op_type\000", 3397501671)
		methodVisualShaderNodeMix[1] = classDB.get_method_bind("VisualShaderNodeMix\000", "get_op_type\000", 4013957297)
		methodVisualShaderNodeMultiplyAdd[0] = classDB.get_method_bind("VisualShaderNodeMultiplyAdd\000", "set_op_type\000", 1409862380)
		methodVisualShaderNodeMultiplyAdd[1] = classDB.get_method_bind("VisualShaderNodeMultiplyAdd\000", "get_op_type\000", 2823201991)
		methodVisualShaderNodeParticleAccelerator[0] = classDB.get_method_bind("VisualShaderNodeParticleAccelerator\000", "set_mode\000", 3457585749)
		methodVisualShaderNodeParticleAccelerator[1] = classDB.get_method_bind("VisualShaderNodeParticleAccelerator\000", "get_mode\000", 2660365633)
		methodVisualShaderNodeParticleEmit[0] = classDB.get_method_bind("VisualShaderNodeParticleEmit\000", "set_flags\000", 3960756792)
		methodVisualShaderNodeParticleEmit[1] = classDB.get_method_bind("VisualShaderNodeParticleEmit\000", "get_flags\000", 171277835)
		methodVisualShaderNodeParticleEmitter[0] = classDB.get_method_bind("VisualShaderNodeParticleEmitter\000", "set_mode_2d\000", 2586408642)
		methodVisualShaderNodeParticleEmitter[1] = classDB.get_method_bind("VisualShaderNodeParticleEmitter\000", "is_mode_2d\000", 36873697)
		methodVisualShaderNodeParticleMeshEmitter[0] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "set_mesh\000", 194775623)
		methodVisualShaderNodeParticleMeshEmitter[1] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "get_mesh\000", 1808005922)
		methodVisualShaderNodeParticleMeshEmitter[2] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "set_use_all_surfaces\000", 2586408642)
		methodVisualShaderNodeParticleMeshEmitter[3] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "is_use_all_surfaces\000", 36873697)
		methodVisualShaderNodeParticleMeshEmitter[4] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "set_surface_index\000", 1286410249)
		methodVisualShaderNodeParticleMeshEmitter[5] = classDB.get_method_bind("VisualShaderNodeParticleMeshEmitter\000", "get_surface_index\000", 3905245786)
		methodVisualShaderNodeParticleMultiplyByAxisAngle[0] = classDB.get_method_bind("VisualShaderNodeParticleMultiplyByAxisAngle\000", "set_degrees_mode\000", 2586408642)
		methodVisualShaderNodeParticleMultiplyByAxisAngle[1] = classDB.get_method_bind("VisualShaderNodeParticleMultiplyByAxisAngle\000", "is_degrees_mode\000", 36873697)
		methodVisualShaderNodeParticleRandomness[0] = classDB.get_method_bind("VisualShaderNodeParticleRandomness\000", "set_op_type\000", 2060089061)
		methodVisualShaderNodeParticleRandomness[1] = classDB.get_method_bind("VisualShaderNodeParticleRandomness\000", "get_op_type\000", 3597061078)
		methodVisualShaderNodeResizableBase[0] = classDB.get_method_bind("VisualShaderNodeResizableBase\000", "set_size\000", 743155724)
		methodVisualShaderNodeResizableBase[1] = classDB.get_method_bind("VisualShaderNodeResizableBase\000", "get_size\000", 3341600327)
		methodVisualShaderNodeSample3D[0] = classDB.get_method_bind("VisualShaderNodeSample3D\000", "set_source\000", 3315130991)
		methodVisualShaderNodeSample3D[1] = classDB.get_method_bind("VisualShaderNodeSample3D\000", "get_source\000", 1079494121)
		methodVisualShaderNodeSmoothStep[0] = classDB.get_method_bind("VisualShaderNodeSmoothStep\000", "set_op_type\000", 2427426148)
		methodVisualShaderNodeSmoothStep[1] = classDB.get_method_bind("VisualShaderNodeSmoothStep\000", "get_op_type\000", 359640855)
		methodVisualShaderNodeStep[0] = classDB.get_method_bind("VisualShaderNodeStep\000", "set_op_type\000", 715172489)
		methodVisualShaderNodeStep[1] = classDB.get_method_bind("VisualShaderNodeStep\000", "get_op_type\000", 3274022781)
		methodVisualShaderNodeSwitch[0] = classDB.get_method_bind("VisualShaderNodeSwitch\000", "set_op_type\000", 510471861)
		methodVisualShaderNodeSwitch[1] = classDB.get_method_bind("VisualShaderNodeSwitch\000", "get_op_type\000", 2517845071)
		methodVisualShaderNodeTexture[0] = classDB.get_method_bind("VisualShaderNodeTexture\000", "set_source\000", 905262939)
		methodVisualShaderNodeTexture[1] = classDB.get_method_bind("VisualShaderNodeTexture\000", "get_source\000", 2896297444)
		methodVisualShaderNodeTexture[2] = classDB.get_method_bind("VisualShaderNodeTexture\000", "set_texture\000", 4051416890)
		methodVisualShaderNodeTexture[3] = classDB.get_method_bind("VisualShaderNodeTexture\000", "get_texture\000", 3635182373)
		methodVisualShaderNodeTexture[4] = classDB.get_method_bind("VisualShaderNodeTexture\000", "set_texture_type\000", 986314081)
		methodVisualShaderNodeTexture[5] = classDB.get_method_bind("VisualShaderNodeTexture\000", "get_texture_type\000", 3290430153)
		methodVisualShaderNodeTexture2DArray[0] = classDB.get_method_bind("VisualShaderNodeTexture2DArray\000", "set_texture_array\000", 2206200446)
		methodVisualShaderNodeTexture2DArray[1] = classDB.get_method_bind("VisualShaderNodeTexture2DArray\000", "get_texture_array\000", 146117123)
		methodVisualShaderNodeTexture3D[0] = classDB.get_method_bind("VisualShaderNodeTexture3D\000", "set_texture\000", 1188404210)
		methodVisualShaderNodeTexture3D[1] = classDB.get_method_bind("VisualShaderNodeTexture3D\000", "get_texture\000", 373985333)
		methodVisualShaderNodeTextureUniform[0] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "set_texture_type\000", 3894235364)
		methodVisualShaderNodeTextureUniform[1] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "get_texture_type\000", 244818602)
		methodVisualShaderNodeTextureUniform[2] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "set_color_default\000", 2490959881)
		methodVisualShaderNodeTextureUniform[3] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "get_color_default\000", 2357923939)
		methodVisualShaderNodeTextureUniform[4] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "set_texture_filter\000", 1608887800)
		methodVisualShaderNodeTextureUniform[5] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "get_texture_filter\000", 2790632769)
		methodVisualShaderNodeTextureUniform[6] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "set_texture_repeat\000", 1498268787)
		methodVisualShaderNodeTextureUniform[7] = classDB.get_method_bind("VisualShaderNodeTextureUniform\000", "get_texture_repeat\000", 98242067)
		methodVisualShaderNodeTransformConstant[0] = classDB.get_method_bind("VisualShaderNodeTransformConstant\000", "set_constant\000", 2952846383)
		methodVisualShaderNodeTransformConstant[1] = classDB.get_method_bind("VisualShaderNodeTransformConstant\000", "get_constant\000", 3229777777)
		methodVisualShaderNodeTransformFunc[0] = classDB.get_method_bind("VisualShaderNodeTransformFunc\000", "set_function\000", 2900990409)
		methodVisualShaderNodeTransformFunc[1] = classDB.get_method_bind("VisualShaderNodeTransformFunc\000", "get_function\000", 2839926569)
		methodVisualShaderNodeTransformOp[0] = classDB.get_method_bind("VisualShaderNodeTransformOp\000", "set_operator\000", 2287310733)
		methodVisualShaderNodeTransformOp[1] = classDB.get_method_bind("VisualShaderNodeTransformOp\000", "get_operator\000", 1238663601)
		methodVisualShaderNodeTransformUniform[0] = classDB.get_method_bind("VisualShaderNodeTransformUniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeTransformUniform[1] = classDB.get_method_bind("VisualShaderNodeTransformUniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeTransformUniform[2] = classDB.get_method_bind("VisualShaderNodeTransformUniform\000", "set_default_value\000", 2952846383)
		methodVisualShaderNodeTransformUniform[3] = classDB.get_method_bind("VisualShaderNodeTransformUniform\000", "get_default_value\000", 3229777777)
		methodVisualShaderNodeTransformVecMult[0] = classDB.get_method_bind("VisualShaderNodeTransformVecMult\000", "set_operator\000", 1785665912)
		methodVisualShaderNodeTransformVecMult[1] = classDB.get_method_bind("VisualShaderNodeTransformVecMult\000", "get_operator\000", 1622088722)
		methodVisualShaderNodeUVFunc[0] = classDB.get_method_bind("VisualShaderNodeUVFunc\000", "set_function\000", 765791915)
		methodVisualShaderNodeUVFunc[1] = classDB.get_method_bind("VisualShaderNodeUVFunc\000", "get_function\000", 3772902164)
		methodVisualShaderNodeUniform[0] = classDB.get_method_bind("VisualShaderNodeUniform\000", "set_uniform_name\000", 83702148)
		methodVisualShaderNodeUniform[1] = classDB.get_method_bind("VisualShaderNodeUniform\000", "get_uniform_name\000", 201670096)
		methodVisualShaderNodeUniform[2] = classDB.get_method_bind("VisualShaderNodeUniform\000", "set_qualifier\000", 1917199311)
		methodVisualShaderNodeUniform[3] = classDB.get_method_bind("VisualShaderNodeUniform\000", "get_qualifier\000", 3211552365)
		methodVisualShaderNodeUniformRef[0] = classDB.get_method_bind("VisualShaderNodeUniformRef\000", "set_uniform_name\000", 83702148)
		methodVisualShaderNodeUniformRef[1] = classDB.get_method_bind("VisualShaderNodeUniformRef\000", "get_uniform_name\000", 201670096)
		methodVisualShaderNodeVarying[0] = classDB.get_method_bind("VisualShaderNodeVarying\000", "set_varying_name\000", 83702148)
		methodVisualShaderNodeVarying[1] = classDB.get_method_bind("VisualShaderNodeVarying\000", "get_varying_name\000", 201670096)
		methodVisualShaderNodeVarying[2] = classDB.get_method_bind("VisualShaderNodeVarying\000", "set_varying_type\000", 3565867981)
		methodVisualShaderNodeVarying[3] = classDB.get_method_bind("VisualShaderNodeVarying\000", "get_varying_type\000", 523183580)
		methodVisualShaderNodeVec2Constant[0] = classDB.get_method_bind("VisualShaderNodeVec2Constant\000", "set_constant\000", 743155724)
		methodVisualShaderNodeVec2Constant[1] = classDB.get_method_bind("VisualShaderNodeVec2Constant\000", "get_constant\000", 3341600327)
		methodVisualShaderNodeVec2Uniform[0] = classDB.get_method_bind("VisualShaderNodeVec2Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec2Uniform[1] = classDB.get_method_bind("VisualShaderNodeVec2Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec2Uniform[2] = classDB.get_method_bind("VisualShaderNodeVec2Uniform\000", "set_default_value\000", 743155724)
		methodVisualShaderNodeVec2Uniform[3] = classDB.get_method_bind("VisualShaderNodeVec2Uniform\000", "get_default_value\000", 3341600327)
		methodVisualShaderNodeVec3Constant[0] = classDB.get_method_bind("VisualShaderNodeVec3Constant\000", "set_constant\000", 3460891852)
		methodVisualShaderNodeVec3Constant[1] = classDB.get_method_bind("VisualShaderNodeVec3Constant\000", "get_constant\000", 3360562783)
		methodVisualShaderNodeVec3Uniform[0] = classDB.get_method_bind("VisualShaderNodeVec3Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec3Uniform[1] = classDB.get_method_bind("VisualShaderNodeVec3Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec3Uniform[2] = classDB.get_method_bind("VisualShaderNodeVec3Uniform\000", "set_default_value\000", 3460891852)
		methodVisualShaderNodeVec3Uniform[3] = classDB.get_method_bind("VisualShaderNodeVec3Uniform\000", "get_default_value\000", 3360562783)
		methodVisualShaderNodeVec4Constant[0] = classDB.get_method_bind("VisualShaderNodeVec4Constant\000", "set_constant\000", 1727505552)
		methodVisualShaderNodeVec4Constant[1] = classDB.get_method_bind("VisualShaderNodeVec4Constant\000", "get_constant\000", 1222331677)
		methodVisualShaderNodeVec4Uniform[0] = classDB.get_method_bind("VisualShaderNodeVec4Uniform\000", "set_default_value_enabled\000", 2586408642)
		methodVisualShaderNodeVec4Uniform[1] = classDB.get_method_bind("VisualShaderNodeVec4Uniform\000", "is_default_value_enabled\000", 36873697)
		methodVisualShaderNodeVec4Uniform[2] = classDB.get_method_bind("VisualShaderNodeVec4Uniform\000", "set_default_value\000", 1727505552)
		methodVisualShaderNodeVec4Uniform[3] = classDB.get_method_bind("VisualShaderNodeVec4Uniform\000", "get_default_value\000", 1222331677)
		methodVisualShaderNodeVectorBase[0] = classDB.get_method_bind("VisualShaderNodeVectorBase\000", "set_op_type\000", 1692596998)
		methodVisualShaderNodeVectorBase[1] = classDB.get_method_bind("VisualShaderNodeVectorBase\000", "get_op_type\000", 2568738462)
		methodVisualShaderNodeVectorFunc[0] = classDB.get_method_bind("VisualShaderNodeVectorFunc\000", "set_function\000", 629964457)
		methodVisualShaderNodeVectorFunc[1] = classDB.get_method_bind("VisualShaderNodeVectorFunc\000", "get_function\000", 4047776843)
		methodVisualShaderNodeVectorOp[0] = classDB.get_method_bind("VisualShaderNodeVectorOp\000", "set_operator\000", 3371507302)
		methodVisualShaderNodeVectorOp[1] = classDB.get_method_bind("VisualShaderNodeVectorOp\000", "get_operator\000", 11793929)
		methodVoxelGI[0] = classDB.get_method_bind("VoxelGI\000", "set_probe_data\000", 1637849675)
		methodVoxelGI[1] = classDB.get_method_bind("VoxelGI\000", "get_probe_data\000", 1730645405)
		methodVoxelGI[2] = classDB.get_method_bind("VoxelGI\000", "set_subdiv\000", 2240898472)
		methodVoxelGI[3] = classDB.get_method_bind("VoxelGI\000", "get_subdiv\000", 4261647950)
		methodVoxelGI[4] = classDB.get_method_bind("VoxelGI\000", "set_extents\000", 3460891852)
		methodVoxelGI[5] = classDB.get_method_bind("VoxelGI\000", "get_extents\000", 3360562783)
		methodVoxelGI[6] = classDB.get_method_bind("VoxelGI\000", "bake\000", 2781551026)
		methodVoxelGI[7] = classDB.get_method_bind("VoxelGI\000", "debug_bake\000", 3218959716)
		methodVoxelGIData[0] = classDB.get_method_bind("VoxelGIData\000", "allocate\000", 4041601946)
		methodVoxelGIData[1] = classDB.get_method_bind("VoxelGIData\000", "get_bounds\000", 1068685055)
		methodVoxelGIData[2] = classDB.get_method_bind("VoxelGIData\000", "get_octree_size\000", 3360562783)
		methodVoxelGIData[3] = classDB.get_method_bind("VoxelGIData\000", "get_to_cell_xform\000", 3229777777)
		methodVoxelGIData[4] = classDB.get_method_bind("VoxelGIData\000", "get_octree_cells\000", 2362200018)
		methodVoxelGIData[5] = classDB.get_method_bind("VoxelGIData\000", "get_data_cells\000", 2362200018)
		methodVoxelGIData[6] = classDB.get_method_bind("VoxelGIData\000", "get_level_counts\000", 1930428628)
		methodVoxelGIData[7] = classDB.get_method_bind("VoxelGIData\000", "set_dynamic_range\000", 373806689)
		methodVoxelGIData[8] = classDB.get_method_bind("VoxelGIData\000", "get_dynamic_range\000", 1740695150)
		methodVoxelGIData[9] = classDB.get_method_bind("VoxelGIData\000", "set_energy\000", 373806689)
		methodVoxelGIData[10] = classDB.get_method_bind("VoxelGIData\000", "get_energy\000", 1740695150)
		methodVoxelGIData[11] = classDB.get_method_bind("VoxelGIData\000", "set_bias\000", 373806689)
		methodVoxelGIData[12] = classDB.get_method_bind("VoxelGIData\000", "get_bias\000", 1740695150)
		methodVoxelGIData[13] = classDB.get_method_bind("VoxelGIData\000", "set_normal_bias\000", 373806689)
		methodVoxelGIData[14] = classDB.get_method_bind("VoxelGIData\000", "get_normal_bias\000", 1740695150)
		methodVoxelGIData[15] = classDB.get_method_bind("VoxelGIData\000", "set_propagation\000", 373806689)
		methodVoxelGIData[16] = classDB.get_method_bind("VoxelGIData\000", "get_propagation\000", 1740695150)
		methodVoxelGIData[17] = classDB.get_method_bind("VoxelGIData\000", "set_interior\000", 2586408642)
		methodVoxelGIData[18] = classDB.get_method_bind("VoxelGIData\000", "is_interior\000", 36873697)
		methodVoxelGIData[19] = classDB.get_method_bind("VoxelGIData\000", "set_use_two_bounces\000", 2586408642)
		methodVoxelGIData[20] = classDB.get_method_bind("VoxelGIData\000", "is_using_two_bounces\000", 36873697)
		methodWeakRef[0] = classDB.get_method_bind("WeakRef\000", "get_ref\000", 1214101251)
		methodWebRTCDataChannel[0] = classDB.get_method_bind("WebRTCDataChannel\000", "poll\000", 166280745)
		methodWebRTCDataChannel[1] = classDB.get_method_bind("WebRTCDataChannel\000", "close\000", 3218959716)
		methodWebRTCDataChannel[2] = classDB.get_method_bind("WebRTCDataChannel\000", "was_string_packet\000", 36873697)
		methodWebRTCDataChannel[3] = classDB.get_method_bind("WebRTCDataChannel\000", "set_write_mode\000", 1999768052)
		methodWebRTCDataChannel[4] = classDB.get_method_bind("WebRTCDataChannel\000", "get_write_mode\000", 2848495172)
		methodWebRTCDataChannel[5] = classDB.get_method_bind("WebRTCDataChannel\000", "get_ready_state\000", 3501143017)
		methodWebRTCDataChannel[6] = classDB.get_method_bind("WebRTCDataChannel\000", "get_label\000", 201670096)
		methodWebRTCDataChannel[7] = classDB.get_method_bind("WebRTCDataChannel\000", "is_ordered\000", 36873697)
		methodWebRTCDataChannel[8] = classDB.get_method_bind("WebRTCDataChannel\000", "get_id\000", 3905245786)
		methodWebRTCDataChannel[9] = classDB.get_method_bind("WebRTCDataChannel\000", "get_max_packet_life_time\000", 3905245786)
		methodWebRTCDataChannel[10] = classDB.get_method_bind("WebRTCDataChannel\000", "get_max_retransmits\000", 3905245786)
		methodWebRTCDataChannel[11] = classDB.get_method_bind("WebRTCDataChannel\000", "get_protocol\000", 201670096)
		methodWebRTCDataChannel[12] = classDB.get_method_bind("WebRTCDataChannel\000", "is_negotiated\000", 36873697)
		methodWebRTCDataChannel[13] = classDB.get_method_bind("WebRTCDataChannel\000", "get_buffered_amount\000", 3905245786)
		methodWebRTCMultiplayerPeer[0] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "initialize\000", 3613820124)
		methodWebRTCMultiplayerPeer[1] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "add_peer\000", 2555866323)
		methodWebRTCMultiplayerPeer[2] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "remove_peer\000", 1286410249)
		methodWebRTCMultiplayerPeer[3] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "has_peer\000", 3067735520)
		methodWebRTCMultiplayerPeer[4] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "get_peer\000", 3554694381)
		methodWebRTCMultiplayerPeer[5] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "get_peers\000", 2382534195)
		methodWebRTCMultiplayerPeer[6] = classDB.get_method_bind("WebRTCMultiplayerPeer\000", "close\000", 3218959716)
		methodWebRTCPeerConnection[0] = classDB.get_method_bind("WebRTCPeerConnection\000", "set_default_extension\000", 3304788590)
		methodWebRTCPeerConnection[1] = classDB.get_method_bind("WebRTCPeerConnection\000", "initialize\000", 2625064318)
		methodWebRTCPeerConnection[2] = classDB.get_method_bind("WebRTCPeerConnection\000", "create_data_channel\000", 3997447457)
		methodWebRTCPeerConnection[3] = classDB.get_method_bind("WebRTCPeerConnection\000", "create_offer\000", 166280745)
		methodWebRTCPeerConnection[4] = classDB.get_method_bind("WebRTCPeerConnection\000", "set_local_description\000", 852856452)
		methodWebRTCPeerConnection[5] = classDB.get_method_bind("WebRTCPeerConnection\000", "set_remote_description\000", 852856452)
		methodWebRTCPeerConnection[6] = classDB.get_method_bind("WebRTCPeerConnection\000", "add_ice_candidate\000", 3958950400)
		methodWebRTCPeerConnection[7] = classDB.get_method_bind("WebRTCPeerConnection\000", "poll\000", 166280745)
		methodWebRTCPeerConnection[8] = classDB.get_method_bind("WebRTCPeerConnection\000", "close\000", 3218959716)
		methodWebRTCPeerConnection[9] = classDB.get_method_bind("WebRTCPeerConnection\000", "get_connection_state\000", 2275710506)
		methodWebSocketClient[0] = classDB.get_method_bind("WebSocketClient\000", "connect_to_url\000", 2284355069)
		methodWebSocketClient[1] = classDB.get_method_bind("WebSocketClient\000", "disconnect_from_host\000", 1047156615)
		methodWebSocketClient[2] = classDB.get_method_bind("WebSocketClient\000", "get_connected_host\000", 201670096)
		methodWebSocketClient[3] = classDB.get_method_bind("WebSocketClient\000", "get_connected_port\000", 3905245786)
		methodWebSocketClient[4] = classDB.get_method_bind("WebSocketClient\000", "set_verify_ssl_enabled\000", 2586408642)
		methodWebSocketClient[5] = classDB.get_method_bind("WebSocketClient\000", "is_verify_ssl_enabled\000", 36873697)
		methodWebSocketClient[6] = classDB.get_method_bind("WebSocketClient\000", "get_trusted_ssl_certificate\000", 1120709175)
		methodWebSocketClient[7] = classDB.get_method_bind("WebSocketClient\000", "set_trusted_ssl_certificate\000", 1793585120)
		methodWebSocketMultiplayerPeer[0] = classDB.get_method_bind("WebSocketMultiplayerPeer\000", "set_buffers\000", 3684568301)
		methodWebSocketMultiplayerPeer[1] = classDB.get_method_bind("WebSocketMultiplayerPeer\000", "get_peer\000", 1381378851)
		methodWebSocketPeer[0] = classDB.get_method_bind("WebSocketPeer\000", "get_write_mode\000", 1797831585)
		methodWebSocketPeer[1] = classDB.get_method_bind("WebSocketPeer\000", "set_write_mode\000", 96037162)
		methodWebSocketPeer[2] = classDB.get_method_bind("WebSocketPeer\000", "is_connected_to_host\000", 36873697)
		methodWebSocketPeer[3] = classDB.get_method_bind("WebSocketPeer\000", "was_string_packet\000", 36873697)
		methodWebSocketPeer[4] = classDB.get_method_bind("WebSocketPeer\000", "close\000", 1047156615)
		methodWebSocketPeer[5] = classDB.get_method_bind("WebSocketPeer\000", "get_connected_host\000", 201670096)
		methodWebSocketPeer[6] = classDB.get_method_bind("WebSocketPeer\000", "get_connected_port\000", 3905245786)
		methodWebSocketPeer[7] = classDB.get_method_bind("WebSocketPeer\000", "set_no_delay\000", 2586408642)
		methodWebSocketPeer[8] = classDB.get_method_bind("WebSocketPeer\000", "get_current_outbound_buffered_amount\000", 3905245786)
		methodWebSocketServer[0] = classDB.get_method_bind("WebSocketServer\000", "is_listening\000", 36873697)
		methodWebSocketServer[1] = classDB.get_method_bind("WebSocketServer\000", "set_extra_headers\000", 2328480543)
		methodWebSocketServer[2] = classDB.get_method_bind("WebSocketServer\000", "listen\000", 4229601608)
		methodWebSocketServer[3] = classDB.get_method_bind("WebSocketServer\000", "stop\000", 3218959716)
		methodWebSocketServer[4] = classDB.get_method_bind("WebSocketServer\000", "has_peer\000", 1116898809)
		methodWebSocketServer[5] = classDB.get_method_bind("WebSocketServer\000", "get_peer_address\000", 844755477)
		methodWebSocketServer[6] = classDB.get_method_bind("WebSocketServer\000", "get_peer_port\000", 923996154)
		methodWebSocketServer[7] = classDB.get_method_bind("WebSocketServer\000", "disconnect_peer\000", 2976048447)
		methodWebSocketServer[8] = classDB.get_method_bind("WebSocketServer\000", "get_bind_ip\000", 201670096)
		methodWebSocketServer[9] = classDB.get_method_bind("WebSocketServer\000", "set_bind_ip\000", 83702148)
		methodWebSocketServer[10] = classDB.get_method_bind("WebSocketServer\000", "get_private_key\000", 2119971811)
		methodWebSocketServer[11] = classDB.get_method_bind("WebSocketServer\000", "set_private_key\000", 3770317738)
		methodWebSocketServer[12] = classDB.get_method_bind("WebSocketServer\000", "get_ssl_certificate\000", 1120709175)
		methodWebSocketServer[13] = classDB.get_method_bind("WebSocketServer\000", "set_ssl_certificate\000", 1793585120)
		methodWebSocketServer[14] = classDB.get_method_bind("WebSocketServer\000", "get_ca_chain\000", 1120709175)
		methodWebSocketServer[15] = classDB.get_method_bind("WebSocketServer\000", "set_ca_chain\000", 1793585120)
		methodWebSocketServer[16] = classDB.get_method_bind("WebSocketServer\000", "get_handshake_timeout\000", 1740695150)
		methodWebSocketServer[17] = classDB.get_method_bind("WebSocketServer\000", "set_handshake_timeout\000", 373806689)
		methodWebXRInterface[0] = classDB.get_method_bind("WebXRInterface\000", "is_session_supported\000", 83702148)
		methodWebXRInterface[1] = classDB.get_method_bind("WebXRInterface\000", "set_session_mode\000", 83702148)
		methodWebXRInterface[2] = classDB.get_method_bind("WebXRInterface\000", "get_session_mode\000", 201670096)
		methodWebXRInterface[3] = classDB.get_method_bind("WebXRInterface\000", "set_required_features\000", 83702148)
		methodWebXRInterface[4] = classDB.get_method_bind("WebXRInterface\000", "get_required_features\000", 201670096)
		methodWebXRInterface[5] = classDB.get_method_bind("WebXRInterface\000", "set_optional_features\000", 83702148)
		methodWebXRInterface[6] = classDB.get_method_bind("WebXRInterface\000", "get_optional_features\000", 201670096)
		methodWebXRInterface[7] = classDB.get_method_bind("WebXRInterface\000", "get_reference_space_type\000", 201670096)
		methodWebXRInterface[8] = classDB.get_method_bind("WebXRInterface\000", "set_requested_reference_space_types\000", 83702148)
		methodWebXRInterface[9] = classDB.get_method_bind("WebXRInterface\000", "get_requested_reference_space_types\000", 201670096)
		methodWebXRInterface[10] = classDB.get_method_bind("WebXRInterface\000", "get_controller\000", 636011756)
		methodWebXRInterface[11] = classDB.get_method_bind("WebXRInterface\000", "get_visibility_state\000", 201670096)
		methodWebXRInterface[12] = classDB.get_method_bind("WebXRInterface\000", "get_bounds_geometry\000", 497664490)
		methodWindow[0] = classDB.get_method_bind("Window\000", "set_title\000", 83702148)
		methodWindow[1] = classDB.get_method_bind("Window\000", "get_title\000", 201670096)
		methodWindow[2] = classDB.get_method_bind("Window\000", "set_current_screen\000", 1286410249)
		methodWindow[3] = classDB.get_method_bind("Window\000", "get_current_screen\000", 3905245786)
		methodWindow[4] = classDB.get_method_bind("Window\000", "set_position\000", 1130785943)
		methodWindow[5] = classDB.get_method_bind("Window\000", "get_position\000", 3690982128)
		methodWindow[6] = classDB.get_method_bind("Window\000", "set_size\000", 1130785943)
		methodWindow[7] = classDB.get_method_bind("Window\000", "get_size\000", 3690982128)
		methodWindow[8] = classDB.get_method_bind("Window\000", "reset_size\000", 3218959716)
		methodWindow[9] = classDB.get_method_bind("Window\000", "get_real_size\000", 3690982128)
		methodWindow[10] = classDB.get_method_bind("Window\000", "set_max_size\000", 1130785943)
		methodWindow[11] = classDB.get_method_bind("Window\000", "get_max_size\000", 3690982128)
		methodWindow[12] = classDB.get_method_bind("Window\000", "set_min_size\000", 1130785943)
		methodWindow[13] = classDB.get_method_bind("Window\000", "get_min_size\000", 3690982128)
		methodWindow[14] = classDB.get_method_bind("Window\000", "set_mode\000", 3095236531)
		methodWindow[15] = classDB.get_method_bind("Window\000", "get_mode\000", 2566346114)
		methodWindow[16] = classDB.get_method_bind("Window\000", "set_flag\000", 3426449779)
		methodWindow[17] = classDB.get_method_bind("Window\000", "get_flag\000", 3062752289)
		methodWindow[18] = classDB.get_method_bind("Window\000", "is_maximize_allowed\000", 36873697)
		methodWindow[19] = classDB.get_method_bind("Window\000", "request_attention\000", 3218959716)
		methodWindow[20] = classDB.get_method_bind("Window\000", "move_to_foreground\000", 3218959716)
		methodWindow[21] = classDB.get_method_bind("Window\000", "set_visible\000", 2586408642)
		methodWindow[22] = classDB.get_method_bind("Window\000", "is_visible\000", 36873697)
		methodWindow[23] = classDB.get_method_bind("Window\000", "hide\000", 3218959716)
		methodWindow[24] = classDB.get_method_bind("Window\000", "show\000", 3218959716)
		methodWindow[25] = classDB.get_method_bind("Window\000", "set_transient\000", 2586408642)
		methodWindow[26] = classDB.get_method_bind("Window\000", "is_transient\000", 36873697)
		methodWindow[27] = classDB.get_method_bind("Window\000", "set_exclusive\000", 2586408642)
		methodWindow[28] = classDB.get_method_bind("Window\000", "is_exclusive\000", 36873697)
		methodWindow[29] = classDB.get_method_bind("Window\000", "can_draw\000", 36873697)
		methodWindow[30] = classDB.get_method_bind("Window\000", "has_focus\000", 36873697)
		methodWindow[31] = classDB.get_method_bind("Window\000", "grab_focus\000", 3218959716)
		methodWindow[32] = classDB.get_method_bind("Window\000", "set_ime_active\000", 2586408642)
		methodWindow[33] = classDB.get_method_bind("Window\000", "set_ime_position\000", 1130785943)
		methodWindow[34] = classDB.get_method_bind("Window\000", "is_embedded\000", 36873697)
		methodWindow[35] = classDB.get_method_bind("Window\000", "get_contents_minimum_size\000", 3341600327)
		methodWindow[36] = classDB.get_method_bind("Window\000", "set_content_scale_size\000", 1130785943)
		methodWindow[37] = classDB.get_method_bind("Window\000", "get_content_scale_size\000", 3690982128)
		methodWindow[38] = classDB.get_method_bind("Window\000", "set_content_scale_mode\000", 2937716473)
		methodWindow[39] = classDB.get_method_bind("Window\000", "get_content_scale_mode\000", 161585230)
		methodWindow[40] = classDB.get_method_bind("Window\000", "set_content_scale_aspect\000", 2370399418)
		methodWindow[41] = classDB.get_method_bind("Window\000", "get_content_scale_aspect\000", 4158790715)
		methodWindow[42] = classDB.get_method_bind("Window\000", "set_content_scale_factor\000", 373806689)
		methodWindow[43] = classDB.get_method_bind("Window\000", "get_content_scale_factor\000", 1740695150)
		methodWindow[44] = classDB.get_method_bind("Window\000", "set_use_font_oversampling\000", 2586408642)
		methodWindow[45] = classDB.get_method_bind("Window\000", "is_using_font_oversampling\000", 36873697)
		methodWindow[46] = classDB.get_method_bind("Window\000", "set_wrap_controls\000", 2586408642)
		methodWindow[47] = classDB.get_method_bind("Window\000", "is_wrapping_controls\000", 36873697)
		methodWindow[48] = classDB.get_method_bind("Window\000", "child_controls_changed\000", 3218959716)
		methodWindow[49] = classDB.get_method_bind("Window\000", "set_theme\000", 2326690814)
		methodWindow[50] = classDB.get_method_bind("Window\000", "get_theme\000", 3846893731)
		methodWindow[51] = classDB.get_method_bind("Window\000", "set_theme_type_variation\000", 3304788590)
		methodWindow[52] = classDB.get_method_bind("Window\000", "get_theme_type_variation\000", 2002593661)
		methodWindow[53] = classDB.get_method_bind("Window\000", "get_theme_icon\000", 2336455395)
		methodWindow[54] = classDB.get_method_bind("Window\000", "get_theme_stylebox\000", 2759935355)
		methodWindow[55] = classDB.get_method_bind("Window\000", "get_theme_font\000", 387378635)
		methodWindow[56] = classDB.get_method_bind("Window\000", "get_theme_font_size\000", 229578101)
		methodWindow[57] = classDB.get_method_bind("Window\000", "get_theme_color\000", 2377051548)
		methodWindow[58] = classDB.get_method_bind("Window\000", "get_theme_constant\000", 229578101)
		methodWindow[59] = classDB.get_method_bind("Window\000", "has_theme_icon\000", 1187511791)
		methodWindow[60] = classDB.get_method_bind("Window\000", "has_theme_stylebox\000", 1187511791)
		methodWindow[61] = classDB.get_method_bind("Window\000", "has_theme_font\000", 1187511791)
		methodWindow[62] = classDB.get_method_bind("Window\000", "has_theme_font_size\000", 1187511791)
		methodWindow[63] = classDB.get_method_bind("Window\000", "has_theme_color\000", 1187511791)
		methodWindow[64] = classDB.get_method_bind("Window\000", "has_theme_constant\000", 1187511791)
		methodWindow[65] = classDB.get_method_bind("Window\000", "get_theme_default_base_scale\000", 1740695150)
		methodWindow[66] = classDB.get_method_bind("Window\000", "get_theme_default_font\000", 3229501585)
		methodWindow[67] = classDB.get_method_bind("Window\000", "get_theme_default_font_size\000", 3905245786)
		methodWindow[68] = classDB.get_method_bind("Window\000", "set_layout_direction\000", 3094704184)
		methodWindow[69] = classDB.get_method_bind("Window\000", "get_layout_direction\000", 3909617982)
		methodWindow[70] = classDB.get_method_bind("Window\000", "is_layout_rtl\000", 36873697)
		methodWindow[71] = classDB.get_method_bind("Window\000", "set_auto_translate\000", 2586408642)
		methodWindow[72] = classDB.get_method_bind("Window\000", "is_auto_translating\000", 36873697)
		methodWindow[73] = classDB.get_method_bind("Window\000", "popup\000", 1680304321)
		methodWindow[74] = classDB.get_method_bind("Window\000", "popup_on_parent\000", 1763793166)
		methodWindow[75] = classDB.get_method_bind("Window\000", "popup_centered_ratio\000", 1912078273)
		methodWindow[76] = classDB.get_method_bind("Window\000", "popup_centered\000", 3447975422)
		methodWindow[77] = classDB.get_method_bind("Window\000", "popup_centered_clamped\000", 3728566557)
		methodWorkerThreadPoolSingleton[0] = classDB.get_method_bind("WorkerThreadPool\000", "add_task\000", 3976347598)
		methodWorkerThreadPoolSingleton[1] = classDB.get_method_bind("WorkerThreadPool\000", "is_task_completed\000", 1116898809)
		methodWorkerThreadPoolSingleton[2] = classDB.get_method_bind("WorkerThreadPool\000", "wait_for_task_completion\000", 1286410249)
		methodWorkerThreadPoolSingleton[3] = classDB.get_method_bind("WorkerThreadPool\000", "add_group_task\000", 2377228549)
		methodWorkerThreadPoolSingleton[4] = classDB.get_method_bind("WorkerThreadPool\000", "is_group_task_completed\000", 1116898809)
		methodWorkerThreadPoolSingleton[5] = classDB.get_method_bind("WorkerThreadPool\000", "get_group_processed_element_count\000", 923996154)
		methodWorkerThreadPoolSingleton[6] = classDB.get_method_bind("WorkerThreadPool\000", "wait_for_group_task_completion\000", 1286410249)
		methodWorld2D[0] = classDB.get_method_bind("World2D\000", "get_canvas\000", 2944877500)
		methodWorld2D[1] = classDB.get_method_bind("World2D\000", "get_space\000", 2944877500)
		methodWorld2D[2] = classDB.get_method_bind("World2D\000", "get_navigation_map\000", 2944877500)
		methodWorld2D[3] = classDB.get_method_bind("World2D\000", "get_direct_space_state\000", 2506717822)
		methodWorld3D[0] = classDB.get_method_bind("World3D\000", "get_space\000", 2944877500)
		methodWorld3D[1] = classDB.get_method_bind("World3D\000", "get_navigation_map\000", 2944877500)
		methodWorld3D[2] = classDB.get_method_bind("World3D\000", "get_scenario\000", 2944877500)
		methodWorld3D[3] = classDB.get_method_bind("World3D\000", "set_environment\000", 4143518816)
		methodWorld3D[4] = classDB.get_method_bind("World3D\000", "get_environment\000", 3082064660)
		methodWorld3D[5] = classDB.get_method_bind("World3D\000", "set_fallback_environment\000", 4143518816)
		methodWorld3D[6] = classDB.get_method_bind("World3D\000", "get_fallback_environment\000", 3082064660)
		methodWorld3D[7] = classDB.get_method_bind("World3D\000", "set_camera_effects\000", 1711096158)
		methodWorld3D[8] = classDB.get_method_bind("World3D\000", "get_camera_effects\000", 2213573967)
		methodWorld3D[9] = classDB.get_method_bind("World3D\000", "get_direct_space_state\000", 2069328350)
		methodWorldBoundaryShape2D[0] = classDB.get_method_bind("WorldBoundaryShape2D\000", "set_normal\000", 743155724)
		methodWorldBoundaryShape2D[1] = classDB.get_method_bind("WorldBoundaryShape2D\000", "get_normal\000", 3341600327)
		methodWorldBoundaryShape2D[2] = classDB.get_method_bind("WorldBoundaryShape2D\000", "set_distance\000", 373806689)
		methodWorldBoundaryShape2D[3] = classDB.get_method_bind("WorldBoundaryShape2D\000", "get_distance\000", 1740695150)
		methodWorldBoundaryShape3D[0] = classDB.get_method_bind("WorldBoundaryShape3D\000", "set_plane\000", 3505987427)
		methodWorldBoundaryShape3D[1] = classDB.get_method_bind("WorldBoundaryShape3D\000", "get_plane\000", 2753500971)
		methodWorldEnvironment[0] = classDB.get_method_bind("WorldEnvironment\000", "set_environment\000", 4143518816)
		methodWorldEnvironment[1] = classDB.get_method_bind("WorldEnvironment\000", "get_environment\000", 3082064660)
		methodWorldEnvironment[2] = classDB.get_method_bind("WorldEnvironment\000", "set_camera_effects\000", 1711096158)
		methodWorldEnvironment[3] = classDB.get_method_bind("WorldEnvironment\000", "get_camera_effects\000", 2213573967)
		methodX509Certificate[0] = classDB.get_method_bind("X509Certificate\000", "save\000", 166001499)
		methodX509Certificate[1] = classDB.get_method_bind("X509Certificate\000", "load\000", 166001499)
		methodXMLParser[0] = classDB.get_method_bind("XMLParser\000", "read\000", 166280745)
		methodXMLParser[1] = classDB.get_method_bind("XMLParser\000", "get_node_type\000", 2984359541)
		methodXMLParser[2] = classDB.get_method_bind("XMLParser\000", "get_node_name\000", 201670096)
		methodXMLParser[3] = classDB.get_method_bind("XMLParser\000", "get_node_data\000", 201670096)
		methodXMLParser[4] = classDB.get_method_bind("XMLParser\000", "get_node_offset\000", 3905245786)
		methodXMLParser[5] = classDB.get_method_bind("XMLParser\000", "get_attribute_count\000", 3905245786)
		methodXMLParser[6] = classDB.get_method_bind("XMLParser\000", "get_attribute_name\000", 844755477)
		methodXMLParser[7] = classDB.get_method_bind("XMLParser\000", "get_attribute_value\000", 844755477)
		methodXMLParser[8] = classDB.get_method_bind("XMLParser\000", "has_attribute\000", 3927539163)
		methodXMLParser[9] = classDB.get_method_bind("XMLParser\000", "get_named_attribute_value\000", 3135753539)
		methodXMLParser[10] = classDB.get_method_bind("XMLParser\000", "get_named_attribute_value_safe\000", 3135753539)
		methodXMLParser[11] = classDB.get_method_bind("XMLParser\000", "is_empty\000", 36873697)
		methodXMLParser[12] = classDB.get_method_bind("XMLParser\000", "get_current_line\000", 3905245786)
		methodXMLParser[13] = classDB.get_method_bind("XMLParser\000", "skip_section\000", 3218959716)
		methodXMLParser[14] = classDB.get_method_bind("XMLParser\000", "seek\000", 844576869)
		methodXMLParser[15] = classDB.get_method_bind("XMLParser\000", "open\000", 166001499)
		methodXMLParser[16] = classDB.get_method_bind("XMLParser\000", "open_buffer\000", 680677267)
		methodXRAnchor3D[0] = classDB.get_method_bind("XRAnchor3D\000", "get_size\000", 3360562783)
		methodXRAnchor3D[1] = classDB.get_method_bind("XRAnchor3D\000", "get_plane\000", 2753500971)
		methodXRController3D[0] = classDB.get_method_bind("XRController3D\000", "is_button_pressed\000", 2619796661)
		methodXRController3D[1] = classDB.get_method_bind("XRController3D\000", "get_value\000", 2349060816)
		methodXRController3D[2] = classDB.get_method_bind("XRController3D\000", "get_axis\000", 3100822709)
		methodXRController3D[3] = classDB.get_method_bind("XRController3D\000", "get_tracker_hand\000", 4181770860)
		methodXRInterface[0] = classDB.get_method_bind("XRInterface\000", "get_name\000", 2002593661)
		methodXRInterface[1] = classDB.get_method_bind("XRInterface\000", "get_capabilities\000", 3905245786)
		methodXRInterface[2] = classDB.get_method_bind("XRInterface\000", "is_primary\000", 2240911060)
		methodXRInterface[3] = classDB.get_method_bind("XRInterface\000", "set_primary\000", 2586408642)
		methodXRInterface[4] = classDB.get_method_bind("XRInterface\000", "is_initialized\000", 36873697)
		methodXRInterface[5] = classDB.get_method_bind("XRInterface\000", "initialize\000", 2240911060)
		methodXRInterface[6] = classDB.get_method_bind("XRInterface\000", "uninitialize\000", 3218959716)
		methodXRInterface[7] = classDB.get_method_bind("XRInterface\000", "get_tracking_status\000", 167423259)
		methodXRInterface[8] = classDB.get_method_bind("XRInterface\000", "get_render_target_size\000", 1497962370)
		methodXRInterface[9] = classDB.get_method_bind("XRInterface\000", "get_view_count\000", 2455072627)
		methodXRInterface[10] = classDB.get_method_bind("XRInterface\000", "trigger_haptic_pulse\000", 3752640163)
		methodXRInterface[11] = classDB.get_method_bind("XRInterface\000", "supports_play_area_mode\000", 3429955281)
		methodXRInterface[12] = classDB.get_method_bind("XRInterface\000", "get_play_area_mode\000", 1615132885)
		methodXRInterface[13] = classDB.get_method_bind("XRInterface\000", "set_play_area_mode\000", 3429955281)
		methodXRInterface[14] = classDB.get_method_bind("XRInterface\000", "get_play_area\000", 497664490)
		methodXRInterface[15] = classDB.get_method_bind("XRInterface\000", "get_anchor_detection_is_enabled\000", 36873697)
		methodXRInterface[16] = classDB.get_method_bind("XRInterface\000", "set_anchor_detection_is_enabled\000", 2586408642)
		methodXRInterface[17] = classDB.get_method_bind("XRInterface\000", "get_camera_feed_id\000", 2455072627)
		methodXRInterfaceExtension[0] = classDB.get_method_bind("XRInterfaceExtension\000", "add_blit\000", 258596971)
		methodXRInterfaceExtension[1] = classDB.get_method_bind("XRInterfaceExtension\000", "get_render_target_texture\000", 41030802)
		methodXRNode3D[0] = classDB.get_method_bind("XRNode3D\000", "set_tracker\000", 3304788590)
		methodXRNode3D[1] = classDB.get_method_bind("XRNode3D\000", "get_tracker\000", 2002593661)
		methodXRNode3D[2] = classDB.get_method_bind("XRNode3D\000", "set_pose_name\000", 3304788590)
		methodXRNode3D[3] = classDB.get_method_bind("XRNode3D\000", "get_pose_name\000", 2002593661)
		methodXRNode3D[4] = classDB.get_method_bind("XRNode3D\000", "get_is_active\000", 36873697)
		methodXRNode3D[5] = classDB.get_method_bind("XRNode3D\000", "get_has_tracking_data\000", 36873697)
		methodXRNode3D[6] = classDB.get_method_bind("XRNode3D\000", "get_pose\000", 2806551826)
		methodXRNode3D[7] = classDB.get_method_bind("XRNode3D\000", "trigger_haptic_pulse\000", 508576839)
		methodXROrigin3D[0] = classDB.get_method_bind("XROrigin3D\000", "set_world_scale\000", 373806689)
		methodXROrigin3D[1] = classDB.get_method_bind("XROrigin3D\000", "get_world_scale\000", 1740695150)
		methodXRPose[0] = classDB.get_method_bind("XRPose\000", "set_has_tracking_data\000", 2586408642)
		methodXRPose[1] = classDB.get_method_bind("XRPose\000", "get_has_tracking_data\000", 36873697)
		methodXRPose[2] = classDB.get_method_bind("XRPose\000", "set_name\000", 3304788590)
		methodXRPose[3] = classDB.get_method_bind("XRPose\000", "get_name\000", 2002593661)
		methodXRPose[4] = classDB.get_method_bind("XRPose\000", "set_transform\000", 2952846383)
		methodXRPose[5] = classDB.get_method_bind("XRPose\000", "get_transform\000", 3229777777)
		methodXRPose[6] = classDB.get_method_bind("XRPose\000", "get_adjusted_transform\000", 3229777777)
		methodXRPose[7] = classDB.get_method_bind("XRPose\000", "set_linear_velocity\000", 3460891852)
		methodXRPose[8] = classDB.get_method_bind("XRPose\000", "get_linear_velocity\000", 3360562783)
		methodXRPose[9] = classDB.get_method_bind("XRPose\000", "set_angular_velocity\000", 3460891852)
		methodXRPose[10] = classDB.get_method_bind("XRPose\000", "get_angular_velocity\000", 3360562783)
		methodXRPose[11] = classDB.get_method_bind("XRPose\000", "set_tracking_confidence\000", 4171656666)
		methodXRPose[12] = classDB.get_method_bind("XRPose\000", "get_tracking_confidence\000", 2064923680)
		methodXRPositionalTracker[0] = classDB.get_method_bind("XRPositionalTracker\000", "get_tracker_type\000", 2784508102)
		methodXRPositionalTracker[1] = classDB.get_method_bind("XRPositionalTracker\000", "set_tracker_type\000", 3055763575)
		methodXRPositionalTracker[2] = classDB.get_method_bind("XRPositionalTracker\000", "get_tracker_name\000", 2002593661)
		methodXRPositionalTracker[3] = classDB.get_method_bind("XRPositionalTracker\000", "set_tracker_name\000", 3304788590)
		methodXRPositionalTracker[4] = classDB.get_method_bind("XRPositionalTracker\000", "get_tracker_desc\000", 201670096)
		methodXRPositionalTracker[5] = classDB.get_method_bind("XRPositionalTracker\000", "set_tracker_desc\000", 83702148)
		methodXRPositionalTracker[6] = classDB.get_method_bind("XRPositionalTracker\000", "get_tracker_profile\000", 201670096)
		methodXRPositionalTracker[7] = classDB.get_method_bind("XRPositionalTracker\000", "set_tracker_profile\000", 83702148)
		methodXRPositionalTracker[8] = classDB.get_method_bind("XRPositionalTracker\000", "get_tracker_hand\000", 4181770860)
		methodXRPositionalTracker[9] = classDB.get_method_bind("XRPositionalTracker\000", "set_tracker_hand\000", 3904108980)
		methodXRPositionalTracker[10] = classDB.get_method_bind("XRPositionalTracker\000", "has_pose\000", 2619796661)
		methodXRPositionalTracker[11] = classDB.get_method_bind("XRPositionalTracker\000", "get_pose\000", 4099720006)
		methodXRPositionalTracker[12] = classDB.get_method_bind("XRPositionalTracker\000", "invalidate_pose\000", 3304788590)
		methodXRPositionalTracker[13] = classDB.get_method_bind("XRPositionalTracker\000", "set_pose\000", 3451230163)
		methodXRPositionalTracker[14] = classDB.get_method_bind("XRPositionalTracker\000", "get_input\000", 2760726917)
		methodXRPositionalTracker[15] = classDB.get_method_bind("XRPositionalTracker\000", "set_input\000", 3776071444)
		methodXRServerSingleton[0] = classDB.get_method_bind("XRServer\000", "get_world_scale\000", 1740695150)
		methodXRServerSingleton[1] = classDB.get_method_bind("XRServer\000", "set_world_scale\000", 373806689)
		methodXRServerSingleton[2] = classDB.get_method_bind("XRServer\000", "get_reference_frame\000", 3229777777)
		methodXRServerSingleton[3] = classDB.get_method_bind("XRServer\000", "center_on_hmd\000", 1450904707)
		methodXRServerSingleton[4] = classDB.get_method_bind("XRServer\000", "get_hmd_transform\000", 4183770049)
		methodXRServerSingleton[5] = classDB.get_method_bind("XRServer\000", "add_interface\000", 1898711491)
		methodXRServerSingleton[6] = classDB.get_method_bind("XRServer\000", "get_interface_count\000", 3905245786)
		methodXRServerSingleton[7] = classDB.get_method_bind("XRServer\000", "remove_interface\000", 1898711491)
		methodXRServerSingleton[8] = classDB.get_method_bind("XRServer\000", "get_interface\000", 4237347919)
		methodXRServerSingleton[9] = classDB.get_method_bind("XRServer\000", "get_interfaces\000", 3995934104)
		methodXRServerSingleton[10] = classDB.get_method_bind("XRServer\000", "find_interface\000", 1395192955)
		methodXRServerSingleton[11] = classDB.get_method_bind("XRServer\000", "add_tracker\000", 2692800323)
		methodXRServerSingleton[12] = classDB.get_method_bind("XRServer\000", "remove_tracker\000", 2692800323)
		methodXRServerSingleton[13] = classDB.get_method_bind("XRServer\000", "get_trackers\000", 3554694381)
		methodXRServerSingleton[14] = classDB.get_method_bind("XRServer\000", "get_tracker\000", 2742084544)
		methodXRServerSingleton[15] = classDB.get_method_bind("XRServer\000", "get_primary_interface\000", 2143545064)
		methodXRServerSingleton[16] = classDB.get_method_bind("XRServer\000", "set_primary_interface\000", 1898711491)
	}
}

